; ModuleID = '../../third_party/pdfium/third_party/bigint/BigUnsignedInABase.cc'
source_filename = "../../third_party/pdfium/third_party/bigint/BigUnsignedInABase.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.BigUnsignedInABase = type <{ %class.NumberlikeArray, i16, [6 x i8] }>
%class.NumberlikeArray = type { i32, i32, i16* }
%class.BigUnsigned = type { %class.NumberlikeArray.0 }
%class.NumberlikeArray.0 = type { i32, i32, i64* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }

@_ZN18BigUnsignedInABaseC1EPKtjt = hidden unnamed_addr alias void (%class.BigUnsignedInABase*, i16*, i32, i16), void (%class.BigUnsignedInABase*, i16*, i32, i16)* @_ZN18BigUnsignedInABaseC2EPKtjt
@_ZN18BigUnsignedInABaseC1ERK11BigUnsignedt = hidden unnamed_addr alias void (%class.BigUnsignedInABase*, %class.BigUnsigned*, i16), void (%class.BigUnsignedInABase*, %class.BigUnsigned*, i16)* @_ZN18BigUnsignedInABaseC2ERK11BigUnsignedt
@_ZN18BigUnsignedInABaseC1ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEt = hidden unnamed_addr alias void (%class.BigUnsignedInABase*, %"class.std::__1::basic_string"*, i16), void (%class.BigUnsignedInABase*, %"class.std::__1::basic_string"*, i16)* @_ZN18BigUnsignedInABaseC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEt

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18BigUnsignedInABaseC2EPKtjt(%class.BigUnsignedInABase* nocapture, i16* nocapture readonly, i32, i16 zeroext) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.BigUnsignedInABase, %class.BigUnsignedInABase* %0, i64 0, i32 0, i32 0
  store i32 %2, i32* %5, align 8
  %6 = getelementptr inbounds %class.BigUnsignedInABase, %class.BigUnsignedInABase* %0, i64 0, i32 0, i32 1
  store i32 %2, i32* %6, align 4
  %7 = zext i32 %2 to i64
  %8 = shl nuw nsw i64 %7, 1
  %9 = tail call i8* @_Znam(i64 %8) #9
  %10 = getelementptr inbounds %class.BigUnsignedInABase, %class.BigUnsignedInABase* %0, i64 0, i32 0, i32 2
  %11 = bitcast i16** %10 to i8**
  store i8* %9, i8** %11, align 8
  %12 = icmp eq i32 %2, 0
  br i1 %12, label %34, label %13

13:                                               ; preds = %4
  %14 = bitcast i8* %9 to i16*
  %15 = load i16, i16* %1, align 2
  store i16 %15, i16* %14, align 2
  %16 = icmp eq i32 %2, 1
  br i1 %16, label %34, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds i16, i16* %1, i64 1
  %19 = load i16, i16* %18, align 2
  %20 = getelementptr inbounds i8, i8* %9, i64 2
  %21 = bitcast i8* %20 to i16*
  store i16 %19, i16* %21, align 2
  %22 = load i32, i32* %6, align 4
  %23 = icmp ugt i32 %22, 2
  br i1 %23, label %24, label %34

24:                                               ; preds = %17, %24
  %25 = phi i64 [ %30, %24 ], [ 2, %17 ]
  %26 = load i16*, i16** %10, align 8
  %27 = getelementptr inbounds i16, i16* %1, i64 %25
  %28 = load i16, i16* %27, align 2
  %29 = getelementptr inbounds i16, i16* %26, i64 %25
  store i16 %28, i16* %29, align 2
  %30 = add nuw nsw i64 %25, 1
  %31 = load i32, i32* %6, align 4
  %32 = zext i32 %31 to i64
  %33 = icmp ult i64 %30, %32
  br i1 %33, label %24, label %34

34:                                               ; preds = %24, %17, %13, %4
  %35 = phi i32 [ 1, %13 ], [ 0, %4 ], [ %22, %17 ], [ %31, %24 ]
  %36 = getelementptr inbounds %class.BigUnsignedInABase, %class.BigUnsignedInABase* %0, i64 0, i32 1
  store i16 %3, i16* %36, align 8
  %37 = icmp ult i16 %3, 2
  br i1 %37, label %41, label %38

38:                                               ; preds = %34
  br i1 %12, label %44, label %39

39:                                               ; preds = %38
  %40 = load i16*, i16** %10, align 8
  br label %61

41:                                               ; preds = %34
  tail call void @abort() #10
  unreachable

42:                                               ; preds = %61
  %43 = icmp eq i64 %66, %7
  br i1 %43, label %44, label %61

44:                                               ; preds = %42, %38
  %45 = icmp eq i32 %35, 0
  br i1 %45, label %60, label %46

46:                                               ; preds = %44
  %47 = zext i32 %35 to i64
  %48 = load i16*, i16** %10, align 8
  br label %49

49:                                               ; preds = %57, %46
  %50 = phi i64 [ %47, %46 ], [ %59, %57 ]
  %51 = trunc i64 %50 to i32
  %52 = add i32 %51, -1
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds i16, i16* %48, i64 %53
  %55 = load i16, i16* %54, align 2
  %56 = icmp eq i16 %55, 0
  br i1 %56, label %57, label %60

57:                                               ; preds = %49
  store i32 %52, i32* %6, align 4
  %58 = icmp eq i32 %52, 0
  %59 = add nsw i64 %50, -1
  br i1 %58, label %60, label %49

60:                                               ; preds = %49, %57, %44
  ret void

61:                                               ; preds = %42, %39
  %62 = phi i64 [ 0, %39 ], [ %66, %42 ]
  %63 = getelementptr inbounds i16, i16* %40, i64 %62
  %64 = load i16, i16* %63, align 2
  %65 = icmp ult i16 %64, %3
  %66 = add nuw nsw i64 %62, 1
  br i1 %65, label %42, label %67

67:                                               ; preds = %61
  tail call void @abort() #10
  unreachable
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18BigUnsignedInABaseC2ERK11BigUnsignedt(%class.BigUnsignedInABase* nocapture, %class.BigUnsigned* nocapture readonly dereferenceable(16), i16 zeroext) unnamed_addr #0 align 2 {
  %4 = alloca %class.BigUnsigned, align 8
  %5 = alloca %class.BigUnsigned, align 8
  %6 = alloca %class.BigUnsigned, align 8
  %7 = bitcast %class.BigUnsignedInABase* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false) #11
  %8 = icmp ult i16 %2, 2
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  tail call void @abort() #10
  unreachable

10:                                               ; preds = %3
  %11 = getelementptr inbounds %class.BigUnsignedInABase, %class.BigUnsignedInABase* %0, i64 0, i32 1
  store i16 %2, i16* %11, align 8
  %12 = getelementptr inbounds %class.BigUnsigned, %class.BigUnsigned* %1, i64 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = shl i32 %13, 6
  %15 = zext i16 %2 to i32
  %16 = tail call i32 @llvm.ctlz.i32(i32 %15, i1 true) #11, !range !2
  %17 = xor i32 %16, 31
  %18 = add nsw i32 %17, -1
  %19 = add i32 %18, %14
  %20 = udiv i32 %19, %17
  %21 = getelementptr inbounds %class.BigUnsignedInABase, %class.BigUnsignedInABase* %0, i64 0, i32 0, i32 1
  store i32 %20, i32* %21, align 4
  %22 = icmp ugt i32 %17, %19
  br i1 %22, label %30, label %23

23:                                               ; preds = %10
  %24 = getelementptr inbounds %class.BigUnsignedInABase, %class.BigUnsignedInABase* %0, i64 0, i32 0, i32 0
  %25 = getelementptr inbounds %class.BigUnsignedInABase, %class.BigUnsignedInABase* %0, i64 0, i32 0, i32 2
  store i32 %20, i32* %24, align 8
  %26 = zext i32 %20 to i64
  %27 = shl nuw nsw i64 %26, 1
  %28 = tail call i8* @_Znam(i64 %27) #9
  %29 = bitcast i16** %25 to i8**
  store i8* %28, i8** %29, align 8
  br label %30

30:                                               ; preds = %10, %23
  %31 = bitcast %class.BigUnsigned* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #11
  %32 = getelementptr inbounds %class.BigUnsigned, %class.BigUnsigned* %4, i64 0, i32 0, i32 0
  %33 = getelementptr inbounds %class.BigUnsigned, %class.BigUnsigned* %4, i64 0, i32 0, i32 1
  %34 = getelementptr inbounds %class.BigUnsigned, %class.BigUnsigned* %4, i64 0, i32 0, i32 2
  %35 = load i32, i32* %12, align 4
  store i32 %35, i32* %33, align 4
  store i32 %35, i32* %32, align 8
  %36 = zext i32 %35 to i64
  %37 = shl nuw nsw i64 %36, 3
  %38 = tail call i8* @_Znam(i64 %37) #9
  %39 = bitcast i64** %34 to i8**
  store i8* %38, i8** %39, align 8
  %40 = icmp eq i32 %35, 0
  br i1 %40, label %71, label %41

41:                                               ; preds = %30
  %42 = bitcast i8* %38 to i64*
  %43 = getelementptr inbounds %class.BigUnsigned, %class.BigUnsigned* %1, i64 0, i32 0, i32 2
  %44 = load i64*, i64** %43, align 8
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %42, align 8
  %46 = icmp eq i32 %35, 1
  br i1 %46, label %71, label %47

47:                                               ; preds = %41
  %48 = getelementptr inbounds i64, i64* %44, i64 1
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds i8, i8* %38, i64 8
  %51 = bitcast i8* %50 to i64*
  store i64 %49, i64* %51, align 8
  %52 = icmp ugt i32 %35, 2
  br i1 %52, label %53, label %71

53:                                               ; preds = %47
  %54 = getelementptr inbounds i64, i64* %44, i64 2
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds i8, i8* %38, i64 16
  %57 = bitcast i8* %56 to i64*
  store i64 %55, i64* %57, align 8
  %58 = load i32, i32* %33, align 4
  %59 = icmp ugt i32 %58, 3
  br i1 %59, label %60, label %71

60:                                               ; preds = %53, %60
  %61 = phi i64 [ %67, %60 ], [ 3, %53 ]
  %62 = load i64*, i64** %34, align 8
  %63 = load i64*, i64** %43, align 8
  %64 = getelementptr inbounds i64, i64* %63, i64 %61
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds i64, i64* %62, i64 %61
  store i64 %65, i64* %66, align 8
  %67 = add nuw nsw i64 %61, 1
  %68 = load i32, i32* %33, align 4
  %69 = zext i32 %68 to i64
  %70 = icmp ult i64 %67, %69
  br i1 %70, label %60, label %71

71:                                               ; preds = %60, %53, %47, %30, %41
  %72 = phi i32 [ 2, %47 ], [ 0, %30 ], [ 1, %41 ], [ %58, %53 ], [ %68, %60 ]
  %73 = bitcast %class.BigUnsigned* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %73) #11
  %74 = getelementptr inbounds %class.BigUnsigned, %class.BigUnsigned* %5, i64 0, i32 0, i32 2
  %75 = bitcast %class.BigUnsigned* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %75, i8 -86, i64 16, i1 false)
  call void @_ZN11BigUnsignedC1Et(%class.BigUnsigned* nonnull %5, i16 zeroext %2) #11
  %76 = icmp eq i32 %72, 0
  br i1 %76, label %131, label %77

77:                                               ; preds = %71
  %78 = bitcast %class.BigUnsigned* %6 to i8*
  %79 = getelementptr inbounds %class.BigUnsigned, %class.BigUnsigned* %6, i64 0, i32 0, i32 0
  %80 = getelementptr inbounds %class.BigUnsigned, %class.BigUnsigned* %6, i64 0, i32 0, i32 1
  %81 = getelementptr inbounds %class.BigUnsigned, %class.BigUnsigned* %6, i64 0, i32 0, i32 2
  %82 = bitcast i64** %81 to i8**
  %83 = getelementptr inbounds %class.BigUnsignedInABase, %class.BigUnsignedInABase* %0, i64 0, i32 0, i32 2
  br label %84

84:                                               ; preds = %77, %128
  %85 = phi i32 [ %72, %77 ], [ %129, %128 ]
  %86 = phi i32 [ 0, %77 ], [ %123, %128 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %78) #11
  store i32 %85, i32* %80, align 4
  store i32 %85, i32* %79, align 8
  %87 = zext i32 %85 to i64
  %88 = shl nuw nsw i64 %87, 3
  %89 = call i8* @_Znam(i64 %88) #9
  store i8* %89, i8** %82, align 8
  %90 = bitcast i8* %89 to i64*
  %91 = load i64*, i64** %34, align 8
  %92 = load i64, i64* %91, align 8
  store i64 %92, i64* %90, align 8
  %93 = icmp eq i32 %85, 1
  br i1 %93, label %118, label %94

94:                                               ; preds = %84
  %95 = getelementptr inbounds i64, i64* %91, i64 1
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr inbounds i8, i8* %89, i64 8
  %98 = bitcast i8* %97 to i64*
  store i64 %96, i64* %98, align 8
  %99 = icmp ugt i32 %85, 2
  br i1 %99, label %100, label %118

100:                                              ; preds = %94
  %101 = getelementptr inbounds i64, i64* %91, i64 2
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr inbounds i8, i8* %89, i64 16
  %104 = bitcast i8* %103 to i64*
  store i64 %102, i64* %104, align 8
  %105 = load i32, i32* %80, align 4
  %106 = icmp ugt i32 %105, 3
  br i1 %106, label %107, label %118

107:                                              ; preds = %100, %107
  %108 = phi i64 [ %114, %107 ], [ 3, %100 ]
  %109 = load i64*, i64** %81, align 8
  %110 = load i64*, i64** %34, align 8
  %111 = getelementptr inbounds i64, i64* %110, i64 %108
  %112 = load i64, i64* %111, align 8
  %113 = getelementptr inbounds i64, i64* %109, i64 %108
  store i64 %112, i64* %113, align 8
  %114 = add nuw nsw i64 %108, 1
  %115 = load i32, i32* %80, align 4
  %116 = zext i32 %115 to i64
  %117 = icmp ult i64 %114, %116
  br i1 %117, label %107, label %118

118:                                              ; preds = %107, %100, %94, %84
  call void @_ZN11BigUnsigned19divideWithRemainderERKS_RS_(%class.BigUnsigned* nonnull %6, %class.BigUnsigned* nonnull dereferenceable(16) %5, %class.BigUnsigned* nonnull dereferenceable(16) %4) #11
  %119 = call zeroext i16 @_ZNK11BigUnsigned15toUnsignedShortEv(%class.BigUnsigned* nonnull %6) #11
  %120 = load i16*, i16** %83, align 8
  %121 = zext i32 %86 to i64
  %122 = getelementptr inbounds i16, i16* %120, i64 %121
  store i16 %119, i16* %122, align 2
  %123 = add i32 %86, 1
  %124 = load i64*, i64** %81, align 8
  %125 = icmp eq i64* %124, null
  br i1 %125, label %128, label %126

126:                                              ; preds = %118
  %127 = bitcast i64* %124 to i8*
  call void @_ZdaPv(i8* %127) #9
  br label %128

128:                                              ; preds = %118, %126
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %78) #11
  %129 = load i32, i32* %33, align 4
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %84

131:                                              ; preds = %128, %71
  %132 = phi i32 [ 0, %71 ], [ %123, %128 ]
  store i32 %132, i32* %21, align 4
  %133 = load i64*, i64** %74, align 8
  %134 = icmp eq i64* %133, null
  br i1 %134, label %137, label %135

135:                                              ; preds = %131
  %136 = bitcast i64* %133 to i8*
  call void @_ZdaPv(i8* %136) #9
  br label %137

137:                                              ; preds = %131, %135
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %73) #11
  %138 = load i64*, i64** %34, align 8
  %139 = icmp eq i64* %138, null
  br i1 %139, label %142, label %140

140:                                              ; preds = %137
  %141 = bitcast i64* %138 to i8*
  call void @_ZdaPv(i8* %141) #9
  br label %142

142:                                              ; preds = %137, %140
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31) #11
  ret void
}

declare void @_ZN11BigUnsignedC1Et(%class.BigUnsigned*, i16 zeroext) unnamed_addr #3

declare void @_ZN11BigUnsigned19divideWithRemainderERKS_RS_(%class.BigUnsigned*, %class.BigUnsigned* dereferenceable(16), %class.BigUnsigned* dereferenceable(16)) local_unnamed_addr #3

declare zeroext i16 @_ZNK11BigUnsigned15toUnsignedShortEv(%class.BigUnsigned*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK18BigUnsignedInABasecv11BigUnsignedEv(%class.BigUnsigned* noalias sret, %class.BigUnsignedInABase* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.BigUnsigned, align 8
  %4 = alloca %class.BigUnsigned, align 8
  %5 = alloca %class.BigUnsigned, align 8
  %6 = bitcast %class.BigUnsigned* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 -86, i64 16, i1 false)
  tail call void @_ZN11BigUnsignedC1Ei(%class.BigUnsigned* %0, i32 0) #11
  %7 = bitcast %class.BigUnsigned* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #11
  %8 = getelementptr inbounds %class.BigUnsigned, %class.BigUnsigned* %3, i64 0, i32 0, i32 2
  %9 = getelementptr inbounds %class.BigUnsignedInABase, %class.BigUnsignedInABase* %1, i64 0, i32 1
  %10 = bitcast %class.BigUnsigned* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 16, i1 false)
  %11 = load i16, i16* %9, align 8
  call void @_ZN11BigUnsignedC1Et(%class.BigUnsigned* nonnull %3, i16 zeroext %11) #11
  %12 = bitcast %class.BigUnsigned* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #11
  %13 = getelementptr inbounds %class.BigUnsigned, %class.BigUnsigned* %4, i64 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 0, i64 16, i1 false) #11
  %14 = getelementptr inbounds %class.BigUnsignedInABase, %class.BigUnsignedInABase* %1, i64 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %42, label %17

17:                                               ; preds = %2
  %18 = bitcast %class.BigUnsigned* %5 to i8*
  %19 = getelementptr inbounds %class.BigUnsignedInABase, %class.BigUnsignedInABase* %1, i64 0, i32 0, i32 2
  %20 = getelementptr inbounds %class.BigUnsigned, %class.BigUnsigned* %5, i64 0, i32 0, i32 2
  %21 = zext i32 %15 to i64
  br label %22

22:                                               ; preds = %17, %34
  %23 = phi i64 [ %21, %17 ], [ %36, %34 ]
  %24 = trunc i64 %23 to i32
  %25 = add i32 %24, -1
  call void @_ZN11BigUnsigned8multiplyERKS_S1_(%class.BigUnsigned* nonnull %4, %class.BigUnsigned* dereferenceable(16) %0, %class.BigUnsigned* nonnull dereferenceable(16) %3) #11
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #11
  %26 = load i16*, i16** %19, align 8
  %27 = zext i32 %25 to i64
  %28 = getelementptr inbounds i16, i16* %26, i64 %27
  %29 = load i16, i16* %28, align 2
  call void @_ZN11BigUnsignedC1Et(%class.BigUnsigned* nonnull %5, i16 zeroext %29) #11
  call void @_ZN11BigUnsigned3addERKS_S1_(%class.BigUnsigned* %0, %class.BigUnsigned* nonnull dereferenceable(16) %4, %class.BigUnsigned* nonnull dereferenceable(16) %5) #11
  %30 = load i64*, i64** %20, align 8
  %31 = icmp eq i64* %30, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %22
  %33 = bitcast i64* %30 to i8*
  call void @_ZdaPv(i8* %33) #9
  br label %34

34:                                               ; preds = %22, %32
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #11
  %35 = icmp eq i32 %25, 0
  %36 = add nsw i64 %23, -1
  br i1 %35, label %37, label %22

37:                                               ; preds = %34
  %38 = load i64*, i64** %13, align 8
  %39 = icmp eq i64* %38, null
  br i1 %39, label %42, label %40

40:                                               ; preds = %37
  %41 = bitcast i64* %38 to i8*
  call void @_ZdaPv(i8* %41) #9
  br label %42

42:                                               ; preds = %2, %37, %40
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #11
  %43 = load i64*, i64** %8, align 8
  %44 = icmp eq i64* %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %42
  %46 = bitcast i64* %43 to i8*
  call void @_ZdaPv(i8* %46) #9
  br label %47

47:                                               ; preds = %42, %45
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #11
  ret void
}

declare void @_ZN11BigUnsignedC1Ei(%class.BigUnsigned*, i32) unnamed_addr #3

declare void @_ZN11BigUnsigned8multiplyERKS_S1_(%class.BigUnsigned*, %class.BigUnsigned* dereferenceable(16), %class.BigUnsigned* dereferenceable(16)) local_unnamed_addr #3

declare void @_ZN11BigUnsigned3addERKS_S1_(%class.BigUnsigned*, %class.BigUnsigned* dereferenceable(16), %class.BigUnsigned* dereferenceable(16)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18BigUnsignedInABaseC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEt(%class.BigUnsignedInABase* nocapture, %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24), i16 zeroext) unnamed_addr #0 align 2 {
  %4 = bitcast %class.BigUnsignedInABase* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 16, i1 false) #11
  %5 = icmp ugt i16 %2, 36
  br i1 %5, label %6, label %7

6:                                                ; preds = %3
  tail call void @abort() #10
  unreachable

7:                                                ; preds = %3
  %8 = getelementptr inbounds %class.BigUnsignedInABase, %class.BigUnsignedInABase* %0, i64 0, i32 1
  store i16 %2, i16* %8, align 8
  %9 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = zext i8 %11 to i64
  %16 = select i1 %12, i64 %14, i64 %15
  %17 = trunc i64 %16 to i32
  %18 = getelementptr inbounds %class.BigUnsignedInABase, %class.BigUnsignedInABase* %0, i64 0, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = icmp eq i32 %17, 0
  br i1 %19, label %85, label %20

20:                                               ; preds = %7
  %21 = getelementptr inbounds %class.BigUnsignedInABase, %class.BigUnsignedInABase* %0, i64 0, i32 0, i32 0
  %22 = getelementptr inbounds %class.BigUnsignedInABase, %class.BigUnsignedInABase* %0, i64 0, i32 0, i32 2
  store i32 %17, i32* %21, align 8
  %23 = shl i64 %16, 1
  %24 = and i64 %23, 8589934590
  %25 = tail call i8* @_Znam(i64 %24) #9
  %26 = bitcast i16** %22 to i8**
  store i8* %25, i8** %26, align 8
  %27 = bitcast i8* %25 to i16*
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %30 = getelementptr inbounds %class.BigUnsignedInABase, %class.BigUnsignedInABase* %0, i64 0, i32 0, i32 2
  br label %36

31:                                               ; preds = %59
  %32 = add nuw i32 %40, 1
  %33 = load i32, i32* %18, align 4
  %34 = zext i32 %33 to i64
  %35 = icmp ult i64 %68, %34
  br i1 %35, label %36, label %70

36:                                               ; preds = %20, %31
  %37 = phi i16* [ %27, %20 ], [ %64, %31 ]
  %38 = phi i64 [ 0, %20 ], [ %68, %31 ]
  %39 = phi i32 [ %17, %20 ], [ %33, %31 ]
  %40 = phi i32 [ 0, %20 ], [ %32, %31 ]
  %41 = xor i32 %40, -1
  %42 = add i32 %39, %41
  %43 = zext i32 %42 to i64
  %44 = load i8, i8* %10, align 1
  %45 = icmp slt i8 %44, 0
  %46 = load i8*, i8** %28, align 8
  %47 = select i1 %45, i8* %46, i8* %29
  %48 = getelementptr inbounds i8, i8* %47, i64 %43
  %49 = load i8, i8* %48, align 1
  %50 = add i8 %49, -48
  %51 = icmp ult i8 %50, 10
  br i1 %51, label %59, label %52

52:                                               ; preds = %36
  %53 = add i8 %49, -65
  %54 = icmp ult i8 %53, 26
  br i1 %54, label %59, label %55

55:                                               ; preds = %52
  %56 = add i8 %49, -97
  %57 = icmp ult i8 %56, 26
  br i1 %57, label %59, label %58

58:                                               ; preds = %55
  tail call void @abort() #10
  unreachable

59:                                               ; preds = %55, %52, %36
  %60 = phi i16 [ -48, %36 ], [ -55, %52 ], [ -87, %55 ]
  %61 = sext i8 %49 to i16
  %62 = add nsw i16 %60, %61
  %63 = getelementptr inbounds i16, i16* %37, i64 %38
  store i16 %62, i16* %63, align 2
  %64 = load i16*, i16** %30, align 8
  %65 = getelementptr inbounds i16, i16* %64, i64 %38
  %66 = load i16, i16* %65, align 2
  %67 = icmp ult i16 %66, %2
  %68 = add nuw nsw i64 %38, 1
  br i1 %67, label %31, label %69

69:                                               ; preds = %59
  tail call void @abort() #10
  unreachable

70:                                               ; preds = %31
  %71 = icmp eq i32 %33, 0
  br i1 %71, label %85, label %72

72:                                               ; preds = %70
  %73 = zext i32 %33 to i64
  br label %74

74:                                               ; preds = %82, %72
  %75 = phi i64 [ %73, %72 ], [ %84, %82 ]
  %76 = trunc i64 %75 to i32
  %77 = add i32 %76, -1
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds i16, i16* %64, i64 %78
  %80 = load i16, i16* %79, align 2
  %81 = icmp eq i16 %80, 0
  br i1 %81, label %82, label %85

82:                                               ; preds = %74
  store i32 %77, i32* %18, align 4
  %83 = icmp eq i32 %77, 0
  %84 = add nsw i64 %75, -1
  br i1 %83, label %85, label %74

85:                                               ; preds = %74, %82, %7, %70
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK18BigUnsignedInABasecvNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEEv(%"class.std::__1::basic_string"* noalias sret, %class.BigUnsignedInABase* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = getelementptr inbounds %class.BigUnsignedInABase, %class.BigUnsignedInABase* %1, i64 0, i32 1
  %5 = load i16, i16* %4, align 8
  %6 = icmp ugt i16 %5, 36
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  tail call void @abort() #10
  unreachable

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.BigUnsignedInABase, %class.BigUnsignedInABase* %1, i64 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %17

12:                                               ; preds = %8
  %13 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %14 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %13, i64 0, i32 1, i32 0
  store i8 1, i8* %14, align 1
  %15 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  store i8 48, i8* %15, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8 0, i8* %16, align 1
  br label %194

17:                                               ; preds = %8
  %18 = add i32 %10, 1
  %19 = zext i32 %18 to i64
  %20 = tail call i8* @_Znam(i64 %19) #9
  %21 = zext i32 %10 to i64
  %22 = getelementptr inbounds i8, i8* %20, i64 %21
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds %class.BigUnsignedInABase, %class.BigUnsignedInABase* %1, i64 0, i32 0, i32 2
  %24 = load i16*, i16** %23, align 8
  %25 = icmp ult i32 %10, 8
  br i1 %25, label %115, label %26

26:                                               ; preds = %17
  %27 = add nsw i64 %21, -1
  %28 = add i32 %10, -1
  %29 = trunc i64 %27 to i32
  %30 = icmp ult i32 %28, %29
  %31 = icmp ugt i64 %27, 4294967295
  %32 = or i1 %30, %31
  br i1 %32, label %115, label %33

33:                                               ; preds = %26
  %34 = getelementptr i8, i8* %20, i64 %21
  %35 = add i32 %10, -1
  %36 = zext i32 %35 to i64
  %37 = add nuw nsw i64 %36, 1
  %38 = sub nsw i64 %37, %21
  %39 = getelementptr i16, i16* %24, i64 %38
  %40 = bitcast i16* %39 to i8*
  %41 = add nuw nsw i64 %36, 1
  %42 = getelementptr i16, i16* %24, i64 %41
  %43 = bitcast i16* %42 to i8*
  %44 = icmp ult i8* %20, %43
  %45 = icmp ugt i8* %34, %40
  %46 = and i1 %44, %45
  br i1 %46, label %115, label %47

47:                                               ; preds = %33
  %48 = and i64 %21, 4294967288
  %49 = trunc i64 %48 to i32
  %50 = add nsw i64 %48, -8
  %51 = lshr exact i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = and i64 %52, 1
  %54 = icmp eq i64 %50, 0
  br i1 %54, label %94, label %55

55:                                               ; preds = %47
  %56 = sub nuw nsw i64 %52, %53
  %57 = getelementptr inbounds i16, i16* %24, i64 -7
  %58 = getelementptr inbounds i16, i16* %24, i64 -7
  br label %59

59:                                               ; preds = %59, %55
  %60 = phi i64 [ 0, %55 ], [ %91, %59 ]
  %61 = phi i64 [ %56, %55 ], [ %92, %59 ]
  %62 = trunc i64 %60 to i32
  %63 = xor i32 %62, -1
  %64 = add i32 %10, %63
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds i16, i16* %57, i64 %65
  %67 = bitcast i16* %66 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !3
  %69 = shufflevector <8 x i16> %68, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %70 = icmp ult <8 x i16> %69, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %71 = trunc <8 x i16> %69 to <8 x i8>
  %72 = select <8 x i1> %70, <8 x i8> <i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48>, <8 x i8> <i8 55, i8 55, i8 55, i8 55, i8 55, i8 55, i8 55, i8 55>
  %73 = add <8 x i8> %72, %71
  %74 = getelementptr inbounds i8, i8* %20, i64 %60
  %75 = bitcast i8* %74 to <8 x i8>*
  store <8 x i8> %73, <8 x i8>* %75, align 1, !alias.scope !6, !noalias !3
  %76 = or i64 %60, 8
  %77 = trunc i64 %76 to i32
  %78 = xor i32 %77, -1
  %79 = add i32 %10, %78
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds i16, i16* %58, i64 %80
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !3
  %84 = shufflevector <8 x i16> %83, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %85 = icmp ult <8 x i16> %84, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %86 = trunc <8 x i16> %84 to <8 x i8>
  %87 = select <8 x i1> %85, <8 x i8> <i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48>, <8 x i8> <i8 55, i8 55, i8 55, i8 55, i8 55, i8 55, i8 55, i8 55>
  %88 = add <8 x i8> %87, %86
  %89 = getelementptr inbounds i8, i8* %20, i64 %76
  %90 = bitcast i8* %89 to <8 x i8>*
  store <8 x i8> %88, <8 x i8>* %90, align 1, !alias.scope !6, !noalias !3
  %91 = add i64 %60, 16
  %92 = add i64 %61, -2
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %59, !llvm.loop !8

94:                                               ; preds = %59, %47
  %95 = phi i64 [ 0, %47 ], [ %91, %59 ]
  %96 = icmp eq i64 %53, 0
  br i1 %96, label %113, label %97

97:                                               ; preds = %94
  %98 = trunc i64 %95 to i32
  %99 = xor i32 %98, -1
  %100 = add i32 %10, %99
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds i16, i16* %24, i64 -7
  %103 = getelementptr inbounds i16, i16* %102, i64 %101
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !3
  %106 = shufflevector <8 x i16> %105, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %107 = icmp ult <8 x i16> %106, <i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10, i16 10>
  %108 = trunc <8 x i16> %106 to <8 x i8>
  %109 = select <8 x i1> %107, <8 x i8> <i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48>, <8 x i8> <i8 55, i8 55, i8 55, i8 55, i8 55, i8 55, i8 55, i8 55>
  %110 = add <8 x i8> %109, %108
  %111 = getelementptr inbounds i8, i8* %20, i64 %95
  %112 = bitcast i8* %111 to <8 x i8>*
  store <8 x i8> %110, <8 x i8>* %112, align 1, !alias.scope !6, !noalias !3
  br label %113

113:                                              ; preds = %94, %97
  %114 = icmp eq i64 %48, %21
  br i1 %114, label %166, label %115

115:                                              ; preds = %113, %33, %26, %17
  %116 = phi i64 [ 0, %33 ], [ 0, %26 ], [ 0, %17 ], [ %48, %113 ]
  %117 = phi i32 [ 0, %33 ], [ 0, %26 ], [ 0, %17 ], [ %49, %113 ]
  %118 = xor i64 %116, -1
  %119 = and i64 %21, 1
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %134, label %121

121:                                              ; preds = %115
  %122 = xor i32 %117, -1
  %123 = add i32 %10, %122
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds i16, i16* %24, i64 %124
  %126 = load i16, i16* %125, align 2
  %127 = icmp ult i16 %126, 10
  %128 = trunc i16 %126 to i8
  %129 = select i1 %127, i8 48, i8 55
  %130 = add i8 %129, %128
  %131 = getelementptr inbounds i8, i8* %20, i64 %116
  store i8 %130, i8* %131, align 1
  %132 = or i64 %116, 1
  %133 = add nuw i32 %117, 1
  br label %134

134:                                              ; preds = %115, %121
  %135 = phi i64 [ %116, %115 ], [ %132, %121 ]
  %136 = phi i32 [ %117, %115 ], [ %133, %121 ]
  %137 = sub nsw i64 0, %21
  %138 = icmp eq i64 %118, %137
  br i1 %138, label %166, label %139

139:                                              ; preds = %134, %139
  %140 = phi i64 [ %163, %139 ], [ %135, %134 ]
  %141 = phi i32 [ %164, %139 ], [ %136, %134 ]
  %142 = xor i32 %141, -1
  %143 = add i32 %10, %142
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds i16, i16* %24, i64 %144
  %146 = load i16, i16* %145, align 2
  %147 = icmp ult i16 %146, 10
  %148 = trunc i16 %146 to i8
  %149 = select i1 %147, i8 48, i8 55
  %150 = add i8 %149, %148
  %151 = getelementptr inbounds i8, i8* %20, i64 %140
  store i8 %150, i8* %151, align 1
  %152 = add nuw nsw i64 %140, 1
  %153 = sub i32 -2, %141
  %154 = add i32 %10, %153
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds i16, i16* %24, i64 %155
  %157 = load i16, i16* %156, align 2
  %158 = icmp ult i16 %157, 10
  %159 = trunc i16 %157 to i8
  %160 = select i1 %158, i8 48, i8 55
  %161 = add i8 %160, %159
  %162 = getelementptr inbounds i8, i8* %20, i64 %152
  store i8 %161, i8* %162, align 1
  %163 = add nuw nsw i64 %140, 2
  %164 = add nuw i32 %141, 2
  %165 = icmp eq i64 %163, %21
  br i1 %165, label %166, label %139, !llvm.loop !10

166:                                              ; preds = %134, %139, %113
  %167 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %167) #11
  %168 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %169 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %170 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %171 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %171, i8 -86, i64 24, i1 false)
  %172 = tail call i64 @strlen(i8* nonnull %20) #11
  %173 = icmp ugt i64 %172, -17
  br i1 %173, label %174, label %176

174:                                              ; preds = %166
  %175 = bitcast %"class.std::__1::basic_string"* %3 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %175) #10
  unreachable

176:                                              ; preds = %166
  %177 = icmp ult i64 %172, 23
  br i1 %177, label %183, label %178

178:                                              ; preds = %176
  %179 = add nuw i64 %172, 16
  %180 = and i64 %179, -16
  %181 = tail call i8* @_Znwm(i64 %180) #9
  store i8* %181, i8** %168, align 8
  %182 = or i64 %180, -9223372036854775808
  store i64 %182, i64* %170, align 8
  store i64 %172, i64* %169, align 8
  br label %188

183:                                              ; preds = %176
  %184 = trunc i64 %172 to i8
  %185 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %186 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %185, i64 0, i32 1, i32 0
  store i8 %184, i8* %186, align 1
  %187 = icmp eq i64 %172, 0
  br i1 %187, label %190, label %188

188:                                              ; preds = %183, %178
  %189 = phi i8* [ %181, %178 ], [ %167, %183 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %189, i8* nonnull align 1 %20, i64 %172, i1 false) #11
  br label %190

190:                                              ; preds = %188, %183
  %191 = phi i8* [ %167, %183 ], [ %189, %188 ]
  %192 = getelementptr inbounds i8, i8* %191, i64 %172
  store i8 0, i8* %192, align 1
  tail call void @_ZdaPv(i8* nonnull %20) #9
  %193 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %193, i8* nonnull align 8 %167, i64 24, i1 false) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %167) #11
  br label %194

194:                                              ; preds = %190, %12
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !9}
