; ModuleID = '../../sql/statement.cc'
source_filename = "../../sql/statement.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sql::Statement" = type <{ %class.scoped_refptr, i8, i8, [6 x i8] }>
%class.scoped_refptr = type { %"class.sql::Database::StatementRef"* }
%"class.sql::Database::StatementRef" = type <{ %"class.base::RefCounted", [4 x i8], %"class.sql::Database"*, %struct.sqlite3_stmt*, i8, [7 x i8] }>
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.sql::Database" = type { %struct.sqlite3*, %"struct.sql::DatabaseOptions", %"class.base::flat_map", %"class.std::__1::set", i32, i8, i8, i8, i8, i8, i8, i32, %"class.base::RepeatingCallback", %"class.std::__1::basic_string", %"class.base::HistogramBase"*, %"class.std::__1::unique_ptr" }
%struct.sqlite3 = type opaque
%"struct.sql::DatabaseOptions" = type { i8, i8, i32, i32 }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::pair"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.1", %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { i64 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.9 }
%class.scoped_refptr.9 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::HistogramBase" = type opaque
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.sql::DatabaseMemoryDumpProvider"* }
%"class.sql::DatabaseMemoryDumpProvider" = type opaque
%struct.sqlite3_stmt = type opaque
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.19 }
%union.anon.19 = type { %"class.base::ScopedBlockingCall" }
%"class.base::ScopedBlockingCall" = type { %"class.base::internal::UncheckedScopedBlockingCall" }
%"class.base::internal::UncheckedScopedBlockingCall" = type { %"class.base::internal::BlockingObserver"*, %"class.base::internal::UncheckedScopedBlockingCall"*, i8, [7 x i8], %"class.base::debug::ScopedActivity", %"class.absl::optional.47" }
%"class.base::internal::BlockingObserver" = type { i32 (...)** }
%"class.base::debug::ScopedActivity" = type <{ %"class.base::debug::GlobalActivityTracker::ScopedThreadActivity", i32, [4 x i8] }>
%"class.base::debug::GlobalActivityTracker::ScopedThreadActivity" = type { %"class.base::debug::ThreadActivityTracker::ScopedActivity.base", %"class.std::__1::unique_ptr.27" }
%"class.base::debug::ThreadActivityTracker::ScopedActivity.base" = type <{ %"class.base::debug::ThreadActivityTracker"*, i32 }>
%"class.base::debug::ThreadActivityTracker" = type <{ i32 (...)**, %"struct.base::debug::ThreadActivityTracker::Header"*, %"struct.base::debug::Activity"*, i32, i8, [3 x i8] }>
%"struct.base::debug::ThreadActivityTracker::Header" = type opaque
%"struct.base::debug::Activity" = type { i64, i64, i64, [10 x i64], i32, i32, i8, [7 x i8], %"union.base::debug::ActivityData" }
%"union.base::debug::ActivityData" = type { %struct.anon.21 }
%struct.anon.21 = type { i64 }
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.base::debug::ActivityUserData"* }
%"class.base::debug::ActivityUserData" = type { i32 (...)**, %"class.std::__1::map", i8*, i64, %"struct.base::debug::ActivityUserData::MemoryHeader"*, i32, i64, i64 }
%"class.std::__1::map" = type { %"class.std::__1::__tree.30" }
%"class.std::__1::__tree.30" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.31", %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.base::debug::ActivityUserData::MemoryHeader" = type { %"struct.base::debug::OwningProcess" }
%"struct.base::debug::OwningProcess" = type { %"struct.std::__1::atomic.39", i32, i64, i64 }
%"struct.std::__1::atomic.39" = type { %"struct.std::__1::__atomic_base.40" }
%"struct.std::__1::__atomic_base.40" = type { %"struct.std::__1::__atomic_base.41" }
%"struct.std::__1::__atomic_base.41" = type { %"struct.std::__1::__cxx_atomic_impl.42" }
%"struct.std::__1::__cxx_atomic_impl.42" = type { %"struct.std::__1::__cxx_atomic_base_impl.43" }
%"struct.std::__1::__cxx_atomic_base_impl.43" = type { i32 }
%"class.absl::optional.47" = type { %"class.absl::optional_internal::optional_data.48" }
%"class.absl::optional_internal::optional_data.48" = type { %"class.absl::optional_internal::optional_data_base.49" }
%"class.absl::optional_internal::optional_data_base.49" = type { %"class.absl::optional_internal::optional_data_dtor_base.50" }
%"class.absl::optional_internal::optional_data_dtor_base.50" = type { i8, %union.anon.51 }
%union.anon.51 = type { %"class.base::internal::IOJankMonitoringWindow::ScopedMonitoredCall" }
%"class.base::internal::IOJankMonitoringWindow::ScopedMonitoredCall" = type { %"class.base::TimeTicks", %class.scoped_refptr.52 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%class.scoped_refptr.52 = type { %"class.base::internal::IOJankMonitoringWindow"* }
%"class.base::internal::IOJankMonitoringWindow" = type <{ %"class.base::RefCountedThreadSafe.53", [4 x i8], %"class.base::Lock", [60 x i64], %"class.base::TimeTicks", %class.scoped_refptr.52, i8, [7 x i8] }>
%"class.base::RefCountedThreadSafe.53" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase.54" }
%"class.base::time_internal::TimeBase.54" = type { i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::basic_string.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.58 }
%union.anon.58 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon.59 }
%struct.anon.59 = type { %"struct.std::__1::__padding.60", i8 }
%"struct.std::__1::__padding.60" = type { [1 x i8] }
%"class.std::__1::vector.65" = type { %"class.std::__1::__vector_base.66" }
%"class.std::__1::__vector_base.66" = type { i8*, i8*, %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { i8* }
%"class.std::__1::vector.69" = type opaque
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs = comdat any

$_ZNSt3__16vectorIcNS_9allocatorIcEEE8__appendEm = comdat any

@.str = private unnamed_addr constant [13 x i8] c"StepInternal\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"../../sql/statement.cc\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"Reset\00", align 1

@_ZN3sql9StatementC1Ev = hidden unnamed_addr alias void (%"class.sql::Statement"*), void (%"class.sql::Statement"*)* @_ZN3sql9StatementC2Ev
@_ZN3sql9StatementC1E13scoped_refptrINS_8Database12StatementRefEE = hidden unnamed_addr alias void (%"class.sql::Statement"*, %"class.sql::Database::StatementRef"*), void (%"class.sql::Statement"*, %"class.sql::Database::StatementRef"*)* @_ZN3sql9StatementC2E13scoped_refptrINS_8Database12StatementRefEE
@_ZN3sql9StatementD1Ev = hidden unnamed_addr alias void (%"class.sql::Statement"*), void (%"class.sql::Statement"*)* @_ZN3sql9StatementD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3sql9StatementC2Ev(%"class.sql::Statement"* nocapture) unnamed_addr #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 32) #12
  %3 = bitcast i8* %2 to %"class.sql::Database::StatementRef"*
  tail call void @_ZN3sql8Database12StatementRefC1EPS0_P12sqlite3_stmtb(%"class.sql::Database::StatementRef"* nonnull %3, %"class.sql::Database"* null, %struct.sqlite3_stmt* null, i1 zeroext false) #13
  %4 = bitcast %"class.sql::Statement"* %0 to i8**
  store i8* %2, i8** %4, align 8
  %5 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 1
  store i8 0, i8* %5, align 8
  %6 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 2
  store i8 0, i8* %6, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3sql9StatementC2E13scoped_refptrINS_8Database12StatementRefEE(%"class.sql::Statement"* nocapture, %"class.sql::Database::StatementRef"*) unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.sql::Database::StatementRef"* %1 to i64
  %4 = bitcast %"class.sql::Statement"* %0 to i64*
  store i64 %3, i64* %4, align 8
  %5 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 1
  store i8 0, i8* %5, align 8
  %6 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 2
  store i8 0, i8* %6, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3sql9StatementD2Ev(%"class.sql::Statement"* nocapture) unnamed_addr #0 align 2 {
  tail call void @_ZN3sql9Statement5ResetEb(%"class.sql::Statement"* %0, i1 zeroext true)
  %2 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %2, align 8
  %4 = icmp eq %"class.sql::Database::StatementRef"* %3, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %3, i64 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %6) #13
  %7 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %3, i64 0, i32 0, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %5
  tail call void @_ZN3sql8Database12StatementRefD1Ev(%"class.sql::Database::StatementRef"* nonnull %3) #13
  %11 = bitcast %"class.sql::Database::StatementRef"* %3 to i8*
  tail call void @_ZdlPv(i8* %11) #12
  br label %12

12:                                               ; preds = %1, %5, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3sql9Statement5ResetEb(%"class.sql::Statement"* nocapture, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.absl::optional", align 8
  %4 = alloca %"class.base::Location", align 8
  %5 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %5) #13
  %6 = bitcast %"class.absl::optional"* %3 to i64*
  store i64 -6148914691236517206, i64* %6, align 8
  store i8 0, i8* %5, align 8
  %7 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast %union.anon.19* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 80, i1 false) #13
  %9 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %10 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %9, align 8
  %11 = bitcast %"class.base::Location"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #13
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 113) #13
  %12 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %10, i64 0, i32 2
  %13 = load %"class.sql::Database"*, %"class.sql::Database"** %12, align 8
  %14 = icmp eq %"class.sql::Database"* %13, null
  br i1 %14, label %21, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.sql::Database", %"class.sql::Database"* %13, i64 0, i32 6
  %17 = load i8, i8* %16, align 1, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN4base18ScopedBlockingCallC1ERKNS_8LocationENS_12BlockingTypeE(%"class.base::ScopedBlockingCall"* %20, %"class.base::Location"* nonnull dereferenceable(32) %4, i32 0) #13
  store i8 1, i8* %5, align 8
  br label %21

21:                                               ; preds = %2, %15, %19
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #13
  %22 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %9, align 8
  %23 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %22, i64 0, i32 3
  %24 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %23, align 8
  %25 = icmp eq %struct.sqlite3_stmt* %24, null
  br i1 %25, label %36, label %26

26:                                               ; preds = %21
  br i1 %1, label %27, label %32

27:                                               ; preds = %26
  %28 = call i32 @chrome_sqlite3_clear_bindings(%struct.sqlite3_stmt* nonnull %24) #13
  %29 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %9, align 8
  %30 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %29, i64 0, i32 3
  %31 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %30, align 8
  br label %32

32:                                               ; preds = %27, %26
  %33 = phi %struct.sqlite3_stmt* [ %31, %27 ], [ %24, %26 ]
  %34 = call i32 @chrome_sqlite3_reset(%struct.sqlite3_stmt* %33) #13
  %35 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %9, align 8
  br label %36

36:                                               ; preds = %21, %32
  %37 = phi %"class.sql::Database::StatementRef"* [ %22, %21 ], [ %35, %32 ]
  %38 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %37, i64 0, i32 2
  %39 = load %"class.sql::Database"*, %"class.sql::Database"** %38, align 8
  %40 = icmp eq %"class.sql::Database"* %39, null
  br i1 %40, label %42, label %41

41:                                               ; preds = %36
  call void @_ZN3sql8Database26ReleaseCacheMemoryIfNeededEb(%"class.sql::Database"* nonnull %39, i1 zeroext false) #13
  br label %42

42:                                               ; preds = %36, %41
  %43 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 2
  store i8 0, i8* %43, align 1
  %44 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 1
  store i8 0, i8* %44, align 8
  %45 = load i8, i8* %5, align 8, !range !2
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %49, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %3, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN4base18ScopedBlockingCallD1Ev(%"class.base::ScopedBlockingCall"* %48) #13
  store i8 0, i8* %5, align 8
  br label %49

49:                                               ; preds = %42, %47
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %5) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3sql9Statement6AssignE13scoped_refptrINS_8Database12StatementRefEE(%"class.sql::Statement"* nocapture, %"class.sql::Database::StatementRef"*) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.sql::Database::StatementRef"* %1 to i64
  tail call void @_ZN3sql9Statement5ResetEb(%"class.sql::Statement"* %0, i1 zeroext true)
  %4 = bitcast %"class.sql::Statement"* %0 to i64*
  %5 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %6 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %5, align 8
  store i64 %3, i64* %4, align 8
  %7 = icmp eq %"class.sql::Database::StatementRef"* %6, null
  br i1 %7, label %15, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %6, i64 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %9) #13
  %10 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %6, i64 0, i32 0, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %8
  tail call void @_ZN3sql8Database12StatementRefD1Ev(%"class.sql::Database::StatementRef"* nonnull %6) #13
  %14 = bitcast %"class.sql::Database::StatementRef"* %6 to i8*
  tail call void @_ZdlPv(i8* %14) #12
  br label %15

15:                                               ; preds = %13, %8, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3sql9Statement5ClearEv(%"class.sql::Statement"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = tail call i8* @_Znwm(i64 32) #12
  %3 = bitcast i8* %2 to %"class.sql::Database::StatementRef"*
  tail call void @_ZN3sql8Database12StatementRefC1EPS0_P12sqlite3_stmtb(%"class.sql::Database::StatementRef"* nonnull %3, %"class.sql::Database"* null, %struct.sqlite3_stmt* null, i1 zeroext false) #13
  %4 = ptrtoint i8* %2 to i64
  tail call void @_ZN3sql9Statement5ResetEb(%"class.sql::Statement"* %0, i1 zeroext true) #13
  %5 = bitcast %"class.sql::Statement"* %0 to i64*
  %6 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %7 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %6, align 8
  store i64 %4, i64* %5, align 8
  %8 = icmp eq %"class.sql::Database::StatementRef"* %7, null
  br i1 %8, label %16, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %7, i64 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %10) #13
  %11 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %7, i64 0, i32 0, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %9
  tail call void @_ZN3sql8Database12StatementRefD1Ev(%"class.sql::Database::StatementRef"* nonnull %7) #13
  %15 = bitcast %"class.sql::Database::StatementRef"* %7 to i8*
  tail call void @_ZdlPv(i8* %15) #12
  br label %16

16:                                               ; preds = %1, %9, %14
  %17 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 2
  store i8 0, i8* %17, align 1
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3sql9Statement10CheckValidEv(%"class.sql::Statement"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %2, align 8
  %4 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %3, i64 0, i32 3
  %5 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %4, align 8
  %6 = icmp ne %struct.sqlite3_stmt* %5, null
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3sql9Statement12StepInternalEv(%"class.sql::Statement"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.absl::optional", align 8
  %3 = alloca %"class.base::Location", align 8
  %4 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %4, align 8
  %6 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %5, i64 0, i32 3
  %7 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %6, align 8
  %8 = icmp eq %struct.sqlite3_stmt* %7, null
  br i1 %8, label %49, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %10) #13
  %11 = bitcast %"class.absl::optional"* %2 to i64*
  store i64 -6148914691236517206, i64* %11, align 8
  store i8 0, i8* %10, align 8
  %12 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 1
  %13 = bitcast %union.anon.19* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 80, i1 false) #13
  %14 = bitcast %"class.base::Location"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #13
  call void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* nonnull sret %3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 83) #13
  %15 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %5, i64 0, i32 2
  %16 = load %"class.sql::Database"*, %"class.sql::Database"** %15, align 8
  %17 = icmp eq %"class.sql::Database"* %16, null
  br i1 %17, label %24, label %18

18:                                               ; preds = %9
  %19 = getelementptr inbounds %"class.sql::Database", %"class.sql::Database"* %16, i64 0, i32 6
  %20 = load i8, i8* %19, align 1, !range !2
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN4base18ScopedBlockingCallC1ERKNS_8LocationENS_12BlockingTypeE(%"class.base::ScopedBlockingCall"* %23, %"class.base::Location"* nonnull dereferenceable(32) %3, i32 0) #13
  store i8 1, i8* %10, align 8
  br label %24

24:                                               ; preds = %9, %18, %22
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #13
  %25 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 1
  store i8 1, i8* %25, align 8
  %26 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %4, align 8
  %27 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %26, i64 0, i32 3
  %28 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %27, align 8
  %29 = call i32 @chrome_sqlite3_step(%struct.sqlite3_stmt* %28) #13
  switch i32 %29, label %32 [
    i32 100, label %30
    i32 0, label %30
    i32 101, label %30
  ]

30:                                               ; preds = %24, %24, %24
  %31 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 2
  store i8 1, i8* %31, align 1
  br label %42

32:                                               ; preds = %24
  %33 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 2
  store i8 0, i8* %33, align 1
  %34 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %4, align 8
  %35 = icmp eq %"class.sql::Database::StatementRef"* %34, null
  br i1 %35, label %42, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %34, i64 0, i32 2
  %38 = load %"class.sql::Database"*, %"class.sql::Database"** %37, align 8
  %39 = icmp eq %"class.sql::Database"* %38, null
  br i1 %39, label %42, label %40

40:                                               ; preds = %36
  %41 = call i32 @_ZNK3sql8Database13OnSqliteErrorEiPNS_9StatementEPKc(%"class.sql::Database"* nonnull %38, i32 %29, %"class.sql::Statement"* %0, i8* null) #13
  br label %42

42:                                               ; preds = %30, %32, %36, %40
  %43 = phi i32 [ %41, %40 ], [ %29, %36 ], [ %29, %32 ], [ %29, %30 ]
  %44 = load i8, i8* %10, align 8, !range !2
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %48, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN4base18ScopedBlockingCallD1Ev(%"class.base::ScopedBlockingCall"* %47) #13
  store i8 0, i8* %10, align 8
  br label %48

48:                                               ; preds = %42, %46
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %10) #13
  br label %49

49:                                               ; preds = %1, %48
  %50 = phi i32 [ %43, %48 ], [ 1, %1 ]
  ret i32 %50
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN4base8Location7CurrentEPKcS2_i(%"class.base::Location"* sret, i8*, i8*, i32) local_unnamed_addr #3

declare i32 @chrome_sqlite3_step(%struct.sqlite3_stmt*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3sql9Statement10CheckErrorEi(%"class.sql::Statement"*, i32) local_unnamed_addr #0 align 2 {
  switch i32 %1, label %5 [
    i32 100, label %3
    i32 0, label %3
    i32 101, label %3
  ]

3:                                                ; preds = %2, %2, %2
  %4 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 2
  store i8 1, i8* %4, align 1
  br label %16

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 2
  store i8 0, i8* %6, align 1
  %7 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %8 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %7, align 8
  %9 = icmp eq %"class.sql::Database::StatementRef"* %8, null
  br i1 %9, label %16, label %10

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %8, i64 0, i32 2
  %12 = load %"class.sql::Database"*, %"class.sql::Database"** %11, align 8
  %13 = icmp eq %"class.sql::Database"* %12, null
  br i1 %13, label %16, label %14

14:                                               ; preds = %10
  %15 = tail call i32 @_ZNK3sql8Database13OnSqliteErrorEiPNS_9StatementEPKc(%"class.sql::Database"* nonnull %12, i32 %1, %"class.sql::Statement"* %0, i8* null) #13
  br label %16

16:                                               ; preds = %3, %5, %10, %14
  %17 = phi i32 [ %15, %14 ], [ %1, %10 ], [ %1, %5 ], [ %1, %3 ]
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3sql9Statement3RunEv(%"class.sql::Statement"*) local_unnamed_addr #0 align 2 {
  %2 = tail call i32 @_ZN3sql9Statement12StepInternalEv(%"class.sql::Statement"* %0)
  %3 = icmp eq i32 %2, 101
  ret i1 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3sql9Statement4StepEv(%"class.sql::Statement"*) local_unnamed_addr #0 align 2 {
  %2 = tail call i32 @_ZN3sql9Statement12StepInternalEv(%"class.sql::Statement"* %0)
  %3 = icmp eq i32 %2, 100
  ret i1 %3
}

declare i32 @chrome_sqlite3_clear_bindings(%struct.sqlite3_stmt*) local_unnamed_addr #3

declare i32 @chrome_sqlite3_reset(%struct.sqlite3_stmt*) local_unnamed_addr #3

declare void @_ZN3sql8Database26ReleaseCacheMemoryIfNeededEb(%"class.sql::Database"*, i1 zeroext) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3sql9Statement9SucceededEv(%"class.sql::Statement"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %2, align 8
  %4 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %3, i64 0, i32 3
  %5 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %4, align 8
  %6 = icmp eq %struct.sqlite3_stmt* %5, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 2
  %9 = load i8, i8* %8, align 1, !range !2
  %10 = icmp ne i8 %9, 0
  br label %11

11:                                               ; preds = %1, %7
  %12 = phi i1 [ false, %1 ], [ %10, %7 ]
  ret i1 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3sql9Statement8BindNullEi(%"class.sql::Statement"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %3, align 8
  %5 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %4, i64 0, i32 3
  %6 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %5, align 8
  %7 = icmp eq %struct.sqlite3_stmt* %6, null
  br i1 %7, label %12, label %8

8:                                                ; preds = %2
  %9 = add nsw i32 %1, 1
  %10 = tail call i32 @chrome_sqlite3_bind_null(%struct.sqlite3_stmt* nonnull %6, i32 %9) #13
  %11 = icmp eq i32 %10, 0
  br label %12

12:                                               ; preds = %2, %8
  %13 = phi i1 [ false, %2 ], [ %11, %8 ]
  ret i1 %13
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK3sql9Statement7CheckOkEi(%"class.sql::Statement"* nocapture readnone, i32) local_unnamed_addr #4 align 2 {
  %3 = icmp eq i32 %1, 0
  ret i1 %3
}

declare i32 @chrome_sqlite3_bind_null(%struct.sqlite3_stmt*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3sql9Statement8BindBoolEib(%"class.sql::Statement"* nocapture readonly, i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %4, align 8
  %6 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %5, i64 0, i32 3
  %7 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %6, align 8
  %8 = icmp eq %struct.sqlite3_stmt* %7, null
  br i1 %8, label %14, label %9

9:                                                ; preds = %3
  %10 = zext i1 %2 to i32
  %11 = add nsw i32 %1, 1
  %12 = tail call i32 @chrome_sqlite3_bind_int(%struct.sqlite3_stmt* nonnull %7, i32 %11, i32 %10) #13
  %13 = icmp eq i32 %12, 0
  br label %14

14:                                               ; preds = %3, %9
  %15 = phi i1 [ false, %3 ], [ %13, %9 ]
  ret i1 %15
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3sql9Statement7BindIntEii(%"class.sql::Statement"* nocapture readonly, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %4, align 8
  %6 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %5, i64 0, i32 3
  %7 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %6, align 8
  %8 = icmp eq %struct.sqlite3_stmt* %7, null
  br i1 %8, label %13, label %9

9:                                                ; preds = %3
  %10 = add nsw i32 %1, 1
  %11 = tail call i32 @chrome_sqlite3_bind_int(%struct.sqlite3_stmt* nonnull %7, i32 %10, i32 %2) #13
  %12 = icmp eq i32 %11, 0
  br label %13

13:                                               ; preds = %3, %9
  %14 = phi i1 [ false, %3 ], [ %12, %9 ]
  ret i1 %14
}

declare i32 @chrome_sqlite3_bind_int(%struct.sqlite3_stmt*, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3sql9Statement9BindInt64Eil(%"class.sql::Statement"* nocapture readonly, i32, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %4, align 8
  %6 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %5, i64 0, i32 3
  %7 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %6, align 8
  %8 = icmp eq %struct.sqlite3_stmt* %7, null
  br i1 %8, label %13, label %9

9:                                                ; preds = %3
  %10 = add nsw i32 %1, 1
  %11 = tail call i32 @chrome_sqlite3_bind_int64(%struct.sqlite3_stmt* nonnull %7, i32 %10, i64 %2) #13
  %12 = icmp eq i32 %11, 0
  br label %13

13:                                               ; preds = %3, %9
  %14 = phi i1 [ false, %3 ], [ %12, %9 ]
  ret i1 %14
}

declare i32 @chrome_sqlite3_bind_int64(%struct.sqlite3_stmt*, i32, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3sql9Statement10BindDoubleEid(%"class.sql::Statement"* nocapture readonly, i32, double) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %4, align 8
  %6 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %5, i64 0, i32 3
  %7 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %6, align 8
  %8 = icmp eq %struct.sqlite3_stmt* %7, null
  br i1 %8, label %13, label %9

9:                                                ; preds = %3
  %10 = add nsw i32 %1, 1
  %11 = tail call i32 @chrome_sqlite3_bind_double(%struct.sqlite3_stmt* nonnull %7, i32 %10, double %2) #13
  %12 = icmp eq i32 %11, 0
  br label %13

13:                                               ; preds = %3, %9
  %14 = phi i1 [ false, %3 ], [ %12, %9 ]
  ret i1 %14
}

declare i32 @chrome_sqlite3_bind_double(%struct.sqlite3_stmt*, i32, double) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3sql9Statement8BindTimeEiN4base4TimeE(%"class.sql::Statement"* nocapture readonly, i32, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::Time", align 8
  %5 = getelementptr inbounds %"class.base::Time", %"class.base::Time"* %4, i64 0, i32 0, i32 0
  store i64 %2, i64* %5, align 8
  %6 = call i64 @_ZNK4base4Time24ToDeltaSinceWindowsEpochEv(%"class.base::Time"* nonnull %4) #13
  %7 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %8 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %7, align 8
  %9 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %8, i64 0, i32 3
  %10 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %9, align 8
  %11 = icmp eq %struct.sqlite3_stmt* %10, null
  br i1 %11, label %16, label %12

12:                                               ; preds = %3
  %13 = add nsw i32 %1, 1
  %14 = call i32 @chrome_sqlite3_bind_int64(%struct.sqlite3_stmt* nonnull %10, i32 %13, i64 %6) #13
  %15 = icmp eq i32 %14, 0
  br label %16

16:                                               ; preds = %3, %12
  %17 = phi i1 [ false, %3 ], [ %15, %12 ]
  ret i1 %17
}

declare i64 @_ZNK4base4Time24ToDeltaSinceWindowsEpochEv(%"class.base::Time"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3sql9Statement11BindCStringEiPKc(%"class.sql::Statement"* nocapture readonly, i32, i8*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %4, align 8
  %6 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %5, i64 0, i32 3
  %7 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %6, align 8
  %8 = icmp eq %struct.sqlite3_stmt* %7, null
  br i1 %8, label %13, label %9

9:                                                ; preds = %3
  %10 = add nsw i32 %1, 1
  %11 = tail call i32 @chrome_sqlite3_bind_text(%struct.sqlite3_stmt* nonnull %7, i32 %10, i8* %2, i32 -1, void (i8*)* nonnull inttoptr (i64 -1 to void (i8*)*)) #13
  %12 = icmp eq i32 %11, 0
  br label %13

13:                                               ; preds = %3, %9
  %14 = phi i1 [ false, %3 ], [ %12, %9 ]
  ret i1 %14
}

declare i32 @chrome_sqlite3_bind_text(%struct.sqlite3_stmt*, i32, i8*, i32, void (i8*)*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3sql9Statement10BindStringEiRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.sql::Statement"* nocapture readonly, i32, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %4, align 8
  %6 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %5, i64 0, i32 3
  %7 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %6, align 8
  %8 = icmp eq %struct.sqlite3_stmt* %7, null
  br i1 %8, label %31, label %9

9:                                                ; preds = %3
  %10 = add nsw i32 %1, 1
  %11 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  %17 = zext i8 %13 to i64
  br label %25

18:                                               ; preds = %9
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = icmp ult i64 %22, 2147483648
  br i1 %23, label %25, label %24, !prof !3

24:                                               ; preds = %18
  tail call void @llvm.trap() #13
  unreachable

25:                                               ; preds = %15, %18
  %26 = phi i64 [ %17, %15 ], [ %22, %18 ]
  %27 = phi i8* [ %16, %15 ], [ %20, %18 ]
  %28 = trunc i64 %26 to i32
  %29 = tail call i32 @chrome_sqlite3_bind_text(%struct.sqlite3_stmt* nonnull %7, i32 %10, i8* %27, i32 %28, void (i8*)* nonnull inttoptr (i64 -1 to void (i8*)*)) #13
  %30 = icmp eq i32 %29, 0
  br label %31

31:                                               ; preds = %3, %25
  %32 = phi i1 [ false, %3 ], [ %30, %25 ]
  ret i1 %32
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3sql9Statement12BindString16EiN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.sql::Statement"* nocapture readonly, i32, i16*, i64) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #13
  call void @_ZN4base11UTF16ToUTF8ENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string"* nonnull sret %5, i16* %2, i64 %3) #13
  %7 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %8 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %7, align 8
  %9 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %8, i64 0, i32 3
  %10 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %9, align 8
  %11 = icmp eq %struct.sqlite3_stmt* %10, null
  br i1 %11, label %12, label %14

12:                                               ; preds = %4
  %13 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %35

14:                                               ; preds = %4
  %15 = add nsw i32 %1, 1
  %16 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %16, i64 0, i32 1, i32 0
  %18 = load i8, i8* %17, align 1
  %19 = icmp slt i8 %18, 0
  br i1 %19, label %22, label %20

20:                                               ; preds = %14
  %21 = zext i8 %18 to i64
  br label %29

22:                                               ; preds = %14
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = icmp ult i64 %26, 2147483648
  br i1 %27, label %29, label %28, !prof !3

28:                                               ; preds = %22
  call void @llvm.trap() #13
  unreachable

29:                                               ; preds = %22, %20
  %30 = phi i64 [ %21, %20 ], [ %26, %22 ]
  %31 = phi i8* [ %6, %20 ], [ %24, %22 ]
  %32 = trunc i64 %30 to i32
  %33 = call i32 @chrome_sqlite3_bind_text(%struct.sqlite3_stmt* nonnull %10, i32 %15, i8* %31, i32 %32, void (i8*)* nonnull inttoptr (i64 -1 to void (i8*)*)) #13
  %34 = icmp eq i32 %33, 0
  br label %35

35:                                               ; preds = %12, %29
  %36 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %13, %12 ], [ %16, %29 ]
  %37 = phi i1 [ false, %12 ], [ %34, %29 ]
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %36, i64 0, i32 1, i32 0
  %39 = load i8, i8* %38, align 1
  %40 = icmp slt i8 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %35
  %42 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @_ZdlPv(i8* %43) #12
  br label %44

44:                                               ; preds = %35, %41
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #13
  ret i1 %37
}

declare void @_ZN4base11UTF16ToUTF8ENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string"* sret, i16*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3sql9Statement8BindBlobEiPKvi(%"class.sql::Statement"* nocapture readonly, i32, i8*, i32) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %6 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %5, align 8
  %7 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %6, i64 0, i32 3
  %8 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %7, align 8
  %9 = icmp eq %struct.sqlite3_stmt* %8, null
  br i1 %9, label %14, label %10

10:                                               ; preds = %4
  %11 = add nsw i32 %1, 1
  %12 = tail call i32 @chrome_sqlite3_bind_blob(%struct.sqlite3_stmt* nonnull %8, i32 %11, i8* %2, i32 %3, void (i8*)* nonnull inttoptr (i64 -1 to void (i8*)*)) #13
  %13 = icmp eq i32 %12, 0
  br label %14

14:                                               ; preds = %4, %10
  %15 = phi i1 [ false, %4 ], [ %13, %10 ]
  ret i1 %15
}

declare i32 @chrome_sqlite3_bind_blob(%struct.sqlite3_stmt*, i32, i8*, i32, void (i8*)*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK3sql9Statement11ColumnCountEv(%"class.sql::Statement"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %2, align 8
  %4 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %3, i64 0, i32 3
  %5 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %4, align 8
  %6 = icmp eq %struct.sqlite3_stmt* %5, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %1
  %8 = tail call i32 @chrome_sqlite3_column_count(%struct.sqlite3_stmt* nonnull %5) #13
  br label %9

9:                                                ; preds = %1, %7
  %10 = phi i32 [ %8, %7 ], [ 0, %1 ]
  ret i32 %10
}

declare i32 @chrome_sqlite3_column_count(%struct.sqlite3_stmt*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK3sql9Statement13GetColumnTypeEi(%"class.sql::Statement"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %3, align 8
  %5 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %4, i64 0, i32 3
  %6 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %5, align 8
  %7 = tail call i32 @chrome_sqlite3_column_type(%struct.sqlite3_stmt* %6, i32 %1) #13
  ret i32 %7
}

declare i32 @chrome_sqlite3_column_type(%struct.sqlite3_stmt*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3sql9Statement10ColumnBoolEi(%"class.sql::Statement"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %3, align 8
  %5 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %4, i64 0, i32 3
  %6 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %5, align 8
  %7 = icmp eq %struct.sqlite3_stmt* %6, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = tail call i32 @chrome_sqlite3_column_int(%struct.sqlite3_stmt* nonnull %6, i32 %1) #13
  %10 = icmp ne i32 %9, 0
  br label %11

11:                                               ; preds = %2, %8
  %12 = phi i1 [ %10, %8 ], [ false, %2 ]
  ret i1 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK3sql9Statement9ColumnIntEi(%"class.sql::Statement"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %3, align 8
  %5 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %4, i64 0, i32 3
  %6 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %5, align 8
  %7 = icmp eq %struct.sqlite3_stmt* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = tail call i32 @chrome_sqlite3_column_int(%struct.sqlite3_stmt* nonnull %6, i32 %1) #13
  br label %10

10:                                               ; preds = %2, %8
  %11 = phi i32 [ %9, %8 ], [ 0, %2 ]
  ret i32 %11
}

declare i32 @chrome_sqlite3_column_int(%struct.sqlite3_stmt*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK3sql9Statement11ColumnInt64Ei(%"class.sql::Statement"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %3, align 8
  %5 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %4, i64 0, i32 3
  %6 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %5, align 8
  %7 = icmp eq %struct.sqlite3_stmt* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = tail call i64 @chrome_sqlite3_column_int64(%struct.sqlite3_stmt* nonnull %6, i32 %1) #13
  br label %10

10:                                               ; preds = %2, %8
  %11 = phi i64 [ %9, %8 ], [ 0, %2 ]
  ret i64 %11
}

declare i64 @chrome_sqlite3_column_int64(%struct.sqlite3_stmt*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZNK3sql9Statement12ColumnDoubleEi(%"class.sql::Statement"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %3, align 8
  %5 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %4, i64 0, i32 3
  %6 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %5, align 8
  %7 = icmp eq %struct.sqlite3_stmt* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = tail call double @chrome_sqlite3_column_double(%struct.sqlite3_stmt* nonnull %6, i32 %1) #13
  br label %10

10:                                               ; preds = %2, %8
  %11 = phi double [ %9, %8 ], [ 0.000000e+00, %2 ]
  ret double %11
}

declare double @chrome_sqlite3_column_double(%struct.sqlite3_stmt*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK3sql9Statement10ColumnTimeEi(%"class.sql::Statement"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %3, align 8
  %5 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %4, i64 0, i32 3
  %6 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %5, align 8
  %7 = icmp eq %struct.sqlite3_stmt* %6, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = tail call i64 @chrome_sqlite3_column_int64(%struct.sqlite3_stmt* nonnull %6, i32 %1) #13
  %10 = tail call i64 @_ZN4base4Time26FromDeltaSinceWindowsEpochENS_9TimeDeltaE(i64 %9) #13
  br label %11

11:                                               ; preds = %2, %8
  %12 = phi i64 [ %10, %8 ], [ 0, %2 ]
  ret i64 %12
}

declare i64 @_ZN4base4Time26FromDeltaSinceWindowsEpochENS_9TimeDeltaE(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3sql9Statement12ColumnStringEi(%"class.std::__1::basic_string"* noalias nocapture sret, %"class.sql::Statement"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %1, i64 0, i32 0, i32 0
  %6 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %5, align 8
  %7 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %6, i64 0, i32 3
  %8 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %7, align 8
  %9 = icmp eq %struct.sqlite3_stmt* %8, null
  br i1 %9, label %10, label %12

10:                                               ; preds = %3
  %11 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 24, i1 false) #13
  br label %36

12:                                               ; preds = %3
  %13 = tail call i8* @chrome_sqlite3_column_text(%struct.sqlite3_stmt* nonnull %8, i32 %2) #13
  %14 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %5, align 8
  %15 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %14, i64 0, i32 3
  %16 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %15, align 8
  %17 = tail call i32 @chrome_sqlite3_column_bytes(%struct.sqlite3_stmt* %16, i32 %2) #13
  %18 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 24, i1 false) #13
  %19 = icmp ne i8* %13, null
  %20 = icmp sgt i32 %17, 0
  %21 = and i1 %19, %20
  br i1 %21, label %22, label %34

22:                                               ; preds = %12
  %23 = sext i32 %17 to i64
  %24 = tail call i1 @llvm.is.constant.i64(i64 %23) #13
  %25 = icmp ult i32 %17, 23
  %26 = and i1 %25, %24
  br i1 %26, label %27, label %32

27:                                               ; preds = %22
  %28 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %29 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %28, i64 0, i32 1, i32 0
  %30 = trunc i32 %17 to i8
  store i8 %30, i8* %29, align 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 8 %18, i8* nonnull align 1 %13, i64 %23, i1 false) #13
  %31 = getelementptr inbounds i8, i8* %18, i64 %23
  store i8 0, i8* %31, align 1
  br label %34

32:                                               ; preds = %22
  %33 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* nonnull %13, i64 %23) #13
  br label %34

34:                                               ; preds = %12, %27, %32
  %35 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* nonnull align 8 %18, i64 24, i1 false) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #13
  br label %36

36:                                               ; preds = %34, %10
  ret void
}

declare i8* @chrome_sqlite3_column_text(%struct.sqlite3_stmt*, i32) local_unnamed_addr #3

declare i32 @chrome_sqlite3_column_bytes(%struct.sqlite3_stmt*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3sql9Statement14ColumnString16Ei(%"class.std::__1::basic_string.55"* noalias sret, %"class.sql::Statement"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %1, i64 0, i32 0, i32 0
  %7 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %6, align 8
  %8 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %7, i64 0, i32 3
  %9 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %8, align 8
  %10 = icmp eq %struct.sqlite3_stmt* %9, null
  br i1 %10, label %11, label %13

11:                                               ; preds = %3
  %12 = bitcast %"class.std::__1::basic_string.55"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #13
  br label %69

13:                                               ; preds = %3
  %14 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #13
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %17 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 24, i1 false)
  %18 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %8, align 8, !noalias !4
  %19 = icmp eq %struct.sqlite3_stmt* %18, null
  br i1 %19, label %20, label %22

20:                                               ; preds = %13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 0, i64 24, i1 false) #13, !alias.scope !4
  %21 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %49

22:                                               ; preds = %13
  %23 = tail call i8* @chrome_sqlite3_column_text(%struct.sqlite3_stmt* nonnull %18, i32 %2) #13, !noalias !4
  %24 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %6, align 8, !noalias !4
  %25 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %24, i64 0, i32 3
  %26 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %25, align 8, !noalias !4
  %27 = tail call i32 @chrome_sqlite3_column_bytes(%struct.sqlite3_stmt* %26, i32 %2) #13, !noalias !4
  %28 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %28) #13, !noalias !4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 0, i64 24, i1 false) #13, !noalias !4
  %29 = icmp ne i8* %23, null
  %30 = icmp sgt i32 %27, 0
  %31 = and i1 %29, %30
  br i1 %31, label %32, label %44

32:                                               ; preds = %22
  %33 = sext i32 %27 to i64
  %34 = tail call i1 @llvm.is.constant.i64(i64 %33) #13
  %35 = icmp ult i32 %27, 23
  %36 = and i1 %35, %34
  br i1 %36, label %37, label %42

37:                                               ; preds = %32
  %38 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %39 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %38, i64 0, i32 1, i32 0
  %40 = trunc i32 %27 to i8
  store i8 %40, i8* %39, align 1, !noalias !4
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 1 %23, i64 %33, i1 false) #13, !noalias !4
  %41 = getelementptr inbounds i8, i8* %28, i64 %33
  store i8 0, i8* %41, align 1, !noalias !4
  br label %44

42:                                               ; preds = %32
  %43 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* nonnull %23, i64 %33) #13, !noalias !4
  br label %44

44:                                               ; preds = %42, %37, %22
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %14, i8* nonnull align 8 %28, i64 24, i1 false) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #13, !noalias !4
  %45 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  %47 = load i8, i8* %46, align 1
  %48 = load i64, i64* %16, align 8
  br label %49

49:                                               ; preds = %20, %44
  %50 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %21, %20 ], [ %45, %44 ]
  %51 = phi i64 [ 0, %20 ], [ %48, %44 ]
  %52 = phi i8 [ 0, %20 ], [ %47, %44 ]
  %53 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %50, i64 0, i32 1, i32 0
  %54 = icmp slt i8 %52, 0
  %55 = zext i8 %52 to i64
  %56 = select i1 %54, i64 %51, i64 %55
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %61, label %58

58:                                               ; preds = %49
  %59 = load i8*, i8** %15, align 8
  %60 = select i1 %54, i8* %59, i8* %14
  call void @_ZN4base11UTF8ToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string.55"* sret %0, i8* %60, i64 %56) #13
  br label %63

61:                                               ; preds = %49
  %62 = bitcast %"class.std::__1::basic_string.55"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %62, i8 0, i64 24, i1 false) #13
  br label %63

63:                                               ; preds = %61, %58
  %64 = load i8, i8* %53, align 1
  %65 = icmp slt i8 %64, 0
  br i1 %65, label %66, label %68

66:                                               ; preds = %63
  %67 = load i8*, i8** %15, align 8
  call void @_ZdlPv(i8* %67) #12
  br label %68

68:                                               ; preds = %63, %66
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #13
  br label %69

69:                                               ; preds = %68, %11
  ret void
}

declare void @_ZN4base11UTF8ToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string.55"* sret, i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK3sql9Statement16ColumnByteLengthEi(%"class.sql::Statement"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %3, align 8
  %5 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %4, i64 0, i32 3
  %6 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %5, align 8
  %7 = icmp eq %struct.sqlite3_stmt* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = tail call i32 @chrome_sqlite3_column_bytes(%struct.sqlite3_stmt* nonnull %6, i32 %1) #13
  br label %10

10:                                               ; preds = %2, %8
  %11 = phi i32 [ %9, %8 ], [ 0, %2 ]
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZNK3sql9Statement10ColumnBlobEi(%"class.sql::Statement"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %3, align 8
  %5 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %4, i64 0, i32 3
  %6 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %5, align 8
  %7 = icmp eq %struct.sqlite3_stmt* %6, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = tail call i8* @chrome_sqlite3_column_blob(%struct.sqlite3_stmt* nonnull %6, i32 %1) #13
  br label %10

10:                                               ; preds = %2, %8
  %11 = phi i8* [ %9, %8 ], [ null, %2 ]
  ret i8* %11
}

declare i8* @chrome_sqlite3_column_blob(%struct.sqlite3_stmt*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3sql9Statement18ColumnBlobAsStringEiPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.sql::Statement"* nocapture readonly, i32, %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %4, align 8
  %6 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %5, i64 0, i32 3
  %7 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %6, align 8
  %8 = icmp eq %struct.sqlite3_stmt* %7, null
  br i1 %8, label %52, label %9

9:                                                ; preds = %3
  %10 = tail call i8* @chrome_sqlite3_column_blob(%struct.sqlite3_stmt* nonnull %7, i32 %1) #13
  %11 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %4, align 8
  %12 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %11, i64 0, i32 3
  %13 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %12, align 8
  %14 = icmp eq %struct.sqlite3_stmt* %13, null
  br i1 %14, label %18, label %15

15:                                               ; preds = %9
  %16 = tail call i32 @chrome_sqlite3_column_bytes(%struct.sqlite3_stmt* nonnull %13, i32 %1) #13
  %17 = sext i32 %16 to i64
  br label %18

18:                                               ; preds = %9, %15
  %19 = phi i64 [ %17, %15 ], [ 0, %9 ]
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"* %2, i64 %19, i8 signext 0) #13
  %20 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %18
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  br label %29

27:                                               ; preds = %18
  %28 = zext i8 %22 to i64
  br label %29

29:                                               ; preds = %24, %27
  %30 = phi i64 [ %26, %24 ], [ %28, %27 ]
  %31 = icmp eq i64 %30, %19
  br i1 %31, label %32, label %52

32:                                               ; preds = %29
  %33 = tail call i1 @llvm.is.constant.i64(i64 %19) #13
  %34 = icmp ult i64 %19, 23
  %35 = and i1 %34, %33
  br i1 %35, label %36, label %50

36:                                               ; preds = %32
  br i1 %23, label %37, label %41

37:                                               ; preds = %36
  %38 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %19, i64* %38, align 8
  %39 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8
  br label %44

41:                                               ; preds = %36
  %42 = trunc i64 %19 to i8
  store i8 %42, i8* %21, align 1
  %43 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  br label %44

44:                                               ; preds = %41, %37
  %45 = phi i8* [ %40, %37 ], [ %43, %41 ]
  %46 = icmp eq i64 %19, 0
  br i1 %46, label %48, label %47

47:                                               ; preds = %44
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %45, i8* align 1 %10, i64 %19, i1 false) #13
  br label %48

48:                                               ; preds = %47, %44
  %49 = getelementptr inbounds i8, i8* %45, i64 %19
  store i8 0, i8* %49, align 1
  br label %52

50:                                               ; preds = %32
  %51 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* %2, i8* %10, i64 %19) #13
  br label %52

52:                                               ; preds = %3, %50, %48, %29
  %53 = phi i1 [ false, %3 ], [ false, %29 ], [ true, %48 ], [ true, %50 ]
  ret i1 %53
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3sql9Statement20ColumnBlobAsString16EiPNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEE(%"class.sql::Statement"* nocapture readonly, i32, %"class.std::__1::basic_string.55"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %5 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %4, align 8
  %6 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %5, i64 0, i32 3
  %7 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %6, align 8
  %8 = icmp eq %struct.sqlite3_stmt* %7, null
  br i1 %8, label %743, label %9

9:                                                ; preds = %3
  %10 = tail call i8* @chrome_sqlite3_column_blob(%struct.sqlite3_stmt* nonnull %7, i32 %1) #13
  %11 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %4, align 8
  %12 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %11, i64 0, i32 3
  %13 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %12, align 8
  %14 = icmp eq %struct.sqlite3_stmt* %13, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %9
  %16 = tail call i32 @chrome_sqlite3_column_bytes(%struct.sqlite3_stmt* nonnull %13, i32 %1) #13
  br label %17

17:                                               ; preds = %9, %15
  %18 = phi i32 [ %16, %15 ], [ 0, %9 ]
  %19 = sext i32 %18 to i64
  %20 = lshr i64 %19, 1
  %21 = bitcast %"class.std::__1::basic_string.55"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %22 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %21, i64 0, i32 1, i32 1
  %23 = load i8, i8* %22, align 1
  %24 = icmp slt i8 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %17
  %26 = getelementptr inbounds %"class.std::__1::basic_string.55", %"class.std::__1::basic_string.55"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  br label %30

28:                                               ; preds = %17
  %29 = zext i8 %23 to i64
  br label %30

30:                                               ; preds = %28, %25
  %31 = phi i64 [ %27, %25 ], [ %29, %28 ]
  %32 = icmp ugt i64 %20, %31
  br i1 %32, label %33, label %79

33:                                               ; preds = %30
  %34 = sub i64 %20, %31
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %89, label %36

36:                                               ; preds = %33
  br i1 %24, label %37, label %44

37:                                               ; preds = %36
  %38 = getelementptr inbounds %"class.std::__1::basic_string.55", %"class.std::__1::basic_string.55"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %39 = load i64, i64* %38, align 8
  %40 = and i64 %39, 9223372036854775807
  %41 = add nsw i64 %40, -1
  %42 = getelementptr inbounds %"class.std::__1::basic_string.55", %"class.std::__1::basic_string.55"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %43 = load i64, i64* %42, align 8
  br label %46

44:                                               ; preds = %36
  %45 = zext i8 %23 to i64
  br label %46

46:                                               ; preds = %44, %37
  %47 = phi i64 [ %41, %37 ], [ 10, %44 ]
  %48 = phi i64 [ %43, %37 ], [ %45, %44 ]
  %49 = sub i64 %47, %48
  %50 = icmp ult i64 %49, %34
  br i1 %50, label %51, label %55

51:                                               ; preds = %46
  %52 = add i64 %48, %34
  %53 = sub i64 %52, %47
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string.55"* %2, i64 %47, i64 %53, i64 %48, i64 %48, i64 0, i64 0) #13
  %54 = load i8, i8* %22, align 1
  br label %55

55:                                               ; preds = %51, %46
  %56 = phi i8 [ %54, %51 ], [ %23, %46 ]
  %57 = icmp slt i8 %56, 0
  br i1 %57, label %58, label %61

58:                                               ; preds = %55
  %59 = getelementptr inbounds %"class.std::__1::basic_string.55", %"class.std::__1::basic_string.55"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %60 = load i16*, i16** %59, align 8
  br label %63

61:                                               ; preds = %55
  %62 = bitcast %"class.std::__1::basic_string.55"* %2 to i16*
  br label %63

63:                                               ; preds = %61, %58
  %64 = phi i16* [ %60, %58 ], [ %62, %61 ]
  %65 = getelementptr inbounds i16, i16* %64, i64 %48
  %66 = bitcast i16* %65 to i8*
  %67 = and i64 %19, -2
  %68 = shl i64 %31, 1
  %69 = sub i64 %67, %68
  call void @llvm.memset.p0i8.i64(i8* align 2 %66, i8 0, i64 %69, i1 false)
  %70 = add i64 %48, %34
  %71 = load i8, i8* %22, align 1
  %72 = icmp slt i8 %71, 0
  br i1 %72, label %73, label %75

73:                                               ; preds = %63
  %74 = getelementptr inbounds %"class.std::__1::basic_string.55", %"class.std::__1::basic_string.55"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %70, i64* %74, align 8
  br label %77

75:                                               ; preds = %63
  %76 = trunc i64 %70 to i8
  store i8 %76, i8* %22, align 1
  br label %77

77:                                               ; preds = %75, %73
  %78 = getelementptr inbounds i16, i16* %64, i64 %70
  store i16 0, i16* %78, align 2
  br label %89

79:                                               ; preds = %30
  br i1 %24, label %80, label %85

80:                                               ; preds = %79
  %81 = getelementptr inbounds %"class.std::__1::basic_string.55", %"class.std::__1::basic_string.55"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load i16*, i16** %81, align 8
  %83 = getelementptr inbounds i16, i16* %82, i64 %20
  store i16 0, i16* %83, align 2
  %84 = getelementptr inbounds %"class.std::__1::basic_string.55", %"class.std::__1::basic_string.55"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %20, i64* %84, align 8
  br label %89

85:                                               ; preds = %79
  %86 = bitcast %"class.std::__1::basic_string.55"* %2 to i16*
  %87 = getelementptr inbounds i16, i16* %86, i64 %20
  store i16 0, i16* %87, align 2
  %88 = trunc i64 %20 to i8
  store i8 %88, i8* %22, align 1
  br label %91

89:                                               ; preds = %80, %33, %77
  %90 = load i8, i8* %22, align 1
  br label %91

91:                                               ; preds = %89, %85
  %92 = phi i8 [ %90, %89 ], [ %88, %85 ]
  %93 = icmp slt i8 %92, 0
  br i1 %93, label %94, label %97

94:                                               ; preds = %91
  %95 = getelementptr inbounds %"class.std::__1::basic_string.55", %"class.std::__1::basic_string.55"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %96 = load i64, i64* %95, align 8
  br label %99

97:                                               ; preds = %91
  %98 = zext i8 %92 to i64
  br label %99

99:                                               ; preds = %94, %97
  %100 = phi i64 [ %96, %94 ], [ %98, %97 ]
  %101 = icmp eq i64 %100, %20
  br i1 %101, label %102, label %743

102:                                              ; preds = %99
  %103 = bitcast i8* %10 to i16*
  %104 = tail call i1 @llvm.is.constant.i64(i64 %20) #13
  %105 = icmp ult i32 %18, 22
  %106 = and i1 %105, %104
  br i1 %106, label %107, label %414

107:                                              ; preds = %102
  br i1 %93, label %108, label %112

108:                                              ; preds = %107
  %109 = getelementptr inbounds %"class.std::__1::basic_string.55", %"class.std::__1::basic_string.55"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %20, i64* %109, align 8
  %110 = getelementptr inbounds %"class.std::__1::basic_string.55", %"class.std::__1::basic_string.55"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %111 = load i16*, i16** %110, align 8
  br label %115

112:                                              ; preds = %107
  %113 = trunc i64 %20 to i8
  store i8 %113, i8* %22, align 1
  %114 = bitcast %"class.std::__1::basic_string.55"* %2 to i16*
  br label %115

115:                                              ; preds = %112, %108
  %116 = phi i16* [ %111, %108 ], [ %114, %112 ]
  %117 = bitcast i16* %116 to i8*
  %118 = icmp eq i64 %20, 0
  br i1 %118, label %412, label %119

119:                                              ; preds = %115
  %120 = icmp ult i16* %116, %103
  br i1 %120, label %121, label %266

121:                                              ; preds = %119
  %122 = icmp ult i32 %18, 32
  br i1 %122, label %213, label %123

123:                                              ; preds = %121
  %124 = getelementptr i16, i16* %116, i64 %20
  %125 = bitcast i16* %124 to i8*
  %126 = and i64 %19, -2
  %127 = getelementptr i8, i8* %10, i64 %126
  %128 = icmp ugt i8* %127, %117
  %129 = icmp ult i8* %10, %125
  %130 = and i1 %128, %129
  br i1 %130, label %213, label %131

131:                                              ; preds = %123
  %132 = and i64 %20, 9223372036854775792
  %133 = sub nsw i64 %20, %132
  %134 = getelementptr i16, i16* %103, i64 %132
  %135 = getelementptr i16, i16* %116, i64 %132
  %136 = add nsw i64 %132, -16
  %137 = lshr exact i64 %136, 4
  %138 = add nuw nsw i64 %137, 1
  %139 = and i64 %138, 3
  %140 = icmp ult i64 %136, 48
  br i1 %140, label %192, label %141

141:                                              ; preds = %131
  %142 = sub nsw i64 %138, %139
  br label %143

143:                                              ; preds = %143, %141
  %144 = phi i64 [ 0, %141 ], [ %189, %143 ]
  %145 = phi i64 [ %142, %141 ], [ %190, %143 ]
  %146 = getelementptr i16, i16* %103, i64 %144
  %147 = getelementptr i16, i16* %116, i64 %144
  %148 = bitcast i16* %146 to <8 x i16>*
  %149 = load <8 x i16>, <8 x i16>* %148, align 2, !alias.scope !7
  %150 = getelementptr i16, i16* %146, i64 8
  %151 = bitcast i16* %150 to <8 x i16>*
  %152 = load <8 x i16>, <8 x i16>* %151, align 2, !alias.scope !7
  %153 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %153, align 2, !alias.scope !10, !noalias !7
  %154 = getelementptr i16, i16* %147, i64 8
  %155 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> %152, <8 x i16>* %155, align 2, !alias.scope !10, !noalias !7
  %156 = or i64 %144, 16
  %157 = getelementptr i16, i16* %103, i64 %156
  %158 = getelementptr i16, i16* %116, i64 %156
  %159 = bitcast i16* %157 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2, !alias.scope !7
  %161 = getelementptr i16, i16* %157, i64 8
  %162 = bitcast i16* %161 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 2, !alias.scope !7
  %164 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %160, <8 x i16>* %164, align 2, !alias.scope !10, !noalias !7
  %165 = getelementptr i16, i16* %158, i64 8
  %166 = bitcast i16* %165 to <8 x i16>*
  store <8 x i16> %163, <8 x i16>* %166, align 2, !alias.scope !10, !noalias !7
  %167 = or i64 %144, 32
  %168 = getelementptr i16, i16* %103, i64 %167
  %169 = getelementptr i16, i16* %116, i64 %167
  %170 = bitcast i16* %168 to <8 x i16>*
  %171 = load <8 x i16>, <8 x i16>* %170, align 2, !alias.scope !7
  %172 = getelementptr i16, i16* %168, i64 8
  %173 = bitcast i16* %172 to <8 x i16>*
  %174 = load <8 x i16>, <8 x i16>* %173, align 2, !alias.scope !7
  %175 = bitcast i16* %169 to <8 x i16>*
  store <8 x i16> %171, <8 x i16>* %175, align 2, !alias.scope !10, !noalias !7
  %176 = getelementptr i16, i16* %169, i64 8
  %177 = bitcast i16* %176 to <8 x i16>*
  store <8 x i16> %174, <8 x i16>* %177, align 2, !alias.scope !10, !noalias !7
  %178 = or i64 %144, 48
  %179 = getelementptr i16, i16* %103, i64 %178
  %180 = getelementptr i16, i16* %116, i64 %178
  %181 = bitcast i16* %179 to <8 x i16>*
  %182 = load <8 x i16>, <8 x i16>* %181, align 2, !alias.scope !7
  %183 = getelementptr i16, i16* %179, i64 8
  %184 = bitcast i16* %183 to <8 x i16>*
  %185 = load <8 x i16>, <8 x i16>* %184, align 2, !alias.scope !7
  %186 = bitcast i16* %180 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %186, align 2, !alias.scope !10, !noalias !7
  %187 = getelementptr i16, i16* %180, i64 8
  %188 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %185, <8 x i16>* %188, align 2, !alias.scope !10, !noalias !7
  %189 = add i64 %144, 64
  %190 = add i64 %145, -4
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %192, label %143, !llvm.loop !12

192:                                              ; preds = %143, %131
  %193 = phi i64 [ 0, %131 ], [ %189, %143 ]
  %194 = icmp eq i64 %139, 0
  br i1 %194, label %211, label %195

195:                                              ; preds = %192, %195
  %196 = phi i64 [ %208, %195 ], [ %193, %192 ]
  %197 = phi i64 [ %209, %195 ], [ %139, %192 ]
  %198 = getelementptr i16, i16* %103, i64 %196
  %199 = getelementptr i16, i16* %116, i64 %196
  %200 = bitcast i16* %198 to <8 x i16>*
  %201 = load <8 x i16>, <8 x i16>* %200, align 2, !alias.scope !7
  %202 = getelementptr i16, i16* %198, i64 8
  %203 = bitcast i16* %202 to <8 x i16>*
  %204 = load <8 x i16>, <8 x i16>* %203, align 2, !alias.scope !7
  %205 = bitcast i16* %199 to <8 x i16>*
  store <8 x i16> %201, <8 x i16>* %205, align 2, !alias.scope !10, !noalias !7
  %206 = getelementptr i16, i16* %199, i64 8
  %207 = bitcast i16* %206 to <8 x i16>*
  store <8 x i16> %204, <8 x i16>* %207, align 2, !alias.scope !10, !noalias !7
  %208 = add i64 %196, 16
  %209 = add i64 %197, -1
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %211, label %195, !llvm.loop !14

211:                                              ; preds = %195, %192
  %212 = icmp eq i64 %20, %132
  br i1 %212, label %412, label %213

213:                                              ; preds = %211, %123, %121
  %214 = phi i64 [ %20, %123 ], [ %20, %121 ], [ %133, %211 ]
  %215 = phi i16* [ %103, %123 ], [ %103, %121 ], [ %134, %211 ]
  %216 = phi i16* [ %116, %123 ], [ %116, %121 ], [ %135, %211 ]
  %217 = add nsw i64 %214, -1
  %218 = and i64 %214, 7
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %231, label %220

220:                                              ; preds = %213, %220
  %221 = phi i64 [ %226, %220 ], [ %214, %213 ]
  %222 = phi i16* [ %228, %220 ], [ %215, %213 ]
  %223 = phi i16* [ %227, %220 ], [ %216, %213 ]
  %224 = phi i64 [ %229, %220 ], [ %218, %213 ]
  %225 = load i16, i16* %222, align 2
  store i16 %225, i16* %223, align 2
  %226 = add nsw i64 %221, -1
  %227 = getelementptr inbounds i16, i16* %223, i64 1
  %228 = getelementptr inbounds i16, i16* %222, i64 1
  %229 = add i64 %224, -1
  %230 = icmp eq i64 %229, 0
  br i1 %230, label %231, label %220, !llvm.loop !16

231:                                              ; preds = %220, %213
  %232 = phi i64 [ %214, %213 ], [ %226, %220 ]
  %233 = phi i16* [ %215, %213 ], [ %228, %220 ]
  %234 = phi i16* [ %216, %213 ], [ %227, %220 ]
  %235 = icmp ult i64 %217, 7
  br i1 %235, label %412, label %236

236:                                              ; preds = %231, %236
  %237 = phi i64 [ %262, %236 ], [ %232, %231 ]
  %238 = phi i16* [ %264, %236 ], [ %233, %231 ]
  %239 = phi i16* [ %263, %236 ], [ %234, %231 ]
  %240 = load i16, i16* %238, align 2
  store i16 %240, i16* %239, align 2
  %241 = getelementptr inbounds i16, i16* %239, i64 1
  %242 = getelementptr inbounds i16, i16* %238, i64 1
  %243 = load i16, i16* %242, align 2
  store i16 %243, i16* %241, align 2
  %244 = getelementptr inbounds i16, i16* %239, i64 2
  %245 = getelementptr inbounds i16, i16* %238, i64 2
  %246 = load i16, i16* %245, align 2
  store i16 %246, i16* %244, align 2
  %247 = getelementptr inbounds i16, i16* %239, i64 3
  %248 = getelementptr inbounds i16, i16* %238, i64 3
  %249 = load i16, i16* %248, align 2
  store i16 %249, i16* %247, align 2
  %250 = getelementptr inbounds i16, i16* %239, i64 4
  %251 = getelementptr inbounds i16, i16* %238, i64 4
  %252 = load i16, i16* %251, align 2
  store i16 %252, i16* %250, align 2
  %253 = getelementptr inbounds i16, i16* %239, i64 5
  %254 = getelementptr inbounds i16, i16* %238, i64 5
  %255 = load i16, i16* %254, align 2
  store i16 %255, i16* %253, align 2
  %256 = getelementptr inbounds i16, i16* %239, i64 6
  %257 = getelementptr inbounds i16, i16* %238, i64 6
  %258 = load i16, i16* %257, align 2
  store i16 %258, i16* %256, align 2
  %259 = getelementptr inbounds i16, i16* %239, i64 7
  %260 = getelementptr inbounds i16, i16* %238, i64 7
  %261 = load i16, i16* %260, align 2
  store i16 %261, i16* %259, align 2
  %262 = add nsw i64 %237, -8
  %263 = getelementptr inbounds i16, i16* %239, i64 8
  %264 = getelementptr inbounds i16, i16* %238, i64 8
  %265 = icmp eq i64 %262, 0
  br i1 %265, label %412, label %236, !llvm.loop !17

266:                                              ; preds = %119
  %267 = icmp ugt i16* %116, %103
  br i1 %267, label %268, label %412

268:                                              ; preds = %266
  %269 = getelementptr inbounds i16, i16* %103, i64 %20
  %270 = getelementptr inbounds i16, i16* %116, i64 %20
  %271 = icmp ult i32 %18, 32
  br i1 %271, label %359, label %272

272:                                              ; preds = %268
  %273 = bitcast i16* %270 to i8*
  %274 = and i64 %19, -2
  %275 = getelementptr i8, i8* %10, i64 %274
  %276 = icmp ugt i8* %275, %117
  %277 = icmp ult i8* %10, %273
  %278 = and i1 %276, %277
  br i1 %278, label %359, label %279

279:                                              ; preds = %272
  %280 = and i64 %20, 9223372036854775792
  %281 = sub nsw i64 %20, %280
  %282 = sub nsw i64 0, %280
  %283 = getelementptr i16, i16* %269, i64 %282
  %284 = sub nsw i64 0, %280
  %285 = getelementptr i16, i16* %270, i64 %284
  %286 = add nsw i64 %280, -16
  %287 = lshr exact i64 %286, 4
  %288 = add nuw nsw i64 %287, 1
  %289 = and i64 %288, 1
  %290 = icmp eq i64 %286, 0
  br i1 %290, label %337, label %291

291:                                              ; preds = %279
  %292 = sub nuw nsw i64 %288, %289
  %293 = getelementptr i16, i16* %269, i64 -1
  %294 = getelementptr i16, i16* %270, i64 -1
  %295 = getelementptr i16, i16* %269, i64 -1
  %296 = getelementptr i16, i16* %270, i64 -1
  br label %297

297:                                              ; preds = %297, %291
  %298 = phi i64 [ 0, %291 ], [ %332, %297 ]
  %299 = phi i64 [ %292, %291 ], [ %333, %297 ]
  %300 = sub i64 0, %298
  %301 = sub i64 0, %298
  %302 = getelementptr inbounds i16, i16* %294, i64 %301
  %303 = getelementptr inbounds i16, i16* %293, i64 %300
  %304 = getelementptr inbounds i16, i16* %303, i64 -7
  %305 = bitcast i16* %304 to <8 x i16>*
  %306 = load <8 x i16>, <8 x i16>* %305, align 2, !alias.scope !18
  %307 = getelementptr inbounds i16, i16* %303, i64 -8
  %308 = getelementptr inbounds i16, i16* %307, i64 -7
  %309 = bitcast i16* %308 to <8 x i16>*
  %310 = load <8 x i16>, <8 x i16>* %309, align 2, !alias.scope !18
  %311 = getelementptr inbounds i16, i16* %302, i64 -7
  %312 = bitcast i16* %311 to <8 x i16>*
  store <8 x i16> %306, <8 x i16>* %312, align 2, !alias.scope !21, !noalias !18
  %313 = getelementptr inbounds i16, i16* %302, i64 -8
  %314 = getelementptr inbounds i16, i16* %313, i64 -7
  %315 = bitcast i16* %314 to <8 x i16>*
  store <8 x i16> %310, <8 x i16>* %315, align 2, !alias.scope !21, !noalias !18
  %316 = sub nuw nsw i64 -16, %298
  %317 = sub nuw nsw i64 -16, %298
  %318 = getelementptr inbounds i16, i16* %296, i64 %317
  %319 = getelementptr inbounds i16, i16* %295, i64 %316
  %320 = getelementptr inbounds i16, i16* %319, i64 -7
  %321 = bitcast i16* %320 to <8 x i16>*
  %322 = load <8 x i16>, <8 x i16>* %321, align 2, !alias.scope !18
  %323 = getelementptr inbounds i16, i16* %319, i64 -8
  %324 = getelementptr inbounds i16, i16* %323, i64 -7
  %325 = bitcast i16* %324 to <8 x i16>*
  %326 = load <8 x i16>, <8 x i16>* %325, align 2, !alias.scope !18
  %327 = getelementptr inbounds i16, i16* %318, i64 -7
  %328 = bitcast i16* %327 to <8 x i16>*
  store <8 x i16> %322, <8 x i16>* %328, align 2, !alias.scope !21, !noalias !18
  %329 = getelementptr inbounds i16, i16* %318, i64 -8
  %330 = getelementptr inbounds i16, i16* %329, i64 -7
  %331 = bitcast i16* %330 to <8 x i16>*
  store <8 x i16> %326, <8 x i16>* %331, align 2, !alias.scope !21, !noalias !18
  %332 = add i64 %298, 32
  %333 = add i64 %299, -2
  %334 = icmp eq i64 %333, 0
  br i1 %334, label %335, label %297, !llvm.loop !23

335:                                              ; preds = %297
  %336 = sub nuw nsw i64 -32, %298
  br label %337

337:                                              ; preds = %335, %279
  %338 = phi i64 [ 0, %279 ], [ %336, %335 ]
  %339 = icmp eq i64 %289, 0
  br i1 %339, label %357, label %340

340:                                              ; preds = %337
  %341 = getelementptr i16, i16* %269, i64 -1
  %342 = getelementptr i16, i16* %270, i64 -1
  %343 = getelementptr inbounds i16, i16* %342, i64 %338
  %344 = getelementptr inbounds i16, i16* %341, i64 %338
  %345 = getelementptr inbounds i16, i16* %344, i64 -7
  %346 = bitcast i16* %345 to <8 x i16>*
  %347 = load <8 x i16>, <8 x i16>* %346, align 2, !alias.scope !18
  %348 = getelementptr inbounds i16, i16* %344, i64 -8
  %349 = getelementptr inbounds i16, i16* %348, i64 -7
  %350 = bitcast i16* %349 to <8 x i16>*
  %351 = load <8 x i16>, <8 x i16>* %350, align 2, !alias.scope !18
  %352 = getelementptr inbounds i16, i16* %343, i64 -7
  %353 = bitcast i16* %352 to <8 x i16>*
  store <8 x i16> %347, <8 x i16>* %353, align 2, !alias.scope !21, !noalias !18
  %354 = getelementptr inbounds i16, i16* %343, i64 -8
  %355 = getelementptr inbounds i16, i16* %354, i64 -7
  %356 = bitcast i16* %355 to <8 x i16>*
  store <8 x i16> %351, <8 x i16>* %356, align 2, !alias.scope !21, !noalias !18
  br label %357

357:                                              ; preds = %337, %340
  %358 = icmp eq i64 %20, %280
  br i1 %358, label %412, label %359

359:                                              ; preds = %357, %272, %268
  %360 = phi i64 [ %20, %272 ], [ %20, %268 ], [ %281, %357 ]
  %361 = phi i16* [ %269, %272 ], [ %269, %268 ], [ %283, %357 ]
  %362 = phi i16* [ %270, %272 ], [ %270, %268 ], [ %285, %357 ]
  %363 = add nsw i64 %360, -1
  %364 = and i64 %360, 7
  %365 = icmp eq i64 %364, 0
  br i1 %365, label %377, label %366

366:                                              ; preds = %359, %366
  %367 = phi i64 [ %374, %366 ], [ %360, %359 ]
  %368 = phi i16* [ %372, %366 ], [ %361, %359 ]
  %369 = phi i16* [ %371, %366 ], [ %362, %359 ]
  %370 = phi i64 [ %375, %366 ], [ %364, %359 ]
  %371 = getelementptr inbounds i16, i16* %369, i64 -1
  %372 = getelementptr inbounds i16, i16* %368, i64 -1
  %373 = load i16, i16* %372, align 2
  store i16 %373, i16* %371, align 2
  %374 = add nsw i64 %367, -1
  %375 = add i64 %370, -1
  %376 = icmp eq i64 %375, 0
  br i1 %376, label %377, label %366, !llvm.loop !24

377:                                              ; preds = %366, %359
  %378 = phi i64 [ %360, %359 ], [ %374, %366 ]
  %379 = phi i16* [ %361, %359 ], [ %372, %366 ]
  %380 = phi i16* [ %362, %359 ], [ %371, %366 ]
  %381 = icmp ult i64 %363, 7
  br i1 %381, label %412, label %382

382:                                              ; preds = %377, %382
  %383 = phi i64 [ %410, %382 ], [ %378, %377 ]
  %384 = phi i16* [ %408, %382 ], [ %379, %377 ]
  %385 = phi i16* [ %407, %382 ], [ %380, %377 ]
  %386 = getelementptr inbounds i16, i16* %385, i64 -1
  %387 = getelementptr inbounds i16, i16* %384, i64 -1
  %388 = load i16, i16* %387, align 2
  store i16 %388, i16* %386, align 2
  %389 = getelementptr inbounds i16, i16* %385, i64 -2
  %390 = getelementptr inbounds i16, i16* %384, i64 -2
  %391 = load i16, i16* %390, align 2
  store i16 %391, i16* %389, align 2
  %392 = getelementptr inbounds i16, i16* %385, i64 -3
  %393 = getelementptr inbounds i16, i16* %384, i64 -3
  %394 = load i16, i16* %393, align 2
  store i16 %394, i16* %392, align 2
  %395 = getelementptr inbounds i16, i16* %385, i64 -4
  %396 = getelementptr inbounds i16, i16* %384, i64 -4
  %397 = load i16, i16* %396, align 2
  store i16 %397, i16* %395, align 2
  %398 = getelementptr inbounds i16, i16* %385, i64 -5
  %399 = getelementptr inbounds i16, i16* %384, i64 -5
  %400 = load i16, i16* %399, align 2
  store i16 %400, i16* %398, align 2
  %401 = getelementptr inbounds i16, i16* %385, i64 -6
  %402 = getelementptr inbounds i16, i16* %384, i64 -6
  %403 = load i16, i16* %402, align 2
  store i16 %403, i16* %401, align 2
  %404 = getelementptr inbounds i16, i16* %385, i64 -7
  %405 = getelementptr inbounds i16, i16* %384, i64 -7
  %406 = load i16, i16* %405, align 2
  store i16 %406, i16* %404, align 2
  %407 = getelementptr inbounds i16, i16* %385, i64 -8
  %408 = getelementptr inbounds i16, i16* %384, i64 -8
  %409 = load i16, i16* %408, align 2
  store i16 %409, i16* %407, align 2
  %410 = add nsw i64 %383, -8
  %411 = icmp eq i64 %410, 0
  br i1 %411, label %412, label %382, !llvm.loop !25

412:                                              ; preds = %377, %382, %231, %236, %357, %211, %266, %115
  %413 = getelementptr inbounds i16, i16* %116, i64 %20
  store i16 0, i16* %413, align 2
  br label %743

414:                                              ; preds = %102
  br i1 %93, label %415, label %420

415:                                              ; preds = %414
  %416 = getelementptr inbounds %"class.std::__1::basic_string.55", %"class.std::__1::basic_string.55"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %417 = load i64, i64* %416, align 8
  %418 = and i64 %417, 9223372036854775807
  %419 = add nsw i64 %418, -1
  br label %420

420:                                              ; preds = %415, %414
  %421 = phi i64 [ %419, %415 ], [ 10, %414 ]
  %422 = icmp ugt i64 %20, %421
  br i1 %422, label %734, label %423

423:                                              ; preds = %420
  br i1 %93, label %424, label %427

424:                                              ; preds = %423
  %425 = getelementptr inbounds %"class.std::__1::basic_string.55", %"class.std::__1::basic_string.55"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %426 = load i16*, i16** %425, align 8
  br label %429

427:                                              ; preds = %423
  %428 = bitcast %"class.std::__1::basic_string.55"* %2 to i16*
  br label %429

429:                                              ; preds = %427, %424
  %430 = phi i16* [ %426, %424 ], [ %428, %427 ]
  %431 = bitcast i16* %430 to i8*
  %432 = icmp eq i64 %20, 0
  br i1 %432, label %726, label %433

433:                                              ; preds = %429
  %434 = icmp ult i16* %430, %103
  br i1 %434, label %435, label %580

435:                                              ; preds = %433
  %436 = icmp ult i32 %18, 32
  br i1 %436, label %527, label %437

437:                                              ; preds = %435
  %438 = getelementptr i16, i16* %430, i64 %20
  %439 = bitcast i16* %438 to i8*
  %440 = and i64 %19, -2
  %441 = getelementptr i8, i8* %10, i64 %440
  %442 = icmp ugt i8* %441, %431
  %443 = icmp ult i8* %10, %439
  %444 = and i1 %442, %443
  br i1 %444, label %527, label %445

445:                                              ; preds = %437
  %446 = and i64 %20, 9223372036854775792
  %447 = sub nsw i64 %20, %446
  %448 = getelementptr i16, i16* %103, i64 %446
  %449 = getelementptr i16, i16* %430, i64 %446
  %450 = add nsw i64 %446, -16
  %451 = lshr exact i64 %450, 4
  %452 = add nuw nsw i64 %451, 1
  %453 = and i64 %452, 3
  %454 = icmp ult i64 %450, 48
  br i1 %454, label %506, label %455

455:                                              ; preds = %445
  %456 = sub nsw i64 %452, %453
  br label %457

457:                                              ; preds = %457, %455
  %458 = phi i64 [ 0, %455 ], [ %503, %457 ]
  %459 = phi i64 [ %456, %455 ], [ %504, %457 ]
  %460 = getelementptr i16, i16* %103, i64 %458
  %461 = getelementptr i16, i16* %430, i64 %458
  %462 = bitcast i16* %460 to <8 x i16>*
  %463 = load <8 x i16>, <8 x i16>* %462, align 2, !alias.scope !26
  %464 = getelementptr i16, i16* %460, i64 8
  %465 = bitcast i16* %464 to <8 x i16>*
  %466 = load <8 x i16>, <8 x i16>* %465, align 2, !alias.scope !26
  %467 = bitcast i16* %461 to <8 x i16>*
  store <8 x i16> %463, <8 x i16>* %467, align 2, !alias.scope !29, !noalias !26
  %468 = getelementptr i16, i16* %461, i64 8
  %469 = bitcast i16* %468 to <8 x i16>*
  store <8 x i16> %466, <8 x i16>* %469, align 2, !alias.scope !29, !noalias !26
  %470 = or i64 %458, 16
  %471 = getelementptr i16, i16* %103, i64 %470
  %472 = getelementptr i16, i16* %430, i64 %470
  %473 = bitcast i16* %471 to <8 x i16>*
  %474 = load <8 x i16>, <8 x i16>* %473, align 2, !alias.scope !26
  %475 = getelementptr i16, i16* %471, i64 8
  %476 = bitcast i16* %475 to <8 x i16>*
  %477 = load <8 x i16>, <8 x i16>* %476, align 2, !alias.scope !26
  %478 = bitcast i16* %472 to <8 x i16>*
  store <8 x i16> %474, <8 x i16>* %478, align 2, !alias.scope !29, !noalias !26
  %479 = getelementptr i16, i16* %472, i64 8
  %480 = bitcast i16* %479 to <8 x i16>*
  store <8 x i16> %477, <8 x i16>* %480, align 2, !alias.scope !29, !noalias !26
  %481 = or i64 %458, 32
  %482 = getelementptr i16, i16* %103, i64 %481
  %483 = getelementptr i16, i16* %430, i64 %481
  %484 = bitcast i16* %482 to <8 x i16>*
  %485 = load <8 x i16>, <8 x i16>* %484, align 2, !alias.scope !26
  %486 = getelementptr i16, i16* %482, i64 8
  %487 = bitcast i16* %486 to <8 x i16>*
  %488 = load <8 x i16>, <8 x i16>* %487, align 2, !alias.scope !26
  %489 = bitcast i16* %483 to <8 x i16>*
  store <8 x i16> %485, <8 x i16>* %489, align 2, !alias.scope !29, !noalias !26
  %490 = getelementptr i16, i16* %483, i64 8
  %491 = bitcast i16* %490 to <8 x i16>*
  store <8 x i16> %488, <8 x i16>* %491, align 2, !alias.scope !29, !noalias !26
  %492 = or i64 %458, 48
  %493 = getelementptr i16, i16* %103, i64 %492
  %494 = getelementptr i16, i16* %430, i64 %492
  %495 = bitcast i16* %493 to <8 x i16>*
  %496 = load <8 x i16>, <8 x i16>* %495, align 2, !alias.scope !26
  %497 = getelementptr i16, i16* %493, i64 8
  %498 = bitcast i16* %497 to <8 x i16>*
  %499 = load <8 x i16>, <8 x i16>* %498, align 2, !alias.scope !26
  %500 = bitcast i16* %494 to <8 x i16>*
  store <8 x i16> %496, <8 x i16>* %500, align 2, !alias.scope !29, !noalias !26
  %501 = getelementptr i16, i16* %494, i64 8
  %502 = bitcast i16* %501 to <8 x i16>*
  store <8 x i16> %499, <8 x i16>* %502, align 2, !alias.scope !29, !noalias !26
  %503 = add i64 %458, 64
  %504 = add i64 %459, -4
  %505 = icmp eq i64 %504, 0
  br i1 %505, label %506, label %457, !llvm.loop !31

506:                                              ; preds = %457, %445
  %507 = phi i64 [ 0, %445 ], [ %503, %457 ]
  %508 = icmp eq i64 %453, 0
  br i1 %508, label %525, label %509

509:                                              ; preds = %506, %509
  %510 = phi i64 [ %522, %509 ], [ %507, %506 ]
  %511 = phi i64 [ %523, %509 ], [ %453, %506 ]
  %512 = getelementptr i16, i16* %103, i64 %510
  %513 = getelementptr i16, i16* %430, i64 %510
  %514 = bitcast i16* %512 to <8 x i16>*
  %515 = load <8 x i16>, <8 x i16>* %514, align 2, !alias.scope !26
  %516 = getelementptr i16, i16* %512, i64 8
  %517 = bitcast i16* %516 to <8 x i16>*
  %518 = load <8 x i16>, <8 x i16>* %517, align 2, !alias.scope !26
  %519 = bitcast i16* %513 to <8 x i16>*
  store <8 x i16> %515, <8 x i16>* %519, align 2, !alias.scope !29, !noalias !26
  %520 = getelementptr i16, i16* %513, i64 8
  %521 = bitcast i16* %520 to <8 x i16>*
  store <8 x i16> %518, <8 x i16>* %521, align 2, !alias.scope !29, !noalias !26
  %522 = add i64 %510, 16
  %523 = add i64 %511, -1
  %524 = icmp eq i64 %523, 0
  br i1 %524, label %525, label %509, !llvm.loop !32

525:                                              ; preds = %509, %506
  %526 = icmp eq i64 %20, %446
  br i1 %526, label %726, label %527

527:                                              ; preds = %525, %437, %435
  %528 = phi i64 [ %20, %437 ], [ %20, %435 ], [ %447, %525 ]
  %529 = phi i16* [ %103, %437 ], [ %103, %435 ], [ %448, %525 ]
  %530 = phi i16* [ %430, %437 ], [ %430, %435 ], [ %449, %525 ]
  %531 = add nsw i64 %528, -1
  %532 = and i64 %528, 7
  %533 = icmp eq i64 %532, 0
  br i1 %533, label %545, label %534

534:                                              ; preds = %527, %534
  %535 = phi i64 [ %540, %534 ], [ %528, %527 ]
  %536 = phi i16* [ %542, %534 ], [ %529, %527 ]
  %537 = phi i16* [ %541, %534 ], [ %530, %527 ]
  %538 = phi i64 [ %543, %534 ], [ %532, %527 ]
  %539 = load i16, i16* %536, align 2
  store i16 %539, i16* %537, align 2
  %540 = add nsw i64 %535, -1
  %541 = getelementptr inbounds i16, i16* %537, i64 1
  %542 = getelementptr inbounds i16, i16* %536, i64 1
  %543 = add i64 %538, -1
  %544 = icmp eq i64 %543, 0
  br i1 %544, label %545, label %534, !llvm.loop !33

545:                                              ; preds = %534, %527
  %546 = phi i64 [ %528, %527 ], [ %540, %534 ]
  %547 = phi i16* [ %529, %527 ], [ %542, %534 ]
  %548 = phi i16* [ %530, %527 ], [ %541, %534 ]
  %549 = icmp ult i64 %531, 7
  br i1 %549, label %726, label %550

550:                                              ; preds = %545, %550
  %551 = phi i64 [ %576, %550 ], [ %546, %545 ]
  %552 = phi i16* [ %578, %550 ], [ %547, %545 ]
  %553 = phi i16* [ %577, %550 ], [ %548, %545 ]
  %554 = load i16, i16* %552, align 2
  store i16 %554, i16* %553, align 2
  %555 = getelementptr inbounds i16, i16* %553, i64 1
  %556 = getelementptr inbounds i16, i16* %552, i64 1
  %557 = load i16, i16* %556, align 2
  store i16 %557, i16* %555, align 2
  %558 = getelementptr inbounds i16, i16* %553, i64 2
  %559 = getelementptr inbounds i16, i16* %552, i64 2
  %560 = load i16, i16* %559, align 2
  store i16 %560, i16* %558, align 2
  %561 = getelementptr inbounds i16, i16* %553, i64 3
  %562 = getelementptr inbounds i16, i16* %552, i64 3
  %563 = load i16, i16* %562, align 2
  store i16 %563, i16* %561, align 2
  %564 = getelementptr inbounds i16, i16* %553, i64 4
  %565 = getelementptr inbounds i16, i16* %552, i64 4
  %566 = load i16, i16* %565, align 2
  store i16 %566, i16* %564, align 2
  %567 = getelementptr inbounds i16, i16* %553, i64 5
  %568 = getelementptr inbounds i16, i16* %552, i64 5
  %569 = load i16, i16* %568, align 2
  store i16 %569, i16* %567, align 2
  %570 = getelementptr inbounds i16, i16* %553, i64 6
  %571 = getelementptr inbounds i16, i16* %552, i64 6
  %572 = load i16, i16* %571, align 2
  store i16 %572, i16* %570, align 2
  %573 = getelementptr inbounds i16, i16* %553, i64 7
  %574 = getelementptr inbounds i16, i16* %552, i64 7
  %575 = load i16, i16* %574, align 2
  store i16 %575, i16* %573, align 2
  %576 = add nsw i64 %551, -8
  %577 = getelementptr inbounds i16, i16* %553, i64 8
  %578 = getelementptr inbounds i16, i16* %552, i64 8
  %579 = icmp eq i64 %576, 0
  br i1 %579, label %726, label %550, !llvm.loop !34

580:                                              ; preds = %433
  %581 = icmp ugt i16* %430, %103
  br i1 %581, label %582, label %726

582:                                              ; preds = %580
  %583 = getelementptr inbounds i16, i16* %103, i64 %20
  %584 = getelementptr inbounds i16, i16* %430, i64 %20
  %585 = icmp ult i32 %18, 32
  br i1 %585, label %673, label %586

586:                                              ; preds = %582
  %587 = bitcast i16* %584 to i8*
  %588 = and i64 %19, -2
  %589 = getelementptr i8, i8* %10, i64 %588
  %590 = icmp ugt i8* %589, %431
  %591 = icmp ult i8* %10, %587
  %592 = and i1 %590, %591
  br i1 %592, label %673, label %593

593:                                              ; preds = %586
  %594 = and i64 %20, 9223372036854775792
  %595 = sub nsw i64 %20, %594
  %596 = sub nsw i64 0, %594
  %597 = getelementptr i16, i16* %583, i64 %596
  %598 = sub nsw i64 0, %594
  %599 = getelementptr i16, i16* %584, i64 %598
  %600 = add nsw i64 %594, -16
  %601 = lshr exact i64 %600, 4
  %602 = add nuw nsw i64 %601, 1
  %603 = and i64 %602, 1
  %604 = icmp eq i64 %600, 0
  br i1 %604, label %651, label %605

605:                                              ; preds = %593
  %606 = sub nuw nsw i64 %602, %603
  %607 = getelementptr i16, i16* %583, i64 -1
  %608 = getelementptr i16, i16* %584, i64 -1
  %609 = getelementptr i16, i16* %583, i64 -1
  %610 = getelementptr i16, i16* %584, i64 -1
  br label %611

611:                                              ; preds = %611, %605
  %612 = phi i64 [ 0, %605 ], [ %646, %611 ]
  %613 = phi i64 [ %606, %605 ], [ %647, %611 ]
  %614 = sub i64 0, %612
  %615 = sub i64 0, %612
  %616 = getelementptr inbounds i16, i16* %608, i64 %615
  %617 = getelementptr inbounds i16, i16* %607, i64 %614
  %618 = getelementptr inbounds i16, i16* %617, i64 -7
  %619 = bitcast i16* %618 to <8 x i16>*
  %620 = load <8 x i16>, <8 x i16>* %619, align 2, !alias.scope !35
  %621 = getelementptr inbounds i16, i16* %617, i64 -8
  %622 = getelementptr inbounds i16, i16* %621, i64 -7
  %623 = bitcast i16* %622 to <8 x i16>*
  %624 = load <8 x i16>, <8 x i16>* %623, align 2, !alias.scope !35
  %625 = getelementptr inbounds i16, i16* %616, i64 -7
  %626 = bitcast i16* %625 to <8 x i16>*
  store <8 x i16> %620, <8 x i16>* %626, align 2, !alias.scope !38, !noalias !35
  %627 = getelementptr inbounds i16, i16* %616, i64 -8
  %628 = getelementptr inbounds i16, i16* %627, i64 -7
  %629 = bitcast i16* %628 to <8 x i16>*
  store <8 x i16> %624, <8 x i16>* %629, align 2, !alias.scope !38, !noalias !35
  %630 = sub nuw nsw i64 -16, %612
  %631 = sub nuw nsw i64 -16, %612
  %632 = getelementptr inbounds i16, i16* %610, i64 %631
  %633 = getelementptr inbounds i16, i16* %609, i64 %630
  %634 = getelementptr inbounds i16, i16* %633, i64 -7
  %635 = bitcast i16* %634 to <8 x i16>*
  %636 = load <8 x i16>, <8 x i16>* %635, align 2, !alias.scope !35
  %637 = getelementptr inbounds i16, i16* %633, i64 -8
  %638 = getelementptr inbounds i16, i16* %637, i64 -7
  %639 = bitcast i16* %638 to <8 x i16>*
  %640 = load <8 x i16>, <8 x i16>* %639, align 2, !alias.scope !35
  %641 = getelementptr inbounds i16, i16* %632, i64 -7
  %642 = bitcast i16* %641 to <8 x i16>*
  store <8 x i16> %636, <8 x i16>* %642, align 2, !alias.scope !38, !noalias !35
  %643 = getelementptr inbounds i16, i16* %632, i64 -8
  %644 = getelementptr inbounds i16, i16* %643, i64 -7
  %645 = bitcast i16* %644 to <8 x i16>*
  store <8 x i16> %640, <8 x i16>* %645, align 2, !alias.scope !38, !noalias !35
  %646 = add i64 %612, 32
  %647 = add i64 %613, -2
  %648 = icmp eq i64 %647, 0
  br i1 %648, label %649, label %611, !llvm.loop !40

649:                                              ; preds = %611
  %650 = sub nuw nsw i64 -32, %612
  br label %651

651:                                              ; preds = %649, %593
  %652 = phi i64 [ 0, %593 ], [ %650, %649 ]
  %653 = icmp eq i64 %603, 0
  br i1 %653, label %671, label %654

654:                                              ; preds = %651
  %655 = getelementptr i16, i16* %583, i64 -1
  %656 = getelementptr i16, i16* %584, i64 -1
  %657 = getelementptr inbounds i16, i16* %656, i64 %652
  %658 = getelementptr inbounds i16, i16* %655, i64 %652
  %659 = getelementptr inbounds i16, i16* %658, i64 -7
  %660 = bitcast i16* %659 to <8 x i16>*
  %661 = load <8 x i16>, <8 x i16>* %660, align 2, !alias.scope !35
  %662 = getelementptr inbounds i16, i16* %658, i64 -8
  %663 = getelementptr inbounds i16, i16* %662, i64 -7
  %664 = bitcast i16* %663 to <8 x i16>*
  %665 = load <8 x i16>, <8 x i16>* %664, align 2, !alias.scope !35
  %666 = getelementptr inbounds i16, i16* %657, i64 -7
  %667 = bitcast i16* %666 to <8 x i16>*
  store <8 x i16> %661, <8 x i16>* %667, align 2, !alias.scope !38, !noalias !35
  %668 = getelementptr inbounds i16, i16* %657, i64 -8
  %669 = getelementptr inbounds i16, i16* %668, i64 -7
  %670 = bitcast i16* %669 to <8 x i16>*
  store <8 x i16> %665, <8 x i16>* %670, align 2, !alias.scope !38, !noalias !35
  br label %671

671:                                              ; preds = %651, %654
  %672 = icmp eq i64 %20, %594
  br i1 %672, label %726, label %673

673:                                              ; preds = %671, %586, %582
  %674 = phi i64 [ %20, %586 ], [ %20, %582 ], [ %595, %671 ]
  %675 = phi i16* [ %583, %586 ], [ %583, %582 ], [ %597, %671 ]
  %676 = phi i16* [ %584, %586 ], [ %584, %582 ], [ %599, %671 ]
  %677 = add nsw i64 %674, -1
  %678 = and i64 %674, 7
  %679 = icmp eq i64 %678, 0
  br i1 %679, label %691, label %680

680:                                              ; preds = %673, %680
  %681 = phi i64 [ %688, %680 ], [ %674, %673 ]
  %682 = phi i16* [ %686, %680 ], [ %675, %673 ]
  %683 = phi i16* [ %685, %680 ], [ %676, %673 ]
  %684 = phi i64 [ %689, %680 ], [ %678, %673 ]
  %685 = getelementptr inbounds i16, i16* %683, i64 -1
  %686 = getelementptr inbounds i16, i16* %682, i64 -1
  %687 = load i16, i16* %686, align 2
  store i16 %687, i16* %685, align 2
  %688 = add nsw i64 %681, -1
  %689 = add i64 %684, -1
  %690 = icmp eq i64 %689, 0
  br i1 %690, label %691, label %680, !llvm.loop !41

691:                                              ; preds = %680, %673
  %692 = phi i64 [ %674, %673 ], [ %688, %680 ]
  %693 = phi i16* [ %675, %673 ], [ %686, %680 ]
  %694 = phi i16* [ %676, %673 ], [ %685, %680 ]
  %695 = icmp ult i64 %677, 7
  br i1 %695, label %726, label %696

696:                                              ; preds = %691, %696
  %697 = phi i64 [ %724, %696 ], [ %692, %691 ]
  %698 = phi i16* [ %722, %696 ], [ %693, %691 ]
  %699 = phi i16* [ %721, %696 ], [ %694, %691 ]
  %700 = getelementptr inbounds i16, i16* %699, i64 -1
  %701 = getelementptr inbounds i16, i16* %698, i64 -1
  %702 = load i16, i16* %701, align 2
  store i16 %702, i16* %700, align 2
  %703 = getelementptr inbounds i16, i16* %699, i64 -2
  %704 = getelementptr inbounds i16, i16* %698, i64 -2
  %705 = load i16, i16* %704, align 2
  store i16 %705, i16* %703, align 2
  %706 = getelementptr inbounds i16, i16* %699, i64 -3
  %707 = getelementptr inbounds i16, i16* %698, i64 -3
  %708 = load i16, i16* %707, align 2
  store i16 %708, i16* %706, align 2
  %709 = getelementptr inbounds i16, i16* %699, i64 -4
  %710 = getelementptr inbounds i16, i16* %698, i64 -4
  %711 = load i16, i16* %710, align 2
  store i16 %711, i16* %709, align 2
  %712 = getelementptr inbounds i16, i16* %699, i64 -5
  %713 = getelementptr inbounds i16, i16* %698, i64 -5
  %714 = load i16, i16* %713, align 2
  store i16 %714, i16* %712, align 2
  %715 = getelementptr inbounds i16, i16* %699, i64 -6
  %716 = getelementptr inbounds i16, i16* %698, i64 -6
  %717 = load i16, i16* %716, align 2
  store i16 %717, i16* %715, align 2
  %718 = getelementptr inbounds i16, i16* %699, i64 -7
  %719 = getelementptr inbounds i16, i16* %698, i64 -7
  %720 = load i16, i16* %719, align 2
  store i16 %720, i16* %718, align 2
  %721 = getelementptr inbounds i16, i16* %699, i64 -8
  %722 = getelementptr inbounds i16, i16* %698, i64 -8
  %723 = load i16, i16* %722, align 2
  store i16 %723, i16* %721, align 2
  %724 = add nsw i64 %697, -8
  %725 = icmp eq i64 %724, 0
  br i1 %725, label %726, label %696, !llvm.loop !42

726:                                              ; preds = %691, %696, %545, %550, %671, %525, %580, %429
  %727 = getelementptr inbounds i16, i16* %430, i64 %20
  store i16 0, i16* %727, align 2
  %728 = load i8, i8* %22, align 1
  %729 = icmp slt i8 %728, 0
  br i1 %729, label %730, label %732

730:                                              ; preds = %726
  %731 = getelementptr inbounds %"class.std::__1::basic_string.55", %"class.std::__1::basic_string.55"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %20, i64* %731, align 8
  br label %743

732:                                              ; preds = %726
  %733 = trunc i64 %20 to i8
  store i8 %733, i8* %22, align 1
  br label %743

734:                                              ; preds = %420
  br i1 %93, label %735, label %738

735:                                              ; preds = %734
  %736 = getelementptr inbounds %"class.std::__1::basic_string.55", %"class.std::__1::basic_string.55"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %737 = load i64, i64* %736, align 8
  br label %740

738:                                              ; preds = %734
  %739 = zext i8 %92 to i64
  br label %740

740:                                              ; preds = %738, %735
  %741 = phi i64 [ %737, %735 ], [ %739, %738 ]
  %742 = sub nsw i64 %20, %421
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.55"* %2, i64 %421, i64 %742, i64 %741, i64 0, i64 %741, i64 %20, i16* %103) #13
  br label %743

743:                                              ; preds = %3, %412, %730, %732, %740, %99
  %744 = phi i1 [ false, %3 ], [ false, %99 ], [ true, %740 ], [ true, %732 ], [ true, %730 ], [ true, %412 ]
  ret i1 %744
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3sql9Statement18ColumnBlobAsVectorEiPNSt3__16vectorIcNS1_9allocatorIcEEEE(%"class.sql::Statement"* nocapture readonly, i32, %"class.std::__1::vector.65"*) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.std::__1::vector.65"* %2 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.65", %"class.std::__1::vector.65"* %2, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  store i64 %5, i64* %7, align 8
  %8 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %9 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %8, align 8
  %10 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %9, i64 0, i32 3
  %11 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %10, align 8
  %12 = icmp eq %struct.sqlite3_stmt* %11, null
  br i1 %12, label %39, label %13

13:                                               ; preds = %3
  %14 = tail call i8* @chrome_sqlite3_column_blob(%struct.sqlite3_stmt* nonnull %11, i32 %1) #13
  %15 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %8, align 8
  %16 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %15, i64 0, i32 3
  %17 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %16, align 8
  %18 = tail call i32 @chrome_sqlite3_column_bytes(%struct.sqlite3_stmt* %17, i32 %1) #13
  %19 = icmp ne i8* %14, null
  %20 = icmp sgt i32 %18, 0
  %21 = and i1 %19, %20
  br i1 %21, label %22, label %39

22:                                               ; preds = %13
  %23 = sext i32 %18 to i64
  %24 = load i64, i64* %7, align 8
  %25 = load i64, i64* %4, align 8
  %26 = sub i64 %24, %25
  %27 = icmp ult i64 %26, %23
  %28 = inttoptr i64 %25 to i8*
  br i1 %27, label %29, label %33

29:                                               ; preds = %22
  %30 = sub i64 %23, %26
  tail call void @_ZNSt3__16vectorIcNS_9allocatorIcEEE8__appendEm(%"class.std::__1::vector.65"* %2, i64 %30) #13
  %31 = getelementptr inbounds %"class.std::__1::vector.65", %"class.std::__1::vector.65"* %2, i64 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  br label %37

33:                                               ; preds = %22
  %34 = icmp ugt i64 %26, %23
  br i1 %34, label %35, label %37

35:                                               ; preds = %33
  %36 = getelementptr inbounds i8, i8* %28, i64 %23
  store i8* %36, i8** %6, align 8
  br label %37

37:                                               ; preds = %29, %33, %35
  %38 = phi i8* [ %32, %29 ], [ %28, %33 ], [ %28, %35 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* nonnull align 1 %14, i64 %23, i1 false)
  br label %39

39:                                               ; preds = %3, %13, %37
  %40 = phi i1 [ false, %3 ], [ true, %37 ], [ true, %13 ]
  ret i1 %40
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3sql9Statement18ColumnBlobAsVectorEiPNSt3__16vectorIhNS1_9allocatorIhEEEE(%"class.sql::Statement"* nocapture readonly, i32, %"class.std::__1::vector.69"*) local_unnamed_addr #0 align 2 {
  %4 = bitcast %"class.std::__1::vector.69"* %2 to %"class.std::__1::vector.65"*
  %5 = bitcast %"class.std::__1::vector.69"* %2 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.65", %"class.std::__1::vector.65"* %4, i64 0, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %10 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %9, align 8
  %11 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %10, i64 0, i32 3
  %12 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %11, align 8
  %13 = icmp eq %struct.sqlite3_stmt* %12, null
  br i1 %13, label %40, label %14

14:                                               ; preds = %3
  %15 = tail call i8* @chrome_sqlite3_column_blob(%struct.sqlite3_stmt* nonnull %12, i32 %1) #13
  %16 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %9, align 8
  %17 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %16, i64 0, i32 3
  %18 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %17, align 8
  %19 = tail call i32 @chrome_sqlite3_column_bytes(%struct.sqlite3_stmt* %18, i32 %1) #13
  %20 = icmp ne i8* %15, null
  %21 = icmp sgt i32 %19, 0
  %22 = and i1 %20, %21
  br i1 %22, label %23, label %40

23:                                               ; preds = %14
  %24 = sext i32 %19 to i64
  %25 = load i64, i64* %8, align 8
  %26 = load i64, i64* %5, align 8
  %27 = sub i64 %25, %26
  %28 = icmp ult i64 %27, %24
  %29 = inttoptr i64 %26 to i8*
  br i1 %28, label %30, label %34

30:                                               ; preds = %23
  %31 = sub i64 %24, %27
  tail call void @_ZNSt3__16vectorIcNS_9allocatorIcEEE8__appendEm(%"class.std::__1::vector.65"* %4, i64 %31) #13
  %32 = bitcast %"class.std::__1::vector.69"* %2 to i8**
  %33 = load i8*, i8** %32, align 8
  br label %38

34:                                               ; preds = %23
  %35 = icmp ugt i64 %27, %24
  br i1 %35, label %36, label %38

36:                                               ; preds = %34
  %37 = getelementptr inbounds i8, i8* %29, i64 %24
  store i8* %37, i8** %7, align 8
  br label %38

38:                                               ; preds = %36, %34, %30
  %39 = phi i8* [ %33, %30 ], [ %29, %34 ], [ %29, %36 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %39, i8* nonnull align 1 %15, i64 %24, i1 false) #13
  br label %40

40:                                               ; preds = %3, %14, %38
  %41 = phi i1 [ false, %3 ], [ true, %38 ], [ true, %14 ]
  ret i1 %41
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN3sql9Statement15GetSQLStatementEv(%"class.sql::Statement"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sql::Statement", %"class.sql::Statement"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.sql::Database::StatementRef"*, %"class.sql::Database::StatementRef"** %2, align 8
  %4 = getelementptr inbounds %"class.sql::Database::StatementRef", %"class.sql::Database::StatementRef"* %3, i64 0, i32 3
  %5 = load %struct.sqlite3_stmt*, %struct.sqlite3_stmt** %4, align 8
  %6 = tail call i8* @chrome_sqlite3_sql(%struct.sqlite3_stmt* %5) #13
  ret i8* %6
}

declare i8* @chrome_sqlite3_sql(%struct.sqlite3_stmt*) local_unnamed_addr #3

declare i32 @_ZNK3sql8Database13OnSqliteErrorEiPNS_9StatementEPKc(%"class.sql::Database"*, i32, %"class.sql::Statement"*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4base18ScopedBlockingCallD1Ev(%"class.base::ScopedBlockingCall"*) unnamed_addr #5

declare void @_ZN4base18ScopedBlockingCallC1ERKNS_8LocationENS_12BlockingTypeE(%"class.base::ScopedBlockingCall"*, %"class.base::Location"* dereferenceable(32), i32) unnamed_addr #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

declare void @_ZN3sql8Database12StatementRefC1EPS0_P12sqlite3_stmtb(%"class.sql::Database::StatementRef"*, %"class.sql::Database"*, %struct.sqlite3_stmt*, i1 zeroext) unnamed_addr #3

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3sql8Database12StatementRefD1Ev(%"class.sql::Database::StatementRef"*) unnamed_addr #5

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i64(i64) #9

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(%"class.std::__1::basic_string"*, i64, i8 signext) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE9__grow_byEmmmmmm(%"class.std::__1::basic_string.55"*, i64, i64, i64, i64, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %8 = sub i64 9223372036854775791, %1
  %9 = icmp ult i64 %8, %2
  br i1 %9, label %10, label %12

10:                                               ; preds = %7
  %11 = bitcast %"class.std::__1::basic_string.55"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %11) #14
  unreachable

12:                                               ; preds = %7
  %13 = bitcast %"class.std::__1::basic_string.55"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %14 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %13, i64 0, i32 1, i32 1
  %15 = load i8, i8* %14, align 1
  %16 = icmp slt i8 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.std::__1::basic_string.55", %"class.std::__1::basic_string.55"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i16*, i16** %18, align 8
  br label %22

20:                                               ; preds = %12
  %21 = bitcast %"class.std::__1::basic_string.55"* %0 to i16*
  br label %22

22:                                               ; preds = %17, %20
  %23 = phi i16* [ %19, %17 ], [ %21, %20 ]
  %24 = bitcast i16* %23 to i8*
  %25 = icmp ult i64 %1, 4611686018427387879
  br i1 %25, label %26, label %37

26:                                               ; preds = %22
  %27 = add i64 %2, %1
  %28 = shl i64 %1, 1
  %29 = icmp ult i64 %27, %28
  %30 = select i1 %29, i64 %28, i64 %27
  %31 = icmp ult i64 %30, 11
  br i1 %31, label %37, label %32

32:                                               ; preds = %26
  %33 = add i64 %30, 8
  %34 = and i64 %33, -8
  %35 = icmp slt i64 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  tail call void @abort() #14
  unreachable

37:                                               ; preds = %22, %26, %32
  %38 = phi i64 [ %34, %32 ], [ 9223372036854775791, %22 ], [ 11, %26 ]
  %39 = shl i64 %38, 1
  %40 = tail call i8* @_Znwm(i64 %39) #12
  %41 = bitcast i8* %40 to i16*
  %42 = icmp eq i64 %4, 0
  br i1 %42, label %188, label %43

43:                                               ; preds = %37
  %44 = icmp ult i64 %4, 16
  br i1 %44, label %135, label %45

45:                                               ; preds = %43
  %46 = shl i64 %4, 1
  %47 = getelementptr i8, i8* %40, i64 %46
  %48 = getelementptr i16, i16* %23, i64 %4
  %49 = bitcast i16* %48 to i8*
  %50 = icmp ult i8* %40, %49
  %51 = icmp ugt i8* %47, %24
  %52 = and i1 %50, %51
  br i1 %52, label %135, label %53

53:                                               ; preds = %45
  %54 = and i64 %4, -16
  %55 = sub i64 %4, %54
  %56 = getelementptr i16, i16* %23, i64 %54
  %57 = getelementptr i16, i16* %41, i64 %54
  %58 = add i64 %54, -16
  %59 = lshr exact i64 %58, 4
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp ult i64 %58, 48
  br i1 %62, label %114, label %63

63:                                               ; preds = %53
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %111, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %112, %65 ]
  %68 = getelementptr i16, i16* %23, i64 %66
  %69 = getelementptr i16, i16* %41, i64 %66
  %70 = bitcast i16* %68 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2, !alias.scope !43
  %72 = getelementptr i16, i16* %68, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2, !alias.scope !43
  %75 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %75, align 2, !alias.scope !46, !noalias !43
  %76 = getelementptr i16, i16* %69, i64 8
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %77, align 2, !alias.scope !46, !noalias !43
  %78 = or i64 %66, 16
  %79 = getelementptr i16, i16* %23, i64 %78
  %80 = getelementptr i16, i16* %41, i64 %78
  %81 = bitcast i16* %79 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !43
  %83 = getelementptr i16, i16* %79, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2, !alias.scope !43
  %86 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %86, align 2, !alias.scope !46, !noalias !43
  %87 = getelementptr i16, i16* %80, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %88, align 2, !alias.scope !46, !noalias !43
  %89 = or i64 %66, 32
  %90 = getelementptr i16, i16* %23, i64 %89
  %91 = getelementptr i16, i16* %41, i64 %89
  %92 = bitcast i16* %90 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !43
  %94 = getelementptr i16, i16* %90, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2, !alias.scope !43
  %97 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %97, align 2, !alias.scope !46, !noalias !43
  %98 = getelementptr i16, i16* %91, i64 8
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %99, align 2, !alias.scope !46, !noalias !43
  %100 = or i64 %66, 48
  %101 = getelementptr i16, i16* %23, i64 %100
  %102 = getelementptr i16, i16* %41, i64 %100
  %103 = bitcast i16* %101 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !43
  %105 = getelementptr i16, i16* %101, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 2, !alias.scope !43
  %108 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %108, align 2, !alias.scope !46, !noalias !43
  %109 = getelementptr i16, i16* %102, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %110, align 2, !alias.scope !46, !noalias !43
  %111 = add i64 %66, 64
  %112 = add i64 %67, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %65, !llvm.loop !48

114:                                              ; preds = %65, %53
  %115 = phi i64 [ 0, %53 ], [ %111, %65 ]
  %116 = icmp eq i64 %61, 0
  br i1 %116, label %133, label %117

117:                                              ; preds = %114, %117
  %118 = phi i64 [ %130, %117 ], [ %115, %114 ]
  %119 = phi i64 [ %131, %117 ], [ %61, %114 ]
  %120 = getelementptr i16, i16* %23, i64 %118
  %121 = getelementptr i16, i16* %41, i64 %118
  %122 = bitcast i16* %120 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !43
  %124 = getelementptr i16, i16* %120, i64 8
  %125 = bitcast i16* %124 to <8 x i16>*
  %126 = load <8 x i16>, <8 x i16>* %125, align 2, !alias.scope !43
  %127 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %127, align 2, !alias.scope !46, !noalias !43
  %128 = getelementptr i16, i16* %121, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %129, align 2, !alias.scope !46, !noalias !43
  %130 = add i64 %118, 16
  %131 = add i64 %119, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %117, !llvm.loop !49

133:                                              ; preds = %117, %114
  %134 = icmp eq i64 %54, %4
  br i1 %134, label %188, label %135

135:                                              ; preds = %133, %45, %43
  %136 = phi i64 [ %4, %45 ], [ %4, %43 ], [ %55, %133 ]
  %137 = phi i16* [ %23, %45 ], [ %23, %43 ], [ %56, %133 ]
  %138 = phi i16* [ %41, %45 ], [ %41, %43 ], [ %57, %133 ]
  %139 = add i64 %136, -1
  %140 = and i64 %136, 7
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %153, label %142

142:                                              ; preds = %135, %142
  %143 = phi i64 [ %148, %142 ], [ %136, %135 ]
  %144 = phi i16* [ %150, %142 ], [ %137, %135 ]
  %145 = phi i16* [ %149, %142 ], [ %138, %135 ]
  %146 = phi i64 [ %151, %142 ], [ %140, %135 ]
  %147 = load i16, i16* %144, align 2
  store i16 %147, i16* %145, align 2
  %148 = add i64 %143, -1
  %149 = getelementptr inbounds i16, i16* %145, i64 1
  %150 = getelementptr inbounds i16, i16* %144, i64 1
  %151 = add i64 %146, -1
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %142, !llvm.loop !50

153:                                              ; preds = %142, %135
  %154 = phi i64 [ %136, %135 ], [ %148, %142 ]
  %155 = phi i16* [ %137, %135 ], [ %150, %142 ]
  %156 = phi i16* [ %138, %135 ], [ %149, %142 ]
  %157 = icmp ult i64 %139, 7
  br i1 %157, label %188, label %158

158:                                              ; preds = %153, %158
  %159 = phi i64 [ %184, %158 ], [ %154, %153 ]
  %160 = phi i16* [ %186, %158 ], [ %155, %153 ]
  %161 = phi i16* [ %185, %158 ], [ %156, %153 ]
  %162 = load i16, i16* %160, align 2
  store i16 %162, i16* %161, align 2
  %163 = getelementptr inbounds i16, i16* %161, i64 1
  %164 = getelementptr inbounds i16, i16* %160, i64 1
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %161, i64 2
  %167 = getelementptr inbounds i16, i16* %160, i64 2
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = getelementptr inbounds i16, i16* %161, i64 3
  %170 = getelementptr inbounds i16, i16* %160, i64 3
  %171 = load i16, i16* %170, align 2
  store i16 %171, i16* %169, align 2
  %172 = getelementptr inbounds i16, i16* %161, i64 4
  %173 = getelementptr inbounds i16, i16* %160, i64 4
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %161, i64 5
  %176 = getelementptr inbounds i16, i16* %160, i64 5
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %161, i64 6
  %179 = getelementptr inbounds i16, i16* %160, i64 6
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %161, i64 7
  %182 = getelementptr inbounds i16, i16* %160, i64 7
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = add i64 %159, -8
  %185 = getelementptr inbounds i16, i16* %161, i64 8
  %186 = getelementptr inbounds i16, i16* %160, i64 8
  %187 = icmp eq i64 %184, 0
  br i1 %187, label %188, label %158, !llvm.loop !51

188:                                              ; preds = %153, %158, %133, %37
  %189 = sub i64 %3, %5
  %190 = sub i64 %189, %4
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %347, label %192

192:                                              ; preds = %188
  %193 = getelementptr inbounds i16, i16* %41, i64 %4
  %194 = getelementptr inbounds i16, i16* %193, i64 %6
  %195 = getelementptr inbounds i16, i16* %23, i64 %4
  %196 = getelementptr inbounds i16, i16* %195, i64 %5
  %197 = icmp ult i64 %190, 16
  br i1 %197, label %294, label %198

198:                                              ; preds = %192
  %199 = bitcast i16* %196 to i8*
  %200 = add i64 %6, %4
  %201 = shl i64 %200, 1
  %202 = getelementptr i8, i8* %40, i64 %201
  %203 = add i64 %6, %3
  %204 = sub i64 %203, %5
  %205 = shl i64 %204, 1
  %206 = getelementptr i8, i8* %40, i64 %205
  %207 = getelementptr i16, i16* %23, i64 %3
  %208 = bitcast i16* %207 to i8*
  %209 = icmp ult i8* %202, %208
  %210 = icmp ugt i8* %206, %199
  %211 = and i1 %209, %210
  br i1 %211, label %294, label %212

212:                                              ; preds = %198
  %213 = and i64 %190, -16
  %214 = sub i64 %190, %213
  %215 = getelementptr i16, i16* %196, i64 %213
  %216 = getelementptr i16, i16* %194, i64 %213
  %217 = add i64 %213, -16
  %218 = lshr exact i64 %217, 4
  %219 = add nuw nsw i64 %218, 1
  %220 = and i64 %219, 3
  %221 = icmp ult i64 %217, 48
  br i1 %221, label %273, label %222

222:                                              ; preds = %212
  %223 = sub nsw i64 %219, %220
  br label %224

224:                                              ; preds = %224, %222
  %225 = phi i64 [ 0, %222 ], [ %270, %224 ]
  %226 = phi i64 [ %223, %222 ], [ %271, %224 ]
  %227 = getelementptr i16, i16* %196, i64 %225
  %228 = getelementptr i16, i16* %194, i64 %225
  %229 = bitcast i16* %227 to <8 x i16>*
  %230 = load <8 x i16>, <8 x i16>* %229, align 2, !alias.scope !52
  %231 = getelementptr i16, i16* %227, i64 8
  %232 = bitcast i16* %231 to <8 x i16>*
  %233 = load <8 x i16>, <8 x i16>* %232, align 2, !alias.scope !52
  %234 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %230, <8 x i16>* %234, align 2, !alias.scope !55, !noalias !52
  %235 = getelementptr i16, i16* %228, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %236, align 2, !alias.scope !55, !noalias !52
  %237 = or i64 %225, 16
  %238 = getelementptr i16, i16* %196, i64 %237
  %239 = getelementptr i16, i16* %194, i64 %237
  %240 = bitcast i16* %238 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 2, !alias.scope !52
  %242 = getelementptr i16, i16* %238, i64 8
  %243 = bitcast i16* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 2, !alias.scope !52
  %245 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %241, <8 x i16>* %245, align 2, !alias.scope !55, !noalias !52
  %246 = getelementptr i16, i16* %239, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  store <8 x i16> %244, <8 x i16>* %247, align 2, !alias.scope !55, !noalias !52
  %248 = or i64 %225, 32
  %249 = getelementptr i16, i16* %196, i64 %248
  %250 = getelementptr i16, i16* %194, i64 %248
  %251 = bitcast i16* %249 to <8 x i16>*
  %252 = load <8 x i16>, <8 x i16>* %251, align 2, !alias.scope !52
  %253 = getelementptr i16, i16* %249, i64 8
  %254 = bitcast i16* %253 to <8 x i16>*
  %255 = load <8 x i16>, <8 x i16>* %254, align 2, !alias.scope !52
  %256 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %252, <8 x i16>* %256, align 2, !alias.scope !55, !noalias !52
  %257 = getelementptr i16, i16* %250, i64 8
  %258 = bitcast i16* %257 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %258, align 2, !alias.scope !55, !noalias !52
  %259 = or i64 %225, 48
  %260 = getelementptr i16, i16* %196, i64 %259
  %261 = getelementptr i16, i16* %194, i64 %259
  %262 = bitcast i16* %260 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 2, !alias.scope !52
  %264 = getelementptr i16, i16* %260, i64 8
  %265 = bitcast i16* %264 to <8 x i16>*
  %266 = load <8 x i16>, <8 x i16>* %265, align 2, !alias.scope !52
  %267 = bitcast i16* %261 to <8 x i16>*
  store <8 x i16> %263, <8 x i16>* %267, align 2, !alias.scope !55, !noalias !52
  %268 = getelementptr i16, i16* %261, i64 8
  %269 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %266, <8 x i16>* %269, align 2, !alias.scope !55, !noalias !52
  %270 = add i64 %225, 64
  %271 = add i64 %226, -4
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %273, label %224, !llvm.loop !57

273:                                              ; preds = %224, %212
  %274 = phi i64 [ 0, %212 ], [ %270, %224 ]
  %275 = icmp eq i64 %220, 0
  br i1 %275, label %292, label %276

276:                                              ; preds = %273, %276
  %277 = phi i64 [ %289, %276 ], [ %274, %273 ]
  %278 = phi i64 [ %290, %276 ], [ %220, %273 ]
  %279 = getelementptr i16, i16* %196, i64 %277
  %280 = getelementptr i16, i16* %194, i64 %277
  %281 = bitcast i16* %279 to <8 x i16>*
  %282 = load <8 x i16>, <8 x i16>* %281, align 2, !alias.scope !52
  %283 = getelementptr i16, i16* %279, i64 8
  %284 = bitcast i16* %283 to <8 x i16>*
  %285 = load <8 x i16>, <8 x i16>* %284, align 2, !alias.scope !52
  %286 = bitcast i16* %280 to <8 x i16>*
  store <8 x i16> %282, <8 x i16>* %286, align 2, !alias.scope !55, !noalias !52
  %287 = getelementptr i16, i16* %280, i64 8
  %288 = bitcast i16* %287 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %288, align 2, !alias.scope !55, !noalias !52
  %289 = add i64 %277, 16
  %290 = add i64 %278, -1
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %292, label %276, !llvm.loop !58

292:                                              ; preds = %276, %273
  %293 = icmp eq i64 %190, %213
  br i1 %293, label %347, label %294

294:                                              ; preds = %292, %198, %192
  %295 = phi i64 [ %190, %198 ], [ %190, %192 ], [ %214, %292 ]
  %296 = phi i16* [ %196, %198 ], [ %196, %192 ], [ %215, %292 ]
  %297 = phi i16* [ %194, %198 ], [ %194, %192 ], [ %216, %292 ]
  %298 = add i64 %295, -1
  %299 = and i64 %295, 7
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %312, label %301

301:                                              ; preds = %294, %301
  %302 = phi i64 [ %307, %301 ], [ %295, %294 ]
  %303 = phi i16* [ %309, %301 ], [ %296, %294 ]
  %304 = phi i16* [ %308, %301 ], [ %297, %294 ]
  %305 = phi i64 [ %310, %301 ], [ %299, %294 ]
  %306 = load i16, i16* %303, align 2
  store i16 %306, i16* %304, align 2
  %307 = add i64 %302, -1
  %308 = getelementptr inbounds i16, i16* %304, i64 1
  %309 = getelementptr inbounds i16, i16* %303, i64 1
  %310 = add i64 %305, -1
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %312, label %301, !llvm.loop !59

312:                                              ; preds = %301, %294
  %313 = phi i64 [ %295, %294 ], [ %307, %301 ]
  %314 = phi i16* [ %296, %294 ], [ %309, %301 ]
  %315 = phi i16* [ %297, %294 ], [ %308, %301 ]
  %316 = icmp ult i64 %298, 7
  br i1 %316, label %347, label %317

317:                                              ; preds = %312, %317
  %318 = phi i64 [ %343, %317 ], [ %313, %312 ]
  %319 = phi i16* [ %345, %317 ], [ %314, %312 ]
  %320 = phi i16* [ %344, %317 ], [ %315, %312 ]
  %321 = load i16, i16* %319, align 2
  store i16 %321, i16* %320, align 2
  %322 = getelementptr inbounds i16, i16* %320, i64 1
  %323 = getelementptr inbounds i16, i16* %319, i64 1
  %324 = load i16, i16* %323, align 2
  store i16 %324, i16* %322, align 2
  %325 = getelementptr inbounds i16, i16* %320, i64 2
  %326 = getelementptr inbounds i16, i16* %319, i64 2
  %327 = load i16, i16* %326, align 2
  store i16 %327, i16* %325, align 2
  %328 = getelementptr inbounds i16, i16* %320, i64 3
  %329 = getelementptr inbounds i16, i16* %319, i64 3
  %330 = load i16, i16* %329, align 2
  store i16 %330, i16* %328, align 2
  %331 = getelementptr inbounds i16, i16* %320, i64 4
  %332 = getelementptr inbounds i16, i16* %319, i64 4
  %333 = load i16, i16* %332, align 2
  store i16 %333, i16* %331, align 2
  %334 = getelementptr inbounds i16, i16* %320, i64 5
  %335 = getelementptr inbounds i16, i16* %319, i64 5
  %336 = load i16, i16* %335, align 2
  store i16 %336, i16* %334, align 2
  %337 = getelementptr inbounds i16, i16* %320, i64 6
  %338 = getelementptr inbounds i16, i16* %319, i64 6
  %339 = load i16, i16* %338, align 2
  store i16 %339, i16* %337, align 2
  %340 = getelementptr inbounds i16, i16* %320, i64 7
  %341 = getelementptr inbounds i16, i16* %319, i64 7
  %342 = load i16, i16* %341, align 2
  store i16 %342, i16* %340, align 2
  %343 = add i64 %318, -8
  %344 = getelementptr inbounds i16, i16* %320, i64 8
  %345 = getelementptr inbounds i16, i16* %319, i64 8
  %346 = icmp eq i64 %343, 0
  br i1 %346, label %347, label %317, !llvm.loop !60

347:                                              ; preds = %312, %317, %292, %188
  %348 = icmp eq i64 %1, 10
  br i1 %348, label %350, label %349

349:                                              ; preds = %347
  tail call void @_ZdlPv(i8* %24) #12
  br label %350

350:                                              ; preds = %347, %349
  %351 = bitcast %"class.std::__1::basic_string.55"* %0 to i8**
  store i8* %40, i8** %351, align 8
  %352 = or i64 %38, -9223372036854775808
  %353 = getelementptr inbounds %"class.std::__1::basic_string.55", %"class.std::__1::basic_string.55"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %352, i64* %353, align 8
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #10

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string.55"*, i64, i64, i64, i64, i64, i64, i16*) local_unnamed_addr #0 comdat align 2 {
  %9 = sub i64 9223372036854775790, %1
  %10 = icmp ult i64 %9, %2
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = bitcast %"class.std::__1::basic_string.55"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %12) #14
  unreachable

13:                                               ; preds = %8
  %14 = bitcast %"class.std::__1::basic_string.55"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %14, i64 0, i32 1, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.std::__1::basic_string.55", %"class.std::__1::basic_string.55"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i16*, i16** %19, align 8
  br label %23

21:                                               ; preds = %13
  %22 = bitcast %"class.std::__1::basic_string.55"* %0 to i16*
  br label %23

23:                                               ; preds = %18, %21
  %24 = phi i16* [ %20, %18 ], [ %22, %21 ]
  %25 = bitcast i16* %24 to i8*
  %26 = icmp ult i64 %1, 4611686018427387879
  br i1 %26, label %27, label %38

27:                                               ; preds = %23
  %28 = add i64 %2, %1
  %29 = shl i64 %1, 1
  %30 = icmp ult i64 %28, %29
  %31 = select i1 %30, i64 %29, i64 %28
  %32 = icmp ult i64 %31, 11
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = add i64 %31, 8
  %35 = and i64 %34, -8
  %36 = icmp slt i64 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  tail call void @abort() #14
  unreachable

38:                                               ; preds = %23, %27, %33
  %39 = phi i64 [ %35, %33 ], [ 9223372036854775791, %23 ], [ 11, %27 ]
  %40 = shl i64 %39, 1
  %41 = tail call i8* @_Znwm(i64 %40) #12
  %42 = bitcast i8* %41 to i16*
  %43 = icmp eq i64 %4, 0
  br i1 %43, label %189, label %44

44:                                               ; preds = %38
  %45 = icmp ult i64 %4, 16
  br i1 %45, label %136, label %46

46:                                               ; preds = %44
  %47 = shl i64 %4, 1
  %48 = getelementptr i8, i8* %41, i64 %47
  %49 = getelementptr i16, i16* %24, i64 %4
  %50 = bitcast i16* %49 to i8*
  %51 = icmp ult i8* %41, %50
  %52 = icmp ugt i8* %48, %25
  %53 = and i1 %51, %52
  br i1 %53, label %136, label %54

54:                                               ; preds = %46
  %55 = and i64 %4, -16
  %56 = sub i64 %4, %55
  %57 = getelementptr i16, i16* %24, i64 %55
  %58 = getelementptr i16, i16* %42, i64 %55
  %59 = add i64 %55, -16
  %60 = lshr exact i64 %59, 4
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 3
  %63 = icmp ult i64 %59, 48
  br i1 %63, label %115, label %64

64:                                               ; preds = %54
  %65 = sub nsw i64 %61, %62
  br label %66

66:                                               ; preds = %66, %64
  %67 = phi i64 [ 0, %64 ], [ %112, %66 ]
  %68 = phi i64 [ %65, %64 ], [ %113, %66 ]
  %69 = getelementptr i16, i16* %24, i64 %67
  %70 = getelementptr i16, i16* %42, i64 %67
  %71 = bitcast i16* %69 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !61
  %73 = getelementptr i16, i16* %69, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !61
  %76 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %76, align 2, !alias.scope !64, !noalias !61
  %77 = getelementptr i16, i16* %70, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 2, !alias.scope !64, !noalias !61
  %79 = or i64 %67, 16
  %80 = getelementptr i16, i16* %24, i64 %79
  %81 = getelementptr i16, i16* %42, i64 %79
  %82 = bitcast i16* %80 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !61
  %84 = getelementptr i16, i16* %80, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !61
  %87 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %87, align 2, !alias.scope !64, !noalias !61
  %88 = getelementptr i16, i16* %81, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %89, align 2, !alias.scope !64, !noalias !61
  %90 = or i64 %67, 32
  %91 = getelementptr i16, i16* %24, i64 %90
  %92 = getelementptr i16, i16* %42, i64 %90
  %93 = bitcast i16* %91 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !61
  %95 = getelementptr i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !61
  %98 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !64, !noalias !61
  %99 = getelementptr i16, i16* %92, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !64, !noalias !61
  %101 = or i64 %67, 48
  %102 = getelementptr i16, i16* %24, i64 %101
  %103 = getelementptr i16, i16* %42, i64 %101
  %104 = bitcast i16* %102 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !61
  %106 = getelementptr i16, i16* %102, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !61
  %109 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !64, !noalias !61
  %110 = getelementptr i16, i16* %103, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !64, !noalias !61
  %112 = add i64 %67, 64
  %113 = add i64 %68, -4
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %66, !llvm.loop !66

115:                                              ; preds = %66, %54
  %116 = phi i64 [ 0, %54 ], [ %112, %66 ]
  %117 = icmp eq i64 %62, 0
  br i1 %117, label %134, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %131, %118 ], [ %116, %115 ]
  %120 = phi i64 [ %132, %118 ], [ %62, %115 ]
  %121 = getelementptr i16, i16* %24, i64 %119
  %122 = getelementptr i16, i16* %42, i64 %119
  %123 = bitcast i16* %121 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !61
  %125 = getelementptr i16, i16* %121, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !61
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !64, !noalias !61
  %129 = getelementptr i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2, !alias.scope !64, !noalias !61
  %131 = add i64 %119, 16
  %132 = add i64 %120, -1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %118, !llvm.loop !67

134:                                              ; preds = %118, %115
  %135 = icmp eq i64 %55, %4
  br i1 %135, label %189, label %136

136:                                              ; preds = %134, %46, %44
  %137 = phi i64 [ %4, %46 ], [ %4, %44 ], [ %56, %134 ]
  %138 = phi i16* [ %24, %46 ], [ %24, %44 ], [ %57, %134 ]
  %139 = phi i16* [ %42, %46 ], [ %42, %44 ], [ %58, %134 ]
  %140 = add i64 %137, -1
  %141 = and i64 %137, 7
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %154, label %143

143:                                              ; preds = %136, %143
  %144 = phi i64 [ %149, %143 ], [ %137, %136 ]
  %145 = phi i16* [ %151, %143 ], [ %138, %136 ]
  %146 = phi i16* [ %150, %143 ], [ %139, %136 ]
  %147 = phi i64 [ %152, %143 ], [ %141, %136 ]
  %148 = load i16, i16* %145, align 2
  store i16 %148, i16* %146, align 2
  %149 = add i64 %144, -1
  %150 = getelementptr inbounds i16, i16* %146, i64 1
  %151 = getelementptr inbounds i16, i16* %145, i64 1
  %152 = add i64 %147, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %143, !llvm.loop !68

154:                                              ; preds = %143, %136
  %155 = phi i64 [ %137, %136 ], [ %149, %143 ]
  %156 = phi i16* [ %138, %136 ], [ %151, %143 ]
  %157 = phi i16* [ %139, %136 ], [ %150, %143 ]
  %158 = icmp ult i64 %140, 7
  br i1 %158, label %189, label %159

159:                                              ; preds = %154, %159
  %160 = phi i64 [ %185, %159 ], [ %155, %154 ]
  %161 = phi i16* [ %187, %159 ], [ %156, %154 ]
  %162 = phi i16* [ %186, %159 ], [ %157, %154 ]
  %163 = load i16, i16* %161, align 2
  store i16 %163, i16* %162, align 2
  %164 = getelementptr inbounds i16, i16* %162, i64 1
  %165 = getelementptr inbounds i16, i16* %161, i64 1
  %166 = load i16, i16* %165, align 2
  store i16 %166, i16* %164, align 2
  %167 = getelementptr inbounds i16, i16* %162, i64 2
  %168 = getelementptr inbounds i16, i16* %161, i64 2
  %169 = load i16, i16* %168, align 2
  store i16 %169, i16* %167, align 2
  %170 = getelementptr inbounds i16, i16* %162, i64 3
  %171 = getelementptr inbounds i16, i16* %161, i64 3
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds i16, i16* %162, i64 4
  %174 = getelementptr inbounds i16, i16* %161, i64 4
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %162, i64 5
  %177 = getelementptr inbounds i16, i16* %161, i64 5
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %162, i64 6
  %180 = getelementptr inbounds i16, i16* %161, i64 6
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %162, i64 7
  %183 = getelementptr inbounds i16, i16* %161, i64 7
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = add i64 %160, -8
  %186 = getelementptr inbounds i16, i16* %162, i64 8
  %187 = getelementptr inbounds i16, i16* %161, i64 8
  %188 = icmp eq i64 %185, 0
  br i1 %188, label %189, label %159, !llvm.loop !69

189:                                              ; preds = %154, %159, %134, %38
  %190 = icmp eq i64 %6, 0
  br i1 %190, label %289, label %191

191:                                              ; preds = %189
  %192 = getelementptr inbounds i16, i16* %42, i64 %4
  %193 = icmp ult i64 %6, 16
  br i1 %193, label %276, label %194

194:                                              ; preds = %191
  %195 = and i64 %6, -16
  %196 = sub i64 %6, %195
  %197 = getelementptr i16, i16* %7, i64 %195
  %198 = getelementptr i16, i16* %192, i64 %195
  %199 = add i64 %195, -16
  %200 = lshr exact i64 %199, 4
  %201 = add nuw nsw i64 %200, 1
  %202 = and i64 %201, 3
  %203 = icmp ult i64 %199, 48
  br i1 %203, label %255, label %204

204:                                              ; preds = %194
  %205 = sub nsw i64 %201, %202
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %252, %206 ]
  %208 = phi i64 [ %205, %204 ], [ %253, %206 ]
  %209 = getelementptr i16, i16* %7, i64 %207
  %210 = getelementptr i16, i16* %192, i64 %207
  %211 = bitcast i16* %209 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2
  %213 = getelementptr i16, i16* %209, i64 8
  %214 = bitcast i16* %213 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 2
  %216 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %212, <8 x i16>* %216, align 2
  %217 = getelementptr i16, i16* %210, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %218, align 2
  %219 = or i64 %207, 16
  %220 = getelementptr i16, i16* %7, i64 %219
  %221 = getelementptr i16, i16* %192, i64 %219
  %222 = bitcast i16* %220 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 2
  %224 = getelementptr i16, i16* %220, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 2
  %227 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %227, align 2
  %228 = getelementptr i16, i16* %221, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %226, <8 x i16>* %229, align 2
  %230 = or i64 %207, 32
  %231 = getelementptr i16, i16* %7, i64 %230
  %232 = getelementptr i16, i16* %192, i64 %230
  %233 = bitcast i16* %231 to <8 x i16>*
  %234 = load <8 x i16>, <8 x i16>* %233, align 2
  %235 = getelementptr i16, i16* %231, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 2
  %238 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %234, <8 x i16>* %238, align 2
  %239 = getelementptr i16, i16* %232, i64 8
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %237, <8 x i16>* %240, align 2
  %241 = or i64 %207, 48
  %242 = getelementptr i16, i16* %7, i64 %241
  %243 = getelementptr i16, i16* %192, i64 %241
  %244 = bitcast i16* %242 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 2
  %246 = getelementptr i16, i16* %242, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 2
  %249 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %249, align 2
  %250 = getelementptr i16, i16* %243, i64 8
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %251, align 2
  %252 = add i64 %207, 64
  %253 = add i64 %208, -4
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %206, !llvm.loop !70

255:                                              ; preds = %206, %194
  %256 = phi i64 [ 0, %194 ], [ %252, %206 ]
  %257 = icmp eq i64 %202, 0
  br i1 %257, label %274, label %258

258:                                              ; preds = %255, %258
  %259 = phi i64 [ %271, %258 ], [ %256, %255 ]
  %260 = phi i64 [ %272, %258 ], [ %202, %255 ]
  %261 = getelementptr i16, i16* %7, i64 %259
  %262 = getelementptr i16, i16* %192, i64 %259
  %263 = bitcast i16* %261 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 2
  %265 = getelementptr i16, i16* %261, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2
  %268 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %268, align 2
  %269 = getelementptr i16, i16* %262, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %270, align 2
  %271 = add i64 %259, 16
  %272 = add i64 %260, -1
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %258, !llvm.loop !71

274:                                              ; preds = %258, %255
  %275 = icmp eq i64 %195, %6
  br i1 %275, label %289, label %276

276:                                              ; preds = %274, %191
  %277 = phi i64 [ %6, %191 ], [ %196, %274 ]
  %278 = phi i16* [ %7, %191 ], [ %197, %274 ]
  %279 = phi i16* [ %192, %191 ], [ %198, %274 ]
  br label %280

280:                                              ; preds = %276, %280
  %281 = phi i64 [ %285, %280 ], [ %277, %276 ]
  %282 = phi i16* [ %287, %280 ], [ %278, %276 ]
  %283 = phi i16* [ %286, %280 ], [ %279, %276 ]
  %284 = load i16, i16* %282, align 2
  store i16 %284, i16* %283, align 2
  %285 = add i64 %281, -1
  %286 = getelementptr inbounds i16, i16* %283, i64 1
  %287 = getelementptr inbounds i16, i16* %282, i64 1
  %288 = icmp eq i64 %285, 0
  br i1 %288, label %289, label %280, !llvm.loop !72

289:                                              ; preds = %280, %274, %189
  %290 = sub i64 %3, %5
  %291 = sub i64 %290, %4
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %448, label %293

293:                                              ; preds = %289
  %294 = getelementptr inbounds i16, i16* %42, i64 %4
  %295 = getelementptr inbounds i16, i16* %294, i64 %6
  %296 = getelementptr inbounds i16, i16* %24, i64 %4
  %297 = getelementptr inbounds i16, i16* %296, i64 %5
  %298 = icmp ult i64 %291, 16
  br i1 %298, label %395, label %299

299:                                              ; preds = %293
  %300 = bitcast i16* %297 to i8*
  %301 = add i64 %6, %4
  %302 = shl i64 %301, 1
  %303 = getelementptr i8, i8* %41, i64 %302
  %304 = add i64 %6, %3
  %305 = sub i64 %304, %5
  %306 = shl i64 %305, 1
  %307 = getelementptr i8, i8* %41, i64 %306
  %308 = getelementptr i16, i16* %24, i64 %3
  %309 = bitcast i16* %308 to i8*
  %310 = icmp ult i8* %303, %309
  %311 = icmp ugt i8* %307, %300
  %312 = and i1 %310, %311
  br i1 %312, label %395, label %313

313:                                              ; preds = %299
  %314 = and i64 %291, -16
  %315 = sub i64 %291, %314
  %316 = getelementptr i16, i16* %297, i64 %314
  %317 = getelementptr i16, i16* %295, i64 %314
  %318 = add i64 %314, -16
  %319 = lshr exact i64 %318, 4
  %320 = add nuw nsw i64 %319, 1
  %321 = and i64 %320, 3
  %322 = icmp ult i64 %318, 48
  br i1 %322, label %374, label %323

323:                                              ; preds = %313
  %324 = sub nsw i64 %320, %321
  br label %325

325:                                              ; preds = %325, %323
  %326 = phi i64 [ 0, %323 ], [ %371, %325 ]
  %327 = phi i64 [ %324, %323 ], [ %372, %325 ]
  %328 = getelementptr i16, i16* %297, i64 %326
  %329 = getelementptr i16, i16* %295, i64 %326
  %330 = bitcast i16* %328 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !74
  %332 = getelementptr i16, i16* %328, i64 8
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !74
  %335 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %335, align 2, !alias.scope !77, !noalias !74
  %336 = getelementptr i16, i16* %329, i64 8
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %337, align 2, !alias.scope !77, !noalias !74
  %338 = or i64 %326, 16
  %339 = getelementptr i16, i16* %297, i64 %338
  %340 = getelementptr i16, i16* %295, i64 %338
  %341 = bitcast i16* %339 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !74
  %343 = getelementptr i16, i16* %339, i64 8
  %344 = bitcast i16* %343 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 2, !alias.scope !74
  %346 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %346, align 2, !alias.scope !77, !noalias !74
  %347 = getelementptr i16, i16* %340, i64 8
  %348 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %348, align 2, !alias.scope !77, !noalias !74
  %349 = or i64 %326, 32
  %350 = getelementptr i16, i16* %297, i64 %349
  %351 = getelementptr i16, i16* %295, i64 %349
  %352 = bitcast i16* %350 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 2, !alias.scope !74
  %354 = getelementptr i16, i16* %350, i64 8
  %355 = bitcast i16* %354 to <8 x i16>*
  %356 = load <8 x i16>, <8 x i16>* %355, align 2, !alias.scope !74
  %357 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %357, align 2, !alias.scope !77, !noalias !74
  %358 = getelementptr i16, i16* %351, i64 8
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %356, <8 x i16>* %359, align 2, !alias.scope !77, !noalias !74
  %360 = or i64 %326, 48
  %361 = getelementptr i16, i16* %297, i64 %360
  %362 = getelementptr i16, i16* %295, i64 %360
  %363 = bitcast i16* %361 to <8 x i16>*
  %364 = load <8 x i16>, <8 x i16>* %363, align 2, !alias.scope !74
  %365 = getelementptr i16, i16* %361, i64 8
  %366 = bitcast i16* %365 to <8 x i16>*
  %367 = load <8 x i16>, <8 x i16>* %366, align 2, !alias.scope !74
  %368 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %368, align 2, !alias.scope !77, !noalias !74
  %369 = getelementptr i16, i16* %362, i64 8
  %370 = bitcast i16* %369 to <8 x i16>*
  store <8 x i16> %367, <8 x i16>* %370, align 2, !alias.scope !77, !noalias !74
  %371 = add i64 %326, 64
  %372 = add i64 %327, -4
  %373 = icmp eq i64 %372, 0
  br i1 %373, label %374, label %325, !llvm.loop !79

374:                                              ; preds = %325, %313
  %375 = phi i64 [ 0, %313 ], [ %371, %325 ]
  %376 = icmp eq i64 %321, 0
  br i1 %376, label %393, label %377

377:                                              ; preds = %374, %377
  %378 = phi i64 [ %390, %377 ], [ %375, %374 ]
  %379 = phi i64 [ %391, %377 ], [ %321, %374 ]
  %380 = getelementptr i16, i16* %297, i64 %378
  %381 = getelementptr i16, i16* %295, i64 %378
  %382 = bitcast i16* %380 to <8 x i16>*
  %383 = load <8 x i16>, <8 x i16>* %382, align 2, !alias.scope !74
  %384 = getelementptr i16, i16* %380, i64 8
  %385 = bitcast i16* %384 to <8 x i16>*
  %386 = load <8 x i16>, <8 x i16>* %385, align 2, !alias.scope !74
  %387 = bitcast i16* %381 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %387, align 2, !alias.scope !77, !noalias !74
  %388 = getelementptr i16, i16* %381, i64 8
  %389 = bitcast i16* %388 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %389, align 2, !alias.scope !77, !noalias !74
  %390 = add i64 %378, 16
  %391 = add i64 %379, -1
  %392 = icmp eq i64 %391, 0
  br i1 %392, label %393, label %377, !llvm.loop !80

393:                                              ; preds = %377, %374
  %394 = icmp eq i64 %291, %314
  br i1 %394, label %448, label %395

395:                                              ; preds = %393, %299, %293
  %396 = phi i64 [ %291, %299 ], [ %291, %293 ], [ %315, %393 ]
  %397 = phi i16* [ %297, %299 ], [ %297, %293 ], [ %316, %393 ]
  %398 = phi i16* [ %295, %299 ], [ %295, %293 ], [ %317, %393 ]
  %399 = add i64 %396, -1
  %400 = and i64 %396, 7
  %401 = icmp eq i64 %400, 0
  br i1 %401, label %413, label %402

402:                                              ; preds = %395, %402
  %403 = phi i64 [ %408, %402 ], [ %396, %395 ]
  %404 = phi i16* [ %410, %402 ], [ %397, %395 ]
  %405 = phi i16* [ %409, %402 ], [ %398, %395 ]
  %406 = phi i64 [ %411, %402 ], [ %400, %395 ]
  %407 = load i16, i16* %404, align 2
  store i16 %407, i16* %405, align 2
  %408 = add i64 %403, -1
  %409 = getelementptr inbounds i16, i16* %405, i64 1
  %410 = getelementptr inbounds i16, i16* %404, i64 1
  %411 = add i64 %406, -1
  %412 = icmp eq i64 %411, 0
  br i1 %412, label %413, label %402, !llvm.loop !81

413:                                              ; preds = %402, %395
  %414 = phi i64 [ %396, %395 ], [ %408, %402 ]
  %415 = phi i16* [ %397, %395 ], [ %410, %402 ]
  %416 = phi i16* [ %398, %395 ], [ %409, %402 ]
  %417 = icmp ult i64 %399, 7
  br i1 %417, label %448, label %418

418:                                              ; preds = %413, %418
  %419 = phi i64 [ %444, %418 ], [ %414, %413 ]
  %420 = phi i16* [ %446, %418 ], [ %415, %413 ]
  %421 = phi i16* [ %445, %418 ], [ %416, %413 ]
  %422 = load i16, i16* %420, align 2
  store i16 %422, i16* %421, align 2
  %423 = getelementptr inbounds i16, i16* %421, i64 1
  %424 = getelementptr inbounds i16, i16* %420, i64 1
  %425 = load i16, i16* %424, align 2
  store i16 %425, i16* %423, align 2
  %426 = getelementptr inbounds i16, i16* %421, i64 2
  %427 = getelementptr inbounds i16, i16* %420, i64 2
  %428 = load i16, i16* %427, align 2
  store i16 %428, i16* %426, align 2
  %429 = getelementptr inbounds i16, i16* %421, i64 3
  %430 = getelementptr inbounds i16, i16* %420, i64 3
  %431 = load i16, i16* %430, align 2
  store i16 %431, i16* %429, align 2
  %432 = getelementptr inbounds i16, i16* %421, i64 4
  %433 = getelementptr inbounds i16, i16* %420, i64 4
  %434 = load i16, i16* %433, align 2
  store i16 %434, i16* %432, align 2
  %435 = getelementptr inbounds i16, i16* %421, i64 5
  %436 = getelementptr inbounds i16, i16* %420, i64 5
  %437 = load i16, i16* %436, align 2
  store i16 %437, i16* %435, align 2
  %438 = getelementptr inbounds i16, i16* %421, i64 6
  %439 = getelementptr inbounds i16, i16* %420, i64 6
  %440 = load i16, i16* %439, align 2
  store i16 %440, i16* %438, align 2
  %441 = getelementptr inbounds i16, i16* %421, i64 7
  %442 = getelementptr inbounds i16, i16* %420, i64 7
  %443 = load i16, i16* %442, align 2
  store i16 %443, i16* %441, align 2
  %444 = add i64 %419, -8
  %445 = getelementptr inbounds i16, i16* %421, i64 8
  %446 = getelementptr inbounds i16, i16* %420, i64 8
  %447 = icmp eq i64 %444, 0
  br i1 %447, label %448, label %418, !llvm.loop !82

448:                                              ; preds = %413, %418, %393, %289
  %449 = icmp eq i64 %1, 10
  br i1 %449, label %451, label %450

450:                                              ; preds = %448
  tail call void @_ZdlPv(i8* %25) #12
  br label %451

451:                                              ; preds = %448, %450
  %452 = bitcast %"class.std::__1::basic_string.55"* %0 to i8**
  store i8* %41, i8** %452, align 8
  %453 = or i64 %39, -9223372036854775808
  %454 = getelementptr inbounds %"class.std::__1::basic_string.55", %"class.std::__1::basic_string.55"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %453, i64* %454, align 8
  %455 = add i64 %290, %6
  %456 = getelementptr inbounds %"class.std::__1::basic_string.55", %"class.std::__1::basic_string.55"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %455, i64* %456, align 8
  %457 = getelementptr inbounds i16, i16* %42, i64 %455
  store i16 0, i16* %457, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIcNS_9allocatorIcEEE8__appendEm(%"class.std::__1::vector.65"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.65", %"class.std::__1::vector.65"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.65", %"class.std::__1::vector.65"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #13
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector.65"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector.65"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #14
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #12
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #13
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.65", %"class.std::__1::vector.65"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #13
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #12
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { builtin nounwind }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZNK3sql9Statement12ColumnStringEi: argument 0"}
!6 = distinct !{!6, !"_ZNK3sql9Statement12ColumnStringEi"}
!7 = !{!8}
!8 = distinct !{!8, !9}
!9 = distinct !{!9, !"LVerDomain"}
!10 = !{!11}
!11 = distinct !{!11, !9}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.unroll.disable"}
!16 = distinct !{!16, !15}
!17 = distinct !{!17, !13}
!18 = !{!19}
!19 = distinct !{!19, !20}
!20 = distinct !{!20, !"LVerDomain"}
!21 = !{!22}
!22 = distinct !{!22, !20}
!23 = distinct !{!23, !13}
!24 = distinct !{!24, !15}
!25 = distinct !{!25, !13}
!26 = !{!27}
!27 = distinct !{!27, !28}
!28 = distinct !{!28, !"LVerDomain"}
!29 = !{!30}
!30 = distinct !{!30, !28}
!31 = distinct !{!31, !13}
!32 = distinct !{!32, !15}
!33 = distinct !{!33, !15}
!34 = distinct !{!34, !13}
!35 = !{!36}
!36 = distinct !{!36, !37}
!37 = distinct !{!37, !"LVerDomain"}
!38 = !{!39}
!39 = distinct !{!39, !37}
!40 = distinct !{!40, !13}
!41 = distinct !{!41, !15}
!42 = distinct !{!42, !13}
!43 = !{!44}
!44 = distinct !{!44, !45}
!45 = distinct !{!45, !"LVerDomain"}
!46 = !{!47}
!47 = distinct !{!47, !45}
!48 = distinct !{!48, !13}
!49 = distinct !{!49, !15}
!50 = distinct !{!50, !15}
!51 = distinct !{!51, !13}
!52 = !{!53}
!53 = distinct !{!53, !54}
!54 = distinct !{!54, !"LVerDomain"}
!55 = !{!56}
!56 = distinct !{!56, !54}
!57 = distinct !{!57, !13}
!58 = distinct !{!58, !15}
!59 = distinct !{!59, !15}
!60 = distinct !{!60, !13}
!61 = !{!62}
!62 = distinct !{!62, !63}
!63 = distinct !{!63, !"LVerDomain"}
!64 = !{!65}
!65 = distinct !{!65, !63}
!66 = distinct !{!66, !13}
!67 = distinct !{!67, !15}
!68 = distinct !{!68, !15}
!69 = distinct !{!69, !13}
!70 = distinct !{!70, !13}
!71 = distinct !{!71, !15}
!72 = distinct !{!72, !73, !13}
!73 = !{!"llvm.loop.unroll.runtime.disable"}
!74 = !{!75}
!75 = distinct !{!75, !76}
!76 = distinct !{!76, !"LVerDomain"}
!77 = !{!78}
!78 = distinct !{!78, !76}
!79 = distinct !{!79, !13}
!80 = distinct !{!80, !15}
!81 = distinct !{!81, !15}
!82 = distinct !{!82, !13}
