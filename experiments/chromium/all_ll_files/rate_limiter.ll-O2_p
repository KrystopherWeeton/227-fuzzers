; ModuleID = '../../third_party/webrtc/rtc_base/rate_limiter.cc'
source_filename = "../../third_party/webrtc/rtc_base/rate_limiter.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::RateLimiter" = type <{ %"class.webrtc::Clock"*, %"class.webrtc::Mutex", %"class.webrtc::RateStatistics", i64, i32, [4 x i8] }>
%"class.webrtc::Mutex" = type { %"class.webrtc::MutexImpl" }
%"class.webrtc::MutexImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.webrtc::RateStatistics" = type { %"class.std::__1::deque", i64, i64, i8, i32, float, i64, i64 }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.1" }
%"struct.std::__1::__split_buffer" = type { %"struct.webrtc::RateStatistics::Bucket"**, %"struct.webrtc::RateStatistics::Bucket"**, %"struct.webrtc::RateStatistics::Bucket"**, %"class.std::__1::__compressed_pair" }
%"struct.webrtc::RateStatistics::Bucket" = type { i64, i32, i64 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.webrtc::RateStatistics::Bucket"** }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.webrtc::Clock" = type { i32 (...)** }
%union.pthread_mutexattr_t = type { i32 }

@_ZN6webrtc11RateLimiterC1EPNS_5ClockEl = hidden unnamed_addr alias void (%"class.webrtc::RateLimiter"*, %"class.webrtc::Clock"*, i64), void (%"class.webrtc::RateLimiter"*, %"class.webrtc::Clock"*, i64)* @_ZN6webrtc11RateLimiterC2EPNS_5ClockEl
@_ZN6webrtc11RateLimiterD1Ev = hidden unnamed_addr alias void (%"class.webrtc::RateLimiter"*), void (%"class.webrtc::RateLimiter"*)* @_ZN6webrtc11RateLimiterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc11RateLimiterC2EPNS_5ClockEl(%"class.webrtc::RateLimiter"*, %"class.webrtc::Clock"*, i64) unnamed_addr #0 align 2 {
  %4 = alloca %union.pthread_mutexattr_t, align 4
  %5 = getelementptr inbounds %"class.webrtc::RateLimiter", %"class.webrtc::RateLimiter"* %0, i64 0, i32 0
  store %"class.webrtc::Clock"* %1, %"class.webrtc::Clock"** %5, align 8
  %6 = bitcast %union.pthread_mutexattr_t* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #4
  %7 = getelementptr inbounds %union.pthread_mutexattr_t, %union.pthread_mutexattr_t* %4, i64 0, i32 0
  store i32 -1431655766, i32* %7, align 4
  %8 = call i32 @pthread_mutexattr_init(%union.pthread_mutexattr_t* nonnull %4) #4
  %9 = getelementptr inbounds %"class.webrtc::RateLimiter", %"class.webrtc::RateLimiter"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* %9, %union.pthread_mutexattr_t* nonnull %4) #4
  %11 = call i32 @pthread_mutexattr_destroy(%union.pthread_mutexattr_t* nonnull %4) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #4
  %12 = getelementptr inbounds %"class.webrtc::RateLimiter", %"class.webrtc::RateLimiter"* %0, i64 0, i32 2
  call void @_ZN6webrtc14RateStatisticsC1Elf(%"class.webrtc::RateStatistics"* %12, i64 %2, float 8.000000e+03) #4
  %13 = getelementptr inbounds %"class.webrtc::RateLimiter", %"class.webrtc::RateLimiter"* %0, i64 0, i32 3
  store i64 %2, i64* %13, align 8
  %14 = getelementptr inbounds %"class.webrtc::RateLimiter", %"class.webrtc::RateLimiter"* %0, i64 0, i32 4
  store i32 -1, i32* %14, align 8
  ret void
}

declare void @_ZN6webrtc14RateStatisticsC1Elf(%"class.webrtc::RateStatistics"*, i64, float) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc11RateLimiterD2Ev(%"class.webrtc::RateLimiter"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RateLimiter", %"class.webrtc::RateLimiter"* %0, i64 0, i32 2
  tail call void @_ZN6webrtc14RateStatisticsD1Ev(%"class.webrtc::RateStatistics"* %2) #4
  %3 = getelementptr inbounds %"class.webrtc::RateLimiter", %"class.webrtc::RateLimiter"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %3) #4
  ret void
}

; Function Attrs: nounwind
declare void @_ZN6webrtc14RateStatisticsD1Ev(%"class.webrtc::RateStatistics"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6webrtc11RateLimiter10TryUseRateEm(%"class.webrtc::RateLimiter"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::RateLimiter", %"class.webrtc::RateLimiter"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %3) #4
  %5 = getelementptr inbounds %"class.webrtc::RateLimiter", %"class.webrtc::RateLimiter"* %0, i64 0, i32 0
  %6 = load %"class.webrtc::Clock"*, %"class.webrtc::Clock"** %5, align 8
  %7 = bitcast %"class.webrtc::Clock"* %6 to i64 (%"class.webrtc::Clock"*)***
  %8 = load i64 (%"class.webrtc::Clock"*)**, i64 (%"class.webrtc::Clock"*)*** %7, align 8
  %9 = getelementptr inbounds i64 (%"class.webrtc::Clock"*)*, i64 (%"class.webrtc::Clock"*)** %8, i64 2
  %10 = load i64 (%"class.webrtc::Clock"*)*, i64 (%"class.webrtc::Clock"*)** %9, align 8
  %11 = tail call i64 %10(%"class.webrtc::Clock"* %6) #4
  %12 = add nsw i64 %11, 500
  %13 = sdiv i64 %12, 1000
  %14 = getelementptr inbounds %"class.webrtc::RateLimiter", %"class.webrtc::RateLimiter"* %0, i64 0, i32 2
  %15 = tail call { i8, i64 } @_ZNK6webrtc14RateStatistics4RateEl(%"class.webrtc::RateStatistics"* %14, i64 %13) #4
  %16 = extractvalue { i8, i64 } %15, 0
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %2
  %19 = extractvalue { i8, i64 } %15, 1
  %20 = mul i64 %1, 8000
  %21 = getelementptr inbounds %"class.webrtc::RateLimiter", %"class.webrtc::RateLimiter"* %0, i64 0, i32 3
  %22 = load i64, i64* %21, align 8
  %23 = udiv i64 %20, %22
  %24 = and i64 %19, 4294967295
  %25 = add i64 %23, %24
  %26 = getelementptr inbounds %"class.webrtc::RateLimiter", %"class.webrtc::RateLimiter"* %0, i64 0, i32 4
  %27 = load i32, i32* %26, align 8
  %28 = zext i32 %27 to i64
  %29 = icmp ugt i64 %25, %28
  br i1 %29, label %31, label %30

30:                                               ; preds = %18, %2
  tail call void @_ZN6webrtc14RateStatistics6UpdateEll(%"class.webrtc::RateStatistics"* %14, i64 %1, i64 %13) #4
  br label %31

31:                                               ; preds = %18, %30
  %32 = phi i1 [ true, %30 ], [ false, %18 ]
  %33 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #4
  ret i1 %32
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare { i8, i64 } @_ZNK6webrtc14RateStatistics4RateEl(%"class.webrtc::RateStatistics"*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN6webrtc14RateStatistics6UpdateEll(%"class.webrtc::RateStatistics"*, i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc11RateLimiter10SetMaxRateEj(%"class.webrtc::RateLimiter"*, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::RateLimiter", %"class.webrtc::RateLimiter"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %3) #4
  %5 = getelementptr inbounds %"class.webrtc::RateLimiter", %"class.webrtc::RateLimiter"* %0, i64 0, i32 4
  store i32 %1, i32* %5, align 8
  %6 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN6webrtc11RateLimiter13SetWindowSizeEl(%"class.webrtc::RateLimiter"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::RateLimiter", %"class.webrtc::RateLimiter"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %3) #4
  %5 = getelementptr inbounds %"class.webrtc::RateLimiter", %"class.webrtc::RateLimiter"* %0, i64 0, i32 3
  store i64 %1, i64* %5, align 8
  %6 = getelementptr inbounds %"class.webrtc::RateLimiter", %"class.webrtc::RateLimiter"* %0, i64 0, i32 2
  %7 = getelementptr inbounds %"class.webrtc::RateLimiter", %"class.webrtc::RateLimiter"* %0, i64 0, i32 0
  %8 = load %"class.webrtc::Clock"*, %"class.webrtc::Clock"** %7, align 8
  %9 = bitcast %"class.webrtc::Clock"* %8 to i64 (%"class.webrtc::Clock"*)***
  %10 = load i64 (%"class.webrtc::Clock"*)**, i64 (%"class.webrtc::Clock"*)*** %9, align 8
  %11 = getelementptr inbounds i64 (%"class.webrtc::Clock"*)*, i64 (%"class.webrtc::Clock"*)** %10, i64 2
  %12 = load i64 (%"class.webrtc::Clock"*)*, i64 (%"class.webrtc::Clock"*)** %11, align 8
  %13 = tail call i64 %12(%"class.webrtc::Clock"* %8) #4
  %14 = add nsw i64 %13, 500
  %15 = sdiv i64 %14, 1000
  %16 = tail call zeroext i1 @_ZN6webrtc14RateStatistics13SetWindowSizeEll(%"class.webrtc::RateStatistics"* %6, i64 %1, i64 %15) #4
  %17 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #4
  ret i1 %16
}

declare zeroext i1 @_ZN6webrtc14RateStatistics13SetWindowSizeEll(%"class.webrtc::RateStatistics"*, i64, i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @pthread_mutexattr_init(%union.pthread_mutexattr_t*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_mutexattr_destroy(%union.pthread_mutexattr_t*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_mutex_destroy(%union.pthread_mutex_t*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
