; ModuleID = '../../third_party/boringssl/src/crypto/x509/x509_vfy.c'
source_filename = "../../third_party/boringssl/src/crypto/x509/x509_vfy.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.CRYPTO_EX_DATA_CLASS = type { %struct.CRYPTO_STATIC_MUTEX, %struct.stack_st_CRYPTO_EX_DATA_FUNCS*, i8 }
%struct.CRYPTO_STATIC_MUTEX = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%struct.stack_st_CRYPTO_EX_DATA_FUNCS = type opaque
%struct.x509_store_ctx_st = type { %struct.x509_store_st*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509_CRL*, %struct.X509_VERIFY_PARAM_st*, i8*, {}*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, {}*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, {}*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, {}*, i32, i32, %struct.stack_st_X509*, %struct.X509_POLICY_TREE_st*, i32, i32, i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_crl_st*, i32, i32, %struct.x509_store_ctx_st*, %struct.crypto_ex_data_st }
%struct.x509_store_st = type { i32, %struct.stack_st_X509_OBJECT*, %union.crypto_mutex_st, %struct.stack_st_X509*, %struct.stack_st_X509_LOOKUP*, %struct.X509_VERIFY_PARAM_st*, {}*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, {}*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, {}*, i32 }
%struct.stack_st_X509_OBJECT = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.stack_st_X509_LOOKUP = type opaque
%struct.stack_st_X509_CRL = type opaque
%struct.X509_VERIFY_PARAM_st = type { i8*, i64, i64, i64, i32, i32, i32, %struct.stack_st_ASN1_OBJECT*, %struct.X509_VERIFY_PARAM_ID_st* }
%struct.stack_st_ASN1_OBJECT = type opaque
%struct.X509_VERIFY_PARAM_ID_st = type { %struct.stack_st_OPENSSL_STRING*, i32, i8*, i8*, i64, i8*, i64, i8 }
%struct.stack_st_OPENSSL_STRING = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.stack_st_X509 = type opaque
%struct.X509_POLICY_TREE_st = type opaque
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type { %struct.asn1_string_st*, %struct.stack_st_GENERAL_NAME*, %struct.asn1_string_st* }
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type { %struct.stack_st_GENERAL_SUBTREE*, %struct.stack_st_GENERAL_SUBTREE* }
%struct.stack_st_GENERAL_SUBTREE = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type { %struct.DIST_POINT_NAME_st*, i32, i32, %struct.asn1_string_st*, i32, i32 }
%struct.DIST_POINT_NAME_st = type { i32, %union.anon.0, %struct.X509_name_st* }
%union.anon.0 = type { %struct.stack_st_GENERAL_NAME* }
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.X509_name_entry_st = type { %struct.asn1_object_st*, %struct.asn1_string_st*, i32, i32 }
%struct.evp_pkey_st = type { i32, i32, %union.anon.1, %struct.evp_pkey_asn1_method_st* }
%union.anon.1 = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.env_md_st = type opaque
%struct.x509_revoked_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.stack_st_GENERAL_NAME*, i32, i32 }
%struct.X509_extension_st = type { %struct.asn1_object_st*, i32, %struct.asn1_string_st* }
%struct.x509_purpose_st = type { i32, i32, i32, i32 (%struct.x509_purpose_st*, %struct.x509_st*, i32)*, i8*, i8*, i8* }
%struct.GENERAL_NAME_st = type { i32, %union.anon.2 }
%union.anon.2 = type { i8* }

@.str = private unnamed_addr constant [55 x i8] c"../../third_party/boringssl/src/crypto/x509/x509_vfy.c\00", align 1
@g_ex_data_class = internal global %struct.CRYPTO_EX_DATA_CLASS { %struct.CRYPTO_STATIC_MUTEX zeroinitializer, %struct.stack_st_CRYPTO_EX_DATA_FUNCS* null, i8 1 }, align 8
@.str.1 = private unnamed_addr constant [8 x i8] c"default\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_verify_cert(%struct.x509_store_ctx_st*) local_unnamed_addr #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.x509_st*, align 8
  %4 = bitcast %struct.x509_st** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #10
  store %struct.x509_st* inttoptr (i64 -6148914691236517206 to %struct.x509_st*), %struct.x509_st** %3, align 8
  %5 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %6 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %5, align 8
  %7 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 1
  %8 = load %struct.x509_st*, %struct.x509_st** %7, align 8
  %9 = icmp eq %struct.x509_st* %8, null
  br i1 %9, label %10, label %12

10:                                               ; preds = %1
  tail call void @ERR_put_error(i32 11, i32 0, i32 122, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 196) #10
  %11 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 65, i32* %11, align 8
  br label %830

12:                                               ; preds = %1
  %13 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 20
  %14 = load %struct.stack_st_X509*, %struct.stack_st_X509** %13, align 8
  %15 = icmp eq %struct.stack_st_X509* %14, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %12
  tail call void @ERR_put_error(i32 11, i32 0, i32 66, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 205) #10
  %17 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 65, i32* %17, align 8
  br label %830

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %20 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %19, align 8
  %21 = tail call %struct.stack_st* @sk_new_null() #10
  %22 = bitcast %struct.stack_st_X509** %13 to %struct.stack_st**
  store %struct.stack_st* %21, %struct.stack_st** %22, align 8
  %23 = icmp eq %struct.stack_st* %21, null
  br i1 %23, label %29, label %24

24:                                               ; preds = %18
  %25 = bitcast %struct.x509_st** %7 to i8**
  %26 = load i8*, i8** %25, align 8
  %27 = tail call i64 @sk_push(%struct.stack_st* nonnull %21, i8* %26) #10
  %28 = icmp eq i64 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %24, %18
  tail call void @ERR_put_error(i32 11, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 218) #10
  %30 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 17, i32* %30, align 8
  br label %830

31:                                               ; preds = %24
  %32 = load %struct.x509_st*, %struct.x509_st** %7, align 8
  %33 = tail call i32 @X509_up_ref(%struct.x509_st* %32) #10
  %34 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 19
  store i32 1, i32* %34, align 4
  %35 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 2
  %36 = load %struct.stack_st_X509*, %struct.stack_st_X509** %35, align 8
  %37 = icmp eq %struct.stack_st_X509* %36, null
  br i1 %37, label %45, label %38

38:                                               ; preds = %31
  %39 = bitcast %struct.stack_st_X509* %36 to %struct.stack_st*
  %40 = tail call %struct.stack_st* @sk_dup(%struct.stack_st* nonnull %39) #10
  %41 = bitcast %struct.stack_st* %40 to %struct.stack_st_X509*
  %42 = icmp eq %struct.stack_st* %40, null
  br i1 %42, label %43, label %45

43:                                               ; preds = %38
  tail call void @ERR_put_error(i32 11, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 229) #10
  %44 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 17, i32* %44, align 8
  br label %830

45:                                               ; preds = %31, %38
  %46 = phi %struct.stack_st_X509* [ %41, %38 ], [ null, %31 ]
  %47 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 0
  %48 = load %struct.x509_store_st*, %struct.x509_store_st** %47, align 8
  %49 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %48, i64 0, i32 3
  %50 = load %struct.stack_st_X509*, %struct.stack_st_X509** %49, align 8
  %51 = icmp eq %struct.stack_st_X509* %50, null
  br i1 %51, label %91, label %52

52:                                               ; preds = %45
  %53 = icmp eq %struct.stack_st_X509* %46, null
  br i1 %53, label %54, label %62

54:                                               ; preds = %52
  %55 = tail call %struct.stack_st* @sk_new_null() #10
  %56 = icmp eq %struct.stack_st* %55, null
  br i1 %56, label %60, label %57

57:                                               ; preds = %54
  %58 = bitcast %struct.stack_st* %55 to %struct.stack_st_X509*
  %59 = load %struct.x509_store_st*, %struct.x509_store_st** %47, align 8
  br label %62

60:                                               ; preds = %54
  tail call void @ERR_put_error(i32 11, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 238) #10
  %61 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 17, i32* %61, align 8
  br label %830

62:                                               ; preds = %57, %52
  %63 = phi %struct.x509_store_st* [ %59, %57 ], [ %48, %52 ]
  %64 = phi %struct.stack_st_X509* [ %58, %57 ], [ %46, %52 ]
  %65 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %63, i64 0, i32 3
  %66 = bitcast %struct.stack_st_X509** %65 to %struct.stack_st**
  %67 = load %struct.stack_st*, %struct.stack_st** %66, align 8
  %68 = tail call i64 @sk_num(%struct.stack_st* %67) #10
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %91, label %70

70:                                               ; preds = %62
  %71 = bitcast %struct.stack_st_X509* %64 to %struct.stack_st*
  br label %79

72:                                               ; preds = %79
  %73 = load %struct.x509_store_st*, %struct.x509_store_st** %47, align 8
  %74 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %73, i64 0, i32 3
  %75 = bitcast %struct.stack_st_X509** %74 to %struct.stack_st**
  %76 = load %struct.stack_st*, %struct.stack_st** %75, align 8
  %77 = tail call i64 @sk_num(%struct.stack_st* %76) #10
  %78 = icmp ult i64 %88, %77
  br i1 %78, label %79, label %91

79:                                               ; preds = %70, %72
  %80 = phi i64 [ 0, %70 ], [ %88, %72 ]
  %81 = load %struct.x509_store_st*, %struct.x509_store_st** %47, align 8
  %82 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %81, i64 0, i32 3
  %83 = bitcast %struct.stack_st_X509** %82 to %struct.stack_st**
  %84 = load %struct.stack_st*, %struct.stack_st** %83, align 8
  %85 = tail call i8* @sk_value(%struct.stack_st* %84, i64 %80) #10
  %86 = tail call i64 @sk_push(%struct.stack_st* %71, i8* %85) #10
  %87 = icmp eq i64 %86, 0
  %88 = add nuw i64 %80, 1
  br i1 %87, label %89, label %72

89:                                               ; preds = %79
  tail call void @ERR_put_error(i32 11, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 249) #10
  %90 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 17, i32* %90, align 8
  br label %812

91:                                               ; preds = %72, %62, %45
  %92 = phi %struct.stack_st_X509* [ %46, %45 ], [ %64, %62 ], [ %64, %72 ]
  %93 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %94 = tail call i64 @sk_num(%struct.stack_st* %93) #10
  %95 = trunc i64 %94 to i32
  %96 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %97 = shl i64 %94, 32
  %98 = add i64 %97, -4294967296
  %99 = ashr exact i64 %98, 32
  %100 = tail call i8* @sk_value(%struct.stack_st* %96, i64 %99) #10
  %101 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %6, i64 0, i32 6
  %102 = load i32, i32* %101, align 8
  %103 = icmp slt i32 %102, %95
  br i1 %103, label %173, label %104

104:                                              ; preds = %91
  %105 = bitcast i8* %100 to %struct.x509_st*
  %106 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 8
  %107 = icmp eq %struct.stack_st_X509* %92, null
  %108 = bitcast %struct.stack_st_X509* %92 to %struct.stack_st*
  %109 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 9
  %110 = bitcast %struct.x509_st** %3 to i8**
  br label %111

111:                                              ; preds = %163, %104
  %112 = phi i32 [ %95, %104 ], [ %171, %163 ]
  %113 = phi %struct.x509_st* [ %105, %104 ], [ %170, %163 ]
  %114 = call i32 @x509v3_cache_extensions(%struct.x509_st* %113) #10
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %118

116:                                              ; preds = %111
  %117 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 41, i32* %117, align 8
  br label %812

118:                                              ; preds = %111
  %119 = getelementptr inbounds %struct.x509_st, %struct.x509_st* %113, i64 0, i32 7
  %120 = load i64, i64* %119, align 8
  %121 = and i64 %120, 8192
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %173

123:                                              ; preds = %118
  %124 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %5, align 8
  %125 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %124, i64 0, i32 3
  %126 = load i64, i64* %125, align 8
  %127 = trunc i64 %126 to i16
  %128 = icmp slt i16 %127, 0
  br i1 %128, label %129, label %139

129:                                              ; preds = %123
  %130 = load i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)** %106, align 8
  %131 = call i32 %130(%struct.x509_st** nonnull %3, %struct.x509_store_ctx_st* %0, %struct.x509_st* %113) #10
  %132 = icmp slt i32 %131, 0
  br i1 %132, label %133, label %135

133:                                              ; preds = %129
  %134 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 66, i32* %134, align 8
  br label %812

135:                                              ; preds = %129
  %136 = icmp eq i32 %131, 0
  br i1 %136, label %139, label %137

137:                                              ; preds = %135
  %138 = load %struct.x509_st*, %struct.x509_st** %3, align 8
  call void @X509_free(%struct.x509_st* %138) #10
  br label %173

139:                                              ; preds = %135, %123
  br i1 %107, label %173, label %140

140:                                              ; preds = %139
  %141 = call i64 @sk_num(%struct.stack_st* %108) #10
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %154, label %146

143:                                              ; preds = %146
  %144 = call i64 @sk_num(%struct.stack_st* %108) #10
  %145 = icmp ult i64 %153, %144
  br i1 %145, label %146, label %154

146:                                              ; preds = %140, %143
  %147 = phi i64 [ %153, %143 ], [ 0, %140 ]
  %148 = call i8* @sk_value(%struct.stack_st* %108, i64 %147) #10
  %149 = bitcast i8* %148 to %struct.x509_st*
  %150 = load i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)** %109, align 8
  %151 = call i32 %150(%struct.x509_store_ctx_st* %0, %struct.x509_st* %113, %struct.x509_st* %149) #10
  %152 = icmp eq i32 %151, 0
  %153 = add nuw i64 %147, 1
  br i1 %152, label %143, label %155

154:                                              ; preds = %140, %143
  store %struct.x509_st* null, %struct.x509_st** %3, align 8
  br label %173

155:                                              ; preds = %146
  store i8* %148, i8** %110, align 8
  %156 = icmp eq i8* %148, null
  br i1 %156, label %173, label %157

157:                                              ; preds = %155
  %158 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %159 = call i64 @sk_push(%struct.stack_st* %158, i8* nonnull %148) #10
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %161, label %163

161:                                              ; preds = %157
  call void @ERR_put_error(i32 11, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 301) #10
  %162 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 17, i32* %162, align 8
  br label %812

163:                                              ; preds = %157
  %164 = load %struct.x509_st*, %struct.x509_st** %3, align 8
  %165 = call i32 @X509_up_ref(%struct.x509_st* %164) #10
  %166 = load i8*, i8** %110, align 8
  %167 = call i8* @sk_delete_ptr(%struct.stack_st* %108, i8* %166) #10
  %168 = load i32, i32* %34, align 4
  %169 = add nsw i32 %168, 1
  store i32 %169, i32* %34, align 4
  %170 = load %struct.x509_st*, %struct.x509_st** %3, align 8
  %171 = add nsw i32 %112, 1
  %172 = icmp sgt i32 %102, %112
  br i1 %172, label %111, label %173

173:                                              ; preds = %163, %118, %155, %139, %91, %154, %137
  %174 = phi i32 [ %112, %154 ], [ %112, %137 ], [ %95, %91 ], [ %171, %163 ], [ %112, %118 ], [ %112, %155 ], [ %95, %139 ]
  %175 = phi i32 [ 0, %154 ], [ %131, %137 ], [ 0, %91 ], [ 0, %139 ], [ 0, %155 ], [ 0, %118 ], [ 0, %163 ]
  %176 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %177 = call i64 @sk_num(%struct.stack_st* %176) #10
  %178 = trunc i64 %177 to i32
  %179 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %180 = add nsw i32 %178, -1
  %181 = sext i32 %180 to i64
  %182 = call i8* @sk_value(%struct.stack_st* %179, i64 %181) #10
  %183 = bitcast i8* %182 to %struct.x509_st*
  %184 = call i32 @x509v3_cache_extensions(%struct.x509_st* %183) #10
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %194, label %186

186:                                              ; preds = %173
  %187 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 8
  %188 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  %189 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 25
  %190 = bitcast %struct.x509_st** %189 to i8**
  %191 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 23
  %192 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 15
  %193 = bitcast %struct.x509_st** %3 to i8**
  br label %198

194:                                              ; preds = %410, %173
  %195 = phi %struct.x509_st* [ null, %173 ], [ %257, %410 ]
  %196 = phi i32 [ %175, %173 ], [ %392, %410 ]
  %197 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 41, i32* %197, align 8
  br label %812

198:                                              ; preds = %186, %410
  %199 = phi %struct.x509_st* [ %183, %186 ], [ %422, %410 ]
  %200 = phi i8* [ %182, %186 ], [ %421, %410 ]
  %201 = phi i64 [ %181, %186 ], [ %420, %410 ]
  %202 = phi i32 [ %180, %186 ], [ %419, %410 ]
  %203 = phi i32 [ %174, %186 ], [ %398, %410 ]
  %204 = phi i32 [ %174, %186 ], [ %411, %410 ]
  %205 = phi i32 [ %175, %186 ], [ %392, %410 ]
  %206 = phi i32 [ 0, %186 ], [ %258, %410 ]
  %207 = phi %struct.x509_st* [ null, %186 ], [ %257, %410 ]
  %208 = phi i8* [ null, %186 ], [ %256, %410 ]
  %209 = phi i8* [ null, %186 ], [ %255, %410 ]
  %210 = getelementptr inbounds i8, i8* %200, i64 56
  %211 = bitcast i8* %210 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = and i64 %212, 8192
  %214 = icmp eq i64 %213, 0
  br i1 %214, label %253, label %215

215:                                              ; preds = %198
  %216 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %217 = call i64 @sk_num(%struct.stack_st* %216) #10
  %218 = icmp eq i64 %217, 1
  br i1 %218, label %219, label %240

219:                                              ; preds = %215
  %220 = load i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)** %187, align 8
  %221 = call i32 %220(%struct.x509_st** nonnull %3, %struct.x509_store_ctx_st* %0, %struct.x509_st* %199) #10
  %222 = icmp slt i32 %221, 1
  br i1 %222, label %223, label %224

223:                                              ; preds = %219
  store i32 18, i32* %188, align 8
  store i8* %200, i8** %190, align 8
  store i32 %202, i32* %191, align 4
  br label %232

224:                                              ; preds = %219
  %225 = load %struct.x509_st*, %struct.x509_st** %3, align 8
  %226 = call i32 @X509_cmp(%struct.x509_st* %199, %struct.x509_st* %225) #10
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %235, label %228

228:                                              ; preds = %224
  store i32 18, i32* %188, align 8
  store i8* %200, i8** %190, align 8
  store i32 %202, i32* %191, align 4
  %229 = icmp eq i32 %221, 1
  br i1 %229, label %230, label %232

230:                                              ; preds = %228
  %231 = load %struct.x509_st*, %struct.x509_st** %3, align 8
  call void @X509_free(%struct.x509_st* %231) #10
  br label %232

232:                                              ; preds = %223, %230, %228
  %233 = call i32 %20(i32 0, %struct.x509_store_ctx_st* %0) #10
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %812, label %253

235:                                              ; preds = %224
  call void @X509_free(%struct.x509_st* %199) #10
  %236 = load %struct.x509_st*, %struct.x509_st** %3, align 8
  %237 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %238 = bitcast %struct.x509_st* %236 to i8*
  %239 = call i8* @sk_set(%struct.stack_st* %237, i64 %201, i8* %238) #10
  store i32 0, i32* %34, align 4
  br label %253

240:                                              ; preds = %215
  %241 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %242 = call i8* @sk_pop(%struct.stack_st* %241) #10
  %243 = bitcast i8* %242 to %struct.x509_st*
  %244 = load i32, i32* %34, align 4
  %245 = add nsw i32 %244, -1
  store i32 %245, i32* %34, align 4
  %246 = add nsw i32 %204, -1
  %247 = add nsw i32 %203, -1
  %248 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %249 = add nsw i32 %204, -2
  %250 = sext i32 %249 to i64
  %251 = call i8* @sk_value(%struct.stack_st* %248, i64 %250) #10
  %252 = bitcast i8* %251 to %struct.x509_st*
  br label %253

253:                                              ; preds = %232, %198, %240, %235
  %254 = phi %struct.x509_st* [ %199, %232 ], [ %236, %235 ], [ %252, %240 ], [ %199, %198 ]
  %255 = phi i8* [ %209, %232 ], [ %209, %235 ], [ %242, %240 ], [ %209, %198 ]
  %256 = phi i8* [ %208, %232 ], [ %208, %235 ], [ %242, %240 ], [ %208, %198 ]
  %257 = phi %struct.x509_st* [ %207, %232 ], [ %207, %235 ], [ %243, %240 ], [ %207, %198 ]
  %258 = phi i32 [ 1, %232 ], [ %206, %235 ], [ %206, %240 ], [ %206, %198 ]
  %259 = phi i32 [ %233, %232 ], [ %221, %235 ], [ %205, %240 ], [ %205, %198 ]
  %260 = phi i32 [ %204, %232 ], [ %204, %235 ], [ %246, %240 ], [ %204, %198 ]
  %261 = phi i32 [ %203, %232 ], [ %203, %235 ], [ %247, %240 ], [ %203, %198 ]
  %262 = icmp slt i32 %102, %260
  br i1 %262, label %296, label %263

263:                                              ; preds = %253
  %264 = call i32 @x509v3_cache_extensions(%struct.x509_st* %254) #10
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %269, label %271

266:                                              ; preds = %293
  %267 = call i32 @x509v3_cache_extensions(%struct.x509_st* %286) #10
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %269, label %271

269:                                              ; preds = %263, %266
  %270 = phi i32 [ %280, %266 ], [ %259, %263 ]
  store i32 41, i32* %188, align 8
  br label %812

271:                                              ; preds = %263, %266
  %272 = phi %struct.x509_st* [ %286, %266 ], [ %254, %263 ]
  %273 = phi i32 [ %294, %266 ], [ %260, %263 ]
  %274 = getelementptr inbounds %struct.x509_st, %struct.x509_st* %272, i64 0, i32 7
  %275 = load i64, i64* %274, align 8
  %276 = and i64 %275, 8192
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %278, label %296

278:                                              ; preds = %271
  %279 = load i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)** %187, align 8
  %280 = call i32 %279(%struct.x509_st** nonnull %3, %struct.x509_store_ctx_st* %0, %struct.x509_st* %272) #10
  %281 = icmp slt i32 %280, 0
  br i1 %281, label %282, label %283

282:                                              ; preds = %278
  store i32 66, i32* %188, align 8
  br label %812

283:                                              ; preds = %278
  %284 = icmp eq i32 %280, 0
  br i1 %284, label %296, label %285

285:                                              ; preds = %283
  %286 = load %struct.x509_st*, %struct.x509_st** %3, align 8
  %287 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %288 = bitcast %struct.x509_st* %286 to i8*
  %289 = call i64 @sk_push(%struct.stack_st* %287, i8* %288) #10
  %290 = icmp eq i64 %289, 0
  br i1 %290, label %291, label %293

291:                                              ; preds = %285
  %292 = load %struct.x509_st*, %struct.x509_st** %3, align 8
  call void @X509_free(%struct.x509_st* %292) #10
  call void @ERR_put_error(i32 11, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 404) #10
  store i32 17, i32* %188, align 8
  br label %812

293:                                              ; preds = %285
  %294 = add nsw i32 %273, 1
  %295 = icmp sgt i32 %102, %273
  br i1 %295, label %266, label %296

296:                                              ; preds = %293, %283, %271, %253
  %297 = phi %struct.x509_st* [ %254, %253 ], [ %272, %271 ], [ %272, %283 ], [ %286, %293 ]
  %298 = phi i32 [ %260, %253 ], [ %273, %271 ], [ %273, %283 ], [ %294, %293 ]
  %299 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %19, align 8
  %300 = load i32, i32* %34, align 4
  %301 = sext i32 %300 to i64
  %302 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %303 = call i64 @sk_num(%struct.stack_st* %302) #10
  %304 = icmp ugt i64 %303, %301
  br i1 %304, label %305, label %323

305:                                              ; preds = %296, %318
  %306 = phi i64 [ %319, %318 ], [ %301, %296 ]
  %307 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %308 = call i8* @sk_value(%struct.stack_st* %307, i64 %306) #10
  %309 = bitcast i8* %308 to %struct.x509_st*
  %310 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %5, align 8
  %311 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %310, i64 0, i32 5
  %312 = load i32, i32* %311, align 4
  %313 = call i32 @X509_check_trust(%struct.x509_st* %309, i32 %312, i32 0) #10
  switch i32 %313, label %318 [
    i32 1, label %448
    i32 2, label %314
  ]

314:                                              ; preds = %305
  %315 = trunc i64 %306 to i32
  store i32 %315, i32* %191, align 4
  store i8* %308, i8** %190, align 8
  store i32 28, i32* %188, align 8
  %316 = call i32 %299(i32 0, %struct.x509_store_ctx_st* %0) #10
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %812, label %318

318:                                              ; preds = %314, %305
  %319 = add nuw i64 %306, 1
  %320 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %321 = call i64 @sk_num(%struct.stack_st* %320) #10
  %322 = icmp ult i64 %319, %321
  br i1 %322, label %305, label %323

323:                                              ; preds = %318, %296
  %324 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %5, align 8
  %325 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %324, i64 0, i32 3
  %326 = load i64, i64* %325, align 8
  %327 = and i64 %326, 524288
  %328 = icmp eq i64 %327, 0
  br i1 %328, label %374, label %329

329:                                              ; preds = %323
  %330 = load i32, i32* %34, align 4
  %331 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %332 = call i64 @sk_num(%struct.stack_st* %331) #10
  %333 = trunc i64 %332 to i32
  %334 = icmp slt i32 %330, %333
  br i1 %334, label %448, label %335

335:                                              ; preds = %329
  %336 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %337 = call i8* @sk_value(%struct.stack_st* %336, i64 0) #10
  %338 = bitcast i8* %337 to %struct.x509_st*
  %339 = load %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)** %192, align 8
  %340 = call %struct.X509_name_st* @X509_get_subject_name(%struct.x509_st* %338) #10
  %341 = call %struct.stack_st_X509* %339(%struct.x509_store_ctx_st* %0, %struct.X509_name_st* %340) #10
  %342 = icmp eq %struct.stack_st_X509* %341, null
  br i1 %342, label %374, label %343

343:                                              ; preds = %335
  %344 = bitcast %struct.stack_st_X509* %341 to %struct.stack_st*
  %345 = call i64 @sk_num(%struct.stack_st* nonnull %344) #10
  %346 = icmp eq i64 %345, 0
  br i1 %346, label %360, label %347

347:                                              ; preds = %343, %353
  %348 = phi i64 [ %354, %353 ], [ 0, %343 ]
  %349 = call i8* @sk_value(%struct.stack_st* nonnull %344, i64 %348) #10
  %350 = bitcast i8* %349 to %struct.x509_st*
  %351 = call i32 @X509_cmp(%struct.x509_st* %350, %struct.x509_st* %338) #10
  %352 = icmp eq i32 %351, 0
  br i1 %352, label %357, label %353

353:                                              ; preds = %347
  %354 = add nuw i64 %348, 1
  %355 = call i64 @sk_num(%struct.stack_st* nonnull %344) #10
  %356 = icmp ult i64 %354, %355
  br i1 %356, label %347, label %357

357:                                              ; preds = %353, %347
  %358 = phi i64 [ %354, %353 ], [ %348, %347 ]
  %359 = bitcast i8* %349 to %struct.x509_st*
  br label %360

360:                                              ; preds = %357, %343
  %361 = phi i64 [ 0, %343 ], [ %358, %357 ]
  %362 = phi i8* [ null, %343 ], [ %349, %357 ]
  %363 = phi %struct.x509_st* [ null, %343 ], [ %359, %357 ]
  %364 = call i64 @sk_num(%struct.stack_st* nonnull %344) #10
  %365 = icmp ult i64 %361, %364
  br i1 %365, label %367, label %366

366:                                              ; preds = %360
  call void @sk_pop_free_ex(%struct.stack_st* nonnull %344, void (void (i8*)*, i8*)* nonnull @sk_X509_call_free_func, void (i8*)* bitcast (void (%struct.x509_st*)* @X509_free to void (i8*)*)) #10
  br label %374

367:                                              ; preds = %360
  %368 = call i32 @X509_up_ref(%struct.x509_st* %363) #10
  call void @sk_pop_free_ex(%struct.stack_st* nonnull %344, void (void (i8*)*, i8*)* nonnull @sk_X509_call_free_func, void (i8*)* bitcast (void (%struct.x509_st*)* @X509_free to void (i8*)*)) #10
  %369 = icmp eq %struct.x509_st* %363, null
  br i1 %369, label %374, label %370

370:                                              ; preds = %367
  %371 = bitcast i8* %337 to %struct.x509_st*
  %372 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %373 = call i8* @sk_set(%struct.stack_st* %372, i64 0, i8* %362) #10
  call void @X509_free(%struct.x509_st* %371) #10
  store i32 0, i32* %34, align 4
  br label %448

374:                                              ; preds = %367, %323, %366, %335
  %375 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %5, align 8
  %376 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %375, i64 0, i32 3
  %377 = load i64, i64* %376, align 8
  %378 = and i64 %377, 1081344
  %379 = icmp eq i64 %378, 0
  br i1 %379, label %380, label %425

380:                                              ; preds = %374
  %381 = sext i32 %261 to i64
  br label %382

382:                                              ; preds = %380, %394
  %383 = phi i64 [ %381, %380 ], [ %384, %394 ]
  %384 = add nsw i64 %383, -1
  %385 = icmp sgt i64 %383, 1
  br i1 %385, label %386, label %425

386:                                              ; preds = %382
  %387 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %388 = add nsw i64 %383, -2
  %389 = call i8* @sk_value(%struct.stack_st* %387, i64 %388) #10
  %390 = bitcast i8* %389 to %struct.x509_st*
  %391 = load i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)** %187, align 8
  %392 = call i32 %391(%struct.x509_st** nonnull %3, %struct.x509_store_ctx_st* %0, %struct.x509_st* %390) #10
  %393 = icmp slt i32 %392, 0
  br i1 %393, label %812, label %394

394:                                              ; preds = %386
  %395 = icmp eq i32 %392, 0
  br i1 %395, label %382, label %396

396:                                              ; preds = %394
  %397 = trunc i64 %383 to i32
  %398 = trunc i64 %384 to i32
  %399 = load %struct.x509_st*, %struct.x509_st** %3, align 8
  call void @X509_free(%struct.x509_st* %399) #10
  %400 = icmp slt i32 %298, %397
  %401 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  br i1 %400, label %410, label %402

402:                                              ; preds = %396, %402
  %403 = phi %struct.stack_st* [ %409, %402 ], [ %401, %396 ]
  %404 = phi i32 [ %407, %402 ], [ %298, %396 ]
  %405 = call i8* @sk_pop(%struct.stack_st* %403) #10
  %406 = bitcast i8* %405 to %struct.x509_st*
  store i8* %405, i8** %193, align 8
  call void @X509_free(%struct.x509_st* %406) #10
  %407 = add nsw i32 %404, -1
  %408 = icmp sgt i32 %404, %397
  %409 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  br i1 %408, label %402, label %410

410:                                              ; preds = %402, %396
  %411 = phi i32 [ %298, %396 ], [ %407, %402 ]
  %412 = phi %struct.stack_st* [ %401, %396 ], [ %409, %402 ]
  %413 = call i64 @sk_num(%struct.stack_st* %412) #10
  %414 = trunc i64 %413 to i32
  store i32 %414, i32* %34, align 4
  %415 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %416 = call i64 @sk_num(%struct.stack_st* %415) #10
  %417 = trunc i64 %416 to i32
  %418 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %419 = add nsw i32 %417, -1
  %420 = sext i32 %419 to i64
  %421 = call i8* @sk_value(%struct.stack_st* %418, i64 %420) #10
  %422 = bitcast i8* %421 to %struct.x509_st*
  %423 = call i32 @x509v3_cache_extensions(%struct.x509_st* %422) #10
  %424 = icmp eq i32 %423, 0
  br i1 %424, label %194, label %198

425:                                              ; preds = %374, %382
  %426 = icmp eq i32 %258, 0
  br i1 %426, label %427, label %448

427:                                              ; preds = %425
  %428 = icmp eq %struct.x509_st* %257, null
  br i1 %428, label %434, label %429

429:                                              ; preds = %427
  %430 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 9
  %431 = load i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)** %430, align 8
  %432 = call i32 %431(%struct.x509_store_ctx_st* %0, %struct.x509_st* %297, %struct.x509_st* nonnull %257) #10
  %433 = icmp eq i32 %432, 0
  br i1 %433, label %434, label %438

434:                                              ; preds = %429, %427
  %435 = load i32, i32* %34, align 4
  %436 = icmp slt i32 %435, %298
  %437 = select i1 %436, i32 2, i32 20
  store i32 %437, i32* %188, align 8
  store %struct.x509_st* %297, %struct.x509_st** %189, align 8
  br label %442

438:                                              ; preds = %429
  %439 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %440 = call i64 @sk_push(%struct.stack_st* %439, i8* nonnull %256) #10
  %441 = add nsw i32 %298, 1
  store i32 %441, i32* %34, align 4
  store i8* %255, i8** %190, align 8
  store i32 19, i32* %188, align 8
  br label %442

442:                                              ; preds = %438, %434
  %443 = phi %struct.x509_st* [ %257, %434 ], [ null, %438 ]
  %444 = phi i32 [ %298, %434 ], [ %441, %438 ]
  %445 = add nsw i32 %444, -1
  store i32 %445, i32* %191, align 4
  %446 = call i32 %20(i32 0, %struct.x509_store_ctx_st* %0) #10
  %447 = icmp eq i32 %446, 0
  br i1 %447, label %812, label %448

448:                                              ; preds = %329, %305, %425, %370, %442
  %449 = phi %struct.x509_st* [ %257, %425 ], [ %443, %442 ], [ %257, %370 ], [ %257, %305 ], [ %257, %329 ]
  %450 = phi i32 [ %258, %425 ], [ 1, %442 ], [ %258, %370 ], [ %258, %305 ], [ %258, %329 ]
  %451 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %19, align 8
  %452 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 30
  %453 = load %struct.x509_store_ctx_st*, %struct.x509_store_ctx_st** %452, align 8
  %454 = icmp eq %struct.x509_store_ctx_st* %453, null
  br i1 %454, label %455, label %464

455:                                              ; preds = %448
  %456 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %5, align 8
  %457 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %456, i64 0, i32 3
  %458 = load i64, i64* %457, align 8
  %459 = lshr i64 %458, 6
  %460 = trunc i64 %459 to i32
  %461 = and i32 %460, 1
  %462 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %456, i64 0, i32 4
  %463 = load i32, i32* %462, align 8
  br label %464

464:                                              ; preds = %455, %448
  %465 = phi i32 [ %463, %455 ], [ 6, %448 ]
  %466 = phi i32 [ %461, %455 ], [ 0, %448 ]
  %467 = load i32, i32* %34, align 4
  %468 = icmp sgt i32 %467, 0
  br i1 %468, label %469, label %586

469:                                              ; preds = %464
  %470 = icmp eq i32 %466, 0
  br label %471

471:                                              ; preds = %579, %469
  %472 = phi i64 [ 0, %469 ], [ %582, %579 ]
  %473 = phi i32 [ 0, %469 ], [ %581, %579 ]
  %474 = phi i32 [ 0, %469 ], [ %580, %579 ]
  %475 = phi i32 [ 0, %469 ], [ %563, %579 ]
  %476 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %477 = call i8* @sk_value(%struct.stack_st* %476, i64 %472) #10
  %478 = bitcast i8* %477 to %struct.x509_st*
  %479 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %5, align 8
  %480 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %479, i64 0, i32 3
  %481 = load i64, i64* %480, align 8
  %482 = and i64 %481, 16
  %483 = icmp eq i64 %482, 0
  br i1 %483, label %484, label %494

484:                                              ; preds = %471
  %485 = getelementptr inbounds i8, i8* %477, i64 56
  %486 = bitcast i8* %485 to i64*
  %487 = load i64, i64* %486, align 8
  %488 = and i64 %487, 512
  %489 = icmp eq i64 %488, 0
  br i1 %489, label %494, label %490

490:                                              ; preds = %484
  store i32 34, i32* %188, align 8
  %491 = trunc i64 %472 to i32
  store i32 %491, i32* %191, align 4
  store i8* %477, i8** %190, align 8
  %492 = call i32 %451(i32 0, %struct.x509_store_ctx_st* %0) #10
  %493 = icmp eq i32 %492, 0
  br i1 %493, label %812, label %494

494:                                              ; preds = %490, %484, %471
  br i1 %470, label %495, label %505

495:                                              ; preds = %494
  %496 = getelementptr inbounds i8, i8* %477, i64 56
  %497 = bitcast i8* %496 to i64*
  %498 = load i64, i64* %497, align 8
  %499 = and i64 %498, 1024
  %500 = icmp eq i64 %499, 0
  br i1 %500, label %505, label %501

501:                                              ; preds = %495
  store i32 40, i32* %188, align 8
  %502 = trunc i64 %472 to i32
  store i32 %502, i32* %191, align 4
  store i8* %477, i8** %190, align 8
  %503 = call i32 %451(i32 0, %struct.x509_store_ctx_st* %0) #10
  %504 = icmp eq i32 %503, 0
  br i1 %504, label %812, label %505

505:                                              ; preds = %501, %495, %494
  switch i32 %473, label %514 [
    i32 0, label %518
    i32 2, label %506
    i32 1, label %509
  ]

506:                                              ; preds = %505
  %507 = call i32 @X509_check_ca(%struct.x509_st* %478) #10
  %508 = icmp eq i32 %507, 0
  br i1 %508, label %518, label %512

509:                                              ; preds = %505
  %510 = call i32 @X509_check_ca(%struct.x509_st* %478) #10
  %511 = icmp eq i32 %510, 0
  br i1 %511, label %512, label %518

512:                                              ; preds = %509, %506
  %513 = phi i32 [ 37, %506 ], [ 24, %509 ]
  store i32 %513, i32* %188, align 8
  br label %514

514:                                              ; preds = %512, %505
  %515 = trunc i64 %472 to i32
  store i32 %515, i32* %191, align 4
  store i8* %477, i8** %190, align 8
  %516 = call i32 %451(i32 0, %struct.x509_store_ctx_st* %0) #10
  %517 = icmp eq i32 %516, 0
  br i1 %517, label %812, label %518

518:                                              ; preds = %514, %509, %506, %505
  %519 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %5, align 8
  %520 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %519, i64 0, i32 4
  %521 = load i32, i32* %520, align 8
  %522 = icmp sgt i32 %521, 0
  br i1 %522, label %523, label %532

523:                                              ; preds = %518
  %524 = icmp eq i32 %473, 1
  %525 = zext i1 %524 to i32
  %526 = call i32 @X509_check_purpose(%struct.x509_st* %478, i32 %465, i32 %525) #10
  %527 = icmp eq i32 %526, 1
  br i1 %527, label %532, label %528

528:                                              ; preds = %523
  store i32 26, i32* %188, align 8
  %529 = trunc i64 %472 to i32
  store i32 %529, i32* %191, align 4
  store i8* %477, i8** %190, align 8
  %530 = call i32 %451(i32 0, %struct.x509_store_ctx_st* %0) #10
  %531 = icmp eq i32 %530, 0
  br i1 %531, label %812, label %532

532:                                              ; preds = %528, %523, %518
  %533 = icmp ugt i64 %472, 1
  br i1 %533, label %534, label %555

534:                                              ; preds = %532
  %535 = getelementptr inbounds i8, i8* %477, i64 56
  %536 = bitcast i8* %535 to i64*
  %537 = load i64, i64* %536, align 8
  %538 = and i64 %537, 32
  %539 = icmp eq i64 %538, 0
  br i1 %539, label %540, label %555

540:                                              ; preds = %534
  %541 = getelementptr inbounds i8, i8* %477, i64 40
  %542 = bitcast i8* %541 to i64*
  %543 = load i64, i64* %542, align 8
  %544 = icmp eq i64 %543, -1
  br i1 %544, label %555, label %545

545:                                              ; preds = %540
  %546 = zext i32 %475 to i64
  %547 = sext i32 %474 to i64
  %548 = add nsw i64 %547, 1
  %549 = add i64 %548, %543
  %550 = icmp slt i64 %549, %546
  br i1 %550, label %551, label %555

551:                                              ; preds = %545
  store i32 25, i32* %188, align 8
  %552 = trunc i64 %472 to i32
  store i32 %552, i32* %191, align 4
  store i8* %477, i8** %190, align 8
  %553 = call i32 %451(i32 0, %struct.x509_store_ctx_st* %0) #10
  %554 = icmp eq i32 %553, 0
  br i1 %554, label %812, label %555

555:                                              ; preds = %532, %551, %545, %540, %534
  %556 = getelementptr inbounds i8, i8* %477, i64 56
  %557 = bitcast i8* %556 to i64*
  %558 = load i64, i64* %557, align 8
  %559 = lshr i64 %558, 5
  %560 = trunc i64 %559 to i32
  %561 = and i32 %560, 1
  %562 = xor i32 %561, 1
  %563 = add nuw nsw i32 %562, %475
  %564 = and i64 %558, 1024
  %565 = icmp eq i64 %564, 0
  br i1 %565, label %579, label %566

566:                                              ; preds = %555
  %567 = getelementptr inbounds i8, i8* %477, i64 48
  %568 = bitcast i8* %567 to i64*
  %569 = load i64, i64* %568, align 8
  %570 = icmp ne i64 %569, -1
  %571 = icmp slt i64 %569, %472
  %572 = and i1 %570, %571
  br i1 %572, label %573, label %577

573:                                              ; preds = %566
  store i32 38, i32* %188, align 8
  %574 = trunc i64 %472 to i32
  store i32 %574, i32* %191, align 4
  store i8* %477, i8** %190, align 8
  %575 = call i32 %451(i32 0, %struct.x509_store_ctx_st* %0) #10
  %576 = icmp eq i32 %575, 0
  br i1 %576, label %812, label %577

577:                                              ; preds = %573, %566
  %578 = add nsw i32 %474, 1
  br label %579

579:                                              ; preds = %577, %555
  %580 = phi i32 [ %578, %577 ], [ %474, %555 ]
  %581 = phi i32 [ 2, %577 ], [ 1, %555 ]
  %582 = add nuw nsw i64 %472, 1
  %583 = load i32, i32* %34, align 4
  %584 = sext i32 %583 to i64
  %585 = icmp slt i64 %582, %584
  br i1 %585, label %471, label %586

586:                                              ; preds = %579, %464
  %587 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %5, align 8
  %588 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %587, i64 0, i32 8
  %589 = load %struct.X509_VERIFY_PARAM_ID_st*, %struct.X509_VERIFY_PARAM_ID_st** %588, align 8
  %590 = load %struct.x509_st*, %struct.x509_st** %7, align 8
  %591 = getelementptr inbounds %struct.X509_VERIFY_PARAM_ID_st, %struct.X509_VERIFY_PARAM_ID_st* %589, i64 0, i32 7
  %592 = load i8, i8* %591, align 8
  %593 = icmp eq i8 %592, 0
  br i1 %593, label %600, label %594

594:                                              ; preds = %586
  %595 = ptrtoint %struct.x509_st* %590 to i64
  store i32 65, i32* %188, align 8
  %596 = bitcast %struct.x509_st** %189 to i64*
  store i64 %595, i64* %596, align 8
  store i32 0, i32* %191, align 4
  %597 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %19, align 8
  %598 = call i32 %597(i32 0, %struct.x509_store_ctx_st* %0) #10
  %599 = icmp eq i32 %598, 0
  br i1 %599, label %812, label %600

600:                                              ; preds = %594, %586
  %601 = getelementptr inbounds %struct.X509_VERIFY_PARAM_ID_st, %struct.X509_VERIFY_PARAM_ID_st* %589, i64 0, i32 0
  %602 = load %struct.stack_st_OPENSSL_STRING*, %struct.stack_st_OPENSSL_STRING** %601, align 8
  %603 = icmp eq %struct.stack_st_OPENSSL_STRING* %602, null
  br i1 %603, label %634, label %604

604:                                              ; preds = %600
  %605 = bitcast %struct.stack_st_OPENSSL_STRING* %602 to %struct.stack_st*
  %606 = bitcast %struct.X509_VERIFY_PARAM_ID_st* %589 to %struct.stack_st**
  %607 = call i64 @sk_num(%struct.stack_st* nonnull %605) #10
  %608 = getelementptr inbounds %struct.X509_VERIFY_PARAM_ID_st, %struct.X509_VERIFY_PARAM_ID_st* %589, i64 0, i32 2
  %609 = load i8*, i8** %608, align 8
  %610 = icmp eq i8* %609, null
  br i1 %610, label %612, label %611

611:                                              ; preds = %604
  call void @OPENSSL_free(i8* nonnull %609) #10
  store i8* null, i8** %608, align 8
  br label %612

612:                                              ; preds = %611, %604
  %613 = icmp eq i64 %607, 0
  br i1 %613, label %634, label %614

614:                                              ; preds = %612
  %615 = getelementptr inbounds %struct.X509_VERIFY_PARAM_ID_st, %struct.X509_VERIFY_PARAM_ID_st* %589, i64 0, i32 1
  br label %618

616:                                              ; preds = %618
  %617 = icmp eq i64 %626, %607
  br i1 %617, label %627, label %618

618:                                              ; preds = %616, %614
  %619 = phi i64 [ 0, %614 ], [ %626, %616 ]
  %620 = load %struct.stack_st*, %struct.stack_st** %606, align 8
  %621 = call i8* @sk_value(%struct.stack_st* %620, i64 %619) #10
  %622 = call i64 @strlen(i8* %621) #11
  %623 = load i32, i32* %615, align 8
  %624 = call i32 @X509_check_host(%struct.x509_st* %590, i8* %621, i64 %622, i32 %623, i8** %608) #10
  %625 = icmp sgt i32 %624, 0
  %626 = add nuw i64 %619, 1
  br i1 %625, label %634, label %616

627:                                              ; preds = %616
  store i32 62, i32* %188, align 8
  %628 = bitcast %struct.x509_st** %7 to i64*
  %629 = load i64, i64* %628, align 8
  %630 = bitcast %struct.x509_st** %189 to i64*
  store i64 %629, i64* %630, align 8
  store i32 0, i32* %191, align 4
  %631 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %19, align 8
  %632 = call i32 %631(i32 0, %struct.x509_store_ctx_st* %0) #10
  %633 = icmp eq i32 %632, 0
  br i1 %633, label %812, label %634

634:                                              ; preds = %618, %627, %612, %600
  %635 = getelementptr inbounds %struct.X509_VERIFY_PARAM_ID_st, %struct.X509_VERIFY_PARAM_ID_st* %589, i64 0, i32 3
  %636 = load i8*, i8** %635, align 8
  %637 = icmp eq i8* %636, null
  br i1 %637, label %650, label %638

638:                                              ; preds = %634
  %639 = getelementptr inbounds %struct.X509_VERIFY_PARAM_ID_st, %struct.X509_VERIFY_PARAM_ID_st* %589, i64 0, i32 4
  %640 = load i64, i64* %639, align 8
  %641 = call i32 @X509_check_email(%struct.x509_st* %590, i8* nonnull %636, i64 %640, i32 0) #10
  %642 = icmp slt i32 %641, 1
  br i1 %642, label %643, label %650

643:                                              ; preds = %638
  store i32 63, i32* %188, align 8
  %644 = bitcast %struct.x509_st** %7 to i64*
  %645 = load i64, i64* %644, align 8
  %646 = bitcast %struct.x509_st** %189 to i64*
  store i64 %645, i64* %646, align 8
  store i32 0, i32* %191, align 4
  %647 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %19, align 8
  %648 = call i32 %647(i32 0, %struct.x509_store_ctx_st* %0) #10
  %649 = icmp eq i32 %648, 0
  br i1 %649, label %812, label %650

650:                                              ; preds = %643, %638, %634
  %651 = getelementptr inbounds %struct.X509_VERIFY_PARAM_ID_st, %struct.X509_VERIFY_PARAM_ID_st* %589, i64 0, i32 5
  %652 = load i8*, i8** %651, align 8
  %653 = icmp eq i8* %652, null
  br i1 %653, label %666, label %654

654:                                              ; preds = %650
  %655 = getelementptr inbounds %struct.X509_VERIFY_PARAM_ID_st, %struct.X509_VERIFY_PARAM_ID_st* %589, i64 0, i32 6
  %656 = load i64, i64* %655, align 8
  %657 = call i32 @X509_check_ip(%struct.x509_st* %590, i8* nonnull %652, i64 %656, i32 0) #10
  %658 = icmp slt i32 %657, 1
  br i1 %658, label %659, label %666

659:                                              ; preds = %654
  store i32 64, i32* %188, align 8
  %660 = bitcast %struct.x509_st** %7 to i64*
  %661 = load i64, i64* %660, align 8
  %662 = bitcast %struct.x509_st** %189 to i64*
  store i64 %661, i64* %662, align 8
  store i32 0, i32* %191, align 4
  %663 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %19, align 8
  %664 = call i32 %663(i32 0, %struct.x509_store_ctx_st* %0) #10
  %665 = icmp eq i32 %664, 0
  br i1 %665, label %812, label %666

666:                                              ; preds = %659, %654, %650
  %667 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 10
  %668 = bitcast {}** %667 to i32 (%struct.x509_store_ctx_st*)**
  %669 = load i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*)** %668, align 8
  %670 = call i32 %669(%struct.x509_store_ctx_st* %0) #10
  %671 = icmp eq i32 %670, 0
  br i1 %671, label %812, label %672

672:                                              ; preds = %666
  %673 = load %struct.stack_st_X509*, %struct.stack_st_X509** %13, align 8
  %674 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %5, align 8
  %675 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %674, i64 0, i32 3
  %676 = load i64, i64* %675, align 8
  %677 = call i32 @X509_chain_check_suiteb(i32* %191, %struct.x509_st* null, %struct.stack_st_X509* %673, i64 %676) #10
  %678 = icmp eq i32 %677, 0
  br i1 %678, label %686, label %679

679:                                              ; preds = %672
  store i32 %677, i32* %188, align 8
  %680 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %681 = load i32, i32* %191, align 4
  %682 = sext i32 %681 to i64
  %683 = call i8* @sk_value(%struct.stack_st* %680, i64 %682) #10
  store i8* %683, i8** %190, align 8
  %684 = call i32 %20(i32 0, %struct.x509_store_ctx_st* %0) #10
  %685 = icmp eq i32 %684, 0
  br i1 %685, label %812, label %686

686:                                              ; preds = %679, %672
  %687 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 6
  %688 = bitcast {}** %687 to i32 (%struct.x509_store_ctx_st*)**
  %689 = load i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*)** %688, align 8
  %690 = icmp eq i32 (%struct.x509_store_ctx_st*)* %689, null
  br i1 %690, label %693, label %691

691:                                              ; preds = %686
  %692 = call i32 %689(%struct.x509_store_ctx_st* %0) #10
  br label %695

693:                                              ; preds = %686
  %694 = call i32 @internal_verify(%struct.x509_store_ctx_st* %0)
  br label %695

695:                                              ; preds = %693, %691
  %696 = phi i32 [ %692, %691 ], [ %694, %693 ]
  %697 = icmp eq i32 %696, 0
  br i1 %697, label %812, label %698

698:                                              ; preds = %695
  %699 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %700 = call i64 @sk_num(%struct.stack_st* %699) #10
  %701 = trunc i64 %700 to i32
  %702 = add i32 %701, -1
  %703 = icmp sgt i32 %702, -1
  %704 = load %struct.stack_st_X509*, %struct.stack_st_X509** %13, align 8
  br i1 %703, label %708, label %705

705:                                              ; preds = %698
  %706 = bitcast %struct.stack_st_X509* %704 to %struct.stack_st*
  %707 = call i8* @sk_value(%struct.stack_st* %706, i64 0) #10
  br label %799

708:                                              ; preds = %698
  %709 = sext i32 %702 to i64
  br label %710

710:                                              ; preds = %757, %708
  %711 = phi i64 [ %709, %708 ], [ %762, %757 ]
  %712 = phi %struct.stack_st_X509* [ %704, %708 ], [ %761, %757 ]
  %713 = phi i32 [ %702, %708 ], [ %759, %757 ]
  %714 = phi i32 [ 0, %708 ], [ %758, %757 ]
  %715 = bitcast %struct.stack_st_X509* %712 to %struct.stack_st*
  %716 = call i8* @sk_value(%struct.stack_st* %715, i64 %711) #10
  %717 = bitcast i8* %716 to %struct.x509_st*
  %718 = icmp eq i64 %711, 0
  br i1 %718, label %725, label %719

719:                                              ; preds = %710
  %720 = getelementptr inbounds i8, i8* %716, i64 56
  %721 = bitcast i8* %720 to i64*
  %722 = load i64, i64* %721, align 8
  %723 = and i64 %722, 32
  %724 = icmp eq i64 %723, 0
  br i1 %724, label %725, label %757

725:                                              ; preds = %719, %710
  %726 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %727 = call i64 @sk_num(%struct.stack_st* %726) #10
  %728 = trunc i64 %727 to i32
  %729 = add i32 %728, -1
  %730 = sext i32 %729 to i64
  %731 = icmp slt i64 %711, %730
  br i1 %731, label %732, label %757

732:                                              ; preds = %725
  %733 = trunc i64 %711 to i32
  br label %734

734:                                              ; preds = %751, %732
  %735 = phi i64 [ %730, %732 ], [ %756, %751 ]
  %736 = phi i32 [ %729, %732 ], [ %753, %751 ]
  %737 = phi i32 [ %714, %732 ], [ %752, %751 ]
  %738 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %739 = call i8* @sk_value(%struct.stack_st* %738, i64 %735) #10
  %740 = getelementptr inbounds i8, i8* %739, i64 128
  %741 = bitcast i8* %740 to %struct.NAME_CONSTRAINTS_st**
  %742 = load %struct.NAME_CONSTRAINTS_st*, %struct.NAME_CONSTRAINTS_st** %741, align 8
  %743 = icmp eq %struct.NAME_CONSTRAINTS_st* %742, null
  br i1 %743, label %751, label %744

744:                                              ; preds = %734
  %745 = call i32 @NAME_CONSTRAINTS_check(%struct.x509_st* %717, %struct.NAME_CONSTRAINTS_st* nonnull %742) #10
  switch i32 %745, label %747 [
    i32 0, label %751
    i32 17, label %746
  ]

746:                                              ; preds = %744
  store i32 17, i32* %188, align 8
  br label %812

747:                                              ; preds = %744
  store i32 %745, i32* %188, align 8
  store i32 %733, i32* %191, align 4
  store i8* %716, i8** %190, align 8
  %748 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %19, align 8
  %749 = call i32 %748(i32 0, %struct.x509_store_ctx_st* %0) #10
  %750 = icmp eq i32 %749, 0
  br i1 %750, label %812, label %751

751:                                              ; preds = %747, %744, %734
  %752 = phi i32 [ 1, %744 ], [ 1, %747 ], [ %737, %734 ]
  %753 = add i32 %736, -1
  %754 = sext i32 %753 to i64
  %755 = icmp slt i64 %711, %754
  %756 = add nsw i64 %735, -1
  br i1 %755, label %734, label %757

757:                                              ; preds = %751, %725, %719
  %758 = phi i32 [ %714, %719 ], [ %714, %725 ], [ %752, %751 ]
  %759 = add i32 %713, -1
  %760 = icmp sgt i32 %759, -1
  %761 = load %struct.stack_st_X509*, %struct.stack_st_X509** %13, align 8
  %762 = add nsw i64 %711, -1
  br i1 %760, label %710, label %763

763:                                              ; preds = %757
  %764 = bitcast %struct.stack_st_X509* %761 to %struct.stack_st*
  %765 = call i8* @sk_value(%struct.stack_st* %764, i64 0) #10
  %766 = bitcast i8* %765 to %struct.x509_st*
  %767 = icmp eq i32 %758, 0
  br i1 %767, label %799, label %768

768:                                              ; preds = %763
  %769 = getelementptr inbounds i8, i8* %765, i64 120
  %770 = bitcast i8* %769 to %struct.stack_st_GENERAL_NAME**
  %771 = load %struct.stack_st_GENERAL_NAME*, %struct.stack_st_GENERAL_NAME** %770, align 8
  %772 = icmp eq %struct.stack_st_GENERAL_NAME* %771, null
  br i1 %772, label %773, label %799

773:                                              ; preds = %768
  %774 = call %struct.X509_name_st* @X509_get_subject_name(%struct.x509_st* %766) #10
  %775 = call i32 @X509_NAME_get_index_by_NID(%struct.X509_name_st* %774, i32 13, i32 -1) #10
  %776 = icmp eq i32 %775, -1
  br i1 %776, label %799, label %777

777:                                              ; preds = %773
  %778 = bitcast i8** %2 to i8*
  br label %779

779:                                              ; preds = %791, %777
  %780 = phi i32 [ %775, %777 ], [ %792, %791 ]
  %781 = call %struct.X509_name_entry_st* @X509_NAME_get_entry(%struct.X509_name_st* %774, i32 %780) #10
  %782 = call %struct.asn1_string_st* @X509_NAME_ENTRY_get_data(%struct.X509_name_entry_st* %781) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %778) #10
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %2, align 8
  %783 = call i32 @ASN1_STRING_to_UTF8(i8** nonnull %2, %struct.asn1_string_st* %782) #10
  %784 = icmp slt i32 %783, 0
  br i1 %784, label %794, label %785

785:                                              ; preds = %779
  %786 = load i8*, i8** %2, align 8
  %787 = sext i32 %783 to i64
  %788 = call i32 @x509v3_looks_like_dns_name(i8* %786, i64 %787) #10
  %789 = load i8*, i8** %2, align 8
  call void @OPENSSL_free(i8* %789) #10
  %790 = icmp eq i32 %788, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %778) #10
  br i1 %790, label %791, label %795

791:                                              ; preds = %785
  %792 = call i32 @X509_NAME_get_index_by_NID(%struct.X509_name_st* %774, i32 13, i32 %780) #10
  %793 = icmp eq i32 %792, -1
  br i1 %793, label %799, label %779

794:                                              ; preds = %779
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %778) #10
  store i32 17, i32* %188, align 8
  br label %812

795:                                              ; preds = %785
  store i32 67, i32* %188, align 8
  store i32 %759, i32* %191, align 4
  store i8* %765, i8** %190, align 8
  %796 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %19, align 8
  %797 = call i32 %796(i32 0, %struct.x509_store_ctx_st* %0) #10
  %798 = icmp eq i32 %797, 0
  br i1 %798, label %812, label %799

799:                                              ; preds = %791, %705, %763, %768, %773, %795
  %800 = icmp eq i32 %450, 0
  br i1 %800, label %801, label %812

801:                                              ; preds = %799
  %802 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %5, align 8
  %803 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %802, i64 0, i32 3
  %804 = load i64, i64* %803, align 8
  %805 = trunc i64 %804 to i8
  %806 = icmp slt i8 %805, 0
  br i1 %806, label %807, label %812

807:                                              ; preds = %801
  %808 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 14
  %809 = bitcast {}** %808 to i32 (%struct.x509_store_ctx_st*)**
  %810 = load i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*)** %809, align 8
  %811 = call i32 %810(%struct.x509_store_ctx_st* %0) #10
  br label %812

812:                                              ; preds = %232, %314, %386, %490, %501, %514, %528, %551, %573, %747, %799, %746, %795, %794, %659, %643, %627, %594, %194, %269, %291, %282, %116, %161, %133, %89, %679, %695, %666, %442, %801, %807
  %813 = phi %struct.x509_st* [ null, %89 ], [ %449, %799 ], [ %449, %807 ], [ %449, %801 ], [ %449, %695 ], [ %449, %679 ], [ %449, %666 ], [ %443, %442 ], [ null, %133 ], [ null, %161 ], [ null, %116 ], [ %195, %194 ], [ %257, %269 ], [ %257, %291 ], [ %257, %282 ], [ %449, %594 ], [ %449, %627 ], [ %449, %643 ], [ %449, %659 ], [ %449, %794 ], [ %449, %795 ], [ %449, %746 ], [ %449, %747 ], [ %449, %573 ], [ %449, %551 ], [ %449, %528 ], [ %449, %514 ], [ %449, %501 ], [ %449, %490 ], [ %257, %386 ], [ %257, %314 ], [ %207, %232 ]
  %814 = phi i32 [ 0, %89 ], [ 1, %799 ], [ %811, %807 ], [ 1, %801 ], [ 0, %695 ], [ 0, %679 ], [ 0, %666 ], [ 0, %442 ], [ %131, %133 ], [ 0, %161 ], [ 0, %116 ], [ %196, %194 ], [ %270, %269 ], [ 0, %291 ], [ %280, %282 ], [ 0, %594 ], [ 0, %627 ], [ 0, %643 ], [ 0, %659 ], [ 0, %794 ], [ 0, %795 ], [ 0, %746 ], [ 0, %747 ], [ 0, %573 ], [ 0, %551 ], [ 0, %528 ], [ 0, %514 ], [ 0, %501 ], [ 0, %490 ], [ %392, %386 ], [ 0, %314 ], [ 0, %232 ]
  %815 = phi %struct.stack_st_X509* [ %64, %89 ], [ %92, %799 ], [ %92, %807 ], [ %92, %801 ], [ %92, %695 ], [ %92, %679 ], [ %92, %666 ], [ %92, %442 ], [ %92, %133 ], [ %92, %161 ], [ %92, %116 ], [ %92, %194 ], [ %92, %269 ], [ %92, %291 ], [ %92, %282 ], [ %92, %594 ], [ %92, %627 ], [ %92, %643 ], [ %92, %659 ], [ %92, %794 ], [ %92, %795 ], [ %92, %746 ], [ %92, %747 ], [ %92, %573 ], [ %92, %551 ], [ %92, %528 ], [ %92, %514 ], [ %92, %501 ], [ %92, %490 ], [ %92, %386 ], [ %92, %314 ], [ %92, %232 ]
  %816 = icmp eq %struct.stack_st_X509* %815, null
  br i1 %816, label %819, label %817

817:                                              ; preds = %812
  %818 = bitcast %struct.stack_st_X509* %815 to %struct.stack_st*
  call void @sk_free(%struct.stack_st* nonnull %818) #10
  br label %819

819:                                              ; preds = %812, %817
  %820 = icmp eq %struct.x509_st* %813, null
  br i1 %820, label %822, label %821

821:                                              ; preds = %819
  call void @X509_free(%struct.x509_st* nonnull %813) #10
  br label %822

822:                                              ; preds = %819, %821
  %823 = icmp slt i32 %814, 1
  br i1 %823, label %824, label %830

824:                                              ; preds = %822
  %825 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  %826 = load i32, i32* %825, align 8
  %827 = icmp eq i32 %826, 0
  br i1 %827, label %828, label %830

828:                                              ; preds = %824
  %829 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 1, i32* %829, align 8
  br label %830

830:                                              ; preds = %60, %43, %29, %822, %824, %828, %16, %10
  %831 = phi i32 [ -1, %10 ], [ -1, %16 ], [ %814, %828 ], [ %814, %824 ], [ %814, %822 ], [ 0, %29 ], [ 0, %43 ], [ 0, %60 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #10
  ret i32 %831
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #2

declare i32 @X509_up_ref(%struct.x509_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @X509_free(%struct.x509_st*) #2

declare i32 @X509_cmp(%struct.x509_st*, %struct.x509_st*) local_unnamed_addr #2

declare i32 @X509_chain_check_suiteb(i32*, %struct.x509_st*, %struct.stack_st_X509*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @internal_verify(%struct.x509_store_ctx_st*) #0 {
  %2 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %3 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %2, align 8
  %4 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 20
  %5 = bitcast %struct.stack_st_X509** %4 to %struct.stack_st**
  %6 = load %struct.stack_st*, %struct.stack_st** %5, align 8
  %7 = tail call i64 @sk_num(%struct.stack_st* %6) #10
  %8 = trunc i64 %7 to i32
  %9 = add nsw i32 %8, -1
  %10 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 23
  store i32 %9, i32* %10, align 4
  %11 = load %struct.stack_st*, %struct.stack_st** %5, align 8
  %12 = sext i32 %9 to i64
  %13 = tail call i8* @sk_value(%struct.stack_st* %11, i64 %12) #10
  %14 = bitcast i8* %13 to %struct.x509_st*
  %15 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 9
  %16 = load i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)** %15, align 8
  %17 = tail call i32 %16(%struct.x509_store_ctx_st* %0, %struct.x509_st* %14, %struct.x509_st* %14) #10
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %39

19:                                               ; preds = %1
  %20 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %21 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %20, align 8
  %22 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %21, i64 0, i32 3
  %23 = load i64, i64* %22, align 8
  %24 = and i64 %23, 524288
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %26, label %75

26:                                               ; preds = %19
  %27 = icmp slt i32 %8, 2
  br i1 %27, label %28, label %33

28:                                               ; preds = %26
  %29 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 21, i32* %29, align 8
  %30 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 25
  %31 = bitcast %struct.x509_st** %30 to i8**
  store i8* %13, i8** %31, align 8
  %32 = tail call i32 %3(i32 0, %struct.x509_store_ctx_st* %0) #10
  br label %133

33:                                               ; preds = %26
  %34 = add nsw i32 %8, -2
  store i32 %34, i32* %10, align 4
  %35 = load %struct.stack_st*, %struct.stack_st** %5, align 8
  %36 = sext i32 %34 to i64
  %37 = tail call i8* @sk_value(%struct.stack_st* %35, i64 %36) #10
  %38 = bitcast i8* %37 to %struct.x509_st*
  br label %39

39:                                               ; preds = %125, %128, %33, %1
  %40 = phi i32 [ %34, %33 ], [ %9, %1 ], [ %126, %128 ], [ %126, %125 ]
  %41 = phi %struct.x509_st* [ %38, %33 ], [ %14, %1 ], [ %132, %128 ], [ %79, %125 ]
  %42 = phi %struct.x509_st* [ %14, %33 ], [ %14, %1 ], [ %79, %128 ], [ %80, %125 ]
  %43 = icmp sgt i32 %40, -1
  br i1 %43, label %44, label %133

44:                                               ; preds = %39
  store i32 %40, i32* %10, align 4
  %45 = icmp eq %struct.x509_st* %41, %42
  br i1 %45, label %46, label %53

46:                                               ; preds = %44
  %47 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %48 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %47, align 8
  %49 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %48, i64 0, i32 3
  %50 = load i64, i64* %49, align 8
  %51 = and i64 %50, 16384
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %75, label %53

53:                                               ; preds = %46, %44
  %54 = tail call %struct.evp_pkey_st* @X509_get_pubkey(%struct.x509_st* %42) #10
  %55 = icmp eq %struct.evp_pkey_st* %54, null
  br i1 %55, label %56, label %61

56:                                               ; preds = %53
  %57 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 6, i32* %57, align 8
  %58 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 25
  store %struct.x509_st* %42, %struct.x509_st** %58, align 8
  %59 = tail call i32 %3(i32 0, %struct.x509_store_ctx_st* %0) #10
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %133, label %70

61:                                               ; preds = %53
  %62 = tail call i32 @X509_verify(%struct.x509_st* %41, %struct.evp_pkey_st* nonnull %54) #10
  %63 = icmp slt i32 %62, 1
  br i1 %63, label %64, label %70

64:                                               ; preds = %61
  %65 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 7, i32* %65, align 8
  %66 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 25
  store %struct.x509_st* %41, %struct.x509_st** %66, align 8
  %67 = tail call i32 %3(i32 0, %struct.x509_store_ctx_st* %0) #10
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %64
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* nonnull %54) #10
  br label %133

70:                                               ; preds = %56, %64, %61
  tail call void @EVP_PKEY_free(%struct.evp_pkey_st* %54) #10
  %71 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %72 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %71, align 8
  %73 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %72, i64 0, i32 3
  %74 = load i64, i64* %73, align 8
  br label %75

75:                                               ; preds = %19, %46, %70
  %76 = phi i64 [ %74, %70 ], [ %50, %46 ], [ %23, %19 ]
  %77 = phi %struct.X509_VERIFY_PARAM_st* [ %72, %70 ], [ %48, %46 ], [ %21, %19 ]
  %78 = phi i32 [ %40, %70 ], [ %40, %46 ], [ %9, %19 ]
  %79 = phi %struct.x509_st* [ %41, %70 ], [ %41, %46 ], [ %14, %19 ]
  %80 = phi %struct.x509_st* [ %42, %70 ], [ %41, %46 ], [ %14, %19 ]
  %81 = and i64 %76, 2
  %82 = icmp eq i64 %81, 0
  %83 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %77, i64 0, i32 1
  %84 = select i1 %82, i64* null, i64* %83
  %85 = tail call %struct.asn1_string_st* @X509_get_notBefore(%struct.x509_st* %79) #10
  %86 = tail call i32 @X509_cmp_time(%struct.asn1_string_st* %85, i64* %84) #10
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %94

88:                                               ; preds = %75
  %89 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 13, i32* %89, align 8
  %90 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 25
  store %struct.x509_st* %79, %struct.x509_st** %90, align 8
  %91 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %2, align 8
  %92 = tail call i32 %91(i32 0, %struct.x509_store_ctx_st* %0) #10
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %133, label %102

94:                                               ; preds = %75
  %95 = icmp sgt i32 %86, 0
  br i1 %95, label %96, label %102

96:                                               ; preds = %94
  %97 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 9, i32* %97, align 8
  %98 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 25
  store %struct.x509_st* %79, %struct.x509_st** %98, align 8
  %99 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %2, align 8
  %100 = tail call i32 %99(i32 0, %struct.x509_store_ctx_st* %0) #10
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %133, label %102

102:                                              ; preds = %96, %94, %88
  %103 = tail call %struct.asn1_string_st* @X509_get_notAfter(%struct.x509_st* %79) #10
  %104 = tail call i32 @X509_cmp_time(%struct.asn1_string_st* %103, i64* %84) #10
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %112

106:                                              ; preds = %102
  %107 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 14, i32* %107, align 8
  %108 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 25
  store %struct.x509_st* %79, %struct.x509_st** %108, align 8
  %109 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %2, align 8
  %110 = tail call i32 %109(i32 0, %struct.x509_store_ctx_st* %0) #10
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %133, label %120

112:                                              ; preds = %102
  %113 = icmp slt i32 %104, 0
  br i1 %113, label %114, label %120

114:                                              ; preds = %112
  %115 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 10, i32* %115, align 8
  %116 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 25
  store %struct.x509_st* %79, %struct.x509_st** %116, align 8
  %117 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %2, align 8
  %118 = tail call i32 %117(i32 0, %struct.x509_store_ctx_st* %0) #10
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %133, label %120

120:                                              ; preds = %114, %112, %106
  %121 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 26
  store %struct.x509_st* %80, %struct.x509_st** %121, align 8
  %122 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 25
  store %struct.x509_st* %79, %struct.x509_st** %122, align 8
  %123 = tail call i32 %3(i32 1, %struct.x509_store_ctx_st* %0) #10
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %133, label %125

125:                                              ; preds = %120
  %126 = add nsw i32 %78, -1
  %127 = icmp sgt i32 %78, 0
  br i1 %127, label %128, label %39

128:                                              ; preds = %125
  %129 = load %struct.stack_st*, %struct.stack_st** %5, align 8
  %130 = sext i32 %126 to i64
  %131 = tail call i8* @sk_value(%struct.stack_st* %129, i64 %130) #10
  %132 = bitcast i8* %131 to %struct.x509_st*
  br label %39

133:                                              ; preds = %114, %106, %96, %88, %39, %56, %120, %69, %28
  %134 = phi i32 [ 0, %120 ], [ 0, %56 ], [ 0, %69 ], [ %32, %28 ], [ 1, %39 ], [ 0, %88 ], [ 0, %96 ], [ 0, %106 ], [ 0, %114 ]
  ret i32 %134
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_cmp_current_time(%struct.asn1_string_st*) local_unnamed_addr #0 {
  %2 = tail call i32 @X509_cmp_time(%struct.asn1_string_st* %0, i64* null)
  ret i32 %2
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_cmp_time(%struct.asn1_string_st*, i64* readonly) local_unnamed_addr #0 {
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #10
  store i32 -1431655766, i32* %4, align 4
  %7 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #10
  store i32 -1431655766, i32* %5, align 4
  %8 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  switch i32 %9, label %63 [
    i32 23, label %10
    i32 24, label %14
  ]

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 13
  br i1 %13, label %18, label %63

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 15
  br i1 %17, label %18, label %63

18:                                               ; preds = %14, %10
  %19 = phi i64 [ 12, %10 ], [ 14, %14 ]
  %20 = tail call i16** @__ctype_b_loc() #12
  %21 = load i16*, i16** %20, align 8
  %22 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %23 = load i8*, i8** %22, align 8
  br label %26

24:                                               ; preds = %26
  %25 = icmp ult i64 %35, %19
  br i1 %25, label %26, label %36

26:                                               ; preds = %18, %24
  %27 = phi i64 [ 0, %18 ], [ %35, %24 ]
  %28 = getelementptr inbounds i8, i8* %23, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i64
  %31 = getelementptr inbounds i16, i16* %21, i64 %30
  %32 = load i16, i16* %31, align 2
  %33 = and i16 %32, 2048
  %34 = icmp eq i16 %33, 0
  %35 = add nuw nsw i64 %27, 1
  br i1 %34, label %63, label %24

36:                                               ; preds = %24
  %37 = getelementptr inbounds i8, i8* %23, i64 %19
  %38 = load i8, i8* %37, align 1
  %39 = icmp eq i8 %38, 90
  br i1 %39, label %40, label %63

40:                                               ; preds = %36
  %41 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #10
  store i64 0, i64* %3, align 8
  %42 = icmp eq i64* %1, null
  br i1 %42, label %45, label %43

43:                                               ; preds = %40
  %44 = load i64, i64* %1, align 8
  store i64 %44, i64* %3, align 8
  br label %48

45:                                               ; preds = %40
  %46 = call i64 @time(i64* nonnull %3) #10
  %47 = load i64, i64* %3, align 8
  br label %48

48:                                               ; preds = %43, %45
  %49 = phi i64 [ %44, %43 ], [ %47, %45 ]
  %50 = call %struct.asn1_string_st* @ASN1_TIME_adj(%struct.asn1_string_st* null, i64 %49, i32 0, i64 0) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #10
  %51 = icmp eq %struct.asn1_string_st* %50, null
  br i1 %51, label %61, label %52

52:                                               ; preds = %48
  %53 = call i32 @ASN1_TIME_diff(i32* nonnull %4, i32* nonnull %5, %struct.asn1_string_st* %0, %struct.asn1_string_st* nonnull %50) #10
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %61, label %55

55:                                               ; preds = %52
  %56 = load i32, i32* %4, align 4
  %57 = load i32, i32* %5, align 4
  %58 = or i32 %57, %56
  %59 = icmp sgt i32 %58, -1
  %60 = select i1 %59, i32 -1, i32 1
  br label %61

61:                                               ; preds = %52, %48, %55
  %62 = phi i32 [ 0, %48 ], [ %60, %55 ], [ 0, %52 ]
  call void @ASN1_TIME_free(%struct.asn1_string_st* %50) #10
  br label %63

63:                                               ; preds = %26, %36, %2, %14, %10, %61
  %64 = phi i32 [ %62, %61 ], [ 0, %10 ], [ 0, %14 ], [ 0, %2 ], [ 0, %36 ], [ 0, %26 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #10
  ret i32 %64
}

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %struct.asn1_string_st* @X509_time_adj(%struct.asn1_string_st*, i64, i64* readonly) local_unnamed_addr #0 {
  %4 = tail call %struct.asn1_string_st* @X509_time_adj_ex(%struct.asn1_string_st* %0, i32 0, i64 %1, i64* %2)
  ret %struct.asn1_string_st* %4
}

declare i32 @ASN1_TIME_diff(i32*, i32*, %struct.asn1_string_st*, %struct.asn1_string_st*) local_unnamed_addr #2

declare void @ASN1_TIME_free(%struct.asn1_string_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.asn1_string_st* @X509_gmtime_adj(%struct.asn1_string_st*, i64) local_unnamed_addr #0 {
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #10
  store i64 0, i64* %3, align 8
  %5 = call i64 @time(i64* nonnull %3) #10
  %6 = icmp eq %struct.asn1_string_st* %0, null
  br i1 %6, label %21, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = and i64 %9, 64
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %21

12:                                               ; preds = %7
  %13 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  switch i32 %14, label %21 [
    i32 23, label %15
    i32 24, label %18
  ]

15:                                               ; preds = %12
  %16 = load i64, i64* %3, align 8
  %17 = call %struct.asn1_string_st* @ASN1_UTCTIME_adj(%struct.asn1_string_st* nonnull %0, i64 %16, i32 0, i64 %1) #10
  br label %24

18:                                               ; preds = %12
  %19 = load i64, i64* %3, align 8
  %20 = call %struct.asn1_string_st* @ASN1_GENERALIZEDTIME_adj(%struct.asn1_string_st* nonnull %0, i64 %19, i32 0, i64 %1) #10
  br label %24

21:                                               ; preds = %12, %7, %2
  %22 = load i64, i64* %3, align 8
  %23 = call %struct.asn1_string_st* @ASN1_TIME_adj(%struct.asn1_string_st* %0, i64 %22, i32 0, i64 %1) #10
  br label %24

24:                                               ; preds = %15, %18, %21
  %25 = phi %struct.asn1_string_st* [ %23, %21 ], [ %17, %15 ], [ %20, %18 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #10
  ret %struct.asn1_string_st* %25
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.asn1_string_st* @X509_time_adj_ex(%struct.asn1_string_st*, i32, i64, i64* readonly) local_unnamed_addr #0 {
  %5 = alloca i64, align 8
  %6 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  store i64 0, i64* %5, align 8
  %7 = icmp eq i64* %3, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %4
  %9 = load i64, i64* %3, align 8
  store i64 %9, i64* %5, align 8
  br label %12

10:                                               ; preds = %4
  %11 = call i64 @time(i64* nonnull %5) #10
  br label %12

12:                                               ; preds = %10, %8
  %13 = icmp eq %struct.asn1_string_st* %0, null
  br i1 %13, label %28, label %14

14:                                               ; preds = %12
  %15 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 3
  %16 = load i64, i64* %15, align 8
  %17 = and i64 %16, 64
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %28

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  switch i32 %21, label %28 [
    i32 23, label %22
    i32 24, label %25
  ]

22:                                               ; preds = %19
  %23 = load i64, i64* %5, align 8
  %24 = call %struct.asn1_string_st* @ASN1_UTCTIME_adj(%struct.asn1_string_st* nonnull %0, i64 %23, i32 %1, i64 %2) #10
  br label %31

25:                                               ; preds = %19
  %26 = load i64, i64* %5, align 8
  %27 = call %struct.asn1_string_st* @ASN1_GENERALIZEDTIME_adj(%struct.asn1_string_st* nonnull %0, i64 %26, i32 %1, i64 %2) #10
  br label %31

28:                                               ; preds = %19, %14, %12
  %29 = load i64, i64* %5, align 8
  %30 = call %struct.asn1_string_st* @ASN1_TIME_adj(%struct.asn1_string_st* %0, i64 %29, i32 %1, i64 %2) #10
  br label %31

31:                                               ; preds = %28, %25, %22
  %32 = phi %struct.asn1_string_st* [ %30, %28 ], [ %24, %22 ], [ %27, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  ret %struct.asn1_string_st* %32
}

; Function Attrs: nounwind
declare i64 @time(i64*) local_unnamed_addr #4

declare %struct.asn1_string_st* @ASN1_UTCTIME_adj(%struct.asn1_string_st*, i64, i32, i64) local_unnamed_addr #2

declare %struct.asn1_string_st* @ASN1_GENERALIZEDTIME_adj(%struct.asn1_string_st*, i64, i32, i64) local_unnamed_addr #2

declare %struct.asn1_string_st* @ASN1_TIME_adj(%struct.asn1_string_st*, i64, i32, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.X509_crl_st* @X509_CRL_diff(%struct.X509_crl_st*, %struct.X509_crl_st*, %struct.evp_pkey_st*, %struct.env_md_st*, i32) local_unnamed_addr #0 {
  %6 = alloca %struct.x509_revoked_st*, align 8
  %7 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %0, i64 0, i32 10
  %8 = load %struct.asn1_string_st*, %struct.asn1_string_st** %7, align 8
  %9 = icmp eq %struct.asn1_string_st* %8, null
  br i1 %9, label %10, label %14

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %1, i64 0, i32 10
  %12 = load %struct.asn1_string_st*, %struct.asn1_string_st** %11, align 8
  %13 = icmp eq %struct.asn1_string_st* %12, null
  br i1 %13, label %15, label %14

14:                                               ; preds = %10, %5
  tail call void @ERR_put_error(i32 11, i32 0, i32 106, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 2020) #10
  br label %124

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %0, i64 0, i32 9
  %17 = load %struct.asn1_string_st*, %struct.asn1_string_st** %16, align 8
  %18 = icmp eq %struct.asn1_string_st* %17, null
  br i1 %18, label %23, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %1, i64 0, i32 9
  %21 = load %struct.asn1_string_st*, %struct.asn1_string_st** %20, align 8
  %22 = icmp eq %struct.asn1_string_st* %21, null
  br i1 %22, label %23, label %24

23:                                               ; preds = %19, %15
  tail call void @ERR_put_error(i32 11, i32 0, i32 124, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 2025) #10
  br label %124

24:                                               ; preds = %19
  %25 = tail call %struct.X509_name_st* @X509_CRL_get_issuer(%struct.X509_crl_st* %0) #10
  %26 = tail call %struct.X509_name_st* @X509_CRL_get_issuer(%struct.X509_crl_st* %1) #10
  %27 = tail call i32 @X509_NAME_cmp(%struct.X509_name_st* %25, %struct.X509_name_st* %26) #10
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %30, label %29

29:                                               ; preds = %24
  tail call void @ERR_put_error(i32 11, i32 0, i32 114, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 2030) #10
  br label %124

30:                                               ; preds = %24
  %31 = tail call fastcc i32 @crl_extension_match(%struct.X509_crl_st* %0, %struct.X509_crl_st* %1, i32 90)
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %30
  tail call void @ERR_put_error(i32 11, i32 0, i32 100, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 2035) #10
  br label %124

34:                                               ; preds = %30
  %35 = tail call fastcc i32 @crl_extension_match(%struct.X509_crl_st* %0, %struct.X509_crl_st* %1, i32 770)
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %34
  tail call void @ERR_put_error(i32 11, i32 0, i32 108, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 2039) #10
  br label %124

38:                                               ; preds = %34
  %39 = load %struct.asn1_string_st*, %struct.asn1_string_st** %20, align 8
  %40 = load %struct.asn1_string_st*, %struct.asn1_string_st** %16, align 8
  %41 = tail call i32 @ASN1_INTEGER_cmp(%struct.asn1_string_st* %39, %struct.asn1_string_st* %40) #10
  %42 = icmp slt i32 %41, 1
  br i1 %42, label %43, label %44

43:                                               ; preds = %38
  tail call void @ERR_put_error(i32 11, i32 0, i32 119, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 2044) #10
  br label %124

44:                                               ; preds = %38
  %45 = icmp ne %struct.evp_pkey_st* %2, null
  br i1 %45, label %46, label %53

46:                                               ; preds = %44
  %47 = tail call i32 @X509_CRL_verify(%struct.X509_crl_st* %0, %struct.evp_pkey_st* nonnull %2) #10
  %48 = icmp slt i32 %47, 1
  br i1 %48, label %52, label %49

49:                                               ; preds = %46
  %50 = tail call i32 @X509_CRL_verify(%struct.X509_crl_st* %1, %struct.evp_pkey_st* nonnull %2) #10
  %51 = icmp slt i32 %50, 1
  br i1 %51, label %52, label %53

52:                                               ; preds = %49, %46
  tail call void @ERR_put_error(i32 11, i32 0, i32 107, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 2050) #10
  br label %124

53:                                               ; preds = %49, %44
  %54 = tail call %struct.X509_crl_st* @X509_CRL_new() #10
  %55 = icmp eq %struct.X509_crl_st* %54, null
  br i1 %55, label %123, label %56

56:                                               ; preds = %53
  %57 = tail call i32 @X509_CRL_set_version(%struct.X509_crl_st* nonnull %54, i64 1) #10
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %122, label %59

59:                                               ; preds = %56
  %60 = tail call %struct.X509_name_st* @X509_CRL_get_issuer(%struct.X509_crl_st* %1) #10
  %61 = tail call i32 @X509_CRL_set_issuer_name(%struct.X509_crl_st* nonnull %54, %struct.X509_name_st* %60) #10
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %122, label %63

63:                                               ; preds = %59
  %64 = tail call %struct.asn1_string_st* @X509_CRL_get0_lastUpdate(%struct.X509_crl_st* %1) #10
  %65 = tail call i32 @X509_CRL_set1_lastUpdate(%struct.X509_crl_st* nonnull %54, %struct.asn1_string_st* %64) #10
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %122, label %67

67:                                               ; preds = %63
  %68 = tail call %struct.asn1_string_st* @X509_CRL_get0_nextUpdate(%struct.X509_crl_st* %1) #10
  %69 = tail call i32 @X509_CRL_set1_nextUpdate(%struct.X509_crl_st* nonnull %54, %struct.asn1_string_st* %68) #10
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %122, label %71

71:                                               ; preds = %67
  %72 = bitcast %struct.asn1_string_st** %16 to i8**
  %73 = load i8*, i8** %72, align 8
  %74 = tail call i32 @X509_CRL_add1_ext_i2d(%struct.X509_crl_st* nonnull %54, i32 140, i8* %73, i32 1, i64 0) #10
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %122, label %76

76:                                               ; preds = %71
  %77 = tail call i32 @X509_CRL_get_ext_count(%struct.X509_crl_st* %1) #10
  %78 = icmp sgt i32 %77, 0
  br i1 %78, label %82, label %88

79:                                               ; preds = %82
  %80 = tail call i32 @X509_CRL_get_ext_count(%struct.X509_crl_st* %1) #10
  %81 = icmp slt i32 %87, %80
  br i1 %81, label %82, label %88

82:                                               ; preds = %76, %79
  %83 = phi i32 [ %87, %79 ], [ 0, %76 ]
  %84 = tail call %struct.X509_extension_st* @X509_CRL_get_ext(%struct.X509_crl_st* %1, i32 %83) #10
  %85 = tail call i32 @X509_CRL_add_ext(%struct.X509_crl_st* nonnull %54, %struct.X509_extension_st* %84, i32 -1) #10
  %86 = icmp eq i32 %85, 0
  %87 = add nuw nsw i32 %83, 1
  br i1 %86, label %122, label %79

88:                                               ; preds = %79, %76
  %89 = tail call %struct.stack_st_X509_REVOKED* @X509_CRL_get_REVOKED(%struct.X509_crl_st* %1) #10
  %90 = bitcast %struct.stack_st_X509_REVOKED* %89 to %struct.stack_st*
  %91 = call i64 @sk_num(%struct.stack_st* %90) #10
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %116, label %93

93:                                               ; preds = %88
  %94 = bitcast %struct.x509_revoked_st** %6 to i8*
  br label %95

95:                                               ; preds = %93, %112
  %96 = phi i64 [ 0, %93 ], [ %113, %112 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %94) #10
  store %struct.x509_revoked_st* inttoptr (i64 -6148914691236517206 to %struct.x509_revoked_st*), %struct.x509_revoked_st** %6, align 8
  %97 = call i8* @sk_value(%struct.stack_st* %90, i64 %96) #10
  %98 = bitcast i8* %97 to %struct.asn1_string_st**
  %99 = load %struct.asn1_string_st*, %struct.asn1_string_st** %98, align 8
  %100 = call i32 @X509_CRL_get0_by_serial(%struct.X509_crl_st* %0, %struct.x509_revoked_st** nonnull %6, %struct.asn1_string_st* %99) #10
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %112

102:                                              ; preds = %95
  %103 = bitcast i8* %97 to %struct.x509_revoked_st*
  %104 = call %struct.x509_revoked_st* @X509_REVOKED_dup(%struct.x509_revoked_st* %103) #10
  store %struct.x509_revoked_st* %104, %struct.x509_revoked_st** %6, align 8
  %105 = icmp eq %struct.x509_revoked_st* %104, null
  br i1 %105, label %111, label %106

106:                                              ; preds = %102
  %107 = call i32 @X509_CRL_add0_revoked(%struct.X509_crl_st* nonnull %54, %struct.x509_revoked_st* nonnull %104) #10
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %112

109:                                              ; preds = %106
  %110 = load %struct.x509_revoked_st*, %struct.x509_revoked_st** %6, align 8
  call void @X509_REVOKED_free(%struct.x509_revoked_st* %110) #10
  br label %111

111:                                              ; preds = %102, %109
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #10
  br label %122

112:                                              ; preds = %106, %95
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #10
  %113 = add nuw i64 %96, 1
  %114 = call i64 @sk_num(%struct.stack_st* %90) #10
  %115 = icmp ult i64 %113, %114
  br i1 %115, label %95, label %116

116:                                              ; preds = %112, %88
  %117 = icmp ne %struct.env_md_st* %3, null
  %118 = and i1 %45, %117
  br i1 %118, label %119, label %124

119:                                              ; preds = %116
  %120 = call i32 @X509_CRL_sign(%struct.X509_crl_st* nonnull %54, %struct.evp_pkey_st* nonnull %2, %struct.env_md_st* nonnull %3) #10
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %124

122:                                              ; preds = %82, %56, %59, %63, %67, %71, %119, %111
  call void @ERR_put_error(i32 11, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 2112) #10
  call void @X509_CRL_free(%struct.X509_crl_st* nonnull %54) #10
  br label %124

123:                                              ; preds = %53
  tail call void @ERR_put_error(i32 11, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 2112) #10
  br label %124

124:                                              ; preds = %122, %123, %116, %119, %52, %43, %37, %33, %29, %23, %14
  %125 = phi %struct.X509_crl_st* [ null, %14 ], [ null, %29 ], [ null, %43 ], [ null, %52 ], [ null, %37 ], [ null, %33 ], [ null, %23 ], [ %54, %119 ], [ %54, %116 ], [ null, %123 ], [ null, %122 ]
  ret %struct.X509_crl_st* %125
}

declare i32 @X509_NAME_cmp(%struct.X509_name_st*, %struct.X509_name_st*) local_unnamed_addr #2

declare %struct.X509_name_st* @X509_CRL_get_issuer(%struct.X509_crl_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @crl_extension_match(%struct.X509_crl_st*, %struct.X509_crl_st*, i32) unnamed_addr #0 {
  %4 = tail call i32 @X509_CRL_get_ext_by_NID(%struct.X509_crl_st* %0, i32 %2, i32 -1) #10
  %5 = icmp sgt i32 %4, -1
  br i1 %5, label %6, label %12

6:                                                ; preds = %3
  %7 = tail call i32 @X509_CRL_get_ext_by_NID(%struct.X509_crl_st* %0, i32 %2, i32 %4) #10
  %8 = icmp eq i32 %7, -1
  br i1 %8, label %9, label %33

9:                                                ; preds = %6
  %10 = tail call %struct.X509_extension_st* @X509_CRL_get_ext(%struct.X509_crl_st* %0, i32 %4) #10
  %11 = tail call %struct.asn1_string_st* @X509_EXTENSION_get_data(%struct.X509_extension_st* %10) #10
  br label %12

12:                                               ; preds = %3, %9
  %13 = phi %struct.asn1_string_st* [ %11, %9 ], [ null, %3 ]
  %14 = tail call i32 @X509_CRL_get_ext_by_NID(%struct.X509_crl_st* %1, i32 %2, i32 -1) #10
  %15 = icmp sgt i32 %14, -1
  br i1 %15, label %16, label %22

16:                                               ; preds = %12
  %17 = tail call i32 @X509_CRL_get_ext_by_NID(%struct.X509_crl_st* %1, i32 %2, i32 %14) #10
  %18 = icmp eq i32 %17, -1
  br i1 %18, label %19, label %33

19:                                               ; preds = %16
  %20 = tail call %struct.X509_extension_st* @X509_CRL_get_ext(%struct.X509_crl_st* %1, i32 %14) #10
  %21 = tail call %struct.asn1_string_st* @X509_EXTENSION_get_data(%struct.X509_extension_st* %20) #10
  br label %22

22:                                               ; preds = %12, %19
  %23 = phi %struct.asn1_string_st* [ %21, %19 ], [ null, %12 ]
  %24 = icmp ne %struct.asn1_string_st* %13, null
  %25 = icmp ne %struct.asn1_string_st* %23, null
  %26 = or i1 %24, %25
  br i1 %26, label %27, label %33

27:                                               ; preds = %22
  %28 = and i1 %24, %25
  br i1 %28, label %29, label %33

29:                                               ; preds = %27
  %30 = tail call i32 @ASN1_OCTET_STRING_cmp(%struct.asn1_string_st* nonnull %13, %struct.asn1_string_st* nonnull %23) #10
  %31 = icmp eq i32 %30, 0
  %32 = zext i1 %31 to i32
  br label %33

33:                                               ; preds = %29, %27, %22, %16, %6
  %34 = phi i32 [ 0, %6 ], [ 0, %16 ], [ 1, %22 ], [ 0, %27 ], [ %32, %29 ]
  ret i32 %34
}

declare i32 @ASN1_INTEGER_cmp(%struct.asn1_string_st*, %struct.asn1_string_st*) local_unnamed_addr #2

declare i32 @X509_CRL_verify(%struct.X509_crl_st*, %struct.evp_pkey_st*) local_unnamed_addr #2

declare %struct.X509_crl_st* @X509_CRL_new() local_unnamed_addr #2

declare i32 @X509_CRL_set_version(%struct.X509_crl_st*, i64) local_unnamed_addr #2

declare i32 @X509_CRL_set_issuer_name(%struct.X509_crl_st*, %struct.X509_name_st*) local_unnamed_addr #2

declare i32 @X509_CRL_set1_lastUpdate(%struct.X509_crl_st*, %struct.asn1_string_st*) local_unnamed_addr #2

declare %struct.asn1_string_st* @X509_CRL_get0_lastUpdate(%struct.X509_crl_st*) local_unnamed_addr #2

declare i32 @X509_CRL_set1_nextUpdate(%struct.X509_crl_st*, %struct.asn1_string_st*) local_unnamed_addr #2

declare %struct.asn1_string_st* @X509_CRL_get0_nextUpdate(%struct.X509_crl_st*) local_unnamed_addr #2

declare i32 @X509_CRL_add1_ext_i2d(%struct.X509_crl_st*, i32, i8*, i32, i64) local_unnamed_addr #2

declare i32 @X509_CRL_get_ext_count(%struct.X509_crl_st*) local_unnamed_addr #2

declare %struct.X509_extension_st* @X509_CRL_get_ext(%struct.X509_crl_st*, i32) local_unnamed_addr #2

declare i32 @X509_CRL_add_ext(%struct.X509_crl_st*, %struct.X509_extension_st*, i32) local_unnamed_addr #2

declare %struct.stack_st_X509_REVOKED* @X509_CRL_get_REVOKED(%struct.X509_crl_st*) local_unnamed_addr #2

declare i32 @X509_CRL_get0_by_serial(%struct.X509_crl_st*, %struct.x509_revoked_st**, %struct.asn1_string_st*) local_unnamed_addr #2

declare %struct.x509_revoked_st* @X509_REVOKED_dup(%struct.x509_revoked_st*) local_unnamed_addr #2

declare i32 @X509_CRL_add0_revoked(%struct.X509_crl_st*, %struct.x509_revoked_st*) local_unnamed_addr #2

declare void @X509_REVOKED_free(%struct.x509_revoked_st*) local_unnamed_addr #2

declare i32 @X509_CRL_sign(%struct.X509_crl_st*, %struct.evp_pkey_st*, %struct.env_md_st*) local_unnamed_addr #2

declare void @X509_CRL_free(%struct.X509_crl_st*) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_STORE_CTX_get_ex_new_index(i64, i8*, i32* nocapture readnone, i32 (%struct.crypto_ex_data_st*, %struct.crypto_ex_data_st*, i8**, i32, i64, i8*)* nocapture readnone, void (i8*, i8*, %struct.crypto_ex_data_st*, i32, i64, i8*)*) local_unnamed_addr #0 {
  %6 = alloca i32, align 4
  %7 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #10
  store i32 -1431655766, i32* %6, align 4
  %8 = call i32 @CRYPTO_get_ex_new_index(%struct.CRYPTO_EX_DATA_CLASS* nonnull @g_ex_data_class, i32* nonnull %6, i64 %0, i8* %1, void (i8*, i8*, %struct.crypto_ex_data_st*, i32, i64, i8*)* %4) #10
  %9 = icmp eq i32 %8, 0
  %10 = load i32, i32* %6, align 4
  %11 = select i1 %9, i32 -1, i32 %10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #10
  ret i32 %11
}

declare i32 @CRYPTO_get_ex_new_index(%struct.CRYPTO_EX_DATA_CLASS*, i32*, i64, i8*, void (i8*, i8*, %struct.crypto_ex_data_st*, i32, i64, i8*)*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_STORE_CTX_set_ex_data(%struct.x509_store_ctx_st*, i32, i8*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 31
  %5 = tail call i32 @CRYPTO_set_ex_data(%struct.crypto_ex_data_st* %4, i32 %1, i8* %2) #10
  ret i32 %5
}

declare i32 @CRYPTO_set_ex_data(%struct.crypto_ex_data_st*, i32, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i8* @X509_STORE_CTX_get_ex_data(%struct.x509_store_ctx_st*, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 31
  %4 = tail call i8* @CRYPTO_get_ex_data(%struct.crypto_ex_data_st* %3, i32 %1) #10
  ret i8* %4
}

declare i8* @CRYPTO_get_ex_data(%struct.crypto_ex_data_st*, i32) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @X509_STORE_CTX_get_error(%struct.x509_store_ctx_st* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @X509_STORE_CTX_set_error(%struct.x509_store_ctx_st* nocapture, i32) local_unnamed_addr #6 {
  %3 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 %1, i32* %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @X509_STORE_CTX_get_error_depth(%struct.x509_store_ctx_st* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 23
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.x509_st* @X509_STORE_CTX_get_current_cert(%struct.x509_store_ctx_st* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 25
  %3 = load %struct.x509_st*, %struct.x509_st** %2, align 8
  ret %struct.x509_st* %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.stack_st_X509* @X509_STORE_CTX_get_chain(%struct.x509_store_ctx_st* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 20
  %3 = load %struct.stack_st_X509*, %struct.stack_st_X509** %2, align 8
  ret %struct.stack_st_X509* %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.stack_st_X509* @X509_STORE_CTX_get0_chain(%struct.x509_store_ctx_st* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 20
  %3 = load %struct.stack_st_X509*, %struct.stack_st_X509** %2, align 8
  ret %struct.stack_st_X509* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.stack_st_X509* @X509_STORE_CTX_get1_chain(%struct.x509_store_ctx_st* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 20
  %3 = load %struct.stack_st_X509*, %struct.stack_st_X509** %2, align 8
  %4 = icmp eq %struct.stack_st_X509* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = tail call %struct.stack_st_X509* @X509_chain_up_ref(%struct.stack_st_X509* nonnull %3) #10
  br label %7

7:                                                ; preds = %1, %5
  %8 = phi %struct.stack_st_X509* [ %6, %5 ], [ null, %1 ]
  ret %struct.stack_st_X509* %8
}

declare %struct.stack_st_X509* @X509_chain_up_ref(%struct.stack_st_X509*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.x509_st* @X509_STORE_CTX_get0_current_issuer(%struct.x509_store_ctx_st* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 26
  %3 = load %struct.x509_st*, %struct.x509_st** %2, align 8
  ret %struct.x509_st* %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.X509_crl_st* @X509_STORE_CTX_get0_current_crl(%struct.x509_store_ctx_st* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 27
  %3 = load %struct.X509_crl_st*, %struct.X509_crl_st** %2, align 8
  ret %struct.X509_crl_st* %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.x509_store_ctx_st* @X509_STORE_CTX_get0_parent_ctx(%struct.x509_store_ctx_st* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 30
  %3 = load %struct.x509_store_ctx_st*, %struct.x509_store_ctx_st** %2, align 8
  ret %struct.x509_store_ctx_st* %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @X509_STORE_CTX_set_cert(%struct.x509_store_ctx_st* nocapture, %struct.x509_st*) local_unnamed_addr #6 {
  %3 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 1
  store %struct.x509_st* %1, %struct.x509_st** %3, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @X509_STORE_CTX_set_chain(%struct.x509_store_ctx_st* nocapture, %struct.stack_st_X509*) local_unnamed_addr #6 {
  %3 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 2
  store %struct.stack_st_X509* %1, %struct.stack_st_X509** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.stack_st_X509* @X509_STORE_CTX_get0_untrusted(%struct.x509_store_ctx_st* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 2
  %3 = load %struct.stack_st_X509*, %struct.stack_st_X509** %2, align 8
  ret %struct.stack_st_X509* %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @X509_STORE_CTX_set0_crls(%struct.x509_store_ctx_st* nocapture, %struct.stack_st_X509_CRL*) local_unnamed_addr #6 {
  %3 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 3
  store %struct.stack_st_X509_CRL* %1, %struct.stack_st_X509_CRL** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_STORE_CTX_set_purpose(%struct.x509_store_ctx_st* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = tail call i32 @X509_STORE_CTX_purpose_inherit(%struct.x509_store_ctx_st* %0, i32 0, i32 %1, i32 0)
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_STORE_CTX_purpose_inherit(%struct.x509_store_ctx_st* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 {
  %5 = icmp eq i32 %2, 0
  %6 = select i1 %5, i32 %1, i32 %2
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %29

8:                                                ; preds = %4
  %9 = tail call i32 @X509_PURPOSE_get_by_id(i32 %6) #10
  %10 = icmp eq i32 %9, -1
  br i1 %10, label %11, label %12

11:                                               ; preds = %8
  tail call void @ERR_put_error(i32 11, i32 0, i32 130, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 2250) #10
  br label %55

12:                                               ; preds = %8
  %13 = tail call %struct.x509_purpose_st* @X509_PURPOSE_get0(i32 %9) #10
  %14 = getelementptr inbounds %struct.x509_purpose_st, %struct.x509_purpose_st* %13, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, -1
  br i1 %16, label %17, label %23

17:                                               ; preds = %12
  %18 = tail call i32 @X509_PURPOSE_get_by_id(i32 %1) #10
  %19 = icmp eq i32 %18, -1
  br i1 %19, label %20, label %21

20:                                               ; preds = %17
  tail call void @ERR_put_error(i32 11, i32 0, i32 130, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 2257) #10
  br label %55

21:                                               ; preds = %17
  %22 = tail call %struct.x509_purpose_st* @X509_PURPOSE_get0(i32 %18) #10
  br label %23

23:                                               ; preds = %21, %12
  %24 = phi %struct.x509_purpose_st* [ %22, %21 ], [ %13, %12 ]
  %25 = icmp eq i32 %3, 0
  br i1 %25, label %26, label %32

26:                                               ; preds = %23
  %27 = getelementptr inbounds %struct.x509_purpose_st, %struct.x509_purpose_st* %24, i64 0, i32 1
  %28 = load i32, i32* %27, align 4
  br label %29

29:                                               ; preds = %26, %4
  %30 = phi i32 [ %3, %4 ], [ %28, %26 ]
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %37, label %32

32:                                               ; preds = %29, %23
  %33 = phi i32 [ %30, %29 ], [ %3, %23 ]
  %34 = tail call i32 @X509_TRUST_get_by_id(i32 %33) #10
  %35 = icmp eq i32 %34, -1
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  tail call void @ERR_put_error(i32 11, i32 0, i32 131, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 2269) #10
  br label %55

37:                                               ; preds = %29, %32
  %38 = phi i1 [ true, %32 ], [ false, %29 ]
  %39 = phi i32 [ %33, %32 ], [ 0, %29 ]
  br i1 %7, label %40, label %47

40:                                               ; preds = %37
  %41 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %42 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %41, align 8
  %43 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %42, i64 0, i32 4
  %44 = load i32, i32* %43, align 8
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %40
  store i32 %6, i32* %43, align 8
  br label %47

47:                                               ; preds = %40, %46, %37
  br i1 %38, label %48, label %55

48:                                               ; preds = %47
  %49 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %50 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %49, align 8
  %51 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %50, i64 0, i32 5
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %48
  store i32 %39, i32* %51, align 4
  br label %55

55:                                               ; preds = %11, %20, %47, %54, %48, %36
  %56 = phi i32 [ 0, %36 ], [ 1, %48 ], [ 1, %54 ], [ 1, %47 ], [ 0, %20 ], [ 0, %11 ]
  ret i32 %56
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_STORE_CTX_set_trust(%struct.x509_store_ctx_st* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = tail call i32 @X509_STORE_CTX_purpose_inherit(%struct.x509_store_ctx_st* %0, i32 0, i32 0, i32 %1)
  ret i32 %3
}

declare i32 @X509_PURPOSE_get_by_id(i32) local_unnamed_addr #2

declare %struct.x509_purpose_st* @X509_PURPOSE_get0(i32) local_unnamed_addr #2

declare i32 @X509_TRUST_get_by_id(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.x509_store_ctx_st* @X509_STORE_CTX_new() local_unnamed_addr #0 {
  %1 = tail call i8* @OPENSSL_malloc(i64 232) #10
  %2 = icmp eq i8* %1, null
  br i1 %2, label %3, label %4

3:                                                ; preds = %0
  tail call void @ERR_put_error(i32 11, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 2286) #10
  br label %6

4:                                                ; preds = %0
  %5 = bitcast i8* %1 to %struct.x509_store_ctx_st*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %1, i8 0, i64 232, i1 false) #10
  br label %6

6:                                                ; preds = %4, %3
  %7 = phi %struct.x509_store_ctx_st* [ %5, %4 ], [ null, %3 ]
  ret %struct.x509_store_ctx_st* %7
}

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @X509_STORE_CTX_zero(%struct.x509_store_ctx_st* nocapture) local_unnamed_addr #0 {
  %2 = bitcast %struct.x509_store_ctx_st* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 0, i64 232, i1 false) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @X509_STORE_CTX_free(%struct.x509_store_ctx_st*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.x509_store_ctx_st* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  tail call void @X509_STORE_CTX_cleanup(%struct.x509_store_ctx_st* nonnull %0)
  %4 = bitcast %struct.x509_store_ctx_st* %0 to i8*
  tail call void @OPENSSL_free(i8* nonnull %4) #10
  br label %5

5:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @X509_STORE_CTX_cleanup(%struct.x509_store_ctx_st*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 17
  %3 = bitcast {}** %2 to i32 (%struct.x509_store_ctx_st*)**
  %4 = load i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*)** %3, align 8
  %5 = icmp eq i32 (%struct.x509_store_ctx_st*)* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = tail call i32 %4(%struct.x509_store_ctx_st* %0) #10
  store i32 (%struct.x509_store_ctx_st*)* null, i32 (%struct.x509_store_ctx_st*)** %3, align 8
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %10 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %9, align 8
  %11 = icmp eq %struct.X509_VERIFY_PARAM_st* %10, null
  br i1 %11, label %18, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 30
  %14 = load %struct.x509_store_ctx_st*, %struct.x509_store_ctx_st** %13, align 8
  %15 = icmp eq %struct.x509_store_ctx_st* %14, null
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @X509_VERIFY_PARAM_free(%struct.X509_VERIFY_PARAM_st* nonnull %10) #10
  br label %17

17:                                               ; preds = %16, %12
  store %struct.X509_VERIFY_PARAM_st* null, %struct.X509_VERIFY_PARAM_st** %9, align 8
  br label %18

18:                                               ; preds = %8, %17
  %19 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 21
  %20 = load %struct.X509_POLICY_TREE_st*, %struct.X509_POLICY_TREE_st** %19, align 8
  %21 = icmp eq %struct.X509_POLICY_TREE_st* %20, null
  br i1 %21, label %23, label %22

22:                                               ; preds = %18
  tail call void @X509_policy_tree_free(%struct.X509_POLICY_TREE_st* nonnull %20) #10
  store %struct.X509_POLICY_TREE_st* null, %struct.X509_POLICY_TREE_st** %19, align 8
  br label %23

23:                                               ; preds = %18, %22
  %24 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 20
  %25 = load %struct.stack_st_X509*, %struct.stack_st_X509** %24, align 8
  %26 = icmp eq %struct.stack_st_X509* %25, null
  br i1 %26, label %29, label %27

27:                                               ; preds = %23
  %28 = bitcast %struct.stack_st_X509* %25 to %struct.stack_st*
  tail call void @sk_pop_free_ex(%struct.stack_st* nonnull %28, void (void (i8*)*, i8*)* nonnull @sk_X509_call_free_func, void (i8*)* bitcast (void (%struct.x509_st*)* @X509_free to void (i8*)*)) #10
  store %struct.stack_st_X509* null, %struct.stack_st_X509** %24, align 8
  br label %29

29:                                               ; preds = %23, %27
  %30 = bitcast %struct.x509_store_ctx_st* %0 to i8*
  %31 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 31
  tail call void @CRYPTO_free_ex_data(%struct.CRYPTO_EX_DATA_CLASS* nonnull @g_ex_data_class, i8* %30, %struct.crypto_ex_data_st* %31) #10
  %32 = bitcast %struct.crypto_ex_data_st* %31 to i64*
  store i64 0, i64* %32, align 1
  ret void
}

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_STORE_CTX_init(%struct.x509_store_ctx_st*, %struct.x509_store_st*, %struct.x509_st*, %struct.stack_st_X509*) local_unnamed_addr #0 {
  %5 = bitcast %struct.x509_store_ctx_st* %0 to i8*
  %6 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 3
  %7 = bitcast %struct.stack_st_X509_CRL** %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 0, i64 208, i1 false) #10
  %8 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 0
  store %struct.x509_store_st* %1, %struct.x509_store_st** %8, align 8
  %9 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 1
  store %struct.x509_st* %2, %struct.x509_st** %9, align 8
  %10 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 2
  store %struct.stack_st_X509* %3, %struct.stack_st_X509** %10, align 8
  %11 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 31
  tail call void @CRYPTO_new_ex_data(%struct.crypto_ex_data_st* %11) #10
  %12 = icmp eq %struct.x509_store_st* %1, null
  br i1 %12, label %13, label %14

13:                                               ; preds = %4
  tail call void @ERR_put_error(i32 11, i32 0, i32 67, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 2318) #10
  br label %93

14:                                               ; preds = %4
  %15 = tail call %struct.X509_VERIFY_PARAM_st* @X509_VERIFY_PARAM_new() #10
  %16 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  store %struct.X509_VERIFY_PARAM_st* %15, %struct.X509_VERIFY_PARAM_st** %16, align 8
  %17 = icmp eq %struct.X509_VERIFY_PARAM_st* %15, null
  br i1 %17, label %93, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %1, i64 0, i32 7
  %20 = bitcast i32 (i32, %struct.x509_store_ctx_st*)** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %23 = bitcast i32 (i32, %struct.x509_store_ctx_st*)** %22 to i64*
  store i64 %21, i64* %23, align 8
  %24 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %1, i64 0, i32 16
  %25 = bitcast {}** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 17
  %28 = bitcast {}** %27 to i64*
  store i64 %26, i64* %28, align 8
  %29 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %1, i64 0, i32 5
  %30 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %29, align 8
  %31 = tail call i32 @X509_VERIFY_PARAM_inherit(%struct.X509_VERIFY_PARAM_st* nonnull %15, %struct.X509_VERIFY_PARAM_st* %30) #10
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %93, label %33

33:                                               ; preds = %18
  %34 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %16, align 8
  %35 = tail call %struct.X509_VERIFY_PARAM_st* @X509_VERIFY_PARAM_lookup(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0)) #10
  %36 = tail call i32 @X509_VERIFY_PARAM_inherit(%struct.X509_VERIFY_PARAM_st* %34, %struct.X509_VERIFY_PARAM_st* %35) #10
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %93, label %38

38:                                               ; preds = %33
  %39 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %1, i64 0, i32 9
  %40 = load i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)** %39, align 8
  %41 = icmp eq i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)* %40, null
  %42 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 9
  %43 = select i1 %41, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)* @check_issued, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)* %40
  store i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)* %43, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)** %42, align 8
  %44 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %1, i64 0, i32 8
  %45 = load i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)** %44, align 8
  %46 = icmp eq i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)* %45, null
  %47 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 8
  %48 = select i1 %46, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)* @X509_STORE_CTX_get1_issuer, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)* %45
  store i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)* %48, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)** %47, align 8
  %49 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %19, align 8
  %50 = icmp eq i32 (i32, %struct.x509_store_ctx_st*)* %49, null
  %51 = select i1 %50, i32 (i32, %struct.x509_store_ctx_st*)* @null_callback, i32 (i32, %struct.x509_store_ctx_st*)* %49
  store i32 (i32, %struct.x509_store_ctx_st*)* %51, i32 (i32, %struct.x509_store_ctx_st*)** %22, align 8
  %52 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %1, i64 0, i32 6
  %53 = bitcast {}** %52 to i32 (%struct.x509_store_ctx_st*)**
  %54 = load i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*)** %53, align 8
  %55 = icmp eq i32 (%struct.x509_store_ctx_st*)* %54, null
  %56 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 6
  %57 = bitcast {}** %56 to i32 (%struct.x509_store_ctx_st*)**
  %58 = select i1 %55, i32 (%struct.x509_store_ctx_st*)* @internal_verify, i32 (%struct.x509_store_ctx_st*)* %54
  store i32 (%struct.x509_store_ctx_st*)* %58, i32 (%struct.x509_store_ctx_st*)** %57, align 8
  %59 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %1, i64 0, i32 10
  %60 = bitcast {}** %59 to i32 (%struct.x509_store_ctx_st*)**
  %61 = load i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*)** %60, align 8
  %62 = icmp eq i32 (%struct.x509_store_ctx_st*)* %61, null
  %63 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 10
  %64 = bitcast {}** %63 to i32 (%struct.x509_store_ctx_st*)**
  %65 = select i1 %62, i32 (%struct.x509_store_ctx_st*)* @check_revocation, i32 (%struct.x509_store_ctx_st*)* %61
  store i32 (%struct.x509_store_ctx_st*)* %65, i32 (%struct.x509_store_ctx_st*)** %64, align 8
  %66 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %1, i64 0, i32 11
  %67 = bitcast i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)** %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 11
  %70 = bitcast i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)** %69 to i64*
  store i64 %68, i64* %70, align 8
  %71 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %1, i64 0, i32 12
  %72 = load i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)** %71, align 8
  %73 = icmp eq i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)* %72, null
  %74 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 12
  %75 = select i1 %73, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)* @check_crl, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)* %72
  store i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)* %75, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)** %74, align 8
  %76 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %1, i64 0, i32 13
  %77 = load i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)** %76, align 8
  %78 = icmp eq i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)* %77, null
  %79 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 13
  %80 = select i1 %78, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)* @cert_crl, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)* %77
  store i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)* %80, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)** %79, align 8
  %81 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %1, i64 0, i32 14
  %82 = load %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)** %81, align 8
  %83 = icmp eq %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)* %82, null
  %84 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 15
  %85 = select i1 %83, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)* @X509_STORE_get1_certs, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)* %82
  store %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)* %85, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)** %84, align 8
  %86 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %1, i64 0, i32 15
  %87 = load %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)** %86, align 8
  %88 = icmp eq %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)* %87, null
  %89 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 16
  %90 = select i1 %88, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)* @X509_STORE_get1_crls, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)* %87
  store %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)* %90, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)** %89, align 8
  %91 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 14
  %92 = bitcast {}** %91 to i32 (%struct.x509_store_ctx_st*)**
  store i32 (%struct.x509_store_ctx_st*)* @check_policy, i32 (%struct.x509_store_ctx_st*)** %92, align 8
  br label %99

93:                                               ; preds = %33, %18, %14, %13
  tail call void @CRYPTO_free_ex_data(%struct.CRYPTO_EX_DATA_CLASS* nonnull @g_ex_data_class, i8* %5, %struct.crypto_ex_data_st* %11) #10
  %94 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %95 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %94, align 8
  %96 = icmp eq %struct.X509_VERIFY_PARAM_st* %95, null
  br i1 %96, label %98, label %97

97:                                               ; preds = %93
  tail call void @X509_VERIFY_PARAM_free(%struct.X509_VERIFY_PARAM_st* nonnull %95) #10
  br label %98

98:                                               ; preds = %93, %97
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 0, i64 232, i1 false) #10
  tail call void @ERR_put_error(i32 11, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 2400) #10
  br label %99

99:                                               ; preds = %98, %38
  %100 = phi i32 [ 0, %98 ], [ 1, %38 ]
  ret i32 %100
}

declare void @CRYPTO_new_ex_data(%struct.crypto_ex_data_st*) local_unnamed_addr #2

declare %struct.X509_VERIFY_PARAM_st* @X509_VERIFY_PARAM_new() local_unnamed_addr #2

declare i32 @X509_VERIFY_PARAM_inherit(%struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st*) local_unnamed_addr #2

declare %struct.X509_VERIFY_PARAM_st* @X509_VERIFY_PARAM_lookup(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @check_issued(%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*) #0 {
  %4 = tail call i32 @X509_check_issued(%struct.x509_st* %2, %struct.x509_st* %1) #10
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %20, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %8 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %7, align 8
  %9 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %8, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = and i64 %10, 1
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %20, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 %4, i32* %14, align 8
  %15 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 25
  store %struct.x509_st* %1, %struct.x509_st** %15, align 8
  %16 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 26
  store %struct.x509_st* %2, %struct.x509_st** %16, align 8
  %17 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %18 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %17, align 8
  %19 = tail call i32 %18(i32 0, %struct.x509_store_ctx_st* %0) #10
  br label %20

20:                                               ; preds = %6, %3, %13
  %21 = phi i32 [ %19, %13 ], [ 1, %3 ], [ 0, %6 ]
  ret i32 %21
}

declare i32 @X509_STORE_CTX_get1_issuer(%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @null_callback(i32 returned, %struct.x509_store_ctx_st* nocapture readnone) #7 {
  ret i32 %0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @check_revocation(%struct.x509_store_ctx_st*) #0 {
  %2 = alloca %struct.x509_st*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %struct.X509_crl_st*, align 8
  %6 = alloca %struct.X509_crl_st*, align 8
  %7 = alloca %struct.X509_crl_st*, align 8
  %8 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %9 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %8, align 8
  %10 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %9, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = and i64 %11, 4
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %148, label %14

14:                                               ; preds = %1
  %15 = and i64 %11, 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %21

17:                                               ; preds = %14
  %18 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 30
  %19 = load %struct.x509_store_ctx_st*, %struct.x509_store_ctx_st** %18, align 8
  %20 = icmp eq %struct.x509_store_ctx_st* %19, null
  br i1 %20, label %29, label %148

21:                                               ; preds = %14
  %22 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 20
  %23 = bitcast %struct.stack_st_X509** %22 to %struct.stack_st**
  %24 = load %struct.stack_st*, %struct.stack_st** %23, align 8
  %25 = tail call i64 @sk_num(%struct.stack_st* %24) #10
  %26 = trunc i64 %25 to i32
  %27 = add i32 %26, -1
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %148, label %29

29:                                               ; preds = %17, %21
  %30 = phi i32 [ %27, %21 ], [ 0, %17 ]
  %31 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 23
  %32 = bitcast %struct.X509_crl_st** %7 to i8*
  %33 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 20
  %34 = bitcast %struct.stack_st_X509** %33 to %struct.stack_st**
  %35 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 25
  %36 = bitcast %struct.x509_st** %35 to i8**
  %37 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 26
  %38 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 28
  %39 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 29
  %40 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 11
  %41 = bitcast %struct.x509_st** %2 to i8*
  %42 = bitcast i32* %3 to i8*
  %43 = bitcast i32* %4 to i8*
  %44 = bitcast %struct.X509_crl_st** %5 to i8*
  %45 = bitcast %struct.X509_crl_st** %6 to i8*
  %46 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 3
  %47 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 16
  %48 = bitcast %struct.x509_st** %2 to i64*
  %49 = bitcast %struct.x509_st** %37 to i64*
  %50 = bitcast %struct.X509_crl_st** %7 to i64*
  %51 = bitcast %struct.X509_crl_st** %6 to i64*
  %52 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 27
  %53 = bitcast %struct.X509_crl_st** %52 to i64*
  %54 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 12
  %55 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 13
  %56 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  %57 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %58 = add nuw i32 %30, 1
  %59 = zext i32 %58 to i64
  br label %63

60:                                               ; preds = %142
  %61 = add nuw nsw i64 %64, 1
  %62 = icmp eq i64 %61, %59
  br i1 %62, label %148, label %63

63:                                               ; preds = %60, %29
  %64 = phi i64 [ %61, %60 ], [ 0, %29 ]
  %65 = trunc i64 %64 to i32
  store i32 %65, i32* %31, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #10
  store %struct.X509_crl_st* null, %struct.X509_crl_st** %7, align 8
  %66 = load %struct.stack_st*, %struct.stack_st** %34, align 8
  %67 = call i8* @sk_value(%struct.stack_st* %66, i64 %64) #10
  %68 = bitcast i8* %67 to %struct.x509_st*
  store i8* %67, i8** %36, align 8
  store %struct.x509_st* null, %struct.x509_st** %37, align 8
  store i32 0, i32* %38, align 8
  store i32 0, i32* %39, align 4
  br label %71

69:                                               ; preds = %134
  %70 = icmp eq i32 %137, 32895
  br i1 %70, label %142, label %71

71:                                               ; preds = %69, %63
  %72 = phi i32 [ 0, %63 ], [ %137, %69 ]
  %73 = load i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)** %40, align 8
  %74 = icmp eq i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)* %73, null
  br i1 %74, label %77, label %75

75:                                               ; preds = %71
  %76 = call i32 %73(%struct.x509_store_ctx_st* %0, %struct.X509_crl_st** nonnull %7, %struct.x509_st* %68) #10
  br label %106

77:                                               ; preds = %71
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41) #10
  store %struct.x509_st* null, %struct.x509_st** %2, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %42) #10
  store i32 0, i32* %3, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %43) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44) #10
  store %struct.X509_crl_st* null, %struct.X509_crl_st** %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #10
  store %struct.X509_crl_st* null, %struct.X509_crl_st** %6, align 8
  %78 = call %struct.X509_name_st* @X509_get_issuer_name(%struct.x509_st* %68) #10
  %79 = load i32, i32* %39, align 4
  store i32 %79, i32* %4, align 4
  %80 = load %struct.stack_st_X509_CRL*, %struct.stack_st_X509_CRL** %46, align 8
  %81 = call fastcc i32 @get_crl_sk(%struct.x509_store_ctx_st* %0, %struct.X509_crl_st** nonnull %5, %struct.X509_crl_st** nonnull %6, %struct.x509_st** nonnull %2, i32* nonnull %3, i32* nonnull %4, %struct.stack_st_X509_CRL* %80) #10
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %93

83:                                               ; preds = %77
  %84 = load %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)** %47, align 8
  %85 = call %struct.stack_st_X509_CRL* %84(%struct.x509_store_ctx_st* %0, %struct.X509_name_st* %78) #10
  %86 = icmp eq %struct.stack_st_X509_CRL* %85, null
  %87 = load %struct.X509_crl_st*, %struct.X509_crl_st** %5, align 8
  %88 = icmp ne %struct.X509_crl_st* %87, null
  %89 = and i1 %86, %88
  br i1 %89, label %96, label %90

90:                                               ; preds = %83
  %91 = call fastcc i32 @get_crl_sk(%struct.x509_store_ctx_st* %0, %struct.X509_crl_st** nonnull %5, %struct.X509_crl_st** nonnull %6, %struct.x509_st** nonnull %2, i32* nonnull %3, i32* nonnull %4, %struct.stack_st_X509_CRL* %85) #10
  %92 = bitcast %struct.stack_st_X509_CRL* %85 to %struct.stack_st*
  call void @sk_pop_free_ex(%struct.stack_st* %92, void (void (i8*)*, i8*)* nonnull @sk_X509_CRL_call_free_func, void (i8*)* bitcast (void (%struct.X509_crl_st*)* @X509_CRL_free to void (i8*)*)) #10
  br label %93

93:                                               ; preds = %90, %77
  %94 = load %struct.X509_crl_st*, %struct.X509_crl_st** %5, align 8
  %95 = icmp eq %struct.X509_crl_st* %94, null
  br i1 %95, label %103, label %96

96:                                               ; preds = %93, %83
  %97 = phi %struct.X509_crl_st* [ %87, %83 ], [ %94, %93 ]
  %98 = ptrtoint %struct.X509_crl_st* %97 to i64
  %99 = load i64, i64* %48, align 8
  store i64 %99, i64* %49, align 8
  %100 = load i32, i32* %3, align 4
  store i32 %100, i32* %38, align 8
  %101 = load i32, i32* %4, align 4
  store i32 %101, i32* %39, align 4
  store i64 %98, i64* %50, align 8
  %102 = load i64, i64* %51, align 8
  br label %103

103:                                              ; preds = %96, %93
  %104 = phi i64 [ %102, %96 ], [ 0, %93 ]
  %105 = phi i32 [ 1, %96 ], [ 0, %93 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %43) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %42) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41) #10
  br label %106

106:                                              ; preds = %103, %75
  %107 = phi i64 [ %104, %103 ], [ 0, %75 ]
  %108 = phi i32 [ %105, %103 ], [ %76, %75 ]
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %113

110:                                              ; preds = %106
  store i32 3, i32* %56, align 8
  %111 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %57, align 8
  %112 = call i32 %111(i32 0, %struct.x509_store_ctx_st* %0) #10
  br label %142

113:                                              ; preds = %106
  %114 = load i64, i64* %50, align 8
  store i64 %114, i64* %53, align 8
  %115 = load i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)** %54, align 8
  %116 = inttoptr i64 %114 to %struct.X509_crl_st*
  %117 = call i32 %115(%struct.x509_store_ctx_st* %0, %struct.X509_crl_st* %116) #10
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %142, label %119

119:                                              ; preds = %113
  %120 = inttoptr i64 %107 to %struct.X509_crl_st*
  %121 = icmp eq i64 %107, 0
  br i1 %121, label %129, label %122

122:                                              ; preds = %119
  %123 = load i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)** %54, align 8
  %124 = call i32 %123(%struct.x509_store_ctx_st* %0, %struct.X509_crl_st* nonnull %120) #10
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %142, label %126

126:                                              ; preds = %122
  %127 = load i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)** %55, align 8
  %128 = call i32 %127(%struct.x509_store_ctx_st* %0, %struct.X509_crl_st* nonnull %120, %struct.x509_st* %68) #10
  switch i32 %128, label %129 [
    i32 0, label %142
    i32 2, label %134
  ]

129:                                              ; preds = %126, %119
  %130 = load i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)** %55, align 8
  %131 = load %struct.X509_crl_st*, %struct.X509_crl_st** %7, align 8
  %132 = call i32 %130(%struct.x509_store_ctx_st* %0, %struct.X509_crl_st* %131, %struct.x509_st* %68) #10
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %142, label %134

134:                                              ; preds = %129, %126
  %135 = phi i32 [ %132, %129 ], [ %128, %126 ]
  %136 = load %struct.X509_crl_st*, %struct.X509_crl_st** %7, align 8
  call void @X509_CRL_free(%struct.X509_crl_st* %136) #10
  call void @X509_CRL_free(%struct.X509_crl_st* %120) #10
  store %struct.X509_crl_st* null, %struct.X509_crl_st** %7, align 8
  %137 = load i32, i32* %39, align 4
  %138 = icmp eq i32 %72, %137
  br i1 %138, label %139, label %69

139:                                              ; preds = %134
  store i32 3, i32* %56, align 8
  %140 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %57, align 8
  %141 = call i32 %140(i32 0, %struct.x509_store_ctx_st* %0) #10
  br label %142

142:                                              ; preds = %69, %113, %122, %126, %129, %110, %139
  %143 = phi i64 [ %107, %110 ], [ 0, %139 ], [ 0, %69 ], [ %107, %113 ], [ %107, %129 ], [ %107, %122 ], [ %107, %126 ]
  %144 = phi i32 [ %112, %110 ], [ %141, %139 ], [ %135, %69 ], [ 0, %113 ], [ 0, %129 ], [ 0, %122 ], [ %128, %126 ]
  %145 = load %struct.X509_crl_st*, %struct.X509_crl_st** %7, align 8
  call void @X509_CRL_free(%struct.X509_crl_st* %145) #10
  %146 = inttoptr i64 %143 to %struct.X509_crl_st*
  call void @X509_CRL_free(%struct.X509_crl_st* %146) #10
  store %struct.X509_crl_st* null, %struct.X509_crl_st** %52, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #10
  %147 = icmp eq i32 %144, 0
  br i1 %147, label %148, label %60

148:                                              ; preds = %142, %60, %21, %17, %1
  %149 = phi i32 [ 1, %1 ], [ 1, %17 ], [ 1, %21 ], [ 0, %142 ], [ 1, %60 ]
  ret i32 %149
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @check_crl(%struct.x509_store_ctx_st*, %struct.X509_crl_st*) #0 {
  %3 = alloca %struct.x509_store_ctx_st, align 8
  %4 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 23
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 20
  %7 = bitcast %struct.stack_st_X509** %6 to %struct.stack_st**
  %8 = load %struct.stack_st*, %struct.stack_st** %7, align 8
  %9 = tail call i64 @sk_num(%struct.stack_st* %8) #10
  %10 = trunc i64 %9 to i32
  %11 = add i32 %10, -1
  %12 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 26
  %13 = load %struct.x509_st*, %struct.x509_st** %12, align 8
  %14 = icmp eq %struct.x509_st* %13, null
  br i1 %14, label %15, label %42

15:                                               ; preds = %2
  %16 = icmp slt i32 %5, %11
  %17 = load %struct.stack_st_X509*, %struct.stack_st_X509** %6, align 8
  br i1 %16, label %18, label %24

18:                                               ; preds = %15
  %19 = add nsw i32 %5, 1
  %20 = sext i32 %19 to i64
  %21 = bitcast %struct.stack_st_X509* %17 to %struct.stack_st*
  %22 = tail call i8* @sk_value(%struct.stack_st* %21, i64 %20) #10
  %23 = bitcast i8* %22 to %struct.x509_st*
  br label %39

24:                                               ; preds = %15
  %25 = sext i32 %11 to i64
  %26 = bitcast %struct.stack_st_X509* %17 to %struct.stack_st*
  %27 = tail call i8* @sk_value(%struct.stack_st* %26, i64 %25) #10
  %28 = bitcast i8* %27 to %struct.x509_st*
  %29 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 9
  %30 = load i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)** %29, align 8
  %31 = tail call i32 %30(%struct.x509_store_ctx_st* %0, %struct.x509_st* %28, %struct.x509_st* %28) #10
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %39

33:                                               ; preds = %24
  %34 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 33, i32* %34, align 8
  %35 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %36 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %35, align 8
  %37 = tail call i32 %36(i32 0, %struct.x509_store_ctx_st* %0) #10
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %194, label %39

39:                                               ; preds = %33, %24, %18
  %40 = phi %struct.x509_st* [ %23, %18 ], [ %28, %24 ], [ %28, %33 ]
  %41 = icmp eq %struct.x509_st* %40, null
  br i1 %41, label %192, label %42

42:                                               ; preds = %2, %39
  %43 = phi %struct.x509_st* [ %40, %39 ], [ %13, %2 ]
  %44 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %1, i64 0, i32 10
  %45 = load %struct.asn1_string_st*, %struct.asn1_string_st** %44, align 8
  %46 = icmp eq %struct.asn1_string_st* %45, null
  br i1 %46, label %47, label %153

47:                                               ; preds = %42
  %48 = getelementptr inbounds %struct.x509_st, %struct.x509_st* %43, i64 0, i32 7
  %49 = load i64, i64* %48, align 8
  %50 = and i64 %49, 2
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %63, label %52

52:                                               ; preds = %47
  %53 = getelementptr inbounds %struct.x509_st, %struct.x509_st* %43, i64 0, i32 8
  %54 = load i64, i64* %53, align 8
  %55 = and i64 %54, 2
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %63

57:                                               ; preds = %52
  %58 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 35, i32* %58, align 8
  %59 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %60 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %59, align 8
  %61 = tail call i32 %60(i32 0, %struct.x509_store_ctx_st* %0) #10
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %194, label %63

63:                                               ; preds = %57, %52, %47
  %64 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 28
  %65 = load i32, i32* %64, align 8
  %66 = trunc i32 %65 to i8
  %67 = icmp slt i8 %66, 0
  br i1 %67, label %76, label %68

68:                                               ; preds = %63
  %69 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 44, i32* %69, align 8
  %70 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %71 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %70, align 8
  %72 = tail call i32 %71(i32 0, %struct.x509_store_ctx_st* %0) #10
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %194, label %74

74:                                               ; preds = %68
  %75 = load i32, i32* %64, align 8
  br label %76

76:                                               ; preds = %74, %63
  %77 = phi i32 [ %75, %74 ], [ %65, %63 ]
  %78 = and i32 %77, 8
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %142

80:                                               ; preds = %76
  %81 = load %struct.x509_st*, %struct.x509_st** %12, align 8
  %82 = bitcast %struct.x509_store_ctx_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 232, i8* nonnull %82) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %82, i8 -86, i64 232, i1 false) #10
  %83 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 30
  %84 = load %struct.x509_store_ctx_st*, %struct.x509_store_ctx_st** %83, align 8
  %85 = icmp eq %struct.x509_store_ctx_st* %84, null
  br i1 %85, label %86, label %132

86:                                               ; preds = %80
  %87 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 0
  %88 = load %struct.x509_store_st*, %struct.x509_store_st** %87, align 8
  %89 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 2
  %90 = load %struct.stack_st_X509*, %struct.stack_st_X509** %89, align 8
  %91 = call i32 @X509_STORE_CTX_init(%struct.x509_store_ctx_st* nonnull %3, %struct.x509_store_st* %88, %struct.x509_st* %81, %struct.stack_st_X509* %90) #10
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %132, label %93

93:                                               ; preds = %86
  %94 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 3
  %95 = bitcast %struct.stack_st_X509_CRL** %94 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %3, i64 0, i32 3
  %98 = bitcast %struct.stack_st_X509_CRL** %97 to i64*
  store i64 %96, i64* %98, align 8
  %99 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %100 = bitcast %struct.X509_VERIFY_PARAM_st** %99 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %3, i64 0, i32 4
  %103 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %102, align 8
  %104 = icmp eq %struct.X509_VERIFY_PARAM_st* %103, null
  br i1 %104, label %106, label %105

105:                                              ; preds = %93
  call void @X509_VERIFY_PARAM_free(%struct.X509_VERIFY_PARAM_st* nonnull %103) #10
  br label %106

106:                                              ; preds = %105, %93
  %107 = bitcast %struct.X509_VERIFY_PARAM_st** %102 to i64*
  store i64 %101, i64* %107, align 8
  %108 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %3, i64 0, i32 30
  store %struct.x509_store_ctx_st* %0, %struct.x509_store_ctx_st** %108, align 8
  %109 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %110 = bitcast i32 (i32, %struct.x509_store_ctx_st*)** %109 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %3, i64 0, i32 7
  %113 = bitcast i32 (i32, %struct.x509_store_ctx_st*)** %112 to i64*
  store i64 %111, i64* %113, align 8
  %114 = call i32 @X509_verify_cert(%struct.x509_store_ctx_st* nonnull %3) #10
  %115 = icmp slt i32 %114, 1
  br i1 %115, label %133, label %116

116:                                              ; preds = %106
  %117 = load %struct.stack_st*, %struct.stack_st** %7, align 8
  %118 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %3, i64 0, i32 20
  %119 = bitcast %struct.stack_st_X509** %118 to %struct.stack_st**
  %120 = load %struct.stack_st*, %struct.stack_st** %119, align 8
  %121 = call i64 @sk_num(%struct.stack_st* %117) #10
  %122 = add i64 %121, -1
  %123 = call i8* @sk_value(%struct.stack_st* %117, i64 %122) #10
  %124 = bitcast i8* %123 to %struct.x509_st*
  %125 = call i64 @sk_num(%struct.stack_st* %120) #10
  %126 = add i64 %125, -1
  %127 = call i8* @sk_value(%struct.stack_st* %120, i64 %126) #10
  %128 = bitcast i8* %127 to %struct.x509_st*
  %129 = call i32 @X509_cmp(%struct.x509_st* %124, %struct.x509_st* %128) #10
  %130 = icmp eq i32 %129, 0
  %131 = zext i1 %130 to i32
  br label %133

132:                                              ; preds = %80, %86
  call void @llvm.lifetime.end.p0i8(i64 232, i8* nonnull %82) #10
  br label %136

133:                                              ; preds = %106, %116
  %134 = phi i32 [ %114, %106 ], [ %131, %116 ]
  call void @X509_STORE_CTX_cleanup(%struct.x509_store_ctx_st* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 232, i8* nonnull %82) #10
  %135 = icmp slt i32 %134, 1
  br i1 %135, label %136, label %142

136:                                              ; preds = %132, %133
  %137 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 54, i32* %137, align 8
  %138 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %139 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %138, align 8
  %140 = call i32 %139(i32 0, %struct.x509_store_ctx_st* %0) #10
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %194, label %142

142:                                              ; preds = %136, %76, %133
  %143 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %1, i64 0, i32 7
  %144 = load i32, i32* %143, align 8
  %145 = and i32 %144, 2
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %153, label %147

147:                                              ; preds = %142
  %148 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 41, i32* %148, align 8
  %149 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %150 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %149, align 8
  %151 = call i32 %150(i32 0, %struct.x509_store_ctx_st* %0) #10
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %194, label %153

153:                                              ; preds = %147, %142, %42
  %154 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 28
  %155 = load i32, i32* %154, align 8
  %156 = and i32 %155, 64
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %161

158:                                              ; preds = %153
  %159 = call fastcc i32 @check_crl_time(%struct.x509_store_ctx_st* %0, %struct.X509_crl_st* %1, i32 1)
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %194, label %161

161:                                              ; preds = %158, %153
  %162 = call %struct.evp_pkey_st* @X509_get_pubkey(%struct.x509_st* nonnull %43) #10
  %163 = icmp eq %struct.evp_pkey_st* %162, null
  br i1 %163, label %164, label %170

164:                                              ; preds = %161
  %165 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 6, i32* %165, align 8
  %166 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %167 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %166, align 8
  %168 = call i32 %167(i32 0, %struct.x509_store_ctx_st* %0) #10
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %194, label %192

170:                                              ; preds = %161
  %171 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %172 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %171, align 8
  %173 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %172, i64 0, i32 3
  %174 = load i64, i64* %173, align 8
  %175 = call i32 @X509_CRL_check_suiteb(%struct.X509_crl_st* %1, %struct.evp_pkey_st* nonnull %162, i64 %174) #10
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %183, label %177

177:                                              ; preds = %170
  %178 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 %175, i32* %178, align 8
  %179 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %180 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %179, align 8
  %181 = call i32 %180(i32 0, %struct.x509_store_ctx_st* %0) #10
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %194, label %183

183:                                              ; preds = %177, %170
  %184 = call i32 @X509_CRL_verify(%struct.X509_crl_st* %1, %struct.evp_pkey_st* nonnull %162) #10
  %185 = icmp slt i32 %184, 1
  br i1 %185, label %186, label %192

186:                                              ; preds = %183
  %187 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 8, i32* %187, align 8
  %188 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %189 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %188, align 8
  %190 = call i32 %189(i32 0, %struct.x509_store_ctx_st* %0) #10
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %194, label %192

192:                                              ; preds = %186, %183, %164, %39
  %193 = phi %struct.evp_pkey_st* [ null, %164 ], [ null, %39 ], [ %162, %183 ], [ %162, %186 ]
  br label %194

194:                                              ; preds = %186, %177, %57, %136, %147, %164, %158, %68, %33, %192
  %195 = phi %struct.evp_pkey_st* [ %193, %192 ], [ null, %164 ], [ null, %158 ], [ null, %147 ], [ null, %136 ], [ null, %68 ], [ null, %57 ], [ null, %33 ], [ %162, %177 ], [ %162, %186 ]
  %196 = phi i32 [ 1, %192 ], [ 0, %164 ], [ 0, %158 ], [ 0, %147 ], [ 0, %136 ], [ 0, %68 ], [ 0, %57 ], [ 0, %33 ], [ 0, %177 ], [ 0, %186 ]
  call void @EVP_PKEY_free(%struct.evp_pkey_st* %195) #10
  ret i32 %196
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @cert_crl(%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*) #0 {
  %4 = alloca %struct.x509_revoked_st*, align 8
  %5 = bitcast %struct.x509_revoked_st** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  store %struct.x509_revoked_st* inttoptr (i64 -6148914691236517206 to %struct.x509_revoked_st*), %struct.x509_revoked_st** %4, align 8
  %6 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %7 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %6, align 8
  %8 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %7, i64 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = and i64 %9, 16
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %23

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %1, i64 0, i32 4
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, 512
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %23, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 36, i32* %18, align 8
  %19 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %20 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %19, align 8
  %21 = tail call i32 %20(i32 0, %struct.x509_store_ctx_st* %0) #10
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %38, label %23

23:                                               ; preds = %17, %12, %3
  %24 = call i32 @X509_CRL_get0_by_cert(%struct.X509_crl_st* %1, %struct.x509_revoked_st** nonnull %4, %struct.x509_st* %2) #10
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %37, label %26

26:                                               ; preds = %23
  %27 = load %struct.x509_revoked_st*, %struct.x509_revoked_st** %4, align 8
  %28 = getelementptr inbounds %struct.x509_revoked_st, %struct.x509_revoked_st* %27, i64 0, i32 4
  %29 = load i32, i32* %28, align 8
  %30 = icmp eq i32 %29, 8
  br i1 %30, label %38, label %31

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 23, i32* %32, align 8
  %33 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %34 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %33, align 8
  %35 = call i32 %34(i32 0, %struct.x509_store_ctx_st* %0) #10
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %38, label %37

37:                                               ; preds = %31, %23
  br label %38

38:                                               ; preds = %31, %26, %17, %37
  %39 = phi i32 [ 1, %37 ], [ 0, %17 ], [ 2, %26 ], [ 0, %31 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  ret i32 %39
}

declare %struct.stack_st_X509* @X509_STORE_get1_certs(%struct.x509_store_ctx_st*, %struct.X509_name_st*) #2

declare %struct.stack_st_X509_CRL* @X509_STORE_get1_crls(%struct.x509_store_ctx_st*, %struct.X509_name_st*) #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @check_policy(%struct.x509_store_ctx_st*) #0 {
  %2 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 30
  %3 = load %struct.x509_store_ctx_st*, %struct.x509_store_ctx_st** %2, align 8
  %4 = icmp eq %struct.x509_store_ctx_st* %3, null
  br i1 %4, label %5, label %67

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 21
  %7 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 22
  %8 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 20
  %9 = load %struct.stack_st_X509*, %struct.stack_st_X509** %8, align 8
  %10 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %11 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %10, align 8
  %12 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %11, i64 0, i32 7
  %13 = load %struct.stack_st_ASN1_OBJECT*, %struct.stack_st_ASN1_OBJECT** %12, align 8
  %14 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %11, i64 0, i32 3
  %15 = load i64, i64* %14, align 8
  %16 = trunc i64 %15 to i32
  %17 = tail call i32 @X509_policy_check(%struct.X509_POLICY_TREE_st** %6, i32* %7, %struct.stack_st_X509* %9, %struct.stack_st_ASN1_OBJECT* %13, i32 %16) #10
  switch i32 %17, label %54 [
    i32 0, label %28
    i32 -1, label %18
    i32 -2, label %48
  ]

18:                                               ; preds = %5
  %19 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 25
  %20 = bitcast %struct.x509_st** %19 to i8**
  %21 = bitcast %struct.stack_st_X509** %8 to %struct.stack_st**
  %22 = load %struct.stack_st*, %struct.stack_st** %21, align 8
  %23 = tail call i64 @sk_num(%struct.stack_st* %22) #10
  %24 = icmp ugt i64 %23, 1
  br i1 %24, label %25, label %67

25:                                               ; preds = %18
  %26 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  %27 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  br label %30

28:                                               ; preds = %5
  tail call void @ERR_put_error(i32 11, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 1739) #10
  %29 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 17, i32* %29, align 8
  br label %67

30:                                               ; preds = %25, %43
  %31 = phi i64 [ 1, %25 ], [ %44, %43 ]
  %32 = load %struct.stack_st*, %struct.stack_st** %21, align 8
  %33 = tail call i8* @sk_value(%struct.stack_st* %32, i64 %31) #10
  %34 = getelementptr inbounds i8, i8* %33, i64 56
  %35 = bitcast i8* %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = and i64 %36, 2048
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %43, label %39

39:                                               ; preds = %30
  store i8* %33, i8** %20, align 8
  store i32 42, i32* %26, align 8
  %40 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %27, align 8
  %41 = tail call i32 %40(i32 0, %struct.x509_store_ctx_st* %0) #10
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %67, label %43

43:                                               ; preds = %39, %30
  %44 = add nuw i64 %31, 1
  %45 = load %struct.stack_st*, %struct.stack_st** %21, align 8
  %46 = tail call i64 @sk_num(%struct.stack_st* %45) #10
  %47 = icmp ult i64 %44, %46
  br i1 %47, label %30, label %67

48:                                               ; preds = %5
  %49 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 25
  store %struct.x509_st* null, %struct.x509_st** %49, align 8
  %50 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 43, i32* %50, align 8
  %51 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %52 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %51, align 8
  %53 = tail call i32 %52(i32 0, %struct.x509_store_ctx_st* %0) #10
  br label %67

54:                                               ; preds = %5
  %55 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %10, align 8
  %56 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %55, i64 0, i32 3
  %57 = load i64, i64* %56, align 8
  %58 = and i64 %57, 2048
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %66, label %60

60:                                               ; preds = %54
  %61 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 25
  store %struct.x509_st* null, %struct.x509_st** %61, align 8
  %62 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %63 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %62, align 8
  %64 = tail call i32 %63(i32 2, %struct.x509_store_ctx_st* %0) #10
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %67, label %66

66:                                               ; preds = %60, %54
  br label %67

67:                                               ; preds = %43, %39, %18, %60, %1, %66, %48, %28
  %68 = phi i32 [ 0, %28 ], [ %53, %48 ], [ 1, %66 ], [ 1, %1 ], [ 0, %60 ], [ 1, %18 ], [ 1, %43 ], [ 0, %39 ]
  ret i32 %68
}

declare void @CRYPTO_free_ex_data(%struct.CRYPTO_EX_DATA_CLASS*, i8*, %struct.crypto_ex_data_st*) local_unnamed_addr #2

declare void @X509_VERIFY_PARAM_free(%struct.X509_VERIFY_PARAM_st*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @X509_STORE_CTX_trusted_stack(%struct.x509_store_ctx_st* nocapture, %struct.stack_st_X509*) local_unnamed_addr #6 {
  %3 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 5
  %4 = bitcast i8** %3 to %struct.stack_st_X509**
  store %struct.stack_st_X509* %1, %struct.stack_st_X509** %4, align 8
  %5 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 8
  store i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)* @get_issuer_sk, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)** %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @get_issuer_sk(%struct.x509_st** nocapture, %struct.x509_store_ctx_st*, %struct.x509_st*) #0 {
  %4 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %1, i64 0, i32 5
  %5 = bitcast i8** %4 to %struct.stack_st**
  %6 = load %struct.stack_st*, %struct.stack_st** %5, align 8
  %7 = tail call i64 @sk_num(%struct.stack_st* %6) #10
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %22, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %1, i64 0, i32 9
  br label %14

11:                                               ; preds = %14
  %12 = tail call i64 @sk_num(%struct.stack_st* %6) #10
  %13 = icmp ult i64 %21, %12
  br i1 %13, label %14, label %22

14:                                               ; preds = %11, %9
  %15 = phi i64 [ 0, %9 ], [ %21, %11 ]
  %16 = tail call i8* @sk_value(%struct.stack_st* %6, i64 %15) #10
  %17 = bitcast i8* %16 to %struct.x509_st*
  %18 = load i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)** %10, align 8
  %19 = tail call i32 %18(%struct.x509_store_ctx_st* %1, %struct.x509_st* %2, %struct.x509_st* %17) #10
  %20 = icmp eq i32 %19, 0
  %21 = add nuw i64 %15, 1
  br i1 %20, label %11, label %23

22:                                               ; preds = %11, %3
  store %struct.x509_st* null, %struct.x509_st** %0, align 8
  br label %29

23:                                               ; preds = %14
  %24 = bitcast %struct.x509_st** %0 to i8**
  store i8* %16, i8** %24, align 8
  %25 = icmp eq i8* %16, null
  br i1 %25, label %29, label %26

26:                                               ; preds = %23
  %27 = bitcast i8* %16 to %struct.x509_st*
  %28 = tail call i32 @X509_up_ref(%struct.x509_st* nonnull %27) #10
  br label %29

29:                                               ; preds = %22, %23, %26
  %30 = phi i32 [ 1, %26 ], [ 0, %23 ], [ 0, %22 ]
  ret i32 %30
}

declare void @X509_policy_tree_free(%struct.X509_POLICY_TREE_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @X509_STORE_CTX_set_depth(%struct.x509_store_ctx_st* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %4 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %3, align 8
  tail call void @X509_VERIFY_PARAM_set_depth(%struct.X509_VERIFY_PARAM_st* %4, i32 %1) #10
  ret void
}

declare void @X509_VERIFY_PARAM_set_depth(%struct.X509_VERIFY_PARAM_st*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @X509_STORE_CTX_set_flags(%struct.x509_store_ctx_st* nocapture readonly, i64) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %4 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %3, align 8
  %5 = tail call i32 @X509_VERIFY_PARAM_set_flags(%struct.X509_VERIFY_PARAM_st* %4, i64 %1) #10
  ret void
}

declare i32 @X509_VERIFY_PARAM_set_flags(%struct.X509_VERIFY_PARAM_st*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @X509_STORE_CTX_set_time(%struct.x509_store_ctx_st* nocapture readonly, i64, i64) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %5 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %4, align 8
  tail call void @X509_VERIFY_PARAM_set_time(%struct.X509_VERIFY_PARAM_st* %5, i64 %2) #10
  ret void
}

declare void @X509_VERIFY_PARAM_set_time(%struct.X509_VERIFY_PARAM_st*, i64) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.x509_st* @X509_STORE_CTX_get0_cert(%struct.x509_store_ctx_st* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 1
  %3 = load %struct.x509_st*, %struct.x509_st** %2, align 8
  ret %struct.x509_st* %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @X509_STORE_CTX_set_verify_cb(%struct.x509_store_ctx_st* nocapture, i32 (i32, %struct.x509_store_ctx_st*)*) local_unnamed_addr #6 {
  %3 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  store i32 (i32, %struct.x509_store_ctx_st*)* %1, i32 (i32, %struct.x509_store_ctx_st*)** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.X509_POLICY_TREE_st* @X509_STORE_CTX_get0_policy_tree(%struct.x509_store_ctx_st* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 21
  %3 = load %struct.X509_POLICY_TREE_st*, %struct.X509_POLICY_TREE_st** %2, align 8
  ret %struct.X509_POLICY_TREE_st* %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @X509_STORE_CTX_get_explicit_policy(%struct.x509_store_ctx_st* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 22
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_STORE_CTX_set_default(%struct.x509_store_ctx_st* nocapture readonly, i8*) local_unnamed_addr #0 {
  %3 = tail call %struct.X509_VERIFY_PARAM_st* @X509_VERIFY_PARAM_lookup(i8* %1) #10
  %4 = icmp eq %struct.X509_VERIFY_PARAM_st* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %7 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %6, align 8
  %8 = tail call i32 @X509_VERIFY_PARAM_inherit(%struct.X509_VERIFY_PARAM_st* %7, %struct.X509_VERIFY_PARAM_st* nonnull %3) #10
  br label %9

9:                                                ; preds = %2, %5
  %10 = phi i32 [ %8, %5 ], [ 0, %2 ]
  ret i32 %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.X509_VERIFY_PARAM_st* @X509_STORE_CTX_get0_param(%struct.x509_store_ctx_st* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %3 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %2, align 8
  ret %struct.X509_VERIFY_PARAM_st* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @X509_STORE_CTX_set0_param(%struct.x509_store_ctx_st* nocapture, %struct.X509_VERIFY_PARAM_st*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %4 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %3, align 8
  %5 = icmp eq %struct.X509_VERIFY_PARAM_st* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %2
  tail call void @X509_VERIFY_PARAM_free(%struct.X509_VERIFY_PARAM_st* nonnull %4) #10
  br label %7

7:                                                ; preds = %2, %6
  store %struct.X509_VERIFY_PARAM_st* %1, %struct.X509_VERIFY_PARAM_st** %3, align 8
  ret void
}

declare %struct.stack_st* @sk_new_null() local_unnamed_addr #2

declare i64 @sk_push(%struct.stack_st*, i8*) local_unnamed_addr #2

declare %struct.stack_st* @sk_dup(%struct.stack_st*) local_unnamed_addr #2

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #2

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #2

declare i32 @x509v3_cache_extensions(%struct.x509_st*) local_unnamed_addr #2

declare i8* @sk_delete_ptr(%struct.stack_st*, i8*) local_unnamed_addr #2

declare i8* @sk_set(%struct.stack_st*, i64, i8*) local_unnamed_addr #2

declare i8* @sk_pop(%struct.stack_st*) local_unnamed_addr #2

declare void @sk_free(%struct.stack_st*) local_unnamed_addr #2

declare i32 @X509_check_ca(%struct.x509_st*) local_unnamed_addr #2

declare i32 @X509_check_purpose(%struct.x509_st*, i32, i32) local_unnamed_addr #2

declare i32 @NAME_CONSTRAINTS_check(%struct.x509_st*, %struct.NAME_CONSTRAINTS_st*) local_unnamed_addr #2

declare %struct.X509_name_st* @X509_get_subject_name(%struct.x509_st*) local_unnamed_addr #2

declare i32 @X509_NAME_get_index_by_NID(%struct.X509_name_st*, i32, i32) local_unnamed_addr #2

declare %struct.X509_name_entry_st* @X509_NAME_get_entry(%struct.X509_name_st*, i32) local_unnamed_addr #2

declare %struct.asn1_string_st* @X509_NAME_ENTRY_get_data(%struct.X509_name_entry_st*) local_unnamed_addr #2

declare i32 @ASN1_STRING_to_UTF8(i8**, %struct.asn1_string_st*) local_unnamed_addr #2

declare i32 @x509v3_looks_like_dns_name(i8*, i64) local_unnamed_addr #2

declare i32 @X509_check_email(%struct.x509_st*, i8*, i64, i32) local_unnamed_addr #2

declare i32 @X509_check_ip(%struct.x509_st*, i8*, i64, i32) local_unnamed_addr #2

declare i32 @X509_check_host(%struct.x509_st*, i8*, i64, i32, i8**) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #8

declare i32 @X509_check_trust(%struct.x509_st*, i32, i32) local_unnamed_addr #2

declare %struct.evp_pkey_st* @X509_get_pubkey(%struct.x509_st*) local_unnamed_addr #2

declare i32 @X509_verify(%struct.x509_st*, %struct.evp_pkey_st*) local_unnamed_addr #2

declare void @EVP_PKEY_free(%struct.evp_pkey_st*) local_unnamed_addr #2

declare %struct.asn1_string_st* @X509_get_notBefore(%struct.x509_st*) local_unnamed_addr #2

declare %struct.asn1_string_st* @X509_get_notAfter(%struct.x509_st*) local_unnamed_addr #2

declare i32 @X509_CRL_get_ext_by_NID(%struct.X509_crl_st*, i32, i32) local_unnamed_addr #2

declare %struct.asn1_string_st* @X509_EXTENSION_get_data(%struct.X509_extension_st*) local_unnamed_addr #2

declare i32 @ASN1_OCTET_STRING_cmp(%struct.asn1_string_st*, %struct.asn1_string_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @X509_check_issued(%struct.x509_st*, %struct.x509_st*) local_unnamed_addr #2

declare %struct.X509_name_st* @X509_get_issuer_name(%struct.x509_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @get_crl_sk(%struct.x509_store_ctx_st*, %struct.X509_crl_st** nocapture, %struct.X509_crl_st** nocapture, %struct.x509_st** nocapture, i32* nocapture, i32* nocapture, %struct.stack_st_X509_CRL*) unnamed_addr #0 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = load i32, i32* %4, align 4
  %11 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 25
  %12 = load %struct.x509_st*, %struct.x509_st** %11, align 8
  %13 = bitcast %struct.stack_st_X509_CRL* %6 to %struct.stack_st*
  %14 = call i64 @sk_num(%struct.stack_st* %13) #10
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %510, label %16

16:                                               ; preds = %7
  %17 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %18 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 23
  %19 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 20
  %20 = bitcast %struct.stack_st_X509** %19 to %struct.stack_st**
  %21 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 2
  %22 = bitcast %struct.stack_st_X509** %21 to %struct.stack_st**
  %23 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 0
  %24 = getelementptr inbounds %struct.x509_st, %struct.x509_st* %12, i64 0, i32 7
  %25 = getelementptr inbounds %struct.x509_st, %struct.x509_st* %12, i64 0, i32 14
  %26 = bitcast %struct.stack_st_DIST_POINT** %25 to %struct.stack_st**
  %27 = bitcast i32* %8 to i8*
  %28 = bitcast i32* %9 to i8*
  br label %29

29:                                               ; preds = %16, %419
  %30 = phi %struct.x509_st* [ null, %16 ], [ %424, %419 ]
  %31 = phi %struct.X509_crl_st* [ null, %16 ], [ %423, %419 ]
  %32 = phi i32 [ 0, %16 ], [ %422, %419 ]
  %33 = phi i64 [ 0, %16 ], [ %425, %419 ]
  %34 = phi i32 [ %10, %16 ], [ %421, %419 ]
  %35 = phi %struct.x509_st* [ null, %16 ], [ %420, %419 ]
  %36 = call i8* @sk_value(%struct.stack_st* %13, i64 %33) #10
  %37 = bitcast i8* %36 to %struct.X509_crl_st*
  %38 = load i32, i32* %5, align 4
  %39 = getelementptr inbounds i8, i8* %36, i64 48
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 8
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %419

44:                                               ; preds = %29
  %45 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %17, align 8
  %46 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %45, i64 0, i32 3
  %47 = load i64, i64* %46, align 8
  %48 = and i64 %47, 4096
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %44
  %51 = and i32 %41, 96
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %68, label %419

53:                                               ; preds = %44
  %54 = and i32 %41, 64
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %63, label %56

56:                                               ; preds = %53
  %57 = getelementptr inbounds i8, i8* %36, i64 52
  %58 = bitcast i8* %57 to i32*
  %59 = load i32, i32* %58, align 4
  %60 = xor i32 %38, -1
  %61 = and i32 %59, %60
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %419, label %68

63:                                               ; preds = %53
  %64 = getelementptr inbounds i8, i8* %36, i64 64
  %65 = bitcast i8* %64 to %struct.asn1_string_st**
  %66 = load %struct.asn1_string_st*, %struct.asn1_string_st** %65, align 8
  %67 = icmp eq %struct.asn1_string_st* %66, null
  br i1 %67, label %68, label %419

68:                                               ; preds = %63, %56, %50
  %69 = call %struct.X509_name_st* @X509_get_issuer_name(%struct.x509_st* %12) #10
  %70 = call %struct.X509_name_st* @X509_CRL_get_issuer(%struct.X509_crl_st* %37) #10
  %71 = call i32 @X509_NAME_cmp(%struct.X509_name_st* %69, %struct.X509_name_st* %70) #10
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %77, label %73

73:                                               ; preds = %68
  %74 = load i32, i32* %40, align 8
  %75 = and i32 %74, 32
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %419, label %77

77:                                               ; preds = %73, %68
  %78 = phi i32 [ 0, %73 ], [ 32, %68 ]
  %79 = getelementptr inbounds i8, i8* %36, i64 28
  %80 = bitcast i8* %79 to i32*
  %81 = load i32, i32* %80, align 4
  %82 = lshr i32 %81, 1
  %83 = and i32 %82, 256
  %84 = or i32 %83, %78
  %85 = xor i32 %84, 256
  %86 = call fastcc i32 @check_crl_time(%struct.x509_store_ctx_st* %0, %struct.X509_crl_st* %37, i32 0) #10
  %87 = icmp eq i32 %86, 0
  %88 = or i32 %85, 64
  %89 = select i1 %87, i32 %85, i32 %88
  %90 = call %struct.X509_name_st* @X509_CRL_get_issuer(%struct.X509_crl_st* %37) #10
  %91 = load i32, i32* %18, align 4
  %92 = sext i32 %91 to i64
  %93 = load %struct.stack_st*, %struct.stack_st** %20, align 8
  %94 = call i64 @sk_num(%struct.stack_st* %93) #10
  %95 = add i64 %94, -1
  %96 = icmp ne i64 %95, %92
  %97 = zext i1 %96 to i32
  %98 = add i32 %91, %97
  %99 = load %struct.stack_st*, %struct.stack_st** %20, align 8
  %100 = sext i32 %98 to i64
  %101 = call i8* @sk_value(%struct.stack_st* %99, i64 %100) #10
  %102 = bitcast i8* %101 to %struct.x509_st*
  %103 = getelementptr inbounds i8, i8* %36, i64 32
  %104 = bitcast i8* %103 to %struct.AUTHORITY_KEYID_st**
  %105 = load %struct.AUTHORITY_KEYID_st*, %struct.AUTHORITY_KEYID_st** %104, align 8
  %106 = call i32 @X509_check_akid(%struct.x509_st* %102, %struct.AUTHORITY_KEYID_st* %105) #10
  %107 = icmp ne i32 %106, 0
  %108 = and i32 %89, 32
  %109 = icmp eq i32 %108, 0
  %110 = or i1 %109, %107
  br i1 %110, label %113, label %111

111:                                              ; preds = %77
  %112 = or i32 %89, 28
  br label %206

113:                                              ; preds = %77
  %114 = add i32 %98, 1
  %115 = load %struct.stack_st*, %struct.stack_st** %20, align 8
  %116 = call i64 @sk_num(%struct.stack_st* %115) #10
  %117 = trunc i64 %116 to i32
  %118 = icmp slt i32 %114, %117
  br i1 %118, label %119, label %143

119:                                              ; preds = %113
  %120 = sext i32 %114 to i64
  br label %121

121:                                              ; preds = %136, %119
  %122 = phi i64 [ %120, %119 ], [ %137, %136 ]
  %123 = load %struct.stack_st*, %struct.stack_st** %20, align 8
  %124 = call i8* @sk_value(%struct.stack_st* %123, i64 %122) #10
  %125 = bitcast i8* %124 to %struct.x509_st*
  %126 = call %struct.X509_name_st* @X509_get_subject_name(%struct.x509_st* %125) #10
  %127 = call i32 @X509_NAME_cmp(%struct.X509_name_st* %126, %struct.X509_name_st* %90) #10
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %136

129:                                              ; preds = %121
  %130 = load %struct.AUTHORITY_KEYID_st*, %struct.AUTHORITY_KEYID_st** %104, align 8
  %131 = call i32 @X509_check_akid(%struct.x509_st* %125, %struct.AUTHORITY_KEYID_st* %130) #10
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %133, label %136

133:                                              ; preds = %129
  %134 = bitcast i8* %124 to %struct.x509_st*
  %135 = or i32 %89, 12
  br label %206

136:                                              ; preds = %129, %121
  %137 = add nsw i64 %122, 1
  %138 = load %struct.stack_st*, %struct.stack_st** %20, align 8
  %139 = call i64 @sk_num(%struct.stack_st* %138) #10
  %140 = shl i64 %139, 32
  %141 = ashr exact i64 %140, 32
  %142 = icmp slt i64 %137, %141
  br i1 %142, label %121, label %143

143:                                              ; preds = %136, %113
  %144 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %17, align 8
  %145 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %144, i64 0, i32 3
  %146 = load i64, i64* %145, align 8
  %147 = and i64 %146, 4096
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %206, label %149

149:                                              ; preds = %143
  %150 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %151 = call i64 @sk_num(%struct.stack_st* %150) #10
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %160

153:                                              ; preds = %175, %149
  %154 = load %struct.x509_store_st*, %struct.x509_store_st** %23, align 8
  %155 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %154, i64 0, i32 3
  %156 = bitcast %struct.stack_st_X509** %155 to %struct.stack_st**
  %157 = load %struct.stack_st*, %struct.stack_st** %156, align 8
  %158 = call i64 @sk_num(%struct.stack_st* %157) #10
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %206, label %180

160:                                              ; preds = %149, %175
  %161 = phi i64 [ %176, %175 ], [ 0, %149 ]
  %162 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %163 = call i8* @sk_value(%struct.stack_st* %162, i64 %161) #10
  %164 = bitcast i8* %163 to %struct.x509_st*
  %165 = call %struct.X509_name_st* @X509_get_subject_name(%struct.x509_st* %164) #10
  %166 = call i32 @X509_NAME_cmp(%struct.X509_name_st* %165, %struct.X509_name_st* %90) #10
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %168, label %175

168:                                              ; preds = %160
  %169 = load %struct.AUTHORITY_KEYID_st*, %struct.AUTHORITY_KEYID_st** %104, align 8
  %170 = call i32 @X509_check_akid(%struct.x509_st* %164, %struct.AUTHORITY_KEYID_st* %169) #10
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %175

172:                                              ; preds = %168
  %173 = bitcast i8* %163 to %struct.x509_st*
  %174 = or i32 %89, 4
  br label %206

175:                                              ; preds = %168, %160
  %176 = add nuw i64 %161, 1
  %177 = load %struct.stack_st*, %struct.stack_st** %22, align 8
  %178 = call i64 @sk_num(%struct.stack_st* %177) #10
  %179 = icmp ult i64 %176, %178
  br i1 %179, label %160, label %153

180:                                              ; preds = %153, %198
  %181 = phi i64 [ %199, %198 ], [ 0, %153 ]
  %182 = load %struct.x509_store_st*, %struct.x509_store_st** %23, align 8
  %183 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %182, i64 0, i32 3
  %184 = bitcast %struct.stack_st_X509** %183 to %struct.stack_st**
  %185 = load %struct.stack_st*, %struct.stack_st** %184, align 8
  %186 = call i8* @sk_value(%struct.stack_st* %185, i64 %181) #10
  %187 = bitcast i8* %186 to %struct.x509_st*
  %188 = call %struct.X509_name_st* @X509_get_subject_name(%struct.x509_st* %187) #10
  %189 = call i32 @X509_NAME_cmp(%struct.X509_name_st* %188, %struct.X509_name_st* %90) #10
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %191, label %198

191:                                              ; preds = %180
  %192 = load %struct.AUTHORITY_KEYID_st*, %struct.AUTHORITY_KEYID_st** %104, align 8
  %193 = call i32 @X509_check_akid(%struct.x509_st* %187, %struct.AUTHORITY_KEYID_st* %192) #10
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %195, label %198

195:                                              ; preds = %191
  %196 = bitcast i8* %186 to %struct.x509_st*
  %197 = or i32 %89, 4
  br label %206

198:                                              ; preds = %191, %180
  %199 = add nuw i64 %181, 1
  %200 = load %struct.x509_store_st*, %struct.x509_store_st** %23, align 8
  %201 = getelementptr inbounds %struct.x509_store_st, %struct.x509_store_st* %200, i64 0, i32 3
  %202 = bitcast %struct.stack_st_X509** %201 to %struct.stack_st**
  %203 = load %struct.stack_st*, %struct.stack_st** %202, align 8
  %204 = call i64 @sk_num(%struct.stack_st* %203) #10
  %205 = icmp ult i64 %199, %204
  br i1 %205, label %180, label %206

206:                                              ; preds = %198, %195, %172, %153, %143, %133, %111
  %207 = phi %struct.x509_st* [ %134, %133 ], [ %35, %143 ], [ %35, %153 ], [ %196, %195 ], [ %173, %172 ], [ %102, %111 ], [ %35, %198 ]
  %208 = phi i32 [ %135, %133 ], [ %89, %143 ], [ %89, %153 ], [ %197, %195 ], [ %174, %172 ], [ %112, %111 ], [ %89, %198 ]
  %209 = and i32 %208, 4
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %419, label %211

211:                                              ; preds = %206
  %212 = load i32, i32* %40, align 8
  %213 = and i32 %212, 16
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %215, label %396

215:                                              ; preds = %211
  %216 = load i64, i64* %24, align 8
  %217 = and i64 %216, 16
  %218 = icmp eq i64 %217, 0
  br i1 %218, label %222, label %219

219:                                              ; preds = %215
  %220 = and i32 %212, 4
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %225, label %396

222:                                              ; preds = %215
  %223 = and i32 %212, 8
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %225, label %396

225:                                              ; preds = %222, %219
  %226 = getelementptr inbounds i8, i8* %36, i64 52
  %227 = bitcast i8* %226 to i32*
  %228 = load i32, i32* %227, align 4
  %229 = load %struct.stack_st*, %struct.stack_st** %26, align 8
  %230 = call i64 @sk_num(%struct.stack_st* %229) #10
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %376, label %232

232:                                              ; preds = %225
  %233 = and i32 %208, 32
  %234 = icmp eq i32 %233, 0
  %235 = getelementptr inbounds i8, i8* %36, i64 40
  %236 = bitcast i8* %235 to %struct.ISSUING_DIST_POINT_st**
  br label %237

237:                                              ; preds = %371, %232
  %238 = phi i64 [ 0, %232 ], [ %372, %371 ]
  %239 = load %struct.stack_st*, %struct.stack_st** %26, align 8
  %240 = call i8* @sk_value(%struct.stack_st* %239, i64 %238) #10
  %241 = call %struct.X509_name_st* @X509_CRL_get_issuer(%struct.X509_crl_st* %37) #10
  %242 = getelementptr inbounds i8, i8* %240, i64 16
  %243 = bitcast i8* %242 to %struct.stack_st_GENERAL_NAME**
  %244 = load %struct.stack_st_GENERAL_NAME*, %struct.stack_st_GENERAL_NAME** %243, align 8
  %245 = icmp eq %struct.stack_st_GENERAL_NAME* %244, null
  br i1 %245, label %269, label %246

246:                                              ; preds = %237
  %247 = bitcast %struct.stack_st_GENERAL_NAME* %244 to %struct.stack_st*
  %248 = bitcast i8* %242 to %struct.stack_st**
  %249 = call i64 @sk_num(%struct.stack_st* nonnull %247) #10
  %250 = icmp eq i64 %249, 0
  br i1 %250, label %371, label %251

251:                                              ; preds = %246, %264
  %252 = phi i64 [ %265, %264 ], [ 0, %246 ]
  %253 = load %struct.stack_st*, %struct.stack_st** %248, align 8
  %254 = call i8* @sk_value(%struct.stack_st* %253, i64 %252) #10
  %255 = bitcast i8* %254 to i32*
  %256 = load i32, i32* %255, align 8
  %257 = icmp eq i32 %256, 4
  br i1 %257, label %258, label %264

258:                                              ; preds = %251
  %259 = getelementptr inbounds i8, i8* %254, i64 8
  %260 = bitcast i8* %259 to %struct.X509_name_st**
  %261 = load %struct.X509_name_st*, %struct.X509_name_st** %260, align 8
  %262 = call i32 @X509_NAME_cmp(%struct.X509_name_st* %261, %struct.X509_name_st* %241) #10
  %263 = icmp eq i32 %262, 0
  br i1 %263, label %270, label %264

264:                                              ; preds = %258, %251
  %265 = add nuw i64 %252, 1
  %266 = load %struct.stack_st*, %struct.stack_st** %248, align 8
  %267 = call i64 @sk_num(%struct.stack_st* %266) #10
  %268 = icmp ult i64 %265, %267
  br i1 %268, label %251, label %371

269:                                              ; preds = %237
  br i1 %234, label %371, label %270

270:                                              ; preds = %258, %269
  %271 = load %struct.ISSUING_DIST_POINT_st*, %struct.ISSUING_DIST_POINT_st** %236, align 8
  %272 = icmp eq %struct.ISSUING_DIST_POINT_st* %271, null
  br i1 %272, label %366, label %273

273:                                              ; preds = %270
  %274 = bitcast i8* %240 to %struct.DIST_POINT_NAME_st**
  %275 = load %struct.DIST_POINT_NAME_st*, %struct.DIST_POINT_NAME_st** %274, align 8
  %276 = getelementptr inbounds %struct.ISSUING_DIST_POINT_st, %struct.ISSUING_DIST_POINT_st* %271, i64 0, i32 0
  %277 = load %struct.DIST_POINT_NAME_st*, %struct.DIST_POINT_NAME_st** %276, align 8
  %278 = icmp ne %struct.DIST_POINT_NAME_st* %275, null
  %279 = icmp ne %struct.DIST_POINT_NAME_st* %277, null
  %280 = and i1 %278, %279
  br i1 %280, label %281, label %366

281:                                              ; preds = %273
  %282 = getelementptr inbounds %struct.DIST_POINT_NAME_st, %struct.DIST_POINT_NAME_st* %275, i64 0, i32 0
  %283 = load i32, i32* %282, align 8
  %284 = icmp eq i32 %283, 1
  br i1 %284, label %285, label %297

285:                                              ; preds = %281
  %286 = getelementptr inbounds %struct.DIST_POINT_NAME_st, %struct.DIST_POINT_NAME_st* %275, i64 0, i32 2
  %287 = load %struct.X509_name_st*, %struct.X509_name_st** %286, align 8
  %288 = icmp eq %struct.X509_name_st* %287, null
  br i1 %288, label %371, label %289

289:                                              ; preds = %285
  %290 = getelementptr inbounds %struct.DIST_POINT_NAME_st, %struct.DIST_POINT_NAME_st* %277, i64 0, i32 0
  %291 = load i32, i32* %290, align 8
  %292 = icmp eq i32 %291, 1
  br i1 %292, label %293, label %305

293:                                              ; preds = %289
  %294 = getelementptr inbounds %struct.DIST_POINT_NAME_st, %struct.DIST_POINT_NAME_st* %277, i64 0, i32 2
  %295 = load %struct.X509_name_st*, %struct.X509_name_st** %294, align 8
  %296 = icmp eq %struct.X509_name_st* %295, null
  br i1 %296, label %371, label %363

297:                                              ; preds = %281
  %298 = getelementptr inbounds %struct.DIST_POINT_NAME_st, %struct.DIST_POINT_NAME_st* %277, i64 0, i32 0
  %299 = load i32, i32* %298, align 8
  %300 = icmp eq i32 %299, 1
  br i1 %300, label %301, label %313

301:                                              ; preds = %297
  %302 = getelementptr inbounds %struct.DIST_POINT_NAME_st, %struct.DIST_POINT_NAME_st* %277, i64 0, i32 2
  %303 = load %struct.X509_name_st*, %struct.X509_name_st** %302, align 8
  %304 = icmp eq %struct.X509_name_st* %303, null
  br i1 %304, label %371, label %305

305:                                              ; preds = %301, %289
  %306 = phi %struct.X509_name_st* [ %287, %289 ], [ %303, %301 ]
  %307 = phi %struct.DIST_POINT_NAME_st* [ %277, %289 ], [ %275, %301 ]
  %308 = getelementptr inbounds %struct.DIST_POINT_NAME_st, %struct.DIST_POINT_NAME_st* %307, i64 0, i32 1, i32 0
  %309 = bitcast %struct.stack_st_GENERAL_NAME** %308 to %struct.stack_st**
  %310 = load %struct.stack_st*, %struct.stack_st** %309, align 8
  %311 = call i64 @sk_num(%struct.stack_st* %310) #10
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %371, label %322

313:                                              ; preds = %297
  %314 = getelementptr inbounds %struct.DIST_POINT_NAME_st, %struct.DIST_POINT_NAME_st* %275, i64 0, i32 1, i32 0
  %315 = bitcast %struct.stack_st_GENERAL_NAME** %314 to %struct.stack_st**
  %316 = load %struct.stack_st*, %struct.stack_st** %315, align 8
  %317 = call i64 @sk_num(%struct.stack_st* %316) #10
  %318 = icmp eq i64 %317, 0
  br i1 %318, label %371, label %319

319:                                              ; preds = %313
  %320 = getelementptr inbounds %struct.DIST_POINT_NAME_st, %struct.DIST_POINT_NAME_st* %277, i64 0, i32 1, i32 0
  %321 = bitcast %struct.stack_st_GENERAL_NAME** %320 to %struct.stack_st**
  br label %338

322:                                              ; preds = %305, %334
  %323 = phi i64 [ %335, %334 ], [ 0, %305 ]
  %324 = call i8* @sk_value(%struct.stack_st* %310, i64 %323) #10
  %325 = bitcast i8* %324 to i32*
  %326 = load i32, i32* %325, align 8
  %327 = icmp eq i32 %326, 4
  br i1 %327, label %328, label %334

328:                                              ; preds = %322
  %329 = getelementptr inbounds i8, i8* %324, i64 8
  %330 = bitcast i8* %329 to %struct.X509_name_st**
  %331 = load %struct.X509_name_st*, %struct.X509_name_st** %330, align 8
  %332 = call i32 @X509_NAME_cmp(%struct.X509_name_st* nonnull %306, %struct.X509_name_st* %331) #10
  %333 = icmp eq i32 %332, 0
  br i1 %333, label %366, label %334

334:                                              ; preds = %328, %322
  %335 = add nuw i64 %323, 1
  %336 = call i64 @sk_num(%struct.stack_st* %310) #10
  %337 = icmp ult i64 %335, %336
  br i1 %337, label %322, label %371

338:                                              ; preds = %358, %319
  %339 = phi i64 [ 0, %319 ], [ %359, %358 ]
  %340 = load %struct.stack_st*, %struct.stack_st** %315, align 8
  %341 = call i8* @sk_value(%struct.stack_st* %340, i64 %339) #10
  %342 = bitcast i8* %341 to %struct.GENERAL_NAME_st*
  %343 = load %struct.stack_st*, %struct.stack_st** %321, align 8
  %344 = call i64 @sk_num(%struct.stack_st* %343) #10
  %345 = icmp eq i64 %344, 0
  br i1 %345, label %358, label %350

346:                                              ; preds = %350
  %347 = load %struct.stack_st*, %struct.stack_st** %321, align 8
  %348 = call i64 @sk_num(%struct.stack_st* %347) #10
  %349 = icmp ult i64 %357, %348
  br i1 %349, label %350, label %358

350:                                              ; preds = %338, %346
  %351 = phi i64 [ %357, %346 ], [ 0, %338 ]
  %352 = load %struct.stack_st*, %struct.stack_st** %321, align 8
  %353 = call i8* @sk_value(%struct.stack_st* %352, i64 %351) #10
  %354 = bitcast i8* %353 to %struct.GENERAL_NAME_st*
  %355 = call i32 @GENERAL_NAME_cmp(%struct.GENERAL_NAME_st* %342, %struct.GENERAL_NAME_st* %354) #10
  %356 = icmp eq i32 %355, 0
  %357 = add nuw i64 %351, 1
  br i1 %356, label %366, label %346

358:                                              ; preds = %346, %338
  %359 = add nuw i64 %339, 1
  %360 = load %struct.stack_st*, %struct.stack_st** %315, align 8
  %361 = call i64 @sk_num(%struct.stack_st* %360) #10
  %362 = icmp ult i64 %359, %361
  br i1 %362, label %338, label %371

363:                                              ; preds = %293
  %364 = call i32 @X509_NAME_cmp(%struct.X509_name_st* nonnull %287, %struct.X509_name_st* nonnull %295) #10
  %365 = icmp eq i32 %364, 0
  br i1 %365, label %366, label %371

366:                                              ; preds = %363, %273, %270, %328, %350
  %367 = getelementptr inbounds i8, i8* %240, i64 24
  %368 = bitcast i8* %367 to i32*
  %369 = load i32, i32* %368, align 8
  %370 = and i32 %369, %228
  br label %388

371:                                              ; preds = %264, %358, %334, %363, %313, %305, %301, %293, %285, %269, %246
  %372 = add nuw i64 %238, 1
  %373 = load %struct.stack_st*, %struct.stack_st** %26, align 8
  %374 = call i64 @sk_num(%struct.stack_st* %373) #10
  %375 = icmp ult i64 %372, %374
  br i1 %375, label %237, label %376

376:                                              ; preds = %371, %225
  %377 = getelementptr inbounds i8, i8* %36, i64 40
  %378 = bitcast i8* %377 to %struct.ISSUING_DIST_POINT_st**
  %379 = load %struct.ISSUING_DIST_POINT_st*, %struct.ISSUING_DIST_POINT_st** %378, align 8
  %380 = icmp eq %struct.ISSUING_DIST_POINT_st* %379, null
  br i1 %380, label %385, label %381

381:                                              ; preds = %376
  %382 = getelementptr inbounds %struct.ISSUING_DIST_POINT_st, %struct.ISSUING_DIST_POINT_st* %379, i64 0, i32 0
  %383 = load %struct.DIST_POINT_NAME_st*, %struct.DIST_POINT_NAME_st** %382, align 8
  %384 = icmp eq %struct.DIST_POINT_NAME_st* %383, null
  br i1 %384, label %385, label %396

385:                                              ; preds = %381, %376
  %386 = and i32 %208, 32
  %387 = icmp eq i32 %386, 0
  br i1 %387, label %396, label %388

388:                                              ; preds = %385, %366
  %389 = phi i32 [ %228, %385 ], [ %370, %366 ]
  %390 = xor i32 %38, -1
  %391 = and i32 %389, %390
  %392 = icmp eq i32 %391, 0
  br i1 %392, label %419, label %393

393:                                              ; preds = %388
  %394 = or i32 %389, %38
  %395 = or i32 %208, 128
  br label %396

396:                                              ; preds = %211, %219, %222, %381, %385, %393
  %397 = phi i32 [ %394, %393 ], [ %38, %211 ], [ %38, %219 ], [ %38, %222 ], [ %38, %385 ], [ %38, %381 ]
  %398 = phi i32 [ %395, %393 ], [ %208, %211 ], [ %208, %219 ], [ %208, %222 ], [ %208, %385 ], [ %208, %381 ]
  %399 = icmp slt i32 %398, %34
  %400 = icmp eq i32 %398, 0
  %401 = or i1 %399, %400
  br i1 %401, label %419, label %402

402:                                              ; preds = %396
  %403 = icmp eq i32 %398, %34
  %404 = icmp ne %struct.X509_crl_st* %31, null
  %405 = and i1 %404, %403
  br i1 %405, label %406, label %417

406:                                              ; preds = %402
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27) #10
  store i32 -1431655766, i32* %8, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #10
  store i32 -1431655766, i32* %9, align 4
  %407 = call %struct.asn1_string_st* @X509_CRL_get0_lastUpdate(%struct.X509_crl_st* nonnull %31) #10
  %408 = call %struct.asn1_string_st* @X509_CRL_get0_lastUpdate(%struct.X509_crl_st* %37) #10
  %409 = call i32 @ASN1_TIME_diff(i32* nonnull %8, i32* nonnull %9, %struct.asn1_string_st* %407, %struct.asn1_string_st* %408) #10
  %410 = icmp eq i32 %409, 0
  br i1 %410, label %418, label %411

411:                                              ; preds = %406
  %412 = load i32, i32* %8, align 4
  %413 = icmp sgt i32 %412, 0
  %414 = load i32, i32* %9, align 4
  %415 = icmp sgt i32 %414, 0
  %416 = or i1 %413, %415
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #10
  br i1 %416, label %417, label %419

417:                                              ; preds = %411, %402
  br label %419

418:                                              ; preds = %406
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #10
  br label %419

419:                                              ; preds = %388, %206, %73, %63, %56, %50, %29, %418, %411, %396, %417
  %420 = phi %struct.x509_st* [ %207, %396 ], [ %207, %417 ], [ %207, %411 ], [ %207, %418 ], [ %35, %29 ], [ %35, %56 ], [ %35, %63 ], [ %35, %50 ], [ %35, %73 ], [ %207, %388 ], [ %207, %206 ]
  %421 = phi i32 [ %34, %396 ], [ %398, %417 ], [ %34, %411 ], [ %34, %418 ], [ %34, %29 ], [ %34, %56 ], [ %34, %63 ], [ %34, %50 ], [ %34, %73 ], [ %34, %388 ], [ %34, %206 ]
  %422 = phi i32 [ %32, %396 ], [ %397, %417 ], [ %32, %411 ], [ %32, %418 ], [ %32, %29 ], [ %32, %56 ], [ %32, %63 ], [ %32, %50 ], [ %32, %73 ], [ %32, %388 ], [ %32, %206 ]
  %423 = phi %struct.X509_crl_st* [ %31, %396 ], [ %37, %417 ], [ %31, %411 ], [ %31, %418 ], [ %31, %29 ], [ %31, %56 ], [ %31, %63 ], [ %31, %50 ], [ %31, %73 ], [ %31, %388 ], [ %31, %206 ]
  %424 = phi %struct.x509_st* [ %30, %396 ], [ %207, %417 ], [ %30, %411 ], [ %30, %418 ], [ %30, %29 ], [ %30, %56 ], [ %30, %63 ], [ %30, %50 ], [ %30, %73 ], [ %30, %388 ], [ %30, %206 ]
  %425 = add nuw i64 %33, 1
  %426 = call i64 @sk_num(%struct.stack_st* %13) #10
  %427 = icmp ult i64 %425, %426
  br i1 %427, label %29, label %428

428:                                              ; preds = %419
  %429 = icmp eq %struct.X509_crl_st* %423, null
  br i1 %429, label %510, label %430

430:                                              ; preds = %428
  %431 = load %struct.X509_crl_st*, %struct.X509_crl_st** %1, align 8
  %432 = icmp eq %struct.X509_crl_st* %431, null
  br i1 %432, label %434, label %433

433:                                              ; preds = %430
  call void @X509_CRL_free(%struct.X509_crl_st* nonnull %431) #10
  br label %434

434:                                              ; preds = %430, %433
  store %struct.X509_crl_st* %423, %struct.X509_crl_st** %1, align 8
  store %struct.x509_st* %424, %struct.x509_st** %3, align 8
  store i32 %421, i32* %4, align 4
  store i32 %422, i32* %5, align 4
  %435 = call i32 @X509_CRL_up_ref(%struct.X509_crl_st* nonnull %423) #10
  %436 = load %struct.X509_crl_st*, %struct.X509_crl_st** %2, align 8
  %437 = icmp eq %struct.X509_crl_st* %436, null
  br i1 %437, label %439, label %438

438:                                              ; preds = %434
  call void @X509_CRL_free(%struct.X509_crl_st* nonnull %436) #10
  store %struct.X509_crl_st* null, %struct.X509_crl_st** %2, align 8
  br label %439

439:                                              ; preds = %434, %438
  %440 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %441 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %440, align 8
  %442 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %441, i64 0, i32 3
  %443 = load i64, i64* %442, align 8
  %444 = and i64 %443, 8192
  %445 = icmp eq i64 %444, 0
  br i1 %445, label %510, label %446

446:                                              ; preds = %439
  %447 = load %struct.x509_st*, %struct.x509_st** %11, align 8
  %448 = getelementptr inbounds %struct.x509_st, %struct.x509_st* %447, i64 0, i32 7
  %449 = load i64, i64* %448, align 8
  %450 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %423, i64 0, i32 4
  %451 = load i32, i32* %450, align 4
  %452 = zext i32 %451 to i64
  %453 = or i64 %449, %452
  %454 = and i64 %453, 4096
  %455 = icmp eq i64 %454, 0
  br i1 %455, label %510, label %456

456:                                              ; preds = %446
  %457 = call i64 @sk_num(%struct.stack_st* %13) #10
  %458 = icmp eq i64 %457, 0
  br i1 %458, label %509, label %459

459:                                              ; preds = %456
  %460 = getelementptr inbounds %struct.X509_crl_st, %struct.X509_crl_st* %423, i64 0, i32 9
  br label %461

461:                                              ; preds = %505, %459
  %462 = phi i64 [ 0, %459 ], [ %506, %505 ]
  %463 = call i8* @sk_value(%struct.stack_st* %13, i64 %462) #10
  %464 = bitcast i8* %463 to %struct.X509_crl_st*
  %465 = getelementptr inbounds i8, i8* %463, i64 64
  %466 = bitcast i8* %465 to %struct.asn1_string_st**
  %467 = load %struct.asn1_string_st*, %struct.asn1_string_st** %466, align 8
  %468 = icmp eq %struct.asn1_string_st* %467, null
  br i1 %468, label %505, label %469

469:                                              ; preds = %461
  %470 = load %struct.asn1_string_st*, %struct.asn1_string_st** %460, align 8
  %471 = icmp eq %struct.asn1_string_st* %470, null
  br i1 %471, label %505, label %472

472:                                              ; preds = %469
  %473 = call %struct.X509_name_st* @X509_CRL_get_issuer(%struct.X509_crl_st* nonnull %423) #10
  %474 = call %struct.X509_name_st* @X509_CRL_get_issuer(%struct.X509_crl_st* %464) #10
  %475 = call i32 @X509_NAME_cmp(%struct.X509_name_st* %473, %struct.X509_name_st* %474) #10
  %476 = icmp eq i32 %475, 0
  br i1 %476, label %477, label %505

477:                                              ; preds = %472
  %478 = call fastcc i32 @crl_extension_match(%struct.X509_crl_st* %464, %struct.X509_crl_st* nonnull %423, i32 90) #10
  %479 = icmp eq i32 %478, 0
  br i1 %479, label %505, label %480

480:                                              ; preds = %477
  %481 = call fastcc i32 @crl_extension_match(%struct.X509_crl_st* %464, %struct.X509_crl_st* nonnull %423, i32 770) #10
  %482 = icmp eq i32 %481, 0
  br i1 %482, label %505, label %483

483:                                              ; preds = %480
  %484 = load %struct.asn1_string_st*, %struct.asn1_string_st** %466, align 8
  %485 = load %struct.asn1_string_st*, %struct.asn1_string_st** %460, align 8
  %486 = call i32 @ASN1_INTEGER_cmp(%struct.asn1_string_st* %484, %struct.asn1_string_st* %485) #10
  %487 = icmp sgt i32 %486, 0
  br i1 %487, label %505, label %488

488:                                              ; preds = %483
  %489 = getelementptr inbounds i8, i8* %463, i64 56
  %490 = bitcast i8* %489 to %struct.asn1_string_st**
  %491 = load %struct.asn1_string_st*, %struct.asn1_string_st** %490, align 8
  %492 = load %struct.asn1_string_st*, %struct.asn1_string_st** %460, align 8
  %493 = call i32 @ASN1_INTEGER_cmp(%struct.asn1_string_st* %491, %struct.asn1_string_st* %492) #10
  %494 = icmp slt i32 %493, 1
  br i1 %494, label %505, label %495

495:                                              ; preds = %488
  %496 = bitcast i8* %463 to %struct.X509_crl_st*
  %497 = call fastcc i32 @check_crl_time(%struct.x509_store_ctx_st* %0, %struct.X509_crl_st* %496, i32 0) #10
  %498 = icmp eq i32 %497, 0
  br i1 %498, label %502, label %499

499:                                              ; preds = %495
  %500 = load i32, i32* %4, align 4
  %501 = or i32 %500, 2
  store i32 %501, i32* %4, align 4
  br label %502

502:                                              ; preds = %499, %495
  %503 = call i32 @X509_CRL_up_ref(%struct.X509_crl_st* %496) #10
  %504 = bitcast %struct.X509_crl_st** %2 to i8**
  store i8* %463, i8** %504, align 8
  br label %510

505:                                              ; preds = %488, %483, %480, %477, %472, %469, %461
  %506 = add nuw i64 %462, 1
  %507 = call i64 @sk_num(%struct.stack_st* %13) #10
  %508 = icmp ult i64 %506, %507
  br i1 %508, label %461, label %509

509:                                              ; preds = %505, %456
  store %struct.X509_crl_st* null, %struct.X509_crl_st** %2, align 8
  br label %510

510:                                              ; preds = %7, %509, %502, %446, %439, %428
  %511 = phi i32 [ %421, %509 ], [ %421, %502 ], [ %421, %446 ], [ %421, %439 ], [ %421, %428 ], [ %10, %7 ]
  %512 = icmp sgt i32 %511, 447
  %513 = zext i1 %512 to i32
  ret i32 %513
}

declare i32 @X509_CRL_up_ref(%struct.X509_crl_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @check_crl_time(%struct.x509_store_ctx_st*, %struct.X509_crl_st*, i32) unnamed_addr #0 {
  %4 = icmp ne i32 %2, 0
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 27
  store %struct.X509_crl_st* %1, %struct.X509_crl_st** %6, align 8
  br label %7

7:                                                ; preds = %5, %3
  %8 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 4
  %9 = load %struct.X509_VERIFY_PARAM_st*, %struct.X509_VERIFY_PARAM_st** %8, align 8
  %10 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %9, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = and i64 %11, 2
  %13 = icmp eq i64 %12, 0
  %14 = getelementptr inbounds %struct.X509_VERIFY_PARAM_st, %struct.X509_VERIFY_PARAM_st* %9, i64 0, i32 1
  %15 = select i1 %13, i64* null, i64* %14
  %16 = tail call %struct.asn1_string_st* @X509_CRL_get0_lastUpdate(%struct.X509_crl_st* %1) #10
  %17 = tail call i32 @X509_cmp_time(%struct.asn1_string_st* %16, i64* %15)
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %26

19:                                               ; preds = %7
  br i1 %4, label %20, label %66

20:                                               ; preds = %19
  %21 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 15, i32* %21, align 8
  %22 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %23 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %22, align 8
  %24 = tail call i32 %23(i32 0, %struct.x509_store_ctx_st* %0) #10
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %66, label %35

26:                                               ; preds = %7
  %27 = icmp sgt i32 %17, 0
  br i1 %27, label %28, label %35

28:                                               ; preds = %26
  br i1 %4, label %29, label %66

29:                                               ; preds = %28
  %30 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 11, i32* %30, align 8
  %31 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %32 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %31, align 8
  %33 = tail call i32 %32(i32 0, %struct.x509_store_ctx_st* %0) #10
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %66, label %35

35:                                               ; preds = %20, %29, %26
  %36 = tail call %struct.asn1_string_st* @X509_CRL_get0_nextUpdate(%struct.X509_crl_st* %1) #10
  %37 = icmp eq %struct.asn1_string_st* %36, null
  br i1 %37, label %63, label %38

38:                                               ; preds = %35
  %39 = tail call %struct.asn1_string_st* @X509_CRL_get0_nextUpdate(%struct.X509_crl_st* %1) #10
  %40 = tail call i32 @X509_cmp_time(%struct.asn1_string_st* %39, i64* %15)
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %49

42:                                               ; preds = %38
  br i1 %4, label %43, label %66

43:                                               ; preds = %42
  %44 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 16, i32* %44, align 8
  %45 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %46 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %45, align 8
  %47 = tail call i32 %46(i32 0, %struct.x509_store_ctx_st* %0) #10
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %66, label %64

49:                                               ; preds = %38
  %50 = icmp slt i32 %40, 0
  br i1 %50, label %51, label %63

51:                                               ; preds = %49
  %52 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 28
  %53 = load i32, i32* %52, align 8
  %54 = and i32 %53, 2
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %63

56:                                               ; preds = %51
  br i1 %4, label %57, label %66

57:                                               ; preds = %56
  %58 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 24
  store i32 12, i32* %58, align 8
  %59 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 7
  %60 = load i32 (i32, %struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)** %59, align 8
  %61 = tail call i32 %60(i32 0, %struct.x509_store_ctx_st* %0) #10
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %66, label %64

63:                                               ; preds = %51, %35, %49
  br i1 %4, label %64, label %66

64:                                               ; preds = %43, %57, %63
  %65 = getelementptr inbounds %struct.x509_store_ctx_st, %struct.x509_store_ctx_st* %0, i64 0, i32 27
  store %struct.X509_crl_st* null, %struct.X509_crl_st** %65, align 8
  br label %66

66:                                               ; preds = %57, %63, %64, %56, %43, %42, %29, %28, %20, %19
  %67 = phi i32 [ 0, %19 ], [ 0, %20 ], [ 0, %28 ], [ 0, %29 ], [ 0, %42 ], [ 0, %43 ], [ 0, %56 ], [ 0, %57 ], [ 1, %64 ], [ 1, %63 ]
  ret i32 %67
}

declare i32 @X509_check_akid(%struct.x509_st*, %struct.AUTHORITY_KEYID_st*) local_unnamed_addr #2

declare i32 @GENERAL_NAME_cmp(%struct.GENERAL_NAME_st*, %struct.GENERAL_NAME_st*) local_unnamed_addr #2

declare void @sk_pop_free_ex(%struct.stack_st*, void (void (i8*)*, i8*)*, void (i8*)*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_X509_CRL_call_free_func(void (i8*)* nocapture, i8*) #9 {
  %3 = bitcast void (i8*)* %0 to void (%struct.X509_crl_st*)*
  %4 = bitcast i8* %1 to %struct.X509_crl_st*
  tail call void %3(%struct.X509_crl_st* %4) #10
  ret void
}

declare i32 @X509_CRL_check_suiteb(%struct.X509_crl_st*, %struct.evp_pkey_st*, i64) local_unnamed_addr #2

declare i32 @X509_CRL_get0_by_cert(%struct.X509_crl_st*, %struct.x509_revoked_st**, %struct.x509_st*) local_unnamed_addr #2

declare i32 @X509_policy_check(%struct.X509_POLICY_TREE_st**, i32*, %struct.stack_st_X509*, %struct.stack_st_ASN1_OBJECT*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @sk_X509_call_free_func(void (i8*)* nocapture, i8*) #9 {
  %3 = bitcast void (i8*)* %0 to void (%struct.x509_st*)*
  %4 = bitcast i8* %1 to %struct.x509_st*
  tail call void %3(%struct.x509_st* %4) #10
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { nounwind readonly }
attributes #12 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
