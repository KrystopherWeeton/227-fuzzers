; ModuleID = '../../base/third_party/libevent/event_tagging.c'
source_filename = "../../base/third_party/libevent/event_tagging.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.evbuffer = type { i8*, i8*, i64, i64, i64, void (%struct.evbuffer*, i64, i64, i8*)*, i8* }
%struct.timeval = type { i64, i64 }

@_buf = internal unnamed_addr global %struct.evbuffer* null, align 8
@.str = private unnamed_addr constant [11 x i8] c"%s: malloc\00", align 1
@__func__.evtag_init = private unnamed_addr constant [11 x i8] c"evtag_init\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"%s: calloc\00", align 1
@__func__.evtag_unmarshal_string = private unnamed_addr constant [23 x i8] c"evtag_unmarshal_string\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @evtag_init() local_unnamed_addr #0 {
  %1 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %2 = icmp eq %struct.evbuffer* %1, null
  br i1 %2, label %3, label %7

3:                                                ; preds = %0
  %4 = tail call %struct.evbuffer* @evbuffer_new() #6
  store %struct.evbuffer* %4, %struct.evbuffer** @_buf, align 8
  %5 = icmp eq %struct.evbuffer* %4, null
  br i1 %5, label %6, label %7

6:                                                ; preds = %3
  tail call void (i32, i8*, ...) @event_err(i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__func__.evtag_init, i64 0, i64 0)) #6
  br label %7

7:                                                ; preds = %0, %6, %3
  ret void
}

declare %struct.evbuffer* @evbuffer_new() local_unnamed_addr #1

declare void @event_err(i32, i8*, ...) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @encode_int(%struct.evbuffer*, i32) local_unnamed_addr #0 {
  %3 = alloca [5 x i8], align 1
  %4 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %4) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %4, i8 0, i64 5, i1 false)
  %5 = icmp eq i32 %1, 0
  br i1 %5, label %41, label %6

6:                                                ; preds = %2, %24
  %7 = phi i32 [ %28, %24 ], [ 1, %2 ]
  %8 = phi i32 [ %27, %24 ], [ %1, %2 ]
  %9 = and i32 %7, 1
  %10 = icmp eq i32 %9, 0
  %11 = lshr i32 %7, 1
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 %12
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  br i1 %10, label %20, label %16

16:                                               ; preds = %6
  %17 = and i32 %15, 240
  %18 = and i32 %8, 15
  %19 = or i32 %17, %18
  br label %24

20:                                               ; preds = %6
  %21 = and i32 %15, 15
  %22 = shl i32 %8, 4
  %23 = or i32 %21, %22
  br label %24

24:                                               ; preds = %20, %16
  %25 = phi i32 [ %23, %20 ], [ %19, %16 ]
  %26 = trunc i32 %25 to i8
  store i8 %26, i8* %13, align 1
  %27 = lshr i32 %8, 4
  %28 = add nuw nsw i32 %7, 1
  %29 = icmp eq i32 %27, 0
  br i1 %29, label %30, label %6

30:                                               ; preds = %24
  %31 = load i8, i8* %4, align 1
  %32 = and i8 %31, 15
  %33 = icmp ugt i32 %7, 1
  %34 = trunc i32 %28 to i8
  %35 = shl i8 %34, 4
  %36 = add i8 %35, -32
  %37 = select i1 %33, i8 %36, i8 0
  %38 = add nuw i32 %7, 2
  %39 = lshr i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %30, %2
  %42 = phi i64 [ 1, %2 ], [ %40, %30 ]
  %43 = phi i8 [ 0, %2 ], [ %32, %30 ]
  %44 = phi i8 [ 0, %2 ], [ %37, %30 ]
  %45 = or i8 %43, %44
  store i8 %45, i8* %4, align 1
  %46 = call i32 @evbuffer_add(%struct.evbuffer* %0, i8* nonnull %4, i64 %42) #6
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %4) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @evbuffer_add(%struct.evbuffer*, i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @evtag_encode_tag(%struct.evbuffer*, i32) local_unnamed_addr #0 {
  %3 = alloca [5 x i8], align 1
  %4 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %4) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %4, i8 0, i64 5, i1 false)
  br label %5

5:                                                ; preds = %5, %2
  %6 = phi i64 [ %14, %5 ], [ 0, %2 ]
  %7 = phi i32 [ %10, %5 ], [ %1, %2 ]
  %8 = trunc i32 %7 to i8
  %9 = and i8 %8, 127
  %10 = lshr i32 %7, 7
  %11 = icmp ne i32 %10, 0
  %12 = or i8 %8, -128
  %13 = select i1 %11, i8 %12, i8 %9
  %14 = add nuw nsw i64 %6, 1
  %15 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 %6
  store i8 %13, i8* %15, align 1
  br i1 %11, label %5, label %16

16:                                               ; preds = %5
  %17 = trunc i64 %14 to i32
  %18 = icmp eq %struct.evbuffer* %0, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %16
  %20 = and i64 %14, 4294967295
  %21 = call i32 @evbuffer_add(%struct.evbuffer* nonnull %0, i8* nonnull %4, i64 %20) #6
  br label %22

22:                                               ; preds = %16, %19
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %4) #6
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @evtag_decode_tag(i32*, %struct.evbuffer*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %1, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %1, i64 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = trunc i64 %6 to i32
  br label %8

8:                                                ; preds = %15, %2
  %9 = phi i32 [ 0, %2 ], [ %21, %15 ]
  %10 = phi i8* [ %4, %2 ], [ %16, %15 ]
  %11 = phi i32 [ 0, %2 ], [ %13, %15 ]
  %12 = phi i32 [ 0, %2 ], [ %22, %15 ]
  %13 = add nuw nsw i32 %11, 1
  %14 = icmp slt i32 %11, %7
  br i1 %14, label %15, label %28

15:                                               ; preds = %8
  %16 = getelementptr inbounds i8, i8* %10, i64 1
  %17 = load i8, i8* %10, align 1
  %18 = and i8 %17, 127
  %19 = zext i8 %18 to i32
  %20 = shl i32 %19, %12
  %21 = or i32 %20, %9
  %22 = add nuw nsw i32 %12, 7
  %23 = icmp slt i8 %17, 0
  br i1 %23, label %8, label %24

24:                                               ; preds = %15
  %25 = zext i32 %13 to i64
  tail call void @evbuffer_drain(%struct.evbuffer* %1, i64 %25) #6
  %26 = icmp eq i32* %0, null
  br i1 %26, label %28, label %27

27:                                               ; preds = %24
  store i32 %21, i32* %0, align 4
  br label %28

28:                                               ; preds = %8, %24, %27
  %29 = phi i32 [ %13, %24 ], [ %13, %27 ], [ -1, %8 ]
  ret i32 %29
}

; Function Attrs: nounwind ssp uwtable
define hidden void @evtag_marshal(%struct.evbuffer*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = alloca [5 x i8], align 1
  %6 = getelementptr inbounds [5 x i8], [5 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %6) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %6, i8 0, i64 5, i1 false) #6
  br label %7

7:                                                ; preds = %7, %4
  %8 = phi i64 [ %16, %7 ], [ 0, %4 ]
  %9 = phi i32 [ %12, %7 ], [ %1, %4 ]
  %10 = trunc i32 %9 to i8
  %11 = and i8 %10, 127
  %12 = lshr i32 %9, 7
  %13 = icmp ne i32 %12, 0
  %14 = or i8 %10, -128
  %15 = select i1 %13, i8 %14, i8 %11
  %16 = add nuw nsw i64 %8, 1
  %17 = getelementptr inbounds [5 x i8], [5 x i8]* %5, i64 0, i64 %8
  store i8 %15, i8* %17, align 1
  br i1 %13, label %7, label %18

18:                                               ; preds = %7
  %19 = icmp eq %struct.evbuffer* %0, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %18
  %21 = and i64 %16, 4294967295
  %22 = call i32 @evbuffer_add(%struct.evbuffer* nonnull %0, i8* nonnull %6, i64 %21) #6
  br label %23

23:                                               ; preds = %18, %20
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %6) #6
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %6) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %6, i8 0, i64 5, i1 false) #6
  %24 = icmp eq i32 %3, 0
  br i1 %24, label %60, label %25

25:                                               ; preds = %23, %43
  %26 = phi i32 [ %47, %43 ], [ 1, %23 ]
  %27 = phi i32 [ %46, %43 ], [ %3, %23 ]
  %28 = and i32 %26, 1
  %29 = icmp eq i32 %28, 0
  %30 = lshr i32 %26, 1
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [5 x i8], [5 x i8]* %5, i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  br i1 %29, label %39, label %35

35:                                               ; preds = %25
  %36 = and i32 %34, 240
  %37 = and i32 %27, 15
  %38 = or i32 %36, %37
  br label %43

39:                                               ; preds = %25
  %40 = and i32 %34, 15
  %41 = shl i32 %27, 4
  %42 = or i32 %40, %41
  br label %43

43:                                               ; preds = %39, %35
  %44 = phi i32 [ %42, %39 ], [ %38, %35 ]
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %32, align 1
  %46 = lshr i32 %27, 4
  %47 = add nuw nsw i32 %26, 1
  %48 = icmp eq i32 %46, 0
  br i1 %48, label %49, label %25

49:                                               ; preds = %43
  %50 = load i8, i8* %6, align 1
  %51 = and i8 %50, 15
  %52 = icmp ugt i32 %26, 1
  %53 = trunc i32 %47 to i8
  %54 = shl i8 %53, 4
  %55 = add i8 %54, -32
  %56 = select i1 %52, i8 %55, i8 0
  %57 = add nuw i32 %26, 2
  %58 = lshr i32 %57, 1
  %59 = zext i32 %58 to i64
  br label %60

60:                                               ; preds = %23, %49
  %61 = phi i64 [ 1, %23 ], [ %59, %49 ]
  %62 = phi i8 [ 0, %23 ], [ %51, %49 ]
  %63 = phi i8 [ 0, %23 ], [ %56, %49 ]
  %64 = or i8 %63, %62
  store i8 %64, i8* %6, align 1
  %65 = call i32 @evbuffer_add(%struct.evbuffer* %0, i8* nonnull %6, i64 %61) #6
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %6) #6
  %66 = zext i32 %3 to i64
  %67 = call i32 @evbuffer_add(%struct.evbuffer* %0, i8* %2, i64 %66) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @evtag_marshal_int(%struct.evbuffer*, i32, i32) local_unnamed_addr #0 {
  %4 = alloca [5 x i8], align 1
  %5 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %6 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %5, i64 0, i32 4
  %7 = load i64, i64* %6, align 8
  tail call void @evbuffer_drain(%struct.evbuffer* %5, i64 %7) #6
  %8 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %9 = getelementptr inbounds [5 x i8], [5 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %9) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %9, i8 0, i64 5, i1 false) #6
  %10 = icmp eq i32 %2, 0
  br i1 %10, label %46, label %11

11:                                               ; preds = %3, %29
  %12 = phi i32 [ %33, %29 ], [ 1, %3 ]
  %13 = phi i32 [ %32, %29 ], [ %2, %3 ]
  %14 = and i32 %12, 1
  %15 = icmp eq i32 %14, 0
  %16 = lshr i32 %12, 1
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds [5 x i8], [5 x i8]* %4, i64 0, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  br i1 %15, label %25, label %21

21:                                               ; preds = %11
  %22 = and i32 %20, 240
  %23 = and i32 %13, 15
  %24 = or i32 %22, %23
  br label %29

25:                                               ; preds = %11
  %26 = and i32 %20, 15
  %27 = shl i32 %13, 4
  %28 = or i32 %26, %27
  br label %29

29:                                               ; preds = %25, %21
  %30 = phi i32 [ %28, %25 ], [ %24, %21 ]
  %31 = trunc i32 %30 to i8
  store i8 %31, i8* %18, align 1
  %32 = lshr i32 %13, 4
  %33 = add nuw nsw i32 %12, 1
  %34 = icmp eq i32 %32, 0
  br i1 %34, label %35, label %11

35:                                               ; preds = %29
  %36 = load i8, i8* %9, align 1
  %37 = and i8 %36, 15
  %38 = icmp ugt i32 %12, 1
  %39 = trunc i32 %33 to i8
  %40 = shl i8 %39, 4
  %41 = add i8 %40, -32
  %42 = select i1 %38, i8 %41, i8 0
  %43 = add nuw i32 %12, 2
  %44 = lshr i32 %43, 1
  %45 = zext i32 %44 to i64
  br label %46

46:                                               ; preds = %3, %35
  %47 = phi i64 [ 1, %3 ], [ %45, %35 ]
  %48 = phi i8 [ 0, %3 ], [ %37, %35 ]
  %49 = phi i8 [ 0, %3 ], [ %42, %35 ]
  %50 = or i8 %49, %48
  store i8 %50, i8* %9, align 1
  %51 = call i32 @evbuffer_add(%struct.evbuffer* %8, i8* nonnull %9, i64 %47) #6
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %9) #6
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %9) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %9, i8 0, i64 5, i1 false) #6
  br label %52

52:                                               ; preds = %52, %46
  %53 = phi i64 [ %61, %52 ], [ 0, %46 ]
  %54 = phi i32 [ %57, %52 ], [ %1, %46 ]
  %55 = trunc i32 %54 to i8
  %56 = and i8 %55, 127
  %57 = lshr i32 %54, 7
  %58 = icmp ne i32 %57, 0
  %59 = or i8 %55, -128
  %60 = select i1 %58, i8 %59, i8 %56
  %61 = add nuw nsw i64 %53, 1
  %62 = getelementptr inbounds [5 x i8], [5 x i8]* %4, i64 0, i64 %53
  store i8 %60, i8* %62, align 1
  br i1 %58, label %52, label %63

63:                                               ; preds = %52
  %64 = icmp eq %struct.evbuffer* %0, null
  br i1 %64, label %68, label %65

65:                                               ; preds = %63
  %66 = and i64 %61, 4294967295
  %67 = call i32 @evbuffer_add(%struct.evbuffer* nonnull %0, i8* nonnull %9, i64 %66) #6
  br label %68

68:                                               ; preds = %63, %65
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %9) #6
  %69 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %70 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %69, i64 0, i32 4
  %71 = load i64, i64* %70, align 8
  %72 = trunc i64 %71 to i32
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %9) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %9, i8 0, i64 5, i1 false) #6
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %109, label %74

74:                                               ; preds = %68, %92
  %75 = phi i32 [ %96, %92 ], [ 1, %68 ]
  %76 = phi i32 [ %95, %92 ], [ %72, %68 ]
  %77 = and i32 %75, 1
  %78 = icmp eq i32 %77, 0
  %79 = lshr i32 %75, 1
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds [5 x i8], [5 x i8]* %4, i64 0, i64 %80
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  br i1 %78, label %88, label %84

84:                                               ; preds = %74
  %85 = and i32 %83, 240
  %86 = and i32 %76, 15
  %87 = or i32 %85, %86
  br label %92

88:                                               ; preds = %74
  %89 = and i32 %83, 15
  %90 = shl i32 %76, 4
  %91 = or i32 %89, %90
  br label %92

92:                                               ; preds = %88, %84
  %93 = phi i32 [ %91, %88 ], [ %87, %84 ]
  %94 = trunc i32 %93 to i8
  store i8 %94, i8* %81, align 1
  %95 = lshr i32 %76, 4
  %96 = add nuw nsw i32 %75, 1
  %97 = icmp eq i32 %95, 0
  br i1 %97, label %98, label %74

98:                                               ; preds = %92
  %99 = load i8, i8* %9, align 1
  %100 = and i8 %99, 15
  %101 = icmp ugt i32 %75, 1
  %102 = trunc i32 %96 to i8
  %103 = shl i8 %102, 4
  %104 = add i8 %103, -32
  %105 = select i1 %101, i8 %104, i8 0
  %106 = add nuw i32 %75, 2
  %107 = lshr i32 %106, 1
  %108 = zext i32 %107 to i64
  br label %109

109:                                              ; preds = %68, %98
  %110 = phi i64 [ 1, %68 ], [ %108, %98 ]
  %111 = phi i8 [ 0, %68 ], [ %100, %98 ]
  %112 = phi i8 [ 0, %68 ], [ %105, %98 ]
  %113 = or i8 %112, %111
  store i8 %113, i8* %9, align 1
  %114 = call i32 @evbuffer_add(%struct.evbuffer* %0, i8* nonnull %9, i64 %110) #6
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %9) #6
  %115 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %116 = call i32 @evbuffer_add_buffer(%struct.evbuffer* %0, %struct.evbuffer* %115) #6
  ret void
}

declare void @evbuffer_drain(%struct.evbuffer*, i64) local_unnamed_addr #1

declare i32 @evbuffer_add_buffer(%struct.evbuffer*, %struct.evbuffer*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @evtag_marshal_string(%struct.evbuffer*, i32, i8*) local_unnamed_addr #0 {
  %4 = tail call i64 @strlen(i8* %2) #7
  %5 = trunc i64 %4 to i32
  tail call void @evtag_marshal(%struct.evbuffer* %0, i32 %1, i8* %2, i32 %5)
  ret void
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @evtag_marshal_timeval(%struct.evbuffer*, i32, %struct.timeval* nocapture readonly) local_unnamed_addr #0 {
  %4 = alloca [5 x i8], align 1
  %5 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %6 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %5, i64 0, i32 4
  %7 = load i64, i64* %6, align 8
  tail call void @evbuffer_drain(%struct.evbuffer* %5, i64 %7) #6
  %8 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %9 = getelementptr inbounds %struct.timeval, %struct.timeval* %2, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = trunc i64 %10 to i32
  %12 = getelementptr inbounds [5 x i8], [5 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %12) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %12, i8 0, i64 5, i1 false) #6
  %13 = icmp eq i32 %11, 0
  br i1 %13, label %49, label %14

14:                                               ; preds = %3, %32
  %15 = phi i32 [ %36, %32 ], [ 1, %3 ]
  %16 = phi i32 [ %35, %32 ], [ %11, %3 ]
  %17 = and i32 %15, 1
  %18 = icmp eq i32 %17, 0
  %19 = lshr i32 %15, 1
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds [5 x i8], [5 x i8]* %4, i64 0, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  br i1 %18, label %28, label %24

24:                                               ; preds = %14
  %25 = and i32 %23, 240
  %26 = and i32 %16, 15
  %27 = or i32 %25, %26
  br label %32

28:                                               ; preds = %14
  %29 = and i32 %23, 15
  %30 = shl i32 %16, 4
  %31 = or i32 %29, %30
  br label %32

32:                                               ; preds = %28, %24
  %33 = phi i32 [ %31, %28 ], [ %27, %24 ]
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %21, align 1
  %35 = lshr i32 %16, 4
  %36 = add nuw nsw i32 %15, 1
  %37 = icmp eq i32 %35, 0
  br i1 %37, label %38, label %14

38:                                               ; preds = %32
  %39 = load i8, i8* %12, align 1
  %40 = and i8 %39, 15
  %41 = icmp ugt i32 %15, 1
  %42 = trunc i32 %36 to i8
  %43 = shl i8 %42, 4
  %44 = add i8 %43, -32
  %45 = select i1 %41, i8 %44, i8 0
  %46 = add nuw i32 %15, 2
  %47 = lshr i32 %46, 1
  %48 = zext i32 %47 to i64
  br label %49

49:                                               ; preds = %3, %38
  %50 = phi i64 [ 1, %3 ], [ %48, %38 ]
  %51 = phi i8 [ 0, %3 ], [ %40, %38 ]
  %52 = phi i8 [ 0, %3 ], [ %45, %38 ]
  %53 = or i8 %52, %51
  store i8 %53, i8* %12, align 1
  %54 = call i32 @evbuffer_add(%struct.evbuffer* %8, i8* nonnull %12, i64 %50) #6
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %12) #6
  %55 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %56 = getelementptr inbounds %struct.timeval, %struct.timeval* %2, i64 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = trunc i64 %57 to i32
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %12) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %12, i8 0, i64 5, i1 false) #6
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %95, label %60

60:                                               ; preds = %49, %78
  %61 = phi i32 [ %82, %78 ], [ 1, %49 ]
  %62 = phi i32 [ %81, %78 ], [ %58, %49 ]
  %63 = and i32 %61, 1
  %64 = icmp eq i32 %63, 0
  %65 = lshr i32 %61, 1
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds [5 x i8], [5 x i8]* %4, i64 0, i64 %66
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  br i1 %64, label %74, label %70

70:                                               ; preds = %60
  %71 = and i32 %69, 240
  %72 = and i32 %62, 15
  %73 = or i32 %71, %72
  br label %78

74:                                               ; preds = %60
  %75 = and i32 %69, 15
  %76 = shl i32 %62, 4
  %77 = or i32 %75, %76
  br label %78

78:                                               ; preds = %74, %70
  %79 = phi i32 [ %77, %74 ], [ %73, %70 ]
  %80 = trunc i32 %79 to i8
  store i8 %80, i8* %67, align 1
  %81 = lshr i32 %62, 4
  %82 = add nuw nsw i32 %61, 1
  %83 = icmp eq i32 %81, 0
  br i1 %83, label %84, label %60

84:                                               ; preds = %78
  %85 = load i8, i8* %12, align 1
  %86 = and i8 %85, 15
  %87 = icmp ugt i32 %61, 1
  %88 = trunc i32 %82 to i8
  %89 = shl i8 %88, 4
  %90 = add i8 %89, -32
  %91 = select i1 %87, i8 %90, i8 0
  %92 = add nuw i32 %61, 2
  %93 = lshr i32 %92, 1
  %94 = zext i32 %93 to i64
  br label %95

95:                                               ; preds = %49, %84
  %96 = phi i64 [ 1, %49 ], [ %94, %84 ]
  %97 = phi i8 [ 0, %49 ], [ %86, %84 ]
  %98 = phi i8 [ 0, %49 ], [ %91, %84 ]
  %99 = or i8 %98, %97
  store i8 %99, i8* %12, align 1
  %100 = call i32 @evbuffer_add(%struct.evbuffer* %55, i8* nonnull %12, i64 %96) #6
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %12) #6
  %101 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %102 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %101, i64 0, i32 0
  %103 = load i8*, i8** %102, align 8
  %104 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %101, i64 0, i32 4
  %105 = load i64, i64* %104, align 8
  %106 = trunc i64 %105 to i32
  call void @evtag_marshal(%struct.evbuffer* %0, i32 %1, i8* %103, i32 %106)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @evtag_decode_int(i32* nocapture, %struct.evbuffer*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %1, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %1, i64 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = trunc i64 %6 to i32
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %77, label %9

9:                                                ; preds = %2
  %10 = load i8, i8* %4, align 1
  %11 = lshr i8 %10, 4
  %12 = add nuw nsw i8 %11, 1
  %13 = zext i8 %12 to i32
  %14 = icmp slt i8 %10, 0
  br i1 %14, label %77, label %15

15:                                               ; preds = %9
  %16 = lshr i32 %13, 1
  %17 = add nuw nsw i32 %16, 1
  %18 = icmp slt i32 %16, %7
  br i1 %18, label %19, label %77

19:                                               ; preds = %15
  %20 = and i32 %13, 1
  %21 = icmp eq i8 %11, 0
  br i1 %21, label %57, label %22

22:                                               ; preds = %19
  %23 = sub nsw i32 %13, %20
  %24 = and i32 %13, 1
  %25 = icmp eq i32 %24, 0
  %26 = icmp eq i32 %24, 0
  br label %27

27:                                               ; preds = %27, %22
  %28 = phi i32 [ %13, %22 ], [ %52, %27 ]
  %29 = phi i32 [ 0, %22 ], [ %51, %27 ]
  %30 = phi i32 [ %23, %22 ], [ %53, %27 ]
  %31 = shl i32 %29, 4
  %32 = lshr i32 %28, 1
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %4, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = and i32 %36, 15
  %38 = lshr i32 %36, 4
  %39 = select i1 %25, i32 %38, i32 %37
  %40 = or i32 %39, %31
  %41 = add nsw i32 %28, -1
  %42 = shl i32 %40, 4
  %43 = lshr i32 %41, 1
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %4, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = and i32 %47, 15
  %49 = lshr i32 %47, 4
  %50 = select i1 %26, i32 %48, i32 %49
  %51 = or i32 %50, %42
  %52 = add nsw i32 %28, -2
  %53 = add i32 %30, -2
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %27

55:                                               ; preds = %27
  %56 = shl i32 %51, 4
  br label %57

57:                                               ; preds = %55, %19
  %58 = phi i32 [ undef, %19 ], [ %51, %55 ]
  %59 = phi i32 [ %13, %19 ], [ %52, %55 ]
  %60 = phi i32 [ 0, %19 ], [ %56, %55 ]
  %61 = icmp eq i32 %20, 0
  br i1 %61, label %74, label %62

62:                                               ; preds = %57
  %63 = lshr i32 %59, 1
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %4, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = and i32 %59, 1
  %69 = icmp eq i32 %68, 0
  %70 = lshr i32 %67, 4
  %71 = and i32 %67, 15
  %72 = select i1 %69, i32 %70, i32 %71
  %73 = or i32 %72, %60
  br label %74

74:                                               ; preds = %57, %62
  %75 = phi i32 [ %58, %57 ], [ %73, %62 ]
  %76 = zext i32 %17 to i64
  tail call void @evbuffer_drain(%struct.evbuffer* %1, i64 %76) #6
  store i32 %75, i32* %0, align 4
  br label %77

77:                                               ; preds = %2, %9, %15, %74
  %78 = phi i32 [ 0, %74 ], [ -1, %2 ], [ -1, %15 ], [ -1, %9 ]
  ret i32 %78
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @evtag_peek(%struct.evbuffer* nocapture readonly, i32*) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %0, i64 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = trunc i64 %6 to i32
  br label %8

8:                                                ; preds = %15, %2
  %9 = phi i32 [ 0, %2 ], [ %21, %15 ]
  %10 = phi i8* [ %4, %2 ], [ %16, %15 ]
  %11 = phi i32 [ 0, %2 ], [ %13, %15 ]
  %12 = phi i32 [ 0, %2 ], [ %22, %15 ]
  %13 = add nuw nsw i32 %11, 1
  %14 = icmp slt i32 %11, %7
  br i1 %14, label %15, label %27

15:                                               ; preds = %8
  %16 = getelementptr inbounds i8, i8* %10, i64 1
  %17 = load i8, i8* %10, align 1
  %18 = and i8 %17, 127
  %19 = zext i8 %18 to i32
  %20 = shl i32 %19, %12
  %21 = or i32 %20, %9
  %22 = add nuw nsw i32 %12, 7
  %23 = icmp slt i8 %17, 0
  br i1 %23, label %8, label %24

24:                                               ; preds = %15
  %25 = icmp eq i32* %1, null
  br i1 %25, label %27, label %26

26:                                               ; preds = %24
  store i32 %21, i32* %1, align 4
  br label %27

27:                                               ; preds = %8, %24, %26
  %28 = phi i32 [ %13, %24 ], [ %13, %26 ], [ -1, %8 ]
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @evtag_peek_length(%struct.evbuffer* nocapture readonly, i32* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %0, i64 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = trunc i64 %6 to i32
  br label %8

8:                                                ; preds = %13, %2
  %9 = phi i8* [ %4, %2 ], [ %14, %13 ]
  %10 = phi i32 [ 0, %2 ], [ %11, %13 ]
  %11 = add nuw nsw i32 %10, 1
  %12 = icmp slt i32 %10, %7
  br i1 %12, label %13, label %91

13:                                               ; preds = %8
  %14 = getelementptr inbounds i8, i8* %9, i64 1
  %15 = load i8, i8* %9, align 1
  %16 = icmp slt i8 %15, 0
  br i1 %16, label %8, label %17

17:                                               ; preds = %13
  %18 = zext i32 %11 to i64
  %19 = getelementptr inbounds i8, i8* %4, i64 %18
  %20 = sub i32 %7, %11
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %91, label %22

22:                                               ; preds = %17
  %23 = load i8, i8* %19, align 1
  %24 = lshr i8 %23, 4
  %25 = add nuw nsw i8 %24, 1
  %26 = zext i8 %25 to i32
  %27 = icmp slt i8 %23, 0
  br i1 %27, label %91, label %28

28:                                               ; preds = %22
  %29 = lshr i32 %26, 1
  %30 = icmp slt i32 %29, %20
  br i1 %30, label %31, label %91

31:                                               ; preds = %28
  %32 = and i32 %26, 1
  %33 = icmp eq i8 %24, 0
  br i1 %33, label %69, label %34

34:                                               ; preds = %31
  %35 = sub nsw i32 %26, %32
  %36 = and i32 %26, 1
  %37 = icmp eq i32 %36, 0
  %38 = icmp eq i32 %36, 0
  br label %39

39:                                               ; preds = %39, %34
  %40 = phi i32 [ %26, %34 ], [ %64, %39 ]
  %41 = phi i32 [ 0, %34 ], [ %63, %39 ]
  %42 = phi i32 [ %35, %34 ], [ %65, %39 ]
  %43 = shl i32 %41, 4
  %44 = lshr i32 %40, 1
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds i8, i8* %19, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = and i32 %48, 15
  %50 = lshr i32 %48, 4
  %51 = select i1 %37, i32 %50, i32 %49
  %52 = or i32 %51, %43
  %53 = add nsw i32 %40, -1
  %54 = shl i32 %52, 4
  %55 = lshr i32 %53, 1
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds i8, i8* %19, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = and i32 %59, 15
  %61 = lshr i32 %59, 4
  %62 = select i1 %38, i32 %60, i32 %61
  %63 = or i32 %62, %54
  %64 = add nsw i32 %40, -2
  %65 = add i32 %42, -2
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %39

67:                                               ; preds = %39
  %68 = shl i32 %63, 4
  br label %69

69:                                               ; preds = %67, %31
  %70 = phi i32 [ undef, %31 ], [ %63, %67 ]
  %71 = phi i32 [ %26, %31 ], [ %64, %67 ]
  %72 = phi i32 [ 0, %31 ], [ %68, %67 ]
  %73 = icmp eq i32 %32, 0
  br i1 %73, label %86, label %74

74:                                               ; preds = %69
  %75 = lshr i32 %71, 1
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %19, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = and i32 %71, 1
  %81 = icmp eq i32 %80, 0
  %82 = lshr i32 %79, 4
  %83 = and i32 %79, 15
  %84 = select i1 %81, i32 %82, i32 %83
  %85 = or i32 %84, %72
  br label %86

86:                                               ; preds = %69, %74
  %87 = phi i32 [ %70, %69 ], [ %85, %74 ]
  %88 = add nuw i32 %10, 2
  %89 = add i32 %88, %29
  %90 = add i32 %89, %87
  store i32 %90, i32* %1, align 4
  br label %91

91:                                               ; preds = %8, %22, %28, %17, %86
  %92 = phi i32 [ 0, %86 ], [ -1, %17 ], [ -1, %28 ], [ -1, %22 ], [ -1, %8 ]
  ret i32 %92
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @evtag_payload_length(%struct.evbuffer* nocapture readonly, i32* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %0, i64 0, i32 4
  %6 = load i64, i64* %5, align 8
  %7 = trunc i64 %6 to i32
  br label %8

8:                                                ; preds = %13, %2
  %9 = phi i8* [ %4, %2 ], [ %14, %13 ]
  %10 = phi i32 [ 0, %2 ], [ %11, %13 ]
  %11 = add nuw nsw i32 %10, 1
  %12 = icmp slt i32 %10, %7
  br i1 %12, label %13, label %88

13:                                               ; preds = %8
  %14 = getelementptr inbounds i8, i8* %9, i64 1
  %15 = load i8, i8* %9, align 1
  %16 = icmp slt i8 %15, 0
  br i1 %16, label %8, label %17

17:                                               ; preds = %13
  %18 = zext i32 %11 to i64
  %19 = getelementptr inbounds i8, i8* %4, i64 %18
  %20 = sub i32 %7, %11
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %88, label %22

22:                                               ; preds = %17
  %23 = load i8, i8* %19, align 1
  %24 = lshr i8 %23, 4
  %25 = add nuw nsw i8 %24, 1
  %26 = zext i8 %25 to i32
  %27 = icmp sgt i8 %23, -1
  %28 = lshr i32 %26, 1
  %29 = icmp slt i32 %28, %20
  %30 = and i1 %27, %29
  br i1 %30, label %31, label %88

31:                                               ; preds = %22
  %32 = and i32 %26, 1
  %33 = icmp eq i8 %24, 0
  br i1 %33, label %69, label %34

34:                                               ; preds = %31
  %35 = sub nsw i32 %26, %32
  %36 = and i32 %26, 1
  %37 = icmp eq i32 %36, 0
  %38 = icmp eq i32 %36, 0
  br label %39

39:                                               ; preds = %39, %34
  %40 = phi i32 [ %26, %34 ], [ %64, %39 ]
  %41 = phi i32 [ 0, %34 ], [ %63, %39 ]
  %42 = phi i32 [ %35, %34 ], [ %65, %39 ]
  %43 = shl i32 %41, 4
  %44 = lshr i32 %40, 1
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds i8, i8* %19, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = and i32 %48, 15
  %50 = lshr i32 %48, 4
  %51 = select i1 %37, i32 %50, i32 %49
  %52 = or i32 %51, %43
  %53 = add nsw i32 %40, -1
  %54 = shl i32 %52, 4
  %55 = lshr i32 %53, 1
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds i8, i8* %19, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = and i32 %59, 15
  %61 = lshr i32 %59, 4
  %62 = select i1 %38, i32 %60, i32 %61
  %63 = or i32 %62, %54
  %64 = add nsw i32 %40, -2
  %65 = add i32 %42, -2
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %39

67:                                               ; preds = %39
  %68 = shl i32 %63, 4
  br label %69

69:                                               ; preds = %67, %31
  %70 = phi i32 [ undef, %31 ], [ %63, %67 ]
  %71 = phi i32 [ %26, %31 ], [ %64, %67 ]
  %72 = phi i32 [ 0, %31 ], [ %68, %67 ]
  %73 = icmp eq i32 %32, 0
  br i1 %73, label %86, label %74

74:                                               ; preds = %69
  %75 = lshr i32 %71, 1
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %19, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = and i32 %71, 1
  %81 = icmp eq i32 %80, 0
  %82 = lshr i32 %79, 4
  %83 = and i32 %79, 15
  %84 = select i1 %81, i32 %82, i32 %83
  %85 = or i32 %84, %72
  br label %86

86:                                               ; preds = %69, %74
  %87 = phi i32 [ %70, %69 ], [ %85, %74 ]
  store i32 %87, i32* %1, align 4
  br label %88

88:                                               ; preds = %8, %17, %22, %86
  %89 = phi i32 [ 0, %86 ], [ -1, %22 ], [ -1, %17 ], [ -1, %8 ]
  ret i32 %89
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @evtag_consume(%struct.evbuffer*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %0, i64 0, i32 4
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i32
  br label %7

7:                                                ; preds = %12, %1
  %8 = phi i8* [ %3, %1 ], [ %13, %12 ]
  %9 = phi i32 [ 0, %1 ], [ %10, %12 ]
  %10 = add nuw nsw i32 %9, 1
  %11 = icmp slt i32 %9, %6
  br i1 %11, label %12, label %91

12:                                               ; preds = %7
  %13 = getelementptr inbounds i8, i8* %8, i64 1
  %14 = load i8, i8* %8, align 1
  %15 = icmp slt i8 %14, 0
  br i1 %15, label %7, label %16

16:                                               ; preds = %12
  %17 = zext i32 %10 to i64
  tail call void @evbuffer_drain(%struct.evbuffer* %0, i64 %17) #6
  %18 = load i8*, i8** %2, align 8
  %19 = load i64, i64* %4, align 8
  %20 = trunc i64 %19 to i32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %91, label %22

22:                                               ; preds = %16
  %23 = load i8, i8* %18, align 1
  %24 = lshr i8 %23, 4
  %25 = add nuw nsw i8 %24, 1
  %26 = zext i8 %25 to i32
  %27 = icmp slt i8 %23, 0
  br i1 %27, label %91, label %28

28:                                               ; preds = %22
  %29 = lshr i32 %26, 1
  %30 = add nuw nsw i32 %29, 1
  %31 = icmp slt i32 %29, %20
  br i1 %31, label %32, label %91

32:                                               ; preds = %28
  %33 = and i32 %26, 1
  %34 = icmp eq i8 %24, 0
  br i1 %34, label %70, label %35

35:                                               ; preds = %32
  %36 = sub nsw i32 %26, %33
  %37 = and i32 %26, 1
  %38 = icmp eq i32 %37, 0
  %39 = icmp eq i32 %37, 0
  br label %40

40:                                               ; preds = %40, %35
  %41 = phi i32 [ %26, %35 ], [ %65, %40 ]
  %42 = phi i32 [ 0, %35 ], [ %64, %40 ]
  %43 = phi i32 [ %36, %35 ], [ %66, %40 ]
  %44 = shl i32 %42, 4
  %45 = lshr i32 %41, 1
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %18, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = and i32 %49, 15
  %51 = lshr i32 %49, 4
  %52 = select i1 %38, i32 %51, i32 %50
  %53 = or i32 %52, %44
  %54 = add nsw i32 %41, -1
  %55 = shl i32 %53, 4
  %56 = lshr i32 %54, 1
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds i8, i8* %18, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = and i32 %60, 15
  %62 = lshr i32 %60, 4
  %63 = select i1 %39, i32 %61, i32 %62
  %64 = or i32 %63, %55
  %65 = add nsw i32 %41, -2
  %66 = add i32 %43, -2
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %40

68:                                               ; preds = %40
  %69 = shl i32 %64, 4
  br label %70

70:                                               ; preds = %68, %32
  %71 = phi i32 [ undef, %32 ], [ %64, %68 ]
  %72 = phi i32 [ %26, %32 ], [ %65, %68 ]
  %73 = phi i32 [ 0, %32 ], [ %69, %68 ]
  %74 = icmp eq i32 %33, 0
  br i1 %74, label %87, label %75

75:                                               ; preds = %70
  %76 = lshr i32 %72, 1
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %18, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = and i32 %72, 1
  %82 = icmp eq i32 %81, 0
  %83 = lshr i32 %80, 4
  %84 = and i32 %80, 15
  %85 = select i1 %82, i32 %83, i32 %84
  %86 = or i32 %85, %73
  br label %87

87:                                               ; preds = %70, %75
  %88 = phi i32 [ %71, %70 ], [ %86, %75 ]
  %89 = zext i32 %30 to i64
  tail call void @evbuffer_drain(%struct.evbuffer* %0, i64 %89) #6
  %90 = zext i32 %88 to i64
  tail call void @evbuffer_drain(%struct.evbuffer* %0, i64 %90) #6
  br label %91

91:                                               ; preds = %7, %22, %28, %16, %87
  %92 = phi i32 [ 0, %87 ], [ -1, %16 ], [ -1, %28 ], [ -1, %22 ], [ -1, %7 ]
  ret i32 %92
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @evtag_unmarshal(%struct.evbuffer*, i32*, %struct.evbuffer*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %0, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %0, i64 0, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = trunc i64 %7 to i32
  br label %9

9:                                                ; preds = %16, %3
  %10 = phi i32 [ 0, %3 ], [ %22, %16 ]
  %11 = phi i8* [ %5, %3 ], [ %17, %16 ]
  %12 = phi i32 [ 0, %3 ], [ %14, %16 ]
  %13 = phi i32 [ 0, %3 ], [ %23, %16 ]
  %14 = add nuw nsw i32 %12, 1
  %15 = icmp slt i32 %12, %8
  br i1 %15, label %16, label %110

16:                                               ; preds = %9
  %17 = getelementptr inbounds i8, i8* %11, i64 1
  %18 = load i8, i8* %11, align 1
  %19 = and i8 %18, 127
  %20 = zext i8 %19 to i32
  %21 = shl i32 %20, %13
  %22 = or i32 %21, %10
  %23 = add nuw nsw i32 %13, 7
  %24 = icmp slt i8 %18, 0
  br i1 %24, label %9, label %25

25:                                               ; preds = %16
  %26 = zext i32 %14 to i64
  tail call void @evbuffer_drain(%struct.evbuffer* %0, i64 %26) #6
  %27 = icmp eq i32* %1, null
  br i1 %27, label %29, label %28

28:                                               ; preds = %25
  store i32 %22, i32* %1, align 4
  br label %29

29:                                               ; preds = %25, %28
  %30 = load i8*, i8** %4, align 8
  %31 = load i64, i64* %6, align 8
  %32 = trunc i64 %31 to i32
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %110, label %34

34:                                               ; preds = %29
  %35 = load i8, i8* %30, align 1
  %36 = lshr i8 %35, 4
  %37 = add nuw nsw i8 %36, 1
  %38 = zext i8 %37 to i32
  %39 = icmp slt i8 %35, 0
  br i1 %39, label %110, label %40

40:                                               ; preds = %34
  %41 = lshr i32 %38, 1
  %42 = add nuw nsw i32 %41, 1
  %43 = icmp slt i32 %41, %32
  br i1 %43, label %44, label %110

44:                                               ; preds = %40
  %45 = and i32 %38, 1
  %46 = icmp eq i8 %36, 0
  br i1 %46, label %82, label %47

47:                                               ; preds = %44
  %48 = sub nsw i32 %38, %45
  %49 = and i32 %38, 1
  %50 = icmp eq i32 %49, 0
  %51 = icmp eq i32 %49, 0
  br label %52

52:                                               ; preds = %52, %47
  %53 = phi i32 [ %38, %47 ], [ %77, %52 ]
  %54 = phi i32 [ 0, %47 ], [ %76, %52 ]
  %55 = phi i32 [ %48, %47 ], [ %78, %52 ]
  %56 = shl i32 %54, 4
  %57 = lshr i32 %53, 1
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %30, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = and i32 %61, 15
  %63 = lshr i32 %61, 4
  %64 = select i1 %50, i32 %63, i32 %62
  %65 = or i32 %64, %56
  %66 = add nsw i32 %53, -1
  %67 = shl i32 %65, 4
  %68 = lshr i32 %66, 1
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %30, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = and i32 %72, 15
  %74 = lshr i32 %72, 4
  %75 = select i1 %51, i32 %73, i32 %74
  %76 = or i32 %75, %67
  %77 = add nsw i32 %53, -2
  %78 = add i32 %55, -2
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %52

80:                                               ; preds = %52
  %81 = shl i32 %76, 4
  br label %82

82:                                               ; preds = %80, %44
  %83 = phi i32 [ undef, %44 ], [ %76, %80 ]
  %84 = phi i32 [ %38, %44 ], [ %77, %80 ]
  %85 = phi i32 [ 0, %44 ], [ %81, %80 ]
  %86 = icmp eq i32 %45, 0
  br i1 %86, label %99, label %87

87:                                               ; preds = %82
  %88 = lshr i32 %84, 1
  %89 = zext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %30, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = and i32 %84, 1
  %94 = icmp eq i32 %93, 0
  %95 = lshr i32 %92, 4
  %96 = and i32 %92, 15
  %97 = select i1 %94, i32 %95, i32 %96
  %98 = or i32 %97, %85
  br label %99

99:                                               ; preds = %82, %87
  %100 = phi i32 [ %83, %82 ], [ %98, %87 ]
  %101 = zext i32 %42 to i64
  tail call void @evbuffer_drain(%struct.evbuffer* %0, i64 %101) #6
  %102 = load i64, i64* %6, align 8
  %103 = zext i32 %100 to i64
  %104 = icmp ult i64 %102, %103
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = load i8*, i8** %4, align 8
  %107 = tail call i32 @evbuffer_add(%struct.evbuffer* %2, i8* %106, i64 %103) #6
  %108 = icmp eq i32 %107, -1
  br i1 %108, label %110, label %109

109:                                              ; preds = %105
  tail call void @evbuffer_drain(%struct.evbuffer* %0, i64 %103) #6
  br label %110

110:                                              ; preds = %9, %34, %40, %29, %105, %99, %109
  %111 = phi i32 [ %100, %109 ], [ -1, %99 ], [ -1, %105 ], [ -1, %29 ], [ -1, %40 ], [ -1, %34 ], [ -1, %9 ]
  ret i32 %111
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @evtag_unmarshal_int(%struct.evbuffer*, i32, i32* nocapture) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %0, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %0, i64 0, i32 4
  %7 = load i64, i64* %6, align 8
  %8 = trunc i64 %7 to i32
  br label %9

9:                                                ; preds = %16, %3
  %10 = phi i32 [ 0, %3 ], [ %22, %16 ]
  %11 = phi i8* [ %5, %3 ], [ %17, %16 ]
  %12 = phi i32 [ 0, %3 ], [ %14, %16 ]
  %13 = phi i32 [ 0, %3 ], [ %23, %16 ]
  %14 = add nuw nsw i32 %12, 1
  %15 = icmp slt i32 %12, %8
  br i1 %15, label %16, label %188

16:                                               ; preds = %9
  %17 = getelementptr inbounds i8, i8* %11, i64 1
  %18 = load i8, i8* %11, align 1
  %19 = and i8 %18, 127
  %20 = zext i8 %19 to i32
  %21 = shl i32 %20, %13
  %22 = or i32 %21, %10
  %23 = add nuw nsw i32 %13, 7
  %24 = icmp slt i8 %18, 0
  br i1 %24, label %9, label %25

25:                                               ; preds = %16
  %26 = zext i32 %14 to i64
  tail call void @evbuffer_drain(%struct.evbuffer* %0, i64 %26) #6
  %27 = icmp eq i32 %22, %1
  br i1 %27, label %28, label %188

28:                                               ; preds = %25
  %29 = load i8*, i8** %4, align 8
  %30 = load i64, i64* %6, align 8
  %31 = trunc i64 %30 to i32
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %188, label %33

33:                                               ; preds = %28
  %34 = load i8, i8* %29, align 1
  %35 = lshr i8 %34, 4
  %36 = add nuw nsw i8 %35, 1
  %37 = zext i8 %36 to i32
  %38 = icmp slt i8 %34, 0
  br i1 %38, label %188, label %39

39:                                               ; preds = %33
  %40 = lshr i32 %37, 1
  %41 = add nuw nsw i32 %40, 1
  %42 = icmp slt i32 %40, %31
  br i1 %42, label %43, label %188

43:                                               ; preds = %39
  %44 = and i32 %37, 1
  %45 = icmp eq i8 %35, 0
  br i1 %45, label %81, label %46

46:                                               ; preds = %43
  %47 = sub nsw i32 %37, %44
  %48 = and i32 %37, 1
  %49 = icmp eq i32 %48, 0
  %50 = icmp eq i32 %48, 0
  br label %51

51:                                               ; preds = %51, %46
  %52 = phi i32 [ %37, %46 ], [ %76, %51 ]
  %53 = phi i32 [ 0, %46 ], [ %75, %51 ]
  %54 = phi i32 [ %47, %46 ], [ %77, %51 ]
  %55 = shl i32 %53, 4
  %56 = lshr i32 %52, 1
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds i8, i8* %29, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = and i32 %60, 15
  %62 = lshr i32 %60, 4
  %63 = select i1 %49, i32 %62, i32 %61
  %64 = or i32 %63, %55
  %65 = add nsw i32 %52, -1
  %66 = shl i32 %64, 4
  %67 = lshr i32 %65, 1
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %29, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i32
  %72 = and i32 %71, 15
  %73 = lshr i32 %71, 4
  %74 = select i1 %50, i32 %72, i32 %73
  %75 = or i32 %74, %66
  %76 = add nsw i32 %52, -2
  %77 = add i32 %54, -2
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %51

79:                                               ; preds = %51
  %80 = shl i32 %75, 4
  br label %81

81:                                               ; preds = %79, %43
  %82 = phi i32 [ undef, %43 ], [ %75, %79 ]
  %83 = phi i32 [ %37, %43 ], [ %76, %79 ]
  %84 = phi i32 [ 0, %43 ], [ %80, %79 ]
  %85 = icmp eq i32 %44, 0
  br i1 %85, label %98, label %86

86:                                               ; preds = %81
  %87 = lshr i32 %83, 1
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds i8, i8* %29, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = and i32 %83, 1
  %93 = icmp eq i32 %92, 0
  %94 = lshr i32 %91, 4
  %95 = and i32 %91, 15
  %96 = select i1 %93, i32 %94, i32 %95
  %97 = or i32 %96, %84
  br label %98

98:                                               ; preds = %81, %86
  %99 = phi i32 [ %82, %81 ], [ %97, %86 ]
  %100 = zext i32 %41 to i64
  tail call void @evbuffer_drain(%struct.evbuffer* %0, i64 %100) #6
  %101 = load i64, i64* %6, align 8
  %102 = zext i32 %99 to i64
  %103 = icmp ult i64 %101, %102
  br i1 %103, label %188, label %104

104:                                              ; preds = %98
  %105 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %106 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %105, i64 0, i32 4
  %107 = load i64, i64* %106, align 8
  tail call void @evbuffer_drain(%struct.evbuffer* %105, i64 %107) #6
  %108 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %109 = load i8*, i8** %4, align 8
  %110 = tail call i32 @evbuffer_add(%struct.evbuffer* %108, i8* %109, i64 %102) #6
  %111 = icmp eq i32 %110, -1
  br i1 %111, label %188, label %112

112:                                              ; preds = %104
  tail call void @evbuffer_drain(%struct.evbuffer* %0, i64 %102) #6
  %113 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %114 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %113, i64 0, i32 0
  %115 = load i8*, i8** %114, align 8
  %116 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %113, i64 0, i32 4
  %117 = load i64, i64* %116, align 8
  %118 = trunc i64 %117 to i32
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %188, label %120

120:                                              ; preds = %112
  %121 = load i8, i8* %115, align 1
  %122 = lshr i8 %121, 4
  %123 = add nuw nsw i8 %122, 1
  %124 = zext i8 %123 to i32
  %125 = icmp slt i8 %121, 0
  br i1 %125, label %188, label %126

126:                                              ; preds = %120
  %127 = lshr i32 %124, 1
  %128 = add nuw nsw i32 %127, 1
  %129 = icmp slt i32 %127, %118
  br i1 %129, label %130, label %188

130:                                              ; preds = %126
  %131 = and i32 %124, 1
  %132 = icmp eq i8 %122, 0
  br i1 %132, label %168, label %133

133:                                              ; preds = %130
  %134 = sub nsw i32 %124, %131
  %135 = and i32 %124, 1
  %136 = icmp eq i32 %135, 0
  %137 = icmp eq i32 %135, 0
  br label %138

138:                                              ; preds = %138, %133
  %139 = phi i32 [ %124, %133 ], [ %163, %138 ]
  %140 = phi i32 [ 0, %133 ], [ %162, %138 ]
  %141 = phi i32 [ %134, %133 ], [ %164, %138 ]
  %142 = shl i32 %140, 4
  %143 = lshr i32 %139, 1
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds i8, i8* %115, i64 %144
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = and i32 %147, 15
  %149 = lshr i32 %147, 4
  %150 = select i1 %136, i32 %149, i32 %148
  %151 = or i32 %150, %142
  %152 = add nsw i32 %139, -1
  %153 = shl i32 %151, 4
  %154 = lshr i32 %152, 1
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds i8, i8* %115, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = and i32 %158, 15
  %160 = lshr i32 %158, 4
  %161 = select i1 %137, i32 %159, i32 %160
  %162 = or i32 %161, %153
  %163 = add nsw i32 %139, -2
  %164 = add i32 %141, -2
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %138

166:                                              ; preds = %138
  %167 = shl i32 %162, 4
  br label %168

168:                                              ; preds = %166, %130
  %169 = phi i32 [ undef, %130 ], [ %162, %166 ]
  %170 = phi i32 [ %124, %130 ], [ %163, %166 ]
  %171 = phi i32 [ 0, %130 ], [ %167, %166 ]
  %172 = icmp eq i32 %131, 0
  br i1 %172, label %185, label %173

173:                                              ; preds = %168
  %174 = lshr i32 %170, 1
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds i8, i8* %115, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i32
  %179 = and i32 %170, 1
  %180 = icmp eq i32 %179, 0
  %181 = lshr i32 %178, 4
  %182 = and i32 %178, 15
  %183 = select i1 %180, i32 %181, i32 %182
  %184 = or i32 %183, %171
  br label %185

185:                                              ; preds = %168, %173
  %186 = phi i32 [ %169, %168 ], [ %184, %173 ]
  %187 = zext i32 %128 to i64
  tail call void @evbuffer_drain(%struct.evbuffer* %113, i64 %187) #6
  store i32 %186, i32* %2, align 4
  br label %188

188:                                              ; preds = %9, %33, %39, %28, %185, %126, %120, %112, %25, %104, %98
  %189 = phi i32 [ -1, %25 ], [ -1, %98 ], [ -1, %104 ], [ 0, %185 ], [ -1, %112 ], [ -1, %126 ], [ -1, %120 ], [ -1, %28 ], [ -1, %39 ], [ -1, %33 ], [ -1, %9 ]
  ret i32 %189
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @evtag_unmarshal_fixed(%struct.evbuffer*, i32, i8* nocapture, i64) local_unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #6
  store i32 -1431655766, i32* %5, align 4
  %7 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %8 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %7, i64 0, i32 4
  %9 = load i64, i64* %8, align 8
  tail call void @evbuffer_drain(%struct.evbuffer* %7, i64 %9) #6
  %10 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %11 = call i32 @evtag_unmarshal(%struct.evbuffer* %0, i32* nonnull %5, %struct.evbuffer* %10)
  %12 = icmp ne i32 %11, -1
  %13 = load i32, i32* %5, align 4
  %14 = icmp eq i32 %13, %1
  %15 = and i1 %12, %14
  br i1 %15, label %16, label %24

16:                                               ; preds = %4
  %17 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %18 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %17, i64 0, i32 4
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %19, %3
  br i1 %20, label %21, label %24

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %17, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 %23, i64 %3, i1 false)
  br label %24

24:                                               ; preds = %16, %4, %21
  %25 = phi i32 [ 0, %21 ], [ -1, %4 ], [ -1, %16 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #6
  ret i32 %25
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @evtag_unmarshal_string(%struct.evbuffer*, i32, i8** nocapture) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #6
  store i32 -1431655766, i32* %4, align 4
  %6 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %7 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %6, i64 0, i32 4
  %8 = load i64, i64* %7, align 8
  tail call void @evbuffer_drain(%struct.evbuffer* %6, i64 %8) #6
  %9 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %10 = call i32 @evtag_unmarshal(%struct.evbuffer* %0, i32* nonnull %4, %struct.evbuffer* %9)
  %11 = icmp ne i32 %10, -1
  %12 = load i32, i32* %4, align 4
  %13 = icmp eq i32 %12, %1
  %14 = and i1 %11, %13
  br i1 %14, label %15, label %31

15:                                               ; preds = %3
  %16 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %17 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %16, i64 0, i32 4
  %18 = load i64, i64* %17, align 8
  %19 = add i64 %18, 1
  %20 = call noalias i8* @calloc(i64 %19, i64 1) #6
  store i8* %20, i8** %2, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %22, label %25

22:                                               ; preds = %15
  call void (i32, i8*, ...) @event_err(i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__func__.evtag_unmarshal_string, i64 0, i64 0)) #6
  %23 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %24 = load i8*, i8** %2, align 8
  br label %25

25:                                               ; preds = %22, %15
  %26 = phi i8* [ %24, %22 ], [ %20, %15 ]
  %27 = phi %struct.evbuffer* [ %23, %22 ], [ %16, %15 ]
  %28 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %27, i64 0, i32 4
  %29 = load i64, i64* %28, align 8
  %30 = call i32 @evbuffer_remove(%struct.evbuffer* %27, i8* %26, i64 %29) #6
  br label %31

31:                                               ; preds = %3, %25
  %32 = phi i32 [ 0, %25 ], [ -1, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #6
  ret i32 %32
}

; Function Attrs: nofree nounwind
declare noalias i8* @calloc(i64, i64) local_unnamed_addr #5

declare i32 @evbuffer_remove(%struct.evbuffer*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @evtag_unmarshal_timeval(%struct.evbuffer*, i32, %struct.timeval* nocapture) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #6
  store i32 -1431655766, i32* %4, align 4
  %6 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %7 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %6, i64 0, i32 4
  %8 = load i64, i64* %7, align 8
  tail call void @evbuffer_drain(%struct.evbuffer* %6, i64 %8) #6
  %9 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %10 = call i32 @evtag_unmarshal(%struct.evbuffer* %0, i32* nonnull %4, %struct.evbuffer* %9)
  %11 = icmp ne i32 %10, -1
  %12 = load i32, i32* %4, align 4
  %13 = icmp eq i32 %12, %1
  %14 = and i1 %11, %13
  br i1 %14, label %15, label %170

15:                                               ; preds = %3
  %16 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %17 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %16, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %16, i64 0, i32 4
  %20 = load i64, i64* %19, align 8
  %21 = trunc i64 %20 to i32
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %170, label %23

23:                                               ; preds = %15
  %24 = load i8, i8* %18, align 1
  %25 = lshr i8 %24, 4
  %26 = add nuw nsw i8 %25, 1
  %27 = zext i8 %26 to i32
  %28 = icmp slt i8 %24, 0
  br i1 %28, label %170, label %29

29:                                               ; preds = %23
  %30 = lshr i32 %27, 1
  %31 = add nuw nsw i32 %30, 1
  %32 = icmp slt i32 %30, %21
  br i1 %32, label %33, label %170

33:                                               ; preds = %29
  %34 = and i32 %27, 1
  %35 = icmp eq i8 %25, 0
  br i1 %35, label %71, label %36

36:                                               ; preds = %33
  %37 = sub nsw i32 %27, %34
  %38 = and i32 %27, 1
  %39 = icmp eq i32 %38, 0
  %40 = icmp eq i32 %38, 0
  br label %41

41:                                               ; preds = %41, %36
  %42 = phi i32 [ %27, %36 ], [ %66, %41 ]
  %43 = phi i32 [ 0, %36 ], [ %65, %41 ]
  %44 = phi i32 [ %37, %36 ], [ %67, %41 ]
  %45 = shl i32 %43, 4
  %46 = lshr i32 %42, 1
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %18, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = and i32 %50, 15
  %52 = lshr i32 %50, 4
  %53 = select i1 %39, i32 %52, i32 %51
  %54 = or i32 %53, %45
  %55 = add nsw i32 %42, -1
  %56 = shl i32 %54, 4
  %57 = lshr i32 %55, 1
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %18, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = and i32 %61, 15
  %63 = lshr i32 %61, 4
  %64 = select i1 %40, i32 %62, i32 %63
  %65 = or i32 %64, %56
  %66 = add nsw i32 %42, -2
  %67 = add i32 %44, -2
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %41

69:                                               ; preds = %41
  %70 = shl i32 %65, 4
  br label %71

71:                                               ; preds = %69, %33
  %72 = phi i32 [ undef, %33 ], [ %65, %69 ]
  %73 = phi i32 [ %27, %33 ], [ %66, %69 ]
  %74 = phi i32 [ 0, %33 ], [ %70, %69 ]
  %75 = icmp eq i32 %34, 0
  br i1 %75, label %88, label %76

76:                                               ; preds = %71
  %77 = lshr i32 %73, 1
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* %18, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = and i32 %73, 1
  %83 = icmp eq i32 %82, 0
  %84 = lshr i32 %81, 4
  %85 = and i32 %81, 15
  %86 = select i1 %83, i32 %84, i32 %85
  %87 = or i32 %86, %74
  br label %88

88:                                               ; preds = %71, %76
  %89 = phi i32 [ %72, %71 ], [ %87, %76 ]
  %90 = zext i32 %31 to i64
  call void @evbuffer_drain(%struct.evbuffer* %16, i64 %90) #6
  %91 = zext i32 %89 to i64
  %92 = getelementptr inbounds %struct.timeval, %struct.timeval* %2, i64 0, i32 0
  store i64 %91, i64* %92, align 8
  %93 = load %struct.evbuffer*, %struct.evbuffer** @_buf, align 8
  %94 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %93, i64 0, i32 0
  %95 = load i8*, i8** %94, align 8
  %96 = getelementptr inbounds %struct.evbuffer, %struct.evbuffer* %93, i64 0, i32 4
  %97 = load i64, i64* %96, align 8
  %98 = trunc i64 %97 to i32
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %170, label %100

100:                                              ; preds = %88
  %101 = load i8, i8* %95, align 1
  %102 = lshr i8 %101, 4
  %103 = add nuw nsw i8 %102, 1
  %104 = zext i8 %103 to i32
  %105 = icmp slt i8 %101, 0
  br i1 %105, label %170, label %106

106:                                              ; preds = %100
  %107 = lshr i32 %104, 1
  %108 = add nuw nsw i32 %107, 1
  %109 = icmp slt i32 %107, %98
  br i1 %109, label %110, label %170

110:                                              ; preds = %106
  %111 = and i32 %104, 1
  %112 = icmp eq i8 %102, 0
  br i1 %112, label %148, label %113

113:                                              ; preds = %110
  %114 = sub nsw i32 %104, %111
  %115 = and i32 %104, 1
  %116 = icmp eq i32 %115, 0
  %117 = icmp eq i32 %115, 0
  br label %118

118:                                              ; preds = %118, %113
  %119 = phi i32 [ %104, %113 ], [ %143, %118 ]
  %120 = phi i32 [ 0, %113 ], [ %142, %118 ]
  %121 = phi i32 [ %114, %113 ], [ %144, %118 ]
  %122 = shl i32 %120, 4
  %123 = lshr i32 %119, 1
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds i8, i8* %95, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = and i32 %127, 15
  %129 = lshr i32 %127, 4
  %130 = select i1 %116, i32 %129, i32 %128
  %131 = or i32 %130, %122
  %132 = add nsw i32 %119, -1
  %133 = shl i32 %131, 4
  %134 = lshr i32 %132, 1
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds i8, i8* %95, i64 %135
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = and i32 %138, 15
  %140 = lshr i32 %138, 4
  %141 = select i1 %117, i32 %139, i32 %140
  %142 = or i32 %141, %133
  %143 = add nsw i32 %119, -2
  %144 = add i32 %121, -2
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %118

146:                                              ; preds = %118
  %147 = shl i32 %142, 4
  br label %148

148:                                              ; preds = %146, %110
  %149 = phi i32 [ undef, %110 ], [ %142, %146 ]
  %150 = phi i32 [ %104, %110 ], [ %143, %146 ]
  %151 = phi i32 [ 0, %110 ], [ %147, %146 ]
  %152 = icmp eq i32 %111, 0
  br i1 %152, label %165, label %153

153:                                              ; preds = %148
  %154 = lshr i32 %150, 1
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds i8, i8* %95, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = and i32 %150, 1
  %160 = icmp eq i32 %159, 0
  %161 = lshr i32 %158, 4
  %162 = and i32 %158, 15
  %163 = select i1 %160, i32 %161, i32 %162
  %164 = or i32 %163, %151
  br label %165

165:                                              ; preds = %148, %153
  %166 = phi i32 [ %149, %148 ], [ %164, %153 ]
  %167 = zext i32 %108 to i64
  call void @evbuffer_drain(%struct.evbuffer* %93, i64 %167) #6
  %168 = zext i32 %166 to i64
  %169 = getelementptr inbounds %struct.timeval, %struct.timeval* %2, i64 0, i32 1
  store i64 %168, i64* %169, align 8
  br label %170

170:                                              ; preds = %100, %106, %88, %23, %29, %15, %3, %165
  %171 = phi i32 [ 0, %165 ], [ -1, %3 ], [ -1, %15 ], [ -1, %29 ], [ -1, %23 ], [ -1, %88 ], [ -1, %106 ], [ -1, %100 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #6
  ret i32 %171
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
