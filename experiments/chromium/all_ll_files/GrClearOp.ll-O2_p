; ModuleID = '../../third_party/skia/src/gpu/ops/GrClearOp.cpp'
source_filename = "../../third_party/skia/src/gpu/ops/GrClearOp.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::__1::atomic.150" = type { %"struct.std::__1::__atomic_base.151" }
%"struct.std::__1::__atomic_base.151" = type { %"struct.std::__1::__atomic_base.152" }
%"struct.std::__1::__atomic_base.152" = type { %"struct.std::__1::__cxx_atomic_impl.153" }
%"struct.std::__1::__cxx_atomic_impl.153" = type { %"struct.std::__1::__cxx_atomic_base_impl.154" }
%"struct.std::__1::__cxx_atomic_base_impl.154" = type { i32 }
%class.GrClearOp = type { %class.GrOp, %class.GrScissorState, %"struct.std::__1::array", i8, i32 }
%class.GrOp = type { i32 (...)**, %"class.std::__1::unique_ptr", %class.GrOp*, i16, i16, i32, %struct.SkRect }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.GrOp* }
%struct.SkRect = type { float, float, float, float }
%class.GrScissorState = type { %struct.SkISize, %struct.SkIRect }
%struct.SkISize = type { i32, i32 }
%struct.SkIRect = type { i32, i32, i32, i32 }
%"struct.std::__1::array" = type { [4 x float] }
%class.GrRecordingContext = type { %class.GrImageContext.base, %"class.GrRecordingContext::Stats", %"class.std::__1::unique_ptr.2", %"class.GrRecordingContext::OwnedArenas", %"class.std::__1::unique_ptr.41", %"class.std::__1::unique_ptr.47" }
%class.GrImageContext.base = type <{ %class.GrContext_Base, %class.GrSingleOwner }>
%class.GrContext_Base = type { %class.SkRefCnt.base, %class.sk_sp }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp = type { %class.GrContextThreadSafeProxy* }
%class.GrContextThreadSafeProxy = type opaque
%class.GrSingleOwner = type { i8 }
%"class.GrRecordingContext::Stats" = type { i8 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %class.GrAuditTrail* }
%class.GrAuditTrail = type <{ %class.SkTArray, %class.SkTHashMap, %class.SkTHashMap.12, %class.SkTArray.21, %class.SkTArray.23, i32, i8, [3 x i8] }>
%class.SkTArray = type { %"class.std::__1::unique_ptr.5"*, i64 }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"struct.GrAuditTrail::Op"* }
%"struct.GrAuditTrail::Op" = type <{ %class.SkString, %class.SkTArray.23, %struct.SkRect, i32, i32, i32, [4 x i8] }>
%class.SkString = type { %class.sk_sp.24 }
%class.sk_sp.24 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.6" }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot" = type { %"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair", i32 }
%"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, i32 }
%class.SkTHashMap.12 = type { %class.SkTHashTable.13 }
%class.SkTHashTable.13 = type { i32, i32, %class.SkAutoTArray.14 }
%class.SkAutoTArray.14 = type { %"class.std::__1::unique_ptr.15" }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.143" }
%"struct.std::__1::pair.143" = type { i32, %class.SkTArray.144* }
%class.SkTArray.144 = type { %"struct.GrAuditTrail::Op"**, i64 }
%class.SkTArray.21 = type { %"class.std::__1::unique_ptr.22"*, i64 }
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"struct.GrAuditTrail::OpNode"* }
%"struct.GrAuditTrail::OpNode" = type <{ %struct.SkRect, %class.SkTArray.144, %"class.GrSurfaceProxy::UniqueID", [4 x i8] }>
%"class.GrSurfaceProxy::UniqueID" = type { i32 }
%class.SkTArray.23 = type { %class.SkString*, i64 }
%"class.GrRecordingContext::OwnedArenas" = type { i8, %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.34" }
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %class.SkArenaAlloc* }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %class.GrSubRunAllocator* }
%class.GrSubRunAllocator = type { %class.GrBagOfBytes }
%class.GrBagOfBytes = type { i8*, i32, %class.SkFibBlockSizes.37 }
%class.SkFibBlockSizes.37 = type { i32 }
%"class.std::__1::unique_ptr.41" = type { %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %class.GrDrawingManager* }
%class.GrDrawingManager = type opaque
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %class.GrProxyProvider* }
%class.GrProxyProvider = type { %class.SkTDynamicHash, %class.GrImageContext* }
%class.SkTDynamicHash = type { %class.SkTHashTable.50 }
%class.SkTHashTable.50 = type { i32, i32, %class.SkAutoTArray.51 }
%class.SkAutoTArray.51 = type { %"class.std::__1::unique_ptr.52" }
%"class.std::__1::unique_ptr.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"struct.SkTHashTable<GrTextureProxy *, GrUniqueKey, SkTDynamicHash<GrTextureProxy, GrUniqueKey, GrProxyProvider::UniquelyKeyedProxyHashTraits>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrTextureProxy *, GrUniqueKey, SkTDynamicHash<GrTextureProxy, GrUniqueKey, GrProxyProvider::UniquelyKeyedProxyHashTraits>::AdaptedTraits>::Slot" = type opaque
%class.GrImageContext = type <{ %class.GrContext_Base, %class.GrSingleOwner, [7 x i8] }>
%class.GrCaps = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp.61, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8, i8 }>
%class.sk_sp.61 = type { %class.GrShaderCaps* }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.GrDriverBugWorkarounds = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%class.GrOpFlushState = type { %class.GrDeferredUploadTarget, %"class.GrMeshDrawOp::Target", %class.SkArenaAllocWithReset, %class.GrVertexBufferAllocPool, %class.GrIndexBufferAllocPool, %class.GrDrawIndirectBufferAllocPool, %class.SkArenaAllocList, %class.SkArenaAllocList.73, %class.SkArenaAllocList.74, %class.GrDeferredUploadToken, %"struct.GrOpFlushState::OpArgs"*, %class.SkTArray.135*, %class.GrGpu*, %class.GrResourceProvider*, %class.GrTokenTracker*, %class.GrOpsRenderPass*, %"class.SkArenaAllocList<GrOpFlushState::Draw>::Iter", %"class.SkArenaAllocList<GrOpFlushState::InlineUpload>::Iter" }
%class.GrDeferredUploadTarget = type { i32 (...)** }
%"class.GrMeshDrawOp::Target" = type { i32 (...)** }
%class.SkArenaAllocWithReset = type { %class.SkArenaAlloc.base, i8*, i32, i32 }
%class.SkArenaAlloc.base = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes }>
%class.GrVertexBufferAllocPool = type { %class.GrBufferAllocPool }
%class.GrBufferAllocPool = type { i32 (...)**, i64, %class.SkTArray.62, %class.sk_sp.64, %class.sk_sp.68, %class.GrGpu*, i32, i8* }
%class.SkTArray.62 = type { %"struct.GrBufferAllocPool::BufferBlock"*, i64 }
%"struct.GrBufferAllocPool::BufferBlock" = type { i64, %class.sk_sp.63 }
%class.sk_sp.63 = type { %class.GrBuffer* }
%class.GrBuffer = type { i32 (...)** }
%class.sk_sp.64 = type { %"class.GrBufferAllocPool::CpuBufferCache"* }
%"class.GrBufferAllocPool::CpuBufferCache" = type <{ %class.GrNonAtomicRef, [4 x i8], %"class.std::__1::unique_ptr.65", i32, [4 x i8] }>
%class.GrNonAtomicRef = type { i32 }
%"class.std::__1::unique_ptr.65" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"struct.GrBufferAllocPool::CpuBufferCache::Buffer"* }
%"struct.GrBufferAllocPool::CpuBufferCache::Buffer" = type <{ %class.sk_sp.68, i8, [7 x i8] }>
%class.sk_sp.68 = type { %class.GrCpuBuffer* }
%class.GrCpuBuffer = type { %class.GrBuffer, %class.GrNonAtomicRef.69, i8*, i64 }
%class.GrNonAtomicRef.69 = type { i32 }
%class.GrIndexBufferAllocPool = type { %class.GrBufferAllocPool }
%class.GrDrawIndirectBufferAllocPool = type { %class.GrBufferAllocPool }
%class.SkArenaAllocList = type { %"struct.SkArenaAllocList<std::__1::function<void (std::__1::function<bool (GrTextureProxy *, SkIRect, GrColorType, const void *, unsigned long)> &)> >::Node"*, %"struct.SkArenaAllocList<std::__1::function<void (std::__1::function<bool (GrTextureProxy *, SkIRect, GrColorType, const void *, unsigned long)> &)> >::Node"* }
%"struct.SkArenaAllocList<std::__1::function<void (std::__1::function<bool (GrTextureProxy *, SkIRect, GrColorType, const void *, unsigned long)> &)> >::Node" = type opaque
%class.SkArenaAllocList.73 = type { %"struct.SkArenaAllocList<GrOpFlushState::InlineUpload>::Node"*, %"struct.SkArenaAllocList<GrOpFlushState::InlineUpload>::Node"* }
%"struct.SkArenaAllocList<GrOpFlushState::InlineUpload>::Node" = type opaque
%class.SkArenaAllocList.74 = type { %"struct.SkArenaAllocList<GrOpFlushState::Draw>::Node"*, %"struct.SkArenaAllocList<GrOpFlushState::Draw>::Node"* }
%"struct.SkArenaAllocList<GrOpFlushState::Draw>::Node" = type opaque
%class.GrDeferredUploadToken = type { i64 }
%"struct.GrOpFlushState::OpArgs" = type { %class.GrOp*, %class.GrSurfaceProxyView*, %class.GrRenderTargetProxy*, i8, %class.GrAppliedClip*, %"class.GrXferProcessor::DstProxyView", i32, i32 }
%class.GrSurfaceProxyView = type <{ %class.sk_sp.75, i32, %class.GrSwizzle, [2 x i8] }>
%class.sk_sp.75 = type { %class.GrSurfaceProxy* }
%class.GrSurfaceProxy = type { i32 (...)**, %class.SkNVRefCnt, %class.sk_sp.76, i32, [4 x i8], %class.GrBackendFormat, %struct.SkISize, i32, i8, i32, %"class.GrSurfaceProxy::UniqueID", %"class.std::__1::function", i8, i8, i8, i8, i32, %"struct.std::__1::atomic.119" }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.sk_sp.76 = type { %class.GrSurface* }
%class.GrSurface = type { %class.GrGpuResource, %struct.SkISize, i32, i8, %class.sk_sp.79 }
%class.GrGpuResource = type { i32 (...)**, %class.GrIORef, i32, i32, %"class.std::__1::chrono::time_point", %class.GrScratchKey, %class.GrUniqueKey, %class.GrGpu*, i64, i8, i8, %"class.GrGpuResource::UniqueID" }
%class.GrIORef = type { %"struct.std::__1::atomic", %"struct.std::__1::atomic" }
%"class.std::__1::chrono::time_point" = type { %"class.std::__1::chrono::duration" }
%"class.std::__1::chrono::duration" = type { i64 }
%class.GrScratchKey = type { %class.GrResourceKey }
%class.GrResourceKey = type { %class.SkAutoSTMalloc }
%class.SkAutoSTMalloc = type <{ i32*, %union.anon, [4 x i8] }>
%union.anon = type { [7 x i32] }
%class.GrUniqueKey = type { %class.GrResourceKey, %class.sk_sp.77, i8* }
%class.sk_sp.77 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.78, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.78 = type { %"struct.std::__1::atomic" }
%"class.GrGpuResource::UniqueID" = type { i32 }
%class.sk_sp.79 = type { %class.GrRefCntedCallback* }
%class.GrRefCntedCallback = type { %class.SkNVRefCnt.80, void (i8*)*, i8* }
%class.SkNVRefCnt.80 = type { %"struct.std::__1::atomic" }
%class.GrBackendFormat = type { i32, i8, %union.anon.81, i32, [4 x i8] }
%union.anon.81 = type { %struct.anon }
%struct.anon = type { i32, [4 x i8], %struct.GrVkYcbcrConversionInfo }
%struct.GrVkYcbcrConversionInfo = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"struct.GrSurfaceProxy::LazyCallbackResult"*, %"union.std::__1::__function::__policy_storage"*, %class.GrResourceProvider*, %"struct.GrSurfaceProxy::LazySurfaceDesc"*)* }
%"struct.GrSurfaceProxy::LazyCallbackResult" = type <{ %class.sk_sp.76, i32, i8, [3 x i8] }>
%"struct.GrSurfaceProxy::LazySurfaceDesc" = type <{ %struct.SkISize, i32, i8, i8, [2 x i8], i32, [4 x i8], %class.GrBackendFormat*, i8, i8, [6 x i8] }>
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"struct.std::__1::atomic.119" = type { %"struct.std::__1::__atomic_base.120" }
%"struct.std::__1::__atomic_base.120" = type { %"struct.std::__1::__atomic_base.121" }
%"struct.std::__1::__atomic_base.121" = type { %"struct.std::__1::__cxx_atomic_impl.122" }
%"struct.std::__1::__cxx_atomic_impl.122" = type { %"struct.std::__1::__cxx_atomic_base_impl.123" }
%"struct.std::__1::__cxx_atomic_base_impl.123" = type { i64 }
%class.GrSwizzle = type { i16 }
%class.GrRenderTargetProxy = type <{ i32 (...)**, i8, i8, i8, i8, %struct.SkIRect, [4 x i8], %class.sk_sp.124, [4 x i8], [4 x i8], %class.GrSurfaceProxy }>
%class.sk_sp.124 = type { %class.GrArenas* }
%class.GrArenas = type { %class.SkNVRefCnt.125, [4 x i8], %class.SkArenaAlloc, %class.GrSubRunAllocator }
%class.SkNVRefCnt.125 = type { %"struct.std::__1::atomic" }
%class.GrAppliedClip = type { %class.GrAppliedHardClip, %"class.std::__1::unique_ptr.128" }
%class.GrAppliedHardClip = type <{ %class.GrScissorState, %class.GrWindowRectsState, i32, [4 x i8] }>
%class.GrWindowRectsState = type { i8, %class.GrWindowRectangles }
%class.GrWindowRectangles = type { i32, %union.anon.126 }
%union.anon.126 = type { %"struct.GrWindowRectangles::Rec"*, [8 x i8] }
%"struct.GrWindowRectangles::Rec" = type { %class.GrNonAtomicRef.127, [8 x %struct.SkIRect] }
%class.GrNonAtomicRef.127 = type { i32 }
%"class.std::__1::unique_ptr.128" = type { %"class.std::__1::__compressed_pair.129" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.130" }
%"struct.std::__1::__compressed_pair_elem.130" = type { %class.GrFragmentProcessor* }
%class.GrFragmentProcessor = type <{ %class.GrProcessor, %class.SkSTArray, %class.GrFragmentProcessor*, i32, %"struct.SkSL::SampleUsage", [4 x i8] }>
%class.GrProcessor = type { i32 (...)**, i32, i32 }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray.131 }
%class.SkAlignedSTStorage = type { [8 x i8] }
%class.SkTArray.131 = type { %"class.std::__1::unique_ptr.128"*, i64 }
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>
%"class.GrXferProcessor::DstProxyView" = type { %class.GrSurfaceProxyView, %struct.SkIPoint, i32, [4 x i8] }
%struct.SkIPoint = type { i32, i32 }
%class.SkTArray.135 = type opaque
%class.GrGpu = type opaque
%class.GrResourceProvider = type { %class.GrResourceCache*, %class.GrGpu*, %class.sk_sp.117, %class.sk_sp.118, %class.sk_sp.118 }
%class.GrResourceCache = type { %class.GrProxyProvider*, %class.GrThreadSafeCache*, i32, %class.SkTDPQueue, %class.SkTDArray, %class.SkTMultiMap, %class.SkTDynamicHash.92, i64, i64, i32, i64, i64, i32, [4 x i8], %"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox", %"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox", %class.SkTHashMap.108, %"class.GrDirectContext::DirectContextID", i32, %class.GrSingleOwner* }
%class.GrThreadSafeCache = type opaque
%class.SkTDPQueue = type { %class.SkTDArray }
%class.SkTDArray = type { %class.GrGpuResource**, i32, i32 }
%class.SkTMultiMap = type <{ %class.SkTDynamicHash.83, i32, [4 x i8] }>
%class.SkTDynamicHash.83 = type { %class.SkTHashTable.84 }
%class.SkTHashTable.84 = type { i32, i32, %class.SkAutoTArray.85 }
%class.SkAutoTArray.85 = type { %"class.std::__1::unique_ptr.86" }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot" = type opaque
%class.SkTDynamicHash.92 = type { %class.SkTHashTable.93 }
%class.SkTHashTable.93 = type { i32, i32, %class.SkAutoTArray.94 }
%class.SkAutoTArray.94 = type { %"class.std::__1::unique_ptr.95" }
%"class.std::__1::unique_ptr.95" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot" = type <{ %class.GrGpuResource*, i32, [4 x i8] }>
%"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox" = type <{ %class.SkTArray.101, %class.SkMutex, i32, [4 x i8] }>
%class.SkTArray.101 = type { %class.GrUniqueKeyInvalidatedMessage*, i64 }
%class.GrUniqueKeyInvalidatedMessage = type <{ %class.GrUniqueKey, i32, i8, [3 x i8] }>
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.102" }
%"struct.std::__1::atomic.102" = type { %"struct.std::__1::__atomic_base.103" }
%"struct.std::__1::__atomic_base.103" = type { %"struct.std::__1::__atomic_base.104" }
%"struct.std::__1::__atomic_base.104" = type { %"struct.std::__1::__cxx_atomic_impl.105" }
%"struct.std::__1::__cxx_atomic_impl.105" = type { %"struct.std::__1::__cxx_atomic_base_impl.106" }
%"struct.std::__1::__cxx_atomic_base_impl.106" = type { i8 }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox" = type <{ %class.SkTArray.107, %class.SkMutex, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.SkTArray.107 = type { %struct.GrTextureFreedMessage*, i64 }
%struct.GrTextureFreedMessage = type <{ %class.GrTexture*, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.GrTexture = type <{ i32 (...)**, i32, i32, i32, [4 x i8], %class.GrSurface }>
%class.SkTHashMap.108 = type { %class.SkTHashTable.109 }
%class.SkTHashTable.109 = type { i32, i32, %class.SkAutoTArray.110 }
%class.SkAutoTArray.110 = type { %"class.std::__1::unique_ptr.111" }
%"class.std::__1::unique_ptr.111" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot" = type opaque
%"class.GrDirectContext::DirectContextID" = type { i32 }
%class.sk_sp.117 = type { %class.GrCaps* }
%class.sk_sp.118 = type { %class.GrGpuBuffer* }
%class.GrGpuBuffer = type { %class.GrGpuResource, %class.GrBuffer, i8*, i64, i32, i32 }
%class.GrTokenTracker = type { %class.GrDeferredUploadToken, %class.GrDeferredUploadToken }
%class.GrOpsRenderPass = type { i32 (...)**, i32, %class.GrRenderTarget*, %class.sk_sp.136, %class.sk_sp.136, %class.sk_sp.136, i32, i32 }
%class.GrRenderTarget = type opaque
%class.sk_sp.136 = type { %class.GrBuffer* }
%"class.SkArenaAllocList<GrOpFlushState::Draw>::Iter" = type { %"struct.SkArenaAllocList<GrOpFlushState::Draw>::Node"* }
%"class.SkArenaAllocList<GrOpFlushState::InlineUpload>::Iter" = type { %"struct.SkArenaAllocList<GrOpFlushState::InlineUpload>::Node"* }
%"class.std::__1::function.137" = type opaque

$_ZN4GrOpD2Ev = comdat any

$_ZN9GrClearOpD0Ev = comdat any

$_ZNK9GrClearOp4nameEv = comdat any

$_ZNK4GrOp12visitProxiesERKNSt3__18functionIFvP14GrSurfaceProxy11GrMipmappedEEE = comdat any

$_ZN9GrClearOp12onPrePrepareEP18GrRecordingContextRK18GrSurfaceProxyViewP13GrAppliedClipRKN15GrXferProcessor12DstProxyViewE18GrXferBarrierFlags8GrLoadOp = comdat any

$_ZN9GrClearOp9onPrepareEP14GrOpFlushState = comdat any

$_ZN4GrOpD0Ev = comdat any

$_ZN4GrOp19onCombineIfPossibleEPS_P12SkArenaAllocRK6GrCaps = comdat any

$_ZZN9GrClearOp7ClassIDEvE8kClassID = comdat any

$_ZGVZN9GrClearOp7ClassIDEvE8kClassID = comdat any

$_ZTV4GrOp = comdat any

@_ZTV9GrClearOp = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrOp*)* @_ZN4GrOpD2Ev to i8*), i8* bitcast (void (%class.GrClearOp*)* @_ZN9GrClearOpD0Ev to i8*), i8* bitcast (i8* (%class.GrClearOp*)* @_ZNK9GrClearOp4nameEv to i8*), i8* bitcast (void (%class.GrOp*, %"class.std::__1::function.137"*)* @_ZNK4GrOp12visitProxiesERKNSt3__18functionIFvP14GrSurfaceProxy11GrMipmappedEEE to i8*), i8* bitcast (i32 (%class.GrClearOp*, %class.GrOp*, %class.SkArenaAlloc*, %class.GrCaps*)* @_ZN9GrClearOp19onCombineIfPossibleEP4GrOpP12SkArenaAllocRK6GrCaps to i8*), i8* bitcast (void (%class.GrClearOp*, %class.GrRecordingContext*, %class.GrSurfaceProxyView*, %class.GrAppliedClip*, %"class.GrXferProcessor::DstProxyView"*, i32, i32)* @_ZN9GrClearOp12onPrePrepareEP18GrRecordingContextRK18GrSurfaceProxyViewP13GrAppliedClipRKN15GrXferProcessor12DstProxyViewE18GrXferBarrierFlags8GrLoadOp to i8*), i8* bitcast (void (%class.GrClearOp*, %class.GrOpFlushState*)* @_ZN9GrClearOp9onPrepareEP14GrOpFlushState to i8*), i8* bitcast (void (%class.GrClearOp*, %class.GrOpFlushState*, %struct.SkRect*)* @_ZN9GrClearOp9onExecuteEP14GrOpFlushStateRK6SkRect to i8*)] }, align 8
@_ZZN9GrClearOp7ClassIDEvE8kClassID = linkonce_odr hidden local_unnamed_addr global i32 0, comdat, align 4
@_ZGVZN9GrClearOp7ClassIDEvE8kClassID = linkonce_odr hidden global i64 0, comdat, align 8
@_ZN4GrOp14gCurrOpClassIDE = external global %"struct.std::__1::atomic.150", align 4
@.str = private unnamed_addr constant [42 x i8] c"../../third_party/skia/src/gpu/ops/GrOp.h\00", align 1
@.str.1 = private unnamed_addr constant [80 x i8] c"This should never wrap as it should only be called once for each GrOp subclass.\00", align 1
@_ZTV4GrOp = linkonce_odr hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrOp*)* @_ZN4GrOpD2Ev to i8*), i8* bitcast (void (%class.GrOp*)* @_ZN4GrOpD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%class.GrOp*, %"class.std::__1::function.137"*)* @_ZNK4GrOp12visitProxiesERKNSt3__18functionIFvP14GrSurfaceProxy11GrMipmappedEEE to i8*), i8* bitcast (i32 (%class.GrOp*, %class.GrOp*, %class.SkArenaAlloc*, %class.GrCaps*)* @_ZN4GrOp19onCombineIfPossibleEPS_P12SkArenaAllocRK6GrCaps to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8
@.str.2 = private unnamed_addr constant [6 x i8] c"Clear\00", align 1

@_ZN9GrClearOpC1ENS_6BufferERK14GrScissorStateNSt3__15arrayIfLm4EEEb = hidden unnamed_addr alias void (%class.GrClearOp*, i32, %class.GrScissorState*, <2 x float>, <2 x float>, i1), void (%class.GrClearOp*, i32, %class.GrScissorState*, <2 x float>, <2 x float>, i1)* @_ZN9GrClearOpC2ENS_6BufferERK14GrScissorStateNSt3__15arrayIfLm4EEEb

; Function Attrs: nounwind ssp uwtable
define hidden nonnull %class.GrOp* @_ZN9GrClearOp9MakeColorEP18GrRecordingContextRK14GrScissorStateNSt3__15arrayIfLm4EEE(%class.GrRecordingContext* nocapture readnone, %class.GrScissorState* nocapture readonly dereferenceable(24), <2 x float>, <2 x float>) local_unnamed_addr #0 align 2 {
  %5 = tail call i8* @_Znwm(i64 96) #11
  %6 = bitcast i8* %5 to %class.GrClearOp*
  tail call void @_ZN9GrClearOpC2ENS_6BufferERK14GrScissorStateNSt3__15arrayIfLm4EEEb(%class.GrClearOp* nonnull %6, i32 1, %class.GrScissorState* dereferenceable(24) %1, <2 x float> %2, <2 x float> %3, i1 zeroext false) #12
  %7 = bitcast i8* %5 to %class.GrOp*
  ret %class.GrOp* %7
}

; Function Attrs: nounwind ssp uwtable
define hidden nonnull %class.GrOp* @_ZN9GrClearOp15MakeStencilClipEP18GrRecordingContextRK14GrScissorStateb(%class.GrRecordingContext* nocapture readnone, %class.GrScissorState* nocapture readonly dereferenceable(24), i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = tail call i8* @_Znwm(i64 96) #11
  %5 = bitcast i8* %4 to %class.GrClearOp*
  tail call void @_ZN9GrClearOpC2ENS_6BufferERK14GrScissorStateNSt3__15arrayIfLm4EEEb(%class.GrClearOp* nonnull %5, i32 2, %class.GrScissorState* dereferenceable(24) %1, <2 x float> zeroinitializer, <2 x float> zeroinitializer, i1 zeroext %2) #12
  %6 = bitcast i8* %4 to %class.GrOp*
  ret %class.GrOp* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9GrClearOpC2ENS_6BufferERK14GrScissorStateNSt3__15arrayIfLm4EEEb(%class.GrClearOp*, i32, %class.GrScissorState* nocapture readonly dereferenceable(24), <2 x float>, <2 x float>, i1 zeroext) unnamed_addr #0 align 2 {
  %7 = zext i1 %5 to i8
  %8 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 0
  %9 = load atomic i8, i8* bitcast (i64* @_ZGVZN9GrClearOp7ClassIDEvE8kClassID to i8*) acquire, align 8
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %19, !prof !2

11:                                               ; preds = %6
  %12 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN9GrClearOp7ClassIDEvE8kClassID) #12
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %11
  %15 = atomicrmw add i32* getelementptr inbounds (%"struct.std::__1::atomic.150", %"struct.std::__1::atomic.150"* @_ZN4GrOp14gCurrOpClassIDE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0), i32 1 monotonic
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %14
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0), i32 329, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.1, i64 0, i64 0)) #13
  unreachable

18:                                               ; preds = %14
  store i32 %15, i32* @_ZZN9GrClearOp7ClassIDEvE8kClassID, align 4
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN9GrClearOp7ClassIDEvE8kClassID) #12
  br label %19

19:                                               ; preds = %6, %11, %18
  %20 = load i32, i32* @_ZZN9GrClearOp7ClassIDEvE8kClassID, align 4
  tail call void @_ZN4GrOpC2Ej(%class.GrOp* %8, i32 %20) #12
  %21 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTV9GrClearOp, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %21, align 8
  %22 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 1
  %23 = bitcast %class.GrScissorState* %22 to i8*
  %24 = bitcast %class.GrScissorState* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 4 %24, i64 24, i1 false)
  %25 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 2
  %26 = bitcast %"struct.std::__1::array"* %25 to <2 x float>*
  store <2 x float> %3, <2 x float>* %26, align 8
  %27 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 2, i32 0, i64 2
  %28 = bitcast float* %27 to <2 x float>*
  store <2 x float> %4, <2 x float>* %28, align 8
  %29 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 3
  store i8 %7, i8* %29, align 8
  %30 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 4
  store i32 %1, i32* %30, align 4
  %31 = getelementptr inbounds %class.GrScissorState, %class.GrScissorState* %2, i64 0, i32 1, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = sitofp i32 %32 to float
  %34 = insertelement <2 x float> undef, float %33, i32 0
  %35 = getelementptr inbounds %class.GrScissorState, %class.GrScissorState* %2, i64 0, i32 1, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = sitofp i32 %36 to float
  %38 = insertelement <2 x float> %34, float %37, i32 1
  %39 = getelementptr inbounds %class.GrScissorState, %class.GrScissorState* %2, i64 0, i32 1, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = sitofp i32 %40 to float
  %42 = insertelement <2 x float> undef, float %41, i32 0
  %43 = getelementptr inbounds %class.GrScissorState, %class.GrScissorState* %2, i64 0, i32 1, i32 3
  %44 = load i32, i32* %43, align 4
  %45 = sitofp i32 %44 to float
  %46 = insertelement <2 x float> %42, float %45, i32 1
  %47 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 0, i32 6
  %48 = bitcast %struct.SkRect* %47 to <2 x float>*
  store <2 x float> %38, <2 x float>* %48, align 8
  %49 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 0, i32 6, i32 2
  %50 = bitcast float* %49 to <2 x float>*
  store <2 x float> %46, <2 x float>* %50, align 8
  %51 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 0, i32 4
  store i16 0, i16* %51, align 2
  ret void
}

declare void @_ZN4GrOpC2Ej(%class.GrOp*, i32) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN9GrClearOp19onCombineIfPossibleEP4GrOpP12SkArenaAllocRK6GrCaps(%class.GrClearOp* nocapture, %class.GrOp* nocapture readonly, %class.SkArenaAlloc* nocapture readnone, %class.GrCaps* nocapture readnone dereferenceable(232)) unnamed_addr #3 align 2 {
  %5 = getelementptr inbounds %class.GrOp, %class.GrOp* %1, i64 1, i32 6, i32 3
  %6 = bitcast float* %5 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 4
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %7, %9
  %11 = getelementptr inbounds %class.GrOp, %class.GrOp* %1, i64 1
  %12 = bitcast %class.GrOp* %11 to %class.GrScissorState*
  %13 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 1
  br i1 %10, label %14, label %230

14:                                               ; preds = %4
  %15 = getelementptr inbounds %class.GrOp, %class.GrOp* %1, i64 1, i32 1
  %16 = bitcast %"class.std::__1::unique_ptr"* %15 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %36, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %class.GrScissorState, %class.GrScissorState* %12, i64 0, i32 1, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %36, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %class.GrOp, %class.GrOp* %1, i64 1, i32 2
  %25 = bitcast %class.GrOp** %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = bitcast %class.GrOp* %11 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = icmp slt i32 %26, %28
  br i1 %29, label %36, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %class.GrScissorState, %class.GrScissorState* %12, i64 0, i32 1, i32 3
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %class.GrScissorState, %class.GrScissorState* %12, i64 0, i32 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %32, %34
  br i1 %35, label %36, label %105

36:                                               ; preds = %30, %23, %19, %14
  %37 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 1, i32 1, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = icmp sgt i32 %38, 0
  %40 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 1, i32 1, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = icmp sgt i32 %41, 0
  %43 = or i1 %39, %42
  br i1 %43, label %56, label %44

44:                                               ; preds = %36
  %45 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 1, i32 1, i32 2
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %class.GrScissorState, %class.GrScissorState* %13, i64 0, i32 0, i32 0
  %48 = load i32, i32* %47, align 4
  %49 = icmp slt i32 %46, %48
  br i1 %49, label %56, label %50

50:                                               ; preds = %44
  %51 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 1, i32 1, i32 3
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 1, i32 0, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = icmp slt i32 %52, %54
  br i1 %55, label %56, label %116

56:                                               ; preds = %36, %50, %44
  %57 = bitcast %"class.std::__1::unique_ptr"* %15 to %struct.SkIRect*
  %58 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 1, i32 1, i32 2
  %59 = load i32, i32* %58, align 4
  %60 = sext i32 %59 to i64
  %61 = sext i32 %38 to i64
  %62 = sub nsw i64 %60, %61
  %63 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 1, i32 1, i32 3
  %64 = load i32, i32* %63, align 4
  %65 = sext i32 %64 to i64
  %66 = sext i32 %41 to i64
  %67 = sub nsw i64 %65, %66
  %68 = icmp slt i64 %62, 1
  %69 = icmp slt i64 %67, 1
  %70 = or i1 %68, %69
  br i1 %70, label %116, label %71

71:                                               ; preds = %56
  %72 = or i64 %67, %62
  %73 = add nsw i64 %72, 2147483648
  %74 = icmp ugt i64 %73, 4294967295
  br i1 %74, label %116, label %75

75:                                               ; preds = %71
  %76 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %15, i64 1
  %77 = bitcast %"class.std::__1::unique_ptr"* %76 to i32*
  %78 = load i32, i32* %77, align 4
  %79 = sext i32 %78 to i64
  %80 = sext i32 %17 to i64
  %81 = sub nsw i64 %79, %80
  %82 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %57, i64 0, i32 3
  %83 = load i32, i32* %82, align 4
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %57, i64 0, i32 1
  %86 = load i32, i32* %85, align 4
  %87 = sext i32 %86 to i64
  %88 = sub nsw i64 %84, %87
  %89 = icmp slt i64 %81, 1
  %90 = icmp slt i64 %88, 1
  %91 = or i1 %89, %90
  br i1 %91, label %116, label %92

92:                                               ; preds = %75
  %93 = or i64 %88, %81
  %94 = add nsw i64 %93, 2147483648
  %95 = icmp ugt i64 %94, 4294967295
  %96 = icmp sgt i32 %17, %38
  %97 = or i1 %96, %95
  %98 = icmp sgt i32 %86, %41
  %99 = or i1 %98, %97
  %100 = icmp slt i32 %78, %59
  %101 = or i1 %100, %99
  %102 = icmp sge i32 %83, %64
  %103 = xor i1 %101, true
  %104 = and i1 %102, %103
  br i1 %104, label %105, label %116

105:                                              ; preds = %30, %92
  %106 = bitcast %class.GrScissorState* %13 to i8*
  %107 = bitcast %class.GrOp* %11 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 4 %107, i64 24, i1 false)
  %108 = getelementptr inbounds %class.GrOp, %class.GrOp* %1, i64 1, i32 3
  %109 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 2
  %110 = bitcast %"struct.std::__1::array"* %109 to i8*
  %111 = bitcast i16* %108 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %110, i8* align 4 %111, i64 16, i1 false)
  %112 = getelementptr inbounds %class.GrOp, %class.GrOp* %1, i64 1, i32 6, i32 2
  %113 = bitcast float* %112 to i8*
  %114 = load i8, i8* %113, align 8, !range !3
  %115 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 3
  store i8 %114, i8* %115, align 8
  br label %269

116:                                              ; preds = %56, %71, %75, %50, %92
  %117 = phi i32 [ %64, %56 ], [ %64, %71 ], [ %64, %75 ], [ %52, %50 ], [ %64, %92 ]
  %118 = phi i32 [ %59, %56 ], [ %59, %71 ], [ %59, %75 ], [ %46, %50 ], [ %59, %92 ]
  %119 = getelementptr inbounds %class.GrOp, %class.GrOp* %1, i64 1, i32 3
  %120 = bitcast i16* %119 to float*
  %121 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 2, i32 0, i64 0
  %122 = load float, float* %120, align 4
  %123 = load float, float* %121, align 4
  %124 = fcmp oeq float %122, %123
  br i1 %124, label %125, label %268

125:                                              ; preds = %116
  %126 = getelementptr inbounds i16, i16* %119, i64 2
  %127 = bitcast i16* %126 to float*
  %128 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 2, i32 0, i64 1
  %129 = load float, float* %127, align 4
  %130 = load float, float* %128, align 4
  %131 = fcmp oeq float %129, %130
  br i1 %131, label %132, label %268

132:                                              ; preds = %125
  %133 = getelementptr inbounds i16, i16* %119, i64 4
  %134 = bitcast i16* %133 to float*
  %135 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 2, i32 0, i64 2
  %136 = load float, float* %134, align 4
  %137 = load float, float* %135, align 4
  %138 = fcmp oeq float %136, %137
  br i1 %138, label %139, label %268

139:                                              ; preds = %132
  %140 = getelementptr inbounds i16, i16* %119, i64 6
  %141 = bitcast i16* %140 to float*
  %142 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 2, i32 0, i64 3
  %143 = load float, float* %141, align 4
  %144 = load float, float* %142, align 4
  %145 = fcmp oeq float %143, %144
  br i1 %145, label %146, label %268

146:                                              ; preds = %139
  %147 = getelementptr inbounds %class.GrOp, %class.GrOp* %1, i64 1, i32 6, i32 2
  %148 = bitcast float* %147 to i8*
  %149 = load i8, i8* %148, align 8, !range !3
  %150 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 3
  %151 = load i8, i8* %150, align 8, !range !3
  %152 = icmp eq i8 %149, %151
  br i1 %152, label %153, label %268

153:                                              ; preds = %146
  %154 = icmp sgt i32 %41, 0
  %155 = or i1 %39, %154
  br i1 %155, label %164, label %156

156:                                              ; preds = %153
  %157 = getelementptr inbounds %class.GrScissorState, %class.GrScissorState* %13, i64 0, i32 0, i32 0
  %158 = load i32, i32* %157, align 4
  %159 = icmp slt i32 %118, %158
  br i1 %159, label %164, label %160

160:                                              ; preds = %156
  %161 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 1, i32 0, i32 1
  %162 = load i32, i32* %161, align 4
  %163 = icmp slt i32 %117, %162
  br i1 %163, label %164, label %269

164:                                              ; preds = %160, %156, %153
  br i1 %18, label %165, label %169

165:                                              ; preds = %164
  %166 = bitcast %"class.std::__1::unique_ptr"* %15 to %struct.SkIRect*
  %167 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %166, i64 0, i32 1
  %168 = load i32, i32* %167, align 4
  br label %186

169:                                              ; preds = %164
  %170 = getelementptr inbounds %class.GrScissorState, %class.GrScissorState* %12, i64 0, i32 1, i32 1
  %171 = load i32, i32* %170, align 4
  %172 = icmp sgt i32 %171, 0
  br i1 %172, label %186, label %173

173:                                              ; preds = %169
  %174 = getelementptr inbounds %class.GrOp, %class.GrOp* %1, i64 1, i32 2
  %175 = bitcast %class.GrOp** %174 to i32*
  %176 = load i32, i32* %175, align 4
  %177 = bitcast %class.GrOp* %11 to i32*
  %178 = load i32, i32* %177, align 4
  %179 = icmp slt i32 %176, %178
  br i1 %179, label %186, label %180

180:                                              ; preds = %173
  %181 = getelementptr inbounds %class.GrScissorState, %class.GrScissorState* %12, i64 0, i32 1, i32 3
  %182 = load i32, i32* %181, align 4
  %183 = getelementptr inbounds %class.GrScissorState, %class.GrScissorState* %12, i64 0, i32 0, i32 1
  %184 = load i32, i32* %183, align 4
  %185 = icmp slt i32 %182, %184
  br i1 %185, label %186, label %268

186:                                              ; preds = %165, %180, %173, %169
  %187 = phi i32 [ %168, %165 ], [ %171, %180 ], [ %171, %173 ], [ %171, %169 ]
  %188 = bitcast %"class.std::__1::unique_ptr"* %15 to %struct.SkIRect*
  %189 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %15, i64 1
  %190 = bitcast %"class.std::__1::unique_ptr"* %189 to i32*
  %191 = load i32, i32* %190, align 4
  %192 = sext i32 %191 to i64
  %193 = sext i32 %17 to i64
  %194 = sub nsw i64 %192, %193
  %195 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %188, i64 0, i32 3
  %196 = load i32, i32* %195, align 4
  %197 = sext i32 %196 to i64
  %198 = sext i32 %187 to i64
  %199 = sub nsw i64 %197, %198
  %200 = icmp slt i64 %194, 1
  %201 = icmp slt i64 %199, 1
  %202 = or i1 %200, %201
  br i1 %202, label %268, label %203

203:                                              ; preds = %186
  %204 = or i64 %199, %194
  %205 = add nsw i64 %204, 2147483648
  %206 = icmp ugt i64 %205, 4294967295
  br i1 %206, label %268, label %207

207:                                              ; preds = %203
  %208 = sext i32 %118 to i64
  %209 = sext i32 %38 to i64
  %210 = sub nsw i64 %208, %209
  %211 = sext i32 %117 to i64
  %212 = sext i32 %41 to i64
  %213 = sub nsw i64 %211, %212
  %214 = icmp slt i64 %210, 1
  %215 = icmp slt i64 %213, 1
  %216 = or i1 %214, %215
  br i1 %216, label %268, label %217

217:                                              ; preds = %207
  %218 = or i64 %213, %210
  %219 = add nsw i64 %218, 2147483648
  %220 = icmp ugt i64 %219, 4294967295
  %221 = icmp sgt i32 %38, %17
  %222 = or i1 %221, %220
  %223 = icmp sgt i32 %41, %187
  %224 = or i1 %223, %222
  %225 = icmp slt i32 %118, %191
  %226 = or i1 %225, %224
  %227 = icmp sge i32 %117, %196
  %228 = xor i1 %226, true
  %229 = and i1 %227, %228
  br i1 %229, label %269, label %268

230:                                              ; preds = %4
  %231 = bitcast %class.GrOp* %11 to i32*
  %232 = load i32, i32* %231, align 4
  %233 = getelementptr inbounds %class.GrScissorState, %class.GrScissorState* %13, i64 0, i32 0, i32 0
  %234 = load i32, i32* %233, align 4
  %235 = icmp eq i32 %232, %234
  br i1 %235, label %236, label %268

236:                                              ; preds = %230
  %237 = getelementptr inbounds %class.GrScissorState, %class.GrScissorState* %12, i64 0, i32 0, i32 1
  %238 = load i32, i32* %237, align 4
  %239 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 1, i32 0, i32 1
  %240 = load i32, i32* %239, align 4
  %241 = icmp eq i32 %238, %240
  br i1 %241, label %242, label %268

242:                                              ; preds = %236
  %243 = getelementptr inbounds %class.GrOp, %class.GrOp* %1, i64 1, i32 1
  %244 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 1, i32 1
  %245 = bitcast %"class.std::__1::unique_ptr"* %243 to i8*
  %246 = bitcast %struct.SkIRect* %244 to i8*
  %247 = tail call i32 @bcmp(i8* %245, i8* %246, i64 16) #12
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %249, label %268

249:                                              ; preds = %242
  %250 = and i32 %7, 1
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %258, label %252

252:                                              ; preds = %249
  %253 = getelementptr inbounds %class.GrOp, %class.GrOp* %1, i64 1, i32 3
  %254 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 2
  %255 = bitcast %"struct.std::__1::array"* %254 to i8*
  %256 = bitcast i16* %253 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %255, i8* align 4 %256, i64 16, i1 false)
  %257 = load i32, i32* %6, align 4
  br label %258

258:                                              ; preds = %249, %252
  %259 = phi i32 [ %7, %249 ], [ %257, %252 ]
  %260 = and i32 %259, 2
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %267, label %262

262:                                              ; preds = %258
  %263 = getelementptr inbounds %class.GrOp, %class.GrOp* %1, i64 1, i32 6, i32 2
  %264 = bitcast float* %263 to i8*
  %265 = load i8, i8* %264, align 8, !range !3
  %266 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 3
  store i8 %265, i8* %266, align 8
  br label %267

267:                                              ; preds = %258, %262
  store i32 3, i32* %8, align 4
  br label %269

268:                                              ; preds = %230, %236, %186, %203, %207, %180, %139, %132, %125, %116, %242, %217, %146
  br label %269

269:                                              ; preds = %160, %217, %268, %267, %105
  %270 = phi i32 [ 0, %105 ], [ 2, %268 ], [ 0, %267 ], [ 0, %217 ], [ 0, %160 ]
  ret i32 %270
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9GrClearOp9onExecuteEP14GrOpFlushStateRK6SkRect(%class.GrClearOp*, %class.GrOpFlushState* nocapture readonly, %struct.SkRect* nocapture readnone dereferenceable(16)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 4
  %5 = load i32, i32* %4, align 4
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %19, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %class.GrOpFlushState, %class.GrOpFlushState* %1, i64 0, i32 15
  %10 = load %class.GrOpsRenderPass*, %class.GrOpsRenderPass** %9, align 8
  %11 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 1
  %12 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 2
  %13 = bitcast %"struct.std::__1::array"* %12 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 8
  %15 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 2, i32 0, i64 2
  %16 = bitcast float* %15 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 8
  tail call void @_ZN15GrOpsRenderPass5clearERK14GrScissorStateNSt3__15arrayIfLm4EEE(%class.GrOpsRenderPass* %10, %class.GrScissorState* dereferenceable(24) %11, <2 x float> %14, <2 x float> %17) #12
  %18 = load i32, i32* %4, align 4
  br label %19

19:                                               ; preds = %3, %8
  %20 = phi i32 [ %5, %3 ], [ %18, %8 ]
  %21 = and i32 %20, 2
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %30, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %class.GrOpFlushState, %class.GrOpFlushState* %1, i64 0, i32 15
  %25 = load %class.GrOpsRenderPass*, %class.GrOpsRenderPass** %24, align 8
  %26 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 1
  %27 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 3
  %28 = load i8, i8* %27, align 8, !range !3
  %29 = icmp ne i8 %28, 0
  tail call void @_ZN15GrOpsRenderPass16clearStencilClipERK14GrScissorStateb(%class.GrOpsRenderPass* %25, %class.GrScissorState* dereferenceable(24) %26, i1 zeroext %29) #12
  br label %30

30:                                               ; preds = %19, %23
  ret void
}

declare void @_ZN15GrOpsRenderPass5clearERK14GrScissorStateNSt3__15arrayIfLm4EEE(%class.GrOpsRenderPass*, %class.GrScissorState* dereferenceable(24), <2 x float>, <2 x float>) local_unnamed_addr #1

declare void @_ZN15GrOpsRenderPass16clearStencilClipERK14GrScissorStateb(%class.GrOpsRenderPass*, %class.GrScissorState* dereferenceable(24), i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4GrOpD2Ev(%class.GrOp*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %class.GrOp, %class.GrOp* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTV4GrOp, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrOp, %class.GrOp* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %class.GrOp*, %class.GrOp** %3, align 8
  store %class.GrOp* null, %class.GrOp** %3, align 8
  %5 = icmp eq %class.GrOp* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %class.GrOp* %4 to void (%class.GrOp*)***
  %8 = load void (%class.GrOp*)**, void (%class.GrOp*)*** %7, align 8
  %9 = getelementptr inbounds void (%class.GrOp*)*, void (%class.GrOp*)** %8, i64 1
  %10 = load void (%class.GrOp*)*, void (%class.GrOp*)** %9, align 8
  tail call void %10(%class.GrOp* nonnull %4) #12
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9GrClearOpD0Ev(%class.GrClearOp*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTV4GrOp, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrClearOp, %class.GrClearOp* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %class.GrOp*, %class.GrOp** %3, align 8
  store %class.GrOp* null, %class.GrOp** %3, align 8
  %5 = icmp eq %class.GrOp* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %class.GrOp* %4 to void (%class.GrOp*)***
  %8 = load void (%class.GrOp*)**, void (%class.GrOp*)*** %7, align 8
  %9 = getelementptr inbounds void (%class.GrOp*)*, void (%class.GrOp*)** %8, i64 1
  %10 = load void (%class.GrOp*)*, void (%class.GrOp*)** %9, align 8
  tail call void %10(%class.GrOp* nonnull %4) #12
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %class.GrClearOp* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK9GrClearOp4nameEv(%class.GrClearOp*) unnamed_addr #3 comdat align 2 {
  ret i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK4GrOp12visitProxiesERKNSt3__18functionIFvP14GrSurfaceProxy11GrMipmappedEEE(%class.GrOp*, %"class.std::__1::function.137"*) unnamed_addr #3 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9GrClearOp12onPrePrepareEP18GrRecordingContextRK18GrSurfaceProxyViewP13GrAppliedClipRKN15GrXferProcessor12DstProxyViewE18GrXferBarrierFlags8GrLoadOp(%class.GrClearOp*, %class.GrRecordingContext*, %class.GrSurfaceProxyView* dereferenceable(16), %class.GrAppliedClip*, %"class.GrXferProcessor::DstProxyView"* dereferenceable(32), i32, i32) unnamed_addr #3 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9GrClearOp9onPrepareEP14GrOpFlushState(%class.GrClearOp*, %class.GrOpFlushState*) unnamed_addr #3 comdat align 2 {
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4GrOpD0Ev(%class.GrOp*) unnamed_addr #3 comdat align 2 {
  tail call void @llvm.trap() #13
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN4GrOp19onCombineIfPossibleEPS_P12SkArenaAllocRK6GrCaps(%class.GrOp*, %class.GrOp*, %class.SkArenaAlloc*, %class.GrCaps* dereferenceable(232)) unnamed_addr #3 comdat align 2 {
  ret i32 2
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind readonly }
attributes #11 = { builtin nounwind }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{i8 0, i8 2}
