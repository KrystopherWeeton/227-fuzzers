; ModuleID = '../../third_party/opus/src/silk/float/residual_energy_FLP.c'
source_filename = "../../third_party/opus/src/silk/float/residual_energy_FLP.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@.str = private unnamed_addr constant [25 x i8] c"assertion failed: D >= 0\00", align 1
@.str.1 = private unnamed_addr constant [60 x i8] c"../../third_party/opus/src/silk/float/residual_energy_FLP.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden float @silk_residual_energy_covar_FLP(float* nocapture readonly, float* nocapture, float* nocapture readonly, float, i32) local_unnamed_addr #0 {
  %6 = icmp sgt i32 %4, -1
  br i1 %6, label %8, label %7

7:                                                ; preds = %5
  tail call void @celt_fatal(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i64 0, i64 0), i32 50) #4
  unreachable

8:                                                ; preds = %5
  %9 = icmp eq i32 %4, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %8
  %11 = fcmp ogt float %3, 0.000000e+00
  br i1 %11, label %197, label %196

12:                                               ; preds = %8
  %13 = load float, float* %1, align 4
  %14 = mul nsw i32 %4, %4
  %15 = add nsw i32 %14, -1
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds float, float* %1, i64 %16
  %18 = load float, float* %17, align 4
  %19 = fadd float %13, %18
  %20 = fmul float %19, 0x3E45798EE0000000
  %21 = sext i32 %4 to i64
  %22 = zext i32 %4 to i64
  %23 = add nsw i64 %22, -1
  %24 = add nsw i64 %22, -2
  %25 = and i64 %22, 3
  %26 = icmp ult i64 %23, 3
  %27 = sub nsw i64 %22, %25
  %28 = icmp eq i64 %25, 0
  %29 = and i64 %22, 1
  %30 = icmp eq i64 %23, 0
  %31 = sub nsw i64 %22, %29
  %32 = icmp eq i64 %29, 0
  br label %33

33:                                               ; preds = %49, %12
  %34 = phi float [ %50, %49 ], [ %20, %12 ]
  %35 = phi i32 [ %51, %49 ], [ 0, %12 ]
  br i1 %26, label %173, label %139

36:                                               ; preds = %100
  %37 = fcmp ogt float %114, 0.000000e+00
  br i1 %37, label %194, label %38

38:                                               ; preds = %36
  br i1 %30, label %39, label %53

39:                                               ; preds = %53, %38
  %40 = phi i64 [ 0, %38 ], [ %71, %53 ]
  %41 = phi i32 [ 0, %38 ], [ %72, %53 ]
  br i1 %32, label %49, label %42

42:                                               ; preds = %39
  %43 = mul nsw i32 %41, %4
  %44 = sext i32 %43 to i64
  %45 = add nsw i64 %40, %44
  %46 = getelementptr inbounds float, float* %1, i64 %45
  %47 = load float, float* %46, align 4
  %48 = fadd float %34, %47
  store float %48, float* %46, align 4
  br label %49

49:                                               ; preds = %39, %42
  %50 = fmul float %34, 2.000000e+00
  %51 = add nuw nsw i32 %35, 1
  %52 = icmp eq i32 %51, 10
  br i1 %52, label %196, label %33

53:                                               ; preds = %38, %53
  %54 = phi i64 [ %71, %53 ], [ 0, %38 ]
  %55 = phi i32 [ %72, %53 ], [ 0, %38 ]
  %56 = phi i64 [ %73, %53 ], [ %31, %38 ]
  %57 = mul nsw i32 %55, %4
  %58 = sext i32 %57 to i64
  %59 = add nsw i64 %54, %58
  %60 = getelementptr inbounds float, float* %1, i64 %59
  %61 = load float, float* %60, align 4
  %62 = fadd float %34, %61
  store float %62, float* %60, align 4
  %63 = or i64 %54, 1
  %64 = or i32 %55, 1
  %65 = mul nsw i32 %64, %4
  %66 = sext i32 %65 to i64
  %67 = add nsw i64 %63, %66
  %68 = getelementptr inbounds float, float* %1, i64 %67
  %69 = load float, float* %68, align 4
  %70 = fadd float %34, %69
  store float %70, float* %68, align 4
  %71 = add nuw nsw i64 %54, 2
  %72 = add nuw nsw i32 %55, 2
  %73 = add i64 %56, -2
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %39, label %53

75:                                               ; preds = %100, %190
  %76 = phi i64 [ 0, %190 ], [ %79, %100 ]
  %77 = phi i64 [ 1, %190 ], [ %115, %100 ]
  %78 = phi float [ %193, %190 ], [ %114, %100 ]
  %79 = add nuw nsw i64 %76, 1
  %80 = icmp slt i64 %79, %21
  br i1 %80, label %81, label %100

81:                                               ; preds = %75
  %82 = sub i64 %23, %76
  %83 = and i64 %82, 1
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %95, label %85

85:                                               ; preds = %81
  %86 = mul nsw i64 %77, %21
  %87 = add nsw i64 %86, %76
  %88 = getelementptr inbounds float, float* %1, i64 %87
  %89 = load float, float* %88, align 4
  %90 = getelementptr inbounds float, float* %0, i64 %77
  %91 = load float, float* %90, align 4
  %92 = fmul float %89, %91
  %93 = fadd float %92, 0.000000e+00
  %94 = add nuw nsw i64 %77, 1
  br label %95

95:                                               ; preds = %85, %81
  %96 = phi float [ %93, %85 ], [ undef, %81 ]
  %97 = phi i64 [ %94, %85 ], [ %77, %81 ]
  %98 = phi float [ %93, %85 ], [ 0.000000e+00, %81 ]
  %99 = icmp eq i64 %24, %76
  br i1 %99, label %100, label %117

100:                                              ; preds = %95, %117, %75
  %101 = phi float [ 0.000000e+00, %75 ], [ %96, %95 ], [ %136, %117 ]
  %102 = getelementptr inbounds float, float* %0, i64 %76
  %103 = load float, float* %102, align 4
  %104 = fmul float %101, 2.000000e+00
  %105 = trunc i64 %76 to i32
  %106 = mul nsw i32 %105, %4
  %107 = add nsw i32 %106, %105
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float, float* %1, i64 %108
  %110 = load float, float* %109, align 4
  %111 = fmul float %103, %110
  %112 = fadd float %104, %111
  %113 = fmul float %103, %112
  %114 = fadd float %78, %113
  %115 = add nuw nsw i64 %77, 1
  %116 = icmp eq i64 %79, %22
  br i1 %116, label %36, label %75

117:                                              ; preds = %95, %117
  %118 = phi i64 [ %137, %117 ], [ %97, %95 ]
  %119 = phi float [ %136, %117 ], [ %98, %95 ]
  %120 = mul nsw i64 %118, %21
  %121 = add nsw i64 %120, %76
  %122 = getelementptr inbounds float, float* %1, i64 %121
  %123 = load float, float* %122, align 4
  %124 = getelementptr inbounds float, float* %0, i64 %118
  %125 = load float, float* %124, align 4
  %126 = fmul float %123, %125
  %127 = fadd float %119, %126
  %128 = add nuw nsw i64 %118, 1
  %129 = mul nsw i64 %128, %21
  %130 = add nsw i64 %129, %76
  %131 = getelementptr inbounds float, float* %1, i64 %130
  %132 = load float, float* %131, align 4
  %133 = getelementptr inbounds float, float* %0, i64 %128
  %134 = load float, float* %133, align 4
  %135 = fmul float %132, %134
  %136 = fadd float %127, %135
  %137 = add nuw nsw i64 %118, 2
  %138 = icmp eq i64 %137, %22
  br i1 %138, label %100, label %117

139:                                              ; preds = %33, %139
  %140 = phi i64 [ %170, %139 ], [ 0, %33 ]
  %141 = phi float [ %169, %139 ], [ 0.000000e+00, %33 ]
  %142 = phi i64 [ %171, %139 ], [ %27, %33 ]
  %143 = getelementptr inbounds float, float* %2, i64 %140
  %144 = load float, float* %143, align 4
  %145 = getelementptr inbounds float, float* %0, i64 %140
  %146 = load float, float* %145, align 4
  %147 = fmul float %144, %146
  %148 = fadd float %141, %147
  %149 = or i64 %140, 1
  %150 = getelementptr inbounds float, float* %2, i64 %149
  %151 = load float, float* %150, align 4
  %152 = getelementptr inbounds float, float* %0, i64 %149
  %153 = load float, float* %152, align 4
  %154 = fmul float %151, %153
  %155 = fadd float %148, %154
  %156 = or i64 %140, 2
  %157 = getelementptr inbounds float, float* %2, i64 %156
  %158 = load float, float* %157, align 4
  %159 = getelementptr inbounds float, float* %0, i64 %156
  %160 = load float, float* %159, align 4
  %161 = fmul float %158, %160
  %162 = fadd float %155, %161
  %163 = or i64 %140, 3
  %164 = getelementptr inbounds float, float* %2, i64 %163
  %165 = load float, float* %164, align 4
  %166 = getelementptr inbounds float, float* %0, i64 %163
  %167 = load float, float* %166, align 4
  %168 = fmul float %165, %167
  %169 = fadd float %162, %168
  %170 = add nuw nsw i64 %140, 4
  %171 = add i64 %142, -4
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %173, label %139

173:                                              ; preds = %139, %33
  %174 = phi float [ undef, %33 ], [ %169, %139 ]
  %175 = phi i64 [ 0, %33 ], [ %170, %139 ]
  %176 = phi float [ 0.000000e+00, %33 ], [ %169, %139 ]
  br i1 %28, label %190, label %177

177:                                              ; preds = %173, %177
  %178 = phi i64 [ %187, %177 ], [ %175, %173 ]
  %179 = phi float [ %186, %177 ], [ %176, %173 ]
  %180 = phi i64 [ %188, %177 ], [ %25, %173 ]
  %181 = getelementptr inbounds float, float* %2, i64 %178
  %182 = load float, float* %181, align 4
  %183 = getelementptr inbounds float, float* %0, i64 %178
  %184 = load float, float* %183, align 4
  %185 = fmul float %182, %184
  %186 = fadd float %179, %185
  %187 = add nuw nsw i64 %178, 1
  %188 = add i64 %180, -1
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %190, label %177, !llvm.loop !2

190:                                              ; preds = %177, %173
  %191 = phi float [ %174, %173 ], [ %186, %177 ]
  %192 = fmul float %191, 2.000000e+00
  %193 = fsub float %3, %192
  br label %75

194:                                              ; preds = %36
  %195 = icmp eq i32 %35, 10
  br i1 %195, label %196, label %197

196:                                              ; preds = %10, %49, %194
  br label %197

197:                                              ; preds = %10, %194, %196
  %198 = phi float [ 1.000000e+00, %196 ], [ %114, %194 ], [ %3, %10 ]
  ret float %198
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_residual_energy_FLP(float* nocapture, float*, [16 x float]*, float* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 {
  %8 = alloca [192 x float], align 16
  %9 = bitcast [192 x float]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 768, i8* nonnull %9) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -1, i64 768, i1 false)
  %10 = getelementptr inbounds [192 x float], [192 x float]* %8, i64 0, i64 0
  %11 = sext i32 %6 to i64
  %12 = getelementptr inbounds [192 x float], [192 x float]* %8, i64 0, i64 %11
  %13 = add nsw i32 %6, %4
  %14 = getelementptr inbounds [16 x float], [16 x float]* %2, i64 0, i64 0
  %15 = shl nsw i32 %13, 1
  call void @silk_LPC_analysis_filter_FLP(float* nonnull %10, float* %14, float* %1, i32 %15, i32 %6) #5
  %16 = load float, float* %3, align 4
  %17 = fmul float %16, %16
  %18 = fpext float %17 to double
  %19 = call double @silk_energy_FLP(float* %12, i32 %4) #5
  %20 = fmul double %19, %18
  %21 = fptrunc double %20 to float
  store float %21, float* %0, align 4
  %22 = getelementptr inbounds float, float* %3, i64 1
  %23 = load float, float* %22, align 4
  %24 = fmul float %23, %23
  %25 = fpext float %24 to double
  %26 = sext i32 %13 to i64
  %27 = getelementptr inbounds float, float* %12, i64 %26
  %28 = call double @silk_energy_FLP(float* %27, i32 %4) #5
  %29 = fmul double %28, %25
  %30 = fptrunc double %29 to float
  %31 = getelementptr inbounds float, float* %0, i64 1
  store float %30, float* %31, align 4
  %32 = icmp eq i32 %5, 4
  br i1 %32, label %33, label %53

33:                                               ; preds = %7
  %34 = getelementptr inbounds [16 x float], [16 x float]* %2, i64 1, i64 0
  %35 = sext i32 %15 to i64
  %36 = getelementptr inbounds float, float* %1, i64 %35
  call void @silk_LPC_analysis_filter_FLP(float* nonnull %10, float* %34, float* %36, i32 %15, i32 %6) #5
  %37 = getelementptr inbounds float, float* %3, i64 2
  %38 = load float, float* %37, align 4
  %39 = fmul float %38, %38
  %40 = fpext float %39 to double
  %41 = call double @silk_energy_FLP(float* %12, i32 %4) #5
  %42 = fmul double %41, %40
  %43 = fptrunc double %42 to float
  %44 = getelementptr inbounds float, float* %0, i64 2
  store float %43, float* %44, align 4
  %45 = getelementptr inbounds float, float* %3, i64 3
  %46 = load float, float* %45, align 4
  %47 = fmul float %46, %46
  %48 = fpext float %47 to double
  %49 = call double @silk_energy_FLP(float* %27, i32 %4) #5
  %50 = fmul double %49, %48
  %51 = fptrunc double %50 to float
  %52 = getelementptr inbounds float, float* %0, i64 3
  store float %51, float* %52, align 4
  br label %53

53:                                               ; preds = %33, %7
  call void @llvm.lifetime.end.p0i8(i64 768, i8* nonnull %9) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @silk_LPC_analysis_filter_FLP(float*, float*, float*, i32, i32) local_unnamed_addr #3

declare double @silk_energy_FLP(float*, i32) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
