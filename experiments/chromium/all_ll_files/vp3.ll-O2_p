; ModuleID = '../../third_party/ffmpeg/libavcodec/vp3.c'
source_filename = "../../third_party/ffmpeg/libavcodec/vp3.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVRational = type { i32, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVCodecInternal = type { i32, i32, %struct.AVFrame*, %struct.AVBufferRef*, i8*, %struct.DecodeSimpleContext, %struct.AVBSFContext*, %struct.AVPacket*, %struct.AVFifoBuffer*, i8*, i32, i8*, %struct.EncodeSimpleContext, i32, i8*, i32, %struct.AVPacket*, %struct.AVFrame*, i32, i32, i64, i64, %struct.AVFrame*, %struct.AVPacket*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 }
%struct.DecodeSimpleContext = type { %struct.AVPacket* }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVBSFInternal = type opaque
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVFifoBuffer = type { i8*, i8*, i8*, i8*, i32, i32 }
%struct.EncodeSimpleContext = type { %struct.AVFrame* }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVDictionary = type opaque
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVCodecDefault = type { i8*, i8* }
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVCodecHWConfigInternal = type opaque
%struct.anon = type { i8, i8 }
%struct.Vp3DecodeContext = type { %struct.AVCodecContext*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.ThreadFrame, %struct.ThreadFrame, %struct.ThreadFrame, i32, [64 x i8], [64 x i8], %struct.HpelDSPContext, %struct.VideoDSPContext, %struct.VP3DSPContext, [64 x i16], i32, i32, i32, [3 x i32], i32, [3 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [2 x i32], %struct.Vp3Fragment*, [3 x i32], [3 x i32], i8, i8, i32, [2 x [2 x i8]*], [2 x [64 x i16]], [64 x i32], [384 x [64 x i8]], [2 x [3 x i8]], [2 x [3 x [64 x i8]]], [2 x [3 x [64 x i16]]], [3 x [64 x i16*]], i16*, [3 x [64 x i32]], i32, [3 x i32*], i32*, i32*, [3 x i32], [80 x %struct.VLC], %struct.VLC, %struct.VLC, [2 x %struct.VLC], %struct.VLC, %struct.VLC, [2 x [7 x %struct.VLC]], [3 x [2 x [3 x [64 x i16]]]], i32*, i8*, i8*, [80 x %struct.HuffTable], [64 x i8], [258 x i32], %struct.VP4Predictor*, [8 x i8] }
%struct.ThreadFrame = type { %struct.AVFrame*, [2 x %struct.AVCodecContext*], %struct.AVBufferRef* }
%struct.HpelDSPContext = type { [4 x [4 x void (i8*, i8*, i64, i32)*]], [4 x [4 x void (i8*, i8*, i64, i32)*]], [4 x [4 x void (i8*, i8*, i64, i32)*]], [4 x void (i8*, i8*, i64, i32)*] }
%struct.VideoDSPContext = type { void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i64, i32)* }
%struct.VP3DSPContext = type { void (i8*, i8*, i8*, i64, i32)*, void (i8*, i64, i16*)*, void (i8*, i64, i16*)*, void (i8*, i64, i16*)*, void (i8*, i64, i32*)*, void (i8*, i64, i32*)*, void (i8*, i64, i32*)*, void (i8*, i64, i32*)* }
%struct.Vp3Fragment = type { i16, i8, i8 }
%struct.VLC = type { i32, [2 x i16]*, i32, i32 }
%struct.HuffTable = type { [32 x %struct.HuffEntry], i8 }
%struct.HuffEntry = type { i8, i8 }
%struct.VP4Predictor = type { i32, i32 }
%struct.GetBitContext = type { i8*, i8*, i32, i32, i32 }

@.str = private unnamed_addr constant [7 x i8] c"theora\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"Theora\00", align 1
@ff_theora_decoder = hidden local_unnamed_addr global %struct.AVCodec { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0), i32 0, i32 30, i32 4099, %struct.AVRational* null, i32* null, i32* null, i32* null, i64* null, i8 0, %struct.AVClass* null, %struct.AVProfile* null, i8* null, i32 40752, %struct.AVCodec* null, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)* @vp3_update_thread_context, %struct.AVCodecDefault* null, void (%struct.AVCodec*)* null, i32 (%struct.AVCodecContext*)* @theora_decode_init, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)* null, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)* @vp3_decode_frame, i32 (%struct.AVCodecContext*)* @vp3_decode_end, i32 (%struct.AVCodecContext*, %struct.AVPacket*)* null, i32 (%struct.AVCodecContext*, %struct.AVFrame*)* null, void (%struct.AVCodecContext*)* @vp3_decode_flush, i32 82, i8* null, %struct.AVCodecHWConfigInternal** null, i32* null }, align 8
@.str.2 = private unnamed_addr constant [4 x i8] c"vp3\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"On2 VP3\00", align 1
@ff_vp3_decoder = hidden local_unnamed_addr global %struct.AVCodec { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i32 0, i32 29, i32 4099, %struct.AVRational* null, i32* null, i32* null, i32* null, i64* null, i8 0, %struct.AVClass* null, %struct.AVProfile* null, i8* null, i32 40752, %struct.AVCodec* null, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)* @vp3_update_thread_context, %struct.AVCodecDefault* null, void (%struct.AVCodec*)* null, i32 (%struct.AVCodecContext*)* @vp3_decode_init, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)* null, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)* @vp3_decode_frame, i32 (%struct.AVCodecContext*)* @vp3_decode_end, i32 (%struct.AVCodecContext*, %struct.AVPacket*)* null, i32 (%struct.AVCodecContext*, %struct.AVFrame*)* null, void (%struct.AVCodecContext*)* @vp3_decode_flush, i32 66, i8* null, %struct.AVCodecHWConfigInternal** null, i32* null }, align 8
@.str.4 = private unnamed_addr constant [20 x i8] c"Missing extradata!\0A\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"Corrupt extradata\0A\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"Invalid extradata!\0A\00", align 1
@.str.7 = private unnamed_addr constant [34 x i8] c"Unknown Theora config packet: %d\0A\00", align 1
@.str.8 = private unnamed_addr constant [27 x i8] c"%d bits left in packet %X\0A\00", align 1
@.str.9 = private unnamed_addr constant [29 x i8] c"Theora bitstream version %X\0A\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"theora 0\00", align 1
@.str.11 = private unnamed_addr constant [47 x i8] c"Old (<alpha3) Theora bitstream, flipped image\0A\00", align 1
@.str.12 = private unnamed_addr constant [57 x i8] c"Invalid frame dimensions - w:%d h:%d x:%d y:%d (%dx%d).\0A\00", align 1
@.str.13 = private unnamed_addr constant [19 x i8] c"Invalid framerate\0A\00", align 1
@theora_pix_fmts = internal unnamed_addr constant [4 x i32] [i32 0, i32 -1, i32 4, i32 5], align 16
@.str.14 = private unnamed_addr constant [22 x i8] c"Invalid pixel format\0A\00", align 1
@.str.15 = private unnamed_addr constant [33 x i8] c"invalid number of base matrixes\0A\00", align 1
@.str.16 = private unnamed_addr constant [27 x i8] c"invalid base matrix index\0A\00", align 1
@.str.17 = private unnamed_addr constant [20 x i8] c"invalid qi %d > 63\0A\00", align 1
@.str.18 = private unnamed_addr constant [23 x i8] c"huffman tree overflow\0A\00", align 1
@.str.19 = private unnamed_addr constant [78 x i8] c"midstream reconfiguration with multithreading is unsupported, try -threads 1\0A\00", align 1
@.str.20 = private unnamed_addr constant [49 x i8] c"Header packet passed to frame decoder, skipping\0A\00", align 1
@.str.21 = private unnamed_addr constant [41 x i8] c"Data packet without prior valid headers\0A\00", align 1
@.str.22 = private unnamed_addr constant [32 x i8] c" VP3 %sframe #%d: Q index = %d\0A\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c"key\00", align 1
@.str.24 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.25 = private unnamed_addr constant [16 x i8] c"VP version: %d\0A\00", align 1
@.str.26 = private unnamed_addr constant [45 x i8] c"Warning, unsupported keyframe coding type?!\0A\00", align 1
@.str.27 = private unnamed_addr constant [33 x i8] c"vp3: first frame not a keyframe\0A\00", align 1
@.str.28 = private unnamed_addr constant [29 x i8] c"error in unpack_superblocks\0A\00", align 1
@.str.29 = private unnamed_addr constant [23 x i8] c"error in unpack_modes\0A\00", align 1
@.str.30 = private unnamed_addr constant [25 x i8] c"error in unpack_vectors\0A\00", align 1
@.str.31 = private unnamed_addr constant [28 x i8] c"error in unpack_block_qpis\0A\00", align 1
@.str.32 = private unnamed_addr constant [28 x i8] c"error in unpack_dct_coeffs\0A\00", align 1
@.str.33 = private unnamed_addr constant [47 x i8] c"Invalid partially coded superblock run length\0A\00", align 1
@.str.34 = private unnamed_addr constant [43 x i8] c"Invalid fully coded superblock run length\0A\00", align 1
@ModeAlphabet = internal unnamed_addr constant [6 x [8 x i32]] [[8 x i32] [i32 3, i32 4, i32 2, i32 0, i32 1, i32 5, i32 6, i32 7], [8 x i32] [i32 3, i32 4, i32 0, i32 2, i32 1, i32 5, i32 6, i32 7], [8 x i32] [i32 3, i32 2, i32 4, i32 0, i32 1, i32 5, i32 6, i32 7], [8 x i32] [i32 3, i32 2, i32 0, i32 4, i32 1, i32 5, i32 6, i32 7], [8 x i32] [i32 0, i32 3, i32 4, i32 2, i32 1, i32 5, i32 6, i32 7], [8 x i32] [i32 0, i32 5, i32 3, i32 4, i32 2, i32 1, i32 6, i32 7]], align 16
@fixed_motion_vector_table = internal unnamed_addr constant [64 x i8] c"\00\00\01\FF\02\FE\03\FD\04\FC\05\FB\06\FA\07\F9\08\F8\09\F7\0A\F6\0B\F5\0C\F4\0D\F3\0E\F2\0F\F1\10\F0\11\EF\12\EE\13\ED\14\EC\15\EB\16\EA\17\E9\18\E8\19\E7\1A\E6\1B\E5\1C\E4\1D\E3\1E\E2\1F\E1", align 16
@vp4_mv_table_selector = internal unnamed_addr constant [32 x i8] c"\00\01\02\02\03\03\03\03\04\04\04\04\04\04\04\04\05\05\05\05\05\05\05\05\06\06\06\06\06\06\06\06", align 16
@.str.35 = private unnamed_addr constant [44 x i8] c"Invalid number of coefficients at level %d\0A\00", align 1
@.str.36 = private unnamed_addr constant [44 x i8] c"Invalid zero run of %d with %d coeffs left\0A\00", align 1
@.str.37 = private unnamed_addr constant [18 x i8] c"Invalid token %d\0A\00", align 1
@.str.38 = private unnamed_addr constant [31 x i8] c"More blocks ended than coded!\0A\00", align 1
@eob_run_table = internal unnamed_addr constant [7 x %struct.anon] [%struct.anon { i8 1, i8 0 }, %struct.anon { i8 2, i8 0 }, %struct.anon { i8 3, i8 0 }, %struct.anon { i8 4, i8 2 }, %struct.anon { i8 8, i8 3 }, %struct.anon { i8 16, i8 4 }, %struct.anon { i8 0, i8 12 }], align 1
@coeff_get_bits = internal unnamed_addr constant [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\01\01\01\01\02\03\04\05\06\0A\01\01\01\01\01\01\01\02\02", align 16
@coeff_tables = internal unnamed_addr constant [32 x i16*] [i16* null, i16* null, i16* null, i16* null, i16* null, i16* null, i16* null, i16* getelementptr inbounds ([1 x i16], [1 x i16]* @coeff_table_token_7_8, i32 0, i32 0), i16* getelementptr inbounds ([1 x i16], [1 x i16]* @coeff_table_token_7_8, i32 0, i32 0), i16* getelementptr inbounds ([1 x i16], [1 x i16]* @coeff_table_token_9, i32 0, i32 0), i16* getelementptr inbounds ([1 x i16], [1 x i16]* @coeff_table_token_10, i32 0, i32 0), i16* getelementptr inbounds ([1 x i16], [1 x i16]* @coeff_table_token_11, i32 0, i32 0), i16* getelementptr inbounds ([1 x i16], [1 x i16]* @coeff_table_token_12, i32 0, i32 0), i16* getelementptr inbounds ([2 x i16], [2 x i16]* @coeff_table_token_13, i32 0, i32 0), i16* getelementptr inbounds ([2 x i16], [2 x i16]* @coeff_table_token_14, i32 0, i32 0), i16* getelementptr inbounds ([2 x i16], [2 x i16]* @coeff_table_token_15, i32 0, i32 0), i16* getelementptr inbounds ([2 x i16], [2 x i16]* @coeff_table_token_16, i32 0, i32 0), i16* getelementptr inbounds ([4 x i16], [4 x i16]* @coeff_table_token_17, i32 0, i32 0), i16* getelementptr inbounds ([8 x i16], [8 x i16]* @coeff_table_token_18, i32 0, i32 0), i16* getelementptr inbounds ([16 x i16], [16 x i16]* @coeff_table_token_19, i32 0, i32 0), i16* getelementptr inbounds ([32 x i16], [32 x i16]* @coeff_table_token_20, i32 0, i32 0), i16* getelementptr inbounds ([64 x i16], [64 x i16]* @coeff_table_token_21, i32 0, i32 0), i16* getelementptr inbounds ([1024 x i16], [1024 x i16]* @coeff_table_token_22, i32 0, i32 0), i16* getelementptr inbounds ([2 x i16], [2 x i16]* @coeff_table_token_23_24_25_26_27_28_29, i32 0, i32 0), i16* getelementptr inbounds ([2 x i16], [2 x i16]* @coeff_table_token_23_24_25_26_27_28_29, i32 0, i32 0), i16* getelementptr inbounds ([2 x i16], [2 x i16]* @coeff_table_token_23_24_25_26_27_28_29, i32 0, i32 0), i16* getelementptr inbounds ([2 x i16], [2 x i16]* @coeff_table_token_23_24_25_26_27_28_29, i32 0, i32 0), i16* getelementptr inbounds ([2 x i16], [2 x i16]* @coeff_table_token_23_24_25_26_27_28_29, i32 0, i32 0), i16* getelementptr inbounds ([2 x i16], [2 x i16]* @coeff_table_token_23_24_25_26_27_28_29, i32 0, i32 0), i16* getelementptr inbounds ([2 x i16], [2 x i16]* @coeff_table_token_23_24_25_26_27_28_29, i32 0, i32 0), i16* getelementptr inbounds ([4 x i16], [4 x i16]* @coeff_table_token_30_31, i32 0, i32 0), i16* getelementptr inbounds ([4 x i16], [4 x i16]* @coeff_table_token_30_31, i32 0, i32 0)], align 16
@zero_run_base = internal unnamed_addr constant [32 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01\02\03\04\05\06\0A\01\02", align 16
@zero_run_get_bits = internal unnamed_addr constant [32 x i8] c"\00\00\00\00\00\00\00\03\06\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\03\00\01", align 16
@coeff_table_token_7_8 = internal constant [1 x i16] zeroinitializer, align 2
@coeff_table_token_9 = internal constant [1 x i16] [i16 1], align 2
@coeff_table_token_10 = internal constant [1 x i16] [i16 -1], align 2
@coeff_table_token_11 = internal constant [1 x i16] [i16 2], align 2
@coeff_table_token_12 = internal constant [1 x i16] [i16 -2], align 2
@coeff_table_token_13 = internal constant [2 x i16] [i16 3, i16 -3], align 2
@coeff_table_token_14 = internal constant [2 x i16] [i16 4, i16 -4], align 2
@coeff_table_token_15 = internal constant [2 x i16] [i16 5, i16 -5], align 2
@coeff_table_token_16 = internal constant [2 x i16] [i16 6, i16 -6], align 2
@coeff_table_token_17 = internal constant [4 x i16] [i16 7, i16 8, i16 -7, i16 -8], align 2
@coeff_table_token_18 = internal constant [8 x i16] [i16 9, i16 10, i16 11, i16 12, i16 -9, i16 -10, i16 -11, i16 -12], align 16
@coeff_table_token_19 = internal constant [16 x i16] [i16 13, i16 14, i16 15, i16 16, i16 17, i16 18, i16 19, i16 20, i16 -13, i16 -14, i16 -15, i16 -16, i16 -17, i16 -18, i16 -19, i16 -20], align 16
@coeff_table_token_20 = internal constant [32 x i16] [i16 21, i16 22, i16 23, i16 24, i16 25, i16 26, i16 27, i16 28, i16 29, i16 30, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 -21, i16 -22, i16 -23, i16 -24, i16 -25, i16 -26, i16 -27, i16 -28, i16 -29, i16 -30, i16 -31, i16 -32, i16 -33, i16 -34, i16 -35, i16 -36], align 16
@coeff_table_token_21 = internal constant [64 x i16] [i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 54, i16 55, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 67, i16 68, i16 -37, i16 -38, i16 -39, i16 -40, i16 -41, i16 -42, i16 -43, i16 -44, i16 -45, i16 -46, i16 -47, i16 -48, i16 -49, i16 -50, i16 -51, i16 -52, i16 -53, i16 -54, i16 -55, i16 -56, i16 -57, i16 -58, i16 -59, i16 -60, i16 -61, i16 -62, i16 -63, i16 -64, i16 -65, i16 -66, i16 -67, i16 -68], align 16
@coeff_table_token_22 = internal constant [1024 x i16] [i16 69, i16 70, i16 71, i16 72, i16 73, i16 74, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 81, i16 82, i16 83, i16 84, i16 85, i16 86, i16 87, i16 88, i16 89, i16 90, i16 91, i16 92, i16 93, i16 94, i16 95, i16 96, i16 97, i16 98, i16 99, i16 100, i16 101, i16 102, i16 103, i16 104, i16 105, i16 106, i16 107, i16 108, i16 109, i16 110, i16 111, i16 112, i16 113, i16 114, i16 115, i16 116, i16 117, i16 118, i16 119, i16 120, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 128, i16 129, i16 130, i16 131, i16 132, i16 133, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 140, i16 141, i16 142, i16 143, i16 144, i16 145, i16 146, i16 147, i16 148, i16 149, i16 150, i16 151, i16 152, i16 153, i16 154, i16 155, i16 156, i16 157, i16 158, i16 159, i16 160, i16 161, i16 162, i16 163, i16 164, i16 165, i16 166, i16 167, i16 168, i16 169, i16 170, i16 171, i16 172, i16 173, i16 174, i16 175, i16 176, i16 177, i16 178, i16 179, i16 180, i16 181, i16 182, i16 183, i16 184, i16 185, i16 186, i16 187, i16 188, i16 189, i16 190, i16 191, i16 192, i16 193, i16 194, i16 195, i16 196, i16 197, i16 198, i16 199, i16 200, i16 201, i16 202, i16 203, i16 204, i16 205, i16 206, i16 207, i16 208, i16 209, i16 210, i16 211, i16 212, i16 213, i16 214, i16 215, i16 216, i16 217, i16 218, i16 219, i16 220, i16 221, i16 222, i16 223, i16 224, i16 225, i16 226, i16 227, i16 228, i16 229, i16 230, i16 231, i16 232, i16 233, i16 234, i16 235, i16 236, i16 237, i16 238, i16 239, i16 240, i16 241, i16 242, i16 243, i16 244, i16 245, i16 246, i16 247, i16 248, i16 249, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 269, i16 270, i16 271, i16 272, i16 273, i16 274, i16 275, i16 276, i16 277, i16 278, i16 279, i16 280, i16 281, i16 282, i16 283, i16 284, i16 285, i16 286, i16 287, i16 288, i16 289, i16 290, i16 291, i16 292, i16 293, i16 294, i16 295, i16 296, i16 297, i16 298, i16 299, i16 300, i16 301, i16 302, i16 303, i16 304, i16 305, i16 306, i16 307, i16 308, i16 309, i16 310, i16 311, i16 312, i16 313, i16 314, i16 315, i16 316, i16 317, i16 318, i16 319, i16 320, i16 321, i16 322, i16 323, i16 324, i16 325, i16 326, i16 327, i16 328, i16 329, i16 330, i16 331, i16 332, i16 333, i16 334, i16 335, i16 336, i16 337, i16 338, i16 339, i16 340, i16 341, i16 342, i16 343, i16 344, i16 345, i16 346, i16 347, i16 348, i16 349, i16 350, i16 351, i16 352, i16 353, i16 354, i16 355, i16 356, i16 357, i16 358, i16 359, i16 360, i16 361, i16 362, i16 363, i16 364, i16 365, i16 366, i16 367, i16 368, i16 369, i16 370, i16 371, i16 372, i16 373, i16 374, i16 375, i16 376, i16 377, i16 378, i16 379, i16 380, i16 381, i16 382, i16 383, i16 384, i16 385, i16 386, i16 387, i16 388, i16 389, i16 390, i16 391, i16 392, i16 393, i16 394, i16 395, i16 396, i16 397, i16 398, i16 399, i16 400, i16 401, i16 402, i16 403, i16 404, i16 405, i16 406, i16 407, i16 408, i16 409, i16 410, i16 411, i16 412, i16 413, i16 414, i16 415, i16 416, i16 417, i16 418, i16 419, i16 420, i16 421, i16 422, i16 423, i16 424, i16 425, i16 426, i16 427, i16 428, i16 429, i16 430, i16 431, i16 432, i16 433, i16 434, i16 435, i16 436, i16 437, i16 438, i16 439, i16 440, i16 441, i16 442, i16 443, i16 444, i16 445, i16 446, i16 447, i16 448, i16 449, i16 450, i16 451, i16 452, i16 453, i16 454, i16 455, i16 456, i16 457, i16 458, i16 459, i16 460, i16 461, i16 462, i16 463, i16 464, i16 465, i16 466, i16 467, i16 468, i16 469, i16 470, i16 471, i16 472, i16 473, i16 474, i16 475, i16 476, i16 477, i16 478, i16 479, i16 480, i16 481, i16 482, i16 483, i16 484, i16 485, i16 486, i16 487, i16 488, i16 489, i16 490, i16 491, i16 492, i16 493, i16 494, i16 495, i16 496, i16 497, i16 498, i16 499, i16 500, i16 501, i16 502, i16 503, i16 504, i16 505, i16 506, i16 507, i16 508, i16 509, i16 510, i16 511, i16 512, i16 513, i16 514, i16 515, i16 516, i16 517, i16 518, i16 519, i16 520, i16 521, i16 522, i16 523, i16 524, i16 525, i16 526, i16 527, i16 528, i16 529, i16 530, i16 531, i16 532, i16 533, i16 534, i16 535, i16 536, i16 537, i16 538, i16 539, i16 540, i16 541, i16 542, i16 543, i16 544, i16 545, i16 546, i16 547, i16 548, i16 549, i16 550, i16 551, i16 552, i16 553, i16 554, i16 555, i16 556, i16 557, i16 558, i16 559, i16 560, i16 561, i16 562, i16 563, i16 564, i16 565, i16 566, i16 567, i16 568, i16 569, i16 570, i16 571, i16 572, i16 573, i16 574, i16 575, i16 576, i16 577, i16 578, i16 579, i16 580, i16 -69, i16 -70, i16 -71, i16 -72, i16 -73, i16 -74, i16 -75, i16 -76, i16 -77, i16 -78, i16 -79, i16 -80, i16 -81, i16 -82, i16 -83, i16 -84, i16 -85, i16 -86, i16 -87, i16 -88, i16 -89, i16 -90, i16 -91, i16 -92, i16 -93, i16 -94, i16 -95, i16 -96, i16 -97, i16 -98, i16 -99, i16 -100, i16 -101, i16 -102, i16 -103, i16 -104, i16 -105, i16 -106, i16 -107, i16 -108, i16 -109, i16 -110, i16 -111, i16 -112, i16 -113, i16 -114, i16 -115, i16 -116, i16 -117, i16 -118, i16 -119, i16 -120, i16 -121, i16 -122, i16 -123, i16 -124, i16 -125, i16 -126, i16 -127, i16 -128, i16 -129, i16 -130, i16 -131, i16 -132, i16 -133, i16 -134, i16 -135, i16 -136, i16 -137, i16 -138, i16 -139, i16 -140, i16 -141, i16 -142, i16 -143, i16 -144, i16 -145, i16 -146, i16 -147, i16 -148, i16 -149, i16 -150, i16 -151, i16 -152, i16 -153, i16 -154, i16 -155, i16 -156, i16 -157, i16 -158, i16 -159, i16 -160, i16 -161, i16 -162, i16 -163, i16 -164, i16 -165, i16 -166, i16 -167, i16 -168, i16 -169, i16 -170, i16 -171, i16 -172, i16 -173, i16 -174, i16 -175, i16 -176, i16 -177, i16 -178, i16 -179, i16 -180, i16 -181, i16 -182, i16 -183, i16 -184, i16 -185, i16 -186, i16 -187, i16 -188, i16 -189, i16 -190, i16 -191, i16 -192, i16 -193, i16 -194, i16 -195, i16 -196, i16 -197, i16 -198, i16 -199, i16 -200, i16 -201, i16 -202, i16 -203, i16 -204, i16 -205, i16 -206, i16 -207, i16 -208, i16 -209, i16 -210, i16 -211, i16 -212, i16 -213, i16 -214, i16 -215, i16 -216, i16 -217, i16 -218, i16 -219, i16 -220, i16 -221, i16 -222, i16 -223, i16 -224, i16 -225, i16 -226, i16 -227, i16 -228, i16 -229, i16 -230, i16 -231, i16 -232, i16 -233, i16 -234, i16 -235, i16 -236, i16 -237, i16 -238, i16 -239, i16 -240, i16 -241, i16 -242, i16 -243, i16 -244, i16 -245, i16 -246, i16 -247, i16 -248, i16 -249, i16 -250, i16 -251, i16 -252, i16 -253, i16 -254, i16 -255, i16 -256, i16 -257, i16 -258, i16 -259, i16 -260, i16 -261, i16 -262, i16 -263, i16 -264, i16 -265, i16 -266, i16 -267, i16 -268, i16 -269, i16 -270, i16 -271, i16 -272, i16 -273, i16 -274, i16 -275, i16 -276, i16 -277, i16 -278, i16 -279, i16 -280, i16 -281, i16 -282, i16 -283, i16 -284, i16 -285, i16 -286, i16 -287, i16 -288, i16 -289, i16 -290, i16 -291, i16 -292, i16 -293, i16 -294, i16 -295, i16 -296, i16 -297, i16 -298, i16 -299, i16 -300, i16 -301, i16 -302, i16 -303, i16 -304, i16 -305, i16 -306, i16 -307, i16 -308, i16 -309, i16 -310, i16 -311, i16 -312, i16 -313, i16 -314, i16 -315, i16 -316, i16 -317, i16 -318, i16 -319, i16 -320, i16 -321, i16 -322, i16 -323, i16 -324, i16 -325, i16 -326, i16 -327, i16 -328, i16 -329, i16 -330, i16 -331, i16 -332, i16 -333, i16 -334, i16 -335, i16 -336, i16 -337, i16 -338, i16 -339, i16 -340, i16 -341, i16 -342, i16 -343, i16 -344, i16 -345, i16 -346, i16 -347, i16 -348, i16 -349, i16 -350, i16 -351, i16 -352, i16 -353, i16 -354, i16 -355, i16 -356, i16 -357, i16 -358, i16 -359, i16 -360, i16 -361, i16 -362, i16 -363, i16 -364, i16 -365, i16 -366, i16 -367, i16 -368, i16 -369, i16 -370, i16 -371, i16 -372, i16 -373, i16 -374, i16 -375, i16 -376, i16 -377, i16 -378, i16 -379, i16 -380, i16 -381, i16 -382, i16 -383, i16 -384, i16 -385, i16 -386, i16 -387, i16 -388, i16 -389, i16 -390, i16 -391, i16 -392, i16 -393, i16 -394, i16 -395, i16 -396, i16 -397, i16 -398, i16 -399, i16 -400, i16 -401, i16 -402, i16 -403, i16 -404, i16 -405, i16 -406, i16 -407, i16 -408, i16 -409, i16 -410, i16 -411, i16 -412, i16 -413, i16 -414, i16 -415, i16 -416, i16 -417, i16 -418, i16 -419, i16 -420, i16 -421, i16 -422, i16 -423, i16 -424, i16 -425, i16 -426, i16 -427, i16 -428, i16 -429, i16 -430, i16 -431, i16 -432, i16 -433, i16 -434, i16 -435, i16 -436, i16 -437, i16 -438, i16 -439, i16 -440, i16 -441, i16 -442, i16 -443, i16 -444, i16 -445, i16 -446, i16 -447, i16 -448, i16 -449, i16 -450, i16 -451, i16 -452, i16 -453, i16 -454, i16 -455, i16 -456, i16 -457, i16 -458, i16 -459, i16 -460, i16 -461, i16 -462, i16 -463, i16 -464, i16 -465, i16 -466, i16 -467, i16 -468, i16 -469, i16 -470, i16 -471, i16 -472, i16 -473, i16 -474, i16 -475, i16 -476, i16 -477, i16 -478, i16 -479, i16 -480, i16 -481, i16 -482, i16 -483, i16 -484, i16 -485, i16 -486, i16 -487, i16 -488, i16 -489, i16 -490, i16 -491, i16 -492, i16 -493, i16 -494, i16 -495, i16 -496, i16 -497, i16 -498, i16 -499, i16 -500, i16 -501, i16 -502, i16 -503, i16 -504, i16 -505, i16 -506, i16 -507, i16 -508, i16 -509, i16 -510, i16 -511, i16 -512, i16 -513, i16 -514, i16 -515, i16 -516, i16 -517, i16 -518, i16 -519, i16 -520, i16 -521, i16 -522, i16 -523, i16 -524, i16 -525, i16 -526, i16 -527, i16 -528, i16 -529, i16 -530, i16 -531, i16 -532, i16 -533, i16 -534, i16 -535, i16 -536, i16 -537, i16 -538, i16 -539, i16 -540, i16 -541, i16 -542, i16 -543, i16 -544, i16 -545, i16 -546, i16 -547, i16 -548, i16 -549, i16 -550, i16 -551, i16 -552, i16 -553, i16 -554, i16 -555, i16 -556, i16 -557, i16 -558, i16 -559, i16 -560, i16 -561, i16 -562, i16 -563, i16 -564, i16 -565, i16 -566, i16 -567, i16 -568, i16 -569, i16 -570, i16 -571, i16 -572, i16 -573, i16 -574, i16 -575, i16 -576, i16 -577, i16 -578, i16 -579, i16 -580], align 16
@coeff_table_token_23_24_25_26_27_28_29 = internal constant [2 x i16] [i16 1, i16 -1], align 2
@coeff_table_token_30_31 = internal constant [4 x i16] [i16 2, i16 3, i16 -2, i16 -3], align 2
@reverse_dc_prediction.predictor_transform = internal unnamed_addr constant [16 x [4 x i32]] [[4 x i32] zeroinitializer, [4 x i32] [i32 0, i32 0, i32 0, i32 128], [4 x i32] [i32 0, i32 0, i32 128, i32 0], [4 x i32] [i32 0, i32 0, i32 53, i32 75], [4 x i32] [i32 0, i32 128, i32 0, i32 0], [4 x i32] [i32 0, i32 64, i32 0, i32 64], [4 x i32] [i32 0, i32 128, i32 0, i32 0], [4 x i32] [i32 0, i32 0, i32 53, i32 75], [4 x i32] [i32 128, i32 0, i32 0, i32 0], [4 x i32] [i32 0, i32 0, i32 0, i32 128], [4 x i32] [i32 64, i32 0, i32 64, i32 0], [4 x i32] [i32 0, i32 0, i32 53, i32 75], [4 x i32] [i32 0, i32 128, i32 0, i32 0], [4 x i32] [i32 -104, i32 116, i32 0, i32 116], [4 x i32] [i32 24, i32 80, i32 24, i32 0], [4 x i32] [i32 -104, i32 116, i32 0, i32 116]], align 16
@reverse_dc_prediction.compatible_frame = internal unnamed_addr constant [9 x i8] c"\01\00\01\01\01\02\02\01\03", align 1
@hilbert_offset = internal unnamed_addr constant [16 x [2 x i8]] [[2 x i8] zeroinitializer, [2 x i8] c"\01\00", [2 x i8] c"\01\01", [2 x i8] c"\00\01", [2 x i8] c"\00\02", [2 x i8] c"\00\03", [2 x i8] c"\01\03", [2 x i8] c"\01\02", [2 x i8] c"\02\02", [2 x i8] c"\02\03", [2 x i8] c"\03\03", [2 x i8] c"\03\02", [2 x i8] c"\03\01", [2 x i8] c"\02\01", [2 x i8] c"\02\00", [2 x i8] c"\03\00"], align 16
@.str.39 = private unnamed_addr constant [28 x i8] c"Coefficient index overflow\0A\00", align 1
@ff_zigzag_direct = external local_unnamed_addr constant [64 x i8], align 16
@vp31_dc_scale_factor = internal unnamed_addr constant [64 x i8] c"\DC\C8\BE\B4\AA\AA\A0\A0\96\96\8C\8C\82\82xxnnddZZZPPPFFF<<<<2222(((((\1E\1E\1E\1E\1E\1E\1E\14\14\14\14\14\14\14\14\0A\0A\0A\0A\0A\0A\0A", align 16
@vp4_y_dc_scale_factor = internal unnamed_addr constant [64 x i8] c"\B4\B4\B4\B4\B4\B4\AF\AA\A5\A0\9D\9B\98\96\93\91\8E\8C\89\87\84\82\7F}zxuspnkifda_\5CZWURPMKHFCA><9742/-*(%# \1E\1B\19", align 16
@vp4_uv_dc_scale_factor = internal unnamed_addr constant [64 x i8] c"\96\96\96\96\96\96\96\96\96\96\96\96\96\96\93\91\8E\8C\89\87\84\82\7F}zxuspnkifda_\5CZWURPMKHFCA><9742/-*(%# \1E\1B\19", align 16
@vp31_ac_scale_factor = internal unnamed_addr constant [64 x i16] [i16 500, i16 450, i16 400, i16 370, i16 340, i16 310, i16 285, i16 265, i16 245, i16 225, i16 210, i16 195, i16 185, i16 180, i16 170, i16 160, i16 150, i16 145, i16 135, i16 130, i16 125, i16 115, i16 110, i16 107, i16 100, i16 96, i16 93, i16 89, i16 85, i16 82, i16 75, i16 74, i16 70, i16 68, i16 64, i16 60, i16 57, i16 56, i16 52, i16 50, i16 49, i16 45, i16 44, i16 43, i16 40, i16 38, i16 37, i16 35, i16 33, i16 32, i16 30, i16 29, i16 28, i16 25, i16 24, i16 22, i16 21, i16 19, i16 18, i16 17, i16 15, i16 13, i16 12, i16 10], align 16
@vp4_ac_scale_factor = internal unnamed_addr constant [64 x i16] [i16 500, i16 475, i16 450, i16 430, i16 410, i16 390, i16 370, i16 350, i16 330, i16 315, i16 300, i16 285, i16 270, i16 260, i16 250, i16 240, i16 230, i16 220, i16 210, i16 200, i16 190, i16 185, i16 180, i16 170, i16 160, i16 150, i16 143, i16 135, i16 128, i16 120, i16 113, i16 106, i16 100, i16 94, i16 90, i16 85, i16 80, i16 75, i16 70, i16 66, i16 62, i16 57, i16 52, i16 49, i16 45, i16 41, i16 38, i16 35, i16 33, i16 30, i16 27, i16 24, i16 22, i16 20, i16 18, i16 16, i16 14, i16 12, i16 10, i16 9, i16 7, i16 6, i16 4, i16 1], align 16
@vp31_intra_y_dequant = internal unnamed_addr constant [64 x i8] c"\10\0B\0A\10\18(3=\0C\0C\0E\13\1A:<7\0E\0D\10\18(9E8\0E\11\16\1D3WP>\12\16%:DmgM\18#7@Qhq\5C1@NWgyxeH\5C_bpdgc", align 16
@vp4_generic_dequant = internal unnamed_addr constant [64 x i8] c"\10\11\12\14\16\18\1A\1C\11\12\14\16\18\1A\1C \12\14\16\18\1A\1C $\14\16\18\1A\1C $(\16\18\1A\1C $(,\18\1A\1C $(,0\1A\1C $(,04\1C $(,048", align 16
@vp31_intra_c_dequant = internal unnamed_addr constant [64 x i8] c"\11\12\18/cccc\12\15\1ABcccc\18\1A8ccccc/Bcccccccccccccccccccccccccccccccccccccc", align 16
@vp31_inter_dequant = internal unnamed_addr constant [64 x i8] c"\10\10\10\14\18\1C (\10\10\14\18\1C (0\10\14\18\1C (0@\14\18\1C (0@@\18\1C (0@@@\1C (0@@@` (0@@@`\80(0@@@`\80\80", align 16
@vp4_filter_limit_values = internal unnamed_addr constant [64 x i8] c"\1E\19\14\14\0F\0F\0E\0E\0D\0D\0C\0C\0B\0B\0A\0A\09\09\08\08\07\07\07\07\06\06\06\06\05\05\05\05\04\04\04\04\03\03\03\03\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\01\01\01\01\01\01\01\01", align 16
@vp3_bias = internal constant [80 x [32 x [2 x i8]]] [[32 x [2 x i8]] [[2 x i8] c"\14\03", [2 x i8] c"\13\03", [2 x i8] c"\07\05", [2 x i8] c"\1E\06", [2 x i8] c"\01\07", [2 x i8] c"\03\08", [2 x i8] c"\1C\09", [2 x i8] c"\1A\0C", [2 x i8] c"\08\0C", [2 x i8] c"\06\0B", [2 x i8] c"\1D\0A", [2 x i8] c"\0E\04", [2 x i8] c"\0C\04", [2 x i8] c"\11\04", [2 x i8] c"\0D\04", [2 x i8] c"\15\04", [2 x i8] c"\18\06", [2 x i8] c"\17\06", [2 x i8] c"\10\05", [2 x i8] c"\1F\07", [2 x i8] c"\19\08", [2 x i8] c"\02\09", [2 x i8] c"\04\0A", [2 x i8] c"\05\0B", [2 x i8] c"\1B\0B", [2 x i8] c"\00\06", [2 x i8] c"\16\05", [2 x i8] c"\12\04", [2 x i8] c"\0F\05", [2 x i8] c"\0B\05", [2 x i8] c"\0A\04", [2 x i8] c"\09\04"], [32 x [2 x i8]] [[2 x i8] c"\14\03", [2 x i8] c"\13\03", [2 x i8] c"\0B\04", [2 x i8] c"\0C\04", [2 x i8] c"\0E\04", [2 x i8] c"\11\04", [2 x i8] c"\00\05", [2 x i8] c"\07\06", [2 x i8] c"\03\08", [2 x i8] c"\1D\0D", [2 x i8] c"\08\0D", [2 x i8] c"\1A\0C", [2 x i8] c"\06\0B", [2 x i8] c"\05\0B", [2 x i8] c"\1C\0B", [2 x i8] c"\19\09", [2 x i8] c"\01\07", [2 x i8] c"\0D\04", [2 x i8] c"\15\04", [2 x i8] c"\10\05", [2 x i8] c"\16\05", [2 x i8] c"\12\04", [2 x i8] c"\0A\04", [2 x i8] c"\09\04", [2 x i8] c"\0F\05", [2 x i8] c"\1E\07", [2 x i8] c"\17\07", [2 x i8] c"\18\07", [2 x i8] c"\1F\08", [2 x i8] c"\04\0A", [2 x i8] c"\1B\0A", [2 x i8] c"\02\09"], [32 x [2 x i8]] [[2 x i8] c"\14\03", [2 x i8] c"\13\03", [2 x i8] c"\0B\04", [2 x i8] c"\0C\04", [2 x i8] c"\0E\04", [2 x i8] c"\11\04", [2 x i8] c"\01\06", [2 x i8] c"\1E\07", [2 x i8] c"\02\08", [2 x i8] c"\03\08", [2 x i8] c"\10\05", [2 x i8] c"\15\04", [2 x i8] c"\0D\04", [2 x i8] c"\00\05", [2 x i8] c"\16\05", [2 x i8] c"\12\04", [2 x i8] c"\0F\05", [2 x i8] c"\1F\08", [2 x i8] c"\19\0A", [2 x i8] c"\1B\0B", [2 x i8] c"\06\0B", [2 x i8] c"\05\0B", [2 x i8] c"\1A\0C", [2 x i8] c"\1D\0E", [2 x i8] c"\08\0E", [2 x i8] c"\1C\0D", [2 x i8] c"\04\0A", [2 x i8] c"\18\07", [2 x i8] c"\07\07", [2 x i8] c"\17\07", [2 x i8] c"\0A\04", [2 x i8] c"\09\04"], [32 x [2 x i8]] [[2 x i8] c"\00\04", [2 x i8] c"\11\04", [2 x i8] c"\0E\04", [2 x i8] c"\15\05", [2 x i8] c"\07\06", [2 x i8] c"\17\06", [2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\0B\04", [2 x i8] c"\0C\04", [2 x i8] c"\14\04", [2 x i8] c"\03\07", [2 x i8] c"\19\09", [2 x i8] c"\06\0A", [2 x i8] c"\05\0A", [2 x i8] c"\1D\0D", [2 x i8] c"\08\0D", [2 x i8] c"\1C\0C", [2 x i8] c"\1A\0B", [2 x i8] c"\1B\0A", [2 x i8] c"\04\09", [2 x i8] c"\01\06", [2 x i8] c"\10\05", [2 x i8] c"\12\04", [2 x i8] c"\0D\04", [2 x i8] c"\13\04", [2 x i8] c"\16\07", [2 x i8] c"\1E\07", [2 x i8] c"\18\07", [2 x i8] c"\1F\08", [2 x i8] c"\02\08", [2 x i8] c"\0F\05"], [32 x [2 x i8]] [[2 x i8] c"\0F\04", [2 x i8] c"\05\09", [2 x i8] c"\19\09", [2 x i8] c"\16\08", [2 x i8] c"\1F\07", [2 x i8] c"\18\06", [2 x i8] c"\07\06", [2 x i8] c"\1B\09", [2 x i8] c"\06\0A", [2 x i8] c"\1D\0D", [2 x i8] c"\08\0D", [2 x i8] c"\1C\0C", [2 x i8] c"\1A\0B", [2 x i8] c"\04\08", [2 x i8] c"\02\07", [2 x i8] c"\11\04", [2 x i8] c"\00\04", [2 x i8] c"\0E\04", [2 x i8] c"\0B\04", [2 x i8] c"\0C\04", [2 x i8] c"\13\04", [2 x i8] c"\09\03", [2 x i8] c"\0A\03", [2 x i8] c"\15\06", [2 x i8] c"\17\06", [2 x i8] c"\10\05", [2 x i8] c"\12\04", [2 x i8] c"\0D\04", [2 x i8] c"\01\06", [2 x i8] c"\03\07", [2 x i8] c"\1E\07", [2 x i8] c"\14\05"], [32 x [2 x i8]] [[2 x i8] c"\0F\04", [2 x i8] c"\01\05", [2 x i8] c"\07\06", [2 x i8] c"\03\06", [2 x i8] c"\11\04", [2 x i8] c"\13\04", [2 x i8] c"\0E\04", [2 x i8] c"\12\04", [2 x i8] c"\14\05", [2 x i8] c"\1B\09", [2 x i8] c"\05\09", [2 x i8] c"\1D\0D", [2 x i8] c"\08\0D", [2 x i8] c"\1C\0C", [2 x i8] c"\1A\0B", [2 x i8] c"\19\0A", [2 x i8] c"\06\0A", [2 x i8] c"\16\0A", [2 x i8] c"\15\07", [2 x i8] c"\17\06", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\00\04", [2 x i8] c"\09\03", [2 x i8] c"\0A\03", [2 x i8] c"\10\05", [2 x i8] c"\02\07", [2 x i8] c"\1E\07", [2 x i8] c"\04\08", [2 x i8] c"\1F\08", [2 x i8] c"\18\07", [2 x i8] c"\0D\04"], [32 x [2 x i8]] [[2 x i8] c"\0D\03", [2 x i8] c"\11\04", [2 x i8] c"\12\04", [2 x i8] c"\1E\06", [2 x i8] c"\18\06", [2 x i8] c"\02\06", [2 x i8] c"\1B\09", [2 x i8] c"\06\09", [2 x i8] c"\15\08", [2 x i8] c"\1F\07", [2 x i8] c"\0E\04", [2 x i8] c"\01\05", [2 x i8] c"\14\06", [2 x i8] c"\03\06", [2 x i8] c"\10\05", [2 x i8] c"\13\05", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\00\04", [2 x i8] c"\17\06", [2 x i8] c"\07\07", [2 x i8] c"\05\09", [2 x i8] c"\19\0A", [2 x i8] c"\08\0D", [2 x i8] c"\1D\0E", [2 x i8] c"\16\0E", [2 x i8] c"\1C\0C", [2 x i8] c"\1A\0B", [2 x i8] c"\04\08", [2 x i8] c"\0F\05", [2 x i8] c"\0A\03", [2 x i8] c"\09\03"], [32 x [2 x i8]] [[2 x i8] c"\0A\02", [2 x i8] c"\03\05", [2 x i8] c"\13\05", [2 x i8] c"\18\06", [2 x i8] c"\07\07", [2 x i8] c"\05\08", [2 x i8] c"\15\09", [2 x i8] c"\06\09", [2 x i8] c"\10\05", [2 x i8] c"\0E\04", [2 x i8] c"\17\06", [2 x i8] c"\02\06", [2 x i8] c"\01\05", [2 x i8] c"\0B\04", [2 x i8] c"\0C\04", [2 x i8] c"\14\07", [2 x i8] c"\04\07", [2 x i8] c"\19\0A", [2 x i8] c"\1C\0C", [2 x i8] c"\08\0D", [2 x i8] c"\1D\0E", [2 x i8] c"\16\0E", [2 x i8] c"\1A\0B", [2 x i8] c"\1B\09", [2 x i8] c"\1F\08", [2 x i8] c"\1E\07", [2 x i8] c"\12\05", [2 x i8] c"\11\05", [2 x i8] c"\0F\05", [2 x i8] c"\0D\04", [2 x i8] c"\00\04", [2 x i8] c"\09\03"], [32 x [2 x i8]] [[2 x i8] c"\1D\05", [2 x i8] c"\07\05", [2 x i8] c"\00\04", [2 x i8] c"\0D\04", [2 x i8] c"\1A\06", [2 x i8] c"\13\06", [2 x i8] c"\0E\05", [2 x i8] c"\18\04", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\11\06", [2 x i8] c"\01\06", [2 x i8] c"\1C\05", [2 x i8] c"\12\06", [2 x i8] c"\08\06", [2 x i8] c"\19\05", [2 x i8] c"\14\07", [2 x i8] c"\15\08", [2 x i8] c"\06\0B", [2 x i8] c"\05\0B", [2 x i8] c"\04\0A", [2 x i8] c"\16\09", [2 x i8] c"\0F\06", [2 x i8] c"\1F\05", [2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\17\04", [2 x i8] c"\1B\06", [2 x i8] c"\03\08", [2 x i8] c"\02\08", [2 x i8] c"\10\07", [2 x i8] c"\1E\05"], [32 x [2 x i8]] [[2 x i8] c"\1E\04", [2 x i8] c"\07\05", [2 x i8] c"\06\0A", [2 x i8] c"\05\0A", [2 x i8] c"\04\09", [2 x i8] c"\16\08", [2 x i8] c"\03\07", [2 x i8] c"\10\06", [2 x i8] c"\0D\04", [2 x i8] c"\18\04", [2 x i8] c"\13\06", [2 x i8] c"\1A\06", [2 x i8] c"\0E\05", [2 x i8] c"\00\04", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\02\07", [2 x i8] c"\14\07", [2 x i8] c"\11\06", [2 x i8] c"\19\05", [2 x i8] c"\12\06", [2 x i8] c"\0F\06", [2 x i8] c"\1F\05", [2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\17\04", [2 x i8] c"\01\06", [2 x i8] c"\15\08", [2 x i8] c"\08\08", [2 x i8] c"\1D\07", [2 x i8] c"\1C\06", [2 x i8] c"\1B\06"], [32 x [2 x i8]] [[2 x i8] c"\16\07", [2 x i8] c"\08\07", [2 x i8] c"\02\06", [2 x i8] c"\1F\05", [2 x i8] c"\18\04", [2 x i8] c"\1D\06", [2 x i8] c"\03\06", [2 x i8] c"\19\05", [2 x i8] c"\1E\05", [2 x i8] c"\01\05", [2 x i8] c"\17\04", [2 x i8] c"\10\06", [2 x i8] c"\07\06", [2 x i8] c"\13\06", [2 x i8] c"\1A\06", [2 x i8] c"\0D\04", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\0E\05", [2 x i8] c"\06\0A", [2 x i8] c"\05\0A", [2 x i8] c"\04\09", [2 x i8] c"\15\08", [2 x i8] c"\14\07", [2 x i8] c"\11\06", [2 x i8] c"\00\04", [2 x i8] c"\1C\06", [2 x i8] c"\12\06", [2 x i8] c"\1B\06", [2 x i8] c"\0F\06", [2 x i8] c"\0A\03", [2 x i8] c"\09\03"], [32 x [2 x i8]] [[2 x i8] c"\00\03", [2 x i8] c"\04\07", [2 x i8] c"\15\07", [2 x i8] c"\1E\06", [2 x i8] c"\0F\05", [2 x i8] c"\19\05", [2 x i8] c"\1D\06", [2 x i8] c"\07\07", [2 x i8] c"\06\0A", [2 x i8] c"\05\0A", [2 x i8] c"\16\09", [2 x i8] c"\08\08", [2 x i8] c"\17\04", [2 x i8] c"\1A\06", [2 x i8] c"\13\06", [2 x i8] c"\10\06", [2 x i8] c"\02\06", [2 x i8] c"\0D\04", [2 x i8] c"\01\05", [2 x i8] c"\0E\05", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\14\07", [2 x i8] c"\1F\07", [2 x i8] c"\11\06", [2 x i8] c"\03\06", [2 x i8] c"\12\06", [2 x i8] c"\1B\06", [2 x i8] c"\1C\06", [2 x i8] c"\18\05", [2 x i8] c"\0A\03", [2 x i8] c"\09\03"], [32 x [2 x i8]] [[2 x i8] c"\09\02", [2 x i8] c"\00\03", [2 x i8] c"\0E\05", [2 x i8] c"\03\05", [2 x i8] c"\1A\06", [2 x i8] c"\12\06", [2 x i8] c"\11\06", [2 x i8] c"\08\08", [2 x i8] c"\15\08", [2 x i8] c"\1E\07", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\0F\06", [2 x i8] c"\07\08", [2 x i8] c"\06\0A", [2 x i8] c"\05\0A", [2 x i8] c"\16\09", [2 x i8] c"\04\07", [2 x i8] c"\1C\06", [2 x i8] c"\1B\06", [2 x i8] c"\18\05", [2 x i8] c"\19\06", [2 x i8] c"\02\06", [2 x i8] c"\01\05", [2 x i8] c"\17\05", [2 x i8] c"\1D\07", [2 x i8] c"\13\07", [2 x i8] c"\10\07", [2 x i8] c"\1F\08", [2 x i8] c"\14\08", [2 x i8] c"\0D\05", [2 x i8] c"\0A\03"], [32 x [2 x i8]] [[2 x i8] c"\09\02", [2 x i8] c"\00\03", [2 x i8] c"\02\05", [2 x i8] c"\0E\05", [2 x i8] c"\18\05", [2 x i8] c"\11\06", [2 x i8] c"\1D\07", [2 x i8] c"\15\08", [2 x i8] c"\05\08", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\1C\06", [2 x i8] c"\04\06", [2 x i8] c"\0F\06", [2 x i8] c"\1B\06", [2 x i8] c"\17\05", [2 x i8] c"\19\06", [2 x i8] c"\06\0A", [2 x i8] c"\16\0A", [2 x i8] c"\08\09", [2 x i8] c"\1E\08", [2 x i8] c"\13\07", [2 x i8] c"\03\05", [2 x i8] c"\10\07", [2 x i8] c"\1A\07", [2 x i8] c"\07\09", [2 x i8] c"\1F\09", [2 x i8] c"\14\08", [2 x i8] c"\12\07", [2 x i8] c"\0D\05", [2 x i8] c"\01\05", [2 x i8] c"\0A\03"], [32 x [2 x i8]] [[2 x i8] c"\09\02", [2 x i8] c"\00\03", [2 x i8] c"\03\04", [2 x i8] c"\01\04", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\17\05", [2 x i8] c"\0F\06", [2 x i8] c"\1E\08", [2 x i8] c"\15\08", [2 x i8] c"\07\09", [2 x i8] c"\06\09", [2 x i8] c"\1F\09", [2 x i8] c"\16\0A", [2 x i8] c"\08\0A", [2 x i8] c"\02\05", [2 x i8] c"\05\07", [2 x i8] c"\13\07", [2 x i8] c"\10\07", [2 x i8] c"\1A\07", [2 x i8] c"\0D\05", [2 x i8] c"\12\07", [2 x i8] c"\1D\08", [2 x i8] c"\14\08", [2 x i8] c"\18\06", [2 x i8] c"\0E\06", [2 x i8] c"\11\07", [2 x i8] c"\1C\07", [2 x i8] c"\04\06", [2 x i8] c"\19\07", [2 x i8] c"\1B\07", [2 x i8] c"\0A\03"], [32 x [2 x i8]] [[2 x i8] c"\0A\02", [2 x i8] c"\09\02", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\0F\06", [2 x i8] c"\05\06", [2 x i8] c"\1E\09", [2 x i8] c"\1D\09", [2 x i8] c"\1C\08", [2 x i8] c"\16\0C", [2 x i8] c"\08\0C", [2 x i8] c"\07\0B", [2 x i8] c"\1F\0A", [2 x i8] c"\15\09", [2 x i8] c"\1A\08", [2 x i8] c"\13\07", [2 x i8] c"\10\07", [2 x i8] c"\03\04", [2 x i8] c"\02\05", [2 x i8] c"\04\05", [2 x i8] c"\12\07", [2 x i8] c"\18\07", [2 x i8] c"\11\07", [2 x i8] c"\06\08", [2 x i8] c"\19\08", [2 x i8] c"\0D\05", [2 x i8] c"\0E\06", [2 x i8] c"\1B\08", [2 x i8] c"\14\08", [2 x i8] c"\17\07", [2 x i8] c"\01\05", [2 x i8] c"\00\04"], [32 x [2 x i8]] [[2 x i8] c"\0F\04", [2 x i8] c"\0B\04", [2 x i8] c"\0C\04", [2 x i8] c"\15\04", [2 x i8] c"\00\05", [2 x i8] c"\1A\07", [2 x i8] c"\01\07", [2 x i8] c"\18\06", [2 x i8] c"\16\05", [2 x i8] c"\1E\05", [2 x i8] c"\0E\04", [2 x i8] c"\0A\04", [2 x i8] c"\09\04", [2 x i8] c"\11\04", [2 x i8] c"\0D\04", [2 x i8] c"\17\05", [2 x i8] c"\1C\07", [2 x i8] c"\19\07", [2 x i8] c"\1B\08", [2 x i8] c"\02\09", [2 x i8] c"\1D\0B", [2 x i8] c"\05\0D", [2 x i8] c"\08\0E", [2 x i8] c"\06\0E", [2 x i8] c"\04\0C", [2 x i8] c"\03\0A", [2 x i8] c"\1F\07", [2 x i8] c"\14\04", [2 x i8] c"\12\04", [2 x i8] c"\10\05", [2 x i8] c"\07\05", [2 x i8] c"\13\04"], [32 x [2 x i8]] [[2 x i8] c"\0F\04", [2 x i8] c"\07\04", [2 x i8] c"\0B\04", [2 x i8] c"\0C\04", [2 x i8] c"\01\06", [2 x i8] c"\1F\06", [2 x i8] c"\1A\07", [2 x i8] c"\1B\08", [2 x i8] c"\02\08", [2 x i8] c"\16\06", [2 x i8] c"\11\04", [2 x i8] c"\0E\04", [2 x i8] c"\1E\05", [2 x i8] c"\00\05", [2 x i8] c"\09\04", [2 x i8] c"\0A\04", [2 x i8] c"\14\04", [2 x i8] c"\0D\04", [2 x i8] c"\18\06", [2 x i8] c"\19\07", [2 x i8] c"\03\08", [2 x i8] c"\06\0C", [2 x i8] c"\05\0C", [2 x i8] c"\1D\0C", [2 x i8] c"\08\0C", [2 x i8] c"\04\0A", [2 x i8] c"\1C\09", [2 x i8] c"\15\05", [2 x i8] c"\12\04", [2 x i8] c"\10\05", [2 x i8] c"\17\05", [2 x i8] c"\13\04"], [32 x [2 x i8]] [[2 x i8] c"\15\05", [2 x i8] c"\19\06", [2 x i8] c"\01\06", [2 x i8] c"\0F\04", [2 x i8] c"\14\04", [2 x i8] c"\07\04", [2 x i8] c"\0B\04", [2 x i8] c"\0C\04", [2 x i8] c"\11\04", [2 x i8] c"\0E\04", [2 x i8] c"\03\07", [2 x i8] c"\16\07", [2 x i8] c"\1F\06", [2 x i8] c"\18\06", [2 x i8] c"\1B\08", [2 x i8] c"\02\08", [2 x i8] c"\06\0C", [2 x i8] c"\1D\0D", [2 x i8] c"\08\0D", [2 x i8] c"\05\0B", [2 x i8] c"\04\0A", [2 x i8] c"\1C\09", [2 x i8] c"\1A\08", [2 x i8] c"\0A\04", [2 x i8] c"\09\04", [2 x i8] c"\13\04", [2 x i8] c"\12\04", [2 x i8] c"\1E\05", [2 x i8] c"\00\05", [2 x i8] c"\0D\04", [2 x i8] c"\10\05", [2 x i8] c"\17\05"], [32 x [2 x i8]] [[2 x i8] c"\1C\07", [2 x i8] c"\1B\07", [2 x i8] c"\16\08", [2 x i8] c"\08\0C", [2 x i8] c"\06\0C", [2 x i8] c"\1D\0B", [2 x i8] c"\05\0A", [2 x i8] c"\04\09", [2 x i8] c"\02\07", [2 x i8] c"\15\06", [2 x i8] c"\01\06", [2 x i8] c"\0F\04", [2 x i8] c"\17\04", [2 x i8] c"\07\04", [2 x i8] c"\0B\04", [2 x i8] c"\11\04", [2 x i8] c"\0C\04", [2 x i8] c"\13\04", [2 x i8] c"\19\06", [2 x i8] c"\1A\07", [2 x i8] c"\03\07", [2 x i8] c"\14\05", [2 x i8] c"\12\04", [2 x i8] c"\0E\04", [2 x i8] c"\1F\06", [2 x i8] c"\18\06", [2 x i8] c"\1E\05", [2 x i8] c"\0A\04", [2 x i8] c"\09\04", [2 x i8] c"\0D\04", [2 x i8] c"\10\05", [2 x i8] c"\00\05"], [32 x [2 x i8]] [[2 x i8] c"\1E\04", [2 x i8] c"\0F\04", [2 x i8] c"\11\04", [2 x i8] c"\00\04", [2 x i8] c"\07\04", [2 x i8] c"\12\04", [2 x i8] c"\17\04", [2 x i8] c"\15\07", [2 x i8] c"\1B\07", [2 x i8] c"\02\07", [2 x i8] c"\1A\07", [2 x i8] c"\19\06", [2 x i8] c"\01\06", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\0E\04", [2 x i8] c"\10\05", [2 x i8] c"\1C\08", [2 x i8] c"\05\0A", [2 x i8] c"\16\0B", [2 x i8] c"\08\0D", [2 x i8] c"\06\0D", [2 x i8] c"\1D\0C", [2 x i8] c"\04\09", [2 x i8] c"\03\07", [2 x i8] c"\14\06", [2 x i8] c"\0D\04", [2 x i8] c"\13\05", [2 x i8] c"\1F\06", [2 x i8] c"\18\06", [2 x i8] c"\0A\04", [2 x i8] c"\09\04"], [32 x [2 x i8]] [[2 x i8] c"\09\03", [2 x i8] c"\1E\04", [2 x i8] c"\03\06", [2 x i8] c"\1C\07", [2 x i8] c"\1B\07", [2 x i8] c"\1F\05", [2 x i8] c"\07\04", [2 x i8] c"\18\05", [2 x i8] c"\13\05", [2 x i8] c"\00\04", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\0E\04", [2 x i8] c"\17\04", [2 x i8] c"\10\05", [2 x i8] c"\15\09", [2 x i8] c"\06\0B", [2 x i8] c"\16\0D", [2 x i8] c"\08\0D", [2 x i8] c"\1D\0C", [2 x i8] c"\05\0A", [2 x i8] c"\04\08", [2 x i8] c"\02\07", [2 x i8] c"\14\07", [2 x i8] c"\1A\07", [2 x i8] c"\0D\04", [2 x i8] c"\12\05", [2 x i8] c"\19\06", [2 x i8] c"\01\06", [2 x i8] c"\11\05", [2 x i8] c"\0F\05", [2 x i8] c"\0A\04"], [32 x [2 x i8]] [[2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\12\05", [2 x i8] c"\19\05", [2 x i8] c"\1A\06", [2 x i8] c"\13\06", [2 x i8] c"\01\05", [2 x i8] c"\1F\05", [2 x i8] c"\11\05", [2 x i8] c"\0E\04", [2 x i8] c"\18\05", [2 x i8] c"\03\06", [2 x i8] c"\06\0A", [2 x i8] c"\08\0C", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\1D\0B", [2 x i8] c"\05\09", [2 x i8] c"\14\08", [2 x i8] c"\1B\07", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\0D\04", [2 x i8] c"\00\04", [2 x i8] c"\17\04", [2 x i8] c"\0F\05", [2 x i8] c"\07\05", [2 x i8] c"\04\08", [2 x i8] c"\1C\08", [2 x i8] c"\02\07", [2 x i8] c"\10\06", [2 x i8] c"\1E\05"], [32 x [2 x i8]] [[2 x i8] c"\00\03", [2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\03\05", [2 x i8] c"\1B\06", [2 x i8] c"\10\06", [2 x i8] c"\0D\04", [2 x i8] c"\1F\05", [2 x i8] c"\11\06", [2 x i8] c"\04\07", [2 x i8] c"\1C\07", [2 x i8] c"\0B\04", [2 x i8] c"\0C\04", [2 x i8] c"\18\05", [2 x i8] c"\07\05", [2 x i8] c"\19\05", [2 x i8] c"\1A\06", [2 x i8] c"\02\06", [2 x i8] c"\01\05", [2 x i8] c"\0E\05", [2 x i8] c"\17\04", [2 x i8] c"\13\08", [2 x i8] c"\14\0D", [2 x i8] c"\08\0D", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\1D\0B", [2 x i8] c"\06\0A", [2 x i8] c"\05\09", [2 x i8] c"\12\07", [2 x i8] c"\0F\06", [2 x i8] c"\1E\05"], [32 x [2 x i8]] [[2 x i8] c"\09\03", [2 x i8] c"\18\04", [2 x i8] c"\07\04", [2 x i8] c"\11\05", [2 x i8] c"\13\06", [2 x i8] c"\14\07", [2 x i8] c"\02\08", [2 x i8] c"\03\09", [2 x i8] c"\04\0B", [2 x i8] c"\06\0D", [2 x i8] c"\05\0D", [2 x i8] c"\16\0C", [2 x i8] c"\15\0A", [2 x i8] c"\0E\04", [2 x i8] c"\19\05", [2 x i8] c"\0F\05", [2 x i8] c"\1B\06", [2 x i8] c"\1D\06", [2 x i8] c"\1C\05", [2 x i8] c"\1E\04", [2 x i8] c"\0D\04", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\08\07", [2 x i8] c"\01\07", [2 x i8] c"\10\06", [2 x i8] c"\1F\05", [2 x i8] c"\17\04", [2 x i8] c"\12\06", [2 x i8] c"\1A\06", [2 x i8] c"\00\05", [2 x i8] c"\0A\04"], [32 x [2 x i8]] [[2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\1B\06", [2 x i8] c"\14\07", [2 x i8] c"\06\0C", [2 x i8] c"\05\0C", [2 x i8] c"\16\0B", [2 x i8] c"\04\0A", [2 x i8] c"\15\09", [2 x i8] c"\08\08", [2 x i8] c"\19\05", [2 x i8] c"\0E\04", [2 x i8] c"\13\06", [2 x i8] c"\01\06", [2 x i8] c"\0F\05", [2 x i8] c"\00\04", [2 x i8] c"\1E\04", [2 x i8] c"\0D\04", [2 x i8] c"\1F\05", [2 x i8] c"\1D\07", [2 x i8] c"\03\08", [2 x i8] c"\02\08", [2 x i8] c"\1A\06", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\1C\06", [2 x i8] c"\10\06", [2 x i8] c"\07\05", [2 x i8] c"\17\04", [2 x i8] c"\12\06", [2 x i8] c"\11\06", [2 x i8] c"\18\05"], [32 x [2 x i8]] [[2 x i8] c"\09\03", [2 x i8] c"\02\06", [2 x i8] c"\08\07", [2 x i8] c"\16\0C", [2 x i8] c"\06\0C", [2 x i8] c"\05\0B", [2 x i8] c"\15\0A", [2 x i8] c"\04\09", [2 x i8] c"\14\08", [2 x i8] c"\01\05", [2 x i8] c"\0F\05", [2 x i8] c"\1A\05", [2 x i8] c"\18\04", [2 x i8] c"\1D\06", [2 x i8] c"\12\06", [2 x i8] c"\1C\05", [2 x i8] c"\0D\04", [2 x i8] c"\10\06", [2 x i8] c"\1B\06", [2 x i8] c"\19\05", [2 x i8] c"\1E\04", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\11\06", [2 x i8] c"\13\07", [2 x i8] c"\03\07", [2 x i8] c"\1F\05", [2 x i8] c"\00\04", [2 x i8] c"\07\05", [2 x i8] c"\0E\05", [2 x i8] c"\17\04", [2 x i8] c"\0A\04"], [32 x [2 x i8]] [[2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\17\03", [2 x i8] c"\07\05", [2 x i8] c"\0E\05", [2 x i8] c"\03\06", [2 x i8] c"\06\0B", [2 x i8] c"\16\0C", [2 x i8] c"\15\0C", [2 x i8] c"\05\0A", [2 x i8] c"\14\09", [2 x i8] c"\04\08", [2 x i8] c"\12\07", [2 x i8] c"\01\05", [2 x i8] c"\18\04", [2 x i8] c"\0F\06", [2 x i8] c"\1D\06", [2 x i8] c"\1C\05", [2 x i8] c"\1A\05", [2 x i8] c"\08\08", [2 x i8] c"\13\08", [2 x i8] c"\10\07", [2 x i8] c"\1B\06", [2 x i8] c"\0D\05", [2 x i8] c"\1E\05", [2 x i8] c"\19\05", [2 x i8] c"\11\07", [2 x i8] c"\02\07", [2 x i8] c"\1F\06", [2 x i8] c"\00\04"], [32 x [2 x i8]] [[2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\19\04", [2 x i8] c"\04\07", [2 x i8] c"\12\07", [2 x i8] c"\10\07", [2 x i8] c"\11\07", [2 x i8] c"\1C\05", [2 x i8] c"\00\03", [2 x i8] c"\17\03", [2 x i8] c"\18\04", [2 x i8] c"\1D\06", [2 x i8] c"\02\06", [2 x i8] c"\0D\05", [2 x i8] c"\1A\05", [2 x i8] c"\1E\05", [2 x i8] c"\01\05", [2 x i8] c"\1B\06", [2 x i8] c"\07\06", [2 x i8] c"\03\06", [2 x i8] c"\08\08", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\06\0C", [2 x i8] c"\14\0B", [2 x i8] c"\05\0A", [2 x i8] c"\13\09", [2 x i8] c"\0F\07", [2 x i8] c"\0E\06", [2 x i8] c"\1F\06", [2 x i8] c"\0C\05", [2 x i8] c"\0B\05"], [32 x [2 x i8]] [[2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\01\04", [2 x i8] c"\0D\05", [2 x i8] c"\1D\06", [2 x i8] c"\07\06", [2 x i8] c"\17\03", [2 x i8] c"\00\03", [2 x i8] c"\18\04", [2 x i8] c"\1E\05", [2 x i8] c"\03\05", [2 x i8] c"\1C\05", [2 x i8] c"\0E\06", [2 x i8] c"\1F\06", [2 x i8] c"\0C\05", [2 x i8] c"\0B\05", [2 x i8] c"\1A\05", [2 x i8] c"\0F\07", [2 x i8] c"\04\07", [2 x i8] c"\1B\06", [2 x i8] c"\19\05", [2 x i8] c"\10\08", [2 x i8] c"\11\08", [2 x i8] c"\14\0C", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\06\0B", [2 x i8] c"\13\0A", [2 x i8] c"\05\09", [2 x i8] c"\08\09", [2 x i8] c"\12\09", [2 x i8] c"\02\06"], [32 x [2 x i8]] [[2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\17\03", [2 x i8] c"\13\0A", [2 x i8] c"\14\0B", [2 x i8] c"\16\0C", [2 x i8] c"\15\0C", [2 x i8] c"\12\09", [2 x i8] c"\11\08", [2 x i8] c"\05\07", [2 x i8] c"\0E\06", [2 x i8] c"\1E\05", [2 x i8] c"\01\04", [2 x i8] c"\00\03", [2 x i8] c"\18\04", [2 x i8] c"\1C\05", [2 x i8] c"\0F\07", [2 x i8] c"\10\08", [2 x i8] c"\08\09", [2 x i8] c"\06\09", [2 x i8] c"\1F\06", [2 x i8] c"\02\05", [2 x i8] c"\0C\05", [2 x i8] c"\0B\05", [2 x i8] c"\04\06", [2 x i8] c"\1B\06", [2 x i8] c"\1A\05", [2 x i8] c"\0D\06", [2 x i8] c"\1D\07", [2 x i8] c"\07\07", [2 x i8] c"\03\05", [2 x i8] c"\19\05"], [32 x [2 x i8]] [[2 x i8] c"\00\03", [2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\18\04", [2 x i8] c"\1D\07", [2 x i8] c"\11\0A", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\12\0D", [2 x i8] c"\14\0E", [2 x i8] c"\13\0E", [2 x i8] c"\08\0B", [2 x i8] c"\10\09", [2 x i8] c"\0F\08", [2 x i8] c"\1B\06", [2 x i8] c"\0C\05", [2 x i8] c"\17\03", [2 x i8] c"\01\04", [2 x i8] c"\0B\05", [2 x i8] c"\0D\06", [2 x i8] c"\07\07", [2 x i8] c"\0E\07", [2 x i8] c"\03\04", [2 x i8] c"\02\05", [2 x i8] c"\1A\05", [2 x i8] c"\1C\06", [2 x i8] c"\05\06", [2 x i8] c"\04\05", [2 x i8] c"\06\07", [2 x i8] c"\1F\07", [2 x i8] c"\1E\06", [2 x i8] c"\19\05"], [32 x [2 x i8]] [[2 x i8] c"\18\05", [2 x i8] c"\1C\06", [2 x i8] c"\15\06", [2 x i8] c"\17\04", [2 x i8] c"\07\04", [2 x i8] c"\0F\04", [2 x i8] c"\11\04", [2 x i8] c"\19\06", [2 x i8] c"\02\08", [2 x i8] c"\16\09", [2 x i8] c"\08\09", [2 x i8] c"\01\07", [2 x i8] c"\00\05", [2 x i8] c"\13\04", [2 x i8] c"\0B\04", [2 x i8] c"\0C\04", [2 x i8] c"\09\04", [2 x i8] c"\0A\04", [2 x i8] c"\12\04", [2 x i8] c"\0E\04", [2 x i8] c"\14\05", [2 x i8] c"\1A\07", [2 x i8] c"\1B\08", [2 x i8] c"\06\0C", [2 x i8] c"\05\0C", [2 x i8] c"\04\0B", [2 x i8] c"\1D\0A", [2 x i8] c"\03\09", [2 x i8] c"\1F\06", [2 x i8] c"\1E\05", [2 x i8] c"\10\05", [2 x i8] c"\0D\04"], [32 x [2 x i8]] [[2 x i8] c"\1E\04", [2 x i8] c"\01\06", [2 x i8] c"\1C\06", [2 x i8] c"\18\05", [2 x i8] c"\11\04", [2 x i8] c"\0F\04", [2 x i8] c"\12\04", [2 x i8] c"\17\04", [2 x i8] c"\1F\05", [2 x i8] c"\1B\07", [2 x i8] c"\03\08", [2 x i8] c"\15\08", [2 x i8] c"\19\06", [2 x i8] c"\07\04", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\0E\04", [2 x i8] c"\14\06", [2 x i8] c"\1A\07", [2 x i8] c"\02\08", [2 x i8] c"\06\0D", [2 x i8] c"\05\0D", [2 x i8] c"\16\0C", [2 x i8] c"\04\0B", [2 x i8] c"\1D\0A", [2 x i8] c"\08\09", [2 x i8] c"\10\05", [2 x i8] c"\09\04", [2 x i8] c"\0A\04", [2 x i8] c"\13\05", [2 x i8] c"\00\05", [2 x i8] c"\0D\04"], [32 x [2 x i8]] [[2 x i8] c"\0D\03", [2 x i8] c"\0F\04", [2 x i8] c"\00\04", [2 x i8] c"\1E\04", [2 x i8] c"\18\05", [2 x i8] c"\1F\05", [2 x i8] c"\17\04", [2 x i8] c"\07\04", [2 x i8] c"\14\07", [2 x i8] c"\08\08", [2 x i8] c"\04\0A", [2 x i8] c"\05\0C", [2 x i8] c"\16\0D", [2 x i8] c"\06\0D", [2 x i8] c"\15\0B", [2 x i8] c"\1D\09", [2 x i8] c"\1C\06", [2 x i8] c"\10\05", [2 x i8] c"\0E\04", [2 x i8] c"\03\08", [2 x i8] c"\02\08", [2 x i8] c"\1B\07", [2 x i8] c"\19\06", [2 x i8] c"\12\05", [2 x i8] c"\0B\04", [2 x i8] c"\0C\04", [2 x i8] c"\0A\04", [2 x i8] c"\09\04", [2 x i8] c"\11\05", [2 x i8] c"\13\06", [2 x i8] c"\1A\07", [2 x i8] c"\01\07"], [32 x [2 x i8]] [[2 x i8] c"\1E\04", [2 x i8] c"\12\05", [2 x i8] c"\10\05", [2 x i8] c"\09\03", [2 x i8] c"\0A\03", [2 x i8] c"\1F\05", [2 x i8] c"\1A\06", [2 x i8] c"\01\06", [2 x i8] c"\00\04", [2 x i8] c"\0E\04", [2 x i8] c"\11\05", [2 x i8] c"\18\05", [2 x i8] c"\17\04", [2 x i8] c"\0B\04", [2 x i8] c"\0C\04", [2 x i8] c"\0D\04", [2 x i8] c"\0F\05", [2 x i8] c"\05\0B", [2 x i8] c"\06\0C", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\04\0A", [2 x i8] c"\14\09", [2 x i8] c"\03\08", [2 x i8] c"\13\07", [2 x i8] c"\19\06", [2 x i8] c"\1C\06", [2 x i8] c"\1B\07", [2 x i8] c"\02\08", [2 x i8] c"\1D\09", [2 x i8] c"\08\09", [2 x i8] c"\07\05"], [32 x [2 x i8]] [[2 x i8] c"\1E\04", [2 x i8] c"\0E\04", [2 x i8] c"\09\03", [2 x i8] c"\0A\03", [2 x i8] c"\19\05", [2 x i8] c"\12\06", [2 x i8] c"\14\0A", [2 x i8] c"\05\0B", [2 x i8] c"\06\0C", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\04\09", [2 x i8] c"\1D\08", [2 x i8] c"\03\07", [2 x i8] c"\1F\05", [2 x i8] c"\0F\05", [2 x i8] c"\1B\06", [2 x i8] c"\02\07", [2 x i8] c"\08\08", [2 x i8] c"\13\08", [2 x i8] c"\1C\05", [2 x i8] c"\1A\06", [2 x i8] c"\10\06", [2 x i8] c"\18\05", [2 x i8] c"\0D\04", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\00\04", [2 x i8] c"\17\04", [2 x i8] c"\11\06", [2 x i8] c"\01\06", [2 x i8] c"\07\05"], [32 x [2 x i8]] [[2 x i8] c"\00\03", [2 x i8] c"\1E\04", [2 x i8] c"\1F\05", [2 x i8] c"\19\05", [2 x i8] c"\09\03", [2 x i8] c"\0A\03", [2 x i8] c"\0D\04", [2 x i8] c"\01\05", [2 x i8] c"\07\05", [2 x i8] c"\1B\06", [2 x i8] c"\1D\08", [2 x i8] c"\08\08", [2 x i8] c"\13\0A", [2 x i8] c"\14\0D", [2 x i8] c"\06\0D", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\05\0B", [2 x i8] c"\04\09", [2 x i8] c"\12\08", [2 x i8] c"\1A\06", [2 x i8] c"\0F\06", [2 x i8] c"\0B\04", [2 x i8] c"\0C\04", [2 x i8] c"\0E\05", [2 x i8] c"\1C\05", [2 x i8] c"\18\05", [2 x i8] c"\11\07", [2 x i8] c"\10\07", [2 x i8] c"\02\07", [2 x i8] c"\03\07", [2 x i8] c"\17\04"], [32 x [2 x i8]] [[2 x i8] c"\17\03", [2 x i8] c"\07\05", [2 x i8] c"\1F\05", [2 x i8] c"\0E\05", [2 x i8] c"\19\05", [2 x i8] c"\00\03", [2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\12\09", [2 x i8] c"\16\0C", [2 x i8] c"\15\0C", [2 x i8] c"\06\0C", [2 x i8] c"\14\0D", [2 x i8] c"\13\0D", [2 x i8] c"\05\0A", [2 x i8] c"\08\08", [2 x i8] c"\11\08", [2 x i8] c"\10\08", [2 x i8] c"\1B\06", [2 x i8] c"\1A\06", [2 x i8] c"\02\06", [2 x i8] c"\0B\04", [2 x i8] c"\0C\04", [2 x i8] c"\01\05", [2 x i8] c"\1E\05", [2 x i8] c"\1C\05", [2 x i8] c"\03\06", [2 x i8] c"\1D\08", [2 x i8] c"\04\08", [2 x i8] c"\0F\07", [2 x i8] c"\18\05", [2 x i8] c"\0D\05"], [32 x [2 x i8]] [[2 x i8] c"\17\03", [2 x i8] c"\01\04", [2 x i8] c"\0D\05", [2 x i8] c"\0F\08", [2 x i8] c"\08\09", [2 x i8] c"\12\0C", [2 x i8] c"\14\0D", [2 x i8] c"\13\0D", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\11\0C", [2 x i8] c"\10\0B", [2 x i8] c"\06\0B", [2 x i8] c"\07\07", [2 x i8] c"\1B\06", [2 x i8] c"\00\03", [2 x i8] c"\0B\04", [2 x i8] c"\0C\04", [2 x i8] c"\09\03", [2 x i8] c"\0A\03", [2 x i8] c"\02\05", [2 x i8] c"\1E\05", [2 x i8] c"\1A\06", [2 x i8] c"\04\06", [2 x i8] c"\19\05", [2 x i8] c"\1F\06", [2 x i8] c"\05\08", [2 x i8] c"\1D\08", [2 x i8] c"\0E\07", [2 x i8] c"\03\05", [2 x i8] c"\1C\05", [2 x i8] c"\18\05"], [32 x [2 x i8]] [[2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\1A\05", [2 x i8] c"\0F\05", [2 x i8] c"\18\04", [2 x i8] c"\07\04", [2 x i8] c"\10\06", [2 x i8] c"\11\06", [2 x i8] c"\19\05", [2 x i8] c"\1E\04", [2 x i8] c"\0D\04", [2 x i8] c"\01\07", [2 x i8] c"\08\07", [2 x i8] c"\1B\06", [2 x i8] c"\1F\05", [2 x i8] c"\00\05", [2 x i8] c"\13\08", [2 x i8] c"\02\09", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\04\0D", [2 x i8] c"\06\0E", [2 x i8] c"\05\0E", [2 x i8] c"\14\0B", [2 x i8] c"\03\0A", [2 x i8] c"\12\07", [2 x i8] c"\1D\06", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\0E\05", [2 x i8] c"\1C\05", [2 x i8] c"\17\04"], [32 x [2 x i8]] [[2 x i8] c"\09\03", [2 x i8] c"\17\03", [2 x i8] c"\1C\04", [2 x i8] c"\18\04", [2 x i8] c"\0D\04", [2 x i8] c"\1E\04", [2 x i8] c"\02\07", [2 x i8] c"\12\07", [2 x i8] c"\01\06", [2 x i8] c"\0E\05", [2 x i8] c"\00\04", [2 x i8] c"\19\05", [2 x i8] c"\0F\06", [2 x i8] c"\04\0A", [2 x i8] c"\06\0D", [2 x i8] c"\05\0D", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\14\0B", [2 x i8] c"\13\09", [2 x i8] c"\03\08", [2 x i8] c"\10\07", [2 x i8] c"\1F\05", [2 x i8] c"\1B\06", [2 x i8] c"\11\07", [2 x i8] c"\08\07", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\07\05", [2 x i8] c"\1D\06", [2 x i8] c"\1A\06", [2 x i8] c"\0A\04"], [32 x [2 x i8]] [[2 x i8] c"\09\03", [2 x i8] c"\1E\04", [2 x i8] c"\11\07", [2 x i8] c"\04\09", [2 x i8] c"\16\0C", [2 x i8] c"\15\0C", [2 x i8] c"\05\0C", [2 x i8] c"\14\0D", [2 x i8] c"\06\0D", [2 x i8] c"\13\0A", [2 x i8] c"\12\08", [2 x i8] c"\08\06", [2 x i8] c"\01\05", [2 x i8] c"\17\03", [2 x i8] c"\18\04", [2 x i8] c"\1A\05", [2 x i8] c"\1D\05", [2 x i8] c"\1F\05", [2 x i8] c"\10\07", [2 x i8] c"\03\07", [2 x i8] c"\02\07", [2 x i8] c"\0F\07", [2 x i8] c"\1C\04", [2 x i8] c"\0B\04", [2 x i8] c"\0C\04", [2 x i8] c"\07\05", [2 x i8] c"\19\05", [2 x i8] c"\0D\05", [2 x i8] c"\0E\06", [2 x i8] c"\1B\06", [2 x i8] c"\00\04", [2 x i8] c"\0A\04"], [32 x [2 x i8]] [[2 x i8] c"\17\03", [2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\00\03", [2 x i8] c"\1B\05", [2 x i8] c"\0E\06", [2 x i8] c"\02\06", [2 x i8] c"\18\04", [2 x i8] c"\0D\05", [2 x i8] c"\1A\05", [2 x i8] c"\1E\05", [2 x i8] c"\1D\05", [2 x i8] c"\01\05", [2 x i8] c"\0F\07", [2 x i8] c"\04\09", [2 x i8] c"\13\0B", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\05\0D", [2 x i8] c"\14\0E", [2 x i8] c"\06\0E", [2 x i8] c"\12\0A", [2 x i8] c"\11\09", [2 x i8] c"\10\09", [2 x i8] c"\1F\06", [2 x i8] c"\1C\04", [2 x i8] c"\19\05", [2 x i8] c"\07\06", [2 x i8] c"\08\07", [2 x i8] c"\03\07", [2 x i8] c"\0C\05", [2 x i8] c"\0B\05"], [32 x [2 x i8]] [[2 x i8] c"\17\03", [2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\01\04", [2 x i8] c"\18\04", [2 x i8] c"\03\05", [2 x i8] c"\1A\05", [2 x i8] c"\04\07", [2 x i8] c"\0F\08", [2 x i8] c"\10\09", [2 x i8] c"\11\0A", [2 x i8] c"\12\0B", [2 x i8] c"\16\0E", [2 x i8] c"\15\0E", [2 x i8] c"\06\0E", [2 x i8] c"\14\0F", [2 x i8] c"\13\0F", [2 x i8] c"\05\0C", [2 x i8] c"\1F\06", [2 x i8] c"\1D\05", [2 x i8] c"\00\03", [2 x i8] c"\19\05", [2 x i8] c"\07\06", [2 x i8] c"\0E\07", [2 x i8] c"\08\07", [2 x i8] c"\0D\06", [2 x i8] c"\1E\06", [2 x i8] c"\0B\05", [2 x i8] c"\1C\04", [2 x i8] c"\0C\05", [2 x i8] c"\02\06", [2 x i8] c"\1B\06"], [32 x [2 x i8]] [[2 x i8] c"\1C\03", [2 x i8] c"\09\03", [2 x i8] c"\0A\03", [2 x i8] c"\18\04", [2 x i8] c"\04\06", [2 x i8] c"\0F\08", [2 x i8] c"\05\09", [2 x i8] c"\10\0A", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\12\0E", [2 x i8] c"\06\0E", [2 x i8] c"\14\0E", [2 x i8] c"\13\0E", [2 x i8] c"\11\0B", [2 x i8] c"\0E\07", [2 x i8] c"\07\06", [2 x i8] c"\0D\06", [2 x i8] c"\01\04", [2 x i8] c"\02\05", [2 x i8] c"\19\05", [2 x i8] c"\00\03", [2 x i8] c"\1D\05", [2 x i8] c"\1E\06", [2 x i8] c"\08\07", [2 x i8] c"\1F\07", [2 x i8] c"\0C\05", [2 x i8] c"\0B\05", [2 x i8] c"\03\05", [2 x i8] c"\1B\06", [2 x i8] c"\1A\06", [2 x i8] c"\17\04"], [32 x [2 x i8]] [[2 x i8] c"\1C\03", [2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\0D\06", [2 x i8] c"\1E\06", [2 x i8] c"\04\05", [2 x i8] c"\19\05", [2 x i8] c"\1D\05", [2 x i8] c"\00\03", [2 x i8] c"\01\04", [2 x i8] c"\0C\05", [2 x i8] c"\0B\05", [2 x i8] c"\03\04", [2 x i8] c"\0F\09", [2 x i8] c"\06\0B", [2 x i8] c"\12\0C", [2 x i8] c"\14\0D", [2 x i8] c"\13\0D", [2 x i8] c"\10\0B", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\11\0C", [2 x i8] c"\0E\08", [2 x i8] c"\1F\07", [2 x i8] c"\1A\06", [2 x i8] c"\02\05", [2 x i8] c"\1B\06", [2 x i8] c"\07\07", [2 x i8] c"\05\08", [2 x i8] c"\08\08", [2 x i8] c"\18\05", [2 x i8] c"\17\04"], [32 x [2 x i8]] [[2 x i8] c"\03\03", [2 x i8] c"\19\05", [2 x i8] c"\0E\09", [2 x i8] c"\06\09", [2 x i8] c"\0F\0A", [2 x i8] c"\10\0C", [2 x i8] c"\12\0D", [2 x i8] c"\11\0D", [2 x i8] c"\14\0D", [2 x i8] c"\13\0D", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\08\09", [2 x i8] c"\0D\07", [2 x i8] c"\1D\06", [2 x i8] c"\04\04", [2 x i8] c"\0A\03", [2 x i8] c"\00\03", [2 x i8] c"\09\03", [2 x i8] c"\1A\06", [2 x i8] c"\1B\06", [2 x i8] c"\0C\05", [2 x i8] c"\0B\05", [2 x i8] c"\05\06", [2 x i8] c"\07\08", [2 x i8] c"\1F\08", [2 x i8] c"\1E\07", [2 x i8] c"\01\04", [2 x i8] c"\18\05", [2 x i8] c"\02\05", [2 x i8] c"\17\04", [2 x i8] c"\1C\04"], [32 x [2 x i8]] [[2 x i8] c"\09\03", [2 x i8] c"\1D\06", [2 x i8] c"\01\06", [2 x i8] c"\14\07", [2 x i8] c"\08\07", [2 x i8] c"\1A\06", [2 x i8] c"\00\04", [2 x i8] c"\07\04", [2 x i8] c"\10\05", [2 x i8] c"\18\05", [2 x i8] c"\1F\05", [2 x i8] c"\12\05", [2 x i8] c"\1E\04", [2 x i8] c"\17\04", [2 x i8] c"\0E\04", [2 x i8] c"\11\05", [2 x i8] c"\13\06", [2 x i8] c"\19\06", [2 x i8] c"\0B\04", [2 x i8] c"\0C\04", [2 x i8] c"\02\08", [2 x i8] c"\04\0A", [2 x i8] c"\05\0C", [2 x i8] c"\16\0D", [2 x i8] c"\06\0D", [2 x i8] c"\15\0B", [2 x i8] c"\03\09", [2 x i8] c"\1B\07", [2 x i8] c"\1C\06", [2 x i8] c"\0F\05", [2 x i8] c"\0D\04", [2 x i8] c"\0A\04"], [32 x [2 x i8]] [[2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\0E\04", [2 x i8] c"\12\06", [2 x i8] c"\1B\06", [2 x i8] c"\1C\05", [2 x i8] c"\03\07", [2 x i8] c"\06\0C", [2 x i8] c"\05\0C", [2 x i8] c"\16\0C", [2 x i8] c"\15\0C", [2 x i8] c"\14\0A", [2 x i8] c"\04\09", [2 x i8] c"\13\08", [2 x i8] c"\02\07", [2 x i8] c"\08\07", [2 x i8] c"\0F\05", [2 x i8] c"\1E\04", [2 x i8] c"\1F\05", [2 x i8] c"\1A\06", [2 x i8] c"\1D\06", [2 x i8] c"\18\05", [2 x i8] c"\10\06", [2 x i8] c"\11\06", [2 x i8] c"\00\04", [2 x i8] c"\17\04", [2 x i8] c"\0D\04", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\01\06", [2 x i8] c"\19\06", [2 x i8] c"\07\05"], [32 x [2 x i8]] [[2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\03\06", [2 x i8] c"\04\08", [2 x i8] c"\05\0A", [2 x i8] c"\14\0C", [2 x i8] c"\06\0C", [2 x i8] c"\16\0C", [2 x i8] c"\15\0C", [2 x i8] c"\13\09", [2 x i8] c"\08\07", [2 x i8] c"\0F\05", [2 x i8] c"\19\05", [2 x i8] c"\11\06", [2 x i8] c"\10\06", [2 x i8] c"\01\05", [2 x i8] c"\1C\05", [2 x i8] c"\1E\04", [2 x i8] c"\1B\06", [2 x i8] c"\12\07", [2 x i8] c"\02\07", [2 x i8] c"\1F\05", [2 x i8] c"\0D\04", [2 x i8] c"\1D\06", [2 x i8] c"\1A\06", [2 x i8] c"\18\05", [2 x i8] c"\17\04", [2 x i8] c"\07\05", [2 x i8] c"\0E\05", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\00\04"], [32 x [2 x i8]] [[2 x i8] c"\08\07", [2 x i8] c"\11\07", [2 x i8] c"\0F\06", [2 x i8] c"\1F\05", [2 x i8] c"\07\05", [2 x i8] c"\19\05", [2 x i8] c"\00\03", [2 x i8] c"\09\03", [2 x i8] c"\0A\03", [2 x i8] c"\0D\04", [2 x i8] c"\0E\05", [2 x i8] c"\1C\05", [2 x i8] c"\04\08", [2 x i8] c"\13\0B", [2 x i8] c"\14\0D", [2 x i8] c"\06\0D", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\05\0A", [2 x i8] c"\12\09", [2 x i8] c"\10\07", [2 x i8] c"\02\06", [2 x i8] c"\03\06", [2 x i8] c"\1B\06", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\01\05", [2 x i8] c"\1D\06", [2 x i8] c"\1A\06", [2 x i8] c"\18\05", [2 x i8] c"\1E\05", [2 x i8] c"\17\04"], [32 x [2 x i8]] [[2 x i8] c"\17\03", [2 x i8] c"\1A\05", [2 x i8] c"\11\08", [2 x i8] c"\12\0A", [2 x i8] c"\06\0B", [2 x i8] c"\14\0D", [2 x i8] c"\13\0D", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\05\09", [2 x i8] c"\08\08", [2 x i8] c"\10\08", [2 x i8] c"\04\07", [2 x i8] c"\0F\07", [2 x i8] c"\03\05", [2 x i8] c"\19\05", [2 x i8] c"\09\03", [2 x i8] c"\0A\03", [2 x i8] c"\00\03", [2 x i8] c"\1C\05", [2 x i8] c"\1E\05", [2 x i8] c"\0B\04", [2 x i8] c"\0C\04", [2 x i8] c"\07\06", [2 x i8] c"\1B\06", [2 x i8] c"\1D\06", [2 x i8] c"\0E\06", [2 x i8] c"\0D\05", [2 x i8] c"\18\05", [2 x i8] c"\1F\06", [2 x i8] c"\02\06", [2 x i8] c"\01\05"], [32 x [2 x i8]] [[2 x i8] c"\17\03", [2 x i8] c"\07\06", [2 x i8] c"\04\06", [2 x i8] c"\1E\05", [2 x i8] c"\19\05", [2 x i8] c"\02\05", [2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\00\03", [2 x i8] c"\01\04", [2 x i8] c"\1D\06", [2 x i8] c"\1F\06", [2 x i8] c"\0D\05", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\1B\06", [2 x i8] c"\1A\06", [2 x i8] c"\03\05", [2 x i8] c"\18\05", [2 x i8] c"\08\09", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\12\0D", [2 x i8] c"\14\0E", [2 x i8] c"\13\0E", [2 x i8] c"\11\0B", [2 x i8] c"\10\0B", [2 x i8] c"\06\0B", [2 x i8] c"\0F\09", [2 x i8] c"\05\09", [2 x i8] c"\0E\07", [2 x i8] c"\1C\06"], [32 x [2 x i8]] [[2 x i8] c"\17\03", [2 x i8] c"\1F\06", [2 x i8] c"\07\07", [2 x i8] c"\0E\08", [2 x i8] c"\14\0D", [2 x i8] c"\13\0D", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\10\0D", [2 x i8] c"\08\0D", [2 x i8] c"\12\0D", [2 x i8] c"\11\0D", [2 x i8] c"\0F\0A", [2 x i8] c"\06\09", [2 x i8] c"\04\05", [2 x i8] c"\03\04", [2 x i8] c"\00\03", [2 x i8] c"\19\05", [2 x i8] c"\1D\07", [2 x i8] c"\05\07", [2 x i8] c"\1E\06", [2 x i8] c"\01\04", [2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\02\05", [2 x i8] c"\1C\06", [2 x i8] c"\0D\06", [2 x i8] c"\0B\04", [2 x i8] c"\0C\04", [2 x i8] c"\1B\06", [2 x i8] c"\1A\06", [2 x i8] c"\18\05"], [32 x [2 x i8]] [[2 x i8] c"\00\03", [2 x i8] c"\04\04", [2 x i8] c"\18\05", [2 x i8] c"\05\05", [2 x i8] c"\01\04", [2 x i8] c"\19\05", [2 x i8] c"\1A\07", [2 x i8] c"\1F\07", [2 x i8] c"\1B\06", [2 x i8] c"\17\03", [2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\02\05", [2 x i8] c"\07\08", [2 x i8] c"\1E\0A", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\08\0D", [2 x i8] c"\10\0E", [2 x i8] c"\0F\0E", [2 x i8] c"\0E\0C", [2 x i8] c"\12\0E", [2 x i8] c"\11\0E", [2 x i8] c"\14\0E", [2 x i8] c"\13\0E", [2 x i8] c"\1D\09", [2 x i8] c"\06\07", [2 x i8] c"\1C\07", [2 x i8] c"\0D\07", [2 x i8] c"\03\04"], [32 x [2 x i8]] [[2 x i8] c"\1A\05", [2 x i8] c"\1D\05", [2 x i8] c"\18\04", [2 x i8] c"\09\03", [2 x i8] c"\0A\03", [2 x i8] c"\1E\04", [2 x i8] c"\0D\04", [2 x i8] c"\08\06", [2 x i8] c"\16\0C", [2 x i8] c"\15\0C", [2 x i8] c"\05\0C", [2 x i8] c"\14\0D", [2 x i8] c"\06\0D", [2 x i8] c"\04\0A", [2 x i8] c"\13\09", [2 x i8] c"\03\08", [2 x i8] c"\11\07", [2 x i8] c"\19\05", [2 x i8] c"\01\06", [2 x i8] c"\0F\06", [2 x i8] c"\0E\05", [2 x i8] c"\00\04", [2 x i8] c"\1F\05", [2 x i8] c"\1B\06", [2 x i8] c"\10\07", [2 x i8] c"\12\08", [2 x i8] c"\02\08", [2 x i8] c"\07\05", [2 x i8] c"\1C\05", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\17\04"], [32 x [2 x i8]] [[2 x i8] c"\09\03", [2 x i8] c"\0A\03", [2 x i8] c"\00\03", [2 x i8] c"\18\04", [2 x i8] c"\1A\05", [2 x i8] c"\01\05", [2 x i8] c"\1C\04", [2 x i8] c"\07\05", [2 x i8] c"\19\05", [2 x i8] c"\0B\04", [2 x i8] c"\0C\04", [2 x i8] c"\0F\07", [2 x i8] c"\03\07", [2 x i8] c"\0E\06", [2 x i8] c"\1E\05", [2 x i8] c"\0D\05", [2 x i8] c"\08\06", [2 x i8] c"\10\08", [2 x i8] c"\04\0A", [2 x i8] c"\05\0D", [2 x i8] c"\14\0E", [2 x i8] c"\06\0E", [2 x i8] c"\16\0E", [2 x i8] c"\15\0E", [2 x i8] c"\13\0D", [2 x i8] c"\12\0B", [2 x i8] c"\11\09", [2 x i8] c"\02\07", [2 x i8] c"\17\04", [2 x i8] c"\1D\05", [2 x i8] c"\1B\06", [2 x i8] c"\1F\06"], [32 x [2 x i8]] [[2 x i8] c"\09\03", [2 x i8] c"\0A\03", [2 x i8] c"\1B\05", [2 x i8] c"\1E\05", [2 x i8] c"\1A\05", [2 x i8] c"\0D\05", [2 x i8] c"\00\03", [2 x i8] c"\1D\04", [2 x i8] c"\03\06", [2 x i8] c"\02\06", [2 x i8] c"\19\05", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\1C\04", [2 x i8] c"\17\04", [2 x i8] c"\01\05", [2 x i8] c"\1F\06", [2 x i8] c"\0F\08", [2 x i8] c"\04\09", [2 x i8] c"\10\0A", [2 x i8] c"\11\0B", [2 x i8] c"\16\0E", [2 x i8] c"\15\0E", [2 x i8] c"\05\0D", [2 x i8] c"\06\0E", [2 x i8] c"\14\0F", [2 x i8] c"\13\0F", [2 x i8] c"\12\0D", [2 x i8] c"\0E\07", [2 x i8] c"\07\06", [2 x i8] c"\08\06", [2 x i8] c"\18\05"], [32 x [2 x i8]] [[2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\02\05", [2 x i8] c"\1A\05", [2 x i8] c"\01\04", [2 x i8] c"\09\03", [2 x i8] c"\0A\03", [2 x i8] c"\03\05", [2 x i8] c"\1E\06", [2 x i8] c"\0E\07", [2 x i8] c"\0F\09", [2 x i8] c"\12\0D", [2 x i8] c"\06\0D", [2 x i8] c"\14\0D", [2 x i8] c"\13\0D", [2 x i8] c"\05\0B", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\11\0C", [2 x i8] c"\10\0B", [2 x i8] c"\04\08", [2 x i8] c"\19\05", [2 x i8] c"\0D\06", [2 x i8] c"\08\06", [2 x i8] c"\00\03", [2 x i8] c"\1C\04", [2 x i8] c"\17\04", [2 x i8] c"\1D\04", [2 x i8] c"\1F\07", [2 x i8] c"\07\07", [2 x i8] c"\1B\06", [2 x i8] c"\18\05"], [32 x [2 x i8]] [[2 x i8] c"\03\04", [2 x i8] c"\19\05", [2 x i8] c"\04\06", [2 x i8] c"\1E\07", [2 x i8] c"\07\07", [2 x i8] c"\1D\03", [2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\17\04", [2 x i8] c"\1C\04", [2 x i8] c"\00\03", [2 x i8] c"\01\04", [2 x i8] c"\08\06", [2 x i8] c"\1B\06", [2 x i8] c"\02\05", [2 x i8] c"\18\05", [2 x i8] c"\0C\05", [2 x i8] c"\0B\05", [2 x i8] c"\0E\09", [2 x i8] c"\05\0A", [2 x i8] c"\0F\0B", [2 x i8] c"\14\0E", [2 x i8] c"\13\0E", [2 x i8] c"\16\0E", [2 x i8] c"\15\0E", [2 x i8] c"\10\0E", [2 x i8] c"\06\0E", [2 x i8] c"\12\0E", [2 x i8] c"\11\0E", [2 x i8] c"\1F\08", [2 x i8] c"\0D\07", [2 x i8] c"\1A\06"], [32 x [2 x i8]] [[2 x i8] c"\17\04", [2 x i8] c"\02\04", [2 x i8] c"\1D\03", [2 x i8] c"\0D\07", [2 x i8] c"\1F\08", [2 x i8] c"\1E\08", [2 x i8] c"\1B\06", [2 x i8] c"\18\05", [2 x i8] c"\1C\04", [2 x i8] c"\0C\05", [2 x i8] c"\0B\05", [2 x i8] c"\05\09", [2 x i8] c"\0E\0A", [2 x i8] c"\12\0D", [2 x i8] c"\11\0D", [2 x i8] c"\14\0D", [2 x i8] c"\13\0D", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\06\0D", [2 x i8] c"\10\0E", [2 x i8] c"\0F\0E", [2 x i8] c"\07\08", [2 x i8] c"\08\07", [2 x i8] c"\19\06", [2 x i8] c"\04\06", [2 x i8] c"\1A\06", [2 x i8] c"\00\03", [2 x i8] c"\03\04", [2 x i8] c"\01\04", [2 x i8] c"\0A\03", [2 x i8] c"\09\03"], [32 x [2 x i8]] [[2 x i8] c"\09\02", [2 x i8] c"\03\03", [2 x i8] c"\17\05", [2 x i8] c"\1B\06", [2 x i8] c"\1A\06", [2 x i8] c"\02\04", [2 x i8] c"\00\03", [2 x i8] c"\04\05", [2 x i8] c"\18\06", [2 x i8] c"\0C\06", [2 x i8] c"\0B\06", [2 x i8] c"\19\07", [2 x i8] c"\05\09", [2 x i8] c"\0E\0D", [2 x i8] c"\06\0D", [2 x i8] c"\10\0D", [2 x i8] c"\0F\0D", [2 x i8] c"\1F\0B", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\12\0E", [2 x i8] c"\11\0E", [2 x i8] c"\14\0E", [2 x i8] c"\13\0E", [2 x i8] c"\1E\0B", [2 x i8] c"\08\09", [2 x i8] c"\0D\0A", [2 x i8] c"\07\0A", [2 x i8] c"\1C\05", [2 x i8] c"\1D\04", [2 x i8] c"\01\04", [2 x i8] c"\0A\03"], [32 x [2 x i8]] [[2 x i8] c"\0A\02", [2 x i8] c"\09\02", [2 x i8] c"\00\02", [2 x i8] c"\03\04", [2 x i8] c"\0C\07", [2 x i8] c"\0B\07", [2 x i8] c"\18\09", [2 x i8] c"\17\09", [2 x i8] c"\1B\08", [2 x i8] c"\05\09", [2 x i8] c"\19\0A", [2 x i8] c"\06\0D", [2 x i8] c"\08\0E", [2 x i8] c"\07\0E", [2 x i8] c"\16\0E", [2 x i8] c"\15\0E", [2 x i8] c"\1F\0E", [2 x i8] c"\1E\0E", [2 x i8] c"\12\0E", [2 x i8] c"\11\0E", [2 x i8] c"\14\0E", [2 x i8] c"\13\0E", [2 x i8] c"\0E\0E", [2 x i8] c"\0D\0E", [2 x i8] c"\10\0E", [2 x i8] c"\0F\0E", [2 x i8] c"\1A\08", [2 x i8] c"\1D\05", [2 x i8] c"\02\05", [2 x i8] c"\1C\06", [2 x i8] c"\04\06", [2 x i8] c"\01\04"], [32 x [2 x i8]] [[2 x i8] c"\00\03", [2 x i8] c"\1C\04", [2 x i8] c"\0D\04", [2 x i8] c"\09\03", [2 x i8] c"\0A\03", [2 x i8] c"\01\05", [2 x i8] c"\0E\05", [2 x i8] c"\19\05", [2 x i8] c"\1F\05", [2 x i8] c"\07\05", [2 x i8] c"\10\07", [2 x i8] c"\04\09", [2 x i8] c"\06\0C", [2 x i8] c"\14\0D", [2 x i8] c"\13\0D", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\05\0C", [2 x i8] c"\12\0A", [2 x i8] c"\11\08", [2 x i8] c"\1B\06", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\17\04", [2 x i8] c"\08\07", [2 x i8] c"\03\07", [2 x i8] c"\02\07", [2 x i8] c"\0F\07", [2 x i8] c"\1E\05", [2 x i8] c"\18\05", [2 x i8] c"\1A\06", [2 x i8] c"\1D\06"], [32 x [2 x i8]] [[2 x i8] c"\1A\05", [2 x i8] c"\1F\05", [2 x i8] c"\07\05", [2 x i8] c"\04\07", [2 x i8] c"\16\0C", [2 x i8] c"\15\0C", [2 x i8] c"\12\0D", [2 x i8] c"\06\0D", [2 x i8] c"\14\0D", [2 x i8] c"\13\0D", [2 x i8] c"\05\0A", [2 x i8] c"\11\0A", [2 x i8] c"\10\0A", [2 x i8] c"\0F\08", [2 x i8] c"\0E\06", [2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\00\03", [2 x i8] c"\1C\04", [2 x i8] c"\19\05", [2 x i8] c"\1E\05", [2 x i8] c"\08\06", [2 x i8] c"\02\06", [2 x i8] c"\0D\05", [2 x i8] c"\17\04", [2 x i8] c"\0C\04", [2 x i8] c"\18\05", [2 x i8] c"\1D\05", [2 x i8] c"\0B\04", [2 x i8] c"\1B\06", [2 x i8] c"\03\06", [2 x i8] c"\01\05"], [32 x [2 x i8]] [[2 x i8] c"\09\03", [2 x i8] c"\0A\03", [2 x i8] c"\01\04", [2 x i8] c"\1D\04", [2 x i8] c"\0D\05", [2 x i8] c"\19\05", [2 x i8] c"\1C\04", [2 x i8] c"\00\03", [2 x i8] c"\03\05", [2 x i8] c"\08\06", [2 x i8] c"\04\07", [2 x i8] c"\05\09", [2 x i8] c"\14\0D", [2 x i8] c"\13\0D", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\10\0D", [2 x i8] c"\06\0D", [2 x i8] c"\12\0D", [2 x i8] c"\11\0D", [2 x i8] c"\0F\0A", [2 x i8] c"\0E\08", [2 x i8] c"\17\04", [2 x i8] c"\1F\06", [2 x i8] c"\1B\06", [2 x i8] c"\18\05", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\07\06", [2 x i8] c"\1E\06", [2 x i8] c"\1A\06", [2 x i8] c"\02\06"], [32 x [2 x i8]] [[2 x i8] c"\03\04", [2 x i8] c"\12\0C", [2 x i8] c"\11\0C", [2 x i8] c"\14\0C", [2 x i8] c"\13\0C", [2 x i8] c"\16\0C", [2 x i8] c"\15\0C", [2 x i8] c"\06\0C", [2 x i8] c"\10\0D", [2 x i8] c"\0F\0D", [2 x i8] c"\0E\09", [2 x i8] c"\05\08", [2 x i8] c"\1F\07", [2 x i8] c"\07\07", [2 x i8] c"\1E\07", [2 x i8] c"\19\05", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\09\03", [2 x i8] c"\0A\03", [2 x i8] c"\01\04", [2 x i8] c"\1C\04", [2 x i8] c"\00\03", [2 x i8] c"\17\04", [2 x i8] c"\02\05", [2 x i8] c"\04\06", [2 x i8] c"\08\07", [2 x i8] c"\0D\07", [2 x i8] c"\1D\04", [2 x i8] c"\18\05", [2 x i8] c"\1A\06", [2 x i8] c"\1B\06"], [32 x [2 x i8]] [[2 x i8] c"\1D\03", [2 x i8] c"\19\05", [2 x i8] c"\08\07", [2 x i8] c"\0D\08", [2 x i8] c"\1F\0A", [2 x i8] c"\06\0A", [2 x i8] c"\12\0D", [2 x i8] c"\11\0D", [2 x i8] c"\14\0D", [2 x i8] c"\13\0D", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\0E\0D", [2 x i8] c"\10\0E", [2 x i8] c"\0F\0E", [2 x i8] c"\07\0A", [2 x i8] c"\1B\06", [2 x i8] c"\17\04", [2 x i8] c"\00\03", [2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\1C\04", [2 x i8] c"\18\05", [2 x i8] c"\0C\05", [2 x i8] c"\03\04", [2 x i8] c"\0B\05", [2 x i8] c"\1A\06", [2 x i8] c"\05\07", [2 x i8] c"\1E\07", [2 x i8] c"\01\04", [2 x i8] c"\02\05", [2 x i8] c"\04\05"], [32 x [2 x i8]] [[2 x i8] c"\17\03", [2 x i8] c"\03\03", [2 x i8] c"\04\04", [2 x i8] c"\01\04", [2 x i8] c"\02\03", [2 x i8] c"\00\03", [2 x i8] c"\18\06", [2 x i8] c"\1A\09", [2 x i8] c"\11\0D", [2 x i8] c"\10\0D", [2 x i8] c"\13\0D", [2 x i8] c"\12\0D", [2 x i8] c"\0D\0D", [2 x i8] c"\07\0D", [2 x i8] c"\0F\0D", [2 x i8] c"\0E\0D", [2 x i8] c"\06\0B", [2 x i8] c"\1E\0C", [2 x i8] c"\15\0E", [2 x i8] c"\14\0E", [2 x i8] c"\1F\0E", [2 x i8] c"\16\0E", [2 x i8] c"\19\08", [2 x i8] c"\08\08", [2 x i8] c"\1B\08", [2 x i8] c"\1D\05", [2 x i8] c"\0C\06", [2 x i8] c"\0B\06", [2 x i8] c"\1C\06", [2 x i8] c"\05\06", [2 x i8] c"\0A\03", [2 x i8] c"\09\03"], [32 x [2 x i8]] [[2 x i8] c"\17\03", [2 x i8] c"\03\03", [2 x i8] c"\04\04", [2 x i8] c"\01\04", [2 x i8] c"\02\03", [2 x i8] c"\00\03", [2 x i8] c"\18\06", [2 x i8] c"\1A\09", [2 x i8] c"\11\0D", [2 x i8] c"\10\0D", [2 x i8] c"\13\0D", [2 x i8] c"\12\0D", [2 x i8] c"\0D\0D", [2 x i8] c"\07\0D", [2 x i8] c"\0F\0D", [2 x i8] c"\0E\0D", [2 x i8] c"\06\0B", [2 x i8] c"\1E\0C", [2 x i8] c"\15\0E", [2 x i8] c"\14\0E", [2 x i8] c"\1F\0E", [2 x i8] c"\16\0E", [2 x i8] c"\19\08", [2 x i8] c"\08\08", [2 x i8] c"\1B\08", [2 x i8] c"\1D\05", [2 x i8] c"\0C\06", [2 x i8] c"\0B\06", [2 x i8] c"\1C\06", [2 x i8] c"\05\06", [2 x i8] c"\0A\03", [2 x i8] c"\09\03"], [32 x [2 x i8]] [[2 x i8] c"\17\03", [2 x i8] c"\03\03", [2 x i8] c"\04\04", [2 x i8] c"\01\04", [2 x i8] c"\02\03", [2 x i8] c"\00\03", [2 x i8] c"\18\06", [2 x i8] c"\1A\09", [2 x i8] c"\11\0D", [2 x i8] c"\10\0D", [2 x i8] c"\13\0D", [2 x i8] c"\12\0D", [2 x i8] c"\0D\0D", [2 x i8] c"\07\0D", [2 x i8] c"\0F\0D", [2 x i8] c"\0E\0D", [2 x i8] c"\06\0B", [2 x i8] c"\1E\0C", [2 x i8] c"\15\0E", [2 x i8] c"\14\0E", [2 x i8] c"\1F\0E", [2 x i8] c"\16\0E", [2 x i8] c"\19\08", [2 x i8] c"\08\08", [2 x i8] c"\1B\08", [2 x i8] c"\1D\05", [2 x i8] c"\0C\06", [2 x i8] c"\0B\06", [2 x i8] c"\1C\06", [2 x i8] c"\05\06", [2 x i8] c"\0A\03", [2 x i8] c"\09\03"], [32 x [2 x i8]] [[2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\18\04", [2 x i8] c"\07\05", [2 x i8] c"\1A\05", [2 x i8] c"\00\03", [2 x i8] c"\02\06", [2 x i8] c"\0F\07", [2 x i8] c"\06\0C", [2 x i8] c"\14\0D", [2 x i8] c"\13\0D", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\05\0C", [2 x i8] c"\12\0A", [2 x i8] c"\04\09", [2 x i8] c"\11\09", [2 x i8] c"\10\09", [2 x i8] c"\01\05", [2 x i8] c"\1C\04", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\0D\05", [2 x i8] c"\19\05", [2 x i8] c"\1E\05", [2 x i8] c"\1D\05", [2 x i8] c"\0E\06", [2 x i8] c"\1B\06", [2 x i8] c"\03\07", [2 x i8] c"\08\07", [2 x i8] c"\1F\06", [2 x i8] c"\17\04"], [32 x [2 x i8]] [[2 x i8] c"\0D\05", [2 x i8] c"\03\05", [2 x i8] c"\01\04", [2 x i8] c"\0A\03", [2 x i8] c"\09\03", [2 x i8] c"\1D\04", [2 x i8] c"\19\05", [2 x i8] c"\1F\06", [2 x i8] c"\08\06", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\00\03", [2 x i8] c"\1C\04", [2 x i8] c"\17\04", [2 x i8] c"\0E\07", [2 x i8] c"\04\08", [2 x i8] c"\10\0A", [2 x i8] c"\11\0B", [2 x i8] c"\12\0E", [2 x i8] c"\06\0E", [2 x i8] c"\14\0E", [2 x i8] c"\13\0E", [2 x i8] c"\16\0E", [2 x i8] c"\15\0E", [2 x i8] c"\05\0D", [2 x i8] c"\0F\09", [2 x i8] c"\07\06", [2 x i8] c"\18\05", [2 x i8] c"\1B\06", [2 x i8] c"\1E\06", [2 x i8] c"\02\06", [2 x i8] c"\1A\06"], [32 x [2 x i8]] [[2 x i8] c"\1F\06", [2 x i8] c"\07\06", [2 x i8] c"\19\05", [2 x i8] c"\1C\04", [2 x i8] c"\09\03", [2 x i8] c"\0A\03", [2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\1E\06", [2 x i8] c"\08\06", [2 x i8] c"\02\05", [2 x i8] c"\1D\04", [2 x i8] c"\17\04", [2 x i8] c"\01\04", [2 x i8] c"\00\03", [2 x i8] c"\18\05", [2 x i8] c"\04\07", [2 x i8] c"\0F\09", [2 x i8] c"\05\0A", [2 x i8] c"\14\0D", [2 x i8] c"\13\0D", [2 x i8] c"\16\0D", [2 x i8] c"\15\0D", [2 x i8] c"\06\0D", [2 x i8] c"\12\0E", [2 x i8] c"\11\0E", [2 x i8] c"\10\0C", [2 x i8] c"\0E\08", [2 x i8] c"\1B\06", [2 x i8] c"\03\05", [2 x i8] c"\0D\06", [2 x i8] c"\1A\06"], [32 x [2 x i8]] [[2 x i8] c"\0C\04", [2 x i8] c"\0B\04", [2 x i8] c"\19\05", [2 x i8] c"\0D\06", [2 x i8] c"\1E\07", [2 x i8] c"\07\07", [2 x i8] c"\1C\04", [2 x i8] c"\03\04", [2 x i8] c"\18\05", [2 x i8] c"\04\06", [2 x i8] c"\1B\06", [2 x i8] c"\17\04", [2 x i8] c"\1D\04", [2 x i8] c"\00\03", [2 x i8] c"\01\04", [2 x i8] c"\1A\06", [2 x i8] c"\1F\08", [2 x i8] c"\05\09", [2 x i8] c"\10\0D", [2 x i8] c"\06\0D", [2 x i8] c"\12\0D", [2 x i8] c"\11\0D", [2 x i8] c"\0F\0C", [2 x i8] c"\14\0E", [2 x i8] c"\13\0E", [2 x i8] c"\16\0E", [2 x i8] c"\15\0E", [2 x i8] c"\0E\0A", [2 x i8] c"\08\07", [2 x i8] c"\02\05", [2 x i8] c"\09\03", [2 x i8] c"\0A\03"], [32 x [2 x i8]] [[2 x i8] c"\09\02", [2 x i8] c"\1C\04", [2 x i8] c"\02\04", [2 x i8] c"\1E\08", [2 x i8] c"\07\08", [2 x i8] c"\08\07", [2 x i8] c"\1B\06", [2 x i8] c"\18\06", [2 x i8] c"\19\06", [2 x i8] c"\1D\04", [2 x i8] c"\0B\05", [2 x i8] c"\0C\05", [2 x i8] c"\03\04", [2 x i8] c"\00\03", [2 x i8] c"\17\05", [2 x i8] c"\0D\08", [2 x i8] c"\1F\0A", [2 x i8] c"\12\0D", [2 x i8] c"\11\0D", [2 x i8] c"\14\0D", [2 x i8] c"\13\0D", [2 x i8] c"\06\0D", [2 x i8] c"\10\0E", [2 x i8] c"\0F\0E", [2 x i8] c"\16\0E", [2 x i8] c"\15\0E", [2 x i8] c"\0E\0D", [2 x i8] c"\05\09", [2 x i8] c"\1A\07", [2 x i8] c"\04\06", [2 x i8] c"\01\04", [2 x i8] c"\0A\03"], [32 x [2 x i8]] [[2 x i8] c"\01\03", [2 x i8] c"\02\04", [2 x i8] c"\1D\05", [2 x i8] c"\0C\06", [2 x i8] c"\0B\06", [2 x i8] c"\09\02", [2 x i8] c"\0A\02", [2 x i8] c"\00\03", [2 x i8] c"\17\06", [2 x i8] c"\04\06", [2 x i8] c"\1C\06", [2 x i8] c"\1E\0C", [2 x i8] c"\06\0D", [2 x i8] c"\0F\0E", [2 x i8] c"\0E\0E", [2 x i8] c"\07\0B", [2 x i8] c"\0D\0B", [2 x i8] c"\15\0E", [2 x i8] c"\14\0E", [2 x i8] c"\1F\0E", [2 x i8] c"\16\0E", [2 x i8] c"\11\0E", [2 x i8] c"\10\0E", [2 x i8] c"\13\0E", [2 x i8] c"\12\0E", [2 x i8] c"\05\09", [2 x i8] c"\19\08", [2 x i8] c"\1B\08", [2 x i8] c"\18\09", [2 x i8] c"\08\0A", [2 x i8] c"\1A\0A", [2 x i8] c"\03\04"], [32 x [2 x i8]] [[2 x i8] c"\00\02", [2 x i8] c"\01\03", [2 x i8] c"\03\04", [2 x i8] c"\04\06", [2 x i8] c"\05\0A", [2 x i8] c"\0E\0D", [2 x i8] c"\0D\0D", [2 x i8] c"\10\0D", [2 x i8] c"\0F\0D", [2 x i8] c"\06\0D", [2 x i8] c"\08\0E", [2 x i8] c"\07\0E", [2 x i8] c"\1B\0E", [2 x i8] c"\1A\0E", [2 x i8] c"\1F\0E", [2 x i8] c"\1E\0E", [2 x i8] c"\0C\09", [2 x i8] c"\0B\09", [2 x i8] c"\16\0E", [2 x i8] c"\15\0E", [2 x i8] c"\19\0E", [2 x i8] c"\18\0E", [2 x i8] c"\12\0E", [2 x i8] c"\11\0E", [2 x i8] c"\14\0E", [2 x i8] c"\13\0E", [2 x i8] c"\17\0B", [2 x i8] c"\1D\0A", [2 x i8] c"\1C\07", [2 x i8] c"\02\05", [2 x i8] c"\0A\02", [2 x i8] c"\09\02"], [32 x [2 x i8]] [[2 x i8] c"\0A\02", [2 x i8] c"\09\02", [2 x i8] c"\00\02", [2 x i8] c"\03\04", [2 x i8] c"\0C\07", [2 x i8] c"\0B\07", [2 x i8] c"\18\09", [2 x i8] c"\17\09", [2 x i8] c"\1B\08", [2 x i8] c"\05\09", [2 x i8] c"\19\0A", [2 x i8] c"\06\0D", [2 x i8] c"\08\0E", [2 x i8] c"\07\0E", [2 x i8] c"\16\0E", [2 x i8] c"\15\0E", [2 x i8] c"\1F\0E", [2 x i8] c"\1E\0E", [2 x i8] c"\12\0E", [2 x i8] c"\11\0E", [2 x i8] c"\14\0E", [2 x i8] c"\13\0E", [2 x i8] c"\0E\0E", [2 x i8] c"\0D\0E", [2 x i8] c"\10\0E", [2 x i8] c"\0F\0E", [2 x i8] c"\1A\08", [2 x i8] c"\1D\05", [2 x i8] c"\02\05", [2 x i8] c"\1C\06", [2 x i8] c"\04\06", [2 x i8] c"\01\04"]], align 16
@superblock_run_length_vlc_lens = internal constant [34 x i8] c"\01\03\03\04\04\06\06\06\06\08\08\08\08\08\08\08\08\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\0A\06", align 16
@fragment_run_length_vlc_len = internal constant [30 x i8] c"\02\02\03\03\04\04\06\06\06\06\07\07\07\07\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09\09", align 16
@mode_code_vlc_len = internal constant [8 x i8] c"\01\02\03\04\05\06\07\07", align 1
@motion_vector_vlc_table = internal constant [63 x [2 x i8]] [[2 x i8] c"\1F\03", [2 x i8] c" \03", [2 x i8] c"\1E\03", [2 x i8] c"!\04", [2 x i8] c"\1D\04", [2 x i8] c"\22\04", [2 x i8] c"\1C\04", [2 x i8] c"#\06", [2 x i8] c"\1B\06", [2 x i8] c"$\06", [2 x i8] c"\1A\06", [2 x i8] c"%\06", [2 x i8] c"\19\06", [2 x i8] c"&\06", [2 x i8] c"\18\06", [2 x i8] c"'\07", [2 x i8] c"\17\07", [2 x i8] c"(\07", [2 x i8] c"\16\07", [2 x i8] c")\07", [2 x i8] c"\15\07", [2 x i8] c"*\07", [2 x i8] c"\14\07", [2 x i8] c"+\07", [2 x i8] c"\13\07", [2 x i8] c",\07", [2 x i8] c"\12\07", [2 x i8] c"-\07", [2 x i8] c"\11\07", [2 x i8] c".\07", [2 x i8] c"\10\07", [2 x i8] c"/\08", [2 x i8] c"\0F\08", [2 x i8] c"0\08", [2 x i8] c"\0E\08", [2 x i8] c"1\08", [2 x i8] c"\0D\08", [2 x i8] c"2\08", [2 x i8] c"\0C\08", [2 x i8] c"3\08", [2 x i8] c"\0B\08", [2 x i8] c"4\08", [2 x i8] c"\0A\08", [2 x i8] c"5\08", [2 x i8] c"\09\08", [2 x i8] c"6\08", [2 x i8] c"\08\08", [2 x i8] c"7\08", [2 x i8] c"\07\08", [2 x i8] c"8\08", [2 x i8] c"\06\08", [2 x i8] c"9\08", [2 x i8] c"\05\08", [2 x i8] c":\08", [2 x i8] c"\04\08", [2 x i8] c";\08", [2 x i8] c"\03\08", [2 x i8] c"<\08", [2 x i8] c"\02\08", [2 x i8] c"=\08", [2 x i8] c"\01\08", [2 x i8] c">\08", [2 x i8] c"\00\08"], align 16
@vp31_filter_limit_values = internal unnamed_addr constant <{ [48 x i8], [16 x i8] }> <{ [48 x i8] c"\1E\19\14\14\0F\0F\0E\0E\0D\0D\0C\0C\0B\0B\0A\0A\09\09\08\08\07\07\07\07\06\06\06\06\05\05\05\05\04\04\04\04\03\03\03\03\02\02\02\02\02\02\02\02", [16 x i8] zeroinitializer }>, align 16

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp3_update_thread_context(%struct.AVCodecContext*, %struct.AVCodecContext* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %4 = bitcast i8** %3 to %struct.Vp3DecodeContext**
  %5 = load %struct.Vp3DecodeContext*, %struct.Vp3DecodeContext** %4, align 8
  %6 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1, i64 0, i32 6
  %7 = bitcast i8** %6 to %struct.Vp3DecodeContext**
  %8 = load %struct.Vp3DecodeContext*, %struct.Vp3DecodeContext** %7, align 8
  %9 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %8, i64 0, i32 11, i32 0
  %10 = load %struct.AVFrame*, %struct.AVFrame** %9, align 8
  %11 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %10, i64 0, i32 0, i64 0
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %26, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 5
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %8, i64 0, i32 5
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %16, %18
  br i1 %19, label %20, label %26

20:                                               ; preds = %14
  %21 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 6
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %8, i64 0, i32 6
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %22, %24
  br i1 %25, label %64, label %26

26:                                               ; preds = %20, %14, %2
  %27 = icmp eq %struct.Vp3DecodeContext* %5, %8
  br i1 %27, label %156, label %28

28:                                               ; preds = %26
  %29 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 11
  %30 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %8, i64 0, i32 11
  %31 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 0
  %32 = load %struct.AVCodecContext*, %struct.AVCodecContext** %31, align 16
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %32, %struct.ThreadFrame* %29) #5
  %33 = getelementptr inbounds %struct.ThreadFrame, %struct.ThreadFrame* %30, i64 0, i32 0
  %34 = load %struct.AVFrame*, %struct.AVFrame** %33, align 8
  %35 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %34, i64 0, i32 0, i64 0
  %36 = load i8*, i8** %35, align 8
  %37 = icmp eq i8* %36, null
  br i1 %37, label %41, label %38

38:                                               ; preds = %28
  %39 = tail call i32 @ff_thread_ref_frame(%struct.ThreadFrame* %29, %struct.ThreadFrame* %30) #5
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %156, label %41

41:                                               ; preds = %38, %28
  %42 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 9
  %43 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %8, i64 0, i32 9
  %44 = load %struct.AVCodecContext*, %struct.AVCodecContext** %31, align 16
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %44, %struct.ThreadFrame* %42) #5
  %45 = getelementptr inbounds %struct.ThreadFrame, %struct.ThreadFrame* %43, i64 0, i32 0
  %46 = load %struct.AVFrame*, %struct.AVFrame** %45, align 8
  %47 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %46, i64 0, i32 0, i64 0
  %48 = load i8*, i8** %47, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %53, label %50

50:                                               ; preds = %41
  %51 = tail call i32 @ff_thread_ref_frame(%struct.ThreadFrame* %42, %struct.ThreadFrame* %43) #5
  %52 = icmp slt i32 %51, 0
  br i1 %52, label %156, label %53

53:                                               ; preds = %41, %50
  %54 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 10
  %55 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %8, i64 0, i32 10
  %56 = load %struct.AVCodecContext*, %struct.AVCodecContext** %31, align 16
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %56, %struct.ThreadFrame* %54) #5
  %57 = getelementptr inbounds %struct.ThreadFrame, %struct.ThreadFrame* %55, i64 0, i32 0
  %58 = load %struct.AVFrame*, %struct.AVFrame** %57, align 8
  %59 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %58, i64 0, i32 0, i64 0
  %60 = load i8*, i8** %59, align 8
  %61 = icmp eq i8* %60, null
  br i1 %61, label %156, label %62

62:                                               ; preds = %53
  %63 = tail call i32 @ff_thread_ref_frame(%struct.ThreadFrame* %54, %struct.ThreadFrame* %55) #5
  br label %156

64:                                               ; preds = %20
  %65 = icmp eq %struct.Vp3DecodeContext* %5, %8
  br i1 %65, label %141, label %66

66:                                               ; preds = %64
  %67 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 11
  %68 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %8, i64 0, i32 11
  %69 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 0
  %70 = load %struct.AVCodecContext*, %struct.AVCodecContext** %69, align 16
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %70, %struct.ThreadFrame* %67) #5
  %71 = getelementptr inbounds %struct.ThreadFrame, %struct.ThreadFrame* %68, i64 0, i32 0
  %72 = load %struct.AVFrame*, %struct.AVFrame** %71, align 8
  %73 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %72, i64 0, i32 0, i64 0
  %74 = load i8*, i8** %73, align 8
  %75 = icmp eq i8* %74, null
  br i1 %75, label %79, label %76

76:                                               ; preds = %66
  %77 = tail call i32 @ff_thread_ref_frame(%struct.ThreadFrame* %67, %struct.ThreadFrame* %68) #5
  %78 = icmp slt i32 %77, 0
  br i1 %78, label %156, label %79

79:                                               ; preds = %76, %66
  %80 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 9
  %81 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %8, i64 0, i32 9
  %82 = load %struct.AVCodecContext*, %struct.AVCodecContext** %69, align 16
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %82, %struct.ThreadFrame* %80) #5
  %83 = getelementptr inbounds %struct.ThreadFrame, %struct.ThreadFrame* %81, i64 0, i32 0
  %84 = load %struct.AVFrame*, %struct.AVFrame** %83, align 8
  %85 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %84, i64 0, i32 0, i64 0
  %86 = load i8*, i8** %85, align 8
  %87 = icmp eq i8* %86, null
  br i1 %87, label %91, label %88

88:                                               ; preds = %79
  %89 = tail call i32 @ff_thread_ref_frame(%struct.ThreadFrame* %80, %struct.ThreadFrame* %81) #5
  %90 = icmp slt i32 %89, 0
  br i1 %90, label %156, label %91

91:                                               ; preds = %79, %88
  %92 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 10
  %93 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %8, i64 0, i32 10
  %94 = load %struct.AVCodecContext*, %struct.AVCodecContext** %69, align 16
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %94, %struct.ThreadFrame* %92) #5
  %95 = getelementptr inbounds %struct.ThreadFrame, %struct.ThreadFrame* %93, i64 0, i32 0
  %96 = load %struct.AVFrame*, %struct.AVFrame** %95, align 8
  %97 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %96, i64 0, i32 0, i64 0
  %98 = load i8*, i8** %97, align 8
  %99 = icmp eq i8* %98, null
  br i1 %99, label %103, label %100

100:                                              ; preds = %91
  %101 = tail call i32 @ff_thread_ref_frame(%struct.ThreadFrame* %92, %struct.ThreadFrame* %93) #5
  %102 = icmp slt i32 %101, 0
  br i1 %102, label %156, label %103

103:                                              ; preds = %91, %100
  %104 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %8, i64 0, i32 12
  %105 = load i32, i32* %104, align 8
  %106 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 12
  store i32 %105, i32* %106, align 8
  %107 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %8, i64 0, i32 22, i64 1
  %108 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 22, i64 0
  %109 = load i32, i32* %108, align 4
  %110 = load i32, i32* %107, align 4
  %111 = icmp eq i32 %109, %110
  br i1 %111, label %118, label %112

112:                                              ; preds = %103
  %113 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 73, i64 0
  %114 = bitcast [2 x [3 x [64 x i16]]]* %113 to i8*
  %115 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %8, i64 0, i32 73, i64 0
  %116 = bitcast [2 x [3 x [64 x i16]]]* %115 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %114, i8* align 16 %116, i64 768, i1 false)
  %117 = load i32, i32* %107, align 4
  br label %118

118:                                              ; preds = %103, %112
  %119 = phi i32 [ %117, %112 ], [ %109, %103 ]
  %120 = phi i32 [ 1, %112 ], [ 0, %103 ]
  %121 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 22, i64 1
  %122 = load i32, i32* %121, align 4
  %123 = icmp eq i32 %122, %119
  br i1 %123, label %164, label %158

124:                                              ; preds = %175
  %125 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 79
  %126 = bitcast [258 x i32]* %125 to i8*
  %127 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %8, i64 0, i32 79
  %128 = bitcast [258 x i32]* %127 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %126, i8* align 8 %128, i64 1032, i1 false)
  br label %129

129:                                              ; preds = %175, %124
  %130 = icmp eq i32 %176, 0
  br i1 %130, label %141, label %131

131:                                              ; preds = %129
  %132 = bitcast [3 x i32]* %177 to i8*
  %133 = bitcast i32* %178 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %132, i8* align 4 %133, i64 12, i1 false)
  %134 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 24, i64 0
  %135 = bitcast i32* %134 to i8*
  %136 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %8, i64 0, i32 24, i64 0
  %137 = bitcast i32* %136 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %135, i8* align 4 %137, i64 12, i1 false)
  %138 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %8, i64 0, i32 23
  %139 = load i32, i32* %138, align 8
  %140 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 23
  store i32 %139, i32* %140, align 8
  br label %141

141:                                              ; preds = %129, %64, %131
  %142 = load %struct.Vp3DecodeContext*, %struct.Vp3DecodeContext** %4, align 8
  %143 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %142, i64 0, i32 10
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %0, %struct.ThreadFrame* %143) #5
  %144 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %142, i64 0, i32 11
  %145 = tail call i32 @ff_thread_ref_frame(%struct.ThreadFrame* %143, %struct.ThreadFrame* %144) #5
  %146 = icmp slt i32 %145, 0
  br i1 %146, label %154, label %147

147:                                              ; preds = %141
  %148 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %142, i64 0, i32 12
  %149 = load i32, i32* %148, align 8
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %154, label %151

151:                                              ; preds = %147
  %152 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %142, i64 0, i32 9
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %0, %struct.ThreadFrame* %152) #5
  %153 = tail call i32 @ff_thread_ref_frame(%struct.ThreadFrame* %152, %struct.ThreadFrame* %144) #5
  br label %154

154:                                              ; preds = %141, %147, %151
  %155 = phi i32 [ %145, %141 ], [ %153, %151 ], [ %145, %147 ]
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %0, %struct.ThreadFrame* %144) #5
  br label %156

156:                                              ; preds = %62, %53, %100, %88, %76, %50, %38, %26, %154
  %157 = phi i32 [ %155, %154 ], [ -1, %26 ], [ -1, %38 ], [ -1, %50 ], [ %89, %88 ], [ %77, %76 ], [ %101, %100 ], [ -1, %53 ], [ -1, %62 ]
  ret i32 %157

158:                                              ; preds = %118
  %159 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 73, i64 1
  %160 = bitcast [2 x [3 x [64 x i16]]]* %159 to i8*
  %161 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %8, i64 0, i32 73, i64 1
  %162 = bitcast [2 x [3 x [64 x i16]]]* %161 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %160, i8* align 16 %162, i64 768, i1 false)
  %163 = load i32, i32* %107, align 4
  br label %164

164:                                              ; preds = %158, %118
  %165 = phi i32 [ %163, %158 ], [ %119, %118 ]
  %166 = phi i32 [ 1, %158 ], [ %120, %118 ]
  %167 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 22, i64 2
  %168 = load i32, i32* %167, align 4
  %169 = icmp eq i32 %168, %165
  br i1 %169, label %175, label %170

170:                                              ; preds = %164
  %171 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 73, i64 2
  %172 = bitcast [2 x [3 x [64 x i16]]]* %171 to i8*
  %173 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %8, i64 0, i32 73, i64 2
  %174 = bitcast [2 x [3 x [64 x i16]]]* %173 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %172, i8* align 16 %174, i64 768, i1 false)
  br label %175

175:                                              ; preds = %170, %164
  %176 = phi i32 [ 1, %170 ], [ %166, %164 ]
  %177 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 22
  %178 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %8, i64 0, i32 22, i64 0
  %179 = load i32, i32* %178, align 4
  %180 = icmp eq i32 %109, %179
  br i1 %180, label %129, label %124
}

; Function Attrs: cold nounwind optsize ssp uwtable
define internal i32 @theora_decode_init(%struct.AVCodecContext*) #1 {
  %2 = alloca %struct.GetBitContext, align 8
  %3 = alloca [3 x i8*], align 16
  %4 = alloca [3 x i32], align 4
  %5 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %6 = bitcast i8** %5 to %struct.Vp3DecodeContext**
  %7 = load %struct.Vp3DecodeContext*, %struct.Vp3DecodeContext** %6, align 8
  %8 = bitcast %struct.GetBitContext* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 32, i1 false)
  %9 = bitcast [3 x i8*]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #5
  %10 = bitcast [3 x i32]* %4 to i8*
  %11 = bitcast [3 x i8*]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %10) #5
  %12 = getelementptr inbounds [3 x i32], [3 x i32]* %4, i64 0, i64 0
  store i32 -1431655766, i32* %12, align 4
  %13 = getelementptr inbounds [3 x i32], [3 x i32]* %4, i64 0, i64 1
  store i32 -1431655766, i32* %13, align 4
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %4, i64 0, i64 2
  store i32 -1431655766, i32* %14, align 4
  %15 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 25
  store i32 0, i32* %15, align 8
  %16 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %7, i64 0, i32 1
  store i32 1, i32* %16, align 8
  %17 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 16
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %1
  %21 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %21, i32 16, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0)) #5
  br label %102

22:                                               ; preds = %1
  %23 = getelementptr inbounds [3 x i8*], [3 x i8*]* %3, i64 0, i64 0
  %24 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 15
  %25 = load i8*, i8** %24, align 8
  %26 = call i32 @avpriv_split_xiph_headers(i8* %25, i32 %18, i32 42, i8** nonnull %23, i32* nonnull %12) #5
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %35, label %28

28:                                               ; preds = %22
  %29 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %2, i64 0, i32 0
  %30 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %2, i64 0, i32 3
  %31 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %2, i64 0, i32 4
  %32 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %2, i64 0, i32 1
  %33 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %2, i64 0, i32 2
  %34 = bitcast %struct.AVCodecContext* %0 to i8*
  br label %37

35:                                               ; preds = %22
  %36 = bitcast %struct.AVCodecContext* %0 to i8*
  call void (i8*, i32, i8*, ...) @av_log(i8* %36, i32 16, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0)) #5
  br label %102

37:                                               ; preds = %97, %28
  %38 = phi i64 [ 0, %28 ], [ %98, %97 ]
  %39 = getelementptr inbounds [3 x i32], [3 x i32]* %4, i64 0, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = icmp slt i32 %40, 1
  br i1 %41, label %97, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds [3 x i8*], [3 x i8*]* %3, i64 0, i64 %38
  %44 = load i8*, i8** %43, align 8
  %45 = icmp ugt i32 %40, 268435455
  %46 = shl i32 %40, 3
  %47 = select i1 %45, i32 -8, i32 %46
  %48 = icmp ult i32 %47, 2147483135
  %49 = icmp ne i8* %44, null
  %50 = and i1 %48, %49
  %51 = select i1 %50, i32 %47, i32 0
  %52 = select i1 %50, i8* %44, i8* null
  %53 = ashr exact i32 %51, 3
  store i8* %52, i8** %29, align 8
  store i32 %51, i32* %30, align 4
  %54 = add nsw i32 %51, 8
  store i32 %54, i32* %31, align 8
  %55 = sext i32 %53 to i64
  %56 = getelementptr inbounds i8, i8* %52, i64 %55
  store i8* %56, i8** %32, align 8
  store i32 0, i32* %33, align 8
  br i1 %50, label %57, label %102

57:                                               ; preds = %42
  %58 = bitcast i8* %52 to i32*
  %59 = load i32, i32* %58, align 1
  %60 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %59) #6, !srcloc !2
  %61 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -8, i32 %60) #6, !srcloc !3
  %62 = icmp eq i32 %54, 0
  %63 = select i1 %62, i32 0, i32 8
  store i32 %63, i32* %33, align 8
  %64 = trunc i32 %61 to i8
  %65 = icmp slt i8 %64, 0
  br i1 %65, label %69, label %66

66:                                               ; preds = %57
  call void (i8*, i32, i8*, ...) @av_log(i8* %34, i32 16, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0)) #5
  %67 = load i32, i32* %33, align 8
  %68 = load i32, i32* %31, align 8
  br label %69

69:                                               ; preds = %66, %57
  %70 = phi i32 [ %68, %66 ], [ %54, %57 ]
  %71 = phi i32 [ %67, %66 ], [ %63, %57 ]
  %72 = sub nsw i32 0, %71
  %73 = sub nsw i32 %70, %71
  %74 = icmp slt i32 %71, -48
  %75 = icmp slt i32 %73, 48
  %76 = select i1 %75, i32 %73, i32 48
  %77 = select i1 %74, i32 %72, i32 %76
  %78 = add nsw i32 %77, %71
  store i32 %78, i32* %33, align 8
  switch i32 %61, label %85 [
    i32 128, label %79
    i32 130, label %82
    i32 129, label %94
  ]

79:                                               ; preds = %69
  %80 = call fastcc i32 @theora_decode_header(%struct.AVCodecContext* %0, %struct.GetBitContext* nonnull %2)
  %81 = icmp slt i32 %80, 0
  br i1 %81, label %102, label %87

82:                                               ; preds = %69
  %83 = call fastcc i32 @theora_decode_tables(%struct.AVCodecContext* %0, %struct.GetBitContext* nonnull %2)
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %87, label %102

85:                                               ; preds = %69
  %86 = and i32 %61, -129
  call void (i8*, i32, i8*, ...) @av_log(i8* %34, i32 16, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.7, i64 0, i64 0), i32 %86) #5
  br label %87

87:                                               ; preds = %85, %79, %82
  %88 = load i32, i32* %39, align 4
  %89 = shl nsw i32 %88, 3
  %90 = load i32, i32* %33, align 8
  %91 = icmp eq i32 %89, %90
  br i1 %91, label %94, label %92

92:                                               ; preds = %87
  %93 = sub nsw i32 %89, %90
  call void (i8*, i32, i8*, ...) @av_log(i8* %34, i32 24, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.8, i64 0, i64 0), i32 %93, i32 %61) #5
  br label %94

94:                                               ; preds = %69, %87, %92
  %95 = load i32, i32* %16, align 8
  %96 = icmp slt i32 %95, 197120
  br i1 %96, label %100, label %97

97:                                               ; preds = %94, %37
  %98 = add nuw nsw i64 %38, 1
  %99 = icmp eq i64 %98, 3
  br i1 %99, label %100, label %37

100:                                              ; preds = %97, %94
  %101 = call i32 @vp3_decode_init(%struct.AVCodecContext* %0) #7
  br label %102

102:                                              ; preds = %79, %82, %42, %100, %35, %20
  %103 = phi i32 [ -1, %35 ], [ %101, %100 ], [ -1, %20 ], [ -1, %79 ], [ -1, %82 ], [ -1094995529, %42 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #5
  ret i32 %103
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @vp3_decode_frame(%struct.AVCodecContext*, i8*, i32* nocapture, %struct.AVPacket* nocapture readonly) #0 {
  %5 = alloca [64 x %struct.VLC*], align 16
  %6 = alloca [64 x %struct.VLC*], align 16
  %7 = alloca [4 x i32], align 16
  %8 = alloca [4 x i32], align 16
  %9 = alloca [8 x i32], align 16
  %10 = alloca [3 x i32], align 4
  %11 = alloca %struct.GetBitContext, align 8
  %12 = bitcast i8* %1 to %struct.AVFrame*
  %13 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 3
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 4
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %18 = bitcast i8** %17 to %struct.Vp3DecodeContext**
  %19 = load %struct.Vp3DecodeContext*, %struct.Vp3DecodeContext** %18, align 8
  %20 = bitcast %struct.Vp3DecodeContext* %19 to i8*
  %21 = bitcast %struct.GetBitContext* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 -86, i64 32, i1 false)
  %22 = icmp ugt i32 %16, 268435455
  %23 = shl i32 %16, 3
  %24 = select i1 %22, i32 -8, i32 %23
  %25 = icmp ult i32 %24, 2147483135
  %26 = icmp ne i8* %14, null
  %27 = and i1 %26, %25
  %28 = select i1 %27, i32 %24, i32 0
  %29 = select i1 %27, i8* %14, i8* null
  %30 = ashr exact i32 %28, 3
  %31 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %11, i64 0, i32 0
  store i8* %29, i8** %31, align 8
  %32 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %11, i64 0, i32 3
  store i32 %28, i32* %32, align 4
  %33 = add nsw i32 %28, 8
  %34 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %11, i64 0, i32 4
  store i32 %33, i32* %34, align 8
  %35 = sext i32 %30 to i64
  %36 = getelementptr inbounds i8, i8* %29, i64 %35
  %37 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %11, i64 0, i32 1
  store i8* %36, i8** %37, align 8
  %38 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %11, i64 0, i32 2
  store i32 0, i32* %38, align 8
  br i1 %27, label %39, label %3615

39:                                               ; preds = %4
  %40 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %95, label %43

43:                                               ; preds = %39
  %44 = load i8, i8* %29, align 1
  %45 = icmp sgt i32 %33, 0
  %46 = zext i1 %45 to i32
  store i32 %46, i32* %38, align 8
  %47 = icmp sgt i8 %44, -1
  br i1 %47, label %95, label %48

48:                                               ; preds = %43
  %49 = bitcast i8* %29 to i32*
  %50 = load i32, i32* %49, align 1
  %51 = select i1 %45, i32 8, i32 7
  %52 = icmp ugt i32 %33, %51
  %53 = select i1 %52, i32 %51, i32 %33
  %54 = sub nsw i32 0, %53
  %55 = sub nsw i32 %33, %53
  %56 = icmp slt i32 %53, -48
  %57 = icmp slt i32 %55, 48
  %58 = select i1 %57, i32 %55, i32 48
  %59 = select i1 %56, i32 %54, i32 %58
  %60 = add nsw i32 %59, %53
  store i32 %60, i32* %38, align 8
  %61 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 0
  %62 = load %struct.AVCodecContext*, %struct.AVCodecContext** %61, align 16
  %63 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %62, i64 0, i32 148
  %64 = load i32, i32* %63, align 8
  %65 = and i32 %64, 1
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %69, label %67

67:                                               ; preds = %48
  %68 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %68, i32 16, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.19, i64 0, i64 0)) #5
  br label %3615

69:                                               ; preds = %48
  %70 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %50) #6, !srcloc !2
  %71 = shl i32 %70, %46
  %72 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -7, i32 %71) #6, !srcloc !3
  switch i32 %72, label %93 [
    i32 0, label %73
    i32 2, label %83
  ]

73:                                               ; preds = %69
  %74 = tail call i32 @vp3_decode_end(%struct.AVCodecContext* %0) #7
  %75 = call fastcc i32 @theora_decode_header(%struct.AVCodecContext* %0, %struct.GetBitContext* nonnull %11)
  %76 = icmp sgt i32 %75, -1
  br i1 %76, label %77, label %80

77:                                               ; preds = %73
  %78 = call i32 @vp3_decode_init(%struct.AVCodecContext* %0) #7
  %79 = icmp slt i32 %78, 0
  br i1 %79, label %80, label %3615

80:                                               ; preds = %73, %77
  %81 = phi i32 [ %78, %77 ], [ %75, %73 ]
  %82 = call i32 @vp3_decode_end(%struct.AVCodecContext* %0) #7
  br label %3615

83:                                               ; preds = %69
  %84 = tail call i32 @vp3_decode_end(%struct.AVCodecContext* %0) #7
  %85 = call fastcc i32 @theora_decode_tables(%struct.AVCodecContext* %0, %struct.GetBitContext* nonnull %11)
  %86 = icmp sgt i32 %85, -1
  br i1 %86, label %87, label %90

87:                                               ; preds = %83
  %88 = call i32 @vp3_decode_init(%struct.AVCodecContext* %0) #7
  %89 = icmp slt i32 %88, 0
  br i1 %89, label %90, label %3615

90:                                               ; preds = %83, %87
  %91 = phi i32 [ %88, %87 ], [ %85, %83 ]
  %92 = call i32 @vp3_decode_end(%struct.AVCodecContext* %0) #7
  br label %3615

93:                                               ; preds = %69
  %94 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %94, i32 16, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.20, i64 0, i64 0)) #5
  br label %3615

95:                                               ; preds = %43, %39
  %96 = phi i32 [ %46, %43 ], [ 0, %39 ]
  %97 = load i8, i8* %29, align 1
  %98 = zext i8 %97 to i32
  %99 = shl i32 %98, %96
  %100 = icmp slt i32 %96, %33
  %101 = zext i1 %100 to i32
  %102 = add nuw nsw i32 %96, %101
  store i32 %102, i32* %38, align 8
  %103 = lshr i32 %99, 7
  %104 = and i32 %103, 1
  %105 = xor i32 %104, 1
  %106 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 12
  store i32 %105, i32* %106, align 8
  %107 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 45
  %108 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %107, align 8
  %109 = icmp eq %struct.Vp3Fragment* %108, null
  br i1 %109, label %110, label %112

110:                                              ; preds = %95
  %111 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %111, i32 16, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.21, i64 0, i64 0)) #5
  br label %3615

112:                                              ; preds = %95
  %113 = load i32, i32* %40, align 8
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %119

115:                                              ; preds = %112
  %116 = add nuw nsw i32 %102, 1
  %117 = icmp ugt i32 %33, %116
  %118 = select i1 %117, i32 %116, i32 %33
  store i32 %118, i32* %38, align 8
  br label %119

119:                                              ; preds = %112, %115
  %120 = phi i32 [ %102, %112 ], [ %118, %115 ]
  %121 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 22, i64 0
  %122 = load i32, i32* %121, align 4
  %123 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 24, i64 0
  store i32 %122, i32* %123, align 4
  %124 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 22, i64 1
  %125 = load i32, i32* %124, align 4
  %126 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 24, i64 1
  store i32 %125, i32* %126, align 4
  %127 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 22, i64 2
  %128 = load i32, i32* %127, align 4
  %129 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 24, i64 2
  store i32 %128, i32* %129, align 4
  %130 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 23
  store i32 0, i32* %130, align 8
  br label %131

131:                                              ; preds = %158, %119
  %132 = phi i32 [ %153, %158 ], [ 0, %119 ]
  %133 = phi i8* [ %160, %158 ], [ %14, %119 ]
  %134 = phi i32 [ %168, %158 ], [ %33, %119 ]
  %135 = phi i32 [ %171, %158 ], [ %120, %119 ]
  %136 = lshr i32 %135, 3
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds i8, i8* %133, i64 %137
  %139 = bitcast i8* %138 to i32*
  %140 = load i32, i32* %139, align 1
  %141 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %140) #6, !srcloc !2
  %142 = and i32 %135, 7
  %143 = shl i32 %141, %142
  %144 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %143) #6, !srcloc !3
  %145 = add i32 %135, 6
  %146 = icmp ugt i32 %134, %145
  %147 = select i1 %146, i32 %145, i32 %134
  store i32 %147, i32* %38, align 8
  %148 = add nsw i32 %132, 1
  store i32 %148, i32* %130, align 8
  %149 = sext i32 %132 to i64
  %150 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 22, i64 %149
  store i32 %144, i32* %150, align 4
  %151 = load i32, i32* %40, align 8
  %152 = icmp sgt i32 %151, 197119
  %153 = load i32, i32* %130, align 8
  br i1 %152, label %154, label %176

154:                                              ; preds = %131
  %155 = icmp slt i32 %153, 3
  br i1 %155, label %158, label %156

156:                                              ; preds = %154
  %157 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 22
  br label %189

158:                                              ; preds = %154
  %159 = load i32, i32* %38, align 8
  %160 = load i8*, i8** %31, align 8
  %161 = lshr i32 %159, 3
  %162 = zext i32 %161 to i64
  %163 = getelementptr inbounds i8, i8* %160, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = and i32 %159, 7
  %166 = zext i8 %164 to i32
  %167 = shl i32 %166, %165
  %168 = load i32, i32* %34, align 8
  %169 = icmp slt i32 %159, %168
  %170 = zext i1 %169 to i32
  %171 = add i32 %159, %170
  store i32 %171, i32* %38, align 8
  %172 = trunc i32 %167 to i8
  %173 = icmp sgt i8 %172, -1
  br i1 %173, label %174, label %131

174:                                              ; preds = %158
  %175 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 22
  br label %179

176:                                              ; preds = %131
  %177 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 22
  %178 = icmp slt i32 %153, 3
  br i1 %178, label %179, label %189

179:                                              ; preds = %174, %176
  %180 = phi [3 x i32]* [ %175, %174 ], [ %177, %176 ]
  %181 = sext i32 %153 to i64
  %182 = shl nsw i64 %181, 2
  %183 = add nsw i64 %182, 908
  %184 = getelementptr i8, i8* %20, i64 %183
  %185 = sub i32 2, %153
  %186 = zext i32 %185 to i64
  %187 = shl nuw nsw i64 %186, 2
  %188 = add nuw nsw i64 %187, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %184, i8 -1, i64 %188, i1 false)
  br label %189

189:                                              ; preds = %156, %179, %176
  %190 = phi [3 x i32]* [ %180, %179 ], [ %177, %176 ], [ %157, %156 ]
  %191 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 0
  %192 = load %struct.AVCodecContext*, %struct.AVCodecContext** %191, align 16
  %193 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %192, i64 0, i32 134
  %194 = load i32, i32* %193, align 4
  %195 = and i32 %194, 1
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %207, label %197

197:                                              ; preds = %189
  %198 = bitcast %struct.AVCodecContext* %192 to i8*
  %199 = load i32, i32* %106, align 8
  %200 = icmp eq i32 %199, 0
  %201 = select i1 %200, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0)
  %202 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 86
  %203 = load i32, i32* %202, align 8
  %204 = add nsw i32 %203, 1
  %205 = getelementptr inbounds [3 x i32], [3 x i32]* %190, i64 0, i64 0
  %206 = load i32, i32* %205, align 4
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %198, i32 32, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.22, i64 0, i64 0), i8* %201, i32 %204, i32 %206) #5
  br label %207

207:                                              ; preds = %189, %197
  %208 = getelementptr inbounds [3 x i32], [3 x i32]* %190, i64 0, i64 0
  %209 = load i32, i32* %208, align 4
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 78, i64 %210
  %212 = load i8, i8* %211, align 1
  %213 = icmp eq i8 %212, 0
  br i1 %213, label %221, label %214

214:                                              ; preds = %207
  %215 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 155
  %216 = load i32, i32* %215, align 4
  %217 = load i32, i32* %106, align 8
  %218 = icmp eq i32 %217, 0
  %219 = select i1 %218, i32 32, i32 48
  %220 = icmp sge i32 %216, %219
  br label %221

221:                                              ; preds = %207, %214
  %222 = phi i1 [ true, %207 ], [ %220, %214 ]
  %223 = zext i1 %222 to i32
  %224 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 21
  store i32 %223, i32* %224, align 8
  %225 = load i32, i32* %123, align 4
  %226 = icmp eq i32 %209, %225
  br i1 %226, label %231, label %227

227:                                              ; preds = %221
  %228 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 79, i64 0
  %229 = load i8, i8* %211, align 1
  %230 = zext i8 %229 to i32
  tail call void @ff_vp3dsp_set_bounding_values(i32* %228, i32 %230) #5
  br label %231

231:                                              ; preds = %221, %227
  %232 = load i32, i32* %130, align 8
  %233 = icmp sgt i32 %232, 0
  br i1 %233, label %234, label %365

234:                                              ; preds = %231
  %235 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 4
  %236 = sext i32 %232 to i64
  br label %237

237:                                              ; preds = %234, %362
  %238 = phi i64 [ 0, %234 ], [ %363, %362 ]
  %239 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 22, i64 %238
  %240 = load i32, i32* %239, align 4
  %241 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 24, i64 %238
  %242 = load i32, i32* %241, align 4
  %243 = icmp eq i32 %240, %242
  br i1 %243, label %244, label %248

244:                                              ; preds = %237
  %245 = load i32, i32* %208, align 4
  %246 = load i32, i32* %123, align 4
  %247 = icmp eq i32 %245, %246
  br i1 %247, label %362, label %248

248:                                              ; preds = %244, %237
  %249 = sext i32 %240 to i64
  %250 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 53, i64 %249
  %251 = load i32, i32* %250, align 4
  br label %252

252:                                              ; preds = %359, %248
  %253 = phi i64 [ 0, %248 ], [ %360, %359 ]
  %254 = trunc i64 %253 to i32
  %255 = mul i32 %254, 3
  %256 = add i32 %255, 3
  br label %257

257:                                              ; preds = %353, %252
  %258 = phi i64 [ 0, %252 ], [ %357, %353 ]
  %259 = icmp ne i64 %258, 0
  %260 = zext i1 %259 to i64
  %261 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 52, i64 %260, i64 %249
  %262 = load i16, i16* %261, align 2
  %263 = zext i16 %262 to i32
  %264 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 55, i64 %253, i64 %258
  %265 = load i8, i8* %264, align 1
  %266 = icmp eq i8 %265, 0
  br i1 %266, label %284, label %267

267:                                              ; preds = %257
  %268 = zext i8 %265 to i64
  br label %269

269:                                              ; preds = %278, %267
  %270 = phi i64 [ 0, %267 ], [ %279, %278 ]
  %271 = phi i32 [ 0, %267 ], [ %276, %278 ]
  %272 = phi i32 [ 0, %267 ], [ %280, %278 ]
  %273 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 56, i64 %253, i64 %258, i64 %270
  %274 = load i8, i8* %273, align 1
  %275 = zext i8 %274 to i32
  %276 = add nuw nsw i32 %271, %275
  %277 = icmp sgt i32 %240, %276
  br i1 %277, label %278, label %282

278:                                              ; preds = %269
  %279 = add nuw nsw i64 %270, 1
  %280 = add nuw nsw i32 %272, 1
  %281 = icmp eq i64 %279, %268
  br i1 %281, label %284, label %269

282:                                              ; preds = %269
  %283 = trunc i64 %270 to i32
  br label %284

284:                                              ; preds = %278, %282, %257
  %285 = phi i32 [ 0, %257 ], [ %283, %282 ], [ %280, %278 ]
  %286 = phi i32 [ 0, %257 ], [ %276, %282 ], [ %276, %278 ]
  %287 = zext i32 %285 to i64
  %288 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 56, i64 %253, i64 %258, i64 %287
  %289 = load i8, i8* %288, align 1
  %290 = zext i8 %289 to i32
  %291 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 57, i64 %253, i64 %258, i64 %287
  %292 = load i16, i16* %291, align 2
  %293 = add nuw nsw i32 %285, 1
  %294 = zext i32 %293 to i64
  %295 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 57, i64 %253, i64 %258, i64 %294
  %296 = load i16, i16* %295, align 2
  %297 = zext i16 %292 to i64
  %298 = zext i16 %296 to i64
  %299 = sub i32 %286, %240
  %300 = sub i32 %299, %290
  br label %301

301:                                              ; preds = %351, %284
  %302 = phi i8 [ %289, %284 ], [ %352, %351 ]
  %303 = phi i64 [ 0, %284 ], [ %349, %351 ]
  %304 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 54, i64 %297, i64 %303
  %305 = load i8, i8* %304, align 1
  %306 = zext i8 %305 to i32
  %307 = mul i32 %299, %306
  %308 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 54, i64 %298, i64 %303
  %309 = load i8, i8* %308, align 1
  %310 = zext i8 %309 to i32
  %311 = mul i32 %300, %310
  %312 = zext i8 %302 to i32
  %313 = sub i32 %307, %311
  %314 = shl i32 %313, 1
  %315 = add i32 %314, %312
  %316 = shl nuw nsw i32 %312, 1
  %317 = sdiv i32 %315, %316
  %318 = icmp ne i64 %303, 0
  %319 = xor i1 %318, true
  %320 = zext i1 %319 to i32
  %321 = add nuw nsw i32 %320, %254
  %322 = shl i32 8, %321
  %323 = select i1 %318, i32 %251, i32 %263
  %324 = icmp eq i64 %303, 0
  br i1 %324, label %328, label %325

325:                                              ; preds = %301
  %326 = load i32, i32* %235, align 4
  %327 = icmp slt i32 %326, 2
  br i1 %327, label %328, label %336

328:                                              ; preds = %325, %301
  %329 = mul nsw i32 %317, %323
  %330 = sdiv i32 %329, 100
  %331 = shl nsw i32 %330, 2
  %332 = icmp slt i32 %331, %322
  %333 = icmp slt i32 %331, 4096
  %334 = select i1 %333, i32 %331, i32 4096
  %335 = select i1 %332, i32 %322, i32 %334
  br label %342

336:                                              ; preds = %325
  %337 = sub nsw i32 %317, %256
  %338 = mul nsw i32 %337, %323
  %339 = sdiv i32 %338, 100
  %340 = add nsw i32 %339, %256
  %341 = shl nsw i32 %340, 2
  br label %342

342:                                              ; preds = %336, %328
  %343 = phi i32 [ %335, %328 ], [ %341, %336 ]
  %344 = trunc i32 %343 to i16
  %345 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 13, i64 %303
  %346 = load i8, i8* %345, align 1
  %347 = zext i8 %346 to i64
  %348 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 73, i64 %238, i64 %253, i64 %258, i64 %347
  store i16 %344, i16* %348, align 2
  %349 = add nuw nsw i64 %303, 1
  %350 = icmp eq i64 %349, 64
  br i1 %350, label %353, label %351

351:                                              ; preds = %342
  %352 = load i8, i8* %288, align 1
  br label %301

353:                                              ; preds = %342
  %354 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 73, i64 0, i64 %253, i64 %258, i64 0
  %355 = load i16, i16* %354, align 16
  %356 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 73, i64 %238, i64 %253, i64 %258, i64 0
  store i16 %355, i16* %356, align 16
  %357 = add nuw nsw i64 %258, 1
  %358 = icmp eq i64 %357, 3
  br i1 %358, label %359, label %257

359:                                              ; preds = %353
  %360 = add nuw nsw i64 %253, 1
  %361 = icmp eq i64 %360, 2
  br i1 %361, label %362, label %252

362:                                              ; preds = %359, %244
  %363 = add nuw nsw i64 %238, 1
  %364 = icmp slt i64 %363, %236
  br i1 %364, label %237, label %365

365:                                              ; preds = %362, %231
  %366 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 157
  %367 = load i32, i32* %366, align 4
  %368 = icmp sgt i32 %367, 31
  %369 = load i32, i32* %106, align 8
  %370 = icmp eq i32 %369, 0
  %371 = and i1 %368, %370
  br i1 %371, label %3615, label %372

372:                                              ; preds = %365
  %373 = icmp eq i32 %369, 0
  %374 = select i1 %373, i32 2, i32 1
  %375 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 11
  %376 = getelementptr inbounds %struct.ThreadFrame, %struct.ThreadFrame* %375, i64 0, i32 0
  %377 = load %struct.AVFrame*, %struct.AVFrame** %376, align 8
  %378 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %377, i64 0, i32 8
  store i32 %374, i32* %378, align 4
  %379 = load i32, i32* %106, align 8
  %380 = load %struct.AVFrame*, %struct.AVFrame** %376, align 8
  %381 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %380, i64 0, i32 7
  store i32 %379, i32* %381, align 8
  %382 = tail call i32 @ff_thread_get_buffer(%struct.AVCodecContext* %0, %struct.ThreadFrame* %375, i32 1) #5
  %383 = icmp slt i32 %382, 0
  br i1 %383, label %3606, label %384

384:                                              ; preds = %372
  %385 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 76
  %386 = load i8*, i8** %385, align 16
  %387 = icmp eq i8* %386, null
  br i1 %387, label %388, label %398

388:                                              ; preds = %384
  %389 = load %struct.AVFrame*, %struct.AVFrame** %376, align 8
  %390 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %389, i64 0, i32 1, i64 0
  %391 = load i32, i32* %390, align 8
  %392 = icmp slt i32 %391, 0
  %393 = sub nsw i32 0, %391
  %394 = select i1 %392, i32 %393, i32 %391
  %395 = mul nsw i32 %394, 9
  %396 = zext i32 %395 to i64
  %397 = tail call noalias i8* @av_malloc(i64 %396) #5
  store i8* %397, i8** %385, align 16
  br label %398

398:                                              ; preds = %384, %388
  %399 = load i32, i32* %106, align 8
  %400 = icmp eq i32 %399, 0
  br i1 %400, label %466, label %401

401:                                              ; preds = %398
  %402 = load i32, i32* %40, align 8
  %403 = icmp eq i32 %402, 0
  br i1 %403, label %404, label %436

404:                                              ; preds = %401
  %405 = load i32, i32* %38, align 8
  %406 = load i32, i32* %34, align 8
  %407 = add i32 %405, 4
  %408 = icmp ugt i32 %406, %407
  %409 = select i1 %408, i32 %407, i32 %406
  %410 = add i32 %409, 4
  %411 = icmp ugt i32 %406, %410
  %412 = select i1 %411, i32 %410, i32 %406
  store i32 %412, i32* %38, align 8
  %413 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 4
  %414 = load i32, i32* %413, align 4
  %415 = icmp eq i32 %414, 0
  br i1 %415, label %436, label %416

416:                                              ; preds = %404
  %417 = load i8*, i8** %31, align 8
  %418 = lshr i32 %412, 3
  %419 = zext i32 %418 to i64
  %420 = getelementptr inbounds i8, i8* %417, i64 %419
  %421 = bitcast i8* %420 to i32*
  %422 = load i32, i32* %421, align 1
  %423 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %422) #6, !srcloc !2
  %424 = and i32 %412, 7
  %425 = shl i32 %423, %424
  %426 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -5, i32 %425) #6, !srcloc !3
  %427 = add i32 %412, 5
  %428 = icmp ugt i32 %406, %427
  %429 = select i1 %428, i32 %427, i32 %406
  store i32 %429, i32* %38, align 8
  store i32 %426, i32* %413, align 4
  %430 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 86
  %431 = load i32, i32* %430, align 8
  %432 = icmp eq i32 %431, 0
  br i1 %432, label %433, label %436

433:                                              ; preds = %416
  %434 = bitcast %struct.Vp3DecodeContext* %19 to i8**
  %435 = load i8*, i8** %434, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %435, i32 48, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.25, i64 0, i64 0), i32 %426) #5
  br label %436

436:                                              ; preds = %404, %401, %433, %416
  %437 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 4
  %438 = load i32, i32* %437, align 4
  %439 = icmp eq i32 %438, 0
  br i1 %439, label %440, label %443

440:                                              ; preds = %436
  %441 = load i32, i32* %40, align 8
  %442 = icmp eq i32 %441, 0
  br i1 %442, label %485, label %443

443:                                              ; preds = %440, %436
  %444 = load i32, i32* %38, align 8
  %445 = load i8*, i8** %31, align 8
  %446 = lshr i32 %444, 3
  %447 = zext i32 %446 to i64
  %448 = getelementptr inbounds i8, i8* %445, i64 %447
  %449 = load i8, i8* %448, align 1
  %450 = and i32 %444, 7
  %451 = zext i8 %449 to i32
  %452 = shl i32 %451, %450
  %453 = load i32, i32* %34, align 8
  %454 = icmp slt i32 %444, %453
  %455 = zext i1 %454 to i32
  %456 = add i32 %444, %455
  store i32 %456, i32* %38, align 8
  %457 = trunc i32 %452 to i8
  %458 = icmp sgt i8 %457, -1
  br i1 %458, label %462, label %459

459:                                              ; preds = %443
  %460 = bitcast %struct.Vp3DecodeContext* %19 to i8**
  %461 = load i8*, i8** %460, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %461, i32 16, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.26, i64 0, i64 0)) #5
  br label %462

462:                                              ; preds = %443, %459
  %463 = add i32 %456, 2
  %464 = icmp ugt i32 %453, %463
  %465 = select i1 %464, i32 %463, i32 %453
  store i32 %465, i32* %38, align 8
  br label %485

466:                                              ; preds = %398
  %467 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 9
  %468 = getelementptr inbounds %struct.ThreadFrame, %struct.ThreadFrame* %467, i64 0, i32 0
  %469 = load %struct.AVFrame*, %struct.AVFrame** %468, align 8
  %470 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %469, i64 0, i32 0, i64 0
  %471 = load i8*, i8** %470, align 8
  %472 = icmp eq i8* %471, null
  br i1 %472, label %473, label %485

473:                                              ; preds = %466
  %474 = bitcast %struct.Vp3DecodeContext* %19 to i8**
  %475 = load i8*, i8** %474, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %475, i32 24, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.27, i64 0, i64 0)) #5
  %476 = load %struct.AVFrame*, %struct.AVFrame** %468, align 8
  %477 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %476, i64 0, i32 8
  store i32 1, i32* %477, align 4
  %478 = tail call i32 @ff_thread_get_buffer(%struct.AVCodecContext* %0, %struct.ThreadFrame* %467, i32 1) #5
  %479 = icmp slt i32 %478, 0
  br i1 %479, label %3606, label %480

480:                                              ; preds = %473
  %481 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 10
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %0, %struct.ThreadFrame* %481) #5
  %482 = tail call i32 @ff_thread_ref_frame(%struct.ThreadFrame* %481, %struct.ThreadFrame* %467) #5
  %483 = icmp slt i32 %482, 0
  br i1 %483, label %3606, label %484

484:                                              ; preds = %480
  tail call void @ff_thread_report_progress(%struct.ThreadFrame* %481, i32 2147483647, i32 0) #5
  br label %485

485:                                              ; preds = %440, %466, %484, %462
  %486 = bitcast %struct.Vp3Fragment** %107 to i8**
  %487 = load i8*, i8** %486, align 8
  %488 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 42
  %489 = load i32, i32* %488, align 4
  %490 = sext i32 %489 to i64
  %491 = shl nsw i64 %490, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %487, i8 0, i64 %491, i1 false)
  tail call void @ff_thread_finish_setup(%struct.AVCodecContext* %0) #5
  %492 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 4
  %493 = load i32, i32* %492, align 4
  %494 = icmp slt i32 %493, 2
  br i1 %494, label %495, label %1067

495:                                              ; preds = %485
  %496 = bitcast [3 x i32]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %496) #5
  %497 = getelementptr inbounds [3 x i32], [3 x i32]* %10, i64 0, i64 0
  %498 = getelementptr inbounds [3 x i32], [3 x i32]* %10, i64 0, i64 1
  %499 = getelementptr inbounds [3 x i32], [3 x i32]* %10, i64 0, i64 2
  store i32 0, i32* %497, align 4
  %500 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 32
  %501 = load i32, i32* %500, align 4
  store i32 %501, i32* %498, align 4
  %502 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 33
  %503 = load i32, i32* %502, align 8
  store i32 %503, i32* %499, align 4
  %504 = load i32, i32* %106, align 8
  %505 = icmp eq i32 %504, 0
  br i1 %505, label %512, label %506

506:                                              ; preds = %495
  %507 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 34
  %508 = load i8*, i8** %507, align 16
  %509 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 25
  %510 = load i32, i32* %509, align 8
  %511 = sext i32 %510 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %508, i8 2, i64 %511, i1 false) #5
  br label %833

512:                                              ; preds = %495
  %513 = load i32, i32* %38, align 8
  %514 = load i8*, i8** %31, align 8
  %515 = lshr i32 %513, 3
  %516 = zext i32 %515 to i64
  %517 = getelementptr inbounds i8, i8* %514, i64 %516
  %518 = load i8, i8* %517, align 1
  %519 = and i32 %513, 7
  %520 = zext i8 %518 to i32
  %521 = shl i32 %520, %519
  %522 = lshr i32 %521, 7
  %523 = and i32 %522, 1
  %524 = load i32, i32* %34, align 8
  %525 = icmp slt i32 %513, %524
  %526 = zext i1 %525 to i32
  %527 = add i32 %513, %526
  store i32 %527, i32* %38, align 8
  %528 = xor i32 %523, 1
  %529 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 25
  %530 = load i32, i32* %529, align 8
  %531 = icmp sgt i32 %530, 0
  br i1 %531, label %532, label %649

532:                                              ; preds = %512
  %533 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 67, i32 1
  %534 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 34
  %535 = load i32, i32* %32, align 4
  %536 = icmp sgt i32 %535, %527
  br i1 %536, label %537, label %649

537:                                              ; preds = %532, %635
  %538 = phi i32 [ %645, %635 ], [ %530, %532 ]
  %539 = phi i32 [ %565, %635 ], [ %528, %532 ]
  %540 = phi i32 [ %641, %635 ], [ 0, %532 ]
  %541 = phi i32 [ %629, %635 ], [ 0, %532 ]
  %542 = phi i32 [ %644, %635 ], [ 0, %532 ]
  %543 = phi i32 [ %628, %635 ], [ %527, %532 ]
  %544 = load i32, i32* %40, align 8
  %545 = icmp ne i32 %544, 0
  %546 = icmp eq i32 %541, 4129
  %547 = and i1 %546, %545
  br i1 %547, label %548, label %561

548:                                              ; preds = %537
  %549 = lshr i32 %543, 3
  %550 = zext i32 %549 to i64
  %551 = getelementptr inbounds i8, i8* %514, i64 %550
  %552 = load i8, i8* %551, align 1
  %553 = and i32 %543, 7
  %554 = zext i8 %552 to i32
  %555 = shl i32 %554, %553
  %556 = lshr i32 %555, 7
  %557 = and i32 %556, 1
  %558 = icmp slt i32 %543, %524
  %559 = zext i1 %558 to i32
  %560 = add nsw i32 %543, %559
  store i32 %560, i32* %38, align 8
  br label %563

561:                                              ; preds = %537
  %562 = xor i32 %539, 1
  br label %563

563:                                              ; preds = %561, %548
  %564 = phi i32 [ %560, %548 ], [ %543, %561 ]
  %565 = phi i32 [ %557, %548 ], [ %562, %561 ]
  %566 = load [2 x i16]*, [2 x i16]** %533, align 8
  %567 = lshr i32 %564, 3
  %568 = zext i32 %567 to i64
  %569 = getelementptr inbounds i8, i8* %514, i64 %568
  %570 = bitcast i8* %569 to i32*
  %571 = load i32, i32* %570, align 1
  %572 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %571) #6, !srcloc !2
  %573 = and i32 %564, 7
  %574 = shl i32 %572, %573
  %575 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %574) #6, !srcloc !3
  %576 = zext i32 %575 to i64
  %577 = getelementptr inbounds [2 x i16], [2 x i16]* %566, i64 %576, i64 0
  %578 = load i16, i16* %577, align 2
  %579 = sext i16 %578 to i32
  %580 = getelementptr inbounds [2 x i16], [2 x i16]* %566, i64 %576, i64 1
  %581 = load i16, i16* %580, align 2
  %582 = icmp slt i16 %581, 0
  br i1 %582, label %583, label %604

583:                                              ; preds = %563
  %584 = add i32 %564, 6
  %585 = icmp ugt i32 %524, %584
  %586 = select i1 %585, i32 %584, i32 %524
  %587 = lshr i32 %586, 3
  %588 = zext i32 %587 to i64
  %589 = getelementptr inbounds i8, i8* %514, i64 %588
  %590 = bitcast i8* %589 to i32*
  %591 = load i32, i32* %590, align 1
  %592 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %591) #6, !srcloc !2
  %593 = and i32 %586, 7
  %594 = shl i32 %592, %593
  %595 = trunc i16 %581 to i8
  %596 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %595, i32 %594) #6, !srcloc !3
  %597 = add i32 %596, %579
  %598 = zext i32 %597 to i64
  %599 = getelementptr inbounds [2 x i16], [2 x i16]* %566, i64 %598, i64 0
  %600 = load i16, i16* %599, align 2
  %601 = sext i16 %600 to i32
  %602 = getelementptr inbounds [2 x i16], [2 x i16]* %566, i64 %598, i64 1
  %603 = load i16, i16* %602, align 2
  br label %604

604:                                              ; preds = %583, %563
  %605 = phi i32 [ %601, %583 ], [ %579, %563 ]
  %606 = phi i32 [ %586, %583 ], [ %564, %563 ]
  %607 = phi i16 [ %603, %583 ], [ %581, %563 ]
  %608 = sext i16 %607 to i32
  %609 = add i32 %606, %608
  %610 = icmp ugt i32 %524, %609
  %611 = select i1 %610, i32 %609, i32 %524
  store i32 %611, i32* %38, align 8
  %612 = icmp eq i32 %605, 34
  br i1 %612, label %613, label %627

613:                                              ; preds = %604
  %614 = lshr i32 %611, 3
  %615 = zext i32 %614 to i64
  %616 = getelementptr inbounds i8, i8* %514, i64 %615
  %617 = bitcast i8* %616 to i32*
  %618 = load i32, i32* %617, align 1
  %619 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %618) #6, !srcloc !2
  %620 = and i32 %611, 7
  %621 = shl i32 %619, %620
  %622 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -12, i32 %621) #6, !srcloc !3
  %623 = add i32 %611, 12
  %624 = icmp ugt i32 %524, %623
  %625 = select i1 %624, i32 %623, i32 %524
  store i32 %625, i32* %38, align 8
  %626 = add i32 %622, 34
  br label %627

627:                                              ; preds = %613, %604
  %628 = phi i32 [ %625, %613 ], [ %611, %604 ]
  %629 = phi i32 [ %626, %613 ], [ %605, %604 ]
  %630 = sub nsw i32 %538, %540
  %631 = icmp sgt i32 %629, %630
  br i1 %631, label %632, label %635

632:                                              ; preds = %627
  %633 = bitcast %struct.Vp3DecodeContext* %19 to i8**
  %634 = load i8*, i8** %633, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %634, i32 16, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.33, i64 0, i64 0)) #5
  br label %1063

635:                                              ; preds = %627
  %636 = load i8*, i8** %534, align 16
  %637 = sext i32 %540 to i64
  %638 = getelementptr inbounds i8, i8* %636, i64 %637
  %639 = trunc i32 %565 to i8
  %640 = sext i32 %629 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %638, i8 %639, i64 %640, i1 false) #5
  %641 = add nsw i32 %629, %540
  %642 = icmp eq i32 %565, 0
  %643 = select i1 %642, i32 0, i32 %629
  %644 = add nsw i32 %643, %542
  %645 = load i32, i32* %529, align 8
  %646 = icmp slt i32 %641, %645
  %647 = icmp sgt i32 %535, %628
  %648 = and i1 %646, %647
  br i1 %648, label %537, label %649

649:                                              ; preds = %635, %532, %512
  %650 = phi i32 [ %527, %512 ], [ %527, %532 ], [ %628, %635 ]
  %651 = phi i32 [ %528, %512 ], [ %528, %532 ], [ %565, %635 ]
  %652 = phi i32 [ 0, %512 ], [ 0, %532 ], [ %629, %635 ]
  %653 = phi i32 [ 0, %512 ], [ 0, %532 ], [ %644, %635 ]
  %654 = phi i32 [ %530, %512 ], [ %530, %532 ], [ %645, %635 ]
  %655 = icmp slt i32 %653, %654
  br i1 %655, label %656, label %812

656:                                              ; preds = %649
  %657 = lshr i32 %650, 3
  %658 = zext i32 %657 to i64
  %659 = getelementptr inbounds i8, i8* %514, i64 %658
  %660 = load i8, i8* %659, align 1
  %661 = and i32 %650, 7
  %662 = zext i8 %660 to i32
  %663 = shl i32 %662, %661
  %664 = lshr i32 %663, 7
  %665 = and i32 %664, 1
  %666 = icmp slt i32 %650, %524
  %667 = zext i1 %666 to i32
  %668 = add i32 %650, %667
  store i32 %668, i32* %38, align 8
  %669 = xor i32 %665, 1
  %670 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 67, i32 1
  %671 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 34
  %672 = load i32, i32* %32, align 4
  %673 = icmp sgt i32 %672, %668
  br i1 %673, label %674, label %812

674:                                              ; preds = %656, %805
  %675 = phi i32 [ %800, %805 ], [ %654, %656 ]
  %676 = phi i32 [ %708, %805 ], [ %669, %656 ]
  %677 = phi i32 [ %801, %805 ], [ 0, %656 ]
  %678 = phi i32 [ %771, %805 ], [ 0, %656 ]
  %679 = phi i32 [ %802, %805 ], [ 0, %656 ]
  %680 = phi i32 [ %806, %805 ], [ %668, %656 ]
  %681 = load i32, i32* %40, align 8
  %682 = icmp ne i32 %681, 0
  %683 = icmp eq i32 %678, 4129
  %684 = and i1 %683, %682
  br i1 %684, label %685, label %700

685:                                              ; preds = %674
  %686 = load i8*, i8** %31, align 8
  %687 = lshr i32 %680, 3
  %688 = zext i32 %687 to i64
  %689 = getelementptr inbounds i8, i8* %686, i64 %688
  %690 = load i8, i8* %689, align 1
  %691 = and i32 %680, 7
  %692 = zext i8 %690 to i32
  %693 = shl i32 %692, %691
  %694 = lshr i32 %693, 7
  %695 = and i32 %694, 1
  %696 = load i32, i32* %34, align 8
  %697 = icmp slt i32 %680, %696
  %698 = zext i1 %697 to i32
  %699 = add nsw i32 %680, %698
  store i32 %699, i32* %38, align 8
  br label %704

700:                                              ; preds = %674
  %701 = xor i32 %676, 1
  %702 = load i32, i32* %34, align 8
  %703 = load i8*, i8** %31, align 8
  br label %704

704:                                              ; preds = %700, %685
  %705 = phi i8* [ %686, %685 ], [ %703, %700 ]
  %706 = phi i32 [ %696, %685 ], [ %702, %700 ]
  %707 = phi i32 [ %699, %685 ], [ %680, %700 ]
  %708 = phi i32 [ %695, %685 ], [ %701, %700 ]
  %709 = load [2 x i16]*, [2 x i16]** %670, align 8
  %710 = lshr i32 %707, 3
  %711 = zext i32 %710 to i64
  %712 = getelementptr inbounds i8, i8* %705, i64 %711
  %713 = bitcast i8* %712 to i32*
  %714 = load i32, i32* %713, align 1
  %715 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %714) #6, !srcloc !2
  %716 = and i32 %707, 7
  %717 = shl i32 %715, %716
  %718 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %717) #6, !srcloc !3
  %719 = zext i32 %718 to i64
  %720 = getelementptr inbounds [2 x i16], [2 x i16]* %709, i64 %719, i64 0
  %721 = load i16, i16* %720, align 2
  %722 = sext i16 %721 to i32
  %723 = getelementptr inbounds [2 x i16], [2 x i16]* %709, i64 %719, i64 1
  %724 = load i16, i16* %723, align 2
  %725 = icmp slt i16 %724, 0
  br i1 %725, label %726, label %747

726:                                              ; preds = %704
  %727 = add i32 %707, 6
  %728 = icmp ugt i32 %706, %727
  %729 = select i1 %728, i32 %727, i32 %706
  %730 = lshr i32 %729, 3
  %731 = zext i32 %730 to i64
  %732 = getelementptr inbounds i8, i8* %705, i64 %731
  %733 = bitcast i8* %732 to i32*
  %734 = load i32, i32* %733, align 1
  %735 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %734) #6, !srcloc !2
  %736 = and i32 %729, 7
  %737 = shl i32 %735, %736
  %738 = trunc i16 %724 to i8
  %739 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %738, i32 %737) #6, !srcloc !3
  %740 = add i32 %739, %722
  %741 = zext i32 %740 to i64
  %742 = getelementptr inbounds [2 x i16], [2 x i16]* %709, i64 %741, i64 0
  %743 = load i16, i16* %742, align 2
  %744 = sext i16 %743 to i32
  %745 = getelementptr inbounds [2 x i16], [2 x i16]* %709, i64 %741, i64 1
  %746 = load i16, i16* %745, align 2
  br label %747

747:                                              ; preds = %726, %704
  %748 = phi i32 [ %744, %726 ], [ %722, %704 ]
  %749 = phi i32 [ %729, %726 ], [ %707, %704 ]
  %750 = phi i16 [ %746, %726 ], [ %724, %704 ]
  %751 = sext i16 %750 to i32
  %752 = add i32 %749, %751
  %753 = icmp ugt i32 %706, %752
  %754 = select i1 %753, i32 %752, i32 %706
  store i32 %754, i32* %38, align 8
  %755 = icmp eq i32 %748, 34
  br i1 %755, label %756, label %770

756:                                              ; preds = %747
  %757 = lshr i32 %754, 3
  %758 = zext i32 %757 to i64
  %759 = getelementptr inbounds i8, i8* %705, i64 %758
  %760 = bitcast i8* %759 to i32*
  %761 = load i32, i32* %760, align 1
  %762 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %761) #6, !srcloc !2
  %763 = and i32 %754, 7
  %764 = shl i32 %762, %763
  %765 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -12, i32 %764) #6, !srcloc !3
  %766 = add i32 %754, 12
  %767 = icmp ugt i32 %706, %766
  %768 = select i1 %767, i32 %766, i32 %706
  store i32 %768, i32* %38, align 8
  %769 = add i32 %765, 34
  br label %770

770:                                              ; preds = %756, %747
  %771 = phi i32 [ %769, %756 ], [ %748, %747 ]
  %772 = icmp sgt i32 %771, 0
  br i1 %772, label %773, label %799

773:                                              ; preds = %770
  %774 = trunc i32 %708 to i8
  %775 = shl i8 %774, 1
  %776 = icmp slt i32 %677, %675
  br i1 %776, label %777, label %809

777:                                              ; preds = %773
  %778 = sext i32 %677 to i64
  br label %779

779:                                              ; preds = %777, %792
  %780 = phi i32 [ 0, %777 ], [ %789, %792 ]
  %781 = phi i64 [ %778, %777 ], [ %790, %792 ]
  %782 = load i8*, i8** %671, align 16
  %783 = getelementptr inbounds i8, i8* %782, i64 %781
  %784 = load i8, i8* %783, align 1
  %785 = icmp eq i8 %784, 0
  br i1 %785, label %786, label %788

786:                                              ; preds = %779
  store i8 %775, i8* %783, align 1
  %787 = add nsw i32 %780, 1
  br label %788

788:                                              ; preds = %786, %779
  %789 = phi i32 [ %787, %786 ], [ %780, %779 ]
  %790 = add nsw i64 %781, 1
  %791 = icmp slt i32 %789, %771
  br i1 %791, label %792, label %796

792:                                              ; preds = %788
  %793 = load i32, i32* %529, align 8
  %794 = sext i32 %793 to i64
  %795 = icmp slt i64 %790, %794
  br i1 %795, label %779, label %809

796:                                              ; preds = %788
  %797 = trunc i64 %790 to i32
  %798 = load i32, i32* %529, align 8
  br label %799

799:                                              ; preds = %796, %770
  %800 = phi i32 [ %675, %770 ], [ %798, %796 ]
  %801 = phi i32 [ %677, %770 ], [ %797, %796 ]
  %802 = add nsw i32 %771, %679
  %803 = sub nsw i32 %800, %653
  %804 = icmp slt i32 %802, %803
  br i1 %804, label %805, label %812

805:                                              ; preds = %799
  %806 = load i32, i32* %38, align 8
  %807 = load i32, i32* %32, align 4
  %808 = icmp sgt i32 %807, %806
  br i1 %808, label %674, label %812

809:                                              ; preds = %773, %792
  %810 = bitcast %struct.Vp3DecodeContext* %19 to i8**
  %811 = load i8*, i8** %810, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %811, i32 16, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.34, i64 0, i64 0)) #5
  br label %1063

812:                                              ; preds = %805, %799, %656, %649
  %813 = phi i32 [ %651, %649 ], [ %669, %656 ], [ %708, %799 ], [ %708, %805 ]
  %814 = phi i32 [ %652, %649 ], [ 0, %656 ], [ %771, %799 ], [ %771, %805 ]
  %815 = icmp eq i32 %653, 0
  br i1 %815, label %833, label %816

816:                                              ; preds = %812
  %817 = load i32, i32* %38, align 8
  %818 = load i8*, i8** %31, align 8
  %819 = lshr i32 %817, 3
  %820 = zext i32 %819 to i64
  %821 = getelementptr inbounds i8, i8* %818, i64 %820
  %822 = load i8, i8* %821, align 1
  %823 = and i32 %817, 7
  %824 = zext i8 %822 to i32
  %825 = shl i32 %824, %823
  %826 = lshr i32 %825, 7
  %827 = and i32 %826, 1
  %828 = load i32, i32* %34, align 8
  %829 = icmp slt i32 %817, %828
  %830 = zext i1 %829 to i32
  %831 = add i32 %817, %830
  store i32 %831, i32* %38, align 8
  %832 = xor i32 %827, 1
  br label %833

833:                                              ; preds = %816, %812, %506
  %834 = phi i32 [ 0, %506 ], [ %832, %816 ], [ %813, %812 ]
  %835 = phi i32 [ 0, %506 ], [ 0, %816 ], [ %814, %812 ]
  %836 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 61
  store i32 0, i32* %836, align 16
  %837 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 75
  %838 = load i8*, i8** %837, align 8
  %839 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 35
  %840 = load i32, i32* %839, align 8
  %841 = sext i32 %840 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %838, i8 8, i64 %841, i1 false) #5
  %842 = load i32, i32* %106, align 8
  %843 = icmp eq i32 %842, 0
  %844 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 63
  %845 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 64
  %846 = select i1 %843, i32** %845, i32** %844
  %847 = bitcast i32** %846 to i64*
  %848 = load i64, i64* %847, align 8
  %849 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 62
  %850 = bitcast [3 x i32*]* %849 to i64*
  store i64 %848, i64* %850, align 8
  %851 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 31
  %852 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 28
  %853 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 74
  %854 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 34
  %855 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 68, i32 1
  br label %856

856:                                              ; preds = %1055, %833
  %857 = phi i32 [ %842, %833 ], [ %1059, %1055 ]
  %858 = phi i32 [ 0, %833 ], [ %1058, %1055 ]
  %859 = phi i64 [ 0, %833 ], [ %1056, %1055 ]
  %860 = phi i32 [ 0, %833 ], [ %1043, %1055 ]
  %861 = phi i32 [ %835, %833 ], [ %1027, %1055 ]
  %862 = phi i32 [ %834, %833 ], [ %1026, %1055 ]
  %863 = icmp ne i64 %859, 0
  %864 = select i1 %863, i32* %851, i32* %852
  %865 = load i32, i32* %864, align 4
  %866 = add nsw i32 %865, %858
  %867 = icmp eq i32 %857, 0
  br i1 %867, label %868, label %875

868:                                              ; preds = %856
  %869 = icmp sgt i32 %865, 0
  br i1 %869, label %870, label %1025

870:                                              ; preds = %868
  %871 = ashr i32 %860, 2
  %872 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 62, i64 %859
  %873 = sext i32 %858 to i64
  %874 = sext i32 %866 to i64
  br label %917

875:                                              ; preds = %856
  %876 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 65, i64 %859
  %877 = load i32, i32* %876, align 4
  %878 = icmp eq i32 %877, -1
  br i1 %878, label %879, label %1025

879:                                              ; preds = %875
  %880 = icmp sgt i32 %865, 0
  br i1 %880, label %881, label %915

881:                                              ; preds = %879
  %882 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 62, i64 %859
  %883 = sext i32 %858 to i64
  %884 = sext i32 %866 to i64
  br label %885

885:                                              ; preds = %912, %881
  %886 = phi i64 [ %883, %881 ], [ %913, %912 ]
  %887 = phi i32 [ 0, %881 ], [ %3675, %912 ]
  %888 = trunc i64 %886 to i32
  %889 = shl i32 %888, 4
  %890 = sext i32 %889 to i64
  br label %891

891:                                              ; preds = %3674, %885
  %892 = phi i64 [ 0, %885 ], [ %3676, %3674 ]
  %893 = phi i32 [ %887, %885 ], [ %3675, %3674 ]
  %894 = load i32*, i32** %853, align 16
  %895 = add nuw nsw i64 %892, %890
  %896 = getelementptr inbounds i32, i32* %894, i64 %895
  %897 = load i32, i32* %896, align 4
  %898 = icmp eq i32 %897, -1
  br i1 %898, label %904, label %899

899:                                              ; preds = %891
  %900 = load i32*, i32** %882, align 8
  %901 = add nsw i32 %893, 1
  %902 = sext i32 %893 to i64
  %903 = getelementptr inbounds i32, i32* %900, i64 %902
  store i32 %897, i32* %903, align 4
  br label %904

904:                                              ; preds = %899, %891
  %905 = phi i32 [ %901, %899 ], [ %893, %891 ]
  %906 = or i64 %892, 1
  %907 = load i32*, i32** %853, align 16
  %908 = add nuw nsw i64 %906, %890
  %909 = getelementptr inbounds i32, i32* %907, i64 %908
  %910 = load i32, i32* %909, align 4
  %911 = icmp eq i32 %910, -1
  br i1 %911, label %3674, label %3669

912:                                              ; preds = %3674
  %913 = add nsw i64 %886, 1
  %914 = icmp slt i64 %913, %884
  br i1 %914, label %885, label %915

915:                                              ; preds = %912, %879
  %916 = phi i32 [ 0, %879 ], [ %3675, %912 ]
  store i32 %916, i32* %876, align 4
  br label %1025

917:                                              ; preds = %1022, %870
  %918 = phi i64 [ %873, %870 ], [ %1023, %1022 ]
  %919 = phi i32 [ 0, %870 ], [ %1019, %1022 ]
  %920 = phi i32 [ %861, %870 ], [ %1018, %1022 ]
  %921 = phi i32 [ %862, %870 ], [ %1017, %1022 ]
  %922 = load i32, i32* %32, align 4
  %923 = load i32, i32* %38, align 8
  %924 = sub nsw i32 %922, %923
  %925 = icmp sgt i32 %924, 0
  br i1 %925, label %926, label %1025

926:                                              ; preds = %917
  %927 = icmp slt i32 %924, %871
  br i1 %927, label %1061, label %928

928:                                              ; preds = %926
  %929 = trunc i64 %918 to i32
  %930 = shl i32 %929, 4
  %931 = sext i32 %930 to i64
  br label %932

932:                                              ; preds = %1016, %928
  %933 = phi i64 [ 0, %928 ], [ %1020, %1016 ]
  %934 = phi i32 [ %919, %928 ], [ %1019, %1016 ]
  %935 = phi i32 [ %920, %928 ], [ %1018, %1016 ]
  %936 = phi i32 [ %921, %928 ], [ %1017, %1016 ]
  %937 = load i32*, i32** %853, align 16
  %938 = add nuw nsw i64 %933, %931
  %939 = getelementptr inbounds i32, i32* %937, i64 %938
  %940 = load i32, i32* %939, align 4
  %941 = icmp eq i32 %940, -1
  br i1 %941, label %1016, label %942

942:                                              ; preds = %932
  %943 = load i8*, i8** %854, align 16
  %944 = getelementptr inbounds i8, i8* %943, i64 %918
  %945 = load i8, i8* %944, align 1
  %946 = zext i8 %945 to i32
  %947 = icmp eq i8 %945, 1
  br i1 %947, label %948, label %1002

948:                                              ; preds = %942
  %949 = add nsw i32 %935, -1
  %950 = icmp eq i32 %935, 0
  br i1 %950, label %951, label %1002

951:                                              ; preds = %948
  %952 = xor i32 %936, 1
  %953 = load [2 x i16]*, [2 x i16]** %855, align 8
  %954 = load i32, i32* %38, align 8
  %955 = load i32, i32* %34, align 8
  %956 = load i8*, i8** %31, align 8
  %957 = lshr i32 %954, 3
  %958 = zext i32 %957 to i64
  %959 = getelementptr inbounds i8, i8* %956, i64 %958
  %960 = bitcast i8* %959 to i32*
  %961 = load i32, i32* %960, align 1
  %962 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %961) #6, !srcloc !2
  %963 = and i32 %954, 7
  %964 = shl i32 %962, %963
  %965 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -5, i32 %964) #6, !srcloc !3
  %966 = zext i32 %965 to i64
  %967 = getelementptr inbounds [2 x i16], [2 x i16]* %953, i64 %966, i64 0
  %968 = load i16, i16* %967, align 2
  %969 = sext i16 %968 to i32
  %970 = getelementptr inbounds [2 x i16], [2 x i16]* %953, i64 %966, i64 1
  %971 = load i16, i16* %970, align 2
  %972 = icmp slt i16 %971, 0
  br i1 %972, label %973, label %994

973:                                              ; preds = %951
  %974 = add i32 %954, 5
  %975 = icmp ugt i32 %955, %974
  %976 = select i1 %975, i32 %974, i32 %955
  %977 = lshr i32 %976, 3
  %978 = zext i32 %977 to i64
  %979 = getelementptr inbounds i8, i8* %956, i64 %978
  %980 = bitcast i8* %979 to i32*
  %981 = load i32, i32* %980, align 1
  %982 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %981) #6, !srcloc !2
  %983 = and i32 %976, 7
  %984 = shl i32 %982, %983
  %985 = trunc i16 %971 to i8
  %986 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %985, i32 %984) #6, !srcloc !3
  %987 = add i32 %986, %969
  %988 = zext i32 %987 to i64
  %989 = getelementptr inbounds [2 x i16], [2 x i16]* %953, i64 %988, i64 0
  %990 = load i16, i16* %989, align 2
  %991 = sext i16 %990 to i32
  %992 = getelementptr inbounds [2 x i16], [2 x i16]* %953, i64 %988, i64 1
  %993 = load i16, i16* %992, align 2
  br label %994

994:                                              ; preds = %973, %951
  %995 = phi i32 [ %991, %973 ], [ %969, %951 ]
  %996 = phi i32 [ %976, %973 ], [ %954, %951 ]
  %997 = phi i16 [ %993, %973 ], [ %971, %951 ]
  %998 = sext i16 %997 to i32
  %999 = add i32 %996, %998
  %1000 = icmp ugt i32 %955, %999
  %1001 = select i1 %1000, i32 %999, i32 %955
  store i32 %1001, i32* %38, align 8
  br label %1002

1002:                                             ; preds = %994, %948, %942
  %1003 = phi i32 [ %936, %942 ], [ %952, %994 ], [ %936, %948 ]
  %1004 = phi i32 [ %935, %942 ], [ %995, %994 ], [ %949, %948 ]
  %1005 = phi i32 [ %946, %942 ], [ %952, %994 ], [ %936, %948 ]
  %1006 = icmp eq i32 %1005, 0
  %1007 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %107, align 8
  %1008 = sext i32 %940 to i64
  %1009 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1007, i64 %1008, i32 1
  br i1 %1006, label %1015, label %1010

1010:                                             ; preds = %1002
  store i8 0, i8* %1009, align 2
  %1011 = load i32*, i32** %872, align 8
  %1012 = add nsw i32 %934, 1
  %1013 = sext i32 %934 to i64
  %1014 = getelementptr inbounds i32, i32* %1011, i64 %1013
  store i32 %940, i32* %1014, align 4
  br label %1016

1015:                                             ; preds = %1002
  store i8 8, i8* %1009, align 2
  br label %1016

1016:                                             ; preds = %1015, %1010, %932
  %1017 = phi i32 [ %936, %932 ], [ %1003, %1015 ], [ %1003, %1010 ]
  %1018 = phi i32 [ %935, %932 ], [ %1004, %1015 ], [ %1004, %1010 ]
  %1019 = phi i32 [ %934, %932 ], [ %934, %1015 ], [ %1012, %1010 ]
  %1020 = add nuw nsw i64 %933, 1
  %1021 = icmp eq i64 %1020, 16
  br i1 %1021, label %1022, label %932

1022:                                             ; preds = %1016
  %1023 = add nsw i64 %918, 1
  %1024 = icmp slt i64 %1023, %874
  br i1 %1024, label %917, label %1025

1025:                                             ; preds = %1022, %917, %915, %875, %868
  %1026 = phi i32 [ %862, %915 ], [ %862, %875 ], [ %862, %868 ], [ %921, %917 ], [ %1017, %1022 ]
  %1027 = phi i32 [ %861, %915 ], [ %861, %875 ], [ %861, %868 ], [ %920, %917 ], [ %1018, %1022 ]
  %1028 = phi i32 [ %916, %915 ], [ %877, %875 ], [ 0, %868 ], [ %919, %917 ], [ %1019, %1022 ]
  %1029 = load i32, i32* %836, align 16
  %1030 = add nsw i32 %1029, %1028
  store i32 %1030, i32* %836, align 16
  br label %1031

1031:                                             ; preds = %1031, %1025
  %1032 = phi i64 [ 0, %1025 ], [ %1040, %1031 ]
  %1033 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 60, i64 %859, i64 %1032
  store i32 %1028, i32* %1033, align 4
  %1034 = or i64 %1032, 1
  %1035 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 60, i64 %859, i64 %1034
  store i32 %1028, i32* %1035, align 4
  %1036 = or i64 %1032, 2
  %1037 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 60, i64 %859, i64 %1036
  store i32 %1028, i32* %1037, align 4
  %1038 = or i64 %1032, 3
  %1039 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 60, i64 %859, i64 %1038
  store i32 %1028, i32* %1039, align 4
  %1040 = add nuw nsw i64 %1032, 4
  %1041 = icmp eq i64 %1040, 64
  br i1 %1041, label %1042, label %1031

1042:                                             ; preds = %1031
  %1043 = select i1 %863, i32 %860, i32 %1028
  %1044 = icmp ult i64 %859, 2
  br i1 %1044, label %1045, label %1052

1045:                                             ; preds = %1042
  %1046 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 62, i64 %859
  %1047 = load i32*, i32** %1046, align 8
  %1048 = sext i32 %1028 to i64
  %1049 = getelementptr inbounds i32, i32* %1047, i64 %1048
  %1050 = add nuw nsw i64 %859, 1
  %1051 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 62, i64 %1050
  store i32* %1049, i32** %1051, align 8
  br label %1055

1052:                                             ; preds = %1042
  %1053 = add nuw nsw i64 %859, 1
  %1054 = icmp eq i64 %1053, 3
  br i1 %1054, label %1060, label %1055

1055:                                             ; preds = %1052, %1045
  %1056 = phi i64 [ %1050, %1045 ], [ %1053, %1052 ]
  %1057 = getelementptr inbounds [3 x i32], [3 x i32]* %10, i64 0, i64 %1056
  %1058 = load i32, i32* %1057, align 4
  %1059 = load i32, i32* %106, align 8
  br label %856

1060:                                             ; preds = %1052
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %496) #5
  br label %1067

1061:                                             ; preds = %926
  %1062 = bitcast %struct.Vp3DecodeContext* %19 to i8**
  br label %1063

1063:                                             ; preds = %1061, %632, %809
  %1064 = phi i8** [ %1062, %1061 ], [ %633, %632 ], [ %810, %809 ]
  %1065 = phi i32 [ -1094995529, %1061 ], [ -1, %632 ], [ -1, %809 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %496) #5
  %1066 = load i8*, i8** %1064, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1066, i32 16, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.28, i64 0, i64 0)) #5
  br label %3606

1067:                                             ; preds = %1060, %485
  %1068 = bitcast [8 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1068) #5
  %1069 = getelementptr inbounds [8 x i32], [8 x i32]* %9, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1068, i8 -86, i64 32, i1 false) #5
  %1070 = load i32, i32* %106, align 8
  %1071 = icmp eq i32 %1070, 0
  br i1 %1071, label %1083, label %1072

1072:                                             ; preds = %1067
  %1073 = load i32, i32* %488, align 4
  %1074 = icmp sgt i32 %1073, 0
  br i1 %1074, label %1075, label %1621

1075:                                             ; preds = %1072, %1075
  %1076 = phi i64 [ %1079, %1075 ], [ 0, %1072 ]
  %1077 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %107, align 8
  %1078 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1077, i64 %1076, i32 1
  store i8 1, i8* %1078, align 2
  %1079 = add nuw nsw i64 %1076, 1
  %1080 = load i32, i32* %488, align 4
  %1081 = sext i32 %1080 to i64
  %1082 = icmp slt i64 %1079, %1081
  br i1 %1082, label %1075, label %1621

1083:                                             ; preds = %1067
  %1084 = load i32, i32* %38, align 8
  %1085 = load i32, i32* %34, align 8
  %1086 = load i8*, i8** %31, align 8
  %1087 = lshr i32 %1084, 3
  %1088 = zext i32 %1087 to i64
  %1089 = getelementptr inbounds i8, i8* %1086, i64 %1088
  %1090 = bitcast i8* %1089 to i32*
  %1091 = load i32, i32* %1090, align 1
  %1092 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1091) #6, !srcloc !2
  %1093 = and i32 %1084, 7
  %1094 = shl i32 %1092, %1093
  %1095 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -3, i32 %1094) #6, !srcloc !3
  %1096 = add i32 %1084, 3
  %1097 = icmp ugt i32 %1085, %1096
  %1098 = select i1 %1097, i32 %1096, i32 %1085
  store i32 %1098, i32* %38, align 8
  %1099 = icmp eq i32 %1095, 0
  br i1 %1099, label %1100, label %1213

1100:                                             ; preds = %1083
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1068, i8 0, i64 32, i1 false) #5
  %1101 = lshr i32 %1098, 3
  %1102 = zext i32 %1101 to i64
  %1103 = getelementptr inbounds i8, i8* %1086, i64 %1102
  %1104 = bitcast i8* %1103 to i32*
  %1105 = load i32, i32* %1104, align 1
  %1106 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1105) #6, !srcloc !2
  %1107 = and i32 %1098, 7
  %1108 = shl i32 %1106, %1107
  %1109 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -3, i32 %1108) #6, !srcloc !3
  %1110 = add i32 %1098, 3
  %1111 = icmp ugt i32 %1085, %1110
  %1112 = select i1 %1111, i32 %1110, i32 %1085
  store i32 %1112, i32* %38, align 8
  %1113 = zext i32 %1109 to i64
  %1114 = getelementptr inbounds [8 x i32], [8 x i32]* %9, i64 0, i64 %1113
  store i32 0, i32* %1114, align 4
  %1115 = lshr i32 %1112, 3
  %1116 = zext i32 %1115 to i64
  %1117 = getelementptr inbounds i8, i8* %1086, i64 %1116
  %1118 = bitcast i8* %1117 to i32*
  %1119 = load i32, i32* %1118, align 1
  %1120 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1119) #6, !srcloc !2
  %1121 = and i32 %1112, 7
  %1122 = shl i32 %1120, %1121
  %1123 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -3, i32 %1122) #6, !srcloc !3
  %1124 = add i32 %1112, 3
  %1125 = icmp ugt i32 %1085, %1124
  %1126 = select i1 %1125, i32 %1124, i32 %1085
  store i32 %1126, i32* %38, align 8
  %1127 = zext i32 %1123 to i64
  %1128 = getelementptr inbounds [8 x i32], [8 x i32]* %9, i64 0, i64 %1127
  store i32 1, i32* %1128, align 4
  %1129 = lshr i32 %1126, 3
  %1130 = zext i32 %1129 to i64
  %1131 = getelementptr inbounds i8, i8* %1086, i64 %1130
  %1132 = bitcast i8* %1131 to i32*
  %1133 = load i32, i32* %1132, align 1
  %1134 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1133) #6, !srcloc !2
  %1135 = and i32 %1126, 7
  %1136 = shl i32 %1134, %1135
  %1137 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -3, i32 %1136) #6, !srcloc !3
  %1138 = add i32 %1126, 3
  %1139 = icmp ugt i32 %1085, %1138
  %1140 = select i1 %1139, i32 %1138, i32 %1085
  store i32 %1140, i32* %38, align 8
  %1141 = zext i32 %1137 to i64
  %1142 = getelementptr inbounds [8 x i32], [8 x i32]* %9, i64 0, i64 %1141
  store i32 2, i32* %1142, align 4
  %1143 = lshr i32 %1140, 3
  %1144 = zext i32 %1143 to i64
  %1145 = getelementptr inbounds i8, i8* %1086, i64 %1144
  %1146 = bitcast i8* %1145 to i32*
  %1147 = load i32, i32* %1146, align 1
  %1148 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1147) #6, !srcloc !2
  %1149 = and i32 %1140, 7
  %1150 = shl i32 %1148, %1149
  %1151 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -3, i32 %1150) #6, !srcloc !3
  %1152 = add i32 %1140, 3
  %1153 = icmp ugt i32 %1085, %1152
  %1154 = select i1 %1153, i32 %1152, i32 %1085
  store i32 %1154, i32* %38, align 8
  %1155 = zext i32 %1151 to i64
  %1156 = getelementptr inbounds [8 x i32], [8 x i32]* %9, i64 0, i64 %1155
  store i32 3, i32* %1156, align 4
  %1157 = lshr i32 %1154, 3
  %1158 = zext i32 %1157 to i64
  %1159 = getelementptr inbounds i8, i8* %1086, i64 %1158
  %1160 = bitcast i8* %1159 to i32*
  %1161 = load i32, i32* %1160, align 1
  %1162 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1161) #6, !srcloc !2
  %1163 = and i32 %1154, 7
  %1164 = shl i32 %1162, %1163
  %1165 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -3, i32 %1164) #6, !srcloc !3
  %1166 = add i32 %1154, 3
  %1167 = icmp ugt i32 %1085, %1166
  %1168 = select i1 %1167, i32 %1166, i32 %1085
  store i32 %1168, i32* %38, align 8
  %1169 = zext i32 %1165 to i64
  %1170 = getelementptr inbounds [8 x i32], [8 x i32]* %9, i64 0, i64 %1169
  store i32 4, i32* %1170, align 4
  %1171 = lshr i32 %1168, 3
  %1172 = zext i32 %1171 to i64
  %1173 = getelementptr inbounds i8, i8* %1086, i64 %1172
  %1174 = bitcast i8* %1173 to i32*
  %1175 = load i32, i32* %1174, align 1
  %1176 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1175) #6, !srcloc !2
  %1177 = and i32 %1168, 7
  %1178 = shl i32 %1176, %1177
  %1179 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -3, i32 %1178) #6, !srcloc !3
  %1180 = add i32 %1168, 3
  %1181 = icmp ugt i32 %1085, %1180
  %1182 = select i1 %1181, i32 %1180, i32 %1085
  store i32 %1182, i32* %38, align 8
  %1183 = zext i32 %1179 to i64
  %1184 = getelementptr inbounds [8 x i32], [8 x i32]* %9, i64 0, i64 %1183
  store i32 5, i32* %1184, align 4
  %1185 = lshr i32 %1182, 3
  %1186 = zext i32 %1185 to i64
  %1187 = getelementptr inbounds i8, i8* %1086, i64 %1186
  %1188 = bitcast i8* %1187 to i32*
  %1189 = load i32, i32* %1188, align 1
  %1190 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1189) #6, !srcloc !2
  %1191 = and i32 %1182, 7
  %1192 = shl i32 %1190, %1191
  %1193 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -3, i32 %1192) #6, !srcloc !3
  %1194 = add i32 %1182, 3
  %1195 = icmp ugt i32 %1085, %1194
  %1196 = select i1 %1195, i32 %1194, i32 %1085
  store i32 %1196, i32* %38, align 8
  %1197 = zext i32 %1193 to i64
  %1198 = getelementptr inbounds [8 x i32], [8 x i32]* %9, i64 0, i64 %1197
  store i32 6, i32* %1198, align 4
  %1199 = lshr i32 %1196, 3
  %1200 = zext i32 %1199 to i64
  %1201 = getelementptr inbounds i8, i8* %1086, i64 %1200
  %1202 = bitcast i8* %1201 to i32*
  %1203 = load i32, i32* %1202, align 1
  %1204 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1203) #6, !srcloc !2
  %1205 = and i32 %1196, 7
  %1206 = shl i32 %1204, %1205
  %1207 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -3, i32 %1206) #6, !srcloc !3
  %1208 = add i32 %1196, 3
  %1209 = icmp ugt i32 %1085, %1208
  %1210 = select i1 %1209, i32 %1208, i32 %1085
  store i32 %1210, i32* %38, align 8
  %1211 = zext i32 %1207 to i64
  %1212 = getelementptr inbounds [8 x i32], [8 x i32]* %9, i64 0, i64 %1211
  store i32 7, i32* %1212, align 4
  br label %1217

1213:                                             ; preds = %1083
  %1214 = add nsw i32 %1095, -1
  %1215 = sext i32 %1214 to i64
  %1216 = getelementptr inbounds [6 x [8 x i32]], [6 x [8 x i32]]* @ModeAlphabet, i64 0, i64 %1215, i64 0
  br label %1217

1217:                                             ; preds = %1213, %1100
  %1218 = phi i32* [ %1216, %1213 ], [ %1069, %1100 ]
  %1219 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 27
  %1220 = load i32, i32* %1219, align 16
  %1221 = icmp sgt i32 %1220, 0
  br i1 %1221, label %1222, label %1621

1222:                                             ; preds = %1217
  %1223 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 26
  %1224 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 36
  %1225 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 37
  %1226 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 43, i64 0
  %1227 = icmp eq i32 %1095, 7
  %1228 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 70, i32 1
  %1229 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 75
  %1230 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 8
  %1231 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 43, i64 1
  %1232 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 46, i64 1
  %1233 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 46, i64 2
  %1234 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 7
  %1235 = load i32, i32* %1223, align 4
  br label %1236

1236:                                             ; preds = %1507, %1222
  %1237 = phi i32 [ %1220, %1222 ], [ %1508, %1507 ]
  %1238 = phi i32 [ %1235, %1222 ], [ %1509, %1507 ]
  %1239 = phi i32 [ 0, %1222 ], [ %1510, %1507 ]
  %1240 = icmp sgt i32 %1238, 0
  br i1 %1240, label %1241, label %1507

1241:                                             ; preds = %1236
  %1242 = shl nuw nsw i32 %1239, 1
  br label %1243

1243:                                             ; preds = %1501, %1241
  %1244 = phi i32 [ 0, %1241 ], [ %1502, %1501 ]
  %1245 = load i32, i32* %32, align 4
  %1246 = load i32, i32* %38, align 8
  %1247 = icmp sgt i32 %1245, %1246
  br i1 %1247, label %1248, label %1618

1248:                                             ; preds = %1243
  %1249 = shl nuw nsw i32 %1244, 1
  br label %1250

1250:                                             ; preds = %1498, %1248
  %1251 = phi i32 [ 0, %1248 ], [ %1499, %1498 ]
  %1252 = lshr i32 %1251, 1
  %1253 = add nuw nsw i32 %1252, %1249
  %1254 = add nuw nsw i32 %1252, %1251
  %1255 = and i32 %1254, 1
  %1256 = or i32 %1255, %1242
  %1257 = load i32, i32* %1224, align 4
  %1258 = mul nsw i32 %1256, %1257
  %1259 = add nsw i32 %1258, %1253
  %1260 = icmp slt i32 %1253, %1257
  br i1 %1260, label %1261, label %1498

1261:                                             ; preds = %1250
  %1262 = load i32, i32* %1225, align 16
  %1263 = icmp slt i32 %1256, %1262
  br i1 %1263, label %1264, label %1498

1264:                                             ; preds = %1261
  %1265 = shl nuw nsw i32 %1256, 1
  %1266 = load i32, i32* %1226, align 8
  %1267 = shl nuw nsw i32 %1253, 1
  %1268 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %107, align 8
  %1269 = mul nsw i32 %1266, %1265
  %1270 = add nsw i32 %1269, %1267
  %1271 = sext i32 %1270 to i64
  %1272 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1268, i64 %1271, i32 1
  %1273 = load i8, i8* %1272, align 2
  %1274 = icmp eq i8 %1273, 8
  br i1 %1274, label %1275, label %1286

1275:                                             ; preds = %1264
  %1276 = or i32 %1267, 1
  %1277 = add nsw i32 %1269, %1276
  %1278 = sext i32 %1277 to i64
  %1279 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1268, i64 %1278, i32 1
  %1280 = load i8, i8* %1279, align 2
  %1281 = icmp eq i8 %1280, 8
  br i1 %1281, label %1512, label %1286

1282:                                             ; preds = %1520
  %1283 = load i8*, i8** %1229, align 8
  %1284 = sext i32 %1259 to i64
  %1285 = getelementptr inbounds i8, i8* %1283, i64 %1284
  store i8 0, i8* %1285, align 1
  br label %1498

1286:                                             ; preds = %1520, %1512, %1275, %1264
  br i1 %1227, label %1287, label %1303

1287:                                             ; preds = %1286
  %1288 = load i32, i32* %38, align 8
  %1289 = load i32, i32* %34, align 8
  %1290 = load i8*, i8** %31, align 8
  %1291 = lshr i32 %1288, 3
  %1292 = zext i32 %1291 to i64
  %1293 = getelementptr inbounds i8, i8* %1290, i64 %1292
  %1294 = bitcast i8* %1293 to i32*
  %1295 = load i32, i32* %1294, align 1
  %1296 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1295) #6, !srcloc !2
  %1297 = and i32 %1288, 7
  %1298 = shl i32 %1296, %1297
  %1299 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -3, i32 %1298) #6, !srcloc !3
  %1300 = add i32 %1288, 3
  %1301 = icmp ugt i32 %1289, %1300
  %1302 = select i1 %1301, i32 %1300, i32 %1289
  store i32 %1302, i32* %38, align 8
  br label %1380

1303:                                             ; preds = %1286
  %1304 = load [2 x i16]*, [2 x i16]** %1228, align 8
  %1305 = load i32, i32* %38, align 8
  %1306 = load i32, i32* %34, align 8
  %1307 = load i8*, i8** %31, align 8
  %1308 = lshr i32 %1305, 3
  %1309 = zext i32 %1308 to i64
  %1310 = getelementptr inbounds i8, i8* %1307, i64 %1309
  %1311 = bitcast i8* %1310 to i32*
  %1312 = load i32, i32* %1311, align 1
  %1313 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1312) #6, !srcloc !2
  %1314 = and i32 %1305, 7
  %1315 = shl i32 %1313, %1314
  %1316 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -3, i32 %1315) #6, !srcloc !3
  %1317 = zext i32 %1316 to i64
  %1318 = getelementptr inbounds [2 x i16], [2 x i16]* %1304, i64 %1317, i64 0
  %1319 = load i16, i16* %1318, align 2
  %1320 = sext i16 %1319 to i32
  %1321 = getelementptr inbounds [2 x i16], [2 x i16]* %1304, i64 %1317, i64 1
  %1322 = load i16, i16* %1321, align 2
  %1323 = sext i16 %1322 to i32
  %1324 = icmp slt i16 %1322, 0
  br i1 %1324, label %1325, label %1370

1325:                                             ; preds = %1303
  %1326 = add i32 %1305, 3
  %1327 = icmp ugt i32 %1306, %1326
  %1328 = select i1 %1327, i32 %1326, i32 %1306
  %1329 = lshr i32 %1328, 3
  %1330 = zext i32 %1329 to i64
  %1331 = getelementptr inbounds i8, i8* %1307, i64 %1330
  %1332 = bitcast i8* %1331 to i32*
  %1333 = load i32, i32* %1332, align 1
  %1334 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1333) #6, !srcloc !2
  %1335 = and i32 %1328, 7
  %1336 = shl i32 %1334, %1335
  %1337 = trunc i16 %1322 to i8
  %1338 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %1337, i32 %1336) #6, !srcloc !3
  %1339 = add i32 %1338, %1320
  %1340 = zext i32 %1339 to i64
  %1341 = getelementptr inbounds [2 x i16], [2 x i16]* %1304, i64 %1340, i64 0
  %1342 = load i16, i16* %1341, align 2
  %1343 = sext i16 %1342 to i32
  %1344 = getelementptr inbounds [2 x i16], [2 x i16]* %1304, i64 %1340, i64 1
  %1345 = load i16, i16* %1344, align 2
  %1346 = sext i16 %1345 to i32
  %1347 = icmp slt i16 %1345, 0
  br i1 %1347, label %1348, label %1370

1348:                                             ; preds = %1325
  %1349 = sub i32 %1328, %1323
  %1350 = icmp ugt i32 %1306, %1349
  %1351 = select i1 %1350, i32 %1349, i32 %1306
  %1352 = lshr i32 %1351, 3
  %1353 = zext i32 %1352 to i64
  %1354 = getelementptr inbounds i8, i8* %1307, i64 %1353
  %1355 = bitcast i8* %1354 to i32*
  %1356 = load i32, i32* %1355, align 1
  %1357 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1356) #6, !srcloc !2
  %1358 = and i32 %1351, 7
  %1359 = shl i32 %1357, %1358
  %1360 = trunc i16 %1345 to i8
  %1361 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %1360, i32 %1359) #6, !srcloc !3
  %1362 = add i32 %1361, %1343
  %1363 = zext i32 %1362 to i64
  %1364 = getelementptr inbounds [2 x i16], [2 x i16]* %1304, i64 %1363, i64 0
  %1365 = load i16, i16* %1364, align 2
  %1366 = sext i16 %1365 to i32
  %1367 = getelementptr inbounds [2 x i16], [2 x i16]* %1304, i64 %1363, i64 1
  %1368 = load i16, i16* %1367, align 2
  %1369 = sext i16 %1368 to i32
  br label %1370

1370:                                             ; preds = %1348, %1325, %1303
  %1371 = phi i32 [ %1366, %1348 ], [ %1343, %1325 ], [ %1320, %1303 ]
  %1372 = phi i32 [ %1351, %1348 ], [ %1328, %1325 ], [ %1305, %1303 ]
  %1373 = phi i32 [ %1369, %1348 ], [ %1346, %1325 ], [ %1323, %1303 ]
  %1374 = add i32 %1373, %1372
  %1375 = icmp ugt i32 %1306, %1374
  %1376 = select i1 %1375, i32 %1374, i32 %1306
  store i32 %1376, i32* %38, align 8
  %1377 = sext i32 %1371 to i64
  %1378 = getelementptr inbounds i32, i32* %1218, i64 %1377
  %1379 = load i32, i32* %1378, align 4
  br label %1380

1380:                                             ; preds = %1370, %1287
  %1381 = phi i32 [ %1299, %1287 ], [ %1379, %1370 ]
  %1382 = trunc i32 %1381 to i8
  %1383 = load i8*, i8** %1229, align 8
  %1384 = sext i32 %1259 to i64
  %1385 = getelementptr inbounds i8, i8* %1383, i64 %1384
  store i8 %1382, i8* %1385, align 1
  %1386 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %107, align 8
  %1387 = load i32, i32* %1226, align 8
  %1388 = mul nsw i32 %1387, %1265
  %1389 = sext i32 %1388 to i64
  %1390 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1386, i64 %1389
  %1391 = zext i32 %1267 to i64
  %1392 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1390, i64 %1391
  %1393 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1392, i64 0, i32 1
  %1394 = load i8, i8* %1393, align 2
  %1395 = icmp eq i8 %1394, 8
  br i1 %1395, label %1401, label %1396

1396:                                             ; preds = %1380
  store i8 %1382, i8* %1393, align 2
  %1397 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %107, align 8
  %1398 = load i32, i32* %1226, align 8
  %1399 = mul nsw i32 %1398, %1265
  %1400 = sext i32 %1399 to i64
  br label %1401

1401:                                             ; preds = %1396, %1380
  %1402 = phi i64 [ %1389, %1380 ], [ %1400, %1396 ]
  %1403 = phi i32 [ %1387, %1380 ], [ %1398, %1396 ]
  %1404 = phi %struct.Vp3Fragment* [ %1386, %1380 ], [ %1397, %1396 ]
  %1405 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1404, i64 %1402
  %1406 = or i32 %1267, 1
  %1407 = zext i32 %1406 to i64
  %1408 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1405, i64 %1407
  %1409 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1408, i64 0, i32 1
  %1410 = load i8, i8* %1409, align 2
  %1411 = icmp eq i8 %1410, 8
  br i1 %1411, label %1529, label %1526

1412:                                             ; preds = %1554
  %1413 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %107, align 8
  %1414 = load i32, i32* %1231, align 4
  %1415 = mul nsw i32 %1414, %1256
  %1416 = sext i32 %1415 to i64
  %1417 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1413, i64 %1416
  %1418 = zext i32 %1253 to i64
  %1419 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1417, i64 %1418
  %1420 = load i32, i32* %1232, align 4
  %1421 = sext i32 %1420 to i64
  %1422 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1419, i64 %1421
  %1423 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1422, i64 0, i32 1
  %1424 = load i8, i8* %1423, align 2
  %1425 = icmp eq i8 %1424, 8
  br i1 %1425, label %1427, label %1426

1426:                                             ; preds = %1412
  store i8 %1382, i8* %1423, align 2
  br label %1427

1427:                                             ; preds = %1426, %1412
  %1428 = load i32, i32* %1233, align 8
  %1429 = sext i32 %1428 to i64
  %1430 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1419, i64 %1429
  %1431 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1430, i64 0, i32 1
  %1432 = load i8, i8* %1431, align 2
  %1433 = icmp eq i8 %1432, 8
  br i1 %1433, label %1498, label %1434

1434:                                             ; preds = %1427
  store i8 %1382, i8* %1431, align 2
  br label %1498

1435:                                             ; preds = %1554
  %1436 = load i32, i32* %1234, align 16
  %1437 = icmp eq i32 %1436, 0
  %1438 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %107, align 8
  %1439 = load i32, i32* %1231, align 4
  %1440 = mul nsw i32 %1439, %1265
  %1441 = sext i32 %1440 to i64
  %1442 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1438, i64 %1441
  br i1 %1437, label %1443, label %1451

1443:                                             ; preds = %1435
  %1444 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1442, i64 %1391
  %1445 = load i32, i32* %1232, align 4
  %1446 = sext i32 %1445 to i64
  %1447 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1444, i64 %1446
  %1448 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1447, i64 0, i32 1
  %1449 = load i8, i8* %1448, align 2
  %1450 = icmp eq i8 %1449, 8
  br i1 %1450, label %1477, label %1476

1451:                                             ; preds = %1435
  %1452 = zext i32 %1253 to i64
  %1453 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1442, i64 %1452
  %1454 = load i32, i32* %1232, align 4
  %1455 = sext i32 %1454 to i64
  %1456 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1453, i64 %1455, i32 1
  %1457 = load i8, i8* %1456, align 2
  %1458 = icmp eq i8 %1457, 8
  br i1 %1458, label %1460, label %1459

1459:                                             ; preds = %1451
  store i8 %1382, i8* %1456, align 2
  br label %1460

1460:                                             ; preds = %1459, %1451
  %1461 = load i32, i32* %1233, align 8
  %1462 = sext i32 %1461 to i64
  %1463 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1453, i64 %1462, i32 1
  %1464 = load i8, i8* %1463, align 2
  %1465 = icmp eq i8 %1464, 8
  br i1 %1465, label %1467, label %1466

1466:                                             ; preds = %1460
  store i8 %1382, i8* %1463, align 2
  br label %1467

1467:                                             ; preds = %1466, %1460
  %1468 = load i32, i32* %1231, align 4
  %1469 = sext i32 %1468 to i64
  %1470 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1453, i64 %1469
  %1471 = load i32, i32* %1232, align 4
  %1472 = sext i32 %1471 to i64
  %1473 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1470, i64 %1472, i32 1
  %1474 = load i8, i8* %1473, align 2
  %1475 = icmp eq i8 %1474, 8
  br i1 %1475, label %1558, label %1557

1476:                                             ; preds = %1443
  store i8 %1382, i8* %1448, align 2
  br label %1477

1477:                                             ; preds = %1476, %1443
  %1478 = load i32, i32* %1233, align 8
  %1479 = sext i32 %1478 to i64
  %1480 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1444, i64 %1479
  %1481 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1480, i64 0, i32 1
  %1482 = load i8, i8* %1481, align 2
  %1483 = icmp eq i8 %1482, 8
  br i1 %1483, label %1485, label %1484

1484:                                             ; preds = %1477
  store i8 %1382, i8* %1481, align 2
  br label %1485

1485:                                             ; preds = %1484, %1477
  %1486 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %107, align 8
  %1487 = load i32, i32* %1231, align 4
  %1488 = mul nsw i32 %1487, %1265
  %1489 = sext i32 %1488 to i64
  %1490 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1486, i64 %1489
  %1491 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1490, i64 %1407
  %1492 = load i32, i32* %1232, align 4
  %1493 = sext i32 %1492 to i64
  %1494 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1491, i64 %1493
  %1495 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1494, i64 0, i32 1
  %1496 = load i8, i8* %1495, align 2
  %1497 = icmp eq i8 %1496, 8
  br i1 %1497, label %1566, label %1565

1498:                                             ; preds = %1617, %1610, %1564, %1558, %1434, %1427, %1282, %1261, %1250
  %1499 = add nuw nsw i32 %1251, 1
  %1500 = icmp eq i32 %1499, 4
  br i1 %1500, label %1501, label %1250

1501:                                             ; preds = %1498
  %1502 = add nuw nsw i32 %1244, 1
  %1503 = load i32, i32* %1223, align 4
  %1504 = icmp slt i32 %1502, %1503
  br i1 %1504, label %1243, label %1505

1505:                                             ; preds = %1501
  %1506 = load i32, i32* %1219, align 16
  br label %1507

1507:                                             ; preds = %1505, %1236
  %1508 = phi i32 [ %1506, %1505 ], [ %1237, %1236 ]
  %1509 = phi i32 [ %1503, %1505 ], [ %1238, %1236 ]
  %1510 = add nuw nsw i32 %1239, 1
  %1511 = icmp slt i32 %1510, %1508
  br i1 %1511, label %1236, label %1621

1512:                                             ; preds = %1275
  %1513 = or i32 %1265, 1
  %1514 = mul nsw i32 %1266, %1513
  %1515 = add nsw i32 %1514, %1267
  %1516 = sext i32 %1515 to i64
  %1517 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1268, i64 %1516, i32 1
  %1518 = load i8, i8* %1517, align 2
  %1519 = icmp eq i8 %1518, 8
  br i1 %1519, label %1520, label %1286

1520:                                             ; preds = %1512
  %1521 = add nsw i32 %1514, %1276
  %1522 = sext i32 %1521 to i64
  %1523 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1268, i64 %1522, i32 1
  %1524 = load i8, i8* %1523, align 2
  %1525 = icmp eq i8 %1524, 8
  br i1 %1525, label %1282, label %1286

1526:                                             ; preds = %1401
  store i8 %1382, i8* %1409, align 2
  %1527 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %107, align 8
  %1528 = load i32, i32* %1226, align 8
  br label %1529

1529:                                             ; preds = %1526, %1401
  %1530 = phi i32 [ %1528, %1526 ], [ %1403, %1401 ]
  %1531 = phi %struct.Vp3Fragment* [ %1527, %1526 ], [ %1404, %1401 ]
  %1532 = or i32 %1265, 1
  %1533 = mul nsw i32 %1530, %1532
  %1534 = sext i32 %1533 to i64
  %1535 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1531, i64 %1534
  %1536 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1535, i64 %1391
  %1537 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1536, i64 0, i32 1
  %1538 = load i8, i8* %1537, align 2
  %1539 = icmp eq i8 %1538, 8
  br i1 %1539, label %1545, label %1540

1540:                                             ; preds = %1529
  store i8 %1382, i8* %1537, align 2
  %1541 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %107, align 8
  %1542 = load i32, i32* %1226, align 8
  %1543 = mul nsw i32 %1542, %1532
  %1544 = sext i32 %1543 to i64
  br label %1545

1545:                                             ; preds = %1540, %1529
  %1546 = phi i64 [ %1544, %1540 ], [ %1534, %1529 ]
  %1547 = phi %struct.Vp3Fragment* [ %1541, %1540 ], [ %1531, %1529 ]
  %1548 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1547, i64 %1546
  %1549 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1548, i64 %1407
  %1550 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1549, i64 0, i32 1
  %1551 = load i8, i8* %1550, align 2
  %1552 = icmp eq i8 %1551, 8
  br i1 %1552, label %1554, label %1553

1553:                                             ; preds = %1545
  store i8 %1382, i8* %1550, align 2
  br label %1554

1554:                                             ; preds = %1553, %1545
  %1555 = load i32, i32* %1230, align 4
  %1556 = icmp eq i32 %1555, 0
  br i1 %1556, label %1435, label %1412

1557:                                             ; preds = %1467
  store i8 %1382, i8* %1473, align 2
  br label %1558

1558:                                             ; preds = %1557, %1467
  %1559 = load i32, i32* %1233, align 8
  %1560 = sext i32 %1559 to i64
  %1561 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1470, i64 %1560, i32 1
  %1562 = load i8, i8* %1561, align 2
  %1563 = icmp eq i8 %1562, 8
  br i1 %1563, label %1498, label %1564

1564:                                             ; preds = %1558
  store i8 %1382, i8* %1561, align 2
  br label %1498

1565:                                             ; preds = %1485
  store i8 %1382, i8* %1495, align 2
  br label %1566

1566:                                             ; preds = %1565, %1485
  %1567 = load i32, i32* %1233, align 8
  %1568 = sext i32 %1567 to i64
  %1569 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1491, i64 %1568
  %1570 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1569, i64 0, i32 1
  %1571 = load i8, i8* %1570, align 2
  %1572 = icmp eq i8 %1571, 8
  br i1 %1572, label %1574, label %1573

1573:                                             ; preds = %1566
  store i8 %1382, i8* %1570, align 2
  br label %1574

1574:                                             ; preds = %1573, %1566
  %1575 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %107, align 8
  %1576 = load i32, i32* %1231, align 4
  %1577 = mul nsw i32 %1576, %1532
  %1578 = sext i32 %1577 to i64
  %1579 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1575, i64 %1578
  %1580 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1579, i64 %1391
  %1581 = load i32, i32* %1232, align 4
  %1582 = sext i32 %1581 to i64
  %1583 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1580, i64 %1582
  %1584 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1583, i64 0, i32 1
  %1585 = load i8, i8* %1584, align 2
  %1586 = icmp eq i8 %1585, 8
  br i1 %1586, label %1588, label %1587

1587:                                             ; preds = %1574
  store i8 %1382, i8* %1584, align 2
  br label %1588

1588:                                             ; preds = %1587, %1574
  %1589 = load i32, i32* %1233, align 8
  %1590 = sext i32 %1589 to i64
  %1591 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1580, i64 %1590
  %1592 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1591, i64 0, i32 1
  %1593 = load i8, i8* %1592, align 2
  %1594 = icmp eq i8 %1593, 8
  br i1 %1594, label %1596, label %1595

1595:                                             ; preds = %1588
  store i8 %1382, i8* %1592, align 2
  br label %1596

1596:                                             ; preds = %1595, %1588
  %1597 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %107, align 8
  %1598 = load i32, i32* %1231, align 4
  %1599 = mul nsw i32 %1598, %1532
  %1600 = sext i32 %1599 to i64
  %1601 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1597, i64 %1600
  %1602 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1601, i64 %1407
  %1603 = load i32, i32* %1232, align 4
  %1604 = sext i32 %1603 to i64
  %1605 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1602, i64 %1604
  %1606 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1605, i64 0, i32 1
  %1607 = load i8, i8* %1606, align 2
  %1608 = icmp eq i8 %1607, 8
  br i1 %1608, label %1610, label %1609

1609:                                             ; preds = %1596
  store i8 %1382, i8* %1606, align 2
  br label %1610

1610:                                             ; preds = %1609, %1596
  %1611 = load i32, i32* %1233, align 8
  %1612 = sext i32 %1611 to i64
  %1613 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1602, i64 %1612
  %1614 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1613, i64 0, i32 1
  %1615 = load i8, i8* %1614, align 2
  %1616 = icmp eq i8 %1615, 8
  br i1 %1616, label %1498, label %1617

1617:                                             ; preds = %1610
  store i8 %1382, i8* %1614, align 2
  br label %1498

1618:                                             ; preds = %1243
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1068) #5
  %1619 = bitcast %struct.Vp3DecodeContext* %19 to i8**
  %1620 = load i8*, i8** %1619, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %1620, i32 16, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.29, i64 0, i64 0)) #5
  br label %3606

1621:                                             ; preds = %1075, %1507, %1217, %1072
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1068) #5
  %1622 = bitcast [4 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1622) #5
  %1623 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 0
  %1624 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 1
  %1625 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 2
  %1626 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 3
  %1627 = bitcast [4 x i32]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1622, i8 -86, i64 16, i1 false) #5
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1627) #5
  %1628 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 0
  %1629 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 1
  %1630 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 2
  %1631 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1627, i8 -86, i64 16, i1 false) #5
  %1632 = load i32, i32* %106, align 8
  %1633 = icmp eq i32 %1632, 0
  br i1 %1633, label %1634, label %2711

1634:                                             ; preds = %1621
  %1635 = load i32, i32* %492, align 4
  %1636 = icmp slt i32 %1635, 2
  br i1 %1636, label %1637, label %1653

1637:                                             ; preds = %1634
  %1638 = load i32, i32* %38, align 8
  %1639 = load i8*, i8** %31, align 8
  %1640 = lshr i32 %1638, 3
  %1641 = zext i32 %1640 to i64
  %1642 = getelementptr inbounds i8, i8* %1639, i64 %1641
  %1643 = load i8, i8* %1642, align 1
  %1644 = and i32 %1638, 7
  %1645 = zext i8 %1643 to i32
  %1646 = shl i32 %1645, %1644
  %1647 = lshr i32 %1646, 7
  %1648 = and i32 %1647, 1
  %1649 = load i32, i32* %34, align 8
  %1650 = icmp slt i32 %1638, %1649
  %1651 = zext i1 %1650 to i32
  %1652 = add i32 %1638, %1651
  store i32 %1652, i32* %38, align 8
  br label %1653

1653:                                             ; preds = %1637, %1634
  %1654 = phi i32 [ %1648, %1637 ], [ 2, %1634 ]
  %1655 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 27
  %1656 = load i32, i32* %1655, align 16
  %1657 = icmp sgt i32 %1656, 0
  br i1 %1657, label %1658, label %2711

1658:                                             ; preds = %1653
  %1659 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 26
  %1660 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 36
  %1661 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 37
  %1662 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 75
  %1663 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 43, i64 0
  %1664 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 71, i32 1
  %1665 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 51, i64 0
  %1666 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 8
  %1667 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 43, i64 1
  %1668 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 51, i64 1
  %1669 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 7
  %1670 = load i32, i32* %1659, align 4
  br label %1671

1671:                                             ; preds = %2565, %1658
  %1672 = phi i32 [ %1656, %1658 ], [ %2566, %2565 ]
  %1673 = phi i32 [ %1670, %1658 ], [ %2567, %2565 ]
  %1674 = phi i32 [ 0, %1658 ], [ %2573, %2565 ]
  %1675 = phi i32 [ 0, %1658 ], [ %2572, %2565 ]
  %1676 = phi i32 [ 0, %1658 ], [ %2571, %2565 ]
  %1677 = phi i32 [ 0, %1658 ], [ %2570, %2565 ]
  %1678 = phi i32 [ 0, %1658 ], [ %2569, %2565 ]
  %1679 = phi i32 [ 0, %1658 ], [ %2568, %2565 ]
  %1680 = phi i32 [ 0, %1658 ], [ %2574, %2565 ]
  %1681 = icmp sgt i32 %1673, 0
  br i1 %1681, label %1682, label %2565

1682:                                             ; preds = %1671
  %1683 = shl nuw nsw i32 %1680, 1
  br label %1684

1684:                                             ; preds = %2559, %1682
  %1685 = phi i32 [ %1674, %1682 ], [ %2556, %2559 ]
  %1686 = phi i32 [ %1675, %1682 ], [ %2555, %2559 ]
  %1687 = phi i32 [ %1676, %1682 ], [ %2554, %2559 ]
  %1688 = phi i32 [ %1677, %1682 ], [ %2553, %2559 ]
  %1689 = phi i32 [ %1678, %1682 ], [ %2552, %2559 ]
  %1690 = phi i32 [ %1679, %1682 ], [ %2551, %2559 ]
  %1691 = phi i32 [ 0, %1682 ], [ %2560, %2559 ]
  %1692 = load i32, i32* %32, align 4
  %1693 = load i32, i32* %38, align 8
  %1694 = icmp sgt i32 %1692, %1693
  br i1 %1694, label %1695, label %2708

1695:                                             ; preds = %1684
  %1696 = shl nuw nsw i32 %1691, 1
  br label %1697

1697:                                             ; preds = %2550, %1695
  %1698 = phi i32 [ %1685, %1695 ], [ %2556, %2550 ]
  %1699 = phi i32 [ %1686, %1695 ], [ %2555, %2550 ]
  %1700 = phi i32 [ %1687, %1695 ], [ %2554, %2550 ]
  %1701 = phi i32 [ %1688, %1695 ], [ %2553, %2550 ]
  %1702 = phi i32 [ %1689, %1695 ], [ %2552, %2550 ]
  %1703 = phi i32 [ %1690, %1695 ], [ %2551, %2550 ]
  %1704 = phi i32 [ 0, %1695 ], [ %2557, %2550 ]
  %1705 = lshr i32 %1704, 1
  %1706 = add nuw nsw i32 %1705, %1696
  %1707 = add nuw nsw i32 %1705, %1704
  %1708 = and i32 %1707, 1
  %1709 = or i32 %1708, %1683
  %1710 = load i32, i32* %1660, align 4
  %1711 = mul nsw i32 %1709, %1710
  %1712 = add nsw i32 %1711, %1706
  %1713 = icmp slt i32 %1706, %1710
  br i1 %1713, label %1714, label %2550

1714:                                             ; preds = %1697
  %1715 = load i32, i32* %1661, align 16
  %1716 = icmp slt i32 %1709, %1715
  br i1 %1716, label %1717, label %2550

1717:                                             ; preds = %1714
  %1718 = load i8*, i8** %1662, align 8
  %1719 = sext i32 %1712 to i64
  %1720 = getelementptr inbounds i8, i8* %1718, i64 %1719
  %1721 = load i8, i8* %1720, align 1
  switch i8 %1721, label %2378 [
    i8 8, label %2550
    i8 6, label %1737
    i8 2, label %1854
    i8 7, label %1722
    i8 3, label %2376
    i8 4, label %2377
  ]

1722:                                             ; preds = %1717
  %1723 = shl nuw nsw i32 %1709, 1
  %1724 = shl nuw nsw i32 %1706, 1
  %1725 = icmp slt i32 %1703, 0
  %1726 = sub nsw i32 0, %1703
  %1727 = select i1 %1725, i32 %1726, i32 %1703
  %1728 = zext i32 %1727 to i64
  %1729 = getelementptr inbounds [32 x i8], [32 x i8]* @vp4_mv_table_selector, i64 0, i64 %1728
  %1730 = icmp slt i32 %1702, 0
  %1731 = sub nsw i32 0, %1702
  %1732 = select i1 %1730, i32 %1731, i32 %1702
  %1733 = zext i32 %1732 to i64
  %1734 = getelementptr inbounds [32 x i8], [32 x i8]* @vp4_mv_table_selector, i64 0, i64 %1733
  %1735 = load i32, i32* %1663, align 8
  %1736 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %107, align 8
  br label %2111

1737:                                             ; preds = %1717
  switch i32 %1654, label %1986 [
    i32 2, label %1738
    i32 0, label %1855
    i32 1, label %1950
  ]

1738:                                             ; preds = %1737
  %1739 = icmp slt i32 %1699, 0
  %1740 = sub nsw i32 0, %1699
  %1741 = select i1 %1739, i32 %1740, i32 %1699
  %1742 = zext i32 %1741 to i64
  %1743 = getelementptr inbounds [32 x i8], [32 x i8]* @vp4_mv_table_selector, i64 0, i64 %1742
  %1744 = load i8, i8* %1743, align 1
  %1745 = zext i8 %1744 to i64
  %1746 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 72, i64 0, i64 %1745, i32 1
  %1747 = load [2 x i16]*, [2 x i16]** %1746, align 8
  %1748 = load i32, i32* %38, align 8
  %1749 = load i32, i32* %34, align 8
  %1750 = load i8*, i8** %31, align 8
  %1751 = lshr i32 %1748, 3
  %1752 = zext i32 %1751 to i64
  %1753 = getelementptr inbounds i8, i8* %1750, i64 %1752
  %1754 = bitcast i8* %1753 to i32*
  %1755 = load i32, i32* %1754, align 1
  %1756 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1755) #6, !srcloc !2
  %1757 = and i32 %1748, 7
  %1758 = shl i32 %1756, %1757
  %1759 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %1758) #6, !srcloc !3
  %1760 = zext i32 %1759 to i64
  %1761 = getelementptr inbounds [2 x i16], [2 x i16]* %1747, i64 %1760, i64 0
  %1762 = load i16, i16* %1761, align 2
  %1763 = sext i16 %1762 to i32
  %1764 = getelementptr inbounds [2 x i16], [2 x i16]* %1747, i64 %1760, i64 1
  %1765 = load i16, i16* %1764, align 2
  %1766 = icmp slt i16 %1765, 0
  br i1 %1766, label %1767, label %1788

1767:                                             ; preds = %1738
  %1768 = add i32 %1748, 6
  %1769 = icmp ugt i32 %1749, %1768
  %1770 = select i1 %1769, i32 %1768, i32 %1749
  %1771 = lshr i32 %1770, 3
  %1772 = zext i32 %1771 to i64
  %1773 = getelementptr inbounds i8, i8* %1750, i64 %1772
  %1774 = bitcast i8* %1773 to i32*
  %1775 = load i32, i32* %1774, align 1
  %1776 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1775) #6, !srcloc !2
  %1777 = and i32 %1770, 7
  %1778 = shl i32 %1776, %1777
  %1779 = trunc i16 %1765 to i8
  %1780 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %1779, i32 %1778) #6, !srcloc !3
  %1781 = add i32 %1780, %1763
  %1782 = zext i32 %1781 to i64
  %1783 = getelementptr inbounds [2 x i16], [2 x i16]* %1747, i64 %1782, i64 0
  %1784 = load i16, i16* %1783, align 2
  %1785 = sext i16 %1784 to i32
  %1786 = getelementptr inbounds [2 x i16], [2 x i16]* %1747, i64 %1782, i64 1
  %1787 = load i16, i16* %1786, align 2
  br label %1788

1788:                                             ; preds = %1767, %1738
  %1789 = phi i32 [ %1785, %1767 ], [ %1763, %1738 ]
  %1790 = phi i32 [ %1770, %1767 ], [ %1748, %1738 ]
  %1791 = phi i16 [ %1787, %1767 ], [ %1765, %1738 ]
  %1792 = sext i16 %1791 to i32
  %1793 = add i32 %1790, %1792
  %1794 = icmp ugt i32 %1749, %1793
  %1795 = select i1 %1794, i32 %1793, i32 %1749
  store i32 %1795, i32* %38, align 8
  %1796 = sub nsw i32 0, %1789
  %1797 = select i1 %1739, i32 %1796, i32 %1789
  store i32 %1797, i32* %1623, align 16
  %1798 = icmp slt i32 %1698, 0
  %1799 = sub nsw i32 0, %1698
  %1800 = select i1 %1798, i32 %1799, i32 %1698
  %1801 = zext i32 %1800 to i64
  %1802 = getelementptr inbounds [32 x i8], [32 x i8]* @vp4_mv_table_selector, i64 0, i64 %1801
  %1803 = load i8, i8* %1802, align 1
  %1804 = zext i8 %1803 to i64
  %1805 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 72, i64 1, i64 %1804, i32 1
  %1806 = load [2 x i16]*, [2 x i16]** %1805, align 8
  %1807 = lshr i32 %1795, 3
  %1808 = zext i32 %1807 to i64
  %1809 = getelementptr inbounds i8, i8* %1750, i64 %1808
  %1810 = bitcast i8* %1809 to i32*
  %1811 = load i32, i32* %1810, align 1
  %1812 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1811) #6, !srcloc !2
  %1813 = and i32 %1795, 7
  %1814 = shl i32 %1812, %1813
  %1815 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %1814) #6, !srcloc !3
  %1816 = zext i32 %1815 to i64
  %1817 = getelementptr inbounds [2 x i16], [2 x i16]* %1806, i64 %1816, i64 0
  %1818 = load i16, i16* %1817, align 2
  %1819 = sext i16 %1818 to i32
  %1820 = getelementptr inbounds [2 x i16], [2 x i16]* %1806, i64 %1816, i64 1
  %1821 = load i16, i16* %1820, align 2
  %1822 = icmp slt i16 %1821, 0
  br i1 %1822, label %1823, label %1844

1823:                                             ; preds = %1788
  %1824 = add i32 %1795, 6
  %1825 = icmp ugt i32 %1749, %1824
  %1826 = select i1 %1825, i32 %1824, i32 %1749
  %1827 = lshr i32 %1826, 3
  %1828 = zext i32 %1827 to i64
  %1829 = getelementptr inbounds i8, i8* %1750, i64 %1828
  %1830 = bitcast i8* %1829 to i32*
  %1831 = load i32, i32* %1830, align 1
  %1832 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1831) #6, !srcloc !2
  %1833 = and i32 %1826, 7
  %1834 = shl i32 %1832, %1833
  %1835 = trunc i16 %1821 to i8
  %1836 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %1835, i32 %1834) #6, !srcloc !3
  %1837 = add i32 %1836, %1819
  %1838 = zext i32 %1837 to i64
  %1839 = getelementptr inbounds [2 x i16], [2 x i16]* %1806, i64 %1838, i64 0
  %1840 = load i16, i16* %1839, align 2
  %1841 = sext i16 %1840 to i32
  %1842 = getelementptr inbounds [2 x i16], [2 x i16]* %1806, i64 %1838, i64 1
  %1843 = load i16, i16* %1842, align 2
  br label %1844

1844:                                             ; preds = %1823, %1788
  %1845 = phi i32 [ %1841, %1823 ], [ %1819, %1788 ]
  %1846 = phi i32 [ %1826, %1823 ], [ %1795, %1788 ]
  %1847 = phi i16 [ %1843, %1823 ], [ %1821, %1788 ]
  %1848 = sext i16 %1847 to i32
  %1849 = add i32 %1846, %1848
  %1850 = icmp ugt i32 %1749, %1849
  %1851 = select i1 %1850, i32 %1849, i32 %1749
  store i32 %1851, i32* %38, align 8
  %1852 = sub nsw i32 0, %1845
  %1853 = select i1 %1798, i32 %1852, i32 %1845
  store i32 %1853, i32* %1628, align 16
  br label %2382

1854:                                             ; preds = %1717
  switch i32 %1654, label %1986 [
    i32 0, label %1855
    i32 1, label %1950
  ]

1855:                                             ; preds = %1854, %1737
  %1856 = load [2 x i16]*, [2 x i16]** %1664, align 8
  %1857 = load i32, i32* %38, align 8
  %1858 = load i32, i32* %34, align 8
  %1859 = load i8*, i8** %31, align 8
  %1860 = lshr i32 %1857, 3
  %1861 = zext i32 %1860 to i64
  %1862 = getelementptr inbounds i8, i8* %1859, i64 %1861
  %1863 = bitcast i8* %1862 to i32*
  %1864 = load i32, i32* %1863, align 1
  %1865 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1864) #6, !srcloc !2
  %1866 = and i32 %1857, 7
  %1867 = shl i32 %1865, %1866
  %1868 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %1867) #6, !srcloc !3
  %1869 = zext i32 %1868 to i64
  %1870 = getelementptr inbounds [2 x i16], [2 x i16]* %1856, i64 %1869, i64 0
  %1871 = load i16, i16* %1870, align 2
  %1872 = sext i16 %1871 to i32
  %1873 = getelementptr inbounds [2 x i16], [2 x i16]* %1856, i64 %1869, i64 1
  %1874 = load i16, i16* %1873, align 2
  %1875 = icmp slt i16 %1874, 0
  br i1 %1875, label %1876, label %1897

1876:                                             ; preds = %1855
  %1877 = add i32 %1857, 6
  %1878 = icmp ugt i32 %1858, %1877
  %1879 = select i1 %1878, i32 %1877, i32 %1858
  %1880 = lshr i32 %1879, 3
  %1881 = zext i32 %1880 to i64
  %1882 = getelementptr inbounds i8, i8* %1859, i64 %1881
  %1883 = bitcast i8* %1882 to i32*
  %1884 = load i32, i32* %1883, align 1
  %1885 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1884) #6, !srcloc !2
  %1886 = and i32 %1879, 7
  %1887 = shl i32 %1885, %1886
  %1888 = trunc i16 %1874 to i8
  %1889 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %1888, i32 %1887) #6, !srcloc !3
  %1890 = add i32 %1889, %1872
  %1891 = zext i32 %1890 to i64
  %1892 = getelementptr inbounds [2 x i16], [2 x i16]* %1856, i64 %1891, i64 0
  %1893 = load i16, i16* %1892, align 2
  %1894 = sext i16 %1893 to i32
  %1895 = getelementptr inbounds [2 x i16], [2 x i16]* %1856, i64 %1891, i64 1
  %1896 = load i16, i16* %1895, align 2
  br label %1897

1897:                                             ; preds = %1876, %1855
  %1898 = phi i32 [ %1894, %1876 ], [ %1872, %1855 ]
  %1899 = phi i32 [ %1879, %1876 ], [ %1857, %1855 ]
  %1900 = phi i16 [ %1896, %1876 ], [ %1874, %1855 ]
  %1901 = sext i16 %1900 to i32
  %1902 = add i32 %1899, %1901
  %1903 = icmp ugt i32 %1858, %1902
  %1904 = select i1 %1903, i32 %1902, i32 %1858
  store i32 %1904, i32* %38, align 8
  store i32 %1898, i32* %1623, align 16
  %1905 = lshr i32 %1904, 3
  %1906 = zext i32 %1905 to i64
  %1907 = getelementptr inbounds i8, i8* %1859, i64 %1906
  %1908 = bitcast i8* %1907 to i32*
  %1909 = load i32, i32* %1908, align 1
  %1910 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1909) #6, !srcloc !2
  %1911 = and i32 %1904, 7
  %1912 = shl i32 %1910, %1911
  %1913 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %1912) #6, !srcloc !3
  %1914 = zext i32 %1913 to i64
  %1915 = getelementptr inbounds [2 x i16], [2 x i16]* %1856, i64 %1914, i64 0
  %1916 = load i16, i16* %1915, align 2
  %1917 = sext i16 %1916 to i32
  %1918 = getelementptr inbounds [2 x i16], [2 x i16]* %1856, i64 %1914, i64 1
  %1919 = load i16, i16* %1918, align 2
  %1920 = icmp slt i16 %1919, 0
  br i1 %1920, label %1921, label %1942

1921:                                             ; preds = %1897
  %1922 = add i32 %1904, 6
  %1923 = icmp ugt i32 %1858, %1922
  %1924 = select i1 %1923, i32 %1922, i32 %1858
  %1925 = lshr i32 %1924, 3
  %1926 = zext i32 %1925 to i64
  %1927 = getelementptr inbounds i8, i8* %1859, i64 %1926
  %1928 = bitcast i8* %1927 to i32*
  %1929 = load i32, i32* %1928, align 1
  %1930 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1929) #6, !srcloc !2
  %1931 = and i32 %1924, 7
  %1932 = shl i32 %1930, %1931
  %1933 = trunc i16 %1919 to i8
  %1934 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %1933, i32 %1932) #6, !srcloc !3
  %1935 = add i32 %1934, %1917
  %1936 = zext i32 %1935 to i64
  %1937 = getelementptr inbounds [2 x i16], [2 x i16]* %1856, i64 %1936, i64 0
  %1938 = load i16, i16* %1937, align 2
  %1939 = sext i16 %1938 to i32
  %1940 = getelementptr inbounds [2 x i16], [2 x i16]* %1856, i64 %1936, i64 1
  %1941 = load i16, i16* %1940, align 2
  br label %1942

1942:                                             ; preds = %1921, %1897
  %1943 = phi i32 [ %1939, %1921 ], [ %1917, %1897 ]
  %1944 = phi i32 [ %1924, %1921 ], [ %1904, %1897 ]
  %1945 = phi i16 [ %1941, %1921 ], [ %1919, %1897 ]
  %1946 = sext i16 %1945 to i32
  %1947 = add i32 %1944, %1946
  %1948 = icmp ugt i32 %1858, %1947
  %1949 = select i1 %1948, i32 %1947, i32 %1858
  store i32 %1949, i32* %38, align 8
  br label %2102

1950:                                             ; preds = %1854, %1737
  %1951 = load i32, i32* %38, align 8
  %1952 = load i32, i32* %34, align 8
  %1953 = load i8*, i8** %31, align 8
  %1954 = lshr i32 %1951, 3
  %1955 = zext i32 %1954 to i64
  %1956 = getelementptr inbounds i8, i8* %1953, i64 %1955
  %1957 = bitcast i8* %1956 to i32*
  %1958 = load i32, i32* %1957, align 1
  %1959 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1958) #6, !srcloc !2
  %1960 = and i32 %1951, 7
  %1961 = shl i32 %1959, %1960
  %1962 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %1961) #6, !srcloc !3
  %1963 = add i32 %1951, 6
  %1964 = icmp ugt i32 %1952, %1963
  %1965 = select i1 %1964, i32 %1963, i32 %1952
  store i32 %1965, i32* %38, align 8
  %1966 = zext i32 %1962 to i64
  %1967 = getelementptr inbounds [64 x i8], [64 x i8]* @fixed_motion_vector_table, i64 0, i64 %1966
  %1968 = load i8, i8* %1967, align 1
  %1969 = sext i8 %1968 to i32
  store i32 %1969, i32* %1623, align 16
  %1970 = lshr i32 %1965, 3
  %1971 = zext i32 %1970 to i64
  %1972 = getelementptr inbounds i8, i8* %1953, i64 %1971
  %1973 = bitcast i8* %1972 to i32*
  %1974 = load i32, i32* %1973, align 1
  %1975 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %1974) #6, !srcloc !2
  %1976 = and i32 %1965, 7
  %1977 = shl i32 %1975, %1976
  %1978 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %1977) #6, !srcloc !3
  %1979 = add i32 %1965, 6
  %1980 = icmp ugt i32 %1952, %1979
  %1981 = select i1 %1980, i32 %1979, i32 %1952
  store i32 %1981, i32* %38, align 8
  %1982 = zext i32 %1978 to i64
  %1983 = getelementptr inbounds [64 x i8], [64 x i8]* @fixed_motion_vector_table, i64 0, i64 %1982
  %1984 = load i8, i8* %1983, align 1
  %1985 = sext i8 %1984 to i32
  br label %2102

1986:                                             ; preds = %1854, %1737
  %1987 = icmp slt i32 %1703, 0
  %1988 = sub nsw i32 0, %1703
  %1989 = select i1 %1987, i32 %1988, i32 %1703
  %1990 = zext i32 %1989 to i64
  %1991 = getelementptr inbounds [32 x i8], [32 x i8]* @vp4_mv_table_selector, i64 0, i64 %1990
  %1992 = load i8, i8* %1991, align 1
  %1993 = zext i8 %1992 to i64
  %1994 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 72, i64 0, i64 %1993, i32 1
  %1995 = load [2 x i16]*, [2 x i16]** %1994, align 8
  %1996 = load i32, i32* %38, align 8
  %1997 = load i32, i32* %34, align 8
  %1998 = load i8*, i8** %31, align 8
  %1999 = lshr i32 %1996, 3
  %2000 = zext i32 %1999 to i64
  %2001 = getelementptr inbounds i8, i8* %1998, i64 %2000
  %2002 = bitcast i8* %2001 to i32*
  %2003 = load i32, i32* %2002, align 1
  %2004 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2003) #6, !srcloc !2
  %2005 = and i32 %1996, 7
  %2006 = shl i32 %2004, %2005
  %2007 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %2006) #6, !srcloc !3
  %2008 = zext i32 %2007 to i64
  %2009 = getelementptr inbounds [2 x i16], [2 x i16]* %1995, i64 %2008, i64 0
  %2010 = load i16, i16* %2009, align 2
  %2011 = sext i16 %2010 to i32
  %2012 = getelementptr inbounds [2 x i16], [2 x i16]* %1995, i64 %2008, i64 1
  %2013 = load i16, i16* %2012, align 2
  %2014 = icmp slt i16 %2013, 0
  br i1 %2014, label %2015, label %2036

2015:                                             ; preds = %1986
  %2016 = add i32 %1996, 6
  %2017 = icmp ugt i32 %1997, %2016
  %2018 = select i1 %2017, i32 %2016, i32 %1997
  %2019 = lshr i32 %2018, 3
  %2020 = zext i32 %2019 to i64
  %2021 = getelementptr inbounds i8, i8* %1998, i64 %2020
  %2022 = bitcast i8* %2021 to i32*
  %2023 = load i32, i32* %2022, align 1
  %2024 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2023) #6, !srcloc !2
  %2025 = and i32 %2018, 7
  %2026 = shl i32 %2024, %2025
  %2027 = trunc i16 %2013 to i8
  %2028 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %2027, i32 %2026) #6, !srcloc !3
  %2029 = add i32 %2028, %2011
  %2030 = zext i32 %2029 to i64
  %2031 = getelementptr inbounds [2 x i16], [2 x i16]* %1995, i64 %2030, i64 0
  %2032 = load i16, i16* %2031, align 2
  %2033 = sext i16 %2032 to i32
  %2034 = getelementptr inbounds [2 x i16], [2 x i16]* %1995, i64 %2030, i64 1
  %2035 = load i16, i16* %2034, align 2
  br label %2036

2036:                                             ; preds = %2015, %1986
  %2037 = phi i32 [ %2033, %2015 ], [ %2011, %1986 ]
  %2038 = phi i32 [ %2018, %2015 ], [ %1996, %1986 ]
  %2039 = phi i16 [ %2035, %2015 ], [ %2013, %1986 ]
  %2040 = sext i16 %2039 to i32
  %2041 = add i32 %2038, %2040
  %2042 = icmp ugt i32 %1997, %2041
  %2043 = select i1 %2042, i32 %2041, i32 %1997
  store i32 %2043, i32* %38, align 8
  %2044 = sub nsw i32 0, %2037
  %2045 = select i1 %1987, i32 %2044, i32 %2037
  store i32 %2045, i32* %1623, align 16
  %2046 = icmp slt i32 %1702, 0
  %2047 = sub nsw i32 0, %1702
  %2048 = select i1 %2046, i32 %2047, i32 %1702
  %2049 = zext i32 %2048 to i64
  %2050 = getelementptr inbounds [32 x i8], [32 x i8]* @vp4_mv_table_selector, i64 0, i64 %2049
  %2051 = load i8, i8* %2050, align 1
  %2052 = zext i8 %2051 to i64
  %2053 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 72, i64 1, i64 %2052, i32 1
  %2054 = load [2 x i16]*, [2 x i16]** %2053, align 8
  %2055 = lshr i32 %2043, 3
  %2056 = zext i32 %2055 to i64
  %2057 = getelementptr inbounds i8, i8* %1998, i64 %2056
  %2058 = bitcast i8* %2057 to i32*
  %2059 = load i32, i32* %2058, align 1
  %2060 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2059) #6, !srcloc !2
  %2061 = and i32 %2043, 7
  %2062 = shl i32 %2060, %2061
  %2063 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %2062) #6, !srcloc !3
  %2064 = zext i32 %2063 to i64
  %2065 = getelementptr inbounds [2 x i16], [2 x i16]* %2054, i64 %2064, i64 0
  %2066 = load i16, i16* %2065, align 2
  %2067 = sext i16 %2066 to i32
  %2068 = getelementptr inbounds [2 x i16], [2 x i16]* %2054, i64 %2064, i64 1
  %2069 = load i16, i16* %2068, align 2
  %2070 = icmp slt i16 %2069, 0
  br i1 %2070, label %2071, label %2092

2071:                                             ; preds = %2036
  %2072 = add i32 %2043, 6
  %2073 = icmp ugt i32 %1997, %2072
  %2074 = select i1 %2073, i32 %2072, i32 %1997
  %2075 = lshr i32 %2074, 3
  %2076 = zext i32 %2075 to i64
  %2077 = getelementptr inbounds i8, i8* %1998, i64 %2076
  %2078 = bitcast i8* %2077 to i32*
  %2079 = load i32, i32* %2078, align 1
  %2080 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2079) #6, !srcloc !2
  %2081 = and i32 %2074, 7
  %2082 = shl i32 %2080, %2081
  %2083 = trunc i16 %2069 to i8
  %2084 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %2083, i32 %2082) #6, !srcloc !3
  %2085 = add i32 %2084, %2067
  %2086 = zext i32 %2085 to i64
  %2087 = getelementptr inbounds [2 x i16], [2 x i16]* %2054, i64 %2086, i64 0
  %2088 = load i16, i16* %2087, align 2
  %2089 = sext i16 %2088 to i32
  %2090 = getelementptr inbounds [2 x i16], [2 x i16]* %2054, i64 %2086, i64 1
  %2091 = load i16, i16* %2090, align 2
  br label %2092

2092:                                             ; preds = %2071, %2036
  %2093 = phi i32 [ %2089, %2071 ], [ %2067, %2036 ]
  %2094 = phi i32 [ %2074, %2071 ], [ %2043, %2036 ]
  %2095 = phi i16 [ %2091, %2071 ], [ %2069, %2036 ]
  %2096 = sext i16 %2095 to i32
  %2097 = add i32 %2094, %2096
  %2098 = icmp ugt i32 %1997, %2097
  %2099 = select i1 %2098, i32 %2097, i32 %1997
  store i32 %2099, i32* %38, align 8
  %2100 = sub nsw i32 0, %2093
  %2101 = select i1 %2046, i32 %2100, i32 %2093
  br label %2102

2102:                                             ; preds = %2092, %1950, %1942
  %2103 = phi i32 [ %2101, %2092 ], [ %1985, %1950 ], [ %1943, %1942 ]
  %2104 = phi i32 [ %2045, %2092 ], [ %1969, %1950 ], [ %1898, %1942 ]
  store i32 %2103, i32* %1628, align 16
  %2105 = load i8, i8* %1720, align 1
  %2106 = icmp eq i8 %2105, 2
  %2107 = select i1 %2106, i32 %2104, i32 %1703
  %2108 = select i1 %2106, i32 %2103, i32 %1702
  %2109 = select i1 %2106, i32 %1703, i32 %1701
  %2110 = select i1 %2106, i32 %1702, i32 %1700
  br label %2382

2111:                                             ; preds = %2369, %1722
  %2112 = phi i64 [ 0, %1722 ], [ %2374, %2369 ]
  %2113 = phi i32 [ %1702, %1722 ], [ %2372, %2369 ]
  %2114 = phi i32 [ %1703, %1722 ], [ %2371, %2369 ]
  %2115 = trunc i64 %2112 to i32
  %2116 = lshr i32 %2115, 1
  %2117 = add nuw nsw i32 %2116, %1723
  %2118 = mul nsw i32 %1735, %2117
  %2119 = and i32 %2115, 1
  %2120 = or i32 %2119, %1724
  %2121 = add nsw i32 %2118, %2120
  %2122 = sext i32 %2121 to i64
  %2123 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %1736, i64 %2122, i32 1
  %2124 = load i8, i8* %2123, align 2
  %2125 = icmp eq i8 %2124, 8
  br i1 %2125, label %2367, label %2126

2126:                                             ; preds = %2111
  switch i32 %1654, label %2260 [
    i32 0, label %2127
    i32 1, label %2223
  ]

2127:                                             ; preds = %2126
  %2128 = load [2 x i16]*, [2 x i16]** %1664, align 8
  %2129 = load i32, i32* %38, align 8
  %2130 = load i32, i32* %34, align 8
  %2131 = load i8*, i8** %31, align 8
  %2132 = lshr i32 %2129, 3
  %2133 = zext i32 %2132 to i64
  %2134 = getelementptr inbounds i8, i8* %2131, i64 %2133
  %2135 = bitcast i8* %2134 to i32*
  %2136 = load i32, i32* %2135, align 1
  %2137 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2136) #6, !srcloc !2
  %2138 = and i32 %2129, 7
  %2139 = shl i32 %2137, %2138
  %2140 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %2139) #6, !srcloc !3
  %2141 = zext i32 %2140 to i64
  %2142 = getelementptr inbounds [2 x i16], [2 x i16]* %2128, i64 %2141, i64 0
  %2143 = load i16, i16* %2142, align 2
  %2144 = sext i16 %2143 to i32
  %2145 = getelementptr inbounds [2 x i16], [2 x i16]* %2128, i64 %2141, i64 1
  %2146 = load i16, i16* %2145, align 2
  %2147 = icmp slt i16 %2146, 0
  br i1 %2147, label %2148, label %2169

2148:                                             ; preds = %2127
  %2149 = add i32 %2129, 6
  %2150 = icmp ugt i32 %2130, %2149
  %2151 = select i1 %2150, i32 %2149, i32 %2130
  %2152 = lshr i32 %2151, 3
  %2153 = zext i32 %2152 to i64
  %2154 = getelementptr inbounds i8, i8* %2131, i64 %2153
  %2155 = bitcast i8* %2154 to i32*
  %2156 = load i32, i32* %2155, align 1
  %2157 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2156) #6, !srcloc !2
  %2158 = and i32 %2151, 7
  %2159 = shl i32 %2157, %2158
  %2160 = trunc i16 %2146 to i8
  %2161 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %2160, i32 %2159) #6, !srcloc !3
  %2162 = add i32 %2161, %2144
  %2163 = zext i32 %2162 to i64
  %2164 = getelementptr inbounds [2 x i16], [2 x i16]* %2128, i64 %2163, i64 0
  %2165 = load i16, i16* %2164, align 2
  %2166 = sext i16 %2165 to i32
  %2167 = getelementptr inbounds [2 x i16], [2 x i16]* %2128, i64 %2163, i64 1
  %2168 = load i16, i16* %2167, align 2
  br label %2169

2169:                                             ; preds = %2148, %2127
  %2170 = phi i32 [ %2166, %2148 ], [ %2144, %2127 ]
  %2171 = phi i32 [ %2151, %2148 ], [ %2129, %2127 ]
  %2172 = phi i16 [ %2168, %2148 ], [ %2146, %2127 ]
  %2173 = sext i16 %2172 to i32
  %2174 = add i32 %2171, %2173
  %2175 = icmp ugt i32 %2130, %2174
  %2176 = select i1 %2175, i32 %2174, i32 %2130
  store i32 %2176, i32* %38, align 8
  %2177 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 %2112
  store i32 %2170, i32* %2177, align 4
  %2178 = lshr i32 %2176, 3
  %2179 = zext i32 %2178 to i64
  %2180 = getelementptr inbounds i8, i8* %2131, i64 %2179
  %2181 = bitcast i8* %2180 to i32*
  %2182 = load i32, i32* %2181, align 1
  %2183 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2182) #6, !srcloc !2
  %2184 = and i32 %2176, 7
  %2185 = shl i32 %2183, %2184
  %2186 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %2185) #6, !srcloc !3
  %2187 = zext i32 %2186 to i64
  %2188 = getelementptr inbounds [2 x i16], [2 x i16]* %2128, i64 %2187, i64 0
  %2189 = load i16, i16* %2188, align 2
  %2190 = sext i16 %2189 to i32
  %2191 = getelementptr inbounds [2 x i16], [2 x i16]* %2128, i64 %2187, i64 1
  %2192 = load i16, i16* %2191, align 2
  %2193 = icmp slt i16 %2192, 0
  br i1 %2193, label %2194, label %2215

2194:                                             ; preds = %2169
  %2195 = add i32 %2176, 6
  %2196 = icmp ugt i32 %2130, %2195
  %2197 = select i1 %2196, i32 %2195, i32 %2130
  %2198 = lshr i32 %2197, 3
  %2199 = zext i32 %2198 to i64
  %2200 = getelementptr inbounds i8, i8* %2131, i64 %2199
  %2201 = bitcast i8* %2200 to i32*
  %2202 = load i32, i32* %2201, align 1
  %2203 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2202) #6, !srcloc !2
  %2204 = and i32 %2197, 7
  %2205 = shl i32 %2203, %2204
  %2206 = trunc i16 %2192 to i8
  %2207 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %2206, i32 %2205) #6, !srcloc !3
  %2208 = add i32 %2207, %2190
  %2209 = zext i32 %2208 to i64
  %2210 = getelementptr inbounds [2 x i16], [2 x i16]* %2128, i64 %2209, i64 0
  %2211 = load i16, i16* %2210, align 2
  %2212 = sext i16 %2211 to i32
  %2213 = getelementptr inbounds [2 x i16], [2 x i16]* %2128, i64 %2209, i64 1
  %2214 = load i16, i16* %2213, align 2
  br label %2215

2215:                                             ; preds = %2194, %2169
  %2216 = phi i32 [ %2212, %2194 ], [ %2190, %2169 ]
  %2217 = phi i32 [ %2197, %2194 ], [ %2176, %2169 ]
  %2218 = phi i16 [ %2214, %2194 ], [ %2192, %2169 ]
  %2219 = sext i16 %2218 to i32
  %2220 = add i32 %2217, %2219
  %2221 = icmp ugt i32 %2130, %2220
  %2222 = select i1 %2221, i32 %2220, i32 %2130
  store i32 %2222, i32* %38, align 8
  br label %2369

2223:                                             ; preds = %2126
  %2224 = load i32, i32* %38, align 8
  %2225 = load i32, i32* %34, align 8
  %2226 = load i8*, i8** %31, align 8
  %2227 = lshr i32 %2224, 3
  %2228 = zext i32 %2227 to i64
  %2229 = getelementptr inbounds i8, i8* %2226, i64 %2228
  %2230 = bitcast i8* %2229 to i32*
  %2231 = load i32, i32* %2230, align 1
  %2232 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2231) #6, !srcloc !2
  %2233 = and i32 %2224, 7
  %2234 = shl i32 %2232, %2233
  %2235 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %2234) #6, !srcloc !3
  %2236 = add i32 %2224, 6
  %2237 = icmp ugt i32 %2225, %2236
  %2238 = select i1 %2237, i32 %2236, i32 %2225
  store i32 %2238, i32* %38, align 8
  %2239 = zext i32 %2235 to i64
  %2240 = getelementptr inbounds [64 x i8], [64 x i8]* @fixed_motion_vector_table, i64 0, i64 %2239
  %2241 = load i8, i8* %2240, align 1
  %2242 = sext i8 %2241 to i32
  %2243 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 %2112
  store i32 %2242, i32* %2243, align 4
  %2244 = lshr i32 %2238, 3
  %2245 = zext i32 %2244 to i64
  %2246 = getelementptr inbounds i8, i8* %2226, i64 %2245
  %2247 = bitcast i8* %2246 to i32*
  %2248 = load i32, i32* %2247, align 1
  %2249 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2248) #6, !srcloc !2
  %2250 = and i32 %2238, 7
  %2251 = shl i32 %2249, %2250
  %2252 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %2251) #6, !srcloc !3
  %2253 = add i32 %2238, 6
  %2254 = icmp ugt i32 %2225, %2253
  %2255 = select i1 %2254, i32 %2253, i32 %2225
  store i32 %2255, i32* %38, align 8
  %2256 = zext i32 %2252 to i64
  %2257 = getelementptr inbounds [64 x i8], [64 x i8]* @fixed_motion_vector_table, i64 0, i64 %2256
  %2258 = load i8, i8* %2257, align 1
  %2259 = sext i8 %2258 to i32
  br label %2369

2260:                                             ; preds = %2126
  %2261 = load i8, i8* %1729, align 1
  %2262 = zext i8 %2261 to i64
  %2263 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 72, i64 0, i64 %2262, i32 1
  %2264 = load [2 x i16]*, [2 x i16]** %2263, align 8
  %2265 = load i32, i32* %38, align 8
  %2266 = load i32, i32* %34, align 8
  %2267 = load i8*, i8** %31, align 8
  %2268 = lshr i32 %2265, 3
  %2269 = zext i32 %2268 to i64
  %2270 = getelementptr inbounds i8, i8* %2267, i64 %2269
  %2271 = bitcast i8* %2270 to i32*
  %2272 = load i32, i32* %2271, align 1
  %2273 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2272) #6, !srcloc !2
  %2274 = and i32 %2265, 7
  %2275 = shl i32 %2273, %2274
  %2276 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %2275) #6, !srcloc !3
  %2277 = zext i32 %2276 to i64
  %2278 = getelementptr inbounds [2 x i16], [2 x i16]* %2264, i64 %2277, i64 0
  %2279 = load i16, i16* %2278, align 2
  %2280 = sext i16 %2279 to i32
  %2281 = getelementptr inbounds [2 x i16], [2 x i16]* %2264, i64 %2277, i64 1
  %2282 = load i16, i16* %2281, align 2
  %2283 = icmp slt i16 %2282, 0
  br i1 %2283, label %2284, label %2305

2284:                                             ; preds = %2260
  %2285 = add i32 %2265, 6
  %2286 = icmp ugt i32 %2266, %2285
  %2287 = select i1 %2286, i32 %2285, i32 %2266
  %2288 = lshr i32 %2287, 3
  %2289 = zext i32 %2288 to i64
  %2290 = getelementptr inbounds i8, i8* %2267, i64 %2289
  %2291 = bitcast i8* %2290 to i32*
  %2292 = load i32, i32* %2291, align 1
  %2293 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2292) #6, !srcloc !2
  %2294 = and i32 %2287, 7
  %2295 = shl i32 %2293, %2294
  %2296 = trunc i16 %2282 to i8
  %2297 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %2296, i32 %2295) #6, !srcloc !3
  %2298 = add i32 %2297, %2280
  %2299 = zext i32 %2298 to i64
  %2300 = getelementptr inbounds [2 x i16], [2 x i16]* %2264, i64 %2299, i64 0
  %2301 = load i16, i16* %2300, align 2
  %2302 = sext i16 %2301 to i32
  %2303 = getelementptr inbounds [2 x i16], [2 x i16]* %2264, i64 %2299, i64 1
  %2304 = load i16, i16* %2303, align 2
  br label %2305

2305:                                             ; preds = %2284, %2260
  %2306 = phi i32 [ %2302, %2284 ], [ %2280, %2260 ]
  %2307 = phi i32 [ %2287, %2284 ], [ %2265, %2260 ]
  %2308 = phi i16 [ %2304, %2284 ], [ %2282, %2260 ]
  %2309 = sext i16 %2308 to i32
  %2310 = add i32 %2307, %2309
  %2311 = icmp ugt i32 %2266, %2310
  %2312 = select i1 %2311, i32 %2310, i32 %2266
  store i32 %2312, i32* %38, align 8
  %2313 = sub nsw i32 0, %2306
  %2314 = select i1 %1725, i32 %2313, i32 %2306
  %2315 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 %2112
  store i32 %2314, i32* %2315, align 4
  %2316 = load i8, i8* %1734, align 1
  %2317 = zext i8 %2316 to i64
  %2318 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 72, i64 1, i64 %2317, i32 1
  %2319 = load [2 x i16]*, [2 x i16]** %2318, align 8
  %2320 = lshr i32 %2312, 3
  %2321 = zext i32 %2320 to i64
  %2322 = getelementptr inbounds i8, i8* %2267, i64 %2321
  %2323 = bitcast i8* %2322 to i32*
  %2324 = load i32, i32* %2323, align 1
  %2325 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2324) #6, !srcloc !2
  %2326 = and i32 %2312, 7
  %2327 = shl i32 %2325, %2326
  %2328 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %2327) #6, !srcloc !3
  %2329 = zext i32 %2328 to i64
  %2330 = getelementptr inbounds [2 x i16], [2 x i16]* %2319, i64 %2329, i64 0
  %2331 = load i16, i16* %2330, align 2
  %2332 = sext i16 %2331 to i32
  %2333 = getelementptr inbounds [2 x i16], [2 x i16]* %2319, i64 %2329, i64 1
  %2334 = load i16, i16* %2333, align 2
  %2335 = icmp slt i16 %2334, 0
  br i1 %2335, label %2336, label %2357

2336:                                             ; preds = %2305
  %2337 = add i32 %2312, 6
  %2338 = icmp ugt i32 %2266, %2337
  %2339 = select i1 %2338, i32 %2337, i32 %2266
  %2340 = lshr i32 %2339, 3
  %2341 = zext i32 %2340 to i64
  %2342 = getelementptr inbounds i8, i8* %2267, i64 %2341
  %2343 = bitcast i8* %2342 to i32*
  %2344 = load i32, i32* %2343, align 1
  %2345 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2344) #6, !srcloc !2
  %2346 = and i32 %2339, 7
  %2347 = shl i32 %2345, %2346
  %2348 = trunc i16 %2334 to i8
  %2349 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %2348, i32 %2347) #6, !srcloc !3
  %2350 = add i32 %2349, %2332
  %2351 = zext i32 %2350 to i64
  %2352 = getelementptr inbounds [2 x i16], [2 x i16]* %2319, i64 %2351, i64 0
  %2353 = load i16, i16* %2352, align 2
  %2354 = sext i16 %2353 to i32
  %2355 = getelementptr inbounds [2 x i16], [2 x i16]* %2319, i64 %2351, i64 1
  %2356 = load i16, i16* %2355, align 2
  br label %2357

2357:                                             ; preds = %2336, %2305
  %2358 = phi i32 [ %2354, %2336 ], [ %2332, %2305 ]
  %2359 = phi i32 [ %2339, %2336 ], [ %2312, %2305 ]
  %2360 = phi i16 [ %2356, %2336 ], [ %2334, %2305 ]
  %2361 = sext i16 %2360 to i32
  %2362 = add i32 %2359, %2361
  %2363 = icmp ugt i32 %2266, %2362
  %2364 = select i1 %2363, i32 %2362, i32 %2266
  store i32 %2364, i32* %38, align 8
  %2365 = sub nsw i32 0, %2358
  %2366 = select i1 %1730, i32 %2365, i32 %2358
  br label %2369

2367:                                             ; preds = %2111
  %2368 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 %2112
  store i32 0, i32* %2368, align 4
  br label %2369

2369:                                             ; preds = %2367, %2357, %2223, %2215
  %2370 = phi i32 [ 0, %2367 ], [ %2366, %2357 ], [ %2259, %2223 ], [ %2216, %2215 ]
  %2371 = phi i32 [ %2114, %2367 ], [ %2314, %2357 ], [ %2242, %2223 ], [ %2170, %2215 ]
  %2372 = phi i32 [ %2113, %2367 ], [ %2366, %2357 ], [ %2259, %2223 ], [ %2216, %2215 ]
  %2373 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 %2112
  store i32 %2370, i32* %2373, align 4
  %2374 = add nuw nsw i64 %2112, 1
  %2375 = icmp eq i64 %2374, 4
  br i1 %2375, label %2379, label %2111

2376:                                             ; preds = %1717
  store i32 %1703, i32* %1623, align 16
  store i32 %1702, i32* %1628, align 16
  br label %2382

2377:                                             ; preds = %1717
  store i32 %1701, i32* %1623, align 16
  store i32 %1700, i32* %1628, align 16
  br label %2382

2378:                                             ; preds = %1717
  store i32 0, i32* %1623, align 16
  store i32 0, i32* %1628, align 16
  br label %2382

2379:                                             ; preds = %2369
  %2380 = load i32, i32* %1623, align 16
  %2381 = load i32, i32* %1628, align 16
  br label %2382

2382:                                             ; preds = %2379, %2378, %2377, %2376, %2102, %1844
  %2383 = phi i32 [ 0, %2378 ], [ %1700, %2377 ], [ %1702, %2376 ], [ %1853, %1844 ], [ %2381, %2379 ], [ %2103, %2102 ]
  %2384 = phi i32 [ 0, %2378 ], [ %1701, %2377 ], [ %1703, %2376 ], [ %1797, %1844 ], [ %2380, %2379 ], [ %2104, %2102 ]
  %2385 = phi i32 [ %1703, %2378 ], [ %1701, %2377 ], [ %1703, %2376 ], [ %1703, %1844 ], [ %2371, %2379 ], [ %2107, %2102 ]
  %2386 = phi i32 [ %1702, %2378 ], [ %1700, %2377 ], [ %1702, %2376 ], [ %1702, %1844 ], [ %2372, %2379 ], [ %2108, %2102 ]
  %2387 = phi i32 [ %1701, %2378 ], [ %1703, %2377 ], [ %1701, %2376 ], [ %1701, %1844 ], [ %1703, %2379 ], [ %2109, %2102 ]
  %2388 = phi i32 [ %1700, %2378 ], [ %1702, %2377 ], [ %1700, %2376 ], [ %1700, %1844 ], [ %1702, %2379 ], [ %2110, %2102 ]
  %2389 = phi i32 [ %1699, %2378 ], [ %1699, %2377 ], [ %1699, %2376 ], [ %1797, %1844 ], [ %1699, %2379 ], [ %1699, %2102 ]
  %2390 = phi i32 [ %1698, %2378 ], [ %1698, %2377 ], [ %1698, %2376 ], [ %1853, %1844 ], [ %1698, %2379 ], [ %1698, %2102 ]
  %2391 = shl nuw nsw i32 %1709, 1
  %2392 = shl nuw nsw i32 %1706, 1
  %2393 = trunc i32 %2384 to i8
  %2394 = trunc i32 %2383 to i8
  %2395 = load i32, i32* %1663, align 8
  %2396 = mul nsw i32 %2395, %2391
  %2397 = add nsw i32 %2396, %2392
  %2398 = load [2 x i8]*, [2 x i8]** %1665, align 16
  %2399 = sext i32 %2397 to i64
  %2400 = getelementptr inbounds [2 x i8], [2 x i8]* %2398, i64 %2399, i64 0
  store i8 %2393, i8* %2400, align 1
  %2401 = load [2 x i8]*, [2 x i8]** %1665, align 16
  %2402 = getelementptr inbounds [2 x i8], [2 x i8]* %2401, i64 %2399, i64 1
  store i8 %2394, i8* %2402, align 1
  %2403 = load i32, i32* %1663, align 8
  %2404 = mul nsw i32 %2403, %2391
  %2405 = or i32 %2392, 1
  %2406 = add nsw i32 %2404, %2405
  %2407 = load i8*, i8** %1662, align 8
  %2408 = getelementptr inbounds i8, i8* %2407, i64 %1719
  %2409 = load i8, i8* %2408, align 1
  %2410 = icmp eq i8 %2409, 7
  br i1 %2410, label %2580, label %2576

2411:                                             ; preds = %2637
  %2412 = load i8*, i8** %1662, align 8
  %2413 = getelementptr inbounds i8, i8* %2412, i64 %1719
  %2414 = load i8, i8* %2413, align 1
  %2415 = icmp eq i8 %2414, 7
  br i1 %2415, label %2416, label %2437

2416:                                             ; preds = %2411
  %2417 = load i32, i32* %1624, align 4
  %2418 = add nsw i32 %2417, %2384
  %2419 = load i32, i32* %1625, align 8
  %2420 = add nsw i32 %2418, %2419
  %2421 = load i32, i32* %1626, align 4
  %2422 = add nsw i32 %2420, %2421
  %2423 = icmp sgt i32 %2422, 0
  %2424 = select i1 %2423, i32 2, i32 1
  %2425 = add nsw i32 %2424, %2422
  %2426 = ashr i32 %2425, 2
  store i32 %2426, i32* %1623, align 16
  %2427 = load i32, i32* %1629, align 4
  %2428 = add nsw i32 %2427, %2383
  %2429 = load i32, i32* %1630, align 8
  %2430 = add nsw i32 %2428, %2429
  %2431 = load i32, i32* %1631, align 4
  %2432 = add nsw i32 %2430, %2431
  %2433 = icmp sgt i32 %2432, 0
  %2434 = select i1 %2433, i32 2, i32 1
  %2435 = add nsw i32 %2434, %2432
  %2436 = ashr i32 %2435, 2
  store i32 %2436, i32* %1628, align 16
  br label %2437

2437:                                             ; preds = %2416, %2411
  %2438 = phi i32 [ %2436, %2416 ], [ %2383, %2411 ]
  %2439 = phi i32 [ %2426, %2416 ], [ %2384, %2411 ]
  %2440 = load i32, i32* %492, align 4
  %2441 = icmp slt i32 %2440, 3
  br i1 %2441, label %2442, label %2449

2442:                                             ; preds = %2437
  %2443 = ashr i32 %2439, 1
  %2444 = and i32 %2439, 1
  %2445 = or i32 %2443, %2444
  store i32 %2445, i32* %1623, align 16
  %2446 = ashr i32 %2438, 1
  %2447 = and i32 %2438, 1
  %2448 = or i32 %2446, %2447
  store i32 %2448, i32* %1628, align 16
  br label %2449

2449:                                             ; preds = %2442, %2437
  %2450 = phi i32 [ %2448, %2442 ], [ %2438, %2437 ]
  %2451 = phi i32 [ %2445, %2442 ], [ %2439, %2437 ]
  %2452 = load i32, i32* %1667, align 4
  %2453 = mul nsw i32 %2452, %1709
  %2454 = add nsw i32 %2453, %1706
  %2455 = trunc i32 %2451 to i8
  %2456 = load [2 x i8]*, [2 x i8]** %1668, align 8
  %2457 = sext i32 %2454 to i64
  %2458 = getelementptr inbounds [2 x i8], [2 x i8]* %2456, i64 %2457, i64 0
  store i8 %2455, i8* %2458, align 1
  %2459 = trunc i32 %2450 to i8
  %2460 = load [2 x i8]*, [2 x i8]** %1668, align 8
  %2461 = getelementptr inbounds [2 x i8], [2 x i8]* %2460, i64 %2457, i64 1
  store i8 %2459, i8* %2461, align 1
  br label %2550

2462:                                             ; preds = %2637
  %2463 = load i32, i32* %1669, align 16
  %2464 = icmp eq i32 %2463, 0
  br i1 %2464, label %2465, label %2481

2465:                                             ; preds = %2462
  %2466 = load i32, i32* %1667, align 4
  %2467 = mul nsw i32 %2466, %2391
  %2468 = add nsw i32 %2467, %2392
  %2469 = load [2 x i8]*, [2 x i8]** %1668, align 8
  %2470 = sext i32 %2468 to i64
  %2471 = getelementptr inbounds [2 x i8], [2 x i8]* %2469, i64 %2470, i64 0
  store i8 %2393, i8* %2471, align 1
  %2472 = load [2 x i8]*, [2 x i8]** %1668, align 8
  %2473 = getelementptr inbounds [2 x i8], [2 x i8]* %2472, i64 %2470, i64 1
  store i8 %2394, i8* %2473, align 1
  %2474 = load i32, i32* %1667, align 4
  %2475 = mul nsw i32 %2474, %2391
  %2476 = add nsw i32 %2475, %2405
  %2477 = load i8*, i8** %1662, align 8
  %2478 = getelementptr inbounds i8, i8* %2477, i64 %1719
  %2479 = load i8, i8* %2478, align 1
  %2480 = icmp eq i8 %2479, 7
  br i1 %2480, label %2648, label %2644

2481:                                             ; preds = %2462
  %2482 = load i8*, i8** %1662, align 8
  %2483 = getelementptr inbounds i8, i8* %2482, i64 %1719
  %2484 = load i8, i8* %2483, align 1
  %2485 = icmp eq i8 %2484, 7
  br i1 %2485, label %2486, label %2513

2486:                                             ; preds = %2481
  %2487 = load i32, i32* %1624, align 4
  %2488 = add nsw i32 %2487, %2384
  %2489 = icmp sgt i32 %2488, 0
  %2490 = zext i1 %2489 to i32
  %2491 = add nsw i32 %2488, %2490
  %2492 = ashr i32 %2491, 1
  store i32 %2492, i32* %1623, align 16
  %2493 = load i32, i32* %1629, align 4
  %2494 = add nsw i32 %2493, %2383
  %2495 = icmp sgt i32 %2494, 0
  %2496 = zext i1 %2495 to i32
  %2497 = add nsw i32 %2494, %2496
  %2498 = ashr i32 %2497, 1
  store i32 %2498, i32* %1628, align 16
  %2499 = load i32, i32* %1625, align 8
  %2500 = load i32, i32* %1626, align 4
  %2501 = add nsw i32 %2500, %2499
  %2502 = icmp sgt i32 %2501, 0
  %2503 = zext i1 %2502 to i32
  %2504 = add nsw i32 %2501, %2503
  %2505 = ashr i32 %2504, 1
  store i32 %2505, i32* %1624, align 4
  %2506 = load i32, i32* %1630, align 8
  %2507 = load i32, i32* %1631, align 4
  %2508 = add nsw i32 %2507, %2506
  %2509 = icmp sgt i32 %2508, 0
  %2510 = zext i1 %2509 to i32
  %2511 = add nsw i32 %2508, %2510
  %2512 = ashr i32 %2511, 1
  br label %2514

2513:                                             ; preds = %2481
  store i32 %2384, i32* %1624, align 4
  br label %2514

2514:                                             ; preds = %2513, %2486
  %2515 = phi i32 [ %2383, %2513 ], [ %2498, %2486 ]
  %2516 = phi i32 [ %2384, %2513 ], [ %2505, %2486 ]
  %2517 = phi i32 [ %2384, %2513 ], [ %2492, %2486 ]
  %2518 = phi i32 [ %2383, %2513 ], [ %2512, %2486 ]
  store i32 %2518, i32* %1629, align 4
  %2519 = load i32, i32* %492, align 4
  %2520 = icmp slt i32 %2519, 3
  br i1 %2520, label %2521, label %2528

2521:                                             ; preds = %2514
  %2522 = ashr i32 %2517, 1
  %2523 = and i32 %2517, 1
  %2524 = or i32 %2522, %2523
  store i32 %2524, i32* %1623, align 16
  %2525 = ashr i32 %2516, 1
  %2526 = and i32 %2516, 1
  %2527 = or i32 %2525, %2526
  store i32 %2527, i32* %1624, align 4
  br label %2528

2528:                                             ; preds = %2521, %2514
  %2529 = phi i32 [ %2527, %2521 ], [ %2516, %2514 ]
  %2530 = phi i32 [ %2524, %2521 ], [ %2517, %2514 ]
  %2531 = load i32, i32* %1667, align 4
  %2532 = mul nsw i32 %2531, %2391
  %2533 = add nsw i32 %2532, %1706
  %2534 = trunc i32 %2530 to i8
  %2535 = load [2 x i8]*, [2 x i8]** %1668, align 8
  %2536 = sext i32 %2533 to i64
  %2537 = getelementptr inbounds [2 x i8], [2 x i8]* %2535, i64 %2536, i64 0
  store i8 %2534, i8* %2537, align 1
  %2538 = trunc i32 %2515 to i8
  %2539 = load [2 x i8]*, [2 x i8]** %1668, align 8
  %2540 = getelementptr inbounds [2 x i8], [2 x i8]* %2539, i64 %2536, i64 1
  store i8 %2538, i8* %2540, align 1
  %2541 = load i32, i32* %1667, align 4
  %2542 = add nsw i32 %2541, %2533
  %2543 = trunc i32 %2529 to i8
  %2544 = load [2 x i8]*, [2 x i8]** %1668, align 8
  %2545 = sext i32 %2542 to i64
  %2546 = getelementptr inbounds [2 x i8], [2 x i8]* %2544, i64 %2545, i64 0
  store i8 %2543, i8* %2546, align 1
  %2547 = trunc i32 %2518 to i8
  %2548 = load [2 x i8]*, [2 x i8]** %1668, align 8
  %2549 = getelementptr inbounds [2 x i8], [2 x i8]* %2548, i64 %2545, i64 1
  store i8 %2547, i8* %2549, align 1
  br label %2550

2550:                                             ; preds = %2698, %2692, %2528, %2449, %1717, %1714, %1697
  %2551 = phi i32 [ %1703, %1714 ], [ %1703, %1697 ], [ %1703, %1717 ], [ %2385, %2449 ], [ %2385, %2528 ], [ %2385, %2698 ], [ %2385, %2692 ]
  %2552 = phi i32 [ %1702, %1714 ], [ %1702, %1697 ], [ %1702, %1717 ], [ %2386, %2449 ], [ %2386, %2528 ], [ %2386, %2698 ], [ %2386, %2692 ]
  %2553 = phi i32 [ %1701, %1714 ], [ %1701, %1697 ], [ %1701, %1717 ], [ %2387, %2449 ], [ %2387, %2528 ], [ %2387, %2698 ], [ %2387, %2692 ]
  %2554 = phi i32 [ %1700, %1714 ], [ %1700, %1697 ], [ %1700, %1717 ], [ %2388, %2449 ], [ %2388, %2528 ], [ %2388, %2698 ], [ %2388, %2692 ]
  %2555 = phi i32 [ %1699, %1714 ], [ %1699, %1697 ], [ %1699, %1717 ], [ %2389, %2449 ], [ %2389, %2528 ], [ %2389, %2698 ], [ %2389, %2692 ]
  %2556 = phi i32 [ %1698, %1714 ], [ %1698, %1697 ], [ %1698, %1717 ], [ %2390, %2449 ], [ %2390, %2528 ], [ %2390, %2698 ], [ %2390, %2692 ]
  %2557 = add nuw nsw i32 %1704, 1
  %2558 = icmp eq i32 %2557, 4
  br i1 %2558, label %2559, label %1697

2559:                                             ; preds = %2550
  %2560 = add nuw nsw i32 %1691, 1
  %2561 = load i32, i32* %1659, align 4
  %2562 = icmp slt i32 %2560, %2561
  br i1 %2562, label %1684, label %2563

2563:                                             ; preds = %2559
  %2564 = load i32, i32* %1655, align 16
  br label %2565

2565:                                             ; preds = %2563, %1671
  %2566 = phi i32 [ %1672, %1671 ], [ %2564, %2563 ]
  %2567 = phi i32 [ %1673, %1671 ], [ %2561, %2563 ]
  %2568 = phi i32 [ %1679, %1671 ], [ %2551, %2563 ]
  %2569 = phi i32 [ %1678, %1671 ], [ %2552, %2563 ]
  %2570 = phi i32 [ %1677, %1671 ], [ %2553, %2563 ]
  %2571 = phi i32 [ %1676, %1671 ], [ %2554, %2563 ]
  %2572 = phi i32 [ %1675, %1671 ], [ %2555, %2563 ]
  %2573 = phi i32 [ %1674, %1671 ], [ %2556, %2563 ]
  %2574 = add nuw nsw i32 %1680, 1
  %2575 = icmp slt i32 %2574, %2566
  br i1 %2575, label %1671, label %2711

2576:                                             ; preds = %2382
  %2577 = load [2 x i8]*, [2 x i8]** %1665, align 16
  %2578 = sext i32 %2406 to i64
  %2579 = getelementptr inbounds [2 x i8], [2 x i8]* %2577, i64 %2578, i64 0
  store i8 %2393, i8* %2579, align 1
  br label %2588

2580:                                             ; preds = %2382
  %2581 = load i32, i32* %1624, align 4
  %2582 = trunc i32 %2581 to i8
  %2583 = load [2 x i8]*, [2 x i8]** %1665, align 16
  %2584 = sext i32 %2406 to i64
  %2585 = getelementptr inbounds [2 x i8], [2 x i8]* %2583, i64 %2584, i64 0
  store i8 %2582, i8* %2585, align 1
  %2586 = load i32, i32* %1629, align 4
  %2587 = trunc i32 %2586 to i8
  br label %2588

2588:                                             ; preds = %2580, %2576
  %2589 = phi i64 [ %2584, %2580 ], [ %2578, %2576 ]
  %2590 = phi i8 [ %2587, %2580 ], [ %2394, %2576 ]
  %2591 = load [2 x i8]*, [2 x i8]** %1665, align 16
  %2592 = getelementptr inbounds [2 x i8], [2 x i8]* %2591, i64 %2589, i64 1
  store i8 %2590, i8* %2592, align 1
  %2593 = or i32 %2391, 1
  %2594 = load i32, i32* %1663, align 8
  %2595 = mul nsw i32 %2594, %2593
  %2596 = add nsw i32 %2595, %2392
  %2597 = load i8*, i8** %1662, align 8
  %2598 = getelementptr inbounds i8, i8* %2597, i64 %1719
  %2599 = load i8, i8* %2598, align 1
  %2600 = icmp eq i8 %2599, 7
  br i1 %2600, label %2605, label %2601

2601:                                             ; preds = %2588
  %2602 = load [2 x i8]*, [2 x i8]** %1665, align 16
  %2603 = sext i32 %2596 to i64
  %2604 = getelementptr inbounds [2 x i8], [2 x i8]* %2602, i64 %2603, i64 0
  store i8 %2393, i8* %2604, align 1
  br label %2613

2605:                                             ; preds = %2588
  %2606 = load i32, i32* %1625, align 8
  %2607 = trunc i32 %2606 to i8
  %2608 = load [2 x i8]*, [2 x i8]** %1665, align 16
  %2609 = sext i32 %2596 to i64
  %2610 = getelementptr inbounds [2 x i8], [2 x i8]* %2608, i64 %2609, i64 0
  store i8 %2607, i8* %2610, align 1
  %2611 = load i32, i32* %1630, align 8
  %2612 = trunc i32 %2611 to i8
  br label %2613

2613:                                             ; preds = %2605, %2601
  %2614 = phi i64 [ %2609, %2605 ], [ %2603, %2601 ]
  %2615 = phi i8 [ %2612, %2605 ], [ %2394, %2601 ]
  %2616 = load [2 x i8]*, [2 x i8]** %1665, align 16
  %2617 = getelementptr inbounds [2 x i8], [2 x i8]* %2616, i64 %2614, i64 1
  store i8 %2615, i8* %2617, align 1
  %2618 = load i32, i32* %1663, align 8
  %2619 = mul nsw i32 %2618, %2593
  %2620 = add nsw i32 %2619, %2405
  %2621 = load i8*, i8** %1662, align 8
  %2622 = getelementptr inbounds i8, i8* %2621, i64 %1719
  %2623 = load i8, i8* %2622, align 1
  %2624 = icmp eq i8 %2623, 7
  br i1 %2624, label %2629, label %2625

2625:                                             ; preds = %2613
  %2626 = load [2 x i8]*, [2 x i8]** %1665, align 16
  %2627 = sext i32 %2620 to i64
  %2628 = getelementptr inbounds [2 x i8], [2 x i8]* %2626, i64 %2627, i64 0
  store i8 %2393, i8* %2628, align 1
  br label %2637

2629:                                             ; preds = %2613
  %2630 = load i32, i32* %1626, align 4
  %2631 = trunc i32 %2630 to i8
  %2632 = load [2 x i8]*, [2 x i8]** %1665, align 16
  %2633 = sext i32 %2620 to i64
  %2634 = getelementptr inbounds [2 x i8], [2 x i8]* %2632, i64 %2633, i64 0
  store i8 %2631, i8* %2634, align 1
  %2635 = load i32, i32* %1631, align 4
  %2636 = trunc i32 %2635 to i8
  br label %2637

2637:                                             ; preds = %2629, %2625
  %2638 = phi i64 [ %2633, %2629 ], [ %2627, %2625 ]
  %2639 = phi i8 [ %2636, %2629 ], [ %2394, %2625 ]
  %2640 = load [2 x i8]*, [2 x i8]** %1665, align 16
  %2641 = getelementptr inbounds [2 x i8], [2 x i8]* %2640, i64 %2638, i64 1
  store i8 %2639, i8* %2641, align 1
  %2642 = load i32, i32* %1666, align 4
  %2643 = icmp eq i32 %2642, 0
  br i1 %2643, label %2462, label %2411

2644:                                             ; preds = %2465
  %2645 = load [2 x i8]*, [2 x i8]** %1668, align 8
  %2646 = sext i32 %2476 to i64
  %2647 = getelementptr inbounds [2 x i8], [2 x i8]* %2645, i64 %2646, i64 0
  store i8 %2393, i8* %2647, align 1
  br label %2656

2648:                                             ; preds = %2465
  %2649 = load i32, i32* %1624, align 4
  %2650 = trunc i32 %2649 to i8
  %2651 = load [2 x i8]*, [2 x i8]** %1668, align 8
  %2652 = sext i32 %2476 to i64
  %2653 = getelementptr inbounds [2 x i8], [2 x i8]* %2651, i64 %2652, i64 0
  store i8 %2650, i8* %2653, align 1
  %2654 = load i32, i32* %1629, align 4
  %2655 = trunc i32 %2654 to i8
  br label %2656

2656:                                             ; preds = %2648, %2644
  %2657 = phi i64 [ %2652, %2648 ], [ %2646, %2644 ]
  %2658 = phi i8 [ %2655, %2648 ], [ %2394, %2644 ]
  %2659 = load [2 x i8]*, [2 x i8]** %1668, align 8
  %2660 = getelementptr inbounds [2 x i8], [2 x i8]* %2659, i64 %2657, i64 1
  store i8 %2658, i8* %2660, align 1
  %2661 = load i32, i32* %1667, align 4
  %2662 = mul nsw i32 %2661, %2593
  %2663 = add nsw i32 %2662, %2392
  %2664 = load i8*, i8** %1662, align 8
  %2665 = getelementptr inbounds i8, i8* %2664, i64 %1719
  %2666 = load i8, i8* %2665, align 1
  %2667 = icmp eq i8 %2666, 7
  br i1 %2667, label %2672, label %2668

2668:                                             ; preds = %2656
  %2669 = load [2 x i8]*, [2 x i8]** %1668, align 8
  %2670 = sext i32 %2663 to i64
  %2671 = getelementptr inbounds [2 x i8], [2 x i8]* %2669, i64 %2670, i64 0
  store i8 %2393, i8* %2671, align 1
  br label %2680

2672:                                             ; preds = %2656
  %2673 = load i32, i32* %1625, align 8
  %2674 = trunc i32 %2673 to i8
  %2675 = load [2 x i8]*, [2 x i8]** %1668, align 8
  %2676 = sext i32 %2663 to i64
  %2677 = getelementptr inbounds [2 x i8], [2 x i8]* %2675, i64 %2676, i64 0
  store i8 %2674, i8* %2677, align 1
  %2678 = load i32, i32* %1630, align 8
  %2679 = trunc i32 %2678 to i8
  br label %2680

2680:                                             ; preds = %2672, %2668
  %2681 = phi i64 [ %2676, %2672 ], [ %2670, %2668 ]
  %2682 = phi i8 [ %2679, %2672 ], [ %2394, %2668 ]
  %2683 = load [2 x i8]*, [2 x i8]** %1668, align 8
  %2684 = getelementptr inbounds [2 x i8], [2 x i8]* %2683, i64 %2681, i64 1
  store i8 %2682, i8* %2684, align 1
  %2685 = load i32, i32* %1667, align 4
  %2686 = mul nsw i32 %2685, %2593
  %2687 = add nsw i32 %2686, %2405
  %2688 = load i8*, i8** %1662, align 8
  %2689 = getelementptr inbounds i8, i8* %2688, i64 %1719
  %2690 = load i8, i8* %2689, align 1
  %2691 = icmp eq i8 %2690, 7
  br i1 %2691, label %2698, label %2692

2692:                                             ; preds = %2680
  %2693 = load [2 x i8]*, [2 x i8]** %1668, align 8
  %2694 = sext i32 %2687 to i64
  %2695 = getelementptr inbounds [2 x i8], [2 x i8]* %2693, i64 %2694, i64 0
  store i8 %2393, i8* %2695, align 1
  %2696 = load [2 x i8]*, [2 x i8]** %1668, align 8
  %2697 = getelementptr inbounds [2 x i8], [2 x i8]* %2696, i64 %2694, i64 1
  store i8 %2394, i8* %2697, align 1
  br label %2550

2698:                                             ; preds = %2680
  %2699 = load i32, i32* %1626, align 4
  %2700 = trunc i32 %2699 to i8
  %2701 = load [2 x i8]*, [2 x i8]** %1668, align 8
  %2702 = sext i32 %2687 to i64
  %2703 = getelementptr inbounds [2 x i8], [2 x i8]* %2701, i64 %2702, i64 0
  store i8 %2700, i8* %2703, align 1
  %2704 = load i32, i32* %1631, align 4
  %2705 = trunc i32 %2704 to i8
  %2706 = load [2 x i8]*, [2 x i8]** %1668, align 8
  %2707 = getelementptr inbounds [2 x i8], [2 x i8]* %2706, i64 %2702, i64 1
  store i8 %2705, i8* %2707, align 1
  br label %2550

2708:                                             ; preds = %1684
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1627) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1622) #5
  %2709 = bitcast %struct.Vp3DecodeContext* %19 to i8**
  %2710 = load i8*, i8** %2709, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %2710, i32 16, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.30, i64 0, i64 0)) #5
  br label %3606

2711:                                             ; preds = %2565, %1621, %1653
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1627) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1622) #5
  %2712 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 61
  %2713 = load i32, i32* %2712, align 16
  %2714 = load i32, i32* %130, align 8
  %2715 = icmp sgt i32 %2714, 1
  %2716 = icmp sgt i32 %2713, 0
  %2717 = and i1 %2716, %2715
  br i1 %2717, label %2718, label %2886

2718:                                             ; preds = %2711
  %2719 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 67, i32 1
  %2720 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 62, i64 0
  br label %2721

2721:                                             ; preds = %2875, %2718
  %2722 = phi i32 [ %2713, %2718 ], [ %2876, %2875 ]
  %2723 = phi i32 [ 0, %2718 ], [ %2877, %2875 ]
  %2724 = load i32, i32* %38, align 8
  %2725 = load i8*, i8** %31, align 8
  %2726 = lshr i32 %2724, 3
  %2727 = zext i32 %2726 to i64
  %2728 = getelementptr inbounds i8, i8* %2725, i64 %2727
  %2729 = load i8, i8* %2728, align 1
  %2730 = and i32 %2724, 7
  %2731 = zext i8 %2729 to i32
  %2732 = shl i32 %2731, %2730
  %2733 = lshr i32 %2732, 7
  %2734 = and i32 %2733, 1
  %2735 = load i32, i32* %34, align 8
  %2736 = icmp slt i32 %2724, %2735
  %2737 = zext i1 %2736 to i32
  %2738 = add i32 %2724, %2737
  store i32 %2738, i32* %38, align 8
  %2739 = xor i32 %2734, 1
  br label %2740

2740:                                             ; preds = %2871, %2721
  %2741 = phi i32 [ %2738, %2721 ], [ %2873, %2871 ]
  %2742 = phi i32 [ 0, %2721 ], [ %2869, %2871 ]
  %2743 = phi i32 [ %2739, %2721 ], [ %2771, %2871 ]
  %2744 = phi i32 [ 0, %2721 ], [ %2834, %2871 ]
  %2745 = phi i32 [ 0, %2721 ], [ %2835, %2871 ]
  %2746 = phi i32 [ 0, %2721 ], [ %2838, %2871 ]
  %2747 = icmp eq i32 %2744, 4129
  br i1 %2747, label %2748, label %2763

2748:                                             ; preds = %2740
  %2749 = load i8*, i8** %31, align 8
  %2750 = lshr i32 %2741, 3
  %2751 = zext i32 %2750 to i64
  %2752 = getelementptr inbounds i8, i8* %2749, i64 %2751
  %2753 = load i8, i8* %2752, align 1
  %2754 = and i32 %2741, 7
  %2755 = zext i8 %2753 to i32
  %2756 = shl i32 %2755, %2754
  %2757 = lshr i32 %2756, 7
  %2758 = and i32 %2757, 1
  %2759 = load i32, i32* %34, align 8
  %2760 = icmp slt i32 %2741, %2759
  %2761 = zext i1 %2760 to i32
  %2762 = add i32 %2741, %2761
  store i32 %2762, i32* %38, align 8
  br label %2767

2763:                                             ; preds = %2740
  %2764 = xor i32 %2743, 1
  %2765 = load i32, i32* %34, align 8
  %2766 = load i8*, i8** %31, align 8
  br label %2767

2767:                                             ; preds = %2763, %2748
  %2768 = phi i8* [ %2749, %2748 ], [ %2766, %2763 ]
  %2769 = phi i32 [ %2759, %2748 ], [ %2765, %2763 ]
  %2770 = phi i32 [ %2762, %2748 ], [ %2741, %2763 ]
  %2771 = phi i32 [ %2758, %2748 ], [ %2764, %2763 ]
  %2772 = load [2 x i16]*, [2 x i16]** %2719, align 8
  %2773 = lshr i32 %2770, 3
  %2774 = zext i32 %2773 to i64
  %2775 = getelementptr inbounds i8, i8* %2768, i64 %2774
  %2776 = bitcast i8* %2775 to i32*
  %2777 = load i32, i32* %2776, align 1
  %2778 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2777) #6, !srcloc !2
  %2779 = and i32 %2770, 7
  %2780 = shl i32 %2778, %2779
  %2781 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %2780) #6, !srcloc !3
  %2782 = zext i32 %2781 to i64
  %2783 = getelementptr inbounds [2 x i16], [2 x i16]* %2772, i64 %2782, i64 0
  %2784 = load i16, i16* %2783, align 2
  %2785 = sext i16 %2784 to i32
  %2786 = getelementptr inbounds [2 x i16], [2 x i16]* %2772, i64 %2782, i64 1
  %2787 = load i16, i16* %2786, align 2
  %2788 = icmp slt i16 %2787, 0
  br i1 %2788, label %2789, label %2810

2789:                                             ; preds = %2767
  %2790 = add i32 %2770, 6
  %2791 = icmp ugt i32 %2769, %2790
  %2792 = select i1 %2791, i32 %2790, i32 %2769
  %2793 = lshr i32 %2792, 3
  %2794 = zext i32 %2793 to i64
  %2795 = getelementptr inbounds i8, i8* %2768, i64 %2794
  %2796 = bitcast i8* %2795 to i32*
  %2797 = load i32, i32* %2796, align 1
  %2798 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2797) #6, !srcloc !2
  %2799 = and i32 %2792, 7
  %2800 = shl i32 %2798, %2799
  %2801 = trunc i16 %2787 to i8
  %2802 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %2801, i32 %2800) #6, !srcloc !3
  %2803 = add i32 %2802, %2785
  %2804 = zext i32 %2803 to i64
  %2805 = getelementptr inbounds [2 x i16], [2 x i16]* %2772, i64 %2804, i64 0
  %2806 = load i16, i16* %2805, align 2
  %2807 = sext i16 %2806 to i32
  %2808 = getelementptr inbounds [2 x i16], [2 x i16]* %2772, i64 %2804, i64 1
  %2809 = load i16, i16* %2808, align 2
  br label %2810

2810:                                             ; preds = %2789, %2767
  %2811 = phi i32 [ %2807, %2789 ], [ %2785, %2767 ]
  %2812 = phi i32 [ %2792, %2789 ], [ %2770, %2767 ]
  %2813 = phi i16 [ %2809, %2789 ], [ %2787, %2767 ]
  %2814 = sext i16 %2813 to i32
  %2815 = add i32 %2812, %2814
  %2816 = icmp ugt i32 %2769, %2815
  %2817 = select i1 %2816, i32 %2815, i32 %2769
  store i32 %2817, i32* %38, align 8
  %2818 = icmp eq i32 %2811, 34
  br i1 %2818, label %2819, label %2833

2819:                                             ; preds = %2810
  %2820 = lshr i32 %2817, 3
  %2821 = zext i32 %2820 to i64
  %2822 = getelementptr inbounds i8, i8* %2768, i64 %2821
  %2823 = bitcast i8* %2822 to i32*
  %2824 = load i32, i32* %2823, align 1
  %2825 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2824) #6, !srcloc !2
  %2826 = and i32 %2817, 7
  %2827 = shl i32 %2825, %2826
  %2828 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -12, i32 %2827) #6, !srcloc !3
  %2829 = add i32 %2817, 12
  %2830 = icmp ugt i32 %2769, %2829
  %2831 = select i1 %2830, i32 %2829, i32 %2769
  store i32 %2831, i32* %38, align 8
  %2832 = add i32 %2828, 34
  br label %2833

2833:                                             ; preds = %2819, %2810
  %2834 = phi i32 [ %2832, %2819 ], [ %2811, %2810 ]
  %2835 = add nsw i32 %2834, %2745
  %2836 = icmp eq i32 %2771, 0
  %2837 = select i1 %2836, i32 %2834, i32 0
  %2838 = add nsw i32 %2837, %2746
  %2839 = icmp sgt i32 %2834, 0
  br i1 %2839, label %2840, label %2868

2840:                                             ; preds = %2833
  %2841 = trunc i32 %2771 to i8
  %2842 = sext i32 %2742 to i64
  br label %2843

2843:                                             ; preds = %2862, %2840
  %2844 = phi i64 [ %2842, %2840 ], [ %2864, %2862 ]
  %2845 = phi i32 [ 0, %2840 ], [ %2863, %2862 ]
  %2846 = load i32, i32* %2712, align 16
  %2847 = sext i32 %2846 to i64
  %2848 = icmp slt i64 %2844, %2847
  br i1 %2848, label %2849, label %2883

2849:                                             ; preds = %2843
  %2850 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %107, align 8
  %2851 = load i32*, i32** %2720, align 8
  %2852 = getelementptr inbounds i32, i32* %2851, i64 %2844
  %2853 = load i32, i32* %2852, align 4
  %2854 = sext i32 %2853 to i64
  %2855 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %2850, i64 %2854, i32 2
  %2856 = load i8, i8* %2855, align 1
  %2857 = zext i8 %2856 to i32
  %2858 = icmp eq i32 %2723, %2857
  br i1 %2858, label %2859, label %2862

2859:                                             ; preds = %2849
  %2860 = add i8 %2856, %2841
  store i8 %2860, i8* %2855, align 1
  %2861 = add nsw i32 %2845, 1
  br label %2862

2862:                                             ; preds = %2859, %2849
  %2863 = phi i32 [ %2861, %2859 ], [ %2845, %2849 ]
  %2864 = add nsw i64 %2844, 1
  %2865 = icmp slt i32 %2863, %2834
  br i1 %2865, label %2843, label %2866

2866:                                             ; preds = %2862
  %2867 = trunc i64 %2864 to i32
  br label %2868

2868:                                             ; preds = %2866, %2833
  %2869 = phi i32 [ %2742, %2833 ], [ %2867, %2866 ]
  %2870 = icmp slt i32 %2835, %2722
  br i1 %2870, label %2871, label %2875

2871:                                             ; preds = %2868
  %2872 = load i32, i32* %32, align 4
  %2873 = load i32, i32* %38, align 8
  %2874 = icmp sgt i32 %2872, %2873
  br i1 %2874, label %2740, label %2875

2875:                                             ; preds = %2871, %2868
  %2876 = sub nsw i32 %2722, %2838
  %2877 = add nuw nsw i32 %2723, 1
  %2878 = load i32, i32* %130, align 8
  %2879 = add nsw i32 %2878, -1
  %2880 = icmp slt i32 %2877, %2879
  %2881 = icmp sgt i32 %2876, 0
  %2882 = and i1 %2881, %2880
  br i1 %2882, label %2721, label %2886

2883:                                             ; preds = %2843
  %2884 = bitcast %struct.Vp3DecodeContext* %19 to i8**
  %2885 = load i8*, i8** %2884, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %2885, i32 16, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.31, i64 0, i64 0)) #5
  br label %3606

2886:                                             ; preds = %2875, %2711
  %2887 = load i32, i32* %492, align 4
  %2888 = icmp slt i32 %2887, 2
  br i1 %2888, label %2889, label %3115

2889:                                             ; preds = %2886
  %2890 = bitcast [64 x %struct.VLC*]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %2890) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %2890, i8 -86, i64 512, i1 false) #5
  %2891 = bitcast [64 x %struct.VLC*]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %2891) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %2891, i8 -86, i64 512, i1 false) #5
  %2892 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 59
  %2893 = bitcast i16** %2892 to i64*
  %2894 = load i64, i64* %2893, align 8
  %2895 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 58
  %2896 = bitcast [3 x [64 x i16*]]* %2895 to i64*
  store i64 %2894, i64* %2896, align 8
  %2897 = load i32, i32* %32, align 4
  %2898 = load i32, i32* %38, align 8
  %2899 = sub nsw i32 %2897, %2898
  %2900 = icmp slt i32 %2899, 16
  br i1 %2900, label %3111, label %2901

2901:                                             ; preds = %2889
  %2902 = load i32, i32* %34, align 8
  %2903 = load i8*, i8** %31, align 8
  %2904 = lshr i32 %2898, 3
  %2905 = zext i32 %2904 to i64
  %2906 = getelementptr inbounds i8, i8* %2903, i64 %2905
  %2907 = bitcast i8* %2906 to i32*
  %2908 = load i32, i32* %2907, align 1
  %2909 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2908) #6, !srcloc !2
  %2910 = and i32 %2898, 7
  %2911 = shl i32 %2909, %2910
  %2912 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -4, i32 %2911) #6, !srcloc !3
  %2913 = add i32 %2898, 4
  %2914 = icmp ugt i32 %2902, %2913
  %2915 = select i1 %2914, i32 %2913, i32 %2902
  store i32 %2915, i32* %38, align 8
  %2916 = lshr i32 %2915, 3
  %2917 = zext i32 %2916 to i64
  %2918 = getelementptr inbounds i8, i8* %2903, i64 %2917
  %2919 = bitcast i8* %2918 to i32*
  %2920 = load i32, i32* %2919, align 1
  %2921 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2920) #6, !srcloc !2
  %2922 = and i32 %2915, 7
  %2923 = shl i32 %2921, %2922
  %2924 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -4, i32 %2923) #6, !srcloc !3
  %2925 = add i32 %2915, 4
  %2926 = icmp ugt i32 %2902, %2925
  %2927 = select i1 %2926, i32 %2925, i32 %2902
  store i32 %2927, i32* %38, align 8
  %2928 = sext i32 %2912 to i64
  %2929 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 66, i64 %2928
  %2930 = call fastcc i32 @unpack_vlcs(%struct.Vp3DecodeContext* %19, %struct.GetBitContext* nonnull %11, %struct.VLC* %2929, i32 0, i32 0, i32 0) #5
  %2931 = icmp slt i32 %2930, 0
  br i1 %2931, label %3111, label %2932

2932:                                             ; preds = %2901
  %2933 = load i32, i32* %32, align 4
  %2934 = load i32, i32* %38, align 8
  %2935 = sub nsw i32 %2933, %2934
  %2936 = icmp slt i32 %2935, 8
  br i1 %2936, label %3111, label %2937

2937:                                             ; preds = %2932
  %2938 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 43, i64 0
  %2939 = load i32, i32* %2938, align 8
  %2940 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 44, i64 0
  %2941 = load i32, i32* %2940, align 16
  tail call fastcc void @reverse_dc_prediction(%struct.Vp3DecodeContext* %19, i32 0, i32 %2939, i32 %2941) #5
  %2942 = sext i32 %2924 to i64
  %2943 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 66, i64 %2942
  %2944 = call fastcc i32 @unpack_vlcs(%struct.Vp3DecodeContext* %19, %struct.GetBitContext* nonnull %11, %struct.VLC* %2943, i32 0, i32 1, i32 %2930) #5
  %2945 = icmp slt i32 %2944, 0
  br i1 %2945, label %3111, label %2946

2946:                                             ; preds = %2937
  %2947 = call fastcc i32 @unpack_vlcs(%struct.Vp3DecodeContext* %19, %struct.GetBitContext* nonnull %11, %struct.VLC* %2943, i32 0, i32 2, i32 %2944) #5
  %2948 = icmp slt i32 %2947, 0
  br i1 %2948, label %3111, label %2949

2949:                                             ; preds = %2946
  %2950 = load %struct.AVCodecContext*, %struct.AVCodecContext** %191, align 16
  %2951 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %2950, i64 0, i32 13
  %2952 = load i32, i32* %2951, align 4
  %2953 = and i32 %2952, 8192
  %2954 = icmp eq i32 %2953, 0
  br i1 %2954, label %2955, label %2966

2955:                                             ; preds = %2949
  %2956 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 46, i64 1
  %2957 = load i32, i32* %2956, align 4
  %2958 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 43, i64 1
  %2959 = load i32, i32* %2958, align 4
  %2960 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 44, i64 1
  %2961 = load i32, i32* %2960, align 4
  tail call fastcc void @reverse_dc_prediction(%struct.Vp3DecodeContext* %19, i32 %2957, i32 %2959, i32 %2961) #5
  %2962 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 46, i64 2
  %2963 = load i32, i32* %2962, align 8
  %2964 = load i32, i32* %2958, align 4
  %2965 = load i32, i32* %2960, align 4
  tail call fastcc void @reverse_dc_prediction(%struct.Vp3DecodeContext* %19, i32 %2963, i32 %2964, i32 %2965) #5
  br label %2966

2966:                                             ; preds = %2955, %2949
  %2967 = load i32, i32* %32, align 4
  %2968 = load i32, i32* %38, align 8
  %2969 = sub nsw i32 %2967, %2968
  %2970 = icmp slt i32 %2969, 8
  br i1 %2970, label %3111, label %2971

2971:                                             ; preds = %2966
  %2972 = load i32, i32* %34, align 8
  %2973 = load i8*, i8** %31, align 8
  %2974 = lshr i32 %2968, 3
  %2975 = zext i32 %2974 to i64
  %2976 = getelementptr inbounds i8, i8* %2973, i64 %2975
  %2977 = bitcast i8* %2976 to i32*
  %2978 = load i32, i32* %2977, align 1
  %2979 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2978) #6, !srcloc !2
  %2980 = and i32 %2968, 7
  %2981 = shl i32 %2979, %2980
  %2982 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -4, i32 %2981) #6, !srcloc !3
  %2983 = add i32 %2968, 4
  %2984 = icmp ugt i32 %2972, %2983
  %2985 = select i1 %2984, i32 %2983, i32 %2972
  store i32 %2985, i32* %38, align 8
  %2986 = lshr i32 %2985, 3
  %2987 = zext i32 %2986 to i64
  %2988 = getelementptr inbounds i8, i8* %2973, i64 %2987
  %2989 = bitcast i8* %2988 to i32*
  %2990 = load i32, i32* %2989, align 1
  %2991 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %2990) #6, !srcloc !2
  %2992 = and i32 %2985, 7
  %2993 = shl i32 %2991, %2992
  %2994 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -4, i32 %2993) #6, !srcloc !3
  %2995 = add i32 %2985, 4
  %2996 = icmp ugt i32 %2972, %2995
  %2997 = select i1 %2996, i32 %2995, i32 %2972
  store i32 %2997, i32* %38, align 8
  %2998 = add nsw i32 %2982, 16
  %2999 = sext i32 %2998 to i64
  %3000 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 66, i64 %2999
  %3001 = add nsw i32 %2994, 16
  %3002 = sext i32 %3001 to i64
  %3003 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 66, i64 %3002
  %3004 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 1
  store %struct.VLC* %3000, %struct.VLC** %3004, align 8
  %3005 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 1
  store %struct.VLC* %3003, %struct.VLC** %3005, align 8
  %3006 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 2
  store %struct.VLC* %3000, %struct.VLC** %3006, align 16
  %3007 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 2
  store %struct.VLC* %3003, %struct.VLC** %3007, align 16
  %3008 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 3
  store %struct.VLC* %3000, %struct.VLC** %3008, align 8
  %3009 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 3
  store %struct.VLC* %3003, %struct.VLC** %3009, align 8
  %3010 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 4
  store %struct.VLC* %3000, %struct.VLC** %3010, align 16
  %3011 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 4
  store %struct.VLC* %3003, %struct.VLC** %3011, align 16
  %3012 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 5
  store %struct.VLC* %3000, %struct.VLC** %3012, align 8
  %3013 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 5
  store %struct.VLC* %3003, %struct.VLC** %3013, align 8
  %3014 = add nsw i32 %2982, 32
  %3015 = sext i32 %3014 to i64
  %3016 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 66, i64 %3015
  %3017 = add nsw i32 %2994, 32
  %3018 = sext i32 %3017 to i64
  %3019 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 66, i64 %3018
  %3020 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 6
  store %struct.VLC* %3016, %struct.VLC** %3020, align 16
  %3021 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 6
  store %struct.VLC* %3019, %struct.VLC** %3021, align 16
  %3022 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 7
  store %struct.VLC* %3016, %struct.VLC** %3022, align 8
  %3023 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 7
  store %struct.VLC* %3019, %struct.VLC** %3023, align 8
  %3024 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 8
  store %struct.VLC* %3016, %struct.VLC** %3024, align 16
  %3025 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 8
  store %struct.VLC* %3019, %struct.VLC** %3025, align 16
  %3026 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 9
  store %struct.VLC* %3016, %struct.VLC** %3026, align 8
  %3027 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 9
  store %struct.VLC* %3019, %struct.VLC** %3027, align 8
  %3028 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 10
  store %struct.VLC* %3016, %struct.VLC** %3028, align 16
  %3029 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 10
  store %struct.VLC* %3019, %struct.VLC** %3029, align 16
  %3030 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 11
  store %struct.VLC* %3016, %struct.VLC** %3030, align 8
  %3031 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 11
  store %struct.VLC* %3019, %struct.VLC** %3031, align 8
  %3032 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 12
  store %struct.VLC* %3016, %struct.VLC** %3032, align 16
  %3033 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 12
  store %struct.VLC* %3019, %struct.VLC** %3033, align 16
  %3034 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 13
  store %struct.VLC* %3016, %struct.VLC** %3034, align 8
  %3035 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 13
  store %struct.VLC* %3019, %struct.VLC** %3035, align 8
  %3036 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 14
  store %struct.VLC* %3016, %struct.VLC** %3036, align 16
  %3037 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 14
  store %struct.VLC* %3019, %struct.VLC** %3037, align 16
  %3038 = add nsw i32 %2982, 48
  %3039 = sext i32 %3038 to i64
  %3040 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 66, i64 %3039
  %3041 = add nsw i32 %2994, 48
  %3042 = sext i32 %3041 to i64
  %3043 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 66, i64 %3042
  %3044 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 15
  store %struct.VLC* %3040, %struct.VLC** %3044, align 8
  %3045 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 15
  store %struct.VLC* %3043, %struct.VLC** %3045, align 8
  %3046 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 16
  store %struct.VLC* %3040, %struct.VLC** %3046, align 16
  %3047 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 16
  store %struct.VLC* %3043, %struct.VLC** %3047, align 16
  %3048 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 17
  store %struct.VLC* %3040, %struct.VLC** %3048, align 8
  %3049 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 17
  store %struct.VLC* %3043, %struct.VLC** %3049, align 8
  %3050 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 18
  store %struct.VLC* %3040, %struct.VLC** %3050, align 16
  %3051 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 18
  store %struct.VLC* %3043, %struct.VLC** %3051, align 16
  %3052 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 19
  store %struct.VLC* %3040, %struct.VLC** %3052, align 8
  %3053 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 19
  store %struct.VLC* %3043, %struct.VLC** %3053, align 8
  %3054 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 20
  store %struct.VLC* %3040, %struct.VLC** %3054, align 16
  %3055 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 20
  store %struct.VLC* %3043, %struct.VLC** %3055, align 16
  %3056 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 21
  store %struct.VLC* %3040, %struct.VLC** %3056, align 8
  %3057 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 21
  store %struct.VLC* %3043, %struct.VLC** %3057, align 8
  %3058 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 22
  store %struct.VLC* %3040, %struct.VLC** %3058, align 16
  %3059 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 22
  store %struct.VLC* %3043, %struct.VLC** %3059, align 16
  %3060 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 23
  store %struct.VLC* %3040, %struct.VLC** %3060, align 8
  %3061 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 23
  store %struct.VLC* %3043, %struct.VLC** %3061, align 8
  %3062 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 24
  store %struct.VLC* %3040, %struct.VLC** %3062, align 16
  %3063 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 24
  store %struct.VLC* %3043, %struct.VLC** %3063, align 16
  %3064 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 25
  store %struct.VLC* %3040, %struct.VLC** %3064, align 8
  %3065 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 25
  store %struct.VLC* %3043, %struct.VLC** %3065, align 8
  %3066 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 26
  store %struct.VLC* %3040, %struct.VLC** %3066, align 16
  %3067 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 26
  store %struct.VLC* %3043, %struct.VLC** %3067, align 16
  %3068 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 27
  store %struct.VLC* %3040, %struct.VLC** %3068, align 8
  %3069 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 27
  store %struct.VLC* %3043, %struct.VLC** %3069, align 8
  %3070 = add nsw i32 %2982, 64
  %3071 = sext i32 %3070 to i64
  %3072 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 66, i64 %3071
  %3073 = add nsw i32 %2994, 64
  %3074 = sext i32 %3073 to i64
  %3075 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 66, i64 %3074
  br label %3076

3076:                                             ; preds = %3076, %2971
  %3077 = phi i64 [ 28, %2971 ], [ %3089, %3076 ]
  %3078 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 %3077
  store %struct.VLC* %3072, %struct.VLC** %3078, align 16
  %3079 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 %3077
  store %struct.VLC* %3075, %struct.VLC** %3079, align 16
  %3080 = or i64 %3077, 1
  %3081 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 %3080
  store %struct.VLC* %3072, %struct.VLC** %3081, align 8
  %3082 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 %3080
  store %struct.VLC* %3075, %struct.VLC** %3082, align 8
  %3083 = or i64 %3077, 2
  %3084 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 %3083
  store %struct.VLC* %3072, %struct.VLC** %3084, align 16
  %3085 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 %3083
  store %struct.VLC* %3075, %struct.VLC** %3085, align 16
  %3086 = or i64 %3077, 3
  %3087 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 %3086
  store %struct.VLC* %3072, %struct.VLC** %3087, align 8
  %3088 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 %3086
  store %struct.VLC* %3075, %struct.VLC** %3088, align 8
  %3089 = add nuw nsw i64 %3077, 4
  %3090 = icmp eq i64 %3089, 64
  br i1 %3090, label %3093, label %3076

3091:                                             ; preds = %3106
  %3092 = icmp eq i64 %3109, 64
  br i1 %3092, label %3110, label %3093

3093:                                             ; preds = %3076, %3091
  %3094 = phi i64 [ %3109, %3091 ], [ 1, %3076 ]
  %3095 = phi i32 [ %3107, %3091 ], [ %2947, %3076 ]
  %3096 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %5, i64 0, i64 %3094
  %3097 = load %struct.VLC*, %struct.VLC** %3096, align 8
  %3098 = trunc i64 %3094 to i32
  %3099 = call fastcc i32 @unpack_vlcs(%struct.Vp3DecodeContext* %19, %struct.GetBitContext* nonnull %11, %struct.VLC* %3097, i32 %3098, i32 0, i32 %3095) #5
  %3100 = icmp slt i32 %3099, 0
  br i1 %3100, label %3111, label %3101

3101:                                             ; preds = %3093
  %3102 = getelementptr inbounds [64 x %struct.VLC*], [64 x %struct.VLC*]* %6, i64 0, i64 %3094
  %3103 = load %struct.VLC*, %struct.VLC** %3102, align 8
  %3104 = call fastcc i32 @unpack_vlcs(%struct.Vp3DecodeContext* %19, %struct.GetBitContext* nonnull %11, %struct.VLC* %3103, i32 %3098, i32 1, i32 %3099) #5
  %3105 = icmp slt i32 %3104, 0
  br i1 %3105, label %3111, label %3106

3106:                                             ; preds = %3101
  %3107 = call fastcc i32 @unpack_vlcs(%struct.Vp3DecodeContext* %19, %struct.GetBitContext* nonnull %11, %struct.VLC* %3103, i32 %3098, i32 2, i32 %3104) #5
  %3108 = icmp slt i32 %3107, 0
  %3109 = add nuw nsw i64 %3094, 1
  br i1 %3108, label %3111, label %3091

3110:                                             ; preds = %3091
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %2891) #5
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %2890) #5
  br label %3115

3111:                                             ; preds = %3106, %3101, %3093, %2889, %2901, %2932, %2937, %2946, %2966
  %3112 = phi i32 [ -1094995529, %2966 ], [ %2947, %2946 ], [ %2944, %2937 ], [ -1094995529, %2932 ], [ %2930, %2901 ], [ -1094995529, %2889 ], [ %3107, %3106 ], [ %3104, %3101 ], [ %3099, %3093 ]
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %2891) #5
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %2890) #5
  %3113 = bitcast %struct.Vp3DecodeContext* %19 to i8**
  %3114 = load i8*, i8** %3113, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %3114, i32 16, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.32, i64 0, i64 0)) #5
  br label %3606

3115:                                             ; preds = %2886, %3110
  %3116 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 6
  %3117 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 8
  %3118 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 19
  %3119 = load i32, i32* %3116, align 4
  %3120 = load i32, i32* %3118, align 16
  %3121 = icmp eq i32 %3120, 0
  br i1 %3121, label %3636, label %3633

3122:                                             ; preds = %3662
  %3123 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 18, i64 0
  %3124 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 11, i32 0
  %3125 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 10, i32 0
  %3126 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 9, i32 0
  %3127 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 5
  %3128 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 7
  %3129 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 29
  %3130 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 26
  %3131 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 9
  %3132 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 10
  %3133 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 15, i32 0, i64 1, i64 0
  %3134 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 16, i32 0
  %3135 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 17, i32 0
  %3136 = bitcast %struct.Vp3DecodeContext* %19 to i8**
  %3137 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 17, i32 2
  %3138 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 17, i32 3
  %3139 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 17, i32 1
  br label %3140

3140:                                             ; preds = %3122, %3531
  %3141 = phi i32 [ 0, %3122 ], [ %3534, %3531 ]
  br label %3142

3142:                                             ; preds = %3526, %3140
  %3143 = phi i64 [ 0, %3140 ], [ %3529, %3526 ]
  %3144 = phi i32 [ -559038737, %3140 ], [ %3528, %3526 ]
  %3145 = phi i32 [ -559038737, %3140 ], [ %3527, %3526 ]
  %3146 = load %struct.AVFrame*, %struct.AVFrame** %3124, align 8
  %3147 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %3146, i64 0, i32 0, i64 %3143
  %3148 = load i8*, i8** %3147, align 8
  %3149 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 47, i64 %3143
  %3150 = load i32, i32* %3149, align 4
  %3151 = sext i32 %3150 to i64
  %3152 = getelementptr inbounds i8, i8* %3148, i64 %3151
  %3153 = load %struct.AVFrame*, %struct.AVFrame** %3125, align 8
  %3154 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %3153, i64 0, i32 0, i64 %3143
  %3155 = load i8*, i8** %3154, align 8
  %3156 = getelementptr inbounds i8, i8* %3155, i64 %3151
  %3157 = load %struct.AVFrame*, %struct.AVFrame** %3126, align 8
  %3158 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %3157, i64 0, i32 0, i64 %3143
  %3159 = load i8*, i8** %3158, align 8
  %3160 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %3146, i64 0, i32 1, i64 %3143
  %3161 = load i32, i32* %3160, align 4
  %3162 = sext i32 %3161 to i64
  %3163 = load i32, i32* %3127, align 8
  %3164 = icmp ne i64 %3143, 0
  br i1 %3164, label %3165, label %3175

3165:                                             ; preds = %3142
  %3166 = load i32, i32* %3128, align 16
  %3167 = icmp ne i32 %3166, 0
  %3168 = zext i1 %3167 to i32
  %3169 = ashr i32 %3163, %3168
  %3170 = load i32, i32* %3116, align 4
  %3171 = load i32, i32* %3117, align 4
  %3172 = icmp ne i32 %3171, 0
  %3173 = zext i1 %3172 to i32
  %3174 = ashr i32 %3170, %3173
  br label %3181

3175:                                             ; preds = %3142
  %3176 = load i32, i32* %3116, align 4
  %3177 = load i32, i32* %3117, align 4
  %3178 = icmp ne i32 %3177, 0
  %3179 = zext i1 %3178 to i32
  %3180 = shl i32 %3141, %3179
  br label %3181

3181:                                             ; preds = %3175, %3165
  %3182 = phi i32 [ %3180, %3175 ], [ %3141, %3165 ]
  %3183 = phi i32 [ %3163, %3175 ], [ %3169, %3165 ]
  %3184 = phi i32 [ %3176, %3175 ], [ %3174, %3165 ]
  %3185 = phi i64 [ 0, %3175 ], [ 1, %3165 ]
  %3186 = phi i1 [ %3178, %3175 ], [ false, %3165 ]
  %3187 = zext i1 %3164 to i64
  %3188 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 51, i64 %3187
  %3189 = load [2 x i8]*, [2 x i8]** %3188, align 8
  %3190 = add i32 %3182, 1
  %3191 = zext i1 %3186 to i32
  %3192 = add i32 %3190, %3191
  %3193 = select i1 %3164, i32* %3129, i32* %3130
  %3194 = load i32, i32* %3193, align 4
  %3195 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 43, i64 %3185
  %3196 = load i32, i32* %3195, align 4
  %3197 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 44, i64 %3185
  %3198 = load i32, i32* %3197, align 4
  %3199 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 46, i64 %3143
  %3200 = load i32, i32* %3199, align 4
  br i1 %3164, label %3207, label %3201

3201:                                             ; preds = %3181
  %3202 = load %struct.AVCodecContext*, %struct.AVCodecContext** %191, align 16
  %3203 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %3202, i64 0, i32 148
  %3204 = load i32, i32* %3203, align 8
  %3205 = and i32 %3204, 1
  %3206 = icmp ne i32 %3205, 0
  br label %3207

3207:                                             ; preds = %3201, %3181
  %3208 = phi i1 [ false, %3181 ], [ %3206, %3201 ]
  %3209 = load i32, i32* %3118, align 16
  %3210 = icmp eq i32 %3209, 0
  %3211 = sub nsw i64 0, %3162
  %3212 = select i1 %3210, i64 %3211, i64 %3162
  %3213 = icmp slt i32 %3182, %3192
  br i1 %3213, label %3214, label %3526

3214:                                             ; preds = %3207
  %3215 = icmp sgt i32 %3194, 0
  %3216 = trunc i64 %3212 to i32
  %3217 = icmp slt i64 %3212, 0
  %3218 = shl nsw i64 %3212, 3
  %3219 = sub nsw i64 0, %3218
  %3220 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 73, i64 0, i64 1, i64 %3143, i64 0
  %3221 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 73, i64 0, i64 0, i64 %3143, i64 0
  %3222 = add nsw i32 %3198, -1
  %3223 = trunc i64 %3143 to i32
  br label %3224

3224:                                             ; preds = %3523, %3214
  %3225 = phi i32 [ %3182, %3214 ], [ %3524, %3523 ]
  %3226 = phi i32 [ %3144, %3214 ], [ %3509, %3523 ]
  %3227 = phi i32 [ %3145, %3214 ], [ %3508, %3523 ]
  br i1 %3215, label %3228, label %3507

3228:                                             ; preds = %3224
  %3229 = shl nsw i32 %3225, 2
  br label %3230

3230:                                             ; preds = %3504, %3228
  %3231 = phi i32 [ 0, %3228 ], [ %3505, %3504 ]
  %3232 = phi i32 [ %3226, %3228 ], [ %3501, %3504 ]
  %3233 = phi i32 [ %3227, %3228 ], [ %3500, %3504 ]
  %3234 = shl nsw i32 %3231, 2
  br label %3235

3235:                                             ; preds = %3499, %3230
  %3236 = phi i64 [ 0, %3230 ], [ %3502, %3499 ]
  %3237 = phi i32 [ %3232, %3230 ], [ %3501, %3499 ]
  %3238 = phi i32 [ %3233, %3230 ], [ %3500, %3499 ]
  %3239 = getelementptr inbounds [16 x [2 x i8]], [16 x [2 x i8]]* @hilbert_offset, i64 0, i64 %3236, i64 0
  %3240 = load i8, i8* %3239, align 2
  %3241 = zext i8 %3240 to i32
  %3242 = add nuw nsw i32 %3234, %3241
  %3243 = getelementptr inbounds [16 x [2 x i8]], [16 x [2 x i8]]* @hilbert_offset, i64 0, i64 %3236, i64 1
  %3244 = load i8, i8* %3243, align 1
  %3245 = zext i8 %3244 to i32
  %3246 = add nsw i32 %3229, %3245
  %3247 = mul nsw i32 %3246, %3196
  %3248 = add nsw i32 %3247, %3242
  %3249 = add nsw i32 %3248, %3200
  %3250 = icmp slt i32 %3242, %3196
  %3251 = icmp slt i32 %3246, %3198
  %3252 = and i1 %3250, %3251
  br i1 %3252, label %3253, label %3499

3253:                                             ; preds = %3235
  %3254 = shl nsw i32 %3246, 3
  %3255 = shl nsw i32 %3242, 3
  %3256 = mul i32 %3254, %3216
  %3257 = add i32 %3256, %3255
  br i1 %3208, label %3260, label %3258

3258:                                             ; preds = %3253
  %3259 = sext i32 %3249 to i64
  br label %3287

3260:                                             ; preds = %3253
  %3261 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %107, align 8
  %3262 = sext i32 %3249 to i64
  %3263 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %3261, i64 %3262, i32 1
  %3264 = load i8, i8* %3263, align 2
  %3265 = icmp eq i8 %3264, 1
  br i1 %3265, label %3287, label %3266

3266:                                             ; preds = %3260
  %3267 = sext i32 %3248 to i64
  %3268 = getelementptr inbounds [2 x i8], [2 x i8]* %3189, i64 %3267, i64 1
  %3269 = load i8, i8* %3268, align 1
  %3270 = sext i8 %3269 to i32
  %3271 = shl nsw i32 %3246, 4
  %3272 = load i32, i32* %3117, align 4
  %3273 = ashr i32 %3271, %3272
  %3274 = and i32 %3270, 1
  %3275 = add i8 %3264, -5
  %3276 = icmp ult i8 %3275, 2
  %3277 = select i1 %3276, %struct.ThreadFrame* %3131, %struct.ThreadFrame* %3132
  %3278 = ashr i32 %3270, 1
  %3279 = add nsw i32 %3278, %3273
  %3280 = icmp slt i32 %3279, 0
  %3281 = sub nsw i32 0, %3279
  %3282 = select i1 %3280, i32 %3281, i32 %3279
  %3283 = or i32 %3274, 8
  %3284 = add i32 %3283, %3279
  %3285 = icmp sgt i32 %3282, %3284
  %3286 = select i1 %3285, i32 %3282, i32 %3284
  tail call void @ff_thread_await_progress(%struct.ThreadFrame* %3277, i32 %3286, i32 0) #5
  br label %3287

3287:                                             ; preds = %3266, %3260, %3258
  %3288 = phi i64 [ %3259, %3258 ], [ %3262, %3260 ], [ %3262, %3266 ]
  %3289 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %107, align 8
  %3290 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %3289, i64 %3288, i32 1
  %3291 = load i8, i8* %3290, align 2
  switch i8 %3291, label %3292 [
    i8 8, label %3494
    i8 5, label %3293
    i8 6, label %3293
  ]

3292:                                             ; preds = %3287
  br label %3293

3293:                                             ; preds = %3292, %3287, %3287
  %3294 = phi i8* [ %3155, %3292 ], [ %3159, %3287 ], [ %3159, %3287 ]
  %3295 = getelementptr inbounds i8, i8* %3294, i64 %3151
  %3296 = sext i32 %3257 to i64
  %3297 = getelementptr inbounds i8, i8* %3295, i64 %3296
  switch i8 %3291, label %3298 [
    i8 5, label %3335
    i8 1, label %3335
    i8 0, label %3335
  ]

3298:                                             ; preds = %3293
  %3299 = sext i32 %3248 to i64
  %3300 = getelementptr inbounds [2 x i8], [2 x i8]* %3189, i64 %3299, i64 0
  %3301 = load i8, i8* %3300, align 1
  %3302 = sext i8 %3301 to i32
  %3303 = getelementptr inbounds [2 x i8], [2 x i8]* %3189, i64 %3299, i64 1
  %3304 = load i8, i8* %3303, align 1
  %3305 = sext i8 %3304 to i32
  %3306 = ashr i32 %3302, 1
  %3307 = add nsw i32 %3306, %3255
  %3308 = ashr i32 %3305, 1
  %3309 = add nsw i32 %3308, %3254
  %3310 = and i32 %3302, 1
  %3311 = sext i32 %3306 to i64
  %3312 = getelementptr inbounds i8, i8* %3297, i64 %3311
  %3313 = shl nsw i32 %3305, 1
  %3314 = and i32 %3313, 2
  %3315 = or i32 %3314, %3310
  %3316 = sext i32 %3308 to i64
  %3317 = mul nsw i64 %3212, %3316
  %3318 = getelementptr inbounds i8, i8* %3312, i64 %3317
  %3319 = or i32 %3309, %3307
  %3320 = icmp sgt i32 %3319, -1
  %3321 = add nsw i32 %3307, 9
  %3322 = icmp slt i32 %3321, %3183
  %3323 = and i1 %3322, %3320
  %3324 = add nsw i32 %3309, 9
  %3325 = icmp slt i32 %3324, %3184
  %3326 = and i1 %3325, %3323
  br i1 %3326, label %3342, label %3327

3327:                                             ; preds = %3298
  %3328 = load i8*, i8** %385, align 16
  %3329 = getelementptr inbounds i8, i8* %3328, i64 %3219
  %3330 = select i1 %3217, i8* %3329, i8* %3328
  %3331 = load void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %3134, align 16
  tail call void %3331(i8* %3330, i8* %3318, i64 %3212, i64 %3212, i32 9, i32 9, i32 %3307, i32 %3309, i32 %3183, i32 %3184) #5
  %3332 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %107, align 8
  %3333 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %3332, i64 %3288, i32 1
  %3334 = load i8, i8* %3333, align 2
  br label %3335

3335:                                             ; preds = %3327, %3293, %3293, %3293
  %3336 = phi i8 [ %3291, %3293 ], [ %3334, %3327 ], [ %3291, %3293 ], [ %3291, %3293 ]
  %3337 = phi i32 [ %3238, %3293 ], [ %3302, %3327 ], [ %3238, %3293 ], [ %3238, %3293 ]
  %3338 = phi i32 [ %3237, %3293 ], [ %3305, %3327 ], [ %3237, %3293 ], [ %3237, %3293 ]
  %3339 = phi i32 [ 0, %3293 ], [ %3315, %3327 ], [ 0, %3293 ], [ 0, %3293 ]
  %3340 = phi i8* [ %3297, %3293 ], [ %3330, %3327 ], [ %3297, %3293 ], [ %3297, %3293 ]
  %3341 = icmp eq i8 %3336, 1
  br i1 %3341, label %3364, label %3342

3342:                                             ; preds = %3335, %3298
  %3343 = phi i8* [ %3340, %3335 ], [ %3318, %3298 ]
  %3344 = phi i32 [ %3339, %3335 ], [ %3315, %3298 ]
  %3345 = phi i32 [ %3338, %3335 ], [ %3305, %3298 ]
  %3346 = phi i32 [ %3337, %3335 ], [ %3302, %3298 ]
  %3347 = icmp eq i32 %3344, 3
  br i1 %3347, label %3353, label %3348

3348:                                             ; preds = %3342
  %3349 = sext i32 %3344 to i64
  %3350 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 15, i32 2, i64 1, i64 %3349
  %3351 = load void (i8*, i8*, i64, i32)*, void (i8*, i8*, i64, i32)** %3350, align 8
  %3352 = getelementptr inbounds i8, i8* %3152, i64 %3296
  tail call void %3351(i8* %3352, i8* %3343, i64 %3212, i32 8) #5
  br label %3364

3353:                                             ; preds = %3342
  %3354 = xor i32 %3346, %3345
  %3355 = ashr i32 %3354, 31
  %3356 = load void (i8*, i8*, i8*, i64, i32)*, void (i8*, i8*, i8*, i64, i32)** %3135, align 16
  %3357 = getelementptr inbounds i8, i8* %3152, i64 %3296
  %3358 = sext i32 %3355 to i64
  %3359 = sub nsw i64 0, %3358
  %3360 = getelementptr inbounds i8, i8* %3343, i64 %3359
  %3361 = getelementptr inbounds i8, i8* %3343, i64 %3212
  %3362 = getelementptr inbounds i8, i8* %3361, i64 1
  %3363 = getelementptr inbounds i8, i8* %3362, i64 %3358
  tail call void %3356(i8* %3357, i8* %3360, i8* %3363, i64 %3212, i32 8) #5
  br label %3364

3364:                                             ; preds = %3353, %3348, %3335
  %3365 = phi i32 [ %3338, %3335 ], [ %3345, %3348 ], [ %3345, %3353 ]
  %3366 = phi i32 [ %3337, %3335 ], [ %3346, %3348 ], [ %3346, %3353 ]
  %3367 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %107, align 8
  %3368 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %3367, i64 %3288
  %3369 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %3367, i64 %3288, i32 1
  %3370 = load i8, i8* %3369, align 2
  %3371 = icmp eq i8 %3370, 1
  %3372 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %3367, i64 %3288, i32 2
  %3373 = load i8, i8* %3372, align 1
  %3374 = zext i8 %3373 to i64
  br i1 %3371, label %3375, label %3431

3375:                                             ; preds = %3364, %3419
  %3376 = phi i32 [ %3421, %3419 ], [ 0, %3364 ]
  %3377 = sext i32 %3376 to i64
  %3378 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 58, i64 %3143, i64 %3377
  %3379 = load i16*, i16** %3378, align 8
  %3380 = load i16, i16* %3379, align 2
  %3381 = sext i16 %3380 to i32
  %3382 = and i32 %3381, 3
  switch i32 %3382, label %3428 [
    i32 0, label %3383
    i32 1, label %3390
    i32 2, label %3408
  ]

3383:                                             ; preds = %3375
  %3384 = icmp slt i16 %3380, 5
  br i1 %3384, label %3385, label %3387

3385:                                             ; preds = %3383
  %3386 = getelementptr inbounds i16, i16* %3379, i64 1
  store i16* %3386, i16** %3378, align 8
  br label %3423

3387:                                             ; preds = %3383
  %3388 = add nsw i16 %3380, -1
  %3389 = and i16 %3388, -4
  store i16 %3389, i16* %3379, align 2
  br label %3423

3390:                                             ; preds = %3375
  %3391 = getelementptr inbounds i16, i16* %3379, i64 1
  store i16* %3391, i16** %3378, align 8
  %3392 = lshr i32 %3381, 2
  %3393 = and i32 %3392, 127
  %3394 = add nsw i32 %3393, %3376
  %3395 = icmp sgt i32 %3394, 63
  br i1 %3395, label %3396, label %3398

3396:                                             ; preds = %3390
  %3397 = load i8*, i8** %3136, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %3397, i32 16, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.39, i64 0, i64 0)) #5
  br label %3428

3398:                                             ; preds = %3390
  %3399 = ashr i16 %3380, 9
  %3400 = sext i32 %3394 to i64
  %3401 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 14, i64 %3400
  %3402 = load i8, i8* %3401, align 1
  %3403 = zext i8 %3402 to i64
  %3404 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 73, i64 %3374, i64 0, i64 %3143, i64 %3403
  %3405 = load i16, i16* %3404, align 2
  %3406 = mul i16 %3405, %3399
  %3407 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 18, i64 %3403
  store i16 %3406, i16* %3407, align 2
  br label %3419

3408:                                             ; preds = %3375
  %3409 = ashr i16 %3380, 2
  %3410 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 14, i64 %3377
  %3411 = load i8, i8* %3410, align 1
  %3412 = zext i8 %3411 to i64
  %3413 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 73, i64 %3374, i64 0, i64 %3143, i64 %3412
  %3414 = load i16, i16* %3413, align 2
  %3415 = mul i16 %3414, %3409
  %3416 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 18, i64 %3412
  store i16 %3415, i16* %3416, align 2
  %3417 = load i16*, i16** %3378, align 8
  %3418 = getelementptr inbounds i16, i16* %3417, i64 1
  store i16* %3418, i16** %3378, align 8
  br label %3419

3419:                                             ; preds = %3408, %3398
  %3420 = phi i32 [ %3376, %3408 ], [ %3394, %3398 ]
  %3421 = add nsw i32 %3420, 1
  %3422 = icmp slt i32 %3421, 64
  br i1 %3422, label %3375, label %3423

3423:                                             ; preds = %3419, %3387, %3385
  %3424 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %3368, i64 0, i32 0
  %3425 = load i16, i16* %3424, align 2
  %3426 = load i16, i16* %3221, align 16
  %3427 = mul i16 %3426, %3425
  store i16 %3427, i16* %3123, align 2
  br label %3428

3428:                                             ; preds = %3375, %3423, %3396
  %3429 = load void (i8*, i64, i16*)*, void (i8*, i64, i16*)** %3139, align 8
  %3430 = getelementptr inbounds i8, i8* %3152, i64 %3296
  tail call void %3429(i8* %3430, i64 %3212, i16* %3123) #5
  br label %3499

3431:                                             ; preds = %3364, %3475
  %3432 = phi i32 [ %3477, %3475 ], [ 0, %3364 ]
  %3433 = sext i32 %3432 to i64
  %3434 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 58, i64 %3143, i64 %3433
  %3435 = load i16*, i16** %3434, align 8
  %3436 = load i16, i16* %3435, align 2
  %3437 = sext i16 %3436 to i32
  %3438 = and i32 %3437, 3
  switch i32 %3438, label %3485 [
    i32 0, label %3439
    i32 1, label %3446
    i32 2, label %3464
  ]

3439:                                             ; preds = %3431
  %3440 = icmp slt i16 %3436, 5
  br i1 %3440, label %3441, label %3443

3441:                                             ; preds = %3439
  %3442 = getelementptr inbounds i16, i16* %3435, i64 1
  store i16* %3442, i16** %3434, align 8
  br label %3479

3443:                                             ; preds = %3439
  %3444 = add nsw i16 %3436, -1
  %3445 = and i16 %3444, -4
  store i16 %3445, i16* %3435, align 2
  br label %3479

3446:                                             ; preds = %3431
  %3447 = getelementptr inbounds i16, i16* %3435, i64 1
  store i16* %3447, i16** %3434, align 8
  %3448 = lshr i32 %3437, 2
  %3449 = and i32 %3448, 127
  %3450 = add nsw i32 %3449, %3432
  %3451 = icmp sgt i32 %3450, 63
  br i1 %3451, label %3452, label %3454

3452:                                             ; preds = %3446
  %3453 = load i8*, i8** %3136, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %3453, i32 16, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.39, i64 0, i64 0)) #5
  br label %3488

3454:                                             ; preds = %3446
  %3455 = ashr i16 %3436, 9
  %3456 = sext i32 %3450 to i64
  %3457 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 14, i64 %3456
  %3458 = load i8, i8* %3457, align 1
  %3459 = zext i8 %3458 to i64
  %3460 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 73, i64 %3374, i64 1, i64 %3143, i64 %3459
  %3461 = load i16, i16* %3460, align 2
  %3462 = mul i16 %3461, %3455
  %3463 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 18, i64 %3459
  store i16 %3462, i16* %3463, align 2
  br label %3475

3464:                                             ; preds = %3431
  %3465 = ashr i16 %3436, 2
  %3466 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 14, i64 %3433
  %3467 = load i8, i8* %3466, align 1
  %3468 = zext i8 %3467 to i64
  %3469 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 73, i64 %3374, i64 1, i64 %3143, i64 %3468
  %3470 = load i16, i16* %3469, align 2
  %3471 = mul i16 %3470, %3465
  %3472 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 18, i64 %3468
  store i16 %3471, i16* %3472, align 2
  %3473 = load i16*, i16** %3434, align 8
  %3474 = getelementptr inbounds i16, i16* %3473, i64 1
  store i16* %3474, i16** %3434, align 8
  br label %3475

3475:                                             ; preds = %3464, %3454
  %3476 = phi i32 [ %3432, %3464 ], [ %3450, %3454 ]
  %3477 = add nsw i32 %3476, 1
  %3478 = icmp slt i32 %3477, 64
  br i1 %3478, label %3431, label %3479

3479:                                             ; preds = %3475, %3443, %3441
  %3480 = phi i32 [ %3432, %3443 ], [ %3432, %3441 ], [ %3476, %3475 ]
  %3481 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %3368, i64 0, i32 0
  %3482 = load i16, i16* %3481, align 2
  %3483 = load i16, i16* %3220, align 16
  %3484 = mul i16 %3483, %3482
  store i16 %3484, i16* %3123, align 2
  br label %3485

3485:                                             ; preds = %3431, %3479
  %3486 = phi i32 [ %3480, %3479 ], [ %3432, %3431 ]
  %3487 = icmp eq i32 %3486, 0
  br i1 %3487, label %3491, label %3488

3488:                                             ; preds = %3485, %3452
  %3489 = load void (i8*, i64, i16*)*, void (i8*, i64, i16*)** %3137, align 16
  %3490 = getelementptr inbounds i8, i8* %3152, i64 %3296
  tail call void %3489(i8* %3490, i64 %3212, i16* %3123) #5
  br label %3499

3491:                                             ; preds = %3485
  %3492 = load void (i8*, i64, i16*)*, void (i8*, i64, i16*)** %3138, align 8
  %3493 = getelementptr inbounds i8, i8* %3152, i64 %3296
  tail call void %3492(i8* %3493, i64 %3212, i16* %3123) #5
  br label %3499

3494:                                             ; preds = %3287
  %3495 = load void (i8*, i8*, i64, i32)*, void (i8*, i8*, i64, i32)** %3133, align 16
  %3496 = sext i32 %3257 to i64
  %3497 = getelementptr inbounds i8, i8* %3152, i64 %3496
  %3498 = getelementptr inbounds i8, i8* %3156, i64 %3496
  tail call void %3495(i8* %3497, i8* %3498, i64 %3212, i32 8) #5
  br label %3499

3499:                                             ; preds = %3494, %3491, %3488, %3428, %3235
  %3500 = phi i32 [ %3238, %3235 ], [ %3366, %3428 ], [ %3366, %3488 ], [ %3366, %3491 ], [ %3238, %3494 ]
  %3501 = phi i32 [ %3237, %3235 ], [ %3365, %3428 ], [ %3365, %3488 ], [ %3365, %3491 ], [ %3237, %3494 ]
  %3502 = add nuw nsw i64 %3236, 1
  %3503 = icmp eq i64 %3502, 16
  br i1 %3503, label %3504, label %3235

3504:                                             ; preds = %3499
  %3505 = add nuw nsw i32 %3231, 1
  %3506 = icmp eq i32 %3505, %3194
  br i1 %3506, label %3507, label %3230

3507:                                             ; preds = %3504, %3224
  %3508 = phi i32 [ %3227, %3224 ], [ %3500, %3504 ]
  %3509 = phi i32 [ %3226, %3224 ], [ %3501, %3504 ]
  %3510 = load i32, i32* %492, align 4
  %3511 = icmp slt i32 %3510, 2
  br i1 %3511, label %3512, label %3523

3512:                                             ; preds = %3507
  %3513 = load i32, i32* %224, align 8
  %3514 = icmp eq i32 %3513, 0
  br i1 %3514, label %3515, label %3523

3515:                                             ; preds = %3512
  %3516 = shl nsw i32 %3225, 2
  %3517 = icmp ne i32 %3225, 0
  %3518 = zext i1 %3517 to i32
  %3519 = sub nsw i32 %3516, %3518
  %3520 = or i32 %3516, 3
  %3521 = icmp slt i32 %3520, %3198
  %3522 = select i1 %3521, i32 %3520, i32 %3222
  tail call fastcc void @apply_loop_filter(%struct.Vp3DecodeContext* %19, i32 %3223, i32 %3519, i32 %3522) #5
  br label %3523

3523:                                             ; preds = %3515, %3512, %3507
  %3524 = add i32 %3225, 1
  %3525 = icmp eq i32 %3524, %3192
  br i1 %3525, label %3526, label %3224

3526:                                             ; preds = %3523, %3207
  %3527 = phi i32 [ %3145, %3207 ], [ %3508, %3523 ]
  %3528 = phi i32 [ %3144, %3207 ], [ %3509, %3523 ]
  %3529 = add nuw nsw i64 %3143, 1
  %3530 = icmp eq i64 %3529, 3
  br i1 %3530, label %3531, label %3142

3531:                                             ; preds = %3526
  %3532 = load i32, i32* %3117, align 4
  %3533 = shl i32 32, %3532
  %3534 = add nuw nsw i32 %3141, 1
  %3535 = mul nsw i32 %3533, %3534
  %3536 = add nsw i32 %3535, -16
  %3537 = load i32, i32* %3116, align 4
  %3538 = add nsw i32 %3537, -16
  %3539 = icmp sgt i32 %3536, %3538
  %3540 = select i1 %3539, i32 %3538, i32 %3536
  tail call fastcc void @vp3_draw_horiz_band(%struct.Vp3DecodeContext* %19, i32 %3540) #5
  %3541 = load i32, i32* %3666, align 4
  %3542 = icmp slt i32 %3534, %3541
  br i1 %3542, label %3140, label %3543

3543:                                             ; preds = %3531, %3662
  %3544 = load i32, i32* %492, align 4
  %3545 = icmp slt i32 %3544, 2
  br i1 %3545, label %3617, label %3546

3546:                                             ; preds = %3617, %3543
  %3547 = load i32, i32* %3116, align 4
  tail call fastcc void @vp3_draw_horiz_band(%struct.Vp3DecodeContext* %19, i32 %3547)
  %3548 = load %struct.AVFrame*, %struct.AVFrame** %376, align 8
  %3549 = tail call i32 @av_frame_ref(%struct.AVFrame* %12, %struct.AVFrame* %3548) #5
  %3550 = icmp slt i32 %3549, 0
  br i1 %3550, label %3615, label %3551

3551:                                             ; preds = %3546
  %3552 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 48
  %3553 = load i8, i8* %3552, align 8
  %3554 = zext i8 %3553 to i64
  %3555 = getelementptr inbounds i8, i8* %1, i64 512
  %3556 = bitcast i8* %3555 to i64*
  store i64 %3554, i64* %3556, align 8
  %3557 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 22
  %3558 = load i32, i32* %3557, align 4
  %3559 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 20
  %3560 = load i32, i32* %3559, align 4
  %3561 = sub i32 %3558, %3560
  %3562 = load i8, i8* %3552, align 8
  %3563 = zext i8 %3562 to i32
  %3564 = sub i32 %3561, %3563
  %3565 = sext i32 %3564 to i64
  %3566 = getelementptr inbounds i8, i8* %1, i64 520
  %3567 = bitcast i8* %3566 to i64*
  store i64 %3565, i64* %3567, align 8
  %3568 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 49
  %3569 = load i8, i8* %3568, align 1
  %3570 = zext i8 %3569 to i64
  %3571 = getelementptr inbounds i8, i8* %1, i64 496
  %3572 = bitcast i8* %3571 to i64*
  store i64 %3570, i64* %3572, align 8
  %3573 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 23
  %3574 = load i32, i32* %3573, align 8
  %3575 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 21
  %3576 = load i32, i32* %3575, align 8
  %3577 = sub i32 %3574, %3576
  %3578 = load i8, i8* %3568, align 1
  %3579 = zext i8 %3578 to i32
  %3580 = sub i32 %3577, %3579
  %3581 = sext i32 %3580 to i64
  %3582 = getelementptr inbounds i8, i8* %1, i64 504
  %3583 = bitcast i8* %3582 to i64*
  store i64 %3581, i64* %3583, align 8
  store i32 1, i32* %2, align 4
  %3584 = load %struct.AVCodecContext*, %struct.AVCodecContext** %191, align 16
  %3585 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %3584, i64 0, i32 148
  %3586 = load i32, i32* %3585, align 8
  %3587 = and i32 %3586, 1
  %3588 = icmp eq i32 %3587, 0
  br i1 %3588, label %3589, label %3605

3589:                                             ; preds = %3551
  %3590 = load %struct.Vp3DecodeContext*, %struct.Vp3DecodeContext** %18, align 8
  %3591 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %3590, i64 0, i32 10
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %0, %struct.ThreadFrame* %3591) #5
  %3592 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %3590, i64 0, i32 11
  %3593 = tail call i32 @ff_thread_ref_frame(%struct.ThreadFrame* %3591, %struct.ThreadFrame* %3592) #5
  %3594 = icmp slt i32 %3593, 0
  br i1 %3594, label %3595, label %3596

3595:                                             ; preds = %3589
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %0, %struct.ThreadFrame* %3592) #5
  br label %3615

3596:                                             ; preds = %3589
  %3597 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %3590, i64 0, i32 12
  %3598 = load i32, i32* %3597, align 8
  %3599 = icmp eq i32 %3598, 0
  br i1 %3599, label %3600, label %3601

3600:                                             ; preds = %3596
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %0, %struct.ThreadFrame* %3592) #5
  br label %3605

3601:                                             ; preds = %3596
  %3602 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %3590, i64 0, i32 9
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %0, %struct.ThreadFrame* %3602) #5
  %3603 = tail call i32 @ff_thread_ref_frame(%struct.ThreadFrame* %3602, %struct.ThreadFrame* %3592) #5
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %0, %struct.ThreadFrame* %3592) #5
  %3604 = icmp slt i32 %3603, 0
  br i1 %3604, label %3615, label %3605

3605:                                             ; preds = %3600, %3551, %3601
  br label %3615

3606:                                             ; preds = %480, %473, %372, %3111, %2883, %2708, %1618, %1063
  %3607 = phi i32 [ %382, %372 ], [ %1065, %1063 ], [ -1, %1618 ], [ -1, %2708 ], [ -1, %2883 ], [ %3112, %3111 ], [ %478, %473 ], [ %482, %480 ]
  tail call void @ff_thread_report_progress(%struct.ThreadFrame* %375, i32 2147483647, i32 0) #5
  %3608 = load %struct.AVCodecContext*, %struct.AVCodecContext** %191, align 16
  %3609 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %3608, i64 0, i32 148
  %3610 = load i32, i32* %3609, align 8
  %3611 = and i32 %3610, 1
  %3612 = icmp eq i32 %3611, 0
  br i1 %3612, label %3613, label %3615

3613:                                             ; preds = %3606
  %3614 = load %struct.AVFrame*, %struct.AVFrame** %376, align 8
  tail call void @av_frame_unref(%struct.AVFrame* %3614) #5
  br label %3615

3615:                                             ; preds = %365, %4, %3595, %3613, %3606, %3601, %3546, %67, %80, %90, %93, %77, %87, %3605, %110
  %3616 = phi i32 [ %16, %3605 ], [ -1, %110 ], [ -1094995529, %4 ], [ -1163346256, %67 ], [ %81, %80 ], [ %91, %90 ], [ -1, %93 ], [ %16, %77 ], [ %16, %87 ], [ %3549, %3546 ], [ %3603, %3601 ], [ %3607, %3606 ], [ %3607, %3613 ], [ %3593, %3595 ], [ %16, %365 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21) #5
  ret i32 %3616

3617:                                             ; preds = %3543
  %3618 = load i32, i32* %3116, align 4
  %3619 = ashr i32 %3618, 3
  %3620 = add nsw i32 %3619, -1
  tail call fastcc void @apply_loop_filter(%struct.Vp3DecodeContext* %19, i32 0, i32 %3620, i32 %3619)
  %3621 = load i32, i32* %3116, align 4
  %3622 = load i32, i32* %3117, align 4
  %3623 = icmp eq i32 %3622, 0
  %3624 = select i1 %3623, i32 3, i32 4
  %3625 = ashr i32 %3621, %3624
  %3626 = add nsw i32 %3625, -1
  tail call fastcc void @apply_loop_filter(%struct.Vp3DecodeContext* %19, i32 1, i32 %3626, i32 %3625)
  %3627 = load i32, i32* %3116, align 4
  %3628 = load i32, i32* %3117, align 4
  %3629 = icmp eq i32 %3628, 0
  %3630 = select i1 %3629, i32 3, i32 4
  %3631 = ashr i32 %3627, %3630
  %3632 = add nsw i32 %3631, -1
  tail call fastcc void @apply_loop_filter(%struct.Vp3DecodeContext* %19, i32 2, i32 %3632, i32 %3631)
  br label %3546

3633:                                             ; preds = %3115
  %3634 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 47, i64 0
  store i32 0, i32* %3634, align 4
  %3635 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 47, i64 1
  store i32 0, i32* %3635, align 4
  br label %3662

3636:                                             ; preds = %3115
  %3637 = add nsw i32 %3119, -1
  %3638 = load %struct.AVFrame*, %struct.AVFrame** %376, align 8
  %3639 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %3638, i64 0, i32 1, i64 0
  %3640 = load i32, i32* %3639, align 4
  %3641 = mul nsw i32 %3640, %3637
  %3642 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 47, i64 0
  store i32 %3641, i32* %3642, align 4
  %3643 = load i32, i32* %3117, align 4
  %3644 = icmp ne i32 %3643, 0
  %3645 = zext i1 %3644 to i32
  %3646 = ashr i32 %3119, %3645
  %3647 = add nsw i32 %3646, -1
  %3648 = load %struct.AVFrame*, %struct.AVFrame** %376, align 8
  %3649 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %3648, i64 0, i32 1, i64 1
  %3650 = load i32, i32* %3649, align 4
  %3651 = mul nsw i32 %3650, %3647
  %3652 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 47, i64 1
  store i32 %3651, i32* %3652, align 4
  %3653 = load i32, i32* %3117, align 4
  %3654 = icmp ne i32 %3653, 0
  %3655 = zext i1 %3654 to i32
  %3656 = ashr i32 %3119, %3655
  %3657 = add nsw i32 %3656, -1
  %3658 = load %struct.AVFrame*, %struct.AVFrame** %376, align 8
  %3659 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %3658, i64 0, i32 1, i64 2
  %3660 = load i32, i32* %3659, align 4
  %3661 = mul nsw i32 %3660, %3657
  br label %3662

3662:                                             ; preds = %3636, %3633
  %3663 = phi i32 [ %3661, %3636 ], [ 0, %3633 ]
  %3664 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 47, i64 2
  store i32 %3663, i32* %3664, align 4
  %3665 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 20
  store i32 0, i32* %3665, align 4
  %3666 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %19, i64 0, i32 30
  %3667 = load i32, i32* %3666, align 4
  %3668 = icmp sgt i32 %3667, 0
  br i1 %3668, label %3122, label %3543

3669:                                             ; preds = %904
  %3670 = load i32*, i32** %882, align 8
  %3671 = add nsw i32 %905, 1
  %3672 = sext i32 %905 to i64
  %3673 = getelementptr inbounds i32, i32* %3670, i64 %3672
  store i32 %910, i32* %3673, align 4
  br label %3674

3674:                                             ; preds = %3669, %904
  %3675 = phi i32 [ %3671, %3669 ], [ %905, %904 ]
  %3676 = add nuw nsw i64 %892, 2
  %3677 = icmp eq i64 %3676, 16
  br i1 %3677, label %912, label %891
}

; Function Attrs: cold nounwind optsize ssp uwtable
define internal i32 @vp3_decode_end(%struct.AVCodecContext*) #1 {
  %2 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %3 = bitcast i8** %2 to %struct.Vp3DecodeContext**
  %4 = load %struct.Vp3DecodeContext*, %struct.Vp3DecodeContext** %3, align 8
  tail call fastcc void @free_tables(%struct.AVCodecContext* %0) #7
  %5 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 76
  %6 = bitcast i8** %5 to i8*
  tail call void @av_freep(i8* %6) #5
  %7 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 2
  store i32 0, i32* %7, align 4
  tail call void @vp3_decode_flush(%struct.AVCodecContext* %0)
  %8 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 11, i32 0
  tail call void @av_frame_free(%struct.AVFrame** %8) #5
  %9 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 10, i32 0
  tail call void @av_frame_free(%struct.AVFrame** %9) #5
  %10 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 9, i32 0
  tail call void @av_frame_free(%struct.AVFrame** %10) #5
  br label %11

11:                                               ; preds = %11, %1
  %12 = phi i64 [ 0, %1 ], [ %14, %11 ]
  %13 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 66, i64 %12
  tail call void @ff_free_vlc(%struct.VLC* %13) #5
  %14 = add nuw nsw i64 %12, 1
  %15 = icmp eq i64 %14, 80
  br i1 %15, label %16, label %11

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 67
  tail call void @ff_free_vlc(%struct.VLC* %17) #5
  %18 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 68
  tail call void @ff_free_vlc(%struct.VLC* %18) #5
  %19 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 70
  tail call void @ff_free_vlc(%struct.VLC* %19) #5
  %20 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 71
  tail call void @ff_free_vlc(%struct.VLC* %20) #5
  br label %21

21:                                               ; preds = %28, %16
  %22 = phi i64 [ 0, %16 ], [ %29, %28 ]
  br label %23

23:                                               ; preds = %23, %21
  %24 = phi i64 [ 0, %21 ], [ %26, %23 ]
  %25 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 72, i64 %22, i64 %24
  tail call void @ff_free_vlc(%struct.VLC* %25) #5
  %26 = add nuw nsw i64 %24, 1
  %27 = icmp eq i64 %26, 7
  br i1 %27, label %28, label %23

28:                                               ; preds = %23
  %29 = add nuw nsw i64 %22, 1
  %30 = icmp eq i64 %29, 2
  br i1 %30, label %31, label %21

31:                                               ; preds = %28, %31
  %32 = phi i64 [ %34, %31 ], [ 0, %28 ]
  %33 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 69, i64 %32
  tail call void @ff_free_vlc(%struct.VLC* %33) #5
  %34 = add nuw nsw i64 %32, 1
  %35 = icmp eq i64 %34, 2
  br i1 %35, label %36, label %31

36:                                               ; preds = %31
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal void @vp3_decode_flush(%struct.AVCodecContext*) #0 {
  %2 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %3 = bitcast i8** %2 to %struct.Vp3DecodeContext**
  %4 = load %struct.Vp3DecodeContext*, %struct.Vp3DecodeContext** %3, align 8
  %5 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 9
  %6 = getelementptr inbounds %struct.ThreadFrame, %struct.ThreadFrame* %5, i64 0, i32 0
  %7 = load %struct.AVFrame*, %struct.AVFrame** %6, align 8
  %8 = icmp eq %struct.AVFrame* %7, null
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %0, %struct.ThreadFrame* %5) #5
  br label %10

10:                                               ; preds = %1, %9
  %11 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 10
  %12 = getelementptr inbounds %struct.ThreadFrame, %struct.ThreadFrame* %11, i64 0, i32 0
  %13 = load %struct.AVFrame*, %struct.AVFrame** %12, align 8
  %14 = icmp eq %struct.AVFrame* %13, null
  br i1 %14, label %16, label %15

15:                                               ; preds = %10
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %0, %struct.ThreadFrame* %11) #5
  br label %16

16:                                               ; preds = %10, %15
  %17 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 11
  %18 = getelementptr inbounds %struct.ThreadFrame, %struct.ThreadFrame* %17, i64 0, i32 0
  %19 = load %struct.AVFrame*, %struct.AVFrame** %18, align 8
  %20 = icmp eq %struct.AVFrame* %19, null
  br i1 %20, label %22, label %21

21:                                               ; preds = %16
  tail call void @ff_thread_release_buffer(%struct.AVCodecContext* %0, %struct.ThreadFrame* %17) #5
  br label %22

22:                                               ; preds = %16, %21
  ret void
}

; Function Attrs: cold nounwind optsize ssp uwtable
define internal i32 @vp3_decode_init(%struct.AVCodecContext*) #1 {
  %2 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %3 = bitcast i8** %2 to %struct.Vp3DecodeContext**
  %4 = load %struct.Vp3DecodeContext*, %struct.Vp3DecodeContext** %3, align 8
  %5 = tail call fastcc i32 @init_frames(%struct.Vp3DecodeContext* %4) #7
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %244, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 5
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 808734806
  br i1 %10, label %11, label %13

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 4
  store i32 3, i32* %12, align 4
  br label %18

13:                                               ; preds = %7
  %14 = icmp eq i32 %9, 808669270
  %15 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 4
  br i1 %14, label %16, label %17

16:                                               ; preds = %13
  store i32 0, i32* %15, align 4
  br label %18

17:                                               ; preds = %13
  store i32 1, i32* %15, align 4
  br label %18

18:                                               ; preds = %16, %17, %11
  %19 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 0
  store %struct.AVCodecContext* %0, %struct.AVCodecContext** %19, align 16
  %20 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 22
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %21, 15
  %23 = and i32 %22, -16
  %24 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 5
  store i32 %23, i32* %24, align 8
  %25 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 23
  %26 = load i32, i32* %25, align 8
  %27 = add nsw i32 %26, 15
  %28 = and i32 %27, -16
  %29 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 6
  store i32 %28, i32* %29, align 4
  %30 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 4
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 30
  br i1 %32, label %35, label %33

33:                                               ; preds = %18
  %34 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 25
  store i32 0, i32* %34, align 8
  br label %35

35:                                               ; preds = %18, %33
  %36 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 79
  store i32 2, i32* %36, align 4
  %37 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 15
  %38 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 13
  %39 = load i32, i32* %38, align 4
  %40 = or i32 %39, 8388608
  tail call void @ff_hpeldsp_init(%struct.HpelDSPContext* %37, i32 %40) #5
  %41 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 16
  tail call void @ff_videodsp_init(%struct.VideoDSPContext* %41, i32 8) #5
  %42 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 17
  %43 = load i32, i32* %38, align 4
  tail call void @ff_vp3dsp_init(%struct.VP3DSPContext* %42, i32 %43) #5
  br label %44

44:                                               ; preds = %44, %35
  %45 = phi i64 [ 0, %35 ], [ %61, %44 ]
  %46 = trunc i64 %45 to i32
  %47 = lshr i32 %46, 3
  %48 = trunc i64 %45 to i32
  %49 = shl i32 %48, 3
  %50 = and i32 %49, 56
  %51 = or i32 %50, %47
  %52 = trunc i32 %51 to i8
  %53 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 13, i64 %45
  store i8 %52, i8* %53, align 1
  %54 = getelementptr inbounds [64 x i8], [64 x i8]* @ff_zigzag_direct, i64 0, i64 %45
  %55 = load i8, i8* %54, align 1
  %56 = lshr i8 %55, 3
  %57 = shl i8 %55, 3
  %58 = and i8 %57, 56
  %59 = or i8 %58, %56
  %60 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 14, i64 %45
  store i8 %59, i8* %60, align 1
  %61 = add nuw nsw i64 %45, 1
  %62 = icmp eq i64 %61, 64
  br i1 %62, label %63, label %44

63:                                               ; preds = %44
  %64 = getelementptr %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 22, i64 0
  %65 = bitcast i32* %64 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %65, i8 -1, i64 12, i1 false)
  %66 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 25
  %67 = load i32, i32* %66, align 8
  %68 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 7
  %69 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 8
  %70 = tail call i32 @av_pix_fmt_get_chroma_sub_sample(i32 %67, i32* %68, i32* %69) #5
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %244

72:                                               ; preds = %63
  %73 = load i32, i32* %24, align 8
  %74 = add nsw i32 %73, 31
  %75 = sdiv i32 %74, 32
  %76 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 26
  store i32 %75, i32* %76, align 4
  %77 = load i32, i32* %29, align 4
  %78 = add nsw i32 %77, 31
  %79 = sdiv i32 %78, 32
  %80 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 27
  store i32 %79, i32* %80, align 16
  %81 = mul nsw i32 %79, %75
  %82 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 28
  store i32 %81, i32* %82, align 4
  %83 = load i32, i32* %68, align 16
  %84 = ashr i32 %73, %83
  %85 = load i32, i32* %69, align 4
  %86 = ashr i32 %77, %85
  %87 = add nsw i32 %84, 31
  %88 = sdiv i32 %87, 32
  %89 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 29
  store i32 %88, i32* %89, align 8
  %90 = add nsw i32 %86, 31
  %91 = sdiv i32 %90, 32
  %92 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 30
  store i32 %91, i32* %92, align 4
  %93 = mul nsw i32 %91, %88
  %94 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 31
  store i32 %93, i32* %94, align 16
  %95 = shl i32 %93, 1
  %96 = add nsw i32 %95, %81
  %97 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 25
  store i32 %96, i32* %97, align 8
  %98 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 32
  store i32 %81, i32* %98, align 4
  %99 = add nsw i32 %93, %81
  %100 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 33
  store i32 %99, i32* %100, align 8
  %101 = add nsw i32 %73, 15
  %102 = sdiv i32 %101, 16
  %103 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 36
  store i32 %102, i32* %103, align 4
  %104 = add nsw i32 %77, 15
  %105 = sdiv i32 %104, 16
  %106 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 37
  store i32 %105, i32* %106, align 16
  %107 = mul nsw i32 %105, %102
  %108 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 35
  store i32 %107, i32* %108, align 8
  %109 = add nsw i32 %84, 15
  %110 = sdiv i32 %109, 16
  %111 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 39
  store i32 %110, i32* %111, align 8
  %112 = add nsw i32 %86, 15
  %113 = sdiv i32 %112, 16
  %114 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 40
  store i32 %113, i32* %114, align 4
  %115 = mul nsw i32 %113, %110
  %116 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 38
  store i32 %115, i32* %116, align 4
  %117 = shl i32 %115, 1
  %118 = add nsw i32 %117, %107
  %119 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 41
  store i32 %118, i32* %119, align 16
  %120 = sdiv i32 %73, 8
  %121 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 43, i64 0
  store i32 %120, i32* %121, align 8
  %122 = sdiv i32 %77, 8
  %123 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 44, i64 0
  store i32 %122, i32* %123, align 16
  %124 = ashr i32 %120, %83
  %125 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 43, i64 1
  store i32 %124, i32* %125, align 4
  %126 = ashr i32 %122, %85
  %127 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 44, i64 1
  store i32 %126, i32* %127, align 4
  %128 = mul nsw i32 %122, %120
  %129 = mul nsw i32 %126, %124
  %130 = shl i32 %129, 1
  %131 = add nsw i32 %130, %128
  %132 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 42
  store i32 %131, i32* %132, align 4
  %133 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 46, i64 1
  store i32 %128, i32* %133, align 4
  %134 = add nsw i32 %129, %128
  %135 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 46, i64 2
  store i32 %134, i32* %135, align 8
  %136 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 2
  %137 = load i32, i32* %136, align 4
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %141, label %139

139:                                              ; preds = %72
  %140 = bitcast %struct.AVCodecContext* %0 to i8*
  br label %214

141:                                              ; preds = %72
  %142 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 4
  %143 = load i32, i32* %142, align 4
  %144 = icmp slt i32 %143, 2
  %145 = select i1 %144, [64 x i8]* @vp31_dc_scale_factor, [64 x i8]* @vp4_y_dc_scale_factor
  %146 = select i1 %144, [64 x i8]* @vp31_dc_scale_factor, [64 x i8]* @vp4_uv_dc_scale_factor
  %147 = select i1 %144, [64 x i16]* @vp31_ac_scale_factor, [64 x i16]* @vp4_ac_scale_factor
  %148 = select i1 %144, [64 x i8]* @vp31_intra_y_dequant, [64 x i8]* @vp4_generic_dequant
  %149 = select i1 %144, [64 x i8]* @vp31_intra_c_dequant, [64 x i8]* @vp4_generic_dequant
  %150 = select i1 %144, [64 x i8]* @vp31_inter_dequant, [64 x i8]* @vp4_generic_dequant
  %151 = select i1 %144, [64 x i8]* bitcast (<{ [48 x i8], [16 x i8] }>* @vp31_filter_limit_values to [64 x i8]*), [64 x i8]* @vp4_filter_limit_values
  br label %152

152:                                              ; preds = %152, %141
  %153 = phi i64 [ 0, %141 ], [ %178, %152 ]
  %154 = getelementptr inbounds [64 x i8], [64 x i8]* %145, i64 0, i64 %153
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i16
  %157 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 52, i64 0, i64 %153
  store i16 %156, i16* %157, align 2
  %158 = getelementptr inbounds [64 x i8], [64 x i8]* %146, i64 0, i64 %153
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i16
  %161 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 52, i64 1, i64 %153
  store i16 %160, i16* %161, align 2
  %162 = getelementptr inbounds [64 x i16], [64 x i16]* %147, i64 0, i64 %153
  %163 = load i16, i16* %162, align 2
  %164 = zext i16 %163 to i32
  %165 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 53, i64 %153
  store i32 %164, i32* %165, align 4
  %166 = getelementptr inbounds [64 x i8], [64 x i8]* %148, i64 0, i64 %153
  %167 = load i8, i8* %166, align 1
  %168 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 54, i64 0, i64 %153
  store i8 %167, i8* %168, align 1
  %169 = getelementptr inbounds [64 x i8], [64 x i8]* %149, i64 0, i64 %153
  %170 = load i8, i8* %169, align 1
  %171 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 54, i64 1, i64 %153
  store i8 %170, i8* %171, align 1
  %172 = getelementptr inbounds [64 x i8], [64 x i8]* %150, i64 0, i64 %153
  %173 = load i8, i8* %172, align 1
  %174 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 54, i64 2, i64 %153
  store i8 %173, i8* %174, align 1
  %175 = getelementptr inbounds [64 x i8], [64 x i8]* %151, i64 0, i64 %153
  %176 = load i8, i8* %175, align 1
  %177 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 78, i64 %153
  store i8 %176, i8* %177, align 1
  %178 = add nuw nsw i64 %153, 1
  %179 = icmp eq i64 %178, 64
  br i1 %179, label %180, label %152

180:                                              ; preds = %152, %197
  %181 = phi i64 [ %198, %197 ], [ 0, %152 ]
  %182 = icmp eq i64 %181, 0
  %183 = trunc i64 %181 to i16
  %184 = shl i16 %183, 1
  br label %185

185:                                              ; preds = %185, %180
  %186 = phi i64 [ 0, %180 ], [ %195, %185 ]
  %187 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 55, i64 %181, i64 %186
  store i8 1, i8* %187, align 1
  %188 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 56, i64 %181, i64 %186, i64 0
  store i8 63, i8* %188, align 2
  %189 = icmp ne i64 %186, 0
  %190 = and i1 %182, %189
  %191 = zext i1 %190 to i16
  %192 = or i16 %184, %191
  %193 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 57, i64 %181, i64 %186, i64 1
  store i16 %192, i16* %193, align 2
  %194 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 57, i64 %181, i64 %186, i64 0
  store i16 %192, i16* %194, align 2
  %195 = add nuw nsw i64 %186, 1
  %196 = icmp eq i64 %195, 3
  br i1 %196, label %197, label %185

197:                                              ; preds = %185
  %198 = add nuw nsw i64 %181, 1
  %199 = icmp eq i64 %198, 2
  br i1 %199, label %200, label %180

200:                                              ; preds = %197
  %201 = bitcast %struct.AVCodecContext* %0 to i8*
  br i1 %144, label %204, label %225

202:                                              ; preds = %204
  %203 = icmp eq i64 %211, 80
  br i1 %203, label %225, label %204

204:                                              ; preds = %200, %202
  %205 = phi i64 [ %211, %202 ], [ 0, %200 ]
  %206 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 66, i64 %205
  %207 = getelementptr inbounds [80 x [32 x [2 x i8]]], [80 x [32 x [2 x i8]]]* @vp3_bias, i64 0, i64 %205, i64 0, i64 1
  %208 = getelementptr inbounds [80 x [32 x [2 x i8]]], [80 x [32 x [2 x i8]]]* @vp3_bias, i64 0, i64 %205, i64 0, i64 0
  %209 = tail call i32 @ff_init_vlc_from_lengths(%struct.VLC* %206, i32 11, i32 32, i8* %207, i32 2, i8* %208, i32 2, i32 1, i32 0, i32 0, i8* %201) #5
  %210 = icmp slt i32 %209, 0
  %211 = add nuw nsw i64 %205, 1
  br i1 %210, label %244, label %202

212:                                              ; preds = %214
  %213 = icmp eq i64 %224, 80
  br i1 %213, label %225, label %214

214:                                              ; preds = %212, %139
  %215 = phi i64 [ 0, %139 ], [ %224, %212 ]
  %216 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 66, i64 %215
  %217 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 77, i64 %215, i32 1
  %218 = load i8, i8* %217, align 1
  %219 = zext i8 %218 to i32
  %220 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 77, i64 %215, i32 0, i64 0, i32 0
  %221 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 77, i64 %215, i32 0, i64 0, i32 1
  %222 = tail call i32 @ff_init_vlc_from_lengths(%struct.VLC* %216, i32 11, i32 %219, i8* %220, i32 2, i8* %221, i32 2, i32 1, i32 0, i32 0, i8* %140) #5
  %223 = icmp slt i32 %222, 0
  %224 = add nuw nsw i64 %215, 1
  br i1 %223, label %244, label %212

225:                                              ; preds = %212, %202, %200
  %226 = phi i8* [ %201, %200 ], [ %201, %202 ], [ %140, %212 ]
  %227 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 67
  %228 = tail call i32 @ff_init_vlc_from_lengths(%struct.VLC* %227, i32 6, i32 34, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @superblock_run_length_vlc_lens, i64 0, i64 0), i32 1, i8* null, i32 0, i32 0, i32 1, i32 0, i8* %226) #5
  %229 = icmp slt i32 %228, 0
  br i1 %229, label %244, label %230

230:                                              ; preds = %225
  %231 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 68
  %232 = tail call i32 @ff_init_vlc_from_lengths(%struct.VLC* %231, i32 5, i32 30, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @fragment_run_length_vlc_len, i64 0, i64 0), i32 1, i8* null, i32 0, i32 0, i32 0, i32 0, i8* %226) #5
  %233 = icmp slt i32 %232, 0
  br i1 %233, label %244, label %234

234:                                              ; preds = %230
  %235 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 70
  %236 = tail call i32 @ff_init_vlc_from_lengths(%struct.VLC* %235, i32 3, i32 8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @mode_code_vlc_len, i64 0, i64 0), i32 1, i8* null, i32 0, i32 0, i32 0, i32 0, i8* %226) #5
  %237 = icmp slt i32 %236, 0
  br i1 %237, label %244, label %238

238:                                              ; preds = %234
  %239 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 71
  %240 = tail call i32 @ff_init_vlc_from_lengths(%struct.VLC* %239, i32 6, i32 63, i8* getelementptr inbounds ([63 x [2 x i8]], [63 x [2 x i8]]* @motion_vector_vlc_table, i64 0, i64 0, i64 1), i32 2, i8* getelementptr inbounds ([63 x [2 x i8]], [63 x [2 x i8]]* @motion_vector_vlc_table, i64 0, i64 0, i64 0), i32 2, i32 1, i32 -31, i32 0, i8* %226) #5
  %241 = icmp slt i32 %240, 0
  br i1 %241, label %244, label %242

242:                                              ; preds = %238
  %243 = tail call fastcc i32 @allocate_tables(%struct.AVCodecContext* %0) #7
  br label %244

244:                                              ; preds = %214, %204, %238, %234, %230, %225, %63, %1, %242
  %245 = phi i32 [ %243, %242 ], [ %5, %1 ], [ %70, %63 ], [ %228, %225 ], [ %232, %230 ], [ %236, %234 ], [ %240, %238 ], [ %209, %204 ], [ %222, %214 ]
  ret i32 %245
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare void @ff_thread_release_buffer(%struct.AVCodecContext*, %struct.ThreadFrame*) local_unnamed_addr #3

declare i32 @ff_thread_ref_frame(%struct.ThreadFrame*, %struct.ThreadFrame*) local_unnamed_addr #3

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #3

declare i32 @avpriv_split_xiph_headers(i8*, i32, i32, i8**, i32*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @theora_decode_header(%struct.AVCodecContext*, %struct.GetBitContext*) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %4 = bitcast i8** %3 to %struct.Vp3DecodeContext**
  %5 = load %struct.Vp3DecodeContext*, %struct.Vp3DecodeContext** %4, align 8
  %6 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i64 0, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = sub nsw i32 %7, %9
  %11 = icmp slt i32 %10, 206
  br i1 %11, label %359, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 3
  store i32 0, i32* %13, align 16
  %14 = load i32, i32* %8, align 8
  %15 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i64 0, i32 4
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = lshr i32 %14, 3
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %18, i64 %20
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 1
  %24 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %23) #6, !srcloc !2
  %25 = and i32 %14, 7
  %26 = shl i32 %24, %25
  %27 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -24, i32 %26) #6, !srcloc !3
  %28 = add i32 %14, 24
  %29 = icmp ugt i32 %16, %28
  %30 = select i1 %29, i32 %28, i32 %16
  store i32 %30, i32* %8, align 8
  %31 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 1
  store i32 %27, i32* %31, align 8
  %32 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %32, i32 48, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0), i32 %27) #5
  %33 = load i32, i32* %31, align 8
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %39

35:                                               ; preds = %12
  store i32 1, i32* %31, align 8
  %36 = bitcast %struct.Vp3DecodeContext* %5 to i8**
  %37 = load i8*, i8** %36, align 16
  tail call void (i8*, i8*, ...) @avpriv_request_sample(i8* %37, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i64 0, i64 0)) #5
  %38 = load i32, i32* %31, align 8
  br label %39

39:                                               ; preds = %12, %35
  %40 = phi i32 [ %33, %12 ], [ %38, %35 ]
  %41 = icmp slt i32 %40, 197120
  br i1 %41, label %42, label %44

42:                                               ; preds = %39
  %43 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 19
  store i32 1, i32* %43, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %32, i32 48, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.11, i64 0, i64 0)) #5
  br label %44

44:                                               ; preds = %42, %39
  %45 = load i32, i32* %8, align 8
  %46 = load i32, i32* %15, align 8
  %47 = load i8*, i8** %17, align 8
  %48 = lshr i32 %45, 3
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %47, i64 %49
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 1
  %53 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %52) #6, !srcloc !2
  %54 = and i32 %45, 7
  %55 = shl i32 %53, %54
  %56 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %55) #6, !srcloc !3
  %57 = add i32 %45, 16
  %58 = icmp ugt i32 %46, %57
  %59 = select i1 %58, i32 %57, i32 %46
  store i32 %59, i32* %8, align 8
  %60 = shl i32 %56, 4
  %61 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 5
  store i32 %60, i32* %61, align 8
  %62 = load i32, i32* %8, align 8
  %63 = load i32, i32* %15, align 8
  %64 = load i8*, i8** %17, align 8
  %65 = lshr i32 %62, 3
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds i8, i8* %64, i64 %66
  %68 = bitcast i8* %67 to i32*
  %69 = load i32, i32* %68, align 1
  %70 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %69) #6, !srcloc !2
  %71 = and i32 %62, 7
  %72 = shl i32 %70, %71
  %73 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %72) #6, !srcloc !3
  %74 = add i32 %62, 16
  %75 = icmp ugt i32 %63, %74
  %76 = select i1 %75, i32 %74, i32 %63
  store i32 %76, i32* %8, align 8
  %77 = shl i32 %73, 4
  %78 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 6
  store i32 %77, i32* %78, align 4
  %79 = load i32, i32* %31, align 8
  %80 = icmp sgt i32 %79, 197119
  br i1 %80, label %81, label %135

81:                                               ; preds = %44
  %82 = load i32, i32* %8, align 8
  %83 = load i32, i32* %15, align 8
  %84 = load i8*, i8** %17, align 8
  %85 = lshr i32 %82, 3
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %84, i64 %86
  %88 = bitcast i8* %87 to i32*
  %89 = load i32, i32* %88, align 1
  %90 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %89) #6, !srcloc !2
  %91 = and i32 %82, 7
  %92 = shl i32 %90, %91
  %93 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -24, i32 %92) #6, !srcloc !3
  %94 = add i32 %82, 24
  %95 = icmp ugt i32 %83, %94
  %96 = select i1 %95, i32 %94, i32 %83
  store i32 %96, i32* %8, align 8
  %97 = lshr i32 %96, 3
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds i8, i8* %84, i64 %98
  %100 = bitcast i8* %99 to i32*
  %101 = load i32, i32* %100, align 1
  %102 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %101) #6, !srcloc !2
  %103 = and i32 %96, 7
  %104 = shl i32 %102, %103
  %105 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -24, i32 %104) #6, !srcloc !3
  %106 = add i32 %96, 24
  %107 = icmp ugt i32 %83, %106
  %108 = select i1 %107, i32 %106, i32 %83
  store i32 %108, i32* %8, align 8
  %109 = lshr i32 %108, 3
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds i8, i8* %84, i64 %110
  %112 = bitcast i8* %111 to i32*
  %113 = load i32, i32* %112, align 1
  %114 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %113) #6, !srcloc !2
  %115 = and i32 %108, 7
  %116 = shl i32 %114, %115
  %117 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -8, i32 %116) #6, !srcloc !3
  %118 = add i32 %108, 8
  %119 = icmp ugt i32 %83, %118
  %120 = select i1 %119, i32 %118, i32 %83
  store i32 %120, i32* %8, align 8
  %121 = trunc i32 %117 to i8
  %122 = lshr i32 %120, 3
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %84, i64 %123
  %125 = bitcast i8* %124 to i32*
  %126 = load i32, i32* %125, align 1
  %127 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %126) #6, !srcloc !2
  %128 = and i32 %120, 7
  %129 = shl i32 %127, %128
  %130 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -8, i32 %129) #6, !srcloc !3
  %131 = add i32 %120, 8
  %132 = icmp ugt i32 %83, %131
  %133 = select i1 %132, i32 %131, i32 %83
  store i32 %133, i32* %8, align 8
  %134 = and i32 %130, 255
  br label %135

135:                                              ; preds = %81, %44
  %136 = phi i32 [ %93, %81 ], [ %60, %44 ]
  %137 = phi i32 [ %105, %81 ], [ %77, %44 ]
  %138 = phi i8 [ %121, %81 ], [ 0, %44 ]
  %139 = phi i32 [ %134, %81 ], [ 0, %44 ]
  %140 = tail call i32 @av_image_check_size(i32 %136, i32 %137, i32 0, i8* %32) #5
  %141 = icmp slt i32 %140, 0
  br i1 %141, label %142, label %145

142:                                              ; preds = %135
  %143 = load i32, i32* %61, align 8
  %144 = zext i8 %138 to i32
  br label %154

145:                                              ; preds = %135
  %146 = zext i8 %138 to i32
  %147 = add nsw i32 %136, %146
  %148 = load i32, i32* %61, align 8
  %149 = icmp sgt i32 %147, %148
  br i1 %149, label %154, label %150

150:                                              ; preds = %145
  %151 = add i32 %139, %137
  %152 = load i32, i32* %78, align 4
  %153 = icmp sgt i32 %151, %152
  br i1 %153, label %154, label %158

154:                                              ; preds = %142, %150, %145
  %155 = phi i32 [ %144, %142 ], [ %146, %150 ], [ %146, %145 ]
  %156 = phi i32 [ %143, %142 ], [ %148, %150 ], [ %148, %145 ]
  %157 = load i32, i32* %78, align 4
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %32, i32 16, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.12, i64 0, i64 0), i32 %136, i32 %137, i32 %155, i32 %139, i32 %156, i32 %157) #5
  br label %359

158:                                              ; preds = %150
  %159 = load i32, i32* %8, align 8
  %160 = load i32, i32* %15, align 8
  %161 = load i8*, i8** %17, align 8
  %162 = lshr i32 %159, 3
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds i8, i8* %161, i64 %163
  %165 = bitcast i8* %164 to i32*
  %166 = load i32, i32* %165, align 1
  %167 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %166) #6, !srcloc !2
  %168 = and i32 %159, 7
  %169 = shl i32 %167, %168
  %170 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %169) #6, !srcloc !3
  %171 = add i32 %159, 16
  %172 = icmp ugt i32 %160, %171
  %173 = select i1 %172, i32 %171, i32 %160
  store i32 %173, i32* %8, align 8
  %174 = lshr i32 %173, 3
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds i8, i8* %161, i64 %175
  %177 = bitcast i8* %176 to i32*
  %178 = load i32, i32* %177, align 1
  %179 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %178) #6, !srcloc !2
  %180 = and i32 %173, 7
  %181 = shl i32 %179, %180
  %182 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %181) #6, !srcloc !3
  %183 = add i32 %173, 16
  %184 = icmp ugt i32 %160, %183
  %185 = select i1 %184, i32 %183, i32 %160
  store i32 %185, i32* %8, align 8
  %186 = shl i32 %170, 16
  %187 = or i32 %182, %186
  %188 = lshr i32 %185, 3
  %189 = zext i32 %188 to i64
  %190 = getelementptr inbounds i8, i8* %161, i64 %189
  %191 = bitcast i8* %190 to i32*
  %192 = load i32, i32* %191, align 1
  %193 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %192) #6, !srcloc !2
  %194 = and i32 %185, 7
  %195 = shl i32 %193, %194
  %196 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %195) #6, !srcloc !3
  %197 = add i32 %185, 16
  %198 = icmp ugt i32 %160, %197
  %199 = select i1 %198, i32 %197, i32 %160
  store i32 %199, i32* %8, align 8
  %200 = lshr i32 %199, 3
  %201 = zext i32 %200 to i64
  %202 = getelementptr inbounds i8, i8* %161, i64 %201
  %203 = bitcast i8* %202 to i32*
  %204 = load i32, i32* %203, align 1
  %205 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %204) #6, !srcloc !2
  %206 = and i32 %199, 7
  %207 = shl i32 %205, %206
  %208 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %207) #6, !srcloc !3
  %209 = add i32 %199, 16
  %210 = icmp ugt i32 %160, %209
  %211 = select i1 %210, i32 %209, i32 %160
  store i32 %211, i32* %8, align 8
  %212 = shl i32 %196, 16
  %213 = or i32 %208, %212
  %214 = icmp eq i32 %187, 0
  %215 = icmp eq i32 %213, 0
  %216 = or i1 %214, %215
  br i1 %216, label %230, label %217

217:                                              ; preds = %158
  %218 = or i32 %213, %187
  %219 = icmp slt i32 %218, 0
  br i1 %219, label %220, label %221

220:                                              ; preds = %217
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %32, i32 16, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.13, i64 0, i64 0)) #5
  br label %359

221:                                              ; preds = %217
  %222 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 163, i32 1
  %223 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 163, i32 0
  %224 = sext i32 %213 to i64
  %225 = sext i32 %187 to i64
  %226 = tail call i32 @av_reduce(i32* %222, i32* %223, i64 %224, i64 %225, i64 1073741824) #5
  %227 = load i32, i32* %8, align 8
  %228 = load i32, i32* %15, align 8
  %229 = load i8*, i8** %17, align 8
  br label %230

230:                                              ; preds = %158, %221
  %231 = phi i8* [ %161, %158 ], [ %229, %221 ]
  %232 = phi i32 [ %160, %158 ], [ %228, %221 ]
  %233 = phi i32 [ %211, %158 ], [ %227, %221 ]
  %234 = lshr i32 %233, 3
  %235 = zext i32 %234 to i64
  %236 = getelementptr inbounds i8, i8* %231, i64 %235
  %237 = bitcast i8* %236 to i32*
  %238 = load i32, i32* %237, align 1
  %239 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %238) #6, !srcloc !2
  %240 = and i32 %233, 7
  %241 = shl i32 %239, %240
  %242 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -24, i32 %241) #6, !srcloc !3
  %243 = add i32 %233, 24
  %244 = icmp ugt i32 %232, %243
  %245 = select i1 %244, i32 %243, i32 %232
  store i32 %245, i32* %8, align 8
  %246 = lshr i32 %245, 3
  %247 = zext i32 %246 to i64
  %248 = getelementptr inbounds i8, i8* %231, i64 %247
  %249 = bitcast i8* %248 to i32*
  %250 = load i32, i32* %249, align 1
  %251 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %250) #6, !srcloc !2
  %252 = and i32 %245, 7
  %253 = shl i32 %251, %252
  %254 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -24, i32 %253) #6, !srcloc !3
  %255 = add i32 %245, 24
  %256 = icmp ugt i32 %232, %255
  %257 = select i1 %256, i32 %255, i32 %232
  store i32 %257, i32* %8, align 8
  %258 = icmp eq i32 %242, 0
  %259 = icmp eq i32 %254, 0
  %260 = or i1 %258, %259
  br i1 %260, label %271, label %261

261:                                              ; preds = %230
  %262 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 44
  %263 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %262, i64 0, i32 0
  %264 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 44, i32 1
  %265 = sext i32 %242 to i64
  %266 = sext i32 %254 to i64
  %267 = tail call i32 @av_reduce(i32* %263, i32* %264, i64 %265, i64 %266, i64 1073741824) #5
  %268 = bitcast %struct.AVRational* %262 to i64*
  %269 = load i64, i64* %268, align 8
  %270 = tail call i32 @ff_set_sar(%struct.AVCodecContext* %0, i64 %269) #5
  br label %271

271:                                              ; preds = %230, %261
  %272 = load i32, i32* %31, align 8
  %273 = icmp slt i32 %272, 197120
  %274 = load i32, i32* %8, align 8
  %275 = load i32, i32* %15, align 8
  br i1 %273, label %276, label %280

276:                                              ; preds = %271
  %277 = add i32 %274, 5
  %278 = icmp ugt i32 %275, %277
  %279 = select i1 %278, i32 %277, i32 %275
  store i32 %279, i32* %8, align 8
  br label %280

280:                                              ; preds = %271, %276
  %281 = phi i32 [ %279, %276 ], [ %274, %271 ]
  %282 = load i8*, i8** %17, align 8
  %283 = lshr i32 %281, 3
  %284 = zext i32 %283 to i64
  %285 = getelementptr inbounds i8, i8* %282, i64 %284
  %286 = bitcast i8* %285 to i32*
  %287 = load i32, i32* %286, align 1
  %288 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %287) #6, !srcloc !2
  %289 = and i32 %281, 7
  %290 = shl i32 %288, %289
  %291 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -8, i32 %290) #6, !srcloc !3
  %292 = add i32 %281, 8
  %293 = icmp ugt i32 %275, %292
  %294 = select i1 %293, i32 %292, i32 %275
  %295 = add i32 %294, 24
  %296 = icmp ugt i32 %275, %295
  %297 = select i1 %296, i32 %295, i32 %275
  %298 = add i32 %297, 6
  %299 = icmp ugt i32 %275, %298
  %300 = select i1 %299, i32 %298, i32 %275
  store i32 %300, i32* %8, align 8
  %301 = load i32, i32* %31, align 8
  %302 = icmp sgt i32 %301, 197119
  br i1 %302, label %303, label %331

303:                                              ; preds = %280
  %304 = add i32 %300, 5
  %305 = icmp ugt i32 %275, %304
  %306 = select i1 %305, i32 %304, i32 %275
  store i32 %306, i32* %8, align 8
  %307 = lshr i32 %306, 3
  %308 = zext i32 %307 to i64
  %309 = getelementptr inbounds i8, i8* %282, i64 %308
  %310 = bitcast i8* %309 to i32*
  %311 = load i32, i32* %310, align 1
  %312 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %311) #6, !srcloc !2
  %313 = and i32 %306, 7
  %314 = shl i32 %312, %313
  %315 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -2, i32 %314) #6, !srcloc !3
  %316 = add i32 %306, 2
  %317 = icmp ugt i32 %275, %316
  %318 = select i1 %317, i32 %316, i32 %275
  store i32 %318, i32* %8, align 8
  %319 = zext i32 %315 to i64
  %320 = getelementptr inbounds [4 x i32], [4 x i32]* @theora_pix_fmts, i64 0, i64 %319
  %321 = load i32, i32* %320, align 4
  %322 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 25
  store i32 %321, i32* %322, align 8
  %323 = icmp eq i32 %315, 1
  br i1 %323, label %324, label %325

324:                                              ; preds = %303
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %32, i32 16, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.14, i64 0, i64 0)) #5
  br label %359

325:                                              ; preds = %303
  %326 = load i32, i32* %8, align 8
  %327 = load i32, i32* %15, align 8
  %328 = add i32 %326, 3
  %329 = icmp ugt i32 %327, %328
  %330 = select i1 %329, i32 %328, i32 %327
  store i32 %330, i32* %8, align 8
  br label %333

331:                                              ; preds = %280
  %332 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 25
  store i32 0, i32* %332, align 8
  br label %333

333:                                              ; preds = %331, %325
  %334 = load i32, i32* %61, align 8
  %335 = load i32, i32* %78, align 4
  %336 = tail call i32 @ff_set_dimensions(%struct.AVCodecContext* %0, i32 %334, i32 %335) #5
  %337 = icmp slt i32 %336, 0
  br i1 %337, label %359, label %338

338:                                              ; preds = %333
  %339 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 14
  %340 = load i32, i32* %339, align 8
  %341 = and i32 %340, 65536
  %342 = icmp eq i32 %341, 0
  br i1 %342, label %343, label %351

343:                                              ; preds = %338
  %344 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 20
  store i32 %136, i32* %344, align 4
  %345 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 21
  store i32 %137, i32* %345, align 8
  %346 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 48
  store i8 %138, i8* %346, align 8
  %347 = load i32, i32* %78, align 4
  %348 = sub i32 %347, %151
  %349 = trunc i32 %348 to i8
  %350 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 49
  store i8 %349, i8* %350, align 1
  br label %351

351:                                              ; preds = %338, %343
  switch i32 %291, label %358 [
    i32 1, label %353
    i32 2, label %352
  ]

352:                                              ; preds = %351
  br label %353

353:                                              ; preds = %351, %352
  %354 = phi i32 [ 5, %352 ], [ 4, %351 ]
  %355 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 75
  store i32 %354, i32* %355, align 4
  %356 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 77
  store i32 5, i32* %356, align 4
  %357 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 76
  store i32 1, i32* %357, align 8
  br label %358

358:                                              ; preds = %351, %353
  store i32 1, i32* %13, align 16
  br label %359

359:                                              ; preds = %333, %2, %358, %324, %220, %154
  %360 = phi i32 [ -1094995529, %154 ], [ -1094995529, %220 ], [ -1094995529, %324 ], [ 0, %358 ], [ -1094995529, %2 ], [ %336, %333 ]
  ret i32 %360
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @theora_decode_tables(%struct.AVCodecContext*, %struct.GetBitContext*) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %4 = bitcast i8** %3 to %struct.Vp3DecodeContext**
  %5 = load %struct.Vp3DecodeContext*, %struct.Vp3DecodeContext** %4, align 8
  %6 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 3
  %7 = load i32, i32* %6, align 16
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %360, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp sgt i32 %11, 197119
  br i1 %12, label %13, label %81

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i64 0, i32 2
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i64 0, i32 4
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = lshr i32 %15, 3
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %19, i64 %21
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 1
  %25 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %24) #6, !srcloc !2
  %26 = and i32 %15, 7
  %27 = shl i32 %25, %26
  %28 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -3, i32 %27) #6, !srcloc !3
  %29 = add i32 %15, 3
  %30 = icmp ugt i32 %17, %29
  %31 = select i1 %30, i32 %29, i32 %17
  store i32 %31, i32* %14, align 8
  %32 = icmp eq i32 %28, 0
  br i1 %32, label %61, label %33

33:                                               ; preds = %13
  %34 = trunc i32 %28 to i8
  %35 = sub i8 0, %34
  br label %36

36:                                               ; preds = %57, %33
  %37 = phi i8* [ %19, %33 ], [ %60, %57 ]
  %38 = phi i32 [ %17, %33 ], [ %59, %57 ]
  %39 = phi i32 [ %31, %33 ], [ %58, %57 ]
  %40 = phi i64 [ 0, %33 ], [ %55, %57 ]
  %41 = lshr i32 %39, 3
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %37, i64 %42
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 1
  %46 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %45) #6, !srcloc !2
  %47 = and i32 %39, 7
  %48 = shl i32 %46, %47
  %49 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %35, i32 %48) #6, !srcloc !3
  %50 = add i32 %39, %28
  %51 = icmp ugt i32 %38, %50
  %52 = select i1 %51, i32 %50, i32 %38
  store i32 %52, i32* %14, align 8
  %53 = trunc i32 %49 to i8
  %54 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 78, i64 %40
  store i8 %53, i8* %54, align 1
  %55 = add nuw nsw i64 %40, 1
  %56 = icmp eq i64 %55, 64
  br i1 %56, label %61, label %57

57:                                               ; preds = %36
  %58 = load i32, i32* %14, align 8
  %59 = load i32, i32* %16, align 8
  %60 = load i8*, i8** %18, align 8
  br label %36

61:                                               ; preds = %36, %13
  %62 = load i32, i32* %10, align 8
  %63 = icmp sgt i32 %62, 197119
  br i1 %63, label %64, label %81

64:                                               ; preds = %61
  %65 = load i32, i32* %14, align 8
  %66 = load i32, i32* %16, align 8
  %67 = load i8*, i8** %18, align 8
  %68 = lshr i32 %65, 3
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %67, i64 %69
  %71 = bitcast i8* %70 to i32*
  %72 = load i32, i32* %71, align 1
  %73 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %72) #6, !srcloc !2
  %74 = and i32 %65, 7
  %75 = shl i32 %73, %74
  %76 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -4, i32 %75) #6, !srcloc !3
  %77 = add i32 %65, 4
  %78 = icmp ugt i32 %66, %77
  %79 = select i1 %78, i32 %77, i32 %66
  store i32 %79, i32* %14, align 8
  %80 = add i32 %76, 1
  br label %81

81:                                               ; preds = %9, %61, %64
  %82 = phi i32 [ %80, %64 ], [ 16, %61 ], [ 16, %9 ]
  %83 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i64 0, i32 2
  %84 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i64 0, i32 4
  %85 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i64 0, i32 0
  %86 = trunc i32 %82 to i8
  %87 = sub i8 0, %86
  br label %88

88:                                               ; preds = %88, %81
  %89 = phi i64 [ 0, %81 ], [ %106, %88 ]
  %90 = load i32, i32* %83, align 8
  %91 = load i32, i32* %84, align 8
  %92 = load i8*, i8** %85, align 8
  %93 = lshr i32 %90, 3
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds i8, i8* %92, i64 %94
  %96 = bitcast i8* %95 to i32*
  %97 = load i32, i32* %96, align 1
  %98 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %97) #6, !srcloc !2
  %99 = and i32 %90, 7
  %100 = shl i32 %98, %99
  %101 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %87, i32 %100) #6, !srcloc !3
  %102 = add i32 %90, %82
  %103 = icmp ugt i32 %91, %102
  %104 = select i1 %103, i32 %102, i32 %91
  store i32 %104, i32* %83, align 8
  %105 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 53, i64 %89
  store i32 %101, i32* %105, align 4
  %106 = add nuw nsw i64 %89, 1
  %107 = icmp eq i64 %106, 64
  br i1 %107, label %108, label %88

108:                                              ; preds = %88
  %109 = load i32, i32* %10, align 8
  %110 = icmp sgt i32 %109, 197119
  br i1 %110, label %111, label %128

111:                                              ; preds = %108
  %112 = load i32, i32* %83, align 8
  %113 = load i32, i32* %84, align 8
  %114 = load i8*, i8** %85, align 8
  %115 = lshr i32 %112, 3
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds i8, i8* %114, i64 %116
  %118 = bitcast i8* %117 to i32*
  %119 = load i32, i32* %118, align 1
  %120 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %119) #6, !srcloc !2
  %121 = and i32 %112, 7
  %122 = shl i32 %120, %121
  %123 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -4, i32 %122) #6, !srcloc !3
  %124 = add i32 %112, 4
  %125 = icmp ugt i32 %113, %124
  %126 = select i1 %125, i32 %124, i32 %113
  store i32 %126, i32* %83, align 8
  %127 = add i32 %123, 1
  br label %128

128:                                              ; preds = %108, %111
  %129 = phi i32 [ %127, %111 ], [ 16, %108 ]
  %130 = trunc i32 %129 to i8
  %131 = sub i8 0, %130
  br label %132

132:                                              ; preds = %132, %128
  %133 = phi i64 [ 0, %128 ], [ %152, %132 ]
  %134 = load i32, i32* %83, align 8
  %135 = load i32, i32* %84, align 8
  %136 = load i8*, i8** %85, align 8
  %137 = lshr i32 %134, 3
  %138 = zext i32 %137 to i64
  %139 = getelementptr inbounds i8, i8* %136, i64 %138
  %140 = bitcast i8* %139 to i32*
  %141 = load i32, i32* %140, align 1
  %142 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %141) #6, !srcloc !2
  %143 = and i32 %134, 7
  %144 = shl i32 %142, %143
  %145 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %131, i32 %144) #6, !srcloc !3
  %146 = add i32 %134, %129
  %147 = icmp ugt i32 %135, %146
  %148 = select i1 %147, i32 %146, i32 %135
  store i32 %148, i32* %83, align 8
  %149 = trunc i32 %145 to i16
  %150 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 52, i64 1, i64 %133
  store i16 %149, i16* %150, align 2
  %151 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 52, i64 0, i64 %133
  store i16 %149, i16* %151, align 2
  %152 = add nuw nsw i64 %133, 1
  %153 = icmp eq i64 %152, 64
  br i1 %153, label %154, label %132

154:                                              ; preds = %132
  %155 = load i32, i32* %10, align 8
  %156 = icmp sgt i32 %155, 197119
  br i1 %156, label %157, label %177

157:                                              ; preds = %154
  %158 = load i32, i32* %83, align 8
  %159 = load i32, i32* %84, align 8
  %160 = load i8*, i8** %85, align 8
  %161 = lshr i32 %158, 3
  %162 = zext i32 %161 to i64
  %163 = getelementptr inbounds i8, i8* %160, i64 %162
  %164 = bitcast i8* %163 to i32*
  %165 = load i32, i32* %164, align 1
  %166 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %165) #6, !srcloc !2
  %167 = and i32 %158, 7
  %168 = shl i32 %166, %167
  %169 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -9, i32 %168) #6, !srcloc !3
  %170 = add i32 %158, 9
  %171 = icmp ugt i32 %159, %170
  %172 = select i1 %171, i32 %170, i32 %159
  store i32 %172, i32* %83, align 8
  %173 = add i32 %169, 1
  %174 = icmp sgt i32 %173, 384
  br i1 %174, label %180, label %175

175:                                              ; preds = %157
  %176 = icmp sgt i32 %173, 0
  br i1 %176, label %177, label %184

177:                                              ; preds = %154, %175
  %178 = phi i32 [ %173, %175 ], [ 3, %154 ]
  %179 = zext i32 %178 to i64
  br label %182

180:                                              ; preds = %157
  %181 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %181, i32 16, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.15, i64 0, i64 0)) #5
  br label %360

182:                                              ; preds = %213, %177
  %183 = phi i64 [ 0, %177 ], [ %214, %213 ]
  br label %192

184:                                              ; preds = %213, %175
  %185 = phi i32 [ %173, %175 ], [ %178, %213 ]
  %186 = add nsw i32 %185, -1
  %187 = or i32 %186, 1
  %188 = tail call i32 @llvm.ctlz.i32(i32 %187, i1 true), !range !4
  %189 = sub nuw nsw i32 32, %188
  %190 = trunc i32 %189 to i8
  %191 = sub nsw i8 0, %190
  br label %216

192:                                              ; preds = %192, %182
  %193 = phi i64 [ 0, %182 ], [ %211, %192 ]
  %194 = load i32, i32* %83, align 8
  %195 = load i32, i32* %84, align 8
  %196 = load i8*, i8** %85, align 8
  %197 = lshr i32 %194, 3
  %198 = zext i32 %197 to i64
  %199 = getelementptr inbounds i8, i8* %196, i64 %198
  %200 = bitcast i8* %199 to i32*
  %201 = load i32, i32* %200, align 1
  %202 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %201) #6, !srcloc !2
  %203 = and i32 %194, 7
  %204 = shl i32 %202, %203
  %205 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -8, i32 %204) #6, !srcloc !3
  %206 = add i32 %194, 8
  %207 = icmp ugt i32 %195, %206
  %208 = select i1 %207, i32 %206, i32 %195
  store i32 %208, i32* %83, align 8
  %209 = trunc i32 %205 to i8
  %210 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 54, i64 %183, i64 %193
  store i8 %209, i8* %210, align 1
  %211 = add nuw nsw i64 %193, 1
  %212 = icmp eq i64 %211, 64
  br i1 %212, label %213, label %192

213:                                              ; preds = %192
  %214 = add nuw nsw i64 %183, 1
  %215 = icmp eq i64 %214, %179
  br i1 %215, label %184, label %182

216:                                              ; preds = %346, %184
  %217 = phi i64 [ 0, %184 ], [ %347, %346 ]
  %218 = icmp eq i64 %217, 0
  %219 = mul nuw nsw i64 %217, 3
  %220 = add nuw i64 %219, 4294967295
  br label %221

221:                                              ; preds = %342, %216
  %222 = phi i64 [ 0, %216 ], [ %343, %342 ]
  %223 = phi i32 [ 0, %216 ], [ %344, %342 ]
  %224 = or i64 %222, %217
  %225 = trunc i64 %224 to i32
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %243, label %227

227:                                              ; preds = %221
  %228 = load i32, i32* %83, align 8
  %229 = load i8*, i8** %85, align 8
  %230 = lshr i32 %228, 3
  %231 = zext i32 %230 to i64
  %232 = getelementptr inbounds i8, i8* %229, i64 %231
  %233 = load i8, i8* %232, align 1
  %234 = and i32 %228, 7
  %235 = zext i8 %233 to i32
  %236 = shl i32 %235, %234
  %237 = load i32, i32* %84, align 8
  %238 = icmp slt i32 %228, %237
  %239 = zext i1 %238 to i32
  %240 = add i32 %228, %239
  store i32 %240, i32* %83, align 8
  %241 = trunc i32 %236 to i8
  %242 = icmp sgt i8 %241, -1
  br i1 %242, label %244, label %243

243:                                              ; preds = %221, %227
  br label %283

244:                                              ; preds = %227
  br i1 %218, label %261, label %245

245:                                              ; preds = %244
  %246 = load i32, i32* %83, align 8
  %247 = load i8*, i8** %85, align 8
  %248 = lshr i32 %246, 3
  %249 = zext i32 %248 to i64
  %250 = getelementptr inbounds i8, i8* %247, i64 %249
  %251 = load i8, i8* %250, align 1
  %252 = and i32 %246, 7
  %253 = zext i8 %251 to i32
  %254 = shl i32 %253, %252
  %255 = load i32, i32* %84, align 8
  %256 = icmp slt i32 %246, %255
  %257 = zext i1 %256 to i32
  %258 = add i32 %246, %257
  store i32 %258, i32* %83, align 8
  %259 = trunc i32 %254 to i8
  %260 = icmp sgt i8 %259, -1
  br i1 %260, label %261, label %269

261:                                              ; preds = %245, %244
  %262 = add i64 %220, %222
  %263 = trunc i64 %262 to i32
  %264 = sdiv i32 %263, 3
  %265 = trunc i32 %223 to i8
  %266 = add i8 %265, 2
  %267 = urem i8 %266, 3
  %268 = zext i8 %267 to i64
  br label %269

269:                                              ; preds = %245, %261
  %270 = phi i32 [ %264, %261 ], [ 0, %245 ]
  %271 = phi i64 [ %268, %261 ], [ %222, %245 ]
  %272 = sext i32 %270 to i64
  %273 = and i64 %271, 4294967295
  %274 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 55, i64 %272, i64 %273
  %275 = load i8, i8* %274, align 1
  %276 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 55, i64 %217, i64 %222
  store i8 %275, i8* %276, align 1
  %277 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 56, i64 %217, i64 %222, i64 0
  %278 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 56, i64 %272, i64 %273, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %277, i8* align 2 %278, i64 64, i1 false)
  %279 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 57, i64 %217, i64 %222, i64 0
  %280 = bitcast i16* %279 to i8*
  %281 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 57, i64 %272, i64 %273, i64 0
  %282 = bitcast i16* %281 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %280, i8* align 2 %282, i64 128, i1 false)
  br label %342

283:                                              ; preds = %243, %308
  %284 = phi i64 [ %332, %308 ], [ 0, %243 ]
  %285 = phi i32 [ %334, %308 ], [ 0, %243 ]
  %286 = load i32, i32* %83, align 8
  %287 = load i32, i32* %84, align 8
  %288 = load i8*, i8** %85, align 8
  %289 = lshr i32 %286, 3
  %290 = zext i32 %289 to i64
  %291 = getelementptr inbounds i8, i8* %288, i64 %290
  %292 = bitcast i8* %291 to i32*
  %293 = load i32, i32* %292, align 1
  %294 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %293) #6, !srcloc !2
  %295 = and i32 %286, 7
  %296 = shl i32 %294, %295
  %297 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %191, i32 %296) #6, !srcloc !3
  %298 = add i32 %286, %189
  %299 = icmp ugt i32 %287, %298
  %300 = select i1 %299, i32 %298, i32 %287
  store i32 %300, i32* %83, align 8
  %301 = icmp slt i32 %297, %185
  br i1 %301, label %304, label %302

302:                                              ; preds = %283
  %303 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %303, i32 16, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.16, i64 0, i64 0)) #5
  br label %360

304:                                              ; preds = %283
  %305 = trunc i32 %297 to i16
  %306 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 57, i64 %217, i64 %222, i64 %284
  store i16 %305, i16* %306, align 2
  %307 = icmp sgt i32 %285, 62
  br i1 %307, label %335, label %308

308:                                              ; preds = %304
  %309 = sub nsw i32 63, %285
  %310 = or i32 %309, 1
  %311 = tail call i32 @llvm.ctlz.i32(i32 %310, i1 true), !range !4
  %312 = sub nuw nsw i32 32, %311
  %313 = load i32, i32* %83, align 8
  %314 = load i32, i32* %84, align 8
  %315 = load i8*, i8** %85, align 8
  %316 = lshr i32 %313, 3
  %317 = zext i32 %316 to i64
  %318 = getelementptr inbounds i8, i8* %315, i64 %317
  %319 = bitcast i8* %318 to i32*
  %320 = load i32, i32* %319, align 1
  %321 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %320) #6, !srcloc !2
  %322 = and i32 %313, 7
  %323 = shl i32 %321, %322
  %324 = trunc i32 %312 to i8
  %325 = sub nsw i8 0, %324
  %326 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %325, i32 %323) #6, !srcloc !3
  %327 = add i32 %313, %312
  %328 = icmp ugt i32 %314, %327
  %329 = select i1 %328, i32 %327, i32 %314
  store i32 %329, i32* %83, align 8
  %330 = add i32 %326, 1
  %331 = trunc i32 %330 to i8
  %332 = add nuw i64 %284, 1
  %333 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 56, i64 %217, i64 %222, i64 %284
  store i8 %331, i8* %333, align 1
  %334 = add nsw i32 %330, %285
  br label %283

335:                                              ; preds = %304
  %336 = icmp eq i32 %285, 63
  br i1 %336, label %339, label %337

337:                                              ; preds = %335
  %338 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %338, i32 16, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.17, i64 0, i64 0), i32 %285) #5
  br label %360

339:                                              ; preds = %335
  %340 = trunc i64 %284 to i8
  %341 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 55, i64 %217, i64 %222
  store i8 %340, i8* %341, align 1
  br label %342

342:                                              ; preds = %339, %269
  %343 = add nuw nsw i64 %222, 1
  %344 = add nuw nsw i32 %223, 1
  %345 = icmp eq i64 %343, 3
  br i1 %345, label %346, label %221

346:                                              ; preds = %342
  %347 = add nuw nsw i64 %217, 1
  %348 = icmp eq i64 %347, 2
  br i1 %348, label %351, label %216

349:                                              ; preds = %351
  %350 = icmp eq i64 %357, 80
  br i1 %350, label %358, label %351

351:                                              ; preds = %346, %349
  %352 = phi i64 [ %357, %349 ], [ 0, %346 ]
  %353 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 77, i64 %352
  %354 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 77, i64 %352, i32 1
  store i8 0, i8* %354, align 1
  %355 = tail call fastcc i32 @read_huffman_tree(%struct.HuffTable* %353, %struct.GetBitContext* %1, i32 0, %struct.AVCodecContext* %0)
  %356 = icmp slt i32 %355, 0
  %357 = add nuw nsw i64 %352, 1
  br i1 %356, label %360, label %349

358:                                              ; preds = %349
  %359 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %5, i64 0, i32 2
  store i32 1, i32* %359, align 4
  br label %360

360:                                              ; preds = %351, %337, %302, %2, %358, %180
  %361 = phi i32 [ -1, %180 ], [ 0, %358 ], [ -1094995529, %2 ], [ -1, %302 ], [ -1, %337 ], [ %355, %351 ]
  ret i32 %361
}

declare void @avpriv_request_sample(i8*, i8*, ...) local_unnamed_addr #3

declare i32 @av_image_check_size(i32, i32, i32, i8*) local_unnamed_addr #3

declare i32 @av_reduce(i32*, i32*, i64, i64, i64) local_unnamed_addr #3

declare i32 @ff_set_sar(%struct.AVCodecContext*, i64) local_unnamed_addr #3

declare i32 @ff_set_dimensions(%struct.AVCodecContext*, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @read_huffman_tree(%struct.HuffTable*, %struct.GetBitContext*, i32, %struct.AVCodecContext*) unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i64 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = lshr i32 %6, 3
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %8, i64 %10
  %12 = load i8, i8* %11, align 1
  %13 = and i32 %6, 7
  %14 = zext i8 %12 to i32
  %15 = shl i32 %14, %13
  %16 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i64 0, i32 4
  %17 = load i32, i32* %16, align 8
  %18 = icmp slt i32 %6, %17
  %19 = zext i1 %18 to i32
  %20 = add i32 %6, %19
  store i32 %20, i32* %5, align 8
  %21 = trunc i32 %15 to i8
  %22 = icmp sgt i8 %21, -1
  br i1 %22, label %49, label %23

23:                                               ; preds = %4
  %24 = getelementptr inbounds %struct.HuffTable, %struct.HuffTable* %0, i64 0, i32 1
  %25 = load i8, i8* %24, align 1
  %26 = icmp ugt i8 %25, 31
  br i1 %26, label %27, label %29

27:                                               ; preds = %23
  %28 = bitcast %struct.AVCodecContext* %3 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %28, i32 16, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.18, i64 0, i64 0)) #5
  br label %61

29:                                               ; preds = %23
  %30 = lshr i32 %20, 3
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %8, i64 %31
  %33 = bitcast i8* %32 to i32*
  %34 = load i32, i32* %33, align 1
  %35 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %34) #6, !srcloc !2
  %36 = and i32 %20, 7
  %37 = shl i32 %35, %36
  %38 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -5, i32 %37) #6, !srcloc !3
  %39 = add i32 %20, 5
  %40 = icmp ugt i32 %17, %39
  %41 = select i1 %40, i32 %39, i32 %17
  store i32 %41, i32* %5, align 8
  %42 = load i8, i8* %24, align 1
  %43 = add i8 %42, 1
  store i8 %43, i8* %24, align 1
  %44 = zext i8 %42 to i64
  %45 = trunc i32 %2 to i8
  %46 = trunc i32 %38 to i8
  %47 = getelementptr inbounds %struct.HuffTable, %struct.HuffTable* %0, i64 0, i32 0, i64 %44, i32 0
  store i8 %45, i8* %47, align 1
  %48 = getelementptr inbounds %struct.HuffTable, %struct.HuffTable* %0, i64 0, i32 0, i64 %44, i32 1
  store i8 %46, i8* %48, align 1
  br label %60

49:                                               ; preds = %4
  %50 = icmp sgt i32 %2, 30
  br i1 %50, label %51, label %53

51:                                               ; preds = %49
  %52 = bitcast %struct.AVCodecContext* %3 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %52, i32 16, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.18, i64 0, i64 0)) #5
  br label %61

53:                                               ; preds = %49
  %54 = add nsw i32 %2, 1
  %55 = tail call fastcc i32 @read_huffman_tree(%struct.HuffTable* %0, %struct.GetBitContext* %1, i32 %54, %struct.AVCodecContext* %3)
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %61

57:                                               ; preds = %53
  %58 = tail call fastcc i32 @read_huffman_tree(%struct.HuffTable* %0, %struct.GetBitContext* %1, i32 %54, %struct.AVCodecContext* %3)
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %29, %57
  br label %61

61:                                               ; preds = %57, %53, %27, %60, %51
  %62 = phi i32 [ 0, %60 ], [ -1, %51 ], [ -1, %27 ], [ -1, %53 ], [ -1, %57 ]
  ret i32 %62
}

declare i32 @ff_thread_get_buffer(%struct.AVCodecContext*, %struct.ThreadFrame*, i32) local_unnamed_addr #3

declare noalias i8* @av_malloc(i64) local_unnamed_addr #3

declare void @ff_thread_report_progress(%struct.ThreadFrame*, i32, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @ff_thread_finish_setup(%struct.AVCodecContext*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @apply_loop_filter(%struct.Vp3DecodeContext*, i32, i32, i32) unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 79, i64 127
  %6 = icmp ne i32 %1, 0
  %7 = zext i1 %6 to i64
  %8 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 43, i64 %7
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %1 to i64
  %11 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 11, i32 0
  %12 = load %struct.AVFrame*, %struct.AVFrame** %11, align 8
  %13 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %12, i64 0, i32 1, i64 %10
  %14 = load i32, i32* %13, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 19
  %17 = load i32, i32* %16, align 16
  %18 = icmp eq i32 %17, 0
  %19 = sub nsw i64 0, %15
  %20 = select i1 %18, i64 %19, i64 %15
  %21 = icmp slt i32 %2, %3
  br i1 %21, label %22, label %115

22:                                               ; preds = %4
  %23 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %12, i64 0, i32 0, i64 %10
  %24 = load i8*, i8** %23, align 8
  %25 = shl nsw i32 %2, 3
  %26 = sext i32 %25 to i64
  %27 = mul nsw i64 %20, %26
  %28 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 47, i64 %10
  %29 = load i32, i32* %28, align 4
  %30 = sext i32 %29 to i64
  %31 = add nsw i64 %27, %30
  %32 = getelementptr inbounds i8, i8* %24, i64 %31
  %33 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 46, i64 %10
  %34 = load i32, i32* %33, align 4
  %35 = mul nsw i32 %9, %2
  %36 = add nsw i32 %34, %35
  %37 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 44, i64 %7
  %38 = load i32, i32* %37, align 4
  %39 = icmp sgt i32 %9, 0
  %40 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 45
  %41 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 17, i32 5
  %42 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 17, i32 4
  %43 = add i32 %9, -1
  %44 = add nsw i32 %38, -1
  %45 = shl nsw i64 %20, 3
  %46 = sext i32 %9 to i64
  %47 = sext i32 %43 to i64
  %48 = zext i32 %9 to i64
  br label %49

49:                                               ; preds = %110, %22
  %50 = phi i8* [ %32, %22 ], [ %112, %110 ]
  %51 = phi i32 [ %36, %22 ], [ %111, %110 ]
  %52 = phi i32 [ %2, %22 ], [ %113, %110 ]
  br i1 %39, label %53, label %110

53:                                               ; preds = %49
  %54 = icmp sgt i32 %52, 0
  %55 = getelementptr inbounds i8, i8* %50, i64 8
  %56 = icmp slt i32 %52, %44
  %57 = sext i32 %51 to i64
  %58 = getelementptr inbounds i8, i8* %50, i64 %45
  br label %59

59:                                               ; preds = %104, %53
  %60 = phi i64 [ 0, %53 ], [ %106, %104 ]
  %61 = phi i64 [ %57, %53 ], [ %105, %104 ]
  %62 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %40, align 8
  %63 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %62, i64 %61, i32 1
  %64 = load i8, i8* %63, align 2
  %65 = icmp eq i8 %64, 8
  br i1 %65, label %104, label %66

66:                                               ; preds = %59
  %67 = icmp eq i64 %60, 0
  br i1 %67, label %73, label %68

68:                                               ; preds = %66
  %69 = load void (i8*, i64, i32*)*, void (i8*, i64, i32*)** %41, align 8
  %70 = shl i64 %60, 3
  %71 = and i64 %70, 4294967288
  %72 = getelementptr inbounds i8, i8* %50, i64 %71
  tail call void %69(i8* %72, i64 %20, i32* %5) #5
  br label %73

73:                                               ; preds = %66, %68
  br i1 %54, label %74, label %79

74:                                               ; preds = %73
  %75 = load void (i8*, i64, i32*)*, void (i8*, i64, i32*)** %42, align 16
  %76 = shl i64 %60, 3
  %77 = and i64 %76, 4294967288
  %78 = getelementptr inbounds i8, i8* %50, i64 %77
  tail call void %75(i8* %78, i64 %20, i32* %5) #5
  br label %79

79:                                               ; preds = %74, %73
  %80 = icmp slt i64 %60, %47
  br i1 %80, label %81, label %92

81:                                               ; preds = %79
  %82 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %40, align 8
  %83 = add nsw i64 %61, 1
  %84 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %82, i64 %83, i32 1
  %85 = load i8, i8* %84, align 2
  %86 = icmp eq i8 %85, 8
  br i1 %86, label %87, label %92

87:                                               ; preds = %81
  %88 = load void (i8*, i64, i32*)*, void (i8*, i64, i32*)** %41, align 8
  %89 = shl i64 %60, 3
  %90 = and i64 %89, 4294967288
  %91 = getelementptr inbounds i8, i8* %55, i64 %90
  tail call void %88(i8* %91, i64 %20, i32* %5) #5
  br label %92

92:                                               ; preds = %87, %81, %79
  br i1 %56, label %93, label %104

93:                                               ; preds = %92
  %94 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %40, align 8
  %95 = add nsw i64 %61, %46
  %96 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %94, i64 %95, i32 1
  %97 = load i8, i8* %96, align 2
  %98 = icmp eq i8 %97, 8
  br i1 %98, label %99, label %104

99:                                               ; preds = %93
  %100 = load void (i8*, i64, i32*)*, void (i8*, i64, i32*)** %42, align 16
  %101 = shl i64 %60, 3
  %102 = and i64 %101, 4294967288
  %103 = getelementptr inbounds i8, i8* %58, i64 %102
  tail call void %100(i8* %103, i64 %20, i32* %5) #5
  br label %104

104:                                              ; preds = %59, %92, %93, %99
  %105 = add nsw i64 %61, 1
  %106 = add nuw nsw i64 %60, 1
  %107 = icmp eq i64 %106, %48
  br i1 %107, label %108, label %59

108:                                              ; preds = %104
  %109 = add i32 %9, %51
  br label %110

110:                                              ; preds = %108, %49
  %111 = phi i32 [ %51, %49 ], [ %109, %108 ]
  %112 = getelementptr inbounds i8, i8* %50, i64 %45
  %113 = add i32 %52, 1
  %114 = icmp eq i32 %113, %3
  br i1 %114, label %115, label %49

115:                                              ; preds = %110, %4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @vp3_draw_horiz_band(%struct.Vp3DecodeContext*, i32) unnamed_addr #0 {
  %3 = alloca [8 x i32], align 16
  %4 = bitcast [8 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #5
  %5 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 0
  %6 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 1
  %7 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 2
  %8 = getelementptr inbounds [8 x i32], [8 x i32]* %3, i64 0, i64 3
  %9 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 0
  %10 = bitcast [8 x i32]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 32, i1 false)
  %11 = load %struct.AVCodecContext*, %struct.AVCodecContext** %9, align 16
  %12 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %11, i64 0, i32 148
  %13 = load i32, i32* %12, align 8
  %14 = and i32 %13, 1
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %29, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 19
  %18 = load i32, i32* %17, align 16
  %19 = icmp eq i32 %18, 0
  %20 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 6
  %21 = load i32, i32* %20, align 4
  %22 = sub nsw i32 %21, %1
  %23 = select i1 %19, i32 %1, i32 %22
  %24 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 11
  %25 = icmp eq i32 %23, %21
  %26 = add nsw i32 %23, -1
  %27 = select i1 %25, i32 2147483647, i32 %26
  tail call void @ff_thread_report_progress(%struct.ThreadFrame* %24, i32 %27, i32 0) #5
  %28 = load %struct.AVCodecContext*, %struct.AVCodecContext** %9, align 16
  br label %29

29:                                               ; preds = %2, %16
  %30 = phi %struct.AVCodecContext* [ %11, %2 ], [ %28, %16 ]
  %31 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %30, i64 0, i32 26
  %32 = load void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)** %31, align 8
  %33 = icmp eq void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)* %32, null
  br i1 %33, label %66, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 20
  %36 = load i32, i32* %35, align 4
  %37 = sub nsw i32 %1, %36
  store i32 %1, i32* %35, align 4
  %38 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 19
  %39 = load i32, i32* %38, align 16
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %45

41:                                               ; preds = %34
  %42 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 6
  %43 = load i32, i32* %42, align 4
  %44 = sub i32 %43, %1
  br label %45

45:                                               ; preds = %34, %41
  %46 = phi i32 [ %36, %34 ], [ %44, %41 ]
  %47 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 8
  %48 = load i32, i32* %47, align 4
  %49 = ashr i32 %46, %48
  %50 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 11, i32 0
  %51 = load %struct.AVFrame*, %struct.AVFrame** %50, align 8
  %52 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %51, i64 0, i32 1, i64 0
  %53 = load i32, i32* %52, align 8
  %54 = mul nsw i32 %53, %46
  store i32 %54, i32* %5, align 16
  %55 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %51, i64 0, i32 1, i64 1
  %56 = load i32, i32* %55, align 4
  %57 = mul nsw i32 %56, %49
  store i32 %57, i32* %6, align 4
  %58 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %51, i64 0, i32 1, i64 2
  %59 = load i32, i32* %58, align 8
  %60 = mul nsw i32 %59, %49
  store i32 %60, i32* %7, align 8
  %61 = bitcast i32* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 20, i1 false)
  tail call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !srcloc !5
  %62 = load %struct.AVCodecContext*, %struct.AVCodecContext** %9, align 16
  %63 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %62, i64 0, i32 26
  %64 = load void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)** %63, align 8
  %65 = load %struct.AVFrame*, %struct.AVFrame** %50, align 8
  call void %64(%struct.AVCodecContext* %62, %struct.AVFrame* %65, i32* nonnull %5, i32 %46, i32 3, i32 %37) #5
  br label %66

66:                                               ; preds = %29, %45
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #5
  ret void
}

declare i32 @av_frame_ref(%struct.AVFrame*, %struct.AVFrame*) local_unnamed_addr #3

declare void @av_frame_unref(%struct.AVFrame*) local_unnamed_addr #3

declare void @ff_vp3dsp_set_bounding_values(i32*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @unpack_vlcs(%struct.Vp3DecodeContext* nocapture, %struct.GetBitContext* nocapture, %struct.VLC* nocapture readonly, i32, i32, i32) unnamed_addr #0 {
  %7 = sext i32 %4 to i64
  %8 = sext i32 %3 to i64
  %9 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 60, i64 %7, i64 %8
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 58, i64 %7, i64 %8
  %12 = load i16*, i16** %11, align 8
  %13 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 62, i64 %7
  %14 = load i32*, i32** %13, align 8
  %15 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 45
  %16 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %15, align 8
  %17 = getelementptr inbounds %struct.VLC, %struct.VLC* %2, i64 0, i32 1
  %18 = load [2 x i16]*, [2 x i16]** %17, align 8
  %19 = icmp slt i32 %10, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %6
  %21 = bitcast %struct.Vp3DecodeContext* %0 to i8**
  %22 = load i8*, i8** %21, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %22, i32 16, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.35, i64 0, i64 0), i32 %3) #5
  br label %346

23:                                               ; preds = %6
  %24 = icmp slt i32 %10, %5
  %25 = sub nsw i32 %5, %10
  %26 = select i1 %24, i32 %25, i32 0
  %27 = select i1 %24, i32 %10, i32 %5
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %32, label %29

29:                                               ; preds = %23
  %30 = trunc i32 %27 to i16
  %31 = shl i16 %30, 2
  store i16 %31, i16* %12, align 2
  br label %32

32:                                               ; preds = %23, %29
  %33 = phi i32 [ 1, %29 ], [ 0, %23 ]
  %34 = icmp sgt i32 %10, %5
  br i1 %34, label %35, label %278

35:                                               ; preds = %32
  %36 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i64 0, i32 3
  %37 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i64 0, i32 2
  %38 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i64 0, i32 4
  %39 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i64 0, i32 0
  %40 = icmp eq i32 %3, 0
  %41 = bitcast %struct.Vp3DecodeContext* %0 to i8**
  %42 = sub nsw i32 64, %3
  %43 = zext i32 %33 to i64
  br label %44

44:                                               ; preds = %35, %269
  %45 = phi i64 [ %43, %35 ], [ %273, %269 ]
  %46 = phi i32 [ %27, %35 ], [ %272, %269 ]
  %47 = phi i32 [ %27, %35 ], [ %271, %269 ]
  %48 = phi i32 [ %33, %35 ], [ %274, %269 ]
  %49 = phi i32 [ %26, %35 ], [ %270, %269 ]
  %50 = load i32, i32* %36, align 4
  %51 = load i32, i32* %37, align 8
  %52 = icmp sgt i32 %50, %51
  br i1 %52, label %53, label %276

53:                                               ; preds = %44
  %54 = load i32, i32* %38, align 8
  %55 = load i8*, i8** %39, align 8
  %56 = lshr i32 %51, 3
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds i8, i8* %55, i64 %57
  %59 = bitcast i8* %58 to i32*
  %60 = load i32, i32* %59, align 1
  %61 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %60) #6, !srcloc !2
  %62 = and i32 %51, 7
  %63 = shl i32 %61, %62
  %64 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -11, i32 %63) #6, !srcloc !3
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds [2 x i16], [2 x i16]* %18, i64 %65, i64 0
  %67 = load i16, i16* %66, align 2
  %68 = sext i16 %67 to i32
  %69 = getelementptr inbounds [2 x i16], [2 x i16]* %18, i64 %65, i64 1
  %70 = load i16, i16* %69, align 2
  %71 = sext i16 %70 to i32
  %72 = icmp slt i16 %70, 0
  br i1 %72, label %73, label %118

73:                                               ; preds = %53
  %74 = add i32 %51, 11
  %75 = icmp ugt i32 %54, %74
  %76 = select i1 %75, i32 %74, i32 %54
  %77 = lshr i32 %76, 3
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* %55, i64 %78
  %80 = bitcast i8* %79 to i32*
  %81 = load i32, i32* %80, align 1
  %82 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %81) #6, !srcloc !2
  %83 = and i32 %76, 7
  %84 = shl i32 %82, %83
  %85 = trunc i16 %70 to i8
  %86 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %85, i32 %84) #6, !srcloc !3
  %87 = add i32 %86, %68
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds [2 x i16], [2 x i16]* %18, i64 %88, i64 0
  %90 = load i16, i16* %89, align 2
  %91 = sext i16 %90 to i32
  %92 = getelementptr inbounds [2 x i16], [2 x i16]* %18, i64 %88, i64 1
  %93 = load i16, i16* %92, align 2
  %94 = sext i16 %93 to i32
  %95 = icmp slt i16 %93, 0
  br i1 %95, label %96, label %118

96:                                               ; preds = %73
  %97 = sub i32 %76, %71
  %98 = icmp ugt i32 %54, %97
  %99 = select i1 %98, i32 %97, i32 %54
  %100 = lshr i32 %99, 3
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds i8, i8* %55, i64 %101
  %103 = bitcast i8* %102 to i32*
  %104 = load i32, i32* %103, align 1
  %105 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %104) #6, !srcloc !2
  %106 = and i32 %99, 7
  %107 = shl i32 %105, %106
  %108 = trunc i16 %93 to i8
  %109 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %108, i32 %107) #6, !srcloc !3
  %110 = add i32 %109, %91
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds [2 x i16], [2 x i16]* %18, i64 %111, i64 0
  %113 = load i16, i16* %112, align 2
  %114 = sext i16 %113 to i32
  %115 = getelementptr inbounds [2 x i16], [2 x i16]* %18, i64 %111, i64 1
  %116 = load i16, i16* %115, align 2
  %117 = sext i16 %116 to i32
  br label %118

118:                                              ; preds = %53, %73, %96
  %119 = phi i32 [ %114, %96 ], [ %91, %73 ], [ %68, %53 ]
  %120 = phi i32 [ %99, %96 ], [ %76, %73 ], [ %51, %53 ]
  %121 = phi i32 [ %117, %96 ], [ %94, %73 ], [ %71, %53 ]
  %122 = add i32 %121, %120
  %123 = icmp ugt i32 %54, %122
  %124 = select i1 %123, i32 %122, i32 %54
  store i32 %124, i32* %37, align 8
  %125 = icmp ult i32 %119, 7
  br i1 %125, label %126, label %170

126:                                              ; preds = %118
  %127 = sext i32 %119 to i64
  %128 = getelementptr inbounds [7 x %struct.anon], [7 x %struct.anon]* @eob_run_table, i64 0, i64 %127, i32 0
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = add nsw i64 %127, -3
  %132 = icmp ult i64 %131, 4
  br i1 %132, label %133, label %151

133:                                              ; preds = %126
  %134 = getelementptr inbounds [7 x %struct.anon], [7 x %struct.anon]* @eob_run_table, i64 0, i64 %127, i32 1
  %135 = load i8, i8* %134, align 1
  %136 = zext i8 %135 to i32
  %137 = lshr i32 %124, 3
  %138 = zext i32 %137 to i64
  %139 = getelementptr inbounds i8, i8* %55, i64 %138
  %140 = bitcast i8* %139 to i32*
  %141 = load i32, i32* %140, align 1
  %142 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %141) #6, !srcloc !2
  %143 = and i32 %124, 7
  %144 = shl i32 %142, %143
  %145 = sub i8 0, %135
  %146 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %145, i32 %144) #6, !srcloc !3
  %147 = add i32 %124, %136
  %148 = icmp ugt i32 %54, %147
  %149 = select i1 %148, i32 %147, i32 %54
  store i32 %149, i32* %37, align 8
  %150 = add i32 %146, %130
  br label %151

151:                                              ; preds = %126, %133
  %152 = phi i32 [ %150, %133 ], [ %130, %126 ]
  %153 = icmp eq i32 %152, 0
  %154 = select i1 %153, i32 2147483647, i32 %152
  %155 = sub nsw i32 %10, %46
  %156 = icmp sgt i32 %154, %155
  br i1 %156, label %157, label %164

157:                                              ; preds = %151
  %158 = trunc i32 %155 to i16
  %159 = shl i16 %158, 2
  %160 = getelementptr inbounds i16, i16* %12, i64 %45
  store i16 %159, i16* %160, align 2
  %161 = add nsw i32 %155, %47
  %162 = sub nsw i32 %154, %155
  %163 = add nuw nsw i32 %48, 1
  br label %278

164:                                              ; preds = %151
  %165 = trunc i32 %154 to i16
  %166 = shl i16 %165, 2
  %167 = getelementptr inbounds i16, i16* %12, i64 %45
  store i16 %166, i16* %167, align 2
  %168 = add nsw i32 %154, %47
  %169 = add nsw i32 %154, %46
  br label %269

170:                                              ; preds = %118
  %171 = icmp sgt i32 %119, -1
  br i1 %171, label %172, label %267

172:                                              ; preds = %170
  %173 = sext i32 %119 to i64
  %174 = add nsw i64 %173, -13
  %175 = icmp ult i64 %174, 19
  br i1 %175, label %176, label %194

176:                                              ; preds = %172
  %177 = getelementptr inbounds [32 x i8], [32 x i8]* @coeff_get_bits, i64 0, i64 %173
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i32
  %180 = lshr i32 %124, 3
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds i8, i8* %55, i64 %181
  %183 = bitcast i8* %182 to i32*
  %184 = load i32, i32* %183, align 1
  %185 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %184) #6, !srcloc !2
  %186 = and i32 %124, 7
  %187 = shl i32 %185, %186
  %188 = sub i8 0, %178
  %189 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %188, i32 %187) #6, !srcloc !3
  %190 = add i32 %124, %179
  %191 = icmp ugt i32 %54, %190
  %192 = select i1 %191, i32 %190, i32 %54
  store i32 %192, i32* %37, align 8
  %193 = sext i32 %189 to i64
  br label %194

194:                                              ; preds = %176, %172
  %195 = phi i32 [ %192, %176 ], [ %124, %172 ]
  %196 = phi i64 [ %193, %176 ], [ 0, %172 ]
  %197 = getelementptr inbounds [32 x i16*], [32 x i16*]* @coeff_tables, i64 0, i64 %173
  %198 = load i16*, i16** %197, align 8
  %199 = getelementptr inbounds i16, i16* %198, i64 %196
  %200 = load i16, i16* %199, align 2
  %201 = getelementptr inbounds [32 x i8], [32 x i8]* @zero_run_base, i64 0, i64 %173
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i32
  %204 = lshr i64 2952790400, %173
  %205 = and i64 %204, 1
  %206 = icmp eq i64 %205, 0
  br i1 %206, label %225, label %207

207:                                              ; preds = %194
  %208 = getelementptr inbounds [32 x i8], [32 x i8]* @zero_run_get_bits, i64 0, i64 %173
  %209 = load i8, i8* %208, align 1
  %210 = zext i8 %209 to i32
  %211 = lshr i32 %195, 3
  %212 = zext i32 %211 to i64
  %213 = getelementptr inbounds i8, i8* %55, i64 %212
  %214 = bitcast i8* %213 to i32*
  %215 = load i32, i32* %214, align 1
  %216 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %215) #6, !srcloc !2
  %217 = and i32 %195, 7
  %218 = shl i32 %216, %217
  %219 = sub i8 0, %209
  %220 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %219, i32 %218) #6, !srcloc !3
  %221 = add i32 %195, %210
  %222 = icmp ugt i32 %54, %221
  %223 = select i1 %222, i32 %221, i32 %54
  store i32 %223, i32* %37, align 8
  %224 = add i32 %220, %203
  br label %225

225:                                              ; preds = %194, %207
  %226 = phi i32 [ %224, %207 ], [ %203, %194 ]
  %227 = icmp eq i32 %226, 0
  br i1 %227, label %235, label %228

228:                                              ; preds = %225
  %229 = sext i16 %200 to i32
  %230 = shl nsw i32 %229, 9
  %231 = shl i32 %226, 2
  %232 = add nsw i32 %231, %230
  %233 = trunc i32 %232 to i16
  %234 = or i16 %233, 1
  br label %245

235:                                              ; preds = %225
  br i1 %40, label %236, label %242

236:                                              ; preds = %235
  %237 = sext i32 %46 to i64
  %238 = getelementptr inbounds i32, i32* %14, i64 %237
  %239 = load i32, i32* %238, align 4
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %16, i64 %240, i32 0
  store i16 %200, i16* %241, align 2
  br label %242

242:                                              ; preds = %235, %236
  %243 = shl i16 %200, 2
  %244 = or i16 %243, 2
  br label %245

245:                                              ; preds = %242, %228
  %246 = phi i16 [ %244, %242 ], [ %234, %228 ]
  %247 = getelementptr inbounds i16, i16* %12, i64 %45
  store i16 %246, i16* %247, align 2
  %248 = add nsw i32 %226, %3
  %249 = icmp sgt i32 %248, 64
  br i1 %249, label %250, label %252

250:                                              ; preds = %245
  %251 = load i8*, i8** %41, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %251, i32 48, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.36, i64 0, i64 0), i32 %226, i32 %42) #5
  br label %252

252:                                              ; preds = %250, %245
  %253 = phi i32 [ 64, %250 ], [ %248, %245 ]
  %254 = phi i32 [ %42, %250 ], [ %226, %245 ]
  %255 = icmp sgt i32 %254, 0
  br i1 %255, label %256, label %265

256:                                              ; preds = %252
  %257 = sext i32 %253 to i64
  br label %258

258:                                              ; preds = %256, %258
  %259 = phi i64 [ %8, %256 ], [ %260, %258 ]
  %260 = add nsw i64 %259, 1
  %261 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 60, i64 %7, i64 %260
  %262 = load i32, i32* %261, align 4
  %263 = add nsw i32 %262, -1
  store i32 %263, i32* %261, align 4
  %264 = icmp slt i64 %260, %257
  br i1 %264, label %258, label %265

265:                                              ; preds = %258, %252
  %266 = add nsw i32 %46, 1
  br label %269

267:                                              ; preds = %170
  %268 = load i8*, i8** %41, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %268, i32 16, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.37, i64 0, i64 0), i32 %119) #5
  br label %346

269:                                              ; preds = %164, %265
  %270 = phi i32 [ 0, %164 ], [ %49, %265 ]
  %271 = phi i32 [ %168, %164 ], [ %47, %265 ]
  %272 = phi i32 [ %169, %164 ], [ %266, %265 ]
  %273 = add nuw i64 %45, 1
  %274 = add nuw nsw i32 %48, 1
  %275 = icmp sgt i32 %10, %272
  br i1 %275, label %44, label %278

276:                                              ; preds = %44
  %277 = trunc i64 %45 to i32
  br label %278

278:                                              ; preds = %269, %276, %157, %32
  %279 = phi i32 [ %26, %32 ], [ %162, %157 ], [ %49, %276 ], [ %270, %269 ]
  %280 = phi i32 [ %33, %32 ], [ %163, %157 ], [ %277, %276 ], [ %274, %269 ]
  %281 = phi i32 [ %27, %32 ], [ %161, %157 ], [ %47, %276 ], [ %271, %269 ]
  %282 = load i32, i32* %9, align 4
  %283 = icmp sgt i32 %281, %282
  br i1 %283, label %284, label %287

284:                                              ; preds = %278
  %285 = bitcast %struct.Vp3DecodeContext* %0 to i8**
  %286 = load i8*, i8** %285, align 16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %286, i32 16, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.38, i64 0, i64 0)) #5
  br label %287

287:                                              ; preds = %284, %278
  %288 = icmp eq i32 %281, 0
  br i1 %288, label %330, label %289

289:                                              ; preds = %287
  %290 = add i32 %3, 1
  %291 = icmp slt i32 %290, 64
  br i1 %291, label %292, label %330

292:                                              ; preds = %289
  %293 = sext i32 %290 to i64
  %294 = sub i32 3, %3
  %295 = sub i32 62, %3
  %296 = and i32 %294, 3
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %307, label %298

298:                                              ; preds = %292, %298
  %299 = phi i64 [ %304, %298 ], [ %293, %292 ]
  %300 = phi i32 [ %305, %298 ], [ %296, %292 ]
  %301 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 60, i64 %7, i64 %299
  %302 = load i32, i32* %301, align 4
  %303 = sub nsw i32 %302, %281
  store i32 %303, i32* %301, align 4
  %304 = add nsw i64 %299, 1
  %305 = add i32 %300, -1
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %307, label %298, !llvm.loop !6

307:                                              ; preds = %298, %292
  %308 = phi i64 [ %293, %292 ], [ %304, %298 ]
  %309 = icmp ult i32 %295, 3
  br i1 %309, label %330, label %310

310:                                              ; preds = %307, %310
  %311 = phi i64 [ %327, %310 ], [ %308, %307 ]
  %312 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 60, i64 %7, i64 %311
  %313 = load i32, i32* %312, align 4
  %314 = sub nsw i32 %313, %281
  store i32 %314, i32* %312, align 4
  %315 = add nsw i64 %311, 1
  %316 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 60, i64 %7, i64 %315
  %317 = load i32, i32* %316, align 4
  %318 = sub nsw i32 %317, %281
  store i32 %318, i32* %316, align 4
  %319 = add nsw i64 %311, 2
  %320 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 60, i64 %7, i64 %319
  %321 = load i32, i32* %320, align 4
  %322 = sub nsw i32 %321, %281
  store i32 %322, i32* %320, align 4
  %323 = add nsw i64 %311, 3
  %324 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 60, i64 %7, i64 %323
  %325 = load i32, i32* %324, align 4
  %326 = sub nsw i32 %325, %281
  store i32 %326, i32* %324, align 4
  %327 = add nsw i64 %311, 4
  %328 = trunc i64 %327 to i32
  %329 = icmp eq i32 %328, 64
  br i1 %329, label %330, label %310

330:                                              ; preds = %307, %310, %289, %287
  %331 = icmp slt i32 %4, 2
  br i1 %331, label %332, label %338

332:                                              ; preds = %330
  %333 = zext i32 %280 to i64
  %334 = getelementptr inbounds i16, i16* %12, i64 %333
  %335 = add nsw i32 %4, 1
  %336 = sext i32 %335 to i64
  %337 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 58, i64 %336, i64 %8
  store i16* %334, i16** %337, align 8
  br label %346

338:                                              ; preds = %330
  %339 = icmp slt i32 %3, 63
  br i1 %339, label %340, label %346

340:                                              ; preds = %338
  %341 = zext i32 %280 to i64
  %342 = getelementptr inbounds i16, i16* %12, i64 %341
  %343 = add nsw i32 %3, 1
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 58, i64 0, i64 %344
  store i16* %342, i16** %345, align 8
  br label %346

346:                                              ; preds = %332, %340, %338, %267, %20
  %347 = phi i32 [ -1094995529, %20 ], [ -1, %267 ], [ %279, %338 ], [ %279, %340 ], [ %279, %332 ]
  ret i32 %347
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @reverse_dc_prediction(%struct.Vp3DecodeContext* nocapture readonly, i32, i32, i32) unnamed_addr #0 {
  %5 = alloca [3 x i16], align 2
  %6 = bitcast [3 x i16]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 6, i8* nonnull %6) #5
  %7 = getelementptr inbounds [3 x i16], [3 x i16]* %5, i64 0, i64 0
  %8 = getelementptr inbounds [3 x i16], [3 x i16]* %5, i64 0, i64 1
  %9 = getelementptr inbounds [3 x i16], [3 x i16]* %5, i64 0, i64 2
  store i16 0, i16* %9, align 2
  store i16 0, i16* %8, align 2
  store i16 0, i16* %7, align 2
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %187

11:                                               ; preds = %4
  %12 = icmp sgt i32 %2, 0
  %13 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 45
  %14 = sext i32 %2 to i64
  br label %15

15:                                               ; preds = %179, %11
  %16 = phi i32 [ 0, %11 ], [ %184, %179 ]
  %17 = phi i32 [ 0, %11 ], [ %183, %179 ]
  %18 = phi i32 [ 0, %11 ], [ %182, %179 ]
  %19 = phi i32 [ 0, %11 ], [ %181, %179 ]
  %20 = phi i32 [ %1, %11 ], [ %180, %179 ]
  %21 = phi i32 [ 0, %11 ], [ %185, %179 ]
  br i1 %12, label %22, label %179

22:                                               ; preds = %15
  %23 = icmp eq i32 %21, 0
  %24 = sext i32 %20 to i64
  %25 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %13, align 8
  br label %26

26:                                               ; preds = %168, %22
  %27 = phi %struct.Vp3Fragment* [ %25, %22 ], [ %169, %168 ]
  %28 = phi i64 [ %24, %22 ], [ %175, %168 ]
  %29 = phi i32 [ %16, %22 ], [ %173, %168 ]
  %30 = phi i32 [ %17, %22 ], [ %172, %168 ]
  %31 = phi i32 [ %18, %22 ], [ %171, %168 ]
  %32 = phi i32 [ %19, %22 ], [ %170, %168 ]
  %33 = phi i32 [ 0, %22 ], [ %174, %168 ]
  %34 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %27, i64 %28, i32 1
  %35 = load i8, i8* %34, align 2
  %36 = icmp eq i8 %35, 8
  br i1 %36, label %168, label %37

37:                                               ; preds = %26
  %38 = zext i8 %35 to i64
  %39 = getelementptr inbounds [9 x i8], [9 x i8]* @reverse_dc_prediction.compatible_frame, i64 0, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = icmp ne i32 %33, 0
  br i1 %41, label %42, label %54

42:                                               ; preds = %37
  %43 = add nsw i64 %28, -1
  %44 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %27, i64 %43, i32 0
  %45 = load i16, i16* %44, align 2
  %46 = sext i16 %45 to i32
  %47 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %27, i64 %43, i32 1
  %48 = load i8, i8* %47, align 2
  %49 = zext i8 %48 to i64
  %50 = getelementptr inbounds [9 x i8], [9 x i8]* @reverse_dc_prediction.compatible_frame, i64 0, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = icmp eq i8 %51, %40
  %53 = zext i1 %52 to i32
  br label %54

54:                                               ; preds = %42, %37
  %55 = phi i32 [ %32, %37 ], [ %46, %42 ]
  %56 = phi i32 [ 0, %37 ], [ %53, %42 ]
  br i1 %23, label %100, label %57

57:                                               ; preds = %54
  %58 = sub nsw i64 %28, %14
  %59 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %27, i64 %58, i32 0
  %60 = load i16, i16* %59, align 2
  %61 = sext i16 %60 to i32
  %62 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %27, i64 %58, i32 1
  %63 = load i8, i8* %62, align 2
  %64 = zext i8 %63 to i64
  %65 = getelementptr inbounds [9 x i8], [9 x i8]* @reverse_dc_prediction.compatible_frame, i64 0, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = icmp eq i8 %66, %40
  %68 = or i32 %56, 4
  %69 = select i1 %67, i32 %68, i32 %56
  br i1 %41, label %70, label %83

70:                                               ; preds = %57
  %71 = add nsw i64 %58, -1
  %72 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %27, i64 %71, i32 0
  %73 = load i16, i16* %72, align 2
  %74 = sext i16 %73 to i32
  %75 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %27, i64 %71, i32 1
  %76 = load i8, i8* %75, align 2
  %77 = zext i8 %76 to i64
  %78 = getelementptr inbounds [9 x i8], [9 x i8]* @reverse_dc_prediction.compatible_frame, i64 0, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = icmp eq i8 %79, %40
  %81 = or i32 %69, 8
  %82 = select i1 %80, i32 %81, i32 %69
  br label %83

83:                                               ; preds = %70, %57
  %84 = phi i32 [ %31, %57 ], [ %74, %70 ]
  %85 = phi i32 [ %69, %57 ], [ %82, %70 ]
  %86 = add nuw nsw i32 %33, 1
  %87 = icmp slt i32 %86, %2
  br i1 %87, label %88, label %100

88:                                               ; preds = %83
  %89 = add nsw i64 %58, 1
  %90 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %27, i64 %89, i32 0
  %91 = load i16, i16* %90, align 2
  %92 = sext i16 %91 to i32
  %93 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %27, i64 %89, i32 1
  %94 = load i8, i8* %93, align 2
  %95 = zext i8 %94 to i64
  %96 = getelementptr inbounds [9 x i8], [9 x i8]* @reverse_dc_prediction.compatible_frame, i64 0, i64 %95
  %97 = load i8, i8* %96, align 1
  %98 = icmp eq i8 %97, %40
  %99 = or i32 %85, 2
  br i1 %98, label %111, label %100

100:                                              ; preds = %88, %54, %83
  %101 = phi i32 [ %84, %83 ], [ %31, %54 ], [ %84, %88 ]
  %102 = phi i32 [ %61, %83 ], [ %30, %54 ], [ %61, %88 ]
  %103 = phi i32 [ %29, %83 ], [ %29, %54 ], [ %92, %88 ]
  %104 = phi i32 [ %85, %83 ], [ %56, %54 ], [ %85, %88 ]
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %111

106:                                              ; preds = %100
  %107 = zext i8 %40 to i64
  %108 = getelementptr inbounds [3 x i16], [3 x i16]* %5, i64 0, i64 %107
  %109 = load i16, i16* %108, align 2
  %110 = sext i16 %109 to i32
  br label %154

111:                                              ; preds = %88, %100
  %112 = phi i32 [ %104, %100 ], [ %99, %88 ]
  %113 = phi i32 [ %103, %100 ], [ %92, %88 ]
  %114 = phi i32 [ %102, %100 ], [ %61, %88 ]
  %115 = phi i32 [ %101, %100 ], [ %84, %88 ]
  %116 = sext i32 %112 to i64
  %117 = getelementptr inbounds [16 x [4 x i32]], [16 x [4 x i32]]* @reverse_dc_prediction.predictor_transform, i64 0, i64 %116, i64 0
  %118 = load i32, i32* %117, align 16
  %119 = mul nsw i32 %118, %115
  %120 = getelementptr inbounds [16 x [4 x i32]], [16 x [4 x i32]]* @reverse_dc_prediction.predictor_transform, i64 0, i64 %116, i64 1
  %121 = load i32, i32* %120, align 4
  %122 = mul nsw i32 %121, %114
  %123 = add nsw i32 %122, %119
  %124 = getelementptr inbounds [16 x [4 x i32]], [16 x [4 x i32]]* @reverse_dc_prediction.predictor_transform, i64 0, i64 %116, i64 2
  %125 = load i32, i32* %124, align 8
  %126 = mul nsw i32 %125, %113
  %127 = add nsw i32 %123, %126
  %128 = getelementptr inbounds [16 x [4 x i32]], [16 x [4 x i32]]* @reverse_dc_prediction.predictor_transform, i64 0, i64 %116, i64 3
  %129 = load i32, i32* %128, align 4
  %130 = mul nsw i32 %129, %55
  %131 = add nsw i32 %127, %130
  %132 = sdiv i32 %131, 128
  %133 = or i32 %112, 2
  %134 = icmp eq i32 %133, 15
  br i1 %134, label %135, label %154

135:                                              ; preds = %111
  %136 = sub nsw i32 %132, %114
  %137 = icmp slt i32 %136, 0
  %138 = sub nsw i32 0, %136
  %139 = select i1 %137, i32 %138, i32 %136
  %140 = icmp sgt i32 %139, 128
  br i1 %140, label %154, label %141

141:                                              ; preds = %135
  %142 = sub nsw i32 %132, %55
  %143 = icmp slt i32 %142, 0
  %144 = sub nsw i32 0, %142
  %145 = select i1 %143, i32 %144, i32 %142
  %146 = icmp sgt i32 %145, 128
  br i1 %146, label %154, label %147

147:                                              ; preds = %141
  %148 = sub nsw i32 %132, %115
  %149 = icmp slt i32 %148, 0
  %150 = sub nsw i32 0, %148
  %151 = select i1 %149, i32 %150, i32 %148
  %152 = icmp sgt i32 %151, 128
  %153 = select i1 %152, i32 %115, i32 %132
  br label %154

154:                                              ; preds = %147, %141, %135, %111, %106
  %155 = phi i32 [ %103, %106 ], [ %113, %111 ], [ %113, %135 ], [ %113, %141 ], [ %113, %147 ]
  %156 = phi i32 [ %102, %106 ], [ %114, %111 ], [ %114, %135 ], [ %114, %141 ], [ %114, %147 ]
  %157 = phi i32 [ %101, %106 ], [ %115, %111 ], [ %115, %135 ], [ %115, %141 ], [ %115, %147 ]
  %158 = phi i32 [ %110, %106 ], [ %132, %111 ], [ %114, %135 ], [ %55, %141 ], [ %153, %147 ]
  %159 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %27, i64 %28, i32 0
  %160 = load i16, i16* %159, align 2
  %161 = trunc i32 %158 to i16
  %162 = add i16 %160, %161
  store i16 %162, i16* %159, align 2
  %163 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %13, align 8
  %164 = getelementptr inbounds %struct.Vp3Fragment, %struct.Vp3Fragment* %163, i64 %28, i32 0
  %165 = load i16, i16* %164, align 2
  %166 = zext i8 %40 to i64
  %167 = getelementptr inbounds [3 x i16], [3 x i16]* %5, i64 0, i64 %166
  store i16 %165, i16* %167, align 2
  br label %168

168:                                              ; preds = %26, %154
  %169 = phi %struct.Vp3Fragment* [ %163, %154 ], [ %27, %26 ]
  %170 = phi i32 [ %55, %154 ], [ %32, %26 ]
  %171 = phi i32 [ %157, %154 ], [ %31, %26 ]
  %172 = phi i32 [ %156, %154 ], [ %30, %26 ]
  %173 = phi i32 [ %155, %154 ], [ %29, %26 ]
  %174 = add nuw nsw i32 %33, 1
  %175 = add nsw i64 %28, 1
  %176 = icmp eq i32 %174, %2
  br i1 %176, label %177, label %26

177:                                              ; preds = %168
  %178 = trunc i64 %175 to i32
  br label %179

179:                                              ; preds = %177, %15
  %180 = phi i32 [ %20, %15 ], [ %178, %177 ]
  %181 = phi i32 [ %19, %15 ], [ %170, %177 ]
  %182 = phi i32 [ %18, %15 ], [ %171, %177 ]
  %183 = phi i32 [ %17, %15 ], [ %172, %177 ]
  %184 = phi i32 [ %16, %15 ], [ %173, %177 ]
  %185 = add nuw nsw i32 %21, 1
  %186 = icmp eq i32 %185, %3
  br i1 %186, label %187, label %15

187:                                              ; preds = %179, %4
  call void @llvm.lifetime.end.p0i8(i64 6, i8* nonnull %6) #5
  ret void
}

declare void @ff_thread_await_progress(%struct.ThreadFrame*, i32, i32) local_unnamed_addr #3

; Function Attrs: cold nounwind optsize ssp uwtable
define internal fastcc void @free_tables(%struct.AVCodecContext* nocapture readonly) unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %3 = bitcast i8** %2 to %struct.Vp3DecodeContext**
  %4 = load %struct.Vp3DecodeContext*, %struct.Vp3DecodeContext** %3, align 8
  %5 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 34
  %6 = bitcast i8** %5 to i8*
  tail call void @av_freep(i8* %6) #5
  %7 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 45
  %8 = bitcast %struct.Vp3Fragment** %7 to i8*
  tail call void @av_freep(i8* %8) #5
  %9 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 64
  %10 = bitcast i32** %9 to i8*
  tail call void @av_freep(i8* %10) #5
  %11 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 63
  %12 = bitcast i32** %11 to i8*
  tail call void @av_freep(i8* %12) #5
  %13 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 59
  %14 = bitcast i16** %13 to i8*
  tail call void @av_freep(i8* %14) #5
  %15 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 74
  %16 = bitcast i32** %15 to i8*
  tail call void @av_freep(i8* %16) #5
  %17 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 75
  %18 = bitcast i8** %17 to i8*
  tail call void @av_freep(i8* %18) #5
  %19 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 80
  %20 = bitcast %struct.VP4Predictor** %19 to i8*
  tail call void @av_freep(i8* %20) #5
  %21 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 51
  %22 = bitcast [2 x [2 x i8]*]* %21 to i8*
  tail call void @av_freep(i8* %22) #5
  %23 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 51, i64 1
  %24 = bitcast [2 x i8]** %23 to i8*
  tail call void @av_freep(i8* %24) #5
  ret void
}

declare void @av_freep(i8*) local_unnamed_addr #3

declare void @av_frame_free(%struct.AVFrame**) local_unnamed_addr #3

declare void @ff_free_vlc(%struct.VLC*) local_unnamed_addr #3

; Function Attrs: cold nounwind optsize ssp uwtable
define internal fastcc i32 @init_frames(%struct.Vp3DecodeContext* nocapture) unnamed_addr #1 {
  %2 = tail call %struct.AVFrame* @av_frame_alloc() #5
  %3 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 11, i32 0
  store %struct.AVFrame* %2, %struct.AVFrame** %3, align 8
  %4 = tail call %struct.AVFrame* @av_frame_alloc() #5
  %5 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 10, i32 0
  store %struct.AVFrame* %4, %struct.AVFrame** %5, align 8
  %6 = tail call %struct.AVFrame* @av_frame_alloc() #5
  %7 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %0, i64 0, i32 9, i32 0
  store %struct.AVFrame* %6, %struct.AVFrame** %7, align 8
  %8 = load %struct.AVFrame*, %struct.AVFrame** %3, align 8
  %9 = icmp eq %struct.AVFrame* %8, null
  br i1 %9, label %16, label %10

10:                                               ; preds = %1
  %11 = load %struct.AVFrame*, %struct.AVFrame** %5, align 8
  %12 = icmp eq %struct.AVFrame* %11, null
  %13 = icmp eq %struct.AVFrame* %6, null
  %14 = or i1 %13, %12
  %15 = select i1 %14, i32 -12, i32 0
  ret i32 %15

16:                                               ; preds = %1
  ret i32 -12
}

declare void @ff_hpeldsp_init(%struct.HpelDSPContext*, i32) local_unnamed_addr #3

declare void @ff_videodsp_init(%struct.VideoDSPContext*, i32) local_unnamed_addr #3

declare void @ff_vp3dsp_init(%struct.VP3DSPContext*, i32) local_unnamed_addr #3

declare i32 @av_pix_fmt_get_chroma_sub_sample(i32, i32*, i32*) local_unnamed_addr #3

declare i32 @ff_init_vlc_from_lengths(%struct.VLC*, i32, i32, i8*, i32, i8*, i32, i32, i32, i32, i8*) local_unnamed_addr #3

; Function Attrs: cold nounwind optsize ssp uwtable
define internal fastcc i32 @allocate_tables(%struct.AVCodecContext* nocapture readonly) unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %3 = bitcast i8** %2 to %struct.Vp3DecodeContext**
  %4 = load %struct.Vp3DecodeContext*, %struct.Vp3DecodeContext** %3, align 8
  tail call fastcc void @free_tables(%struct.AVCodecContext* %0) #7
  %5 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 43, i64 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 44, i64 0
  %8 = load i32, i32* %7, align 16
  %9 = mul nsw i32 %8, %6
  %10 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 43, i64 1
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 44, i64 1
  %13 = load i32, i32* %12, align 4
  %14 = mul nsw i32 %13, %11
  %15 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 25
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 41
  %18 = load i32, i32* %17, align 16
  %19 = icmp sgt i32 %16, %18
  %20 = select i1 %19, i32 %16, i32 %18
  %21 = sext i32 %20 to i64
  %22 = tail call noalias i8* @av_mallocz(i64 %21) #5
  %23 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 34
  store i8* %22, i8** %23, align 16
  %24 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 42
  %25 = load i32, i32* %24, align 4
  %26 = sext i32 %25 to i64
  %27 = tail call i8* @av_mallocz_array(i64 %26, i64 4) #5
  %28 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 45
  %29 = bitcast %struct.Vp3Fragment** %28 to i8**
  store i8* %27, i8** %29, align 8
  %30 = load i32, i32* %24, align 4
  %31 = sext i32 %30 to i64
  %32 = tail call i8* @av_mallocz_array(i64 %31, i64 4) #5
  %33 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 63
  %34 = bitcast i32** %33 to i8**
  store i8* %32, i8** %34, align 16
  %35 = load i32, i32* %24, align 4
  %36 = sext i32 %35 to i64
  %37 = tail call i8* @av_mallocz_array(i64 %36, i64 4) #5
  %38 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 64
  %39 = bitcast i32** %38 to i8**
  store i8* %37, i8** %39, align 8
  %40 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 65, i64 0
  %41 = bitcast i32* %40 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 16 %41, i8 -1, i64 12, i1 false)
  %42 = load i32, i32* %24, align 4
  %43 = sext i32 %42 to i64
  %44 = tail call i8* @av_mallocz_array(i64 %43, i64 128) #5
  %45 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 59
  %46 = bitcast i16** %45 to i8**
  store i8* %44, i8** %46, align 8
  %47 = sext i32 %9 to i64
  %48 = tail call i8* @av_mallocz_array(i64 %47, i64 2) #5
  %49 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 51
  %50 = getelementptr inbounds [2 x [2 x i8]*], [2 x [2 x i8]*]* %49, i64 0, i64 0
  %51 = bitcast [2 x [2 x i8]*]* %49 to i8**
  store i8* %48, i8** %51, align 16
  %52 = sext i32 %14 to i64
  %53 = tail call i8* @av_mallocz_array(i64 %52, i64 2) #5
  %54 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 51, i64 1
  %55 = bitcast [2 x i8]** %54 to i8**
  store i8* %53, i8** %55, align 8
  %56 = load i32, i32* %15, align 8
  %57 = sext i32 %56 to i64
  %58 = tail call i8* @av_mallocz_array(i64 %57, i64 64) #5
  %59 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 74
  %60 = bitcast i32** %59 to i8**
  store i8* %58, i8** %60, align 16
  %61 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 35
  %62 = load i32, i32* %61, align 8
  %63 = add nsw i32 %62, 1
  %64 = sext i32 %63 to i64
  %65 = tail call noalias i8* @av_mallocz(i64 %64) #5
  %66 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 75
  store i8* %65, i8** %66, align 8
  %67 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 26
  %68 = load i32, i32* %67, align 4
  %69 = shl nsw i32 %68, 2
  %70 = sext i32 %69 to i64
  %71 = tail call i8* @av_malloc_array(i64 %70, i64 8) #5
  %72 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 80
  %73 = bitcast %struct.VP4Predictor** %72 to i8**
  store i8* %71, i8** %73, align 16
  %74 = load i8*, i8** %23, align 16
  %75 = icmp eq i8* %74, null
  br i1 %75, label %173, label %76

76:                                               ; preds = %1
  %77 = load %struct.Vp3Fragment*, %struct.Vp3Fragment** %28, align 8
  %78 = icmp eq %struct.Vp3Fragment* %77, null
  br i1 %78, label %173, label %79

79:                                               ; preds = %76
  %80 = load i16*, i16** %45, align 8
  %81 = icmp eq i16* %80, null
  br i1 %81, label %173, label %82

82:                                               ; preds = %79
  %83 = load i32*, i32** %33, align 16
  %84 = icmp eq i32* %83, null
  br i1 %84, label %173, label %85

85:                                               ; preds = %82
  %86 = load i32*, i32** %38, align 8
  %87 = icmp eq i32* %86, null
  br i1 %87, label %173, label %88

88:                                               ; preds = %85
  %89 = load i32*, i32** %59, align 16
  %90 = icmp eq i32* %89, null
  br i1 %90, label %173, label %91

91:                                               ; preds = %88
  %92 = load i8*, i8** %66, align 8
  %93 = icmp eq i8* %92, null
  %94 = icmp eq i8* %71, null
  %95 = or i1 %94, %93
  br i1 %95, label %173, label %96

96:                                               ; preds = %91
  %97 = load [2 x i8]*, [2 x i8]** %50, align 16
  %98 = icmp eq [2 x i8]* %97, null
  br i1 %98, label %173, label %99

99:                                               ; preds = %96
  %100 = load [2 x i8]*, [2 x i8]** %54, align 8
  %101 = icmp eq [2 x i8]* %100, null
  br i1 %101, label %173, label %102

102:                                              ; preds = %99
  %103 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 29
  %104 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 30
  %105 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 27
  br label %106

106:                                              ; preds = %169, %102
  %107 = phi i64 [ 0, %102 ], [ %171, %169 ]
  %108 = phi i32 [ 0, %102 ], [ %170, %169 ]
  %109 = icmp ne i64 %107, 0
  %110 = select i1 %109, i32* %103, i32* %67
  %111 = load i32, i32* %110, align 4
  %112 = select i1 %109, i32* %104, i32* %105
  %113 = load i32, i32* %112, align 4
  %114 = zext i1 %109 to i64
  %115 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 43, i64 %114
  %116 = load i32, i32* %115, align 4
  %117 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 44, i64 %114
  %118 = load i32, i32* %117, align 4
  %119 = icmp sgt i32 %113, 0
  br i1 %119, label %120, label %169

120:                                              ; preds = %106
  %121 = icmp sgt i32 %111, 0
  %122 = getelementptr inbounds %struct.Vp3DecodeContext, %struct.Vp3DecodeContext* %4, i64 0, i32 46, i64 %107
  br label %123

123:                                              ; preds = %165, %120
  %124 = phi i32 [ %108, %120 ], [ %166, %165 ]
  %125 = phi i32 [ 0, %120 ], [ %167, %165 ]
  br i1 %121, label %126, label %165

126:                                              ; preds = %123
  %127 = shl nsw i32 %125, 2
  br label %128

128:                                              ; preds = %159, %126
  %129 = phi i32 [ %124, %126 ], [ %160, %159 ]
  %130 = phi i32 [ 0, %126 ], [ %161, %159 ]
  %131 = shl nsw i32 %130, 2
  %132 = sext i32 %129 to i64
  br label %133

133:                                              ; preds = %152, %128
  %134 = phi i64 [ 0, %128 ], [ %157, %152 ]
  %135 = phi i64 [ %132, %128 ], [ %156, %152 ]
  %136 = getelementptr inbounds [16 x [2 x i8]], [16 x [2 x i8]]* @hilbert_offset, i64 0, i64 %134, i64 0
  %137 = load i8, i8* %136, align 2
  %138 = zext i8 %137 to i32
  %139 = add nuw nsw i32 %131, %138
  %140 = getelementptr inbounds [16 x [2 x i8]], [16 x [2 x i8]]* @hilbert_offset, i64 0, i64 %134, i64 1
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i32
  %143 = add nuw nsw i32 %127, %142
  %144 = icmp slt i32 %139, %116
  %145 = icmp slt i32 %143, %118
  %146 = and i1 %144, %145
  br i1 %146, label %147, label %152

147:                                              ; preds = %133
  %148 = load i32, i32* %122, align 4
  %149 = mul nsw i32 %143, %116
  %150 = add i32 %149, %139
  %151 = add i32 %150, %148
  br label %152

152:                                              ; preds = %133, %147
  %153 = phi i32 [ %151, %147 ], [ -1, %133 ]
  %154 = load i32*, i32** %59, align 16
  %155 = getelementptr inbounds i32, i32* %154, i64 %135
  store i32 %153, i32* %155, align 4
  %156 = add nsw i64 %135, 1
  %157 = add nuw nsw i64 %134, 1
  %158 = icmp eq i64 %157, 16
  br i1 %158, label %159, label %133

159:                                              ; preds = %152
  %160 = trunc i64 %156 to i32
  %161 = add nuw nsw i32 %130, 1
  %162 = icmp eq i32 %161, %111
  br i1 %162, label %163, label %128

163:                                              ; preds = %159
  %164 = trunc i64 %156 to i32
  br label %165

165:                                              ; preds = %163, %123
  %166 = phi i32 [ %124, %123 ], [ %164, %163 ]
  %167 = add nuw nsw i32 %125, 1
  %168 = icmp eq i32 %167, %113
  br i1 %168, label %169, label %123

169:                                              ; preds = %165, %106
  %170 = phi i32 [ %108, %106 ], [ %166, %165 ]
  %171 = add nuw nsw i64 %107, 1
  %172 = icmp eq i64 %171, 3
  br i1 %172, label %173, label %106

173:                                              ; preds = %169, %1, %76, %79, %82, %85, %88, %91, %96, %99
  %174 = phi i32 [ -1, %99 ], [ -1, %96 ], [ -1, %91 ], [ -1, %88 ], [ -1, %85 ], [ -1, %82 ], [ -1, %79 ], [ -1, %76 ], [ -1, %1 ], [ 0, %169 ]
  ret i32 %174
}

declare %struct.AVFrame* @av_frame_alloc() local_unnamed_addr #3

declare noalias i8* @av_mallocz(i64) local_unnamed_addr #3

declare i8* @av_mallocz_array(i64, i64) local_unnamed_addr #3

declare i8* @av_malloc_array(i64, i64) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }
attributes #6 = { nounwind readnone }
attributes #7 = { cold }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 1921811}
!3 = !{i32 1935435, i32 1935449}
!4 = !{i32 0, i32 32}
!5 = !{i32 1383955}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
