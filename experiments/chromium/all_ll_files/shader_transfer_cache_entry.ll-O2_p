; ModuleID = '../../cc/paint/shader_transfer_cache_entry.cc'
source_filename = "../../cc/paint/shader_transfer_cache_entry.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::ServiceShaderTransferCacheEntry" = type { %"class.cc::TransferCacheEntryBase", %class.sk_sp, i64 }
%"class.cc::TransferCacheEntryBase" = type { %"class.cc::ServiceTransferCacheEntry" }
%"class.cc::ServiceTransferCacheEntry" = type { i32 (...)** }
%class.sk_sp = type { %"class.cc::PaintShader"* }
%"class.cc::PaintShader" = type <{ %class.SkRefCnt.base, i8, [3 x i8], i32, float, float, i32, i32, i32, i8, [3 x i8], %"class.absl::optional", %struct.SkPoint, %struct.SkRect, %struct.SkPoint, %struct.SkPoint, float, float, %"class.cc::PaintImage", %class.sk_sp.8, i32, %"class.absl::optional.11", %"class.std::__1::vector", %"class.std::__1::vector.17", %class.sk_sp.24, %class.sk_sp.1, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %class.SkMatrix }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%"class.cc::PaintImage" = type { %class.sk_sp.1, %class.sk_sp.8, %"class.gfx::Rect", i32, %class.sk_sp.9, %class.sk_sp.10, i32, i32, i32, i32, i8, i8, i32, i32, %class.sk_sp.1, %class.scoped_refptr }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%class.sk_sp.9 = type { %"class.cc::PaintImageGenerator"* }
%"class.cc::PaintImageGenerator" = type opaque
%class.sk_sp.10 = type { %"class.cc::TextureBacking"* }
%"class.cc::TextureBacking" = type opaque
%class.scoped_refptr = type { %"class.cc::PaintWorkletInput"* }
%"class.cc::PaintWorkletInput" = type opaque
%class.sk_sp.8 = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type opaque
%"class.absl::optional.11" = type { %"class.absl::optional_internal::optional_data.12" }
%"class.absl::optional_internal::optional_data.12" = type { %"class.absl::optional_internal::optional_data_base.13" }
%"class.absl::optional_internal::optional_data_base.13" = type { %"class.absl::optional_internal::optional_data_dtor_base.14" }
%"class.absl::optional_internal::optional_data_dtor_base.14" = type { i8, %union.anon.15 }
%union.anon.15 = type { %"class.gfx::SizeF" }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { float*, float*, %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { float* }
%class.sk_sp.24 = type { %class.SkPicture* }
%class.SkPicture = type opaque
%class.sk_sp.1 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.2, i32, i32 }
%class.sk_sp.2 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.GrDirectContext = type opaque

$_ZNK2cc22TransferCacheEntryBaseINS_25ServiceTransferCacheEntryELNS_22TransferCacheEntryTypeE2EE4TypeEv = comdat any

@_ZTVN2cc31ServiceShaderTransferCacheEntryE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.cc::ServiceShaderTransferCacheEntry"*)* @_ZN2cc31ServiceShaderTransferCacheEntryD2Ev to i8*), i8* bitcast (void (%"class.cc::ServiceShaderTransferCacheEntry"*)* @_ZN2cc31ServiceShaderTransferCacheEntryD0Ev to i8*), i8* bitcast (i32 (%"class.cc::TransferCacheEntryBase"*)* @_ZNK2cc22TransferCacheEntryBaseINS_25ServiceTransferCacheEntryELNS_22TransferCacheEntryTypeE2EE4TypeEv to i8*), i8* bitcast (i64 (%"class.cc::ServiceShaderTransferCacheEntry"*)* @_ZNK2cc31ServiceShaderTransferCacheEntry10CachedSizeEv to i8*), i8* bitcast (i1 (%"class.cc::ServiceShaderTransferCacheEntry"*, %class.GrDirectContext*, i64, i8*)* @_ZN2cc31ServiceShaderTransferCacheEntry11DeserializeEP15GrDirectContextN4base4spanIKhLm18446744073709551615EEE to i8*)] }, align 8

@_ZN2cc31ServiceShaderTransferCacheEntryC1E5sk_spINS_11PaintShaderEEm = hidden unnamed_addr alias void (%"class.cc::ServiceShaderTransferCacheEntry"*, %class.sk_sp*, i64), void (%"class.cc::ServiceShaderTransferCacheEntry"*, %class.sk_sp*, i64)* @_ZN2cc31ServiceShaderTransferCacheEntryC2E5sk_spINS_11PaintShaderEEm
@_ZN2cc31ServiceShaderTransferCacheEntryD1Ev = hidden unnamed_addr alias void (%"class.cc::ServiceShaderTransferCacheEntry"*), void (%"class.cc::ServiceShaderTransferCacheEntry"*)* @_ZN2cc31ServiceShaderTransferCacheEntryD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2cc31ServiceShaderTransferCacheEntryC2E5sk_spINS_11PaintShaderEEm(%"class.cc::ServiceShaderTransferCacheEntry"* nocapture, %class.sk_sp* nocapture, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.cc::ServiceShaderTransferCacheEntry", %"class.cc::ServiceShaderTransferCacheEntry"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN2cc31ServiceShaderTransferCacheEntryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.cc::ServiceShaderTransferCacheEntry", %"class.cc::ServiceShaderTransferCacheEntry"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %7 = bitcast %class.sk_sp* %1 to i64*
  %8 = load i64, i64* %7, align 8
  store %"class.cc::PaintShader"* null, %"class.cc::PaintShader"** %6, align 8
  %9 = bitcast %class.sk_sp* %5 to i64*
  store i64 %8, i64* %9, align 8
  %10 = getelementptr inbounds %"class.cc::ServiceShaderTransferCacheEntry", %"class.cc::ServiceShaderTransferCacheEntry"* %0, i64 0, i32 2
  store i64 %2, i64* %10, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc31ServiceShaderTransferCacheEntryD2Ev(%"class.cc::ServiceShaderTransferCacheEntry"* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.cc::ServiceShaderTransferCacheEntry", %"class.cc::ServiceShaderTransferCacheEntry"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN2cc31ServiceShaderTransferCacheEntryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.cc::ServiceShaderTransferCacheEntry", %"class.cc::ServiceShaderTransferCacheEntry"* %0, i64 0, i32 1, i32 0
  %4 = load %"class.cc::PaintShader"*, %"class.cc::PaintShader"** %3, align 8
  %5 = icmp eq %"class.cc::PaintShader"* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.cc::PaintShader", %"class.cc::PaintShader"* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %"class.cc::PaintShader"* %4 to %class.SkRefCntBase*
  %12 = bitcast %"class.cc::PaintShader"* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #5
  br label %16

16:                                               ; preds = %1, %6, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc31ServiceShaderTransferCacheEntryD0Ev(%"class.cc::ServiceShaderTransferCacheEntry"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.cc::ServiceShaderTransferCacheEntry", %"class.cc::ServiceShaderTransferCacheEntry"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN2cc31ServiceShaderTransferCacheEntryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.cc::ServiceShaderTransferCacheEntry", %"class.cc::ServiceShaderTransferCacheEntry"* %0, i64 0, i32 1, i32 0
  %4 = load %"class.cc::PaintShader"*, %"class.cc::PaintShader"** %3, align 8
  %5 = icmp eq %"class.cc::PaintShader"* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.cc::PaintShader", %"class.cc::PaintShader"* %4, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %16

10:                                               ; preds = %6
  %11 = bitcast %"class.cc::PaintShader"* %4 to %class.SkRefCntBase*
  %12 = bitcast %"class.cc::PaintShader"* %4 to void (%class.SkRefCntBase*)***
  %13 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, i64 2
  %15 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %14, align 8
  tail call void %15(%class.SkRefCntBase* nonnull %11) #5
  br label %16

16:                                               ; preds = %1, %6, %10
  %17 = bitcast %"class.cc::ServiceShaderTransferCacheEntry"* %0 to i8*
  tail call void @_ZdlPv(i8* %17) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2cc31ServiceShaderTransferCacheEntry10CachedSizeEv(%"class.cc::ServiceShaderTransferCacheEntry"* nocapture readonly) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.cc::ServiceShaderTransferCacheEntry", %"class.cc::ServiceShaderTransferCacheEntry"* %0, i64 0, i32 2
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN2cc31ServiceShaderTransferCacheEntry11DeserializeEP15GrDirectContextN4base4spanIKhLm18446744073709551615EEE(%"class.cc::ServiceShaderTransferCacheEntry"* nocapture readnone, %class.GrDirectContext* nocapture readnone, i64, i8* nocapture readnone) unnamed_addr #4 align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK2cc22TransferCacheEntryBaseINS_25ServiceTransferCacheEntryELNS_22TransferCacheEntryTypeE2EE4TypeEv(%"class.cc::TransferCacheEntryBase"*) unnamed_addr #1 comdat align 2 {
  ret i32 2
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
