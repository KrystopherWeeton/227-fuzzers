; ModuleID = 'gen/third_party/blink/renderer/bindings/core/v8/v8_shadow_root_init.cc'
source_filename = "gen/third_party/blink/renderer/bindings/core/v8/v8_shadow_root_init.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.77", i32, [4 x i8], %"class.std::__1::unique_ptr.213", %"class.std::__1::unique_ptr.213", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.223", %"class.std::__1::unique_ptr.229", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.241", %"class.std::__1::unique_ptr.247", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.254", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.80", %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.92", %"class.std::__1::unique_ptr.98", %"class.std::__1::unique_ptr.104", %"class.std::__1::unique_ptr.110", %"class.std::__1::unique_ptr.121", %"class.std::__1::unique_ptr.128", %"class.std::__1::unique_ptr.128", %"class.std::__1::unique_ptr.135", %"class.std::__1::unique_ptr.142", %"class.std::__1::unique_ptr.149", %"class.std::__1::unique_ptr.149", %"class.std::__1::unique_ptr.156", %"class.std::__1::unique_ptr.163", %"class.std::__1::unique_ptr.170", %"class.std::__1::unique_ptr.193", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.104" = type { %"class.std::__1::__compressed_pair.105" }
%"class.std::__1::__compressed_pair.105" = type { %"struct.std::__1::__compressed_pair_elem.106" }
%"struct.std::__1::__compressed_pair_elem.106" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.110" = type { %"class.std::__1::__compressed_pair.111" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, {}* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.113" = type { %"struct.std::__1::__atomic_base.114" }
%"struct.std::__1::__atomic_base.114" = type { %"struct.std::__1::__atomic_base.115" }
%"struct.std::__1::__atomic_base.115" = type { %"struct.std::__1::__cxx_atomic_impl.116" }
%"struct.std::__1::__cxx_atomic_impl.116" = type { %"struct.std::__1::__cxx_atomic_base_impl.117" }
%"struct.std::__1::__cxx_atomic_base_impl.117" = type { i64 }
%"class.std::__1::unique_ptr.121" = type { %"class.std::__1::__compressed_pair.122" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"struct.std::__1::__compressed_pair_elem.123" = type { %"class.blink::Worklist.124"* }
%"class.blink::Worklist.124" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.std::__1::unique_ptr.128" = type { %"class.std::__1::__compressed_pair.129" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.130" }
%"struct.std::__1::__compressed_pair_elem.130" = type { %"class.blink::Worklist.131"* }
%"class.blink::Worklist.131" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.std::__1::unique_ptr.135" = type { %"class.std::__1::__compressed_pair.136" }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.137" }
%"struct.std::__1::__compressed_pair_elem.137" = type { %"class.blink::Worklist.138"* }
%"class.blink::Worklist.138" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.std::__1::unique_ptr.142" = type { %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { %"class.blink::Worklist.145"* }
%"class.blink::Worklist.145" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.std::__1::unique_ptr.149" = type { %"class.std::__1::__compressed_pair.150" }
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::__compressed_pair_elem.151" = type { %"class.blink::Worklist.152"* }
%"class.blink::Worklist.152" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.std::__1::unique_ptr.156" = type { %"class.std::__1::__compressed_pair.157" }
%"class.std::__1::__compressed_pair.157" = type { %"struct.std::__1::__compressed_pair_elem.158" }
%"struct.std::__1::__compressed_pair_elem.158" = type { %"class.blink::Worklist.159"* }
%"class.blink::Worklist.159" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.std::__1::unique_ptr.163" = type { %"class.std::__1::__compressed_pair.164" }
%"class.std::__1::__compressed_pair.164" = type { %"struct.std::__1::__compressed_pair_elem.165" }
%"struct.std::__1::__compressed_pair_elem.165" = type { %"class.blink::Worklist.166"* }
%"class.blink::Worklist.166" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.113" }
%"class.std::__1::unique_ptr.170" = type { %"class.std::__1::__compressed_pair.171" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.173", %"class.std::__1::__compressed_pair.180", %"class.std::__1::__compressed_pair.185", %"class.std::__1::__compressed_pair.187", [4 x i8] }>
%"class.std::__1::unique_ptr.173" = type { %"class.std::__1::__compressed_pair.174" }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175", %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.177" }
%"class.std::__1::__compressed_pair.177" = type { %"struct.std::__1::__compressed_pair_elem.178" }
%"struct.std::__1::__compressed_pair_elem.178" = type { i64 }
%"class.std::__1::__compressed_pair.180" = type { %"struct.std::__1::__compressed_pair_elem.181" }
%"struct.std::__1::__compressed_pair_elem.181" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.185" = type { %"struct.std::__1::__compressed_pair_elem.178" }
%"class.std::__1::__compressed_pair.187" = type { %"struct.std::__1::__compressed_pair_elem.188" }
%"struct.std::__1::__compressed_pair_elem.188" = type { float }
%"class.std::__1::unique_ptr.193" = type { %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.196", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.196" = type { %"class.std::__1::__compressed_pair.197" }
%"class.std::__1::__compressed_pair.197" = type { %"struct.std::__1::__compressed_pair_elem.198" }
%"struct.std::__1::__compressed_pair_elem.198" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.205" }
%"class.WTF::Vector.205" = type { %"class.WTF::VectorBuffer.206" }
%"class.WTF::VectorBuffer.206" = type { %"class.WTF::VectorBufferBase.207" }
%"class.WTF::VectorBufferBase.207" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.213" = type { %"class.std::__1::__compressed_pair.214" }
%"class.std::__1::__compressed_pair.214" = type { %"struct.std::__1::__compressed_pair_elem.215" }
%"struct.std::__1::__compressed_pair_elem.215" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.221" }
%"class.WTF::VectorBuffer.221" = type { %"class.WTF::VectorBufferBase.222" }
%"class.WTF::VectorBufferBase.222" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.223" = type { %"class.std::__1::__compressed_pair.224" }
%"class.std::__1::__compressed_pair.224" = type { %"struct.std::__1::__compressed_pair_elem.225" }
%"struct.std::__1::__compressed_pair_elem.225" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.229" = type { %"class.std::__1::__compressed_pair.230" }
%"class.std::__1::__compressed_pair.230" = type { %"struct.std::__1::__compressed_pair_elem.231" }
%"struct.std::__1::__compressed_pair_elem.231" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.235" }
%"class.std::__1::unique_ptr.235" = type { %"class.std::__1::__compressed_pair.236" }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.124"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.131"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.138"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.145"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.152"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.285" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.285" = type { %"struct.std::__1::__compressed_pair_elem.286" }
%"struct.std::__1::__compressed_pair_elem.286" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.241" = type { %"class.std::__1::__compressed_pair.242" }
%"class.std::__1::__compressed_pair.242" = type { %"struct.std::__1::__compressed_pair_elem.243" }
%"struct.std::__1::__compressed_pair_elem.243" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.247" = type { %"class.std::__1::__compressed_pair.248" }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.249" }
%"struct.std::__1::__compressed_pair_elem.249" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.253 }
%class.scoped_refptr.253 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.254" = type { %"struct.std::__1::__atomic_base.255" }
%"struct.std::__1::__atomic_base.255" = type { %"struct.std::__1::__cxx_atomic_impl.256" }
%"struct.std::__1::__cxx_atomic_impl.256" = type { %"struct.std::__1::__cxx_atomic_base_impl.257" }
%"struct.std::__1::__cxx_atomic_base_impl.257" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.v8::Value" = type { i8 }
%"class.blink::ShadowRootInit" = type { %"class.blink::IDLDictionaryBase", i8, i8, %"class.WTF::String", %"class.WTF::String" }
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"class.v8::internal::Isolate" = type opaque
%"class.blink::V8StringResource" = type { %"class.v8::Local", i32, %"class.WTF::String", %"class.WTF::StringView::StackBackingStore" }
%"class.v8::Local" = type { %"class.v8::Value"* }
%"class.WTF::StringView::StackBackingStore" = type { [64 x i16], %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.v8::Object" = type { i8 }
%"class.blink::V8PerIsolateData" = type { i32, %"class.gin::IsolateHolder", %"class.WTF::HashMap", %"class.WTF::HashMap", %"class.WTF::HashMap.24", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.71", %"class.blink::Persistent", i8, i8, i8, %"class.WTF::Vector.258", %"class.std::__1::unique_ptr.263", %"class.blink::Persistent.269", %"class.blink::Persistent.273", %"class.blink::RuntimeCallStats", void (%"class.v8::Isolate"*, i32, i32)*, void (%"class.v8::Isolate"*, i32, i32)*, i64 }
%"class.gin::IsolateHolder" = type { %"class.std::__1::unique_ptr.8", %"class.v8::Isolate"*, %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.18", i32, i32 }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.v8::SnapshotCreator"* }
%"class.v8::SnapshotCreator" = type { i8* }
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.gin::PerIsolateData"* }
%"class.gin::PerIsolateData" = type opaque
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.gin::V8IsolateMemoryDumpProvider"* }
%"class.gin::V8IsolateMemoryDumpProvider" = type opaque
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.WTF::HashMap.24" = type { %"class.WTF::HashTable.25" }
%"class.WTF::HashTable.25" = type <{ %"struct.WTF::KeyValuePair.28"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.28" = type opaque
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.blink::StringCache"* }
%"class.blink::StringCache" = type { %"class.v8::GlobalValueMap", %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference", %"class.v8::GlobalValueMap.37", %class.scoped_refptr }
%"class.v8::GlobalValueMap" = type { %"class.v8::PersistentValueMapBase" }
%"class.v8::PersistentValueMapBase" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.32", i8* }
%"class.WTF::HashMap.32" = type { %"class.WTF::HashTable.33" }
%"class.WTF::HashTable.33" = type <{ %"struct.WTF::KeyValuePair.36"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.36" = type { %"class.WTF::StringImpl"*, i64 }
%"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference" = type { i64 }
%"class.v8::GlobalValueMap.37" = type { %"class.v8::PersistentValueMapBase.38" }
%"class.v8::PersistentValueMapBase.38" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.39", i8* }
%"class.WTF::HashMap.39" = type { %"class.WTF::HashTable.40" }
%"class.WTF::HashTable.40" = type <{ %"struct.WTF::KeyValuePair.43"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.43" = type { %"class.blink::ParkableStringImpl"*, i64 }
%"class.blink::ParkableStringImpl" = type { %"class.WTF::RefCounted", %"class.WTF::String", %"class.std::__1::unique_ptr.44" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"struct.blink::ParkableStringImpl::ParkableMetadata"* }
%"struct.blink::ParkableStringImpl::ParkableMetadata" = type { %"class.WTF::Mutex", i32, i8, i8, %"class.std::__1::unique_ptr.47", %"class.std::__1::unique_ptr.55", %"class.WTF::Vector.61", i8, i32 }
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.WTF::Vector"* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.blink::DiskDataMetadata"* }
%"class.blink::DiskDataMetadata" = type { i64, i64 }
%"class.WTF::Vector.61" = type { %"class.WTF::VectorBuffer.62" }
%"class.WTF::VectorBuffer.62" = type { %"class.WTF::VectorBufferBase", [32 x i8] }
%"class.std::__1::unique_ptr.71" = type { %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"class.blink::V8PrivateProperty"* }
%"class.blink::V8PrivateProperty" = type opaque
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.292, %"class.blink::Member.311", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%"class.v8::Context" = type { i8 }
%class.scoped_refptr.292 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.293", i32, i32, %"class.blink::Persistent.295" }
%"class.WTF::RefCounted.293" = type { %"class.base::RefCounted.294" }
%"class.base::RefCounted.294" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.295" = type { %"class.blink::PersistentBase.296" }
%"class.blink::PersistentBase.296" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.301" }
%"class.WTF::HashMap.301" = type { %"class.WTF::HashTable.302" }
%"class.WTF::HashTable.302" = type <{ %"struct.WTF::KeyValuePair.304"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.304" = type { %"class.blink::WeakMember", %"class.blink::TraceWrapperV8Reference.308" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.305" }
%"class.blink::MemberBase.305" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference.308" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference.308" = type { %"class.v8::TracedReference.309" }
%"class.v8::TracedReference.309" = type { %"class.v8::BasicTracedReference.310" }
%"class.v8::BasicTracedReference.310" = type { %"class.v8::TracedReferenceBase" }
%"class.blink::Member.311" = type { %"class.blink::MemberBase.312" }
%"class.blink::MemberBase.312" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.WTF::Vector.258" = type { %"class.WTF::VectorBuffer.259" }
%"class.WTF::VectorBuffer.259" = type { %"class.WTF::VectorBufferBase.260" }
%"class.WTF::VectorBufferBase.260" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type opaque
%"class.std::__1::unique_ptr.263" = type { %"class.std::__1::__compressed_pair.264" }
%"class.std::__1::__compressed_pair.264" = type { %"struct.std::__1::__compressed_pair_elem.265" }
%"struct.std::__1::__compressed_pair_elem.265" = type { %"class.blink::V8PerIsolateData::Data"* }
%"class.blink::V8PerIsolateData::Data" = type { i32 (...)** }
%"class.blink::Persistent.269" = type { %"class.blink::PersistentBase.270" }
%"class.blink::PersistentBase.270" = type { %"class.blink::V8PerIsolateData::GarbageCollectedData"*, %"class.blink::PersistentNodePtr" }
%"class.blink::V8PerIsolateData::GarbageCollectedData" = type { i32 (...)** }
%"class.blink::Persistent.273" = type { %"class.blink::PersistentBase.274" }
%"class.blink::PersistentBase.274" = type { %"class.blink::ActiveScriptWrappableManager"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ActiveScriptWrappableManager" = type { %"class.blink::HeapVector", i64 }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.279" }
%"class.WTF::Vector.279" = type { %"class.WTF::VectorBuffer.280" }
%"class.WTF::VectorBuffer.280" = type { %"class.WTF::VectorBufferBase.281" }
%"class.WTF::VectorBufferBase.281" = type { %"struct.std::__1::pair.282"*, i32, i32 }
%"struct.std::__1::pair.282" = type { %"class.blink::UntracedMember", %"class.blink::Member" }
%"class.blink::UntracedMember" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::ActiveScriptWrappableBase" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member" = type { %"class.blink::MemberBase.283" }
%"class.blink::MemberBase.283" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::RuntimeCallStats" = type { %"class.blink::RuntimeCallTimer"*, i8, [40 x %"class.blink::RuntimeCallCounter"], %"class.base::TickClock"* }
%"class.blink::RuntimeCallTimer" = type { %"class.blink::RuntimeCallCounter"*, %"class.blink::RuntimeCallTimer"*, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::TickClock"* }
%"class.blink::RuntimeCallCounter" = type { i64, %"class.base::TimeDelta", i8* }
%"class.base::TimeDelta" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.v8::Eternal" = type { %"class.v8::Name"* }
%"class.v8::Name" = type { i8 }
%"class.base::span.313" = type { %"struct.base::internal::ExtentStorage", i8** }
%"struct.base::internal::ExtentStorage" = type { i64 }
%"class.v8::Boolean" = type { i8 }
%"class.v8::String" = type { i8 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.335" }
%"class.std::__1::__compressed_pair.335" = type { %"struct.std::__1::__compressed_pair_elem.336" }
%"struct.std::__1::__compressed_pair_elem.336" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.v8::Int32" = type { i8 }

$_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv = comdat any

$_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = comdat any

@.str = private unnamed_addr constant [34 x i8] c"Missing required member(s): mode.\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"cannot convert to dictionary.\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"required member mode is undefined.\00", align 1
@_ZZN5blink16V8ShadowRootInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_14ShadowRootInitERNS_14ExceptionStateEE12kValidValues = internal constant [2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i32 0, i32 0)], align 16
@.str.3 = private unnamed_addr constant [5 x i8] c"open\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"closed\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"ShadowRootMode\00", align 1
@_ZZN5blink16V8ShadowRootInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_14ShadowRootInitERNS_14ExceptionStateEE12kValidValues_0 = internal constant [2 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0)], align 16
@.str.6 = private unnamed_addr constant [7 x i8] c"manual\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"named\00", align 1
@.str.8 = private unnamed_addr constant [19 x i8] c"SlotAssignmentMode\00", align 1
@_ZZN5blinkL27eternalV8ShadowRootInitKeysEPN2v87IsolateEE5kKeys = internal constant [3 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0)], align 16
@.str.9 = private unnamed_addr constant [15 x i8] c"delegatesFocus\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"mode\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"slotAssignment\00", align 1
@.ref.tmp = private constant { i64, i8** } { i64 3, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @_ZZN5blinkL27eternalV8ShadowRootInitKeysEPN2v87IsolateEE5kKeys, i32 0, i32 0) }, align 8
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.12 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.13 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.14 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16V8ShadowRootInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_14ShadowRootInitERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ShadowRootInit"* nocapture, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::TryCatch", align 8
  %6 = alloca %"class.v8::TryCatch", align 8
  %7 = alloca %"class.v8::TryCatch", align 8
  %8 = alloca %"class.blink::V8StringResource", align 8
  %9 = alloca %"class.WTF::String", align 8
  %10 = alloca %"class.WTF::String", align 8
  %11 = alloca %"class.blink::V8StringResource", align 8
  %12 = alloca %"class.WTF::String", align 8
  %13 = alloca %"class.WTF::String", align 8
  %14 = icmp eq %"class.v8::Value"* %1, null
  br i1 %14, label %36, label %15

15:                                               ; preds = %4
  %16 = bitcast %"class.v8::Value"* %1 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = and i64 %17, 3
  %19 = icmp eq i64 %18, 1
  br i1 %19, label %20, label %37

20:                                               ; preds = %15
  %21 = add i64 %17, -1
  %22 = inttoptr i64 %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = and i64 %17, -4294967296
  %25 = zext i32 %23 to i64
  %26 = or i64 %24, %25
  %27 = add i64 %26, 7
  %28 = inttoptr i64 %27 to i16*
  %29 = load i16, i16* %28, align 2
  %30 = icmp eq i16 %29, 67
  br i1 %30, label %31, label %37

31:                                               ; preds = %20
  %32 = add i64 %17, 23
  %33 = inttoptr i64 %32 to i32*
  %34 = load i32, i32* %33, align 4
  %35 = ashr i32 %34, 1
  switch i32 %35, label %37 [
    i32 5, label %36
    i32 3, label %36
  ]

36:                                               ; preds = %31, %31, %4
  tail call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0)) #7
  br label %611

37:                                               ; preds = %31, %20, %15
  %38 = tail call zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"* nonnull %1) #7
  br i1 %38, label %40, label %39

39:                                               ; preds = %37
  tail call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0)) #7
  br label %611

40:                                               ; preds = %37
  %41 = bitcast %"class.v8::Value"* %1 to %"class.v8::Object"*
  %42 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %43 = add i64 %42, 8
  %44 = inttoptr i64 %43 to %"class.blink::V8PerIsolateData"**
  %45 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %44, align 8
  %46 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %45, i8* bitcast ([3 x i8*]* @_ZZN5blinkL27eternalV8ShadowRootInitKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.313"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.313"*)) #7
  %47 = extractvalue { i64, %"class.v8::Eternal"* } %46, 1
  %48 = bitcast %"class.v8::TryCatch"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %48) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %48, i8 -86, i64 48, i1 false)
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %7, %"class.v8::Isolate"* %0) #7
  %49 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %0) #7
  %50 = bitcast %"class.v8::Eternal"* %47 to %"class.v8::Value"**
  %51 = load %"class.v8::Value"*, %"class.v8::Value"** %50, align 8
  %52 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %41, %"class.v8::Context"* %49, %"class.v8::Value"* %51) #7
  %53 = icmp eq %"class.v8::Value"* %52, null
  br i1 %53, label %54, label %60

54:                                               ; preds = %40
  %55 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %7) #7
  %56 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %57 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %56, align 8
  %58 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %57, i64 5
  %59 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %58, align 8
  call void %59(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %55) #7
  br label %610

60:                                               ; preds = %40
  %61 = bitcast %"class.v8::Value"* %52 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = and i64 %62, 3
  %64 = icmp eq i64 %63, 1
  br i1 %64, label %65, label %82

65:                                               ; preds = %60
  %66 = add i64 %62, -1
  %67 = inttoptr i64 %66 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = and i64 %62, -4294967296
  %70 = zext i32 %68 to i64
  %71 = or i64 %69, %70
  %72 = add i64 %71, 7
  %73 = inttoptr i64 %72 to i16*
  %74 = load i16, i16* %73, align 2
  %75 = icmp eq i16 %74, 67
  br i1 %75, label %76, label %82

76:                                               ; preds = %65
  %77 = add i64 %62, 23
  %78 = inttoptr i64 %77 to i32*
  %79 = load i32, i32* %78, align 4
  %80 = and i32 %79, -2
  %81 = icmp eq i32 %80, 10
  br i1 %81, label %98, label %82

82:                                               ; preds = %65, %60, %76
  %83 = call zeroext i1 @_ZNK2v85Value9IsBooleanEv(%"class.v8::Value"* nonnull %52) #7
  br i1 %83, label %84, label %87, !prof !2

84:                                               ; preds = %82
  %85 = bitcast %"class.v8::Value"* %52 to %"class.v8::Boolean"*
  %86 = call zeroext i1 @_ZNK2v87Boolean5ValueEv(%"class.v8::Boolean"* nonnull %85) #7
  br label %89

87:                                               ; preds = %82
  %88 = call zeroext i1 @_ZNK2v85Value12BooleanValueEPNS_7IsolateE(%"class.v8::Value"* nonnull %52, %"class.v8::Isolate"* %0) #7
  br label %89

89:                                               ; preds = %84, %87
  %90 = phi i1 [ %86, %84 ], [ %88, %87 ]
  %91 = getelementptr inbounds %"class.blink::ExceptionState", %"class.blink::ExceptionState"* %3, i64 0, i32 4
  %92 = load i32, i32* %91, align 8
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %610

94:                                               ; preds = %89
  %95 = zext i1 %90 to i8
  %96 = getelementptr inbounds %"class.blink::ShadowRootInit", %"class.blink::ShadowRootInit"* %2, i64 0, i32 2
  store i8 %95, i8* %96, align 1
  %97 = getelementptr inbounds %"class.blink::ShadowRootInit", %"class.blink::ShadowRootInit"* %2, i64 0, i32 1
  store i8 1, i8* %97, align 8
  br label %98

98:                                               ; preds = %94, %76
  %99 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %47, i64 1, i32 0
  %100 = bitcast %"class.v8::Name"** %99 to %"class.v8::Value"**
  %101 = load %"class.v8::Value"*, %"class.v8::Value"** %100, align 8
  %102 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %41, %"class.v8::Context"* %49, %"class.v8::Value"* %101) #7
  %103 = icmp eq %"class.v8::Value"* %102, null
  br i1 %103, label %104, label %110

104:                                              ; preds = %98
  %105 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %7) #7
  %106 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %107 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %106, align 8
  %108 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %107, i64 5
  %109 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %108, align 8
  call void %109(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %105) #7
  br label %610

110:                                              ; preds = %98
  %111 = bitcast %"class.v8::Value"* %102 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = and i64 %112, 3
  %114 = icmp eq i64 %113, 1
  br i1 %114, label %115, label %133

115:                                              ; preds = %110
  %116 = add i64 %112, -1
  %117 = inttoptr i64 %116 to i32*
  %118 = load i32, i32* %117, align 4
  %119 = and i64 %112, -4294967296
  %120 = zext i32 %118 to i64
  %121 = or i64 %119, %120
  %122 = add i64 %121, 7
  %123 = inttoptr i64 %122 to i16*
  %124 = load i16, i16* %123, align 2
  %125 = icmp eq i16 %124, 67
  br i1 %125, label %126, label %133

126:                                              ; preds = %115
  %127 = add i64 %112, 23
  %128 = inttoptr i64 %127 to i32*
  %129 = load i32, i32* %128, align 4
  %130 = and i32 %129, -2
  %131 = icmp eq i32 %130, 10
  br i1 %131, label %132, label %133

132:                                              ; preds = %126
  call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0)) #7
  br label %610

133:                                              ; preds = %115, %110, %126
  %134 = bitcast %"class.blink::V8StringResource"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %134) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %134, i8 -86, i64 152, i1 false)
  %135 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %102, %"class.v8::Value"** %135, align 8
  %136 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 1
  store i32 0, i32* %136, align 8
  %137 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %137, align 8
  %138 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 3, i32 1
  %139 = bitcast %"class.std::__1::unique_ptr"* %138 to i64*
  store i64 0, i64* %139, align 8
  %140 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"* nonnull %8) #7
  br i1 %140, label %157, label %141

141:                                              ; preds = %133
  %142 = call %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() #7
  %143 = bitcast %"class.v8::TryCatch"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %143) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %143, i8 -86, i64 48, i1 false) #7
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %5, %"class.v8::Isolate"* %142) #7
  %144 = load %"class.v8::Value"*, %"class.v8::Value"** %135, align 8
  %145 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %142) #7
  %146 = call %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"* %144, %"class.v8::Context"* %145) #7
  %147 = ptrtoint %"class.v8::String"* %146 to i64
  %148 = bitcast %"class.blink::V8StringResource"* %8 to i64*
  store i64 %147, i64* %148, align 8
  %149 = icmp eq %"class.v8::String"* %146, null
  br i1 %149, label %151, label %150

150:                                              ; preds = %141
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %143) #7
  br label %157

151:                                              ; preds = %141
  %152 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %153 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %154 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %153, align 8
  %155 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %154, i64 5
  %156 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %155, align 8
  call void %156(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %152) #7
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %143) #7
  br label %338

157:                                              ; preds = %133, %150
  %158 = bitcast %"class.WTF::String"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %158) #7
  %159 = load %"class.v8::Value"*, %"class.v8::Value"** %135, align 8
  %160 = icmp eq %"class.v8::Value"* %159, null
  br i1 %160, label %165, label %161, !prof !3

161:                                              ; preds = %157
  %162 = bitcast %"class.v8::Value"* %159 to %"class.v8::String"*
  %163 = load i32, i32* %136, align 8
  %164 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %162, i32 %163) #7
  br label %185

165:                                              ; preds = %157
  %166 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %137, align 8
  %167 = icmp eq %"class.WTF::StringImpl"* %166, null
  br i1 %167, label %185, label %168

168:                                              ; preds = %165
  %169 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %166, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %170 = load atomic i32, i32* %169 monotonic, align 4
  %171 = and i32 %170, 2
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %185

173:                                              ; preds = %168
  %174 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %166, i64 0, i32 0
  %175 = load i32, i32* %174, align 4
  %176 = zext i32 %175 to i33
  %177 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %176, i33 1) #7
  %178 = extractvalue { i33, i1 } %177, 1
  %179 = extractvalue { i33, i1 } %177, 0
  %180 = icmp slt i33 %179, 0
  %181 = or i1 %178, %180
  br i1 %181, label %182, label %183, !prof !3

182:                                              ; preds = %173
  call void @llvm.trap() #7
  unreachable

183:                                              ; preds = %173
  %184 = trunc i33 %179 to i32
  store i32 %184, i32* %174, align 4
  br label %185

185:                                              ; preds = %161, %165, %168, %183
  %186 = phi %"class.WTF::StringImpl"* [ %164, %161 ], [ null, %165 ], [ %166, %168 ], [ %166, %183 ]
  %187 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %9, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %186, %"class.WTF::StringImpl"** %187, align 8
  %188 = bitcast %"class.WTF::String"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %188) #7
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %10, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0), i64 14) #7
  %189 = call zeroext i1 @_ZN5blink11IsValidEnumERKN3WTF6StringEPKPKcmS3_RNS_14ExceptionStateE(%"class.WTF::String"* nonnull dereferenceable(8) %9, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @_ZZN5blink16V8ShadowRootInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_14ShadowRootInitERNS_14ExceptionStateEE12kValidValues, i64 0, i64 0), i64 2, %"class.WTF::String"* nonnull dereferenceable(8) %10, %"class.blink::ExceptionState"* dereferenceable(72) %3) #7
  %190 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %10, i64 0, i32 0, i32 0
  %191 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %190, align 8
  %192 = icmp eq %"class.WTF::StringImpl"* %191, null
  br i1 %192, label %206, label %193

193:                                              ; preds = %185
  %194 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %195 = load atomic i32, i32* %194 monotonic, align 4
  %196 = and i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 0
  %199 = load i32, i32* %198, align 4
  br i1 %197, label %200, label %202

200:                                              ; preds = %193
  %201 = add i32 %199, -1
  store i32 %201, i32* %198, align 4
  br label %202

202:                                              ; preds = %200, %193
  %203 = phi i32 [ %201, %200 ], [ %199, %193 ]
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %205, label %206

205:                                              ; preds = %202
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %191) #7
  br label %206

206:                                              ; preds = %185, %202, %205
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %188) #7
  %207 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %187, align 8
  %208 = icmp eq %"class.WTF::StringImpl"* %207, null
  br i1 %208, label %222, label %209

209:                                              ; preds = %206
  %210 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %207, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %211 = load atomic i32, i32* %210 monotonic, align 4
  %212 = and i32 %211, 2
  %213 = icmp eq i32 %212, 0
  %214 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %207, i64 0, i32 0
  %215 = load i32, i32* %214, align 4
  br i1 %213, label %216, label %218

216:                                              ; preds = %209
  %217 = add i32 %215, -1
  store i32 %217, i32* %214, align 4
  br label %218

218:                                              ; preds = %216, %209
  %219 = phi i32 [ %217, %216 ], [ %215, %209 ]
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %221, label %222

221:                                              ; preds = %218
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %207) #7
  br label %222

222:                                              ; preds = %206, %218, %221
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %158) #7
  br i1 %189, label %223, label %338

223:                                              ; preds = %222
  %224 = load %"class.v8::Value"*, %"class.v8::Value"** %135, align 8
  %225 = icmp eq %"class.v8::Value"* %224, null
  br i1 %225, label %226, label %250, !prof !3

226:                                              ; preds = %223
  %227 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %137, align 8
  %228 = icmp eq %"class.WTF::StringImpl"* %227, null
  br i1 %228, label %229, label %231

229:                                              ; preds = %226
  %230 = getelementptr inbounds %"class.blink::ShadowRootInit", %"class.blink::ShadowRootInit"* %2, i64 0, i32 3
  br label %275

231:                                              ; preds = %226
  %232 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %227, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %233 = load atomic i32, i32* %232 monotonic, align 4
  %234 = and i32 %233, 2
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %236, label %248

236:                                              ; preds = %231
  %237 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %227, i64 0, i32 0
  %238 = load i32, i32* %237, align 4
  %239 = zext i32 %238 to i33
  %240 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %239, i33 1) #7
  %241 = extractvalue { i33, i1 } %240, 1
  %242 = extractvalue { i33, i1 } %240, 0
  %243 = icmp slt i33 %242, 0
  %244 = or i1 %241, %243
  br i1 %244, label %245, label %246, !prof !3

245:                                              ; preds = %236
  call void @llvm.trap() #7
  unreachable

246:                                              ; preds = %236
  %247 = trunc i33 %242 to i32
  store i32 %247, i32* %237, align 4
  br label %248

248:                                              ; preds = %231, %246
  %249 = getelementptr inbounds %"class.blink::ShadowRootInit", %"class.blink::ShadowRootInit"* %2, i64 0, i32 3
  br label %256

250:                                              ; preds = %223
  %251 = bitcast %"class.v8::Value"* %224 to %"class.v8::String"*
  %252 = load i32, i32* %136, align 8
  %253 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %251, i32 %252) #7
  %254 = getelementptr inbounds %"class.blink::ShadowRootInit", %"class.blink::ShadowRootInit"* %2, i64 0, i32 3
  %255 = icmp eq %"class.WTF::StringImpl"* %253, null
  br i1 %255, label %275, label %256

256:                                              ; preds = %248, %250
  %257 = phi %"class.WTF::String"* [ %249, %248 ], [ %254, %250 ]
  %258 = phi %"class.WTF::StringImpl"* [ %227, %248 ], [ %253, %250 ]
  %259 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %258, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %260 = load atomic i32, i32* %259 monotonic, align 4
  %261 = and i32 %260, 2
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %263, label %275

263:                                              ; preds = %256
  %264 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %258, i64 0, i32 0
  %265 = load i32, i32* %264, align 4
  %266 = zext i32 %265 to i33
  %267 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %266, i33 1) #7
  %268 = extractvalue { i33, i1 } %267, 1
  %269 = extractvalue { i33, i1 } %267, 0
  %270 = icmp slt i33 %269, 0
  %271 = or i1 %268, %270
  br i1 %271, label %272, label %273, !prof !3

272:                                              ; preds = %263
  call void @llvm.trap() #7
  unreachable

273:                                              ; preds = %263
  %274 = trunc i33 %269 to i32
  store i32 %274, i32* %264, align 4
  br label %275

275:                                              ; preds = %229, %273, %256, %250
  %276 = phi i1 [ false, %273 ], [ false, %256 ], [ true, %250 ], [ true, %229 ]
  %277 = phi %"class.WTF::String"* [ %257, %273 ], [ %257, %256 ], [ %254, %250 ], [ %230, %229 ]
  %278 = phi %"class.WTF::StringImpl"* [ %258, %273 ], [ %258, %256 ], [ null, %250 ], [ null, %229 ]
  %279 = ptrtoint %"class.WTF::StringImpl"* %278 to i64
  %280 = bitcast %"class.WTF::String"* %277 to i64*
  %281 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %277, i64 0, i32 0, i32 0
  %282 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %281, align 8
  store i64 %279, i64* %280, align 8
  %283 = icmp eq %"class.WTF::StringImpl"* %282, null
  br i1 %283, label %297, label %284

284:                                              ; preds = %275
  %285 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %282, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %286 = load atomic i32, i32* %285 monotonic, align 4
  %287 = and i32 %286, 2
  %288 = icmp eq i32 %287, 0
  %289 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %282, i64 0, i32 0
  %290 = load i32, i32* %289, align 4
  br i1 %288, label %291, label %293

291:                                              ; preds = %284
  %292 = add i32 %290, -1
  store i32 %292, i32* %289, align 4
  br label %293

293:                                              ; preds = %291, %284
  %294 = phi i32 [ %292, %291 ], [ %290, %284 ]
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %296, label %297

296:                                              ; preds = %293
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %282) #7
  br label %297

297:                                              ; preds = %275, %293, %296
  br i1 %276, label %311, label %298

298:                                              ; preds = %297
  %299 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %278, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %300 = load atomic i32, i32* %299 monotonic, align 4
  %301 = and i32 %300, 2
  %302 = icmp eq i32 %301, 0
  %303 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %278, i64 0, i32 0
  %304 = load i32, i32* %303, align 4
  br i1 %302, label %305, label %307

305:                                              ; preds = %298
  %306 = add i32 %304, -1
  store i32 %306, i32* %303, align 4
  br label %307

307:                                              ; preds = %305, %298
  %308 = phi i32 [ %306, %305 ], [ %304, %298 ]
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %310, label %311

310:                                              ; preds = %307
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %278) #7
  br label %311

311:                                              ; preds = %297, %307, %310
  %312 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %313 = load i8*, i8** %312, align 8
  store i8* null, i8** %312, align 8
  %314 = icmp eq i8* %313, null
  br i1 %314, label %316, label %315

315:                                              ; preds = %311
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %313) #7
  br label %316

316:                                              ; preds = %315, %311
  %317 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %137, align 8
  %318 = icmp eq %"class.WTF::StringImpl"* %317, null
  br i1 %318, label %332, label %319

319:                                              ; preds = %316
  %320 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %317, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %321 = load atomic i32, i32* %320 monotonic, align 4
  %322 = and i32 %321, 2
  %323 = icmp eq i32 %322, 0
  %324 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %317, i64 0, i32 0
  %325 = load i32, i32* %324, align 4
  br i1 %323, label %326, label %328

326:                                              ; preds = %319
  %327 = add i32 %325, -1
  store i32 %327, i32* %324, align 4
  br label %328

328:                                              ; preds = %326, %319
  %329 = phi i32 [ %327, %326 ], [ %325, %319 ]
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %331, label %332

331:                                              ; preds = %328
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %317) #7
  br label %332

332:                                              ; preds = %316, %328, %331
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %134) #7
  %333 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %47, i64 2, i32 0
  %334 = bitcast %"class.v8::Name"** %333 to %"class.v8::Value"**
  %335 = load %"class.v8::Value"*, %"class.v8::Value"** %334, align 8
  %336 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %41, %"class.v8::Context"* %49, %"class.v8::Value"* %335) #7
  %337 = icmp eq %"class.v8::Value"* %336, null
  br i1 %337, label %360, label %366

338:                                              ; preds = %151, %222
  %339 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %340 = load i8*, i8** %339, align 8
  store i8* null, i8** %339, align 8
  %341 = icmp eq i8* %340, null
  br i1 %341, label %343, label %342

342:                                              ; preds = %338
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %340) #7
  br label %343

343:                                              ; preds = %342, %338
  %344 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %137, align 8
  %345 = icmp eq %"class.WTF::StringImpl"* %344, null
  br i1 %345, label %359, label %346

346:                                              ; preds = %343
  %347 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %344, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %348 = load atomic i32, i32* %347 monotonic, align 4
  %349 = and i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %344, i64 0, i32 0
  %352 = load i32, i32* %351, align 4
  br i1 %350, label %353, label %355

353:                                              ; preds = %346
  %354 = add i32 %352, -1
  store i32 %354, i32* %351, align 4
  br label %355

355:                                              ; preds = %353, %346
  %356 = phi i32 [ %354, %353 ], [ %352, %346 ]
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %358, label %359

358:                                              ; preds = %355
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %344) #7
  br label %359

359:                                              ; preds = %343, %355, %358
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %134) #7
  br label %610

360:                                              ; preds = %332
  %361 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %7) #7
  %362 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %363 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %362, align 8
  %364 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %363, i64 5
  %365 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %364, align 8
  call void %365(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %361) #7
  br label %610

366:                                              ; preds = %332
  %367 = bitcast %"class.v8::Value"* %336 to i64*
  %368 = load i64, i64* %367, align 8
  %369 = and i64 %368, 3
  %370 = icmp eq i64 %369, 1
  br i1 %370, label %371, label %388

371:                                              ; preds = %366
  %372 = add i64 %368, -1
  %373 = inttoptr i64 %372 to i32*
  %374 = load i32, i32* %373, align 4
  %375 = and i64 %368, -4294967296
  %376 = zext i32 %374 to i64
  %377 = or i64 %375, %376
  %378 = add i64 %377, 7
  %379 = inttoptr i64 %378 to i16*
  %380 = load i16, i16* %379, align 2
  %381 = icmp eq i16 %380, 67
  br i1 %381, label %382, label %388

382:                                              ; preds = %371
  %383 = add i64 %368, 23
  %384 = inttoptr i64 %383 to i32*
  %385 = load i32, i32* %384, align 4
  %386 = and i32 %385, -2
  %387 = icmp eq i32 %386, 10
  br i1 %387, label %610, label %388

388:                                              ; preds = %371, %366, %382
  %389 = bitcast %"class.blink::V8StringResource"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %389) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %389, i8 -86, i64 152, i1 false)
  %390 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %336, %"class.v8::Value"** %390, align 8
  %391 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 1
  store i32 0, i32* %391, align 8
  %392 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %392, align 8
  %393 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 3, i32 1
  %394 = bitcast %"class.std::__1::unique_ptr"* %393 to i64*
  store i64 0, i64* %394, align 8
  %395 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"* nonnull %11) #7
  br i1 %395, label %412, label %396

396:                                              ; preds = %388
  %397 = call %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() #7
  %398 = bitcast %"class.v8::TryCatch"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %398) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %398, i8 -86, i64 48, i1 false) #7
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %6, %"class.v8::Isolate"* %397) #7
  %399 = load %"class.v8::Value"*, %"class.v8::Value"** %390, align 8
  %400 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %397) #7
  %401 = call %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"* %399, %"class.v8::Context"* %400) #7
  %402 = ptrtoint %"class.v8::String"* %401 to i64
  %403 = bitcast %"class.blink::V8StringResource"* %11 to i64*
  store i64 %402, i64* %403, align 8
  %404 = icmp eq %"class.v8::String"* %401, null
  br i1 %404, label %406, label %405

405:                                              ; preds = %396
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %398) #7
  br label %412

406:                                              ; preds = %396
  %407 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %6) #7
  %408 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %409 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %408, align 8
  %410 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %409, i64 5
  %411 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %410, align 8
  call void %411(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %407) #7
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %6) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %398) #7
  br label %588

412:                                              ; preds = %388, %405
  %413 = bitcast %"class.WTF::String"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %413) #7
  %414 = load %"class.v8::Value"*, %"class.v8::Value"** %390, align 8
  %415 = icmp eq %"class.v8::Value"* %414, null
  br i1 %415, label %420, label %416, !prof !3

416:                                              ; preds = %412
  %417 = bitcast %"class.v8::Value"* %414 to %"class.v8::String"*
  %418 = load i32, i32* %391, align 8
  %419 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %417, i32 %418) #7
  br label %440

420:                                              ; preds = %412
  %421 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %392, align 8
  %422 = icmp eq %"class.WTF::StringImpl"* %421, null
  br i1 %422, label %440, label %423

423:                                              ; preds = %420
  %424 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %421, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %425 = load atomic i32, i32* %424 monotonic, align 4
  %426 = and i32 %425, 2
  %427 = icmp eq i32 %426, 0
  br i1 %427, label %428, label %440

428:                                              ; preds = %423
  %429 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %421, i64 0, i32 0
  %430 = load i32, i32* %429, align 4
  %431 = zext i32 %430 to i33
  %432 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %431, i33 1) #7
  %433 = extractvalue { i33, i1 } %432, 1
  %434 = extractvalue { i33, i1 } %432, 0
  %435 = icmp slt i33 %434, 0
  %436 = or i1 %433, %435
  br i1 %436, label %437, label %438, !prof !3

437:                                              ; preds = %428
  call void @llvm.trap() #7
  unreachable

438:                                              ; preds = %428
  %439 = trunc i33 %434 to i32
  store i32 %439, i32* %429, align 4
  br label %440

440:                                              ; preds = %416, %420, %423, %438
  %441 = phi %"class.WTF::StringImpl"* [ %419, %416 ], [ null, %420 ], [ %421, %423 ], [ %421, %438 ]
  %442 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %441, %"class.WTF::StringImpl"** %442, align 8
  %443 = bitcast %"class.WTF::String"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %443) #7
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %13, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8, i64 0, i64 0), i64 18) #7
  %444 = call zeroext i1 @_ZN5blink11IsValidEnumERKN3WTF6StringEPKPKcmS3_RNS_14ExceptionStateE(%"class.WTF::String"* nonnull dereferenceable(8) %12, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @_ZZN5blink16V8ShadowRootInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_14ShadowRootInitERNS_14ExceptionStateEE12kValidValues_0, i64 0, i64 0), i64 2, %"class.WTF::String"* nonnull dereferenceable(8) %13, %"class.blink::ExceptionState"* dereferenceable(72) %3) #7
  %445 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %13, i64 0, i32 0, i32 0
  %446 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %445, align 8
  %447 = icmp eq %"class.WTF::StringImpl"* %446, null
  br i1 %447, label %461, label %448

448:                                              ; preds = %440
  %449 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %446, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %450 = load atomic i32, i32* %449 monotonic, align 4
  %451 = and i32 %450, 2
  %452 = icmp eq i32 %451, 0
  %453 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %446, i64 0, i32 0
  %454 = load i32, i32* %453, align 4
  br i1 %452, label %455, label %457

455:                                              ; preds = %448
  %456 = add i32 %454, -1
  store i32 %456, i32* %453, align 4
  br label %457

457:                                              ; preds = %455, %448
  %458 = phi i32 [ %456, %455 ], [ %454, %448 ]
  %459 = icmp eq i32 %458, 0
  br i1 %459, label %460, label %461

460:                                              ; preds = %457
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %446) #7
  br label %461

461:                                              ; preds = %440, %457, %460
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %443) #7
  %462 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %442, align 8
  %463 = icmp eq %"class.WTF::StringImpl"* %462, null
  br i1 %463, label %477, label %464

464:                                              ; preds = %461
  %465 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %462, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %466 = load atomic i32, i32* %465 monotonic, align 4
  %467 = and i32 %466, 2
  %468 = icmp eq i32 %467, 0
  %469 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %462, i64 0, i32 0
  %470 = load i32, i32* %469, align 4
  br i1 %468, label %471, label %473

471:                                              ; preds = %464
  %472 = add i32 %470, -1
  store i32 %472, i32* %469, align 4
  br label %473

473:                                              ; preds = %471, %464
  %474 = phi i32 [ %472, %471 ], [ %470, %464 ]
  %475 = icmp eq i32 %474, 0
  br i1 %475, label %476, label %477

476:                                              ; preds = %473
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %462) #7
  br label %477

477:                                              ; preds = %461, %473, %476
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %413) #7
  br i1 %444, label %478, label %588

478:                                              ; preds = %477
  %479 = load %"class.v8::Value"*, %"class.v8::Value"** %390, align 8
  %480 = icmp eq %"class.v8::Value"* %479, null
  br i1 %480, label %481, label %505, !prof !3

481:                                              ; preds = %478
  %482 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %392, align 8
  %483 = icmp eq %"class.WTF::StringImpl"* %482, null
  br i1 %483, label %484, label %486

484:                                              ; preds = %481
  %485 = getelementptr inbounds %"class.blink::ShadowRootInit", %"class.blink::ShadowRootInit"* %2, i64 0, i32 4
  br label %530

486:                                              ; preds = %481
  %487 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %482, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %488 = load atomic i32, i32* %487 monotonic, align 4
  %489 = and i32 %488, 2
  %490 = icmp eq i32 %489, 0
  br i1 %490, label %491, label %503

491:                                              ; preds = %486
  %492 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %482, i64 0, i32 0
  %493 = load i32, i32* %492, align 4
  %494 = zext i32 %493 to i33
  %495 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %494, i33 1) #7
  %496 = extractvalue { i33, i1 } %495, 1
  %497 = extractvalue { i33, i1 } %495, 0
  %498 = icmp slt i33 %497, 0
  %499 = or i1 %496, %498
  br i1 %499, label %500, label %501, !prof !3

500:                                              ; preds = %491
  call void @llvm.trap() #7
  unreachable

501:                                              ; preds = %491
  %502 = trunc i33 %497 to i32
  store i32 %502, i32* %492, align 4
  br label %503

503:                                              ; preds = %486, %501
  %504 = getelementptr inbounds %"class.blink::ShadowRootInit", %"class.blink::ShadowRootInit"* %2, i64 0, i32 4
  br label %511

505:                                              ; preds = %478
  %506 = bitcast %"class.v8::Value"* %479 to %"class.v8::String"*
  %507 = load i32, i32* %391, align 8
  %508 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %506, i32 %507) #7
  %509 = getelementptr inbounds %"class.blink::ShadowRootInit", %"class.blink::ShadowRootInit"* %2, i64 0, i32 4
  %510 = icmp eq %"class.WTF::StringImpl"* %508, null
  br i1 %510, label %530, label %511

511:                                              ; preds = %503, %505
  %512 = phi %"class.WTF::String"* [ %504, %503 ], [ %509, %505 ]
  %513 = phi %"class.WTF::StringImpl"* [ %482, %503 ], [ %508, %505 ]
  %514 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %513, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %515 = load atomic i32, i32* %514 monotonic, align 4
  %516 = and i32 %515, 2
  %517 = icmp eq i32 %516, 0
  br i1 %517, label %518, label %530

518:                                              ; preds = %511
  %519 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %513, i64 0, i32 0
  %520 = load i32, i32* %519, align 4
  %521 = zext i32 %520 to i33
  %522 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %521, i33 1) #7
  %523 = extractvalue { i33, i1 } %522, 1
  %524 = extractvalue { i33, i1 } %522, 0
  %525 = icmp slt i33 %524, 0
  %526 = or i1 %523, %525
  br i1 %526, label %527, label %528, !prof !3

527:                                              ; preds = %518
  call void @llvm.trap() #7
  unreachable

528:                                              ; preds = %518
  %529 = trunc i33 %524 to i32
  store i32 %529, i32* %519, align 4
  br label %530

530:                                              ; preds = %484, %528, %511, %505
  %531 = phi i1 [ false, %528 ], [ false, %511 ], [ true, %505 ], [ true, %484 ]
  %532 = phi %"class.WTF::String"* [ %512, %528 ], [ %512, %511 ], [ %509, %505 ], [ %485, %484 ]
  %533 = phi %"class.WTF::StringImpl"* [ %513, %528 ], [ %513, %511 ], [ null, %505 ], [ null, %484 ]
  %534 = ptrtoint %"class.WTF::StringImpl"* %533 to i64
  %535 = bitcast %"class.WTF::String"* %532 to i64*
  %536 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %532, i64 0, i32 0, i32 0
  %537 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %536, align 8
  store i64 %534, i64* %535, align 8
  %538 = icmp eq %"class.WTF::StringImpl"* %537, null
  br i1 %538, label %552, label %539

539:                                              ; preds = %530
  %540 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %537, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %541 = load atomic i32, i32* %540 monotonic, align 4
  %542 = and i32 %541, 2
  %543 = icmp eq i32 %542, 0
  %544 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %537, i64 0, i32 0
  %545 = load i32, i32* %544, align 4
  br i1 %543, label %546, label %548

546:                                              ; preds = %539
  %547 = add i32 %545, -1
  store i32 %547, i32* %544, align 4
  br label %548

548:                                              ; preds = %546, %539
  %549 = phi i32 [ %547, %546 ], [ %545, %539 ]
  %550 = icmp eq i32 %549, 0
  br i1 %550, label %551, label %552

551:                                              ; preds = %548
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %537) #7
  br label %552

552:                                              ; preds = %530, %548, %551
  br i1 %531, label %566, label %553

553:                                              ; preds = %552
  %554 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %533, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %555 = load atomic i32, i32* %554 monotonic, align 4
  %556 = and i32 %555, 2
  %557 = icmp eq i32 %556, 0
  %558 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %533, i64 0, i32 0
  %559 = load i32, i32* %558, align 4
  br i1 %557, label %560, label %562

560:                                              ; preds = %553
  %561 = add i32 %559, -1
  store i32 %561, i32* %558, align 4
  br label %562

562:                                              ; preds = %560, %553
  %563 = phi i32 [ %561, %560 ], [ %559, %553 ]
  %564 = icmp eq i32 %563, 0
  br i1 %564, label %565, label %566

565:                                              ; preds = %562
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %533) #7
  br label %566

566:                                              ; preds = %552, %562, %565
  %567 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %568 = load i8*, i8** %567, align 8
  store i8* null, i8** %567, align 8
  %569 = icmp eq i8* %568, null
  br i1 %569, label %571, label %570

570:                                              ; preds = %566
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %568) #7
  br label %571

571:                                              ; preds = %570, %566
  %572 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %392, align 8
  %573 = icmp eq %"class.WTF::StringImpl"* %572, null
  br i1 %573, label %587, label %574

574:                                              ; preds = %571
  %575 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %572, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %576 = load atomic i32, i32* %575 monotonic, align 4
  %577 = and i32 %576, 2
  %578 = icmp eq i32 %577, 0
  %579 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %572, i64 0, i32 0
  %580 = load i32, i32* %579, align 4
  br i1 %578, label %581, label %583

581:                                              ; preds = %574
  %582 = add i32 %580, -1
  store i32 %582, i32* %579, align 4
  br label %583

583:                                              ; preds = %581, %574
  %584 = phi i32 [ %582, %581 ], [ %580, %574 ]
  %585 = icmp eq i32 %584, 0
  br i1 %585, label %586, label %587

586:                                              ; preds = %583
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %572) #7
  br label %587

587:                                              ; preds = %571, %583, %586
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %389) #7
  br label %610

588:                                              ; preds = %406, %477
  %589 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %590 = load i8*, i8** %589, align 8
  store i8* null, i8** %589, align 8
  %591 = icmp eq i8* %590, null
  br i1 %591, label %593, label %592

592:                                              ; preds = %588
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %590) #7
  br label %593

593:                                              ; preds = %592, %588
  %594 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %392, align 8
  %595 = icmp eq %"class.WTF::StringImpl"* %594, null
  br i1 %595, label %609, label %596

596:                                              ; preds = %593
  %597 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %594, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %598 = load atomic i32, i32* %597 monotonic, align 4
  %599 = and i32 %598, 2
  %600 = icmp eq i32 %599, 0
  %601 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %594, i64 0, i32 0
  %602 = load i32, i32* %601, align 4
  br i1 %600, label %603, label %605

603:                                              ; preds = %596
  %604 = add i32 %602, -1
  store i32 %604, i32* %601, align 4
  br label %605

605:                                              ; preds = %603, %596
  %606 = phi i32 [ %604, %603 ], [ %602, %596 ]
  %607 = icmp eq i32 %606, 0
  br i1 %607, label %608, label %609

608:                                              ; preds = %605
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %594) #7
  br label %609

609:                                              ; preds = %593, %605, %608
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %389) #7
  br label %610

610:                                              ; preds = %89, %104, %132, %359, %382, %587, %609, %360, %54
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %7) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %48) #7
  br label %611

611:                                              ; preds = %610, %36, %39
  ret void
}

declare void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"*, i8*) local_unnamed_addr #1

declare zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"*, %"class.v8::Isolate"*) unnamed_addr #1

declare %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"*) local_unnamed_addr #1

declare %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Value"*) local_unnamed_addr #1

declare %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"*) local_unnamed_addr #1

declare zeroext i1 @_ZN5blink11IsValidEnumERKN3WTF6StringEPKPKcmS3_RNS_14ExceptionStateE(%"class.WTF::String"* dereferenceable(8), i8**, i64, %"class.WTF::String"* dereferenceable(8), %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::Value"* @_ZNK5blink14ShadowRootInit8ToV8ImplEN2v85LocalINS1_6ObjectEEEPNS1_7IsolateE(%"class.blink::ShadowRootInit"* nocapture readonly, %"class.v8::Object"* nocapture readnone, %"class.v8::Isolate"*) unnamed_addr #0 align 2 {
  %4 = tail call %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"* %2) #7
  %5 = tail call zeroext i1 @_ZN5blink18toV8ShadowRootInitEPKNS_14ShadowRootInitEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::ShadowRootInit"* %0, %"class.v8::Object"* %4, %"class.v8::Object"* undef, %"class.v8::Isolate"* %2)
  %6 = bitcast %"class.v8::Object"* %4 to %"class.v8::Value"*
  %7 = ptrtoint %"class.v8::Isolate"* %2 to i64
  %8 = add i64 %7, 160
  %9 = inttoptr i64 %8 to %"class.v8::Value"*
  %10 = select i1 %5, %"class.v8::Value"* %6, %"class.v8::Value"* %9
  ret %"class.v8::Value"* %10
}

declare %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink18toV8ShadowRootInitEPKNS_14ShadowRootInitEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::ShadowRootInit"* nocapture readonly, %"class.v8::Object"*, %"class.v8::Object"* nocapture readnone, %"class.v8::Isolate"*) local_unnamed_addr #0 {
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = ptrtoint %"class.v8::Isolate"* %3 to i64
  %8 = add i64 %7, 8
  %9 = inttoptr i64 %8 to %"class.blink::V8PerIsolateData"**
  %10 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %9, align 8
  %11 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %10, i8* bitcast ([3 x i8*]* @_ZZN5blinkL27eternalV8ShadowRootInitKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.313"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.313"*)) #7
  %12 = extractvalue { i64, %"class.v8::Eternal"* } %11, 1
  %13 = tail call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %3) #7
  %14 = getelementptr inbounds %"class.blink::ShadowRootInit", %"class.blink::ShadowRootInit"* %0, i64 0, i32 1
  %15 = load i8, i8* %14, align 8, !range !4
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %31, label %17

17:                                               ; preds = %4
  %18 = getelementptr inbounds %"class.blink::ShadowRootInit", %"class.blink::ShadowRootInit"* %0, i64 0, i32 2
  %19 = load i8, i8* %18, align 1, !range !4
  %20 = icmp eq i8 %19, 0
  %21 = select i1 %20, i64 192, i64 184
  %22 = add i64 %21, %7
  %23 = inttoptr i64 %22 to %"class.v8::Value"*
  %24 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %12, i64 0, i32 0
  %25 = load %"class.v8::Name"*, %"class.v8::Name"** %24, align 8
  %26 = tail call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %13, %"class.v8::Name"* %25, %"class.v8::Value"* %23) #7
  %27 = trunc i16 %26 to i8
  %28 = icmp ne i8 %27, 0
  %29 = icmp ugt i16 %26, 255
  %30 = and i1 %29, %28
  br i1 %30, label %31, label %76

31:                                               ; preds = %4, %17
  %32 = getelementptr inbounds %"class.blink::ShadowRootInit", %"class.blink::ShadowRootInit"* %0, i64 0, i32 3, i32 0, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, null
  br i1 %34, label %53, label %35

35:                                               ; preds = %31
  %36 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %36) #7
  %37 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 0
  store %"class.WTF::StringImpl"* %33, %"class.WTF::StringImpl"** %37, align 8
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 1
  %41 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  %42 = bitcast i8** %41 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %40, %"class.WTF::StringImpl"** %42, align 8
  %43 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 %39, i32* %43, align 8
  %44 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %5)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %36) #7
  %45 = bitcast %"class.v8::String"* %44 to %"class.v8::Value"*
  %46 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %12, i64 1, i32 0
  %47 = load %"class.v8::Name"*, %"class.v8::Name"** %46, align 8
  %48 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %13, %"class.v8::Name"* %47, %"class.v8::Value"* %45) #7
  %49 = trunc i16 %48 to i8
  %50 = icmp ne i8 %49, 0
  %51 = icmp ugt i16 %48, 255
  %52 = and i1 %51, %50
  br i1 %52, label %53, label %76

53:                                               ; preds = %31, %35
  %54 = getelementptr inbounds %"class.blink::ShadowRootInit", %"class.blink::ShadowRootInit"* %0, i64 0, i32 4, i32 0, i32 0
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %54, align 8
  %56 = icmp eq %"class.WTF::StringImpl"* %55, null
  br i1 %56, label %75, label %57

57:                                               ; preds = %53
  %58 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %58) #7
  %59 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 0
  store %"class.WTF::StringImpl"* %55, %"class.WTF::StringImpl"** %59, align 8
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 1
  %63 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  %64 = bitcast i8** %63 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %62, %"class.WTF::StringImpl"** %64, align 8
  %65 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 %61, i32* %65, align 8
  %66 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %6)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %58) #7
  %67 = bitcast %"class.v8::String"* %66 to %"class.v8::Value"*
  %68 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %12, i64 2, i32 0
  %69 = load %"class.v8::Name"*, %"class.v8::Name"** %68, align 8
  %70 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %13, %"class.v8::Name"* %69, %"class.v8::Value"* %67) #7
  %71 = trunc i16 %70 to i8
  %72 = icmp ne i8 %71, 0
  %73 = icmp ugt i16 %70, 255
  %74 = and i1 %73, %72
  br i1 %74, label %75, label %76

75:                                               ; preds = %53, %57
  br label %76

76:                                               ; preds = %35, %57, %75, %17
  %77 = phi i1 [ false, %17 ], [ false, %35 ], [ true, %75 ], [ false, %57 ]
  ret i1 %77
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #4 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  %6 = bitcast i8* %4 to i16*
  br i1 %5, label %7, label %11

7:                                                ; preds = %2
  %8 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %9 = add i64 %8, 200
  %10 = inttoptr i64 %9 to %"class.v8::String"*
  br label %63

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 1
  %15 = bitcast %"class.WTF::StringImpl"* %14 to i8*
  %16 = icmp eq i8* %4, %15
  br i1 %16, label %17, label %48

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp ne i32 %19, %21
  %23 = icmp eq %"class.WTF::StringImpl"* %13, null
  %24 = or i1 %23, %22
  br i1 %24, label %48, label %25

25:                                               ; preds = %17
  %26 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %27 = add i64 %26, 8
  %28 = inttoptr i64 %27 to %"class.blink::V8PerIsolateData"**
  %29 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %28, align 8
  %30 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %29, i64 0, i32 5, i32 0, i32 0, i32 0
  %31 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 3, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, %13
  br i1 %34, label %35, label %46

35:                                               ; preds = %25
  %36 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 1
  %37 = bitcast %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference"* %36 to %"class.v8::String"**
  %38 = load %"class.v8::String"*, %"class.v8::String"** %37, align 8
  %39 = icmp eq %"class.v8::String"* %38, null
  br i1 %39, label %63, label %40

40:                                               ; preds = %35
  %41 = bitcast %"class.v8::String"* %38 to i64*
  %42 = bitcast %"class.v8::Isolate"* %0 to %"class.v8::internal::Isolate"*
  %43 = load i64, i64* %41, align 8
  %44 = tail call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %42, i64 %43) #7
  %45 = bitcast i64* %44 to %"class.v8::String"*
  br label %63

46:                                               ; preds = %25
  %47 = tail call %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"* %31, %"class.v8::Isolate"* %0, %"class.WTF::StringImpl"* nonnull %13) #7
  br label %63

48:                                               ; preds = %17, %11
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load atomic i32, i32* %49 monotonic, align 4
  %51 = and i32 %50, 1
  %52 = icmp eq i32 %51, 0
  %53 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %54 = load i32, i32* %53, align 8
  br i1 %52, label %59, label %55

55:                                               ; preds = %48
  %56 = tail call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i8* nonnull %4, i32 0, i32 %54) #7
  %57 = icmp eq %"class.v8::String"* %56, null
  br i1 %57, label %58, label %63, !prof !3

58:                                               ; preds = %55
  tail call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %63

59:                                               ; preds = %48
  %60 = tail call %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i16* nonnull %6, i32 0, i32 %54) #7
  %61 = icmp eq %"class.v8::String"* %60, null
  br i1 %61, label %62, label %63, !prof !3

62:                                               ; preds = %59
  tail call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %63

63:                                               ; preds = %46, %40, %35, %62, %59, %58, %55, %7
  %64 = phi %"class.v8::String"* [ %10, %7 ], [ %56, %55 ], [ null, %58 ], [ %60, %59 ], [ null, %62 ], [ null, %35 ], [ %45, %40 ], [ %47, %46 ]
  ret %"class.v8::String"* %64
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::ShadowRootInit"* @_ZN5blink17NativeValueTraitsINS_14ShadowRootInitEvE11NativeValueEPN2v87IsolateENS3_5LocalINS3_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64 32) #7
  %5 = bitcast i8* %4 to %"class.blink::ShadowRootInit"*
  tail call void @_ZN5blink14ShadowRootInitC1Ev(%"class.blink::ShadowRootInit"* %5) #7
  %6 = getelementptr inbounds i8, i8* %4, i64 -4
  %7 = bitcast i8* %6 to i16*
  %8 = load atomic i16, i16* %7 monotonic, align 2
  %9 = or i16 %8, 1
  store atomic i16 %9, i16* %7 release, align 2
  tail call void @_ZN5blink16V8ShadowRootInit6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_14ShadowRootInitERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* %1, %"class.blink::ShadowRootInit"* %5, %"class.blink::ExceptionState"* dereferenceable(72) %2)
  ret %"class.blink::ShadowRootInit"* %5
}

declare { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"*, i8*, %"class.base::span.313"* dereferenceable(16)) local_unnamed_addr #1

declare zeroext i1 @_ZNK2v85Value9IsBooleanEv(%"class.v8::Value"*) local_unnamed_addr #1

declare zeroext i1 @_ZNK2v87Boolean5ValueEv(%"class.v8::Boolean"*) local_unnamed_addr #1

declare zeroext i1 @_ZNK2v85Value12BooleanValueEPNS_7IsolateE(%"class.v8::Value"*, %"class.v8::Isolate"*) local_unnamed_addr #1

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @_ZN3WTF10Partitions10BufferFreeEPv(i8*) local_unnamed_addr #1

declare i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Name"*, %"class.v8::Value"*) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"*, i8*, i32, i32) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"*, i16*, i32, i32) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"*, %"class.v8::Isolate"*, %"class.WTF::StringImpl"*) local_unnamed_addr #1

declare i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #1

declare void @_ZN2v82V812ToLocalEmptyEv() local_unnamed_addr #1

declare void @_ZN5blink14ShadowRootInitC1Ev(%"class.blink::ShadowRootInit"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #7
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !3

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #7
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #7
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #7
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #7
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #7
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #7
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0), i8* %40, i8* %41) #7
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.13, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #7
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #7
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #7
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !3

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #7
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #1

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #1

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #1

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #1

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::IDLDictionaryBase"*
  %4 = bitcast i8* %1 to void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)**, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::IDLDictionaryBase"* %3, %"class.blink::Visitor"* %0) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::IDLDictionaryBase"*
  %3 = bitcast i8* %0 to void (%"class.blink::IDLDictionaryBase"*)***
  %4 = load void (%"class.blink::IDLDictionaryBase"*)**, void (%"class.blink::IDLDictionaryBase"*)*** %3, align 8
  %5 = load void (%"class.blink::IDLDictionaryBase"*)*, void (%"class.blink::IDLDictionaryBase"*)** %4, align 8
  tail call void %5(%"class.blink::IDLDictionaryBase"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.14, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.v8::Value"*, %"class.v8::Value"** %2, align 8
  %4 = icmp eq %"class.v8::Value"* %3, null
  br i1 %4, label %82, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.v8::Value"* %3 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 3
  %9 = icmp eq i64 %8, 1
  br i1 %9, label %10, label %21, !prof !5

10:                                               ; preds = %5
  %11 = add i64 %7, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = and i64 %7, -4294967296
  %15 = zext i32 %13 to i64
  %16 = or i64 %14, %15
  %17 = add i64 %16, 7
  %18 = inttoptr i64 %17 to i16*
  %19 = load i16, i16* %18, align 2
  %20 = icmp ult i16 %19, 64
  br i1 %20, label %82, label %21, !prof !2

21:                                               ; preds = %5, %10
  %22 = tail call zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"* nonnull %3) #7
  br i1 %22, label %23, label %80, !prof !2

23:                                               ; preds = %21
  %24 = bitcast %"class.blink::V8StringResource"* %0 to %"class.v8::Int32"**
  %25 = load %"class.v8::Int32"*, %"class.v8::Int32"** %24, align 8
  %26 = tail call i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"* %25) #7
  %27 = tail call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32 %26) #7
  %28 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 2
  %29 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %29, label %47, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %47

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i33
  %39 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 1) #7
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %45, !prof !3

44:                                               ; preds = %35
  tail call void @llvm.trap() #7
  unreachable

45:                                               ; preds = %35
  %46 = trunc i33 %41 to i32
  store i32 %46, i32* %36, align 4
  br label %47

47:                                               ; preds = %45, %30, %23
  %48 = ptrtoint %"class.WTF::StringImpl"* %27 to i64
  %49 = bitcast %"class.WTF::String"* %28 to i64*
  %50 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %28, i64 0, i32 0, i32 0
  %51 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  store i64 %48, i64* %49, align 8
  %52 = icmp eq %"class.WTF::StringImpl"* %51, null
  br i1 %52, label %66, label %53

53:                                               ; preds = %47
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  br i1 %57, label %60, label %62

60:                                               ; preds = %53
  %61 = add i32 %59, -1
  store i32 %61, i32* %58, align 4
  br label %62

62:                                               ; preds = %60, %53
  %63 = phi i32 [ %61, %60 ], [ %59, %53 ]
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %51) #7
  br label %66

66:                                               ; preds = %47, %62, %65
  store %"class.v8::Value"* null, %"class.v8::Value"** %2, align 8
  br i1 %29, label %82, label %67

67:                                               ; preds = %66
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %67
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %67
  %77 = phi i32 [ %75, %74 ], [ %73, %67 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %82

79:                                               ; preds = %76
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #7
  br label %82

80:                                               ; preds = %21
  %81 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 1
  store i32 1, i32* %81, align 8
  br label %82

82:                                               ; preds = %79, %76, %66, %10, %1, %80
  %83 = phi i1 [ false, %80 ], [ true, %1 ], [ true, %10 ], [ true, %66 ], [ true, %76 ], [ true, %79 ]
  ret i1 %83
}

declare %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() local_unnamed_addr #1

declare zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32) local_unnamed_addr #1

declare i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"*) local_unnamed_addr #1

declare %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"*, %"class.v8::Context"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"*, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{i8 0, i8 2}
!5 = !{!"branch_weights", i32 2146410443, i32 1073205}
