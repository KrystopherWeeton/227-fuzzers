; ModuleID = '../../components/webcrypto/algorithms/ecdh.cc'
source_filename = "../../components/webcrypto/algorithms/ecdh.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webcrypto::AlgorithmImplementation" = type { i32 (...)** }
%"class.webcrypto::(anonymous namespace)::EcdhImplementation" = type { %"class.webcrypto::EcAlgorithm" }
%"class.webcrypto::EcAlgorithm" = type { %"class.webcrypto::AlgorithmImplementation", i32, i32 }
%"class.webcrypto::Status" = type { i32, i32, %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.blink::WebCryptoAlgorithm" = type { %"class.blink::WebPrivatePtr" }
%"class.blink::WebPrivatePtr" = type { i8* }
%"class.blink::WebCryptoKey" = type { %"class.blink::WebPrivatePtr.7" }
%"class.blink::WebPrivatePtr.7" = type { i8* }
%"class.webcrypto::CryptoData" = type <{ i8*, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i8* }
%"class.webcrypto::GenerateKeyResult" = type { i32, %"class.blink::WebCryptoKey", %"class.blink::WebCryptoKey", %"class.blink::WebCryptoKey" }
%"class.blink::WebCryptoEcdhKeyDeriveParams" = type { %"class.blink::WebCryptoAlgorithmParams", %"class.blink::WebCryptoKey" }
%"class.blink::WebCryptoAlgorithmParams" = type { i32 (...)** }
%"class.blink::WebCryptoKeyAlgorithm" = type { %"class.blink::WebPrivatePtr.16" }
%"class.blink::WebPrivatePtr.16" = type { i8* }
%"class.blink::WebCryptoEcKeyAlgorithmParams" = type <{ %"class.blink::WebCryptoKeyAlgorithmParams", i32, [4 x i8] }>
%"class.blink::WebCryptoKeyAlgorithmParams" = type { i32 (...)** }
%struct.evp_pkey_st = type { i32, i32, %union.anon.17, %struct.evp_pkey_asn1_method_st* }
%union.anon.17 = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.ec_key_st = type opaque
%struct.ec_point_st = type opaque
%struct.ec_group_st = type opaque
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

@_ZTVN9webcrypto12_GLOBAL__N_118EcdhImplementationE = internal unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webcrypto::AlgorithmImplementation"*)* @_ZN9webcrypto23AlgorithmImplementationD2Ev to i8*), i8* bitcast (void (%"class.webcrypto::(anonymous namespace)::EcdhImplementation"*)* @_ZN9webcrypto12_GLOBAL__N_118EcdhImplementationD0Ev to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::AlgorithmImplementation"*, %"class.blink::WebCryptoAlgorithm"*, %"class.blink::WebCryptoKey"*, %"class.webcrypto::CryptoData"*, %"class.std::__1::vector"*)* @_ZNK9webcrypto23AlgorithmImplementation7EncryptERKN5blink18WebCryptoAlgorithmERKNS1_12WebCryptoKeyERKNS_10CryptoDataEPNSt3__16vectorIhNSB_9allocatorIhEEEE to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::AlgorithmImplementation"*, %"class.blink::WebCryptoAlgorithm"*, %"class.blink::WebCryptoKey"*, %"class.webcrypto::CryptoData"*, %"class.std::__1::vector"*)* @_ZNK9webcrypto23AlgorithmImplementation7DecryptERKN5blink18WebCryptoAlgorithmERKNS1_12WebCryptoKeyERKNS_10CryptoDataEPNSt3__16vectorIhNSB_9allocatorIhEEEE to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::AlgorithmImplementation"*, %"class.blink::WebCryptoAlgorithm"*, %"class.blink::WebCryptoKey"*, %"class.webcrypto::CryptoData"*, %"class.std::__1::vector"*)* @_ZNK9webcrypto23AlgorithmImplementation4SignERKN5blink18WebCryptoAlgorithmERKNS1_12WebCryptoKeyERKNS_10CryptoDataEPNSt3__16vectorIhNSB_9allocatorIhEEEE to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::AlgorithmImplementation"*, %"class.blink::WebCryptoAlgorithm"*, %"class.blink::WebCryptoKey"*, %"class.webcrypto::CryptoData"*, %"class.webcrypto::CryptoData"*, i8*)* @_ZNK9webcrypto23AlgorithmImplementation6VerifyERKN5blink18WebCryptoAlgorithmERKNS1_12WebCryptoKeyERKNS_10CryptoDataESA_Pb to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::AlgorithmImplementation"*, %"class.blink::WebCryptoAlgorithm"*, %"class.webcrypto::CryptoData"*, %"class.std::__1::vector"*)* @_ZNK9webcrypto23AlgorithmImplementation6DigestERKN5blink18WebCryptoAlgorithmERKNS_10CryptoDataEPNSt3__16vectorIhNS8_9allocatorIhEEEE to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::EcAlgorithm"*, %"class.blink::WebCryptoAlgorithm"*, i1, i32, %"class.webcrypto::GenerateKeyResult"*)* @_ZNK9webcrypto11EcAlgorithm11GenerateKeyERKN5blink18WebCryptoAlgorithmEbiPNS_17GenerateKeyResultE to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::(anonymous namespace)::EcdhImplementation"*, %"class.blink::WebCryptoAlgorithm"*, %"class.blink::WebCryptoKey"*, i1, i32, %"class.std::__1::vector"*)* @_ZNK9webcrypto12_GLOBAL__N_118EcdhImplementation10DeriveBitsERKN5blink18WebCryptoAlgorithmERKNS2_12WebCryptoKeyEbjPNSt3__16vectorIhNS9_9allocatorIhEEEE to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::AlgorithmImplementation"*, %"class.blink::WebCryptoAlgorithm"*, i8*, i32*)* @_ZNK9webcrypto23AlgorithmImplementation12GetKeyLengthERKN5blink18WebCryptoAlgorithmEPbPj to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::EcAlgorithm"*, i32, %"class.webcrypto::CryptoData"*, %"class.blink::WebCryptoAlgorithm"*, i1, i32, %"class.blink::WebCryptoKey"*)* @_ZNK9webcrypto11EcAlgorithm9ImportKeyEN5blink18WebCryptoKeyFormatERKNS_10CryptoDataERKNS1_18WebCryptoAlgorithmEbiPNS1_12WebCryptoKeyE to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::EcAlgorithm"*, i32, %"class.blink::WebCryptoKey"*, %"class.std::__1::vector"*)* @_ZNK9webcrypto11EcAlgorithm9ExportKeyEN5blink18WebCryptoKeyFormatERKNS1_12WebCryptoKeyEPNSt3__16vectorIhNS6_9allocatorIhEEEE to i8*), i8* bitcast (void (%"class.webcrypto::Status"*, %"class.webcrypto::EcAlgorithm"*, %"class.blink::WebCryptoKeyAlgorithm"*, i32, i1, i32, %"class.webcrypto::CryptoData"*, %"class.blink::WebCryptoKey"*)* @_ZNK9webcrypto11EcAlgorithm22DeserializeKeyForCloneERKN5blink21WebCryptoKeyAlgorithmENS1_16WebCryptoKeyTypeEbiRKNS_10CryptoDataEPNS1_12WebCryptoKeyE to i8*), i8* bitcast (i8* (%"class.webcrypto::(anonymous namespace)::EcdhImplementation"*, i32)* @_ZNK9webcrypto12_GLOBAL__N_118EcdhImplementation15GetJwkAlgorithmEN5blink19WebCryptoNamedCurveE to i8*)] }, align 8
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.webcrypto::AlgorithmImplementation"* @_ZN9webcrypto24CreateEcdhImplementationEv() local_unnamed_addr #0 {
  %1 = tail call i8* @_Znwm(i64 16) #9
  %2 = bitcast i8* %1 to i32 (...)***
  %3 = getelementptr inbounds i8, i8* %1, i64 8
  %4 = bitcast i8* %3 to i32*
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds i8, i8* %1, i64 12
  %6 = bitcast i8* %5 to i32*
  store i32 144, i32* %6, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN9webcrypto12_GLOBAL__N_118EcdhImplementationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %7 = bitcast i8* %1 to %"class.webcrypto::AlgorithmImplementation"*
  ret %"class.webcrypto::AlgorithmImplementation"* %7
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN9webcrypto23AlgorithmImplementationD2Ev(%"class.webcrypto::AlgorithmImplementation"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN9webcrypto12_GLOBAL__N_118EcdhImplementationD0Ev(%"class.webcrypto::(anonymous namespace)::EcdhImplementation"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.webcrypto::(anonymous namespace)::EcdhImplementation", %"class.webcrypto::(anonymous namespace)::EcdhImplementation"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN9webcrypto23AlgorithmImplementationD2Ev(%"class.webcrypto::AlgorithmImplementation"* %2) #10
  %3 = bitcast %"class.webcrypto::(anonymous namespace)::EcdhImplementation"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #9
  ret void
}

declare void @_ZNK9webcrypto23AlgorithmImplementation7EncryptERKN5blink18WebCryptoAlgorithmERKNS1_12WebCryptoKeyERKNS_10CryptoDataEPNSt3__16vectorIhNSB_9allocatorIhEEEE(%"class.webcrypto::Status"* sret, %"class.webcrypto::AlgorithmImplementation"*, %"class.blink::WebCryptoAlgorithm"* dereferenceable(8), %"class.blink::WebCryptoKey"* dereferenceable(8), %"class.webcrypto::CryptoData"* dereferenceable(16), %"class.std::__1::vector"*) unnamed_addr #4

declare void @_ZNK9webcrypto23AlgorithmImplementation7DecryptERKN5blink18WebCryptoAlgorithmERKNS1_12WebCryptoKeyERKNS_10CryptoDataEPNSt3__16vectorIhNSB_9allocatorIhEEEE(%"class.webcrypto::Status"* sret, %"class.webcrypto::AlgorithmImplementation"*, %"class.blink::WebCryptoAlgorithm"* dereferenceable(8), %"class.blink::WebCryptoKey"* dereferenceable(8), %"class.webcrypto::CryptoData"* dereferenceable(16), %"class.std::__1::vector"*) unnamed_addr #4

declare void @_ZNK9webcrypto23AlgorithmImplementation4SignERKN5blink18WebCryptoAlgorithmERKNS1_12WebCryptoKeyERKNS_10CryptoDataEPNSt3__16vectorIhNSB_9allocatorIhEEEE(%"class.webcrypto::Status"* sret, %"class.webcrypto::AlgorithmImplementation"*, %"class.blink::WebCryptoAlgorithm"* dereferenceable(8), %"class.blink::WebCryptoKey"* dereferenceable(8), %"class.webcrypto::CryptoData"* dereferenceable(16), %"class.std::__1::vector"*) unnamed_addr #4

declare void @_ZNK9webcrypto23AlgorithmImplementation6VerifyERKN5blink18WebCryptoAlgorithmERKNS1_12WebCryptoKeyERKNS_10CryptoDataESA_Pb(%"class.webcrypto::Status"* sret, %"class.webcrypto::AlgorithmImplementation"*, %"class.blink::WebCryptoAlgorithm"* dereferenceable(8), %"class.blink::WebCryptoKey"* dereferenceable(8), %"class.webcrypto::CryptoData"* dereferenceable(16), %"class.webcrypto::CryptoData"* dereferenceable(16), i8*) unnamed_addr #4

declare void @_ZNK9webcrypto23AlgorithmImplementation6DigestERKN5blink18WebCryptoAlgorithmERKNS_10CryptoDataEPNSt3__16vectorIhNS8_9allocatorIhEEEE(%"class.webcrypto::Status"* sret, %"class.webcrypto::AlgorithmImplementation"*, %"class.blink::WebCryptoAlgorithm"* dereferenceable(8), %"class.webcrypto::CryptoData"* dereferenceable(16), %"class.std::__1::vector"*) unnamed_addr #4

declare void @_ZNK9webcrypto11EcAlgorithm11GenerateKeyERKN5blink18WebCryptoAlgorithmEbiPNS_17GenerateKeyResultE(%"class.webcrypto::Status"* sret, %"class.webcrypto::EcAlgorithm"*, %"class.blink::WebCryptoAlgorithm"* dereferenceable(8), i1 zeroext, i32, %"class.webcrypto::GenerateKeyResult"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK9webcrypto12_GLOBAL__N_118EcdhImplementation10DeriveBitsERKN5blink18WebCryptoAlgorithmERKNS2_12WebCryptoKeyEbjPNSt3__16vectorIhNS9_9allocatorIhEEEE(%"class.webcrypto::Status"* noalias sret, %"class.webcrypto::(anonymous namespace)::EcdhImplementation"* nocapture readnone, %"class.blink::WebCryptoAlgorithm"* dereferenceable(8), %"class.blink::WebCryptoKey"* dereferenceable(8), i1 zeroext, i32, %"class.std::__1::vector"*) unnamed_addr #0 align 2 {
  %8 = tail call i32 @_ZNK5blink12WebCryptoKey7GetTypeEv(%"class.blink::WebCryptoKey"* %3) #10
  %9 = icmp eq i32 %8, 2
  br i1 %9, label %11, label %10

10:                                               ; preds = %7
  tail call void @_ZN9webcrypto6Status22ErrorUnexpectedKeyTypeEv(%"class.webcrypto::Status"* sret %0) #10
  br label %102

11:                                               ; preds = %7
  %12 = tail call %"class.blink::WebCryptoEcdhKeyDeriveParams"* @_ZNK5blink18WebCryptoAlgorithm19EcdhKeyDeriveParamsEv(%"class.blink::WebCryptoAlgorithm"* %2) #10
  %13 = getelementptr inbounds %"class.blink::WebCryptoEcdhKeyDeriveParams", %"class.blink::WebCryptoEcdhKeyDeriveParams"* %12, i64 0, i32 1
  %14 = tail call i32 @_ZNK5blink12WebCryptoKey7GetTypeEv(%"class.blink::WebCryptoKey"* %13) #10
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %17, label %16

16:                                               ; preds = %11
  tail call void @_ZN9webcrypto6Status27ErrorEcdhPublicKeyWrongTypeEv(%"class.webcrypto::Status"* sret %0) #10
  br label %102

17:                                               ; preds = %11
  %18 = tail call dereferenceable(8) %"class.blink::WebCryptoKeyAlgorithm"* @_ZNK5blink12WebCryptoKey9AlgorithmEv(%"class.blink::WebCryptoKey"* %13) #10
  %19 = tail call %"class.blink::WebCryptoEcKeyAlgorithmParams"* @_ZNK5blink21WebCryptoKeyAlgorithm8EcParamsEv(%"class.blink::WebCryptoKeyAlgorithm"* %18) #10
  %20 = icmp eq %"class.blink::WebCryptoEcKeyAlgorithmParams"* %19, null
  br i1 %20, label %21, label %22

21:                                               ; preds = %17
  tail call void @_ZN9webcrypto6Status27ErrorEcdhPublicKeyWrongTypeEv(%"class.webcrypto::Status"* sret %0) #10
  br label %102

22:                                               ; preds = %17
  %23 = tail call dereferenceable(8) %"class.blink::WebCryptoKeyAlgorithm"* @_ZNK5blink12WebCryptoKey9AlgorithmEv(%"class.blink::WebCryptoKey"* %13) #10
  %24 = tail call i32 @_ZNK5blink21WebCryptoKeyAlgorithm2IdEv(%"class.blink::WebCryptoKeyAlgorithm"* %23) #10
  %25 = icmp eq i32 %24, 13
  br i1 %25, label %27, label %26

26:                                               ; preds = %22
  tail call void @_ZN9webcrypto6Status32ErrorEcdhPublicKeyWrongAlgorithmEv(%"class.webcrypto::Status"* sret %0) #10
  br label %102

27:                                               ; preds = %22
  %28 = tail call dereferenceable(8) %"class.blink::WebCryptoKeyAlgorithm"* @_ZNK5blink12WebCryptoKey9AlgorithmEv(%"class.blink::WebCryptoKey"* %13) #10
  %29 = tail call %"class.blink::WebCryptoEcKeyAlgorithmParams"* @_ZNK5blink21WebCryptoKeyAlgorithm8EcParamsEv(%"class.blink::WebCryptoKeyAlgorithm"* %28) #10
  %30 = getelementptr inbounds %"class.blink::WebCryptoEcKeyAlgorithmParams", %"class.blink::WebCryptoEcKeyAlgorithmParams"* %29, i64 0, i32 1
  %31 = load i32, i32* %30, align 8
  %32 = tail call dereferenceable(8) %"class.blink::WebCryptoKeyAlgorithm"* @_ZNK5blink12WebCryptoKey9AlgorithmEv(%"class.blink::WebCryptoKey"* %3) #10
  %33 = tail call %"class.blink::WebCryptoEcKeyAlgorithmParams"* @_ZNK5blink21WebCryptoKeyAlgorithm8EcParamsEv(%"class.blink::WebCryptoKeyAlgorithm"* %32) #10
  %34 = getelementptr inbounds %"class.blink::WebCryptoEcKeyAlgorithmParams", %"class.blink::WebCryptoEcKeyAlgorithmParams"* %33, i64 0, i32 1
  %35 = load i32, i32* %34, align 8
  %36 = icmp eq i32 %31, %35
  br i1 %36, label %38, label %37

37:                                               ; preds = %27
  tail call void @_ZN9webcrypto6Status22ErrorEcdhCurveMismatchEv(%"class.webcrypto::Status"* sret %0) #10
  br label %102

38:                                               ; preds = %27
  %39 = tail call %struct.evp_pkey_st* @_ZN9webcrypto11GetEVP_PKEYERKN5blink12WebCryptoKeyE(%"class.blink::WebCryptoKey"* dereferenceable(8) %13) #10
  %40 = tail call %struct.ec_key_st* @EVP_PKEY_get0_EC_KEY(%struct.evp_pkey_st* %39) #10
  %41 = tail call %struct.ec_point_st* @EC_KEY_get0_public_key(%struct.ec_key_st* %40) #10
  %42 = tail call %struct.evp_pkey_st* @_ZN9webcrypto11GetEVP_PKEYERKN5blink12WebCryptoKeyE(%"class.blink::WebCryptoKey"* dereferenceable(8) %3) #10
  %43 = tail call %struct.ec_key_st* @EVP_PKEY_get0_EC_KEY(%struct.evp_pkey_st* %42) #10
  %44 = tail call %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st* %43) #10
  %45 = tail call i32 @EC_GROUP_get_degree(%struct.ec_group_st* %44) #10
  %46 = and i32 %45, 7
  %47 = add nuw nsw i32 %46, 7
  %48 = and i32 %47, 8
  %49 = add i32 %48, %45
  %50 = and i32 %49, -8
  %51 = select i1 %4, i32 %5, i32 %50
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %58

53:                                               ; preds = %38
  %54 = bitcast %"class.std::__1::vector"* %6 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %57 = bitcast i8** %56 to i64*
  store i64 %55, i64* %57, align 8
  tail call void @_ZN9webcrypto6Status7SuccessEv(%"class.webcrypto::Status"* sret %0) #10
  br label %102

58:                                               ; preds = %38
  %59 = icmp ugt i32 %51, %50
  br i1 %59, label %60, label %61

60:                                               ; preds = %58
  tail call void @_ZN9webcrypto6Status21ErrorEcdhLengthTooBigEj(%"class.webcrypto::Status"* sret %0, i32 %50) #10
  br label %102

61:                                               ; preds = %58
  %62 = lshr i32 %51, 3
  %63 = and i32 %51, 7
  %64 = add nuw nsw i32 %63, 7
  %65 = lshr i32 %64, 3
  %66 = add nuw nsw i32 %65, %62
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 1
  %69 = bitcast i8** %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = bitcast %"class.std::__1::vector"* %6 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = sub i64 %70, %72
  %74 = icmp ult i64 %73, %67
  %75 = inttoptr i64 %72 to i8*
  br i1 %74, label %76, label %81

76:                                               ; preds = %61
  %77 = sub i64 %67, %73
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %6, i64 %77) #10
  %78 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = load i64, i64* %69, align 8
  br label %86

81:                                               ; preds = %61
  %82 = icmp ugt i64 %73, %67
  br i1 %82, label %83, label %86

83:                                               ; preds = %81
  %84 = getelementptr inbounds i8, i8* %75, i64 %67
  store i8* %84, i8** %68, align 8
  %85 = ptrtoint i8* %84 to i64
  br label %86

86:                                               ; preds = %76, %81, %83
  %87 = phi i64 [ %80, %76 ], [ %70, %81 ], [ %85, %83 ]
  %88 = phi i8* [ %79, %76 ], [ %75, %81 ], [ %75, %83 ]
  %89 = ptrtoint i8* %88 to i64
  %90 = sub i64 %87, %89
  %91 = tail call i32 @ECDH_compute_key(i8* %88, i64 %90, %struct.ec_point_st* %41, %struct.ec_key_st* %43, i8* (i8*, i64, i8*, i64*)* null) #10
  %92 = icmp slt i32 %91, 0
  br i1 %92, label %99, label %93

93:                                               ; preds = %86
  %94 = sext i32 %91 to i64
  %95 = load i64, i64* %69, align 8
  %96 = load i64, i64* %71, align 8
  %97 = sub i64 %95, %96
  %98 = icmp eq i64 %97, %94
  br i1 %98, label %100, label %99

99:                                               ; preds = %93, %86
  tail call void @_ZN9webcrypto6Status14OperationErrorEv(%"class.webcrypto::Status"* sret %0) #10
  br label %102

100:                                              ; preds = %93
  %101 = zext i32 %51 to i64
  tail call void @_ZN9webcrypto19TruncateToBitLengthEmPNSt3__16vectorIhNS0_9allocatorIhEEEE(i64 %101, %"class.std::__1::vector"* %6) #10
  tail call void @_ZN9webcrypto6Status7SuccessEv(%"class.webcrypto::Status"* sret %0) #10
  br label %102

102:                                              ; preds = %16, %21, %26, %37, %99, %100, %60, %53, %10
  ret void
}

declare void @_ZNK9webcrypto23AlgorithmImplementation12GetKeyLengthERKN5blink18WebCryptoAlgorithmEPbPj(%"class.webcrypto::Status"* sret, %"class.webcrypto::AlgorithmImplementation"*, %"class.blink::WebCryptoAlgorithm"* dereferenceable(8), i8*, i32*) unnamed_addr #4

declare void @_ZNK9webcrypto11EcAlgorithm9ImportKeyEN5blink18WebCryptoKeyFormatERKNS_10CryptoDataERKNS1_18WebCryptoAlgorithmEbiPNS1_12WebCryptoKeyE(%"class.webcrypto::Status"* sret, %"class.webcrypto::EcAlgorithm"*, i32, %"class.webcrypto::CryptoData"* dereferenceable(16), %"class.blink::WebCryptoAlgorithm"* dereferenceable(8), i1 zeroext, i32, %"class.blink::WebCryptoKey"*) unnamed_addr #4

declare void @_ZNK9webcrypto11EcAlgorithm9ExportKeyEN5blink18WebCryptoKeyFormatERKNS1_12WebCryptoKeyEPNSt3__16vectorIhNS6_9allocatorIhEEEE(%"class.webcrypto::Status"* sret, %"class.webcrypto::EcAlgorithm"*, i32, %"class.blink::WebCryptoKey"* dereferenceable(8), %"class.std::__1::vector"*) unnamed_addr #4

declare void @_ZNK9webcrypto11EcAlgorithm22DeserializeKeyForCloneERKN5blink21WebCryptoKeyAlgorithmENS1_16WebCryptoKeyTypeEbiRKNS_10CryptoDataEPNS1_12WebCryptoKeyE(%"class.webcrypto::Status"* sret, %"class.webcrypto::EcAlgorithm"*, %"class.blink::WebCryptoKeyAlgorithm"* dereferenceable(8), i32, i1 zeroext, i32, %"class.webcrypto::CryptoData"* dereferenceable(16), %"class.blink::WebCryptoKey"*) unnamed_addr #4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i8* @_ZNK9webcrypto12_GLOBAL__N_118EcdhImplementation15GetJwkAlgorithmEN5blink19WebCryptoNamedCurveE(%"class.webcrypto::(anonymous namespace)::EcdhImplementation"* nocapture readnone, i32) unnamed_addr #5 align 2 {
  ret i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0)
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare i32 @_ZNK5blink12WebCryptoKey7GetTypeEv(%"class.blink::WebCryptoKey"*) local_unnamed_addr #4

declare void @_ZN9webcrypto6Status22ErrorUnexpectedKeyTypeEv(%"class.webcrypto::Status"* sret) local_unnamed_addr #4

declare %"class.blink::WebCryptoEcdhKeyDeriveParams"* @_ZNK5blink18WebCryptoAlgorithm19EcdhKeyDeriveParamsEv(%"class.blink::WebCryptoAlgorithm"*) local_unnamed_addr #4

declare void @_ZN9webcrypto6Status27ErrorEcdhPublicKeyWrongTypeEv(%"class.webcrypto::Status"* sret) local_unnamed_addr #4

declare dereferenceable(8) %"class.blink::WebCryptoKeyAlgorithm"* @_ZNK5blink12WebCryptoKey9AlgorithmEv(%"class.blink::WebCryptoKey"*) local_unnamed_addr #4

declare %"class.blink::WebCryptoEcKeyAlgorithmParams"* @_ZNK5blink21WebCryptoKeyAlgorithm8EcParamsEv(%"class.blink::WebCryptoKeyAlgorithm"*) local_unnamed_addr #4

declare i32 @_ZNK5blink21WebCryptoKeyAlgorithm2IdEv(%"class.blink::WebCryptoKeyAlgorithm"*) local_unnamed_addr #4

declare void @_ZN9webcrypto6Status32ErrorEcdhPublicKeyWrongAlgorithmEv(%"class.webcrypto::Status"* sret) local_unnamed_addr #4

declare void @_ZN9webcrypto6Status22ErrorEcdhCurveMismatchEv(%"class.webcrypto::Status"* sret) local_unnamed_addr #4

declare %struct.ec_key_st* @EVP_PKEY_get0_EC_KEY(%struct.evp_pkey_st*) local_unnamed_addr #4

declare %struct.evp_pkey_st* @_ZN9webcrypto11GetEVP_PKEYERKN5blink12WebCryptoKeyE(%"class.blink::WebCryptoKey"* dereferenceable(8)) local_unnamed_addr #4

declare %struct.ec_point_st* @EC_KEY_get0_public_key(%struct.ec_key_st*) local_unnamed_addr #4

declare i32 @EC_GROUP_get_degree(%struct.ec_group_st*) local_unnamed_addr #4

declare %struct.ec_group_st* @EC_KEY_get0_group(%struct.ec_key_st*) local_unnamed_addr #4

declare void @_ZN9webcrypto6Status7SuccessEv(%"class.webcrypto::Status"* sret) local_unnamed_addr #4

declare void @_ZN9webcrypto6Status21ErrorEcdhLengthTooBigEj(%"class.webcrypto::Status"* sret, i32) local_unnamed_addr #4

declare i32 @ECDH_compute_key(i8*, i64, %struct.ec_point_st*, %struct.ec_key_st*, i8* (i8*, i64, i8*, i64*)*) local_unnamed_addr #4

declare void @_ZN9webcrypto6Status14OperationErrorEv(%"class.webcrypto::Status"* sret) local_unnamed_addr #4

declare void @_ZN9webcrypto19TruncateToBitLengthEmPNSt3__16vectorIhNS0_9allocatorIhEEEE(i64, %"class.std::__1::vector"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #10
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #11
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #9
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #10
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #10
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #9
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
