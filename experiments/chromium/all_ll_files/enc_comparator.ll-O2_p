; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_comparator.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_comparator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::Fields" = type { i32 (...)** }
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr.75" }
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { i8* }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.78" = type { %"class.std::__1::__vector_base.79" }
%"class.std::__1::__vector_base.79" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.80" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"struct.jxl::ExtraChannelInfo"* }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.85", i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.10", %"class.std::__1::vector", %"class.std::__1::vector.17", %"class.std::__1::vector.24", %"class.std::__1::vector.33", %"class.std::__1::vector.47", %"class.std::__1::vector.0", %"class.std::__1::vector", %"class.std::__1::vector.0", i32, i8, %"class.std::__1::vector.0" }
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { i32*, i32*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { i32* }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.19" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.28" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.26", %"struct.std::__1::array.27", i32, i8, [3 x i8] }>
%"struct.std::__1::array.26" = type { [17 x i32] }
%"struct.std::__1::array.27" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.33" = type { %"class.std::__1::__vector_base.34" }
%"class.std::__1::__vector_base.34" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.42" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.35" }
%"class.std::__1::vector.35" = type { %"class.std::__1::__vector_base.36" }
%"class.std::__1::__vector_base.36" = type { i16*, i16*, %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { i16* }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.47" = type { %"class.std::__1::__vector_base.48" }
%"class.std::__1::__vector_base.48" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.64" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.49", i32, %"class.std::__1::vector.50", %"class.std::__1::vector.57" }
%"struct.std::__1::array.49" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.50" = type { %"class.std::__1::__vector_base.51" }
%"class.std::__1::__vector_base.51" = type { i32*, i32*, %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { i32* }
%"class.std::__1::vector.57" = type { %"class.std::__1::__vector_base.58" }
%"class.std::__1::__vector_base.58" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.59" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"*, %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::vector.0"* }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { i8*, i8*, %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.78", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr.75" }
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.std::__1::vector.85" = type { %"class.std::__1::__vector_base.86" }
%"class.std::__1::__vector_base.86" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.jxl::Plane"* }
%"class.jxl::Comparator" = type { i32 (...)** }
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }
%"class.jxl::Rect" = type { i64, i64, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::allocator.67" = type { i8 }

$_ZNK3jxl11ImageBundle4CopyEv = comdat any

$_ZN3jxl11ImageBundleD2Ev = comdat any

$_ZNSt3__16vectorIN3jxl16ExtraChannelInfoENS_9allocatorIS2_EEEC2ERKS5_ = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE7reserveEm = comdat any

$_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_ = comdat any

$_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_ = comdat any

$_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_ = comdat any

$_ZN3jxl4jpeg8JPEGDataC2ERKS1_ = comdat any

$_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_ = comdat any

$_ZNSt3__16vectorIN3jxl4jpeg13JPEGComponentENS_9allocatorIS3_EEEC2ERKS6_ = comdat any

$_ZNSt3__19allocatorIN3jxl4jpeg12JPEGScanInfoEE9constructIS3_JRS3_EEEvPT_DpOT0_ = comdat any

@.str = private unnamed_addr constant [22 x i8] c"%s:%d: JXL_CHECK: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/libjxl/src/lib/jxl/enc_comparator.cc\00", align 1
@.str.2 = private unnamed_addr constant [96 x i8] c"TransformIfNeeded(rgb0, ColorEncoding::LinearSRGB(rgb0.IsGray()), pool, &store0, &linear_srgb0)\00", align 1
@__const._ZN3jxl12ComputeScoreERKNS_11ImageBundleES2_PNS_10ComparatorEPNS_5PlaneIfEEPNS_10ThreadPoolE.metadata1 = private unnamed_addr constant <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, i32, i8, i8, i8, i8, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.78", %"struct.jxl::CustomTransformData", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }> <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %"struct.jxl::BitDepth" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA" }>, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766 }, i32 -1431655766, i8 -86, i8 -86, [2 x i8] c"\AA\AA", %"class.jxl::PaddedBytes" { i64 -6148914691236517206, i64 -6148914691236517206, %"class.std::__1::unique_ptr.75" { %"class.std::__1::__compressed_pair.76" { %"struct.std::__1::__compressed_pair_elem.3" { i8* inttoptr (i64 -6148914691236517206 to i8*) } } } }, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::Customxy" { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766 } }, i32 -1431655766, i8 -86, i8 -86, i8 -86, i8 -86, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::ToneMapping" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, i8 -86, [3 x i8] c"\AA\AA\AA", float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA" }>, i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::vector.78" { %"class.std::__1::__vector_base.79" { %"struct.jxl::ExtraChannelInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ExtraChannelInfo"*), %"struct.jxl::ExtraChannelInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ExtraChannelInfo"*), %"class.std::__1::__compressed_pair.80" { %"struct.std::__1::__compressed_pair_elem.81" { %"struct.jxl::ExtraChannelInfo"* inttoptr (i64 -6148914691236517206 to %"struct.jxl::ExtraChannelInfo"*) } } } }, %"struct.jxl::CustomTransformData" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, i8 -86, [6 x i8] c"\AA\AA\AA\AA\AA\AA", %"struct.jxl::OpsinInverseMatrix" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", [9 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [3 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA" }>, i32 -1431655766, [15 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [55 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [210 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [4 x i8] c"\AA\AA\AA\AA" }>, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 } { %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %"struct.jxl::AnimationHeader" <{ %"class.jxl::Fields" { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, i32 -1431655766, i32 -1431655766, i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA" }>, i64 -6148914691236517206, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" }>, align 8
@.str.3 = private unnamed_addr constant [96 x i8] c"TransformIfNeeded(rgb1, ColorEncoding::LinearSRGB(rgb1.IsGray()), pool, &store1, &linear_srgb1)\00", align 1
@_ZTVN3jxl13ImageMetadataE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl8BitDepthE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl13ColorEncodingE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl22CustomTransferFunctionE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl8CustomxyE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl10SizeHeaderE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl11ToneMappingE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl16ExtraChannelInfoE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl19CustomTransformDataE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl18OpsinInverseMatrixE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl13PreviewHeaderE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN3jxl15AnimationHeaderE = external unnamed_addr constant { [6 x i8*] }, align 8
@.str.5 = private unnamed_addr constant [36 x i8] c"comparator->SetReferenceImage(rgb0)\00", align 1
@.str.6 = private unnamed_addr constant [47 x i8] c"comparator->CompareWith(rgb1, distmap, &score)\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [49 x i8] c"../../third_party/libjxl/src/lib/jxl/image_ops.h\00", align 1
@.str.9 = private unnamed_addr constant [29 x i8] c"SameSize(rect_from, rect_to)\00", align 1
@.str.10 = private unnamed_addr constant [20 x i8] c"SameSize(from, *to)\00", align 1
@_ZTVN3jxl4jpeg8JPEGDataE = external unnamed_addr constant { [6 x i8*] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN3jxl12ComputeScoreERKNS_11ImageBundleES2_PNS_10ComparatorEPNS_5PlaneIfEEPNS_10ThreadPoolE(%"class.jxl::ImageBundle"* dereferenceable(368), %"class.jxl::ImageBundle"* dereferenceable(368), %"class.jxl::Comparator"*, %"class.jxl::Plane"*, %"class.jxl::ThreadPool"*) local_unnamed_addr #0 {
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca %"struct.jxl::ImageMetadata", align 8
  %10 = alloca %"class.jxl::ImageBundle", align 8
  %11 = alloca %"class.jxl::ImageBundle"*, align 8
  %12 = alloca %"struct.jxl::ImageMetadata", align 8
  %13 = alloca %"class.jxl::ImageBundle", align 8
  %14 = alloca %"class.jxl::ImageBundle"*, align 8
  %15 = alloca %"class.jxl::ImageBundle", align 8
  %16 = alloca %"class.jxl::ImageBundle", align 8
  %17 = alloca %"class.jxl::ImageBundle", align 8
  %18 = alloca %"class.jxl::ImageBundle", align 8
  %19 = alloca %"class.jxl::Plane", align 8
  %20 = alloca %"class.jxl::Plane", align 8
  %21 = alloca %"class.jxl::Plane", align 8
  %22 = bitcast %"struct.jxl::ImageMetadata"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1600, i8* nonnull %22) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %22, i8* align 8 bitcast (<{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, i32, i8, i8, i8, i8, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.78", %"struct.jxl::CustomTransformData", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>* @__const._ZN3jxl12ComputeScoreERKNS_11ImageBundleES2_PNS_10ComparatorEPNS_5PlaneIfEEPNS_10ThreadPoolE.metadata1 to i8*), i64 1600, i1 false)
  %23 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %24 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %23, align 8
  %25 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ImageMetadataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %25, align 8
  %26 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 1
  %27 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 1
  %28 = load i8, i8* %27, align 8, !range !2
  store i8 %28, i8* %26, align 8
  %29 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8BitDepthE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %29, align 8
  %30 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 3, i32 1
  %31 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 3, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 12, i1 false) #9
  %32 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 4
  %33 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 4
  %34 = bitcast i8* %33 to i16*
  %35 = bitcast i8* %32 to i16*
  %36 = load i16, i16* %34, align 8
  store i16 %36, i16* %35, align 8
  %37 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 7, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %37, align 8
  %38 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 7, i32 1
  %39 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 7, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %39, i64 12, i1 false) #9
  %40 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 7, i32 4, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22CustomTransferFunctionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %40, align 8
  %41 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 7, i32 4, i32 1
  %42 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 7, i32 4, i32 1
  %43 = bitcast i32* %41 to i8*
  %44 = bitcast i32* %42 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %44, i64 16, i1 false) #9
  %45 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 7, i32 5
  %46 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 7, i32 5
  %47 = bitcast i32* %45 to i8*
  %48 = bitcast i32* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 %48, i64 6, i1 false) #9
  %49 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 7, i32 8
  %50 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %49, i64 0, i32 0
  %51 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 7, i32 8, i32 0
  %52 = load i64, i64* %51, align 8
  store i64 %52, i64* %50, align 8
  %53 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 7, i32 8, i32 1
  %54 = icmp eq i64 %52, 0
  %55 = bitcast i64* %53 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 16, i1 false) #9
  br i1 %54, label %64, label %56

56:                                               ; preds = %5
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %49, i64 %52) #9
  %57 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = icmp eq i8* %58, null
  br i1 %59, label %64, label %60

60:                                               ; preds = %56
  %61 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  %63 = load i64, i64* %50, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %58, i8* align 1 %62, i64 %63, i1 false) #9
  br label %64

64:                                               ; preds = %5, %56, %60
  %65 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 7, i32 9
  %66 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 7, i32 9
  %67 = load i32, i32* %66, align 8
  store i32 %67, i32* %65, align 8
  %68 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 7, i32 10, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %68, align 8
  %69 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 7, i32 10, i32 1
  %70 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 7, i32 10, i32 1
  %71 = bitcast i32* %70 to i64*
  %72 = bitcast i32* %69 to i64*
  %73 = load i64, i64* %71, align 8
  store i64 %73, i64* %72, align 8
  %74 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 7, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %74, align 8
  %75 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 7, i32 11, i32 1
  %76 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 7, i32 11, i32 1
  %77 = bitcast i32* %76 to i64*
  %78 = bitcast i32* %75 to i64*
  %79 = load i64, i64* %77, align 8
  store i64 %79, i64* %78, align 8
  %80 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 7, i32 12, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %80, align 8
  %81 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 7, i32 12, i32 1
  %82 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 7, i32 12, i32 1
  %83 = bitcast i32* %82 to i64*
  %84 = bitcast i32* %81 to i64*
  %85 = load i64, i64* %83, align 8
  store i64 %85, i64* %84, align 8
  %86 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 7, i32 13, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %86, align 8
  %87 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 7, i32 13, i32 1
  %88 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 7, i32 13, i32 1
  %89 = bitcast i32* %88 to i64*
  %90 = bitcast i32* %87 to i64*
  %91 = load i64, i64* %89, align 8
  store i64 %91, i64* %90, align 8
  %92 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 8
  %93 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 8
  %94 = bitcast i32* %92 to i8*
  %95 = bitcast i32* %93 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 7, i1 false) #9
  %96 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 13, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl10SizeHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %96, align 8
  %97 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 13, i32 1
  %98 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 13, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %97, i8* align 8 %98, i64 24, i1 false) #9
  %99 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 14, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11ToneMappingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %99, align 8
  %100 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 14, i32 1
  %101 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 14, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 20, i1 false) #9
  %102 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 15
  %103 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 15
  %104 = load i32, i32* %103, align 8
  store i32 %104, i32* %102, align 8
  %105 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 17
  %106 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 17
  call void @_ZNSt3__16vectorIN3jxl16ExtraChannelInfoENS_9allocatorIS2_EEEC2ERKS5_(%"class.std::__1::vector.78"* %105, %"class.std::__1::vector.78"* dereferenceable(24) %106) #9
  %107 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 18, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl19CustomTransformDataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %107, align 8
  %108 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 18, i32 1
  %109 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 18, i32 1
  %110 = bitcast i8* %109 to i16*
  %111 = bitcast i8* %108 to i16*
  %112 = load i16, i16* %110, align 8
  store i16 %112, i16* %111, align 8
  %113 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 18, i32 4, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl18OpsinInverseMatrixE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %113, align 8
  %114 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 18, i32 4, i32 1
  %115 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 18, i32 4, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* align 8 %115, i64 68, i1 false) #9
  %116 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 18, i32 5
  %117 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 18, i32 5
  %118 = bitcast i32* %116 to i8*
  %119 = bitcast i32* %117 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %118, i8* align 8 %119, i64 1124, i1 false) #9
  %120 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 19, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13PreviewHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %120, align 8
  %121 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 19, i32 1
  %122 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 19, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %121, i8* align 8 %122, i64 24, i1 false) #9
  %123 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 20, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl15AnimationHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %123, align 8
  %124 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 20, i32 1
  %125 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 20, i32 1
  %126 = bitcast i32* %124 to i8*
  %127 = bitcast i32* %125 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %126, i8* align 8 %127, i64 13, i1 false) #9
  %128 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 21
  %129 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %24, i64 0, i32 21
  %130 = bitcast i64* %128 to i8*
  %131 = bitcast i64* %129 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %130, i8* align 8 %131, i64 9, i1 false) #9
  %132 = bitcast %"class.jxl::ImageBundle"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %132) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %132, i8 -86, i64 368, i1 false)
  %133 = bitcast %"class.jxl::ImageBundle"* %10 to i64*
  store i64 0, i64* %133, align 8
  %134 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %10, i64 0, i32 1
  store i32 1, i32* %134, align 8
  %135 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %10, i64 0, i32 3
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %135) #9
  %136 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %10, i64 0, i32 4, i32 0
  %137 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %10, i64 0, i32 8
  %138 = bitcast %"class.std::__1::basic_string"* %137 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %138, i8 0, i64 24, i1 false) #9
  %139 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %10, i64 0, i32 9
  %140 = bitcast i32* %136 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %140, i8 0, i64 14, i1 false) #9
  store %"struct.jxl::ImageMetadata"* %9, %"struct.jxl::ImageMetadata"** %139, align 8
  %141 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %10, i64 0, i32 10
  %142 = bitcast %"class.jxl::Image3"* %141 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %142, i8 0, i64 96, i1 false) #9
  %143 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %10, i64 0, i32 11
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %143) #9
  %144 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %10, i64 0, i32 12
  %145 = bitcast %"class.std::__1::vector.85"* %144 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %145, i8 0, i64 32, i1 false) #9
  %146 = bitcast %"class.jxl::ImageBundle"** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %146) #9
  store %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*), %"class.jxl::ImageBundle"** %11, align 8
  %147 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  %148 = load i32, i32* %147, align 8
  %149 = icmp eq i32 %148, 1
  %150 = call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext %149) #9
  %151 = call i32 @_ZN3jxl17TransformIfNeededERKNS_11ImageBundleERKNS_13ColorEncodingEPNS_10ThreadPoolEPS0_PPS1_(%"class.jxl::ImageBundle"* dereferenceable(368) %0, %"struct.jxl::ColorEncoding"* dereferenceable(152) %150, %"class.jxl::ThreadPool"* %4, %"class.jxl::ImageBundle"* nonnull %10, %"class.jxl::ImageBundle"** nonnull %11) #9
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %156, label %153

153:                                              ; preds = %64
  %154 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 99, i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.2, i64 0, i64 0)) #9
  %155 = call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

156:                                              ; preds = %64
  %157 = bitcast %"struct.jxl::ImageMetadata"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1600, i8* nonnull %157) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %157, i8* align 8 bitcast (<{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], { %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8], { %"class.jxl::Fields", i32, i8, [3 x i8], i32, i32 }, i32, i8, i8, [2 x i8], %"class.jxl::PaddedBytes", i32, [4 x i8], %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }, i32, i8, i8, i8, i8, { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.78", %"struct.jxl::CustomTransformData", { %"class.jxl::Fields", i8, [3 x i8], i32, i32, i32, i32, i32 }, %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>* @__const._ZN3jxl12ComputeScoreERKNS_11ImageBundleES2_PNS_10ComparatorEPNS_5PlaneIfEEPNS_10ThreadPoolE.metadata1 to i8*), i64 1600, i1 false)
  %158 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 9
  %159 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %158, align 8
  %160 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ImageMetadataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %160, align 8
  %161 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 1
  %162 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 1
  %163 = load i8, i8* %162, align 8, !range !2
  store i8 %163, i8* %161, align 8
  %164 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8BitDepthE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %164, align 8
  %165 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 3, i32 1
  %166 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 3, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %165, i8* align 8 %166, i64 12, i1 false) #9
  %167 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 4
  %168 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 4
  %169 = bitcast i8* %168 to i16*
  %170 = bitcast i8* %167 to i16*
  %171 = load i16, i16* %169, align 8
  store i16 %171, i16* %170, align 8
  %172 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 7, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %172, align 8
  %173 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 7, i32 1
  %174 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 7, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %173, i8* align 8 %174, i64 12, i1 false) #9
  %175 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 7, i32 4, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl22CustomTransferFunctionE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %175, align 8
  %176 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 7, i32 4, i32 1
  %177 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 7, i32 4, i32 1
  %178 = bitcast i32* %176 to i8*
  %179 = bitcast i32* %177 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %178, i8* align 8 %179, i64 16, i1 false) #9
  %180 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 7, i32 5
  %181 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 7, i32 5
  %182 = bitcast i32* %180 to i8*
  %183 = bitcast i32* %181 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %182, i8* align 8 %183, i64 6, i1 false) #9
  %184 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 7, i32 8
  %185 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %184, i64 0, i32 0
  %186 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 7, i32 8, i32 0
  %187 = load i64, i64* %186, align 8
  store i64 %187, i64* %185, align 8
  %188 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 7, i32 8, i32 1
  %189 = icmp eq i64 %187, 0
  %190 = bitcast i64* %188 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %190, i8 0, i64 16, i1 false) #9
  br i1 %189, label %199, label %191

191:                                              ; preds = %156
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %184, i64 %187) #9
  %192 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %193 = load i8*, i8** %192, align 8
  %194 = icmp eq i8* %193, null
  br i1 %194, label %199, label %195

195:                                              ; preds = %191
  %196 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %197 = load i8*, i8** %196, align 8
  %198 = load i64, i64* %185, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %193, i8* align 1 %197, i64 %198, i1 false) #9
  br label %199

199:                                              ; preds = %156, %191, %195
  %200 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 7, i32 9
  %201 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 7, i32 9
  %202 = load i32, i32* %201, align 8
  store i32 %202, i32* %200, align 8
  %203 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 7, i32 10, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %203, align 8
  %204 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 7, i32 10, i32 1
  %205 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 7, i32 10, i32 1
  %206 = bitcast i32* %205 to i64*
  %207 = bitcast i32* %204 to i64*
  %208 = load i64, i64* %206, align 8
  store i64 %208, i64* %207, align 8
  %209 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 7, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %209, align 8
  %210 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 7, i32 11, i32 1
  %211 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 7, i32 11, i32 1
  %212 = bitcast i32* %211 to i64*
  %213 = bitcast i32* %210 to i64*
  %214 = load i64, i64* %212, align 8
  store i64 %214, i64* %213, align 8
  %215 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 7, i32 12, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %215, align 8
  %216 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 7, i32 12, i32 1
  %217 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 7, i32 12, i32 1
  %218 = bitcast i32* %217 to i64*
  %219 = bitcast i32* %216 to i64*
  %220 = load i64, i64* %218, align 8
  store i64 %220, i64* %219, align 8
  %221 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 7, i32 13, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8CustomxyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %221, align 8
  %222 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 7, i32 13, i32 1
  %223 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 7, i32 13, i32 1
  %224 = bitcast i32* %223 to i64*
  %225 = bitcast i32* %222 to i64*
  %226 = load i64, i64* %224, align 8
  store i64 %226, i64* %225, align 8
  %227 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 8
  %228 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 8
  %229 = bitcast i32* %227 to i8*
  %230 = bitcast i32* %228 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %229, i8* align 8 %230, i64 7, i1 false) #9
  %231 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 13, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl10SizeHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %231, align 8
  %232 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 13, i32 1
  %233 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 13, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %232, i8* align 8 %233, i64 24, i1 false) #9
  %234 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 14, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl11ToneMappingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %234, align 8
  %235 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 14, i32 1
  %236 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 14, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %235, i8* align 8 %236, i64 20, i1 false) #9
  %237 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 15
  %238 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 15
  %239 = load i32, i32* %238, align 8
  store i32 %239, i32* %237, align 8
  %240 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 17
  %241 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 17
  call void @_ZNSt3__16vectorIN3jxl16ExtraChannelInfoENS_9allocatorIS2_EEEC2ERKS5_(%"class.std::__1::vector.78"* %240, %"class.std::__1::vector.78"* dereferenceable(24) %241) #9
  %242 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 18, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl19CustomTransformDataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %242, align 8
  %243 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 18, i32 1
  %244 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 18, i32 1
  %245 = bitcast i8* %244 to i16*
  %246 = bitcast i8* %243 to i16*
  %247 = load i16, i16* %245, align 8
  store i16 %247, i16* %246, align 8
  %248 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 18, i32 4, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl18OpsinInverseMatrixE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %248, align 8
  %249 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 18, i32 4, i32 1
  %250 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 18, i32 4, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %249, i8* align 8 %250, i64 68, i1 false) #9
  %251 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 18, i32 5
  %252 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 18, i32 5
  %253 = bitcast i32* %251 to i8*
  %254 = bitcast i32* %252 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %253, i8* align 8 %254, i64 1124, i1 false) #9
  %255 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 19, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13PreviewHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %255, align 8
  %256 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 19, i32 1
  %257 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 19, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %256, i8* align 8 %257, i64 24, i1 false) #9
  %258 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 20, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl15AnimationHeaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %258, align 8
  %259 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 20, i32 1
  %260 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 20, i32 1
  %261 = bitcast i32* %259 to i8*
  %262 = bitcast i32* %260 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %261, i8* align 8 %262, i64 13, i1 false) #9
  %263 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 21
  %264 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %159, i64 0, i32 21
  %265 = bitcast i64* %263 to i8*
  %266 = bitcast i64* %264 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %265, i8* align 8 %266, i64 9, i1 false) #9
  %267 = bitcast %"class.jxl::ImageBundle"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %267) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %267, i8 -86, i64 368, i1 false)
  %268 = bitcast %"class.jxl::ImageBundle"* %13 to i64*
  store i64 0, i64* %268, align 8
  %269 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %13, i64 0, i32 1
  store i32 1, i32* %269, align 8
  %270 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %13, i64 0, i32 3
  call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %270) #9
  %271 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %13, i64 0, i32 4, i32 0
  %272 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %13, i64 0, i32 8
  %273 = bitcast %"class.std::__1::basic_string"* %272 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %273, i8 0, i64 24, i1 false) #9
  %274 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %13, i64 0, i32 9
  %275 = bitcast i32* %271 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %275, i8 0, i64 14, i1 false) #9
  store %"struct.jxl::ImageMetadata"* %12, %"struct.jxl::ImageMetadata"** %274, align 8
  %276 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %13, i64 0, i32 10
  %277 = bitcast %"class.jxl::Image3"* %276 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %277, i8 0, i64 96, i1 false) #9
  %278 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %13, i64 0, i32 11
  call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %278) #9
  %279 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %13, i64 0, i32 12
  %280 = bitcast %"class.std::__1::vector.85"* %279 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %280, i8 0, i64 32, i1 false) #9
  %281 = bitcast %"class.jxl::ImageBundle"** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %281) #9
  store %"class.jxl::ImageBundle"* inttoptr (i64 -6148914691236517206 to %"class.jxl::ImageBundle"*), %"class.jxl::ImageBundle"** %14, align 8
  %282 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %283 = load i32, i32* %282, align 8
  %284 = icmp eq i32 %283, 1
  %285 = call dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext %284) #9
  %286 = call i32 @_ZN3jxl17TransformIfNeededERKNS_11ImageBundleERKNS_13ColorEncodingEPNS_10ThreadPoolEPS0_PPS1_(%"class.jxl::ImageBundle"* dereferenceable(368) %1, %"struct.jxl::ColorEncoding"* dereferenceable(152) %285, %"class.jxl::ThreadPool"* %4, %"class.jxl::ImageBundle"* nonnull %13, %"class.jxl::ImageBundle"** nonnull %14) #9
  %287 = icmp eq i32 %286, 0
  br i1 %287, label %291, label %288

288:                                              ; preds = %199
  %289 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 104, i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.3, i64 0, i64 0)) #9
  %290 = call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

291:                                              ; preds = %199
  %292 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %23, align 8
  %293 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %292, i64 0, i32 17, i32 0, i32 0
  %294 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %293, align 8
  %295 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %292, i64 0, i32 17, i32 0, i32 1
  %296 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %295, align 8
  %297 = icmp eq %"struct.jxl::ExtraChannelInfo"* %294, %296
  br i1 %297, label %308, label %300

298:                                              ; preds = %300
  %299 = icmp eq %"struct.jxl::ExtraChannelInfo"* %305, %296
  br i1 %299, label %308, label %300

300:                                              ; preds = %291, %298
  %301 = phi %"struct.jxl::ExtraChannelInfo"* [ %305, %298 ], [ %294, %291 ]
  %302 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %301, i64 0, i32 2
  %303 = load i32, i32* %302, align 4
  %304 = icmp eq i32 %303, 0
  %305 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %301, i64 1
  br i1 %304, label %306, label %298

306:                                              ; preds = %300
  %307 = icmp eq %"struct.jxl::ExtraChannelInfo"* %301, null
  br i1 %307, label %308, label %350

308:                                              ; preds = %298, %306, %291
  %309 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %158, align 8
  %310 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %309, i64 0, i32 17, i32 0, i32 0
  %311 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %310, align 8
  %312 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %309, i64 0, i32 17, i32 0, i32 1
  %313 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %312, align 8
  %314 = icmp eq %"struct.jxl::ExtraChannelInfo"* %311, %313
  br i1 %314, label %325, label %317

315:                                              ; preds = %317
  %316 = icmp eq %"struct.jxl::ExtraChannelInfo"* %322, %313
  br i1 %316, label %325, label %317

317:                                              ; preds = %308, %315
  %318 = phi %"struct.jxl::ExtraChannelInfo"* [ %322, %315 ], [ %311, %308 ]
  %319 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %318, i64 0, i32 2
  %320 = load i32, i32* %319, align 4
  %321 = icmp eq i32 %320, 0
  %322 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %318, i64 1
  br i1 %321, label %323, label %315

323:                                              ; preds = %317
  %324 = icmp eq %"struct.jxl::ExtraChannelInfo"* %318, null
  br i1 %324, label %325, label %350

325:                                              ; preds = %315, %323, %308
  %326 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %11, align 8
  %327 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %14, align 8
  %328 = bitcast %"class.jxl::Comparator"* %2 to i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*)***
  %329 = load i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*)**, i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*)*** %328, align 8
  %330 = getelementptr inbounds i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*)*, i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*)** %329, i64 2
  %331 = load i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*)*, i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*)** %330, align 8
  %332 = call i32 %331(%"class.jxl::Comparator"* %2, %"class.jxl::ImageBundle"* dereferenceable(368) %326) #9
  %333 = icmp eq i32 %332, 0
  br i1 %333, label %337, label %334

334:                                              ; preds = %325
  %335 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 83, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0)) #9
  %336 = call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

337:                                              ; preds = %325
  %338 = bitcast float* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %338) #9
  store float 0xFFFFFFFFE0000000, float* %8, align 4
  %339 = bitcast %"class.jxl::Comparator"* %2 to i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"*, float*)***
  %340 = load i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"*, float*)**, i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"*, float*)*** %339, align 8
  %341 = getelementptr inbounds i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"*, float*)*, i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"*, float*)** %340, i64 3
  %342 = load i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"*, float*)*, i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"*, float*)** %341, align 8
  %343 = call i32 %342(%"class.jxl::Comparator"* %2, %"class.jxl::ImageBundle"* dereferenceable(368) %327, %"class.jxl::Plane"* %3, float* nonnull %8) #9
  %344 = icmp eq i32 %343, 0
  br i1 %344, label %348, label %345

345:                                              ; preds = %337
  %346 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 85, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.6, i64 0, i64 0)) #9
  %347 = call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

348:                                              ; preds = %337
  %349 = load float, float* %8, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %338) #9
  br label %653

350:                                              ; preds = %306, %323
  %351 = bitcast %"class.jxl::ImageBundle"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %351) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %351, i8 -86, i64 368, i1 false)
  %352 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %11, align 8
  call void @_ZNK3jxl11ImageBundle4CopyEv(%"class.jxl::ImageBundle"* nonnull sret %15, %"class.jxl::ImageBundle"* %352)
  %353 = bitcast %"class.jxl::ImageBundle"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %353) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %353, i8 -86, i64 368, i1 false)
  %354 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %14, align 8
  call void @_ZNK3jxl11ImageBundle4CopyEv(%"class.jxl::ImageBundle"* nonnull sret %16, %"class.jxl::ImageBundle"* %354)
  call fastcc void @_ZN3jxl12_GLOBAL__N_110AlphaBlendEfPNS_11ImageBundleE(float 0.000000e+00, %"class.jxl::ImageBundle"* nonnull %15)
  call fastcc void @_ZN3jxl12_GLOBAL__N_110AlphaBlendEfPNS_11ImageBundleE(float 0.000000e+00, %"class.jxl::ImageBundle"* nonnull %16)
  %355 = bitcast %"class.jxl::ImageBundle"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %355) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %355, i8 -86, i64 368, i1 false)
  %356 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %11, align 8
  call void @_ZNK3jxl11ImageBundle4CopyEv(%"class.jxl::ImageBundle"* nonnull sret %17, %"class.jxl::ImageBundle"* %356)
  %357 = bitcast %"class.jxl::ImageBundle"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %357) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %357, i8 -86, i64 368, i1 false)
  %358 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %14, align 8
  call void @_ZNK3jxl11ImageBundle4CopyEv(%"class.jxl::ImageBundle"* nonnull sret %18, %"class.jxl::ImageBundle"* %358)
  call fastcc void @_ZN3jxl12_GLOBAL__N_110AlphaBlendEfPNS_11ImageBundleE(float 1.000000e+00, %"class.jxl::ImageBundle"* nonnull %17)
  call fastcc void @_ZN3jxl12_GLOBAL__N_110AlphaBlendEfPNS_11ImageBundleE(float 1.000000e+00, %"class.jxl::ImageBundle"* nonnull %18)
  %359 = bitcast %"class.jxl::Plane"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %359) #9
  %360 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %19, i64 0, i32 0, i32 4
  %361 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %19, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %359, i8 0, i64 32, i1 false) #9
  %362 = bitcast %"class.jxl::Plane"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %362) #9
  %363 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %20, i64 0, i32 0, i32 4
  %364 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %20, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %362, i8 0, i64 32, i1 false) #9
  %365 = bitcast %"class.jxl::Comparator"* %2 to i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*)***
  %366 = load i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*)**, i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*)*** %365, align 8
  %367 = getelementptr inbounds i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*)*, i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*)** %366, i64 2
  %368 = load i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*)*, i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*)** %367, align 8
  %369 = call i32 %368(%"class.jxl::Comparator"* %2, %"class.jxl::ImageBundle"* nonnull dereferenceable(368) %15) #9
  %370 = icmp eq i32 %369, 0
  br i1 %370, label %374, label %371

371:                                              ; preds = %350
  %372 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 83, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0)) #9
  %373 = call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

374:                                              ; preds = %350
  %375 = bitcast float* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %375) #9
  store float 0xFFFFFFFFE0000000, float* %7, align 4
  %376 = bitcast %"class.jxl::Comparator"* %2 to i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"*, float*)***
  %377 = load i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"*, float*)**, i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"*, float*)*** %376, align 8
  %378 = getelementptr inbounds i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"*, float*)*, i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"*, float*)** %377, i64 3
  %379 = load i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"*, float*)*, i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"*, float*)** %378, align 8
  %380 = call i32 %379(%"class.jxl::Comparator"* %2, %"class.jxl::ImageBundle"* nonnull dereferenceable(368) %16, %"class.jxl::Plane"* nonnull %19, float* nonnull %7) #9
  %381 = icmp eq i32 %380, 0
  br i1 %381, label %385, label %382

382:                                              ; preds = %374
  %383 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 85, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.6, i64 0, i64 0)) #9
  %384 = call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

385:                                              ; preds = %374
  %386 = load float, float* %7, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %375) #9
  %387 = load i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*)**, i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*)*** %365, align 8
  %388 = getelementptr inbounds i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*)*, i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*)** %387, i64 2
  %389 = load i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*)*, i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*)** %388, align 8
  %390 = call i32 %389(%"class.jxl::Comparator"* %2, %"class.jxl::ImageBundle"* nonnull dereferenceable(368) %17) #9
  %391 = icmp eq i32 %390, 0
  br i1 %391, label %395, label %392

392:                                              ; preds = %385
  %393 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 83, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i64 0, i64 0)) #9
  %394 = call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

395:                                              ; preds = %385
  %396 = bitcast float* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %396) #9
  store float 0xFFFFFFFFE0000000, float* %6, align 4
  %397 = load i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"*, float*)**, i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"*, float*)*** %376, align 8
  %398 = getelementptr inbounds i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"*, float*)*, i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"*, float*)** %397, i64 3
  %399 = load i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"*, float*)*, i32 (%"class.jxl::Comparator"*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"*, float*)** %398, align 8
  %400 = call i32 %399(%"class.jxl::Comparator"* %2, %"class.jxl::ImageBundle"* nonnull dereferenceable(368) %18, %"class.jxl::Plane"* nonnull %20, float* nonnull %6) #9
  %401 = icmp eq i32 %400, 0
  br i1 %401, label %405, label %402

402:                                              ; preds = %395
  %403 = call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 85, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.6, i64 0, i64 0)) #9
  %404 = call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

405:                                              ; preds = %395
  %406 = load float, float* %6, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %396) #9
  %407 = icmp eq %"class.jxl::Plane"* %3, null
  br i1 %407, label %642, label %408

408:                                              ; preds = %405
  %409 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %410 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %409, align 8
  %411 = icmp eq %"struct.jxl::jpeg::JPEGData"* %410, null
  br i1 %411, label %412, label %425

412:                                              ; preds = %408
  %413 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %414 = load i32, i32* %413, align 8
  %415 = icmp eq i32 %414, 0
  br i1 %415, label %416, label %432

416:                                              ; preds = %412
  %417 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %418 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %417, align 8
  %419 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %420 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %419, align 8
  %421 = icmp eq %"class.jxl::Plane"* %418, %420
  br i1 %421, label %432, label %422

422:                                              ; preds = %416
  %423 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %418, i64 0, i32 0, i32 0
  %424 = load i32, i32* %423, align 8
  br label %432

425:                                              ; preds = %408
  %426 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %410, i64 0, i32 1
  %427 = load i32, i32* %426, align 8
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %410, i64 0, i32 2
  %430 = load i32, i32* %429, align 4
  %431 = sext i32 %430 to i64
  br label %449

432:                                              ; preds = %412, %416, %422
  %433 = phi i32 [ %414, %412 ], [ 0, %416 ], [ %424, %422 ]
  %434 = zext i32 %433 to i64
  %435 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %436 = load i32, i32* %435, align 4
  %437 = zext i32 %436 to i64
  %438 = icmp eq i32 %436, 0
  br i1 %438, label %439, label %449

439:                                              ; preds = %432
  %440 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %441 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %440, align 8
  %442 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %443 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %442, align 8
  %444 = icmp eq %"class.jxl::Plane"* %441, %443
  br i1 %444, label %449, label %445

445:                                              ; preds = %439
  %446 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %441, i64 0, i32 0, i32 1
  %447 = load i32, i32* %446, align 4
  %448 = zext i32 %447 to i64
  br label %449

449:                                              ; preds = %425, %432, %439, %445
  %450 = phi i64 [ %428, %425 ], [ %434, %445 ], [ %434, %439 ], [ %434, %432 ]
  %451 = phi i64 [ %431, %425 ], [ %448, %445 ], [ 0, %439 ], [ %437, %432 ]
  %452 = bitcast %"class.jxl::Plane"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %452) #9
  %453 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %21, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %453, i64 %450, i64 %451, i64 4) #9
  %454 = bitcast %"class.jxl::Plane"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %454, i8* nonnull align 8 %452, i64 24, i1 false) #9
  %455 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 5
  %456 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %21, i64 0, i32 0, i32 5
  %457 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %456, i64 0, i32 0, i32 0, i32 0
  %458 = bitcast %"class.std::__1::unique_ptr.75"* %456 to i64*
  %459 = load i64, i64* %458, align 8
  store i8* null, i8** %457, align 8
  %460 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %455, i64 0, i32 0, i32 0, i32 0
  %461 = load i8*, i8** %460, align 8
  %462 = bitcast %"class.std::__1::unique_ptr.75"* %455 to i64*
  store i64 %459, i64* %462, align 8
  %463 = icmp eq i8* %461, null
  br i1 %463, label %464, label %466

464:                                              ; preds = %449
  %465 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %21, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %465, align 8
  br label %472

466:                                              ; preds = %449
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %461) #9
  %467 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %21, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %468 = load i8*, i8** %467, align 8
  %469 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %21, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %469, align 8
  %470 = icmp eq i8* %468, null
  br i1 %470, label %472, label %471

471:                                              ; preds = %466
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %468) #9
  br label %472

472:                                              ; preds = %464, %466, %471
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %452) #9
  %473 = icmp eq i64 %451, 0
  br i1 %473, label %642, label %474

474:                                              ; preds = %472
  %475 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %476 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %3, i64 0, i32 0, i32 4
  %477 = icmp eq i64 %450, 0
  %478 = shl nsw i64 %450, 2
  %479 = add nsw i64 %450, -8
  %480 = lshr i64 %479, 3
  %481 = add nuw nsw i64 %480, 1
  %482 = icmp ult i64 %450, 8
  %483 = and i64 %450, -8
  %484 = and i64 %481, 1
  %485 = icmp eq i64 %480, 0
  %486 = sub nuw nsw i64 %481, %484
  %487 = icmp eq i64 %484, 0
  %488 = icmp eq i64 %450, %483
  %489 = and i64 %450, 1
  %490 = icmp eq i64 %489, 0
  br label %491

491:                                              ; preds = %620, %474
  %492 = phi i64 [ 0, %474 ], [ %621, %620 ]
  %493 = load i8*, i8** %361, align 8
  %494 = load i64, i64* %360, align 8
  %495 = mul i64 %494, %492
  %496 = getelementptr inbounds i8, i8* %493, i64 %495
  %497 = ptrtoint i8* %496 to i64
  %498 = and i64 %497, 63
  %499 = icmp eq i64 %498, 0
  call void @llvm.assume(i1 %499) #9
  %500 = bitcast i8* %496 to float*
  %501 = load i8*, i8** %364, align 8
  %502 = load i64, i64* %363, align 8
  %503 = mul i64 %502, %492
  %504 = getelementptr inbounds i8, i8* %501, i64 %503
  %505 = ptrtoint i8* %504 to i64
  %506 = and i64 %505, 63
  %507 = icmp eq i64 %506, 0
  call void @llvm.assume(i1 %507) #9
  %508 = bitcast i8* %504 to float*
  %509 = load i8*, i8** %475, align 8
  %510 = load i64, i64* %476, align 8
  %511 = mul i64 %510, %492
  %512 = getelementptr inbounds i8, i8* %509, i64 %511
  %513 = ptrtoint i8* %512 to i64
  %514 = and i64 %513, 63
  %515 = icmp eq i64 %514, 0
  call void @llvm.assume(i1 %515) #9
  %516 = bitcast i8* %512 to float*
  br i1 %477, label %620, label %517

517:                                              ; preds = %491
  br i1 %482, label %518, label %533

518:                                              ; preds = %619, %533, %517
  %519 = phi i64 [ 0, %533 ], [ 0, %517 ], [ %483, %619 ]
  br i1 %490, label %529, label %520

520:                                              ; preds = %518
  %521 = getelementptr inbounds float, float* %500, i64 %519
  %522 = getelementptr inbounds float, float* %508, i64 %519
  %523 = load float, float* %521, align 32
  %524 = load float, float* %522, align 32
  %525 = fcmp olt float %523, %524
  %526 = select i1 %525, float %524, float %523
  %527 = getelementptr inbounds float, float* %516, i64 %519
  store float %526, float* %527, align 32
  %528 = or i64 %519, 1
  br label %529

529:                                              ; preds = %520, %518
  %530 = phi i64 [ %528, %520 ], [ %519, %518 ]
  %531 = or i64 %519, 1
  %532 = icmp eq i64 %450, %531
  br i1 %532, label %620, label %623

533:                                              ; preds = %517
  %534 = getelementptr i8, i8* %509, i64 %478
  %535 = getelementptr i8, i8* %534, i64 %511
  %536 = getelementptr i8, i8* %493, i64 %478
  %537 = mul i64 %494, %492
  %538 = getelementptr i8, i8* %536, i64 %537
  %539 = getelementptr i8, i8* %501, i64 %478
  %540 = getelementptr i8, i8* %539, i64 %503
  %541 = icmp ult i8* %512, %538
  %542 = icmp ult i8* %496, %535
  %543 = and i1 %541, %542
  %544 = icmp ult i8* %512, %540
  %545 = icmp ult i8* %504, %535
  %546 = and i1 %544, %545
  %547 = or i1 %543, %546
  br i1 %547, label %518, label %548

548:                                              ; preds = %533
  br i1 %485, label %596, label %549

549:                                              ; preds = %548, %549
  %550 = phi i64 [ %593, %549 ], [ 0, %548 ]
  %551 = phi i64 [ %594, %549 ], [ %486, %548 ]
  %552 = getelementptr inbounds float, float* %500, i64 %550
  %553 = getelementptr inbounds float, float* %508, i64 %550
  %554 = bitcast float* %552 to <4 x float>*
  %555 = load <4 x float>, <4 x float>* %554, align 64, !alias.scope !3
  %556 = getelementptr inbounds float, float* %552, i64 4
  %557 = bitcast float* %556 to <4 x float>*
  %558 = load <4 x float>, <4 x float>* %557, align 16, !alias.scope !3
  %559 = bitcast float* %553 to <4 x float>*
  %560 = load <4 x float>, <4 x float>* %559, align 64, !alias.scope !6
  %561 = getelementptr inbounds float, float* %553, i64 4
  %562 = bitcast float* %561 to <4 x float>*
  %563 = load <4 x float>, <4 x float>* %562, align 16, !alias.scope !6
  %564 = fcmp olt <4 x float> %555, %560
  %565 = fcmp olt <4 x float> %558, %563
  %566 = select <4 x i1> %564, <4 x float> %560, <4 x float> %555
  %567 = select <4 x i1> %565, <4 x float> %563, <4 x float> %558
  %568 = getelementptr inbounds float, float* %516, i64 %550
  %569 = bitcast float* %568 to <4 x float>*
  store <4 x float> %566, <4 x float>* %569, align 64, !alias.scope !8, !noalias !10
  %570 = getelementptr inbounds float, float* %568, i64 4
  %571 = bitcast float* %570 to <4 x float>*
  store <4 x float> %567, <4 x float>* %571, align 16, !alias.scope !8, !noalias !10
  %572 = or i64 %550, 8
  %573 = getelementptr inbounds float, float* %500, i64 %572
  %574 = getelementptr inbounds float, float* %508, i64 %572
  %575 = bitcast float* %573 to <4 x float>*
  %576 = load <4 x float>, <4 x float>* %575, align 32, !alias.scope !3
  %577 = getelementptr inbounds float, float* %573, i64 4
  %578 = bitcast float* %577 to <4 x float>*
  %579 = load <4 x float>, <4 x float>* %578, align 16, !alias.scope !3
  %580 = bitcast float* %574 to <4 x float>*
  %581 = load <4 x float>, <4 x float>* %580, align 32, !alias.scope !6
  %582 = getelementptr inbounds float, float* %574, i64 4
  %583 = bitcast float* %582 to <4 x float>*
  %584 = load <4 x float>, <4 x float>* %583, align 16, !alias.scope !6
  %585 = fcmp olt <4 x float> %576, %581
  %586 = fcmp olt <4 x float> %579, %584
  %587 = select <4 x i1> %585, <4 x float> %581, <4 x float> %576
  %588 = select <4 x i1> %586, <4 x float> %584, <4 x float> %579
  %589 = getelementptr inbounds float, float* %516, i64 %572
  %590 = bitcast float* %589 to <4 x float>*
  store <4 x float> %587, <4 x float>* %590, align 32, !alias.scope !8, !noalias !10
  %591 = getelementptr inbounds float, float* %589, i64 4
  %592 = bitcast float* %591 to <4 x float>*
  store <4 x float> %588, <4 x float>* %592, align 16, !alias.scope !8, !noalias !10
  %593 = add i64 %550, 16
  %594 = add i64 %551, -2
  %595 = icmp eq i64 %594, 0
  br i1 %595, label %596, label %549, !llvm.loop !11

596:                                              ; preds = %549, %548
  %597 = phi i64 [ 0, %548 ], [ %593, %549 ]
  br i1 %487, label %619, label %598

598:                                              ; preds = %596
  %599 = getelementptr inbounds float, float* %500, i64 %597
  %600 = getelementptr inbounds float, float* %508, i64 %597
  %601 = bitcast float* %599 to <4 x float>*
  %602 = load <4 x float>, <4 x float>* %601, align 32, !alias.scope !3
  %603 = getelementptr inbounds float, float* %599, i64 4
  %604 = bitcast float* %603 to <4 x float>*
  %605 = load <4 x float>, <4 x float>* %604, align 16, !alias.scope !3
  %606 = bitcast float* %600 to <4 x float>*
  %607 = load <4 x float>, <4 x float>* %606, align 32, !alias.scope !6
  %608 = getelementptr inbounds float, float* %600, i64 4
  %609 = bitcast float* %608 to <4 x float>*
  %610 = load <4 x float>, <4 x float>* %609, align 16, !alias.scope !6
  %611 = fcmp olt <4 x float> %602, %607
  %612 = fcmp olt <4 x float> %605, %610
  %613 = select <4 x i1> %611, <4 x float> %607, <4 x float> %602
  %614 = select <4 x i1> %612, <4 x float> %610, <4 x float> %605
  %615 = getelementptr inbounds float, float* %516, i64 %597
  %616 = bitcast float* %615 to <4 x float>*
  store <4 x float> %613, <4 x float>* %616, align 32, !alias.scope !8, !noalias !10
  %617 = getelementptr inbounds float, float* %615, i64 4
  %618 = bitcast float* %617 to <4 x float>*
  store <4 x float> %614, <4 x float>* %618, align 16, !alias.scope !8, !noalias !10
  br label %619

619:                                              ; preds = %596, %598
  br i1 %488, label %620, label %518

620:                                              ; preds = %529, %623, %619, %491
  %621 = add nuw i64 %492, 1
  %622 = icmp eq i64 %621, %451
  br i1 %622, label %642, label %491

623:                                              ; preds = %529, %623
  %624 = phi i64 [ %640, %623 ], [ %530, %529 ]
  %625 = getelementptr inbounds float, float* %500, i64 %624
  %626 = getelementptr inbounds float, float* %508, i64 %624
  %627 = load float, float* %625, align 4
  %628 = load float, float* %626, align 4
  %629 = fcmp olt float %627, %628
  %630 = select i1 %629, float %628, float %627
  %631 = getelementptr inbounds float, float* %516, i64 %624
  store float %630, float* %631, align 4
  %632 = add nuw i64 %624, 1
  %633 = getelementptr inbounds float, float* %500, i64 %632
  %634 = getelementptr inbounds float, float* %508, i64 %632
  %635 = load float, float* %633, align 4
  %636 = load float, float* %634, align 4
  %637 = fcmp olt float %635, %636
  %638 = select i1 %637, float %636, float %635
  %639 = getelementptr inbounds float, float* %516, i64 %632
  store float %638, float* %639, align 4
  %640 = add nuw i64 %624, 2
  %641 = icmp eq i64 %640, %450
  br i1 %641, label %620, label %623, !llvm.loop !13

642:                                              ; preds = %620, %472, %405
  %643 = fcmp olt float %386, %406
  %644 = select i1 %643, float %406, float %386
  %645 = load i8*, i8** %364, align 8
  store i8* null, i8** %364, align 8
  %646 = icmp eq i8* %645, null
  br i1 %646, label %648, label %647

647:                                              ; preds = %642
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %645) #9
  br label %648

648:                                              ; preds = %642, %647
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %362) #9
  %649 = load i8*, i8** %361, align 8
  store i8* null, i8** %361, align 8
  %650 = icmp eq i8* %649, null
  br i1 %650, label %652, label %651

651:                                              ; preds = %648
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %649) #9
  br label %652

652:                                              ; preds = %648, %651
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %359) #9
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %18) #9
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %357) #9
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %17) #9
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %355) #9
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %16) #9
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %353) #9
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %15) #9
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %351) #9
  br label %653

653:                                              ; preds = %652, %348
  %654 = phi float [ %644, %652 ], [ %349, %348 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %281) #9
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %13) #9
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %267) #9
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ImageMetadataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %160, align 8
  %655 = getelementptr inbounds %"class.std::__1::vector.78", %"class.std::__1::vector.78"* %240, i64 0, i32 0, i32 0
  %656 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %655, align 8
  %657 = icmp eq %"struct.jxl::ExtraChannelInfo"* %656, null
  br i1 %657, label %675, label %658

658:                                              ; preds = %653
  %659 = bitcast %"struct.jxl::ExtraChannelInfo"* %656 to i8*
  %660 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 17, i32 0, i32 1
  %661 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %660, align 8
  %662 = icmp eq %"struct.jxl::ExtraChannelInfo"* %661, %656
  br i1 %662, label %673, label %663

663:                                              ; preds = %658, %663
  %664 = phi %"struct.jxl::ExtraChannelInfo"* [ %665, %663 ], [ %661, %658 ]
  %665 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %664, i64 -1
  %666 = bitcast %"struct.jxl::ExtraChannelInfo"* %665 to void (%"struct.jxl::ExtraChannelInfo"*)***
  %667 = load void (%"struct.jxl::ExtraChannelInfo"*)**, void (%"struct.jxl::ExtraChannelInfo"*)*** %666, align 8
  %668 = load void (%"struct.jxl::ExtraChannelInfo"*)*, void (%"struct.jxl::ExtraChannelInfo"*)** %667, align 8
  call void %668(%"struct.jxl::ExtraChannelInfo"* %665) #9
  %669 = icmp eq %"struct.jxl::ExtraChannelInfo"* %665, %656
  br i1 %669, label %670, label %663

670:                                              ; preds = %663
  %671 = bitcast %"class.std::__1::vector.78"* %240 to i8**
  %672 = load i8*, i8** %671, align 8
  br label %673

673:                                              ; preds = %670, %658
  %674 = phi i8* [ %672, %670 ], [ %659, %658 ]
  store %"struct.jxl::ExtraChannelInfo"* %656, %"struct.jxl::ExtraChannelInfo"** %660, align 8
  call void @_ZdlPv(i8* %674) #11
  br label %675

675:                                              ; preds = %673, %653
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %172, align 8
  %676 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %12, i64 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %677 = load i8*, i8** %676, align 8
  store i8* null, i8** %676, align 8
  %678 = icmp eq i8* %677, null
  br i1 %678, label %680, label %679

679:                                              ; preds = %675
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %677) #9
  br label %680

680:                                              ; preds = %675, %679
  call void @llvm.lifetime.end.p0i8(i64 1600, i8* nonnull %157) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %146) #9
  call void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"* nonnull %10) #9
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %132) #9
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ImageMetadataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %25, align 8
  %681 = getelementptr inbounds %"class.std::__1::vector.78", %"class.std::__1::vector.78"* %105, i64 0, i32 0, i32 0
  %682 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %681, align 8
  %683 = icmp eq %"struct.jxl::ExtraChannelInfo"* %682, null
  br i1 %683, label %701, label %684

684:                                              ; preds = %680
  %685 = bitcast %"struct.jxl::ExtraChannelInfo"* %682 to i8*
  %686 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 17, i32 0, i32 1
  %687 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %686, align 8
  %688 = icmp eq %"struct.jxl::ExtraChannelInfo"* %687, %682
  br i1 %688, label %699, label %689

689:                                              ; preds = %684, %689
  %690 = phi %"struct.jxl::ExtraChannelInfo"* [ %691, %689 ], [ %687, %684 ]
  %691 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %690, i64 -1
  %692 = bitcast %"struct.jxl::ExtraChannelInfo"* %691 to void (%"struct.jxl::ExtraChannelInfo"*)***
  %693 = load void (%"struct.jxl::ExtraChannelInfo"*)**, void (%"struct.jxl::ExtraChannelInfo"*)*** %692, align 8
  %694 = load void (%"struct.jxl::ExtraChannelInfo"*)*, void (%"struct.jxl::ExtraChannelInfo"*)** %693, align 8
  call void %694(%"struct.jxl::ExtraChannelInfo"* %691) #9
  %695 = icmp eq %"struct.jxl::ExtraChannelInfo"* %691, %682
  br i1 %695, label %696, label %689

696:                                              ; preds = %689
  %697 = bitcast %"class.std::__1::vector.78"* %105 to i8**
  %698 = load i8*, i8** %697, align 8
  br label %699

699:                                              ; preds = %696, %684
  %700 = phi i8* [ %698, %696 ], [ %685, %684 ]
  store %"struct.jxl::ExtraChannelInfo"* %682, %"struct.jxl::ExtraChannelInfo"** %686, align 8
  call void @_ZdlPv(i8* %700) #11
  br label %701

701:                                              ; preds = %699, %680
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %37, align 8
  %702 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %9, i64 0, i32 7, i32 8, i32 2, i32 0, i32 0, i32 0
  %703 = load i8*, i8** %702, align 8
  store i8* null, i8** %702, align 8
  %704 = icmp eq i8* %703, null
  br i1 %704, label %706, label %705

705:                                              ; preds = %701
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %703) #9
  br label %706

706:                                              ; preds = %701, %705
  call void @llvm.lifetime.end.p0i8(i64 1600, i8* nonnull %22) #9
  ret float %654
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @_ZN3jxl17TransformIfNeededERKNS_11ImageBundleERKNS_13ColorEncodingEPNS_10ThreadPoolEPS0_PPS1_(%"class.jxl::ImageBundle"* dereferenceable(368), %"struct.jxl::ColorEncoding"* dereferenceable(152), %"class.jxl::ThreadPool"*, %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"**) local_unnamed_addr #2

declare dereferenceable(152) %"struct.jxl::ColorEncoding"* @_ZN3jxl13ColorEncoding10LinearSRGBEb(i1 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3jxl11ImageBundle4CopyEv(%"class.jxl::ImageBundle"* noalias sret, %"class.jxl::ImageBundle"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.jxl::Rect", align 8
  %4 = alloca %"class.jxl::Rect", align 8
  %5 = alloca %"class.jxl::Image3", align 8
  %6 = alloca %"class.jxl::Plane", align 8
  %7 = bitcast %"class.jxl::ImageBundle"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 368, i1 false)
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 9
  %9 = bitcast %"struct.jxl::ImageMetadata"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.jxl::ImageBundle"* %0 to i64*
  store i64 0, i64* %11, align 8
  %12 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 1
  store i32 1, i32* %12, align 8
  %13 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3
  tail call void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"* %13) #9
  %14 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 4, i32 0
  %15 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %16 = bitcast %"class.std::__1::basic_string"* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 24, i1 false) #9
  %17 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %18 = bitcast i32* %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 14, i1 false) #9
  %19 = bitcast %"struct.jxl::ImageMetadata"** %17 to i64*
  store i64 %10, i64* %19, align 8
  %20 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  %21 = bitcast %"class.jxl::Image3"* %20 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 96, i1 false) #9
  %22 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11
  tail call void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"* %22) #9
  %23 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %24 = bitcast %"class.std::__1::vector.85"* %23 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 32, i1 false) #9
  %25 = bitcast %"class.jxl::Image3"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %25) #9
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 96, i1 false) #9, !alias.scope !14
  %27 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %26, i64 0, i32 0, i64 0, i32 0, i32 0
  %28 = load i32, i32* %27, align 8, !noalias !14
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 4, !noalias !14
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %33, i64 %29, i64 %32, i64 4) #9
  %34 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %34, i64 %29, i64 %32, i64 4) #9
  %35 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %35, i64 %29, i64 %32, i64 4) #9
  %36 = bitcast %"class.jxl::Rect"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #9, !noalias !17
  %37 = bitcast %"class.jxl::Image3"* %26 to <2 x i32>*
  %38 = load <2 x i32>, <2 x i32>* %37, align 8, !noalias !17
  %39 = zext <2 x i32> %38 to <2 x i64>
  %40 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %3, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 0, i64 16, i1 false) #9, !noalias !17
  %41 = bitcast i64* %40 to <2 x i64>*
  store <2 x i64> %39, <2 x i64>* %41, align 8, !noalias !17
  %42 = bitcast %"class.jxl::Rect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %42) #9, !noalias !17
  %43 = bitcast %"class.jxl::Image3"* %5 to <2 x i32>*
  %44 = load <2 x i32>, <2 x i32>* %43, align 8, !alias.scope !17
  %45 = zext <2 x i32> %44 to <2 x i64>
  %46 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %4, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %42, i8 0, i64 16, i1 false) #9, !noalias !17
  %47 = bitcast i64* %46 to <2 x i64>*
  store <2 x i64> %45, <2 x i64>* %47, align 8, !noalias !17
  call void @_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_(%"class.jxl::Rect"* nonnull dereferenceable(32) %3, %"class.jxl::Image3"* dereferenceable(96) %26, %"class.jxl::Rect"* nonnull dereferenceable(32) %4, %"class.jxl::Image3"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %42) #9, !noalias !17
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #9, !noalias !17
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* nonnull align 8 %25, i64 24, i1 false) #9
  %48 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5
  %49 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = bitcast %"class.std::__1::unique_ptr.75"* %49 to i64*
  %52 = load i64, i64* %51, align 8
  store i8* null, i8** %50, align 8
  %53 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %48, i64 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = bitcast %"class.std::__1::unique_ptr.75"* %48 to i64*
  store i64 %52, i64* %55, align 8
  %56 = icmp eq i8* %54, null
  br i1 %56, label %58, label %57

57:                                               ; preds = %2
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %54) #9
  br label %58

58:                                               ; preds = %57, %2
  %59 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1
  %60 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1
  %61 = bitcast %"class.jxl::Plane"* %60 to i8*
  %62 = bitcast %"class.jxl::Plane"* %59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 24, i1 false) #9
  %63 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5
  %64 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5
  %65 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = bitcast %"class.std::__1::unique_ptr.75"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  store i8* null, i8** %65, align 8
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %63, i64 0, i32 0, i32 0, i32 0
  %69 = load i8*, i8** %68, align 8
  %70 = bitcast %"class.std::__1::unique_ptr.75"* %63 to i64*
  store i64 %67, i64* %70, align 8
  %71 = icmp eq i8* %69, null
  br i1 %71, label %73, label %72

72:                                               ; preds = %58
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %69) #9
  br label %73

73:                                               ; preds = %72, %58
  %74 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2
  %75 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2
  %76 = bitcast %"class.jxl::Plane"* %75 to i8*
  %77 = bitcast %"class.jxl::Plane"* %74 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 24, i1 false) #9
  %78 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5
  %79 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5
  %80 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %79, i64 0, i32 0, i32 0, i32 0
  %81 = bitcast %"class.std::__1::unique_ptr.75"* %79 to i64*
  %82 = load i64, i64* %81, align 8
  store i8* null, i8** %80, align 8
  %83 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %78, i64 0, i32 0, i32 0, i32 0
  %84 = load i8*, i8** %83, align 8
  %85 = bitcast %"class.std::__1::unique_ptr.75"* %78 to i64*
  store i64 %82, i64* %85, align 8
  %86 = icmp eq i8* %84, null
  br i1 %86, label %87, label %89

87:                                               ; preds = %73
  %88 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %88, align 8
  br label %95

89:                                               ; preds = %73
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %84) #9
  %90 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %91 = load i8*, i8** %90, align 8
  %92 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %92, align 8
  %93 = icmp eq i8* %91, null
  br i1 %93, label %95, label %94

94:                                               ; preds = %89
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %91) #9
  br label %95

95:                                               ; preds = %87, %94, %89
  %96 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %97 = load i8*, i8** %96, align 8
  store i8* null, i8** %96, align 8
  %98 = icmp eq i8* %97, null
  br i1 %98, label %100, label %99

99:                                               ; preds = %95
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %97) #9
  br label %100

100:                                              ; preds = %99, %95
  %101 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %5, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %102 = load i8*, i8** %101, align 8
  store i8* null, i8** %101, align 8
  %103 = icmp eq i8* %102, null
  br i1 %103, label %105, label %104

104:                                              ; preds = %100
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %102) #9
  br label %105

105:                                              ; preds = %100, %104
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %25) #9
  %106 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 1
  %107 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %107, i64 12, i1 false) #9
  %108 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 4, i32 1
  %109 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 4, i32 1
  %110 = bitcast i32* %108 to i8*
  %111 = bitcast i32* %109 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %110, i8* align 8 %111, i64 16, i1 false) #9
  %112 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 5
  %113 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 5
  %114 = bitcast i32* %112 to i8*
  %115 = bitcast i32* %113 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* align 8 %115, i64 6, i1 false) #9
  %116 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8
  %117 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 0
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 1
  %120 = load i64, i64* %119, align 8
  %121 = icmp ult i64 %120, %118
  br i1 %121, label %122, label %123

122:                                              ; preds = %105
  call void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"* %116, i64 %118) #9
  br label %123

123:                                              ; preds = %122, %105
  %124 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %125 = load i8*, i8** %124, align 8
  %126 = icmp eq i8* %125, null
  %127 = select i1 %126, i64 0, i64 %118
  %128 = getelementptr inbounds %"class.jxl::PaddedBytes", %"class.jxl::PaddedBytes"* %116, i64 0, i32 0
  store i64 %127, i64* %128, align 8
  br i1 %126, label %132, label %129

129:                                              ; preds = %123
  %130 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %131 = load i8*, i8** %130, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %125, i8* align 1 %131, i64 %127, i1 false) #9
  br label %132

132:                                              ; preds = %123, %129
  %133 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 9
  %134 = load i32, i32* %133, align 8
  %135 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 9
  store i32 %134, i32* %135, align 8
  %136 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 10, i32 1
  %137 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 10, i32 1
  %138 = bitcast i32* %137 to i64*
  %139 = bitcast i32* %136 to i64*
  %140 = load i64, i64* %138, align 8
  store i64 %140, i64* %139, align 8
  %141 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 11, i32 1
  %142 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 11, i32 1
  %143 = bitcast i32* %142 to i64*
  %144 = bitcast i32* %141 to i64*
  %145 = load i64, i64* %143, align 8
  store i64 %145, i64* %144, align 8
  %146 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 12, i32 1
  %147 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 12, i32 1
  %148 = bitcast i32* %147 to i64*
  %149 = bitcast i32* %146 to i64*
  %150 = load i64, i64* %148, align 8
  store i64 %150, i64* %149, align 8
  %151 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 13, i32 1
  %152 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 11, i32 13, i32 1
  %153 = bitcast i32* %152 to i64*
  %154 = bitcast i32* %151 to i64*
  %155 = load i64, i64* %153, align 8
  store i64 %155, i64* %154, align 8
  %156 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12
  %157 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 12, i32 0, i32 1
  %158 = bitcast %"class.jxl::Plane"** %157 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = bitcast %"class.std::__1::vector.85"* %156 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = sub i64 %159, %161
  %163 = ashr exact i64 %162, 5
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE7reserveEm(%"class.std::__1::vector.85"* %23, i64 %163)
  %164 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %156, i64 0, i32 0, i32 0
  %165 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %164, align 8
  %166 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %157, align 8
  %167 = icmp eq %"class.jxl::Plane"* %165, %166
  br i1 %167, label %177, label %168

168:                                              ; preds = %132
  %169 = bitcast %"class.jxl::Plane"* %6 to i8*
  %170 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %171 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 2, i32 0, i32 0
  %172 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %6, i64 0, i32 0, i32 5
  %173 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %172, i64 0, i32 0, i32 0, i32 0
  %174 = bitcast %"class.std::__1::unique_ptr.75"* %172 to i64*
  %175 = bitcast %"class.jxl::Plane"** %170 to i64*
  %176 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %6, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  br label %181

177:                                              ; preds = %198, %132
  %178 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %179 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %178, align 8
  %180 = icmp eq %"struct.jxl::jpeg::JPEGData"* %179, null
  br i1 %180, label %205, label %201

181:                                              ; preds = %168, %198
  %182 = phi %"class.jxl::Plane"* [ %165, %168 ], [ %199, %198 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %169) #9
  call void @_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane"* nonnull sret %6, %"class.jxl::Plane"* dereferenceable(32) %182)
  %183 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %170, align 8
  %184 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %171, align 8
  %185 = icmp ult %"class.jxl::Plane"* %183, %184
  br i1 %185, label %186, label %193

186:                                              ; preds = %181
  %187 = bitcast %"class.jxl::Plane"* %183 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %187, i8* nonnull align 8 %169, i64 24, i1 false) #9
  %188 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %183, i64 0, i32 0, i32 5
  %189 = load i64, i64* %174, align 8
  store i8* null, i8** %173, align 8
  %190 = bitcast %"class.std::__1::unique_ptr.75"* %188 to i64*
  store i64 %189, i64* %190, align 8
  %191 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %183, i64 1
  %192 = ptrtoint %"class.jxl::Plane"* %191 to i64
  store i64 %192, i64* %175, align 8
  br label %194

193:                                              ; preds = %181
  call void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_(%"class.std::__1::vector.85"* %23, %"class.jxl::Plane"* nonnull dereferenceable(32) %6) #9
  br label %194

194:                                              ; preds = %186, %193
  %195 = load i8*, i8** %176, align 8
  store i8* null, i8** %176, align 8
  %196 = icmp eq i8* %195, null
  br i1 %196, label %198, label %197

197:                                              ; preds = %194
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %195) #9
  br label %198

198:                                              ; preds = %194, %197
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %169) #9
  %199 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %182, i64 1
  %200 = icmp eq %"class.jxl::Plane"* %199, %166
  br i1 %200, label %177, label %181

201:                                              ; preds = %177
  %202 = call i8* @_Znwm(i64 296) #11
  %203 = bitcast i8* %202 to %"struct.jxl::jpeg::JPEGData"*
  call void @_ZN3jxl4jpeg8JPEGDataC2ERKS1_(%"struct.jxl::jpeg::JPEGData"* nonnull %203, %"struct.jxl::jpeg::JPEGData"* nonnull dereferenceable(296) %179) #9
  %204 = ptrtoint i8* %202 to i64
  br label %205

205:                                              ; preds = %177, %201
  %206 = phi i64 [ %204, %201 ], [ 0, %177 ]
  %207 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %208 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %207, align 8
  store i64 %206, i64* %11, align 8
  %209 = icmp eq %"struct.jxl::jpeg::JPEGData"* %208, null
  br i1 %209, label %215, label %210

210:                                              ; preds = %205
  %211 = bitcast %"struct.jxl::jpeg::JPEGData"* %208 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %212 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %211, align 8
  %213 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %212, i64 1
  %214 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %213, align 8
  call void %214(%"struct.jxl::jpeg::JPEGData"* nonnull %208) #9
  br label %215

215:                                              ; preds = %210, %205
  %216 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 1
  %217 = load i32, i32* %216, align 8
  store i32 %217, i32* %12, align 8
  %218 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 3, i32 1
  %219 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 3, i32 1
  %220 = bitcast [3 x i32]* %218 to i8*
  %221 = bitcast [3 x i32]* %219 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %220, i8* align 8 %221, i64 14, i1 false) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_110AlphaBlendEfPNS_11ImageBundleE(float, %"class.jxl::ImageBundle"*) unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 9
  %4 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %3, align 8
  %5 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %4, i64 0, i32 17, i32 0, i32 0
  %6 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %5, align 8
  %7 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %4, i64 0, i32 17, i32 0, i32 1
  %8 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %7, align 8
  %9 = icmp eq %"struct.jxl::ExtraChannelInfo"* %6, %8
  br i1 %9, label %137, label %12

10:                                               ; preds = %12
  %11 = icmp eq %"struct.jxl::ExtraChannelInfo"* %17, %8
  br i1 %11, label %137, label %12

12:                                               ; preds = %2, %10
  %13 = phi %"struct.jxl::ExtraChannelInfo"* [ %17, %10 ], [ %6, %2 ]
  %14 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %13, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  %17 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %13, i64 1
  br i1 %16, label %18, label %10

18:                                               ; preds = %12
  %19 = icmp eq %"struct.jxl::ExtraChannelInfo"* %13, null
  br i1 %19, label %137, label %20

20:                                               ; preds = %18
  %21 = fpext float %0 to double
  %22 = fcmp ole float %0, 0.000000e+00
  %23 = fcmp oge float %0, 1.000000e+00
  %24 = fcmp ole double %21, 3.130800e-03
  %25 = fmul double %21, 1.292000e+01
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %27 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 4
  %28 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %29 = or i1 %22, %23
  %30 = select i1 %22, double 0.000000e+00, double 1.000000e+00
  %31 = or i1 %29, %24
  %32 = select i1 %29, double %30, double %25
  br label %33

33:                                               ; preds = %134, %20
  %34 = phi i64 [ 0, %20 ], [ %135, %134 ]
  %35 = tail call %"class.jxl::Plane"* @_ZN3jxl11ImageBundle5alphaEv(%"class.jxl::ImageBundle"* %1) #9
  br i1 %31, label %40, label %36

36:                                               ; preds = %33
  %37 = tail call double @pow(double %21, double 0x3FDAAAAAAAAAAAAB) #9
  %38 = fmul double %37, 1.055000e+00
  %39 = fadd double %38, -5.500000e-02
  br label %40

40:                                               ; preds = %33, %36
  %41 = phi double [ %39, %36 ], [ %32, %33 ]
  %42 = fptrunc double %41 to float
  %43 = load i32, i32* %26, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %134, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %35, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %47 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %35, i64 0, i32 0, i32 4
  %48 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %1, i64 0, i32 10, i32 0, i64 %34, i32 0, i32 5, i32 0, i32 0, i32 0
  %49 = load i32, i32* %28, align 8
  br label %50

50:                                               ; preds = %76, %45
  %51 = phi i32 [ %43, %45 ], [ %77, %76 ]
  %52 = phi i32 [ %49, %45 ], [ %78, %76 ]
  %53 = phi i64 [ 0, %45 ], [ %79, %76 ]
  %54 = load i8*, i8** %46, align 8
  %55 = load i64, i64* %47, align 8
  %56 = mul i64 %55, %53
  %57 = getelementptr inbounds i8, i8* %54, i64 %56
  %58 = ptrtoint i8* %57 to i64
  %59 = and i64 %58, 63
  %60 = icmp eq i64 %59, 0
  tail call void @llvm.assume(i1 %60) #9
  %61 = bitcast i8* %57 to float*
  %62 = load i64, i64* %27, align 8
  %63 = mul i64 %62, %53
  %64 = load i8*, i8** %48, align 8
  %65 = ptrtoint i8* %64 to i64
  %66 = and i64 %65, 63
  %67 = icmp eq i64 %66, 0
  tail call void @llvm.assume(i1 %67) #9
  %68 = getelementptr inbounds i8, i8* %64, i64 %63
  %69 = ptrtoint i8* %68 to i64
  %70 = and i64 %69, 63
  %71 = icmp eq i64 %70, 0
  tail call void @llvm.assume(i1 %71) #9
  %72 = bitcast i8* %68 to float*
  %73 = icmp eq i32 %52, 0
  br i1 %73, label %76, label %82

74:                                               ; preds = %129
  %75 = load i32, i32* %26, align 4
  br label %76

76:                                               ; preds = %74, %50
  %77 = phi i32 [ %75, %74 ], [ %51, %50 ]
  %78 = phi i32 [ %131, %74 ], [ 0, %50 ]
  %79 = add nuw nsw i64 %53, 1
  %80 = zext i32 %77 to i64
  %81 = icmp ult i64 %79, %80
  br i1 %81, label %50, label %134

82:                                               ; preds = %50, %129
  %83 = phi i64 [ %130, %129 ], [ 0, %50 ]
  %84 = getelementptr inbounds float, float* %61, i64 %83
  %85 = load float, float* %84, align 4
  %86 = fcmp ugt float %85, 0.000000e+00
  br i1 %86, label %89, label %87

87:                                               ; preds = %82
  %88 = getelementptr inbounds float, float* %72, i64 %83
  store float %0, float* %88, align 4
  br label %129

89:                                               ; preds = %82
  %90 = fcmp ult float %85, 1.000000e+00
  br i1 %90, label %91, label %129

91:                                               ; preds = %89
  %92 = fsub float 1.000000e+00, %85
  %93 = fpext float %85 to double
  %94 = getelementptr inbounds float, float* %72, i64 %83
  %95 = load float, float* %94, align 4
  %96 = fpext float %95 to double
  %97 = fcmp ugt float %95, 0.000000e+00
  br i1 %97, label %98, label %108

98:                                               ; preds = %91
  %99 = fcmp ult float %95, 1.000000e+00
  br i1 %99, label %100, label %108

100:                                              ; preds = %98
  %101 = fcmp ugt double %96, 3.130800e-03
  br i1 %101, label %104, label %102

102:                                              ; preds = %100
  %103 = fmul double %96, 1.292000e+01
  br label %108

104:                                              ; preds = %100
  %105 = tail call double @pow(double %96, double 0x3FDAAAAAAAAAAAAB) #9
  %106 = fmul double %105, 1.055000e+00
  %107 = fadd double %106, -5.500000e-02
  br label %108

108:                                              ; preds = %104, %102, %98, %91
  %109 = phi double [ %103, %102 ], [ %107, %104 ], [ 0.000000e+00, %91 ], [ 1.000000e+00, %98 ]
  %110 = fmul double %109, %93
  %111 = fptrunc double %110 to float
  %112 = fmul float %92, %42
  %113 = fadd float %112, %111
  %114 = fpext float %113 to double
  %115 = fcmp ugt float %113, 0.000000e+00
  br i1 %115, label %116, label %126

116:                                              ; preds = %108
  %117 = fcmp ugt double %114, 4.045000e-02
  br i1 %117, label %120, label %118

118:                                              ; preds = %116
  %119 = fdiv double %114, 1.292000e+01
  br label %126

120:                                              ; preds = %116
  %121 = fcmp ult float %113, 1.000000e+00
  br i1 %121, label %122, label %126

122:                                              ; preds = %120
  %123 = fadd double %114, 5.500000e-02
  %124 = fdiv double %123, 1.055000e+00
  %125 = tail call double @pow(double %124, double 2.400000e+00) #9
  br label %126

126:                                              ; preds = %122, %120, %118, %108
  %127 = phi double [ %119, %118 ], [ %125, %122 ], [ 0.000000e+00, %108 ], [ 1.000000e+00, %120 ]
  %128 = fptrunc double %127 to float
  store float %128, float* %94, align 4
  br label %129

129:                                              ; preds = %89, %126, %87
  %130 = add nuw nsw i64 %83, 1
  %131 = load i32, i32* %28, align 8
  %132 = zext i32 %131 to i64
  %133 = icmp ult i64 %130, %132
  br i1 %133, label %82, label %74

134:                                              ; preds = %76, %40
  %135 = add nuw nsw i64 %34, 1
  %136 = icmp eq i64 %135, 3
  br i1 %136, label %137, label %33

137:                                              ; preds = %10, %134, %18, %2
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11ImageBundleD2Ev(%"class.jxl::ImageBundle"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12
  %3 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  %5 = icmp eq %"class.jxl::Plane"* %4, null
  br i1 %5, label %25, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.jxl::Plane"* %4 to i8*
  %8 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %9 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %8, align 8
  %10 = icmp eq %"class.jxl::Plane"* %9, %4
  br i1 %10, label %23, label %11

11:                                               ; preds = %6, %18
  %12 = phi %"class.jxl::Plane"* [ %13, %18 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 -1
  %14 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %12, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  store i8* null, i8** %14, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %11
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %15) #9
  br label %18

18:                                               ; preds = %17, %11
  %19 = icmp eq %"class.jxl::Plane"* %13, %4
  br i1 %19, label %20, label %11

20:                                               ; preds = %18
  %21 = bitcast %"class.std::__1::vector.85"* %2 to i8**
  %22 = load i8*, i8** %21, align 8
  br label %23

23:                                               ; preds = %20, %6
  %24 = phi i8* [ %22, %20 ], [ %7, %6 ]
  store %"class.jxl::Plane"* %4, %"class.jxl::Plane"** %8, align 8
  tail call void @_ZdlPv(i8* %24) #11
  br label %25

25:                                               ; preds = %1, %23
  %26 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl13ColorEncodingE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %26, align 8
  %27 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 11, i32 8, i32 2, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  store i8* null, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %31, label %30

30:                                               ; preds = %25
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %28) #9
  br label %31

31:                                               ; preds = %25, %30
  %32 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  store i8* null, i8** %32, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %33) #9
  br label %36

36:                                               ; preds = %35, %31
  %37 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  store i8* null, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %36
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %38) #9
  br label %41

41:                                               ; preds = %40, %36
  %42 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  store i8* null, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %43) #9
  br label %46

46:                                               ; preds = %41, %45
  %47 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 8
  %48 = bitcast %"class.std::__1::basic_string"* %47 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %46
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  tail call void @_ZdlPv(i8* %54) #11
  br label %55

55:                                               ; preds = %46, %52
  %56 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %57 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  store %"struct.jxl::jpeg::JPEGData"* null, %"struct.jxl::jpeg::JPEGData"** %56, align 8
  %58 = icmp eq %"struct.jxl::jpeg::JPEGData"* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = bitcast %"struct.jxl::jpeg::JPEGData"* %57 to void (%"struct.jxl::jpeg::JPEGData"*)***
  %61 = load void (%"struct.jxl::jpeg::JPEGData"*)**, void (%"struct.jxl::jpeg::JPEGData"*)*** %60, align 8
  %62 = getelementptr inbounds void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %61, i64 1
  %63 = load void (%"struct.jxl::jpeg::JPEGData"*)*, void (%"struct.jxl::jpeg::JPEGData"*)** %62, align 8
  tail call void %63(%"struct.jxl::jpeg::JPEGData"* nonnull %57) #9
  br label %64

64:                                               ; preds = %55, %59
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl16ExtraChannelInfoENS_9allocatorIS2_EEEC2ERKS5_(%"class.std::__1::vector.78"*, %"class.std::__1::vector.78"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.std::__1::vector.78"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #9
  %4 = getelementptr inbounds %"class.std::__1::vector.78", %"class.std::__1::vector.78"* %1, i64 0, i32 0, i32 1
  %5 = bitcast %"struct.jxl::ExtraChannelInfo"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.78"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = sdiv exact i64 %9, 96
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %71, label %12

12:                                               ; preds = %2
  %13 = icmp ugt i64 %10, 192153584101141162
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"class.std::__1::vector.78"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #10
  unreachable

16:                                               ; preds = %12
  %17 = tail call i8* @_Znwm(i64 %9) #11
  %18 = bitcast i8* %17 to %"struct.jxl::ExtraChannelInfo"*
  %19 = getelementptr inbounds %"class.std::__1::vector.78", %"class.std::__1::vector.78"* %0, i64 0, i32 0, i32 1
  %20 = bitcast %"struct.jxl::ExtraChannelInfo"** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = bitcast %"class.std::__1::vector.78"* %0 to i8**
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %18, i64 %10
  %23 = getelementptr inbounds %"class.std::__1::vector.78", %"class.std::__1::vector.78"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::ExtraChannelInfo"* %22, %"struct.jxl::ExtraChannelInfo"** %23, align 8
  %24 = getelementptr inbounds %"class.std::__1::vector.78", %"class.std::__1::vector.78"* %1, i64 0, i32 0, i32 0
  %25 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %24, align 8
  %26 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %4, align 8
  %27 = bitcast %"struct.jxl::ExtraChannelInfo"** %19 to i64*
  %28 = ptrtoint i8* %17 to i64
  %29 = icmp eq %"struct.jxl::ExtraChannelInfo"* %25, %26
  br i1 %29, label %69, label %30

30:                                               ; preds = %16
  %31 = bitcast i8* %17 to %"struct.jxl::ExtraChannelInfo"*
  br label %32

32:                                               ; preds = %61, %30
  %33 = phi %"struct.jxl::ExtraChannelInfo"* [ %65, %61 ], [ %31, %30 ]
  %34 = phi %"struct.jxl::ExtraChannelInfo"* [ %64, %61 ], [ %25, %30 ]
  %35 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %33, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl16ExtraChannelInfoE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %35, align 8
  %36 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %33, i64 0, i32 1
  %37 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %34, i64 0, i32 1
  %38 = bitcast i8* %37 to i64*
  %39 = bitcast i8* %36 to i64*
  %40 = load i64, i64* %38, align 8
  store i64 %40, i64* %39, align 8
  %41 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %33, i64 0, i32 3, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl8BitDepthE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %41, align 8
  %42 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %33, i64 0, i32 3, i32 1
  %43 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %34, i64 0, i32 3, i32 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 12, i1 false) #9
  %44 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %33, i64 0, i32 4
  %45 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %34, i64 0, i32 4
  %46 = load i32, i32* %45, align 8
  store i32 %46, i32* %44, align 8
  %47 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %33, i64 0, i32 5
  %48 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %34, i64 0, i32 5
  %49 = bitcast %"class.std::__1::basic_string"* %48 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %50 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %49, i64 0, i32 1, i32 0
  %51 = load i8, i8* %50, align 1
  %52 = icmp slt i8 %51, 0
  br i1 %52, label %56, label %53

53:                                               ; preds = %32
  %54 = bitcast %"class.std::__1::basic_string"* %47 to i8*
  %55 = bitcast %"class.std::__1::basic_string"* %48 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 24, i1 false) #9
  br label %61

56:                                               ; preds = %32
  %57 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %48, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %34, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %60 = load i64, i64* %59, align 8
  tail call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %47, i8* %58, i64 %60) #9
  br label %61

61:                                               ; preds = %56, %53
  %62 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %33, i64 0, i32 6
  %63 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %34, i64 0, i32 6
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %62, i8* align 8 %63, i64 24, i1 false) #9
  %64 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %34, i64 1
  %65 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %33, i64 1
  %66 = icmp eq %"struct.jxl::ExtraChannelInfo"* %64, %26
  br i1 %66, label %67, label %32

67:                                               ; preds = %61
  %68 = ptrtoint %"struct.jxl::ExtraChannelInfo"* %65 to i64
  br label %69

69:                                               ; preds = %16, %67
  %70 = phi i64 [ %28, %16 ], [ %68, %67 ]
  store i64 %70, i64* %27, align 8
  br label %71

71:                                               ; preds = %2, %69
  ret void
}

declare void @_ZN3jxl11PaddedBytes18IncreaseCapacityToEm(%"class.jxl::PaddedBytes"*, i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

declare void @_ZN3jxl22YCbCrChromaSubsamplingC1Ev(%"struct.jxl::YCbCrChromaSubsampling"*) unnamed_addr #2

declare void @_ZN3jxl13ColorEncodingC1Ev(%"struct.jxl::ColorEncoding"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE7reserveEm(%"class.std::__1::vector.85"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.jxl::Plane"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.85"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"class.jxl::Plane"*
  br i1 %10, label %12, label %103

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"class.jxl::Plane"** %13 to i64*
  %15 = icmp ugt i64 %1, 576460752303423487
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #10
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = ashr exact i64 %19, 5
  %21 = shl i64 %1, 5
  %22 = tail call i8* @_Znwm(i64 %21) #11
  %23 = bitcast i8* %22 to %"class.jxl::Plane"*
  %24 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %23, i64 %20
  %25 = ptrtoint %"class.jxl::Plane"* %24 to i64
  %26 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %23, i64 %1
  %27 = ptrtoint %"class.jxl::Plane"* %26 to i64
  %28 = inttoptr i64 %18 to %"class.jxl::Plane"*
  %29 = icmp eq %"class.jxl::Plane"* %28, %11
  br i1 %29, label %84, label %30

30:                                               ; preds = %17
  %31 = getelementptr %"class.jxl::Plane", %"class.jxl::Plane"* %28, i64 -1, i32 0, i32 0
  %32 = bitcast i32* %31 to i8*
  %33 = sub i64 0, %7
  %34 = getelementptr i8, i8* %32, i64 %33
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 32
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %49

38:                                               ; preds = %30
  %39 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %24, i64 -1
  %40 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %28, i64 -1
  %41 = bitcast %"class.jxl::Plane"* %39 to i8*
  %42 = bitcast %"class.jxl::Plane"* %40 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 24, i1 false) #9
  %43 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %24, i64 -1, i32 0, i32 5
  %44 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %28, i64 -1, i32 0, i32 5
  %45 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %44, i64 0, i32 0, i32 0, i32 0
  %46 = bitcast %"class.std::__1::unique_ptr.75"* %44 to i64*
  %47 = load i64, i64* %46, align 8
  store i8* null, i8** %45, align 8
  %48 = bitcast %"class.std::__1::unique_ptr.75"* %43 to i64*
  store i64 %47, i64* %48, align 8
  br label %49

49:                                               ; preds = %38, %30
  %50 = phi %"class.jxl::Plane"* [ undef, %30 ], [ %39, %38 ]
  %51 = phi %"class.jxl::Plane"* [ %24, %30 ], [ %39, %38 ]
  %52 = phi %"class.jxl::Plane"* [ %28, %30 ], [ %40, %38 ]
  %53 = icmp ult i8* %34, inttoptr (i64 32 to i8*)
  br i1 %53, label %78, label %54

54:                                               ; preds = %49, %54
  %55 = phi %"class.jxl::Plane"* [ %67, %54 ], [ %51, %49 ]
  %56 = phi %"class.jxl::Plane"* [ %68, %54 ], [ %52, %49 ]
  %57 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %55, i64 -1
  %58 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %56, i64 -1
  %59 = bitcast %"class.jxl::Plane"* %57 to i8*
  %60 = bitcast %"class.jxl::Plane"* %58 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 24, i1 false) #9
  %61 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %55, i64 -1, i32 0, i32 5
  %62 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %56, i64 -1, i32 0, i32 5
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = bitcast %"class.std::__1::unique_ptr.75"* %62 to i64*
  %65 = load i64, i64* %64, align 8
  store i8* null, i8** %63, align 8
  %66 = bitcast %"class.std::__1::unique_ptr.75"* %61 to i64*
  store i64 %65, i64* %66, align 8
  %67 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %55, i64 -2
  %68 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %56, i64 -2
  %69 = bitcast %"class.jxl::Plane"* %67 to i8*
  %70 = bitcast %"class.jxl::Plane"* %68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* align 8 %70, i64 24, i1 false) #9
  %71 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %55, i64 -2, i32 0, i32 5
  %72 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %56, i64 -2, i32 0, i32 5
  %73 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %72, i64 0, i32 0, i32 0, i32 0
  %74 = bitcast %"class.std::__1::unique_ptr.75"* %72 to i64*
  %75 = load i64, i64* %74, align 8
  store i8* null, i8** %73, align 8
  %76 = bitcast %"class.std::__1::unique_ptr.75"* %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = icmp eq %"class.jxl::Plane"* %68, %11
  br i1 %77, label %78, label %54

78:                                               ; preds = %54, %49
  %79 = phi %"class.jxl::Plane"* [ %50, %49 ], [ %67, %54 ]
  %80 = ptrtoint %"class.jxl::Plane"* %79 to i64
  %81 = load i64, i64* %6, align 8
  %82 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %13, align 8
  %83 = inttoptr i64 %81 to %"class.jxl::Plane"*
  br label %84

84:                                               ; preds = %17, %78
  %85 = phi %"class.jxl::Plane"* [ %83, %78 ], [ %28, %17 ]
  %86 = phi %"class.jxl::Plane"* [ %82, %78 ], [ %11, %17 ]
  %87 = phi i64 [ %80, %78 ], [ %25, %17 ]
  %88 = phi i64 [ %81, %78 ], [ %18, %17 ]
  store i64 %87, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %89 = icmp eq %"class.jxl::Plane"* %86, %85
  br i1 %89, label %99, label %90

90:                                               ; preds = %84, %97
  %91 = phi %"class.jxl::Plane"* [ %92, %97 ], [ %86, %84 ]
  %92 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %91, i64 -1
  %93 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %91, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %94 = load i8*, i8** %93, align 8
  store i8* null, i8** %93, align 8
  %95 = icmp eq i8* %94, null
  br i1 %95, label %97, label %96

96:                                               ; preds = %90
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %94) #9
  br label %97

97:                                               ; preds = %96, %90
  %98 = icmp eq %"class.jxl::Plane"* %92, %85
  br i1 %98, label %99, label %90

99:                                               ; preds = %97, %84
  %100 = icmp eq i64 %88, 0
  br i1 %100, label %103, label %101

101:                                              ; preds = %99
  %102 = inttoptr i64 %88 to i8*
  tail call void @_ZdlPv(i8* %102) #11
  br label %103

103:                                              ; preds = %101, %99, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9CopyImageIfEENS_5PlaneIT_EERKS3_(%"class.jxl::Plane"* noalias sret, %"class.jxl::Plane"* dereferenceable(32)) local_unnamed_addr #0 comdat {
  %3 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 4
  %5 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 0
  %7 = bitcast %"class.jxl::Plane"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 32, i1 false)
  %8 = load i32, i32* %6, align 8
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0
  tail call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* %13, i64 %9, i64 %12, i64 4) #9
  %14 = load i32, i32* %6, align 8, !noalias !20
  %15 = load i32, i32* %3, align 8, !alias.scope !20
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %22

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %0, i64 0, i32 0, i32 1
  %19 = load i32, i32* %10, align 4, !noalias !20
  %20 = load i32, i32* %18, align 4, !alias.scope !20
  %21 = icmp eq i32 %19, %20
  br i1 %21, label %25, label %22

22:                                               ; preds = %17, %2
  %23 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.8, i64 0, i64 0), i32 34, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.10, i64 0, i64 0)) #9, !noalias !20
  %24 = tail call zeroext i1 @_ZN3jxl5AbortEv() #10, !noalias !20
  unreachable

25:                                               ; preds = %17
  %26 = icmp eq i32 %19, 0
  %27 = icmp eq i32 %14, 0
  %28 = or i1 %27, %26
  br i1 %28, label %66, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 4
  %32 = load i8*, i8** %5, align 8, !alias.scope !20
  %33 = load i64, i64* %4, align 8, !alias.scope !20
  %34 = load i8*, i8** %30, align 8, !noalias !20
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 63
  %37 = icmp eq i64 %36, 0
  tail call void @llvm.assume(i1 %37) #9, !noalias !20
  %38 = ptrtoint i8* %32 to i64
  %39 = and i64 %38, 63
  %40 = icmp eq i64 %39, 0
  tail call void @llvm.assume(i1 %40) #9, !noalias !20
  %41 = zext i32 %14 to i64
  %42 = shl nuw nsw i64 %41, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %32, i8* align 64 %34, i64 %42, i1 false) #9, !noalias !20
  %43 = load i32, i32* %10, align 4, !noalias !20
  %44 = icmp ugt i32 %43, 1
  br i1 %44, label %45, label %66

45:                                               ; preds = %29, %45
  %46 = phi i64 [ %62, %45 ], [ 1, %29 ]
  %47 = load i32, i32* %6, align 8, !noalias !20
  %48 = load i8*, i8** %30, align 8, !noalias !20
  %49 = load i64, i64* %31, align 8, !noalias !20
  %50 = mul i64 %49, %46
  %51 = getelementptr inbounds i8, i8* %48, i64 %50
  %52 = ptrtoint i8* %51 to i64
  %53 = and i64 %52, 63
  %54 = icmp eq i64 %53, 0
  tail call void @llvm.assume(i1 %54) #9, !noalias !20
  %55 = mul i64 %46, %33
  %56 = getelementptr inbounds i8, i8* %32, i64 %55
  %57 = ptrtoint i8* %56 to i64
  %58 = and i64 %57, 63
  %59 = icmp eq i64 %58, 0
  tail call void @llvm.assume(i1 %59) #9, !noalias !20
  %60 = zext i32 %47 to i64
  %61 = shl nuw nsw i64 %60, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 64 %56, i8* align 64 %51, i64 %61, i1 false) #9, !noalias !20
  %62 = add nuw nsw i64 %46, 1
  %63 = load i32, i32* %10, align 4, !noalias !20
  %64 = zext i32 %63 to i64
  %65 = icmp ult i64 %62, %64
  br i1 %65, label %45, label %66

66:                                               ; preds = %45, %29, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_6Image3IT_EES3_PS6_(%"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* dereferenceable(96), %"class.jxl::Rect"* dereferenceable(32), %"class.jxl::Image3"* noalias) local_unnamed_addr #0 comdat {
  %5 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %6, %8
  br i1 %9, label %10, label %24

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %12, %14
  br i1 %15, label %16, label %24

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 1
  %18 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %0, i64 0, i32 0
  %19 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 1
  %20 = getelementptr inbounds %"class.jxl::Rect", %"class.jxl::Rect"* %2, i64 0, i32 0
  %21 = icmp eq i64 %6, 0
  %22 = icmp eq i64 %12, 0
  %23 = or i1 %21, %22
  br i1 %23, label %66, label %27

24:                                               ; preds = %4, %10
  %25 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.8, i64 0, i64 0), i32 80, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0)) #9
  %26 = tail call zeroext i1 @_ZN3jxl5AbortEv() #10
  unreachable

27:                                               ; preds = %16
  %28 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %29 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 0, i32 0, i32 4
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8, !alias.scope !23
  %32 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 0, i32 0, i32 4
  %33 = load i64, i64* %32, align 8, !alias.scope !23
  br label %34

34:                                               ; preds = %34, %27
  %35 = phi i64 [ %6, %27 ], [ %65, %34 ]
  %36 = phi i64 [ 0, %27 ], [ %62, %34 ]
  %37 = load i64, i64* %17, align 8, !noalias !23
  %38 = add i64 %37, %36
  %39 = load i8*, i8** %28, align 8, !noalias !23
  %40 = load i64, i64* %29, align 8, !noalias !23
  %41 = mul i64 %40, %38
  %42 = getelementptr inbounds i8, i8* %39, i64 %41
  %43 = ptrtoint i8* %42 to i64
  %44 = and i64 %43, 63
  %45 = icmp eq i64 %44, 0
  tail call void @llvm.assume(i1 %45) #9, !noalias !23
  %46 = bitcast i8* %42 to float*
  %47 = load i64, i64* %18, align 8, !noalias !23
  %48 = getelementptr inbounds float, float* %46, i64 %47
  %49 = load i64, i64* %19, align 8, !noalias !23
  %50 = add i64 %49, %36
  %51 = mul i64 %50, %33
  %52 = getelementptr inbounds i8, i8* %31, i64 %51
  %53 = ptrtoint i8* %52 to i64
  %54 = and i64 %53, 63
  %55 = icmp eq i64 %54, 0
  tail call void @llvm.assume(i1 %55) #9, !noalias !23
  %56 = bitcast i8* %52 to float*
  %57 = load i64, i64* %20, align 8, !noalias !23
  %58 = getelementptr inbounds float, float* %56, i64 %57
  %59 = bitcast float* %58 to i8*
  %60 = bitcast float* %48 to i8*
  %61 = shl i64 %35, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %59, i8* align 4 %60, i64 %61, i1 false) #9, !noalias !23
  %62 = add nuw i64 %36, 1
  %63 = load i64, i64* %11, align 8, !noalias !23
  %64 = icmp ult i64 %62, %63
  %65 = load i64, i64* %5, align 8
  br i1 %64, label %34, label %66

66:                                               ; preds = %34, %16
  %67 = phi i64 [ %12, %16 ], [ %63, %34 ]
  %68 = phi i64 [ %6, %16 ], [ %65, %34 ]
  %69 = icmp eq i64 %68, 0
  %70 = icmp eq i64 %67, 0
  %71 = or i1 %69, %70
  br i1 %71, label %111, label %72

72:                                               ; preds = %66
  %73 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %74 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 1, i32 0, i32 4
  %75 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8, !alias.scope !23
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 1, i32 0, i32 4
  %78 = load i64, i64* %77, align 8, !alias.scope !23
  br label %79

79:                                               ; preds = %79, %72
  %80 = phi i64 [ %68, %72 ], [ %110, %79 ]
  %81 = phi i64 [ 0, %72 ], [ %107, %79 ]
  %82 = load i64, i64* %17, align 8, !noalias !23
  %83 = add i64 %82, %81
  %84 = load i8*, i8** %73, align 8, !noalias !23
  %85 = load i64, i64* %74, align 8, !noalias !23
  %86 = mul i64 %85, %83
  %87 = getelementptr inbounds i8, i8* %84, i64 %86
  %88 = ptrtoint i8* %87 to i64
  %89 = and i64 %88, 63
  %90 = icmp eq i64 %89, 0
  tail call void @llvm.assume(i1 %90) #9, !noalias !23
  %91 = bitcast i8* %87 to float*
  %92 = load i64, i64* %18, align 8, !noalias !23
  %93 = getelementptr inbounds float, float* %91, i64 %92
  %94 = load i64, i64* %19, align 8, !noalias !23
  %95 = add i64 %94, %81
  %96 = mul i64 %95, %78
  %97 = getelementptr inbounds i8, i8* %76, i64 %96
  %98 = ptrtoint i8* %97 to i64
  %99 = and i64 %98, 63
  %100 = icmp eq i64 %99, 0
  tail call void @llvm.assume(i1 %100) #9, !noalias !23
  %101 = bitcast i8* %97 to float*
  %102 = load i64, i64* %20, align 8, !noalias !23
  %103 = getelementptr inbounds float, float* %101, i64 %102
  %104 = bitcast float* %103 to i8*
  %105 = bitcast float* %93 to i8*
  %106 = shl i64 %80, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %104, i8* align 4 %105, i64 %106, i1 false) #9, !noalias !23
  %107 = add nuw i64 %81, 1
  %108 = load i64, i64* %11, align 8, !noalias !23
  %109 = icmp ult i64 %107, %108
  %110 = load i64, i64* %5, align 8
  br i1 %109, label %79, label %111

111:                                              ; preds = %79, %66
  %112 = phi i64 [ %67, %66 ], [ %108, %79 ]
  %113 = phi i64 [ %68, %66 ], [ %110, %79 ]
  %114 = icmp eq i64 %113, 0
  %115 = icmp eq i64 %112, 0
  %116 = or i1 %114, %115
  br i1 %116, label %157, label %117

117:                                              ; preds = %111
  %118 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %119 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %1, i64 0, i32 0, i64 2, i32 0, i32 4
  %120 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %121 = load i8*, i8** %120, align 8, !alias.scope !23
  %122 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %3, i64 0, i32 0, i64 2, i32 0, i32 4
  %123 = load i64, i64* %122, align 8, !alias.scope !23
  br label %124

124:                                              ; preds = %155, %117
  %125 = phi i64 [ %113, %117 ], [ %156, %155 ]
  %126 = phi i64 [ 0, %117 ], [ %152, %155 ]
  %127 = load i64, i64* %17, align 8, !noalias !23
  %128 = add i64 %127, %126
  %129 = load i8*, i8** %118, align 8, !noalias !23
  %130 = load i64, i64* %119, align 8, !noalias !23
  %131 = mul i64 %130, %128
  %132 = getelementptr inbounds i8, i8* %129, i64 %131
  %133 = ptrtoint i8* %132 to i64
  %134 = and i64 %133, 63
  %135 = icmp eq i64 %134, 0
  tail call void @llvm.assume(i1 %135) #9, !noalias !23
  %136 = bitcast i8* %132 to float*
  %137 = load i64, i64* %18, align 8, !noalias !23
  %138 = getelementptr inbounds float, float* %136, i64 %137
  %139 = load i64, i64* %19, align 8, !noalias !23
  %140 = add i64 %139, %126
  %141 = mul i64 %140, %123
  %142 = getelementptr inbounds i8, i8* %121, i64 %141
  %143 = ptrtoint i8* %142 to i64
  %144 = and i64 %143, 63
  %145 = icmp eq i64 %144, 0
  tail call void @llvm.assume(i1 %145) #9, !noalias !23
  %146 = bitcast i8* %142 to float*
  %147 = load i64, i64* %20, align 8, !noalias !23
  %148 = getelementptr inbounds float, float* %146, i64 %147
  %149 = bitcast float* %148 to i8*
  %150 = bitcast float* %138 to i8*
  %151 = shl i64 %125, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %149, i8* align 4 %150, i64 %151, i1 false) #9, !noalias !23
  %152 = add nuw i64 %126, 1
  %153 = load i64, i64* %11, align 8, !noalias !23
  %154 = icmp ult i64 %152, %153
  br i1 %154, label %155, label %157

155:                                              ; preds = %124
  %156 = load i64, i64* %5, align 8, !noalias !23
  br label %124

157:                                              ; preds = %124, %111
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl5PlaneIfEENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJS3_EEEvDpOT_(%"class.std::__1::vector.85"*, %"class.jxl::Plane"* dereferenceable(32)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.jxl::Plane"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.85"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 576460752303423487
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.85"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #10
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.jxl::Plane"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 5
  %20 = icmp ult i64 %19, 288230376151711743
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 4
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 576460752303423487
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #10
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 576460752303423487, %14 ]
  %31 = shl i64 %30, 5
  %32 = tail call i8* @_Znwm(i64 %31) #11
  %33 = bitcast i8* %32 to %"class.jxl::Plane"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"class.jxl::Plane"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 %9
  %38 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 %35
  %39 = ptrtoint %"class.jxl::Plane"* %38 to i64
  %40 = bitcast %"class.jxl::Plane"* %37 to i8*
  %41 = bitcast %"class.jxl::Plane"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 24, i1 false) #9
  %42 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %36, i64 %9, i32 0, i32 5
  %43 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 5
  %44 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %43, i64 0, i32 0, i32 0, i32 0
  %45 = bitcast %"class.std::__1::unique_ptr.75"* %43 to i64*
  %46 = load i64, i64* %45, align 8
  store i8* null, i8** %44, align 8
  %47 = bitcast %"class.std::__1::unique_ptr.75"* %42 to i64*
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 1
  %49 = ptrtoint %"class.jxl::Plane"* %48 to i64
  %50 = getelementptr inbounds %"class.std::__1::vector.85", %"class.std::__1::vector.85"* %0, i64 0, i32 0, i32 0
  %51 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %50, align 8
  %52 = ptrtoint %"class.jxl::Plane"* %51 to i64
  %53 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  %54 = icmp eq %"class.jxl::Plane"* %53, %51
  br i1 %54, label %105, label %55

55:                                               ; preds = %34
  %56 = getelementptr %"class.jxl::Plane", %"class.jxl::Plane"* %53, i64 -1, i32 0, i32 0
  %57 = ptrtoint i32* %56 to i64
  %58 = sub i64 %57, %52
  %59 = and i64 %58, 32
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %72

61:                                               ; preds = %55
  %62 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 -1
  %63 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %53, i64 -1
  %64 = bitcast %"class.jxl::Plane"* %62 to i8*
  %65 = bitcast %"class.jxl::Plane"* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %65, i64 24, i1 false) #9
  %66 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 -1, i32 0, i32 5
  %67 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %53, i64 -1, i32 0, i32 5
  %68 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %67, i64 0, i32 0, i32 0, i32 0
  %69 = bitcast %"class.std::__1::unique_ptr.75"* %67 to i64*
  %70 = load i64, i64* %69, align 8
  store i8* null, i8** %68, align 8
  %71 = bitcast %"class.std::__1::unique_ptr.75"* %66 to i64*
  store i64 %70, i64* %71, align 8
  br label %72

72:                                               ; preds = %61, %55
  %73 = phi %"class.jxl::Plane"* [ undef, %55 ], [ %62, %61 ]
  %74 = phi %"class.jxl::Plane"* [ %37, %55 ], [ %62, %61 ]
  %75 = phi %"class.jxl::Plane"* [ %53, %55 ], [ %63, %61 ]
  %76 = icmp ult i64 %58, 32
  br i1 %76, label %101, label %77

77:                                               ; preds = %72, %77
  %78 = phi %"class.jxl::Plane"* [ %90, %77 ], [ %74, %72 ]
  %79 = phi %"class.jxl::Plane"* [ %91, %77 ], [ %75, %72 ]
  %80 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -1
  %81 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -1
  %82 = bitcast %"class.jxl::Plane"* %80 to i8*
  %83 = bitcast %"class.jxl::Plane"* %81 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64 24, i1 false) #9
  %84 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -1, i32 0, i32 5
  %85 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -1, i32 0, i32 5
  %86 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %85, i64 0, i32 0, i32 0, i32 0
  %87 = bitcast %"class.std::__1::unique_ptr.75"* %85 to i64*
  %88 = load i64, i64* %87, align 8
  store i8* null, i8** %86, align 8
  %89 = bitcast %"class.std::__1::unique_ptr.75"* %84 to i64*
  store i64 %88, i64* %89, align 8
  %90 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -2
  %91 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -2
  %92 = bitcast %"class.jxl::Plane"* %90 to i8*
  %93 = bitcast %"class.jxl::Plane"* %91 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 24, i1 false) #9
  %94 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %78, i64 -2, i32 0, i32 5
  %95 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %79, i64 -2, i32 0, i32 5
  %96 = getelementptr inbounds %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.75"* %95, i64 0, i32 0, i32 0, i32 0
  %97 = bitcast %"class.std::__1::unique_ptr.75"* %95 to i64*
  %98 = load i64, i64* %97, align 8
  store i8* null, i8** %96, align 8
  %99 = bitcast %"class.std::__1::unique_ptr.75"* %94 to i64*
  store i64 %98, i64* %99, align 8
  %100 = icmp eq %"class.jxl::Plane"* %91, %51
  br i1 %100, label %101, label %77

101:                                              ; preds = %77, %72
  %102 = phi %"class.jxl::Plane"* [ %73, %72 ], [ %90, %77 ]
  %103 = load i64, i64* %6, align 8
  %104 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %3, align 8
  br label %105

105:                                              ; preds = %34, %101
  %106 = phi %"class.jxl::Plane"* [ %104, %101 ], [ %51, %34 ]
  %107 = phi %"class.jxl::Plane"* [ %102, %101 ], [ %37, %34 ]
  %108 = phi i64 [ %103, %101 ], [ %52, %34 ]
  %109 = ptrtoint %"class.jxl::Plane"* %107 to i64
  store i64 %109, i64* %6, align 8
  store i64 %49, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %110 = inttoptr i64 %108 to %"class.jxl::Plane"*
  %111 = icmp eq %"class.jxl::Plane"* %106, %110
  br i1 %111, label %121, label %112

112:                                              ; preds = %105, %119
  %113 = phi %"class.jxl::Plane"* [ %114, %119 ], [ %106, %105 ]
  %114 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %113, i64 -1
  %115 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %113, i64 -1, i32 0, i32 5, i32 0, i32 0, i32 0
  %116 = load i8*, i8** %115, align 8
  store i8* null, i8** %115, align 8
  %117 = icmp eq i8* %116, null
  br i1 %117, label %119, label %118

118:                                              ; preds = %112
  tail call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %116) #9
  br label %119

119:                                              ; preds = %118, %112
  %120 = icmp eq %"class.jxl::Plane"* %114, %110
  br i1 %120, label %121, label %112

121:                                              ; preds = %119, %105
  %122 = icmp eq i64 %108, 0
  br i1 %122, label %125, label %123

123:                                              ; preds = %121
  %124 = inttoptr i64 %108 to i8*
  tail call void @_ZdlPv(i8* %124) #11
  br label %125

125:                                              ; preds = %121, %123
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl4jpeg8JPEGDataC2ERKS1_(%"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"* dereferenceable(296)) unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3jxl4jpeg8JPEGDataE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 1
  %6 = bitcast i32* %4 to i8*
  %7 = bitcast i32* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 12, i1 false)
  %8 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 4
  %9 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 4
  tail call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_(%"class.std::__1::vector"* %8, %"class.std::__1::vector"* dereferenceable(24) %9)
  %10 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5
  %11 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 5
  %12 = bitcast %"class.std::__1::vector.10"* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #9
  %13 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 5, i32 0, i32 1
  %14 = bitcast i32** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.std::__1::vector.10"* %11 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %15, %17
  %19 = ashr exact i64 %18, 2
  %20 = icmp eq i64 %18, 0
  br i1 %20, label %48, label %21

21:                                               ; preds = %2
  %22 = icmp ugt i64 %19, 4611686018427387903
  br i1 %22, label %23, label %25

23:                                               ; preds = %21
  %24 = bitcast %"class.std::__1::vector.10"* %10 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %24) #10
  unreachable

25:                                               ; preds = %21
  %26 = tail call i8* @_Znwm(i64 %18) #11
  %27 = bitcast i8* %26 to i32*
  %28 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5, i32 0, i32 1
  %29 = bitcast i32** %28 to i8**
  store i8* %26, i8** %29, align 8
  %30 = bitcast %"class.std::__1::vector.10"* %10 to i8**
  store i8* %26, i8** %30, align 8
  %31 = getelementptr inbounds i32, i32* %27, i64 %19
  %32 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  store i32* %31, i32** %32, align 8
  %33 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %11, i64 0, i32 0, i32 0
  %34 = load i32*, i32** %33, align 8
  %35 = load i64, i64* %14, align 8
  %36 = bitcast i32** %28 to i64*
  %37 = ptrtoint i8* %26 to i64
  %38 = ptrtoint i32* %34 to i64
  %39 = sub i64 %35, %38
  %40 = icmp sgt i64 %39, 0
  br i1 %40, label %41, label %46

41:                                               ; preds = %25
  %42 = lshr exact i64 %39, 2
  %43 = bitcast i32* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %26, i8* align 4 %43, i64 %39, i1 false) #9
  %44 = getelementptr inbounds i32, i32* %27, i64 %42
  %45 = ptrtoint i32* %44 to i64
  br label %46

46:                                               ; preds = %41, %25
  %47 = phi i64 [ %45, %41 ], [ %37, %25 ]
  store i64 %47, i64* %36, align 8
  br label %48

48:                                               ; preds = %2, %46
  %49 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 6
  %50 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 6
  tail call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_(%"class.std::__1::vector"* %49, %"class.std::__1::vector"* dereferenceable(24) %50)
  %51 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 7
  %52 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 7
  %53 = bitcast %"class.std::__1::vector.17"* %51 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 24, i1 false) #9
  %54 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 7, i32 0, i32 1
  %55 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"** %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = bitcast %"class.std::__1::vector.17"* %52 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = sub i64 %56, %58
  %60 = sdiv exact i64 %59, 268
  %61 = icmp eq i64 %59, 0
  br i1 %61, label %89, label %62

62:                                               ; preds = %48
  %63 = icmp ugt i64 %60, 68831134603393849
  br i1 %63, label %64, label %66

64:                                               ; preds = %62
  %65 = bitcast %"class.std::__1::vector.17"* %51 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %65) #10
  unreachable

66:                                               ; preds = %62
  %67 = tail call i8* @_Znwm(i64 %59) #11
  %68 = bitcast i8* %67 to %"struct.jxl::jpeg::JPEGQuantTable"*
  %69 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 7, i32 0, i32 1
  %70 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"** %69 to i8**
  store i8* %67, i8** %70, align 8
  %71 = bitcast %"class.std::__1::vector.17"* %51 to i8**
  store i8* %67, i8** %71, align 8
  %72 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %68, i64 %60
  %73 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 7, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::jpeg::JPEGQuantTable"* %72, %"struct.jxl::jpeg::JPEGQuantTable"** %73, align 8
  %74 = getelementptr inbounds %"class.std::__1::vector.17", %"class.std::__1::vector.17"* %52, i64 0, i32 0, i32 0
  %75 = load %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"** %74, align 8
  %76 = load i64, i64* %55, align 8
  %77 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"** %69 to i64*
  %78 = ptrtoint i8* %67 to i64
  %79 = ptrtoint %"struct.jxl::jpeg::JPEGQuantTable"* %75 to i64
  %80 = sub i64 %76, %79
  %81 = icmp sgt i64 %80, 0
  br i1 %81, label %82, label %87

82:                                               ; preds = %66
  %83 = udiv exact i64 %80, 268
  %84 = bitcast %"struct.jxl::jpeg::JPEGQuantTable"* %75 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %67, i8* align 4 %84, i64 %80, i1 false) #9
  %85 = getelementptr inbounds %"struct.jxl::jpeg::JPEGQuantTable", %"struct.jxl::jpeg::JPEGQuantTable"* %68, i64 %83
  %86 = ptrtoint %"struct.jxl::jpeg::JPEGQuantTable"* %85 to i64
  br label %87

87:                                               ; preds = %82, %66
  %88 = phi i64 [ %86, %82 ], [ %78, %66 ]
  store i64 %88, i64* %77, align 8
  br label %89

89:                                               ; preds = %48, %87
  %90 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 8
  %91 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 8
  %92 = bitcast %"class.std::__1::vector.24"* %90 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %92, i8 0, i64 24, i1 false) #9
  %93 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 8, i32 0, i32 1
  %94 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"** %93 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = bitcast %"class.std::__1::vector.24"* %91 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = sub i64 %95, %97
  %99 = sdiv exact i64 %98, 1104
  %100 = icmp eq i64 %98, 0
  br i1 %100, label %128, label %101

101:                                              ; preds = %89
  %102 = icmp ugt i64 %99, 16709007313142709
  br i1 %102, label %103, label %105

103:                                              ; preds = %101
  %104 = bitcast %"class.std::__1::vector.24"* %90 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %104) #10
  unreachable

105:                                              ; preds = %101
  %106 = tail call i8* @_Znwm(i64 %98) #11
  %107 = bitcast i8* %106 to %"struct.jxl::jpeg::JPEGHuffmanCode"*
  %108 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 8, i32 0, i32 1
  %109 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"** %108 to i8**
  store i8* %106, i8** %109, align 8
  %110 = bitcast %"class.std::__1::vector.24"* %90 to i8**
  store i8* %106, i8** %110, align 8
  %111 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %107, i64 %99
  %112 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::jpeg::JPEGHuffmanCode"* %111, %"struct.jxl::jpeg::JPEGHuffmanCode"** %112, align 8
  %113 = getelementptr inbounds %"class.std::__1::vector.24", %"class.std::__1::vector.24"* %91, i64 0, i32 0, i32 0
  %114 = load %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"** %113, align 8
  %115 = load i64, i64* %94, align 8
  %116 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"** %108 to i64*
  %117 = ptrtoint i8* %106 to i64
  %118 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %114 to i64
  %119 = sub i64 %115, %118
  %120 = icmp sgt i64 %119, 0
  br i1 %120, label %121, label %126

121:                                              ; preds = %105
  %122 = udiv exact i64 %119, 1104
  %123 = bitcast %"struct.jxl::jpeg::JPEGHuffmanCode"* %114 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %106, i8* align 4 %123, i64 %119, i1 false) #9
  %124 = getelementptr inbounds %"struct.jxl::jpeg::JPEGHuffmanCode", %"struct.jxl::jpeg::JPEGHuffmanCode"* %107, i64 %122
  %125 = ptrtoint %"struct.jxl::jpeg::JPEGHuffmanCode"* %124 to i64
  br label %126

126:                                              ; preds = %121, %105
  %127 = phi i64 [ %125, %121 ], [ %117, %105 ]
  store i64 %127, i64* %116, align 8
  br label %128

128:                                              ; preds = %89, %126
  %129 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 9
  %130 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 9
  tail call void @_ZNSt3__16vectorIN3jxl4jpeg13JPEGComponentENS_9allocatorIS3_EEEC2ERKS6_(%"class.std::__1::vector.33"* %129, %"class.std::__1::vector.33"* dereferenceable(24) %130)
  %131 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10
  %132 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 10
  %133 = bitcast %"class.std::__1::vector.47"* %131 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %133, i8 0, i64 24, i1 false) #9
  %134 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 10, i32 0, i32 1
  %135 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"** %134 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = bitcast %"class.std::__1::vector.47"* %132 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = sub i64 %136, %138
  %140 = sdiv exact i64 %139, 120
  %141 = icmp eq i64 %139, 0
  br i1 %141, label %172, label %142

142:                                              ; preds = %128
  %143 = icmp ugt i64 %140, 153722867280912930
  br i1 %143, label %144, label %146

144:                                              ; preds = %142
  %145 = bitcast %"class.std::__1::vector.47"* %131 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %145) #10
  unreachable

146:                                              ; preds = %142
  %147 = tail call i8* @_Znwm(i64 %139) #11
  %148 = bitcast i8* %147 to %"struct.jxl::jpeg::JPEGScanInfo"*
  %149 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10, i32 0, i32 1
  %150 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"** %149 to i8**
  store i8* %147, i8** %150, align 8
  %151 = bitcast %"class.std::__1::vector.47"* %131 to i8**
  store i8* %147, i8** %151, align 8
  %152 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %148, i64 %140
  %153 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::jpeg::JPEGScanInfo"* %152, %"struct.jxl::jpeg::JPEGScanInfo"** %153, align 8
  %154 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %132, i64 0, i32 0, i32 0
  %155 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %154, align 8
  %156 = load %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"** %134, align 8
  %157 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"** %149 to i64*
  %158 = ptrtoint i8* %147 to i64
  %159 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 10, i32 0, i32 2
  %160 = bitcast %"class.std::__1::__compressed_pair.64"* %159 to %"class.std::__1::allocator.67"*
  %161 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %155, %156
  br i1 %161, label %170, label %162

162:                                              ; preds = %146, %162
  %163 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %166, %162 ], [ %148, %146 ]
  %164 = phi %"struct.jxl::jpeg::JPEGScanInfo"* [ %165, %162 ], [ %155, %146 ]
  tail call void @_ZNSt3__19allocatorIN3jxl4jpeg12JPEGScanInfoEE9constructIS3_JRS3_EEEvPT_DpOT0_(%"class.std::__1::allocator.67"* %160, %"struct.jxl::jpeg::JPEGScanInfo"* %163, %"struct.jxl::jpeg::JPEGScanInfo"* dereferenceable(120) %164) #9
  %165 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %164, i64 1
  %166 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %163, i64 1
  %167 = icmp eq %"struct.jxl::jpeg::JPEGScanInfo"* %165, %156
  br i1 %167, label %168, label %162

168:                                              ; preds = %162
  %169 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo"* %166 to i64
  br label %170

170:                                              ; preds = %168, %146
  %171 = phi i64 [ %158, %146 ], [ %169, %168 ]
  store i64 %171, i64* %157, align 8
  br label %172

172:                                              ; preds = %128, %170
  %173 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11
  %174 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 11
  %175 = bitcast %"class.std::__1::vector.0"* %173 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %175, i8 0, i64 24, i1 false) #9
  %176 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 11, i32 0, i32 1
  %177 = bitcast i8** %176 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = bitcast %"class.std::__1::vector.0"* %174 to i64*
  %180 = load i64, i64* %179, align 8
  %181 = sub i64 %178, %180
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %205, label %183

183:                                              ; preds = %172
  %184 = icmp slt i64 %181, 0
  br i1 %184, label %185, label %187

185:                                              ; preds = %183
  %186 = bitcast %"class.std::__1::vector.0"* %173 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %186) #10
  unreachable

187:                                              ; preds = %183
  %188 = tail call i8* @_Znwm(i64 %181) #11
  %189 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11, i32 0, i32 1
  store i8* %188, i8** %189, align 8
  %190 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %173, i64 0, i32 0, i32 0
  store i8* %188, i8** %190, align 8
  %191 = getelementptr inbounds i8, i8* %188, i64 %181
  %192 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 11, i32 0, i32 2, i32 0, i32 0
  store i8* %191, i8** %192, align 8
  %193 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %174, i64 0, i32 0, i32 0
  %194 = load i8*, i8** %193, align 8
  %195 = load i64, i64* %177, align 8
  %196 = bitcast i8** %189 to i64*
  %197 = ptrtoint i8* %194 to i64
  %198 = sub i64 %195, %197
  %199 = icmp sgt i64 %198, 0
  br i1 %199, label %200, label %202

200:                                              ; preds = %187
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %188, i8* align 1 %194, i64 %198, i1 false) #9
  %201 = getelementptr inbounds i8, i8* %188, i64 %198
  br label %202

202:                                              ; preds = %200, %187
  %203 = phi i8* [ %201, %200 ], [ %188, %187 ]
  %204 = ptrtoint i8* %203 to i64
  store i64 %204, i64* %196, align 8
  br label %205

205:                                              ; preds = %172, %202
  %206 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 12
  %207 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 12
  tail call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_(%"class.std::__1::vector"* %206, %"class.std::__1::vector"* dereferenceable(24) %207)
  %208 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 13
  %209 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 13
  %210 = bitcast %"class.std::__1::vector.0"* %208 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %210, i8 0, i64 24, i1 false) #9
  %211 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 13, i32 0, i32 1
  %212 = bitcast i8** %211 to i64*
  %213 = load i64, i64* %212, align 8
  %214 = bitcast %"class.std::__1::vector.0"* %209 to i64*
  %215 = load i64, i64* %214, align 8
  %216 = sub i64 %213, %215
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %240, label %218

218:                                              ; preds = %205
  %219 = icmp slt i64 %216, 0
  br i1 %219, label %220, label %222

220:                                              ; preds = %218
  %221 = bitcast %"class.std::__1::vector.0"* %208 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %221) #10
  unreachable

222:                                              ; preds = %218
  %223 = tail call i8* @_Znwm(i64 %216) #11
  %224 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 13, i32 0, i32 1
  store i8* %223, i8** %224, align 8
  %225 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %208, i64 0, i32 0, i32 0
  store i8* %223, i8** %225, align 8
  %226 = getelementptr inbounds i8, i8* %223, i64 %216
  %227 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 13, i32 0, i32 2, i32 0, i32 0
  store i8* %226, i8** %227, align 8
  %228 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %209, i64 0, i32 0, i32 0
  %229 = load i8*, i8** %228, align 8
  %230 = load i64, i64* %212, align 8
  %231 = bitcast i8** %224 to i64*
  %232 = ptrtoint i8* %229 to i64
  %233 = sub i64 %230, %232
  %234 = icmp sgt i64 %233, 0
  br i1 %234, label %235, label %237

235:                                              ; preds = %222
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %223, i8* align 1 %229, i64 %233, i1 false) #9
  %236 = getelementptr inbounds i8, i8* %223, i64 %233
  br label %237

237:                                              ; preds = %235, %222
  %238 = phi i8* [ %236, %235 ], [ %223, %222 ]
  %239 = ptrtoint i8* %238 to i64
  store i64 %239, i64* %231, align 8
  br label %240

240:                                              ; preds = %205, %237
  %241 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 14
  %242 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 14
  %243 = bitcast i32* %241 to i8*
  %244 = bitcast i32* %242 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %243, i8* align 8 %244, i64 5, i1 false)
  %245 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 16
  %246 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 16
  %247 = bitcast %"class.std::__1::vector.0"* %245 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %247, i8 0, i64 24, i1 false) #9
  %248 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %1, i64 0, i32 16, i32 0, i32 1
  %249 = bitcast i8** %248 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = bitcast %"class.std::__1::vector.0"* %246 to i64*
  %252 = load i64, i64* %251, align 8
  %253 = sub i64 %250, %252
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %277, label %255

255:                                              ; preds = %240
  %256 = icmp slt i64 %253, 0
  br i1 %256, label %257, label %259

257:                                              ; preds = %255
  %258 = bitcast %"class.std::__1::vector.0"* %245 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %258) #10
  unreachable

259:                                              ; preds = %255
  %260 = tail call i8* @_Znwm(i64 %253) #11
  %261 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 16, i32 0, i32 1
  store i8* %260, i8** %261, align 8
  %262 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %245, i64 0, i32 0, i32 0
  store i8* %260, i8** %262, align 8
  %263 = getelementptr inbounds i8, i8* %260, i64 %253
  %264 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %0, i64 0, i32 16, i32 0, i32 2, i32 0, i32 0
  store i8* %263, i8** %264, align 8
  %265 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %246, i64 0, i32 0, i32 0
  %266 = load i8*, i8** %265, align 8
  %267 = load i64, i64* %249, align 8
  %268 = bitcast i8** %261 to i64*
  %269 = ptrtoint i8* %266 to i64
  %270 = sub i64 %267, %269
  %271 = icmp sgt i64 %270, 0
  br i1 %271, label %272, label %274

272:                                              ; preds = %259
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %260, i8* align 1 %266, i64 %270, i1 false) #9
  %273 = getelementptr inbounds i8, i8* %260, i64 %270
  br label %274

274:                                              ; preds = %272, %259
  %275 = phi i8* [ %273, %272 ], [ %260, %259 ]
  %276 = ptrtoint i8* %275 to i64
  store i64 %276, i64* %268, align 8
  br label %277

277:                                              ; preds = %240, %274
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEEC2ERKS5_(%"class.std::__1::vector"*, %"class.std::__1::vector"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #9
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %5 = bitcast %"class.std::__1::vector.0"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %73, label %12

12:                                               ; preds = %2
  %13 = icmp ugt i64 %10, 768614336404564650
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #10
  unreachable

16:                                               ; preds = %12
  %17 = tail call i8* @_Znwm(i64 %9) #11
  %18 = bitcast i8* %17 to %"class.std::__1::vector.0"*
  %19 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %20 = bitcast %"class.std::__1::vector.0"** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %18, i64 %10
  %23 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"class.std::__1::vector.0"* %22, %"class.std::__1::vector.0"** %23, align 8
  %24 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %25 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %24, align 8
  %26 = load %"class.std::__1::vector.0"*, %"class.std::__1::vector.0"** %4, align 8
  %27 = bitcast %"class.std::__1::vector.0"** %19 to i64*
  %28 = ptrtoint i8* %17 to i64
  %29 = icmp eq %"class.std::__1::vector.0"* %25, %26
  br i1 %29, label %71, label %30

30:                                               ; preds = %16
  %31 = bitcast i8* %17 to %"class.std::__1::vector.0"*
  br label %32

32:                                               ; preds = %65, %30
  %33 = phi %"class.std::__1::vector.0"* [ %67, %65 ], [ %31, %30 ]
  %34 = phi %"class.std::__1::vector.0"* [ %66, %65 ], [ %25, %30 ]
  %35 = bitcast %"class.std::__1::vector.0"* %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 24, i1 false) #9
  %36 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %34, i64 0, i32 0, i32 1
  %37 = bitcast i8** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.std::__1::vector.0"* %34 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %65, label %43

43:                                               ; preds = %32
  %44 = icmp slt i64 %41, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %43
  %46 = bitcast %"class.std::__1::vector.0"* %33 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %46) #10
  unreachable

47:                                               ; preds = %43
  %48 = tail call i8* @_Znwm(i64 %41) #11
  %49 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %33, i64 0, i32 0, i32 1
  store i8* %48, i8** %49, align 8
  %50 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %33, i64 0, i32 0, i32 0
  store i8* %48, i8** %50, align 8
  %51 = getelementptr inbounds i8, i8* %48, i64 %41
  %52 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %33, i64 0, i32 0, i32 2, i32 0, i32 0
  store i8* %51, i8** %52, align 8
  %53 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %34, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %37, align 8
  %56 = bitcast i8** %49 to i64*
  %57 = ptrtoint i8* %54 to i64
  %58 = sub i64 %55, %57
  %59 = icmp sgt i64 %58, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %47
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %48, i8* align 1 %54, i64 %58, i1 false) #9
  %61 = getelementptr inbounds i8, i8* %48, i64 %58
  br label %62

62:                                               ; preds = %60, %47
  %63 = phi i8* [ %61, %60 ], [ %48, %47 ]
  %64 = ptrtoint i8* %63 to i64
  store i64 %64, i64* %56, align 8
  br label %65

65:                                               ; preds = %62, %32
  %66 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %34, i64 1
  %67 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %33, i64 1
  %68 = icmp eq %"class.std::__1::vector.0"* %66, %26
  br i1 %68, label %69, label %32

69:                                               ; preds = %65
  %70 = ptrtoint %"class.std::__1::vector.0"* %67 to i64
  br label %71

71:                                               ; preds = %16, %69
  %72 = phi i64 [ %28, %16 ], [ %70, %69 ]
  store i64 %72, i64* %27, align 8
  br label %73

73:                                               ; preds = %2, %71
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl4jpeg13JPEGComponentENS_9allocatorIS3_EEEC2ERKS6_(%"class.std::__1::vector.33"*, %"class.std::__1::vector.33"* dereferenceable(24)) unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.std::__1::vector.33"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #9
  %4 = getelementptr inbounds %"class.std::__1::vector.33", %"class.std::__1::vector.33"* %1, i64 0, i32 0, i32 1
  %5 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.33"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = sdiv exact i64 %9, 48
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %83, label %12

12:                                               ; preds = %2
  %13 = icmp ugt i64 %10, 384307168202282325
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"class.std::__1::vector.33"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #10
  unreachable

16:                                               ; preds = %12
  %17 = tail call i8* @_Znwm(i64 %9) #11
  %18 = bitcast i8* %17 to %"struct.jxl::jpeg::JPEGComponent"*
  %19 = getelementptr inbounds %"class.std::__1::vector.33", %"class.std::__1::vector.33"* %0, i64 0, i32 0, i32 1
  %20 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = bitcast %"class.std::__1::vector.33"* %0 to i8**
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %18, i64 %10
  %23 = getelementptr inbounds %"class.std::__1::vector.33", %"class.std::__1::vector.33"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::jpeg::JPEGComponent"* %22, %"struct.jxl::jpeg::JPEGComponent"** %23, align 8
  %24 = getelementptr inbounds %"class.std::__1::vector.33", %"class.std::__1::vector.33"* %1, i64 0, i32 0, i32 0
  %25 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %24, align 8
  %26 = load %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"** %4, align 8
  %27 = bitcast %"struct.jxl::jpeg::JPEGComponent"** %19 to i64*
  %28 = ptrtoint i8* %17 to i64
  %29 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %25, %26
  br i1 %29, label %81, label %30

30:                                               ; preds = %16
  %31 = bitcast i8* %17 to %"struct.jxl::jpeg::JPEGComponent"*
  br label %32

32:                                               ; preds = %75, %30
  %33 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %77, %75 ], [ %31, %30 ]
  %34 = phi %"struct.jxl::jpeg::JPEGComponent"* [ %76, %75 ], [ %25, %30 ]
  %35 = bitcast %"struct.jxl::jpeg::JPEGComponent"* %33 to i8*
  %36 = bitcast %"struct.jxl::jpeg::JPEGComponent"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 24, i1 false) #9
  %37 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %33, i64 0, i32 6
  %38 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %34, i64 0, i32 6
  %39 = bitcast %"class.std::__1::vector.35"* %37 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %39, i8 0, i64 24, i1 false) #9
  %40 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %34, i64 0, i32 6, i32 0, i32 1
  %41 = bitcast i16** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.std::__1::vector.35"* %38 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = sub i64 %42, %44
  %46 = ashr exact i64 %45, 1
  %47 = icmp eq i64 %45, 0
  br i1 %47, label %75, label %48

48:                                               ; preds = %32
  %49 = icmp slt i64 %45, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %48
  %51 = bitcast %"class.std::__1::vector.35"* %37 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %51) #10
  unreachable

52:                                               ; preds = %48
  %53 = tail call i8* @_Znwm(i64 %45) #11
  %54 = bitcast i8* %53 to i16*
  %55 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %33, i64 0, i32 6, i32 0, i32 1
  %56 = bitcast i16** %55 to i8**
  store i8* %53, i8** %56, align 8
  %57 = bitcast %"class.std::__1::vector.35"* %37 to i8**
  store i8* %53, i8** %57, align 8
  %58 = getelementptr inbounds i16, i16* %54, i64 %46
  %59 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %33, i64 0, i32 6, i32 0, i32 2, i32 0, i32 0
  store i16* %58, i16** %59, align 8
  %60 = getelementptr inbounds %"class.std::__1::vector.35", %"class.std::__1::vector.35"* %38, i64 0, i32 0, i32 0
  %61 = load i16*, i16** %60, align 8
  %62 = load i64, i64* %41, align 8
  %63 = bitcast i16** %55 to i64*
  %64 = ptrtoint i8* %53 to i64
  %65 = ptrtoint i16* %61 to i64
  %66 = sub i64 %62, %65
  %67 = icmp sgt i64 %66, 0
  br i1 %67, label %68, label %73

68:                                               ; preds = %52
  %69 = lshr exact i64 %66, 1
  %70 = bitcast i16* %61 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %53, i8* align 2 %70, i64 %66, i1 false) #9
  %71 = getelementptr inbounds i16, i16* %54, i64 %69
  %72 = ptrtoint i16* %71 to i64
  br label %73

73:                                               ; preds = %68, %52
  %74 = phi i64 [ %72, %68 ], [ %64, %52 ]
  store i64 %74, i64* %63, align 8
  br label %75

75:                                               ; preds = %73, %32
  %76 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %34, i64 1
  %77 = getelementptr inbounds %"struct.jxl::jpeg::JPEGComponent", %"struct.jxl::jpeg::JPEGComponent"* %33, i64 1
  %78 = icmp eq %"struct.jxl::jpeg::JPEGComponent"* %76, %26
  br i1 %78, label %79, label %32

79:                                               ; preds = %75
  %80 = ptrtoint %"struct.jxl::jpeg::JPEGComponent"* %77 to i64
  br label %81

81:                                               ; preds = %16, %79
  %82 = phi i64 [ %28, %16 ], [ %80, %79 ]
  store i64 %82, i64* %27, align 8
  br label %83

83:                                               ; preds = %2, %81
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__19allocatorIN3jxl4jpeg12JPEGScanInfoEE9constructIS3_JRS3_EEEvPT_DpOT0_(%"class.std::__1::allocator.67"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"* dereferenceable(120)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"* %1 to i8*
  %5 = bitcast %"struct.jxl::jpeg::JPEGScanInfo"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 72, i1 false) #9
  %6 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 7
  %7 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %2, i64 0, i32 7
  %8 = bitcast %"class.std::__1::vector.50"* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #9
  %9 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %2, i64 0, i32 7, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector.50"* %7 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = ashr exact i64 %14, 2
  %16 = icmp eq i64 %14, 0
  br i1 %16, label %44, label %17

17:                                               ; preds = %3
  %18 = icmp ugt i64 %15, 4611686018427387903
  br i1 %18, label %19, label %21

19:                                               ; preds = %17
  %20 = bitcast %"class.std::__1::vector.50"* %6 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %20) #10
  unreachable

21:                                               ; preds = %17
  %22 = tail call i8* @_Znwm(i64 %14) #11
  %23 = bitcast i8* %22 to i32*
  %24 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 7, i32 0, i32 1
  %25 = bitcast i32** %24 to i8**
  store i8* %22, i8** %25, align 8
  %26 = bitcast %"class.std::__1::vector.50"* %6 to i8**
  store i8* %22, i8** %26, align 8
  %27 = getelementptr inbounds i32, i32* %23, i64 %15
  %28 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 7, i32 0, i32 2, i32 0, i32 0
  store i32* %27, i32** %28, align 8
  %29 = getelementptr inbounds %"class.std::__1::vector.50", %"class.std::__1::vector.50"* %7, i64 0, i32 0, i32 0
  %30 = load i32*, i32** %29, align 8
  %31 = load i64, i64* %10, align 8
  %32 = bitcast i32** %24 to i64*
  %33 = ptrtoint i8* %22 to i64
  %34 = ptrtoint i32* %30 to i64
  %35 = sub i64 %31, %34
  %36 = icmp sgt i64 %35, 0
  br i1 %36, label %37, label %42

37:                                               ; preds = %21
  %38 = lshr exact i64 %35, 2
  %39 = bitcast i32* %30 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %22, i8* align 4 %39, i64 %35, i1 false) #9
  %40 = getelementptr inbounds i32, i32* %23, i64 %38
  %41 = ptrtoint i32* %40 to i64
  br label %42

42:                                               ; preds = %37, %21
  %43 = phi i64 [ %41, %37 ], [ %33, %21 ]
  store i64 %43, i64* %32, align 8
  br label %44

44:                                               ; preds = %42, %3
  %45 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 8
  %46 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %2, i64 0, i32 8
  %47 = bitcast %"class.std::__1::vector.57"* %45 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 24, i1 false) #9
  %48 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %2, i64 0, i32 8, i32 0, i32 1
  %49 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = bitcast %"class.std::__1::vector.57"* %46 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %50, %52
  %54 = ashr exact i64 %53, 3
  %55 = icmp eq i64 %53, 0
  br i1 %55, label %83, label %56

56:                                               ; preds = %44
  %57 = icmp ugt i64 %54, 2305843009213693951
  br i1 %57, label %58, label %60

58:                                               ; preds = %56
  %59 = bitcast %"class.std::__1::vector.57"* %45 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %59) #10
  unreachable

60:                                               ; preds = %56
  %61 = tail call i8* @_Znwm(i64 %53) #11
  %62 = bitcast i8* %61 to %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*
  %63 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 8, i32 0, i32 1
  %64 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %63 to i8**
  store i8* %61, i8** %64, align 8
  %65 = bitcast %"class.std::__1::vector.57"* %45 to i8**
  store i8* %61, i8** %65, align 8
  %66 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %62, i64 %54
  %67 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo", %"struct.jxl::jpeg::JPEGScanInfo"* %1, i64 0, i32 8, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %66, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %67, align 8
  %68 = getelementptr inbounds %"class.std::__1::vector.57", %"class.std::__1::vector.57"* %46, i64 0, i32 0, i32 0
  %69 = load %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %68, align 8
  %70 = load i64, i64* %49, align 8
  %71 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"** %63 to i64*
  %72 = ptrtoint i8* %61 to i64
  %73 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %69 to i64
  %74 = sub i64 %70, %73
  %75 = icmp sgt i64 %74, 0
  br i1 %75, label %76, label %81

76:                                               ; preds = %60
  %77 = lshr exact i64 %74, 3
  %78 = bitcast %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %69 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %61, i8* align 4 %78, i64 %74, i1 false) #9
  %79 = getelementptr inbounds %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo", %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %62, i64 %77
  %80 = ptrtoint %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* %79 to i64
  br label %81

81:                                               ; preds = %76, %60
  %82 = phi i64 [ %80, %76 ], [ %72, %60 ]
  store i64 %82, i64* %71, align 8
  br label %83

83:                                               ; preds = %44, %81
  ret void
}

declare %"class.jxl::Plane"* @_ZN3jxl11ImageBundle5alphaEv(%"class.jxl::ImageBundle"*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #8

; Function Attrs: nounwind
declare void @llvm.assume(i1) #9

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #2

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = !{!9}
!9 = distinct !{!9, !5}
!10 = !{!4, !7}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.isvectorized", i32 1}
!13 = distinct !{!13, !12}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN3jxl9CopyImageIfEENS_6Image3IT_EERKS3_: argument 0"}
!16 = distinct !{!16, !"_ZN3jxl9CopyImageIfEENS_6Image3IT_EERKS3_"}
!17 = !{!18, !15}
!18 = distinct !{!18, !19, !"_ZN3jxl11CopyImageToINS_6Image3IfEEEEvRKT_PS3_: argument 0"}
!19 = distinct !{!19, !"_ZN3jxl11CopyImageToINS_6Image3IfEEEEvRKT_PS3_"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_: argument 0"}
!22 = distinct !{!22, !"_ZN3jxl11CopyImageToIfEEvRKNS_5PlaneIT_EEPS3_"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_5PlaneIT_EES3_PS6_: argument 0"}
!25 = distinct !{!25, !"_ZN3jxl11CopyImageToIfEEvRKNS_4RectERKNS_5PlaneIT_EES3_PS6_"}
