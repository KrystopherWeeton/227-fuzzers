; ModuleID = '../../third_party/ffmpeg/libavcodec/autorename_libavcodec_videodsp.c'
source_filename = "../../third_party/ffmpeg/libavcodec/autorename_libavcodec_videodsp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.VideoDSPContext = type { void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)*, void (i8*, i64, i32)* }

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_emulated_edge_mc_8(i8* nocapture, i8* nocapture readonly, i64, i64, i32, i32, i32, i32, i32, i32) #0 {
  %11 = icmp ne i32 %8, 0
  %12 = icmp ne i32 %9, 0
  %13 = and i1 %11, %12
  br i1 %13, label %14, label %202

14:                                               ; preds = %10
  %15 = icmp slt i32 %7, %9
  br i1 %15, label %25, label %16

16:                                               ; preds = %14
  %17 = sext i32 %7 to i64
  %18 = mul i64 %17, %3
  %19 = sub i64 0, %18
  %20 = getelementptr inbounds i8, i8* %1, i64 %19
  %21 = add nsw i32 %9, -1
  %22 = sext i32 %21 to i64
  %23 = mul nsw i64 %22, %3
  %24 = getelementptr inbounds i8, i8* %20, i64 %23
  br label %37

25:                                               ; preds = %14
  %26 = sub nsw i32 0, %5
  %27 = icmp slt i32 %26, %7
  br i1 %27, label %37, label %28

28:                                               ; preds = %25
  %29 = sext i32 %7 to i64
  %30 = mul i64 %29, %3
  %31 = sub i64 0, %30
  %32 = getelementptr inbounds i8, i8* %1, i64 %31
  %33 = sub nsw i32 1, %5
  %34 = sext i32 %33 to i64
  %35 = mul nsw i64 %34, %3
  %36 = getelementptr inbounds i8, i8* %32, i64 %35
  br label %37

37:                                               ; preds = %25, %28, %16
  %38 = phi i8* [ %24, %16 ], [ %36, %28 ], [ %1, %25 ]
  %39 = phi i32 [ %21, %16 ], [ %33, %28 ], [ %7, %25 ]
  %40 = icmp slt i32 %6, %8
  br i1 %40, label %48, label %41

41:                                               ; preds = %37
  %42 = add nsw i32 %6, 1
  %43 = sub i32 %42, %8
  %44 = sext i32 %43 to i64
  %45 = sub nsw i64 0, %44
  %46 = getelementptr inbounds i8, i8* %38, i64 %45
  %47 = add nsw i32 %8, -1
  br label %56

48:                                               ; preds = %37
  %49 = sub nsw i32 0, %4
  %50 = icmp slt i32 %49, %6
  br i1 %50, label %56, label %51

51:                                               ; preds = %48
  %52 = sub nsw i32 1, %4
  %53 = sub nsw i32 %52, %6
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %38, i64 %54
  br label %56

56:                                               ; preds = %48, %51, %41
  %57 = phi i8* [ %46, %41 ], [ %55, %51 ], [ %38, %48 ]
  %58 = phi i32 [ %47, %41 ], [ %52, %51 ], [ %6, %48 ]
  %59 = sub nsw i32 0, %39
  %60 = icmp slt i32 %39, 0
  %61 = select i1 %60, i32 %59, i32 0
  %62 = sub nsw i32 0, %58
  %63 = icmp slt i32 %58, 0
  %64 = select i1 %63, i32 %62, i32 0
  %65 = sub nsw i32 %9, %39
  %66 = icmp slt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = sub nsw i32 %8, %58
  %69 = icmp slt i32 %68, %4
  %70 = select i1 %69, i32 %68, i32 %4
  %71 = sub nsw i32 %70, %64
  %72 = zext i32 %61 to i64
  %73 = mul nsw i64 %72, %3
  %74 = zext i32 %64 to i64
  %75 = add i64 %73, %74
  %76 = getelementptr inbounds i8, i8* %57, i64 %75
  %77 = getelementptr inbounds i8, i8* %0, i64 %74
  br i1 %60, label %78, label %80

78:                                               ; preds = %56
  %79 = sext i32 %71 to i64
  br label %108

80:                                               ; preds = %108, %56
  %81 = phi i8* [ %77, %56 ], [ %111, %108 ]
  %82 = phi i32 [ 0, %56 ], [ %112, %108 ]
  %83 = icmp sgt i32 %67, %82
  br i1 %83, label %84, label %128

84:                                               ; preds = %80
  %85 = sext i32 %71 to i64
  %86 = sub i32 %67, %82
  %87 = xor i32 %82, -1
  %88 = add i32 %67, %87
  %89 = and i32 %86, 3
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %101, label %91

91:                                               ; preds = %84, %91
  %92 = phi i32 [ %98, %91 ], [ %82, %84 ]
  %93 = phi i8* [ %97, %91 ], [ %81, %84 ]
  %94 = phi i8* [ %96, %91 ], [ %76, %84 ]
  %95 = phi i32 [ %99, %91 ], [ %89, %84 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %93, i8* align 1 %94, i64 %85, i1 false)
  %96 = getelementptr inbounds i8, i8* %94, i64 %3
  %97 = getelementptr inbounds i8, i8* %93, i64 %2
  %98 = add nuw nsw i32 %92, 1
  %99 = add i32 %95, -1
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %101, label %91, !llvm.loop !2

101:                                              ; preds = %91, %84
  %102 = phi i32 [ %82, %84 ], [ %98, %91 ]
  %103 = phi i8* [ %81, %84 ], [ %97, %91 ]
  %104 = phi i8* [ %76, %84 ], [ %96, %91 ]
  %105 = phi i8* [ undef, %84 ], [ %96, %91 ]
  %106 = phi i8* [ undef, %84 ], [ %97, %91 ]
  %107 = icmp ult i32 %88, 3
  br i1 %107, label %128, label %114

108:                                              ; preds = %78, %108
  %109 = phi i32 [ 0, %78 ], [ %112, %108 ]
  %110 = phi i8* [ %77, %78 ], [ %111, %108 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %110, i8* align 1 %76, i64 %79, i1 false)
  %111 = getelementptr inbounds i8, i8* %110, i64 %2
  %112 = add nuw nsw i32 %109, 1
  %113 = icmp slt i32 %112, %61
  br i1 %113, label %108, label %80

114:                                              ; preds = %101, %114
  %115 = phi i32 [ %126, %114 ], [ %102, %101 ]
  %116 = phi i8* [ %125, %114 ], [ %103, %101 ]
  %117 = phi i8* [ %124, %114 ], [ %104, %101 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %116, i8* align 1 %117, i64 %85, i1 false)
  %118 = getelementptr inbounds i8, i8* %117, i64 %3
  %119 = getelementptr inbounds i8, i8* %116, i64 %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %119, i8* align 1 %118, i64 %85, i1 false)
  %120 = getelementptr inbounds i8, i8* %118, i64 %3
  %121 = getelementptr inbounds i8, i8* %119, i64 %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %121, i8* align 1 %120, i64 %85, i1 false)
  %122 = getelementptr inbounds i8, i8* %120, i64 %3
  %123 = getelementptr inbounds i8, i8* %121, i64 %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %123, i8* align 1 %122, i64 %85, i1 false)
  %124 = getelementptr inbounds i8, i8* %122, i64 %3
  %125 = getelementptr inbounds i8, i8* %123, i64 %2
  %126 = add nuw nsw i32 %115, 4
  %127 = icmp slt i32 %126, %67
  br i1 %127, label %114, label %128

128:                                              ; preds = %101, %114, %80
  %129 = phi i8* [ %76, %80 ], [ %105, %101 ], [ %124, %114 ]
  %130 = phi i8* [ %81, %80 ], [ %106, %101 ], [ %125, %114 ]
  %131 = phi i32 [ %82, %80 ], [ %67, %114 ], [ %67, %101 ]
  %132 = sub i64 0, %3
  %133 = getelementptr inbounds i8, i8* %129, i64 %132
  %134 = icmp slt i32 %131, %5
  br i1 %134, label %135, label %164

135:                                              ; preds = %128
  %136 = sext i32 %71 to i64
  %137 = sub i32 %5, %131
  %138 = xor i32 %131, -1
  %139 = add i32 %138, %5
  %140 = and i32 %137, 3
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %150, label %142

142:                                              ; preds = %135, %142
  %143 = phi i32 [ %147, %142 ], [ %131, %135 ]
  %144 = phi i8* [ %146, %142 ], [ %130, %135 ]
  %145 = phi i32 [ %148, %142 ], [ %140, %135 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %144, i8* align 1 %133, i64 %136, i1 false)
  %146 = getelementptr inbounds i8, i8* %144, i64 %2
  %147 = add nuw nsw i32 %143, 1
  %148 = add i32 %145, -1
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %150, label %142, !llvm.loop !4

150:                                              ; preds = %142, %135
  %151 = phi i8* [ undef, %135 ], [ %146, %142 ]
  %152 = phi i32 [ %131, %135 ], [ %147, %142 ]
  %153 = phi i8* [ %130, %135 ], [ %146, %142 ]
  %154 = icmp ult i32 %139, 3
  br i1 %154, label %164, label %155

155:                                              ; preds = %150, %155
  %156 = phi i32 [ %162, %155 ], [ %152, %150 ]
  %157 = phi i8* [ %161, %155 ], [ %153, %150 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %157, i8* align 1 %133, i64 %136, i1 false)
  %158 = getelementptr inbounds i8, i8* %157, i64 %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %158, i8* align 1 %133, i64 %136, i1 false)
  %159 = getelementptr inbounds i8, i8* %158, i64 %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %159, i8* align 1 %133, i64 %136, i1 false)
  %160 = getelementptr inbounds i8, i8* %159, i64 %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %160, i8* align 1 %133, i64 %136, i1 false)
  %161 = getelementptr inbounds i8, i8* %160, i64 %2
  %162 = add nuw nsw i32 %156, 4
  %163 = icmp eq i32 %162, %5
  br i1 %163, label %164, label %155

164:                                              ; preds = %150, %155, %128
  %165 = phi i8* [ %130, %128 ], [ %151, %150 ], [ %161, %155 ]
  %166 = icmp eq i32 %5, 0
  br i1 %166, label %202, label %167

167:                                              ; preds = %164
  %168 = sext i32 %5 to i64
  %169 = mul nsw i64 %168, %2
  %170 = add i64 %169, %74
  %171 = sub i64 0, %170
  %172 = getelementptr inbounds i8, i8* %165, i64 %171
  %173 = add nsw i32 %70, -1
  %174 = sext i32 %173 to i64
  %175 = sext i32 %64 to i64
  %176 = sext i32 %70 to i64
  %177 = sext i32 %4 to i64
  br label %178

178:                                              ; preds = %167, %199
  %179 = phi i32 [ %5, %167 ], [ %181, %199 ]
  %180 = phi i8* [ %172, %167 ], [ %200, %199 ]
  %181 = add nsw i32 %179, -1
  br i1 %63, label %182, label %184

182:                                              ; preds = %178
  %183 = getelementptr inbounds i8, i8* %180, i64 %74
  br label %187

184:                                              ; preds = %187, %178
  br i1 %69, label %185, label %199

185:                                              ; preds = %184
  %186 = getelementptr inbounds i8, i8* %180, i64 %174
  br label %193

187:                                              ; preds = %182, %187
  %188 = phi i64 [ 0, %182 ], [ %191, %187 ]
  %189 = load i8, i8* %183, align 1
  %190 = getelementptr inbounds i8, i8* %180, i64 %188
  store i8 %189, i8* %190, align 1
  %191 = add nuw nsw i64 %188, 1
  %192 = icmp slt i64 %191, %175
  br i1 %192, label %187, label %184

193:                                              ; preds = %185, %193
  %194 = phi i64 [ %176, %185 ], [ %197, %193 ]
  %195 = load i8, i8* %186, align 1
  %196 = getelementptr inbounds i8, i8* %180, i64 %194
  store i8 %195, i8* %196, align 1
  %197 = add nsw i64 %194, 1
  %198 = icmp slt i64 %197, %177
  br i1 %198, label %193, label %199

199:                                              ; preds = %193, %184
  %200 = getelementptr inbounds i8, i8* %180, i64 %2
  %201 = icmp eq i32 %181, 0
  br i1 %201, label %202, label %178

202:                                              ; preds = %199, %164, %10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_emulated_edge_mc_16(i8* nocapture, i8* nocapture readonly, i64, i64, i32, i32, i32, i32, i32, i32) #0 {
  %11 = icmp ne i32 %8, 0
  %12 = icmp ne i32 %9, 0
  %13 = and i1 %11, %12
  br i1 %13, label %14, label %210

14:                                               ; preds = %10
  %15 = icmp slt i32 %7, %9
  br i1 %15, label %25, label %16

16:                                               ; preds = %14
  %17 = sext i32 %7 to i64
  %18 = mul i64 %17, %3
  %19 = sub i64 0, %18
  %20 = getelementptr inbounds i8, i8* %1, i64 %19
  %21 = add nsw i32 %9, -1
  %22 = sext i32 %21 to i64
  %23 = mul nsw i64 %22, %3
  %24 = getelementptr inbounds i8, i8* %20, i64 %23
  br label %37

25:                                               ; preds = %14
  %26 = sub nsw i32 0, %5
  %27 = icmp slt i32 %26, %7
  br i1 %27, label %37, label %28

28:                                               ; preds = %25
  %29 = sext i32 %7 to i64
  %30 = mul i64 %29, %3
  %31 = sub i64 0, %30
  %32 = getelementptr inbounds i8, i8* %1, i64 %31
  %33 = sub nsw i32 1, %5
  %34 = sext i32 %33 to i64
  %35 = mul nsw i64 %34, %3
  %36 = getelementptr inbounds i8, i8* %32, i64 %35
  br label %37

37:                                               ; preds = %25, %28, %16
  %38 = phi i8* [ %24, %16 ], [ %36, %28 ], [ %1, %25 ]
  %39 = phi i32 [ %21, %16 ], [ %33, %28 ], [ %7, %25 ]
  %40 = icmp slt i32 %6, %8
  br i1 %40, label %49, label %41

41:                                               ; preds = %37
  %42 = add nsw i32 %6, 1
  %43 = sub i32 %42, %8
  %44 = sext i32 %43 to i64
  %45 = shl nsw i64 %44, 1
  %46 = sub nsw i64 0, %45
  %47 = getelementptr inbounds i8, i8* %38, i64 %46
  %48 = add nsw i32 %8, -1
  br label %58

49:                                               ; preds = %37
  %50 = sub nsw i32 0, %4
  %51 = icmp slt i32 %50, %6
  br i1 %51, label %58, label %52

52:                                               ; preds = %49
  %53 = sub nsw i32 1, %4
  %54 = sub nsw i32 %53, %6
  %55 = sext i32 %54 to i64
  %56 = shl nsw i64 %55, 1
  %57 = getelementptr inbounds i8, i8* %38, i64 %56
  br label %58

58:                                               ; preds = %49, %52, %41
  %59 = phi i8* [ %47, %41 ], [ %57, %52 ], [ %38, %49 ]
  %60 = phi i32 [ %48, %41 ], [ %53, %52 ], [ %6, %49 ]
  %61 = sub nsw i32 0, %39
  %62 = icmp slt i32 %39, 0
  %63 = select i1 %62, i32 %61, i32 0
  %64 = sub nsw i32 0, %60
  %65 = icmp slt i32 %60, 0
  %66 = select i1 %65, i32 %64, i32 0
  %67 = sub nsw i32 %9, %39
  %68 = icmp slt i32 %67, %5
  %69 = select i1 %68, i32 %67, i32 %5
  %70 = sub nsw i32 %8, %60
  %71 = icmp slt i32 %70, %4
  %72 = select i1 %71, i32 %70, i32 %4
  %73 = sub nsw i32 %72, %66
  %74 = zext i32 %63 to i64
  %75 = mul nsw i64 %74, %3
  %76 = zext i32 %66 to i64
  %77 = shl nuw i32 %66, 1
  %78 = zext i32 %77 to i64
  %79 = add i64 %75, %78
  %80 = getelementptr inbounds i8, i8* %59, i64 %79
  %81 = getelementptr inbounds i8, i8* %0, i64 %78
  br i1 %62, label %82, label %85

82:                                               ; preds = %58
  %83 = sext i32 %73 to i64
  %84 = shl nsw i64 %83, 1
  br label %114

85:                                               ; preds = %114, %58
  %86 = phi i8* [ %81, %58 ], [ %117, %114 ]
  %87 = phi i32 [ 0, %58 ], [ %118, %114 ]
  %88 = icmp sgt i32 %69, %87
  br i1 %88, label %89, label %134

89:                                               ; preds = %85
  %90 = sext i32 %73 to i64
  %91 = shl nsw i64 %90, 1
  %92 = sub i32 %69, %87
  %93 = xor i32 %87, -1
  %94 = add i32 %69, %93
  %95 = and i32 %92, 3
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %107, label %97

97:                                               ; preds = %89, %97
  %98 = phi i32 [ %104, %97 ], [ %87, %89 ]
  %99 = phi i8* [ %103, %97 ], [ %86, %89 ]
  %100 = phi i8* [ %102, %97 ], [ %80, %89 ]
  %101 = phi i32 [ %105, %97 ], [ %95, %89 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %99, i8* align 1 %100, i64 %91, i1 false)
  %102 = getelementptr inbounds i8, i8* %100, i64 %3
  %103 = getelementptr inbounds i8, i8* %99, i64 %2
  %104 = add nuw nsw i32 %98, 1
  %105 = add i32 %101, -1
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %97, !llvm.loop !5

107:                                              ; preds = %97, %89
  %108 = phi i32 [ %87, %89 ], [ %104, %97 ]
  %109 = phi i8* [ %86, %89 ], [ %103, %97 ]
  %110 = phi i8* [ %80, %89 ], [ %102, %97 ]
  %111 = phi i8* [ undef, %89 ], [ %102, %97 ]
  %112 = phi i8* [ undef, %89 ], [ %103, %97 ]
  %113 = icmp ult i32 %94, 3
  br i1 %113, label %134, label %120

114:                                              ; preds = %82, %114
  %115 = phi i32 [ 0, %82 ], [ %118, %114 ]
  %116 = phi i8* [ %81, %82 ], [ %117, %114 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %116, i8* align 1 %80, i64 %84, i1 false)
  %117 = getelementptr inbounds i8, i8* %116, i64 %2
  %118 = add nuw nsw i32 %115, 1
  %119 = icmp slt i32 %118, %63
  br i1 %119, label %114, label %85

120:                                              ; preds = %107, %120
  %121 = phi i32 [ %132, %120 ], [ %108, %107 ]
  %122 = phi i8* [ %131, %120 ], [ %109, %107 ]
  %123 = phi i8* [ %130, %120 ], [ %110, %107 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %122, i8* align 1 %123, i64 %91, i1 false)
  %124 = getelementptr inbounds i8, i8* %123, i64 %3
  %125 = getelementptr inbounds i8, i8* %122, i64 %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %125, i8* align 1 %124, i64 %91, i1 false)
  %126 = getelementptr inbounds i8, i8* %124, i64 %3
  %127 = getelementptr inbounds i8, i8* %125, i64 %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %127, i8* align 1 %126, i64 %91, i1 false)
  %128 = getelementptr inbounds i8, i8* %126, i64 %3
  %129 = getelementptr inbounds i8, i8* %127, i64 %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %129, i8* align 1 %128, i64 %91, i1 false)
  %130 = getelementptr inbounds i8, i8* %128, i64 %3
  %131 = getelementptr inbounds i8, i8* %129, i64 %2
  %132 = add nuw nsw i32 %121, 4
  %133 = icmp slt i32 %132, %69
  br i1 %133, label %120, label %134

134:                                              ; preds = %107, %120, %85
  %135 = phi i8* [ %80, %85 ], [ %111, %107 ], [ %130, %120 ]
  %136 = phi i8* [ %86, %85 ], [ %112, %107 ], [ %131, %120 ]
  %137 = phi i32 [ %87, %85 ], [ %69, %120 ], [ %69, %107 ]
  %138 = sub i64 0, %3
  %139 = getelementptr inbounds i8, i8* %135, i64 %138
  %140 = icmp slt i32 %137, %5
  br i1 %140, label %141, label %171

141:                                              ; preds = %134
  %142 = sext i32 %73 to i64
  %143 = shl nsw i64 %142, 1
  %144 = sub i32 %5, %137
  %145 = xor i32 %137, -1
  %146 = add i32 %145, %5
  %147 = and i32 %144, 3
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %157, label %149

149:                                              ; preds = %141, %149
  %150 = phi i32 [ %154, %149 ], [ %137, %141 ]
  %151 = phi i8* [ %153, %149 ], [ %136, %141 ]
  %152 = phi i32 [ %155, %149 ], [ %147, %141 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %151, i8* align 1 %139, i64 %143, i1 false)
  %153 = getelementptr inbounds i8, i8* %151, i64 %2
  %154 = add nuw nsw i32 %150, 1
  %155 = add i32 %152, -1
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %149, !llvm.loop !6

157:                                              ; preds = %149, %141
  %158 = phi i8* [ undef, %141 ], [ %153, %149 ]
  %159 = phi i32 [ %137, %141 ], [ %154, %149 ]
  %160 = phi i8* [ %136, %141 ], [ %153, %149 ]
  %161 = icmp ult i32 %146, 3
  br i1 %161, label %171, label %162

162:                                              ; preds = %157, %162
  %163 = phi i32 [ %169, %162 ], [ %159, %157 ]
  %164 = phi i8* [ %168, %162 ], [ %160, %157 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %164, i8* align 1 %139, i64 %143, i1 false)
  %165 = getelementptr inbounds i8, i8* %164, i64 %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %165, i8* align 1 %139, i64 %143, i1 false)
  %166 = getelementptr inbounds i8, i8* %165, i64 %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %166, i8* align 1 %139, i64 %143, i1 false)
  %167 = getelementptr inbounds i8, i8* %166, i64 %2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %167, i8* align 1 %139, i64 %143, i1 false)
  %168 = getelementptr inbounds i8, i8* %167, i64 %2
  %169 = add nuw nsw i32 %163, 4
  %170 = icmp eq i32 %169, %5
  br i1 %170, label %171, label %162

171:                                              ; preds = %157, %162, %134
  %172 = phi i8* [ %136, %134 ], [ %158, %157 ], [ %168, %162 ]
  %173 = icmp eq i32 %5, 0
  br i1 %173, label %210, label %174

174:                                              ; preds = %171
  %175 = sext i32 %5 to i64
  %176 = mul nsw i64 %175, %2
  %177 = add i64 %176, %78
  %178 = sub i64 0, %177
  %179 = getelementptr inbounds i8, i8* %172, i64 %178
  %180 = add nsw i32 %72, -1
  %181 = sext i32 %180 to i64
  %182 = sext i32 %66 to i64
  %183 = sext i32 %72 to i64
  %184 = sext i32 %4 to i64
  br label %185

185:                                              ; preds = %174, %207
  %186 = phi i32 [ %5, %174 ], [ %188, %207 ]
  %187 = phi i8* [ %179, %174 ], [ %208, %207 ]
  %188 = add nsw i32 %186, -1
  %189 = bitcast i8* %187 to i16*
  br i1 %65, label %190, label %192

190:                                              ; preds = %185
  %191 = getelementptr inbounds i16, i16* %189, i64 %76
  br label %195

192:                                              ; preds = %195, %185
  br i1 %71, label %193, label %207

193:                                              ; preds = %192
  %194 = getelementptr inbounds i16, i16* %189, i64 %181
  br label %201

195:                                              ; preds = %190, %195
  %196 = phi i64 [ 0, %190 ], [ %199, %195 ]
  %197 = load i16, i16* %191, align 2
  %198 = getelementptr inbounds i16, i16* %189, i64 %196
  store i16 %197, i16* %198, align 2
  %199 = add nuw nsw i64 %196, 1
  %200 = icmp slt i64 %199, %182
  br i1 %200, label %195, label %192

201:                                              ; preds = %193, %201
  %202 = phi i64 [ %183, %193 ], [ %205, %201 ]
  %203 = load i16, i16* %194, align 2
  %204 = getelementptr inbounds i16, i16* %189, i64 %202
  store i16 %203, i16* %204, align 2
  %205 = add nsw i64 %202, 1
  %206 = icmp slt i64 %205, %184
  br i1 %206, label %201, label %207

207:                                              ; preds = %201, %192
  %208 = getelementptr inbounds i8, i8* %187, i64 %2
  %209 = icmp eq i32 %188, 0
  br i1 %209, label %210, label %185

210:                                              ; preds = %207, %171, %10
  ret void
}

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @ff_videodsp_init(%struct.VideoDSPContext*, i32) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.VideoDSPContext, %struct.VideoDSPContext* %0, i64 0, i32 1
  store void (i8*, i64, i32)* @just_return, void (i8*, i64, i32)** %3, align 8
  %4 = icmp slt i32 %1, 9
  %5 = getelementptr inbounds %struct.VideoDSPContext, %struct.VideoDSPContext* %0, i64 0, i32 0
  %6 = select i1 %4, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)* @ff_emulated_edge_mc_8, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)* @ff_emulated_edge_mc_16
  store void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)* %6, void (i8*, i8*, i64, i64, i32, i32, i32, i32, i32, i32)** %5, align 8
  tail call void @ff_videodsp_init_x86(%struct.VideoDSPContext* %0, i32 %1) #5
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @just_return(i8* nocapture, i64, i32) #3 {
  ret void
}

declare void @ff_videodsp_init_x86(%struct.VideoDSPContext*, i32) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
