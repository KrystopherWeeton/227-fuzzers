; ModuleID = '../../third_party/opus/src/src/mlp.c'
source_filename = "../../third_party/opus/src/src/mlp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.DenseLayer = type { i8*, i8*, i32, i32, i32 }
%struct.GRULayer = type { i8*, i8*, i8*, i32, i32 }

@tansig_table = internal unnamed_addr constant [201 x float] [float 0.000000e+00, float 0x3FA47820A0000000, float 0x3FB46FBD20000000, float 0x3FBE92C4A0000000, float 0x3FC44E9C40000000, float 0x3FC9439580000000, float 0x3FCE24BBA0000000, float 0x3FD1774680000000, float 0x3FD3CEF680000000, float 0x3FD617FC80000000, float 0x3FD85115A0000000, float 0x3FDA7924A0000000, float 0x3FDC8F4300000000, float 0x3FDE92A300000000, float 0x3FE0415900000000, float 0x3FE12F8380000000, float 0x3FE213A920000000, float 0x3FE2EDB940000000, float 0x3FE3BDB800000000, float 0x3FE483B3E0000000, float 0x3FE53FCA80000000, float 0x3FE5F225C0000000, float 0x3FE69AFC00000000, float 0x3FE73A8C60000000, float 0x3FE7D11E00000000, float 0x3FE85EFA60000000, float 0x3FE8E47560000000, float 0x3FE961E2E0000000, float 0x3FE9D79B00000000, float 0x3FEA45F5A0000000, float 0x3FEAAD4D40000000, float 0x3FEB0DF9C0000000, float 0x3FEB685340000000, float 0x3FEBBCB1C0000000, float 0x3FEC0B6960000000, float 0x3FEC54CDC0000000, float 0x3FEC992C80000000, float 0x3FECD8D360000000, float 0x3FED140DE0000000, float 0x3FED4B1EE0000000, float 0x3FED7E5000000000, float 0x3FEDADDBE0000000, float 0x3FEDDA0160000000, float 0x3FEE02F940000000, float 0x3FEE28FC00000000, float 0x3FEE4C3C20000000, float 0x3FEE6CE9A0000000, float 0x3FEE8B32C0000000, float 0x3FEEA74180000000, float 0x3FEEC13FE0000000, float 0x3FEED95140000000, float 0x3FEEEF9760000000, float 0x3FEF043800000000, float 0x3FEF174C40000000, float 0x3FEF28F3A0000000, float 0x3FEF394960000000, float 0x3FEF486480000000, float 0x3FEF565E40000000, float 0x3FEF634760000000, float 0x3FEF6F3900000000, float 0x3FEF7A4400000000, float 0x3FEF847900000000, float 0x3FEF8DE6E0000000, float 0x3FEF969E40000000, float 0x3FEF9EABC0000000, float 0x3FEFA61C00000000, float 0x3FEFACFD80000000, float 0x3FEFB356E0000000, float 0x3FEFB93680000000, float 0x3FEFBEA0C0000000, float 0x3FEFC3A220000000, float 0x3FEFC84300000000, float 0x3FEFCC89C0000000, float 0x3FEFD07A60000000, float 0x3FEFD41FA0000000, float 0x3FEFD77DA0000000, float 0x3FEFDA9860000000, float 0x3FEFDD7660000000, float 0x3FEFE01DE0000000, float 0x3FEFE290E0000000, float 0x3FEFE4D1A0000000, float 0x3FEFE6E860000000, float 0x3FEFE8D540000000, float 0x3FEFEA9C60000000, float 0x3FEFEC41E0000000, float 0x3FEFEDC5E0000000, float 0x3FEFEF2C80000000, float 0x3FEFF077C0000000, float 0x3FEFF1A7E0000000, float 0x3FEFF2C300000000, float 0x3FEFF3C700000000, float 0x3FEFF4B840000000, float 0x3FEFF59460000000, float 0x3FEFF66200000000, float 0x3FEFF71EA0000000, float 0x3FEFF7CEE0000000, float 0x3FEFF86E40000000, float 0x3FEFF90320000000, float 0x3FEFF98D80000000, float 0x3FEFFA0B60000000, float 0x3FEFFA80C0000000, float 0x3FEFFAEDE0000000, float 0x3FEFFB5060000000, float 0x3FEFFBACC0000000, float 0x3FEFFC02A0000000, float 0x3FEFFC5040000000, float 0x3FEFFC99A0000000, float 0x3FEFFCDCC0000000, float 0x3FEFFD19A0000000, float 0x3FEFFD5240000000, float 0x3FEFFD88C0000000, float 0x3FEFFDB900000000, float 0x3FEFFDE500000000, float 0x3FEFFE0F00000000, float 0x3FEFFE34C0000000, float 0x3FEFFE5860000000, float 0x3FEFFE77E0000000, float 0x3FEFFE9740000000, float 0x3FEFFEB280000000, float 0x3FEFFECBC0000000, float 0x3FEFFEE4E0000000, float 0x3FEFFEF9E0000000, float 0x3FEFFF0EE0000000, float 0x3FEFFF1FA0000000, float 0x3FEFFF3280000000, float 0x3FEFFF4120000000, float 0x3FEFFF4FE0000000, float 0x3FEFFF5E80000000, float 0x3FEFFF6B20000000, float 0x3FEFFF75A0000000, float 0x3FEFFF8020000000, float 0x3FEFFF8A80000000, float 0x3FEFFF9300000000, float 0x3FEFFF9B60000000, float 0x3FEFFFA3C0000000, float 0x3FEFFFAA00000000, float 0x3FEFFFB040000000, float 0x3FEFFFB6A0000000, float 0x3FEFFFBCE0000000, float 0x3FEFFFC120000000, float 0x3FEFFFC760000000, float 0x3FEFFFCBA0000000, float 0x3FEFFFCFC0000000, float 0x3FEFFFD1E0000000, float 0x3FEFFFD600000000, float 0x3FEFFFDA40000000, float 0x3FEFFFDC60000000, float 0x3FEFFFDE80000000, float 0x3FEFFFE2A0000000, float 0x3FEFFFE4C0000000, float 0x3FEFFFE6E0000000, float 0x3FEFFFE8E0000000, float 0x3FEFFFEB00000000, float 0x3FEFFFEB00000000, float 0x3FEFFFED20000000, float 0x3FEFFFEF40000000, float 0x3FEFFFEF40000000, float 0x3FEFFFF160000000, float 0x3FEFFFF360000000, float 0x3FEFFFF360000000, float 0x3FEFFFF360000000, float 0x3FEFFFF580000000, float 0x3FEFFFF580000000, float 0x3FEFFFF7A0000000, float 0x3FEFFFF7A0000000, float 0x3FEFFFF7A0000000, float 0x3FEFFFF9C0000000, float 0x3FEFFFF9C0000000, float 0x3FEFFFF9C0000000, float 0x3FEFFFF9C0000000, float 0x3FEFFFF9C0000000, float 0x3FEFFFFBC0000000, float 0x3FEFFFFBC0000000, float 0x3FEFFFFBC0000000, float 0x3FEFFFFBC0000000, float 0x3FEFFFFBC0000000, float 0x3FEFFFFBC0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 0x3FEFFFFDE0000000, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00], align 16

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @compute_dense(%struct.DenseLayer* nocapture readonly, float* nocapture, float* nocapture readonly) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.DenseLayer, %struct.DenseLayer* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.DenseLayer, %struct.DenseLayer* %0, i64 0, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %184

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.DenseLayer, %struct.DenseLayer* %0, i64 0, i32 0
  %11 = zext i32 %7 to i64
  %12 = add nsw i64 %11, -1
  %13 = and i64 %11, 3
  %14 = icmp ult i64 %12, 3
  br i1 %14, label %46, label %15

15:                                               ; preds = %9
  %16 = sub nsw i64 %11, %13
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i64 [ 0, %15 ], [ %43, %17 ]
  %19 = phi i64 [ %16, %15 ], [ %44, %17 ]
  %20 = load i8*, i8** %10, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 %18
  %22 = load i8, i8* %21, align 1
  %23 = sitofp i8 %22 to float
  %24 = getelementptr inbounds float, float* %1, i64 %18
  store float %23, float* %24, align 4
  %25 = or i64 %18, 1
  %26 = load i8*, i8** %10, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 %25
  %28 = load i8, i8* %27, align 1
  %29 = sitofp i8 %28 to float
  %30 = getelementptr inbounds float, float* %1, i64 %25
  store float %29, float* %30, align 4
  %31 = or i64 %18, 2
  %32 = load i8*, i8** %10, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 %31
  %34 = load i8, i8* %33, align 1
  %35 = sitofp i8 %34 to float
  %36 = getelementptr inbounds float, float* %1, i64 %31
  store float %35, float* %36, align 4
  %37 = or i64 %18, 3
  %38 = load i8*, i8** %10, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 %37
  %40 = load i8, i8* %39, align 1
  %41 = sitofp i8 %40 to float
  %42 = getelementptr inbounds float, float* %1, i64 %37
  store float %41, float* %42, align 4
  %43 = add nuw nsw i64 %18, 4
  %44 = add i64 %19, -4
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %46, label %17

46:                                               ; preds = %17, %9
  %47 = phi i64 [ 0, %9 ], [ %43, %17 ]
  %48 = icmp eq i64 %13, 0
  br i1 %48, label %60, label %49

49:                                               ; preds = %46, %49
  %50 = phi i64 [ %57, %49 ], [ %47, %46 ]
  %51 = phi i64 [ %58, %49 ], [ %13, %46 ]
  %52 = load i8*, i8** %10, align 8
  %53 = getelementptr inbounds i8, i8* %52, i64 %50
  %54 = load i8, i8* %53, align 1
  %55 = sitofp i8 %54 to float
  %56 = getelementptr inbounds float, float* %1, i64 %50
  store float %55, float* %56, align 4
  %57 = add nuw nsw i64 %50, 1
  %58 = add i64 %51, -1
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %49, !llvm.loop !2

60:                                               ; preds = %49, %46
  %61 = getelementptr inbounds %struct.DenseLayer, %struct.DenseLayer* %0, i64 0, i32 1
  %62 = load i8*, i8** %61, align 8
  %63 = icmp sgt i32 %5, 0
  %64 = and i1 %63, %8
  br i1 %64, label %65, label %119

65:                                               ; preds = %60
  %66 = sext i32 %7 to i64
  %67 = zext i32 %7 to i64
  %68 = zext i32 %5 to i64
  %69 = and i64 %68, 1
  %70 = icmp eq i32 %5, 1
  %71 = sub nsw i64 %68, %69
  %72 = icmp eq i64 %69, 0
  br label %73

73:                                               ; preds = %116, %65
  %74 = phi i64 [ 0, %65 ], [ %117, %116 ]
  %75 = getelementptr inbounds float, float* %1, i64 %74
  %76 = load float, float* %75, align 4
  br i1 %70, label %103, label %77

77:                                               ; preds = %73, %77
  %78 = phi float [ %99, %77 ], [ %76, %73 ]
  %79 = phi i64 [ %100, %77 ], [ 0, %73 ]
  %80 = phi i64 [ %101, %77 ], [ %71, %73 ]
  %81 = mul nsw i64 %79, %66
  %82 = add nsw i64 %81, %74
  %83 = getelementptr inbounds i8, i8* %62, i64 %82
  %84 = load i8, i8* %83, align 1
  %85 = sitofp i8 %84 to float
  %86 = getelementptr inbounds float, float* %2, i64 %79
  %87 = load float, float* %86, align 4
  %88 = fmul float %87, %85
  %89 = fadd float %78, %88
  store float %89, float* %75, align 4
  %90 = or i64 %79, 1
  %91 = mul nsw i64 %90, %66
  %92 = add nsw i64 %91, %74
  %93 = getelementptr inbounds i8, i8* %62, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = sitofp i8 %94 to float
  %96 = getelementptr inbounds float, float* %2, i64 %90
  %97 = load float, float* %96, align 4
  %98 = fmul float %97, %95
  %99 = fadd float %89, %98
  store float %99, float* %75, align 4
  %100 = add nuw nsw i64 %79, 2
  %101 = add i64 %80, -2
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %77

103:                                              ; preds = %77, %73
  %104 = phi float [ %76, %73 ], [ %99, %77 ]
  %105 = phi i64 [ 0, %73 ], [ %100, %77 ]
  br i1 %72, label %116, label %106

106:                                              ; preds = %103
  %107 = mul nsw i64 %105, %66
  %108 = add nsw i64 %107, %74
  %109 = getelementptr inbounds i8, i8* %62, i64 %108
  %110 = load i8, i8* %109, align 1
  %111 = sitofp i8 %110 to float
  %112 = getelementptr inbounds float, float* %2, i64 %105
  %113 = load float, float* %112, align 4
  %114 = fmul float %113, %111
  %115 = fadd float %104, %114
  store float %115, float* %75, align 4
  br label %116

116:                                              ; preds = %103, %106
  %117 = add nuw nsw i64 %74, 1
  %118 = icmp eq i64 %117, %67
  br i1 %118, label %119, label %73

119:                                              ; preds = %116, %60
  br i1 %8, label %120, label %184

120:                                              ; preds = %119
  %121 = zext i32 %7 to i64
  %122 = icmp ult i32 %7, 8
  br i1 %122, label %175, label %123

123:                                              ; preds = %120
  %124 = and i64 %11, 4294967288
  %125 = add nsw i64 %124, -8
  %126 = lshr exact i64 %125, 3
  %127 = add nuw nsw i64 %126, 1
  %128 = and i64 %127, 1
  %129 = icmp eq i64 %125, 0
  br i1 %129, label %159, label %130

130:                                              ; preds = %123
  %131 = sub nuw nsw i64 %127, %128
  br label %132

132:                                              ; preds = %132, %130
  %133 = phi i64 [ 0, %130 ], [ %156, %132 ]
  %134 = phi i64 [ %131, %130 ], [ %157, %132 ]
  %135 = getelementptr inbounds float, float* %1, i64 %133
  %136 = bitcast float* %135 to <4 x float>*
  %137 = load <4 x float>, <4 x float>* %136, align 4
  %138 = getelementptr inbounds float, float* %135, i64 4
  %139 = bitcast float* %138 to <4 x float>*
  %140 = load <4 x float>, <4 x float>* %139, align 4
  %141 = fmul <4 x float> %137, <float 7.812500e-03, float 7.812500e-03, float 7.812500e-03, float 7.812500e-03>
  %142 = fmul <4 x float> %140, <float 7.812500e-03, float 7.812500e-03, float 7.812500e-03, float 7.812500e-03>
  %143 = bitcast float* %135 to <4 x float>*
  store <4 x float> %141, <4 x float>* %143, align 4
  %144 = bitcast float* %138 to <4 x float>*
  store <4 x float> %142, <4 x float>* %144, align 4
  %145 = or i64 %133, 8
  %146 = getelementptr inbounds float, float* %1, i64 %145
  %147 = bitcast float* %146 to <4 x float>*
  %148 = load <4 x float>, <4 x float>* %147, align 4
  %149 = getelementptr inbounds float, float* %146, i64 4
  %150 = bitcast float* %149 to <4 x float>*
  %151 = load <4 x float>, <4 x float>* %150, align 4
  %152 = fmul <4 x float> %148, <float 7.812500e-03, float 7.812500e-03, float 7.812500e-03, float 7.812500e-03>
  %153 = fmul <4 x float> %151, <float 7.812500e-03, float 7.812500e-03, float 7.812500e-03, float 7.812500e-03>
  %154 = bitcast float* %146 to <4 x float>*
  store <4 x float> %152, <4 x float>* %154, align 4
  %155 = bitcast float* %149 to <4 x float>*
  store <4 x float> %153, <4 x float>* %155, align 4
  %156 = add i64 %133, 16
  %157 = add i64 %134, -2
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %159, label %132, !llvm.loop !4

159:                                              ; preds = %132, %123
  %160 = phi i64 [ 0, %123 ], [ %156, %132 ]
  %161 = icmp eq i64 %128, 0
  br i1 %161, label %173, label %162

162:                                              ; preds = %159
  %163 = getelementptr inbounds float, float* %1, i64 %160
  %164 = bitcast float* %163 to <4 x float>*
  %165 = load <4 x float>, <4 x float>* %164, align 4
  %166 = getelementptr inbounds float, float* %163, i64 4
  %167 = bitcast float* %166 to <4 x float>*
  %168 = load <4 x float>, <4 x float>* %167, align 4
  %169 = fmul <4 x float> %165, <float 7.812500e-03, float 7.812500e-03, float 7.812500e-03, float 7.812500e-03>
  %170 = fmul <4 x float> %168, <float 7.812500e-03, float 7.812500e-03, float 7.812500e-03, float 7.812500e-03>
  %171 = bitcast float* %163 to <4 x float>*
  store <4 x float> %169, <4 x float>* %171, align 4
  %172 = bitcast float* %166 to <4 x float>*
  store <4 x float> %170, <4 x float>* %172, align 4
  br label %173

173:                                              ; preds = %159, %162
  %174 = icmp eq i64 %124, %11
  br i1 %174, label %184, label %175

175:                                              ; preds = %173, %120
  %176 = phi i64 [ 0, %120 ], [ %124, %173 ]
  br label %177

177:                                              ; preds = %175, %177
  %178 = phi i64 [ %182, %177 ], [ %176, %175 ]
  %179 = getelementptr inbounds float, float* %1, i64 %178
  %180 = load float, float* %179, align 4
  %181 = fmul float %180, 7.812500e-03
  store float %181, float* %179, align 4
  %182 = add nuw nsw i64 %178, 1
  %183 = icmp eq i64 %182, %121
  br i1 %183, label %184, label %177, !llvm.loop !6

184:                                              ; preds = %177, %173, %3, %119
  %185 = getelementptr inbounds %struct.DenseLayer, %struct.DenseLayer* %0, i64 0, i32 4
  %186 = load i32, i32* %185, align 8
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %191, label %188

188:                                              ; preds = %184
  br i1 %8, label %189, label %269

189:                                              ; preds = %188
  %190 = zext i32 %7 to i64
  br label %194

191:                                              ; preds = %184
  br i1 %8, label %192, label %269

192:                                              ; preds = %191
  %193 = zext i32 %7 to i64
  br label %233

194:                                              ; preds = %229, %189
  %195 = phi i64 [ 0, %189 ], [ %231, %229 ]
  %196 = getelementptr inbounds float, float* %1, i64 %195
  %197 = load float, float* %196, align 4
  %198 = fmul float %197, 5.000000e-01
  %199 = fcmp olt float %198, 8.000000e+00
  br i1 %199, label %200, label %229

200:                                              ; preds = %194
  %201 = fcmp ogt float %198, -8.000000e+00
  br i1 %201, label %202, label %229

202:                                              ; preds = %200
  %203 = fcmp uno float %198, 0.000000e+00
  br i1 %203, label %229, label %204

204:                                              ; preds = %202
  %205 = fcmp olt float %198, 0.000000e+00
  %206 = fsub float -0.000000e+00, %198
  %207 = select i1 %205, float %206, float %198
  %208 = select i1 %205, float -1.000000e+00, float 1.000000e+00
  %209 = fmul float %207, 2.500000e+01
  %210 = fadd float %209, 5.000000e-01
  %211 = tail call float @llvm.floor.f32(float %210) #4
  %212 = fptosi float %211 to i32
  %213 = sitofp i32 %212 to float
  %214 = fmul float %213, 0x3FA47AE140000000
  %215 = fsub float %207, %214
  %216 = sext i32 %212 to i64
  %217 = getelementptr inbounds [201 x float], [201 x float]* @tansig_table, i64 0, i64 %216
  %218 = load float, float* %217, align 4
  %219 = fmul float %218, %218
  %220 = fsub float 1.000000e+00, %219
  %221 = fmul float %215, %220
  %222 = fmul float %215, %218
  %223 = fsub float 1.000000e+00, %222
  %224 = fmul float %223, %221
  %225 = fadd float %218, %224
  %226 = fmul float %208, %225
  %227 = fmul float %226, 5.000000e-01
  %228 = fadd float %227, 5.000000e-01
  br label %229

229:                                              ; preds = %194, %200, %202, %204
  %230 = phi float [ %228, %204 ], [ 1.000000e+00, %194 ], [ 0.000000e+00, %200 ], [ 5.000000e-01, %202 ]
  store float %230, float* %196, align 4
  %231 = add nuw nsw i64 %195, 1
  %232 = icmp eq i64 %231, %190
  br i1 %232, label %269, label %194

233:                                              ; preds = %265, %192
  %234 = phi i64 [ 0, %192 ], [ %267, %265 ]
  %235 = getelementptr inbounds float, float* %1, i64 %234
  %236 = load float, float* %235, align 4
  %237 = fcmp olt float %236, 8.000000e+00
  br i1 %237, label %238, label %265

238:                                              ; preds = %233
  %239 = fcmp ogt float %236, -8.000000e+00
  br i1 %239, label %240, label %265

240:                                              ; preds = %238
  %241 = fcmp uno float %236, 0.000000e+00
  br i1 %241, label %265, label %242

242:                                              ; preds = %240
  %243 = fcmp olt float %236, 0.000000e+00
  %244 = fsub float -0.000000e+00, %236
  %245 = select i1 %243, float %244, float %236
  %246 = select i1 %243, float -1.000000e+00, float 1.000000e+00
  %247 = fmul float %245, 2.500000e+01
  %248 = fadd float %247, 5.000000e-01
  %249 = tail call float @llvm.floor.f32(float %248) #4
  %250 = fptosi float %249 to i32
  %251 = sitofp i32 %250 to float
  %252 = fmul float %251, 0x3FA47AE140000000
  %253 = fsub float %245, %252
  %254 = sext i32 %250 to i64
  %255 = getelementptr inbounds [201 x float], [201 x float]* @tansig_table, i64 0, i64 %254
  %256 = load float, float* %255, align 4
  %257 = fmul float %256, %256
  %258 = fsub float 1.000000e+00, %257
  %259 = fmul float %253, %258
  %260 = fmul float %253, %256
  %261 = fsub float 1.000000e+00, %260
  %262 = fmul float %261, %259
  %263 = fadd float %256, %262
  %264 = fmul float %246, %263
  br label %265

265:                                              ; preds = %233, %238, %240, %242
  %266 = phi float [ %264, %242 ], [ 1.000000e+00, %233 ], [ -1.000000e+00, %238 ], [ 0.000000e+00, %240 ]
  store float %266, float* %235, align 4
  %267 = add nuw nsw i64 %234, 1
  %268 = icmp eq i64 %267, %193
  br i1 %268, label %269, label %233

269:                                              ; preds = %229, %265, %188, %191
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @compute_gru(%struct.GRULayer* nocapture readonly, float* nocapture, float* nocapture readonly) local_unnamed_addr #2 {
  %4 = bitcast float* %1 to i8*
  %5 = alloca [32 x float], align 16
  %6 = alloca [32 x float], align 16
  %7 = alloca [32 x float], align 16
  %8 = alloca [32 x float], align 16
  %9 = bitcast [32 x float]* %8 to i8*
  %10 = bitcast [32 x float]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -1, i64 128, i1 false)
  %11 = bitcast [32 x float]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %11) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -1, i64 128, i1 false)
  %12 = bitcast [32 x float]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %12) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -1, i64 128, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %9) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -1, i64 128, i1 false)
  %13 = getelementptr inbounds %struct.GRULayer, %struct.GRULayer* %0, i64 0, i32 3
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %struct.GRULayer, %struct.GRULayer* %0, i64 0, i32 4
  %16 = load i32, i32* %15, align 4
  %17 = mul nsw i32 %16, 3
  %18 = icmp sgt i32 %16, 0
  br i1 %18, label %19, label %843

19:                                               ; preds = %3
  %20 = getelementptr inbounds %struct.GRULayer, %struct.GRULayer* %0, i64 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = zext i32 %16 to i64
  %23 = icmp ult i32 %16, 8
  br i1 %23, label %82, label %24

24:                                               ; preds = %19
  %25 = and i64 %22, 4294967288
  %26 = add nsw i64 %25, -8
  %27 = lshr exact i64 %26, 3
  %28 = add nuw nsw i64 %27, 1
  %29 = and i64 %28, 1
  %30 = icmp eq i64 %26, 0
  br i1 %30, label %64, label %31

31:                                               ; preds = %24
  %32 = sub nuw nsw i64 %28, %29
  br label %33

33:                                               ; preds = %33, %31
  %34 = phi i64 [ 0, %31 ], [ %61, %33 ]
  %35 = phi i64 [ %32, %31 ], [ %62, %33 ]
  %36 = getelementptr inbounds i8, i8* %21, i64 %34
  %37 = bitcast i8* %36 to <4 x i8>*
  %38 = load <4 x i8>, <4 x i8>* %37, align 1
  %39 = getelementptr inbounds i8, i8* %36, i64 4
  %40 = bitcast i8* %39 to <4 x i8>*
  %41 = load <4 x i8>, <4 x i8>* %40, align 1
  %42 = sitofp <4 x i8> %38 to <4 x float>
  %43 = sitofp <4 x i8> %41 to <4 x float>
  %44 = getelementptr inbounds [32 x float], [32 x float]* %6, i64 0, i64 %34
  %45 = bitcast float* %44 to <4 x float>*
  store <4 x float> %42, <4 x float>* %45, align 16
  %46 = getelementptr inbounds float, float* %44, i64 4
  %47 = bitcast float* %46 to <4 x float>*
  store <4 x float> %43, <4 x float>* %47, align 16
  %48 = or i64 %34, 8
  %49 = getelementptr inbounds i8, i8* %21, i64 %48
  %50 = bitcast i8* %49 to <4 x i8>*
  %51 = load <4 x i8>, <4 x i8>* %50, align 1
  %52 = getelementptr inbounds i8, i8* %49, i64 4
  %53 = bitcast i8* %52 to <4 x i8>*
  %54 = load <4 x i8>, <4 x i8>* %53, align 1
  %55 = sitofp <4 x i8> %51 to <4 x float>
  %56 = sitofp <4 x i8> %54 to <4 x float>
  %57 = getelementptr inbounds [32 x float], [32 x float]* %6, i64 0, i64 %48
  %58 = bitcast float* %57 to <4 x float>*
  store <4 x float> %55, <4 x float>* %58, align 16
  %59 = getelementptr inbounds float, float* %57, i64 4
  %60 = bitcast float* %59 to <4 x float>*
  store <4 x float> %56, <4 x float>* %60, align 16
  %61 = add i64 %34, 16
  %62 = add i64 %35, -2
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %33, !llvm.loop !8

64:                                               ; preds = %33, %24
  %65 = phi i64 [ 0, %24 ], [ %61, %33 ]
  %66 = icmp eq i64 %29, 0
  br i1 %66, label %80, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds i8, i8* %21, i64 %65
  %69 = bitcast i8* %68 to <4 x i8>*
  %70 = load <4 x i8>, <4 x i8>* %69, align 1
  %71 = getelementptr inbounds i8, i8* %68, i64 4
  %72 = bitcast i8* %71 to <4 x i8>*
  %73 = load <4 x i8>, <4 x i8>* %72, align 1
  %74 = sitofp <4 x i8> %70 to <4 x float>
  %75 = sitofp <4 x i8> %73 to <4 x float>
  %76 = getelementptr inbounds [32 x float], [32 x float]* %6, i64 0, i64 %65
  %77 = bitcast float* %76 to <4 x float>*
  store <4 x float> %74, <4 x float>* %77, align 16
  %78 = getelementptr inbounds float, float* %76, i64 4
  %79 = bitcast float* %78 to <4 x float>*
  store <4 x float> %75, <4 x float>* %79, align 16
  br label %80

80:                                               ; preds = %64, %67
  %81 = icmp eq i64 %25, %22
  br i1 %81, label %92, label %82

82:                                               ; preds = %80, %19
  %83 = phi i64 [ 0, %19 ], [ %25, %80 ]
  br label %84

84:                                               ; preds = %82, %84
  %85 = phi i64 [ %90, %84 ], [ %83, %82 ]
  %86 = getelementptr inbounds i8, i8* %21, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = sitofp i8 %87 to float
  %89 = getelementptr inbounds [32 x float], [32 x float]* %6, i64 0, i64 %85
  store float %88, float* %89, align 4
  %90 = add nuw nsw i64 %85, 1
  %91 = icmp eq i64 %90, %22
  br i1 %91, label %92, label %84, !llvm.loop !9

92:                                               ; preds = %84, %80
  %93 = getelementptr inbounds %struct.GRULayer, %struct.GRULayer* %0, i64 0, i32 1
  %94 = load i8*, i8** %93, align 8
  %95 = icmp sgt i32 %14, 0
  %96 = and i1 %95, %18
  br i1 %96, label %97, label %153

97:                                               ; preds = %92
  %98 = sext i32 %17 to i64
  %99 = zext i32 %16 to i64
  %100 = zext i32 %14 to i64
  %101 = and i64 %100, 1
  %102 = icmp eq i32 %14, 1
  %103 = sub nsw i64 %100, %101
  %104 = icmp eq i64 %101, 0
  br label %105

105:                                              ; preds = %149, %97
  %106 = phi i64 [ 0, %97 ], [ %151, %149 ]
  %107 = getelementptr inbounds [32 x float], [32 x float]* %6, i64 0, i64 %106
  %108 = load float, float* %107, align 4
  br i1 %102, label %135, label %109

109:                                              ; preds = %105, %109
  %110 = phi float [ %131, %109 ], [ %108, %105 ]
  %111 = phi i64 [ %132, %109 ], [ 0, %105 ]
  %112 = phi i64 [ %133, %109 ], [ %103, %105 ]
  %113 = mul nsw i64 %111, %98
  %114 = add nsw i64 %113, %106
  %115 = getelementptr inbounds i8, i8* %94, i64 %114
  %116 = load i8, i8* %115, align 1
  %117 = sitofp i8 %116 to float
  %118 = getelementptr inbounds float, float* %2, i64 %111
  %119 = load float, float* %118, align 4
  %120 = fmul float %119, %117
  %121 = fadd float %110, %120
  %122 = or i64 %111, 1
  %123 = mul nsw i64 %122, %98
  %124 = add nsw i64 %123, %106
  %125 = getelementptr inbounds i8, i8* %94, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = sitofp i8 %126 to float
  %128 = getelementptr inbounds float, float* %2, i64 %122
  %129 = load float, float* %128, align 4
  %130 = fmul float %129, %127
  %131 = fadd float %121, %130
  %132 = add nuw nsw i64 %111, 2
  %133 = add i64 %112, -2
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %135, label %109

135:                                              ; preds = %109, %105
  %136 = phi float [ undef, %105 ], [ %131, %109 ]
  %137 = phi float [ %108, %105 ], [ %131, %109 ]
  %138 = phi i64 [ 0, %105 ], [ %132, %109 ]
  br i1 %104, label %149, label %139

139:                                              ; preds = %135
  %140 = getelementptr inbounds float, float* %2, i64 %138
  %141 = load float, float* %140, align 4
  %142 = mul nsw i64 %138, %98
  %143 = add nsw i64 %142, %106
  %144 = getelementptr inbounds i8, i8* %94, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = sitofp i8 %145 to float
  %147 = fmul float %141, %146
  %148 = fadd float %137, %147
  br label %149

149:                                              ; preds = %135, %139
  %150 = phi float [ %136, %135 ], [ %148, %139 ]
  store float %150, float* %107, align 4
  %151 = add nuw nsw i64 %106, 1
  %152 = icmp eq i64 %151, %99
  br i1 %152, label %153, label %105

153:                                              ; preds = %149, %92
  %154 = phi i1 [ false, %92 ], [ %96, %149 ]
  %155 = getelementptr inbounds %struct.GRULayer, %struct.GRULayer* %0, i64 0, i32 2
  %156 = load i8*, i8** %155, align 8
  br i1 %18, label %157, label %216

157:                                              ; preds = %153
  %158 = sext i32 %17 to i64
  %159 = zext i32 %16 to i64
  %160 = and i64 %22, 1
  %161 = icmp eq i32 %16, 1
  %162 = sub nsw i64 %22, %160
  %163 = icmp eq i64 %160, 0
  br label %164

164:                                              ; preds = %208, %157
  %165 = phi i64 [ 0, %157 ], [ %210, %208 ]
  %166 = getelementptr inbounds [32 x float], [32 x float]* %6, i64 0, i64 %165
  %167 = load float, float* %166, align 4
  br i1 %161, label %194, label %168

168:                                              ; preds = %164, %168
  %169 = phi float [ %190, %168 ], [ %167, %164 ]
  %170 = phi i64 [ %191, %168 ], [ 0, %164 ]
  %171 = phi i64 [ %192, %168 ], [ %162, %164 ]
  %172 = mul nsw i64 %170, %158
  %173 = add nsw i64 %172, %165
  %174 = getelementptr inbounds i8, i8* %156, i64 %173
  %175 = load i8, i8* %174, align 1
  %176 = sitofp i8 %175 to float
  %177 = getelementptr inbounds float, float* %1, i64 %170
  %178 = load float, float* %177, align 4
  %179 = fmul float %178, %176
  %180 = fadd float %169, %179
  %181 = or i64 %170, 1
  %182 = mul nsw i64 %181, %158
  %183 = add nsw i64 %182, %165
  %184 = getelementptr inbounds i8, i8* %156, i64 %183
  %185 = load i8, i8* %184, align 1
  %186 = sitofp i8 %185 to float
  %187 = getelementptr inbounds float, float* %1, i64 %181
  %188 = load float, float* %187, align 4
  %189 = fmul float %188, %186
  %190 = fadd float %180, %189
  %191 = add nuw nsw i64 %170, 2
  %192 = add i64 %171, -2
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %194, label %168

194:                                              ; preds = %168, %164
  %195 = phi float [ undef, %164 ], [ %190, %168 ]
  %196 = phi float [ %167, %164 ], [ %190, %168 ]
  %197 = phi i64 [ 0, %164 ], [ %191, %168 ]
  br i1 %163, label %208, label %198

198:                                              ; preds = %194
  %199 = getelementptr inbounds float, float* %1, i64 %197
  %200 = load float, float* %199, align 4
  %201 = mul nsw i64 %197, %158
  %202 = add nsw i64 %201, %165
  %203 = getelementptr inbounds i8, i8* %156, i64 %202
  %204 = load i8, i8* %203, align 1
  %205 = sitofp i8 %204 to float
  %206 = fmul float %200, %205
  %207 = fadd float %196, %206
  br label %208

208:                                              ; preds = %194, %198
  %209 = phi float [ %195, %194 ], [ %207, %198 ]
  store float %209, float* %166, align 4
  %210 = add nuw nsw i64 %165, 1
  %211 = icmp eq i64 %210, %159
  br i1 %211, label %212, label %164

212:                                              ; preds = %208
  br i1 %18, label %213, label %216

213:                                              ; preds = %212
  %214 = zext i32 %16 to i64
  br label %287

215:                                              ; preds = %323
  br i1 %18, label %218, label %216

216:                                              ; preds = %153, %212, %215
  %217 = sext i32 %16 to i64
  br i1 %154, label %337, label %843

218:                                              ; preds = %215
  %219 = getelementptr inbounds %struct.GRULayer, %struct.GRULayer* %0, i64 0, i32 0
  %220 = load i8*, i8** %219, align 8
  %221 = sext i32 %16 to i64
  %222 = zext i32 %16 to i64
  %223 = icmp ult i32 %16, 8
  br i1 %223, label %224, label %226

224:                                              ; preds = %285, %218
  %225 = phi i64 [ 0, %218 ], [ %227, %285 ]
  br label %327

226:                                              ; preds = %218
  %227 = and i64 %22, 4294967288
  %228 = add nsw i64 %227, -8
  %229 = lshr exact i64 %228, 3
  %230 = add nuw nsw i64 %229, 1
  %231 = and i64 %230, 1
  %232 = icmp eq i64 %228, 0
  br i1 %232, label %268, label %233

233:                                              ; preds = %226
  %234 = sub nuw nsw i64 %230, %231
  br label %235

235:                                              ; preds = %235, %233
  %236 = phi i64 [ 0, %233 ], [ %265, %235 ]
  %237 = phi i64 [ %234, %233 ], [ %266, %235 ]
  %238 = add nsw i64 %236, %221
  %239 = getelementptr inbounds i8, i8* %220, i64 %238
  %240 = bitcast i8* %239 to <4 x i8>*
  %241 = load <4 x i8>, <4 x i8>* %240, align 1
  %242 = getelementptr inbounds i8, i8* %239, i64 4
  %243 = bitcast i8* %242 to <4 x i8>*
  %244 = load <4 x i8>, <4 x i8>* %243, align 1
  %245 = sitofp <4 x i8> %241 to <4 x float>
  %246 = sitofp <4 x i8> %244 to <4 x float>
  %247 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 %236
  %248 = bitcast float* %247 to <4 x float>*
  store <4 x float> %245, <4 x float>* %248, align 16
  %249 = getelementptr inbounds float, float* %247, i64 4
  %250 = bitcast float* %249 to <4 x float>*
  store <4 x float> %246, <4 x float>* %250, align 16
  %251 = or i64 %236, 8
  %252 = add nsw i64 %251, %221
  %253 = getelementptr inbounds i8, i8* %220, i64 %252
  %254 = bitcast i8* %253 to <4 x i8>*
  %255 = load <4 x i8>, <4 x i8>* %254, align 1
  %256 = getelementptr inbounds i8, i8* %253, i64 4
  %257 = bitcast i8* %256 to <4 x i8>*
  %258 = load <4 x i8>, <4 x i8>* %257, align 1
  %259 = sitofp <4 x i8> %255 to <4 x float>
  %260 = sitofp <4 x i8> %258 to <4 x float>
  %261 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 %251
  %262 = bitcast float* %261 to <4 x float>*
  store <4 x float> %259, <4 x float>* %262, align 16
  %263 = getelementptr inbounds float, float* %261, i64 4
  %264 = bitcast float* %263 to <4 x float>*
  store <4 x float> %260, <4 x float>* %264, align 16
  %265 = add i64 %236, 16
  %266 = add i64 %237, -2
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %235, !llvm.loop !10

268:                                              ; preds = %235, %226
  %269 = phi i64 [ 0, %226 ], [ %265, %235 ]
  %270 = icmp eq i64 %231, 0
  br i1 %270, label %285, label %271

271:                                              ; preds = %268
  %272 = add nsw i64 %269, %221
  %273 = getelementptr inbounds i8, i8* %220, i64 %272
  %274 = bitcast i8* %273 to <4 x i8>*
  %275 = load <4 x i8>, <4 x i8>* %274, align 1
  %276 = getelementptr inbounds i8, i8* %273, i64 4
  %277 = bitcast i8* %276 to <4 x i8>*
  %278 = load <4 x i8>, <4 x i8>* %277, align 1
  %279 = sitofp <4 x i8> %275 to <4 x float>
  %280 = sitofp <4 x i8> %278 to <4 x float>
  %281 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 %269
  %282 = bitcast float* %281 to <4 x float>*
  store <4 x float> %279, <4 x float>* %282, align 16
  %283 = getelementptr inbounds float, float* %281, i64 4
  %284 = bitcast float* %283 to <4 x float>*
  store <4 x float> %280, <4 x float>* %284, align 16
  br label %285

285:                                              ; preds = %268, %271
  %286 = icmp eq i64 %227, %22
  br i1 %286, label %336, label %224

287:                                              ; preds = %323, %213
  %288 = phi i64 [ 0, %213 ], [ %325, %323 ]
  %289 = getelementptr inbounds [32 x float], [32 x float]* %6, i64 0, i64 %288
  %290 = load float, float* %289, align 4
  %291 = fmul float %290, 7.812500e-03
  %292 = fmul float %291, 5.000000e-01
  %293 = fcmp olt float %292, 8.000000e+00
  br i1 %293, label %294, label %323

294:                                              ; preds = %287
  %295 = fcmp ogt float %292, -8.000000e+00
  br i1 %295, label %296, label %323

296:                                              ; preds = %294
  %297 = fcmp uno float %292, 0.000000e+00
  br i1 %297, label %323, label %298

298:                                              ; preds = %296
  %299 = fcmp olt float %292, 0.000000e+00
  %300 = fsub float -0.000000e+00, %292
  %301 = select i1 %299, float %300, float %292
  %302 = select i1 %299, float -1.000000e+00, float 1.000000e+00
  %303 = fmul float %301, 2.500000e+01
  %304 = fadd float %303, 5.000000e-01
  %305 = tail call float @llvm.floor.f32(float %304) #4
  %306 = fptosi float %305 to i32
  %307 = sitofp i32 %306 to float
  %308 = fmul float %307, 0x3FA47AE140000000
  %309 = fsub float %301, %308
  %310 = sext i32 %306 to i64
  %311 = getelementptr inbounds [201 x float], [201 x float]* @tansig_table, i64 0, i64 %310
  %312 = load float, float* %311, align 4
  %313 = fmul float %312, %312
  %314 = fsub float 1.000000e+00, %313
  %315 = fmul float %309, %314
  %316 = fmul float %309, %312
  %317 = fsub float 1.000000e+00, %316
  %318 = fmul float %317, %315
  %319 = fadd float %312, %318
  %320 = fmul float %302, %319
  %321 = fmul float %320, 5.000000e-01
  %322 = fadd float %321, 5.000000e-01
  br label %323

323:                                              ; preds = %287, %294, %296, %298
  %324 = phi float [ %322, %298 ], [ 1.000000e+00, %287 ], [ 0.000000e+00, %294 ], [ 5.000000e-01, %296 ]
  store float %324, float* %289, align 4
  %325 = add nuw nsw i64 %288, 1
  %326 = icmp eq i64 %325, %214
  br i1 %326, label %215, label %287

327:                                              ; preds = %224, %327
  %328 = phi i64 [ %334, %327 ], [ %225, %224 ]
  %329 = add nsw i64 %328, %221
  %330 = getelementptr inbounds i8, i8* %220, i64 %329
  %331 = load i8, i8* %330, align 1
  %332 = sitofp i8 %331 to float
  %333 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 %328
  store float %332, float* %333, align 4
  %334 = add nuw nsw i64 %328, 1
  %335 = icmp eq i64 %334, %222
  br i1 %335, label %336, label %327, !llvm.loop !11

336:                                              ; preds = %327, %285
  br i1 %154, label %337, label %395

337:                                              ; preds = %216, %336
  %338 = phi i64 [ %217, %216 ], [ %221, %336 ]
  %339 = getelementptr inbounds i8, i8* %94, i64 %338
  %340 = sext i32 %17 to i64
  %341 = zext i32 %16 to i64
  %342 = zext i32 %14 to i64
  %343 = and i64 %342, 1
  %344 = icmp eq i32 %14, 1
  %345 = sub nsw i64 %342, %343
  %346 = icmp eq i64 %343, 0
  br label %347

347:                                              ; preds = %391, %337
  %348 = phi i64 [ 0, %337 ], [ %393, %391 ]
  %349 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 %348
  %350 = load float, float* %349, align 4
  br i1 %344, label %377, label %351

351:                                              ; preds = %347, %351
  %352 = phi float [ %373, %351 ], [ %350, %347 ]
  %353 = phi i64 [ %374, %351 ], [ 0, %347 ]
  %354 = phi i64 [ %375, %351 ], [ %345, %347 ]
  %355 = mul nsw i64 %353, %340
  %356 = add nsw i64 %355, %348
  %357 = getelementptr inbounds i8, i8* %339, i64 %356
  %358 = load i8, i8* %357, align 1
  %359 = sitofp i8 %358 to float
  %360 = getelementptr inbounds float, float* %2, i64 %353
  %361 = load float, float* %360, align 4
  %362 = fmul float %361, %359
  %363 = fadd float %352, %362
  %364 = or i64 %353, 1
  %365 = mul nsw i64 %364, %340
  %366 = add nsw i64 %365, %348
  %367 = getelementptr inbounds i8, i8* %339, i64 %366
  %368 = load i8, i8* %367, align 1
  %369 = sitofp i8 %368 to float
  %370 = getelementptr inbounds float, float* %2, i64 %364
  %371 = load float, float* %370, align 4
  %372 = fmul float %371, %369
  %373 = fadd float %363, %372
  %374 = add nuw nsw i64 %353, 2
  %375 = add i64 %354, -2
  %376 = icmp eq i64 %375, 0
  br i1 %376, label %377, label %351

377:                                              ; preds = %351, %347
  %378 = phi float [ undef, %347 ], [ %373, %351 ]
  %379 = phi float [ %350, %347 ], [ %373, %351 ]
  %380 = phi i64 [ 0, %347 ], [ %374, %351 ]
  br i1 %346, label %391, label %381

381:                                              ; preds = %377
  %382 = getelementptr inbounds float, float* %2, i64 %380
  %383 = load float, float* %382, align 4
  %384 = mul nsw i64 %380, %340
  %385 = add nsw i64 %384, %348
  %386 = getelementptr inbounds i8, i8* %339, i64 %385
  %387 = load i8, i8* %386, align 1
  %388 = sitofp i8 %387 to float
  %389 = fmul float %383, %388
  %390 = fadd float %379, %389
  br label %391

391:                                              ; preds = %377, %381
  %392 = phi float [ %378, %377 ], [ %390, %381 ]
  store float %392, float* %349, align 4
  %393 = add nuw nsw i64 %348, 1
  %394 = icmp eq i64 %393, %341
  br i1 %394, label %395, label %347

395:                                              ; preds = %391, %336
  %396 = phi i64 [ %221, %336 ], [ %338, %391 ]
  %397 = phi i1 [ false, %336 ], [ true, %391 ]
  %398 = getelementptr inbounds i8, i8* %156, i64 %396
  br i1 %18, label %399, label %568

399:                                              ; preds = %395
  %400 = sext i32 %17 to i64
  %401 = zext i32 %16 to i64
  %402 = and i64 %22, 1
  %403 = icmp eq i32 %16, 1
  %404 = sub nsw i64 %22, %402
  %405 = icmp eq i64 %402, 0
  br label %406

406:                                              ; preds = %450, %399
  %407 = phi i64 [ 0, %399 ], [ %452, %450 ]
  %408 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 %407
  %409 = load float, float* %408, align 4
  br i1 %403, label %436, label %410

410:                                              ; preds = %406, %410
  %411 = phi float [ %432, %410 ], [ %409, %406 ]
  %412 = phi i64 [ %433, %410 ], [ 0, %406 ]
  %413 = phi i64 [ %434, %410 ], [ %404, %406 ]
  %414 = mul nsw i64 %412, %400
  %415 = add nsw i64 %414, %407
  %416 = getelementptr inbounds i8, i8* %398, i64 %415
  %417 = load i8, i8* %416, align 1
  %418 = sitofp i8 %417 to float
  %419 = getelementptr inbounds float, float* %1, i64 %412
  %420 = load float, float* %419, align 4
  %421 = fmul float %420, %418
  %422 = fadd float %411, %421
  %423 = or i64 %412, 1
  %424 = mul nsw i64 %423, %400
  %425 = add nsw i64 %424, %407
  %426 = getelementptr inbounds i8, i8* %398, i64 %425
  %427 = load i8, i8* %426, align 1
  %428 = sitofp i8 %427 to float
  %429 = getelementptr inbounds float, float* %1, i64 %423
  %430 = load float, float* %429, align 4
  %431 = fmul float %430, %428
  %432 = fadd float %422, %431
  %433 = add nuw nsw i64 %412, 2
  %434 = add i64 %413, -2
  %435 = icmp eq i64 %434, 0
  br i1 %435, label %436, label %410

436:                                              ; preds = %410, %406
  %437 = phi float [ undef, %406 ], [ %432, %410 ]
  %438 = phi float [ %409, %406 ], [ %432, %410 ]
  %439 = phi i64 [ 0, %406 ], [ %433, %410 ]
  br i1 %405, label %450, label %440

440:                                              ; preds = %436
  %441 = getelementptr inbounds float, float* %1, i64 %439
  %442 = load float, float* %441, align 4
  %443 = mul nsw i64 %439, %400
  %444 = add nsw i64 %443, %407
  %445 = getelementptr inbounds i8, i8* %398, i64 %444
  %446 = load i8, i8* %445, align 1
  %447 = sitofp i8 %446 to float
  %448 = fmul float %442, %447
  %449 = fadd float %438, %448
  br label %450

450:                                              ; preds = %436, %440
  %451 = phi float [ %437, %436 ], [ %449, %440 ]
  store float %451, float* %408, align 4
  %452 = add nuw nsw i64 %407, 1
  %453 = icmp eq i64 %452, %401
  br i1 %453, label %454, label %406

454:                                              ; preds = %450
  br i1 %18, label %455, label %568

455:                                              ; preds = %454
  %456 = zext i32 %16 to i64
  br label %528

457:                                              ; preds = %564
  br i1 %18, label %458, label %568

458:                                              ; preds = %457
  %459 = getelementptr inbounds %struct.GRULayer, %struct.GRULayer* %0, i64 0, i32 0
  %460 = load i8*, i8** %459, align 8
  %461 = shl i32 %16, 1
  %462 = sext i32 %461 to i64
  %463 = zext i32 %16 to i64
  %464 = icmp ult i32 %16, 8
  br i1 %464, label %465, label %467

465:                                              ; preds = %526, %458
  %466 = phi i64 [ 0, %458 ], [ %468, %526 ]
  br label %653

467:                                              ; preds = %458
  %468 = and i64 %22, 4294967288
  %469 = add nsw i64 %468, -8
  %470 = lshr exact i64 %469, 3
  %471 = add nuw nsw i64 %470, 1
  %472 = and i64 %471, 1
  %473 = icmp eq i64 %469, 0
  br i1 %473, label %509, label %474

474:                                              ; preds = %467
  %475 = sub nuw nsw i64 %471, %472
  br label %476

476:                                              ; preds = %476, %474
  %477 = phi i64 [ 0, %474 ], [ %506, %476 ]
  %478 = phi i64 [ %475, %474 ], [ %507, %476 ]
  %479 = add nsw i64 %477, %462
  %480 = getelementptr inbounds i8, i8* %460, i64 %479
  %481 = bitcast i8* %480 to <4 x i8>*
  %482 = load <4 x i8>, <4 x i8>* %481, align 1
  %483 = getelementptr inbounds i8, i8* %480, i64 4
  %484 = bitcast i8* %483 to <4 x i8>*
  %485 = load <4 x i8>, <4 x i8>* %484, align 1
  %486 = sitofp <4 x i8> %482 to <4 x float>
  %487 = sitofp <4 x i8> %485 to <4 x float>
  %488 = getelementptr inbounds [32 x float], [32 x float]* %8, i64 0, i64 %477
  %489 = bitcast float* %488 to <4 x float>*
  store <4 x float> %486, <4 x float>* %489, align 16
  %490 = getelementptr inbounds float, float* %488, i64 4
  %491 = bitcast float* %490 to <4 x float>*
  store <4 x float> %487, <4 x float>* %491, align 16
  %492 = or i64 %477, 8
  %493 = add nsw i64 %492, %462
  %494 = getelementptr inbounds i8, i8* %460, i64 %493
  %495 = bitcast i8* %494 to <4 x i8>*
  %496 = load <4 x i8>, <4 x i8>* %495, align 1
  %497 = getelementptr inbounds i8, i8* %494, i64 4
  %498 = bitcast i8* %497 to <4 x i8>*
  %499 = load <4 x i8>, <4 x i8>* %498, align 1
  %500 = sitofp <4 x i8> %496 to <4 x float>
  %501 = sitofp <4 x i8> %499 to <4 x float>
  %502 = getelementptr inbounds [32 x float], [32 x float]* %8, i64 0, i64 %492
  %503 = bitcast float* %502 to <4 x float>*
  store <4 x float> %500, <4 x float>* %503, align 16
  %504 = getelementptr inbounds float, float* %502, i64 4
  %505 = bitcast float* %504 to <4 x float>*
  store <4 x float> %501, <4 x float>* %505, align 16
  %506 = add i64 %477, 16
  %507 = add i64 %478, -2
  %508 = icmp eq i64 %507, 0
  br i1 %508, label %509, label %476, !llvm.loop !12

509:                                              ; preds = %476, %467
  %510 = phi i64 [ 0, %467 ], [ %506, %476 ]
  %511 = icmp eq i64 %472, 0
  br i1 %511, label %526, label %512

512:                                              ; preds = %509
  %513 = add nsw i64 %510, %462
  %514 = getelementptr inbounds i8, i8* %460, i64 %513
  %515 = bitcast i8* %514 to <4 x i8>*
  %516 = load <4 x i8>, <4 x i8>* %515, align 1
  %517 = getelementptr inbounds i8, i8* %514, i64 4
  %518 = bitcast i8* %517 to <4 x i8>*
  %519 = load <4 x i8>, <4 x i8>* %518, align 1
  %520 = sitofp <4 x i8> %516 to <4 x float>
  %521 = sitofp <4 x i8> %519 to <4 x float>
  %522 = getelementptr inbounds [32 x float], [32 x float]* %8, i64 0, i64 %510
  %523 = bitcast float* %522 to <4 x float>*
  store <4 x float> %520, <4 x float>* %523, align 16
  %524 = getelementptr inbounds float, float* %522, i64 4
  %525 = bitcast float* %524 to <4 x float>*
  store <4 x float> %521, <4 x float>* %525, align 16
  br label %526

526:                                              ; preds = %509, %512
  %527 = icmp eq i64 %468, %22
  br i1 %527, label %571, label %465

528:                                              ; preds = %564, %455
  %529 = phi i64 [ 0, %455 ], [ %566, %564 ]
  %530 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 %529
  %531 = load float, float* %530, align 4
  %532 = fmul float %531, 7.812500e-03
  %533 = fmul float %532, 5.000000e-01
  %534 = fcmp olt float %533, 8.000000e+00
  br i1 %534, label %535, label %564

535:                                              ; preds = %528
  %536 = fcmp ogt float %533, -8.000000e+00
  br i1 %536, label %537, label %564

537:                                              ; preds = %535
  %538 = fcmp uno float %533, 0.000000e+00
  br i1 %538, label %564, label %539

539:                                              ; preds = %537
  %540 = fcmp olt float %533, 0.000000e+00
  %541 = fsub float -0.000000e+00, %533
  %542 = select i1 %540, float %541, float %533
  %543 = select i1 %540, float -1.000000e+00, float 1.000000e+00
  %544 = fmul float %542, 2.500000e+01
  %545 = fadd float %544, 5.000000e-01
  %546 = tail call float @llvm.floor.f32(float %545) #4
  %547 = fptosi float %546 to i32
  %548 = sitofp i32 %547 to float
  %549 = fmul float %548, 0x3FA47AE140000000
  %550 = fsub float %542, %549
  %551 = sext i32 %547 to i64
  %552 = getelementptr inbounds [201 x float], [201 x float]* @tansig_table, i64 0, i64 %551
  %553 = load float, float* %552, align 4
  %554 = fmul float %553, %553
  %555 = fsub float 1.000000e+00, %554
  %556 = fmul float %550, %555
  %557 = fmul float %550, %553
  %558 = fsub float 1.000000e+00, %557
  %559 = fmul float %558, %556
  %560 = fadd float %553, %559
  %561 = fmul float %543, %560
  %562 = fmul float %561, 5.000000e-01
  %563 = fadd float %562, 5.000000e-01
  br label %564

564:                                              ; preds = %528, %535, %537, %539
  %565 = phi float [ %563, %539 ], [ 1.000000e+00, %528 ], [ 0.000000e+00, %535 ], [ 5.000000e-01, %537 ]
  store float %565, float* %530, align 4
  %566 = add nuw nsw i64 %529, 1
  %567 = icmp eq i64 %566, %456
  br i1 %567, label %457, label %528

568:                                              ; preds = %457, %454, %395
  %569 = shl nsw i32 %16, 1
  %570 = sext i32 %569 to i64
  br i1 %397, label %675, label %843

571:                                              ; preds = %653, %526
  br i1 %18, label %572, label %672

572:                                              ; preds = %571
  %573 = zext i32 %16 to i64
  %574 = icmp ult i32 %16, 8
  br i1 %574, label %575, label %577

575:                                              ; preds = %651, %572
  %576 = phi i64 [ 0, %572 ], [ %578, %651 ]
  br label %662

577:                                              ; preds = %572
  %578 = and i64 %22, 4294967288
  %579 = add nsw i64 %578, -8
  %580 = lshr exact i64 %579, 3
  %581 = add nuw nsw i64 %580, 1
  %582 = and i64 %581, 1
  %583 = icmp eq i64 %579, 0
  br i1 %583, label %629, label %584

584:                                              ; preds = %577
  %585 = sub nuw nsw i64 %581, %582
  br label %586

586:                                              ; preds = %586, %584
  %587 = phi i64 [ 0, %584 ], [ %626, %586 ]
  %588 = phi i64 [ %585, %584 ], [ %627, %586 ]
  %589 = getelementptr inbounds float, float* %1, i64 %587
  %590 = bitcast float* %589 to <4 x float>*
  %591 = load <4 x float>, <4 x float>* %590, align 4
  %592 = getelementptr inbounds float, float* %589, i64 4
  %593 = bitcast float* %592 to <4 x float>*
  %594 = load <4 x float>, <4 x float>* %593, align 4
  %595 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 %587
  %596 = bitcast float* %595 to <4 x float>*
  %597 = load <4 x float>, <4 x float>* %596, align 16
  %598 = getelementptr inbounds float, float* %595, i64 4
  %599 = bitcast float* %598 to <4 x float>*
  %600 = load <4 x float>, <4 x float>* %599, align 16
  %601 = fmul <4 x float> %591, %597
  %602 = fmul <4 x float> %594, %600
  %603 = getelementptr inbounds [32 x float], [32 x float]* %5, i64 0, i64 %587
  %604 = bitcast float* %603 to <4 x float>*
  store <4 x float> %601, <4 x float>* %604, align 16
  %605 = getelementptr inbounds float, float* %603, i64 4
  %606 = bitcast float* %605 to <4 x float>*
  store <4 x float> %602, <4 x float>* %606, align 16
  %607 = or i64 %587, 8
  %608 = getelementptr inbounds float, float* %1, i64 %607
  %609 = bitcast float* %608 to <4 x float>*
  %610 = load <4 x float>, <4 x float>* %609, align 4
  %611 = getelementptr inbounds float, float* %608, i64 4
  %612 = bitcast float* %611 to <4 x float>*
  %613 = load <4 x float>, <4 x float>* %612, align 4
  %614 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 %607
  %615 = bitcast float* %614 to <4 x float>*
  %616 = load <4 x float>, <4 x float>* %615, align 16
  %617 = getelementptr inbounds float, float* %614, i64 4
  %618 = bitcast float* %617 to <4 x float>*
  %619 = load <4 x float>, <4 x float>* %618, align 16
  %620 = fmul <4 x float> %610, %616
  %621 = fmul <4 x float> %613, %619
  %622 = getelementptr inbounds [32 x float], [32 x float]* %5, i64 0, i64 %607
  %623 = bitcast float* %622 to <4 x float>*
  store <4 x float> %620, <4 x float>* %623, align 16
  %624 = getelementptr inbounds float, float* %622, i64 4
  %625 = bitcast float* %624 to <4 x float>*
  store <4 x float> %621, <4 x float>* %625, align 16
  %626 = add i64 %587, 16
  %627 = add i64 %588, -2
  %628 = icmp eq i64 %627, 0
  br i1 %628, label %629, label %586, !llvm.loop !13

629:                                              ; preds = %586, %577
  %630 = phi i64 [ 0, %577 ], [ %626, %586 ]
  %631 = icmp eq i64 %582, 0
  br i1 %631, label %651, label %632

632:                                              ; preds = %629
  %633 = getelementptr inbounds float, float* %1, i64 %630
  %634 = bitcast float* %633 to <4 x float>*
  %635 = load <4 x float>, <4 x float>* %634, align 4
  %636 = getelementptr inbounds float, float* %633, i64 4
  %637 = bitcast float* %636 to <4 x float>*
  %638 = load <4 x float>, <4 x float>* %637, align 4
  %639 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 %630
  %640 = bitcast float* %639 to <4 x float>*
  %641 = load <4 x float>, <4 x float>* %640, align 16
  %642 = getelementptr inbounds float, float* %639, i64 4
  %643 = bitcast float* %642 to <4 x float>*
  %644 = load <4 x float>, <4 x float>* %643, align 16
  %645 = fmul <4 x float> %635, %641
  %646 = fmul <4 x float> %638, %644
  %647 = getelementptr inbounds [32 x float], [32 x float]* %5, i64 0, i64 %630
  %648 = bitcast float* %647 to <4 x float>*
  store <4 x float> %645, <4 x float>* %648, align 16
  %649 = getelementptr inbounds float, float* %647, i64 4
  %650 = bitcast float* %649 to <4 x float>*
  store <4 x float> %646, <4 x float>* %650, align 16
  br label %651

651:                                              ; preds = %629, %632
  %652 = icmp eq i64 %578, %22
  br i1 %652, label %672, label %575

653:                                              ; preds = %465, %653
  %654 = phi i64 [ %660, %653 ], [ %466, %465 ]
  %655 = add nsw i64 %654, %462
  %656 = getelementptr inbounds i8, i8* %460, i64 %655
  %657 = load i8, i8* %656, align 1
  %658 = sitofp i8 %657 to float
  %659 = getelementptr inbounds [32 x float], [32 x float]* %8, i64 0, i64 %654
  store float %658, float* %659, align 4
  %660 = add nuw nsw i64 %654, 1
  %661 = icmp eq i64 %660, %463
  br i1 %661, label %571, label %653, !llvm.loop !14

662:                                              ; preds = %575, %662
  %663 = phi i64 [ %670, %662 ], [ %576, %575 ]
  %664 = getelementptr inbounds float, float* %1, i64 %663
  %665 = load float, float* %664, align 4
  %666 = getelementptr inbounds [32 x float], [32 x float]* %7, i64 0, i64 %663
  %667 = load float, float* %666, align 4
  %668 = fmul float %665, %667
  %669 = getelementptr inbounds [32 x float], [32 x float]* %5, i64 0, i64 %663
  store float %668, float* %669, align 4
  %670 = add nuw nsw i64 %663, 1
  %671 = icmp eq i64 %670, %573
  br i1 %671, label %672, label %662, !llvm.loop !15

672:                                              ; preds = %662, %651, %571
  %673 = shl nsw i32 %16, 1
  %674 = sext i32 %673 to i64
  br i1 %397, label %675, label %733

675:                                              ; preds = %568, %672
  %676 = phi i64 [ %570, %568 ], [ %674, %672 ]
  %677 = getelementptr inbounds i8, i8* %94, i64 %676
  %678 = sext i32 %17 to i64
  %679 = zext i32 %16 to i64
  %680 = zext i32 %14 to i64
  %681 = and i64 %680, 1
  %682 = icmp eq i32 %14, 1
  %683 = sub nsw i64 %680, %681
  %684 = icmp eq i64 %681, 0
  br label %685

685:                                              ; preds = %729, %675
  %686 = phi i64 [ 0, %675 ], [ %731, %729 ]
  %687 = getelementptr inbounds [32 x float], [32 x float]* %8, i64 0, i64 %686
  %688 = load float, float* %687, align 4
  br i1 %682, label %715, label %689

689:                                              ; preds = %685, %689
  %690 = phi float [ %711, %689 ], [ %688, %685 ]
  %691 = phi i64 [ %712, %689 ], [ 0, %685 ]
  %692 = phi i64 [ %713, %689 ], [ %683, %685 ]
  %693 = mul nsw i64 %691, %678
  %694 = add nsw i64 %693, %686
  %695 = getelementptr inbounds i8, i8* %677, i64 %694
  %696 = load i8, i8* %695, align 1
  %697 = sitofp i8 %696 to float
  %698 = getelementptr inbounds float, float* %2, i64 %691
  %699 = load float, float* %698, align 4
  %700 = fmul float %699, %697
  %701 = fadd float %690, %700
  %702 = or i64 %691, 1
  %703 = mul nsw i64 %702, %678
  %704 = add nsw i64 %703, %686
  %705 = getelementptr inbounds i8, i8* %677, i64 %704
  %706 = load i8, i8* %705, align 1
  %707 = sitofp i8 %706 to float
  %708 = getelementptr inbounds float, float* %2, i64 %702
  %709 = load float, float* %708, align 4
  %710 = fmul float %709, %707
  %711 = fadd float %701, %710
  %712 = add nuw nsw i64 %691, 2
  %713 = add i64 %692, -2
  %714 = icmp eq i64 %713, 0
  br i1 %714, label %715, label %689

715:                                              ; preds = %689, %685
  %716 = phi float [ undef, %685 ], [ %711, %689 ]
  %717 = phi float [ %688, %685 ], [ %711, %689 ]
  %718 = phi i64 [ 0, %685 ], [ %712, %689 ]
  br i1 %684, label %729, label %719

719:                                              ; preds = %715
  %720 = getelementptr inbounds float, float* %2, i64 %718
  %721 = load float, float* %720, align 4
  %722 = mul nsw i64 %718, %678
  %723 = add nsw i64 %722, %686
  %724 = getelementptr inbounds i8, i8* %677, i64 %723
  %725 = load i8, i8* %724, align 1
  %726 = sitofp i8 %725 to float
  %727 = fmul float %721, %726
  %728 = fadd float %717, %727
  br label %729

729:                                              ; preds = %715, %719
  %730 = phi float [ %716, %715 ], [ %728, %719 ]
  store float %730, float* %687, align 4
  %731 = add nuw nsw i64 %686, 1
  %732 = icmp eq i64 %731, %679
  br i1 %732, label %733, label %685

733:                                              ; preds = %729, %672
  %734 = phi i64 [ %674, %672 ], [ %676, %729 ]
  %735 = getelementptr inbounds i8, i8* %156, i64 %734
  br i1 %18, label %736, label %843

736:                                              ; preds = %733
  %737 = sext i32 %17 to i64
  %738 = zext i32 %16 to i64
  %739 = and i64 %738, 1
  %740 = icmp eq i32 %16, 1
  %741 = sub nsw i64 %738, %739
  %742 = icmp eq i64 %739, 0
  br label %743

743:                                              ; preds = %787, %736
  %744 = phi i64 [ 0, %736 ], [ %789, %787 ]
  %745 = getelementptr inbounds [32 x float], [32 x float]* %8, i64 0, i64 %744
  %746 = load float, float* %745, align 4
  br i1 %740, label %773, label %747

747:                                              ; preds = %743, %747
  %748 = phi float [ %769, %747 ], [ %746, %743 ]
  %749 = phi i64 [ %770, %747 ], [ 0, %743 ]
  %750 = phi i64 [ %771, %747 ], [ %741, %743 ]
  %751 = mul nsw i64 %749, %737
  %752 = add nsw i64 %751, %744
  %753 = getelementptr inbounds i8, i8* %735, i64 %752
  %754 = load i8, i8* %753, align 1
  %755 = sitofp i8 %754 to float
  %756 = getelementptr inbounds [32 x float], [32 x float]* %5, i64 0, i64 %749
  %757 = load float, float* %756, align 8
  %758 = fmul float %757, %755
  %759 = fadd float %748, %758
  %760 = or i64 %749, 1
  %761 = mul nsw i64 %760, %737
  %762 = add nsw i64 %761, %744
  %763 = getelementptr inbounds i8, i8* %735, i64 %762
  %764 = load i8, i8* %763, align 1
  %765 = sitofp i8 %764 to float
  %766 = getelementptr inbounds [32 x float], [32 x float]* %5, i64 0, i64 %760
  %767 = load float, float* %766, align 4
  %768 = fmul float %767, %765
  %769 = fadd float %759, %768
  %770 = add nuw nsw i64 %749, 2
  %771 = add i64 %750, -2
  %772 = icmp eq i64 %771, 0
  br i1 %772, label %773, label %747

773:                                              ; preds = %747, %743
  %774 = phi float [ undef, %743 ], [ %769, %747 ]
  %775 = phi float [ %746, %743 ], [ %769, %747 ]
  %776 = phi i64 [ 0, %743 ], [ %770, %747 ]
  br i1 %742, label %787, label %777

777:                                              ; preds = %773
  %778 = getelementptr inbounds [32 x float], [32 x float]* %5, i64 0, i64 %776
  %779 = load float, float* %778, align 4
  %780 = mul nsw i64 %776, %737
  %781 = add nsw i64 %780, %744
  %782 = getelementptr inbounds i8, i8* %735, i64 %781
  %783 = load i8, i8* %782, align 1
  %784 = sitofp i8 %783 to float
  %785 = fmul float %779, %784
  %786 = fadd float %775, %785
  br label %787

787:                                              ; preds = %773, %777
  %788 = phi float [ %774, %773 ], [ %786, %777 ]
  store float %788, float* %745, align 4
  %789 = add nuw nsw i64 %744, 1
  %790 = icmp eq i64 %789, %738
  br i1 %790, label %791, label %743

791:                                              ; preds = %787
  br i1 %18, label %792, label %843

792:                                              ; preds = %791
  %793 = zext i32 %16 to i64
  br label %798

794:                                              ; preds = %837
  br i1 %18, label %795, label %843

795:                                              ; preds = %794
  %796 = zext i32 %16 to i64
  %797 = shl nuw nsw i64 %796, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* nonnull align 16 %9, i64 %797, i1 false)
  br label %843

798:                                              ; preds = %837, %792
  %799 = phi i64 [ 0, %792 ], [ %841, %837 ]
  %800 = getelementptr inbounds [32 x float], [32 x float]* %6, i64 0, i64 %799
  %801 = load float, float* %800, align 4
  %802 = getelementptr inbounds float, float* %1, i64 %799
  %803 = load float, float* %802, align 4
  %804 = fmul float %801, %803
  %805 = fsub float 1.000000e+00, %801
  %806 = getelementptr inbounds [32 x float], [32 x float]* %8, i64 0, i64 %799
  %807 = load float, float* %806, align 4
  %808 = fmul float %807, 7.812500e-03
  %809 = fcmp olt float %808, 8.000000e+00
  br i1 %809, label %810, label %837

810:                                              ; preds = %798
  %811 = fcmp ogt float %808, -8.000000e+00
  br i1 %811, label %812, label %837

812:                                              ; preds = %810
  %813 = fcmp uno float %808, 0.000000e+00
  br i1 %813, label %837, label %814

814:                                              ; preds = %812
  %815 = fcmp olt float %808, 0.000000e+00
  %816 = fsub float -0.000000e+00, %808
  %817 = select i1 %815, float %816, float %808
  %818 = select i1 %815, float -1.000000e+00, float 1.000000e+00
  %819 = fmul float %817, 2.500000e+01
  %820 = fadd float %819, 5.000000e-01
  %821 = tail call float @llvm.floor.f32(float %820) #4
  %822 = fptosi float %821 to i32
  %823 = sitofp i32 %822 to float
  %824 = fmul float %823, 0x3FA47AE140000000
  %825 = fsub float %817, %824
  %826 = sext i32 %822 to i64
  %827 = getelementptr inbounds [201 x float], [201 x float]* @tansig_table, i64 0, i64 %826
  %828 = load float, float* %827, align 4
  %829 = fmul float %828, %828
  %830 = fsub float 1.000000e+00, %829
  %831 = fmul float %825, %830
  %832 = fmul float %825, %828
  %833 = fsub float 1.000000e+00, %832
  %834 = fmul float %833, %831
  %835 = fadd float %828, %834
  %836 = fmul float %818, %835
  br label %837

837:                                              ; preds = %798, %810, %812, %814
  %838 = phi float [ %836, %814 ], [ 1.000000e+00, %798 ], [ -1.000000e+00, %810 ], [ 0.000000e+00, %812 ]
  %839 = fmul float %805, %838
  %840 = fadd float %804, %839
  store float %840, float* %806, align 4
  %841 = add nuw nsw i64 %799, 1
  %842 = icmp eq i64 %841, %793
  br i1 %842, label %794, label %798

843:                                              ; preds = %3, %216, %568, %733, %791, %795, %794
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %9) #4
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %12) #4
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %11) #4
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.isvectorized", i32 1}
!6 = distinct !{!6, !7, !5}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !5}
!9 = distinct !{!9, !7, !5}
!10 = distinct !{!10, !5}
!11 = distinct !{!11, !7, !5}
!12 = distinct !{!12, !5}
!13 = distinct !{!13, !5}
!14 = distinct !{!14, !7, !5}
!15 = distinct !{!15, !7, !5}
