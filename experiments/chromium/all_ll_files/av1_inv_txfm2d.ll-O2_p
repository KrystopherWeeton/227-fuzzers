; ModuleID = '../../third_party/libaom/source/libaom/av1/common/av1_inv_txfm2d.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/av1_inv_txfm2d.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TXFM_2D_FLIP_CFG = type { i8, i32, i32, i8*, i8, i8, [12 x i8], [12 x i8], i8, i8, i32, i32 }

@inv_shift_4x4 = internal constant [2 x i8] c"\00\FC", align 1
@inv_shift_8x8 = internal constant [2 x i8] c"\FF\FC", align 1
@inv_shift_16x16 = internal constant [2 x i8] c"\FE\FC", align 1
@inv_shift_32x32 = internal constant [2 x i8] c"\FE\FC", align 1
@inv_shift_64x64 = internal constant [2 x i8] c"\FE\FC", align 1
@inv_shift_4x8 = internal constant [2 x i8] c"\00\FC", align 1
@inv_shift_8x4 = internal constant [2 x i8] c"\00\FC", align 1
@inv_shift_8x16 = internal constant [2 x i8] c"\FF\FC", align 1
@inv_shift_16x8 = internal constant [2 x i8] c"\FF\FC", align 1
@inv_shift_16x32 = internal constant [2 x i8] c"\FF\FC", align 1
@inv_shift_32x16 = internal constant [2 x i8] c"\FF\FC", align 1
@inv_shift_32x64 = internal constant [2 x i8] c"\FF\FC", align 1
@inv_shift_64x32 = internal constant [2 x i8] c"\FF\FC", align 1
@inv_shift_4x16 = internal constant [2 x i8] c"\FF\FC", align 1
@inv_shift_16x4 = internal constant [2 x i8] c"\FF\FC", align 1
@inv_shift_8x32 = internal constant [2 x i8] c"\FE\FC", align 1
@inv_shift_32x8 = internal constant [2 x i8] c"\FE\FC", align 1
@inv_shift_16x64 = internal constant [2 x i8] c"\FE\FC", align 1
@inv_shift_64x16 = internal constant [2 x i8] c"\FE\FC", align 1
@av1_inv_txfm_shift_ls = hidden local_unnamed_addr global [19 x i8*] [i8* getelementptr inbounds ([2 x i8], [2 x i8]* @inv_shift_4x4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @inv_shift_8x8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @inv_shift_16x16, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @inv_shift_32x32, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @inv_shift_64x64, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @inv_shift_4x8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @inv_shift_8x4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @inv_shift_8x16, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @inv_shift_16x8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @inv_shift_16x32, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @inv_shift_32x16, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @inv_shift_32x64, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @inv_shift_64x32, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @inv_shift_4x16, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @inv_shift_16x4, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @inv_shift_8x32, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @inv_shift_32x8, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @inv_shift_16x64, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @inv_shift_64x16, i32 0, i32 0)], align 16
@av1_inv_cos_bit_col = hidden local_unnamed_addr constant [5 x [5 x i8]] [[5 x i8] c"\0C\0C\0C\00\00", [5 x i8] c"\0C\0C\0C\0C\00", [5 x i8] c"\0C\0C\0C\0C\0C", [5 x i8] c"\00\0C\0C\0C\0C", [5 x i8] c"\00\00\0C\0C\0C"], align 16
@av1_inv_cos_bit_row = hidden local_unnamed_addr constant [5 x [5 x i8]] [[5 x i8] c"\0C\0C\0C\00\00", [5 x i8] c"\0C\0C\0C\0C\00", [5 x i8] c"\0C\0C\0C\0C\0C", [5 x i8] c"\00\0C\0C\0C\0C", [5 x i8] c"\00\00\0C\0C\0C"], align 16
@vtx_tab = internal unnamed_addr constant [16 x i8] c"\00\01\00\01\02\00\02\01\02\03\00\03\01\03\02\03", align 16
@htx_tab = internal unnamed_addr constant [16 x i8] c"\00\00\01\01\00\02\02\02\01\03\03\00\03\01\03\02", align 16
@av1_txfm_type_ls = external local_unnamed_addr constant [5 x [4 x i8]], align 16
@iadst4_range = internal unnamed_addr constant [7 x i8] c"\00\01\00\00\00\00\00", align 1
@av1_txfm_stage_num_list = external local_unnamed_addr constant [12 x i8], align 1
@tx_size_wide_log2 = internal unnamed_addr constant [19 x i32] [i32 2, i32 3, i32 4, i32 5, i32 6, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 2, i32 4, i32 3, i32 5, i32 4, i32 6], align 16
@tx_size_high_log2 = internal unnamed_addr constant [19 x i32] [i32 2, i32 3, i32 4, i32 5, i32 6, i32 3, i32 2, i32 4, i32 3, i32 5, i32 4, i32 6, i32 5, i32 4, i32 2, i32 5, i32 3, i32 6, i32 4], align 16
@tx_size_wide = internal unnamed_addr constant [19 x i32] [i32 4, i32 8, i32 16, i32 32, i32 64, i32 4, i32 8, i32 8, i32 16, i32 16, i32 32, i32 32, i32 64, i32 4, i32 16, i32 8, i32 32, i32 16, i32 64], align 16
@tx_size_high = internal unnamed_addr constant [19 x i32] [i32 4, i32 8, i32 16, i32 32, i32 64, i32 8, i32 4, i32 16, i32 8, i32 32, i32 16, i32 64, i32 32, i32 16, i32 4, i32 32, i32 8, i32 64, i32 16], align 16
@av1_round_shift_array = external local_unnamed_addr global void (i32*, i32, i32)*, align 8
@switch.table.av1_get_inv_txfm_cfg = private unnamed_addr constant [16 x i32] [i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0], align 4
@switch.table.av1_get_inv_txfm_cfg.1 = private unnamed_addr constant [16 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1], align 4
@switch.table.inv_txfm2d_add_facade.2 = private unnamed_addr constant [12 x void (i32*, i32*, i8, i8*)*] [void (i32*, i32*, i8, i8*)* @av1_idct4, void (i32*, i32*, i8, i8*)* @av1_idct8, void (i32*, i32*, i8, i8*)* @av1_idct16, void (i32*, i32*, i8, i8*)* @av1_idct32, void (i32*, i32*, i8, i8*)* @av1_idct64, void (i32*, i32*, i8, i8*)* @av1_iadst4, void (i32*, i32*, i8, i8*)* @av1_iadst8, void (i32*, i32*, i8, i8*)* @av1_iadst16, void (i32*, i32*, i8, i8*)* @av1_iidentity4_c, void (i32*, i32*, i8, i8*)* @av1_iidentity8_c, void (i32*, i32*, i8, i8*)* @av1_iidentity16_c, void (i32*, i32*, i8, i8*)* @av1_iidentity32_c], align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_highbd_iwht4x4_16_add_c(i32* nocapture readonly, i8*, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [16 x i32], align 16
  %6 = bitcast [16 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #5
  %7 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 12
  %8 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 16, i1 false)
  %9 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 0
  %10 = ptrtoint i8* %1 to i64
  %11 = shl i64 %10, 1
  %12 = load i32, i32* %0, align 4
  %13 = ashr i32 %12, 2
  %14 = getelementptr inbounds i32, i32* %0, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = ashr i32 %15, 2
  %17 = getelementptr inbounds i32, i32* %0, i64 2
  %18 = load i32, i32* %17, align 4
  %19 = ashr i32 %18, 2
  %20 = getelementptr inbounds i32, i32* %0, i64 3
  %21 = load i32, i32* %20, align 4
  %22 = ashr i32 %21, 2
  %23 = add nsw i32 %16, %13
  %24 = sub nsw i32 %19, %22
  %25 = sub nsw i32 %23, %24
  %26 = ashr i32 %25, 1
  %27 = sub nsw i32 %26, %22
  %28 = sub nsw i32 %26, %16
  %29 = sub nsw i32 %23, %27
  %30 = add nsw i32 %28, %24
  store i32 %29, i32* %9, align 16
  %31 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 1
  store i32 %27, i32* %31, align 4
  %32 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 2
  store i32 %28, i32* %32, align 8
  %33 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 3
  store i32 %30, i32* %33, align 4
  %34 = getelementptr inbounds i32, i32* %0, i64 4
  %35 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 4
  %36 = load i32, i32* %34, align 4
  %37 = ashr i32 %36, 2
  %38 = getelementptr inbounds i32, i32* %0, i64 5
  %39 = load i32, i32* %38, align 4
  %40 = ashr i32 %39, 2
  %41 = getelementptr inbounds i32, i32* %0, i64 6
  %42 = load i32, i32* %41, align 4
  %43 = ashr i32 %42, 2
  %44 = getelementptr inbounds i32, i32* %0, i64 7
  %45 = load i32, i32* %44, align 4
  %46 = ashr i32 %45, 2
  %47 = add nsw i32 %40, %37
  %48 = sub nsw i32 %43, %46
  %49 = sub nsw i32 %47, %48
  %50 = ashr i32 %49, 1
  %51 = sub nsw i32 %50, %46
  %52 = sub nsw i32 %50, %40
  %53 = sub nsw i32 %47, %51
  %54 = add nsw i32 %52, %48
  store i32 %53, i32* %35, align 16
  %55 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 5
  store i32 %51, i32* %55, align 4
  %56 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 6
  store i32 %52, i32* %56, align 8
  %57 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 7
  store i32 %54, i32* %57, align 4
  %58 = getelementptr inbounds i32, i32* %0, i64 8
  %59 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 8
  %60 = load i32, i32* %58, align 4
  %61 = ashr i32 %60, 2
  %62 = getelementptr inbounds i32, i32* %0, i64 9
  %63 = load i32, i32* %62, align 4
  %64 = ashr i32 %63, 2
  %65 = getelementptr inbounds i32, i32* %0, i64 10
  %66 = load i32, i32* %65, align 4
  %67 = ashr i32 %66, 2
  %68 = getelementptr inbounds i32, i32* %0, i64 11
  %69 = load i32, i32* %68, align 4
  %70 = ashr i32 %69, 2
  %71 = add nsw i32 %64, %61
  %72 = sub nsw i32 %67, %70
  %73 = sub nsw i32 %71, %72
  %74 = ashr i32 %73, 1
  %75 = sub nsw i32 %74, %70
  %76 = sub nsw i32 %74, %64
  %77 = sub nsw i32 %71, %75
  %78 = add nsw i32 %76, %72
  store i32 %77, i32* %59, align 16
  %79 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 9
  store i32 %75, i32* %79, align 4
  %80 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 10
  store i32 %76, i32* %80, align 8
  %81 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 11
  store i32 %78, i32* %81, align 4
  %82 = getelementptr inbounds i32, i32* %0, i64 12
  %83 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 12
  %84 = load i32, i32* %82, align 4
  %85 = ashr i32 %84, 2
  %86 = getelementptr inbounds i32, i32* %0, i64 13
  %87 = load i32, i32* %86, align 4
  %88 = ashr i32 %87, 2
  %89 = getelementptr inbounds i32, i32* %0, i64 14
  %90 = load i32, i32* %89, align 4
  %91 = ashr i32 %90, 2
  %92 = getelementptr inbounds i32, i32* %0, i64 15
  %93 = load i32, i32* %92, align 4
  %94 = ashr i32 %93, 2
  %95 = add nsw i32 %88, %85
  %96 = sub nsw i32 %91, %94
  %97 = sub nsw i32 %95, %96
  %98 = ashr i32 %97, 1
  %99 = sub nsw i32 %98, %94
  %100 = sub nsw i32 %98, %88
  %101 = sub nsw i32 %95, %99
  %102 = add nsw i32 %100, %96
  store i32 %101, i32* %83, align 16
  %103 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 13
  store i32 %99, i32* %103, align 4
  %104 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 14
  store i32 %100, i32* %104, align 8
  %105 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 15
  store i32 %102, i32* %105, align 4
  %106 = inttoptr i64 %11 to i16*
  %107 = sext i32 %2 to i64
  %108 = shl nsw i32 %2, 1
  %109 = sext i32 %108 to i64
  %110 = mul nsw i32 %2, 3
  %111 = sext i32 %110 to i64
  br label %112

112:                                              ; preds = %232, %4
  %113 = phi i32 [ %53, %4 ], [ %236, %232 ]
  %114 = phi i32 [ %29, %4 ], [ %234, %232 ]
  %115 = phi i16* [ %106, %4 ], [ %233, %232 ]
  %116 = phi i32* [ %9, %4 ], [ %229, %232 ]
  %117 = phi i32 [ 0, %4 ], [ %230, %232 ]
  %118 = getelementptr inbounds i32, i32* %116, i64 8
  %119 = load i32, i32* %118, align 4
  %120 = getelementptr inbounds i32, i32* %116, i64 12
  %121 = load i32, i32* %120, align 4
  %122 = add nsw i32 %113, %114
  %123 = sub nsw i32 %119, %121
  %124 = sub nsw i32 %122, %123
  %125 = ashr i32 %124, 1
  %126 = sub nsw i32 %125, %121
  %127 = sub nsw i32 %125, %113
  %128 = sub nsw i32 %122, %126
  %129 = add nsw i32 %127, %123
  %130 = load i16, i16* %115, align 2
  %131 = zext i16 %130 to i32
  %132 = add nsw i32 %128, %131
  switch i32 %3, label %193 [
    i32 12, label %163
    i32 10, label %133
  ]

133:                                              ; preds = %112
  %134 = icmp slt i32 %132, 1023
  %135 = select i1 %134, i32 %132, i32 1023
  %136 = icmp sgt i32 %135, 0
  %137 = select i1 %136, i32 %135, i32 0
  %138 = trunc i32 %137 to i16
  store i16 %138, i16* %115, align 2
  %139 = getelementptr inbounds i16, i16* %115, i64 %107
  %140 = load i16, i16* %139, align 2
  %141 = zext i16 %140 to i32
  %142 = add nsw i32 %126, %141
  %143 = icmp slt i32 %142, 1023
  %144 = select i1 %143, i32 %142, i32 1023
  %145 = icmp sgt i32 %144, 0
  %146 = select i1 %145, i32 %144, i32 0
  %147 = trunc i32 %146 to i16
  store i16 %147, i16* %139, align 2
  %148 = getelementptr inbounds i16, i16* %115, i64 %109
  %149 = load i16, i16* %148, align 2
  %150 = zext i16 %149 to i32
  %151 = add nsw i32 %127, %150
  %152 = icmp slt i32 %151, 1023
  %153 = select i1 %152, i32 %151, i32 1023
  %154 = icmp sgt i32 %153, 0
  %155 = select i1 %154, i32 %153, i32 0
  %156 = trunc i32 %155 to i16
  store i16 %156, i16* %148, align 2
  %157 = getelementptr inbounds i16, i16* %115, i64 %111
  %158 = load i16, i16* %157, align 2
  %159 = zext i16 %158 to i32
  %160 = add nsw i32 %129, %159
  %161 = icmp slt i32 %160, 1023
  %162 = select i1 %161, i32 %160, i32 1023
  br label %223

163:                                              ; preds = %112
  %164 = icmp slt i32 %132, 4095
  %165 = select i1 %164, i32 %132, i32 4095
  %166 = icmp sgt i32 %165, 0
  %167 = select i1 %166, i32 %165, i32 0
  %168 = trunc i32 %167 to i16
  store i16 %168, i16* %115, align 2
  %169 = getelementptr inbounds i16, i16* %115, i64 %107
  %170 = load i16, i16* %169, align 2
  %171 = zext i16 %170 to i32
  %172 = add nsw i32 %126, %171
  %173 = icmp slt i32 %172, 4095
  %174 = select i1 %173, i32 %172, i32 4095
  %175 = icmp sgt i32 %174, 0
  %176 = select i1 %175, i32 %174, i32 0
  %177 = trunc i32 %176 to i16
  store i16 %177, i16* %169, align 2
  %178 = getelementptr inbounds i16, i16* %115, i64 %109
  %179 = load i16, i16* %178, align 2
  %180 = zext i16 %179 to i32
  %181 = add nsw i32 %127, %180
  %182 = icmp slt i32 %181, 4095
  %183 = select i1 %182, i32 %181, i32 4095
  %184 = icmp sgt i32 %183, 0
  %185 = select i1 %184, i32 %183, i32 0
  %186 = trunc i32 %185 to i16
  store i16 %186, i16* %178, align 2
  %187 = getelementptr inbounds i16, i16* %115, i64 %111
  %188 = load i16, i16* %187, align 2
  %189 = zext i16 %188 to i32
  %190 = add nsw i32 %129, %189
  %191 = icmp slt i32 %190, 4095
  %192 = select i1 %191, i32 %190, i32 4095
  br label %223

193:                                              ; preds = %112
  %194 = icmp slt i32 %132, 255
  %195 = select i1 %194, i32 %132, i32 255
  %196 = icmp sgt i32 %195, 0
  %197 = select i1 %196, i32 %195, i32 0
  %198 = trunc i32 %197 to i16
  store i16 %198, i16* %115, align 2
  %199 = getelementptr inbounds i16, i16* %115, i64 %107
  %200 = load i16, i16* %199, align 2
  %201 = zext i16 %200 to i32
  %202 = add nsw i32 %126, %201
  %203 = icmp slt i32 %202, 255
  %204 = select i1 %203, i32 %202, i32 255
  %205 = icmp sgt i32 %204, 0
  %206 = select i1 %205, i32 %204, i32 0
  %207 = trunc i32 %206 to i16
  store i16 %207, i16* %199, align 2
  %208 = getelementptr inbounds i16, i16* %115, i64 %109
  %209 = load i16, i16* %208, align 2
  %210 = zext i16 %209 to i32
  %211 = add nsw i32 %127, %210
  %212 = icmp slt i32 %211, 255
  %213 = select i1 %212, i32 %211, i32 255
  %214 = icmp sgt i32 %213, 0
  %215 = select i1 %214, i32 %213, i32 0
  %216 = trunc i32 %215 to i16
  store i16 %216, i16* %208, align 2
  %217 = getelementptr inbounds i16, i16* %115, i64 %111
  %218 = load i16, i16* %217, align 2
  %219 = zext i16 %218 to i32
  %220 = add nsw i32 %129, %219
  %221 = icmp slt i32 %220, 255
  %222 = select i1 %221, i32 %220, i32 255
  br label %223

223:                                              ; preds = %193, %133, %163
  %224 = phi i32 [ %222, %193 ], [ %162, %133 ], [ %192, %163 ]
  %225 = phi i16* [ %217, %193 ], [ %157, %133 ], [ %187, %163 ]
  %226 = icmp sgt i32 %224, 0
  %227 = select i1 %226, i32 %224, i32 0
  %228 = trunc i32 %227 to i16
  store i16 %228, i16* %225, align 2
  %229 = getelementptr inbounds i32, i32* %116, i64 1
  %230 = add nuw nsw i32 %117, 1
  %231 = icmp eq i32 %230, 4
  br i1 %231, label %237, label %232

232:                                              ; preds = %223
  %233 = getelementptr inbounds i16, i16* %115, i64 1
  %234 = load i32, i32* %229, align 4
  %235 = getelementptr inbounds i32, i32* %116, i64 5
  %236 = load i32, i32* %235, align 4
  br label %112

237:                                              ; preds = %223
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_highbd_iwht4x4_1_add_c(i32* nocapture readonly, i8*, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [4 x i32], align 16
  %6 = bitcast [4 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #5
  %7 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 0
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 1
  %9 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 2
  %10 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 3
  %11 = ptrtoint i8* %1 to i64
  %12 = shl i64 %11, 1
  %13 = inttoptr i64 %12 to i16*
  %14 = load i32, i32* %0, align 4
  %15 = ashr i32 %14, 2
  %16 = ashr i32 %14, 3
  %17 = sub nsw i32 %15, %16
  store i32 %17, i32* %7, align 16
  store i32 %16, i32* %10, align 4
  store i32 %16, i32* %9, align 8
  store i32 %16, i32* %8, align 4
  %18 = sext i32 %2 to i64
  %19 = shl nsw i32 %2, 1
  %20 = sext i32 %19 to i64
  %21 = mul nsw i32 %2, 3
  %22 = sext i32 %21 to i64
  br label %23

23:                                               ; preds = %132, %4
  %24 = phi i32 [ %17, %4 ], [ %134, %132 ]
  %25 = phi i16* [ %13, %4 ], [ %133, %132 ]
  %26 = phi i32 [ 0, %4 ], [ %130, %132 ]
  %27 = phi i32* [ %7, %4 ], [ %129, %132 ]
  %28 = ashr i32 %24, 1
  %29 = sub nsw i32 %24, %28
  %30 = load i16, i16* %25, align 2
  %31 = zext i16 %30 to i32
  %32 = add nsw i32 %29, %31
  switch i32 %3, label %93 [
    i32 12, label %63
    i32 10, label %33
  ]

33:                                               ; preds = %23
  %34 = icmp slt i32 %32, 1023
  %35 = select i1 %34, i32 %32, i32 1023
  %36 = icmp sgt i32 %35, 0
  %37 = select i1 %36, i32 %35, i32 0
  %38 = trunc i32 %37 to i16
  store i16 %38, i16* %25, align 2
  %39 = getelementptr inbounds i16, i16* %25, i64 %18
  %40 = load i16, i16* %39, align 2
  %41 = zext i16 %40 to i32
  %42 = add nsw i32 %28, %41
  %43 = icmp slt i32 %42, 1023
  %44 = select i1 %43, i32 %42, i32 1023
  %45 = icmp sgt i32 %44, 0
  %46 = select i1 %45, i32 %44, i32 0
  %47 = trunc i32 %46 to i16
  store i16 %47, i16* %39, align 2
  %48 = getelementptr inbounds i16, i16* %25, i64 %20
  %49 = load i16, i16* %48, align 2
  %50 = zext i16 %49 to i32
  %51 = add nsw i32 %28, %50
  %52 = icmp slt i32 %51, 1023
  %53 = select i1 %52, i32 %51, i32 1023
  %54 = icmp sgt i32 %53, 0
  %55 = select i1 %54, i32 %53, i32 0
  %56 = trunc i32 %55 to i16
  store i16 %56, i16* %48, align 2
  %57 = getelementptr inbounds i16, i16* %25, i64 %22
  %58 = load i16, i16* %57, align 2
  %59 = zext i16 %58 to i32
  %60 = add nsw i32 %28, %59
  %61 = icmp slt i32 %60, 1023
  %62 = select i1 %61, i32 %60, i32 1023
  br label %123

63:                                               ; preds = %23
  %64 = icmp slt i32 %32, 4095
  %65 = select i1 %64, i32 %32, i32 4095
  %66 = icmp sgt i32 %65, 0
  %67 = select i1 %66, i32 %65, i32 0
  %68 = trunc i32 %67 to i16
  store i16 %68, i16* %25, align 2
  %69 = getelementptr inbounds i16, i16* %25, i64 %18
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i32
  %72 = add nsw i32 %28, %71
  %73 = icmp slt i32 %72, 4095
  %74 = select i1 %73, i32 %72, i32 4095
  %75 = icmp sgt i32 %74, 0
  %76 = select i1 %75, i32 %74, i32 0
  %77 = trunc i32 %76 to i16
  store i16 %77, i16* %69, align 2
  %78 = getelementptr inbounds i16, i16* %25, i64 %20
  %79 = load i16, i16* %78, align 2
  %80 = zext i16 %79 to i32
  %81 = add nsw i32 %28, %80
  %82 = icmp slt i32 %81, 4095
  %83 = select i1 %82, i32 %81, i32 4095
  %84 = icmp sgt i32 %83, 0
  %85 = select i1 %84, i32 %83, i32 0
  %86 = trunc i32 %85 to i16
  store i16 %86, i16* %78, align 2
  %87 = getelementptr inbounds i16, i16* %25, i64 %22
  %88 = load i16, i16* %87, align 2
  %89 = zext i16 %88 to i32
  %90 = add nsw i32 %28, %89
  %91 = icmp slt i32 %90, 4095
  %92 = select i1 %91, i32 %90, i32 4095
  br label %123

93:                                               ; preds = %23
  %94 = icmp slt i32 %32, 255
  %95 = select i1 %94, i32 %32, i32 255
  %96 = icmp sgt i32 %95, 0
  %97 = select i1 %96, i32 %95, i32 0
  %98 = trunc i32 %97 to i16
  store i16 %98, i16* %25, align 2
  %99 = getelementptr inbounds i16, i16* %25, i64 %18
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = add nsw i32 %28, %101
  %103 = icmp slt i32 %102, 255
  %104 = select i1 %103, i32 %102, i32 255
  %105 = icmp sgt i32 %104, 0
  %106 = select i1 %105, i32 %104, i32 0
  %107 = trunc i32 %106 to i16
  store i16 %107, i16* %99, align 2
  %108 = getelementptr inbounds i16, i16* %25, i64 %20
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = add nsw i32 %28, %110
  %112 = icmp slt i32 %111, 255
  %113 = select i1 %112, i32 %111, i32 255
  %114 = icmp sgt i32 %113, 0
  %115 = select i1 %114, i32 %113, i32 0
  %116 = trunc i32 %115 to i16
  store i16 %116, i16* %108, align 2
  %117 = getelementptr inbounds i16, i16* %25, i64 %22
  %118 = load i16, i16* %117, align 2
  %119 = zext i16 %118 to i32
  %120 = add nsw i32 %28, %119
  %121 = icmp slt i32 %120, 255
  %122 = select i1 %121, i32 %120, i32 255
  br label %123

123:                                              ; preds = %93, %33, %63
  %124 = phi i32 [ %122, %93 ], [ %62, %33 ], [ %92, %63 ]
  %125 = phi i16* [ %117, %93 ], [ %57, %33 ], [ %87, %63 ]
  %126 = icmp sgt i32 %124, 0
  %127 = select i1 %126, i32 %124, i32 0
  %128 = trunc i32 %127 to i16
  store i16 %128, i16* %125, align 2
  %129 = getelementptr inbounds i32, i32* %27, i64 1
  %130 = add nuw nsw i32 %26, 1
  %131 = icmp eq i32 %130, 4
  br i1 %131, label %135, label %132

132:                                              ; preds = %123
  %133 = getelementptr inbounds i16, i16* %25, i64 1
  %134 = load i32, i32* %129, align 4
  br label %23

135:                                              ; preds = %123
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_get_inv_txfm_cfg(i8 zeroext, i8 zeroext, %struct.TXFM_2D_FLIP_CFG* nocapture) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %2, i64 0, i32 0
  store i8 %1, i8* %4, align 8
  %5 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %2, i64 0, i32 6, i64 0
  %6 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %2, i64 0, i32 7, i64 0
  %7 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %2, i64 0, i32 1
  %8 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %2, i64 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* align 2 %5, i8 0, i64 24, i1 false)
  %9 = icmp ult i8 %0, 16
  br i1 %9, label %10, label %17

10:                                               ; preds = %3
  %11 = sext i8 %0 to i64
  %12 = getelementptr inbounds [16 x i32], [16 x i32]* @switch.table.av1_get_inv_txfm_cfg, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = sext i8 %0 to i64
  %15 = getelementptr inbounds [16 x i32], [16 x i32]* @switch.table.av1_get_inv_txfm_cfg.1, i64 0, i64 %14
  %16 = load i32, i32* %15, align 4
  br label %17

17:                                               ; preds = %3, %10
  %18 = phi i32 [ %13, %10 ], [ 0, %3 ]
  %19 = phi i32 [ %16, %10 ], [ 0, %3 ]
  store i32 %18, i32* %7, align 4
  store i32 %19, i32* %8, align 4
  %20 = zext i8 %0 to i64
  %21 = getelementptr inbounds [16 x i8], [16 x i8]* @vtx_tab, i64 0, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = getelementptr inbounds [16 x i8], [16 x i8]* @htx_tab, i64 0, i64 %20
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %1 to i64
  %26 = getelementptr inbounds [19 x i8*], [19 x i8*]* @av1_inv_txfm_shift_ls, i64 0, i64 %25
  %27 = bitcast i8** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %2, i64 0, i32 3
  %30 = bitcast i8** %29 to i64*
  store i64 %28, i64* %30, align 8
  %31 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide_log2, i64 0, i64 %25
  %32 = load i32, i32* %31, align 4
  %33 = add nsw i32 %32, -2
  %34 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high_log2, i64 0, i64 %25
  %35 = load i32, i32* %34, align 4
  %36 = add nsw i32 %35, -2
  %37 = sext i32 %33 to i64
  %38 = sext i32 %36 to i64
  %39 = getelementptr inbounds [5 x [5 x i8]], [5 x [5 x i8]]* @av1_inv_cos_bit_col, i64 0, i64 %37, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %2, i64 0, i32 4
  store i8 %40, i8* %41, align 8
  %42 = getelementptr inbounds [5 x [5 x i8]], [5 x [5 x i8]]* @av1_inv_cos_bit_row, i64 0, i64 %37, i64 %38
  %43 = load i8, i8* %42, align 1
  %44 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %2, i64 0, i32 5
  store i8 %43, i8* %44, align 1
  %45 = zext i8 %22 to i64
  %46 = getelementptr inbounds [5 x [4 x i8]], [5 x [4 x i8]]* @av1_txfm_type_ls, i64 0, i64 %38, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %2, i64 0, i32 8
  store i8 %47, i8* %48, align 2
  %49 = icmp eq i8 %47, 5
  br i1 %49, label %50, label %51

50:                                               ; preds = %17
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %5, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @iadst4_range, i64 0, i64 0), i64 7, i1 false)
  br label %51

51:                                               ; preds = %50, %17
  %52 = zext i8 %24 to i64
  %53 = getelementptr inbounds [5 x [4 x i8]], [5 x [4 x i8]]* @av1_txfm_type_ls, i64 0, i64 %37, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %2, i64 0, i32 9
  store i8 %54, i8* %55, align 1
  %56 = icmp eq i8 %54, 5
  br i1 %56, label %57, label %58

57:                                               ; preds = %51
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %6, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @iadst4_range, i64 0, i64 0), i64 7, i1 false)
  br label %58

58:                                               ; preds = %57, %51
  %59 = zext i8 %47 to i64
  %60 = getelementptr inbounds [12 x i8], [12 x i8]* @av1_txfm_stage_num_list, i64 0, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = sext i8 %61 to i32
  %63 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %2, i64 0, i32 10
  store i32 %62, i32* %63, align 4
  %64 = zext i8 %54 to i64
  %65 = getelementptr inbounds [12 x i8], [12 x i8]* @av1_txfm_stage_num_list, i64 0, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = sext i8 %66 to i32
  %68 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %2, i64 0, i32 11
  store i32 %67, i32* %68, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_gen_inv_stage_range(i8* nocapture, i8* nocapture, %struct.TXFM_2D_FLIP_CFG* nocapture readonly, i8 zeroext, i32) local_unnamed_addr #2 {
  switch i32 %4, label %7 [
    i32 8, label %8
    i32 10, label %6
  ]

6:                                                ; preds = %5
  br label %8

7:                                                ; preds = %5
  br label %8

8:                                                ; preds = %5, %6, %7
  %9 = phi i8 [ 18, %6 ], [ 20, %7 ], [ 16, %5 ]
  %10 = phi i8 [ 16, %6 ], [ 18, %7 ], [ 16, %5 ]
  %11 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %2, i64 0, i32 11
  %12 = load i32, i32* %11, align 8
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %18, label %14

14:                                               ; preds = %18, %8
  %15 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %2, i64 0, i32 10
  %16 = load i32, i32* %15, align 4
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %28, label %27

18:                                               ; preds = %8, %18
  %19 = phi i64 [ %21, %18 ], [ 0, %8 ]
  %20 = getelementptr inbounds i8, i8* %1, i64 %19
  store i8 %9, i8* %20, align 1
  %21 = add nuw nsw i64 %19, 1
  %22 = load i32, i32* %11, align 8
  %23 = sext i32 %22 to i64
  %24 = icmp slt i64 %21, %23
  %25 = icmp ult i64 %21, 12
  %26 = and i1 %25, %24
  br i1 %26, label %18, label %14

27:                                               ; preds = %28, %14
  ret void

28:                                               ; preds = %14, %28
  %29 = phi i64 [ %31, %28 ], [ 0, %14 ]
  %30 = getelementptr inbounds i8, i8* %0, i64 %29
  store i8 %10, i8* %30, align 1
  %31 = add nuw nsw i64 %29, 1
  %32 = load i32, i32* %15, align 4
  %33 = sext i32 %32 to i64
  %34 = icmp slt i64 %31, %33
  %35 = icmp ult i64 %31, 12
  %36 = and i1 %35, %34
  br i1 %36, label %28, label %27
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_inv_txfm2d_add_4x8_c(i32* nocapture readonly, i16* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [48 x i32], align 32
  %7 = bitcast [48 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 192, i1 false)
  %8 = getelementptr inbounds [48 x i32], [48 x i32]* %6, i64 0, i64 0
  call fastcc void @inv_txfm2d_add_facade(i32* %0, i16* %1, i32 %2, i32* nonnull %8, i8 zeroext %3, i8 zeroext 5, i32 %4)
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %7) #5
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @inv_txfm2d_add_facade(i32* nocapture readonly, i16* nocapture, i32, i32*, i8 zeroext, i8 zeroext, i32) unnamed_addr #3 {
  %8 = alloca [12 x i8], align 1
  %9 = alloca [12 x i8], align 1
  %10 = alloca %struct.TXFM_2D_FLIP_CFG, align 8
  %11 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %10, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 64, i1 false)
  call void @av1_get_inv_txfm_cfg(i8 zeroext %4, i8 zeroext %5, %struct.TXFM_2D_FLIP_CFG* nonnull %10)
  %12 = getelementptr inbounds [12 x i8], [12 x i8]* %8, i64 0, i64 0
  %13 = getelementptr inbounds [12 x i8], [12 x i8]* %9, i64 0, i64 0
  %14 = load i8, i8* %11, align 8
  %15 = zext i8 %14 to i64
  %16 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %15
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %10, i64 0, i32 3
  %21 = load i8*, i8** %20, align 8
  %22 = icmp eq i32 %17, %19
  br i1 %22, label %38, label %23

23:                                               ; preds = %7
  %24 = icmp sgt i32 %17, %19
  br i1 %24, label %25, label %31

25:                                               ; preds = %23
  %26 = shl nsw i32 %19, 1
  %27 = icmp eq i32 %26, %17
  br i1 %27, label %38, label %28

28:                                               ; preds = %25
  %29 = shl nsw i32 %19, 2
  %30 = icmp eq i32 %29, %17
  br i1 %30, label %38, label %37

31:                                               ; preds = %23
  %32 = shl nsw i32 %17, 1
  %33 = icmp eq i32 %32, %19
  br i1 %33, label %38, label %34

34:                                               ; preds = %31
  %35 = shl nsw i32 %17, 2
  %36 = icmp eq i32 %35, %19
  br i1 %36, label %38, label %37

37:                                               ; preds = %34, %28
  br label %38

38:                                               ; preds = %37, %34, %31, %28, %25, %7
  %39 = phi i32 [ 0, %37 ], [ 0, %7 ], [ 1, %25 ], [ 2, %28 ], [ -1, %31 ], [ -2, %34 ]
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %12) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %12, i8 -86, i64 12, i1 false) #5
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %13, i8 -86, i64 12, i1 false) #5
  switch i32 %6, label %41 [
    i32 8, label %42
    i32 10, label %40
  ]

40:                                               ; preds = %38
  br label %42

41:                                               ; preds = %38
  br label %42

42:                                               ; preds = %41, %40, %38
  %43 = phi i8 [ 18, %40 ], [ 20, %41 ], [ 16, %38 ]
  %44 = phi i8 [ 16, %40 ], [ 18, %41 ], [ 16, %38 ]
  %45 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %10, i64 0, i32 11
  %46 = load i32, i32* %45, align 8
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %48, label %54

48:                                               ; preds = %42
  %49 = sext i32 %46 to i64
  %50 = add nsw i64 %49, -1
  %51 = icmp ult i64 %50, 11
  %52 = select i1 %51, i64 %50, i64 11
  %53 = add nuw nsw i64 %52, 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %12, i8 %43, i64 %53, i1 false) #5
  br label %54

54:                                               ; preds = %48, %42
  %55 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %10, i64 0, i32 10
  %56 = load i32, i32* %55, align 4
  %57 = icmp sgt i32 %56, 0
  br i1 %57, label %58, label %64

58:                                               ; preds = %54
  %59 = sext i32 %56 to i64
  %60 = add nsw i64 %59, -1
  %61 = icmp ult i64 %60, 11
  %62 = select i1 %61, i64 %60, i64 11
  %63 = add nuw nsw i64 %62, 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %13, i8 %44, i64 %63, i1 false) #5
  br label %64

64:                                               ; preds = %58, %54
  %65 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %10, i64 0, i32 4
  %66 = load i8, i8* %65, align 8
  %67 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %10, i64 0, i32 5
  %68 = load i8, i8* %67, align 1
  %69 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %10, i64 0, i32 8
  %70 = load i8, i8* %69, align 2
  %71 = icmp ult i8 %70, 12
  br i1 %71, label %72, label %76

72:                                               ; preds = %64
  %73 = sext i8 %70 to i64
  %74 = getelementptr inbounds [12 x void (i32*, i32*, i8, i8*)*], [12 x void (i32*, i32*, i8, i8*)*]* @switch.table.inv_txfm2d_add_facade.2, i64 0, i64 %73
  %75 = load void (i32*, i32*, i8, i8*)*, void (i32*, i32*, i8, i8*)** %74, align 8
  br label %76

76:                                               ; preds = %64, %72
  %77 = phi void (i32*, i32*, i8, i8*)* [ %75, %72 ], [ null, %64 ]
  %78 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %10, i64 0, i32 9
  %79 = load i8, i8* %78, align 1
  %80 = icmp ult i8 %79, 12
  br i1 %80, label %81, label %85

81:                                               ; preds = %76
  %82 = sext i8 %79 to i64
  %83 = getelementptr inbounds [12 x void (i32*, i32*, i8, i8*)*], [12 x void (i32*, i32*, i8, i8*)*]* @switch.table.inv_txfm2d_add_facade.2, i64 0, i64 %82
  %84 = load void (i32*, i32*, i8, i8*)*, void (i32*, i32*, i8, i8*)** %83, align 8
  br label %85

85:                                               ; preds = %76, %81
  %86 = phi void (i32*, i32*, i8, i8*)* [ %84, %81 ], [ null, %76 ]
  %87 = icmp sgt i32 %19, %17
  %88 = select i1 %87, i32 %19, i32 %17
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i32, i32* %3, i64 %89
  %91 = getelementptr inbounds i32, i32* %90, i64 %89
  %92 = icmp slt i32 %39, 0
  %93 = sub nsw i32 0, %39
  %94 = select i1 %92, i32 %93, i32 %39
  %95 = icmp eq i32 %94, 1
  %96 = trunc i32 %6 to i8
  %97 = add i8 %96, 8
  %98 = icmp slt i8 %97, 1
  %99 = sext i8 %97 to i64
  %100 = add nuw nsw i64 %99, 4294967295
  %101 = and i64 %100, 4294967295
  %102 = shl i64 1, %101
  %103 = add nsw i64 %102, -1
  %104 = sub nsw i64 0, %102
  %105 = zext i32 %17 to i64
  %106 = sext i32 %17 to i64
  %107 = icmp sgt i64 %106, 1
  %108 = select i1 %107, i64 %106, i64 1
  %109 = icmp sgt i64 %106, 1
  %110 = select i1 %109, i64 %106, i64 1
  %111 = getelementptr i32, i32* %3, i64 %110
  %112 = and i64 %108, 9223372036854775800
  %113 = add nsw i64 %112, -8
  %114 = lshr exact i64 %113, 3
  %115 = add nuw nsw i64 %114, 1
  %116 = add nsw i64 %105, -1
  %117 = icmp ult i64 %108, 8
  %118 = and i64 %108, 9223372036854775800
  %119 = and i64 %115, 3
  %120 = icmp ult i64 %113, 24
  %121 = sub nsw i64 %115, %119
  %122 = icmp eq i64 %119, 0
  %123 = icmp eq i64 %108, %118
  %124 = and i64 %105, 1
  %125 = icmp eq i64 %116, 0
  %126 = sub nsw i64 %105, %124
  %127 = icmp eq i64 %124, 0
  %128 = and i64 %108, 1
  %129 = sub nuw nsw i64 %108, %128
  %130 = icmp eq i64 %128, 0
  %131 = and i64 %105, 1
  %132 = icmp eq i64 %116, 0
  %133 = sub nsw i64 %105, %131
  %134 = icmp eq i64 %131, 0
  br label %168

135:                                              ; preds = %357
  %136 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %10, i64 0, i32 2
  %137 = icmp sgt i32 %6, 10
  %138 = select i1 %137, i32 %6, i32 10
  %139 = trunc i32 %138 to i8
  %140 = add i8 %139, 6
  %141 = icmp slt i8 %140, 1
  %142 = sext i8 %140 to i64
  %143 = add nuw nsw i64 %142, 4294967295
  %144 = and i64 %143, 4294967295
  %145 = shl i64 1, %144
  %146 = add nsw i64 %145, -1
  %147 = sub nsw i64 0, %145
  %148 = zext i32 %19 to i64
  %149 = getelementptr inbounds i8, i8* %21, i64 1
  %150 = getelementptr inbounds %struct.TXFM_2D_FLIP_CFG, %struct.TXFM_2D_FLIP_CFG* %10, i64 0, i32 1
  %151 = sext i32 %19 to i64
  %152 = sext i32 %2 to i64
  %153 = load i32, i32* %136, align 8
  %154 = icmp eq i32 %153, 0
  %155 = load i32, i32* %150, align 4
  %156 = icmp eq i32 %155, 0
  %157 = and i64 %148, 1
  %158 = sub nsw i64 %148, %157
  %159 = icmp eq i64 %157, 0
  %160 = icmp eq i32 %6, 10
  %161 = select i1 %160, i32 1023, i32 255
  %162 = icmp eq i32 %6, 12
  %163 = select i1 %162, i32 4095, i32 %161
  %164 = icmp eq i32 %6, 10
  %165 = select i1 %164, i32 1023, i32 255
  %166 = icmp eq i32 %6, 12
  %167 = select i1 %166, i32 4095, i32 %165
  br label %367

168:                                              ; preds = %357, %85
  %169 = phi i64 [ %366, %357 ], [ 0, %85 ]
  %170 = phi i32 [ %364, %357 ], [ 0, %85 ]
  %171 = phi i32* [ %363, %357 ], [ %91, %85 ]
  %172 = phi i32* [ %362, %357 ], [ %0, %85 ]
  %173 = mul i64 %169, %106
  %174 = getelementptr i32, i32* %0, i64 %173
  %175 = add i64 %110, %173
  %176 = getelementptr i32, i32* %0, i64 %175
  br i1 %95, label %253, label %177

177:                                              ; preds = %168
  br i1 %117, label %178, label %180

178:                                              ; preds = %252, %180, %177
  %179 = phi i64 [ 0, %180 ], [ 0, %177 ], [ %118, %252 ]
  br label %304

180:                                              ; preds = %177
  %181 = icmp ugt i32* %176, %3
  %182 = icmp ult i32* %174, %111
  %183 = and i1 %181, %182
  br i1 %183, label %178, label %184

184:                                              ; preds = %180
  br i1 %120, label %234, label %185

185:                                              ; preds = %184, %185
  %186 = phi i64 [ %231, %185 ], [ 0, %184 ]
  %187 = phi i64 [ %232, %185 ], [ %121, %184 ]
  %188 = getelementptr inbounds i32, i32* %172, i64 %186
  %189 = bitcast i32* %188 to <4 x i32>*
  %190 = load <4 x i32>, <4 x i32>* %189, align 4, !alias.scope !2
  %191 = getelementptr inbounds i32, i32* %188, i64 4
  %192 = bitcast i32* %191 to <4 x i32>*
  %193 = load <4 x i32>, <4 x i32>* %192, align 4, !alias.scope !2
  %194 = getelementptr inbounds i32, i32* %3, i64 %186
  %195 = bitcast i32* %194 to <4 x i32>*
  store <4 x i32> %190, <4 x i32>* %195, align 4, !alias.scope !5, !noalias !2
  %196 = getelementptr inbounds i32, i32* %194, i64 4
  %197 = bitcast i32* %196 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %197, align 4, !alias.scope !5, !noalias !2
  %198 = or i64 %186, 8
  %199 = getelementptr inbounds i32, i32* %172, i64 %198
  %200 = bitcast i32* %199 to <4 x i32>*
  %201 = load <4 x i32>, <4 x i32>* %200, align 4, !alias.scope !2
  %202 = getelementptr inbounds i32, i32* %199, i64 4
  %203 = bitcast i32* %202 to <4 x i32>*
  %204 = load <4 x i32>, <4 x i32>* %203, align 4, !alias.scope !2
  %205 = getelementptr inbounds i32, i32* %3, i64 %198
  %206 = bitcast i32* %205 to <4 x i32>*
  store <4 x i32> %201, <4 x i32>* %206, align 4, !alias.scope !5, !noalias !2
  %207 = getelementptr inbounds i32, i32* %205, i64 4
  %208 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %204, <4 x i32>* %208, align 4, !alias.scope !5, !noalias !2
  %209 = or i64 %186, 16
  %210 = getelementptr inbounds i32, i32* %172, i64 %209
  %211 = bitcast i32* %210 to <4 x i32>*
  %212 = load <4 x i32>, <4 x i32>* %211, align 4, !alias.scope !2
  %213 = getelementptr inbounds i32, i32* %210, i64 4
  %214 = bitcast i32* %213 to <4 x i32>*
  %215 = load <4 x i32>, <4 x i32>* %214, align 4, !alias.scope !2
  %216 = getelementptr inbounds i32, i32* %3, i64 %209
  %217 = bitcast i32* %216 to <4 x i32>*
  store <4 x i32> %212, <4 x i32>* %217, align 4, !alias.scope !5, !noalias !2
  %218 = getelementptr inbounds i32, i32* %216, i64 4
  %219 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %215, <4 x i32>* %219, align 4, !alias.scope !5, !noalias !2
  %220 = or i64 %186, 24
  %221 = getelementptr inbounds i32, i32* %172, i64 %220
  %222 = bitcast i32* %221 to <4 x i32>*
  %223 = load <4 x i32>, <4 x i32>* %222, align 4, !alias.scope !2
  %224 = getelementptr inbounds i32, i32* %221, i64 4
  %225 = bitcast i32* %224 to <4 x i32>*
  %226 = load <4 x i32>, <4 x i32>* %225, align 4, !alias.scope !2
  %227 = getelementptr inbounds i32, i32* %3, i64 %220
  %228 = bitcast i32* %227 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %228, align 4, !alias.scope !5, !noalias !2
  %229 = getelementptr inbounds i32, i32* %227, i64 4
  %230 = bitcast i32* %229 to <4 x i32>*
  store <4 x i32> %226, <4 x i32>* %230, align 4, !alias.scope !5, !noalias !2
  %231 = add i64 %186, 32
  %232 = add i64 %187, -4
  %233 = icmp eq i64 %232, 0
  br i1 %233, label %234, label %185, !llvm.loop !7

234:                                              ; preds = %185, %184
  %235 = phi i64 [ 0, %184 ], [ %231, %185 ]
  br i1 %122, label %252, label %236

236:                                              ; preds = %234, %236
  %237 = phi i64 [ %249, %236 ], [ %235, %234 ]
  %238 = phi i64 [ %250, %236 ], [ %119, %234 ]
  %239 = getelementptr inbounds i32, i32* %172, i64 %237
  %240 = bitcast i32* %239 to <4 x i32>*
  %241 = load <4 x i32>, <4 x i32>* %240, align 4, !alias.scope !2
  %242 = getelementptr inbounds i32, i32* %239, i64 4
  %243 = bitcast i32* %242 to <4 x i32>*
  %244 = load <4 x i32>, <4 x i32>* %243, align 4, !alias.scope !2
  %245 = getelementptr inbounds i32, i32* %3, i64 %237
  %246 = bitcast i32* %245 to <4 x i32>*
  store <4 x i32> %241, <4 x i32>* %246, align 4, !alias.scope !5, !noalias !2
  %247 = getelementptr inbounds i32, i32* %245, i64 4
  %248 = bitcast i32* %247 to <4 x i32>*
  store <4 x i32> %244, <4 x i32>* %248, align 4, !alias.scope !5, !noalias !2
  %249 = add i64 %237, 8
  %250 = add i64 %238, -1
  %251 = icmp eq i64 %250, 0
  br i1 %251, label %252, label %236, !llvm.loop !9

252:                                              ; preds = %236, %234
  br i1 %123, label %311, label %178

253:                                              ; preds = %168, %253
  %254 = phi i64 [ %273, %253 ], [ 0, %168 ]
  %255 = phi i64 [ %274, %253 ], [ %129, %168 ]
  %256 = getelementptr inbounds i32, i32* %172, i64 %254
  %257 = load i32, i32* %256, align 4
  %258 = sext i32 %257 to i64
  %259 = mul nsw i64 %258, 2896
  %260 = add nsw i64 %259, 2048
  %261 = lshr i64 %260, 12
  %262 = trunc i64 %261 to i32
  %263 = getelementptr inbounds i32, i32* %3, i64 %254
  store i32 %262, i32* %263, align 4
  %264 = or i64 %254, 1
  %265 = getelementptr inbounds i32, i32* %172, i64 %264
  %266 = load i32, i32* %265, align 4
  %267 = sext i32 %266 to i64
  %268 = mul nsw i64 %267, 2896
  %269 = add nsw i64 %268, 2048
  %270 = lshr i64 %269, 12
  %271 = trunc i64 %270 to i32
  %272 = getelementptr inbounds i32, i32* %3, i64 %264
  store i32 %271, i32* %272, align 4
  %273 = add nuw nsw i64 %254, 2
  %274 = add i64 %255, -2
  %275 = icmp eq i64 %274, 0
  br i1 %275, label %276, label %253

276:                                              ; preds = %253
  br i1 %130, label %286, label %277

277:                                              ; preds = %276
  %278 = getelementptr inbounds i32, i32* %172, i64 %273
  %279 = load i32, i32* %278, align 4
  %280 = sext i32 %279 to i64
  %281 = mul nsw i64 %280, 2896
  %282 = add nsw i64 %281, 2048
  %283 = lshr i64 %282, 12
  %284 = trunc i64 %283 to i32
  %285 = getelementptr inbounds i32, i32* %3, i64 %273
  store i32 %284, i32* %285, align 4
  br label %286

286:                                              ; preds = %276, %277
  br i1 %132, label %329, label %287

287:                                              ; preds = %286, %501
  %288 = phi i64 [ %503, %501 ], [ 0, %286 ]
  %289 = phi i64 [ %504, %501 ], [ %133, %286 ]
  %290 = getelementptr inbounds i32, i32* %3, i64 %288
  %291 = load i32, i32* %290, align 4
  br i1 %98, label %299, label %292

292:                                              ; preds = %287
  %293 = sext i32 %291 to i64
  %294 = icmp slt i64 %293, %104
  %295 = icmp slt i64 %103, %293
  %296 = select i1 %295, i64 %103, i64 %293
  %297 = select i1 %294, i64 %104, i64 %296
  %298 = trunc i64 %297 to i32
  br label %299

299:                                              ; preds = %292, %287
  %300 = phi i32 [ %298, %292 ], [ %291, %287 ]
  store i32 %300, i32* %290, align 4
  %301 = or i64 %288, 1
  %302 = getelementptr inbounds i32, i32* %3, i64 %301
  %303 = load i32, i32* %302, align 4
  br i1 %98, label %501, label %494

304:                                              ; preds = %178, %304
  %305 = phi i64 [ %309, %304 ], [ %179, %178 ]
  %306 = getelementptr inbounds i32, i32* %172, i64 %305
  %307 = load i32, i32* %306, align 4
  %308 = getelementptr inbounds i32, i32* %3, i64 %305
  store i32 %307, i32* %308, align 4
  %309 = add nuw nsw i64 %305, 1
  %310 = icmp slt i64 %309, %106
  br i1 %310, label %304, label %311, !llvm.loop !11

311:                                              ; preds = %304, %252
  br i1 %125, label %343, label %312

312:                                              ; preds = %311, %489
  %313 = phi i64 [ %491, %489 ], [ 0, %311 ]
  %314 = phi i64 [ %492, %489 ], [ %126, %311 ]
  %315 = getelementptr inbounds i32, i32* %3, i64 %313
  %316 = load i32, i32* %315, align 4
  br i1 %98, label %324, label %317

317:                                              ; preds = %312
  %318 = sext i32 %316 to i64
  %319 = icmp slt i64 %318, %104
  %320 = icmp slt i64 %103, %318
  %321 = select i1 %320, i64 %103, i64 %318
  %322 = select i1 %319, i64 %104, i64 %321
  %323 = trunc i64 %322 to i32
  br label %324

324:                                              ; preds = %317, %312
  %325 = phi i32 [ %323, %317 ], [ %316, %312 ]
  store i32 %325, i32* %315, align 4
  %326 = or i64 %313, 1
  %327 = getelementptr inbounds i32, i32* %3, i64 %326
  %328 = load i32, i32* %327, align 4
  br i1 %98, label %489, label %482

329:                                              ; preds = %501, %286
  %330 = phi i64 [ 0, %286 ], [ %503, %501 ]
  br i1 %134, label %357, label %331

331:                                              ; preds = %329
  %332 = getelementptr inbounds i32, i32* %3, i64 %330
  %333 = load i32, i32* %332, align 4
  br i1 %98, label %341, label %334

334:                                              ; preds = %331
  %335 = sext i32 %333 to i64
  %336 = icmp slt i64 %335, %104
  %337 = icmp slt i64 %103, %335
  %338 = select i1 %337, i64 %103, i64 %335
  %339 = select i1 %336, i64 %104, i64 %338
  %340 = trunc i64 %339 to i32
  br label %341

341:                                              ; preds = %334, %331
  %342 = phi i32 [ %340, %334 ], [ %333, %331 ]
  store i32 %342, i32* %332, align 4
  br label %357

343:                                              ; preds = %489, %311
  %344 = phi i64 [ 0, %311 ], [ %491, %489 ]
  br i1 %127, label %357, label %345

345:                                              ; preds = %343
  %346 = getelementptr inbounds i32, i32* %3, i64 %344
  %347 = load i32, i32* %346, align 4
  br i1 %98, label %355, label %348

348:                                              ; preds = %345
  %349 = sext i32 %347 to i64
  %350 = icmp slt i64 %349, %104
  %351 = icmp slt i64 %103, %349
  %352 = select i1 %351, i64 %103, i64 %349
  %353 = select i1 %350, i64 %104, i64 %352
  %354 = trunc i64 %353 to i32
  br label %355

355:                                              ; preds = %348, %345
  %356 = phi i32 [ %354, %348 ], [ %347, %345 ]
  store i32 %356, i32* %346, align 4
  br label %357

357:                                              ; preds = %355, %343, %341, %329
  call void %86(i32* %3, i32* %171, i8 signext %68, i8* nonnull %12) #5
  %358 = load void (i32*, i32, i32)*, void (i32*, i32, i32)** @av1_round_shift_array, align 8
  %359 = load i8, i8* %21, align 1
  %360 = sext i8 %359 to i32
  %361 = sub nsw i32 0, %360
  call void %358(i32* %171, i32 %17, i32 %361) #5
  %362 = getelementptr inbounds i32, i32* %172, i64 %106
  %363 = getelementptr inbounds i32, i32* %171, i64 %106
  %364 = add nuw nsw i32 %170, 1
  %365 = icmp slt i32 %364, %19
  %366 = add i64 %169, 1
  br i1 %365, label %168, label %135

367:                                              ; preds = %466, %135
  %368 = phi i64 [ 0, %135 ], [ %467, %466 ]
  br i1 %154, label %374, label %369

369:                                              ; preds = %367
  %370 = trunc i64 %368 to i32
  %371 = xor i32 %370, -1
  %372 = add i32 %17, %371
  %373 = sext i32 %372 to i64
  br label %383

374:                                              ; preds = %367, %374
  %375 = phi i64 [ %381, %374 ], [ 0, %367 ]
  %376 = mul nsw i64 %375, %106
  %377 = add nsw i64 %376, %368
  %378 = getelementptr inbounds i32, i32* %91, i64 %377
  %379 = load i32, i32* %378, align 4
  %380 = getelementptr inbounds i32, i32* %3, i64 %375
  store i32 %379, i32* %380, align 4
  %381 = add nuw nsw i64 %375, 1
  %382 = icmp slt i64 %381, %151
  br i1 %382, label %374, label %392

383:                                              ; preds = %383, %369
  %384 = phi i64 [ 0, %369 ], [ %390, %383 ]
  %385 = mul nsw i64 %384, %106
  %386 = add nsw i64 %385, %373
  %387 = getelementptr inbounds i32, i32* %91, i64 %386
  %388 = load i32, i32* %387, align 4
  %389 = getelementptr inbounds i32, i32* %3, i64 %384
  store i32 %388, i32* %389, align 4
  %390 = add nuw nsw i64 %384, 1
  %391 = icmp slt i64 %390, %151
  br i1 %391, label %383, label %392

392:                                              ; preds = %374, %383
  br label %393

393:                                              ; preds = %477, %392
  %394 = phi i64 [ 0, %392 ], [ %479, %477 ]
  %395 = phi i64 [ %158, %392 ], [ %480, %477 ]
  %396 = getelementptr inbounds i32, i32* %3, i64 %394
  %397 = load i32, i32* %396, align 4
  br i1 %141, label %405, label %398

398:                                              ; preds = %393
  %399 = sext i32 %397 to i64
  %400 = icmp slt i64 %399, %147
  %401 = icmp slt i64 %146, %399
  %402 = select i1 %401, i64 %146, i64 %399
  %403 = select i1 %400, i64 %147, i64 %402
  %404 = trunc i64 %403 to i32
  br label %405

405:                                              ; preds = %398, %393
  %406 = phi i32 [ %404, %398 ], [ %397, %393 ]
  store i32 %406, i32* %396, align 4
  %407 = or i64 %394, 1
  %408 = getelementptr inbounds i32, i32* %3, i64 %407
  %409 = load i32, i32* %408, align 4
  br i1 %141, label %477, label %470

410:                                              ; preds = %477
  br i1 %159, label %423, label %411

411:                                              ; preds = %410
  %412 = getelementptr inbounds i32, i32* %3, i64 %479
  %413 = load i32, i32* %412, align 4
  br i1 %141, label %421, label %414

414:                                              ; preds = %411
  %415 = sext i32 %413 to i64
  %416 = icmp slt i64 %415, %147
  %417 = icmp slt i64 %146, %415
  %418 = select i1 %417, i64 %146, i64 %415
  %419 = select i1 %416, i64 %147, i64 %418
  %420 = trunc i64 %419 to i32
  br label %421

421:                                              ; preds = %414, %411
  %422 = phi i32 [ %420, %414 ], [ %413, %411 ]
  store i32 %422, i32* %412, align 4
  br label %423

423:                                              ; preds = %410, %421
  call void %77(i32* %3, i32* %90, i8 signext %66, i8* nonnull %13) #5
  %424 = load void (i32*, i32, i32)*, void (i32*, i32, i32)** @av1_round_shift_array, align 8
  %425 = load i8, i8* %149, align 1
  %426 = sext i8 %425 to i32
  %427 = sub nsw i32 0, %426
  call void %424(i32* %90, i32 %19, i32 %427) #5
  br i1 %156, label %428, label %445

428:                                              ; preds = %423, %428
  %429 = phi i64 [ %443, %428 ], [ 0, %423 ]
  %430 = mul nsw i64 %429, %152
  %431 = add nsw i64 %430, %368
  %432 = getelementptr inbounds i16, i16* %1, i64 %431
  %433 = load i16, i16* %432, align 2
  %434 = getelementptr inbounds i32, i32* %90, i64 %429
  %435 = load i32, i32* %434, align 4
  %436 = zext i16 %433 to i32
  %437 = add nsw i32 %435, %436
  %438 = icmp slt i32 %437, %167
  %439 = select i1 %438, i32 %437, i32 %167
  %440 = icmp sgt i32 %439, 0
  %441 = select i1 %440, i32 %439, i32 0
  %442 = trunc i32 %441 to i16
  store i16 %442, i16* %432, align 2
  %443 = add nuw nsw i64 %429, 1
  %444 = icmp slt i64 %443, %151
  br i1 %444, label %428, label %466

445:                                              ; preds = %423, %445
  %446 = phi i64 [ %464, %445 ], [ 0, %423 ]
  %447 = mul nsw i64 %446, %152
  %448 = add nsw i64 %447, %368
  %449 = getelementptr inbounds i16, i16* %1, i64 %448
  %450 = load i16, i16* %449, align 2
  %451 = trunc i64 %446 to i32
  %452 = xor i32 %451, -1
  %453 = add i32 %19, %452
  %454 = sext i32 %453 to i64
  %455 = getelementptr inbounds i32, i32* %90, i64 %454
  %456 = load i32, i32* %455, align 4
  %457 = zext i16 %450 to i32
  %458 = add nsw i32 %456, %457
  %459 = icmp slt i32 %458, %163
  %460 = select i1 %459, i32 %458, i32 %163
  %461 = icmp sgt i32 %460, 0
  %462 = select i1 %461, i32 %460, i32 0
  %463 = trunc i32 %462 to i16
  store i16 %463, i16* %449, align 2
  %464 = add nuw nsw i64 %446, 1
  %465 = icmp slt i64 %464, %151
  br i1 %465, label %445, label %466

466:                                              ; preds = %445, %428
  %467 = add nuw nsw i64 %368, 1
  %468 = icmp slt i64 %467, %106
  br i1 %468, label %367, label %469

469:                                              ; preds = %466
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %12) #5
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #5
  ret void

470:                                              ; preds = %405
  %471 = sext i32 %409 to i64
  %472 = icmp slt i64 %471, %147
  %473 = icmp slt i64 %146, %471
  %474 = select i1 %473, i64 %146, i64 %471
  %475 = select i1 %472, i64 %147, i64 %474
  %476 = trunc i64 %475 to i32
  br label %477

477:                                              ; preds = %470, %405
  %478 = phi i32 [ %476, %470 ], [ %409, %405 ]
  store i32 %478, i32* %408, align 4
  %479 = add nuw nsw i64 %394, 2
  %480 = add i64 %395, -2
  %481 = icmp eq i64 %480, 0
  br i1 %481, label %410, label %393

482:                                              ; preds = %324
  %483 = sext i32 %328 to i64
  %484 = icmp slt i64 %483, %104
  %485 = icmp slt i64 %103, %483
  %486 = select i1 %485, i64 %103, i64 %483
  %487 = select i1 %484, i64 %104, i64 %486
  %488 = trunc i64 %487 to i32
  br label %489

489:                                              ; preds = %482, %324
  %490 = phi i32 [ %488, %482 ], [ %328, %324 ]
  store i32 %490, i32* %327, align 4
  %491 = add nuw nsw i64 %313, 2
  %492 = add i64 %314, -2
  %493 = icmp eq i64 %492, 0
  br i1 %493, label %343, label %312

494:                                              ; preds = %299
  %495 = sext i32 %303 to i64
  %496 = icmp slt i64 %495, %104
  %497 = icmp slt i64 %103, %495
  %498 = select i1 %497, i64 %103, i64 %495
  %499 = select i1 %496, i64 %104, i64 %498
  %500 = trunc i64 %499 to i32
  br label %501

501:                                              ; preds = %494, %299
  %502 = phi i32 [ %500, %494 ], [ %303, %299 ]
  store i32 %502, i32* %302, align 4
  %503 = add nuw nsw i64 %288, 2
  %504 = add i64 %289, -2
  %505 = icmp eq i64 %504, 0
  br i1 %505, label %329, label %287
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_inv_txfm2d_add_8x4_c(i32* nocapture readonly, i16* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [48 x i32], align 32
  %7 = bitcast [48 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 192, i1 false)
  %8 = getelementptr inbounds [48 x i32], [48 x i32]* %6, i64 0, i64 0
  call fastcc void @inv_txfm2d_add_facade(i32* %0, i16* %1, i32 %2, i32* nonnull %8, i8 zeroext %3, i8 zeroext 6, i32 %4)
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %7) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_inv_txfm2d_add_8x16_c(i32* nocapture readonly, i16* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [160 x i32], align 32
  %7 = bitcast [160 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 640, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 640, i1 false)
  %8 = getelementptr inbounds [160 x i32], [160 x i32]* %6, i64 0, i64 0
  call fastcc void @inv_txfm2d_add_facade(i32* %0, i16* %1, i32 %2, i32* nonnull %8, i8 zeroext %3, i8 zeroext 7, i32 %4)
  call void @llvm.lifetime.end.p0i8(i64 640, i8* nonnull %7) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_inv_txfm2d_add_16x8_c(i32* nocapture readonly, i16* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [160 x i32], align 32
  %7 = bitcast [160 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 640, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 640, i1 false)
  %8 = getelementptr inbounds [160 x i32], [160 x i32]* %6, i64 0, i64 0
  call fastcc void @inv_txfm2d_add_facade(i32* %0, i16* %1, i32 %2, i32* nonnull %8, i8 zeroext %3, i8 zeroext 8, i32 %4)
  call void @llvm.lifetime.end.p0i8(i64 640, i8* nonnull %7) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_inv_txfm2d_add_16x32_c(i32* nocapture readonly, i16* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [576 x i32], align 32
  %7 = bitcast [576 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2304, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 2304, i1 false)
  %8 = getelementptr inbounds [576 x i32], [576 x i32]* %6, i64 0, i64 0
  call fastcc void @inv_txfm2d_add_facade(i32* %0, i16* %1, i32 %2, i32* nonnull %8, i8 zeroext %3, i8 zeroext 9, i32 %4)
  call void @llvm.lifetime.end.p0i8(i64 2304, i8* nonnull %7) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_inv_txfm2d_add_32x16_c(i32* nocapture readonly, i16* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [576 x i32], align 32
  %7 = bitcast [576 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2304, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 2304, i1 false)
  %8 = getelementptr inbounds [576 x i32], [576 x i32]* %6, i64 0, i64 0
  call fastcc void @inv_txfm2d_add_facade(i32* %0, i16* %1, i32 %2, i32* nonnull %8, i8 zeroext %3, i8 zeroext 10, i32 %4)
  call void @llvm.lifetime.end.p0i8(i64 2304, i8* nonnull %7) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_inv_txfm2d_add_4x4_c(i32* nocapture readonly, i16* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [24 x i32], align 32
  %7 = bitcast [24 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 96, i1 false)
  %8 = getelementptr inbounds [24 x i32], [24 x i32]* %6, i64 0, i64 0
  call fastcc void @inv_txfm2d_add_facade(i32* %0, i16* %1, i32 %2, i32* nonnull %8, i8 zeroext %3, i8 zeroext 0, i32 %4)
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %7) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_inv_txfm2d_add_8x8_c(i32* nocapture readonly, i16* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [80 x i32], align 32
  %7 = bitcast [80 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 320, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 320, i1 false)
  %8 = getelementptr inbounds [80 x i32], [80 x i32]* %6, i64 0, i64 0
  call fastcc void @inv_txfm2d_add_facade(i32* %0, i16* %1, i32 %2, i32* nonnull %8, i8 zeroext %3, i8 zeroext 1, i32 %4)
  call void @llvm.lifetime.end.p0i8(i64 320, i8* nonnull %7) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_inv_txfm2d_add_16x16_c(i32* nocapture readonly, i16* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [288 x i32], align 32
  %7 = bitcast [288 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1152, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 1152, i1 false)
  %8 = getelementptr inbounds [288 x i32], [288 x i32]* %6, i64 0, i64 0
  call fastcc void @inv_txfm2d_add_facade(i32* %0, i16* %1, i32 %2, i32* nonnull %8, i8 zeroext %3, i8 zeroext 2, i32 %4)
  call void @llvm.lifetime.end.p0i8(i64 1152, i8* nonnull %7) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_inv_txfm2d_add_32x32_c(i32* nocapture readonly, i16* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [1088 x i32], align 32
  %7 = bitcast [1088 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4352, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 4352, i1 false)
  %8 = getelementptr inbounds [1088 x i32], [1088 x i32]* %6, i64 0, i64 0
  call fastcc void @inv_txfm2d_add_facade(i32* %0, i16* %1, i32 %2, i32* nonnull %8, i8 zeroext %3, i8 zeroext 3, i32 %4)
  call void @llvm.lifetime.end.p0i8(i64 4352, i8* nonnull %7) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_inv_txfm2d_add_64x64_c(i32* nocapture readonly, i16* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [4096 x i32], align 16
  %7 = alloca [4224 x i32], align 32
  %8 = bitcast [4096 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16384, i8* nonnull %8) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 16384, i1 false)
  br label %15

9:                                                ; preds = %15
  %10 = getelementptr inbounds [4096 x i32], [4096 x i32]* %6, i64 0, i64 0
  %11 = getelementptr inbounds [4096 x i32], [4096 x i32]* %6, i64 0, i64 2048
  %12 = bitcast i32* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %12, i8 0, i64 8192, i1 false)
  %13 = bitcast [4224 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16896, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %13, i8 -86, i64 16896, i1 false)
  %14 = getelementptr inbounds [4224 x i32], [4224 x i32]* %7, i64 0, i64 0
  call fastcc void @inv_txfm2d_add_facade(i32* nonnull %10, i16* %1, i32 %2, i32* nonnull %14, i8 zeroext %3, i8 zeroext 4, i32 %4)
  call void @llvm.lifetime.end.p0i8(i64 16896, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 16384, i8* nonnull %8) #5
  ret void

15:                                               ; preds = %15, %5
  %16 = phi i64 [ 0, %5 ], [ %34, %15 ]
  %17 = shl nsw i64 %16, 6
  %18 = getelementptr inbounds [4096 x i32], [4096 x i32]* %6, i64 0, i64 %17
  %19 = bitcast i32* %18 to i8*
  %20 = shl nsw i64 %16, 5
  %21 = getelementptr inbounds i32, i32* %0, i64 %20
  %22 = bitcast i32* %21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %19, i8* align 4 %22, i64 128, i1 false)
  %23 = getelementptr inbounds i32, i32* %18, i64 32
  %24 = bitcast i32* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %24, i8 0, i64 128, i1 false)
  %25 = or i64 %16, 1
  %26 = shl nsw i64 %25, 6
  %27 = getelementptr inbounds [4096 x i32], [4096 x i32]* %6, i64 0, i64 %26
  %28 = bitcast i32* %27 to i8*
  %29 = shl nsw i64 %25, 5
  %30 = getelementptr inbounds i32, i32* %0, i64 %29
  %31 = bitcast i32* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %28, i8* align 4 %31, i64 128, i1 false)
  %32 = getelementptr inbounds i32, i32* %27, i64 32
  %33 = bitcast i32* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %33, i8 0, i64 128, i1 false)
  %34 = add nuw nsw i64 %16, 2
  %35 = icmp eq i64 %34, 32
  br i1 %35, label %9, label %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_inv_txfm2d_add_64x32_c(i32* nocapture readonly, i16* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [2048 x i32], align 16
  %7 = alloca [2176 x i32], align 32
  %8 = bitcast [2048 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %8) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 8192, i1 false)
  br label %13

9:                                                ; preds = %13
  %10 = bitcast [2176 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8704, i8* nonnull %10) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %10, i8 -86, i64 8704, i1 false)
  %11 = getelementptr inbounds [2048 x i32], [2048 x i32]* %6, i64 0, i64 0
  %12 = getelementptr inbounds [2176 x i32], [2176 x i32]* %7, i64 0, i64 0
  call fastcc void @inv_txfm2d_add_facade(i32* nonnull %11, i16* %1, i32 %2, i32* nonnull %12, i8 zeroext %3, i8 zeroext 12, i32 %4)
  call void @llvm.lifetime.end.p0i8(i64 8704, i8* nonnull %10) #5
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %8) #5
  ret void

13:                                               ; preds = %13, %5
  %14 = phi i64 [ 0, %5 ], [ %32, %13 ]
  %15 = shl nsw i64 %14, 6
  %16 = getelementptr inbounds [2048 x i32], [2048 x i32]* %6, i64 0, i64 %15
  %17 = bitcast i32* %16 to i8*
  %18 = shl nsw i64 %14, 5
  %19 = getelementptr inbounds i32, i32* %0, i64 %18
  %20 = bitcast i32* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %17, i8* align 4 %20, i64 128, i1 false)
  %21 = getelementptr inbounds i32, i32* %16, i64 32
  %22 = bitcast i32* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %22, i8 0, i64 128, i1 false)
  %23 = or i64 %14, 1
  %24 = shl nsw i64 %23, 6
  %25 = getelementptr inbounds [2048 x i32], [2048 x i32]* %6, i64 0, i64 %24
  %26 = bitcast i32* %25 to i8*
  %27 = shl nsw i64 %23, 5
  %28 = getelementptr inbounds i32, i32* %0, i64 %27
  %29 = bitcast i32* %28 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %26, i8* align 4 %29, i64 128, i1 false)
  %30 = getelementptr inbounds i32, i32* %25, i64 32
  %31 = bitcast i32* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %31, i8 0, i64 128, i1 false)
  %32 = add nuw nsw i64 %14, 2
  %33 = icmp eq i64 %32, 32
  br i1 %33, label %9, label %13
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_inv_txfm2d_add_32x64_c(i32* nocapture readonly, i16* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [2048 x i32], align 16
  %7 = alloca [2176 x i32], align 32
  %8 = bitcast [2048 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %8) #5
  %9 = getelementptr inbounds [2048 x i32], [2048 x i32]* %6, i64 0, i64 0
  %10 = bitcast i32* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %8, i8* align 4 %10, i64 4096, i1 false)
  %11 = getelementptr inbounds [2048 x i32], [2048 x i32]* %6, i64 0, i64 1024
  %12 = bitcast i32* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %12, i8 0, i64 4096, i1 false)
  %13 = bitcast [2176 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8704, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %13, i8 -86, i64 8704, i1 false)
  %14 = getelementptr inbounds [2176 x i32], [2176 x i32]* %7, i64 0, i64 0
  call fastcc void @inv_txfm2d_add_facade(i32* nonnull %9, i16* %1, i32 %2, i32* nonnull %14, i8 zeroext %3, i8 zeroext 11, i32 %4)
  call void @llvm.lifetime.end.p0i8(i64 8704, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %8) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_inv_txfm2d_add_16x64_c(i32* nocapture readonly, i16* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [1024 x i32], align 16
  %7 = alloca [1152 x i32], align 32
  %8 = bitcast [1024 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %8) #5
  %9 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 0
  %10 = bitcast i32* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %8, i8* align 4 %10, i64 2048, i1 false)
  %11 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 512
  %12 = bitcast i32* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %12, i8 0, i64 2048, i1 false)
  %13 = bitcast [1152 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4608, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %13, i8 -86, i64 4608, i1 false)
  %14 = getelementptr inbounds [1152 x i32], [1152 x i32]* %7, i64 0, i64 0
  call fastcc void @inv_txfm2d_add_facade(i32* nonnull %9, i16* %1, i32 %2, i32* nonnull %14, i8 zeroext %3, i8 zeroext 17, i32 %4)
  call void @llvm.lifetime.end.p0i8(i64 4608, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %8) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_inv_txfm2d_add_64x16_c(i32* nocapture readonly, i16* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [1024 x i32], align 16
  %7 = alloca [1152 x i32], align 32
  %8 = bitcast [1024 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %8) #5
  %9 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 0
  %10 = bitcast [1024 x i32]* %6 to i8*
  %11 = bitcast i32* %0 to i8*
  %12 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 800
  %13 = bitcast i32* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %13, i8 -86, i64 896, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %10, i8* align 4 %11, i64 128, i1 false)
  %14 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 32
  %15 = bitcast i32* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %15, i8 0, i64 128, i1 false)
  %16 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 64
  %17 = bitcast i32* %16 to i8*
  %18 = getelementptr inbounds i32, i32* %0, i64 32
  %19 = bitcast i32* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %17, i8* align 4 %19, i64 128, i1 false)
  %20 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 96
  %21 = bitcast i32* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %21, i8 0, i64 128, i1 false)
  %22 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 128
  %23 = bitcast i32* %22 to i8*
  %24 = getelementptr inbounds i32, i32* %0, i64 64
  %25 = bitcast i32* %24 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %23, i8* align 4 %25, i64 128, i1 false)
  %26 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 160
  %27 = bitcast i32* %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %27, i8 0, i64 128, i1 false)
  %28 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 192
  %29 = bitcast i32* %28 to i8*
  %30 = getelementptr inbounds i32, i32* %0, i64 96
  %31 = bitcast i32* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %29, i8* align 4 %31, i64 128, i1 false)
  %32 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 224
  %33 = bitcast i32* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %33, i8 0, i64 128, i1 false)
  %34 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 256
  %35 = bitcast i32* %34 to i8*
  %36 = getelementptr inbounds i32, i32* %0, i64 128
  %37 = bitcast i32* %36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %35, i8* align 4 %37, i64 128, i1 false)
  %38 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 288
  %39 = bitcast i32* %38 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %39, i8 0, i64 128, i1 false)
  %40 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 320
  %41 = bitcast i32* %40 to i8*
  %42 = getelementptr inbounds i32, i32* %0, i64 160
  %43 = bitcast i32* %42 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %41, i8* align 4 %43, i64 128, i1 false)
  %44 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 352
  %45 = bitcast i32* %44 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %45, i8 0, i64 128, i1 false)
  %46 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 384
  %47 = bitcast i32* %46 to i8*
  %48 = getelementptr inbounds i32, i32* %0, i64 192
  %49 = bitcast i32* %48 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %47, i8* align 4 %49, i64 128, i1 false)
  %50 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 416
  %51 = bitcast i32* %50 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %51, i8 0, i64 128, i1 false)
  %52 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 448
  %53 = bitcast i32* %52 to i8*
  %54 = getelementptr inbounds i32, i32* %0, i64 224
  %55 = bitcast i32* %54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %53, i8* align 4 %55, i64 128, i1 false)
  %56 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 480
  %57 = bitcast i32* %56 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %57, i8 0, i64 128, i1 false)
  %58 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 512
  %59 = bitcast i32* %58 to i8*
  %60 = getelementptr inbounds i32, i32* %0, i64 256
  %61 = bitcast i32* %60 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %59, i8* align 4 %61, i64 128, i1 false)
  %62 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 544
  %63 = bitcast i32* %62 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %63, i8 0, i64 128, i1 false)
  %64 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 576
  %65 = bitcast i32* %64 to i8*
  %66 = getelementptr inbounds i32, i32* %0, i64 288
  %67 = bitcast i32* %66 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %65, i8* align 4 %67, i64 128, i1 false)
  %68 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 608
  %69 = bitcast i32* %68 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %69, i8 0, i64 128, i1 false)
  %70 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 640
  %71 = bitcast i32* %70 to i8*
  %72 = getelementptr inbounds i32, i32* %0, i64 320
  %73 = bitcast i32* %72 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %71, i8* align 4 %73, i64 128, i1 false)
  %74 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 672
  %75 = bitcast i32* %74 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %75, i8 0, i64 128, i1 false)
  %76 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 704
  %77 = bitcast i32* %76 to i8*
  %78 = getelementptr inbounds i32, i32* %0, i64 352
  %79 = bitcast i32* %78 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %77, i8* align 4 %79, i64 128, i1 false)
  %80 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 736
  %81 = bitcast i32* %80 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %81, i8 0, i64 128, i1 false)
  %82 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 768
  %83 = bitcast i32* %82 to i8*
  %84 = getelementptr inbounds i32, i32* %0, i64 384
  %85 = bitcast i32* %84 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %83, i8* align 4 %85, i64 128, i1 false)
  %86 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 800
  %87 = bitcast i32* %86 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %87, i8 0, i64 128, i1 false)
  %88 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 832
  %89 = bitcast i32* %88 to i8*
  %90 = getelementptr inbounds i32, i32* %0, i64 416
  %91 = bitcast i32* %90 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %89, i8* align 4 %91, i64 128, i1 false)
  %92 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 864
  %93 = bitcast i32* %92 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %93, i8 0, i64 128, i1 false)
  %94 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 896
  %95 = bitcast i32* %94 to i8*
  %96 = getelementptr inbounds i32, i32* %0, i64 448
  %97 = bitcast i32* %96 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %95, i8* align 4 %97, i64 128, i1 false)
  %98 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 928
  %99 = bitcast i32* %98 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %99, i8 0, i64 128, i1 false)
  %100 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 960
  %101 = bitcast i32* %100 to i8*
  %102 = getelementptr inbounds i32, i32* %0, i64 480
  %103 = bitcast i32* %102 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %101, i8* align 4 %103, i64 128, i1 false)
  %104 = getelementptr inbounds [1024 x i32], [1024 x i32]* %6, i64 0, i64 992
  %105 = bitcast i32* %104 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %105, i8 0, i64 128, i1 false)
  %106 = bitcast [1152 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4608, i8* nonnull %106) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %106, i8 -86, i64 4608, i1 false)
  %107 = getelementptr inbounds [1152 x i32], [1152 x i32]* %7, i64 0, i64 0
  call fastcc void @inv_txfm2d_add_facade(i32* nonnull %9, i16* %1, i32 %2, i32* nonnull %107, i8 zeroext %3, i8 zeroext 18, i32 %4)
  call void @llvm.lifetime.end.p0i8(i64 4608, i8* nonnull %106) #5
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %8) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_inv_txfm2d_add_4x16_c(i32* nocapture readonly, i16* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [96 x i32], align 32
  %7 = bitcast [96 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 384, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 384, i1 false)
  %8 = getelementptr inbounds [96 x i32], [96 x i32]* %6, i64 0, i64 0
  call fastcc void @inv_txfm2d_add_facade(i32* %0, i16* %1, i32 %2, i32* nonnull %8, i8 zeroext %3, i8 zeroext 13, i32 %4)
  call void @llvm.lifetime.end.p0i8(i64 384, i8* nonnull %7) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_inv_txfm2d_add_16x4_c(i32* nocapture readonly, i16* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [96 x i32], align 32
  %7 = bitcast [96 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 384, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 384, i1 false)
  %8 = getelementptr inbounds [96 x i32], [96 x i32]* %6, i64 0, i64 0
  call fastcc void @inv_txfm2d_add_facade(i32* %0, i16* %1, i32 %2, i32* nonnull %8, i8 zeroext %3, i8 zeroext 14, i32 %4)
  call void @llvm.lifetime.end.p0i8(i64 384, i8* nonnull %7) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_inv_txfm2d_add_8x32_c(i32* nocapture readonly, i16* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [320 x i32], align 32
  %7 = bitcast [320 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1280, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 1280, i1 false)
  %8 = getelementptr inbounds [320 x i32], [320 x i32]* %6, i64 0, i64 0
  call fastcc void @inv_txfm2d_add_facade(i32* %0, i16* %1, i32 %2, i32* nonnull %8, i8 zeroext %3, i8 zeroext 15, i32 %4)
  call void @llvm.lifetime.end.p0i8(i64 1280, i8* nonnull %7) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_inv_txfm2d_add_32x8_c(i32* nocapture readonly, i16* nocapture, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = alloca [320 x i32], align 32
  %7 = bitcast [320 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1280, i8* nonnull %7) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %7, i8 -86, i64 1280, i1 false)
  %8 = getelementptr inbounds [320 x i32], [320 x i32]* %6, i64 0, i64 0
  call fastcc void @inv_txfm2d_add_facade(i32* %0, i16* %1, i32 %2, i32* nonnull %8, i8 zeroext %3, i8 zeroext 16, i32 %4)
  call void @llvm.lifetime.end.p0i8(i64 1280, i8* nonnull %7) #5
  ret void
}

declare void @av1_idct4(i32*, i32*, i8 signext, i8*) local_unnamed_addr #4

declare void @av1_idct8(i32*, i32*, i8 signext, i8*) local_unnamed_addr #4

declare void @av1_idct16(i32*, i32*, i8 signext, i8*) local_unnamed_addr #4

declare void @av1_idct32(i32*, i32*, i8 signext, i8*) local_unnamed_addr #4

declare void @av1_idct64(i32*, i32*, i8 signext, i8*) local_unnamed_addr #4

declare void @av1_iadst4(i32*, i32*, i8 signext, i8*) local_unnamed_addr #4

declare void @av1_iadst8(i32*, i32*, i8 signext, i8*) local_unnamed_addr #4

declare void @av1_iadst16(i32*, i32*, i8 signext, i8*) local_unnamed_addr #4

declare void @av1_iidentity4_c(i32*, i32*, i8 signext, i8*) local_unnamed_addr #4

declare void @av1_iidentity8_c(i32*, i32*, i8 signext, i8*) local_unnamed_addr #4

declare void @av1_iidentity16_c(i32*, i32*, i8 signext, i8*) local_unnamed_addr #4

declare void @av1_iidentity32_c(i32*, i32*, i8 signext, i8*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
