; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/add.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/add.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteRegistration = type { {}*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteAddParams = type { i32 }
%"struct.tflite::ops::builtin::add::OpData" = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.tflite::ArithmeticParams" = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, [5 x i32] }
%"class.tflite::RuntimeShape" = type { i32, %union.anon }
%union.anon = type { i32*, [16 x i8] }
%"struct.tflite::NdArrayDesc" = type { [4 x i32], [4 x i32] }

$_ZN6tflite3ops7builtin3add4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin3add4EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin3add4EvalILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode = comdat any

$_ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_ = comdat any

$_ZN6tflite3ops7builtin3add16EvalAddQuantizedILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSH_PSF_ = comdat any

$_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE = comdat any

$_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKiS6_S8_S6_Pi = comdat any

$_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf = comdat any

$_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_ = comdat any

$_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa = comdat any

$_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph = comdat any

$_ZN6tflite21reference_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa = comdat any

$_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph = comdat any

$_ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_ = comdat any

$_ZN6tflite3ops7builtin3add16EvalAddQuantizedILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSH_PSF_ = comdat any

$_ZN6tflite13optimized_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKiS6_S8_S6_Pi = comdat any

$_ZN6tflite13optimized_ops20BroadcastAddDispatchIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_ = comdat any

$_ZN6tflite21optimized_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa = comdat any

$_ZN6tflite21optimized_integer_ops18AddScalarBroadcastEiRKNS_16ArithmeticParamsEaPKaPa = comdat any

$_ZN6tflite13optimized_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph = comdat any

$_ZN6tflite13optimized_ops18AddScalarBroadcastEiRKNS_16ArithmeticParamsEhPKhPh = comdat any

$_ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_ = comdat any

$_ZN6tflite3ops7builtin3add16EvalAddQuantizedILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSH_PSF_ = comdat any

@.str = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%d != %d)\00", align 1
@.str.3 = private unnamed_addr constant [60 x i8] c"../../third_party/tflite/src/tensorflow/lite/kernels/add.cc\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"NumInputs(node)\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"NumOutputs(node)\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.8 = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%s != %s)\00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"input1->type\00", align 1
@.str.10 = private unnamed_addr constant [13 x i8] c"input2->type\00", align 1
@.str.11 = private unnamed_addr constant [26 x i8] c"input1->params.zero_point\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.13 = private unnamed_addr constant [26 x i8] c"input2->params.zero_point\00", align 1
@.str.14 = private unnamed_addr constant [26 x i8] c"output->params.zero_point\00", align 1
@.str.15 = private unnamed_addr constant [23 x i8] c"%s:%d %s was not true.\00", align 1
@.str.16 = private unnamed_addr constant [20 x i8] c"input1_scale_is_pot\00", align 1
@.str.17 = private unnamed_addr constant [20 x i8] c"input2_scale_is_pot\00", align 1
@.str.18 = private unnamed_addr constant [20 x i8] c"output_scale_is_pot\00", align 1
@.str.19 = private unnamed_addr constant [51 x i8] c"data->input1_shift == 0 || data->input2_shift == 0\00", align 1
@.str.20 = private unnamed_addr constant [24 x i8] c"data->input1_shift <= 0\00", align 1
@.str.21 = private unnamed_addr constant [24 x i8] c"data->input2_shift <= 0\00", align 1
@_ZZN6tflite3ops7builtin16Register_ADD_REFEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin3add4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin3add4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin3add7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin3add4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin24Register_ADD_GENERIC_OPTEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin3add4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin3add4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin3add7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin3add4EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@_ZZN6tflite3ops7builtin21Register_ADD_NEON_OPTEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN6tflite3ops7builtin3add4InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN6tflite3ops7builtin3add4FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin3add7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin3add4EvalILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@.str.23 = private unnamed_addr constant [52 x i8] c"Inputs and outputs not all float|uint8|int16 types.\00", align 1
@__const._ZN6tflite3ops7builtin3add16EvalAddQuantizedILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSH_PSF_.op_params = private unnamed_addr constant { i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, [5 x i32] } { i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, [5 x i32] [i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766] }, align 4
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer
@switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.51 = private unnamed_addr constant [3 x i32] [i32 0, i32 -1, i32 0], align 4
@switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.52 = private unnamed_addr constant [3 x i32] [i32 2147483647, i32 1, i32 6], align 4
@switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.55 = private unnamed_addr constant [3 x float] [float 0.000000e+00, float -1.000000e+00, float 0.000000e+00], align 4
@switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.56 = private unnamed_addr constant [3 x float] [float 0x47EFFFFFE0000000, float 1.000000e+00, float 6.000000e+00], align 4

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias nonnull i8* @_ZN6tflite3ops7builtin3add4InitEP13TfLiteContextPKcm(%struct.TfLiteContext* nocapture readnone, i8* nocapture readnone, i64) #0 {
  %4 = tail call i8* @_Znwm(i64 48) #11
  ret i8* %4
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite3ops7builtin3add4FreeEP13TfLiteContextPv(%struct.TfLiteContext* nocapture readnone, i8*) #3 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void @_ZdlPv(i8* nonnull %1) #11
  br label %5

5:                                                ; preds = %4, %2
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin3add7PrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #3 {
  %3 = alloca %struct.TfLiteIntArray*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %8 = bitcast i8** %7 to %struct.TfLiteAddParams**
  %9 = load %struct.TfLiteAddParams*, %struct.TfLiteAddParams** %8, align 8
  %10 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %11 = bitcast i8** %10 to %"struct.tflite::ops::builtin::add::OpData"**
  %12 = load %"struct.tflite::ops::builtin::add::OpData"*, %"struct.tflite::ops::builtin::add::OpData"** %11, align 8
  %13 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %14 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %13, align 8
  %15 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %14, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 2
  br i1 %17, label %21, label %18

18:                                               ; preds = %2
  %19 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %20 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %19, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %20(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3, i64 0, i64 0), i32 86, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %16, i32 2) #12
  br label %214

21:                                               ; preds = %2
  %22 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %23 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %22, align 8
  %24 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %23, i64 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 1
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %29 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %28, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %29(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3, i64 0, i64 0), i32 87, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), i32 %25, i32 1) #12
  br label %214

30:                                               ; preds = %21
  %31 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %14, i64 0, i32 1, i64 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %39, label %34

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %36 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %35, align 8
  %37 = sext i32 %32 to i64
  %38 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %36, i64 %37
  br label %39

39:                                               ; preds = %30, %34
  %40 = phi %struct.TfLiteTensor* [ %38, %34 ], [ null, %30 ]
  %41 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %14, i64 0, i32 1, i64 1
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %39
  %45 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %46 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %45, align 8
  %47 = sext i32 %42 to i64
  %48 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %46, i64 %47
  br label %49

49:                                               ; preds = %39, %44
  %50 = phi %struct.TfLiteTensor* [ %48, %44 ], [ null, %39 ]
  %51 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %23, i64 0, i32 1, i64 0
  %52 = load i32, i32* %51, align 4
  %53 = icmp slt i32 %52, 0
  br i1 %53, label %59, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %56 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %55, align 8
  %57 = sext i32 %52 to i64
  %58 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %56, i64 %57
  br label %59

59:                                               ; preds = %49, %54
  %60 = phi %struct.TfLiteTensor* [ %58, %54 ], [ null, %49 ]
  %61 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 0
  %62 = load i32, i32* %61, align 8
  %63 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %50, i64 0, i32 0
  %64 = load i32, i32* %63, align 8
  %65 = icmp eq i32 %62, %64
  br i1 %65, label %72, label %66

66:                                               ; preds = %59
  %67 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %68 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %67, align 8
  %69 = tail call i8* @TfLiteTypeGetName(i32 %62) #12
  %70 = load i32, i32* %63, align 8
  %71 = tail call i8* @TfLiteTypeGetName(i32 %70) #12
  tail call void (%struct.TfLiteContext*, i8*, ...) %68(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3, i64 0, i64 0), i32 93, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i64 0, i64 0), i8* %69, i8* %71) #12
  br label %214

72:                                               ; preds = %59
  %73 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %60, i64 0, i32 0
  store i32 %62, i32* %73, align 8
  %74 = tail call zeroext i1 @_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_(%struct.TfLiteTensor* %40, %struct.TfLiteTensor* %50) #12
  %75 = bitcast %struct.TfLiteIntArray** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %75) #12
  store %struct.TfLiteIntArray* null, %struct.TfLiteIntArray** %3, align 8
  br i1 %74, label %79, label %76

76:                                               ; preds = %72
  %77 = call i32 @_ZN6tflite26CalculateShapeForBroadcastEP13TfLiteContextPK12TfLiteTensorS4_PP14TfLiteIntArray(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %40, %struct.TfLiteTensor* %50, %struct.TfLiteIntArray** nonnull %3) #12
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %83, label %212

79:                                               ; preds = %72
  %80 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 2
  %81 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %80, align 8
  %82 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %81) #12
  store %struct.TfLiteIntArray* %82, %struct.TfLiteIntArray** %3, align 8
  br label %83

83:                                               ; preds = %76, %79
  %84 = load i32, i32* %73, align 8
  switch i32 %84, label %207 [
    i32 3, label %85
    i32 9, label %85
    i32 7, label %129
  ]

85:                                               ; preds = %83, %83
  %86 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 3, i32 1
  %87 = load i32, i32* %86, align 4
  %88 = sub nsw i32 0, %87
  %89 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %12, i64 0, i32 9
  store i32 %88, i32* %89, align 4
  %90 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %50, i64 0, i32 3, i32 1
  %91 = load i32, i32* %90, align 4
  %92 = sub nsw i32 0, %91
  %93 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %12, i64 0, i32 10
  store i32 %92, i32* %93, align 4
  %94 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %60, i64 0, i32 3, i32 1
  %95 = load i32, i32* %94, align 4
  %96 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %12, i64 0, i32 11
  store i32 %95, i32* %96, align 4
  %97 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %12, i64 0, i32 8
  store i32 20, i32* %97, align 4
  %98 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 3, i32 0
  %99 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %50, i64 0, i32 3, i32 0
  %100 = load float, float* %98, align 4
  %101 = load float, float* %99, align 4
  %102 = fcmp olt float %100, %101
  %103 = select i1 %102, float %101, float %100
  %104 = fpext float %100 to double
  %105 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %60, i64 0, i32 3, i32 0
  %106 = load float, float* %105, align 8
  %107 = insertelement <2 x float> undef, float %103, i32 0
  %108 = insertelement <2 x float> %107, float %106, i32 1
  %109 = fmul <2 x float> %108, <float 2.000000e+00, float 0x4130000000000000>
  %110 = fpext <2 x float> %109 to <2 x double>
  %111 = extractelement <2 x double> %110, i32 0
  %112 = fdiv double %104, %111
  %113 = fpext float %101 to double
  %114 = fdiv double %113, %111
  %115 = extractelement <2 x double> %110, i32 1
  %116 = fdiv double %111, %115
  %117 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %12, i64 0, i32 4
  %118 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %12, i64 0, i32 0
  call void @_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_(double %112, i32* %117, i32* %118) #12
  %119 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %12, i64 0, i32 5
  %120 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %12, i64 0, i32 1
  call void @_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_(double %114, i32* %119, i32* %120) #12
  %121 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %12, i64 0, i32 6
  %122 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %12, i64 0, i32 7
  call void @_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_(double %116, i32* %121, i32* %122) #12
  %123 = getelementptr inbounds %struct.TfLiteAddParams, %struct.TfLiteAddParams* %9, i64 0, i32 0
  %124 = load i32, i32* %123, align 4
  %125 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %12, i64 0, i32 2
  %126 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %12, i64 0, i32 3
  %127 = call i32 @_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_(%struct.TfLiteContext* %0, i32 %124, %struct.TfLiteTensor* %60, i32* %125, i32* %126) #12
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %207, label %212

129:                                              ; preds = %83
  %130 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 3, i32 1
  %131 = load i32, i32* %130, align 4
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %136, label %133

133:                                              ; preds = %129
  %134 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %135 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %134, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %135(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3, i64 0, i64 0), i32 143, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0), i32 %131, i32 0) #12
  br label %212

136:                                              ; preds = %129
  %137 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %50, i64 0, i32 3, i32 1
  %138 = load i32, i32* %137, align 4
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %143, label %140

140:                                              ; preds = %136
  %141 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %142 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %141, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %142(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3, i64 0, i64 0), i32 144, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0), i32 %138, i32 0) #12
  br label %212

143:                                              ; preds = %136
  %144 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %60, i64 0, i32 3, i32 1
  %145 = load i32, i32* %144, align 4
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %150, label %147

147:                                              ; preds = %143
  %148 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %149 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %148, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %149(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3, i64 0, i64 0), i32 145, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0), i32 %145, i32 0) #12
  br label %212

150:                                              ; preds = %143
  %151 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %151) #12
  store i32 -1431655766, i32* %4, align 4
  %152 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 3, i32 0
  %153 = load float, float* %152, align 8
  %154 = call zeroext i1 @_ZN6tflite11CheckedLog2EfPi(float %153, i32* nonnull %4) #12
  br i1 %154, label %158, label %155

155:                                              ; preds = %150
  %156 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %157 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %156, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %157(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3, i64 0, i64 0), i32 150, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16, i64 0, i64 0)) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %151) #12
  br label %212

158:                                              ; preds = %150
  %159 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %159) #12
  store i32 -1431655766, i32* %5, align 4
  %160 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %50, i64 0, i32 3, i32 0
  %161 = load float, float* %160, align 8
  %162 = call zeroext i1 @_ZN6tflite11CheckedLog2EfPi(float %161, i32* nonnull %5) #12
  br i1 %162, label %166, label %163

163:                                              ; preds = %158
  %164 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %165 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %164, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %165(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3, i64 0, i64 0), i32 155, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.17, i64 0, i64 0)) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %159) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %151) #12
  br label %212

166:                                              ; preds = %158
  %167 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %167) #12
  store i32 -1431655766, i32* %6, align 4
  %168 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %60, i64 0, i32 3, i32 0
  %169 = load float, float* %168, align 8
  %170 = call zeroext i1 @_ZN6tflite11CheckedLog2EfPi(float %169, i32* nonnull %6) #12
  br i1 %170, label %174, label %171

171:                                              ; preds = %166
  %172 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %173 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %172, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %173(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3, i64 0, i64 0), i32 160, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.18, i64 0, i64 0)) #12
  br label %199

174:                                              ; preds = %166
  %175 = load i32, i32* %4, align 4
  %176 = load i32, i32* %6, align 4
  %177 = sub nsw i32 %175, %176
  %178 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %12, i64 0, i32 0
  store i32 %177, i32* %178, align 4
  %179 = load i32, i32* %5, align 4
  %180 = load i32, i32* %6, align 4
  %181 = sub nsw i32 %179, %180
  %182 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %12, i64 0, i32 1
  store i32 %181, i32* %182, align 4
  %183 = icmp eq i32 %177, 0
  %184 = icmp eq i32 %181, 0
  %185 = or i1 %183, %184
  br i1 %185, label %189, label %186

186:                                              ; preds = %174
  %187 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %188 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %187, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %188(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3, i64 0, i64 0), i32 167, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.19, i64 0, i64 0)) #12
  br label %199

189:                                              ; preds = %174
  %190 = icmp slt i32 %177, 1
  br i1 %190, label %194, label %191

191:                                              ; preds = %189
  %192 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %193 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %192, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %193(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3, i64 0, i64 0), i32 168, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.20, i64 0, i64 0)) #12
  br label %199

194:                                              ; preds = %189
  %195 = icmp slt i32 %181, 1
  br i1 %195, label %200, label %196

196:                                              ; preds = %194
  %197 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %198 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %197, align 8
  call void (%struct.TfLiteContext*, i8*, ...) %198(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3, i64 0, i64 0), i32 169, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21, i64 0, i64 0)) #12
  br label %199

199:                                              ; preds = %196, %191, %186, %171
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %167) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %159) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %151) #12
  br label %212

200:                                              ; preds = %194
  %201 = getelementptr inbounds %struct.TfLiteAddParams, %struct.TfLiteAddParams* %9, i64 0, i32 0
  %202 = load i32, i32* %201, align 4
  %203 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %12, i64 0, i32 2
  %204 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %12, i64 0, i32 3
  %205 = call i32 @_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_(%struct.TfLiteContext* %0, i32 %202, %struct.TfLiteTensor* %60, i32* %203, i32* %204) #12
  %206 = icmp eq i32 %205, 0
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %167) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %159) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %151) #12
  br i1 %206, label %207, label %212

207:                                              ; preds = %83, %200, %85
  %208 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %209 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %208, align 8
  %210 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %211 = call i32 %209(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %60, %struct.TfLiteIntArray* %210) #12
  br label %212

212:                                              ; preds = %199, %163, %155, %76, %85, %200, %207, %147, %140, %133
  %213 = phi i32 [ %211, %207 ], [ %127, %85 ], [ 1, %133 ], [ 1, %140 ], [ 1, %147 ], [ %205, %200 ], [ %77, %76 ], [ 1, %155 ], [ 1, %163 ], [ 1, %199 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %75) #12
  br label %214

214:                                              ; preds = %66, %212, %27, %18
  %215 = phi i32 [ 1, %18 ], [ 1, %27 ], [ 1, %66 ], [ %213, %212 ]
  ret i32 %215
}

declare i8* @TfLiteTypeGetName(i32) local_unnamed_addr #5

declare zeroext i1 @_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_(%struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #5

declare i32 @_ZN6tflite26CalculateShapeForBroadcastEP13TfLiteContextPK12TfLiteTensorS4_PP14TfLiteIntArray(%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteIntArray**) local_unnamed_addr #5

declare %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray*) local_unnamed_addr #5

declare void @_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_(double, i32*, i32*) local_unnamed_addr #5

declare i32 @_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_(%struct.TfLiteContext*, i32, %struct.TfLiteTensor*, i32*, i32*) local_unnamed_addr #5

declare zeroext i1 @_ZN6tflite11CheckedLog2EfPi(float, i32*) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin16Register_ADD_REFEv() local_unnamed_addr #6 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin16Register_ADD_REFEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin3add4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #3 comdat {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %4 = bitcast i8** %3 to %struct.TfLiteAddParams**
  %5 = load %struct.TfLiteAddParams*, %struct.TfLiteAddParams** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %7 = bitcast i8** %6 to %"struct.tflite::ops::builtin::add::OpData"**
  %8 = load %"struct.tflite::ops::builtin::add::OpData"*, %"struct.tflite::ops::builtin::add::OpData"** %7, align 8
  %9 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %10 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %11 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 1, i64 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %16 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %15, align 8
  %17 = sext i32 %12 to i64
  %18 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 %17
  br label %19

19:                                               ; preds = %2, %14
  %20 = phi %struct.TfLiteTensor* [ %18, %14 ], [ null, %2 ]
  %21 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 1, i64 1
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %26 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %25, align 8
  %27 = sext i32 %22 to i64
  %28 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 %27
  br label %29

29:                                               ; preds = %19, %24
  %30 = phi %struct.TfLiteTensor* [ %28, %24 ], [ null, %19 ]
  %31 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %32 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %31, align 8
  %33 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %32, i64 0, i32 1, i64 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %41, label %36

36:                                               ; preds = %29
  %37 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %38 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %37, align 8
  %39 = sext i32 %34 to i64
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %38, i64 %39
  br label %41

41:                                               ; preds = %29, %36
  %42 = phi %struct.TfLiteTensor* [ %40, %36 ], [ null, %29 ]
  %43 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 8
  switch i32 %44, label %49 [
    i32 1, label %45
    i32 2, label %45
    i32 3, label %46
    i32 9, label %46
    i32 7, label %46
  ]

45:                                               ; preds = %41, %41
  tail call void @_ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLiteAddParams* %5, %"struct.tflite::ops::builtin::add::OpData"* %8, %struct.TfLiteTensor* %20, %struct.TfLiteTensor* %30, %struct.TfLiteTensor* %42)
  br label %52

46:                                               ; preds = %41, %41, %41
  %47 = tail call i32 @_ZN6tflite3ops7builtin3add16EvalAddQuantizedILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSH_PSF_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLiteAddParams* %5, %"struct.tflite::ops::builtin::add::OpData"* %8, %struct.TfLiteTensor* %20, %struct.TfLiteTensor* %30, %struct.TfLiteTensor* %42)
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %52, label %53

49:                                               ; preds = %41
  %50 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %51 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %50, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %51(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.23, i64 0, i64 0)) #12
  br label %53

52:                                               ; preds = %46, %45
  br label %53

53:                                               ; preds = %46, %52, %49
  %54 = phi i32 [ 0, %52 ], [ %47, %46 ], [ 1, %49 ]
  ret i32 %54
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin24Register_ADD_GENERIC_OPTEv() local_unnamed_addr #6 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin24Register_ADD_GENERIC_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin3add4EvalILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #3 comdat {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %4 = bitcast i8** %3 to %struct.TfLiteAddParams**
  %5 = load %struct.TfLiteAddParams*, %struct.TfLiteAddParams** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %7 = bitcast i8** %6 to %"struct.tflite::ops::builtin::add::OpData"**
  %8 = load %"struct.tflite::ops::builtin::add::OpData"*, %"struct.tflite::ops::builtin::add::OpData"** %7, align 8
  %9 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %10 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %11 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 1, i64 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %16 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %15, align 8
  %17 = sext i32 %12 to i64
  %18 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 %17
  br label %19

19:                                               ; preds = %2, %14
  %20 = phi %struct.TfLiteTensor* [ %18, %14 ], [ null, %2 ]
  %21 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 1, i64 1
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %26 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %25, align 8
  %27 = sext i32 %22 to i64
  %28 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 %27
  br label %29

29:                                               ; preds = %19, %24
  %30 = phi %struct.TfLiteTensor* [ %28, %24 ], [ null, %19 ]
  %31 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %32 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %31, align 8
  %33 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %32, i64 0, i32 1, i64 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %41, label %36

36:                                               ; preds = %29
  %37 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %38 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %37, align 8
  %39 = sext i32 %34 to i64
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %38, i64 %39
  br label %41

41:                                               ; preds = %29, %36
  %42 = phi %struct.TfLiteTensor* [ %40, %36 ], [ null, %29 ]
  %43 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 8
  switch i32 %44, label %49 [
    i32 1, label %45
    i32 2, label %45
    i32 3, label %46
    i32 9, label %46
    i32 7, label %46
  ]

45:                                               ; preds = %41, %41
  tail call void @_ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLiteAddParams* %5, %"struct.tflite::ops::builtin::add::OpData"* %8, %struct.TfLiteTensor* %20, %struct.TfLiteTensor* %30, %struct.TfLiteTensor* %42)
  br label %52

46:                                               ; preds = %41, %41, %41
  %47 = tail call i32 @_ZN6tflite3ops7builtin3add16EvalAddQuantizedILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSH_PSF_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLiteAddParams* %5, %"struct.tflite::ops::builtin::add::OpData"* %8, %struct.TfLiteTensor* %20, %struct.TfLiteTensor* %30, %struct.TfLiteTensor* %42)
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %52, label %53

49:                                               ; preds = %41
  %50 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %51 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %50, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %51(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.23, i64 0, i64 0)) #12
  br label %53

52:                                               ; preds = %46, %45
  br label %53

53:                                               ; preds = %46, %52, %49
  %54 = phi i32 [ 0, %52 ], [ %47, %46 ], [ 1, %49 ]
  ret i32 %54
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin21Register_ADD_NEON_OPTEv() local_unnamed_addr #6 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin21Register_ADD_NEON_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin3add4EvalILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode*) #3 comdat {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 5
  %4 = bitcast i8** %3 to %struct.TfLiteAddParams**
  %5 = load %struct.TfLiteAddParams*, %struct.TfLiteAddParams** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %7 = bitcast i8** %6 to %"struct.tflite::ops::builtin::add::OpData"**
  %8 = load %"struct.tflite::ops::builtin::add::OpData"*, %"struct.tflite::ops::builtin::add::OpData"** %7, align 8
  %9 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %10 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %9, align 8
  %11 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 1, i64 0
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %16 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %15, align 8
  %17 = sext i32 %12 to i64
  %18 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 %17
  br label %19

19:                                               ; preds = %2, %14
  %20 = phi %struct.TfLiteTensor* [ %18, %14 ], [ null, %2 ]
  %21 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %10, i64 0, i32 1, i64 1
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %26 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %25, align 8
  %27 = sext i32 %22 to i64
  %28 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 %27
  br label %29

29:                                               ; preds = %19, %24
  %30 = phi %struct.TfLiteTensor* [ %28, %24 ], [ null, %19 ]
  %31 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %32 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %31, align 8
  %33 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %32, i64 0, i32 1, i64 0
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %41, label %36

36:                                               ; preds = %29
  %37 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %38 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %37, align 8
  %39 = sext i32 %34 to i64
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %38, i64 %39
  br label %41

41:                                               ; preds = %29, %36
  %42 = phi %struct.TfLiteTensor* [ %40, %36 ], [ null, %29 ]
  %43 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %42, i64 0, i32 0
  %44 = load i32, i32* %43, align 8
  switch i32 %44, label %49 [
    i32 1, label %45
    i32 2, label %45
    i32 3, label %46
    i32 9, label %46
    i32 7, label %46
  ]

45:                                               ; preds = %41, %41
  tail call void @_ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLiteAddParams* %5, %"struct.tflite::ops::builtin::add::OpData"* %8, %struct.TfLiteTensor* %20, %struct.TfLiteTensor* %30, %struct.TfLiteTensor* %42)
  br label %52

46:                                               ; preds = %41, %41, %41
  %47 = tail call i32 @_ZN6tflite3ops7builtin3add16EvalAddQuantizedILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSH_PSF_(%struct.TfLiteContext* %0, %struct.TfLiteNode* %1, %struct.TfLiteAddParams* %5, %"struct.tflite::ops::builtin::add::OpData"* %8, %struct.TfLiteTensor* %20, %struct.TfLiteTensor* %30, %struct.TfLiteTensor* %42)
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %52, label %53

49:                                               ; preds = %41
  %50 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %51 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %50, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %51(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.23, i64 0, i64 0)) #12
  br label %53

52:                                               ; preds = %46, %45
  br label %53

53:                                               ; preds = %46, %52, %49
  %54 = phi i32 [ 0, %52 ], [ %47, %46 ], [ 1, %49 ]
  ret i32 %54
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin12Register_ADDEv() local_unnamed_addr #6 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin24Register_ADD_GENERIC_OPTEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE0EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLiteAddParams*, %"struct.tflite::ops::builtin::add::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #3 comdat {
  %8 = alloca %"struct.tflite::ArithmeticParams", align 4
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = alloca %"class.tflite::RuntimeShape", align 8
  %13 = alloca %"class.tflite::RuntimeShape", align 8
  %14 = alloca %"class.tflite::RuntimeShape", align 8
  %15 = alloca %"class.tflite::RuntimeShape", align 8
  %16 = alloca %"class.tflite::RuntimeShape", align 8
  %17 = alloca %"class.tflite::RuntimeShape", align 8
  %18 = alloca %"class.tflite::RuntimeShape", align 8
  %19 = alloca %"class.tflite::RuntimeShape", align 8
  %20 = alloca %"class.tflite::RuntimeShape", align 8
  %21 = alloca %"class.tflite::RuntimeShape", align 8
  %22 = alloca %"class.tflite::RuntimeShape", align 8
  %23 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %23) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %23, i8* align 4 getelementptr inbounds ({ i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, [5 x i32] }, { i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, [5 x i32] }* @__const._ZN6tflite3ops7builtin3add16EvalAddQuantizedILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSH_PSF_.op_params, i64 0, i32 0), i64 80, i1 false)
  %24 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %24) #12
  %25 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %25, label %26, label %28

26:                                               ; preds = %7
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %27, align 8, !alias.scope !2
  br label %53

28:                                               ; preds = %7
  %29 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %30 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %29, align 8, !noalias !2
  %31 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %30, i64 0, i32 0
  %32 = load i32, i32* %31, align 4, !noalias !2
  %33 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %30, i64 0, i32 1, i64 0
  %34 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %32, i32* %34, align 8, !alias.scope !2
  %35 = icmp sgt i32 %32, 5
  br i1 %35, label %36, label %43

36:                                               ; preds = %28
  %37 = sext i32 %32 to i64
  %38 = shl nsw i64 %37, 2
  %39 = tail call i8* @_Znam(i64 %38) #11, !noalias !2
  %40 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %41 = bitcast i32** %40 to i8**
  store i8* %39, i8** %41, align 8, !alias.scope !2
  %42 = bitcast i8* %39 to i32*
  br label %48

43:                                               ; preds = %28
  %44 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %45 = bitcast %union.anon* %44 to i32*
  %46 = sext i32 %32 to i64
  %47 = shl nsw i64 %46, 2
  br label %48

48:                                               ; preds = %43, %36
  %49 = phi i64 [ %38, %36 ], [ %47, %43 ]
  %50 = phi i32* [ %42, %36 ], [ %45, %43 ]
  %51 = bitcast i32* %50 to i8*
  %52 = bitcast i32* %33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %51, i8* align 4 %52, i64 %49, i1 false) #12
  br label %53

53:                                               ; preds = %26, %48
  %54 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %54) #12
  %55 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %55, label %56, label %58

56:                                               ; preds = %53
  %57 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %57, align 8, !alias.scope !5
  br label %83

58:                                               ; preds = %53
  %59 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %60 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %59, align 8, !noalias !5
  %61 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %60, i64 0, i32 0
  %62 = load i32, i32* %61, align 4, !noalias !5
  %63 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %60, i64 0, i32 1, i64 0
  %64 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %62, i32* %64, align 8, !alias.scope !5
  %65 = icmp sgt i32 %62, 5
  br i1 %65, label %66, label %73

66:                                               ; preds = %58
  %67 = sext i32 %62 to i64
  %68 = shl nsw i64 %67, 2
  %69 = tail call i8* @_Znam(i64 %68) #11, !noalias !5
  %70 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %71 = bitcast i32** %70 to i8**
  store i8* %69, i8** %71, align 8, !alias.scope !5
  %72 = bitcast i8* %69 to i32*
  br label %78

73:                                               ; preds = %58
  %74 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %75 = bitcast %union.anon* %74 to i32*
  %76 = sext i32 %62 to i64
  %77 = shl nsw i64 %76, 2
  br label %78

78:                                               ; preds = %73, %66
  %79 = phi i64 [ %68, %66 ], [ %77, %73 ]
  %80 = phi i32* [ %72, %66 ], [ %75, %73 ]
  %81 = bitcast i32* %80 to i8*
  %82 = bitcast i32* %63 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %81, i8* align 4 %82, i64 %79, i1 false) #12
  br label %83

83:                                               ; preds = %56, %78
  %84 = call zeroext i1 @_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE(%"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %9, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %10, %"struct.tflite::ArithmeticParams"* nonnull %8)
  %85 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  %86 = load i32, i32* %85, align 8
  %87 = icmp sgt i32 %86, 5
  br i1 %87, label %88, label %94

88:                                               ; preds = %83
  %89 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %90 = load i32*, i32** %89, align 8
  %91 = icmp eq i32* %90, null
  br i1 %91, label %94, label %92

92:                                               ; preds = %88
  %93 = bitcast i32* %90 to i8*
  call void @_ZdaPv(i8* %93) #11
  br label %94

94:                                               ; preds = %83, %88, %92
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %54) #12
  %95 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  %96 = load i32, i32* %95, align 8
  %97 = icmp sgt i32 %96, 5
  br i1 %97, label %98, label %104

98:                                               ; preds = %94
  %99 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %100 = load i32*, i32** %99, align 8
  %101 = icmp eq i32* %100, null
  br i1 %101, label %104, label %102

102:                                              ; preds = %98
  %103 = bitcast i32* %100 to i8*
  call void @_ZdaPv(i8* %103) #11
  br label %104

104:                                              ; preds = %94, %98, %102
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #12
  %105 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 0
  %106 = load i32, i32* %105, align 8
  switch i32 %106, label %1569 [
    i32 2, label %107
    i32 1, label %823
  ]

107:                                              ; preds = %104
  %108 = getelementptr inbounds %struct.TfLiteAddParams, %struct.TfLiteAddParams* %2, i64 0, i32 0
  %109 = load i32, i32* %108, align 4
  %110 = add i32 %109, -1
  %111 = icmp ult i32 %110, 3
  br i1 %84, label %112, label %251

112:                                              ; preds = %107
  br i1 %111, label %113, label %120

113:                                              ; preds = %112
  %114 = sext i32 %110 to i64
  %115 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.51, i64 0, i64 %114
  %116 = load i32, i32* %115, align 4
  %117 = sext i32 %110 to i64
  %118 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.52, i64 0, i64 %117
  %119 = load i32, i32* %118, align 4
  br label %120

120:                                              ; preds = %112, %113
  %121 = phi i32 [ %116, %113 ], [ -2147483648, %112 ]
  %122 = phi i32 [ %119, %113 ], [ 2147483647, %112 ]
  %123 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 11
  store i32 %121, i32* %123, align 4
  %124 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 12
  store i32 %122, i32* %124, align 4
  %125 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %125) #12
  br i1 %25, label %126, label %128

126:                                              ; preds = %120
  %127 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %127, align 8, !alias.scope !8
  br label %155

128:                                              ; preds = %120
  %129 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %130 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %129, align 8, !noalias !8
  %131 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %130, i64 0, i32 0
  %132 = load i32, i32* %131, align 4, !noalias !8
  %133 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %130, i64 0, i32 1, i64 0
  %134 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %132, i32* %134, align 8, !alias.scope !8
  %135 = icmp sgt i32 %132, 5
  br i1 %135, label %136, label %143

136:                                              ; preds = %128
  %137 = sext i32 %132 to i64
  %138 = shl nsw i64 %137, 2
  %139 = call i8* @_Znam(i64 %138) #11, !noalias !8
  %140 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %141 = bitcast i32** %140 to i8**
  store i8* %139, i8** %141, align 8, !alias.scope !8
  %142 = bitcast i8* %139 to i32*
  br label %148

143:                                              ; preds = %128
  %144 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %145 = bitcast %union.anon* %144 to i32*
  %146 = sext i32 %132 to i64
  %147 = shl nsw i64 %146, 2
  br label %148

148:                                              ; preds = %143, %136
  %149 = phi i64 [ %138, %136 ], [ %147, %143 ]
  %150 = phi i32* [ %142, %136 ], [ %145, %143 ]
  %151 = bitcast i32* %150 to i8*
  %152 = bitcast i32* %133 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %151, i8* align 4 %152, i64 %149, i1 false) #12
  %153 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1, i32 0
  %154 = load i32*, i32** %153, align 8
  br label %155

155:                                              ; preds = %126, %148
  %156 = phi i32* [ %154, %148 ], [ null, %126 ]
  %157 = bitcast %"class.tflite::RuntimeShape"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %157) #12
  br i1 %55, label %158, label %160

158:                                              ; preds = %155
  %159 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 0, i32* %159, align 8, !alias.scope !11
  br label %187

160:                                              ; preds = %155
  %161 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %162 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %161, align 8, !noalias !11
  %163 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %162, i64 0, i32 0
  %164 = load i32, i32* %163, align 4, !noalias !11
  %165 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %162, i64 0, i32 1, i64 0
  %166 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 %164, i32* %166, align 8, !alias.scope !11
  %167 = icmp sgt i32 %164, 5
  br i1 %167, label %168, label %175

168:                                              ; preds = %160
  %169 = sext i32 %164 to i64
  %170 = shl nsw i64 %169, 2
  %171 = call i8* @_Znam(i64 %170) #11, !noalias !11
  %172 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %173 = bitcast i32** %172 to i8**
  store i8* %171, i8** %173, align 8, !alias.scope !11
  %174 = bitcast i8* %171 to i32*
  br label %180

175:                                              ; preds = %160
  %176 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1
  %177 = bitcast %union.anon* %176 to i32*
  %178 = sext i32 %164 to i64
  %179 = shl nsw i64 %178, 2
  br label %180

180:                                              ; preds = %175, %168
  %181 = phi i64 [ %170, %168 ], [ %179, %175 ]
  %182 = phi i32* [ %174, %168 ], [ %177, %175 ]
  %183 = bitcast i32* %182 to i8*
  %184 = bitcast i32* %165 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %183, i8* align 4 %184, i64 %181, i1 false) #12
  %185 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1, i32 0
  %186 = load i32*, i32** %185, align 8
  br label %187

187:                                              ; preds = %158, %180
  %188 = phi i32* [ %186, %180 ], [ null, %158 ]
  %189 = bitcast %"class.tflite::RuntimeShape"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %189) #12
  %190 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %190, label %191, label %193

191:                                              ; preds = %187
  %192 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 0, i32* %192, align 8, !alias.scope !14
  br label %220

193:                                              ; preds = %187
  %194 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %195 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %194, align 8, !noalias !14
  %196 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %195, i64 0, i32 0
  %197 = load i32, i32* %196, align 4, !noalias !14
  %198 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %195, i64 0, i32 1, i64 0
  %199 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 %197, i32* %199, align 8, !alias.scope !14
  %200 = icmp sgt i32 %197, 5
  br i1 %200, label %201, label %208

201:                                              ; preds = %193
  %202 = sext i32 %197 to i64
  %203 = shl nsw i64 %202, 2
  %204 = call i8* @_Znam(i64 %203) #11, !noalias !14
  %205 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %206 = bitcast i32** %205 to i8**
  store i8* %204, i8** %206, align 8, !alias.scope !14
  %207 = bitcast i8* %204 to i32*
  br label %213

208:                                              ; preds = %193
  %209 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1
  %210 = bitcast %union.anon* %209 to i32*
  %211 = sext i32 %197 to i64
  %212 = shl nsw i64 %211, 2
  br label %213

213:                                              ; preds = %208, %201
  %214 = phi i64 [ %203, %201 ], [ %212, %208 ]
  %215 = phi i32* [ %207, %201 ], [ %210, %208 ]
  %216 = bitcast i32* %215 to i8*
  %217 = bitcast i32* %198 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %216, i8* align 4 %217, i64 %214, i1 false) #12
  %218 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1, i32 0
  %219 = load i32*, i32** %218, align 8
  br label %220

220:                                              ; preds = %191, %213
  %221 = phi i32* [ %219, %213 ], [ null, %191 ]
  call void @_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKiS6_S8_S6_Pi(%"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %8, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, i32* %156, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %12, i32* %188, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %13, i32* %221)
  %222 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  %223 = load i32, i32* %222, align 8
  %224 = icmp sgt i32 %223, 5
  br i1 %224, label %225, label %231

225:                                              ; preds = %220
  %226 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %227 = load i32*, i32** %226, align 8
  %228 = icmp eq i32* %227, null
  br i1 %228, label %231, label %229

229:                                              ; preds = %225
  %230 = bitcast i32* %227 to i8*
  call void @_ZdaPv(i8* %230) #11
  br label %231

231:                                              ; preds = %220, %225, %229
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %189) #12
  %232 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  %233 = load i32, i32* %232, align 8
  %234 = icmp sgt i32 %233, 5
  br i1 %234, label %235, label %241

235:                                              ; preds = %231
  %236 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %237 = load i32*, i32** %236, align 8
  %238 = icmp eq i32* %237, null
  br i1 %238, label %241, label %239

239:                                              ; preds = %235
  %240 = bitcast i32* %237 to i8*
  call void @_ZdaPv(i8* %240) #11
  br label %241

241:                                              ; preds = %231, %235, %239
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %157) #12
  %242 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %243 = load i32, i32* %242, align 8
  %244 = icmp sgt i32 %243, 5
  br i1 %244, label %245, label %1567

245:                                              ; preds = %241
  %246 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %247 = load i32*, i32** %246, align 8
  %248 = icmp eq i32* %247, null
  br i1 %248, label %1567, label %249

249:                                              ; preds = %245
  %250 = bitcast i32* %247 to i8*
  call void @_ZdaPv(i8* %250) #11
  br label %1567

251:                                              ; preds = %107
  br i1 %111, label %252, label %259

252:                                              ; preds = %251
  %253 = sext i32 %110 to i64
  %254 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.51, i64 0, i64 %253
  %255 = load i32, i32* %254, align 4
  %256 = sext i32 %110 to i64
  %257 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.52, i64 0, i64 %256
  %258 = load i32, i32* %257, align 4
  br label %259

259:                                              ; preds = %251, %252
  %260 = phi i32 [ %255, %252 ], [ -2147483648, %251 ]
  %261 = phi i32 [ %258, %252 ], [ 2147483647, %251 ]
  %262 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 11
  store i32 %260, i32* %262, align 4
  %263 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 12
  store i32 %261, i32* %263, align 4
  %264 = bitcast %"class.tflite::RuntimeShape"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %264) #12
  br i1 %25, label %265, label %267

265:                                              ; preds = %259
  %266 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 0, i32* %266, align 8, !alias.scope !17
  br label %294

267:                                              ; preds = %259
  %268 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %269 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %268, align 8, !noalias !17
  %270 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 0
  %271 = load i32, i32* %270, align 4, !noalias !17
  %272 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 1, i64 0
  %273 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 %271, i32* %273, align 8, !alias.scope !17
  %274 = icmp sgt i32 %271, 5
  br i1 %274, label %275, label %282

275:                                              ; preds = %267
  %276 = sext i32 %271 to i64
  %277 = shl nsw i64 %276, 2
  %278 = call i8* @_Znam(i64 %277) #11, !noalias !17
  %279 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %280 = bitcast i32** %279 to i8**
  store i8* %278, i8** %280, align 8, !alias.scope !17
  %281 = bitcast i8* %278 to i32*
  br label %287

282:                                              ; preds = %267
  %283 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1
  %284 = bitcast %union.anon* %283 to i32*
  %285 = sext i32 %271 to i64
  %286 = shl nsw i64 %285, 2
  br label %287

287:                                              ; preds = %282, %275
  %288 = phi i64 [ %277, %275 ], [ %286, %282 ]
  %289 = phi i32* [ %281, %275 ], [ %284, %282 ]
  %290 = bitcast i32* %289 to i8*
  %291 = bitcast i32* %272 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %290, i8* align 4 %291, i64 %288, i1 false) #12
  %292 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1, i32 0
  %293 = load i32*, i32** %292, align 8
  br label %294

294:                                              ; preds = %265, %287
  %295 = phi i32 [ %271, %287 ], [ 0, %265 ]
  %296 = phi i32* [ %293, %287 ], [ null, %265 ]
  %297 = bitcast %"class.tflite::RuntimeShape"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %297) #12
  br i1 %55, label %298, label %300

298:                                              ; preds = %294
  %299 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  store i32 0, i32* %299, align 8, !alias.scope !20
  br label %327

300:                                              ; preds = %294
  %301 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %302 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %301, align 8, !noalias !20
  %303 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %302, i64 0, i32 0
  %304 = load i32, i32* %303, align 4, !noalias !20
  %305 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %302, i64 0, i32 1, i64 0
  %306 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  store i32 %304, i32* %306, align 8, !alias.scope !20
  %307 = icmp sgt i32 %304, 5
  br i1 %307, label %308, label %315

308:                                              ; preds = %300
  %309 = sext i32 %304 to i64
  %310 = shl nsw i64 %309, 2
  %311 = call i8* @_Znam(i64 %310) #11, !noalias !20
  %312 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1, i32 0
  %313 = bitcast i32** %312 to i8**
  store i8* %311, i8** %313, align 8, !alias.scope !20
  %314 = bitcast i8* %311 to i32*
  br label %320

315:                                              ; preds = %300
  %316 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1
  %317 = bitcast %union.anon* %316 to i32*
  %318 = sext i32 %304 to i64
  %319 = shl nsw i64 %318, 2
  br label %320

320:                                              ; preds = %315, %308
  %321 = phi i64 [ %310, %308 ], [ %319, %315 ]
  %322 = phi i32* [ %314, %308 ], [ %317, %315 ]
  %323 = bitcast i32* %322 to i8*
  %324 = bitcast i32* %305 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %323, i8* align 4 %324, i64 %321, i1 false) #12
  %325 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1, i32 0
  %326 = load i32*, i32** %325, align 8
  br label %327

327:                                              ; preds = %298, %320
  %328 = phi i32 [ %304, %320 ], [ 0, %298 ]
  %329 = phi i32* [ %326, %320 ], [ null, %298 ]
  %330 = bitcast %"class.tflite::RuntimeShape"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %330) #12
  %331 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %331, label %332, label %334

332:                                              ; preds = %327
  %333 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 0
  store i32 0, i32* %333, align 8, !alias.scope !23
  br label %361

334:                                              ; preds = %327
  %335 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %336 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %335, align 8, !noalias !23
  %337 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %336, i64 0, i32 0
  %338 = load i32, i32* %337, align 4, !noalias !23
  %339 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %336, i64 0, i32 1, i64 0
  %340 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 0
  store i32 %338, i32* %340, align 8, !alias.scope !23
  %341 = icmp sgt i32 %338, 5
  br i1 %341, label %342, label %349

342:                                              ; preds = %334
  %343 = sext i32 %338 to i64
  %344 = shl nsw i64 %343, 2
  %345 = call i8* @_Znam(i64 %344) #11, !noalias !23
  %346 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1, i32 0
  %347 = bitcast i32** %346 to i8**
  store i8* %345, i8** %347, align 8, !alias.scope !23
  %348 = bitcast i8* %345 to i32*
  br label %354

349:                                              ; preds = %334
  %350 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1
  %351 = bitcast %union.anon* %350 to i32*
  %352 = sext i32 %338 to i64
  %353 = shl nsw i64 %352, 2
  br label %354

354:                                              ; preds = %349, %342
  %355 = phi i64 [ %344, %342 ], [ %353, %349 ]
  %356 = phi i32* [ %348, %342 ], [ %351, %349 ]
  %357 = bitcast i32* %356 to i8*
  %358 = bitcast i32* %339 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %357, i8* align 4 %358, i64 %355, i1 false) #12
  %359 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1, i32 0
  %360 = load i32*, i32** %359, align 8
  br label %361

361:                                              ; preds = %332, %354
  %362 = phi i32 [ %338, %354 ], [ 0, %332 ]
  %363 = phi i32* [ %360, %354 ], [ null, %332 ]
  %364 = icmp sgt i32 %295, 5
  %365 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1
  br i1 %364, label %366, label %369

366:                                              ; preds = %361
  %367 = getelementptr inbounds %union.anon, %union.anon* %365, i64 0, i32 0
  %368 = load i32*, i32** %367, align 8
  br label %372

369:                                              ; preds = %361
  %370 = bitcast %union.anon* %365 to i32*
  %371 = icmp sgt i32 %295, 0
  br i1 %371, label %372, label %472

372:                                              ; preds = %369, %366
  %373 = phi i32* [ %368, %366 ], [ %370, %369 ]
  %374 = zext i32 %295 to i64
  %375 = icmp ult i32 %295, 8
  br i1 %375, label %461, label %376

376:                                              ; preds = %372
  %377 = and i64 %374, 4294967288
  %378 = add nsw i64 %377, -8
  %379 = lshr exact i64 %378, 3
  %380 = add nuw nsw i64 %379, 1
  %381 = and i64 %380, 3
  %382 = icmp ult i64 %378, 24
  br i1 %382, label %428, label %383

383:                                              ; preds = %376
  %384 = sub nsw i64 %380, %381
  br label %385

385:                                              ; preds = %385, %383
  %386 = phi i64 [ 0, %383 ], [ %425, %385 ]
  %387 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %383 ], [ %423, %385 ]
  %388 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %383 ], [ %424, %385 ]
  %389 = phi i64 [ %384, %383 ], [ %426, %385 ]
  %390 = getelementptr inbounds i32, i32* %373, i64 %386
  %391 = bitcast i32* %390 to <4 x i32>*
  %392 = load <4 x i32>, <4 x i32>* %391, align 4
  %393 = getelementptr inbounds i32, i32* %390, i64 4
  %394 = bitcast i32* %393 to <4 x i32>*
  %395 = load <4 x i32>, <4 x i32>* %394, align 4
  %396 = mul nsw <4 x i32> %392, %387
  %397 = mul nsw <4 x i32> %395, %388
  %398 = or i64 %386, 8
  %399 = getelementptr inbounds i32, i32* %373, i64 %398
  %400 = bitcast i32* %399 to <4 x i32>*
  %401 = load <4 x i32>, <4 x i32>* %400, align 4
  %402 = getelementptr inbounds i32, i32* %399, i64 4
  %403 = bitcast i32* %402 to <4 x i32>*
  %404 = load <4 x i32>, <4 x i32>* %403, align 4
  %405 = mul nsw <4 x i32> %401, %396
  %406 = mul nsw <4 x i32> %404, %397
  %407 = or i64 %386, 16
  %408 = getelementptr inbounds i32, i32* %373, i64 %407
  %409 = bitcast i32* %408 to <4 x i32>*
  %410 = load <4 x i32>, <4 x i32>* %409, align 4
  %411 = getelementptr inbounds i32, i32* %408, i64 4
  %412 = bitcast i32* %411 to <4 x i32>*
  %413 = load <4 x i32>, <4 x i32>* %412, align 4
  %414 = mul nsw <4 x i32> %410, %405
  %415 = mul nsw <4 x i32> %413, %406
  %416 = or i64 %386, 24
  %417 = getelementptr inbounds i32, i32* %373, i64 %416
  %418 = bitcast i32* %417 to <4 x i32>*
  %419 = load <4 x i32>, <4 x i32>* %418, align 4
  %420 = getelementptr inbounds i32, i32* %417, i64 4
  %421 = bitcast i32* %420 to <4 x i32>*
  %422 = load <4 x i32>, <4 x i32>* %421, align 4
  %423 = mul nsw <4 x i32> %419, %414
  %424 = mul nsw <4 x i32> %422, %415
  %425 = add i64 %386, 32
  %426 = add i64 %389, -4
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %428, label %385, !llvm.loop !26

428:                                              ; preds = %385, %376
  %429 = phi <4 x i32> [ undef, %376 ], [ %423, %385 ]
  %430 = phi <4 x i32> [ undef, %376 ], [ %424, %385 ]
  %431 = phi i64 [ 0, %376 ], [ %425, %385 ]
  %432 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %376 ], [ %423, %385 ]
  %433 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %376 ], [ %424, %385 ]
  %434 = icmp eq i64 %381, 0
  br i1 %434, label %451, label %435

435:                                              ; preds = %428, %435
  %436 = phi i64 [ %448, %435 ], [ %431, %428 ]
  %437 = phi <4 x i32> [ %446, %435 ], [ %432, %428 ]
  %438 = phi <4 x i32> [ %447, %435 ], [ %433, %428 ]
  %439 = phi i64 [ %449, %435 ], [ %381, %428 ]
  %440 = getelementptr inbounds i32, i32* %373, i64 %436
  %441 = bitcast i32* %440 to <4 x i32>*
  %442 = load <4 x i32>, <4 x i32>* %441, align 4
  %443 = getelementptr inbounds i32, i32* %440, i64 4
  %444 = bitcast i32* %443 to <4 x i32>*
  %445 = load <4 x i32>, <4 x i32>* %444, align 4
  %446 = mul nsw <4 x i32> %442, %437
  %447 = mul nsw <4 x i32> %445, %438
  %448 = add i64 %436, 8
  %449 = add i64 %439, -1
  %450 = icmp eq i64 %449, 0
  br i1 %450, label %451, label %435, !llvm.loop !28

451:                                              ; preds = %435, %428
  %452 = phi <4 x i32> [ %429, %428 ], [ %446, %435 ]
  %453 = phi <4 x i32> [ %430, %428 ], [ %447, %435 ]
  %454 = mul <4 x i32> %453, %452
  %455 = shufflevector <4 x i32> %454, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %456 = mul <4 x i32> %454, %455
  %457 = shufflevector <4 x i32> %456, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %458 = mul <4 x i32> %456, %457
  %459 = extractelement <4 x i32> %458, i32 0
  %460 = icmp eq i64 %377, %374
  br i1 %460, label %472, label %461

461:                                              ; preds = %451, %372
  %462 = phi i64 [ 0, %372 ], [ %377, %451 ]
  %463 = phi i32 [ 1, %372 ], [ %459, %451 ]
  br label %464

464:                                              ; preds = %461, %464
  %465 = phi i64 [ %470, %464 ], [ %462, %461 ]
  %466 = phi i32 [ %469, %464 ], [ %463, %461 ]
  %467 = getelementptr inbounds i32, i32* %373, i64 %465
  %468 = load i32, i32* %467, align 4
  %469 = mul nsw i32 %468, %466
  %470 = add nuw nsw i64 %465, 1
  %471 = icmp eq i64 %470, %374
  br i1 %471, label %472, label %464, !llvm.loop !30

472:                                              ; preds = %464, %451, %369
  %473 = phi i32 [ 1, %369 ], [ %459, %451 ], [ %469, %464 ]
  %474 = icmp sgt i32 %328, 5
  %475 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1
  br i1 %474, label %476, label %479

476:                                              ; preds = %472
  %477 = getelementptr inbounds %union.anon, %union.anon* %475, i64 0, i32 0
  %478 = load i32*, i32** %477, align 8
  br label %482

479:                                              ; preds = %472
  %480 = bitcast %union.anon* %475 to i32*
  %481 = icmp sgt i32 %328, 0
  br i1 %481, label %482, label %582

482:                                              ; preds = %479, %476
  %483 = phi i32* [ %478, %476 ], [ %480, %479 ]
  %484 = zext i32 %328 to i64
  %485 = icmp ult i32 %328, 8
  br i1 %485, label %571, label %486

486:                                              ; preds = %482
  %487 = and i64 %484, 4294967288
  %488 = add nsw i64 %487, -8
  %489 = lshr exact i64 %488, 3
  %490 = add nuw nsw i64 %489, 1
  %491 = and i64 %490, 3
  %492 = icmp ult i64 %488, 24
  br i1 %492, label %538, label %493

493:                                              ; preds = %486
  %494 = sub nsw i64 %490, %491
  br label %495

495:                                              ; preds = %495, %493
  %496 = phi i64 [ 0, %493 ], [ %535, %495 ]
  %497 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %493 ], [ %533, %495 ]
  %498 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %493 ], [ %534, %495 ]
  %499 = phi i64 [ %494, %493 ], [ %536, %495 ]
  %500 = getelementptr inbounds i32, i32* %483, i64 %496
  %501 = bitcast i32* %500 to <4 x i32>*
  %502 = load <4 x i32>, <4 x i32>* %501, align 4
  %503 = getelementptr inbounds i32, i32* %500, i64 4
  %504 = bitcast i32* %503 to <4 x i32>*
  %505 = load <4 x i32>, <4 x i32>* %504, align 4
  %506 = mul nsw <4 x i32> %502, %497
  %507 = mul nsw <4 x i32> %505, %498
  %508 = or i64 %496, 8
  %509 = getelementptr inbounds i32, i32* %483, i64 %508
  %510 = bitcast i32* %509 to <4 x i32>*
  %511 = load <4 x i32>, <4 x i32>* %510, align 4
  %512 = getelementptr inbounds i32, i32* %509, i64 4
  %513 = bitcast i32* %512 to <4 x i32>*
  %514 = load <4 x i32>, <4 x i32>* %513, align 4
  %515 = mul nsw <4 x i32> %511, %506
  %516 = mul nsw <4 x i32> %514, %507
  %517 = or i64 %496, 16
  %518 = getelementptr inbounds i32, i32* %483, i64 %517
  %519 = bitcast i32* %518 to <4 x i32>*
  %520 = load <4 x i32>, <4 x i32>* %519, align 4
  %521 = getelementptr inbounds i32, i32* %518, i64 4
  %522 = bitcast i32* %521 to <4 x i32>*
  %523 = load <4 x i32>, <4 x i32>* %522, align 4
  %524 = mul nsw <4 x i32> %520, %515
  %525 = mul nsw <4 x i32> %523, %516
  %526 = or i64 %496, 24
  %527 = getelementptr inbounds i32, i32* %483, i64 %526
  %528 = bitcast i32* %527 to <4 x i32>*
  %529 = load <4 x i32>, <4 x i32>* %528, align 4
  %530 = getelementptr inbounds i32, i32* %527, i64 4
  %531 = bitcast i32* %530 to <4 x i32>*
  %532 = load <4 x i32>, <4 x i32>* %531, align 4
  %533 = mul nsw <4 x i32> %529, %524
  %534 = mul nsw <4 x i32> %532, %525
  %535 = add i64 %496, 32
  %536 = add i64 %499, -4
  %537 = icmp eq i64 %536, 0
  br i1 %537, label %538, label %495, !llvm.loop !32

538:                                              ; preds = %495, %486
  %539 = phi <4 x i32> [ undef, %486 ], [ %533, %495 ]
  %540 = phi <4 x i32> [ undef, %486 ], [ %534, %495 ]
  %541 = phi i64 [ 0, %486 ], [ %535, %495 ]
  %542 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %486 ], [ %533, %495 ]
  %543 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %486 ], [ %534, %495 ]
  %544 = icmp eq i64 %491, 0
  br i1 %544, label %561, label %545

545:                                              ; preds = %538, %545
  %546 = phi i64 [ %558, %545 ], [ %541, %538 ]
  %547 = phi <4 x i32> [ %556, %545 ], [ %542, %538 ]
  %548 = phi <4 x i32> [ %557, %545 ], [ %543, %538 ]
  %549 = phi i64 [ %559, %545 ], [ %491, %538 ]
  %550 = getelementptr inbounds i32, i32* %483, i64 %546
  %551 = bitcast i32* %550 to <4 x i32>*
  %552 = load <4 x i32>, <4 x i32>* %551, align 4
  %553 = getelementptr inbounds i32, i32* %550, i64 4
  %554 = bitcast i32* %553 to <4 x i32>*
  %555 = load <4 x i32>, <4 x i32>* %554, align 4
  %556 = mul nsw <4 x i32> %552, %547
  %557 = mul nsw <4 x i32> %555, %548
  %558 = add i64 %546, 8
  %559 = add i64 %549, -1
  %560 = icmp eq i64 %559, 0
  br i1 %560, label %561, label %545, !llvm.loop !33

561:                                              ; preds = %545, %538
  %562 = phi <4 x i32> [ %539, %538 ], [ %556, %545 ]
  %563 = phi <4 x i32> [ %540, %538 ], [ %557, %545 ]
  %564 = mul <4 x i32> %563, %562
  %565 = shufflevector <4 x i32> %564, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %566 = mul <4 x i32> %564, %565
  %567 = shufflevector <4 x i32> %566, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %568 = mul <4 x i32> %566, %567
  %569 = extractelement <4 x i32> %568, i32 0
  %570 = icmp eq i64 %487, %484
  br i1 %570, label %582, label %571

571:                                              ; preds = %561, %482
  %572 = phi i64 [ 0, %482 ], [ %487, %561 ]
  %573 = phi i32 [ 1, %482 ], [ %569, %561 ]
  br label %574

574:                                              ; preds = %571, %574
  %575 = phi i64 [ %580, %574 ], [ %572, %571 ]
  %576 = phi i32 [ %579, %574 ], [ %573, %571 ]
  %577 = getelementptr inbounds i32, i32* %483, i64 %575
  %578 = load i32, i32* %577, align 4
  %579 = mul nsw i32 %578, %576
  %580 = add nuw nsw i64 %575, 1
  %581 = icmp eq i64 %580, %484
  br i1 %581, label %582, label %574, !llvm.loop !34

582:                                              ; preds = %574, %561, %479
  %583 = phi i32 [ 1, %479 ], [ %569, %561 ], [ %579, %574 ]
  %584 = icmp sgt i32 %362, 5
  %585 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1
  br i1 %584, label %586, label %589

586:                                              ; preds = %582
  %587 = getelementptr inbounds %union.anon, %union.anon* %585, i64 0, i32 0
  %588 = load i32*, i32** %587, align 8
  br label %592

589:                                              ; preds = %582
  %590 = bitcast %union.anon* %585 to i32*
  %591 = icmp sgt i32 %362, 0
  br i1 %591, label %592, label %692

592:                                              ; preds = %589, %586
  %593 = phi i32* [ %588, %586 ], [ %590, %589 ]
  %594 = zext i32 %362 to i64
  %595 = icmp ult i32 %362, 8
  br i1 %595, label %681, label %596

596:                                              ; preds = %592
  %597 = and i64 %594, 4294967288
  %598 = add nsw i64 %597, -8
  %599 = lshr exact i64 %598, 3
  %600 = add nuw nsw i64 %599, 1
  %601 = and i64 %600, 3
  %602 = icmp ult i64 %598, 24
  br i1 %602, label %648, label %603

603:                                              ; preds = %596
  %604 = sub nsw i64 %600, %601
  br label %605

605:                                              ; preds = %605, %603
  %606 = phi i64 [ 0, %603 ], [ %645, %605 ]
  %607 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %603 ], [ %643, %605 ]
  %608 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %603 ], [ %644, %605 ]
  %609 = phi i64 [ %604, %603 ], [ %646, %605 ]
  %610 = getelementptr inbounds i32, i32* %593, i64 %606
  %611 = bitcast i32* %610 to <4 x i32>*
  %612 = load <4 x i32>, <4 x i32>* %611, align 4
  %613 = getelementptr inbounds i32, i32* %610, i64 4
  %614 = bitcast i32* %613 to <4 x i32>*
  %615 = load <4 x i32>, <4 x i32>* %614, align 4
  %616 = mul nsw <4 x i32> %612, %607
  %617 = mul nsw <4 x i32> %615, %608
  %618 = or i64 %606, 8
  %619 = getelementptr inbounds i32, i32* %593, i64 %618
  %620 = bitcast i32* %619 to <4 x i32>*
  %621 = load <4 x i32>, <4 x i32>* %620, align 4
  %622 = getelementptr inbounds i32, i32* %619, i64 4
  %623 = bitcast i32* %622 to <4 x i32>*
  %624 = load <4 x i32>, <4 x i32>* %623, align 4
  %625 = mul nsw <4 x i32> %621, %616
  %626 = mul nsw <4 x i32> %624, %617
  %627 = or i64 %606, 16
  %628 = getelementptr inbounds i32, i32* %593, i64 %627
  %629 = bitcast i32* %628 to <4 x i32>*
  %630 = load <4 x i32>, <4 x i32>* %629, align 4
  %631 = getelementptr inbounds i32, i32* %628, i64 4
  %632 = bitcast i32* %631 to <4 x i32>*
  %633 = load <4 x i32>, <4 x i32>* %632, align 4
  %634 = mul nsw <4 x i32> %630, %625
  %635 = mul nsw <4 x i32> %633, %626
  %636 = or i64 %606, 24
  %637 = getelementptr inbounds i32, i32* %593, i64 %636
  %638 = bitcast i32* %637 to <4 x i32>*
  %639 = load <4 x i32>, <4 x i32>* %638, align 4
  %640 = getelementptr inbounds i32, i32* %637, i64 4
  %641 = bitcast i32* %640 to <4 x i32>*
  %642 = load <4 x i32>, <4 x i32>* %641, align 4
  %643 = mul nsw <4 x i32> %639, %634
  %644 = mul nsw <4 x i32> %642, %635
  %645 = add i64 %606, 32
  %646 = add i64 %609, -4
  %647 = icmp eq i64 %646, 0
  br i1 %647, label %648, label %605, !llvm.loop !35

648:                                              ; preds = %605, %596
  %649 = phi <4 x i32> [ undef, %596 ], [ %643, %605 ]
  %650 = phi <4 x i32> [ undef, %596 ], [ %644, %605 ]
  %651 = phi i64 [ 0, %596 ], [ %645, %605 ]
  %652 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %596 ], [ %643, %605 ]
  %653 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %596 ], [ %644, %605 ]
  %654 = icmp eq i64 %601, 0
  br i1 %654, label %671, label %655

655:                                              ; preds = %648, %655
  %656 = phi i64 [ %668, %655 ], [ %651, %648 ]
  %657 = phi <4 x i32> [ %666, %655 ], [ %652, %648 ]
  %658 = phi <4 x i32> [ %667, %655 ], [ %653, %648 ]
  %659 = phi i64 [ %669, %655 ], [ %601, %648 ]
  %660 = getelementptr inbounds i32, i32* %593, i64 %656
  %661 = bitcast i32* %660 to <4 x i32>*
  %662 = load <4 x i32>, <4 x i32>* %661, align 4
  %663 = getelementptr inbounds i32, i32* %660, i64 4
  %664 = bitcast i32* %663 to <4 x i32>*
  %665 = load <4 x i32>, <4 x i32>* %664, align 4
  %666 = mul nsw <4 x i32> %662, %657
  %667 = mul nsw <4 x i32> %665, %658
  %668 = add i64 %656, 8
  %669 = add i64 %659, -1
  %670 = icmp eq i64 %669, 0
  br i1 %670, label %671, label %655, !llvm.loop !36

671:                                              ; preds = %655, %648
  %672 = phi <4 x i32> [ %649, %648 ], [ %666, %655 ]
  %673 = phi <4 x i32> [ %650, %648 ], [ %667, %655 ]
  %674 = mul <4 x i32> %673, %672
  %675 = shufflevector <4 x i32> %674, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %676 = mul <4 x i32> %674, %675
  %677 = shufflevector <4 x i32> %676, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %678 = mul <4 x i32> %676, %677
  %679 = extractelement <4 x i32> %678, i32 0
  %680 = icmp eq i64 %597, %594
  br i1 %680, label %692, label %681

681:                                              ; preds = %671, %592
  %682 = phi i64 [ 0, %592 ], [ %597, %671 ]
  %683 = phi i32 [ 1, %592 ], [ %679, %671 ]
  br label %684

684:                                              ; preds = %681, %684
  %685 = phi i64 [ %690, %684 ], [ %682, %681 ]
  %686 = phi i32 [ %689, %684 ], [ %683, %681 ]
  %687 = getelementptr inbounds i32, i32* %593, i64 %685
  %688 = load i32, i32* %687, align 4
  %689 = mul nsw i32 %688, %686
  %690 = add nuw nsw i64 %685, 1
  %691 = icmp eq i64 %690, %594
  br i1 %691, label %692, label %684, !llvm.loop !37

692:                                              ; preds = %684, %671, %589
  %693 = phi i32 [ 1, %589 ], [ %679, %671 ], [ %689, %684 ]
  %694 = icmp eq i32 %473, %583
  br i1 %694, label %696, label %695

695:                                              ; preds = %692
  call void @abort() #13
  unreachable

696:                                              ; preds = %692
  %697 = icmp eq i32 %473, %693
  br i1 %697, label %698, label %781

698:                                              ; preds = %696
  %699 = icmp sgt i32 %473, 0
  br i1 %699, label %700, label %802

700:                                              ; preds = %698
  %701 = zext i32 %473 to i64
  %702 = load i32, i32* %296, align 4
  %703 = load i32, i32* %329, align 4
  %704 = add nsw i32 %703, %702
  %705 = sitofp i32 %704 to float
  %706 = sitofp i32 %260 to float
  %707 = sitofp i32 %261 to float
  %708 = fcmp olt float %705, %706
  %709 = select i1 %708, float %706, float %705
  %710 = fcmp ogt float %709, %707
  %711 = select i1 %710, float %707, float %709
  %712 = fptosi float %711 to i32
  store i32 %712, i32* %363, align 4
  %713 = icmp eq i32 %473, 1
  br i1 %713, label %802, label %714

714:                                              ; preds = %700
  %715 = add nsw i64 %701, -1
  %716 = icmp ult i64 %715, 4
  br i1 %716, label %717, label %719

717:                                              ; preds = %779, %719, %714
  %718 = phi i64 [ 1, %719 ], [ 1, %714 ], [ %750, %779 ]
  br label %782

719:                                              ; preds = %714
  %720 = getelementptr i32, i32* %363, i64 1
  %721 = bitcast i32* %720 to i8*
  %722 = getelementptr i32, i32* %363, i64 %701
  %723 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 11
  %724 = bitcast i32* %723 to i8*
  %725 = getelementptr inbounds i8, i8* %724, i64 1
  %726 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 12
  %727 = bitcast i32* %726 to i8*
  %728 = getelementptr inbounds i8, i8* %727, i64 1
  %729 = getelementptr i32, i32* %296, i64 1
  %730 = getelementptr i32, i32* %296, i64 %701
  %731 = getelementptr i32, i32* %329, i64 1
  %732 = getelementptr i32, i32* %329, i64 %701
  %733 = icmp ugt i8* %725, %721
  %734 = icmp ult i32* %262, %722
  %735 = and i1 %733, %734
  %736 = icmp ugt i8* %728, %721
  %737 = icmp ult i32* %263, %722
  %738 = and i1 %736, %737
  %739 = or i1 %735, %738
  %740 = icmp ult i32* %720, %730
  %741 = icmp ult i32* %729, %722
  %742 = and i1 %740, %741
  %743 = or i1 %739, %742
  %744 = icmp ult i32* %720, %732
  %745 = icmp ult i32* %731, %722
  %746 = and i1 %744, %745
  %747 = or i1 %743, %746
  br i1 %747, label %717, label %748

748:                                              ; preds = %719
  %749 = and i64 %715, -4
  %750 = or i64 %749, 1
  %751 = load i32, i32* %262, align 4, !alias.scope !38
  %752 = insertelement <4 x i32> undef, i32 %751, i32 0
  %753 = shufflevector <4 x i32> %752, <4 x i32> undef, <4 x i32> zeroinitializer
  %754 = load i32, i32* %263, align 4, !alias.scope !41
  %755 = insertelement <4 x i32> undef, i32 %754, i32 0
  %756 = shufflevector <4 x i32> %755, <4 x i32> undef, <4 x i32> zeroinitializer
  %757 = sitofp <4 x i32> %753 to <4 x float>
  %758 = sitofp <4 x i32> %756 to <4 x float>
  br label %759

759:                                              ; preds = %759, %748
  %760 = phi i64 [ 0, %748 ], [ %777, %759 ]
  %761 = or i64 %760, 1
  %762 = getelementptr inbounds i32, i32* %296, i64 %761
  %763 = bitcast i32* %762 to <4 x i32>*
  %764 = load <4 x i32>, <4 x i32>* %763, align 4, !alias.scope !43
  %765 = getelementptr inbounds i32, i32* %329, i64 %761
  %766 = bitcast i32* %765 to <4 x i32>*
  %767 = load <4 x i32>, <4 x i32>* %766, align 4, !alias.scope !45
  %768 = add nsw <4 x i32> %767, %764
  %769 = sitofp <4 x i32> %768 to <4 x float>
  %770 = fcmp olt <4 x float> %769, %757
  %771 = select <4 x i1> %770, <4 x float> %757, <4 x float> %769
  %772 = fcmp ogt <4 x float> %771, %758
  %773 = select <4 x i1> %772, <4 x float> %758, <4 x float> %771
  %774 = fptosi <4 x float> %773 to <4 x i32>
  %775 = getelementptr inbounds i32, i32* %363, i64 %761
  %776 = bitcast i32* %775 to <4 x i32>*
  store <4 x i32> %774, <4 x i32>* %776, align 4, !alias.scope !47, !noalias !49
  %777 = add i64 %760, 4
  %778 = icmp eq i64 %777, %749
  br i1 %778, label %779, label %759, !llvm.loop !50

779:                                              ; preds = %759
  %780 = icmp eq i64 %715, %749
  br i1 %780, label %802, label %717

781:                                              ; preds = %696
  call void @abort() #13
  unreachable

782:                                              ; preds = %717, %782
  %783 = phi i64 [ %800, %782 ], [ %718, %717 ]
  %784 = load i32, i32* %262, align 4
  %785 = load i32, i32* %263, align 4
  %786 = getelementptr inbounds i32, i32* %296, i64 %783
  %787 = load i32, i32* %786, align 4
  %788 = getelementptr inbounds i32, i32* %329, i64 %783
  %789 = load i32, i32* %788, align 4
  %790 = add nsw i32 %789, %787
  %791 = sitofp i32 %790 to float
  %792 = sitofp i32 %784 to float
  %793 = sitofp i32 %785 to float
  %794 = fcmp olt float %791, %792
  %795 = select i1 %794, float %792, float %791
  %796 = fcmp ogt float %795, %793
  %797 = select i1 %796, float %793, float %795
  %798 = fptosi float %797 to i32
  %799 = getelementptr inbounds i32, i32* %363, i64 %783
  store i32 %798, i32* %799, align 4
  %800 = add nuw nsw i64 %783, 1
  %801 = icmp eq i64 %800, %701
  br i1 %801, label %802, label %782, !llvm.loop !51

802:                                              ; preds = %782, %700, %779, %698
  br i1 %584, label %803, label %809

803:                                              ; preds = %802
  %804 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1, i32 0
  %805 = load i32*, i32** %804, align 8
  %806 = icmp eq i32* %805, null
  br i1 %806, label %809, label %807

807:                                              ; preds = %803
  %808 = bitcast i32* %805 to i8*
  call void @_ZdaPv(i8* %808) #11
  br label %809

809:                                              ; preds = %802, %803, %807
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %330) #12
  br i1 %474, label %810, label %816

810:                                              ; preds = %809
  %811 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1, i32 0
  %812 = load i32*, i32** %811, align 8
  %813 = icmp eq i32* %812, null
  br i1 %813, label %816, label %814

814:                                              ; preds = %810
  %815 = bitcast i32* %812 to i8*
  call void @_ZdaPv(i8* %815) #11
  br label %816

816:                                              ; preds = %809, %810, %814
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %297) #12
  br i1 %364, label %817, label %1567

817:                                              ; preds = %816
  %818 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %819 = load i32*, i32** %818, align 8
  %820 = icmp eq i32* %819, null
  br i1 %820, label %1567, label %821

821:                                              ; preds = %817
  %822 = bitcast i32* %819 to i8*
  call void @_ZdaPv(i8* %822) #11
  br label %1567

823:                                              ; preds = %104
  %824 = getelementptr inbounds %struct.TfLiteAddParams, %struct.TfLiteAddParams* %2, i64 0, i32 0
  %825 = load i32, i32* %824, align 4
  %826 = add i32 %825, -1
  %827 = icmp ult i32 %826, 3
  br i1 %84, label %828, label %970

828:                                              ; preds = %823
  br i1 %827, label %829, label %836

829:                                              ; preds = %828
  %830 = sext i32 %826 to i64
  %831 = getelementptr inbounds [3 x float], [3 x float]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.55, i64 0, i64 %830
  %832 = load float, float* %831, align 4
  %833 = sext i32 %826 to i64
  %834 = getelementptr inbounds [3 x float], [3 x float]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.56, i64 0, i64 %833
  %835 = load float, float* %834, align 4
  br label %836

836:                                              ; preds = %828, %829
  %837 = phi float [ %832, %829 ], [ 0xC7EFFFFFE0000000, %828 ]
  %838 = phi float [ %835, %829 ], [ 0x47EFFFFFE0000000, %828 ]
  %839 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 13
  store float %837, float* %839, align 4
  %840 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 14
  store float %838, float* %840, align 4
  %841 = bitcast %"class.tflite::RuntimeShape"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %841) #12
  br i1 %25, label %842, label %844

842:                                              ; preds = %836
  %843 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 0
  store i32 0, i32* %843, align 8, !alias.scope !52
  br label %872

844:                                              ; preds = %836
  %845 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %846 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %845, align 8, !noalias !52
  %847 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %846, i64 0, i32 0
  %848 = load i32, i32* %847, align 4, !noalias !52
  %849 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %846, i64 0, i32 1, i64 0
  %850 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 0
  store i32 %848, i32* %850, align 8, !alias.scope !52
  %851 = icmp sgt i32 %848, 5
  br i1 %851, label %852, label %859

852:                                              ; preds = %844
  %853 = sext i32 %848 to i64
  %854 = shl nsw i64 %853, 2
  %855 = call i8* @_Znam(i64 %854) #11, !noalias !52
  %856 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1, i32 0
  %857 = bitcast i32** %856 to i8**
  store i8* %855, i8** %857, align 8, !alias.scope !52
  %858 = bitcast i8* %855 to i32*
  br label %864

859:                                              ; preds = %844
  %860 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1
  %861 = bitcast %union.anon* %860 to i32*
  %862 = sext i32 %848 to i64
  %863 = shl nsw i64 %862, 2
  br label %864

864:                                              ; preds = %859, %852
  %865 = phi i64 [ %854, %852 ], [ %863, %859 ]
  %866 = phi i32* [ %858, %852 ], [ %861, %859 ]
  %867 = bitcast i32* %866 to i8*
  %868 = bitcast i32* %849 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %867, i8* align 4 %868, i64 %865, i1 false) #12
  %869 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %870 = bitcast %union.TfLitePtrUnion* %869 to float**
  %871 = load float*, float** %870, align 8
  br label %872

872:                                              ; preds = %842, %864
  %873 = phi float* [ %871, %864 ], [ null, %842 ]
  %874 = bitcast %"class.tflite::RuntimeShape"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %874) #12
  br i1 %55, label %875, label %877

875:                                              ; preds = %872
  %876 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 0
  store i32 0, i32* %876, align 8, !alias.scope !55
  br label %905

877:                                              ; preds = %872
  %878 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %879 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %878, align 8, !noalias !55
  %880 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %879, i64 0, i32 0
  %881 = load i32, i32* %880, align 4, !noalias !55
  %882 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %879, i64 0, i32 1, i64 0
  %883 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 0
  store i32 %881, i32* %883, align 8, !alias.scope !55
  %884 = icmp sgt i32 %881, 5
  br i1 %884, label %885, label %892

885:                                              ; preds = %877
  %886 = sext i32 %881 to i64
  %887 = shl nsw i64 %886, 2
  %888 = call i8* @_Znam(i64 %887) #11, !noalias !55
  %889 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1, i32 0
  %890 = bitcast i32** %889 to i8**
  store i8* %888, i8** %890, align 8, !alias.scope !55
  %891 = bitcast i8* %888 to i32*
  br label %897

892:                                              ; preds = %877
  %893 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1
  %894 = bitcast %union.anon* %893 to i32*
  %895 = sext i32 %881 to i64
  %896 = shl nsw i64 %895, 2
  br label %897

897:                                              ; preds = %892, %885
  %898 = phi i64 [ %887, %885 ], [ %896, %892 ]
  %899 = phi i32* [ %891, %885 ], [ %894, %892 ]
  %900 = bitcast i32* %899 to i8*
  %901 = bitcast i32* %882 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %900, i8* align 4 %901, i64 %898, i1 false) #12
  %902 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %903 = bitcast %union.TfLitePtrUnion* %902 to float**
  %904 = load float*, float** %903, align 8
  br label %905

905:                                              ; preds = %875, %897
  %906 = phi float* [ %904, %897 ], [ null, %875 ]
  %907 = bitcast %"class.tflite::RuntimeShape"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %907) #12
  %908 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %908, label %909, label %911

909:                                              ; preds = %905
  %910 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 0
  store i32 0, i32* %910, align 8, !alias.scope !58
  br label %939

911:                                              ; preds = %905
  %912 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %913 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %912, align 8, !noalias !58
  %914 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %913, i64 0, i32 0
  %915 = load i32, i32* %914, align 4, !noalias !58
  %916 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %913, i64 0, i32 1, i64 0
  %917 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 0
  store i32 %915, i32* %917, align 8, !alias.scope !58
  %918 = icmp sgt i32 %915, 5
  br i1 %918, label %919, label %926

919:                                              ; preds = %911
  %920 = sext i32 %915 to i64
  %921 = shl nsw i64 %920, 2
  %922 = call i8* @_Znam(i64 %921) #11, !noalias !58
  %923 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 1, i32 0
  %924 = bitcast i32** %923 to i8**
  store i8* %922, i8** %924, align 8, !alias.scope !58
  %925 = bitcast i8* %922 to i32*
  br label %931

926:                                              ; preds = %911
  %927 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 1
  %928 = bitcast %union.anon* %927 to i32*
  %929 = sext i32 %915 to i64
  %930 = shl nsw i64 %929, 2
  br label %931

931:                                              ; preds = %926, %919
  %932 = phi i64 [ %921, %919 ], [ %930, %926 ]
  %933 = phi i32* [ %925, %919 ], [ %928, %926 ]
  %934 = bitcast i32* %933 to i8*
  %935 = bitcast i32* %916 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %934, i8* align 4 %935, i64 %932, i1 false) #12
  %936 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %937 = bitcast %union.TfLitePtrUnion* %936 to float**
  %938 = load float*, float** %937, align 8
  br label %939

939:                                              ; preds = %909, %931
  %940 = phi float* [ %938, %931 ], [ null, %909 ]
  call void @_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf(%"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %8, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %17, float* %873, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %18, float* %906, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %19, float* %940)
  %941 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 0
  %942 = load i32, i32* %941, align 8
  %943 = icmp sgt i32 %942, 5
  br i1 %943, label %944, label %950

944:                                              ; preds = %939
  %945 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 1, i32 0
  %946 = load i32*, i32** %945, align 8
  %947 = icmp eq i32* %946, null
  br i1 %947, label %950, label %948

948:                                              ; preds = %944
  %949 = bitcast i32* %946 to i8*
  call void @_ZdaPv(i8* %949) #11
  br label %950

950:                                              ; preds = %939, %944, %948
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %907) #12
  %951 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 0
  %952 = load i32, i32* %951, align 8
  %953 = icmp sgt i32 %952, 5
  br i1 %953, label %954, label %960

954:                                              ; preds = %950
  %955 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1, i32 0
  %956 = load i32*, i32** %955, align 8
  %957 = icmp eq i32* %956, null
  br i1 %957, label %960, label %958

958:                                              ; preds = %954
  %959 = bitcast i32* %956 to i8*
  call void @_ZdaPv(i8* %959) #11
  br label %960

960:                                              ; preds = %950, %954, %958
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %874) #12
  %961 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 0
  %962 = load i32, i32* %961, align 8
  %963 = icmp sgt i32 %962, 5
  br i1 %963, label %964, label %1567

964:                                              ; preds = %960
  %965 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1, i32 0
  %966 = load i32*, i32** %965, align 8
  %967 = icmp eq i32* %966, null
  br i1 %967, label %1567, label %968

968:                                              ; preds = %964
  %969 = bitcast i32* %966 to i8*
  call void @_ZdaPv(i8* %969) #11
  br label %1567

970:                                              ; preds = %823
  br i1 %827, label %971, label %978

971:                                              ; preds = %970
  %972 = sext i32 %826 to i64
  %973 = getelementptr inbounds [3 x float], [3 x float]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.55, i64 0, i64 %972
  %974 = load float, float* %973, align 4
  %975 = sext i32 %826 to i64
  %976 = getelementptr inbounds [3 x float], [3 x float]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.56, i64 0, i64 %975
  %977 = load float, float* %976, align 4
  br label %978

978:                                              ; preds = %970, %971
  %979 = phi float [ %974, %971 ], [ 0xC7EFFFFFE0000000, %970 ]
  %980 = phi float [ %977, %971 ], [ 0x47EFFFFFE0000000, %970 ]
  %981 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 13
  store float %979, float* %981, align 4
  %982 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 14
  store float %980, float* %982, align 4
  %983 = bitcast %"class.tflite::RuntimeShape"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %983) #12
  br i1 %25, label %984, label %986

984:                                              ; preds = %978
  %985 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 0
  store i32 0, i32* %985, align 8, !alias.scope !61
  br label %1014

986:                                              ; preds = %978
  %987 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %988 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %987, align 8, !noalias !61
  %989 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %988, i64 0, i32 0
  %990 = load i32, i32* %989, align 4, !noalias !61
  %991 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %988, i64 0, i32 1, i64 0
  %992 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 0
  store i32 %990, i32* %992, align 8, !alias.scope !61
  %993 = icmp sgt i32 %990, 5
  br i1 %993, label %994, label %1001

994:                                              ; preds = %986
  %995 = sext i32 %990 to i64
  %996 = shl nsw i64 %995, 2
  %997 = call i8* @_Znam(i64 %996) #11, !noalias !61
  %998 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1, i32 0
  %999 = bitcast i32** %998 to i8**
  store i8* %997, i8** %999, align 8, !alias.scope !61
  %1000 = bitcast i8* %997 to i32*
  br label %1006

1001:                                             ; preds = %986
  %1002 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1
  %1003 = bitcast %union.anon* %1002 to i32*
  %1004 = sext i32 %990 to i64
  %1005 = shl nsw i64 %1004, 2
  br label %1006

1006:                                             ; preds = %1001, %994
  %1007 = phi i64 [ %996, %994 ], [ %1005, %1001 ]
  %1008 = phi i32* [ %1000, %994 ], [ %1003, %1001 ]
  %1009 = bitcast i32* %1008 to i8*
  %1010 = bitcast i32* %991 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1009, i8* align 4 %1010, i64 %1007, i1 false) #12
  %1011 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %1012 = bitcast %union.TfLitePtrUnion* %1011 to float**
  %1013 = load float*, float** %1012, align 8
  br label %1014

1014:                                             ; preds = %984, %1006
  %1015 = phi i32 [ %990, %1006 ], [ 0, %984 ]
  %1016 = phi float* [ %1013, %1006 ], [ null, %984 ]
  %1017 = bitcast %"class.tflite::RuntimeShape"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1017) #12
  br i1 %55, label %1018, label %1020

1018:                                             ; preds = %1014
  %1019 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 0
  store i32 0, i32* %1019, align 8, !alias.scope !64
  br label %1048

1020:                                             ; preds = %1014
  %1021 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %1022 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1021, align 8, !noalias !64
  %1023 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1022, i64 0, i32 0
  %1024 = load i32, i32* %1023, align 4, !noalias !64
  %1025 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1022, i64 0, i32 1, i64 0
  %1026 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 0
  store i32 %1024, i32* %1026, align 8, !alias.scope !64
  %1027 = icmp sgt i32 %1024, 5
  br i1 %1027, label %1028, label %1035

1028:                                             ; preds = %1020
  %1029 = sext i32 %1024 to i64
  %1030 = shl nsw i64 %1029, 2
  %1031 = call i8* @_Znam(i64 %1030) #11, !noalias !64
  %1032 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1, i32 0
  %1033 = bitcast i32** %1032 to i8**
  store i8* %1031, i8** %1033, align 8, !alias.scope !64
  %1034 = bitcast i8* %1031 to i32*
  br label %1040

1035:                                             ; preds = %1020
  %1036 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1
  %1037 = bitcast %union.anon* %1036 to i32*
  %1038 = sext i32 %1024 to i64
  %1039 = shl nsw i64 %1038, 2
  br label %1040

1040:                                             ; preds = %1035, %1028
  %1041 = phi i64 [ %1030, %1028 ], [ %1039, %1035 ]
  %1042 = phi i32* [ %1034, %1028 ], [ %1037, %1035 ]
  %1043 = bitcast i32* %1042 to i8*
  %1044 = bitcast i32* %1025 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1043, i8* align 4 %1044, i64 %1041, i1 false) #12
  %1045 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %1046 = bitcast %union.TfLitePtrUnion* %1045 to float**
  %1047 = load float*, float** %1046, align 8
  br label %1048

1048:                                             ; preds = %1018, %1040
  %1049 = phi i32 [ %1024, %1040 ], [ 0, %1018 ]
  %1050 = phi float* [ %1047, %1040 ], [ null, %1018 ]
  %1051 = bitcast %"class.tflite::RuntimeShape"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1051) #12
  %1052 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %1052, label %1053, label %1055

1053:                                             ; preds = %1048
  %1054 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 0
  store i32 0, i32* %1054, align 8, !alias.scope !67
  br label %1083

1055:                                             ; preds = %1048
  %1056 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %1057 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1056, align 8, !noalias !67
  %1058 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1057, i64 0, i32 0
  %1059 = load i32, i32* %1058, align 4, !noalias !67
  %1060 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1057, i64 0, i32 1, i64 0
  %1061 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 0
  store i32 %1059, i32* %1061, align 8, !alias.scope !67
  %1062 = icmp sgt i32 %1059, 5
  br i1 %1062, label %1063, label %1070

1063:                                             ; preds = %1055
  %1064 = sext i32 %1059 to i64
  %1065 = shl nsw i64 %1064, 2
  %1066 = call i8* @_Znam(i64 %1065) #11, !noalias !67
  %1067 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1, i32 0
  %1068 = bitcast i32** %1067 to i8**
  store i8* %1066, i8** %1068, align 8, !alias.scope !67
  %1069 = bitcast i8* %1066 to i32*
  br label %1075

1070:                                             ; preds = %1055
  %1071 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1
  %1072 = bitcast %union.anon* %1071 to i32*
  %1073 = sext i32 %1059 to i64
  %1074 = shl nsw i64 %1073, 2
  br label %1075

1075:                                             ; preds = %1070, %1063
  %1076 = phi i64 [ %1065, %1063 ], [ %1074, %1070 ]
  %1077 = phi i32* [ %1069, %1063 ], [ %1072, %1070 ]
  %1078 = bitcast i32* %1077 to i8*
  %1079 = bitcast i32* %1060 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1078, i8* align 4 %1079, i64 %1076, i1 false) #12
  %1080 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %1081 = bitcast %union.TfLitePtrUnion* %1080 to float**
  %1082 = load float*, float** %1081, align 8
  br label %1083

1083:                                             ; preds = %1053, %1075
  %1084 = phi i32 [ %1059, %1075 ], [ 0, %1053 ]
  %1085 = phi float* [ %1082, %1075 ], [ null, %1053 ]
  %1086 = icmp sgt i32 %1015, 5
  %1087 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1
  br i1 %1086, label %1088, label %1091

1088:                                             ; preds = %1083
  %1089 = getelementptr inbounds %union.anon, %union.anon* %1087, i64 0, i32 0
  %1090 = load i32*, i32** %1089, align 8
  br label %1094

1091:                                             ; preds = %1083
  %1092 = bitcast %union.anon* %1087 to i32*
  %1093 = icmp sgt i32 %1015, 0
  br i1 %1093, label %1094, label %1194

1094:                                             ; preds = %1091, %1088
  %1095 = phi i32* [ %1090, %1088 ], [ %1092, %1091 ]
  %1096 = zext i32 %1015 to i64
  %1097 = icmp ult i32 %1015, 8
  br i1 %1097, label %1183, label %1098

1098:                                             ; preds = %1094
  %1099 = and i64 %1096, 4294967288
  %1100 = add nsw i64 %1099, -8
  %1101 = lshr exact i64 %1100, 3
  %1102 = add nuw nsw i64 %1101, 1
  %1103 = and i64 %1102, 3
  %1104 = icmp ult i64 %1100, 24
  br i1 %1104, label %1150, label %1105

1105:                                             ; preds = %1098
  %1106 = sub nsw i64 %1102, %1103
  br label %1107

1107:                                             ; preds = %1107, %1105
  %1108 = phi i64 [ 0, %1105 ], [ %1147, %1107 ]
  %1109 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1105 ], [ %1145, %1107 ]
  %1110 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1105 ], [ %1146, %1107 ]
  %1111 = phi i64 [ %1106, %1105 ], [ %1148, %1107 ]
  %1112 = getelementptr inbounds i32, i32* %1095, i64 %1108
  %1113 = bitcast i32* %1112 to <4 x i32>*
  %1114 = load <4 x i32>, <4 x i32>* %1113, align 4
  %1115 = getelementptr inbounds i32, i32* %1112, i64 4
  %1116 = bitcast i32* %1115 to <4 x i32>*
  %1117 = load <4 x i32>, <4 x i32>* %1116, align 4
  %1118 = mul nsw <4 x i32> %1114, %1109
  %1119 = mul nsw <4 x i32> %1117, %1110
  %1120 = or i64 %1108, 8
  %1121 = getelementptr inbounds i32, i32* %1095, i64 %1120
  %1122 = bitcast i32* %1121 to <4 x i32>*
  %1123 = load <4 x i32>, <4 x i32>* %1122, align 4
  %1124 = getelementptr inbounds i32, i32* %1121, i64 4
  %1125 = bitcast i32* %1124 to <4 x i32>*
  %1126 = load <4 x i32>, <4 x i32>* %1125, align 4
  %1127 = mul nsw <4 x i32> %1123, %1118
  %1128 = mul nsw <4 x i32> %1126, %1119
  %1129 = or i64 %1108, 16
  %1130 = getelementptr inbounds i32, i32* %1095, i64 %1129
  %1131 = bitcast i32* %1130 to <4 x i32>*
  %1132 = load <4 x i32>, <4 x i32>* %1131, align 4
  %1133 = getelementptr inbounds i32, i32* %1130, i64 4
  %1134 = bitcast i32* %1133 to <4 x i32>*
  %1135 = load <4 x i32>, <4 x i32>* %1134, align 4
  %1136 = mul nsw <4 x i32> %1132, %1127
  %1137 = mul nsw <4 x i32> %1135, %1128
  %1138 = or i64 %1108, 24
  %1139 = getelementptr inbounds i32, i32* %1095, i64 %1138
  %1140 = bitcast i32* %1139 to <4 x i32>*
  %1141 = load <4 x i32>, <4 x i32>* %1140, align 4
  %1142 = getelementptr inbounds i32, i32* %1139, i64 4
  %1143 = bitcast i32* %1142 to <4 x i32>*
  %1144 = load <4 x i32>, <4 x i32>* %1143, align 4
  %1145 = mul nsw <4 x i32> %1141, %1136
  %1146 = mul nsw <4 x i32> %1144, %1137
  %1147 = add i64 %1108, 32
  %1148 = add i64 %1111, -4
  %1149 = icmp eq i64 %1148, 0
  br i1 %1149, label %1150, label %1107, !llvm.loop !70

1150:                                             ; preds = %1107, %1098
  %1151 = phi <4 x i32> [ undef, %1098 ], [ %1145, %1107 ]
  %1152 = phi <4 x i32> [ undef, %1098 ], [ %1146, %1107 ]
  %1153 = phi i64 [ 0, %1098 ], [ %1147, %1107 ]
  %1154 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1098 ], [ %1145, %1107 ]
  %1155 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1098 ], [ %1146, %1107 ]
  %1156 = icmp eq i64 %1103, 0
  br i1 %1156, label %1173, label %1157

1157:                                             ; preds = %1150, %1157
  %1158 = phi i64 [ %1170, %1157 ], [ %1153, %1150 ]
  %1159 = phi <4 x i32> [ %1168, %1157 ], [ %1154, %1150 ]
  %1160 = phi <4 x i32> [ %1169, %1157 ], [ %1155, %1150 ]
  %1161 = phi i64 [ %1171, %1157 ], [ %1103, %1150 ]
  %1162 = getelementptr inbounds i32, i32* %1095, i64 %1158
  %1163 = bitcast i32* %1162 to <4 x i32>*
  %1164 = load <4 x i32>, <4 x i32>* %1163, align 4
  %1165 = getelementptr inbounds i32, i32* %1162, i64 4
  %1166 = bitcast i32* %1165 to <4 x i32>*
  %1167 = load <4 x i32>, <4 x i32>* %1166, align 4
  %1168 = mul nsw <4 x i32> %1164, %1159
  %1169 = mul nsw <4 x i32> %1167, %1160
  %1170 = add i64 %1158, 8
  %1171 = add i64 %1161, -1
  %1172 = icmp eq i64 %1171, 0
  br i1 %1172, label %1173, label %1157, !llvm.loop !71

1173:                                             ; preds = %1157, %1150
  %1174 = phi <4 x i32> [ %1151, %1150 ], [ %1168, %1157 ]
  %1175 = phi <4 x i32> [ %1152, %1150 ], [ %1169, %1157 ]
  %1176 = mul <4 x i32> %1175, %1174
  %1177 = shufflevector <4 x i32> %1176, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1178 = mul <4 x i32> %1176, %1177
  %1179 = shufflevector <4 x i32> %1178, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1180 = mul <4 x i32> %1178, %1179
  %1181 = extractelement <4 x i32> %1180, i32 0
  %1182 = icmp eq i64 %1099, %1096
  br i1 %1182, label %1194, label %1183

1183:                                             ; preds = %1173, %1094
  %1184 = phi i64 [ 0, %1094 ], [ %1099, %1173 ]
  %1185 = phi i32 [ 1, %1094 ], [ %1181, %1173 ]
  br label %1186

1186:                                             ; preds = %1183, %1186
  %1187 = phi i64 [ %1192, %1186 ], [ %1184, %1183 ]
  %1188 = phi i32 [ %1191, %1186 ], [ %1185, %1183 ]
  %1189 = getelementptr inbounds i32, i32* %1095, i64 %1187
  %1190 = load i32, i32* %1189, align 4
  %1191 = mul nsw i32 %1190, %1188
  %1192 = add nuw nsw i64 %1187, 1
  %1193 = icmp eq i64 %1192, %1096
  br i1 %1193, label %1194, label %1186, !llvm.loop !72

1194:                                             ; preds = %1186, %1173, %1091
  %1195 = phi i32 [ 1, %1091 ], [ %1181, %1173 ], [ %1191, %1186 ]
  %1196 = icmp sgt i32 %1049, 5
  %1197 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1
  br i1 %1196, label %1198, label %1201

1198:                                             ; preds = %1194
  %1199 = getelementptr inbounds %union.anon, %union.anon* %1197, i64 0, i32 0
  %1200 = load i32*, i32** %1199, align 8
  br label %1204

1201:                                             ; preds = %1194
  %1202 = bitcast %union.anon* %1197 to i32*
  %1203 = icmp sgt i32 %1049, 0
  br i1 %1203, label %1204, label %1304

1204:                                             ; preds = %1201, %1198
  %1205 = phi i32* [ %1200, %1198 ], [ %1202, %1201 ]
  %1206 = zext i32 %1049 to i64
  %1207 = icmp ult i32 %1049, 8
  br i1 %1207, label %1293, label %1208

1208:                                             ; preds = %1204
  %1209 = and i64 %1206, 4294967288
  %1210 = add nsw i64 %1209, -8
  %1211 = lshr exact i64 %1210, 3
  %1212 = add nuw nsw i64 %1211, 1
  %1213 = and i64 %1212, 3
  %1214 = icmp ult i64 %1210, 24
  br i1 %1214, label %1260, label %1215

1215:                                             ; preds = %1208
  %1216 = sub nsw i64 %1212, %1213
  br label %1217

1217:                                             ; preds = %1217, %1215
  %1218 = phi i64 [ 0, %1215 ], [ %1257, %1217 ]
  %1219 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1215 ], [ %1255, %1217 ]
  %1220 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1215 ], [ %1256, %1217 ]
  %1221 = phi i64 [ %1216, %1215 ], [ %1258, %1217 ]
  %1222 = getelementptr inbounds i32, i32* %1205, i64 %1218
  %1223 = bitcast i32* %1222 to <4 x i32>*
  %1224 = load <4 x i32>, <4 x i32>* %1223, align 4
  %1225 = getelementptr inbounds i32, i32* %1222, i64 4
  %1226 = bitcast i32* %1225 to <4 x i32>*
  %1227 = load <4 x i32>, <4 x i32>* %1226, align 4
  %1228 = mul nsw <4 x i32> %1224, %1219
  %1229 = mul nsw <4 x i32> %1227, %1220
  %1230 = or i64 %1218, 8
  %1231 = getelementptr inbounds i32, i32* %1205, i64 %1230
  %1232 = bitcast i32* %1231 to <4 x i32>*
  %1233 = load <4 x i32>, <4 x i32>* %1232, align 4
  %1234 = getelementptr inbounds i32, i32* %1231, i64 4
  %1235 = bitcast i32* %1234 to <4 x i32>*
  %1236 = load <4 x i32>, <4 x i32>* %1235, align 4
  %1237 = mul nsw <4 x i32> %1233, %1228
  %1238 = mul nsw <4 x i32> %1236, %1229
  %1239 = or i64 %1218, 16
  %1240 = getelementptr inbounds i32, i32* %1205, i64 %1239
  %1241 = bitcast i32* %1240 to <4 x i32>*
  %1242 = load <4 x i32>, <4 x i32>* %1241, align 4
  %1243 = getelementptr inbounds i32, i32* %1240, i64 4
  %1244 = bitcast i32* %1243 to <4 x i32>*
  %1245 = load <4 x i32>, <4 x i32>* %1244, align 4
  %1246 = mul nsw <4 x i32> %1242, %1237
  %1247 = mul nsw <4 x i32> %1245, %1238
  %1248 = or i64 %1218, 24
  %1249 = getelementptr inbounds i32, i32* %1205, i64 %1248
  %1250 = bitcast i32* %1249 to <4 x i32>*
  %1251 = load <4 x i32>, <4 x i32>* %1250, align 4
  %1252 = getelementptr inbounds i32, i32* %1249, i64 4
  %1253 = bitcast i32* %1252 to <4 x i32>*
  %1254 = load <4 x i32>, <4 x i32>* %1253, align 4
  %1255 = mul nsw <4 x i32> %1251, %1246
  %1256 = mul nsw <4 x i32> %1254, %1247
  %1257 = add i64 %1218, 32
  %1258 = add i64 %1221, -4
  %1259 = icmp eq i64 %1258, 0
  br i1 %1259, label %1260, label %1217, !llvm.loop !73

1260:                                             ; preds = %1217, %1208
  %1261 = phi <4 x i32> [ undef, %1208 ], [ %1255, %1217 ]
  %1262 = phi <4 x i32> [ undef, %1208 ], [ %1256, %1217 ]
  %1263 = phi i64 [ 0, %1208 ], [ %1257, %1217 ]
  %1264 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1208 ], [ %1255, %1217 ]
  %1265 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1208 ], [ %1256, %1217 ]
  %1266 = icmp eq i64 %1213, 0
  br i1 %1266, label %1283, label %1267

1267:                                             ; preds = %1260, %1267
  %1268 = phi i64 [ %1280, %1267 ], [ %1263, %1260 ]
  %1269 = phi <4 x i32> [ %1278, %1267 ], [ %1264, %1260 ]
  %1270 = phi <4 x i32> [ %1279, %1267 ], [ %1265, %1260 ]
  %1271 = phi i64 [ %1281, %1267 ], [ %1213, %1260 ]
  %1272 = getelementptr inbounds i32, i32* %1205, i64 %1268
  %1273 = bitcast i32* %1272 to <4 x i32>*
  %1274 = load <4 x i32>, <4 x i32>* %1273, align 4
  %1275 = getelementptr inbounds i32, i32* %1272, i64 4
  %1276 = bitcast i32* %1275 to <4 x i32>*
  %1277 = load <4 x i32>, <4 x i32>* %1276, align 4
  %1278 = mul nsw <4 x i32> %1274, %1269
  %1279 = mul nsw <4 x i32> %1277, %1270
  %1280 = add i64 %1268, 8
  %1281 = add i64 %1271, -1
  %1282 = icmp eq i64 %1281, 0
  br i1 %1282, label %1283, label %1267, !llvm.loop !74

1283:                                             ; preds = %1267, %1260
  %1284 = phi <4 x i32> [ %1261, %1260 ], [ %1278, %1267 ]
  %1285 = phi <4 x i32> [ %1262, %1260 ], [ %1279, %1267 ]
  %1286 = mul <4 x i32> %1285, %1284
  %1287 = shufflevector <4 x i32> %1286, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1288 = mul <4 x i32> %1286, %1287
  %1289 = shufflevector <4 x i32> %1288, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1290 = mul <4 x i32> %1288, %1289
  %1291 = extractelement <4 x i32> %1290, i32 0
  %1292 = icmp eq i64 %1209, %1206
  br i1 %1292, label %1304, label %1293

1293:                                             ; preds = %1283, %1204
  %1294 = phi i64 [ 0, %1204 ], [ %1209, %1283 ]
  %1295 = phi i32 [ 1, %1204 ], [ %1291, %1283 ]
  br label %1296

1296:                                             ; preds = %1293, %1296
  %1297 = phi i64 [ %1302, %1296 ], [ %1294, %1293 ]
  %1298 = phi i32 [ %1301, %1296 ], [ %1295, %1293 ]
  %1299 = getelementptr inbounds i32, i32* %1205, i64 %1297
  %1300 = load i32, i32* %1299, align 4
  %1301 = mul nsw i32 %1300, %1298
  %1302 = add nuw nsw i64 %1297, 1
  %1303 = icmp eq i64 %1302, %1206
  br i1 %1303, label %1304, label %1296, !llvm.loop !75

1304:                                             ; preds = %1296, %1283, %1201
  %1305 = phi i32 [ 1, %1201 ], [ %1291, %1283 ], [ %1301, %1296 ]
  %1306 = icmp sgt i32 %1084, 5
  %1307 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1
  br i1 %1306, label %1308, label %1311

1308:                                             ; preds = %1304
  %1309 = getelementptr inbounds %union.anon, %union.anon* %1307, i64 0, i32 0
  %1310 = load i32*, i32** %1309, align 8
  br label %1314

1311:                                             ; preds = %1304
  %1312 = bitcast %union.anon* %1307 to i32*
  %1313 = icmp sgt i32 %1084, 0
  br i1 %1313, label %1314, label %1414

1314:                                             ; preds = %1311, %1308
  %1315 = phi i32* [ %1310, %1308 ], [ %1312, %1311 ]
  %1316 = zext i32 %1084 to i64
  %1317 = icmp ult i32 %1084, 8
  br i1 %1317, label %1403, label %1318

1318:                                             ; preds = %1314
  %1319 = and i64 %1316, 4294967288
  %1320 = add nsw i64 %1319, -8
  %1321 = lshr exact i64 %1320, 3
  %1322 = add nuw nsw i64 %1321, 1
  %1323 = and i64 %1322, 3
  %1324 = icmp ult i64 %1320, 24
  br i1 %1324, label %1370, label %1325

1325:                                             ; preds = %1318
  %1326 = sub nsw i64 %1322, %1323
  br label %1327

1327:                                             ; preds = %1327, %1325
  %1328 = phi i64 [ 0, %1325 ], [ %1367, %1327 ]
  %1329 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1325 ], [ %1365, %1327 ]
  %1330 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1325 ], [ %1366, %1327 ]
  %1331 = phi i64 [ %1326, %1325 ], [ %1368, %1327 ]
  %1332 = getelementptr inbounds i32, i32* %1315, i64 %1328
  %1333 = bitcast i32* %1332 to <4 x i32>*
  %1334 = load <4 x i32>, <4 x i32>* %1333, align 4
  %1335 = getelementptr inbounds i32, i32* %1332, i64 4
  %1336 = bitcast i32* %1335 to <4 x i32>*
  %1337 = load <4 x i32>, <4 x i32>* %1336, align 4
  %1338 = mul nsw <4 x i32> %1334, %1329
  %1339 = mul nsw <4 x i32> %1337, %1330
  %1340 = or i64 %1328, 8
  %1341 = getelementptr inbounds i32, i32* %1315, i64 %1340
  %1342 = bitcast i32* %1341 to <4 x i32>*
  %1343 = load <4 x i32>, <4 x i32>* %1342, align 4
  %1344 = getelementptr inbounds i32, i32* %1341, i64 4
  %1345 = bitcast i32* %1344 to <4 x i32>*
  %1346 = load <4 x i32>, <4 x i32>* %1345, align 4
  %1347 = mul nsw <4 x i32> %1343, %1338
  %1348 = mul nsw <4 x i32> %1346, %1339
  %1349 = or i64 %1328, 16
  %1350 = getelementptr inbounds i32, i32* %1315, i64 %1349
  %1351 = bitcast i32* %1350 to <4 x i32>*
  %1352 = load <4 x i32>, <4 x i32>* %1351, align 4
  %1353 = getelementptr inbounds i32, i32* %1350, i64 4
  %1354 = bitcast i32* %1353 to <4 x i32>*
  %1355 = load <4 x i32>, <4 x i32>* %1354, align 4
  %1356 = mul nsw <4 x i32> %1352, %1347
  %1357 = mul nsw <4 x i32> %1355, %1348
  %1358 = or i64 %1328, 24
  %1359 = getelementptr inbounds i32, i32* %1315, i64 %1358
  %1360 = bitcast i32* %1359 to <4 x i32>*
  %1361 = load <4 x i32>, <4 x i32>* %1360, align 4
  %1362 = getelementptr inbounds i32, i32* %1359, i64 4
  %1363 = bitcast i32* %1362 to <4 x i32>*
  %1364 = load <4 x i32>, <4 x i32>* %1363, align 4
  %1365 = mul nsw <4 x i32> %1361, %1356
  %1366 = mul nsw <4 x i32> %1364, %1357
  %1367 = add i64 %1328, 32
  %1368 = add i64 %1331, -4
  %1369 = icmp eq i64 %1368, 0
  br i1 %1369, label %1370, label %1327, !llvm.loop !76

1370:                                             ; preds = %1327, %1318
  %1371 = phi <4 x i32> [ undef, %1318 ], [ %1365, %1327 ]
  %1372 = phi <4 x i32> [ undef, %1318 ], [ %1366, %1327 ]
  %1373 = phi i64 [ 0, %1318 ], [ %1367, %1327 ]
  %1374 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1318 ], [ %1365, %1327 ]
  %1375 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1318 ], [ %1366, %1327 ]
  %1376 = icmp eq i64 %1323, 0
  br i1 %1376, label %1393, label %1377

1377:                                             ; preds = %1370, %1377
  %1378 = phi i64 [ %1390, %1377 ], [ %1373, %1370 ]
  %1379 = phi <4 x i32> [ %1388, %1377 ], [ %1374, %1370 ]
  %1380 = phi <4 x i32> [ %1389, %1377 ], [ %1375, %1370 ]
  %1381 = phi i64 [ %1391, %1377 ], [ %1323, %1370 ]
  %1382 = getelementptr inbounds i32, i32* %1315, i64 %1378
  %1383 = bitcast i32* %1382 to <4 x i32>*
  %1384 = load <4 x i32>, <4 x i32>* %1383, align 4
  %1385 = getelementptr inbounds i32, i32* %1382, i64 4
  %1386 = bitcast i32* %1385 to <4 x i32>*
  %1387 = load <4 x i32>, <4 x i32>* %1386, align 4
  %1388 = mul nsw <4 x i32> %1384, %1379
  %1389 = mul nsw <4 x i32> %1387, %1380
  %1390 = add i64 %1378, 8
  %1391 = add i64 %1381, -1
  %1392 = icmp eq i64 %1391, 0
  br i1 %1392, label %1393, label %1377, !llvm.loop !77

1393:                                             ; preds = %1377, %1370
  %1394 = phi <4 x i32> [ %1371, %1370 ], [ %1388, %1377 ]
  %1395 = phi <4 x i32> [ %1372, %1370 ], [ %1389, %1377 ]
  %1396 = mul <4 x i32> %1395, %1394
  %1397 = shufflevector <4 x i32> %1396, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1398 = mul <4 x i32> %1396, %1397
  %1399 = shufflevector <4 x i32> %1398, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1400 = mul <4 x i32> %1398, %1399
  %1401 = extractelement <4 x i32> %1400, i32 0
  %1402 = icmp eq i64 %1319, %1316
  br i1 %1402, label %1414, label %1403

1403:                                             ; preds = %1393, %1314
  %1404 = phi i64 [ 0, %1314 ], [ %1319, %1393 ]
  %1405 = phi i32 [ 1, %1314 ], [ %1401, %1393 ]
  br label %1406

1406:                                             ; preds = %1403, %1406
  %1407 = phi i64 [ %1412, %1406 ], [ %1404, %1403 ]
  %1408 = phi i32 [ %1411, %1406 ], [ %1405, %1403 ]
  %1409 = getelementptr inbounds i32, i32* %1315, i64 %1407
  %1410 = load i32, i32* %1409, align 4
  %1411 = mul nsw i32 %1410, %1408
  %1412 = add nuw nsw i64 %1407, 1
  %1413 = icmp eq i64 %1412, %1316
  br i1 %1413, label %1414, label %1406, !llvm.loop !78

1414:                                             ; preds = %1406, %1393, %1311
  %1415 = phi i32 [ 1, %1311 ], [ %1401, %1393 ], [ %1411, %1406 ]
  %1416 = icmp eq i32 %1195, %1305
  br i1 %1416, label %1418, label %1417

1417:                                             ; preds = %1414
  call void @abort() #13
  unreachable

1418:                                             ; preds = %1414
  %1419 = icmp eq i32 %1195, %1415
  br i1 %1419, label %1420, label %1516

1420:                                             ; preds = %1418
  %1421 = icmp sgt i32 %1195, 0
  br i1 %1421, label %1422, label %1546

1422:                                             ; preds = %1420
  %1423 = zext i32 %1195 to i64
  %1424 = load float, float* %1016, align 4
  %1425 = load float, float* %1050, align 4
  %1426 = fadd float %1424, %1425
  %1427 = fcmp olt float %1426, %979
  %1428 = select i1 %1427, float %979, float %1426
  %1429 = fcmp ogt float %1428, %980
  %1430 = select i1 %1429, float %980, float %1428
  store float %1430, float* %1085, align 4
  %1431 = icmp eq i32 %1195, 1
  br i1 %1431, label %1546, label %1432

1432:                                             ; preds = %1422
  %1433 = add nsw i64 %1423, -1
  %1434 = icmp ult i64 %1433, 4
  br i1 %1434, label %1435, label %1458

1435:                                             ; preds = %1514, %1458, %1432
  %1436 = phi i64 [ 1, %1458 ], [ 1, %1432 ], [ %1489, %1514 ]
  %1437 = xor i64 %1436, -1
  %1438 = and i64 %1423, 1
  %1439 = icmp eq i64 %1438, 0
  br i1 %1439, label %1440, label %1454

1440:                                             ; preds = %1435
  %1441 = load float, float* %981, align 4
  %1442 = load float, float* %982, align 4
  %1443 = getelementptr inbounds float, float* %1016, i64 %1436
  %1444 = load float, float* %1443, align 4
  %1445 = getelementptr inbounds float, float* %1050, i64 %1436
  %1446 = load float, float* %1445, align 4
  %1447 = fadd float %1444, %1446
  %1448 = fcmp olt float %1447, %1441
  %1449 = select i1 %1448, float %1441, float %1447
  %1450 = fcmp ogt float %1449, %1442
  %1451 = select i1 %1450, float %1442, float %1449
  %1452 = getelementptr inbounds float, float* %1085, i64 %1436
  store float %1451, float* %1452, align 4
  %1453 = add nuw nsw i64 %1436, 1
  br label %1454

1454:                                             ; preds = %1435, %1440
  %1455 = phi i64 [ %1436, %1435 ], [ %1453, %1440 ]
  %1456 = sub nsw i64 0, %1423
  %1457 = icmp eq i64 %1437, %1456
  br i1 %1457, label %1546, label %1517

1458:                                             ; preds = %1432
  %1459 = getelementptr float, float* %1085, i64 1
  %1460 = bitcast float* %1459 to i8*
  %1461 = getelementptr float, float* %1085, i64 %1423
  %1462 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 13
  %1463 = bitcast float* %1462 to i8*
  %1464 = getelementptr inbounds i8, i8* %1463, i64 1
  %1465 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 14
  %1466 = bitcast float* %1465 to i8*
  %1467 = getelementptr inbounds i8, i8* %1466, i64 1
  %1468 = getelementptr float, float* %1016, i64 1
  %1469 = getelementptr float, float* %1016, i64 %1423
  %1470 = getelementptr float, float* %1050, i64 1
  %1471 = getelementptr float, float* %1050, i64 %1423
  %1472 = icmp ugt i8* %1464, %1460
  %1473 = icmp ult float* %981, %1461
  %1474 = and i1 %1472, %1473
  %1475 = icmp ugt i8* %1467, %1460
  %1476 = icmp ult float* %982, %1461
  %1477 = and i1 %1475, %1476
  %1478 = or i1 %1474, %1477
  %1479 = icmp ult float* %1459, %1469
  %1480 = icmp ult float* %1468, %1461
  %1481 = and i1 %1479, %1480
  %1482 = or i1 %1478, %1481
  %1483 = icmp ult float* %1459, %1471
  %1484 = icmp ult float* %1470, %1461
  %1485 = and i1 %1483, %1484
  %1486 = or i1 %1482, %1485
  br i1 %1486, label %1435, label %1487

1487:                                             ; preds = %1458
  %1488 = and i64 %1433, -4
  %1489 = or i64 %1488, 1
  %1490 = load float, float* %981, align 4, !alias.scope !79
  %1491 = insertelement <4 x float> undef, float %1490, i32 0
  %1492 = shufflevector <4 x float> %1491, <4 x float> undef, <4 x i32> zeroinitializer
  %1493 = load float, float* %982, align 4, !alias.scope !82
  %1494 = insertelement <4 x float> undef, float %1493, i32 0
  %1495 = shufflevector <4 x float> %1494, <4 x float> undef, <4 x i32> zeroinitializer
  br label %1496

1496:                                             ; preds = %1496, %1487
  %1497 = phi i64 [ 0, %1487 ], [ %1512, %1496 ]
  %1498 = or i64 %1497, 1
  %1499 = getelementptr inbounds float, float* %1016, i64 %1498
  %1500 = bitcast float* %1499 to <4 x float>*
  %1501 = load <4 x float>, <4 x float>* %1500, align 4, !alias.scope !84
  %1502 = getelementptr inbounds float, float* %1050, i64 %1498
  %1503 = bitcast float* %1502 to <4 x float>*
  %1504 = load <4 x float>, <4 x float>* %1503, align 4, !alias.scope !86
  %1505 = fadd <4 x float> %1501, %1504
  %1506 = fcmp olt <4 x float> %1505, %1492
  %1507 = select <4 x i1> %1506, <4 x float> %1492, <4 x float> %1505
  %1508 = fcmp ogt <4 x float> %1507, %1495
  %1509 = select <4 x i1> %1508, <4 x float> %1495, <4 x float> %1507
  %1510 = getelementptr inbounds float, float* %1085, i64 %1498
  %1511 = bitcast float* %1510 to <4 x float>*
  store <4 x float> %1509, <4 x float>* %1511, align 4, !alias.scope !88, !noalias !90
  %1512 = add i64 %1497, 4
  %1513 = icmp eq i64 %1512, %1488
  br i1 %1513, label %1514, label %1496, !llvm.loop !91

1514:                                             ; preds = %1496
  %1515 = icmp eq i64 %1433, %1488
  br i1 %1515, label %1546, label %1435

1516:                                             ; preds = %1418
  call void @abort() #13
  unreachable

1517:                                             ; preds = %1454, %1517
  %1518 = phi i64 [ %1544, %1517 ], [ %1455, %1454 ]
  %1519 = load float, float* %981, align 4
  %1520 = load float, float* %982, align 4
  %1521 = getelementptr inbounds float, float* %1016, i64 %1518
  %1522 = load float, float* %1521, align 4
  %1523 = getelementptr inbounds float, float* %1050, i64 %1518
  %1524 = load float, float* %1523, align 4
  %1525 = fadd float %1522, %1524
  %1526 = fcmp olt float %1525, %1519
  %1527 = select i1 %1526, float %1519, float %1525
  %1528 = fcmp ogt float %1527, %1520
  %1529 = select i1 %1528, float %1520, float %1527
  %1530 = getelementptr inbounds float, float* %1085, i64 %1518
  store float %1529, float* %1530, align 4
  %1531 = add nuw nsw i64 %1518, 1
  %1532 = load float, float* %981, align 4
  %1533 = load float, float* %982, align 4
  %1534 = getelementptr inbounds float, float* %1016, i64 %1531
  %1535 = load float, float* %1534, align 4
  %1536 = getelementptr inbounds float, float* %1050, i64 %1531
  %1537 = load float, float* %1536, align 4
  %1538 = fadd float %1535, %1537
  %1539 = fcmp olt float %1538, %1532
  %1540 = select i1 %1539, float %1532, float %1538
  %1541 = fcmp ogt float %1540, %1533
  %1542 = select i1 %1541, float %1533, float %1540
  %1543 = getelementptr inbounds float, float* %1085, i64 %1531
  store float %1542, float* %1543, align 4
  %1544 = add nuw nsw i64 %1518, 2
  %1545 = icmp eq i64 %1544, %1423
  br i1 %1545, label %1546, label %1517, !llvm.loop !92

1546:                                             ; preds = %1454, %1517, %1422, %1514, %1420
  br i1 %1306, label %1547, label %1553

1547:                                             ; preds = %1546
  %1548 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1, i32 0
  %1549 = load i32*, i32** %1548, align 8
  %1550 = icmp eq i32* %1549, null
  br i1 %1550, label %1553, label %1551

1551:                                             ; preds = %1547
  %1552 = bitcast i32* %1549 to i8*
  call void @_ZdaPv(i8* %1552) #11
  br label %1553

1553:                                             ; preds = %1546, %1547, %1551
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1051) #12
  br i1 %1196, label %1554, label %1560

1554:                                             ; preds = %1553
  %1555 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1, i32 0
  %1556 = load i32*, i32** %1555, align 8
  %1557 = icmp eq i32* %1556, null
  br i1 %1557, label %1560, label %1558

1558:                                             ; preds = %1554
  %1559 = bitcast i32* %1556 to i8*
  call void @_ZdaPv(i8* %1559) #11
  br label %1560

1560:                                             ; preds = %1553, %1554, %1558
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1017) #12
  br i1 %1086, label %1561, label %1567

1561:                                             ; preds = %1560
  %1562 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1, i32 0
  %1563 = load i32*, i32** %1562, align 8
  %1564 = icmp eq i32* %1563, null
  br i1 %1564, label %1567, label %1565

1565:                                             ; preds = %1561
  %1566 = bitcast i32* %1563 to i8*
  call void @_ZdaPv(i8* %1566) #11
  br label %1567

1567:                                             ; preds = %1565, %1561, %1560, %968, %964, %960, %821, %817, %816, %249, %245, %241
  %1568 = phi i8* [ %125, %241 ], [ %125, %245 ], [ %125, %249 ], [ %264, %816 ], [ %264, %817 ], [ %264, %821 ], [ %841, %960 ], [ %841, %964 ], [ %841, %968 ], [ %983, %1560 ], [ %983, %1561 ], [ %983, %1565 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1568) #12
  br label %1569

1569:                                             ; preds = %1567, %104
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %23) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin3add16EvalAddQuantizedILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSH_PSF_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLiteAddParams*, %"struct.tflite::ops::builtin::add::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #3 comdat {
  %8 = alloca %"struct.tflite::ArithmeticParams", align 4
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = alloca %"class.tflite::RuntimeShape", align 8
  %13 = alloca %"class.tflite::RuntimeShape", align 8
  %14 = alloca %"class.tflite::RuntimeShape", align 8
  %15 = alloca %"class.tflite::RuntimeShape", align 8
  %16 = alloca %"class.tflite::RuntimeShape", align 8
  %17 = alloca %"class.tflite::RuntimeShape", align 8
  %18 = alloca %"class.tflite::RuntimeShape", align 8
  %19 = alloca %"class.tflite::RuntimeShape", align 8
  %20 = alloca %"class.tflite::RuntimeShape", align 8
  %21 = alloca %"class.tflite::RuntimeShape", align 8
  %22 = alloca %"class.tflite::RuntimeShape", align 8
  %23 = alloca %"class.tflite::RuntimeShape", align 8
  %24 = alloca %"class.tflite::RuntimeShape", align 8
  %25 = alloca %"class.tflite::RuntimeShape", align 8
  %26 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 0
  %27 = load i32, i32* %26, align 8
  switch i32 %27, label %1915 [
    i32 3, label %28
    i32 9, label %28
    i32 7, label %1333
  ]

28:                                               ; preds = %7, %7
  %29 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %29) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %29, i8* align 4 getelementptr inbounds ({ i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, [5 x i32] }, { i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, [5 x i32] }* @__const._ZN6tflite3ops7builtin3add16EvalAddQuantizedILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSH_PSF_.op_params, i64 0, i32 0), i64 80, i1 false)
  %30 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 8
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 6
  store i32 %31, i32* %32, align 4
  %33 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 9
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 1
  store i32 %34, i32* %35, align 4
  %36 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 4
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 7
  store i32 %37, i32* %38, align 4
  %39 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 8
  store i32 %40, i32* %41, align 4
  %42 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 10
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 2
  store i32 %43, i32* %44, align 4
  %45 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 5
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 9
  store i32 %46, i32* %47, align 4
  %48 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 1
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 10
  store i32 %49, i32* %50, align 4
  %51 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 11
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 3
  store i32 %52, i32* %53, align 4
  %54 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 6
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 4
  store i32 %55, i32* %56, align 4
  %57 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 7
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 5
  store i32 %58, i32* %59, align 4
  %60 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 2
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 3
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 11
  store i32 %61, i32* %64, align 4
  %65 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 12
  store i32 %63, i32* %65, align 4
  %66 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %66) #12
  %67 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %67, label %68, label %70

68:                                               ; preds = %28
  %69 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %69, align 8, !alias.scope !93
  br label %95

70:                                               ; preds = %28
  %71 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %72 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %71, align 8, !noalias !93
  %73 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %72, i64 0, i32 0
  %74 = load i32, i32* %73, align 4, !noalias !93
  %75 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %72, i64 0, i32 1, i64 0
  %76 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %74, i32* %76, align 8, !alias.scope !93
  %77 = icmp sgt i32 %74, 5
  br i1 %77, label %78, label %85

78:                                               ; preds = %70
  %79 = sext i32 %74 to i64
  %80 = shl nsw i64 %79, 2
  %81 = tail call i8* @_Znam(i64 %80) #11, !noalias !93
  %82 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %83 = bitcast i32** %82 to i8**
  store i8* %81, i8** %83, align 8, !alias.scope !93
  %84 = bitcast i8* %81 to i32*
  br label %90

85:                                               ; preds = %70
  %86 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %87 = bitcast %union.anon* %86 to i32*
  %88 = sext i32 %74 to i64
  %89 = shl nsw i64 %88, 2
  br label %90

90:                                               ; preds = %85, %78
  %91 = phi i64 [ %80, %78 ], [ %89, %85 ]
  %92 = phi i32* [ %84, %78 ], [ %87, %85 ]
  %93 = bitcast i32* %92 to i8*
  %94 = bitcast i32* %75 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %93, i8* align 4 %94, i64 %91, i1 false) #12
  br label %95

95:                                               ; preds = %68, %90
  %96 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %96) #12
  %97 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %97, label %98, label %100

98:                                               ; preds = %95
  %99 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %99, align 8, !alias.scope !96
  br label %125

100:                                              ; preds = %95
  %101 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %102 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %101, align 8, !noalias !96
  %103 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %102, i64 0, i32 0
  %104 = load i32, i32* %103, align 4, !noalias !96
  %105 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %102, i64 0, i32 1, i64 0
  %106 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %104, i32* %106, align 8, !alias.scope !96
  %107 = icmp sgt i32 %104, 5
  br i1 %107, label %108, label %115

108:                                              ; preds = %100
  %109 = sext i32 %104 to i64
  %110 = shl nsw i64 %109, 2
  %111 = tail call i8* @_Znam(i64 %110) #11, !noalias !96
  %112 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %113 = bitcast i32** %112 to i8**
  store i8* %111, i8** %113, align 8, !alias.scope !96
  %114 = bitcast i8* %111 to i32*
  br label %120

115:                                              ; preds = %100
  %116 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %117 = bitcast %union.anon* %116 to i32*
  %118 = sext i32 %104 to i64
  %119 = shl nsw i64 %118, 2
  br label %120

120:                                              ; preds = %115, %108
  %121 = phi i64 [ %110, %108 ], [ %119, %115 ]
  %122 = phi i32* [ %114, %108 ], [ %117, %115 ]
  %123 = bitcast i32* %122 to i8*
  %124 = bitcast i32* %105 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %123, i8* align 4 %124, i64 %121, i1 false) #12
  br label %125

125:                                              ; preds = %98, %120
  %126 = call zeroext i1 @_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE(%"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %9, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %10, %"struct.tflite::ArithmeticParams"* nonnull %8)
  %127 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  %128 = load i32, i32* %127, align 8
  %129 = icmp sgt i32 %128, 5
  br i1 %129, label %130, label %136

130:                                              ; preds = %125
  %131 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %132 = load i32*, i32** %131, align 8
  %133 = icmp eq i32* %132, null
  br i1 %133, label %136, label %134

134:                                              ; preds = %130
  %135 = bitcast i32* %132 to i8*
  call void @_ZdaPv(i8* %135) #11
  br label %136

136:                                              ; preds = %125, %130, %134
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %96) #12
  %137 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  %138 = load i32, i32* %137, align 8
  %139 = icmp sgt i32 %138, 5
  br i1 %139, label %140, label %146

140:                                              ; preds = %136
  %141 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %142 = load i32*, i32** %141, align 8
  %143 = icmp eq i32* %142, null
  br i1 %143, label %146, label %144

144:                                              ; preds = %140
  %145 = bitcast i32* %142 to i8*
  call void @_ZdaPv(i8* %145) #11
  br label %146

146:                                              ; preds = %136, %140, %144
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %66) #12
  %147 = load i32, i32* %26, align 8
  %148 = icmp eq i32 %147, 9
  br i1 %148, label %149, label %740

149:                                              ; preds = %146
  br i1 %126, label %150, label %280

150:                                              ; preds = %149
  %151 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %151) #12
  br i1 %67, label %152, label %154

152:                                              ; preds = %150
  %153 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %153, align 8, !alias.scope !99
  br label %182

154:                                              ; preds = %150
  %155 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %156 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %155, align 8, !noalias !99
  %157 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %156, i64 0, i32 0
  %158 = load i32, i32* %157, align 4, !noalias !99
  %159 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %156, i64 0, i32 1, i64 0
  %160 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %158, i32* %160, align 8, !alias.scope !99
  %161 = icmp sgt i32 %158, 5
  br i1 %161, label %162, label %169

162:                                              ; preds = %154
  %163 = sext i32 %158 to i64
  %164 = shl nsw i64 %163, 2
  %165 = call i8* @_Znam(i64 %164) #11, !noalias !99
  %166 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %167 = bitcast i32** %166 to i8**
  store i8* %165, i8** %167, align 8, !alias.scope !99
  %168 = bitcast i8* %165 to i32*
  br label %174

169:                                              ; preds = %154
  %170 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %171 = bitcast %union.anon* %170 to i32*
  %172 = sext i32 %158 to i64
  %173 = shl nsw i64 %172, 2
  br label %174

174:                                              ; preds = %169, %162
  %175 = phi i64 [ %164, %162 ], [ %173, %169 ]
  %176 = phi i32* [ %168, %162 ], [ %171, %169 ]
  %177 = bitcast i32* %176 to i8*
  %178 = bitcast i32* %159 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %177, i8* align 4 %178, i64 %175, i1 false) #12
  %179 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %180 = bitcast %union.TfLitePtrUnion* %179 to i8**
  %181 = load i8*, i8** %180, align 8
  br label %182

182:                                              ; preds = %152, %174
  %183 = phi i8* [ %181, %174 ], [ null, %152 ]
  %184 = bitcast %"class.tflite::RuntimeShape"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %184) #12
  br i1 %97, label %185, label %187

185:                                              ; preds = %182
  %186 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 0, i32* %186, align 8, !alias.scope !102
  br label %215

187:                                              ; preds = %182
  %188 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %189 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %188, align 8, !noalias !102
  %190 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %189, i64 0, i32 0
  %191 = load i32, i32* %190, align 4, !noalias !102
  %192 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %189, i64 0, i32 1, i64 0
  %193 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 %191, i32* %193, align 8, !alias.scope !102
  %194 = icmp sgt i32 %191, 5
  br i1 %194, label %195, label %202

195:                                              ; preds = %187
  %196 = sext i32 %191 to i64
  %197 = shl nsw i64 %196, 2
  %198 = call i8* @_Znam(i64 %197) #11, !noalias !102
  %199 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %200 = bitcast i32** %199 to i8**
  store i8* %198, i8** %200, align 8, !alias.scope !102
  %201 = bitcast i8* %198 to i32*
  br label %207

202:                                              ; preds = %187
  %203 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1
  %204 = bitcast %union.anon* %203 to i32*
  %205 = sext i32 %191 to i64
  %206 = shl nsw i64 %205, 2
  br label %207

207:                                              ; preds = %202, %195
  %208 = phi i64 [ %197, %195 ], [ %206, %202 ]
  %209 = phi i32* [ %201, %195 ], [ %204, %202 ]
  %210 = bitcast i32* %209 to i8*
  %211 = bitcast i32* %192 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %210, i8* align 4 %211, i64 %208, i1 false) #12
  %212 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %213 = bitcast %union.TfLitePtrUnion* %212 to i8**
  %214 = load i8*, i8** %213, align 8
  br label %215

215:                                              ; preds = %185, %207
  %216 = phi i8* [ %214, %207 ], [ null, %185 ]
  %217 = bitcast %"class.tflite::RuntimeShape"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %217) #12
  %218 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %218, label %219, label %221

219:                                              ; preds = %215
  %220 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 0, i32* %220, align 8, !alias.scope !105
  br label %249

221:                                              ; preds = %215
  %222 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %223 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %222, align 8, !noalias !105
  %224 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %223, i64 0, i32 0
  %225 = load i32, i32* %224, align 4, !noalias !105
  %226 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %223, i64 0, i32 1, i64 0
  %227 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 %225, i32* %227, align 8, !alias.scope !105
  %228 = icmp sgt i32 %225, 5
  br i1 %228, label %229, label %236

229:                                              ; preds = %221
  %230 = sext i32 %225 to i64
  %231 = shl nsw i64 %230, 2
  %232 = call i8* @_Znam(i64 %231) #11, !noalias !105
  %233 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %234 = bitcast i32** %233 to i8**
  store i8* %232, i8** %234, align 8, !alias.scope !105
  %235 = bitcast i8* %232 to i32*
  br label %241

236:                                              ; preds = %221
  %237 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1
  %238 = bitcast %union.anon* %237 to i32*
  %239 = sext i32 %225 to i64
  %240 = shl nsw i64 %239, 2
  br label %241

241:                                              ; preds = %236, %229
  %242 = phi i64 [ %231, %229 ], [ %240, %236 ]
  %243 = phi i32* [ %235, %229 ], [ %238, %236 ]
  %244 = bitcast i32* %243 to i8*
  %245 = bitcast i32* %226 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %244, i8* align 4 %245, i64 %242, i1 false) #12
  %246 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %247 = bitcast %union.TfLitePtrUnion* %246 to i8**
  %248 = load i8*, i8** %247, align 8
  br label %249

249:                                              ; preds = %219, %241
  %250 = phi i8* [ %248, %241 ], [ null, %219 ]
  call void @_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa(%"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %8, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, i8* %183, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %12, i8* %216, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %13, i8* %250)
  %251 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  %252 = load i32, i32* %251, align 8
  %253 = icmp sgt i32 %252, 5
  br i1 %253, label %254, label %260

254:                                              ; preds = %249
  %255 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %256 = load i32*, i32** %255, align 8
  %257 = icmp eq i32* %256, null
  br i1 %257, label %260, label %258

258:                                              ; preds = %254
  %259 = bitcast i32* %256 to i8*
  call void @_ZdaPv(i8* %259) #11
  br label %260

260:                                              ; preds = %249, %254, %258
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %217) #12
  %261 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  %262 = load i32, i32* %261, align 8
  %263 = icmp sgt i32 %262, 5
  br i1 %263, label %264, label %270

264:                                              ; preds = %260
  %265 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %266 = load i32*, i32** %265, align 8
  %267 = icmp eq i32* %266, null
  br i1 %267, label %270, label %268

268:                                              ; preds = %264
  %269 = bitcast i32* %266 to i8*
  call void @_ZdaPv(i8* %269) #11
  br label %270

270:                                              ; preds = %260, %264, %268
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %184) #12
  %271 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %272 = load i32, i32* %271, align 8
  %273 = icmp sgt i32 %272, 5
  br i1 %273, label %274, label %1331

274:                                              ; preds = %270
  %275 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %276 = load i32*, i32** %275, align 8
  %277 = icmp eq i32* %276, null
  br i1 %277, label %1331, label %278

278:                                              ; preds = %274
  %279 = bitcast i32* %276 to i8*
  call void @_ZdaPv(i8* %279) #11
  br label %1331

280:                                              ; preds = %149
  %281 = bitcast %"class.tflite::RuntimeShape"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %281) #12
  br i1 %67, label %282, label %284

282:                                              ; preds = %280
  %283 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 0, i32* %283, align 8, !alias.scope !108
  br label %312

284:                                              ; preds = %280
  %285 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %286 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %285, align 8, !noalias !108
  %287 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %286, i64 0, i32 0
  %288 = load i32, i32* %287, align 4, !noalias !108
  %289 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %286, i64 0, i32 1, i64 0
  %290 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 %288, i32* %290, align 8, !alias.scope !108
  %291 = icmp sgt i32 %288, 5
  br i1 %291, label %292, label %299

292:                                              ; preds = %284
  %293 = sext i32 %288 to i64
  %294 = shl nsw i64 %293, 2
  %295 = call i8* @_Znam(i64 %294) #11, !noalias !108
  %296 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %297 = bitcast i32** %296 to i8**
  store i8* %295, i8** %297, align 8, !alias.scope !108
  %298 = bitcast i8* %295 to i32*
  br label %304

299:                                              ; preds = %284
  %300 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1
  %301 = bitcast %union.anon* %300 to i32*
  %302 = sext i32 %288 to i64
  %303 = shl nsw i64 %302, 2
  br label %304

304:                                              ; preds = %299, %292
  %305 = phi i64 [ %294, %292 ], [ %303, %299 ]
  %306 = phi i32* [ %298, %292 ], [ %301, %299 ]
  %307 = bitcast i32* %306 to i8*
  %308 = bitcast i32* %289 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %307, i8* align 4 %308, i64 %305, i1 false) #12
  %309 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %310 = bitcast %union.TfLitePtrUnion* %309 to i8**
  %311 = load i8*, i8** %310, align 8
  br label %312

312:                                              ; preds = %282, %304
  %313 = phi i32 [ %288, %304 ], [ 0, %282 ]
  %314 = phi i8* [ %311, %304 ], [ null, %282 ]
  %315 = bitcast %"class.tflite::RuntimeShape"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %315) #12
  br i1 %97, label %316, label %318

316:                                              ; preds = %312
  %317 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  store i32 0, i32* %317, align 8, !alias.scope !111
  br label %346

318:                                              ; preds = %312
  %319 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %320 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %319, align 8, !noalias !111
  %321 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %320, i64 0, i32 0
  %322 = load i32, i32* %321, align 4, !noalias !111
  %323 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %320, i64 0, i32 1, i64 0
  %324 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  store i32 %322, i32* %324, align 8, !alias.scope !111
  %325 = icmp sgt i32 %322, 5
  br i1 %325, label %326, label %333

326:                                              ; preds = %318
  %327 = sext i32 %322 to i64
  %328 = shl nsw i64 %327, 2
  %329 = call i8* @_Znam(i64 %328) #11, !noalias !111
  %330 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1, i32 0
  %331 = bitcast i32** %330 to i8**
  store i8* %329, i8** %331, align 8, !alias.scope !111
  %332 = bitcast i8* %329 to i32*
  br label %338

333:                                              ; preds = %318
  %334 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1
  %335 = bitcast %union.anon* %334 to i32*
  %336 = sext i32 %322 to i64
  %337 = shl nsw i64 %336, 2
  br label %338

338:                                              ; preds = %333, %326
  %339 = phi i64 [ %328, %326 ], [ %337, %333 ]
  %340 = phi i32* [ %332, %326 ], [ %335, %333 ]
  %341 = bitcast i32* %340 to i8*
  %342 = bitcast i32* %323 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %341, i8* align 4 %342, i64 %339, i1 false) #12
  %343 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %344 = bitcast %union.TfLitePtrUnion* %343 to i8**
  %345 = load i8*, i8** %344, align 8
  br label %346

346:                                              ; preds = %316, %338
  %347 = phi i32 [ %322, %338 ], [ 0, %316 ]
  %348 = phi i8* [ %345, %338 ], [ null, %316 ]
  %349 = bitcast %"class.tflite::RuntimeShape"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %349) #12
  %350 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %350, label %351, label %353

351:                                              ; preds = %346
  %352 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 0
  store i32 0, i32* %352, align 8, !alias.scope !114
  br label %381

353:                                              ; preds = %346
  %354 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %355 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %354, align 8, !noalias !114
  %356 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %355, i64 0, i32 0
  %357 = load i32, i32* %356, align 4, !noalias !114
  %358 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %355, i64 0, i32 1, i64 0
  %359 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 0
  store i32 %357, i32* %359, align 8, !alias.scope !114
  %360 = icmp sgt i32 %357, 5
  br i1 %360, label %361, label %368

361:                                              ; preds = %353
  %362 = sext i32 %357 to i64
  %363 = shl nsw i64 %362, 2
  %364 = call i8* @_Znam(i64 %363) #11, !noalias !114
  %365 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1, i32 0
  %366 = bitcast i32** %365 to i8**
  store i8* %364, i8** %366, align 8, !alias.scope !114
  %367 = bitcast i8* %364 to i32*
  br label %373

368:                                              ; preds = %353
  %369 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1
  %370 = bitcast %union.anon* %369 to i32*
  %371 = sext i32 %357 to i64
  %372 = shl nsw i64 %371, 2
  br label %373

373:                                              ; preds = %368, %361
  %374 = phi i64 [ %363, %361 ], [ %372, %368 ]
  %375 = phi i32* [ %367, %361 ], [ %370, %368 ]
  %376 = bitcast i32* %375 to i8*
  %377 = bitcast i32* %358 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %376, i8* align 4 %377, i64 %374, i1 false) #12
  %378 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %379 = bitcast %union.TfLitePtrUnion* %378 to i8**
  %380 = load i8*, i8** %379, align 8
  br label %381

381:                                              ; preds = %351, %373
  %382 = phi i32 [ %357, %373 ], [ 0, %351 ]
  %383 = phi i8* [ %380, %373 ], [ null, %351 ]
  %384 = icmp sgt i32 %313, 5
  %385 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1
  br i1 %384, label %386, label %389

386:                                              ; preds = %381
  %387 = getelementptr inbounds %union.anon, %union.anon* %385, i64 0, i32 0
  %388 = load i32*, i32** %387, align 8
  br label %392

389:                                              ; preds = %381
  %390 = bitcast %union.anon* %385 to i32*
  %391 = icmp sgt i32 %313, 0
  br i1 %391, label %392, label %492

392:                                              ; preds = %389, %386
  %393 = phi i32* [ %388, %386 ], [ %390, %389 ]
  %394 = zext i32 %313 to i64
  %395 = icmp ult i32 %313, 8
  br i1 %395, label %481, label %396

396:                                              ; preds = %392
  %397 = and i64 %394, 4294967288
  %398 = add nsw i64 %397, -8
  %399 = lshr exact i64 %398, 3
  %400 = add nuw nsw i64 %399, 1
  %401 = and i64 %400, 3
  %402 = icmp ult i64 %398, 24
  br i1 %402, label %448, label %403

403:                                              ; preds = %396
  %404 = sub nsw i64 %400, %401
  br label %405

405:                                              ; preds = %405, %403
  %406 = phi i64 [ 0, %403 ], [ %445, %405 ]
  %407 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %403 ], [ %443, %405 ]
  %408 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %403 ], [ %444, %405 ]
  %409 = phi i64 [ %404, %403 ], [ %446, %405 ]
  %410 = getelementptr inbounds i32, i32* %393, i64 %406
  %411 = bitcast i32* %410 to <4 x i32>*
  %412 = load <4 x i32>, <4 x i32>* %411, align 4
  %413 = getelementptr inbounds i32, i32* %410, i64 4
  %414 = bitcast i32* %413 to <4 x i32>*
  %415 = load <4 x i32>, <4 x i32>* %414, align 4
  %416 = mul nsw <4 x i32> %412, %407
  %417 = mul nsw <4 x i32> %415, %408
  %418 = or i64 %406, 8
  %419 = getelementptr inbounds i32, i32* %393, i64 %418
  %420 = bitcast i32* %419 to <4 x i32>*
  %421 = load <4 x i32>, <4 x i32>* %420, align 4
  %422 = getelementptr inbounds i32, i32* %419, i64 4
  %423 = bitcast i32* %422 to <4 x i32>*
  %424 = load <4 x i32>, <4 x i32>* %423, align 4
  %425 = mul nsw <4 x i32> %421, %416
  %426 = mul nsw <4 x i32> %424, %417
  %427 = or i64 %406, 16
  %428 = getelementptr inbounds i32, i32* %393, i64 %427
  %429 = bitcast i32* %428 to <4 x i32>*
  %430 = load <4 x i32>, <4 x i32>* %429, align 4
  %431 = getelementptr inbounds i32, i32* %428, i64 4
  %432 = bitcast i32* %431 to <4 x i32>*
  %433 = load <4 x i32>, <4 x i32>* %432, align 4
  %434 = mul nsw <4 x i32> %430, %425
  %435 = mul nsw <4 x i32> %433, %426
  %436 = or i64 %406, 24
  %437 = getelementptr inbounds i32, i32* %393, i64 %436
  %438 = bitcast i32* %437 to <4 x i32>*
  %439 = load <4 x i32>, <4 x i32>* %438, align 4
  %440 = getelementptr inbounds i32, i32* %437, i64 4
  %441 = bitcast i32* %440 to <4 x i32>*
  %442 = load <4 x i32>, <4 x i32>* %441, align 4
  %443 = mul nsw <4 x i32> %439, %434
  %444 = mul nsw <4 x i32> %442, %435
  %445 = add i64 %406, 32
  %446 = add i64 %409, -4
  %447 = icmp eq i64 %446, 0
  br i1 %447, label %448, label %405, !llvm.loop !117

448:                                              ; preds = %405, %396
  %449 = phi <4 x i32> [ undef, %396 ], [ %443, %405 ]
  %450 = phi <4 x i32> [ undef, %396 ], [ %444, %405 ]
  %451 = phi i64 [ 0, %396 ], [ %445, %405 ]
  %452 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %396 ], [ %443, %405 ]
  %453 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %396 ], [ %444, %405 ]
  %454 = icmp eq i64 %401, 0
  br i1 %454, label %471, label %455

455:                                              ; preds = %448, %455
  %456 = phi i64 [ %468, %455 ], [ %451, %448 ]
  %457 = phi <4 x i32> [ %466, %455 ], [ %452, %448 ]
  %458 = phi <4 x i32> [ %467, %455 ], [ %453, %448 ]
  %459 = phi i64 [ %469, %455 ], [ %401, %448 ]
  %460 = getelementptr inbounds i32, i32* %393, i64 %456
  %461 = bitcast i32* %460 to <4 x i32>*
  %462 = load <4 x i32>, <4 x i32>* %461, align 4
  %463 = getelementptr inbounds i32, i32* %460, i64 4
  %464 = bitcast i32* %463 to <4 x i32>*
  %465 = load <4 x i32>, <4 x i32>* %464, align 4
  %466 = mul nsw <4 x i32> %462, %457
  %467 = mul nsw <4 x i32> %465, %458
  %468 = add i64 %456, 8
  %469 = add i64 %459, -1
  %470 = icmp eq i64 %469, 0
  br i1 %470, label %471, label %455, !llvm.loop !118

471:                                              ; preds = %455, %448
  %472 = phi <4 x i32> [ %449, %448 ], [ %466, %455 ]
  %473 = phi <4 x i32> [ %450, %448 ], [ %467, %455 ]
  %474 = mul <4 x i32> %473, %472
  %475 = shufflevector <4 x i32> %474, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %476 = mul <4 x i32> %474, %475
  %477 = shufflevector <4 x i32> %476, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %478 = mul <4 x i32> %476, %477
  %479 = extractelement <4 x i32> %478, i32 0
  %480 = icmp eq i64 %397, %394
  br i1 %480, label %492, label %481

481:                                              ; preds = %471, %392
  %482 = phi i64 [ 0, %392 ], [ %397, %471 ]
  %483 = phi i32 [ 1, %392 ], [ %479, %471 ]
  br label %484

484:                                              ; preds = %481, %484
  %485 = phi i64 [ %490, %484 ], [ %482, %481 ]
  %486 = phi i32 [ %489, %484 ], [ %483, %481 ]
  %487 = getelementptr inbounds i32, i32* %393, i64 %485
  %488 = load i32, i32* %487, align 4
  %489 = mul nsw i32 %488, %486
  %490 = add nuw nsw i64 %485, 1
  %491 = icmp eq i64 %490, %394
  br i1 %491, label %492, label %484, !llvm.loop !119

492:                                              ; preds = %484, %471, %389
  %493 = phi i32 [ 1, %389 ], [ %479, %471 ], [ %489, %484 ]
  %494 = icmp sgt i32 %347, 5
  %495 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1
  br i1 %494, label %496, label %499

496:                                              ; preds = %492
  %497 = getelementptr inbounds %union.anon, %union.anon* %495, i64 0, i32 0
  %498 = load i32*, i32** %497, align 8
  br label %502

499:                                              ; preds = %492
  %500 = bitcast %union.anon* %495 to i32*
  %501 = icmp sgt i32 %347, 0
  br i1 %501, label %502, label %602

502:                                              ; preds = %499, %496
  %503 = phi i32* [ %498, %496 ], [ %500, %499 ]
  %504 = zext i32 %347 to i64
  %505 = icmp ult i32 %347, 8
  br i1 %505, label %591, label %506

506:                                              ; preds = %502
  %507 = and i64 %504, 4294967288
  %508 = add nsw i64 %507, -8
  %509 = lshr exact i64 %508, 3
  %510 = add nuw nsw i64 %509, 1
  %511 = and i64 %510, 3
  %512 = icmp ult i64 %508, 24
  br i1 %512, label %558, label %513

513:                                              ; preds = %506
  %514 = sub nsw i64 %510, %511
  br label %515

515:                                              ; preds = %515, %513
  %516 = phi i64 [ 0, %513 ], [ %555, %515 ]
  %517 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %513 ], [ %553, %515 ]
  %518 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %513 ], [ %554, %515 ]
  %519 = phi i64 [ %514, %513 ], [ %556, %515 ]
  %520 = getelementptr inbounds i32, i32* %503, i64 %516
  %521 = bitcast i32* %520 to <4 x i32>*
  %522 = load <4 x i32>, <4 x i32>* %521, align 4
  %523 = getelementptr inbounds i32, i32* %520, i64 4
  %524 = bitcast i32* %523 to <4 x i32>*
  %525 = load <4 x i32>, <4 x i32>* %524, align 4
  %526 = mul nsw <4 x i32> %522, %517
  %527 = mul nsw <4 x i32> %525, %518
  %528 = or i64 %516, 8
  %529 = getelementptr inbounds i32, i32* %503, i64 %528
  %530 = bitcast i32* %529 to <4 x i32>*
  %531 = load <4 x i32>, <4 x i32>* %530, align 4
  %532 = getelementptr inbounds i32, i32* %529, i64 4
  %533 = bitcast i32* %532 to <4 x i32>*
  %534 = load <4 x i32>, <4 x i32>* %533, align 4
  %535 = mul nsw <4 x i32> %531, %526
  %536 = mul nsw <4 x i32> %534, %527
  %537 = or i64 %516, 16
  %538 = getelementptr inbounds i32, i32* %503, i64 %537
  %539 = bitcast i32* %538 to <4 x i32>*
  %540 = load <4 x i32>, <4 x i32>* %539, align 4
  %541 = getelementptr inbounds i32, i32* %538, i64 4
  %542 = bitcast i32* %541 to <4 x i32>*
  %543 = load <4 x i32>, <4 x i32>* %542, align 4
  %544 = mul nsw <4 x i32> %540, %535
  %545 = mul nsw <4 x i32> %543, %536
  %546 = or i64 %516, 24
  %547 = getelementptr inbounds i32, i32* %503, i64 %546
  %548 = bitcast i32* %547 to <4 x i32>*
  %549 = load <4 x i32>, <4 x i32>* %548, align 4
  %550 = getelementptr inbounds i32, i32* %547, i64 4
  %551 = bitcast i32* %550 to <4 x i32>*
  %552 = load <4 x i32>, <4 x i32>* %551, align 4
  %553 = mul nsw <4 x i32> %549, %544
  %554 = mul nsw <4 x i32> %552, %545
  %555 = add i64 %516, 32
  %556 = add i64 %519, -4
  %557 = icmp eq i64 %556, 0
  br i1 %557, label %558, label %515, !llvm.loop !120

558:                                              ; preds = %515, %506
  %559 = phi <4 x i32> [ undef, %506 ], [ %553, %515 ]
  %560 = phi <4 x i32> [ undef, %506 ], [ %554, %515 ]
  %561 = phi i64 [ 0, %506 ], [ %555, %515 ]
  %562 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %506 ], [ %553, %515 ]
  %563 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %506 ], [ %554, %515 ]
  %564 = icmp eq i64 %511, 0
  br i1 %564, label %581, label %565

565:                                              ; preds = %558, %565
  %566 = phi i64 [ %578, %565 ], [ %561, %558 ]
  %567 = phi <4 x i32> [ %576, %565 ], [ %562, %558 ]
  %568 = phi <4 x i32> [ %577, %565 ], [ %563, %558 ]
  %569 = phi i64 [ %579, %565 ], [ %511, %558 ]
  %570 = getelementptr inbounds i32, i32* %503, i64 %566
  %571 = bitcast i32* %570 to <4 x i32>*
  %572 = load <4 x i32>, <4 x i32>* %571, align 4
  %573 = getelementptr inbounds i32, i32* %570, i64 4
  %574 = bitcast i32* %573 to <4 x i32>*
  %575 = load <4 x i32>, <4 x i32>* %574, align 4
  %576 = mul nsw <4 x i32> %572, %567
  %577 = mul nsw <4 x i32> %575, %568
  %578 = add i64 %566, 8
  %579 = add i64 %569, -1
  %580 = icmp eq i64 %579, 0
  br i1 %580, label %581, label %565, !llvm.loop !121

581:                                              ; preds = %565, %558
  %582 = phi <4 x i32> [ %559, %558 ], [ %576, %565 ]
  %583 = phi <4 x i32> [ %560, %558 ], [ %577, %565 ]
  %584 = mul <4 x i32> %583, %582
  %585 = shufflevector <4 x i32> %584, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %586 = mul <4 x i32> %584, %585
  %587 = shufflevector <4 x i32> %586, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %588 = mul <4 x i32> %586, %587
  %589 = extractelement <4 x i32> %588, i32 0
  %590 = icmp eq i64 %507, %504
  br i1 %590, label %602, label %591

591:                                              ; preds = %581, %502
  %592 = phi i64 [ 0, %502 ], [ %507, %581 ]
  %593 = phi i32 [ 1, %502 ], [ %589, %581 ]
  br label %594

594:                                              ; preds = %591, %594
  %595 = phi i64 [ %600, %594 ], [ %592, %591 ]
  %596 = phi i32 [ %599, %594 ], [ %593, %591 ]
  %597 = getelementptr inbounds i32, i32* %503, i64 %595
  %598 = load i32, i32* %597, align 4
  %599 = mul nsw i32 %598, %596
  %600 = add nuw nsw i64 %595, 1
  %601 = icmp eq i64 %600, %504
  br i1 %601, label %602, label %594, !llvm.loop !122

602:                                              ; preds = %594, %581, %499
  %603 = phi i32 [ 1, %499 ], [ %589, %581 ], [ %599, %594 ]
  %604 = icmp sgt i32 %382, 5
  %605 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1
  br i1 %604, label %606, label %609

606:                                              ; preds = %602
  %607 = getelementptr inbounds %union.anon, %union.anon* %605, i64 0, i32 0
  %608 = load i32*, i32** %607, align 8
  br label %612

609:                                              ; preds = %602
  %610 = bitcast %union.anon* %605 to i32*
  %611 = icmp sgt i32 %382, 0
  br i1 %611, label %612, label %712

612:                                              ; preds = %609, %606
  %613 = phi i32* [ %608, %606 ], [ %610, %609 ]
  %614 = zext i32 %382 to i64
  %615 = icmp ult i32 %382, 8
  br i1 %615, label %701, label %616

616:                                              ; preds = %612
  %617 = and i64 %614, 4294967288
  %618 = add nsw i64 %617, -8
  %619 = lshr exact i64 %618, 3
  %620 = add nuw nsw i64 %619, 1
  %621 = and i64 %620, 3
  %622 = icmp ult i64 %618, 24
  br i1 %622, label %668, label %623

623:                                              ; preds = %616
  %624 = sub nsw i64 %620, %621
  br label %625

625:                                              ; preds = %625, %623
  %626 = phi i64 [ 0, %623 ], [ %665, %625 ]
  %627 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %623 ], [ %663, %625 ]
  %628 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %623 ], [ %664, %625 ]
  %629 = phi i64 [ %624, %623 ], [ %666, %625 ]
  %630 = getelementptr inbounds i32, i32* %613, i64 %626
  %631 = bitcast i32* %630 to <4 x i32>*
  %632 = load <4 x i32>, <4 x i32>* %631, align 4
  %633 = getelementptr inbounds i32, i32* %630, i64 4
  %634 = bitcast i32* %633 to <4 x i32>*
  %635 = load <4 x i32>, <4 x i32>* %634, align 4
  %636 = mul nsw <4 x i32> %632, %627
  %637 = mul nsw <4 x i32> %635, %628
  %638 = or i64 %626, 8
  %639 = getelementptr inbounds i32, i32* %613, i64 %638
  %640 = bitcast i32* %639 to <4 x i32>*
  %641 = load <4 x i32>, <4 x i32>* %640, align 4
  %642 = getelementptr inbounds i32, i32* %639, i64 4
  %643 = bitcast i32* %642 to <4 x i32>*
  %644 = load <4 x i32>, <4 x i32>* %643, align 4
  %645 = mul nsw <4 x i32> %641, %636
  %646 = mul nsw <4 x i32> %644, %637
  %647 = or i64 %626, 16
  %648 = getelementptr inbounds i32, i32* %613, i64 %647
  %649 = bitcast i32* %648 to <4 x i32>*
  %650 = load <4 x i32>, <4 x i32>* %649, align 4
  %651 = getelementptr inbounds i32, i32* %648, i64 4
  %652 = bitcast i32* %651 to <4 x i32>*
  %653 = load <4 x i32>, <4 x i32>* %652, align 4
  %654 = mul nsw <4 x i32> %650, %645
  %655 = mul nsw <4 x i32> %653, %646
  %656 = or i64 %626, 24
  %657 = getelementptr inbounds i32, i32* %613, i64 %656
  %658 = bitcast i32* %657 to <4 x i32>*
  %659 = load <4 x i32>, <4 x i32>* %658, align 4
  %660 = getelementptr inbounds i32, i32* %657, i64 4
  %661 = bitcast i32* %660 to <4 x i32>*
  %662 = load <4 x i32>, <4 x i32>* %661, align 4
  %663 = mul nsw <4 x i32> %659, %654
  %664 = mul nsw <4 x i32> %662, %655
  %665 = add i64 %626, 32
  %666 = add i64 %629, -4
  %667 = icmp eq i64 %666, 0
  br i1 %667, label %668, label %625, !llvm.loop !123

668:                                              ; preds = %625, %616
  %669 = phi <4 x i32> [ undef, %616 ], [ %663, %625 ]
  %670 = phi <4 x i32> [ undef, %616 ], [ %664, %625 ]
  %671 = phi i64 [ 0, %616 ], [ %665, %625 ]
  %672 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %616 ], [ %663, %625 ]
  %673 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %616 ], [ %664, %625 ]
  %674 = icmp eq i64 %621, 0
  br i1 %674, label %691, label %675

675:                                              ; preds = %668, %675
  %676 = phi i64 [ %688, %675 ], [ %671, %668 ]
  %677 = phi <4 x i32> [ %686, %675 ], [ %672, %668 ]
  %678 = phi <4 x i32> [ %687, %675 ], [ %673, %668 ]
  %679 = phi i64 [ %689, %675 ], [ %621, %668 ]
  %680 = getelementptr inbounds i32, i32* %613, i64 %676
  %681 = bitcast i32* %680 to <4 x i32>*
  %682 = load <4 x i32>, <4 x i32>* %681, align 4
  %683 = getelementptr inbounds i32, i32* %680, i64 4
  %684 = bitcast i32* %683 to <4 x i32>*
  %685 = load <4 x i32>, <4 x i32>* %684, align 4
  %686 = mul nsw <4 x i32> %682, %677
  %687 = mul nsw <4 x i32> %685, %678
  %688 = add i64 %676, 8
  %689 = add i64 %679, -1
  %690 = icmp eq i64 %689, 0
  br i1 %690, label %691, label %675, !llvm.loop !124

691:                                              ; preds = %675, %668
  %692 = phi <4 x i32> [ %669, %668 ], [ %686, %675 ]
  %693 = phi <4 x i32> [ %670, %668 ], [ %687, %675 ]
  %694 = mul <4 x i32> %693, %692
  %695 = shufflevector <4 x i32> %694, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %696 = mul <4 x i32> %694, %695
  %697 = shufflevector <4 x i32> %696, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %698 = mul <4 x i32> %696, %697
  %699 = extractelement <4 x i32> %698, i32 0
  %700 = icmp eq i64 %617, %614
  br i1 %700, label %712, label %701

701:                                              ; preds = %691, %612
  %702 = phi i64 [ 0, %612 ], [ %617, %691 ]
  %703 = phi i32 [ 1, %612 ], [ %699, %691 ]
  br label %704

704:                                              ; preds = %701, %704
  %705 = phi i64 [ %710, %704 ], [ %702, %701 ]
  %706 = phi i32 [ %709, %704 ], [ %703, %701 ]
  %707 = getelementptr inbounds i32, i32* %613, i64 %705
  %708 = load i32, i32* %707, align 4
  %709 = mul nsw i32 %708, %706
  %710 = add nuw nsw i64 %705, 1
  %711 = icmp eq i64 %710, %614
  br i1 %711, label %712, label %704, !llvm.loop !125

712:                                              ; preds = %704, %691, %609
  %713 = phi i32 [ 1, %609 ], [ %699, %691 ], [ %709, %704 ]
  %714 = icmp eq i32 %493, %603
  br i1 %714, label %716, label %715

715:                                              ; preds = %712
  call void @abort() #13
  unreachable

716:                                              ; preds = %712
  %717 = icmp eq i32 %493, %713
  br i1 %717, label %719, label %718

718:                                              ; preds = %716
  call void @abort() #13
  unreachable

719:                                              ; preds = %716
  call void @_ZN6tflite21reference_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa(i32 %493, %"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %8, i8* %314, i8* %348, i8* %383) #12
  br i1 %604, label %720, label %726

720:                                              ; preds = %719
  %721 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1, i32 0
  %722 = load i32*, i32** %721, align 8
  %723 = icmp eq i32* %722, null
  br i1 %723, label %726, label %724

724:                                              ; preds = %720
  %725 = bitcast i32* %722 to i8*
  call void @_ZdaPv(i8* %725) #11
  br label %726

726:                                              ; preds = %719, %720, %724
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %349) #12
  br i1 %494, label %727, label %733

727:                                              ; preds = %726
  %728 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1, i32 0
  %729 = load i32*, i32** %728, align 8
  %730 = icmp eq i32* %729, null
  br i1 %730, label %733, label %731

731:                                              ; preds = %727
  %732 = bitcast i32* %729 to i8*
  call void @_ZdaPv(i8* %732) #11
  br label %733

733:                                              ; preds = %726, %727, %731
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %315) #12
  br i1 %384, label %734, label %1331

734:                                              ; preds = %733
  %735 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %736 = load i32*, i32** %735, align 8
  %737 = icmp eq i32* %736, null
  br i1 %737, label %1331, label %738

738:                                              ; preds = %734
  %739 = bitcast i32* %736 to i8*
  call void @_ZdaPv(i8* %739) #11
  br label %1331

740:                                              ; preds = %146
  br i1 %126, label %741, label %871

741:                                              ; preds = %740
  %742 = bitcast %"class.tflite::RuntimeShape"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %742) #12
  br i1 %67, label %743, label %745

743:                                              ; preds = %741
  %744 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 0
  store i32 0, i32* %744, align 8, !alias.scope !126
  br label %773

745:                                              ; preds = %741
  %746 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %747 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %746, align 8, !noalias !126
  %748 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %747, i64 0, i32 0
  %749 = load i32, i32* %748, align 4, !noalias !126
  %750 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %747, i64 0, i32 1, i64 0
  %751 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 0
  store i32 %749, i32* %751, align 8, !alias.scope !126
  %752 = icmp sgt i32 %749, 5
  br i1 %752, label %753, label %760

753:                                              ; preds = %745
  %754 = sext i32 %749 to i64
  %755 = shl nsw i64 %754, 2
  %756 = call i8* @_Znam(i64 %755) #11, !noalias !126
  %757 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1, i32 0
  %758 = bitcast i32** %757 to i8**
  store i8* %756, i8** %758, align 8, !alias.scope !126
  %759 = bitcast i8* %756 to i32*
  br label %765

760:                                              ; preds = %745
  %761 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1
  %762 = bitcast %union.anon* %761 to i32*
  %763 = sext i32 %749 to i64
  %764 = shl nsw i64 %763, 2
  br label %765

765:                                              ; preds = %760, %753
  %766 = phi i64 [ %755, %753 ], [ %764, %760 ]
  %767 = phi i32* [ %759, %753 ], [ %762, %760 ]
  %768 = bitcast i32* %767 to i8*
  %769 = bitcast i32* %750 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %768, i8* align 4 %769, i64 %766, i1 false) #12
  %770 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %771 = bitcast %union.TfLitePtrUnion* %770 to i8**
  %772 = load i8*, i8** %771, align 8
  br label %773

773:                                              ; preds = %743, %765
  %774 = phi i8* [ %772, %765 ], [ null, %743 ]
  %775 = bitcast %"class.tflite::RuntimeShape"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %775) #12
  br i1 %97, label %776, label %778

776:                                              ; preds = %773
  %777 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 0
  store i32 0, i32* %777, align 8, !alias.scope !129
  br label %806

778:                                              ; preds = %773
  %779 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %780 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %779, align 8, !noalias !129
  %781 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %780, i64 0, i32 0
  %782 = load i32, i32* %781, align 4, !noalias !129
  %783 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %780, i64 0, i32 1, i64 0
  %784 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 0
  store i32 %782, i32* %784, align 8, !alias.scope !129
  %785 = icmp sgt i32 %782, 5
  br i1 %785, label %786, label %793

786:                                              ; preds = %778
  %787 = sext i32 %782 to i64
  %788 = shl nsw i64 %787, 2
  %789 = call i8* @_Znam(i64 %788) #11, !noalias !129
  %790 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1, i32 0
  %791 = bitcast i32** %790 to i8**
  store i8* %789, i8** %791, align 8, !alias.scope !129
  %792 = bitcast i8* %789 to i32*
  br label %798

793:                                              ; preds = %778
  %794 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1
  %795 = bitcast %union.anon* %794 to i32*
  %796 = sext i32 %782 to i64
  %797 = shl nsw i64 %796, 2
  br label %798

798:                                              ; preds = %793, %786
  %799 = phi i64 [ %788, %786 ], [ %797, %793 ]
  %800 = phi i32* [ %792, %786 ], [ %795, %793 ]
  %801 = bitcast i32* %800 to i8*
  %802 = bitcast i32* %783 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %801, i8* align 4 %802, i64 %799, i1 false) #12
  %803 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %804 = bitcast %union.TfLitePtrUnion* %803 to i8**
  %805 = load i8*, i8** %804, align 8
  br label %806

806:                                              ; preds = %776, %798
  %807 = phi i8* [ %805, %798 ], [ null, %776 ]
  %808 = bitcast %"class.tflite::RuntimeShape"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %808) #12
  %809 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %809, label %810, label %812

810:                                              ; preds = %806
  %811 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 0
  store i32 0, i32* %811, align 8, !alias.scope !132
  br label %840

812:                                              ; preds = %806
  %813 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %814 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %813, align 8, !noalias !132
  %815 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %814, i64 0, i32 0
  %816 = load i32, i32* %815, align 4, !noalias !132
  %817 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %814, i64 0, i32 1, i64 0
  %818 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 0
  store i32 %816, i32* %818, align 8, !alias.scope !132
  %819 = icmp sgt i32 %816, 5
  br i1 %819, label %820, label %827

820:                                              ; preds = %812
  %821 = sext i32 %816 to i64
  %822 = shl nsw i64 %821, 2
  %823 = call i8* @_Znam(i64 %822) #11, !noalias !132
  %824 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 1, i32 0
  %825 = bitcast i32** %824 to i8**
  store i8* %823, i8** %825, align 8, !alias.scope !132
  %826 = bitcast i8* %823 to i32*
  br label %832

827:                                              ; preds = %812
  %828 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 1
  %829 = bitcast %union.anon* %828 to i32*
  %830 = sext i32 %816 to i64
  %831 = shl nsw i64 %830, 2
  br label %832

832:                                              ; preds = %827, %820
  %833 = phi i64 [ %822, %820 ], [ %831, %827 ]
  %834 = phi i32* [ %826, %820 ], [ %829, %827 ]
  %835 = bitcast i32* %834 to i8*
  %836 = bitcast i32* %817 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %835, i8* align 4 %836, i64 %833, i1 false) #12
  %837 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %838 = bitcast %union.TfLitePtrUnion* %837 to i8**
  %839 = load i8*, i8** %838, align 8
  br label %840

840:                                              ; preds = %810, %832
  %841 = phi i8* [ %839, %832 ], [ null, %810 ]
  call void @_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph(%"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %8, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %17, i8* %774, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %18, i8* %807, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %19, i8* %841)
  %842 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 0
  %843 = load i32, i32* %842, align 8
  %844 = icmp sgt i32 %843, 5
  br i1 %844, label %845, label %851

845:                                              ; preds = %840
  %846 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 1, i32 0
  %847 = load i32*, i32** %846, align 8
  %848 = icmp eq i32* %847, null
  br i1 %848, label %851, label %849

849:                                              ; preds = %845
  %850 = bitcast i32* %847 to i8*
  call void @_ZdaPv(i8* %850) #11
  br label %851

851:                                              ; preds = %840, %845, %849
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %808) #12
  %852 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 0
  %853 = load i32, i32* %852, align 8
  %854 = icmp sgt i32 %853, 5
  br i1 %854, label %855, label %861

855:                                              ; preds = %851
  %856 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1, i32 0
  %857 = load i32*, i32** %856, align 8
  %858 = icmp eq i32* %857, null
  br i1 %858, label %861, label %859

859:                                              ; preds = %855
  %860 = bitcast i32* %857 to i8*
  call void @_ZdaPv(i8* %860) #11
  br label %861

861:                                              ; preds = %851, %855, %859
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %775) #12
  %862 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 0
  %863 = load i32, i32* %862, align 8
  %864 = icmp sgt i32 %863, 5
  br i1 %864, label %865, label %1331

865:                                              ; preds = %861
  %866 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1, i32 0
  %867 = load i32*, i32** %866, align 8
  %868 = icmp eq i32* %867, null
  br i1 %868, label %1331, label %869

869:                                              ; preds = %865
  %870 = bitcast i32* %867 to i8*
  call void @_ZdaPv(i8* %870) #11
  br label %1331

871:                                              ; preds = %740
  %872 = bitcast %"class.tflite::RuntimeShape"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %872) #12
  br i1 %67, label %873, label %875

873:                                              ; preds = %871
  %874 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 0
  store i32 0, i32* %874, align 8, !alias.scope !135
  br label %903

875:                                              ; preds = %871
  %876 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %877 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %876, align 8, !noalias !135
  %878 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %877, i64 0, i32 0
  %879 = load i32, i32* %878, align 4, !noalias !135
  %880 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %877, i64 0, i32 1, i64 0
  %881 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 0
  store i32 %879, i32* %881, align 8, !alias.scope !135
  %882 = icmp sgt i32 %879, 5
  br i1 %882, label %883, label %890

883:                                              ; preds = %875
  %884 = sext i32 %879 to i64
  %885 = shl nsw i64 %884, 2
  %886 = call i8* @_Znam(i64 %885) #11, !noalias !135
  %887 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1, i32 0
  %888 = bitcast i32** %887 to i8**
  store i8* %886, i8** %888, align 8, !alias.scope !135
  %889 = bitcast i8* %886 to i32*
  br label %895

890:                                              ; preds = %875
  %891 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1
  %892 = bitcast %union.anon* %891 to i32*
  %893 = sext i32 %879 to i64
  %894 = shl nsw i64 %893, 2
  br label %895

895:                                              ; preds = %890, %883
  %896 = phi i64 [ %885, %883 ], [ %894, %890 ]
  %897 = phi i32* [ %889, %883 ], [ %892, %890 ]
  %898 = bitcast i32* %897 to i8*
  %899 = bitcast i32* %880 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %898, i8* align 4 %899, i64 %896, i1 false) #12
  %900 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %901 = bitcast %union.TfLitePtrUnion* %900 to i8**
  %902 = load i8*, i8** %901, align 8
  br label %903

903:                                              ; preds = %873, %895
  %904 = phi i32 [ %879, %895 ], [ 0, %873 ]
  %905 = phi i8* [ %902, %895 ], [ null, %873 ]
  %906 = bitcast %"class.tflite::RuntimeShape"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %906) #12
  br i1 %97, label %907, label %909

907:                                              ; preds = %903
  %908 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 0
  store i32 0, i32* %908, align 8, !alias.scope !138
  br label %937

909:                                              ; preds = %903
  %910 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %911 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %910, align 8, !noalias !138
  %912 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %911, i64 0, i32 0
  %913 = load i32, i32* %912, align 4, !noalias !138
  %914 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %911, i64 0, i32 1, i64 0
  %915 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 0
  store i32 %913, i32* %915, align 8, !alias.scope !138
  %916 = icmp sgt i32 %913, 5
  br i1 %916, label %917, label %924

917:                                              ; preds = %909
  %918 = sext i32 %913 to i64
  %919 = shl nsw i64 %918, 2
  %920 = call i8* @_Znam(i64 %919) #11, !noalias !138
  %921 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1, i32 0
  %922 = bitcast i32** %921 to i8**
  store i8* %920, i8** %922, align 8, !alias.scope !138
  %923 = bitcast i8* %920 to i32*
  br label %929

924:                                              ; preds = %909
  %925 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1
  %926 = bitcast %union.anon* %925 to i32*
  %927 = sext i32 %913 to i64
  %928 = shl nsw i64 %927, 2
  br label %929

929:                                              ; preds = %924, %917
  %930 = phi i64 [ %919, %917 ], [ %928, %924 ]
  %931 = phi i32* [ %923, %917 ], [ %926, %924 ]
  %932 = bitcast i32* %931 to i8*
  %933 = bitcast i32* %914 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %932, i8* align 4 %933, i64 %930, i1 false) #12
  %934 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %935 = bitcast %union.TfLitePtrUnion* %934 to i8**
  %936 = load i8*, i8** %935, align 8
  br label %937

937:                                              ; preds = %907, %929
  %938 = phi i32 [ %913, %929 ], [ 0, %907 ]
  %939 = phi i8* [ %936, %929 ], [ null, %907 ]
  %940 = bitcast %"class.tflite::RuntimeShape"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %940) #12
  %941 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %941, label %942, label %944

942:                                              ; preds = %937
  %943 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 0
  store i32 0, i32* %943, align 8, !alias.scope !141
  br label %972

944:                                              ; preds = %937
  %945 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %946 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %945, align 8, !noalias !141
  %947 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %946, i64 0, i32 0
  %948 = load i32, i32* %947, align 4, !noalias !141
  %949 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %946, i64 0, i32 1, i64 0
  %950 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 0
  store i32 %948, i32* %950, align 8, !alias.scope !141
  %951 = icmp sgt i32 %948, 5
  br i1 %951, label %952, label %959

952:                                              ; preds = %944
  %953 = sext i32 %948 to i64
  %954 = shl nsw i64 %953, 2
  %955 = call i8* @_Znam(i64 %954) #11, !noalias !141
  %956 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1, i32 0
  %957 = bitcast i32** %956 to i8**
  store i8* %955, i8** %957, align 8, !alias.scope !141
  %958 = bitcast i8* %955 to i32*
  br label %964

959:                                              ; preds = %944
  %960 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1
  %961 = bitcast %union.anon* %960 to i32*
  %962 = sext i32 %948 to i64
  %963 = shl nsw i64 %962, 2
  br label %964

964:                                              ; preds = %959, %952
  %965 = phi i64 [ %954, %952 ], [ %963, %959 ]
  %966 = phi i32* [ %958, %952 ], [ %961, %959 ]
  %967 = bitcast i32* %966 to i8*
  %968 = bitcast i32* %949 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %967, i8* align 4 %968, i64 %965, i1 false) #12
  %969 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %970 = bitcast %union.TfLitePtrUnion* %969 to i8**
  %971 = load i8*, i8** %970, align 8
  br label %972

972:                                              ; preds = %942, %964
  %973 = phi i32 [ %948, %964 ], [ 0, %942 ]
  %974 = phi i8* [ %971, %964 ], [ null, %942 ]
  %975 = icmp sgt i32 %904, 5
  %976 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1
  br i1 %975, label %977, label %980

977:                                              ; preds = %972
  %978 = getelementptr inbounds %union.anon, %union.anon* %976, i64 0, i32 0
  %979 = load i32*, i32** %978, align 8
  br label %983

980:                                              ; preds = %972
  %981 = bitcast %union.anon* %976 to i32*
  %982 = icmp sgt i32 %904, 0
  br i1 %982, label %983, label %1083

983:                                              ; preds = %980, %977
  %984 = phi i32* [ %979, %977 ], [ %981, %980 ]
  %985 = zext i32 %904 to i64
  %986 = icmp ult i32 %904, 8
  br i1 %986, label %1072, label %987

987:                                              ; preds = %983
  %988 = and i64 %985, 4294967288
  %989 = add nsw i64 %988, -8
  %990 = lshr exact i64 %989, 3
  %991 = add nuw nsw i64 %990, 1
  %992 = and i64 %991, 3
  %993 = icmp ult i64 %989, 24
  br i1 %993, label %1039, label %994

994:                                              ; preds = %987
  %995 = sub nsw i64 %991, %992
  br label %996

996:                                              ; preds = %996, %994
  %997 = phi i64 [ 0, %994 ], [ %1036, %996 ]
  %998 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %994 ], [ %1034, %996 ]
  %999 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %994 ], [ %1035, %996 ]
  %1000 = phi i64 [ %995, %994 ], [ %1037, %996 ]
  %1001 = getelementptr inbounds i32, i32* %984, i64 %997
  %1002 = bitcast i32* %1001 to <4 x i32>*
  %1003 = load <4 x i32>, <4 x i32>* %1002, align 4
  %1004 = getelementptr inbounds i32, i32* %1001, i64 4
  %1005 = bitcast i32* %1004 to <4 x i32>*
  %1006 = load <4 x i32>, <4 x i32>* %1005, align 4
  %1007 = mul nsw <4 x i32> %1003, %998
  %1008 = mul nsw <4 x i32> %1006, %999
  %1009 = or i64 %997, 8
  %1010 = getelementptr inbounds i32, i32* %984, i64 %1009
  %1011 = bitcast i32* %1010 to <4 x i32>*
  %1012 = load <4 x i32>, <4 x i32>* %1011, align 4
  %1013 = getelementptr inbounds i32, i32* %1010, i64 4
  %1014 = bitcast i32* %1013 to <4 x i32>*
  %1015 = load <4 x i32>, <4 x i32>* %1014, align 4
  %1016 = mul nsw <4 x i32> %1012, %1007
  %1017 = mul nsw <4 x i32> %1015, %1008
  %1018 = or i64 %997, 16
  %1019 = getelementptr inbounds i32, i32* %984, i64 %1018
  %1020 = bitcast i32* %1019 to <4 x i32>*
  %1021 = load <4 x i32>, <4 x i32>* %1020, align 4
  %1022 = getelementptr inbounds i32, i32* %1019, i64 4
  %1023 = bitcast i32* %1022 to <4 x i32>*
  %1024 = load <4 x i32>, <4 x i32>* %1023, align 4
  %1025 = mul nsw <4 x i32> %1021, %1016
  %1026 = mul nsw <4 x i32> %1024, %1017
  %1027 = or i64 %997, 24
  %1028 = getelementptr inbounds i32, i32* %984, i64 %1027
  %1029 = bitcast i32* %1028 to <4 x i32>*
  %1030 = load <4 x i32>, <4 x i32>* %1029, align 4
  %1031 = getelementptr inbounds i32, i32* %1028, i64 4
  %1032 = bitcast i32* %1031 to <4 x i32>*
  %1033 = load <4 x i32>, <4 x i32>* %1032, align 4
  %1034 = mul nsw <4 x i32> %1030, %1025
  %1035 = mul nsw <4 x i32> %1033, %1026
  %1036 = add i64 %997, 32
  %1037 = add i64 %1000, -4
  %1038 = icmp eq i64 %1037, 0
  br i1 %1038, label %1039, label %996, !llvm.loop !144

1039:                                             ; preds = %996, %987
  %1040 = phi <4 x i32> [ undef, %987 ], [ %1034, %996 ]
  %1041 = phi <4 x i32> [ undef, %987 ], [ %1035, %996 ]
  %1042 = phi i64 [ 0, %987 ], [ %1036, %996 ]
  %1043 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %987 ], [ %1034, %996 ]
  %1044 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %987 ], [ %1035, %996 ]
  %1045 = icmp eq i64 %992, 0
  br i1 %1045, label %1062, label %1046

1046:                                             ; preds = %1039, %1046
  %1047 = phi i64 [ %1059, %1046 ], [ %1042, %1039 ]
  %1048 = phi <4 x i32> [ %1057, %1046 ], [ %1043, %1039 ]
  %1049 = phi <4 x i32> [ %1058, %1046 ], [ %1044, %1039 ]
  %1050 = phi i64 [ %1060, %1046 ], [ %992, %1039 ]
  %1051 = getelementptr inbounds i32, i32* %984, i64 %1047
  %1052 = bitcast i32* %1051 to <4 x i32>*
  %1053 = load <4 x i32>, <4 x i32>* %1052, align 4
  %1054 = getelementptr inbounds i32, i32* %1051, i64 4
  %1055 = bitcast i32* %1054 to <4 x i32>*
  %1056 = load <4 x i32>, <4 x i32>* %1055, align 4
  %1057 = mul nsw <4 x i32> %1053, %1048
  %1058 = mul nsw <4 x i32> %1056, %1049
  %1059 = add i64 %1047, 8
  %1060 = add i64 %1050, -1
  %1061 = icmp eq i64 %1060, 0
  br i1 %1061, label %1062, label %1046, !llvm.loop !145

1062:                                             ; preds = %1046, %1039
  %1063 = phi <4 x i32> [ %1040, %1039 ], [ %1057, %1046 ]
  %1064 = phi <4 x i32> [ %1041, %1039 ], [ %1058, %1046 ]
  %1065 = mul <4 x i32> %1064, %1063
  %1066 = shufflevector <4 x i32> %1065, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1067 = mul <4 x i32> %1065, %1066
  %1068 = shufflevector <4 x i32> %1067, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1069 = mul <4 x i32> %1067, %1068
  %1070 = extractelement <4 x i32> %1069, i32 0
  %1071 = icmp eq i64 %988, %985
  br i1 %1071, label %1083, label %1072

1072:                                             ; preds = %1062, %983
  %1073 = phi i64 [ 0, %983 ], [ %988, %1062 ]
  %1074 = phi i32 [ 1, %983 ], [ %1070, %1062 ]
  br label %1075

1075:                                             ; preds = %1072, %1075
  %1076 = phi i64 [ %1081, %1075 ], [ %1073, %1072 ]
  %1077 = phi i32 [ %1080, %1075 ], [ %1074, %1072 ]
  %1078 = getelementptr inbounds i32, i32* %984, i64 %1076
  %1079 = load i32, i32* %1078, align 4
  %1080 = mul nsw i32 %1079, %1077
  %1081 = add nuw nsw i64 %1076, 1
  %1082 = icmp eq i64 %1081, %985
  br i1 %1082, label %1083, label %1075, !llvm.loop !146

1083:                                             ; preds = %1075, %1062, %980
  %1084 = phi i32 [ 1, %980 ], [ %1070, %1062 ], [ %1080, %1075 ]
  %1085 = icmp sgt i32 %938, 5
  %1086 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1
  br i1 %1085, label %1087, label %1090

1087:                                             ; preds = %1083
  %1088 = getelementptr inbounds %union.anon, %union.anon* %1086, i64 0, i32 0
  %1089 = load i32*, i32** %1088, align 8
  br label %1093

1090:                                             ; preds = %1083
  %1091 = bitcast %union.anon* %1086 to i32*
  %1092 = icmp sgt i32 %938, 0
  br i1 %1092, label %1093, label %1193

1093:                                             ; preds = %1090, %1087
  %1094 = phi i32* [ %1089, %1087 ], [ %1091, %1090 ]
  %1095 = zext i32 %938 to i64
  %1096 = icmp ult i32 %938, 8
  br i1 %1096, label %1182, label %1097

1097:                                             ; preds = %1093
  %1098 = and i64 %1095, 4294967288
  %1099 = add nsw i64 %1098, -8
  %1100 = lshr exact i64 %1099, 3
  %1101 = add nuw nsw i64 %1100, 1
  %1102 = and i64 %1101, 3
  %1103 = icmp ult i64 %1099, 24
  br i1 %1103, label %1149, label %1104

1104:                                             ; preds = %1097
  %1105 = sub nsw i64 %1101, %1102
  br label %1106

1106:                                             ; preds = %1106, %1104
  %1107 = phi i64 [ 0, %1104 ], [ %1146, %1106 ]
  %1108 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1104 ], [ %1144, %1106 ]
  %1109 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1104 ], [ %1145, %1106 ]
  %1110 = phi i64 [ %1105, %1104 ], [ %1147, %1106 ]
  %1111 = getelementptr inbounds i32, i32* %1094, i64 %1107
  %1112 = bitcast i32* %1111 to <4 x i32>*
  %1113 = load <4 x i32>, <4 x i32>* %1112, align 4
  %1114 = getelementptr inbounds i32, i32* %1111, i64 4
  %1115 = bitcast i32* %1114 to <4 x i32>*
  %1116 = load <4 x i32>, <4 x i32>* %1115, align 4
  %1117 = mul nsw <4 x i32> %1113, %1108
  %1118 = mul nsw <4 x i32> %1116, %1109
  %1119 = or i64 %1107, 8
  %1120 = getelementptr inbounds i32, i32* %1094, i64 %1119
  %1121 = bitcast i32* %1120 to <4 x i32>*
  %1122 = load <4 x i32>, <4 x i32>* %1121, align 4
  %1123 = getelementptr inbounds i32, i32* %1120, i64 4
  %1124 = bitcast i32* %1123 to <4 x i32>*
  %1125 = load <4 x i32>, <4 x i32>* %1124, align 4
  %1126 = mul nsw <4 x i32> %1122, %1117
  %1127 = mul nsw <4 x i32> %1125, %1118
  %1128 = or i64 %1107, 16
  %1129 = getelementptr inbounds i32, i32* %1094, i64 %1128
  %1130 = bitcast i32* %1129 to <4 x i32>*
  %1131 = load <4 x i32>, <4 x i32>* %1130, align 4
  %1132 = getelementptr inbounds i32, i32* %1129, i64 4
  %1133 = bitcast i32* %1132 to <4 x i32>*
  %1134 = load <4 x i32>, <4 x i32>* %1133, align 4
  %1135 = mul nsw <4 x i32> %1131, %1126
  %1136 = mul nsw <4 x i32> %1134, %1127
  %1137 = or i64 %1107, 24
  %1138 = getelementptr inbounds i32, i32* %1094, i64 %1137
  %1139 = bitcast i32* %1138 to <4 x i32>*
  %1140 = load <4 x i32>, <4 x i32>* %1139, align 4
  %1141 = getelementptr inbounds i32, i32* %1138, i64 4
  %1142 = bitcast i32* %1141 to <4 x i32>*
  %1143 = load <4 x i32>, <4 x i32>* %1142, align 4
  %1144 = mul nsw <4 x i32> %1140, %1135
  %1145 = mul nsw <4 x i32> %1143, %1136
  %1146 = add i64 %1107, 32
  %1147 = add i64 %1110, -4
  %1148 = icmp eq i64 %1147, 0
  br i1 %1148, label %1149, label %1106, !llvm.loop !147

1149:                                             ; preds = %1106, %1097
  %1150 = phi <4 x i32> [ undef, %1097 ], [ %1144, %1106 ]
  %1151 = phi <4 x i32> [ undef, %1097 ], [ %1145, %1106 ]
  %1152 = phi i64 [ 0, %1097 ], [ %1146, %1106 ]
  %1153 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1097 ], [ %1144, %1106 ]
  %1154 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1097 ], [ %1145, %1106 ]
  %1155 = icmp eq i64 %1102, 0
  br i1 %1155, label %1172, label %1156

1156:                                             ; preds = %1149, %1156
  %1157 = phi i64 [ %1169, %1156 ], [ %1152, %1149 ]
  %1158 = phi <4 x i32> [ %1167, %1156 ], [ %1153, %1149 ]
  %1159 = phi <4 x i32> [ %1168, %1156 ], [ %1154, %1149 ]
  %1160 = phi i64 [ %1170, %1156 ], [ %1102, %1149 ]
  %1161 = getelementptr inbounds i32, i32* %1094, i64 %1157
  %1162 = bitcast i32* %1161 to <4 x i32>*
  %1163 = load <4 x i32>, <4 x i32>* %1162, align 4
  %1164 = getelementptr inbounds i32, i32* %1161, i64 4
  %1165 = bitcast i32* %1164 to <4 x i32>*
  %1166 = load <4 x i32>, <4 x i32>* %1165, align 4
  %1167 = mul nsw <4 x i32> %1163, %1158
  %1168 = mul nsw <4 x i32> %1166, %1159
  %1169 = add i64 %1157, 8
  %1170 = add i64 %1160, -1
  %1171 = icmp eq i64 %1170, 0
  br i1 %1171, label %1172, label %1156, !llvm.loop !148

1172:                                             ; preds = %1156, %1149
  %1173 = phi <4 x i32> [ %1150, %1149 ], [ %1167, %1156 ]
  %1174 = phi <4 x i32> [ %1151, %1149 ], [ %1168, %1156 ]
  %1175 = mul <4 x i32> %1174, %1173
  %1176 = shufflevector <4 x i32> %1175, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1177 = mul <4 x i32> %1175, %1176
  %1178 = shufflevector <4 x i32> %1177, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1179 = mul <4 x i32> %1177, %1178
  %1180 = extractelement <4 x i32> %1179, i32 0
  %1181 = icmp eq i64 %1098, %1095
  br i1 %1181, label %1193, label %1182

1182:                                             ; preds = %1172, %1093
  %1183 = phi i64 [ 0, %1093 ], [ %1098, %1172 ]
  %1184 = phi i32 [ 1, %1093 ], [ %1180, %1172 ]
  br label %1185

1185:                                             ; preds = %1182, %1185
  %1186 = phi i64 [ %1191, %1185 ], [ %1183, %1182 ]
  %1187 = phi i32 [ %1190, %1185 ], [ %1184, %1182 ]
  %1188 = getelementptr inbounds i32, i32* %1094, i64 %1186
  %1189 = load i32, i32* %1188, align 4
  %1190 = mul nsw i32 %1189, %1187
  %1191 = add nuw nsw i64 %1186, 1
  %1192 = icmp eq i64 %1191, %1095
  br i1 %1192, label %1193, label %1185, !llvm.loop !149

1193:                                             ; preds = %1185, %1172, %1090
  %1194 = phi i32 [ 1, %1090 ], [ %1180, %1172 ], [ %1190, %1185 ]
  %1195 = icmp sgt i32 %973, 5
  %1196 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1
  br i1 %1195, label %1197, label %1200

1197:                                             ; preds = %1193
  %1198 = getelementptr inbounds %union.anon, %union.anon* %1196, i64 0, i32 0
  %1199 = load i32*, i32** %1198, align 8
  br label %1203

1200:                                             ; preds = %1193
  %1201 = bitcast %union.anon* %1196 to i32*
  %1202 = icmp sgt i32 %973, 0
  br i1 %1202, label %1203, label %1303

1203:                                             ; preds = %1200, %1197
  %1204 = phi i32* [ %1199, %1197 ], [ %1201, %1200 ]
  %1205 = zext i32 %973 to i64
  %1206 = icmp ult i32 %973, 8
  br i1 %1206, label %1292, label %1207

1207:                                             ; preds = %1203
  %1208 = and i64 %1205, 4294967288
  %1209 = add nsw i64 %1208, -8
  %1210 = lshr exact i64 %1209, 3
  %1211 = add nuw nsw i64 %1210, 1
  %1212 = and i64 %1211, 3
  %1213 = icmp ult i64 %1209, 24
  br i1 %1213, label %1259, label %1214

1214:                                             ; preds = %1207
  %1215 = sub nsw i64 %1211, %1212
  br label %1216

1216:                                             ; preds = %1216, %1214
  %1217 = phi i64 [ 0, %1214 ], [ %1256, %1216 ]
  %1218 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1214 ], [ %1254, %1216 ]
  %1219 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1214 ], [ %1255, %1216 ]
  %1220 = phi i64 [ %1215, %1214 ], [ %1257, %1216 ]
  %1221 = getelementptr inbounds i32, i32* %1204, i64 %1217
  %1222 = bitcast i32* %1221 to <4 x i32>*
  %1223 = load <4 x i32>, <4 x i32>* %1222, align 4
  %1224 = getelementptr inbounds i32, i32* %1221, i64 4
  %1225 = bitcast i32* %1224 to <4 x i32>*
  %1226 = load <4 x i32>, <4 x i32>* %1225, align 4
  %1227 = mul nsw <4 x i32> %1223, %1218
  %1228 = mul nsw <4 x i32> %1226, %1219
  %1229 = or i64 %1217, 8
  %1230 = getelementptr inbounds i32, i32* %1204, i64 %1229
  %1231 = bitcast i32* %1230 to <4 x i32>*
  %1232 = load <4 x i32>, <4 x i32>* %1231, align 4
  %1233 = getelementptr inbounds i32, i32* %1230, i64 4
  %1234 = bitcast i32* %1233 to <4 x i32>*
  %1235 = load <4 x i32>, <4 x i32>* %1234, align 4
  %1236 = mul nsw <4 x i32> %1232, %1227
  %1237 = mul nsw <4 x i32> %1235, %1228
  %1238 = or i64 %1217, 16
  %1239 = getelementptr inbounds i32, i32* %1204, i64 %1238
  %1240 = bitcast i32* %1239 to <4 x i32>*
  %1241 = load <4 x i32>, <4 x i32>* %1240, align 4
  %1242 = getelementptr inbounds i32, i32* %1239, i64 4
  %1243 = bitcast i32* %1242 to <4 x i32>*
  %1244 = load <4 x i32>, <4 x i32>* %1243, align 4
  %1245 = mul nsw <4 x i32> %1241, %1236
  %1246 = mul nsw <4 x i32> %1244, %1237
  %1247 = or i64 %1217, 24
  %1248 = getelementptr inbounds i32, i32* %1204, i64 %1247
  %1249 = bitcast i32* %1248 to <4 x i32>*
  %1250 = load <4 x i32>, <4 x i32>* %1249, align 4
  %1251 = getelementptr inbounds i32, i32* %1248, i64 4
  %1252 = bitcast i32* %1251 to <4 x i32>*
  %1253 = load <4 x i32>, <4 x i32>* %1252, align 4
  %1254 = mul nsw <4 x i32> %1250, %1245
  %1255 = mul nsw <4 x i32> %1253, %1246
  %1256 = add i64 %1217, 32
  %1257 = add i64 %1220, -4
  %1258 = icmp eq i64 %1257, 0
  br i1 %1258, label %1259, label %1216, !llvm.loop !150

1259:                                             ; preds = %1216, %1207
  %1260 = phi <4 x i32> [ undef, %1207 ], [ %1254, %1216 ]
  %1261 = phi <4 x i32> [ undef, %1207 ], [ %1255, %1216 ]
  %1262 = phi i64 [ 0, %1207 ], [ %1256, %1216 ]
  %1263 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1207 ], [ %1254, %1216 ]
  %1264 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1207 ], [ %1255, %1216 ]
  %1265 = icmp eq i64 %1212, 0
  br i1 %1265, label %1282, label %1266

1266:                                             ; preds = %1259, %1266
  %1267 = phi i64 [ %1279, %1266 ], [ %1262, %1259 ]
  %1268 = phi <4 x i32> [ %1277, %1266 ], [ %1263, %1259 ]
  %1269 = phi <4 x i32> [ %1278, %1266 ], [ %1264, %1259 ]
  %1270 = phi i64 [ %1280, %1266 ], [ %1212, %1259 ]
  %1271 = getelementptr inbounds i32, i32* %1204, i64 %1267
  %1272 = bitcast i32* %1271 to <4 x i32>*
  %1273 = load <4 x i32>, <4 x i32>* %1272, align 4
  %1274 = getelementptr inbounds i32, i32* %1271, i64 4
  %1275 = bitcast i32* %1274 to <4 x i32>*
  %1276 = load <4 x i32>, <4 x i32>* %1275, align 4
  %1277 = mul nsw <4 x i32> %1273, %1268
  %1278 = mul nsw <4 x i32> %1276, %1269
  %1279 = add i64 %1267, 8
  %1280 = add i64 %1270, -1
  %1281 = icmp eq i64 %1280, 0
  br i1 %1281, label %1282, label %1266, !llvm.loop !151

1282:                                             ; preds = %1266, %1259
  %1283 = phi <4 x i32> [ %1260, %1259 ], [ %1277, %1266 ]
  %1284 = phi <4 x i32> [ %1261, %1259 ], [ %1278, %1266 ]
  %1285 = mul <4 x i32> %1284, %1283
  %1286 = shufflevector <4 x i32> %1285, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1287 = mul <4 x i32> %1285, %1286
  %1288 = shufflevector <4 x i32> %1287, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1289 = mul <4 x i32> %1287, %1288
  %1290 = extractelement <4 x i32> %1289, i32 0
  %1291 = icmp eq i64 %1208, %1205
  br i1 %1291, label %1303, label %1292

1292:                                             ; preds = %1282, %1203
  %1293 = phi i64 [ 0, %1203 ], [ %1208, %1282 ]
  %1294 = phi i32 [ 1, %1203 ], [ %1290, %1282 ]
  br label %1295

1295:                                             ; preds = %1292, %1295
  %1296 = phi i64 [ %1301, %1295 ], [ %1293, %1292 ]
  %1297 = phi i32 [ %1300, %1295 ], [ %1294, %1292 ]
  %1298 = getelementptr inbounds i32, i32* %1204, i64 %1296
  %1299 = load i32, i32* %1298, align 4
  %1300 = mul nsw i32 %1299, %1297
  %1301 = add nuw nsw i64 %1296, 1
  %1302 = icmp eq i64 %1301, %1205
  br i1 %1302, label %1303, label %1295, !llvm.loop !152

1303:                                             ; preds = %1295, %1282, %1200
  %1304 = phi i32 [ 1, %1200 ], [ %1290, %1282 ], [ %1300, %1295 ]
  %1305 = icmp eq i32 %1084, %1194
  br i1 %1305, label %1307, label %1306

1306:                                             ; preds = %1303
  call void @abort() #13
  unreachable

1307:                                             ; preds = %1303
  %1308 = icmp eq i32 %1084, %1304
  br i1 %1308, label %1310, label %1309

1309:                                             ; preds = %1307
  call void @abort() #13
  unreachable

1310:                                             ; preds = %1307
  call void @_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph(i32 %1084, %"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %8, i8* %905, i8* %939, i8* %974) #12
  br i1 %1195, label %1311, label %1317

1311:                                             ; preds = %1310
  %1312 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1, i32 0
  %1313 = load i32*, i32** %1312, align 8
  %1314 = icmp eq i32* %1313, null
  br i1 %1314, label %1317, label %1315

1315:                                             ; preds = %1311
  %1316 = bitcast i32* %1313 to i8*
  call void @_ZdaPv(i8* %1316) #11
  br label %1317

1317:                                             ; preds = %1310, %1311, %1315
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %940) #12
  br i1 %1085, label %1318, label %1324

1318:                                             ; preds = %1317
  %1319 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1, i32 0
  %1320 = load i32*, i32** %1319, align 8
  %1321 = icmp eq i32* %1320, null
  br i1 %1321, label %1324, label %1322

1322:                                             ; preds = %1318
  %1323 = bitcast i32* %1320 to i8*
  call void @_ZdaPv(i8* %1323) #11
  br label %1324

1324:                                             ; preds = %1317, %1318, %1322
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %906) #12
  br i1 %975, label %1325, label %1331

1325:                                             ; preds = %1324
  %1326 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1, i32 0
  %1327 = load i32*, i32** %1326, align 8
  %1328 = icmp eq i32* %1327, null
  br i1 %1328, label %1331, label %1329

1329:                                             ; preds = %1325
  %1330 = bitcast i32* %1327 to i8*
  call void @_ZdaPv(i8* %1330) #11
  br label %1331

1331:                                             ; preds = %1329, %1325, %1324, %869, %865, %861, %738, %734, %733, %278, %274, %270
  %1332 = phi i8* [ %151, %270 ], [ %151, %274 ], [ %151, %278 ], [ %281, %733 ], [ %281, %734 ], [ %281, %738 ], [ %742, %861 ], [ %742, %865 ], [ %742, %869 ], [ %872, %1324 ], [ %872, %1325 ], [ %872, %1329 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1332) #12
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %29) #12
  br label %1915

1333:                                             ; preds = %7
  %1334 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 0
  %1335 = load i32, i32* %1334, align 4
  %1336 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 1
  %1337 = load i32, i32* %1336, align 4
  %1338 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 2
  %1339 = load i32, i32* %1338, align 4
  %1340 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 3
  %1341 = load i32, i32* %1340, align 4
  %1342 = bitcast %"class.tflite::RuntimeShape"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1342) #12
  %1343 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %1343, label %1344, label %1346

1344:                                             ; preds = %1333
  %1345 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %23, i64 0, i32 0
  store i32 0, i32* %1345, align 8, !alias.scope !153
  br label %1374

1346:                                             ; preds = %1333
  %1347 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %1348 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1347, align 8, !noalias !153
  %1349 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1348, i64 0, i32 0
  %1350 = load i32, i32* %1349, align 4, !noalias !153
  %1351 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1348, i64 0, i32 1, i64 0
  %1352 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %23, i64 0, i32 0
  store i32 %1350, i32* %1352, align 8, !alias.scope !153
  %1353 = icmp sgt i32 %1350, 5
  br i1 %1353, label %1354, label %1361

1354:                                             ; preds = %1346
  %1355 = sext i32 %1350 to i64
  %1356 = shl nsw i64 %1355, 2
  %1357 = tail call i8* @_Znam(i64 %1356) #11, !noalias !153
  %1358 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %23, i64 0, i32 1, i32 0
  %1359 = bitcast i32** %1358 to i8**
  store i8* %1357, i8** %1359, align 8, !alias.scope !153
  %1360 = bitcast i8* %1357 to i32*
  br label %1366

1361:                                             ; preds = %1346
  %1362 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %23, i64 0, i32 1
  %1363 = bitcast %union.anon* %1362 to i32*
  %1364 = sext i32 %1350 to i64
  %1365 = shl nsw i64 %1364, 2
  br label %1366

1366:                                             ; preds = %1361, %1354
  %1367 = phi i64 [ %1356, %1354 ], [ %1365, %1361 ]
  %1368 = phi i32* [ %1360, %1354 ], [ %1363, %1361 ]
  %1369 = bitcast i32* %1368 to i8*
  %1370 = bitcast i32* %1351 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1369, i8* align 4 %1370, i64 %1367, i1 false) #12
  %1371 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %1372 = bitcast %union.TfLitePtrUnion* %1371 to i16**
  %1373 = load i16*, i16** %1372, align 8
  br label %1374

1374:                                             ; preds = %1344, %1366
  %1375 = phi i32 [ %1350, %1366 ], [ 0, %1344 ]
  %1376 = phi i16* [ %1373, %1366 ], [ null, %1344 ]
  %1377 = bitcast %"class.tflite::RuntimeShape"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1377) #12
  %1378 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %1378, label %1379, label %1381

1379:                                             ; preds = %1374
  %1380 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %24, i64 0, i32 0
  store i32 0, i32* %1380, align 8, !alias.scope !156
  br label %1409

1381:                                             ; preds = %1374
  %1382 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %1383 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1382, align 8, !noalias !156
  %1384 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1383, i64 0, i32 0
  %1385 = load i32, i32* %1384, align 4, !noalias !156
  %1386 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1383, i64 0, i32 1, i64 0
  %1387 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %24, i64 0, i32 0
  store i32 %1385, i32* %1387, align 8, !alias.scope !156
  %1388 = icmp sgt i32 %1385, 5
  br i1 %1388, label %1389, label %1396

1389:                                             ; preds = %1381
  %1390 = sext i32 %1385 to i64
  %1391 = shl nsw i64 %1390, 2
  %1392 = tail call i8* @_Znam(i64 %1391) #11, !noalias !156
  %1393 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %24, i64 0, i32 1, i32 0
  %1394 = bitcast i32** %1393 to i8**
  store i8* %1392, i8** %1394, align 8, !alias.scope !156
  %1395 = bitcast i8* %1392 to i32*
  br label %1401

1396:                                             ; preds = %1381
  %1397 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %24, i64 0, i32 1
  %1398 = bitcast %union.anon* %1397 to i32*
  %1399 = sext i32 %1385 to i64
  %1400 = shl nsw i64 %1399, 2
  br label %1401

1401:                                             ; preds = %1396, %1389
  %1402 = phi i64 [ %1391, %1389 ], [ %1400, %1396 ]
  %1403 = phi i32* [ %1395, %1389 ], [ %1398, %1396 ]
  %1404 = bitcast i32* %1403 to i8*
  %1405 = bitcast i32* %1386 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1404, i8* align 4 %1405, i64 %1402, i1 false) #12
  %1406 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %1407 = bitcast %union.TfLitePtrUnion* %1406 to i16**
  %1408 = load i16*, i16** %1407, align 8
  br label %1409

1409:                                             ; preds = %1379, %1401
  %1410 = phi i32 [ %1385, %1401 ], [ 0, %1379 ]
  %1411 = phi i16* [ %1408, %1401 ], [ null, %1379 ]
  %1412 = bitcast %"class.tflite::RuntimeShape"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1412) #12
  %1413 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %1413, label %1414, label %1416

1414:                                             ; preds = %1409
  %1415 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %25, i64 0, i32 0
  store i32 0, i32* %1415, align 8, !alias.scope !159
  br label %1445

1416:                                             ; preds = %1409
  %1417 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %1418 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1417, align 8, !noalias !159
  %1419 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1418, i64 0, i32 0
  %1420 = load i32, i32* %1419, align 4, !noalias !159
  %1421 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1418, i64 0, i32 1, i64 0
  %1422 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %25, i64 0, i32 0
  store i32 %1420, i32* %1422, align 8, !alias.scope !159
  %1423 = icmp sgt i32 %1420, 5
  br i1 %1423, label %1424, label %1431

1424:                                             ; preds = %1416
  %1425 = sext i32 %1420 to i64
  %1426 = shl nsw i64 %1425, 2
  %1427 = tail call i8* @_Znam(i64 %1426) #11, !noalias !159
  %1428 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %25, i64 0, i32 1, i32 0
  %1429 = bitcast i32** %1428 to i8**
  store i8* %1427, i8** %1429, align 8, !alias.scope !159
  %1430 = bitcast i8* %1427 to i32*
  br label %1436

1431:                                             ; preds = %1416
  %1432 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %25, i64 0, i32 1
  %1433 = bitcast %union.anon* %1432 to i32*
  %1434 = sext i32 %1420 to i64
  %1435 = shl nsw i64 %1434, 2
  br label %1436

1436:                                             ; preds = %1431, %1424
  %1437 = phi i64 [ %1426, %1424 ], [ %1435, %1431 ]
  %1438 = phi i32* [ %1430, %1424 ], [ %1433, %1431 ]
  %1439 = bitcast i32* %1438 to i8*
  %1440 = bitcast i32* %1421 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1439, i8* align 4 %1440, i64 %1437, i1 false) #12
  %1441 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %1442 = bitcast %union.TfLitePtrUnion* %1441 to i16**
  %1443 = load i16*, i16** %1442, align 8
  %1444 = bitcast i16* %1443 to i8*
  br label %1445

1445:                                             ; preds = %1414, %1436
  %1446 = phi i32 [ %1420, %1436 ], [ 0, %1414 ]
  %1447 = phi i8* [ %1444, %1436 ], [ null, %1414 ]
  %1448 = phi i16* [ %1443, %1436 ], [ null, %1414 ]
  %1449 = icmp sgt i32 %1375, 5
  %1450 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %23, i64 0, i32 1
  br i1 %1449, label %1451, label %1454

1451:                                             ; preds = %1445
  %1452 = getelementptr inbounds %union.anon, %union.anon* %1450, i64 0, i32 0
  %1453 = load i32*, i32** %1452, align 8
  br label %1457

1454:                                             ; preds = %1445
  %1455 = bitcast %union.anon* %1450 to i32*
  %1456 = icmp sgt i32 %1375, 0
  br i1 %1456, label %1457, label %1557

1457:                                             ; preds = %1454, %1451
  %1458 = phi i32* [ %1453, %1451 ], [ %1455, %1454 ]
  %1459 = zext i32 %1375 to i64
  %1460 = icmp ult i32 %1375, 8
  br i1 %1460, label %1546, label %1461

1461:                                             ; preds = %1457
  %1462 = and i64 %1459, 4294967288
  %1463 = add nsw i64 %1462, -8
  %1464 = lshr exact i64 %1463, 3
  %1465 = add nuw nsw i64 %1464, 1
  %1466 = and i64 %1465, 3
  %1467 = icmp ult i64 %1463, 24
  br i1 %1467, label %1513, label %1468

1468:                                             ; preds = %1461
  %1469 = sub nsw i64 %1465, %1466
  br label %1470

1470:                                             ; preds = %1470, %1468
  %1471 = phi i64 [ 0, %1468 ], [ %1510, %1470 ]
  %1472 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1468 ], [ %1508, %1470 ]
  %1473 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1468 ], [ %1509, %1470 ]
  %1474 = phi i64 [ %1469, %1468 ], [ %1511, %1470 ]
  %1475 = getelementptr inbounds i32, i32* %1458, i64 %1471
  %1476 = bitcast i32* %1475 to <4 x i32>*
  %1477 = load <4 x i32>, <4 x i32>* %1476, align 4
  %1478 = getelementptr inbounds i32, i32* %1475, i64 4
  %1479 = bitcast i32* %1478 to <4 x i32>*
  %1480 = load <4 x i32>, <4 x i32>* %1479, align 4
  %1481 = mul nsw <4 x i32> %1477, %1472
  %1482 = mul nsw <4 x i32> %1480, %1473
  %1483 = or i64 %1471, 8
  %1484 = getelementptr inbounds i32, i32* %1458, i64 %1483
  %1485 = bitcast i32* %1484 to <4 x i32>*
  %1486 = load <4 x i32>, <4 x i32>* %1485, align 4
  %1487 = getelementptr inbounds i32, i32* %1484, i64 4
  %1488 = bitcast i32* %1487 to <4 x i32>*
  %1489 = load <4 x i32>, <4 x i32>* %1488, align 4
  %1490 = mul nsw <4 x i32> %1486, %1481
  %1491 = mul nsw <4 x i32> %1489, %1482
  %1492 = or i64 %1471, 16
  %1493 = getelementptr inbounds i32, i32* %1458, i64 %1492
  %1494 = bitcast i32* %1493 to <4 x i32>*
  %1495 = load <4 x i32>, <4 x i32>* %1494, align 4
  %1496 = getelementptr inbounds i32, i32* %1493, i64 4
  %1497 = bitcast i32* %1496 to <4 x i32>*
  %1498 = load <4 x i32>, <4 x i32>* %1497, align 4
  %1499 = mul nsw <4 x i32> %1495, %1490
  %1500 = mul nsw <4 x i32> %1498, %1491
  %1501 = or i64 %1471, 24
  %1502 = getelementptr inbounds i32, i32* %1458, i64 %1501
  %1503 = bitcast i32* %1502 to <4 x i32>*
  %1504 = load <4 x i32>, <4 x i32>* %1503, align 4
  %1505 = getelementptr inbounds i32, i32* %1502, i64 4
  %1506 = bitcast i32* %1505 to <4 x i32>*
  %1507 = load <4 x i32>, <4 x i32>* %1506, align 4
  %1508 = mul nsw <4 x i32> %1504, %1499
  %1509 = mul nsw <4 x i32> %1507, %1500
  %1510 = add i64 %1471, 32
  %1511 = add i64 %1474, -4
  %1512 = icmp eq i64 %1511, 0
  br i1 %1512, label %1513, label %1470, !llvm.loop !162

1513:                                             ; preds = %1470, %1461
  %1514 = phi <4 x i32> [ undef, %1461 ], [ %1508, %1470 ]
  %1515 = phi <4 x i32> [ undef, %1461 ], [ %1509, %1470 ]
  %1516 = phi i64 [ 0, %1461 ], [ %1510, %1470 ]
  %1517 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1461 ], [ %1508, %1470 ]
  %1518 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1461 ], [ %1509, %1470 ]
  %1519 = icmp eq i64 %1466, 0
  br i1 %1519, label %1536, label %1520

1520:                                             ; preds = %1513, %1520
  %1521 = phi i64 [ %1533, %1520 ], [ %1516, %1513 ]
  %1522 = phi <4 x i32> [ %1531, %1520 ], [ %1517, %1513 ]
  %1523 = phi <4 x i32> [ %1532, %1520 ], [ %1518, %1513 ]
  %1524 = phi i64 [ %1534, %1520 ], [ %1466, %1513 ]
  %1525 = getelementptr inbounds i32, i32* %1458, i64 %1521
  %1526 = bitcast i32* %1525 to <4 x i32>*
  %1527 = load <4 x i32>, <4 x i32>* %1526, align 4
  %1528 = getelementptr inbounds i32, i32* %1525, i64 4
  %1529 = bitcast i32* %1528 to <4 x i32>*
  %1530 = load <4 x i32>, <4 x i32>* %1529, align 4
  %1531 = mul nsw <4 x i32> %1527, %1522
  %1532 = mul nsw <4 x i32> %1530, %1523
  %1533 = add i64 %1521, 8
  %1534 = add i64 %1524, -1
  %1535 = icmp eq i64 %1534, 0
  br i1 %1535, label %1536, label %1520, !llvm.loop !163

1536:                                             ; preds = %1520, %1513
  %1537 = phi <4 x i32> [ %1514, %1513 ], [ %1531, %1520 ]
  %1538 = phi <4 x i32> [ %1515, %1513 ], [ %1532, %1520 ]
  %1539 = mul <4 x i32> %1538, %1537
  %1540 = shufflevector <4 x i32> %1539, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1541 = mul <4 x i32> %1539, %1540
  %1542 = shufflevector <4 x i32> %1541, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1543 = mul <4 x i32> %1541, %1542
  %1544 = extractelement <4 x i32> %1543, i32 0
  %1545 = icmp eq i64 %1462, %1459
  br i1 %1545, label %1557, label %1546

1546:                                             ; preds = %1536, %1457
  %1547 = phi i64 [ 0, %1457 ], [ %1462, %1536 ]
  %1548 = phi i32 [ 1, %1457 ], [ %1544, %1536 ]
  br label %1549

1549:                                             ; preds = %1546, %1549
  %1550 = phi i64 [ %1555, %1549 ], [ %1547, %1546 ]
  %1551 = phi i32 [ %1554, %1549 ], [ %1548, %1546 ]
  %1552 = getelementptr inbounds i32, i32* %1458, i64 %1550
  %1553 = load i32, i32* %1552, align 4
  %1554 = mul nsw i32 %1553, %1551
  %1555 = add nuw nsw i64 %1550, 1
  %1556 = icmp eq i64 %1555, %1459
  br i1 %1556, label %1557, label %1549, !llvm.loop !164

1557:                                             ; preds = %1549, %1536, %1454
  %1558 = phi i32 [ 1, %1454 ], [ %1544, %1536 ], [ %1554, %1549 ]
  %1559 = icmp sgt i32 %1410, 5
  %1560 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %24, i64 0, i32 1
  br i1 %1559, label %1561, label %1564

1561:                                             ; preds = %1557
  %1562 = getelementptr inbounds %union.anon, %union.anon* %1560, i64 0, i32 0
  %1563 = load i32*, i32** %1562, align 8
  br label %1567

1564:                                             ; preds = %1557
  %1565 = bitcast %union.anon* %1560 to i32*
  %1566 = icmp sgt i32 %1410, 0
  br i1 %1566, label %1567, label %1667

1567:                                             ; preds = %1564, %1561
  %1568 = phi i32* [ %1563, %1561 ], [ %1565, %1564 ]
  %1569 = zext i32 %1410 to i64
  %1570 = icmp ult i32 %1410, 8
  br i1 %1570, label %1656, label %1571

1571:                                             ; preds = %1567
  %1572 = and i64 %1569, 4294967288
  %1573 = add nsw i64 %1572, -8
  %1574 = lshr exact i64 %1573, 3
  %1575 = add nuw nsw i64 %1574, 1
  %1576 = and i64 %1575, 3
  %1577 = icmp ult i64 %1573, 24
  br i1 %1577, label %1623, label %1578

1578:                                             ; preds = %1571
  %1579 = sub nsw i64 %1575, %1576
  br label %1580

1580:                                             ; preds = %1580, %1578
  %1581 = phi i64 [ 0, %1578 ], [ %1620, %1580 ]
  %1582 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1578 ], [ %1618, %1580 ]
  %1583 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1578 ], [ %1619, %1580 ]
  %1584 = phi i64 [ %1579, %1578 ], [ %1621, %1580 ]
  %1585 = getelementptr inbounds i32, i32* %1568, i64 %1581
  %1586 = bitcast i32* %1585 to <4 x i32>*
  %1587 = load <4 x i32>, <4 x i32>* %1586, align 4
  %1588 = getelementptr inbounds i32, i32* %1585, i64 4
  %1589 = bitcast i32* %1588 to <4 x i32>*
  %1590 = load <4 x i32>, <4 x i32>* %1589, align 4
  %1591 = mul nsw <4 x i32> %1587, %1582
  %1592 = mul nsw <4 x i32> %1590, %1583
  %1593 = or i64 %1581, 8
  %1594 = getelementptr inbounds i32, i32* %1568, i64 %1593
  %1595 = bitcast i32* %1594 to <4 x i32>*
  %1596 = load <4 x i32>, <4 x i32>* %1595, align 4
  %1597 = getelementptr inbounds i32, i32* %1594, i64 4
  %1598 = bitcast i32* %1597 to <4 x i32>*
  %1599 = load <4 x i32>, <4 x i32>* %1598, align 4
  %1600 = mul nsw <4 x i32> %1596, %1591
  %1601 = mul nsw <4 x i32> %1599, %1592
  %1602 = or i64 %1581, 16
  %1603 = getelementptr inbounds i32, i32* %1568, i64 %1602
  %1604 = bitcast i32* %1603 to <4 x i32>*
  %1605 = load <4 x i32>, <4 x i32>* %1604, align 4
  %1606 = getelementptr inbounds i32, i32* %1603, i64 4
  %1607 = bitcast i32* %1606 to <4 x i32>*
  %1608 = load <4 x i32>, <4 x i32>* %1607, align 4
  %1609 = mul nsw <4 x i32> %1605, %1600
  %1610 = mul nsw <4 x i32> %1608, %1601
  %1611 = or i64 %1581, 24
  %1612 = getelementptr inbounds i32, i32* %1568, i64 %1611
  %1613 = bitcast i32* %1612 to <4 x i32>*
  %1614 = load <4 x i32>, <4 x i32>* %1613, align 4
  %1615 = getelementptr inbounds i32, i32* %1612, i64 4
  %1616 = bitcast i32* %1615 to <4 x i32>*
  %1617 = load <4 x i32>, <4 x i32>* %1616, align 4
  %1618 = mul nsw <4 x i32> %1614, %1609
  %1619 = mul nsw <4 x i32> %1617, %1610
  %1620 = add i64 %1581, 32
  %1621 = add i64 %1584, -4
  %1622 = icmp eq i64 %1621, 0
  br i1 %1622, label %1623, label %1580, !llvm.loop !165

1623:                                             ; preds = %1580, %1571
  %1624 = phi <4 x i32> [ undef, %1571 ], [ %1618, %1580 ]
  %1625 = phi <4 x i32> [ undef, %1571 ], [ %1619, %1580 ]
  %1626 = phi i64 [ 0, %1571 ], [ %1620, %1580 ]
  %1627 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1571 ], [ %1618, %1580 ]
  %1628 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1571 ], [ %1619, %1580 ]
  %1629 = icmp eq i64 %1576, 0
  br i1 %1629, label %1646, label %1630

1630:                                             ; preds = %1623, %1630
  %1631 = phi i64 [ %1643, %1630 ], [ %1626, %1623 ]
  %1632 = phi <4 x i32> [ %1641, %1630 ], [ %1627, %1623 ]
  %1633 = phi <4 x i32> [ %1642, %1630 ], [ %1628, %1623 ]
  %1634 = phi i64 [ %1644, %1630 ], [ %1576, %1623 ]
  %1635 = getelementptr inbounds i32, i32* %1568, i64 %1631
  %1636 = bitcast i32* %1635 to <4 x i32>*
  %1637 = load <4 x i32>, <4 x i32>* %1636, align 4
  %1638 = getelementptr inbounds i32, i32* %1635, i64 4
  %1639 = bitcast i32* %1638 to <4 x i32>*
  %1640 = load <4 x i32>, <4 x i32>* %1639, align 4
  %1641 = mul nsw <4 x i32> %1637, %1632
  %1642 = mul nsw <4 x i32> %1640, %1633
  %1643 = add i64 %1631, 8
  %1644 = add i64 %1634, -1
  %1645 = icmp eq i64 %1644, 0
  br i1 %1645, label %1646, label %1630, !llvm.loop !166

1646:                                             ; preds = %1630, %1623
  %1647 = phi <4 x i32> [ %1624, %1623 ], [ %1641, %1630 ]
  %1648 = phi <4 x i32> [ %1625, %1623 ], [ %1642, %1630 ]
  %1649 = mul <4 x i32> %1648, %1647
  %1650 = shufflevector <4 x i32> %1649, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1651 = mul <4 x i32> %1649, %1650
  %1652 = shufflevector <4 x i32> %1651, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1653 = mul <4 x i32> %1651, %1652
  %1654 = extractelement <4 x i32> %1653, i32 0
  %1655 = icmp eq i64 %1572, %1569
  br i1 %1655, label %1667, label %1656

1656:                                             ; preds = %1646, %1567
  %1657 = phi i64 [ 0, %1567 ], [ %1572, %1646 ]
  %1658 = phi i32 [ 1, %1567 ], [ %1654, %1646 ]
  br label %1659

1659:                                             ; preds = %1656, %1659
  %1660 = phi i64 [ %1665, %1659 ], [ %1657, %1656 ]
  %1661 = phi i32 [ %1664, %1659 ], [ %1658, %1656 ]
  %1662 = getelementptr inbounds i32, i32* %1568, i64 %1660
  %1663 = load i32, i32* %1662, align 4
  %1664 = mul nsw i32 %1663, %1661
  %1665 = add nuw nsw i64 %1660, 1
  %1666 = icmp eq i64 %1665, %1569
  br i1 %1666, label %1667, label %1659, !llvm.loop !167

1667:                                             ; preds = %1659, %1646, %1564
  %1668 = phi i32 [ 1, %1564 ], [ %1654, %1646 ], [ %1664, %1659 ]
  %1669 = icmp sgt i32 %1446, 5
  %1670 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %25, i64 0, i32 1
  br i1 %1669, label %1671, label %1674

1671:                                             ; preds = %1667
  %1672 = getelementptr inbounds %union.anon, %union.anon* %1670, i64 0, i32 0
  %1673 = load i32*, i32** %1672, align 8
  br label %1677

1674:                                             ; preds = %1667
  %1675 = bitcast %union.anon* %1670 to i32*
  %1676 = icmp sgt i32 %1446, 0
  br i1 %1676, label %1677, label %1777

1677:                                             ; preds = %1674, %1671
  %1678 = phi i32* [ %1673, %1671 ], [ %1675, %1674 ]
  %1679 = zext i32 %1446 to i64
  %1680 = icmp ult i32 %1446, 8
  br i1 %1680, label %1766, label %1681

1681:                                             ; preds = %1677
  %1682 = and i64 %1679, 4294967288
  %1683 = add nsw i64 %1682, -8
  %1684 = lshr exact i64 %1683, 3
  %1685 = add nuw nsw i64 %1684, 1
  %1686 = and i64 %1685, 3
  %1687 = icmp ult i64 %1683, 24
  br i1 %1687, label %1733, label %1688

1688:                                             ; preds = %1681
  %1689 = sub nsw i64 %1685, %1686
  br label %1690

1690:                                             ; preds = %1690, %1688
  %1691 = phi i64 [ 0, %1688 ], [ %1730, %1690 ]
  %1692 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1688 ], [ %1728, %1690 ]
  %1693 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1688 ], [ %1729, %1690 ]
  %1694 = phi i64 [ %1689, %1688 ], [ %1731, %1690 ]
  %1695 = getelementptr inbounds i32, i32* %1678, i64 %1691
  %1696 = bitcast i32* %1695 to <4 x i32>*
  %1697 = load <4 x i32>, <4 x i32>* %1696, align 4
  %1698 = getelementptr inbounds i32, i32* %1695, i64 4
  %1699 = bitcast i32* %1698 to <4 x i32>*
  %1700 = load <4 x i32>, <4 x i32>* %1699, align 4
  %1701 = mul nsw <4 x i32> %1697, %1692
  %1702 = mul nsw <4 x i32> %1700, %1693
  %1703 = or i64 %1691, 8
  %1704 = getelementptr inbounds i32, i32* %1678, i64 %1703
  %1705 = bitcast i32* %1704 to <4 x i32>*
  %1706 = load <4 x i32>, <4 x i32>* %1705, align 4
  %1707 = getelementptr inbounds i32, i32* %1704, i64 4
  %1708 = bitcast i32* %1707 to <4 x i32>*
  %1709 = load <4 x i32>, <4 x i32>* %1708, align 4
  %1710 = mul nsw <4 x i32> %1706, %1701
  %1711 = mul nsw <4 x i32> %1709, %1702
  %1712 = or i64 %1691, 16
  %1713 = getelementptr inbounds i32, i32* %1678, i64 %1712
  %1714 = bitcast i32* %1713 to <4 x i32>*
  %1715 = load <4 x i32>, <4 x i32>* %1714, align 4
  %1716 = getelementptr inbounds i32, i32* %1713, i64 4
  %1717 = bitcast i32* %1716 to <4 x i32>*
  %1718 = load <4 x i32>, <4 x i32>* %1717, align 4
  %1719 = mul nsw <4 x i32> %1715, %1710
  %1720 = mul nsw <4 x i32> %1718, %1711
  %1721 = or i64 %1691, 24
  %1722 = getelementptr inbounds i32, i32* %1678, i64 %1721
  %1723 = bitcast i32* %1722 to <4 x i32>*
  %1724 = load <4 x i32>, <4 x i32>* %1723, align 4
  %1725 = getelementptr inbounds i32, i32* %1722, i64 4
  %1726 = bitcast i32* %1725 to <4 x i32>*
  %1727 = load <4 x i32>, <4 x i32>* %1726, align 4
  %1728 = mul nsw <4 x i32> %1724, %1719
  %1729 = mul nsw <4 x i32> %1727, %1720
  %1730 = add i64 %1691, 32
  %1731 = add i64 %1694, -4
  %1732 = icmp eq i64 %1731, 0
  br i1 %1732, label %1733, label %1690, !llvm.loop !168

1733:                                             ; preds = %1690, %1681
  %1734 = phi <4 x i32> [ undef, %1681 ], [ %1728, %1690 ]
  %1735 = phi <4 x i32> [ undef, %1681 ], [ %1729, %1690 ]
  %1736 = phi i64 [ 0, %1681 ], [ %1730, %1690 ]
  %1737 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1681 ], [ %1728, %1690 ]
  %1738 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1681 ], [ %1729, %1690 ]
  %1739 = icmp eq i64 %1686, 0
  br i1 %1739, label %1756, label %1740

1740:                                             ; preds = %1733, %1740
  %1741 = phi i64 [ %1753, %1740 ], [ %1736, %1733 ]
  %1742 = phi <4 x i32> [ %1751, %1740 ], [ %1737, %1733 ]
  %1743 = phi <4 x i32> [ %1752, %1740 ], [ %1738, %1733 ]
  %1744 = phi i64 [ %1754, %1740 ], [ %1686, %1733 ]
  %1745 = getelementptr inbounds i32, i32* %1678, i64 %1741
  %1746 = bitcast i32* %1745 to <4 x i32>*
  %1747 = load <4 x i32>, <4 x i32>* %1746, align 4
  %1748 = getelementptr inbounds i32, i32* %1745, i64 4
  %1749 = bitcast i32* %1748 to <4 x i32>*
  %1750 = load <4 x i32>, <4 x i32>* %1749, align 4
  %1751 = mul nsw <4 x i32> %1747, %1742
  %1752 = mul nsw <4 x i32> %1750, %1743
  %1753 = add i64 %1741, 8
  %1754 = add i64 %1744, -1
  %1755 = icmp eq i64 %1754, 0
  br i1 %1755, label %1756, label %1740, !llvm.loop !169

1756:                                             ; preds = %1740, %1733
  %1757 = phi <4 x i32> [ %1734, %1733 ], [ %1751, %1740 ]
  %1758 = phi <4 x i32> [ %1735, %1733 ], [ %1752, %1740 ]
  %1759 = mul <4 x i32> %1758, %1757
  %1760 = shufflevector <4 x i32> %1759, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1761 = mul <4 x i32> %1759, %1760
  %1762 = shufflevector <4 x i32> %1761, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1763 = mul <4 x i32> %1761, %1762
  %1764 = extractelement <4 x i32> %1763, i32 0
  %1765 = icmp eq i64 %1682, %1679
  br i1 %1765, label %1777, label %1766

1766:                                             ; preds = %1756, %1677
  %1767 = phi i64 [ 0, %1677 ], [ %1682, %1756 ]
  %1768 = phi i32 [ 1, %1677 ], [ %1764, %1756 ]
  br label %1769

1769:                                             ; preds = %1766, %1769
  %1770 = phi i64 [ %1775, %1769 ], [ %1767, %1766 ]
  %1771 = phi i32 [ %1774, %1769 ], [ %1768, %1766 ]
  %1772 = getelementptr inbounds i32, i32* %1678, i64 %1770
  %1773 = load i32, i32* %1772, align 4
  %1774 = mul nsw i32 %1773, %1771
  %1775 = add nuw nsw i64 %1770, 1
  %1776 = icmp eq i64 %1775, %1679
  br i1 %1776, label %1777, label %1769, !llvm.loop !170

1777:                                             ; preds = %1769, %1756, %1674
  %1778 = phi i32 [ 1, %1674 ], [ %1764, %1756 ], [ %1774, %1769 ]
  %1779 = icmp eq i32 %1558, %1668
  br i1 %1779, label %1781, label %1780

1780:                                             ; preds = %1777
  tail call void @abort() #13
  unreachable

1781:                                             ; preds = %1777
  %1782 = icmp eq i32 %1558, %1778
  br i1 %1782, label %1784, label %1783

1783:                                             ; preds = %1781
  tail call void @abort() #13
  unreachable

1784:                                             ; preds = %1781
  %1785 = trunc i32 %1339 to i16
  %1786 = trunc i32 %1341 to i16
  %1787 = icmp eq i32 %1335, 0
  %1788 = select i1 %1787, i16* %1376, i16* %1411
  %1789 = select i1 %1787, i16* %1411, i16* %1376
  %1790 = select i1 %1787, i32 %1337, i32 %1335
  %1791 = sub nsw i32 0, %1790
  %1792 = icmp sgt i32 %1558, 0
  br i1 %1792, label %1793, label %1893

1793:                                             ; preds = %1784
  %1794 = zext i32 %1791 to i64
  %1795 = shl nsw i64 -1, %1794
  %1796 = trunc i64 %1795 to i16
  %1797 = xor i16 %1796, -1
  %1798 = ashr i16 %1797, 1
  %1799 = zext i32 %1558 to i64
  %1800 = icmp ult i32 %1558, 8
  br i1 %1800, label %1861, label %1801

1801:                                             ; preds = %1793
  %1802 = getelementptr i16, i16* %1448, i64 %1799
  %1803 = getelementptr i16, i16* %1788, i64 %1799
  %1804 = bitcast i16* %1803 to i8*
  %1805 = getelementptr i16, i16* %1789, i64 %1799
  %1806 = bitcast i16* %1805 to i8*
  %1807 = icmp ult i8* %1447, %1804
  %1808 = icmp ult i16* %1788, %1802
  %1809 = and i1 %1807, %1808
  %1810 = icmp ult i8* %1447, %1806
  %1811 = icmp ult i16* %1789, %1802
  %1812 = and i1 %1810, %1811
  %1813 = or i1 %1809, %1812
  br i1 %1813, label %1861, label %1814

1814:                                             ; preds = %1801
  %1815 = and i64 %1799, 4294967288
  %1816 = insertelement <8 x i16> undef, i16 %1797, i32 0
  %1817 = shufflevector <8 x i16> %1816, <8 x i16> undef, <8 x i32> zeroinitializer
  %1818 = insertelement <8 x i16> undef, i16 %1798, i32 0
  %1819 = shufflevector <8 x i16> %1818, <8 x i16> undef, <8 x i32> zeroinitializer
  %1820 = insertelement <8 x i32> undef, i32 %1791, i32 0
  %1821 = shufflevector <8 x i32> %1820, <8 x i32> undef, <8 x i32> zeroinitializer
  %1822 = insertelement <8 x i16> undef, i16 %1785, i32 0
  %1823 = shufflevector <8 x i16> %1822, <8 x i16> undef, <8 x i32> zeroinitializer
  %1824 = insertelement <8 x i16> undef, i16 %1786, i32 0
  %1825 = shufflevector <8 x i16> %1824, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %1826

1826:                                             ; preds = %1826, %1814
  %1827 = phi i64 [ 0, %1814 ], [ %1857, %1826 ]
  %1828 = getelementptr inbounds i16, i16* %1788, i64 %1827
  %1829 = bitcast i16* %1828 to <8 x i16>*
  %1830 = load <8 x i16>, <8 x i16>* %1829, align 2, !alias.scope !171
  %1831 = getelementptr inbounds i16, i16* %1789, i64 %1827
  %1832 = bitcast i16* %1831 to <8 x i16>*
  %1833 = load <8 x i16>, <8 x i16>* %1832, align 2, !alias.scope !174
  %1834 = and <8 x i16> %1833, %1817
  %1835 = lshr <8 x i16> %1833, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %1836 = add nsw <8 x i16> %1835, %1819
  %1837 = sext <8 x i16> %1833 to <8 x i32>
  %1838 = ashr <8 x i32> %1837, %1821
  %1839 = icmp sgt <8 x i16> %1834, %1836
  %1840 = zext <8 x i1> %1839 to <8 x i32>
  %1841 = add nsw <8 x i32> %1838, %1840
  %1842 = shl <8 x i32> %1841, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1843 = ashr exact <8 x i32> %1842, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %1844 = sext <8 x i16> %1830 to <8 x i32>
  %1845 = add nsw <8 x i32> %1843, %1844
  %1846 = icmp sgt <8 x i32> %1845, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %1847 = select <8 x i1> %1846, <8 x i32> %1845, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %1848 = icmp slt <8 x i32> %1847, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %1849 = select <8 x i1> %1848, <8 x i32> %1847, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %1850 = trunc <8 x i32> %1849 to <8 x i16>
  %1851 = icmp slt <8 x i16> %1823, %1850
  %1852 = select <8 x i1> %1851, <8 x i16> %1850, <8 x i16> %1823
  %1853 = icmp slt <8 x i16> %1852, %1825
  %1854 = select <8 x i1> %1853, <8 x i16> %1852, <8 x i16> %1825
  %1855 = getelementptr inbounds i16, i16* %1448, i64 %1827
  %1856 = bitcast i16* %1855 to <8 x i16>*
  store <8 x i16> %1854, <8 x i16>* %1856, align 2, !alias.scope !176, !noalias !178
  %1857 = add i64 %1827, 8
  %1858 = icmp eq i64 %1857, %1815
  br i1 %1858, label %1859, label %1826, !llvm.loop !179

1859:                                             ; preds = %1826
  %1860 = icmp eq i64 %1815, %1799
  br i1 %1860, label %1893, label %1861

1861:                                             ; preds = %1859, %1801, %1793
  %1862 = phi i64 [ 0, %1801 ], [ 0, %1793 ], [ %1815, %1859 ]
  br label %1863

1863:                                             ; preds = %1861, %1863
  %1864 = phi i64 [ %1891, %1863 ], [ %1862, %1861 ]
  %1865 = getelementptr inbounds i16, i16* %1788, i64 %1864
  %1866 = load i16, i16* %1865, align 2
  %1867 = getelementptr inbounds i16, i16* %1789, i64 %1864
  %1868 = load i16, i16* %1867, align 2
  %1869 = and i16 %1868, %1797
  %1870 = lshr i16 %1868, 15
  %1871 = add nsw i16 %1870, %1798
  %1872 = sext i16 %1868 to i32
  %1873 = ashr i32 %1872, %1791
  %1874 = icmp sgt i16 %1869, %1871
  %1875 = zext i1 %1874 to i32
  %1876 = add nsw i32 %1873, %1875
  %1877 = shl i32 %1876, 16
  %1878 = ashr exact i32 %1877, 16
  %1879 = sext i16 %1866 to i32
  %1880 = add nsw i32 %1878, %1879
  %1881 = icmp sgt i32 %1880, -32768
  %1882 = select i1 %1881, i32 %1880, i32 -32768
  %1883 = icmp slt i32 %1882, 32767
  %1884 = select i1 %1883, i32 %1882, i32 32767
  %1885 = trunc i32 %1884 to i16
  %1886 = icmp slt i16 %1785, %1885
  %1887 = select i1 %1886, i16 %1885, i16 %1785
  %1888 = icmp slt i16 %1887, %1786
  %1889 = select i1 %1888, i16 %1887, i16 %1786
  %1890 = getelementptr inbounds i16, i16* %1448, i64 %1864
  store i16 %1889, i16* %1890, align 2
  %1891 = add nuw nsw i64 %1864, 1
  %1892 = icmp eq i64 %1891, %1799
  br i1 %1892, label %1893, label %1863, !llvm.loop !180

1893:                                             ; preds = %1863, %1859, %1784
  br i1 %1669, label %1894, label %1900

1894:                                             ; preds = %1893
  %1895 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %25, i64 0, i32 1, i32 0
  %1896 = load i32*, i32** %1895, align 8
  %1897 = icmp eq i32* %1896, null
  br i1 %1897, label %1900, label %1898

1898:                                             ; preds = %1894
  %1899 = bitcast i32* %1896 to i8*
  tail call void @_ZdaPv(i8* %1899) #11
  br label %1900

1900:                                             ; preds = %1893, %1894, %1898
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1412) #12
  br i1 %1559, label %1901, label %1907

1901:                                             ; preds = %1900
  %1902 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %24, i64 0, i32 1, i32 0
  %1903 = load i32*, i32** %1902, align 8
  %1904 = icmp eq i32* %1903, null
  br i1 %1904, label %1907, label %1905

1905:                                             ; preds = %1901
  %1906 = bitcast i32* %1903 to i8*
  tail call void @_ZdaPv(i8* %1906) #11
  br label %1907

1907:                                             ; preds = %1900, %1901, %1905
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1377) #12
  br i1 %1449, label %1908, label %1914

1908:                                             ; preds = %1907
  %1909 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %23, i64 0, i32 1, i32 0
  %1910 = load i32*, i32** %1909, align 8
  %1911 = icmp eq i32* %1910, null
  br i1 %1911, label %1914, label %1912

1912:                                             ; preds = %1908
  %1913 = bitcast i32* %1910 to i8*
  tail call void @_ZdaPv(i8* %1913) #11
  br label %1914

1914:                                             ; preds = %1907, %1908, %1912
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1342) #12
  br label %1915

1915:                                             ; preds = %7, %1914, %1331
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE(%"class.tflite::RuntimeShape"* dereferenceable(32), %"class.tflite::RuntimeShape"* dereferenceable(32), %"struct.tflite::ArithmeticParams"*) local_unnamed_addr #7 comdat {
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp slt i32 %8, %10
  %12 = select i1 %11, i32 %10, i32 %8
  %13 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %2, i64 0, i32 0
  store i8 4, i8* %13, align 4
  %14 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 32, i1 false)
  %15 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %12, i32* %15, align 8
  %16 = icmp sgt i32 %12, 5
  br i1 %16, label %17, label %23

17:                                               ; preds = %3
  %18 = sext i32 %12 to i64
  %19 = shl nuw nsw i64 %18, 2
  %20 = tail call i8* @_Znam(i64 %19) #11
  %21 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %22 = bitcast i32** %21 to i8**
  store i8* %20, i8** %22, align 8
  br label %25

23:                                               ; preds = %3
  %24 = icmp sgt i32 %12, 0
  br i1 %24, label %25, label %73

25:                                               ; preds = %23, %17
  %26 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %27 = bitcast %union.anon* %26 to [5 x i32]*
  %28 = getelementptr inbounds %union.anon, %union.anon* %26, i64 0, i32 0
  %29 = zext i32 %12 to i64
  %30 = add nsw i64 %29, -1
  %31 = and i64 %29, 3
  %32 = icmp ult i64 %30, 3
  br i1 %32, label %60, label %33

33:                                               ; preds = %25
  %34 = sub nsw i64 %29, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %57, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %58, %35 ]
  %38 = getelementptr inbounds [5 x i32], [5 x i32]* %27, i64 0, i64 %36
  %39 = load i32*, i32** %28, align 8
  %40 = getelementptr inbounds i32, i32* %39, i64 %36
  %41 = select i1 %16, i32* %40, i32* %38
  store i32 1, i32* %41, align 4
  %42 = or i64 %36, 1
  %43 = getelementptr inbounds [5 x i32], [5 x i32]* %27, i64 0, i64 %42
  %44 = load i32*, i32** %28, align 8
  %45 = getelementptr inbounds i32, i32* %44, i64 %42
  %46 = select i1 %16, i32* %45, i32* %43
  store i32 1, i32* %46, align 4
  %47 = or i64 %36, 2
  %48 = getelementptr inbounds [5 x i32], [5 x i32]* %27, i64 0, i64 %47
  %49 = load i32*, i32** %28, align 8
  %50 = getelementptr inbounds i32, i32* %49, i64 %47
  %51 = select i1 %16, i32* %50, i32* %48
  store i32 1, i32* %51, align 4
  %52 = or i64 %36, 3
  %53 = getelementptr inbounds [5 x i32], [5 x i32]* %27, i64 0, i64 %52
  %54 = load i32*, i32** %28, align 8
  %55 = getelementptr inbounds i32, i32* %54, i64 %52
  %56 = select i1 %16, i32* %55, i32* %53
  store i32 1, i32* %56, align 4
  %57 = add nuw nsw i64 %36, 4
  %58 = add i64 %37, -4
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %35

60:                                               ; preds = %35, %25
  %61 = phi i64 [ 0, %25 ], [ %57, %35 ]
  %62 = icmp eq i64 %31, 0
  br i1 %62, label %73, label %63

63:                                               ; preds = %60, %63
  %64 = phi i64 [ %70, %63 ], [ %61, %60 ]
  %65 = phi i64 [ %71, %63 ], [ %31, %60 ]
  %66 = getelementptr inbounds [5 x i32], [5 x i32]* %27, i64 0, i64 %64
  %67 = load i32*, i32** %28, align 8
  %68 = getelementptr inbounds i32, i32* %67, i64 %64
  %69 = select i1 %16, i32* %68, i32* %66
  store i32 1, i32* %69, align 4
  %70 = add nuw nsw i64 %64, 1
  %71 = add i64 %65, -1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %63, !llvm.loop !181

73:                                               ; preds = %60, %63, %23
  %74 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %74) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %74, i8 -86, i64 32, i1 false)
  %75 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %75, align 8, !alias.scope !182
  %76 = load i32, i32* %7, align 8, !noalias !182
  %77 = icmp slt i32 %12, %76
  br i1 %77, label %78, label %79

78:                                               ; preds = %73
  tail call void @abort() #13, !noalias !182
  unreachable

79:                                               ; preds = %73
  store i32 %12, i32* %75, align 8, !alias.scope !182
  br i1 %16, label %80, label %86

80:                                               ; preds = %79
  %81 = sext i32 %12 to i64
  %82 = shl nuw nsw i64 %81, 2
  %83 = tail call i8* @_Znam(i64 %82) #11, !noalias !182
  %84 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %85 = bitcast i32** %84 to i8**
  store i8* %83, i8** %85, align 8, !alias.scope !182
  br label %86

86:                                               ; preds = %80, %79
  %87 = sub i32 %12, %76
  %88 = icmp sgt i32 %87, 0
  %89 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  br i1 %88, label %90, label %139

90:                                               ; preds = %86
  %91 = bitcast %union.anon* %89 to [5 x i32]*
  %92 = getelementptr inbounds %union.anon, %union.anon* %89, i64 0, i32 0
  %93 = zext i32 %87 to i64
  %94 = add nsw i64 %93, -1
  %95 = and i64 %93, 3
  %96 = icmp ult i64 %94, 3
  br i1 %96, label %99, label %97

97:                                               ; preds = %90
  %98 = sub nsw i64 %93, %95
  br label %114

99:                                               ; preds = %114, %90
  %100 = phi i64 [ 0, %90 ], [ %136, %114 ]
  %101 = icmp eq i64 %95, 0
  br i1 %101, label %112, label %102

102:                                              ; preds = %99, %102
  %103 = phi i64 [ %109, %102 ], [ %100, %99 ]
  %104 = phi i64 [ %110, %102 ], [ %95, %99 ]
  %105 = getelementptr inbounds [5 x i32], [5 x i32]* %91, i64 0, i64 %103
  %106 = load i32*, i32** %92, align 8
  %107 = getelementptr inbounds i32, i32* %106, i64 %103
  %108 = select i1 %16, i32* %107, i32* %105
  store i32 1, i32* %108, align 4
  %109 = add nuw nsw i64 %103, 1
  %110 = add i64 %104, -1
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %112, label %102, !llvm.loop !185

112:                                              ; preds = %102, %99
  %113 = load i32, i32* %7, align 8, !noalias !182
  br label %139

114:                                              ; preds = %114, %97
  %115 = phi i64 [ 0, %97 ], [ %136, %114 ]
  %116 = phi i64 [ %98, %97 ], [ %137, %114 ]
  %117 = getelementptr inbounds [5 x i32], [5 x i32]* %91, i64 0, i64 %115
  %118 = load i32*, i32** %92, align 8
  %119 = getelementptr inbounds i32, i32* %118, i64 %115
  %120 = select i1 %16, i32* %119, i32* %117
  store i32 1, i32* %120, align 4
  %121 = or i64 %115, 1
  %122 = getelementptr inbounds [5 x i32], [5 x i32]* %91, i64 0, i64 %121
  %123 = load i32*, i32** %92, align 8
  %124 = getelementptr inbounds i32, i32* %123, i64 %121
  %125 = select i1 %16, i32* %124, i32* %122
  store i32 1, i32* %125, align 4
  %126 = or i64 %115, 2
  %127 = getelementptr inbounds [5 x i32], [5 x i32]* %91, i64 0, i64 %126
  %128 = load i32*, i32** %92, align 8
  %129 = getelementptr inbounds i32, i32* %128, i64 %126
  %130 = select i1 %16, i32* %129, i32* %127
  store i32 1, i32* %130, align 4
  %131 = or i64 %115, 3
  %132 = getelementptr inbounds [5 x i32], [5 x i32]* %91, i64 0, i64 %131
  %133 = load i32*, i32** %92, align 8
  %134 = getelementptr inbounds i32, i32* %133, i64 %131
  %135 = select i1 %16, i32* %134, i32* %132
  store i32 1, i32* %135, align 4
  %136 = add nuw nsw i64 %115, 4
  %137 = add i64 %116, -4
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %99, label %114

139:                                              ; preds = %86, %112
  %140 = phi i32 [ %113, %112 ], [ %76, %86 ]
  %141 = getelementptr inbounds %union.anon, %union.anon* %89, i64 0, i32 0
  %142 = load i32*, i32** %141, align 8, !alias.scope !182
  %143 = bitcast %union.anon* %89 to i32*
  %144 = select i1 %16, i32* %142, i32* %143
  %145 = sext i32 %87 to i64
  %146 = getelementptr inbounds i32, i32* %144, i64 %145
  %147 = bitcast i32* %146 to i8*
  %148 = icmp sgt i32 %140, 5
  %149 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %0, i64 0, i32 1
  %150 = getelementptr inbounds %union.anon, %union.anon* %149, i64 0, i32 0
  %151 = load i32*, i32** %150, align 8, !noalias !182
  %152 = bitcast %union.anon* %149 to i32*
  %153 = select i1 %148, i32* %151, i32* %152
  %154 = bitcast i32* %153 to i8*
  %155 = sext i32 %140 to i64
  %156 = shl nsw i64 %155, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %147, i8* align 4 %154, i64 %156, i1 false) #12
  %157 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %157) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %157, i8 -86, i64 32, i1 false)
  %158 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %158, align 8, !alias.scope !186
  %159 = load i32, i32* %9, align 8, !noalias !186
  %160 = icmp slt i32 %12, %159
  br i1 %160, label %161, label %162

161:                                              ; preds = %139
  tail call void @abort() #13, !noalias !186
  unreachable

162:                                              ; preds = %139
  store i32 %12, i32* %158, align 8, !alias.scope !186
  br i1 %16, label %163, label %169

163:                                              ; preds = %162
  %164 = sext i32 %12 to i64
  %165 = shl nuw nsw i64 %164, 2
  %166 = tail call i8* @_Znam(i64 %165) #11, !noalias !186
  %167 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %168 = bitcast i32** %167 to i8**
  store i8* %166, i8** %168, align 8, !alias.scope !186
  br label %169

169:                                              ; preds = %163, %162
  %170 = sub i32 %12, %159
  %171 = icmp sgt i32 %170, 0
  %172 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  br i1 %171, label %173, label %222

173:                                              ; preds = %169
  %174 = bitcast %union.anon* %172 to [5 x i32]*
  %175 = getelementptr inbounds %union.anon, %union.anon* %172, i64 0, i32 0
  %176 = zext i32 %170 to i64
  %177 = add nsw i64 %176, -1
  %178 = and i64 %176, 3
  %179 = icmp ult i64 %177, 3
  br i1 %179, label %182, label %180

180:                                              ; preds = %173
  %181 = sub nsw i64 %176, %178
  br label %197

182:                                              ; preds = %197, %173
  %183 = phi i64 [ 0, %173 ], [ %219, %197 ]
  %184 = icmp eq i64 %178, 0
  br i1 %184, label %195, label %185

185:                                              ; preds = %182, %185
  %186 = phi i64 [ %192, %185 ], [ %183, %182 ]
  %187 = phi i64 [ %193, %185 ], [ %178, %182 ]
  %188 = getelementptr inbounds [5 x i32], [5 x i32]* %174, i64 0, i64 %186
  %189 = load i32*, i32** %175, align 8
  %190 = getelementptr inbounds i32, i32* %189, i64 %186
  %191 = select i1 %16, i32* %190, i32* %188
  store i32 1, i32* %191, align 4
  %192 = add nuw nsw i64 %186, 1
  %193 = add i64 %187, -1
  %194 = icmp eq i64 %193, 0
  br i1 %194, label %195, label %185, !llvm.loop !189

195:                                              ; preds = %185, %182
  %196 = load i32, i32* %9, align 8, !noalias !186
  br label %222

197:                                              ; preds = %197, %180
  %198 = phi i64 [ 0, %180 ], [ %219, %197 ]
  %199 = phi i64 [ %181, %180 ], [ %220, %197 ]
  %200 = getelementptr inbounds [5 x i32], [5 x i32]* %174, i64 0, i64 %198
  %201 = load i32*, i32** %175, align 8
  %202 = getelementptr inbounds i32, i32* %201, i64 %198
  %203 = select i1 %16, i32* %202, i32* %200
  store i32 1, i32* %203, align 4
  %204 = or i64 %198, 1
  %205 = getelementptr inbounds [5 x i32], [5 x i32]* %174, i64 0, i64 %204
  %206 = load i32*, i32** %175, align 8
  %207 = getelementptr inbounds i32, i32* %206, i64 %204
  %208 = select i1 %16, i32* %207, i32* %205
  store i32 1, i32* %208, align 4
  %209 = or i64 %198, 2
  %210 = getelementptr inbounds [5 x i32], [5 x i32]* %174, i64 0, i64 %209
  %211 = load i32*, i32** %175, align 8
  %212 = getelementptr inbounds i32, i32* %211, i64 %209
  %213 = select i1 %16, i32* %212, i32* %210
  store i32 1, i32* %213, align 4
  %214 = or i64 %198, 3
  %215 = getelementptr inbounds [5 x i32], [5 x i32]* %174, i64 0, i64 %214
  %216 = load i32*, i32** %175, align 8
  %217 = getelementptr inbounds i32, i32* %216, i64 %214
  %218 = select i1 %16, i32* %217, i32* %215
  store i32 1, i32* %218, align 4
  %219 = add nuw nsw i64 %198, 4
  %220 = add i64 %199, -4
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %182, label %197

222:                                              ; preds = %169, %195
  %223 = phi i32 [ %196, %195 ], [ %159, %169 ]
  %224 = getelementptr inbounds %union.anon, %union.anon* %172, i64 0, i32 0
  %225 = load i32*, i32** %224, align 8, !alias.scope !186
  %226 = bitcast %union.anon* %172 to i32*
  %227 = select i1 %16, i32* %225, i32* %226
  %228 = sext i32 %170 to i64
  %229 = getelementptr inbounds i32, i32* %227, i64 %228
  %230 = bitcast i32* %229 to i8*
  %231 = icmp sgt i32 %223, 5
  %232 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %233 = getelementptr inbounds %union.anon, %union.anon* %232, i64 0, i32 0
  %234 = load i32*, i32** %233, align 8, !noalias !186
  %235 = bitcast %union.anon* %232 to i32*
  %236 = select i1 %231, i32* %234, i32* %235
  %237 = bitcast i32* %236 to i8*
  %238 = sext i32 %223 to i64
  %239 = shl nsw i64 %238, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %230, i8* align 4 %237, i64 %239, i1 false) #12
  %240 = load i32, i32* %75, align 8
  %241 = load i32, i32* %158, align 8
  %242 = icmp eq i32 %240, %241
  br i1 %242, label %243, label %256

243:                                              ; preds = %222
  %244 = icmp sgt i32 %240, 5
  %245 = load i32*, i32** %141, align 8
  %246 = select i1 %244, i32* %245, i32* %143
  %247 = bitcast i32* %246 to i8*
  %248 = load i32*, i32** %224, align 8
  %249 = select i1 %244, i32* %248, i32* %226
  %250 = bitcast i32* %249 to i8*
  %251 = sext i32 %240 to i64
  %252 = shl nsw i64 %251, 2
  %253 = call i32 @bcmp(i8* %247, i8* %250, i64 %252) #12
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %255, label %256

255:                                              ; preds = %243
  store i8 1, i8* %13, align 4
  br label %556

256:                                              ; preds = %222, %243
  %257 = add nsw i32 %12, -1
  %258 = icmp sgt i32 %12, 0
  br i1 %258, label %259, label %298

259:                                              ; preds = %256
  %260 = icmp sgt i32 %240, 5
  %261 = load i32*, i32** %141, align 8
  %262 = bitcast %union.anon* %89 to [5 x i32]*
  %263 = icmp sgt i32 %241, 5
  %264 = load i32*, i32** %224, align 8
  %265 = bitcast %union.anon* %172 to [5 x i32]*
  %266 = sext i32 %12 to i64
  br label %267

267:                                              ; preds = %259, %296
  %268 = phi i64 [ %266, %259 ], [ %269, %296 ]
  %269 = add nsw i64 %268, -1
  %270 = getelementptr inbounds i32, i32* %261, i64 %269
  %271 = getelementptr inbounds [5 x i32], [5 x i32]* %262, i64 0, i64 %269
  %272 = select i1 %260, i32* %270, i32* %271
  %273 = load i32, i32* %272, align 4
  %274 = getelementptr inbounds i32, i32* %264, i64 %269
  %275 = getelementptr inbounds [5 x i32], [5 x i32]* %265, i64 0, i64 %269
  %276 = select i1 %263, i32* %274, i32* %275
  %277 = load i32, i32* %276, align 4
  %278 = icmp eq i32 %273, %277
  br i1 %278, label %296, label %279

279:                                              ; preds = %267
  %280 = shl i64 %269, 32
  %281 = ashr exact i64 %280, 32
  %282 = getelementptr inbounds i32, i32* %261, i64 %281
  %283 = getelementptr inbounds [5 x i32], [5 x i32]* %262, i64 0, i64 %281
  %284 = select i1 %260, i32* %282, i32* %283
  %285 = load i32, i32* %284, align 4
  %286 = icmp eq i32 %285, 1
  br i1 %286, label %287, label %288

287:                                              ; preds = %279
  store i8 2, i8* %13, align 4
  br label %298

288:                                              ; preds = %279
  %289 = getelementptr inbounds i32, i32* %264, i64 %281
  %290 = getelementptr inbounds [5 x i32], [5 x i32]* %265, i64 0, i64 %281
  %291 = select i1 %263, i32* %289, i32* %290
  %292 = load i32, i32* %291, align 4
  %293 = icmp eq i32 %292, 1
  br i1 %293, label %294, label %295

294:                                              ; preds = %288
  store i8 3, i8* %13, align 4
  br label %298

295:                                              ; preds = %288
  store i8 4, i8* %13, align 4
  br label %556

296:                                              ; preds = %267
  %297 = icmp sgt i64 %269, 0
  br i1 %297, label %267, label %298

298:                                              ; preds = %296, %256, %294, %287
  %299 = load i8, i8* %13, align 4
  %300 = and i8 %299, -2
  %301 = icmp eq i8 %300, 2
  br i1 %301, label %303, label %302

302:                                              ; preds = %298
  store i8 1, i8* %13, align 4
  br label %556

303:                                              ; preds = %298
  %304 = icmp eq i8 %299, 3
  %305 = select i1 %304, %"class.tflite::RuntimeShape"* %6, %"class.tflite::RuntimeShape"* %5
  %306 = select i1 %304, %"class.tflite::RuntimeShape"* %5, %"class.tflite::RuntimeShape"* %6
  %307 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %2, i64 0, i32 15, i64 0
  %308 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %2, i64 0, i32 15, i64 1
  %309 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %2, i64 0, i32 15, i64 2
  %310 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %2, i64 0, i32 15, i64 3
  %311 = bitcast i32* %307 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %311, align 4
  %312 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %2, i64 0, i32 15, i64 4
  store i32 1, i32* %312, align 4
  br i1 %258, label %313, label %363

313:                                              ; preds = %303
  %314 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %305, i64 0, i32 0
  %315 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %305, i64 0, i32 1
  %316 = bitcast %union.anon* %315 to [5 x i32]*
  %317 = getelementptr inbounds %union.anon, %union.anon* %315, i64 0, i32 0
  %318 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %306, i64 0, i32 0
  %319 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %306, i64 0, i32 1
  %320 = bitcast %union.anon* %319 to [5 x i32]*
  %321 = getelementptr inbounds %union.anon, %union.anon* %319, i64 0, i32 0
  %322 = sext i32 %12 to i64
  %323 = load i32, i32* %314, align 8
  %324 = icmp sgt i32 %323, 5
  br label %325

325:                                              ; preds = %313, %355
  %326 = phi i32 [ 1, %313 ], [ %358, %355 ]
  %327 = phi i64 [ %322, %313 ], [ %329, %355 ]
  %328 = phi i32 [ %257, %313 ], [ %359, %355 ]
  %329 = add nsw i64 %327, -1
  br i1 %324, label %330, label %333

330:                                              ; preds = %325
  %331 = load i32*, i32** %317, align 8
  %332 = getelementptr inbounds i32, i32* %331, i64 %329
  br label %335

333:                                              ; preds = %325
  %334 = getelementptr inbounds [5 x i32], [5 x i32]* %316, i64 0, i64 %329
  br label %335

335:                                              ; preds = %330, %333
  %336 = phi i32* [ %332, %330 ], [ %334, %333 ]
  %337 = load i32, i32* %336, align 4
  %338 = load i32, i32* %318, align 8
  %339 = icmp sgt i32 %338, 5
  br i1 %339, label %340, label %343

340:                                              ; preds = %335
  %341 = load i32*, i32** %321, align 8
  %342 = getelementptr inbounds i32, i32* %341, i64 %329
  br label %345

343:                                              ; preds = %335
  %344 = getelementptr inbounds [5 x i32], [5 x i32]* %320, i64 0, i64 %329
  br label %345

345:                                              ; preds = %340, %343
  %346 = phi i32* [ %342, %340 ], [ %344, %343 ]
  %347 = load i32, i32* %346, align 4
  %348 = icmp eq i32 %337, %347
  br i1 %348, label %349, label %361

349:                                              ; preds = %345
  br i1 %339, label %350, label %353

350:                                              ; preds = %349
  %351 = load i32*, i32** %321, align 8
  %352 = getelementptr inbounds i32, i32* %351, i64 %329
  br label %355

353:                                              ; preds = %349
  %354 = getelementptr inbounds [5 x i32], [5 x i32]* %320, i64 0, i64 %329
  br label %355

355:                                              ; preds = %350, %353
  %356 = phi i32* [ %352, %350 ], [ %354, %353 ]
  %357 = load i32, i32* %356, align 4
  %358 = mul nsw i32 %326, %357
  store i32 %358, i32* %312, align 4
  %359 = add nsw i32 %328, -1
  %360 = icmp sgt i64 %329, 0
  br i1 %360, label %325, label %363

361:                                              ; preds = %345
  %362 = trunc i64 %329 to i32
  br label %363

363:                                              ; preds = %355, %361, %303
  %364 = phi i32 [ %257, %303 ], [ %362, %361 ], [ %359, %355 ]
  %365 = icmp sgt i32 %364, -1
  br i1 %365, label %366, label %556

366:                                              ; preds = %363
  %367 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %305, i64 0, i32 0
  %368 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %305, i64 0, i32 1
  %369 = bitcast %union.anon* %368 to [5 x i32]*
  %370 = getelementptr inbounds %union.anon, %union.anon* %368, i64 0, i32 0
  %371 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %306, i64 0, i32 0
  %372 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %306, i64 0, i32 1
  %373 = bitcast %union.anon* %372 to [5 x i32]*
  %374 = getelementptr inbounds %union.anon, %union.anon* %372, i64 0, i32 0
  %375 = sext i32 %364 to i64
  %376 = load i32, i32* %367, align 8
  %377 = icmp sgt i32 %376, 5
  br label %378

378:                                              ; preds = %366, %399
  %379 = phi i32 [ 1, %366 ], [ %402, %399 ]
  %380 = phi i64 [ %375, %366 ], [ %403, %399 ]
  %381 = phi i32 [ %364, %366 ], [ %404, %399 ]
  br i1 %377, label %382, label %385

382:                                              ; preds = %378
  %383 = load i32*, i32** %370, align 8
  %384 = getelementptr inbounds i32, i32* %383, i64 %380
  br label %387

385:                                              ; preds = %378
  %386 = getelementptr inbounds [5 x i32], [5 x i32]* %369, i64 0, i64 %380
  br label %387

387:                                              ; preds = %382, %385
  %388 = phi i32* [ %384, %382 ], [ %386, %385 ]
  %389 = load i32, i32* %388, align 4
  %390 = icmp eq i32 %389, 1
  br i1 %390, label %391, label %406

391:                                              ; preds = %387
  %392 = load i32, i32* %371, align 8
  %393 = icmp sgt i32 %392, 5
  br i1 %393, label %394, label %397

394:                                              ; preds = %391
  %395 = load i32*, i32** %374, align 8
  %396 = getelementptr inbounds i32, i32* %395, i64 %380
  br label %399

397:                                              ; preds = %391
  %398 = getelementptr inbounds [5 x i32], [5 x i32]* %373, i64 0, i64 %380
  br label %399

399:                                              ; preds = %394, %397
  %400 = phi i32* [ %396, %394 ], [ %398, %397 ]
  %401 = load i32, i32* %400, align 4
  %402 = mul nsw i32 %379, %401
  store i32 %402, i32* %310, align 4
  %403 = add nsw i64 %380, -1
  %404 = add nsw i32 %381, -1
  %405 = icmp sgt i64 %380, 0
  br i1 %405, label %378, label %408

406:                                              ; preds = %387
  %407 = trunc i64 %380 to i32
  br label %408

408:                                              ; preds = %399, %406
  %409 = phi i32 [ %407, %406 ], [ %404, %399 ]
  %410 = icmp sgt i32 %409, -1
  br i1 %410, label %411, label %556

411:                                              ; preds = %408
  %412 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %305, i64 0, i32 0
  %413 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %305, i64 0, i32 1
  %414 = bitcast %union.anon* %413 to [5 x i32]*
  %415 = getelementptr inbounds %union.anon, %union.anon* %413, i64 0, i32 0
  %416 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %306, i64 0, i32 0
  %417 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %306, i64 0, i32 1
  %418 = bitcast %union.anon* %417 to [5 x i32]*
  %419 = getelementptr inbounds %union.anon, %union.anon* %417, i64 0, i32 0
  %420 = sext i32 %409 to i64
  %421 = load i32, i32* %412, align 8
  %422 = icmp sgt i32 %421, 5
  br label %423

423:                                              ; preds = %411, %452
  %424 = phi i32 [ 1, %411 ], [ %455, %452 ]
  %425 = phi i64 [ %420, %411 ], [ %456, %452 ]
  %426 = phi i32 [ %409, %411 ], [ %457, %452 ]
  br i1 %422, label %427, label %430

427:                                              ; preds = %423
  %428 = load i32*, i32** %415, align 8
  %429 = getelementptr inbounds i32, i32* %428, i64 %425
  br label %432

430:                                              ; preds = %423
  %431 = getelementptr inbounds [5 x i32], [5 x i32]* %414, i64 0, i64 %425
  br label %432

432:                                              ; preds = %427, %430
  %433 = phi i32* [ %429, %427 ], [ %431, %430 ]
  %434 = load i32, i32* %433, align 4
  %435 = load i32, i32* %416, align 8
  %436 = icmp sgt i32 %435, 5
  br i1 %436, label %437, label %440

437:                                              ; preds = %432
  %438 = load i32*, i32** %419, align 8
  %439 = getelementptr inbounds i32, i32* %438, i64 %425
  br label %442

440:                                              ; preds = %432
  %441 = getelementptr inbounds [5 x i32], [5 x i32]* %418, i64 0, i64 %425
  br label %442

442:                                              ; preds = %437, %440
  %443 = phi i32* [ %439, %437 ], [ %441, %440 ]
  %444 = load i32, i32* %443, align 4
  %445 = icmp eq i32 %434, %444
  br i1 %445, label %446, label %459

446:                                              ; preds = %442
  br i1 %422, label %447, label %450

447:                                              ; preds = %446
  %448 = load i32*, i32** %415, align 8
  %449 = getelementptr inbounds i32, i32* %448, i64 %425
  br label %452

450:                                              ; preds = %446
  %451 = getelementptr inbounds [5 x i32], [5 x i32]* %414, i64 0, i64 %425
  br label %452

452:                                              ; preds = %447, %450
  %453 = phi i32* [ %449, %447 ], [ %451, %450 ]
  %454 = load i32, i32* %453, align 4
  %455 = mul nsw i32 %424, %454
  store i32 %455, i32* %309, align 4
  %456 = add nsw i64 %425, -1
  %457 = add nsw i32 %426, -1
  %458 = icmp sgt i64 %425, 0
  br i1 %458, label %423, label %461

459:                                              ; preds = %442
  %460 = trunc i64 %425 to i32
  br label %461

461:                                              ; preds = %452, %459
  %462 = phi i32 [ %460, %459 ], [ %457, %452 ]
  %463 = icmp sgt i32 %462, -1
  br i1 %463, label %464, label %556

464:                                              ; preds = %461
  %465 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %306, i64 0, i32 0
  %466 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %306, i64 0, i32 1
  %467 = bitcast %union.anon* %466 to [5 x i32]*
  %468 = getelementptr inbounds %union.anon, %union.anon* %466, i64 0, i32 0
  %469 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %305, i64 0, i32 0
  %470 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %305, i64 0, i32 1
  %471 = bitcast %union.anon* %470 to [5 x i32]*
  %472 = getelementptr inbounds %union.anon, %union.anon* %470, i64 0, i32 0
  %473 = sext i32 %462 to i64
  %474 = load i32, i32* %465, align 8
  %475 = icmp sgt i32 %474, 5
  br label %476

476:                                              ; preds = %464, %497
  %477 = phi i32 [ 1, %464 ], [ %500, %497 ]
  %478 = phi i64 [ %473, %464 ], [ %501, %497 ]
  %479 = phi i32 [ %462, %464 ], [ %502, %497 ]
  br i1 %475, label %480, label %483

480:                                              ; preds = %476
  %481 = load i32*, i32** %468, align 8
  %482 = getelementptr inbounds i32, i32* %481, i64 %478
  br label %485

483:                                              ; preds = %476
  %484 = getelementptr inbounds [5 x i32], [5 x i32]* %467, i64 0, i64 %478
  br label %485

485:                                              ; preds = %480, %483
  %486 = phi i32* [ %482, %480 ], [ %484, %483 ]
  %487 = load i32, i32* %486, align 4
  %488 = icmp eq i32 %487, 1
  br i1 %488, label %489, label %504

489:                                              ; preds = %485
  %490 = load i32, i32* %469, align 8
  %491 = icmp sgt i32 %490, 5
  br i1 %491, label %492, label %495

492:                                              ; preds = %489
  %493 = load i32*, i32** %472, align 8
  %494 = getelementptr inbounds i32, i32* %493, i64 %478
  br label %497

495:                                              ; preds = %489
  %496 = getelementptr inbounds [5 x i32], [5 x i32]* %471, i64 0, i64 %478
  br label %497

497:                                              ; preds = %492, %495
  %498 = phi i32* [ %494, %492 ], [ %496, %495 ]
  %499 = load i32, i32* %498, align 4
  %500 = mul nsw i32 %477, %499
  store i32 %500, i32* %308, align 4
  %501 = add nsw i64 %478, -1
  %502 = add nsw i32 %479, -1
  %503 = icmp sgt i64 %478, 0
  br i1 %503, label %476, label %506

504:                                              ; preds = %485
  %505 = trunc i64 %478 to i32
  br label %506

506:                                              ; preds = %497, %504
  %507 = phi i32 [ %505, %504 ], [ %502, %497 ]
  %508 = icmp sgt i32 %507, -1
  br i1 %508, label %509, label %556

509:                                              ; preds = %506
  %510 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %305, i64 0, i32 0
  %511 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %305, i64 0, i32 1
  %512 = bitcast %union.anon* %511 to [5 x i32]*
  %513 = getelementptr inbounds %union.anon, %union.anon* %511, i64 0, i32 0
  %514 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %306, i64 0, i32 0
  %515 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %306, i64 0, i32 1
  %516 = bitcast %union.anon* %515 to [5 x i32]*
  %517 = getelementptr inbounds %union.anon, %union.anon* %515, i64 0, i32 0
  %518 = sext i32 %507 to i64
  %519 = load i32, i32* %510, align 8
  %520 = icmp sgt i32 %519, 5
  br label %521

521:                                              ; preds = %509, %549
  %522 = phi i32 [ 1, %509 ], [ %552, %549 ]
  %523 = phi i64 [ %518, %509 ], [ %553, %549 ]
  br i1 %520, label %524, label %527

524:                                              ; preds = %521
  %525 = load i32*, i32** %513, align 8
  %526 = getelementptr inbounds i32, i32* %525, i64 %523
  br label %529

527:                                              ; preds = %521
  %528 = getelementptr inbounds [5 x i32], [5 x i32]* %512, i64 0, i64 %523
  br label %529

529:                                              ; preds = %524, %527
  %530 = phi i32* [ %526, %524 ], [ %528, %527 ]
  %531 = load i32, i32* %530, align 4
  %532 = load i32, i32* %514, align 8
  %533 = icmp sgt i32 %532, 5
  br i1 %533, label %534, label %537

534:                                              ; preds = %529
  %535 = load i32*, i32** %517, align 8
  %536 = getelementptr inbounds i32, i32* %535, i64 %523
  br label %539

537:                                              ; preds = %529
  %538 = getelementptr inbounds [5 x i32], [5 x i32]* %516, i64 0, i64 %523
  br label %539

539:                                              ; preds = %534, %537
  %540 = phi i32* [ %536, %534 ], [ %538, %537 ]
  %541 = load i32, i32* %540, align 4
  %542 = icmp eq i32 %531, %541
  br i1 %542, label %543, label %555

543:                                              ; preds = %539
  br i1 %533, label %544, label %547

544:                                              ; preds = %543
  %545 = load i32*, i32** %517, align 8
  %546 = getelementptr inbounds i32, i32* %545, i64 %523
  br label %549

547:                                              ; preds = %543
  %548 = getelementptr inbounds [5 x i32], [5 x i32]* %516, i64 0, i64 %523
  br label %549

549:                                              ; preds = %544, %547
  %550 = phi i32* [ %546, %544 ], [ %548, %547 ]
  %551 = load i32, i32* %550, align 4
  %552 = mul nsw i32 %522, %551
  store i32 %552, i32* %307, align 4
  %553 = add nsw i64 %523, -1
  %554 = icmp sgt i64 %523, 0
  br i1 %554, label %521, label %556

555:                                              ; preds = %539
  store i8 4, i8* %13, align 4
  br label %556

556:                                              ; preds = %549, %363, %408, %461, %506, %555, %295, %302, %255
  %557 = phi i1 [ false, %255 ], [ false, %302 ], [ true, %295 ], [ true, %555 ], [ true, %506 ], [ true, %461 ], [ true, %408 ], [ true, %363 ], [ true, %549 ]
  %558 = icmp sgt i32 %241, 5
  br i1 %558, label %559, label %565

559:                                              ; preds = %556
  %560 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 0
  %561 = load i32*, i32** %560, align 8
  %562 = icmp eq i32* %561, null
  br i1 %562, label %565, label %563

563:                                              ; preds = %559
  %564 = bitcast i32* %561 to i8*
  tail call void @_ZdaPv(i8* %564) #11
  br label %565

565:                                              ; preds = %556, %559, %563
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %157) #12
  %566 = icmp sgt i32 %240, 5
  br i1 %566, label %567, label %573

567:                                              ; preds = %565
  %568 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 0
  %569 = load i32*, i32** %568, align 8
  %570 = icmp eq i32* %569, null
  br i1 %570, label %573, label %571

571:                                              ; preds = %567
  %572 = bitcast i32* %569 to i8*
  tail call void @_ZdaPv(i8* %572) #11
  br label %573

573:                                              ; preds = %565, %567, %571
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %74) #12
  br i1 %16, label %574, label %580

574:                                              ; preds = %573
  %575 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %576 = load i32*, i32** %575, align 8
  %577 = icmp eq i32* %576, null
  br i1 %577, label %580, label %578

578:                                              ; preds = %574
  %579 = bitcast i32* %576 to i8*
  tail call void @_ZdaPv(i8* %579) #11
  br label %580

580:                                              ; preds = %573, %574, %578
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #12
  ret i1 %557
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKiS6_S8_S6_Pi(%"struct.tflite::ArithmeticParams"* dereferenceable(80), %"class.tflite::RuntimeShape"* dereferenceable(32), i32*, %"class.tflite::RuntimeShape"* dereferenceable(32), i32*, %"class.tflite::RuntimeShape"* dereferenceable(32), i32*) local_unnamed_addr #7 comdat {
  %8 = alloca %"struct.tflite::NdArrayDesc", align 4
  %9 = alloca %"struct.tflite::NdArrayDesc", align 4
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = bitcast %"struct.tflite::NdArrayDesc"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #12
  %12 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 0
  %13 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 1
  %14 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 2
  %15 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 3
  %16 = bitcast %"struct.tflite::NdArrayDesc"* %9 to i8*
  %17 = bitcast %"struct.tflite::NdArrayDesc"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %17, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #12
  %18 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 0
  %19 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 1
  %20 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 2
  %21 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 3
  %22 = bitcast %"struct.tflite::NdArrayDesc"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %22, i8 -86, i64 32, i1 false)
  call void @_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_(%"class.tflite::RuntimeShape"* dereferenceable(32) %1, %"class.tflite::RuntimeShape"* dereferenceable(32) %3, %"struct.tflite::NdArrayDesc"* nonnull %8, %"struct.tflite::NdArrayDesc"* nonnull %9)
  %23 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %23) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 32, i1 false)
  %24 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %24, align 8, !alias.scope !190
  %25 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %26 = load i32, i32* %25, align 8, !noalias !190
  %27 = icmp sgt i32 %26, 4
  br i1 %27, label %28, label %29

28:                                               ; preds = %7
  call void @abort() #13, !noalias !190
  unreachable

29:                                               ; preds = %7
  store i32 4, i32* %24, align 8, !alias.scope !190
  %30 = sub i32 4, %26
  %31 = icmp sgt i32 %30, 0
  %32 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  br i1 %31, label %33, label %113

33:                                               ; preds = %29
  %34 = bitcast %union.anon* %32 to [5 x i32]*
  %35 = zext i32 %30 to i64
  %36 = icmp ult i32 %30, 8
  br i1 %36, label %106, label %37

37:                                               ; preds = %33
  %38 = and i64 %35, 4294967288
  %39 = add nsw i64 %38, -8
  %40 = lshr exact i64 %39, 3
  %41 = add nuw nsw i64 %40, 1
  %42 = and i64 %41, 7
  %43 = icmp ult i64 %39, 56
  br i1 %43, label %91, label %44

44:                                               ; preds = %37
  %45 = sub nsw i64 %41, %42
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi i64 [ 0, %44 ], [ %88, %46 ]
  %48 = phi i64 [ %45, %44 ], [ %89, %46 ]
  %49 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %47
  %50 = bitcast i32* %49 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %50, align 8, !alias.scope !190
  %51 = getelementptr inbounds i32, i32* %49, i64 4
  %52 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %52, align 8, !alias.scope !190
  %53 = or i64 %47, 8
  %54 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %53
  %55 = bitcast i32* %54 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %55, align 8, !alias.scope !190
  %56 = getelementptr inbounds i32, i32* %54, i64 4
  %57 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %57, align 8, !alias.scope !190
  %58 = or i64 %47, 16
  %59 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %58
  %60 = bitcast i32* %59 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %60, align 8, !alias.scope !190
  %61 = getelementptr inbounds i32, i32* %59, i64 4
  %62 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %62, align 8, !alias.scope !190
  %63 = or i64 %47, 24
  %64 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %63
  %65 = bitcast i32* %64 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %65, align 8, !alias.scope !190
  %66 = getelementptr inbounds i32, i32* %64, i64 4
  %67 = bitcast i32* %66 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %67, align 8, !alias.scope !190
  %68 = or i64 %47, 32
  %69 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %68
  %70 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %70, align 8, !alias.scope !190
  %71 = getelementptr inbounds i32, i32* %69, i64 4
  %72 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %72, align 8, !alias.scope !190
  %73 = or i64 %47, 40
  %74 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %73
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %75, align 8, !alias.scope !190
  %76 = getelementptr inbounds i32, i32* %74, i64 4
  %77 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %77, align 8, !alias.scope !190
  %78 = or i64 %47, 48
  %79 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %78
  %80 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %80, align 8, !alias.scope !190
  %81 = getelementptr inbounds i32, i32* %79, i64 4
  %82 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %82, align 8, !alias.scope !190
  %83 = or i64 %47, 56
  %84 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %83
  %85 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %85, align 8, !alias.scope !190
  %86 = getelementptr inbounds i32, i32* %84, i64 4
  %87 = bitcast i32* %86 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %87, align 8, !alias.scope !190
  %88 = add i64 %47, 64
  %89 = add i64 %48, -8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %46, !llvm.loop !193

91:                                               ; preds = %46, %37
  %92 = phi i64 [ 0, %37 ], [ %88, %46 ]
  %93 = icmp eq i64 %42, 0
  br i1 %93, label %104, label %94

94:                                               ; preds = %91, %94
  %95 = phi i64 [ %101, %94 ], [ %92, %91 ]
  %96 = phi i64 [ %102, %94 ], [ %42, %91 ]
  %97 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %95
  %98 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %98, align 8, !alias.scope !190
  %99 = getelementptr inbounds i32, i32* %97, i64 4
  %100 = bitcast i32* %99 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %100, align 8, !alias.scope !190
  %101 = add i64 %95, 8
  %102 = add i64 %96, -1
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %94, !llvm.loop !194

104:                                              ; preds = %94, %91
  %105 = icmp eq i64 %38, %35
  br i1 %105, label %113, label %106

106:                                              ; preds = %104, %33
  %107 = phi i64 [ 0, %33 ], [ %38, %104 ]
  br label %108

108:                                              ; preds = %106, %108
  %109 = phi i64 [ %111, %108 ], [ %107, %106 ]
  %110 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %109
  store i32 1, i32* %110, align 4, !alias.scope !190
  %111 = add nuw nsw i64 %109, 1
  %112 = icmp eq i64 %111, %35
  br i1 %112, label %113, label %108, !llvm.loop !195

113:                                              ; preds = %108, %104, %29
  %114 = getelementptr inbounds %union.anon, %union.anon* %32, i64 0, i32 0
  %115 = bitcast %union.anon* %32 to i32*
  %116 = sext i32 %30 to i64
  %117 = getelementptr inbounds i32, i32* %115, i64 %116
  %118 = bitcast i32* %117 to i8*
  %119 = icmp sgt i32 %26, 5
  %120 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %121 = getelementptr inbounds %union.anon, %union.anon* %120, i64 0, i32 0
  %122 = load i32*, i32** %121, align 8, !noalias !190
  %123 = bitcast %union.anon* %120 to i32*
  %124 = select i1 %119, i32* %122, i32* %123
  %125 = bitcast i32* %124 to i8*
  %126 = sext i32 %26 to i64
  %127 = shl nsw i64 %126, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %118, i8* align 4 %125, i64 %127, i1 false) #12
  %128 = load i32, i32* %24, align 8
  %129 = icmp sgt i32 %128, 5
  %130 = load i32*, i32** %114, align 8
  %131 = select i1 %129, i32* %130, i32* %115
  %132 = load i32, i32* %131, align 4
  %133 = icmp sgt i32 %132, 0
  br i1 %133, label %134, label %155

134:                                              ; preds = %113
  %135 = bitcast %union.anon* %32 to [5 x i32]*
  %136 = getelementptr inbounds [5 x i32], [5 x i32]* %135, i64 0, i64 1
  %137 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 1
  %138 = bitcast [16 x i8]* %137 to i32*
  %139 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 1, i64 4
  %140 = bitcast i8* %139 to i32*
  %141 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 11
  %142 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 12
  %143 = getelementptr inbounds i32, i32* %115, i64 1
  %144 = getelementptr inbounds i32, i32* %130, i64 1
  %145 = select i1 %129, i32* %144, i32* %136
  %146 = getelementptr inbounds i32, i32* %130, i64 2
  %147 = select i1 %129, i32* %146, i32* %138
  %148 = getelementptr inbounds i32, i32* %130, i64 3
  %149 = select i1 %129, i32* %148, i32* %140
  br label %150

150:                                              ; preds = %134, %174
  %151 = phi i32 [ %132, %134 ], [ %175, %174 ]
  %152 = phi i32 [ 0, %134 ], [ %176, %174 ]
  %153 = load i32, i32* %145, align 4
  %154 = icmp sgt i32 %153, 0
  br i1 %154, label %162, label %174

155:                                              ; preds = %174, %113
  %156 = xor i1 %129, true
  %157 = icmp eq i32* %130, null
  %158 = or i1 %157, %156
  br i1 %158, label %161, label %159

159:                                              ; preds = %155
  %160 = bitcast i32* %130 to i8*
  call void @_ZdaPv(i8* %160) #11
  br label %161

161:                                              ; preds = %155, %159
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %23) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #12
  ret void

162:                                              ; preds = %150, %191
  %163 = phi i32 [ %192, %191 ], [ %153, %150 ]
  %164 = phi i32 [ %193, %191 ], [ 0, %150 ]
  %165 = load i32, i32* %147, align 4
  %166 = icmp sgt i32 %165, 0
  br i1 %166, label %167, label %191

167:                                              ; preds = %162
  %168 = load i32, i32* %143, align 4
  %169 = mul nsw i32 %168, %152
  %170 = add nsw i32 %169, %164
  %171 = load i32, i32* %149, align 4
  br label %178

172:                                              ; preds = %191
  %173 = load i32, i32* %131, align 4
  br label %174

174:                                              ; preds = %172, %150
  %175 = phi i32 [ %173, %172 ], [ %151, %150 ]
  %176 = add nuw nsw i32 %152, 1
  %177 = icmp slt i32 %176, %175
  br i1 %177, label %150, label %155

178:                                              ; preds = %167, %197
  %179 = phi i32 [ %165, %167 ], [ %198, %197 ]
  %180 = phi i32 [ %171, %167 ], [ %199, %197 ]
  %181 = phi i32 [ 0, %167 ], [ %200, %197 ]
  %182 = icmp sgt i32 %180, 0
  br i1 %182, label %183, label %197

183:                                              ; preds = %178
  %184 = load i32, i32* %138, align 8
  %185 = mul nsw i32 %170, %184
  %186 = add nsw i32 %185, %181
  %187 = load i32, i32* %140, align 4
  %188 = mul nsw i32 %186, %187
  br label %202

189:                                              ; preds = %197
  %190 = load i32, i32* %145, align 4
  br label %191

191:                                              ; preds = %189, %162
  %192 = phi i32 [ %190, %189 ], [ %163, %162 ]
  %193 = add nuw nsw i32 %164, 1
  %194 = icmp slt i32 %193, %192
  br i1 %194, label %162, label %172

195:                                              ; preds = %202
  %196 = load i32, i32* %147, align 4
  br label %197

197:                                              ; preds = %195, %178
  %198 = phi i32 [ %196, %195 ], [ %179, %178 ]
  %199 = phi i32 [ %247, %195 ], [ %180, %178 ]
  %200 = add nuw nsw i32 %181, 1
  %201 = icmp slt i32 %200, %198
  br i1 %201, label %178, label %189

202:                                              ; preds = %183, %202
  %203 = phi i32 [ 0, %183 ], [ %246, %202 ]
  %204 = load i32, i32* %12, align 4
  %205 = mul nsw i32 %204, %152
  %206 = load i32, i32* %13, align 4
  %207 = mul nsw i32 %206, %164
  %208 = add nsw i32 %207, %205
  %209 = load i32, i32* %14, align 4
  %210 = mul nsw i32 %209, %181
  %211 = add nsw i32 %208, %210
  %212 = load i32, i32* %15, align 4
  %213 = mul nsw i32 %212, %203
  %214 = add nsw i32 %211, %213
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds i32, i32* %2, i64 %215
  %217 = load i32, i32* %216, align 4
  %218 = load i32, i32* %18, align 4
  %219 = mul nsw i32 %218, %152
  %220 = load i32, i32* %19, align 4
  %221 = mul nsw i32 %220, %164
  %222 = add nsw i32 %221, %219
  %223 = load i32, i32* %20, align 4
  %224 = mul nsw i32 %223, %181
  %225 = add nsw i32 %222, %224
  %226 = load i32, i32* %21, align 4
  %227 = mul nsw i32 %226, %203
  %228 = add nsw i32 %225, %227
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds i32, i32* %4, i64 %229
  %231 = load i32, i32* %230, align 4
  %232 = add nsw i32 %231, %217
  %233 = sitofp i32 %232 to float
  %234 = load i32, i32* %141, align 4
  %235 = sitofp i32 %234 to float
  %236 = load i32, i32* %142, align 4
  %237 = sitofp i32 %236 to float
  %238 = fcmp olt float %233, %235
  %239 = select i1 %238, float %235, float %233
  %240 = fcmp ogt float %239, %237
  %241 = select i1 %240, float %237, float %239
  %242 = fptosi float %241 to i32
  %243 = add nsw i32 %188, %203
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds i32, i32* %6, i64 %244
  store i32 %242, i32* %245, align 4
  %246 = add nuw nsw i32 %203, 1
  %247 = load i32, i32* %149, align 4
  %248 = icmp slt i32 %246, %247
  br i1 %248, label %202, label %195
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf(%"struct.tflite::ArithmeticParams"* dereferenceable(80), %"class.tflite::RuntimeShape"* dereferenceable(32), float*, %"class.tflite::RuntimeShape"* dereferenceable(32), float*, %"class.tflite::RuntimeShape"* dereferenceable(32), float*) local_unnamed_addr #7 comdat {
  %8 = alloca %"struct.tflite::NdArrayDesc", align 4
  %9 = alloca %"struct.tflite::NdArrayDesc", align 4
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = bitcast %"struct.tflite::NdArrayDesc"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #12
  %12 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 0
  %13 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 1
  %14 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 2
  %15 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 3
  %16 = bitcast %"struct.tflite::NdArrayDesc"* %9 to i8*
  %17 = bitcast %"struct.tflite::NdArrayDesc"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %17, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #12
  %18 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 0
  %19 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 1
  %20 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 2
  %21 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 3
  %22 = bitcast %"struct.tflite::NdArrayDesc"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %22, i8 -86, i64 32, i1 false)
  call void @_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_(%"class.tflite::RuntimeShape"* dereferenceable(32) %1, %"class.tflite::RuntimeShape"* dereferenceable(32) %3, %"struct.tflite::NdArrayDesc"* nonnull %8, %"struct.tflite::NdArrayDesc"* nonnull %9)
  %23 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %23) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 32, i1 false)
  %24 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %24, align 8, !alias.scope !196
  %25 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %26 = load i32, i32* %25, align 8, !noalias !196
  %27 = icmp sgt i32 %26, 4
  br i1 %27, label %28, label %29

28:                                               ; preds = %7
  call void @abort() #13, !noalias !196
  unreachable

29:                                               ; preds = %7
  store i32 4, i32* %24, align 8, !alias.scope !196
  %30 = sub i32 4, %26
  %31 = icmp sgt i32 %30, 0
  %32 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  br i1 %31, label %33, label %113

33:                                               ; preds = %29
  %34 = bitcast %union.anon* %32 to [5 x i32]*
  %35 = zext i32 %30 to i64
  %36 = icmp ult i32 %30, 8
  br i1 %36, label %106, label %37

37:                                               ; preds = %33
  %38 = and i64 %35, 4294967288
  %39 = add nsw i64 %38, -8
  %40 = lshr exact i64 %39, 3
  %41 = add nuw nsw i64 %40, 1
  %42 = and i64 %41, 7
  %43 = icmp ult i64 %39, 56
  br i1 %43, label %91, label %44

44:                                               ; preds = %37
  %45 = sub nsw i64 %41, %42
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi i64 [ 0, %44 ], [ %88, %46 ]
  %48 = phi i64 [ %45, %44 ], [ %89, %46 ]
  %49 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %47
  %50 = bitcast i32* %49 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %50, align 8, !alias.scope !196
  %51 = getelementptr inbounds i32, i32* %49, i64 4
  %52 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %52, align 8, !alias.scope !196
  %53 = or i64 %47, 8
  %54 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %53
  %55 = bitcast i32* %54 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %55, align 8, !alias.scope !196
  %56 = getelementptr inbounds i32, i32* %54, i64 4
  %57 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %57, align 8, !alias.scope !196
  %58 = or i64 %47, 16
  %59 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %58
  %60 = bitcast i32* %59 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %60, align 8, !alias.scope !196
  %61 = getelementptr inbounds i32, i32* %59, i64 4
  %62 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %62, align 8, !alias.scope !196
  %63 = or i64 %47, 24
  %64 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %63
  %65 = bitcast i32* %64 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %65, align 8, !alias.scope !196
  %66 = getelementptr inbounds i32, i32* %64, i64 4
  %67 = bitcast i32* %66 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %67, align 8, !alias.scope !196
  %68 = or i64 %47, 32
  %69 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %68
  %70 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %70, align 8, !alias.scope !196
  %71 = getelementptr inbounds i32, i32* %69, i64 4
  %72 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %72, align 8, !alias.scope !196
  %73 = or i64 %47, 40
  %74 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %73
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %75, align 8, !alias.scope !196
  %76 = getelementptr inbounds i32, i32* %74, i64 4
  %77 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %77, align 8, !alias.scope !196
  %78 = or i64 %47, 48
  %79 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %78
  %80 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %80, align 8, !alias.scope !196
  %81 = getelementptr inbounds i32, i32* %79, i64 4
  %82 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %82, align 8, !alias.scope !196
  %83 = or i64 %47, 56
  %84 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %83
  %85 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %85, align 8, !alias.scope !196
  %86 = getelementptr inbounds i32, i32* %84, i64 4
  %87 = bitcast i32* %86 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %87, align 8, !alias.scope !196
  %88 = add i64 %47, 64
  %89 = add i64 %48, -8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %46, !llvm.loop !199

91:                                               ; preds = %46, %37
  %92 = phi i64 [ 0, %37 ], [ %88, %46 ]
  %93 = icmp eq i64 %42, 0
  br i1 %93, label %104, label %94

94:                                               ; preds = %91, %94
  %95 = phi i64 [ %101, %94 ], [ %92, %91 ]
  %96 = phi i64 [ %102, %94 ], [ %42, %91 ]
  %97 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %95
  %98 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %98, align 8, !alias.scope !196
  %99 = getelementptr inbounds i32, i32* %97, i64 4
  %100 = bitcast i32* %99 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %100, align 8, !alias.scope !196
  %101 = add i64 %95, 8
  %102 = add i64 %96, -1
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %94, !llvm.loop !200

104:                                              ; preds = %94, %91
  %105 = icmp eq i64 %38, %35
  br i1 %105, label %113, label %106

106:                                              ; preds = %104, %33
  %107 = phi i64 [ 0, %33 ], [ %38, %104 ]
  br label %108

108:                                              ; preds = %106, %108
  %109 = phi i64 [ %111, %108 ], [ %107, %106 ]
  %110 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %109
  store i32 1, i32* %110, align 4, !alias.scope !196
  %111 = add nuw nsw i64 %109, 1
  %112 = icmp eq i64 %111, %35
  br i1 %112, label %113, label %108, !llvm.loop !201

113:                                              ; preds = %108, %104, %29
  %114 = getelementptr inbounds %union.anon, %union.anon* %32, i64 0, i32 0
  %115 = bitcast %union.anon* %32 to i32*
  %116 = sext i32 %30 to i64
  %117 = getelementptr inbounds i32, i32* %115, i64 %116
  %118 = bitcast i32* %117 to i8*
  %119 = icmp sgt i32 %26, 5
  %120 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %121 = getelementptr inbounds %union.anon, %union.anon* %120, i64 0, i32 0
  %122 = load i32*, i32** %121, align 8, !noalias !196
  %123 = bitcast %union.anon* %120 to i32*
  %124 = select i1 %119, i32* %122, i32* %123
  %125 = bitcast i32* %124 to i8*
  %126 = sext i32 %26 to i64
  %127 = shl nsw i64 %126, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %118, i8* align 4 %125, i64 %127, i1 false) #12
  %128 = load i32, i32* %24, align 8
  %129 = icmp sgt i32 %128, 5
  %130 = load i32*, i32** %114, align 8
  %131 = select i1 %129, i32* %130, i32* %115
  %132 = load i32, i32* %131, align 4
  %133 = icmp sgt i32 %132, 0
  br i1 %133, label %134, label %155

134:                                              ; preds = %113
  %135 = bitcast %union.anon* %32 to [5 x i32]*
  %136 = getelementptr inbounds [5 x i32], [5 x i32]* %135, i64 0, i64 1
  %137 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 1
  %138 = bitcast [16 x i8]* %137 to i32*
  %139 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 1, i64 4
  %140 = bitcast i8* %139 to i32*
  %141 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 13
  %142 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 14
  %143 = getelementptr inbounds i32, i32* %115, i64 1
  %144 = getelementptr inbounds i32, i32* %130, i64 1
  %145 = select i1 %129, i32* %144, i32* %136
  %146 = getelementptr inbounds i32, i32* %130, i64 2
  %147 = select i1 %129, i32* %146, i32* %138
  %148 = getelementptr inbounds i32, i32* %130, i64 3
  %149 = select i1 %129, i32* %148, i32* %140
  br label %150

150:                                              ; preds = %134, %174
  %151 = phi i32 [ %132, %134 ], [ %175, %174 ]
  %152 = phi i32 [ 0, %134 ], [ %176, %174 ]
  %153 = load i32, i32* %145, align 4
  %154 = icmp sgt i32 %153, 0
  br i1 %154, label %162, label %174

155:                                              ; preds = %174, %113
  %156 = xor i1 %129, true
  %157 = icmp eq i32* %130, null
  %158 = or i1 %157, %156
  br i1 %158, label %161, label %159

159:                                              ; preds = %155
  %160 = bitcast i32* %130 to i8*
  call void @_ZdaPv(i8* %160) #11
  br label %161

161:                                              ; preds = %155, %159
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %23) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #12
  ret void

162:                                              ; preds = %150, %191
  %163 = phi i32 [ %192, %191 ], [ %153, %150 ]
  %164 = phi i32 [ %193, %191 ], [ 0, %150 ]
  %165 = load i32, i32* %147, align 4
  %166 = icmp sgt i32 %165, 0
  br i1 %166, label %167, label %191

167:                                              ; preds = %162
  %168 = load i32, i32* %143, align 4
  %169 = mul nsw i32 %168, %152
  %170 = add nsw i32 %169, %164
  %171 = load i32, i32* %149, align 4
  br label %178

172:                                              ; preds = %191
  %173 = load i32, i32* %131, align 4
  br label %174

174:                                              ; preds = %172, %150
  %175 = phi i32 [ %173, %172 ], [ %151, %150 ]
  %176 = add nuw nsw i32 %152, 1
  %177 = icmp slt i32 %176, %175
  br i1 %177, label %150, label %155

178:                                              ; preds = %167, %197
  %179 = phi i32 [ %165, %167 ], [ %198, %197 ]
  %180 = phi i32 [ %171, %167 ], [ %199, %197 ]
  %181 = phi i32 [ 0, %167 ], [ %200, %197 ]
  %182 = icmp sgt i32 %180, 0
  br i1 %182, label %183, label %197

183:                                              ; preds = %178
  %184 = load i32, i32* %138, align 8
  %185 = mul nsw i32 %170, %184
  %186 = add nsw i32 %185, %181
  %187 = load i32, i32* %140, align 4
  %188 = mul nsw i32 %186, %187
  br label %202

189:                                              ; preds = %197
  %190 = load i32, i32* %145, align 4
  br label %191

191:                                              ; preds = %189, %162
  %192 = phi i32 [ %190, %189 ], [ %163, %162 ]
  %193 = add nuw nsw i32 %164, 1
  %194 = icmp slt i32 %193, %192
  br i1 %194, label %162, label %172

195:                                              ; preds = %202
  %196 = load i32, i32* %147, align 4
  br label %197

197:                                              ; preds = %195, %178
  %198 = phi i32 [ %196, %195 ], [ %179, %178 ]
  %199 = phi i32 [ %243, %195 ], [ %180, %178 ]
  %200 = add nuw nsw i32 %181, 1
  %201 = icmp slt i32 %200, %198
  br i1 %201, label %178, label %189

202:                                              ; preds = %183, %202
  %203 = phi i32 [ 0, %183 ], [ %242, %202 ]
  %204 = load i32, i32* %12, align 4
  %205 = mul nsw i32 %204, %152
  %206 = load i32, i32* %13, align 4
  %207 = mul nsw i32 %206, %164
  %208 = add nsw i32 %207, %205
  %209 = load i32, i32* %14, align 4
  %210 = mul nsw i32 %209, %181
  %211 = add nsw i32 %208, %210
  %212 = load i32, i32* %15, align 4
  %213 = mul nsw i32 %212, %203
  %214 = add nsw i32 %211, %213
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds float, float* %2, i64 %215
  %217 = load float, float* %216, align 4
  %218 = load i32, i32* %18, align 4
  %219 = mul nsw i32 %218, %152
  %220 = load i32, i32* %19, align 4
  %221 = mul nsw i32 %220, %164
  %222 = add nsw i32 %221, %219
  %223 = load i32, i32* %20, align 4
  %224 = mul nsw i32 %223, %181
  %225 = add nsw i32 %222, %224
  %226 = load i32, i32* %21, align 4
  %227 = mul nsw i32 %226, %203
  %228 = add nsw i32 %225, %227
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds float, float* %4, i64 %229
  %231 = load float, float* %230, align 4
  %232 = fadd float %217, %231
  %233 = load float, float* %141, align 4
  %234 = load float, float* %142, align 4
  %235 = fcmp olt float %232, %233
  %236 = select i1 %235, float %233, float %232
  %237 = fcmp ogt float %236, %234
  %238 = select i1 %237, float %234, float %236
  %239 = add nsw i32 %188, %203
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds float, float* %6, i64 %240
  store float %238, float* %241, align 4
  %242 = add nuw nsw i32 %203, 1
  %243 = load i32, i32* %149, align 4
  %244 = icmp slt i32 %242, %243
  br i1 %244, label %202, label %195
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_(%"class.tflite::RuntimeShape"* dereferenceable(32), %"class.tflite::RuntimeShape"* dereferenceable(32), %"struct.tflite::NdArrayDesc"*, %"struct.tflite::NdArrayDesc"*) local_unnamed_addr #7 comdat {
  %5 = alloca %"class.tflite::RuntimeShape", align 8
  %6 = alloca %"class.tflite::RuntimeShape", align 8
  %7 = bitcast %"class.tflite::RuntimeShape"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 32, i1 false)
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  store i32 0, i32* %8, align 8, !alias.scope !202
  %9 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %0, i64 0, i32 0
  %10 = load i32, i32* %9, align 8, !noalias !202
  %11 = icmp sgt i32 %10, 4
  br i1 %11, label %12, label %13

12:                                               ; preds = %4
  tail call void @abort() #13, !noalias !202
  unreachable

13:                                               ; preds = %4
  store i32 4, i32* %8, align 8, !alias.scope !202
  %14 = sub i32 4, %10
  %15 = icmp sgt i32 %14, 0
  %16 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  br i1 %15, label %17, label %97

17:                                               ; preds = %13
  %18 = bitcast %union.anon* %16 to [5 x i32]*
  %19 = zext i32 %14 to i64
  %20 = icmp ult i32 %14, 8
  br i1 %20, label %90, label %21

21:                                               ; preds = %17
  %22 = and i64 %19, 4294967288
  %23 = add nsw i64 %22, -8
  %24 = lshr exact i64 %23, 3
  %25 = add nuw nsw i64 %24, 1
  %26 = and i64 %25, 7
  %27 = icmp ult i64 %23, 56
  br i1 %27, label %75, label %28

28:                                               ; preds = %21
  %29 = sub nsw i64 %25, %26
  br label %30

30:                                               ; preds = %30, %28
  %31 = phi i64 [ 0, %28 ], [ %72, %30 ]
  %32 = phi i64 [ %29, %28 ], [ %73, %30 ]
  %33 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %31
  %34 = bitcast i32* %33 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %34, align 8, !alias.scope !202
  %35 = getelementptr inbounds i32, i32* %33, i64 4
  %36 = bitcast i32* %35 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %36, align 8, !alias.scope !202
  %37 = or i64 %31, 8
  %38 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %37
  %39 = bitcast i32* %38 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %39, align 8, !alias.scope !202
  %40 = getelementptr inbounds i32, i32* %38, i64 4
  %41 = bitcast i32* %40 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %41, align 8, !alias.scope !202
  %42 = or i64 %31, 16
  %43 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %42
  %44 = bitcast i32* %43 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %44, align 8, !alias.scope !202
  %45 = getelementptr inbounds i32, i32* %43, i64 4
  %46 = bitcast i32* %45 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %46, align 8, !alias.scope !202
  %47 = or i64 %31, 24
  %48 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %47
  %49 = bitcast i32* %48 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %49, align 8, !alias.scope !202
  %50 = getelementptr inbounds i32, i32* %48, i64 4
  %51 = bitcast i32* %50 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %51, align 8, !alias.scope !202
  %52 = or i64 %31, 32
  %53 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %52
  %54 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %54, align 8, !alias.scope !202
  %55 = getelementptr inbounds i32, i32* %53, i64 4
  %56 = bitcast i32* %55 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %56, align 8, !alias.scope !202
  %57 = or i64 %31, 40
  %58 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %57
  %59 = bitcast i32* %58 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %59, align 8, !alias.scope !202
  %60 = getelementptr inbounds i32, i32* %58, i64 4
  %61 = bitcast i32* %60 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %61, align 8, !alias.scope !202
  %62 = or i64 %31, 48
  %63 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %62
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %64, align 8, !alias.scope !202
  %65 = getelementptr inbounds i32, i32* %63, i64 4
  %66 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %66, align 8, !alias.scope !202
  %67 = or i64 %31, 56
  %68 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %67
  %69 = bitcast i32* %68 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %69, align 8, !alias.scope !202
  %70 = getelementptr inbounds i32, i32* %68, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %71, align 8, !alias.scope !202
  %72 = add i64 %31, 64
  %73 = add i64 %32, -8
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %30, !llvm.loop !205

75:                                               ; preds = %30, %21
  %76 = phi i64 [ 0, %21 ], [ %72, %30 ]
  %77 = icmp eq i64 %26, 0
  br i1 %77, label %88, label %78

78:                                               ; preds = %75, %78
  %79 = phi i64 [ %85, %78 ], [ %76, %75 ]
  %80 = phi i64 [ %86, %78 ], [ %26, %75 ]
  %81 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %79
  %82 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %82, align 8, !alias.scope !202
  %83 = getelementptr inbounds i32, i32* %81, i64 4
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %84, align 8, !alias.scope !202
  %85 = add i64 %79, 8
  %86 = add i64 %80, -1
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %78, !llvm.loop !206

88:                                               ; preds = %78, %75
  %89 = icmp eq i64 %22, %19
  br i1 %89, label %97, label %90

90:                                               ; preds = %88, %17
  %91 = phi i64 [ 0, %17 ], [ %22, %88 ]
  br label %92

92:                                               ; preds = %90, %92
  %93 = phi i64 [ %95, %92 ], [ %91, %90 ]
  %94 = getelementptr inbounds [5 x i32], [5 x i32]* %18, i64 0, i64 %93
  store i32 1, i32* %94, align 4, !alias.scope !202
  %95 = add nuw nsw i64 %93, 1
  %96 = icmp eq i64 %95, %19
  br i1 %96, label %97, label %92, !llvm.loop !207

97:                                               ; preds = %92, %88, %13
  %98 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0
  %99 = bitcast %union.anon* %16 to i32*
  %100 = sext i32 %14 to i64
  %101 = getelementptr inbounds i32, i32* %99, i64 %100
  %102 = bitcast i32* %101 to i8*
  %103 = icmp sgt i32 %10, 5
  %104 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %0, i64 0, i32 1
  %105 = getelementptr inbounds %union.anon, %union.anon* %104, i64 0, i32 0
  %106 = load i32*, i32** %105, align 8, !noalias !202
  %107 = bitcast %union.anon* %104 to i32*
  %108 = select i1 %103, i32* %106, i32* %107
  %109 = bitcast i32* %108 to i8*
  %110 = sext i32 %10 to i64
  %111 = shl nsw i64 %110, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %102, i8* align 4 %109, i64 %111, i1 false) #12
  %112 = bitcast %"class.tflite::RuntimeShape"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %112) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %112, i8 -86, i64 32, i1 false)
  %113 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 0
  store i32 0, i32* %113, align 8, !alias.scope !208
  %114 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %115 = load i32, i32* %114, align 8, !noalias !208
  %116 = icmp sgt i32 %115, 4
  br i1 %116, label %117, label %118

117:                                              ; preds = %97
  tail call void @abort() #13, !noalias !208
  unreachable

118:                                              ; preds = %97
  store i32 4, i32* %113, align 8, !alias.scope !208
  %119 = sub i32 4, %115
  %120 = icmp sgt i32 %119, 0
  %121 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1
  %122 = bitcast %union.anon* %121 to [5 x i32]*
  br i1 %120, label %123, label %202

123:                                              ; preds = %118
  %124 = zext i32 %119 to i64
  %125 = icmp ult i32 %119, 8
  br i1 %125, label %195, label %126

126:                                              ; preds = %123
  %127 = and i64 %124, 4294967288
  %128 = add nsw i64 %127, -8
  %129 = lshr exact i64 %128, 3
  %130 = add nuw nsw i64 %129, 1
  %131 = and i64 %130, 7
  %132 = icmp ult i64 %128, 56
  br i1 %132, label %180, label %133

133:                                              ; preds = %126
  %134 = sub nsw i64 %130, %131
  br label %135

135:                                              ; preds = %135, %133
  %136 = phi i64 [ 0, %133 ], [ %177, %135 ]
  %137 = phi i64 [ %134, %133 ], [ %178, %135 ]
  %138 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %136
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %139, align 8, !alias.scope !208
  %140 = getelementptr inbounds i32, i32* %138, i64 4
  %141 = bitcast i32* %140 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %141, align 8, !alias.scope !208
  %142 = or i64 %136, 8
  %143 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %142
  %144 = bitcast i32* %143 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %144, align 8, !alias.scope !208
  %145 = getelementptr inbounds i32, i32* %143, i64 4
  %146 = bitcast i32* %145 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %146, align 8, !alias.scope !208
  %147 = or i64 %136, 16
  %148 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %147
  %149 = bitcast i32* %148 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %149, align 8, !alias.scope !208
  %150 = getelementptr inbounds i32, i32* %148, i64 4
  %151 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %151, align 8, !alias.scope !208
  %152 = or i64 %136, 24
  %153 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %152
  %154 = bitcast i32* %153 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %154, align 8, !alias.scope !208
  %155 = getelementptr inbounds i32, i32* %153, i64 4
  %156 = bitcast i32* %155 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %156, align 8, !alias.scope !208
  %157 = or i64 %136, 32
  %158 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %157
  %159 = bitcast i32* %158 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %159, align 8, !alias.scope !208
  %160 = getelementptr inbounds i32, i32* %158, i64 4
  %161 = bitcast i32* %160 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %161, align 8, !alias.scope !208
  %162 = or i64 %136, 40
  %163 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %162
  %164 = bitcast i32* %163 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %164, align 8, !alias.scope !208
  %165 = getelementptr inbounds i32, i32* %163, i64 4
  %166 = bitcast i32* %165 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %166, align 8, !alias.scope !208
  %167 = or i64 %136, 48
  %168 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %167
  %169 = bitcast i32* %168 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %169, align 8, !alias.scope !208
  %170 = getelementptr inbounds i32, i32* %168, i64 4
  %171 = bitcast i32* %170 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %171, align 8, !alias.scope !208
  %172 = or i64 %136, 56
  %173 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %172
  %174 = bitcast i32* %173 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %174, align 8, !alias.scope !208
  %175 = getelementptr inbounds i32, i32* %173, i64 4
  %176 = bitcast i32* %175 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %176, align 8, !alias.scope !208
  %177 = add i64 %136, 64
  %178 = add i64 %137, -8
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %180, label %135, !llvm.loop !211

180:                                              ; preds = %135, %126
  %181 = phi i64 [ 0, %126 ], [ %177, %135 ]
  %182 = icmp eq i64 %131, 0
  br i1 %182, label %193, label %183

183:                                              ; preds = %180, %183
  %184 = phi i64 [ %190, %183 ], [ %181, %180 ]
  %185 = phi i64 [ %191, %183 ], [ %131, %180 ]
  %186 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %184
  %187 = bitcast i32* %186 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %187, align 8, !alias.scope !208
  %188 = getelementptr inbounds i32, i32* %186, i64 4
  %189 = bitcast i32* %188 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %189, align 8, !alias.scope !208
  %190 = add i64 %184, 8
  %191 = add i64 %185, -1
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %193, label %183, !llvm.loop !212

193:                                              ; preds = %183, %180
  %194 = icmp eq i64 %127, %124
  br i1 %194, label %202, label %195

195:                                              ; preds = %193, %123
  %196 = phi i64 [ 0, %123 ], [ %127, %193 ]
  br label %197

197:                                              ; preds = %195, %197
  %198 = phi i64 [ %200, %197 ], [ %196, %195 ]
  %199 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 %198
  store i32 1, i32* %199, align 4, !alias.scope !208
  %200 = add nuw nsw i64 %198, 1
  %201 = icmp eq i64 %200, %124
  br i1 %201, label %202, label %197, !llvm.loop !213

202:                                              ; preds = %197, %193, %118
  %203 = getelementptr inbounds %union.anon, %union.anon* %121, i64 0, i32 0
  %204 = bitcast %union.anon* %121 to i32*
  %205 = sext i32 %119 to i64
  %206 = getelementptr inbounds i32, i32* %204, i64 %205
  %207 = bitcast i32* %206 to i8*
  %208 = icmp sgt i32 %115, 5
  %209 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %210 = getelementptr inbounds %union.anon, %union.anon* %209, i64 0, i32 0
  %211 = load i32*, i32** %210, align 8, !noalias !208
  %212 = bitcast %union.anon* %209 to i32*
  %213 = select i1 %208, i32* %211, i32* %212
  %214 = bitcast i32* %213 to i8*
  %215 = sext i32 %115 to i64
  %216 = shl nsw i64 %215, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %207, i8* align 4 %214, i64 %216, i1 false) #12
  %217 = bitcast %union.anon* %16 to [5 x i32]*
  %218 = load i32, i32* %8, align 8
  %219 = icmp sgt i32 %218, 5
  %220 = load i32*, i32** %98, align 8
  %221 = getelementptr inbounds i32, i32* %220, i64 3
  %222 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 1, i64 4
  %223 = bitcast i8* %222 to i32*
  %224 = select i1 %219, i32* %221, i32* %223
  %225 = load i32, i32* %224, align 4
  %226 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 0, i64 3
  store i32 %225, i32* %226, align 4
  %227 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 1, i64 3
  store i32 1, i32* %227, align 4
  %228 = load i32, i32* %224, align 4
  %229 = getelementptr inbounds i32, i32* %220, i64 2
  %230 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 1
  %231 = bitcast [16 x i8]* %230 to i32*
  %232 = select i1 %219, i32* %229, i32* %231
  %233 = load i32, i32* %232, align 4
  %234 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 0, i64 2
  store i32 %233, i32* %234, align 4
  %235 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 1, i64 2
  store i32 %228, i32* %235, align 4
  %236 = load i32, i32* %232, align 4
  %237 = mul nsw i32 %236, %228
  %238 = getelementptr inbounds i32, i32* %220, i64 1
  %239 = getelementptr inbounds [5 x i32], [5 x i32]* %217, i64 0, i64 1
  %240 = select i1 %219, i32* %238, i32* %239
  %241 = load i32, i32* %240, align 4
  %242 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 0, i64 1
  store i32 %241, i32* %242, align 4
  %243 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 1, i64 1
  store i32 %237, i32* %243, align 4
  %244 = load i32, i32* %240, align 4
  %245 = mul nsw i32 %244, %237
  %246 = select i1 %219, i32* %220, i32* %99
  %247 = load i32, i32* %246, align 4
  %248 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 0, i64 0
  store i32 %247, i32* %248, align 4
  %249 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %2, i64 0, i32 1, i64 0
  store i32 %245, i32* %249, align 4
  %250 = load i32, i32* %113, align 8
  %251 = icmp sgt i32 %250, 5
  %252 = load i32*, i32** %203, align 8
  %253 = getelementptr inbounds i32, i32* %252, i64 3
  %254 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 1, i64 4
  %255 = bitcast i8* %254 to i32*
  %256 = select i1 %251, i32* %253, i32* %255
  %257 = load i32, i32* %256, align 4
  %258 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 0, i64 3
  store i32 %257, i32* %258, align 4
  %259 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 1, i64 3
  store i32 1, i32* %259, align 4
  %260 = load i32, i32* %256, align 4
  %261 = getelementptr inbounds i32, i32* %252, i64 2
  %262 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 1
  %263 = bitcast [16 x i8]* %262 to i32*
  %264 = select i1 %251, i32* %261, i32* %263
  %265 = load i32, i32* %264, align 4
  %266 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 0, i64 2
  store i32 %265, i32* %266, align 4
  %267 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 1, i64 2
  store i32 %260, i32* %267, align 4
  %268 = load i32, i32* %264, align 4
  %269 = mul nsw i32 %268, %260
  %270 = getelementptr inbounds i32, i32* %252, i64 1
  %271 = getelementptr inbounds [5 x i32], [5 x i32]* %122, i64 0, i64 1
  %272 = select i1 %251, i32* %270, i32* %271
  %273 = load i32, i32* %272, align 4
  %274 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 0, i64 1
  store i32 %273, i32* %274, align 4
  %275 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 1, i64 1
  store i32 %269, i32* %275, align 4
  %276 = load i32, i32* %272, align 4
  %277 = mul nsw i32 %276, %269
  %278 = select i1 %251, i32* %252, i32* %204
  %279 = load i32, i32* %278, align 4
  %280 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 0, i64 0
  store i32 %279, i32* %280, align 4
  %281 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %3, i64 0, i32 1, i64 0
  store i32 %277, i32* %281, align 4
  %282 = bitcast %union.anon* %16 to i32*
  %283 = select i1 %219, i32* %220, i32* %282
  %284 = load i32, i32* %283, align 4
  %285 = bitcast %union.anon* %121 to i32*
  %286 = select i1 %251, i32* %252, i32* %285
  %287 = load i32, i32* %286, align 4
  %288 = icmp eq i32 %284, %287
  br i1 %288, label %302, label %298

289:                                              ; preds = %338
  %290 = bitcast i32* %252 to i8*
  tail call void @_ZdaPv(i8* %290) #11
  br label %291

291:                                              ; preds = %338, %289
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %112) #12
  %292 = xor i1 %219, true
  %293 = icmp eq i32* %220, null
  %294 = or i1 %293, %292
  br i1 %294, label %297, label %295

295:                                              ; preds = %291
  %296 = bitcast i32* %220 to i8*
  tail call void @_ZdaPv(i8* %296) #11
  br label %297

297:                                              ; preds = %291, %295
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #12
  ret void

298:                                              ; preds = %202
  %299 = icmp eq i32 %284, 1
  br i1 %299, label %300, label %301

300:                                              ; preds = %298
  store i32 0, i32* %249, align 4
  store i32 %287, i32* %248, align 4
  br label %302

301:                                              ; preds = %298
  store i32 0, i32* %281, align 4
  store i32 %284, i32* %280, align 4
  br label %302

302:                                              ; preds = %202, %300, %301
  %303 = load i32, i32* %240, align 4
  %304 = load i32, i32* %272, align 4
  %305 = icmp eq i32 %303, %304
  br i1 %305, label %310, label %306

306:                                              ; preds = %302
  %307 = icmp eq i32 %303, 1
  br i1 %307, label %309, label %308

308:                                              ; preds = %306
  store i32 0, i32* %275, align 4
  store i32 %303, i32* %274, align 4
  br label %310

309:                                              ; preds = %306
  store i32 0, i32* %243, align 4
  store i32 %304, i32* %242, align 4
  br label %310

310:                                              ; preds = %309, %308, %302
  %311 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 1
  %312 = bitcast [16 x i8]* %311 to i32*
  %313 = select i1 %219, i32* %229, i32* %312
  %314 = load i32, i32* %313, align 4
  %315 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 1
  %316 = bitcast [16 x i8]* %315 to i32*
  %317 = select i1 %251, i32* %261, i32* %316
  %318 = load i32, i32* %317, align 4
  %319 = icmp eq i32 %314, %318
  br i1 %319, label %324, label %320

320:                                              ; preds = %310
  %321 = icmp eq i32 %314, 1
  br i1 %321, label %323, label %322

322:                                              ; preds = %320
  store i32 0, i32* %267, align 4
  store i32 %314, i32* %266, align 4
  br label %324

323:                                              ; preds = %320
  store i32 0, i32* %235, align 4
  store i32 %318, i32* %234, align 4
  br label %324

324:                                              ; preds = %323, %322, %310
  %325 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1, i32 1, i64 4
  %326 = bitcast i8* %325 to i32*
  %327 = select i1 %219, i32* %221, i32* %326
  %328 = load i32, i32* %327, align 4
  %329 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %6, i64 0, i32 1, i32 1, i64 4
  %330 = bitcast i8* %329 to i32*
  %331 = select i1 %251, i32* %253, i32* %330
  %332 = load i32, i32* %331, align 4
  %333 = icmp eq i32 %328, %332
  br i1 %333, label %338, label %334

334:                                              ; preds = %324
  %335 = icmp eq i32 %328, 1
  br i1 %335, label %337, label %336

336:                                              ; preds = %334
  store i32 0, i32* %259, align 4
  store i32 %328, i32* %258, align 4
  br label %338

337:                                              ; preds = %334
  store i32 0, i32* %227, align 4
  store i32 %332, i32* %226, align 4
  br label %338

338:                                              ; preds = %337, %336, %324
  %339 = xor i1 %251, true
  %340 = icmp eq i32* %252, null
  %341 = or i1 %340, %339
  br i1 %341, label %291, label %289
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa(%"struct.tflite::ArithmeticParams"* dereferenceable(80), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #7 comdat {
  %8 = alloca %"struct.tflite::NdArrayDesc", align 4
  %9 = alloca %"struct.tflite::NdArrayDesc", align 4
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = bitcast %"struct.tflite::NdArrayDesc"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #12
  %12 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 0
  %13 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 1
  %14 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 2
  %15 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 3
  %16 = bitcast %"struct.tflite::NdArrayDesc"* %9 to i8*
  %17 = bitcast %"struct.tflite::NdArrayDesc"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %17, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #12
  %18 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 0
  %19 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 1
  %20 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 2
  %21 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 3
  %22 = bitcast %"struct.tflite::NdArrayDesc"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %22, i8 -86, i64 32, i1 false)
  call void @_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_(%"class.tflite::RuntimeShape"* dereferenceable(32) %1, %"class.tflite::RuntimeShape"* dereferenceable(32) %3, %"struct.tflite::NdArrayDesc"* nonnull %8, %"struct.tflite::NdArrayDesc"* nonnull %9)
  %23 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %23) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 32, i1 false)
  %24 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %24, align 8, !alias.scope !214
  %25 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %26 = load i32, i32* %25, align 8, !noalias !214
  %27 = icmp sgt i32 %26, 4
  br i1 %27, label %28, label %29

28:                                               ; preds = %7
  call void @abort() #13, !noalias !214
  unreachable

29:                                               ; preds = %7
  store i32 4, i32* %24, align 8, !alias.scope !214
  %30 = sub i32 4, %26
  %31 = icmp sgt i32 %30, 0
  %32 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  br i1 %31, label %33, label %113

33:                                               ; preds = %29
  %34 = bitcast %union.anon* %32 to [5 x i32]*
  %35 = zext i32 %30 to i64
  %36 = icmp ult i32 %30, 8
  br i1 %36, label %106, label %37

37:                                               ; preds = %33
  %38 = and i64 %35, 4294967288
  %39 = add nsw i64 %38, -8
  %40 = lshr exact i64 %39, 3
  %41 = add nuw nsw i64 %40, 1
  %42 = and i64 %41, 7
  %43 = icmp ult i64 %39, 56
  br i1 %43, label %91, label %44

44:                                               ; preds = %37
  %45 = sub nsw i64 %41, %42
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi i64 [ 0, %44 ], [ %88, %46 ]
  %48 = phi i64 [ %45, %44 ], [ %89, %46 ]
  %49 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %47
  %50 = bitcast i32* %49 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %50, align 8, !alias.scope !214
  %51 = getelementptr inbounds i32, i32* %49, i64 4
  %52 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %52, align 8, !alias.scope !214
  %53 = or i64 %47, 8
  %54 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %53
  %55 = bitcast i32* %54 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %55, align 8, !alias.scope !214
  %56 = getelementptr inbounds i32, i32* %54, i64 4
  %57 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %57, align 8, !alias.scope !214
  %58 = or i64 %47, 16
  %59 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %58
  %60 = bitcast i32* %59 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %60, align 8, !alias.scope !214
  %61 = getelementptr inbounds i32, i32* %59, i64 4
  %62 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %62, align 8, !alias.scope !214
  %63 = or i64 %47, 24
  %64 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %63
  %65 = bitcast i32* %64 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %65, align 8, !alias.scope !214
  %66 = getelementptr inbounds i32, i32* %64, i64 4
  %67 = bitcast i32* %66 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %67, align 8, !alias.scope !214
  %68 = or i64 %47, 32
  %69 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %68
  %70 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %70, align 8, !alias.scope !214
  %71 = getelementptr inbounds i32, i32* %69, i64 4
  %72 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %72, align 8, !alias.scope !214
  %73 = or i64 %47, 40
  %74 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %73
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %75, align 8, !alias.scope !214
  %76 = getelementptr inbounds i32, i32* %74, i64 4
  %77 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %77, align 8, !alias.scope !214
  %78 = or i64 %47, 48
  %79 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %78
  %80 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %80, align 8, !alias.scope !214
  %81 = getelementptr inbounds i32, i32* %79, i64 4
  %82 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %82, align 8, !alias.scope !214
  %83 = or i64 %47, 56
  %84 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %83
  %85 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %85, align 8, !alias.scope !214
  %86 = getelementptr inbounds i32, i32* %84, i64 4
  %87 = bitcast i32* %86 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %87, align 8, !alias.scope !214
  %88 = add i64 %47, 64
  %89 = add i64 %48, -8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %46, !llvm.loop !217

91:                                               ; preds = %46, %37
  %92 = phi i64 [ 0, %37 ], [ %88, %46 ]
  %93 = icmp eq i64 %42, 0
  br i1 %93, label %104, label %94

94:                                               ; preds = %91, %94
  %95 = phi i64 [ %101, %94 ], [ %92, %91 ]
  %96 = phi i64 [ %102, %94 ], [ %42, %91 ]
  %97 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %95
  %98 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %98, align 8, !alias.scope !214
  %99 = getelementptr inbounds i32, i32* %97, i64 4
  %100 = bitcast i32* %99 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %100, align 8, !alias.scope !214
  %101 = add i64 %95, 8
  %102 = add i64 %96, -1
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %94, !llvm.loop !218

104:                                              ; preds = %94, %91
  %105 = icmp eq i64 %38, %35
  br i1 %105, label %113, label %106

106:                                              ; preds = %104, %33
  %107 = phi i64 [ 0, %33 ], [ %38, %104 ]
  br label %108

108:                                              ; preds = %106, %108
  %109 = phi i64 [ %111, %108 ], [ %107, %106 ]
  %110 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %109
  store i32 1, i32* %110, align 4, !alias.scope !214
  %111 = add nuw nsw i64 %109, 1
  %112 = icmp eq i64 %111, %35
  br i1 %112, label %113, label %108, !llvm.loop !219

113:                                              ; preds = %108, %104, %29
  %114 = getelementptr inbounds %union.anon, %union.anon* %32, i64 0, i32 0
  %115 = bitcast %union.anon* %32 to i32*
  %116 = sext i32 %30 to i64
  %117 = getelementptr inbounds i32, i32* %115, i64 %116
  %118 = bitcast i32* %117 to i8*
  %119 = icmp sgt i32 %26, 5
  %120 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %121 = getelementptr inbounds %union.anon, %union.anon* %120, i64 0, i32 0
  %122 = load i32*, i32** %121, align 8, !noalias !214
  %123 = bitcast %union.anon* %120 to i32*
  %124 = select i1 %119, i32* %122, i32* %123
  %125 = bitcast i32* %124 to i8*
  %126 = sext i32 %26 to i64
  %127 = shl nsw i64 %126, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %118, i8* align 4 %125, i64 %127, i1 false) #12
  %128 = load i32, i32* %24, align 8
  %129 = icmp sgt i32 %128, 5
  %130 = load i32*, i32** %114, align 8
  %131 = select i1 %129, i32* %130, i32* %115
  %132 = load i32, i32* %131, align 4
  %133 = icmp sgt i32 %132, 0
  br i1 %133, label %134, label %165

134:                                              ; preds = %113
  %135 = bitcast %union.anon* %32 to [5 x i32]*
  %136 = getelementptr inbounds [5 x i32], [5 x i32]* %135, i64 0, i64 1
  %137 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 1
  %138 = bitcast [16 x i8]* %137 to i32*
  %139 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 1, i64 4
  %140 = bitcast i8* %139 to i32*
  %141 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 1
  %142 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 2
  %143 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 6
  %144 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 7
  %145 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 8
  %146 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 9
  %147 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 10
  %148 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 4
  %149 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 5
  %150 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 3
  %151 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 12
  %152 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 11
  %153 = getelementptr inbounds i32, i32* %115, i64 1
  %154 = getelementptr inbounds i32, i32* %130, i64 1
  %155 = select i1 %129, i32* %154, i32* %136
  %156 = getelementptr inbounds i32, i32* %130, i64 2
  %157 = select i1 %129, i32* %156, i32* %138
  %158 = getelementptr inbounds i32, i32* %130, i64 3
  %159 = select i1 %129, i32* %158, i32* %140
  br label %160

160:                                              ; preds = %134, %184
  %161 = phi i32 [ %132, %134 ], [ %185, %184 ]
  %162 = phi i32 [ 0, %134 ], [ %186, %184 ]
  %163 = load i32, i32* %155, align 4
  %164 = icmp sgt i32 %163, 0
  br i1 %164, label %172, label %184

165:                                              ; preds = %184, %113
  %166 = xor i1 %129, true
  %167 = icmp eq i32* %130, null
  %168 = or i1 %167, %166
  br i1 %168, label %171, label %169

169:                                              ; preds = %165
  %170 = bitcast i32* %130 to i8*
  call void @_ZdaPv(i8* %170) #11
  br label %171

171:                                              ; preds = %165, %169
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %23) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #12
  ret void

172:                                              ; preds = %160, %199
  %173 = phi i32 [ %200, %199 ], [ %163, %160 ]
  %174 = phi i32 [ %201, %199 ], [ 0, %160 ]
  %175 = load i32, i32* %157, align 4
  %176 = icmp sgt i32 %175, 0
  br i1 %176, label %177, label %199

177:                                              ; preds = %172
  %178 = load i32, i32* %153, align 4
  %179 = mul nsw i32 %178, %162
  %180 = add nsw i32 %179, %174
  %181 = load i32, i32* %159, align 4
  br label %188

182:                                              ; preds = %199
  %183 = load i32, i32* %131, align 4
  br label %184

184:                                              ; preds = %182, %160
  %185 = phi i32 [ %183, %182 ], [ %161, %160 ]
  %186 = add nuw nsw i32 %162, 1
  %187 = icmp slt i32 %186, %185
  br i1 %187, label %160, label %165

188:                                              ; preds = %177, %205
  %189 = phi i32 [ %175, %177 ], [ %206, %205 ]
  %190 = phi i32 [ %181, %177 ], [ %207, %205 ]
  %191 = phi i32 [ 0, %177 ], [ %208, %205 ]
  %192 = icmp sgt i32 %190, 0
  br i1 %192, label %193, label %205

193:                                              ; preds = %188
  %194 = load i32, i32* %138, align 8
  %195 = mul nsw i32 %180, %194
  %196 = add nsw i32 %195, %191
  br label %210

197:                                              ; preds = %205
  %198 = load i32, i32* %155, align 4
  br label %199

199:                                              ; preds = %197, %172
  %200 = phi i32 [ %198, %197 ], [ %173, %172 ]
  %201 = add nuw nsw i32 %174, 1
  %202 = icmp slt i32 %201, %200
  br i1 %202, label %172, label %182

203:                                              ; preds = %334
  %204 = load i32, i32* %157, align 4
  br label %205

205:                                              ; preds = %203, %188
  %206 = phi i32 [ %204, %203 ], [ %189, %188 ]
  %207 = phi i32 [ %364, %203 ], [ %190, %188 ]
  %208 = add nuw nsw i32 %191, 1
  %209 = icmp slt i32 %208, %206
  br i1 %209, label %188, label %197

210:                                              ; preds = %193, %334
  %211 = phi i32 [ 0, %193 ], [ %363, %334 ]
  %212 = load i32, i32* %141, align 4
  %213 = load i32, i32* %12, align 4
  %214 = mul nsw i32 %213, %162
  %215 = load i32, i32* %13, align 4
  %216 = mul nsw i32 %215, %174
  %217 = add nsw i32 %216, %214
  %218 = load i32, i32* %14, align 4
  %219 = mul nsw i32 %218, %191
  %220 = add nsw i32 %217, %219
  %221 = load i32, i32* %15, align 4
  %222 = mul nsw i32 %221, %211
  %223 = add nsw i32 %220, %222
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds i8, i8* %2, i64 %224
  %226 = load i8, i8* %225, align 1
  %227 = sext i8 %226 to i32
  %228 = add nsw i32 %212, %227
  %229 = load i32, i32* %142, align 4
  %230 = load i32, i32* %18, align 4
  %231 = mul nsw i32 %230, %162
  %232 = load i32, i32* %19, align 4
  %233 = mul nsw i32 %232, %174
  %234 = add nsw i32 %233, %231
  %235 = load i32, i32* %20, align 4
  %236 = mul nsw i32 %235, %191
  %237 = add nsw i32 %234, %236
  %238 = load i32, i32* %21, align 4
  %239 = mul nsw i32 %238, %211
  %240 = add nsw i32 %237, %239
  %241 = sext i32 %240 to i64
  %242 = getelementptr inbounds i8, i8* %4, i64 %241
  %243 = load i8, i8* %242, align 1
  %244 = sext i8 %243 to i32
  %245 = add nsw i32 %229, %244
  %246 = load i32, i32* %143, align 4
  %247 = shl i32 %228, %246
  %248 = shl i32 %245, %246
  %249 = load i32, i32* %144, align 4
  %250 = load i32, i32* %145, align 4
  %251 = icmp eq i32 %247, %249
  br i1 %251, label %256, label %252

252:                                              ; preds = %210
  %253 = sext i32 %247 to i64
  %254 = sext i32 %249 to i64
  %255 = mul nsw i64 %254, %253
  br label %260

256:                                              ; preds = %210
  %257 = icmp eq i32 %247, -2147483648
  %258 = sext i32 %247 to i64
  %259 = mul nsw i64 %258, %258
  br i1 %257, label %267, label %260

260:                                              ; preds = %256, %252
  %261 = phi i64 [ %255, %252 ], [ %259, %256 ]
  %262 = icmp sgt i64 %261, -1
  %263 = select i1 %262, i64 1073741824, i64 -1073741823
  %264 = add nsw i64 %263, %261
  %265 = sdiv i64 %264, 2147483648
  %266 = trunc i64 %265 to i32
  br label %267

267:                                              ; preds = %256, %260
  %268 = phi i32 [ %266, %260 ], [ 2147483647, %256 ]
  %269 = sub nsw i32 0, %250
  %270 = zext i32 %269 to i64
  %271 = shl nsw i64 -1, %270
  %272 = trunc i64 %271 to i32
  %273 = xor i32 %272, -1
  %274 = and i32 %268, %273
  %275 = ashr i32 %273, 1
  %276 = lshr i32 %268, 31
  %277 = add nsw i32 %276, %275
  %278 = ashr i32 %268, %269
  %279 = icmp sgt i32 %274, %277
  %280 = zext i1 %279 to i32
  %281 = load i32, i32* %146, align 4
  %282 = load i32, i32* %147, align 4
  %283 = icmp eq i32 %248, %281
  br i1 %283, label %288, label %284

284:                                              ; preds = %267
  %285 = sext i32 %248 to i64
  %286 = sext i32 %281 to i64
  %287 = mul nsw i64 %286, %285
  br label %292

288:                                              ; preds = %267
  %289 = icmp eq i32 %248, -2147483648
  %290 = sext i32 %248 to i64
  %291 = mul nsw i64 %290, %290
  br i1 %289, label %299, label %292

292:                                              ; preds = %288, %284
  %293 = phi i64 [ %287, %284 ], [ %291, %288 ]
  %294 = icmp sgt i64 %293, -1
  %295 = select i1 %294, i64 1073741824, i64 -1073741823
  %296 = add nsw i64 %295, %293
  %297 = sdiv i64 %296, 2147483648
  %298 = trunc i64 %297 to i32
  br label %299

299:                                              ; preds = %288, %292
  %300 = phi i32 [ %298, %292 ], [ 2147483647, %288 ]
  %301 = sub nsw i32 0, %282
  %302 = zext i32 %301 to i64
  %303 = shl nsw i64 -1, %302
  %304 = trunc i64 %303 to i32
  %305 = xor i32 %304, -1
  %306 = and i32 %300, %305
  %307 = ashr i32 %305, 1
  %308 = lshr i32 %300, 31
  %309 = add nsw i32 %308, %307
  %310 = ashr i32 %300, %301
  %311 = icmp sgt i32 %306, %309
  %312 = zext i1 %311 to i32
  %313 = add i32 %278, %280
  %314 = add i32 %313, %310
  %315 = add i32 %314, %312
  %316 = load i32, i32* %148, align 4
  %317 = load i32, i32* %149, align 4
  %318 = icmp eq i32 %315, %316
  br i1 %318, label %323, label %319

319:                                              ; preds = %299
  %320 = sext i32 %315 to i64
  %321 = sext i32 %316 to i64
  %322 = mul nsw i64 %320, %321
  br label %327

323:                                              ; preds = %299
  %324 = icmp eq i32 %315, -2147483648
  %325 = sext i32 %315 to i64
  %326 = mul nsw i64 %325, %325
  br i1 %324, label %334, label %327

327:                                              ; preds = %323, %319
  %328 = phi i64 [ %322, %319 ], [ %326, %323 ]
  %329 = icmp sgt i64 %328, -1
  %330 = select i1 %329, i64 1073741824, i64 -1073741823
  %331 = add nsw i64 %330, %328
  %332 = sdiv i64 %331, 2147483648
  %333 = trunc i64 %332 to i32
  br label %334

334:                                              ; preds = %323, %327
  %335 = phi i32 [ %333, %327 ], [ 2147483647, %323 ]
  %336 = sub nsw i32 0, %317
  %337 = zext i32 %336 to i64
  %338 = shl nsw i64 -1, %337
  %339 = trunc i64 %338 to i32
  %340 = xor i32 %339, -1
  %341 = and i32 %335, %340
  %342 = ashr i32 %340, 1
  %343 = lshr i32 %335, 31
  %344 = add nsw i32 %343, %342
  %345 = ashr i32 %335, %336
  %346 = icmp sgt i32 %341, %344
  %347 = zext i1 %346 to i32
  %348 = load i32, i32* %150, align 4
  %349 = add i32 %348, %345
  %350 = add i32 %349, %347
  %351 = load i32, i32* %152, align 4
  %352 = icmp slt i32 %351, %350
  %353 = select i1 %352, i32 %350, i32 %351
  %354 = load i32, i32* %151, align 4
  %355 = icmp slt i32 %353, %354
  %356 = select i1 %355, i32 %353, i32 %354
  %357 = trunc i32 %356 to i8
  %358 = load i32, i32* %140, align 4
  %359 = mul nsw i32 %196, %358
  %360 = add nsw i32 %359, %211
  %361 = sext i32 %360 to i64
  %362 = getelementptr inbounds i8, i8* %6, i64 %361
  store i8 %357, i8* %362, align 1
  %363 = add nuw nsw i32 %211, 1
  %364 = load i32, i32* %159, align 4
  %365 = icmp slt i32 %363, %364
  br i1 %365, label %210, label %203
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph(%"struct.tflite::ArithmeticParams"* dereferenceable(80), %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*, %"class.tflite::RuntimeShape"* dereferenceable(32), i8*) local_unnamed_addr #7 comdat {
  %8 = alloca %"struct.tflite::NdArrayDesc", align 4
  %9 = alloca %"struct.tflite::NdArrayDesc", align 4
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = bitcast %"struct.tflite::NdArrayDesc"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #12
  %12 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 0
  %13 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 1
  %14 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 2
  %15 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %8, i64 0, i32 1, i64 3
  %16 = bitcast %"struct.tflite::NdArrayDesc"* %9 to i8*
  %17 = bitcast %"struct.tflite::NdArrayDesc"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %17, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #12
  %18 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 0
  %19 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 1
  %20 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 2
  %21 = getelementptr inbounds %"struct.tflite::NdArrayDesc", %"struct.tflite::NdArrayDesc"* %9, i64 0, i32 1, i64 3
  %22 = bitcast %"struct.tflite::NdArrayDesc"* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %22, i8 -86, i64 32, i1 false)
  call void @_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_(%"class.tflite::RuntimeShape"* dereferenceable(32) %1, %"class.tflite::RuntimeShape"* dereferenceable(32) %3, %"struct.tflite::NdArrayDesc"* nonnull %8, %"struct.tflite::NdArrayDesc"* nonnull %9)
  %23 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %23) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 32, i1 false)
  %24 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %24, align 8, !alias.scope !220
  %25 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %26 = load i32, i32* %25, align 8, !noalias !220
  %27 = icmp sgt i32 %26, 4
  br i1 %27, label %28, label %29

28:                                               ; preds = %7
  call void @abort() #13, !noalias !220
  unreachable

29:                                               ; preds = %7
  store i32 4, i32* %24, align 8, !alias.scope !220
  %30 = sub i32 4, %26
  %31 = icmp sgt i32 %30, 0
  %32 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  br i1 %31, label %33, label %113

33:                                               ; preds = %29
  %34 = bitcast %union.anon* %32 to [5 x i32]*
  %35 = zext i32 %30 to i64
  %36 = icmp ult i32 %30, 8
  br i1 %36, label %106, label %37

37:                                               ; preds = %33
  %38 = and i64 %35, 4294967288
  %39 = add nsw i64 %38, -8
  %40 = lshr exact i64 %39, 3
  %41 = add nuw nsw i64 %40, 1
  %42 = and i64 %41, 7
  %43 = icmp ult i64 %39, 56
  br i1 %43, label %91, label %44

44:                                               ; preds = %37
  %45 = sub nsw i64 %41, %42
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi i64 [ 0, %44 ], [ %88, %46 ]
  %48 = phi i64 [ %45, %44 ], [ %89, %46 ]
  %49 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %47
  %50 = bitcast i32* %49 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %50, align 8, !alias.scope !220
  %51 = getelementptr inbounds i32, i32* %49, i64 4
  %52 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %52, align 8, !alias.scope !220
  %53 = or i64 %47, 8
  %54 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %53
  %55 = bitcast i32* %54 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %55, align 8, !alias.scope !220
  %56 = getelementptr inbounds i32, i32* %54, i64 4
  %57 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %57, align 8, !alias.scope !220
  %58 = or i64 %47, 16
  %59 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %58
  %60 = bitcast i32* %59 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %60, align 8, !alias.scope !220
  %61 = getelementptr inbounds i32, i32* %59, i64 4
  %62 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %62, align 8, !alias.scope !220
  %63 = or i64 %47, 24
  %64 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %63
  %65 = bitcast i32* %64 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %65, align 8, !alias.scope !220
  %66 = getelementptr inbounds i32, i32* %64, i64 4
  %67 = bitcast i32* %66 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %67, align 8, !alias.scope !220
  %68 = or i64 %47, 32
  %69 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %68
  %70 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %70, align 8, !alias.scope !220
  %71 = getelementptr inbounds i32, i32* %69, i64 4
  %72 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %72, align 8, !alias.scope !220
  %73 = or i64 %47, 40
  %74 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %73
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %75, align 8, !alias.scope !220
  %76 = getelementptr inbounds i32, i32* %74, i64 4
  %77 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %77, align 8, !alias.scope !220
  %78 = or i64 %47, 48
  %79 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %78
  %80 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %80, align 8, !alias.scope !220
  %81 = getelementptr inbounds i32, i32* %79, i64 4
  %82 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %82, align 8, !alias.scope !220
  %83 = or i64 %47, 56
  %84 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %83
  %85 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %85, align 8, !alias.scope !220
  %86 = getelementptr inbounds i32, i32* %84, i64 4
  %87 = bitcast i32* %86 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %87, align 8, !alias.scope !220
  %88 = add i64 %47, 64
  %89 = add i64 %48, -8
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %46, !llvm.loop !223

91:                                               ; preds = %46, %37
  %92 = phi i64 [ 0, %37 ], [ %88, %46 ]
  %93 = icmp eq i64 %42, 0
  br i1 %93, label %104, label %94

94:                                               ; preds = %91, %94
  %95 = phi i64 [ %101, %94 ], [ %92, %91 ]
  %96 = phi i64 [ %102, %94 ], [ %42, %91 ]
  %97 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %95
  %98 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %98, align 8, !alias.scope !220
  %99 = getelementptr inbounds i32, i32* %97, i64 4
  %100 = bitcast i32* %99 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %100, align 8, !alias.scope !220
  %101 = add i64 %95, 8
  %102 = add i64 %96, -1
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %94, !llvm.loop !224

104:                                              ; preds = %94, %91
  %105 = icmp eq i64 %38, %35
  br i1 %105, label %113, label %106

106:                                              ; preds = %104, %33
  %107 = phi i64 [ 0, %33 ], [ %38, %104 ]
  br label %108

108:                                              ; preds = %106, %108
  %109 = phi i64 [ %111, %108 ], [ %107, %106 ]
  %110 = getelementptr inbounds [5 x i32], [5 x i32]* %34, i64 0, i64 %109
  store i32 1, i32* %110, align 4, !alias.scope !220
  %111 = add nuw nsw i64 %109, 1
  %112 = icmp eq i64 %111, %35
  br i1 %112, label %113, label %108, !llvm.loop !225

113:                                              ; preds = %108, %104, %29
  %114 = getelementptr inbounds %union.anon, %union.anon* %32, i64 0, i32 0
  %115 = bitcast %union.anon* %32 to i32*
  %116 = sext i32 %30 to i64
  %117 = getelementptr inbounds i32, i32* %115, i64 %116
  %118 = bitcast i32* %117 to i8*
  %119 = icmp sgt i32 %26, 5
  %120 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  %121 = getelementptr inbounds %union.anon, %union.anon* %120, i64 0, i32 0
  %122 = load i32*, i32** %121, align 8, !noalias !220
  %123 = bitcast %union.anon* %120 to i32*
  %124 = select i1 %119, i32* %122, i32* %123
  %125 = bitcast i32* %124 to i8*
  %126 = sext i32 %26 to i64
  %127 = shl nsw i64 %126, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %118, i8* align 4 %125, i64 %127, i1 false) #12
  %128 = load i32, i32* %24, align 8
  %129 = icmp sgt i32 %128, 5
  %130 = load i32*, i32** %114, align 8
  %131 = select i1 %129, i32* %130, i32* %115
  %132 = load i32, i32* %131, align 4
  %133 = icmp sgt i32 %132, 0
  br i1 %133, label %134, label %165

134:                                              ; preds = %113
  %135 = bitcast %union.anon* %32 to [5 x i32]*
  %136 = getelementptr inbounds [5 x i32], [5 x i32]* %135, i64 0, i64 1
  %137 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 1
  %138 = bitcast [16 x i8]* %137 to i32*
  %139 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 1, i64 4
  %140 = bitcast i8* %139 to i32*
  %141 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 1
  %142 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 2
  %143 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 6
  %144 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 7
  %145 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 8
  %146 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 9
  %147 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 10
  %148 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 4
  %149 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 5
  %150 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 3
  %151 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 12
  %152 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 11
  %153 = getelementptr inbounds i32, i32* %115, i64 1
  %154 = getelementptr inbounds i32, i32* %130, i64 1
  %155 = select i1 %129, i32* %154, i32* %136
  %156 = getelementptr inbounds i32, i32* %130, i64 2
  %157 = select i1 %129, i32* %156, i32* %138
  %158 = getelementptr inbounds i32, i32* %130, i64 3
  %159 = select i1 %129, i32* %158, i32* %140
  br label %160

160:                                              ; preds = %134, %184
  %161 = phi i32 [ %132, %134 ], [ %185, %184 ]
  %162 = phi i32 [ 0, %134 ], [ %186, %184 ]
  %163 = load i32, i32* %155, align 4
  %164 = icmp sgt i32 %163, 0
  br i1 %164, label %172, label %184

165:                                              ; preds = %184, %113
  %166 = xor i1 %129, true
  %167 = icmp eq i32* %130, null
  %168 = or i1 %167, %166
  br i1 %168, label %171, label %169

169:                                              ; preds = %165
  %170 = bitcast i32* %130 to i8*
  call void @_ZdaPv(i8* %170) #11
  br label %171

171:                                              ; preds = %165, %169
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %23) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #12
  ret void

172:                                              ; preds = %160, %199
  %173 = phi i32 [ %200, %199 ], [ %163, %160 ]
  %174 = phi i32 [ %201, %199 ], [ 0, %160 ]
  %175 = load i32, i32* %157, align 4
  %176 = icmp sgt i32 %175, 0
  br i1 %176, label %177, label %199

177:                                              ; preds = %172
  %178 = load i32, i32* %153, align 4
  %179 = mul nsw i32 %178, %162
  %180 = add nsw i32 %179, %174
  %181 = load i32, i32* %159, align 4
  br label %188

182:                                              ; preds = %199
  %183 = load i32, i32* %131, align 4
  br label %184

184:                                              ; preds = %182, %160
  %185 = phi i32 [ %183, %182 ], [ %161, %160 ]
  %186 = add nuw nsw i32 %162, 1
  %187 = icmp slt i32 %186, %185
  br i1 %187, label %160, label %165

188:                                              ; preds = %177, %205
  %189 = phi i32 [ %175, %177 ], [ %206, %205 ]
  %190 = phi i32 [ %181, %177 ], [ %207, %205 ]
  %191 = phi i32 [ 0, %177 ], [ %208, %205 ]
  %192 = icmp sgt i32 %190, 0
  br i1 %192, label %193, label %205

193:                                              ; preds = %188
  %194 = load i32, i32* %138, align 8
  %195 = mul nsw i32 %180, %194
  %196 = add nsw i32 %195, %191
  br label %210

197:                                              ; preds = %205
  %198 = load i32, i32* %155, align 4
  br label %199

199:                                              ; preds = %197, %172
  %200 = phi i32 [ %198, %197 ], [ %173, %172 ]
  %201 = add nuw nsw i32 %174, 1
  %202 = icmp slt i32 %201, %200
  br i1 %202, label %172, label %182

203:                                              ; preds = %334
  %204 = load i32, i32* %157, align 4
  br label %205

205:                                              ; preds = %203, %188
  %206 = phi i32 [ %204, %203 ], [ %189, %188 ]
  %207 = phi i32 [ %364, %203 ], [ %190, %188 ]
  %208 = add nuw nsw i32 %191, 1
  %209 = icmp slt i32 %208, %206
  br i1 %209, label %188, label %197

210:                                              ; preds = %193, %334
  %211 = phi i32 [ 0, %193 ], [ %363, %334 ]
  %212 = load i32, i32* %141, align 4
  %213 = load i32, i32* %12, align 4
  %214 = mul nsw i32 %213, %162
  %215 = load i32, i32* %13, align 4
  %216 = mul nsw i32 %215, %174
  %217 = add nsw i32 %216, %214
  %218 = load i32, i32* %14, align 4
  %219 = mul nsw i32 %218, %191
  %220 = add nsw i32 %217, %219
  %221 = load i32, i32* %15, align 4
  %222 = mul nsw i32 %221, %211
  %223 = add nsw i32 %220, %222
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds i8, i8* %2, i64 %224
  %226 = load i8, i8* %225, align 1
  %227 = zext i8 %226 to i32
  %228 = add nsw i32 %212, %227
  %229 = load i32, i32* %142, align 4
  %230 = load i32, i32* %18, align 4
  %231 = mul nsw i32 %230, %162
  %232 = load i32, i32* %19, align 4
  %233 = mul nsw i32 %232, %174
  %234 = add nsw i32 %233, %231
  %235 = load i32, i32* %20, align 4
  %236 = mul nsw i32 %235, %191
  %237 = add nsw i32 %234, %236
  %238 = load i32, i32* %21, align 4
  %239 = mul nsw i32 %238, %211
  %240 = add nsw i32 %237, %239
  %241 = sext i32 %240 to i64
  %242 = getelementptr inbounds i8, i8* %4, i64 %241
  %243 = load i8, i8* %242, align 1
  %244 = zext i8 %243 to i32
  %245 = add nsw i32 %229, %244
  %246 = load i32, i32* %143, align 4
  %247 = shl i32 %228, %246
  %248 = shl i32 %245, %246
  %249 = load i32, i32* %144, align 4
  %250 = load i32, i32* %145, align 4
  %251 = icmp eq i32 %247, %249
  br i1 %251, label %256, label %252

252:                                              ; preds = %210
  %253 = sext i32 %247 to i64
  %254 = sext i32 %249 to i64
  %255 = mul nsw i64 %254, %253
  br label %260

256:                                              ; preds = %210
  %257 = icmp eq i32 %247, -2147483648
  %258 = sext i32 %247 to i64
  %259 = mul nsw i64 %258, %258
  br i1 %257, label %267, label %260

260:                                              ; preds = %256, %252
  %261 = phi i64 [ %255, %252 ], [ %259, %256 ]
  %262 = icmp sgt i64 %261, -1
  %263 = select i1 %262, i64 1073741824, i64 -1073741823
  %264 = add nsw i64 %263, %261
  %265 = sdiv i64 %264, 2147483648
  %266 = trunc i64 %265 to i32
  br label %267

267:                                              ; preds = %256, %260
  %268 = phi i32 [ %266, %260 ], [ 2147483647, %256 ]
  %269 = sub nsw i32 0, %250
  %270 = zext i32 %269 to i64
  %271 = shl nsw i64 -1, %270
  %272 = trunc i64 %271 to i32
  %273 = xor i32 %272, -1
  %274 = and i32 %268, %273
  %275 = ashr i32 %273, 1
  %276 = lshr i32 %268, 31
  %277 = add nsw i32 %276, %275
  %278 = ashr i32 %268, %269
  %279 = icmp sgt i32 %274, %277
  %280 = zext i1 %279 to i32
  %281 = load i32, i32* %146, align 4
  %282 = load i32, i32* %147, align 4
  %283 = icmp eq i32 %248, %281
  br i1 %283, label %288, label %284

284:                                              ; preds = %267
  %285 = sext i32 %248 to i64
  %286 = sext i32 %281 to i64
  %287 = mul nsw i64 %286, %285
  br label %292

288:                                              ; preds = %267
  %289 = icmp eq i32 %248, -2147483648
  %290 = sext i32 %248 to i64
  %291 = mul nsw i64 %290, %290
  br i1 %289, label %299, label %292

292:                                              ; preds = %288, %284
  %293 = phi i64 [ %287, %284 ], [ %291, %288 ]
  %294 = icmp sgt i64 %293, -1
  %295 = select i1 %294, i64 1073741824, i64 -1073741823
  %296 = add nsw i64 %295, %293
  %297 = sdiv i64 %296, 2147483648
  %298 = trunc i64 %297 to i32
  br label %299

299:                                              ; preds = %288, %292
  %300 = phi i32 [ %298, %292 ], [ 2147483647, %288 ]
  %301 = sub nsw i32 0, %282
  %302 = zext i32 %301 to i64
  %303 = shl nsw i64 -1, %302
  %304 = trunc i64 %303 to i32
  %305 = xor i32 %304, -1
  %306 = and i32 %300, %305
  %307 = ashr i32 %305, 1
  %308 = lshr i32 %300, 31
  %309 = add nsw i32 %308, %307
  %310 = ashr i32 %300, %301
  %311 = icmp sgt i32 %306, %309
  %312 = zext i1 %311 to i32
  %313 = add i32 %278, %280
  %314 = add i32 %313, %310
  %315 = add i32 %314, %312
  %316 = load i32, i32* %148, align 4
  %317 = load i32, i32* %149, align 4
  %318 = icmp eq i32 %315, %316
  br i1 %318, label %323, label %319

319:                                              ; preds = %299
  %320 = sext i32 %315 to i64
  %321 = sext i32 %316 to i64
  %322 = mul nsw i64 %320, %321
  br label %327

323:                                              ; preds = %299
  %324 = icmp eq i32 %315, -2147483648
  %325 = sext i32 %315 to i64
  %326 = mul nsw i64 %325, %325
  br i1 %324, label %334, label %327

327:                                              ; preds = %323, %319
  %328 = phi i64 [ %322, %319 ], [ %326, %323 ]
  %329 = icmp sgt i64 %328, -1
  %330 = select i1 %329, i64 1073741824, i64 -1073741823
  %331 = add nsw i64 %330, %328
  %332 = sdiv i64 %331, 2147483648
  %333 = trunc i64 %332 to i32
  br label %334

334:                                              ; preds = %323, %327
  %335 = phi i32 [ %333, %327 ], [ 2147483647, %323 ]
  %336 = sub nsw i32 0, %317
  %337 = zext i32 %336 to i64
  %338 = shl nsw i64 -1, %337
  %339 = trunc i64 %338 to i32
  %340 = xor i32 %339, -1
  %341 = and i32 %335, %340
  %342 = ashr i32 %340, 1
  %343 = lshr i32 %335, 31
  %344 = add nsw i32 %343, %342
  %345 = ashr i32 %335, %336
  %346 = icmp sgt i32 %341, %344
  %347 = zext i1 %346 to i32
  %348 = load i32, i32* %150, align 4
  %349 = add i32 %348, %345
  %350 = add i32 %349, %347
  %351 = load i32, i32* %152, align 4
  %352 = icmp slt i32 %351, %350
  %353 = select i1 %352, i32 %350, i32 %351
  %354 = load i32, i32* %151, align 4
  %355 = icmp slt i32 %353, %354
  %356 = select i1 %355, i32 %353, i32 %354
  %357 = trunc i32 %356 to i8
  %358 = load i32, i32* %140, align 4
  %359 = mul nsw i32 %196, %358
  %360 = add nsw i32 %359, %211
  %361 = sext i32 %360 to i64
  %362 = getelementptr inbounds i8, i8* %6, i64 %361
  store i8 %357, i8* %362, align 1
  %363 = add nuw nsw i32 %211, 1
  %364 = load i32, i32* %159, align 4
  %365 = icmp slt i32 %363, %364
  br i1 %365, label %210, label %203
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite21reference_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa(i32, %"struct.tflite::ArithmeticParams"* dereferenceable(80), i8*, i8*, i8*) local_unnamed_addr #7 comdat {
  %6 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 2
  %7 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 1
  %8 = icmp sgt i32 %0, 0
  br i1 %8, label %9, label %21

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 6
  %11 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 7
  %12 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 8
  %13 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 9
  %14 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 10
  %15 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 4
  %16 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 5
  %17 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 3
  %18 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 12
  %19 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 11
  %20 = zext i32 %0 to i64
  br label %22

21:                                               ; preds = %122, %5
  ret void

22:                                               ; preds = %122, %9
  %23 = phi i64 [ 0, %9 ], [ %147, %122 ]
  %24 = load i32, i32* %7, align 4
  %25 = getelementptr inbounds i8, i8* %2, i64 %23
  %26 = load i8, i8* %25, align 1
  %27 = sext i8 %26 to i32
  %28 = add nsw i32 %24, %27
  %29 = load i32, i32* %6, align 4
  %30 = getelementptr inbounds i8, i8* %3, i64 %23
  %31 = load i8, i8* %30, align 1
  %32 = sext i8 %31 to i32
  %33 = add nsw i32 %29, %32
  %34 = load i32, i32* %10, align 4
  %35 = shl i32 %28, %34
  %36 = shl i32 %33, %34
  %37 = load i32, i32* %11, align 4
  %38 = load i32, i32* %12, align 4
  %39 = icmp eq i32 %35, %37
  br i1 %39, label %44, label %40

40:                                               ; preds = %22
  %41 = sext i32 %35 to i64
  %42 = sext i32 %37 to i64
  %43 = mul nsw i64 %42, %41
  br label %48

44:                                               ; preds = %22
  %45 = icmp eq i32 %35, -2147483648
  %46 = sext i32 %35 to i64
  %47 = mul nsw i64 %46, %46
  br i1 %45, label %55, label %48

48:                                               ; preds = %44, %40
  %49 = phi i64 [ %43, %40 ], [ %47, %44 ]
  %50 = icmp sgt i64 %49, -1
  %51 = select i1 %50, i64 1073741824, i64 -1073741823
  %52 = add nsw i64 %51, %49
  %53 = sdiv i64 %52, 2147483648
  %54 = trunc i64 %53 to i32
  br label %55

55:                                               ; preds = %44, %48
  %56 = phi i32 [ %54, %48 ], [ 2147483647, %44 ]
  %57 = sub nsw i32 0, %38
  %58 = zext i32 %57 to i64
  %59 = shl nsw i64 -1, %58
  %60 = trunc i64 %59 to i32
  %61 = xor i32 %60, -1
  %62 = and i32 %56, %61
  %63 = ashr i32 %61, 1
  %64 = lshr i32 %56, 31
  %65 = add nsw i32 %64, %63
  %66 = ashr i32 %56, %57
  %67 = icmp sgt i32 %62, %65
  %68 = zext i1 %67 to i32
  %69 = load i32, i32* %13, align 4
  %70 = load i32, i32* %14, align 4
  %71 = icmp eq i32 %36, %69
  br i1 %71, label %76, label %72

72:                                               ; preds = %55
  %73 = sext i32 %36 to i64
  %74 = sext i32 %69 to i64
  %75 = mul nsw i64 %74, %73
  br label %80

76:                                               ; preds = %55
  %77 = icmp eq i32 %36, -2147483648
  %78 = sext i32 %36 to i64
  %79 = mul nsw i64 %78, %78
  br i1 %77, label %87, label %80

80:                                               ; preds = %76, %72
  %81 = phi i64 [ %75, %72 ], [ %79, %76 ]
  %82 = icmp sgt i64 %81, -1
  %83 = select i1 %82, i64 1073741824, i64 -1073741823
  %84 = add nsw i64 %83, %81
  %85 = sdiv i64 %84, 2147483648
  %86 = trunc i64 %85 to i32
  br label %87

87:                                               ; preds = %76, %80
  %88 = phi i32 [ %86, %80 ], [ 2147483647, %76 ]
  %89 = sub nsw i32 0, %70
  %90 = zext i32 %89 to i64
  %91 = shl nsw i64 -1, %90
  %92 = trunc i64 %91 to i32
  %93 = xor i32 %92, -1
  %94 = and i32 %88, %93
  %95 = ashr i32 %93, 1
  %96 = lshr i32 %88, 31
  %97 = add nsw i32 %96, %95
  %98 = ashr i32 %88, %89
  %99 = icmp sgt i32 %94, %97
  %100 = zext i1 %99 to i32
  %101 = add i32 %66, %68
  %102 = add i32 %101, %98
  %103 = add i32 %102, %100
  %104 = load i32, i32* %15, align 4
  %105 = load i32, i32* %16, align 4
  %106 = icmp eq i32 %103, %104
  br i1 %106, label %111, label %107

107:                                              ; preds = %87
  %108 = sext i32 %103 to i64
  %109 = sext i32 %104 to i64
  %110 = mul nsw i64 %108, %109
  br label %115

111:                                              ; preds = %87
  %112 = icmp eq i32 %103, -2147483648
  %113 = sext i32 %103 to i64
  %114 = mul nsw i64 %113, %113
  br i1 %112, label %122, label %115

115:                                              ; preds = %111, %107
  %116 = phi i64 [ %110, %107 ], [ %114, %111 ]
  %117 = icmp sgt i64 %116, -1
  %118 = select i1 %117, i64 1073741824, i64 -1073741823
  %119 = add nsw i64 %118, %116
  %120 = sdiv i64 %119, 2147483648
  %121 = trunc i64 %120 to i32
  br label %122

122:                                              ; preds = %111, %115
  %123 = phi i32 [ %121, %115 ], [ 2147483647, %111 ]
  %124 = sub nsw i32 0, %105
  %125 = zext i32 %124 to i64
  %126 = shl nsw i64 -1, %125
  %127 = trunc i64 %126 to i32
  %128 = xor i32 %127, -1
  %129 = and i32 %123, %128
  %130 = ashr i32 %128, 1
  %131 = lshr i32 %123, 31
  %132 = add nsw i32 %131, %130
  %133 = ashr i32 %123, %124
  %134 = icmp sgt i32 %129, %132
  %135 = zext i1 %134 to i32
  %136 = load i32, i32* %17, align 4
  %137 = add i32 %136, %133
  %138 = add i32 %137, %135
  %139 = load i32, i32* %19, align 4
  %140 = icmp slt i32 %139, %138
  %141 = select i1 %140, i32 %138, i32 %139
  %142 = load i32, i32* %18, align 4
  %143 = icmp slt i32 %141, %142
  %144 = select i1 %143, i32 %141, i32 %142
  %145 = trunc i32 %144 to i8
  %146 = getelementptr inbounds i8, i8* %4, i64 %23
  store i8 %145, i8* %146, align 1
  %147 = add nuw nsw i64 %23, 1
  %148 = icmp eq i64 %147, %20
  br i1 %148, label %21, label %22
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph(i32, %"struct.tflite::ArithmeticParams"* dereferenceable(80), i8*, i8*, i8*) local_unnamed_addr #7 comdat {
  %6 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 2
  %7 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 1
  %8 = icmp sgt i32 %0, 0
  br i1 %8, label %9, label %21

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 6
  %11 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 7
  %12 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 8
  %13 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 9
  %14 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 10
  %15 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 4
  %16 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 5
  %17 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 3
  %18 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 12
  %19 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 11
  %20 = zext i32 %0 to i64
  br label %22

21:                                               ; preds = %122, %5
  ret void

22:                                               ; preds = %122, %9
  %23 = phi i64 [ 0, %9 ], [ %147, %122 ]
  %24 = load i32, i32* %7, align 4
  %25 = getelementptr inbounds i8, i8* %2, i64 %23
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = add nsw i32 %24, %27
  %29 = load i32, i32* %6, align 4
  %30 = getelementptr inbounds i8, i8* %3, i64 %23
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = add nsw i32 %29, %32
  %34 = load i32, i32* %10, align 4
  %35 = shl i32 %28, %34
  %36 = shl i32 %33, %34
  %37 = load i32, i32* %11, align 4
  %38 = load i32, i32* %12, align 4
  %39 = icmp eq i32 %35, %37
  br i1 %39, label %44, label %40

40:                                               ; preds = %22
  %41 = sext i32 %35 to i64
  %42 = sext i32 %37 to i64
  %43 = mul nsw i64 %42, %41
  br label %48

44:                                               ; preds = %22
  %45 = icmp eq i32 %35, -2147483648
  %46 = sext i32 %35 to i64
  %47 = mul nsw i64 %46, %46
  br i1 %45, label %55, label %48

48:                                               ; preds = %44, %40
  %49 = phi i64 [ %43, %40 ], [ %47, %44 ]
  %50 = icmp sgt i64 %49, -1
  %51 = select i1 %50, i64 1073741824, i64 -1073741823
  %52 = add nsw i64 %51, %49
  %53 = sdiv i64 %52, 2147483648
  %54 = trunc i64 %53 to i32
  br label %55

55:                                               ; preds = %44, %48
  %56 = phi i32 [ %54, %48 ], [ 2147483647, %44 ]
  %57 = sub nsw i32 0, %38
  %58 = zext i32 %57 to i64
  %59 = shl nsw i64 -1, %58
  %60 = trunc i64 %59 to i32
  %61 = xor i32 %60, -1
  %62 = and i32 %56, %61
  %63 = ashr i32 %61, 1
  %64 = lshr i32 %56, 31
  %65 = add nsw i32 %64, %63
  %66 = ashr i32 %56, %57
  %67 = icmp sgt i32 %62, %65
  %68 = zext i1 %67 to i32
  %69 = load i32, i32* %13, align 4
  %70 = load i32, i32* %14, align 4
  %71 = icmp eq i32 %36, %69
  br i1 %71, label %76, label %72

72:                                               ; preds = %55
  %73 = sext i32 %36 to i64
  %74 = sext i32 %69 to i64
  %75 = mul nsw i64 %74, %73
  br label %80

76:                                               ; preds = %55
  %77 = icmp eq i32 %36, -2147483648
  %78 = sext i32 %36 to i64
  %79 = mul nsw i64 %78, %78
  br i1 %77, label %87, label %80

80:                                               ; preds = %76, %72
  %81 = phi i64 [ %75, %72 ], [ %79, %76 ]
  %82 = icmp sgt i64 %81, -1
  %83 = select i1 %82, i64 1073741824, i64 -1073741823
  %84 = add nsw i64 %83, %81
  %85 = sdiv i64 %84, 2147483648
  %86 = trunc i64 %85 to i32
  br label %87

87:                                               ; preds = %76, %80
  %88 = phi i32 [ %86, %80 ], [ 2147483647, %76 ]
  %89 = sub nsw i32 0, %70
  %90 = zext i32 %89 to i64
  %91 = shl nsw i64 -1, %90
  %92 = trunc i64 %91 to i32
  %93 = xor i32 %92, -1
  %94 = and i32 %88, %93
  %95 = ashr i32 %93, 1
  %96 = lshr i32 %88, 31
  %97 = add nsw i32 %96, %95
  %98 = ashr i32 %88, %89
  %99 = icmp sgt i32 %94, %97
  %100 = zext i1 %99 to i32
  %101 = add i32 %66, %68
  %102 = add i32 %101, %98
  %103 = add i32 %102, %100
  %104 = load i32, i32* %15, align 4
  %105 = load i32, i32* %16, align 4
  %106 = icmp eq i32 %103, %104
  br i1 %106, label %111, label %107

107:                                              ; preds = %87
  %108 = sext i32 %103 to i64
  %109 = sext i32 %104 to i64
  %110 = mul nsw i64 %108, %109
  br label %115

111:                                              ; preds = %87
  %112 = icmp eq i32 %103, -2147483648
  %113 = sext i32 %103 to i64
  %114 = mul nsw i64 %113, %113
  br i1 %112, label %122, label %115

115:                                              ; preds = %111, %107
  %116 = phi i64 [ %110, %107 ], [ %114, %111 ]
  %117 = icmp sgt i64 %116, -1
  %118 = select i1 %117, i64 1073741824, i64 -1073741823
  %119 = add nsw i64 %118, %116
  %120 = sdiv i64 %119, 2147483648
  %121 = trunc i64 %120 to i32
  br label %122

122:                                              ; preds = %111, %115
  %123 = phi i32 [ %121, %115 ], [ 2147483647, %111 ]
  %124 = sub nsw i32 0, %105
  %125 = zext i32 %124 to i64
  %126 = shl nsw i64 -1, %125
  %127 = trunc i64 %126 to i32
  %128 = xor i32 %127, -1
  %129 = and i32 %123, %128
  %130 = ashr i32 %128, 1
  %131 = lshr i32 %123, 31
  %132 = add nsw i32 %131, %130
  %133 = ashr i32 %123, %124
  %134 = icmp sgt i32 %129, %132
  %135 = zext i1 %134 to i32
  %136 = load i32, i32* %17, align 4
  %137 = add i32 %136, %133
  %138 = add i32 %137, %135
  %139 = load i32, i32* %19, align 4
  %140 = icmp slt i32 %139, %138
  %141 = select i1 %140, i32 %138, i32 %139
  %142 = load i32, i32* %18, align 4
  %143 = icmp slt i32 %141, %142
  %144 = select i1 %143, i32 %141, i32 %142
  %145 = trunc i32 %144 to i8
  %146 = getelementptr inbounds i8, i8* %4, i64 %23
  store i8 %145, i8* %146, align 1
  %147 = add nuw nsw i64 %23, 1
  %148 = icmp eq i64 %147, %20
  br i1 %148, label %21, label %22
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE1EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLiteAddParams*, %"struct.tflite::ops::builtin::add::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #3 comdat {
  %8 = alloca %"struct.tflite::ArithmeticParams", align 4
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = alloca %"class.tflite::RuntimeShape", align 8
  %13 = alloca %"class.tflite::RuntimeShape", align 8
  %14 = alloca %"class.tflite::RuntimeShape", align 8
  %15 = alloca %"class.tflite::RuntimeShape", align 8
  %16 = alloca %"class.tflite::RuntimeShape", align 8
  %17 = alloca %"class.tflite::RuntimeShape", align 8
  %18 = alloca %"class.tflite::RuntimeShape", align 8
  %19 = alloca %"class.tflite::RuntimeShape", align 8
  %20 = alloca %"class.tflite::RuntimeShape", align 8
  %21 = alloca %"class.tflite::RuntimeShape", align 8
  %22 = alloca %"class.tflite::RuntimeShape", align 8
  %23 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %23) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %23, i8* align 4 getelementptr inbounds ({ i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, [5 x i32] }, { i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, [5 x i32] }* @__const._ZN6tflite3ops7builtin3add16EvalAddQuantizedILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSH_PSF_.op_params, i64 0, i32 0), i64 80, i1 false)
  %24 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %24) #12
  %25 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %25, label %26, label %28

26:                                               ; preds = %7
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %27, align 8, !alias.scope !226
  br label %53

28:                                               ; preds = %7
  %29 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %30 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %29, align 8, !noalias !226
  %31 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %30, i64 0, i32 0
  %32 = load i32, i32* %31, align 4, !noalias !226
  %33 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %30, i64 0, i32 1, i64 0
  %34 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %32, i32* %34, align 8, !alias.scope !226
  %35 = icmp sgt i32 %32, 5
  br i1 %35, label %36, label %43

36:                                               ; preds = %28
  %37 = sext i32 %32 to i64
  %38 = shl nsw i64 %37, 2
  %39 = tail call i8* @_Znam(i64 %38) #11, !noalias !226
  %40 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %41 = bitcast i32** %40 to i8**
  store i8* %39, i8** %41, align 8, !alias.scope !226
  %42 = bitcast i8* %39 to i32*
  br label %48

43:                                               ; preds = %28
  %44 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %45 = bitcast %union.anon* %44 to i32*
  %46 = sext i32 %32 to i64
  %47 = shl nsw i64 %46, 2
  br label %48

48:                                               ; preds = %43, %36
  %49 = phi i64 [ %38, %36 ], [ %47, %43 ]
  %50 = phi i32* [ %42, %36 ], [ %45, %43 ]
  %51 = bitcast i32* %50 to i8*
  %52 = bitcast i32* %33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %51, i8* align 4 %52, i64 %49, i1 false) #12
  br label %53

53:                                               ; preds = %26, %48
  %54 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %54) #12
  %55 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %55, label %56, label %58

56:                                               ; preds = %53
  %57 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %57, align 8, !alias.scope !229
  br label %83

58:                                               ; preds = %53
  %59 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %60 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %59, align 8, !noalias !229
  %61 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %60, i64 0, i32 0
  %62 = load i32, i32* %61, align 4, !noalias !229
  %63 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %60, i64 0, i32 1, i64 0
  %64 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %62, i32* %64, align 8, !alias.scope !229
  %65 = icmp sgt i32 %62, 5
  br i1 %65, label %66, label %73

66:                                               ; preds = %58
  %67 = sext i32 %62 to i64
  %68 = shl nsw i64 %67, 2
  %69 = tail call i8* @_Znam(i64 %68) #11, !noalias !229
  %70 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %71 = bitcast i32** %70 to i8**
  store i8* %69, i8** %71, align 8, !alias.scope !229
  %72 = bitcast i8* %69 to i32*
  br label %78

73:                                               ; preds = %58
  %74 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %75 = bitcast %union.anon* %74 to i32*
  %76 = sext i32 %62 to i64
  %77 = shl nsw i64 %76, 2
  br label %78

78:                                               ; preds = %73, %66
  %79 = phi i64 [ %68, %66 ], [ %77, %73 ]
  %80 = phi i32* [ %72, %66 ], [ %75, %73 ]
  %81 = bitcast i32* %80 to i8*
  %82 = bitcast i32* %63 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %81, i8* align 4 %82, i64 %79, i1 false) #12
  br label %83

83:                                               ; preds = %56, %78
  %84 = call zeroext i1 @_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE(%"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %9, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %10, %"struct.tflite::ArithmeticParams"* nonnull %8)
  %85 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  %86 = load i32, i32* %85, align 8
  %87 = icmp sgt i32 %86, 5
  br i1 %87, label %88, label %94

88:                                               ; preds = %83
  %89 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %90 = load i32*, i32** %89, align 8
  %91 = icmp eq i32* %90, null
  br i1 %91, label %94, label %92

92:                                               ; preds = %88
  %93 = bitcast i32* %90 to i8*
  call void @_ZdaPv(i8* %93) #11
  br label %94

94:                                               ; preds = %83, %88, %92
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %54) #12
  %95 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  %96 = load i32, i32* %95, align 8
  %97 = icmp sgt i32 %96, 5
  br i1 %97, label %98, label %104

98:                                               ; preds = %94
  %99 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %100 = load i32*, i32** %99, align 8
  %101 = icmp eq i32* %100, null
  br i1 %101, label %104, label %102

102:                                              ; preds = %98
  %103 = bitcast i32* %100 to i8*
  call void @_ZdaPv(i8* %103) #11
  br label %104

104:                                              ; preds = %94, %98, %102
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #12
  %105 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 0
  %106 = load i32, i32* %105, align 8
  switch i32 %106, label %1136 [
    i32 2, label %107
    i32 1, label %390
  ]

107:                                              ; preds = %104
  %108 = getelementptr inbounds %struct.TfLiteAddParams, %struct.TfLiteAddParams* %2, i64 0, i32 0
  %109 = load i32, i32* %108, align 4
  %110 = add i32 %109, -1
  %111 = icmp ult i32 %110, 3
  br i1 %84, label %112, label %251

112:                                              ; preds = %107
  br i1 %111, label %113, label %120

113:                                              ; preds = %112
  %114 = sext i32 %110 to i64
  %115 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.51, i64 0, i64 %114
  %116 = load i32, i32* %115, align 4
  %117 = sext i32 %110 to i64
  %118 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.52, i64 0, i64 %117
  %119 = load i32, i32* %118, align 4
  br label %120

120:                                              ; preds = %112, %113
  %121 = phi i32 [ %116, %113 ], [ -2147483648, %112 ]
  %122 = phi i32 [ %119, %113 ], [ 2147483647, %112 ]
  %123 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 11
  store i32 %121, i32* %123, align 4
  %124 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 12
  store i32 %122, i32* %124, align 4
  %125 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %125) #12
  br i1 %25, label %126, label %128

126:                                              ; preds = %120
  %127 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %127, align 8, !alias.scope !232
  br label %155

128:                                              ; preds = %120
  %129 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %130 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %129, align 8, !noalias !232
  %131 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %130, i64 0, i32 0
  %132 = load i32, i32* %131, align 4, !noalias !232
  %133 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %130, i64 0, i32 1, i64 0
  %134 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %132, i32* %134, align 8, !alias.scope !232
  %135 = icmp sgt i32 %132, 5
  br i1 %135, label %136, label %143

136:                                              ; preds = %128
  %137 = sext i32 %132 to i64
  %138 = shl nsw i64 %137, 2
  %139 = call i8* @_Znam(i64 %138) #11, !noalias !232
  %140 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %141 = bitcast i32** %140 to i8**
  store i8* %139, i8** %141, align 8, !alias.scope !232
  %142 = bitcast i8* %139 to i32*
  br label %148

143:                                              ; preds = %128
  %144 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %145 = bitcast %union.anon* %144 to i32*
  %146 = sext i32 %132 to i64
  %147 = shl nsw i64 %146, 2
  br label %148

148:                                              ; preds = %143, %136
  %149 = phi i64 [ %138, %136 ], [ %147, %143 ]
  %150 = phi i32* [ %142, %136 ], [ %145, %143 ]
  %151 = bitcast i32* %150 to i8*
  %152 = bitcast i32* %133 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %151, i8* align 4 %152, i64 %149, i1 false) #12
  %153 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1, i32 0
  %154 = load i32*, i32** %153, align 8
  br label %155

155:                                              ; preds = %126, %148
  %156 = phi i32* [ %154, %148 ], [ null, %126 ]
  %157 = bitcast %"class.tflite::RuntimeShape"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %157) #12
  br i1 %55, label %158, label %160

158:                                              ; preds = %155
  %159 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 0, i32* %159, align 8, !alias.scope !235
  br label %187

160:                                              ; preds = %155
  %161 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %162 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %161, align 8, !noalias !235
  %163 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %162, i64 0, i32 0
  %164 = load i32, i32* %163, align 4, !noalias !235
  %165 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %162, i64 0, i32 1, i64 0
  %166 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 %164, i32* %166, align 8, !alias.scope !235
  %167 = icmp sgt i32 %164, 5
  br i1 %167, label %168, label %175

168:                                              ; preds = %160
  %169 = sext i32 %164 to i64
  %170 = shl nsw i64 %169, 2
  %171 = call i8* @_Znam(i64 %170) #11, !noalias !235
  %172 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %173 = bitcast i32** %172 to i8**
  store i8* %171, i8** %173, align 8, !alias.scope !235
  %174 = bitcast i8* %171 to i32*
  br label %180

175:                                              ; preds = %160
  %176 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1
  %177 = bitcast %union.anon* %176 to i32*
  %178 = sext i32 %164 to i64
  %179 = shl nsw i64 %178, 2
  br label %180

180:                                              ; preds = %175, %168
  %181 = phi i64 [ %170, %168 ], [ %179, %175 ]
  %182 = phi i32* [ %174, %168 ], [ %177, %175 ]
  %183 = bitcast i32* %182 to i8*
  %184 = bitcast i32* %165 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %183, i8* align 4 %184, i64 %181, i1 false) #12
  %185 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1, i32 0
  %186 = load i32*, i32** %185, align 8
  br label %187

187:                                              ; preds = %158, %180
  %188 = phi i32* [ %186, %180 ], [ null, %158 ]
  %189 = bitcast %"class.tflite::RuntimeShape"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %189) #12
  %190 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %190, label %191, label %193

191:                                              ; preds = %187
  %192 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 0, i32* %192, align 8, !alias.scope !238
  br label %220

193:                                              ; preds = %187
  %194 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %195 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %194, align 8, !noalias !238
  %196 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %195, i64 0, i32 0
  %197 = load i32, i32* %196, align 4, !noalias !238
  %198 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %195, i64 0, i32 1, i64 0
  %199 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 %197, i32* %199, align 8, !alias.scope !238
  %200 = icmp sgt i32 %197, 5
  br i1 %200, label %201, label %208

201:                                              ; preds = %193
  %202 = sext i32 %197 to i64
  %203 = shl nsw i64 %202, 2
  %204 = call i8* @_Znam(i64 %203) #11, !noalias !238
  %205 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %206 = bitcast i32** %205 to i8**
  store i8* %204, i8** %206, align 8, !alias.scope !238
  %207 = bitcast i8* %204 to i32*
  br label %213

208:                                              ; preds = %193
  %209 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1
  %210 = bitcast %union.anon* %209 to i32*
  %211 = sext i32 %197 to i64
  %212 = shl nsw i64 %211, 2
  br label %213

213:                                              ; preds = %208, %201
  %214 = phi i64 [ %203, %201 ], [ %212, %208 ]
  %215 = phi i32* [ %207, %201 ], [ %210, %208 ]
  %216 = bitcast i32* %215 to i8*
  %217 = bitcast i32* %198 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %216, i8* align 4 %217, i64 %214, i1 false) #12
  %218 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1, i32 0
  %219 = load i32*, i32** %218, align 8
  br label %220

220:                                              ; preds = %191, %213
  %221 = phi i32* [ %219, %213 ], [ null, %191 ]
  call void @_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKiS6_S8_S6_Pi(%"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %8, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, i32* %156, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %12, i32* %188, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %13, i32* %221)
  %222 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  %223 = load i32, i32* %222, align 8
  %224 = icmp sgt i32 %223, 5
  br i1 %224, label %225, label %231

225:                                              ; preds = %220
  %226 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %227 = load i32*, i32** %226, align 8
  %228 = icmp eq i32* %227, null
  br i1 %228, label %231, label %229

229:                                              ; preds = %225
  %230 = bitcast i32* %227 to i8*
  call void @_ZdaPv(i8* %230) #11
  br label %231

231:                                              ; preds = %220, %225, %229
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %189) #12
  %232 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  %233 = load i32, i32* %232, align 8
  %234 = icmp sgt i32 %233, 5
  br i1 %234, label %235, label %241

235:                                              ; preds = %231
  %236 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %237 = load i32*, i32** %236, align 8
  %238 = icmp eq i32* %237, null
  br i1 %238, label %241, label %239

239:                                              ; preds = %235
  %240 = bitcast i32* %237 to i8*
  call void @_ZdaPv(i8* %240) #11
  br label %241

241:                                              ; preds = %231, %235, %239
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %157) #12
  %242 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %243 = load i32, i32* %242, align 8
  %244 = icmp sgt i32 %243, 5
  br i1 %244, label %245, label %1134

245:                                              ; preds = %241
  %246 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %247 = load i32*, i32** %246, align 8
  %248 = icmp eq i32* %247, null
  br i1 %248, label %1134, label %249

249:                                              ; preds = %245
  %250 = bitcast i32* %247 to i8*
  call void @_ZdaPv(i8* %250) #11
  br label %1134

251:                                              ; preds = %107
  br i1 %111, label %252, label %259

252:                                              ; preds = %251
  %253 = sext i32 %110 to i64
  %254 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.51, i64 0, i64 %253
  %255 = load i32, i32* %254, align 4
  %256 = sext i32 %110 to i64
  %257 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.52, i64 0, i64 %256
  %258 = load i32, i32* %257, align 4
  br label %259

259:                                              ; preds = %251, %252
  %260 = phi i32 [ %255, %252 ], [ -2147483648, %251 ]
  %261 = phi i32 [ %258, %252 ], [ 2147483647, %251 ]
  %262 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 11
  store i32 %260, i32* %262, align 4
  %263 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 12
  store i32 %261, i32* %263, align 4
  %264 = bitcast %"class.tflite::RuntimeShape"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %264) #12
  br i1 %25, label %265, label %267

265:                                              ; preds = %259
  %266 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 0, i32* %266, align 8, !alias.scope !241
  br label %294

267:                                              ; preds = %259
  %268 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %269 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %268, align 8, !noalias !241
  %270 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 0
  %271 = load i32, i32* %270, align 4, !noalias !241
  %272 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 1, i64 0
  %273 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 %271, i32* %273, align 8, !alias.scope !241
  %274 = icmp sgt i32 %271, 5
  br i1 %274, label %275, label %282

275:                                              ; preds = %267
  %276 = sext i32 %271 to i64
  %277 = shl nsw i64 %276, 2
  %278 = call i8* @_Znam(i64 %277) #11, !noalias !241
  %279 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %280 = bitcast i32** %279 to i8**
  store i8* %278, i8** %280, align 8, !alias.scope !241
  %281 = bitcast i8* %278 to i32*
  br label %287

282:                                              ; preds = %267
  %283 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1
  %284 = bitcast %union.anon* %283 to i32*
  %285 = sext i32 %271 to i64
  %286 = shl nsw i64 %285, 2
  br label %287

287:                                              ; preds = %282, %275
  %288 = phi i64 [ %277, %275 ], [ %286, %282 ]
  %289 = phi i32* [ %281, %275 ], [ %284, %282 ]
  %290 = bitcast i32* %289 to i8*
  %291 = bitcast i32* %272 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %290, i8* align 4 %291, i64 %288, i1 false) #12
  %292 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1, i32 0
  %293 = load i32*, i32** %292, align 8
  br label %294

294:                                              ; preds = %265, %287
  %295 = phi i32* [ %293, %287 ], [ null, %265 ]
  %296 = bitcast %"class.tflite::RuntimeShape"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %296) #12
  br i1 %55, label %297, label %299

297:                                              ; preds = %294
  %298 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  store i32 0, i32* %298, align 8, !alias.scope !244
  br label %326

299:                                              ; preds = %294
  %300 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %301 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %300, align 8, !noalias !244
  %302 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %301, i64 0, i32 0
  %303 = load i32, i32* %302, align 4, !noalias !244
  %304 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %301, i64 0, i32 1, i64 0
  %305 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  store i32 %303, i32* %305, align 8, !alias.scope !244
  %306 = icmp sgt i32 %303, 5
  br i1 %306, label %307, label %314

307:                                              ; preds = %299
  %308 = sext i32 %303 to i64
  %309 = shl nsw i64 %308, 2
  %310 = call i8* @_Znam(i64 %309) #11, !noalias !244
  %311 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1, i32 0
  %312 = bitcast i32** %311 to i8**
  store i8* %310, i8** %312, align 8, !alias.scope !244
  %313 = bitcast i8* %310 to i32*
  br label %319

314:                                              ; preds = %299
  %315 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1
  %316 = bitcast %union.anon* %315 to i32*
  %317 = sext i32 %303 to i64
  %318 = shl nsw i64 %317, 2
  br label %319

319:                                              ; preds = %314, %307
  %320 = phi i64 [ %309, %307 ], [ %318, %314 ]
  %321 = phi i32* [ %313, %307 ], [ %316, %314 ]
  %322 = bitcast i32* %321 to i8*
  %323 = bitcast i32* %304 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %322, i8* align 4 %323, i64 %320, i1 false) #12
  %324 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1, i32 0
  %325 = load i32*, i32** %324, align 8
  br label %326

326:                                              ; preds = %297, %319
  %327 = phi i32* [ %325, %319 ], [ null, %297 ]
  %328 = bitcast %"class.tflite::RuntimeShape"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %328) #12
  %329 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %329, label %330, label %332

330:                                              ; preds = %326
  %331 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 0
  store i32 0, i32* %331, align 8, !alias.scope !247
  br label %359

332:                                              ; preds = %326
  %333 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %334 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %333, align 8, !noalias !247
  %335 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %334, i64 0, i32 0
  %336 = load i32, i32* %335, align 4, !noalias !247
  %337 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %334, i64 0, i32 1, i64 0
  %338 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 0
  store i32 %336, i32* %338, align 8, !alias.scope !247
  %339 = icmp sgt i32 %336, 5
  br i1 %339, label %340, label %347

340:                                              ; preds = %332
  %341 = sext i32 %336 to i64
  %342 = shl nsw i64 %341, 2
  %343 = call i8* @_Znam(i64 %342) #11, !noalias !247
  %344 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1, i32 0
  %345 = bitcast i32** %344 to i8**
  store i8* %343, i8** %345, align 8, !alias.scope !247
  %346 = bitcast i8* %343 to i32*
  br label %352

347:                                              ; preds = %332
  %348 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1
  %349 = bitcast %union.anon* %348 to i32*
  %350 = sext i32 %336 to i64
  %351 = shl nsw i64 %350, 2
  br label %352

352:                                              ; preds = %347, %340
  %353 = phi i64 [ %342, %340 ], [ %351, %347 ]
  %354 = phi i32* [ %346, %340 ], [ %349, %347 ]
  %355 = bitcast i32* %354 to i8*
  %356 = bitcast i32* %337 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %355, i8* align 4 %356, i64 %353, i1 false) #12
  %357 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1, i32 0
  %358 = load i32*, i32** %357, align 8
  br label %359

359:                                              ; preds = %330, %352
  %360 = phi i32* [ %358, %352 ], [ null, %330 ]
  call void @_ZN6tflite13optimized_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKiS6_S8_S6_Pi(%"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %8, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %14, i32* %295, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %15, i32* %327, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %16, i32* %360)
  %361 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 0
  %362 = load i32, i32* %361, align 8
  %363 = icmp sgt i32 %362, 5
  br i1 %363, label %364, label %370

364:                                              ; preds = %359
  %365 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1, i32 0
  %366 = load i32*, i32** %365, align 8
  %367 = icmp eq i32* %366, null
  br i1 %367, label %370, label %368

368:                                              ; preds = %364
  %369 = bitcast i32* %366 to i8*
  call void @_ZdaPv(i8* %369) #11
  br label %370

370:                                              ; preds = %359, %364, %368
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %328) #12
  %371 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  %372 = load i32, i32* %371, align 8
  %373 = icmp sgt i32 %372, 5
  br i1 %373, label %374, label %380

374:                                              ; preds = %370
  %375 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1, i32 0
  %376 = load i32*, i32** %375, align 8
  %377 = icmp eq i32* %376, null
  br i1 %377, label %380, label %378

378:                                              ; preds = %374
  %379 = bitcast i32* %376 to i8*
  call void @_ZdaPv(i8* %379) #11
  br label %380

380:                                              ; preds = %370, %374, %378
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %296) #12
  %381 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  %382 = load i32, i32* %381, align 8
  %383 = icmp sgt i32 %382, 5
  br i1 %383, label %384, label %1134

384:                                              ; preds = %380
  %385 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %386 = load i32*, i32** %385, align 8
  %387 = icmp eq i32* %386, null
  br i1 %387, label %1134, label %388

388:                                              ; preds = %384
  %389 = bitcast i32* %386 to i8*
  call void @_ZdaPv(i8* %389) #11
  br label %1134

390:                                              ; preds = %104
  %391 = getelementptr inbounds %struct.TfLiteAddParams, %struct.TfLiteAddParams* %2, i64 0, i32 0
  %392 = load i32, i32* %391, align 4
  %393 = add i32 %392, -1
  %394 = icmp ult i32 %393, 3
  br i1 %84, label %395, label %537

395:                                              ; preds = %390
  br i1 %394, label %396, label %403

396:                                              ; preds = %395
  %397 = sext i32 %393 to i64
  %398 = getelementptr inbounds [3 x float], [3 x float]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.55, i64 0, i64 %397
  %399 = load float, float* %398, align 4
  %400 = sext i32 %393 to i64
  %401 = getelementptr inbounds [3 x float], [3 x float]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.56, i64 0, i64 %400
  %402 = load float, float* %401, align 4
  br label %403

403:                                              ; preds = %395, %396
  %404 = phi float [ %399, %396 ], [ 0xC7EFFFFFE0000000, %395 ]
  %405 = phi float [ %402, %396 ], [ 0x47EFFFFFE0000000, %395 ]
  %406 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 13
  store float %404, float* %406, align 4
  %407 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 14
  store float %405, float* %407, align 4
  %408 = bitcast %"class.tflite::RuntimeShape"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %408) #12
  br i1 %25, label %409, label %411

409:                                              ; preds = %403
  %410 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 0
  store i32 0, i32* %410, align 8, !alias.scope !250
  br label %439

411:                                              ; preds = %403
  %412 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %413 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %412, align 8, !noalias !250
  %414 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %413, i64 0, i32 0
  %415 = load i32, i32* %414, align 4, !noalias !250
  %416 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %413, i64 0, i32 1, i64 0
  %417 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 0
  store i32 %415, i32* %417, align 8, !alias.scope !250
  %418 = icmp sgt i32 %415, 5
  br i1 %418, label %419, label %426

419:                                              ; preds = %411
  %420 = sext i32 %415 to i64
  %421 = shl nsw i64 %420, 2
  %422 = call i8* @_Znam(i64 %421) #11, !noalias !250
  %423 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1, i32 0
  %424 = bitcast i32** %423 to i8**
  store i8* %422, i8** %424, align 8, !alias.scope !250
  %425 = bitcast i8* %422 to i32*
  br label %431

426:                                              ; preds = %411
  %427 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1
  %428 = bitcast %union.anon* %427 to i32*
  %429 = sext i32 %415 to i64
  %430 = shl nsw i64 %429, 2
  br label %431

431:                                              ; preds = %426, %419
  %432 = phi i64 [ %421, %419 ], [ %430, %426 ]
  %433 = phi i32* [ %425, %419 ], [ %428, %426 ]
  %434 = bitcast i32* %433 to i8*
  %435 = bitcast i32* %416 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %434, i8* align 4 %435, i64 %432, i1 false) #12
  %436 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %437 = bitcast %union.TfLitePtrUnion* %436 to float**
  %438 = load float*, float** %437, align 8
  br label %439

439:                                              ; preds = %409, %431
  %440 = phi float* [ %438, %431 ], [ null, %409 ]
  %441 = bitcast %"class.tflite::RuntimeShape"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %441) #12
  br i1 %55, label %442, label %444

442:                                              ; preds = %439
  %443 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 0
  store i32 0, i32* %443, align 8, !alias.scope !253
  br label %472

444:                                              ; preds = %439
  %445 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %446 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %445, align 8, !noalias !253
  %447 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %446, i64 0, i32 0
  %448 = load i32, i32* %447, align 4, !noalias !253
  %449 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %446, i64 0, i32 1, i64 0
  %450 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 0
  store i32 %448, i32* %450, align 8, !alias.scope !253
  %451 = icmp sgt i32 %448, 5
  br i1 %451, label %452, label %459

452:                                              ; preds = %444
  %453 = sext i32 %448 to i64
  %454 = shl nsw i64 %453, 2
  %455 = call i8* @_Znam(i64 %454) #11, !noalias !253
  %456 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1, i32 0
  %457 = bitcast i32** %456 to i8**
  store i8* %455, i8** %457, align 8, !alias.scope !253
  %458 = bitcast i8* %455 to i32*
  br label %464

459:                                              ; preds = %444
  %460 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1
  %461 = bitcast %union.anon* %460 to i32*
  %462 = sext i32 %448 to i64
  %463 = shl nsw i64 %462, 2
  br label %464

464:                                              ; preds = %459, %452
  %465 = phi i64 [ %454, %452 ], [ %463, %459 ]
  %466 = phi i32* [ %458, %452 ], [ %461, %459 ]
  %467 = bitcast i32* %466 to i8*
  %468 = bitcast i32* %449 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %467, i8* align 4 %468, i64 %465, i1 false) #12
  %469 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %470 = bitcast %union.TfLitePtrUnion* %469 to float**
  %471 = load float*, float** %470, align 8
  br label %472

472:                                              ; preds = %442, %464
  %473 = phi float* [ %471, %464 ], [ null, %442 ]
  %474 = bitcast %"class.tflite::RuntimeShape"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %474) #12
  %475 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %475, label %476, label %478

476:                                              ; preds = %472
  %477 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 0
  store i32 0, i32* %477, align 8, !alias.scope !256
  br label %506

478:                                              ; preds = %472
  %479 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %480 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %479, align 8, !noalias !256
  %481 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %480, i64 0, i32 0
  %482 = load i32, i32* %481, align 4, !noalias !256
  %483 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %480, i64 0, i32 1, i64 0
  %484 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 0
  store i32 %482, i32* %484, align 8, !alias.scope !256
  %485 = icmp sgt i32 %482, 5
  br i1 %485, label %486, label %493

486:                                              ; preds = %478
  %487 = sext i32 %482 to i64
  %488 = shl nsw i64 %487, 2
  %489 = call i8* @_Znam(i64 %488) #11, !noalias !256
  %490 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 1, i32 0
  %491 = bitcast i32** %490 to i8**
  store i8* %489, i8** %491, align 8, !alias.scope !256
  %492 = bitcast i8* %489 to i32*
  br label %498

493:                                              ; preds = %478
  %494 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 1
  %495 = bitcast %union.anon* %494 to i32*
  %496 = sext i32 %482 to i64
  %497 = shl nsw i64 %496, 2
  br label %498

498:                                              ; preds = %493, %486
  %499 = phi i64 [ %488, %486 ], [ %497, %493 ]
  %500 = phi i32* [ %492, %486 ], [ %495, %493 ]
  %501 = bitcast i32* %500 to i8*
  %502 = bitcast i32* %483 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %501, i8* align 4 %502, i64 %499, i1 false) #12
  %503 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %504 = bitcast %union.TfLitePtrUnion* %503 to float**
  %505 = load float*, float** %504, align 8
  br label %506

506:                                              ; preds = %476, %498
  %507 = phi float* [ %505, %498 ], [ null, %476 ]
  call void @_ZN6tflite13optimized_ops20BroadcastAddDispatchIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_(%"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %8, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %17, float* %440, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %18, float* %473, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %19, float* %507)
  %508 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 0
  %509 = load i32, i32* %508, align 8
  %510 = icmp sgt i32 %509, 5
  br i1 %510, label %511, label %517

511:                                              ; preds = %506
  %512 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 1, i32 0
  %513 = load i32*, i32** %512, align 8
  %514 = icmp eq i32* %513, null
  br i1 %514, label %517, label %515

515:                                              ; preds = %511
  %516 = bitcast i32* %513 to i8*
  call void @_ZdaPv(i8* %516) #11
  br label %517

517:                                              ; preds = %506, %511, %515
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %474) #12
  %518 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 0
  %519 = load i32, i32* %518, align 8
  %520 = icmp sgt i32 %519, 5
  br i1 %520, label %521, label %527

521:                                              ; preds = %517
  %522 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1, i32 0
  %523 = load i32*, i32** %522, align 8
  %524 = icmp eq i32* %523, null
  br i1 %524, label %527, label %525

525:                                              ; preds = %521
  %526 = bitcast i32* %523 to i8*
  call void @_ZdaPv(i8* %526) #11
  br label %527

527:                                              ; preds = %517, %521, %525
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %441) #12
  %528 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 0
  %529 = load i32, i32* %528, align 8
  %530 = icmp sgt i32 %529, 5
  br i1 %530, label %531, label %1134

531:                                              ; preds = %527
  %532 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1, i32 0
  %533 = load i32*, i32** %532, align 8
  %534 = icmp eq i32* %533, null
  br i1 %534, label %1134, label %535

535:                                              ; preds = %531
  %536 = bitcast i32* %533 to i8*
  call void @_ZdaPv(i8* %536) #11
  br label %1134

537:                                              ; preds = %390
  br i1 %394, label %538, label %545

538:                                              ; preds = %537
  %539 = sext i32 %393 to i64
  %540 = getelementptr inbounds [3 x float], [3 x float]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.55, i64 0, i64 %539
  %541 = load float, float* %540, align 4
  %542 = sext i32 %393 to i64
  %543 = getelementptr inbounds [3 x float], [3 x float]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.56, i64 0, i64 %542
  %544 = load float, float* %543, align 4
  br label %545

545:                                              ; preds = %537, %538
  %546 = phi float [ %541, %538 ], [ 0xC7EFFFFFE0000000, %537 ]
  %547 = phi float [ %544, %538 ], [ 0x47EFFFFFE0000000, %537 ]
  %548 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 13
  store float %546, float* %548, align 4
  %549 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 14
  store float %547, float* %549, align 4
  %550 = bitcast %"class.tflite::RuntimeShape"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %550) #12
  br i1 %25, label %551, label %553

551:                                              ; preds = %545
  %552 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 0
  store i32 0, i32* %552, align 8, !alias.scope !259
  br label %581

553:                                              ; preds = %545
  %554 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %555 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %554, align 8, !noalias !259
  %556 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %555, i64 0, i32 0
  %557 = load i32, i32* %556, align 4, !noalias !259
  %558 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %555, i64 0, i32 1, i64 0
  %559 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 0
  store i32 %557, i32* %559, align 8, !alias.scope !259
  %560 = icmp sgt i32 %557, 5
  br i1 %560, label %561, label %568

561:                                              ; preds = %553
  %562 = sext i32 %557 to i64
  %563 = shl nsw i64 %562, 2
  %564 = call i8* @_Znam(i64 %563) #11, !noalias !259
  %565 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1, i32 0
  %566 = bitcast i32** %565 to i8**
  store i8* %564, i8** %566, align 8, !alias.scope !259
  %567 = bitcast i8* %564 to i32*
  br label %573

568:                                              ; preds = %553
  %569 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1
  %570 = bitcast %union.anon* %569 to i32*
  %571 = sext i32 %557 to i64
  %572 = shl nsw i64 %571, 2
  br label %573

573:                                              ; preds = %568, %561
  %574 = phi i64 [ %563, %561 ], [ %572, %568 ]
  %575 = phi i32* [ %567, %561 ], [ %570, %568 ]
  %576 = bitcast i32* %575 to i8*
  %577 = bitcast i32* %558 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %576, i8* align 4 %577, i64 %574, i1 false) #12
  %578 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %579 = bitcast %union.TfLitePtrUnion* %578 to float**
  %580 = load float*, float** %579, align 8
  br label %581

581:                                              ; preds = %551, %573
  %582 = phi i32 [ %557, %573 ], [ 0, %551 ]
  %583 = phi float* [ %580, %573 ], [ null, %551 ]
  %584 = bitcast %"class.tflite::RuntimeShape"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %584) #12
  br i1 %55, label %585, label %587

585:                                              ; preds = %581
  %586 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 0
  store i32 0, i32* %586, align 8, !alias.scope !262
  br label %615

587:                                              ; preds = %581
  %588 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %589 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %588, align 8, !noalias !262
  %590 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %589, i64 0, i32 0
  %591 = load i32, i32* %590, align 4, !noalias !262
  %592 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %589, i64 0, i32 1, i64 0
  %593 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 0
  store i32 %591, i32* %593, align 8, !alias.scope !262
  %594 = icmp sgt i32 %591, 5
  br i1 %594, label %595, label %602

595:                                              ; preds = %587
  %596 = sext i32 %591 to i64
  %597 = shl nsw i64 %596, 2
  %598 = call i8* @_Znam(i64 %597) #11, !noalias !262
  %599 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1, i32 0
  %600 = bitcast i32** %599 to i8**
  store i8* %598, i8** %600, align 8, !alias.scope !262
  %601 = bitcast i8* %598 to i32*
  br label %607

602:                                              ; preds = %587
  %603 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1
  %604 = bitcast %union.anon* %603 to i32*
  %605 = sext i32 %591 to i64
  %606 = shl nsw i64 %605, 2
  br label %607

607:                                              ; preds = %602, %595
  %608 = phi i64 [ %597, %595 ], [ %606, %602 ]
  %609 = phi i32* [ %601, %595 ], [ %604, %602 ]
  %610 = bitcast i32* %609 to i8*
  %611 = bitcast i32* %592 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %610, i8* align 4 %611, i64 %608, i1 false) #12
  %612 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %613 = bitcast %union.TfLitePtrUnion* %612 to float**
  %614 = load float*, float** %613, align 8
  br label %615

615:                                              ; preds = %585, %607
  %616 = phi i32 [ %591, %607 ], [ 0, %585 ]
  %617 = phi float* [ %614, %607 ], [ null, %585 ]
  %618 = bitcast %"class.tflite::RuntimeShape"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %618) #12
  %619 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %619, label %620, label %622

620:                                              ; preds = %615
  %621 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 0
  store i32 0, i32* %621, align 8, !alias.scope !265
  br label %650

622:                                              ; preds = %615
  %623 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %624 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %623, align 8, !noalias !265
  %625 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %624, i64 0, i32 0
  %626 = load i32, i32* %625, align 4, !noalias !265
  %627 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %624, i64 0, i32 1, i64 0
  %628 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 0
  store i32 %626, i32* %628, align 8, !alias.scope !265
  %629 = icmp sgt i32 %626, 5
  br i1 %629, label %630, label %637

630:                                              ; preds = %622
  %631 = sext i32 %626 to i64
  %632 = shl nsw i64 %631, 2
  %633 = call i8* @_Znam(i64 %632) #11, !noalias !265
  %634 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1, i32 0
  %635 = bitcast i32** %634 to i8**
  store i8* %633, i8** %635, align 8, !alias.scope !265
  %636 = bitcast i8* %633 to i32*
  br label %642

637:                                              ; preds = %622
  %638 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1
  %639 = bitcast %union.anon* %638 to i32*
  %640 = sext i32 %626 to i64
  %641 = shl nsw i64 %640, 2
  br label %642

642:                                              ; preds = %637, %630
  %643 = phi i64 [ %632, %630 ], [ %641, %637 ]
  %644 = phi i32* [ %636, %630 ], [ %639, %637 ]
  %645 = bitcast i32* %644 to i8*
  %646 = bitcast i32* %627 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %645, i8* align 4 %646, i64 %643, i1 false) #12
  %647 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %648 = bitcast %union.TfLitePtrUnion* %647 to float**
  %649 = load float*, float** %648, align 8
  br label %650

650:                                              ; preds = %620, %642
  %651 = phi i32 [ %626, %642 ], [ 0, %620 ]
  %652 = phi float* [ %649, %642 ], [ null, %620 ]
  %653 = icmp sgt i32 %582, 5
  %654 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1
  br i1 %653, label %655, label %658

655:                                              ; preds = %650
  %656 = getelementptr inbounds %union.anon, %union.anon* %654, i64 0, i32 0
  %657 = load i32*, i32** %656, align 8
  br label %661

658:                                              ; preds = %650
  %659 = bitcast %union.anon* %654 to i32*
  %660 = icmp sgt i32 %582, 0
  br i1 %660, label %661, label %761

661:                                              ; preds = %658, %655
  %662 = phi i32* [ %657, %655 ], [ %659, %658 ]
  %663 = zext i32 %582 to i64
  %664 = icmp ult i32 %582, 8
  br i1 %664, label %750, label %665

665:                                              ; preds = %661
  %666 = and i64 %663, 4294967288
  %667 = add nsw i64 %666, -8
  %668 = lshr exact i64 %667, 3
  %669 = add nuw nsw i64 %668, 1
  %670 = and i64 %669, 3
  %671 = icmp ult i64 %667, 24
  br i1 %671, label %717, label %672

672:                                              ; preds = %665
  %673 = sub nsw i64 %669, %670
  br label %674

674:                                              ; preds = %674, %672
  %675 = phi i64 [ 0, %672 ], [ %714, %674 ]
  %676 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %672 ], [ %712, %674 ]
  %677 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %672 ], [ %713, %674 ]
  %678 = phi i64 [ %673, %672 ], [ %715, %674 ]
  %679 = getelementptr inbounds i32, i32* %662, i64 %675
  %680 = bitcast i32* %679 to <4 x i32>*
  %681 = load <4 x i32>, <4 x i32>* %680, align 4
  %682 = getelementptr inbounds i32, i32* %679, i64 4
  %683 = bitcast i32* %682 to <4 x i32>*
  %684 = load <4 x i32>, <4 x i32>* %683, align 4
  %685 = mul nsw <4 x i32> %681, %676
  %686 = mul nsw <4 x i32> %684, %677
  %687 = or i64 %675, 8
  %688 = getelementptr inbounds i32, i32* %662, i64 %687
  %689 = bitcast i32* %688 to <4 x i32>*
  %690 = load <4 x i32>, <4 x i32>* %689, align 4
  %691 = getelementptr inbounds i32, i32* %688, i64 4
  %692 = bitcast i32* %691 to <4 x i32>*
  %693 = load <4 x i32>, <4 x i32>* %692, align 4
  %694 = mul nsw <4 x i32> %690, %685
  %695 = mul nsw <4 x i32> %693, %686
  %696 = or i64 %675, 16
  %697 = getelementptr inbounds i32, i32* %662, i64 %696
  %698 = bitcast i32* %697 to <4 x i32>*
  %699 = load <4 x i32>, <4 x i32>* %698, align 4
  %700 = getelementptr inbounds i32, i32* %697, i64 4
  %701 = bitcast i32* %700 to <4 x i32>*
  %702 = load <4 x i32>, <4 x i32>* %701, align 4
  %703 = mul nsw <4 x i32> %699, %694
  %704 = mul nsw <4 x i32> %702, %695
  %705 = or i64 %675, 24
  %706 = getelementptr inbounds i32, i32* %662, i64 %705
  %707 = bitcast i32* %706 to <4 x i32>*
  %708 = load <4 x i32>, <4 x i32>* %707, align 4
  %709 = getelementptr inbounds i32, i32* %706, i64 4
  %710 = bitcast i32* %709 to <4 x i32>*
  %711 = load <4 x i32>, <4 x i32>* %710, align 4
  %712 = mul nsw <4 x i32> %708, %703
  %713 = mul nsw <4 x i32> %711, %704
  %714 = add i64 %675, 32
  %715 = add i64 %678, -4
  %716 = icmp eq i64 %715, 0
  br i1 %716, label %717, label %674, !llvm.loop !268

717:                                              ; preds = %674, %665
  %718 = phi <4 x i32> [ undef, %665 ], [ %712, %674 ]
  %719 = phi <4 x i32> [ undef, %665 ], [ %713, %674 ]
  %720 = phi i64 [ 0, %665 ], [ %714, %674 ]
  %721 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %665 ], [ %712, %674 ]
  %722 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %665 ], [ %713, %674 ]
  %723 = icmp eq i64 %670, 0
  br i1 %723, label %740, label %724

724:                                              ; preds = %717, %724
  %725 = phi i64 [ %737, %724 ], [ %720, %717 ]
  %726 = phi <4 x i32> [ %735, %724 ], [ %721, %717 ]
  %727 = phi <4 x i32> [ %736, %724 ], [ %722, %717 ]
  %728 = phi i64 [ %738, %724 ], [ %670, %717 ]
  %729 = getelementptr inbounds i32, i32* %662, i64 %725
  %730 = bitcast i32* %729 to <4 x i32>*
  %731 = load <4 x i32>, <4 x i32>* %730, align 4
  %732 = getelementptr inbounds i32, i32* %729, i64 4
  %733 = bitcast i32* %732 to <4 x i32>*
  %734 = load <4 x i32>, <4 x i32>* %733, align 4
  %735 = mul nsw <4 x i32> %731, %726
  %736 = mul nsw <4 x i32> %734, %727
  %737 = add i64 %725, 8
  %738 = add i64 %728, -1
  %739 = icmp eq i64 %738, 0
  br i1 %739, label %740, label %724, !llvm.loop !269

740:                                              ; preds = %724, %717
  %741 = phi <4 x i32> [ %718, %717 ], [ %735, %724 ]
  %742 = phi <4 x i32> [ %719, %717 ], [ %736, %724 ]
  %743 = mul <4 x i32> %742, %741
  %744 = shufflevector <4 x i32> %743, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %745 = mul <4 x i32> %743, %744
  %746 = shufflevector <4 x i32> %745, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %747 = mul <4 x i32> %745, %746
  %748 = extractelement <4 x i32> %747, i32 0
  %749 = icmp eq i64 %666, %663
  br i1 %749, label %761, label %750

750:                                              ; preds = %740, %661
  %751 = phi i64 [ 0, %661 ], [ %666, %740 ]
  %752 = phi i32 [ 1, %661 ], [ %748, %740 ]
  br label %753

753:                                              ; preds = %750, %753
  %754 = phi i64 [ %759, %753 ], [ %751, %750 ]
  %755 = phi i32 [ %758, %753 ], [ %752, %750 ]
  %756 = getelementptr inbounds i32, i32* %662, i64 %754
  %757 = load i32, i32* %756, align 4
  %758 = mul nsw i32 %757, %755
  %759 = add nuw nsw i64 %754, 1
  %760 = icmp eq i64 %759, %663
  br i1 %760, label %761, label %753, !llvm.loop !270

761:                                              ; preds = %753, %740, %658
  %762 = phi i32 [ 1, %658 ], [ %748, %740 ], [ %758, %753 ]
  %763 = icmp sgt i32 %616, 5
  %764 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1
  br i1 %763, label %765, label %768

765:                                              ; preds = %761
  %766 = getelementptr inbounds %union.anon, %union.anon* %764, i64 0, i32 0
  %767 = load i32*, i32** %766, align 8
  br label %771

768:                                              ; preds = %761
  %769 = bitcast %union.anon* %764 to i32*
  %770 = icmp sgt i32 %616, 0
  br i1 %770, label %771, label %871

771:                                              ; preds = %768, %765
  %772 = phi i32* [ %767, %765 ], [ %769, %768 ]
  %773 = zext i32 %616 to i64
  %774 = icmp ult i32 %616, 8
  br i1 %774, label %860, label %775

775:                                              ; preds = %771
  %776 = and i64 %773, 4294967288
  %777 = add nsw i64 %776, -8
  %778 = lshr exact i64 %777, 3
  %779 = add nuw nsw i64 %778, 1
  %780 = and i64 %779, 3
  %781 = icmp ult i64 %777, 24
  br i1 %781, label %827, label %782

782:                                              ; preds = %775
  %783 = sub nsw i64 %779, %780
  br label %784

784:                                              ; preds = %784, %782
  %785 = phi i64 [ 0, %782 ], [ %824, %784 ]
  %786 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %782 ], [ %822, %784 ]
  %787 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %782 ], [ %823, %784 ]
  %788 = phi i64 [ %783, %782 ], [ %825, %784 ]
  %789 = getelementptr inbounds i32, i32* %772, i64 %785
  %790 = bitcast i32* %789 to <4 x i32>*
  %791 = load <4 x i32>, <4 x i32>* %790, align 4
  %792 = getelementptr inbounds i32, i32* %789, i64 4
  %793 = bitcast i32* %792 to <4 x i32>*
  %794 = load <4 x i32>, <4 x i32>* %793, align 4
  %795 = mul nsw <4 x i32> %791, %786
  %796 = mul nsw <4 x i32> %794, %787
  %797 = or i64 %785, 8
  %798 = getelementptr inbounds i32, i32* %772, i64 %797
  %799 = bitcast i32* %798 to <4 x i32>*
  %800 = load <4 x i32>, <4 x i32>* %799, align 4
  %801 = getelementptr inbounds i32, i32* %798, i64 4
  %802 = bitcast i32* %801 to <4 x i32>*
  %803 = load <4 x i32>, <4 x i32>* %802, align 4
  %804 = mul nsw <4 x i32> %800, %795
  %805 = mul nsw <4 x i32> %803, %796
  %806 = or i64 %785, 16
  %807 = getelementptr inbounds i32, i32* %772, i64 %806
  %808 = bitcast i32* %807 to <4 x i32>*
  %809 = load <4 x i32>, <4 x i32>* %808, align 4
  %810 = getelementptr inbounds i32, i32* %807, i64 4
  %811 = bitcast i32* %810 to <4 x i32>*
  %812 = load <4 x i32>, <4 x i32>* %811, align 4
  %813 = mul nsw <4 x i32> %809, %804
  %814 = mul nsw <4 x i32> %812, %805
  %815 = or i64 %785, 24
  %816 = getelementptr inbounds i32, i32* %772, i64 %815
  %817 = bitcast i32* %816 to <4 x i32>*
  %818 = load <4 x i32>, <4 x i32>* %817, align 4
  %819 = getelementptr inbounds i32, i32* %816, i64 4
  %820 = bitcast i32* %819 to <4 x i32>*
  %821 = load <4 x i32>, <4 x i32>* %820, align 4
  %822 = mul nsw <4 x i32> %818, %813
  %823 = mul nsw <4 x i32> %821, %814
  %824 = add i64 %785, 32
  %825 = add i64 %788, -4
  %826 = icmp eq i64 %825, 0
  br i1 %826, label %827, label %784, !llvm.loop !271

827:                                              ; preds = %784, %775
  %828 = phi <4 x i32> [ undef, %775 ], [ %822, %784 ]
  %829 = phi <4 x i32> [ undef, %775 ], [ %823, %784 ]
  %830 = phi i64 [ 0, %775 ], [ %824, %784 ]
  %831 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %775 ], [ %822, %784 ]
  %832 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %775 ], [ %823, %784 ]
  %833 = icmp eq i64 %780, 0
  br i1 %833, label %850, label %834

834:                                              ; preds = %827, %834
  %835 = phi i64 [ %847, %834 ], [ %830, %827 ]
  %836 = phi <4 x i32> [ %845, %834 ], [ %831, %827 ]
  %837 = phi <4 x i32> [ %846, %834 ], [ %832, %827 ]
  %838 = phi i64 [ %848, %834 ], [ %780, %827 ]
  %839 = getelementptr inbounds i32, i32* %772, i64 %835
  %840 = bitcast i32* %839 to <4 x i32>*
  %841 = load <4 x i32>, <4 x i32>* %840, align 4
  %842 = getelementptr inbounds i32, i32* %839, i64 4
  %843 = bitcast i32* %842 to <4 x i32>*
  %844 = load <4 x i32>, <4 x i32>* %843, align 4
  %845 = mul nsw <4 x i32> %841, %836
  %846 = mul nsw <4 x i32> %844, %837
  %847 = add i64 %835, 8
  %848 = add i64 %838, -1
  %849 = icmp eq i64 %848, 0
  br i1 %849, label %850, label %834, !llvm.loop !272

850:                                              ; preds = %834, %827
  %851 = phi <4 x i32> [ %828, %827 ], [ %845, %834 ]
  %852 = phi <4 x i32> [ %829, %827 ], [ %846, %834 ]
  %853 = mul <4 x i32> %852, %851
  %854 = shufflevector <4 x i32> %853, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %855 = mul <4 x i32> %853, %854
  %856 = shufflevector <4 x i32> %855, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %857 = mul <4 x i32> %855, %856
  %858 = extractelement <4 x i32> %857, i32 0
  %859 = icmp eq i64 %776, %773
  br i1 %859, label %871, label %860

860:                                              ; preds = %850, %771
  %861 = phi i64 [ 0, %771 ], [ %776, %850 ]
  %862 = phi i32 [ 1, %771 ], [ %858, %850 ]
  br label %863

863:                                              ; preds = %860, %863
  %864 = phi i64 [ %869, %863 ], [ %861, %860 ]
  %865 = phi i32 [ %868, %863 ], [ %862, %860 ]
  %866 = getelementptr inbounds i32, i32* %772, i64 %864
  %867 = load i32, i32* %866, align 4
  %868 = mul nsw i32 %867, %865
  %869 = add nuw nsw i64 %864, 1
  %870 = icmp eq i64 %869, %773
  br i1 %870, label %871, label %863, !llvm.loop !273

871:                                              ; preds = %863, %850, %768
  %872 = phi i32 [ 1, %768 ], [ %858, %850 ], [ %868, %863 ]
  %873 = icmp sgt i32 %651, 5
  %874 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1
  br i1 %873, label %875, label %878

875:                                              ; preds = %871
  %876 = getelementptr inbounds %union.anon, %union.anon* %874, i64 0, i32 0
  %877 = load i32*, i32** %876, align 8
  br label %881

878:                                              ; preds = %871
  %879 = bitcast %union.anon* %874 to i32*
  %880 = icmp sgt i32 %651, 0
  br i1 %880, label %881, label %981

881:                                              ; preds = %878, %875
  %882 = phi i32* [ %877, %875 ], [ %879, %878 ]
  %883 = zext i32 %651 to i64
  %884 = icmp ult i32 %651, 8
  br i1 %884, label %970, label %885

885:                                              ; preds = %881
  %886 = and i64 %883, 4294967288
  %887 = add nsw i64 %886, -8
  %888 = lshr exact i64 %887, 3
  %889 = add nuw nsw i64 %888, 1
  %890 = and i64 %889, 3
  %891 = icmp ult i64 %887, 24
  br i1 %891, label %937, label %892

892:                                              ; preds = %885
  %893 = sub nsw i64 %889, %890
  br label %894

894:                                              ; preds = %894, %892
  %895 = phi i64 [ 0, %892 ], [ %934, %894 ]
  %896 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %892 ], [ %932, %894 ]
  %897 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %892 ], [ %933, %894 ]
  %898 = phi i64 [ %893, %892 ], [ %935, %894 ]
  %899 = getelementptr inbounds i32, i32* %882, i64 %895
  %900 = bitcast i32* %899 to <4 x i32>*
  %901 = load <4 x i32>, <4 x i32>* %900, align 4
  %902 = getelementptr inbounds i32, i32* %899, i64 4
  %903 = bitcast i32* %902 to <4 x i32>*
  %904 = load <4 x i32>, <4 x i32>* %903, align 4
  %905 = mul nsw <4 x i32> %901, %896
  %906 = mul nsw <4 x i32> %904, %897
  %907 = or i64 %895, 8
  %908 = getelementptr inbounds i32, i32* %882, i64 %907
  %909 = bitcast i32* %908 to <4 x i32>*
  %910 = load <4 x i32>, <4 x i32>* %909, align 4
  %911 = getelementptr inbounds i32, i32* %908, i64 4
  %912 = bitcast i32* %911 to <4 x i32>*
  %913 = load <4 x i32>, <4 x i32>* %912, align 4
  %914 = mul nsw <4 x i32> %910, %905
  %915 = mul nsw <4 x i32> %913, %906
  %916 = or i64 %895, 16
  %917 = getelementptr inbounds i32, i32* %882, i64 %916
  %918 = bitcast i32* %917 to <4 x i32>*
  %919 = load <4 x i32>, <4 x i32>* %918, align 4
  %920 = getelementptr inbounds i32, i32* %917, i64 4
  %921 = bitcast i32* %920 to <4 x i32>*
  %922 = load <4 x i32>, <4 x i32>* %921, align 4
  %923 = mul nsw <4 x i32> %919, %914
  %924 = mul nsw <4 x i32> %922, %915
  %925 = or i64 %895, 24
  %926 = getelementptr inbounds i32, i32* %882, i64 %925
  %927 = bitcast i32* %926 to <4 x i32>*
  %928 = load <4 x i32>, <4 x i32>* %927, align 4
  %929 = getelementptr inbounds i32, i32* %926, i64 4
  %930 = bitcast i32* %929 to <4 x i32>*
  %931 = load <4 x i32>, <4 x i32>* %930, align 4
  %932 = mul nsw <4 x i32> %928, %923
  %933 = mul nsw <4 x i32> %931, %924
  %934 = add i64 %895, 32
  %935 = add i64 %898, -4
  %936 = icmp eq i64 %935, 0
  br i1 %936, label %937, label %894, !llvm.loop !274

937:                                              ; preds = %894, %885
  %938 = phi <4 x i32> [ undef, %885 ], [ %932, %894 ]
  %939 = phi <4 x i32> [ undef, %885 ], [ %933, %894 ]
  %940 = phi i64 [ 0, %885 ], [ %934, %894 ]
  %941 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %885 ], [ %932, %894 ]
  %942 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %885 ], [ %933, %894 ]
  %943 = icmp eq i64 %890, 0
  br i1 %943, label %960, label %944

944:                                              ; preds = %937, %944
  %945 = phi i64 [ %957, %944 ], [ %940, %937 ]
  %946 = phi <4 x i32> [ %955, %944 ], [ %941, %937 ]
  %947 = phi <4 x i32> [ %956, %944 ], [ %942, %937 ]
  %948 = phi i64 [ %958, %944 ], [ %890, %937 ]
  %949 = getelementptr inbounds i32, i32* %882, i64 %945
  %950 = bitcast i32* %949 to <4 x i32>*
  %951 = load <4 x i32>, <4 x i32>* %950, align 4
  %952 = getelementptr inbounds i32, i32* %949, i64 4
  %953 = bitcast i32* %952 to <4 x i32>*
  %954 = load <4 x i32>, <4 x i32>* %953, align 4
  %955 = mul nsw <4 x i32> %951, %946
  %956 = mul nsw <4 x i32> %954, %947
  %957 = add i64 %945, 8
  %958 = add i64 %948, -1
  %959 = icmp eq i64 %958, 0
  br i1 %959, label %960, label %944, !llvm.loop !275

960:                                              ; preds = %944, %937
  %961 = phi <4 x i32> [ %938, %937 ], [ %955, %944 ]
  %962 = phi <4 x i32> [ %939, %937 ], [ %956, %944 ]
  %963 = mul <4 x i32> %962, %961
  %964 = shufflevector <4 x i32> %963, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %965 = mul <4 x i32> %963, %964
  %966 = shufflevector <4 x i32> %965, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %967 = mul <4 x i32> %965, %966
  %968 = extractelement <4 x i32> %967, i32 0
  %969 = icmp eq i64 %886, %883
  br i1 %969, label %981, label %970

970:                                              ; preds = %960, %881
  %971 = phi i64 [ 0, %881 ], [ %886, %960 ]
  %972 = phi i32 [ 1, %881 ], [ %968, %960 ]
  br label %973

973:                                              ; preds = %970, %973
  %974 = phi i64 [ %979, %973 ], [ %971, %970 ]
  %975 = phi i32 [ %978, %973 ], [ %972, %970 ]
  %976 = getelementptr inbounds i32, i32* %882, i64 %974
  %977 = load i32, i32* %976, align 4
  %978 = mul nsw i32 %977, %975
  %979 = add nuw nsw i64 %974, 1
  %980 = icmp eq i64 %979, %883
  br i1 %980, label %981, label %973, !llvm.loop !276

981:                                              ; preds = %973, %960, %878
  %982 = phi i32 [ 1, %878 ], [ %968, %960 ], [ %978, %973 ]
  %983 = icmp eq i32 %762, %872
  br i1 %983, label %985, label %984

984:                                              ; preds = %981
  call void @abort() #13
  unreachable

985:                                              ; preds = %981
  %986 = icmp eq i32 %762, %982
  br i1 %986, label %988, label %987

987:                                              ; preds = %985
  call void @abort() #13
  unreachable

988:                                              ; preds = %985
  %989 = icmp sgt i32 %762, 0
  br i1 %989, label %990, label %1113

990:                                              ; preds = %988
  %991 = zext i32 %762 to i64
  %992 = load float, float* %583, align 4
  %993 = load float, float* %617, align 4
  %994 = fadd float %992, %993
  %995 = fcmp olt float %994, %546
  %996 = select i1 %995, float %546, float %994
  %997 = fcmp ogt float %996, %547
  %998 = select i1 %997, float %547, float %996
  store float %998, float* %652, align 4
  %999 = icmp eq i32 %762, 1
  br i1 %999, label %1113, label %1000

1000:                                             ; preds = %990
  %1001 = add nsw i64 %991, -1
  %1002 = icmp ult i64 %1001, 4
  br i1 %1002, label %1061, label %1003

1003:                                             ; preds = %1000
  %1004 = getelementptr float, float* %652, i64 1
  %1005 = bitcast float* %1004 to i8*
  %1006 = getelementptr float, float* %652, i64 %991
  %1007 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 13
  %1008 = bitcast float* %1007 to i8*
  %1009 = getelementptr inbounds i8, i8* %1008, i64 1
  %1010 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 14
  %1011 = bitcast float* %1010 to i8*
  %1012 = getelementptr inbounds i8, i8* %1011, i64 1
  %1013 = getelementptr float, float* %583, i64 1
  %1014 = getelementptr float, float* %583, i64 %991
  %1015 = getelementptr float, float* %617, i64 1
  %1016 = getelementptr float, float* %617, i64 %991
  %1017 = icmp ugt i8* %1009, %1005
  %1018 = icmp ult float* %548, %1006
  %1019 = and i1 %1017, %1018
  %1020 = icmp ugt i8* %1012, %1005
  %1021 = icmp ult float* %549, %1006
  %1022 = and i1 %1020, %1021
  %1023 = or i1 %1019, %1022
  %1024 = icmp ult float* %1004, %1014
  %1025 = icmp ult float* %1013, %1006
  %1026 = and i1 %1024, %1025
  %1027 = or i1 %1023, %1026
  %1028 = icmp ult float* %1004, %1016
  %1029 = icmp ult float* %1015, %1006
  %1030 = and i1 %1028, %1029
  %1031 = or i1 %1027, %1030
  br i1 %1031, label %1061, label %1032

1032:                                             ; preds = %1003
  %1033 = and i64 %1001, -4
  %1034 = or i64 %1033, 1
  %1035 = load float, float* %548, align 4, !alias.scope !277
  %1036 = insertelement <4 x float> undef, float %1035, i32 0
  %1037 = shufflevector <4 x float> %1036, <4 x float> undef, <4 x i32> zeroinitializer
  %1038 = load float, float* %549, align 4, !alias.scope !280
  %1039 = insertelement <4 x float> undef, float %1038, i32 0
  %1040 = shufflevector <4 x float> %1039, <4 x float> undef, <4 x i32> zeroinitializer
  br label %1041

1041:                                             ; preds = %1041, %1032
  %1042 = phi i64 [ 0, %1032 ], [ %1057, %1041 ]
  %1043 = or i64 %1042, 1
  %1044 = getelementptr inbounds float, float* %583, i64 %1043
  %1045 = bitcast float* %1044 to <4 x float>*
  %1046 = load <4 x float>, <4 x float>* %1045, align 4, !alias.scope !282
  %1047 = getelementptr inbounds float, float* %617, i64 %1043
  %1048 = bitcast float* %1047 to <4 x float>*
  %1049 = load <4 x float>, <4 x float>* %1048, align 4, !alias.scope !284
  %1050 = fadd <4 x float> %1046, %1049
  %1051 = fcmp olt <4 x float> %1050, %1037
  %1052 = select <4 x i1> %1051, <4 x float> %1037, <4 x float> %1050
  %1053 = fcmp ogt <4 x float> %1052, %1040
  %1054 = select <4 x i1> %1053, <4 x float> %1040, <4 x float> %1052
  %1055 = getelementptr inbounds float, float* %652, i64 %1043
  %1056 = bitcast float* %1055 to <4 x float>*
  store <4 x float> %1054, <4 x float>* %1056, align 4, !alias.scope !286, !noalias !288
  %1057 = add i64 %1042, 4
  %1058 = icmp eq i64 %1057, %1033
  br i1 %1058, label %1059, label %1041, !llvm.loop !289

1059:                                             ; preds = %1041
  %1060 = icmp eq i64 %1001, %1033
  br i1 %1060, label %1113, label %1061

1061:                                             ; preds = %1059, %1003, %1000
  %1062 = phi i64 [ 1, %1003 ], [ 1, %1000 ], [ %1034, %1059 ]
  %1063 = xor i64 %1062, -1
  %1064 = and i64 %991, 1
  %1065 = icmp eq i64 %1064, 0
  br i1 %1065, label %1066, label %1080

1066:                                             ; preds = %1061
  %1067 = load float, float* %548, align 4
  %1068 = load float, float* %549, align 4
  %1069 = getelementptr inbounds float, float* %583, i64 %1062
  %1070 = load float, float* %1069, align 4
  %1071 = getelementptr inbounds float, float* %617, i64 %1062
  %1072 = load float, float* %1071, align 4
  %1073 = fadd float %1070, %1072
  %1074 = fcmp olt float %1073, %1067
  %1075 = select i1 %1074, float %1067, float %1073
  %1076 = fcmp ogt float %1075, %1068
  %1077 = select i1 %1076, float %1068, float %1075
  %1078 = getelementptr inbounds float, float* %652, i64 %1062
  store float %1077, float* %1078, align 4
  %1079 = add nuw nsw i64 %1062, 1
  br label %1080

1080:                                             ; preds = %1061, %1066
  %1081 = phi i64 [ %1062, %1061 ], [ %1079, %1066 ]
  %1082 = sub nsw i64 0, %991
  %1083 = icmp eq i64 %1063, %1082
  br i1 %1083, label %1113, label %1084

1084:                                             ; preds = %1080, %1084
  %1085 = phi i64 [ %1111, %1084 ], [ %1081, %1080 ]
  %1086 = load float, float* %548, align 4
  %1087 = load float, float* %549, align 4
  %1088 = getelementptr inbounds float, float* %583, i64 %1085
  %1089 = load float, float* %1088, align 4
  %1090 = getelementptr inbounds float, float* %617, i64 %1085
  %1091 = load float, float* %1090, align 4
  %1092 = fadd float %1089, %1091
  %1093 = fcmp olt float %1092, %1086
  %1094 = select i1 %1093, float %1086, float %1092
  %1095 = fcmp ogt float %1094, %1087
  %1096 = select i1 %1095, float %1087, float %1094
  %1097 = getelementptr inbounds float, float* %652, i64 %1085
  store float %1096, float* %1097, align 4
  %1098 = add nuw nsw i64 %1085, 1
  %1099 = load float, float* %548, align 4
  %1100 = load float, float* %549, align 4
  %1101 = getelementptr inbounds float, float* %583, i64 %1098
  %1102 = load float, float* %1101, align 4
  %1103 = getelementptr inbounds float, float* %617, i64 %1098
  %1104 = load float, float* %1103, align 4
  %1105 = fadd float %1102, %1104
  %1106 = fcmp olt float %1105, %1099
  %1107 = select i1 %1106, float %1099, float %1105
  %1108 = fcmp ogt float %1107, %1100
  %1109 = select i1 %1108, float %1100, float %1107
  %1110 = getelementptr inbounds float, float* %652, i64 %1098
  store float %1109, float* %1110, align 4
  %1111 = add nuw nsw i64 %1085, 2
  %1112 = icmp eq i64 %1111, %991
  br i1 %1112, label %1113, label %1084, !llvm.loop !290

1113:                                             ; preds = %1080, %1084, %990, %1059, %988
  br i1 %873, label %1114, label %1120

1114:                                             ; preds = %1113
  %1115 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1, i32 0
  %1116 = load i32*, i32** %1115, align 8
  %1117 = icmp eq i32* %1116, null
  br i1 %1117, label %1120, label %1118

1118:                                             ; preds = %1114
  %1119 = bitcast i32* %1116 to i8*
  call void @_ZdaPv(i8* %1119) #11
  br label %1120

1120:                                             ; preds = %1113, %1114, %1118
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %618) #12
  br i1 %763, label %1121, label %1127

1121:                                             ; preds = %1120
  %1122 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1, i32 0
  %1123 = load i32*, i32** %1122, align 8
  %1124 = icmp eq i32* %1123, null
  br i1 %1124, label %1127, label %1125

1125:                                             ; preds = %1121
  %1126 = bitcast i32* %1123 to i8*
  call void @_ZdaPv(i8* %1126) #11
  br label %1127

1127:                                             ; preds = %1120, %1121, %1125
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %584) #12
  br i1 %653, label %1128, label %1134

1128:                                             ; preds = %1127
  %1129 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1, i32 0
  %1130 = load i32*, i32** %1129, align 8
  %1131 = icmp eq i32* %1130, null
  br i1 %1131, label %1134, label %1132

1132:                                             ; preds = %1128
  %1133 = bitcast i32* %1130 to i8*
  call void @_ZdaPv(i8* %1133) #11
  br label %1134

1134:                                             ; preds = %1132, %1128, %1127, %535, %531, %527, %388, %384, %380, %249, %245, %241
  %1135 = phi i8* [ %125, %241 ], [ %125, %245 ], [ %125, %249 ], [ %264, %380 ], [ %264, %384 ], [ %264, %388 ], [ %408, %527 ], [ %408, %531 ], [ %408, %535 ], [ %550, %1127 ], [ %550, %1128 ], [ %550, %1132 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1135) #12
  br label %1136

1136:                                             ; preds = %1134, %104
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %23) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin3add16EvalAddQuantizedILNS2_10KernelTypeE1EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSH_PSF_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLiteAddParams*, %"struct.tflite::ops::builtin::add::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #3 comdat {
  %8 = alloca %"struct.tflite::ArithmeticParams", align 4
  %9 = alloca %"struct.tflite::ArithmeticParams", align 4
  %10 = alloca %"struct.tflite::ArithmeticParams", align 4
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = alloca %"class.tflite::RuntimeShape", align 8
  %13 = alloca %"class.tflite::RuntimeShape", align 8
  %14 = alloca %"class.tflite::RuntimeShape", align 8
  %15 = alloca %"class.tflite::RuntimeShape", align 8
  %16 = alloca %"class.tflite::RuntimeShape", align 8
  %17 = alloca %"class.tflite::RuntimeShape", align 8
  %18 = alloca %"class.tflite::RuntimeShape", align 8
  %19 = alloca %"class.tflite::RuntimeShape", align 8
  %20 = alloca %"class.tflite::RuntimeShape", align 8
  %21 = alloca %"class.tflite::RuntimeShape", align 8
  %22 = alloca %"class.tflite::RuntimeShape", align 8
  %23 = alloca %"class.tflite::RuntimeShape", align 8
  %24 = alloca %"class.tflite::RuntimeShape", align 8
  %25 = alloca %"class.tflite::RuntimeShape", align 8
  %26 = alloca %"class.tflite::RuntimeShape", align 8
  %27 = alloca %"class.tflite::RuntimeShape", align 8
  %28 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 0
  %29 = load i32, i32* %28, align 8
  switch i32 %29, label %2147 [
    i32 3, label %30
    i32 9, label %30
    i32 7, label %1565
  ]

30:                                               ; preds = %7, %7
  %31 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %31) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %31, i8* align 4 getelementptr inbounds ({ i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, [5 x i32] }, { i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, [5 x i32] }* @__const._ZN6tflite3ops7builtin3add16EvalAddQuantizedILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSH_PSF_.op_params, i64 0, i32 0), i64 80, i1 false)
  %32 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 8
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 6
  store i32 %33, i32* %34, align 4
  %35 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 9
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 1
  store i32 %36, i32* %37, align 4
  %38 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 4
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 7
  store i32 %39, i32* %40, align 4
  %41 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 8
  store i32 %42, i32* %43, align 4
  %44 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 10
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 2
  store i32 %45, i32* %46, align 4
  %47 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 5
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 9
  store i32 %48, i32* %49, align 4
  %50 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 10
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 11
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 3
  store i32 %54, i32* %55, align 4
  %56 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 6
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 4
  store i32 %57, i32* %58, align 4
  %59 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 7
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 5
  store i32 %60, i32* %61, align 4
  %62 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 2
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 3
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 11
  store i32 %63, i32* %66, align 4
  %67 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 12
  store i32 %65, i32* %67, align 4
  %68 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %68) #12
  %69 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %69, label %70, label %72

70:                                               ; preds = %30
  %71 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %71, align 8, !alias.scope !291
  br label %97

72:                                               ; preds = %30
  %73 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %74 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %73, align 8, !noalias !291
  %75 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %74, i64 0, i32 0
  %76 = load i32, i32* %75, align 4, !noalias !291
  %77 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %74, i64 0, i32 1, i64 0
  %78 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %76, i32* %78, align 8, !alias.scope !291
  %79 = icmp sgt i32 %76, 5
  br i1 %79, label %80, label %87

80:                                               ; preds = %72
  %81 = sext i32 %76 to i64
  %82 = shl nsw i64 %81, 2
  %83 = tail call i8* @_Znam(i64 %82) #11, !noalias !291
  %84 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %85 = bitcast i32** %84 to i8**
  store i8* %83, i8** %85, align 8, !alias.scope !291
  %86 = bitcast i8* %83 to i32*
  br label %92

87:                                               ; preds = %72
  %88 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %89 = bitcast %union.anon* %88 to i32*
  %90 = sext i32 %76 to i64
  %91 = shl nsw i64 %90, 2
  br label %92

92:                                               ; preds = %87, %80
  %93 = phi i64 [ %82, %80 ], [ %91, %87 ]
  %94 = phi i32* [ %86, %80 ], [ %89, %87 ]
  %95 = bitcast i32* %94 to i8*
  %96 = bitcast i32* %77 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %95, i8* align 4 %96, i64 %93, i1 false) #12
  br label %97

97:                                               ; preds = %70, %92
  %98 = bitcast %"class.tflite::RuntimeShape"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %98) #12
  %99 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %99, label %100, label %102

100:                                              ; preds = %97
  %101 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 0, i32* %101, align 8, !alias.scope !294
  br label %127

102:                                              ; preds = %97
  %103 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %104 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %103, align 8, !noalias !294
  %105 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %104, i64 0, i32 0
  %106 = load i32, i32* %105, align 4, !noalias !294
  %107 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %104, i64 0, i32 1, i64 0
  %108 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 %106, i32* %108, align 8, !alias.scope !294
  %109 = icmp sgt i32 %106, 5
  br i1 %109, label %110, label %117

110:                                              ; preds = %102
  %111 = sext i32 %106 to i64
  %112 = shl nsw i64 %111, 2
  %113 = tail call i8* @_Znam(i64 %112) #11, !noalias !294
  %114 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %115 = bitcast i32** %114 to i8**
  store i8* %113, i8** %115, align 8, !alias.scope !294
  %116 = bitcast i8* %113 to i32*
  br label %122

117:                                              ; preds = %102
  %118 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1
  %119 = bitcast %union.anon* %118 to i32*
  %120 = sext i32 %106 to i64
  %121 = shl nsw i64 %120, 2
  br label %122

122:                                              ; preds = %117, %110
  %123 = phi i64 [ %112, %110 ], [ %121, %117 ]
  %124 = phi i32* [ %116, %110 ], [ %119, %117 ]
  %125 = bitcast i32* %124 to i8*
  %126 = bitcast i32* %107 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %125, i8* align 4 %126, i64 %123, i1 false) #12
  br label %127

127:                                              ; preds = %100, %122
  %128 = call zeroext i1 @_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE(%"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %12, %"struct.tflite::ArithmeticParams"* nonnull %10)
  %129 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  %130 = load i32, i32* %129, align 8
  %131 = icmp sgt i32 %130, 5
  br i1 %131, label %132, label %138

132:                                              ; preds = %127
  %133 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %134 = load i32*, i32** %133, align 8
  %135 = icmp eq i32* %134, null
  br i1 %135, label %138, label %136

136:                                              ; preds = %132
  %137 = bitcast i32* %134 to i8*
  call void @_ZdaPv(i8* %137) #11
  br label %138

138:                                              ; preds = %127, %132, %136
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %98) #12
  %139 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %140 = load i32, i32* %139, align 8
  %141 = icmp sgt i32 %140, 5
  br i1 %141, label %142, label %148

142:                                              ; preds = %138
  %143 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %144 = load i32*, i32** %143, align 8
  %145 = icmp eq i32* %144, null
  br i1 %145, label %148, label %146

146:                                              ; preds = %142
  %147 = bitcast i32* %144 to i8*
  call void @_ZdaPv(i8* %147) #11
  br label %148

148:                                              ; preds = %138, %142, %146
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %68) #12
  %149 = load i32, i32* %28, align 8
  %150 = icmp eq i32 %149, 9
  br i1 %150, label %151, label %857

151:                                              ; preds = %148
  br i1 %128, label %152, label %397

152:                                              ; preds = %151
  %153 = bitcast %"class.tflite::RuntimeShape"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %153) #12
  br i1 %69, label %154, label %156

154:                                              ; preds = %152
  %155 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 0, i32* %155, align 8, !alias.scope !297
  br label %184

156:                                              ; preds = %152
  %157 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %158 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %157, align 8, !noalias !297
  %159 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %158, i64 0, i32 0
  %160 = load i32, i32* %159, align 4, !noalias !297
  %161 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %158, i64 0, i32 1, i64 0
  %162 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 %160, i32* %162, align 8, !alias.scope !297
  %163 = icmp sgt i32 %160, 5
  br i1 %163, label %164, label %171

164:                                              ; preds = %156
  %165 = sext i32 %160 to i64
  %166 = shl nsw i64 %165, 2
  %167 = call i8* @_Znam(i64 %166) #11, !noalias !297
  %168 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %169 = bitcast i32** %168 to i8**
  store i8* %167, i8** %169, align 8, !alias.scope !297
  %170 = bitcast i8* %167 to i32*
  br label %176

171:                                              ; preds = %156
  %172 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1
  %173 = bitcast %union.anon* %172 to i32*
  %174 = sext i32 %160 to i64
  %175 = shl nsw i64 %174, 2
  br label %176

176:                                              ; preds = %171, %164
  %177 = phi i64 [ %166, %164 ], [ %175, %171 ]
  %178 = phi i32* [ %170, %164 ], [ %173, %171 ]
  %179 = bitcast i32* %178 to i8*
  %180 = bitcast i32* %161 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %179, i8* align 4 %180, i64 %177, i1 false) #12
  %181 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %182 = bitcast %union.TfLitePtrUnion* %181 to i8**
  %183 = load i8*, i8** %182, align 8
  br label %184

184:                                              ; preds = %154, %176
  %185 = phi i8* [ %183, %176 ], [ null, %154 ]
  %186 = bitcast %"class.tflite::RuntimeShape"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %186) #12
  br i1 %99, label %187, label %189

187:                                              ; preds = %184
  %188 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 0, i32* %188, align 8, !alias.scope !300
  br label %217

189:                                              ; preds = %184
  %190 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %191 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %190, align 8, !noalias !300
  %192 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %191, i64 0, i32 0
  %193 = load i32, i32* %192, align 4, !noalias !300
  %194 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %191, i64 0, i32 1, i64 0
  %195 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 %193, i32* %195, align 8, !alias.scope !300
  %196 = icmp sgt i32 %193, 5
  br i1 %196, label %197, label %204

197:                                              ; preds = %189
  %198 = sext i32 %193 to i64
  %199 = shl nsw i64 %198, 2
  %200 = call i8* @_Znam(i64 %199) #11, !noalias !300
  %201 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %202 = bitcast i32** %201 to i8**
  store i8* %200, i8** %202, align 8, !alias.scope !300
  %203 = bitcast i8* %200 to i32*
  br label %209

204:                                              ; preds = %189
  %205 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1
  %206 = bitcast %union.anon* %205 to i32*
  %207 = sext i32 %193 to i64
  %208 = shl nsw i64 %207, 2
  br label %209

209:                                              ; preds = %204, %197
  %210 = phi i64 [ %199, %197 ], [ %208, %204 ]
  %211 = phi i32* [ %203, %197 ], [ %206, %204 ]
  %212 = bitcast i32* %211 to i8*
  %213 = bitcast i32* %194 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %212, i8* align 4 %213, i64 %210, i1 false) #12
  %214 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %215 = bitcast %union.TfLitePtrUnion* %214 to i8**
  %216 = load i8*, i8** %215, align 8
  br label %217

217:                                              ; preds = %187, %209
  %218 = phi i8* [ %216, %209 ], [ null, %187 ]
  %219 = bitcast %"class.tflite::RuntimeShape"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %219) #12
  %220 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %220, label %221, label %223

221:                                              ; preds = %217
  %222 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  store i32 0, i32* %222, align 8, !alias.scope !303
  br label %251

223:                                              ; preds = %217
  %224 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %225 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %224, align 8, !noalias !303
  %226 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %225, i64 0, i32 0
  %227 = load i32, i32* %226, align 4, !noalias !303
  %228 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %225, i64 0, i32 1, i64 0
  %229 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  store i32 %227, i32* %229, align 8, !alias.scope !303
  %230 = icmp sgt i32 %227, 5
  br i1 %230, label %231, label %238

231:                                              ; preds = %223
  %232 = sext i32 %227 to i64
  %233 = shl nsw i64 %232, 2
  %234 = call i8* @_Znam(i64 %233) #11, !noalias !303
  %235 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1, i32 0
  %236 = bitcast i32** %235 to i8**
  store i8* %234, i8** %236, align 8, !alias.scope !303
  %237 = bitcast i8* %234 to i32*
  br label %243

238:                                              ; preds = %223
  %239 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1
  %240 = bitcast %union.anon* %239 to i32*
  %241 = sext i32 %227 to i64
  %242 = shl nsw i64 %241, 2
  br label %243

243:                                              ; preds = %238, %231
  %244 = phi i64 [ %233, %231 ], [ %242, %238 ]
  %245 = phi i32* [ %237, %231 ], [ %240, %238 ]
  %246 = bitcast i32* %245 to i8*
  %247 = bitcast i32* %228 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %246, i8* align 4 %247, i64 %244, i1 false) #12
  %248 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %249 = bitcast %union.TfLitePtrUnion* %248 to i8**
  %250 = load i8*, i8** %249, align 8
  br label %251

251:                                              ; preds = %221, %243
  %252 = phi i8* [ %250, %243 ], [ null, %221 ]
  %253 = load i8, i8* %31, align 4
  %254 = icmp eq i8 %253, 4
  br i1 %254, label %255, label %256

255:                                              ; preds = %251
  call void @_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa(%"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %10, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %13, i8* %185, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %14, i8* %218, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %15, i8* %252) #12
  br label %367

256:                                              ; preds = %251
  %257 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %257) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %257, i8* nonnull align 4 %31, i64 80, i1 false) #12
  %258 = load i32, i32* %46, align 4
  %259 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %9, i64 0, i32 1
  store i32 %258, i32* %259, align 4
  %260 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %9, i64 0, i32 7
  %261 = load i32, i32* %37, align 4
  %262 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %9, i64 0, i32 2
  store i32 %261, i32* %262, align 4
  %263 = bitcast i32* %40 to <4 x i32>*
  %264 = load <4 x i32>, <4 x i32>* %263, align 4
  %265 = shufflevector <4 x i32> %264, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %266 = bitcast i32* %260 to <4 x i32>*
  store <4 x i32> %265, <4 x i32>* %266, align 4
  %267 = icmp eq i8 %253, 2
  %268 = select i1 %267, %"struct.tflite::ArithmeticParams"* %10, %"struct.tflite::ArithmeticParams"* %9
  %269 = select i1 %267, i8* %185, i8* %218
  %270 = select i1 %267, i8* %218, i8* %185
  %271 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %268, i64 0, i32 15, i64 0
  %272 = load i32, i32* %271, align 4
  %273 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %268, i64 0, i32 15, i64 1
  %274 = load i32, i32* %273, align 4
  %275 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %268, i64 0, i32 15, i64 2
  %276 = load i32, i32* %275, align 4
  %277 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %268, i64 0, i32 15, i64 3
  %278 = load i32, i32* %277, align 4
  %279 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %268, i64 0, i32 15, i64 4
  %280 = load i32, i32* %279, align 4
  %281 = icmp sgt i32 %280, 1
  %282 = icmp sgt i32 %272, 0
  br i1 %281, label %288, label %283

283:                                              ; preds = %256
  br i1 %282, label %284, label %366

284:                                              ; preds = %283
  %285 = icmp sgt i32 %274, 0
  %286 = icmp sgt i32 %276, 0
  %287 = sext i32 %278 to i64
  br label %334

288:                                              ; preds = %256
  br i1 %282, label %289, label %366

289:                                              ; preds = %288
  %290 = icmp sgt i32 %274, 0
  %291 = icmp sgt i32 %276, 0
  %292 = icmp sgt i32 %278, 0
  %293 = sext i32 %280 to i64
  br label %294

294:                                              ; preds = %303, %289
  %295 = phi i32 [ 0, %289 ], [ %307, %303 ]
  %296 = phi i8* [ %270, %289 ], [ %306, %303 ]
  %297 = phi i8* [ %269, %289 ], [ %305, %303 ]
  %298 = phi i8* [ %252, %289 ], [ %304, %303 ]
  br i1 %290, label %299, label %303

299:                                              ; preds = %294, %314
  %300 = phi i32 [ %318, %314 ], [ 0, %294 ]
  %301 = phi i8* [ %316, %314 ], [ %297, %294 ]
  %302 = phi i8* [ %315, %314 ], [ %298, %294 ]
  br i1 %291, label %309, label %314

303:                                              ; preds = %314, %294
  %304 = phi i8* [ %298, %294 ], [ %315, %314 ]
  %305 = phi i8* [ %297, %294 ], [ %316, %314 ]
  %306 = phi i8* [ null, %294 ], [ %317, %314 ]
  %307 = add nuw nsw i32 %295, 1
  %308 = icmp eq i32 %307, %272
  br i1 %308, label %366, label %294

309:                                              ; preds = %299, %320
  %310 = phi i32 [ %324, %320 ], [ 0, %299 ]
  %311 = phi i8* [ %322, %320 ], [ %296, %299 ]
  %312 = phi i8* [ %323, %320 ], [ %301, %299 ]
  %313 = phi i8* [ %321, %320 ], [ %302, %299 ]
  br i1 %292, label %326, label %320

314:                                              ; preds = %320, %299
  %315 = phi i8* [ %302, %299 ], [ %321, %320 ]
  %316 = phi i8* [ %301, %299 ], [ %323, %320 ]
  %317 = phi i8* [ %296, %299 ], [ %322, %320 ]
  %318 = add nuw nsw i32 %300, 1
  %319 = icmp eq i32 %318, %274
  br i1 %319, label %303, label %299

320:                                              ; preds = %326, %309
  %321 = phi i8* [ %313, %309 ], [ %331, %326 ]
  %322 = phi i8* [ %311, %309 ], [ %330, %326 ]
  %323 = getelementptr inbounds i8, i8* %312, i64 %293
  %324 = add nuw nsw i32 %310, 1
  %325 = icmp eq i32 %324, %276
  br i1 %325, label %314, label %309

326:                                              ; preds = %309, %326
  %327 = phi i32 [ %332, %326 ], [ 0, %309 ]
  %328 = phi i8* [ %330, %326 ], [ %311, %309 ]
  %329 = phi i8* [ %331, %326 ], [ %313, %309 ]
  call void @_ZN6tflite21optimized_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa(i32 %280, %"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %268, i8* %312, i8* %328, i8* %329) #12
  %330 = getelementptr inbounds i8, i8* %328, i64 %293
  %331 = getelementptr inbounds i8, i8* %329, i64 %293
  %332 = add nuw nsw i32 %327, 1
  %333 = icmp eq i32 %332, %278
  br i1 %333, label %320, label %326

334:                                              ; preds = %343, %284
  %335 = phi i32 [ 0, %284 ], [ %347, %343 ]
  %336 = phi i8* [ %270, %284 ], [ %346, %343 ]
  %337 = phi i8* [ %269, %284 ], [ %345, %343 ]
  %338 = phi i8* [ %252, %284 ], [ %344, %343 ]
  br i1 %285, label %339, label %343

339:                                              ; preds = %334, %349
  %340 = phi i32 [ %353, %349 ], [ 0, %334 ]
  %341 = phi i8* [ %351, %349 ], [ %337, %334 ]
  %342 = phi i8* [ %350, %349 ], [ %338, %334 ]
  br i1 %286, label %355, label %349

343:                                              ; preds = %349, %334
  %344 = phi i8* [ %338, %334 ], [ %350, %349 ]
  %345 = phi i8* [ %337, %334 ], [ %351, %349 ]
  %346 = phi i8* [ null, %334 ], [ %352, %349 ]
  %347 = add nuw nsw i32 %335, 1
  %348 = icmp eq i32 %347, %272
  br i1 %348, label %366, label %334

349:                                              ; preds = %355, %339
  %350 = phi i8* [ %342, %339 ], [ %362, %355 ]
  %351 = phi i8* [ %341, %339 ], [ %363, %355 ]
  %352 = phi i8* [ %336, %339 ], [ %361, %355 ]
  %353 = add nuw nsw i32 %340, 1
  %354 = icmp eq i32 %353, %274
  br i1 %354, label %343, label %339

355:                                              ; preds = %339, %355
  %356 = phi i32 [ %364, %355 ], [ 0, %339 ]
  %357 = phi i8* [ %361, %355 ], [ %336, %339 ]
  %358 = phi i8* [ %363, %355 ], [ %341, %339 ]
  %359 = phi i8* [ %362, %355 ], [ %342, %339 ]
  %360 = load i8, i8* %358, align 1
  call void @_ZN6tflite21optimized_integer_ops18AddScalarBroadcastEiRKNS_16ArithmeticParamsEaPKaPa(i32 %278, %"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %268, i8 signext %360, i8* %357, i8* %359) #12
  %361 = getelementptr inbounds i8, i8* %357, i64 %287
  %362 = getelementptr inbounds i8, i8* %359, i64 %287
  %363 = getelementptr inbounds i8, i8* %358, i64 1
  %364 = add nuw nsw i32 %356, 1
  %365 = icmp eq i32 %364, %276
  br i1 %365, label %349, label %355

366:                                              ; preds = %343, %303, %283, %288
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %257) #12
  br label %367

367:                                              ; preds = %255, %366
  %368 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  %369 = load i32, i32* %368, align 8
  %370 = icmp sgt i32 %369, 5
  br i1 %370, label %371, label %377

371:                                              ; preds = %367
  %372 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1, i32 0
  %373 = load i32*, i32** %372, align 8
  %374 = icmp eq i32* %373, null
  br i1 %374, label %377, label %375

375:                                              ; preds = %371
  %376 = bitcast i32* %373 to i8*
  call void @_ZdaPv(i8* %376) #11
  br label %377

377:                                              ; preds = %367, %371, %375
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %219) #12
  %378 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  %379 = load i32, i32* %378, align 8
  %380 = icmp sgt i32 %379, 5
  br i1 %380, label %381, label %387

381:                                              ; preds = %377
  %382 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %383 = load i32*, i32** %382, align 8
  %384 = icmp eq i32* %383, null
  br i1 %384, label %387, label %385

385:                                              ; preds = %381
  %386 = bitcast i32* %383 to i8*
  call void @_ZdaPv(i8* %386) #11
  br label %387

387:                                              ; preds = %377, %381, %385
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %186) #12
  %388 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  %389 = load i32, i32* %388, align 8
  %390 = icmp sgt i32 %389, 5
  br i1 %390, label %391, label %1563

391:                                              ; preds = %387
  %392 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %393 = load i32*, i32** %392, align 8
  %394 = icmp eq i32* %393, null
  br i1 %394, label %1563, label %395

395:                                              ; preds = %391
  %396 = bitcast i32* %393 to i8*
  call void @_ZdaPv(i8* %396) #11
  br label %1563

397:                                              ; preds = %151
  %398 = bitcast %"class.tflite::RuntimeShape"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %398) #12
  br i1 %69, label %399, label %401

399:                                              ; preds = %397
  %400 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 0
  store i32 0, i32* %400, align 8, !alias.scope !306
  br label %429

401:                                              ; preds = %397
  %402 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %403 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %402, align 8, !noalias !306
  %404 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %403, i64 0, i32 0
  %405 = load i32, i32* %404, align 4, !noalias !306
  %406 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %403, i64 0, i32 1, i64 0
  %407 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 0
  store i32 %405, i32* %407, align 8, !alias.scope !306
  %408 = icmp sgt i32 %405, 5
  br i1 %408, label %409, label %416

409:                                              ; preds = %401
  %410 = sext i32 %405 to i64
  %411 = shl nsw i64 %410, 2
  %412 = call i8* @_Znam(i64 %411) #11, !noalias !306
  %413 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1, i32 0
  %414 = bitcast i32** %413 to i8**
  store i8* %412, i8** %414, align 8, !alias.scope !306
  %415 = bitcast i8* %412 to i32*
  br label %421

416:                                              ; preds = %401
  %417 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1
  %418 = bitcast %union.anon* %417 to i32*
  %419 = sext i32 %405 to i64
  %420 = shl nsw i64 %419, 2
  br label %421

421:                                              ; preds = %416, %409
  %422 = phi i64 [ %411, %409 ], [ %420, %416 ]
  %423 = phi i32* [ %415, %409 ], [ %418, %416 ]
  %424 = bitcast i32* %423 to i8*
  %425 = bitcast i32* %406 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %424, i8* align 4 %425, i64 %422, i1 false) #12
  %426 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %427 = bitcast %union.TfLitePtrUnion* %426 to i8**
  %428 = load i8*, i8** %427, align 8
  br label %429

429:                                              ; preds = %399, %421
  %430 = phi i32 [ %405, %421 ], [ 0, %399 ]
  %431 = phi i8* [ %428, %421 ], [ null, %399 ]
  %432 = bitcast %"class.tflite::RuntimeShape"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %432) #12
  br i1 %99, label %433, label %435

433:                                              ; preds = %429
  %434 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 0
  store i32 0, i32* %434, align 8, !alias.scope !309
  br label %463

435:                                              ; preds = %429
  %436 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %437 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %436, align 8, !noalias !309
  %438 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %437, i64 0, i32 0
  %439 = load i32, i32* %438, align 4, !noalias !309
  %440 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %437, i64 0, i32 1, i64 0
  %441 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 0
  store i32 %439, i32* %441, align 8, !alias.scope !309
  %442 = icmp sgt i32 %439, 5
  br i1 %442, label %443, label %450

443:                                              ; preds = %435
  %444 = sext i32 %439 to i64
  %445 = shl nsw i64 %444, 2
  %446 = call i8* @_Znam(i64 %445) #11, !noalias !309
  %447 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1, i32 0
  %448 = bitcast i32** %447 to i8**
  store i8* %446, i8** %448, align 8, !alias.scope !309
  %449 = bitcast i8* %446 to i32*
  br label %455

450:                                              ; preds = %435
  %451 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1
  %452 = bitcast %union.anon* %451 to i32*
  %453 = sext i32 %439 to i64
  %454 = shl nsw i64 %453, 2
  br label %455

455:                                              ; preds = %450, %443
  %456 = phi i64 [ %445, %443 ], [ %454, %450 ]
  %457 = phi i32* [ %449, %443 ], [ %452, %450 ]
  %458 = bitcast i32* %457 to i8*
  %459 = bitcast i32* %440 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %458, i8* align 4 %459, i64 %456, i1 false) #12
  %460 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %461 = bitcast %union.TfLitePtrUnion* %460 to i8**
  %462 = load i8*, i8** %461, align 8
  br label %463

463:                                              ; preds = %433, %455
  %464 = phi i32 [ %439, %455 ], [ 0, %433 ]
  %465 = phi i8* [ %462, %455 ], [ null, %433 ]
  %466 = bitcast %"class.tflite::RuntimeShape"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %466) #12
  %467 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %467, label %468, label %470

468:                                              ; preds = %463
  %469 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 0
  store i32 0, i32* %469, align 8, !alias.scope !312
  br label %498

470:                                              ; preds = %463
  %471 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %472 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %471, align 8, !noalias !312
  %473 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %472, i64 0, i32 0
  %474 = load i32, i32* %473, align 4, !noalias !312
  %475 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %472, i64 0, i32 1, i64 0
  %476 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 0
  store i32 %474, i32* %476, align 8, !alias.scope !312
  %477 = icmp sgt i32 %474, 5
  br i1 %477, label %478, label %485

478:                                              ; preds = %470
  %479 = sext i32 %474 to i64
  %480 = shl nsw i64 %479, 2
  %481 = call i8* @_Znam(i64 %480) #11, !noalias !312
  %482 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1, i32 0
  %483 = bitcast i32** %482 to i8**
  store i8* %481, i8** %483, align 8, !alias.scope !312
  %484 = bitcast i8* %481 to i32*
  br label %490

485:                                              ; preds = %470
  %486 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1
  %487 = bitcast %union.anon* %486 to i32*
  %488 = sext i32 %474 to i64
  %489 = shl nsw i64 %488, 2
  br label %490

490:                                              ; preds = %485, %478
  %491 = phi i64 [ %480, %478 ], [ %489, %485 ]
  %492 = phi i32* [ %484, %478 ], [ %487, %485 ]
  %493 = bitcast i32* %492 to i8*
  %494 = bitcast i32* %475 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %493, i8* align 4 %494, i64 %491, i1 false) #12
  %495 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %496 = bitcast %union.TfLitePtrUnion* %495 to i8**
  %497 = load i8*, i8** %496, align 8
  br label %498

498:                                              ; preds = %468, %490
  %499 = phi i32 [ %474, %490 ], [ 0, %468 ]
  %500 = phi i8* [ %497, %490 ], [ null, %468 ]
  %501 = icmp sgt i32 %430, 5
  %502 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1
  br i1 %501, label %503, label %506

503:                                              ; preds = %498
  %504 = getelementptr inbounds %union.anon, %union.anon* %502, i64 0, i32 0
  %505 = load i32*, i32** %504, align 8
  br label %509

506:                                              ; preds = %498
  %507 = bitcast %union.anon* %502 to i32*
  %508 = icmp sgt i32 %430, 0
  br i1 %508, label %509, label %609

509:                                              ; preds = %506, %503
  %510 = phi i32* [ %505, %503 ], [ %507, %506 ]
  %511 = zext i32 %430 to i64
  %512 = icmp ult i32 %430, 8
  br i1 %512, label %598, label %513

513:                                              ; preds = %509
  %514 = and i64 %511, 4294967288
  %515 = add nsw i64 %514, -8
  %516 = lshr exact i64 %515, 3
  %517 = add nuw nsw i64 %516, 1
  %518 = and i64 %517, 3
  %519 = icmp ult i64 %515, 24
  br i1 %519, label %565, label %520

520:                                              ; preds = %513
  %521 = sub nsw i64 %517, %518
  br label %522

522:                                              ; preds = %522, %520
  %523 = phi i64 [ 0, %520 ], [ %562, %522 ]
  %524 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %520 ], [ %560, %522 ]
  %525 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %520 ], [ %561, %522 ]
  %526 = phi i64 [ %521, %520 ], [ %563, %522 ]
  %527 = getelementptr inbounds i32, i32* %510, i64 %523
  %528 = bitcast i32* %527 to <4 x i32>*
  %529 = load <4 x i32>, <4 x i32>* %528, align 4
  %530 = getelementptr inbounds i32, i32* %527, i64 4
  %531 = bitcast i32* %530 to <4 x i32>*
  %532 = load <4 x i32>, <4 x i32>* %531, align 4
  %533 = mul nsw <4 x i32> %529, %524
  %534 = mul nsw <4 x i32> %532, %525
  %535 = or i64 %523, 8
  %536 = getelementptr inbounds i32, i32* %510, i64 %535
  %537 = bitcast i32* %536 to <4 x i32>*
  %538 = load <4 x i32>, <4 x i32>* %537, align 4
  %539 = getelementptr inbounds i32, i32* %536, i64 4
  %540 = bitcast i32* %539 to <4 x i32>*
  %541 = load <4 x i32>, <4 x i32>* %540, align 4
  %542 = mul nsw <4 x i32> %538, %533
  %543 = mul nsw <4 x i32> %541, %534
  %544 = or i64 %523, 16
  %545 = getelementptr inbounds i32, i32* %510, i64 %544
  %546 = bitcast i32* %545 to <4 x i32>*
  %547 = load <4 x i32>, <4 x i32>* %546, align 4
  %548 = getelementptr inbounds i32, i32* %545, i64 4
  %549 = bitcast i32* %548 to <4 x i32>*
  %550 = load <4 x i32>, <4 x i32>* %549, align 4
  %551 = mul nsw <4 x i32> %547, %542
  %552 = mul nsw <4 x i32> %550, %543
  %553 = or i64 %523, 24
  %554 = getelementptr inbounds i32, i32* %510, i64 %553
  %555 = bitcast i32* %554 to <4 x i32>*
  %556 = load <4 x i32>, <4 x i32>* %555, align 4
  %557 = getelementptr inbounds i32, i32* %554, i64 4
  %558 = bitcast i32* %557 to <4 x i32>*
  %559 = load <4 x i32>, <4 x i32>* %558, align 4
  %560 = mul nsw <4 x i32> %556, %551
  %561 = mul nsw <4 x i32> %559, %552
  %562 = add i64 %523, 32
  %563 = add i64 %526, -4
  %564 = icmp eq i64 %563, 0
  br i1 %564, label %565, label %522, !llvm.loop !315

565:                                              ; preds = %522, %513
  %566 = phi <4 x i32> [ undef, %513 ], [ %560, %522 ]
  %567 = phi <4 x i32> [ undef, %513 ], [ %561, %522 ]
  %568 = phi i64 [ 0, %513 ], [ %562, %522 ]
  %569 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %513 ], [ %560, %522 ]
  %570 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %513 ], [ %561, %522 ]
  %571 = icmp eq i64 %518, 0
  br i1 %571, label %588, label %572

572:                                              ; preds = %565, %572
  %573 = phi i64 [ %585, %572 ], [ %568, %565 ]
  %574 = phi <4 x i32> [ %583, %572 ], [ %569, %565 ]
  %575 = phi <4 x i32> [ %584, %572 ], [ %570, %565 ]
  %576 = phi i64 [ %586, %572 ], [ %518, %565 ]
  %577 = getelementptr inbounds i32, i32* %510, i64 %573
  %578 = bitcast i32* %577 to <4 x i32>*
  %579 = load <4 x i32>, <4 x i32>* %578, align 4
  %580 = getelementptr inbounds i32, i32* %577, i64 4
  %581 = bitcast i32* %580 to <4 x i32>*
  %582 = load <4 x i32>, <4 x i32>* %581, align 4
  %583 = mul nsw <4 x i32> %579, %574
  %584 = mul nsw <4 x i32> %582, %575
  %585 = add i64 %573, 8
  %586 = add i64 %576, -1
  %587 = icmp eq i64 %586, 0
  br i1 %587, label %588, label %572, !llvm.loop !316

588:                                              ; preds = %572, %565
  %589 = phi <4 x i32> [ %566, %565 ], [ %583, %572 ]
  %590 = phi <4 x i32> [ %567, %565 ], [ %584, %572 ]
  %591 = mul <4 x i32> %590, %589
  %592 = shufflevector <4 x i32> %591, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %593 = mul <4 x i32> %591, %592
  %594 = shufflevector <4 x i32> %593, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %595 = mul <4 x i32> %593, %594
  %596 = extractelement <4 x i32> %595, i32 0
  %597 = icmp eq i64 %514, %511
  br i1 %597, label %609, label %598

598:                                              ; preds = %588, %509
  %599 = phi i64 [ 0, %509 ], [ %514, %588 ]
  %600 = phi i32 [ 1, %509 ], [ %596, %588 ]
  br label %601

601:                                              ; preds = %598, %601
  %602 = phi i64 [ %607, %601 ], [ %599, %598 ]
  %603 = phi i32 [ %606, %601 ], [ %600, %598 ]
  %604 = getelementptr inbounds i32, i32* %510, i64 %602
  %605 = load i32, i32* %604, align 4
  %606 = mul nsw i32 %605, %603
  %607 = add nuw nsw i64 %602, 1
  %608 = icmp eq i64 %607, %511
  br i1 %608, label %609, label %601, !llvm.loop !317

609:                                              ; preds = %601, %588, %506
  %610 = phi i32 [ 1, %506 ], [ %596, %588 ], [ %606, %601 ]
  %611 = icmp sgt i32 %464, 5
  %612 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1
  br i1 %611, label %613, label %616

613:                                              ; preds = %609
  %614 = getelementptr inbounds %union.anon, %union.anon* %612, i64 0, i32 0
  %615 = load i32*, i32** %614, align 8
  br label %619

616:                                              ; preds = %609
  %617 = bitcast %union.anon* %612 to i32*
  %618 = icmp sgt i32 %464, 0
  br i1 %618, label %619, label %719

619:                                              ; preds = %616, %613
  %620 = phi i32* [ %615, %613 ], [ %617, %616 ]
  %621 = zext i32 %464 to i64
  %622 = icmp ult i32 %464, 8
  br i1 %622, label %708, label %623

623:                                              ; preds = %619
  %624 = and i64 %621, 4294967288
  %625 = add nsw i64 %624, -8
  %626 = lshr exact i64 %625, 3
  %627 = add nuw nsw i64 %626, 1
  %628 = and i64 %627, 3
  %629 = icmp ult i64 %625, 24
  br i1 %629, label %675, label %630

630:                                              ; preds = %623
  %631 = sub nsw i64 %627, %628
  br label %632

632:                                              ; preds = %632, %630
  %633 = phi i64 [ 0, %630 ], [ %672, %632 ]
  %634 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %630 ], [ %670, %632 ]
  %635 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %630 ], [ %671, %632 ]
  %636 = phi i64 [ %631, %630 ], [ %673, %632 ]
  %637 = getelementptr inbounds i32, i32* %620, i64 %633
  %638 = bitcast i32* %637 to <4 x i32>*
  %639 = load <4 x i32>, <4 x i32>* %638, align 4
  %640 = getelementptr inbounds i32, i32* %637, i64 4
  %641 = bitcast i32* %640 to <4 x i32>*
  %642 = load <4 x i32>, <4 x i32>* %641, align 4
  %643 = mul nsw <4 x i32> %639, %634
  %644 = mul nsw <4 x i32> %642, %635
  %645 = or i64 %633, 8
  %646 = getelementptr inbounds i32, i32* %620, i64 %645
  %647 = bitcast i32* %646 to <4 x i32>*
  %648 = load <4 x i32>, <4 x i32>* %647, align 4
  %649 = getelementptr inbounds i32, i32* %646, i64 4
  %650 = bitcast i32* %649 to <4 x i32>*
  %651 = load <4 x i32>, <4 x i32>* %650, align 4
  %652 = mul nsw <4 x i32> %648, %643
  %653 = mul nsw <4 x i32> %651, %644
  %654 = or i64 %633, 16
  %655 = getelementptr inbounds i32, i32* %620, i64 %654
  %656 = bitcast i32* %655 to <4 x i32>*
  %657 = load <4 x i32>, <4 x i32>* %656, align 4
  %658 = getelementptr inbounds i32, i32* %655, i64 4
  %659 = bitcast i32* %658 to <4 x i32>*
  %660 = load <4 x i32>, <4 x i32>* %659, align 4
  %661 = mul nsw <4 x i32> %657, %652
  %662 = mul nsw <4 x i32> %660, %653
  %663 = or i64 %633, 24
  %664 = getelementptr inbounds i32, i32* %620, i64 %663
  %665 = bitcast i32* %664 to <4 x i32>*
  %666 = load <4 x i32>, <4 x i32>* %665, align 4
  %667 = getelementptr inbounds i32, i32* %664, i64 4
  %668 = bitcast i32* %667 to <4 x i32>*
  %669 = load <4 x i32>, <4 x i32>* %668, align 4
  %670 = mul nsw <4 x i32> %666, %661
  %671 = mul nsw <4 x i32> %669, %662
  %672 = add i64 %633, 32
  %673 = add i64 %636, -4
  %674 = icmp eq i64 %673, 0
  br i1 %674, label %675, label %632, !llvm.loop !318

675:                                              ; preds = %632, %623
  %676 = phi <4 x i32> [ undef, %623 ], [ %670, %632 ]
  %677 = phi <4 x i32> [ undef, %623 ], [ %671, %632 ]
  %678 = phi i64 [ 0, %623 ], [ %672, %632 ]
  %679 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %623 ], [ %670, %632 ]
  %680 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %623 ], [ %671, %632 ]
  %681 = icmp eq i64 %628, 0
  br i1 %681, label %698, label %682

682:                                              ; preds = %675, %682
  %683 = phi i64 [ %695, %682 ], [ %678, %675 ]
  %684 = phi <4 x i32> [ %693, %682 ], [ %679, %675 ]
  %685 = phi <4 x i32> [ %694, %682 ], [ %680, %675 ]
  %686 = phi i64 [ %696, %682 ], [ %628, %675 ]
  %687 = getelementptr inbounds i32, i32* %620, i64 %683
  %688 = bitcast i32* %687 to <4 x i32>*
  %689 = load <4 x i32>, <4 x i32>* %688, align 4
  %690 = getelementptr inbounds i32, i32* %687, i64 4
  %691 = bitcast i32* %690 to <4 x i32>*
  %692 = load <4 x i32>, <4 x i32>* %691, align 4
  %693 = mul nsw <4 x i32> %689, %684
  %694 = mul nsw <4 x i32> %692, %685
  %695 = add i64 %683, 8
  %696 = add i64 %686, -1
  %697 = icmp eq i64 %696, 0
  br i1 %697, label %698, label %682, !llvm.loop !319

698:                                              ; preds = %682, %675
  %699 = phi <4 x i32> [ %676, %675 ], [ %693, %682 ]
  %700 = phi <4 x i32> [ %677, %675 ], [ %694, %682 ]
  %701 = mul <4 x i32> %700, %699
  %702 = shufflevector <4 x i32> %701, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %703 = mul <4 x i32> %701, %702
  %704 = shufflevector <4 x i32> %703, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %705 = mul <4 x i32> %703, %704
  %706 = extractelement <4 x i32> %705, i32 0
  %707 = icmp eq i64 %624, %621
  br i1 %707, label %719, label %708

708:                                              ; preds = %698, %619
  %709 = phi i64 [ 0, %619 ], [ %624, %698 ]
  %710 = phi i32 [ 1, %619 ], [ %706, %698 ]
  br label %711

711:                                              ; preds = %708, %711
  %712 = phi i64 [ %717, %711 ], [ %709, %708 ]
  %713 = phi i32 [ %716, %711 ], [ %710, %708 ]
  %714 = getelementptr inbounds i32, i32* %620, i64 %712
  %715 = load i32, i32* %714, align 4
  %716 = mul nsw i32 %715, %713
  %717 = add nuw nsw i64 %712, 1
  %718 = icmp eq i64 %717, %621
  br i1 %718, label %719, label %711, !llvm.loop !320

719:                                              ; preds = %711, %698, %616
  %720 = phi i32 [ 1, %616 ], [ %706, %698 ], [ %716, %711 ]
  %721 = icmp sgt i32 %499, 5
  %722 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1
  br i1 %721, label %723, label %726

723:                                              ; preds = %719
  %724 = getelementptr inbounds %union.anon, %union.anon* %722, i64 0, i32 0
  %725 = load i32*, i32** %724, align 8
  br label %729

726:                                              ; preds = %719
  %727 = bitcast %union.anon* %722 to i32*
  %728 = icmp sgt i32 %499, 0
  br i1 %728, label %729, label %829

729:                                              ; preds = %726, %723
  %730 = phi i32* [ %725, %723 ], [ %727, %726 ]
  %731 = zext i32 %499 to i64
  %732 = icmp ult i32 %499, 8
  br i1 %732, label %818, label %733

733:                                              ; preds = %729
  %734 = and i64 %731, 4294967288
  %735 = add nsw i64 %734, -8
  %736 = lshr exact i64 %735, 3
  %737 = add nuw nsw i64 %736, 1
  %738 = and i64 %737, 3
  %739 = icmp ult i64 %735, 24
  br i1 %739, label %785, label %740

740:                                              ; preds = %733
  %741 = sub nsw i64 %737, %738
  br label %742

742:                                              ; preds = %742, %740
  %743 = phi i64 [ 0, %740 ], [ %782, %742 ]
  %744 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %740 ], [ %780, %742 ]
  %745 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %740 ], [ %781, %742 ]
  %746 = phi i64 [ %741, %740 ], [ %783, %742 ]
  %747 = getelementptr inbounds i32, i32* %730, i64 %743
  %748 = bitcast i32* %747 to <4 x i32>*
  %749 = load <4 x i32>, <4 x i32>* %748, align 4
  %750 = getelementptr inbounds i32, i32* %747, i64 4
  %751 = bitcast i32* %750 to <4 x i32>*
  %752 = load <4 x i32>, <4 x i32>* %751, align 4
  %753 = mul nsw <4 x i32> %749, %744
  %754 = mul nsw <4 x i32> %752, %745
  %755 = or i64 %743, 8
  %756 = getelementptr inbounds i32, i32* %730, i64 %755
  %757 = bitcast i32* %756 to <4 x i32>*
  %758 = load <4 x i32>, <4 x i32>* %757, align 4
  %759 = getelementptr inbounds i32, i32* %756, i64 4
  %760 = bitcast i32* %759 to <4 x i32>*
  %761 = load <4 x i32>, <4 x i32>* %760, align 4
  %762 = mul nsw <4 x i32> %758, %753
  %763 = mul nsw <4 x i32> %761, %754
  %764 = or i64 %743, 16
  %765 = getelementptr inbounds i32, i32* %730, i64 %764
  %766 = bitcast i32* %765 to <4 x i32>*
  %767 = load <4 x i32>, <4 x i32>* %766, align 4
  %768 = getelementptr inbounds i32, i32* %765, i64 4
  %769 = bitcast i32* %768 to <4 x i32>*
  %770 = load <4 x i32>, <4 x i32>* %769, align 4
  %771 = mul nsw <4 x i32> %767, %762
  %772 = mul nsw <4 x i32> %770, %763
  %773 = or i64 %743, 24
  %774 = getelementptr inbounds i32, i32* %730, i64 %773
  %775 = bitcast i32* %774 to <4 x i32>*
  %776 = load <4 x i32>, <4 x i32>* %775, align 4
  %777 = getelementptr inbounds i32, i32* %774, i64 4
  %778 = bitcast i32* %777 to <4 x i32>*
  %779 = load <4 x i32>, <4 x i32>* %778, align 4
  %780 = mul nsw <4 x i32> %776, %771
  %781 = mul nsw <4 x i32> %779, %772
  %782 = add i64 %743, 32
  %783 = add i64 %746, -4
  %784 = icmp eq i64 %783, 0
  br i1 %784, label %785, label %742, !llvm.loop !321

785:                                              ; preds = %742, %733
  %786 = phi <4 x i32> [ undef, %733 ], [ %780, %742 ]
  %787 = phi <4 x i32> [ undef, %733 ], [ %781, %742 ]
  %788 = phi i64 [ 0, %733 ], [ %782, %742 ]
  %789 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %733 ], [ %780, %742 ]
  %790 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %733 ], [ %781, %742 ]
  %791 = icmp eq i64 %738, 0
  br i1 %791, label %808, label %792

792:                                              ; preds = %785, %792
  %793 = phi i64 [ %805, %792 ], [ %788, %785 ]
  %794 = phi <4 x i32> [ %803, %792 ], [ %789, %785 ]
  %795 = phi <4 x i32> [ %804, %792 ], [ %790, %785 ]
  %796 = phi i64 [ %806, %792 ], [ %738, %785 ]
  %797 = getelementptr inbounds i32, i32* %730, i64 %793
  %798 = bitcast i32* %797 to <4 x i32>*
  %799 = load <4 x i32>, <4 x i32>* %798, align 4
  %800 = getelementptr inbounds i32, i32* %797, i64 4
  %801 = bitcast i32* %800 to <4 x i32>*
  %802 = load <4 x i32>, <4 x i32>* %801, align 4
  %803 = mul nsw <4 x i32> %799, %794
  %804 = mul nsw <4 x i32> %802, %795
  %805 = add i64 %793, 8
  %806 = add i64 %796, -1
  %807 = icmp eq i64 %806, 0
  br i1 %807, label %808, label %792, !llvm.loop !322

808:                                              ; preds = %792, %785
  %809 = phi <4 x i32> [ %786, %785 ], [ %803, %792 ]
  %810 = phi <4 x i32> [ %787, %785 ], [ %804, %792 ]
  %811 = mul <4 x i32> %810, %809
  %812 = shufflevector <4 x i32> %811, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %813 = mul <4 x i32> %811, %812
  %814 = shufflevector <4 x i32> %813, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %815 = mul <4 x i32> %813, %814
  %816 = extractelement <4 x i32> %815, i32 0
  %817 = icmp eq i64 %734, %731
  br i1 %817, label %829, label %818

818:                                              ; preds = %808, %729
  %819 = phi i64 [ 0, %729 ], [ %734, %808 ]
  %820 = phi i32 [ 1, %729 ], [ %816, %808 ]
  br label %821

821:                                              ; preds = %818, %821
  %822 = phi i64 [ %827, %821 ], [ %819, %818 ]
  %823 = phi i32 [ %826, %821 ], [ %820, %818 ]
  %824 = getelementptr inbounds i32, i32* %730, i64 %822
  %825 = load i32, i32* %824, align 4
  %826 = mul nsw i32 %825, %823
  %827 = add nuw nsw i64 %822, 1
  %828 = icmp eq i64 %827, %731
  br i1 %828, label %829, label %821, !llvm.loop !323

829:                                              ; preds = %821, %808, %726
  %830 = phi i32 [ 1, %726 ], [ %816, %808 ], [ %826, %821 ]
  %831 = icmp eq i32 %610, %720
  br i1 %831, label %833, label %832

832:                                              ; preds = %829
  call void @abort() #13
  unreachable

833:                                              ; preds = %829
  %834 = icmp eq i32 %610, %830
  br i1 %834, label %836, label %835

835:                                              ; preds = %833
  call void @abort() #13
  unreachable

836:                                              ; preds = %833
  call void @_ZN6tflite21optimized_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa(i32 %610, %"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %10, i8* %431, i8* %465, i8* %500) #12
  br i1 %721, label %837, label %843

837:                                              ; preds = %836
  %838 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1, i32 0
  %839 = load i32*, i32** %838, align 8
  %840 = icmp eq i32* %839, null
  br i1 %840, label %843, label %841

841:                                              ; preds = %837
  %842 = bitcast i32* %839 to i8*
  call void @_ZdaPv(i8* %842) #11
  br label %843

843:                                              ; preds = %836, %837, %841
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %466) #12
  br i1 %611, label %844, label %850

844:                                              ; preds = %843
  %845 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1, i32 0
  %846 = load i32*, i32** %845, align 8
  %847 = icmp eq i32* %846, null
  br i1 %847, label %850, label %848

848:                                              ; preds = %844
  %849 = bitcast i32* %846 to i8*
  call void @_ZdaPv(i8* %849) #11
  br label %850

850:                                              ; preds = %843, %844, %848
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %432) #12
  br i1 %501, label %851, label %1563

851:                                              ; preds = %850
  %852 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1, i32 0
  %853 = load i32*, i32** %852, align 8
  %854 = icmp eq i32* %853, null
  br i1 %854, label %1563, label %855

855:                                              ; preds = %851
  %856 = bitcast i32* %853 to i8*
  call void @_ZdaPv(i8* %856) #11
  br label %1563

857:                                              ; preds = %148
  br i1 %128, label %858, label %1103

858:                                              ; preds = %857
  %859 = bitcast %"class.tflite::RuntimeShape"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %859) #12
  br i1 %69, label %860, label %862

860:                                              ; preds = %858
  %861 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 0
  store i32 0, i32* %861, align 8, !alias.scope !324
  br label %890

862:                                              ; preds = %858
  %863 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %864 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %863, align 8, !noalias !324
  %865 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %864, i64 0, i32 0
  %866 = load i32, i32* %865, align 4, !noalias !324
  %867 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %864, i64 0, i32 1, i64 0
  %868 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 0
  store i32 %866, i32* %868, align 8, !alias.scope !324
  %869 = icmp sgt i32 %866, 5
  br i1 %869, label %870, label %877

870:                                              ; preds = %862
  %871 = sext i32 %866 to i64
  %872 = shl nsw i64 %871, 2
  %873 = call i8* @_Znam(i64 %872) #11, !noalias !324
  %874 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 1, i32 0
  %875 = bitcast i32** %874 to i8**
  store i8* %873, i8** %875, align 8, !alias.scope !324
  %876 = bitcast i8* %873 to i32*
  br label %882

877:                                              ; preds = %862
  %878 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 1
  %879 = bitcast %union.anon* %878 to i32*
  %880 = sext i32 %866 to i64
  %881 = shl nsw i64 %880, 2
  br label %882

882:                                              ; preds = %877, %870
  %883 = phi i64 [ %872, %870 ], [ %881, %877 ]
  %884 = phi i32* [ %876, %870 ], [ %879, %877 ]
  %885 = bitcast i32* %884 to i8*
  %886 = bitcast i32* %867 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %885, i8* align 4 %886, i64 %883, i1 false) #12
  %887 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %888 = bitcast %union.TfLitePtrUnion* %887 to i8**
  %889 = load i8*, i8** %888, align 8
  br label %890

890:                                              ; preds = %860, %882
  %891 = phi i8* [ %889, %882 ], [ null, %860 ]
  %892 = bitcast %"class.tflite::RuntimeShape"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %892) #12
  br i1 %99, label %893, label %895

893:                                              ; preds = %890
  %894 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 0
  store i32 0, i32* %894, align 8, !alias.scope !327
  br label %923

895:                                              ; preds = %890
  %896 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %897 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %896, align 8, !noalias !327
  %898 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %897, i64 0, i32 0
  %899 = load i32, i32* %898, align 4, !noalias !327
  %900 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %897, i64 0, i32 1, i64 0
  %901 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 0
  store i32 %899, i32* %901, align 8, !alias.scope !327
  %902 = icmp sgt i32 %899, 5
  br i1 %902, label %903, label %910

903:                                              ; preds = %895
  %904 = sext i32 %899 to i64
  %905 = shl nsw i64 %904, 2
  %906 = call i8* @_Znam(i64 %905) #11, !noalias !327
  %907 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1, i32 0
  %908 = bitcast i32** %907 to i8**
  store i8* %906, i8** %908, align 8, !alias.scope !327
  %909 = bitcast i8* %906 to i32*
  br label %915

910:                                              ; preds = %895
  %911 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1
  %912 = bitcast %union.anon* %911 to i32*
  %913 = sext i32 %899 to i64
  %914 = shl nsw i64 %913, 2
  br label %915

915:                                              ; preds = %910, %903
  %916 = phi i64 [ %905, %903 ], [ %914, %910 ]
  %917 = phi i32* [ %909, %903 ], [ %912, %910 ]
  %918 = bitcast i32* %917 to i8*
  %919 = bitcast i32* %900 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %918, i8* align 4 %919, i64 %916, i1 false) #12
  %920 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %921 = bitcast %union.TfLitePtrUnion* %920 to i8**
  %922 = load i8*, i8** %921, align 8
  br label %923

923:                                              ; preds = %893, %915
  %924 = phi i8* [ %922, %915 ], [ null, %893 ]
  %925 = bitcast %"class.tflite::RuntimeShape"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %925) #12
  %926 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %926, label %927, label %929

927:                                              ; preds = %923
  %928 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 0
  store i32 0, i32* %928, align 8, !alias.scope !330
  br label %957

929:                                              ; preds = %923
  %930 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %931 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %930, align 8, !noalias !330
  %932 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %931, i64 0, i32 0
  %933 = load i32, i32* %932, align 4, !noalias !330
  %934 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %931, i64 0, i32 1, i64 0
  %935 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 0
  store i32 %933, i32* %935, align 8, !alias.scope !330
  %936 = icmp sgt i32 %933, 5
  br i1 %936, label %937, label %944

937:                                              ; preds = %929
  %938 = sext i32 %933 to i64
  %939 = shl nsw i64 %938, 2
  %940 = call i8* @_Znam(i64 %939) #11, !noalias !330
  %941 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1, i32 0
  %942 = bitcast i32** %941 to i8**
  store i8* %940, i8** %942, align 8, !alias.scope !330
  %943 = bitcast i8* %940 to i32*
  br label %949

944:                                              ; preds = %929
  %945 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1
  %946 = bitcast %union.anon* %945 to i32*
  %947 = sext i32 %933 to i64
  %948 = shl nsw i64 %947, 2
  br label %949

949:                                              ; preds = %944, %937
  %950 = phi i64 [ %939, %937 ], [ %948, %944 ]
  %951 = phi i32* [ %943, %937 ], [ %946, %944 ]
  %952 = bitcast i32* %951 to i8*
  %953 = bitcast i32* %934 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %952, i8* align 4 %953, i64 %950, i1 false) #12
  %954 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %955 = bitcast %union.TfLitePtrUnion* %954 to i8**
  %956 = load i8*, i8** %955, align 8
  br label %957

957:                                              ; preds = %927, %949
  %958 = phi i8* [ %956, %949 ], [ null, %927 ]
  %959 = load i8, i8* %31, align 4
  %960 = icmp eq i8 %959, 4
  br i1 %960, label %961, label %962

961:                                              ; preds = %957
  call void @_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph(%"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %10, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %19, i8* %891, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %20, i8* %924, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %21, i8* %958) #12
  br label %1073

962:                                              ; preds = %957
  %963 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %963) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %963, i8* nonnull align 4 %31, i64 80, i1 false) #12
  %964 = load i32, i32* %46, align 4
  %965 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 1
  store i32 %964, i32* %965, align 4
  %966 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 7
  %967 = load i32, i32* %37, align 4
  %968 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 2
  store i32 %967, i32* %968, align 4
  %969 = bitcast i32* %40 to <4 x i32>*
  %970 = load <4 x i32>, <4 x i32>* %969, align 4
  %971 = shufflevector <4 x i32> %970, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %972 = bitcast i32* %966 to <4 x i32>*
  store <4 x i32> %971, <4 x i32>* %972, align 4
  %973 = icmp eq i8 %959, 2
  %974 = select i1 %973, %"struct.tflite::ArithmeticParams"* %10, %"struct.tflite::ArithmeticParams"* %8
  %975 = select i1 %973, i8* %891, i8* %924
  %976 = select i1 %973, i8* %924, i8* %891
  %977 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %974, i64 0, i32 15, i64 0
  %978 = load i32, i32* %977, align 4
  %979 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %974, i64 0, i32 15, i64 1
  %980 = load i32, i32* %979, align 4
  %981 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %974, i64 0, i32 15, i64 2
  %982 = load i32, i32* %981, align 4
  %983 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %974, i64 0, i32 15, i64 3
  %984 = load i32, i32* %983, align 4
  %985 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %974, i64 0, i32 15, i64 4
  %986 = load i32, i32* %985, align 4
  %987 = icmp sgt i32 %986, 1
  %988 = icmp sgt i32 %978, 0
  br i1 %987, label %994, label %989

989:                                              ; preds = %962
  br i1 %988, label %990, label %1072

990:                                              ; preds = %989
  %991 = icmp sgt i32 %980, 0
  %992 = icmp sgt i32 %982, 0
  %993 = sext i32 %984 to i64
  br label %1040

994:                                              ; preds = %962
  br i1 %988, label %995, label %1072

995:                                              ; preds = %994
  %996 = icmp sgt i32 %980, 0
  %997 = icmp sgt i32 %982, 0
  %998 = icmp sgt i32 %984, 0
  %999 = sext i32 %986 to i64
  br label %1000

1000:                                             ; preds = %1009, %995
  %1001 = phi i32 [ 0, %995 ], [ %1013, %1009 ]
  %1002 = phi i8* [ %976, %995 ], [ %1012, %1009 ]
  %1003 = phi i8* [ %975, %995 ], [ %1011, %1009 ]
  %1004 = phi i8* [ %958, %995 ], [ %1010, %1009 ]
  br i1 %996, label %1005, label %1009

1005:                                             ; preds = %1000, %1020
  %1006 = phi i32 [ %1024, %1020 ], [ 0, %1000 ]
  %1007 = phi i8* [ %1022, %1020 ], [ %1003, %1000 ]
  %1008 = phi i8* [ %1021, %1020 ], [ %1004, %1000 ]
  br i1 %997, label %1015, label %1020

1009:                                             ; preds = %1020, %1000
  %1010 = phi i8* [ %1004, %1000 ], [ %1021, %1020 ]
  %1011 = phi i8* [ %1003, %1000 ], [ %1022, %1020 ]
  %1012 = phi i8* [ null, %1000 ], [ %1023, %1020 ]
  %1013 = add nuw nsw i32 %1001, 1
  %1014 = icmp eq i32 %1013, %978
  br i1 %1014, label %1072, label %1000

1015:                                             ; preds = %1005, %1026
  %1016 = phi i32 [ %1030, %1026 ], [ 0, %1005 ]
  %1017 = phi i8* [ %1028, %1026 ], [ %1002, %1005 ]
  %1018 = phi i8* [ %1029, %1026 ], [ %1007, %1005 ]
  %1019 = phi i8* [ %1027, %1026 ], [ %1008, %1005 ]
  br i1 %998, label %1032, label %1026

1020:                                             ; preds = %1026, %1005
  %1021 = phi i8* [ %1008, %1005 ], [ %1027, %1026 ]
  %1022 = phi i8* [ %1007, %1005 ], [ %1029, %1026 ]
  %1023 = phi i8* [ %1002, %1005 ], [ %1028, %1026 ]
  %1024 = add nuw nsw i32 %1006, 1
  %1025 = icmp eq i32 %1024, %980
  br i1 %1025, label %1009, label %1005

1026:                                             ; preds = %1032, %1015
  %1027 = phi i8* [ %1019, %1015 ], [ %1037, %1032 ]
  %1028 = phi i8* [ %1017, %1015 ], [ %1036, %1032 ]
  %1029 = getelementptr inbounds i8, i8* %1018, i64 %999
  %1030 = add nuw nsw i32 %1016, 1
  %1031 = icmp eq i32 %1030, %982
  br i1 %1031, label %1020, label %1015

1032:                                             ; preds = %1015, %1032
  %1033 = phi i32 [ %1038, %1032 ], [ 0, %1015 ]
  %1034 = phi i8* [ %1036, %1032 ], [ %1017, %1015 ]
  %1035 = phi i8* [ %1037, %1032 ], [ %1019, %1015 ]
  call void @_ZN6tflite13optimized_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph(i32 %986, %"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %974, i8* %1018, i8* %1034, i8* %1035) #12
  %1036 = getelementptr inbounds i8, i8* %1034, i64 %999
  %1037 = getelementptr inbounds i8, i8* %1035, i64 %999
  %1038 = add nuw nsw i32 %1033, 1
  %1039 = icmp eq i32 %1038, %984
  br i1 %1039, label %1026, label %1032

1040:                                             ; preds = %1049, %990
  %1041 = phi i32 [ 0, %990 ], [ %1053, %1049 ]
  %1042 = phi i8* [ %976, %990 ], [ %1052, %1049 ]
  %1043 = phi i8* [ %975, %990 ], [ %1051, %1049 ]
  %1044 = phi i8* [ %958, %990 ], [ %1050, %1049 ]
  br i1 %991, label %1045, label %1049

1045:                                             ; preds = %1040, %1055
  %1046 = phi i32 [ %1059, %1055 ], [ 0, %1040 ]
  %1047 = phi i8* [ %1057, %1055 ], [ %1043, %1040 ]
  %1048 = phi i8* [ %1056, %1055 ], [ %1044, %1040 ]
  br i1 %992, label %1061, label %1055

1049:                                             ; preds = %1055, %1040
  %1050 = phi i8* [ %1044, %1040 ], [ %1056, %1055 ]
  %1051 = phi i8* [ %1043, %1040 ], [ %1057, %1055 ]
  %1052 = phi i8* [ null, %1040 ], [ %1058, %1055 ]
  %1053 = add nuw nsw i32 %1041, 1
  %1054 = icmp eq i32 %1053, %978
  br i1 %1054, label %1072, label %1040

1055:                                             ; preds = %1061, %1045
  %1056 = phi i8* [ %1048, %1045 ], [ %1068, %1061 ]
  %1057 = phi i8* [ %1047, %1045 ], [ %1069, %1061 ]
  %1058 = phi i8* [ %1042, %1045 ], [ %1067, %1061 ]
  %1059 = add nuw nsw i32 %1046, 1
  %1060 = icmp eq i32 %1059, %980
  br i1 %1060, label %1049, label %1045

1061:                                             ; preds = %1045, %1061
  %1062 = phi i32 [ %1070, %1061 ], [ 0, %1045 ]
  %1063 = phi i8* [ %1067, %1061 ], [ %1042, %1045 ]
  %1064 = phi i8* [ %1069, %1061 ], [ %1047, %1045 ]
  %1065 = phi i8* [ %1068, %1061 ], [ %1048, %1045 ]
  %1066 = load i8, i8* %1064, align 1
  call void @_ZN6tflite13optimized_ops18AddScalarBroadcastEiRKNS_16ArithmeticParamsEhPKhPh(i32 %984, %"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %974, i8 zeroext %1066, i8* %1063, i8* %1065) #12
  %1067 = getelementptr inbounds i8, i8* %1063, i64 %993
  %1068 = getelementptr inbounds i8, i8* %1065, i64 %993
  %1069 = getelementptr inbounds i8, i8* %1064, i64 1
  %1070 = add nuw nsw i32 %1062, 1
  %1071 = icmp eq i32 %1070, %982
  br i1 %1071, label %1055, label %1061

1072:                                             ; preds = %1049, %1009, %989, %994
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %963) #12
  br label %1073

1073:                                             ; preds = %961, %1072
  %1074 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 0
  %1075 = load i32, i32* %1074, align 8
  %1076 = icmp sgt i32 %1075, 5
  br i1 %1076, label %1077, label %1083

1077:                                             ; preds = %1073
  %1078 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1, i32 0
  %1079 = load i32*, i32** %1078, align 8
  %1080 = icmp eq i32* %1079, null
  br i1 %1080, label %1083, label %1081

1081:                                             ; preds = %1077
  %1082 = bitcast i32* %1079 to i8*
  call void @_ZdaPv(i8* %1082) #11
  br label %1083

1083:                                             ; preds = %1073, %1077, %1081
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %925) #12
  %1084 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 0
  %1085 = load i32, i32* %1084, align 8
  %1086 = icmp sgt i32 %1085, 5
  br i1 %1086, label %1087, label %1093

1087:                                             ; preds = %1083
  %1088 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1, i32 0
  %1089 = load i32*, i32** %1088, align 8
  %1090 = icmp eq i32* %1089, null
  br i1 %1090, label %1093, label %1091

1091:                                             ; preds = %1087
  %1092 = bitcast i32* %1089 to i8*
  call void @_ZdaPv(i8* %1092) #11
  br label %1093

1093:                                             ; preds = %1083, %1087, %1091
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %892) #12
  %1094 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 0
  %1095 = load i32, i32* %1094, align 8
  %1096 = icmp sgt i32 %1095, 5
  br i1 %1096, label %1097, label %1563

1097:                                             ; preds = %1093
  %1098 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 1, i32 0
  %1099 = load i32*, i32** %1098, align 8
  %1100 = icmp eq i32* %1099, null
  br i1 %1100, label %1563, label %1101

1101:                                             ; preds = %1097
  %1102 = bitcast i32* %1099 to i8*
  call void @_ZdaPv(i8* %1102) #11
  br label %1563

1103:                                             ; preds = %857
  %1104 = bitcast %"class.tflite::RuntimeShape"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1104) #12
  br i1 %69, label %1105, label %1107

1105:                                             ; preds = %1103
  %1106 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 0
  store i32 0, i32* %1106, align 8, !alias.scope !333
  br label %1135

1107:                                             ; preds = %1103
  %1108 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %1109 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1108, align 8, !noalias !333
  %1110 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1109, i64 0, i32 0
  %1111 = load i32, i32* %1110, align 4, !noalias !333
  %1112 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1109, i64 0, i32 1, i64 0
  %1113 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 0
  store i32 %1111, i32* %1113, align 8, !alias.scope !333
  %1114 = icmp sgt i32 %1111, 5
  br i1 %1114, label %1115, label %1122

1115:                                             ; preds = %1107
  %1116 = sext i32 %1111 to i64
  %1117 = shl nsw i64 %1116, 2
  %1118 = call i8* @_Znam(i64 %1117) #11, !noalias !333
  %1119 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1, i32 0
  %1120 = bitcast i32** %1119 to i8**
  store i8* %1118, i8** %1120, align 8, !alias.scope !333
  %1121 = bitcast i8* %1118 to i32*
  br label %1127

1122:                                             ; preds = %1107
  %1123 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1
  %1124 = bitcast %union.anon* %1123 to i32*
  %1125 = sext i32 %1111 to i64
  %1126 = shl nsw i64 %1125, 2
  br label %1127

1127:                                             ; preds = %1122, %1115
  %1128 = phi i64 [ %1117, %1115 ], [ %1126, %1122 ]
  %1129 = phi i32* [ %1121, %1115 ], [ %1124, %1122 ]
  %1130 = bitcast i32* %1129 to i8*
  %1131 = bitcast i32* %1112 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1130, i8* align 4 %1131, i64 %1128, i1 false) #12
  %1132 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %1133 = bitcast %union.TfLitePtrUnion* %1132 to i8**
  %1134 = load i8*, i8** %1133, align 8
  br label %1135

1135:                                             ; preds = %1105, %1127
  %1136 = phi i32 [ %1111, %1127 ], [ 0, %1105 ]
  %1137 = phi i8* [ %1134, %1127 ], [ null, %1105 ]
  %1138 = bitcast %"class.tflite::RuntimeShape"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1138) #12
  br i1 %99, label %1139, label %1141

1139:                                             ; preds = %1135
  %1140 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %23, i64 0, i32 0
  store i32 0, i32* %1140, align 8, !alias.scope !336
  br label %1169

1141:                                             ; preds = %1135
  %1142 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %1143 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1142, align 8, !noalias !336
  %1144 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1143, i64 0, i32 0
  %1145 = load i32, i32* %1144, align 4, !noalias !336
  %1146 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1143, i64 0, i32 1, i64 0
  %1147 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %23, i64 0, i32 0
  store i32 %1145, i32* %1147, align 8, !alias.scope !336
  %1148 = icmp sgt i32 %1145, 5
  br i1 %1148, label %1149, label %1156

1149:                                             ; preds = %1141
  %1150 = sext i32 %1145 to i64
  %1151 = shl nsw i64 %1150, 2
  %1152 = call i8* @_Znam(i64 %1151) #11, !noalias !336
  %1153 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %23, i64 0, i32 1, i32 0
  %1154 = bitcast i32** %1153 to i8**
  store i8* %1152, i8** %1154, align 8, !alias.scope !336
  %1155 = bitcast i8* %1152 to i32*
  br label %1161

1156:                                             ; preds = %1141
  %1157 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %23, i64 0, i32 1
  %1158 = bitcast %union.anon* %1157 to i32*
  %1159 = sext i32 %1145 to i64
  %1160 = shl nsw i64 %1159, 2
  br label %1161

1161:                                             ; preds = %1156, %1149
  %1162 = phi i64 [ %1151, %1149 ], [ %1160, %1156 ]
  %1163 = phi i32* [ %1155, %1149 ], [ %1158, %1156 ]
  %1164 = bitcast i32* %1163 to i8*
  %1165 = bitcast i32* %1146 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1164, i8* align 4 %1165, i64 %1162, i1 false) #12
  %1166 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %1167 = bitcast %union.TfLitePtrUnion* %1166 to i8**
  %1168 = load i8*, i8** %1167, align 8
  br label %1169

1169:                                             ; preds = %1139, %1161
  %1170 = phi i32 [ %1145, %1161 ], [ 0, %1139 ]
  %1171 = phi i8* [ %1168, %1161 ], [ null, %1139 ]
  %1172 = bitcast %"class.tflite::RuntimeShape"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1172) #12
  %1173 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %1173, label %1174, label %1176

1174:                                             ; preds = %1169
  %1175 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %24, i64 0, i32 0
  store i32 0, i32* %1175, align 8, !alias.scope !339
  br label %1204

1176:                                             ; preds = %1169
  %1177 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %1178 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1177, align 8, !noalias !339
  %1179 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1178, i64 0, i32 0
  %1180 = load i32, i32* %1179, align 4, !noalias !339
  %1181 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1178, i64 0, i32 1, i64 0
  %1182 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %24, i64 0, i32 0
  store i32 %1180, i32* %1182, align 8, !alias.scope !339
  %1183 = icmp sgt i32 %1180, 5
  br i1 %1183, label %1184, label %1191

1184:                                             ; preds = %1176
  %1185 = sext i32 %1180 to i64
  %1186 = shl nsw i64 %1185, 2
  %1187 = call i8* @_Znam(i64 %1186) #11, !noalias !339
  %1188 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %24, i64 0, i32 1, i32 0
  %1189 = bitcast i32** %1188 to i8**
  store i8* %1187, i8** %1189, align 8, !alias.scope !339
  %1190 = bitcast i8* %1187 to i32*
  br label %1196

1191:                                             ; preds = %1176
  %1192 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %24, i64 0, i32 1
  %1193 = bitcast %union.anon* %1192 to i32*
  %1194 = sext i32 %1180 to i64
  %1195 = shl nsw i64 %1194, 2
  br label %1196

1196:                                             ; preds = %1191, %1184
  %1197 = phi i64 [ %1186, %1184 ], [ %1195, %1191 ]
  %1198 = phi i32* [ %1190, %1184 ], [ %1193, %1191 ]
  %1199 = bitcast i32* %1198 to i8*
  %1200 = bitcast i32* %1181 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1199, i8* align 4 %1200, i64 %1197, i1 false) #12
  %1201 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %1202 = bitcast %union.TfLitePtrUnion* %1201 to i8**
  %1203 = load i8*, i8** %1202, align 8
  br label %1204

1204:                                             ; preds = %1174, %1196
  %1205 = phi i32 [ %1180, %1196 ], [ 0, %1174 ]
  %1206 = phi i8* [ %1203, %1196 ], [ null, %1174 ]
  %1207 = icmp sgt i32 %1136, 5
  %1208 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1
  br i1 %1207, label %1209, label %1212

1209:                                             ; preds = %1204
  %1210 = getelementptr inbounds %union.anon, %union.anon* %1208, i64 0, i32 0
  %1211 = load i32*, i32** %1210, align 8
  br label %1215

1212:                                             ; preds = %1204
  %1213 = bitcast %union.anon* %1208 to i32*
  %1214 = icmp sgt i32 %1136, 0
  br i1 %1214, label %1215, label %1315

1215:                                             ; preds = %1212, %1209
  %1216 = phi i32* [ %1211, %1209 ], [ %1213, %1212 ]
  %1217 = zext i32 %1136 to i64
  %1218 = icmp ult i32 %1136, 8
  br i1 %1218, label %1304, label %1219

1219:                                             ; preds = %1215
  %1220 = and i64 %1217, 4294967288
  %1221 = add nsw i64 %1220, -8
  %1222 = lshr exact i64 %1221, 3
  %1223 = add nuw nsw i64 %1222, 1
  %1224 = and i64 %1223, 3
  %1225 = icmp ult i64 %1221, 24
  br i1 %1225, label %1271, label %1226

1226:                                             ; preds = %1219
  %1227 = sub nsw i64 %1223, %1224
  br label %1228

1228:                                             ; preds = %1228, %1226
  %1229 = phi i64 [ 0, %1226 ], [ %1268, %1228 ]
  %1230 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1226 ], [ %1266, %1228 ]
  %1231 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1226 ], [ %1267, %1228 ]
  %1232 = phi i64 [ %1227, %1226 ], [ %1269, %1228 ]
  %1233 = getelementptr inbounds i32, i32* %1216, i64 %1229
  %1234 = bitcast i32* %1233 to <4 x i32>*
  %1235 = load <4 x i32>, <4 x i32>* %1234, align 4
  %1236 = getelementptr inbounds i32, i32* %1233, i64 4
  %1237 = bitcast i32* %1236 to <4 x i32>*
  %1238 = load <4 x i32>, <4 x i32>* %1237, align 4
  %1239 = mul nsw <4 x i32> %1235, %1230
  %1240 = mul nsw <4 x i32> %1238, %1231
  %1241 = or i64 %1229, 8
  %1242 = getelementptr inbounds i32, i32* %1216, i64 %1241
  %1243 = bitcast i32* %1242 to <4 x i32>*
  %1244 = load <4 x i32>, <4 x i32>* %1243, align 4
  %1245 = getelementptr inbounds i32, i32* %1242, i64 4
  %1246 = bitcast i32* %1245 to <4 x i32>*
  %1247 = load <4 x i32>, <4 x i32>* %1246, align 4
  %1248 = mul nsw <4 x i32> %1244, %1239
  %1249 = mul nsw <4 x i32> %1247, %1240
  %1250 = or i64 %1229, 16
  %1251 = getelementptr inbounds i32, i32* %1216, i64 %1250
  %1252 = bitcast i32* %1251 to <4 x i32>*
  %1253 = load <4 x i32>, <4 x i32>* %1252, align 4
  %1254 = getelementptr inbounds i32, i32* %1251, i64 4
  %1255 = bitcast i32* %1254 to <4 x i32>*
  %1256 = load <4 x i32>, <4 x i32>* %1255, align 4
  %1257 = mul nsw <4 x i32> %1253, %1248
  %1258 = mul nsw <4 x i32> %1256, %1249
  %1259 = or i64 %1229, 24
  %1260 = getelementptr inbounds i32, i32* %1216, i64 %1259
  %1261 = bitcast i32* %1260 to <4 x i32>*
  %1262 = load <4 x i32>, <4 x i32>* %1261, align 4
  %1263 = getelementptr inbounds i32, i32* %1260, i64 4
  %1264 = bitcast i32* %1263 to <4 x i32>*
  %1265 = load <4 x i32>, <4 x i32>* %1264, align 4
  %1266 = mul nsw <4 x i32> %1262, %1257
  %1267 = mul nsw <4 x i32> %1265, %1258
  %1268 = add i64 %1229, 32
  %1269 = add i64 %1232, -4
  %1270 = icmp eq i64 %1269, 0
  br i1 %1270, label %1271, label %1228, !llvm.loop !342

1271:                                             ; preds = %1228, %1219
  %1272 = phi <4 x i32> [ undef, %1219 ], [ %1266, %1228 ]
  %1273 = phi <4 x i32> [ undef, %1219 ], [ %1267, %1228 ]
  %1274 = phi i64 [ 0, %1219 ], [ %1268, %1228 ]
  %1275 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1219 ], [ %1266, %1228 ]
  %1276 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1219 ], [ %1267, %1228 ]
  %1277 = icmp eq i64 %1224, 0
  br i1 %1277, label %1294, label %1278

1278:                                             ; preds = %1271, %1278
  %1279 = phi i64 [ %1291, %1278 ], [ %1274, %1271 ]
  %1280 = phi <4 x i32> [ %1289, %1278 ], [ %1275, %1271 ]
  %1281 = phi <4 x i32> [ %1290, %1278 ], [ %1276, %1271 ]
  %1282 = phi i64 [ %1292, %1278 ], [ %1224, %1271 ]
  %1283 = getelementptr inbounds i32, i32* %1216, i64 %1279
  %1284 = bitcast i32* %1283 to <4 x i32>*
  %1285 = load <4 x i32>, <4 x i32>* %1284, align 4
  %1286 = getelementptr inbounds i32, i32* %1283, i64 4
  %1287 = bitcast i32* %1286 to <4 x i32>*
  %1288 = load <4 x i32>, <4 x i32>* %1287, align 4
  %1289 = mul nsw <4 x i32> %1285, %1280
  %1290 = mul nsw <4 x i32> %1288, %1281
  %1291 = add i64 %1279, 8
  %1292 = add i64 %1282, -1
  %1293 = icmp eq i64 %1292, 0
  br i1 %1293, label %1294, label %1278, !llvm.loop !343

1294:                                             ; preds = %1278, %1271
  %1295 = phi <4 x i32> [ %1272, %1271 ], [ %1289, %1278 ]
  %1296 = phi <4 x i32> [ %1273, %1271 ], [ %1290, %1278 ]
  %1297 = mul <4 x i32> %1296, %1295
  %1298 = shufflevector <4 x i32> %1297, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1299 = mul <4 x i32> %1297, %1298
  %1300 = shufflevector <4 x i32> %1299, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1301 = mul <4 x i32> %1299, %1300
  %1302 = extractelement <4 x i32> %1301, i32 0
  %1303 = icmp eq i64 %1220, %1217
  br i1 %1303, label %1315, label %1304

1304:                                             ; preds = %1294, %1215
  %1305 = phi i64 [ 0, %1215 ], [ %1220, %1294 ]
  %1306 = phi i32 [ 1, %1215 ], [ %1302, %1294 ]
  br label %1307

1307:                                             ; preds = %1304, %1307
  %1308 = phi i64 [ %1313, %1307 ], [ %1305, %1304 ]
  %1309 = phi i32 [ %1312, %1307 ], [ %1306, %1304 ]
  %1310 = getelementptr inbounds i32, i32* %1216, i64 %1308
  %1311 = load i32, i32* %1310, align 4
  %1312 = mul nsw i32 %1311, %1309
  %1313 = add nuw nsw i64 %1308, 1
  %1314 = icmp eq i64 %1313, %1217
  br i1 %1314, label %1315, label %1307, !llvm.loop !344

1315:                                             ; preds = %1307, %1294, %1212
  %1316 = phi i32 [ 1, %1212 ], [ %1302, %1294 ], [ %1312, %1307 ]
  %1317 = icmp sgt i32 %1170, 5
  %1318 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %23, i64 0, i32 1
  br i1 %1317, label %1319, label %1322

1319:                                             ; preds = %1315
  %1320 = getelementptr inbounds %union.anon, %union.anon* %1318, i64 0, i32 0
  %1321 = load i32*, i32** %1320, align 8
  br label %1325

1322:                                             ; preds = %1315
  %1323 = bitcast %union.anon* %1318 to i32*
  %1324 = icmp sgt i32 %1170, 0
  br i1 %1324, label %1325, label %1425

1325:                                             ; preds = %1322, %1319
  %1326 = phi i32* [ %1321, %1319 ], [ %1323, %1322 ]
  %1327 = zext i32 %1170 to i64
  %1328 = icmp ult i32 %1170, 8
  br i1 %1328, label %1414, label %1329

1329:                                             ; preds = %1325
  %1330 = and i64 %1327, 4294967288
  %1331 = add nsw i64 %1330, -8
  %1332 = lshr exact i64 %1331, 3
  %1333 = add nuw nsw i64 %1332, 1
  %1334 = and i64 %1333, 3
  %1335 = icmp ult i64 %1331, 24
  br i1 %1335, label %1381, label %1336

1336:                                             ; preds = %1329
  %1337 = sub nsw i64 %1333, %1334
  br label %1338

1338:                                             ; preds = %1338, %1336
  %1339 = phi i64 [ 0, %1336 ], [ %1378, %1338 ]
  %1340 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1336 ], [ %1376, %1338 ]
  %1341 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1336 ], [ %1377, %1338 ]
  %1342 = phi i64 [ %1337, %1336 ], [ %1379, %1338 ]
  %1343 = getelementptr inbounds i32, i32* %1326, i64 %1339
  %1344 = bitcast i32* %1343 to <4 x i32>*
  %1345 = load <4 x i32>, <4 x i32>* %1344, align 4
  %1346 = getelementptr inbounds i32, i32* %1343, i64 4
  %1347 = bitcast i32* %1346 to <4 x i32>*
  %1348 = load <4 x i32>, <4 x i32>* %1347, align 4
  %1349 = mul nsw <4 x i32> %1345, %1340
  %1350 = mul nsw <4 x i32> %1348, %1341
  %1351 = or i64 %1339, 8
  %1352 = getelementptr inbounds i32, i32* %1326, i64 %1351
  %1353 = bitcast i32* %1352 to <4 x i32>*
  %1354 = load <4 x i32>, <4 x i32>* %1353, align 4
  %1355 = getelementptr inbounds i32, i32* %1352, i64 4
  %1356 = bitcast i32* %1355 to <4 x i32>*
  %1357 = load <4 x i32>, <4 x i32>* %1356, align 4
  %1358 = mul nsw <4 x i32> %1354, %1349
  %1359 = mul nsw <4 x i32> %1357, %1350
  %1360 = or i64 %1339, 16
  %1361 = getelementptr inbounds i32, i32* %1326, i64 %1360
  %1362 = bitcast i32* %1361 to <4 x i32>*
  %1363 = load <4 x i32>, <4 x i32>* %1362, align 4
  %1364 = getelementptr inbounds i32, i32* %1361, i64 4
  %1365 = bitcast i32* %1364 to <4 x i32>*
  %1366 = load <4 x i32>, <4 x i32>* %1365, align 4
  %1367 = mul nsw <4 x i32> %1363, %1358
  %1368 = mul nsw <4 x i32> %1366, %1359
  %1369 = or i64 %1339, 24
  %1370 = getelementptr inbounds i32, i32* %1326, i64 %1369
  %1371 = bitcast i32* %1370 to <4 x i32>*
  %1372 = load <4 x i32>, <4 x i32>* %1371, align 4
  %1373 = getelementptr inbounds i32, i32* %1370, i64 4
  %1374 = bitcast i32* %1373 to <4 x i32>*
  %1375 = load <4 x i32>, <4 x i32>* %1374, align 4
  %1376 = mul nsw <4 x i32> %1372, %1367
  %1377 = mul nsw <4 x i32> %1375, %1368
  %1378 = add i64 %1339, 32
  %1379 = add i64 %1342, -4
  %1380 = icmp eq i64 %1379, 0
  br i1 %1380, label %1381, label %1338, !llvm.loop !345

1381:                                             ; preds = %1338, %1329
  %1382 = phi <4 x i32> [ undef, %1329 ], [ %1376, %1338 ]
  %1383 = phi <4 x i32> [ undef, %1329 ], [ %1377, %1338 ]
  %1384 = phi i64 [ 0, %1329 ], [ %1378, %1338 ]
  %1385 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1329 ], [ %1376, %1338 ]
  %1386 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1329 ], [ %1377, %1338 ]
  %1387 = icmp eq i64 %1334, 0
  br i1 %1387, label %1404, label %1388

1388:                                             ; preds = %1381, %1388
  %1389 = phi i64 [ %1401, %1388 ], [ %1384, %1381 ]
  %1390 = phi <4 x i32> [ %1399, %1388 ], [ %1385, %1381 ]
  %1391 = phi <4 x i32> [ %1400, %1388 ], [ %1386, %1381 ]
  %1392 = phi i64 [ %1402, %1388 ], [ %1334, %1381 ]
  %1393 = getelementptr inbounds i32, i32* %1326, i64 %1389
  %1394 = bitcast i32* %1393 to <4 x i32>*
  %1395 = load <4 x i32>, <4 x i32>* %1394, align 4
  %1396 = getelementptr inbounds i32, i32* %1393, i64 4
  %1397 = bitcast i32* %1396 to <4 x i32>*
  %1398 = load <4 x i32>, <4 x i32>* %1397, align 4
  %1399 = mul nsw <4 x i32> %1395, %1390
  %1400 = mul nsw <4 x i32> %1398, %1391
  %1401 = add i64 %1389, 8
  %1402 = add i64 %1392, -1
  %1403 = icmp eq i64 %1402, 0
  br i1 %1403, label %1404, label %1388, !llvm.loop !346

1404:                                             ; preds = %1388, %1381
  %1405 = phi <4 x i32> [ %1382, %1381 ], [ %1399, %1388 ]
  %1406 = phi <4 x i32> [ %1383, %1381 ], [ %1400, %1388 ]
  %1407 = mul <4 x i32> %1406, %1405
  %1408 = shufflevector <4 x i32> %1407, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1409 = mul <4 x i32> %1407, %1408
  %1410 = shufflevector <4 x i32> %1409, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1411 = mul <4 x i32> %1409, %1410
  %1412 = extractelement <4 x i32> %1411, i32 0
  %1413 = icmp eq i64 %1330, %1327
  br i1 %1413, label %1425, label %1414

1414:                                             ; preds = %1404, %1325
  %1415 = phi i64 [ 0, %1325 ], [ %1330, %1404 ]
  %1416 = phi i32 [ 1, %1325 ], [ %1412, %1404 ]
  br label %1417

1417:                                             ; preds = %1414, %1417
  %1418 = phi i64 [ %1423, %1417 ], [ %1415, %1414 ]
  %1419 = phi i32 [ %1422, %1417 ], [ %1416, %1414 ]
  %1420 = getelementptr inbounds i32, i32* %1326, i64 %1418
  %1421 = load i32, i32* %1420, align 4
  %1422 = mul nsw i32 %1421, %1419
  %1423 = add nuw nsw i64 %1418, 1
  %1424 = icmp eq i64 %1423, %1327
  br i1 %1424, label %1425, label %1417, !llvm.loop !347

1425:                                             ; preds = %1417, %1404, %1322
  %1426 = phi i32 [ 1, %1322 ], [ %1412, %1404 ], [ %1422, %1417 ]
  %1427 = icmp sgt i32 %1205, 5
  %1428 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %24, i64 0, i32 1
  br i1 %1427, label %1429, label %1432

1429:                                             ; preds = %1425
  %1430 = getelementptr inbounds %union.anon, %union.anon* %1428, i64 0, i32 0
  %1431 = load i32*, i32** %1430, align 8
  br label %1435

1432:                                             ; preds = %1425
  %1433 = bitcast %union.anon* %1428 to i32*
  %1434 = icmp sgt i32 %1205, 0
  br i1 %1434, label %1435, label %1535

1435:                                             ; preds = %1432, %1429
  %1436 = phi i32* [ %1431, %1429 ], [ %1433, %1432 ]
  %1437 = zext i32 %1205 to i64
  %1438 = icmp ult i32 %1205, 8
  br i1 %1438, label %1524, label %1439

1439:                                             ; preds = %1435
  %1440 = and i64 %1437, 4294967288
  %1441 = add nsw i64 %1440, -8
  %1442 = lshr exact i64 %1441, 3
  %1443 = add nuw nsw i64 %1442, 1
  %1444 = and i64 %1443, 3
  %1445 = icmp ult i64 %1441, 24
  br i1 %1445, label %1491, label %1446

1446:                                             ; preds = %1439
  %1447 = sub nsw i64 %1443, %1444
  br label %1448

1448:                                             ; preds = %1448, %1446
  %1449 = phi i64 [ 0, %1446 ], [ %1488, %1448 ]
  %1450 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1446 ], [ %1486, %1448 ]
  %1451 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1446 ], [ %1487, %1448 ]
  %1452 = phi i64 [ %1447, %1446 ], [ %1489, %1448 ]
  %1453 = getelementptr inbounds i32, i32* %1436, i64 %1449
  %1454 = bitcast i32* %1453 to <4 x i32>*
  %1455 = load <4 x i32>, <4 x i32>* %1454, align 4
  %1456 = getelementptr inbounds i32, i32* %1453, i64 4
  %1457 = bitcast i32* %1456 to <4 x i32>*
  %1458 = load <4 x i32>, <4 x i32>* %1457, align 4
  %1459 = mul nsw <4 x i32> %1455, %1450
  %1460 = mul nsw <4 x i32> %1458, %1451
  %1461 = or i64 %1449, 8
  %1462 = getelementptr inbounds i32, i32* %1436, i64 %1461
  %1463 = bitcast i32* %1462 to <4 x i32>*
  %1464 = load <4 x i32>, <4 x i32>* %1463, align 4
  %1465 = getelementptr inbounds i32, i32* %1462, i64 4
  %1466 = bitcast i32* %1465 to <4 x i32>*
  %1467 = load <4 x i32>, <4 x i32>* %1466, align 4
  %1468 = mul nsw <4 x i32> %1464, %1459
  %1469 = mul nsw <4 x i32> %1467, %1460
  %1470 = or i64 %1449, 16
  %1471 = getelementptr inbounds i32, i32* %1436, i64 %1470
  %1472 = bitcast i32* %1471 to <4 x i32>*
  %1473 = load <4 x i32>, <4 x i32>* %1472, align 4
  %1474 = getelementptr inbounds i32, i32* %1471, i64 4
  %1475 = bitcast i32* %1474 to <4 x i32>*
  %1476 = load <4 x i32>, <4 x i32>* %1475, align 4
  %1477 = mul nsw <4 x i32> %1473, %1468
  %1478 = mul nsw <4 x i32> %1476, %1469
  %1479 = or i64 %1449, 24
  %1480 = getelementptr inbounds i32, i32* %1436, i64 %1479
  %1481 = bitcast i32* %1480 to <4 x i32>*
  %1482 = load <4 x i32>, <4 x i32>* %1481, align 4
  %1483 = getelementptr inbounds i32, i32* %1480, i64 4
  %1484 = bitcast i32* %1483 to <4 x i32>*
  %1485 = load <4 x i32>, <4 x i32>* %1484, align 4
  %1486 = mul nsw <4 x i32> %1482, %1477
  %1487 = mul nsw <4 x i32> %1485, %1478
  %1488 = add i64 %1449, 32
  %1489 = add i64 %1452, -4
  %1490 = icmp eq i64 %1489, 0
  br i1 %1490, label %1491, label %1448, !llvm.loop !348

1491:                                             ; preds = %1448, %1439
  %1492 = phi <4 x i32> [ undef, %1439 ], [ %1486, %1448 ]
  %1493 = phi <4 x i32> [ undef, %1439 ], [ %1487, %1448 ]
  %1494 = phi i64 [ 0, %1439 ], [ %1488, %1448 ]
  %1495 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1439 ], [ %1486, %1448 ]
  %1496 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1439 ], [ %1487, %1448 ]
  %1497 = icmp eq i64 %1444, 0
  br i1 %1497, label %1514, label %1498

1498:                                             ; preds = %1491, %1498
  %1499 = phi i64 [ %1511, %1498 ], [ %1494, %1491 ]
  %1500 = phi <4 x i32> [ %1509, %1498 ], [ %1495, %1491 ]
  %1501 = phi <4 x i32> [ %1510, %1498 ], [ %1496, %1491 ]
  %1502 = phi i64 [ %1512, %1498 ], [ %1444, %1491 ]
  %1503 = getelementptr inbounds i32, i32* %1436, i64 %1499
  %1504 = bitcast i32* %1503 to <4 x i32>*
  %1505 = load <4 x i32>, <4 x i32>* %1504, align 4
  %1506 = getelementptr inbounds i32, i32* %1503, i64 4
  %1507 = bitcast i32* %1506 to <4 x i32>*
  %1508 = load <4 x i32>, <4 x i32>* %1507, align 4
  %1509 = mul nsw <4 x i32> %1505, %1500
  %1510 = mul nsw <4 x i32> %1508, %1501
  %1511 = add i64 %1499, 8
  %1512 = add i64 %1502, -1
  %1513 = icmp eq i64 %1512, 0
  br i1 %1513, label %1514, label %1498, !llvm.loop !349

1514:                                             ; preds = %1498, %1491
  %1515 = phi <4 x i32> [ %1492, %1491 ], [ %1509, %1498 ]
  %1516 = phi <4 x i32> [ %1493, %1491 ], [ %1510, %1498 ]
  %1517 = mul <4 x i32> %1516, %1515
  %1518 = shufflevector <4 x i32> %1517, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1519 = mul <4 x i32> %1517, %1518
  %1520 = shufflevector <4 x i32> %1519, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1521 = mul <4 x i32> %1519, %1520
  %1522 = extractelement <4 x i32> %1521, i32 0
  %1523 = icmp eq i64 %1440, %1437
  br i1 %1523, label %1535, label %1524

1524:                                             ; preds = %1514, %1435
  %1525 = phi i64 [ 0, %1435 ], [ %1440, %1514 ]
  %1526 = phi i32 [ 1, %1435 ], [ %1522, %1514 ]
  br label %1527

1527:                                             ; preds = %1524, %1527
  %1528 = phi i64 [ %1533, %1527 ], [ %1525, %1524 ]
  %1529 = phi i32 [ %1532, %1527 ], [ %1526, %1524 ]
  %1530 = getelementptr inbounds i32, i32* %1436, i64 %1528
  %1531 = load i32, i32* %1530, align 4
  %1532 = mul nsw i32 %1531, %1529
  %1533 = add nuw nsw i64 %1528, 1
  %1534 = icmp eq i64 %1533, %1437
  br i1 %1534, label %1535, label %1527, !llvm.loop !350

1535:                                             ; preds = %1527, %1514, %1432
  %1536 = phi i32 [ 1, %1432 ], [ %1522, %1514 ], [ %1532, %1527 ]
  %1537 = icmp eq i32 %1316, %1426
  br i1 %1537, label %1539, label %1538

1538:                                             ; preds = %1535
  call void @abort() #13
  unreachable

1539:                                             ; preds = %1535
  %1540 = icmp eq i32 %1316, %1536
  br i1 %1540, label %1542, label %1541

1541:                                             ; preds = %1539
  call void @abort() #13
  unreachable

1542:                                             ; preds = %1539
  call void @_ZN6tflite13optimized_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph(i32 %1316, %"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %10, i8* %1137, i8* %1171, i8* %1206) #12
  br i1 %1427, label %1543, label %1549

1543:                                             ; preds = %1542
  %1544 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %24, i64 0, i32 1, i32 0
  %1545 = load i32*, i32** %1544, align 8
  %1546 = icmp eq i32* %1545, null
  br i1 %1546, label %1549, label %1547

1547:                                             ; preds = %1543
  %1548 = bitcast i32* %1545 to i8*
  call void @_ZdaPv(i8* %1548) #11
  br label %1549

1549:                                             ; preds = %1542, %1543, %1547
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1172) #12
  br i1 %1317, label %1550, label %1556

1550:                                             ; preds = %1549
  %1551 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %23, i64 0, i32 1, i32 0
  %1552 = load i32*, i32** %1551, align 8
  %1553 = icmp eq i32* %1552, null
  br i1 %1553, label %1556, label %1554

1554:                                             ; preds = %1550
  %1555 = bitcast i32* %1552 to i8*
  call void @_ZdaPv(i8* %1555) #11
  br label %1556

1556:                                             ; preds = %1549, %1550, %1554
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1138) #12
  br i1 %1207, label %1557, label %1563

1557:                                             ; preds = %1556
  %1558 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1, i32 0
  %1559 = load i32*, i32** %1558, align 8
  %1560 = icmp eq i32* %1559, null
  br i1 %1560, label %1563, label %1561

1561:                                             ; preds = %1557
  %1562 = bitcast i32* %1559 to i8*
  call void @_ZdaPv(i8* %1562) #11
  br label %1563

1563:                                             ; preds = %1561, %1557, %1556, %1101, %1097, %1093, %855, %851, %850, %395, %391, %387
  %1564 = phi i8* [ %153, %387 ], [ %153, %391 ], [ %153, %395 ], [ %398, %850 ], [ %398, %851 ], [ %398, %855 ], [ %859, %1093 ], [ %859, %1097 ], [ %859, %1101 ], [ %1104, %1556 ], [ %1104, %1557 ], [ %1104, %1561 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1564) #12
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %31) #12
  br label %2147

1565:                                             ; preds = %7
  %1566 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 0
  %1567 = load i32, i32* %1566, align 4
  %1568 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 1
  %1569 = load i32, i32* %1568, align 4
  %1570 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 2
  %1571 = load i32, i32* %1570, align 4
  %1572 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 3
  %1573 = load i32, i32* %1572, align 4
  %1574 = bitcast %"class.tflite::RuntimeShape"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1574) #12
  %1575 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %1575, label %1576, label %1578

1576:                                             ; preds = %1565
  %1577 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %25, i64 0, i32 0
  store i32 0, i32* %1577, align 8, !alias.scope !351
  br label %1606

1578:                                             ; preds = %1565
  %1579 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %1580 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1579, align 8, !noalias !351
  %1581 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1580, i64 0, i32 0
  %1582 = load i32, i32* %1581, align 4, !noalias !351
  %1583 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1580, i64 0, i32 1, i64 0
  %1584 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %25, i64 0, i32 0
  store i32 %1582, i32* %1584, align 8, !alias.scope !351
  %1585 = icmp sgt i32 %1582, 5
  br i1 %1585, label %1586, label %1593

1586:                                             ; preds = %1578
  %1587 = sext i32 %1582 to i64
  %1588 = shl nsw i64 %1587, 2
  %1589 = tail call i8* @_Znam(i64 %1588) #11, !noalias !351
  %1590 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %25, i64 0, i32 1, i32 0
  %1591 = bitcast i32** %1590 to i8**
  store i8* %1589, i8** %1591, align 8, !alias.scope !351
  %1592 = bitcast i8* %1589 to i32*
  br label %1598

1593:                                             ; preds = %1578
  %1594 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %25, i64 0, i32 1
  %1595 = bitcast %union.anon* %1594 to i32*
  %1596 = sext i32 %1582 to i64
  %1597 = shl nsw i64 %1596, 2
  br label %1598

1598:                                             ; preds = %1593, %1586
  %1599 = phi i64 [ %1588, %1586 ], [ %1597, %1593 ]
  %1600 = phi i32* [ %1592, %1586 ], [ %1595, %1593 ]
  %1601 = bitcast i32* %1600 to i8*
  %1602 = bitcast i32* %1583 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1601, i8* align 4 %1602, i64 %1599, i1 false) #12
  %1603 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %1604 = bitcast %union.TfLitePtrUnion* %1603 to i16**
  %1605 = load i16*, i16** %1604, align 8
  br label %1606

1606:                                             ; preds = %1576, %1598
  %1607 = phi i32 [ %1582, %1598 ], [ 0, %1576 ]
  %1608 = phi i16* [ %1605, %1598 ], [ null, %1576 ]
  %1609 = bitcast %"class.tflite::RuntimeShape"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1609) #12
  %1610 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %1610, label %1611, label %1613

1611:                                             ; preds = %1606
  %1612 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %26, i64 0, i32 0
  store i32 0, i32* %1612, align 8, !alias.scope !354
  br label %1641

1613:                                             ; preds = %1606
  %1614 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %1615 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1614, align 8, !noalias !354
  %1616 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1615, i64 0, i32 0
  %1617 = load i32, i32* %1616, align 4, !noalias !354
  %1618 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1615, i64 0, i32 1, i64 0
  %1619 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %26, i64 0, i32 0
  store i32 %1617, i32* %1619, align 8, !alias.scope !354
  %1620 = icmp sgt i32 %1617, 5
  br i1 %1620, label %1621, label %1628

1621:                                             ; preds = %1613
  %1622 = sext i32 %1617 to i64
  %1623 = shl nsw i64 %1622, 2
  %1624 = tail call i8* @_Znam(i64 %1623) #11, !noalias !354
  %1625 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %26, i64 0, i32 1, i32 0
  %1626 = bitcast i32** %1625 to i8**
  store i8* %1624, i8** %1626, align 8, !alias.scope !354
  %1627 = bitcast i8* %1624 to i32*
  br label %1633

1628:                                             ; preds = %1613
  %1629 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %26, i64 0, i32 1
  %1630 = bitcast %union.anon* %1629 to i32*
  %1631 = sext i32 %1617 to i64
  %1632 = shl nsw i64 %1631, 2
  br label %1633

1633:                                             ; preds = %1628, %1621
  %1634 = phi i64 [ %1623, %1621 ], [ %1632, %1628 ]
  %1635 = phi i32* [ %1627, %1621 ], [ %1630, %1628 ]
  %1636 = bitcast i32* %1635 to i8*
  %1637 = bitcast i32* %1618 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1636, i8* align 4 %1637, i64 %1634, i1 false) #12
  %1638 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %1639 = bitcast %union.TfLitePtrUnion* %1638 to i16**
  %1640 = load i16*, i16** %1639, align 8
  br label %1641

1641:                                             ; preds = %1611, %1633
  %1642 = phi i32 [ %1617, %1633 ], [ 0, %1611 ]
  %1643 = phi i16* [ %1640, %1633 ], [ null, %1611 ]
  %1644 = bitcast %"class.tflite::RuntimeShape"* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1644) #12
  %1645 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %1645, label %1646, label %1648

1646:                                             ; preds = %1641
  %1647 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %27, i64 0, i32 0
  store i32 0, i32* %1647, align 8, !alias.scope !357
  br label %1677

1648:                                             ; preds = %1641
  %1649 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %1650 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1649, align 8, !noalias !357
  %1651 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1650, i64 0, i32 0
  %1652 = load i32, i32* %1651, align 4, !noalias !357
  %1653 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1650, i64 0, i32 1, i64 0
  %1654 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %27, i64 0, i32 0
  store i32 %1652, i32* %1654, align 8, !alias.scope !357
  %1655 = icmp sgt i32 %1652, 5
  br i1 %1655, label %1656, label %1663

1656:                                             ; preds = %1648
  %1657 = sext i32 %1652 to i64
  %1658 = shl nsw i64 %1657, 2
  %1659 = tail call i8* @_Znam(i64 %1658) #11, !noalias !357
  %1660 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %27, i64 0, i32 1, i32 0
  %1661 = bitcast i32** %1660 to i8**
  store i8* %1659, i8** %1661, align 8, !alias.scope !357
  %1662 = bitcast i8* %1659 to i32*
  br label %1668

1663:                                             ; preds = %1648
  %1664 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %27, i64 0, i32 1
  %1665 = bitcast %union.anon* %1664 to i32*
  %1666 = sext i32 %1652 to i64
  %1667 = shl nsw i64 %1666, 2
  br label %1668

1668:                                             ; preds = %1663, %1656
  %1669 = phi i64 [ %1658, %1656 ], [ %1667, %1663 ]
  %1670 = phi i32* [ %1662, %1656 ], [ %1665, %1663 ]
  %1671 = bitcast i32* %1670 to i8*
  %1672 = bitcast i32* %1653 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1671, i8* align 4 %1672, i64 %1669, i1 false) #12
  %1673 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %1674 = bitcast %union.TfLitePtrUnion* %1673 to i16**
  %1675 = load i16*, i16** %1674, align 8
  %1676 = bitcast i16* %1675 to i8*
  br label %1677

1677:                                             ; preds = %1646, %1668
  %1678 = phi i32 [ %1652, %1668 ], [ 0, %1646 ]
  %1679 = phi i8* [ %1676, %1668 ], [ null, %1646 ]
  %1680 = phi i16* [ %1675, %1668 ], [ null, %1646 ]
  %1681 = icmp sgt i32 %1607, 5
  %1682 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %25, i64 0, i32 1
  br i1 %1681, label %1683, label %1686

1683:                                             ; preds = %1677
  %1684 = getelementptr inbounds %union.anon, %union.anon* %1682, i64 0, i32 0
  %1685 = load i32*, i32** %1684, align 8
  br label %1689

1686:                                             ; preds = %1677
  %1687 = bitcast %union.anon* %1682 to i32*
  %1688 = icmp sgt i32 %1607, 0
  br i1 %1688, label %1689, label %1789

1689:                                             ; preds = %1686, %1683
  %1690 = phi i32* [ %1685, %1683 ], [ %1687, %1686 ]
  %1691 = zext i32 %1607 to i64
  %1692 = icmp ult i32 %1607, 8
  br i1 %1692, label %1778, label %1693

1693:                                             ; preds = %1689
  %1694 = and i64 %1691, 4294967288
  %1695 = add nsw i64 %1694, -8
  %1696 = lshr exact i64 %1695, 3
  %1697 = add nuw nsw i64 %1696, 1
  %1698 = and i64 %1697, 3
  %1699 = icmp ult i64 %1695, 24
  br i1 %1699, label %1745, label %1700

1700:                                             ; preds = %1693
  %1701 = sub nsw i64 %1697, %1698
  br label %1702

1702:                                             ; preds = %1702, %1700
  %1703 = phi i64 [ 0, %1700 ], [ %1742, %1702 ]
  %1704 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1700 ], [ %1740, %1702 ]
  %1705 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1700 ], [ %1741, %1702 ]
  %1706 = phi i64 [ %1701, %1700 ], [ %1743, %1702 ]
  %1707 = getelementptr inbounds i32, i32* %1690, i64 %1703
  %1708 = bitcast i32* %1707 to <4 x i32>*
  %1709 = load <4 x i32>, <4 x i32>* %1708, align 4
  %1710 = getelementptr inbounds i32, i32* %1707, i64 4
  %1711 = bitcast i32* %1710 to <4 x i32>*
  %1712 = load <4 x i32>, <4 x i32>* %1711, align 4
  %1713 = mul nsw <4 x i32> %1709, %1704
  %1714 = mul nsw <4 x i32> %1712, %1705
  %1715 = or i64 %1703, 8
  %1716 = getelementptr inbounds i32, i32* %1690, i64 %1715
  %1717 = bitcast i32* %1716 to <4 x i32>*
  %1718 = load <4 x i32>, <4 x i32>* %1717, align 4
  %1719 = getelementptr inbounds i32, i32* %1716, i64 4
  %1720 = bitcast i32* %1719 to <4 x i32>*
  %1721 = load <4 x i32>, <4 x i32>* %1720, align 4
  %1722 = mul nsw <4 x i32> %1718, %1713
  %1723 = mul nsw <4 x i32> %1721, %1714
  %1724 = or i64 %1703, 16
  %1725 = getelementptr inbounds i32, i32* %1690, i64 %1724
  %1726 = bitcast i32* %1725 to <4 x i32>*
  %1727 = load <4 x i32>, <4 x i32>* %1726, align 4
  %1728 = getelementptr inbounds i32, i32* %1725, i64 4
  %1729 = bitcast i32* %1728 to <4 x i32>*
  %1730 = load <4 x i32>, <4 x i32>* %1729, align 4
  %1731 = mul nsw <4 x i32> %1727, %1722
  %1732 = mul nsw <4 x i32> %1730, %1723
  %1733 = or i64 %1703, 24
  %1734 = getelementptr inbounds i32, i32* %1690, i64 %1733
  %1735 = bitcast i32* %1734 to <4 x i32>*
  %1736 = load <4 x i32>, <4 x i32>* %1735, align 4
  %1737 = getelementptr inbounds i32, i32* %1734, i64 4
  %1738 = bitcast i32* %1737 to <4 x i32>*
  %1739 = load <4 x i32>, <4 x i32>* %1738, align 4
  %1740 = mul nsw <4 x i32> %1736, %1731
  %1741 = mul nsw <4 x i32> %1739, %1732
  %1742 = add i64 %1703, 32
  %1743 = add i64 %1706, -4
  %1744 = icmp eq i64 %1743, 0
  br i1 %1744, label %1745, label %1702, !llvm.loop !360

1745:                                             ; preds = %1702, %1693
  %1746 = phi <4 x i32> [ undef, %1693 ], [ %1740, %1702 ]
  %1747 = phi <4 x i32> [ undef, %1693 ], [ %1741, %1702 ]
  %1748 = phi i64 [ 0, %1693 ], [ %1742, %1702 ]
  %1749 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1693 ], [ %1740, %1702 ]
  %1750 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1693 ], [ %1741, %1702 ]
  %1751 = icmp eq i64 %1698, 0
  br i1 %1751, label %1768, label %1752

1752:                                             ; preds = %1745, %1752
  %1753 = phi i64 [ %1765, %1752 ], [ %1748, %1745 ]
  %1754 = phi <4 x i32> [ %1763, %1752 ], [ %1749, %1745 ]
  %1755 = phi <4 x i32> [ %1764, %1752 ], [ %1750, %1745 ]
  %1756 = phi i64 [ %1766, %1752 ], [ %1698, %1745 ]
  %1757 = getelementptr inbounds i32, i32* %1690, i64 %1753
  %1758 = bitcast i32* %1757 to <4 x i32>*
  %1759 = load <4 x i32>, <4 x i32>* %1758, align 4
  %1760 = getelementptr inbounds i32, i32* %1757, i64 4
  %1761 = bitcast i32* %1760 to <4 x i32>*
  %1762 = load <4 x i32>, <4 x i32>* %1761, align 4
  %1763 = mul nsw <4 x i32> %1759, %1754
  %1764 = mul nsw <4 x i32> %1762, %1755
  %1765 = add i64 %1753, 8
  %1766 = add i64 %1756, -1
  %1767 = icmp eq i64 %1766, 0
  br i1 %1767, label %1768, label %1752, !llvm.loop !361

1768:                                             ; preds = %1752, %1745
  %1769 = phi <4 x i32> [ %1746, %1745 ], [ %1763, %1752 ]
  %1770 = phi <4 x i32> [ %1747, %1745 ], [ %1764, %1752 ]
  %1771 = mul <4 x i32> %1770, %1769
  %1772 = shufflevector <4 x i32> %1771, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1773 = mul <4 x i32> %1771, %1772
  %1774 = shufflevector <4 x i32> %1773, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1775 = mul <4 x i32> %1773, %1774
  %1776 = extractelement <4 x i32> %1775, i32 0
  %1777 = icmp eq i64 %1694, %1691
  br i1 %1777, label %1789, label %1778

1778:                                             ; preds = %1768, %1689
  %1779 = phi i64 [ 0, %1689 ], [ %1694, %1768 ]
  %1780 = phi i32 [ 1, %1689 ], [ %1776, %1768 ]
  br label %1781

1781:                                             ; preds = %1778, %1781
  %1782 = phi i64 [ %1787, %1781 ], [ %1779, %1778 ]
  %1783 = phi i32 [ %1786, %1781 ], [ %1780, %1778 ]
  %1784 = getelementptr inbounds i32, i32* %1690, i64 %1782
  %1785 = load i32, i32* %1784, align 4
  %1786 = mul nsw i32 %1785, %1783
  %1787 = add nuw nsw i64 %1782, 1
  %1788 = icmp eq i64 %1787, %1691
  br i1 %1788, label %1789, label %1781, !llvm.loop !362

1789:                                             ; preds = %1781, %1768, %1686
  %1790 = phi i32 [ 1, %1686 ], [ %1776, %1768 ], [ %1786, %1781 ]
  %1791 = icmp sgt i32 %1642, 5
  %1792 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %26, i64 0, i32 1
  br i1 %1791, label %1793, label %1796

1793:                                             ; preds = %1789
  %1794 = getelementptr inbounds %union.anon, %union.anon* %1792, i64 0, i32 0
  %1795 = load i32*, i32** %1794, align 8
  br label %1799

1796:                                             ; preds = %1789
  %1797 = bitcast %union.anon* %1792 to i32*
  %1798 = icmp sgt i32 %1642, 0
  br i1 %1798, label %1799, label %1899

1799:                                             ; preds = %1796, %1793
  %1800 = phi i32* [ %1795, %1793 ], [ %1797, %1796 ]
  %1801 = zext i32 %1642 to i64
  %1802 = icmp ult i32 %1642, 8
  br i1 %1802, label %1888, label %1803

1803:                                             ; preds = %1799
  %1804 = and i64 %1801, 4294967288
  %1805 = add nsw i64 %1804, -8
  %1806 = lshr exact i64 %1805, 3
  %1807 = add nuw nsw i64 %1806, 1
  %1808 = and i64 %1807, 3
  %1809 = icmp ult i64 %1805, 24
  br i1 %1809, label %1855, label %1810

1810:                                             ; preds = %1803
  %1811 = sub nsw i64 %1807, %1808
  br label %1812

1812:                                             ; preds = %1812, %1810
  %1813 = phi i64 [ 0, %1810 ], [ %1852, %1812 ]
  %1814 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1810 ], [ %1850, %1812 ]
  %1815 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1810 ], [ %1851, %1812 ]
  %1816 = phi i64 [ %1811, %1810 ], [ %1853, %1812 ]
  %1817 = getelementptr inbounds i32, i32* %1800, i64 %1813
  %1818 = bitcast i32* %1817 to <4 x i32>*
  %1819 = load <4 x i32>, <4 x i32>* %1818, align 4
  %1820 = getelementptr inbounds i32, i32* %1817, i64 4
  %1821 = bitcast i32* %1820 to <4 x i32>*
  %1822 = load <4 x i32>, <4 x i32>* %1821, align 4
  %1823 = mul nsw <4 x i32> %1819, %1814
  %1824 = mul nsw <4 x i32> %1822, %1815
  %1825 = or i64 %1813, 8
  %1826 = getelementptr inbounds i32, i32* %1800, i64 %1825
  %1827 = bitcast i32* %1826 to <4 x i32>*
  %1828 = load <4 x i32>, <4 x i32>* %1827, align 4
  %1829 = getelementptr inbounds i32, i32* %1826, i64 4
  %1830 = bitcast i32* %1829 to <4 x i32>*
  %1831 = load <4 x i32>, <4 x i32>* %1830, align 4
  %1832 = mul nsw <4 x i32> %1828, %1823
  %1833 = mul nsw <4 x i32> %1831, %1824
  %1834 = or i64 %1813, 16
  %1835 = getelementptr inbounds i32, i32* %1800, i64 %1834
  %1836 = bitcast i32* %1835 to <4 x i32>*
  %1837 = load <4 x i32>, <4 x i32>* %1836, align 4
  %1838 = getelementptr inbounds i32, i32* %1835, i64 4
  %1839 = bitcast i32* %1838 to <4 x i32>*
  %1840 = load <4 x i32>, <4 x i32>* %1839, align 4
  %1841 = mul nsw <4 x i32> %1837, %1832
  %1842 = mul nsw <4 x i32> %1840, %1833
  %1843 = or i64 %1813, 24
  %1844 = getelementptr inbounds i32, i32* %1800, i64 %1843
  %1845 = bitcast i32* %1844 to <4 x i32>*
  %1846 = load <4 x i32>, <4 x i32>* %1845, align 4
  %1847 = getelementptr inbounds i32, i32* %1844, i64 4
  %1848 = bitcast i32* %1847 to <4 x i32>*
  %1849 = load <4 x i32>, <4 x i32>* %1848, align 4
  %1850 = mul nsw <4 x i32> %1846, %1841
  %1851 = mul nsw <4 x i32> %1849, %1842
  %1852 = add i64 %1813, 32
  %1853 = add i64 %1816, -4
  %1854 = icmp eq i64 %1853, 0
  br i1 %1854, label %1855, label %1812, !llvm.loop !363

1855:                                             ; preds = %1812, %1803
  %1856 = phi <4 x i32> [ undef, %1803 ], [ %1850, %1812 ]
  %1857 = phi <4 x i32> [ undef, %1803 ], [ %1851, %1812 ]
  %1858 = phi i64 [ 0, %1803 ], [ %1852, %1812 ]
  %1859 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1803 ], [ %1850, %1812 ]
  %1860 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1803 ], [ %1851, %1812 ]
  %1861 = icmp eq i64 %1808, 0
  br i1 %1861, label %1878, label %1862

1862:                                             ; preds = %1855, %1862
  %1863 = phi i64 [ %1875, %1862 ], [ %1858, %1855 ]
  %1864 = phi <4 x i32> [ %1873, %1862 ], [ %1859, %1855 ]
  %1865 = phi <4 x i32> [ %1874, %1862 ], [ %1860, %1855 ]
  %1866 = phi i64 [ %1876, %1862 ], [ %1808, %1855 ]
  %1867 = getelementptr inbounds i32, i32* %1800, i64 %1863
  %1868 = bitcast i32* %1867 to <4 x i32>*
  %1869 = load <4 x i32>, <4 x i32>* %1868, align 4
  %1870 = getelementptr inbounds i32, i32* %1867, i64 4
  %1871 = bitcast i32* %1870 to <4 x i32>*
  %1872 = load <4 x i32>, <4 x i32>* %1871, align 4
  %1873 = mul nsw <4 x i32> %1869, %1864
  %1874 = mul nsw <4 x i32> %1872, %1865
  %1875 = add i64 %1863, 8
  %1876 = add i64 %1866, -1
  %1877 = icmp eq i64 %1876, 0
  br i1 %1877, label %1878, label %1862, !llvm.loop !364

1878:                                             ; preds = %1862, %1855
  %1879 = phi <4 x i32> [ %1856, %1855 ], [ %1873, %1862 ]
  %1880 = phi <4 x i32> [ %1857, %1855 ], [ %1874, %1862 ]
  %1881 = mul <4 x i32> %1880, %1879
  %1882 = shufflevector <4 x i32> %1881, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1883 = mul <4 x i32> %1881, %1882
  %1884 = shufflevector <4 x i32> %1883, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1885 = mul <4 x i32> %1883, %1884
  %1886 = extractelement <4 x i32> %1885, i32 0
  %1887 = icmp eq i64 %1804, %1801
  br i1 %1887, label %1899, label %1888

1888:                                             ; preds = %1878, %1799
  %1889 = phi i64 [ 0, %1799 ], [ %1804, %1878 ]
  %1890 = phi i32 [ 1, %1799 ], [ %1886, %1878 ]
  br label %1891

1891:                                             ; preds = %1888, %1891
  %1892 = phi i64 [ %1897, %1891 ], [ %1889, %1888 ]
  %1893 = phi i32 [ %1896, %1891 ], [ %1890, %1888 ]
  %1894 = getelementptr inbounds i32, i32* %1800, i64 %1892
  %1895 = load i32, i32* %1894, align 4
  %1896 = mul nsw i32 %1895, %1893
  %1897 = add nuw nsw i64 %1892, 1
  %1898 = icmp eq i64 %1897, %1801
  br i1 %1898, label %1899, label %1891, !llvm.loop !365

1899:                                             ; preds = %1891, %1878, %1796
  %1900 = phi i32 [ 1, %1796 ], [ %1886, %1878 ], [ %1896, %1891 ]
  %1901 = icmp sgt i32 %1678, 5
  %1902 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %27, i64 0, i32 1
  br i1 %1901, label %1903, label %1906

1903:                                             ; preds = %1899
  %1904 = getelementptr inbounds %union.anon, %union.anon* %1902, i64 0, i32 0
  %1905 = load i32*, i32** %1904, align 8
  br label %1909

1906:                                             ; preds = %1899
  %1907 = bitcast %union.anon* %1902 to i32*
  %1908 = icmp sgt i32 %1678, 0
  br i1 %1908, label %1909, label %2009

1909:                                             ; preds = %1906, %1903
  %1910 = phi i32* [ %1905, %1903 ], [ %1907, %1906 ]
  %1911 = zext i32 %1678 to i64
  %1912 = icmp ult i32 %1678, 8
  br i1 %1912, label %1998, label %1913

1913:                                             ; preds = %1909
  %1914 = and i64 %1911, 4294967288
  %1915 = add nsw i64 %1914, -8
  %1916 = lshr exact i64 %1915, 3
  %1917 = add nuw nsw i64 %1916, 1
  %1918 = and i64 %1917, 3
  %1919 = icmp ult i64 %1915, 24
  br i1 %1919, label %1965, label %1920

1920:                                             ; preds = %1913
  %1921 = sub nsw i64 %1917, %1918
  br label %1922

1922:                                             ; preds = %1922, %1920
  %1923 = phi i64 [ 0, %1920 ], [ %1962, %1922 ]
  %1924 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1920 ], [ %1960, %1922 ]
  %1925 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1920 ], [ %1961, %1922 ]
  %1926 = phi i64 [ %1921, %1920 ], [ %1963, %1922 ]
  %1927 = getelementptr inbounds i32, i32* %1910, i64 %1923
  %1928 = bitcast i32* %1927 to <4 x i32>*
  %1929 = load <4 x i32>, <4 x i32>* %1928, align 4
  %1930 = getelementptr inbounds i32, i32* %1927, i64 4
  %1931 = bitcast i32* %1930 to <4 x i32>*
  %1932 = load <4 x i32>, <4 x i32>* %1931, align 4
  %1933 = mul nsw <4 x i32> %1929, %1924
  %1934 = mul nsw <4 x i32> %1932, %1925
  %1935 = or i64 %1923, 8
  %1936 = getelementptr inbounds i32, i32* %1910, i64 %1935
  %1937 = bitcast i32* %1936 to <4 x i32>*
  %1938 = load <4 x i32>, <4 x i32>* %1937, align 4
  %1939 = getelementptr inbounds i32, i32* %1936, i64 4
  %1940 = bitcast i32* %1939 to <4 x i32>*
  %1941 = load <4 x i32>, <4 x i32>* %1940, align 4
  %1942 = mul nsw <4 x i32> %1938, %1933
  %1943 = mul nsw <4 x i32> %1941, %1934
  %1944 = or i64 %1923, 16
  %1945 = getelementptr inbounds i32, i32* %1910, i64 %1944
  %1946 = bitcast i32* %1945 to <4 x i32>*
  %1947 = load <4 x i32>, <4 x i32>* %1946, align 4
  %1948 = getelementptr inbounds i32, i32* %1945, i64 4
  %1949 = bitcast i32* %1948 to <4 x i32>*
  %1950 = load <4 x i32>, <4 x i32>* %1949, align 4
  %1951 = mul nsw <4 x i32> %1947, %1942
  %1952 = mul nsw <4 x i32> %1950, %1943
  %1953 = or i64 %1923, 24
  %1954 = getelementptr inbounds i32, i32* %1910, i64 %1953
  %1955 = bitcast i32* %1954 to <4 x i32>*
  %1956 = load <4 x i32>, <4 x i32>* %1955, align 4
  %1957 = getelementptr inbounds i32, i32* %1954, i64 4
  %1958 = bitcast i32* %1957 to <4 x i32>*
  %1959 = load <4 x i32>, <4 x i32>* %1958, align 4
  %1960 = mul nsw <4 x i32> %1956, %1951
  %1961 = mul nsw <4 x i32> %1959, %1952
  %1962 = add i64 %1923, 32
  %1963 = add i64 %1926, -4
  %1964 = icmp eq i64 %1963, 0
  br i1 %1964, label %1965, label %1922, !llvm.loop !366

1965:                                             ; preds = %1922, %1913
  %1966 = phi <4 x i32> [ undef, %1913 ], [ %1960, %1922 ]
  %1967 = phi <4 x i32> [ undef, %1913 ], [ %1961, %1922 ]
  %1968 = phi i64 [ 0, %1913 ], [ %1962, %1922 ]
  %1969 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1913 ], [ %1960, %1922 ]
  %1970 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1913 ], [ %1961, %1922 ]
  %1971 = icmp eq i64 %1918, 0
  br i1 %1971, label %1988, label %1972

1972:                                             ; preds = %1965, %1972
  %1973 = phi i64 [ %1985, %1972 ], [ %1968, %1965 ]
  %1974 = phi <4 x i32> [ %1983, %1972 ], [ %1969, %1965 ]
  %1975 = phi <4 x i32> [ %1984, %1972 ], [ %1970, %1965 ]
  %1976 = phi i64 [ %1986, %1972 ], [ %1918, %1965 ]
  %1977 = getelementptr inbounds i32, i32* %1910, i64 %1973
  %1978 = bitcast i32* %1977 to <4 x i32>*
  %1979 = load <4 x i32>, <4 x i32>* %1978, align 4
  %1980 = getelementptr inbounds i32, i32* %1977, i64 4
  %1981 = bitcast i32* %1980 to <4 x i32>*
  %1982 = load <4 x i32>, <4 x i32>* %1981, align 4
  %1983 = mul nsw <4 x i32> %1979, %1974
  %1984 = mul nsw <4 x i32> %1982, %1975
  %1985 = add i64 %1973, 8
  %1986 = add i64 %1976, -1
  %1987 = icmp eq i64 %1986, 0
  br i1 %1987, label %1988, label %1972, !llvm.loop !367

1988:                                             ; preds = %1972, %1965
  %1989 = phi <4 x i32> [ %1966, %1965 ], [ %1983, %1972 ]
  %1990 = phi <4 x i32> [ %1967, %1965 ], [ %1984, %1972 ]
  %1991 = mul <4 x i32> %1990, %1989
  %1992 = shufflevector <4 x i32> %1991, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1993 = mul <4 x i32> %1991, %1992
  %1994 = shufflevector <4 x i32> %1993, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1995 = mul <4 x i32> %1993, %1994
  %1996 = extractelement <4 x i32> %1995, i32 0
  %1997 = icmp eq i64 %1914, %1911
  br i1 %1997, label %2009, label %1998

1998:                                             ; preds = %1988, %1909
  %1999 = phi i64 [ 0, %1909 ], [ %1914, %1988 ]
  %2000 = phi i32 [ 1, %1909 ], [ %1996, %1988 ]
  br label %2001

2001:                                             ; preds = %1998, %2001
  %2002 = phi i64 [ %2007, %2001 ], [ %1999, %1998 ]
  %2003 = phi i32 [ %2006, %2001 ], [ %2000, %1998 ]
  %2004 = getelementptr inbounds i32, i32* %1910, i64 %2002
  %2005 = load i32, i32* %2004, align 4
  %2006 = mul nsw i32 %2005, %2003
  %2007 = add nuw nsw i64 %2002, 1
  %2008 = icmp eq i64 %2007, %1911
  br i1 %2008, label %2009, label %2001, !llvm.loop !368

2009:                                             ; preds = %2001, %1988, %1906
  %2010 = phi i32 [ 1, %1906 ], [ %1996, %1988 ], [ %2006, %2001 ]
  %2011 = icmp eq i32 %1790, %1900
  br i1 %2011, label %2013, label %2012

2012:                                             ; preds = %2009
  tail call void @abort() #13
  unreachable

2013:                                             ; preds = %2009
  %2014 = icmp eq i32 %1790, %2010
  br i1 %2014, label %2016, label %2015

2015:                                             ; preds = %2013
  tail call void @abort() #13
  unreachable

2016:                                             ; preds = %2013
  %2017 = trunc i32 %1571 to i16
  %2018 = trunc i32 %1573 to i16
  %2019 = icmp eq i32 %1567, 0
  %2020 = select i1 %2019, i16* %1608, i16* %1643
  %2021 = select i1 %2019, i16* %1643, i16* %1608
  %2022 = select i1 %2019, i32 %1569, i32 %1567
  %2023 = sub nsw i32 0, %2022
  %2024 = icmp sgt i32 %1790, 0
  br i1 %2024, label %2025, label %2125

2025:                                             ; preds = %2016
  %2026 = zext i32 %2023 to i64
  %2027 = shl nsw i64 -1, %2026
  %2028 = trunc i64 %2027 to i16
  %2029 = xor i16 %2028, -1
  %2030 = ashr i16 %2029, 1
  %2031 = zext i32 %1790 to i64
  %2032 = icmp ult i32 %1790, 8
  br i1 %2032, label %2093, label %2033

2033:                                             ; preds = %2025
  %2034 = getelementptr i16, i16* %1680, i64 %2031
  %2035 = getelementptr i16, i16* %2020, i64 %2031
  %2036 = bitcast i16* %2035 to i8*
  %2037 = getelementptr i16, i16* %2021, i64 %2031
  %2038 = bitcast i16* %2037 to i8*
  %2039 = icmp ult i8* %1679, %2036
  %2040 = icmp ult i16* %2020, %2034
  %2041 = and i1 %2039, %2040
  %2042 = icmp ult i8* %1679, %2038
  %2043 = icmp ult i16* %2021, %2034
  %2044 = and i1 %2042, %2043
  %2045 = or i1 %2041, %2044
  br i1 %2045, label %2093, label %2046

2046:                                             ; preds = %2033
  %2047 = and i64 %2031, 4294967288
  %2048 = insertelement <8 x i16> undef, i16 %2029, i32 0
  %2049 = shufflevector <8 x i16> %2048, <8 x i16> undef, <8 x i32> zeroinitializer
  %2050 = insertelement <8 x i16> undef, i16 %2030, i32 0
  %2051 = shufflevector <8 x i16> %2050, <8 x i16> undef, <8 x i32> zeroinitializer
  %2052 = insertelement <8 x i32> undef, i32 %2023, i32 0
  %2053 = shufflevector <8 x i32> %2052, <8 x i32> undef, <8 x i32> zeroinitializer
  %2054 = insertelement <8 x i16> undef, i16 %2017, i32 0
  %2055 = shufflevector <8 x i16> %2054, <8 x i16> undef, <8 x i32> zeroinitializer
  %2056 = insertelement <8 x i16> undef, i16 %2018, i32 0
  %2057 = shufflevector <8 x i16> %2056, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %2058

2058:                                             ; preds = %2058, %2046
  %2059 = phi i64 [ 0, %2046 ], [ %2089, %2058 ]
  %2060 = getelementptr inbounds i16, i16* %2020, i64 %2059
  %2061 = bitcast i16* %2060 to <8 x i16>*
  %2062 = load <8 x i16>, <8 x i16>* %2061, align 2, !alias.scope !369
  %2063 = getelementptr inbounds i16, i16* %2021, i64 %2059
  %2064 = bitcast i16* %2063 to <8 x i16>*
  %2065 = load <8 x i16>, <8 x i16>* %2064, align 2, !alias.scope !372
  %2066 = and <8 x i16> %2065, %2049
  %2067 = lshr <8 x i16> %2065, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %2068 = add nsw <8 x i16> %2067, %2051
  %2069 = sext <8 x i16> %2065 to <8 x i32>
  %2070 = ashr <8 x i32> %2069, %2053
  %2071 = icmp sgt <8 x i16> %2066, %2068
  %2072 = zext <8 x i1> %2071 to <8 x i32>
  %2073 = add nsw <8 x i32> %2070, %2072
  %2074 = shl <8 x i32> %2073, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %2075 = ashr exact <8 x i32> %2074, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %2076 = sext <8 x i16> %2062 to <8 x i32>
  %2077 = add nsw <8 x i32> %2075, %2076
  %2078 = icmp sgt <8 x i32> %2077, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %2079 = select <8 x i1> %2078, <8 x i32> %2077, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %2080 = icmp slt <8 x i32> %2079, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %2081 = select <8 x i1> %2080, <8 x i32> %2079, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %2082 = trunc <8 x i32> %2081 to <8 x i16>
  %2083 = icmp slt <8 x i16> %2055, %2082
  %2084 = select <8 x i1> %2083, <8 x i16> %2082, <8 x i16> %2055
  %2085 = icmp slt <8 x i16> %2084, %2057
  %2086 = select <8 x i1> %2085, <8 x i16> %2084, <8 x i16> %2057
  %2087 = getelementptr inbounds i16, i16* %1680, i64 %2059
  %2088 = bitcast i16* %2087 to <8 x i16>*
  store <8 x i16> %2086, <8 x i16>* %2088, align 2, !alias.scope !374, !noalias !376
  %2089 = add i64 %2059, 8
  %2090 = icmp eq i64 %2089, %2047
  br i1 %2090, label %2091, label %2058, !llvm.loop !377

2091:                                             ; preds = %2058
  %2092 = icmp eq i64 %2047, %2031
  br i1 %2092, label %2125, label %2093

2093:                                             ; preds = %2091, %2033, %2025
  %2094 = phi i64 [ 0, %2033 ], [ 0, %2025 ], [ %2047, %2091 ]
  br label %2095

2095:                                             ; preds = %2093, %2095
  %2096 = phi i64 [ %2123, %2095 ], [ %2094, %2093 ]
  %2097 = getelementptr inbounds i16, i16* %2020, i64 %2096
  %2098 = load i16, i16* %2097, align 2
  %2099 = getelementptr inbounds i16, i16* %2021, i64 %2096
  %2100 = load i16, i16* %2099, align 2
  %2101 = and i16 %2100, %2029
  %2102 = lshr i16 %2100, 15
  %2103 = add nsw i16 %2102, %2030
  %2104 = sext i16 %2100 to i32
  %2105 = ashr i32 %2104, %2023
  %2106 = icmp sgt i16 %2101, %2103
  %2107 = zext i1 %2106 to i32
  %2108 = add nsw i32 %2105, %2107
  %2109 = shl i32 %2108, 16
  %2110 = ashr exact i32 %2109, 16
  %2111 = sext i16 %2098 to i32
  %2112 = add nsw i32 %2110, %2111
  %2113 = icmp sgt i32 %2112, -32768
  %2114 = select i1 %2113, i32 %2112, i32 -32768
  %2115 = icmp slt i32 %2114, 32767
  %2116 = select i1 %2115, i32 %2114, i32 32767
  %2117 = trunc i32 %2116 to i16
  %2118 = icmp slt i16 %2017, %2117
  %2119 = select i1 %2118, i16 %2117, i16 %2017
  %2120 = icmp slt i16 %2119, %2018
  %2121 = select i1 %2120, i16 %2119, i16 %2018
  %2122 = getelementptr inbounds i16, i16* %1680, i64 %2096
  store i16 %2121, i16* %2122, align 2
  %2123 = add nuw nsw i64 %2096, 1
  %2124 = icmp eq i64 %2123, %2031
  br i1 %2124, label %2125, label %2095, !llvm.loop !378

2125:                                             ; preds = %2095, %2091, %2016
  br i1 %1901, label %2126, label %2132

2126:                                             ; preds = %2125
  %2127 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %27, i64 0, i32 1, i32 0
  %2128 = load i32*, i32** %2127, align 8
  %2129 = icmp eq i32* %2128, null
  br i1 %2129, label %2132, label %2130

2130:                                             ; preds = %2126
  %2131 = bitcast i32* %2128 to i8*
  tail call void @_ZdaPv(i8* %2131) #11
  br label %2132

2132:                                             ; preds = %2125, %2126, %2130
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1644) #12
  br i1 %1791, label %2133, label %2139

2133:                                             ; preds = %2132
  %2134 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %26, i64 0, i32 1, i32 0
  %2135 = load i32*, i32** %2134, align 8
  %2136 = icmp eq i32* %2135, null
  br i1 %2136, label %2139, label %2137

2137:                                             ; preds = %2133
  %2138 = bitcast i32* %2135 to i8*
  tail call void @_ZdaPv(i8* %2138) #11
  br label %2139

2139:                                             ; preds = %2132, %2133, %2137
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1609) #12
  br i1 %1681, label %2140, label %2146

2140:                                             ; preds = %2139
  %2141 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %25, i64 0, i32 1, i32 0
  %2142 = load i32*, i32** %2141, align 8
  %2143 = icmp eq i32* %2142, null
  br i1 %2143, label %2146, label %2144

2144:                                             ; preds = %2140
  %2145 = bitcast i32* %2142 to i8*
  tail call void @_ZdaPv(i8* %2145) #11
  br label %2146

2146:                                             ; preds = %2139, %2140, %2144
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1574) #12
  br label %2147

2147:                                             ; preds = %7, %2146, %1563
  ret i32 0
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13optimized_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKiS6_S8_S6_Pi(%"struct.tflite::ArithmeticParams"* dereferenceable(80), %"class.tflite::RuntimeShape"* dereferenceable(32), i32*, %"class.tflite::RuntimeShape"* dereferenceable(32), i32*, %"class.tflite::RuntimeShape"* dereferenceable(32), i32*) local_unnamed_addr #9 comdat {
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 8, !noalias !379
  %10 = icmp sgt i32 %9, 5
  %11 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %1, i64 0, i32 1
  %12 = icmp sgt i32 %9, 0
  %13 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %14 = load i32, i32* %13, align 8, !noalias !382
  %15 = icmp sgt i32 %14, 5
  %16 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %17 = icmp sgt i32 %14, 0
  %18 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 0
  %19 = load i32, i32* %18, align 8, !noalias !385
  %20 = icmp sgt i32 %19, 5
  %21 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %5, i64 0, i32 1
  br i1 %20, label %22, label %25

22:                                               ; preds = %7
  %23 = getelementptr inbounds %union.anon, %union.anon* %21, i64 0, i32 0
  %24 = load i32*, i32** %23, align 8, !noalias !385
  br label %28

25:                                               ; preds = %7
  %26 = bitcast %union.anon* %21 to i32*
  %27 = icmp sgt i32 %19, 0
  br i1 %27, label %28, label %131

28:                                               ; preds = %25, %22
  %29 = phi i32* [ %24, %22 ], [ %26, %25 ]
  %30 = zext i32 %19 to i64
  %31 = icmp ult i32 %19, 8
  br i1 %31, label %117, label %32

32:                                               ; preds = %28
  %33 = and i64 %30, 4294967288
  %34 = add nsw i64 %33, -8
  %35 = lshr exact i64 %34, 3
  %36 = add nuw nsw i64 %35, 1
  %37 = and i64 %36, 3
  %38 = icmp ult i64 %34, 24
  br i1 %38, label %84, label %39

39:                                               ; preds = %32
  %40 = sub nsw i64 %36, %37
  br label %41

41:                                               ; preds = %41, %39
  %42 = phi i64 [ 0, %39 ], [ %81, %41 ]
  %43 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %39 ], [ %79, %41 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %39 ], [ %80, %41 ]
  %45 = phi i64 [ %40, %39 ], [ %82, %41 ]
  %46 = getelementptr inbounds i32, i32* %29, i64 %42
  %47 = bitcast i32* %46 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 4, !noalias !385
  %49 = getelementptr inbounds i32, i32* %46, i64 4
  %50 = bitcast i32* %49 to <4 x i32>*
  %51 = load <4 x i32>, <4 x i32>* %50, align 4, !noalias !385
  %52 = mul nsw <4 x i32> %48, %43
  %53 = mul nsw <4 x i32> %51, %44
  %54 = or i64 %42, 8
  %55 = getelementptr inbounds i32, i32* %29, i64 %54
  %56 = bitcast i32* %55 to <4 x i32>*
  %57 = load <4 x i32>, <4 x i32>* %56, align 4, !noalias !385
  %58 = getelementptr inbounds i32, i32* %55, i64 4
  %59 = bitcast i32* %58 to <4 x i32>*
  %60 = load <4 x i32>, <4 x i32>* %59, align 4, !noalias !385
  %61 = mul nsw <4 x i32> %57, %52
  %62 = mul nsw <4 x i32> %60, %53
  %63 = or i64 %42, 16
  %64 = getelementptr inbounds i32, i32* %29, i64 %63
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 4, !noalias !385
  %67 = getelementptr inbounds i32, i32* %64, i64 4
  %68 = bitcast i32* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4, !noalias !385
  %70 = mul nsw <4 x i32> %66, %61
  %71 = mul nsw <4 x i32> %69, %62
  %72 = or i64 %42, 24
  %73 = getelementptr inbounds i32, i32* %29, i64 %72
  %74 = bitcast i32* %73 to <4 x i32>*
  %75 = load <4 x i32>, <4 x i32>* %74, align 4, !noalias !385
  %76 = getelementptr inbounds i32, i32* %73, i64 4
  %77 = bitcast i32* %76 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 4, !noalias !385
  %79 = mul nsw <4 x i32> %75, %70
  %80 = mul nsw <4 x i32> %78, %71
  %81 = add i64 %42, 32
  %82 = add i64 %45, -4
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %84, label %41, !llvm.loop !388

84:                                               ; preds = %41, %32
  %85 = phi <4 x i32> [ undef, %32 ], [ %79, %41 ]
  %86 = phi <4 x i32> [ undef, %32 ], [ %80, %41 ]
  %87 = phi i64 [ 0, %32 ], [ %81, %41 ]
  %88 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %32 ], [ %79, %41 ]
  %89 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %32 ], [ %80, %41 ]
  %90 = icmp eq i64 %37, 0
  br i1 %90, label %107, label %91

91:                                               ; preds = %84, %91
  %92 = phi i64 [ %104, %91 ], [ %87, %84 ]
  %93 = phi <4 x i32> [ %102, %91 ], [ %88, %84 ]
  %94 = phi <4 x i32> [ %103, %91 ], [ %89, %84 ]
  %95 = phi i64 [ %105, %91 ], [ %37, %84 ]
  %96 = getelementptr inbounds i32, i32* %29, i64 %92
  %97 = bitcast i32* %96 to <4 x i32>*
  %98 = load <4 x i32>, <4 x i32>* %97, align 4, !noalias !385
  %99 = getelementptr inbounds i32, i32* %96, i64 4
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4, !noalias !385
  %102 = mul nsw <4 x i32> %98, %93
  %103 = mul nsw <4 x i32> %101, %94
  %104 = add i64 %92, 8
  %105 = add i64 %95, -1
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %91, !llvm.loop !389

107:                                              ; preds = %91, %84
  %108 = phi <4 x i32> [ %85, %84 ], [ %102, %91 ]
  %109 = phi <4 x i32> [ %86, %84 ], [ %103, %91 ]
  %110 = mul <4 x i32> %109, %108
  %111 = shufflevector <4 x i32> %110, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %112 = mul <4 x i32> %110, %111
  %113 = shufflevector <4 x i32> %112, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %114 = mul <4 x i32> %112, %113
  %115 = extractelement <4 x i32> %114, i32 0
  %116 = icmp eq i64 %33, %30
  br i1 %116, label %128, label %117

117:                                              ; preds = %107, %28
  %118 = phi i64 [ 0, %28 ], [ %33, %107 ]
  %119 = phi i32 [ 1, %28 ], [ %115, %107 ]
  br label %120

120:                                              ; preds = %117, %120
  %121 = phi i64 [ %126, %120 ], [ %118, %117 ]
  %122 = phi i32 [ %125, %120 ], [ %119, %117 ]
  %123 = getelementptr inbounds i32, i32* %29, i64 %121
  %124 = load i32, i32* %123, align 4, !noalias !385
  %125 = mul nsw i32 %124, %122
  %126 = add nuw nsw i64 %121, 1
  %127 = icmp eq i64 %126, %30
  br i1 %127, label %128, label %120, !llvm.loop !390

128:                                              ; preds = %120, %107
  %129 = phi i32 [ %115, %107 ], [ %125, %120 ]
  %130 = sext i32 %129 to i64
  br label %131

131:                                              ; preds = %25, %128
  %132 = phi i64 [ 1, %25 ], [ %130, %128 ]
  %133 = ptrtoint i32* %6 to i64
  %134 = icmp eq i32 %9, %14
  br i1 %134, label %135, label %476

135:                                              ; preds = %131
  %136 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %137 = load i32*, i32** %136, align 8
  %138 = bitcast %union.anon* %11 to i32*
  %139 = select i1 %10, i32* %137, i32* %138
  %140 = bitcast i32* %139 to i8*
  %141 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0
  %142 = load i32*, i32** %141, align 8
  %143 = bitcast %union.anon* %16 to i32*
  %144 = select i1 %10, i32* %142, i32* %143
  %145 = bitcast i32* %144 to i8*
  %146 = sext i32 %9 to i64
  %147 = shl nsw i64 %146, 2
  %148 = tail call i32 @bcmp(i8* %140, i8* %145, i64 %147) #12
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %150, label %476

150:                                              ; preds = %135
  %151 = and i64 %133, 3
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %159

153:                                              ; preds = %150
  %154 = lshr i64 %133, 2
  %155 = sub nsw i64 0, %154
  %156 = and i64 %155, 3
  %157 = icmp slt i64 %156, %132
  %158 = select i1 %157, i64 %156, i64 %132
  br label %159

159:                                              ; preds = %153, %150
  %160 = phi i64 [ %158, %153 ], [ %132, %150 ]
  %161 = sub nsw i64 %132, %160
  %162 = sdiv i64 %161, 4
  %163 = shl nsw i64 %162, 2
  %164 = add nsw i64 %163, %160
  %165 = icmp sgt i64 %160, 0
  br i1 %165, label %166, label %307

166:                                              ; preds = %159
  %167 = icmp ult i64 %160, 8
  br i1 %167, label %255, label %168

168:                                              ; preds = %166
  %169 = getelementptr i32, i32* %6, i64 %160
  %170 = getelementptr i32, i32* %2, i64 %160
  %171 = getelementptr i32, i32* %4, i64 %160
  %172 = icmp ugt i32* %170, %6
  %173 = icmp ugt i32* %169, %2
  %174 = and i1 %172, %173
  %175 = icmp ugt i32* %171, %6
  %176 = icmp ugt i32* %169, %4
  %177 = and i1 %175, %176
  %178 = or i1 %174, %177
  br i1 %178, label %255, label %179

179:                                              ; preds = %168
  %180 = and i64 %160, -8
  %181 = add nsw i64 %180, -8
  %182 = lshr exact i64 %181, 3
  %183 = add nuw nsw i64 %182, 1
  %184 = and i64 %183, 1
  %185 = icmp eq i64 %181, 0
  br i1 %185, label %231, label %186

186:                                              ; preds = %179
  %187 = sub nuw nsw i64 %183, %184
  br label %188

188:                                              ; preds = %188, %186
  %189 = phi i64 [ 0, %186 ], [ %228, %188 ]
  %190 = phi i64 [ %187, %186 ], [ %229, %188 ]
  %191 = getelementptr inbounds i32, i32* %6, i64 %189
  %192 = getelementptr inbounds i32, i32* %2, i64 %189
  %193 = bitcast i32* %192 to <4 x i32>*
  %194 = load <4 x i32>, <4 x i32>* %193, align 4, !alias.scope !391
  %195 = getelementptr inbounds i32, i32* %192, i64 4
  %196 = bitcast i32* %195 to <4 x i32>*
  %197 = load <4 x i32>, <4 x i32>* %196, align 4, !alias.scope !391
  %198 = getelementptr inbounds i32, i32* %4, i64 %189
  %199 = bitcast i32* %198 to <4 x i32>*
  %200 = load <4 x i32>, <4 x i32>* %199, align 4, !alias.scope !394
  %201 = getelementptr inbounds i32, i32* %198, i64 4
  %202 = bitcast i32* %201 to <4 x i32>*
  %203 = load <4 x i32>, <4 x i32>* %202, align 4, !alias.scope !394
  %204 = add nsw <4 x i32> %200, %194
  %205 = add nsw <4 x i32> %203, %197
  %206 = bitcast i32* %191 to <4 x i32>*
  store <4 x i32> %204, <4 x i32>* %206, align 4, !alias.scope !396, !noalias !398
  %207 = getelementptr inbounds i32, i32* %191, i64 4
  %208 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %205, <4 x i32>* %208, align 4, !alias.scope !396, !noalias !398
  %209 = or i64 %189, 8
  %210 = getelementptr inbounds i32, i32* %6, i64 %209
  %211 = getelementptr inbounds i32, i32* %2, i64 %209
  %212 = bitcast i32* %211 to <4 x i32>*
  %213 = load <4 x i32>, <4 x i32>* %212, align 4, !alias.scope !391
  %214 = getelementptr inbounds i32, i32* %211, i64 4
  %215 = bitcast i32* %214 to <4 x i32>*
  %216 = load <4 x i32>, <4 x i32>* %215, align 4, !alias.scope !391
  %217 = getelementptr inbounds i32, i32* %4, i64 %209
  %218 = bitcast i32* %217 to <4 x i32>*
  %219 = load <4 x i32>, <4 x i32>* %218, align 4, !alias.scope !394
  %220 = getelementptr inbounds i32, i32* %217, i64 4
  %221 = bitcast i32* %220 to <4 x i32>*
  %222 = load <4 x i32>, <4 x i32>* %221, align 4, !alias.scope !394
  %223 = add nsw <4 x i32> %219, %213
  %224 = add nsw <4 x i32> %222, %216
  %225 = bitcast i32* %210 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %225, align 4, !alias.scope !396, !noalias !398
  %226 = getelementptr inbounds i32, i32* %210, i64 4
  %227 = bitcast i32* %226 to <4 x i32>*
  store <4 x i32> %224, <4 x i32>* %227, align 4, !alias.scope !396, !noalias !398
  %228 = add i64 %189, 16
  %229 = add i64 %190, -2
  %230 = icmp eq i64 %229, 0
  br i1 %230, label %231, label %188, !llvm.loop !399

231:                                              ; preds = %188, %179
  %232 = phi i64 [ 0, %179 ], [ %228, %188 ]
  %233 = icmp eq i64 %184, 0
  br i1 %233, label %253, label %234

234:                                              ; preds = %231
  %235 = getelementptr inbounds i32, i32* %6, i64 %232
  %236 = getelementptr inbounds i32, i32* %2, i64 %232
  %237 = bitcast i32* %236 to <4 x i32>*
  %238 = load <4 x i32>, <4 x i32>* %237, align 4, !alias.scope !391
  %239 = getelementptr inbounds i32, i32* %236, i64 4
  %240 = bitcast i32* %239 to <4 x i32>*
  %241 = load <4 x i32>, <4 x i32>* %240, align 4, !alias.scope !391
  %242 = getelementptr inbounds i32, i32* %4, i64 %232
  %243 = bitcast i32* %242 to <4 x i32>*
  %244 = load <4 x i32>, <4 x i32>* %243, align 4, !alias.scope !394
  %245 = getelementptr inbounds i32, i32* %242, i64 4
  %246 = bitcast i32* %245 to <4 x i32>*
  %247 = load <4 x i32>, <4 x i32>* %246, align 4, !alias.scope !394
  %248 = add nsw <4 x i32> %244, %238
  %249 = add nsw <4 x i32> %247, %241
  %250 = bitcast i32* %235 to <4 x i32>*
  store <4 x i32> %248, <4 x i32>* %250, align 4, !alias.scope !396, !noalias !398
  %251 = getelementptr inbounds i32, i32* %235, i64 4
  %252 = bitcast i32* %251 to <4 x i32>*
  store <4 x i32> %249, <4 x i32>* %252, align 4, !alias.scope !396, !noalias !398
  br label %253

253:                                              ; preds = %231, %234
  %254 = icmp eq i64 %160, %180
  br i1 %254, label %307, label %255

255:                                              ; preds = %253, %168, %166
  %256 = phi i64 [ 0, %168 ], [ 0, %166 ], [ %180, %253 ]
  %257 = xor i64 %256, -1
  %258 = add i64 %160, %257
  %259 = and i64 %160, 3
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %273, label %261

261:                                              ; preds = %255, %261
  %262 = phi i64 [ %270, %261 ], [ %256, %255 ]
  %263 = phi i64 [ %271, %261 ], [ %259, %255 ]
  %264 = getelementptr inbounds i32, i32* %6, i64 %262
  %265 = getelementptr inbounds i32, i32* %2, i64 %262
  %266 = load i32, i32* %265, align 4
  %267 = getelementptr inbounds i32, i32* %4, i64 %262
  %268 = load i32, i32* %267, align 4
  %269 = add nsw i32 %268, %266
  store i32 %269, i32* %264, align 4
  %270 = add nuw nsw i64 %262, 1
  %271 = add i64 %263, -1
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %273, label %261, !llvm.loop !400

273:                                              ; preds = %261, %255
  %274 = phi i64 [ %256, %255 ], [ %270, %261 ]
  %275 = icmp ult i64 %258, 3
  br i1 %275, label %307, label %276

276:                                              ; preds = %273, %276
  %277 = phi i64 [ %305, %276 ], [ %274, %273 ]
  %278 = getelementptr inbounds i32, i32* %6, i64 %277
  %279 = getelementptr inbounds i32, i32* %2, i64 %277
  %280 = load i32, i32* %279, align 4
  %281 = getelementptr inbounds i32, i32* %4, i64 %277
  %282 = load i32, i32* %281, align 4
  %283 = add nsw i32 %282, %280
  store i32 %283, i32* %278, align 4
  %284 = add nuw nsw i64 %277, 1
  %285 = getelementptr inbounds i32, i32* %6, i64 %284
  %286 = getelementptr inbounds i32, i32* %2, i64 %284
  %287 = load i32, i32* %286, align 4
  %288 = getelementptr inbounds i32, i32* %4, i64 %284
  %289 = load i32, i32* %288, align 4
  %290 = add nsw i32 %289, %287
  store i32 %290, i32* %285, align 4
  %291 = add nuw nsw i64 %277, 2
  %292 = getelementptr inbounds i32, i32* %6, i64 %291
  %293 = getelementptr inbounds i32, i32* %2, i64 %291
  %294 = load i32, i32* %293, align 4
  %295 = getelementptr inbounds i32, i32* %4, i64 %291
  %296 = load i32, i32* %295, align 4
  %297 = add nsw i32 %296, %294
  store i32 %297, i32* %292, align 4
  %298 = add nuw nsw i64 %277, 3
  %299 = getelementptr inbounds i32, i32* %6, i64 %298
  %300 = getelementptr inbounds i32, i32* %2, i64 %298
  %301 = load i32, i32* %300, align 4
  %302 = getelementptr inbounds i32, i32* %4, i64 %298
  %303 = load i32, i32* %302, align 4
  %304 = add nsw i32 %303, %301
  store i32 %304, i32* %299, align 4
  %305 = add nuw nsw i64 %277, 4
  %306 = icmp eq i64 %305, %160
  br i1 %306, label %307, label %276, !llvm.loop !401

307:                                              ; preds = %273, %276, %253, %159
  %308 = icmp sgt i64 %161, 3
  br i1 %308, label %463, label %309

309:                                              ; preds = %463, %307
  %310 = icmp slt i64 %164, %132
  br i1 %310, label %311, label %1231

311:                                              ; preds = %309
  %312 = sub nsw i64 %132, %160
  %313 = sub i64 %312, %163
  %314 = icmp ult i64 %313, 8
  br i1 %314, label %410, label %315

315:                                              ; preds = %311
  %316 = add i64 %160, %163
  %317 = getelementptr i32, i32* %6, i64 %316
  %318 = getelementptr i32, i32* %6, i64 %132
  %319 = getelementptr i32, i32* %2, i64 %316
  %320 = getelementptr i32, i32* %2, i64 %132
  %321 = getelementptr i32, i32* %4, i64 %316
  %322 = getelementptr i32, i32* %4, i64 %132
  %323 = icmp ult i32* %317, %320
  %324 = icmp ult i32* %319, %318
  %325 = and i1 %323, %324
  %326 = icmp ult i32* %317, %322
  %327 = icmp ult i32* %321, %318
  %328 = and i1 %326, %327
  %329 = or i1 %325, %328
  br i1 %329, label %410, label %330

330:                                              ; preds = %315
  %331 = and i64 %313, -8
  %332 = add i64 %164, %331
  %333 = add i64 %331, -8
  %334 = lshr exact i64 %333, 3
  %335 = add nuw nsw i64 %334, 1
  %336 = and i64 %335, 1
  %337 = icmp eq i64 %333, 0
  br i1 %337, label %385, label %338

338:                                              ; preds = %330
  %339 = sub nuw nsw i64 %335, %336
  br label %340

340:                                              ; preds = %340, %338
  %341 = phi i64 [ 0, %338 ], [ %382, %340 ]
  %342 = phi i64 [ %339, %338 ], [ %383, %340 ]
  %343 = add i64 %164, %341
  %344 = getelementptr inbounds i32, i32* %6, i64 %343
  %345 = getelementptr inbounds i32, i32* %2, i64 %343
  %346 = bitcast i32* %345 to <4 x i32>*
  %347 = load <4 x i32>, <4 x i32>* %346, align 4, !alias.scope !402
  %348 = getelementptr inbounds i32, i32* %345, i64 4
  %349 = bitcast i32* %348 to <4 x i32>*
  %350 = load <4 x i32>, <4 x i32>* %349, align 4, !alias.scope !402
  %351 = getelementptr inbounds i32, i32* %4, i64 %343
  %352 = bitcast i32* %351 to <4 x i32>*
  %353 = load <4 x i32>, <4 x i32>* %352, align 4, !alias.scope !405
  %354 = getelementptr inbounds i32, i32* %351, i64 4
  %355 = bitcast i32* %354 to <4 x i32>*
  %356 = load <4 x i32>, <4 x i32>* %355, align 4, !alias.scope !405
  %357 = add nsw <4 x i32> %353, %347
  %358 = add nsw <4 x i32> %356, %350
  %359 = bitcast i32* %344 to <4 x i32>*
  store <4 x i32> %357, <4 x i32>* %359, align 4, !alias.scope !407, !noalias !409
  %360 = getelementptr inbounds i32, i32* %344, i64 4
  %361 = bitcast i32* %360 to <4 x i32>*
  store <4 x i32> %358, <4 x i32>* %361, align 4, !alias.scope !407, !noalias !409
  %362 = or i64 %341, 8
  %363 = add i64 %164, %362
  %364 = getelementptr inbounds i32, i32* %6, i64 %363
  %365 = getelementptr inbounds i32, i32* %2, i64 %363
  %366 = bitcast i32* %365 to <4 x i32>*
  %367 = load <4 x i32>, <4 x i32>* %366, align 4, !alias.scope !402
  %368 = getelementptr inbounds i32, i32* %365, i64 4
  %369 = bitcast i32* %368 to <4 x i32>*
  %370 = load <4 x i32>, <4 x i32>* %369, align 4, !alias.scope !402
  %371 = getelementptr inbounds i32, i32* %4, i64 %363
  %372 = bitcast i32* %371 to <4 x i32>*
  %373 = load <4 x i32>, <4 x i32>* %372, align 4, !alias.scope !405
  %374 = getelementptr inbounds i32, i32* %371, i64 4
  %375 = bitcast i32* %374 to <4 x i32>*
  %376 = load <4 x i32>, <4 x i32>* %375, align 4, !alias.scope !405
  %377 = add nsw <4 x i32> %373, %367
  %378 = add nsw <4 x i32> %376, %370
  %379 = bitcast i32* %364 to <4 x i32>*
  store <4 x i32> %377, <4 x i32>* %379, align 4, !alias.scope !407, !noalias !409
  %380 = getelementptr inbounds i32, i32* %364, i64 4
  %381 = bitcast i32* %380 to <4 x i32>*
  store <4 x i32> %378, <4 x i32>* %381, align 4, !alias.scope !407, !noalias !409
  %382 = add i64 %341, 16
  %383 = add i64 %342, -2
  %384 = icmp eq i64 %383, 0
  br i1 %384, label %385, label %340, !llvm.loop !410

385:                                              ; preds = %340, %330
  %386 = phi i64 [ 0, %330 ], [ %382, %340 ]
  %387 = icmp eq i64 %336, 0
  br i1 %387, label %408, label %388

388:                                              ; preds = %385
  %389 = add i64 %164, %386
  %390 = getelementptr inbounds i32, i32* %6, i64 %389
  %391 = getelementptr inbounds i32, i32* %2, i64 %389
  %392 = bitcast i32* %391 to <4 x i32>*
  %393 = load <4 x i32>, <4 x i32>* %392, align 4, !alias.scope !402
  %394 = getelementptr inbounds i32, i32* %391, i64 4
  %395 = bitcast i32* %394 to <4 x i32>*
  %396 = load <4 x i32>, <4 x i32>* %395, align 4, !alias.scope !402
  %397 = getelementptr inbounds i32, i32* %4, i64 %389
  %398 = bitcast i32* %397 to <4 x i32>*
  %399 = load <4 x i32>, <4 x i32>* %398, align 4, !alias.scope !405
  %400 = getelementptr inbounds i32, i32* %397, i64 4
  %401 = bitcast i32* %400 to <4 x i32>*
  %402 = load <4 x i32>, <4 x i32>* %401, align 4, !alias.scope !405
  %403 = add nsw <4 x i32> %399, %393
  %404 = add nsw <4 x i32> %402, %396
  %405 = bitcast i32* %390 to <4 x i32>*
  store <4 x i32> %403, <4 x i32>* %405, align 4, !alias.scope !407, !noalias !409
  %406 = getelementptr inbounds i32, i32* %390, i64 4
  %407 = bitcast i32* %406 to <4 x i32>*
  store <4 x i32> %404, <4 x i32>* %407, align 4, !alias.scope !407, !noalias !409
  br label %408

408:                                              ; preds = %385, %388
  %409 = icmp eq i64 %313, %331
  br i1 %409, label %1231, label %410

410:                                              ; preds = %408, %315, %311
  %411 = phi i64 [ %164, %315 ], [ %164, %311 ], [ %332, %408 ]
  %412 = sub i64 %132, %411
  %413 = xor i64 %411, -1
  %414 = add i64 %132, %413
  %415 = and i64 %412, 3
  %416 = icmp eq i64 %415, 0
  br i1 %416, label %429, label %417

417:                                              ; preds = %410, %417
  %418 = phi i64 [ %426, %417 ], [ %411, %410 ]
  %419 = phi i64 [ %427, %417 ], [ %415, %410 ]
  %420 = getelementptr inbounds i32, i32* %6, i64 %418
  %421 = getelementptr inbounds i32, i32* %2, i64 %418
  %422 = load i32, i32* %421, align 4
  %423 = getelementptr inbounds i32, i32* %4, i64 %418
  %424 = load i32, i32* %423, align 4
  %425 = add nsw i32 %424, %422
  store i32 %425, i32* %420, align 4
  %426 = add nsw i64 %418, 1
  %427 = add i64 %419, -1
  %428 = icmp eq i64 %427, 0
  br i1 %428, label %429, label %417, !llvm.loop !411

429:                                              ; preds = %417, %410
  %430 = phi i64 [ %411, %410 ], [ %426, %417 ]
  %431 = icmp ult i64 %414, 3
  br i1 %431, label %1231, label %432

432:                                              ; preds = %429, %432
  %433 = phi i64 [ %461, %432 ], [ %430, %429 ]
  %434 = getelementptr inbounds i32, i32* %6, i64 %433
  %435 = getelementptr inbounds i32, i32* %2, i64 %433
  %436 = load i32, i32* %435, align 4
  %437 = getelementptr inbounds i32, i32* %4, i64 %433
  %438 = load i32, i32* %437, align 4
  %439 = add nsw i32 %438, %436
  store i32 %439, i32* %434, align 4
  %440 = add nsw i64 %433, 1
  %441 = getelementptr inbounds i32, i32* %6, i64 %440
  %442 = getelementptr inbounds i32, i32* %2, i64 %440
  %443 = load i32, i32* %442, align 4
  %444 = getelementptr inbounds i32, i32* %4, i64 %440
  %445 = load i32, i32* %444, align 4
  %446 = add nsw i32 %445, %443
  store i32 %446, i32* %441, align 4
  %447 = add nsw i64 %433, 2
  %448 = getelementptr inbounds i32, i32* %6, i64 %447
  %449 = getelementptr inbounds i32, i32* %2, i64 %447
  %450 = load i32, i32* %449, align 4
  %451 = getelementptr inbounds i32, i32* %4, i64 %447
  %452 = load i32, i32* %451, align 4
  %453 = add nsw i32 %452, %450
  store i32 %453, i32* %448, align 4
  %454 = add nsw i64 %433, 3
  %455 = getelementptr inbounds i32, i32* %6, i64 %454
  %456 = getelementptr inbounds i32, i32* %2, i64 %454
  %457 = load i32, i32* %456, align 4
  %458 = getelementptr inbounds i32, i32* %4, i64 %454
  %459 = load i32, i32* %458, align 4
  %460 = add nsw i32 %459, %457
  store i32 %460, i32* %455, align 4
  %461 = add nsw i64 %433, 4
  %462 = icmp eq i64 %461, %132
  br i1 %462, label %1231, label %432, !llvm.loop !412

463:                                              ; preds = %307, %463
  %464 = phi i64 [ %474, %463 ], [ %160, %307 ]
  %465 = getelementptr inbounds i32, i32* %6, i64 %464
  %466 = getelementptr inbounds i32, i32* %2, i64 %464
  %467 = bitcast i32* %466 to <4 x i32>*
  %468 = load <4 x i32>, <4 x i32>* %467, align 1
  %469 = getelementptr inbounds i32, i32* %4, i64 %464
  %470 = bitcast i32* %469 to <4 x i32>*
  %471 = load <4 x i32>, <4 x i32>* %470, align 1
  %472 = add <4 x i32> %471, %468
  %473 = bitcast i32* %465 to <4 x i32>*
  store <4 x i32> %472, <4 x i32>* %473, align 16
  %474 = add nsw i64 %464, 4
  %475 = icmp slt i64 %474, %164
  br i1 %475, label %463, label %309

476:                                              ; preds = %131, %135
  br i1 %15, label %477, label %480

477:                                              ; preds = %476
  %478 = getelementptr inbounds %union.anon, %union.anon* %16, i64 0, i32 0
  %479 = load i32*, i32** %478, align 8
  br label %482

480:                                              ; preds = %476
  %481 = bitcast %union.anon* %16 to i32*
  br i1 %17, label %482, label %585

482:                                              ; preds = %480, %477
  %483 = phi i32* [ %479, %477 ], [ %481, %480 ]
  %484 = zext i32 %14 to i64
  %485 = icmp ult i32 %14, 8
  br i1 %485, label %571, label %486

486:                                              ; preds = %482
  %487 = and i64 %484, 4294967288
  %488 = add nsw i64 %487, -8
  %489 = lshr exact i64 %488, 3
  %490 = add nuw nsw i64 %489, 1
  %491 = and i64 %490, 3
  %492 = icmp ult i64 %488, 24
  br i1 %492, label %538, label %493

493:                                              ; preds = %486
  %494 = sub nsw i64 %490, %491
  br label %495

495:                                              ; preds = %495, %493
  %496 = phi i64 [ 0, %493 ], [ %535, %495 ]
  %497 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %493 ], [ %533, %495 ]
  %498 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %493 ], [ %534, %495 ]
  %499 = phi i64 [ %494, %493 ], [ %536, %495 ]
  %500 = getelementptr inbounds i32, i32* %483, i64 %496
  %501 = bitcast i32* %500 to <4 x i32>*
  %502 = load <4 x i32>, <4 x i32>* %501, align 4
  %503 = getelementptr inbounds i32, i32* %500, i64 4
  %504 = bitcast i32* %503 to <4 x i32>*
  %505 = load <4 x i32>, <4 x i32>* %504, align 4
  %506 = mul nsw <4 x i32> %502, %497
  %507 = mul nsw <4 x i32> %505, %498
  %508 = or i64 %496, 8
  %509 = getelementptr inbounds i32, i32* %483, i64 %508
  %510 = bitcast i32* %509 to <4 x i32>*
  %511 = load <4 x i32>, <4 x i32>* %510, align 4
  %512 = getelementptr inbounds i32, i32* %509, i64 4
  %513 = bitcast i32* %512 to <4 x i32>*
  %514 = load <4 x i32>, <4 x i32>* %513, align 4
  %515 = mul nsw <4 x i32> %511, %506
  %516 = mul nsw <4 x i32> %514, %507
  %517 = or i64 %496, 16
  %518 = getelementptr inbounds i32, i32* %483, i64 %517
  %519 = bitcast i32* %518 to <4 x i32>*
  %520 = load <4 x i32>, <4 x i32>* %519, align 4
  %521 = getelementptr inbounds i32, i32* %518, i64 4
  %522 = bitcast i32* %521 to <4 x i32>*
  %523 = load <4 x i32>, <4 x i32>* %522, align 4
  %524 = mul nsw <4 x i32> %520, %515
  %525 = mul nsw <4 x i32> %523, %516
  %526 = or i64 %496, 24
  %527 = getelementptr inbounds i32, i32* %483, i64 %526
  %528 = bitcast i32* %527 to <4 x i32>*
  %529 = load <4 x i32>, <4 x i32>* %528, align 4
  %530 = getelementptr inbounds i32, i32* %527, i64 4
  %531 = bitcast i32* %530 to <4 x i32>*
  %532 = load <4 x i32>, <4 x i32>* %531, align 4
  %533 = mul nsw <4 x i32> %529, %524
  %534 = mul nsw <4 x i32> %532, %525
  %535 = add i64 %496, 32
  %536 = add i64 %499, -4
  %537 = icmp eq i64 %536, 0
  br i1 %537, label %538, label %495, !llvm.loop !413

538:                                              ; preds = %495, %486
  %539 = phi <4 x i32> [ undef, %486 ], [ %533, %495 ]
  %540 = phi <4 x i32> [ undef, %486 ], [ %534, %495 ]
  %541 = phi i64 [ 0, %486 ], [ %535, %495 ]
  %542 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %486 ], [ %533, %495 ]
  %543 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %486 ], [ %534, %495 ]
  %544 = icmp eq i64 %491, 0
  br i1 %544, label %561, label %545

545:                                              ; preds = %538, %545
  %546 = phi i64 [ %558, %545 ], [ %541, %538 ]
  %547 = phi <4 x i32> [ %556, %545 ], [ %542, %538 ]
  %548 = phi <4 x i32> [ %557, %545 ], [ %543, %538 ]
  %549 = phi i64 [ %559, %545 ], [ %491, %538 ]
  %550 = getelementptr inbounds i32, i32* %483, i64 %546
  %551 = bitcast i32* %550 to <4 x i32>*
  %552 = load <4 x i32>, <4 x i32>* %551, align 4
  %553 = getelementptr inbounds i32, i32* %550, i64 4
  %554 = bitcast i32* %553 to <4 x i32>*
  %555 = load <4 x i32>, <4 x i32>* %554, align 4
  %556 = mul nsw <4 x i32> %552, %547
  %557 = mul nsw <4 x i32> %555, %548
  %558 = add i64 %546, 8
  %559 = add i64 %549, -1
  %560 = icmp eq i64 %559, 0
  br i1 %560, label %561, label %545, !llvm.loop !414

561:                                              ; preds = %545, %538
  %562 = phi <4 x i32> [ %539, %538 ], [ %556, %545 ]
  %563 = phi <4 x i32> [ %540, %538 ], [ %557, %545 ]
  %564 = mul <4 x i32> %563, %562
  %565 = shufflevector <4 x i32> %564, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %566 = mul <4 x i32> %564, %565
  %567 = shufflevector <4 x i32> %566, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %568 = mul <4 x i32> %566, %567
  %569 = extractelement <4 x i32> %568, i32 0
  %570 = icmp eq i64 %487, %484
  br i1 %570, label %582, label %571

571:                                              ; preds = %561, %482
  %572 = phi i64 [ 0, %482 ], [ %487, %561 ]
  %573 = phi i32 [ 1, %482 ], [ %569, %561 ]
  br label %574

574:                                              ; preds = %571, %574
  %575 = phi i64 [ %580, %574 ], [ %572, %571 ]
  %576 = phi i32 [ %579, %574 ], [ %573, %571 ]
  %577 = getelementptr inbounds i32, i32* %483, i64 %575
  %578 = load i32, i32* %577, align 4
  %579 = mul nsw i32 %578, %576
  %580 = add nuw nsw i64 %575, 1
  %581 = icmp eq i64 %580, %484
  br i1 %581, label %582, label %574, !llvm.loop !415

582:                                              ; preds = %574, %561
  %583 = phi i32 [ %569, %561 ], [ %579, %574 ]
  %584 = icmp eq i32 %583, 1
  br i1 %584, label %585, label %853

585:                                              ; preds = %480, %582
  %586 = load i32, i32* %4, align 4
  %587 = and i64 %133, 3
  %588 = icmp eq i64 %587, 0
  br i1 %588, label %589, label %595

589:                                              ; preds = %585
  %590 = lshr i64 %133, 2
  %591 = sub nsw i64 0, %590
  %592 = and i64 %591, 3
  %593 = icmp slt i64 %592, %132
  %594 = select i1 %593, i64 %592, i64 %132
  br label %595

595:                                              ; preds = %589, %585
  %596 = phi i64 [ %594, %589 ], [ %132, %585 ]
  %597 = sub nsw i64 %132, %596
  %598 = sdiv i64 %597, 4
  %599 = shl nsw i64 %598, 2
  %600 = add nsw i64 %599, %596
  %601 = icmp sgt i64 %596, 0
  br i1 %601, label %602, label %714

602:                                              ; preds = %595
  %603 = icmp ult i64 %596, 8
  br i1 %603, label %672, label %604

604:                                              ; preds = %602
  %605 = getelementptr i32, i32* %6, i64 %596
  %606 = getelementptr i32, i32* %2, i64 %596
  %607 = icmp ugt i32* %606, %6
  %608 = icmp ugt i32* %605, %2
  %609 = and i1 %607, %608
  br i1 %609, label %672, label %610

610:                                              ; preds = %604
  %611 = and i64 %596, -8
  %612 = insertelement <4 x i32> undef, i32 %586, i32 0
  %613 = shufflevector <4 x i32> %612, <4 x i32> undef, <4 x i32> zeroinitializer
  %614 = insertelement <4 x i32> undef, i32 %586, i32 0
  %615 = shufflevector <4 x i32> %614, <4 x i32> undef, <4 x i32> zeroinitializer
  %616 = add nsw i64 %611, -8
  %617 = lshr exact i64 %616, 3
  %618 = add nuw nsw i64 %617, 1
  %619 = and i64 %618, 1
  %620 = icmp eq i64 %616, 0
  br i1 %620, label %654, label %621

621:                                              ; preds = %610
  %622 = sub nuw nsw i64 %618, %619
  br label %623

623:                                              ; preds = %623, %621
  %624 = phi i64 [ 0, %621 ], [ %651, %623 ]
  %625 = phi i64 [ %622, %621 ], [ %652, %623 ]
  %626 = getelementptr inbounds i32, i32* %6, i64 %624
  %627 = getelementptr inbounds i32, i32* %2, i64 %624
  %628 = bitcast i32* %627 to <4 x i32>*
  %629 = load <4 x i32>, <4 x i32>* %628, align 4, !alias.scope !416
  %630 = getelementptr inbounds i32, i32* %627, i64 4
  %631 = bitcast i32* %630 to <4 x i32>*
  %632 = load <4 x i32>, <4 x i32>* %631, align 4, !alias.scope !416
  %633 = add nsw <4 x i32> %629, %613
  %634 = add nsw <4 x i32> %632, %615
  %635 = bitcast i32* %626 to <4 x i32>*
  store <4 x i32> %633, <4 x i32>* %635, align 4, !alias.scope !419, !noalias !416
  %636 = getelementptr inbounds i32, i32* %626, i64 4
  %637 = bitcast i32* %636 to <4 x i32>*
  store <4 x i32> %634, <4 x i32>* %637, align 4, !alias.scope !419, !noalias !416
  %638 = or i64 %624, 8
  %639 = getelementptr inbounds i32, i32* %6, i64 %638
  %640 = getelementptr inbounds i32, i32* %2, i64 %638
  %641 = bitcast i32* %640 to <4 x i32>*
  %642 = load <4 x i32>, <4 x i32>* %641, align 4, !alias.scope !416
  %643 = getelementptr inbounds i32, i32* %640, i64 4
  %644 = bitcast i32* %643 to <4 x i32>*
  %645 = load <4 x i32>, <4 x i32>* %644, align 4, !alias.scope !416
  %646 = add nsw <4 x i32> %642, %613
  %647 = add nsw <4 x i32> %645, %615
  %648 = bitcast i32* %639 to <4 x i32>*
  store <4 x i32> %646, <4 x i32>* %648, align 4, !alias.scope !419, !noalias !416
  %649 = getelementptr inbounds i32, i32* %639, i64 4
  %650 = bitcast i32* %649 to <4 x i32>*
  store <4 x i32> %647, <4 x i32>* %650, align 4, !alias.scope !419, !noalias !416
  %651 = add i64 %624, 16
  %652 = add i64 %625, -2
  %653 = icmp eq i64 %652, 0
  br i1 %653, label %654, label %623, !llvm.loop !421

654:                                              ; preds = %623, %610
  %655 = phi i64 [ 0, %610 ], [ %651, %623 ]
  %656 = icmp eq i64 %619, 0
  br i1 %656, label %670, label %657

657:                                              ; preds = %654
  %658 = getelementptr inbounds i32, i32* %6, i64 %655
  %659 = getelementptr inbounds i32, i32* %2, i64 %655
  %660 = bitcast i32* %659 to <4 x i32>*
  %661 = load <4 x i32>, <4 x i32>* %660, align 4, !alias.scope !416
  %662 = getelementptr inbounds i32, i32* %659, i64 4
  %663 = bitcast i32* %662 to <4 x i32>*
  %664 = load <4 x i32>, <4 x i32>* %663, align 4, !alias.scope !416
  %665 = add nsw <4 x i32> %661, %613
  %666 = add nsw <4 x i32> %664, %615
  %667 = bitcast i32* %658 to <4 x i32>*
  store <4 x i32> %665, <4 x i32>* %667, align 4, !alias.scope !419, !noalias !416
  %668 = getelementptr inbounds i32, i32* %658, i64 4
  %669 = bitcast i32* %668 to <4 x i32>*
  store <4 x i32> %666, <4 x i32>* %669, align 4, !alias.scope !419, !noalias !416
  br label %670

670:                                              ; preds = %654, %657
  %671 = icmp eq i64 %596, %611
  br i1 %671, label %714, label %672

672:                                              ; preds = %670, %604, %602
  %673 = phi i64 [ 0, %604 ], [ 0, %602 ], [ %611, %670 ]
  %674 = xor i64 %673, -1
  %675 = add i64 %596, %674
  %676 = and i64 %596, 3
  %677 = icmp eq i64 %676, 0
  br i1 %677, label %688, label %678

678:                                              ; preds = %672, %678
  %679 = phi i64 [ %685, %678 ], [ %673, %672 ]
  %680 = phi i64 [ %686, %678 ], [ %676, %672 ]
  %681 = getelementptr inbounds i32, i32* %6, i64 %679
  %682 = getelementptr inbounds i32, i32* %2, i64 %679
  %683 = load i32, i32* %682, align 4
  %684 = add nsw i32 %683, %586
  store i32 %684, i32* %681, align 4
  %685 = add nuw nsw i64 %679, 1
  %686 = add i64 %680, -1
  %687 = icmp eq i64 %686, 0
  br i1 %687, label %688, label %678, !llvm.loop !422

688:                                              ; preds = %678, %672
  %689 = phi i64 [ %673, %672 ], [ %685, %678 ]
  %690 = icmp ult i64 %675, 3
  br i1 %690, label %714, label %691

691:                                              ; preds = %688, %691
  %692 = phi i64 [ %712, %691 ], [ %689, %688 ]
  %693 = getelementptr inbounds i32, i32* %6, i64 %692
  %694 = getelementptr inbounds i32, i32* %2, i64 %692
  %695 = load i32, i32* %694, align 4
  %696 = add nsw i32 %695, %586
  store i32 %696, i32* %693, align 4
  %697 = add nuw nsw i64 %692, 1
  %698 = getelementptr inbounds i32, i32* %6, i64 %697
  %699 = getelementptr inbounds i32, i32* %2, i64 %697
  %700 = load i32, i32* %699, align 4
  %701 = add nsw i32 %700, %586
  store i32 %701, i32* %698, align 4
  %702 = add nuw nsw i64 %692, 2
  %703 = getelementptr inbounds i32, i32* %6, i64 %702
  %704 = getelementptr inbounds i32, i32* %2, i64 %702
  %705 = load i32, i32* %704, align 4
  %706 = add nsw i32 %705, %586
  store i32 %706, i32* %703, align 4
  %707 = add nuw nsw i64 %692, 3
  %708 = getelementptr inbounds i32, i32* %6, i64 %707
  %709 = getelementptr inbounds i32, i32* %2, i64 %707
  %710 = load i32, i32* %709, align 4
  %711 = add nsw i32 %710, %586
  store i32 %711, i32* %708, align 4
  %712 = add nuw nsw i64 %692, 4
  %713 = icmp eq i64 %712, %596
  br i1 %713, label %714, label %691, !llvm.loop !423

714:                                              ; preds = %688, %691, %670, %595
  %715 = icmp sgt i64 %597, 3
  br i1 %715, label %716, label %719

716:                                              ; preds = %714
  %717 = insertelement <4 x i32> undef, i32 %586, i32 0
  %718 = shufflevector <4 x i32> %717, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %843

719:                                              ; preds = %843, %714
  %720 = icmp slt i64 %600, %132
  br i1 %720, label %721, label %1231

721:                                              ; preds = %719
  %722 = sub nsw i64 %132, %596
  %723 = sub i64 %722, %599
  %724 = icmp ult i64 %723, 8
  br i1 %724, label %800, label %725

725:                                              ; preds = %721
  %726 = add i64 %596, %599
  %727 = getelementptr i32, i32* %6, i64 %726
  %728 = getelementptr i32, i32* %6, i64 %132
  %729 = getelementptr i32, i32* %2, i64 %726
  %730 = getelementptr i32, i32* %2, i64 %132
  %731 = icmp ult i32* %727, %730
  %732 = icmp ult i32* %729, %728
  %733 = and i1 %731, %732
  br i1 %733, label %800, label %734

734:                                              ; preds = %725
  %735 = and i64 %723, -8
  %736 = add i64 %600, %735
  %737 = insertelement <4 x i32> undef, i32 %586, i32 0
  %738 = shufflevector <4 x i32> %737, <4 x i32> undef, <4 x i32> zeroinitializer
  %739 = insertelement <4 x i32> undef, i32 %586, i32 0
  %740 = shufflevector <4 x i32> %739, <4 x i32> undef, <4 x i32> zeroinitializer
  %741 = add i64 %735, -8
  %742 = lshr exact i64 %741, 3
  %743 = add nuw nsw i64 %742, 1
  %744 = and i64 %743, 1
  %745 = icmp eq i64 %741, 0
  br i1 %745, label %781, label %746

746:                                              ; preds = %734
  %747 = sub nuw nsw i64 %743, %744
  br label %748

748:                                              ; preds = %748, %746
  %749 = phi i64 [ 0, %746 ], [ %778, %748 ]
  %750 = phi i64 [ %747, %746 ], [ %779, %748 ]
  %751 = add i64 %600, %749
  %752 = getelementptr inbounds i32, i32* %6, i64 %751
  %753 = getelementptr inbounds i32, i32* %2, i64 %751
  %754 = bitcast i32* %753 to <4 x i32>*
  %755 = load <4 x i32>, <4 x i32>* %754, align 4, !alias.scope !424
  %756 = getelementptr inbounds i32, i32* %753, i64 4
  %757 = bitcast i32* %756 to <4 x i32>*
  %758 = load <4 x i32>, <4 x i32>* %757, align 4, !alias.scope !424
  %759 = add nsw <4 x i32> %755, %738
  %760 = add nsw <4 x i32> %758, %740
  %761 = bitcast i32* %752 to <4 x i32>*
  store <4 x i32> %759, <4 x i32>* %761, align 4, !alias.scope !427, !noalias !424
  %762 = getelementptr inbounds i32, i32* %752, i64 4
  %763 = bitcast i32* %762 to <4 x i32>*
  store <4 x i32> %760, <4 x i32>* %763, align 4, !alias.scope !427, !noalias !424
  %764 = or i64 %749, 8
  %765 = add i64 %600, %764
  %766 = getelementptr inbounds i32, i32* %6, i64 %765
  %767 = getelementptr inbounds i32, i32* %2, i64 %765
  %768 = bitcast i32* %767 to <4 x i32>*
  %769 = load <4 x i32>, <4 x i32>* %768, align 4, !alias.scope !424
  %770 = getelementptr inbounds i32, i32* %767, i64 4
  %771 = bitcast i32* %770 to <4 x i32>*
  %772 = load <4 x i32>, <4 x i32>* %771, align 4, !alias.scope !424
  %773 = add nsw <4 x i32> %769, %738
  %774 = add nsw <4 x i32> %772, %740
  %775 = bitcast i32* %766 to <4 x i32>*
  store <4 x i32> %773, <4 x i32>* %775, align 4, !alias.scope !427, !noalias !424
  %776 = getelementptr inbounds i32, i32* %766, i64 4
  %777 = bitcast i32* %776 to <4 x i32>*
  store <4 x i32> %774, <4 x i32>* %777, align 4, !alias.scope !427, !noalias !424
  %778 = add i64 %749, 16
  %779 = add i64 %750, -2
  %780 = icmp eq i64 %779, 0
  br i1 %780, label %781, label %748, !llvm.loop !429

781:                                              ; preds = %748, %734
  %782 = phi i64 [ 0, %734 ], [ %778, %748 ]
  %783 = icmp eq i64 %744, 0
  br i1 %783, label %798, label %784

784:                                              ; preds = %781
  %785 = add i64 %600, %782
  %786 = getelementptr inbounds i32, i32* %6, i64 %785
  %787 = getelementptr inbounds i32, i32* %2, i64 %785
  %788 = bitcast i32* %787 to <4 x i32>*
  %789 = load <4 x i32>, <4 x i32>* %788, align 4, !alias.scope !424
  %790 = getelementptr inbounds i32, i32* %787, i64 4
  %791 = bitcast i32* %790 to <4 x i32>*
  %792 = load <4 x i32>, <4 x i32>* %791, align 4, !alias.scope !424
  %793 = add nsw <4 x i32> %789, %738
  %794 = add nsw <4 x i32> %792, %740
  %795 = bitcast i32* %786 to <4 x i32>*
  store <4 x i32> %793, <4 x i32>* %795, align 4, !alias.scope !427, !noalias !424
  %796 = getelementptr inbounds i32, i32* %786, i64 4
  %797 = bitcast i32* %796 to <4 x i32>*
  store <4 x i32> %794, <4 x i32>* %797, align 4, !alias.scope !427, !noalias !424
  br label %798

798:                                              ; preds = %781, %784
  %799 = icmp eq i64 %723, %735
  br i1 %799, label %1231, label %800

800:                                              ; preds = %798, %725, %721
  %801 = phi i64 [ %600, %725 ], [ %600, %721 ], [ %736, %798 ]
  %802 = sub i64 %132, %801
  %803 = xor i64 %801, -1
  %804 = add i64 %132, %803
  %805 = and i64 %802, 3
  %806 = icmp eq i64 %805, 0
  br i1 %806, label %817, label %807

807:                                              ; preds = %800, %807
  %808 = phi i64 [ %814, %807 ], [ %801, %800 ]
  %809 = phi i64 [ %815, %807 ], [ %805, %800 ]
  %810 = getelementptr inbounds i32, i32* %6, i64 %808
  %811 = getelementptr inbounds i32, i32* %2, i64 %808
  %812 = load i32, i32* %811, align 4
  %813 = add nsw i32 %812, %586
  store i32 %813, i32* %810, align 4
  %814 = add nsw i64 %808, 1
  %815 = add i64 %809, -1
  %816 = icmp eq i64 %815, 0
  br i1 %816, label %817, label %807, !llvm.loop !430

817:                                              ; preds = %807, %800
  %818 = phi i64 [ %801, %800 ], [ %814, %807 ]
  %819 = icmp ult i64 %804, 3
  br i1 %819, label %1231, label %820

820:                                              ; preds = %817, %820
  %821 = phi i64 [ %841, %820 ], [ %818, %817 ]
  %822 = getelementptr inbounds i32, i32* %6, i64 %821
  %823 = getelementptr inbounds i32, i32* %2, i64 %821
  %824 = load i32, i32* %823, align 4
  %825 = add nsw i32 %824, %586
  store i32 %825, i32* %822, align 4
  %826 = add nsw i64 %821, 1
  %827 = getelementptr inbounds i32, i32* %6, i64 %826
  %828 = getelementptr inbounds i32, i32* %2, i64 %826
  %829 = load i32, i32* %828, align 4
  %830 = add nsw i32 %829, %586
  store i32 %830, i32* %827, align 4
  %831 = add nsw i64 %821, 2
  %832 = getelementptr inbounds i32, i32* %6, i64 %831
  %833 = getelementptr inbounds i32, i32* %2, i64 %831
  %834 = load i32, i32* %833, align 4
  %835 = add nsw i32 %834, %586
  store i32 %835, i32* %832, align 4
  %836 = add nsw i64 %821, 3
  %837 = getelementptr inbounds i32, i32* %6, i64 %836
  %838 = getelementptr inbounds i32, i32* %2, i64 %836
  %839 = load i32, i32* %838, align 4
  %840 = add nsw i32 %839, %586
  store i32 %840, i32* %837, align 4
  %841 = add nsw i64 %821, 4
  %842 = icmp eq i64 %841, %132
  br i1 %842, label %1231, label %820, !llvm.loop !431

843:                                              ; preds = %843, %716
  %844 = phi i64 [ %851, %843 ], [ %596, %716 ]
  %845 = getelementptr inbounds i32, i32* %6, i64 %844
  %846 = getelementptr inbounds i32, i32* %2, i64 %844
  %847 = bitcast i32* %846 to <4 x i32>*
  %848 = load <4 x i32>, <4 x i32>* %847, align 1
  %849 = add <4 x i32> %848, %718
  %850 = bitcast i32* %845 to <4 x i32>*
  store <4 x i32> %849, <4 x i32>* %850, align 16
  %851 = add nsw i64 %844, 4
  %852 = icmp slt i64 %851, %600
  br i1 %852, label %843, label %719

853:                                              ; preds = %582
  br i1 %10, label %854, label %857

854:                                              ; preds = %853
  %855 = getelementptr inbounds %union.anon, %union.anon* %11, i64 0, i32 0
  %856 = load i32*, i32** %855, align 8
  br label %859

857:                                              ; preds = %853
  %858 = bitcast %union.anon* %11 to i32*
  br i1 %12, label %859, label %962

859:                                              ; preds = %857, %854
  %860 = phi i32* [ %856, %854 ], [ %858, %857 ]
  %861 = zext i32 %9 to i64
  %862 = icmp ult i32 %9, 8
  br i1 %862, label %948, label %863

863:                                              ; preds = %859
  %864 = and i64 %861, 4294967288
  %865 = add nsw i64 %864, -8
  %866 = lshr exact i64 %865, 3
  %867 = add nuw nsw i64 %866, 1
  %868 = and i64 %867, 3
  %869 = icmp ult i64 %865, 24
  br i1 %869, label %915, label %870

870:                                              ; preds = %863
  %871 = sub nsw i64 %867, %868
  br label %872

872:                                              ; preds = %872, %870
  %873 = phi i64 [ 0, %870 ], [ %912, %872 ]
  %874 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %870 ], [ %910, %872 ]
  %875 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %870 ], [ %911, %872 ]
  %876 = phi i64 [ %871, %870 ], [ %913, %872 ]
  %877 = getelementptr inbounds i32, i32* %860, i64 %873
  %878 = bitcast i32* %877 to <4 x i32>*
  %879 = load <4 x i32>, <4 x i32>* %878, align 4
  %880 = getelementptr inbounds i32, i32* %877, i64 4
  %881 = bitcast i32* %880 to <4 x i32>*
  %882 = load <4 x i32>, <4 x i32>* %881, align 4
  %883 = mul nsw <4 x i32> %879, %874
  %884 = mul nsw <4 x i32> %882, %875
  %885 = or i64 %873, 8
  %886 = getelementptr inbounds i32, i32* %860, i64 %885
  %887 = bitcast i32* %886 to <4 x i32>*
  %888 = load <4 x i32>, <4 x i32>* %887, align 4
  %889 = getelementptr inbounds i32, i32* %886, i64 4
  %890 = bitcast i32* %889 to <4 x i32>*
  %891 = load <4 x i32>, <4 x i32>* %890, align 4
  %892 = mul nsw <4 x i32> %888, %883
  %893 = mul nsw <4 x i32> %891, %884
  %894 = or i64 %873, 16
  %895 = getelementptr inbounds i32, i32* %860, i64 %894
  %896 = bitcast i32* %895 to <4 x i32>*
  %897 = load <4 x i32>, <4 x i32>* %896, align 4
  %898 = getelementptr inbounds i32, i32* %895, i64 4
  %899 = bitcast i32* %898 to <4 x i32>*
  %900 = load <4 x i32>, <4 x i32>* %899, align 4
  %901 = mul nsw <4 x i32> %897, %892
  %902 = mul nsw <4 x i32> %900, %893
  %903 = or i64 %873, 24
  %904 = getelementptr inbounds i32, i32* %860, i64 %903
  %905 = bitcast i32* %904 to <4 x i32>*
  %906 = load <4 x i32>, <4 x i32>* %905, align 4
  %907 = getelementptr inbounds i32, i32* %904, i64 4
  %908 = bitcast i32* %907 to <4 x i32>*
  %909 = load <4 x i32>, <4 x i32>* %908, align 4
  %910 = mul nsw <4 x i32> %906, %901
  %911 = mul nsw <4 x i32> %909, %902
  %912 = add i64 %873, 32
  %913 = add i64 %876, -4
  %914 = icmp eq i64 %913, 0
  br i1 %914, label %915, label %872, !llvm.loop !432

915:                                              ; preds = %872, %863
  %916 = phi <4 x i32> [ undef, %863 ], [ %910, %872 ]
  %917 = phi <4 x i32> [ undef, %863 ], [ %911, %872 ]
  %918 = phi i64 [ 0, %863 ], [ %912, %872 ]
  %919 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %863 ], [ %910, %872 ]
  %920 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %863 ], [ %911, %872 ]
  %921 = icmp eq i64 %868, 0
  br i1 %921, label %938, label %922

922:                                              ; preds = %915, %922
  %923 = phi i64 [ %935, %922 ], [ %918, %915 ]
  %924 = phi <4 x i32> [ %933, %922 ], [ %919, %915 ]
  %925 = phi <4 x i32> [ %934, %922 ], [ %920, %915 ]
  %926 = phi i64 [ %936, %922 ], [ %868, %915 ]
  %927 = getelementptr inbounds i32, i32* %860, i64 %923
  %928 = bitcast i32* %927 to <4 x i32>*
  %929 = load <4 x i32>, <4 x i32>* %928, align 4
  %930 = getelementptr inbounds i32, i32* %927, i64 4
  %931 = bitcast i32* %930 to <4 x i32>*
  %932 = load <4 x i32>, <4 x i32>* %931, align 4
  %933 = mul nsw <4 x i32> %929, %924
  %934 = mul nsw <4 x i32> %932, %925
  %935 = add i64 %923, 8
  %936 = add i64 %926, -1
  %937 = icmp eq i64 %936, 0
  br i1 %937, label %938, label %922, !llvm.loop !433

938:                                              ; preds = %922, %915
  %939 = phi <4 x i32> [ %916, %915 ], [ %933, %922 ]
  %940 = phi <4 x i32> [ %917, %915 ], [ %934, %922 ]
  %941 = mul <4 x i32> %940, %939
  %942 = shufflevector <4 x i32> %941, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %943 = mul <4 x i32> %941, %942
  %944 = shufflevector <4 x i32> %943, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %945 = mul <4 x i32> %943, %944
  %946 = extractelement <4 x i32> %945, i32 0
  %947 = icmp eq i64 %864, %861
  br i1 %947, label %959, label %948

948:                                              ; preds = %938, %859
  %949 = phi i64 [ 0, %859 ], [ %864, %938 ]
  %950 = phi i32 [ 1, %859 ], [ %946, %938 ]
  br label %951

951:                                              ; preds = %948, %951
  %952 = phi i64 [ %957, %951 ], [ %949, %948 ]
  %953 = phi i32 [ %956, %951 ], [ %950, %948 ]
  %954 = getelementptr inbounds i32, i32* %860, i64 %952
  %955 = load i32, i32* %954, align 4
  %956 = mul nsw i32 %955, %953
  %957 = add nuw nsw i64 %952, 1
  %958 = icmp eq i64 %957, %861
  br i1 %958, label %959, label %951, !llvm.loop !434

959:                                              ; preds = %951, %938
  %960 = phi i32 [ %946, %938 ], [ %956, %951 ]
  %961 = icmp eq i32 %960, 1
  br i1 %961, label %962, label %1230

962:                                              ; preds = %857, %959
  %963 = load i32, i32* %2, align 4
  %964 = and i64 %133, 3
  %965 = icmp eq i64 %964, 0
  br i1 %965, label %966, label %972

966:                                              ; preds = %962
  %967 = lshr i64 %133, 2
  %968 = sub nsw i64 0, %967
  %969 = and i64 %968, 3
  %970 = icmp slt i64 %969, %132
  %971 = select i1 %970, i64 %969, i64 %132
  br label %972

972:                                              ; preds = %966, %962
  %973 = phi i64 [ %971, %966 ], [ %132, %962 ]
  %974 = sub nsw i64 %132, %973
  %975 = sdiv i64 %974, 4
  %976 = shl nsw i64 %975, 2
  %977 = add nsw i64 %976, %973
  %978 = icmp sgt i64 %973, 0
  br i1 %978, label %979, label %1091

979:                                              ; preds = %972
  %980 = icmp ult i64 %973, 8
  br i1 %980, label %1049, label %981

981:                                              ; preds = %979
  %982 = getelementptr i32, i32* %6, i64 %973
  %983 = getelementptr i32, i32* %4, i64 %973
  %984 = icmp ugt i32* %983, %6
  %985 = icmp ugt i32* %982, %4
  %986 = and i1 %984, %985
  br i1 %986, label %1049, label %987

987:                                              ; preds = %981
  %988 = and i64 %973, -8
  %989 = insertelement <4 x i32> undef, i32 %963, i32 0
  %990 = shufflevector <4 x i32> %989, <4 x i32> undef, <4 x i32> zeroinitializer
  %991 = insertelement <4 x i32> undef, i32 %963, i32 0
  %992 = shufflevector <4 x i32> %991, <4 x i32> undef, <4 x i32> zeroinitializer
  %993 = add nsw i64 %988, -8
  %994 = lshr exact i64 %993, 3
  %995 = add nuw nsw i64 %994, 1
  %996 = and i64 %995, 1
  %997 = icmp eq i64 %993, 0
  br i1 %997, label %1031, label %998

998:                                              ; preds = %987
  %999 = sub nuw nsw i64 %995, %996
  br label %1000

1000:                                             ; preds = %1000, %998
  %1001 = phi i64 [ 0, %998 ], [ %1028, %1000 ]
  %1002 = phi i64 [ %999, %998 ], [ %1029, %1000 ]
  %1003 = getelementptr inbounds i32, i32* %6, i64 %1001
  %1004 = getelementptr inbounds i32, i32* %4, i64 %1001
  %1005 = bitcast i32* %1004 to <4 x i32>*
  %1006 = load <4 x i32>, <4 x i32>* %1005, align 4, !alias.scope !435
  %1007 = getelementptr inbounds i32, i32* %1004, i64 4
  %1008 = bitcast i32* %1007 to <4 x i32>*
  %1009 = load <4 x i32>, <4 x i32>* %1008, align 4, !alias.scope !435
  %1010 = add nsw <4 x i32> %1006, %990
  %1011 = add nsw <4 x i32> %1009, %992
  %1012 = bitcast i32* %1003 to <4 x i32>*
  store <4 x i32> %1010, <4 x i32>* %1012, align 4, !alias.scope !438, !noalias !435
  %1013 = getelementptr inbounds i32, i32* %1003, i64 4
  %1014 = bitcast i32* %1013 to <4 x i32>*
  store <4 x i32> %1011, <4 x i32>* %1014, align 4, !alias.scope !438, !noalias !435
  %1015 = or i64 %1001, 8
  %1016 = getelementptr inbounds i32, i32* %6, i64 %1015
  %1017 = getelementptr inbounds i32, i32* %4, i64 %1015
  %1018 = bitcast i32* %1017 to <4 x i32>*
  %1019 = load <4 x i32>, <4 x i32>* %1018, align 4, !alias.scope !435
  %1020 = getelementptr inbounds i32, i32* %1017, i64 4
  %1021 = bitcast i32* %1020 to <4 x i32>*
  %1022 = load <4 x i32>, <4 x i32>* %1021, align 4, !alias.scope !435
  %1023 = add nsw <4 x i32> %1019, %990
  %1024 = add nsw <4 x i32> %1022, %992
  %1025 = bitcast i32* %1016 to <4 x i32>*
  store <4 x i32> %1023, <4 x i32>* %1025, align 4, !alias.scope !438, !noalias !435
  %1026 = getelementptr inbounds i32, i32* %1016, i64 4
  %1027 = bitcast i32* %1026 to <4 x i32>*
  store <4 x i32> %1024, <4 x i32>* %1027, align 4, !alias.scope !438, !noalias !435
  %1028 = add i64 %1001, 16
  %1029 = add i64 %1002, -2
  %1030 = icmp eq i64 %1029, 0
  br i1 %1030, label %1031, label %1000, !llvm.loop !440

1031:                                             ; preds = %1000, %987
  %1032 = phi i64 [ 0, %987 ], [ %1028, %1000 ]
  %1033 = icmp eq i64 %996, 0
  br i1 %1033, label %1047, label %1034

1034:                                             ; preds = %1031
  %1035 = getelementptr inbounds i32, i32* %6, i64 %1032
  %1036 = getelementptr inbounds i32, i32* %4, i64 %1032
  %1037 = bitcast i32* %1036 to <4 x i32>*
  %1038 = load <4 x i32>, <4 x i32>* %1037, align 4, !alias.scope !435
  %1039 = getelementptr inbounds i32, i32* %1036, i64 4
  %1040 = bitcast i32* %1039 to <4 x i32>*
  %1041 = load <4 x i32>, <4 x i32>* %1040, align 4, !alias.scope !435
  %1042 = add nsw <4 x i32> %1038, %990
  %1043 = add nsw <4 x i32> %1041, %992
  %1044 = bitcast i32* %1035 to <4 x i32>*
  store <4 x i32> %1042, <4 x i32>* %1044, align 4, !alias.scope !438, !noalias !435
  %1045 = getelementptr inbounds i32, i32* %1035, i64 4
  %1046 = bitcast i32* %1045 to <4 x i32>*
  store <4 x i32> %1043, <4 x i32>* %1046, align 4, !alias.scope !438, !noalias !435
  br label %1047

1047:                                             ; preds = %1031, %1034
  %1048 = icmp eq i64 %973, %988
  br i1 %1048, label %1091, label %1049

1049:                                             ; preds = %1047, %981, %979
  %1050 = phi i64 [ 0, %981 ], [ 0, %979 ], [ %988, %1047 ]
  %1051 = xor i64 %1050, -1
  %1052 = add i64 %973, %1051
  %1053 = and i64 %973, 3
  %1054 = icmp eq i64 %1053, 0
  br i1 %1054, label %1065, label %1055

1055:                                             ; preds = %1049, %1055
  %1056 = phi i64 [ %1062, %1055 ], [ %1050, %1049 ]
  %1057 = phi i64 [ %1063, %1055 ], [ %1053, %1049 ]
  %1058 = getelementptr inbounds i32, i32* %6, i64 %1056
  %1059 = getelementptr inbounds i32, i32* %4, i64 %1056
  %1060 = load i32, i32* %1059, align 4
  %1061 = add nsw i32 %1060, %963
  store i32 %1061, i32* %1058, align 4
  %1062 = add nuw nsw i64 %1056, 1
  %1063 = add i64 %1057, -1
  %1064 = icmp eq i64 %1063, 0
  br i1 %1064, label %1065, label %1055, !llvm.loop !441

1065:                                             ; preds = %1055, %1049
  %1066 = phi i64 [ %1050, %1049 ], [ %1062, %1055 ]
  %1067 = icmp ult i64 %1052, 3
  br i1 %1067, label %1091, label %1068

1068:                                             ; preds = %1065, %1068
  %1069 = phi i64 [ %1089, %1068 ], [ %1066, %1065 ]
  %1070 = getelementptr inbounds i32, i32* %6, i64 %1069
  %1071 = getelementptr inbounds i32, i32* %4, i64 %1069
  %1072 = load i32, i32* %1071, align 4
  %1073 = add nsw i32 %1072, %963
  store i32 %1073, i32* %1070, align 4
  %1074 = add nuw nsw i64 %1069, 1
  %1075 = getelementptr inbounds i32, i32* %6, i64 %1074
  %1076 = getelementptr inbounds i32, i32* %4, i64 %1074
  %1077 = load i32, i32* %1076, align 4
  %1078 = add nsw i32 %1077, %963
  store i32 %1078, i32* %1075, align 4
  %1079 = add nuw nsw i64 %1069, 2
  %1080 = getelementptr inbounds i32, i32* %6, i64 %1079
  %1081 = getelementptr inbounds i32, i32* %4, i64 %1079
  %1082 = load i32, i32* %1081, align 4
  %1083 = add nsw i32 %1082, %963
  store i32 %1083, i32* %1080, align 4
  %1084 = add nuw nsw i64 %1069, 3
  %1085 = getelementptr inbounds i32, i32* %6, i64 %1084
  %1086 = getelementptr inbounds i32, i32* %4, i64 %1084
  %1087 = load i32, i32* %1086, align 4
  %1088 = add nsw i32 %1087, %963
  store i32 %1088, i32* %1085, align 4
  %1089 = add nuw nsw i64 %1069, 4
  %1090 = icmp eq i64 %1089, %973
  br i1 %1090, label %1091, label %1068, !llvm.loop !442

1091:                                             ; preds = %1065, %1068, %1047, %972
  %1092 = icmp sgt i64 %974, 3
  br i1 %1092, label %1093, label %1096

1093:                                             ; preds = %1091
  %1094 = insertelement <4 x i32> undef, i32 %963, i32 0
  %1095 = shufflevector <4 x i32> %1094, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %1220

1096:                                             ; preds = %1220, %1091
  %1097 = icmp slt i64 %977, %132
  br i1 %1097, label %1098, label %1231

1098:                                             ; preds = %1096
  %1099 = sub nsw i64 %132, %973
  %1100 = sub i64 %1099, %976
  %1101 = icmp ult i64 %1100, 8
  br i1 %1101, label %1177, label %1102

1102:                                             ; preds = %1098
  %1103 = add i64 %973, %976
  %1104 = getelementptr i32, i32* %6, i64 %1103
  %1105 = getelementptr i32, i32* %6, i64 %132
  %1106 = getelementptr i32, i32* %4, i64 %1103
  %1107 = getelementptr i32, i32* %4, i64 %132
  %1108 = icmp ult i32* %1104, %1107
  %1109 = icmp ult i32* %1106, %1105
  %1110 = and i1 %1108, %1109
  br i1 %1110, label %1177, label %1111

1111:                                             ; preds = %1102
  %1112 = and i64 %1100, -8
  %1113 = add i64 %977, %1112
  %1114 = insertelement <4 x i32> undef, i32 %963, i32 0
  %1115 = shufflevector <4 x i32> %1114, <4 x i32> undef, <4 x i32> zeroinitializer
  %1116 = insertelement <4 x i32> undef, i32 %963, i32 0
  %1117 = shufflevector <4 x i32> %1116, <4 x i32> undef, <4 x i32> zeroinitializer
  %1118 = add i64 %1112, -8
  %1119 = lshr exact i64 %1118, 3
  %1120 = add nuw nsw i64 %1119, 1
  %1121 = and i64 %1120, 1
  %1122 = icmp eq i64 %1118, 0
  br i1 %1122, label %1158, label %1123

1123:                                             ; preds = %1111
  %1124 = sub nuw nsw i64 %1120, %1121
  br label %1125

1125:                                             ; preds = %1125, %1123
  %1126 = phi i64 [ 0, %1123 ], [ %1155, %1125 ]
  %1127 = phi i64 [ %1124, %1123 ], [ %1156, %1125 ]
  %1128 = add i64 %977, %1126
  %1129 = getelementptr inbounds i32, i32* %6, i64 %1128
  %1130 = getelementptr inbounds i32, i32* %4, i64 %1128
  %1131 = bitcast i32* %1130 to <4 x i32>*
  %1132 = load <4 x i32>, <4 x i32>* %1131, align 4, !alias.scope !443
  %1133 = getelementptr inbounds i32, i32* %1130, i64 4
  %1134 = bitcast i32* %1133 to <4 x i32>*
  %1135 = load <4 x i32>, <4 x i32>* %1134, align 4, !alias.scope !443
  %1136 = add nsw <4 x i32> %1132, %1115
  %1137 = add nsw <4 x i32> %1135, %1117
  %1138 = bitcast i32* %1129 to <4 x i32>*
  store <4 x i32> %1136, <4 x i32>* %1138, align 4, !alias.scope !446, !noalias !443
  %1139 = getelementptr inbounds i32, i32* %1129, i64 4
  %1140 = bitcast i32* %1139 to <4 x i32>*
  store <4 x i32> %1137, <4 x i32>* %1140, align 4, !alias.scope !446, !noalias !443
  %1141 = or i64 %1126, 8
  %1142 = add i64 %977, %1141
  %1143 = getelementptr inbounds i32, i32* %6, i64 %1142
  %1144 = getelementptr inbounds i32, i32* %4, i64 %1142
  %1145 = bitcast i32* %1144 to <4 x i32>*
  %1146 = load <4 x i32>, <4 x i32>* %1145, align 4, !alias.scope !443
  %1147 = getelementptr inbounds i32, i32* %1144, i64 4
  %1148 = bitcast i32* %1147 to <4 x i32>*
  %1149 = load <4 x i32>, <4 x i32>* %1148, align 4, !alias.scope !443
  %1150 = add nsw <4 x i32> %1146, %1115
  %1151 = add nsw <4 x i32> %1149, %1117
  %1152 = bitcast i32* %1143 to <4 x i32>*
  store <4 x i32> %1150, <4 x i32>* %1152, align 4, !alias.scope !446, !noalias !443
  %1153 = getelementptr inbounds i32, i32* %1143, i64 4
  %1154 = bitcast i32* %1153 to <4 x i32>*
  store <4 x i32> %1151, <4 x i32>* %1154, align 4, !alias.scope !446, !noalias !443
  %1155 = add i64 %1126, 16
  %1156 = add i64 %1127, -2
  %1157 = icmp eq i64 %1156, 0
  br i1 %1157, label %1158, label %1125, !llvm.loop !448

1158:                                             ; preds = %1125, %1111
  %1159 = phi i64 [ 0, %1111 ], [ %1155, %1125 ]
  %1160 = icmp eq i64 %1121, 0
  br i1 %1160, label %1175, label %1161

1161:                                             ; preds = %1158
  %1162 = add i64 %977, %1159
  %1163 = getelementptr inbounds i32, i32* %6, i64 %1162
  %1164 = getelementptr inbounds i32, i32* %4, i64 %1162
  %1165 = bitcast i32* %1164 to <4 x i32>*
  %1166 = load <4 x i32>, <4 x i32>* %1165, align 4, !alias.scope !443
  %1167 = getelementptr inbounds i32, i32* %1164, i64 4
  %1168 = bitcast i32* %1167 to <4 x i32>*
  %1169 = load <4 x i32>, <4 x i32>* %1168, align 4, !alias.scope !443
  %1170 = add nsw <4 x i32> %1166, %1115
  %1171 = add nsw <4 x i32> %1169, %1117
  %1172 = bitcast i32* %1163 to <4 x i32>*
  store <4 x i32> %1170, <4 x i32>* %1172, align 4, !alias.scope !446, !noalias !443
  %1173 = getelementptr inbounds i32, i32* %1163, i64 4
  %1174 = bitcast i32* %1173 to <4 x i32>*
  store <4 x i32> %1171, <4 x i32>* %1174, align 4, !alias.scope !446, !noalias !443
  br label %1175

1175:                                             ; preds = %1158, %1161
  %1176 = icmp eq i64 %1100, %1112
  br i1 %1176, label %1231, label %1177

1177:                                             ; preds = %1175, %1102, %1098
  %1178 = phi i64 [ %977, %1102 ], [ %977, %1098 ], [ %1113, %1175 ]
  %1179 = sub i64 %132, %1178
  %1180 = xor i64 %1178, -1
  %1181 = add i64 %132, %1180
  %1182 = and i64 %1179, 3
  %1183 = icmp eq i64 %1182, 0
  br i1 %1183, label %1194, label %1184

1184:                                             ; preds = %1177, %1184
  %1185 = phi i64 [ %1191, %1184 ], [ %1178, %1177 ]
  %1186 = phi i64 [ %1192, %1184 ], [ %1182, %1177 ]
  %1187 = getelementptr inbounds i32, i32* %6, i64 %1185
  %1188 = getelementptr inbounds i32, i32* %4, i64 %1185
  %1189 = load i32, i32* %1188, align 4
  %1190 = add nsw i32 %1189, %963
  store i32 %1190, i32* %1187, align 4
  %1191 = add nsw i64 %1185, 1
  %1192 = add i64 %1186, -1
  %1193 = icmp eq i64 %1192, 0
  br i1 %1193, label %1194, label %1184, !llvm.loop !449

1194:                                             ; preds = %1184, %1177
  %1195 = phi i64 [ %1178, %1177 ], [ %1191, %1184 ]
  %1196 = icmp ult i64 %1181, 3
  br i1 %1196, label %1231, label %1197

1197:                                             ; preds = %1194, %1197
  %1198 = phi i64 [ %1218, %1197 ], [ %1195, %1194 ]
  %1199 = getelementptr inbounds i32, i32* %6, i64 %1198
  %1200 = getelementptr inbounds i32, i32* %4, i64 %1198
  %1201 = load i32, i32* %1200, align 4
  %1202 = add nsw i32 %1201, %963
  store i32 %1202, i32* %1199, align 4
  %1203 = add nsw i64 %1198, 1
  %1204 = getelementptr inbounds i32, i32* %6, i64 %1203
  %1205 = getelementptr inbounds i32, i32* %4, i64 %1203
  %1206 = load i32, i32* %1205, align 4
  %1207 = add nsw i32 %1206, %963
  store i32 %1207, i32* %1204, align 4
  %1208 = add nsw i64 %1198, 2
  %1209 = getelementptr inbounds i32, i32* %6, i64 %1208
  %1210 = getelementptr inbounds i32, i32* %4, i64 %1208
  %1211 = load i32, i32* %1210, align 4
  %1212 = add nsw i32 %1211, %963
  store i32 %1212, i32* %1209, align 4
  %1213 = add nsw i64 %1198, 3
  %1214 = getelementptr inbounds i32, i32* %6, i64 %1213
  %1215 = getelementptr inbounds i32, i32* %4, i64 %1213
  %1216 = load i32, i32* %1215, align 4
  %1217 = add nsw i32 %1216, %963
  store i32 %1217, i32* %1214, align 4
  %1218 = add nsw i64 %1198, 4
  %1219 = icmp eq i64 %1218, %132
  br i1 %1219, label %1231, label %1197, !llvm.loop !450

1220:                                             ; preds = %1220, %1093
  %1221 = phi i64 [ %1228, %1220 ], [ %973, %1093 ]
  %1222 = getelementptr inbounds i32, i32* %6, i64 %1221
  %1223 = getelementptr inbounds i32, i32* %4, i64 %1221
  %1224 = bitcast i32* %1223 to <4 x i32>*
  %1225 = load <4 x i32>, <4 x i32>* %1224, align 1
  %1226 = add <4 x i32> %1225, %1095
  %1227 = bitcast i32* %1222 to <4 x i32>*
  store <4 x i32> %1226, <4 x i32>* %1227, align 16
  %1228 = add nsw i64 %1221, 4
  %1229 = icmp slt i64 %1228, %977
  br i1 %1229, label %1220, label %1096

1230:                                             ; preds = %959
  tail call void @_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKiS6_S8_S6_Pi(%"struct.tflite::ArithmeticParams"* dereferenceable(80) %0, %"class.tflite::RuntimeShape"* dereferenceable(32) %1, i32* %2, %"class.tflite::RuntimeShape"* dereferenceable(32) %3, i32* %4, %"class.tflite::RuntimeShape"* dereferenceable(32) %5, i32* %6)
  br label %1619

1231:                                             ; preds = %1194, %1197, %817, %820, %429, %432, %1175, %798, %408, %1096, %719, %309
  %1232 = phi i64 [ %964, %1096 ], [ %587, %719 ], [ %151, %309 ], [ %151, %408 ], [ %587, %798 ], [ %964, %1175 ], [ %151, %432 ], [ %151, %429 ], [ %587, %820 ], [ %587, %817 ], [ %964, %1197 ], [ %964, %1194 ]
  %1233 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 11
  %1234 = load i32, i32* %1233, align 4, !noalias !451
  %1235 = icmp eq i64 %1232, 0
  br i1 %1235, label %1236, label %1242

1236:                                             ; preds = %1231
  %1237 = lshr i64 %133, 2
  %1238 = sub nsw i64 0, %1237
  %1239 = and i64 %1238, 3
  %1240 = icmp slt i64 %1239, %132
  %1241 = select i1 %1240, i64 %1239, i64 %132
  br label %1242

1242:                                             ; preds = %1236, %1231
  %1243 = phi i64 [ %1241, %1236 ], [ %132, %1231 ]
  %1244 = sub nsw i64 %132, %1243
  %1245 = sdiv i64 %1244, 4
  %1246 = shl nsw i64 %1245, 2
  %1247 = add nsw i64 %1246, %1243
  %1248 = icmp sgt i64 %1243, 0
  br i1 %1248, label %1249, label %1323

1249:                                             ; preds = %1242
  %1250 = icmp ult i64 %1243, 8
  br i1 %1250, label %1313, label %1251

1251:                                             ; preds = %1249
  %1252 = and i64 %1243, -8
  %1253 = insertelement <4 x i32> undef, i32 %1234, i32 0
  %1254 = shufflevector <4 x i32> %1253, <4 x i32> undef, <4 x i32> zeroinitializer
  %1255 = insertelement <4 x i32> undef, i32 %1234, i32 0
  %1256 = shufflevector <4 x i32> %1255, <4 x i32> undef, <4 x i32> zeroinitializer
  %1257 = add nsw i64 %1252, -8
  %1258 = lshr exact i64 %1257, 3
  %1259 = add nuw nsw i64 %1258, 1
  %1260 = and i64 %1259, 1
  %1261 = icmp eq i64 %1257, 0
  br i1 %1261, label %1295, label %1262

1262:                                             ; preds = %1251
  %1263 = sub nuw nsw i64 %1259, %1260
  br label %1264

1264:                                             ; preds = %1264, %1262
  %1265 = phi i64 [ 0, %1262 ], [ %1292, %1264 ]
  %1266 = phi i64 [ %1263, %1262 ], [ %1293, %1264 ]
  %1267 = getelementptr inbounds i32, i32* %6, i64 %1265
  %1268 = bitcast i32* %1267 to <4 x i32>*
  %1269 = load <4 x i32>, <4 x i32>* %1268, align 4
  %1270 = getelementptr inbounds i32, i32* %1267, i64 4
  %1271 = bitcast i32* %1270 to <4 x i32>*
  %1272 = load <4 x i32>, <4 x i32>* %1271, align 4
  %1273 = icmp slt <4 x i32> %1269, %1254
  %1274 = icmp slt <4 x i32> %1272, %1256
  %1275 = select <4 x i1> %1273, <4 x i32> %1254, <4 x i32> %1269
  %1276 = select <4 x i1> %1274, <4 x i32> %1256, <4 x i32> %1272
  %1277 = bitcast i32* %1267 to <4 x i32>*
  store <4 x i32> %1275, <4 x i32>* %1277, align 4
  %1278 = bitcast i32* %1270 to <4 x i32>*
  store <4 x i32> %1276, <4 x i32>* %1278, align 4
  %1279 = or i64 %1265, 8
  %1280 = getelementptr inbounds i32, i32* %6, i64 %1279
  %1281 = bitcast i32* %1280 to <4 x i32>*
  %1282 = load <4 x i32>, <4 x i32>* %1281, align 4
  %1283 = getelementptr inbounds i32, i32* %1280, i64 4
  %1284 = bitcast i32* %1283 to <4 x i32>*
  %1285 = load <4 x i32>, <4 x i32>* %1284, align 4
  %1286 = icmp slt <4 x i32> %1282, %1254
  %1287 = icmp slt <4 x i32> %1285, %1256
  %1288 = select <4 x i1> %1286, <4 x i32> %1254, <4 x i32> %1282
  %1289 = select <4 x i1> %1287, <4 x i32> %1256, <4 x i32> %1285
  %1290 = bitcast i32* %1280 to <4 x i32>*
  store <4 x i32> %1288, <4 x i32>* %1290, align 4
  %1291 = bitcast i32* %1283 to <4 x i32>*
  store <4 x i32> %1289, <4 x i32>* %1291, align 4
  %1292 = add i64 %1265, 16
  %1293 = add i64 %1266, -2
  %1294 = icmp eq i64 %1293, 0
  br i1 %1294, label %1295, label %1264, !llvm.loop !456

1295:                                             ; preds = %1264, %1251
  %1296 = phi i64 [ 0, %1251 ], [ %1292, %1264 ]
  %1297 = icmp eq i64 %1260, 0
  br i1 %1297, label %1311, label %1298

1298:                                             ; preds = %1295
  %1299 = getelementptr inbounds i32, i32* %6, i64 %1296
  %1300 = bitcast i32* %1299 to <4 x i32>*
  %1301 = load <4 x i32>, <4 x i32>* %1300, align 4
  %1302 = getelementptr inbounds i32, i32* %1299, i64 4
  %1303 = bitcast i32* %1302 to <4 x i32>*
  %1304 = load <4 x i32>, <4 x i32>* %1303, align 4
  %1305 = icmp slt <4 x i32> %1301, %1254
  %1306 = icmp slt <4 x i32> %1304, %1256
  %1307 = select <4 x i1> %1305, <4 x i32> %1254, <4 x i32> %1301
  %1308 = select <4 x i1> %1306, <4 x i32> %1256, <4 x i32> %1304
  %1309 = bitcast i32* %1299 to <4 x i32>*
  store <4 x i32> %1307, <4 x i32>* %1309, align 4
  %1310 = bitcast i32* %1302 to <4 x i32>*
  store <4 x i32> %1308, <4 x i32>* %1310, align 4
  br label %1311

1311:                                             ; preds = %1295, %1298
  %1312 = icmp eq i64 %1243, %1252
  br i1 %1312, label %1323, label %1313

1313:                                             ; preds = %1311, %1249
  %1314 = phi i64 [ 0, %1249 ], [ %1252, %1311 ]
  br label %1315

1315:                                             ; preds = %1313, %1315
  %1316 = phi i64 [ %1321, %1315 ], [ %1314, %1313 ]
  %1317 = getelementptr inbounds i32, i32* %6, i64 %1316
  %1318 = load i32, i32* %1317, align 4
  %1319 = icmp slt i32 %1318, %1234
  %1320 = select i1 %1319, i32 %1234, i32 %1318
  store i32 %1320, i32* %1317, align 4
  %1321 = add nuw nsw i64 %1316, 1
  %1322 = icmp eq i64 %1321, %1243
  br i1 %1322, label %1323, label %1315, !llvm.loop !457

1323:                                             ; preds = %1315, %1311, %1242
  %1324 = icmp sgt i64 %1244, 3
  br i1 %1324, label %1325, label %1329

1325:                                             ; preds = %1323
  %1326 = insertelement <4 x i32> undef, i32 %1234, i32 0
  %1327 = shufflevector <4 x i32> %1326, <4 x i32> undef, <4 x i32> zeroinitializer
  %1328 = bitcast <4 x i32> %1327 to <2 x i64>
  br label %1411

1329:                                             ; preds = %1411, %1323
  %1330 = icmp slt i64 %1247, %132
  br i1 %1330, label %1331, label %1426

1331:                                             ; preds = %1329
  %1332 = sub nsw i64 %132, %1243
  %1333 = sub i64 %1332, %1246
  %1334 = icmp ult i64 %1333, 8
  br i1 %1334, label %1401, label %1335

1335:                                             ; preds = %1331
  %1336 = and i64 %1333, -8
  %1337 = add i64 %1247, %1336
  %1338 = insertelement <4 x i32> undef, i32 %1234, i32 0
  %1339 = shufflevector <4 x i32> %1338, <4 x i32> undef, <4 x i32> zeroinitializer
  %1340 = insertelement <4 x i32> undef, i32 %1234, i32 0
  %1341 = shufflevector <4 x i32> %1340, <4 x i32> undef, <4 x i32> zeroinitializer
  %1342 = add i64 %1336, -8
  %1343 = lshr exact i64 %1342, 3
  %1344 = add nuw nsw i64 %1343, 1
  %1345 = and i64 %1344, 1
  %1346 = icmp eq i64 %1342, 0
  br i1 %1346, label %1382, label %1347

1347:                                             ; preds = %1335
  %1348 = sub nuw nsw i64 %1344, %1345
  br label %1349

1349:                                             ; preds = %1349, %1347
  %1350 = phi i64 [ 0, %1347 ], [ %1379, %1349 ]
  %1351 = phi i64 [ %1348, %1347 ], [ %1380, %1349 ]
  %1352 = add i64 %1247, %1350
  %1353 = getelementptr inbounds i32, i32* %6, i64 %1352
  %1354 = bitcast i32* %1353 to <4 x i32>*
  %1355 = load <4 x i32>, <4 x i32>* %1354, align 4
  %1356 = getelementptr inbounds i32, i32* %1353, i64 4
  %1357 = bitcast i32* %1356 to <4 x i32>*
  %1358 = load <4 x i32>, <4 x i32>* %1357, align 4
  %1359 = icmp slt <4 x i32> %1355, %1339
  %1360 = icmp slt <4 x i32> %1358, %1341
  %1361 = select <4 x i1> %1359, <4 x i32> %1339, <4 x i32> %1355
  %1362 = select <4 x i1> %1360, <4 x i32> %1341, <4 x i32> %1358
  %1363 = bitcast i32* %1353 to <4 x i32>*
  store <4 x i32> %1361, <4 x i32>* %1363, align 4
  %1364 = bitcast i32* %1356 to <4 x i32>*
  store <4 x i32> %1362, <4 x i32>* %1364, align 4
  %1365 = or i64 %1350, 8
  %1366 = add i64 %1247, %1365
  %1367 = getelementptr inbounds i32, i32* %6, i64 %1366
  %1368 = bitcast i32* %1367 to <4 x i32>*
  %1369 = load <4 x i32>, <4 x i32>* %1368, align 4
  %1370 = getelementptr inbounds i32, i32* %1367, i64 4
  %1371 = bitcast i32* %1370 to <4 x i32>*
  %1372 = load <4 x i32>, <4 x i32>* %1371, align 4
  %1373 = icmp slt <4 x i32> %1369, %1339
  %1374 = icmp slt <4 x i32> %1372, %1341
  %1375 = select <4 x i1> %1373, <4 x i32> %1339, <4 x i32> %1369
  %1376 = select <4 x i1> %1374, <4 x i32> %1341, <4 x i32> %1372
  %1377 = bitcast i32* %1367 to <4 x i32>*
  store <4 x i32> %1375, <4 x i32>* %1377, align 4
  %1378 = bitcast i32* %1370 to <4 x i32>*
  store <4 x i32> %1376, <4 x i32>* %1378, align 4
  %1379 = add i64 %1350, 16
  %1380 = add i64 %1351, -2
  %1381 = icmp eq i64 %1380, 0
  br i1 %1381, label %1382, label %1349, !llvm.loop !458

1382:                                             ; preds = %1349, %1335
  %1383 = phi i64 [ 0, %1335 ], [ %1379, %1349 ]
  %1384 = icmp eq i64 %1345, 0
  br i1 %1384, label %1399, label %1385

1385:                                             ; preds = %1382
  %1386 = add i64 %1247, %1383
  %1387 = getelementptr inbounds i32, i32* %6, i64 %1386
  %1388 = bitcast i32* %1387 to <4 x i32>*
  %1389 = load <4 x i32>, <4 x i32>* %1388, align 4
  %1390 = getelementptr inbounds i32, i32* %1387, i64 4
  %1391 = bitcast i32* %1390 to <4 x i32>*
  %1392 = load <4 x i32>, <4 x i32>* %1391, align 4
  %1393 = icmp slt <4 x i32> %1389, %1339
  %1394 = icmp slt <4 x i32> %1392, %1341
  %1395 = select <4 x i1> %1393, <4 x i32> %1339, <4 x i32> %1389
  %1396 = select <4 x i1> %1394, <4 x i32> %1341, <4 x i32> %1392
  %1397 = bitcast i32* %1387 to <4 x i32>*
  store <4 x i32> %1395, <4 x i32>* %1397, align 4
  %1398 = bitcast i32* %1390 to <4 x i32>*
  store <4 x i32> %1396, <4 x i32>* %1398, align 4
  br label %1399

1399:                                             ; preds = %1382, %1385
  %1400 = icmp eq i64 %1333, %1336
  br i1 %1400, label %1426, label %1401

1401:                                             ; preds = %1399, %1331
  %1402 = phi i64 [ %1247, %1331 ], [ %1337, %1399 ]
  br label %1403

1403:                                             ; preds = %1401, %1403
  %1404 = phi i64 [ %1409, %1403 ], [ %1402, %1401 ]
  %1405 = getelementptr inbounds i32, i32* %6, i64 %1404
  %1406 = load i32, i32* %1405, align 4
  %1407 = icmp slt i32 %1406, %1234
  %1408 = select i1 %1407, i32 %1234, i32 %1406
  store i32 %1408, i32* %1405, align 4
  %1409 = add nsw i64 %1404, 1
  %1410 = icmp eq i64 %1409, %132
  br i1 %1410, label %1426, label %1403, !llvm.loop !459

1411:                                             ; preds = %1411, %1325
  %1412 = phi i64 [ %1424, %1411 ], [ %1243, %1325 ]
  %1413 = getelementptr inbounds i32, i32* %6, i64 %1412
  %1414 = bitcast i32* %1413 to <2 x i64>*
  %1415 = load <2 x i64>, <2 x i64>* %1414, align 1
  %1416 = bitcast <2 x i64> %1415 to <4 x i32>
  %1417 = icmp slt <4 x i32> %1327, %1416
  %1418 = sext <4 x i1> %1417 to <4 x i32>
  %1419 = bitcast <4 x i32> %1418 to <2 x i64>
  %1420 = and <2 x i64> %1415, %1419
  %1421 = xor <2 x i64> %1419, <i64 -1, i64 -1>
  %1422 = and <2 x i64> %1421, %1328
  %1423 = or <2 x i64> %1420, %1422
  store <2 x i64> %1423, <2 x i64>* %1414, align 16
  %1424 = add nsw i64 %1412, 4
  %1425 = icmp slt i64 %1424, %1247
  br i1 %1425, label %1411, label %1329

1426:                                             ; preds = %1403, %1399, %1329
  %1427 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 12
  %1428 = load i32, i32* %1427, align 4, !noalias !460
  br i1 %1235, label %1429, label %1435

1429:                                             ; preds = %1426
  %1430 = lshr i64 %133, 2
  %1431 = sub nsw i64 0, %1430
  %1432 = and i64 %1431, 3
  %1433 = icmp slt i64 %1432, %132
  %1434 = select i1 %1433, i64 %1432, i64 %132
  br label %1435

1435:                                             ; preds = %1429, %1426
  %1436 = phi i64 [ %1434, %1429 ], [ %132, %1426 ]
  %1437 = sub nsw i64 %132, %1436
  %1438 = sdiv i64 %1437, 4
  %1439 = shl nsw i64 %1438, 2
  %1440 = add nsw i64 %1439, %1436
  %1441 = icmp sgt i64 %1436, 0
  br i1 %1441, label %1442, label %1516

1442:                                             ; preds = %1435
  %1443 = icmp ult i64 %1436, 8
  br i1 %1443, label %1506, label %1444

1444:                                             ; preds = %1442
  %1445 = and i64 %1436, -8
  %1446 = insertelement <4 x i32> undef, i32 %1428, i32 0
  %1447 = shufflevector <4 x i32> %1446, <4 x i32> undef, <4 x i32> zeroinitializer
  %1448 = insertelement <4 x i32> undef, i32 %1428, i32 0
  %1449 = shufflevector <4 x i32> %1448, <4 x i32> undef, <4 x i32> zeroinitializer
  %1450 = add nsw i64 %1445, -8
  %1451 = lshr exact i64 %1450, 3
  %1452 = add nuw nsw i64 %1451, 1
  %1453 = and i64 %1452, 1
  %1454 = icmp eq i64 %1450, 0
  br i1 %1454, label %1488, label %1455

1455:                                             ; preds = %1444
  %1456 = sub nuw nsw i64 %1452, %1453
  br label %1457

1457:                                             ; preds = %1457, %1455
  %1458 = phi i64 [ 0, %1455 ], [ %1485, %1457 ]
  %1459 = phi i64 [ %1456, %1455 ], [ %1486, %1457 ]
  %1460 = getelementptr inbounds i32, i32* %6, i64 %1458
  %1461 = bitcast i32* %1460 to <4 x i32>*
  %1462 = load <4 x i32>, <4 x i32>* %1461, align 4
  %1463 = getelementptr inbounds i32, i32* %1460, i64 4
  %1464 = bitcast i32* %1463 to <4 x i32>*
  %1465 = load <4 x i32>, <4 x i32>* %1464, align 4
  %1466 = icmp slt <4 x i32> %1447, %1462
  %1467 = icmp slt <4 x i32> %1449, %1465
  %1468 = select <4 x i1> %1466, <4 x i32> %1447, <4 x i32> %1462
  %1469 = select <4 x i1> %1467, <4 x i32> %1449, <4 x i32> %1465
  %1470 = bitcast i32* %1460 to <4 x i32>*
  store <4 x i32> %1468, <4 x i32>* %1470, align 4
  %1471 = bitcast i32* %1463 to <4 x i32>*
  store <4 x i32> %1469, <4 x i32>* %1471, align 4
  %1472 = or i64 %1458, 8
  %1473 = getelementptr inbounds i32, i32* %6, i64 %1472
  %1474 = bitcast i32* %1473 to <4 x i32>*
  %1475 = load <4 x i32>, <4 x i32>* %1474, align 4
  %1476 = getelementptr inbounds i32, i32* %1473, i64 4
  %1477 = bitcast i32* %1476 to <4 x i32>*
  %1478 = load <4 x i32>, <4 x i32>* %1477, align 4
  %1479 = icmp slt <4 x i32> %1447, %1475
  %1480 = icmp slt <4 x i32> %1449, %1478
  %1481 = select <4 x i1> %1479, <4 x i32> %1447, <4 x i32> %1475
  %1482 = select <4 x i1> %1480, <4 x i32> %1449, <4 x i32> %1478
  %1483 = bitcast i32* %1473 to <4 x i32>*
  store <4 x i32> %1481, <4 x i32>* %1483, align 4
  %1484 = bitcast i32* %1476 to <4 x i32>*
  store <4 x i32> %1482, <4 x i32>* %1484, align 4
  %1485 = add i64 %1458, 16
  %1486 = add i64 %1459, -2
  %1487 = icmp eq i64 %1486, 0
  br i1 %1487, label %1488, label %1457, !llvm.loop !465

1488:                                             ; preds = %1457, %1444
  %1489 = phi i64 [ 0, %1444 ], [ %1485, %1457 ]
  %1490 = icmp eq i64 %1453, 0
  br i1 %1490, label %1504, label %1491

1491:                                             ; preds = %1488
  %1492 = getelementptr inbounds i32, i32* %6, i64 %1489
  %1493 = bitcast i32* %1492 to <4 x i32>*
  %1494 = load <4 x i32>, <4 x i32>* %1493, align 4
  %1495 = getelementptr inbounds i32, i32* %1492, i64 4
  %1496 = bitcast i32* %1495 to <4 x i32>*
  %1497 = load <4 x i32>, <4 x i32>* %1496, align 4
  %1498 = icmp slt <4 x i32> %1447, %1494
  %1499 = icmp slt <4 x i32> %1449, %1497
  %1500 = select <4 x i1> %1498, <4 x i32> %1447, <4 x i32> %1494
  %1501 = select <4 x i1> %1499, <4 x i32> %1449, <4 x i32> %1497
  %1502 = bitcast i32* %1492 to <4 x i32>*
  store <4 x i32> %1500, <4 x i32>* %1502, align 4
  %1503 = bitcast i32* %1495 to <4 x i32>*
  store <4 x i32> %1501, <4 x i32>* %1503, align 4
  br label %1504

1504:                                             ; preds = %1488, %1491
  %1505 = icmp eq i64 %1436, %1445
  br i1 %1505, label %1516, label %1506

1506:                                             ; preds = %1504, %1442
  %1507 = phi i64 [ 0, %1442 ], [ %1445, %1504 ]
  br label %1508

1508:                                             ; preds = %1506, %1508
  %1509 = phi i64 [ %1514, %1508 ], [ %1507, %1506 ]
  %1510 = getelementptr inbounds i32, i32* %6, i64 %1509
  %1511 = load i32, i32* %1510, align 4
  %1512 = icmp slt i32 %1428, %1511
  %1513 = select i1 %1512, i32 %1428, i32 %1511
  store i32 %1513, i32* %1510, align 4
  %1514 = add nuw nsw i64 %1509, 1
  %1515 = icmp eq i64 %1514, %1436
  br i1 %1515, label %1516, label %1508, !llvm.loop !466

1516:                                             ; preds = %1508, %1504, %1435
  %1517 = icmp sgt i64 %1437, 3
  br i1 %1517, label %1518, label %1522

1518:                                             ; preds = %1516
  %1519 = insertelement <4 x i32> undef, i32 %1428, i32 0
  %1520 = shufflevector <4 x i32> %1519, <4 x i32> undef, <4 x i32> zeroinitializer
  %1521 = bitcast <4 x i32> %1520 to <2 x i64>
  br label %1604

1522:                                             ; preds = %1604, %1516
  %1523 = icmp slt i64 %1440, %132
  br i1 %1523, label %1524, label %1619

1524:                                             ; preds = %1522
  %1525 = sub nsw i64 %132, %1436
  %1526 = sub i64 %1525, %1439
  %1527 = icmp ult i64 %1526, 8
  br i1 %1527, label %1594, label %1528

1528:                                             ; preds = %1524
  %1529 = and i64 %1526, -8
  %1530 = add i64 %1440, %1529
  %1531 = insertelement <4 x i32> undef, i32 %1428, i32 0
  %1532 = shufflevector <4 x i32> %1531, <4 x i32> undef, <4 x i32> zeroinitializer
  %1533 = insertelement <4 x i32> undef, i32 %1428, i32 0
  %1534 = shufflevector <4 x i32> %1533, <4 x i32> undef, <4 x i32> zeroinitializer
  %1535 = add i64 %1529, -8
  %1536 = lshr exact i64 %1535, 3
  %1537 = add nuw nsw i64 %1536, 1
  %1538 = and i64 %1537, 1
  %1539 = icmp eq i64 %1535, 0
  br i1 %1539, label %1575, label %1540

1540:                                             ; preds = %1528
  %1541 = sub nuw nsw i64 %1537, %1538
  br label %1542

1542:                                             ; preds = %1542, %1540
  %1543 = phi i64 [ 0, %1540 ], [ %1572, %1542 ]
  %1544 = phi i64 [ %1541, %1540 ], [ %1573, %1542 ]
  %1545 = add i64 %1440, %1543
  %1546 = getelementptr inbounds i32, i32* %6, i64 %1545
  %1547 = bitcast i32* %1546 to <4 x i32>*
  %1548 = load <4 x i32>, <4 x i32>* %1547, align 4
  %1549 = getelementptr inbounds i32, i32* %1546, i64 4
  %1550 = bitcast i32* %1549 to <4 x i32>*
  %1551 = load <4 x i32>, <4 x i32>* %1550, align 4
  %1552 = icmp slt <4 x i32> %1532, %1548
  %1553 = icmp slt <4 x i32> %1534, %1551
  %1554 = select <4 x i1> %1552, <4 x i32> %1532, <4 x i32> %1548
  %1555 = select <4 x i1> %1553, <4 x i32> %1534, <4 x i32> %1551
  %1556 = bitcast i32* %1546 to <4 x i32>*
  store <4 x i32> %1554, <4 x i32>* %1556, align 4
  %1557 = bitcast i32* %1549 to <4 x i32>*
  store <4 x i32> %1555, <4 x i32>* %1557, align 4
  %1558 = or i64 %1543, 8
  %1559 = add i64 %1440, %1558
  %1560 = getelementptr inbounds i32, i32* %6, i64 %1559
  %1561 = bitcast i32* %1560 to <4 x i32>*
  %1562 = load <4 x i32>, <4 x i32>* %1561, align 4
  %1563 = getelementptr inbounds i32, i32* %1560, i64 4
  %1564 = bitcast i32* %1563 to <4 x i32>*
  %1565 = load <4 x i32>, <4 x i32>* %1564, align 4
  %1566 = icmp slt <4 x i32> %1532, %1562
  %1567 = icmp slt <4 x i32> %1534, %1565
  %1568 = select <4 x i1> %1566, <4 x i32> %1532, <4 x i32> %1562
  %1569 = select <4 x i1> %1567, <4 x i32> %1534, <4 x i32> %1565
  %1570 = bitcast i32* %1560 to <4 x i32>*
  store <4 x i32> %1568, <4 x i32>* %1570, align 4
  %1571 = bitcast i32* %1563 to <4 x i32>*
  store <4 x i32> %1569, <4 x i32>* %1571, align 4
  %1572 = add i64 %1543, 16
  %1573 = add i64 %1544, -2
  %1574 = icmp eq i64 %1573, 0
  br i1 %1574, label %1575, label %1542, !llvm.loop !467

1575:                                             ; preds = %1542, %1528
  %1576 = phi i64 [ 0, %1528 ], [ %1572, %1542 ]
  %1577 = icmp eq i64 %1538, 0
  br i1 %1577, label %1592, label %1578

1578:                                             ; preds = %1575
  %1579 = add i64 %1440, %1576
  %1580 = getelementptr inbounds i32, i32* %6, i64 %1579
  %1581 = bitcast i32* %1580 to <4 x i32>*
  %1582 = load <4 x i32>, <4 x i32>* %1581, align 4
  %1583 = getelementptr inbounds i32, i32* %1580, i64 4
  %1584 = bitcast i32* %1583 to <4 x i32>*
  %1585 = load <4 x i32>, <4 x i32>* %1584, align 4
  %1586 = icmp slt <4 x i32> %1532, %1582
  %1587 = icmp slt <4 x i32> %1534, %1585
  %1588 = select <4 x i1> %1586, <4 x i32> %1532, <4 x i32> %1582
  %1589 = select <4 x i1> %1587, <4 x i32> %1534, <4 x i32> %1585
  %1590 = bitcast i32* %1580 to <4 x i32>*
  store <4 x i32> %1588, <4 x i32>* %1590, align 4
  %1591 = bitcast i32* %1583 to <4 x i32>*
  store <4 x i32> %1589, <4 x i32>* %1591, align 4
  br label %1592

1592:                                             ; preds = %1575, %1578
  %1593 = icmp eq i64 %1526, %1529
  br i1 %1593, label %1619, label %1594

1594:                                             ; preds = %1592, %1524
  %1595 = phi i64 [ %1440, %1524 ], [ %1530, %1592 ]
  br label %1596

1596:                                             ; preds = %1594, %1596
  %1597 = phi i64 [ %1602, %1596 ], [ %1595, %1594 ]
  %1598 = getelementptr inbounds i32, i32* %6, i64 %1597
  %1599 = load i32, i32* %1598, align 4
  %1600 = icmp slt i32 %1428, %1599
  %1601 = select i1 %1600, i32 %1428, i32 %1599
  store i32 %1601, i32* %1598, align 4
  %1602 = add nsw i64 %1597, 1
  %1603 = icmp eq i64 %1602, %132
  br i1 %1603, label %1619, label %1596, !llvm.loop !468

1604:                                             ; preds = %1604, %1518
  %1605 = phi i64 [ %1617, %1604 ], [ %1436, %1518 ]
  %1606 = getelementptr inbounds i32, i32* %6, i64 %1605
  %1607 = bitcast i32* %1606 to <2 x i64>*
  %1608 = load <2 x i64>, <2 x i64>* %1607, align 1
  %1609 = bitcast <2 x i64> %1608 to <4 x i32>
  %1610 = icmp sgt <4 x i32> %1520, %1609
  %1611 = sext <4 x i1> %1610 to <4 x i32>
  %1612 = bitcast <4 x i32> %1611 to <2 x i64>
  %1613 = and <2 x i64> %1608, %1612
  %1614 = xor <2 x i64> %1612, <i64 -1, i64 -1>
  %1615 = and <2 x i64> %1614, %1521
  %1616 = or <2 x i64> %1613, %1615
  store <2 x i64> %1616, <2 x i64>* %1607, align 16
  %1617 = add nsw i64 %1605, 4
  %1618 = icmp slt i64 %1617, %1440
  br i1 %1618, label %1604, label %1522

1619:                                             ; preds = %1596, %1592, %1522, %1230
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13optimized_ops20BroadcastAddDispatchIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_(%"struct.tflite::ArithmeticParams"* dereferenceable(80), %"class.tflite::RuntimeShape"* dereferenceable(32), float*, %"class.tflite::RuntimeShape"* dereferenceable(32), float*, %"class.tflite::RuntimeShape"* dereferenceable(32), float*) local_unnamed_addr #7 comdat {
  %8 = alloca %"struct.tflite::ArithmeticParams", align 4
  %9 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 0
  %10 = load i8, i8* %9, align 4
  %11 = icmp eq i8 %10, 4
  br i1 %11, label %12, label %13

12:                                               ; preds = %7
  tail call void @_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf(%"struct.tflite::ArithmeticParams"* dereferenceable(80) %0, %"class.tflite::RuntimeShape"* dereferenceable(32) %1, float* %2, %"class.tflite::RuntimeShape"* dereferenceable(32) %3, float* %4, %"class.tflite::RuntimeShape"* dereferenceable(32) %5, float* %6)
  br label %340

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %14) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %14, i8* align 4 %9, i64 80, i1 false) #12
  %15 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 1
  store i32 %16, i32* %17, align 4
  %18 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 7
  %19 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 2
  store i32 %20, i32* %21, align 4
  %22 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %0, i64 0, i32 7
  %23 = bitcast i32* %22 to <4 x i32>*
  %24 = load <4 x i32>, <4 x i32>* %23, align 4
  %25 = shufflevector <4 x i32> %24, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %26 = bitcast i32* %18 to <4 x i32>*
  store <4 x i32> %25, <4 x i32>* %26, align 4
  %27 = icmp eq i8 %10, 2
  %28 = select i1 %27, %"struct.tflite::ArithmeticParams"* %0, %"struct.tflite::ArithmeticParams"* %8
  %29 = select i1 %27, float* %2, float* %4
  %30 = select i1 %27, float* %4, float* %2
  %31 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %28, i64 0, i32 15, i64 0
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %28, i64 0, i32 15, i64 1
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %28, i64 0, i32 15, i64 2
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %28, i64 0, i32 15, i64 3
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %28, i64 0, i32 15, i64 4
  %40 = load i32, i32* %39, align 4
  %41 = icmp sgt i32 %40, 1
  %42 = icmp sgt i32 %32, 0
  br i1 %41, label %61, label %43

43:                                               ; preds = %13
  br i1 %42, label %44, label %339

44:                                               ; preds = %43
  %45 = icmp sgt i32 %34, 0
  %46 = icmp sgt i32 %36, 0
  %47 = sext i32 %38 to i64
  %48 = icmp sgt i32 %38, 0
  %49 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %28, i64 0, i32 13
  %50 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %28, i64 0, i32 14
  %51 = zext i32 %38 to i64
  %52 = getelementptr %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %28, i64 0, i32 14
  %53 = bitcast float* %52 to i8*
  %54 = getelementptr i8, i8* %53, i64 1
  %55 = icmp ult i32 %38, 4
  %56 = and i64 %51, 4294967292
  %57 = icmp eq i64 %56, %51
  %58 = and i64 %51, 1
  %59 = icmp eq i64 %58, 0
  %60 = sub nsw i64 0, %51
  br label %221

61:                                               ; preds = %13
  br i1 %42, label %62, label %339

62:                                               ; preds = %61
  %63 = icmp sgt i32 %34, 0
  %64 = icmp sgt i32 %36, 0
  %65 = icmp sgt i32 %38, 0
  %66 = sext i32 %40 to i64
  %67 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %28, i64 0, i32 13
  %68 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %28, i64 0, i32 14
  %69 = zext i32 %40 to i64
  %70 = getelementptr %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %28, i64 0, i32 14
  %71 = bitcast float* %70 to i8*
  %72 = getelementptr i8, i8* %71, i64 1
  %73 = icmp ult i32 %40, 4
  %74 = and i64 %69, 4294967292
  %75 = icmp eq i64 %74, %69
  %76 = and i64 %69, 1
  %77 = icmp eq i64 %76, 0
  %78 = sub nsw i64 0, %69
  br label %79

79:                                               ; preds = %88, %62
  %80 = phi i32 [ 0, %62 ], [ %92, %88 ]
  %81 = phi float* [ %30, %62 ], [ %91, %88 ]
  %82 = phi float* [ %29, %62 ], [ %90, %88 ]
  %83 = phi float* [ %6, %62 ], [ %89, %88 ]
  br i1 %63, label %84, label %88

84:                                               ; preds = %79, %104
  %85 = phi i32 [ %108, %104 ], [ 0, %79 ]
  %86 = phi float* [ %106, %104 ], [ %82, %79 ]
  %87 = phi float* [ %105, %104 ], [ %83, %79 ]
  br i1 %64, label %94, label %104

88:                                               ; preds = %104, %79
  %89 = phi float* [ %83, %79 ], [ %105, %104 ]
  %90 = phi float* [ %82, %79 ], [ %106, %104 ]
  %91 = phi float* [ null, %79 ], [ %107, %104 ]
  %92 = add nuw nsw i32 %80, 1
  %93 = icmp eq i32 %92, %32
  br i1 %93, label %339, label %79

94:                                               ; preds = %84, %110
  %95 = phi i64 [ %116, %110 ], [ 0, %84 ]
  %96 = phi i32 [ %114, %110 ], [ 0, %84 ]
  %97 = phi float* [ %112, %110 ], [ %81, %84 ]
  %98 = phi float* [ %113, %110 ], [ %86, %84 ]
  %99 = phi float* [ %111, %110 ], [ %87, %84 ]
  %100 = mul i64 %95, %66
  %101 = getelementptr float, float* %86, i64 %100
  %102 = add i64 %100, %69
  %103 = getelementptr float, float* %86, i64 %102
  br i1 %65, label %117, label %110

104:                                              ; preds = %110, %84
  %105 = phi float* [ %87, %84 ], [ %111, %110 ]
  %106 = phi float* [ %86, %84 ], [ %113, %110 ]
  %107 = phi float* [ %81, %84 ], [ %112, %110 ]
  %108 = add nuw nsw i32 %85, 1
  %109 = icmp eq i32 %108, %34
  br i1 %109, label %88, label %84

110:                                              ; preds = %215, %94
  %111 = phi float* [ %99, %94 ], [ %217, %215 ]
  %112 = phi float* [ %97, %94 ], [ %216, %215 ]
  %113 = getelementptr inbounds float, float* %98, i64 %66
  %114 = add nuw nsw i32 %96, 1
  %115 = icmp eq i32 %114, %36
  %116 = add i64 %95, 1
  br i1 %115, label %104, label %94

117:                                              ; preds = %94, %215
  %118 = phi i64 [ %220, %215 ], [ 0, %94 ]
  %119 = phi i32 [ %218, %215 ], [ 0, %94 ]
  %120 = phi float* [ %216, %215 ], [ %97, %94 ]
  %121 = phi float* [ %217, %215 ], [ %99, %94 ]
  %122 = mul i64 %118, %66
  %123 = getelementptr float, float* %99, i64 %122
  %124 = add i64 %122, %69
  %125 = getelementptr float, float* %99, i64 %124
  br i1 %73, label %166, label %126

126:                                              ; preds = %117
  %127 = bitcast float* %123 to i8*
  %128 = getelementptr float, float* %97, i64 %124
  %129 = getelementptr float, float* %97, i64 %122
  %130 = icmp ult float* %123, %128
  %131 = icmp ult float* %129, %125
  %132 = and i1 %130, %131
  %133 = icmp ult float* %123, %103
  %134 = icmp ult float* %101, %125
  %135 = and i1 %133, %134
  %136 = or i1 %132, %135
  %137 = icmp ugt i8* %72, %127
  %138 = icmp ult float* %68, %125
  %139 = and i1 %137, %138
  %140 = or i1 %136, %139
  br i1 %140, label %166, label %141

141:                                              ; preds = %126
  %142 = load float, float* %67, align 4, !alias.scope !469
  %143 = insertelement <4 x float> undef, float %142, i32 0
  %144 = shufflevector <4 x float> %143, <4 x float> undef, <4 x i32> zeroinitializer
  %145 = load float, float* %68, align 4, !alias.scope !469
  %146 = insertelement <4 x float> undef, float %145, i32 0
  %147 = shufflevector <4 x float> %146, <4 x float> undef, <4 x i32> zeroinitializer
  br label %148

148:                                              ; preds = %148, %141
  %149 = phi i64 [ 0, %141 ], [ %163, %148 ]
  %150 = getelementptr inbounds float, float* %98, i64 %149
  %151 = bitcast float* %150 to <4 x float>*
  %152 = load <4 x float>, <4 x float>* %151, align 4, !alias.scope !472
  %153 = getelementptr inbounds float, float* %120, i64 %149
  %154 = bitcast float* %153 to <4 x float>*
  %155 = load <4 x float>, <4 x float>* %154, align 4, !alias.scope !474
  %156 = fadd <4 x float> %152, %155
  %157 = fcmp olt <4 x float> %156, %144
  %158 = select <4 x i1> %157, <4 x float> %144, <4 x float> %156
  %159 = fcmp ogt <4 x float> %158, %147
  %160 = select <4 x i1> %159, <4 x float> %147, <4 x float> %158
  %161 = getelementptr inbounds float, float* %121, i64 %149
  %162 = bitcast float* %161 to <4 x float>*
  store <4 x float> %160, <4 x float>* %162, align 4, !alias.scope !476, !noalias !478
  %163 = add i64 %149, 4
  %164 = icmp eq i64 %163, %74
  br i1 %164, label %165, label %148, !llvm.loop !479

165:                                              ; preds = %148
  br i1 %75, label %215, label %166

166:                                              ; preds = %165, %126, %117
  %167 = phi i64 [ 0, %126 ], [ 0, %117 ], [ %74, %165 ]
  %168 = xor i64 %167, -1
  br i1 %77, label %183, label %169

169:                                              ; preds = %166
  %170 = getelementptr inbounds float, float* %98, i64 %167
  %171 = load float, float* %170, align 4
  %172 = getelementptr inbounds float, float* %120, i64 %167
  %173 = load float, float* %172, align 4
  %174 = fadd float %171, %173
  %175 = load float, float* %67, align 4
  %176 = load float, float* %68, align 4
  %177 = fcmp olt float %174, %175
  %178 = select i1 %177, float %175, float %174
  %179 = fcmp ogt float %178, %176
  %180 = select i1 %179, float %176, float %178
  %181 = getelementptr inbounds float, float* %121, i64 %167
  store float %180, float* %181, align 4
  %182 = or i64 %167, 1
  br label %183

183:                                              ; preds = %169, %166
  %184 = phi i64 [ %182, %169 ], [ %167, %166 ]
  %185 = icmp eq i64 %168, %78
  br i1 %185, label %215, label %186

186:                                              ; preds = %183, %186
  %187 = phi i64 [ %213, %186 ], [ %184, %183 ]
  %188 = getelementptr inbounds float, float* %98, i64 %187
  %189 = load float, float* %188, align 4
  %190 = getelementptr inbounds float, float* %120, i64 %187
  %191 = load float, float* %190, align 4
  %192 = fadd float %189, %191
  %193 = load float, float* %67, align 4
  %194 = load float, float* %68, align 4
  %195 = fcmp olt float %192, %193
  %196 = select i1 %195, float %193, float %192
  %197 = fcmp ogt float %196, %194
  %198 = select i1 %197, float %194, float %196
  %199 = getelementptr inbounds float, float* %121, i64 %187
  store float %198, float* %199, align 4
  %200 = add nuw nsw i64 %187, 1
  %201 = getelementptr inbounds float, float* %98, i64 %200
  %202 = load float, float* %201, align 4
  %203 = getelementptr inbounds float, float* %120, i64 %200
  %204 = load float, float* %203, align 4
  %205 = fadd float %202, %204
  %206 = load float, float* %67, align 4
  %207 = load float, float* %68, align 4
  %208 = fcmp olt float %205, %206
  %209 = select i1 %208, float %206, float %205
  %210 = fcmp ogt float %209, %207
  %211 = select i1 %210, float %207, float %209
  %212 = getelementptr inbounds float, float* %121, i64 %200
  store float %211, float* %212, align 4
  %213 = add nuw nsw i64 %187, 2
  %214 = icmp eq i64 %213, %69
  br i1 %214, label %215, label %186, !llvm.loop !480

215:                                              ; preds = %183, %186, %165
  %216 = getelementptr inbounds float, float* %120, i64 %66
  %217 = getelementptr inbounds float, float* %121, i64 %66
  %218 = add nuw nsw i32 %119, 1
  %219 = icmp eq i32 %218, %38
  %220 = add i64 %118, 1
  br i1 %219, label %110, label %117

221:                                              ; preds = %230, %44
  %222 = phi i32 [ 0, %44 ], [ %234, %230 ]
  %223 = phi float* [ %30, %44 ], [ %233, %230 ]
  %224 = phi float* [ %29, %44 ], [ %232, %230 ]
  %225 = phi float* [ %6, %44 ], [ %231, %230 ]
  br i1 %45, label %226, label %230

226:                                              ; preds = %221, %236
  %227 = phi i32 [ %240, %236 ], [ 0, %221 ]
  %228 = phi float* [ %238, %236 ], [ %224, %221 ]
  %229 = phi float* [ %237, %236 ], [ %225, %221 ]
  br i1 %46, label %242, label %236

230:                                              ; preds = %236, %221
  %231 = phi float* [ %225, %221 ], [ %237, %236 ]
  %232 = phi float* [ %224, %221 ], [ %238, %236 ]
  %233 = phi float* [ null, %221 ], [ %239, %236 ]
  %234 = add nuw nsw i32 %222, 1
  %235 = icmp eq i32 %234, %32
  br i1 %235, label %339, label %221

236:                                              ; preds = %332, %226
  %237 = phi float* [ %229, %226 ], [ %334, %332 ]
  %238 = phi float* [ %228, %226 ], [ %335, %332 ]
  %239 = phi float* [ %223, %226 ], [ %333, %332 ]
  %240 = add nuw nsw i32 %227, 1
  %241 = icmp eq i32 %240, %34
  br i1 %241, label %230, label %226

242:                                              ; preds = %226, %332
  %243 = phi i64 [ %338, %332 ], [ 0, %226 ]
  %244 = phi i32 [ %336, %332 ], [ 0, %226 ]
  %245 = phi float* [ %333, %332 ], [ %223, %226 ]
  %246 = phi float* [ %335, %332 ], [ %228, %226 ]
  %247 = phi float* [ %334, %332 ], [ %229, %226 ]
  %248 = mul i64 %243, %47
  %249 = getelementptr float, float* %229, i64 %248
  %250 = bitcast float* %249 to i8*
  %251 = add i64 %248, %51
  %252 = getelementptr float, float* %229, i64 %251
  %253 = getelementptr float, float* %223, i64 %248
  %254 = getelementptr float, float* %223, i64 %251
  %255 = load float, float* %246, align 4
  br i1 %48, label %256, label %332

256:                                              ; preds = %242
  br i1 %55, label %289, label %257

257:                                              ; preds = %256
  %258 = icmp ult float* %249, %254
  %259 = icmp ult float* %253, %252
  %260 = and i1 %258, %259
  %261 = icmp ugt i8* %54, %250
  %262 = icmp ult float* %50, %252
  %263 = and i1 %261, %262
  %264 = or i1 %260, %263
  br i1 %264, label %289, label %265

265:                                              ; preds = %257
  %266 = insertelement <4 x float> undef, float %255, i32 0
  %267 = shufflevector <4 x float> %266, <4 x float> undef, <4 x i32> zeroinitializer
  %268 = load float, float* %49, align 4, !alias.scope !481
  %269 = insertelement <4 x float> undef, float %268, i32 0
  %270 = shufflevector <4 x float> %269, <4 x float> undef, <4 x i32> zeroinitializer
  %271 = load float, float* %50, align 4, !alias.scope !481
  %272 = insertelement <4 x float> undef, float %271, i32 0
  %273 = shufflevector <4 x float> %272, <4 x float> undef, <4 x i32> zeroinitializer
  br label %274

274:                                              ; preds = %274, %265
  %275 = phi i64 [ 0, %265 ], [ %286, %274 ]
  %276 = getelementptr inbounds float, float* %245, i64 %275
  %277 = bitcast float* %276 to <4 x float>*
  %278 = load <4 x float>, <4 x float>* %277, align 4, !alias.scope !484
  %279 = fadd <4 x float> %267, %278
  %280 = fcmp olt <4 x float> %279, %270
  %281 = select <4 x i1> %280, <4 x float> %270, <4 x float> %279
  %282 = fcmp ogt <4 x float> %281, %273
  %283 = select <4 x i1> %282, <4 x float> %273, <4 x float> %281
  %284 = getelementptr inbounds float, float* %247, i64 %275
  %285 = bitcast float* %284 to <4 x float>*
  store <4 x float> %283, <4 x float>* %285, align 4, !alias.scope !486, !noalias !488
  %286 = add i64 %275, 4
  %287 = icmp eq i64 %286, %56
  br i1 %287, label %288, label %274, !llvm.loop !489

288:                                              ; preds = %274
  br i1 %57, label %332, label %289

289:                                              ; preds = %288, %257, %256
  %290 = phi i64 [ 0, %257 ], [ 0, %256 ], [ %56, %288 ]
  %291 = xor i64 %290, -1
  br i1 %59, label %304, label %292

292:                                              ; preds = %289
  %293 = getelementptr inbounds float, float* %245, i64 %290
  %294 = load float, float* %293, align 4
  %295 = fadd float %255, %294
  %296 = load float, float* %49, align 4
  %297 = load float, float* %50, align 4
  %298 = fcmp olt float %295, %296
  %299 = select i1 %298, float %296, float %295
  %300 = fcmp ogt float %299, %297
  %301 = select i1 %300, float %297, float %299
  %302 = getelementptr inbounds float, float* %247, i64 %290
  store float %301, float* %302, align 4
  %303 = or i64 %290, 1
  br label %304

304:                                              ; preds = %292, %289
  %305 = phi i64 [ %303, %292 ], [ %290, %289 ]
  %306 = icmp eq i64 %291, %60
  br i1 %306, label %332, label %307

307:                                              ; preds = %304, %307
  %308 = phi i64 [ %330, %307 ], [ %305, %304 ]
  %309 = getelementptr inbounds float, float* %245, i64 %308
  %310 = load float, float* %309, align 4
  %311 = fadd float %255, %310
  %312 = load float, float* %49, align 4
  %313 = load float, float* %50, align 4
  %314 = fcmp olt float %311, %312
  %315 = select i1 %314, float %312, float %311
  %316 = fcmp ogt float %315, %313
  %317 = select i1 %316, float %313, float %315
  %318 = getelementptr inbounds float, float* %247, i64 %308
  store float %317, float* %318, align 4
  %319 = add nuw nsw i64 %308, 1
  %320 = getelementptr inbounds float, float* %245, i64 %319
  %321 = load float, float* %320, align 4
  %322 = fadd float %255, %321
  %323 = load float, float* %49, align 4
  %324 = load float, float* %50, align 4
  %325 = fcmp olt float %322, %323
  %326 = select i1 %325, float %323, float %322
  %327 = fcmp ogt float %326, %324
  %328 = select i1 %327, float %324, float %326
  %329 = getelementptr inbounds float, float* %247, i64 %319
  store float %328, float* %329, align 4
  %330 = add nuw nsw i64 %308, 2
  %331 = icmp eq i64 %330, %51
  br i1 %331, label %332, label %307, !llvm.loop !490

332:                                              ; preds = %304, %307, %288, %242
  %333 = getelementptr inbounds float, float* %245, i64 %47
  %334 = getelementptr inbounds float, float* %247, i64 %47
  %335 = getelementptr inbounds float, float* %246, i64 1
  %336 = add nuw nsw i32 %244, 1
  %337 = icmp eq i32 %336, %36
  %338 = add i64 %243, 1
  br i1 %337, label %236, label %242

339:                                              ; preds = %230, %88, %43, %61
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %14) #12
  br label %340

340:                                              ; preds = %339, %12
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite21optimized_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa(i32, %"struct.tflite::ArithmeticParams"* dereferenceable(80), i8*, i8*, i8*) local_unnamed_addr #7 comdat {
  %6 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 2
  %7 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 1
  %8 = icmp sgt i32 %0, 0
  br i1 %8, label %9, label %148

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 6
  %11 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 7
  %12 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 8
  %13 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 9
  %14 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 10
  %15 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 4
  %16 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 5
  %17 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 3
  %18 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 12
  %19 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 11
  %20 = zext i32 %0 to i64
  br label %21

21:                                               ; preds = %121, %9
  %22 = phi i64 [ 0, %9 ], [ %146, %121 ]
  %23 = load i32, i32* %7, align 4
  %24 = getelementptr inbounds i8, i8* %2, i64 %22
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = add nsw i32 %23, %26
  %28 = load i32, i32* %6, align 4
  %29 = getelementptr inbounds i8, i8* %3, i64 %22
  %30 = load i8, i8* %29, align 1
  %31 = sext i8 %30 to i32
  %32 = add nsw i32 %28, %31
  %33 = load i32, i32* %10, align 4
  %34 = shl i32 %27, %33
  %35 = shl i32 %32, %33
  %36 = load i32, i32* %11, align 4
  %37 = load i32, i32* %12, align 4
  %38 = icmp eq i32 %34, %36
  br i1 %38, label %43, label %39

39:                                               ; preds = %21
  %40 = sext i32 %34 to i64
  %41 = sext i32 %36 to i64
  %42 = mul nsw i64 %41, %40
  br label %47

43:                                               ; preds = %21
  %44 = icmp eq i32 %34, -2147483648
  %45 = sext i32 %34 to i64
  %46 = mul nsw i64 %45, %45
  br i1 %44, label %54, label %47

47:                                               ; preds = %43, %39
  %48 = phi i64 [ %42, %39 ], [ %46, %43 ]
  %49 = icmp sgt i64 %48, -1
  %50 = select i1 %49, i64 1073741824, i64 -1073741823
  %51 = add nsw i64 %50, %48
  %52 = sdiv i64 %51, 2147483648
  %53 = trunc i64 %52 to i32
  br label %54

54:                                               ; preds = %43, %47
  %55 = phi i32 [ %53, %47 ], [ 2147483647, %43 ]
  %56 = sub nsw i32 0, %37
  %57 = zext i32 %56 to i64
  %58 = shl nsw i64 -1, %57
  %59 = trunc i64 %58 to i32
  %60 = xor i32 %59, -1
  %61 = and i32 %55, %60
  %62 = ashr i32 %60, 1
  %63 = lshr i32 %55, 31
  %64 = add nsw i32 %63, %62
  %65 = ashr i32 %55, %56
  %66 = icmp sgt i32 %61, %64
  %67 = zext i1 %66 to i32
  %68 = load i32, i32* %13, align 4
  %69 = load i32, i32* %14, align 4
  %70 = icmp eq i32 %35, %68
  br i1 %70, label %75, label %71

71:                                               ; preds = %54
  %72 = sext i32 %35 to i64
  %73 = sext i32 %68 to i64
  %74 = mul nsw i64 %73, %72
  br label %79

75:                                               ; preds = %54
  %76 = icmp eq i32 %35, -2147483648
  %77 = sext i32 %35 to i64
  %78 = mul nsw i64 %77, %77
  br i1 %76, label %86, label %79

79:                                               ; preds = %75, %71
  %80 = phi i64 [ %74, %71 ], [ %78, %75 ]
  %81 = icmp sgt i64 %80, -1
  %82 = select i1 %81, i64 1073741824, i64 -1073741823
  %83 = add nsw i64 %82, %80
  %84 = sdiv i64 %83, 2147483648
  %85 = trunc i64 %84 to i32
  br label %86

86:                                               ; preds = %75, %79
  %87 = phi i32 [ %85, %79 ], [ 2147483647, %75 ]
  %88 = sub nsw i32 0, %69
  %89 = zext i32 %88 to i64
  %90 = shl nsw i64 -1, %89
  %91 = trunc i64 %90 to i32
  %92 = xor i32 %91, -1
  %93 = and i32 %87, %92
  %94 = ashr i32 %92, 1
  %95 = lshr i32 %87, 31
  %96 = add nsw i32 %95, %94
  %97 = ashr i32 %87, %88
  %98 = icmp sgt i32 %93, %96
  %99 = zext i1 %98 to i32
  %100 = add i32 %65, %67
  %101 = add i32 %100, %97
  %102 = add i32 %101, %99
  %103 = load i32, i32* %15, align 4
  %104 = load i32, i32* %16, align 4
  %105 = icmp eq i32 %102, %103
  br i1 %105, label %110, label %106

106:                                              ; preds = %86
  %107 = sext i32 %102 to i64
  %108 = sext i32 %103 to i64
  %109 = mul nsw i64 %107, %108
  br label %114

110:                                              ; preds = %86
  %111 = icmp eq i32 %102, -2147483648
  %112 = sext i32 %102 to i64
  %113 = mul nsw i64 %112, %112
  br i1 %111, label %121, label %114

114:                                              ; preds = %110, %106
  %115 = phi i64 [ %109, %106 ], [ %113, %110 ]
  %116 = icmp sgt i64 %115, -1
  %117 = select i1 %116, i64 1073741824, i64 -1073741823
  %118 = add nsw i64 %117, %115
  %119 = sdiv i64 %118, 2147483648
  %120 = trunc i64 %119 to i32
  br label %121

121:                                              ; preds = %110, %114
  %122 = phi i32 [ %120, %114 ], [ 2147483647, %110 ]
  %123 = sub nsw i32 0, %104
  %124 = zext i32 %123 to i64
  %125 = shl nsw i64 -1, %124
  %126 = trunc i64 %125 to i32
  %127 = xor i32 %126, -1
  %128 = and i32 %122, %127
  %129 = ashr i32 %127, 1
  %130 = lshr i32 %122, 31
  %131 = add nsw i32 %130, %129
  %132 = ashr i32 %122, %123
  %133 = icmp sgt i32 %128, %131
  %134 = zext i1 %133 to i32
  %135 = load i32, i32* %17, align 4
  %136 = add i32 %135, %132
  %137 = add i32 %136, %134
  %138 = load i32, i32* %19, align 4
  %139 = icmp slt i32 %138, %137
  %140 = select i1 %139, i32 %137, i32 %138
  %141 = load i32, i32* %18, align 4
  %142 = icmp slt i32 %140, %141
  %143 = select i1 %142, i32 %140, i32 %141
  %144 = trunc i32 %143 to i8
  %145 = getelementptr inbounds i8, i8* %4, i64 %22
  store i8 %144, i8* %145, align 1
  %146 = add nuw nsw i64 %22, 1
  %147 = icmp eq i64 %146, %20
  br i1 %147, label %148, label %21

148:                                              ; preds = %121, %5
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite21optimized_integer_ops18AddScalarBroadcastEiRKNS_16ArithmeticParamsEaPKaPa(i32, %"struct.tflite::ArithmeticParams"* dereferenceable(80), i8 signext, i8*, i8*) local_unnamed_addr #7 comdat {
  %6 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 2
  %7 = icmp sgt i32 %0, 0
  br i1 %7, label %8, label %149

8:                                                ; preds = %5
  %9 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = sext i8 %2 to i32
  %12 = add nsw i32 %10, %11
  %13 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 6
  %14 = load i32, i32* %13, align 4
  %15 = shl i32 %12, %14
  %16 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 7
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 8
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %15, %17
  br i1 %20, label %25, label %21

21:                                               ; preds = %8
  %22 = sext i32 %15 to i64
  %23 = sext i32 %17 to i64
  %24 = mul nsw i64 %23, %22
  br label %29

25:                                               ; preds = %8
  %26 = icmp eq i32 %15, -2147483648
  %27 = sext i32 %15 to i64
  %28 = mul nsw i64 %27, %27
  br i1 %26, label %36, label %29

29:                                               ; preds = %25, %21
  %30 = phi i64 [ %24, %21 ], [ %28, %25 ]
  %31 = icmp sgt i64 %30, -1
  %32 = select i1 %31, i64 1073741824, i64 -1073741823
  %33 = add nsw i64 %32, %30
  %34 = sdiv i64 %33, 2147483648
  %35 = trunc i64 %34 to i32
  br label %36

36:                                               ; preds = %29, %25
  %37 = phi i32 [ %35, %29 ], [ 2147483647, %25 ]
  %38 = sub nsw i32 0, %19
  %39 = zext i32 %38 to i64
  %40 = shl nsw i64 -1, %39
  %41 = trunc i64 %40 to i32
  %42 = xor i32 %41, -1
  %43 = and i32 %37, %42
  %44 = lshr i32 %37, 31
  %45 = ashr i32 %42, 1
  %46 = add nsw i32 %44, %45
  %47 = icmp sgt i32 %43, %46
  %48 = zext i1 %47 to i32
  %49 = ashr i32 %37, %38
  %50 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 9
  %51 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 10
  %52 = add i32 %49, %48
  %53 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 4
  %54 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 5
  %55 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 3
  %56 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 12
  %57 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 11
  %58 = zext i32 %0 to i64
  br label %59

59:                                               ; preds = %147, %36
  %60 = phi i32 [ %14, %36 ], [ %148, %147 ]
  %61 = phi i64 [ 0, %36 ], [ %145, %147 ]
  %62 = load i32, i32* %6, align 4
  %63 = getelementptr inbounds i8, i8* %3, i64 %61
  %64 = load i8, i8* %63, align 1
  %65 = sext i8 %64 to i32
  %66 = add nsw i32 %62, %65
  %67 = shl i32 %66, %60
  %68 = load i32, i32* %50, align 4
  %69 = load i32, i32* %51, align 4
  %70 = icmp eq i32 %67, %68
  br i1 %70, label %75, label %71

71:                                               ; preds = %59
  %72 = sext i32 %67 to i64
  %73 = sext i32 %68 to i64
  %74 = mul nsw i64 %72, %73
  br label %79

75:                                               ; preds = %59
  %76 = icmp eq i32 %67, -2147483648
  %77 = sext i32 %67 to i64
  %78 = mul nsw i64 %77, %77
  br i1 %76, label %86, label %79

79:                                               ; preds = %75, %71
  %80 = phi i64 [ %74, %71 ], [ %78, %75 ]
  %81 = icmp sgt i64 %80, -1
  %82 = select i1 %81, i64 1073741824, i64 -1073741823
  %83 = add nsw i64 %82, %80
  %84 = sdiv i64 %83, 2147483648
  %85 = trunc i64 %84 to i32
  br label %86

86:                                               ; preds = %75, %79
  %87 = phi i32 [ %85, %79 ], [ 2147483647, %75 ]
  %88 = sub nsw i32 0, %69
  %89 = zext i32 %88 to i64
  %90 = shl nsw i64 -1, %89
  %91 = trunc i64 %90 to i32
  %92 = xor i32 %91, -1
  %93 = and i32 %87, %92
  %94 = ashr i32 %92, 1
  %95 = lshr i32 %87, 31
  %96 = add nsw i32 %95, %94
  %97 = ashr i32 %87, %88
  %98 = icmp sgt i32 %93, %96
  %99 = zext i1 %98 to i32
  %100 = add i32 %52, %97
  %101 = add i32 %100, %99
  %102 = load i32, i32* %53, align 4
  %103 = load i32, i32* %54, align 4
  %104 = icmp eq i32 %101, %102
  br i1 %104, label %109, label %105

105:                                              ; preds = %86
  %106 = sext i32 %101 to i64
  %107 = sext i32 %102 to i64
  %108 = mul nsw i64 %106, %107
  br label %113

109:                                              ; preds = %86
  %110 = icmp eq i32 %101, -2147483648
  %111 = sext i32 %101 to i64
  %112 = mul nsw i64 %111, %111
  br i1 %110, label %120, label %113

113:                                              ; preds = %109, %105
  %114 = phi i64 [ %108, %105 ], [ %112, %109 ]
  %115 = icmp sgt i64 %114, -1
  %116 = select i1 %115, i64 1073741824, i64 -1073741823
  %117 = add nsw i64 %116, %114
  %118 = sdiv i64 %117, 2147483648
  %119 = trunc i64 %118 to i32
  br label %120

120:                                              ; preds = %109, %113
  %121 = phi i32 [ %119, %113 ], [ 2147483647, %109 ]
  %122 = sub nsw i32 0, %103
  %123 = zext i32 %122 to i64
  %124 = shl nsw i64 -1, %123
  %125 = trunc i64 %124 to i32
  %126 = xor i32 %125, -1
  %127 = and i32 %121, %126
  %128 = ashr i32 %126, 1
  %129 = lshr i32 %121, 31
  %130 = add nsw i32 %129, %128
  %131 = ashr i32 %121, %122
  %132 = icmp sgt i32 %127, %130
  %133 = zext i1 %132 to i32
  %134 = load i32, i32* %55, align 4
  %135 = add i32 %134, %131
  %136 = add i32 %135, %133
  %137 = load i32, i32* %57, align 4
  %138 = icmp slt i32 %137, %136
  %139 = select i1 %138, i32 %136, i32 %137
  %140 = load i32, i32* %56, align 4
  %141 = icmp slt i32 %139, %140
  %142 = select i1 %141, i32 %139, i32 %140
  %143 = trunc i32 %142 to i8
  %144 = getelementptr inbounds i8, i8* %4, i64 %61
  store i8 %143, i8* %144, align 1
  %145 = add nuw nsw i64 %61, 1
  %146 = icmp eq i64 %145, %58
  br i1 %146, label %149, label %147

147:                                              ; preds = %120
  %148 = load i32, i32* %13, align 4
  br label %59

149:                                              ; preds = %120, %5
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13optimized_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph(i32, %"struct.tflite::ArithmeticParams"* dereferenceable(80), i8*, i8*, i8*) local_unnamed_addr #7 comdat {
  %6 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 2
  %7 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 1
  %8 = icmp sgt i32 %0, 0
  br i1 %8, label %9, label %148

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 6
  %11 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 7
  %12 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 8
  %13 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 9
  %14 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 10
  %15 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 4
  %16 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 5
  %17 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 3
  %18 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 12
  %19 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 11
  %20 = zext i32 %0 to i64
  br label %21

21:                                               ; preds = %121, %9
  %22 = phi i64 [ 0, %9 ], [ %146, %121 ]
  %23 = load i32, i32* %7, align 4
  %24 = getelementptr inbounds i8, i8* %2, i64 %22
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = add nsw i32 %23, %26
  %28 = load i32, i32* %6, align 4
  %29 = getelementptr inbounds i8, i8* %3, i64 %22
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = add nsw i32 %28, %31
  %33 = load i32, i32* %10, align 4
  %34 = shl i32 %27, %33
  %35 = shl i32 %32, %33
  %36 = load i32, i32* %11, align 4
  %37 = load i32, i32* %12, align 4
  %38 = icmp eq i32 %34, %36
  br i1 %38, label %43, label %39

39:                                               ; preds = %21
  %40 = sext i32 %34 to i64
  %41 = sext i32 %36 to i64
  %42 = mul nsw i64 %41, %40
  br label %47

43:                                               ; preds = %21
  %44 = icmp eq i32 %34, -2147483648
  %45 = sext i32 %34 to i64
  %46 = mul nsw i64 %45, %45
  br i1 %44, label %54, label %47

47:                                               ; preds = %43, %39
  %48 = phi i64 [ %42, %39 ], [ %46, %43 ]
  %49 = icmp sgt i64 %48, -1
  %50 = select i1 %49, i64 1073741824, i64 -1073741823
  %51 = add nsw i64 %50, %48
  %52 = sdiv i64 %51, 2147483648
  %53 = trunc i64 %52 to i32
  br label %54

54:                                               ; preds = %43, %47
  %55 = phi i32 [ %53, %47 ], [ 2147483647, %43 ]
  %56 = sub nsw i32 0, %37
  %57 = zext i32 %56 to i64
  %58 = shl nsw i64 -1, %57
  %59 = trunc i64 %58 to i32
  %60 = xor i32 %59, -1
  %61 = and i32 %55, %60
  %62 = ashr i32 %60, 1
  %63 = lshr i32 %55, 31
  %64 = add nsw i32 %63, %62
  %65 = ashr i32 %55, %56
  %66 = icmp sgt i32 %61, %64
  %67 = zext i1 %66 to i32
  %68 = load i32, i32* %13, align 4
  %69 = load i32, i32* %14, align 4
  %70 = icmp eq i32 %35, %68
  br i1 %70, label %75, label %71

71:                                               ; preds = %54
  %72 = sext i32 %35 to i64
  %73 = sext i32 %68 to i64
  %74 = mul nsw i64 %73, %72
  br label %79

75:                                               ; preds = %54
  %76 = icmp eq i32 %35, -2147483648
  %77 = sext i32 %35 to i64
  %78 = mul nsw i64 %77, %77
  br i1 %76, label %86, label %79

79:                                               ; preds = %75, %71
  %80 = phi i64 [ %74, %71 ], [ %78, %75 ]
  %81 = icmp sgt i64 %80, -1
  %82 = select i1 %81, i64 1073741824, i64 -1073741823
  %83 = add nsw i64 %82, %80
  %84 = sdiv i64 %83, 2147483648
  %85 = trunc i64 %84 to i32
  br label %86

86:                                               ; preds = %75, %79
  %87 = phi i32 [ %85, %79 ], [ 2147483647, %75 ]
  %88 = sub nsw i32 0, %69
  %89 = zext i32 %88 to i64
  %90 = shl nsw i64 -1, %89
  %91 = trunc i64 %90 to i32
  %92 = xor i32 %91, -1
  %93 = and i32 %87, %92
  %94 = ashr i32 %92, 1
  %95 = lshr i32 %87, 31
  %96 = add nsw i32 %95, %94
  %97 = ashr i32 %87, %88
  %98 = icmp sgt i32 %93, %96
  %99 = zext i1 %98 to i32
  %100 = add i32 %65, %67
  %101 = add i32 %100, %97
  %102 = add i32 %101, %99
  %103 = load i32, i32* %15, align 4
  %104 = load i32, i32* %16, align 4
  %105 = icmp eq i32 %102, %103
  br i1 %105, label %110, label %106

106:                                              ; preds = %86
  %107 = sext i32 %102 to i64
  %108 = sext i32 %103 to i64
  %109 = mul nsw i64 %107, %108
  br label %114

110:                                              ; preds = %86
  %111 = icmp eq i32 %102, -2147483648
  %112 = sext i32 %102 to i64
  %113 = mul nsw i64 %112, %112
  br i1 %111, label %121, label %114

114:                                              ; preds = %110, %106
  %115 = phi i64 [ %109, %106 ], [ %113, %110 ]
  %116 = icmp sgt i64 %115, -1
  %117 = select i1 %116, i64 1073741824, i64 -1073741823
  %118 = add nsw i64 %117, %115
  %119 = sdiv i64 %118, 2147483648
  %120 = trunc i64 %119 to i32
  br label %121

121:                                              ; preds = %110, %114
  %122 = phi i32 [ %120, %114 ], [ 2147483647, %110 ]
  %123 = sub nsw i32 0, %104
  %124 = zext i32 %123 to i64
  %125 = shl nsw i64 -1, %124
  %126 = trunc i64 %125 to i32
  %127 = xor i32 %126, -1
  %128 = and i32 %122, %127
  %129 = ashr i32 %127, 1
  %130 = lshr i32 %122, 31
  %131 = add nsw i32 %130, %129
  %132 = ashr i32 %122, %123
  %133 = icmp sgt i32 %128, %131
  %134 = zext i1 %133 to i32
  %135 = load i32, i32* %17, align 4
  %136 = add i32 %135, %132
  %137 = add i32 %136, %134
  %138 = load i32, i32* %19, align 4
  %139 = icmp slt i32 %138, %137
  %140 = select i1 %139, i32 %137, i32 %138
  %141 = load i32, i32* %18, align 4
  %142 = icmp slt i32 %140, %141
  %143 = select i1 %142, i32 %140, i32 %141
  %144 = trunc i32 %143 to i8
  %145 = getelementptr inbounds i8, i8* %4, i64 %22
  store i8 %144, i8* %145, align 1
  %146 = add nuw nsw i64 %22, 1
  %147 = icmp eq i64 %146, %20
  br i1 %147, label %148, label %21

148:                                              ; preds = %121, %5
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13optimized_ops18AddScalarBroadcastEiRKNS_16ArithmeticParamsEhPKhPh(i32, %"struct.tflite::ArithmeticParams"* dereferenceable(80), i8 zeroext, i8*, i8*) local_unnamed_addr #7 comdat {
  %6 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 2
  %7 = icmp sgt i32 %0, 0
  br i1 %7, label %8, label %149

8:                                                ; preds = %5
  %9 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = zext i8 %2 to i32
  %12 = add nsw i32 %10, %11
  %13 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 6
  %14 = load i32, i32* %13, align 4
  %15 = shl i32 %12, %14
  %16 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 7
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 8
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %15, %17
  br i1 %20, label %25, label %21

21:                                               ; preds = %8
  %22 = sext i32 %15 to i64
  %23 = sext i32 %17 to i64
  %24 = mul nsw i64 %23, %22
  br label %29

25:                                               ; preds = %8
  %26 = icmp eq i32 %15, -2147483648
  %27 = sext i32 %15 to i64
  %28 = mul nsw i64 %27, %27
  br i1 %26, label %36, label %29

29:                                               ; preds = %25, %21
  %30 = phi i64 [ %24, %21 ], [ %28, %25 ]
  %31 = icmp sgt i64 %30, -1
  %32 = select i1 %31, i64 1073741824, i64 -1073741823
  %33 = add nsw i64 %32, %30
  %34 = sdiv i64 %33, 2147483648
  %35 = trunc i64 %34 to i32
  br label %36

36:                                               ; preds = %29, %25
  %37 = phi i32 [ %35, %29 ], [ 2147483647, %25 ]
  %38 = sub nsw i32 0, %19
  %39 = zext i32 %38 to i64
  %40 = shl nsw i64 -1, %39
  %41 = trunc i64 %40 to i32
  %42 = xor i32 %41, -1
  %43 = and i32 %37, %42
  %44 = lshr i32 %37, 31
  %45 = ashr i32 %42, 1
  %46 = add nsw i32 %44, %45
  %47 = icmp sgt i32 %43, %46
  %48 = zext i1 %47 to i32
  %49 = ashr i32 %37, %38
  %50 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 9
  %51 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 10
  %52 = add i32 %49, %48
  %53 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 4
  %54 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 5
  %55 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 3
  %56 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 12
  %57 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %1, i64 0, i32 11
  %58 = zext i32 %0 to i64
  br label %59

59:                                               ; preds = %147, %36
  %60 = phi i32 [ %14, %36 ], [ %148, %147 ]
  %61 = phi i64 [ 0, %36 ], [ %145, %147 ]
  %62 = load i32, i32* %6, align 4
  %63 = getelementptr inbounds i8, i8* %3, i64 %61
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i32
  %66 = add nsw i32 %62, %65
  %67 = shl i32 %66, %60
  %68 = load i32, i32* %50, align 4
  %69 = load i32, i32* %51, align 4
  %70 = icmp eq i32 %67, %68
  br i1 %70, label %75, label %71

71:                                               ; preds = %59
  %72 = sext i32 %67 to i64
  %73 = sext i32 %68 to i64
  %74 = mul nsw i64 %72, %73
  br label %79

75:                                               ; preds = %59
  %76 = icmp eq i32 %67, -2147483648
  %77 = sext i32 %67 to i64
  %78 = mul nsw i64 %77, %77
  br i1 %76, label %86, label %79

79:                                               ; preds = %75, %71
  %80 = phi i64 [ %74, %71 ], [ %78, %75 ]
  %81 = icmp sgt i64 %80, -1
  %82 = select i1 %81, i64 1073741824, i64 -1073741823
  %83 = add nsw i64 %82, %80
  %84 = sdiv i64 %83, 2147483648
  %85 = trunc i64 %84 to i32
  br label %86

86:                                               ; preds = %75, %79
  %87 = phi i32 [ %85, %79 ], [ 2147483647, %75 ]
  %88 = sub nsw i32 0, %69
  %89 = zext i32 %88 to i64
  %90 = shl nsw i64 -1, %89
  %91 = trunc i64 %90 to i32
  %92 = xor i32 %91, -1
  %93 = and i32 %87, %92
  %94 = ashr i32 %92, 1
  %95 = lshr i32 %87, 31
  %96 = add nsw i32 %95, %94
  %97 = ashr i32 %87, %88
  %98 = icmp sgt i32 %93, %96
  %99 = zext i1 %98 to i32
  %100 = add i32 %52, %97
  %101 = add i32 %100, %99
  %102 = load i32, i32* %53, align 4
  %103 = load i32, i32* %54, align 4
  %104 = icmp eq i32 %101, %102
  br i1 %104, label %109, label %105

105:                                              ; preds = %86
  %106 = sext i32 %101 to i64
  %107 = sext i32 %102 to i64
  %108 = mul nsw i64 %106, %107
  br label %113

109:                                              ; preds = %86
  %110 = icmp eq i32 %101, -2147483648
  %111 = sext i32 %101 to i64
  %112 = mul nsw i64 %111, %111
  br i1 %110, label %120, label %113

113:                                              ; preds = %109, %105
  %114 = phi i64 [ %108, %105 ], [ %112, %109 ]
  %115 = icmp sgt i64 %114, -1
  %116 = select i1 %115, i64 1073741824, i64 -1073741823
  %117 = add nsw i64 %116, %114
  %118 = sdiv i64 %117, 2147483648
  %119 = trunc i64 %118 to i32
  br label %120

120:                                              ; preds = %109, %113
  %121 = phi i32 [ %119, %113 ], [ 2147483647, %109 ]
  %122 = sub nsw i32 0, %103
  %123 = zext i32 %122 to i64
  %124 = shl nsw i64 -1, %123
  %125 = trunc i64 %124 to i32
  %126 = xor i32 %125, -1
  %127 = and i32 %121, %126
  %128 = ashr i32 %126, 1
  %129 = lshr i32 %121, 31
  %130 = add nsw i32 %129, %128
  %131 = ashr i32 %121, %122
  %132 = icmp sgt i32 %127, %130
  %133 = zext i1 %132 to i32
  %134 = load i32, i32* %55, align 4
  %135 = add i32 %134, %131
  %136 = add i32 %135, %133
  %137 = load i32, i32* %57, align 4
  %138 = icmp slt i32 %137, %136
  %139 = select i1 %138, i32 %136, i32 %137
  %140 = load i32, i32* %56, align 4
  %141 = icmp slt i32 %139, %140
  %142 = select i1 %141, i32 %139, i32 %140
  %143 = trunc i32 %142 to i8
  %144 = getelementptr inbounds i8, i8* %4, i64 %61
  store i8 %143, i8* %144, align 1
  %145 = add nuw nsw i64 %61, 1
  %146 = icmp eq i64 %145, %58
  br i1 %146, label %149, label %147

147:                                              ; preds = %120
  %148 = load i32, i32* %13, align 4
  br label %59

149:                                              ; preds = %120, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLiteAddParams*, %"struct.tflite::ops::builtin::add::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #3 comdat {
  %8 = alloca %"struct.tflite::ArithmeticParams", align 4
  %9 = alloca %"class.tflite::RuntimeShape", align 8
  %10 = alloca %"class.tflite::RuntimeShape", align 8
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = alloca %"class.tflite::RuntimeShape", align 8
  %13 = alloca %"class.tflite::RuntimeShape", align 8
  %14 = alloca %"class.tflite::RuntimeShape", align 8
  %15 = alloca %"class.tflite::RuntimeShape", align 8
  %16 = alloca %"class.tflite::RuntimeShape", align 8
  %17 = alloca %"class.tflite::RuntimeShape", align 8
  %18 = alloca %"class.tflite::RuntimeShape", align 8
  %19 = alloca %"class.tflite::RuntimeShape", align 8
  %20 = alloca %"class.tflite::RuntimeShape", align 8
  %21 = alloca %"class.tflite::RuntimeShape", align 8
  %22 = alloca %"class.tflite::RuntimeShape", align 8
  %23 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %23) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %23, i8* align 4 getelementptr inbounds ({ i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, [5 x i32] }, { i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, [5 x i32] }* @__const._ZN6tflite3ops7builtin3add16EvalAddQuantizedILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSH_PSF_.op_params, i64 0, i32 0), i64 80, i1 false)
  %24 = bitcast %"class.tflite::RuntimeShape"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %24) #12
  %25 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %25, label %26, label %28

26:                                               ; preds = %7
  %27 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 0, i32* %27, align 8, !alias.scope !491
  br label %53

28:                                               ; preds = %7
  %29 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %30 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %29, align 8, !noalias !491
  %31 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %30, i64 0, i32 0
  %32 = load i32, i32* %31, align 4, !noalias !491
  %33 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %30, i64 0, i32 1, i64 0
  %34 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  store i32 %32, i32* %34, align 8, !alias.scope !491
  %35 = icmp sgt i32 %32, 5
  br i1 %35, label %36, label %43

36:                                               ; preds = %28
  %37 = sext i32 %32 to i64
  %38 = shl nsw i64 %37, 2
  %39 = tail call i8* @_Znam(i64 %38) #11, !noalias !491
  %40 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %41 = bitcast i32** %40 to i8**
  store i8* %39, i8** %41, align 8, !alias.scope !491
  %42 = bitcast i8* %39 to i32*
  br label %48

43:                                               ; preds = %28
  %44 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1
  %45 = bitcast %union.anon* %44 to i32*
  %46 = sext i32 %32 to i64
  %47 = shl nsw i64 %46, 2
  br label %48

48:                                               ; preds = %43, %36
  %49 = phi i64 [ %38, %36 ], [ %47, %43 ]
  %50 = phi i32* [ %42, %36 ], [ %45, %43 ]
  %51 = bitcast i32* %50 to i8*
  %52 = bitcast i32* %33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %51, i8* align 4 %52, i64 %49, i1 false) #12
  br label %53

53:                                               ; preds = %26, %48
  %54 = bitcast %"class.tflite::RuntimeShape"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %54) #12
  %55 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %55, label %56, label %58

56:                                               ; preds = %53
  %57 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 0, i32* %57, align 8, !alias.scope !494
  br label %83

58:                                               ; preds = %53
  %59 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %60 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %59, align 8, !noalias !494
  %61 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %60, i64 0, i32 0
  %62 = load i32, i32* %61, align 4, !noalias !494
  %63 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %60, i64 0, i32 1, i64 0
  %64 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  store i32 %62, i32* %64, align 8, !alias.scope !494
  %65 = icmp sgt i32 %62, 5
  br i1 %65, label %66, label %73

66:                                               ; preds = %58
  %67 = sext i32 %62 to i64
  %68 = shl nsw i64 %67, 2
  %69 = tail call i8* @_Znam(i64 %68) #11, !noalias !494
  %70 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %71 = bitcast i32** %70 to i8**
  store i8* %69, i8** %71, align 8, !alias.scope !494
  %72 = bitcast i8* %69 to i32*
  br label %78

73:                                               ; preds = %58
  %74 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1
  %75 = bitcast %union.anon* %74 to i32*
  %76 = sext i32 %62 to i64
  %77 = shl nsw i64 %76, 2
  br label %78

78:                                               ; preds = %73, %66
  %79 = phi i64 [ %68, %66 ], [ %77, %73 ]
  %80 = phi i32* [ %72, %66 ], [ %75, %73 ]
  %81 = bitcast i32* %80 to i8*
  %82 = bitcast i32* %63 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %81, i8* align 4 %82, i64 %79, i1 false) #12
  br label %83

83:                                               ; preds = %56, %78
  %84 = call zeroext i1 @_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE(%"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %9, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %10, %"struct.tflite::ArithmeticParams"* nonnull %8)
  %85 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 0
  %86 = load i32, i32* %85, align 8
  %87 = icmp sgt i32 %86, 5
  br i1 %87, label %88, label %94

88:                                               ; preds = %83
  %89 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %10, i64 0, i32 1, i32 0
  %90 = load i32*, i32** %89, align 8
  %91 = icmp eq i32* %90, null
  br i1 %91, label %94, label %92

92:                                               ; preds = %88
  %93 = bitcast i32* %90 to i8*
  call void @_ZdaPv(i8* %93) #11
  br label %94

94:                                               ; preds = %83, %88, %92
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %54) #12
  %95 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 0
  %96 = load i32, i32* %95, align 8
  %97 = icmp sgt i32 %96, 5
  br i1 %97, label %98, label %104

98:                                               ; preds = %94
  %99 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %9, i64 0, i32 1, i32 0
  %100 = load i32*, i32** %99, align 8
  %101 = icmp eq i32* %100, null
  br i1 %101, label %104, label %102

102:                                              ; preds = %98
  %103 = bitcast i32* %100 to i8*
  call void @_ZdaPv(i8* %103) #11
  br label %104

104:                                              ; preds = %94, %98, %102
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #12
  %105 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 0
  %106 = load i32, i32* %105, align 8
  switch i32 %106, label %1136 [
    i32 2, label %107
    i32 1, label %390
  ]

107:                                              ; preds = %104
  %108 = getelementptr inbounds %struct.TfLiteAddParams, %struct.TfLiteAddParams* %2, i64 0, i32 0
  %109 = load i32, i32* %108, align 4
  %110 = add i32 %109, -1
  %111 = icmp ult i32 %110, 3
  br i1 %84, label %112, label %251

112:                                              ; preds = %107
  br i1 %111, label %113, label %120

113:                                              ; preds = %112
  %114 = sext i32 %110 to i64
  %115 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.51, i64 0, i64 %114
  %116 = load i32, i32* %115, align 4
  %117 = sext i32 %110 to i64
  %118 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.52, i64 0, i64 %117
  %119 = load i32, i32* %118, align 4
  br label %120

120:                                              ; preds = %112, %113
  %121 = phi i32 [ %116, %113 ], [ -2147483648, %112 ]
  %122 = phi i32 [ %119, %113 ], [ 2147483647, %112 ]
  %123 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 11
  store i32 %121, i32* %123, align 4
  %124 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 12
  store i32 %122, i32* %124, align 4
  %125 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %125) #12
  br i1 %25, label %126, label %128

126:                                              ; preds = %120
  %127 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %127, align 8, !alias.scope !497
  br label %155

128:                                              ; preds = %120
  %129 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %130 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %129, align 8, !noalias !497
  %131 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %130, i64 0, i32 0
  %132 = load i32, i32* %131, align 4, !noalias !497
  %133 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %130, i64 0, i32 1, i64 0
  %134 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %132, i32* %134, align 8, !alias.scope !497
  %135 = icmp sgt i32 %132, 5
  br i1 %135, label %136, label %143

136:                                              ; preds = %128
  %137 = sext i32 %132 to i64
  %138 = shl nsw i64 %137, 2
  %139 = call i8* @_Znam(i64 %138) #11, !noalias !497
  %140 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %141 = bitcast i32** %140 to i8**
  store i8* %139, i8** %141, align 8, !alias.scope !497
  %142 = bitcast i8* %139 to i32*
  br label %148

143:                                              ; preds = %128
  %144 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %145 = bitcast %union.anon* %144 to i32*
  %146 = sext i32 %132 to i64
  %147 = shl nsw i64 %146, 2
  br label %148

148:                                              ; preds = %143, %136
  %149 = phi i64 [ %138, %136 ], [ %147, %143 ]
  %150 = phi i32* [ %142, %136 ], [ %145, %143 ]
  %151 = bitcast i32* %150 to i8*
  %152 = bitcast i32* %133 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %151, i8* align 4 %152, i64 %149, i1 false) #12
  %153 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1, i32 0
  %154 = load i32*, i32** %153, align 8
  br label %155

155:                                              ; preds = %126, %148
  %156 = phi i32* [ %154, %148 ], [ null, %126 ]
  %157 = bitcast %"class.tflite::RuntimeShape"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %157) #12
  br i1 %55, label %158, label %160

158:                                              ; preds = %155
  %159 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 0, i32* %159, align 8, !alias.scope !500
  br label %187

160:                                              ; preds = %155
  %161 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %162 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %161, align 8, !noalias !500
  %163 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %162, i64 0, i32 0
  %164 = load i32, i32* %163, align 4, !noalias !500
  %165 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %162, i64 0, i32 1, i64 0
  %166 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 %164, i32* %166, align 8, !alias.scope !500
  %167 = icmp sgt i32 %164, 5
  br i1 %167, label %168, label %175

168:                                              ; preds = %160
  %169 = sext i32 %164 to i64
  %170 = shl nsw i64 %169, 2
  %171 = call i8* @_Znam(i64 %170) #11, !noalias !500
  %172 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %173 = bitcast i32** %172 to i8**
  store i8* %171, i8** %173, align 8, !alias.scope !500
  %174 = bitcast i8* %171 to i32*
  br label %180

175:                                              ; preds = %160
  %176 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1
  %177 = bitcast %union.anon* %176 to i32*
  %178 = sext i32 %164 to i64
  %179 = shl nsw i64 %178, 2
  br label %180

180:                                              ; preds = %175, %168
  %181 = phi i64 [ %170, %168 ], [ %179, %175 ]
  %182 = phi i32* [ %174, %168 ], [ %177, %175 ]
  %183 = bitcast i32* %182 to i8*
  %184 = bitcast i32* %165 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %183, i8* align 4 %184, i64 %181, i1 false) #12
  %185 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1, i32 0
  %186 = load i32*, i32** %185, align 8
  br label %187

187:                                              ; preds = %158, %180
  %188 = phi i32* [ %186, %180 ], [ null, %158 ]
  %189 = bitcast %"class.tflite::RuntimeShape"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %189) #12
  %190 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %190, label %191, label %193

191:                                              ; preds = %187
  %192 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 0, i32* %192, align 8, !alias.scope !503
  br label %220

193:                                              ; preds = %187
  %194 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %195 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %194, align 8, !noalias !503
  %196 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %195, i64 0, i32 0
  %197 = load i32, i32* %196, align 4, !noalias !503
  %198 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %195, i64 0, i32 1, i64 0
  %199 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 %197, i32* %199, align 8, !alias.scope !503
  %200 = icmp sgt i32 %197, 5
  br i1 %200, label %201, label %208

201:                                              ; preds = %193
  %202 = sext i32 %197 to i64
  %203 = shl nsw i64 %202, 2
  %204 = call i8* @_Znam(i64 %203) #11, !noalias !503
  %205 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %206 = bitcast i32** %205 to i8**
  store i8* %204, i8** %206, align 8, !alias.scope !503
  %207 = bitcast i8* %204 to i32*
  br label %213

208:                                              ; preds = %193
  %209 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1
  %210 = bitcast %union.anon* %209 to i32*
  %211 = sext i32 %197 to i64
  %212 = shl nsw i64 %211, 2
  br label %213

213:                                              ; preds = %208, %201
  %214 = phi i64 [ %203, %201 ], [ %212, %208 ]
  %215 = phi i32* [ %207, %201 ], [ %210, %208 ]
  %216 = bitcast i32* %215 to i8*
  %217 = bitcast i32* %198 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %216, i8* align 4 %217, i64 %214, i1 false) #12
  %218 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1, i32 0
  %219 = load i32*, i32** %218, align 8
  br label %220

220:                                              ; preds = %191, %213
  %221 = phi i32* [ %219, %213 ], [ null, %191 ]
  call void @_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKiS6_S8_S6_Pi(%"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %8, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, i32* %156, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %12, i32* %188, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %13, i32* %221)
  %222 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  %223 = load i32, i32* %222, align 8
  %224 = icmp sgt i32 %223, 5
  br i1 %224, label %225, label %231

225:                                              ; preds = %220
  %226 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %227 = load i32*, i32** %226, align 8
  %228 = icmp eq i32* %227, null
  br i1 %228, label %231, label %229

229:                                              ; preds = %225
  %230 = bitcast i32* %227 to i8*
  call void @_ZdaPv(i8* %230) #11
  br label %231

231:                                              ; preds = %220, %225, %229
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %189) #12
  %232 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  %233 = load i32, i32* %232, align 8
  %234 = icmp sgt i32 %233, 5
  br i1 %234, label %235, label %241

235:                                              ; preds = %231
  %236 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %237 = load i32*, i32** %236, align 8
  %238 = icmp eq i32* %237, null
  br i1 %238, label %241, label %239

239:                                              ; preds = %235
  %240 = bitcast i32* %237 to i8*
  call void @_ZdaPv(i8* %240) #11
  br label %241

241:                                              ; preds = %231, %235, %239
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %157) #12
  %242 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %243 = load i32, i32* %242, align 8
  %244 = icmp sgt i32 %243, 5
  br i1 %244, label %245, label %1134

245:                                              ; preds = %241
  %246 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %247 = load i32*, i32** %246, align 8
  %248 = icmp eq i32* %247, null
  br i1 %248, label %1134, label %249

249:                                              ; preds = %245
  %250 = bitcast i32* %247 to i8*
  call void @_ZdaPv(i8* %250) #11
  br label %1134

251:                                              ; preds = %107
  br i1 %111, label %252, label %259

252:                                              ; preds = %251
  %253 = sext i32 %110 to i64
  %254 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.51, i64 0, i64 %253
  %255 = load i32, i32* %254, align 4
  %256 = sext i32 %110 to i64
  %257 = getelementptr inbounds [3 x i32], [3 x i32]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.52, i64 0, i64 %256
  %258 = load i32, i32* %257, align 4
  br label %259

259:                                              ; preds = %251, %252
  %260 = phi i32 [ %255, %252 ], [ -2147483648, %251 ]
  %261 = phi i32 [ %258, %252 ], [ 2147483647, %251 ]
  %262 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 11
  store i32 %260, i32* %262, align 4
  %263 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 12
  store i32 %261, i32* %263, align 4
  %264 = bitcast %"class.tflite::RuntimeShape"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %264) #12
  br i1 %25, label %265, label %267

265:                                              ; preds = %259
  %266 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 0, i32* %266, align 8, !alias.scope !506
  br label %294

267:                                              ; preds = %259
  %268 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %269 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %268, align 8, !noalias !506
  %270 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 0
  %271 = load i32, i32* %270, align 4, !noalias !506
  %272 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %269, i64 0, i32 1, i64 0
  %273 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 %271, i32* %273, align 8, !alias.scope !506
  %274 = icmp sgt i32 %271, 5
  br i1 %274, label %275, label %282

275:                                              ; preds = %267
  %276 = sext i32 %271 to i64
  %277 = shl nsw i64 %276, 2
  %278 = call i8* @_Znam(i64 %277) #11, !noalias !506
  %279 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %280 = bitcast i32** %279 to i8**
  store i8* %278, i8** %280, align 8, !alias.scope !506
  %281 = bitcast i8* %278 to i32*
  br label %287

282:                                              ; preds = %267
  %283 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1
  %284 = bitcast %union.anon* %283 to i32*
  %285 = sext i32 %271 to i64
  %286 = shl nsw i64 %285, 2
  br label %287

287:                                              ; preds = %282, %275
  %288 = phi i64 [ %277, %275 ], [ %286, %282 ]
  %289 = phi i32* [ %281, %275 ], [ %284, %282 ]
  %290 = bitcast i32* %289 to i8*
  %291 = bitcast i32* %272 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %290, i8* align 4 %291, i64 %288, i1 false) #12
  %292 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1, i32 0
  %293 = load i32*, i32** %292, align 8
  br label %294

294:                                              ; preds = %265, %287
  %295 = phi i32* [ %293, %287 ], [ null, %265 ]
  %296 = bitcast %"class.tflite::RuntimeShape"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %296) #12
  br i1 %55, label %297, label %299

297:                                              ; preds = %294
  %298 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  store i32 0, i32* %298, align 8, !alias.scope !509
  br label %326

299:                                              ; preds = %294
  %300 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %301 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %300, align 8, !noalias !509
  %302 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %301, i64 0, i32 0
  %303 = load i32, i32* %302, align 4, !noalias !509
  %304 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %301, i64 0, i32 1, i64 0
  %305 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  store i32 %303, i32* %305, align 8, !alias.scope !509
  %306 = icmp sgt i32 %303, 5
  br i1 %306, label %307, label %314

307:                                              ; preds = %299
  %308 = sext i32 %303 to i64
  %309 = shl nsw i64 %308, 2
  %310 = call i8* @_Znam(i64 %309) #11, !noalias !509
  %311 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1, i32 0
  %312 = bitcast i32** %311 to i8**
  store i8* %310, i8** %312, align 8, !alias.scope !509
  %313 = bitcast i8* %310 to i32*
  br label %319

314:                                              ; preds = %299
  %315 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1
  %316 = bitcast %union.anon* %315 to i32*
  %317 = sext i32 %303 to i64
  %318 = shl nsw i64 %317, 2
  br label %319

319:                                              ; preds = %314, %307
  %320 = phi i64 [ %309, %307 ], [ %318, %314 ]
  %321 = phi i32* [ %313, %307 ], [ %316, %314 ]
  %322 = bitcast i32* %321 to i8*
  %323 = bitcast i32* %304 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %322, i8* align 4 %323, i64 %320, i1 false) #12
  %324 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1, i32 0
  %325 = load i32*, i32** %324, align 8
  br label %326

326:                                              ; preds = %297, %319
  %327 = phi i32* [ %325, %319 ], [ null, %297 ]
  %328 = bitcast %"class.tflite::RuntimeShape"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %328) #12
  %329 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %329, label %330, label %332

330:                                              ; preds = %326
  %331 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 0
  store i32 0, i32* %331, align 8, !alias.scope !512
  br label %359

332:                                              ; preds = %326
  %333 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %334 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %333, align 8, !noalias !512
  %335 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %334, i64 0, i32 0
  %336 = load i32, i32* %335, align 4, !noalias !512
  %337 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %334, i64 0, i32 1, i64 0
  %338 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 0
  store i32 %336, i32* %338, align 8, !alias.scope !512
  %339 = icmp sgt i32 %336, 5
  br i1 %339, label %340, label %347

340:                                              ; preds = %332
  %341 = sext i32 %336 to i64
  %342 = shl nsw i64 %341, 2
  %343 = call i8* @_Znam(i64 %342) #11, !noalias !512
  %344 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1, i32 0
  %345 = bitcast i32** %344 to i8**
  store i8* %343, i8** %345, align 8, !alias.scope !512
  %346 = bitcast i8* %343 to i32*
  br label %352

347:                                              ; preds = %332
  %348 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1
  %349 = bitcast %union.anon* %348 to i32*
  %350 = sext i32 %336 to i64
  %351 = shl nsw i64 %350, 2
  br label %352

352:                                              ; preds = %347, %340
  %353 = phi i64 [ %342, %340 ], [ %351, %347 ]
  %354 = phi i32* [ %346, %340 ], [ %349, %347 ]
  %355 = bitcast i32* %354 to i8*
  %356 = bitcast i32* %337 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %355, i8* align 4 %356, i64 %353, i1 false) #12
  %357 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1, i32 0
  %358 = load i32*, i32** %357, align 8
  br label %359

359:                                              ; preds = %330, %352
  %360 = phi i32* [ %358, %352 ], [ null, %330 ]
  call void @_ZN6tflite13optimized_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKiS6_S8_S6_Pi(%"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %8, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %14, i32* %295, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %15, i32* %327, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %16, i32* %360)
  %361 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 0
  %362 = load i32, i32* %361, align 8
  %363 = icmp sgt i32 %362, 5
  br i1 %363, label %364, label %370

364:                                              ; preds = %359
  %365 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1, i32 0
  %366 = load i32*, i32** %365, align 8
  %367 = icmp eq i32* %366, null
  br i1 %367, label %370, label %368

368:                                              ; preds = %364
  %369 = bitcast i32* %366 to i8*
  call void @_ZdaPv(i8* %369) #11
  br label %370

370:                                              ; preds = %359, %364, %368
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %328) #12
  %371 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  %372 = load i32, i32* %371, align 8
  %373 = icmp sgt i32 %372, 5
  br i1 %373, label %374, label %380

374:                                              ; preds = %370
  %375 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1, i32 0
  %376 = load i32*, i32** %375, align 8
  %377 = icmp eq i32* %376, null
  br i1 %377, label %380, label %378

378:                                              ; preds = %374
  %379 = bitcast i32* %376 to i8*
  call void @_ZdaPv(i8* %379) #11
  br label %380

380:                                              ; preds = %370, %374, %378
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %296) #12
  %381 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  %382 = load i32, i32* %381, align 8
  %383 = icmp sgt i32 %382, 5
  br i1 %383, label %384, label %1134

384:                                              ; preds = %380
  %385 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %386 = load i32*, i32** %385, align 8
  %387 = icmp eq i32* %386, null
  br i1 %387, label %1134, label %388

388:                                              ; preds = %384
  %389 = bitcast i32* %386 to i8*
  call void @_ZdaPv(i8* %389) #11
  br label %1134

390:                                              ; preds = %104
  %391 = getelementptr inbounds %struct.TfLiteAddParams, %struct.TfLiteAddParams* %2, i64 0, i32 0
  %392 = load i32, i32* %391, align 4
  %393 = add i32 %392, -1
  %394 = icmp ult i32 %393, 3
  br i1 %84, label %395, label %537

395:                                              ; preds = %390
  br i1 %394, label %396, label %403

396:                                              ; preds = %395
  %397 = sext i32 %393 to i64
  %398 = getelementptr inbounds [3 x float], [3 x float]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.55, i64 0, i64 %397
  %399 = load float, float* %398, align 4
  %400 = sext i32 %393 to i64
  %401 = getelementptr inbounds [3 x float], [3 x float]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.56, i64 0, i64 %400
  %402 = load float, float* %401, align 4
  br label %403

403:                                              ; preds = %395, %396
  %404 = phi float [ %399, %396 ], [ 0xC7EFFFFFE0000000, %395 ]
  %405 = phi float [ %402, %396 ], [ 0x47EFFFFFE0000000, %395 ]
  %406 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 13
  store float %404, float* %406, align 4
  %407 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 14
  store float %405, float* %407, align 4
  %408 = bitcast %"class.tflite::RuntimeShape"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %408) #12
  br i1 %25, label %409, label %411

409:                                              ; preds = %403
  %410 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 0
  store i32 0, i32* %410, align 8, !alias.scope !515
  br label %439

411:                                              ; preds = %403
  %412 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %413 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %412, align 8, !noalias !515
  %414 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %413, i64 0, i32 0
  %415 = load i32, i32* %414, align 4, !noalias !515
  %416 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %413, i64 0, i32 1, i64 0
  %417 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 0
  store i32 %415, i32* %417, align 8, !alias.scope !515
  %418 = icmp sgt i32 %415, 5
  br i1 %418, label %419, label %426

419:                                              ; preds = %411
  %420 = sext i32 %415 to i64
  %421 = shl nsw i64 %420, 2
  %422 = call i8* @_Znam(i64 %421) #11, !noalias !515
  %423 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1, i32 0
  %424 = bitcast i32** %423 to i8**
  store i8* %422, i8** %424, align 8, !alias.scope !515
  %425 = bitcast i8* %422 to i32*
  br label %431

426:                                              ; preds = %411
  %427 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1
  %428 = bitcast %union.anon* %427 to i32*
  %429 = sext i32 %415 to i64
  %430 = shl nsw i64 %429, 2
  br label %431

431:                                              ; preds = %426, %419
  %432 = phi i64 [ %421, %419 ], [ %430, %426 ]
  %433 = phi i32* [ %425, %419 ], [ %428, %426 ]
  %434 = bitcast i32* %433 to i8*
  %435 = bitcast i32* %416 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %434, i8* align 4 %435, i64 %432, i1 false) #12
  %436 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %437 = bitcast %union.TfLitePtrUnion* %436 to float**
  %438 = load float*, float** %437, align 8
  br label %439

439:                                              ; preds = %409, %431
  %440 = phi float* [ %438, %431 ], [ null, %409 ]
  %441 = bitcast %"class.tflite::RuntimeShape"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %441) #12
  br i1 %55, label %442, label %444

442:                                              ; preds = %439
  %443 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 0
  store i32 0, i32* %443, align 8, !alias.scope !518
  br label %472

444:                                              ; preds = %439
  %445 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %446 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %445, align 8, !noalias !518
  %447 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %446, i64 0, i32 0
  %448 = load i32, i32* %447, align 4, !noalias !518
  %449 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %446, i64 0, i32 1, i64 0
  %450 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 0
  store i32 %448, i32* %450, align 8, !alias.scope !518
  %451 = icmp sgt i32 %448, 5
  br i1 %451, label %452, label %459

452:                                              ; preds = %444
  %453 = sext i32 %448 to i64
  %454 = shl nsw i64 %453, 2
  %455 = call i8* @_Znam(i64 %454) #11, !noalias !518
  %456 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1, i32 0
  %457 = bitcast i32** %456 to i8**
  store i8* %455, i8** %457, align 8, !alias.scope !518
  %458 = bitcast i8* %455 to i32*
  br label %464

459:                                              ; preds = %444
  %460 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1
  %461 = bitcast %union.anon* %460 to i32*
  %462 = sext i32 %448 to i64
  %463 = shl nsw i64 %462, 2
  br label %464

464:                                              ; preds = %459, %452
  %465 = phi i64 [ %454, %452 ], [ %463, %459 ]
  %466 = phi i32* [ %458, %452 ], [ %461, %459 ]
  %467 = bitcast i32* %466 to i8*
  %468 = bitcast i32* %449 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %467, i8* align 4 %468, i64 %465, i1 false) #12
  %469 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %470 = bitcast %union.TfLitePtrUnion* %469 to float**
  %471 = load float*, float** %470, align 8
  br label %472

472:                                              ; preds = %442, %464
  %473 = phi float* [ %471, %464 ], [ null, %442 ]
  %474 = bitcast %"class.tflite::RuntimeShape"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %474) #12
  %475 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %475, label %476, label %478

476:                                              ; preds = %472
  %477 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 0
  store i32 0, i32* %477, align 8, !alias.scope !521
  br label %506

478:                                              ; preds = %472
  %479 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %480 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %479, align 8, !noalias !521
  %481 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %480, i64 0, i32 0
  %482 = load i32, i32* %481, align 4, !noalias !521
  %483 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %480, i64 0, i32 1, i64 0
  %484 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 0
  store i32 %482, i32* %484, align 8, !alias.scope !521
  %485 = icmp sgt i32 %482, 5
  br i1 %485, label %486, label %493

486:                                              ; preds = %478
  %487 = sext i32 %482 to i64
  %488 = shl nsw i64 %487, 2
  %489 = call i8* @_Znam(i64 %488) #11, !noalias !521
  %490 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 1, i32 0
  %491 = bitcast i32** %490 to i8**
  store i8* %489, i8** %491, align 8, !alias.scope !521
  %492 = bitcast i8* %489 to i32*
  br label %498

493:                                              ; preds = %478
  %494 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 1
  %495 = bitcast %union.anon* %494 to i32*
  %496 = sext i32 %482 to i64
  %497 = shl nsw i64 %496, 2
  br label %498

498:                                              ; preds = %493, %486
  %499 = phi i64 [ %488, %486 ], [ %497, %493 ]
  %500 = phi i32* [ %492, %486 ], [ %495, %493 ]
  %501 = bitcast i32* %500 to i8*
  %502 = bitcast i32* %483 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %501, i8* align 4 %502, i64 %499, i1 false) #12
  %503 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %504 = bitcast %union.TfLitePtrUnion* %503 to float**
  %505 = load float*, float** %504, align 8
  br label %506

506:                                              ; preds = %476, %498
  %507 = phi float* [ %505, %498 ], [ null, %476 ]
  call void @_ZN6tflite13optimized_ops20BroadcastAddDispatchIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_(%"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %8, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %17, float* %440, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %18, float* %473, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %19, float* %507)
  %508 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 0
  %509 = load i32, i32* %508, align 8
  %510 = icmp sgt i32 %509, 5
  br i1 %510, label %511, label %517

511:                                              ; preds = %506
  %512 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 1, i32 0
  %513 = load i32*, i32** %512, align 8
  %514 = icmp eq i32* %513, null
  br i1 %514, label %517, label %515

515:                                              ; preds = %511
  %516 = bitcast i32* %513 to i8*
  call void @_ZdaPv(i8* %516) #11
  br label %517

517:                                              ; preds = %506, %511, %515
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %474) #12
  %518 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 0
  %519 = load i32, i32* %518, align 8
  %520 = icmp sgt i32 %519, 5
  br i1 %520, label %521, label %527

521:                                              ; preds = %517
  %522 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1, i32 0
  %523 = load i32*, i32** %522, align 8
  %524 = icmp eq i32* %523, null
  br i1 %524, label %527, label %525

525:                                              ; preds = %521
  %526 = bitcast i32* %523 to i8*
  call void @_ZdaPv(i8* %526) #11
  br label %527

527:                                              ; preds = %517, %521, %525
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %441) #12
  %528 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 0
  %529 = load i32, i32* %528, align 8
  %530 = icmp sgt i32 %529, 5
  br i1 %530, label %531, label %1134

531:                                              ; preds = %527
  %532 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1, i32 0
  %533 = load i32*, i32** %532, align 8
  %534 = icmp eq i32* %533, null
  br i1 %534, label %1134, label %535

535:                                              ; preds = %531
  %536 = bitcast i32* %533 to i8*
  call void @_ZdaPv(i8* %536) #11
  br label %1134

537:                                              ; preds = %390
  br i1 %394, label %538, label %545

538:                                              ; preds = %537
  %539 = sext i32 %393 to i64
  %540 = getelementptr inbounds [3 x float], [3 x float]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.55, i64 0, i64 %539
  %541 = load float, float* %540, align 4
  %542 = sext i32 %393 to i64
  %543 = getelementptr inbounds [3 x float], [3 x float]* @switch.table._ZN6tflite3ops7builtin3add7EvalAddILNS2_10KernelTypeE2EEEvP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSG_PSE_.56, i64 0, i64 %542
  %544 = load float, float* %543, align 4
  br label %545

545:                                              ; preds = %537, %538
  %546 = phi float [ %541, %538 ], [ 0xC7EFFFFFE0000000, %537 ]
  %547 = phi float [ %544, %538 ], [ 0x47EFFFFFE0000000, %537 ]
  %548 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 13
  store float %546, float* %548, align 4
  %549 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 14
  store float %547, float* %549, align 4
  %550 = bitcast %"class.tflite::RuntimeShape"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %550) #12
  br i1 %25, label %551, label %553

551:                                              ; preds = %545
  %552 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 0
  store i32 0, i32* %552, align 8, !alias.scope !524
  br label %581

553:                                              ; preds = %545
  %554 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %555 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %554, align 8, !noalias !524
  %556 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %555, i64 0, i32 0
  %557 = load i32, i32* %556, align 4, !noalias !524
  %558 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %555, i64 0, i32 1, i64 0
  %559 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 0
  store i32 %557, i32* %559, align 8, !alias.scope !524
  %560 = icmp sgt i32 %557, 5
  br i1 %560, label %561, label %568

561:                                              ; preds = %553
  %562 = sext i32 %557 to i64
  %563 = shl nsw i64 %562, 2
  %564 = call i8* @_Znam(i64 %563) #11, !noalias !524
  %565 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1, i32 0
  %566 = bitcast i32** %565 to i8**
  store i8* %564, i8** %566, align 8, !alias.scope !524
  %567 = bitcast i8* %564 to i32*
  br label %573

568:                                              ; preds = %553
  %569 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1
  %570 = bitcast %union.anon* %569 to i32*
  %571 = sext i32 %557 to i64
  %572 = shl nsw i64 %571, 2
  br label %573

573:                                              ; preds = %568, %561
  %574 = phi i64 [ %563, %561 ], [ %572, %568 ]
  %575 = phi i32* [ %567, %561 ], [ %570, %568 ]
  %576 = bitcast i32* %575 to i8*
  %577 = bitcast i32* %558 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %576, i8* align 4 %577, i64 %574, i1 false) #12
  %578 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %579 = bitcast %union.TfLitePtrUnion* %578 to float**
  %580 = load float*, float** %579, align 8
  br label %581

581:                                              ; preds = %551, %573
  %582 = phi i32 [ %557, %573 ], [ 0, %551 ]
  %583 = phi float* [ %580, %573 ], [ null, %551 ]
  %584 = bitcast %"class.tflite::RuntimeShape"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %584) #12
  br i1 %55, label %585, label %587

585:                                              ; preds = %581
  %586 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 0
  store i32 0, i32* %586, align 8, !alias.scope !527
  br label %615

587:                                              ; preds = %581
  %588 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %589 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %588, align 8, !noalias !527
  %590 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %589, i64 0, i32 0
  %591 = load i32, i32* %590, align 4, !noalias !527
  %592 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %589, i64 0, i32 1, i64 0
  %593 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 0
  store i32 %591, i32* %593, align 8, !alias.scope !527
  %594 = icmp sgt i32 %591, 5
  br i1 %594, label %595, label %602

595:                                              ; preds = %587
  %596 = sext i32 %591 to i64
  %597 = shl nsw i64 %596, 2
  %598 = call i8* @_Znam(i64 %597) #11, !noalias !527
  %599 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1, i32 0
  %600 = bitcast i32** %599 to i8**
  store i8* %598, i8** %600, align 8, !alias.scope !527
  %601 = bitcast i8* %598 to i32*
  br label %607

602:                                              ; preds = %587
  %603 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1
  %604 = bitcast %union.anon* %603 to i32*
  %605 = sext i32 %591 to i64
  %606 = shl nsw i64 %605, 2
  br label %607

607:                                              ; preds = %602, %595
  %608 = phi i64 [ %597, %595 ], [ %606, %602 ]
  %609 = phi i32* [ %601, %595 ], [ %604, %602 ]
  %610 = bitcast i32* %609 to i8*
  %611 = bitcast i32* %592 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %610, i8* align 4 %611, i64 %608, i1 false) #12
  %612 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %613 = bitcast %union.TfLitePtrUnion* %612 to float**
  %614 = load float*, float** %613, align 8
  br label %615

615:                                              ; preds = %585, %607
  %616 = phi i32 [ %591, %607 ], [ 0, %585 ]
  %617 = phi float* [ %614, %607 ], [ null, %585 ]
  %618 = bitcast %"class.tflite::RuntimeShape"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %618) #12
  %619 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %619, label %620, label %622

620:                                              ; preds = %615
  %621 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 0
  store i32 0, i32* %621, align 8, !alias.scope !530
  br label %650

622:                                              ; preds = %615
  %623 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %624 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %623, align 8, !noalias !530
  %625 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %624, i64 0, i32 0
  %626 = load i32, i32* %625, align 4, !noalias !530
  %627 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %624, i64 0, i32 1, i64 0
  %628 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 0
  store i32 %626, i32* %628, align 8, !alias.scope !530
  %629 = icmp sgt i32 %626, 5
  br i1 %629, label %630, label %637

630:                                              ; preds = %622
  %631 = sext i32 %626 to i64
  %632 = shl nsw i64 %631, 2
  %633 = call i8* @_Znam(i64 %632) #11, !noalias !530
  %634 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1, i32 0
  %635 = bitcast i32** %634 to i8**
  store i8* %633, i8** %635, align 8, !alias.scope !530
  %636 = bitcast i8* %633 to i32*
  br label %642

637:                                              ; preds = %622
  %638 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1
  %639 = bitcast %union.anon* %638 to i32*
  %640 = sext i32 %626 to i64
  %641 = shl nsw i64 %640, 2
  br label %642

642:                                              ; preds = %637, %630
  %643 = phi i64 [ %632, %630 ], [ %641, %637 ]
  %644 = phi i32* [ %636, %630 ], [ %639, %637 ]
  %645 = bitcast i32* %644 to i8*
  %646 = bitcast i32* %627 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %645, i8* align 4 %646, i64 %643, i1 false) #12
  %647 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %648 = bitcast %union.TfLitePtrUnion* %647 to float**
  %649 = load float*, float** %648, align 8
  br label %650

650:                                              ; preds = %620, %642
  %651 = phi i32 [ %626, %642 ], [ 0, %620 ]
  %652 = phi float* [ %649, %642 ], [ null, %620 ]
  %653 = icmp sgt i32 %582, 5
  %654 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1
  br i1 %653, label %655, label %658

655:                                              ; preds = %650
  %656 = getelementptr inbounds %union.anon, %union.anon* %654, i64 0, i32 0
  %657 = load i32*, i32** %656, align 8
  br label %661

658:                                              ; preds = %650
  %659 = bitcast %union.anon* %654 to i32*
  %660 = icmp sgt i32 %582, 0
  br i1 %660, label %661, label %761

661:                                              ; preds = %658, %655
  %662 = phi i32* [ %657, %655 ], [ %659, %658 ]
  %663 = zext i32 %582 to i64
  %664 = icmp ult i32 %582, 8
  br i1 %664, label %750, label %665

665:                                              ; preds = %661
  %666 = and i64 %663, 4294967288
  %667 = add nsw i64 %666, -8
  %668 = lshr exact i64 %667, 3
  %669 = add nuw nsw i64 %668, 1
  %670 = and i64 %669, 3
  %671 = icmp ult i64 %667, 24
  br i1 %671, label %717, label %672

672:                                              ; preds = %665
  %673 = sub nsw i64 %669, %670
  br label %674

674:                                              ; preds = %674, %672
  %675 = phi i64 [ 0, %672 ], [ %714, %674 ]
  %676 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %672 ], [ %712, %674 ]
  %677 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %672 ], [ %713, %674 ]
  %678 = phi i64 [ %673, %672 ], [ %715, %674 ]
  %679 = getelementptr inbounds i32, i32* %662, i64 %675
  %680 = bitcast i32* %679 to <4 x i32>*
  %681 = load <4 x i32>, <4 x i32>* %680, align 4
  %682 = getelementptr inbounds i32, i32* %679, i64 4
  %683 = bitcast i32* %682 to <4 x i32>*
  %684 = load <4 x i32>, <4 x i32>* %683, align 4
  %685 = mul nsw <4 x i32> %681, %676
  %686 = mul nsw <4 x i32> %684, %677
  %687 = or i64 %675, 8
  %688 = getelementptr inbounds i32, i32* %662, i64 %687
  %689 = bitcast i32* %688 to <4 x i32>*
  %690 = load <4 x i32>, <4 x i32>* %689, align 4
  %691 = getelementptr inbounds i32, i32* %688, i64 4
  %692 = bitcast i32* %691 to <4 x i32>*
  %693 = load <4 x i32>, <4 x i32>* %692, align 4
  %694 = mul nsw <4 x i32> %690, %685
  %695 = mul nsw <4 x i32> %693, %686
  %696 = or i64 %675, 16
  %697 = getelementptr inbounds i32, i32* %662, i64 %696
  %698 = bitcast i32* %697 to <4 x i32>*
  %699 = load <4 x i32>, <4 x i32>* %698, align 4
  %700 = getelementptr inbounds i32, i32* %697, i64 4
  %701 = bitcast i32* %700 to <4 x i32>*
  %702 = load <4 x i32>, <4 x i32>* %701, align 4
  %703 = mul nsw <4 x i32> %699, %694
  %704 = mul nsw <4 x i32> %702, %695
  %705 = or i64 %675, 24
  %706 = getelementptr inbounds i32, i32* %662, i64 %705
  %707 = bitcast i32* %706 to <4 x i32>*
  %708 = load <4 x i32>, <4 x i32>* %707, align 4
  %709 = getelementptr inbounds i32, i32* %706, i64 4
  %710 = bitcast i32* %709 to <4 x i32>*
  %711 = load <4 x i32>, <4 x i32>* %710, align 4
  %712 = mul nsw <4 x i32> %708, %703
  %713 = mul nsw <4 x i32> %711, %704
  %714 = add i64 %675, 32
  %715 = add i64 %678, -4
  %716 = icmp eq i64 %715, 0
  br i1 %716, label %717, label %674, !llvm.loop !533

717:                                              ; preds = %674, %665
  %718 = phi <4 x i32> [ undef, %665 ], [ %712, %674 ]
  %719 = phi <4 x i32> [ undef, %665 ], [ %713, %674 ]
  %720 = phi i64 [ 0, %665 ], [ %714, %674 ]
  %721 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %665 ], [ %712, %674 ]
  %722 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %665 ], [ %713, %674 ]
  %723 = icmp eq i64 %670, 0
  br i1 %723, label %740, label %724

724:                                              ; preds = %717, %724
  %725 = phi i64 [ %737, %724 ], [ %720, %717 ]
  %726 = phi <4 x i32> [ %735, %724 ], [ %721, %717 ]
  %727 = phi <4 x i32> [ %736, %724 ], [ %722, %717 ]
  %728 = phi i64 [ %738, %724 ], [ %670, %717 ]
  %729 = getelementptr inbounds i32, i32* %662, i64 %725
  %730 = bitcast i32* %729 to <4 x i32>*
  %731 = load <4 x i32>, <4 x i32>* %730, align 4
  %732 = getelementptr inbounds i32, i32* %729, i64 4
  %733 = bitcast i32* %732 to <4 x i32>*
  %734 = load <4 x i32>, <4 x i32>* %733, align 4
  %735 = mul nsw <4 x i32> %731, %726
  %736 = mul nsw <4 x i32> %734, %727
  %737 = add i64 %725, 8
  %738 = add i64 %728, -1
  %739 = icmp eq i64 %738, 0
  br i1 %739, label %740, label %724, !llvm.loop !534

740:                                              ; preds = %724, %717
  %741 = phi <4 x i32> [ %718, %717 ], [ %735, %724 ]
  %742 = phi <4 x i32> [ %719, %717 ], [ %736, %724 ]
  %743 = mul <4 x i32> %742, %741
  %744 = shufflevector <4 x i32> %743, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %745 = mul <4 x i32> %743, %744
  %746 = shufflevector <4 x i32> %745, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %747 = mul <4 x i32> %745, %746
  %748 = extractelement <4 x i32> %747, i32 0
  %749 = icmp eq i64 %666, %663
  br i1 %749, label %761, label %750

750:                                              ; preds = %740, %661
  %751 = phi i64 [ 0, %661 ], [ %666, %740 ]
  %752 = phi i32 [ 1, %661 ], [ %748, %740 ]
  br label %753

753:                                              ; preds = %750, %753
  %754 = phi i64 [ %759, %753 ], [ %751, %750 ]
  %755 = phi i32 [ %758, %753 ], [ %752, %750 ]
  %756 = getelementptr inbounds i32, i32* %662, i64 %754
  %757 = load i32, i32* %756, align 4
  %758 = mul nsw i32 %757, %755
  %759 = add nuw nsw i64 %754, 1
  %760 = icmp eq i64 %759, %663
  br i1 %760, label %761, label %753, !llvm.loop !535

761:                                              ; preds = %753, %740, %658
  %762 = phi i32 [ 1, %658 ], [ %748, %740 ], [ %758, %753 ]
  %763 = icmp sgt i32 %616, 5
  %764 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1
  br i1 %763, label %765, label %768

765:                                              ; preds = %761
  %766 = getelementptr inbounds %union.anon, %union.anon* %764, i64 0, i32 0
  %767 = load i32*, i32** %766, align 8
  br label %771

768:                                              ; preds = %761
  %769 = bitcast %union.anon* %764 to i32*
  %770 = icmp sgt i32 %616, 0
  br i1 %770, label %771, label %871

771:                                              ; preds = %768, %765
  %772 = phi i32* [ %767, %765 ], [ %769, %768 ]
  %773 = zext i32 %616 to i64
  %774 = icmp ult i32 %616, 8
  br i1 %774, label %860, label %775

775:                                              ; preds = %771
  %776 = and i64 %773, 4294967288
  %777 = add nsw i64 %776, -8
  %778 = lshr exact i64 %777, 3
  %779 = add nuw nsw i64 %778, 1
  %780 = and i64 %779, 3
  %781 = icmp ult i64 %777, 24
  br i1 %781, label %827, label %782

782:                                              ; preds = %775
  %783 = sub nsw i64 %779, %780
  br label %784

784:                                              ; preds = %784, %782
  %785 = phi i64 [ 0, %782 ], [ %824, %784 ]
  %786 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %782 ], [ %822, %784 ]
  %787 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %782 ], [ %823, %784 ]
  %788 = phi i64 [ %783, %782 ], [ %825, %784 ]
  %789 = getelementptr inbounds i32, i32* %772, i64 %785
  %790 = bitcast i32* %789 to <4 x i32>*
  %791 = load <4 x i32>, <4 x i32>* %790, align 4
  %792 = getelementptr inbounds i32, i32* %789, i64 4
  %793 = bitcast i32* %792 to <4 x i32>*
  %794 = load <4 x i32>, <4 x i32>* %793, align 4
  %795 = mul nsw <4 x i32> %791, %786
  %796 = mul nsw <4 x i32> %794, %787
  %797 = or i64 %785, 8
  %798 = getelementptr inbounds i32, i32* %772, i64 %797
  %799 = bitcast i32* %798 to <4 x i32>*
  %800 = load <4 x i32>, <4 x i32>* %799, align 4
  %801 = getelementptr inbounds i32, i32* %798, i64 4
  %802 = bitcast i32* %801 to <4 x i32>*
  %803 = load <4 x i32>, <4 x i32>* %802, align 4
  %804 = mul nsw <4 x i32> %800, %795
  %805 = mul nsw <4 x i32> %803, %796
  %806 = or i64 %785, 16
  %807 = getelementptr inbounds i32, i32* %772, i64 %806
  %808 = bitcast i32* %807 to <4 x i32>*
  %809 = load <4 x i32>, <4 x i32>* %808, align 4
  %810 = getelementptr inbounds i32, i32* %807, i64 4
  %811 = bitcast i32* %810 to <4 x i32>*
  %812 = load <4 x i32>, <4 x i32>* %811, align 4
  %813 = mul nsw <4 x i32> %809, %804
  %814 = mul nsw <4 x i32> %812, %805
  %815 = or i64 %785, 24
  %816 = getelementptr inbounds i32, i32* %772, i64 %815
  %817 = bitcast i32* %816 to <4 x i32>*
  %818 = load <4 x i32>, <4 x i32>* %817, align 4
  %819 = getelementptr inbounds i32, i32* %816, i64 4
  %820 = bitcast i32* %819 to <4 x i32>*
  %821 = load <4 x i32>, <4 x i32>* %820, align 4
  %822 = mul nsw <4 x i32> %818, %813
  %823 = mul nsw <4 x i32> %821, %814
  %824 = add i64 %785, 32
  %825 = add i64 %788, -4
  %826 = icmp eq i64 %825, 0
  br i1 %826, label %827, label %784, !llvm.loop !536

827:                                              ; preds = %784, %775
  %828 = phi <4 x i32> [ undef, %775 ], [ %822, %784 ]
  %829 = phi <4 x i32> [ undef, %775 ], [ %823, %784 ]
  %830 = phi i64 [ 0, %775 ], [ %824, %784 ]
  %831 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %775 ], [ %822, %784 ]
  %832 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %775 ], [ %823, %784 ]
  %833 = icmp eq i64 %780, 0
  br i1 %833, label %850, label %834

834:                                              ; preds = %827, %834
  %835 = phi i64 [ %847, %834 ], [ %830, %827 ]
  %836 = phi <4 x i32> [ %845, %834 ], [ %831, %827 ]
  %837 = phi <4 x i32> [ %846, %834 ], [ %832, %827 ]
  %838 = phi i64 [ %848, %834 ], [ %780, %827 ]
  %839 = getelementptr inbounds i32, i32* %772, i64 %835
  %840 = bitcast i32* %839 to <4 x i32>*
  %841 = load <4 x i32>, <4 x i32>* %840, align 4
  %842 = getelementptr inbounds i32, i32* %839, i64 4
  %843 = bitcast i32* %842 to <4 x i32>*
  %844 = load <4 x i32>, <4 x i32>* %843, align 4
  %845 = mul nsw <4 x i32> %841, %836
  %846 = mul nsw <4 x i32> %844, %837
  %847 = add i64 %835, 8
  %848 = add i64 %838, -1
  %849 = icmp eq i64 %848, 0
  br i1 %849, label %850, label %834, !llvm.loop !537

850:                                              ; preds = %834, %827
  %851 = phi <4 x i32> [ %828, %827 ], [ %845, %834 ]
  %852 = phi <4 x i32> [ %829, %827 ], [ %846, %834 ]
  %853 = mul <4 x i32> %852, %851
  %854 = shufflevector <4 x i32> %853, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %855 = mul <4 x i32> %853, %854
  %856 = shufflevector <4 x i32> %855, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %857 = mul <4 x i32> %855, %856
  %858 = extractelement <4 x i32> %857, i32 0
  %859 = icmp eq i64 %776, %773
  br i1 %859, label %871, label %860

860:                                              ; preds = %850, %771
  %861 = phi i64 [ 0, %771 ], [ %776, %850 ]
  %862 = phi i32 [ 1, %771 ], [ %858, %850 ]
  br label %863

863:                                              ; preds = %860, %863
  %864 = phi i64 [ %869, %863 ], [ %861, %860 ]
  %865 = phi i32 [ %868, %863 ], [ %862, %860 ]
  %866 = getelementptr inbounds i32, i32* %772, i64 %864
  %867 = load i32, i32* %866, align 4
  %868 = mul nsw i32 %867, %865
  %869 = add nuw nsw i64 %864, 1
  %870 = icmp eq i64 %869, %773
  br i1 %870, label %871, label %863, !llvm.loop !538

871:                                              ; preds = %863, %850, %768
  %872 = phi i32 [ 1, %768 ], [ %858, %850 ], [ %868, %863 ]
  %873 = icmp sgt i32 %651, 5
  %874 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1
  br i1 %873, label %875, label %878

875:                                              ; preds = %871
  %876 = getelementptr inbounds %union.anon, %union.anon* %874, i64 0, i32 0
  %877 = load i32*, i32** %876, align 8
  br label %881

878:                                              ; preds = %871
  %879 = bitcast %union.anon* %874 to i32*
  %880 = icmp sgt i32 %651, 0
  br i1 %880, label %881, label %981

881:                                              ; preds = %878, %875
  %882 = phi i32* [ %877, %875 ], [ %879, %878 ]
  %883 = zext i32 %651 to i64
  %884 = icmp ult i32 %651, 8
  br i1 %884, label %970, label %885

885:                                              ; preds = %881
  %886 = and i64 %883, 4294967288
  %887 = add nsw i64 %886, -8
  %888 = lshr exact i64 %887, 3
  %889 = add nuw nsw i64 %888, 1
  %890 = and i64 %889, 3
  %891 = icmp ult i64 %887, 24
  br i1 %891, label %937, label %892

892:                                              ; preds = %885
  %893 = sub nsw i64 %889, %890
  br label %894

894:                                              ; preds = %894, %892
  %895 = phi i64 [ 0, %892 ], [ %934, %894 ]
  %896 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %892 ], [ %932, %894 ]
  %897 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %892 ], [ %933, %894 ]
  %898 = phi i64 [ %893, %892 ], [ %935, %894 ]
  %899 = getelementptr inbounds i32, i32* %882, i64 %895
  %900 = bitcast i32* %899 to <4 x i32>*
  %901 = load <4 x i32>, <4 x i32>* %900, align 4
  %902 = getelementptr inbounds i32, i32* %899, i64 4
  %903 = bitcast i32* %902 to <4 x i32>*
  %904 = load <4 x i32>, <4 x i32>* %903, align 4
  %905 = mul nsw <4 x i32> %901, %896
  %906 = mul nsw <4 x i32> %904, %897
  %907 = or i64 %895, 8
  %908 = getelementptr inbounds i32, i32* %882, i64 %907
  %909 = bitcast i32* %908 to <4 x i32>*
  %910 = load <4 x i32>, <4 x i32>* %909, align 4
  %911 = getelementptr inbounds i32, i32* %908, i64 4
  %912 = bitcast i32* %911 to <4 x i32>*
  %913 = load <4 x i32>, <4 x i32>* %912, align 4
  %914 = mul nsw <4 x i32> %910, %905
  %915 = mul nsw <4 x i32> %913, %906
  %916 = or i64 %895, 16
  %917 = getelementptr inbounds i32, i32* %882, i64 %916
  %918 = bitcast i32* %917 to <4 x i32>*
  %919 = load <4 x i32>, <4 x i32>* %918, align 4
  %920 = getelementptr inbounds i32, i32* %917, i64 4
  %921 = bitcast i32* %920 to <4 x i32>*
  %922 = load <4 x i32>, <4 x i32>* %921, align 4
  %923 = mul nsw <4 x i32> %919, %914
  %924 = mul nsw <4 x i32> %922, %915
  %925 = or i64 %895, 24
  %926 = getelementptr inbounds i32, i32* %882, i64 %925
  %927 = bitcast i32* %926 to <4 x i32>*
  %928 = load <4 x i32>, <4 x i32>* %927, align 4
  %929 = getelementptr inbounds i32, i32* %926, i64 4
  %930 = bitcast i32* %929 to <4 x i32>*
  %931 = load <4 x i32>, <4 x i32>* %930, align 4
  %932 = mul nsw <4 x i32> %928, %923
  %933 = mul nsw <4 x i32> %931, %924
  %934 = add i64 %895, 32
  %935 = add i64 %898, -4
  %936 = icmp eq i64 %935, 0
  br i1 %936, label %937, label %894, !llvm.loop !539

937:                                              ; preds = %894, %885
  %938 = phi <4 x i32> [ undef, %885 ], [ %932, %894 ]
  %939 = phi <4 x i32> [ undef, %885 ], [ %933, %894 ]
  %940 = phi i64 [ 0, %885 ], [ %934, %894 ]
  %941 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %885 ], [ %932, %894 ]
  %942 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %885 ], [ %933, %894 ]
  %943 = icmp eq i64 %890, 0
  br i1 %943, label %960, label %944

944:                                              ; preds = %937, %944
  %945 = phi i64 [ %957, %944 ], [ %940, %937 ]
  %946 = phi <4 x i32> [ %955, %944 ], [ %941, %937 ]
  %947 = phi <4 x i32> [ %956, %944 ], [ %942, %937 ]
  %948 = phi i64 [ %958, %944 ], [ %890, %937 ]
  %949 = getelementptr inbounds i32, i32* %882, i64 %945
  %950 = bitcast i32* %949 to <4 x i32>*
  %951 = load <4 x i32>, <4 x i32>* %950, align 4
  %952 = getelementptr inbounds i32, i32* %949, i64 4
  %953 = bitcast i32* %952 to <4 x i32>*
  %954 = load <4 x i32>, <4 x i32>* %953, align 4
  %955 = mul nsw <4 x i32> %951, %946
  %956 = mul nsw <4 x i32> %954, %947
  %957 = add i64 %945, 8
  %958 = add i64 %948, -1
  %959 = icmp eq i64 %958, 0
  br i1 %959, label %960, label %944, !llvm.loop !540

960:                                              ; preds = %944, %937
  %961 = phi <4 x i32> [ %938, %937 ], [ %955, %944 ]
  %962 = phi <4 x i32> [ %939, %937 ], [ %956, %944 ]
  %963 = mul <4 x i32> %962, %961
  %964 = shufflevector <4 x i32> %963, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %965 = mul <4 x i32> %963, %964
  %966 = shufflevector <4 x i32> %965, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %967 = mul <4 x i32> %965, %966
  %968 = extractelement <4 x i32> %967, i32 0
  %969 = icmp eq i64 %886, %883
  br i1 %969, label %981, label %970

970:                                              ; preds = %960, %881
  %971 = phi i64 [ 0, %881 ], [ %886, %960 ]
  %972 = phi i32 [ 1, %881 ], [ %968, %960 ]
  br label %973

973:                                              ; preds = %970, %973
  %974 = phi i64 [ %979, %973 ], [ %971, %970 ]
  %975 = phi i32 [ %978, %973 ], [ %972, %970 ]
  %976 = getelementptr inbounds i32, i32* %882, i64 %974
  %977 = load i32, i32* %976, align 4
  %978 = mul nsw i32 %977, %975
  %979 = add nuw nsw i64 %974, 1
  %980 = icmp eq i64 %979, %883
  br i1 %980, label %981, label %973, !llvm.loop !541

981:                                              ; preds = %973, %960, %878
  %982 = phi i32 [ 1, %878 ], [ %968, %960 ], [ %978, %973 ]
  %983 = icmp eq i32 %762, %872
  br i1 %983, label %985, label %984

984:                                              ; preds = %981
  call void @abort() #13
  unreachable

985:                                              ; preds = %981
  %986 = icmp eq i32 %762, %982
  br i1 %986, label %988, label %987

987:                                              ; preds = %985
  call void @abort() #13
  unreachable

988:                                              ; preds = %985
  %989 = icmp sgt i32 %762, 0
  br i1 %989, label %990, label %1113

990:                                              ; preds = %988
  %991 = zext i32 %762 to i64
  %992 = load float, float* %583, align 4
  %993 = load float, float* %617, align 4
  %994 = fadd float %992, %993
  %995 = fcmp olt float %994, %546
  %996 = select i1 %995, float %546, float %994
  %997 = fcmp ogt float %996, %547
  %998 = select i1 %997, float %547, float %996
  store float %998, float* %652, align 4
  %999 = icmp eq i32 %762, 1
  br i1 %999, label %1113, label %1000

1000:                                             ; preds = %990
  %1001 = add nsw i64 %991, -1
  %1002 = icmp ult i64 %1001, 4
  br i1 %1002, label %1061, label %1003

1003:                                             ; preds = %1000
  %1004 = getelementptr float, float* %652, i64 1
  %1005 = bitcast float* %1004 to i8*
  %1006 = getelementptr float, float* %652, i64 %991
  %1007 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 13
  %1008 = bitcast float* %1007 to i8*
  %1009 = getelementptr inbounds i8, i8* %1008, i64 1
  %1010 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 14
  %1011 = bitcast float* %1010 to i8*
  %1012 = getelementptr inbounds i8, i8* %1011, i64 1
  %1013 = getelementptr float, float* %583, i64 1
  %1014 = getelementptr float, float* %583, i64 %991
  %1015 = getelementptr float, float* %617, i64 1
  %1016 = getelementptr float, float* %617, i64 %991
  %1017 = icmp ugt i8* %1009, %1005
  %1018 = icmp ult float* %548, %1006
  %1019 = and i1 %1017, %1018
  %1020 = icmp ugt i8* %1012, %1005
  %1021 = icmp ult float* %549, %1006
  %1022 = and i1 %1020, %1021
  %1023 = or i1 %1019, %1022
  %1024 = icmp ult float* %1004, %1014
  %1025 = icmp ult float* %1013, %1006
  %1026 = and i1 %1024, %1025
  %1027 = or i1 %1023, %1026
  %1028 = icmp ult float* %1004, %1016
  %1029 = icmp ult float* %1015, %1006
  %1030 = and i1 %1028, %1029
  %1031 = or i1 %1027, %1030
  br i1 %1031, label %1061, label %1032

1032:                                             ; preds = %1003
  %1033 = and i64 %1001, -4
  %1034 = or i64 %1033, 1
  %1035 = load float, float* %548, align 4, !alias.scope !542
  %1036 = insertelement <4 x float> undef, float %1035, i32 0
  %1037 = shufflevector <4 x float> %1036, <4 x float> undef, <4 x i32> zeroinitializer
  %1038 = load float, float* %549, align 4, !alias.scope !545
  %1039 = insertelement <4 x float> undef, float %1038, i32 0
  %1040 = shufflevector <4 x float> %1039, <4 x float> undef, <4 x i32> zeroinitializer
  br label %1041

1041:                                             ; preds = %1041, %1032
  %1042 = phi i64 [ 0, %1032 ], [ %1057, %1041 ]
  %1043 = or i64 %1042, 1
  %1044 = getelementptr inbounds float, float* %583, i64 %1043
  %1045 = bitcast float* %1044 to <4 x float>*
  %1046 = load <4 x float>, <4 x float>* %1045, align 4, !alias.scope !547
  %1047 = getelementptr inbounds float, float* %617, i64 %1043
  %1048 = bitcast float* %1047 to <4 x float>*
  %1049 = load <4 x float>, <4 x float>* %1048, align 4, !alias.scope !549
  %1050 = fadd <4 x float> %1046, %1049
  %1051 = fcmp olt <4 x float> %1050, %1037
  %1052 = select <4 x i1> %1051, <4 x float> %1037, <4 x float> %1050
  %1053 = fcmp ogt <4 x float> %1052, %1040
  %1054 = select <4 x i1> %1053, <4 x float> %1040, <4 x float> %1052
  %1055 = getelementptr inbounds float, float* %652, i64 %1043
  %1056 = bitcast float* %1055 to <4 x float>*
  store <4 x float> %1054, <4 x float>* %1056, align 4, !alias.scope !551, !noalias !553
  %1057 = add i64 %1042, 4
  %1058 = icmp eq i64 %1057, %1033
  br i1 %1058, label %1059, label %1041, !llvm.loop !554

1059:                                             ; preds = %1041
  %1060 = icmp eq i64 %1001, %1033
  br i1 %1060, label %1113, label %1061

1061:                                             ; preds = %1059, %1003, %1000
  %1062 = phi i64 [ 1, %1003 ], [ 1, %1000 ], [ %1034, %1059 ]
  %1063 = xor i64 %1062, -1
  %1064 = and i64 %991, 1
  %1065 = icmp eq i64 %1064, 0
  br i1 %1065, label %1066, label %1080

1066:                                             ; preds = %1061
  %1067 = load float, float* %548, align 4
  %1068 = load float, float* %549, align 4
  %1069 = getelementptr inbounds float, float* %583, i64 %1062
  %1070 = load float, float* %1069, align 4
  %1071 = getelementptr inbounds float, float* %617, i64 %1062
  %1072 = load float, float* %1071, align 4
  %1073 = fadd float %1070, %1072
  %1074 = fcmp olt float %1073, %1067
  %1075 = select i1 %1074, float %1067, float %1073
  %1076 = fcmp ogt float %1075, %1068
  %1077 = select i1 %1076, float %1068, float %1075
  %1078 = getelementptr inbounds float, float* %652, i64 %1062
  store float %1077, float* %1078, align 4
  %1079 = add nuw nsw i64 %1062, 1
  br label %1080

1080:                                             ; preds = %1061, %1066
  %1081 = phi i64 [ %1062, %1061 ], [ %1079, %1066 ]
  %1082 = sub nsw i64 0, %991
  %1083 = icmp eq i64 %1063, %1082
  br i1 %1083, label %1113, label %1084

1084:                                             ; preds = %1080, %1084
  %1085 = phi i64 [ %1111, %1084 ], [ %1081, %1080 ]
  %1086 = load float, float* %548, align 4
  %1087 = load float, float* %549, align 4
  %1088 = getelementptr inbounds float, float* %583, i64 %1085
  %1089 = load float, float* %1088, align 4
  %1090 = getelementptr inbounds float, float* %617, i64 %1085
  %1091 = load float, float* %1090, align 4
  %1092 = fadd float %1089, %1091
  %1093 = fcmp olt float %1092, %1086
  %1094 = select i1 %1093, float %1086, float %1092
  %1095 = fcmp ogt float %1094, %1087
  %1096 = select i1 %1095, float %1087, float %1094
  %1097 = getelementptr inbounds float, float* %652, i64 %1085
  store float %1096, float* %1097, align 4
  %1098 = add nuw nsw i64 %1085, 1
  %1099 = load float, float* %548, align 4
  %1100 = load float, float* %549, align 4
  %1101 = getelementptr inbounds float, float* %583, i64 %1098
  %1102 = load float, float* %1101, align 4
  %1103 = getelementptr inbounds float, float* %617, i64 %1098
  %1104 = load float, float* %1103, align 4
  %1105 = fadd float %1102, %1104
  %1106 = fcmp olt float %1105, %1099
  %1107 = select i1 %1106, float %1099, float %1105
  %1108 = fcmp ogt float %1107, %1100
  %1109 = select i1 %1108, float %1100, float %1107
  %1110 = getelementptr inbounds float, float* %652, i64 %1098
  store float %1109, float* %1110, align 4
  %1111 = add nuw nsw i64 %1085, 2
  %1112 = icmp eq i64 %1111, %991
  br i1 %1112, label %1113, label %1084, !llvm.loop !555

1113:                                             ; preds = %1080, %1084, %990, %1059, %988
  br i1 %873, label %1114, label %1120

1114:                                             ; preds = %1113
  %1115 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1, i32 0
  %1116 = load i32*, i32** %1115, align 8
  %1117 = icmp eq i32* %1116, null
  br i1 %1117, label %1120, label %1118

1118:                                             ; preds = %1114
  %1119 = bitcast i32* %1116 to i8*
  call void @_ZdaPv(i8* %1119) #11
  br label %1120

1120:                                             ; preds = %1113, %1114, %1118
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %618) #12
  br i1 %763, label %1121, label %1127

1121:                                             ; preds = %1120
  %1122 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1, i32 0
  %1123 = load i32*, i32** %1122, align 8
  %1124 = icmp eq i32* %1123, null
  br i1 %1124, label %1127, label %1125

1125:                                             ; preds = %1121
  %1126 = bitcast i32* %1123 to i8*
  call void @_ZdaPv(i8* %1126) #11
  br label %1127

1127:                                             ; preds = %1120, %1121, %1125
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %584) #12
  br i1 %653, label %1128, label %1134

1128:                                             ; preds = %1127
  %1129 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1, i32 0
  %1130 = load i32*, i32** %1129, align 8
  %1131 = icmp eq i32* %1130, null
  br i1 %1131, label %1134, label %1132

1132:                                             ; preds = %1128
  %1133 = bitcast i32* %1130 to i8*
  call void @_ZdaPv(i8* %1133) #11
  br label %1134

1134:                                             ; preds = %1132, %1128, %1127, %535, %531, %527, %388, %384, %380, %249, %245, %241
  %1135 = phi i8* [ %125, %241 ], [ %125, %245 ], [ %125, %249 ], [ %264, %380 ], [ %264, %384 ], [ %264, %388 ], [ %408, %527 ], [ %408, %531 ], [ %408, %535 ], [ %550, %1127 ], [ %550, %1128 ], [ %550, %1132 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1135) #12
  br label %1136

1136:                                             ; preds = %1134, %104
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %23) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN6tflite3ops7builtin3add16EvalAddQuantizedILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSH_PSF_(%struct.TfLiteContext*, %struct.TfLiteNode*, %struct.TfLiteAddParams*, %"struct.tflite::ops::builtin::add::OpData"*, %struct.TfLiteTensor*, %struct.TfLiteTensor*, %struct.TfLiteTensor*) local_unnamed_addr #3 comdat {
  %8 = alloca %"struct.tflite::ArithmeticParams", align 4
  %9 = alloca %"struct.tflite::ArithmeticParams", align 4
  %10 = alloca %"struct.tflite::ArithmeticParams", align 4
  %11 = alloca %"class.tflite::RuntimeShape", align 8
  %12 = alloca %"class.tflite::RuntimeShape", align 8
  %13 = alloca %"class.tflite::RuntimeShape", align 8
  %14 = alloca %"class.tflite::RuntimeShape", align 8
  %15 = alloca %"class.tflite::RuntimeShape", align 8
  %16 = alloca %"class.tflite::RuntimeShape", align 8
  %17 = alloca %"class.tflite::RuntimeShape", align 8
  %18 = alloca %"class.tflite::RuntimeShape", align 8
  %19 = alloca %"class.tflite::RuntimeShape", align 8
  %20 = alloca %"class.tflite::RuntimeShape", align 8
  %21 = alloca %"class.tflite::RuntimeShape", align 8
  %22 = alloca %"class.tflite::RuntimeShape", align 8
  %23 = alloca %"class.tflite::RuntimeShape", align 8
  %24 = alloca %"class.tflite::RuntimeShape", align 8
  %25 = alloca %"class.tflite::RuntimeShape", align 8
  %26 = alloca %"class.tflite::RuntimeShape", align 8
  %27 = alloca %"class.tflite::RuntimeShape", align 8
  %28 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 0
  %29 = load i32, i32* %28, align 8
  switch i32 %29, label %2147 [
    i32 3, label %30
    i32 9, label %30
    i32 7, label %1565
  ]

30:                                               ; preds = %7, %7
  %31 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %31) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %31, i8* align 4 getelementptr inbounds ({ i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, [5 x i32] }, { i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, [5 x i32] }* @__const._ZN6tflite3ops7builtin3add16EvalAddQuantizedILNS2_10KernelTypeE2EEE12TfLiteStatusP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSH_PSF_.op_params, i64 0, i32 0), i64 80, i1 false)
  %32 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 8
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 6
  store i32 %33, i32* %34, align 4
  %35 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 9
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 1
  store i32 %36, i32* %37, align 4
  %38 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 4
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 7
  store i32 %39, i32* %40, align 4
  %41 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 8
  store i32 %42, i32* %43, align 4
  %44 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 10
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 2
  store i32 %45, i32* %46, align 4
  %47 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 5
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 9
  store i32 %48, i32* %49, align 4
  %50 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 10
  store i32 %51, i32* %52, align 4
  %53 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 11
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 3
  store i32 %54, i32* %55, align 4
  %56 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 6
  %57 = load i32, i32* %56, align 4
  %58 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 4
  store i32 %57, i32* %58, align 4
  %59 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 7
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 5
  store i32 %60, i32* %61, align 4
  %62 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 2
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 3
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 11
  store i32 %63, i32* %66, align 4
  %67 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %10, i64 0, i32 12
  store i32 %65, i32* %67, align 4
  %68 = bitcast %"class.tflite::RuntimeShape"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %68) #12
  %69 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %69, label %70, label %72

70:                                               ; preds = %30
  %71 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 0, i32* %71, align 8, !alias.scope !556
  br label %97

72:                                               ; preds = %30
  %73 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %74 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %73, align 8, !noalias !556
  %75 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %74, i64 0, i32 0
  %76 = load i32, i32* %75, align 4, !noalias !556
  %77 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %74, i64 0, i32 1, i64 0
  %78 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  store i32 %76, i32* %78, align 8, !alias.scope !556
  %79 = icmp sgt i32 %76, 5
  br i1 %79, label %80, label %87

80:                                               ; preds = %72
  %81 = sext i32 %76 to i64
  %82 = shl nsw i64 %81, 2
  %83 = tail call i8* @_Znam(i64 %82) #11, !noalias !556
  %84 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %85 = bitcast i32** %84 to i8**
  store i8* %83, i8** %85, align 8, !alias.scope !556
  %86 = bitcast i8* %83 to i32*
  br label %92

87:                                               ; preds = %72
  %88 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1
  %89 = bitcast %union.anon* %88 to i32*
  %90 = sext i32 %76 to i64
  %91 = shl nsw i64 %90, 2
  br label %92

92:                                               ; preds = %87, %80
  %93 = phi i64 [ %82, %80 ], [ %91, %87 ]
  %94 = phi i32* [ %86, %80 ], [ %89, %87 ]
  %95 = bitcast i32* %94 to i8*
  %96 = bitcast i32* %77 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %95, i8* align 4 %96, i64 %93, i1 false) #12
  br label %97

97:                                               ; preds = %70, %92
  %98 = bitcast %"class.tflite::RuntimeShape"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %98) #12
  %99 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %99, label %100, label %102

100:                                              ; preds = %97
  %101 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 0, i32* %101, align 8, !alias.scope !559
  br label %127

102:                                              ; preds = %97
  %103 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %104 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %103, align 8, !noalias !559
  %105 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %104, i64 0, i32 0
  %106 = load i32, i32* %105, align 4, !noalias !559
  %107 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %104, i64 0, i32 1, i64 0
  %108 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  store i32 %106, i32* %108, align 8, !alias.scope !559
  %109 = icmp sgt i32 %106, 5
  br i1 %109, label %110, label %117

110:                                              ; preds = %102
  %111 = sext i32 %106 to i64
  %112 = shl nsw i64 %111, 2
  %113 = tail call i8* @_Znam(i64 %112) #11, !noalias !559
  %114 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %115 = bitcast i32** %114 to i8**
  store i8* %113, i8** %115, align 8, !alias.scope !559
  %116 = bitcast i8* %113 to i32*
  br label %122

117:                                              ; preds = %102
  %118 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1
  %119 = bitcast %union.anon* %118 to i32*
  %120 = sext i32 %106 to i64
  %121 = shl nsw i64 %120, 2
  br label %122

122:                                              ; preds = %117, %110
  %123 = phi i64 [ %112, %110 ], [ %121, %117 ]
  %124 = phi i32* [ %116, %110 ], [ %119, %117 ]
  %125 = bitcast i32* %124 to i8*
  %126 = bitcast i32* %107 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %125, i8* align 4 %126, i64 %123, i1 false) #12
  br label %127

127:                                              ; preds = %100, %122
  %128 = call zeroext i1 @_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE(%"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %11, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %12, %"struct.tflite::ArithmeticParams"* nonnull %10)
  %129 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 0
  %130 = load i32, i32* %129, align 8
  %131 = icmp sgt i32 %130, 5
  br i1 %131, label %132, label %138

132:                                              ; preds = %127
  %133 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %12, i64 0, i32 1, i32 0
  %134 = load i32*, i32** %133, align 8
  %135 = icmp eq i32* %134, null
  br i1 %135, label %138, label %136

136:                                              ; preds = %132
  %137 = bitcast i32* %134 to i8*
  call void @_ZdaPv(i8* %137) #11
  br label %138

138:                                              ; preds = %127, %132, %136
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %98) #12
  %139 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 0
  %140 = load i32, i32* %139, align 8
  %141 = icmp sgt i32 %140, 5
  br i1 %141, label %142, label %148

142:                                              ; preds = %138
  %143 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %11, i64 0, i32 1, i32 0
  %144 = load i32*, i32** %143, align 8
  %145 = icmp eq i32* %144, null
  br i1 %145, label %148, label %146

146:                                              ; preds = %142
  %147 = bitcast i32* %144 to i8*
  call void @_ZdaPv(i8* %147) #11
  br label %148

148:                                              ; preds = %138, %142, %146
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %68) #12
  %149 = load i32, i32* %28, align 8
  %150 = icmp eq i32 %149, 9
  br i1 %150, label %151, label %857

151:                                              ; preds = %148
  br i1 %128, label %152, label %397

152:                                              ; preds = %151
  %153 = bitcast %"class.tflite::RuntimeShape"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %153) #12
  br i1 %69, label %154, label %156

154:                                              ; preds = %152
  %155 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 0, i32* %155, align 8, !alias.scope !562
  br label %184

156:                                              ; preds = %152
  %157 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %158 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %157, align 8, !noalias !562
  %159 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %158, i64 0, i32 0
  %160 = load i32, i32* %159, align 4, !noalias !562
  %161 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %158, i64 0, i32 1, i64 0
  %162 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  store i32 %160, i32* %162, align 8, !alias.scope !562
  %163 = icmp sgt i32 %160, 5
  br i1 %163, label %164, label %171

164:                                              ; preds = %156
  %165 = sext i32 %160 to i64
  %166 = shl nsw i64 %165, 2
  %167 = call i8* @_Znam(i64 %166) #11, !noalias !562
  %168 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %169 = bitcast i32** %168 to i8**
  store i8* %167, i8** %169, align 8, !alias.scope !562
  %170 = bitcast i8* %167 to i32*
  br label %176

171:                                              ; preds = %156
  %172 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1
  %173 = bitcast %union.anon* %172 to i32*
  %174 = sext i32 %160 to i64
  %175 = shl nsw i64 %174, 2
  br label %176

176:                                              ; preds = %171, %164
  %177 = phi i64 [ %166, %164 ], [ %175, %171 ]
  %178 = phi i32* [ %170, %164 ], [ %173, %171 ]
  %179 = bitcast i32* %178 to i8*
  %180 = bitcast i32* %161 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %179, i8* align 4 %180, i64 %177, i1 false) #12
  %181 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %182 = bitcast %union.TfLitePtrUnion* %181 to i8**
  %183 = load i8*, i8** %182, align 8
  br label %184

184:                                              ; preds = %154, %176
  %185 = phi i8* [ %183, %176 ], [ null, %154 ]
  %186 = bitcast %"class.tflite::RuntimeShape"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %186) #12
  br i1 %99, label %187, label %189

187:                                              ; preds = %184
  %188 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 0, i32* %188, align 8, !alias.scope !565
  br label %217

189:                                              ; preds = %184
  %190 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %191 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %190, align 8, !noalias !565
  %192 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %191, i64 0, i32 0
  %193 = load i32, i32* %192, align 4, !noalias !565
  %194 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %191, i64 0, i32 1, i64 0
  %195 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  store i32 %193, i32* %195, align 8, !alias.scope !565
  %196 = icmp sgt i32 %193, 5
  br i1 %196, label %197, label %204

197:                                              ; preds = %189
  %198 = sext i32 %193 to i64
  %199 = shl nsw i64 %198, 2
  %200 = call i8* @_Znam(i64 %199) #11, !noalias !565
  %201 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %202 = bitcast i32** %201 to i8**
  store i8* %200, i8** %202, align 8, !alias.scope !565
  %203 = bitcast i8* %200 to i32*
  br label %209

204:                                              ; preds = %189
  %205 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1
  %206 = bitcast %union.anon* %205 to i32*
  %207 = sext i32 %193 to i64
  %208 = shl nsw i64 %207, 2
  br label %209

209:                                              ; preds = %204, %197
  %210 = phi i64 [ %199, %197 ], [ %208, %204 ]
  %211 = phi i32* [ %203, %197 ], [ %206, %204 ]
  %212 = bitcast i32* %211 to i8*
  %213 = bitcast i32* %194 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %212, i8* align 4 %213, i64 %210, i1 false) #12
  %214 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %215 = bitcast %union.TfLitePtrUnion* %214 to i8**
  %216 = load i8*, i8** %215, align 8
  br label %217

217:                                              ; preds = %187, %209
  %218 = phi i8* [ %216, %209 ], [ null, %187 ]
  %219 = bitcast %"class.tflite::RuntimeShape"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %219) #12
  %220 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %220, label %221, label %223

221:                                              ; preds = %217
  %222 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  store i32 0, i32* %222, align 8, !alias.scope !568
  br label %251

223:                                              ; preds = %217
  %224 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %225 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %224, align 8, !noalias !568
  %226 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %225, i64 0, i32 0
  %227 = load i32, i32* %226, align 4, !noalias !568
  %228 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %225, i64 0, i32 1, i64 0
  %229 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  store i32 %227, i32* %229, align 8, !alias.scope !568
  %230 = icmp sgt i32 %227, 5
  br i1 %230, label %231, label %238

231:                                              ; preds = %223
  %232 = sext i32 %227 to i64
  %233 = shl nsw i64 %232, 2
  %234 = call i8* @_Znam(i64 %233) #11, !noalias !568
  %235 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1, i32 0
  %236 = bitcast i32** %235 to i8**
  store i8* %234, i8** %236, align 8, !alias.scope !568
  %237 = bitcast i8* %234 to i32*
  br label %243

238:                                              ; preds = %223
  %239 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1
  %240 = bitcast %union.anon* %239 to i32*
  %241 = sext i32 %227 to i64
  %242 = shl nsw i64 %241, 2
  br label %243

243:                                              ; preds = %238, %231
  %244 = phi i64 [ %233, %231 ], [ %242, %238 ]
  %245 = phi i32* [ %237, %231 ], [ %240, %238 ]
  %246 = bitcast i32* %245 to i8*
  %247 = bitcast i32* %228 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %246, i8* align 4 %247, i64 %244, i1 false) #12
  %248 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %249 = bitcast %union.TfLitePtrUnion* %248 to i8**
  %250 = load i8*, i8** %249, align 8
  br label %251

251:                                              ; preds = %221, %243
  %252 = phi i8* [ %250, %243 ], [ null, %221 ]
  %253 = load i8, i8* %31, align 4
  %254 = icmp eq i8 %253, 4
  br i1 %254, label %255, label %256

255:                                              ; preds = %251
  call void @_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa(%"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %10, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %13, i8* %185, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %14, i8* %218, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %15, i8* %252) #12
  br label %367

256:                                              ; preds = %251
  %257 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %9, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %257) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %257, i8* nonnull align 4 %31, i64 80, i1 false) #12
  %258 = load i32, i32* %46, align 4
  %259 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %9, i64 0, i32 1
  store i32 %258, i32* %259, align 4
  %260 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %9, i64 0, i32 7
  %261 = load i32, i32* %37, align 4
  %262 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %9, i64 0, i32 2
  store i32 %261, i32* %262, align 4
  %263 = bitcast i32* %40 to <4 x i32>*
  %264 = load <4 x i32>, <4 x i32>* %263, align 4
  %265 = shufflevector <4 x i32> %264, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %266 = bitcast i32* %260 to <4 x i32>*
  store <4 x i32> %265, <4 x i32>* %266, align 4
  %267 = icmp eq i8 %253, 2
  %268 = select i1 %267, %"struct.tflite::ArithmeticParams"* %10, %"struct.tflite::ArithmeticParams"* %9
  %269 = select i1 %267, i8* %185, i8* %218
  %270 = select i1 %267, i8* %218, i8* %185
  %271 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %268, i64 0, i32 15, i64 0
  %272 = load i32, i32* %271, align 4
  %273 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %268, i64 0, i32 15, i64 1
  %274 = load i32, i32* %273, align 4
  %275 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %268, i64 0, i32 15, i64 2
  %276 = load i32, i32* %275, align 4
  %277 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %268, i64 0, i32 15, i64 3
  %278 = load i32, i32* %277, align 4
  %279 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %268, i64 0, i32 15, i64 4
  %280 = load i32, i32* %279, align 4
  %281 = icmp sgt i32 %280, 1
  %282 = icmp sgt i32 %272, 0
  br i1 %281, label %288, label %283

283:                                              ; preds = %256
  br i1 %282, label %284, label %366

284:                                              ; preds = %283
  %285 = icmp sgt i32 %274, 0
  %286 = icmp sgt i32 %276, 0
  %287 = sext i32 %278 to i64
  br label %334

288:                                              ; preds = %256
  br i1 %282, label %289, label %366

289:                                              ; preds = %288
  %290 = icmp sgt i32 %274, 0
  %291 = icmp sgt i32 %276, 0
  %292 = icmp sgt i32 %278, 0
  %293 = sext i32 %280 to i64
  br label %294

294:                                              ; preds = %303, %289
  %295 = phi i32 [ 0, %289 ], [ %307, %303 ]
  %296 = phi i8* [ %270, %289 ], [ %306, %303 ]
  %297 = phi i8* [ %269, %289 ], [ %305, %303 ]
  %298 = phi i8* [ %252, %289 ], [ %304, %303 ]
  br i1 %290, label %299, label %303

299:                                              ; preds = %294, %314
  %300 = phi i32 [ %318, %314 ], [ 0, %294 ]
  %301 = phi i8* [ %316, %314 ], [ %297, %294 ]
  %302 = phi i8* [ %315, %314 ], [ %298, %294 ]
  br i1 %291, label %309, label %314

303:                                              ; preds = %314, %294
  %304 = phi i8* [ %298, %294 ], [ %315, %314 ]
  %305 = phi i8* [ %297, %294 ], [ %316, %314 ]
  %306 = phi i8* [ null, %294 ], [ %317, %314 ]
  %307 = add nuw nsw i32 %295, 1
  %308 = icmp eq i32 %307, %272
  br i1 %308, label %366, label %294

309:                                              ; preds = %299, %320
  %310 = phi i32 [ %324, %320 ], [ 0, %299 ]
  %311 = phi i8* [ %322, %320 ], [ %296, %299 ]
  %312 = phi i8* [ %323, %320 ], [ %301, %299 ]
  %313 = phi i8* [ %321, %320 ], [ %302, %299 ]
  br i1 %292, label %326, label %320

314:                                              ; preds = %320, %299
  %315 = phi i8* [ %302, %299 ], [ %321, %320 ]
  %316 = phi i8* [ %301, %299 ], [ %323, %320 ]
  %317 = phi i8* [ %296, %299 ], [ %322, %320 ]
  %318 = add nuw nsw i32 %300, 1
  %319 = icmp eq i32 %318, %274
  br i1 %319, label %303, label %299

320:                                              ; preds = %326, %309
  %321 = phi i8* [ %313, %309 ], [ %331, %326 ]
  %322 = phi i8* [ %311, %309 ], [ %330, %326 ]
  %323 = getelementptr inbounds i8, i8* %312, i64 %293
  %324 = add nuw nsw i32 %310, 1
  %325 = icmp eq i32 %324, %276
  br i1 %325, label %314, label %309

326:                                              ; preds = %309, %326
  %327 = phi i32 [ %332, %326 ], [ 0, %309 ]
  %328 = phi i8* [ %330, %326 ], [ %311, %309 ]
  %329 = phi i8* [ %331, %326 ], [ %313, %309 ]
  call void @_ZN6tflite21optimized_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa(i32 %280, %"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %268, i8* %312, i8* %328, i8* %329) #12
  %330 = getelementptr inbounds i8, i8* %328, i64 %293
  %331 = getelementptr inbounds i8, i8* %329, i64 %293
  %332 = add nuw nsw i32 %327, 1
  %333 = icmp eq i32 %332, %278
  br i1 %333, label %320, label %326

334:                                              ; preds = %343, %284
  %335 = phi i32 [ 0, %284 ], [ %347, %343 ]
  %336 = phi i8* [ %270, %284 ], [ %346, %343 ]
  %337 = phi i8* [ %269, %284 ], [ %345, %343 ]
  %338 = phi i8* [ %252, %284 ], [ %344, %343 ]
  br i1 %285, label %339, label %343

339:                                              ; preds = %334, %349
  %340 = phi i32 [ %353, %349 ], [ 0, %334 ]
  %341 = phi i8* [ %351, %349 ], [ %337, %334 ]
  %342 = phi i8* [ %350, %349 ], [ %338, %334 ]
  br i1 %286, label %355, label %349

343:                                              ; preds = %349, %334
  %344 = phi i8* [ %338, %334 ], [ %350, %349 ]
  %345 = phi i8* [ %337, %334 ], [ %351, %349 ]
  %346 = phi i8* [ null, %334 ], [ %352, %349 ]
  %347 = add nuw nsw i32 %335, 1
  %348 = icmp eq i32 %347, %272
  br i1 %348, label %366, label %334

349:                                              ; preds = %355, %339
  %350 = phi i8* [ %342, %339 ], [ %362, %355 ]
  %351 = phi i8* [ %341, %339 ], [ %363, %355 ]
  %352 = phi i8* [ %336, %339 ], [ %361, %355 ]
  %353 = add nuw nsw i32 %340, 1
  %354 = icmp eq i32 %353, %274
  br i1 %354, label %343, label %339

355:                                              ; preds = %339, %355
  %356 = phi i32 [ %364, %355 ], [ 0, %339 ]
  %357 = phi i8* [ %361, %355 ], [ %336, %339 ]
  %358 = phi i8* [ %363, %355 ], [ %341, %339 ]
  %359 = phi i8* [ %362, %355 ], [ %342, %339 ]
  %360 = load i8, i8* %358, align 1
  call void @_ZN6tflite21optimized_integer_ops18AddScalarBroadcastEiRKNS_16ArithmeticParamsEaPKaPa(i32 %278, %"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %268, i8 signext %360, i8* %357, i8* %359) #12
  %361 = getelementptr inbounds i8, i8* %357, i64 %287
  %362 = getelementptr inbounds i8, i8* %359, i64 %287
  %363 = getelementptr inbounds i8, i8* %358, i64 1
  %364 = add nuw nsw i32 %356, 1
  %365 = icmp eq i32 %364, %276
  br i1 %365, label %349, label %355

366:                                              ; preds = %343, %303, %283, %288
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %257) #12
  br label %367

367:                                              ; preds = %255, %366
  %368 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 0
  %369 = load i32, i32* %368, align 8
  %370 = icmp sgt i32 %369, 5
  br i1 %370, label %371, label %377

371:                                              ; preds = %367
  %372 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %15, i64 0, i32 1, i32 0
  %373 = load i32*, i32** %372, align 8
  %374 = icmp eq i32* %373, null
  br i1 %374, label %377, label %375

375:                                              ; preds = %371
  %376 = bitcast i32* %373 to i8*
  call void @_ZdaPv(i8* %376) #11
  br label %377

377:                                              ; preds = %367, %371, %375
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %219) #12
  %378 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 0
  %379 = load i32, i32* %378, align 8
  %380 = icmp sgt i32 %379, 5
  br i1 %380, label %381, label %387

381:                                              ; preds = %377
  %382 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %14, i64 0, i32 1, i32 0
  %383 = load i32*, i32** %382, align 8
  %384 = icmp eq i32* %383, null
  br i1 %384, label %387, label %385

385:                                              ; preds = %381
  %386 = bitcast i32* %383 to i8*
  call void @_ZdaPv(i8* %386) #11
  br label %387

387:                                              ; preds = %377, %381, %385
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %186) #12
  %388 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 0
  %389 = load i32, i32* %388, align 8
  %390 = icmp sgt i32 %389, 5
  br i1 %390, label %391, label %1563

391:                                              ; preds = %387
  %392 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %13, i64 0, i32 1, i32 0
  %393 = load i32*, i32** %392, align 8
  %394 = icmp eq i32* %393, null
  br i1 %394, label %1563, label %395

395:                                              ; preds = %391
  %396 = bitcast i32* %393 to i8*
  call void @_ZdaPv(i8* %396) #11
  br label %1563

397:                                              ; preds = %151
  %398 = bitcast %"class.tflite::RuntimeShape"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %398) #12
  br i1 %69, label %399, label %401

399:                                              ; preds = %397
  %400 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 0
  store i32 0, i32* %400, align 8, !alias.scope !571
  br label %429

401:                                              ; preds = %397
  %402 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %403 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %402, align 8, !noalias !571
  %404 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %403, i64 0, i32 0
  %405 = load i32, i32* %404, align 4, !noalias !571
  %406 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %403, i64 0, i32 1, i64 0
  %407 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 0
  store i32 %405, i32* %407, align 8, !alias.scope !571
  %408 = icmp sgt i32 %405, 5
  br i1 %408, label %409, label %416

409:                                              ; preds = %401
  %410 = sext i32 %405 to i64
  %411 = shl nsw i64 %410, 2
  %412 = call i8* @_Znam(i64 %411) #11, !noalias !571
  %413 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1, i32 0
  %414 = bitcast i32** %413 to i8**
  store i8* %412, i8** %414, align 8, !alias.scope !571
  %415 = bitcast i8* %412 to i32*
  br label %421

416:                                              ; preds = %401
  %417 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1
  %418 = bitcast %union.anon* %417 to i32*
  %419 = sext i32 %405 to i64
  %420 = shl nsw i64 %419, 2
  br label %421

421:                                              ; preds = %416, %409
  %422 = phi i64 [ %411, %409 ], [ %420, %416 ]
  %423 = phi i32* [ %415, %409 ], [ %418, %416 ]
  %424 = bitcast i32* %423 to i8*
  %425 = bitcast i32* %406 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %424, i8* align 4 %425, i64 %422, i1 false) #12
  %426 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %427 = bitcast %union.TfLitePtrUnion* %426 to i8**
  %428 = load i8*, i8** %427, align 8
  br label %429

429:                                              ; preds = %399, %421
  %430 = phi i32 [ %405, %421 ], [ 0, %399 ]
  %431 = phi i8* [ %428, %421 ], [ null, %399 ]
  %432 = bitcast %"class.tflite::RuntimeShape"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %432) #12
  br i1 %99, label %433, label %435

433:                                              ; preds = %429
  %434 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 0
  store i32 0, i32* %434, align 8, !alias.scope !574
  br label %463

435:                                              ; preds = %429
  %436 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %437 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %436, align 8, !noalias !574
  %438 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %437, i64 0, i32 0
  %439 = load i32, i32* %438, align 4, !noalias !574
  %440 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %437, i64 0, i32 1, i64 0
  %441 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 0
  store i32 %439, i32* %441, align 8, !alias.scope !574
  %442 = icmp sgt i32 %439, 5
  br i1 %442, label %443, label %450

443:                                              ; preds = %435
  %444 = sext i32 %439 to i64
  %445 = shl nsw i64 %444, 2
  %446 = call i8* @_Znam(i64 %445) #11, !noalias !574
  %447 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1, i32 0
  %448 = bitcast i32** %447 to i8**
  store i8* %446, i8** %448, align 8, !alias.scope !574
  %449 = bitcast i8* %446 to i32*
  br label %455

450:                                              ; preds = %435
  %451 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1
  %452 = bitcast %union.anon* %451 to i32*
  %453 = sext i32 %439 to i64
  %454 = shl nsw i64 %453, 2
  br label %455

455:                                              ; preds = %450, %443
  %456 = phi i64 [ %445, %443 ], [ %454, %450 ]
  %457 = phi i32* [ %449, %443 ], [ %452, %450 ]
  %458 = bitcast i32* %457 to i8*
  %459 = bitcast i32* %440 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %458, i8* align 4 %459, i64 %456, i1 false) #12
  %460 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %461 = bitcast %union.TfLitePtrUnion* %460 to i8**
  %462 = load i8*, i8** %461, align 8
  br label %463

463:                                              ; preds = %433, %455
  %464 = phi i32 [ %439, %455 ], [ 0, %433 ]
  %465 = phi i8* [ %462, %455 ], [ null, %433 ]
  %466 = bitcast %"class.tflite::RuntimeShape"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %466) #12
  %467 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %467, label %468, label %470

468:                                              ; preds = %463
  %469 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 0
  store i32 0, i32* %469, align 8, !alias.scope !577
  br label %498

470:                                              ; preds = %463
  %471 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %472 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %471, align 8, !noalias !577
  %473 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %472, i64 0, i32 0
  %474 = load i32, i32* %473, align 4, !noalias !577
  %475 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %472, i64 0, i32 1, i64 0
  %476 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 0
  store i32 %474, i32* %476, align 8, !alias.scope !577
  %477 = icmp sgt i32 %474, 5
  br i1 %477, label %478, label %485

478:                                              ; preds = %470
  %479 = sext i32 %474 to i64
  %480 = shl nsw i64 %479, 2
  %481 = call i8* @_Znam(i64 %480) #11, !noalias !577
  %482 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1, i32 0
  %483 = bitcast i32** %482 to i8**
  store i8* %481, i8** %483, align 8, !alias.scope !577
  %484 = bitcast i8* %481 to i32*
  br label %490

485:                                              ; preds = %470
  %486 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1
  %487 = bitcast %union.anon* %486 to i32*
  %488 = sext i32 %474 to i64
  %489 = shl nsw i64 %488, 2
  br label %490

490:                                              ; preds = %485, %478
  %491 = phi i64 [ %480, %478 ], [ %489, %485 ]
  %492 = phi i32* [ %484, %478 ], [ %487, %485 ]
  %493 = bitcast i32* %492 to i8*
  %494 = bitcast i32* %475 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %493, i8* align 4 %494, i64 %491, i1 false) #12
  %495 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %496 = bitcast %union.TfLitePtrUnion* %495 to i8**
  %497 = load i8*, i8** %496, align 8
  br label %498

498:                                              ; preds = %468, %490
  %499 = phi i32 [ %474, %490 ], [ 0, %468 ]
  %500 = phi i8* [ %497, %490 ], [ null, %468 ]
  %501 = icmp sgt i32 %430, 5
  %502 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1
  br i1 %501, label %503, label %506

503:                                              ; preds = %498
  %504 = getelementptr inbounds %union.anon, %union.anon* %502, i64 0, i32 0
  %505 = load i32*, i32** %504, align 8
  br label %509

506:                                              ; preds = %498
  %507 = bitcast %union.anon* %502 to i32*
  %508 = icmp sgt i32 %430, 0
  br i1 %508, label %509, label %609

509:                                              ; preds = %506, %503
  %510 = phi i32* [ %505, %503 ], [ %507, %506 ]
  %511 = zext i32 %430 to i64
  %512 = icmp ult i32 %430, 8
  br i1 %512, label %598, label %513

513:                                              ; preds = %509
  %514 = and i64 %511, 4294967288
  %515 = add nsw i64 %514, -8
  %516 = lshr exact i64 %515, 3
  %517 = add nuw nsw i64 %516, 1
  %518 = and i64 %517, 3
  %519 = icmp ult i64 %515, 24
  br i1 %519, label %565, label %520

520:                                              ; preds = %513
  %521 = sub nsw i64 %517, %518
  br label %522

522:                                              ; preds = %522, %520
  %523 = phi i64 [ 0, %520 ], [ %562, %522 ]
  %524 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %520 ], [ %560, %522 ]
  %525 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %520 ], [ %561, %522 ]
  %526 = phi i64 [ %521, %520 ], [ %563, %522 ]
  %527 = getelementptr inbounds i32, i32* %510, i64 %523
  %528 = bitcast i32* %527 to <4 x i32>*
  %529 = load <4 x i32>, <4 x i32>* %528, align 4
  %530 = getelementptr inbounds i32, i32* %527, i64 4
  %531 = bitcast i32* %530 to <4 x i32>*
  %532 = load <4 x i32>, <4 x i32>* %531, align 4
  %533 = mul nsw <4 x i32> %529, %524
  %534 = mul nsw <4 x i32> %532, %525
  %535 = or i64 %523, 8
  %536 = getelementptr inbounds i32, i32* %510, i64 %535
  %537 = bitcast i32* %536 to <4 x i32>*
  %538 = load <4 x i32>, <4 x i32>* %537, align 4
  %539 = getelementptr inbounds i32, i32* %536, i64 4
  %540 = bitcast i32* %539 to <4 x i32>*
  %541 = load <4 x i32>, <4 x i32>* %540, align 4
  %542 = mul nsw <4 x i32> %538, %533
  %543 = mul nsw <4 x i32> %541, %534
  %544 = or i64 %523, 16
  %545 = getelementptr inbounds i32, i32* %510, i64 %544
  %546 = bitcast i32* %545 to <4 x i32>*
  %547 = load <4 x i32>, <4 x i32>* %546, align 4
  %548 = getelementptr inbounds i32, i32* %545, i64 4
  %549 = bitcast i32* %548 to <4 x i32>*
  %550 = load <4 x i32>, <4 x i32>* %549, align 4
  %551 = mul nsw <4 x i32> %547, %542
  %552 = mul nsw <4 x i32> %550, %543
  %553 = or i64 %523, 24
  %554 = getelementptr inbounds i32, i32* %510, i64 %553
  %555 = bitcast i32* %554 to <4 x i32>*
  %556 = load <4 x i32>, <4 x i32>* %555, align 4
  %557 = getelementptr inbounds i32, i32* %554, i64 4
  %558 = bitcast i32* %557 to <4 x i32>*
  %559 = load <4 x i32>, <4 x i32>* %558, align 4
  %560 = mul nsw <4 x i32> %556, %551
  %561 = mul nsw <4 x i32> %559, %552
  %562 = add i64 %523, 32
  %563 = add i64 %526, -4
  %564 = icmp eq i64 %563, 0
  br i1 %564, label %565, label %522, !llvm.loop !580

565:                                              ; preds = %522, %513
  %566 = phi <4 x i32> [ undef, %513 ], [ %560, %522 ]
  %567 = phi <4 x i32> [ undef, %513 ], [ %561, %522 ]
  %568 = phi i64 [ 0, %513 ], [ %562, %522 ]
  %569 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %513 ], [ %560, %522 ]
  %570 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %513 ], [ %561, %522 ]
  %571 = icmp eq i64 %518, 0
  br i1 %571, label %588, label %572

572:                                              ; preds = %565, %572
  %573 = phi i64 [ %585, %572 ], [ %568, %565 ]
  %574 = phi <4 x i32> [ %583, %572 ], [ %569, %565 ]
  %575 = phi <4 x i32> [ %584, %572 ], [ %570, %565 ]
  %576 = phi i64 [ %586, %572 ], [ %518, %565 ]
  %577 = getelementptr inbounds i32, i32* %510, i64 %573
  %578 = bitcast i32* %577 to <4 x i32>*
  %579 = load <4 x i32>, <4 x i32>* %578, align 4
  %580 = getelementptr inbounds i32, i32* %577, i64 4
  %581 = bitcast i32* %580 to <4 x i32>*
  %582 = load <4 x i32>, <4 x i32>* %581, align 4
  %583 = mul nsw <4 x i32> %579, %574
  %584 = mul nsw <4 x i32> %582, %575
  %585 = add i64 %573, 8
  %586 = add i64 %576, -1
  %587 = icmp eq i64 %586, 0
  br i1 %587, label %588, label %572, !llvm.loop !581

588:                                              ; preds = %572, %565
  %589 = phi <4 x i32> [ %566, %565 ], [ %583, %572 ]
  %590 = phi <4 x i32> [ %567, %565 ], [ %584, %572 ]
  %591 = mul <4 x i32> %590, %589
  %592 = shufflevector <4 x i32> %591, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %593 = mul <4 x i32> %591, %592
  %594 = shufflevector <4 x i32> %593, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %595 = mul <4 x i32> %593, %594
  %596 = extractelement <4 x i32> %595, i32 0
  %597 = icmp eq i64 %514, %511
  br i1 %597, label %609, label %598

598:                                              ; preds = %588, %509
  %599 = phi i64 [ 0, %509 ], [ %514, %588 ]
  %600 = phi i32 [ 1, %509 ], [ %596, %588 ]
  br label %601

601:                                              ; preds = %598, %601
  %602 = phi i64 [ %607, %601 ], [ %599, %598 ]
  %603 = phi i32 [ %606, %601 ], [ %600, %598 ]
  %604 = getelementptr inbounds i32, i32* %510, i64 %602
  %605 = load i32, i32* %604, align 4
  %606 = mul nsw i32 %605, %603
  %607 = add nuw nsw i64 %602, 1
  %608 = icmp eq i64 %607, %511
  br i1 %608, label %609, label %601, !llvm.loop !582

609:                                              ; preds = %601, %588, %506
  %610 = phi i32 [ 1, %506 ], [ %596, %588 ], [ %606, %601 ]
  %611 = icmp sgt i32 %464, 5
  %612 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1
  br i1 %611, label %613, label %616

613:                                              ; preds = %609
  %614 = getelementptr inbounds %union.anon, %union.anon* %612, i64 0, i32 0
  %615 = load i32*, i32** %614, align 8
  br label %619

616:                                              ; preds = %609
  %617 = bitcast %union.anon* %612 to i32*
  %618 = icmp sgt i32 %464, 0
  br i1 %618, label %619, label %719

619:                                              ; preds = %616, %613
  %620 = phi i32* [ %615, %613 ], [ %617, %616 ]
  %621 = zext i32 %464 to i64
  %622 = icmp ult i32 %464, 8
  br i1 %622, label %708, label %623

623:                                              ; preds = %619
  %624 = and i64 %621, 4294967288
  %625 = add nsw i64 %624, -8
  %626 = lshr exact i64 %625, 3
  %627 = add nuw nsw i64 %626, 1
  %628 = and i64 %627, 3
  %629 = icmp ult i64 %625, 24
  br i1 %629, label %675, label %630

630:                                              ; preds = %623
  %631 = sub nsw i64 %627, %628
  br label %632

632:                                              ; preds = %632, %630
  %633 = phi i64 [ 0, %630 ], [ %672, %632 ]
  %634 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %630 ], [ %670, %632 ]
  %635 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %630 ], [ %671, %632 ]
  %636 = phi i64 [ %631, %630 ], [ %673, %632 ]
  %637 = getelementptr inbounds i32, i32* %620, i64 %633
  %638 = bitcast i32* %637 to <4 x i32>*
  %639 = load <4 x i32>, <4 x i32>* %638, align 4
  %640 = getelementptr inbounds i32, i32* %637, i64 4
  %641 = bitcast i32* %640 to <4 x i32>*
  %642 = load <4 x i32>, <4 x i32>* %641, align 4
  %643 = mul nsw <4 x i32> %639, %634
  %644 = mul nsw <4 x i32> %642, %635
  %645 = or i64 %633, 8
  %646 = getelementptr inbounds i32, i32* %620, i64 %645
  %647 = bitcast i32* %646 to <4 x i32>*
  %648 = load <4 x i32>, <4 x i32>* %647, align 4
  %649 = getelementptr inbounds i32, i32* %646, i64 4
  %650 = bitcast i32* %649 to <4 x i32>*
  %651 = load <4 x i32>, <4 x i32>* %650, align 4
  %652 = mul nsw <4 x i32> %648, %643
  %653 = mul nsw <4 x i32> %651, %644
  %654 = or i64 %633, 16
  %655 = getelementptr inbounds i32, i32* %620, i64 %654
  %656 = bitcast i32* %655 to <4 x i32>*
  %657 = load <4 x i32>, <4 x i32>* %656, align 4
  %658 = getelementptr inbounds i32, i32* %655, i64 4
  %659 = bitcast i32* %658 to <4 x i32>*
  %660 = load <4 x i32>, <4 x i32>* %659, align 4
  %661 = mul nsw <4 x i32> %657, %652
  %662 = mul nsw <4 x i32> %660, %653
  %663 = or i64 %633, 24
  %664 = getelementptr inbounds i32, i32* %620, i64 %663
  %665 = bitcast i32* %664 to <4 x i32>*
  %666 = load <4 x i32>, <4 x i32>* %665, align 4
  %667 = getelementptr inbounds i32, i32* %664, i64 4
  %668 = bitcast i32* %667 to <4 x i32>*
  %669 = load <4 x i32>, <4 x i32>* %668, align 4
  %670 = mul nsw <4 x i32> %666, %661
  %671 = mul nsw <4 x i32> %669, %662
  %672 = add i64 %633, 32
  %673 = add i64 %636, -4
  %674 = icmp eq i64 %673, 0
  br i1 %674, label %675, label %632, !llvm.loop !583

675:                                              ; preds = %632, %623
  %676 = phi <4 x i32> [ undef, %623 ], [ %670, %632 ]
  %677 = phi <4 x i32> [ undef, %623 ], [ %671, %632 ]
  %678 = phi i64 [ 0, %623 ], [ %672, %632 ]
  %679 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %623 ], [ %670, %632 ]
  %680 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %623 ], [ %671, %632 ]
  %681 = icmp eq i64 %628, 0
  br i1 %681, label %698, label %682

682:                                              ; preds = %675, %682
  %683 = phi i64 [ %695, %682 ], [ %678, %675 ]
  %684 = phi <4 x i32> [ %693, %682 ], [ %679, %675 ]
  %685 = phi <4 x i32> [ %694, %682 ], [ %680, %675 ]
  %686 = phi i64 [ %696, %682 ], [ %628, %675 ]
  %687 = getelementptr inbounds i32, i32* %620, i64 %683
  %688 = bitcast i32* %687 to <4 x i32>*
  %689 = load <4 x i32>, <4 x i32>* %688, align 4
  %690 = getelementptr inbounds i32, i32* %687, i64 4
  %691 = bitcast i32* %690 to <4 x i32>*
  %692 = load <4 x i32>, <4 x i32>* %691, align 4
  %693 = mul nsw <4 x i32> %689, %684
  %694 = mul nsw <4 x i32> %692, %685
  %695 = add i64 %683, 8
  %696 = add i64 %686, -1
  %697 = icmp eq i64 %696, 0
  br i1 %697, label %698, label %682, !llvm.loop !584

698:                                              ; preds = %682, %675
  %699 = phi <4 x i32> [ %676, %675 ], [ %693, %682 ]
  %700 = phi <4 x i32> [ %677, %675 ], [ %694, %682 ]
  %701 = mul <4 x i32> %700, %699
  %702 = shufflevector <4 x i32> %701, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %703 = mul <4 x i32> %701, %702
  %704 = shufflevector <4 x i32> %703, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %705 = mul <4 x i32> %703, %704
  %706 = extractelement <4 x i32> %705, i32 0
  %707 = icmp eq i64 %624, %621
  br i1 %707, label %719, label %708

708:                                              ; preds = %698, %619
  %709 = phi i64 [ 0, %619 ], [ %624, %698 ]
  %710 = phi i32 [ 1, %619 ], [ %706, %698 ]
  br label %711

711:                                              ; preds = %708, %711
  %712 = phi i64 [ %717, %711 ], [ %709, %708 ]
  %713 = phi i32 [ %716, %711 ], [ %710, %708 ]
  %714 = getelementptr inbounds i32, i32* %620, i64 %712
  %715 = load i32, i32* %714, align 4
  %716 = mul nsw i32 %715, %713
  %717 = add nuw nsw i64 %712, 1
  %718 = icmp eq i64 %717, %621
  br i1 %718, label %719, label %711, !llvm.loop !585

719:                                              ; preds = %711, %698, %616
  %720 = phi i32 [ 1, %616 ], [ %706, %698 ], [ %716, %711 ]
  %721 = icmp sgt i32 %499, 5
  %722 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1
  br i1 %721, label %723, label %726

723:                                              ; preds = %719
  %724 = getelementptr inbounds %union.anon, %union.anon* %722, i64 0, i32 0
  %725 = load i32*, i32** %724, align 8
  br label %729

726:                                              ; preds = %719
  %727 = bitcast %union.anon* %722 to i32*
  %728 = icmp sgt i32 %499, 0
  br i1 %728, label %729, label %829

729:                                              ; preds = %726, %723
  %730 = phi i32* [ %725, %723 ], [ %727, %726 ]
  %731 = zext i32 %499 to i64
  %732 = icmp ult i32 %499, 8
  br i1 %732, label %818, label %733

733:                                              ; preds = %729
  %734 = and i64 %731, 4294967288
  %735 = add nsw i64 %734, -8
  %736 = lshr exact i64 %735, 3
  %737 = add nuw nsw i64 %736, 1
  %738 = and i64 %737, 3
  %739 = icmp ult i64 %735, 24
  br i1 %739, label %785, label %740

740:                                              ; preds = %733
  %741 = sub nsw i64 %737, %738
  br label %742

742:                                              ; preds = %742, %740
  %743 = phi i64 [ 0, %740 ], [ %782, %742 ]
  %744 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %740 ], [ %780, %742 ]
  %745 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %740 ], [ %781, %742 ]
  %746 = phi i64 [ %741, %740 ], [ %783, %742 ]
  %747 = getelementptr inbounds i32, i32* %730, i64 %743
  %748 = bitcast i32* %747 to <4 x i32>*
  %749 = load <4 x i32>, <4 x i32>* %748, align 4
  %750 = getelementptr inbounds i32, i32* %747, i64 4
  %751 = bitcast i32* %750 to <4 x i32>*
  %752 = load <4 x i32>, <4 x i32>* %751, align 4
  %753 = mul nsw <4 x i32> %749, %744
  %754 = mul nsw <4 x i32> %752, %745
  %755 = or i64 %743, 8
  %756 = getelementptr inbounds i32, i32* %730, i64 %755
  %757 = bitcast i32* %756 to <4 x i32>*
  %758 = load <4 x i32>, <4 x i32>* %757, align 4
  %759 = getelementptr inbounds i32, i32* %756, i64 4
  %760 = bitcast i32* %759 to <4 x i32>*
  %761 = load <4 x i32>, <4 x i32>* %760, align 4
  %762 = mul nsw <4 x i32> %758, %753
  %763 = mul nsw <4 x i32> %761, %754
  %764 = or i64 %743, 16
  %765 = getelementptr inbounds i32, i32* %730, i64 %764
  %766 = bitcast i32* %765 to <4 x i32>*
  %767 = load <4 x i32>, <4 x i32>* %766, align 4
  %768 = getelementptr inbounds i32, i32* %765, i64 4
  %769 = bitcast i32* %768 to <4 x i32>*
  %770 = load <4 x i32>, <4 x i32>* %769, align 4
  %771 = mul nsw <4 x i32> %767, %762
  %772 = mul nsw <4 x i32> %770, %763
  %773 = or i64 %743, 24
  %774 = getelementptr inbounds i32, i32* %730, i64 %773
  %775 = bitcast i32* %774 to <4 x i32>*
  %776 = load <4 x i32>, <4 x i32>* %775, align 4
  %777 = getelementptr inbounds i32, i32* %774, i64 4
  %778 = bitcast i32* %777 to <4 x i32>*
  %779 = load <4 x i32>, <4 x i32>* %778, align 4
  %780 = mul nsw <4 x i32> %776, %771
  %781 = mul nsw <4 x i32> %779, %772
  %782 = add i64 %743, 32
  %783 = add i64 %746, -4
  %784 = icmp eq i64 %783, 0
  br i1 %784, label %785, label %742, !llvm.loop !586

785:                                              ; preds = %742, %733
  %786 = phi <4 x i32> [ undef, %733 ], [ %780, %742 ]
  %787 = phi <4 x i32> [ undef, %733 ], [ %781, %742 ]
  %788 = phi i64 [ 0, %733 ], [ %782, %742 ]
  %789 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %733 ], [ %780, %742 ]
  %790 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %733 ], [ %781, %742 ]
  %791 = icmp eq i64 %738, 0
  br i1 %791, label %808, label %792

792:                                              ; preds = %785, %792
  %793 = phi i64 [ %805, %792 ], [ %788, %785 ]
  %794 = phi <4 x i32> [ %803, %792 ], [ %789, %785 ]
  %795 = phi <4 x i32> [ %804, %792 ], [ %790, %785 ]
  %796 = phi i64 [ %806, %792 ], [ %738, %785 ]
  %797 = getelementptr inbounds i32, i32* %730, i64 %793
  %798 = bitcast i32* %797 to <4 x i32>*
  %799 = load <4 x i32>, <4 x i32>* %798, align 4
  %800 = getelementptr inbounds i32, i32* %797, i64 4
  %801 = bitcast i32* %800 to <4 x i32>*
  %802 = load <4 x i32>, <4 x i32>* %801, align 4
  %803 = mul nsw <4 x i32> %799, %794
  %804 = mul nsw <4 x i32> %802, %795
  %805 = add i64 %793, 8
  %806 = add i64 %796, -1
  %807 = icmp eq i64 %806, 0
  br i1 %807, label %808, label %792, !llvm.loop !587

808:                                              ; preds = %792, %785
  %809 = phi <4 x i32> [ %786, %785 ], [ %803, %792 ]
  %810 = phi <4 x i32> [ %787, %785 ], [ %804, %792 ]
  %811 = mul <4 x i32> %810, %809
  %812 = shufflevector <4 x i32> %811, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %813 = mul <4 x i32> %811, %812
  %814 = shufflevector <4 x i32> %813, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %815 = mul <4 x i32> %813, %814
  %816 = extractelement <4 x i32> %815, i32 0
  %817 = icmp eq i64 %734, %731
  br i1 %817, label %829, label %818

818:                                              ; preds = %808, %729
  %819 = phi i64 [ 0, %729 ], [ %734, %808 ]
  %820 = phi i32 [ 1, %729 ], [ %816, %808 ]
  br label %821

821:                                              ; preds = %818, %821
  %822 = phi i64 [ %827, %821 ], [ %819, %818 ]
  %823 = phi i32 [ %826, %821 ], [ %820, %818 ]
  %824 = getelementptr inbounds i32, i32* %730, i64 %822
  %825 = load i32, i32* %824, align 4
  %826 = mul nsw i32 %825, %823
  %827 = add nuw nsw i64 %822, 1
  %828 = icmp eq i64 %827, %731
  br i1 %828, label %829, label %821, !llvm.loop !588

829:                                              ; preds = %821, %808, %726
  %830 = phi i32 [ 1, %726 ], [ %816, %808 ], [ %826, %821 ]
  %831 = icmp eq i32 %610, %720
  br i1 %831, label %833, label %832

832:                                              ; preds = %829
  call void @abort() #13
  unreachable

833:                                              ; preds = %829
  %834 = icmp eq i32 %610, %830
  br i1 %834, label %836, label %835

835:                                              ; preds = %833
  call void @abort() #13
  unreachable

836:                                              ; preds = %833
  call void @_ZN6tflite21optimized_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa(i32 %610, %"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %10, i8* %431, i8* %465, i8* %500) #12
  br i1 %721, label %837, label %843

837:                                              ; preds = %836
  %838 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %18, i64 0, i32 1, i32 0
  %839 = load i32*, i32** %838, align 8
  %840 = icmp eq i32* %839, null
  br i1 %840, label %843, label %841

841:                                              ; preds = %837
  %842 = bitcast i32* %839 to i8*
  call void @_ZdaPv(i8* %842) #11
  br label %843

843:                                              ; preds = %836, %837, %841
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %466) #12
  br i1 %611, label %844, label %850

844:                                              ; preds = %843
  %845 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %17, i64 0, i32 1, i32 0
  %846 = load i32*, i32** %845, align 8
  %847 = icmp eq i32* %846, null
  br i1 %847, label %850, label %848

848:                                              ; preds = %844
  %849 = bitcast i32* %846 to i8*
  call void @_ZdaPv(i8* %849) #11
  br label %850

850:                                              ; preds = %843, %844, %848
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %432) #12
  br i1 %501, label %851, label %1563

851:                                              ; preds = %850
  %852 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %16, i64 0, i32 1, i32 0
  %853 = load i32*, i32** %852, align 8
  %854 = icmp eq i32* %853, null
  br i1 %854, label %1563, label %855

855:                                              ; preds = %851
  %856 = bitcast i32* %853 to i8*
  call void @_ZdaPv(i8* %856) #11
  br label %1563

857:                                              ; preds = %148
  br i1 %128, label %858, label %1103

858:                                              ; preds = %857
  %859 = bitcast %"class.tflite::RuntimeShape"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %859) #12
  br i1 %69, label %860, label %862

860:                                              ; preds = %858
  %861 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 0
  store i32 0, i32* %861, align 8, !alias.scope !589
  br label %890

862:                                              ; preds = %858
  %863 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %864 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %863, align 8, !noalias !589
  %865 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %864, i64 0, i32 0
  %866 = load i32, i32* %865, align 4, !noalias !589
  %867 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %864, i64 0, i32 1, i64 0
  %868 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 0
  store i32 %866, i32* %868, align 8, !alias.scope !589
  %869 = icmp sgt i32 %866, 5
  br i1 %869, label %870, label %877

870:                                              ; preds = %862
  %871 = sext i32 %866 to i64
  %872 = shl nsw i64 %871, 2
  %873 = call i8* @_Znam(i64 %872) #11, !noalias !589
  %874 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 1, i32 0
  %875 = bitcast i32** %874 to i8**
  store i8* %873, i8** %875, align 8, !alias.scope !589
  %876 = bitcast i8* %873 to i32*
  br label %882

877:                                              ; preds = %862
  %878 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 1
  %879 = bitcast %union.anon* %878 to i32*
  %880 = sext i32 %866 to i64
  %881 = shl nsw i64 %880, 2
  br label %882

882:                                              ; preds = %877, %870
  %883 = phi i64 [ %872, %870 ], [ %881, %877 ]
  %884 = phi i32* [ %876, %870 ], [ %879, %877 ]
  %885 = bitcast i32* %884 to i8*
  %886 = bitcast i32* %867 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %885, i8* align 4 %886, i64 %883, i1 false) #12
  %887 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %888 = bitcast %union.TfLitePtrUnion* %887 to i8**
  %889 = load i8*, i8** %888, align 8
  br label %890

890:                                              ; preds = %860, %882
  %891 = phi i8* [ %889, %882 ], [ null, %860 ]
  %892 = bitcast %"class.tflite::RuntimeShape"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %892) #12
  br i1 %99, label %893, label %895

893:                                              ; preds = %890
  %894 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 0
  store i32 0, i32* %894, align 8, !alias.scope !592
  br label %923

895:                                              ; preds = %890
  %896 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %897 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %896, align 8, !noalias !592
  %898 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %897, i64 0, i32 0
  %899 = load i32, i32* %898, align 4, !noalias !592
  %900 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %897, i64 0, i32 1, i64 0
  %901 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 0
  store i32 %899, i32* %901, align 8, !alias.scope !592
  %902 = icmp sgt i32 %899, 5
  br i1 %902, label %903, label %910

903:                                              ; preds = %895
  %904 = sext i32 %899 to i64
  %905 = shl nsw i64 %904, 2
  %906 = call i8* @_Znam(i64 %905) #11, !noalias !592
  %907 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1, i32 0
  %908 = bitcast i32** %907 to i8**
  store i8* %906, i8** %908, align 8, !alias.scope !592
  %909 = bitcast i8* %906 to i32*
  br label %915

910:                                              ; preds = %895
  %911 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1
  %912 = bitcast %union.anon* %911 to i32*
  %913 = sext i32 %899 to i64
  %914 = shl nsw i64 %913, 2
  br label %915

915:                                              ; preds = %910, %903
  %916 = phi i64 [ %905, %903 ], [ %914, %910 ]
  %917 = phi i32* [ %909, %903 ], [ %912, %910 ]
  %918 = bitcast i32* %917 to i8*
  %919 = bitcast i32* %900 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %918, i8* align 4 %919, i64 %916, i1 false) #12
  %920 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %921 = bitcast %union.TfLitePtrUnion* %920 to i8**
  %922 = load i8*, i8** %921, align 8
  br label %923

923:                                              ; preds = %893, %915
  %924 = phi i8* [ %922, %915 ], [ null, %893 ]
  %925 = bitcast %"class.tflite::RuntimeShape"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %925) #12
  %926 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %926, label %927, label %929

927:                                              ; preds = %923
  %928 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 0
  store i32 0, i32* %928, align 8, !alias.scope !595
  br label %957

929:                                              ; preds = %923
  %930 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %931 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %930, align 8, !noalias !595
  %932 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %931, i64 0, i32 0
  %933 = load i32, i32* %932, align 4, !noalias !595
  %934 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %931, i64 0, i32 1, i64 0
  %935 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 0
  store i32 %933, i32* %935, align 8, !alias.scope !595
  %936 = icmp sgt i32 %933, 5
  br i1 %936, label %937, label %944

937:                                              ; preds = %929
  %938 = sext i32 %933 to i64
  %939 = shl nsw i64 %938, 2
  %940 = call i8* @_Znam(i64 %939) #11, !noalias !595
  %941 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1, i32 0
  %942 = bitcast i32** %941 to i8**
  store i8* %940, i8** %942, align 8, !alias.scope !595
  %943 = bitcast i8* %940 to i32*
  br label %949

944:                                              ; preds = %929
  %945 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1
  %946 = bitcast %union.anon* %945 to i32*
  %947 = sext i32 %933 to i64
  %948 = shl nsw i64 %947, 2
  br label %949

949:                                              ; preds = %944, %937
  %950 = phi i64 [ %939, %937 ], [ %948, %944 ]
  %951 = phi i32* [ %943, %937 ], [ %946, %944 ]
  %952 = bitcast i32* %951 to i8*
  %953 = bitcast i32* %934 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %952, i8* align 4 %953, i64 %950, i1 false) #12
  %954 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %955 = bitcast %union.TfLitePtrUnion* %954 to i8**
  %956 = load i8*, i8** %955, align 8
  br label %957

957:                                              ; preds = %927, %949
  %958 = phi i8* [ %956, %949 ], [ null, %927 ]
  %959 = load i8, i8* %31, align 4
  %960 = icmp eq i8 %959, 4
  br i1 %960, label %961, label %962

961:                                              ; preds = %957
  call void @_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph(%"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %10, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %19, i8* %891, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %20, i8* %924, %"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %21, i8* %958) #12
  br label %1073

962:                                              ; preds = %957
  %963 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %963) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %963, i8* nonnull align 4 %31, i64 80, i1 false) #12
  %964 = load i32, i32* %46, align 4
  %965 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 1
  store i32 %964, i32* %965, align 4
  %966 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 7
  %967 = load i32, i32* %37, align 4
  %968 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %8, i64 0, i32 2
  store i32 %967, i32* %968, align 4
  %969 = bitcast i32* %40 to <4 x i32>*
  %970 = load <4 x i32>, <4 x i32>* %969, align 4
  %971 = shufflevector <4 x i32> %970, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %972 = bitcast i32* %966 to <4 x i32>*
  store <4 x i32> %971, <4 x i32>* %972, align 4
  %973 = icmp eq i8 %959, 2
  %974 = select i1 %973, %"struct.tflite::ArithmeticParams"* %10, %"struct.tflite::ArithmeticParams"* %8
  %975 = select i1 %973, i8* %891, i8* %924
  %976 = select i1 %973, i8* %924, i8* %891
  %977 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %974, i64 0, i32 15, i64 0
  %978 = load i32, i32* %977, align 4
  %979 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %974, i64 0, i32 15, i64 1
  %980 = load i32, i32* %979, align 4
  %981 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %974, i64 0, i32 15, i64 2
  %982 = load i32, i32* %981, align 4
  %983 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %974, i64 0, i32 15, i64 3
  %984 = load i32, i32* %983, align 4
  %985 = getelementptr inbounds %"struct.tflite::ArithmeticParams", %"struct.tflite::ArithmeticParams"* %974, i64 0, i32 15, i64 4
  %986 = load i32, i32* %985, align 4
  %987 = icmp sgt i32 %986, 1
  %988 = icmp sgt i32 %978, 0
  br i1 %987, label %994, label %989

989:                                              ; preds = %962
  br i1 %988, label %990, label %1072

990:                                              ; preds = %989
  %991 = icmp sgt i32 %980, 0
  %992 = icmp sgt i32 %982, 0
  %993 = sext i32 %984 to i64
  br label %1040

994:                                              ; preds = %962
  br i1 %988, label %995, label %1072

995:                                              ; preds = %994
  %996 = icmp sgt i32 %980, 0
  %997 = icmp sgt i32 %982, 0
  %998 = icmp sgt i32 %984, 0
  %999 = sext i32 %986 to i64
  br label %1000

1000:                                             ; preds = %1009, %995
  %1001 = phi i32 [ 0, %995 ], [ %1013, %1009 ]
  %1002 = phi i8* [ %976, %995 ], [ %1012, %1009 ]
  %1003 = phi i8* [ %975, %995 ], [ %1011, %1009 ]
  %1004 = phi i8* [ %958, %995 ], [ %1010, %1009 ]
  br i1 %996, label %1005, label %1009

1005:                                             ; preds = %1000, %1020
  %1006 = phi i32 [ %1024, %1020 ], [ 0, %1000 ]
  %1007 = phi i8* [ %1022, %1020 ], [ %1003, %1000 ]
  %1008 = phi i8* [ %1021, %1020 ], [ %1004, %1000 ]
  br i1 %997, label %1015, label %1020

1009:                                             ; preds = %1020, %1000
  %1010 = phi i8* [ %1004, %1000 ], [ %1021, %1020 ]
  %1011 = phi i8* [ %1003, %1000 ], [ %1022, %1020 ]
  %1012 = phi i8* [ null, %1000 ], [ %1023, %1020 ]
  %1013 = add nuw nsw i32 %1001, 1
  %1014 = icmp eq i32 %1013, %978
  br i1 %1014, label %1072, label %1000

1015:                                             ; preds = %1005, %1026
  %1016 = phi i32 [ %1030, %1026 ], [ 0, %1005 ]
  %1017 = phi i8* [ %1028, %1026 ], [ %1002, %1005 ]
  %1018 = phi i8* [ %1029, %1026 ], [ %1007, %1005 ]
  %1019 = phi i8* [ %1027, %1026 ], [ %1008, %1005 ]
  br i1 %998, label %1032, label %1026

1020:                                             ; preds = %1026, %1005
  %1021 = phi i8* [ %1008, %1005 ], [ %1027, %1026 ]
  %1022 = phi i8* [ %1007, %1005 ], [ %1029, %1026 ]
  %1023 = phi i8* [ %1002, %1005 ], [ %1028, %1026 ]
  %1024 = add nuw nsw i32 %1006, 1
  %1025 = icmp eq i32 %1024, %980
  br i1 %1025, label %1009, label %1005

1026:                                             ; preds = %1032, %1015
  %1027 = phi i8* [ %1019, %1015 ], [ %1037, %1032 ]
  %1028 = phi i8* [ %1017, %1015 ], [ %1036, %1032 ]
  %1029 = getelementptr inbounds i8, i8* %1018, i64 %999
  %1030 = add nuw nsw i32 %1016, 1
  %1031 = icmp eq i32 %1030, %982
  br i1 %1031, label %1020, label %1015

1032:                                             ; preds = %1015, %1032
  %1033 = phi i32 [ %1038, %1032 ], [ 0, %1015 ]
  %1034 = phi i8* [ %1036, %1032 ], [ %1017, %1015 ]
  %1035 = phi i8* [ %1037, %1032 ], [ %1019, %1015 ]
  call void @_ZN6tflite13optimized_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph(i32 %986, %"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %974, i8* %1018, i8* %1034, i8* %1035) #12
  %1036 = getelementptr inbounds i8, i8* %1034, i64 %999
  %1037 = getelementptr inbounds i8, i8* %1035, i64 %999
  %1038 = add nuw nsw i32 %1033, 1
  %1039 = icmp eq i32 %1038, %984
  br i1 %1039, label %1026, label %1032

1040:                                             ; preds = %1049, %990
  %1041 = phi i32 [ 0, %990 ], [ %1053, %1049 ]
  %1042 = phi i8* [ %976, %990 ], [ %1052, %1049 ]
  %1043 = phi i8* [ %975, %990 ], [ %1051, %1049 ]
  %1044 = phi i8* [ %958, %990 ], [ %1050, %1049 ]
  br i1 %991, label %1045, label %1049

1045:                                             ; preds = %1040, %1055
  %1046 = phi i32 [ %1059, %1055 ], [ 0, %1040 ]
  %1047 = phi i8* [ %1057, %1055 ], [ %1043, %1040 ]
  %1048 = phi i8* [ %1056, %1055 ], [ %1044, %1040 ]
  br i1 %992, label %1061, label %1055

1049:                                             ; preds = %1055, %1040
  %1050 = phi i8* [ %1044, %1040 ], [ %1056, %1055 ]
  %1051 = phi i8* [ %1043, %1040 ], [ %1057, %1055 ]
  %1052 = phi i8* [ null, %1040 ], [ %1058, %1055 ]
  %1053 = add nuw nsw i32 %1041, 1
  %1054 = icmp eq i32 %1053, %978
  br i1 %1054, label %1072, label %1040

1055:                                             ; preds = %1061, %1045
  %1056 = phi i8* [ %1048, %1045 ], [ %1068, %1061 ]
  %1057 = phi i8* [ %1047, %1045 ], [ %1069, %1061 ]
  %1058 = phi i8* [ %1042, %1045 ], [ %1067, %1061 ]
  %1059 = add nuw nsw i32 %1046, 1
  %1060 = icmp eq i32 %1059, %980
  br i1 %1060, label %1049, label %1045

1061:                                             ; preds = %1045, %1061
  %1062 = phi i32 [ %1070, %1061 ], [ 0, %1045 ]
  %1063 = phi i8* [ %1067, %1061 ], [ %1042, %1045 ]
  %1064 = phi i8* [ %1069, %1061 ], [ %1047, %1045 ]
  %1065 = phi i8* [ %1068, %1061 ], [ %1048, %1045 ]
  %1066 = load i8, i8* %1064, align 1
  call void @_ZN6tflite13optimized_ops18AddScalarBroadcastEiRKNS_16ArithmeticParamsEhPKhPh(i32 %984, %"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %974, i8 zeroext %1066, i8* %1063, i8* %1065) #12
  %1067 = getelementptr inbounds i8, i8* %1063, i64 %993
  %1068 = getelementptr inbounds i8, i8* %1065, i64 %993
  %1069 = getelementptr inbounds i8, i8* %1064, i64 1
  %1070 = add nuw nsw i32 %1062, 1
  %1071 = icmp eq i32 %1070, %982
  br i1 %1071, label %1055, label %1061

1072:                                             ; preds = %1049, %1009, %989, %994
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %963) #12
  br label %1073

1073:                                             ; preds = %961, %1072
  %1074 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 0
  %1075 = load i32, i32* %1074, align 8
  %1076 = icmp sgt i32 %1075, 5
  br i1 %1076, label %1077, label %1083

1077:                                             ; preds = %1073
  %1078 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %21, i64 0, i32 1, i32 0
  %1079 = load i32*, i32** %1078, align 8
  %1080 = icmp eq i32* %1079, null
  br i1 %1080, label %1083, label %1081

1081:                                             ; preds = %1077
  %1082 = bitcast i32* %1079 to i8*
  call void @_ZdaPv(i8* %1082) #11
  br label %1083

1083:                                             ; preds = %1073, %1077, %1081
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %925) #12
  %1084 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 0
  %1085 = load i32, i32* %1084, align 8
  %1086 = icmp sgt i32 %1085, 5
  br i1 %1086, label %1087, label %1093

1087:                                             ; preds = %1083
  %1088 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %20, i64 0, i32 1, i32 0
  %1089 = load i32*, i32** %1088, align 8
  %1090 = icmp eq i32* %1089, null
  br i1 %1090, label %1093, label %1091

1091:                                             ; preds = %1087
  %1092 = bitcast i32* %1089 to i8*
  call void @_ZdaPv(i8* %1092) #11
  br label %1093

1093:                                             ; preds = %1083, %1087, %1091
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %892) #12
  %1094 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 0
  %1095 = load i32, i32* %1094, align 8
  %1096 = icmp sgt i32 %1095, 5
  br i1 %1096, label %1097, label %1563

1097:                                             ; preds = %1093
  %1098 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %19, i64 0, i32 1, i32 0
  %1099 = load i32*, i32** %1098, align 8
  %1100 = icmp eq i32* %1099, null
  br i1 %1100, label %1563, label %1101

1101:                                             ; preds = %1097
  %1102 = bitcast i32* %1099 to i8*
  call void @_ZdaPv(i8* %1102) #11
  br label %1563

1103:                                             ; preds = %857
  %1104 = bitcast %"class.tflite::RuntimeShape"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1104) #12
  br i1 %69, label %1105, label %1107

1105:                                             ; preds = %1103
  %1106 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 0
  store i32 0, i32* %1106, align 8, !alias.scope !598
  br label %1135

1107:                                             ; preds = %1103
  %1108 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %1109 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1108, align 8, !noalias !598
  %1110 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1109, i64 0, i32 0
  %1111 = load i32, i32* %1110, align 4, !noalias !598
  %1112 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1109, i64 0, i32 1, i64 0
  %1113 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 0
  store i32 %1111, i32* %1113, align 8, !alias.scope !598
  %1114 = icmp sgt i32 %1111, 5
  br i1 %1114, label %1115, label %1122

1115:                                             ; preds = %1107
  %1116 = sext i32 %1111 to i64
  %1117 = shl nsw i64 %1116, 2
  %1118 = call i8* @_Znam(i64 %1117) #11, !noalias !598
  %1119 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1, i32 0
  %1120 = bitcast i32** %1119 to i8**
  store i8* %1118, i8** %1120, align 8, !alias.scope !598
  %1121 = bitcast i8* %1118 to i32*
  br label %1127

1122:                                             ; preds = %1107
  %1123 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1
  %1124 = bitcast %union.anon* %1123 to i32*
  %1125 = sext i32 %1111 to i64
  %1126 = shl nsw i64 %1125, 2
  br label %1127

1127:                                             ; preds = %1122, %1115
  %1128 = phi i64 [ %1117, %1115 ], [ %1126, %1122 ]
  %1129 = phi i32* [ %1121, %1115 ], [ %1124, %1122 ]
  %1130 = bitcast i32* %1129 to i8*
  %1131 = bitcast i32* %1112 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1130, i8* align 4 %1131, i64 %1128, i1 false) #12
  %1132 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %1133 = bitcast %union.TfLitePtrUnion* %1132 to i8**
  %1134 = load i8*, i8** %1133, align 8
  br label %1135

1135:                                             ; preds = %1105, %1127
  %1136 = phi i32 [ %1111, %1127 ], [ 0, %1105 ]
  %1137 = phi i8* [ %1134, %1127 ], [ null, %1105 ]
  %1138 = bitcast %"class.tflite::RuntimeShape"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1138) #12
  br i1 %99, label %1139, label %1141

1139:                                             ; preds = %1135
  %1140 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %23, i64 0, i32 0
  store i32 0, i32* %1140, align 8, !alias.scope !601
  br label %1169

1141:                                             ; preds = %1135
  %1142 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %1143 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1142, align 8, !noalias !601
  %1144 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1143, i64 0, i32 0
  %1145 = load i32, i32* %1144, align 4, !noalias !601
  %1146 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1143, i64 0, i32 1, i64 0
  %1147 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %23, i64 0, i32 0
  store i32 %1145, i32* %1147, align 8, !alias.scope !601
  %1148 = icmp sgt i32 %1145, 5
  br i1 %1148, label %1149, label %1156

1149:                                             ; preds = %1141
  %1150 = sext i32 %1145 to i64
  %1151 = shl nsw i64 %1150, 2
  %1152 = call i8* @_Znam(i64 %1151) #11, !noalias !601
  %1153 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %23, i64 0, i32 1, i32 0
  %1154 = bitcast i32** %1153 to i8**
  store i8* %1152, i8** %1154, align 8, !alias.scope !601
  %1155 = bitcast i8* %1152 to i32*
  br label %1161

1156:                                             ; preds = %1141
  %1157 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %23, i64 0, i32 1
  %1158 = bitcast %union.anon* %1157 to i32*
  %1159 = sext i32 %1145 to i64
  %1160 = shl nsw i64 %1159, 2
  br label %1161

1161:                                             ; preds = %1156, %1149
  %1162 = phi i64 [ %1151, %1149 ], [ %1160, %1156 ]
  %1163 = phi i32* [ %1155, %1149 ], [ %1158, %1156 ]
  %1164 = bitcast i32* %1163 to i8*
  %1165 = bitcast i32* %1146 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1164, i8* align 4 %1165, i64 %1162, i1 false) #12
  %1166 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %1167 = bitcast %union.TfLitePtrUnion* %1166 to i8**
  %1168 = load i8*, i8** %1167, align 8
  br label %1169

1169:                                             ; preds = %1139, %1161
  %1170 = phi i32 [ %1145, %1161 ], [ 0, %1139 ]
  %1171 = phi i8* [ %1168, %1161 ], [ null, %1139 ]
  %1172 = bitcast %"class.tflite::RuntimeShape"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1172) #12
  %1173 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %1173, label %1174, label %1176

1174:                                             ; preds = %1169
  %1175 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %24, i64 0, i32 0
  store i32 0, i32* %1175, align 8, !alias.scope !604
  br label %1204

1176:                                             ; preds = %1169
  %1177 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %1178 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1177, align 8, !noalias !604
  %1179 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1178, i64 0, i32 0
  %1180 = load i32, i32* %1179, align 4, !noalias !604
  %1181 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1178, i64 0, i32 1, i64 0
  %1182 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %24, i64 0, i32 0
  store i32 %1180, i32* %1182, align 8, !alias.scope !604
  %1183 = icmp sgt i32 %1180, 5
  br i1 %1183, label %1184, label %1191

1184:                                             ; preds = %1176
  %1185 = sext i32 %1180 to i64
  %1186 = shl nsw i64 %1185, 2
  %1187 = call i8* @_Znam(i64 %1186) #11, !noalias !604
  %1188 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %24, i64 0, i32 1, i32 0
  %1189 = bitcast i32** %1188 to i8**
  store i8* %1187, i8** %1189, align 8, !alias.scope !604
  %1190 = bitcast i8* %1187 to i32*
  br label %1196

1191:                                             ; preds = %1176
  %1192 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %24, i64 0, i32 1
  %1193 = bitcast %union.anon* %1192 to i32*
  %1194 = sext i32 %1180 to i64
  %1195 = shl nsw i64 %1194, 2
  br label %1196

1196:                                             ; preds = %1191, %1184
  %1197 = phi i64 [ %1186, %1184 ], [ %1195, %1191 ]
  %1198 = phi i32* [ %1190, %1184 ], [ %1193, %1191 ]
  %1199 = bitcast i32* %1198 to i8*
  %1200 = bitcast i32* %1181 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1199, i8* align 4 %1200, i64 %1197, i1 false) #12
  %1201 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %1202 = bitcast %union.TfLitePtrUnion* %1201 to i8**
  %1203 = load i8*, i8** %1202, align 8
  br label %1204

1204:                                             ; preds = %1174, %1196
  %1205 = phi i32 [ %1180, %1196 ], [ 0, %1174 ]
  %1206 = phi i8* [ %1203, %1196 ], [ null, %1174 ]
  %1207 = icmp sgt i32 %1136, 5
  %1208 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1
  br i1 %1207, label %1209, label %1212

1209:                                             ; preds = %1204
  %1210 = getelementptr inbounds %union.anon, %union.anon* %1208, i64 0, i32 0
  %1211 = load i32*, i32** %1210, align 8
  br label %1215

1212:                                             ; preds = %1204
  %1213 = bitcast %union.anon* %1208 to i32*
  %1214 = icmp sgt i32 %1136, 0
  br i1 %1214, label %1215, label %1315

1215:                                             ; preds = %1212, %1209
  %1216 = phi i32* [ %1211, %1209 ], [ %1213, %1212 ]
  %1217 = zext i32 %1136 to i64
  %1218 = icmp ult i32 %1136, 8
  br i1 %1218, label %1304, label %1219

1219:                                             ; preds = %1215
  %1220 = and i64 %1217, 4294967288
  %1221 = add nsw i64 %1220, -8
  %1222 = lshr exact i64 %1221, 3
  %1223 = add nuw nsw i64 %1222, 1
  %1224 = and i64 %1223, 3
  %1225 = icmp ult i64 %1221, 24
  br i1 %1225, label %1271, label %1226

1226:                                             ; preds = %1219
  %1227 = sub nsw i64 %1223, %1224
  br label %1228

1228:                                             ; preds = %1228, %1226
  %1229 = phi i64 [ 0, %1226 ], [ %1268, %1228 ]
  %1230 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1226 ], [ %1266, %1228 ]
  %1231 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1226 ], [ %1267, %1228 ]
  %1232 = phi i64 [ %1227, %1226 ], [ %1269, %1228 ]
  %1233 = getelementptr inbounds i32, i32* %1216, i64 %1229
  %1234 = bitcast i32* %1233 to <4 x i32>*
  %1235 = load <4 x i32>, <4 x i32>* %1234, align 4
  %1236 = getelementptr inbounds i32, i32* %1233, i64 4
  %1237 = bitcast i32* %1236 to <4 x i32>*
  %1238 = load <4 x i32>, <4 x i32>* %1237, align 4
  %1239 = mul nsw <4 x i32> %1235, %1230
  %1240 = mul nsw <4 x i32> %1238, %1231
  %1241 = or i64 %1229, 8
  %1242 = getelementptr inbounds i32, i32* %1216, i64 %1241
  %1243 = bitcast i32* %1242 to <4 x i32>*
  %1244 = load <4 x i32>, <4 x i32>* %1243, align 4
  %1245 = getelementptr inbounds i32, i32* %1242, i64 4
  %1246 = bitcast i32* %1245 to <4 x i32>*
  %1247 = load <4 x i32>, <4 x i32>* %1246, align 4
  %1248 = mul nsw <4 x i32> %1244, %1239
  %1249 = mul nsw <4 x i32> %1247, %1240
  %1250 = or i64 %1229, 16
  %1251 = getelementptr inbounds i32, i32* %1216, i64 %1250
  %1252 = bitcast i32* %1251 to <4 x i32>*
  %1253 = load <4 x i32>, <4 x i32>* %1252, align 4
  %1254 = getelementptr inbounds i32, i32* %1251, i64 4
  %1255 = bitcast i32* %1254 to <4 x i32>*
  %1256 = load <4 x i32>, <4 x i32>* %1255, align 4
  %1257 = mul nsw <4 x i32> %1253, %1248
  %1258 = mul nsw <4 x i32> %1256, %1249
  %1259 = or i64 %1229, 24
  %1260 = getelementptr inbounds i32, i32* %1216, i64 %1259
  %1261 = bitcast i32* %1260 to <4 x i32>*
  %1262 = load <4 x i32>, <4 x i32>* %1261, align 4
  %1263 = getelementptr inbounds i32, i32* %1260, i64 4
  %1264 = bitcast i32* %1263 to <4 x i32>*
  %1265 = load <4 x i32>, <4 x i32>* %1264, align 4
  %1266 = mul nsw <4 x i32> %1262, %1257
  %1267 = mul nsw <4 x i32> %1265, %1258
  %1268 = add i64 %1229, 32
  %1269 = add i64 %1232, -4
  %1270 = icmp eq i64 %1269, 0
  br i1 %1270, label %1271, label %1228, !llvm.loop !607

1271:                                             ; preds = %1228, %1219
  %1272 = phi <4 x i32> [ undef, %1219 ], [ %1266, %1228 ]
  %1273 = phi <4 x i32> [ undef, %1219 ], [ %1267, %1228 ]
  %1274 = phi i64 [ 0, %1219 ], [ %1268, %1228 ]
  %1275 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1219 ], [ %1266, %1228 ]
  %1276 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1219 ], [ %1267, %1228 ]
  %1277 = icmp eq i64 %1224, 0
  br i1 %1277, label %1294, label %1278

1278:                                             ; preds = %1271, %1278
  %1279 = phi i64 [ %1291, %1278 ], [ %1274, %1271 ]
  %1280 = phi <4 x i32> [ %1289, %1278 ], [ %1275, %1271 ]
  %1281 = phi <4 x i32> [ %1290, %1278 ], [ %1276, %1271 ]
  %1282 = phi i64 [ %1292, %1278 ], [ %1224, %1271 ]
  %1283 = getelementptr inbounds i32, i32* %1216, i64 %1279
  %1284 = bitcast i32* %1283 to <4 x i32>*
  %1285 = load <4 x i32>, <4 x i32>* %1284, align 4
  %1286 = getelementptr inbounds i32, i32* %1283, i64 4
  %1287 = bitcast i32* %1286 to <4 x i32>*
  %1288 = load <4 x i32>, <4 x i32>* %1287, align 4
  %1289 = mul nsw <4 x i32> %1285, %1280
  %1290 = mul nsw <4 x i32> %1288, %1281
  %1291 = add i64 %1279, 8
  %1292 = add i64 %1282, -1
  %1293 = icmp eq i64 %1292, 0
  br i1 %1293, label %1294, label %1278, !llvm.loop !608

1294:                                             ; preds = %1278, %1271
  %1295 = phi <4 x i32> [ %1272, %1271 ], [ %1289, %1278 ]
  %1296 = phi <4 x i32> [ %1273, %1271 ], [ %1290, %1278 ]
  %1297 = mul <4 x i32> %1296, %1295
  %1298 = shufflevector <4 x i32> %1297, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1299 = mul <4 x i32> %1297, %1298
  %1300 = shufflevector <4 x i32> %1299, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1301 = mul <4 x i32> %1299, %1300
  %1302 = extractelement <4 x i32> %1301, i32 0
  %1303 = icmp eq i64 %1220, %1217
  br i1 %1303, label %1315, label %1304

1304:                                             ; preds = %1294, %1215
  %1305 = phi i64 [ 0, %1215 ], [ %1220, %1294 ]
  %1306 = phi i32 [ 1, %1215 ], [ %1302, %1294 ]
  br label %1307

1307:                                             ; preds = %1304, %1307
  %1308 = phi i64 [ %1313, %1307 ], [ %1305, %1304 ]
  %1309 = phi i32 [ %1312, %1307 ], [ %1306, %1304 ]
  %1310 = getelementptr inbounds i32, i32* %1216, i64 %1308
  %1311 = load i32, i32* %1310, align 4
  %1312 = mul nsw i32 %1311, %1309
  %1313 = add nuw nsw i64 %1308, 1
  %1314 = icmp eq i64 %1313, %1217
  br i1 %1314, label %1315, label %1307, !llvm.loop !609

1315:                                             ; preds = %1307, %1294, %1212
  %1316 = phi i32 [ 1, %1212 ], [ %1302, %1294 ], [ %1312, %1307 ]
  %1317 = icmp sgt i32 %1170, 5
  %1318 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %23, i64 0, i32 1
  br i1 %1317, label %1319, label %1322

1319:                                             ; preds = %1315
  %1320 = getelementptr inbounds %union.anon, %union.anon* %1318, i64 0, i32 0
  %1321 = load i32*, i32** %1320, align 8
  br label %1325

1322:                                             ; preds = %1315
  %1323 = bitcast %union.anon* %1318 to i32*
  %1324 = icmp sgt i32 %1170, 0
  br i1 %1324, label %1325, label %1425

1325:                                             ; preds = %1322, %1319
  %1326 = phi i32* [ %1321, %1319 ], [ %1323, %1322 ]
  %1327 = zext i32 %1170 to i64
  %1328 = icmp ult i32 %1170, 8
  br i1 %1328, label %1414, label %1329

1329:                                             ; preds = %1325
  %1330 = and i64 %1327, 4294967288
  %1331 = add nsw i64 %1330, -8
  %1332 = lshr exact i64 %1331, 3
  %1333 = add nuw nsw i64 %1332, 1
  %1334 = and i64 %1333, 3
  %1335 = icmp ult i64 %1331, 24
  br i1 %1335, label %1381, label %1336

1336:                                             ; preds = %1329
  %1337 = sub nsw i64 %1333, %1334
  br label %1338

1338:                                             ; preds = %1338, %1336
  %1339 = phi i64 [ 0, %1336 ], [ %1378, %1338 ]
  %1340 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1336 ], [ %1376, %1338 ]
  %1341 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1336 ], [ %1377, %1338 ]
  %1342 = phi i64 [ %1337, %1336 ], [ %1379, %1338 ]
  %1343 = getelementptr inbounds i32, i32* %1326, i64 %1339
  %1344 = bitcast i32* %1343 to <4 x i32>*
  %1345 = load <4 x i32>, <4 x i32>* %1344, align 4
  %1346 = getelementptr inbounds i32, i32* %1343, i64 4
  %1347 = bitcast i32* %1346 to <4 x i32>*
  %1348 = load <4 x i32>, <4 x i32>* %1347, align 4
  %1349 = mul nsw <4 x i32> %1345, %1340
  %1350 = mul nsw <4 x i32> %1348, %1341
  %1351 = or i64 %1339, 8
  %1352 = getelementptr inbounds i32, i32* %1326, i64 %1351
  %1353 = bitcast i32* %1352 to <4 x i32>*
  %1354 = load <4 x i32>, <4 x i32>* %1353, align 4
  %1355 = getelementptr inbounds i32, i32* %1352, i64 4
  %1356 = bitcast i32* %1355 to <4 x i32>*
  %1357 = load <4 x i32>, <4 x i32>* %1356, align 4
  %1358 = mul nsw <4 x i32> %1354, %1349
  %1359 = mul nsw <4 x i32> %1357, %1350
  %1360 = or i64 %1339, 16
  %1361 = getelementptr inbounds i32, i32* %1326, i64 %1360
  %1362 = bitcast i32* %1361 to <4 x i32>*
  %1363 = load <4 x i32>, <4 x i32>* %1362, align 4
  %1364 = getelementptr inbounds i32, i32* %1361, i64 4
  %1365 = bitcast i32* %1364 to <4 x i32>*
  %1366 = load <4 x i32>, <4 x i32>* %1365, align 4
  %1367 = mul nsw <4 x i32> %1363, %1358
  %1368 = mul nsw <4 x i32> %1366, %1359
  %1369 = or i64 %1339, 24
  %1370 = getelementptr inbounds i32, i32* %1326, i64 %1369
  %1371 = bitcast i32* %1370 to <4 x i32>*
  %1372 = load <4 x i32>, <4 x i32>* %1371, align 4
  %1373 = getelementptr inbounds i32, i32* %1370, i64 4
  %1374 = bitcast i32* %1373 to <4 x i32>*
  %1375 = load <4 x i32>, <4 x i32>* %1374, align 4
  %1376 = mul nsw <4 x i32> %1372, %1367
  %1377 = mul nsw <4 x i32> %1375, %1368
  %1378 = add i64 %1339, 32
  %1379 = add i64 %1342, -4
  %1380 = icmp eq i64 %1379, 0
  br i1 %1380, label %1381, label %1338, !llvm.loop !610

1381:                                             ; preds = %1338, %1329
  %1382 = phi <4 x i32> [ undef, %1329 ], [ %1376, %1338 ]
  %1383 = phi <4 x i32> [ undef, %1329 ], [ %1377, %1338 ]
  %1384 = phi i64 [ 0, %1329 ], [ %1378, %1338 ]
  %1385 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1329 ], [ %1376, %1338 ]
  %1386 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1329 ], [ %1377, %1338 ]
  %1387 = icmp eq i64 %1334, 0
  br i1 %1387, label %1404, label %1388

1388:                                             ; preds = %1381, %1388
  %1389 = phi i64 [ %1401, %1388 ], [ %1384, %1381 ]
  %1390 = phi <4 x i32> [ %1399, %1388 ], [ %1385, %1381 ]
  %1391 = phi <4 x i32> [ %1400, %1388 ], [ %1386, %1381 ]
  %1392 = phi i64 [ %1402, %1388 ], [ %1334, %1381 ]
  %1393 = getelementptr inbounds i32, i32* %1326, i64 %1389
  %1394 = bitcast i32* %1393 to <4 x i32>*
  %1395 = load <4 x i32>, <4 x i32>* %1394, align 4
  %1396 = getelementptr inbounds i32, i32* %1393, i64 4
  %1397 = bitcast i32* %1396 to <4 x i32>*
  %1398 = load <4 x i32>, <4 x i32>* %1397, align 4
  %1399 = mul nsw <4 x i32> %1395, %1390
  %1400 = mul nsw <4 x i32> %1398, %1391
  %1401 = add i64 %1389, 8
  %1402 = add i64 %1392, -1
  %1403 = icmp eq i64 %1402, 0
  br i1 %1403, label %1404, label %1388, !llvm.loop !611

1404:                                             ; preds = %1388, %1381
  %1405 = phi <4 x i32> [ %1382, %1381 ], [ %1399, %1388 ]
  %1406 = phi <4 x i32> [ %1383, %1381 ], [ %1400, %1388 ]
  %1407 = mul <4 x i32> %1406, %1405
  %1408 = shufflevector <4 x i32> %1407, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1409 = mul <4 x i32> %1407, %1408
  %1410 = shufflevector <4 x i32> %1409, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1411 = mul <4 x i32> %1409, %1410
  %1412 = extractelement <4 x i32> %1411, i32 0
  %1413 = icmp eq i64 %1330, %1327
  br i1 %1413, label %1425, label %1414

1414:                                             ; preds = %1404, %1325
  %1415 = phi i64 [ 0, %1325 ], [ %1330, %1404 ]
  %1416 = phi i32 [ 1, %1325 ], [ %1412, %1404 ]
  br label %1417

1417:                                             ; preds = %1414, %1417
  %1418 = phi i64 [ %1423, %1417 ], [ %1415, %1414 ]
  %1419 = phi i32 [ %1422, %1417 ], [ %1416, %1414 ]
  %1420 = getelementptr inbounds i32, i32* %1326, i64 %1418
  %1421 = load i32, i32* %1420, align 4
  %1422 = mul nsw i32 %1421, %1419
  %1423 = add nuw nsw i64 %1418, 1
  %1424 = icmp eq i64 %1423, %1327
  br i1 %1424, label %1425, label %1417, !llvm.loop !612

1425:                                             ; preds = %1417, %1404, %1322
  %1426 = phi i32 [ 1, %1322 ], [ %1412, %1404 ], [ %1422, %1417 ]
  %1427 = icmp sgt i32 %1205, 5
  %1428 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %24, i64 0, i32 1
  br i1 %1427, label %1429, label %1432

1429:                                             ; preds = %1425
  %1430 = getelementptr inbounds %union.anon, %union.anon* %1428, i64 0, i32 0
  %1431 = load i32*, i32** %1430, align 8
  br label %1435

1432:                                             ; preds = %1425
  %1433 = bitcast %union.anon* %1428 to i32*
  %1434 = icmp sgt i32 %1205, 0
  br i1 %1434, label %1435, label %1535

1435:                                             ; preds = %1432, %1429
  %1436 = phi i32* [ %1431, %1429 ], [ %1433, %1432 ]
  %1437 = zext i32 %1205 to i64
  %1438 = icmp ult i32 %1205, 8
  br i1 %1438, label %1524, label %1439

1439:                                             ; preds = %1435
  %1440 = and i64 %1437, 4294967288
  %1441 = add nsw i64 %1440, -8
  %1442 = lshr exact i64 %1441, 3
  %1443 = add nuw nsw i64 %1442, 1
  %1444 = and i64 %1443, 3
  %1445 = icmp ult i64 %1441, 24
  br i1 %1445, label %1491, label %1446

1446:                                             ; preds = %1439
  %1447 = sub nsw i64 %1443, %1444
  br label %1448

1448:                                             ; preds = %1448, %1446
  %1449 = phi i64 [ 0, %1446 ], [ %1488, %1448 ]
  %1450 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1446 ], [ %1486, %1448 ]
  %1451 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1446 ], [ %1487, %1448 ]
  %1452 = phi i64 [ %1447, %1446 ], [ %1489, %1448 ]
  %1453 = getelementptr inbounds i32, i32* %1436, i64 %1449
  %1454 = bitcast i32* %1453 to <4 x i32>*
  %1455 = load <4 x i32>, <4 x i32>* %1454, align 4
  %1456 = getelementptr inbounds i32, i32* %1453, i64 4
  %1457 = bitcast i32* %1456 to <4 x i32>*
  %1458 = load <4 x i32>, <4 x i32>* %1457, align 4
  %1459 = mul nsw <4 x i32> %1455, %1450
  %1460 = mul nsw <4 x i32> %1458, %1451
  %1461 = or i64 %1449, 8
  %1462 = getelementptr inbounds i32, i32* %1436, i64 %1461
  %1463 = bitcast i32* %1462 to <4 x i32>*
  %1464 = load <4 x i32>, <4 x i32>* %1463, align 4
  %1465 = getelementptr inbounds i32, i32* %1462, i64 4
  %1466 = bitcast i32* %1465 to <4 x i32>*
  %1467 = load <4 x i32>, <4 x i32>* %1466, align 4
  %1468 = mul nsw <4 x i32> %1464, %1459
  %1469 = mul nsw <4 x i32> %1467, %1460
  %1470 = or i64 %1449, 16
  %1471 = getelementptr inbounds i32, i32* %1436, i64 %1470
  %1472 = bitcast i32* %1471 to <4 x i32>*
  %1473 = load <4 x i32>, <4 x i32>* %1472, align 4
  %1474 = getelementptr inbounds i32, i32* %1471, i64 4
  %1475 = bitcast i32* %1474 to <4 x i32>*
  %1476 = load <4 x i32>, <4 x i32>* %1475, align 4
  %1477 = mul nsw <4 x i32> %1473, %1468
  %1478 = mul nsw <4 x i32> %1476, %1469
  %1479 = or i64 %1449, 24
  %1480 = getelementptr inbounds i32, i32* %1436, i64 %1479
  %1481 = bitcast i32* %1480 to <4 x i32>*
  %1482 = load <4 x i32>, <4 x i32>* %1481, align 4
  %1483 = getelementptr inbounds i32, i32* %1480, i64 4
  %1484 = bitcast i32* %1483 to <4 x i32>*
  %1485 = load <4 x i32>, <4 x i32>* %1484, align 4
  %1486 = mul nsw <4 x i32> %1482, %1477
  %1487 = mul nsw <4 x i32> %1485, %1478
  %1488 = add i64 %1449, 32
  %1489 = add i64 %1452, -4
  %1490 = icmp eq i64 %1489, 0
  br i1 %1490, label %1491, label %1448, !llvm.loop !613

1491:                                             ; preds = %1448, %1439
  %1492 = phi <4 x i32> [ undef, %1439 ], [ %1486, %1448 ]
  %1493 = phi <4 x i32> [ undef, %1439 ], [ %1487, %1448 ]
  %1494 = phi i64 [ 0, %1439 ], [ %1488, %1448 ]
  %1495 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1439 ], [ %1486, %1448 ]
  %1496 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1439 ], [ %1487, %1448 ]
  %1497 = icmp eq i64 %1444, 0
  br i1 %1497, label %1514, label %1498

1498:                                             ; preds = %1491, %1498
  %1499 = phi i64 [ %1511, %1498 ], [ %1494, %1491 ]
  %1500 = phi <4 x i32> [ %1509, %1498 ], [ %1495, %1491 ]
  %1501 = phi <4 x i32> [ %1510, %1498 ], [ %1496, %1491 ]
  %1502 = phi i64 [ %1512, %1498 ], [ %1444, %1491 ]
  %1503 = getelementptr inbounds i32, i32* %1436, i64 %1499
  %1504 = bitcast i32* %1503 to <4 x i32>*
  %1505 = load <4 x i32>, <4 x i32>* %1504, align 4
  %1506 = getelementptr inbounds i32, i32* %1503, i64 4
  %1507 = bitcast i32* %1506 to <4 x i32>*
  %1508 = load <4 x i32>, <4 x i32>* %1507, align 4
  %1509 = mul nsw <4 x i32> %1505, %1500
  %1510 = mul nsw <4 x i32> %1508, %1501
  %1511 = add i64 %1499, 8
  %1512 = add i64 %1502, -1
  %1513 = icmp eq i64 %1512, 0
  br i1 %1513, label %1514, label %1498, !llvm.loop !614

1514:                                             ; preds = %1498, %1491
  %1515 = phi <4 x i32> [ %1492, %1491 ], [ %1509, %1498 ]
  %1516 = phi <4 x i32> [ %1493, %1491 ], [ %1510, %1498 ]
  %1517 = mul <4 x i32> %1516, %1515
  %1518 = shufflevector <4 x i32> %1517, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1519 = mul <4 x i32> %1517, %1518
  %1520 = shufflevector <4 x i32> %1519, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1521 = mul <4 x i32> %1519, %1520
  %1522 = extractelement <4 x i32> %1521, i32 0
  %1523 = icmp eq i64 %1440, %1437
  br i1 %1523, label %1535, label %1524

1524:                                             ; preds = %1514, %1435
  %1525 = phi i64 [ 0, %1435 ], [ %1440, %1514 ]
  %1526 = phi i32 [ 1, %1435 ], [ %1522, %1514 ]
  br label %1527

1527:                                             ; preds = %1524, %1527
  %1528 = phi i64 [ %1533, %1527 ], [ %1525, %1524 ]
  %1529 = phi i32 [ %1532, %1527 ], [ %1526, %1524 ]
  %1530 = getelementptr inbounds i32, i32* %1436, i64 %1528
  %1531 = load i32, i32* %1530, align 4
  %1532 = mul nsw i32 %1531, %1529
  %1533 = add nuw nsw i64 %1528, 1
  %1534 = icmp eq i64 %1533, %1437
  br i1 %1534, label %1535, label %1527, !llvm.loop !615

1535:                                             ; preds = %1527, %1514, %1432
  %1536 = phi i32 [ 1, %1432 ], [ %1522, %1514 ], [ %1532, %1527 ]
  %1537 = icmp eq i32 %1316, %1426
  br i1 %1537, label %1539, label %1538

1538:                                             ; preds = %1535
  call void @abort() #13
  unreachable

1539:                                             ; preds = %1535
  %1540 = icmp eq i32 %1316, %1536
  br i1 %1540, label %1542, label %1541

1541:                                             ; preds = %1539
  call void @abort() #13
  unreachable

1542:                                             ; preds = %1539
  call void @_ZN6tflite13optimized_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph(i32 %1316, %"struct.tflite::ArithmeticParams"* nonnull dereferenceable(80) %10, i8* %1137, i8* %1171, i8* %1206) #12
  br i1 %1427, label %1543, label %1549

1543:                                             ; preds = %1542
  %1544 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %24, i64 0, i32 1, i32 0
  %1545 = load i32*, i32** %1544, align 8
  %1546 = icmp eq i32* %1545, null
  br i1 %1546, label %1549, label %1547

1547:                                             ; preds = %1543
  %1548 = bitcast i32* %1545 to i8*
  call void @_ZdaPv(i8* %1548) #11
  br label %1549

1549:                                             ; preds = %1542, %1543, %1547
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1172) #12
  br i1 %1317, label %1550, label %1556

1550:                                             ; preds = %1549
  %1551 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %23, i64 0, i32 1, i32 0
  %1552 = load i32*, i32** %1551, align 8
  %1553 = icmp eq i32* %1552, null
  br i1 %1553, label %1556, label %1554

1554:                                             ; preds = %1550
  %1555 = bitcast i32* %1552 to i8*
  call void @_ZdaPv(i8* %1555) #11
  br label %1556

1556:                                             ; preds = %1549, %1550, %1554
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1138) #12
  br i1 %1207, label %1557, label %1563

1557:                                             ; preds = %1556
  %1558 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %22, i64 0, i32 1, i32 0
  %1559 = load i32*, i32** %1558, align 8
  %1560 = icmp eq i32* %1559, null
  br i1 %1560, label %1563, label %1561

1561:                                             ; preds = %1557
  %1562 = bitcast i32* %1559 to i8*
  call void @_ZdaPv(i8* %1562) #11
  br label %1563

1563:                                             ; preds = %1561, %1557, %1556, %1101, %1097, %1093, %855, %851, %850, %395, %391, %387
  %1564 = phi i8* [ %153, %387 ], [ %153, %391 ], [ %153, %395 ], [ %398, %850 ], [ %398, %851 ], [ %398, %855 ], [ %859, %1093 ], [ %859, %1097 ], [ %859, %1101 ], [ %1104, %1556 ], [ %1104, %1557 ], [ %1104, %1561 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1564) #12
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %31) #12
  br label %2147

1565:                                             ; preds = %7
  %1566 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 0
  %1567 = load i32, i32* %1566, align 4
  %1568 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 1
  %1569 = load i32, i32* %1568, align 4
  %1570 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 2
  %1571 = load i32, i32* %1570, align 4
  %1572 = getelementptr inbounds %"struct.tflite::ops::builtin::add::OpData", %"struct.tflite::ops::builtin::add::OpData"* %3, i64 0, i32 3
  %1573 = load i32, i32* %1572, align 4
  %1574 = bitcast %"class.tflite::RuntimeShape"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1574) #12
  %1575 = icmp eq %struct.TfLiteTensor* %4, null
  br i1 %1575, label %1576, label %1578

1576:                                             ; preds = %1565
  %1577 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %25, i64 0, i32 0
  store i32 0, i32* %1577, align 8, !alias.scope !616
  br label %1606

1578:                                             ; preds = %1565
  %1579 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 2
  %1580 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1579, align 8, !noalias !616
  %1581 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1580, i64 0, i32 0
  %1582 = load i32, i32* %1581, align 4, !noalias !616
  %1583 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1580, i64 0, i32 1, i64 0
  %1584 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %25, i64 0, i32 0
  store i32 %1582, i32* %1584, align 8, !alias.scope !616
  %1585 = icmp sgt i32 %1582, 5
  br i1 %1585, label %1586, label %1593

1586:                                             ; preds = %1578
  %1587 = sext i32 %1582 to i64
  %1588 = shl nsw i64 %1587, 2
  %1589 = tail call i8* @_Znam(i64 %1588) #11, !noalias !616
  %1590 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %25, i64 0, i32 1, i32 0
  %1591 = bitcast i32** %1590 to i8**
  store i8* %1589, i8** %1591, align 8, !alias.scope !616
  %1592 = bitcast i8* %1589 to i32*
  br label %1598

1593:                                             ; preds = %1578
  %1594 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %25, i64 0, i32 1
  %1595 = bitcast %union.anon* %1594 to i32*
  %1596 = sext i32 %1582 to i64
  %1597 = shl nsw i64 %1596, 2
  br label %1598

1598:                                             ; preds = %1593, %1586
  %1599 = phi i64 [ %1588, %1586 ], [ %1597, %1593 ]
  %1600 = phi i32* [ %1592, %1586 ], [ %1595, %1593 ]
  %1601 = bitcast i32* %1600 to i8*
  %1602 = bitcast i32* %1583 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1601, i8* align 4 %1602, i64 %1599, i1 false) #12
  %1603 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %4, i64 0, i32 1
  %1604 = bitcast %union.TfLitePtrUnion* %1603 to i16**
  %1605 = load i16*, i16** %1604, align 8
  br label %1606

1606:                                             ; preds = %1576, %1598
  %1607 = phi i32 [ %1582, %1598 ], [ 0, %1576 ]
  %1608 = phi i16* [ %1605, %1598 ], [ null, %1576 ]
  %1609 = bitcast %"class.tflite::RuntimeShape"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1609) #12
  %1610 = icmp eq %struct.TfLiteTensor* %5, null
  br i1 %1610, label %1611, label %1613

1611:                                             ; preds = %1606
  %1612 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %26, i64 0, i32 0
  store i32 0, i32* %1612, align 8, !alias.scope !619
  br label %1641

1613:                                             ; preds = %1606
  %1614 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 2
  %1615 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1614, align 8, !noalias !619
  %1616 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1615, i64 0, i32 0
  %1617 = load i32, i32* %1616, align 4, !noalias !619
  %1618 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1615, i64 0, i32 1, i64 0
  %1619 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %26, i64 0, i32 0
  store i32 %1617, i32* %1619, align 8, !alias.scope !619
  %1620 = icmp sgt i32 %1617, 5
  br i1 %1620, label %1621, label %1628

1621:                                             ; preds = %1613
  %1622 = sext i32 %1617 to i64
  %1623 = shl nsw i64 %1622, 2
  %1624 = tail call i8* @_Znam(i64 %1623) #11, !noalias !619
  %1625 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %26, i64 0, i32 1, i32 0
  %1626 = bitcast i32** %1625 to i8**
  store i8* %1624, i8** %1626, align 8, !alias.scope !619
  %1627 = bitcast i8* %1624 to i32*
  br label %1633

1628:                                             ; preds = %1613
  %1629 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %26, i64 0, i32 1
  %1630 = bitcast %union.anon* %1629 to i32*
  %1631 = sext i32 %1617 to i64
  %1632 = shl nsw i64 %1631, 2
  br label %1633

1633:                                             ; preds = %1628, %1621
  %1634 = phi i64 [ %1623, %1621 ], [ %1632, %1628 ]
  %1635 = phi i32* [ %1627, %1621 ], [ %1630, %1628 ]
  %1636 = bitcast i32* %1635 to i8*
  %1637 = bitcast i32* %1618 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1636, i8* align 4 %1637, i64 %1634, i1 false) #12
  %1638 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %5, i64 0, i32 1
  %1639 = bitcast %union.TfLitePtrUnion* %1638 to i16**
  %1640 = load i16*, i16** %1639, align 8
  br label %1641

1641:                                             ; preds = %1611, %1633
  %1642 = phi i32 [ %1617, %1633 ], [ 0, %1611 ]
  %1643 = phi i16* [ %1640, %1633 ], [ null, %1611 ]
  %1644 = bitcast %"class.tflite::RuntimeShape"* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1644) #12
  %1645 = icmp eq %struct.TfLiteTensor* %6, null
  br i1 %1645, label %1646, label %1648

1646:                                             ; preds = %1641
  %1647 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %27, i64 0, i32 0
  store i32 0, i32* %1647, align 8, !alias.scope !622
  br label %1677

1648:                                             ; preds = %1641
  %1649 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 2
  %1650 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %1649, align 8, !noalias !622
  %1651 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1650, i64 0, i32 0
  %1652 = load i32, i32* %1651, align 4, !noalias !622
  %1653 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %1650, i64 0, i32 1, i64 0
  %1654 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %27, i64 0, i32 0
  store i32 %1652, i32* %1654, align 8, !alias.scope !622
  %1655 = icmp sgt i32 %1652, 5
  br i1 %1655, label %1656, label %1663

1656:                                             ; preds = %1648
  %1657 = sext i32 %1652 to i64
  %1658 = shl nsw i64 %1657, 2
  %1659 = tail call i8* @_Znam(i64 %1658) #11, !noalias !622
  %1660 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %27, i64 0, i32 1, i32 0
  %1661 = bitcast i32** %1660 to i8**
  store i8* %1659, i8** %1661, align 8, !alias.scope !622
  %1662 = bitcast i8* %1659 to i32*
  br label %1668

1663:                                             ; preds = %1648
  %1664 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %27, i64 0, i32 1
  %1665 = bitcast %union.anon* %1664 to i32*
  %1666 = sext i32 %1652 to i64
  %1667 = shl nsw i64 %1666, 2
  br label %1668

1668:                                             ; preds = %1663, %1656
  %1669 = phi i64 [ %1658, %1656 ], [ %1667, %1663 ]
  %1670 = phi i32* [ %1662, %1656 ], [ %1665, %1663 ]
  %1671 = bitcast i32* %1670 to i8*
  %1672 = bitcast i32* %1653 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1671, i8* align 4 %1672, i64 %1669, i1 false) #12
  %1673 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %6, i64 0, i32 1
  %1674 = bitcast %union.TfLitePtrUnion* %1673 to i16**
  %1675 = load i16*, i16** %1674, align 8
  %1676 = bitcast i16* %1675 to i8*
  br label %1677

1677:                                             ; preds = %1646, %1668
  %1678 = phi i32 [ %1652, %1668 ], [ 0, %1646 ]
  %1679 = phi i8* [ %1676, %1668 ], [ null, %1646 ]
  %1680 = phi i16* [ %1675, %1668 ], [ null, %1646 ]
  %1681 = icmp sgt i32 %1607, 5
  %1682 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %25, i64 0, i32 1
  br i1 %1681, label %1683, label %1686

1683:                                             ; preds = %1677
  %1684 = getelementptr inbounds %union.anon, %union.anon* %1682, i64 0, i32 0
  %1685 = load i32*, i32** %1684, align 8
  br label %1689

1686:                                             ; preds = %1677
  %1687 = bitcast %union.anon* %1682 to i32*
  %1688 = icmp sgt i32 %1607, 0
  br i1 %1688, label %1689, label %1789

1689:                                             ; preds = %1686, %1683
  %1690 = phi i32* [ %1685, %1683 ], [ %1687, %1686 ]
  %1691 = zext i32 %1607 to i64
  %1692 = icmp ult i32 %1607, 8
  br i1 %1692, label %1778, label %1693

1693:                                             ; preds = %1689
  %1694 = and i64 %1691, 4294967288
  %1695 = add nsw i64 %1694, -8
  %1696 = lshr exact i64 %1695, 3
  %1697 = add nuw nsw i64 %1696, 1
  %1698 = and i64 %1697, 3
  %1699 = icmp ult i64 %1695, 24
  br i1 %1699, label %1745, label %1700

1700:                                             ; preds = %1693
  %1701 = sub nsw i64 %1697, %1698
  br label %1702

1702:                                             ; preds = %1702, %1700
  %1703 = phi i64 [ 0, %1700 ], [ %1742, %1702 ]
  %1704 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1700 ], [ %1740, %1702 ]
  %1705 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1700 ], [ %1741, %1702 ]
  %1706 = phi i64 [ %1701, %1700 ], [ %1743, %1702 ]
  %1707 = getelementptr inbounds i32, i32* %1690, i64 %1703
  %1708 = bitcast i32* %1707 to <4 x i32>*
  %1709 = load <4 x i32>, <4 x i32>* %1708, align 4
  %1710 = getelementptr inbounds i32, i32* %1707, i64 4
  %1711 = bitcast i32* %1710 to <4 x i32>*
  %1712 = load <4 x i32>, <4 x i32>* %1711, align 4
  %1713 = mul nsw <4 x i32> %1709, %1704
  %1714 = mul nsw <4 x i32> %1712, %1705
  %1715 = or i64 %1703, 8
  %1716 = getelementptr inbounds i32, i32* %1690, i64 %1715
  %1717 = bitcast i32* %1716 to <4 x i32>*
  %1718 = load <4 x i32>, <4 x i32>* %1717, align 4
  %1719 = getelementptr inbounds i32, i32* %1716, i64 4
  %1720 = bitcast i32* %1719 to <4 x i32>*
  %1721 = load <4 x i32>, <4 x i32>* %1720, align 4
  %1722 = mul nsw <4 x i32> %1718, %1713
  %1723 = mul nsw <4 x i32> %1721, %1714
  %1724 = or i64 %1703, 16
  %1725 = getelementptr inbounds i32, i32* %1690, i64 %1724
  %1726 = bitcast i32* %1725 to <4 x i32>*
  %1727 = load <4 x i32>, <4 x i32>* %1726, align 4
  %1728 = getelementptr inbounds i32, i32* %1725, i64 4
  %1729 = bitcast i32* %1728 to <4 x i32>*
  %1730 = load <4 x i32>, <4 x i32>* %1729, align 4
  %1731 = mul nsw <4 x i32> %1727, %1722
  %1732 = mul nsw <4 x i32> %1730, %1723
  %1733 = or i64 %1703, 24
  %1734 = getelementptr inbounds i32, i32* %1690, i64 %1733
  %1735 = bitcast i32* %1734 to <4 x i32>*
  %1736 = load <4 x i32>, <4 x i32>* %1735, align 4
  %1737 = getelementptr inbounds i32, i32* %1734, i64 4
  %1738 = bitcast i32* %1737 to <4 x i32>*
  %1739 = load <4 x i32>, <4 x i32>* %1738, align 4
  %1740 = mul nsw <4 x i32> %1736, %1731
  %1741 = mul nsw <4 x i32> %1739, %1732
  %1742 = add i64 %1703, 32
  %1743 = add i64 %1706, -4
  %1744 = icmp eq i64 %1743, 0
  br i1 %1744, label %1745, label %1702, !llvm.loop !625

1745:                                             ; preds = %1702, %1693
  %1746 = phi <4 x i32> [ undef, %1693 ], [ %1740, %1702 ]
  %1747 = phi <4 x i32> [ undef, %1693 ], [ %1741, %1702 ]
  %1748 = phi i64 [ 0, %1693 ], [ %1742, %1702 ]
  %1749 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1693 ], [ %1740, %1702 ]
  %1750 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1693 ], [ %1741, %1702 ]
  %1751 = icmp eq i64 %1698, 0
  br i1 %1751, label %1768, label %1752

1752:                                             ; preds = %1745, %1752
  %1753 = phi i64 [ %1765, %1752 ], [ %1748, %1745 ]
  %1754 = phi <4 x i32> [ %1763, %1752 ], [ %1749, %1745 ]
  %1755 = phi <4 x i32> [ %1764, %1752 ], [ %1750, %1745 ]
  %1756 = phi i64 [ %1766, %1752 ], [ %1698, %1745 ]
  %1757 = getelementptr inbounds i32, i32* %1690, i64 %1753
  %1758 = bitcast i32* %1757 to <4 x i32>*
  %1759 = load <4 x i32>, <4 x i32>* %1758, align 4
  %1760 = getelementptr inbounds i32, i32* %1757, i64 4
  %1761 = bitcast i32* %1760 to <4 x i32>*
  %1762 = load <4 x i32>, <4 x i32>* %1761, align 4
  %1763 = mul nsw <4 x i32> %1759, %1754
  %1764 = mul nsw <4 x i32> %1762, %1755
  %1765 = add i64 %1753, 8
  %1766 = add i64 %1756, -1
  %1767 = icmp eq i64 %1766, 0
  br i1 %1767, label %1768, label %1752, !llvm.loop !626

1768:                                             ; preds = %1752, %1745
  %1769 = phi <4 x i32> [ %1746, %1745 ], [ %1763, %1752 ]
  %1770 = phi <4 x i32> [ %1747, %1745 ], [ %1764, %1752 ]
  %1771 = mul <4 x i32> %1770, %1769
  %1772 = shufflevector <4 x i32> %1771, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1773 = mul <4 x i32> %1771, %1772
  %1774 = shufflevector <4 x i32> %1773, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1775 = mul <4 x i32> %1773, %1774
  %1776 = extractelement <4 x i32> %1775, i32 0
  %1777 = icmp eq i64 %1694, %1691
  br i1 %1777, label %1789, label %1778

1778:                                             ; preds = %1768, %1689
  %1779 = phi i64 [ 0, %1689 ], [ %1694, %1768 ]
  %1780 = phi i32 [ 1, %1689 ], [ %1776, %1768 ]
  br label %1781

1781:                                             ; preds = %1778, %1781
  %1782 = phi i64 [ %1787, %1781 ], [ %1779, %1778 ]
  %1783 = phi i32 [ %1786, %1781 ], [ %1780, %1778 ]
  %1784 = getelementptr inbounds i32, i32* %1690, i64 %1782
  %1785 = load i32, i32* %1784, align 4
  %1786 = mul nsw i32 %1785, %1783
  %1787 = add nuw nsw i64 %1782, 1
  %1788 = icmp eq i64 %1787, %1691
  br i1 %1788, label %1789, label %1781, !llvm.loop !627

1789:                                             ; preds = %1781, %1768, %1686
  %1790 = phi i32 [ 1, %1686 ], [ %1776, %1768 ], [ %1786, %1781 ]
  %1791 = icmp sgt i32 %1642, 5
  %1792 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %26, i64 0, i32 1
  br i1 %1791, label %1793, label %1796

1793:                                             ; preds = %1789
  %1794 = getelementptr inbounds %union.anon, %union.anon* %1792, i64 0, i32 0
  %1795 = load i32*, i32** %1794, align 8
  br label %1799

1796:                                             ; preds = %1789
  %1797 = bitcast %union.anon* %1792 to i32*
  %1798 = icmp sgt i32 %1642, 0
  br i1 %1798, label %1799, label %1899

1799:                                             ; preds = %1796, %1793
  %1800 = phi i32* [ %1795, %1793 ], [ %1797, %1796 ]
  %1801 = zext i32 %1642 to i64
  %1802 = icmp ult i32 %1642, 8
  br i1 %1802, label %1888, label %1803

1803:                                             ; preds = %1799
  %1804 = and i64 %1801, 4294967288
  %1805 = add nsw i64 %1804, -8
  %1806 = lshr exact i64 %1805, 3
  %1807 = add nuw nsw i64 %1806, 1
  %1808 = and i64 %1807, 3
  %1809 = icmp ult i64 %1805, 24
  br i1 %1809, label %1855, label %1810

1810:                                             ; preds = %1803
  %1811 = sub nsw i64 %1807, %1808
  br label %1812

1812:                                             ; preds = %1812, %1810
  %1813 = phi i64 [ 0, %1810 ], [ %1852, %1812 ]
  %1814 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1810 ], [ %1850, %1812 ]
  %1815 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1810 ], [ %1851, %1812 ]
  %1816 = phi i64 [ %1811, %1810 ], [ %1853, %1812 ]
  %1817 = getelementptr inbounds i32, i32* %1800, i64 %1813
  %1818 = bitcast i32* %1817 to <4 x i32>*
  %1819 = load <4 x i32>, <4 x i32>* %1818, align 4
  %1820 = getelementptr inbounds i32, i32* %1817, i64 4
  %1821 = bitcast i32* %1820 to <4 x i32>*
  %1822 = load <4 x i32>, <4 x i32>* %1821, align 4
  %1823 = mul nsw <4 x i32> %1819, %1814
  %1824 = mul nsw <4 x i32> %1822, %1815
  %1825 = or i64 %1813, 8
  %1826 = getelementptr inbounds i32, i32* %1800, i64 %1825
  %1827 = bitcast i32* %1826 to <4 x i32>*
  %1828 = load <4 x i32>, <4 x i32>* %1827, align 4
  %1829 = getelementptr inbounds i32, i32* %1826, i64 4
  %1830 = bitcast i32* %1829 to <4 x i32>*
  %1831 = load <4 x i32>, <4 x i32>* %1830, align 4
  %1832 = mul nsw <4 x i32> %1828, %1823
  %1833 = mul nsw <4 x i32> %1831, %1824
  %1834 = or i64 %1813, 16
  %1835 = getelementptr inbounds i32, i32* %1800, i64 %1834
  %1836 = bitcast i32* %1835 to <4 x i32>*
  %1837 = load <4 x i32>, <4 x i32>* %1836, align 4
  %1838 = getelementptr inbounds i32, i32* %1835, i64 4
  %1839 = bitcast i32* %1838 to <4 x i32>*
  %1840 = load <4 x i32>, <4 x i32>* %1839, align 4
  %1841 = mul nsw <4 x i32> %1837, %1832
  %1842 = mul nsw <4 x i32> %1840, %1833
  %1843 = or i64 %1813, 24
  %1844 = getelementptr inbounds i32, i32* %1800, i64 %1843
  %1845 = bitcast i32* %1844 to <4 x i32>*
  %1846 = load <4 x i32>, <4 x i32>* %1845, align 4
  %1847 = getelementptr inbounds i32, i32* %1844, i64 4
  %1848 = bitcast i32* %1847 to <4 x i32>*
  %1849 = load <4 x i32>, <4 x i32>* %1848, align 4
  %1850 = mul nsw <4 x i32> %1846, %1841
  %1851 = mul nsw <4 x i32> %1849, %1842
  %1852 = add i64 %1813, 32
  %1853 = add i64 %1816, -4
  %1854 = icmp eq i64 %1853, 0
  br i1 %1854, label %1855, label %1812, !llvm.loop !628

1855:                                             ; preds = %1812, %1803
  %1856 = phi <4 x i32> [ undef, %1803 ], [ %1850, %1812 ]
  %1857 = phi <4 x i32> [ undef, %1803 ], [ %1851, %1812 ]
  %1858 = phi i64 [ 0, %1803 ], [ %1852, %1812 ]
  %1859 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1803 ], [ %1850, %1812 ]
  %1860 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1803 ], [ %1851, %1812 ]
  %1861 = icmp eq i64 %1808, 0
  br i1 %1861, label %1878, label %1862

1862:                                             ; preds = %1855, %1862
  %1863 = phi i64 [ %1875, %1862 ], [ %1858, %1855 ]
  %1864 = phi <4 x i32> [ %1873, %1862 ], [ %1859, %1855 ]
  %1865 = phi <4 x i32> [ %1874, %1862 ], [ %1860, %1855 ]
  %1866 = phi i64 [ %1876, %1862 ], [ %1808, %1855 ]
  %1867 = getelementptr inbounds i32, i32* %1800, i64 %1863
  %1868 = bitcast i32* %1867 to <4 x i32>*
  %1869 = load <4 x i32>, <4 x i32>* %1868, align 4
  %1870 = getelementptr inbounds i32, i32* %1867, i64 4
  %1871 = bitcast i32* %1870 to <4 x i32>*
  %1872 = load <4 x i32>, <4 x i32>* %1871, align 4
  %1873 = mul nsw <4 x i32> %1869, %1864
  %1874 = mul nsw <4 x i32> %1872, %1865
  %1875 = add i64 %1863, 8
  %1876 = add i64 %1866, -1
  %1877 = icmp eq i64 %1876, 0
  br i1 %1877, label %1878, label %1862, !llvm.loop !629

1878:                                             ; preds = %1862, %1855
  %1879 = phi <4 x i32> [ %1856, %1855 ], [ %1873, %1862 ]
  %1880 = phi <4 x i32> [ %1857, %1855 ], [ %1874, %1862 ]
  %1881 = mul <4 x i32> %1880, %1879
  %1882 = shufflevector <4 x i32> %1881, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1883 = mul <4 x i32> %1881, %1882
  %1884 = shufflevector <4 x i32> %1883, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1885 = mul <4 x i32> %1883, %1884
  %1886 = extractelement <4 x i32> %1885, i32 0
  %1887 = icmp eq i64 %1804, %1801
  br i1 %1887, label %1899, label %1888

1888:                                             ; preds = %1878, %1799
  %1889 = phi i64 [ 0, %1799 ], [ %1804, %1878 ]
  %1890 = phi i32 [ 1, %1799 ], [ %1886, %1878 ]
  br label %1891

1891:                                             ; preds = %1888, %1891
  %1892 = phi i64 [ %1897, %1891 ], [ %1889, %1888 ]
  %1893 = phi i32 [ %1896, %1891 ], [ %1890, %1888 ]
  %1894 = getelementptr inbounds i32, i32* %1800, i64 %1892
  %1895 = load i32, i32* %1894, align 4
  %1896 = mul nsw i32 %1895, %1893
  %1897 = add nuw nsw i64 %1892, 1
  %1898 = icmp eq i64 %1897, %1801
  br i1 %1898, label %1899, label %1891, !llvm.loop !630

1899:                                             ; preds = %1891, %1878, %1796
  %1900 = phi i32 [ 1, %1796 ], [ %1886, %1878 ], [ %1896, %1891 ]
  %1901 = icmp sgt i32 %1678, 5
  %1902 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %27, i64 0, i32 1
  br i1 %1901, label %1903, label %1906

1903:                                             ; preds = %1899
  %1904 = getelementptr inbounds %union.anon, %union.anon* %1902, i64 0, i32 0
  %1905 = load i32*, i32** %1904, align 8
  br label %1909

1906:                                             ; preds = %1899
  %1907 = bitcast %union.anon* %1902 to i32*
  %1908 = icmp sgt i32 %1678, 0
  br i1 %1908, label %1909, label %2009

1909:                                             ; preds = %1906, %1903
  %1910 = phi i32* [ %1905, %1903 ], [ %1907, %1906 ]
  %1911 = zext i32 %1678 to i64
  %1912 = icmp ult i32 %1678, 8
  br i1 %1912, label %1998, label %1913

1913:                                             ; preds = %1909
  %1914 = and i64 %1911, 4294967288
  %1915 = add nsw i64 %1914, -8
  %1916 = lshr exact i64 %1915, 3
  %1917 = add nuw nsw i64 %1916, 1
  %1918 = and i64 %1917, 3
  %1919 = icmp ult i64 %1915, 24
  br i1 %1919, label %1965, label %1920

1920:                                             ; preds = %1913
  %1921 = sub nsw i64 %1917, %1918
  br label %1922

1922:                                             ; preds = %1922, %1920
  %1923 = phi i64 [ 0, %1920 ], [ %1962, %1922 ]
  %1924 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1920 ], [ %1960, %1922 ]
  %1925 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1920 ], [ %1961, %1922 ]
  %1926 = phi i64 [ %1921, %1920 ], [ %1963, %1922 ]
  %1927 = getelementptr inbounds i32, i32* %1910, i64 %1923
  %1928 = bitcast i32* %1927 to <4 x i32>*
  %1929 = load <4 x i32>, <4 x i32>* %1928, align 4
  %1930 = getelementptr inbounds i32, i32* %1927, i64 4
  %1931 = bitcast i32* %1930 to <4 x i32>*
  %1932 = load <4 x i32>, <4 x i32>* %1931, align 4
  %1933 = mul nsw <4 x i32> %1929, %1924
  %1934 = mul nsw <4 x i32> %1932, %1925
  %1935 = or i64 %1923, 8
  %1936 = getelementptr inbounds i32, i32* %1910, i64 %1935
  %1937 = bitcast i32* %1936 to <4 x i32>*
  %1938 = load <4 x i32>, <4 x i32>* %1937, align 4
  %1939 = getelementptr inbounds i32, i32* %1936, i64 4
  %1940 = bitcast i32* %1939 to <4 x i32>*
  %1941 = load <4 x i32>, <4 x i32>* %1940, align 4
  %1942 = mul nsw <4 x i32> %1938, %1933
  %1943 = mul nsw <4 x i32> %1941, %1934
  %1944 = or i64 %1923, 16
  %1945 = getelementptr inbounds i32, i32* %1910, i64 %1944
  %1946 = bitcast i32* %1945 to <4 x i32>*
  %1947 = load <4 x i32>, <4 x i32>* %1946, align 4
  %1948 = getelementptr inbounds i32, i32* %1945, i64 4
  %1949 = bitcast i32* %1948 to <4 x i32>*
  %1950 = load <4 x i32>, <4 x i32>* %1949, align 4
  %1951 = mul nsw <4 x i32> %1947, %1942
  %1952 = mul nsw <4 x i32> %1950, %1943
  %1953 = or i64 %1923, 24
  %1954 = getelementptr inbounds i32, i32* %1910, i64 %1953
  %1955 = bitcast i32* %1954 to <4 x i32>*
  %1956 = load <4 x i32>, <4 x i32>* %1955, align 4
  %1957 = getelementptr inbounds i32, i32* %1954, i64 4
  %1958 = bitcast i32* %1957 to <4 x i32>*
  %1959 = load <4 x i32>, <4 x i32>* %1958, align 4
  %1960 = mul nsw <4 x i32> %1956, %1951
  %1961 = mul nsw <4 x i32> %1959, %1952
  %1962 = add i64 %1923, 32
  %1963 = add i64 %1926, -4
  %1964 = icmp eq i64 %1963, 0
  br i1 %1964, label %1965, label %1922, !llvm.loop !631

1965:                                             ; preds = %1922, %1913
  %1966 = phi <4 x i32> [ undef, %1913 ], [ %1960, %1922 ]
  %1967 = phi <4 x i32> [ undef, %1913 ], [ %1961, %1922 ]
  %1968 = phi i64 [ 0, %1913 ], [ %1962, %1922 ]
  %1969 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1913 ], [ %1960, %1922 ]
  %1970 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %1913 ], [ %1961, %1922 ]
  %1971 = icmp eq i64 %1918, 0
  br i1 %1971, label %1988, label %1972

1972:                                             ; preds = %1965, %1972
  %1973 = phi i64 [ %1985, %1972 ], [ %1968, %1965 ]
  %1974 = phi <4 x i32> [ %1983, %1972 ], [ %1969, %1965 ]
  %1975 = phi <4 x i32> [ %1984, %1972 ], [ %1970, %1965 ]
  %1976 = phi i64 [ %1986, %1972 ], [ %1918, %1965 ]
  %1977 = getelementptr inbounds i32, i32* %1910, i64 %1973
  %1978 = bitcast i32* %1977 to <4 x i32>*
  %1979 = load <4 x i32>, <4 x i32>* %1978, align 4
  %1980 = getelementptr inbounds i32, i32* %1977, i64 4
  %1981 = bitcast i32* %1980 to <4 x i32>*
  %1982 = load <4 x i32>, <4 x i32>* %1981, align 4
  %1983 = mul nsw <4 x i32> %1979, %1974
  %1984 = mul nsw <4 x i32> %1982, %1975
  %1985 = add i64 %1973, 8
  %1986 = add i64 %1976, -1
  %1987 = icmp eq i64 %1986, 0
  br i1 %1987, label %1988, label %1972, !llvm.loop !632

1988:                                             ; preds = %1972, %1965
  %1989 = phi <4 x i32> [ %1966, %1965 ], [ %1983, %1972 ]
  %1990 = phi <4 x i32> [ %1967, %1965 ], [ %1984, %1972 ]
  %1991 = mul <4 x i32> %1990, %1989
  %1992 = shufflevector <4 x i32> %1991, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %1993 = mul <4 x i32> %1991, %1992
  %1994 = shufflevector <4 x i32> %1993, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %1995 = mul <4 x i32> %1993, %1994
  %1996 = extractelement <4 x i32> %1995, i32 0
  %1997 = icmp eq i64 %1914, %1911
  br i1 %1997, label %2009, label %1998

1998:                                             ; preds = %1988, %1909
  %1999 = phi i64 [ 0, %1909 ], [ %1914, %1988 ]
  %2000 = phi i32 [ 1, %1909 ], [ %1996, %1988 ]
  br label %2001

2001:                                             ; preds = %1998, %2001
  %2002 = phi i64 [ %2007, %2001 ], [ %1999, %1998 ]
  %2003 = phi i32 [ %2006, %2001 ], [ %2000, %1998 ]
  %2004 = getelementptr inbounds i32, i32* %1910, i64 %2002
  %2005 = load i32, i32* %2004, align 4
  %2006 = mul nsw i32 %2005, %2003
  %2007 = add nuw nsw i64 %2002, 1
  %2008 = icmp eq i64 %2007, %1911
  br i1 %2008, label %2009, label %2001, !llvm.loop !633

2009:                                             ; preds = %2001, %1988, %1906
  %2010 = phi i32 [ 1, %1906 ], [ %1996, %1988 ], [ %2006, %2001 ]
  %2011 = icmp eq i32 %1790, %1900
  br i1 %2011, label %2013, label %2012

2012:                                             ; preds = %2009
  tail call void @abort() #13
  unreachable

2013:                                             ; preds = %2009
  %2014 = icmp eq i32 %1790, %2010
  br i1 %2014, label %2016, label %2015

2015:                                             ; preds = %2013
  tail call void @abort() #13
  unreachable

2016:                                             ; preds = %2013
  %2017 = trunc i32 %1571 to i16
  %2018 = trunc i32 %1573 to i16
  %2019 = icmp eq i32 %1567, 0
  %2020 = select i1 %2019, i16* %1608, i16* %1643
  %2021 = select i1 %2019, i16* %1643, i16* %1608
  %2022 = select i1 %2019, i32 %1569, i32 %1567
  %2023 = sub nsw i32 0, %2022
  %2024 = icmp sgt i32 %1790, 0
  br i1 %2024, label %2025, label %2125

2025:                                             ; preds = %2016
  %2026 = zext i32 %2023 to i64
  %2027 = shl nsw i64 -1, %2026
  %2028 = trunc i64 %2027 to i16
  %2029 = xor i16 %2028, -1
  %2030 = ashr i16 %2029, 1
  %2031 = zext i32 %1790 to i64
  %2032 = icmp ult i32 %1790, 8
  br i1 %2032, label %2093, label %2033

2033:                                             ; preds = %2025
  %2034 = getelementptr i16, i16* %1680, i64 %2031
  %2035 = getelementptr i16, i16* %2020, i64 %2031
  %2036 = bitcast i16* %2035 to i8*
  %2037 = getelementptr i16, i16* %2021, i64 %2031
  %2038 = bitcast i16* %2037 to i8*
  %2039 = icmp ult i8* %1679, %2036
  %2040 = icmp ult i16* %2020, %2034
  %2041 = and i1 %2039, %2040
  %2042 = icmp ult i8* %1679, %2038
  %2043 = icmp ult i16* %2021, %2034
  %2044 = and i1 %2042, %2043
  %2045 = or i1 %2041, %2044
  br i1 %2045, label %2093, label %2046

2046:                                             ; preds = %2033
  %2047 = and i64 %2031, 4294967288
  %2048 = insertelement <8 x i16> undef, i16 %2029, i32 0
  %2049 = shufflevector <8 x i16> %2048, <8 x i16> undef, <8 x i32> zeroinitializer
  %2050 = insertelement <8 x i16> undef, i16 %2030, i32 0
  %2051 = shufflevector <8 x i16> %2050, <8 x i16> undef, <8 x i32> zeroinitializer
  %2052 = insertelement <8 x i32> undef, i32 %2023, i32 0
  %2053 = shufflevector <8 x i32> %2052, <8 x i32> undef, <8 x i32> zeroinitializer
  %2054 = insertelement <8 x i16> undef, i16 %2017, i32 0
  %2055 = shufflevector <8 x i16> %2054, <8 x i16> undef, <8 x i32> zeroinitializer
  %2056 = insertelement <8 x i16> undef, i16 %2018, i32 0
  %2057 = shufflevector <8 x i16> %2056, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %2058

2058:                                             ; preds = %2058, %2046
  %2059 = phi i64 [ 0, %2046 ], [ %2089, %2058 ]
  %2060 = getelementptr inbounds i16, i16* %2020, i64 %2059
  %2061 = bitcast i16* %2060 to <8 x i16>*
  %2062 = load <8 x i16>, <8 x i16>* %2061, align 2, !alias.scope !634
  %2063 = getelementptr inbounds i16, i16* %2021, i64 %2059
  %2064 = bitcast i16* %2063 to <8 x i16>*
  %2065 = load <8 x i16>, <8 x i16>* %2064, align 2, !alias.scope !637
  %2066 = and <8 x i16> %2065, %2049
  %2067 = lshr <8 x i16> %2065, <i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15, i16 15>
  %2068 = add nsw <8 x i16> %2067, %2051
  %2069 = sext <8 x i16> %2065 to <8 x i32>
  %2070 = ashr <8 x i32> %2069, %2053
  %2071 = icmp sgt <8 x i16> %2066, %2068
  %2072 = zext <8 x i1> %2071 to <8 x i32>
  %2073 = add nsw <8 x i32> %2070, %2072
  %2074 = shl <8 x i32> %2073, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %2075 = ashr exact <8 x i32> %2074, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %2076 = sext <8 x i16> %2062 to <8 x i32>
  %2077 = add nsw <8 x i32> %2075, %2076
  %2078 = icmp sgt <8 x i32> %2077, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %2079 = select <8 x i1> %2078, <8 x i32> %2077, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %2080 = icmp slt <8 x i32> %2079, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %2081 = select <8 x i1> %2080, <8 x i32> %2079, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %2082 = trunc <8 x i32> %2081 to <8 x i16>
  %2083 = icmp slt <8 x i16> %2055, %2082
  %2084 = select <8 x i1> %2083, <8 x i16> %2082, <8 x i16> %2055
  %2085 = icmp slt <8 x i16> %2084, %2057
  %2086 = select <8 x i1> %2085, <8 x i16> %2084, <8 x i16> %2057
  %2087 = getelementptr inbounds i16, i16* %1680, i64 %2059
  %2088 = bitcast i16* %2087 to <8 x i16>*
  store <8 x i16> %2086, <8 x i16>* %2088, align 2, !alias.scope !639, !noalias !641
  %2089 = add i64 %2059, 8
  %2090 = icmp eq i64 %2089, %2047
  br i1 %2090, label %2091, label %2058, !llvm.loop !642

2091:                                             ; preds = %2058
  %2092 = icmp eq i64 %2047, %2031
  br i1 %2092, label %2125, label %2093

2093:                                             ; preds = %2091, %2033, %2025
  %2094 = phi i64 [ 0, %2033 ], [ 0, %2025 ], [ %2047, %2091 ]
  br label %2095

2095:                                             ; preds = %2093, %2095
  %2096 = phi i64 [ %2123, %2095 ], [ %2094, %2093 ]
  %2097 = getelementptr inbounds i16, i16* %2020, i64 %2096
  %2098 = load i16, i16* %2097, align 2
  %2099 = getelementptr inbounds i16, i16* %2021, i64 %2096
  %2100 = load i16, i16* %2099, align 2
  %2101 = and i16 %2100, %2029
  %2102 = lshr i16 %2100, 15
  %2103 = add nsw i16 %2102, %2030
  %2104 = sext i16 %2100 to i32
  %2105 = ashr i32 %2104, %2023
  %2106 = icmp sgt i16 %2101, %2103
  %2107 = zext i1 %2106 to i32
  %2108 = add nsw i32 %2105, %2107
  %2109 = shl i32 %2108, 16
  %2110 = ashr exact i32 %2109, 16
  %2111 = sext i16 %2098 to i32
  %2112 = add nsw i32 %2110, %2111
  %2113 = icmp sgt i32 %2112, -32768
  %2114 = select i1 %2113, i32 %2112, i32 -32768
  %2115 = icmp slt i32 %2114, 32767
  %2116 = select i1 %2115, i32 %2114, i32 32767
  %2117 = trunc i32 %2116 to i16
  %2118 = icmp slt i16 %2017, %2117
  %2119 = select i1 %2118, i16 %2117, i16 %2017
  %2120 = icmp slt i16 %2119, %2018
  %2121 = select i1 %2120, i16 %2119, i16 %2018
  %2122 = getelementptr inbounds i16, i16* %1680, i64 %2096
  store i16 %2121, i16* %2122, align 2
  %2123 = add nuw nsw i64 %2096, 1
  %2124 = icmp eq i64 %2123, %2031
  br i1 %2124, label %2125, label %2095, !llvm.loop !643

2125:                                             ; preds = %2095, %2091, %2016
  br i1 %1901, label %2126, label %2132

2126:                                             ; preds = %2125
  %2127 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %27, i64 0, i32 1, i32 0
  %2128 = load i32*, i32** %2127, align 8
  %2129 = icmp eq i32* %2128, null
  br i1 %2129, label %2132, label %2130

2130:                                             ; preds = %2126
  %2131 = bitcast i32* %2128 to i8*
  tail call void @_ZdaPv(i8* %2131) #11
  br label %2132

2132:                                             ; preds = %2125, %2126, %2130
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1644) #12
  br i1 %1791, label %2133, label %2139

2133:                                             ; preds = %2132
  %2134 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %26, i64 0, i32 1, i32 0
  %2135 = load i32*, i32** %2134, align 8
  %2136 = icmp eq i32* %2135, null
  br i1 %2136, label %2139, label %2137

2137:                                             ; preds = %2133
  %2138 = bitcast i32* %2135 to i8*
  tail call void @_ZdaPv(i8* %2138) #11
  br label %2139

2139:                                             ; preds = %2132, %2133, %2137
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1609) #12
  br i1 %1681, label %2140, label %2146

2140:                                             ; preds = %2139
  %2141 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %25, i64 0, i32 1, i32 0
  %2142 = load i32*, i32** %2141, align 8
  %2143 = icmp eq i32* %2142, null
  br i1 %2143, label %2146, label %2144

2144:                                             ; preds = %2140
  %2145 = bitcast i32* %2142 to i8*
  tail call void @_ZdaPv(i8* %2145) #11
  br label %2146

2146:                                             ; preds = %2139, %2140, %2144
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1574) #12
  br label %2147

2147:                                             ; preds = %7, %2146, %1563
  ret i32 0
}

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #10

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind readonly }
attributes #11 = { builtin nounwind }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!4 = distinct !{!4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!7 = distinct !{!7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!10 = distinct !{!10, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!13 = distinct !{!13, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!16 = distinct !{!16, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!19 = distinct !{!19, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!22 = distinct !{!22, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!25 = distinct !{!25, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!26 = distinct !{!26, !27}
!27 = !{!"llvm.loop.isvectorized", i32 1}
!28 = distinct !{!28, !29}
!29 = !{!"llvm.loop.unroll.disable"}
!30 = distinct !{!30, !31, !27}
!31 = !{!"llvm.loop.unroll.runtime.disable"}
!32 = distinct !{!32, !27}
!33 = distinct !{!33, !29}
!34 = distinct !{!34, !31, !27}
!35 = distinct !{!35, !27}
!36 = distinct !{!36, !29}
!37 = distinct !{!37, !31, !27}
!38 = !{!39}
!39 = distinct !{!39, !40}
!40 = distinct !{!40, !"LVerDomain"}
!41 = !{!42}
!42 = distinct !{!42, !40}
!43 = !{!44}
!44 = distinct !{!44, !40}
!45 = !{!46}
!46 = distinct !{!46, !40}
!47 = !{!48}
!48 = distinct !{!48, !40}
!49 = !{!39, !42, !44, !46}
!50 = distinct !{!50, !27}
!51 = distinct !{!51, !27}
!52 = !{!53}
!53 = distinct !{!53, !54, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!54 = distinct !{!54, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!55 = !{!56}
!56 = distinct !{!56, !57, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!57 = distinct !{!57, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!58 = !{!59}
!59 = distinct !{!59, !60, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!60 = distinct !{!60, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!61 = !{!62}
!62 = distinct !{!62, !63, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!63 = distinct !{!63, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!64 = !{!65}
!65 = distinct !{!65, !66, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!66 = distinct !{!66, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!67 = !{!68}
!68 = distinct !{!68, !69, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!69 = distinct !{!69, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!70 = distinct !{!70, !27}
!71 = distinct !{!71, !29}
!72 = distinct !{!72, !31, !27}
!73 = distinct !{!73, !27}
!74 = distinct !{!74, !29}
!75 = distinct !{!75, !31, !27}
!76 = distinct !{!76, !27}
!77 = distinct !{!77, !29}
!78 = distinct !{!78, !31, !27}
!79 = !{!80}
!80 = distinct !{!80, !81}
!81 = distinct !{!81, !"LVerDomain"}
!82 = !{!83}
!83 = distinct !{!83, !81}
!84 = !{!85}
!85 = distinct !{!85, !81}
!86 = !{!87}
!87 = distinct !{!87, !81}
!88 = !{!89}
!89 = distinct !{!89, !81}
!90 = !{!80, !83, !85, !87}
!91 = distinct !{!91, !27}
!92 = distinct !{!92, !27}
!93 = !{!94}
!94 = distinct !{!94, !95, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!95 = distinct !{!95, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!96 = !{!97}
!97 = distinct !{!97, !98, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!98 = distinct !{!98, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!99 = !{!100}
!100 = distinct !{!100, !101, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!101 = distinct !{!101, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!102 = !{!103}
!103 = distinct !{!103, !104, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!104 = distinct !{!104, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!105 = !{!106}
!106 = distinct !{!106, !107, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!107 = distinct !{!107, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!108 = !{!109}
!109 = distinct !{!109, !110, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!110 = distinct !{!110, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!111 = !{!112}
!112 = distinct !{!112, !113, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!113 = distinct !{!113, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!114 = !{!115}
!115 = distinct !{!115, !116, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!116 = distinct !{!116, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!117 = distinct !{!117, !27}
!118 = distinct !{!118, !29}
!119 = distinct !{!119, !31, !27}
!120 = distinct !{!120, !27}
!121 = distinct !{!121, !29}
!122 = distinct !{!122, !31, !27}
!123 = distinct !{!123, !27}
!124 = distinct !{!124, !29}
!125 = distinct !{!125, !31, !27}
!126 = !{!127}
!127 = distinct !{!127, !128, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!128 = distinct !{!128, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!129 = !{!130}
!130 = distinct !{!130, !131, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!131 = distinct !{!131, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!132 = !{!133}
!133 = distinct !{!133, !134, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!134 = distinct !{!134, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!135 = !{!136}
!136 = distinct !{!136, !137, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!137 = distinct !{!137, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!138 = !{!139}
!139 = distinct !{!139, !140, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!140 = distinct !{!140, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!141 = !{!142}
!142 = distinct !{!142, !143, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!143 = distinct !{!143, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!144 = distinct !{!144, !27}
!145 = distinct !{!145, !29}
!146 = distinct !{!146, !31, !27}
!147 = distinct !{!147, !27}
!148 = distinct !{!148, !29}
!149 = distinct !{!149, !31, !27}
!150 = distinct !{!150, !27}
!151 = distinct !{!151, !29}
!152 = distinct !{!152, !31, !27}
!153 = !{!154}
!154 = distinct !{!154, !155, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!155 = distinct !{!155, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!156 = !{!157}
!157 = distinct !{!157, !158, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!158 = distinct !{!158, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!159 = !{!160}
!160 = distinct !{!160, !161, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!161 = distinct !{!161, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!162 = distinct !{!162, !27}
!163 = distinct !{!163, !29}
!164 = distinct !{!164, !31, !27}
!165 = distinct !{!165, !27}
!166 = distinct !{!166, !29}
!167 = distinct !{!167, !31, !27}
!168 = distinct !{!168, !27}
!169 = distinct !{!169, !29}
!170 = distinct !{!170, !31, !27}
!171 = !{!172}
!172 = distinct !{!172, !173}
!173 = distinct !{!173, !"LVerDomain"}
!174 = !{!175}
!175 = distinct !{!175, !173}
!176 = !{!177}
!177 = distinct !{!177, !173}
!178 = !{!172, !175}
!179 = distinct !{!179, !27}
!180 = distinct !{!180, !27}
!181 = distinct !{!181, !29}
!182 = !{!183}
!183 = distinct !{!183, !184, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_: argument 0"}
!184 = distinct !{!184, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_"}
!185 = distinct !{!185, !29}
!186 = !{!187}
!187 = distinct !{!187, !188, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_: argument 0"}
!188 = distinct !{!188, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_"}
!189 = distinct !{!189, !29}
!190 = !{!191}
!191 = distinct !{!191, !192, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_: argument 0"}
!192 = distinct !{!192, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_"}
!193 = distinct !{!193, !27}
!194 = distinct !{!194, !29}
!195 = distinct !{!195, !31, !27}
!196 = !{!197}
!197 = distinct !{!197, !198, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_: argument 0"}
!198 = distinct !{!198, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_"}
!199 = distinct !{!199, !27}
!200 = distinct !{!200, !29}
!201 = distinct !{!201, !31, !27}
!202 = !{!203}
!203 = distinct !{!203, !204, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_: argument 0"}
!204 = distinct !{!204, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_"}
!205 = distinct !{!205, !27}
!206 = distinct !{!206, !29}
!207 = distinct !{!207, !31, !27}
!208 = !{!209}
!209 = distinct !{!209, !210, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_: argument 0"}
!210 = distinct !{!210, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_"}
!211 = distinct !{!211, !27}
!212 = distinct !{!212, !29}
!213 = distinct !{!213, !31, !27}
!214 = !{!215}
!215 = distinct !{!215, !216, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_: argument 0"}
!216 = distinct !{!216, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_"}
!217 = distinct !{!217, !27}
!218 = distinct !{!218, !29}
!219 = distinct !{!219, !31, !27}
!220 = !{!221}
!221 = distinct !{!221, !222, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_: argument 0"}
!222 = distinct !{!222, !"_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_"}
!223 = distinct !{!223, !27}
!224 = distinct !{!224, !29}
!225 = distinct !{!225, !31, !27}
!226 = !{!227}
!227 = distinct !{!227, !228, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!228 = distinct !{!228, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!229 = !{!230}
!230 = distinct !{!230, !231, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!231 = distinct !{!231, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!232 = !{!233}
!233 = distinct !{!233, !234, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!234 = distinct !{!234, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!235 = !{!236}
!236 = distinct !{!236, !237, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!237 = distinct !{!237, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!238 = !{!239}
!239 = distinct !{!239, !240, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!240 = distinct !{!240, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!241 = !{!242}
!242 = distinct !{!242, !243, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!243 = distinct !{!243, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!244 = !{!245}
!245 = distinct !{!245, !246, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!246 = distinct !{!246, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!247 = !{!248}
!248 = distinct !{!248, !249, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!249 = distinct !{!249, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!250 = !{!251}
!251 = distinct !{!251, !252, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!252 = distinct !{!252, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!253 = !{!254}
!254 = distinct !{!254, !255, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!255 = distinct !{!255, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!256 = !{!257}
!257 = distinct !{!257, !258, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!258 = distinct !{!258, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!259 = !{!260}
!260 = distinct !{!260, !261, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!261 = distinct !{!261, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!262 = !{!263}
!263 = distinct !{!263, !264, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!264 = distinct !{!264, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!265 = !{!266}
!266 = distinct !{!266, !267, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!267 = distinct !{!267, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!268 = distinct !{!268, !27}
!269 = distinct !{!269, !29}
!270 = distinct !{!270, !31, !27}
!271 = distinct !{!271, !27}
!272 = distinct !{!272, !29}
!273 = distinct !{!273, !31, !27}
!274 = distinct !{!274, !27}
!275 = distinct !{!275, !29}
!276 = distinct !{!276, !31, !27}
!277 = !{!278}
!278 = distinct !{!278, !279}
!279 = distinct !{!279, !"LVerDomain"}
!280 = !{!281}
!281 = distinct !{!281, !279}
!282 = !{!283}
!283 = distinct !{!283, !279}
!284 = !{!285}
!285 = distinct !{!285, !279}
!286 = !{!287}
!287 = distinct !{!287, !279}
!288 = !{!278, !281, !283, !285}
!289 = distinct !{!289, !27}
!290 = distinct !{!290, !27}
!291 = !{!292}
!292 = distinct !{!292, !293, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!293 = distinct !{!293, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!294 = !{!295}
!295 = distinct !{!295, !296, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!296 = distinct !{!296, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!297 = !{!298}
!298 = distinct !{!298, !299, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!299 = distinct !{!299, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!300 = !{!301}
!301 = distinct !{!301, !302, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!302 = distinct !{!302, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!303 = !{!304}
!304 = distinct !{!304, !305, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!305 = distinct !{!305, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!306 = !{!307}
!307 = distinct !{!307, !308, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!308 = distinct !{!308, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!309 = !{!310}
!310 = distinct !{!310, !311, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!311 = distinct !{!311, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!312 = !{!313}
!313 = distinct !{!313, !314, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!314 = distinct !{!314, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!315 = distinct !{!315, !27}
!316 = distinct !{!316, !29}
!317 = distinct !{!317, !31, !27}
!318 = distinct !{!318, !27}
!319 = distinct !{!319, !29}
!320 = distinct !{!320, !31, !27}
!321 = distinct !{!321, !27}
!322 = distinct !{!322, !29}
!323 = distinct !{!323, !31, !27}
!324 = !{!325}
!325 = distinct !{!325, !326, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!326 = distinct !{!326, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!327 = !{!328}
!328 = distinct !{!328, !329, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!329 = distinct !{!329, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!330 = !{!331}
!331 = distinct !{!331, !332, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!332 = distinct !{!332, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!333 = !{!334}
!334 = distinct !{!334, !335, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!335 = distinct !{!335, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!336 = !{!337}
!337 = distinct !{!337, !338, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!338 = distinct !{!338, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!339 = !{!340}
!340 = distinct !{!340, !341, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!341 = distinct !{!341, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!342 = distinct !{!342, !27}
!343 = distinct !{!343, !29}
!344 = distinct !{!344, !31, !27}
!345 = distinct !{!345, !27}
!346 = distinct !{!346, !29}
!347 = distinct !{!347, !31, !27}
!348 = distinct !{!348, !27}
!349 = distinct !{!349, !29}
!350 = distinct !{!350, !31, !27}
!351 = !{!352}
!352 = distinct !{!352, !353, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!353 = distinct !{!353, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!354 = !{!355}
!355 = distinct !{!355, !356, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!356 = distinct !{!356, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!357 = !{!358}
!358 = distinct !{!358, !359, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!359 = distinct !{!359, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!360 = distinct !{!360, !27}
!361 = distinct !{!361, !29}
!362 = distinct !{!362, !31, !27}
!363 = distinct !{!363, !27}
!364 = distinct !{!364, !29}
!365 = distinct !{!365, !31, !27}
!366 = distinct !{!366, !27}
!367 = distinct !{!367, !29}
!368 = distinct !{!368, !31, !27}
!369 = !{!370}
!370 = distinct !{!370, !371}
!371 = distinct !{!371, !"LVerDomain"}
!372 = !{!373}
!373 = distinct !{!373, !371}
!374 = !{!375}
!375 = distinct !{!375, !371}
!376 = !{!370, !373}
!377 = distinct !{!377, !27}
!378 = distinct !{!378, !27}
!379 = !{!380}
!380 = distinct !{!380, !381, !"_ZN6tflite13optimized_ops11MapAsVectorIKiEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS6_6MatrixINS3_12remove_constIS5_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS6_6StrideILi0ELi0EEEEENS7_INS8_IS5_Lin1ELi1ELi0ELin1ELi1EEELi0ESF_EEE4typeEPS5_RKNS_12RuntimeShapeE: argument 0"}
!381 = distinct !{!381, !"_ZN6tflite13optimized_ops11MapAsVectorIKiEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS6_6MatrixINS3_12remove_constIS5_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS6_6StrideILi0ELi0EEEEENS7_INS8_IS5_Lin1ELi1ELi0ELin1ELi1EEELi0ESF_EEE4typeEPS5_RKNS_12RuntimeShapeE"}
!382 = !{!383}
!383 = distinct !{!383, !384, !"_ZN6tflite13optimized_ops11MapAsVectorIKiEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS6_6MatrixINS3_12remove_constIS5_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS6_6StrideILi0ELi0EEEEENS7_INS8_IS5_Lin1ELi1ELi0ELin1ELi1EEELi0ESF_EEE4typeEPS5_RKNS_12RuntimeShapeE: argument 0"}
!384 = distinct !{!384, !"_ZN6tflite13optimized_ops11MapAsVectorIKiEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS6_6MatrixINS3_12remove_constIS5_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS6_6StrideILi0ELi0EEEEENS7_INS8_IS5_Lin1ELi1ELi0ELin1ELi1EEELi0ESF_EEE4typeEPS5_RKNS_12RuntimeShapeE"}
!385 = !{!386}
!386 = distinct !{!386, !387, !"_ZN6tflite13optimized_ops11MapAsVectorIiEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELi1ELi0ELin1ELi1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE: argument 0"}
!387 = distinct !{!387, !"_ZN6tflite13optimized_ops11MapAsVectorIiEENSt3__111conditionalIXsr3std8is_constIT_EE5valueEN5Eigen3MapIKNS5_6MatrixINS2_12remove_constIS4_E4typeELin1ELi1ELi0ELin1ELi1EEELi0ENS5_6StrideILi0ELi0EEEEENS6_INS7_IS4_Lin1ELi1ELi0ELin1ELi1EEELi0ESE_EEE4typeEPS4_RKNS_12RuntimeShapeE"}
!388 = distinct !{!388, !27}
!389 = distinct !{!389, !29}
!390 = distinct !{!390, !31, !27}
!391 = !{!392}
!392 = distinct !{!392, !393}
!393 = distinct !{!393, !"LVerDomain"}
!394 = !{!395}
!395 = distinct !{!395, !393}
!396 = !{!397}
!397 = distinct !{!397, !393}
!398 = !{!392, !395}
!399 = distinct !{!399, !27}
!400 = distinct !{!400, !29}
!401 = distinct !{!401, !27}
!402 = !{!403}
!403 = distinct !{!403, !404}
!404 = distinct !{!404, !"LVerDomain"}
!405 = !{!406}
!406 = distinct !{!406, !404}
!407 = !{!408}
!408 = distinct !{!408, !404}
!409 = !{!403, !406}
!410 = distinct !{!410, !27}
!411 = distinct !{!411, !29}
!412 = distinct !{!412, !27}
!413 = distinct !{!413, !27}
!414 = distinct !{!414, !29}
!415 = distinct !{!415, !31, !27}
!416 = !{!417}
!417 = distinct !{!417, !418}
!418 = distinct !{!418, !"LVerDomain"}
!419 = !{!420}
!420 = distinct !{!420, !418}
!421 = distinct !{!421, !27}
!422 = distinct !{!422, !29}
!423 = distinct !{!423, !27}
!424 = !{!425}
!425 = distinct !{!425, !426}
!426 = distinct !{!426, !"LVerDomain"}
!427 = !{!428}
!428 = distinct !{!428, !426}
!429 = distinct !{!429, !27}
!430 = distinct !{!430, !29}
!431 = distinct !{!431, !27}
!432 = distinct !{!432, !27}
!433 = distinct !{!433, !29}
!434 = distinct !{!434, !31, !27}
!435 = !{!436}
!436 = distinct !{!436, !437}
!437 = distinct !{!437, !"LVerDomain"}
!438 = !{!439}
!439 = distinct !{!439, !437}
!440 = distinct !{!440, !27}
!441 = distinct !{!441, !29}
!442 = distinct !{!442, !27}
!443 = !{!444}
!444 = distinct !{!444, !445}
!445 = distinct !{!445, !"LVerDomain"}
!446 = !{!447}
!447 = distinct !{!447, !445}
!448 = distinct !{!448, !27}
!449 = distinct !{!449, !29}
!450 = distinct !{!450, !27}
!451 = !{!452, !454}
!452 = distinct !{!452, !453, !"_ZN5Eigen9DenseBaseINS_3MapINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEE8ConstantEllRKi: argument 0"}
!453 = distinct !{!453, !"_ZN5Eigen9DenseBaseINS_3MapINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEE8ConstantEllRKi"}
!454 = distinct !{!454, !455, !"_ZNK5Eigen10MatrixBaseINS_3MapINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEE8cwiseMaxERKi: argument 0"}
!455 = distinct !{!455, !"_ZNK5Eigen10MatrixBaseINS_3MapINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEE8cwiseMaxERKi"}
!456 = distinct !{!456, !27}
!457 = distinct !{!457, !31, !27}
!458 = distinct !{!458, !27}
!459 = distinct !{!459, !31, !27}
!460 = !{!461, !463}
!461 = distinct !{!461, !462, !"_ZN5Eigen9DenseBaseINS_3MapINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEE8ConstantEllRKi: argument 0"}
!462 = distinct !{!462, !"_ZN5Eigen9DenseBaseINS_3MapINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEE8ConstantEllRKi"}
!463 = distinct !{!463, !464, !"_ZNK5Eigen10MatrixBaseINS_3MapINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEE8cwiseMinERKi: argument 0"}
!464 = distinct !{!464, !"_ZNK5Eigen10MatrixBaseINS_3MapINS_6MatrixIiLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEE8cwiseMinERKi"}
!465 = distinct !{!465, !27}
!466 = distinct !{!466, !31, !27}
!467 = distinct !{!467, !27}
!468 = distinct !{!468, !31, !27}
!469 = !{!470}
!470 = distinct !{!470, !471}
!471 = distinct !{!471, !"LVerDomain"}
!472 = !{!473}
!473 = distinct !{!473, !471}
!474 = !{!475}
!475 = distinct !{!475, !471}
!476 = !{!477}
!477 = distinct !{!477, !471}
!478 = !{!475, !473, !470}
!479 = distinct !{!479, !27}
!480 = distinct !{!480, !27}
!481 = !{!482}
!482 = distinct !{!482, !483}
!483 = distinct !{!483, !"LVerDomain"}
!484 = !{!485}
!485 = distinct !{!485, !483}
!486 = !{!487}
!487 = distinct !{!487, !483}
!488 = !{!485, !482}
!489 = distinct !{!489, !27}
!490 = distinct !{!490, !27}
!491 = !{!492}
!492 = distinct !{!492, !493, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!493 = distinct !{!493, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!494 = !{!495}
!495 = distinct !{!495, !496, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!496 = distinct !{!496, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!497 = !{!498}
!498 = distinct !{!498, !499, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!499 = distinct !{!499, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!500 = !{!501}
!501 = distinct !{!501, !502, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!502 = distinct !{!502, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!503 = !{!504}
!504 = distinct !{!504, !505, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!505 = distinct !{!505, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!506 = !{!507}
!507 = distinct !{!507, !508, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!508 = distinct !{!508, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!509 = !{!510}
!510 = distinct !{!510, !511, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!511 = distinct !{!511, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!512 = !{!513}
!513 = distinct !{!513, !514, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!514 = distinct !{!514, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!515 = !{!516}
!516 = distinct !{!516, !517, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!517 = distinct !{!517, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!518 = !{!519}
!519 = distinct !{!519, !520, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!520 = distinct !{!520, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!521 = !{!522}
!522 = distinct !{!522, !523, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!523 = distinct !{!523, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!524 = !{!525}
!525 = distinct !{!525, !526, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!526 = distinct !{!526, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!527 = !{!528}
!528 = distinct !{!528, !529, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!529 = distinct !{!529, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!530 = !{!531}
!531 = distinct !{!531, !532, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!532 = distinct !{!532, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!533 = distinct !{!533, !27}
!534 = distinct !{!534, !29}
!535 = distinct !{!535, !31, !27}
!536 = distinct !{!536, !27}
!537 = distinct !{!537, !29}
!538 = distinct !{!538, !31, !27}
!539 = distinct !{!539, !27}
!540 = distinct !{!540, !29}
!541 = distinct !{!541, !31, !27}
!542 = !{!543}
!543 = distinct !{!543, !544}
!544 = distinct !{!544, !"LVerDomain"}
!545 = !{!546}
!546 = distinct !{!546, !544}
!547 = !{!548}
!548 = distinct !{!548, !544}
!549 = !{!550}
!550 = distinct !{!550, !544}
!551 = !{!552}
!552 = distinct !{!552, !544}
!553 = !{!543, !546, !548, !550}
!554 = distinct !{!554, !27}
!555 = distinct !{!555, !27}
!556 = !{!557}
!557 = distinct !{!557, !558, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!558 = distinct !{!558, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!559 = !{!560}
!560 = distinct !{!560, !561, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!561 = distinct !{!561, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!562 = !{!563}
!563 = distinct !{!563, !564, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!564 = distinct !{!564, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!565 = !{!566}
!566 = distinct !{!566, !567, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!567 = distinct !{!567, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!568 = !{!569}
!569 = distinct !{!569, !570, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!570 = distinct !{!570, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!571 = !{!572}
!572 = distinct !{!572, !573, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!573 = distinct !{!573, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!574 = !{!575}
!575 = distinct !{!575, !576, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!576 = distinct !{!576, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!577 = !{!578}
!578 = distinct !{!578, !579, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!579 = distinct !{!579, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!580 = distinct !{!580, !27}
!581 = distinct !{!581, !29}
!582 = distinct !{!582, !31, !27}
!583 = distinct !{!583, !27}
!584 = distinct !{!584, !29}
!585 = distinct !{!585, !31, !27}
!586 = distinct !{!586, !27}
!587 = distinct !{!587, !29}
!588 = distinct !{!588, !31, !27}
!589 = !{!590}
!590 = distinct !{!590, !591, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!591 = distinct !{!591, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!592 = !{!593}
!593 = distinct !{!593, !594, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!594 = distinct !{!594, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!595 = !{!596}
!596 = distinct !{!596, !597, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!597 = distinct !{!597, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!598 = !{!599}
!599 = distinct !{!599, !600, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!600 = distinct !{!600, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!601 = !{!602}
!602 = distinct !{!602, !603, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!603 = distinct !{!603, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!604 = !{!605}
!605 = distinct !{!605, !606, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!606 = distinct !{!606, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!607 = distinct !{!607, !27}
!608 = distinct !{!608, !29}
!609 = distinct !{!609, !31, !27}
!610 = distinct !{!610, !27}
!611 = distinct !{!611, !29}
!612 = distinct !{!612, !31, !27}
!613 = distinct !{!613, !27}
!614 = distinct !{!614, !29}
!615 = distinct !{!615, !31, !27}
!616 = !{!617}
!617 = distinct !{!617, !618, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!618 = distinct !{!618, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!619 = !{!620}
!620 = distinct !{!620, !621, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!621 = distinct !{!621, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!622 = !{!623}
!623 = distinct !{!623, !624, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!624 = distinct !{!624, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!625 = distinct !{!625, !27}
!626 = distinct !{!626, !29}
!627 = distinct !{!627, !31, !27}
!628 = distinct !{!628, !27}
!629 = distinct !{!629, !29}
!630 = distinct !{!630, !31, !27}
!631 = distinct !{!631, !27}
!632 = distinct !{!632, !29}
!633 = distinct !{!633, !31, !27}
!634 = !{!635}
!635 = distinct !{!635, !636}
!636 = distinct !{!636, !"LVerDomain"}
!637 = !{!638}
!638 = distinct !{!638, !636}
!639 = !{!640}
!640 = distinct !{!640, !636}
!641 = !{!635, !638}
!642 = distinct !{!642, !27}
!643 = distinct !{!643, !27}
