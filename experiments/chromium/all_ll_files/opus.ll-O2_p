; ModuleID = '../../third_party/ffmpeg/libavcodec/opus.c'
source_filename = "../../third_party/ffmpeg/libavcodec/opus.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.OpusPacket = type { i32, i32, i32, i32, i32, i32, i32, [48 x i32], [48 x i32], i32, i32, i32 }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecDefault = type { i8*, i8* }
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVCodecHWConfigInternal = type opaque
%struct.AVCodecInternal = type { i32, i32, %struct.AVFrame*, %struct.AVBufferRef*, i8*, %struct.DecodeSimpleContext, %struct.AVBSFContext*, %struct.AVPacket*, %struct.AVFifoBuffer*, i8*, i32, i8*, %struct.EncodeSimpleContext, i32, i8*, i32, %struct.AVPacket*, %struct.AVFrame*, i32, i32, i64, i64, %struct.AVFrame*, %struct.AVPacket*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 }
%struct.DecodeSimpleContext = type { %struct.AVPacket* }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVBSFInternal = type opaque
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVFifoBuffer = type { i8*, i8*, i8*, i8*, i32, i32 }
%struct.EncodeSimpleContext = type { %struct.AVFrame* }
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVDictionary = type opaque
%struct.AVRational = type { i32, i32 }
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.OpusContext = type { %struct.AVClass*, %struct.OpusStreamContext*, i32, i32, i32, %struct.AVFloatDSPContext*, i16, float, %struct.ChannelMap* }
%struct.OpusStreamContext = type { %struct.AVCodecContext*, i32, i32, [2 x float*], i32, %struct.AVAudioFifo*, %struct.OpusRangeCoder, %struct.OpusRangeCoder, %struct.SilkContext*, %struct.CeltFrame*, %struct.AVFloatDSPContext*, [2 x [960 x float]], [2 x float*], [24 x i8], [2 x [960 x float]], [2 x float*], [16 x i8], [2 x [960 x float]], [2 x float*], [2 x float*], i32, float*, i32, %struct.SwrContext*, %struct.AVAudioFifo*, i32, i32, %struct.OpusPacket, i32 }
%struct.OpusRangeCoder = type { %struct.GetBitContext, %struct.RawBitsContext, i32, i32, i32, [1287 x i8], i8*, i32, i32, i32 }
%struct.GetBitContext = type { i8*, i8*, i32, i32, i32 }
%struct.RawBitsContext = type { i8*, i32, i32, i32 }
%struct.SilkContext = type opaque
%struct.CeltFrame = type { %struct.AVCodecContext*, [4 x %struct.MDCT15Context*], %struct.AVFloatDSPContext*, [16 x i8], [2 x %struct.CeltBlock], %struct.CeltPVQ*, %struct.OpusDSP, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [21 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, [21 x i32], [21 x i32], [21 x i32], [21 x i32], [21 x i32], [28 x i8] }
%struct.MDCT15Context = type { i32, i32, i32, i32, i32*, i32*, %struct.FFTContext, %struct.FFTComplex*, %struct.FFTComplex*, [8 x i8], [64 x %struct.FFTComplex], void (%struct.FFTComplex*, %struct.FFTComplex*, %struct.FFTComplex*, i64)*, void (%struct.FFTComplex*, %struct.FFTComplex*, %struct.FFTComplex*, i32*, i64)*, void (%struct.MDCT15Context*, float*, float*, i64)*, void (%struct.MDCT15Context*, float*, float*, i64)* }
%struct.FFTContext = type { i32, i32, i16*, %struct.FFTComplex*, i32, i32, float*, float*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, float*, float*)*, void (%struct.FFTContext*, float*, float*)*, void (%struct.FFTContext*, float*, float*)*, i32, i32, i32* }
%struct.FFTComplex = type { float, float }
%struct.CeltBlock = type { [21 x float], [21 x float], [21 x float], [2 x [21 x float]], [21 x i8], [7 x i8], [2048 x float], [960 x float], [128 x float], [960 x float], i32, [3 x float], i32, [3 x float], i32, [3 x float], float, [12 x i8] }
%struct.CeltPVQ = type { [256 x i32], [256 x float], float (float*, i32*, i32, i32)*, i32 (%struct.CeltPVQ*, %struct.CeltFrame*, %struct.OpusRangeCoder*, i32, float*, float*, i32, i32, i32, float*, i32, float*, i32, float, float*, i32)*, [16 x i8] }
%struct.OpusDSP = type { void (float*, i32, float*, i32)*, float (float*, float*, float, i32)* }
%struct.SwrContext = type opaque
%struct.AVAudioFifo = type opaque
%struct.AVFloatDSPContext = type { void (float*, float*, float*, i32)*, void (float*, float*, float, i32)*, void (double*, double*, double, i32)*, void (float*, float*, float, i32)*, void (double*, double*, double, i32)*, void (float*, float*, float*, float*, i32)*, void (float*, float*, float*, float*, i32)*, void (float*, float*, float*, i32)*, void (float*, float*, i32)*, float (float*, float*, i32)*, void (double*, double*, double*, i32)* }
%struct.ChannelMap = type { i32, i32, i32, i32, i32 }

@opus_frame_duration = internal unnamed_addr constant [32 x i16] [i16 480, i16 960, i16 1920, i16 2880, i16 480, i16 960, i16 1920, i16 2880, i16 480, i16 960, i16 1920, i16 2880, i16 480, i16 960, i16 480, i16 960, i16 120, i16 240, i16 480, i16 960, i16 120, i16 240, i16 480, i16 960, i16 120, i16 240, i16 480, i16 960, i16 120, i16 240, i16 480, i16 960], align 16
@ff_opus_parse_extradata.default_channel_map = internal unnamed_addr constant [2 x i8] c"\00\01", align 1
@.str = private unnamed_addr constant [47 x i8] c"Multichannel configuration without extradata.\0A\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"Invalid extradata size: %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"Extradata version %d\00", align 1
@.str.3 = private unnamed_addr constant [47 x i8] c"Zero channel count specified in the extradata\0A\00", align 1
@.str.4 = private unnamed_addr constant [58 x i8] c"Channel mapping 0 is only specified for up to 2 channels\0A\00", align 1
@.str.5 = private unnamed_addr constant [43 x i8] c"Invalid stream/stereo stream count: %d/%d\0A\00", align 1
@.str.6 = private unnamed_addr constant [58 x i8] c"Channel mapping 1 is only specified for up to 8 channels\0A\00", align 1
@ff_vorbis_channel_layouts = external local_unnamed_addr constant [9 x i64], align 16
@.str.7 = private unnamed_addr constant [133 x i8] c"Channel mapping 2 is only specified for channel counts which can be written as (n + 1)^2 or (n + 1)^2 + 2 for nonnegative integer n\0A\00", align 1
@.str.8 = private unnamed_addr constant [19 x i8] c"Too many channels\0A\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"Mapping type %d\00", align 1
@.str.10 = private unnamed_addr constant [47 x i8] c"Invalid channel map for output channel %d: %d\0A\00", align 1
@ff_celt_freq_bands = external local_unnamed_addr constant [0 x i8], align 1
@ff_celt_freq_range = external local_unnamed_addr constant [0 x i8], align 1
@ff_celt_model_spread = external constant [0 x i16], align 2
@ff_celt_static_caps = external local_unnamed_addr constant [4 x [2 x [21 x i8]]], align 16
@ff_celt_model_alloc_trim = external constant [0 x i16], align 2
@ff_celt_log2_frac = external local_unnamed_addr constant [0 x i8], align 1
@ff_celt_static_alloc = external local_unnamed_addr constant [11 x [21 x i8]], align 16
@ff_celt_log_freq_range = external local_unnamed_addr constant [0 x i8], align 1
@opus_default_extradata = internal unnamed_addr constant <{ [9 x i8], [21 x i8] }> <{ [9 x i8] c"OpusHead\01", [21 x i8] zeroinitializer }>, align 16
@ff_vorbis_channel_layout_offsets = external local_unnamed_addr constant [8 x [8 x i8]], align 16
@ff_sqrt_tab = external local_unnamed_addr constant [256 x i8], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_opus_parse_packet(%struct.OpusPacket*, i8*, i32, i32) local_unnamed_addr #0 {
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds i8, i8* %1, i64 %5
  %7 = icmp slt i32 %2, 1
  br i1 %7, label %518, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %1, i64 1
  %10 = ptrtoint i8* %9 to i64
  %11 = load i8, i8* %1, align 1
  %12 = zext i8 %11 to i32
  %13 = and i32 %12, 3
  %14 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 2
  store i32 %13, i32* %14, align 4
  %15 = lshr i32 %12, 2
  %16 = and i32 %15, 1
  %17 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 3
  store i32 %16, i32* %17, align 4
  %18 = lshr i32 %12, 3
  %19 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 5
  store i32 %18, i32* %19, align 4
  %20 = icmp ugt i32 %13, 1
  %21 = icmp eq i32 %2, 1
  %22 = and i1 %21, %20
  br i1 %22, label %518, label %23

23:                                               ; preds = %8
  switch i32 %13, label %469 [
    i32 0, label %24
    i32 1, label %72
    i32 2, label %128
    i32 3, label %203
  ]

24:                                               ; preds = %23
  %25 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 6
  store i32 1, i32* %25, align 4
  %26 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 4
  store i32 0, i32* %26, align 4
  %27 = icmp eq i32 %3, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %24
  %29 = ptrtoint i8* %6 to i64
  br label %59

30:                                               ; preds = %24
  %31 = icmp sgt i32 %2, 1
  br i1 %31, label %32, label %518

32:                                               ; preds = %30
  %33 = getelementptr inbounds i8, i8* %1, i64 2
  %34 = load i8, i8* %9, align 1
  %35 = zext i8 %34 to i32
  %36 = icmp ugt i8 %34, -5
  br i1 %36, label %37, label %45

37:                                               ; preds = %32
  %38 = icmp sgt i32 %2, 2
  br i1 %38, label %39, label %518

39:                                               ; preds = %37
  %40 = getelementptr inbounds i8, i8* %1, i64 3
  %41 = load i8, i8* %33, align 1
  %42 = zext i8 %41 to i32
  %43 = shl nuw nsw i32 %42, 2
  %44 = add nuw nsw i32 %43, %35
  br label %45

45:                                               ; preds = %39, %32
  %46 = phi i8* [ %40, %39 ], [ %33, %32 ]
  %47 = phi i32 [ %44, %39 ], [ %35, %32 ]
  %48 = ptrtoint i8* %46 to i64
  %49 = sext i32 %47 to i64
  %50 = ptrtoint i8* %6 to i64
  %51 = sub i64 %50, %48
  %52 = icmp slt i64 %51, %49
  br i1 %52, label %518, label %53

53:                                               ; preds = %45
  %54 = getelementptr inbounds i8, i8* %46, i64 %49
  %55 = ptrtoint i8* %54 to i64
  %56 = ptrtoint i8* %1 to i64
  %57 = sub i64 %55, %56
  %58 = trunc i64 %57 to i32
  br label %59

59:                                               ; preds = %28, %53
  %60 = phi i64 [ %29, %28 ], [ %55, %53 ]
  %61 = phi i64 [ %10, %28 ], [ %48, %53 ]
  %62 = phi i32 [ %2, %28 ], [ %58, %53 ]
  %63 = sub i64 %60, %61
  %64 = trunc i64 %63 to i32
  %65 = icmp sgt i32 %64, 1275
  br i1 %65, label %518, label %66

66:                                               ; preds = %59
  %67 = ptrtoint i8* %1 to i64
  %68 = sub i64 %61, %67
  %69 = trunc i64 %68 to i32
  %70 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 7, i64 0
  store i32 %69, i32* %70, align 4
  %71 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 8, i64 0
  store i32 %64, i32* %71, align 4
  br label %484

72:                                               ; preds = %23
  %73 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 6
  store i32 2, i32* %73, align 4
  %74 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 4
  store i32 0, i32* %74, align 4
  %75 = icmp eq i32 %3, 0
  br i1 %75, label %76, label %78

76:                                               ; preds = %72
  %77 = ptrtoint i8* %6 to i64
  br label %108

78:                                               ; preds = %72
  %79 = icmp sgt i32 %2, 1
  br i1 %79, label %80, label %518

80:                                               ; preds = %78
  %81 = getelementptr inbounds i8, i8* %1, i64 2
  %82 = load i8, i8* %9, align 1
  %83 = zext i8 %82 to i32
  %84 = icmp ugt i8 %82, -5
  br i1 %84, label %85, label %93

85:                                               ; preds = %80
  %86 = icmp sgt i32 %2, 2
  br i1 %86, label %87, label %518

87:                                               ; preds = %85
  %88 = getelementptr inbounds i8, i8* %1, i64 3
  %89 = load i8, i8* %81, align 1
  %90 = zext i8 %89 to i32
  %91 = shl nuw nsw i32 %90, 2
  %92 = add nuw nsw i32 %91, %83
  br label %93

93:                                               ; preds = %87, %80
  %94 = phi i8* [ %88, %87 ], [ %81, %80 ]
  %95 = phi i32 [ %92, %87 ], [ %83, %80 ]
  %96 = ptrtoint i8* %94 to i64
  %97 = shl nsw i32 %95, 1
  %98 = sext i32 %97 to i64
  %99 = ptrtoint i8* %6 to i64
  %100 = sub i64 %99, %96
  %101 = icmp slt i64 %100, %98
  br i1 %101, label %518, label %102

102:                                              ; preds = %93
  %103 = getelementptr inbounds i8, i8* %94, i64 %98
  %104 = ptrtoint i8* %103 to i64
  %105 = ptrtoint i8* %1 to i64
  %106 = sub i64 %104, %105
  %107 = trunc i64 %106 to i32
  br label %108

108:                                              ; preds = %76, %102
  %109 = phi i64 [ %77, %76 ], [ %104, %102 ]
  %110 = phi i64 [ %10, %76 ], [ %96, %102 ]
  %111 = phi i32 [ %2, %76 ], [ %107, %102 ]
  %112 = sub i64 %109, %110
  %113 = trunc i64 %112 to i32
  %114 = and i32 %113, 1
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %518

116:                                              ; preds = %108
  %117 = ashr i32 %113, 1
  %118 = icmp sgt i32 %113, 2551
  br i1 %118, label %518, label %119

119:                                              ; preds = %116
  %120 = ptrtoint i8* %1 to i64
  %121 = sub i64 %110, %120
  %122 = trunc i64 %121 to i32
  %123 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 7, i64 0
  store i32 %122, i32* %123, align 4
  %124 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 8, i64 0
  store i32 %117, i32* %124, align 4
  %125 = add nsw i32 %117, %122
  %126 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 7, i64 1
  store i32 %125, i32* %126, align 4
  %127 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 8, i64 1
  store i32 %117, i32* %127, align 4
  br label %484

128:                                              ; preds = %23
  %129 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 6
  store i32 2, i32* %129, align 4
  %130 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 4
  store i32 1, i32* %130, align 4
  %131 = icmp sgt i32 %2, 1
  br i1 %131, label %132, label %518

132:                                              ; preds = %128
  %133 = getelementptr inbounds i8, i8* %1, i64 2
  %134 = load i8, i8* %9, align 1
  %135 = zext i8 %134 to i32
  %136 = icmp ugt i8 %134, -5
  br i1 %136, label %137, label %145

137:                                              ; preds = %132
  %138 = icmp sgt i32 %2, 2
  br i1 %138, label %139, label %518

139:                                              ; preds = %137
  %140 = getelementptr inbounds i8, i8* %1, i64 3
  %141 = load i8, i8* %133, align 1
  %142 = zext i8 %141 to i32
  %143 = shl nuw nsw i32 %142, 2
  %144 = add nuw nsw i32 %143, %135
  br label %145

145:                                              ; preds = %139, %132
  %146 = phi i8* [ %140, %139 ], [ %133, %132 ]
  %147 = phi i32 [ %144, %139 ], [ %135, %132 ]
  %148 = icmp eq i32 %3, 0
  br i1 %148, label %149, label %153

149:                                              ; preds = %145
  %150 = ptrtoint i8* %146 to i64
  %151 = ptrtoint i8* %1 to i64
  %152 = ptrtoint i8* %6 to i64
  br label %186

153:                                              ; preds = %145
  %154 = icmp ult i8* %146, %6
  br i1 %154, label %155, label %518

155:                                              ; preds = %153
  %156 = getelementptr inbounds i8, i8* %146, i64 1
  %157 = load i8, i8* %146, align 1
  %158 = zext i8 %157 to i32
  %159 = icmp ugt i8 %157, -5
  br i1 %159, label %160, label %168

160:                                              ; preds = %155
  %161 = icmp ult i8* %156, %6
  br i1 %161, label %162, label %518

162:                                              ; preds = %160
  %163 = getelementptr inbounds i8, i8* %146, i64 2
  %164 = load i8, i8* %156, align 1
  %165 = zext i8 %164 to i32
  %166 = shl nuw nsw i32 %165, 2
  %167 = add nuw nsw i32 %166, %158
  br label %168

168:                                              ; preds = %162, %155
  %169 = phi i8* [ %163, %162 ], [ %156, %155 ]
  %170 = phi i32 [ %167, %162 ], [ %158, %155 ]
  %171 = ptrtoint i8* %169 to i64
  %172 = add nuw nsw i32 %170, %147
  %173 = sext i32 %172 to i64
  %174 = ptrtoint i8* %6 to i64
  %175 = sub i64 %174, %171
  %176 = icmp slt i64 %175, %173
  br i1 %176, label %518, label %177

177:                                              ; preds = %168
  %178 = sext i32 %147 to i64
  %179 = getelementptr inbounds i8, i8* %169, i64 %178
  %180 = sext i32 %170 to i64
  %181 = getelementptr inbounds i8, i8* %179, i64 %180
  %182 = ptrtoint i8* %181 to i64
  %183 = ptrtoint i8* %1 to i64
  %184 = sub i64 %182, %183
  %185 = trunc i64 %184 to i32
  br label %186

186:                                              ; preds = %149, %177
  %187 = phi i64 [ %152, %149 ], [ %182, %177 ]
  %188 = phi i64 [ %151, %149 ], [ %183, %177 ]
  %189 = phi i64 [ %150, %149 ], [ %171, %177 ]
  %190 = phi i32 [ %2, %149 ], [ %185, %177 ]
  %191 = sub i64 %189, %188
  %192 = trunc i64 %191 to i32
  %193 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 7, i64 0
  store i32 %192, i32* %193, align 4
  %194 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 8, i64 0
  store i32 %147, i32* %194, align 4
  %195 = sub i64 %187, %189
  %196 = trunc i64 %195 to i32
  %197 = sub i32 %196, %147
  %198 = icmp ugt i32 %197, 1275
  br i1 %198, label %518, label %199

199:                                              ; preds = %186
  %200 = add nsw i32 %147, %192
  %201 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 7, i64 1
  store i32 %200, i32* %201, align 4
  %202 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 8, i64 1
  store i32 %197, i32* %202, align 4
  br label %484

203:                                              ; preds = %23
  %204 = getelementptr inbounds i8, i8* %1, i64 2
  %205 = load i8, i8* %9, align 1
  %206 = zext i8 %205 to i32
  %207 = and i32 %206, 63
  %208 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 6
  store i32 %207, i32* %208, align 4
  %209 = lshr i32 %206, 7
  %210 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 4
  store i32 %209, i32* %210, align 4
  %211 = add nsw i32 %207, -1
  %212 = icmp ugt i32 %211, 47
  br i1 %212, label %518, label %213

213:                                              ; preds = %203
  %214 = and i32 %206, 64
  %215 = icmp eq i32 %214, 0
  br i1 %215, label %233, label %216

216:                                              ; preds = %213
  %217 = icmp sgt i32 %2, 2
  br i1 %217, label %218, label %518

218:                                              ; preds = %216, %226
  %219 = phi i8* [ %221, %226 ], [ %204, %216 ]
  %220 = phi i32 [ %227, %226 ], [ 0, %216 ]
  %221 = getelementptr inbounds i8, i8* %219, i64 1
  %222 = load i8, i8* %219, align 1
  %223 = zext i8 %222 to i32
  %224 = add nsw i32 %220, %223
  %225 = icmp eq i8 %222, -1
  br i1 %225, label %226, label %231

226:                                              ; preds = %218
  %227 = add nsw i32 %224, -1
  %228 = icmp uge i8* %221, %6
  %229 = icmp sgt i32 %227, 2147483393
  %230 = or i1 %228, %229
  br i1 %230, label %518, label %218

231:                                              ; preds = %218
  %232 = icmp slt i32 %224, 0
  br i1 %232, label %518, label %233

233:                                              ; preds = %213, %231
  %234 = phi i8* [ %204, %213 ], [ %221, %231 ]
  %235 = phi i32 [ 0, %213 ], [ %224, %231 ]
  %236 = ptrtoint i8* %234 to i64
  %237 = icmp eq i32 %209, 0
  br i1 %237, label %381, label %238

238:                                              ; preds = %233
  %239 = icmp sgt i32 %211, 0
  br i1 %239, label %240, label %269

240:                                              ; preds = %238
  %241 = zext i32 %211 to i64
  br label %242

242:                                              ; preds = %260, %240
  %243 = phi i64 [ 0, %240 ], [ %265, %260 ]
  %244 = phi i32 [ 0, %240 ], [ %264, %260 ]
  %245 = phi i8* [ %234, %240 ], [ %261, %260 ]
  %246 = icmp ugt i8* %6, %245
  br i1 %246, label %247, label %518

247:                                              ; preds = %242
  %248 = getelementptr inbounds i8, i8* %245, i64 1
  %249 = load i8, i8* %245, align 1
  %250 = zext i8 %249 to i32
  %251 = icmp ugt i8 %249, -5
  br i1 %251, label %252, label %260

252:                                              ; preds = %247
  %253 = icmp ult i8* %248, %6
  br i1 %253, label %254, label %518

254:                                              ; preds = %252
  %255 = getelementptr inbounds i8, i8* %245, i64 2
  %256 = load i8, i8* %248, align 1
  %257 = zext i8 %256 to i32
  %258 = shl nuw nsw i32 %257, 2
  %259 = add nuw nsw i32 %258, %250
  br label %260

260:                                              ; preds = %254, %247
  %261 = phi i8* [ %255, %254 ], [ %248, %247 ]
  %262 = phi i32 [ %259, %254 ], [ %250, %247 ]
  %263 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 8, i64 %243
  store i32 %262, i32* %263, align 4
  %264 = add nsw i32 %262, %244
  %265 = add nuw nsw i64 %243, 1
  %266 = icmp eq i64 %265, %241
  br i1 %266, label %267, label %242

267:                                              ; preds = %260
  %268 = ptrtoint i8* %261 to i64
  br label %269

269:                                              ; preds = %267, %238
  %270 = phi i64 [ %268, %267 ], [ %236, %238 ]
  %271 = phi i32 [ %264, %267 ], [ 0, %238 ]
  %272 = icmp eq i32 %3, 0
  br i1 %272, label %273, label %275

273:                                              ; preds = %269
  %274 = ptrtoint i8* %6 to i64
  br label %312

275:                                              ; preds = %269
  %276 = inttoptr i64 %270 to i8*
  %277 = icmp ugt i8* %6, %276
  br i1 %277, label %278, label %518

278:                                              ; preds = %275
  %279 = getelementptr inbounds i8, i8* %276, i64 1
  %280 = load i8, i8* %276, align 1
  %281 = zext i8 %280 to i32
  %282 = icmp ugt i8 %280, -5
  br i1 %282, label %283, label %291

283:                                              ; preds = %278
  %284 = icmp ult i8* %279, %6
  br i1 %284, label %285, label %518

285:                                              ; preds = %283
  %286 = getelementptr inbounds i8, i8* %276, i64 2
  %287 = load i8, i8* %279, align 1
  %288 = zext i8 %287 to i32
  %289 = shl nuw nsw i32 %288, 2
  %290 = add nuw nsw i32 %289, %281
  br label %291

291:                                              ; preds = %285, %278
  %292 = phi i8* [ %286, %285 ], [ %279, %278 ]
  %293 = phi i32 [ %290, %285 ], [ %281, %278 ]
  %294 = ptrtoint i8* %292 to i64
  %295 = add i32 %271, %235
  %296 = add i32 %295, %293
  %297 = sext i32 %296 to i64
  %298 = ptrtoint i8* %6 to i64
  %299 = sub i64 %298, %294
  %300 = icmp slt i64 %299, %297
  br i1 %300, label %518, label %301

301:                                              ; preds = %291
  %302 = sext i32 %271 to i64
  %303 = getelementptr inbounds i8, i8* %292, i64 %302
  %304 = sext i32 %293 to i64
  %305 = getelementptr inbounds i8, i8* %303, i64 %304
  %306 = sext i32 %235 to i64
  %307 = getelementptr inbounds i8, i8* %305, i64 %306
  %308 = ptrtoint i8* %307 to i64
  %309 = ptrtoint i8* %1 to i64
  %310 = sub i64 %308, %309
  %311 = trunc i64 %310 to i32
  br label %312

312:                                              ; preds = %273, %301
  %313 = phi i64 [ %274, %273 ], [ %308, %301 ]
  %314 = phi i64 [ %270, %273 ], [ %294, %301 ]
  %315 = phi i32 [ %2, %273 ], [ %311, %301 ]
  %316 = sub i64 %313, %314
  %317 = trunc i64 %316 to i32
  %318 = sub i32 %317, %235
  %319 = icmp slt i32 %318, %271
  br i1 %319, label %518, label %320

320:                                              ; preds = %312
  %321 = ptrtoint i8* %1 to i64
  %322 = sub i64 %314, %321
  %323 = trunc i64 %322 to i32
  %324 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 7, i64 0
  store i32 %323, i32* %324, align 4
  %325 = icmp ugt i32 %207, 1
  br i1 %325, label %326, label %377

326:                                              ; preds = %320
  %327 = zext i32 %207 to i64
  %328 = add nsw i64 %327, -1
  %329 = add nsw i64 %327, -2
  %330 = and i64 %328, 3
  %331 = icmp ult i64 %329, 3
  br i1 %331, label %361, label %332

332:                                              ; preds = %326
  %333 = sub nsw i64 %328, %330
  br label %334

334:                                              ; preds = %334, %332
  %335 = phi i32 [ %323, %332 ], [ %356, %334 ]
  %336 = phi i64 [ 1, %332 ], [ %358, %334 ]
  %337 = phi i64 [ %333, %332 ], [ %359, %334 ]
  %338 = add nsw i64 %336, -1
  %339 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 8, i64 %338
  %340 = load i32, i32* %339, align 4
  %341 = add nsw i32 %340, %335
  %342 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 7, i64 %336
  store i32 %341, i32* %342, align 4
  %343 = add nuw nsw i64 %336, 1
  %344 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 8, i64 %336
  %345 = load i32, i32* %344, align 4
  %346 = add nsw i32 %345, %341
  %347 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 7, i64 %343
  store i32 %346, i32* %347, align 4
  %348 = add nuw nsw i64 %336, 2
  %349 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 8, i64 %343
  %350 = load i32, i32* %349, align 4
  %351 = add nsw i32 %350, %346
  %352 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 7, i64 %348
  store i32 %351, i32* %352, align 4
  %353 = add nuw nsw i64 %336, 3
  %354 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 8, i64 %348
  %355 = load i32, i32* %354, align 4
  %356 = add nsw i32 %355, %351
  %357 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 7, i64 %353
  store i32 %356, i32* %357, align 4
  %358 = add nuw nsw i64 %336, 4
  %359 = add i64 %337, -4
  %360 = icmp eq i64 %359, 0
  br i1 %360, label %361, label %334

361:                                              ; preds = %334, %326
  %362 = phi i32 [ %323, %326 ], [ %356, %334 ]
  %363 = phi i64 [ 1, %326 ], [ %358, %334 ]
  %364 = icmp eq i64 %330, 0
  br i1 %364, label %377, label %365

365:                                              ; preds = %361, %365
  %366 = phi i32 [ %372, %365 ], [ %362, %361 ]
  %367 = phi i64 [ %374, %365 ], [ %363, %361 ]
  %368 = phi i64 [ %375, %365 ], [ %330, %361 ]
  %369 = add nsw i64 %367, -1
  %370 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 8, i64 %369
  %371 = load i32, i32* %370, align 4
  %372 = add nsw i32 %371, %366
  %373 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 7, i64 %367
  store i32 %372, i32* %373, align 4
  %374 = add nuw nsw i64 %367, 1
  %375 = add i64 %368, -1
  %376 = icmp eq i64 %375, 0
  br i1 %376, label %377, label %365, !llvm.loop !2

377:                                              ; preds = %361, %365, %320
  %378 = sub nsw i32 %318, %271
  %379 = sext i32 %211 to i64
  %380 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 8, i64 %379
  store i32 %378, i32* %380, align 4
  br label %484

381:                                              ; preds = %233
  %382 = icmp eq i32 %3, 0
  br i1 %382, label %417, label %383

383:                                              ; preds = %381
  %384 = icmp ult i8* %234, %6
  br i1 %384, label %385, label %518

385:                                              ; preds = %383
  %386 = getelementptr inbounds i8, i8* %234, i64 1
  %387 = load i8, i8* %234, align 1
  %388 = zext i8 %387 to i32
  %389 = icmp ugt i8 %387, -5
  br i1 %389, label %390, label %398

390:                                              ; preds = %385
  %391 = icmp ult i8* %386, %6
  br i1 %391, label %392, label %518

392:                                              ; preds = %390
  %393 = getelementptr inbounds i8, i8* %234, i64 2
  %394 = load i8, i8* %386, align 1
  %395 = zext i8 %394 to i32
  %396 = shl nuw nsw i32 %395, 2
  %397 = add nuw nsw i32 %396, %388
  br label %398

398:                                              ; preds = %392, %385
  %399 = phi i8* [ %393, %392 ], [ %386, %385 ]
  %400 = phi i32 [ %397, %392 ], [ %388, %385 ]
  %401 = ptrtoint i8* %399 to i64
  %402 = mul nsw i32 %400, %207
  %403 = add nsw i32 %402, %235
  %404 = sext i32 %403 to i64
  %405 = ptrtoint i8* %6 to i64
  %406 = sub i64 %405, %401
  %407 = icmp slt i64 %406, %404
  br i1 %407, label %518, label %408

408:                                              ; preds = %398
  %409 = sext i32 %402 to i64
  %410 = getelementptr inbounds i8, i8* %399, i64 %409
  %411 = sext i32 %235 to i64
  %412 = getelementptr inbounds i8, i8* %410, i64 %411
  %413 = ptrtoint i8* %412 to i64
  %414 = ptrtoint i8* %1 to i64
  %415 = sub i64 %413, %414
  %416 = trunc i64 %415 to i32
  br label %429

417:                                              ; preds = %381
  %418 = ptrtoint i8* %6 to i64
  %419 = sub i64 %418, %236
  %420 = trunc i64 %419 to i32
  %421 = sub i32 %420, %235
  %422 = srem i32 %421, %207
  %423 = sdiv i32 %421, %207
  %424 = icmp ne i32 %422, 0
  %425 = icmp sgt i32 %423, 1275
  %426 = or i1 %424, %425
  br i1 %426, label %518, label %427

427:                                              ; preds = %417
  %428 = ptrtoint i8* %1 to i64
  br label %429

429:                                              ; preds = %427, %408
  %430 = phi i64 [ %428, %427 ], [ %414, %408 ]
  %431 = phi i64 [ %236, %427 ], [ %401, %408 ]
  %432 = phi i32 [ %2, %427 ], [ %416, %408 ]
  %433 = phi i32 [ %423, %427 ], [ %400, %408 ]
  %434 = sub i64 %431, %430
  %435 = trunc i64 %434 to i32
  %436 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 7, i64 0
  store i32 %435, i32* %436, align 4
  %437 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 8, i64 0
  store i32 %433, i32* %437, align 4
  %438 = icmp ugt i32 %207, 1
  br i1 %438, label %439, label %484

439:                                              ; preds = %429
  %440 = zext i32 %207 to i64
  %441 = add nsw i64 %440, -1
  %442 = add nsw i64 %440, -2
  %443 = and i64 %441, 3
  %444 = icmp ult i64 %442, 3
  br i1 %444, label %470, label %445

445:                                              ; preds = %439
  %446 = sub nsw i64 %441, %443
  br label %447

447:                                              ; preds = %447, %445
  %448 = phi i32 [ %435, %445 ], [ %463, %447 ]
  %449 = phi i64 [ 1, %445 ], [ %466, %447 ]
  %450 = phi i64 [ %446, %445 ], [ %467, %447 ]
  %451 = add nsw i32 %433, %448
  %452 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 7, i64 %449
  store i32 %451, i32* %452, align 4
  %453 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 8, i64 %449
  store i32 %433, i32* %453, align 4
  %454 = add nuw nsw i64 %449, 1
  %455 = add nsw i32 %433, %451
  %456 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 7, i64 %454
  store i32 %455, i32* %456, align 4
  %457 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 8, i64 %454
  store i32 %433, i32* %457, align 4
  %458 = add nuw nsw i64 %449, 2
  %459 = add nsw i32 %433, %455
  %460 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 7, i64 %458
  store i32 %459, i32* %460, align 4
  %461 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 8, i64 %458
  store i32 %433, i32* %461, align 4
  %462 = add nuw nsw i64 %449, 3
  %463 = add nsw i32 %433, %459
  %464 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 7, i64 %462
  store i32 %463, i32* %464, align 4
  %465 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 8, i64 %462
  store i32 %433, i32* %465, align 4
  %466 = add nuw nsw i64 %449, 4
  %467 = add i64 %450, -4
  %468 = icmp eq i64 %467, 0
  br i1 %468, label %470, label %447

469:                                              ; preds = %23
  unreachable

470:                                              ; preds = %447, %439
  %471 = phi i32 [ %435, %439 ], [ %463, %447 ]
  %472 = phi i64 [ 1, %439 ], [ %466, %447 ]
  %473 = icmp eq i64 %443, 0
  br i1 %473, label %484, label %474

474:                                              ; preds = %470, %474
  %475 = phi i32 [ %478, %474 ], [ %471, %470 ]
  %476 = phi i64 [ %481, %474 ], [ %472, %470 ]
  %477 = phi i64 [ %482, %474 ], [ %443, %470 ]
  %478 = add nsw i32 %433, %475
  %479 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 7, i64 %476
  store i32 %478, i32* %479, align 4
  %480 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 8, i64 %476
  store i32 %433, i32* %480, align 4
  %481 = add nuw nsw i64 %476, 1
  %482 = add i64 %477, -1
  %483 = icmp eq i64 %482, 0
  br i1 %483, label %484, label %474, !llvm.loop !4

484:                                              ; preds = %470, %474, %429, %377, %199, %119, %66
  %485 = phi i32 [ %207, %377 ], [ 2, %199 ], [ 2, %119 ], [ 1, %66 ], [ %207, %429 ], [ %207, %474 ], [ %207, %470 ]
  %486 = phi i32 [ %315, %377 ], [ %190, %199 ], [ %111, %119 ], [ %62, %66 ], [ %432, %429 ], [ %432, %474 ], [ %432, %470 ]
  %487 = phi i32 [ %235, %377 ], [ 0, %199 ], [ 0, %119 ], [ 0, %66 ], [ %235, %429 ], [ %235, %474 ], [ %235, %470 ]
  %488 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 0
  store i32 %486, i32* %488, align 4
  %489 = sub nsw i32 %486, %487
  %490 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 1
  store i32 %489, i32* %490, align 4
  %491 = zext i32 %18 to i64
  %492 = getelementptr inbounds [32 x i16], [32 x i16]* @opus_frame_duration, i64 0, i64 %491
  %493 = load i16, i16* %492, align 2
  %494 = zext i16 %493 to i32
  %495 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 9
  store i32 %494, i32* %495, align 4
  %496 = mul nuw nsw i32 %485, %494
  %497 = icmp ugt i32 %496, 5760
  br i1 %497, label %518, label %498

498:                                              ; preds = %484
  %499 = icmp ult i8 %11, 96
  br i1 %499, label %500, label %504

500:                                              ; preds = %498
  %501 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 10
  store i32 0, i32* %501, align 4
  %502 = lshr i32 %12, 5
  %503 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 11
  store i32 %502, i32* %503, align 4
  br label %520

504:                                              ; preds = %498
  %505 = icmp sgt i8 %11, -1
  %506 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 10
  br i1 %505, label %507, label %511

507:                                              ; preds = %504
  store i32 1, i32* %506, align 4
  %508 = icmp ugt i8 %11, 111
  %509 = select i1 %508, i32 4, i32 3
  %510 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 11
  store i32 %509, i32* %510, align 4
  br label %520

511:                                              ; preds = %504
  store i32 2, i32* %506, align 4
  %512 = add nsw i32 %18, -16
  %513 = ashr i32 %512, 2
  %514 = getelementptr inbounds %struct.OpusPacket, %struct.OpusPacket* %0, i64 0, i32 11
  store i32 %513, i32* %514, align 4
  %515 = icmp eq i32 %513, 0
  br i1 %515, label %520, label %516

516:                                              ; preds = %511
  %517 = add nuw nsw i32 %513, 1
  store i32 %517, i32* %514, align 4
  br label %520

518:                                              ; preds = %226, %252, %242, %417, %390, %383, %283, %275, %291, %312, %216, %160, %153, %168, %137, %128, %85, %78, %93, %37, %30, %45, %108, %484, %398, %231, %203, %186, %116, %59, %8, %4
  %519 = bitcast %struct.OpusPacket* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %519, i8 0, i64 424, i1 false)
  br label %520

520:                                              ; preds = %500, %516, %507, %511, %518
  %521 = phi i32 [ -1094995529, %518 ], [ 0, %511 ], [ 0, %507 ], [ 0, %516 ], [ 0, %500 ]
  ret i32 %521
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden i32 @ff_opus_parse_extradata(%struct.AVCodecContext*, %struct.OpusContext*) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 15
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 83
  %8 = load i32, i32* %7, align 4
  %9 = icmp sgt i32 %8, 2
  br i1 %9, label %10, label %18

10:                                               ; preds = %6
  %11 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %11, i32 16, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0)) #6
  br label %221

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 16
  %14 = load i32, i32* %13, align 8
  %15 = icmp slt i32 %14, 19
  br i1 %15, label %16, label %18

16:                                               ; preds = %12
  %17 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %17, i32 16, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0), i32 %14) #6
  br label %221

18:                                               ; preds = %6, %12
  %19 = phi i32 [ %14, %12 ], [ 30, %6 ]
  %20 = phi i8* [ %4, %12 ], [ getelementptr inbounds (<{ [9 x i8], [21 x i8] }>, <{ [9 x i8], [21 x i8] }>* @opus_default_extradata, i64 0, i32 0, i64 0), %6 ]
  %21 = getelementptr inbounds i8, i8* %20, i64 8
  %22 = load i8, i8* %21, align 1
  %23 = icmp ugt i8 %22, 15
  br i1 %23, label %24, label %27

24:                                               ; preds = %18
  %25 = zext i8 %22 to i32
  %26 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i8*, ...) @avpriv_request_sample(i8* %26, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0), i32 %25) #6
  br label %221

27:                                               ; preds = %18
  %28 = getelementptr inbounds i8, i8* %20, i64 10
  %29 = bitcast i8* %28 to i16*
  %30 = load i16, i16* %29, align 1
  %31 = zext i16 %30 to i32
  %32 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 19
  store i32 %31, i32* %32, align 8
  %33 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 7
  %34 = load %struct.AVCodecInternal*, %struct.AVCodecInternal** %33, align 8
  %35 = icmp eq %struct.AVCodecInternal* %34, null
  br i1 %35, label %39, label %36

36:                                               ; preds = %27
  %37 = getelementptr inbounds %struct.AVCodecInternal, %struct.AVCodecInternal* %34, i64 0, i32 13
  store i32 %31, i32* %37, align 8
  %38 = load i8*, i8** %3, align 8
  br label %39

39:                                               ; preds = %27, %36
  %40 = phi i8* [ %4, %27 ], [ %38, %36 ]
  %41 = icmp eq i8* %40, null
  br i1 %41, label %42, label %47

42:                                               ; preds = %39
  %43 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 83
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, 1
  %46 = select i1 %45, i32 1, i32 2
  br label %54

47:                                               ; preds = %39
  %48 = getelementptr inbounds i8, i8* %20, i64 9
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = icmp eq i8 %49, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %47
  %53 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %53, i32 16, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.3, i64 0, i64 0)) #6
  br label %221

54:                                               ; preds = %42, %47
  %55 = phi i32 [ %46, %42 ], [ %50, %47 ]
  %56 = getelementptr inbounds i8, i8* %20, i64 16
  %57 = bitcast i8* %56 to i16*
  %58 = load i16, i16* %57, align 1
  %59 = getelementptr inbounds %struct.OpusContext, %struct.OpusContext* %1, i64 0, i32 6
  store i16 %58, i16* %59, align 8
  %60 = icmp eq i16 %58, 0
  br i1 %60, label %68, label %61

61:                                               ; preds = %54
  %62 = sitofp i16 %58 to double
  %63 = fdiv nsz double %62, 5.120000e+03
  %64 = fmul nsz double %63, 0x400A934F0979A371
  %65 = tail call nsz double @llvm.exp2.f64(double %64) #6
  %66 = fptrunc double %65 to float
  %67 = getelementptr inbounds %struct.OpusContext, %struct.OpusContext* %1, i64 0, i32 7
  store float %66, float* %67, align 4
  br label %68

68:                                               ; preds = %54, %61
  %69 = getelementptr inbounds i8, i8* %20, i64 18
  %70 = load i8, i8* %69, align 1
  switch i8 %70, label %144 [
    i8 0, label %71
    i8 -1, label %79
    i8 2, label %79
    i8 1, label %79
  ]

71:                                               ; preds = %68
  %72 = icmp ugt i32 %55, 2
  br i1 %72, label %73, label %75

73:                                               ; preds = %71
  %74 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %74, i32 16, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.4, i64 0, i64 0)) #6
  br label %221

75:                                               ; preds = %71
  %76 = icmp eq i32 %55, 1
  %77 = select i1 %76, i64 4, i64 3
  %78 = add nsw i32 %55, -1
  br label %147

79:                                               ; preds = %68, %68, %68
  %80 = add nuw nsw i32 %55, 21
  %81 = icmp slt i32 %19, %80
  br i1 %81, label %82, label %84

82:                                               ; preds = %79
  %83 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %83, i32 16, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0), i32 %19) #6
  br label %221

84:                                               ; preds = %79
  %85 = getelementptr inbounds i8, i8* %20, i64 19
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = getelementptr inbounds i8, i8* %20, i64 20
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = icmp eq i8 %86, 0
  %92 = icmp ugt i8 %89, %86
  %93 = or i1 %91, %92
  %94 = add nuw nsw i32 %90, %87
  %95 = icmp ugt i32 %94, 255
  %96 = or i1 %93, %95
  br i1 %96, label %97, label %99

97:                                               ; preds = %84
  %98 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %98, i32 16, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.5, i64 0, i64 0), i32 %87, i32 %90) #6
  br label %221

99:                                               ; preds = %84
  switch i8 %70, label %140 [
    i8 1, label %100
    i8 2, label %109
  ]

100:                                              ; preds = %99
  %101 = icmp ugt i32 %55, 8
  br i1 %101, label %102, label %104

102:                                              ; preds = %100
  %103 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %103, i32 16, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.6, i64 0, i64 0)) #6
  br label %221

104:                                              ; preds = %100
  %105 = add nsw i32 %55, -1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds [9 x i64], [9 x i64]* @ff_vorbis_channel_layouts, i64 0, i64 %106
  %108 = load i64, i64* %107, align 8
  br label %140

109:                                              ; preds = %99
  %110 = icmp eq i32 %55, 255
  br i1 %110, label %119, label %111

111:                                              ; preds = %109
  %112 = add nuw nsw i32 %55, 1
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds [256 x i8], [256 x i8]* @ff_sqrt_tab, i64 0, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = add nsw i32 %116, -1
  %118 = ashr i32 %117, 4
  br label %127

119:                                              ; preds = %109
  %120 = load i8, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @ff_sqrt_tab, i64 0, i64 15), align 1
  %121 = lshr i8 %120, 2
  %122 = zext i8 %121 to i32
  %123 = call { i8, i1 } @llvm.umul.with.overflow.i8(i8 %121, i8 %121)
  %124 = extractvalue { i8, i1 } %123, 1
  %125 = zext i1 %124 to i32
  %126 = sub nsw i32 %122, %125
  br label %127

127:                                              ; preds = %111, %119
  %128 = phi i32 [ %118, %111 ], [ %126, %119 ]
  %129 = mul nsw i32 %128, %128
  %130 = icmp eq i32 %55, %129
  %131 = add nuw nsw i32 %129, 2
  %132 = icmp eq i32 %55, %131
  %133 = or i1 %130, %132
  br i1 %133, label %136, label %134

134:                                              ; preds = %127
  %135 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %135, i32 16, i8* getelementptr inbounds ([133 x i8], [133 x i8]* @.str.7, i64 0, i64 0)) #6
  br label %221

136:                                              ; preds = %127
  %137 = icmp ugt i32 %55, 227
  br i1 %137, label %138, label %140

138:                                              ; preds = %136
  %139 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %139, i32 16, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8, i64 0, i64 0)) #6
  br label %221

140:                                              ; preds = %136, %99, %104
  %141 = phi i32 (i32, i32)* [ @channel_reorder_vorbis, %104 ], [ @channel_reorder_unknown, %99 ], [ @channel_reorder_unknown, %136 ]
  %142 = phi i64 [ %108, %104 ], [ 0, %99 ], [ 0, %136 ]
  %143 = getelementptr inbounds i8, i8* %20, i64 21
  br label %147

144:                                              ; preds = %68
  %145 = zext i8 %70 to i32
  %146 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i8*, ...) @avpriv_request_sample(i8* %146, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), i32 %145) #6
  br label %221

147:                                              ; preds = %140, %75
  %148 = phi i32 (i32, i32)* [ %141, %140 ], [ @channel_reorder_unknown, %75 ]
  %149 = phi i8* [ %143, %140 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @ff_opus_parse_extradata.default_channel_map, i64 0, i64 0), %75 ]
  %150 = phi i32 [ %87, %140 ], [ 1, %75 ]
  %151 = phi i32 [ %90, %140 ], [ %78, %75 ]
  %152 = phi i64 [ %142, %140 ], [ %77, %75 ]
  %153 = zext i32 %55 to i64
  %154 = tail call i8* @av_mallocz_array(i64 %153, i64 20) #6
  %155 = getelementptr inbounds %struct.OpusContext, %struct.OpusContext* %1, i64 0, i32 8
  %156 = bitcast %struct.ChannelMap** %155 to i8**
  store i8* %154, i8** %156, align 8
  %157 = icmp eq i8* %154, null
  %158 = bitcast i8* %154 to %struct.ChannelMap*
  br i1 %157, label %221, label %159

159:                                              ; preds = %147
  %160 = icmp eq i32 %55, 0
  br i1 %160, label %216, label %161

161:                                              ; preds = %159
  %162 = add nsw i32 %151, %150
  %163 = shl nsw i32 %151, 1
  br label %164

164:                                              ; preds = %214, %161
  %165 = phi %struct.ChannelMap* [ %158, %161 ], [ %215, %214 ]
  %166 = phi i64 [ 0, %161 ], [ %212, %214 ]
  %167 = getelementptr inbounds %struct.ChannelMap, %struct.ChannelMap* %165, i64 %166
  %168 = trunc i64 %166 to i32
  %169 = tail call i32 %148(i32 %55, i32 %168) #6, !callees !5
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds i8, i8* %149, i64 %170
  %172 = load i8, i8* %171, align 1
  %173 = zext i8 %172 to i32
  %174 = icmp eq i8 %172, -1
  br i1 %174, label %175, label %177

175:                                              ; preds = %164
  %176 = getelementptr inbounds %struct.ChannelMap, %struct.ChannelMap* %165, i64 %166, i32 4
  store i32 1, i32* %176, align 4
  br label %211

177:                                              ; preds = %164
  %178 = icmp sgt i32 %162, %173
  br i1 %178, label %179, label %206

179:                                              ; preds = %177
  %180 = getelementptr inbounds %struct.ChannelMap, %struct.ChannelMap* %165, i64 %166, i32 2
  store i32 0, i32* %180, align 4
  %181 = icmp eq i64 %166, 0
  br i1 %181, label %195, label %182

182:                                              ; preds = %179, %191
  %183 = phi i32 [ %192, %191 ], [ 0, %179 ]
  %184 = tail call i32 %148(i32 %55, i32 %183) #6, !callees !5
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds i8, i8* %149, i64 %185
  %187 = load i8, i8* %186, align 1
  %188 = icmp eq i8 %187, %172
  br i1 %188, label %189, label %191

189:                                              ; preds = %182
  store i32 1, i32* %180, align 4
  %190 = getelementptr inbounds %struct.ChannelMap, %struct.ChannelMap* %165, i64 %166, i32 3
  store i32 %183, i32* %190, align 4
  br label %195

191:                                              ; preds = %182
  %192 = add nuw nsw i32 %183, 1
  %193 = zext i32 %192 to i64
  %194 = icmp eq i64 %166, %193
  br i1 %194, label %195, label %182

195:                                              ; preds = %191, %179, %189
  %196 = icmp sgt i32 %163, %173
  br i1 %196, label %197, label %202

197:                                              ; preds = %195
  %198 = lshr i32 %173, 1
  %199 = getelementptr inbounds %struct.ChannelMap, %struct.ChannelMap* %167, i64 0, i32 0
  store i32 %198, i32* %199, align 4
  %200 = and i32 %173, 1
  %201 = getelementptr inbounds %struct.ChannelMap, %struct.ChannelMap* %165, i64 %166, i32 1
  store i32 %200, i32* %201, align 4
  br label %211

202:                                              ; preds = %195
  %203 = sub nsw i32 %173, %151
  %204 = getelementptr inbounds %struct.ChannelMap, %struct.ChannelMap* %167, i64 0, i32 0
  store i32 %203, i32* %204, align 4
  %205 = getelementptr inbounds %struct.ChannelMap, %struct.ChannelMap* %165, i64 %166, i32 1
  store i32 0, i32* %205, align 4
  br label %211

206:                                              ; preds = %177
  %207 = trunc i64 %166 to i32
  %208 = zext i8 %172 to i32
  %209 = bitcast %struct.AVCodecContext* %0 to i8*
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %209, i32 16, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.10, i64 0, i64 0), i32 %207, i32 %208) #6
  %210 = bitcast %struct.ChannelMap** %155 to i8*
  tail call void @av_freep(i8* %210) #6
  br label %221

211:                                              ; preds = %175, %202, %197
  %212 = add nuw nsw i64 %166, 1
  %213 = icmp eq i64 %212, %153
  br i1 %213, label %216, label %214

214:                                              ; preds = %211
  %215 = load %struct.ChannelMap*, %struct.ChannelMap** %155, align 8
  br label %164

216:                                              ; preds = %211, %159
  %217 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 83
  store i32 %55, i32* %217, align 4
  %218 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 89
  store i64 %152, i64* %218, align 8
  %219 = getelementptr inbounds %struct.OpusContext, %struct.OpusContext* %1, i64 0, i32 3
  store i32 %150, i32* %219, align 4
  %220 = getelementptr inbounds %struct.OpusContext, %struct.OpusContext* %1, i64 0, i32 4
  store i32 %151, i32* %220, align 8
  br label %221

221:                                              ; preds = %138, %134, %206, %147, %216, %144, %102, %97, %82, %73, %52, %24, %16, %10
  %222 = phi i32 [ -1094995529, %16 ], [ -1163346256, %24 ], [ -1094995529, %82 ], [ -1094995529, %97 ], [ -1094995529, %102 ], [ -1094995529, %206 ], [ 0, %216 ], [ -1163346256, %144 ], [ -1094995529, %73 ], [ -1094995529, %52 ], [ -22, %10 ], [ -12, %147 ], [ -1094995529, %134 ], [ -1094995529, %138 ]
  ret i32 %222
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @channel_reorder_unknown(i32, i32 returned) unnamed_addr #3 {
  ret i32 %1
}

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #4

declare void @avpriv_request_sample(i8*, i8*, ...) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @channel_reorder_vorbis(i32, i32) unnamed_addr #3 {
  %3 = add nsw i32 %0, -1
  %4 = sext i32 %3 to i64
  %5 = sext i32 %1 to i64
  %6 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* @ff_vorbis_channel_layout_offsets, i64 0, i64 %4, i64 %5
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  ret i32 %8
}

declare i8* @av_mallocz_array(i64, i64) local_unnamed_addr #4

declare void @av_freep(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_celt_quant_bands(%struct.CeltFrame*, %struct.OpusRangeCoder*) local_unnamed_addr #0 {
  %3 = alloca [176 x float], align 16
  %4 = alloca [1600 x float], align 16
  %5 = bitcast [176 x float]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 704, i8* nonnull %5) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -1, i64 704, i1 false)
  %6 = bitcast [1600 x float]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 6400, i8* nonnull %6) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -1, i64 6400, i1 false)
  %7 = getelementptr inbounds [1600 x float], [1600 x float]* %4, i64 0, i64 800
  %8 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 34
  %9 = load i32, i32* %8, align 4
  %10 = shl i32 %9, 3
  %11 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 23
  %12 = load i32, i32* %11, align 8
  %13 = sub nsw i32 %10, %12
  %14 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 11
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 12
  %17 = load i32, i32* %16, align 4
  %18 = icmp slt i32 %15, %17
  br i1 %18, label %19, label %310

19:                                               ; preds = %2
  %20 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 20
  %21 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 10
  %22 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 7
  %23 = getelementptr inbounds %struct.OpusRangeCoder, %struct.OpusRangeCoder* %1, i64 0, i32 4
  %24 = getelementptr inbounds %struct.OpusRangeCoder, %struct.OpusRangeCoder* %1, i64 0, i32 2
  %25 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 35
  %26 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 36
  %27 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 13
  %28 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 29
  %29 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 26
  %30 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 25
  %31 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 5
  %32 = getelementptr inbounds [176 x float], [176 x float]* %3, i64 0, i64 0
  %33 = sext i32 %15 to i64
  br label %34

34:                                               ; preds = %305, %19
  %35 = phi i32 [ %15, %19 ], [ %309, %305 ]
  %36 = phi i64 [ %33, %19 ], [ %301, %305 ]
  %37 = phi i32 [ 0, %19 ], [ %127, %305 ]
  %38 = phi i32 [ 1, %19 ], [ %308, %305 ]
  %39 = load i32, i32* %20, align 4
  %40 = shl nsw i32 -1, %39
  %41 = xor i32 %40, -1
  %42 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_freq_bands, i64 0, i64 %36
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = load i32, i32* %21, align 4
  %46 = shl i32 %44, %45
  %47 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_freq_range, i64 0, i64 %36
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = shl i32 %49, %45
  %51 = sext i32 %46 to i64
  %52 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 4, i64 0, i32 7, i64 %51
  %53 = load i32, i32* %22, align 8
  %54 = icmp eq i32 %53, 2
  %55 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 4, i64 1, i32 7, i64 %51
  %56 = select i1 %54, float* %55, float* null
  %57 = load i32, i32* %23, align 8
  %58 = load i32, i32* %24, align 8
  %59 = or i32 %58, 1
  %60 = call i32 @llvm.ctlz.i32(i32 %59, i1 true) #6, !range !6
  %61 = sub nsw i32 16, %60
  %62 = lshr i32 %58, %61
  %63 = mul i32 %62, %62
  %64 = lshr i32 %63, 15
  %65 = lshr i32 %63, 31
  %66 = shl nuw nsw i32 %60, 1
  %67 = sub nuw nsw i32 64, %66
  %68 = or i32 %65, %67
  %69 = lshr i32 %64, %65
  %70 = mul i32 %69, %69
  %71 = lshr i32 %70, 15
  %72 = lshr i32 %70, 31
  %73 = shl nuw nsw i32 %68, 1
  %74 = or i32 %72, %73
  %75 = lshr i32 %71, %72
  %76 = mul i32 %75, %75
  %77 = lshr i32 %76, 31
  %78 = shl nuw nsw i32 %74, 1
  %79 = or i32 %77, %78
  %80 = shl i32 %57, 3
  %81 = sub i32 %80, %79
  %82 = trunc i64 %36 to i32
  %83 = icmp eq i32 %35, %82
  br i1 %83, label %87, label %84

84:                                               ; preds = %34
  %85 = load i32, i32* %25, align 8
  %86 = sub nsw i32 %85, %81
  store i32 %86, i32* %25, align 8
  br label %87

87:                                               ; preds = %34, %84
  %88 = xor i32 %81, -1
  %89 = add i32 %13, %88
  store i32 %89, i32* %26, align 4
  %90 = load i32, i32* %27, align 16
  %91 = sext i32 %90 to i64
  %92 = icmp slt i64 %36, %91
  br i1 %92, label %93, label %110

93:                                               ; preds = %87
  %94 = load i32, i32* %25, align 8
  %95 = sub nsw i32 %90, %82
  %96 = icmp slt i32 %95, 3
  %97 = select i1 %96, i32 %95, i32 3
  %98 = sdiv i32 %94, %97
  %99 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 40, i64 %36
  %100 = load i32, i32* %99, align 4
  %101 = add nsw i32 %100, %98
  %102 = icmp slt i32 %89, %101
  %103 = sub i32 %13, %81
  %104 = select i1 %102, i32 %103, i32 %101
  %105 = icmp ugt i32 %104, 16383
  br i1 %105, label %106, label %110

106:                                              ; preds = %93
  %107 = ashr i32 %104, 31
  %108 = and i32 %107, 16383
  %109 = xor i32 %108, 16383
  br label %110

110:                                              ; preds = %106, %93, %87
  %111 = phi i32 [ 0, %87 ], [ %109, %106 ], [ %104, %93 ]
  %112 = sub nsw i32 %44, %49
  %113 = sext i32 %35 to i64
  %114 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_freq_bands, i64 0, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = icmp sge i32 %112, %116
  %118 = add nsw i32 %35, 1
  %119 = icmp eq i32 %118, %82
  %120 = or i1 %119, %117
  br i1 %120, label %121, label %126

121:                                              ; preds = %110
  %122 = icmp ne i32 %38, 0
  %123 = icmp eq i32 %37, 0
  %124 = or i1 %122, %123
  %125 = select i1 %124, i32 %82, i32 %37
  br label %126

126:                                              ; preds = %121, %110
  %127 = phi i32 [ %37, %110 ], [ %125, %121 ]
  br i1 %119, label %128, label %148

128:                                              ; preds = %126
  %129 = add nsw i64 %36, -1
  %130 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_freq_range, i64 0, i64 %129
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = sub nsw i32 %49, %132
  %134 = shl i32 %133, %45
  %135 = getelementptr inbounds [1600 x float], [1600 x float]* %4, i64 0, i64 %51
  %136 = bitcast float* %135 to i8*
  %137 = sub nsw i32 %46, %134
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds [1600 x float], [1600 x float]* %4, i64 0, i64 %138
  %140 = bitcast float* %139 to i8*
  %141 = sext i32 %134 to i64
  %142 = shl nsw i64 %141, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %136, i8* align 4 %140, i64 %142, i1 false)
  br i1 %54, label %143, label %148

143:                                              ; preds = %128
  %144 = getelementptr inbounds float, float* %7, i64 %51
  %145 = bitcast float* %144 to i8*
  %146 = getelementptr inbounds float, float* %7, i64 %138
  %147 = bitcast float* %146 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %145, i8* align 4 %147, i64 %142, i1 false)
  br label %148

148:                                              ; preds = %128, %143, %126
  %149 = icmp eq i32 %127, 0
  br i1 %149, label %211, label %150

150:                                              ; preds = %148
  %151 = load i32, i32* %28, align 32
  %152 = icmp ne i32 %151, 3
  %153 = icmp sgt i32 %39, 1
  %154 = or i1 %153, %152
  br i1 %154, label %159, label %155

155:                                              ; preds = %150
  %156 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 41, i64 %36
  %157 = load i32, i32* %156, align 4
  %158 = icmp slt i32 %157, 0
  br i1 %158, label %159, label %211

159:                                              ; preds = %150, %155
  %160 = sext i32 %127 to i64
  %161 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_freq_bands, i64 0, i64 %160
  %162 = load i8, i8* %161, align 1
  %163 = zext i8 %162 to i32
  %164 = sub nsw i32 %163, %49
  %165 = icmp slt i32 %164, %116
  %166 = select i1 %165, i32 %116, i32 %164
  br label %167

167:                                              ; preds = %167, %159
  %168 = phi i64 [ %169, %167 ], [ %160, %159 ]
  %169 = add nsw i64 %168, -1
  %170 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_freq_bands, i64 0, i64 %169
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i32
  %173 = icmp slt i32 %166, %172
  br i1 %173, label %167, label %174

174:                                              ; preds = %167
  %175 = trunc i64 %169 to i32
  %176 = add nuw nsw i32 %166, %49
  %177 = add nsw i64 %160, -1
  br label %178

178:                                              ; preds = %182, %174
  %179 = phi i64 [ %180, %182 ], [ %177, %174 ]
  %180 = add nsw i64 %179, 1
  %181 = icmp slt i64 %180, %36
  br i1 %181, label %182, label %187

182:                                              ; preds = %178
  %183 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_freq_bands, i64 0, i64 %180
  %184 = load i8, i8* %183, align 1
  %185 = zext i8 %184 to i32
  %186 = icmp ugt i32 %176, %185
  br i1 %186, label %178, label %187

187:                                              ; preds = %178, %182
  %188 = trunc i64 %179 to i32
  %189 = icmp sgt i32 %175, %188
  br i1 %189, label %211, label %190

190:                                              ; preds = %187
  %191 = add nsw i32 %53, -1
  %192 = sext i32 %191 to i64
  %193 = shl i64 %169, 32
  %194 = ashr exact i64 %193, 32
  %195 = shl i64 %179, 32
  %196 = ashr exact i64 %195, 32
  br label %197

197:                                              ; preds = %197, %190
  %198 = phi i64 [ %209, %197 ], [ %194, %190 ]
  %199 = phi i32 [ %204, %197 ], [ 0, %190 ]
  %200 = phi i32 [ %208, %197 ], [ 0, %190 ]
  %201 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 4, i64 0, i32 4, i64 %198
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i32
  %204 = or i32 %199, %203
  %205 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 4, i64 %192, i32 4, i64 %198
  %206 = load i8, i8* %205, align 1
  %207 = zext i8 %206 to i32
  %208 = or i32 %200, %207
  %209 = add nsw i64 %198, 1
  %210 = icmp slt i64 %198, %196
  br i1 %210, label %197, label %211

211:                                              ; preds = %197, %187, %148, %155
  %212 = phi i32 [ %41, %155 ], [ %41, %148 ], [ 0, %187 ], [ %208, %197 ]
  %213 = phi i32 [ %41, %155 ], [ %41, %148 ], [ 0, %187 ], [ %204, %197 ]
  %214 = phi i32 [ -1, %155 ], [ -1, %148 ], [ %166, %187 ], [ %166, %197 ]
  %215 = load i32, i32* %29, align 4
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %258, label %217

217:                                              ; preds = %211
  %218 = load i32, i32* %30, align 16
  %219 = icmp eq i32 %218, %82
  br i1 %219, label %220, label %258

220:                                              ; preds = %217
  store i32 0, i32* %29, align 4
  %221 = shl i32 %116, %45
  %222 = icmp slt i32 %221, %46
  br i1 %222, label %223, label %258

223:                                              ; preds = %220
  %224 = sext i32 %221 to i64
  %225 = sub nsw i64 %51, %224
  %226 = xor i64 %224, -1
  %227 = and i64 %225, 1
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %237, label %229

229:                                              ; preds = %223
  %230 = getelementptr inbounds [1600 x float], [1600 x float]* %4, i64 0, i64 %224
  %231 = load float, float* %230, align 4
  %232 = getelementptr inbounds float, float* %7, i64 %224
  %233 = load float, float* %232, align 4
  %234 = fadd nsz float %231, %233
  %235 = fmul nsz float %234, 5.000000e-01
  store float %235, float* %230, align 4
  %236 = add nsw i64 %224, 1
  br label %237

237:                                              ; preds = %229, %223
  %238 = phi i64 [ %236, %229 ], [ %224, %223 ]
  %239 = sub nsw i64 0, %51
  %240 = icmp eq i64 %226, %239
  br i1 %240, label %258, label %241

241:                                              ; preds = %237, %241
  %242 = phi i64 [ %256, %241 ], [ %238, %237 ]
  %243 = getelementptr inbounds [1600 x float], [1600 x float]* %4, i64 0, i64 %242
  %244 = load float, float* %243, align 4
  %245 = getelementptr inbounds float, float* %7, i64 %242
  %246 = load float, float* %245, align 4
  %247 = fadd nsz float %244, %246
  %248 = fmul nsz float %247, 5.000000e-01
  store float %248, float* %243, align 4
  %249 = add nsw i64 %242, 1
  %250 = getelementptr inbounds [1600 x float], [1600 x float]* %4, i64 0, i64 %249
  %251 = load float, float* %250, align 4
  %252 = getelementptr inbounds float, float* %7, i64 %249
  %253 = load float, float* %252, align 4
  %254 = fadd nsz float %251, %253
  %255 = fmul nsz float %254, 5.000000e-01
  store float %255, float* %250, align 4
  %256 = add nsw i64 %242, 2
  %257 = icmp eq i64 %256, %51
  br i1 %257, label %258, label %241

258:                                              ; preds = %237, %241, %220, %211, %217
  %259 = phi i32 [ 0, %220 ], [ 0, %211 ], [ %215, %217 ], [ 0, %241 ], [ 0, %237 ]
  %260 = icmp eq i32 %214, -1
  %261 = shl i32 %214, %45
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds [1600 x float], [1600 x float]* %4, i64 0, i64 %262
  %264 = select i1 %260, float* null, float* %263
  %265 = icmp eq i32 %259, 0
  %266 = load %struct.CeltPVQ*, %struct.CeltPVQ** %31, align 32
  %267 = getelementptr inbounds %struct.CeltPVQ, %struct.CeltPVQ* %266, i64 0, i32 3
  %268 = load i32 (%struct.CeltPVQ*, %struct.CeltFrame*, %struct.OpusRangeCoder*, i32, float*, float*, i32, i32, i32, float*, i32, float*, i32, float, float*, i32)*, i32 (%struct.CeltPVQ*, %struct.CeltFrame*, %struct.OpusRangeCoder*, i32, float*, float*, i32, i32, i32, float*, i32, float*, i32, float, float*, i32)** %267, align 8
  br i1 %265, label %282, label %269

269:                                              ; preds = %258
  %270 = getelementptr inbounds float, float* %7, i64 %262
  %271 = select i1 %260, float* null, float* %270
  %272 = ashr i32 %111, 1
  %273 = getelementptr inbounds [1600 x float], [1600 x float]* %4, i64 0, i64 %51
  %274 = call i32 %268(%struct.CeltPVQ* %266, %struct.CeltFrame* %0, %struct.OpusRangeCoder* %1, i32 %82, float* %52, float* null, i32 %50, i32 %272, i32 %39, float* %264, i32 %45, float* %273, i32 0, float 1.000000e+00, float* nonnull %32, i32 %213) #6
  %275 = load %struct.CeltPVQ*, %struct.CeltPVQ** %31, align 32
  %276 = getelementptr inbounds %struct.CeltPVQ, %struct.CeltPVQ* %275, i64 0, i32 3
  %277 = load i32 (%struct.CeltPVQ*, %struct.CeltFrame*, %struct.OpusRangeCoder*, i32, float*, float*, i32, i32, i32, float*, i32, float*, i32, float, float*, i32)*, i32 (%struct.CeltPVQ*, %struct.CeltFrame*, %struct.OpusRangeCoder*, i32, float*, float*, i32, i32, i32, float*, i32, float*, i32, float, float*, i32)** %276, align 8
  %278 = load i32, i32* %20, align 4
  %279 = load i32, i32* %21, align 4
  %280 = getelementptr inbounds float, float* %7, i64 %51
  %281 = call i32 %277(%struct.CeltPVQ* %275, %struct.CeltFrame* %0, %struct.OpusRangeCoder* %1, i32 %82, float* %56, float* null, i32 %50, i32 %272, i32 %278, float* %271, i32 %279, float* %280, i32 0, float 1.000000e+00, float* nonnull %32, i32 %212) #6
  br label %286

282:                                              ; preds = %258
  %283 = getelementptr inbounds [1600 x float], [1600 x float]* %4, i64 0, i64 %51
  %284 = or i32 %213, %212
  %285 = call i32 %268(%struct.CeltPVQ* %266, %struct.CeltFrame* %0, %struct.OpusRangeCoder* %1, i32 %82, float* %52, float* %56, i32 %50, i32 %111, i32 %39, float* %264, i32 %45, float* %283, i32 0, float 1.000000e+00, float* nonnull %32, i32 %284) #6
  br label %286

286:                                              ; preds = %282, %269
  %287 = phi i32 [ %281, %269 ], [ %285, %282 ]
  %288 = phi i32 [ %274, %269 ], [ %285, %282 ]
  %289 = trunc i32 %288 to i8
  %290 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 4, i64 0, i32 4, i64 %36
  store i8 %289, i8* %290, align 1
  %291 = trunc i32 %287 to i8
  %292 = load i32, i32* %22, align 8
  %293 = add nsw i32 %292, -1
  %294 = sext i32 %293 to i64
  %295 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 4, i64 %294, i32 4, i64 %36
  store i8 %291, i8* %295, align 1
  %296 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 40, i64 %36
  %297 = load i32, i32* %296, align 4
  %298 = add nsw i32 %297, %81
  %299 = load i32, i32* %25, align 8
  %300 = add nsw i32 %298, %299
  store i32 %300, i32* %25, align 8
  %301 = add nsw i64 %36, 1
  %302 = load i32, i32* %16, align 4
  %303 = sext i32 %302 to i64
  %304 = icmp slt i64 %301, %303
  br i1 %304, label %305, label %310

305:                                              ; preds = %286
  %306 = shl i32 %50, 3
  %307 = icmp sgt i32 %111, %306
  %308 = zext i1 %307 to i32
  %309 = load i32, i32* %14, align 8
  br label %34

310:                                              ; preds = %286, %2
  call void @llvm.lifetime.end.p0i8(i64 6400, i8* nonnull %6) #6
  call void @llvm.lifetime.end.p0i8(i64 704, i8* nonnull %5) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @ff_celt_bitalloc(%struct.CeltFrame*, %struct.OpusRangeCoder*, i32) local_unnamed_addr #0 {
  %4 = alloca [21 x i32], align 16
  %5 = alloca [21 x i32], align 16
  %6 = alloca [21 x i32], align 16
  %7 = alloca [21 x i32], align 16
  %8 = alloca [21 x i32], align 16
  %9 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 11
  %10 = load i32, i32* %9, align 8
  %11 = bitcast [21 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 84, i8* nonnull %11) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 0, i64 84, i1 false)
  %12 = bitcast [21 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 84, i8* nonnull %12) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 84, i1 false)
  %13 = bitcast [21 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 84, i8* nonnull %13) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 84, i1 false)
  %14 = bitcast [21 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 84, i8* nonnull %14) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 84, i1 false)
  %15 = bitcast [21 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 84, i8* nonnull %15) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 84, i1 false)
  %16 = getelementptr inbounds %struct.OpusRangeCoder, %struct.OpusRangeCoder* %1, i64 0, i32 4
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.OpusRangeCoder, %struct.OpusRangeCoder* %1, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = or i32 %19, 1
  %21 = tail call i32 @llvm.ctlz.i32(i32 %20, i1 true) #6, !range !6
  %22 = or i32 %21, -32
  %23 = add i32 %17, 4
  %24 = add i32 %23, %22
  %25 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 34
  %26 = load i32, i32* %25, align 4
  %27 = icmp ugt i32 %24, %26
  br i1 %27, label %36, label %28

28:                                               ; preds = %3
  %29 = icmp eq i32 %2, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %28
  %31 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 29
  %32 = load i32, i32* %31, align 32
  tail call void @ff_opus_rc_enc_cdf(%struct.OpusRangeCoder* %1, i32 %32, i16* getelementptr inbounds ([0 x i16], [0 x i16]* @ff_celt_model_spread, i64 0, i64 0)) #6
  br label %38

33:                                               ; preds = %28
  %34 = tail call i32 @ff_opus_rc_dec_cdf(%struct.OpusRangeCoder* %1, i16* getelementptr inbounds ([0 x i16], [0 x i16]* @ff_celt_model_spread, i64 0, i64 0)) #6
  %35 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 29
  store i32 %34, i32* %35, align 32
  br label %38

36:                                               ; preds = %3
  %37 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 29
  store i32 2, i32* %37, align 32
  br label %38

38:                                               ; preds = %30, %33, %36
  %39 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 10
  %40 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 7
  %41 = load i32, i32* %39, align 4
  %42 = load i32, i32* %40, align 8
  %43 = zext i32 %41 to i64
  %44 = add nsw i32 %42, -1
  %45 = sext i32 %44 to i64
  br label %46

46:                                               ; preds = %869, %38
  %47 = phi i64 [ 0, %38 ], [ %882, %869 ]
  %48 = getelementptr inbounds [4 x [2 x [21 x i8]]], [4 x [2 x [21 x i8]]]* @ff_celt_static_caps, i64 0, i64 %43, i64 %45, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = add nuw nsw i32 %50, 64
  %52 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_freq_range, i64 0, i64 %47
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = mul nuw nsw i32 %51, %54
  %56 = shl i32 %55, %44
  %57 = shl i32 %56, %41
  %58 = ashr i32 %57, 2
  %59 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 37, i64 %47
  store i32 %58, i32* %59, align 4
  %60 = or i64 %47, 1
  %61 = icmp eq i64 %60, 21
  br i1 %61, label %62, label %869

62:                                               ; preds = %46
  %63 = load i32, i32* %25, align 4
  %64 = shl i32 %63, 3
  %65 = load i32, i32* %9, align 8
  %66 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 12
  %67 = load i32, i32* %66, align 4
  %68 = icmp slt i32 %65, %67
  br i1 %68, label %69, label %156

69:                                               ; preds = %62
  %70 = icmp eq i32 %2, 0
  %71 = sext i32 %65 to i64
  br label %72

72:                                               ; preds = %153, %69
  %73 = phi i32 [ %41, %69 ], [ %155, %153 ]
  %74 = phi i32 [ %42, %69 ], [ %154, %153 ]
  %75 = phi i64 [ %71, %69 ], [ %149, %153 ]
  %76 = phi i32 [ 6, %69 ], [ %148, %153 ]
  %77 = phi i32 [ %64, %69 ], [ %96, %153 ]
  %78 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_freq_range, i64 0, i64 %75
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = add nsw i32 %74, -1
  %82 = shl i32 %80, %81
  %83 = shl i32 %82, %73
  %84 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 19, i64 %75
  %85 = load i32, i32* %84, align 4
  %86 = shl i32 %83, 3
  %87 = icmp sgt i32 %83, 48
  %88 = select i1 %87, i32 %83, i32 48
  %89 = icmp sgt i32 %86, %88
  %90 = select i1 %89, i32 %88, i32 %86
  %91 = getelementptr inbounds [21 x i32], [21 x i32]* %4, i64 0, i64 %75
  %92 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 37, i64 %75
  %93 = load i32, i32* %91, align 4
  br label %94

94:                                               ; preds = %138, %72
  %95 = phi i32 [ %93, %72 ], [ %139, %138 ]
  %96 = phi i32 [ %77, %72 ], [ %140, %138 ]
  %97 = phi i32 [ %76, %72 ], [ 1, %138 ]
  %98 = phi i32 [ %85, %72 ], [ %135, %138 ]
  %99 = load i32, i32* %16, align 8
  %100 = load i32, i32* %18, align 8
  %101 = or i32 %100, 1
  %102 = tail call i32 @llvm.ctlz.i32(i32 %101, i1 true) #6, !range !6
  %103 = sub nsw i32 16, %102
  %104 = lshr i32 %100, %103
  %105 = mul i32 %104, %104
  %106 = lshr i32 %105, 15
  %107 = lshr i32 %105, 31
  %108 = shl nuw nsw i32 %102, 1
  %109 = sub nuw nsw i32 64, %108
  %110 = or i32 %107, %109
  %111 = lshr i32 %106, %107
  %112 = mul i32 %111, %111
  %113 = lshr i32 %112, 15
  %114 = lshr i32 %112, 31
  %115 = shl nuw nsw i32 %110, 1
  %116 = or i32 %114, %115
  %117 = lshr i32 %113, %114
  %118 = mul i32 %117, %117
  %119 = lshr i32 %118, 31
  %120 = shl nuw nsw i32 %116, 1
  %121 = or i32 %119, %120
  %122 = add i32 %99, %97
  %123 = shl i32 %122, 3
  %124 = sub i32 %123, %121
  %125 = icmp ult i32 %124, %96
  br i1 %125, label %126, label %141

126:                                              ; preds = %94
  %127 = load i32, i32* %92, align 4
  %128 = icmp slt i32 %95, %127
  br i1 %128, label %129, label %141

129:                                              ; preds = %126
  br i1 %70, label %132, label %130

130:                                              ; preds = %129
  %131 = add nsw i32 %98, -1
  tail call void @ff_opus_rc_enc_log(%struct.OpusRangeCoder* %1, i32 %98, i32 %97) #6
  br label %134

132:                                              ; preds = %129
  %133 = tail call i32 @ff_opus_rc_dec_log(%struct.OpusRangeCoder* %1, i32 %97) #6
  br label %134

134:                                              ; preds = %132, %130
  %135 = phi i32 [ %131, %130 ], [ %98, %132 ]
  %136 = phi i32 [ %98, %130 ], [ %133, %132 ]
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %141, label %138

138:                                              ; preds = %134
  %139 = add nsw i32 %95, %90
  %140 = sub nsw i32 %96, %90
  br label %94

141:                                              ; preds = %134, %126, %94
  store i32 %95, i32* %91, align 4
  %142 = icmp eq i32 %95, 0
  br i1 %142, label %147, label %143

143:                                              ; preds = %141
  %144 = icmp sgt i32 %76, 3
  %145 = select i1 %144, i32 %76, i32 3
  %146 = add nsw i32 %145, -1
  br label %147

147:                                              ; preds = %141, %143
  %148 = phi i32 [ %146, %143 ], [ %76, %141 ]
  %149 = add nsw i64 %75, 1
  %150 = load i32, i32* %66, align 4
  %151 = sext i32 %150 to i64
  %152 = icmp slt i64 %149, %151
  br i1 %152, label %153, label %156

153:                                              ; preds = %147
  %154 = load i32, i32* %40, align 8
  %155 = load i32, i32* %39, align 4
  br label %72

156:                                              ; preds = %147, %62
  %157 = phi i32 [ %64, %62 ], [ %96, %147 ]
  %158 = icmp ne i32 %2, 0
  br i1 %158, label %161, label %159

159:                                              ; preds = %156
  %160 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 18
  store i32 5, i32* %160, align 4
  br label %161

161:                                              ; preds = %159, %156
  %162 = load i32, i32* %16, align 8
  %163 = load i32, i32* %18, align 8
  %164 = or i32 %163, 1
  %165 = tail call i32 @llvm.ctlz.i32(i32 %164, i1 true) #6, !range !6
  %166 = sub nsw i32 16, %165
  %167 = lshr i32 %163, %166
  %168 = mul i32 %167, %167
  %169 = lshr i32 %168, 15
  %170 = lshr i32 %168, 31
  %171 = shl nuw nsw i32 %165, 1
  %172 = sub nuw nsw i32 64, %171
  %173 = or i32 %170, %172
  %174 = lshr i32 %169, %170
  %175 = mul i32 %174, %174
  %176 = lshr i32 %175, 15
  %177 = lshr i32 %175, 31
  %178 = shl nuw nsw i32 %173, 1
  %179 = or i32 %177, %178
  %180 = lshr i32 %176, %177
  %181 = mul i32 %180, %180
  %182 = lshr i32 %181, 31
  %183 = shl nuw nsw i32 %179, 1
  %184 = or i32 %182, %183
  %185 = shl i32 %162, 3
  %186 = add i32 %185, 48
  %187 = sub i32 %186, %184
  %188 = icmp ugt i32 %187, %157
  br i1 %188, label %196, label %189

189:                                              ; preds = %161
  br i1 %158, label %190, label %193

190:                                              ; preds = %189
  %191 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 18
  %192 = load i32, i32* %191, align 4
  tail call void @ff_opus_rc_enc_cdf(%struct.OpusRangeCoder* %1, i32 %192, i16* getelementptr inbounds ([0 x i16], [0 x i16]* @ff_celt_model_alloc_trim, i64 0, i64 0)) #6
  br label %196

193:                                              ; preds = %189
  %194 = tail call i32 @ff_opus_rc_dec_cdf(%struct.OpusRangeCoder* %1, i16* getelementptr inbounds ([0 x i16], [0 x i16]* @ff_celt_model_alloc_trim, i64 0, i64 0)) #6
  %195 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 18
  store i32 %194, i32* %195, align 4
  br label %196

196:                                              ; preds = %161, %190, %193
  %197 = load i32, i32* %25, align 4
  %198 = shl i32 %197, 3
  %199 = load i32, i32* %16, align 8
  %200 = load i32, i32* %18, align 8
  %201 = or i32 %200, 1
  %202 = tail call i32 @llvm.ctlz.i32(i32 %201, i1 true) #6, !range !6
  %203 = sub nsw i32 16, %202
  %204 = lshr i32 %200, %203
  %205 = mul i32 %204, %204
  %206 = lshr i32 %205, 15
  %207 = lshr i32 %205, 31
  %208 = shl nuw nsw i32 %202, 1
  %209 = sub nuw nsw i32 64, %208
  %210 = or i32 %207, %209
  %211 = lshr i32 %206, %207
  %212 = mul i32 %211, %211
  %213 = lshr i32 %212, 15
  %214 = lshr i32 %212, 31
  %215 = shl nuw nsw i32 %210, 1
  %216 = or i32 %214, %215
  %217 = lshr i32 %213, %214
  %218 = mul i32 %217, %217
  %219 = lshr i32 %218, 31
  %220 = shl nuw nsw i32 %216, 1
  %221 = or i32 %219, %220
  %222 = shl i32 %199, 3
  %223 = xor i32 %222, -1
  %224 = add i32 %198, %223
  %225 = add i32 %224, %221
  %226 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 23
  store i32 0, i32* %226, align 8
  %227 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 14
  %228 = load i32, i32* %227, align 4
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %238, label %230

230:                                              ; preds = %196
  %231 = load i32, i32* %39, align 4
  %232 = icmp ugt i32 %231, 1
  br i1 %232, label %233, label %238

233:                                              ; preds = %230
  %234 = shl i32 %231, 3
  %235 = add i32 %234, 16
  %236 = icmp ult i32 %225, %235
  br i1 %236, label %238, label %237

237:                                              ; preds = %233
  store i32 8, i32* %226, align 8
  br label %238

238:                                              ; preds = %233, %196, %237, %230
  %239 = phi i32 [ 0, %233 ], [ 0, %196 ], [ 8, %237 ], [ 0, %230 ]
  %240 = sub nsw i32 %225, %239
  %241 = icmp sgt i32 %240, 7
  %242 = select i1 %241, i32 8, i32 0
  %243 = sub nsw i32 %240, %242
  %244 = load i32, i32* %40, align 8
  %245 = icmp eq i32 %244, 2
  br i1 %245, label %249, label %246

246:                                              ; preds = %238
  %247 = load i32, i32* %9, align 8
  %248 = load i32, i32* %66, align 4
  br label %264

249:                                              ; preds = %238
  %250 = load i32, i32* %66, align 4
  %251 = load i32, i32* %9, align 8
  %252 = sub nsw i32 %250, %251
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_log2_frac, i64 0, i64 %253
  %255 = load i8, i8* %254, align 1
  %256 = zext i8 %255 to i32
  %257 = icmp slt i32 %243, %256
  br i1 %257, label %264, label %258

258:                                              ; preds = %249
  %259 = sub nsw i32 %243, %256
  %260 = icmp sgt i32 %259, 7
  %261 = add nsw i32 %259, -8
  %262 = select i1 %260, i32 %261, i32 %259
  %263 = select i1 %260, i32 8, i32 0
  br label %264

264:                                              ; preds = %246, %258, %249
  %265 = phi i32 [ %248, %246 ], [ %250, %258 ], [ %250, %249 ]
  %266 = phi i32 [ %247, %246 ], [ %251, %258 ], [ %251, %249 ]
  %267 = phi i32 [ %243, %246 ], [ %262, %258 ], [ %243, %249 ]
  %268 = phi i32 [ 0, %246 ], [ %256, %258 ], [ 0, %249 ]
  %269 = phi i32 [ 0, %246 ], [ %263, %258 ], [ 0, %249 ]
  %270 = icmp sgt i32 %265, %266
  br i1 %270, label %276, label %271

271:                                              ; preds = %264
  %272 = add nsw i32 %244, -1
  %273 = shl i32 %244, 3
  %274 = sext i32 %265 to i64
  %275 = sext i32 %266 to i64
  br label %288

276:                                              ; preds = %264
  %277 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 18
  %278 = load i32, i32* %277, align 4
  %279 = add nsw i32 %278, -5
  %280 = load i32, i32* %39, align 4
  %281 = sub i32 %279, %280
  %282 = add i32 %280, 3
  %283 = add i32 %244, -1
  %284 = add i32 %283, %282
  %285 = shl i32 %244, 3
  %286 = sext i32 %266 to i64
  %287 = sext i32 %265 to i64
  br label %293

288:                                              ; preds = %293, %271
  %289 = phi i64 [ %275, %271 ], [ %286, %293 ]
  %290 = phi i64 [ %274, %271 ], [ %287, %293 ]
  %291 = phi i32 [ %273, %271 ], [ %285, %293 ]
  %292 = phi i32 [ %272, %271 ], [ %283, %293 ]
  br label %318

293:                                              ; preds = %276, %293
  %294 = phi i64 [ %286, %276 ], [ %316, %293 ]
  %295 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_freq_range, i64 0, i64 %294
  %296 = load i8, i8* %295, align 1
  %297 = zext i8 %296 to i32
  %298 = trunc i64 %294 to i32
  %299 = xor i32 %298, -1
  %300 = add i32 %265, %299
  %301 = mul nsw i32 %300, %297
  %302 = mul nuw nsw i32 %297, 3
  %303 = shl i32 %302, %282
  %304 = ashr i32 %303, 4
  %305 = icmp sgt i32 %304, %285
  %306 = select i1 %305, i32 %304, i32 %285
  %307 = getelementptr inbounds [21 x i32], [21 x i32]* %6, i64 0, i64 %294
  store i32 %306, i32* %307, align 4
  %308 = shl i32 %301, %284
  %309 = mul nsw i32 %308, %281
  %310 = ashr i32 %309, 6
  %311 = getelementptr inbounds [21 x i32], [21 x i32]* %5, i64 0, i64 %294
  %312 = shl i32 %297, %280
  %313 = icmp eq i32 %312, 1
  %314 = select i1 %313, i32 %285, i32 0
  %315 = sub nsw i32 %310, %314
  store i32 %315, i32* %311, align 4
  %316 = add nsw i64 %294, 1
  %317 = icmp slt i64 %316, %287
  br i1 %317, label %293, label %288

318:                                              ; preds = %288, %371
  %319 = phi i32 [ 10, %288 ], [ %377, %371 ]
  %320 = phi i32 [ 1, %288 ], [ %376, %371 ]
  %321 = add nsw i32 %319, %320
  %322 = ashr i32 %321, 1
  br i1 %270, label %323, label %371

323:                                              ; preds = %318
  %324 = sext i32 %322 to i64
  %325 = load i32, i32* %39, align 4
  br label %326

326:                                              ; preds = %323, %366
  %327 = phi i64 [ %290, %323 ], [ %330, %366 ]
  %328 = phi i32 [ 0, %323 ], [ %368, %366 ]
  %329 = phi i32 [ 0, %323 ], [ %369, %366 ]
  %330 = add nsw i64 %327, -1
  %331 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_freq_range, i64 0, i64 %330
  %332 = load i8, i8* %331, align 1
  %333 = zext i8 %332 to i32
  %334 = getelementptr inbounds [11 x [21 x i8]], [11 x [21 x i8]]* @ff_celt_static_alloc, i64 0, i64 %324, i64 %330
  %335 = load i8, i8* %334, align 1
  %336 = zext i8 %335 to i32
  %337 = mul nuw nsw i32 %336, %333
  %338 = shl i32 %337, %292
  %339 = shl i32 %338, %325
  %340 = ashr i32 %339, 2
  %341 = icmp eq i32 %340, 0
  br i1 %341, label %348, label %342

342:                                              ; preds = %326
  %343 = getelementptr inbounds [21 x i32], [21 x i32]* %5, i64 0, i64 %330
  %344 = load i32, i32* %343, align 4
  %345 = add nsw i32 %344, %340
  %346 = icmp sgt i32 %345, 0
  %347 = select i1 %346, i32 %345, i32 0
  br label %348

348:                                              ; preds = %326, %342
  %349 = phi i32 [ %347, %342 ], [ 0, %326 ]
  %350 = getelementptr inbounds [21 x i32], [21 x i32]* %4, i64 0, i64 %330
  %351 = load i32, i32* %350, align 4
  %352 = add nsw i32 %351, %349
  %353 = getelementptr inbounds [21 x i32], [21 x i32]* %6, i64 0, i64 %330
  %354 = load i32, i32* %353, align 4
  %355 = icmp sge i32 %352, %354
  %356 = icmp ne i32 %328, 0
  %357 = or i1 %356, %355
  br i1 %357, label %358, label %363

358:                                              ; preds = %348
  %359 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 37, i64 %330
  %360 = load i32, i32* %359, align 4
  %361 = icmp sgt i32 %352, %360
  %362 = select i1 %361, i32 %360, i32 %352
  br label %366

363:                                              ; preds = %348
  %364 = icmp slt i32 %352, %291
  %365 = select i1 %364, i32 0, i32 %291
  br label %366

366:                                              ; preds = %363, %358
  %367 = phi i32 [ %362, %358 ], [ %365, %363 ]
  %368 = phi i32 [ 1, %358 ], [ 0, %363 ]
  %369 = add nsw i32 %367, %329
  %370 = icmp sgt i64 %330, %289
  br i1 %370, label %326, label %371

371:                                              ; preds = %366, %318
  %372 = phi i32 [ 0, %318 ], [ %369, %366 ]
  %373 = icmp sgt i32 %372, %267
  %374 = add nsw i32 %322, -1
  %375 = add nsw i32 %322, 1
  %376 = select i1 %373, i32 %320, i32 %375
  %377 = select i1 %373, i32 %374, i32 %319
  %378 = icmp sgt i32 %376, %377
  br i1 %378, label %379, label %318

379:                                              ; preds = %371
  %380 = add nsw i32 %376, -1
  br i1 %270, label %381, label %387

381:                                              ; preds = %379
  %382 = sext i32 %380 to i64
  %383 = load i32, i32* %39, align 4
  %384 = icmp sgt i32 %376, 10
  %385 = sext i32 %376 to i64
  %386 = icmp eq i32 %380, 0
  br label %389

387:                                              ; preds = %439, %379
  %388 = phi i32 [ %10, %379 ], [ %444, %439 ]
  br label %451

389:                                              ; preds = %439, %381
  %390 = phi i64 [ %289, %381 ], [ %448, %439 ]
  %391 = phi i32 [ %10, %381 ], [ %444, %439 ]
  %392 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_freq_range, i64 0, i64 %390
  %393 = load i8, i8* %392, align 1
  %394 = zext i8 %393 to i32
  %395 = getelementptr inbounds [11 x [21 x i8]], [11 x [21 x i8]]* @ff_celt_static_alloc, i64 0, i64 %382, i64 %390
  %396 = load i8, i8* %395, align 1
  %397 = zext i8 %396 to i32
  %398 = mul nuw nsw i32 %397, %394
  %399 = shl i32 %398, %292
  %400 = shl i32 %399, %383
  %401 = ashr i32 %400, 2
  %402 = getelementptr inbounds [21 x i32], [21 x i32]* %7, i64 0, i64 %390
  store i32 %401, i32* %402, align 4
  br i1 %384, label %403, label %406

403:                                              ; preds = %389
  %404 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 37, i64 %390
  %405 = load i32, i32* %404, align 4
  br label %414

406:                                              ; preds = %389
  %407 = getelementptr inbounds [11 x [21 x i8]], [11 x [21 x i8]]* @ff_celt_static_alloc, i64 0, i64 %385, i64 %390
  %408 = load i8, i8* %407, align 1
  %409 = zext i8 %408 to i32
  %410 = mul nuw nsw i32 %409, %394
  %411 = shl i32 %410, %292
  %412 = shl i32 %411, %383
  %413 = ashr i32 %412, 2
  br label %414

414:                                              ; preds = %406, %403
  %415 = phi i32 [ %405, %403 ], [ %413, %406 ]
  %416 = getelementptr inbounds [21 x i32], [21 x i32]* %8, i64 0, i64 %390
  store i32 %415, i32* %416, align 4
  %417 = icmp eq i32 %401, 0
  br i1 %417, label %424, label %418

418:                                              ; preds = %414
  %419 = getelementptr inbounds [21 x i32], [21 x i32]* %5, i64 0, i64 %390
  %420 = load i32, i32* %419, align 4
  %421 = add nsw i32 %420, %401
  %422 = icmp sgt i32 %421, 0
  %423 = select i1 %422, i32 %421, i32 0
  store i32 %423, i32* %402, align 4
  br label %424

424:                                              ; preds = %414, %418
  %425 = phi i32 [ 0, %414 ], [ %423, %418 ]
  %426 = icmp eq i32 %415, 0
  br i1 %426, label %433, label %427

427:                                              ; preds = %424
  %428 = getelementptr inbounds [21 x i32], [21 x i32]* %5, i64 0, i64 %390
  %429 = load i32, i32* %428, align 4
  %430 = add nsw i32 %429, %415
  %431 = icmp sgt i32 %430, 0
  %432 = select i1 %431, i32 %430, i32 0
  store i32 %432, i32* %416, align 4
  br label %433

433:                                              ; preds = %424, %427
  %434 = phi i32 [ 0, %424 ], [ %432, %427 ]
  %435 = getelementptr inbounds [21 x i32], [21 x i32]* %4, i64 0, i64 %390
  %436 = load i32, i32* %435, align 4
  br i1 %386, label %439, label %437

437:                                              ; preds = %433
  %438 = add nsw i32 %425, %436
  store i32 %438, i32* %402, align 4
  br label %439

439:                                              ; preds = %433, %437
  %440 = phi i32 [ %438, %437 ], [ %425, %433 ]
  %441 = add nsw i32 %434, %436
  %442 = icmp eq i32 %436, 0
  %443 = trunc i64 %390 to i32
  %444 = select i1 %442, i32 %391, i32 %443
  %445 = sub nsw i32 %441, %440
  %446 = icmp sgt i32 %445, 0
  %447 = select i1 %446, i32 %445, i32 0
  store i32 %447, i32* %416, align 4
  %448 = add nsw i64 %390, 1
  %449 = icmp eq i64 %448, %290
  br i1 %449, label %387, label %389

450:                                              ; preds = %487
  br i1 %270, label %494, label %530

451:                                              ; preds = %487, %387
  %452 = phi i32 [ 64, %387 ], [ %491, %487 ]
  %453 = phi i32 [ 0, %387 ], [ %490, %487 ]
  %454 = phi i32 [ 0, %387 ], [ %492, %487 ]
  %455 = add nsw i32 %452, %453
  %456 = ashr i32 %455, 1
  br i1 %270, label %457, label %487

457:                                              ; preds = %451, %482
  %458 = phi i64 [ %461, %482 ], [ %290, %451 ]
  %459 = phi i32 [ %484, %482 ], [ 0, %451 ]
  %460 = phi i32 [ %485, %482 ], [ 0, %451 ]
  %461 = add nsw i64 %458, -1
  %462 = getelementptr inbounds [21 x i32], [21 x i32]* %7, i64 0, i64 %461
  %463 = load i32, i32* %462, align 4
  %464 = getelementptr inbounds [21 x i32], [21 x i32]* %8, i64 0, i64 %461
  %465 = load i32, i32* %464, align 4
  %466 = mul nsw i32 %465, %456
  %467 = ashr i32 %466, 6
  %468 = add nsw i32 %467, %463
  %469 = getelementptr inbounds [21 x i32], [21 x i32]* %6, i64 0, i64 %461
  %470 = load i32, i32* %469, align 4
  %471 = icmp sge i32 %468, %470
  %472 = icmp ne i32 %459, 0
  %473 = or i1 %472, %471
  br i1 %473, label %474, label %479

474:                                              ; preds = %457
  %475 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 37, i64 %461
  %476 = load i32, i32* %475, align 4
  %477 = icmp sgt i32 %468, %476
  %478 = select i1 %477, i32 %476, i32 %468
  br label %482

479:                                              ; preds = %457
  %480 = icmp slt i32 %468, %291
  %481 = select i1 %480, i32 0, i32 %291
  br label %482

482:                                              ; preds = %479, %474
  %483 = phi i32 [ %478, %474 ], [ %481, %479 ]
  %484 = phi i32 [ 1, %474 ], [ 0, %479 ]
  %485 = add nsw i32 %483, %460
  %486 = icmp sgt i64 %461, %289
  br i1 %486, label %457, label %487

487:                                              ; preds = %482, %451
  %488 = phi i32 [ 0, %451 ], [ %485, %482 ]
  %489 = icmp sgt i32 %488, %267
  %490 = select i1 %489, i32 %453, i32 %456
  %491 = select i1 %489, i32 %456, i32 %452
  %492 = add nuw nsw i32 %454, 1
  %493 = icmp eq i32 %492, 6
  br i1 %493, label %450, label %451

494:                                              ; preds = %450, %516
  %495 = phi i64 [ %498, %516 ], [ %290, %450 ]
  %496 = phi i32 [ %517, %516 ], [ 0, %450 ]
  %497 = phi i32 [ %524, %516 ], [ 0, %450 ]
  %498 = add nsw i64 %495, -1
  %499 = getelementptr inbounds [21 x i32], [21 x i32]* %7, i64 0, i64 %498
  %500 = load i32, i32* %499, align 4
  %501 = getelementptr inbounds [21 x i32], [21 x i32]* %8, i64 0, i64 %498
  %502 = load i32, i32* %501, align 4
  %503 = mul nsw i32 %502, %490
  %504 = ashr i32 %503, 6
  %505 = add nsw i32 %504, %500
  %506 = getelementptr inbounds [21 x i32], [21 x i32]* %6, i64 0, i64 %498
  %507 = load i32, i32* %506, align 4
  %508 = icmp sge i32 %505, %507
  %509 = icmp ne i32 %496, 0
  %510 = or i1 %509, %508
  br i1 %510, label %516, label %511

511:                                              ; preds = %494
  %512 = load i32, i32* %40, align 8
  %513 = shl i32 %512, 3
  %514 = icmp slt i32 %505, %513
  %515 = select i1 %514, i32 0, i32 %513
  br label %516

516:                                              ; preds = %494, %511
  %517 = phi i32 [ 0, %511 ], [ 1, %494 ]
  %518 = phi i32 [ %515, %511 ], [ %505, %494 ]
  %519 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 37, i64 %498
  %520 = load i32, i32* %519, align 4
  %521 = icmp sgt i32 %518, %520
  %522 = select i1 %521, i32 %520, i32 %518
  %523 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 40, i64 %498
  store i32 %522, i32* %523, align 4
  %524 = add nsw i32 %522, %497
  %525 = load i32, i32* %9, align 8
  %526 = sext i32 %525 to i64
  %527 = icmp sgt i64 %498, %526
  br i1 %527, label %494, label %528

528:                                              ; preds = %516
  %529 = load i32, i32* %66, align 4
  br label %530

530:                                              ; preds = %528, %450
  %531 = phi i32 [ %266, %450 ], [ %525, %528 ]
  %532 = phi i32 [ %265, %450 ], [ %529, %528 ]
  %533 = phi i32 [ 0, %450 ], [ %524, %528 ]
  %534 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 13
  store i32 %532, i32* %534, align 16
  %535 = add nsw i32 %532, -1
  %536 = icmp eq i32 %535, %388
  br i1 %536, label %539, label %537

537:                                              ; preds = %530
  %538 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 16
  br label %543

539:                                              ; preds = %615, %530
  %540 = phi i32 [ %533, %530 ], [ %622, %615 ]
  %541 = phi i32 [ %268, %530 ], [ %617, %615 ]
  %542 = add nsw i32 %267, %242
  br label %629

543:                                              ; preds = %627, %537
  %544 = phi i32 [ %531, %537 ], [ %628, %627 ]
  %545 = phi i32 [ %535, %537 ], [ %625, %627 ]
  %546 = phi i32 [ %268, %537 ], [ %617, %627 ]
  %547 = phi i32 [ %533, %537 ], [ %622, %627 ]
  %548 = phi i32 [ %532, %537 ], [ %624, %627 ]
  %549 = sub nsw i32 %267, %547
  %550 = sext i32 %548 to i64
  %551 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_freq_bands, i64 0, i64 %550
  %552 = load i8, i8* %551, align 1
  %553 = zext i8 %552 to i32
  %554 = sext i32 %544 to i64
  %555 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_freq_bands, i64 0, i64 %554
  %556 = load i8, i8* %555, align 1
  %557 = zext i8 %556 to i32
  %558 = sub nsw i32 %553, %557
  %559 = sdiv i32 %549, %558
  %560 = mul nsw i32 %558, %559
  %561 = sub nsw i32 %549, %560
  %562 = sext i32 %545 to i64
  %563 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 40, i64 %562
  %564 = load i32, i32* %563, align 4
  %565 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_freq_range, i64 0, i64 %562
  %566 = load i8, i8* %565, align 1
  %567 = zext i8 %566 to i32
  %568 = mul nsw i32 %559, %567
  %569 = add nsw i32 %568, %564
  %570 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_freq_bands, i64 0, i64 %562
  %571 = load i8, i8* %570, align 1
  %572 = zext i8 %571 to i32
  %573 = sub nsw i32 %557, %572
  %574 = add i32 %573, %561
  %575 = icmp sgt i32 %574, 0
  %576 = select i1 %575, i32 %574, i32 0
  %577 = add nsw i32 %569, %576
  %578 = getelementptr inbounds [21 x i32], [21 x i32]* %6, i64 0, i64 %562
  %579 = load i32, i32* %578, align 4
  %580 = load i32, i32* %40, align 8
  %581 = shl i32 %580, 3
  %582 = add i32 %581, 8
  %583 = icmp sgt i32 %579, %582
  %584 = select i1 %583, i32 %579, i32 %582
  %585 = icmp slt i32 %577, %584
  br i1 %585, label %600, label %586

586:                                              ; preds = %543
  br i1 %158, label %587, label %591

587:                                              ; preds = %586
  %588 = load i32, i32* %538, align 4
  %589 = icmp sle i32 %548, %588
  %590 = zext i1 %589 to i32
  tail call void @ff_opus_rc_enc_log(%struct.OpusRangeCoder* %1, i32 %590, i32 1) #6
  br label %593

591:                                              ; preds = %586
  %592 = tail call i32 @ff_opus_rc_dec_log(%struct.OpusRangeCoder* %1, i32 1) #6
  br label %593

593:                                              ; preds = %591, %587
  %594 = phi i32 [ %590, %587 ], [ %592, %591 ]
  %595 = icmp eq i32 %594, 0
  br i1 %595, label %596, label %629

596:                                              ; preds = %593
  %597 = add nsw i32 %577, -8
  %598 = add nsw i32 %547, 8
  %599 = load i32, i32* %563, align 4
  br label %600

600:                                              ; preds = %596, %543
  %601 = phi i32 [ %599, %596 ], [ %564, %543 ]
  %602 = phi i32 [ %598, %596 ], [ %547, %543 ]
  %603 = phi i32 [ %597, %596 ], [ %577, %543 ]
  %604 = sub nsw i32 %602, %601
  %605 = icmp eq i32 %546, 0
  br i1 %605, label %615, label %606

606:                                              ; preds = %600
  %607 = sub i32 %604, %546
  %608 = load i32, i32* %9, align 8
  %609 = sub nsw i32 %545, %608
  %610 = sext i32 %609 to i64
  %611 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_log2_frac, i64 0, i64 %610
  %612 = load i8, i8* %611, align 1
  %613 = zext i8 %612 to i32
  %614 = add nsw i32 %607, %613
  br label %615

615:                                              ; preds = %606, %600
  %616 = phi i32 [ %614, %606 ], [ %604, %600 ]
  %617 = phi i32 [ %613, %606 ], [ 0, %600 ]
  %618 = load i32, i32* %40, align 8
  %619 = shl i32 %618, 3
  %620 = icmp slt i32 %603, %619
  %621 = select i1 %620, i32 0, i32 %619
  store i32 %621, i32* %563, align 4
  %622 = add nsw i32 %621, %616
  %623 = load i32, i32* %534, align 16
  %624 = add nsw i32 %623, -1
  store i32 %624, i32* %534, align 16
  %625 = add nsw i32 %623, -2
  %626 = icmp eq i32 %625, %388
  br i1 %626, label %539, label %627

627:                                              ; preds = %615
  %628 = load i32, i32* %9, align 8
  br label %543

629:                                              ; preds = %593, %539
  %630 = phi i32 [ %540, %539 ], [ %547, %593 ]
  %631 = phi i32 [ %541, %539 ], [ %546, %593 ]
  %632 = phi i32 [ %542, %539 ], [ %267, %593 ]
  br i1 %158, label %633, label %644

633:                                              ; preds = %629
  %634 = icmp eq i32 %631, 0
  br i1 %634, label %655, label %635

635:                                              ; preds = %633
  %636 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 25
  %637 = load i32, i32* %636, align 16
  %638 = load i32, i32* %534, align 16
  %639 = icmp sgt i32 %637, %638
  %640 = select i1 %639, i32 %638, i32 %637
  store i32 %640, i32* %636, align 16
  %641 = add nsw i32 %638, 1
  %642 = load i32, i32* %9, align 8
  %643 = sub i32 %641, %642
  tail call void @ff_opus_rc_enc_uint(%struct.OpusRangeCoder* %1, i32 %640, i32 %643) #6
  br label %655

644:                                              ; preds = %629
  %645 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 26
  store i32 0, i32* %645, align 4
  %646 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 25
  store i32 0, i32* %646, align 16
  %647 = icmp eq i32 %631, 0
  br i1 %647, label %655, label %648

648:                                              ; preds = %644
  %649 = load i32, i32* %9, align 8
  %650 = load i32, i32* %534, align 16
  %651 = sub i32 1, %649
  %652 = add i32 %651, %650
  %653 = tail call i32 @ff_opus_rc_dec_uint(%struct.OpusRangeCoder* %1, i32 %652) #6
  %654 = add i32 %653, %649
  store i32 %654, i32* %646, align 16
  br label %655

655:                                              ; preds = %633, %644, %648, %635
  %656 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 25
  %657 = load i32, i32* %656, align 16
  %658 = load i32, i32* %9, align 8
  %659 = icmp sgt i32 %657, %658
  br i1 %659, label %662, label %660

660:                                              ; preds = %655
  %661 = add nsw i32 %632, %269
  br label %671

662:                                              ; preds = %655
  %663 = icmp eq i32 %269, 0
  br i1 %663, label %671, label %664

664:                                              ; preds = %662
  br i1 %158, label %665, label %668

665:                                              ; preds = %664
  %666 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 26
  %667 = load i32, i32* %666, align 4
  tail call void @ff_opus_rc_enc_log(%struct.OpusRangeCoder* %1, i32 %667, i32 1) #6
  br label %671

668:                                              ; preds = %664
  %669 = tail call i32 @ff_opus_rc_dec_log(%struct.OpusRangeCoder* %1, i32 1) #6
  %670 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 26
  store i32 %669, i32* %670, align 4
  br label %671

671:                                              ; preds = %662, %668, %665, %660
  %672 = phi i32 [ %661, %660 ], [ %632, %665 ], [ %632, %668 ], [ %632, %662 ]
  %673 = sub nsw i32 %672, %630
  %674 = load i32, i32* %534, align 16
  %675 = sext i32 %674 to i64
  %676 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_freq_bands, i64 0, i64 %675
  %677 = load i8, i8* %676, align 1
  %678 = zext i8 %677 to i32
  %679 = load i32, i32* %9, align 8
  %680 = sext i32 %679 to i64
  %681 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_freq_bands, i64 0, i64 %680
  %682 = load i8, i8* %681, align 1
  %683 = zext i8 %682 to i32
  %684 = sub nsw i32 %678, %683
  %685 = sdiv i32 %673, %684
  %686 = icmp slt i32 %679, %674
  br i1 %686, label %687, label %710

687:                                              ; preds = %671
  %688 = mul nsw i32 %684, %685
  %689 = sub nsw i32 %673, %688
  br label %690

690:                                              ; preds = %687, %690
  %691 = phi i64 [ %680, %687 ], [ %704, %690 ]
  %692 = phi i32 [ %689, %687 ], [ %703, %690 ]
  %693 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_freq_range, i64 0, i64 %691
  %694 = load i8, i8* %693, align 1
  %695 = zext i8 %694 to i32
  %696 = icmp sgt i32 %692, %695
  %697 = select i1 %696, i32 %695, i32 %692
  %698 = mul nsw i32 %685, %695
  %699 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 40, i64 %691
  %700 = load i32, i32* %699, align 4
  %701 = add i32 %698, %700
  %702 = add i32 %701, %697
  store i32 %702, i32* %699, align 4
  %703 = sub nsw i32 %692, %697
  %704 = add nsw i64 %691, 1
  %705 = load i32, i32* %534, align 16
  %706 = sext i32 %705 to i64
  %707 = icmp slt i64 %704, %706
  br i1 %707, label %690, label %708

708:                                              ; preds = %690
  %709 = load i32, i32* %9, align 8
  br label %710

710:                                              ; preds = %708, %671
  %711 = phi i32 [ %705, %708 ], [ %674, %671 ]
  %712 = phi i32 [ %709, %708 ], [ %679, %671 ]
  %713 = icmp slt i32 %712, %711
  br i1 %713, label %714, label %844

714:                                              ; preds = %710
  %715 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 26
  %716 = sext i32 %712 to i64
  br label %717

717:                                              ; preds = %714, %836
  %718 = phi i64 [ %716, %714 ], [ %838, %836 ]
  %719 = phi i32 [ 0, %714 ], [ %837, %836 ]
  %720 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_freq_range, i64 0, i64 %718
  %721 = load i8, i8* %720, align 1
  %722 = zext i8 %721 to i32
  %723 = load i32, i32* %39, align 4
  %724 = shl i32 %722, %723
  %725 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 40, i64 %718
  %726 = load i32, i32* %725, align 4
  %727 = add nsw i32 %726, %719
  store i32 %727, i32* %725, align 4
  %728 = icmp sgt i32 %724, 1
  br i1 %728, label %729, label %806

729:                                              ; preds = %717
  %730 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 37, i64 %718
  %731 = load i32, i32* %730, align 4
  %732 = sub nsw i32 %727, %731
  %733 = icmp sgt i32 %732, 0
  %734 = select i1 %733, i32 %732, i32 0
  %735 = sub nsw i32 %727, %734
  store i32 %735, i32* %725, align 4
  %736 = load i32, i32* %40, align 8
  %737 = mul nsw i32 %736, %724
  %738 = icmp eq i32 %736, 2
  %739 = icmp ne i32 %724, 2
  %740 = and i1 %739, %738
  br i1 %740, label %741, label %748

741:                                              ; preds = %729
  %742 = load i32, i32* %715, align 4
  %743 = icmp eq i32 %742, 0
  br i1 %743, label %744, label %748

744:                                              ; preds = %741
  %745 = load i32, i32* %656, align 16
  %746 = sext i32 %745 to i64
  %747 = icmp slt i64 %718, %746
  br label %748

748:                                              ; preds = %741, %744, %729
  %749 = phi i1 [ false, %741 ], [ false, %729 ], [ %747, %744 ]
  %750 = zext i1 %749 to i32
  %751 = add nsw i32 %737, %750
  %752 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_log_freq_range, i64 0, i64 %718
  %753 = load i8, i8* %752, align 1
  %754 = zext i8 %753 to i32
  %755 = load i32, i32* %39, align 4
  %756 = shl i32 %755, 3
  %757 = add i32 %756, %754
  %758 = mul i32 %757, %751
  %759 = ashr i32 %758, 1
  %760 = mul i32 %751, -21
  %761 = icmp eq i32 %724, 2
  %762 = shl i32 %751, 1
  %763 = select i1 %761, i32 %762, i32 0
  %764 = add i32 %763, %760
  %765 = add i32 %764, %759
  %766 = add nsw i32 %765, %735
  %767 = shl i32 %751, 3
  %768 = shl i32 %751, 4
  %769 = icmp slt i32 %766, %768
  br i1 %769, label %770, label %773

770:                                              ; preds = %748
  %771 = ashr i32 %758, 2
  %772 = add nsw i32 %765, %771
  br label %779

773:                                              ; preds = %748
  %774 = mul i32 %751, 24
  %775 = icmp slt i32 %766, %774
  br i1 %775, label %776, label %779

776:                                              ; preds = %773
  %777 = ashr i32 %758, 3
  %778 = add nsw i32 %765, %777
  br label %779

779:                                              ; preds = %773, %776, %770
  %780 = phi i32 [ %772, %770 ], [ %778, %776 ], [ %765, %773 ]
  %781 = add nsw i32 %780, %735
  %782 = shl i32 %751, 2
  %783 = add nsw i32 %781, %782
  %784 = sdiv i32 %783, %767
  %785 = ashr i32 %735, 3
  %786 = add nsw i32 %736, -1
  %787 = ashr i32 %785, %786
  %788 = icmp slt i32 %787, 8
  %789 = select i1 %788, i32 %787, i32 8
  %790 = icmp sgt i32 %789, 0
  %791 = select i1 %790, i32 %789, i32 0
  %792 = icmp slt i32 %784, 0
  %793 = icmp sgt i32 %784, %791
  %794 = select i1 %793, i32 %791, i32 %784
  %795 = select i1 %792, i32 0, i32 %794
  %796 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 38, i64 %718
  store i32 %795, i32* %796, align 4
  %797 = mul nsw i32 %795, %767
  %798 = icmp sge i32 %797, %781
  %799 = zext i1 %798 to i32
  %800 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 39, i64 %718
  store i32 %799, i32* %800, align 4
  %801 = load i32, i32* %40, align 8
  %802 = add nsw i32 %801, -1
  %803 = shl i32 %795, %802
  %804 = shl i32 %803, 3
  %805 = sub nsw i32 %735, %804
  store i32 %805, i32* %725, align 4
  br label %815

806:                                              ; preds = %717
  %807 = load i32, i32* %40, align 8
  %808 = shl i32 %807, 3
  %809 = sub nsw i32 %727, %808
  %810 = icmp sgt i32 %809, 0
  %811 = select i1 %810, i32 %809, i32 0
  %812 = sub nsw i32 %727, %811
  store i32 %812, i32* %725, align 4
  %813 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 38, i64 %718
  store i32 0, i32* %813, align 4
  %814 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 39, i64 %718
  store i32 1, i32* %814, align 4
  br label %815

815:                                              ; preds = %806, %779
  %816 = phi i32 [ %795, %779 ], [ 0, %806 ]
  %817 = phi i32 [ %734, %779 ], [ %811, %806 ]
  %818 = icmp eq i32 %817, 0
  br i1 %818, label %836, label %819

819:                                              ; preds = %815
  %820 = load i32, i32* %40, align 8
  %821 = add nsw i32 %820, 2
  %822 = lshr i32 %817, %821
  %823 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 38, i64 %718
  %824 = sub nsw i32 8, %816
  %825 = icmp sgt i32 %822, %824
  %826 = select i1 %825, i32 %824, i32 %822
  %827 = add nsw i32 %826, %816
  store i32 %827, i32* %823, align 4
  %828 = load i32, i32* %40, align 8
  %829 = add nsw i32 %828, 2
  %830 = shl i32 %826, %829
  %831 = sub nsw i32 %817, %719
  %832 = icmp sge i32 %830, %831
  %833 = zext i1 %832 to i32
  %834 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 39, i64 %718
  store i32 %833, i32* %834, align 4
  %835 = sub nsw i32 %817, %830
  br label %836

836:                                              ; preds = %815, %819
  %837 = phi i32 [ %835, %819 ], [ 0, %815 ]
  %838 = add nsw i64 %718, 1
  %839 = load i32, i32* %534, align 16
  %840 = sext i32 %839 to i64
  %841 = icmp slt i64 %838, %840
  br i1 %841, label %717, label %842

842:                                              ; preds = %836
  %843 = trunc i64 %838 to i32
  br label %844

844:                                              ; preds = %842, %710
  %845 = phi i32 [ %712, %710 ], [ %843, %842 ]
  %846 = phi i32 [ 0, %710 ], [ %837, %842 ]
  %847 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 35
  store i32 %846, i32* %847, align 8
  %848 = load i32, i32* %66, align 4
  %849 = icmp slt i32 %845, %848
  br i1 %849, label %850, label %868

850:                                              ; preds = %844
  %851 = sext i32 %845 to i64
  br label %852

852:                                              ; preds = %850, %852
  %853 = phi i64 [ %851, %850 ], [ %864, %852 ]
  %854 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 40, i64 %853
  %855 = load i32, i32* %854, align 4
  %856 = load i32, i32* %40, align 8
  %857 = add nsw i32 %856, -1
  %858 = ashr i32 %855, %857
  %859 = ashr i32 %858, 3
  %860 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 38, i64 %853
  store i32 %859, i32* %860, align 4
  store i32 0, i32* %854, align 4
  %861 = icmp slt i32 %858, 8
  %862 = zext i1 %861 to i32
  %863 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 39, i64 %853
  store i32 %862, i32* %863, align 4
  %864 = add nsw i64 %853, 1
  %865 = load i32, i32* %66, align 4
  %866 = sext i32 %865 to i64
  %867 = icmp slt i64 %864, %866
  br i1 %867, label %852, label %868

868:                                              ; preds = %852, %844
  call void @llvm.lifetime.end.p0i8(i64 84, i8* nonnull %15) #6
  call void @llvm.lifetime.end.p0i8(i64 84, i8* nonnull %14) #6
  call void @llvm.lifetime.end.p0i8(i64 84, i8* nonnull %13) #6
  call void @llvm.lifetime.end.p0i8(i64 84, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 84, i8* nonnull %11) #6
  ret void

869:                                              ; preds = %46
  %870 = getelementptr inbounds [4 x [2 x [21 x i8]]], [4 x [2 x [21 x i8]]]* @ff_celt_static_caps, i64 0, i64 %43, i64 %45, i64 %60
  %871 = load i8, i8* %870, align 1
  %872 = zext i8 %871 to i32
  %873 = add nuw nsw i32 %872, 64
  %874 = getelementptr inbounds [0 x i8], [0 x i8]* @ff_celt_freq_range, i64 0, i64 %60
  %875 = load i8, i8* %874, align 1
  %876 = zext i8 %875 to i32
  %877 = mul nuw nsw i32 %873, %876
  %878 = shl i32 %877, %44
  %879 = shl i32 %878, %41
  %880 = ashr i32 %879, 2
  %881 = getelementptr inbounds %struct.CeltFrame, %struct.CeltFrame* %0, i64 0, i32 37, i64 %60
  store i32 %880, i32* %881, align 4
  %882 = add nuw nsw i64 %47, 2
  br label %46
}

declare void @ff_opus_rc_enc_cdf(%struct.OpusRangeCoder*, i32, i16*) local_unnamed_addr #4

declare i32 @ff_opus_rc_dec_cdf(%struct.OpusRangeCoder*, i16*) local_unnamed_addr #4

declare void @ff_opus_rc_enc_log(%struct.OpusRangeCoder*, i32, i32) local_unnamed_addr #4

declare i32 @ff_opus_rc_dec_log(%struct.OpusRangeCoder*, i32) local_unnamed_addr #4

declare void @ff_opus_rc_enc_uint(%struct.OpusRangeCoder*, i32, i32) local_unnamed_addr #4

declare i32 @ff_opus_rc_dec_uint(%struct.OpusRangeCoder*, i32) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare double @llvm.exp2.f64(double) #5

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #5

; Function Attrs: nounwind readnone speculatable
declare { i8, i1 } @llvm.umul.with.overflow.i8(i8, i8) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = !{i32 (i32, i32)* @channel_reorder_unknown, i32 (i32, i32)* @channel_reorder_vorbis}
!6 = !{i32 0, i32 32}
