; ModuleID = '../../third_party/skia/src/pathops/SkOpEdgeBuilder.cpp'
source_filename = "../../third_party/skia/src/pathops/SkOpEdgeBuilder.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkPoint = type { float, float }
%class.SkOpEdgeBuilder = type <{ %class.SkOpGlobalState*, %class.SkPath*, %class.SkTDArray, %class.SkTDArray.2, %class.SkTDArray.1, %class.SkOpContourBuilder, %class.SkOpContourHead*, [2 x i32], i32, i8, i8, i8, i8 }>
%class.SkOpGlobalState = type <{ %class.SkArenaAlloc*, %class.SkOpCoincidence*, %class.SkOpContourHead*, i32, i8, i8, i8, i8 }>
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%class.SkOpCoincidence = type opaque
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkRect = type { float, float, float, float }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkOpContourBuilder = type <{ %class.SkOpContour*, [2 x %struct.SkPoint], i8, [7 x i8] }>
%class.SkOpContour = type <{ %class.SkOpGlobalState*, %class.SkOpSegment, %class.SkOpSegment*, %class.SkOpContour*, %struct.SkPathOpsBounds, i32, i32, i32, i8, i8, i8, i8, i8, [7 x i8] }>
%class.SkOpSegment = type <{ %class.SkOpSpan, %class.SkOpSpanBase, %class.SkOpContour*, %class.SkOpSegment*, %class.SkOpSegment*, %struct.SkPoint*, %struct.SkPathOpsBounds, float, i32, i32, i32, i8, [7 x i8] }>
%class.SkOpSpan = type <{ %class.SkOpSpanBase.base, [2 x i8], %class.SkOpSpan*, %class.SkOpAngle*, %class.SkOpSpanBase*, i32, i32, i32, i32, i32, i8, i8, [2 x i8] }>
%class.SkOpSpanBase.base = type <{ %class.SkOpPtT, %class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpAngle*, %class.SkOpSpan*, i32, i8, i8 }>
%class.SkOpPtT = type <{ double, %struct.SkPoint, %class.SkOpSpanBase*, %class.SkOpPtT*, i8, i8, i8, [5 x i8] }>
%class.SkOpAngle = type <{ %struct.SkDCurve, %class.SkDCurveSweep, double, %class.SkLineParameters, %class.SkOpAngle*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, i32, i8, i8, i8, i8, i8, i8, i8, [5 x i8] }>
%struct.SkDCurve = type { %union.anon }
%union.anon = type { %struct.SkDCubic }
%struct.SkDCubic = type { [4 x %struct.SkDPoint] }
%struct.SkDPoint = type { double, double }
%class.SkDCurveSweep = type <{ %struct.SkDCurve, [2 x %struct.SkDVector], i8, i8, [6 x i8] }>
%struct.SkDVector = type { double, double }
%class.SkLineParameters = type { double, double, double }
%class.SkOpSpanBase = type <{ %class.SkOpPtT, %class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpAngle*, %class.SkOpSpan*, i32, i8, i8, [2 x i8] }>
%struct.SkPathOpsBounds = type { %struct.SkRect }
%class.SkOpContourHead = type { %class.SkOpContour.base, [7 x i8] }
%class.SkOpContour.base = type <{ %class.SkOpGlobalState*, %class.SkOpSegment, %class.SkOpSegment*, %class.SkOpContour*, %struct.SkPathOpsBounds, i32, i32, i32, i8, i8, i8, i8, i8 }>
%class.anon.30 = type { i8 }
%struct.SkConic = type { [3 x %struct.SkPoint], float }
%struct.Splitsville = type { [2 x double], [4 x %struct.SkPoint], [4 x %struct.SkPoint], i32, i8 }

$_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_ = comdat any

$_Z12SkTIntroSortIfZ8SkTQSortIfEvPT_S2_EUlRKfS4_E_EviS2_iRKT0_ = comdat any

$_Z11SkTHeapSortIfZ8SkTQSortIfEvPT_S2_EUlRKfS4_E_EvS2_mRKT0_ = comdat any

@__const._ZN15SkOpEdgeBuilder4walkEv.splits = private unnamed_addr constant [4 x { [2 x double], [4 x %struct.SkPoint], [4 x %struct.SkPoint], i32, i8, [3 x i8] }] [{ [2 x double], [4 x %struct.SkPoint], [4 x %struct.SkPoint], i32, i8, [3 x i8] } { [2 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], [4 x %struct.SkPoint] [%struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }], [4 x %struct.SkPoint] [%struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }], i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA" }, { [2 x double], [4 x %struct.SkPoint], [4 x %struct.SkPoint], i32, i8, [3 x i8] } { [2 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], [4 x %struct.SkPoint] [%struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }], [4 x %struct.SkPoint] [%struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }], i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA" }, { [2 x double], [4 x %struct.SkPoint], [4 x %struct.SkPoint], i32, i8, [3 x i8] } { [2 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], [4 x %struct.SkPoint] [%struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }], [4 x %struct.SkPoint] [%struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }], i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA" }, { [2 x double], [4 x %struct.SkPoint], [4 x %struct.SkPoint], i32, i8, [3 x i8] } { [2 x double] [double 0xFFFFFFFFFFFFFFFF, double 0xFFFFFFFFFFFFFFFF], [4 x %struct.SkPoint] [%struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }], [4 x %struct.SkPoint] [%struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.SkPoint { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }], i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA" }], align 16
@.str = private unnamed_addr constant [51 x i8] c"../../third_party/skia/include/private/SkTDArray.h\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"assert(%s)\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"SkTFitsIn<int>(count)\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"SkTFitsIn<int>(reserve)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkOpEdgeBuilder4initEv(%class.SkOpEdgeBuilder* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 9
  store i8 0, i8* %2, align 4
  %3 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 1
  %4 = load %class.SkPath*, %class.SkPath** %3, align 8
  %5 = getelementptr inbounds %class.SkPath, %class.SkPath* %4, i64 0, i32 4
  %6 = load i8, i8* %5, align 2
  %7 = and i8 %6, 1
  %8 = icmp eq i8 %7, 0
  %9 = select i1 %8, i32 -1, i32 1
  %10 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 7, i64 1
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 7, i64 0
  store i32 %9, i32* %11, align 8
  %12 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 11
  store i8 0, i8* %12, align 2
  %13 = tail call i32 @_ZN15SkOpEdgeBuilder8preFetchEv(%class.SkOpEdgeBuilder* %0)
  %14 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 8
  store i32 %13, i32* %14, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkOpEdgeBuilder8preFetchEv(%class.SkOpEdgeBuilder* nocapture) local_unnamed_addr #1 align 2 {
  %2 = alloca i64, align 8
  %3 = bitcast i64* %2 to %struct.SkPoint*
  %4 = alloca [4 x %struct.SkPoint], align 16
  %5 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 1
  %6 = load %class.SkPath*, %class.SkPath** %5, align 8
  %7 = getelementptr inbounds %class.SkPath, %class.SkPath* %6, i64 0, i32 0, i32 0
  %8 = load %class.SkPathRef*, %class.SkPathRef** %7, align 8
  %9 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %8, i64 0, i32 9
  %10 = load i8, i8* %9, align 8
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %1
  %13 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %8, i64 0, i32 10
  %14 = load i8, i8* %13, align 1, !range !2
  br label %24

15:                                               ; preds = %1
  %16 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %8, i64 0, i32 1
  %17 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %8, i64 0, i32 3, i32 0
  %18 = load %struct.SkPoint*, %struct.SkPoint** %17, align 8
  %19 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %8, i64 0, i32 3, i32 2
  %20 = load i32, i32* %19, align 4
  %21 = tail call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %16, %struct.SkPoint* %18, i32 %20) #8
  %22 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %8, i64 0, i32 10
  %23 = zext i1 %21 to i8
  store i8 %23, i8* %22, align 1
  store i8 0, i8* %9, align 8
  br label %24

24:                                               ; preds = %12, %15
  %25 = phi i8 [ %14, %12 ], [ %23, %15 ]
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %24
  %28 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 11
  store i8 1, i8* %28, align 2
  br label %484

29:                                               ; preds = %24
  %30 = bitcast i64* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #8
  %31 = bitcast i64* %2 to float*
  store float 0xFFFFFFFFE0000000, float* %31, align 8
  %32 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 0, i32 1
  store float 0xFFFFFFFFE0000000, float* %32, align 4
  %33 = bitcast [4 x %struct.SkPoint]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %33) #8
  %34 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %4, i64 0, i64 0
  %35 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %4, i64 0, i64 1
  %36 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %4, i64 0, i64 2
  %37 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %4, i64 0, i64 3
  %38 = bitcast [4 x %struct.SkPoint]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 -1, i64 32, i1 false)
  %39 = load %class.SkPath*, %class.SkPath** %5, align 8
  %40 = getelementptr inbounds %class.SkPath, %class.SkPath* %39, i64 0, i32 0, i32 0
  %41 = load %class.SkPathRef*, %class.SkPathRef** %40, align 8
  %42 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %41, i64 0, i32 4, i32 0
  %43 = bitcast i8** %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %41, i64 0, i32 9
  %46 = load i8, i8* %45, align 8
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %52

48:                                               ; preds = %29
  %49 = inttoptr i64 %44 to i8*
  %50 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %41, i64 0, i32 10
  %51 = load i8, i8* %50, align 1, !range !2
  br label %64

52:                                               ; preds = %29
  %53 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %41, i64 0, i32 1
  %54 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %41, i64 0, i32 3, i32 0
  %55 = load %struct.SkPoint*, %struct.SkPoint** %54, align 8
  %56 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %41, i64 0, i32 3, i32 2
  %57 = load i32, i32* %56, align 4
  %58 = tail call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %53, %struct.SkPoint* %55, i32 %57) #8
  %59 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %41, i64 0, i32 10
  %60 = zext i1 %58 to i8
  store i8 %60, i8* %59, align 1
  store i8 0, i8* %45, align 8
  %61 = load %class.SkPathRef*, %class.SkPathRef** %40, align 8
  %62 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %61, i64 0, i32 4, i32 0
  %63 = load i8*, i8** %62, align 8
  br label %64

64:                                               ; preds = %52, %48
  %65 = phi i8* [ %49, %48 ], [ %63, %52 ]
  %66 = phi %class.SkPathRef* [ %41, %48 ], [ %61, %52 ]
  %67 = phi i8 [ %51, %48 ], [ %60, %52 ]
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %76, label %69

69:                                               ; preds = %64
  %70 = icmp eq i8* %65, null
  br i1 %70, label %76, label %71

71:                                               ; preds = %69
  %72 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %66, i64 0, i32 4, i32 2
  %73 = load i32, i32* %72, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %65, i64 %74
  br label %76

76:                                               ; preds = %64, %69, %71
  %77 = phi i8* [ %75, %71 ], [ null, %69 ], [ %65, %64 ]
  %78 = inttoptr i64 %44 to i8*
  %79 = icmp eq i8* %77, %78
  br i1 %79, label %453, label %80

80:                                               ; preds = %76
  %81 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %66, i64 0, i32 5, i32 0
  %82 = bitcast float** %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %66, i64 0, i32 3, i32 0
  %85 = bitcast %struct.SkPoint** %84 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = bitcast %struct.SkPoint* %35 to <2 x float>*
  %88 = bitcast %struct.SkPoint* %36 to <2 x float>*
  %89 = bitcast %struct.SkPoint* %37 to <2 x float>*
  %90 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 4, i32 2
  %91 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 4, i32 1
  %92 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 4, i32 0
  %93 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 2
  %94 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 2, i32 2
  %95 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 2, i32 1
  %96 = bitcast %class.SkTDArray* %93 to i8**
  %97 = icmp eq %struct.SkPoint* %35, null
  %98 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %93, i64 0, i32 0
  %99 = bitcast %struct.SkPoint* %35 to i8*
  %100 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 3
  %101 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 3, i32 2
  %102 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 3, i32 1
  %103 = getelementptr inbounds %class.SkTDArray.2, %class.SkTDArray.2* %100, i64 0, i32 0
  %104 = bitcast %class.SkTDArray.2* %100 to i8**
  %105 = bitcast [4 x %struct.SkPoint]* %4 to i64*
  %106 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 4, i32 0
  %107 = bitcast %struct.SkPoint* %35 to i64*
  %108 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 2, i32 0
  %109 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 10
  %110 = bitcast [4 x %struct.SkPoint]* %4 to <2 x float>*
  br label %118

111:                                              ; preds = %447
  %112 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 10
  %113 = load i8, i8* %112, align 1, !range !2
  %114 = icmp ne i8 %113, 0
  %115 = and i8 %432, 1
  %116 = icmp eq i8 %115, 0
  %117 = or i1 %116, %114
  br i1 %117, label %453, label %452

118:                                              ; preds = %80, %447
  %119 = phi i8* [ %78, %80 ], [ %433, %447 ]
  %120 = phi i8 [ 0, %80 ], [ %432, %447 ]
  %121 = phi i64 [ %83, %80 ], [ %449, %447 ]
  %122 = phi i64 [ %86, %80 ], [ %450, %447 ]
  %123 = load i8, i8* %119, align 1, !noalias !3
  switch i8 %123, label %124 [
    i8 0, label %125
    i8 1, label %199
    i8 2, label %230
    i8 3, label %259
    i8 4, label %292
    i8 5, label %334
  ]

124:                                              ; preds = %118
  call void @llvm.trap() #8, !noalias !3
  unreachable

125:                                              ; preds = %118
  %126 = inttoptr i64 %122 to %struct.SkPoint*
  %127 = load i8, i8* %109, align 1, !range !2
  %128 = icmp ne i8 %127, 0
  %129 = and i8 %120, 1
  %130 = icmp eq i8 %129, 0
  %131 = or i1 %130, %128
  br i1 %131, label %133, label %132

132:                                              ; preds = %125
  call void @_ZN15SkOpEdgeBuilder12closeContourERK7SkPointS2_(%class.SkOpEdgeBuilder* %0, %struct.SkPoint* nonnull dereferenceable(8) %34, %struct.SkPoint* nonnull dereferenceable(8) %3)
  br label %133

133:                                              ; preds = %125, %132
  %134 = load i32, i32* %90, align 4
  %135 = add i32 %134, 1
  %136 = icmp sgt i32 %135, -1
  br i1 %136, label %138, label %137

137:                                              ; preds = %133
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0)) #9
  unreachable

138:                                              ; preds = %133
  %139 = load i32, i32* %91, align 8
  %140 = icmp slt i32 %139, %135
  br i1 %140, label %143, label %141

141:                                              ; preds = %138
  %142 = load i8*, i8** %92, align 8
  br label %153

143:                                              ; preds = %138
  %144 = add i32 %134, 5
  %145 = lshr i32 %144, 2
  %146 = add nuw i32 %145, %144
  %147 = icmp sgt i32 %146, -1
  br i1 %147, label %149, label %148

148:                                              ; preds = %143
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #9
  unreachable

149:                                              ; preds = %143
  store i32 %146, i32* %91, align 8
  %150 = load i8*, i8** %92, align 8
  %151 = sext i32 %146 to i64
  %152 = call i8* @_Z16sk_realloc_throwPvm(i8* %150, i64 %151) #8
  store i8* %152, i8** %92, align 8
  br label %153

153:                                              ; preds = %141, %149
  %154 = phi i8* [ %142, %141 ], [ %152, %149 ]
  store i32 %135, i32* %90, align 4
  %155 = sext i32 %134 to i64
  %156 = getelementptr inbounds i8, i8* %154, i64 %155
  store i8 0, i8* %156, align 1
  %157 = inttoptr i64 %122 to <2 x float>*
  %158 = load <2 x float>, <2 x float>* %157, align 4
  %159 = extractelement <2 x float> %158, i32 0
  %160 = call float @llvm.fabs.f32(float %159) #8
  %161 = fcmp olt float %160, 0x3EC0000000000000
  %162 = insertelement <2 x float> %158, float 0.000000e+00, i32 0
  %163 = select i1 %161, <2 x float> %162, <2 x float> %158
  %164 = extractelement <2 x float> %163, i32 1
  %165 = call float @llvm.fabs.f32(float %164) #8
  %166 = fcmp olt float %165, 0x3EC0000000000000
  %167 = insertelement <2 x float> %163, float 0.000000e+00, i32 1
  %168 = select i1 %166, <2 x float> %167, <2 x float> %163
  store <2 x float> %168, <2 x float>* %110, align 16
  %169 = load i32, i32* %94, align 4
  %170 = add i32 %169, 1
  %171 = icmp sgt i32 %170, -1
  %172 = bitcast <2 x float> %168 to i64
  br i1 %171, label %174, label %173

173:                                              ; preds = %153
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0)) #9
  unreachable

174:                                              ; preds = %153
  %175 = load i32, i32* %95, align 8
  %176 = icmp slt i32 %175, %170
  br i1 %176, label %179, label %177

177:                                              ; preds = %174
  %178 = load %struct.SkPoint*, %struct.SkPoint** %98, align 8
  br label %192

179:                                              ; preds = %174
  %180 = add i32 %169, 5
  %181 = lshr i32 %180, 2
  %182 = add nuw i32 %181, %180
  %183 = icmp sgt i32 %182, -1
  br i1 %183, label %185, label %184

184:                                              ; preds = %179
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #9
  unreachable

185:                                              ; preds = %179
  store i32 %182, i32* %95, align 8
  %186 = load i8*, i8** %96, align 8
  %187 = sext i32 %182 to i64
  %188 = shl nsw i64 %187, 3
  %189 = call i8* @_Z16sk_realloc_throwPvm(i8* %186, i64 %188) #8
  store i8* %189, i8** %96, align 8
  %190 = bitcast i8* %189 to %struct.SkPoint*
  %191 = load i64, i64* %105, align 16
  br label %192

192:                                              ; preds = %177, %185
  %193 = phi i64 [ %172, %177 ], [ %191, %185 ]
  %194 = phi %struct.SkPoint* [ %178, %177 ], [ %190, %185 ]
  store i32 %170, i32* %94, align 4
  %195 = sext i32 %169 to i64
  %196 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %194, i64 %195
  %197 = bitcast %struct.SkPoint* %196 to i64*
  store i64 %193, i64* %197, align 4
  %198 = load i64, i64* %105, align 16
  store i64 %198, i64* %2, align 8
  br label %430

199:                                              ; preds = %118
  %200 = inttoptr i64 %122 to %struct.SkPoint*
  %201 = inttoptr i64 %122 to <2 x float>*
  %202 = load <2 x float>, <2 x float>* %201, align 4
  %203 = extractelement <2 x float> %202, i32 0
  %204 = call float @llvm.fabs.f32(float %203) #8
  %205 = fcmp olt float %204, 0x3EC0000000000000
  %206 = insertelement <2 x float> %202, float 0.000000e+00, i32 0
  %207 = select i1 %205, <2 x float> %206, <2 x float> %202
  %208 = extractelement <2 x float> %207, i32 1
  %209 = call float @llvm.fabs.f32(float %208) #8
  %210 = fcmp olt float %209, 0x3EC0000000000000
  %211 = insertelement <2 x float> %207, float 0.000000e+00, i32 1
  %212 = select i1 %210, <2 x float> %211, <2 x float> %207
  store <2 x float> %212, <2 x float>* %87, align 8
  %213 = call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* nonnull dereferenceable(8) %34, %struct.SkPoint* dereferenceable(8) %35)
  br i1 %213, label %214, label %336

214:                                              ; preds = %199
  %215 = load i32, i32* %90, align 4
  %216 = add nsw i32 %215, -1
  %217 = load i8*, i8** %106, align 8
  %218 = sext i32 %216 to i64
  %219 = getelementptr inbounds i8, i8* %217, i64 %218
  %220 = load i8, i8* %219, align 1
  %221 = icmp ult i8 %220, 2
  br i1 %221, label %430, label %222

222:                                              ; preds = %214
  %223 = load i64, i64* %107, align 8
  store i64 %223, i64* %105, align 16
  %224 = load i32, i32* %94, align 4
  %225 = add nsw i32 %224, -1
  %226 = load %struct.SkPoint*, %struct.SkPoint** %108, align 8
  %227 = sext i32 %225 to i64
  %228 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %226, i64 %227
  %229 = bitcast %struct.SkPoint* %228 to i64*
  store i64 %223, i64* %229, align 4
  br label %430

230:                                              ; preds = %118
  %231 = inttoptr i64 %122 to %struct.SkPoint*
  %232 = inttoptr i64 %122 to <2 x float>*
  %233 = load <2 x float>, <2 x float>* %232, align 4
  %234 = extractelement <2 x float> %233, i32 0
  %235 = call float @llvm.fabs.f32(float %234) #8
  %236 = fcmp olt float %235, 0x3EC0000000000000
  %237 = insertelement <2 x float> %233, float 0.000000e+00, i32 0
  %238 = select i1 %236, <2 x float> %237, <2 x float> %233
  %239 = extractelement <2 x float> %238, i32 1
  %240 = call float @llvm.fabs.f32(float %239) #8
  %241 = fcmp olt float %240, 0x3EC0000000000000
  %242 = insertelement <2 x float> %238, float 0.000000e+00, i32 1
  %243 = select i1 %241, <2 x float> %242, <2 x float> %238
  store <2 x float> %243, <2 x float>* %87, align 8
  %244 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %231, i64 1
  %245 = bitcast %struct.SkPoint* %244 to <2 x float>*
  %246 = load <2 x float>, <2 x float>* %245, align 4
  %247 = extractelement <2 x float> %246, i32 0
  %248 = call float @llvm.fabs.f32(float %247) #8
  %249 = fcmp olt float %248, 0x3EC0000000000000
  %250 = insertelement <2 x float> %246, float 0.000000e+00, i32 0
  %251 = select i1 %249, <2 x float> %250, <2 x float> %246
  %252 = extractelement <2 x float> %251, i32 1
  %253 = call float @llvm.fabs.f32(float %252) #8
  %254 = fcmp olt float %253, 0x3EC0000000000000
  %255 = insertelement <2 x float> %251, float 0.000000e+00, i32 1
  %256 = select i1 %254, <2 x float> %255, <2 x float> %251
  store <2 x float> %256, <2 x float>* %88, align 16
  %257 = call i32 @_ZN13SkReduceOrder4QuadEPK7SkPointPS0_(%struct.SkPoint* nonnull %34, %struct.SkPoint* nonnull %34) #8
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %430, label %336

259:                                              ; preds = %118
  %260 = inttoptr i64 %122 to %struct.SkPoint*
  %261 = inttoptr i64 %122 to <2 x float>*
  %262 = load <2 x float>, <2 x float>* %261, align 4
  %263 = extractelement <2 x float> %262, i32 0
  %264 = call float @llvm.fabs.f32(float %263) #8
  %265 = fcmp olt float %264, 0x3EC0000000000000
  %266 = insertelement <2 x float> %262, float 0.000000e+00, i32 0
  %267 = select i1 %265, <2 x float> %266, <2 x float> %262
  %268 = extractelement <2 x float> %267, i32 1
  %269 = call float @llvm.fabs.f32(float %268) #8
  %270 = fcmp olt float %269, 0x3EC0000000000000
  %271 = insertelement <2 x float> %267, float 0.000000e+00, i32 1
  %272 = select i1 %270, <2 x float> %271, <2 x float> %267
  store <2 x float> %272, <2 x float>* %87, align 8
  %273 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %260, i64 1
  %274 = bitcast %struct.SkPoint* %273 to <2 x float>*
  %275 = load <2 x float>, <2 x float>* %274, align 4
  %276 = extractelement <2 x float> %275, i32 0
  %277 = call float @llvm.fabs.f32(float %276) #8
  %278 = fcmp olt float %277, 0x3EC0000000000000
  %279 = insertelement <2 x float> %275, float 0.000000e+00, i32 0
  %280 = select i1 %278, <2 x float> %279, <2 x float> %275
  %281 = extractelement <2 x float> %280, i32 1
  %282 = call float @llvm.fabs.f32(float %281) #8
  %283 = fcmp olt float %282, 0x3EC0000000000000
  %284 = insertelement <2 x float> %280, float 0.000000e+00, i32 1
  %285 = select i1 %283, <2 x float> %284, <2 x float> %280
  store <2 x float> %285, <2 x float>* %88, align 16
  %286 = call i32 @_ZN13SkReduceOrder4QuadEPK7SkPointPS0_(%struct.SkPoint* nonnull %34, %struct.SkPoint* nonnull %34) #8
  switch i32 %286, label %336 [
    i32 2, label %287
    i32 0, label %430
  ]

287:                                              ; preds = %259
  %288 = inttoptr i64 %121 to float*
  %289 = load float, float* %288, align 4
  %290 = fcmp une float %289, 1.000000e+00
  br i1 %290, label %336, label %291

291:                                              ; preds = %287
  br label %336

292:                                              ; preds = %118
  %293 = inttoptr i64 %122 to %struct.SkPoint*
  %294 = inttoptr i64 %122 to <2 x float>*
  %295 = load <2 x float>, <2 x float>* %294, align 4
  %296 = extractelement <2 x float> %295, i32 0
  %297 = call float @llvm.fabs.f32(float %296) #8
  %298 = fcmp olt float %297, 0x3EC0000000000000
  %299 = insertelement <2 x float> %295, float 0.000000e+00, i32 0
  %300 = select i1 %298, <2 x float> %299, <2 x float> %295
  %301 = extractelement <2 x float> %300, i32 1
  %302 = call float @llvm.fabs.f32(float %301) #8
  %303 = fcmp olt float %302, 0x3EC0000000000000
  %304 = insertelement <2 x float> %300, float 0.000000e+00, i32 1
  %305 = select i1 %303, <2 x float> %304, <2 x float> %300
  store <2 x float> %305, <2 x float>* %87, align 8
  %306 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %293, i64 1
  %307 = bitcast %struct.SkPoint* %306 to <2 x float>*
  %308 = load <2 x float>, <2 x float>* %307, align 4
  %309 = extractelement <2 x float> %308, i32 0
  %310 = call float @llvm.fabs.f32(float %309) #8
  %311 = fcmp olt float %310, 0x3EC0000000000000
  %312 = insertelement <2 x float> %308, float 0.000000e+00, i32 0
  %313 = select i1 %311, <2 x float> %312, <2 x float> %308
  %314 = extractelement <2 x float> %313, i32 1
  %315 = call float @llvm.fabs.f32(float %314) #8
  %316 = fcmp olt float %315, 0x3EC0000000000000
  %317 = insertelement <2 x float> %313, float 0.000000e+00, i32 1
  %318 = select i1 %316, <2 x float> %317, <2 x float> %313
  store <2 x float> %318, <2 x float>* %88, align 16
  %319 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %293, i64 2
  %320 = bitcast %struct.SkPoint* %319 to <2 x float>*
  %321 = load <2 x float>, <2 x float>* %320, align 4
  %322 = extractelement <2 x float> %321, i32 0
  %323 = call float @llvm.fabs.f32(float %322) #8
  %324 = fcmp olt float %323, 0x3EC0000000000000
  %325 = insertelement <2 x float> %321, float 0.000000e+00, i32 0
  %326 = select i1 %324, <2 x float> %325, <2 x float> %321
  %327 = extractelement <2 x float> %326, i32 1
  %328 = call float @llvm.fabs.f32(float %327) #8
  %329 = fcmp olt float %328, 0x3EC0000000000000
  %330 = insertelement <2 x float> %326, float 0.000000e+00, i32 1
  %331 = select i1 %329, <2 x float> %330, <2 x float> %326
  store <2 x float> %331, <2 x float>* %89, align 8
  %332 = call i32 @_ZN13SkReduceOrder5CubicEPK7SkPointPS0_(%struct.SkPoint* nonnull %34, %struct.SkPoint* nonnull %34) #8
  %333 = icmp eq i32 %332, 0
  br i1 %333, label %430, label %336

334:                                              ; preds = %118
  %335 = inttoptr i64 %122 to %struct.SkPoint*
  call void @_ZN15SkOpEdgeBuilder12closeContourERK7SkPointS2_(%class.SkOpEdgeBuilder* %0, %struct.SkPoint* nonnull dereferenceable(8) %34, %struct.SkPoint* nonnull dereferenceable(8) %3)
  br label %430

336:                                              ; preds = %291, %259, %287, %292, %230, %199
  %337 = phi %struct.SkPoint* [ %293, %292 ], [ %260, %291 ], [ %231, %230 ], [ %200, %199 ], [ %260, %287 ], [ %260, %259 ]
  %338 = phi i32 [ %332, %292 ], [ 2, %291 ], [ %257, %230 ], [ 1, %199 ], [ 3, %287 ], [ %286, %259 ]
  %339 = trunc i32 %338 to i8
  %340 = load i32, i32* %90, align 4
  %341 = add i32 %340, 1
  %342 = icmp sgt i32 %341, -1
  br i1 %342, label %344, label %343

343:                                              ; preds = %336
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0)) #9
  unreachable

344:                                              ; preds = %336
  %345 = load i32, i32* %91, align 8
  %346 = icmp slt i32 %345, %341
  br i1 %346, label %349, label %347

347:                                              ; preds = %344
  %348 = load i8*, i8** %92, align 8
  br label %359

349:                                              ; preds = %344
  %350 = add i32 %340, 5
  %351 = lshr i32 %350, 2
  %352 = add nuw i32 %351, %350
  %353 = icmp sgt i32 %352, -1
  br i1 %353, label %355, label %354

354:                                              ; preds = %349
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #9
  unreachable

355:                                              ; preds = %349
  store i32 %352, i32* %91, align 8
  %356 = load i8*, i8** %92, align 8
  %357 = sext i32 %352 to i64
  %358 = call i8* @_Z16sk_realloc_throwPvm(i8* %356, i64 %357) #8
  store i8* %358, i8** %92, align 8
  br label %359

359:                                              ; preds = %347, %355
  %360 = phi i8* [ %348, %347 ], [ %358, %355 ]
  store i32 %341, i32* %90, align 4
  %361 = sext i32 %340 to i64
  %362 = getelementptr inbounds i8, i8* %360, i64 %361
  store i8 %339, i8* %362, align 1
  %363 = add nsw i32 %338, 1
  %364 = ashr i32 %363, 2
  %365 = sub nsw i32 %338, %364
  %366 = load i32, i32* %94, align 4
  %367 = icmp eq i32 %365, 0
  br i1 %367, label %394, label %368

368:                                              ; preds = %359
  %369 = add i32 %366, %365
  %370 = icmp sgt i32 %369, -1
  br i1 %370, label %372, label %371

371:                                              ; preds = %368
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0)) #9
  unreachable

372:                                              ; preds = %368
  %373 = load i32, i32* %95, align 8
  %374 = icmp slt i32 %373, %369
  br i1 %374, label %375, label %386

375:                                              ; preds = %372
  %376 = add nuw i32 %369, 4
  %377 = lshr i32 %376, 2
  %378 = add nuw i32 %377, %376
  %379 = icmp sgt i32 %378, -1
  br i1 %379, label %381, label %380

380:                                              ; preds = %375
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #9
  unreachable

381:                                              ; preds = %375
  store i32 %378, i32* %95, align 8
  %382 = load i8*, i8** %96, align 8
  %383 = sext i32 %378 to i64
  %384 = shl nsw i64 %383, 3
  %385 = call i8* @_Z16sk_realloc_throwPvm(i8* %382, i64 %384) #8
  store i8* %385, i8** %96, align 8
  br label %386

386:                                              ; preds = %381, %372
  store i32 %369, i32* %94, align 4
  br i1 %97, label %394, label %387

387:                                              ; preds = %386
  %388 = load %struct.SkPoint*, %struct.SkPoint** %98, align 8
  %389 = sext i32 %366 to i64
  %390 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %388, i64 %389
  %391 = bitcast %struct.SkPoint* %390 to i8*
  %392 = sext i32 %365 to i64
  %393 = shl nsw i64 %392, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %391, i8* nonnull align 8 %99, i64 %393, i1 false) #8
  br label %394

394:                                              ; preds = %359, %386, %387
  %395 = icmp eq i32 %338, 3
  br i1 %395, label %396, label %425

396:                                              ; preds = %394
  %397 = inttoptr i64 %121 to i32*
  %398 = load i32, i32* %397, align 4
  %399 = load i32, i32* %101, align 4
  %400 = add i32 %399, 1
  %401 = icmp sgt i32 %400, -1
  br i1 %401, label %403, label %402

402:                                              ; preds = %396
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0)) #9
  unreachable

403:                                              ; preds = %396
  %404 = load i32, i32* %102, align 8
  %405 = icmp slt i32 %404, %400
  br i1 %405, label %408, label %406

406:                                              ; preds = %403
  %407 = load float*, float** %103, align 8
  br label %420

408:                                              ; preds = %403
  %409 = add i32 %399, 5
  %410 = lshr i32 %409, 2
  %411 = add nuw i32 %410, %409
  %412 = icmp sgt i32 %411, -1
  br i1 %412, label %414, label %413

413:                                              ; preds = %408
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #9
  unreachable

414:                                              ; preds = %408
  store i32 %411, i32* %102, align 8
  %415 = load i8*, i8** %104, align 8
  %416 = sext i32 %411 to i64
  %417 = shl nsw i64 %416, 2
  %418 = call i8* @_Z16sk_realloc_throwPvm(i8* %415, i64 %417) #8
  store i8* %418, i8** %104, align 8
  %419 = bitcast i8* %418 to float*
  br label %420

420:                                              ; preds = %406, %414
  %421 = phi float* [ %407, %406 ], [ %419, %414 ]
  store i32 %400, i32* %101, align 4
  %422 = sext i32 %399 to i64
  %423 = getelementptr inbounds float, float* %421, i64 %422
  %424 = bitcast float* %423 to i32*
  store i32 %398, i32* %424, align 4
  br label %425

425:                                              ; preds = %420, %394
  %426 = sext i32 %365 to i64
  %427 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %4, i64 0, i64 %426
  %428 = bitcast %struct.SkPoint* %427 to i64*
  %429 = load i64, i64* %428, align 8
  store i64 %429, i64* %105, align 16
  br label %430

430:                                              ; preds = %214, %292, %259, %230, %222, %425, %334, %192
  %431 = phi %struct.SkPoint* [ %337, %425 ], [ %335, %334 ], [ %126, %192 ], [ %200, %214 ], [ %200, %222 ], [ %231, %230 ], [ %260, %259 ], [ %293, %292 ]
  %432 = phi i8 [ 1, %425 ], [ 0, %334 ], [ 0, %192 ], [ %120, %214 ], [ %120, %222 ], [ %120, %230 ], [ %120, %259 ], [ %120, %292 ]
  %433 = getelementptr inbounds i8, i8* %119, i64 1
  %434 = load i8, i8* %119, align 1
  switch i8 %434, label %438 [
    i8 0, label %439
    i8 1, label %439
    i8 2, label %435
    i8 3, label %442
    i8 4, label %436
    i8 5, label %437
  ]

435:                                              ; preds = %430
  br label %439

436:                                              ; preds = %430
  br label %439

437:                                              ; preds = %430
  br label %439

438:                                              ; preds = %430
  call void @llvm.trap() #8
  unreachable

439:                                              ; preds = %437, %436, %435, %430, %430
  %440 = phi i64 [ 1, %430 ], [ 1, %430 ], [ 2, %435 ], [ 3, %436 ], [ 0, %437 ]
  %441 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %431, i64 %440
  br label %447

442:                                              ; preds = %430
  %443 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %431, i64 2
  %444 = inttoptr i64 %121 to float*
  %445 = getelementptr inbounds float, float* %444, i64 1
  %446 = ptrtoint float* %445 to i64
  br label %447

447:                                              ; preds = %439, %442
  %448 = phi %struct.SkPoint* [ %441, %439 ], [ %443, %442 ]
  %449 = phi i64 [ %121, %439 ], [ %446, %442 ]
  %450 = ptrtoint %struct.SkPoint* %448 to i64
  %451 = icmp eq i8* %77, %433
  br i1 %451, label %111, label %118

452:                                              ; preds = %111
  call void @_ZN15SkOpEdgeBuilder12closeContourERK7SkPointS2_(%class.SkOpEdgeBuilder* %0, %struct.SkPoint* nonnull dereferenceable(8) %34, %struct.SkPoint* nonnull dereferenceable(8) %3)
  br label %453

453:                                              ; preds = %76, %111, %452
  %454 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 4
  %455 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 4, i32 2
  %456 = load i32, i32* %455, align 4
  %457 = add i32 %456, 1
  %458 = icmp sgt i32 %457, -1
  br i1 %458, label %460, label %459

459:                                              ; preds = %453
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0)) #9
  unreachable

460:                                              ; preds = %453
  %461 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 4, i32 1
  %462 = load i32, i32* %461, align 8
  %463 = icmp slt i32 %462, %457
  br i1 %463, label %467, label %464

464:                                              ; preds = %460
  %465 = getelementptr inbounds %class.SkTDArray.1, %class.SkTDArray.1* %454, i64 0, i32 0
  %466 = load i8*, i8** %465, align 8
  br label %478

467:                                              ; preds = %460
  %468 = add i32 %456, 5
  %469 = lshr i32 %468, 2
  %470 = add nuw i32 %469, %468
  %471 = icmp sgt i32 %470, -1
  br i1 %471, label %473, label %472

472:                                              ; preds = %467
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #9
  unreachable

473:                                              ; preds = %467
  store i32 %470, i32* %461, align 8
  %474 = getelementptr inbounds %class.SkTDArray.1, %class.SkTDArray.1* %454, i64 0, i32 0
  %475 = load i8*, i8** %474, align 8
  %476 = sext i32 %470 to i64
  %477 = call i8* @_Z16sk_realloc_throwPvm(i8* %475, i64 %476) #8
  store i8* %477, i8** %474, align 8
  br label %478

478:                                              ; preds = %464, %473
  %479 = phi i8* [ %466, %464 ], [ %477, %473 ]
  store i32 %457, i32* %455, align 4
  %480 = sext i32 %456 to i64
  %481 = getelementptr inbounds i8, i8* %479, i64 %480
  store i8 6, i8* %481, align 1
  %482 = load i32, i32* %455, align 4
  %483 = add nsw i32 %482, -1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %33) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #8
  br label %484

484:                                              ; preds = %478, %27
  %485 = phi i32 [ %483, %478 ], [ 0, %27 ]
  ret i32 %485
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkOpEdgeBuilder10addOperandERK6SkPath(%class.SkOpEdgeBuilder* nocapture, %class.SkPath* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 4, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, -1
  store i32 %5, i32* %3, align 4
  %6 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 1
  store %class.SkPath* %1, %class.SkPath** %6, align 8
  %7 = getelementptr inbounds %class.SkPath, %class.SkPath* %1, i64 0, i32 4
  %8 = load i8, i8* %7, align 2
  %9 = and i8 %8, 1
  %10 = icmp eq i8 %9, 0
  %11 = select i1 %10, i32 -1, i32 1
  %12 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 7, i64 1
  store i32 %11, i32* %12, align 4
  %13 = tail call i32 @_ZN15SkOpEdgeBuilder8preFetchEv(%class.SkOpEdgeBuilder* %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN15SkOpEdgeBuilder6finishEv(%class.SkOpEdgeBuilder*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 9
  store i8 0, i8* %2, align 4
  %3 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 11
  %4 = load i8, i8* %3, align 2, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %74

6:                                                ; preds = %1
  %7 = tail call zeroext i1 @_ZN15SkOpEdgeBuilder4walkEv(%class.SkOpEdgeBuilder* %0)
  br i1 %7, label %8, label %74

8:                                                ; preds = %6
  %9 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 5
  tail call void @_ZN18SkOpContourBuilder5flushEv(%class.SkOpContourBuilder* %9) #8
  %10 = getelementptr inbounds %class.SkOpContourBuilder, %class.SkOpContourBuilder* %9, i64 0, i32 0
  %11 = load %class.SkOpContour*, %class.SkOpContour** %10, align 8
  %12 = icmp eq %class.SkOpContour* %11, null
  br i1 %12, label %74, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %11, i64 0, i32 6
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %62, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %11, i64 0, i32 1, i32 6
  %19 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %11, i64 0, i32 4
  %20 = bitcast %struct.SkPathOpsBounds* %19 to i8*
  %21 = bitcast %struct.SkPathOpsBounds* %18 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 4 %21, i64 16, i1 false) #8
  %22 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %11, i64 0, i32 1, i32 3
  %23 = load %class.SkOpSegment*, %class.SkOpSegment** %22, align 8
  %24 = icmp eq %class.SkOpSegment* %23, null
  br i1 %24, label %61, label %25

25:                                               ; preds = %17
  %26 = getelementptr inbounds %struct.SkPathOpsBounds, %struct.SkPathOpsBounds* %19, i64 0, i32 0, i32 0
  %27 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %11, i64 0, i32 4, i32 0, i32 1
  %28 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %11, i64 0, i32 4, i32 0, i32 2
  %29 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %11, i64 0, i32 4, i32 0, i32 3
  %30 = load float, float* %26, align 4
  br label %31

31:                                               ; preds = %57, %25
  %32 = phi float [ %30, %25 ], [ %45, %57 ]
  %33 = phi %class.SkOpSegment* [ %23, %25 ], [ %59, %57 ]
  %34 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %33, i64 0, i32 6, i32 0, i32 0
  %35 = load float, float* %34, align 4
  %36 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %33, i64 0, i32 6, i32 0, i32 1
  %37 = load float, float* %36, align 4
  %38 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %33, i64 0, i32 6, i32 0, i32 2
  %39 = load float, float* %38, align 4
  %40 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %33, i64 0, i32 6, i32 0, i32 3
  %41 = load float, float* %40, align 4
  %42 = fcmp ogt float %32, %35
  br i1 %42, label %43, label %44

43:                                               ; preds = %31
  store float %35, float* %26, align 4
  br label %44

44:                                               ; preds = %43, %31
  %45 = phi float [ %35, %43 ], [ %32, %31 ]
  %46 = load float, float* %27, align 4
  %47 = fcmp ogt float %46, %37
  br i1 %47, label %48, label %49

48:                                               ; preds = %44
  store float %37, float* %27, align 4
  br label %49

49:                                               ; preds = %48, %44
  %50 = load float, float* %28, align 4
  %51 = fcmp olt float %50, %39
  br i1 %51, label %52, label %53

52:                                               ; preds = %49
  store float %39, float* %28, align 4
  br label %53

53:                                               ; preds = %52, %49
  %54 = load float, float* %29, align 4
  %55 = fcmp olt float %54, %41
  br i1 %55, label %56, label %57

56:                                               ; preds = %53
  store float %41, float* %29, align 4
  br label %57

57:                                               ; preds = %56, %53
  %58 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %33, i64 0, i32 3
  %59 = load %class.SkOpSegment*, %class.SkOpSegment** %58, align 8
  %60 = icmp eq %class.SkOpSegment* %59, null
  br i1 %60, label %61, label %31

61:                                               ; preds = %57, %17
  tail call void @_ZN18SkOpContourBuilder5flushEv(%class.SkOpContourBuilder* %9) #8
  store %class.SkOpContour* null, %class.SkOpContour** %10, align 8
  br label %74

62:                                               ; preds = %13
  %63 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 6
  %64 = bitcast %class.SkOpContourHead** %63 to %class.SkOpContour**
  %65 = load %class.SkOpContour*, %class.SkOpContour** %64, align 8
  %66 = icmp eq %class.SkOpContour* %65, %11
  br i1 %66, label %74, label %67

67:                                               ; preds = %62, %67
  %68 = phi %class.SkOpContour* [ %70, %67 ], [ %65, %62 ]
  %69 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %68, i64 0, i32 3
  %70 = load %class.SkOpContour*, %class.SkOpContour** %69, align 8
  %71 = icmp eq %class.SkOpContour* %70, %11
  br i1 %71, label %72, label %67

72:                                               ; preds = %67
  %73 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %68, i64 0, i32 3
  store %class.SkOpContour* null, %class.SkOpContour** %73, align 8
  br label %74

74:                                               ; preds = %61, %8, %72, %62, %6, %1
  %75 = phi i1 [ false, %1 ], [ false, %6 ], [ true, %62 ], [ true, %72 ], [ true, %8 ], [ true, %61 ]
  ret i1 %75
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN15SkOpEdgeBuilder4walkEv(%class.SkOpEdgeBuilder*) local_unnamed_addr #1 align 2 {
  %2 = alloca %class.anon.30, align 1
  %3 = alloca %struct.SkDCubic, align 8
  %4 = alloca [5 x %struct.SkPoint], align 16
  %5 = alloca [2 x [2 x %struct.SkPoint]], align 16
  %6 = alloca %struct.SkConic, align 4
  %7 = alloca [2 x %struct.SkConic], align 16
  %8 = alloca [2 x [3 x %struct.SkPoint]], align 16
  %9 = alloca [3 x float], align 4
  %10 = alloca [4 x %struct.Splitsville], align 16
  %11 = alloca %struct.SkDCubic, align 8
  %12 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 4, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 8
  %15 = load i32, i32* %14, align 8
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %13, i64 %16
  %18 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 5
  %19 = getelementptr inbounds %class.SkOpContourBuilder, %class.SkOpContourBuilder* %18, i64 0, i32 0
  %20 = load %class.SkOpContour*, %class.SkOpContour** %19, align 8
  %21 = load i8, i8* %13, align 1
  %22 = icmp eq i8 %21, 6
  br i1 %22, label %1060, label %23

23:                                               ; preds = %1
  %24 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 3, i32 0
  %25 = load float*, float** %24, align 8
  %26 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 2, i32 0
  %27 = load %struct.SkPoint*, %struct.SkPoint** %26, align 8
  %28 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 9
  %29 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 10
  %30 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 6
  %31 = bitcast %class.SkOpContourBuilder* %18 to i8**
  %32 = bitcast %class.SkOpEdgeBuilder* %0 to i64*
  %33 = bitcast [3 x float]* %9 to i8*
  %34 = getelementptr inbounds [3 x float], [3 x float]* %9, i64 0, i64 0
  %35 = getelementptr inbounds [3 x float], [3 x float]* %9, i64 0, i64 1
  %36 = getelementptr inbounds [3 x float], [3 x float]* %9, i64 0, i64 2
  %37 = bitcast [4 x %struct.Splitsville]* %10 to i8*
  %38 = getelementptr inbounds %class.anon.30, %class.anon.30* %2, i64 0, i32 0
  %39 = bitcast %struct.SkDCubic* %11 to i8*
  %40 = bitcast %struct.SkDCubic* %3 to i8*
  %41 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 0, i32 0
  %42 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 0, i32 1
  %43 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 1, i32 0
  %44 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 1, i32 1
  %45 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 2, i32 0
  %46 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 2, i32 1
  %47 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 3, i32 0
  %48 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 3, i32 1
  %49 = bitcast %struct.SkConic* %6 to i8*
  %50 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %6, i64 0, i32 1
  %51 = bitcast [2 x %struct.SkConic]* %7 to i8*
  %52 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %7, i64 0, i64 0
  %53 = bitcast [2 x [3 x %struct.SkPoint]]* %8 to i8*
  %54 = getelementptr inbounds [2 x [3 x %struct.SkPoint]], [2 x [3 x %struct.SkPoint]]* %8, i64 0, i64 0
  %55 = getelementptr inbounds [2 x [3 x %struct.SkPoint]], [2 x [3 x %struct.SkPoint]]* %8, i64 0, i64 0, i64 0
  %56 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %7, i64 0, i64 1
  %57 = getelementptr inbounds [2 x [3 x %struct.SkPoint]], [2 x [3 x %struct.SkPoint]]* %8, i64 0, i64 1
  %58 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %57, i64 0, i64 0
  %59 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %7, i64 0, i64 0, i32 0
  %60 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %56, i64 0, i32 0
  %61 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %7, i64 0, i64 0, i32 1
  %62 = getelementptr inbounds [2 x %struct.SkConic], [2 x %struct.SkConic]* %7, i64 0, i64 1, i32 1
  %63 = bitcast [5 x %struct.SkPoint]* %4 to i8*
  %64 = getelementptr inbounds [5 x %struct.SkPoint], [5 x %struct.SkPoint]* %4, i64 0, i64 0
  %65 = getelementptr inbounds [5 x %struct.SkPoint], [5 x %struct.SkPoint]* %4, i64 0, i64 0, i32 0
  %66 = getelementptr inbounds float, float* %65, i64 1
  %67 = getelementptr inbounds [5 x %struct.SkPoint], [5 x %struct.SkPoint]* %4, i64 0, i64 1, i32 0
  %68 = getelementptr inbounds float, float* %65, i64 3
  %69 = getelementptr inbounds [5 x %struct.SkPoint], [5 x %struct.SkPoint]* %4, i64 0, i64 2, i32 0
  %70 = getelementptr inbounds float, float* %65, i64 5
  %71 = getelementptr inbounds [5 x %struct.SkPoint], [5 x %struct.SkPoint]* %4, i64 0, i64 3, i32 0
  %72 = getelementptr inbounds float, float* %65, i64 7
  %73 = getelementptr inbounds [5 x %struct.SkPoint], [5 x %struct.SkPoint]* %4, i64 0, i64 4, i32 0
  %74 = getelementptr inbounds float, float* %65, i64 9
  %75 = bitcast [2 x [2 x %struct.SkPoint]]* %5 to i8*
  %76 = getelementptr inbounds [2 x [2 x %struct.SkPoint]], [2 x [2 x %struct.SkPoint]]* %5, i64 0, i64 0, i64 0
  %77 = getelementptr inbounds [2 x [2 x %struct.SkPoint]], [2 x [2 x %struct.SkPoint]]* %5, i64 0, i64 1, i64 0
  %78 = getelementptr inbounds [5 x %struct.SkPoint], [5 x %struct.SkPoint]* %4, i64 0, i64 2
  %79 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %6, i64 0, i32 1
  %80 = bitcast float* %79 to i32*
  %81 = bitcast [5 x %struct.SkPoint]* %4 to <2 x float>*
  %82 = getelementptr inbounds [5 x %struct.SkPoint], [5 x %struct.SkPoint]* %4, i64 0, i64 1
  %83 = bitcast %struct.SkPoint* %82 to <2 x float>*
  %84 = bitcast %struct.SkPoint* %78 to <2 x float>*
  %85 = getelementptr inbounds [5 x %struct.SkPoint], [5 x %struct.SkPoint]* %4, i64 0, i64 3
  %86 = bitcast %struct.SkPoint* %85 to <2 x float>*
  %87 = getelementptr inbounds [5 x %struct.SkPoint], [5 x %struct.SkPoint]* %4, i64 0, i64 4
  %88 = bitcast %struct.SkPoint* %87 to <2 x float>*
  %89 = bitcast [2 x [2 x %struct.SkPoint]]* %5 to i8*
  br label %90

90:                                               ; preds = %23, %1050
  %91 = phi i8 [ %21, %23 ], [ %1058, %1050 ]
  %92 = phi i8* [ %13, %23 ], [ %110, %1050 ]
  %93 = phi i32 [ 0, %23 ], [ %100, %1050 ]
  %94 = phi %class.SkOpContour* [ %20, %23 ], [ %106, %1050 ]
  %95 = phi float* [ %25, %23 ], [ %1052, %1050 ]
  %96 = phi %struct.SkPoint* [ %27, %23 ], [ %1057, %1050 ]
  br label %97

97:                                               ; preds = %90, %263
  %98 = phi i8 [ %91, %90 ], [ %277, %263 ]
  %99 = phi i8* [ %92, %90 ], [ %110, %263 ]
  %100 = phi i32 [ %93, %90 ], [ 1, %263 ]
  %101 = phi %class.SkOpContour* [ %94, %90 ], [ %264, %263 ]
  %102 = phi %struct.SkPoint* [ %96, %90 ], [ %276, %263 ]
  br label %103

103:                                              ; preds = %97, %1046
  %104 = phi i8 [ %98, %97 ], [ %1047, %1046 ]
  %105 = phi i8* [ %99, %97 ], [ %110, %1046 ]
  %106 = phi %class.SkOpContour* [ %101, %97 ], [ null, %1046 ]
  %107 = icmp eq i8* %105, %17
  br i1 %107, label %108, label %109

108:                                              ; preds = %103
  store i8 1, i8* %28, align 4
  br label %109

109:                                              ; preds = %108, %103
  %110 = getelementptr inbounds i8, i8* %105, i64 1
  switch i8 %104, label %1123 [
    i8 0, label %111
    i8 1, label %279
    i8 2, label %281
    i8 3, label %525
    i8 4, label %702
    i8 5, label %994
  ]

111:                                              ; preds = %109
  %112 = icmp eq %class.SkOpContour* %106, null
  br i1 %112, label %222, label %113

113:                                              ; preds = %111
  %114 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %106, i64 0, i32 6
  %115 = load i32, i32* %114, align 4
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %263, label %117

117:                                              ; preds = %113
  %118 = load i8, i8* %29, align 1, !range !2
  %119 = icmp eq i8 %118, 0
  call void @_ZN18SkOpContourBuilder5flushEv(%class.SkOpContourBuilder* %18) #8
  %120 = load %class.SkOpContour*, %class.SkOpContour** %19, align 8
  %121 = icmp eq %class.SkOpContour* %120, null
  br i1 %119, label %172, label %122

122:                                              ; preds = %117
  br i1 %121, label %263, label %123

123:                                              ; preds = %122
  %124 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %120, i64 0, i32 6
  %125 = load i32, i32* %124, align 4
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %263, label %127

127:                                              ; preds = %123
  %128 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %120, i64 0, i32 1, i32 6
  %129 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %120, i64 0, i32 4
  %130 = bitcast %struct.SkPathOpsBounds* %129 to i8*
  %131 = bitcast %struct.SkPathOpsBounds* %128 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %130, i8* align 4 %131, i64 16, i1 false) #8
  %132 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %120, i64 0, i32 1, i32 3
  %133 = load %class.SkOpSegment*, %class.SkOpSegment** %132, align 8
  %134 = icmp eq %class.SkOpSegment* %133, null
  br i1 %134, label %171, label %135

135:                                              ; preds = %127
  %136 = getelementptr inbounds %struct.SkPathOpsBounds, %struct.SkPathOpsBounds* %129, i64 0, i32 0, i32 0
  %137 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %120, i64 0, i32 4, i32 0, i32 1
  %138 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %120, i64 0, i32 4, i32 0, i32 2
  %139 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %120, i64 0, i32 4, i32 0, i32 3
  %140 = load float, float* %136, align 4
  br label %141

141:                                              ; preds = %167, %135
  %142 = phi float [ %140, %135 ], [ %155, %167 ]
  %143 = phi %class.SkOpSegment* [ %133, %135 ], [ %169, %167 ]
  %144 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %143, i64 0, i32 6, i32 0, i32 0
  %145 = load float, float* %144, align 4
  %146 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %143, i64 0, i32 6, i32 0, i32 1
  %147 = load float, float* %146, align 4
  %148 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %143, i64 0, i32 6, i32 0, i32 2
  %149 = load float, float* %148, align 4
  %150 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %143, i64 0, i32 6, i32 0, i32 3
  %151 = load float, float* %150, align 4
  %152 = fcmp ogt float %142, %145
  br i1 %152, label %153, label %154

153:                                              ; preds = %141
  store float %145, float* %136, align 4
  br label %154

154:                                              ; preds = %153, %141
  %155 = phi float [ %145, %153 ], [ %142, %141 ]
  %156 = load float, float* %137, align 4
  %157 = fcmp ogt float %156, %147
  br i1 %157, label %158, label %159

158:                                              ; preds = %154
  store float %147, float* %137, align 4
  br label %159

159:                                              ; preds = %158, %154
  %160 = load float, float* %138, align 4
  %161 = fcmp olt float %160, %149
  br i1 %161, label %162, label %163

162:                                              ; preds = %159
  store float %149, float* %138, align 4
  br label %163

163:                                              ; preds = %162, %159
  %164 = load float, float* %139, align 4
  %165 = fcmp olt float %164, %151
  br i1 %165, label %166, label %167

166:                                              ; preds = %163
  store float %151, float* %139, align 4
  br label %167

167:                                              ; preds = %166, %163
  %168 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %143, i64 0, i32 3
  %169 = load %class.SkOpSegment*, %class.SkOpSegment** %168, align 8
  %170 = icmp eq %class.SkOpSegment* %169, null
  br i1 %170, label %171, label %141

171:                                              ; preds = %167, %127
  call void @_ZN18SkOpContourBuilder5flushEv(%class.SkOpContourBuilder* %18) #8
  store %class.SkOpContour* null, %class.SkOpContour** %19, align 8
  br label %263

172:                                              ; preds = %117
  br i1 %121, label %263, label %173

173:                                              ; preds = %172
  %174 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %120, i64 0, i32 6
  %175 = load i32, i32* %174, align 4
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %263, label %177

177:                                              ; preds = %173
  %178 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %120, i64 0, i32 1, i32 6
  %179 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %120, i64 0, i32 4
  %180 = bitcast %struct.SkPathOpsBounds* %179 to i8*
  %181 = bitcast %struct.SkPathOpsBounds* %178 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %180, i8* align 4 %181, i64 16, i1 false) #8
  %182 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %120, i64 0, i32 1, i32 3
  %183 = load %class.SkOpSegment*, %class.SkOpSegment** %182, align 8
  %184 = icmp eq %class.SkOpSegment* %183, null
  br i1 %184, label %221, label %185

185:                                              ; preds = %177
  %186 = getelementptr inbounds %struct.SkPathOpsBounds, %struct.SkPathOpsBounds* %179, i64 0, i32 0, i32 0
  %187 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %120, i64 0, i32 4, i32 0, i32 1
  %188 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %120, i64 0, i32 4, i32 0, i32 2
  %189 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %120, i64 0, i32 4, i32 0, i32 3
  %190 = load float, float* %186, align 4
  br label %191

191:                                              ; preds = %217, %185
  %192 = phi float [ %190, %185 ], [ %205, %217 ]
  %193 = phi %class.SkOpSegment* [ %183, %185 ], [ %219, %217 ]
  %194 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %193, i64 0, i32 6, i32 0, i32 0
  %195 = load float, float* %194, align 4
  %196 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %193, i64 0, i32 6, i32 0, i32 1
  %197 = load float, float* %196, align 4
  %198 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %193, i64 0, i32 6, i32 0, i32 2
  %199 = load float, float* %198, align 4
  %200 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %193, i64 0, i32 6, i32 0, i32 3
  %201 = load float, float* %200, align 4
  %202 = fcmp ogt float %192, %195
  br i1 %202, label %203, label %204

203:                                              ; preds = %191
  store float %195, float* %186, align 4
  br label %204

204:                                              ; preds = %203, %191
  %205 = phi float [ %195, %203 ], [ %192, %191 ]
  %206 = load float, float* %187, align 4
  %207 = fcmp ogt float %206, %197
  br i1 %207, label %208, label %209

208:                                              ; preds = %204
  store float %197, float* %187, align 4
  br label %209

209:                                              ; preds = %208, %204
  %210 = load float, float* %188, align 4
  %211 = fcmp olt float %210, %199
  br i1 %211, label %212, label %213

212:                                              ; preds = %209
  store float %199, float* %188, align 4
  br label %213

213:                                              ; preds = %212, %209
  %214 = load float, float* %189, align 4
  %215 = fcmp olt float %214, %201
  br i1 %215, label %216, label %217

216:                                              ; preds = %213
  store float %201, float* %189, align 4
  br label %217

217:                                              ; preds = %216, %213
  %218 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %193, i64 0, i32 3
  %219 = load %class.SkOpSegment*, %class.SkOpSegment** %218, align 8
  %220 = icmp eq %class.SkOpSegment* %219, null
  br i1 %220, label %221, label %191

221:                                              ; preds = %217, %177
  call void @_ZN18SkOpContourBuilder5flushEv(%class.SkOpContourBuilder* %18) #8
  store %class.SkOpContour* null, %class.SkOpContour** %19, align 8
  br label %263

222:                                              ; preds = %111
  %223 = load %class.SkOpContourHead*, %class.SkOpContourHead** %30, align 8
  %224 = bitcast %class.SkOpContourHead* %223 to %class.SkOpContour*
  %225 = getelementptr inbounds %class.SkOpContourHead, %class.SkOpContourHead* %223, i64 0, i32 0, i32 0
  %226 = load %class.SkOpGlobalState*, %class.SkOpGlobalState** %225, align 8
  %227 = getelementptr inbounds %class.SkOpGlobalState, %class.SkOpGlobalState* %226, i64 0, i32 0
  %228 = load %class.SkArenaAlloc*, %class.SkArenaAlloc** %227, align 8
  %229 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %228, i64 0, i32 1
  %230 = bitcast i8** %229 to i64*
  %231 = load i64, i64* %230, align 8
  %232 = sub i64 0, %231
  %233 = and i64 %232, 7
  %234 = or i64 %233, 344
  %235 = getelementptr inbounds %class.SkArenaAlloc, %class.SkArenaAlloc* %228, i64 0, i32 2
  %236 = bitcast i8** %235 to i64*
  %237 = load i64, i64* %236, align 8
  %238 = sub i64 %237, %231
  %239 = icmp ugt i64 %234, %238
  br i1 %239, label %240, label %244

240:                                              ; preds = %222
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %228, i32 344, i32 8) #8
  %241 = load i64, i64* %230, align 8
  %242 = sub i64 0, %241
  %243 = and i64 %242, 7
  br label %244

244:                                              ; preds = %240, %222
  %245 = phi i64 [ %241, %240 ], [ %231, %222 ]
  %246 = phi i64 [ %243, %240 ], [ %233, %222 ]
  %247 = inttoptr i64 %245 to i8*
  %248 = getelementptr inbounds i8, i8* %247, i64 %246
  %249 = getelementptr inbounds i8, i8* %248, i64 344
  store i8* %249, i8** %229, align 8
  %250 = getelementptr inbounds i8, i8* %248, i64 288
  %251 = getelementptr inbounds i8, i8* %248, i64 324
  %252 = bitcast i8* %251 to i32*
  store i32 0, i32* %252, align 4
  %253 = getelementptr inbounds i8, i8* %248, i64 332
  store i8 0, i8* %253, align 4
  call void @llvm.memset.p0i8.i64(i8* align 8 %250, i8 0, i64 16, i1 false) #8
  br label %254

254:                                              ; preds = %254, %244
  %255 = phi %class.SkOpContour* [ %224, %244 ], [ %257, %254 ]
  %256 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %255, i64 0, i32 3
  %257 = load %class.SkOpContour*, %class.SkOpContour** %256, align 8
  %258 = icmp eq %class.SkOpContour* %257, null
  br i1 %258, label %259, label %254

259:                                              ; preds = %254
  %260 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %255, i64 0, i32 3
  %261 = bitcast i8* %248 to %class.SkOpContour*
  %262 = bitcast %class.SkOpContour** %260 to i8**
  store i8* %248, i8** %262, align 8
  call void @_ZN18SkOpContourBuilder5flushEv(%class.SkOpContourBuilder* %18) #8
  store i8* %248, i8** %31, align 8
  br label %263

263:                                              ; preds = %113, %122, %123, %171, %172, %173, %221, %259
  %264 = phi %class.SkOpContour* [ %261, %259 ], [ %106, %221 ], [ %106, %173 ], [ %106, %172 ], [ %106, %171 ], [ %106, %123 ], [ %106, %122 ], [ %106, %113 ]
  %265 = load i64, i64* %32, align 8
  %266 = load i8, i8* %28, align 4, !range !2
  %267 = zext i8 %266 to i64
  %268 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 7, i64 %267
  %269 = load i32, i32* %268, align 4
  %270 = icmp eq i32 %269, 1
  %271 = zext i1 %270 to i8
  %272 = bitcast %class.SkOpContour* %264 to i64*
  store i64 %265, i64* %272, align 8
  %273 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %264, i64 0, i32 9
  store i8 %266, i8* %273, align 1
  %274 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %264, i64 0, i32 11
  store i8 %271, i8* %274, align 1
  %275 = zext i32 %100 to i64
  %276 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %102, i64 %275
  %277 = load i8, i8* %110, align 1
  %278 = icmp eq i8 %277, 6
  br i1 %278, label %1060, label %97

279:                                              ; preds = %109
  %280 = zext i8 %104 to i32
  call void @_ZN18SkOpContourBuilder7addLineEPK7SkPoint(%class.SkOpContourBuilder* %18, %struct.SkPoint* %102) #8
  br label %1050

281:                                              ; preds = %109
  %282 = zext i8 %104 to i32
  %283 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %102, i64 1, i32 0
  %284 = bitcast float* %283 to <2 x float>*
  %285 = load <2 x float>, <2 x float>* %284, align 4
  %286 = bitcast %struct.SkPoint* %102 to <2 x float>*
  %287 = load <2 x float>, <2 x float>* %286, align 4
  %288 = fsub <2 x float> %285, %287
  %289 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %102, i64 2, i32 0
  %290 = bitcast float* %289 to <2 x float>*
  %291 = load <2 x float>, <2 x float>* %290, align 4
  %292 = fsub <2 x float> %291, %285
  %293 = fmul <2 x float> %288, %292
  %294 = extractelement <2 x float> %293, i32 0
  %295 = extractelement <2 x float> %293, i32 1
  %296 = fadd float %294, %295
  %297 = fcmp olt float %296, 0.000000e+00
  br i1 %297, label %298, label %524

298:                                              ; preds = %281
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %63) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %63, i8 -1, i64 40, i1 false)
  %299 = call i32 @_Z24SkChopQuadAtMaxCurvaturePK7SkPointPS_(%struct.SkPoint* %102, %struct.SkPoint* nonnull %64) #8
  %300 = icmp eq i32 %299, 1
  br i1 %300, label %523, label %301

301:                                              ; preds = %298
  %302 = load float, float* %65, align 16
  %303 = fmul float %302, 0.000000e+00
  %304 = load float, float* %66, align 4
  %305 = fmul float %303, %304
  %306 = load float, float* %67, align 8
  %307 = fmul float %305, %306
  %308 = load float, float* %68, align 4
  %309 = fmul float %307, %308
  %310 = load float, float* %69, align 16
  %311 = fmul float %309, %310
  %312 = load float, float* %70, align 4
  %313 = fmul float %311, %312
  %314 = load float, float* %71, align 8
  %315 = fmul float %313, %314
  %316 = load float, float* %72, align 4
  %317 = fmul float %315, %316
  %318 = load float, float* %73, align 16
  %319 = fmul float %317, %318
  %320 = load float, float* %74, align 4
  %321 = fmul float %319, %320
  %322 = fcmp oeq float %321, 0.000000e+00
  br i1 %322, label %323, label %386

323:                                              ; preds = %301
  %324 = load <2 x float>, <2 x float>* %81, align 16
  %325 = extractelement <2 x float> %324, i32 0
  %326 = call float @llvm.fabs.f32(float %325) #8
  %327 = fcmp olt float %326, 0x3EC0000000000000
  %328 = insertelement <2 x float> %324, float 0.000000e+00, i32 0
  %329 = select i1 %327, <2 x float> %328, <2 x float> %324
  %330 = extractelement <2 x float> %329, i32 1
  %331 = call float @llvm.fabs.f32(float %330) #8
  %332 = fcmp olt float %331, 0x3EC0000000000000
  %333 = insertelement <2 x float> %329, float 0.000000e+00, i32 1
  %334 = select i1 %332, <2 x float> %333, <2 x float> %329
  store <2 x float> %334, <2 x float>* %81, align 16
  %335 = load <2 x float>, <2 x float>* %83, align 8
  %336 = extractelement <2 x float> %335, i32 0
  %337 = call float @llvm.fabs.f32(float %336) #8
  %338 = fcmp olt float %337, 0x3EC0000000000000
  %339 = insertelement <2 x float> %335, float 0.000000e+00, i32 0
  %340 = select i1 %338, <2 x float> %339, <2 x float> %335
  %341 = extractelement <2 x float> %340, i32 1
  %342 = call float @llvm.fabs.f32(float %341) #8
  %343 = fcmp olt float %342, 0x3EC0000000000000
  %344 = insertelement <2 x float> %340, float 0.000000e+00, i32 1
  %345 = select i1 %343, <2 x float> %344, <2 x float> %340
  store <2 x float> %345, <2 x float>* %83, align 8
  %346 = load <2 x float>, <2 x float>* %84, align 16
  %347 = extractelement <2 x float> %346, i32 0
  %348 = call float @llvm.fabs.f32(float %347) #8
  %349 = fcmp olt float %348, 0x3EC0000000000000
  %350 = insertelement <2 x float> %346, float 0.000000e+00, i32 0
  %351 = select i1 %349, <2 x float> %350, <2 x float> %346
  %352 = extractelement <2 x float> %351, i32 1
  %353 = call float @llvm.fabs.f32(float %352) #8
  %354 = fcmp olt float %353, 0x3EC0000000000000
  %355 = insertelement <2 x float> %351, float 0.000000e+00, i32 1
  %356 = select i1 %354, <2 x float> %355, <2 x float> %351
  store <2 x float> %356, <2 x float>* %84, align 16
  %357 = load <2 x float>, <2 x float>* %86, align 8
  %358 = extractelement <2 x float> %357, i32 0
  %359 = call float @llvm.fabs.f32(float %358) #8
  %360 = fcmp olt float %359, 0x3EC0000000000000
  %361 = insertelement <2 x float> %357, float 0.000000e+00, i32 0
  %362 = select i1 %360, <2 x float> %361, <2 x float> %357
  %363 = extractelement <2 x float> %362, i32 1
  %364 = call float @llvm.fabs.f32(float %363) #8
  %365 = fcmp olt float %364, 0x3EC0000000000000
  %366 = insertelement <2 x float> %362, float 0.000000e+00, i32 1
  %367 = select i1 %365, <2 x float> %366, <2 x float> %362
  store <2 x float> %367, <2 x float>* %86, align 8
  %368 = load <2 x float>, <2 x float>* %88, align 16
  %369 = extractelement <2 x float> %368, i32 0
  %370 = call float @llvm.fabs.f32(float %369) #8
  %371 = fcmp olt float %370, 0x3EC0000000000000
  %372 = insertelement <2 x float> %368, float 0.000000e+00, i32 0
  %373 = select i1 %371, <2 x float> %372, <2 x float> %368
  %374 = extractelement <2 x float> %373, i32 1
  %375 = call float @llvm.fabs.f32(float %374) #8
  %376 = fcmp olt float %375, 0x3EC0000000000000
  %377 = insertelement <2 x float> %373, float 0.000000e+00, i32 1
  %378 = select i1 %376, <2 x float> %377, <2 x float> %373
  store <2 x float> %378, <2 x float>* %88, align 16
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %75) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %89, i8 -1, i64 32, i1 false)
  %379 = call i32 @_ZN13SkReduceOrder4QuadEPK7SkPointPS0_(%struct.SkPoint* nonnull %64, %struct.SkPoint* nonnull %76) #8
  %380 = call i32 @_ZN13SkReduceOrder4QuadEPK7SkPointPS0_(%struct.SkPoint* %78, %struct.SkPoint* %77) #8
  %381 = icmp eq i32 %379, 1
  %382 = select i1 %381, %struct.SkPoint* %76, %struct.SkPoint* %64
  %383 = icmp eq i32 %380, 1
  %384 = select i1 %383, %struct.SkPoint* %77, %struct.SkPoint* %78
  %385 = icmp eq i32 %379, 0
  br i1 %385, label %521, label %387

386:                                              ; preds = %301
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %63) #8
  br label %1123

387:                                              ; preds = %323
  %388 = add i32 %379, 1
  %389 = ashr i32 %388, 2
  %390 = icmp sgt i32 %389, %379
  br i1 %390, label %415, label %391

391:                                              ; preds = %387
  %392 = sub i32 %388, %389
  %393 = zext i32 %392 to i64
  %394 = and i64 %393, 1
  %395 = icmp eq i32 %392, 1
  br i1 %395, label %398, label %396

396:                                              ; preds = %391
  %397 = sub nsw i64 %393, %394
  br label %416

398:                                              ; preds = %416, %391
  %399 = phi i64 [ 0, %391 ], [ %446, %416 ]
  %400 = icmp eq i64 %394, 0
  br i1 %400, label %415, label %401

401:                                              ; preds = %398
  %402 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %382, i64 %399
  %403 = bitcast %struct.SkPoint* %402 to <2 x float>*
  %404 = load <2 x float>, <2 x float>* %403, align 8
  %405 = extractelement <2 x float> %404, i32 0
  %406 = call float @llvm.fabs.f32(float %405) #8
  %407 = fcmp olt float %406, 0x3EC0000000000000
  %408 = insertelement <2 x float> %404, float 0.000000e+00, i32 0
  %409 = select i1 %407, <2 x float> %408, <2 x float> %404
  %410 = extractelement <2 x float> %409, i32 1
  %411 = call float @llvm.fabs.f32(float %410) #8
  %412 = fcmp olt float %411, 0x3EC0000000000000
  %413 = insertelement <2 x float> %409, float 0.000000e+00, i32 1
  %414 = select i1 %412, <2 x float> %413, <2 x float> %409
  store <2 x float> %414, <2 x float>* %403, align 8
  br label %415

415:                                              ; preds = %401, %398, %387
  br i1 %381, label %449, label %454

416:                                              ; preds = %416, %396
  %417 = phi i64 [ 0, %396 ], [ %446, %416 ]
  %418 = phi i64 [ %397, %396 ], [ %447, %416 ]
  %419 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %382, i64 %417
  %420 = bitcast %struct.SkPoint* %419 to <2 x float>*
  %421 = load <2 x float>, <2 x float>* %420, align 16
  %422 = extractelement <2 x float> %421, i32 0
  %423 = call float @llvm.fabs.f32(float %422) #8
  %424 = fcmp olt float %423, 0x3EC0000000000000
  %425 = insertelement <2 x float> %421, float 0.000000e+00, i32 0
  %426 = select i1 %424, <2 x float> %425, <2 x float> %421
  %427 = extractelement <2 x float> %426, i32 1
  %428 = call float @llvm.fabs.f32(float %427) #8
  %429 = fcmp olt float %428, 0x3EC0000000000000
  %430 = insertelement <2 x float> %426, float 0.000000e+00, i32 1
  %431 = select i1 %429, <2 x float> %430, <2 x float> %426
  store <2 x float> %431, <2 x float>* %420, align 16
  %432 = or i64 %417, 1
  %433 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %382, i64 %432
  %434 = bitcast %struct.SkPoint* %433 to <2 x float>*
  %435 = load <2 x float>, <2 x float>* %434, align 8
  %436 = extractelement <2 x float> %435, i32 0
  %437 = call float @llvm.fabs.f32(float %436) #8
  %438 = fcmp olt float %437, 0x3EC0000000000000
  %439 = insertelement <2 x float> %435, float 0.000000e+00, i32 0
  %440 = select i1 %438, <2 x float> %439, <2 x float> %435
  %441 = extractelement <2 x float> %440, i32 1
  %442 = call float @llvm.fabs.f32(float %441) #8
  %443 = fcmp olt float %442, 0x3EC0000000000000
  %444 = insertelement <2 x float> %440, float 0.000000e+00, i32 1
  %445 = select i1 %443, <2 x float> %444, <2 x float> %440
  store <2 x float> %445, <2 x float>* %434, align 8
  %446 = add nuw nsw i64 %417, 2
  %447 = add i64 %418, -2
  %448 = icmp eq i64 %447, 0
  br i1 %448, label %398, label %416

449:                                              ; preds = %415
  %450 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %382, i64 1
  %451 = call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8) %382, %struct.SkPoint* dereferenceable(8) %450) #8
  %452 = icmp eq i32 %380, 0
  %453 = or i1 %452, %451
  br i1 %453, label %521, label %456

454:                                              ; preds = %415
  %455 = icmp eq i32 %380, 0
  br i1 %455, label %521, label %456

456:                                              ; preds = %449, %454
  %457 = add i32 %380, 1
  %458 = ashr i32 %457, 2
  %459 = icmp sgt i32 %458, %380
  br i1 %459, label %484, label %460

460:                                              ; preds = %456
  %461 = sub i32 %457, %458
  %462 = zext i32 %461 to i64
  %463 = and i64 %462, 1
  %464 = icmp eq i32 %461, 1
  br i1 %464, label %467, label %465

465:                                              ; preds = %460
  %466 = sub nsw i64 %462, %463
  br label %485

467:                                              ; preds = %485, %460
  %468 = phi i64 [ 0, %460 ], [ %515, %485 ]
  %469 = icmp eq i64 %463, 0
  br i1 %469, label %484, label %470

470:                                              ; preds = %467
  %471 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %384, i64 %468
  %472 = bitcast %struct.SkPoint* %471 to <2 x float>*
  %473 = load <2 x float>, <2 x float>* %472, align 8
  %474 = extractelement <2 x float> %473, i32 0
  %475 = call float @llvm.fabs.f32(float %474) #8
  %476 = fcmp olt float %475, 0x3EC0000000000000
  %477 = insertelement <2 x float> %473, float 0.000000e+00, i32 0
  %478 = select i1 %476, <2 x float> %477, <2 x float> %473
  %479 = extractelement <2 x float> %478, i32 1
  %480 = call float @llvm.fabs.f32(float %479) #8
  %481 = fcmp olt float %480, 0x3EC0000000000000
  %482 = insertelement <2 x float> %478, float 0.000000e+00, i32 1
  %483 = select i1 %481, <2 x float> %482, <2 x float> %478
  store <2 x float> %483, <2 x float>* %472, align 8
  br label %484

484:                                              ; preds = %470, %467, %456
  br i1 %383, label %518, label %522

485:                                              ; preds = %485, %465
  %486 = phi i64 [ 0, %465 ], [ %515, %485 ]
  %487 = phi i64 [ %466, %465 ], [ %516, %485 ]
  %488 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %384, i64 %486
  %489 = bitcast %struct.SkPoint* %488 to <2 x float>*
  %490 = load <2 x float>, <2 x float>* %489, align 16
  %491 = extractelement <2 x float> %490, i32 0
  %492 = call float @llvm.fabs.f32(float %491) #8
  %493 = fcmp olt float %492, 0x3EC0000000000000
  %494 = insertelement <2 x float> %490, float 0.000000e+00, i32 0
  %495 = select i1 %493, <2 x float> %494, <2 x float> %490
  %496 = extractelement <2 x float> %495, i32 1
  %497 = call float @llvm.fabs.f32(float %496) #8
  %498 = fcmp olt float %497, 0x3EC0000000000000
  %499 = insertelement <2 x float> %495, float 0.000000e+00, i32 1
  %500 = select i1 %498, <2 x float> %499, <2 x float> %495
  store <2 x float> %500, <2 x float>* %489, align 16
  %501 = or i64 %486, 1
  %502 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %384, i64 %501
  %503 = bitcast %struct.SkPoint* %502 to <2 x float>*
  %504 = load <2 x float>, <2 x float>* %503, align 8
  %505 = extractelement <2 x float> %504, i32 0
  %506 = call float @llvm.fabs.f32(float %505) #8
  %507 = fcmp olt float %506, 0x3EC0000000000000
  %508 = insertelement <2 x float> %504, float 0.000000e+00, i32 0
  %509 = select i1 %507, <2 x float> %508, <2 x float> %504
  %510 = extractelement <2 x float> %509, i32 1
  %511 = call float @llvm.fabs.f32(float %510) #8
  %512 = fcmp olt float %511, 0x3EC0000000000000
  %513 = insertelement <2 x float> %509, float 0.000000e+00, i32 1
  %514 = select i1 %512, <2 x float> %513, <2 x float> %509
  store <2 x float> %514, <2 x float>* %503, align 8
  %515 = add nuw nsw i64 %486, 2
  %516 = add i64 %487, -2
  %517 = icmp eq i64 %516, 0
  br i1 %517, label %467, label %485

518:                                              ; preds = %484
  %519 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %384, i64 1
  %520 = call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8) %384, %struct.SkPoint* dereferenceable(8) %519) #8
  br i1 %520, label %521, label %522

521:                                              ; preds = %518, %449, %323, %454
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %75) #8
  br label %523

522:                                              ; preds = %518, %484
  call void @_ZN18SkOpContourBuilder8addCurveEN6SkPath4VerbEPK7SkPointf(%class.SkOpContourBuilder* %18, i32 %379, %struct.SkPoint* %382, float 1.000000e+00) #8
  call void @_ZN18SkOpContourBuilder8addCurveEN6SkPath4VerbEPK7SkPointf(%class.SkOpContourBuilder* %18, i32 %380, %struct.SkPoint* %384, float 1.000000e+00) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %75) #8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %63) #8
  br label %1050

523:                                              ; preds = %298, %521
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %63) #8
  br label %524

524:                                              ; preds = %523, %281
  call void @_ZN18SkOpContourBuilder7addQuadEP7SkPoint(%class.SkOpContourBuilder* %18, %struct.SkPoint* %102) #8
  br label %1050

525:                                              ; preds = %109
  %526 = zext i8 %104 to i32
  %527 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %102, i64 1, i32 0
  %528 = bitcast float* %527 to <2 x float>*
  %529 = load <2 x float>, <2 x float>* %528, align 4
  %530 = bitcast %struct.SkPoint* %102 to <2 x float>*
  %531 = load <2 x float>, <2 x float>* %530, align 4
  %532 = fsub <2 x float> %529, %531
  %533 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %102, i64 2, i32 0
  %534 = bitcast float* %533 to <2 x float>*
  %535 = load <2 x float>, <2 x float>* %534, align 4
  %536 = fsub <2 x float> %535, %529
  %537 = getelementptr inbounds float, float* %95, i64 1
  %538 = load float, float* %95, align 4
  %539 = fmul <2 x float> %532, %536
  %540 = extractelement <2 x float> %539, i32 0
  %541 = extractelement <2 x float> %539, i32 1
  %542 = fadd float %540, %541
  %543 = fcmp olt float %542, 0.000000e+00
  br i1 %543, label %544, label %701

544:                                              ; preds = %525
  %545 = call float @_Z22SkFindQuadMaxCurvaturePK7SkPoint(%struct.SkPoint* %102) #8
  %546 = fcmp ogt float %545, 0.000000e+00
  %547 = fcmp olt float %545, 1.000000e+00
  %548 = and i1 %546, %547
  br i1 %548, label %549, label %701

549:                                              ; preds = %544
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %49) #8
  %550 = bitcast %struct.SkPoint* %102 to i8*
  store i32 -1, i32* %80, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %49, i8* align 4 %550, i64 24, i1 false) #8
  store float %538, float* %50, align 4
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %51) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %51, i8 -1, i64 56, i1 false)
  %551 = call zeroext i1 @_ZNK7SkConic6chopAtEfPS_(%struct.SkConic* nonnull %6, float %545, %struct.SkConic* nonnull %52) #8
  br i1 %551, label %553, label %552

552:                                              ; preds = %549
  call void @_ZN18SkOpContourBuilder8addConicEP7SkPointf(%class.SkOpContourBuilder* %18, %struct.SkPoint* %102, float %538) #8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %51) #8
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %49) #8
  br label %1050

553:                                              ; preds = %549
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %53) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %53, i8 -1, i64 48, i1 false)
  %554 = call i32 @_ZN13SkReduceOrder5ConicERK7SkConicP7SkPoint(%struct.SkConic* nonnull dereferenceable(28) %52, %struct.SkPoint* nonnull %55) #8
  %555 = call i32 @_ZN13SkReduceOrder5ConicERK7SkConicP7SkPoint(%struct.SkConic* dereferenceable(28) %56, %struct.SkPoint* %58) #8
  %556 = icmp eq i32 %554, 1
  %557 = select i1 %556, [3 x %struct.SkPoint]* %54, [3 x %struct.SkPoint]* %59
  %558 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %557, i64 0, i64 0
  %559 = icmp eq i32 %555, 1
  %560 = select i1 %559, [3 x %struct.SkPoint]* %57, [3 x %struct.SkPoint]* %60
  %561 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %560, i64 0, i64 0
  %562 = icmp eq i32 %554, 0
  br i1 %562, label %700, label %563

563:                                              ; preds = %553
  %564 = add i32 %554, 1
  %565 = ashr i32 %564, 2
  %566 = icmp sgt i32 %565, %554
  br i1 %566, label %591, label %567

567:                                              ; preds = %563
  %568 = sub i32 %564, %565
  %569 = zext i32 %568 to i64
  %570 = and i64 %569, 1
  %571 = icmp eq i32 %568, 1
  br i1 %571, label %574, label %572

572:                                              ; preds = %567
  %573 = sub nsw i64 %569, %570
  br label %592

574:                                              ; preds = %592, %567
  %575 = phi i64 [ 0, %567 ], [ %622, %592 ]
  %576 = icmp eq i64 %570, 0
  br i1 %576, label %591, label %577

577:                                              ; preds = %574
  %578 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %557, i64 0, i64 %575
  %579 = bitcast %struct.SkPoint* %578 to <2 x float>*
  %580 = load <2 x float>, <2 x float>* %579, align 8
  %581 = extractelement <2 x float> %580, i32 0
  %582 = call float @llvm.fabs.f32(float %581) #8
  %583 = fcmp olt float %582, 0x3EC0000000000000
  %584 = insertelement <2 x float> %580, float 0.000000e+00, i32 0
  %585 = select i1 %583, <2 x float> %584, <2 x float> %580
  %586 = extractelement <2 x float> %585, i32 1
  %587 = call float @llvm.fabs.f32(float %586) #8
  %588 = fcmp olt float %587, 0x3EC0000000000000
  %589 = insertelement <2 x float> %585, float 0.000000e+00, i32 1
  %590 = select i1 %588, <2 x float> %589, <2 x float> %585
  store <2 x float> %590, <2 x float>* %579, align 8
  br label %591

591:                                              ; preds = %577, %574, %563
  br i1 %556, label %625, label %630

592:                                              ; preds = %592, %572
  %593 = phi i64 [ 0, %572 ], [ %622, %592 ]
  %594 = phi i64 [ %573, %572 ], [ %623, %592 ]
  %595 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %557, i64 0, i64 %593
  %596 = bitcast %struct.SkPoint* %595 to <2 x float>*
  %597 = load <2 x float>, <2 x float>* %596, align 16
  %598 = extractelement <2 x float> %597, i32 0
  %599 = call float @llvm.fabs.f32(float %598) #8
  %600 = fcmp olt float %599, 0x3EC0000000000000
  %601 = insertelement <2 x float> %597, float 0.000000e+00, i32 0
  %602 = select i1 %600, <2 x float> %601, <2 x float> %597
  %603 = extractelement <2 x float> %602, i32 1
  %604 = call float @llvm.fabs.f32(float %603) #8
  %605 = fcmp olt float %604, 0x3EC0000000000000
  %606 = insertelement <2 x float> %602, float 0.000000e+00, i32 1
  %607 = select i1 %605, <2 x float> %606, <2 x float> %602
  store <2 x float> %607, <2 x float>* %596, align 16
  %608 = or i64 %593, 1
  %609 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %557, i64 0, i64 %608
  %610 = bitcast %struct.SkPoint* %609 to <2 x float>*
  %611 = load <2 x float>, <2 x float>* %610, align 8
  %612 = extractelement <2 x float> %611, i32 0
  %613 = call float @llvm.fabs.f32(float %612) #8
  %614 = fcmp olt float %613, 0x3EC0000000000000
  %615 = insertelement <2 x float> %611, float 0.000000e+00, i32 0
  %616 = select i1 %614, <2 x float> %615, <2 x float> %611
  %617 = extractelement <2 x float> %616, i32 1
  %618 = call float @llvm.fabs.f32(float %617) #8
  %619 = fcmp olt float %618, 0x3EC0000000000000
  %620 = insertelement <2 x float> %616, float 0.000000e+00, i32 1
  %621 = select i1 %619, <2 x float> %620, <2 x float> %616
  store <2 x float> %621, <2 x float>* %610, align 8
  %622 = add nuw nsw i64 %593, 2
  %623 = add i64 %594, -2
  %624 = icmp eq i64 %623, 0
  br i1 %624, label %574, label %592

625:                                              ; preds = %591
  %626 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %557, i64 0, i64 1
  %627 = call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8) %558, %struct.SkPoint* dereferenceable(8) %626) #8
  %628 = icmp eq i32 %555, 0
  %629 = or i1 %628, %627
  br i1 %629, label %700, label %632

630:                                              ; preds = %591
  %631 = icmp eq i32 %555, 0
  br i1 %631, label %700, label %632

632:                                              ; preds = %625, %630
  %633 = add i32 %555, 1
  %634 = ashr i32 %633, 2
  %635 = icmp sgt i32 %634, %555
  br i1 %635, label %660, label %636

636:                                              ; preds = %632
  %637 = sub i32 %633, %634
  %638 = zext i32 %637 to i64
  %639 = and i64 %638, 1
  %640 = icmp eq i32 %637, 1
  br i1 %640, label %643, label %641

641:                                              ; preds = %636
  %642 = sub nsw i64 %638, %639
  br label %661

643:                                              ; preds = %661, %636
  %644 = phi i64 [ 0, %636 ], [ %691, %661 ]
  %645 = icmp eq i64 %639, 0
  br i1 %645, label %660, label %646

646:                                              ; preds = %643
  %647 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %560, i64 0, i64 %644
  %648 = bitcast %struct.SkPoint* %647 to <2 x float>*
  %649 = load <2 x float>, <2 x float>* %648, align 4
  %650 = extractelement <2 x float> %649, i32 0
  %651 = call float @llvm.fabs.f32(float %650) #8
  %652 = fcmp olt float %651, 0x3EC0000000000000
  %653 = insertelement <2 x float> %649, float 0.000000e+00, i32 0
  %654 = select i1 %652, <2 x float> %653, <2 x float> %649
  %655 = extractelement <2 x float> %654, i32 1
  %656 = call float @llvm.fabs.f32(float %655) #8
  %657 = fcmp olt float %656, 0x3EC0000000000000
  %658 = insertelement <2 x float> %654, float 0.000000e+00, i32 1
  %659 = select i1 %657, <2 x float> %658, <2 x float> %654
  store <2 x float> %659, <2 x float>* %648, align 4
  br label %660

660:                                              ; preds = %646, %643, %632
  br i1 %559, label %694, label %697

661:                                              ; preds = %661, %641
  %662 = phi i64 [ 0, %641 ], [ %691, %661 ]
  %663 = phi i64 [ %642, %641 ], [ %692, %661 ]
  %664 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %560, i64 0, i64 %662
  %665 = bitcast %struct.SkPoint* %664 to <2 x float>*
  %666 = load <2 x float>, <2 x float>* %665, align 4
  %667 = extractelement <2 x float> %666, i32 0
  %668 = call float @llvm.fabs.f32(float %667) #8
  %669 = fcmp olt float %668, 0x3EC0000000000000
  %670 = insertelement <2 x float> %666, float 0.000000e+00, i32 0
  %671 = select i1 %669, <2 x float> %670, <2 x float> %666
  %672 = extractelement <2 x float> %671, i32 1
  %673 = call float @llvm.fabs.f32(float %672) #8
  %674 = fcmp olt float %673, 0x3EC0000000000000
  %675 = insertelement <2 x float> %671, float 0.000000e+00, i32 1
  %676 = select i1 %674, <2 x float> %675, <2 x float> %671
  store <2 x float> %676, <2 x float>* %665, align 4
  %677 = or i64 %662, 1
  %678 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %560, i64 0, i64 %677
  %679 = bitcast %struct.SkPoint* %678 to <2 x float>*
  %680 = load <2 x float>, <2 x float>* %679, align 4
  %681 = extractelement <2 x float> %680, i32 0
  %682 = call float @llvm.fabs.f32(float %681) #8
  %683 = fcmp olt float %682, 0x3EC0000000000000
  %684 = insertelement <2 x float> %680, float 0.000000e+00, i32 0
  %685 = select i1 %683, <2 x float> %684, <2 x float> %680
  %686 = extractelement <2 x float> %685, i32 1
  %687 = call float @llvm.fabs.f32(float %686) #8
  %688 = fcmp olt float %687, 0x3EC0000000000000
  %689 = insertelement <2 x float> %685, float 0.000000e+00, i32 1
  %690 = select i1 %688, <2 x float> %689, <2 x float> %685
  store <2 x float> %690, <2 x float>* %679, align 4
  %691 = add nuw nsw i64 %662, 2
  %692 = add i64 %663, -2
  %693 = icmp eq i64 %692, 0
  br i1 %693, label %643, label %661

694:                                              ; preds = %660
  %695 = getelementptr inbounds [3 x %struct.SkPoint], [3 x %struct.SkPoint]* %560, i64 0, i64 1
  %696 = call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8) %561, %struct.SkPoint* dereferenceable(8) %695) #8
  br i1 %696, label %700, label %697

697:                                              ; preds = %694, %660
  %698 = load float, float* %61, align 8
  call void @_ZN18SkOpContourBuilder8addCurveEN6SkPath4VerbEPK7SkPointf(%class.SkOpContourBuilder* %18, i32 %554, %struct.SkPoint* %558, float %698) #8
  %699 = load float, float* %62, align 4
  call void @_ZN18SkOpContourBuilder8addCurveEN6SkPath4VerbEPK7SkPointf(%class.SkOpContourBuilder* %18, i32 %555, %struct.SkPoint* %561, float %699) #8
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %53) #8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %51) #8
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %49) #8
  br label %1050

700:                                              ; preds = %694, %625, %630, %553
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %53) #8
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %51) #8
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %49) #8
  br label %701

701:                                              ; preds = %700, %544, %525
  call void @_ZN18SkOpContourBuilder8addConicEP7SkPointf(%class.SkOpContourBuilder* %18, %struct.SkPoint* %102, float %538) #8
  br label %1050

702:                                              ; preds = %109
  %703 = zext i8 %104 to i32
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %33) #8
  store float 0xFFFFFFFFE0000000, float* %34, align 4
  store float 0xFFFFFFFFE0000000, float* %35, align 4
  store float 0xFFFFFFFFE0000000, float* %36, align 4
  %704 = call i32 @_ZN8SkDCubic12ComplexBreakEPK7SkPointPf(%struct.SkPoint* %102, float* nonnull %34) #8
  %705 = icmp eq i32 %704, 0
  br i1 %705, label %706, label %707

706:                                              ; preds = %702
  call void @_ZN18SkOpContourBuilder8addCubicEP7SkPoint(%class.SkOpContourBuilder* %18, %struct.SkPoint* %102) #8
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %33) #8
  br label %1050

707:                                              ; preds = %702
  call void @llvm.lifetime.start.p0i8(i64 352, i8* nonnull %37) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %37, i8* align 16 bitcast ([4 x { [2 x double], [4 x %struct.SkPoint], [4 x %struct.SkPoint], i32, i8, [3 x i8] }]* @__const._ZN15SkOpEdgeBuilder4walkEv.splits to i8*), i64 352, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %38) #8
  %708 = icmp slt i32 %704, 2
  br i1 %708, label %714, label %709

709:                                              ; preds = %707
  %710 = add nsw i32 %704, -2
  %711 = call i32 @llvm.ctlz.i32(i32 %710, i1 false) #8, !range !6
  %712 = shl nuw nsw i32 %711, 1
  %713 = sub nsw i32 64, %712
  call void @_Z12SkTIntroSortIfZ8SkTQSortIfEvPT_S2_EUlRKfS4_E_EviS2_iRKT0_(i32 %713, float* nonnull %34, i32 %704, %class.anon.30* nonnull dereferenceable(1) %2) #8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %38) #8
  br label %716

714:                                              ; preds = %707
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %38) #8
  %715 = icmp slt i32 %704, 0
  br i1 %715, label %993, label %716

716:                                              ; preds = %709, %714
  %717 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %102, i64 0, i32 0
  %718 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %102, i64 0, i32 1
  %719 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %102, i64 1, i32 0
  %720 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %102, i64 1, i32 1
  %721 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %102, i64 2, i32 0
  %722 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %102, i64 2, i32 1
  %723 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %102, i64 3, i32 0
  %724 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %102, i64 3, i32 1
  %725 = sext i32 %704 to i64
  %726 = add nuw i32 %704, 1
  %727 = zext i32 %726 to i64
  br label %734

728:                                              ; preds = %849
  %729 = icmp slt i32 %704, 3
  %730 = select i1 %729, i32 %704, i32 3
  %731 = sext i32 %730 to i64
  %732 = add i32 %704, 1
  %733 = zext i32 %732 to i64
  br label %855

734:                                              ; preds = %849, %716
  %735 = phi i64 [ %853, %849 ], [ 0, %716 ]
  %736 = icmp eq i64 %735, 0
  br i1 %736, label %741, label %737

737:                                              ; preds = %734
  %738 = add nsw i64 %735, -1
  %739 = getelementptr inbounds [3 x float], [3 x float]* %9, i64 0, i64 %738
  %740 = load float, float* %739, align 4
  br label %741

741:                                              ; preds = %734, %737
  %742 = phi float [ %740, %737 ], [ 0.000000e+00, %734 ]
  %743 = fpext float %742 to double
  %744 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %735, i32 0, i64 0
  store double %743, double* %744, align 8
  %745 = icmp slt i64 %735, %725
  br i1 %745, label %746, label %749

746:                                              ; preds = %741
  %747 = getelementptr inbounds [3 x float], [3 x float]* %9, i64 0, i64 %735
  %748 = load float, float* %747, align 4
  br label %749

749:                                              ; preds = %741, %746
  %750 = phi float [ %748, %746 ], [ 1.000000e+00, %741 ]
  %751 = fpext float %750 to double
  %752 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %735, i32 0, i64 1
  store double %751, double* %752, align 8
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %39) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %39, i8 -1, i64 64, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %40) #8, !noalias !7
  %753 = load float, float* %717, align 4, !noalias !7
  %754 = fpext float %753 to double
  store double %754, double* %41, align 8, !noalias !7
  %755 = load float, float* %718, align 4, !noalias !7
  %756 = fpext float %755 to double
  store double %756, double* %42, align 8, !noalias !7
  %757 = load float, float* %719, align 4, !noalias !7
  %758 = fpext float %757 to double
  store double %758, double* %43, align 8, !noalias !7
  %759 = load float, float* %720, align 4, !noalias !7
  %760 = fpext float %759 to double
  store double %760, double* %44, align 8, !noalias !7
  %761 = load float, float* %721, align 4, !noalias !7
  %762 = fpext float %761 to double
  store double %762, double* %45, align 8, !noalias !7
  %763 = load float, float* %722, align 4, !noalias !7
  %764 = fpext float %763 to double
  store double %764, double* %46, align 8, !noalias !7
  %765 = load float, float* %723, align 4, !noalias !7
  %766 = fpext float %765 to double
  store double %766, double* %47, align 8, !noalias !7
  %767 = load float, float* %724, align 4, !noalias !7
  %768 = fpext float %767 to double
  store double %768, double* %48, align 8, !noalias !7
  call void @_ZNK8SkDCubic9subDivideEdd(%struct.SkDCubic* nonnull sret %11, %struct.SkDCubic* nonnull %3, double %743, double %751) #8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %40) #8, !noalias !7
  %769 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %735, i32 1
  %770 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %769, i64 0, i64 0
  %771 = call zeroext i1 @_ZNK8SkDCubic13toFloatPointsEP7SkPoint(%struct.SkDCubic* nonnull %11, %struct.SkPoint* %770) #8
  br i1 %771, label %772, label %848

772:                                              ; preds = %749
  %773 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %735, i32 2
  %774 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %773, i64 0, i64 0
  %775 = call i32 @_ZN13SkReduceOrder5CubicEPK7SkPointPS0_(%struct.SkPoint* %770, %struct.SkPoint* %774) #8
  %776 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %735, i32 3
  store i32 %775, i32* %776, align 8
  %777 = icmp eq i32 %775, 4
  %778 = select i1 %777, [4 x %struct.SkPoint]* %769, [4 x %struct.SkPoint]* %773
  %779 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %778, i64 0, i64 0
  %780 = icmp eq i32 %775, 0
  br i1 %780, label %849, label %781

781:                                              ; preds = %772
  %782 = add i32 %775, 1
  %783 = ashr i32 %782, 2
  %784 = icmp sgt i32 %783, %775
  br i1 %784, label %809, label %785

785:                                              ; preds = %781
  %786 = sub i32 %782, %783
  %787 = zext i32 %786 to i64
  %788 = and i64 %787, 1
  %789 = icmp eq i32 %786, 1
  br i1 %789, label %792, label %790

790:                                              ; preds = %785
  %791 = sub nsw i64 %787, %788
  br label %811

792:                                              ; preds = %811, %785
  %793 = phi i64 [ 0, %785 ], [ %841, %811 ]
  %794 = icmp eq i64 %788, 0
  br i1 %794, label %809, label %795

795:                                              ; preds = %792
  %796 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %778, i64 0, i64 %793
  %797 = bitcast %struct.SkPoint* %796 to <2 x float>*
  %798 = load <2 x float>, <2 x float>* %797, align 8
  %799 = extractelement <2 x float> %798, i32 0
  %800 = call float @llvm.fabs.f32(float %799) #8
  %801 = fcmp olt float %800, 0x3EC0000000000000
  %802 = insertelement <2 x float> %798, float 0.000000e+00, i32 0
  %803 = select i1 %801, <2 x float> %802, <2 x float> %798
  %804 = extractelement <2 x float> %803, i32 1
  %805 = call float @llvm.fabs.f32(float %804) #8
  %806 = fcmp olt float %805, 0x3EC0000000000000
  %807 = insertelement <2 x float> %803, float 0.000000e+00, i32 1
  %808 = select i1 %806, <2 x float> %807, <2 x float> %803
  store <2 x float> %808, <2 x float>* %797, align 8
  br label %809

809:                                              ; preds = %795, %792, %781
  %810 = icmp eq i32 %775, 1
  br i1 %810, label %844, label %849

811:                                              ; preds = %811, %790
  %812 = phi i64 [ 0, %790 ], [ %841, %811 ]
  %813 = phi i64 [ %791, %790 ], [ %842, %811 ]
  %814 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %778, i64 0, i64 %812
  %815 = bitcast %struct.SkPoint* %814 to <2 x float>*
  %816 = load <2 x float>, <2 x float>* %815, align 8
  %817 = extractelement <2 x float> %816, i32 0
  %818 = call float @llvm.fabs.f32(float %817) #8
  %819 = fcmp olt float %818, 0x3EC0000000000000
  %820 = insertelement <2 x float> %816, float 0.000000e+00, i32 0
  %821 = select i1 %819, <2 x float> %820, <2 x float> %816
  %822 = extractelement <2 x float> %821, i32 1
  %823 = call float @llvm.fabs.f32(float %822) #8
  %824 = fcmp olt float %823, 0x3EC0000000000000
  %825 = insertelement <2 x float> %821, float 0.000000e+00, i32 1
  %826 = select i1 %824, <2 x float> %825, <2 x float> %821
  store <2 x float> %826, <2 x float>* %815, align 8
  %827 = or i64 %812, 1
  %828 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %778, i64 0, i64 %827
  %829 = bitcast %struct.SkPoint* %828 to <2 x float>*
  %830 = load <2 x float>, <2 x float>* %829, align 8
  %831 = extractelement <2 x float> %830, i32 0
  %832 = call float @llvm.fabs.f32(float %831) #8
  %833 = fcmp olt float %832, 0x3EC0000000000000
  %834 = insertelement <2 x float> %830, float 0.000000e+00, i32 0
  %835 = select i1 %833, <2 x float> %834, <2 x float> %830
  %836 = extractelement <2 x float> %835, i32 1
  %837 = call float @llvm.fabs.f32(float %836) #8
  %838 = fcmp olt float %837, 0x3EC0000000000000
  %839 = insertelement <2 x float> %835, float 0.000000e+00, i32 1
  %840 = select i1 %838, <2 x float> %839, <2 x float> %835
  store <2 x float> %840, <2 x float>* %829, align 8
  %841 = add nuw nsw i64 %812, 2
  %842 = add i64 %813, -2
  %843 = icmp eq i64 %842, 0
  br i1 %843, label %792, label %811

844:                                              ; preds = %809
  %845 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %778, i64 0, i64 1
  %846 = call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8) %779, %struct.SkPoint* dereferenceable(8) %845) #8
  %847 = xor i1 %846, true
  br label %849

848:                                              ; preds = %749
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %39) #8
  br label %992

849:                                              ; preds = %844, %809, %772
  %850 = phi i1 [ false, %772 ], [ true, %809 ], [ %847, %844 ]
  %851 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %735, i32 4
  %852 = zext i1 %850 to i8
  store i8 %852, i8* %851, align 4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %39) #8
  %853 = add nuw nsw i64 %735, 1
  %854 = icmp eq i64 %853, %727
  br i1 %854, label %728, label %734

855:                                              ; preds = %989, %728
  %856 = phi i64 [ %990, %989 ], [ 0, %728 ]
  %857 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %856
  %858 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %856, i32 4
  %859 = load i8, i8* %858, align 4, !range !2
  %860 = icmp eq i8 %859, 0
  br i1 %860, label %989, label %861

861:                                              ; preds = %855, %864
  %862 = phi i64 [ %865, %864 ], [ %856, %855 ]
  %863 = icmp sgt i64 %862, 0
  br i1 %863, label %864, label %869

864:                                              ; preds = %861
  %865 = add nsw i64 %862, -1
  %866 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %865, i32 4
  %867 = load i8, i8* %866, align 4, !range !2
  %868 = icmp eq i8 %867, 0
  br i1 %868, label %861, label %869

869:                                              ; preds = %861, %864
  %870 = shl i64 %862, 32
  %871 = ashr exact i64 %870, 32
  %872 = icmp slt i64 %871, %856
  br i1 %872, label %873, label %883

873:                                              ; preds = %869
  %874 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %871
  %875 = bitcast %struct.Splitsville* %874 to i64*
  %876 = load i64, i64* %875, align 8
  %877 = bitcast %struct.Splitsville* %857 to i64*
  store i64 %876, i64* %877, align 8
  %878 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %871, i32 1, i64 0
  %879 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %856, i32 1, i64 0
  %880 = bitcast %struct.SkPoint* %878 to i64*
  %881 = bitcast %struct.SkPoint* %879 to i64*
  %882 = load i64, i64* %880, align 8
  store i64 %882, i64* %881, align 8
  br label %883

883:                                              ; preds = %873, %869
  br label %884

884:                                              ; preds = %883, %887
  %885 = phi i64 [ %888, %887 ], [ %856, %883 ]
  %886 = icmp slt i64 %885, %731
  br i1 %886, label %887, label %892

887:                                              ; preds = %884
  %888 = add nuw nsw i64 %885, 1
  %889 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %888, i32 4
  %890 = load i8, i8* %889, align 4, !range !2
  %891 = icmp eq i8 %890, 0
  br i1 %891, label %884, label %892

892:                                              ; preds = %884, %887
  %893 = and i64 %885, 4294967295
  %894 = icmp ugt i64 %893, %856
  br i1 %894, label %895, label %906

895:                                              ; preds = %892
  %896 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %893, i32 0, i64 1
  %897 = bitcast double* %896 to i64*
  %898 = load i64, i64* %897, align 8
  %899 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %856, i32 0, i64 1
  %900 = bitcast double* %899 to i64*
  store i64 %898, i64* %900, align 8
  %901 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %893, i32 1, i64 3
  %902 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %856, i32 1, i64 3
  %903 = bitcast %struct.SkPoint* %901 to i64*
  %904 = bitcast %struct.SkPoint* %902 to i64*
  %905 = load i64, i64* %903, align 8
  store i64 %905, i64* %904, align 8
  br label %907

906:                                              ; preds = %892
  br i1 %872, label %907, label %912

907:                                              ; preds = %895, %906
  %908 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %856, i32 1, i64 0
  %909 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %856, i32 2, i64 0
  %910 = call i32 @_ZN13SkReduceOrder5CubicEPK7SkPointPS0_(%struct.SkPoint* %908, %struct.SkPoint* %909) #8
  %911 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %856, i32 3
  store i32 %910, i32* %911, align 8
  br label %912

912:                                              ; preds = %906, %907
  %913 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %856, i32 3
  %914 = load i32, i32* %913, align 8
  %915 = icmp eq i32 %914, 4
  %916 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %856, i32 1
  %917 = getelementptr inbounds [4 x %struct.Splitsville], [4 x %struct.Splitsville]* %10, i64 0, i64 %856, i32 2
  %918 = select i1 %915, [4 x %struct.SkPoint]* %916, [4 x %struct.SkPoint]* %917
  %919 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %918, i64 0, i64 0
  %920 = icmp eq i32 %914, 0
  br i1 %920, label %992, label %921

921:                                              ; preds = %912
  %922 = add i32 %914, 1
  %923 = ashr i32 %922, 2
  %924 = icmp sgt i32 %923, %914
  br i1 %924, label %949, label %925

925:                                              ; preds = %921
  %926 = sub i32 %922, %923
  %927 = zext i32 %926 to i64
  %928 = and i64 %927, 1
  %929 = icmp eq i32 %926, 1
  br i1 %929, label %932, label %930

930:                                              ; preds = %925
  %931 = sub nsw i64 %927, %928
  br label %951

932:                                              ; preds = %951, %925
  %933 = phi i64 [ 0, %925 ], [ %981, %951 ]
  %934 = icmp eq i64 %928, 0
  br i1 %934, label %949, label %935

935:                                              ; preds = %932
  %936 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %918, i64 0, i64 %933
  %937 = bitcast %struct.SkPoint* %936 to <2 x float>*
  %938 = load <2 x float>, <2 x float>* %937, align 8
  %939 = extractelement <2 x float> %938, i32 0
  %940 = call float @llvm.fabs.f32(float %939) #8
  %941 = fcmp olt float %940, 0x3EC0000000000000
  %942 = insertelement <2 x float> %938, float 0.000000e+00, i32 0
  %943 = select i1 %941, <2 x float> %942, <2 x float> %938
  %944 = extractelement <2 x float> %943, i32 1
  %945 = call float @llvm.fabs.f32(float %944) #8
  %946 = fcmp olt float %945, 0x3EC0000000000000
  %947 = insertelement <2 x float> %943, float 0.000000e+00, i32 1
  %948 = select i1 %946, <2 x float> %947, <2 x float> %943
  store <2 x float> %948, <2 x float>* %937, align 8
  br label %949

949:                                              ; preds = %935, %932, %921
  %950 = icmp eq i32 %914, 1
  br i1 %950, label %984, label %987

951:                                              ; preds = %951, %930
  %952 = phi i64 [ 0, %930 ], [ %981, %951 ]
  %953 = phi i64 [ %931, %930 ], [ %982, %951 ]
  %954 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %918, i64 0, i64 %952
  %955 = bitcast %struct.SkPoint* %954 to <2 x float>*
  %956 = load <2 x float>, <2 x float>* %955, align 8
  %957 = extractelement <2 x float> %956, i32 0
  %958 = call float @llvm.fabs.f32(float %957) #8
  %959 = fcmp olt float %958, 0x3EC0000000000000
  %960 = insertelement <2 x float> %956, float 0.000000e+00, i32 0
  %961 = select i1 %959, <2 x float> %960, <2 x float> %956
  %962 = extractelement <2 x float> %961, i32 1
  %963 = call float @llvm.fabs.f32(float %962) #8
  %964 = fcmp olt float %963, 0x3EC0000000000000
  %965 = insertelement <2 x float> %961, float 0.000000e+00, i32 1
  %966 = select i1 %964, <2 x float> %965, <2 x float> %961
  store <2 x float> %966, <2 x float>* %955, align 8
  %967 = or i64 %952, 1
  %968 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %918, i64 0, i64 %967
  %969 = bitcast %struct.SkPoint* %968 to <2 x float>*
  %970 = load <2 x float>, <2 x float>* %969, align 8
  %971 = extractelement <2 x float> %970, i32 0
  %972 = call float @llvm.fabs.f32(float %971) #8
  %973 = fcmp olt float %972, 0x3EC0000000000000
  %974 = insertelement <2 x float> %970, float 0.000000e+00, i32 0
  %975 = select i1 %973, <2 x float> %974, <2 x float> %970
  %976 = extractelement <2 x float> %975, i32 1
  %977 = call float @llvm.fabs.f32(float %976) #8
  %978 = fcmp olt float %977, 0x3EC0000000000000
  %979 = insertelement <2 x float> %975, float 0.000000e+00, i32 1
  %980 = select i1 %978, <2 x float> %979, <2 x float> %975
  store <2 x float> %980, <2 x float>* %969, align 8
  %981 = add nuw nsw i64 %952, 2
  %982 = add i64 %953, -2
  %983 = icmp eq i64 %982, 0
  br i1 %983, label %932, label %951

984:                                              ; preds = %949
  %985 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %918, i64 0, i64 1
  %986 = call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8) %919, %struct.SkPoint* dereferenceable(8) %985) #8
  br i1 %986, label %992, label %987

987:                                              ; preds = %984, %949
  %988 = load i32, i32* %913, align 8
  call void @_ZN18SkOpContourBuilder8addCurveEN6SkPath4VerbEPK7SkPointf(%class.SkOpContourBuilder* %18, i32 %988, %struct.SkPoint* %919, float 1.000000e+00) #8
  br label %989

989:                                              ; preds = %855, %987
  %990 = add nuw nsw i64 %856, 1
  %991 = icmp eq i64 %990, %733
  br i1 %991, label %993, label %855

992:                                              ; preds = %984, %912, %848
  call void @llvm.lifetime.end.p0i8(i64 352, i8* nonnull %37) #8
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %33) #8
  br label %1123

993:                                              ; preds = %989, %714
  call void @llvm.lifetime.end.p0i8(i64 352, i8* nonnull %37) #8
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %33) #8
  br label %1050

994:                                              ; preds = %109
  call void @_ZN18SkOpContourBuilder5flushEv(%class.SkOpContourBuilder* %18) #8
  %995 = load %class.SkOpContour*, %class.SkOpContour** %19, align 8
  %996 = icmp eq %class.SkOpContour* %995, null
  br i1 %996, label %1046, label %997

997:                                              ; preds = %994
  %998 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %995, i64 0, i32 6
  %999 = load i32, i32* %998, align 4
  %1000 = icmp eq i32 %999, 0
  br i1 %1000, label %1046, label %1001

1001:                                             ; preds = %997
  %1002 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %995, i64 0, i32 1, i32 6
  %1003 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %995, i64 0, i32 4
  %1004 = bitcast %struct.SkPathOpsBounds* %1003 to i8*
  %1005 = bitcast %struct.SkPathOpsBounds* %1002 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1004, i8* align 4 %1005, i64 16, i1 false) #8
  %1006 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %995, i64 0, i32 1, i32 3
  %1007 = load %class.SkOpSegment*, %class.SkOpSegment** %1006, align 8
  %1008 = icmp eq %class.SkOpSegment* %1007, null
  br i1 %1008, label %1045, label %1009

1009:                                             ; preds = %1001
  %1010 = getelementptr inbounds %struct.SkPathOpsBounds, %struct.SkPathOpsBounds* %1003, i64 0, i32 0, i32 0
  %1011 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %995, i64 0, i32 4, i32 0, i32 1
  %1012 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %995, i64 0, i32 4, i32 0, i32 2
  %1013 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %995, i64 0, i32 4, i32 0, i32 3
  %1014 = load float, float* %1010, align 4
  br label %1015

1015:                                             ; preds = %1041, %1009
  %1016 = phi float [ %1014, %1009 ], [ %1029, %1041 ]
  %1017 = phi %class.SkOpSegment* [ %1007, %1009 ], [ %1043, %1041 ]
  %1018 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %1017, i64 0, i32 6, i32 0, i32 0
  %1019 = load float, float* %1018, align 4
  %1020 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %1017, i64 0, i32 6, i32 0, i32 1
  %1021 = load float, float* %1020, align 4
  %1022 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %1017, i64 0, i32 6, i32 0, i32 2
  %1023 = load float, float* %1022, align 4
  %1024 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %1017, i64 0, i32 6, i32 0, i32 3
  %1025 = load float, float* %1024, align 4
  %1026 = fcmp ogt float %1016, %1019
  br i1 %1026, label %1027, label %1028

1027:                                             ; preds = %1015
  store float %1019, float* %1010, align 4
  br label %1028

1028:                                             ; preds = %1027, %1015
  %1029 = phi float [ %1019, %1027 ], [ %1016, %1015 ]
  %1030 = load float, float* %1011, align 4
  %1031 = fcmp ogt float %1030, %1021
  br i1 %1031, label %1032, label %1033

1032:                                             ; preds = %1028
  store float %1021, float* %1011, align 4
  br label %1033

1033:                                             ; preds = %1032, %1028
  %1034 = load float, float* %1012, align 4
  %1035 = fcmp olt float %1034, %1023
  br i1 %1035, label %1036, label %1037

1036:                                             ; preds = %1033
  store float %1023, float* %1012, align 4
  br label %1037

1037:                                             ; preds = %1036, %1033
  %1038 = load float, float* %1013, align 4
  %1039 = fcmp olt float %1038, %1025
  br i1 %1039, label %1040, label %1041

1040:                                             ; preds = %1037
  store float %1025, float* %1013, align 4
  br label %1041

1041:                                             ; preds = %1040, %1037
  %1042 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %1017, i64 0, i32 3
  %1043 = load %class.SkOpSegment*, %class.SkOpSegment** %1042, align 8
  %1044 = icmp eq %class.SkOpSegment* %1043, null
  br i1 %1044, label %1045, label %1015

1045:                                             ; preds = %1041, %1001
  call void @_ZN18SkOpContourBuilder5flushEv(%class.SkOpContourBuilder* %18) #8
  store %class.SkOpContour* null, %class.SkOpContour** %19, align 8
  br label %1046

1046:                                             ; preds = %994, %997, %1045
  %1047 = load i8, i8* %110, align 1
  %1048 = icmp eq i8 %1047, 6
  br i1 %1048, label %1049, label %103

1049:                                             ; preds = %1046
  call void @_ZN18SkOpContourBuilder5flushEv(%class.SkOpContourBuilder* %18) #8
  br label %1123

1050:                                             ; preds = %697, %279, %524, %522, %701, %706, %993, %552
  %1051 = phi i32 [ %703, %993 ], [ %282, %524 ], [ %280, %279 ], [ %282, %522 ], [ %526, %701 ], [ %703, %706 ], [ %526, %552 ], [ %526, %697 ]
  %1052 = phi float* [ %95, %993 ], [ %95, %524 ], [ %95, %279 ], [ %95, %522 ], [ %537, %701 ], [ %95, %706 ], [ %537, %552 ], [ %537, %697 ]
  %1053 = add nuw nsw i32 %1051, 1
  %1054 = lshr i32 %1053, 2
  %1055 = sub nsw i32 %1051, %1054
  %1056 = sext i32 %1055 to i64
  %1057 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %102, i64 %1056
  %1058 = load i8, i8* %110, align 1
  %1059 = icmp eq i8 %1058, 6
  br i1 %1059, label %1060, label %90

1060:                                             ; preds = %1050, %263, %1
  %1061 = phi %class.SkOpContour* [ %20, %1 ], [ %264, %263 ], [ %106, %1050 ]
  call void @_ZN18SkOpContourBuilder5flushEv(%class.SkOpContourBuilder* %18) #8
  %1062 = icmp eq %class.SkOpContour* %1061, null
  br i1 %1062, label %1123, label %1063

1063:                                             ; preds = %1060
  %1064 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %1061, i64 0, i32 6
  %1065 = load i32, i32* %1064, align 4
  %1066 = icmp eq i32 %1065, 0
  br i1 %1066, label %1123, label %1067

1067:                                             ; preds = %1063
  %1068 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 10
  %1069 = load i8, i8* %1068, align 1, !range !2
  %1070 = icmp eq i8 %1069, 0
  br i1 %1070, label %1071, label %1123

1071:                                             ; preds = %1067
  call void @_ZN18SkOpContourBuilder5flushEv(%class.SkOpContourBuilder* %18) #8
  %1072 = load %class.SkOpContour*, %class.SkOpContour** %19, align 8
  %1073 = icmp eq %class.SkOpContour* %1072, null
  br i1 %1073, label %1123, label %1074

1074:                                             ; preds = %1071
  %1075 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %1072, i64 0, i32 6
  %1076 = load i32, i32* %1075, align 4
  %1077 = icmp eq i32 %1076, 0
  br i1 %1077, label %1123, label %1078

1078:                                             ; preds = %1074
  %1079 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %1072, i64 0, i32 1, i32 6
  %1080 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %1072, i64 0, i32 4
  %1081 = bitcast %struct.SkPathOpsBounds* %1080 to i8*
  %1082 = bitcast %struct.SkPathOpsBounds* %1079 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1081, i8* align 4 %1082, i64 16, i1 false) #8
  %1083 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %1072, i64 0, i32 1, i32 3
  %1084 = load %class.SkOpSegment*, %class.SkOpSegment** %1083, align 8
  %1085 = icmp eq %class.SkOpSegment* %1084, null
  br i1 %1085, label %1122, label %1086

1086:                                             ; preds = %1078
  %1087 = getelementptr inbounds %struct.SkPathOpsBounds, %struct.SkPathOpsBounds* %1080, i64 0, i32 0, i32 0
  %1088 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %1072, i64 0, i32 4, i32 0, i32 1
  %1089 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %1072, i64 0, i32 4, i32 0, i32 2
  %1090 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %1072, i64 0, i32 4, i32 0, i32 3
  %1091 = load float, float* %1087, align 4
  br label %1092

1092:                                             ; preds = %1118, %1086
  %1093 = phi float [ %1091, %1086 ], [ %1106, %1118 ]
  %1094 = phi %class.SkOpSegment* [ %1084, %1086 ], [ %1120, %1118 ]
  %1095 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %1094, i64 0, i32 6, i32 0, i32 0
  %1096 = load float, float* %1095, align 4
  %1097 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %1094, i64 0, i32 6, i32 0, i32 1
  %1098 = load float, float* %1097, align 4
  %1099 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %1094, i64 0, i32 6, i32 0, i32 2
  %1100 = load float, float* %1099, align 4
  %1101 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %1094, i64 0, i32 6, i32 0, i32 3
  %1102 = load float, float* %1101, align 4
  %1103 = fcmp ogt float %1093, %1096
  br i1 %1103, label %1104, label %1105

1104:                                             ; preds = %1092
  store float %1096, float* %1087, align 4
  br label %1105

1105:                                             ; preds = %1104, %1092
  %1106 = phi float [ %1096, %1104 ], [ %1093, %1092 ]
  %1107 = load float, float* %1088, align 4
  %1108 = fcmp ogt float %1107, %1098
  br i1 %1108, label %1109, label %1110

1109:                                             ; preds = %1105
  store float %1098, float* %1088, align 4
  br label %1110

1110:                                             ; preds = %1109, %1105
  %1111 = load float, float* %1089, align 4
  %1112 = fcmp olt float %1111, %1100
  br i1 %1112, label %1113, label %1114

1113:                                             ; preds = %1110
  store float %1100, float* %1089, align 4
  br label %1114

1114:                                             ; preds = %1113, %1110
  %1115 = load float, float* %1090, align 4
  %1116 = fcmp olt float %1115, %1102
  br i1 %1116, label %1117, label %1118

1117:                                             ; preds = %1114
  store float %1102, float* %1090, align 4
  br label %1118

1118:                                             ; preds = %1117, %1114
  %1119 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %1094, i64 0, i32 3
  %1120 = load %class.SkOpSegment*, %class.SkOpSegment** %1119, align 8
  %1121 = icmp eq %class.SkOpSegment* %1120, null
  br i1 %1121, label %1122, label %1092

1122:                                             ; preds = %1118, %1078
  call void @_ZN18SkOpContourBuilder5flushEv(%class.SkOpContourBuilder* %18) #8
  store %class.SkOpContour* null, %class.SkOpContour** %19, align 8
  br label %1123

1123:                                             ; preds = %109, %1049, %1122, %1074, %1071, %992, %386, %1060, %1063, %1067
  %1124 = phi i1 [ true, %1067 ], [ true, %1063 ], [ true, %1060 ], [ false, %386 ], [ false, %992 ], [ true, %1071 ], [ true, %1074 ], [ true, %1122 ], [ true, %1049 ], [ false, %109 ]
  ret i1 %1124
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN15SkOpEdgeBuilder12closeContourERK7SkPointS2_(%class.SkOpEdgeBuilder* nocapture, %struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = tail call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8) %1, %struct.SkPoint* dereferenceable(8) %2)
  %5 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 4
  %6 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 4, i32 2
  %7 = load i32, i32* %6, align 4
  br i1 %4, label %67, label %8

8:                                                ; preds = %3
  %9 = add i32 %7, 1
  %10 = icmp sgt i32 %9, -1
  br i1 %10, label %12, label %11

11:                                               ; preds = %8
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0)) #9
  unreachable

12:                                               ; preds = %8
  %13 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 4, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = icmp slt i32 %14, %9
  br i1 %15, label %19, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %class.SkTDArray.1, %class.SkTDArray.1* %5, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  br label %30

19:                                               ; preds = %12
  %20 = add i32 %7, 5
  %21 = lshr i32 %20, 2
  %22 = add nuw i32 %21, %20
  %23 = icmp sgt i32 %22, -1
  br i1 %23, label %25, label %24

24:                                               ; preds = %19
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #9
  unreachable

25:                                               ; preds = %19
  store i32 %22, i32* %13, align 8
  %26 = getelementptr inbounds %class.SkTDArray.1, %class.SkTDArray.1* %5, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = sext i32 %22 to i64
  %29 = tail call i8* @_Z16sk_realloc_throwPvm(i8* %27, i64 %28) #8
  store i8* %29, i8** %26, align 8
  br label %30

30:                                               ; preds = %16, %25
  %31 = phi i8* [ %18, %16 ], [ %29, %25 ]
  store i32 %9, i32* %6, align 4
  %32 = sext i32 %7 to i64
  %33 = getelementptr inbounds i8, i8* %31, i64 %32
  store i8 1, i8* %33, align 1
  %34 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 2
  %35 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 2, i32 2
  %36 = load i32, i32* %35, align 4
  %37 = add i32 %36, 1
  %38 = icmp sgt i32 %37, -1
  br i1 %38, label %40, label %39

39:                                               ; preds = %30
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0)) #9
  unreachable

40:                                               ; preds = %30
  %41 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 2, i32 1
  %42 = load i32, i32* %41, align 8
  %43 = icmp slt i32 %42, %37
  br i1 %43, label %47, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %34, i64 0, i32 0
  %46 = load %struct.SkPoint*, %struct.SkPoint** %45, align 8
  br label %60

47:                                               ; preds = %40
  %48 = add i32 %36, 5
  %49 = lshr i32 %48, 2
  %50 = add nuw i32 %49, %48
  %51 = icmp sgt i32 %50, -1
  br i1 %51, label %53, label %52

52:                                               ; preds = %47
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #9
  unreachable

53:                                               ; preds = %47
  store i32 %50, i32* %41, align 8
  %54 = bitcast %class.SkTDArray* %34 to i8**
  %55 = load i8*, i8** %54, align 8
  %56 = sext i32 %50 to i64
  %57 = shl nsw i64 %56, 3
  %58 = tail call i8* @_Z16sk_realloc_throwPvm(i8* %55, i64 %57) #8
  store i8* %58, i8** %54, align 8
  %59 = bitcast i8* %58 to %struct.SkPoint*
  br label %60

60:                                               ; preds = %44, %53
  %61 = phi %struct.SkPoint* [ %46, %44 ], [ %59, %53 ]
  store i32 %37, i32* %35, align 4
  %62 = sext i32 %36 to i64
  %63 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %61, i64 %62
  %64 = bitcast %struct.SkPoint* %2 to i64*
  %65 = bitcast %struct.SkPoint* %63 to i64*
  %66 = load i64, i64* %64, align 4
  store i64 %66, i64* %65, align 4
  br label %107

67:                                               ; preds = %3
  %68 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 2
  %69 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 2, i32 2
  %70 = load i32, i32* %69, align 4
  %71 = add nsw i32 %7, -1
  %72 = getelementptr inbounds %class.SkTDArray.1, %class.SkTDArray.1* %5, i64 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = sext i32 %71 to i64
  %75 = getelementptr inbounds i8, i8* %73, i64 %74
  %76 = load i8, i8* %75, align 1
  %77 = icmp eq i8 %76, 1
  br i1 %77, label %81, label %78

78:                                               ; preds = %67
  %79 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %68, i64 0, i32 0
  %80 = load %struct.SkPoint*, %struct.SkPoint** %79, align 8
  br label %99

81:                                               ; preds = %67
  %82 = add nsw i32 %70, -2
  %83 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %68, i64 0, i32 0
  %84 = load %struct.SkPoint*, %struct.SkPoint** %83, align 8
  %85 = sext i32 %82 to i64
  %86 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %84, i64 %85, i32 0
  %87 = load float, float* %86, align 4
  %88 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 0
  %89 = load float, float* %88, align 4
  %90 = fcmp oeq float %87, %89
  br i1 %90, label %91, label %99

91:                                               ; preds = %81
  %92 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %84, i64 %85, i32 1
  %93 = load float, float* %92, align 4
  %94 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 1
  %95 = load float, float* %94, align 4
  %96 = fcmp oeq float %93, %95
  br i1 %96, label %97, label %99

97:                                               ; preds = %91
  store i32 %71, i32* %6, align 4
  %98 = add nsw i32 %70, -1
  store i32 %98, i32* %69, align 4
  br label %107

99:                                               ; preds = %78, %81, %91
  %100 = phi %struct.SkPoint* [ %80, %78 ], [ %84, %81 ], [ %84, %91 ]
  %101 = add nsw i32 %70, -1
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %100, i64 %102
  %104 = bitcast %struct.SkPoint* %2 to i64*
  %105 = bitcast %struct.SkPoint* %103 to i64*
  %106 = load i64, i64* %104, align 4
  store i64 %106, i64* %105, align 4
  br label %107

107:                                              ; preds = %97, %99, %60
  %108 = load i32, i32* %6, align 4
  %109 = add i32 %108, 1
  %110 = icmp sgt i32 %109, -1
  br i1 %110, label %112, label %111

111:                                              ; preds = %107
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0)) #9
  unreachable

112:                                              ; preds = %107
  %113 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 4, i32 1
  %114 = load i32, i32* %113, align 8
  %115 = icmp slt i32 %114, %109
  br i1 %115, label %119, label %116

116:                                              ; preds = %112
  %117 = getelementptr inbounds %class.SkTDArray.1, %class.SkTDArray.1* %5, i64 0, i32 0
  %118 = load i8*, i8** %117, align 8
  br label %130

119:                                              ; preds = %112
  %120 = add i32 %108, 5
  %121 = lshr i32 %120, 2
  %122 = add nuw i32 %121, %120
  %123 = icmp sgt i32 %122, -1
  br i1 %123, label %125, label %124

124:                                              ; preds = %119
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #9
  unreachable

125:                                              ; preds = %119
  store i32 %122, i32* %113, align 8
  %126 = getelementptr inbounds %class.SkTDArray.1, %class.SkTDArray.1* %5, i64 0, i32 0
  %127 = load i8*, i8** %126, align 8
  %128 = sext i32 %122 to i64
  %129 = tail call i8* @_Z16sk_realloc_throwPvm(i8* %127, i64 %128) #8
  store i8* %129, i8** %126, align 8
  br label %130

130:                                              ; preds = %116, %125
  %131 = phi i8* [ %118, %116 ], [ %129, %125 ]
  store i32 %109, i32* %6, align 4
  %132 = sext i32 %108 to i64
  %133 = getelementptr inbounds i8, i8* %131, i64 %132
  store i8 5, i8* %133, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = fpext float %4 to double
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = fpext float %7 to double
  %9 = fsub double %5, %8
  %10 = tail call double @llvm.fabs.f64(double %9) #8
  %11 = fcmp olt double %10, 0x3E80000000000000
  br i1 %11, label %12, label %22

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %14 = load float, float* %13, align 4
  %15 = fpext float %14 to double
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %17 = load float, float* %16, align 4
  %18 = fpext float %17 to double
  %19 = fsub double %15, %18
  %20 = tail call double @llvm.fabs.f64(double %19) #8
  %21 = fcmp olt double %20, 0x3E80000000000000
  br i1 %21, label %71, label %22

22:                                               ; preds = %12, %2
  %23 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %4, float %7) #8
  br i1 %23, label %24, label %71

24:                                               ; preds = %22
  %25 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %28 = load float, float* %27, align 4
  %29 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %26, float %28) #8
  br i1 %29, label %30, label %71

30:                                               ; preds = %24
  %31 = load float, float* %3, align 4
  %32 = fpext float %31 to double
  %33 = load float, float* %25, align 4
  %34 = fpext float %33 to double
  %35 = load float, float* %6, align 4
  %36 = fpext float %35 to double
  %37 = load float, float* %27, align 4
  %38 = fpext float %37 to double
  %39 = fsub double %32, %36
  %40 = fsub double %34, %38
  %41 = fmul double %39, %39
  %42 = fmul double %40, %40
  %43 = fadd double %41, %42
  %44 = tail call double @sqrt(double %43) #8
  %45 = load float, float* %6, align 4
  %46 = load float, float* %3, align 4
  %47 = fcmp olt float %45, %46
  %48 = load float, float* %25, align 4
  %49 = select i1 %47, float %45, float %46
  %50 = fcmp olt float %48, %49
  %51 = load float, float* %27, align 4
  %52 = select i1 %50, float %48, float %49
  %53 = fcmp olt float %51, %52
  %54 = select i1 %53, float %51, float %52
  %55 = fcmp olt float %46, %45
  %56 = load float, float* %6, align 4
  %57 = load float, float* %3, align 4
  %58 = select i1 %55, float %56, float %57
  %59 = fcmp olt float %58, %48
  %60 = load float, float* %25, align 4
  %61 = select i1 %59, float %60, float %58
  %62 = fcmp olt float %61, %51
  %63 = load float, float* %27, align 4
  %64 = select i1 %62, float %63, float %61
  %65 = fsub float -0.000000e+00, %54
  %66 = fcmp olt float %64, %65
  %67 = select i1 %66, float %65, float %64
  %68 = fpext float %67 to double
  %69 = fadd double %44, %68
  %70 = tail call zeroext i1 @_Z16AlmostDequalUlpsdd(double %68, double %69) #8
  br label %71

71:                                               ; preds = %22, %24, %12, %30
  %72 = phi i1 [ %70, %30 ], [ true, %12 ], [ false, %24 ], [ false, %22 ]
  ret i1 %72
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare i32 @_ZN13SkReduceOrder4QuadEPK7SkPointPS0_(%struct.SkPoint*, %struct.SkPoint*) local_unnamed_addr #3

declare i32 @_ZN13SkReduceOrder5CubicEPK7SkPointPS0_(%struct.SkPoint*, %struct.SkPoint*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN15SkOpEdgeBuilder5closeEv(%class.SkOpEdgeBuilder*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkOpEdgeBuilder, %class.SkOpEdgeBuilder* %0, i64 0, i32 5
  tail call void @_ZN18SkOpContourBuilder5flushEv(%class.SkOpContourBuilder* %2) #8
  %3 = getelementptr inbounds %class.SkOpContourBuilder, %class.SkOpContourBuilder* %2, i64 0, i32 0
  %4 = load %class.SkOpContour*, %class.SkOpContour** %3, align 8
  %5 = icmp eq %class.SkOpContour* %4, null
  br i1 %5, label %55, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %4, i64 0, i32 6
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %55, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %4, i64 0, i32 1, i32 6
  %12 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %4, i64 0, i32 4
  %13 = bitcast %struct.SkPathOpsBounds* %12 to i8*
  %14 = bitcast %struct.SkPathOpsBounds* %11 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 4 %14, i64 16, i1 false) #8
  %15 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %4, i64 0, i32 1, i32 3
  %16 = load %class.SkOpSegment*, %class.SkOpSegment** %15, align 8
  %17 = icmp eq %class.SkOpSegment* %16, null
  br i1 %17, label %54, label %18

18:                                               ; preds = %10
  %19 = getelementptr inbounds %struct.SkPathOpsBounds, %struct.SkPathOpsBounds* %12, i64 0, i32 0, i32 0
  %20 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %4, i64 0, i32 4, i32 0, i32 1
  %21 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %4, i64 0, i32 4, i32 0, i32 2
  %22 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %4, i64 0, i32 4, i32 0, i32 3
  %23 = load float, float* %19, align 4
  br label %24

24:                                               ; preds = %50, %18
  %25 = phi float [ %23, %18 ], [ %38, %50 ]
  %26 = phi %class.SkOpSegment* [ %16, %18 ], [ %52, %50 ]
  %27 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %26, i64 0, i32 6, i32 0, i32 0
  %28 = load float, float* %27, align 4
  %29 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %26, i64 0, i32 6, i32 0, i32 1
  %30 = load float, float* %29, align 4
  %31 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %26, i64 0, i32 6, i32 0, i32 2
  %32 = load float, float* %31, align 4
  %33 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %26, i64 0, i32 6, i32 0, i32 3
  %34 = load float, float* %33, align 4
  %35 = fcmp ogt float %25, %28
  br i1 %35, label %36, label %37

36:                                               ; preds = %24
  store float %28, float* %19, align 4
  br label %37

37:                                               ; preds = %36, %24
  %38 = phi float [ %28, %36 ], [ %25, %24 ]
  %39 = load float, float* %20, align 4
  %40 = fcmp ogt float %39, %30
  br i1 %40, label %41, label %42

41:                                               ; preds = %37
  store float %30, float* %20, align 4
  br label %42

42:                                               ; preds = %41, %37
  %43 = load float, float* %21, align 4
  %44 = fcmp olt float %43, %32
  br i1 %44, label %45, label %46

45:                                               ; preds = %42
  store float %32, float* %21, align 4
  br label %46

46:                                               ; preds = %45, %42
  %47 = load float, float* %22, align 4
  %48 = fcmp olt float %47, %34
  br i1 %48, label %49, label %50

49:                                               ; preds = %46
  store float %34, float* %22, align 4
  br label %50

50:                                               ; preds = %49, %46
  %51 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %26, i64 0, i32 3
  %52 = load %class.SkOpSegment*, %class.SkOpSegment** %51, align 8
  %53 = icmp eq %class.SkOpSegment* %52, null
  br i1 %53, label %54, label %24

54:                                               ; preds = %50, %10
  tail call void @_ZN18SkOpContourBuilder5flushEv(%class.SkOpContourBuilder* %2) #8
  store %class.SkOpContour* null, %class.SkOpContour** %3, align 8
  br label %55

55:                                               ; preds = %1, %6, %54
  ret i1 true
}

declare void @_ZN18SkOpContourBuilder7addLineEPK7SkPoint(%class.SkOpContourBuilder*, %struct.SkPoint*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @_Z24SkChopQuadAtMaxCurvaturePK7SkPointPS_(%struct.SkPoint*, %struct.SkPoint*) local_unnamed_addr #3

declare void @_ZN18SkOpContourBuilder8addCurveEN6SkPath4VerbEPK7SkPointf(%class.SkOpContourBuilder*, i32, %struct.SkPoint*, float) local_unnamed_addr #3

declare void @_ZN18SkOpContourBuilder7addQuadEP7SkPoint(%class.SkOpContourBuilder*, %struct.SkPoint*) local_unnamed_addr #3

declare float @_Z22SkFindQuadMaxCurvaturePK7SkPoint(%struct.SkPoint*) local_unnamed_addr #3

declare zeroext i1 @_ZNK7SkConic6chopAtEfPS_(%struct.SkConic*, float, %struct.SkConic*) local_unnamed_addr #3

declare void @_ZN18SkOpContourBuilder8addConicEP7SkPointf(%class.SkOpContourBuilder*, %struct.SkPoint*, float) local_unnamed_addr #3

declare i32 @_ZN13SkReduceOrder5ConicERK7SkConicP7SkPoint(%struct.SkConic* dereferenceable(28), %struct.SkPoint*) local_unnamed_addr #3

declare i32 @_ZN8SkDCubic12ComplexBreakEPK7SkPointPf(%struct.SkPoint*, float*) local_unnamed_addr #3

declare void @_ZN18SkOpContourBuilder8addCubicEP7SkPoint(%class.SkOpContourBuilder*, %struct.SkPoint*) local_unnamed_addr #3

declare zeroext i1 @_ZNK8SkDCubic13toFloatPointsEP7SkPoint(%struct.SkDCubic*, %struct.SkPoint*) local_unnamed_addr #3

declare void @_ZN18SkOpContourBuilder5flushEv(%class.SkOpContourBuilder*) local_unnamed_addr #3

declare zeroext i1 @_Z16RoughlyEqualUlpsff(float, float) local_unnamed_addr #3

declare zeroext i1 @_Z16AlmostDequalUlpsdd(double, double) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #4

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #5

declare zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect*, %struct.SkPoint*, i32) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #4

declare void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #3

declare void @_ZNK8SkDCubic9subDivideEdd(%struct.SkDCubic* sret, %struct.SkDCubic*, double, double) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #7

declare i8* @_Z16sk_realloc_throwPvm(i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z12SkTIntroSortIfZ8SkTQSortIfEvPT_S2_EUlRKfS4_E_EviS2_iRKT0_(i32, float*, i32, %class.anon.30* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %5 = icmp slt i32 %2, 33
  br i1 %5, label %6, label %36

6:                                                ; preds = %94, %4
  %7 = phi i32 [ %2, %4 ], [ %107, %94 ]
  %8 = phi float* [ %1, %4 ], [ %106, %94 ]
  %9 = sext i32 %7 to i64
  %10 = add nsw i64 %9, -1
  %11 = getelementptr inbounds float, float* %8, i64 %10
  %12 = icmp slt i32 %7, 2
  br i1 %12, label %109, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds float, float* %8, i64 1
  br label %15

15:                                               ; preds = %33, %13
  %16 = phi float* [ %34, %33 ], [ %14, %13 ]
  %17 = phi float* [ %16, %33 ], [ %8, %13 ]
  %18 = load float, float* %16, align 4
  %19 = load float, float* %17, align 4
  %20 = fcmp olt float %18, %19
  br i1 %20, label %21, label %33

21:                                               ; preds = %15, %28
  %22 = phi float* [ %23, %28 ], [ %16, %15 ]
  %23 = getelementptr inbounds float, float* %22, i64 -1
  %24 = bitcast float* %23 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = bitcast float* %22 to i32*
  store i32 %25, i32* %26, align 4
  %27 = icmp ugt float* %23, %8
  br i1 %27, label %28, label %32

28:                                               ; preds = %21
  %29 = getelementptr inbounds float, float* %22, i64 -2
  %30 = load float, float* %29, align 4
  %31 = fcmp ogt float %30, %18
  br i1 %31, label %21, label %32

32:                                               ; preds = %28, %21
  store float %18, float* %23, align 4
  br label %33

33:                                               ; preds = %32, %15
  %34 = getelementptr inbounds float, float* %16, i64 1
  %35 = icmp ugt float* %34, %11
  br i1 %35, label %109, label %15

36:                                               ; preds = %4, %94
  %37 = phi i32 [ %44, %94 ], [ %0, %4 ]
  %38 = phi float* [ %106, %94 ], [ %1, %4 ]
  %39 = phi i32 [ %107, %94 ], [ %2, %4 ]
  %40 = icmp eq i32 %37, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %36
  %42 = sext i32 %39 to i64
  tail call void @_Z11SkTHeapSortIfZ8SkTQSortIfEvPT_S2_EUlRKfS4_E_EvS2_mRKT0_(float* %38, i64 %42, %class.anon.30* dereferenceable(1) %3)
  br label %109

43:                                               ; preds = %36
  %44 = add nsw i32 %37, -1
  %45 = add nsw i32 %39, -1
  %46 = ashr i32 %45, 1
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds float, float* %38, i64 %47
  %49 = sext i32 %39 to i64
  %50 = getelementptr inbounds float, float* %38, i64 -1
  %51 = getelementptr inbounds float, float* %50, i64 %49
  %52 = bitcast float* %48 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = bitcast float* %51 to i32*
  %55 = load i32, i32* %54, align 4
  store i32 %55, i32* %52, align 4
  store i32 %53, i32* %54, align 4
  %56 = icmp ugt float* %51, %38
  br i1 %56, label %57, label %94

57:                                               ; preds = %43
  %58 = bitcast i32 %53 to float
  %59 = shl nsw i64 %49, 2
  %60 = add nsw i64 %59, -5
  %61 = and i64 %60, 4
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %71

63:                                               ; preds = %57
  %64 = load float, float* %38, align 4
  %65 = fcmp olt float %64, %58
  br i1 %65, label %66, label %68

66:                                               ; preds = %63
  store float %64, float* %38, align 4
  %67 = getelementptr inbounds float, float* %38, i64 1
  br label %68

68:                                               ; preds = %66, %63
  %69 = phi float* [ %67, %66 ], [ %38, %63 ]
  %70 = getelementptr inbounds float, float* %38, i64 1
  br label %71

71:                                               ; preds = %68, %57
  %72 = phi float* [ %69, %68 ], [ %38, %57 ]
  %73 = phi float* [ %70, %68 ], [ %38, %57 ]
  %74 = phi float* [ %69, %68 ], [ undef, %57 ]
  %75 = icmp eq i64 %60, 3
  br i1 %75, label %91, label %76

76:                                               ; preds = %71, %115
  %77 = phi float* [ %116, %115 ], [ %72, %71 ]
  %78 = phi float* [ %117, %115 ], [ %73, %71 ]
  %79 = load float, float* %78, align 4
  %80 = fcmp olt float %79, %58
  br i1 %80, label %81, label %86

81:                                               ; preds = %76
  %82 = bitcast float* %78 to i32*
  %83 = bitcast float* %77 to i32*
  %84 = load i32, i32* %83, align 4
  store i32 %84, i32* %82, align 4
  store float %79, float* %77, align 4
  %85 = getelementptr inbounds float, float* %77, i64 1
  br label %86

86:                                               ; preds = %81, %76
  %87 = phi float* [ %85, %81 ], [ %77, %76 ]
  %88 = getelementptr inbounds float, float* %78, i64 1
  %89 = load float, float* %88, align 4
  %90 = fcmp olt float %89, %58
  br i1 %90, label %110, label %115

91:                                               ; preds = %115, %71
  %92 = phi float* [ %74, %71 ], [ %116, %115 ]
  %93 = load i32, i32* %54, align 4
  br label %94

94:                                               ; preds = %43, %91
  %95 = phi i32 [ %53, %43 ], [ %93, %91 ]
  %96 = phi float* [ %38, %43 ], [ %92, %91 ]
  %97 = bitcast float* %96 to i32*
  %98 = load i32, i32* %97, align 4
  store i32 %95, i32* %97, align 4
  store i32 %98, i32* %54, align 4
  %99 = ptrtoint float* %96 to i64
  %100 = ptrtoint float* %38 to i64
  %101 = sub i64 %99, %100
  %102 = lshr exact i64 %101, 2
  %103 = trunc i64 %102 to i32
  tail call void @_Z12SkTIntroSortIfZ8SkTQSortIfEvPT_S2_EUlRKfS4_E_EviS2_iRKT0_(i32 %44, float* %38, i32 %103, %class.anon.30* dereferenceable(1) %3)
  %104 = add nsw i32 %103, 1
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds float, float* %38, i64 %105
  %107 = sub nsw i32 %39, %104
  %108 = icmp slt i32 %107, 33
  br i1 %108, label %6, label %36

109:                                              ; preds = %33, %6, %41
  ret void

110:                                              ; preds = %86
  %111 = bitcast float* %88 to i32*
  %112 = bitcast float* %87 to i32*
  %113 = load i32, i32* %112, align 4
  store i32 %113, i32* %111, align 4
  store float %89, float* %87, align 4
  %114 = getelementptr inbounds float, float* %87, i64 1
  br label %115

115:                                              ; preds = %110, %86
  %116 = phi float* [ %114, %110 ], [ %87, %86 ]
  %117 = getelementptr inbounds float, float* %78, i64 2
  %118 = icmp ult float* %117, %51
  br i1 %118, label %76, label %91
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z11SkTHeapSortIfZ8SkTQSortIfEvPT_S2_EUlRKfS4_E_EvS2_mRKT0_(float*, i64, %class.anon.30* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %4 = lshr i64 %1, 1
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %11

6:                                                ; preds = %45, %3
  %7 = add i64 %1, -1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %50, label %9

9:                                                ; preds = %6
  %10 = bitcast float* %0 to i32*
  br label %51

11:                                               ; preds = %3, %45
  %12 = phi i64 [ %13, %45 ], [ %4, %3 ]
  %13 = add nsw i64 %12, -1
  %14 = getelementptr inbounds float, float* %0, i64 %13
  %15 = bitcast float* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = shl i64 %12, 1
  %18 = icmp ugt i64 %17, %1
  br i1 %18, label %45, label %19

19:                                               ; preds = %11
  %20 = bitcast i32 %16 to float
  br label %21

21:                                               ; preds = %41, %19
  %22 = phi i64 [ %17, %19 ], [ %43, %41 ]
  %23 = phi i64 [ %12, %19 ], [ %35, %41 ]
  %24 = icmp ult i64 %22, %1
  br i1 %24, label %25, label %34

25:                                               ; preds = %21
  %26 = add i64 %22, -1
  %27 = getelementptr inbounds float, float* %0, i64 %26
  %28 = getelementptr inbounds float, float* %0, i64 %22
  %29 = load float, float* %27, align 4
  %30 = load float, float* %28, align 4
  %31 = fcmp olt float %29, %30
  %32 = zext i1 %31 to i64
  %33 = or i64 %22, %32
  br label %34

34:                                               ; preds = %25, %21
  %35 = phi i64 [ %22, %21 ], [ %33, %25 ]
  %36 = add i64 %35, -1
  %37 = getelementptr inbounds float, float* %0, i64 %36
  %38 = load float, float* %37, align 4
  %39 = fcmp ogt float %38, %20
  %40 = add i64 %23, -1
  br i1 %39, label %41, label %45

41:                                               ; preds = %34
  %42 = getelementptr inbounds float, float* %0, i64 %40
  store float %38, float* %42, align 4
  %43 = shl i64 %35, 1
  %44 = icmp ugt i64 %43, %1
  br i1 %44, label %45, label %21

45:                                               ; preds = %34, %41, %11
  %46 = phi i64 [ %13, %11 ], [ %40, %34 ], [ %36, %41 ]
  %47 = getelementptr inbounds float, float* %0, i64 %46
  %48 = bitcast float* %47 to i32*
  store i32 %16, i32* %48, align 4
  %49 = icmp eq i64 %13, 0
  br i1 %49, label %6, label %11

50:                                               ; preds = %102, %59, %6
  ret void

51:                                               ; preds = %9, %102
  %52 = phi i64 [ %7, %9 ], [ %107, %102 ]
  %53 = getelementptr inbounds float, float* %0, i64 %52
  %54 = load i32, i32* %10, align 4
  %55 = bitcast float* %53 to i32*
  %56 = load i32, i32* %55, align 4
  store i32 %56, i32* %10, align 4
  store i32 %54, i32* %55, align 4
  %57 = load i32, i32* %10, align 4
  %58 = icmp eq i64 %52, 1
  br i1 %58, label %59, label %66

59:                                               ; preds = %51
  %60 = bitcast float* %0 to i32*
  store i32 %57, i32* %60, align 4
  br label %50

61:                                               ; preds = %79
  %62 = lshr i64 %80, 1
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %102, label %64

64:                                               ; preds = %61
  %65 = bitcast i32 %57 to float
  br label %90

66:                                               ; preds = %51, %79
  %67 = phi i64 [ %88, %79 ], [ 2, %51 ]
  %68 = phi i64 [ %80, %79 ], [ 1, %51 ]
  %69 = icmp ult i64 %67, %52
  br i1 %69, label %70, label %79

70:                                               ; preds = %66
  %71 = add i64 %67, -1
  %72 = getelementptr inbounds float, float* %0, i64 %71
  %73 = getelementptr inbounds float, float* %0, i64 %67
  %74 = load float, float* %72, align 4
  %75 = load float, float* %73, align 4
  %76 = fcmp olt float %74, %75
  %77 = zext i1 %76 to i64
  %78 = or i64 %67, %77
  br label %79

79:                                               ; preds = %70, %66
  %80 = phi i64 [ %67, %66 ], [ %78, %70 ]
  %81 = add i64 %80, -1
  %82 = getelementptr inbounds float, float* %0, i64 %81
  %83 = bitcast float* %82 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = add i64 %68, -1
  %86 = getelementptr inbounds float, float* %0, i64 %85
  %87 = bitcast float* %86 to i32*
  store i32 %84, i32* %87, align 4
  %88 = shl i64 %80, 1
  %89 = icmp ugt i64 %88, %52
  br i1 %89, label %61, label %66

90:                                               ; preds = %97, %64
  %91 = phi i64 [ %62, %64 ], [ %100, %97 ]
  %92 = phi i64 [ %80, %64 ], [ %91, %97 ]
  %93 = add nsw i64 %91, -1
  %94 = getelementptr inbounds float, float* %0, i64 %93
  %95 = load float, float* %94, align 4
  %96 = fcmp olt float %95, %65
  br i1 %96, label %97, label %102

97:                                               ; preds = %90
  %98 = add i64 %92, -1
  %99 = getelementptr inbounds float, float* %0, i64 %98
  store float %95, float* %99, align 4
  %100 = lshr i64 %91, 1
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %90

102:                                              ; preds = %90, %97, %61
  %103 = phi i64 [ %80, %61 ], [ %92, %90 ], [ %91, %97 ]
  %104 = add i64 %103, -1
  %105 = getelementptr inbounds float, float* %0, i64 %104
  %106 = bitcast float* %105 to i32*
  store i32 %57, i32* %106, align 4
  %107 = add i64 %52, -1
  %108 = icmp eq i64 %107, 0
  br i1 %108, label %50, label %51
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNK6SkPath9RangeIterdeEv: argument 0"}
!5 = distinct !{!5, !"_ZNK6SkPath9RangeIterdeEv"}
!6 = !{i32 0, i32 33}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZN8SkDCubic9SubDivideEPK7SkPointdd: argument 0"}
!9 = distinct !{!9, !"_ZN8SkDCubic9SubDivideEPK7SkPointdd"}
