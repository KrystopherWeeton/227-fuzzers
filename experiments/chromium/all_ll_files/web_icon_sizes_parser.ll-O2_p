; ModuleID = '../../third_party/blink/renderer/platform/exported/web_icon_sizes_parser.cc'
source_filename = "../../third_party/blink/renderer/platform/exported/web_icon_sizes_parser.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::WebVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.gfx::Size"*, %"class.gfx::Size"*, %"class.std::__1::__compressed_pair" }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.gfx::Size"* }
%"class.blink::WebString" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::String" = type { %class.scoped_refptr }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.gfx::Size"*, i32, i32 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN3WTF6VectorIN3gfx4SizeELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN3gfx4SizeEEEmm = comdat any

@.str = private unnamed_addr constant [4 x i8] c"any\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.4 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.5 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN3gfx4SizeEEEPKcv = private unnamed_addr constant [57 x i8] c"const char *WTF::GetStringWithTypeName() [T = gfx::Size]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink18WebIconSizesParser14ParseIconSizesERKNS_9WebStringE(%"class.blink::WebVector"* noalias nocapture sret, %"class.blink::WebString"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca %"class.WTF::Vector", align 8
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca i64, align 8
  %7 = bitcast i64* %6 to %"class.gfx::Size"*
  %8 = alloca i64, align 8
  %9 = bitcast i64* %8 to %"class.gfx::Size"*
  %10 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #7
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %12 = tail call %"class.WTF::StringImpl"* @_ZNK5blink9WebStringcvN3WTF6StringEEv(%"class.blink::WebString"* %1) #7
  store %"class.WTF::StringImpl"* %12, %"class.WTF::StringImpl"** %11, align 8
  %13 = bitcast %"class.WTF::Vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #7
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %4, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 0, i64 16, i1 false) #7
  %17 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %18, %2
  %23 = bitcast %"class.blink::WebVector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 24, i1 false) #7
  br label %422

24:                                               ; preds = %18
  %25 = bitcast %"class.WTF::StringView"* %5 to i8*
  %26 = bitcast %"class.WTF::StringView"* %5 to i64*
  %27 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  %28 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  %29 = bitcast i64* %6 to i8*
  %30 = bitcast i64* %6 to i32*
  %31 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %7, i64 0, i32 1
  %32 = bitcast i64* %8 to i8*
  %33 = bitcast i64* %8 to i32*
  %34 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %9, i64 0, i32 1
  br label %35

35:                                               ; preds = %24, %396
  %36 = phi i32 [ 0, %24 ], [ %394, %396 ]
  %37 = phi %"class.WTF::StringImpl"* [ %12, %24 ], [ %397, %396 ]
  %38 = call i32 @_ZN3WTF10StringImpl4FindEPFbDsEj(%"class.WTF::StringImpl"* nonnull %37, i1 (i16)* nonnull @_ZN5blink12_GLOBAL__N_115IsNotWhitespaceEDs, i32 %36) #7
  %39 = icmp ult i32 %20, %38
  %40 = select i1 %39, i32 %20, i32 %38
  %41 = icmp ugt i32 %20, %38
  br i1 %41, label %42, label %399

42:                                               ; preds = %35
  %43 = call %"class.WTF::StringImpl"* @_ZNK3WTF6String9SubstringEjj(%"class.WTF::String"* nonnull %3, i32 %40, i32 3) #7
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %25) #7
  %44 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %44, i64* %26, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8** %27, align 8
  store i32 3, i32* %28, align 8
  %45 = icmp eq %"class.WTF::StringImpl"* %43, null
  br i1 %45, label %48, label %46

46:                                               ; preds = %42
  %47 = call zeroext i1 @_ZNK3WTF10StringImpl22StartsWithIgnoringCaseERKNS_10StringViewE(%"class.WTF::StringImpl"* nonnull %43, %"class.WTF::StringView"* nonnull dereferenceable(24) %5) #7
  br i1 %47, label %49, label %127

48:                                               ; preds = %42
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25) #7
  br label %140

49:                                               ; preds = %46
  %50 = add i32 %40, 3
  %51 = icmp eq i32 %50, %20
  br i1 %51, label %100, label %52

52:                                               ; preds = %49
  %53 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %54 = icmp eq %"class.WTF::StringImpl"* %53, null
  br i1 %54, label %85, label %55

55:                                               ; preds = %52
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %53, i64 0, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = icmp ugt i32 %57, %50
  br i1 %58, label %59, label %85

59:                                               ; preds = %55
  %60 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %53, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load atomic i32, i32* %60 monotonic, align 4
  %62 = and i32 %61, 1
  %63 = icmp eq i32 %62, 0
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %53, i64 1
  br i1 %63, label %71, label %65

65:                                               ; preds = %59
  %66 = bitcast %"class.WTF::StringImpl"* %64 to i8*
  %67 = zext i32 %50 to i64
  %68 = getelementptr inbounds i8, i8* %66, i64 %67
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i16
  br label %76

71:                                               ; preds = %59
  %72 = bitcast %"class.WTF::StringImpl"* %64 to i16*
  %73 = zext i32 %50 to i64
  %74 = getelementptr inbounds i16, i16* %72, i64 %73
  %75 = load i16, i16* %74, align 2
  br label %76

76:                                               ; preds = %65, %71
  %77 = phi i16 [ %70, %65 ], [ %75, %71 ]
  %78 = add i16 %77, -9
  %79 = icmp ult i16 %78, 24
  br i1 %79, label %80, label %85

80:                                               ; preds = %76
  %81 = zext i16 %78 to i24
  %82 = lshr i24 -8388581, %81
  %83 = and i24 %82, 1
  %84 = icmp ne i24 %83, 0
  br label %85

85:                                               ; preds = %55, %52, %76, %80
  %86 = phi i1 [ %84, %80 ], [ false, %76 ], [ false, %52 ], [ false, %55 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25) #7
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = and i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 0
  %92 = load i32, i32* %91, align 4
  br i1 %90, label %93, label %95

93:                                               ; preds = %85
  %94 = add i32 %92, -1
  store i32 %94, i32* %91, align 4
  br label %95

95:                                               ; preds = %93, %85
  %96 = phi i32 [ %94, %93 ], [ %92, %85 ]
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %95
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %43) #7
  br label %99

99:                                               ; preds = %95, %98
  br i1 %86, label %113, label %140

100:                                              ; preds = %49
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25) #7
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  br i1 %104, label %107, label %109

107:                                              ; preds = %100
  %108 = add i32 %106, -1
  store i32 %108, i32* %105, align 4
  br label %109

109:                                              ; preds = %107, %100
  %110 = phi i32 [ %108, %107 ], [ %106, %100 ]
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %43) #7
  br label %113

113:                                              ; preds = %112, %109, %99
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #7
  store i32 0, i32* %30, align 8
  store i32 0, i32* %31, align 4
  %114 = load i32, i32* %16, align 4
  %115 = load i32, i32* %15, align 8
  %116 = icmp eq i32 %114, %115
  br i1 %116, label %125, label %117, !prof !2

117:                                              ; preds = %113
  %118 = load %"class.gfx::Size"*, %"class.gfx::Size"** %14, align 8
  %119 = zext i32 %114 to i64
  %120 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %118, i64 %119
  %121 = bitcast %"class.gfx::Size"* %120 to i64*
  %122 = load i64, i64* %6, align 8
  store i64 %122, i64* %121, align 4
  %123 = load i32, i32* %16, align 4
  %124 = add i32 %123, 1
  store i32 %124, i32* %16, align 4
  br label %126

125:                                              ; preds = %113
  call void @_ZN3WTF6VectorIN3gfx4SizeELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector"* nonnull %4, %"class.gfx::Size"* nonnull dereferenceable(8) %7) #7
  br label %126

126:                                              ; preds = %117, %125
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #7
  br label %392

127:                                              ; preds = %46
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %25) #7
  %128 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %129 = load atomic i32, i32* %128 monotonic, align 4
  %130 = and i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 0
  %133 = load i32, i32* %132, align 4
  br i1 %131, label %134, label %136

134:                                              ; preds = %127
  %135 = add i32 %133, -1
  store i32 %135, i32* %132, align 4
  br label %136

136:                                              ; preds = %134, %127
  %137 = phi i32 [ %135, %134 ], [ %133, %127 ]
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %140

139:                                              ; preds = %136
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %43) #7
  br label %140

140:                                              ; preds = %139, %136, %48, %99
  %141 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %142 = icmp eq %"class.WTF::StringImpl"* %141, null
  br i1 %142, label %175, label %143

143:                                              ; preds = %140
  %144 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %141, i64 0, i32 1
  %145 = load i32, i32* %144, align 4
  %146 = icmp ugt i32 %145, %40
  br i1 %146, label %147, label %168

147:                                              ; preds = %143
  %148 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %141, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %149 = load atomic i32, i32* %148 monotonic, align 4
  %150 = and i32 %149, 1
  %151 = icmp eq i32 %150, 0
  %152 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %141, i64 1
  br i1 %151, label %159, label %153

153:                                              ; preds = %147
  %154 = bitcast %"class.WTF::StringImpl"* %152 to i8*
  %155 = zext i32 %40 to i64
  %156 = getelementptr inbounds i8, i8* %154, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i16
  br label %164

159:                                              ; preds = %147
  %160 = bitcast %"class.WTF::StringImpl"* %152 to i16*
  %161 = zext i32 %40 to i64
  %162 = getelementptr inbounds i16, i16* %160, i64 %161
  %163 = load i16, i16* %162, align 2
  br label %164

164:                                              ; preds = %153, %159
  %165 = phi i16 [ %158, %153 ], [ %163, %159 ]
  %166 = add i16 %165, -49
  %167 = icmp ult i16 %166, 9
  br i1 %167, label %180, label %168

168:                                              ; preds = %164, %143
  %169 = call i32 @_ZN3WTF10StringImpl4FindEPFbDsEj(%"class.WTF::StringImpl"* nonnull %141, i1 (i16)* nonnull @_ZN5blink12_GLOBAL__N_112IsWhitespaceEDs, i32 %40) #7
  %170 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %171 = icmp eq %"class.WTF::StringImpl"* %170, null
  br i1 %171, label %175, label %172

172:                                              ; preds = %168
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %170, i64 0, i32 1
  %174 = load i32, i32* %173, align 4
  br label %175

175:                                              ; preds = %140, %168, %172
  %176 = phi i32 [ %169, %172 ], [ %169, %168 ], [ -1, %140 ]
  %177 = phi i32 [ %174, %172 ], [ 0, %168 ], [ 0, %140 ]
  %178 = icmp ult i32 %177, %176
  %179 = select i1 %178, i32 %177, i32 %176
  br label %392

180:                                              ; preds = %164
  %181 = call i32 @_ZN3WTF10StringImpl4FindEPFbDsEj(%"class.WTF::StringImpl"* nonnull %141, i1 (i16)* nonnull @_ZN5blink12_GLOBAL__N_110IsNonDigitEDs, i32 %40) #7
  %182 = icmp ult i32 %20, %181
  %183 = select i1 %182, i32 %20, i32 %181
  %184 = icmp ugt i32 %20, %181
  %185 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %186 = icmp eq %"class.WTF::StringImpl"* %185, null
  br i1 %184, label %187, label %232

187:                                              ; preds = %180
  br i1 %186, label %240, label %188

188:                                              ; preds = %187
  %189 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 0, i32 1
  %190 = load i32, i32* %189, align 4
  %191 = icmp ugt i32 %190, %183
  br i1 %191, label %192, label %233

192:                                              ; preds = %188
  %193 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %194 = load atomic i32, i32* %193 monotonic, align 4
  %195 = and i32 %194, 1
  %196 = icmp eq i32 %195, 0
  %197 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 1
  br i1 %196, label %204, label %198

198:                                              ; preds = %192
  %199 = bitcast %"class.WTF::StringImpl"* %197 to i8*
  %200 = zext i32 %183 to i64
  %201 = getelementptr inbounds i8, i8* %199, i64 %200
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i16
  br label %209

204:                                              ; preds = %192
  %205 = bitcast %"class.WTF::StringImpl"* %197 to i16*
  %206 = zext i32 %183 to i64
  %207 = getelementptr inbounds i16, i16* %205, i64 %206
  %208 = load i16, i16* %207, align 2
  br label %209

209:                                              ; preds = %198, %204
  %210 = phi i16 [ %203, %198 ], [ %208, %204 ]
  %211 = icmp eq i16 %210, 120
  br i1 %211, label %245, label %212

212:                                              ; preds = %209
  %213 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %214 = load atomic i32, i32* %213 monotonic, align 4
  %215 = and i32 %214, 1
  %216 = icmp eq i32 %215, 0
  %217 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 1
  br i1 %216, label %224, label %218

218:                                              ; preds = %212
  %219 = bitcast %"class.WTF::StringImpl"* %217 to i8*
  %220 = zext i32 %183 to i64
  %221 = getelementptr inbounds i8, i8* %219, i64 %220
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i16
  br label %229

224:                                              ; preds = %212
  %225 = bitcast %"class.WTF::StringImpl"* %217 to i16*
  %226 = zext i32 %183 to i64
  %227 = getelementptr inbounds i16, i16* %225, i64 %226
  %228 = load i16, i16* %227, align 2
  br label %229

229:                                              ; preds = %218, %224
  %230 = phi i16 [ %223, %218 ], [ %228, %224 ]
  %231 = icmp eq i16 %230, 88
  br i1 %231, label %245, label %233

232:                                              ; preds = %180
  br i1 %186, label %240, label %233

233:                                              ; preds = %188, %229, %232
  %234 = call i32 @_ZN3WTF10StringImpl4FindEPFbDsEj(%"class.WTF::StringImpl"* nonnull %185, i1 (i16)* nonnull @_ZN5blink12_GLOBAL__N_112IsWhitespaceEDs, i32 %183) #7
  %235 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %236 = icmp eq %"class.WTF::StringImpl"* %235, null
  br i1 %236, label %240, label %237

237:                                              ; preds = %233
  %238 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %235, i64 0, i32 1
  %239 = load i32, i32* %238, align 4
  br label %240

240:                                              ; preds = %187, %232, %233, %237
  %241 = phi i32 [ %234, %237 ], [ %234, %233 ], [ -1, %232 ], [ -1, %187 ]
  %242 = phi i32 [ %239, %237 ], [ 0, %233 ], [ 0, %232 ], [ 0, %187 ]
  %243 = icmp ult i32 %242, %241
  %244 = select i1 %243, i32 %242, i32 %241
  br label %392

245:                                              ; preds = %229, %209
  %246 = add nuw i32 %183, 1
  %247 = icmp ult i32 %246, %20
  %248 = icmp ugt i32 %190, %246
  %249 = and i1 %247, %248
  br i1 %249, label %250, label %271

250:                                              ; preds = %245
  %251 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %252 = load atomic i32, i32* %251 monotonic, align 4
  %253 = and i32 %252, 1
  %254 = icmp eq i32 %253, 0
  %255 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 1
  br i1 %254, label %262, label %256

256:                                              ; preds = %250
  %257 = bitcast %"class.WTF::StringImpl"* %255 to i8*
  %258 = zext i32 %246 to i64
  %259 = getelementptr inbounds i8, i8* %257, i64 %258
  %260 = load i8, i8* %259, align 1
  %261 = zext i8 %260 to i16
  br label %267

262:                                              ; preds = %250
  %263 = bitcast %"class.WTF::StringImpl"* %255 to i16*
  %264 = zext i32 %246 to i64
  %265 = getelementptr inbounds i16, i16* %263, i64 %264
  %266 = load i16, i16* %265, align 2
  br label %267

267:                                              ; preds = %256, %262
  %268 = phi i16 [ %261, %256 ], [ %266, %262 ]
  %269 = add i16 %268, -49
  %270 = icmp ult i16 %269, 9
  br i1 %270, label %282, label %271

271:                                              ; preds = %267, %245
  %272 = call i32 @_ZN3WTF10StringImpl4FindEPFbDsEj(%"class.WTF::StringImpl"* nonnull %185, i1 (i16)* nonnull @_ZN5blink12_GLOBAL__N_112IsWhitespaceEDs, i32 %246) #7
  %273 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %274 = icmp eq %"class.WTF::StringImpl"* %273, null
  br i1 %274, label %278, label %275

275:                                              ; preds = %271
  %276 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %273, i64 0, i32 1
  %277 = load i32, i32* %276, align 4
  br label %278

278:                                              ; preds = %271, %275
  %279 = phi i32 [ %277, %275 ], [ 0, %271 ]
  %280 = icmp ult i32 %279, %272
  %281 = select i1 %280, i32 %279, i32 %272
  br label %392

282:                                              ; preds = %267
  %283 = call i32 @_ZN3WTF10StringImpl4FindEPFbDsEj(%"class.WTF::StringImpl"* nonnull %185, i1 (i16)* nonnull @_ZN5blink12_GLOBAL__N_110IsNonDigitEDs, i32 %246) #7
  %284 = icmp ult i32 %20, %283
  %285 = select i1 %284, i32 %20, i32 %283
  %286 = icmp ugt i32 %20, %283
  %287 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  br i1 %286, label %288, label %325

288:                                              ; preds = %282
  %289 = icmp eq %"class.WTF::StringImpl"* %287, null
  br i1 %289, label %320, label %290

290:                                              ; preds = %288
  %291 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %287, i64 0, i32 1
  %292 = load i32, i32* %291, align 4
  %293 = icmp ugt i32 %292, %285
  br i1 %293, label %294, label %313

294:                                              ; preds = %290
  %295 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %287, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %296 = load atomic i32, i32* %295 monotonic, align 4
  %297 = and i32 %296, 1
  %298 = icmp eq i32 %297, 0
  %299 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %287, i64 1
  br i1 %298, label %306, label %300

300:                                              ; preds = %294
  %301 = bitcast %"class.WTF::StringImpl"* %299 to i8*
  %302 = zext i32 %285 to i64
  %303 = getelementptr inbounds i8, i8* %301, i64 %302
  %304 = load i8, i8* %303, align 1
  %305 = zext i8 %304 to i16
  br label %311

306:                                              ; preds = %294
  %307 = bitcast %"class.WTF::StringImpl"* %299 to i16*
  %308 = zext i32 %285 to i64
  %309 = getelementptr inbounds i16, i16* %307, i64 %308
  %310 = load i16, i16* %309, align 2
  br label %311

311:                                              ; preds = %300, %306
  %312 = phi i16 [ %305, %300 ], [ %310, %306 ]
  switch i16 %312, label %313 [
    i16 32, label %325
    i16 9, label %325
    i16 10, label %325
    i16 12, label %325
    i16 13, label %325
  ]

313:                                              ; preds = %311, %290
  %314 = call i32 @_ZN3WTF10StringImpl4FindEPFbDsEj(%"class.WTF::StringImpl"* nonnull %287, i1 (i16)* nonnull @_ZN5blink12_GLOBAL__N_112IsWhitespaceEDs, i32 %285) #7
  %315 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %316 = icmp eq %"class.WTF::StringImpl"* %315, null
  br i1 %316, label %320, label %317

317:                                              ; preds = %313
  %318 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %315, i64 0, i32 1
  %319 = load i32, i32* %318, align 4
  br label %320

320:                                              ; preds = %288, %313, %317
  %321 = phi i32 [ %314, %317 ], [ %314, %313 ], [ -1, %288 ]
  %322 = phi i32 [ %319, %317 ], [ 0, %313 ], [ 0, %288 ]
  %323 = icmp ult i32 %322, %321
  %324 = select i1 %323, i32 %322, i32 %321
  br label %392

325:                                              ; preds = %282, %311, %311, %311, %311, %311
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #7
  %326 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %287, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %327 = load atomic i32, i32* %326 monotonic, align 4
  %328 = and i32 %327, 1
  %329 = icmp eq i32 %328, 0
  %330 = icmp eq %"class.WTF::StringImpl"* %287, null
  %331 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %287, i64 1
  br i1 %329, label %340, label %332

332:                                              ; preds = %325
  %333 = bitcast %"class.WTF::StringImpl"* %331 to i8*
  %334 = select i1 %330, i8* null, i8* %333
  %335 = zext i32 %40 to i64
  %336 = getelementptr inbounds i8, i8* %334, i64 %335
  %337 = sub i32 %183, %40
  %338 = zext i32 %337 to i64
  %339 = call i32 @_ZN3WTF15CharactersToIntEPKhmNS_20NumberParsingOptionsEPb(i8* %336, i64 %338, i32 0, i8* null) #7
  br label %348

340:                                              ; preds = %325
  %341 = bitcast %"class.WTF::StringImpl"* %331 to i16*
  %342 = select i1 %330, i16* null, i16* %341
  %343 = zext i32 %40 to i64
  %344 = getelementptr inbounds i16, i16* %342, i64 %343
  %345 = sub i32 %183, %40
  %346 = zext i32 %345 to i64
  %347 = call i32 @_ZN3WTF15CharactersToIntEPKDsmNS_20NumberParsingOptionsEPb(i16* %344, i64 %346, i32 0, i8* null) #7
  br label %348

348:                                              ; preds = %332, %340
  %349 = phi i32 [ %339, %332 ], [ %347, %340 ]
  %350 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %351 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %350, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %352 = load atomic i32, i32* %351 monotonic, align 4
  %353 = and i32 %352, 1
  %354 = icmp eq i32 %353, 0
  %355 = icmp eq %"class.WTF::StringImpl"* %350, null
  %356 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %350, i64 1
  br i1 %354, label %365, label %357

357:                                              ; preds = %348
  %358 = bitcast %"class.WTF::StringImpl"* %356 to i8*
  %359 = select i1 %355, i8* null, i8* %358
  %360 = zext i32 %246 to i64
  %361 = getelementptr inbounds i8, i8* %359, i64 %360
  %362 = sub i32 %285, %246
  %363 = zext i32 %362 to i64
  %364 = call i32 @_ZN3WTF15CharactersToIntEPKhmNS_20NumberParsingOptionsEPb(i8* %361, i64 %363, i32 0, i8* null) #7
  br label %373

365:                                              ; preds = %348
  %366 = bitcast %"class.WTF::StringImpl"* %356 to i16*
  %367 = select i1 %355, i16* null, i16* %366
  %368 = zext i32 %246 to i64
  %369 = getelementptr inbounds i16, i16* %367, i64 %368
  %370 = sub i32 %285, %246
  %371 = zext i32 %370 to i64
  %372 = call i32 @_ZN3WTF15CharactersToIntEPKDsmNS_20NumberParsingOptionsEPb(i16* %369, i64 %371, i32 0, i8* null) #7
  br label %373

373:                                              ; preds = %357, %365
  %374 = phi i32 [ %364, %357 ], [ %372, %365 ]
  %375 = icmp sgt i32 %349, 0
  %376 = select i1 %375, i32 %349, i32 0
  store i32 %376, i32* %33, align 8
  %377 = icmp sgt i32 %374, 0
  %378 = select i1 %377, i32 %374, i32 0
  store i32 %378, i32* %34, align 4
  %379 = load i32, i32* %16, align 4
  %380 = load i32, i32* %15, align 8
  %381 = icmp eq i32 %379, %380
  br i1 %381, label %390, label %382, !prof !2

382:                                              ; preds = %373
  %383 = load %"class.gfx::Size"*, %"class.gfx::Size"** %14, align 8
  %384 = zext i32 %379 to i64
  %385 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %383, i64 %384
  %386 = bitcast %"class.gfx::Size"* %385 to i64*
  %387 = load i64, i64* %8, align 8
  store i64 %387, i64* %386, align 4
  %388 = load i32, i32* %16, align 4
  %389 = add i32 %388, 1
  store i32 %389, i32* %16, align 4
  br label %391

390:                                              ; preds = %373
  call void @_ZN3WTF6VectorIN3gfx4SizeELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector"* nonnull %4, %"class.gfx::Size"* nonnull dereferenceable(8) %9) #7
  br label %391

391:                                              ; preds = %382, %390
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #7
  br label %392

392:                                              ; preds = %240, %320, %391, %278, %175, %126
  %393 = phi i32 [ %50, %126 ], [ %179, %175 ], [ %244, %240 ], [ %281, %278 ], [ %285, %391 ], [ %324, %320 ]
  %394 = add i32 %393, 1
  %395 = icmp ult i32 %394, %20
  br i1 %395, label %396, label %399

396:                                              ; preds = %392
  %397 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %398 = icmp eq %"class.WTF::StringImpl"* %397, null
  br i1 %398, label %399, label %35

399:                                              ; preds = %35, %392, %396
  %400 = bitcast %"class.WTF::Vector"* %4 to i8**
  %401 = load i8*, i8** %400, align 8
  %402 = load i32, i32* %16, align 4
  %403 = zext i32 %402 to i64
  %404 = bitcast %"class.blink::WebVector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %404, i8 0, i64 24, i1 false) #7
  %405 = shl nuw nsw i64 %403, 3
  %406 = icmp eq i32 %402, 0
  br i1 %406, label %416, label %407

407:                                              ; preds = %399
  %408 = call i8* @_Znwm(i64 %405) #8
  %409 = bitcast i8* %408 to %"class.gfx::Size"*
  %410 = getelementptr inbounds %"class.blink::WebVector", %"class.blink::WebVector"* %0, i64 0, i32 0, i32 0, i32 1
  %411 = bitcast %"class.blink::WebVector"* %0 to i8**
  store i8* %408, i8** %411, align 8
  %412 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %409, i64 %403
  %413 = getelementptr inbounds %"class.blink::WebVector", %"class.blink::WebVector"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store %"class.gfx::Size"* %412, %"class.gfx::Size"** %413, align 8
  %414 = bitcast %"class.gfx::Size"** %410 to i64*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %408, i8* align 4 %401, i64 %405, i1 false) #7
  %415 = ptrtoint %"class.gfx::Size"* %412 to i64
  store i64 %415, i64* %414, align 8
  br label %416

416:                                              ; preds = %407, %399
  %417 = icmp eq i8* %401, null
  br i1 %417, label %422, label %418, !prof !3

418:                                              ; preds = %416
  %419 = icmp eq i32 %402, 0
  br i1 %419, label %421, label %420, !prof !2

420:                                              ; preds = %418
  store i32 0, i32* %16, align 4
  br label %421

421:                                              ; preds = %420, %418
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %401) #7
  store %"class.gfx::Size"* null, %"class.gfx::Size"** %14, align 8
  br label %422

422:                                              ; preds = %22, %416, %421
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #7
  %423 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %424 = icmp eq %"class.WTF::StringImpl"* %423, null
  br i1 %424, label %438, label %425

425:                                              ; preds = %422
  %426 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %423, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %427 = load atomic i32, i32* %426 monotonic, align 4
  %428 = and i32 %427, 2
  %429 = icmp eq i32 %428, 0
  %430 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %423, i64 0, i32 0
  %431 = load i32, i32* %430, align 4
  br i1 %429, label %432, label %434

432:                                              ; preds = %425
  %433 = add i32 %431, -1
  store i32 %433, i32* %430, align 4
  br label %434

434:                                              ; preds = %432, %425
  %435 = phi i32 [ %433, %432 ], [ %431, %425 ]
  %436 = icmp eq i32 %435, 0
  br i1 %436, label %437, label %438

437:                                              ; preds = %434
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %423) #7
  br label %438

438:                                              ; preds = %422, %434, %437
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.WTF::StringImpl"* @_ZNK5blink9WebStringcvN3WTF6StringEEv(%"class.blink::WebString"*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN5blink12_GLOBAL__N_115IsNotWhitespaceEDs(i16 zeroext) #3 {
  %2 = add i16 %0, -9
  %3 = icmp ult i16 %2, 24
  br i1 %3, label %4, label %9

4:                                                ; preds = %1
  %5 = zext i16 %2 to i24
  %6 = lshr i24 8388580, %5
  %7 = and i24 %6, 1
  %8 = icmp ne i24 %7, 0
  ret i1 %8

9:                                                ; preds = %1
  ret i1 true
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.WTF::StringImpl"* @_ZNK3WTF6String9SubstringEjj(%"class.WTF::String"*, i32, i32) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN5blink12_GLOBAL__N_112IsWhitespaceEDs(i16 zeroext) #3 {
  %2 = add i16 %0, -9
  %3 = icmp ult i16 %2, 24
  br i1 %3, label %4, label %9

4:                                                ; preds = %1
  %5 = zext i16 %2 to i24
  %6 = lshr i24 -8388581, %5
  %7 = and i24 %6, 1
  %8 = icmp ne i24 %7, 0
  ret i1 %8

9:                                                ; preds = %1
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZN5blink12_GLOBAL__N_110IsNonDigitEDs(i16 zeroext) #3 {
  %2 = add i16 %0, -48
  %3 = icmp ugt i16 %2, 9
  ret i1 %3
}

declare i32 @_ZN3WTF10StringImpl4FindEPFbDsEj(%"class.WTF::StringImpl"*, i1 (i16)*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZNK3WTF10StringImpl22StartsWithIgnoringCaseERKNS_10StringViewE(%"class.WTF::StringImpl"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare i32 @_ZN3WTF15CharactersToIntEPKhmNS_20NumberParsingOptionsEPb(i8*, i64, i32, i8*) local_unnamed_addr #2

declare i32 @_ZN3WTF15CharactersToIntEPKDsmNS_20NumberParsingOptionsEPb(i16*, i64, i32, i8*) local_unnamed_addr #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN3gfx4SizeELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector"*, %"class.gfx::Size"* dereferenceable(8)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.gfx::Size"*, %"class.gfx::Size"** %6, align 8
  %8 = icmp ugt %"class.gfx::Size"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %7, i64 %10
  %12 = icmp ugt %"class.gfx::Size"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !3

24:                                               ; preds = %13
  %25 = icmp eq %"class.gfx::Size"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN3gfx4SizeEEEmm(i64 %26) #7
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN3gfx4SizeEEEPKcv, i64 0, i64 0)) #7
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"class.gfx::Size"*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"class.gfx::Size"*, %"class.gfx::Size"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"class.gfx::Size"* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"class.gfx::Size"* %38 to i8*
  br i1 %41, label %43, label %49, !prof !3

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %28, i8* nonnull align 4 %42, i64 %46, i1 false) #7
  %47 = bitcast %"class.WTF::Vector"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #7
  %51 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"class.gfx::Size"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"class.gfx::Size"* %1 to i64
  %56 = ptrtoint %"class.gfx::Size"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !3

69:                                               ; preds = %54
  %70 = icmp eq %"class.gfx::Size"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN3gfx4SizeEEEmm(i64 %71) #7
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN3gfx4SizeEEEPKcv, i64 0, i64 0)) #7
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"class.gfx::Size"*, %"class.gfx::Size"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"class.gfx::Size"* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"class.gfx::Size"* %78 to i8*
  br i1 %81, label %83, label %89, !prof !3

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %73, i8* nonnull align 4 %82, i64 %86, i1 false) #7
  %87 = bitcast %"class.WTF::Vector"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #7
  %91 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"class.gfx::Size"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"class.gfx::Size"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"class.gfx::Size"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"class.gfx::Size"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %100, i64 %103
  %105 = bitcast %"class.gfx::Size"* %101 to i64*
  %106 = bitcast %"class.gfx::Size"* %104 to i64*
  %107 = load i64, i64* %105, align 4
  store i64 %107, i64* %106, align 4
  %108 = load i32, i32* %3, align 4
  %109 = add i32 %108, 1
  store i32 %109, i32* %3, align 4
  ret void
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN3gfx4SizeEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i64 0, i64 0), i8* %11, i8* %12) #7
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.5, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #7
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #7
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
