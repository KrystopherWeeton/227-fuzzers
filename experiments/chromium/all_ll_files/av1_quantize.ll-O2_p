; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/av1_quantize.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/av1_quantize.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.macroblock_plane = type { i16*, i32*, i32*, i32*, i16*, i8*, %struct.buf_2d, i16*, i16*, i16*, i16*, i16*, i16*, i16* }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.SCAN_ORDER = type { i16*, i16* }
%struct.QUANT_PARAM = type { i32, i8, i8*, i8*, i32, i32, i32 }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.Dequants = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.EncQuantDequantParams = type { %struct.QUANTS, %struct.Dequants }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.AV1_COMP = type { %struct.AV1_PRIMARY*, [8 x i8], %struct.EncQuantDequantParams, %struct.ThreadData, %struct.FRAME_COUNTS, %struct.MBMIExtFrameBufferInfo, %struct.CB_COEFF_BUFFER*, %struct.CoeffBufferPool, %struct.AV1Common, %struct.AV1EncoderConfig, i32, [8 x i8], %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, %struct.TemporalFilterCtx, i32, %struct.ForceIntegerMVInfo, [7 x %struct.RefCntBuffer*], %struct.RefCntBuffer*, %struct.RefreshFrameFlagsInfo, [8 x i32], %struct.ExternalFlags, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i64, %struct.RD_OPT, %struct.CODING_CONTEXT, %struct.GlobalMotionInfo, %struct.WinnerModeParams, %struct.TimeStamps, %struct.RATE_CONTROL, double, i32, i32, %struct.SPEED_FEATURES, %struct.MotionVectorSearchParams, i32, %struct.EncSegmentationInfo, %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i8, %struct.RefBufferStack, i32, i32, %struct.FRAME_INFO, %struct.FRAME_INDEX_SET, %struct.InitialDimensions, i32, %struct.ResizePendingParams, %struct.TileDataEnc*, i32, %struct.TokenInfo, i32, %struct.VarBasedPartitionInfo, %struct.FrameProbInfo, %struct.MultiThreadInfo, i32, i32, i32, %struct.AV1LrStruct, %struct.aom_film_grain_table_t*, %struct.aom_denoise_and_model_t*, %struct.InterpSearchFlags, i32, i32, i32, i32, %struct.RefFrameDistanceInfo, double*, %struct.SVC, i8, %struct.MV_STATS, i8, i32, i32, %struct.FirstPassData, %struct.noise_estimate, %struct.av1_denoiser, i8*, i8, i32, i64, [8 x i8] }
%struct.AV1_PRIMARY = type { %struct.AV1_COMP*, %struct.AV1_COMP*, %struct.lookahead_ctx*, i32, %struct.aom_codec_pkt_list*, i32, %struct.GF_GROUP, %struct.GF_STATE, i32, %struct.AV1LevelParams, i32, i32, %struct.TWO_PASS, %struct.PRIMARY_RATE_CONTROL, %struct.yv12_buffer_config, %struct.SequenceHeader, i32, i8, i32, i32, %struct.aom_internal_error_info, [22 x %struct.aom_variance_vtable], double*, double*, %struct.TplParams }
%struct.lookahead_ctx = type { i32, i32, [2 x %struct.read_ctx], %struct.lookahead_entry*, i32, i8 }
%struct.read_ctx = type { i32, i32, i32, i32 }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.aom_codec_pkt_list = type { i32, i32, [1 x %struct.aom_codec_cx_pkt] }
%struct.aom_codec_cx_pkt = type { i32, %union.anon.10 }
%union.anon.10 = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.GF_GROUP = type { [250 x i8], [250 x i8], [250 x i8], [250 x i32], [250 x i32], i32, i32, [250 x i8], [250 x i32], [250 x i8], [250 x i8], i32, i32 }
%struct.GF_STATE = type { i32 }
%struct.AV1LevelParams = type { [32 x i8], i32, [32 x %struct.AV1LevelInfo*] }
%struct.AV1LevelInfo = type { %struct.AV1LevelStats, %struct.AV1LevelSpec, %struct.FrameWindowBuffer, [24 x %struct.DECODER_MODEL] }
%struct.AV1LevelStats = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, double }
%struct.AV1LevelSpec = type { i8, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double, double, double }
%struct.FrameWindowBuffer = type { [256 x %struct.FrameRecord], i32, i32 }
%struct.FrameRecord = type { i64, i64, i64, i32, i32, i32, i32, i32 }
%struct.DECODER_MODEL = type { i8, i8, i8, i8, i32, i32, i32, i32, i64, double, double, double, double, i32, i32, i32, [8 x i32], [10 x %struct.FRAME_BUFFER], %struct.DFG_INTERVAL_QUEUE, double, double, i64, double, double, i32, i32, double, double }
%struct.FRAME_BUFFER = type { i32, i32, i32, i8, double }
%struct.DFG_INTERVAL_QUEUE = type { i32, i32, double, [64 x %struct.DFG_INTERVAL] }
%struct.DFG_INTERVAL = type { double, double, double }
%struct.TWO_PASS = type { i32, [36 x %struct.FIRSTPASS_STATS*], i32, %struct.FIRSTPASS_STATS*, %struct.STATS_BUFFER_CTX*, i32, i64, double, double, double, double, double, i8, i64, i64, double, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64, double, double }
%struct.STATS_BUFFER_CTX = type { %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS* }
%struct.PRIMARY_RATE_CONTROL = type { i64, i32, i32, [15 x i32], i32, i32, [150 x %struct.regions], i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regions = type { i32, i32, double, double, double, double, double, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.aom_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, i32 (i8*, i32, i32*, i32*)*, i32 (i8*, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i32, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)* }
%struct.dist_wtd_comp_params = type { i32, i32, i32 }
%struct.TplParams = type { i8, i8, [79 x %struct.TplDepFrame], [35 x %struct.TplDepStats*], [35 x %struct.yv12_buffer_config], %struct.TplDepFrame*, %struct.scale_factors, i32, [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*], %struct.AV1TplRowMultiThreadSync, i32 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, [8 x i32], i32, i32, i32, i32, i32, i32, i32, [256 x double], [256 x double], i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, [2 x i64], i64, i64, [2 x i64], i64, i64, [7 x %union.int_mv], [2 x i32], [7 x i64] }
%union.int_mv = type { i32 }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.AV1TplRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.12, %union.anon.14, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.12 = type { i64 }
%union.anon.14 = type { i64 }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PC_TREE_SHARED_BUFFERS, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.inter_modes_info*, [2 x [2 x i32*]], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, [2 x i8*], i32, i32, i32, i32, [4 x i32], %struct.frame_contexts*, %struct.VP64x64*, i32, %struct.PICK_MODE_CONTEXT*, %struct.TemporalFilterData, %struct.TplTxfmStats, %struct.PixelLevelGradientInfo*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], [8 x i8], %struct.macroblockd, %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT_FRAME*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CB_COEFF_BUFFER*, [2 x i16], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, %struct.aom_internal_error_info*, [2 x i8*], i32, i32, i32, i32, i32, %struct.ModeCosts, %struct.MvCosts*, %struct.IntraBCMVCosts*, %struct.CoeffCosts, i32, i32, i32, i32, i32, i32, %struct.SuperBlockEnc, %struct.CONTENT_STATE_SB, [8 x i32], i32, [8 x i8], [8 x %struct.WARP_SAMPLE_INFO], [1024 x i32], i32, %struct.PartitionSearchInfo, i32, i32, [22 x [169 x i32]], %struct.WinnerModeStats*, i32, i8, %struct.inter_modes_info*, i8, [64 x %struct.COMP_RD_STATS], i32, i32, %struct.intrabc_hash_info, i32, %struct.MB_MODE_INFO*, %struct.PixelLevelGradientInfo*, [2 x i8], [8 x i32], %struct.FullMvLimits, %struct.TxfmSearchParams, %struct.TxfmSearchInfo, [2 x i8], i32, [8 x i32] }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [29 x [4 x %struct.candidate_mv]], [29 x [4 x i16]], [29 x i8], [8 x %union.int_mv], [29 x i16] }
%struct.MB_MODE_INFO_EXT_FRAME = type { [4 x %struct.candidate_mv], [4 x i16], i8, [8 x %union.int_mv], i16, [2 x i16] }
%struct.ModeCosts = type { [20 x [10 x i32]], [4 x [13 x i32]], [13 x [13 x [13 x i32]]], [2 x [13 x [14 x i32]]], [22 x [2 x i32]], [5 x i32], [8 x [7 x i32]], [8 x [2 x [16 x i32]]], [2 x i32], [7 x [7 x i32]], [7 x [7 x i32]], [7 x [5 x [8 x i32]]], [7 x [5 x [8 x i32]]], [7 x [3 x [2 x i32]]], [2 x [2 x i32]], [3 x [2 x i32]], [6 x [2 x i32]], [2 x [2 x i32]], [6 x [2 x i32]], [3 x [2 x i32]], [3 x [6 x [2 x i32]]], [5 x [2 x i32]], [5 x [3 x i32]], [3 x [3 x [3 x i32]]], [3 x [3 x [2 x i32]]], [3 x [2 x [2 x i32]]], [4 x [2 x i32]], [8 x [8 x i32]], [22 x [2 x i32]], [22 x [16 x i32]], [4 x [2 x i32]], [22 x [2 x i32]], [4 x [4 x i32]], [6 x [2 x i32]], [6 x [2 x i32]], [22 x [3 x i32]], [22 x [2 x i32]], [16 x [3 x i32]], [3 x [2 x i32]], [4 x [3 x [5 x i32]]], [21 x [2 x i32]], [4 x [4 x [16 x i32]]], [3 x [4 x [13 x [16 x i32]]]], [3 x i32], [2 x i32], [2 x i32] }
%struct.MvCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [2 x i32*], [2 x i32*], i32** }
%struct.IntraBCMVCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x i32*] }
%struct.CoeffCosts = type { [5 x [2 x %struct.LV_MAP_COEFF_COST]], [7 x [2 x %struct.LV_MAP_EOB_COST]] }
%struct.LV_MAP_COEFF_COST = type { [13 x [2 x i32]], [4 x [3 x i32]], [42 x [8 x i32]], [9 x [2 x i32]], [3 x [2 x i32]], [21 x [26 x i32]] }
%struct.LV_MAP_EOB_COST = type { [2 x [11 x i32]] }
%struct.SuperBlockEnc = type { i8, i8, i32, [64 x i64], [64 x i64], [64 x [7 x %union.int_mv]], i32 }
%struct.CONTENT_STATE_SB = type { i32, i32, i32 }
%struct.WARP_SAMPLE_INFO = type { i32, [16 x i32], [16 x i32] }
%struct.PartitionSearchInfo = type { [105 x i8] }
%struct.WinnerModeStats = type { %struct.MB_MODE_INFO, %struct.RD_STATS, i64, i32, i32, [16384 x i8], i8 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.RD_STATS = type { i32, i64, i64, i64, i32, i32 }
%struct.COMP_RD_STATS = type { [4 x i32], [4 x i64], [4 x i32], [4 x i64], [4 x i32], [2 x %union.int_mv], [2 x i8], i8, %union.int_interpfilters, i32, [2 x i32], %struct.INTERINTER_COMPOUND_DATA }
%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.FullMvLimits = type { i32, i32, i32, i32 }
%struct.TxfmSearchParams = type { i32, i32, i32, [2 x i32], i32, i8, i32, i32, i8, i32 }
%struct.TxfmSearchInfo = type { i32, [1024 x i8], [1024 x i8], %struct.TxbRdRecords*, i32 }
%struct.TxbRdRecords = type { %struct.MB_RD_RECORD, [256 x %struct.TXB_RD_RECORD], [64 x %struct.TXB_RD_RECORD], [16 x %struct.TXB_RD_RECORD], [4 x %struct.TXB_RD_RECORD], %struct.TXB_RD_RECORD }
%struct.MB_RD_RECORD = type { [8 x %struct.MB_RD_INFO], i32, i32, %struct._CRC32C }
%struct.MB_RD_INFO = type { i8, [16 x i8], [1024 x i8], [1024 x i8], %struct.RD_STATS, i32 }
%struct._CRC32C = type { [8 x [256 x i32]] }
%struct.TXB_RD_RECORD = type { [256 x i32], [256 x %struct.TXB_RD_INFO], i32, i32 }
%struct.TXB_RD_INFO = type { i64, i64, i32, i16, i8, i16, i8, i8, i8, i8 }
%struct.RD_COUNTS = type { [3 x i64], i32, i32, [19 x [16 x i32]], [22 x [2 x i32]], [2 x i32] }
%struct.PC_TREE_SHARED_BUFFERS = type { [3 x i32*], [3 x i32*], [3 x i32*] }
%struct.SIMPLE_MOTION_DATA_TREE = type { i8, i8, [4 x %struct.SIMPLE_MOTION_DATA_TREE*], [8 x %struct.fullpel_mv], [2 x i32], [8 x i32], i32, i32 }
%struct.fullpel_mv = type { i16, i16 }
%struct.inter_modes_info = type { i32, [4 x i8], [1024 x %struct.MB_MODE_INFO], [1024 x i32], [1024 x i64], [1024 x i64], [1024 x %struct.RdIdxPair], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS] }
%struct.RdIdxPair = type { i32, i64 }
%struct.OBMCBuffer = type { i32*, i32*, i8*, i8* }
%struct.PALETTE_BUFFER = type { [4096 x i8], [8192 x i32] }
%struct.CompoundTypeRdBuffers = type { i8*, i8*, i16*, i16*, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.VP64x64 = type { %struct.VPVariance, [4 x %struct.VP32x32] }
%struct.VPVariance = type { %struct.VPartVar, [2 x %struct.VPartVar], [2 x %struct.VPartVar] }
%struct.VPartVar = type { i32, i32, i32, i32 }
%struct.VP32x32 = type { %struct.VPVariance, [4 x %struct.VP16x16] }
%struct.VP16x16 = type { %struct.VPVariance, [4 x %struct.VP8x8] }
%struct.VP8x8 = type { %struct.VPVariance, [4 x %struct.VP4x4] }
%struct.VP4x4 = type { %struct.VPVariance, [4 x %struct.VPartVar] }
%struct.PICK_MODE_CONTEXT = type { %struct.MB_MODE_INFO, %struct.MB_MODE_INFO_EXT_FRAME, [2 x i8*], i8*, [3 x i32*], [3 x i32*], [3 x i32*], [3 x i16*], [3 x i8*], i8*, i32, i32, i32, i32, i32, %struct.RD_STATS, i32, i64, i64, i64, i8, %union.int_mv, i8, i8, i32 }
%struct.TemporalFilterData = type { %struct.FRAME_DIFF, %struct.MB_MODE_INFO*, i32*, i16*, i8* }
%struct.FRAME_DIFF = type { i64, i64 }
%struct.TplTxfmStats = type { [256 x double], i32 }
%struct.PixelLevelGradientInfo = type { i16, i8, i8 }
%struct.FRAME_COUNTS = type { [16 x [3 x i32]] }
%struct.MBMIExtFrameBufferInfo = type { %struct.MB_MODE_INFO_EXT_FRAME*, i32, i32 }
%struct.CB_COEFF_BUFFER = type { [3 x i32*], [3 x i16*], [3 x i8*] }
%struct.CoeffBufferPool = type { i32*, i16*, i8* }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1EncoderConfig = type { %struct.InputCfg, %struct.FrameDimensionCfg, %struct.AlgoCfg, %struct.KeyFrameCfg, %struct.RateControlCfg, %struct.QuantizationCfg, %struct.ResizeCfg, %struct.SuperResCfg, %struct.aom_fixed_buf, %struct.ToolCfg, %struct.GFConfig, %struct.TileConfig, %struct.TuneCfg, %struct.ColorCfg, %struct.DecoderModelCfg, %struct.RefFrameCfg, %struct.UnitTestCfg, %struct.MotionModeCfg, %struct.IntraModeCfg, %struct.TxfmSizeTypeCfg, %struct.CompoundTypeCfg, %struct.PartitionCfg, %struct.CostUpdateFreq, float, i32, i32, i32, i32, i32, i32, i32, [32 x i8], i8, i32, i8, i8, i8, i8, i8* }
%struct.InputCfg = type { double, i32, i32, i32, i32 }
%struct.FrameDimensionCfg = type { i32, i32, i32, i32, i32, i32 }
%struct.AlgoCfg = type { i32, i32, i32, i32, i8, i8, i8 }
%struct.KeyFrameCfg = type { i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.RateControlCfg = type { i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QuantizationCfg = type { [5 x double], i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.ResizeCfg = type { i8, i8, i8 }
%struct.SuperResCfg = type { i32, i32, i8, i8, i32, i8 }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.ToolCfg = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GFConfig = type { i32, i32, i32, i32, i32, i8, i8 }
%struct.TileConfig = type { i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i8, i8, i8 }
%struct.TuneCfg = type { i8*, i8*, i32, i32, i32 }
%struct.ColorCfg = type { i32, i32, i32, i32, i32 }
%struct.DecoderModelCfg = type { %struct.aom_timing, i32, i8, i8, i8 }
%struct.RefFrameCfg = type { i32, i8, i8 }
%struct.UnitTestCfg = type { i32, i32 }
%struct.MotionModeCfg = type { i8, i8, i8 }
%struct.IntraModeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.TxfmSizeTypeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.CompoundTypeCfg = type { i8, i8, i8, i8, i8, i8 }
%struct.PartitionCfg = type { i8, i8, i8, i8, i8 }
%struct.CostUpdateFreq = type { i32, i32, i32, i32 }
%struct.TemporalFilterCtx = type { [35 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors, [3 x double], i32, i32, i32, i32, i32 }
%struct.ForceIntegerMVInfo = type { [32 x double], i32, i32 }
%struct.RefreshFrameFlagsInfo = type { i8, i8, i8 }
%struct.ExternalFlags = type { i32, %struct.ExtRefreshFrameFlagsInfo, i8, i8, i8, i8, i8, i8 }
%struct.ExtRefreshFrameFlagsInfo = type { i8, i8, i8, i8, i8, i8 }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.RD_OPT = type { [169 x i32], [8 x [22 x [169 x i32]]], i32, double }
%struct.CODING_CONTEXT = type { %struct.loopfilter, %struct.CdefInfo, %struct.yv12_buffer_config, %struct.RATE_CONTROL, %struct.MV_STATS }
%struct.GlobalMotionInfo = type { i8, [8 x %struct.yv12_buffer_config*], i8*, [2 x i32], [2 x [7 x %struct.FrameDistPair]], i32, i32, i32, [8192 x i32] }
%struct.FrameDistPair = type { i32, i8 }
%struct.WinnerModeParams = type { [3 x [2 x i32]], [3 x i8], [3 x i32], [3 x i32], [3 x i32], [3 x i32] }
%struct.TimeStamps = type { i64, i64, i64 }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, i32, [4 x i32], i32, [4 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [4 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32 }
%struct.SPEED_FEATURES = type { %struct.HIGH_LEVEL_SPEED_FEATURES, %struct.FIRST_PASS_SPEED_FEATURES, %struct.TPL_SPEED_FEATURES, %struct.GLOBAL_MOTION_SPEED_FEATURES, %struct.PARTITION_SPEED_FEATURES, %struct.MV_SPEED_FEATURES, %struct.INTER_MODE_SPEED_FEATURES, %struct.INTERP_FILTER_SPEED_FEATURES, %struct.INTRA_MODE_SPEED_FEATURES, %struct.TX_SPEED_FEATURES, %struct.RD_CALC_SPEED_FEATURES, %struct.WINNER_MODE_SPEED_FEATURES, %struct.LOOP_FILTER_SPEED_FEATURES, %struct.REAL_TIME_SPEED_FEATURES }
%struct.HIGH_LEVEL_SPEED_FEATURES = type { i32, i8, i32, i8, i32, i8, i32, i32 }
%struct.FIRST_PASS_SPEED_FEATURES = type { i32, i32 }
%struct.TPL_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32 }
%struct.GLOBAL_MOTION_SPEED_FEATURES = type { i8, i32, i32 }
%struct.PARTITION_SPEED_FEATURES = type { i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i64, i32, [5 x i32], i32, i32, i32, i32, i32, i32, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i8, i32, i32, i8, i32, i8, i8, i8, i32, [4 x %struct.MESH_PATTERN], [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.INTER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERP_FILTER_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32 }
%struct.INTRA_MODE_SPEED_FEATURES = type { [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_SPEED_FEATURES = type { i32, i32, i32, i32, i32, %struct.TX_TYPE_SEARCH, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_TYPE_SEARCH = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.RD_CALC_SPEED_FEATURES = type { i32, i32, i32, i8, i32, i32 }
%struct.WINNER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i32, i32 }
%struct.LOOP_FILTER_SPEED_FEATURES = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.REAL_TIME_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.MotionVectorSearchParams = type { i32, i32, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, [3 x [7 x %struct.search_site_config]] }
%struct.SUBPEL_MOTION_SEARCH_PARAMS = type { i32, i32*, i8, i32, %struct.SubpelMvLimits, %struct.MV_COST_PARAMS, %struct.SUBPEL_SEARCH_VAR_PARAMS }
%struct.SubpelMvLimits = type { i32, i32, i32, i32 }
%struct.MV_COST_PARAMS = type { %struct.mv*, %struct.fullpel_mv, i8, i32*, [2 x i32*], i32, i32 }
%struct.SUBPEL_SEARCH_VAR_PARAMS = type { %struct.aom_variance_vtable*, i8, %struct.MSBuffers, i32, i32 }
%struct.MSBuffers = type { %struct.buf_2d*, %struct.buf_2d*, i8*, i8*, i32, i32, i32*, i32* }
%struct.mv = type { i16, i16 }
%struct.search_site_config = type { [22 x [17 x %struct.search_site]], i32, [22 x i32], [22 x i32], i32 }
%struct.search_site = type { %struct.fullpel_mv, i32 }
%struct.EncSegmentationInfo = type { i8*, i8 }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, [3 x i32], double, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.RefBufferStack = type { [16 x i32], i32, [16 x i32], i32, [16 x i32], i32 }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FRAME_INDEX_SET = type { i32 }
%struct.InitialDimensions = type { i32, i32 }
%struct.ResizePendingParams = type { i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [8 x i8], %struct.frame_contexts, %struct.frame_contexts*, i8, [22 x %struct.InterModeRdModel], %struct.AV1EncRowMultiThreadSync, %struct.mv }
%struct.InterModeRdModel = type { i32, double, double, double, double, double, double, double, i32, double, double, double, double, double }
%struct.AV1EncRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32, i32 }
%struct.TokenInfo = type { [64 x [64 x %struct.TokenExtra*]], [64 x [64 x %struct.TokenList*]] }
%struct.TokenExtra = type { i8 }
%struct.TokenList = type { %struct.TokenExtra*, i32 }
%struct.VarBasedPartitionInfo = type { [5 x i64], i64 }
%struct.FrameProbInfo = type { [7 x [22 x i32]], [7 x i32], [7 x [19 x [16 x i32]]], [7 x [16 x [3 x i32]]] }
%struct.MultiThreadInfo = type { i32, [10 x i32], i32, i32, %struct.AVxWorker*, %struct.EncWorkerData*, i8, %struct.AV1EncRowMultiThreadInfo, %struct.AV1TplRowMultiThreadInfo, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1EncPackBSSync, %struct.AV1GlobalMotionSync, %struct.AV1TemporalFilterSync, %struct.AV1CdefSyncData, %struct.AV1CdefWorker* }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.EncWorkerData = type opaque
%struct.AV1EncRowMultiThreadInfo = type { i32, i32, i32, i32, [64 x i32], %union.pthread_mutex_t*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32)*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1TplRowMultiThreadInfo = type { void (%struct.AV1TplRowMultiThreadSync*, i32, i32)*, void (%struct.AV1TplRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncPackBSSync = type { %union.pthread_mutex_t*, [512 x %struct.PackBSTileOrder], i32 }
%struct.PackBSTileOrder = type { i16, i32 }
%struct.AV1GlobalMotionSync = type { %struct.JobInfo, %struct.GlobalMotionThreadData*, %union.pthread_mutex_t*, i32, i32, i8 }
%struct.JobInfo = type { [64 x i8], [2 x i8], [2 x i8] }
%struct.GlobalMotionThreadData = type { [1 x %struct.MotionModel], i8* }
%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.AV1TemporalFilterSync = type { %union.pthread_mutex_t*, i32 }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.aom_film_grain_table_t = type { %struct.aom_film_grain_table_entry_t*, %struct.aom_film_grain_table_entry_t* }
%struct.aom_film_grain_table_entry_t = type { %struct.aom_film_grain_t, i64, i64, %struct.aom_film_grain_table_entry_t* }
%struct.aom_denoise_and_model_t = type opaque
%struct.InterpSearchFlags = type { i32, i16 }
%struct.RefFrameDistanceInfo = type { [7 x i32], i8, i8 }
%struct.SVC = type { i32, i32, i32, i32, i32, i32, i32, i32, [7 x i32], [7 x i32], [8 x i32], double, i32, [8 x i32], [8 x i8], i32, i32, [8 x i32], [8 x i32], i32, i32, [32 x %struct.LAYER_CONTEXT], [4 x i8], [4 x i32], i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, %struct.PRIMARY_RATE_CONTROL, i32, i64, i32, i32, i64, i64, double, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i8, i8, i32, i32 }
%struct.MV_STATS = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FirstPassData = type { %struct.FRAME_STATS*, i32* }
%struct.FRAME_STATS = type { i64, i64, i64, i64, i64, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.av1_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }

@av1_quantize_fp = external local_unnamed_addr global void (i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)*, align 8
@av1_quantize_fp_32x32 = external local_unnamed_addr global void (i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)*, align 8
@av1_quantize_fp_64x64 = external local_unnamed_addr global void (i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)*, align 8
@aom_quantize_b_adaptive = external local_unnamed_addr global void (i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)*, align 8
@aom_quantize_b = external local_unnamed_addr global void (i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)*, align 8
@aom_quantize_b_32x32 = external local_unnamed_addr global void (i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)*, align 8
@aom_quantize_b_64x64 = external local_unnamed_addr global void (i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)*, align 8
@quantizer_to_qindex = internal unnamed_addr constant [64 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60, i32 64, i32 68, i32 72, i32 76, i32 80, i32 84, i32 88, i32 92, i32 96, i32 100, i32 104, i32 108, i32 112, i32 116, i32 120, i32 124, i32 128, i32 132, i32 136, i32 140, i32 144, i32 148, i32 152, i32 156, i32 160, i32 164, i32 168, i32 172, i32 176, i32 180, i32 184, i32 188, i32 192, i32 196, i32 200, i32 204, i32 208, i32 212, i32 216, i32 220, i32 224, i32 228, i32 232, i32 236, i32 240, i32 244, i32 249, i32 255], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_quantize_skip(i64, i32* nocapture, i32* nocapture, i16* nocapture) local_unnamed_addr #0 {
  %5 = bitcast i32* %1 to i8*
  %6 = shl i64 %0, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 %6, i1 false)
  %7 = bitcast i32* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 %6, i1 false)
  store i16 0, i16* %3, align 2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_quantize_fp_no_qmatrix(i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i32, i16* nocapture readonly, i32, i32* nocapture readonly, i32* nocapture, i32* nocapture) local_unnamed_addr #0 {
  %10 = alloca [2 x i32], align 4
  %11 = bitcast i32* %7 to i8*
  %12 = sext i32 %5 to i64
  %13 = shl nsw i64 %12, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %11, i8 0, i64 %13, i1 false)
  %14 = bitcast i32* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %14, i8 0, i64 %13, i1 false)
  %15 = bitcast [2 x i32]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #5
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 0
  %17 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 1
  %18 = load i16, i16* %2, align 2
  %19 = sext i16 %18 to i32
  %20 = shl i32 1, %3
  %21 = ashr i32 %20, 1
  %22 = add nsw i32 %21, %19
  %23 = ashr i32 %22, %3
  store i32 %23, i32* %16, align 4
  %24 = getelementptr inbounds i16, i16* %2, i64 1
  %25 = load i16, i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = add nsw i32 %21, %26
  %28 = ashr i32 %27, %3
  store i32 %28, i32* %17, align 4
  %29 = icmp sgt i32 %5, 0
  br i1 %29, label %30, label %35

30:                                               ; preds = %9
  %31 = add nsw i32 %3, 1
  %32 = zext i32 %31 to i64
  %33 = sub nsw i32 16, %3
  %34 = zext i32 %33 to i64
  br label %37

35:                                               ; preds = %87, %9
  %36 = phi i32 [ 0, %9 ], [ %89, %87 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #5
  ret i32 %36

37:                                               ; preds = %30, %87
  %38 = phi i32 [ 0, %30 ], [ %89, %87 ]
  %39 = phi i32 [ 0, %30 ], [ %88, %87 ]
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds i16, i16* %4, i64 %40
  %42 = load i16, i16* %41, align 2
  %43 = icmp ne i16 %42, 0
  %44 = zext i1 %43 to i64
  %45 = getelementptr inbounds i16, i16* %1, i64 %44
  %46 = load i16, i16* %45, align 2
  %47 = sext i16 %42 to i64
  %48 = getelementptr inbounds i32, i32* %6, i64 %47
  %49 = load i32, i32* %48, align 4
  %50 = ashr i32 %49, 31
  %51 = xor i32 %50, %49
  %52 = sub nsw i32 %51, %50
  %53 = sext i32 %52 to i64
  %54 = shl i64 %53, %32
  %55 = sext i16 %46 to i64
  %56 = icmp slt i64 %54, %55
  br i1 %56, label %85, label %57

57:                                               ; preds = %37
  %58 = getelementptr inbounds [2 x i32], [2 x i32]* %10, i64 0, i64 %44
  %59 = load i32, i32* %58, align 4
  %60 = sext i32 %59 to i64
  %61 = add nsw i64 %60, %53
  %62 = icmp slt i64 %61, 32767
  %63 = select i1 %62, i64 %61, i64 32767
  %64 = icmp sgt i64 %63, -32768
  %65 = select i1 %64, i64 %63, i64 -32768
  %66 = getelementptr inbounds i16, i16* %0, i64 %44
  %67 = load i16, i16* %66, align 2
  %68 = sext i16 %67 to i64
  %69 = mul nsw i64 %65, %68
  %70 = ashr i64 %69, %34
  %71 = trunc i64 %70 to i32
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %85, label %73

73:                                               ; preds = %57
  %74 = xor i32 %50, %71
  %75 = sub nsw i32 %74, %50
  %76 = getelementptr inbounds i32, i32* %7, i64 %47
  store i32 %75, i32* %76, align 4
  %77 = load i16, i16* %45, align 2
  %78 = sext i16 %77 to i32
  %79 = mul nsw i32 %78, %71
  %80 = ashr i32 %79, %3
  %81 = xor i32 %80, %50
  %82 = sub nsw i32 %81, %50
  %83 = getelementptr inbounds i32, i32* %8, i64 %47
  store i32 %82, i32* %83, align 4
  %84 = add nuw nsw i32 %39, 1
  br label %87

85:                                               ; preds = %57, %37
  %86 = add nuw nsw i32 %39, 1
  br label %87

87:                                               ; preds = %73, %85
  %88 = phi i32 [ %86, %85 ], [ %84, %73 ]
  %89 = phi i32 [ %38, %85 ], [ %84, %73 ]
  %90 = icmp slt i32 %88, %5
  br i1 %90, label %37, label %35
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_quantize_fp_c(i32* nocapture readonly, i64, i16* nocapture readnone, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readnone, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readonly, i16* nocapture readnone) local_unnamed_addr #0 {
  %13 = alloca [2 x i32], align 4
  %14 = getelementptr inbounds i16, i16* %3, i64 1
  %15 = bitcast i32* %6 to i8*
  %16 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %15, i8 0, i64 %16, i1 false) #5
  %17 = bitcast i32* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %16, i1 false) #5
  %18 = trunc i64 %1 to i32
  %19 = shl i64 %1, 32
  %20 = ashr exact i64 %19, 30
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %15, i8 0, i64 %20, i1 false) #5
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %20, i1 false) #5
  %21 = bitcast [2 x i32]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #5
  %22 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 0
  %23 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 1
  %24 = load i16, i16* %3, align 2
  %25 = sext i16 %24 to i32
  store i32 %25, i32* %22, align 4
  %26 = load i16, i16* %14, align 2
  %27 = sext i16 %26 to i32
  store i32 %27, i32* %23, align 4
  %28 = icmp sgt i32 %18, 0
  br i1 %28, label %29, label %82

29:                                               ; preds = %12, %78
  %30 = phi i32 [ %80, %78 ], [ 0, %12 ]
  %31 = phi i32 [ %79, %78 ], [ 0, %12 ]
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds i16, i16* %10, i64 %32
  %34 = load i16, i16* %33, align 2
  %35 = icmp ne i16 %34, 0
  %36 = zext i1 %35 to i64
  %37 = getelementptr inbounds i16, i16* %8, i64 %36
  %38 = load i16, i16* %37, align 2
  %39 = sext i16 %34 to i64
  %40 = getelementptr inbounds i32, i32* %0, i64 %39
  %41 = load i32, i32* %40, align 4
  %42 = ashr i32 %41, 31
  %43 = xor i32 %42, %41
  %44 = sub nsw i32 %43, %42
  %45 = sext i32 %44 to i64
  %46 = shl nsw i64 %45, 1
  %47 = sext i16 %38 to i64
  %48 = icmp slt i64 %46, %47
  br i1 %48, label %76, label %49

49:                                               ; preds = %29
  %50 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 %36
  %51 = load i32, i32* %50, align 4
  %52 = sext i32 %51 to i64
  %53 = add nsw i64 %52, %45
  %54 = icmp slt i64 %53, 32767
  %55 = select i1 %54, i64 %53, i64 32767
  %56 = icmp sgt i64 %55, -32768
  %57 = select i1 %56, i64 %55, i64 -32768
  %58 = getelementptr inbounds i16, i16* %4, i64 %36
  %59 = load i16, i16* %58, align 2
  %60 = sext i16 %59 to i64
  %61 = mul nsw i64 %57, %60
  %62 = ashr i64 %61, 16
  %63 = trunc i64 %62 to i32
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %76, label %65

65:                                               ; preds = %49
  %66 = xor i32 %42, %63
  %67 = sub nsw i32 %66, %42
  %68 = getelementptr inbounds i32, i32* %6, i64 %39
  store i32 %67, i32* %68, align 4
  %69 = load i16, i16* %37, align 2
  %70 = sext i16 %69 to i32
  %71 = mul nsw i32 %70, %63
  %72 = xor i32 %71, %42
  %73 = sub nsw i32 %72, %42
  %74 = getelementptr inbounds i32, i32* %7, i64 %39
  store i32 %73, i32* %74, align 4
  %75 = add nuw nsw i32 %31, 1
  br label %78

76:                                               ; preds = %49, %29
  %77 = add nuw nsw i32 %31, 1
  br label %78

78:                                               ; preds = %76, %65
  %79 = phi i32 [ %77, %76 ], [ %75, %65 ]
  %80 = phi i32 [ %30, %76 ], [ %75, %65 ]
  %81 = icmp slt i32 %79, %18
  br i1 %81, label %29, label %82

82:                                               ; preds = %78, %12
  %83 = phi i32 [ 0, %12 ], [ %80, %78 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #5
  %84 = trunc i32 %83 to i16
  store i16 %84, i16* %9, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @quantize_fp_helper_c(i32* nocapture readonly, i64, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readonly, i8* readonly, i8* readonly, i32) unnamed_addr #0 {
  %13 = alloca [2 x i32], align 4
  %14 = alloca [2 x i32], align 4
  %15 = bitcast [2 x i32]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #5
  %16 = getelementptr inbounds [2 x i32], [2 x i32]* %14, i64 0, i64 0
  %17 = getelementptr inbounds [2 x i32], [2 x i32]* %14, i64 0, i64 1
  %18 = load i16, i16* %2, align 2
  %19 = sext i16 %18 to i32
  %20 = shl i32 1, %11
  %21 = ashr i32 %20, 1
  %22 = add nsw i32 %21, %19
  %23 = ashr i32 %22, %11
  store i32 %23, i32* %16, align 4
  %24 = getelementptr inbounds i16, i16* %2, i64 1
  %25 = load i16, i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = add nsw i32 %21, %26
  %28 = ashr i32 %27, %11
  store i32 %28, i32* %17, align 4
  %29 = bitcast i32* %4 to i8*
  %30 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %29, i8 0, i64 %30, i1 false)
  %31 = bitcast i32* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %31, i8 0, i64 %30, i1 false)
  %32 = icmp eq i8* %9, null
  %33 = icmp eq i8* %10, null
  %34 = and i1 %32, %33
  br i1 %34, label %41, label %35

35:                                               ; preds = %12
  %36 = icmp sgt i64 %1, 0
  br i1 %36, label %37, label %186

37:                                               ; preds = %35
  %38 = sub i32 4, %11
  %39 = sub i32 21, %11
  %40 = zext i32 %39 to i64
  br label %119

41:                                               ; preds = %12
  %42 = trunc i64 %1 to i32
  %43 = shl i64 %1, 32
  %44 = ashr exact i64 %43, 30
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %29, i8 0, i64 %44, i1 false) #5
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %31, i8 0, i64 %44, i1 false) #5
  %45 = bitcast [2 x i32]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #5
  %46 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 0
  %47 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 1
  %48 = load i16, i16* %2, align 2
  %49 = sext i16 %48 to i32
  %50 = add nsw i32 %21, %49
  %51 = ashr i32 %50, %11
  store i32 %51, i32* %46, align 4
  %52 = load i16, i16* %24, align 2
  %53 = sext i16 %52 to i32
  %54 = add nsw i32 %21, %53
  %55 = ashr i32 %54, %11
  store i32 %55, i32* %47, align 4
  %56 = icmp sgt i32 %42, 0
  br i1 %56, label %57, label %116

57:                                               ; preds = %41
  %58 = add nsw i32 %11, 1
  %59 = zext i32 %58 to i64
  %60 = sub nsw i32 16, %11
  %61 = zext i32 %60 to i64
  br label %62

62:                                               ; preds = %112, %57
  %63 = phi i32 [ 0, %57 ], [ %114, %112 ]
  %64 = phi i32 [ 0, %57 ], [ %113, %112 ]
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds i16, i16* %8, i64 %65
  %67 = load i16, i16* %66, align 2
  %68 = icmp ne i16 %67, 0
  %69 = zext i1 %68 to i64
  %70 = getelementptr inbounds i16, i16* %6, i64 %69
  %71 = load i16, i16* %70, align 2
  %72 = sext i16 %67 to i64
  %73 = getelementptr inbounds i32, i32* %0, i64 %72
  %74 = load i32, i32* %73, align 4
  %75 = ashr i32 %74, 31
  %76 = xor i32 %75, %74
  %77 = sub nsw i32 %76, %75
  %78 = sext i32 %77 to i64
  %79 = shl i64 %78, %59
  %80 = sext i16 %71 to i64
  %81 = icmp slt i64 %79, %80
  br i1 %81, label %110, label %82

82:                                               ; preds = %62
  %83 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 %69
  %84 = load i32, i32* %83, align 4
  %85 = sext i32 %84 to i64
  %86 = add nsw i64 %85, %78
  %87 = icmp slt i64 %86, 32767
  %88 = select i1 %87, i64 %86, i64 32767
  %89 = icmp sgt i64 %88, -32768
  %90 = select i1 %89, i64 %88, i64 -32768
  %91 = getelementptr inbounds i16, i16* %3, i64 %69
  %92 = load i16, i16* %91, align 2
  %93 = sext i16 %92 to i64
  %94 = mul nsw i64 %90, %93
  %95 = ashr i64 %94, %61
  %96 = trunc i64 %95 to i32
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %110, label %98

98:                                               ; preds = %82
  %99 = xor i32 %75, %96
  %100 = sub nsw i32 %99, %75
  %101 = getelementptr inbounds i32, i32* %4, i64 %72
  store i32 %100, i32* %101, align 4
  %102 = load i16, i16* %70, align 2
  %103 = sext i16 %102 to i32
  %104 = mul nsw i32 %103, %96
  %105 = ashr i32 %104, %11
  %106 = xor i32 %105, %75
  %107 = sub nsw i32 %106, %75
  %108 = getelementptr inbounds i32, i32* %5, i64 %72
  store i32 %107, i32* %108, align 4
  %109 = add nuw nsw i32 %64, 1
  br label %112

110:                                              ; preds = %82, %62
  %111 = add nuw nsw i32 %64, 1
  br label %112

112:                                              ; preds = %110, %98
  %113 = phi i32 [ %111, %110 ], [ %109, %98 ]
  %114 = phi i32 [ %63, %110 ], [ %109, %98 ]
  %115 = icmp slt i32 %113, %42
  br i1 %115, label %62, label %116

116:                                              ; preds = %112, %41
  %117 = phi i32 [ 0, %41 ], [ %114, %112 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #5
  %118 = trunc i32 %117 to i16
  br label %190

119:                                              ; preds = %182, %37
  %120 = phi i64 [ 0, %37 ], [ %184, %182 ]
  %121 = phi i32 [ -1, %37 ], [ %183, %182 ]
  %122 = getelementptr inbounds i16, i16* %8, i64 %120
  %123 = load i16, i16* %122, align 2
  %124 = sext i16 %123 to i64
  %125 = getelementptr inbounds i32, i32* %0, i64 %124
  %126 = load i32, i32* %125, align 4
  br i1 %32, label %130, label %127

127:                                              ; preds = %119
  %128 = getelementptr inbounds i8, i8* %9, i64 %124
  %129 = load i8, i8* %128, align 1
  br label %130

130:                                              ; preds = %119, %127
  %131 = phi i8 [ %129, %127 ], [ 32, %119 ]
  br i1 %33, label %135, label %132

132:                                              ; preds = %130
  %133 = getelementptr inbounds i8, i8* %10, i64 %124
  %134 = load i8, i8* %133, align 1
  br label %135

135:                                              ; preds = %130, %132
  %136 = phi i8 [ %134, %132 ], [ 32, %130 ]
  %137 = icmp ne i16 %123, 0
  %138 = zext i1 %137 to i64
  %139 = getelementptr inbounds i16, i16* %6, i64 %138
  %140 = load i16, i16* %139, align 2
  %141 = sext i16 %140 to i32
  %142 = ashr i32 %126, 31
  %143 = xor i32 %142, %126
  %144 = sub nsw i32 %143, %142
  %145 = sext i32 %144 to i64
  %146 = zext i8 %131 to i64
  %147 = mul nsw i64 %146, %145
  %148 = shl i32 %141, %38
  %149 = sext i32 %148 to i64
  %150 = icmp slt i64 %147, %149
  br i1 %150, label %181, label %151

151:                                              ; preds = %135
  %152 = zext i8 %136 to i32
  %153 = mul nsw i32 %141, %152
  %154 = add nsw i32 %153, 16
  %155 = ashr i32 %154, 5
  %156 = getelementptr inbounds [2 x i32], [2 x i32]* %14, i64 0, i64 %138
  %157 = load i32, i32* %156, align 4
  %158 = sext i32 %157 to i64
  %159 = add nsw i64 %158, %145
  %160 = icmp slt i64 %159, 32767
  %161 = select i1 %160, i64 %159, i64 32767
  %162 = icmp sgt i64 %161, -32768
  %163 = select i1 %162, i64 %161, i64 -32768
  %164 = getelementptr inbounds i16, i16* %3, i64 %138
  %165 = load i16, i16* %164, align 2
  %166 = sext i16 %165 to i64
  %167 = mul nsw i64 %166, %146
  %168 = mul nsw i64 %167, %163
  %169 = ashr i64 %168, %40
  %170 = trunc i64 %169 to i32
  %171 = xor i32 %142, %170
  %172 = sub nsw i32 %171, %142
  %173 = getelementptr inbounds i32, i32* %4, i64 %124
  store i32 %172, i32* %173, align 4
  %174 = mul nsw i32 %155, %170
  %175 = ashr i32 %174, %11
  %176 = xor i32 %175, %142
  %177 = sub nsw i32 %176, %142
  %178 = getelementptr inbounds i32, i32* %5, i64 %124
  store i32 %177, i32* %178, align 4
  %179 = icmp eq i32 %170, 0
  %180 = trunc i64 %120 to i32
  br i1 %179, label %181, label %182

181:                                              ; preds = %135, %151
  br label %182

182:                                              ; preds = %151, %181
  %183 = phi i32 [ %121, %181 ], [ %180, %151 ]
  %184 = add nuw nsw i64 %120, 1
  %185 = icmp eq i64 %184, %1
  br i1 %185, label %186, label %119

186:                                              ; preds = %182, %35
  %187 = phi i32 [ -1, %35 ], [ %183, %182 ]
  %188 = trunc i32 %187 to i16
  %189 = add i16 %188, 1
  br label %190

190:                                              ; preds = %186, %116
  %191 = phi i16 [ %189, %186 ], [ %118, %116 ]
  store i16 %191, i16* %7, align 2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_quantize_lp_c(i16* nocapture readonly, i64, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture, i16* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readonly) local_unnamed_addr #0 {
  %10 = bitcast i16* %4 to i8*
  %11 = shl i64 %1, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %10, i8 0, i64 %11, i1 false)
  %12 = bitcast i16* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %12, i8 0, i64 %11, i1 false)
  %13 = icmp sgt i64 %1, 0
  br i1 %13, label %19, label %17

14:                                               ; preds = %19
  %15 = trunc i32 %57 to i16
  %16 = add i16 %15, 1
  br label %17

17:                                               ; preds = %14, %9
  %18 = phi i16 [ 0, %9 ], [ %16, %14 ]
  store i16 %18, i16* %7, align 2
  ret void

19:                                               ; preds = %9, %19
  %20 = phi i64 [ %58, %19 ], [ 0, %9 ]
  %21 = phi i32 [ %57, %19 ], [ -1, %9 ]
  %22 = getelementptr inbounds i16, i16* %8, i64 %20
  %23 = load i16, i16* %22, align 2
  %24 = sext i16 %23 to i64
  %25 = getelementptr inbounds i16, i16* %0, i64 %24
  %26 = load i16, i16* %25, align 2
  %27 = ashr i16 %26, 15
  %28 = sext i16 %27 to i32
  %29 = xor i16 %27, %26
  %30 = sext i16 %29 to i32
  %31 = sub nsw i32 %30, %28
  %32 = icmp ne i16 %23, 0
  %33 = zext i1 %32 to i64
  %34 = getelementptr inbounds i16, i16* %2, i64 %33
  %35 = load i16, i16* %34, align 2
  %36 = sext i16 %35 to i32
  %37 = add nsw i32 %31, %36
  %38 = icmp slt i32 %37, 32767
  %39 = select i1 %38, i32 %37, i32 32767
  %40 = icmp sgt i32 %39, -32768
  %41 = select i1 %40, i32 %39, i32 -32768
  %42 = getelementptr inbounds i16, i16* %3, i64 %33
  %43 = load i16, i16* %42, align 2
  %44 = sext i16 %43 to i32
  %45 = mul nsw i32 %41, %44
  %46 = ashr i32 %45, 16
  %47 = trunc i32 %46 to i16
  %48 = xor i16 %27, %47
  %49 = sub i16 %48, %27
  %50 = getelementptr inbounds i16, i16* %4, i64 %24
  store i16 %49, i16* %50, align 2
  %51 = getelementptr inbounds i16, i16* %6, i64 %33
  %52 = load i16, i16* %51, align 2
  %53 = mul i16 %49, %52
  %54 = getelementptr inbounds i16, i16* %5, i64 %24
  store i16 %53, i16* %54, align 2
  %55 = icmp eq i32 %46, 0
  %56 = trunc i64 %20 to i32
  %57 = select i1 %55, i32 %21, i32 %56
  %58 = add nuw nsw i64 %20, 1
  %59 = icmp eq i64 %58, %1
  br i1 %59, label %14, label %19
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_quantize_fp_32x32_c(i32* nocapture readonly, i64, i16* nocapture readnone, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readnone, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readonly, i16* nocapture readnone) local_unnamed_addr #0 {
  tail call fastcc void @quantize_fp_helper_c(i32* %0, i64 %1, i16* %3, i16* %4, i32* %6, i32* %7, i16* %8, i16* %9, i16* %10, i8* null, i8* null, i32 1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_quantize_fp_64x64_c(i32* nocapture readonly, i64, i16* nocapture readnone, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readnone, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readonly, i16* nocapture readnone) local_unnamed_addr #0 {
  tail call fastcc void @quantize_fp_helper_c(i32* %0, i64 %1, i16* %3, i16* %4, i32* %6, i32* %7, i16* %8, i16* %9, i16* %10, i8* null, i8* null, i32 2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_quantize_fp_facade(i32*, i64, %struct.macroblock_plane* nocapture readonly, i32*, i32*, i16*, %struct.SCAN_ORDER* nocapture readonly, %struct.QUANT_PARAM* nocapture readonly) local_unnamed_addr #0 {
  %9 = getelementptr inbounds %struct.QUANT_PARAM, %struct.QUANT_PARAM* %7, i64 0, i32 2
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.QUANT_PARAM, %struct.QUANT_PARAM* %7, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = icmp ne i8* %10, null
  %14 = icmp ne i8* %12, null
  %15 = and i1 %13, %14
  br i1 %15, label %16, label %27

16:                                               ; preds = %8
  %17 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 8
  %18 = load i16*, i16** %17, align 8
  %19 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 7
  %20 = load i16*, i16** %19, align 8
  %21 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 13
  %22 = load i16*, i16** %21, align 8
  %23 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 0
  %24 = load i16*, i16** %23, align 8
  %25 = getelementptr inbounds %struct.QUANT_PARAM, %struct.QUANT_PARAM* %7, i64 0, i32 0
  %26 = load i32, i32* %25, align 8
  tail call fastcc void @quantize_fp_helper_c(i32* %0, i64 %1, i16* %18, i16* %20, i32* %3, i32* %4, i16* %22, i16* %5, i16* %24, i8* nonnull %10, i8* nonnull %12, i32 %26)
  br label %78

27:                                               ; preds = %8
  %28 = getelementptr inbounds %struct.QUANT_PARAM, %struct.QUANT_PARAM* %7, i64 0, i32 0
  %29 = load i32, i32* %28, align 8
  switch i32 %29, label %78 [
    i32 0, label %30
    i32 1, label %46
    i32 2, label %62
  ]

30:                                               ; preds = %27
  %31 = load void (i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)*, void (i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)** @av1_quantize_fp, align 8
  %32 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 12
  %33 = load i16*, i16** %32, align 8
  %34 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 8
  %35 = load i16*, i16** %34, align 8
  %36 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 7
  %37 = load i16*, i16** %36, align 8
  %38 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 11
  %39 = load i16*, i16** %38, align 8
  %40 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 13
  %41 = load i16*, i16** %40, align 8
  %42 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 0
  %43 = load i16*, i16** %42, align 8
  %44 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 1
  %45 = load i16*, i16** %44, align 8
  tail call void %31(i32* %0, i64 %1, i16* %33, i16* %35, i16* %37, i16* %39, i32* %3, i32* %4, i16* %41, i16* %5, i16* %43, i16* %45) #5
  br label %78

46:                                               ; preds = %27
  %47 = load void (i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)*, void (i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)** @av1_quantize_fp_32x32, align 8
  %48 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 12
  %49 = load i16*, i16** %48, align 8
  %50 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 8
  %51 = load i16*, i16** %50, align 8
  %52 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 7
  %53 = load i16*, i16** %52, align 8
  %54 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 11
  %55 = load i16*, i16** %54, align 8
  %56 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 13
  %57 = load i16*, i16** %56, align 8
  %58 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 0
  %59 = load i16*, i16** %58, align 8
  %60 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 1
  %61 = load i16*, i16** %60, align 8
  tail call void %47(i32* %0, i64 %1, i16* %49, i16* %51, i16* %53, i16* %55, i32* %3, i32* %4, i16* %57, i16* %5, i16* %59, i16* %61) #5
  br label %78

62:                                               ; preds = %27
  %63 = load void (i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)*, void (i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)** @av1_quantize_fp_64x64, align 8
  %64 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 12
  %65 = load i16*, i16** %64, align 8
  %66 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 8
  %67 = load i16*, i16** %66, align 8
  %68 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 7
  %69 = load i16*, i16** %68, align 8
  %70 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 11
  %71 = load i16*, i16** %70, align 8
  %72 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 13
  %73 = load i16*, i16** %72, align 8
  %74 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 0
  %75 = load i16*, i16** %74, align 8
  %76 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 1
  %77 = load i16*, i16** %76, align 8
  tail call void %63(i32* %0, i64 %1, i16* %65, i16* %67, i16* %69, i16* %71, i32* %3, i32* %4, i16* %73, i16* %5, i16* %75, i16* %77) #5
  br label %78

78:                                               ; preds = %30, %46, %62, %27, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_quantize_b_facade(i32*, i64, %struct.macroblock_plane* readonly, i32*, i32*, i16*, %struct.SCAN_ORDER* nocapture readonly, %struct.QUANT_PARAM* nocapture readonly) local_unnamed_addr #0 {
  %9 = getelementptr inbounds %struct.QUANT_PARAM, %struct.QUANT_PARAM* %7, i64 0, i32 2
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.QUANT_PARAM, %struct.QUANT_PARAM* %7, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.QUANT_PARAM, %struct.QUANT_PARAM* %7, i64 0, i32 4
  %14 = load i32, i32* %13, align 8
  %15 = icmp eq i32 %14, 0
  %16 = icmp ne i8* %10, null
  %17 = icmp ne i8* %12, null
  %18 = and i1 %16, %17
  br i1 %15, label %86, label %19

19:                                               ; preds = %8
  br i1 %18, label %20, label %37

20:                                               ; preds = %19
  %21 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 12
  %22 = load i16*, i16** %21, align 8
  %23 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 10
  %24 = load i16*, i16** %23, align 8
  %25 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 9
  %26 = load i16*, i16** %25, align 8
  %27 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 11
  %28 = load i16*, i16** %27, align 8
  %29 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 13
  %30 = load i16*, i16** %29, align 8
  %31 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 0
  %32 = load i16*, i16** %31, align 8
  %33 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 1
  %34 = load i16*, i16** %33, align 8
  %35 = getelementptr inbounds %struct.QUANT_PARAM, %struct.QUANT_PARAM* %7, i64 0, i32 0
  %36 = load i32, i32* %35, align 8
  tail call void @aom_quantize_b_adaptive_helper_c(i32* %0, i64 %1, i16* %22, i16* %24, i16* %26, i16* %28, i32* %3, i32* %4, i16* %30, i16* %5, i16* %32, i16* %34, i8* nonnull %10, i8* nonnull %12, i32 %36) #5
  br label %155

37:                                               ; preds = %19
  %38 = getelementptr inbounds %struct.QUANT_PARAM, %struct.QUANT_PARAM* %7, i64 0, i32 0
  %39 = load i32, i32* %38, align 8
  switch i32 %39, label %155 [
    i32 0, label %40
    i32 1, label %56
    i32 2, label %71
  ]

40:                                               ; preds = %37
  %41 = load void (i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)*, void (i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)** @aom_quantize_b_adaptive, align 8
  %42 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 12
  %43 = load i16*, i16** %42, align 8
  %44 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 10
  %45 = load i16*, i16** %44, align 8
  %46 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 9
  %47 = load i16*, i16** %46, align 8
  %48 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 11
  %49 = load i16*, i16** %48, align 8
  %50 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 13
  %51 = load i16*, i16** %50, align 8
  %52 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 0
  %53 = load i16*, i16** %52, align 8
  %54 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 1
  %55 = load i16*, i16** %54, align 8
  tail call void %41(i32* %0, i64 %1, i16* %43, i16* %45, i16* %47, i16* %49, i32* %3, i32* %4, i16* %51, i16* %5, i16* %53, i16* %55) #5
  br label %155

56:                                               ; preds = %37
  %57 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 12
  %58 = load i16*, i16** %57, align 8
  %59 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 10
  %60 = load i16*, i16** %59, align 8
  %61 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 9
  %62 = load i16*, i16** %61, align 8
  %63 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 11
  %64 = load i16*, i16** %63, align 8
  %65 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 13
  %66 = load i16*, i16** %65, align 8
  %67 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 0
  %68 = load i16*, i16** %67, align 8
  %69 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 1
  %70 = load i16*, i16** %69, align 8
  tail call void @aom_quantize_b_32x32_adaptive_sse2(i32* %0, i64 %1, i16* %58, i16* %60, i16* %62, i16* %64, i32* %3, i32* %4, i16* %66, i16* %5, i16* %68, i16* %70) #5
  br label %155

71:                                               ; preds = %37
  %72 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 12
  %73 = load i16*, i16** %72, align 8
  %74 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 10
  %75 = load i16*, i16** %74, align 8
  %76 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 9
  %77 = load i16*, i16** %76, align 8
  %78 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 11
  %79 = load i16*, i16** %78, align 8
  %80 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 13
  %81 = load i16*, i16** %80, align 8
  %82 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 0
  %83 = load i16*, i16** %82, align 8
  %84 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 1
  %85 = load i16*, i16** %84, align 8
  tail call void @aom_quantize_b_64x64_adaptive_sse2(i32* %0, i64 %1, i16* %73, i16* %75, i16* %77, i16* %79, i32* %3, i32* %4, i16* %81, i16* %5, i16* %83, i16* %85) #5
  br label %155

86:                                               ; preds = %8
  br i1 %18, label %87, label %104

87:                                               ; preds = %86
  %88 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 12
  %89 = load i16*, i16** %88, align 8
  %90 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 10
  %91 = load i16*, i16** %90, align 8
  %92 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 9
  %93 = load i16*, i16** %92, align 8
  %94 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 11
  %95 = load i16*, i16** %94, align 8
  %96 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 13
  %97 = load i16*, i16** %96, align 8
  %98 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 0
  %99 = load i16*, i16** %98, align 8
  %100 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 1
  %101 = load i16*, i16** %100, align 8
  %102 = getelementptr inbounds %struct.QUANT_PARAM, %struct.QUANT_PARAM* %7, i64 0, i32 0
  %103 = load i32, i32* %102, align 8
  tail call void @aom_quantize_b_helper_c(i32* %0, i64 %1, i16* %89, i16* %91, i16* %93, i16* %95, i32* %3, i32* %4, i16* %97, i16* %5, i16* %99, i16* %101, i8* nonnull %10, i8* nonnull %12, i32 %103) #5
  br label %155

104:                                              ; preds = %86
  %105 = getelementptr inbounds %struct.QUANT_PARAM, %struct.QUANT_PARAM* %7, i64 0, i32 0
  %106 = load i32, i32* %105, align 8
  switch i32 %106, label %155 [
    i32 0, label %107
    i32 1, label %123
    i32 2, label %139
  ]

107:                                              ; preds = %104
  %108 = load void (i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)*, void (i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)** @aom_quantize_b, align 8
  %109 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 12
  %110 = load i16*, i16** %109, align 8
  %111 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 10
  %112 = load i16*, i16** %111, align 8
  %113 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 9
  %114 = load i16*, i16** %113, align 8
  %115 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 11
  %116 = load i16*, i16** %115, align 8
  %117 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 13
  %118 = load i16*, i16** %117, align 8
  %119 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 0
  %120 = load i16*, i16** %119, align 8
  %121 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 1
  %122 = load i16*, i16** %121, align 8
  tail call void %108(i32* %0, i64 %1, i16* %110, i16* %112, i16* %114, i16* %116, i32* %3, i32* %4, i16* %118, i16* %5, i16* %120, i16* %122) #5
  br label %155

123:                                              ; preds = %104
  %124 = load void (i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)*, void (i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)** @aom_quantize_b_32x32, align 8
  %125 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 12
  %126 = load i16*, i16** %125, align 8
  %127 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 10
  %128 = load i16*, i16** %127, align 8
  %129 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 9
  %130 = load i16*, i16** %129, align 8
  %131 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 11
  %132 = load i16*, i16** %131, align 8
  %133 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 13
  %134 = load i16*, i16** %133, align 8
  %135 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 0
  %136 = load i16*, i16** %135, align 8
  %137 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 1
  %138 = load i16*, i16** %137, align 8
  tail call void %124(i32* %0, i64 %1, i16* %126, i16* %128, i16* %130, i16* %132, i32* %3, i32* %4, i16* %134, i16* %5, i16* %136, i16* %138) #5
  br label %155

139:                                              ; preds = %104
  %140 = load void (i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)*, void (i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)** @aom_quantize_b_64x64, align 8
  %141 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 12
  %142 = load i16*, i16** %141, align 8
  %143 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 10
  %144 = load i16*, i16** %143, align 8
  %145 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 9
  %146 = load i16*, i16** %145, align 8
  %147 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 11
  %148 = load i16*, i16** %147, align 8
  %149 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 13
  %150 = load i16*, i16** %149, align 8
  %151 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 0
  %152 = load i16*, i16** %151, align 8
  %153 = getelementptr inbounds %struct.SCAN_ORDER, %struct.SCAN_ORDER* %6, i64 0, i32 1
  %154 = load i16*, i16** %153, align 8
  tail call void %140(i32* %0, i64 %1, i16* %142, i16* %144, i16* %146, i16* %148, i32* %3, i32* %4, i16* %150, i16* %5, i16* %152, i16* %154) #5
  br label %155

155:                                              ; preds = %87, %104, %139, %123, %107, %20, %37, %71, %56, %40
  ret void
}

declare void @aom_quantize_b_adaptive_helper_c(i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*, i8*, i8*, i32) local_unnamed_addr #2

declare void @aom_quantize_b_32x32_adaptive_sse2(i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*) local_unnamed_addr #2

declare void @aom_quantize_b_64x64_adaptive_sse2(i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*) local_unnamed_addr #2

declare void @aom_quantize_b_helper_c(i32*, i64, i16*, i16*, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_quantize_dc_facade(i32* nocapture readonly, i64, %struct.macroblock_plane* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture, %struct.SCAN_ORDER* nocapture readnone, %struct.QUANT_PARAM* nocapture readonly) local_unnamed_addr #0 {
  %9 = getelementptr inbounds %struct.QUANT_PARAM, %struct.QUANT_PARAM* %7, i64 0, i32 2
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.QUANT_PARAM, %struct.QUANT_PARAM* %7, i64 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 10
  %14 = load i16*, i16** %13, align 8
  %15 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 7
  %16 = load i16*, i16** %15, align 8
  %17 = load i16, i16* %16, align 2
  %18 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %2, i64 0, i32 13
  %19 = load i16*, i16** %18, align 8
  %20 = load i16, i16* %19, align 2
  %21 = getelementptr inbounds %struct.QUANT_PARAM, %struct.QUANT_PARAM* %7, i64 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = load i32, i32* %0, align 4
  %24 = ashr i32 %23, 31
  %25 = xor i32 %24, %23
  %26 = sub nsw i32 %25, %24
  %27 = bitcast i32* %3 to i8*
  %28 = shl i64 %1, 32
  %29 = ashr exact i64 %28, 30
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %27, i8 0, i64 %29, i1 false) #5
  %30 = bitcast i32* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %30, i8 0, i64 %29, i1 false) #5
  %31 = icmp eq i8* %10, null
  br i1 %31, label %35, label %32

32:                                               ; preds = %8
  %33 = load i8, i8* %10, align 1
  %34 = zext i8 %33 to i64
  br label %35

35:                                               ; preds = %32, %8
  %36 = phi i64 [ %34, %32 ], [ 32, %8 ]
  %37 = icmp eq i8* %12, null
  br i1 %37, label %41, label %38

38:                                               ; preds = %35
  %39 = load i8, i8* %12, align 1
  %40 = zext i8 %39 to i32
  br label %41

41:                                               ; preds = %35, %38
  %42 = phi i32 [ %40, %38 ], [ 32, %35 ]
  %43 = load i16, i16* %14, align 2
  %44 = sext i16 %43 to i32
  %45 = shl i32 1, %22
  %46 = ashr i32 %45, 1
  %47 = add nsw i32 %46, %44
  %48 = ashr i32 %47, %22
  %49 = add nsw i32 %48, %26
  %50 = icmp slt i32 %49, 32767
  %51 = select i1 %50, i32 %49, i32 32767
  %52 = icmp sgt i32 %51, -32768
  %53 = select i1 %52, i32 %51, i32 -32768
  %54 = sext i32 %53 to i64
  %55 = sext i16 %17 to i64
  %56 = mul nsw i64 %36, %55
  %57 = mul nsw i64 %56, %54
  %58 = sub i32 21, %22
  %59 = zext i32 %58 to i64
  %60 = ashr i64 %57, %59
  %61 = trunc i64 %60 to i32
  %62 = xor i32 %24, %61
  %63 = sub nsw i32 %62, %24
  store i32 %63, i32* %3, align 4
  %64 = sext i16 %20 to i32
  %65 = mul nsw i32 %42, %64
  %66 = add nsw i32 %65, 16
  %67 = ashr i32 %66, 5
  %68 = mul nsw i32 %67, %61
  %69 = ashr i32 %68, %22
  %70 = xor i32 %69, %24
  %71 = sub nsw i32 %70, %24
  store i32 %71, i32* %4, align 4
  %72 = icmp ne i32 %61, 0
  %73 = zext i1 %72 to i16
  store i16 %73, i16* %5, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_build_quantizer(i32, i32, i32, i32, i32, i32, %struct.QUANTS*, %struct.Dequants* nocapture) local_unnamed_addr #0 {
  br label %9

9:                                                ; preds = %225, %8
  %10 = phi i64 [ 0, %8 ], [ %226, %225 ]
  %11 = trunc i64 %10 to i32
  %12 = tail call signext i16 @av1_dc_quant_QTX(i32 %11, i32 0, i32 %0) #5
  switch i32 %0, label %28 [
    i32 8, label %13
    i32 10, label %18
    i32 12, label %23
  ]

13:                                               ; preds = %9
  %14 = icmp eq i64 %10, 0
  %15 = icmp slt i16 %12, 148
  %16 = select i1 %15, i32 84, i32 80
  %17 = select i1 %14, i32 64, i32 %16
  br label %28

18:                                               ; preds = %9
  %19 = icmp eq i64 %10, 0
  %20 = icmp slt i16 %12, 592
  %21 = select i1 %20, i32 84, i32 80
  %22 = select i1 %19, i32 64, i32 %21
  br label %28

23:                                               ; preds = %9
  %24 = icmp eq i64 %10, 0
  %25 = icmp slt i16 %12, 2368
  %26 = select i1 %25, i32 84, i32 80
  %27 = select i1 %24, i32 64, i32 %26
  br label %28

28:                                               ; preds = %9, %13, %18, %23
  %29 = phi i32 [ %17, %13 ], [ %22, %18 ], [ %27, %23 ], [ -1, %9 ]
  %30 = icmp eq i64 %10, 0
  %31 = select i1 %30, i32 64, i32 48
  br label %54

32:                                               ; preds = %153
  %33 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 0, i64 %10, i64 1
  %34 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 4, i64 %10, i64 1
  %35 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 7, i64 %10, i64 1
  %36 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 1, i64 %10, i64 1
  %37 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 2, i64 %10, i64 1
  %38 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 3, i64 %10, i64 1
  %39 = getelementptr inbounds %struct.Dequants, %struct.Dequants* %7, i64 0, i32 0, i64 %10, i64 1
  %40 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 10, i64 %10, i64 1
  %41 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 5, i64 %10, i64 1
  %42 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 8, i64 %10, i64 1
  %43 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 12, i64 %10, i64 1
  %44 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 14, i64 %10, i64 1
  %45 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 16, i64 %10, i64 1
  %46 = getelementptr inbounds %struct.Dequants, %struct.Dequants* %7, i64 0, i32 1, i64 %10, i64 1
  %47 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 11, i64 %10, i64 1
  %48 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 6, i64 %10, i64 1
  %49 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 9, i64 %10, i64 1
  %50 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 13, i64 %10, i64 1
  %51 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 15, i64 %10, i64 1
  %52 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 17, i64 %10, i64 1
  %53 = getelementptr inbounds %struct.Dequants, %struct.Dequants* %7, i64 0, i32 2, i64 %10, i64 1
  br label %179

54:                                               ; preds = %153, %28
  %55 = phi i64 [ 0, %28 ], [ %177, %153 ]
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %59

57:                                               ; preds = %54
  %58 = tail call signext i16 @av1_dc_quant_QTX(i32 %11, i32 %1, i32 %0) #5
  br label %61

59:                                               ; preds = %54
  %60 = tail call signext i16 @av1_ac_quant_QTX(i32 %11, i32 0, i32 %0) #5
  br label %61

61:                                               ; preds = %59, %57
  %62 = phi i16 [ %58, %57 ], [ %60, %59 ]
  %63 = sext i16 %62 to i32
  %64 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 0, i64 %10, i64 %55
  %65 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 1, i64 %10, i64 %55
  %66 = icmp ugt i16 %62, 1
  br i1 %66, label %67, label %73

67:                                               ; preds = %61, %67
  %68 = phi i32 [ %71, %67 ], [ 0, %61 ]
  %69 = phi i32 [ %70, %67 ], [ %63, %61 ]
  %70 = lshr i32 %69, 1
  %71 = add nuw nsw i32 %68, 1
  %72 = icmp ugt i32 %69, 3
  br i1 %72, label %67, label %73

73:                                               ; preds = %67, %61
  %74 = phi i32 [ 0, %61 ], [ %71, %67 ]
  %75 = shl i32 65536, %74
  %76 = sdiv i32 %75, %63
  %77 = trunc i32 %76 to i16
  %78 = add i16 %77, 1
  store i16 %78, i16* %64, align 2
  %79 = sub nsw i32 16, %74
  %80 = shl i32 1, %79
  %81 = trunc i32 %80 to i16
  store i16 %81, i16* %65, align 2
  %82 = sdiv i32 65536, %63
  %83 = trunc i32 %82 to i16
  %84 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 4, i64 %10, i64 %55
  store i16 %83, i16* %84, align 2
  %85 = ashr i16 %62, 1
  %86 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 7, i64 %10, i64 %55
  store i16 %85, i16* %86, align 2
  %87 = mul nsw i32 %29, %63
  %88 = add nsw i32 %87, 64
  %89 = lshr i32 %88, 7
  %90 = trunc i32 %89 to i16
  %91 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 2, i64 %10, i64 %55
  store i16 %90, i16* %91, align 2
  %92 = mul nsw i32 %31, %63
  %93 = lshr i32 %92, 7
  %94 = trunc i32 %93 to i16
  %95 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 3, i64 %10, i64 %55
  store i16 %94, i16* %95, align 2
  %96 = getelementptr inbounds %struct.Dequants, %struct.Dequants* %7, i64 0, i32 0, i64 %10, i64 %55
  store i16 %62, i16* %96, align 2
  br i1 %56, label %97, label %99

97:                                               ; preds = %73
  %98 = tail call signext i16 @av1_dc_quant_QTX(i32 %11, i32 %2, i32 %0) #5
  br label %101

99:                                               ; preds = %73
  %100 = tail call signext i16 @av1_ac_quant_QTX(i32 %11, i32 %3, i32 %0) #5
  br label %101

101:                                              ; preds = %99, %97
  %102 = phi i16 [ %98, %97 ], [ %100, %99 ]
  %103 = sext i16 %102 to i32
  %104 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 10, i64 %10, i64 %55
  %105 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 12, i64 %10, i64 %55
  %106 = icmp ugt i16 %102, 1
  br i1 %106, label %107, label %113

107:                                              ; preds = %101, %107
  %108 = phi i32 [ %111, %107 ], [ 0, %101 ]
  %109 = phi i32 [ %110, %107 ], [ %103, %101 ]
  %110 = lshr i32 %109, 1
  %111 = add nuw nsw i32 %108, 1
  %112 = icmp ugt i32 %109, 3
  br i1 %112, label %107, label %113

113:                                              ; preds = %107, %101
  %114 = phi i32 [ 0, %101 ], [ %111, %107 ]
  %115 = shl i32 65536, %114
  %116 = sdiv i32 %115, %103
  %117 = trunc i32 %116 to i16
  %118 = add i16 %117, 1
  store i16 %118, i16* %104, align 2
  %119 = sub nsw i32 16, %114
  %120 = shl i32 1, %119
  %121 = trunc i32 %120 to i16
  store i16 %121, i16* %105, align 2
  %122 = sdiv i32 65536, %103
  %123 = trunc i32 %122 to i16
  %124 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 5, i64 %10, i64 %55
  store i16 %123, i16* %124, align 2
  %125 = ashr i16 %102, 1
  %126 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 8, i64 %10, i64 %55
  store i16 %125, i16* %126, align 2
  %127 = mul nsw i32 %29, %103
  %128 = add nsw i32 %127, 64
  %129 = lshr i32 %128, 7
  %130 = trunc i32 %129 to i16
  %131 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 14, i64 %10, i64 %55
  store i16 %130, i16* %131, align 2
  %132 = mul nsw i32 %31, %103
  %133 = lshr i32 %132, 7
  %134 = trunc i32 %133 to i16
  %135 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 16, i64 %10, i64 %55
  store i16 %134, i16* %135, align 2
  %136 = getelementptr inbounds %struct.Dequants, %struct.Dequants* %7, i64 0, i32 1, i64 %10, i64 %55
  store i16 %102, i16* %136, align 2
  br i1 %56, label %137, label %139

137:                                              ; preds = %113
  %138 = tail call signext i16 @av1_dc_quant_QTX(i32 %11, i32 %4, i32 %0) #5
  br label %141

139:                                              ; preds = %113
  %140 = tail call signext i16 @av1_ac_quant_QTX(i32 %11, i32 %5, i32 %0) #5
  br label %141

141:                                              ; preds = %139, %137
  %142 = phi i16 [ %138, %137 ], [ %140, %139 ]
  %143 = sext i16 %142 to i32
  %144 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 11, i64 %10, i64 %55
  %145 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 13, i64 %10, i64 %55
  %146 = icmp ugt i16 %142, 1
  br i1 %146, label %147, label %153

147:                                              ; preds = %141, %147
  %148 = phi i32 [ %151, %147 ], [ 0, %141 ]
  %149 = phi i32 [ %150, %147 ], [ %143, %141 ]
  %150 = lshr i32 %149, 1
  %151 = add nuw nsw i32 %148, 1
  %152 = icmp ugt i32 %149, 3
  br i1 %152, label %147, label %153

153:                                              ; preds = %147, %141
  %154 = phi i32 [ 0, %141 ], [ %151, %147 ]
  %155 = shl i32 65536, %154
  %156 = sdiv i32 %155, %143
  %157 = trunc i32 %156 to i16
  %158 = add i16 %157, 1
  store i16 %158, i16* %144, align 2
  %159 = sub nsw i32 16, %154
  %160 = shl i32 1, %159
  %161 = trunc i32 %160 to i16
  store i16 %161, i16* %145, align 2
  %162 = sdiv i32 65536, %143
  %163 = trunc i32 %162 to i16
  %164 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 6, i64 %10, i64 %55
  store i16 %163, i16* %164, align 2
  %165 = ashr i16 %142, 1
  %166 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 9, i64 %10, i64 %55
  store i16 %165, i16* %166, align 2
  %167 = mul nsw i32 %29, %143
  %168 = add nsw i32 %167, 64
  %169 = lshr i32 %168, 7
  %170 = trunc i32 %169 to i16
  %171 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 15, i64 %10, i64 %55
  store i16 %170, i16* %171, align 2
  %172 = mul nsw i32 %31, %143
  %173 = lshr i32 %172, 7
  %174 = trunc i32 %173 to i16
  %175 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 17, i64 %10, i64 %55
  store i16 %174, i16* %175, align 2
  %176 = getelementptr inbounds %struct.Dequants, %struct.Dequants* %7, i64 0, i32 2, i64 %10, i64 %55
  store i16 %142, i16* %176, align 2
  %177 = add nuw nsw i64 %55, 1
  %178 = icmp eq i64 %177, 2
  br i1 %178, label %32, label %54

179:                                              ; preds = %179, %32
  %180 = phi i64 [ 2, %32 ], [ %223, %179 ]
  %181 = load i16, i16* %33, align 2
  %182 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 0, i64 %10, i64 %180
  store i16 %181, i16* %182, align 2
  %183 = load i16, i16* %34, align 2
  %184 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 4, i64 %10, i64 %180
  store i16 %183, i16* %184, align 2
  %185 = load i16, i16* %35, align 2
  %186 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 7, i64 %10, i64 %180
  store i16 %185, i16* %186, align 2
  %187 = load i16, i16* %36, align 2
  %188 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 1, i64 %10, i64 %180
  store i16 %187, i16* %188, align 2
  %189 = load i16, i16* %37, align 2
  %190 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 2, i64 %10, i64 %180
  store i16 %189, i16* %190, align 2
  %191 = load i16, i16* %38, align 2
  %192 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 3, i64 %10, i64 %180
  store i16 %191, i16* %192, align 2
  %193 = load i16, i16* %39, align 2
  %194 = getelementptr inbounds %struct.Dequants, %struct.Dequants* %7, i64 0, i32 0, i64 %10, i64 %180
  store i16 %193, i16* %194, align 2
  %195 = load i16, i16* %40, align 2
  %196 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 10, i64 %10, i64 %180
  store i16 %195, i16* %196, align 2
  %197 = load i16, i16* %41, align 2
  %198 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 5, i64 %10, i64 %180
  store i16 %197, i16* %198, align 2
  %199 = load i16, i16* %42, align 2
  %200 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 8, i64 %10, i64 %180
  store i16 %199, i16* %200, align 2
  %201 = load i16, i16* %43, align 2
  %202 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 12, i64 %10, i64 %180
  store i16 %201, i16* %202, align 2
  %203 = load i16, i16* %44, align 2
  %204 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 14, i64 %10, i64 %180
  store i16 %203, i16* %204, align 2
  %205 = load i16, i16* %45, align 2
  %206 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 16, i64 %10, i64 %180
  store i16 %205, i16* %206, align 2
  %207 = load i16, i16* %46, align 2
  %208 = getelementptr inbounds %struct.Dequants, %struct.Dequants* %7, i64 0, i32 1, i64 %10, i64 %180
  store i16 %207, i16* %208, align 2
  %209 = load i16, i16* %47, align 2
  %210 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 11, i64 %10, i64 %180
  store i16 %209, i16* %210, align 2
  %211 = load i16, i16* %48, align 2
  %212 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 6, i64 %10, i64 %180
  store i16 %211, i16* %212, align 2
  %213 = load i16, i16* %49, align 2
  %214 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 9, i64 %10, i64 %180
  store i16 %213, i16* %214, align 2
  %215 = load i16, i16* %50, align 2
  %216 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 13, i64 %10, i64 %180
  store i16 %215, i16* %216, align 2
  %217 = load i16, i16* %51, align 2
  %218 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 15, i64 %10, i64 %180
  store i16 %217, i16* %218, align 2
  %219 = load i16, i16* %52, align 2
  %220 = getelementptr inbounds %struct.QUANTS, %struct.QUANTS* %6, i64 0, i32 17, i64 %10, i64 %180
  store i16 %219, i16* %220, align 2
  %221 = load i16, i16* %53, align 2
  %222 = getelementptr inbounds %struct.Dequants, %struct.Dequants* %7, i64 0, i32 2, i64 %10, i64 %180
  store i16 %221, i16* %222, align 2
  %223 = add nuw nsw i64 %180, 1
  %224 = icmp eq i64 %223, 8
  br i1 %224, label %225, label %179

225:                                              ; preds = %179
  %226 = add nuw nsw i64 %10, 1
  %227 = icmp eq i64 %226, 256
  br i1 %227, label %228, label %9

228:                                              ; preds = %225
  ret void
}

declare signext i16 @av1_dc_quant_QTX(i32, i32, i32) local_unnamed_addr #2

declare signext i16 @av1_ac_quant_QTX(i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_init_quantizer(%struct.EncQuantDequantParams*, %struct.CommonQuantParams* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.EncQuantDequantParams, %struct.EncQuantDequantParams* %0, i64 0, i32 0
  %5 = getelementptr inbounds %struct.EncQuantDequantParams, %struct.EncQuantDequantParams* %0, i64 0, i32 1
  %6 = getelementptr inbounds %struct.CommonQuantParams, %struct.CommonQuantParams* %1, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.CommonQuantParams, %struct.CommonQuantParams* %1, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.CommonQuantParams, %struct.CommonQuantParams* %1, i64 0, i32 4
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %struct.CommonQuantParams, %struct.CommonQuantParams* %1, i64 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.CommonQuantParams, %struct.CommonQuantParams* %1, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  tail call void @av1_build_quantizer(i32 %2, i32 %7, i32 %9, i32 %11, i32 %13, i32 %15, %struct.QUANTS* %4, %struct.Dequants* %5)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_init_plane_quantizers(%struct.AV1_COMP*, %struct.macroblock*, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22
  %5 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 33, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %struct.CommonQuantParams, %struct.CommonQuantParams* %4, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  br i1 %8, label %15, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 16
  %13 = load i32, i32* %12, align 4
  %14 = add nsw i32 %13, %10
  br label %15

15:                                               ; preds = %3, %11
  %16 = phi i32 [ %14, %11 ], [ %10, %3 ]
  %17 = icmp sgt i32 %16, 255
  br i1 %17, label %26, label %18

18:                                               ; preds = %15
  br i1 %8, label %23, label %19

19:                                               ; preds = %18
  %20 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 16
  %21 = load i32, i32* %20, align 4
  %22 = add nsw i32 %21, %10
  br label %23

23:                                               ; preds = %18, %19
  %24 = phi i32 [ %22, %19 ], [ %10, %18 ]
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %41, label %26

26:                                               ; preds = %15, %23
  br i1 %8, label %27, label %30

27:                                               ; preds = %26
  %28 = icmp slt i32 %10, 255
  %29 = select i1 %28, i32 %10, i32 255
  br label %41

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 16
  %32 = load i32, i32* %31, align 4
  %33 = add nsw i32 %32, %10
  %34 = icmp sgt i32 %33, 255
  %35 = or i1 %8, %34
  %36 = select i1 %34, i32 255, i32 %10
  br i1 %35, label %41, label %37

37:                                               ; preds = %30
  %38 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 16
  %39 = load i32, i32* %38, align 4
  %40 = add nsw i32 %39, %10
  br label %41

41:                                               ; preds = %27, %30, %37, %23
  %42 = phi i32 [ 0, %23 ], [ %36, %30 ], [ %40, %37 ], [ %29, %27 ]
  %43 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23
  %44 = tail call i32 @av1_get_qindex(%struct.segmentation* %43, i32 %2, i32 %42) #5
  %45 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = add nsw i32 %46, %44
  %48 = tail call i32 @av1_compute_rd_mult(%struct.AV1_COMP* %0, i32 %47) #5
  %49 = tail call zeroext i1 @av1_use_qmatrix(%struct.CommonQuantParams* %4, %struct.macroblockd* %5, i32 %2) #5
  br i1 %49, label %50, label %54

50:                                               ; preds = %41
  %51 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 15
  %52 = load i32, i32* %51, align 4
  %53 = sext i32 %52 to i64
  br label %54

54:                                               ; preds = %41, %50
  %55 = phi i64 [ %53, %50 ], [ 15, %41 ]
  %56 = sext i32 %44 to i64
  %57 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 0, i32 0, i64 %56, i64 0
  %58 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 9
  store i16* %57, i16** %58, align 16
  %59 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 0, i32 4, i64 %56, i64 0
  %60 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 7
  store i16* %59, i16** %60, align 16
  %61 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 0, i32 7, i64 %56, i64 0
  %62 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 8
  store i16* %61, i16** %62, align 8
  %63 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 0, i32 1, i64 %56, i64 0
  %64 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 11
  store i16* %63, i16** %64, align 16
  %65 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 0, i32 2, i64 %56, i64 0
  %66 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 12
  store i16* %65, i16** %66, align 8
  %67 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 0, i32 3, i64 %56, i64 0
  %68 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 10
  store i16* %67, i16** %68, align 8
  %69 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 1, i32 0, i64 %56, i64 0
  %70 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 0, i32 13
  store i16* %69, i16** %70, align 16
  %71 = sext i32 %2 to i64
  %72 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 12, i64 %71
  %73 = bitcast [19 x i8*]* %72 to i8*
  %74 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 10, i64 %55, i64 0, i64 0
  %75 = bitcast i8** %74 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %73, i8* align 8 %75, i64 152, i1 false)
  %76 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 0, i32 11, i64 %71
  %77 = bitcast [19 x i8*]* %76 to i8*
  %78 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 9, i64 %55, i64 0, i64 0
  %79 = bitcast i8** %78 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %79, i64 152, i1 false)
  br i1 %49, label %80, label %84

80:                                               ; preds = %54
  %81 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 16
  %82 = load i32, i32* %81, align 8
  %83 = sext i32 %82 to i64
  br label %84

84:                                               ; preds = %54, %80
  %85 = phi i64 [ %83, %80 ], [ 15, %54 ]
  %86 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 0, i32 10, i64 %56, i64 0
  %87 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 9
  store i16* %86, i16** %87, align 8
  %88 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 0, i32 5, i64 %56, i64 0
  %89 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 7
  store i16* %88, i16** %89, align 8
  %90 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 0, i32 8, i64 %56, i64 0
  %91 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 8
  store i16* %90, i16** %91, align 8
  %92 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 0, i32 12, i64 %56, i64 0
  %93 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 11
  store i16* %92, i16** %93, align 8
  %94 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 0, i32 14, i64 %56, i64 0
  %95 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 12
  store i16* %94, i16** %95, align 8
  %96 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 0, i32 16, i64 %56, i64 0
  %97 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 10
  store i16* %96, i16** %97, align 8
  %98 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 1, i32 1, i64 %56, i64 0
  %99 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 1, i32 13
  store i16* %98, i16** %99, align 8
  %100 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 1, i32 12, i64 %71
  %101 = bitcast [19 x i8*]* %100 to i8*
  %102 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 10, i64 %85, i64 1, i64 0
  %103 = bitcast i8** %102 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %101, i8* align 8 %103, i64 152, i1 false)
  %104 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 1, i32 11, i64 %71
  %105 = bitcast [19 x i8*]* %104 to i8*
  %106 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 9, i64 %85, i64 1, i64 0
  %107 = bitcast i8** %106 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %105, i8* align 8 %107, i64 152, i1 false)
  br i1 %49, label %108, label %112

108:                                              ; preds = %84
  %109 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 17
  %110 = load i32, i32* %109, align 4
  %111 = sext i32 %110 to i64
  br label %112

112:                                              ; preds = %84, %108
  %113 = phi i64 [ %111, %108 ], [ 15, %84 ]
  %114 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 0, i32 11, i64 %56, i64 0
  %115 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 9
  store i16* %114, i16** %115, align 16
  %116 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 0, i32 6, i64 %56, i64 0
  %117 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 7
  store i16* %116, i16** %117, align 16
  %118 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 0, i32 9, i64 %56, i64 0
  %119 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 8
  store i16* %118, i16** %119, align 8
  %120 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 0, i32 13, i64 %56, i64 0
  %121 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 11
  store i16* %120, i16** %121, align 16
  %122 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 0, i32 15, i64 %56, i64 0
  %123 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 12
  store i16* %122, i16** %123, align 8
  %124 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 0, i32 17, i64 %56, i64 0
  %125 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 10
  store i16* %124, i16** %125, align 8
  %126 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 2, i32 1, i32 2, i64 %56, i64 0
  %127 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 0, i64 2, i32 13
  store i16* %126, i16** %127, align 16
  %128 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 2, i32 12, i64 %71
  %129 = bitcast [19 x i8*]* %128 to i8*
  %130 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 10, i64 %113, i64 2, i64 0
  %131 = bitcast i8** %130 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %129, i8* align 8 %131, i64 152, i1 false)
  %132 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 2, i32 4, i64 2, i32 11, i64 %71
  %133 = bitcast [19 x i8*]* %132 to i8*
  %134 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 9, i64 %113, i64 2, i64 0
  %135 = bitcast i8** %134 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %133, i8* align 8 %135, i64 152, i1 false)
  %136 = getelementptr inbounds %struct.segmentation, %struct.segmentation* %43, i64 0, i32 0
  %137 = load i8, i8* %136, align 4
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %144, label %139

139:                                              ; preds = %112
  %140 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 23, i32 5, i64 %71
  %141 = load i32, i32* %140, align 4
  %142 = lshr i32 %141, 6
  %143 = and i32 %142, 1
  br label %144

144:                                              ; preds = %112, %139
  %145 = phi i32 [ 0, %112 ], [ %143, %139 ]
  %146 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 26
  store i32 %145, i32* %146, align 8
  %147 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 15
  store i32 %44, i32* %147, align 16
  %148 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 24
  %149 = ashr i32 %48, 6
  %150 = icmp sgt i32 %149, 1
  %151 = select i1 %150, i32 %149, i32 1
  store i32 %151, i32* %148, align 4
  %152 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 25
  tail call void @av1_set_sad_per_bit(%struct.AV1_COMP* %0, i32* %152, i32 %44) #5
  ret void
}

declare i32 @av1_get_qindex(%struct.segmentation*, i32, i32) local_unnamed_addr #2

declare i32 @av1_compute_rd_mult(%struct.AV1_COMP*, i32) local_unnamed_addr #2

declare zeroext i1 @av1_use_qmatrix(%struct.CommonQuantParams*, %struct.macroblockd*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @av1_set_sad_per_bit(%struct.AV1_COMP*, i32*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_frame_init_quantizer(%struct.AV1_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0
  %3 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 6
  %4 = load %struct.MB_MODE_INFO**, %struct.MB_MODE_INFO*** %3, align 8
  %5 = load %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO** %4, align 8
  %6 = getelementptr inbounds %struct.MB_MODE_INFO, %struct.MB_MODE_INFO* %5, i64 0, i32 28
  %7 = load i16, i16* %6, align 1
  %8 = and i16 %7, 7
  %9 = zext i16 %8 to i32
  tail call void @av1_init_plane_quantizers(%struct.AV1_COMP* %0, %struct.macroblock* %2, i32 %9)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_set_quantizer(%struct.AV1Common* nocapture, i32, i32, i32, i32) local_unnamed_addr #3 {
  %6 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 33, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp sgt i32 %7, %3
  %9 = select i1 %8, i32 %7, i32 %3
  %10 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 22, i32 0
  store i32 %9, i32* %10, align 8
  %11 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 22, i32 1
  store i32 0, i32* %11, align 4
  %12 = icmp eq i32 %4, 0
  %13 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 22, i32 2
  %14 = insertelement <4 x i1> undef, i1 %12, i32 0
  %15 = shufflevector <4 x i1> %14, <4 x i1> undef, <4 x i32> zeroinitializer
  %16 = select <4 x i1> %15, <4 x i32> zeroinitializer, <4 x i32> <i32 2, i32 2, i32 2, i32 2>
  %17 = bitcast i32* %13 to <4 x i32>*
  store <4 x i32> %16, <4 x i32>* %17, align 8
  %18 = sub i32 1, %1
  %19 = add i32 %18, %2
  %20 = mul nsw i32 %9, %19
  %21 = sdiv i32 %20, 256
  %22 = add nsw i32 %21, %1
  %23 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 22, i32 15
  store i32 %22, i32* %23, align 4
  %24 = extractelement <4 x i32> %16, i32 2
  %25 = add nsw i32 %24, %9
  %26 = mul nsw i32 %25, %19
  %27 = sdiv i32 %26, 256
  %28 = add nsw i32 %27, %1
  %29 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 22, i32 16
  store i32 %28, i32* %29, align 8
  %30 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 35
  %31 = load %struct.SequenceHeader*, %struct.SequenceHeader** %30, align 16
  %32 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %31, i64 0, i32 35
  %33 = load i8, i8* %32, align 4
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %41, label %35

35:                                               ; preds = %5
  %36 = extractelement <4 x i32> %16, i32 3
  %37 = add nsw i32 %36, %9
  %38 = mul nsw i32 %37, %19
  %39 = sdiv i32 %38, 256
  %40 = add nsw i32 %39, %1
  br label %41

41:                                               ; preds = %5, %35
  %42 = phi i32 [ %40, %35 ], [ %28, %5 ]
  %43 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %0, i64 0, i32 22, i32 17
  store i32 %42, i32* %43, align 4
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @av1_quantizer_to_qindex(i32) local_unnamed_addr #4 {
  %2 = sext i32 %0 to i64
  %3 = getelementptr inbounds [64 x i32], [64 x i32]* @quantizer_to_qindex, i64 0, i64 %2
  %4 = load i32, i32* %3, align 4
  ret i32 %4
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @av1_qindex_to_quantizer(i32) local_unnamed_addr #4 {
  br label %2

2:                                                ; preds = %25, %1
  %3 = phi i64 [ 0, %1 ], [ %26, %25 ]
  %4 = getelementptr inbounds [64 x i32], [64 x i32]* @quantizer_to_qindex, i64 0, i64 %3
  %5 = load i32, i32* %4, align 16
  %6 = icmp slt i32 %5, %0
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = or i64 %3, 1
  %9 = getelementptr inbounds [64 x i32], [64 x i32]* @quantizer_to_qindex, i64 0, i64 %8
  %10 = load i32, i32* %9, align 4
  %11 = icmp slt i32 %10, %0
  br i1 %11, label %15, label %12

12:                                               ; preds = %25, %20, %15, %7, %2
  %13 = phi i64 [ %3, %2 ], [ %8, %7 ], [ %16, %15 ], [ %21, %20 ], [ %21, %25 ]
  %14 = trunc i64 %13 to i32
  ret i32 %14

15:                                               ; preds = %7
  %16 = or i64 %3, 2
  %17 = getelementptr inbounds [64 x i32], [64 x i32]* @quantizer_to_qindex, i64 0, i64 %16
  %18 = load i32, i32* %17, align 8
  %19 = icmp slt i32 %18, %0
  br i1 %19, label %20, label %12

20:                                               ; preds = %15
  %21 = or i64 %3, 3
  %22 = getelementptr inbounds [64 x i32], [64 x i32]* @quantizer_to_qindex, i64 0, i64 %21
  %23 = load i32, i32* %22, align 4
  %24 = icmp slt i32 %23, %0
  br i1 %24, label %25, label %12

25:                                               ; preds = %20
  %26 = add nuw nsw i64 %3, 4
  %27 = icmp eq i64 %26, 64
  br i1 %27, label %12, label %2
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
