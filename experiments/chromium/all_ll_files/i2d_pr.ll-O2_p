; ModuleID = '../../third_party/boringssl/src/crypto/x509/i2d_pr.c'
source_filename = "../../third_party/boringssl/src/crypto/x509/i2d_pr.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.rsa_st = type { %struct.rsa_meth_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.crypto_ex_data_st, i32, i32, %union.crypto_mutex_st, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, i32, %struct.bn_blinding_st**, i8*, i64, i8 }
%struct.rsa_meth_st = type { %struct.openssl_method_common_st, i8*, i32 (%struct.rsa_st*)*, i32 (%struct.rsa_st*)*, i64 (%struct.rsa_st*)*, i32 (i32, i8*, i32, i8*, i32*, %struct.rsa_st*)*, i32 (%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32)*, i32 (%struct.rsa_st*, i64*, i8*, i64, i8*, i64, i32)*, i32 (%struct.rsa_st*, i8*, i8*, i64)*, i32 }
%struct.openssl_method_common_st = type { i32, i8 }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.bn_mont_ctx_st = type { %struct.bignum_st, %struct.bignum_st, [2 x i64] }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
%struct.bn_blinding_st = type opaque
%struct.ec_key_st = type opaque
%struct.dsa_st = type { i64, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, i32, %union.crypto_mutex_st, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, i32, %struct.crypto_ex_data_st }

@.str = private unnamed_addr constant [53 x i8] c"../../third_party/boringssl/src/crypto/x509/i2d_pr.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @i2d_PrivateKey(%struct.evp_pkey_st*, i8**) local_unnamed_addr #0 {
  %3 = tail call i32 @EVP_PKEY_id(%struct.evp_pkey_st* %0) #2
  switch i32 %3, label %19 [
    i32 6, label %4
    i32 408, label %9
    i32 116, label %14
  ]

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %0, i64 0, i32 2
  %6 = bitcast %union.anon* %5 to %struct.rsa_st**
  %7 = load %struct.rsa_st*, %struct.rsa_st** %6, align 8
  %8 = tail call i32 @i2d_RSAPrivateKey(%struct.rsa_st* %7, i8** %1) #2
  br label %20

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %0, i64 0, i32 2
  %11 = bitcast %union.anon* %10 to %struct.ec_key_st**
  %12 = load %struct.ec_key_st*, %struct.ec_key_st** %11, align 8
  %13 = tail call i32 @i2d_ECPrivateKey(%struct.ec_key_st* %12, i8** %1) #2
  br label %20

14:                                               ; preds = %2
  %15 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %0, i64 0, i32 2
  %16 = bitcast %union.anon* %15 to %struct.dsa_st**
  %17 = load %struct.dsa_st*, %struct.dsa_st** %16, align 8
  %18 = tail call i32 @i2d_DSAPrivateKey(%struct.dsa_st* %17, i8** %1) #2
  br label %20

19:                                               ; preds = %2
  tail call void @ERR_put_error(i32 12, i32 0, i32 187, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0), i32 80) #2
  br label %20

20:                                               ; preds = %19, %14, %9, %4
  %21 = phi i32 [ -1, %19 ], [ %18, %14 ], [ %13, %9 ], [ %8, %4 ]
  ret i32 %21
}

declare i32 @EVP_PKEY_id(%struct.evp_pkey_st*) local_unnamed_addr #1

declare i32 @i2d_RSAPrivateKey(%struct.rsa_st*, i8**) local_unnamed_addr #1

declare i32 @i2d_ECPrivateKey(%struct.ec_key_st*, i8**) local_unnamed_addr #1

declare i32 @i2d_DSAPrivateKey(%struct.dsa_st*, i8**) local_unnamed_addr #1

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
