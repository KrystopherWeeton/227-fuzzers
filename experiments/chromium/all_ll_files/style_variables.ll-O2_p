; ModuleID = '../../third_party/blink/renderer/core/style/style_variables.cc'
source_filename = "../../third_party/blink/renderer/core/style/style_variables.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.146", %"class.std::__1::unique_ptr.146", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.156", %"class.std::__1::unique_ptr.162", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.174", %"class.std::__1::unique_ptr.180", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.187", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.19", %"class.std::__1::unique_ptr.25", %"class.std::__1::unique_ptr.31", %"class.std::__1::unique_ptr.37", %"class.std::__1::unique_ptr.43", %"class.std::__1::unique_ptr.54", %"class.std::__1::unique_ptr.61", %"class.std::__1::unique_ptr.61", %"class.std::__1::unique_ptr.68", %"class.std::__1::unique_ptr.75", %"class.std::__1::unique_ptr.82", %"class.std::__1::unique_ptr.82", %"class.std::__1::unique_ptr.89", %"class.std::__1::unique_ptr.96", %"class.std::__1::unique_ptr.103", %"class.std::__1::unique_ptr.126", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.25" = type { %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.46" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.46" = type { %"struct.std::__1::__atomic_base.47" }
%"struct.std::__1::__atomic_base.47" = type { %"struct.std::__1::__atomic_base.48" }
%"struct.std::__1::__atomic_base.48" = type { %"struct.std::__1::__cxx_atomic_impl.49" }
%"struct.std::__1::__cxx_atomic_impl.49" = type { %"struct.std::__1::__cxx_atomic_base_impl.50" }
%"struct.std::__1::__cxx_atomic_base_impl.50" = type { i64 }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.blink::Worklist.57"* }
%"class.blink::Worklist.57" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.46" }
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"class.blink::Worklist.64"* }
%"class.blink::Worklist.64" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.46" }
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"class.blink::Worklist.71"* }
%"class.blink::Worklist.71" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.46" }
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"class.blink::Worklist.78"* }
%"class.blink::Worklist.78" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.46" }
%"class.std::__1::unique_ptr.82" = type { %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"class.blink::Worklist.85"* }
%"class.blink::Worklist.85" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.46" }
%"class.std::__1::unique_ptr.89" = type { %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"class.blink::Worklist.92"* }
%"class.blink::Worklist.92" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.46" }
%"class.std::__1::unique_ptr.96" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.98" }
%"struct.std::__1::__compressed_pair_elem.98" = type { %"class.blink::Worklist.99"* }
%"class.blink::Worklist.99" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.46" }
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.106", %"class.std::__1::__compressed_pair.113", %"class.std::__1::__compressed_pair.118", %"class.std::__1::__compressed_pair.120", [4 x i8] }>
%"class.std::__1::unique_ptr.106" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108", %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { i64 }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"class.std::__1::__compressed_pair.120" = type { %"struct.std::__1::__compressed_pair_elem.121" }
%"struct.std::__1::__compressed_pair_elem.121" = type { float }
%"class.std::__1::unique_ptr.126" = type { %"class.std::__1::__compressed_pair.127" }
%"class.std::__1::__compressed_pair.127" = type { %"struct.std::__1::__compressed_pair_elem.128" }
%"struct.std::__1::__compressed_pair_elem.128" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.129", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.129" = type { %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.131" }
%"struct.std::__1::__compressed_pair_elem.131" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.138" }
%"class.WTF::Vector.138" = type { %"class.WTF::VectorBuffer.139" }
%"class.WTF::VectorBuffer.139" = type { %"class.WTF::VectorBufferBase.140" }
%"class.WTF::VectorBufferBase.140" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.146" = type { %"class.std::__1::__compressed_pair.147" }
%"class.std::__1::__compressed_pair.147" = type { %"struct.std::__1::__compressed_pair_elem.148" }
%"struct.std::__1::__compressed_pair_elem.148" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.154" }
%"class.WTF::VectorBuffer.154" = type { %"class.WTF::VectorBufferBase.155" }
%"class.WTF::VectorBufferBase.155" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.156" = type { %"class.std::__1::__compressed_pair.157" }
%"class.std::__1::__compressed_pair.157" = type { %"struct.std::__1::__compressed_pair_elem.158" }
%"struct.std::__1::__compressed_pair_elem.158" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.162" = type { %"class.std::__1::__compressed_pair.163" }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.168" }
%"class.std::__1::unique_ptr.168" = type { %"class.std::__1::__compressed_pair.169" }
%"class.std::__1::__compressed_pair.169" = type { %"struct.std::__1::__compressed_pair_elem.170" }
%"struct.std::__1::__compressed_pair_elem.170" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.57"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.64"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.71"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.78"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.85"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.191" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.191" = type { %"struct.std::__1::__compressed_pair_elem.192" }
%"struct.std::__1::__compressed_pair_elem.192" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.174" = type { %"class.std::__1::__compressed_pair.175" }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.186 }
%class.scoped_refptr.186 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.187" = type { %"struct.std::__1::__atomic_base.188" }
%"struct.std::__1::__atomic_base.188" = type { %"struct.std::__1::__cxx_atomic_impl.189" }
%"struct.std::__1::__cxx_atomic_impl.189" = type { %"struct.std::__1::__cxx_atomic_base_impl.190" }
%"struct.std::__1::__cxx_atomic_base_impl.190" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.blink::AtomicEntryFlag" = type { %"struct.std::__1::atomic.255" }
%"struct.std::__1::atomic.255" = type { %"struct.std::__1::__atomic_base.256" }
%"struct.std::__1::__atomic_base.256" = type { %"struct.std::__1::__atomic_base.257" }
%"struct.std::__1::__atomic_base.257" = type { %"struct.std::__1::__cxx_atomic_impl.258" }
%"struct.std::__1::__cxx_atomic_impl.258" = type { %"struct.std::__1::__cxx_atomic_base_impl.259" }
%"struct.std::__1::__cxx_atomic_base_impl.259" = type { i32 }
%"class.blink::StyleVariables" = type { %"class.WTF::HashMap", %"class.blink::Persistent" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::AtomicString", %class.scoped_refptr.1 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.scoped_refptr.1 = type { %"class.blink::CSSVariableData"* }
%"class.blink::CSSVariableData" = type { %"class.WTF::RefCounted", %"class.WTF::Vector", %"class.WTF::Vector.4", %"class.WTF::String", i8, i8, i8, i8, %"class.WTF::String", %"class.WTF::TextEncoding" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::Vector.4" = type { %"class.WTF::VectorBuffer.5" }
%"class.WTF::VectorBuffer.5" = type { %"class.WTF::VectorBufferBase.6" }
%"class.WTF::VectorBufferBase.6" = type { %"class.blink::CSSParserToken"*, i32, i32 }
%"class.blink::CSSParserToken" = type { i24, i32, i8*, %union.anon }
%union.anon = type { double }
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::HeapHashMap"*, %"class.blink::PersistentNodePtr" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.9" }
%"class.WTF::HashMap.9" = type { %"class.WTF::HashTable.10" }
%"class.WTF::HashTable.10" = type <{ %"struct.WTF::KeyValuePair.12"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.12" = type { %"class.WTF::AtomicString", %"class.blink::Member" }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::CSSValue"* }
%"class.blink::CSSValue" = type { i8, i8, i8 }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.absl::optional.198" = type { %"class.absl::optional_internal::optional_data.199" }
%"class.absl::optional_internal::optional_data.199" = type { %"class.absl::optional_internal::optional_data_base.200" }
%"class.absl::optional_internal::optional_data_base.200" = type { %"class.absl::optional_internal::optional_data_dtor_base.201" }
%"class.absl::optional_internal::optional_data_dtor_base.201" = type { i8, %union.anon.202 }
%union.anon.202 = type { %"class.blink::Member" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.204" }
%"class.WTF::HashTable.204" = type <{ %"class.WTF::AtomicString"*, i32, i32, i32, [4 x i8] }>
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.208" }
%"class.std::__1::__compressed_pair.208" = type { %"struct.std::__1::__compressed_pair_elem.209" }
%"struct.std::__1::__compressed_pair_elem.209" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.210 }
%union.anon.210 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.blink::HeapHashTableBacking" = type { i8 }

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE8RehashToEPS7_jSH_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE8ReinsertEOS7_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS9_SE_SF_EERKS1_RKS7_EENS_18HashTableAddResultISG_S7_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE6ExpandEPS7_ = comdat any

$_ZN3WTF12KeyValuePairINS_12AtomicStringE13scoped_refptrIN5blink15CSSVariableDataEEEaSERKS6_ = comdat any

$_ZN5blink15CSSVariableDataD2Ev = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS3_16AtomicStringHashENS3_10HashTraitsIS4_EENSA_IS8_EEEEEEPhm = comdat any

$_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc = comdat any

$_ZN5blink10TraceTraitINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS2_16AtomicStringHashENS2_10HashTraitsIS3_EENS9_IS7_EEEEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink9NameTraitINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS2_16AtomicStringHashENS2_10HashTraitsIS3_EENS9_IS7_EEEEE7GetNameEPKv = comdat any

$_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberIKNS_8CSSValueEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSE_IS9_EEEESF_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv = comdat any

$_ZN3WTF38TraceHashTableBackingInCollectionTraitILNS_16WeakHandlingFlagE0ENS_9HashTableINS_12AtomicStringENS_12KeyValuePairIS3_N5blink6MemberIKNS5_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSE_IS9_EEEESF_NS5_13HeapAllocatorEEEE5TraceEPNS5_7VisitorEPKv = comdat any

$_ZN5blink10TraceTraitINS_8CSSValueEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS3_16AtomicStringHashENS3_10HashTraitsIS4_EENSA_IS8_EEEELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE0EEEXadL_ZNKSG_15TracePersistentEPNS_7VisitorEEEE10TrampolineESI_PKv = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS2_16AtomicStringHashENS2_10HashTraitsIS3_EENS9_IS7_EEEEE4CallIJRSC_EEEPSC_DpOT_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE22ReserveCapacityForSizeEj = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE12ExpandBufferEjPS8_Rb = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE8RehashToEPS8_jSI_ = comdat any

$_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberIKNS_8CSSValueEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSE_IS9_EEEESF_NS_13HeapAllocatorEEEEEE4CallEm = comdat any

$_ZN5blink20HeapHashTableBackingIN3WTF9HashTableINS1_12AtomicStringENS1_12KeyValuePairIS3_NS_6MemberIKNS_8CSSValueEEEEENS1_24KeyValuePairKeyExtractorENS1_16AtomicStringHashENS1_18HashMapValueTraitsINS1_10HashTraitsIS3_EENSD_IS8_EEEESE_NS_13HeapAllocatorEEEE14AllocateObjectISJ_EEPvm = comdat any

$_ZN5blink8internal14FinalizerTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS3_12AtomicStringENS3_12KeyValuePairIS5_NS_6MemberIKNS_8CSSValueEEEEENS3_24KeyValuePairKeyExtractorENS3_16AtomicStringHashENS3_18HashMapValueTraitsINS3_10HashTraitsIS5_EENSF_ISA_EEEESG_NS_13HeapAllocatorEEEEEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberIKNS_8CSSValueEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSE_IS9_EEEESF_NS_13HeapAllocatorEEEEEE7GetNameEPKv = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE6insertINS_22IdentityHashTranslatorISA_SF_SG_EERKS1_RKS8_EENS_18HashTableAddResultISH_S8_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE6ExpandEPS8_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISE_S9_SF_EERKS1_S6_EENS_18HashTableAddResultISG_S7_EEOT0_OT1_ = comdat any

$_ZN3WTF17HashMapTranslatorINS_18HashMapValueTraitsINS_10HashTraitsINS_12AtomicStringEEENS2_I13scoped_refptrIN5blink15CSSVariableDataEEEEEENS_16AtomicStringHashENS_18PartitionAllocatorEE9TranslateINS_12KeyValuePairIS3_S8_EERKS3_S8_EEvRT_OT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE6insertINS_17HashMapTranslatorISF_SA_SG_EERKS1_RPS6_EENS_18HashTableAddResultISH_S8_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_ = comdat any

$_ZZN5blink11GCInfoTraitINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS2_16AtomicStringHashENS2_10HashTraitsIS3_EENS9_IS7_EEEEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS2_16AtomicStringHashENS2_10HashTraitsIS3_EENS9_IS7_EEEEE5IndexEvE13gc_info_index = comdat any

$_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberIKNS_8CSSValueEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSE_IS9_EEEESF_NS_13HeapAllocatorEEEEEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberIKNS_8CSSValueEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSE_IS9_EEEESF_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index = comdat any

@.str = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@.str.1 = private unnamed_addr constant [39 x i8] c"!static_cast<int>( new_capacity >> 31)\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_12AtomicStringE13scoped_refptrIN5blink15CSSVariableDataEEEEEEPKcv = private unnamed_addr constant [124 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<WTF::AtomicString, scoped_refptr<blink::CSSVariableData> >]\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink11HeapHashMapINS_12AtomicStringENS1_6MemberIKNS1_8CSSValueEEENS_16AtomicStringHashENS_10HashTraitsIS3_EENS9_IS7_EEEEEEPKcv = private unnamed_addr constant [239 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::HeapHashMap<WTF::AtomicString, blink::Member<const blink::CSSValue>, WTF::AtomicStringHash, WTF::HashTraits<WTF::AtomicString>, WTF::HashTraits<blink::Member<const blink::CSSValue> > >]\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.4 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS2_16AtomicStringHashENS2_10HashTraitsIS3_EENS9_IS7_EEEEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS2_16AtomicStringHashENS2_10HashTraitsIS3_EENS9_IS7_EEEEE5TraceEPNS_7VisitorEPKv, void (i8*)* null, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS2_16AtomicStringHashENS2_10HashTraitsIS3_EENS9_IS7_EEEEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS2_16AtomicStringHashENS2_10HashTraitsIS3_EENS9_IS7_EEEEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.5 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@.str.6 = private unnamed_addr constant [33 x i8] c"Allocator::IsAllocationAllowed()\00", align 1
@_ZN5blink11ThreadState25incremental_marking_flag_E = external local_unnamed_addr global %"class.blink::AtomicEntryFlag", align 4
@.str.7 = private unnamed_addr constant [18 x i8] c"num_elements > 0u\00", align 1
@.str.8 = private unnamed_addr constant [97 x i8] c"../../third_party/blink/renderer/platform/heap/impl/collection_support/heap_hash_table_backing.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberIKNS_8CSSValueEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSE_IS9_EEEESF_NS_13HeapAllocatorEEEEEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberIKNS_8CSSValueEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSE_IS9_EEEESF_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS3_12AtomicStringENS3_12KeyValuePairIS5_NS_6MemberIKNS_8CSSValueEEEEENS3_24KeyValuePairKeyExtractorENS3_16AtomicStringHashENS3_18HashMapValueTraitsINS3_10HashTraitsIS5_EENSF_ISA_EEEESG_NS_13HeapAllocatorEEEEEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberIKNS_8CSSValueEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSE_IS9_EEEESF_NS_13HeapAllocatorEEEEEE7GetNameEPKv, i8 0 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberIKNS_8CSSValueEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSE_IS9_EEEESF_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink20HeapHashTableBackingINS_9HashTableINS_12AtomicStringENS_12KeyValuePairIS4_NS1_6MemberIKNS1_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSE_IS9_EEEESF_NS1_13HeapAllocatorEEEEEEEPKcv = private unnamed_addr constant [418 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::HeapHashTableBacking<WTF::HashTable<WTF::AtomicString, WTF::KeyValuePair<WTF::AtomicString, blink::Member<const blink::CSSValue> >, WTF::KeyValuePairKeyExtractor, WTF::AtomicStringHash, WTF::HashMapValueTraits<WTF::HashTraits<WTF::AtomicString>, WTF::HashTraits<blink::Member<const blink::CSSValue> > >, WTF::HashTraits<WTF::AtomicString>, blink::HeapAllocator> >]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv = private unnamed_addr constant [65 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::AtomicString]\00", align 1

@_ZN5blink14StyleVariablesC1Ev = hidden unnamed_addr alias void (%"class.blink::StyleVariables"*), void (%"class.blink::StyleVariables"*)* @_ZN5blink14StyleVariablesC2Ev
@_ZN5blink14StyleVariablesC1ERKS0_ = hidden unnamed_addr alias void (%"class.blink::StyleVariables"*, %"class.blink::StyleVariables"*), void (%"class.blink::StyleVariables"*, %"class.blink::StyleVariables"*)* @_ZN5blink14StyleVariablesC2ERKS0_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink14StyleVariablesC2Ev(%"class.blink::StyleVariables"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.blink::StyleVariables"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 20, i1 false) #9
  %3 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %0, i64 0, i32 1
  %4 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS3_16AtomicStringHashENS3_10HashTraitsIS4_EENSA_IS8_EEEEEEPhm(i64 24) #9
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 20, i1 false) #9
  %5 = getelementptr inbounds i8, i8* %4, i64 -4
  %6 = bitcast i8* %5 to i16*
  %7 = load atomic i16, i16* %6 monotonic, align 2
  %8 = or i16 %7, 1
  store atomic i16 %8, i16* %6 release, align 2
  %9 = getelementptr inbounds %"class.blink::Persistent", %"class.blink::Persistent"* %3, i64 0, i32 0
  %10 = bitcast %"class.blink::Persistent"* %3 to i8**
  store i8* %4, i8** %10, align 8
  %11 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %0, i64 0, i32 1, i32 0, i32 1, i32 0
  store %"class.blink::PersistentNode"* null, %"class.blink::PersistentNode"** %11, align 8
  %12 = ptrtoint i8* %4 to i64
  switch i64 %12, label %13 [
    i64 0, label %39
    i64 -1, label %39
  ]

13:                                               ; preds = %1
  %14 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %15 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %14, i64 0, i32 1
  %16 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %15) #9
  %17 = icmp eq i8* %16, null
  br i1 %17, label %18, label %20, !prof !2

18:                                               ; preds = %13
  %19 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %15, i8* %19) #9
  br label %20

20:                                               ; preds = %18, %13
  %21 = phi i8* [ %19, %18 ], [ %16, %13 ]
  %22 = bitcast i8* %21 to %"class.blink::ThreadState"**
  %23 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %22, align 8
  %24 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %23, i64 0, i32 3, i32 0, i32 0, i32 0
  %25 = load %"class.blink::PersistentRegion"*, %"class.blink::PersistentRegion"** %24, align 8
  %26 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %25, i64 0, i32 0, i32 0
  %27 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %26, align 8
  %28 = icmp eq %"class.blink::PersistentNode"* %27, null
  br i1 %28, label %29, label %32, !prof !2

29:                                               ; preds = %20
  %30 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %25, i64 0, i32 0
  tail call void @_ZN5blink20PersistentRegionBase15EnsureNodeSlotsEv(%"class.blink::PersistentRegionBase"* %30) #9
  %31 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %26, align 8
  br label %32

32:                                               ; preds = %29, %20
  %33 = phi %"class.blink::PersistentNode"* [ %31, %29 ], [ %27, %20 ]
  %34 = bitcast %"class.blink::PersistentNode"* %33 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = bitcast %"class.blink::PersistentRegion"* %25 to i64*
  store i64 %35, i64* %36, align 8
  %37 = bitcast %"class.blink::PersistentNode"* %33 to %"class.blink::PersistentBase"**
  store %"class.blink::PersistentBase"* %9, %"class.blink::PersistentBase"** %37, align 8
  %38 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %33, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS3_16AtomicStringHashENS3_10HashTraitsIS4_EENSA_IS8_EEEELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE0EEEXadL_ZNKSG_15TracePersistentEPNS_7VisitorEEEE10TrampolineESI_PKv, void (%"class.blink::Visitor"*, i8*)** %38, align 8
  store %"class.blink::PersistentNode"* %33, %"class.blink::PersistentNode"** %11, align 8
  br label %39

39:                                               ; preds = %1, %1, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink14StyleVariablesC2ERKS0_(%"class.blink::StyleVariables"*, %"class.blink::StyleVariables"* nocapture readonly dereferenceable(40)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %0, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %1, i64 0, i32 0, i32 0, i32 2
  %5 = bitcast %"class.blink::StyleVariables"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 20, i1 false) #9
  %6 = load i32, i32* %4, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %44, label %8

8:                                                ; preds = %2
  tail call void @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable"* %3, i32 %6) #9
  %9 = load i32, i32* %4, align 4
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %1, i64 0, i32 0, i32 0, i32 0
  %12 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %11, align 8
  %13 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %1, i64 0, i32 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %12, i64 %15
  br i1 %10, label %44, label %17

17:                                               ; preds = %8
  %18 = icmp eq i32 %14, 0
  br i1 %18, label %26, label %19

19:                                               ; preds = %17, %23
  %20 = phi %"struct.WTF::KeyValuePair"* [ %24, %23 ], [ %12, %17 ]
  %21 = bitcast %"struct.WTF::KeyValuePair"* %20 to i64*
  %22 = load i64, i64* %21, align 8
  switch i64 %22, label %26 [
    i64 -1, label %23
    i64 0, label %23
  ]

23:                                               ; preds = %19, %19
  %24 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %20, i64 1
  %25 = icmp eq %"struct.WTF::KeyValuePair"* %24, %16
  br i1 %25, label %44, label %19

26:                                               ; preds = %19, %17
  %27 = phi %"struct.WTF::KeyValuePair"* [ %12, %17 ], [ %20, %19 ]
  %28 = icmp eq %"struct.WTF::KeyValuePair"* %27, %16
  br i1 %28, label %44, label %29

29:                                               ; preds = %26, %42
  %30 = phi %"struct.WTF::KeyValuePair"* [ %36, %42 ], [ %27, %26 ]
  %31 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 0, i32 0
  %32 = tail call { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS9_SE_SF_EERKS1_RKS7_EENS_18HashTableAddResultISG_S7_EEOT0_OT1_(%"class.WTF::HashTable"* %3, %"class.WTF::AtomicString"* dereferenceable(8) %31, %"struct.WTF::KeyValuePair"* dereferenceable(16) %30) #9
  %33 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %30, i64 1
  %34 = icmp eq %"struct.WTF::KeyValuePair"* %33, %16
  br i1 %34, label %44, label %35

35:                                               ; preds = %29, %39
  %36 = phi %"struct.WTF::KeyValuePair"* [ %40, %39 ], [ %33, %29 ]
  %37 = bitcast %"struct.WTF::KeyValuePair"* %36 to i64*
  %38 = load i64, i64* %37, align 8
  switch i64 %38, label %42 [
    i64 -1, label %39
    i64 0, label %39
  ]

39:                                               ; preds = %35, %35
  %40 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %36, i64 1
  %41 = icmp eq %"struct.WTF::KeyValuePair"* %40, %16
  br i1 %41, label %44, label %35

42:                                               ; preds = %35
  %43 = icmp eq %"struct.WTF::KeyValuePair"* %36, %16
  br i1 %43, label %44, label %29

44:                                               ; preds = %23, %29, %42, %39, %2, %8, %26
  %45 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %0, i64 0, i32 1
  %46 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %1, i64 0, i32 1, i32 0, i32 0
  %47 = load %"class.blink::HeapHashMap"*, %"class.blink::HeapHashMap"** %46, align 8
  %48 = tail call %"class.blink::HeapHashMap"* @_ZN5blink25MakeGarbageCollectedTraitINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS2_16AtomicStringHashENS2_10HashTraitsIS3_EENS9_IS7_EEEEE4CallIJRSC_EEEPSC_DpOT_(%"class.blink::HeapHashMap"* dereferenceable(24) %47) #9
  %49 = getelementptr inbounds %"class.blink::Persistent", %"class.blink::Persistent"* %45, i64 0, i32 0
  %50 = getelementptr inbounds %"class.blink::Persistent", %"class.blink::Persistent"* %45, i64 0, i32 0, i32 0
  store %"class.blink::HeapHashMap"* %48, %"class.blink::HeapHashMap"** %50, align 8
  %51 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %0, i64 0, i32 1, i32 0, i32 1, i32 0
  store %"class.blink::PersistentNode"* null, %"class.blink::PersistentNode"** %51, align 8
  %52 = ptrtoint %"class.blink::HeapHashMap"* %48 to i64
  switch i64 %52, label %53 [
    i64 0, label %79
    i64 -1, label %79
  ]

53:                                               ; preds = %44
  %54 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %55 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %54, i64 0, i32 1
  %56 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %55) #9
  %57 = icmp eq i8* %56, null
  br i1 %57, label %58, label %60, !prof !2

58:                                               ; preds = %53
  %59 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %55, i8* %59) #9
  br label %60

60:                                               ; preds = %58, %53
  %61 = phi i8* [ %59, %58 ], [ %56, %53 ]
  %62 = bitcast i8* %61 to %"class.blink::ThreadState"**
  %63 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %62, align 8
  %64 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %63, i64 0, i32 3, i32 0, i32 0, i32 0
  %65 = load %"class.blink::PersistentRegion"*, %"class.blink::PersistentRegion"** %64, align 8
  %66 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %65, i64 0, i32 0, i32 0
  %67 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %66, align 8
  %68 = icmp eq %"class.blink::PersistentNode"* %67, null
  br i1 %68, label %69, label %72, !prof !2

69:                                               ; preds = %60
  %70 = getelementptr inbounds %"class.blink::PersistentRegion", %"class.blink::PersistentRegion"* %65, i64 0, i32 0
  tail call void @_ZN5blink20PersistentRegionBase15EnsureNodeSlotsEv(%"class.blink::PersistentRegionBase"* %70) #9
  %71 = load %"class.blink::PersistentNode"*, %"class.blink::PersistentNode"** %66, align 8
  br label %72

72:                                               ; preds = %69, %60
  %73 = phi %"class.blink::PersistentNode"* [ %71, %69 ], [ %67, %60 ]
  %74 = bitcast %"class.blink::PersistentNode"* %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = bitcast %"class.blink::PersistentRegion"* %65 to i64*
  store i64 %75, i64* %76, align 8
  %77 = bitcast %"class.blink::PersistentNode"* %73 to %"class.blink::PersistentBase"**
  store %"class.blink::PersistentBase"* %49, %"class.blink::PersistentBase"** %77, align 8
  %78 = getelementptr inbounds %"class.blink::PersistentNode", %"class.blink::PersistentNode"* %73, i64 0, i32 1
  store void (%"class.blink::Visitor"*, i8*)* @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS3_16AtomicStringHashENS3_10HashTraitsIS4_EENSA_IS8_EEEELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE0EEEXadL_ZNKSG_15TracePersistentEPNS_7VisitorEEEE10TrampolineESI_PKv, void (%"class.blink::Visitor"*, i8*)** %78, align 8
  store %"class.blink::PersistentNode"* %73, %"class.blink::PersistentNode"** %51, align 8
  br label %79

79:                                               ; preds = %44, %44, %72
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink14StyleVariableseqERKS0_(%"class.blink::StyleVariables"* nocapture readonly, %"class.blink::StyleVariables"* nocapture readonly dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %1, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %413

8:                                                ; preds = %2
  %9 = icmp eq i32 %4, 0
  %10 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %0, i64 0, i32 0, i32 0, i32 0
  %11 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %0, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %14
  br i1 %9, label %201, label %16

16:                                               ; preds = %8
  %17 = icmp eq i32 %13, 0
  br i1 %17, label %25, label %18

18:                                               ; preds = %16, %22
  %19 = phi %"struct.WTF::KeyValuePair"* [ %23, %22 ], [ %11, %16 ]
  %20 = bitcast %"struct.WTF::KeyValuePair"* %19 to i64*
  %21 = load i64, i64* %20, align 8
  switch i64 %21, label %25 [
    i64 -1, label %22
    i64 0, label %22
  ]

22:                                               ; preds = %18, %18
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %19, i64 1
  %24 = icmp eq %"struct.WTF::KeyValuePair"* %23, %15
  br i1 %24, label %201, label %18

25:                                               ; preds = %18, %16
  %26 = phi %"struct.WTF::KeyValuePair"* [ %11, %16 ], [ %19, %18 ]
  %27 = icmp eq %"struct.WTF::KeyValuePair"* %26, %15
  br i1 %27, label %201, label %28

28:                                               ; preds = %25
  %29 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %1, i64 0, i32 0, i32 0, i32 0
  %30 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %1, i64 0, i32 0, i32 0, i32 1
  br label %31

31:                                               ; preds = %198, %28
  %32 = phi i32 [ %13, %28 ], [ %200, %198 ]
  %33 = phi %"struct.WTF::KeyValuePair"* [ %11, %28 ], [ %199, %198 ]
  %34 = phi %"struct.WTF::KeyValuePair"* [ %26, %28 ], [ %190, %198 ]
  %35 = icmp eq %"struct.WTF::KeyValuePair"* %33, null
  br i1 %35, label %87, label %36

36:                                               ; preds = %31
  %37 = add i32 %32, -1
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %34, i64 0, i32 0, i32 0, i32 0, i32 0
  %40 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load atomic i32, i32* %41 monotonic, align 4
  %43 = lshr i32 %42, 8
  %44 = and i32 %43, %37
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %33, i64 %45
  %47 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %46, i64 0, i32 0, i32 0, i32 0, i32 0
  %48 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %47, align 8
  %49 = icmp eq %"class.WTF::StringImpl"* %48, null
  br i1 %49, label %87, label %50

50:                                               ; preds = %36
  %51 = xor i32 %43, -1
  %52 = lshr i32 %42, 31
  %53 = add nsw i32 %52, %51
  %54 = shl i32 %53, 12
  %55 = xor i32 %54, %53
  %56 = lshr i32 %55, 7
  %57 = xor i32 %56, %55
  %58 = shl i32 %57, 2
  %59 = xor i32 %58, %57
  %60 = lshr i32 %59, 20
  %61 = xor i32 %60, %59
  %62 = or i32 %61, 1
  %63 = zext i32 %62 to i64
  br label %64

64:                                               ; preds = %74, %50
  %65 = phi %"struct.WTF::KeyValuePair"* [ %46, %50 ], [ %79, %74 ]
  %66 = phi i64 [ %45, %50 ], [ %78, %74 ]
  %67 = phi i64 [ 0, %50 ], [ %76, %74 ]
  %68 = bitcast %"struct.WTF::KeyValuePair"* %65 to i8**
  %69 = load i8*, i8** %68, align 8
  %70 = icmp ne i8* %69, inttoptr (i64 -1 to i8*)
  %71 = bitcast i8* %69 to %"class.WTF::StringImpl"*
  %72 = icmp eq %"class.WTF::StringImpl"* %40, %71
  %73 = and i1 %70, %72
  br i1 %73, label %83, label %74

74:                                               ; preds = %64
  %75 = icmp eq i64 %67, 0
  %76 = select i1 %75, i64 %63, i64 %67
  %77 = add i64 %76, %66
  %78 = and i64 %77, %38
  %79 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %33, i64 %78
  %80 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %79, i64 0, i32 0, i32 0, i32 0, i32 0
  %81 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %80, align 8
  %82 = icmp eq %"class.WTF::StringImpl"* %81, null
  br i1 %82, label %87, label %64

83:                                               ; preds = %64
  %84 = icmp eq %"struct.WTF::KeyValuePair"* %65, null
  br i1 %84, label %87, label %85

85:                                               ; preds = %83
  %86 = zext i32 %32 to i64
  br label %90

87:                                               ; preds = %74, %83, %36, %31
  %88 = zext i32 %32 to i64
  %89 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %33, i64 %88
  br label %90

90:                                               ; preds = %87, %85
  %91 = phi i64 [ %86, %85 ], [ %88, %87 ]
  %92 = phi %"struct.WTF::KeyValuePair"* [ %65, %85 ], [ %89, %87 ]
  %93 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %33, i64 %91
  %94 = icmp eq %"struct.WTF::KeyValuePair"* %92, %93
  br i1 %94, label %98, label %95

95:                                               ; preds = %90
  %96 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %92, i64 0, i32 1, i32 0
  %97 = load %"class.blink::CSSVariableData"*, %"class.blink::CSSVariableData"** %96, align 8
  br label %98

98:                                               ; preds = %90, %95
  %99 = phi i8 [ 1, %95 ], [ 0, %90 ]
  %100 = phi %"class.blink::CSSVariableData"* [ %97, %95 ], [ undef, %90 ]
  %101 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %29, align 8
  %102 = icmp eq %"struct.WTF::KeyValuePair"* %101, null
  %103 = load i32, i32* %30, align 8
  br i1 %102, label %155, label %104

104:                                              ; preds = %98
  %105 = add i32 %103, -1
  %106 = zext i32 %105 to i64
  %107 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %34, i64 0, i32 0, i32 0, i32 0, i32 0
  %108 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %107, align 8
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %108, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = load atomic i32, i32* %109 monotonic, align 4
  %111 = lshr i32 %110, 8
  %112 = and i32 %111, %105
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %101, i64 %113
  %115 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %114, i64 0, i32 0, i32 0, i32 0, i32 0
  %116 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %115, align 8
  %117 = icmp eq %"class.WTF::StringImpl"* %116, null
  br i1 %117, label %155, label %118

118:                                              ; preds = %104
  %119 = xor i32 %111, -1
  %120 = lshr i32 %110, 31
  %121 = add nsw i32 %120, %119
  %122 = shl i32 %121, 12
  %123 = xor i32 %122, %121
  %124 = lshr i32 %123, 7
  %125 = xor i32 %124, %123
  %126 = shl i32 %125, 2
  %127 = xor i32 %126, %125
  %128 = lshr i32 %127, 20
  %129 = xor i32 %128, %127
  %130 = or i32 %129, 1
  %131 = zext i32 %130 to i64
  br label %132

132:                                              ; preds = %142, %118
  %133 = phi %"struct.WTF::KeyValuePair"* [ %114, %118 ], [ %147, %142 ]
  %134 = phi i64 [ %113, %118 ], [ %146, %142 ]
  %135 = phi i64 [ 0, %118 ], [ %144, %142 ]
  %136 = bitcast %"struct.WTF::KeyValuePair"* %133 to i8**
  %137 = load i8*, i8** %136, align 8
  %138 = icmp ne i8* %137, inttoptr (i64 -1 to i8*)
  %139 = bitcast i8* %137 to %"class.WTF::StringImpl"*
  %140 = icmp eq %"class.WTF::StringImpl"* %108, %139
  %141 = and i1 %138, %140
  br i1 %141, label %151, label %142

142:                                              ; preds = %132
  %143 = icmp eq i64 %135, 0
  %144 = select i1 %143, i64 %131, i64 %135
  %145 = add i64 %144, %134
  %146 = and i64 %145, %106
  %147 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %101, i64 %146
  %148 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %147, i64 0, i32 0, i32 0, i32 0, i32 0
  %149 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %148, align 8
  %150 = icmp eq %"class.WTF::StringImpl"* %149, null
  br i1 %150, label %155, label %132

151:                                              ; preds = %132
  %152 = icmp eq %"struct.WTF::KeyValuePair"* %133, null
  br i1 %152, label %155, label %153

153:                                              ; preds = %151
  %154 = zext i32 %103 to i64
  br label %158

155:                                              ; preds = %142, %151, %104, %98
  %156 = zext i32 %103 to i64
  %157 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %101, i64 %156
  br label %158

158:                                              ; preds = %155, %153
  %159 = phi i64 [ %154, %153 ], [ %156, %155 ]
  %160 = phi %"struct.WTF::KeyValuePair"* [ %133, %153 ], [ %157, %155 ]
  %161 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %101, i64 %159
  %162 = icmp eq %"struct.WTF::KeyValuePair"* %160, %161
  br i1 %162, label %166, label %163

163:                                              ; preds = %158
  %164 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %160, i64 0, i32 1, i32 0
  %165 = load %"class.blink::CSSVariableData"*, %"class.blink::CSSVariableData"** %164, align 8
  br label %166

166:                                              ; preds = %158, %163
  %167 = phi i8 [ 1, %163 ], [ 0, %158 ]
  %168 = phi %"class.blink::CSSVariableData"* [ %165, %163 ], [ undef, %158 ]
  %169 = icmp ne i8 %99, 0
  %170 = icmp ne i8 %167, 0
  %171 = xor i1 %169, %170
  %172 = xor i1 %169, true
  %173 = or i1 %171, %172
  br i1 %173, label %185, label %174

174:                                              ; preds = %166
  %175 = icmp eq i8 %167, 0
  br i1 %175, label %176, label %177

176:                                              ; preds = %174
  tail call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #10
  unreachable

177:                                              ; preds = %174
  %178 = icmp eq %"class.blink::CSSVariableData"* %100, %168
  br i1 %178, label %186, label %179

179:                                              ; preds = %177
  %180 = icmp ne %"class.blink::CSSVariableData"* %100, null
  %181 = icmp ne %"class.blink::CSSVariableData"* %168, null
  %182 = and i1 %180, %181
  br i1 %182, label %183, label %413

183:                                              ; preds = %179
  %184 = tail call zeroext i1 @_ZNK5blink15CSSVariableDataeqERKS0_(%"class.blink::CSSVariableData"* nonnull %100, %"class.blink::CSSVariableData"* nonnull dereferenceable(72) %168) #9
  br i1 %184, label %186, label %413

185:                                              ; preds = %166
  br i1 %171, label %413, label %186

186:                                              ; preds = %185, %177, %183
  %187 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %34, i64 1
  %188 = icmp eq %"struct.WTF::KeyValuePair"* %187, %15
  br i1 %188, label %201, label %189

189:                                              ; preds = %186, %193
  %190 = phi %"struct.WTF::KeyValuePair"* [ %194, %193 ], [ %187, %186 ]
  %191 = bitcast %"struct.WTF::KeyValuePair"* %190 to i64*
  %192 = load i64, i64* %191, align 8
  switch i64 %192, label %196 [
    i64 -1, label %193
    i64 0, label %193
  ]

193:                                              ; preds = %189, %189
  %194 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %190, i64 1
  %195 = icmp eq %"struct.WTF::KeyValuePair"* %194, %15
  br i1 %195, label %201, label %189

196:                                              ; preds = %189
  %197 = icmp eq %"struct.WTF::KeyValuePair"* %190, %15
  br i1 %197, label %201, label %198

198:                                              ; preds = %196
  %199 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %10, align 8
  %200 = load i32, i32* %12, align 8
  br label %31

201:                                              ; preds = %22, %186, %196, %193, %8, %25
  %202 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %0, i64 0, i32 1, i32 0, i32 0
  %203 = load %"class.blink::HeapHashMap"*, %"class.blink::HeapHashMap"** %202, align 8
  %204 = getelementptr inbounds %"class.blink::HeapHashMap", %"class.blink::HeapHashMap"* %203, i64 0, i32 0, i32 0, i32 2
  %205 = load i32, i32* %204, align 4
  %206 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %1, i64 0, i32 1, i32 0, i32 0
  %207 = load %"class.blink::HeapHashMap"*, %"class.blink::HeapHashMap"** %206, align 8
  %208 = getelementptr inbounds %"class.blink::HeapHashMap", %"class.blink::HeapHashMap"* %207, i64 0, i32 0, i32 0, i32 2
  %209 = load i32, i32* %208, align 4
  %210 = icmp eq i32 %205, %209
  br i1 %210, label %211, label %413

211:                                              ; preds = %201
  %212 = icmp eq i32 %205, 0
  %213 = getelementptr inbounds %"class.blink::HeapHashMap", %"class.blink::HeapHashMap"* %203, i64 0, i32 0, i32 0, i32 0
  %214 = load %"struct.WTF::KeyValuePair.12"*, %"struct.WTF::KeyValuePair.12"** %213, align 8
  %215 = getelementptr inbounds %"class.blink::HeapHashMap", %"class.blink::HeapHashMap"* %203, i64 0, i32 0, i32 0, i32 1
  %216 = load i32, i32* %215, align 8
  %217 = zext i32 %216 to i64
  %218 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %214, i64 %217
  br i1 %212, label %413, label %219

219:                                              ; preds = %211
  %220 = icmp eq i32 %216, 0
  br i1 %220, label %228, label %221

221:                                              ; preds = %219, %225
  %222 = phi %"struct.WTF::KeyValuePair.12"* [ %226, %225 ], [ %214, %219 ]
  %223 = bitcast %"struct.WTF::KeyValuePair.12"* %222 to i64*
  %224 = load i64, i64* %223, align 8
  switch i64 %224, label %228 [
    i64 -1, label %225
    i64 0, label %225
  ]

225:                                              ; preds = %221, %221
  %226 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %222, i64 1
  %227 = icmp eq %"struct.WTF::KeyValuePair.12"* %226, %218
  br i1 %227, label %413, label %221

228:                                              ; preds = %221, %219
  %229 = phi %"struct.WTF::KeyValuePair.12"* [ %214, %219 ], [ %222, %221 ]
  %230 = icmp eq %"struct.WTF::KeyValuePair.12"* %229, %218
  br i1 %230, label %413, label %231

231:                                              ; preds = %228, %407
  %232 = phi i32 [ %412, %407 ], [ %216, %228 ]
  %233 = phi %"struct.WTF::KeyValuePair.12"* [ %410, %407 ], [ %214, %228 ]
  %234 = phi i64 [ %374, %407 ], [ undef, %228 ]
  %235 = phi i64 [ %302, %407 ], [ undef, %228 ]
  %236 = phi %"struct.WTF::KeyValuePair.12"* [ %399, %407 ], [ %229, %228 ]
  %237 = icmp eq %"struct.WTF::KeyValuePair.12"* %233, null
  br i1 %237, label %289, label %238

238:                                              ; preds = %231
  %239 = add i32 %232, -1
  %240 = zext i32 %239 to i64
  %241 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %236, i64 0, i32 0, i32 0, i32 0, i32 0
  %242 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %241, align 8, !noalias !3
  %243 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %242, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %244 = load atomic i32, i32* %243 monotonic, align 4, !noalias !3
  %245 = lshr i32 %244, 8
  %246 = and i32 %245, %239
  %247 = zext i32 %246 to i64
  %248 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %233, i64 %247
  %249 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %248, i64 0, i32 0, i32 0, i32 0, i32 0
  %250 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %249, align 8, !noalias !3
  %251 = icmp eq %"class.WTF::StringImpl"* %250, null
  br i1 %251, label %289, label %252

252:                                              ; preds = %238
  %253 = xor i32 %245, -1
  %254 = lshr i32 %244, 31
  %255 = add nsw i32 %254, %253
  %256 = shl i32 %255, 12
  %257 = xor i32 %256, %255
  %258 = lshr i32 %257, 7
  %259 = xor i32 %258, %257
  %260 = shl i32 %259, 2
  %261 = xor i32 %260, %259
  %262 = lshr i32 %261, 20
  %263 = xor i32 %262, %261
  %264 = or i32 %263, 1
  %265 = zext i32 %264 to i64
  br label %266

266:                                              ; preds = %276, %252
  %267 = phi %"struct.WTF::KeyValuePair.12"* [ %248, %252 ], [ %281, %276 ]
  %268 = phi i64 [ %247, %252 ], [ %280, %276 ]
  %269 = phi i64 [ 0, %252 ], [ %278, %276 ]
  %270 = bitcast %"struct.WTF::KeyValuePair.12"* %267 to i8**
  %271 = load i8*, i8** %270, align 8, !noalias !3
  %272 = icmp ne i8* %271, inttoptr (i64 -1 to i8*)
  %273 = bitcast i8* %271 to %"class.WTF::StringImpl"*
  %274 = icmp eq %"class.WTF::StringImpl"* %242, %273
  %275 = and i1 %272, %274
  br i1 %275, label %285, label %276

276:                                              ; preds = %266
  %277 = icmp eq i64 %269, 0
  %278 = select i1 %277, i64 %265, i64 %269
  %279 = add i64 %278, %268
  %280 = and i64 %279, %240
  %281 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %233, i64 %280
  %282 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %281, i64 0, i32 0, i32 0, i32 0, i32 0
  %283 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %282, align 8, !noalias !3
  %284 = icmp eq %"class.WTF::StringImpl"* %283, null
  br i1 %284, label %289, label %266

285:                                              ; preds = %266
  %286 = icmp eq %"struct.WTF::KeyValuePair.12"* %267, null
  br i1 %286, label %289, label %287

287:                                              ; preds = %285
  %288 = zext i32 %232 to i64
  br label %292

289:                                              ; preds = %276, %285, %238, %231
  %290 = zext i32 %232 to i64
  %291 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %233, i64 %290
  br label %292

292:                                              ; preds = %289, %287
  %293 = phi i64 [ %288, %287 ], [ %290, %289 ]
  %294 = phi %"struct.WTF::KeyValuePair.12"* [ %267, %287 ], [ %291, %289 ]
  %295 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %233, i64 %293
  %296 = icmp eq %"struct.WTF::KeyValuePair.12"* %294, %295
  br i1 %296, label %301, label %297

297:                                              ; preds = %292
  %298 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %294, i64 0, i32 1
  %299 = bitcast %"class.blink::Member"* %298 to i64*
  %300 = load i64, i64* %299, align 8, !noalias !3
  br label %301

301:                                              ; preds = %292, %297
  %302 = phi i64 [ %300, %297 ], [ %235, %292 ]
  %303 = phi i8 [ 1, %297 ], [ 0, %292 ]
  %304 = load %"class.blink::HeapHashMap"*, %"class.blink::HeapHashMap"** %206, align 8, !noalias !6
  %305 = getelementptr inbounds %"class.blink::HeapHashMap", %"class.blink::HeapHashMap"* %304, i64 0, i32 0, i32 0, i32 0
  %306 = load %"struct.WTF::KeyValuePair.12"*, %"struct.WTF::KeyValuePair.12"** %305, align 8, !noalias !6
  %307 = icmp eq %"struct.WTF::KeyValuePair.12"* %306, null
  %308 = getelementptr inbounds %"class.blink::HeapHashMap", %"class.blink::HeapHashMap"* %304, i64 0, i32 0, i32 0, i32 1
  %309 = load i32, i32* %308, align 8, !noalias !6
  br i1 %307, label %361, label %310

310:                                              ; preds = %301
  %311 = add i32 %309, -1
  %312 = zext i32 %311 to i64
  %313 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %236, i64 0, i32 0, i32 0, i32 0, i32 0
  %314 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %313, align 8, !noalias !6
  %315 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %314, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %316 = load atomic i32, i32* %315 monotonic, align 4, !noalias !6
  %317 = lshr i32 %316, 8
  %318 = and i32 %317, %311
  %319 = zext i32 %318 to i64
  %320 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %306, i64 %319
  %321 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %320, i64 0, i32 0, i32 0, i32 0, i32 0
  %322 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %321, align 8, !noalias !6
  %323 = icmp eq %"class.WTF::StringImpl"* %322, null
  br i1 %323, label %361, label %324

324:                                              ; preds = %310
  %325 = xor i32 %317, -1
  %326 = lshr i32 %316, 31
  %327 = add nsw i32 %326, %325
  %328 = shl i32 %327, 12
  %329 = xor i32 %328, %327
  %330 = lshr i32 %329, 7
  %331 = xor i32 %330, %329
  %332 = shl i32 %331, 2
  %333 = xor i32 %332, %331
  %334 = lshr i32 %333, 20
  %335 = xor i32 %334, %333
  %336 = or i32 %335, 1
  %337 = zext i32 %336 to i64
  br label %338

338:                                              ; preds = %348, %324
  %339 = phi %"struct.WTF::KeyValuePair.12"* [ %320, %324 ], [ %353, %348 ]
  %340 = phi i64 [ %319, %324 ], [ %352, %348 ]
  %341 = phi i64 [ 0, %324 ], [ %350, %348 ]
  %342 = bitcast %"struct.WTF::KeyValuePair.12"* %339 to i8**
  %343 = load i8*, i8** %342, align 8, !noalias !6
  %344 = icmp ne i8* %343, inttoptr (i64 -1 to i8*)
  %345 = bitcast i8* %343 to %"class.WTF::StringImpl"*
  %346 = icmp eq %"class.WTF::StringImpl"* %314, %345
  %347 = and i1 %344, %346
  br i1 %347, label %357, label %348

348:                                              ; preds = %338
  %349 = icmp eq i64 %341, 0
  %350 = select i1 %349, i64 %337, i64 %341
  %351 = add i64 %350, %340
  %352 = and i64 %351, %312
  %353 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %306, i64 %352
  %354 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %353, i64 0, i32 0, i32 0, i32 0, i32 0
  %355 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %354, align 8, !noalias !6
  %356 = icmp eq %"class.WTF::StringImpl"* %355, null
  br i1 %356, label %361, label %338

357:                                              ; preds = %338
  %358 = icmp eq %"struct.WTF::KeyValuePair.12"* %339, null
  br i1 %358, label %361, label %359

359:                                              ; preds = %357
  %360 = zext i32 %309 to i64
  br label %364

361:                                              ; preds = %348, %357, %310, %301
  %362 = zext i32 %309 to i64
  %363 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %306, i64 %362
  br label %364

364:                                              ; preds = %361, %359
  %365 = phi i64 [ %360, %359 ], [ %362, %361 ]
  %366 = phi %"struct.WTF::KeyValuePair.12"* [ %339, %359 ], [ %363, %361 ]
  %367 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %306, i64 %365
  %368 = icmp eq %"struct.WTF::KeyValuePair.12"* %366, %367
  br i1 %368, label %373, label %369

369:                                              ; preds = %364
  %370 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %366, i64 0, i32 1
  %371 = bitcast %"class.blink::Member"* %370 to i64*
  %372 = load i64, i64* %371, align 8, !noalias !6
  br label %373

373:                                              ; preds = %364, %369
  %374 = phi i64 [ %372, %369 ], [ %234, %364 ]
  %375 = phi i8 [ 1, %369 ], [ 0, %364 ]
  %376 = icmp ne i8 %303, 0
  %377 = icmp ne i8 %375, 0
  %378 = xor i1 %376, %377
  %379 = xor i1 %376, true
  %380 = or i1 %378, %379
  br i1 %380, label %394, label %381

381:                                              ; preds = %373
  %382 = icmp eq i8 %375, 0
  br i1 %382, label %383, label %384

383:                                              ; preds = %381
  tail call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #10
  unreachable

384:                                              ; preds = %381
  %385 = inttoptr i64 %302 to %"class.blink::CSSValue"*
  %386 = inttoptr i64 %374 to %"class.blink::CSSValue"*
  %387 = icmp eq %"class.blink::CSSValue"* %385, %386
  br i1 %387, label %395, label %388

388:                                              ; preds = %384
  %389 = icmp ne i64 %302, 0
  %390 = icmp ne i64 %374, 0
  %391 = and i1 %389, %390
  br i1 %391, label %392, label %413

392:                                              ; preds = %388
  %393 = tail call zeroext i1 @_ZNK5blink8CSSValueeqERKS0_(%"class.blink::CSSValue"* nonnull %385, %"class.blink::CSSValue"* nonnull dereferenceable(3) %386) #9
  br i1 %393, label %395, label %413

394:                                              ; preds = %373
  br i1 %378, label %413, label %395

395:                                              ; preds = %394, %384, %392
  %396 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %236, i64 1
  %397 = icmp eq %"struct.WTF::KeyValuePair.12"* %396, %218
  br i1 %397, label %413, label %398

398:                                              ; preds = %395, %402
  %399 = phi %"struct.WTF::KeyValuePair.12"* [ %403, %402 ], [ %396, %395 ]
  %400 = bitcast %"struct.WTF::KeyValuePair.12"* %399 to i64*
  %401 = load i64, i64* %400, align 8
  switch i64 %401, label %405 [
    i64 -1, label %402
    i64 0, label %402
  ]

402:                                              ; preds = %398, %398
  %403 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %399, i64 1
  %404 = icmp eq %"struct.WTF::KeyValuePair.12"* %403, %218
  br i1 %404, label %413, label %398

405:                                              ; preds = %398
  %406 = icmp eq %"struct.WTF::KeyValuePair.12"* %399, %218
  br i1 %406, label %413, label %407

407:                                              ; preds = %405
  %408 = load %"class.blink::HeapHashMap"*, %"class.blink::HeapHashMap"** %202, align 8, !noalias !3
  %409 = getelementptr inbounds %"class.blink::HeapHashMap", %"class.blink::HeapHashMap"* %408, i64 0, i32 0, i32 0, i32 0
  %410 = load %"struct.WTF::KeyValuePair.12"*, %"struct.WTF::KeyValuePair.12"** %409, align 8, !noalias !3
  %411 = getelementptr inbounds %"class.blink::HeapHashMap", %"class.blink::HeapHashMap"* %408, i64 0, i32 0, i32 0, i32 1
  %412 = load i32, i32* %411, align 8, !noalias !3
  br label %231

413:                                              ; preds = %185, %183, %179, %225, %395, %392, %388, %405, %394, %402, %211, %228, %2, %201
  %414 = phi i1 [ false, %201 ], [ false, %2 ], [ true, %228 ], [ true, %211 ], [ true, %402 ], [ true, %395 ], [ false, %392 ], [ false, %388 ], [ true, %405 ], [ false, %394 ], [ true, %225 ], [ false, %179 ], [ false, %183 ], [ false, %185 ]
  ret i1 %414
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden { i8, %"class.blink::CSSVariableData"* } @_ZNK5blink14StyleVariables7GetDataERKN3WTF12AtomicStringE(%"class.blink::StyleVariables"* nocapture readonly, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair"* %4, null
  %6 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  br i1 %5, label %59, label %8

8:                                                ; preds = %2
  %9 = add i32 %7, -1
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = lshr i32 %14, 8
  %16 = and i32 %15, %9
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %17
  %19 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %18, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %21, label %59, label %22

22:                                               ; preds = %8
  %23 = xor i32 %15, -1
  %24 = lshr i32 %14, 31
  %25 = add nsw i32 %24, %23
  %26 = shl i32 %25, 12
  %27 = xor i32 %26, %25
  %28 = lshr i32 %27, 7
  %29 = xor i32 %28, %27
  %30 = shl i32 %29, 2
  %31 = xor i32 %30, %29
  %32 = lshr i32 %31, 20
  %33 = xor i32 %32, %31
  %34 = or i32 %33, 1
  %35 = zext i32 %34 to i64
  br label %36

36:                                               ; preds = %46, %22
  %37 = phi %"struct.WTF::KeyValuePair"* [ %18, %22 ], [ %51, %46 ]
  %38 = phi i64 [ %17, %22 ], [ %50, %46 ]
  %39 = phi i64 [ 0, %22 ], [ %48, %46 ]
  %40 = bitcast %"struct.WTF::KeyValuePair"* %37 to i8**
  %41 = load i8*, i8** %40, align 8
  %42 = icmp ne i8* %41, inttoptr (i64 -1 to i8*)
  %43 = bitcast i8* %41 to %"class.WTF::StringImpl"*
  %44 = icmp eq %"class.WTF::StringImpl"* %12, %43
  %45 = and i1 %42, %44
  br i1 %45, label %55, label %46

46:                                               ; preds = %36
  %47 = icmp eq i64 %39, 0
  %48 = select i1 %47, i64 %35, i64 %39
  %49 = add i64 %48, %38
  %50 = and i64 %49, %10
  %51 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %50
  %52 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %51, i64 0, i32 0, i32 0, i32 0, i32 0
  %53 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %52, align 8
  %54 = icmp eq %"class.WTF::StringImpl"* %53, null
  br i1 %54, label %59, label %36

55:                                               ; preds = %36
  %56 = icmp eq %"struct.WTF::KeyValuePair"* %37, null
  br i1 %56, label %59, label %57

57:                                               ; preds = %55
  %58 = zext i32 %7 to i64
  br label %62

59:                                               ; preds = %46, %55, %8, %2
  %60 = zext i32 %7 to i64
  %61 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %60
  br label %62

62:                                               ; preds = %57, %59
  %63 = phi i64 [ %58, %57 ], [ %60, %59 ]
  %64 = phi %"struct.WTF::KeyValuePair"* [ %37, %57 ], [ %61, %59 ]
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %63
  %66 = icmp eq %"struct.WTF::KeyValuePair"* %64, %65
  br i1 %66, label %70, label %67

67:                                               ; preds = %62
  %68 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %64, i64 0, i32 1, i32 0
  %69 = load %"class.blink::CSSVariableData"*, %"class.blink::CSSVariableData"** %68, align 8
  br label %70

70:                                               ; preds = %62, %67
  %71 = phi i8 [ 1, %67 ], [ 0, %62 ]
  %72 = phi %"class.blink::CSSVariableData"* [ %69, %67 ], [ undef, %62 ]
  %73 = insertvalue { i8, %"class.blink::CSSVariableData"* } undef, i8 %71, 0
  %74 = insertvalue { i8, %"class.blink::CSSVariableData"* } %73, %"class.blink::CSSVariableData"* %72, 1
  ret { i8, %"class.blink::CSSVariableData"* } %74
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink14StyleVariables8GetValueERKN3WTF12AtomicStringE(%"class.absl::optional.198"* noalias nocapture sret, %"class.blink::StyleVariables"* nocapture readonly, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %1, i64 0, i32 1, i32 0, i32 0
  %5 = load %"class.blink::HeapHashMap"*, %"class.blink::HeapHashMap"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::HeapHashMap", %"class.blink::HeapHashMap"* %5, i64 0, i32 0, i32 0, i32 0
  %7 = load %"struct.WTF::KeyValuePair.12"*, %"struct.WTF::KeyValuePair.12"** %6, align 8
  %8 = icmp eq %"struct.WTF::KeyValuePair.12"* %7, null
  %9 = getelementptr inbounds %"class.blink::HeapHashMap", %"class.blink::HeapHashMap"* %5, i64 0, i32 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 8
  br i1 %8, label %62, label %11

11:                                               ; preds = %3
  %12 = add i32 %10, -1
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = lshr i32 %17, 8
  %19 = and i32 %18, %12
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %7, i64 %20
  %22 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %21, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %22, align 8
  %24 = icmp eq %"class.WTF::StringImpl"* %23, null
  br i1 %24, label %62, label %25

25:                                               ; preds = %11
  %26 = xor i32 %18, -1
  %27 = lshr i32 %17, 31
  %28 = add nsw i32 %27, %26
  %29 = shl i32 %28, 12
  %30 = xor i32 %29, %28
  %31 = lshr i32 %30, 7
  %32 = xor i32 %31, %30
  %33 = shl i32 %32, 2
  %34 = xor i32 %33, %32
  %35 = lshr i32 %34, 20
  %36 = xor i32 %35, %34
  %37 = or i32 %36, 1
  %38 = zext i32 %37 to i64
  br label %39

39:                                               ; preds = %49, %25
  %40 = phi %"struct.WTF::KeyValuePair.12"* [ %21, %25 ], [ %54, %49 ]
  %41 = phi i64 [ %20, %25 ], [ %53, %49 ]
  %42 = phi i64 [ 0, %25 ], [ %51, %49 ]
  %43 = bitcast %"struct.WTF::KeyValuePair.12"* %40 to i8**
  %44 = load i8*, i8** %43, align 8
  %45 = icmp ne i8* %44, inttoptr (i64 -1 to i8*)
  %46 = bitcast i8* %44 to %"class.WTF::StringImpl"*
  %47 = icmp eq %"class.WTF::StringImpl"* %15, %46
  %48 = and i1 %45, %47
  br i1 %48, label %58, label %49

49:                                               ; preds = %39
  %50 = icmp eq i64 %42, 0
  %51 = select i1 %50, i64 %38, i64 %42
  %52 = add i64 %51, %41
  %53 = and i64 %52, %13
  %54 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %7, i64 %53
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %54, i64 0, i32 0, i32 0, i32 0, i32 0
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %55, align 8
  %57 = icmp eq %"class.WTF::StringImpl"* %56, null
  br i1 %57, label %62, label %39

58:                                               ; preds = %39
  %59 = icmp eq %"struct.WTF::KeyValuePair.12"* %40, null
  br i1 %59, label %62, label %60

60:                                               ; preds = %58
  %61 = zext i32 %10 to i64
  br label %65

62:                                               ; preds = %49, %58, %11, %3
  %63 = zext i32 %10 to i64
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %7, i64 %63
  br label %65

65:                                               ; preds = %60, %62
  %66 = phi i64 [ %61, %60 ], [ %63, %62 ]
  %67 = phi %"struct.WTF::KeyValuePair.12"* [ %40, %60 ], [ %64, %62 ]
  %68 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %7, i64 %66
  %69 = icmp eq %"struct.WTF::KeyValuePair.12"* %67, %68
  br i1 %69, label %77, label %70

70:                                               ; preds = %65
  %71 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %67, i64 0, i32 1
  %72 = getelementptr inbounds %"class.absl::optional.198", %"class.absl::optional.198"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %72, align 8
  %73 = getelementptr inbounds %"class.absl::optional.198", %"class.absl::optional.198"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %74 = bitcast %"class.blink::Member"* %71 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = bitcast %"class.blink::Member"* %73 to i64*
  store i64 %75, i64* %76, align 8
  br label %79

77:                                               ; preds = %65
  %78 = getelementptr inbounds %"class.absl::optional.198", %"class.absl::optional.198"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %78, align 8
  br label %79

79:                                               ; preds = %77, %70
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink14StyleVariables7SetDataERKN3WTF12AtomicStringE13scoped_refptrINS_15CSSVariableDataEE(%"class.blink::StyleVariables"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::CSSVariableData"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.scoped_refptr.1, align 8
  %5 = getelementptr inbounds %class.scoped_refptr.1, %class.scoped_refptr.1* %4, i64 0, i32 0
  store %"class.blink::CSSVariableData"* %2, %"class.blink::CSSVariableData"** %5, align 8
  %6 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %0, i64 0, i32 0, i32 0
  %7 = call { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISE_S9_SF_EERKS1_S6_EENS_18HashTableAddResultISG_S7_EEOT0_OT1_(%"class.WTF::HashTable"* %6, %"class.WTF::AtomicString"* dereferenceable(8) %1, %class.scoped_refptr.1* nonnull dereferenceable(8) %4) #9
  %8 = extractvalue { %"struct.WTF::KeyValuePair"*, i8 } %7, 1
  %9 = and i8 %8, 1
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %27

11:                                               ; preds = %3
  %12 = extractvalue { %"struct.WTF::KeyValuePair"*, i8 } %7, 0
  %13 = bitcast %class.scoped_refptr.1* %4 to i64*
  %14 = load i64, i64* %13, align 8
  store %"class.blink::CSSVariableData"* null, %"class.blink::CSSVariableData"** %5, align 8
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %12, i64 0, i32 1
  %16 = bitcast %class.scoped_refptr.1* %15 to i64*
  %17 = getelementptr inbounds %class.scoped_refptr.1, %class.scoped_refptr.1* %15, i64 0, i32 0
  %18 = load %"class.blink::CSSVariableData"*, %"class.blink::CSSVariableData"** %17, align 8
  store i64 %14, i64* %16, align 8
  %19 = icmp eq %"class.blink::CSSVariableData"* %18, null
  br i1 %19, label %27, label %20

20:                                               ; preds = %11
  %21 = getelementptr inbounds %"class.blink::CSSVariableData", %"class.blink::CSSVariableData"* %18, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %21) #9
  %22 = getelementptr inbounds %"class.blink::CSSVariableData", %"class.blink::CSSVariableData"* %18, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %20
  call void @_ZN5blink15CSSVariableDataD2Ev(%"class.blink::CSSVariableData"* nonnull %18) #9
  %26 = bitcast %"class.blink::CSSVariableData"* %18 to i8*
  call void @free(i8* %26) #9
  br label %27

27:                                               ; preds = %3, %11, %20, %25
  %28 = load %"class.blink::CSSVariableData"*, %"class.blink::CSSVariableData"** %5, align 8
  %29 = icmp eq %"class.blink::CSSVariableData"* %28, null
  br i1 %29, label %37, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.blink::CSSVariableData", %"class.blink::CSSVariableData"* %28, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %31) #9
  %32 = getelementptr inbounds %"class.blink::CSSVariableData", %"class.blink::CSSVariableData"* %28, i64 0, i32 0, i32 0, i32 0, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %30
  call void @_ZN5blink15CSSVariableDataD2Ev(%"class.blink::CSSVariableData"* nonnull %28) #9
  %36 = bitcast %"class.blink::CSSVariableData"* %28 to i8*
  call void @free(i8* %36) #9
  br label %37

37:                                               ; preds = %27, %30, %35
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink14StyleVariables8SetValueERKN3WTF12AtomicStringEPKNS_8CSSValueE(%"class.blink::StyleVariables"* nocapture readonly, %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::CSSValue"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::CSSValue"*, align 8
  store %"class.blink::CSSValue"* %2, %"class.blink::CSSValue"** %4, align 8
  %5 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %0, i64 0, i32 1, i32 0, i32 0
  %6 = load %"class.blink::HeapHashMap"*, %"class.blink::HeapHashMap"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::HeapHashMap", %"class.blink::HeapHashMap"* %6, i64 0, i32 0, i32 0
  %8 = call { %"struct.WTF::KeyValuePair.12"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE6insertINS_17HashMapTranslatorISF_SA_SG_EERKS1_RPS6_EENS_18HashTableAddResultISH_S8_EEOT0_OT1_(%"class.WTF::HashTable.10"* %7, %"class.WTF::AtomicString"* dereferenceable(8) %1, %"class.blink::CSSValue"** nonnull dereferenceable(8) %4) #9
  %9 = extractvalue { %"struct.WTF::KeyValuePair.12"*, i8 } %8, 1
  %10 = and i8 %9, 1
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %23

12:                                               ; preds = %3
  %13 = extractvalue { %"struct.WTF::KeyValuePair.12"*, i8 } %8, 0
  %14 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %13, i64 0, i32 1
  %15 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %4, align 8
  %16 = ptrtoint %"class.blink::CSSValue"* %15 to i64
  %17 = bitcast %"class.blink::Member"* %14 to i64*
  store atomic i64 %16, i64* %17 monotonic, align 8
  %18 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %23, label %20

20:                                               ; preds = %12
  %21 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %15, i64 0, i32 0
  %22 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %21) #9
  br label %23

23:                                               ; preds = %3, %12, %20
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink14StyleVariables7IsEmptyEv(%"class.blink::StyleVariables"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %0, i64 0, i32 0, i32 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %11

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %0, i64 0, i32 1, i32 0, i32 0
  %7 = load %"class.blink::HeapHashMap"*, %"class.blink::HeapHashMap"** %6, align 8
  %8 = getelementptr inbounds %"class.blink::HeapHashMap", %"class.blink::HeapHashMap"* %7, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br label %11

11:                                               ; preds = %5, %1
  %12 = phi i1 [ false, %1 ], [ %10, %5 ]
  ret i1 %12
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink14StyleVariables12CollectNamesERN3WTF7HashSetINS1_12AtomicStringENS1_16AtomicStringHashENS1_10HashTraitsIS3_EENS1_18PartitionAllocatorEEE(%"class.blink::StyleVariables"* nocapture readonly, %"class.WTF::HashSet"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  %6 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %6, align 8
  %8 = getelementptr inbounds %"class.blink::StyleVariables", %"class.blink::StyleVariables"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %7, i64 %10
  br i1 %5, label %26, label %12

12:                                               ; preds = %2
  %13 = icmp eq i32 %9, 0
  br i1 %13, label %21, label %14

14:                                               ; preds = %12, %18
  %15 = phi %"struct.WTF::KeyValuePair"* [ %19, %18 ], [ %7, %12 ]
  %16 = bitcast %"struct.WTF::KeyValuePair"* %15 to i64*
  %17 = load i64, i64* %16, align 8
  switch i64 %17, label %21 [
    i64 -1, label %18
    i64 0, label %18
  ]

18:                                               ; preds = %14, %14
  %19 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %15, i64 1
  %20 = icmp eq %"struct.WTF::KeyValuePair"* %19, %11
  br i1 %20, label %26, label %14

21:                                               ; preds = %14, %12
  %22 = phi %"struct.WTF::KeyValuePair"* [ %7, %12 ], [ %15, %14 ]
  %23 = icmp eq %"struct.WTF::KeyValuePair"* %22, %11
  br i1 %23, label %26, label %24

24:                                               ; preds = %21
  %25 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %1, i64 0, i32 0
  br label %27

26:                                               ; preds = %18, %27, %40, %37, %2, %21
  ret void

27:                                               ; preds = %24, %40
  %28 = phi %"struct.WTF::KeyValuePair"* [ %22, %24 ], [ %34, %40 ]
  %29 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %28, i64 0, i32 0
  %30 = tail call { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable.204"* %25, %"class.WTF::AtomicString"* dereferenceable(8) %29, %"class.WTF::AtomicString"* dereferenceable(8) %29) #9
  %31 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %28, i64 1
  %32 = icmp eq %"struct.WTF::KeyValuePair"* %31, %11
  br i1 %32, label %26, label %33

33:                                               ; preds = %27, %37
  %34 = phi %"struct.WTF::KeyValuePair"* [ %38, %37 ], [ %31, %27 ]
  %35 = bitcast %"struct.WTF::KeyValuePair"* %34 to i64*
  %36 = load i64, i64* %35, align 8
  switch i64 %36, label %40 [
    i64 -1, label %37
    i64 0, label %37
  ]

37:                                               ; preds = %33, %33
  %38 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %34, i64 1
  %39 = icmp eq %"struct.WTF::KeyValuePair"* %38, %11
  br i1 %39, label %26, label %33

40:                                               ; preds = %33
  %41 = icmp eq %"struct.WTF::KeyValuePair"* %34, %11
  br i1 %41, label %26, label %27
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %2, %5
  %6 = phi i32 [ %9, %5 ], [ %1, %2 ]
  %7 = phi i32 [ %8, %5 ], [ %1, %2 ]
  %8 = or i32 %7, %6
  %9 = lshr i32 %6, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %5

11:                                               ; preds = %5
  %12 = shl i32 %8, 1
  %13 = add i32 %12, 2
  %14 = icmp ugt i32 %13, 8
  %15 = select i1 %14, i32 %13, i32 8
  br label %16

16:                                               ; preds = %11, %2
  %17 = phi i32 [ 8, %2 ], [ %15, %11 ]
  %18 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = icmp ugt i32 %17, %19
  br i1 %20, label %21, label %32

21:                                               ; preds = %16
  %22 = icmp slt i32 %17, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %21
  %24 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 1094, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0)) #9
  %25 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #9
  br label %26

26:                                               ; preds = %21, %23
  %27 = zext i32 %17 to i64
  %28 = shl nuw nsw i64 %27, 4
  %29 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_12AtomicStringE13scoped_refptrIN5blink15CSSVariableDataEEEEEEPKcv, i64 0, i64 0)) #9
  call void @llvm.memset.p0i8.i64(i8* align 1 %29, i8 0, i64 %28, i1 false) #9
  %30 = bitcast i8* %29 to %"struct.WTF::KeyValuePair"*
  %31 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE8RehashToEPS7_jSH_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %30, i32 %17, %"struct.WTF::KeyValuePair"* null) #9
  br label %32

32:                                               ; preds = %26, %16
  ret void
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE8RehashToEPS7_jSH_(%"class.WTF::HashTable"*, %"struct.WTF::KeyValuePair"*, i32, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.WTF::HashTable", align 8
  %6 = bitcast %"class.WTF::HashTable"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %5, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %5, i64 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %5, i64 0, i32 3
  %11 = bitcast %"class.WTF::HashTable"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  store %"struct.WTF::KeyValuePair"* %1, %"struct.WTF::KeyValuePair"** %7, align 8
  store i32 %2, i32* %8, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  br i1 %14, label %16, label %21

16:                                               ; preds = %4
  %17 = ptrtoint %"struct.WTF::KeyValuePair"* %1 to i64
  %18 = bitcast %"class.WTF::HashTable"* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.WTF::HashTable"* %5 to i64*
  br label %28

21:                                               ; preds = %4
  %22 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %15, align 8
  %23 = ptrtoint %"struct.WTF::KeyValuePair"* %22 to i64
  br label %84

24:                                               ; preds = %102
  %25 = bitcast %"class.WTF::HashTable"* %5 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.WTF::HashTable"* %0 to i64*
  br label %28

28:                                               ; preds = %16, %24
  %29 = phi i64* [ %20, %16 ], [ %25, %24 ]
  %30 = phi i64* [ %18, %16 ], [ %27, %24 ]
  %31 = phi i64 [ %17, %16 ], [ %26, %24 ]
  %32 = phi i64 [ %19, %16 ], [ %103, %24 ]
  %33 = phi %"struct.WTF::KeyValuePair"* [ null, %16 ], [ %106, %24 ]
  %34 = phi i32 [ 0, %16 ], [ %104, %24 ]
  store atomic i64 %31, i64* %30 monotonic, align 8
  store i32 %2, i32* %12, align 8
  store i64 %32, i64* %29, align 8
  store i32 %34, i32* %8, align 8
  %35 = inttoptr i64 %32 to %"struct.WTF::KeyValuePair"*
  %36 = icmp eq i64 %32, 0
  br i1 %36, label %80, label %37

37:                                               ; preds = %28
  %38 = icmp eq i32 %34, 0
  br i1 %38, label %78, label %39

39:                                               ; preds = %37
  %40 = zext i32 %34 to i64
  br label %41

41:                                               ; preds = %75, %39
  %42 = phi i64 [ 0, %39 ], [ %76, %75 ]
  %43 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %35, i64 %42
  %44 = bitcast %"struct.WTF::KeyValuePair"* %43 to i8**
  %45 = load i8*, i8** %44, align 8
  %46 = icmp eq i8* %45, inttoptr (i64 -1 to i8*)
  br i1 %46, label %75, label %47

47:                                               ; preds = %41
  %48 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %35, i64 %42, i32 1, i32 0
  %49 = load %"class.blink::CSSVariableData"*, %"class.blink::CSSVariableData"** %48, align 8
  %50 = icmp eq %"class.blink::CSSVariableData"* %49, null
  br i1 %50, label %58, label %51

51:                                               ; preds = %47
  %52 = getelementptr inbounds %"class.blink::CSSVariableData", %"class.blink::CSSVariableData"* %49, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %52) #9
  %53 = getelementptr inbounds %"class.blink::CSSVariableData", %"class.blink::CSSVariableData"* %49, i64 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %58

56:                                               ; preds = %51
  call void @_ZN5blink15CSSVariableDataD2Ev(%"class.blink::CSSVariableData"* nonnull %49) #9
  %57 = bitcast %"class.blink::CSSVariableData"* %49 to i8*
  call void @free(i8* %57) #9
  br label %58

58:                                               ; preds = %56, %51, %47
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %43, i64 0, i32 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %75, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = and i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %68 = load i32, i32* %67, align 4
  br i1 %66, label %69, label %71

69:                                               ; preds = %62
  %70 = add i32 %68, -1
  store i32 %70, i32* %67, align 4
  br label %71

71:                                               ; preds = %69, %62
  %72 = phi i32 [ %70, %69 ], [ %68, %62 ]
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %71
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %60) #9
  br label %75

75:                                               ; preds = %74, %71, %58, %41
  %76 = add nuw nsw i64 %42, 1
  %77 = icmp eq i64 %76, %40
  br i1 %77, label %78, label %41

78:                                               ; preds = %75, %37
  %79 = inttoptr i64 %32 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %79) #9
  store atomic i64 0, i64* %29 monotonic, align 8
  store i32 0, i32* %8, align 8
  store i32 0, i32* %9, align 4
  br label %80

80:                                               ; preds = %28, %78
  %81 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %82 = load i32, i32* %81, align 8
  %83 = and i32 %82, -2147483648
  store i32 %83, i32* %81, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #9
  ret %"struct.WTF::KeyValuePair"* %33

84:                                               ; preds = %21, %102
  %85 = phi i64 [ %103, %102 ], [ %23, %21 ]
  %86 = phi i32 [ %104, %102 ], [ %13, %21 ]
  %87 = phi %"struct.WTF::KeyValuePair"* [ %105, %102 ], [ %22, %21 ]
  %88 = phi %"struct.WTF::KeyValuePair"* [ %106, %102 ], [ null, %21 ]
  %89 = phi i32 [ %107, %102 ], [ 0, %21 ]
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %87, i64 %90
  %92 = bitcast %"struct.WTF::KeyValuePair"* %91 to i64*
  %93 = load i64, i64* %92, align 8
  switch i64 %93, label %94 [
    i64 -1, label %102
    i64 0, label %102
  ]

94:                                               ; preds = %84
  %95 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE8ReinsertEOS7_(%"class.WTF::HashTable"* nonnull %5, %"struct.WTF::KeyValuePair"* dereferenceable(16) %91)
  %96 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %15, align 8
  %97 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %96, i64 %90
  %98 = icmp eq %"struct.WTF::KeyValuePair"* %97, %3
  %99 = select i1 %98, %"struct.WTF::KeyValuePair"* %95, %"struct.WTF::KeyValuePair"* %88
  %100 = load i32, i32* %12, align 8
  %101 = ptrtoint %"struct.WTF::KeyValuePair"* %96 to i64
  br label %102

102:                                              ; preds = %84, %84, %94
  %103 = phi i64 [ %85, %84 ], [ %101, %94 ], [ %85, %84 ]
  %104 = phi i32 [ %86, %84 ], [ %100, %94 ], [ %86, %84 ]
  %105 = phi %"struct.WTF::KeyValuePair"* [ %87, %84 ], [ %96, %94 ], [ %87, %84 ]
  %106 = phi %"struct.WTF::KeyValuePair"* [ %88, %84 ], [ %99, %94 ], [ %88, %84 ]
  %107 = add i32 %89, 1
  %108 = icmp eq i32 %107, %104
  br i1 %108, label %24, label %84
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE8ReinsertEOS7_(%"class.WTF::HashTable"*, %"struct.WTF::KeyValuePair"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = lshr i32 %12, 8
  %14 = and i32 %13, %7
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %15
  %17 = ptrtoint %"struct.WTF::KeyValuePair"* %16 to i64
  %18 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %16, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %37, label %21

21:                                               ; preds = %2
  %22 = xor i32 %13, -1
  %23 = lshr i32 %12, 31
  %24 = add nsw i32 %23, %22
  %25 = shl i32 %24, 12
  %26 = xor i32 %25, %24
  %27 = lshr i32 %26, 7
  %28 = xor i32 %27, %26
  %29 = shl i32 %28, 2
  %30 = xor i32 %29, %28
  %31 = lshr i32 %30, 20
  %32 = xor i32 %31, %30
  %33 = or i32 %32, 1
  %34 = zext i32 %33 to i64
  br label %43

35:                                               ; preds = %55
  %36 = ptrtoint %"struct.WTF::KeyValuePair"* %61 to i64
  br label %37

37:                                               ; preds = %35, %2
  %38 = phi i64 [ %17, %2 ], [ %36, %35 ]
  %39 = phi %"struct.WTF::KeyValuePair"* [ null, %2 ], [ %56, %35 ]
  %40 = icmp eq %"struct.WTF::KeyValuePair"* %39, null
  %41 = ptrtoint %"struct.WTF::KeyValuePair"* %39 to i64
  %42 = select i1 %40, i64 %38, i64 %41
  br label %66

43:                                               ; preds = %55, %21
  %44 = phi %"struct.WTF::KeyValuePair"* [ null, %21 ], [ %56, %55 ]
  %45 = phi i64 [ %17, %21 ], [ %62, %55 ]
  %46 = phi %"struct.WTF::KeyValuePair"* [ %16, %21 ], [ %61, %55 ]
  %47 = phi i64 [ %15, %21 ], [ %60, %55 ]
  %48 = phi i64 [ 0, %21 ], [ %58, %55 ]
  %49 = bitcast %"struct.WTF::KeyValuePair"* %46 to i8**
  %50 = load i8*, i8** %49, align 8
  %51 = icmp eq i8* %50, inttoptr (i64 -1 to i8*)
  br i1 %51, label %55, label %52

52:                                               ; preds = %43
  %53 = bitcast i8* %50 to %"class.WTF::StringImpl"*
  %54 = icmp eq %"class.WTF::StringImpl"* %10, %53
  br i1 %54, label %66, label %55

55:                                               ; preds = %52, %43
  %56 = phi %"struct.WTF::KeyValuePair"* [ %44, %52 ], [ %46, %43 ]
  %57 = icmp eq i64 %48, 0
  %58 = select i1 %57, i64 %34, i64 %48
  %59 = add i64 %58, %47
  %60 = and i64 %59, %8
  %61 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %60
  %62 = ptrtoint %"struct.WTF::KeyValuePair"* %61 to i64
  %63 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %61, i64 0, i32 0, i32 0, i32 0, i32 0
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %63, align 8
  %65 = icmp eq %"class.WTF::StringImpl"* %64, null
  br i1 %65, label %35, label %43

66:                                               ; preds = %52, %37
  %67 = phi i64 [ %42, %37 ], [ %45, %52 ]
  %68 = inttoptr i64 %67 to %"struct.WTF::KeyValuePair"*
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %68, i64 0, i32 1, i32 0
  %70 = load %"class.blink::CSSVariableData"*, %"class.blink::CSSVariableData"** %69, align 8
  %71 = icmp eq %"class.blink::CSSVariableData"* %70, null
  br i1 %71, label %79, label %72

72:                                               ; preds = %66
  %73 = getelementptr inbounds %"class.blink::CSSVariableData", %"class.blink::CSSVariableData"* %70, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %73) #9
  %74 = getelementptr inbounds %"class.blink::CSSVariableData", %"class.blink::CSSVariableData"* %70, i64 0, i32 0, i32 0, i32 0, i32 0
  %75 = load i32, i32* %74, align 4
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %79

77:                                               ; preds = %72
  tail call void @_ZN5blink15CSSVariableDataD2Ev(%"class.blink::CSSVariableData"* nonnull %70) #9
  %78 = bitcast %"class.blink::CSSVariableData"* %70 to i8*
  tail call void @free(i8* %78) #9
  br label %79

79:                                               ; preds = %77, %72, %66
  %80 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %68, i64 0, i32 0, i32 0, i32 0, i32 0
  %81 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %80, align 8
  %82 = icmp eq %"class.WTF::StringImpl"* %81, null
  br i1 %82, label %96, label %83

83:                                               ; preds = %79
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = load atomic i32, i32* %84 monotonic, align 4
  %86 = and i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %81, i64 0, i32 0
  %89 = load i32, i32* %88, align 4
  br i1 %87, label %90, label %92

90:                                               ; preds = %83
  %91 = add i32 %89, -1
  store i32 %91, i32* %88, align 4
  br label %92

92:                                               ; preds = %90, %83
  %93 = phi i32 [ %91, %90 ], [ %89, %83 ]
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %96

95:                                               ; preds = %92
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %81) #9
  br label %96

96:                                               ; preds = %79, %92, %95
  %97 = bitcast %"struct.WTF::KeyValuePair"* %1 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = inttoptr i64 %67 to i64*
  store i64 %98, i64* %99, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %9, align 8
  %100 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %68, i64 0, i32 1
  %101 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 0, i32 1
  %102 = getelementptr inbounds %class.scoped_refptr.1, %class.scoped_refptr.1* %101, i64 0, i32 0
  %103 = bitcast %class.scoped_refptr.1* %101 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %class.scoped_refptr.1* %100 to i64*
  store i64 %104, i64* %105, align 8
  store %"class.blink::CSSVariableData"* null, %"class.blink::CSSVariableData"** %102, align 8
  ret %"struct.WTF::KeyValuePair"* %68
}

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS9_SE_SF_EERKS1_RKS7_EENS_18HashTableAddResultISG_S7_EEOT0_OT1_(%"class.WTF::HashTable"*, %"class.WTF::AtomicString"* dereferenceable(8), %"struct.WTF::KeyValuePair"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE6ExpandEPS7_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* null)
  %9 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = and i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %22
  %24 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %23, i64 0, i32 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %72, label %27

27:                                               ; preds = %10
  %28 = xor i32 %20, -1
  %29 = lshr i32 %19, 31
  %30 = add nsw i32 %29, %28
  %31 = shl i32 %30, 12
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 7
  %34 = xor i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 20
  %38 = xor i32 %37, %36
  %39 = or i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %27, %52
  %42 = phi %"struct.WTF::KeyValuePair"* [ %23, %27 ], [ %58, %52 ]
  %43 = phi %"struct.WTF::KeyValuePair"* [ null, %27 ], [ %53, %52 ]
  %44 = phi i64 [ %22, %27 ], [ %57, %52 ]
  %45 = phi i64 [ 0, %27 ], [ %55, %52 ]
  %46 = bitcast %"struct.WTF::KeyValuePair"* %42 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = icmp eq i8* %47, inttoptr (i64 -1 to i8*)
  br i1 %48, label %52, label %49

49:                                               ; preds = %41
  %50 = bitcast i8* %47 to %"class.WTF::StringImpl"*
  %51 = icmp eq %"class.WTF::StringImpl"* %17, %50
  br i1 %51, label %86, label %52

52:                                               ; preds = %41, %49
  %53 = phi %"struct.WTF::KeyValuePair"* [ %43, %49 ], [ %42, %41 ]
  %54 = icmp eq i64 %45, 0
  %55 = select i1 %54, i64 %40, i64 %45
  %56 = add i64 %55, %44
  %57 = and i64 %56, %15
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %57
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %58, i64 0, i32 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %62, label %41

62:                                               ; preds = %52
  %63 = icmp eq %"struct.WTF::KeyValuePair"* %53, null
  br i1 %63, label %72, label %64

64:                                               ; preds = %62
  %65 = bitcast %"struct.WTF::KeyValuePair"* %53 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %65, i8 0, i64 16, i1 false) #9
  %66 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %67 = load i32, i32* %66, align 8
  %68 = add i32 %67, 2147483647
  %69 = and i32 %68, 2147483647
  %70 = and i32 %67, -2147483648
  %71 = or i32 %69, %70
  store i32 %71, i32* %66, align 8
  br label %72

72:                                               ; preds = %10, %62, %64
  %73 = phi %"struct.WTF::KeyValuePair"* [ %53, %64 ], [ %58, %62 ], [ %23, %10 ]
  %74 = tail call dereferenceable(16) %"struct.WTF::KeyValuePair"* @_ZN3WTF12KeyValuePairINS_12AtomicStringE13scoped_refptrIN5blink15CSSVariableDataEEEaSERKS6_(%"struct.WTF::KeyValuePair"* %73, %"struct.WTF::KeyValuePair"* dereferenceable(16) %2) #9
  %75 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %76 = load i32, i32* %75, align 4
  %77 = add i32 %76, 1
  store i32 %77, i32* %75, align 4
  %78 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %79 = load i32, i32* %78, align 8
  %80 = add i32 %79, %77
  %81 = shl i32 %80, 1
  %82 = load i32, i32* %12, align 8
  %83 = icmp ult i32 %81, %82
  br i1 %83, label %86, label %84

84:                                               ; preds = %72
  %85 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE6ExpandEPS7_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %73)
  br label %86

86:                                               ; preds = %49, %72, %84
  %87 = phi i8 [ 1, %72 ], [ 1, %84 ], [ 0, %49 ]
  %88 = phi %"struct.WTF::KeyValuePair"* [ %73, %72 ], [ %85, %84 ], [ %42, %49 ]
  %89 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } undef, %"struct.WTF::KeyValuePair"* %88, 0
  %90 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } %89, i8 %87, 1
  ret { %"struct.WTF::KeyValuePair"*, i8 } %90
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE6ExpandEPS7_(%"class.WTF::HashTable"*, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #9
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #9
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* %22, i8* %23) #9
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #9
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #9
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #9
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 4
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairINS_12AtomicStringE13scoped_refptrIN5blink15CSSVariableDataEEEEEEPKcv, i64 0, i64 0)) #9
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #9
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair"*
  %37 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE8RehashToEPS7_jSH_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %36, i32 %32, %"struct.WTF::KeyValuePair"* %1) #9
  ret %"struct.WTF::KeyValuePair"* %37
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"struct.WTF::KeyValuePair"* @_ZN3WTF12KeyValuePairINS_12AtomicStringE13scoped_refptrIN5blink15CSSVariableDataEEEaSERKS6_(%"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"* dereferenceable(16)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %5, label %23, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %23

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i33
  %15 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %14, i33 1) #9
  %16 = extractvalue { i33, i1 } %15, 1
  %17 = extractvalue { i33, i1 } %15, 0
  %18 = icmp slt i33 %17, 0
  %19 = or i1 %16, %18
  br i1 %19, label %20, label %21, !prof !2

20:                                               ; preds = %11
  tail call void @llvm.trap() #9
  unreachable

21:                                               ; preds = %11
  %22 = trunc i33 %17 to i32
  store i32 %22, i32* %12, align 4
  br label %23

23:                                               ; preds = %21, %6, %2
  %24 = ptrtoint %"class.WTF::StringImpl"* %4 to i64
  %25 = bitcast %"struct.WTF::KeyValuePair"* %0 to i64*
  %26 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %27 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %26, align 8
  store i64 %24, i64* %25, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %28, label %42, label %29

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  br i1 %33, label %36, label %38

36:                                               ; preds = %29
  %37 = add i32 %35, -1
  store i32 %37, i32* %34, align 4
  br label %38

38:                                               ; preds = %36, %29
  %39 = phi i32 [ %37, %36 ], [ %35, %29 ]
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #9
  br label %42

42:                                               ; preds = %23, %38, %41
  %43 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %44 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 0, i32 1, i32 0
  %45 = load %"class.blink::CSSVariableData"*, %"class.blink::CSSVariableData"** %44, align 8
  %46 = icmp eq %"class.blink::CSSVariableData"* %45, null
  br i1 %46, label %49, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.blink::CSSVariableData", %"class.blink::CSSVariableData"* %45, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %48) #9
  br label %49

49:                                               ; preds = %42, %47
  %50 = ptrtoint %"class.blink::CSSVariableData"* %45 to i64
  %51 = bitcast %class.scoped_refptr.1* %43 to i64*
  %52 = getelementptr inbounds %class.scoped_refptr.1, %class.scoped_refptr.1* %43, i64 0, i32 0
  %53 = load %"class.blink::CSSVariableData"*, %"class.blink::CSSVariableData"** %52, align 8
  store i64 %50, i64* %51, align 8
  %54 = icmp eq %"class.blink::CSSVariableData"* %53, null
  br i1 %54, label %62, label %55

55:                                               ; preds = %49
  %56 = getelementptr inbounds %"class.blink::CSSVariableData", %"class.blink::CSSVariableData"* %53, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %56) #9
  %57 = getelementptr inbounds %"class.blink::CSSVariableData", %"class.blink::CSSVariableData"* %53, i64 0, i32 0, i32 0, i32 0, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %55
  tail call void @_ZN5blink15CSSVariableDataD2Ev(%"class.blink::CSSVariableData"* nonnull %53) #9
  %61 = bitcast %"class.blink::CSSVariableData"* %53 to i8*
  tail call void @free(i8* %61) #9
  br label %62

62:                                               ; preds = %49, %55, %60
  ret %"struct.WTF::KeyValuePair"* %0
}

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #7

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK5blink15CSSVariableDataeqERKS0_(%"class.blink::CSSVariableData"*, %"class.blink::CSSVariableData"* dereferenceable(72)) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() local_unnamed_addr #8

declare zeroext i1 @_ZNK5blink8CSSValueeqERKS0_(%"class.blink::CSSValue"*, %"class.blink::CSSValue"* dereferenceable(3)) local_unnamed_addr #3

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15CSSVariableDataD2Ev(%"class.blink::CSSVariableData"*) unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::CSSVariableData", %"class.blink::CSSVariableData"* %0, i64 0, i32 8, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  br i1 %9, label %12, label %14

12:                                               ; preds = %5
  %13 = add i32 %11, -1
  store i32 %13, i32* %10, align 4
  br label %14

14:                                               ; preds = %12, %5
  %15 = phi i32 [ %13, %12 ], [ %11, %5 ]
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %14
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %3) #9
  br label %18

18:                                               ; preds = %1, %14, %17
  %19 = getelementptr inbounds %"class.blink::CSSVariableData", %"class.blink::CSSVariableData"* %0, i64 0, i32 3, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = and i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  br i1 %26, label %29, label %31

29:                                               ; preds = %22
  %30 = add i32 %28, -1
  store i32 %30, i32* %27, align 4
  br label %31

31:                                               ; preds = %29, %22
  %32 = phi i32 [ %30, %29 ], [ %28, %22 ]
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %20) #9
  br label %35

35:                                               ; preds = %18, %31, %34
  %36 = getelementptr inbounds %"class.blink::CSSVariableData", %"class.blink::CSSVariableData"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %37 = load %"class.blink::CSSParserToken"*, %"class.blink::CSSParserToken"** %36, align 8
  %38 = icmp eq %"class.blink::CSSParserToken"* %37, null
  %39 = bitcast %"class.blink::CSSParserToken"* %37 to i8*
  br i1 %38, label %46, label %40, !prof !9

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.blink::CSSVariableData", %"class.blink::CSSVariableData"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %45, label %44, !prof !2

44:                                               ; preds = %40
  store i32 0, i32* %41, align 4
  br label %45

45:                                               ; preds = %44, %40
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %39) #9
  store %"class.blink::CSSParserToken"* null, %"class.blink::CSSParserToken"** %36, align 8
  br label %46

46:                                               ; preds = %35, %45
  %47 = getelementptr inbounds %"class.blink::CSSVariableData", %"class.blink::CSSVariableData"* %0, i64 0, i32 1
  %48 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %47, i64 0, i32 0, i32 0, i32 0
  %49 = load %"class.WTF::String"*, %"class.WTF::String"** %48, align 8
  %50 = icmp eq %"class.WTF::String"* %49, null
  br i1 %50, label %85, label %51, !prof !9

51:                                               ; preds = %46
  %52 = bitcast %"class.WTF::String"* %49 to i8*
  %53 = getelementptr inbounds %"class.blink::CSSVariableData", %"class.blink::CSSVariableData"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %83, label %56, !prof !2

56:                                               ; preds = %51
  %57 = zext i32 %54 to i64
  %58 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %49, i64 %57
  br label %59

59:                                               ; preds = %77, %56
  %60 = phi %"class.WTF::String"* [ %78, %77 ], [ %49, %56 ]
  %61 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %60, i64 0, i32 0, i32 0
  %62 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %61, align 8
  %63 = icmp eq %"class.WTF::StringImpl"* %62, null
  br i1 %63, label %77, label %64

64:                                               ; preds = %59
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = load atomic i32, i32* %65 monotonic, align 4
  %67 = and i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  br i1 %68, label %71, label %73

71:                                               ; preds = %64
  %72 = add i32 %70, -1
  store i32 %72, i32* %69, align 4
  br label %73

73:                                               ; preds = %71, %64
  %74 = phi i32 [ %72, %71 ], [ %70, %64 ]
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %77

76:                                               ; preds = %73
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %62) #9
  br label %77

77:                                               ; preds = %76, %73, %59
  %78 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %60, i64 1
  %79 = icmp eq %"class.WTF::String"* %78, %58
  br i1 %79, label %80, label %59

80:                                               ; preds = %77
  store i32 0, i32* %53, align 4
  %81 = bitcast %"class.WTF::Vector"* %47 to i8**
  %82 = load i8*, i8** %81, align 8
  br label %83

83:                                               ; preds = %80, %51
  %84 = phi i8* [ %82, %80 ], [ %52, %51 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %84) #9
  store %"class.WTF::String"* null, %"class.WTF::String"** %48, align 8
  br label %85

85:                                               ; preds = %46, %83
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS3_16AtomicStringHashENS3_10HashTraitsIS4_EENSA_IS8_EEEEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #9
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !2

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = icmp ult i64 %0, 64
  %15 = icmp ugt i64 %0, 31
  %16 = zext i1 %15 to i32
  %17 = icmp ult i64 %0, 128
  %18 = select i1 %17, i32 2, i32 3
  %19 = select i1 %14, i32 %16, i32 %18
  %20 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS2_16AtomicStringHashENS2_10HashTraitsIS3_EENS9_IS7_EEEEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %8
  %23 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %24 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %23, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS2_16AtomicStringHashENS2_10HashTraitsIS3_EENS9_IS7_EEEEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS2_16AtomicStringHashENS2_10HashTraitsIS3_EENS9_IS7_EEEEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #9
  br label %25

25:                                               ; preds = %8, %22
  %26 = phi i32 [ %20, %8 ], [ %24, %22 ]
  %27 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 %19, i32 %26, i8* getelementptr inbounds ([239 x i8], [239 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink11HeapHashMapINS_12AtomicStringENS1_6MemberIKNS1_8CSSValueEEENS_16AtomicStringHashENS_10HashTraitsIS3_EENS9_IS7_EEEEEEPKcv, i64 0, i64 0))
  ret i8* %27
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"*, %"class.blink::ThreadState"*, i64, i32, i32, i8*) local_unnamed_addr #6 comdat align 2 {
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckOpResult", align 8
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = sext i32 %3 to i64
  %11 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %0, i64 0, i32 19, i64 %10
  %12 = bitcast %"class.blink::BaseArena"** %11 to %"class.blink::NormalPageArena"**
  %13 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %12, align 8
  %14 = bitcast %"class.logging::CheckOpResult"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #9
  %15 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %8, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %15, align 8
  %16 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #9
  %17 = icmp ult i64 %2, -8
  br i1 %17, label %18, label %19

18:                                               ; preds = %6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #9
  store i8* null, i8** %15, align 8
  br label %29

19:                                               ; preds = %6
  %20 = add nsw i64 %2, 8
  %21 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %20) #9
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %2) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %7, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* %21, i8* %22) #9
  %23 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #9
  store i8* %24, i8** %15, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %29, label %26

26:                                               ; preds = %19
  %27 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.4, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %8) #9
  %28 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #9
  br label %29

29:                                               ; preds = %18, %19, %26
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #9
  %30 = add i64 %2, 15
  %31 = and i64 %30, -8
  %32 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 4
  %33 = load i64, i64* %32, align 8
  %34 = icmp ult i64 %33, %31
  br i1 %34, label %67, label %35, !prof !2

35:                                               ; preds = %29
  %36 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %13, i64 0, i32 3
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %31
  store i8* %38, i8** %36, align 8
  %39 = sub i64 %33, %31
  store i64 %39, i64* %32, align 8
  %40 = bitcast i8* %37 to i32*
  store i32 0, i32* %40, align 4
  %41 = getelementptr inbounds i8, i8* %37, i64 4
  %42 = bitcast i8* %41 to i16*
  %43 = trunc i32 %4 to i16
  %44 = shl i16 %43, 2
  store atomic i16 %44, i16* %42 monotonic, align 2
  %45 = lshr exact i64 %31, 1
  %46 = trunc i64 %45 to i16
  %47 = getelementptr inbounds i8, i8* %37, i64 6
  %48 = bitcast i8* %47 to i16*
  store i16 %46, i16* %48, align 2
  %49 = ptrtoint i8* %37 to i64
  %50 = and i64 %49, -131072
  %51 = inttoptr i64 %50 to i8*
  %52 = getelementptr inbounds i8, i8* %51, i64 4400
  %53 = bitcast i8* %52 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %54 = bitcast i8* %52 to i64*
  %55 = load i64, i64* %54, align 16
  %56 = sub i64 %49, %55
  %57 = lshr i64 %56, 3
  %58 = lshr i64 %56, 6
  %59 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %53, i64 0, i32 0, i32 1, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = trunc i64 %57 to i32
  %62 = and i32 %61, 7
  %63 = shl i32 1, %62
  %64 = trunc i32 %63 to i8
  %65 = or i8 %60, %64
  store atomic i8 %65, i8* %59 release, align 1
  %66 = getelementptr inbounds i8, i8* %37, i64 8
  br label %70

67:                                               ; preds = %29
  %68 = zext i32 %4 to i64
  %69 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %13, i64 %31, i64 %68) #9
  br label %70

70:                                               ; preds = %35, %67
  %71 = phi i8* [ %66, %35 ], [ %69, %67 ]
  ret i8* %71
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #3

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #3

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #3

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS2_16AtomicStringHashENS2_10HashTraitsIS3_EENS9_IS7_EEEEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to i64*
  %4 = load atomic i64, i64* %3 monotonic, align 8
  %5 = bitcast i8* %1 to i8**
  %6 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8**)***
  %7 = load void (%"class.blink::Visitor"*, i8**)**, void (%"class.blink::Visitor"*, i8**)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.blink::Visitor"*, i8**)*, void (%"class.blink::Visitor"*, i8**)** %7, i64 11
  %9 = load void (%"class.blink::Visitor"*, i8**)*, void (%"class.blink::Visitor"*, i8**)** %8, align 8
  tail call void %9(%"class.blink::Visitor"* %0, i8** %5) #9
  %10 = icmp eq i64 %4, 0
  br i1 %10, label %17, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %4 to i8*
  %13 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %14 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %14, i64 5
  %16 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %15, align 8
  tail call void %16(%"class.blink::Visitor"* %0, i8* nonnull %12, i8* nonnull %12, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberIKNS_8CSSValueEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSE_IS9_EEEESF_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv) #9
  br label %17

17:                                               ; preds = %2, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS2_16AtomicStringHashENS2_10HashTraitsIS3_EENS9_IS7_EEEEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberIKNS_8CSSValueEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSE_IS9_EEEESF_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %29, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds i8, i8* %1, i64 -2
  %6 = bitcast i8* %5 to i16*
  %7 = load atomic i16, i16* %6 monotonic, align 2
  %8 = icmp ult i16 %7, 4
  br i1 %8, label %9, label %17

9:                                                ; preds = %4
  %10 = getelementptr inbounds i8, i8* %1, i64 -8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, -131072
  %13 = inttoptr i64 %12 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 4144
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 16
  br label %22

17:                                               ; preds = %4
  %18 = load atomic i16, i16* %6 monotonic, align 2
  %19 = lshr i16 %18, 2
  %20 = zext i16 %19 to i64
  %21 = shl nuw nsw i64 %20, 3
  br label %22

22:                                               ; preds = %9, %17
  %23 = phi i64 [ %16, %9 ], [ %21, %17 ]
  %24 = bitcast %"class.blink::Visitor"* %0 to i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)***
  %25 = load i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)**, i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)*** %24, align 8
  %26 = getelementptr inbounds i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)*, i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)** %25, i64 4
  %27 = load i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)*, i1 (%"class.blink::Visitor"*, i8*, void (%"class.blink::Visitor"*, i8*)*, i64)** %26, align 8
  %28 = tail call zeroext i1 %27(%"class.blink::Visitor"* %0, i8* nonnull %1, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberIKNS_8CSSValueEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSE_IS9_EEEESF_NS_13HeapAllocatorEEEEEE5TraceILNS2_16WeakHandlingFlagE0EEEvPNS_7VisitorEPKv, i64 %23) #9
  br i1 %28, label %30, label %29

29:                                               ; preds = %2, %22
  tail call void @_ZN3WTF38TraceHashTableBackingInCollectionTraitILNS_16WeakHandlingFlagE0ENS_9HashTableINS_12AtomicStringENS_12KeyValuePairIS3_N5blink6MemberIKNS5_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSE_IS9_EEEESF_NS5_13HeapAllocatorEEEE5TraceEPNS5_7VisitorEPKv(%"class.blink::Visitor"* %0, i8* %1) #9
  br label %30

30:                                               ; preds = %22, %29
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF38TraceHashTableBackingInCollectionTraitILNS_16WeakHandlingFlagE0ENS_9HashTableINS_12AtomicStringENS_12KeyValuePairIS3_N5blink6MemberIKNS5_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSE_IS9_EEEESF_NS5_13HeapAllocatorEEEE5TraceEPNS5_7VisitorEPKv(%"class.blink::Visitor"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"struct.WTF::KeyValuePair.12"*
  %4 = getelementptr inbounds i8, i8* %1, i64 -2
  %5 = bitcast i8* %4 to i16*
  %6 = load i16, i16* %5, align 2
  %7 = lshr i16 %6, 2
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %9, label %17, !prof !2

9:                                                ; preds = %2
  %10 = getelementptr inbounds i8, i8* %1, i64 -8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, -131072
  %13 = inttoptr i64 %12 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 4144
  %15 = bitcast i8* %14 to i64*
  %16 = load i64, i64* %15, align 16
  br label %20

17:                                               ; preds = %2
  %18 = zext i16 %7 to i64
  %19 = shl nuw nsw i64 %18, 3
  br label %20

20:                                               ; preds = %9, %17
  %21 = phi i64 [ %16, %9 ], [ %19, %17 ]
  %22 = add i64 %21, -8
  %23 = lshr i64 %22, 4
  %24 = bitcast %"class.blink::Visitor"* %0 to i1 (%"class.blink::Visitor"*)***
  %25 = load i1 (%"class.blink::Visitor"*)**, i1 (%"class.blink::Visitor"*)*** %24, align 8
  %26 = getelementptr inbounds i1 (%"class.blink::Visitor"*)*, i1 (%"class.blink::Visitor"*)** %25, i64 3
  %27 = load i1 (%"class.blink::Visitor"*)*, i1 (%"class.blink::Visitor"*)** %26, align 8
  %28 = tail call zeroext i1 %27(%"class.blink::Visitor"* %0) #9
  %29 = icmp eq i64 %23, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %20
  %31 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  br label %33

32:                                               ; preds = %63, %20
  ret void

33:                                               ; preds = %63, %30
  %34 = phi i64 [ 0, %30 ], [ %64, %63 ]
  %35 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %3, i64 %34
  %36 = bitcast %"struct.WTF::KeyValuePair.12"* %35 to i64*
  br i1 %28, label %37, label %50

37:                                               ; preds = %33
  %38 = load atomic i64, i64* %36 monotonic, align 8
  switch i64 %38, label %39 [
    i64 -1, label %63
    i64 0, label %63
  ]

39:                                               ; preds = %37
  %40 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %3, i64 %34, i32 1
  %41 = bitcast %"class.blink::Member"* %40 to i64*
  %42 = load atomic i64, i64* %41 monotonic, align 8
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %63, label %44

44:                                               ; preds = %39
  %45 = inttoptr i64 %42 to %"class.blink::CSSValue"*
  %46 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %45, i64 0, i32 0
  %47 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %31, align 8
  %48 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %47, i64 5
  %49 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %48, align 8
  tail call void %49(%"class.blink::Visitor"* %0, i8* %46, i8* %46, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_8CSSValueEE5TraceEPNS_7VisitorEPKv) #9
  br label %63

50:                                               ; preds = %33
  %51 = load i64, i64* %36, align 8
  switch i64 %51, label %52 [
    i64 -1, label %63
    i64 0, label %63
  ]

52:                                               ; preds = %50
  %53 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %3, i64 %34, i32 1
  %54 = bitcast %"class.blink::Member"* %53 to i64*
  %55 = load atomic i64, i64* %54 monotonic, align 8
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %63, label %57

57:                                               ; preds = %52
  %58 = inttoptr i64 %55 to %"class.blink::CSSValue"*
  %59 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %58, i64 0, i32 0
  %60 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %31, align 8
  %61 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %60, i64 5
  %62 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %61, align 8
  tail call void %62(%"class.blink::Visitor"* %0, i8* %59, i8* %59, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_8CSSValueEE5TraceEPNS_7VisitorEPKv) #9
  br label %63

63:                                               ; preds = %50, %50, %37, %37, %57, %52, %39, %44
  %64 = add nuw nsw i64 %34, 1
  %65 = icmp eq i64 %64, %23
  br i1 %65, label %32, label %33
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_8CSSValueEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::CSSValue"*
  tail call void @_ZNK5blink8CSSValue5TraceEPNS_7VisitorE(%"class.blink::CSSValue"* %3, %"class.blink::Visitor"* %0) #9
  ret void
}

declare void @_ZNK5blink8CSSValue5TraceEPNS_7VisitorE(%"class.blink::CSSValue"*, %"class.blink::Visitor"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink19TraceMethodDelegateINS_14PersistentBaseINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS3_16AtomicStringHashENS3_10HashTraitsIS4_EENSA_IS8_EEEELNS_31WeaknessPersistentConfigurationE0ELNS_38CrossThreadnessPersistentConfigurationE0EEEXadL_ZNKSG_15TracePersistentEPNS_7VisitorEEEE10TrampolineESI_PKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = alloca %"class.base::Location", align 8
  %4 = bitcast i8* %1 to %"class.blink::HeapHashMap"**
  %5 = load %"class.blink::HeapHashMap"*, %"class.blink::HeapHashMap"** %4, align 8
  %6 = bitcast %"class.base::Location"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #9
  call void @_ZN4base8LocationC1Ev(%"class.base::Location"* nonnull %3) #9
  %7 = icmp eq %"class.blink::HeapHashMap"* %5, null
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.blink::HeapHashMap"* %5 to i8*
  %10 = bitcast %"class.blink::Visitor"* %0 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)***
  %11 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)*** %10, align 8
  %12 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)** %11, i64 8
  %13 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*, %"class.base::Location"*)** %12, align 8
  call void %13(%"class.blink::Visitor"* %0, i8* nonnull %9, i8* nonnull %9, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS2_16AtomicStringHashENS2_10HashTraitsIS3_EENS9_IS7_EEEEE5TraceEPNS_7VisitorEPKv, %"class.base::Location"* nonnull dereferenceable(32) %3) #9
  br label %14

14:                                               ; preds = %2, %8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #9
  ret void
}

declare void @_ZN4base8LocationC1Ev(%"class.base::Location"*) unnamed_addr #3

declare void @_ZN5blink20PersistentRegionBase15EnsureNodeSlotsEv(%"class.blink::PersistentRegionBase"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HeapHashMap"* @_ZN5blink25MakeGarbageCollectedTraitINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS2_16AtomicStringHashENS2_10HashTraitsIS3_EENS9_IS7_EEEEE4CallIJRSC_EEEPSC_DpOT_(%"class.blink::HeapHashMap"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %2 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_11HeapHashMapIN3WTF12AtomicStringENS_6MemberIKNS_8CSSValueEEENS3_16AtomicStringHashENS3_10HashTraitsIS4_EENSA_IS8_EEEEEEPhm(i64 24) #9
  %3 = bitcast i8* %2 to %"class.blink::HeapHashMap"*
  %4 = bitcast i8* %2 to %"class.WTF::HashTable.10"*
  %5 = getelementptr inbounds %"class.blink::HeapHashMap", %"class.blink::HeapHashMap"* %0, i64 0, i32 0, i32 0, i32 2
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 20, i1 false) #9
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %44, label %8

8:                                                ; preds = %1
  tail call void @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable.10"* %4, i32 %6) #9
  %9 = load i32, i32* %5, align 4
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"class.blink::HeapHashMap", %"class.blink::HeapHashMap"* %0, i64 0, i32 0, i32 0, i32 0
  %12 = load %"struct.WTF::KeyValuePair.12"*, %"struct.WTF::KeyValuePair.12"** %11, align 8
  %13 = getelementptr inbounds %"class.blink::HeapHashMap", %"class.blink::HeapHashMap"* %0, i64 0, i32 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %12, i64 %15
  br i1 %10, label %44, label %17

17:                                               ; preds = %8
  %18 = icmp eq i32 %14, 0
  br i1 %18, label %26, label %19

19:                                               ; preds = %17, %23
  %20 = phi %"struct.WTF::KeyValuePair.12"* [ %24, %23 ], [ %12, %17 ]
  %21 = bitcast %"struct.WTF::KeyValuePair.12"* %20 to i64*
  %22 = load i64, i64* %21, align 8
  switch i64 %22, label %26 [
    i64 -1, label %23
    i64 0, label %23
  ]

23:                                               ; preds = %19, %19
  %24 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %20, i64 1
  %25 = icmp eq %"struct.WTF::KeyValuePair.12"* %24, %16
  br i1 %25, label %44, label %19

26:                                               ; preds = %19, %17
  %27 = phi %"struct.WTF::KeyValuePair.12"* [ %12, %17 ], [ %20, %19 ]
  %28 = icmp eq %"struct.WTF::KeyValuePair.12"* %27, %16
  br i1 %28, label %44, label %29

29:                                               ; preds = %26, %42
  %30 = phi %"struct.WTF::KeyValuePair.12"* [ %36, %42 ], [ %27, %26 ]
  %31 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %30, i64 0, i32 0
  %32 = tail call { %"struct.WTF::KeyValuePair.12"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE6insertINS_22IdentityHashTranslatorISA_SF_SG_EERKS1_RKS8_EENS_18HashTableAddResultISH_S8_EEOT0_OT1_(%"class.WTF::HashTable.10"* %4, %"class.WTF::AtomicString"* dereferenceable(8) %31, %"struct.WTF::KeyValuePair.12"* dereferenceable(16) %30) #9
  %33 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %30, i64 1
  %34 = icmp eq %"struct.WTF::KeyValuePair.12"* %33, %16
  br i1 %34, label %44, label %35

35:                                               ; preds = %29, %39
  %36 = phi %"struct.WTF::KeyValuePair.12"* [ %40, %39 ], [ %33, %29 ]
  %37 = bitcast %"struct.WTF::KeyValuePair.12"* %36 to i64*
  %38 = load i64, i64* %37, align 8
  switch i64 %38, label %42 [
    i64 -1, label %39
    i64 0, label %39
  ]

39:                                               ; preds = %35, %35
  %40 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %36, i64 1
  %41 = icmp eq %"struct.WTF::KeyValuePair.12"* %40, %16
  br i1 %41, label %44, label %35

42:                                               ; preds = %35
  %43 = icmp eq %"struct.WTF::KeyValuePair.12"* %36, %16
  br i1 %43, label %44, label %29

44:                                               ; preds = %23, %29, %42, %39, %1, %8, %26
  %45 = getelementptr inbounds i8, i8* %2, i64 -4
  %46 = bitcast i8* %45 to i16*
  %47 = load atomic i16, i16* %46 monotonic, align 2
  %48 = or i16 %47, 1
  store atomic i16 %48, i16* %46 release, align 2
  ret %"class.blink::HeapHashMap"* %3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE22ReserveCapacityForSizeEj(%"class.WTF::HashTable.10"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca i8, align 1
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = icmp eq i32 %1, 0
  br i1 %5, label %17, label %6

6:                                                ; preds = %2, %6
  %7 = phi i32 [ %10, %6 ], [ %1, %2 ]
  %8 = phi i32 [ %9, %6 ], [ %1, %2 ]
  %9 = or i32 %8, %7
  %10 = lshr i32 %7, 1
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %6

12:                                               ; preds = %6
  %13 = shl i32 %9, 1
  %14 = add i32 %13, 2
  %15 = icmp ugt i32 %14, 8
  %16 = select i1 %15, i32 %14, i32 8
  br label %17

17:                                               ; preds = %12, %2
  %18 = phi i32 [ 8, %2 ], [ %16, %12 ]
  %19 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = icmp ugt i32 %18, %20
  br i1 %21, label %22, label %40

22:                                               ; preds = %17
  %23 = icmp slt i32 %18, 0
  br i1 %23, label %24, label %28

24:                                               ; preds = %22
  %25 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 1094, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0)) #9
  %26 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #9
  %27 = load i32, i32* %19, align 8
  br label %28

28:                                               ; preds = %22, %24
  %29 = phi i32 [ %20, %22 ], [ %27, %24 ]
  %30 = icmp ult i32 %29, %18
  br i1 %30, label %31, label %35

31:                                               ; preds = %28
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #9
  store i8 -86, i8* %3, align 1
  %32 = call %"struct.WTF::KeyValuePair.12"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE12ExpandBufferEjPS8_Rb(%"class.WTF::HashTable.10"* %0, i32 %18, %"struct.WTF::KeyValuePair.12"* null, i8* nonnull dereferenceable(1) %3) #9
  %33 = load i8, i8* %3, align 1, !range !10
  %34 = icmp eq i8 %33, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #9
  br i1 %34, label %35, label %40

35:                                               ; preds = %31, %28
  %36 = zext i32 %18 to i64
  %37 = call %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberIKNS_8CSSValueEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSE_IS9_EEEESF_NS_13HeapAllocatorEEEEEE4CallEm(i64 %36) #9
  %38 = bitcast %"class.blink::HeapHashTableBacking"* %37 to %"struct.WTF::KeyValuePair.12"*
  %39 = call %"struct.WTF::KeyValuePair.12"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE8RehashToEPS8_jSI_(%"class.WTF::HashTable.10"* %0, %"struct.WTF::KeyValuePair.12"* %38, i32 %18, %"struct.WTF::KeyValuePair.12"* null) #9
  br label %40

40:                                               ; preds = %35, %31, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.12"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE12ExpandBufferEjPS8_Rb(%"class.WTF::HashTable.10"*, i32, %"struct.WTF::KeyValuePair.12"*, i8* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.logging::CheckError", align 8
  store i8 0, i8* %3, align 1
  %6 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %7 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %6, i64 0, i32 1
  %8 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %7) #9
  %9 = icmp eq i8* %8, null
  br i1 %9, label %10, label %12, !prof !2

10:                                               ; preds = %4
  %11 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %7, i8* %11) #9
  br label %12

12:                                               ; preds = %10, %4
  %13 = phi i8* [ %11, %10 ], [ %8, %4 ]
  %14 = bitcast i8* %13 to %"class.blink::ThreadState"**
  %15 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %15, i64 0, i32 6
  %17 = load i8, i8* %16, align 8, !range !10
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %12
  %20 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %15, i64 0, i32 16
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %27, label %23

23:                                               ; preds = %12, %19
  %24 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %15, i64 0, i32 13
  %25 = load i64, i64* %24, align 8
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %19, %23
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 1801, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i64 0, i64 0)) #9
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #9
  br label %30

30:                                               ; preds = %23, %27
  %31 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 0
  %32 = load %"struct.WTF::KeyValuePair.12"*, %"struct.WTF::KeyValuePair.12"** %31, align 8
  %33 = icmp eq %"struct.WTF::KeyValuePair.12"* %32, null
  br i1 %33, label %116, label %34

34:                                               ; preds = %30
  %35 = zext i32 %1 to i64
  %36 = shl nuw nsw i64 %35, 4
  %37 = bitcast %"struct.WTF::KeyValuePair.12"* %32 to i8*
  %38 = call zeroext i1 @_ZN5blink13HeapAllocator13BackingExpandEPvm(i8* nonnull %37, i64 %36) #9
  br i1 %38, label %39, label %116

39:                                               ; preds = %34
  store i8 1, i8* %3, align 1
  %40 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 1
  %41 = load i32, i32* %40, align 8
  %42 = load %"struct.WTF::KeyValuePair.12"*, %"struct.WTF::KeyValuePair.12"** %31, align 8
  %43 = zext i32 %41 to i64
  %44 = call %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberIKNS_8CSSValueEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSE_IS9_EEEESF_NS_13HeapAllocatorEEEEEE4CallEm(i64 %43) #9
  %45 = bitcast %"class.blink::HeapHashTableBacking"* %44 to %"struct.WTF::KeyValuePair.12"*
  %46 = icmp eq i32 %41, 0
  br i1 %46, label %47, label %58

47:                                               ; preds = %113, %39
  %48 = phi %"struct.WTF::KeyValuePair.12"* [ null, %39 ], [ %65, %113 ]
  %49 = bitcast %"class.WTF::HashTable.10"* %0 to %"class.blink::HeapHashTableBacking"**
  store %"class.blink::HeapHashTableBacking"* %44, %"class.blink::HeapHashTableBacking"** %49, align 8
  %50 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %55, label %52

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.blink::HeapHashTableBacking", %"class.blink::HeapHashTableBacking"* %44, i64 0, i32 0
  %54 = call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %53) #9
  br label %55

55:                                               ; preds = %47, %52
  %56 = bitcast %"struct.WTF::KeyValuePair.12"* %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 %36, i1 false)
  %57 = call %"struct.WTF::KeyValuePair.12"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE8RehashToEPS8_jSI_(%"class.WTF::HashTable.10"* %0, %"struct.WTF::KeyValuePair.12"* %42, i32 %1, %"struct.WTF::KeyValuePair.12"* %48)
  br label %116

58:                                               ; preds = %39, %113
  %59 = phi i64 [ %114, %113 ], [ 0, %39 ]
  %60 = phi %"struct.WTF::KeyValuePair.12"* [ %65, %113 ], [ null, %39 ]
  %61 = load %"struct.WTF::KeyValuePair.12"*, %"struct.WTF::KeyValuePair.12"** %31, align 8
  %62 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %61, i64 %59
  %63 = icmp eq %"struct.WTF::KeyValuePair.12"* %62, %2
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %45, i64 %59
  %65 = select i1 %63, %"struct.WTF::KeyValuePair.12"* %64, %"struct.WTF::KeyValuePair.12"* %60
  %66 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %62, i64 0, i32 0, i32 0, i32 0, i32 0
  %67 = bitcast %"struct.WTF::KeyValuePair.12"* %62 to i64*
  %68 = load i64, i64* %67, align 8
  switch i64 %68, label %71 [
    i64 -1, label %69
    i64 0, label %69
  ]

69:                                               ; preds = %58, %58
  %70 = bitcast %"struct.WTF::KeyValuePair.12"* %64 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %70, i8 0, i64 16, i1 false)
  br label %113

71:                                               ; preds = %58
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %64, i64 0, i32 0, i32 0, i32 0, i32 0
  %73 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %72, align 8
  %74 = icmp eq %"class.WTF::StringImpl"* %73, null
  br i1 %74, label %88, label %75

75:                                               ; preds = %71
  %76 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %77 = load atomic i32, i32* %76 monotonic, align 4
  %78 = and i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 0, i32 0
  %81 = load i32, i32* %80, align 4
  br i1 %79, label %82, label %84

82:                                               ; preds = %75
  %83 = add i32 %81, -1
  store i32 %83, i32* %80, align 4
  br label %84

84:                                               ; preds = %82, %75
  %85 = phi i32 [ %83, %82 ], [ %81, %75 ]
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %88

87:                                               ; preds = %84
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %73) #9
  br label %88

88:                                               ; preds = %71, %84, %87
  %89 = load i64, i64* %67, align 8
  %90 = bitcast %"struct.WTF::KeyValuePair.12"* %64 to i64*
  store i64 %89, i64* %90, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %66, align 8
  %91 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %45, i64 %59, i32 1
  %92 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %61, i64 %59, i32 1
  %93 = bitcast %"class.blink::Member"* %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = bitcast %"class.blink::Member"* %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = load %"struct.WTF::KeyValuePair.12"*, %"struct.WTF::KeyValuePair.12"** %31, align 8
  %97 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %96, i64 %59, i32 0, i32 0, i32 0, i32 0
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %113, label %100

100:                                              ; preds = %88
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  br i1 %104, label %107, label %109

107:                                              ; preds = %100
  %108 = add i32 %106, -1
  store i32 %108, i32* %105, align 4
  br label %109

109:                                              ; preds = %107, %100
  %110 = phi i32 [ %108, %107 ], [ %106, %100 ]
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %98) #9
  br label %113

113:                                              ; preds = %112, %109, %88, %69
  %114 = add nuw nsw i64 %59, 1
  %115 = icmp eq i64 %114, %43
  br i1 %115, label %47, label %58

116:                                              ; preds = %34, %30, %55
  %117 = phi %"struct.WTF::KeyValuePair.12"* [ %57, %55 ], [ null, %30 ], [ null, %34 ]
  ret %"struct.WTF::KeyValuePair.12"* %117
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.12"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE8RehashToEPS8_jSI_(%"class.WTF::HashTable.10"*, %"struct.WTF::KeyValuePair.12"*, i32, %"struct.WTF::KeyValuePair.12"*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"struct.WTF::KeyValuePair.12"* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 0
  %11 = add i32 %2, -1
  %12 = zext i32 %11 to i64
  %13 = load %"struct.WTF::KeyValuePair.12"*, %"struct.WTF::KeyValuePair.12"** %10, align 8
  br label %70

14:                                               ; preds = %169, %4
  %15 = phi i32 [ 0, %4 ], [ %170, %169 ]
  %16 = phi %"struct.WTF::KeyValuePair.12"* [ null, %4 ], [ %172, %169 ]
  %17 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %14
  %20 = bitcast %"struct.WTF::KeyValuePair.12"* %1 to i8*
  tail call void @_ZN5blink14MarkingVisitor17RetraceObjectSlowEPKv(i8* %20) #9
  %21 = load i32, i32* %6, align 8
  br label %22

22:                                               ; preds = %14, %19
  %23 = phi i32 [ %15, %14 ], [ %21, %19 ]
  %24 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 0
  %25 = load %"struct.WTF::KeyValuePair.12"*, %"struct.WTF::KeyValuePair.12"** %24, align 8
  %26 = bitcast %"class.WTF::HashTable.10"* %0 to i64*
  store atomic i64 %5, i64* %26 monotonic, align 8
  %27 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %32, label %29

29:                                               ; preds = %22
  %30 = bitcast %"struct.WTF::KeyValuePair.12"* %1 to i8*
  %31 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %30) #9
  br label %32

32:                                               ; preds = %22, %29
  store i32 %2, i32* %6, align 8
  %33 = icmp eq %"struct.WTF::KeyValuePair.12"* %25, null
  br i1 %33, label %66, label %34

34:                                               ; preds = %32
  %35 = icmp eq i32 %23, 0
  br i1 %35, label %64, label %36

36:                                               ; preds = %34
  %37 = zext i32 %23 to i64
  br label %38

38:                                               ; preds = %61, %36
  %39 = phi i64 [ 0, %36 ], [ %62, %61 ]
  %40 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %25, i64 %39
  %41 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %40, i64 0, i32 0, i32 0, i32 0, i32 0
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8
  %43 = ptrtoint %"class.WTF::StringImpl"* %42 to i64
  switch i64 %43, label %44 [
    i64 -1, label %61
    i64 0, label %61
  ]

44:                                               ; preds = %38
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %50 = load i32, i32* %49, align 4
  br i1 %48, label %51, label %53

51:                                               ; preds = %44
  %52 = add i32 %50, -1
  store i32 %52, i32* %49, align 4
  br label %53

53:                                               ; preds = %51, %44
  %54 = phi i32 [ %52, %51 ], [ %50, %44 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %53
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %42) #9
  br label %57

57:                                               ; preds = %56, %53
  %58 = bitcast %"struct.WTF::KeyValuePair.12"* %40 to i8**
  store i8* inttoptr (i64 -1 to i8*), i8** %58, align 8
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %25, i64 %39, i32 1
  %60 = bitcast %"class.blink::Member"* %59 to i64*
  store atomic i64 0, i64* %60 monotonic, align 8
  br label %61

61:                                               ; preds = %57, %38, %38
  %62 = add nuw nsw i64 %39, 1
  %63 = icmp eq i64 %62, %37
  br i1 %63, label %64, label %38

64:                                               ; preds = %61, %34
  %65 = bitcast %"struct.WTF::KeyValuePair.12"* %25 to i8*
  tail call void @_ZN5blink13HeapAllocator11BackingFreeEPv(i8* nonnull %65) #9
  br label %66

66:                                               ; preds = %32, %64
  %67 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 3
  %68 = load i32, i32* %67, align 8
  %69 = and i32 %68, -2147483648
  store i32 %69, i32* %67, align 8
  ret %"struct.WTF::KeyValuePair.12"* %16

70:                                               ; preds = %9, %169
  %71 = phi i32 [ %7, %9 ], [ %170, %169 ]
  %72 = phi %"struct.WTF::KeyValuePair.12"* [ %13, %9 ], [ %171, %169 ]
  %73 = phi %"struct.WTF::KeyValuePair.12"* [ null, %9 ], [ %172, %169 ]
  %74 = phi i32 [ 0, %9 ], [ %173, %169 ]
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %72, i64 %75
  %77 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %76, i64 0, i32 0, i32 0, i32 0, i32 0
  %78 = bitcast %"struct.WTF::KeyValuePair.12"* %76 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = inttoptr i64 %79 to %"class.WTF::StringImpl"*
  switch i64 %79, label %81 [
    i64 -1, label %169
    i64 0, label %169
  ]

81:                                               ; preds = %70
  %82 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %80, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %83 = load atomic i32, i32* %82 monotonic, align 4
  %84 = lshr i32 %83, 8
  %85 = and i32 %84, %11
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %1, i64 %86
  %88 = ptrtoint %"struct.WTF::KeyValuePair.12"* %87 to i64
  %89 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %87, i64 0, i32 0, i32 0, i32 0, i32 0
  %90 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %89, align 8
  %91 = icmp eq %"class.WTF::StringImpl"* %90, null
  br i1 %91, label %108, label %92

92:                                               ; preds = %81
  %93 = xor i32 %84, -1
  %94 = lshr i32 %83, 31
  %95 = add nsw i32 %94, %93
  %96 = shl i32 %95, 12
  %97 = xor i32 %96, %95
  %98 = lshr i32 %97, 7
  %99 = xor i32 %98, %97
  %100 = shl i32 %99, 2
  %101 = xor i32 %100, %99
  %102 = lshr i32 %101, 20
  %103 = xor i32 %102, %101
  %104 = or i32 %103, 1
  %105 = zext i32 %104 to i64
  br label %114

106:                                              ; preds = %126
  %107 = ptrtoint %"struct.WTF::KeyValuePair.12"* %132 to i64
  br label %108

108:                                              ; preds = %106, %81
  %109 = phi i64 [ %88, %81 ], [ %107, %106 ]
  %110 = phi %"struct.WTF::KeyValuePair.12"* [ null, %81 ], [ %127, %106 ]
  %111 = icmp eq %"struct.WTF::KeyValuePair.12"* %110, null
  %112 = ptrtoint %"struct.WTF::KeyValuePair.12"* %110 to i64
  %113 = select i1 %111, i64 %109, i64 %112
  br label %137

114:                                              ; preds = %126, %92
  %115 = phi %"struct.WTF::KeyValuePair.12"* [ null, %92 ], [ %127, %126 ]
  %116 = phi i64 [ %88, %92 ], [ %133, %126 ]
  %117 = phi %"struct.WTF::KeyValuePair.12"* [ %87, %92 ], [ %132, %126 ]
  %118 = phi i64 [ %86, %92 ], [ %131, %126 ]
  %119 = phi i64 [ 0, %92 ], [ %129, %126 ]
  %120 = bitcast %"struct.WTF::KeyValuePair.12"* %117 to i8**
  %121 = load i8*, i8** %120, align 8
  %122 = icmp eq i8* %121, inttoptr (i64 -1 to i8*)
  br i1 %122, label %126, label %123

123:                                              ; preds = %114
  %124 = bitcast i8* %121 to %"class.WTF::StringImpl"*
  %125 = icmp eq %"class.WTF::StringImpl"* %80, %124
  br i1 %125, label %137, label %126

126:                                              ; preds = %123, %114
  %127 = phi %"struct.WTF::KeyValuePair.12"* [ %115, %123 ], [ %117, %114 ]
  %128 = icmp eq i64 %119, 0
  %129 = select i1 %128, i64 %105, i64 %119
  %130 = add i64 %129, %118
  %131 = and i64 %130, %12
  %132 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %1, i64 %131
  %133 = ptrtoint %"struct.WTF::KeyValuePair.12"* %132 to i64
  %134 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %132, i64 0, i32 0, i32 0, i32 0, i32 0
  %135 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %134, align 8
  %136 = icmp eq %"class.WTF::StringImpl"* %135, null
  br i1 %136, label %106, label %114

137:                                              ; preds = %123, %108
  %138 = phi i64 [ %113, %108 ], [ %116, %123 ]
  %139 = inttoptr i64 %138 to %"struct.WTF::KeyValuePair.12"*
  %140 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %139, i64 0, i32 0, i32 0, i32 0, i32 0
  %141 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %140, align 8
  %142 = icmp eq %"class.WTF::StringImpl"* %141, null
  br i1 %142, label %156, label %143

143:                                              ; preds = %137
  %144 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %141, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %145 = load atomic i32, i32* %144 monotonic, align 4
  %146 = and i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %141, i64 0, i32 0
  %149 = load i32, i32* %148, align 4
  br i1 %147, label %150, label %152

150:                                              ; preds = %143
  %151 = add i32 %149, -1
  store i32 %151, i32* %148, align 4
  br label %152

152:                                              ; preds = %150, %143
  %153 = phi i32 [ %151, %150 ], [ %149, %143 ]
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %156

155:                                              ; preds = %152
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %141) #9
  br label %156

156:                                              ; preds = %137, %152, %155
  %157 = load i64, i64* %78, align 8
  %158 = inttoptr i64 %138 to i64*
  store i64 %157, i64* %158, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %77, align 8
  %159 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %139, i64 0, i32 1
  %160 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %72, i64 %75, i32 1
  %161 = bitcast %"class.blink::Member"* %160 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = bitcast %"class.blink::Member"* %159 to i64*
  store i64 %162, i64* %163, align 8
  %164 = load %"struct.WTF::KeyValuePair.12"*, %"struct.WTF::KeyValuePair.12"** %10, align 8
  %165 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %164, i64 %75
  %166 = icmp eq %"struct.WTF::KeyValuePair.12"* %165, %3
  %167 = select i1 %166, %"struct.WTF::KeyValuePair.12"* %139, %"struct.WTF::KeyValuePair.12"* %73
  %168 = load i32, i32* %6, align 8
  br label %169

169:                                              ; preds = %70, %70, %156
  %170 = phi i32 [ %71, %70 ], [ %168, %156 ], [ %71, %70 ]
  %171 = phi %"struct.WTF::KeyValuePair.12"* [ %72, %70 ], [ %164, %156 ], [ %72, %70 ]
  %172 = phi %"struct.WTF::KeyValuePair.12"* [ %73, %70 ], [ %167, %156 ], [ %73, %70 ]
  %173 = add i32 %74, 1
  %174 = icmp eq i32 %173, %170
  br i1 %174, label %14, label %70
}

declare zeroext i1 @_ZN5blink13HeapAllocator13BackingExpandEPvm(i8*, i64) local_unnamed_addr #3

declare zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberIKNS_8CSSValueEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSE_IS9_EEEESF_NS_13HeapAllocatorEEEEEE4CallEm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #9
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp eq i64 %0, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 0) #9
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 0) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0), i8* %11, i8* %12) #9
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.8, i64 0, i64 0), i32 77, %"class.logging::CheckOpResult"* nonnull %3) #9
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #9
  %20 = shl i64 %0, 4
  %21 = call i8* @_ZN5blink20HeapHashTableBackingIN3WTF9HashTableINS1_12AtomicStringENS1_12KeyValuePairIS3_NS_6MemberIKNS_8CSSValueEEEEENS1_24KeyValuePairKeyExtractorENS1_16AtomicStringHashENS1_18HashMapValueTraitsINS1_10HashTraitsIS3_EENSD_IS8_EEEESE_NS_13HeapAllocatorEEEE14AllocateObjectISJ_EEPvm(i64 %20)
  %22 = bitcast i8* %21 to %"class.blink::HeapHashTableBacking"*
  %23 = getelementptr inbounds i8, i8* %21, i64 -4
  %24 = bitcast i8* %23 to i16*
  %25 = load atomic i16, i16* %24 monotonic, align 2
  %26 = or i16 %25, 1
  store atomic i16 %26, i16* %24 release, align 2
  ret %"class.blink::HeapHashTableBacking"* %22
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink20HeapHashTableBackingIN3WTF9HashTableINS1_12AtomicStringENS1_12KeyValuePairIS3_NS_6MemberIKNS_8CSSValueEEEEENS1_24KeyValuePairKeyExtractorENS1_16AtomicStringHashENS1_18HashMapValueTraitsINS1_10HashTraitsIS3_EENSD_IS8_EEEESE_NS_13HeapAllocatorEEEE14AllocateObjectISJ_EEPvm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %3 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %2, i64 0, i32 1
  %4 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %3) #9
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %8, !prof !2

6:                                                ; preds = %1
  %7 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %3, i8* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = phi i8* [ %7, %6 ], [ %4, %1 ]
  %10 = bitcast i8* %9 to %"class.blink::ThreadState"**
  %11 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %12, align 8
  %14 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberIKNS_8CSSValueEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSE_IS9_EEEESF_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %8
  %17 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %18 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %17, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberIKNS_8CSSValueEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSE_IS9_EEEESF_NS_13HeapAllocatorEEEEEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberIKNS_8CSSValueEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSE_IS9_EEEESF_NS_13HeapAllocatorEEEEEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #9
  br label %19

19:                                               ; preds = %8, %16
  %20 = phi i32 [ %14, %8 ], [ %18, %16 ]
  %21 = tail call i8* @_ZN5blink10ThreadHeap20AllocateOnArenaIndexEPNS_11ThreadStateEmijPKc(%"class.blink::ThreadHeap"* %13, %"class.blink::ThreadState"* %11, i64 %0, i32 5, i32 %20, i8* getelementptr inbounds ([418 x i8], [418 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink20HeapHashTableBackingINS_9HashTableINS_12AtomicStringENS_12KeyValuePairIS4_NS1_6MemberIKNS1_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSE_IS9_EEEESF_NS1_13HeapAllocatorEEEEEEEPKcv, i64 0, i64 0))
  ret i8* %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS3_12AtomicStringENS3_12KeyValuePairIS5_NS_6MemberIKNS_8CSSValueEEEEENS3_24KeyValuePairKeyExtractorENS3_16AtomicStringHashENS3_18HashMapValueTraitsINS3_10HashTraitsIS5_EENSF_ISA_EEEESG_NS_13HeapAllocatorEEEEEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = getelementptr inbounds i8, i8* %0, i64 -2
  %3 = bitcast i8* %2 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = lshr i16 %4, 2
  %6 = icmp eq i16 %5, 0
  br i1 %6, label %7, label %15, !prof !2

7:                                                ; preds = %1
  %8 = getelementptr inbounds i8, i8* %0, i64 -8
  %9 = ptrtoint i8* %8 to i64
  %10 = and i64 %9, -131072
  %11 = inttoptr i64 %10 to i8*
  %12 = getelementptr inbounds i8, i8* %11, i64 4144
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 16
  br label %18

15:                                               ; preds = %1
  %16 = zext i16 %5 to i64
  %17 = shl nuw nsw i64 %16, 3
  br label %18

18:                                               ; preds = %15, %7
  %19 = phi i64 [ %14, %7 ], [ %17, %15 ]
  %20 = add i64 %19, -8
  %21 = lshr i64 %20, 4
  %22 = bitcast i8* %0 to %"struct.WTF::KeyValuePair.12"*
  %23 = icmp eq i64 %21, 0
  br i1 %23, label %47, label %24

24:                                               ; preds = %18, %43
  %25 = phi i64 [ %45, %43 ], [ 0, %18 ]
  %26 = phi i32 [ %44, %43 ], [ 0, %18 ]
  %27 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %22, i64 %25, i32 0, i32 0, i32 0, i32 0
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  %29 = ptrtoint %"class.WTF::StringImpl"* %28 to i64
  switch i64 %29, label %30 [
    i64 -1, label %43
    i64 0, label %43
  ]

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  br i1 %34, label %37, label %39

37:                                               ; preds = %30
  %38 = add i32 %36, -1
  store i32 %38, i32* %35, align 4
  br label %39

39:                                               ; preds = %37, %30
  %40 = phi i32 [ %38, %37 ], [ %36, %30 ]
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %39
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %28) #9
  br label %43

43:                                               ; preds = %42, %39, %24, %24
  %44 = add i32 %26, 1
  %45 = zext i32 %44 to i64
  %46 = icmp ugt i64 %21, %45
  br i1 %46, label %24, label %47

47:                                               ; preds = %43, %18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberIKNS_8CSSValueEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSE_IS9_EEEESF_NS_13HeapAllocatorEEEEEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i8 1 }
}

declare void @_ZN5blink14MarkingVisitor17RetraceObjectSlowEPKv(i8*) local_unnamed_addr #3

declare void @_ZN5blink13HeapAllocator11BackingFreeEPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.12"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE6insertINS_22IdentityHashTranslatorISA_SF_SG_EERKS1_RKS8_EENS_18HashTableAddResultISH_S8_EEOT0_OT1_(%"class.WTF::HashTable.10"*, %"class.WTF::AtomicString"* dereferenceable(8), %"struct.WTF::KeyValuePair.12"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair.12"*, %"struct.WTF::KeyValuePair.12"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair.12"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair.12"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE6ExpandEPS8_(%"class.WTF::HashTable.10"* %0, %"struct.WTF::KeyValuePair.12"* null)
  %9 = load %"struct.WTF::KeyValuePair.12"*, %"struct.WTF::KeyValuePair.12"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair.12"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = and i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %11, i64 %22
  %24 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %23, i64 0, i32 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %72, label %27

27:                                               ; preds = %10
  %28 = xor i32 %20, -1
  %29 = lshr i32 %19, 31
  %30 = add nsw i32 %29, %28
  %31 = shl i32 %30, 12
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 7
  %34 = xor i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 20
  %38 = xor i32 %37, %36
  %39 = or i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %27, %52
  %42 = phi %"struct.WTF::KeyValuePair.12"* [ %23, %27 ], [ %58, %52 ]
  %43 = phi %"struct.WTF::KeyValuePair.12"* [ null, %27 ], [ %53, %52 ]
  %44 = phi i64 [ %22, %27 ], [ %57, %52 ]
  %45 = phi i64 [ 0, %27 ], [ %55, %52 ]
  %46 = bitcast %"struct.WTF::KeyValuePair.12"* %42 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = icmp eq i8* %47, inttoptr (i64 -1 to i8*)
  br i1 %48, label %52, label %49

49:                                               ; preds = %41
  %50 = bitcast i8* %47 to %"class.WTF::StringImpl"*
  %51 = icmp eq %"class.WTF::StringImpl"* %17, %50
  br i1 %51, label %173, label %52

52:                                               ; preds = %41, %49
  %53 = phi %"struct.WTF::KeyValuePair.12"* [ %43, %49 ], [ %42, %41 ]
  %54 = icmp eq i64 %45, 0
  %55 = select i1 %54, i64 %40, i64 %45
  %56 = add i64 %55, %44
  %57 = and i64 %56, %15
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %11, i64 %57
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %58, i64 0, i32 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %62, label %41

62:                                               ; preds = %52
  %63 = icmp eq %"struct.WTF::KeyValuePair.12"* %53, null
  br i1 %63, label %72, label %64

64:                                               ; preds = %62
  %65 = bitcast %"struct.WTF::KeyValuePair.12"* %53 to i8*
  tail call void @_ZN3WTF13AtomicMemzeroEPvm(i8* nonnull %65, i64 16) #9
  %66 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 3
  %67 = load i32, i32* %66, align 8
  %68 = add i32 %67, 2147483647
  %69 = and i32 %68, 2147483647
  %70 = and i32 %67, -2147483648
  %71 = or i32 %69, %70
  store i32 %71, i32* %66, align 8
  br label %72

72:                                               ; preds = %10, %62, %64
  %73 = phi %"struct.WTF::KeyValuePair.12"* [ %53, %64 ], [ %58, %62 ], [ %23, %10 ]
  %74 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %75 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %74, align 8
  %76 = icmp eq %"class.WTF::StringImpl"* %75, null
  br i1 %76, label %94, label %77

77:                                               ; preds = %72
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = load atomic i32, i32* %78 monotonic, align 4
  %80 = and i32 %79, 2
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %94

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = zext i32 %84 to i33
  %86 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %85, i33 1) #9
  %87 = extractvalue { i33, i1 } %86, 1
  %88 = extractvalue { i33, i1 } %86, 0
  %89 = icmp slt i33 %88, 0
  %90 = or i1 %87, %89
  br i1 %90, label %91, label %92, !prof !2

91:                                               ; preds = %82
  tail call void @llvm.trap() #9
  unreachable

92:                                               ; preds = %82
  %93 = trunc i33 %88 to i32
  store i32 %93, i32* %83, align 4
  br label %94

94:                                               ; preds = %92, %77, %72
  %95 = ptrtoint %"class.WTF::StringImpl"* %75 to i64
  %96 = bitcast %"struct.WTF::KeyValuePair.12"* %73 to i64*
  %97 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %73, i64 0, i32 0, i32 0, i32 0, i32 0
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  store i64 %95, i64* %96, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %113, label %100

100:                                              ; preds = %94
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  br i1 %104, label %107, label %109

107:                                              ; preds = %100
  %108 = add i32 %106, -1
  store i32 %108, i32* %105, align 4
  br label %109

109:                                              ; preds = %107, %100
  %110 = phi i32 [ %108, %107 ], [ %106, %100 ]
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %98) #9
  br label %113

113:                                              ; preds = %112, %109, %94
  %114 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %73, i64 0, i32 1
  %115 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %2, i64 0, i32 1
  %116 = bitcast %"class.blink::Member"* %115 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = bitcast %"class.blink::Member"* %114 to i64*
  store atomic i64 %117, i64* %118 monotonic, align 8
  %119 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %124, label %121

121:                                              ; preds = %113
  %122 = inttoptr i64 %117 to i8*
  %123 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %122) #9
  br label %124

124:                                              ; preds = %113, %121
  %125 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %161, label %127

127:                                              ; preds = %124
  %128 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %129 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %128, i64 0, i32 1
  %130 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %129) #9
  %131 = icmp eq i8* %130, null
  br i1 %131, label %132, label %134, !prof !2

132:                                              ; preds = %127
  %133 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %129, i8* %133) #9
  br label %134

134:                                              ; preds = %132, %127
  %135 = phi i8* [ %133, %132 ], [ %130, %127 ]
  %136 = bitcast i8* %135 to %"class.blink::ThreadState"**
  %137 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %136, align 8
  %138 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %137, i64 0, i32 9
  %139 = load i8, i8* %138, align 1, !range !10
  %140 = icmp eq i8 %139, 0
  br i1 %140, label %161, label %141

141:                                              ; preds = %134
  %142 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %137, i64 0, i32 13
  %143 = load i64, i64* %142, align 8
  %144 = add i64 %143, 1
  store i64 %144, i64* %142, align 8
  %145 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %137, i64 0, i32 24, i32 4, i32 0, i32 0, i32 0
  %146 = load %"class.blink::MarkingVisitor"*, %"class.blink::MarkingVisitor"** %145, align 8
  %147 = load atomic i64, i64* %118 monotonic, align 8
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %158, label %149

149:                                              ; preds = %141
  %150 = getelementptr inbounds %"class.blink::MarkingVisitor", %"class.blink::MarkingVisitor"* %146, i64 0, i32 0, i32 0
  %151 = inttoptr i64 %147 to %"class.blink::CSSValue"*
  %152 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %151, i64 0, i32 0
  %153 = bitcast %"class.blink::MarkingVisitor"* %146 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %154 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %153, align 8
  %155 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %154, i64 5
  %156 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %155, align 8
  tail call void %156(%"class.blink::Visitor"* %150, i8* %152, i8* %152, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_8CSSValueEE5TraceEPNS_7VisitorEPKv) #9
  %157 = load i64, i64* %142, align 8
  br label %158

158:                                              ; preds = %149, %141
  %159 = phi i64 [ %144, %141 ], [ %157, %149 ]
  %160 = add i64 %159, -1
  store i64 %160, i64* %142, align 8
  br label %161

161:                                              ; preds = %124, %134, %158
  %162 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 2
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %163, 1
  store i32 %164, i32* %162, align 4
  %165 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 3
  %166 = load i32, i32* %165, align 8
  %167 = add i32 %166, %164
  %168 = shl i32 %167, 1
  %169 = load i32, i32* %12, align 8
  %170 = icmp ult i32 %168, %169
  br i1 %170, label %173, label %171

171:                                              ; preds = %161
  %172 = tail call %"struct.WTF::KeyValuePair.12"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE6ExpandEPS8_(%"class.WTF::HashTable.10"* %0, %"struct.WTF::KeyValuePair.12"* %73)
  br label %173

173:                                              ; preds = %49, %161, %171
  %174 = phi i8 [ 1, %161 ], [ 1, %171 ], [ 0, %49 ]
  %175 = phi %"struct.WTF::KeyValuePair.12"* [ %73, %161 ], [ %172, %171 ], [ %42, %49 ]
  %176 = insertvalue { %"struct.WTF::KeyValuePair.12"*, i8 } undef, %"struct.WTF::KeyValuePair.12"* %175, 0
  %177 = insertvalue { %"struct.WTF::KeyValuePair.12"*, i8 } %176, i8 %174, 1
  ret { %"struct.WTF::KeyValuePair.12"*, i8 } %177
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.12"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE6ExpandEPS8_(%"class.WTF::HashTable.10"*, %"struct.WTF::KeyValuePair.12"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca i8, align 1
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %34, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = mul i32 %12, 6
  %14 = shl i32 %8, 1
  %15 = icmp ult i32 %13, %14
  br i1 %15, label %39, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #9
  %18 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %18, align 8
  %19 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19)
  %20 = icmp ugt i32 %14, %8
  br i1 %20, label %21, label %22

21:                                               ; preds = %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19)
  store i8* null, i8** %18, align 8
  br label %31

22:                                               ; preds = %16
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %14) #9
  %24 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* %23, i8* %24) #9
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19)
  store i8* %26, i8** %18, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %22
  %29 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %5) #9
  %30 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #9
  br label %31

31:                                               ; preds = %28, %22, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #9
  %32 = load i32, i32* %7, align 8
  %33 = icmp ult i32 %32, %14
  br i1 %33, label %34, label %39

34:                                               ; preds = %2, %31
  %35 = phi i32 [ %14, %31 ], [ 8, %2 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #9
  store i8 -86, i8* %4, align 1
  %36 = call %"struct.WTF::KeyValuePair.12"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE12ExpandBufferEjPS8_Rb(%"class.WTF::HashTable.10"* %0, i32 %35, %"struct.WTF::KeyValuePair.12"* %1, i8* nonnull dereferenceable(1) %4) #9
  %37 = load i8, i8* %4, align 1, !range !10
  %38 = icmp eq i8 %37, 0
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #9
  br i1 %38, label %39, label %45

39:                                               ; preds = %10, %34, %31
  %40 = phi i32 [ %35, %34 ], [ %14, %31 ], [ %8, %10 ]
  %41 = zext i32 %40 to i64
  %42 = call %"class.blink::HeapHashTableBacking"* @_ZN5blink25MakeGarbageCollectedTraitINS_20HeapHashTableBackingIN3WTF9HashTableINS2_12AtomicStringENS2_12KeyValuePairIS4_NS_6MemberIKNS_8CSSValueEEEEENS2_24KeyValuePairKeyExtractorENS2_16AtomicStringHashENS2_18HashMapValueTraitsINS2_10HashTraitsIS4_EENSE_IS9_EEEESF_NS_13HeapAllocatorEEEEEE4CallEm(i64 %41) #9
  %43 = bitcast %"class.blink::HeapHashTableBacking"* %42 to %"struct.WTF::KeyValuePair.12"*
  %44 = call %"struct.WTF::KeyValuePair.12"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE8RehashToEPS8_jSI_(%"class.WTF::HashTable.10"* %0, %"struct.WTF::KeyValuePair.12"* %43, i32 %40, %"struct.WTF::KeyValuePair.12"* %1) #9
  br label %45

45:                                               ; preds = %34, %39
  %46 = phi %"struct.WTF::KeyValuePair.12"* [ %44, %39 ], [ %36, %34 ]
  ret %"struct.WTF::KeyValuePair.12"* %46
}

declare void @_ZN3WTF13AtomicMemzeroEPvm(i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISE_S9_SF_EERKS1_S6_EENS_18HashTableAddResultISG_S7_EEOT0_OT1_(%"class.WTF::HashTable"*, %"class.WTF::AtomicString"* dereferenceable(8), %class.scoped_refptr.1* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE6ExpandEPS7_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* null)
  %9 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = and i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %22
  %24 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %23, i64 0, i32 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %72, label %27

27:                                               ; preds = %10
  %28 = xor i32 %20, -1
  %29 = lshr i32 %19, 31
  %30 = add nsw i32 %29, %28
  %31 = shl i32 %30, 12
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 7
  %34 = xor i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 20
  %38 = xor i32 %37, %36
  %39 = or i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %27, %52
  %42 = phi %"struct.WTF::KeyValuePair"* [ %23, %27 ], [ %58, %52 ]
  %43 = phi %"struct.WTF::KeyValuePair"* [ null, %27 ], [ %53, %52 ]
  %44 = phi i64 [ %22, %27 ], [ %57, %52 ]
  %45 = phi i64 [ 0, %27 ], [ %55, %52 ]
  %46 = bitcast %"struct.WTF::KeyValuePair"* %42 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = icmp eq i8* %47, inttoptr (i64 -1 to i8*)
  br i1 %48, label %52, label %49

49:                                               ; preds = %41
  %50 = bitcast i8* %47 to %"class.WTF::StringImpl"*
  %51 = icmp eq %"class.WTF::StringImpl"* %17, %50
  br i1 %51, label %85, label %52

52:                                               ; preds = %41, %49
  %53 = phi %"struct.WTF::KeyValuePair"* [ %43, %49 ], [ %42, %41 ]
  %54 = icmp eq i64 %45, 0
  %55 = select i1 %54, i64 %40, i64 %45
  %56 = add i64 %55, %44
  %57 = and i64 %56, %15
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %57
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %58, i64 0, i32 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %62, label %41

62:                                               ; preds = %52
  %63 = icmp eq %"struct.WTF::KeyValuePair"* %53, null
  br i1 %63, label %72, label %64

64:                                               ; preds = %62
  %65 = bitcast %"struct.WTF::KeyValuePair"* %53 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %65, i8 0, i64 16, i1 false) #9
  %66 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %67 = load i32, i32* %66, align 8
  %68 = add i32 %67, 2147483647
  %69 = and i32 %68, 2147483647
  %70 = and i32 %67, -2147483648
  %71 = or i32 %69, %70
  store i32 %71, i32* %66, align 8
  br label %72

72:                                               ; preds = %10, %62, %64
  %73 = phi %"struct.WTF::KeyValuePair"* [ %53, %64 ], [ %58, %62 ], [ %23, %10 ]
  tail call void @_ZN3WTF17HashMapTranslatorINS_18HashMapValueTraitsINS_10HashTraitsINS_12AtomicStringEEENS2_I13scoped_refptrIN5blink15CSSVariableDataEEEEEENS_16AtomicStringHashENS_18PartitionAllocatorEE9TranslateINS_12KeyValuePairIS3_S8_EERKS3_S8_EEvRT_OT0_OT1_(%"struct.WTF::KeyValuePair"* dereferenceable(16) %73, %"class.WTF::AtomicString"* dereferenceable(8) %1, %class.scoped_refptr.1* dereferenceable(8) %2)
  %74 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %75 = load i32, i32* %74, align 4
  %76 = add i32 %75, 1
  store i32 %76, i32* %74, align 4
  %77 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %78 = load i32, i32* %77, align 8
  %79 = add i32 %78, %76
  %80 = shl i32 %79, 1
  %81 = load i32, i32* %12, align 8
  %82 = icmp ult i32 %80, %81
  br i1 %82, label %85, label %83

83:                                               ; preds = %72
  %84 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_13scoped_refptrIN5blink15CSSVariableDataEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSB_IS6_EEEESC_NS_18PartitionAllocatorEE6ExpandEPS7_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %73)
  br label %85

85:                                               ; preds = %49, %72, %83
  %86 = phi i8 [ 1, %72 ], [ 1, %83 ], [ 0, %49 ]
  %87 = phi %"struct.WTF::KeyValuePair"* [ %73, %72 ], [ %84, %83 ], [ %42, %49 ]
  %88 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } undef, %"struct.WTF::KeyValuePair"* %87, 0
  %89 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } %88, i8 %86, 1
  ret { %"struct.WTF::KeyValuePair"*, i8 } %89
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF17HashMapTranslatorINS_18HashMapValueTraitsINS_10HashTraitsINS_12AtomicStringEEENS2_I13scoped_refptrIN5blink15CSSVariableDataEEEEEENS_16AtomicStringHashENS_18PartitionAllocatorEE9TranslateINS_12KeyValuePairIS3_S8_EERKS3_S8_EEvRT_OT0_OT1_(%"struct.WTF::KeyValuePair"* dereferenceable(16), %"class.WTF::AtomicString"* dereferenceable(8), %class.scoped_refptr.1* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %24

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i33
  %16 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %15, i33 1) #9
  %17 = extractvalue { i33, i1 } %16, 1
  %18 = extractvalue { i33, i1 } %16, 0
  %19 = icmp slt i33 %18, 0
  %20 = or i1 %17, %19
  br i1 %20, label %21, label %22, !prof !2

21:                                               ; preds = %12
  tail call void @llvm.trap() #9
  unreachable

22:                                               ; preds = %12
  %23 = trunc i33 %18 to i32
  store i32 %23, i32* %13, align 4
  br label %24

24:                                               ; preds = %22, %7, %3
  %25 = ptrtoint %"class.WTF::StringImpl"* %5 to i64
  %26 = bitcast %"struct.WTF::KeyValuePair"* %0 to i64*
  %27 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  store i64 %25, i64* %26, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %28, null
  br i1 %29, label %43, label %30

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  br i1 %34, label %37, label %39

37:                                               ; preds = %30
  %38 = add i32 %36, -1
  store i32 %38, i32* %35, align 4
  br label %39

39:                                               ; preds = %37, %30
  %40 = phi i32 [ %38, %37 ], [ %36, %30 ]
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %39
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %28) #9
  br label %43

43:                                               ; preds = %24, %39, %42
  %44 = getelementptr inbounds %class.scoped_refptr.1, %class.scoped_refptr.1* %2, i64 0, i32 0
  %45 = bitcast %class.scoped_refptr.1* %2 to i64*
  %46 = load i64, i64* %45, align 8
  store %"class.blink::CSSVariableData"* null, %"class.blink::CSSVariableData"** %44, align 8
  %47 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %0, i64 0, i32 1
  %48 = bitcast %class.scoped_refptr.1* %47 to i64*
  %49 = getelementptr inbounds %class.scoped_refptr.1, %class.scoped_refptr.1* %47, i64 0, i32 0
  %50 = load %"class.blink::CSSVariableData"*, %"class.blink::CSSVariableData"** %49, align 8
  store i64 %46, i64* %48, align 8
  %51 = icmp eq %"class.blink::CSSVariableData"* %50, null
  br i1 %51, label %59, label %52

52:                                               ; preds = %43
  %53 = getelementptr inbounds %"class.blink::CSSVariableData", %"class.blink::CSSVariableData"* %50, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %53) #9
  %54 = getelementptr inbounds %"class.blink::CSSVariableData", %"class.blink::CSSVariableData"* %50, i64 0, i32 0, i32 0, i32 0, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %59

57:                                               ; preds = %52
  tail call void @_ZN5blink15CSSVariableDataD2Ev(%"class.blink::CSSVariableData"* nonnull %50) #9
  %58 = bitcast %"class.blink::CSSVariableData"* %50 to i8*
  tail call void @free(i8* %58) #9
  br label %59

59:                                               ; preds = %43, %52, %57
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.12"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE6insertINS_17HashMapTranslatorISF_SA_SG_EERKS1_RPS6_EENS_18HashTableAddResultISH_S8_EEOT0_OT1_(%"class.WTF::HashTable.10"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.blink::CSSValue"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair.12"*, %"struct.WTF::KeyValuePair.12"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair.12"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair.12"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE6ExpandEPS8_(%"class.WTF::HashTable.10"* %0, %"struct.WTF::KeyValuePair.12"* null)
  %9 = load %"struct.WTF::KeyValuePair.12"*, %"struct.WTF::KeyValuePair.12"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair.12"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = and i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %11, i64 %22
  %24 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %23, i64 0, i32 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %73, label %27

27:                                               ; preds = %10
  %28 = xor i32 %20, -1
  %29 = lshr i32 %19, 31
  %30 = add nsw i32 %29, %28
  %31 = shl i32 %30, 12
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 7
  %34 = xor i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 20
  %38 = xor i32 %37, %36
  %39 = or i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %27, %52
  %42 = phi %"struct.WTF::KeyValuePair.12"* [ %23, %27 ], [ %58, %52 ]
  %43 = phi %"struct.WTF::KeyValuePair.12"* [ null, %27 ], [ %53, %52 ]
  %44 = phi i64 [ %22, %27 ], [ %57, %52 ]
  %45 = phi i64 [ 0, %27 ], [ %55, %52 ]
  %46 = bitcast %"struct.WTF::KeyValuePair.12"* %42 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = icmp eq i8* %47, inttoptr (i64 -1 to i8*)
  br i1 %48, label %52, label %49

49:                                               ; preds = %41
  %50 = bitcast i8* %47 to %"class.WTF::StringImpl"*
  %51 = icmp eq %"class.WTF::StringImpl"* %17, %50
  br i1 %51, label %172, label %52

52:                                               ; preds = %41, %49
  %53 = phi %"struct.WTF::KeyValuePair.12"* [ %43, %49 ], [ %42, %41 ]
  %54 = icmp eq i64 %45, 0
  %55 = select i1 %54, i64 %40, i64 %45
  %56 = add i64 %55, %44
  %57 = and i64 %56, %15
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %11, i64 %57
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %58, i64 0, i32 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %62, label %41

62:                                               ; preds = %52
  %63 = icmp eq %"struct.WTF::KeyValuePair.12"* %53, null
  br i1 %63, label %73, label %64

64:                                               ; preds = %62
  %65 = bitcast %"struct.WTF::KeyValuePair.12"* %53 to i8*
  tail call void @_ZN3WTF13AtomicMemzeroEPvm(i8* nonnull %65, i64 16) #9
  %66 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 3
  %67 = load i32, i32* %66, align 8
  %68 = add i32 %67, 2147483647
  %69 = and i32 %68, 2147483647
  %70 = and i32 %67, -2147483648
  %71 = or i32 %69, %70
  store i32 %71, i32* %66, align 8
  %72 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  br label %73

73:                                               ; preds = %10, %62, %64
  %74 = phi %"class.WTF::StringImpl"* [ %72, %64 ], [ %17, %62 ], [ %17, %10 ]
  %75 = phi %"struct.WTF::KeyValuePair.12"* [ %53, %64 ], [ %58, %62 ], [ %23, %10 ]
  %76 = icmp eq %"class.WTF::StringImpl"* %74, null
  br i1 %76, label %94, label %77

77:                                               ; preds = %73
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = load atomic i32, i32* %78 monotonic, align 4
  %80 = and i32 %79, 2
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %94

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = zext i32 %84 to i33
  %86 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %85, i33 1) #9
  %87 = extractvalue { i33, i1 } %86, 1
  %88 = extractvalue { i33, i1 } %86, 0
  %89 = icmp slt i33 %88, 0
  %90 = or i1 %87, %89
  br i1 %90, label %91, label %92, !prof !2

91:                                               ; preds = %82
  tail call void @llvm.trap() #9
  unreachable

92:                                               ; preds = %82
  %93 = trunc i33 %88 to i32
  store i32 %93, i32* %83, align 4
  br label %94

94:                                               ; preds = %92, %77, %73
  %95 = ptrtoint %"class.WTF::StringImpl"* %74 to i64
  %96 = bitcast %"struct.WTF::KeyValuePair.12"* %75 to i64*
  %97 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %75, i64 0, i32 0, i32 0, i32 0, i32 0
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  store i64 %95, i64* %96, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %113, label %100

100:                                              ; preds = %94
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  br i1 %104, label %107, label %109

107:                                              ; preds = %100
  %108 = add i32 %106, -1
  store i32 %108, i32* %105, align 4
  br label %109

109:                                              ; preds = %107, %100
  %110 = phi i32 [ %108, %107 ], [ %106, %100 ]
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %98) #9
  br label %113

113:                                              ; preds = %112, %109, %94
  %114 = getelementptr inbounds %"struct.WTF::KeyValuePair.12", %"struct.WTF::KeyValuePair.12"* %75, i64 0, i32 1
  %115 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %2, align 8
  %116 = ptrtoint %"class.blink::CSSValue"* %115 to i64
  %117 = bitcast %"class.blink::Member"* %114 to i64*
  store atomic i64 %116, i64* %117 monotonic, align 8
  %118 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %123, label %120

120:                                              ; preds = %113
  %121 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %115, i64 0, i32 0
  %122 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %121) #9
  br label %123

123:                                              ; preds = %113, %120
  %124 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %160, label %126

126:                                              ; preds = %123
  %127 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %128 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %127, i64 0, i32 1
  %129 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %128) #9
  %130 = icmp eq i8* %129, null
  br i1 %130, label %131, label %133, !prof !2

131:                                              ; preds = %126
  %132 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #9
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %128, i8* %132) #9
  br label %133

133:                                              ; preds = %131, %126
  %134 = phi i8* [ %132, %131 ], [ %129, %126 ]
  %135 = bitcast i8* %134 to %"class.blink::ThreadState"**
  %136 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %135, align 8
  %137 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %136, i64 0, i32 9
  %138 = load i8, i8* %137, align 1, !range !10
  %139 = icmp eq i8 %138, 0
  br i1 %139, label %160, label %140

140:                                              ; preds = %133
  %141 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %136, i64 0, i32 13
  %142 = load i64, i64* %141, align 8
  %143 = add i64 %142, 1
  store i64 %143, i64* %141, align 8
  %144 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %136, i64 0, i32 24, i32 4, i32 0, i32 0, i32 0
  %145 = load %"class.blink::MarkingVisitor"*, %"class.blink::MarkingVisitor"** %144, align 8
  %146 = load atomic i64, i64* %117 monotonic, align 8
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %157, label %148

148:                                              ; preds = %140
  %149 = getelementptr inbounds %"class.blink::MarkingVisitor", %"class.blink::MarkingVisitor"* %145, i64 0, i32 0, i32 0
  %150 = inttoptr i64 %146 to %"class.blink::CSSValue"*
  %151 = getelementptr inbounds %"class.blink::CSSValue", %"class.blink::CSSValue"* %150, i64 0, i32 0
  %152 = bitcast %"class.blink::MarkingVisitor"* %145 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %153 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %152, align 8
  %154 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %153, i64 5
  %155 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %154, align 8
  tail call void %155(%"class.blink::Visitor"* %149, i8* %151, i8* %151, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_8CSSValueEE5TraceEPNS_7VisitorEPKv) #9
  %156 = load i64, i64* %141, align 8
  br label %157

157:                                              ; preds = %148, %140
  %158 = phi i64 [ %143, %140 ], [ %156, %148 ]
  %159 = add i64 %158, -1
  store i64 %159, i64* %141, align 8
  br label %160

160:                                              ; preds = %123, %133, %157
  %161 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 2
  %162 = load i32, i32* %161, align 4
  %163 = add i32 %162, 1
  store i32 %163, i32* %161, align 4
  %164 = getelementptr inbounds %"class.WTF::HashTable.10", %"class.WTF::HashTable.10"* %0, i64 0, i32 3
  %165 = load i32, i32* %164, align 8
  %166 = add i32 %165, %163
  %167 = shl i32 %166, 1
  %168 = load i32, i32* %12, align 8
  %169 = icmp ult i32 %167, %168
  br i1 %169, label %172, label %170

170:                                              ; preds = %160
  %171 = tail call %"struct.WTF::KeyValuePair.12"* @_ZN3WTF9HashTableINS_12AtomicStringENS_12KeyValuePairIS1_N5blink6MemberIKNS3_8CSSValueEEEEENS_24KeyValuePairKeyExtractorENS_16AtomicStringHashENS_18HashMapValueTraitsINS_10HashTraitsIS1_EENSC_IS7_EEEESD_NS3_13HeapAllocatorEE6ExpandEPS8_(%"class.WTF::HashTable.10"* %0, %"struct.WTF::KeyValuePair.12"* %75)
  br label %172

172:                                              ; preds = %49, %160, %170
  %173 = phi i8 [ 1, %160 ], [ 1, %170 ], [ 0, %49 ]
  %174 = phi %"struct.WTF::KeyValuePair.12"* [ %75, %160 ], [ %171, %170 ], [ %42, %49 ]
  %175 = insertvalue { %"struct.WTF::KeyValuePair.12"*, i8 } undef, %"struct.WTF::KeyValuePair.12"* %174, 0
  %176 = insertvalue { %"struct.WTF::KeyValuePair.12"*, i8 } %175, i8 %173, 1
  ret { %"struct.WTF::KeyValuePair.12"*, i8 } %176
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable.204"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.204", %"class.WTF::HashTable.204"* %0, i64 0, i32 0
  %5 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %4, align 8
  %6 = icmp eq %"class.WTF::AtomicString"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable.204"* %0, %"class.WTF::AtomicString"* null)
  %9 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"class.WTF::AtomicString"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.204", %"class.WTF::HashTable.204"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = and i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %11, i64 %22
  %24 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %23, i64 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %72, label %27

27:                                               ; preds = %10
  %28 = xor i32 %20, -1
  %29 = lshr i32 %19, 31
  %30 = add nsw i32 %29, %28
  %31 = shl i32 %30, 12
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 7
  %34 = xor i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 20
  %38 = xor i32 %37, %36
  %39 = or i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %27, %52
  %42 = phi %"class.WTF::StringImpl"* [ %25, %27 ], [ %60, %52 ]
  %43 = phi %"class.WTF::AtomicString"* [ %23, %27 ], [ %58, %52 ]
  %44 = phi %"class.WTF::AtomicString"* [ null, %27 ], [ %53, %52 ]
  %45 = phi i64 [ %22, %27 ], [ %57, %52 ]
  %46 = phi i64 [ 0, %27 ], [ %55, %52 ]
  %47 = bitcast %"class.WTF::AtomicString"* %43 to i8**
  %48 = load i8*, i8** %47, align 8
  %49 = icmp eq i8* %48, inttoptr (i64 -1 to i8*)
  br i1 %49, label %52, label %50

50:                                               ; preds = %41
  %51 = icmp eq %"class.WTF::StringImpl"* %42, %17
  br i1 %51, label %125, label %52

52:                                               ; preds = %41, %50
  %53 = phi %"class.WTF::AtomicString"* [ %44, %50 ], [ %43, %41 ]
  %54 = icmp eq i64 %46, 0
  %55 = select i1 %54, i64 %40, i64 %46
  %56 = add i64 %55, %45
  %57 = and i64 %56, %15
  %58 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %11, i64 %57
  %59 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %58, i64 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %62, label %41

62:                                               ; preds = %52
  %63 = icmp eq %"class.WTF::AtomicString"* %53, null
  br i1 %63, label %72, label %64

64:                                               ; preds = %62
  %65 = bitcast %"class.WTF::AtomicString"* %53 to i64*
  store i64 0, i64* %65, align 8
  %66 = getelementptr inbounds %"class.WTF::HashTable.204", %"class.WTF::HashTable.204"* %0, i64 0, i32 3
  %67 = load i32, i32* %66, align 8
  %68 = add i32 %67, 2147483647
  %69 = and i32 %68, 2147483647
  %70 = and i32 %67, -2147483648
  %71 = or i32 %69, %70
  store i32 %71, i32* %66, align 8
  br label %72

72:                                               ; preds = %10, %62, %64
  %73 = phi %"class.WTF::AtomicString"* [ %53, %64 ], [ %58, %62 ], [ %23, %10 ]
  %74 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %75 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %74, align 8
  %76 = icmp eq %"class.WTF::StringImpl"* %75, null
  br i1 %76, label %94, label %77

77:                                               ; preds = %72
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = load atomic i32, i32* %78 monotonic, align 4
  %80 = and i32 %79, 2
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %94

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = zext i32 %84 to i33
  %86 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %85, i33 1) #9
  %87 = extractvalue { i33, i1 } %86, 1
  %88 = extractvalue { i33, i1 } %86, 0
  %89 = icmp slt i33 %88, 0
  %90 = or i1 %87, %89
  br i1 %90, label %91, label %92, !prof !2

91:                                               ; preds = %82
  tail call void @llvm.trap() #9
  unreachable

92:                                               ; preds = %82
  %93 = trunc i33 %88 to i32
  store i32 %93, i32* %83, align 4
  br label %94

94:                                               ; preds = %92, %77, %72
  %95 = ptrtoint %"class.WTF::StringImpl"* %75 to i64
  %96 = bitcast %"class.WTF::AtomicString"* %73 to i64*
  %97 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %73, i64 0, i32 0, i32 0, i32 0
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  store i64 %95, i64* %96, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %113, label %100

100:                                              ; preds = %94
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  br i1 %104, label %107, label %109

107:                                              ; preds = %100
  %108 = add i32 %106, -1
  store i32 %108, i32* %105, align 4
  br label %109

109:                                              ; preds = %107, %100
  %110 = phi i32 [ %108, %107 ], [ %106, %100 ]
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %98) #9
  br label %113

113:                                              ; preds = %94, %109, %112
  %114 = getelementptr inbounds %"class.WTF::HashTable.204", %"class.WTF::HashTable.204"* %0, i64 0, i32 2
  %115 = load i32, i32* %114, align 4
  %116 = add i32 %115, 1
  store i32 %116, i32* %114, align 4
  %117 = getelementptr inbounds %"class.WTF::HashTable.204", %"class.WTF::HashTable.204"* %0, i64 0, i32 3
  %118 = load i32, i32* %117, align 8
  %119 = add i32 %118, %116
  %120 = shl i32 %119, 1
  %121 = load i32, i32* %12, align 8
  %122 = icmp ult i32 %120, %121
  br i1 %122, label %125, label %123

123:                                              ; preds = %113
  %124 = tail call %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable.204"* %0, %"class.WTF::AtomicString"* %73)
  br label %125

125:                                              ; preds = %50, %113, %123
  %126 = phi i8 [ 1, %113 ], [ 1, %123 ], [ 0, %50 ]
  %127 = phi %"class.WTF::AtomicString"* [ %73, %113 ], [ %124, %123 ], [ %43, %50 ]
  %128 = insertvalue { %"class.WTF::AtomicString"*, i8 } undef, %"class.WTF::AtomicString"* %127, 0
  %129 = insertvalue { %"class.WTF::AtomicString"*, i8 } %128, i8 %126, 1
  ret { %"class.WTF::AtomicString"*, i8 } %129
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable.204"*, %"class.WTF::AtomicString"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.204", %"class.WTF::HashTable.204"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.204", %"class.WTF::HashTable.204"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #9
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #9
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* %22, i8* %23) #9
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #9
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #9
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #9
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 3
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv, i64 0, i64 0)) #9
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #9
  %36 = bitcast i8* %35 to %"class.WTF::AtomicString"*
  %37 = call %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_(%"class.WTF::HashTable.204"* %0, %"class.WTF::AtomicString"* %36, i32 %32, %"class.WTF::AtomicString"* %1) #9
  ret %"class.WTF::AtomicString"* %37
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_(%"class.WTF::HashTable.204"*, %"class.WTF::AtomicString"*, i32, %"class.WTF::AtomicString"*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"class.WTF::AtomicString"* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable.204", %"class.WTF::HashTable.204"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable.204", %"class.WTF::HashTable.204"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable.204"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %9, align 8
  %17 = ptrtoint %"class.WTF::AtomicString"* %16 to i64
  br label %61

18:                                               ; preds = %157
  %19 = bitcast %"class.WTF::HashTable.204"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %158, %18 ]
  %23 = phi %"class.WTF::AtomicString"* [ null, %10 ], [ %161, %18 ]
  %24 = phi i32 [ 0, %10 ], [ %159, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %25 = inttoptr i64 %22 to %"class.WTF::AtomicString"*
  %26 = icmp eq i64 %22, 0
  br i1 %26, label %57, label %27

27:                                               ; preds = %20
  %28 = icmp eq i32 %24, 0
  br i1 %28, label %55, label %29

29:                                               ; preds = %27
  %30 = zext i32 %24 to i64
  br label %31

31:                                               ; preds = %52, %29
  %32 = phi i64 [ 0, %29 ], [ %53, %52 ]
  %33 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %25, i64 %32
  %34 = bitcast %"class.WTF::AtomicString"* %33 to i8**
  %35 = load i8*, i8** %34, align 8
  %36 = bitcast i8* %35 to %"class.WTF::StringImpl"*
  %37 = ptrtoint i8* %35 to i64
  switch i64 %37, label %38 [
    i64 -1, label %52
    i64 0, label %52
  ]

38:                                               ; preds = %31
  %39 = getelementptr inbounds i8, i8* %35, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = bitcast i8* %35 to i32*
  %45 = load i32, i32* %44, align 4
  br i1 %43, label %46, label %48

46:                                               ; preds = %38
  %47 = add i32 %45, -1
  store i32 %47, i32* %44, align 4
  br label %48

48:                                               ; preds = %46, %38
  %49 = phi i32 [ %47, %46 ], [ %45, %38 ]
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %48
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %36) #9
  br label %52

52:                                               ; preds = %51, %48, %31, %31
  %53 = add nuw nsw i64 %32, 1
  %54 = icmp eq i64 %53, %30
  br i1 %54, label %55, label %31

55:                                               ; preds = %52, %27
  %56 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %56) #9
  br label %57

57:                                               ; preds = %20, %55
  %58 = getelementptr inbounds %"class.WTF::HashTable.204", %"class.WTF::HashTable.204"* %0, i64 0, i32 3
  %59 = load i32, i32* %58, align 8
  %60 = and i32 %59, -2147483648
  store i32 %60, i32* %58, align 8
  ret %"class.WTF::AtomicString"* %23

61:                                               ; preds = %13, %157
  %62 = phi i64 [ %17, %13 ], [ %158, %157 ]
  %63 = phi i32 [ %7, %13 ], [ %159, %157 ]
  %64 = phi %"class.WTF::AtomicString"* [ %16, %13 ], [ %160, %157 ]
  %65 = phi %"class.WTF::AtomicString"* [ null, %13 ], [ %161, %157 ]
  %66 = phi i32 [ 0, %13 ], [ %162, %157 ]
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %64, i64 %67
  %69 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %68, i64 0, i32 0, i32 0, i32 0
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8
  %71 = ptrtoint %"class.WTF::StringImpl"* %70 to i64
  switch i64 %71, label %72 [
    i64 -1, label %157
    i64 0, label %157
  ]

72:                                               ; preds = %61
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %70, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = load atomic i32, i32* %73 monotonic, align 4
  %75 = lshr i32 %74, 8
  %76 = and i32 %75, %14
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 %77
  %79 = ptrtoint %"class.WTF::AtomicString"* %78 to i64
  %80 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %78, i64 0, i32 0, i32 0, i32 0
  %81 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %80, align 8
  %82 = icmp eq %"class.WTF::StringImpl"* %81, null
  br i1 %82, label %99, label %83

83:                                               ; preds = %72
  %84 = xor i32 %75, -1
  %85 = lshr i32 %74, 31
  %86 = add nsw i32 %85, %84
  %87 = shl i32 %86, 12
  %88 = xor i32 %87, %86
  %89 = lshr i32 %88, 7
  %90 = xor i32 %89, %88
  %91 = shl i32 %90, 2
  %92 = xor i32 %91, %90
  %93 = lshr i32 %92, 20
  %94 = xor i32 %93, %92
  %95 = or i32 %94, 1
  %96 = zext i32 %95 to i64
  br label %105

97:                                               ; preds = %117
  %98 = ptrtoint %"class.WTF::AtomicString"* %123 to i64
  br label %99

99:                                               ; preds = %97, %72
  %100 = phi i64 [ %79, %72 ], [ %98, %97 ]
  %101 = phi %"class.WTF::AtomicString"* [ null, %72 ], [ %118, %97 ]
  %102 = icmp eq %"class.WTF::AtomicString"* %101, null
  %103 = ptrtoint %"class.WTF::AtomicString"* %101 to i64
  %104 = select i1 %102, i64 %100, i64 %103
  br label %128

105:                                              ; preds = %117, %83
  %106 = phi %"class.WTF::AtomicString"* [ null, %83 ], [ %118, %117 ]
  %107 = phi %"class.WTF::StringImpl"* [ %81, %83 ], [ %126, %117 ]
  %108 = phi i64 [ %79, %83 ], [ %124, %117 ]
  %109 = phi %"class.WTF::AtomicString"* [ %78, %83 ], [ %123, %117 ]
  %110 = phi i64 [ %77, %83 ], [ %122, %117 ]
  %111 = phi i64 [ 0, %83 ], [ %120, %117 ]
  %112 = bitcast %"class.WTF::AtomicString"* %109 to i8**
  %113 = load i8*, i8** %112, align 8
  %114 = icmp eq i8* %113, inttoptr (i64 -1 to i8*)
  br i1 %114, label %117, label %115

115:                                              ; preds = %105
  %116 = icmp eq %"class.WTF::StringImpl"* %107, %70
  br i1 %116, label %128, label %117

117:                                              ; preds = %115, %105
  %118 = phi %"class.WTF::AtomicString"* [ %106, %115 ], [ %109, %105 ]
  %119 = icmp eq i64 %111, 0
  %120 = select i1 %119, i64 %96, i64 %111
  %121 = add i64 %120, %110
  %122 = and i64 %121, %15
  %123 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 %122
  %124 = ptrtoint %"class.WTF::AtomicString"* %123 to i64
  %125 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %123, i64 0, i32 0, i32 0, i32 0
  %126 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %125, align 8
  %127 = icmp eq %"class.WTF::StringImpl"* %126, null
  br i1 %127, label %97, label %105

128:                                              ; preds = %115, %99
  %129 = phi i64 [ %104, %99 ], [ %108, %115 ]
  %130 = inttoptr i64 %129 to %"class.WTF::AtomicString"*
  %131 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %130, i64 0, i32 0, i32 0, i32 0
  %132 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %131, align 8
  %133 = icmp eq %"class.WTF::StringImpl"* %132, null
  br i1 %133, label %147, label %134

134:                                              ; preds = %128
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %132, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %136 = load atomic i32, i32* %135 monotonic, align 4
  %137 = and i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %132, i64 0, i32 0
  %140 = load i32, i32* %139, align 4
  br i1 %138, label %141, label %143

141:                                              ; preds = %134
  %142 = add i32 %140, -1
  store i32 %142, i32* %139, align 4
  br label %143

143:                                              ; preds = %141, %134
  %144 = phi i32 [ %142, %141 ], [ %140, %134 ]
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %147

146:                                              ; preds = %143
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %132) #9
  br label %147

147:                                              ; preds = %128, %143, %146
  %148 = bitcast %"class.WTF::AtomicString"* %68 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = inttoptr i64 %129 to i64*
  store i64 %149, i64* %150, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %69, align 8
  %151 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %9, align 8
  %152 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %151, i64 %67
  %153 = icmp eq %"class.WTF::AtomicString"* %152, %3
  %154 = select i1 %153, %"class.WTF::AtomicString"* %130, %"class.WTF::AtomicString"* %65
  %155 = load i32, i32* %6, align 8
  %156 = ptrtoint %"class.WTF::AtomicString"* %151 to i64
  br label %157

157:                                              ; preds = %61, %61, %147
  %158 = phi i64 [ %62, %61 ], [ %156, %147 ], [ %62, %61 ]
  %159 = phi i32 [ %63, %61 ], [ %155, %147 ], [ %63, %61 ]
  %160 = phi %"class.WTF::AtomicString"* [ %64, %61 ], [ %151, %147 ], [ %64, %61 ]
  %161 = phi %"class.WTF::AtomicString"* [ %65, %61 ], [ %154, %147 ], [ %65, %61 ]
  %162 = add i32 %66, 1
  %163 = icmp eq i32 %162, %159
  br i1 %163, label %18, label %61
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNK5blink14StyleVariables8GetValueERKN3WTF12AtomicStringE: argument 0"}
!5 = distinct !{!5, !"_ZNK5blink14StyleVariables8GetValueERKN3WTF12AtomicStringE"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNK5blink14StyleVariables8GetValueERKN3WTF12AtomicStringE: argument 0"}
!8 = distinct !{!8, !"_ZNK5blink14StyleVariables8GetValueERKN3WTF12AtomicStringE"}
!9 = !{!"branch_weights", i32 2000, i32 1}
!10 = !{i8 0, i8 2}
