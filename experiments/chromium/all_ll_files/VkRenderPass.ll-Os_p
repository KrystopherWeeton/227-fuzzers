; ModuleID = '../../third_party/swiftshader/src/Vulkan/VkRenderPass.cpp'
source_filename = "../../third_party/swiftshader/src/Vulkan/VkRenderPass.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.vk::RenderPass" = type { i32, %struct.VkAttachmentDescription*, i32, %struct.VkSubpassDescription*, %struct.VkSubpassDescriptionDepthStencilResolve*, i32, %struct.VkSubpassDependency*, i32*, i32*, i32* }
%struct.VkAttachmentDescription = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkSubpassDescription = type { i32, i32, i32, %struct.VkAttachmentReference*, i32, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, %struct.VkAttachmentReference*, i32, i32* }
%struct.VkAttachmentReference = type { i32, i32 }
%struct.VkSubpassDescriptionDepthStencilResolve = type { i32, i8*, i32, i32, %struct.VkAttachmentReference2* }
%struct.VkAttachmentReference2 = type { i32, i8*, i32, i32, i32 }
%struct.VkSubpassDependency = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.VkRenderPassCreateInfo = type { i32, i8*, i32, i32, %struct.VkAttachmentDescription*, i32, %struct.VkSubpassDescription*, i32, %struct.VkSubpassDependency* }
%struct.VkRenderPassCreateInfo2 = type { i32, i8*, i32, i32, %struct.VkAttachmentDescription2*, i32, %struct.VkSubpassDescription2*, i32, %struct.VkSubpassDependency2*, i32, i32* }
%struct.VkAttachmentDescription2 = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VkSubpassDescription2 = type { i32, i8*, i32, i32, i32, i32, %struct.VkAttachmentReference2*, i32, %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2*, i32, i32* }
%struct.VkSubpassDependency2 = type { i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32 }
%class.VkNonDispatchableHandle = type { i64 }
%class.VkNonDispatchableHandle.0 = type { i64 }
%class.VkNonDispatchableHandle.1 = type { i64 }
%class.VkNonDispatchableHandle.2 = type { i64 }
%class.VkNonDispatchableHandle.3 = type { i64 }
%class.VkNonDispatchableHandle.4 = type { i64 }
%class.VkNonDispatchableHandle.5 = type { i64 }
%class.VkNonDispatchableHandle.6 = type { i64 }
%class.VkNonDispatchableHandle.7 = type { i64 }
%class.VkNonDispatchableHandle.8 = type { i64 }
%class.VkNonDispatchableHandle.9 = type { i64 }
%class.VkNonDispatchableHandle.10 = type { i64 }
%class.VkNonDispatchableHandle.11 = type { i64 }
%class.VkNonDispatchableHandle.12 = type { i64 }
%class.VkNonDispatchableHandle.13 = type { i64 }
%class.VkNonDispatchableHandle.14 = type { i64 }
%class.VkNonDispatchableHandle.15 = type { i64 }
%class.VkNonDispatchableHandle.16 = type { i64 }
%class.VkNonDispatchableHandle.17 = type { i64 }
%class.VkNonDispatchableHandle.18 = type { i64 }
%class.VkNonDispatchableHandle.19 = type { i64 }
%class.VkNonDispatchableHandle.20 = type { i64 }
%class.VkNonDispatchableHandle.21 = type { i64 }
%class.VkNonDispatchableHandle.22 = type { i64 }
%class.VkNonDispatchableHandle.23 = type { i64 }
%class.VkNonDispatchableHandle.24 = type { i64 }
%class.VkNonDispatchableHandle.25 = type { i64 }
%class.VkNonDispatchableHandle.26 = type { i64 }
%class.VkNonDispatchableHandle.27 = type { i64 }
%class.VkNonDispatchableHandle.28 = type { i64 }
%class.VkNonDispatchableHandle.29 = type { i64 }
%class.VkNonDispatchableHandle.30 = type { i64 }
%class.VkNonDispatchableHandle.31 = type { i64 }
%class.VkNonDispatchableHandle.32 = type { i64 }
%class.VkNonDispatchableHandle.33 = type { i64 }
%class.VkNonDispatchableHandle.34 = type { i64 }
%class.VkNonDispatchableHandle.35 = type { i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%struct.VkBaseInStructure = type { i32, %struct.VkBaseInStructure* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%struct.VkAllocationCallbacks = type { i8*, i8* (i8*, i64, i64, i32)*, i8* (i8*, i8*, i64, i64, i32)*, void (i8*, i8*)*, void (i8*, i64, i32, i32)*, void (i8*, i64, i32, i32)* }
%struct.VkExtent2D = type { i32, i32 }

$_ZNK23VkNonDispatchableHandleIP10VkBuffer_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP10VkBuffer_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP9VkImage_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP9VkImage_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP13VkSemaphore_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP13VkSemaphore_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP9VkFence_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP9VkFence_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP16VkDeviceMemory_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP16VkDeviceMemory_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP9VkEvent_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP9VkEvent_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP13VkQueryPool_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP13VkQueryPool_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP14VkBufferView_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP14VkBufferView_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP13VkImageView_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP13VkImageView_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP16VkShaderModule_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP16VkShaderModule_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP17VkPipelineCache_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP17VkPipelineCache_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP18VkPipelineLayout_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP18VkPipelineLayout_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP12VkPipeline_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP12VkPipeline_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP14VkRenderPass_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP14VkRenderPass_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP23VkDescriptorSetLayout_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP23VkDescriptorSetLayout_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP11VkSampler_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP11VkSampler_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP17VkDescriptorSet_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP17VkDescriptorSet_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP18VkDescriptorPool_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP18VkDescriptorPool_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP15VkFramebuffer_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP15VkFramebuffer_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP15VkCommandPool_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP15VkCommandPool_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP26VkSamplerYcbcrConversion_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP26VkSamplerYcbcrConversion_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP28VkDescriptorUpdateTemplate_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP28VkDescriptorUpdateTemplate_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP14VkSurfaceKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP14VkSurfaceKHR_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP16VkSwapchainKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP16VkSwapchainKHR_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP14VkDisplayKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP14VkDisplayKHR_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP18VkDisplayModeKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP18VkDisplayModeKHR_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP24VkDeferredOperationKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP24VkDeferredOperationKHR_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP26VkDebugReportCallbackEXT_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP26VkDebugReportCallbackEXT_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP15VkCuModuleNVX_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP15VkCuModuleNVX_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP17VkCuFunctionNVX_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP17VkCuFunctionNVX_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP26VkDebugUtilsMessengerEXT_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP26VkDebugUtilsMessengerEXT_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP22VkValidationCacheEXT_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP22VkValidationCacheEXT_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP27VkAccelerationStructureNV_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP27VkAccelerationStructureNV_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP33VkPerformanceConfigurationINTEL_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP33VkPerformanceConfigurationINTEL_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP28VkIndirectCommandsLayoutNV_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP28VkIndirectCommandsLayoutNV_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP22VkPrivateDataSlotEXT_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP22VkPrivateDataSlotEXT_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP28VkAccelerationStructureKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP28VkAccelerationStructureKHR_TEaSEm = comdat any

$_ZN2vk10RenderPass4initI22VkRenderPassCreateInfoEEvPKT_PPv = comdat any

$_ZN2vk10RenderPass4initI23VkRenderPassCreateInfo2EEvPKT_PPv = comdat any

@.str = private unnamed_addr constant [46 x i8] c"%s:%d WARNING: pCreateInfo->pNext sType = %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [58 x i8] c"../../third_party/swiftshader/src/Vulkan/VkRenderPass.cpp\00", align 1

@_ZN2vk10RenderPassC1EPK22VkRenderPassCreateInfoPv = hidden unnamed_addr alias void (%"class.vk::RenderPass"*, %struct.VkRenderPassCreateInfo*, i8*), void (%"class.vk::RenderPass"*, %struct.VkRenderPassCreateInfo*, i8*)* @_ZN2vk10RenderPassC2EPK22VkRenderPassCreateInfoPv
@_ZN2vk10RenderPassC1EPK23VkRenderPassCreateInfo2Pv = hidden unnamed_addr alias void (%"class.vk::RenderPass"*, %struct.VkRenderPassCreateInfo2*, i8*), void (%"class.vk::RenderPass"*, %struct.VkRenderPassCreateInfo2*, i8*)* @_ZN2vk10RenderPassC2EPK23VkRenderPassCreateInfo2Pv

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP10VkBuffer_TEcvPvEv(%class.VkNonDispatchableHandle*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP10VkBuffer_TEaSEm(%class.VkNonDispatchableHandle*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle, %class.VkNonDispatchableHandle* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP9VkImage_TEcvPvEv(%class.VkNonDispatchableHandle.0*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.0* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP9VkImage_TEaSEm(%class.VkNonDispatchableHandle.0*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.0, %class.VkNonDispatchableHandle.0* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP13VkSemaphore_TEcvPvEv(%class.VkNonDispatchableHandle.1*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.1* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP13VkSemaphore_TEaSEm(%class.VkNonDispatchableHandle.1*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.1, %class.VkNonDispatchableHandle.1* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP9VkFence_TEcvPvEv(%class.VkNonDispatchableHandle.2*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.2* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP9VkFence_TEaSEm(%class.VkNonDispatchableHandle.2*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.2, %class.VkNonDispatchableHandle.2* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP16VkDeviceMemory_TEcvPvEv(%class.VkNonDispatchableHandle.3*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.3* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP16VkDeviceMemory_TEaSEm(%class.VkNonDispatchableHandle.3*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.3, %class.VkNonDispatchableHandle.3* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP9VkEvent_TEcvPvEv(%class.VkNonDispatchableHandle.4*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.4* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP9VkEvent_TEaSEm(%class.VkNonDispatchableHandle.4*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.4, %class.VkNonDispatchableHandle.4* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP13VkQueryPool_TEcvPvEv(%class.VkNonDispatchableHandle.5*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.5* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP13VkQueryPool_TEaSEm(%class.VkNonDispatchableHandle.5*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.5, %class.VkNonDispatchableHandle.5* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP14VkBufferView_TEcvPvEv(%class.VkNonDispatchableHandle.6*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.6* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP14VkBufferView_TEaSEm(%class.VkNonDispatchableHandle.6*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.6, %class.VkNonDispatchableHandle.6* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP13VkImageView_TEcvPvEv(%class.VkNonDispatchableHandle.7*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.7* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP13VkImageView_TEaSEm(%class.VkNonDispatchableHandle.7*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.7, %class.VkNonDispatchableHandle.7* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP16VkShaderModule_TEcvPvEv(%class.VkNonDispatchableHandle.8*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.8* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP16VkShaderModule_TEaSEm(%class.VkNonDispatchableHandle.8*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.8, %class.VkNonDispatchableHandle.8* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP17VkPipelineCache_TEcvPvEv(%class.VkNonDispatchableHandle.9*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.9* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP17VkPipelineCache_TEaSEm(%class.VkNonDispatchableHandle.9*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.9, %class.VkNonDispatchableHandle.9* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP18VkPipelineLayout_TEcvPvEv(%class.VkNonDispatchableHandle.10*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.10* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP18VkPipelineLayout_TEaSEm(%class.VkNonDispatchableHandle.10*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.10, %class.VkNonDispatchableHandle.10* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP12VkPipeline_TEcvPvEv(%class.VkNonDispatchableHandle.11*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.11* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP12VkPipeline_TEaSEm(%class.VkNonDispatchableHandle.11*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.11, %class.VkNonDispatchableHandle.11* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP14VkRenderPass_TEcvPvEv(%class.VkNonDispatchableHandle.12*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.12* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP14VkRenderPass_TEaSEm(%class.VkNonDispatchableHandle.12*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.12, %class.VkNonDispatchableHandle.12* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP23VkDescriptorSetLayout_TEcvPvEv(%class.VkNonDispatchableHandle.13*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.13* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP23VkDescriptorSetLayout_TEaSEm(%class.VkNonDispatchableHandle.13*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.13, %class.VkNonDispatchableHandle.13* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP11VkSampler_TEcvPvEv(%class.VkNonDispatchableHandle.14*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.14* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP11VkSampler_TEaSEm(%class.VkNonDispatchableHandle.14*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.14, %class.VkNonDispatchableHandle.14* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP17VkDescriptorSet_TEcvPvEv(%class.VkNonDispatchableHandle.15*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.15* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP17VkDescriptorSet_TEaSEm(%class.VkNonDispatchableHandle.15*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.15, %class.VkNonDispatchableHandle.15* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP18VkDescriptorPool_TEcvPvEv(%class.VkNonDispatchableHandle.16*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.16* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP18VkDescriptorPool_TEaSEm(%class.VkNonDispatchableHandle.16*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.16, %class.VkNonDispatchableHandle.16* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP15VkFramebuffer_TEcvPvEv(%class.VkNonDispatchableHandle.17*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.17* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP15VkFramebuffer_TEaSEm(%class.VkNonDispatchableHandle.17*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.17, %class.VkNonDispatchableHandle.17* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP15VkCommandPool_TEcvPvEv(%class.VkNonDispatchableHandle.18*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.18* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP15VkCommandPool_TEaSEm(%class.VkNonDispatchableHandle.18*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.18, %class.VkNonDispatchableHandle.18* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP26VkSamplerYcbcrConversion_TEcvPvEv(%class.VkNonDispatchableHandle.19*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.19* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP26VkSamplerYcbcrConversion_TEaSEm(%class.VkNonDispatchableHandle.19*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.19, %class.VkNonDispatchableHandle.19* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP28VkDescriptorUpdateTemplate_TEcvPvEv(%class.VkNonDispatchableHandle.20*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.20* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP28VkDescriptorUpdateTemplate_TEaSEm(%class.VkNonDispatchableHandle.20*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.20, %class.VkNonDispatchableHandle.20* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP14VkSurfaceKHR_TEcvPvEv(%class.VkNonDispatchableHandle.21*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.21* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP14VkSurfaceKHR_TEaSEm(%class.VkNonDispatchableHandle.21*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.21, %class.VkNonDispatchableHandle.21* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP16VkSwapchainKHR_TEcvPvEv(%class.VkNonDispatchableHandle.22*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.22* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP16VkSwapchainKHR_TEaSEm(%class.VkNonDispatchableHandle.22*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.22, %class.VkNonDispatchableHandle.22* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP14VkDisplayKHR_TEcvPvEv(%class.VkNonDispatchableHandle.23*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.23* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP14VkDisplayKHR_TEaSEm(%class.VkNonDispatchableHandle.23*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.23, %class.VkNonDispatchableHandle.23* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP18VkDisplayModeKHR_TEcvPvEv(%class.VkNonDispatchableHandle.24*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.24* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP18VkDisplayModeKHR_TEaSEm(%class.VkNonDispatchableHandle.24*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.24, %class.VkNonDispatchableHandle.24* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP24VkDeferredOperationKHR_TEcvPvEv(%class.VkNonDispatchableHandle.25*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.25* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP24VkDeferredOperationKHR_TEaSEm(%class.VkNonDispatchableHandle.25*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.25, %class.VkNonDispatchableHandle.25* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP26VkDebugReportCallbackEXT_TEcvPvEv(%class.VkNonDispatchableHandle.26*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.26* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP26VkDebugReportCallbackEXT_TEaSEm(%class.VkNonDispatchableHandle.26*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.26, %class.VkNonDispatchableHandle.26* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP15VkCuModuleNVX_TEcvPvEv(%class.VkNonDispatchableHandle.27*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.27* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP15VkCuModuleNVX_TEaSEm(%class.VkNonDispatchableHandle.27*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.27, %class.VkNonDispatchableHandle.27* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP17VkCuFunctionNVX_TEcvPvEv(%class.VkNonDispatchableHandle.28*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.28* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP17VkCuFunctionNVX_TEaSEm(%class.VkNonDispatchableHandle.28*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.28, %class.VkNonDispatchableHandle.28* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP26VkDebugUtilsMessengerEXT_TEcvPvEv(%class.VkNonDispatchableHandle.29*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.29* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP26VkDebugUtilsMessengerEXT_TEaSEm(%class.VkNonDispatchableHandle.29*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.29, %class.VkNonDispatchableHandle.29* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP22VkValidationCacheEXT_TEcvPvEv(%class.VkNonDispatchableHandle.30*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.30* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP22VkValidationCacheEXT_TEaSEm(%class.VkNonDispatchableHandle.30*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.30, %class.VkNonDispatchableHandle.30* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP27VkAccelerationStructureNV_TEcvPvEv(%class.VkNonDispatchableHandle.31*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.31* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP27VkAccelerationStructureNV_TEaSEm(%class.VkNonDispatchableHandle.31*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.31, %class.VkNonDispatchableHandle.31* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP33VkPerformanceConfigurationINTEL_TEcvPvEv(%class.VkNonDispatchableHandle.32*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.32* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP33VkPerformanceConfigurationINTEL_TEaSEm(%class.VkNonDispatchableHandle.32*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.32, %class.VkNonDispatchableHandle.32* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP28VkIndirectCommandsLayoutNV_TEcvPvEv(%class.VkNonDispatchableHandle.33*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.33* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP28VkIndirectCommandsLayoutNV_TEaSEm(%class.VkNonDispatchableHandle.33*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.33, %class.VkNonDispatchableHandle.33* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP22VkPrivateDataSlotEXT_TEcvPvEv(%class.VkNonDispatchableHandle.34*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.34* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP22VkPrivateDataSlotEXT_TEaSEm(%class.VkNonDispatchableHandle.34*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.34, %class.VkNonDispatchableHandle.34* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP28VkAccelerationStructureKHR_TEcvPvEv(%class.VkNonDispatchableHandle.35*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.35* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP28VkAccelerationStructureKHR_TEaSEm(%class.VkNonDispatchableHandle.35*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.35, %class.VkNonDispatchableHandle.35* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2vk10RenderPassC2EPK22VkRenderPassCreateInfoPv(%"class.vk::RenderPass"*, %struct.VkRenderPassCreateInfo*, i8*) unnamed_addr #0 align 2 {
  %4 = alloca i8*, align 8
  store i8* %2, i8** %4, align 8
  %5 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 0
  %6 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %1, i64 0, i32 3
  %7 = load i32, i32* %6, align 4
  store i32 %7, i32* %5, align 8
  %8 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 1
  store %struct.VkAttachmentDescription* null, %struct.VkAttachmentDescription** %8, align 8
  %9 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %1, i64 0, i32 5
  %11 = load i32, i32* %10, align 8
  store i32 %11, i32* %9, align 8
  %12 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 3
  %13 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 5
  %14 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %1, i64 0, i32 7
  %15 = bitcast %struct.VkSubpassDescription** %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 16, i1 false)
  %16 = load i32, i32* %14, align 8
  store i32 %16, i32* %13, align 8
  %17 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 6
  %18 = bitcast %struct.VkSubpassDependency** %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 32, i1 false)
  call void @_ZN2vk10RenderPass4initI22VkRenderPassCreateInfoEEvPKT_PPv(%"class.vk::RenderPass"* %0, %struct.VkRenderPassCreateInfo* %1, i8** nonnull %4) #7
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN2vk10RenderPass4initI22VkRenderPassCreateInfoEEvPKT_PPv(%"class.vk::RenderPass"*, %struct.VkRenderPassCreateInfo*, i8**) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = load i8*, i8** %2, align 8
  %6 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %1, i64 0, i32 5
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = mul nuw nsw i64 %8, 72
  %10 = bitcast i8* %5 to %struct.VkSubpassDescription*
  %11 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 3
  %12 = bitcast %struct.VkSubpassDescription** %11 to i8**
  store i8* %5, i8** %12, align 8
  %13 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %1, i64 0, i32 6
  %14 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %13, align 8
  %15 = load i32, i32* %6, align 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %42, label %17

17:                                               ; preds = %3
  %18 = zext i32 %15 to i64
  br label %19

19:                                               ; preds = %19, %17
  %20 = phi i64 [ 0, %17 ], [ %40, %19 ]
  %21 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %14, i64 %20, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %10, i64 %20, i32 0
  store i32 %22, i32* %23, align 8
  %24 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %14, i64 %20, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %10, i64 %20, i32 1
  store i32 %25, i32* %26, align 4
  %27 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %14, i64 %20, i32 2
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %10, i64 %20, i32 2
  store i32 %28, i32* %29, align 8
  %30 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %10, i64 %20, i32 3
  store %struct.VkAttachmentReference* null, %struct.VkAttachmentReference** %30, align 8
  %31 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %14, i64 %20, i32 4
  %32 = load i32, i32* %31, align 8
  %33 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %10, i64 %20, i32 4
  store i32 %32, i32* %33, align 8
  %34 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %10, i64 %20, i32 5
  %35 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %14, i64 %20, i32 8
  %36 = bitcast %struct.VkAttachmentReference** %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 24, i1 false) #8
  %37 = load i32, i32* %35, align 8
  %38 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %10, i64 %20, i32 8
  store i32 %37, i32* %38, align 8
  %39 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %10, i64 %20, i32 9
  store i32* null, i32** %39, align 8
  %40 = add nuw nsw i64 %20, 1
  %41 = icmp eq i64 %40, %18
  br i1 %41, label %42, label %19

42:                                               ; preds = %19, %3
  %43 = getelementptr inbounds i8, i8* %5, i64 %9
  %44 = bitcast i8* %43 to i32*
  %45 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 2
  %46 = load i32, i32* %45, align 8
  %47 = zext i32 %46 to i64
  %48 = shl nuw nsw i64 %47, 2
  %49 = getelementptr inbounds i8, i8* %43, i64 %48
  %50 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 0
  %51 = load i32, i32* %50, align 8
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %130, label %53

53:                                               ; preds = %42
  %54 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %1, i64 0, i32 3
  %55 = load i32, i32* %54, align 4
  %56 = zext i32 %55 to i64
  %57 = mul nuw nsw i64 %56, 36
  %58 = bitcast i8* %49 to %struct.VkAttachmentDescription*
  %59 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 1
  %60 = bitcast %struct.VkAttachmentDescription** %59 to i8**
  store i8* %49, i8** %60, align 8
  %61 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %1, i64 0, i32 4
  %62 = load %struct.VkAttachmentDescription*, %struct.VkAttachmentDescription** %61, align 8
  %63 = load i32, i32* %54, align 4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %102, label %65

65:                                               ; preds = %53
  %66 = zext i32 %63 to i64
  br label %67

67:                                               ; preds = %67, %65
  %68 = phi i64 [ 0, %65 ], [ %96, %67 ]
  %69 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %62, i64 %68, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %58, i64 %68, i32 0
  store i32 %70, i32* %71, align 4
  %72 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %62, i64 %68, i32 1
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %58, i64 %68, i32 1
  store i32 %73, i32* %74, align 4
  %75 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %62, i64 %68, i32 2
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %58, i64 %68, i32 2
  store i32 %76, i32* %77, align 4
  %78 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %62, i64 %68, i32 3
  %79 = load i32, i32* %78, align 4
  %80 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %58, i64 %68, i32 3
  store i32 %79, i32* %80, align 4
  %81 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %62, i64 %68, i32 4
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %58, i64 %68, i32 4
  store i32 %82, i32* %83, align 4
  %84 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %62, i64 %68, i32 5
  %85 = load i32, i32* %84, align 4
  %86 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %58, i64 %68, i32 5
  store i32 %85, i32* %86, align 4
  %87 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %62, i64 %68, i32 6
  %88 = load i32, i32* %87, align 4
  %89 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %58, i64 %68, i32 6
  store i32 %88, i32* %89, align 4
  %90 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %62, i64 %68, i32 7
  %91 = load i32, i32* %90, align 4
  %92 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %58, i64 %68, i32 7
  store i32 %91, i32* %92, align 4
  %93 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %62, i64 %68, i32 8
  %94 = load i32, i32* %93, align 4
  %95 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %58, i64 %68, i32 8
  store i32 %94, i32* %95, align 4
  %96 = add nuw nsw i64 %68, 1
  %97 = icmp eq i64 %96, %66
  br i1 %97, label %98, label %67

98:                                               ; preds = %67
  %99 = load i32, i32* %54, align 4
  %100 = zext i32 %99 to i64
  %101 = shl nuw nsw i64 %100, 2
  br label %102

102:                                              ; preds = %98, %53
  %103 = phi i64 [ %101, %98 ], [ 0, %53 ]
  %104 = getelementptr inbounds i8, i8* %49, i64 %57
  %105 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 7
  %106 = bitcast i32** %105 to i8**
  store i8* %104, i8** %106, align 8
  %107 = getelementptr inbounds i8, i8* %104, i64 %103
  %108 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 9
  %109 = bitcast i32** %108 to i8**
  store i8* %107, i8** %109, align 8
  %110 = load i32, i32* %54, align 4
  %111 = zext i32 %110 to i64
  %112 = shl nuw nsw i64 %111, 2
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  %114 = icmp eq i32 %110, 0
  br i1 %114, label %130, label %115

115:                                              ; preds = %102
  %116 = bitcast i8* %104 to i32*
  store i32 -1, i32* %116, align 4
  %117 = load i32*, i32** %108, align 8
  store i32 0, i32* %117, align 4
  %118 = load i32, i32* %54, align 4
  %119 = icmp ugt i32 %118, 1
  br i1 %119, label %120, label %130

120:                                              ; preds = %115, %120
  %121 = phi i64 [ %126, %120 ], [ 1, %115 ]
  %122 = load i32*, i32** %105, align 8
  %123 = getelementptr inbounds i32, i32* %122, i64 %121
  store i32 -1, i32* %123, align 4
  %124 = load i32*, i32** %108, align 8
  %125 = getelementptr inbounds i32, i32* %124, i64 %121
  store i32 0, i32* %125, align 4
  %126 = add nuw nsw i64 %121, 1
  %127 = load i32, i32* %54, align 4
  %128 = zext i32 %127 to i64
  %129 = icmp ult i64 %126, %128
  br i1 %129, label %120, label %130

130:                                              ; preds = %120, %115, %102, %42
  %131 = phi i8* [ %49, %42 ], [ %113, %102 ], [ %113, %115 ], [ %113, %120 ]
  %132 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %1, i64 0, i32 1
  %133 = bitcast i8** %132 to %struct.VkBaseInStructure**
  %134 = load %struct.VkBaseInStructure*, %struct.VkBaseInStructure** %133, align 8
  %135 = icmp eq %struct.VkBaseInStructure* %134, null
  br i1 %135, label %181, label %136

136:                                              ; preds = %130
  %137 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  %138 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %139 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %138, i64 0, i32 1, i32 0
  %140 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %141 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 8
  %142 = bitcast i32** %141 to i8**
  br label %143

143:                                              ; preds = %136, %177
  %144 = phi %struct.VkBaseInStructure* [ %134, %136 ], [ %179, %177 ]
  %145 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %144, i64 0, i32 0
  %146 = load i32, i32* %145, align 8
  %147 = icmp eq i32 %146, 1000053000
  br i1 %147, label %148, label %167

148:                                              ; preds = %143
  %149 = load i32, i32* %6, align 8
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %177, label %151

151:                                              ; preds = %148
  %152 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %144, i64 1, i32 1
  %153 = bitcast %struct.VkBaseInStructure** %152 to i32**
  br label %154

154:                                              ; preds = %151, %162
  %155 = phi i64 [ 0, %151 ], [ %163, %162 ]
  %156 = load i32*, i32** %153, align 8
  %157 = getelementptr inbounds i32, i32* %156, i64 %155
  %158 = load i32, i32* %157, align 4
  %159 = getelementptr inbounds i32, i32* %44, i64 %155
  store i32 %158, i32* %159, align 4
  %160 = icmp eq i32 %158, 0
  br i1 %160, label %162, label %161

161:                                              ; preds = %154
  store i8* %43, i8** %142, align 8
  br label %162

162:                                              ; preds = %154, %161
  %163 = add nuw nsw i64 %155, 1
  %164 = load i32, i32* %6, align 8
  %165 = zext i32 %164 to i64
  %166 = icmp ult i64 %163, %165
  br i1 %166, label %154, label %177

167:                                              ; preds = %143
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %137) #8
  call void @_ZN2vk9StringifyE15VkStructureType(%"class.std::__1::basic_string"* nonnull sret %4, i32 %146) #9
  %168 = load i8, i8* %139, align 1
  %169 = icmp slt i8 %168, 0
  %170 = load i8*, i8** %140, align 8
  %171 = select i1 %169, i8* %170, i8* %137
  call void (i8*, ...) @_ZN2sw4warnEPKcz(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0), i32 263, i8* %171) #9
  %172 = load i8, i8* %139, align 1
  %173 = icmp slt i8 %172, 0
  br i1 %173, label %174, label %176

174:                                              ; preds = %167
  %175 = load i8*, i8** %140, align 8
  call void @_ZdlPv(i8* %175) #10
  br label %176

176:                                              ; preds = %167, %174
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %137) #8
  br label %177

177:                                              ; preds = %162, %148, %176
  %178 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %144, i64 0, i32 1
  %179 = load %struct.VkBaseInStructure*, %struct.VkBaseInStructure** %178, align 8
  %180 = icmp eq %struct.VkBaseInStructure* %179, null
  br i1 %180, label %181, label %143

181:                                              ; preds = %177, %130
  %182 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 8
  %183 = load i32, i32* %6, align 8
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %188, label %185

185:                                              ; preds = %181
  %186 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 7
  %187 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 9
  br label %193

188:                                              ; preds = %498, %181
  %189 = phi i8* [ %131, %181 ], [ %499, %498 ]
  %190 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %1, i64 0, i32 7
  %191 = load i32, i32* %190, align 8
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %544, label %503

193:                                              ; preds = %185, %498
  %194 = phi i8* [ %131, %185 ], [ %499, %498 ]
  %195 = phi i32 [ 0, %185 ], [ %500, %498 ]
  %196 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %13, align 8
  %197 = zext i32 %195 to i64
  %198 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %196, i64 %197, i32 2
  %199 = load i32, i32* %198, align 8
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %268, label %201

201:                                              ; preds = %193
  %202 = zext i32 %199 to i64
  %203 = shl nuw nsw i64 %202, 3
  %204 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %205 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %204, i64 %197, i32 3
  %206 = bitcast %struct.VkAttachmentReference** %205 to i8**
  store i8* %194, i8** %206, align 8
  %207 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %208 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %207, i64 %197, i32 3
  %209 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %208, align 8
  %210 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %13, align 8
  %211 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %210, i64 %197, i32 3
  %212 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %211, align 8
  %213 = load i32, i32* %198, align 8
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %229, label %215

215:                                              ; preds = %201
  %216 = zext i32 %213 to i64
  br label %217

217:                                              ; preds = %217, %215
  %218 = phi i64 [ 0, %215 ], [ %225, %217 ]
  %219 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %212, i64 %218, i32 0
  %220 = load i32, i32* %219, align 4
  %221 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %209, i64 %218, i32 0
  store i32 %220, i32* %221, align 4
  %222 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %212, i64 %218, i32 1
  %223 = load i32, i32* %222, align 4
  %224 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %209, i64 %218, i32 1
  store i32 %223, i32* %224, align 4
  %225 = add nuw nsw i64 %218, 1
  %226 = icmp eq i64 %225, %216
  br i1 %226, label %227, label %217

227:                                              ; preds = %217
  %228 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  br label %229

229:                                              ; preds = %227, %201
  %230 = phi %struct.VkSubpassDescription* [ %228, %227 ], [ %207, %201 ]
  %231 = getelementptr inbounds i8, i8* %194, i64 %203
  %232 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %230, i64 %197, i32 2
  %233 = load i32, i32* %232, align 8
  %234 = icmp eq i32 %233, 0
  br i1 %234, label %268, label %235

235:                                              ; preds = %229
  %236 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %196, i64 %197, i32 3
  %237 = sext i32 %195 to i64
  br label %238

238:                                              ; preds = %235, %261
  %239 = phi i64 [ 0, %235 ], [ %262, %261 ]
  %240 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %236, align 8
  %241 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %240, i64 %239, i32 0
  %242 = load i32, i32* %241, align 4
  %243 = icmp eq i32 %242, -1
  br i1 %243, label %261, label %244

244:                                              ; preds = %238
  %245 = load i32*, i32** %186, align 8
  %246 = sext i32 %242 to i64
  %247 = getelementptr inbounds i32, i32* %245, i64 %246
  %248 = load i32, i32* %247, align 4
  %249 = icmp eq i32 %248, -1
  br i1 %249, label %250, label %251

250:                                              ; preds = %244
  store i32 %195, i32* %247, align 4
  br label %251

251:                                              ; preds = %250, %244
  %252 = load i32*, i32** %182, align 8
  %253 = icmp eq i32* %252, null
  br i1 %253, label %261, label %254

254:                                              ; preds = %251
  %255 = getelementptr inbounds i32, i32* %252, i64 %237
  %256 = load i32, i32* %255, align 4
  %257 = load i32*, i32** %187, align 8
  %258 = getelementptr inbounds i32, i32* %257, i64 %246
  %259 = load i32, i32* %258, align 4
  %260 = or i32 %259, %256
  store i32 %260, i32* %258, align 4
  br label %261

261:                                              ; preds = %254, %251, %238
  %262 = add nuw nsw i64 %239, 1
  %263 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %264 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %263, i64 %197, i32 2
  %265 = load i32, i32* %264, align 8
  %266 = zext i32 %265 to i64
  %267 = icmp ult i64 %262, %266
  br i1 %267, label %238, label %268

268:                                              ; preds = %261, %229, %193
  %269 = phi i8* [ %194, %193 ], [ %231, %229 ], [ %231, %261 ]
  %270 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %196, i64 %197, i32 4
  %271 = load i32, i32* %270, align 8
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %389, label %273

273:                                              ; preds = %268
  %274 = zext i32 %271 to i64
  %275 = shl nuw nsw i64 %274, 3
  %276 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %277 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %276, i64 %197, i32 5
  %278 = bitcast %struct.VkAttachmentReference** %277 to i8**
  store i8* %269, i8** %278, align 8
  %279 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %280 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %279, i64 %197, i32 5
  %281 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %280, align 8
  %282 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %196, i64 %197, i32 5
  %283 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %282, align 8
  %284 = load i32, i32* %270, align 8
  %285 = icmp eq i32 %284, 0
  br i1 %285, label %298, label %286

286:                                              ; preds = %273
  %287 = zext i32 %284 to i64
  br label %288

288:                                              ; preds = %288, %286
  %289 = phi i64 [ 0, %286 ], [ %296, %288 ]
  %290 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %283, i64 %289, i32 0
  %291 = load i32, i32* %290, align 4
  %292 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %281, i64 %289, i32 0
  store i32 %291, i32* %292, align 4
  %293 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %283, i64 %289, i32 1
  %294 = load i32, i32* %293, align 4
  %295 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %281, i64 %289, i32 1
  store i32 %294, i32* %295, align 4
  %296 = add nuw nsw i64 %289, 1
  %297 = icmp eq i64 %296, %287
  br i1 %297, label %298, label %288

298:                                              ; preds = %288, %273
  %299 = getelementptr inbounds i8, i8* %269, i64 %275
  %300 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %196, i64 %197, i32 6
  %301 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %300, align 8
  %302 = icmp eq %struct.VkAttachmentReference* %301, null
  br i1 %302, label %327, label %303

303:                                              ; preds = %298
  %304 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %305 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %304, i64 %197, i32 6
  %306 = bitcast %struct.VkAttachmentReference** %305 to i8**
  store i8* %299, i8** %306, align 8
  %307 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %308 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %307, i64 %197, i32 6
  %309 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %308, align 8
  %310 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %300, align 8
  %311 = load i32, i32* %270, align 8
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %325, label %313

313:                                              ; preds = %303
  %314 = zext i32 %311 to i64
  br label %315

315:                                              ; preds = %315, %313
  %316 = phi i64 [ 0, %313 ], [ %323, %315 ]
  %317 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %310, i64 %316, i32 0
  %318 = load i32, i32* %317, align 4
  %319 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %309, i64 %316, i32 0
  store i32 %318, i32* %319, align 4
  %320 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %310, i64 %316, i32 1
  %321 = load i32, i32* %320, align 4
  %322 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %309, i64 %316, i32 1
  store i32 %321, i32* %322, align 4
  %323 = add nuw nsw i64 %316, 1
  %324 = icmp eq i64 %323, %314
  br i1 %324, label %325, label %315

325:                                              ; preds = %315, %303
  %326 = getelementptr inbounds i8, i8* %299, i64 %275
  br label %327

327:                                              ; preds = %298, %325
  %328 = phi i8* [ %326, %325 ], [ %299, %298 ]
  %329 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %330 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %329, i64 %197, i32 4
  %331 = load i32, i32* %330, align 8
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %389, label %333

333:                                              ; preds = %327
  %334 = sext i32 %195 to i64
  br label %335

335:                                              ; preds = %333, %382
  %336 = phi i64 [ 0, %333 ], [ %383, %382 ]
  %337 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %282, align 8
  %338 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %337, i64 %336, i32 0
  %339 = load i32, i32* %338, align 4
  %340 = icmp eq i32 %339, -1
  br i1 %340, label %358, label %341

341:                                              ; preds = %335
  %342 = load i32*, i32** %186, align 8
  %343 = sext i32 %339 to i64
  %344 = getelementptr inbounds i32, i32* %342, i64 %343
  %345 = load i32, i32* %344, align 4
  %346 = icmp eq i32 %345, -1
  br i1 %346, label %347, label %348

347:                                              ; preds = %341
  store i32 %195, i32* %344, align 4
  br label %348

348:                                              ; preds = %347, %341
  %349 = load i32*, i32** %182, align 8
  %350 = icmp eq i32* %349, null
  br i1 %350, label %358, label %351

351:                                              ; preds = %348
  %352 = getelementptr inbounds i32, i32* %349, i64 %334
  %353 = load i32, i32* %352, align 4
  %354 = load i32*, i32** %187, align 8
  %355 = getelementptr inbounds i32, i32* %354, i64 %343
  %356 = load i32, i32* %355, align 4
  %357 = or i32 %356, %353
  store i32 %357, i32* %355, align 4
  br label %358

358:                                              ; preds = %351, %348, %335
  %359 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %300, align 8
  %360 = icmp eq %struct.VkAttachmentReference* %359, null
  br i1 %360, label %382, label %361

361:                                              ; preds = %358
  %362 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %359, i64 %336, i32 0
  %363 = load i32, i32* %362, align 4
  %364 = icmp eq i32 %363, -1
  br i1 %364, label %382, label %365

365:                                              ; preds = %361
  %366 = load i32*, i32** %186, align 8
  %367 = sext i32 %363 to i64
  %368 = getelementptr inbounds i32, i32* %366, i64 %367
  %369 = load i32, i32* %368, align 4
  %370 = icmp eq i32 %369, -1
  br i1 %370, label %371, label %372

371:                                              ; preds = %365
  store i32 %195, i32* %368, align 4
  br label %372

372:                                              ; preds = %371, %365
  %373 = load i32*, i32** %182, align 8
  %374 = icmp eq i32* %373, null
  br i1 %374, label %382, label %375

375:                                              ; preds = %372
  %376 = getelementptr inbounds i32, i32* %373, i64 %334
  %377 = load i32, i32* %376, align 4
  %378 = load i32*, i32** %187, align 8
  %379 = getelementptr inbounds i32, i32* %378, i64 %367
  %380 = load i32, i32* %379, align 4
  %381 = or i32 %380, %377
  store i32 %381, i32* %379, align 4
  br label %382

382:                                              ; preds = %375, %372, %361, %358
  %383 = add nuw nsw i64 %336, 1
  %384 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %385 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %384, i64 %197, i32 4
  %386 = load i32, i32* %385, align 8
  %387 = zext i32 %386 to i64
  %388 = icmp ult i64 %383, %387
  br i1 %388, label %335, label %389

389:                                              ; preds = %382, %327, %268
  %390 = phi i8* [ %269, %268 ], [ %328, %327 ], [ %328, %382 ]
  %391 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %196, i64 %197, i32 7
  %392 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %391, align 8
  %393 = icmp eq %struct.VkAttachmentReference* %392, null
  br i1 %393, label %431, label %394

394:                                              ; preds = %389
  %395 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %396 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %395, i64 %197, i32 7
  %397 = bitcast %struct.VkAttachmentReference** %396 to i8**
  store i8* %390, i8** %397, align 8
  %398 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %399 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %398, i64 %197, i32 7
  %400 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %399, align 8
  %401 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %391, align 8
  %402 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %401, i64 0, i32 0
  %403 = load i32, i32* %402, align 4
  %404 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %400, i64 0, i32 0
  store i32 %403, i32* %404, align 4
  %405 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %401, i64 0, i32 1
  %406 = load i32, i32* %405, align 4
  %407 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %400, i64 0, i32 1
  store i32 %406, i32* %407, align 4
  %408 = getelementptr inbounds i8, i8* %390, i64 8
  %409 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %391, align 8
  %410 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %409, i64 0, i32 0
  %411 = load i32, i32* %410, align 4
  %412 = icmp eq i32 %411, -1
  br i1 %412, label %431, label %413

413:                                              ; preds = %394
  %414 = load i32*, i32** %186, align 8
  %415 = sext i32 %411 to i64
  %416 = getelementptr inbounds i32, i32* %414, i64 %415
  %417 = load i32, i32* %416, align 4
  %418 = icmp eq i32 %417, -1
  br i1 %418, label %419, label %420

419:                                              ; preds = %413
  store i32 %195, i32* %416, align 4
  br label %420

420:                                              ; preds = %419, %413
  %421 = load i32*, i32** %182, align 8
  %422 = icmp eq i32* %421, null
  br i1 %422, label %431, label %423

423:                                              ; preds = %420
  %424 = sext i32 %195 to i64
  %425 = getelementptr inbounds i32, i32* %421, i64 %424
  %426 = load i32, i32* %425, align 4
  %427 = load i32*, i32** %187, align 8
  %428 = getelementptr inbounds i32, i32* %427, i64 %415
  %429 = load i32, i32* %428, align 4
  %430 = or i32 %429, %426
  store i32 %430, i32* %428, align 4
  br label %431

431:                                              ; preds = %423, %420, %394, %389
  %432 = phi i8* [ %408, %394 ], [ %390, %389 ], [ %408, %420 ], [ %408, %423 ]
  %433 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %196, i64 %197, i32 8
  %434 = load i32, i32* %433, align 8
  %435 = icmp eq i32 %434, 0
  br i1 %435, label %498, label %436

436:                                              ; preds = %431
  %437 = zext i32 %434 to i64
  %438 = shl nuw nsw i64 %437, 2
  %439 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %440 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %439, i64 %197, i32 9
  %441 = bitcast i32** %440 to i8**
  store i8* %432, i8** %441, align 8
  %442 = load i32, i32* %433, align 8
  %443 = icmp eq i32 %442, 0
  br i1 %443, label %444, label %453

444:                                              ; preds = %453, %436
  %445 = getelementptr inbounds i8, i8* %432, i64 %438
  %446 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %447 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %446, i64 %197, i32 8
  %448 = load i32, i32* %447, align 8
  %449 = icmp eq i32 %448, 0
  br i1 %449, label %498, label %450

450:                                              ; preds = %444
  %451 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %196, i64 %197, i32 9
  %452 = sext i32 %195 to i64
  br label %468

453:                                              ; preds = %436, %453
  %454 = phi i64 [ %464, %453 ], [ 0, %436 ]
  %455 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %13, align 8
  %456 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %455, i64 %197, i32 9
  %457 = load i32*, i32** %456, align 8
  %458 = getelementptr inbounds i32, i32* %457, i64 %454
  %459 = load i32, i32* %458, align 4
  %460 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %461 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %460, i64 %197, i32 9
  %462 = load i32*, i32** %461, align 8
  %463 = getelementptr inbounds i32, i32* %462, i64 %454
  store i32 %459, i32* %463, align 4
  %464 = add nuw nsw i64 %454, 1
  %465 = load i32, i32* %433, align 8
  %466 = zext i32 %465 to i64
  %467 = icmp ult i64 %464, %466
  br i1 %467, label %453, label %444

468:                                              ; preds = %450, %491
  %469 = phi i64 [ 0, %450 ], [ %492, %491 ]
  %470 = load i32*, i32** %451, align 8
  %471 = getelementptr inbounds i32, i32* %470, i64 %469
  %472 = load i32, i32* %471, align 4
  %473 = icmp eq i32 %472, -1
  br i1 %473, label %491, label %474

474:                                              ; preds = %468
  %475 = load i32*, i32** %186, align 8
  %476 = sext i32 %472 to i64
  %477 = getelementptr inbounds i32, i32* %475, i64 %476
  %478 = load i32, i32* %477, align 4
  %479 = icmp eq i32 %478, -1
  br i1 %479, label %480, label %481

480:                                              ; preds = %474
  store i32 %195, i32* %477, align 4
  br label %481

481:                                              ; preds = %480, %474
  %482 = load i32*, i32** %182, align 8
  %483 = icmp eq i32* %482, null
  br i1 %483, label %491, label %484

484:                                              ; preds = %481
  %485 = getelementptr inbounds i32, i32* %482, i64 %452
  %486 = load i32, i32* %485, align 4
  %487 = load i32*, i32** %187, align 8
  %488 = getelementptr inbounds i32, i32* %487, i64 %476
  %489 = load i32, i32* %488, align 4
  %490 = or i32 %489, %486
  store i32 %490, i32* %488, align 4
  br label %491

491:                                              ; preds = %484, %481, %468
  %492 = add nuw nsw i64 %469, 1
  %493 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %494 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %493, i64 %197, i32 8
  %495 = load i32, i32* %494, align 8
  %496 = zext i32 %495 to i64
  %497 = icmp ult i64 %492, %496
  br i1 %497, label %468, label %498

498:                                              ; preds = %491, %444, %431
  %499 = phi i8* [ %432, %431 ], [ %445, %444 ], [ %445, %491 ]
  %500 = add nuw i32 %195, 1
  %501 = load i32, i32* %6, align 8
  %502 = icmp ult i32 %500, %501
  br i1 %502, label %193, label %188

503:                                              ; preds = %188
  %504 = bitcast i8* %189 to %struct.VkSubpassDependency*
  %505 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 6
  %506 = bitcast %struct.VkSubpassDependency** %505 to i8**
  store i8* %189, i8** %506, align 8
  %507 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %1, i64 0, i32 8
  %508 = load %struct.VkSubpassDependency*, %struct.VkSubpassDependency** %507, align 8
  %509 = load i32, i32* %190, align 8
  %510 = icmp eq i32 %509, 0
  br i1 %510, label %538, label %511

511:                                              ; preds = %503
  %512 = zext i32 %509 to i64
  br label %513

513:                                              ; preds = %513, %511
  %514 = phi i64 [ 0, %511 ], [ %536, %513 ]
  %515 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %508, i64 %514, i32 0
  %516 = load i32, i32* %515, align 4
  %517 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %504, i64 %514, i32 0
  store i32 %516, i32* %517, align 4
  %518 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %508, i64 %514, i32 1
  %519 = load i32, i32* %518, align 4
  %520 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %504, i64 %514, i32 1
  store i32 %519, i32* %520, align 4
  %521 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %508, i64 %514, i32 2
  %522 = load i32, i32* %521, align 4
  %523 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %504, i64 %514, i32 2
  store i32 %522, i32* %523, align 4
  %524 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %508, i64 %514, i32 3
  %525 = load i32, i32* %524, align 4
  %526 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %504, i64 %514, i32 3
  store i32 %525, i32* %526, align 4
  %527 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %508, i64 %514, i32 4
  %528 = load i32, i32* %527, align 4
  %529 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %504, i64 %514, i32 4
  store i32 %528, i32* %529, align 4
  %530 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %508, i64 %514, i32 5
  %531 = load i32, i32* %530, align 4
  %532 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %504, i64 %514, i32 5
  store i32 %531, i32* %532, align 4
  %533 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %508, i64 %514, i32 6
  %534 = load i32, i32* %533, align 4
  %535 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %504, i64 %514, i32 6
  store i32 %534, i32* %535, align 4
  %536 = add nuw nsw i64 %514, 1
  %537 = icmp eq i64 %536, %512
  br i1 %537, label %538, label %513

538:                                              ; preds = %513, %503
  %539 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 5
  %540 = load i32, i32* %539, align 8
  %541 = zext i32 %540 to i64
  %542 = mul nuw nsw i64 %541, 28
  %543 = getelementptr inbounds i8, i8* %189, i64 %542
  br label %544

544:                                              ; preds = %188, %538
  %545 = phi i8* [ %543, %538 ], [ %189, %188 ]
  store i8* %545, i8** %2, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2vk10RenderPassC2EPK23VkRenderPassCreateInfo2Pv(%"class.vk::RenderPass"*, %struct.VkRenderPassCreateInfo2*, i8*) unnamed_addr #0 align 2 {
  %4 = alloca i8*, align 8
  store i8* %2, i8** %4, align 8
  %5 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 0
  %6 = getelementptr inbounds %struct.VkRenderPassCreateInfo2, %struct.VkRenderPassCreateInfo2* %1, i64 0, i32 3
  %7 = load i32, i32* %6, align 4
  store i32 %7, i32* %5, align 8
  %8 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 1
  store %struct.VkAttachmentDescription* null, %struct.VkAttachmentDescription** %8, align 8
  %9 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %struct.VkRenderPassCreateInfo2, %struct.VkRenderPassCreateInfo2* %1, i64 0, i32 5
  %11 = load i32, i32* %10, align 8
  store i32 %11, i32* %9, align 8
  %12 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 3
  %13 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 4
  %14 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 5
  %15 = getelementptr inbounds %struct.VkRenderPassCreateInfo2, %struct.VkRenderPassCreateInfo2* %1, i64 0, i32 7
  %16 = bitcast %struct.VkSubpassDescription** %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 16, i1 false)
  %17 = load i32, i32* %15, align 8
  store i32 %17, i32* %14, align 8
  %18 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 6
  %19 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 7
  %20 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 8
  %21 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 9
  %22 = bitcast %struct.VkSubpassDependency** %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 32, i1 false)
  call void @_ZN2vk10RenderPass4initI23VkRenderPassCreateInfo2EEvPKT_PPv(%"class.vk::RenderPass"* %0, %struct.VkRenderPassCreateInfo2* %1, i8** nonnull %4) #7
  %23 = load i32, i32* %9, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %29, label %25

25:                                               ; preds = %3
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds %struct.VkRenderPassCreateInfo2, %struct.VkRenderPassCreateInfo2* %1, i64 0, i32 6
  %28 = bitcast %struct.VkSubpassDescriptionDepthStencilResolve** %13 to i8**
  br label %30

29:                                               ; preds = %144, %3
  ret void

30:                                               ; preds = %25, %144
  %31 = phi i32 [ %23, %25 ], [ %145, %144 ]
  %32 = phi i8* [ %26, %25 ], [ %146, %144 ]
  %33 = phi i32 [ 0, %25 ], [ %147, %144 ]
  %34 = load %struct.VkSubpassDescription2*, %struct.VkSubpassDescription2** %27, align 8
  %35 = zext i32 %33 to i64
  %36 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %34, i64 %35, i32 1
  %37 = bitcast i8** %36 to %struct.VkBaseInStructure**
  %38 = load %struct.VkBaseInStructure*, %struct.VkBaseInStructure** %37, align 8
  %39 = icmp eq %struct.VkBaseInStructure* %38, null
  br i1 %39, label %144, label %40

40:                                               ; preds = %30
  %41 = sext i32 %33 to i64
  br label %42

42:                                               ; preds = %40, %137
  %43 = phi %struct.VkBaseInStructure* [ %38, %40 ], [ %140, %137 ]
  %44 = phi i8* [ %32, %40 ], [ %138, %137 ]
  %45 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %43, i64 0, i32 0
  %46 = load i32, i32* %45, align 8
  %47 = icmp eq i32 %46, 1000199001
  br i1 %47, label %48, label %137

48:                                               ; preds = %42
  %49 = bitcast %struct.VkBaseInStructure* %43 to %struct.VkSubpassDescriptionDepthStencilResolve*
  %50 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %43, i64 1, i32 1
  %51 = bitcast %struct.VkBaseInStructure** %50 to %struct.VkAttachmentReference2**
  %52 = load %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2** %51, align 8
  %53 = icmp eq %struct.VkAttachmentReference2* %52, null
  br i1 %53, label %137, label %54

54:                                               ; preds = %48
  %55 = getelementptr inbounds %struct.VkAttachmentReference2, %struct.VkAttachmentReference2* %52, i64 0, i32 2
  %56 = load i32, i32* %55, align 8
  %57 = icmp eq i32 %56, -1
  br i1 %57, label %137, label %58

58:                                               ; preds = %54
  %59 = load %struct.VkSubpassDescriptionDepthStencilResolve*, %struct.VkSubpassDescriptionDepthStencilResolve** %13, align 8
  %60 = icmp eq %struct.VkSubpassDescriptionDepthStencilResolve* %59, null
  br i1 %60, label %61, label %85

61:                                               ; preds = %58
  store i8* %44, i8** %28, align 8
  %62 = load i32, i32* %9, align 8
  %63 = zext i32 %62 to i64
  %64 = shl nuw nsw i64 %63, 5
  %65 = getelementptr inbounds i8, i8* %44, i64 %64
  %66 = icmp eq i32 %62, 0
  %67 = bitcast i8* %44 to %struct.VkSubpassDescriptionDepthStencilResolve*
  br i1 %66, label %85, label %68

68:                                               ; preds = %61, %68
  %69 = phi %struct.VkSubpassDescriptionDepthStencilResolve* [ %84, %68 ], [ %67, %61 ]
  %70 = phi i64 [ %80, %68 ], [ 0, %61 ]
  %71 = getelementptr inbounds %struct.VkSubpassDescriptionDepthStencilResolve, %struct.VkSubpassDescriptionDepthStencilResolve* %69, i64 %70, i32 0
  store i32 1000199001, i32* %71, align 8
  %72 = load %struct.VkSubpassDescriptionDepthStencilResolve*, %struct.VkSubpassDescriptionDepthStencilResolve** %13, align 8
  %73 = getelementptr inbounds %struct.VkSubpassDescriptionDepthStencilResolve, %struct.VkSubpassDescriptionDepthStencilResolve* %72, i64 %70, i32 1
  store i8* null, i8** %73, align 8
  %74 = load %struct.VkSubpassDescriptionDepthStencilResolve*, %struct.VkSubpassDescriptionDepthStencilResolve** %13, align 8
  %75 = getelementptr inbounds %struct.VkSubpassDescriptionDepthStencilResolve, %struct.VkSubpassDescriptionDepthStencilResolve* %74, i64 %70, i32 2
  store i32 0, i32* %75, align 8
  %76 = load %struct.VkSubpassDescriptionDepthStencilResolve*, %struct.VkSubpassDescriptionDepthStencilResolve** %13, align 8
  %77 = getelementptr inbounds %struct.VkSubpassDescriptionDepthStencilResolve, %struct.VkSubpassDescriptionDepthStencilResolve* %76, i64 %70, i32 3
  store i32 0, i32* %77, align 4
  %78 = load %struct.VkSubpassDescriptionDepthStencilResolve*, %struct.VkSubpassDescriptionDepthStencilResolve** %13, align 8
  %79 = getelementptr inbounds %struct.VkSubpassDescriptionDepthStencilResolve, %struct.VkSubpassDescriptionDepthStencilResolve* %78, i64 %70, i32 4
  store %struct.VkAttachmentReference2* null, %struct.VkAttachmentReference2** %79, align 8
  %80 = add nuw nsw i64 %70, 1
  %81 = load i32, i32* %9, align 8
  %82 = zext i32 %81 to i64
  %83 = icmp ult i64 %80, %82
  %84 = load %struct.VkSubpassDescriptionDepthStencilResolve*, %struct.VkSubpassDescriptionDepthStencilResolve** %13, align 8
  br i1 %83, label %68, label %85

85:                                               ; preds = %68, %61, %58
  %86 = phi %struct.VkSubpassDescriptionDepthStencilResolve* [ %59, %58 ], [ %67, %61 ], [ %84, %68 ]
  %87 = phi i8* [ %44, %58 ], [ %65, %61 ], [ %65, %68 ]
  %88 = getelementptr inbounds i8, i8* %87, i64 32
  %89 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %43, i64 1, i32 0
  %90 = load i32, i32* %89, align 8
  %91 = getelementptr inbounds %struct.VkSubpassDescriptionDepthStencilResolve, %struct.VkSubpassDescriptionDepthStencilResolve* %86, i64 %35, i32 2
  store i32 %90, i32* %91, align 8
  %92 = getelementptr inbounds %struct.VkSubpassDescriptionDepthStencilResolve, %struct.VkSubpassDescriptionDepthStencilResolve* %49, i64 0, i32 3
  %93 = load i32, i32* %92, align 4
  %94 = load %struct.VkSubpassDescriptionDepthStencilResolve*, %struct.VkSubpassDescriptionDepthStencilResolve** %13, align 8
  %95 = getelementptr inbounds %struct.VkSubpassDescriptionDepthStencilResolve, %struct.VkSubpassDescriptionDepthStencilResolve* %94, i64 %35, i32 3
  store i32 %93, i32* %95, align 4
  %96 = getelementptr inbounds i8, i8* %87, i64 8
  %97 = bitcast i8* %96 to i8**
  store i8* null, i8** %97, align 8
  %98 = load %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2** %51, align 8
  %99 = getelementptr inbounds %struct.VkAttachmentReference2, %struct.VkAttachmentReference2* %98, i64 0, i32 0
  %100 = load i32, i32* %99, align 8
  %101 = bitcast i8* %87 to i32*
  store i32 %100, i32* %101, align 8
  %102 = load %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2** %51, align 8
  %103 = getelementptr inbounds %struct.VkAttachmentReference2, %struct.VkAttachmentReference2* %102, i64 0, i32 2
  %104 = load i32, i32* %103, align 8
  %105 = getelementptr inbounds i8, i8* %87, i64 16
  %106 = bitcast i8* %105 to i32*
  store i32 %104, i32* %106, align 8
  %107 = load %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2** %51, align 8
  %108 = getelementptr inbounds %struct.VkAttachmentReference2, %struct.VkAttachmentReference2* %107, i64 0, i32 3
  %109 = load i32, i32* %108, align 4
  %110 = getelementptr inbounds i8, i8* %87, i64 20
  %111 = bitcast i8* %110 to i32*
  store i32 %109, i32* %111, align 4
  %112 = load %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2** %51, align 8
  %113 = getelementptr inbounds %struct.VkAttachmentReference2, %struct.VkAttachmentReference2* %112, i64 0, i32 4
  %114 = load i32, i32* %113, align 8
  %115 = getelementptr inbounds i8, i8* %87, i64 24
  %116 = bitcast i8* %115 to i32*
  store i32 %114, i32* %116, align 8
  %117 = load %struct.VkSubpassDescriptionDepthStencilResolve*, %struct.VkSubpassDescriptionDepthStencilResolve** %13, align 8
  %118 = getelementptr inbounds %struct.VkSubpassDescriptionDepthStencilResolve, %struct.VkSubpassDescriptionDepthStencilResolve* %117, i64 %35, i32 4
  %119 = bitcast %struct.VkAttachmentReference2** %118 to i8**
  store i8* %87, i8** %119, align 8
  %120 = load i32, i32* %106, align 8
  %121 = load i32*, i32** %19, align 8
  %122 = sext i32 %120 to i64
  %123 = getelementptr inbounds i32, i32* %121, i64 %122
  %124 = load i32, i32* %123, align 4
  %125 = icmp eq i32 %124, -1
  br i1 %125, label %126, label %127

126:                                              ; preds = %85
  store i32 %33, i32* %123, align 4
  br label %127

127:                                              ; preds = %126, %85
  %128 = load i32*, i32** %20, align 8
  %129 = icmp eq i32* %128, null
  br i1 %129, label %137, label %130

130:                                              ; preds = %127
  %131 = getelementptr inbounds i32, i32* %128, i64 %41
  %132 = load i32, i32* %131, align 4
  %133 = load i32*, i32** %21, align 8
  %134 = getelementptr inbounds i32, i32* %133, i64 %122
  %135 = load i32, i32* %134, align 4
  %136 = or i32 %135, %132
  store i32 %136, i32* %134, align 4
  br label %137

137:                                              ; preds = %130, %127, %48, %54, %42
  %138 = phi i8* [ %44, %42 ], [ %44, %54 ], [ %44, %48 ], [ %88, %127 ], [ %88, %130 ]
  %139 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %43, i64 0, i32 1
  %140 = load %struct.VkBaseInStructure*, %struct.VkBaseInStructure** %139, align 8
  %141 = icmp eq %struct.VkBaseInStructure* %140, null
  br i1 %141, label %142, label %42

142:                                              ; preds = %137
  %143 = load i32, i32* %9, align 8
  br label %144

144:                                              ; preds = %142, %30
  %145 = phi i32 [ %31, %30 ], [ %143, %142 ]
  %146 = phi i8* [ %32, %30 ], [ %138, %142 ]
  %147 = add nuw i32 %33, 1
  %148 = icmp ult i32 %147, %145
  br i1 %148, label %30, label %29
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN2vk10RenderPass4initI23VkRenderPassCreateInfo2EEvPKT_PPv(%"class.vk::RenderPass"*, %struct.VkRenderPassCreateInfo2*, i8**) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = load i8*, i8** %2, align 8
  %6 = getelementptr inbounds %struct.VkRenderPassCreateInfo2, %struct.VkRenderPassCreateInfo2* %1, i64 0, i32 5
  %7 = load i32, i32* %6, align 8
  %8 = zext i32 %7 to i64
  %9 = mul nuw nsw i64 %8, 72
  %10 = bitcast i8* %5 to %struct.VkSubpassDescription*
  %11 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 3
  %12 = bitcast %struct.VkSubpassDescription** %11 to i8**
  store i8* %5, i8** %12, align 8
  %13 = getelementptr inbounds %struct.VkRenderPassCreateInfo2, %struct.VkRenderPassCreateInfo2* %1, i64 0, i32 6
  %14 = load %struct.VkSubpassDescription2*, %struct.VkSubpassDescription2** %13, align 8
  %15 = load i32, i32* %6, align 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %42, label %17

17:                                               ; preds = %3
  %18 = zext i32 %15 to i64
  br label %19

19:                                               ; preds = %19, %17
  %20 = phi i64 [ 0, %17 ], [ %40, %19 ]
  %21 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %14, i64 %20, i32 2
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %10, i64 %20, i32 0
  store i32 %22, i32* %23, align 8
  %24 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %14, i64 %20, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %10, i64 %20, i32 1
  store i32 %25, i32* %26, align 4
  %27 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %14, i64 %20, i32 5
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %10, i64 %20, i32 2
  store i32 %28, i32* %29, align 8
  %30 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %10, i64 %20, i32 3
  store %struct.VkAttachmentReference* null, %struct.VkAttachmentReference** %30, align 8
  %31 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %14, i64 %20, i32 7
  %32 = load i32, i32* %31, align 8
  %33 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %10, i64 %20, i32 4
  store i32 %32, i32* %33, align 8
  %34 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %10, i64 %20, i32 5
  %35 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %14, i64 %20, i32 11
  %36 = bitcast %struct.VkAttachmentReference** %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 24, i1 false) #8
  %37 = load i32, i32* %35, align 8
  %38 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %10, i64 %20, i32 8
  store i32 %37, i32* %38, align 8
  %39 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %10, i64 %20, i32 9
  store i32* null, i32** %39, align 8
  %40 = add nuw nsw i64 %20, 1
  %41 = icmp eq i64 %40, %18
  br i1 %41, label %42, label %19

42:                                               ; preds = %19, %3
  %43 = getelementptr inbounds i8, i8* %5, i64 %9
  %44 = bitcast i8* %43 to i32*
  %45 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 2
  %46 = load i32, i32* %45, align 8
  %47 = zext i32 %46 to i64
  %48 = shl nuw nsw i64 %47, 2
  %49 = getelementptr inbounds i8, i8* %43, i64 %48
  %50 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 0
  %51 = load i32, i32* %50, align 8
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %130, label %53

53:                                               ; preds = %42
  %54 = getelementptr inbounds %struct.VkRenderPassCreateInfo2, %struct.VkRenderPassCreateInfo2* %1, i64 0, i32 3
  %55 = load i32, i32* %54, align 4
  %56 = zext i32 %55 to i64
  %57 = mul nuw nsw i64 %56, 36
  %58 = bitcast i8* %49 to %struct.VkAttachmentDescription*
  %59 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 1
  %60 = bitcast %struct.VkAttachmentDescription** %59 to i8**
  store i8* %49, i8** %60, align 8
  %61 = getelementptr inbounds %struct.VkRenderPassCreateInfo2, %struct.VkRenderPassCreateInfo2* %1, i64 0, i32 4
  %62 = load %struct.VkAttachmentDescription2*, %struct.VkAttachmentDescription2** %61, align 8
  %63 = load i32, i32* %54, align 4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %102, label %65

65:                                               ; preds = %53
  %66 = zext i32 %63 to i64
  br label %67

67:                                               ; preds = %67, %65
  %68 = phi i64 [ 0, %65 ], [ %96, %67 ]
  %69 = getelementptr inbounds %struct.VkAttachmentDescription2, %struct.VkAttachmentDescription2* %62, i64 %68, i32 2
  %70 = load i32, i32* %69, align 8
  %71 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %58, i64 %68, i32 0
  store i32 %70, i32* %71, align 4
  %72 = getelementptr inbounds %struct.VkAttachmentDescription2, %struct.VkAttachmentDescription2* %62, i64 %68, i32 3
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %58, i64 %68, i32 1
  store i32 %73, i32* %74, align 4
  %75 = getelementptr inbounds %struct.VkAttachmentDescription2, %struct.VkAttachmentDescription2* %62, i64 %68, i32 4
  %76 = load i32, i32* %75, align 8
  %77 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %58, i64 %68, i32 2
  store i32 %76, i32* %77, align 4
  %78 = getelementptr inbounds %struct.VkAttachmentDescription2, %struct.VkAttachmentDescription2* %62, i64 %68, i32 5
  %79 = load i32, i32* %78, align 4
  %80 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %58, i64 %68, i32 3
  store i32 %79, i32* %80, align 4
  %81 = getelementptr inbounds %struct.VkAttachmentDescription2, %struct.VkAttachmentDescription2* %62, i64 %68, i32 6
  %82 = load i32, i32* %81, align 8
  %83 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %58, i64 %68, i32 4
  store i32 %82, i32* %83, align 4
  %84 = getelementptr inbounds %struct.VkAttachmentDescription2, %struct.VkAttachmentDescription2* %62, i64 %68, i32 7
  %85 = load i32, i32* %84, align 4
  %86 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %58, i64 %68, i32 5
  store i32 %85, i32* %86, align 4
  %87 = getelementptr inbounds %struct.VkAttachmentDescription2, %struct.VkAttachmentDescription2* %62, i64 %68, i32 8
  %88 = load i32, i32* %87, align 8
  %89 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %58, i64 %68, i32 6
  store i32 %88, i32* %89, align 4
  %90 = getelementptr inbounds %struct.VkAttachmentDescription2, %struct.VkAttachmentDescription2* %62, i64 %68, i32 9
  %91 = load i32, i32* %90, align 4
  %92 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %58, i64 %68, i32 7
  store i32 %91, i32* %92, align 4
  %93 = getelementptr inbounds %struct.VkAttachmentDescription2, %struct.VkAttachmentDescription2* %62, i64 %68, i32 10
  %94 = load i32, i32* %93, align 8
  %95 = getelementptr inbounds %struct.VkAttachmentDescription, %struct.VkAttachmentDescription* %58, i64 %68, i32 8
  store i32 %94, i32* %95, align 4
  %96 = add nuw nsw i64 %68, 1
  %97 = icmp eq i64 %96, %66
  br i1 %97, label %98, label %67

98:                                               ; preds = %67
  %99 = load i32, i32* %54, align 4
  %100 = zext i32 %99 to i64
  %101 = shl nuw nsw i64 %100, 2
  br label %102

102:                                              ; preds = %98, %53
  %103 = phi i64 [ %101, %98 ], [ 0, %53 ]
  %104 = getelementptr inbounds i8, i8* %49, i64 %57
  %105 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 7
  %106 = bitcast i32** %105 to i8**
  store i8* %104, i8** %106, align 8
  %107 = getelementptr inbounds i8, i8* %104, i64 %103
  %108 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 9
  %109 = bitcast i32** %108 to i8**
  store i8* %107, i8** %109, align 8
  %110 = load i32, i32* %54, align 4
  %111 = zext i32 %110 to i64
  %112 = shl nuw nsw i64 %111, 2
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  %114 = icmp eq i32 %110, 0
  br i1 %114, label %130, label %115

115:                                              ; preds = %102
  %116 = bitcast i8* %104 to i32*
  store i32 -1, i32* %116, align 4
  %117 = load i32*, i32** %108, align 8
  store i32 0, i32* %117, align 4
  %118 = load i32, i32* %54, align 4
  %119 = icmp ugt i32 %118, 1
  br i1 %119, label %120, label %130

120:                                              ; preds = %115, %120
  %121 = phi i64 [ %126, %120 ], [ 1, %115 ]
  %122 = load i32*, i32** %105, align 8
  %123 = getelementptr inbounds i32, i32* %122, i64 %121
  store i32 -1, i32* %123, align 4
  %124 = load i32*, i32** %108, align 8
  %125 = getelementptr inbounds i32, i32* %124, i64 %121
  store i32 0, i32* %125, align 4
  %126 = add nuw nsw i64 %121, 1
  %127 = load i32, i32* %54, align 4
  %128 = zext i32 %127 to i64
  %129 = icmp ult i64 %126, %128
  br i1 %129, label %120, label %130

130:                                              ; preds = %120, %115, %102, %42
  %131 = phi i8* [ %49, %42 ], [ %113, %102 ], [ %113, %115 ], [ %113, %120 ]
  %132 = getelementptr inbounds %struct.VkRenderPassCreateInfo2, %struct.VkRenderPassCreateInfo2* %1, i64 0, i32 1
  %133 = bitcast i8** %132 to %struct.VkBaseInStructure**
  %134 = load %struct.VkBaseInStructure*, %struct.VkBaseInStructure** %133, align 8
  %135 = icmp eq %struct.VkBaseInStructure* %134, null
  br i1 %135, label %181, label %136

136:                                              ; preds = %130
  %137 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  %138 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %139 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %138, i64 0, i32 1, i32 0
  %140 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %141 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 8
  %142 = bitcast i32** %141 to i8**
  br label %143

143:                                              ; preds = %136, %177
  %144 = phi %struct.VkBaseInStructure* [ %134, %136 ], [ %179, %177 ]
  %145 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %144, i64 0, i32 0
  %146 = load i32, i32* %145, align 8
  %147 = icmp eq i32 %146, 1000053000
  br i1 %147, label %148, label %167

148:                                              ; preds = %143
  %149 = load i32, i32* %6, align 8
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %177, label %151

151:                                              ; preds = %148
  %152 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %144, i64 1, i32 1
  %153 = bitcast %struct.VkBaseInStructure** %152 to i32**
  br label %154

154:                                              ; preds = %151, %162
  %155 = phi i64 [ 0, %151 ], [ %163, %162 ]
  %156 = load i32*, i32** %153, align 8
  %157 = getelementptr inbounds i32, i32* %156, i64 %155
  %158 = load i32, i32* %157, align 4
  %159 = getelementptr inbounds i32, i32* %44, i64 %155
  store i32 %158, i32* %159, align 4
  %160 = icmp eq i32 %158, 0
  br i1 %160, label %162, label %161

161:                                              ; preds = %154
  store i8* %43, i8** %142, align 8
  br label %162

162:                                              ; preds = %154, %161
  %163 = add nuw nsw i64 %155, 1
  %164 = load i32, i32* %6, align 8
  %165 = zext i32 %164 to i64
  %166 = icmp ult i64 %163, %165
  br i1 %166, label %154, label %177

167:                                              ; preds = %143
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %137) #8
  call void @_ZN2vk9StringifyE15VkStructureType(%"class.std::__1::basic_string"* nonnull sret %4, i32 %146) #9
  %168 = load i8, i8* %139, align 1
  %169 = icmp slt i8 %168, 0
  %170 = load i8*, i8** %140, align 8
  %171 = select i1 %169, i8* %170, i8* %137
  call void (i8*, ...) @_ZN2sw4warnEPKcz(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0), i32 263, i8* %171) #9
  %172 = load i8, i8* %139, align 1
  %173 = icmp slt i8 %172, 0
  br i1 %173, label %174, label %176

174:                                              ; preds = %167
  %175 = load i8*, i8** %140, align 8
  call void @_ZdlPv(i8* %175) #10
  br label %176

176:                                              ; preds = %167, %174
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %137) #8
  br label %177

177:                                              ; preds = %162, %148, %176
  %178 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %144, i64 0, i32 1
  %179 = load %struct.VkBaseInStructure*, %struct.VkBaseInStructure** %178, align 8
  %180 = icmp eq %struct.VkBaseInStructure* %179, null
  br i1 %180, label %181, label %143

181:                                              ; preds = %177, %130
  %182 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 8
  %183 = load i32*, i32** %182, align 8
  %184 = icmp eq i32* %183, null
  %185 = load i32, i32* %6, align 8
  br i1 %184, label %186, label %215

186:                                              ; preds = %181
  %187 = icmp eq i32 %185, 0
  br i1 %187, label %221, label %188

188:                                              ; preds = %186, %188
  %189 = phi i64 [ %194, %188 ], [ 0, %186 ]
  %190 = load %struct.VkSubpassDescription2*, %struct.VkSubpassDescription2** %13, align 8
  %191 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %190, i64 %189, i32 4
  %192 = load i32, i32* %191, align 8
  %193 = getelementptr inbounds i32, i32* %44, i64 %189
  store i32 %192, i32* %193, align 4
  %194 = add nuw nsw i64 %189, 1
  %195 = load i32, i32* %6, align 8
  %196 = zext i32 %195 to i64
  %197 = icmp ult i64 %194, %196
  br i1 %197, label %188, label %198

198:                                              ; preds = %188
  %199 = icmp eq i32 %195, 0
  br i1 %199, label %221, label %200

200:                                              ; preds = %198
  %201 = bitcast i32** %182 to i8**
  br label %202

202:                                              ; preds = %200, %210
  %203 = phi i32 [ %195, %200 ], [ %211, %210 ]
  %204 = phi i64 [ 0, %200 ], [ %212, %210 ]
  %205 = getelementptr inbounds i32, i32* %44, i64 %204
  %206 = load i32, i32* %205, align 4
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %210, label %208

208:                                              ; preds = %202
  store i8* %43, i8** %201, align 8
  %209 = load i32, i32* %6, align 8
  br label %210

210:                                              ; preds = %202, %208
  %211 = phi i32 [ %203, %202 ], [ %209, %208 ]
  %212 = add nuw nsw i64 %204, 1
  %213 = zext i32 %211 to i64
  %214 = icmp ult i64 %212, %213
  br i1 %214, label %202, label %215

215:                                              ; preds = %210, %181
  %216 = phi i32 [ %185, %181 ], [ %211, %210 ]
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %221, label %218

218:                                              ; preds = %215
  %219 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 7
  %220 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 9
  br label %226

221:                                              ; preds = %531, %186, %198, %215
  %222 = phi i8* [ %131, %215 ], [ %131, %198 ], [ %131, %186 ], [ %532, %531 ]
  %223 = getelementptr inbounds %struct.VkRenderPassCreateInfo2, %struct.VkRenderPassCreateInfo2* %1, i64 0, i32 7
  %224 = load i32, i32* %223, align 8
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %577, label %536

226:                                              ; preds = %218, %531
  %227 = phi i8* [ %131, %218 ], [ %532, %531 ]
  %228 = phi i32 [ 0, %218 ], [ %533, %531 ]
  %229 = load %struct.VkSubpassDescription2*, %struct.VkSubpassDescription2** %13, align 8
  %230 = zext i32 %228 to i64
  %231 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %229, i64 %230, i32 5
  %232 = load i32, i32* %231, align 4
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %301, label %234

234:                                              ; preds = %226
  %235 = zext i32 %232 to i64
  %236 = shl nuw nsw i64 %235, 3
  %237 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %238 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %237, i64 %230, i32 3
  %239 = bitcast %struct.VkAttachmentReference** %238 to i8**
  store i8* %227, i8** %239, align 8
  %240 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %241 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %240, i64 %230, i32 3
  %242 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %241, align 8
  %243 = load %struct.VkSubpassDescription2*, %struct.VkSubpassDescription2** %13, align 8
  %244 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %243, i64 %230, i32 6
  %245 = load %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2** %244, align 8
  %246 = load i32, i32* %231, align 4
  %247 = icmp eq i32 %246, 0
  br i1 %247, label %262, label %248

248:                                              ; preds = %234
  %249 = zext i32 %246 to i64
  br label %250

250:                                              ; preds = %250, %248
  %251 = phi i64 [ 0, %248 ], [ %258, %250 ]
  %252 = getelementptr inbounds %struct.VkAttachmentReference2, %struct.VkAttachmentReference2* %245, i64 %251, i32 2
  %253 = load i32, i32* %252, align 8
  %254 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %242, i64 %251, i32 0
  store i32 %253, i32* %254, align 4
  %255 = getelementptr inbounds %struct.VkAttachmentReference2, %struct.VkAttachmentReference2* %245, i64 %251, i32 3
  %256 = load i32, i32* %255, align 4
  %257 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %242, i64 %251, i32 1
  store i32 %256, i32* %257, align 4
  %258 = add nuw nsw i64 %251, 1
  %259 = icmp eq i64 %258, %249
  br i1 %259, label %260, label %250

260:                                              ; preds = %250
  %261 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  br label %262

262:                                              ; preds = %260, %234
  %263 = phi %struct.VkSubpassDescription* [ %261, %260 ], [ %240, %234 ]
  %264 = getelementptr inbounds i8, i8* %227, i64 %236
  %265 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %263, i64 %230, i32 2
  %266 = load i32, i32* %265, align 8
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %301, label %268

268:                                              ; preds = %262
  %269 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %229, i64 %230, i32 6
  %270 = sext i32 %228 to i64
  br label %271

271:                                              ; preds = %268, %294
  %272 = phi i64 [ 0, %268 ], [ %295, %294 ]
  %273 = load %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2** %269, align 8
  %274 = getelementptr inbounds %struct.VkAttachmentReference2, %struct.VkAttachmentReference2* %273, i64 %272, i32 2
  %275 = load i32, i32* %274, align 8
  %276 = icmp eq i32 %275, -1
  br i1 %276, label %294, label %277

277:                                              ; preds = %271
  %278 = load i32*, i32** %219, align 8
  %279 = sext i32 %275 to i64
  %280 = getelementptr inbounds i32, i32* %278, i64 %279
  %281 = load i32, i32* %280, align 4
  %282 = icmp eq i32 %281, -1
  br i1 %282, label %283, label %284

283:                                              ; preds = %277
  store i32 %228, i32* %280, align 4
  br label %284

284:                                              ; preds = %283, %277
  %285 = load i32*, i32** %182, align 8
  %286 = icmp eq i32* %285, null
  br i1 %286, label %294, label %287

287:                                              ; preds = %284
  %288 = getelementptr inbounds i32, i32* %285, i64 %270
  %289 = load i32, i32* %288, align 4
  %290 = load i32*, i32** %220, align 8
  %291 = getelementptr inbounds i32, i32* %290, i64 %279
  %292 = load i32, i32* %291, align 4
  %293 = or i32 %292, %289
  store i32 %293, i32* %291, align 4
  br label %294

294:                                              ; preds = %287, %284, %271
  %295 = add nuw nsw i64 %272, 1
  %296 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %297 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %296, i64 %230, i32 2
  %298 = load i32, i32* %297, align 8
  %299 = zext i32 %298 to i64
  %300 = icmp ult i64 %295, %299
  br i1 %300, label %271, label %301

301:                                              ; preds = %294, %262, %226
  %302 = phi i8* [ %227, %226 ], [ %264, %262 ], [ %264, %294 ]
  %303 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %229, i64 %230, i32 7
  %304 = load i32, i32* %303, align 8
  %305 = icmp eq i32 %304, 0
  br i1 %305, label %422, label %306

306:                                              ; preds = %301
  %307 = zext i32 %304 to i64
  %308 = shl nuw nsw i64 %307, 3
  %309 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %310 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %309, i64 %230, i32 5
  %311 = bitcast %struct.VkAttachmentReference** %310 to i8**
  store i8* %302, i8** %311, align 8
  %312 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %313 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %312, i64 %230, i32 5
  %314 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %313, align 8
  %315 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %229, i64 %230, i32 8
  %316 = load %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2** %315, align 8
  %317 = load i32, i32* %303, align 8
  %318 = icmp eq i32 %317, 0
  br i1 %318, label %331, label %319

319:                                              ; preds = %306
  %320 = zext i32 %317 to i64
  br label %321

321:                                              ; preds = %321, %319
  %322 = phi i64 [ 0, %319 ], [ %329, %321 ]
  %323 = getelementptr inbounds %struct.VkAttachmentReference2, %struct.VkAttachmentReference2* %316, i64 %322, i32 2
  %324 = load i32, i32* %323, align 8
  %325 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %314, i64 %322, i32 0
  store i32 %324, i32* %325, align 4
  %326 = getelementptr inbounds %struct.VkAttachmentReference2, %struct.VkAttachmentReference2* %316, i64 %322, i32 3
  %327 = load i32, i32* %326, align 4
  %328 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %314, i64 %322, i32 1
  store i32 %327, i32* %328, align 4
  %329 = add nuw nsw i64 %322, 1
  %330 = icmp eq i64 %329, %320
  br i1 %330, label %331, label %321

331:                                              ; preds = %321, %306
  %332 = getelementptr inbounds i8, i8* %302, i64 %308
  %333 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %229, i64 %230, i32 9
  %334 = load %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2** %333, align 8
  %335 = icmp eq %struct.VkAttachmentReference2* %334, null
  br i1 %335, label %360, label %336

336:                                              ; preds = %331
  %337 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %338 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %337, i64 %230, i32 6
  %339 = bitcast %struct.VkAttachmentReference** %338 to i8**
  store i8* %332, i8** %339, align 8
  %340 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %341 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %340, i64 %230, i32 6
  %342 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %341, align 8
  %343 = load %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2** %333, align 8
  %344 = load i32, i32* %303, align 8
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %358, label %346

346:                                              ; preds = %336
  %347 = zext i32 %344 to i64
  br label %348

348:                                              ; preds = %348, %346
  %349 = phi i64 [ 0, %346 ], [ %356, %348 ]
  %350 = getelementptr inbounds %struct.VkAttachmentReference2, %struct.VkAttachmentReference2* %343, i64 %349, i32 2
  %351 = load i32, i32* %350, align 8
  %352 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %342, i64 %349, i32 0
  store i32 %351, i32* %352, align 4
  %353 = getelementptr inbounds %struct.VkAttachmentReference2, %struct.VkAttachmentReference2* %343, i64 %349, i32 3
  %354 = load i32, i32* %353, align 4
  %355 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %342, i64 %349, i32 1
  store i32 %354, i32* %355, align 4
  %356 = add nuw nsw i64 %349, 1
  %357 = icmp eq i64 %356, %347
  br i1 %357, label %358, label %348

358:                                              ; preds = %348, %336
  %359 = getelementptr inbounds i8, i8* %332, i64 %308
  br label %360

360:                                              ; preds = %331, %358
  %361 = phi i8* [ %359, %358 ], [ %332, %331 ]
  %362 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %363 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %362, i64 %230, i32 4
  %364 = load i32, i32* %363, align 8
  %365 = icmp eq i32 %364, 0
  br i1 %365, label %422, label %366

366:                                              ; preds = %360
  %367 = sext i32 %228 to i64
  br label %368

368:                                              ; preds = %366, %415
  %369 = phi i64 [ 0, %366 ], [ %416, %415 ]
  %370 = load %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2** %315, align 8
  %371 = getelementptr inbounds %struct.VkAttachmentReference2, %struct.VkAttachmentReference2* %370, i64 %369, i32 2
  %372 = load i32, i32* %371, align 8
  %373 = icmp eq i32 %372, -1
  br i1 %373, label %391, label %374

374:                                              ; preds = %368
  %375 = load i32*, i32** %219, align 8
  %376 = sext i32 %372 to i64
  %377 = getelementptr inbounds i32, i32* %375, i64 %376
  %378 = load i32, i32* %377, align 4
  %379 = icmp eq i32 %378, -1
  br i1 %379, label %380, label %381

380:                                              ; preds = %374
  store i32 %228, i32* %377, align 4
  br label %381

381:                                              ; preds = %380, %374
  %382 = load i32*, i32** %182, align 8
  %383 = icmp eq i32* %382, null
  br i1 %383, label %391, label %384

384:                                              ; preds = %381
  %385 = getelementptr inbounds i32, i32* %382, i64 %367
  %386 = load i32, i32* %385, align 4
  %387 = load i32*, i32** %220, align 8
  %388 = getelementptr inbounds i32, i32* %387, i64 %376
  %389 = load i32, i32* %388, align 4
  %390 = or i32 %389, %386
  store i32 %390, i32* %388, align 4
  br label %391

391:                                              ; preds = %384, %381, %368
  %392 = load %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2** %333, align 8
  %393 = icmp eq %struct.VkAttachmentReference2* %392, null
  br i1 %393, label %415, label %394

394:                                              ; preds = %391
  %395 = getelementptr inbounds %struct.VkAttachmentReference2, %struct.VkAttachmentReference2* %392, i64 %369, i32 2
  %396 = load i32, i32* %395, align 8
  %397 = icmp eq i32 %396, -1
  br i1 %397, label %415, label %398

398:                                              ; preds = %394
  %399 = load i32*, i32** %219, align 8
  %400 = sext i32 %396 to i64
  %401 = getelementptr inbounds i32, i32* %399, i64 %400
  %402 = load i32, i32* %401, align 4
  %403 = icmp eq i32 %402, -1
  br i1 %403, label %404, label %405

404:                                              ; preds = %398
  store i32 %228, i32* %401, align 4
  br label %405

405:                                              ; preds = %404, %398
  %406 = load i32*, i32** %182, align 8
  %407 = icmp eq i32* %406, null
  br i1 %407, label %415, label %408

408:                                              ; preds = %405
  %409 = getelementptr inbounds i32, i32* %406, i64 %367
  %410 = load i32, i32* %409, align 4
  %411 = load i32*, i32** %220, align 8
  %412 = getelementptr inbounds i32, i32* %411, i64 %400
  %413 = load i32, i32* %412, align 4
  %414 = or i32 %413, %410
  store i32 %414, i32* %412, align 4
  br label %415

415:                                              ; preds = %408, %405, %394, %391
  %416 = add nuw nsw i64 %369, 1
  %417 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %418 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %417, i64 %230, i32 4
  %419 = load i32, i32* %418, align 8
  %420 = zext i32 %419 to i64
  %421 = icmp ult i64 %416, %420
  br i1 %421, label %368, label %422

422:                                              ; preds = %415, %360, %301
  %423 = phi i8* [ %302, %301 ], [ %361, %360 ], [ %361, %415 ]
  %424 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %229, i64 %230, i32 10
  %425 = load %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2** %424, align 8
  %426 = icmp eq %struct.VkAttachmentReference2* %425, null
  br i1 %426, label %464, label %427

427:                                              ; preds = %422
  %428 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %429 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %428, i64 %230, i32 7
  %430 = bitcast %struct.VkAttachmentReference** %429 to i8**
  store i8* %423, i8** %430, align 8
  %431 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %432 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %431, i64 %230, i32 7
  %433 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %432, align 8
  %434 = load %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2** %424, align 8
  %435 = getelementptr inbounds %struct.VkAttachmentReference2, %struct.VkAttachmentReference2* %434, i64 0, i32 2
  %436 = load i32, i32* %435, align 8
  %437 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %433, i64 0, i32 0
  store i32 %436, i32* %437, align 4
  %438 = getelementptr inbounds %struct.VkAttachmentReference2, %struct.VkAttachmentReference2* %434, i64 0, i32 3
  %439 = load i32, i32* %438, align 4
  %440 = getelementptr inbounds %struct.VkAttachmentReference, %struct.VkAttachmentReference* %433, i64 0, i32 1
  store i32 %439, i32* %440, align 4
  %441 = getelementptr inbounds i8, i8* %423, i64 8
  %442 = load %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2** %424, align 8
  %443 = getelementptr inbounds %struct.VkAttachmentReference2, %struct.VkAttachmentReference2* %442, i64 0, i32 2
  %444 = load i32, i32* %443, align 8
  %445 = icmp eq i32 %444, -1
  br i1 %445, label %464, label %446

446:                                              ; preds = %427
  %447 = load i32*, i32** %219, align 8
  %448 = sext i32 %444 to i64
  %449 = getelementptr inbounds i32, i32* %447, i64 %448
  %450 = load i32, i32* %449, align 4
  %451 = icmp eq i32 %450, -1
  br i1 %451, label %452, label %453

452:                                              ; preds = %446
  store i32 %228, i32* %449, align 4
  br label %453

453:                                              ; preds = %452, %446
  %454 = load i32*, i32** %182, align 8
  %455 = icmp eq i32* %454, null
  br i1 %455, label %464, label %456

456:                                              ; preds = %453
  %457 = sext i32 %228 to i64
  %458 = getelementptr inbounds i32, i32* %454, i64 %457
  %459 = load i32, i32* %458, align 4
  %460 = load i32*, i32** %220, align 8
  %461 = getelementptr inbounds i32, i32* %460, i64 %448
  %462 = load i32, i32* %461, align 4
  %463 = or i32 %462, %459
  store i32 %463, i32* %461, align 4
  br label %464

464:                                              ; preds = %456, %453, %427, %422
  %465 = phi i8* [ %441, %427 ], [ %423, %422 ], [ %441, %453 ], [ %441, %456 ]
  %466 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %229, i64 %230, i32 11
  %467 = load i32, i32* %466, align 8
  %468 = icmp eq i32 %467, 0
  br i1 %468, label %531, label %469

469:                                              ; preds = %464
  %470 = zext i32 %467 to i64
  %471 = shl nuw nsw i64 %470, 2
  %472 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %473 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %472, i64 %230, i32 9
  %474 = bitcast i32** %473 to i8**
  store i8* %465, i8** %474, align 8
  %475 = load i32, i32* %466, align 8
  %476 = icmp eq i32 %475, 0
  br i1 %476, label %477, label %486

477:                                              ; preds = %486, %469
  %478 = getelementptr inbounds i8, i8* %465, i64 %471
  %479 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %480 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %479, i64 %230, i32 8
  %481 = load i32, i32* %480, align 8
  %482 = icmp eq i32 %481, 0
  br i1 %482, label %531, label %483

483:                                              ; preds = %477
  %484 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %229, i64 %230, i32 12
  %485 = sext i32 %228 to i64
  br label %501

486:                                              ; preds = %469, %486
  %487 = phi i64 [ %497, %486 ], [ 0, %469 ]
  %488 = load %struct.VkSubpassDescription2*, %struct.VkSubpassDescription2** %13, align 8
  %489 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %488, i64 %230, i32 12
  %490 = load i32*, i32** %489, align 8
  %491 = getelementptr inbounds i32, i32* %490, i64 %487
  %492 = load i32, i32* %491, align 4
  %493 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %494 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %493, i64 %230, i32 9
  %495 = load i32*, i32** %494, align 8
  %496 = getelementptr inbounds i32, i32* %495, i64 %487
  store i32 %492, i32* %496, align 4
  %497 = add nuw nsw i64 %487, 1
  %498 = load i32, i32* %466, align 8
  %499 = zext i32 %498 to i64
  %500 = icmp ult i64 %497, %499
  br i1 %500, label %486, label %477

501:                                              ; preds = %483, %524
  %502 = phi i64 [ 0, %483 ], [ %525, %524 ]
  %503 = load i32*, i32** %484, align 8
  %504 = getelementptr inbounds i32, i32* %503, i64 %502
  %505 = load i32, i32* %504, align 4
  %506 = icmp eq i32 %505, -1
  br i1 %506, label %524, label %507

507:                                              ; preds = %501
  %508 = load i32*, i32** %219, align 8
  %509 = sext i32 %505 to i64
  %510 = getelementptr inbounds i32, i32* %508, i64 %509
  %511 = load i32, i32* %510, align 4
  %512 = icmp eq i32 %511, -1
  br i1 %512, label %513, label %514

513:                                              ; preds = %507
  store i32 %228, i32* %510, align 4
  br label %514

514:                                              ; preds = %513, %507
  %515 = load i32*, i32** %182, align 8
  %516 = icmp eq i32* %515, null
  br i1 %516, label %524, label %517

517:                                              ; preds = %514
  %518 = getelementptr inbounds i32, i32* %515, i64 %485
  %519 = load i32, i32* %518, align 4
  %520 = load i32*, i32** %220, align 8
  %521 = getelementptr inbounds i32, i32* %520, i64 %509
  %522 = load i32, i32* %521, align 4
  %523 = or i32 %522, %519
  store i32 %523, i32* %521, align 4
  br label %524

524:                                              ; preds = %517, %514, %501
  %525 = add nuw nsw i64 %502, 1
  %526 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %11, align 8
  %527 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %526, i64 %230, i32 8
  %528 = load i32, i32* %527, align 8
  %529 = zext i32 %528 to i64
  %530 = icmp ult i64 %525, %529
  br i1 %530, label %501, label %531

531:                                              ; preds = %524, %477, %464
  %532 = phi i8* [ %465, %464 ], [ %478, %477 ], [ %478, %524 ]
  %533 = add nuw i32 %228, 1
  %534 = load i32, i32* %6, align 8
  %535 = icmp ult i32 %533, %534
  br i1 %535, label %226, label %221

536:                                              ; preds = %221
  %537 = bitcast i8* %222 to %struct.VkSubpassDependency*
  %538 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 6
  %539 = bitcast %struct.VkSubpassDependency** %538 to i8**
  store i8* %222, i8** %539, align 8
  %540 = getelementptr inbounds %struct.VkRenderPassCreateInfo2, %struct.VkRenderPassCreateInfo2* %1, i64 0, i32 8
  %541 = load %struct.VkSubpassDependency2*, %struct.VkSubpassDependency2** %540, align 8
  %542 = load i32, i32* %223, align 8
  %543 = icmp eq i32 %542, 0
  br i1 %543, label %571, label %544

544:                                              ; preds = %536
  %545 = zext i32 %542 to i64
  br label %546

546:                                              ; preds = %546, %544
  %547 = phi i64 [ 0, %544 ], [ %569, %546 ]
  %548 = getelementptr inbounds %struct.VkSubpassDependency2, %struct.VkSubpassDependency2* %541, i64 %547, i32 2
  %549 = load i32, i32* %548, align 8
  %550 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %537, i64 %547, i32 0
  store i32 %549, i32* %550, align 4
  %551 = getelementptr inbounds %struct.VkSubpassDependency2, %struct.VkSubpassDependency2* %541, i64 %547, i32 3
  %552 = load i32, i32* %551, align 4
  %553 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %537, i64 %547, i32 1
  store i32 %552, i32* %553, align 4
  %554 = getelementptr inbounds %struct.VkSubpassDependency2, %struct.VkSubpassDependency2* %541, i64 %547, i32 4
  %555 = load i32, i32* %554, align 8
  %556 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %537, i64 %547, i32 2
  store i32 %555, i32* %556, align 4
  %557 = getelementptr inbounds %struct.VkSubpassDependency2, %struct.VkSubpassDependency2* %541, i64 %547, i32 5
  %558 = load i32, i32* %557, align 4
  %559 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %537, i64 %547, i32 3
  store i32 %558, i32* %559, align 4
  %560 = getelementptr inbounds %struct.VkSubpassDependency2, %struct.VkSubpassDependency2* %541, i64 %547, i32 6
  %561 = load i32, i32* %560, align 8
  %562 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %537, i64 %547, i32 4
  store i32 %561, i32* %562, align 4
  %563 = getelementptr inbounds %struct.VkSubpassDependency2, %struct.VkSubpassDependency2* %541, i64 %547, i32 7
  %564 = load i32, i32* %563, align 4
  %565 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %537, i64 %547, i32 5
  store i32 %564, i32* %565, align 4
  %566 = getelementptr inbounds %struct.VkSubpassDependency2, %struct.VkSubpassDependency2* %541, i64 %547, i32 8
  %567 = load i32, i32* %566, align 8
  %568 = getelementptr inbounds %struct.VkSubpassDependency, %struct.VkSubpassDependency* %537, i64 %547, i32 6
  store i32 %567, i32* %568, align 4
  %569 = add nuw nsw i64 %547, 1
  %570 = icmp eq i64 %569, %545
  br i1 %570, label %571, label %546

571:                                              ; preds = %546, %536
  %572 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 5
  %573 = load i32, i32* %572, align 8
  %574 = zext i32 %573 to i64
  %575 = mul nuw nsw i64 %574, 28
  %576 = getelementptr inbounds i8, i8* %222, i64 %575
  br label %577

577:                                              ; preds = %221, %571
  %578 = phi i8* [ %576, %571 ], [ %222, %221 ]
  store i8* %578, i8** %2, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable
define hidden void @_ZN2vk10RenderPass12MarkFirstUseEii(%"class.vk::RenderPass"* nocapture readonly, i32, i32) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 7
  %5 = load i32*, i32** %4, align 8
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds i32, i32* %5, i64 %6
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, -1
  br i1 %9, label %10, label %11

10:                                               ; preds = %3
  store i32 %2, i32* %7, align 4
  br label %11

11:                                               ; preds = %10, %3
  %12 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 8
  %13 = load i32*, i32** %12, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %24, label %15

15:                                               ; preds = %11
  %16 = sext i32 %2 to i64
  %17 = getelementptr inbounds i32, i32* %13, i64 %16
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 9
  %20 = load i32*, i32** %19, align 8
  %21 = getelementptr inbounds i32, i32* %20, i64 %6
  %22 = load i32, i32* %21, align 4
  %23 = or i32 %22, %18
  store i32 %23, i32* %21, align 4
  br label %24

24:                                               ; preds = %11, %15
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2vk10RenderPass7destroyEPK21VkAllocationCallbacks(%"class.vk::RenderPass"* nocapture readonly, %struct.VkAllocationCallbacks*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.vk::RenderPass", %"class.vk::RenderPass"* %0, i64 0, i32 3
  %4 = bitcast %struct.VkSubpassDescription** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @_ZN2vk10deallocateEPvPK21VkAllocationCallbacks(i8* %5, %struct.VkAllocationCallbacks* %1) #9
  ret void
}

; Function Attrs: optsize
declare void @_ZN2vk10deallocateEPvPK21VkAllocationCallbacks(i8*, %struct.VkAllocationCallbacks*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i64 @_ZN2vk10RenderPass29ComputeRequiredAllocationSizeEPK22VkRenderPassCreateInfo(%struct.VkRenderPassCreateInfo* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = mul nuw nsw i64 %4, 44
  %6 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %0, i64 0, i32 5
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %42, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %0, i64 0, i32 6
  %11 = load %struct.VkSubpassDescription*, %struct.VkSubpassDescription** %10, align 8
  %12 = zext i32 %7 to i64
  br label %13

13:                                               ; preds = %13, %9
  %14 = phi i64 [ 0, %9 ], [ %40, %13 ]
  %15 = phi i64 [ 0, %9 ], [ %39, %13 ]
  %16 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %11, i64 %14, i32 2
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %11, i64 %14, i32 4
  %19 = load i32, i32* %18, align 8
  %20 = add i32 %19, %17
  %21 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %11, i64 %14, i32 6
  %22 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %21, align 8
  %23 = icmp eq %struct.VkAttachmentReference* %22, null
  %24 = select i1 %23, i32 0, i32 %19
  %25 = add i32 %20, %24
  %26 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %11, i64 %14, i32 7
  %27 = load %struct.VkAttachmentReference*, %struct.VkAttachmentReference** %26, align 8
  %28 = icmp ne %struct.VkAttachmentReference* %27, null
  %29 = zext i1 %28 to i32
  %30 = add i32 %25, %29
  %31 = zext i32 %30 to i64
  %32 = shl nuw nsw i64 %31, 3
  %33 = getelementptr inbounds %struct.VkSubpassDescription, %struct.VkSubpassDescription* %11, i64 %14, i32 8
  %34 = load i32, i32* %33, align 8
  %35 = zext i32 %34 to i64
  %36 = shl nuw nsw i64 %35, 2
  %37 = add i64 %15, 76
  %38 = add i64 %37, %36
  %39 = add i64 %38, %32
  %40 = add nuw nsw i64 %14, 1
  %41 = icmp eq i64 %40, %12
  br i1 %41, label %42, label %13

42:                                               ; preds = %13, %1
  %43 = phi i64 [ 0, %1 ], [ %39, %13 ]
  %44 = getelementptr inbounds %struct.VkRenderPassCreateInfo, %struct.VkRenderPassCreateInfo* %0, i64 0, i32 7
  %45 = load i32, i32* %44, align 8
  %46 = zext i32 %45 to i64
  %47 = mul nuw nsw i64 %46, 28
  %48 = add i64 %43, %5
  %49 = add i64 %48, %47
  ret i64 %49
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i64 @_ZN2vk10RenderPass29ComputeRequiredAllocationSizeEPK23VkRenderPassCreateInfo2(%struct.VkRenderPassCreateInfo2* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %struct.VkRenderPassCreateInfo2, %struct.VkRenderPassCreateInfo2* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 4
  %4 = zext i32 %3 to i64
  %5 = mul nuw nsw i64 %4, 44
  %6 = getelementptr inbounds %struct.VkRenderPassCreateInfo2, %struct.VkRenderPassCreateInfo2* %0, i64 0, i32 5
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %15

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.VkRenderPassCreateInfo2, %struct.VkRenderPassCreateInfo2* %0, i64 0, i32 7
  %11 = load i32, i32* %10, align 8
  %12 = zext i32 %11 to i64
  %13 = mul nuw nsw i64 %12, 28
  %14 = add nuw nsw i64 %5, %13
  br label %60

15:                                               ; preds = %1
  %16 = getelementptr inbounds %struct.VkRenderPassCreateInfo2, %struct.VkRenderPassCreateInfo2* %0, i64 0, i32 6
  %17 = load %struct.VkSubpassDescription2*, %struct.VkSubpassDescription2** %16, align 8
  %18 = zext i32 %7 to i64
  br label %19

19:                                               ; preds = %19, %15
  %20 = phi i64 [ 0, %15 ], [ %46, %19 ]
  %21 = phi i64 [ 0, %15 ], [ %45, %19 ]
  %22 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %17, i64 %20, i32 5
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %17, i64 %20, i32 7
  %25 = load i32, i32* %24, align 8
  %26 = add i32 %25, %23
  %27 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %17, i64 %20, i32 9
  %28 = load %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2** %27, align 8
  %29 = icmp eq %struct.VkAttachmentReference2* %28, null
  %30 = select i1 %29, i32 0, i32 %25
  %31 = add i32 %26, %30
  %32 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %17, i64 %20, i32 10
  %33 = load %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2** %32, align 8
  %34 = icmp ne %struct.VkAttachmentReference2* %33, null
  %35 = zext i1 %34 to i32
  %36 = add i32 %31, %35
  %37 = zext i32 %36 to i64
  %38 = shl nuw nsw i64 %37, 3
  %39 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %17, i64 %20, i32 11
  %40 = load i32, i32* %39, align 8
  %41 = zext i32 %40 to i64
  %42 = shl nuw nsw i64 %41, 2
  %43 = add i64 %21, 76
  %44 = add i64 %43, %42
  %45 = add i64 %44, %38
  %46 = add nuw nsw i64 %20, 1
  %47 = icmp eq i64 %46, %18
  br i1 %47, label %48, label %19

48:                                               ; preds = %19
  %49 = getelementptr inbounds %struct.VkRenderPassCreateInfo2, %struct.VkRenderPassCreateInfo2* %0, i64 0, i32 7
  %50 = load i32, i32* %49, align 8
  %51 = zext i32 %50 to i64
  %52 = mul nuw nsw i64 %51, 28
  %53 = add i64 %45, %5
  %54 = add i64 %53, %52
  br i1 %8, label %60, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds %struct.VkRenderPassCreateInfo2, %struct.VkRenderPassCreateInfo2* %0, i64 0, i32 6
  %57 = load %struct.VkSubpassDescription2*, %struct.VkSubpassDescription2** %56, align 8
  %58 = zext i32 %7 to i64
  %59 = shl nuw nsw i64 %58, 5
  br label %62

60:                                               ; preds = %99, %9, %48
  %61 = phi i64 [ %54, %48 ], [ %14, %9 ], [ %101, %99 ]
  ret i64 %61

62:                                               ; preds = %99, %55
  %63 = phi i64 [ 0, %55 ], [ %102, %99 ]
  %64 = phi i64 [ %54, %55 ], [ %101, %99 ]
  %65 = phi i8 [ 0, %55 ], [ %100, %99 ]
  %66 = getelementptr inbounds %struct.VkSubpassDescription2, %struct.VkSubpassDescription2* %57, i64 %63, i32 1
  %67 = bitcast i8** %66 to %struct.VkBaseInStructure**
  %68 = load %struct.VkBaseInStructure*, %struct.VkBaseInStructure** %67, align 8
  %69 = icmp eq %struct.VkBaseInStructure* %68, null
  br i1 %69, label %99, label %70

70:                                               ; preds = %62, %93
  %71 = phi %struct.VkBaseInStructure* [ %97, %93 ], [ %68, %62 ]
  %72 = phi i64 [ %95, %93 ], [ %64, %62 ]
  %73 = phi i8 [ %94, %93 ], [ %65, %62 ]
  %74 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %71, i64 0, i32 0
  %75 = load i32, i32* %74, align 8
  %76 = icmp eq i32 %75, 1000199001
  br i1 %76, label %77, label %93

77:                                               ; preds = %70
  %78 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %71, i64 1, i32 1
  %79 = bitcast %struct.VkBaseInStructure** %78 to %struct.VkAttachmentReference2**
  %80 = load %struct.VkAttachmentReference2*, %struct.VkAttachmentReference2** %79, align 8
  %81 = icmp eq %struct.VkAttachmentReference2* %80, null
  br i1 %81, label %93, label %82

82:                                               ; preds = %77
  %83 = getelementptr inbounds %struct.VkAttachmentReference2, %struct.VkAttachmentReference2* %80, i64 0, i32 2
  %84 = load i32, i32* %83, align 8
  %85 = icmp eq i32 %84, -1
  br i1 %85, label %93, label %86

86:                                               ; preds = %82
  %87 = and i8 %73, 1
  %88 = icmp eq i8 %87, 0
  %89 = select i1 %88, i8 1, i8 %73
  %90 = select i1 %88, i64 %59, i64 0
  %91 = add i64 %72, 32
  %92 = add i64 %91, %90
  br label %93

93:                                               ; preds = %86, %77, %82, %70
  %94 = phi i8 [ %73, %70 ], [ %89, %86 ], [ %73, %82 ], [ %73, %77 ]
  %95 = phi i64 [ %72, %70 ], [ %92, %86 ], [ %72, %82 ], [ %72, %77 ]
  %96 = getelementptr inbounds %struct.VkBaseInStructure, %struct.VkBaseInStructure* %71, i64 0, i32 1
  %97 = load %struct.VkBaseInStructure*, %struct.VkBaseInStructure** %96, align 8
  %98 = icmp eq %struct.VkBaseInStructure* %97, null
  br i1 %98, label %99, label %70

99:                                               ; preds = %93, %62
  %100 = phi i8 [ %65, %62 ], [ %94, %93 ]
  %101 = phi i64 [ %64, %62 ], [ %95, %93 ]
  %102 = add nuw nsw i64 %63, 1
  %103 = icmp eq i64 %102, %58
  br i1 %103, label %60, label %62
}

; Function Attrs: nofree norecurse nounwind optsize ssp uwtable writeonly
define hidden void @_ZNK2vk10RenderPass24getRenderAreaGranularityEP10VkExtent2D(%"class.vk::RenderPass"* nocapture readnone, %struct.VkExtent2D* nocapture) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %struct.VkExtent2D, %struct.VkExtent2D* %1, i64 0, i32 0
  store i32 1, i32* %3, align 4
  %4 = getelementptr inbounds %struct.VkExtent2D, %struct.VkExtent2D* %1, i64 0, i32 1
  store i32 1, i32* %4, align 4
  ret void
}

; Function Attrs: optsize
declare void @_ZN2sw4warnEPKcz(i8*, ...) local_unnamed_addr #3

; Function Attrs: optsize
declare void @_ZN2vk9StringifyE15VkStructureType(%"class.std::__1::basic_string"* sret, i32) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind optsize
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind optsize ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { optsize }
attributes #8 = { nounwind }
attributes #9 = { nounwind optsize }
attributes #10 = { builtin nounwind optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
