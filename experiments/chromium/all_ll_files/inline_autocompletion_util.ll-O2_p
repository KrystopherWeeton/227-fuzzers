; ModuleID = '../../components/omnibox/browser/inline_autocompletion_util.cc'
source_filename = "../../components/omnibox/browser/inline_autocompletion_util.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i64*, i64*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.std::__1::basic_string"* }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.15" }
%"struct.std::__1::pair" = type { i64, i64 }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.std::__1::pair"* }
%"class.std::__1::allocator" = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"class.gfx::Range"*, %"class.gfx::Range"*, %"class.std::__1::__compressed_pair.22" }
%"class.gfx::Range" = type { i32, i32 }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.gfx::Range"* }

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEC2ERKS5_mmRKS4_ = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_Z15FindAtWordbreakRKNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEES7_m(%"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string"* nocapture readonly dereferenceable(24), i64) local_unnamed_addr #0 {
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = alloca %"class.std::__1::vector.6", align 8
  %6 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #7
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false) #7
  call void @_Z26String16VectorFromString16RKNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEEbPNS_6vectorImNS3_ImEEEE(%"class.std::__1::vector.6"* nonnull sret %5, %"class.std::__1::basic_string"* dereferenceable(24) %0, i1 zeroext false, %"class.std::__1::vector"* nonnull %4) #7
  %9 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %5, i64 0, i32 0, i32 0
  %10 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %9, align 8
  %11 = icmp eq %"class.std::__1::basic_string"* %10, null
  br i1 %11, label %34, label %12

12:                                               ; preds = %3
  %13 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  %14 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %5, i64 0, i32 0, i32 1
  %15 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %14, align 8
  %16 = icmp eq %"class.std::__1::basic_string"* %15, %10
  br i1 %16, label %32, label %17

17:                                               ; preds = %12, %27
  %18 = phi %"class.std::__1::basic_string"* [ %19, %27 ], [ %15, %12 ]
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %18, i64 -1
  %20 = bitcast %"class.std::__1::basic_string"* %19 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %20, i64 0, i32 1, i32 1
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %17
  %25 = bitcast %"class.std::__1::basic_string"* %19 to i8**
  %26 = load i8*, i8** %25, align 8
  call void @_ZdlPv(i8* %26) #8
  br label %27

27:                                               ; preds = %24, %17
  %28 = icmp eq %"class.std::__1::basic_string"* %19, %10
  br i1 %28, label %29, label %17

29:                                               ; preds = %27
  %30 = bitcast %"class.std::__1::vector.6"* %5 to i8**
  %31 = load i8*, i8** %30, align 8
  br label %32

32:                                               ; preds = %29, %12
  %33 = phi i8* [ %31, %29 ], [ %13, %12 ]
  store %"class.std::__1::basic_string"* %10, %"class.std::__1::basic_string"** %14, align 8
  call void @_ZdlPv(i8* %33) #8
  br label %34

34:                                               ; preds = %3, %32
  %35 = load i64*, i64** %7, align 8
  %36 = load i64*, i64** %8, align 8
  %37 = icmp eq i64* %35, %36
  br i1 %37, label %138, label %38

38:                                               ; preds = %34
  %39 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %40 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %39, i64 0, i32 1, i32 1
  %41 = load i8, i8* %40, align 1
  %42 = icmp slt i8 %41, 0
  %43 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load i16*, i16** %43, align 8
  %45 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %46 = load i64, i64* %45, align 8
  %47 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %48 = zext i8 %41 to i64
  %49 = select i1 %42, i16* %44, i16* %47
  %50 = select i1 %42, i64 %46, i64 %48
  %51 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %52 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %51, i64 0, i32 1, i32 1
  %53 = load i8, i8* %52, align 1
  %54 = icmp slt i8 %53, 0
  %55 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load i16*, i16** %55, align 8
  %57 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %58 = load i64, i64* %57, align 8
  %59 = bitcast %"class.std::__1::basic_string"* %1 to i16*
  %60 = zext i8 %53 to i64
  %61 = select i1 %54, i16* %56, i16* %59
  %62 = select i1 %54, i64 %58, i64 %60
  %63 = icmp eq i64 %62, 0
  %64 = getelementptr inbounds i16, i16* %49, i64 %50
  %65 = shl nuw i64 %62, 1
  %66 = ashr exact i64 %65, 1
  %67 = ptrtoint i16* %64 to i64
  %68 = ptrtoint i16* %49 to i64
  br label %69

69:                                               ; preds = %38, %134
  %70 = phi i64 [ -1, %38 ], [ %135, %134 ]
  %71 = phi i64* [ %35, %38 ], [ %136, %134 ]
  %72 = load i64, i64* %71, align 8
  %73 = icmp ult i64 %72, %2
  br i1 %73, label %134, label %74

74:                                               ; preds = %69
  %75 = icmp ne i64 %70, -1
  %76 = icmp ult i64 %72, %70
  %77 = and i1 %75, %76
  br i1 %77, label %134, label %78

78:                                               ; preds = %74
  %79 = icmp ult i64 %50, %72
  br i1 %79, label %138, label %80

80:                                               ; preds = %78
  br i1 %63, label %129, label %81

81:                                               ; preds = %80
  %82 = getelementptr inbounds i16, i16* %49, i64 %72
  %83 = ptrtoint i16* %82 to i64
  %84 = sub i64 %67, %83
  %85 = ashr exact i64 %84, 1
  %86 = icmp slt i64 %85, %66
  br i1 %86, label %138, label %87

87:                                               ; preds = %81
  %88 = load i16, i16* %61, align 2
  br label %89

89:                                               ; preds = %118, %87
  %90 = phi i64 [ %85, %87 ], [ %122, %118 ]
  %91 = phi i16* [ %82, %87 ], [ %119, %118 ]
  %92 = sub nsw i64 %90, %66
  %93 = add nsw i64 %92, 1
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %138, label %95

95:                                               ; preds = %89, %100
  %96 = phi i64 [ %102, %100 ], [ %93, %89 ]
  %97 = phi i16* [ %101, %100 ], [ %91, %89 ]
  %98 = load i16, i16* %97, align 2
  %99 = icmp eq i16 %98, %88
  br i1 %99, label %104, label %100

100:                                              ; preds = %95
  %101 = getelementptr inbounds i16, i16* %97, i64 1
  %102 = add i64 %96, -1
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %138, label %95

104:                                              ; preds = %95
  %105 = icmp eq i16* %97, null
  br i1 %105, label %138, label %106

106:                                              ; preds = %104, %113
  %107 = phi i16* [ %111, %113 ], [ %97, %104 ]
  %108 = phi i16* [ %114, %113 ], [ %61, %104 ]
  %109 = phi i64 [ %110, %113 ], [ %66, %104 ]
  %110 = add i64 %109, -1
  %111 = getelementptr inbounds i16, i16* %107, i64 1
  %112 = icmp eq i64 %110, 0
  br i1 %112, label %124, label %113

113:                                              ; preds = %106
  %114 = getelementptr inbounds i16, i16* %108, i64 1
  %115 = load i16, i16* %111, align 2
  %116 = load i16, i16* %114, align 2
  %117 = icmp eq i16 %116, %115
  br i1 %117, label %106, label %118

118:                                              ; preds = %113
  %119 = getelementptr inbounds i16, i16* %97, i64 1
  %120 = ptrtoint i16* %119 to i64
  %121 = sub i64 %67, %120
  %122 = ashr exact i64 %121, 1
  %123 = icmp slt i64 %122, %66
  br i1 %123, label %138, label %89

124:                                              ; preds = %106
  %125 = ptrtoint i16* %97 to i64
  %126 = icmp eq i16* %97, %64
  %127 = sub i64 %125, %68
  %128 = ashr exact i64 %127, 1
  br i1 %126, label %138, label %129

129:                                              ; preds = %124, %80
  %130 = phi i64 [ %72, %80 ], [ %128, %124 ]
  %131 = icmp eq i64 %130, -1
  br i1 %131, label %138, label %132

132:                                              ; preds = %129
  %133 = icmp eq i64 %72, %130
  br i1 %133, label %138, label %134

134:                                              ; preds = %69, %74, %132
  %135 = phi i64 [ %70, %69 ], [ %70, %74 ], [ %130, %132 ]
  %136 = getelementptr inbounds i64, i64* %71, i64 1
  %137 = icmp eq i64* %136, %36
  br i1 %137, label %138, label %69

138:                                              ; preds = %132, %129, %78, %124, %81, %134, %118, %104, %89, %100, %34
  %139 = phi i64 [ -1, %34 ], [ -1, %100 ], [ -1, %89 ], [ -1, %104 ], [ -1, %118 ], [ %72, %132 ], [ -1, %129 ], [ -1, %78 ], [ -1, %124 ], [ -1, %81 ], [ -1, %134 ]
  %140 = icmp eq i64* %35, null
  br i1 %140, label %145, label %141

141:                                              ; preds = %138
  %142 = ptrtoint i64* %35 to i64
  %143 = bitcast i64** %8 to i64*
  store i64 %142, i64* %143, align 8
  %144 = bitcast i64* %35 to i8*
  call void @_ZdlPv(i8* %144) #8
  br label %145

145:                                              ; preds = %138, %141
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #7
  ret i64 %139
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_Z26String16VectorFromString16RKNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEEbPNS_6vectorImNS3_ImEEEE(%"class.std::__1::vector.6"* sret, %"class.std::__1::basic_string"* dereferenceable(24), i1 zeroext, %"class.std::__1::vector"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z32FindWordsSequentiallyAtWordbreakRKNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEES7_(%"class.std::__1::vector.13"* noalias nocapture sret, %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 {
  %4 = alloca %"class.std::__1::vector.13", align 16
  %5 = alloca %"class.std::__1::vector", align 8
  %6 = alloca %"class.std::__1::vector.6", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = alloca %"class.std::__1::basic_string", align 8
  %10 = bitcast %"class.std::__1::vector.13"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #7
  %11 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %4, i64 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %4, i64 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 0, i64 24, i1 false) #7
  %14 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #7
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 0, i64 24, i1 false) #7
  %17 = bitcast %"class.std::__1::vector.6"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #7
  %18 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %6, i64 0, i32 0, i32 0
  %19 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %6, i64 0, i32 0, i32 1
  %20 = bitcast %"class.std::__1::vector.6"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 24, i1 false)
  call void @_Z26String16VectorFromString16RKNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEEbPNS_6vectorImNS3_ImEEEE(%"class.std::__1::vector.6"* nonnull sret %6, %"class.std::__1::basic_string"* dereferenceable(24) %2, i1 zeroext false, %"class.std::__1::vector"* nonnull %5) #7
  %21 = bitcast i64** %16 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %"class.std::__1::vector"* %5 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %22, %24
  br i1 %25, label %26, label %28

26:                                               ; preds = %3
  %27 = bitcast %"class.std::__1::vector.13"* %0 to i8*
  br label %506

28:                                               ; preds = %3
  %29 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %32 = bitcast %"class.std::__1::basic_string"* %7 to i8**
  %33 = bitcast %"class.std::__1::basic_string"* %7 to i16*
  %34 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %35 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %34, i64 0, i32 1, i32 1
  %36 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %39 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  %40 = bitcast %"class.std::__1::basic_string"* %2 to %"class.std::__1::allocator"*
  %41 = bitcast %"class.std::__1::basic_string"* %9 to %"class.std::__1::allocator"*
  %42 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %43 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %42, i64 0, i32 1, i32 1
  %44 = bitcast %"class.std::__1::basic_string"* %9 to i8**
  %45 = bitcast %"struct.std::__1::pair"** %12 to i64*
  %46 = bitcast %"class.std::__1::vector.13"* %4 to i64*
  %47 = bitcast %"struct.std::__1::pair"** %13 to i64*
  %48 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %48, i64 0, i32 1, i32 1
  %50 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %50, i64 0, i32 1, i32 1
  %52 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %54 = bitcast %"class.std::__1::basic_string"* %1 to i16*
  %55 = bitcast %"class.std::__1::basic_string"* %8 to i16*
  %56 = bitcast %"class.std::__1::vector.13"* %0 to i8*
  %57 = bitcast %"class.std::__1::basic_string"* %8 to i8**
  %58 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  %59 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  br label %60

60:                                               ; preds = %28, %495
  %61 = phi i64 [ %22, %28 ], [ %497, %495 ]
  %62 = phi i64 [ %24, %28 ], [ %498, %495 ]
  %63 = phi i64 [ 0, %28 ], [ %496, %495 ]
  %64 = phi i64 [ 0, %28 ], [ %484, %495 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %29) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %58, i8 -86, i64 24, i1 false)
  %65 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %18, align 8
  %66 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %65, i64 %63
  %67 = bitcast %"class.std::__1::basic_string"* %66 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %68 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %67, i64 0, i32 1, i32 1
  %69 = load i8, i8* %68, align 1
  %70 = icmp slt i8 %69, 0
  br i1 %70, label %74, label %71

71:                                               ; preds = %60
  %72 = inttoptr i64 %62 to i64*
  %73 = bitcast %"class.std::__1::basic_string"* %66 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %29, i8* align 8 %73, i64 24, i1 false) #7
  br label %247

74:                                               ; preds = %60
  %75 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %66, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = load i16*, i16** %75, align 8
  %77 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %65, i64 %63, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %78 = load i64, i64* %77, align 8
  %79 = icmp ult i64 %78, 11
  br i1 %79, label %80, label %82

80:                                               ; preds = %74
  %81 = trunc i64 %78 to i8
  store i8 %81, i8* %35, align 1
  br label %96

82:                                               ; preds = %74
  %83 = icmp ugt i64 %78, 9223372036854775791
  br i1 %83, label %84, label %86

84:                                               ; preds = %82
  %85 = bitcast %"class.std::__1::basic_string"* %7 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %85) #9
  unreachable

86:                                               ; preds = %82
  %87 = add nuw nsw i64 %78, 8
  %88 = and i64 %87, -8
  %89 = icmp slt i64 %88, 0
  br i1 %89, label %90, label %91

90:                                               ; preds = %86
  call void @abort() #9
  unreachable

91:                                               ; preds = %86
  %92 = shl i64 %88, 1
  %93 = call i8* @_Znwm(i64 %92) #8
  %94 = bitcast i8* %93 to i16*
  store i8* %93, i8** %32, align 8
  %95 = or i64 %88, -9223372036854775808
  store i64 %95, i64* %31, align 8
  store i64 %78, i64* %30, align 8
  br label %96

96:                                               ; preds = %91, %80
  %97 = phi i16* [ %33, %80 ], [ %94, %91 ]
  %98 = add nuw nsw i64 %78, 1
  %99 = add i64 %78, 1
  %100 = icmp ult i64 %99, 16
  br i1 %100, label %191, label %101

101:                                              ; preds = %96
  %102 = getelementptr i16, i16* %97, i64 1
  %103 = getelementptr i16, i16* %102, i64 %78
  %104 = getelementptr i16, i16* %76, i64 1
  %105 = getelementptr i16, i16* %104, i64 %78
  %106 = icmp ult i16* %97, %105
  %107 = icmp ult i16* %76, %103
  %108 = and i1 %106, %107
  br i1 %108, label %191, label %109

109:                                              ; preds = %101
  %110 = and i64 %99, -16
  %111 = sub i64 %98, %110
  %112 = getelementptr i16, i16* %76, i64 %110
  %113 = getelementptr i16, i16* %97, i64 %110
  %114 = add i64 %110, -16
  %115 = lshr exact i64 %114, 4
  %116 = add nuw nsw i64 %115, 1
  %117 = and i64 %116, 3
  %118 = icmp ult i64 %114, 48
  br i1 %118, label %170, label %119

119:                                              ; preds = %109
  %120 = sub nsw i64 %116, %117
  br label %121

121:                                              ; preds = %121, %119
  %122 = phi i64 [ 0, %119 ], [ %167, %121 ]
  %123 = phi i64 [ %120, %119 ], [ %168, %121 ]
  %124 = getelementptr i16, i16* %76, i64 %122
  %125 = getelementptr i16, i16* %97, i64 %122
  %126 = bitcast i16* %124 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !2
  %128 = getelementptr i16, i16* %124, i64 8
  %129 = bitcast i16* %128 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 2, !alias.scope !2
  %131 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %131, align 2, !alias.scope !5, !noalias !2
  %132 = getelementptr i16, i16* %125, i64 8
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %133, align 2, !alias.scope !5, !noalias !2
  %134 = or i64 %122, 16
  %135 = getelementptr i16, i16* %76, i64 %134
  %136 = getelementptr i16, i16* %97, i64 %134
  %137 = bitcast i16* %135 to <8 x i16>*
  %138 = load <8 x i16>, <8 x i16>* %137, align 2, !alias.scope !2
  %139 = getelementptr i16, i16* %135, i64 8
  %140 = bitcast i16* %139 to <8 x i16>*
  %141 = load <8 x i16>, <8 x i16>* %140, align 2, !alias.scope !2
  %142 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %142, align 2, !alias.scope !5, !noalias !2
  %143 = getelementptr i16, i16* %136, i64 8
  %144 = bitcast i16* %143 to <8 x i16>*
  store <8 x i16> %141, <8 x i16>* %144, align 2, !alias.scope !5, !noalias !2
  %145 = or i64 %122, 32
  %146 = getelementptr i16, i16* %76, i64 %145
  %147 = getelementptr i16, i16* %97, i64 %145
  %148 = bitcast i16* %146 to <8 x i16>*
  %149 = load <8 x i16>, <8 x i16>* %148, align 2, !alias.scope !2
  %150 = getelementptr i16, i16* %146, i64 8
  %151 = bitcast i16* %150 to <8 x i16>*
  %152 = load <8 x i16>, <8 x i16>* %151, align 2, !alias.scope !2
  %153 = bitcast i16* %147 to <8 x i16>*
  store <8 x i16> %149, <8 x i16>* %153, align 2, !alias.scope !5, !noalias !2
  %154 = getelementptr i16, i16* %147, i64 8
  %155 = bitcast i16* %154 to <8 x i16>*
  store <8 x i16> %152, <8 x i16>* %155, align 2, !alias.scope !5, !noalias !2
  %156 = or i64 %122, 48
  %157 = getelementptr i16, i16* %76, i64 %156
  %158 = getelementptr i16, i16* %97, i64 %156
  %159 = bitcast i16* %157 to <8 x i16>*
  %160 = load <8 x i16>, <8 x i16>* %159, align 2, !alias.scope !2
  %161 = getelementptr i16, i16* %157, i64 8
  %162 = bitcast i16* %161 to <8 x i16>*
  %163 = load <8 x i16>, <8 x i16>* %162, align 2, !alias.scope !2
  %164 = bitcast i16* %158 to <8 x i16>*
  store <8 x i16> %160, <8 x i16>* %164, align 2, !alias.scope !5, !noalias !2
  %165 = getelementptr i16, i16* %158, i64 8
  %166 = bitcast i16* %165 to <8 x i16>*
  store <8 x i16> %163, <8 x i16>* %166, align 2, !alias.scope !5, !noalias !2
  %167 = add i64 %122, 64
  %168 = add i64 %123, -4
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %170, label %121, !llvm.loop !7

170:                                              ; preds = %121, %109
  %171 = phi i64 [ 0, %109 ], [ %167, %121 ]
  %172 = icmp eq i64 %117, 0
  br i1 %172, label %189, label %173

173:                                              ; preds = %170, %173
  %174 = phi i64 [ %186, %173 ], [ %171, %170 ]
  %175 = phi i64 [ %187, %173 ], [ %117, %170 ]
  %176 = getelementptr i16, i16* %76, i64 %174
  %177 = getelementptr i16, i16* %97, i64 %174
  %178 = bitcast i16* %176 to <8 x i16>*
  %179 = load <8 x i16>, <8 x i16>* %178, align 2, !alias.scope !2
  %180 = getelementptr i16, i16* %176, i64 8
  %181 = bitcast i16* %180 to <8 x i16>*
  %182 = load <8 x i16>, <8 x i16>* %181, align 2, !alias.scope !2
  %183 = bitcast i16* %177 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %183, align 2, !alias.scope !5, !noalias !2
  %184 = getelementptr i16, i16* %177, i64 8
  %185 = bitcast i16* %184 to <8 x i16>*
  store <8 x i16> %182, <8 x i16>* %185, align 2, !alias.scope !5, !noalias !2
  %186 = add i64 %174, 16
  %187 = add i64 %175, -1
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %189, label %173, !llvm.loop !9

189:                                              ; preds = %173, %170
  %190 = icmp eq i64 %99, %110
  br i1 %190, label %244, label %191

191:                                              ; preds = %189, %101, %96
  %192 = phi i64 [ %98, %101 ], [ %98, %96 ], [ %111, %189 ]
  %193 = phi i16* [ %76, %101 ], [ %76, %96 ], [ %112, %189 ]
  %194 = phi i16* [ %97, %101 ], [ %97, %96 ], [ %113, %189 ]
  %195 = add i64 %192, -1
  %196 = and i64 %192, 7
  %197 = icmp eq i64 %196, 0
  br i1 %197, label %209, label %198

198:                                              ; preds = %191, %198
  %199 = phi i64 [ %204, %198 ], [ %192, %191 ]
  %200 = phi i16* [ %206, %198 ], [ %193, %191 ]
  %201 = phi i16* [ %205, %198 ], [ %194, %191 ]
  %202 = phi i64 [ %207, %198 ], [ %196, %191 ]
  %203 = load i16, i16* %200, align 2
  store i16 %203, i16* %201, align 2
  %204 = add i64 %199, -1
  %205 = getelementptr inbounds i16, i16* %201, i64 1
  %206 = getelementptr inbounds i16, i16* %200, i64 1
  %207 = add i64 %202, -1
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %209, label %198, !llvm.loop !11

209:                                              ; preds = %198, %191
  %210 = phi i64 [ %192, %191 ], [ %204, %198 ]
  %211 = phi i16* [ %193, %191 ], [ %206, %198 ]
  %212 = phi i16* [ %194, %191 ], [ %205, %198 ]
  %213 = icmp ult i64 %195, 7
  br i1 %213, label %244, label %214

214:                                              ; preds = %209, %214
  %215 = phi i64 [ %240, %214 ], [ %210, %209 ]
  %216 = phi i16* [ %242, %214 ], [ %211, %209 ]
  %217 = phi i16* [ %241, %214 ], [ %212, %209 ]
  %218 = load i16, i16* %216, align 2
  store i16 %218, i16* %217, align 2
  %219 = getelementptr inbounds i16, i16* %217, i64 1
  %220 = getelementptr inbounds i16, i16* %216, i64 1
  %221 = load i16, i16* %220, align 2
  store i16 %221, i16* %219, align 2
  %222 = getelementptr inbounds i16, i16* %217, i64 2
  %223 = getelementptr inbounds i16, i16* %216, i64 2
  %224 = load i16, i16* %223, align 2
  store i16 %224, i16* %222, align 2
  %225 = getelementptr inbounds i16, i16* %217, i64 3
  %226 = getelementptr inbounds i16, i16* %216, i64 3
  %227 = load i16, i16* %226, align 2
  store i16 %227, i16* %225, align 2
  %228 = getelementptr inbounds i16, i16* %217, i64 4
  %229 = getelementptr inbounds i16, i16* %216, i64 4
  %230 = load i16, i16* %229, align 2
  store i16 %230, i16* %228, align 2
  %231 = getelementptr inbounds i16, i16* %217, i64 5
  %232 = getelementptr inbounds i16, i16* %216, i64 5
  %233 = load i16, i16* %232, align 2
  store i16 %233, i16* %231, align 2
  %234 = getelementptr inbounds i16, i16* %217, i64 6
  %235 = getelementptr inbounds i16, i16* %216, i64 6
  %236 = load i16, i16* %235, align 2
  store i16 %236, i16* %234, align 2
  %237 = getelementptr inbounds i16, i16* %217, i64 7
  %238 = getelementptr inbounds i16, i16* %216, i64 7
  %239 = load i16, i16* %238, align 2
  store i16 %239, i16* %237, align 2
  %240 = add i64 %215, -8
  %241 = getelementptr inbounds i16, i16* %217, i64 8
  %242 = getelementptr inbounds i16, i16* %216, i64 8
  %243 = icmp eq i64 %240, 0
  br i1 %243, label %244, label %214, !llvm.loop !12

244:                                              ; preds = %209, %214, %189
  %245 = load i64*, i64** %15, align 8
  %246 = load i64, i64* %21, align 8
  br label %247

247:                                              ; preds = %244, %71
  %248 = phi i64 [ %246, %244 ], [ %61, %71 ]
  %249 = phi i64* [ %245, %244 ], [ %72, %71 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %36) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %59, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %39) #7
  %250 = getelementptr inbounds i64, i64* %249, i64 %63
  %251 = load i64, i64* %250, align 8
  %252 = ptrtoint i64* %249 to i64
  %253 = sub i64 %248, %252
  %254 = ashr exact i64 %253, 3
  %255 = add nsw i64 %254, -1
  %256 = icmp eq i64 %63, %255
  br i1 %256, label %262, label %257

257:                                              ; preds = %247
  %258 = add nuw i64 %63, 1
  %259 = getelementptr inbounds i64, i64* %249, i64 %258
  %260 = load i64, i64* %259, align 8
  %261 = sub i64 %260, %251
  br label %262

262:                                              ; preds = %247, %257
  %263 = phi i64 [ %261, %257 ], [ -1, %247 ]
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEC2ERKS5_mmRKS4_(%"class.std::__1::basic_string"* nonnull %9, %"class.std::__1::basic_string"* dereferenceable(24) %2, i64 %251, i64 %263, %"class.std::__1::allocator"* dereferenceable(1) %40) #7
  %264 = load i8, i8* %35, align 1
  %265 = icmp slt i8 %264, 0
  %266 = load i64, i64* %30, align 8
  %267 = zext i8 %264 to i64
  %268 = select i1 %265, i64 %266, i64 %267
  call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEC2ERKS5_mmRKS4_(%"class.std::__1::basic_string"* nonnull %8, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %9, i64 %268, i64 -1, %"class.std::__1::allocator"* nonnull dereferenceable(1) %41) #7
  %269 = load i8, i8* %43, align 1
  %270 = icmp slt i8 %269, 0
  br i1 %270, label %271, label %273

271:                                              ; preds = %262
  %272 = load i8*, i8** %44, align 8
  call void @_ZdlPv(i8* %272) #8
  br label %273

273:                                              ; preds = %262, %271
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %39) #7
  %274 = call i64 @_Z15FindAtWordbreakRKNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEES7_m(%"class.std::__1::basic_string"* dereferenceable(24) %1, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %7, i64 %64)
  %275 = icmp eq i64 %274, -1
  br i1 %275, label %276, label %278

276:                                              ; preds = %273
  call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 24, i1 false) #7
  %277 = load i8, i8* %49, align 1
  br label %482

278:                                              ; preds = %273
  %279 = load i8, i8* %35, align 1
  %280 = icmp slt i8 %279, 0
  %281 = load i64, i64* %30, align 8
  %282 = zext i8 %279 to i64
  %283 = select i1 %280, i64 %281, i64 %282
  %284 = add i64 %283, %274
  %285 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %12, align 8
  %286 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %13, align 16
  %287 = icmp ult %"struct.std::__1::pair"* %285, %286
  %288 = ptrtoint %"struct.std::__1::pair"* %286 to i64
  br i1 %287, label %289, label %294

289:                                              ; preds = %278
  %290 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %285, i64 0, i32 0
  store i64 %274, i64* %290, align 8
  %291 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %285, i64 0, i32 1
  store i64 %284, i64* %291, align 8
  %292 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %285, i64 1
  %293 = ptrtoint %"struct.std::__1::pair"* %292 to i64
  store i64 %293, i64* %45, align 8
  br label %339

294:                                              ; preds = %278
  %295 = ptrtoint %"struct.std::__1::pair"* %285 to i64
  %296 = load i64, i64* %46, align 16
  %297 = sub i64 %295, %296
  %298 = ashr exact i64 %297, 4
  %299 = add nsw i64 %298, 1
  %300 = icmp ugt i64 %299, 1152921504606846975
  br i1 %300, label %301, label %303

301:                                              ; preds = %294
  %302 = bitcast %"class.std::__1::vector.13"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %302) #9
  unreachable

303:                                              ; preds = %294
  %304 = sub i64 %288, %296
  %305 = ashr exact i64 %304, 4
  %306 = icmp ult i64 %305, 576460752303423487
  br i1 %306, label %307, label %315

307:                                              ; preds = %303
  %308 = ashr exact i64 %304, 3
  %309 = icmp ult i64 %308, %299
  %310 = select i1 %309, i64 %299, i64 %308
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %320, label %312

312:                                              ; preds = %307
  %313 = icmp ugt i64 %310, 1152921504606846975
  br i1 %313, label %314, label %315

314:                                              ; preds = %312
  call void @abort() #9
  unreachable

315:                                              ; preds = %312, %303
  %316 = phi i64 [ %310, %312 ], [ 1152921504606846975, %303 ]
  %317 = shl i64 %316, 4
  %318 = call i8* @_Znwm(i64 %317) #8
  %319 = bitcast i8* %318 to %"struct.std::__1::pair"*
  br label %320

320:                                              ; preds = %315, %307
  %321 = phi i64 [ %316, %315 ], [ 0, %307 ]
  %322 = phi i8* [ %318, %315 ], [ null, %307 ]
  %323 = phi %"struct.std::__1::pair"* [ %319, %315 ], [ null, %307 ]
  %324 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %323, i64 %298
  %325 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %323, i64 %321
  %326 = ptrtoint %"struct.std::__1::pair"* %325 to i64
  %327 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %324, i64 0, i32 0
  store i64 %274, i64* %327, align 8
  %328 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %323, i64 %298, i32 1
  store i64 %284, i64* %328, align 8
  %329 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %324, i64 1
  %330 = ptrtoint %"struct.std::__1::pair"* %329 to i64
  %331 = ptrtoint %"struct.std::__1::pair"* %323 to i64
  %332 = icmp sgt i64 %297, 0
  br i1 %332, label %333, label %335

333:                                              ; preds = %320
  %334 = inttoptr i64 %296 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %322, i8* align 8 %334, i64 %297, i1 false) #7
  br label %335

335:                                              ; preds = %333, %320
  store i64 %331, i64* %46, align 16
  store i64 %330, i64* %45, align 8
  store i64 %326, i64* %47, align 16
  %336 = icmp eq i64 %296, 0
  br i1 %336, label %339, label %337

337:                                              ; preds = %335
  %338 = inttoptr i64 %296 to i8*
  call void @_ZdlPv(i8* %338) #8
  br label %339

339:                                              ; preds = %337, %335, %289
  %340 = load i8, i8* %35, align 1
  %341 = icmp slt i8 %340, 0
  %342 = load i64, i64* %30, align 8
  %343 = zext i8 %340 to i64
  %344 = select i1 %341, i64 %342, i64 %343
  %345 = add i64 %344, %274
  %346 = load i8, i8* %49, align 1
  %347 = icmp slt i8 %346, 0
  %348 = load i64, i64* %38, align 8
  %349 = zext i8 %346 to i64
  %350 = select i1 %347, i64 %348, i64 %349
  %351 = icmp eq i64 %350, 0
  br i1 %351, label %482, label %352

352:                                              ; preds = %339
  %353 = load i8, i8* %51, align 1
  %354 = icmp slt i8 %353, 0
  %355 = load i16*, i16** %52, align 8
  %356 = load i64, i64* %53, align 8
  %357 = zext i8 %353 to i64
  %358 = select i1 %354, i16* %355, i16* %54
  %359 = select i1 %354, i64 %356, i64 %357
  %360 = load i16*, i16** %37, align 8
  %361 = select i1 %347, i16* %360, i16* %55
  %362 = icmp ult i64 %359, %345
  br i1 %362, label %418, label %363

363:                                              ; preds = %352
  %364 = getelementptr inbounds i16, i16* %358, i64 %345
  %365 = getelementptr inbounds i16, i16* %358, i64 %359
  %366 = shl nuw i64 %350, 1
  %367 = ashr exact i64 %366, 1
  %368 = ptrtoint i16* %365 to i64
  %369 = ptrtoint i16* %364 to i64
  %370 = sub i64 %368, %369
  %371 = ashr exact i64 %370, 1
  %372 = icmp slt i64 %371, %367
  br i1 %372, label %418, label %373

373:                                              ; preds = %363
  %374 = load i16, i16* %361, align 2
  br label %375

375:                                              ; preds = %404, %373
  %376 = phi i64 [ %371, %373 ], [ %408, %404 ]
  %377 = phi i16* [ %364, %373 ], [ %405, %404 ]
  %378 = sub nsw i64 %376, %367
  %379 = add nsw i64 %378, 1
  %380 = icmp eq i64 %379, 0
  br i1 %380, label %418, label %381

381:                                              ; preds = %375, %386
  %382 = phi i64 [ %388, %386 ], [ %379, %375 ]
  %383 = phi i16* [ %387, %386 ], [ %377, %375 ]
  %384 = load i16, i16* %383, align 2
  %385 = icmp eq i16 %384, %374
  br i1 %385, label %390, label %386

386:                                              ; preds = %381
  %387 = getelementptr inbounds i16, i16* %383, i64 1
  %388 = add i64 %382, -1
  %389 = icmp eq i64 %388, 0
  br i1 %389, label %418, label %381

390:                                              ; preds = %381
  %391 = icmp eq i16* %383, null
  br i1 %391, label %418, label %392

392:                                              ; preds = %390, %399
  %393 = phi i16* [ %397, %399 ], [ %383, %390 ]
  %394 = phi i16* [ %400, %399 ], [ %361, %390 ]
  %395 = phi i64 [ %396, %399 ], [ %367, %390 ]
  %396 = add i64 %395, -1
  %397 = getelementptr inbounds i16, i16* %393, i64 1
  %398 = icmp eq i64 %396, 0
  br i1 %398, label %410, label %399

399:                                              ; preds = %392
  %400 = getelementptr inbounds i16, i16* %394, i64 1
  %401 = load i16, i16* %397, align 2
  %402 = load i16, i16* %400, align 2
  %403 = icmp eq i16 %402, %401
  br i1 %403, label %392, label %404

404:                                              ; preds = %399
  %405 = getelementptr inbounds i16, i16* %383, i64 1
  %406 = ptrtoint i16* %405 to i64
  %407 = sub i64 %368, %406
  %408 = ashr exact i64 %407, 1
  %409 = icmp slt i64 %408, %367
  br i1 %409, label %418, label %375

410:                                              ; preds = %392
  %411 = ptrtoint i16* %383 to i64
  %412 = icmp eq i16* %383, %365
  %413 = ptrtoint i16* %358 to i64
  %414 = sub i64 %411, %413
  %415 = ashr exact i64 %414, 1
  %416 = icmp eq i64 %414, -2
  %417 = or i1 %412, %416
  br i1 %417, label %418, label %419

418:                                              ; preds = %404, %390, %375, %386, %363, %410, %352
  call void @llvm.memset.p0i8.i64(i8* align 8 %56, i8 0, i64 24, i1 false) #7
  br label %482

419:                                              ; preds = %410
  %420 = add i64 %415, %350
  %421 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %12, align 8
  %422 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %13, align 16
  %423 = icmp ult %"struct.std::__1::pair"* %421, %422
  %424 = ptrtoint %"struct.std::__1::pair"* %422 to i64
  br i1 %423, label %425, label %430

425:                                              ; preds = %419
  %426 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %421, i64 0, i32 0
  store i64 %415, i64* %426, align 8
  %427 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %421, i64 0, i32 1
  store i64 %420, i64* %427, align 8
  %428 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %421, i64 1
  %429 = ptrtoint %"struct.std::__1::pair"* %428 to i64
  store i64 %429, i64* %45, align 8
  br label %475

430:                                              ; preds = %419
  %431 = ptrtoint %"struct.std::__1::pair"* %421 to i64
  %432 = load i64, i64* %46, align 16
  %433 = sub i64 %431, %432
  %434 = ashr exact i64 %433, 4
  %435 = add nsw i64 %434, 1
  %436 = icmp ugt i64 %435, 1152921504606846975
  br i1 %436, label %437, label %439

437:                                              ; preds = %430
  %438 = bitcast %"class.std::__1::vector.13"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %438) #9
  unreachable

439:                                              ; preds = %430
  %440 = sub i64 %424, %432
  %441 = ashr exact i64 %440, 4
  %442 = icmp ult i64 %441, 576460752303423487
  br i1 %442, label %443, label %451

443:                                              ; preds = %439
  %444 = ashr exact i64 %440, 3
  %445 = icmp ult i64 %444, %435
  %446 = select i1 %445, i64 %435, i64 %444
  %447 = icmp eq i64 %446, 0
  br i1 %447, label %456, label %448

448:                                              ; preds = %443
  %449 = icmp ugt i64 %446, 1152921504606846975
  br i1 %449, label %450, label %451

450:                                              ; preds = %448
  call void @abort() #9
  unreachable

451:                                              ; preds = %448, %439
  %452 = phi i64 [ %446, %448 ], [ 1152921504606846975, %439 ]
  %453 = shl i64 %452, 4
  %454 = call i8* @_Znwm(i64 %453) #8
  %455 = bitcast i8* %454 to %"struct.std::__1::pair"*
  br label %456

456:                                              ; preds = %451, %443
  %457 = phi i64 [ %452, %451 ], [ 0, %443 ]
  %458 = phi i8* [ %454, %451 ], [ null, %443 ]
  %459 = phi %"struct.std::__1::pair"* [ %455, %451 ], [ null, %443 ]
  %460 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %459, i64 %434
  %461 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %459, i64 %457
  %462 = ptrtoint %"struct.std::__1::pair"* %461 to i64
  %463 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %460, i64 0, i32 0
  store i64 %415, i64* %463, align 8
  %464 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %459, i64 %434, i32 1
  store i64 %420, i64* %464, align 8
  %465 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %460, i64 1
  %466 = ptrtoint %"struct.std::__1::pair"* %465 to i64
  %467 = ptrtoint %"struct.std::__1::pair"* %459 to i64
  %468 = icmp sgt i64 %433, 0
  br i1 %468, label %469, label %471

469:                                              ; preds = %456
  %470 = inttoptr i64 %432 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %458, i8* align 8 %470, i64 %433, i1 false) #7
  br label %471

471:                                              ; preds = %469, %456
  store i64 %467, i64* %46, align 16
  store i64 %466, i64* %45, align 8
  store i64 %462, i64* %47, align 16
  %472 = icmp eq i64 %432, 0
  br i1 %472, label %475, label %473

473:                                              ; preds = %471
  %474 = inttoptr i64 %432 to i8*
  call void @_ZdlPv(i8* %474) #8
  br label %475

475:                                              ; preds = %473, %471, %425
  %476 = load i8, i8* %49, align 1
  %477 = icmp slt i8 %476, 0
  %478 = load i64, i64* %38, align 8
  %479 = zext i8 %476 to i64
  %480 = select i1 %477, i64 %478, i64 %479
  %481 = add i64 %480, %415
  br label %482

482:                                              ; preds = %339, %475, %418, %276
  %483 = phi i8 [ %277, %276 ], [ %346, %339 ], [ %346, %418 ], [ %476, %475 ]
  %484 = phi i64 [ -1, %276 ], [ %345, %339 ], [ -1, %418 ], [ %481, %475 ]
  %485 = phi i32 [ 1, %276 ], [ 4, %339 ], [ 1, %418 ], [ 0, %475 ]
  %486 = icmp slt i8 %483, 0
  br i1 %486, label %487, label %489

487:                                              ; preds = %482
  %488 = load i8*, i8** %57, align 8
  call void @_ZdlPv(i8* %488) #8
  br label %489

489:                                              ; preds = %482, %487
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %36) #7
  %490 = load i8, i8* %35, align 1
  %491 = icmp slt i8 %490, 0
  br i1 %491, label %492, label %494

492:                                              ; preds = %489
  %493 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %493) #8
  br label %494

494:                                              ; preds = %489, %492
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %29) #7
  switch i32 %485, label %513 [
    i32 0, label %495
    i32 4, label %495
  ]

495:                                              ; preds = %494, %494
  %496 = add nuw i64 %63, 1
  %497 = load i64, i64* %21, align 8
  %498 = load i64, i64* %23, align 8
  %499 = sub i64 %497, %498
  %500 = ashr exact i64 %499, 3
  %501 = icmp ult i64 %496, %500
  br i1 %501, label %60, label %502

502:                                              ; preds = %495
  %503 = bitcast %"class.std::__1::vector.13"* %4 to <2 x i64>*
  %504 = load <2 x i64>, <2 x i64>* %503, align 16
  %505 = load i64, i64* %47, align 16
  br label %506

506:                                              ; preds = %26, %502
  %507 = phi i8* [ %27, %26 ], [ %56, %502 ]
  %508 = phi i64 [ 0, %26 ], [ %505, %502 ]
  %509 = phi <2 x i64> [ zeroinitializer, %26 ], [ %504, %502 ]
  call void @llvm.memset.p0i8.i64(i8* align 8 %507, i8 0, i64 24, i1 false) #7
  %510 = bitcast %"class.std::__1::vector.13"* %0 to <2 x i64>*
  store <2 x i64> %509, <2 x i64>* %510, align 8
  %511 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %512 = bitcast %"struct.std::__1::pair"** %511 to i64*
  store i64 %508, i64* %512, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 0, i64 24, i1 false) #7
  br label %513

513:                                              ; preds = %494, %506
  %514 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %18, align 8
  %515 = icmp eq %"class.std::__1::basic_string"* %514, null
  br i1 %515, label %537, label %516

516:                                              ; preds = %513
  %517 = bitcast %"class.std::__1::basic_string"* %514 to i8*
  %518 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %19, align 8
  %519 = icmp eq %"class.std::__1::basic_string"* %518, %514
  br i1 %519, label %535, label %520

520:                                              ; preds = %516, %530
  %521 = phi %"class.std::__1::basic_string"* [ %522, %530 ], [ %518, %516 ]
  %522 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %521, i64 -1
  %523 = bitcast %"class.std::__1::basic_string"* %522 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %524 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %523, i64 0, i32 1, i32 1
  %525 = load i8, i8* %524, align 1
  %526 = icmp slt i8 %525, 0
  br i1 %526, label %527, label %530

527:                                              ; preds = %520
  %528 = bitcast %"class.std::__1::basic_string"* %522 to i8**
  %529 = load i8*, i8** %528, align 8
  call void @_ZdlPv(i8* %529) #8
  br label %530

530:                                              ; preds = %527, %520
  %531 = icmp eq %"class.std::__1::basic_string"* %522, %514
  br i1 %531, label %532, label %520

532:                                              ; preds = %530
  %533 = bitcast %"class.std::__1::vector.6"* %6 to i8**
  %534 = load i8*, i8** %533, align 8
  br label %535

535:                                              ; preds = %532, %516
  %536 = phi i8* [ %534, %532 ], [ %517, %516 ]
  store %"class.std::__1::basic_string"* %514, %"class.std::__1::basic_string"** %19, align 8
  call void @_ZdlPv(i8* %536) #8
  br label %537

537:                                              ; preds = %513, %535
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #7
  %538 = load i64*, i64** %15, align 8
  %539 = icmp eq i64* %538, null
  br i1 %539, label %543, label %540

540:                                              ; preds = %537
  %541 = ptrtoint i64* %538 to i64
  store i64 %541, i64* %21, align 8
  %542 = bitcast i64* %538 to i8*
  call void @_ZdlPv(i8* %542) #8
  br label %543

543:                                              ; preds = %537, %540
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #7
  %544 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %11, align 16
  %545 = icmp eq %"struct.std::__1::pair"* %544, null
  br i1 %545, label %550, label %546

546:                                              ; preds = %543
  %547 = ptrtoint %"struct.std::__1::pair"* %544 to i64
  %548 = bitcast %"struct.std::__1::pair"** %12 to i64*
  store i64 %547, i64* %548, align 8
  %549 = bitcast %"struct.std::__1::pair"* %544 to i8*
  call void @_ZdlPv(i8* %549) #8
  br label %550

550:                                              ; preds = %543, %546
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z23TermMatchesToSelectionsmNSt3__16vectorINS_4pairImmEENS_9allocatorIS2_EEEE(%"class.std::__1::vector.20"* noalias sret, i64, %"class.std::__1::vector.13"* nocapture readonly) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %0, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %6 = bitcast %"class.std::__1::vector.20"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #7
  %7 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %2, i64 0, i32 0, i32 1
  %8 = bitcast %"struct.std::__1::pair"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector.13"* %2 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %21, label %14

14:                                               ; preds = %3
  %15 = inttoptr i64 %11 to %"struct.std::__1::pair"*
  %16 = ashr exact i64 %12, 4
  %17 = getelementptr inbounds %"class.std::__1::vector.13", %"class.std::__1::vector.13"* %2, i64 0, i32 0, i32 0
  %18 = bitcast %"class.gfx::Range"** %4 to i64*
  %19 = bitcast %"class.std::__1::vector.20"* %0 to i64*
  %20 = bitcast %"class.gfx::Range"** %5 to i64*
  br label %24

21:                                               ; preds = %160, %3
  %22 = phi i64 [ %1, %3 ], [ %161, %160 ]
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %227, label %166

24:                                               ; preds = %163, %14
  %25 = phi i64 [ %9, %14 ], [ %165, %163 ]
  %26 = phi %"struct.std::__1::pair"* [ %15, %14 ], [ %164, %163 ]
  %27 = phi i64 [ %16, %14 ], [ %29, %163 ]
  %28 = phi i64 [ %1, %14 ], [ %161, %163 ]
  %29 = add i64 %27, -1
  %30 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %26, i64 %29, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %26, i64 %29, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = ptrtoint %"struct.std::__1::pair"* %26 to i64
  %35 = sub i64 %25, %34
  %36 = ashr exact i64 %35, 4
  %37 = icmp eq i64 %27, %36
  br i1 %37, label %38, label %97

38:                                               ; preds = %24
  %39 = load %"class.gfx::Range"*, %"class.gfx::Range"** %4, align 8
  %40 = load %"class.gfx::Range"*, %"class.gfx::Range"** %5, align 8
  %41 = icmp ult %"class.gfx::Range"* %39, %40
  %42 = ptrtoint %"class.gfx::Range"* %40 to i64
  br i1 %41, label %43, label %50

43:                                               ; preds = %38
  %44 = trunc i64 %28 to i32
  %45 = trunc i64 %33 to i32
  %46 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %39, i64 0, i32 0
  store i32 %44, i32* %46, align 4
  %47 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %39, i64 0, i32 1
  store i32 %45, i32* %47, align 4
  %48 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %39, i64 1
  %49 = ptrtoint %"class.gfx::Range"* %48 to i64
  store i64 %49, i64* %18, align 8
  br label %160

50:                                               ; preds = %38
  %51 = ptrtoint %"class.gfx::Range"* %39 to i64
  %52 = load i64, i64* %19, align 8
  %53 = sub i64 %51, %52
  %54 = ashr exact i64 %53, 3
  %55 = add nsw i64 %54, 1
  %56 = icmp ugt i64 %55, 2305843009213693951
  br i1 %56, label %57, label %59

57:                                               ; preds = %50
  %58 = bitcast %"class.std::__1::vector.20"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %58) #9
  unreachable

59:                                               ; preds = %50
  %60 = sub i64 %42, %52
  %61 = ashr exact i64 %60, 3
  %62 = icmp ult i64 %61, 1152921504606846975
  br i1 %62, label %63, label %71

63:                                               ; preds = %59
  %64 = ashr exact i64 %60, 2
  %65 = icmp ult i64 %64, %55
  %66 = select i1 %65, i64 %55, i64 %64
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %76, label %68

68:                                               ; preds = %63
  %69 = icmp ugt i64 %66, 2305843009213693951
  br i1 %69, label %70, label %71

70:                                               ; preds = %68
  tail call void @abort() #9
  unreachable

71:                                               ; preds = %68, %59
  %72 = phi i64 [ %66, %68 ], [ 2305843009213693951, %59 ]
  %73 = shl i64 %72, 3
  %74 = tail call i8* @_Znwm(i64 %73) #8
  %75 = bitcast i8* %74 to %"class.gfx::Range"*
  br label %76

76:                                               ; preds = %71, %63
  %77 = phi i64 [ %72, %71 ], [ 0, %63 ]
  %78 = phi i8* [ %74, %71 ], [ null, %63 ]
  %79 = phi %"class.gfx::Range"* [ %75, %71 ], [ null, %63 ]
  %80 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %79, i64 %54
  %81 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %79, i64 %77
  %82 = ptrtoint %"class.gfx::Range"* %81 to i64
  %83 = trunc i64 %28 to i32
  %84 = trunc i64 %33 to i32
  %85 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %80, i64 0, i32 0
  store i32 %83, i32* %85, align 4
  %86 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %79, i64 %54, i32 1
  store i32 %84, i32* %86, align 4
  %87 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %80, i64 1
  %88 = ptrtoint %"class.gfx::Range"* %87 to i64
  %89 = ptrtoint %"class.gfx::Range"* %79 to i64
  %90 = icmp sgt i64 %53, 0
  br i1 %90, label %91, label %93

91:                                               ; preds = %76
  %92 = inttoptr i64 %52 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %78, i8* align 4 %92, i64 %53, i1 false) #7
  br label %93

93:                                               ; preds = %91, %76
  store i64 %89, i64* %19, align 8
  store i64 %88, i64* %18, align 8
  store i64 %82, i64* %20, align 8
  %94 = icmp eq i64 %52, 0
  br i1 %94, label %160, label %95

95:                                               ; preds = %93
  %96 = inttoptr i64 %52 to i8*
  tail call void @_ZdlPv(i8* %96) #8
  br label %160

97:                                               ; preds = %24
  %98 = icmp eq i64 %31, %33
  br i1 %98, label %160, label %99

99:                                               ; preds = %97
  %100 = icmp eq i64 %28, %33
  br i1 %100, label %160, label %101

101:                                              ; preds = %99
  %102 = load %"class.gfx::Range"*, %"class.gfx::Range"** %4, align 8
  %103 = load %"class.gfx::Range"*, %"class.gfx::Range"** %5, align 8
  %104 = icmp ult %"class.gfx::Range"* %102, %103
  %105 = ptrtoint %"class.gfx::Range"* %103 to i64
  br i1 %104, label %106, label %113

106:                                              ; preds = %101
  %107 = trunc i64 %28 to i32
  %108 = trunc i64 %33 to i32
  %109 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %102, i64 0, i32 0
  store i32 %107, i32* %109, align 4
  %110 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %102, i64 0, i32 1
  store i32 %108, i32* %110, align 4
  %111 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %102, i64 1
  %112 = ptrtoint %"class.gfx::Range"* %111 to i64
  store i64 %112, i64* %18, align 8
  br label %160

113:                                              ; preds = %101
  %114 = ptrtoint %"class.gfx::Range"* %102 to i64
  %115 = load i64, i64* %19, align 8
  %116 = sub i64 %114, %115
  %117 = ashr exact i64 %116, 3
  %118 = add nsw i64 %117, 1
  %119 = icmp ugt i64 %118, 2305843009213693951
  br i1 %119, label %120, label %122

120:                                              ; preds = %113
  %121 = bitcast %"class.std::__1::vector.20"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %121) #9
  unreachable

122:                                              ; preds = %113
  %123 = sub i64 %105, %115
  %124 = ashr exact i64 %123, 3
  %125 = icmp ult i64 %124, 1152921504606846975
  br i1 %125, label %126, label %134

126:                                              ; preds = %122
  %127 = ashr exact i64 %123, 2
  %128 = icmp ult i64 %127, %118
  %129 = select i1 %128, i64 %118, i64 %127
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %139, label %131

131:                                              ; preds = %126
  %132 = icmp ugt i64 %129, 2305843009213693951
  br i1 %132, label %133, label %134

133:                                              ; preds = %131
  tail call void @abort() #9
  unreachable

134:                                              ; preds = %131, %122
  %135 = phi i64 [ %129, %131 ], [ 2305843009213693951, %122 ]
  %136 = shl i64 %135, 3
  %137 = tail call i8* @_Znwm(i64 %136) #8
  %138 = bitcast i8* %137 to %"class.gfx::Range"*
  br label %139

139:                                              ; preds = %134, %126
  %140 = phi i64 [ %135, %134 ], [ 0, %126 ]
  %141 = phi i8* [ %137, %134 ], [ null, %126 ]
  %142 = phi %"class.gfx::Range"* [ %138, %134 ], [ null, %126 ]
  %143 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %142, i64 %117
  %144 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %142, i64 %140
  %145 = ptrtoint %"class.gfx::Range"* %144 to i64
  %146 = trunc i64 %28 to i32
  %147 = trunc i64 %33 to i32
  %148 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %143, i64 0, i32 0
  store i32 %146, i32* %148, align 4
  %149 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %142, i64 %117, i32 1
  store i32 %147, i32* %149, align 4
  %150 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %143, i64 1
  %151 = ptrtoint %"class.gfx::Range"* %150 to i64
  %152 = ptrtoint %"class.gfx::Range"* %142 to i64
  %153 = icmp sgt i64 %116, 0
  br i1 %153, label %154, label %156

154:                                              ; preds = %139
  %155 = inttoptr i64 %115 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %141, i8* align 4 %155, i64 %116, i1 false) #7
  br label %156

156:                                              ; preds = %154, %139
  store i64 %152, i64* %19, align 8
  store i64 %151, i64* %18, align 8
  store i64 %145, i64* %20, align 8
  %157 = icmp eq i64 %115, 0
  br i1 %157, label %160, label %158

158:                                              ; preds = %156
  %159 = inttoptr i64 %115 to i8*
  tail call void @_ZdlPv(i8* %159) #8
  br label %160

160:                                              ; preds = %99, %158, %156, %106, %43, %93, %95, %97
  %161 = phi i64 [ %28, %97 ], [ %31, %95 ], [ %31, %93 ], [ %31, %43 ], [ %31, %106 ], [ %31, %156 ], [ %31, %158 ], [ %31, %99 ]
  %162 = icmp eq i64 %29, 0
  br i1 %162, label %21, label %163

163:                                              ; preds = %160
  %164 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %17, align 8
  %165 = load i64, i64* %8, align 8
  br label %24

166:                                              ; preds = %21
  %167 = load %"class.gfx::Range"*, %"class.gfx::Range"** %4, align 8
  %168 = load %"class.gfx::Range"*, %"class.gfx::Range"** %5, align 8
  %169 = icmp ult %"class.gfx::Range"* %167, %168
  %170 = ptrtoint %"class.gfx::Range"* %168 to i64
  br i1 %169, label %171, label %178

171:                                              ; preds = %166
  %172 = trunc i64 %22 to i32
  %173 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %167, i64 0, i32 0
  store i32 %172, i32* %173, align 4
  %174 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %167, i64 0, i32 1
  store i32 0, i32* %174, align 4
  %175 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %167, i64 1
  %176 = ptrtoint %"class.gfx::Range"* %175 to i64
  %177 = bitcast %"class.gfx::Range"** %4 to i64*
  store i64 %176, i64* %177, align 8
  br label %227

178:                                              ; preds = %166
  %179 = ptrtoint %"class.gfx::Range"* %167 to i64
  %180 = bitcast %"class.gfx::Range"** %4 to i64*
  %181 = bitcast %"class.std::__1::vector.20"* %0 to i64*
  %182 = load i64, i64* %181, align 8
  %183 = sub i64 %179, %182
  %184 = ashr exact i64 %183, 3
  %185 = add nsw i64 %184, 1
  %186 = icmp ugt i64 %185, 2305843009213693951
  br i1 %186, label %187, label %189

187:                                              ; preds = %178
  %188 = bitcast %"class.std::__1::vector.20"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %188) #9
  unreachable

189:                                              ; preds = %178
  %190 = bitcast %"class.gfx::Range"** %5 to i64*
  %191 = sub i64 %170, %182
  %192 = ashr exact i64 %191, 3
  %193 = icmp ult i64 %192, 1152921504606846975
  br i1 %193, label %194, label %202

194:                                              ; preds = %189
  %195 = ashr exact i64 %191, 2
  %196 = icmp ult i64 %195, %185
  %197 = select i1 %196, i64 %185, i64 %195
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %207, label %199

199:                                              ; preds = %194
  %200 = icmp ugt i64 %197, 2305843009213693951
  br i1 %200, label %201, label %202

201:                                              ; preds = %199
  tail call void @abort() #9
  unreachable

202:                                              ; preds = %199, %189
  %203 = phi i64 [ %197, %199 ], [ 2305843009213693951, %189 ]
  %204 = shl i64 %203, 3
  %205 = tail call i8* @_Znwm(i64 %204) #8
  %206 = bitcast i8* %205 to %"class.gfx::Range"*
  br label %207

207:                                              ; preds = %202, %194
  %208 = phi i64 [ %203, %202 ], [ 0, %194 ]
  %209 = phi i8* [ %205, %202 ], [ null, %194 ]
  %210 = phi %"class.gfx::Range"* [ %206, %202 ], [ null, %194 ]
  %211 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %210, i64 %184
  %212 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %210, i64 %208
  %213 = ptrtoint %"class.gfx::Range"* %212 to i64
  %214 = trunc i64 %22 to i32
  %215 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %211, i64 0, i32 0
  store i32 %214, i32* %215, align 4
  %216 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %210, i64 %184, i32 1
  store i32 0, i32* %216, align 4
  %217 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %211, i64 1
  %218 = ptrtoint %"class.gfx::Range"* %217 to i64
  %219 = ptrtoint %"class.gfx::Range"* %210 to i64
  %220 = icmp sgt i64 %183, 0
  br i1 %220, label %221, label %223

221:                                              ; preds = %207
  %222 = inttoptr i64 %182 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %209, i8* align 4 %222, i64 %183, i1 false) #7
  br label %223

223:                                              ; preds = %221, %207
  store i64 %219, i64* %181, align 8
  store i64 %218, i64* %180, align 8
  store i64 %213, i64* %190, align 8
  %224 = icmp eq i64 %182, 0
  br i1 %224, label %227, label %225

225:                                              ; preds = %223
  %226 = inttoptr i64 %182 to i8*
  tail call void @_ZdlPv(i8* %226) #8
  br label %227

227:                                              ; preds = %171, %223, %225, %21
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEC2ERKS5_mmRKS4_(%"class.std::__1::basic_string"*, %"class.std::__1::basic_string"* dereferenceable(24), i64, i64, %"class.std::__1::allocator"* dereferenceable(1)) unnamed_addr #0 comdat align 2 {
  %6 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = zext i8 %8 to i64
  %13 = select i1 %9, i64 %11, i64 %12
  %14 = icmp ult i64 %13, %2
  br i1 %14, label %15, label %17

15:                                               ; preds = %5
  %16 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"* %16) #9
  unreachable

17:                                               ; preds = %5
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i16*, i16** %18, align 8
  %20 = bitcast %"class.std::__1::basic_string"* %1 to i16*
  %21 = select i1 %9, i16* %19, i16* %20
  %22 = getelementptr inbounds i16, i16* %21, i64 %2
  %23 = sub i64 %13, %2
  %24 = icmp ult i64 %23, %3
  %25 = select i1 %24, i64 %23, i64 %3
  %26 = icmp ugt i64 %25, 9223372036854775791
  br i1 %26, label %27, label %29

27:                                               ; preds = %17
  %28 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %28) #9
  unreachable

29:                                               ; preds = %17
  %30 = icmp ult i64 %25, 11
  br i1 %30, label %44, label %31

31:                                               ; preds = %29
  %32 = add nuw nsw i64 %25, 8
  %33 = and i64 %32, -8
  %34 = icmp slt i64 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %31
  tail call void @abort() #9
  unreachable

36:                                               ; preds = %31
  %37 = shl i64 %33, 1
  %38 = tail call i8* @_Znwm(i64 %37) #8
  %39 = bitcast i8* %38 to i16*
  %40 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %38, i8** %40, align 8
  %41 = or i64 %33, -9223372036854775808
  %42 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %41, i64* %42, align 8
  %43 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %25, i64* %43, align 8
  br label %50

44:                                               ; preds = %29
  %45 = trunc i64 %25 to i8
  %46 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %46, i64 0, i32 1, i32 1
  store i8 %45, i8* %47, align 1
  %48 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %49 = icmp eq i64 %25, 0
  br i1 %49, label %195, label %50

50:                                               ; preds = %44, %36
  %51 = phi i16* [ %39, %36 ], [ %48, %44 ]
  %52 = icmp ult i64 %25, 16
  br i1 %52, label %142, label %53

53:                                               ; preds = %50
  %54 = getelementptr i16, i16* %51, i64 %25
  %55 = add i64 %25, %2
  %56 = getelementptr i16, i16* %21, i64 %55
  %57 = icmp ult i16* %51, %56
  %58 = icmp ult i16* %22, %54
  %59 = and i1 %57, %58
  br i1 %59, label %142, label %60

60:                                               ; preds = %53
  %61 = and i64 %25, -16
  %62 = sub i64 %25, %61
  %63 = getelementptr i16, i16* %22, i64 %61
  %64 = getelementptr i16, i16* %51, i64 %61
  %65 = add i64 %61, -16
  %66 = lshr exact i64 %65, 4
  %67 = add nuw nsw i64 %66, 1
  %68 = and i64 %67, 3
  %69 = icmp ult i64 %65, 48
  br i1 %69, label %121, label %70

70:                                               ; preds = %60
  %71 = sub nsw i64 %67, %68
  br label %72

72:                                               ; preds = %72, %70
  %73 = phi i64 [ 0, %70 ], [ %118, %72 ]
  %74 = phi i64 [ %71, %70 ], [ %119, %72 ]
  %75 = getelementptr i16, i16* %22, i64 %73
  %76 = getelementptr i16, i16* %51, i64 %73
  %77 = bitcast i16* %75 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2, !alias.scope !13
  %79 = getelementptr i16, i16* %75, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !13
  %82 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %82, align 2, !alias.scope !16, !noalias !13
  %83 = getelementptr i16, i16* %76, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %84, align 2, !alias.scope !16, !noalias !13
  %85 = or i64 %73, 16
  %86 = getelementptr i16, i16* %22, i64 %85
  %87 = getelementptr i16, i16* %51, i64 %85
  %88 = bitcast i16* %86 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2, !alias.scope !13
  %90 = getelementptr i16, i16* %86, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !13
  %93 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %93, align 2, !alias.scope !16, !noalias !13
  %94 = getelementptr i16, i16* %87, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %95, align 2, !alias.scope !16, !noalias !13
  %96 = or i64 %73, 32
  %97 = getelementptr i16, i16* %22, i64 %96
  %98 = getelementptr i16, i16* %51, i64 %96
  %99 = bitcast i16* %97 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !13
  %101 = getelementptr i16, i16* %97, i64 8
  %102 = bitcast i16* %101 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 2, !alias.scope !13
  %104 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %104, align 2, !alias.scope !16, !noalias !13
  %105 = getelementptr i16, i16* %98, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %106, align 2, !alias.scope !16, !noalias !13
  %107 = or i64 %73, 48
  %108 = getelementptr i16, i16* %22, i64 %107
  %109 = getelementptr i16, i16* %51, i64 %107
  %110 = bitcast i16* %108 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !13
  %112 = getelementptr i16, i16* %108, i64 8
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2, !alias.scope !13
  %115 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %115, align 2, !alias.scope !16, !noalias !13
  %116 = getelementptr i16, i16* %109, i64 8
  %117 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %117, align 2, !alias.scope !16, !noalias !13
  %118 = add i64 %73, 64
  %119 = add i64 %74, -4
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %72, !llvm.loop !18

121:                                              ; preds = %72, %60
  %122 = phi i64 [ 0, %60 ], [ %118, %72 ]
  %123 = icmp eq i64 %68, 0
  br i1 %123, label %140, label %124

124:                                              ; preds = %121, %124
  %125 = phi i64 [ %137, %124 ], [ %122, %121 ]
  %126 = phi i64 [ %138, %124 ], [ %68, %121 ]
  %127 = getelementptr i16, i16* %22, i64 %125
  %128 = getelementptr i16, i16* %51, i64 %125
  %129 = bitcast i16* %127 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 2, !alias.scope !13
  %131 = getelementptr i16, i16* %127, i64 8
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 2, !alias.scope !13
  %134 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %134, align 2, !alias.scope !16, !noalias !13
  %135 = getelementptr i16, i16* %128, i64 8
  %136 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %133, <8 x i16>* %136, align 2, !alias.scope !16, !noalias !13
  %137 = add i64 %125, 16
  %138 = add i64 %126, -1
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %124, !llvm.loop !19

140:                                              ; preds = %124, %121
  %141 = icmp eq i64 %25, %61
  br i1 %141, label %195, label %142

142:                                              ; preds = %140, %53, %50
  %143 = phi i64 [ %25, %53 ], [ %25, %50 ], [ %62, %140 ]
  %144 = phi i16* [ %22, %53 ], [ %22, %50 ], [ %63, %140 ]
  %145 = phi i16* [ %51, %53 ], [ %51, %50 ], [ %64, %140 ]
  %146 = add i64 %143, -1
  %147 = and i64 %143, 7
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %160, label %149

149:                                              ; preds = %142, %149
  %150 = phi i64 [ %155, %149 ], [ %143, %142 ]
  %151 = phi i16* [ %157, %149 ], [ %144, %142 ]
  %152 = phi i16* [ %156, %149 ], [ %145, %142 ]
  %153 = phi i64 [ %158, %149 ], [ %147, %142 ]
  %154 = load i16, i16* %151, align 2
  store i16 %154, i16* %152, align 2
  %155 = add i64 %150, -1
  %156 = getelementptr inbounds i16, i16* %152, i64 1
  %157 = getelementptr inbounds i16, i16* %151, i64 1
  %158 = add i64 %153, -1
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %149, !llvm.loop !20

160:                                              ; preds = %149, %142
  %161 = phi i64 [ %143, %142 ], [ %155, %149 ]
  %162 = phi i16* [ %144, %142 ], [ %157, %149 ]
  %163 = phi i16* [ %145, %142 ], [ %156, %149 ]
  %164 = icmp ult i64 %146, 7
  br i1 %164, label %195, label %165

165:                                              ; preds = %160, %165
  %166 = phi i64 [ %191, %165 ], [ %161, %160 ]
  %167 = phi i16* [ %193, %165 ], [ %162, %160 ]
  %168 = phi i16* [ %192, %165 ], [ %163, %160 ]
  %169 = load i16, i16* %167, align 2
  store i16 %169, i16* %168, align 2
  %170 = getelementptr inbounds i16, i16* %168, i64 1
  %171 = getelementptr inbounds i16, i16* %167, i64 1
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds i16, i16* %168, i64 2
  %174 = getelementptr inbounds i16, i16* %167, i64 2
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %168, i64 3
  %177 = getelementptr inbounds i16, i16* %167, i64 3
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %168, i64 4
  %180 = getelementptr inbounds i16, i16* %167, i64 4
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %168, i64 5
  %183 = getelementptr inbounds i16, i16* %167, i64 5
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = getelementptr inbounds i16, i16* %168, i64 6
  %186 = getelementptr inbounds i16, i16* %167, i64 6
  %187 = load i16, i16* %186, align 2
  store i16 %187, i16* %185, align 2
  %188 = getelementptr inbounds i16, i16* %168, i64 7
  %189 = getelementptr inbounds i16, i16* %167, i64 7
  %190 = load i16, i16* %189, align 2
  store i16 %190, i16* %188, align 2
  %191 = add i64 %166, -8
  %192 = getelementptr inbounds i16, i16* %168, i64 8
  %193 = getelementptr inbounds i16, i16* %167, i64 8
  %194 = icmp eq i64 %191, 0
  br i1 %194, label %195, label %165, !llvm.loop !21

195:                                              ; preds = %160, %165, %140, %44
  %196 = phi i16* [ %48, %44 ], [ %51, %140 ], [ %51, %165 ], [ %51, %160 ]
  %197 = getelementptr inbounds i16, i16* %196, i64 %25
  store i16 0, i16* %197, align 2
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !10}
!21 = distinct !{!21, !8}
