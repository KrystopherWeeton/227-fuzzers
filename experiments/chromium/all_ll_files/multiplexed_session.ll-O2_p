; ModuleID = '../../net/spdy/multiplexed_session.cc'
source_filename = "../../net/spdy/multiplexed_session.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.net::MultiplexedSessionHandle" = type <{ i32 (...)**, %"class.base::WeakPtr", %"class.net::SSLInfo", i8, [7 x i8] }>
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%"class.net::SSLInfo" = type <{ %class.scoped_refptr.6, %class.scoped_refptr.6, i32, i16, i16, i32, i8, i8, i8, i8, i32, [4 x i8], %"class.std::__1::vector.24", %"class.std::__1::basic_string", %"class.std::__1::vector.32", i32, %"struct.net::OCSPVerifyResult", i8, [3 x i8] }>
%class.scoped_refptr.6 = type { %"class.net::X509Certificate"* }
%"class.net::X509Certificate" = type { %"class.base::RefCountedThreadSafe.7", %"struct.net::CertPrincipal", %"struct.net::CertPrincipal", %"class.base::Time", %"class.base::Time", %"class.std::__1::basic_string", %"class.std::__1::unique_ptr", %"class.std::__1::vector.17" }
%"class.base::RefCountedThreadSafe.7" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.net::CertPrincipal" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::basic_string"* }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %struct.crypto_buffer_st* }
%struct.crypto_buffer_st = type opaque
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { %"class.net::HashValue"*, %"class.net::HashValue"*, %"class.std::__1::__compressed_pair.27" }
%"class.net::HashValue" = type { i32, %union.anon.26 }
%union.anon.26 = type { %"struct.net::SHA256HashValue" }
%"struct.net::SHA256HashValue" = type { [32 x i8] }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.net::HashValue"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"struct.net::SignedCertificateTimestampAndStatus"*, %"struct.net::SignedCertificateTimestampAndStatus"*, %"class.std::__1::__compressed_pair.36" }
%"struct.net::SignedCertificateTimestampAndStatus" = type <{ %class.scoped_refptr.34, i32, [4 x i8] }>
%class.scoped_refptr.34 = type { %"struct.net::ct::SignedCertificateTimestamp"* }
%"struct.net::ct::SignedCertificateTimestamp" = type { %"class.base::RefCountedThreadSafe.35", i32, %"class.std::__1::basic_string", %"class.base::Time", %"class.std::__1::basic_string", %"struct.net::ct::DigitallySigned", i32, %"class.std::__1::basic_string" }
%"class.base::RefCountedThreadSafe.35" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.net::ct::DigitallySigned" = type { i32, i32, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"struct.net::SignedCertificateTimestampAndStatus"* }
%"struct.net::OCSPVerifyResult" = type { i32, i32 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.net::MultiplexedSession" = type { i32 (...)** }
%"class.net::IPEndPoint" = type { %"class.net::IPAddress", i16 }
%"class.net::IPAddress" = type { %"class.net::IPAddressBytes" }
%"class.net::IPAddressBytes" = type { %"struct.std::__1::array", i8 }
%"struct.std::__1::array" = type { [16 x i8] }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.41 }
%union.anon.41 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }

@_ZTVN3net24MultiplexedSessionHandleE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.net::MultiplexedSessionHandle"*)* @_ZN3net24MultiplexedSessionHandleD2Ev to i8*), i8* bitcast (void (%"class.net::MultiplexedSessionHandle"*)* @_ZN3net24MultiplexedSessionHandleD0Ev to i8*)] }, align 8
@.str = private unnamed_addr constant [29 x i8] c"../../base/memory/weak_ptr.h\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"ref_.IsValid()\00", align 1

@_ZN3net24MultiplexedSessionHandleC1EN4base7WeakPtrINS_18MultiplexedSessionEEE = hidden unnamed_addr alias void (%"class.net::MultiplexedSessionHandle"*, %"class.base::WeakPtr"*), void (%"class.net::MultiplexedSessionHandle"*, %"class.base::WeakPtr"*)* @_ZN3net24MultiplexedSessionHandleC2EN4base7WeakPtrINS_18MultiplexedSessionEEE
@_ZN3net24MultiplexedSessionHandleD1Ev = hidden unnamed_addr alias void (%"class.net::MultiplexedSessionHandle"*), void (%"class.net::MultiplexedSessionHandle"*)* @_ZN3net24MultiplexedSessionHandleD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net24MultiplexedSessionHandleC2EN4base7WeakPtrINS_18MultiplexedSessionEEE(%"class.net::MultiplexedSessionHandle"*, %"class.base::WeakPtr"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.net::MultiplexedSessionHandle", %"class.net::MultiplexedSessionHandle"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3net24MultiplexedSessionHandleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.net::MultiplexedSessionHandle", %"class.net::MultiplexedSessionHandle"* %0, i64 0, i32 1, i32 0, i32 0
  %6 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %1, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal13WeakReferenceC1ERKS1_(%"class.base::internal::WeakReference"* %5, %"class.base::internal::WeakReference"* dereferenceable(8) %6) #5
  %7 = getelementptr inbounds %"class.net::MultiplexedSessionHandle", %"class.net::MultiplexedSessionHandle"* %0, i64 0, i32 1, i32 0, i32 1
  %8 = getelementptr inbounds %"class.base::WeakPtr", %"class.base::WeakPtr"* %1, i64 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %7, align 8
  %10 = getelementptr inbounds %"class.net::MultiplexedSessionHandle", %"class.net::MultiplexedSessionHandle"* %0, i64 0, i32 2
  tail call void @_ZN3net7SSLInfoC1Ev(%"class.net::SSLInfo"* %10) #5
  %11 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %5) #5
  br i1 %11, label %15, label %12

12:                                               ; preds = %2
  %13 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #5
  %14 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #5
  br label %15

15:                                               ; preds = %12, %2
  %16 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %5) #5
  br i1 %16, label %17, label %21

17:                                               ; preds = %15
  %18 = bitcast i64* %7 to %"class.net::MultiplexedSession"**
  %19 = load %"class.net::MultiplexedSession"*, %"class.net::MultiplexedSession"** %18, align 8
  %20 = bitcast %"class.net::MultiplexedSession"* %19 to i1 (%"class.net::MultiplexedSession"*, %"class.net::SSLInfo"*)***
  br label %21

21:                                               ; preds = %15, %17
  %22 = phi i1 (%"class.net::MultiplexedSession"*, %"class.net::SSLInfo"*)*** [ %20, %17 ], [ null, %15 ]
  %23 = phi %"class.net::MultiplexedSession"* [ %19, %17 ], [ null, %15 ]
  %24 = load i1 (%"class.net::MultiplexedSession"*, %"class.net::SSLInfo"*)**, i1 (%"class.net::MultiplexedSession"*, %"class.net::SSLInfo"*)*** %22, align 8
  %25 = getelementptr inbounds i1 (%"class.net::MultiplexedSession"*, %"class.net::SSLInfo"*)*, i1 (%"class.net::MultiplexedSession"*, %"class.net::SSLInfo"*)** %24, i64 2
  %26 = load i1 (%"class.net::MultiplexedSession"*, %"class.net::SSLInfo"*)*, i1 (%"class.net::MultiplexedSession"*, %"class.net::SSLInfo"*)** %25, align 8
  %27 = call zeroext i1 %26(%"class.net::MultiplexedSession"* %23, %"class.net::SSLInfo"* %10) #5
  %28 = getelementptr inbounds %"class.net::MultiplexedSessionHandle", %"class.net::MultiplexedSessionHandle"* %0, i64 0, i32 3
  %29 = zext i1 %27 to i8
  store i8 %29, i8* %28, align 8
  ret void
}

declare void @_ZN3net7SSLInfoC1Ev(%"class.net::SSLInfo"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net24MultiplexedSessionHandle11SaveSSLInfoEv(%"class.net::MultiplexedSessionHandle"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = getelementptr inbounds %"class.net::MultiplexedSessionHandle", %"class.net::MultiplexedSessionHandle"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %3) #5
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #5
  %7 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #5
  br label %8

8:                                                ; preds = %5, %1
  %9 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %3) #5
  br i1 %9, label %10, label %15

10:                                               ; preds = %8
  %11 = getelementptr inbounds %"class.net::MultiplexedSessionHandle", %"class.net::MultiplexedSessionHandle"* %0, i64 0, i32 1, i32 0, i32 1
  %12 = bitcast i64* %11 to %"class.net::MultiplexedSession"**
  %13 = load %"class.net::MultiplexedSession"*, %"class.net::MultiplexedSession"** %12, align 8
  %14 = bitcast %"class.net::MultiplexedSession"* %13 to i1 (%"class.net::MultiplexedSession"*, %"class.net::SSLInfo"*)***
  br label %15

15:                                               ; preds = %8, %10
  %16 = phi i1 (%"class.net::MultiplexedSession"*, %"class.net::SSLInfo"*)*** [ %14, %10 ], [ null, %8 ]
  %17 = phi %"class.net::MultiplexedSession"* [ %13, %10 ], [ null, %8 ]
  %18 = getelementptr inbounds %"class.net::MultiplexedSessionHandle", %"class.net::MultiplexedSessionHandle"* %0, i64 0, i32 2
  %19 = load i1 (%"class.net::MultiplexedSession"*, %"class.net::SSLInfo"*)**, i1 (%"class.net::MultiplexedSession"*, %"class.net::SSLInfo"*)*** %16, align 8
  %20 = getelementptr inbounds i1 (%"class.net::MultiplexedSession"*, %"class.net::SSLInfo"*)*, i1 (%"class.net::MultiplexedSession"*, %"class.net::SSLInfo"*)** %19, i64 2
  %21 = load i1 (%"class.net::MultiplexedSession"*, %"class.net::SSLInfo"*)*, i1 (%"class.net::MultiplexedSession"*, %"class.net::SSLInfo"*)** %20, align 8
  %22 = call zeroext i1 %21(%"class.net::MultiplexedSession"* %17, %"class.net::SSLInfo"* %18) #5
  %23 = getelementptr inbounds %"class.net::MultiplexedSessionHandle", %"class.net::MultiplexedSessionHandle"* %0, i64 0, i32 3
  %24 = zext i1 %22 to i8
  store i8 %24, i8* %23, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net24MultiplexedSessionHandleD2Ev(%"class.net::MultiplexedSessionHandle"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::MultiplexedSessionHandle", %"class.net::MultiplexedSessionHandle"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3net24MultiplexedSessionHandleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::MultiplexedSessionHandle", %"class.net::MultiplexedSessionHandle"* %0, i64 0, i32 2
  tail call void @_ZN3net7SSLInfoD1Ev(%"class.net::SSLInfo"* %3) #5
  %4 = getelementptr inbounds %"class.net::MultiplexedSessionHandle", %"class.net::MultiplexedSessionHandle"* %0, i64 0, i32 1, i32 0
  tail call void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"* %4) #5
  ret void
}

; Function Attrs: nounwind
declare void @_ZN3net7SSLInfoD1Ev(%"class.net::SSLInfo"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net24MultiplexedSessionHandleD0Ev(%"class.net::MultiplexedSessionHandle"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::MultiplexedSessionHandle", %"class.net::MultiplexedSessionHandle"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3net24MultiplexedSessionHandleE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.net::MultiplexedSessionHandle", %"class.net::MultiplexedSessionHandle"* %0, i64 0, i32 2
  tail call void @_ZN3net7SSLInfoD1Ev(%"class.net::SSLInfo"* %3) #5
  %4 = getelementptr inbounds %"class.net::MultiplexedSessionHandle", %"class.net::MultiplexedSessionHandle"* %0, i64 0, i32 1, i32 0
  tail call void @_ZN4base8internal11WeakPtrBaseD2Ev(%"class.base::internal::WeakPtrBase"* %4) #5
  %5 = bitcast %"class.net::MultiplexedSessionHandle"* %0 to i8*
  tail call void @_ZdlPv(i8* %5) #6
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net24MultiplexedSessionHandle17GetRemoteEndpointEPNS_10IPEndPointE(%"class.net::MultiplexedSessionHandle"*, %"class.net::IPEndPoint"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.net::MultiplexedSessionHandle", %"class.net::MultiplexedSessionHandle"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %4) #5
  br i1 %5, label %6, label %28

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.net::MultiplexedSessionHandle", %"class.net::MultiplexedSessionHandle"* %0, i64 0, i32 1, i32 0, i32 1
  %8 = bitcast i64* %7 to %"class.net::MultiplexedSession"**
  %9 = load %"class.net::MultiplexedSession"*, %"class.net::MultiplexedSession"** %8, align 8
  %10 = icmp eq %"class.net::MultiplexedSession"* %9, null
  br i1 %10, label %28, label %11

11:                                               ; preds = %6
  %12 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %4) #5
  br i1 %12, label %16, label %13

13:                                               ; preds = %11
  %14 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #5
  %15 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #5
  br label %16

16:                                               ; preds = %13, %11
  %17 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %4) #5
  br i1 %17, label %18, label %21

18:                                               ; preds = %16
  %19 = load %"class.net::MultiplexedSession"*, %"class.net::MultiplexedSession"** %8, align 8
  %20 = bitcast %"class.net::MultiplexedSession"* %19 to i1 (%"class.net::MultiplexedSession"*, %"class.net::IPEndPoint"*)***
  br label %21

21:                                               ; preds = %16, %18
  %22 = phi i1 (%"class.net::MultiplexedSession"*, %"class.net::IPEndPoint"*)*** [ %20, %18 ], [ null, %16 ]
  %23 = phi %"class.net::MultiplexedSession"* [ %19, %18 ], [ null, %16 ]
  %24 = load i1 (%"class.net::MultiplexedSession"*, %"class.net::IPEndPoint"*)**, i1 (%"class.net::MultiplexedSession"*, %"class.net::IPEndPoint"*)*** %22, align 8
  %25 = getelementptr inbounds i1 (%"class.net::MultiplexedSession"*, %"class.net::IPEndPoint"*)*, i1 (%"class.net::MultiplexedSession"*, %"class.net::IPEndPoint"*)** %24, i64 3
  %26 = load i1 (%"class.net::MultiplexedSession"*, %"class.net::IPEndPoint"*)*, i1 (%"class.net::MultiplexedSession"*, %"class.net::IPEndPoint"*)** %25, align 8
  %27 = call zeroext i1 %26(%"class.net::MultiplexedSession"* %23, %"class.net::IPEndPoint"* %1) #5
  br label %28

28:                                               ; preds = %6, %2, %21
  %29 = phi i1 [ %27, %21 ], [ false, %6 ], [ false, %2 ]
  ret i1 %29
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3net24MultiplexedSessionHandle10GetSSLInfoEPNS_7SSLInfoE(%"class.net::MultiplexedSessionHandle"*, %"class.net::SSLInfo"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.net::MultiplexedSessionHandle", %"class.net::MultiplexedSessionHandle"* %0, i64 0, i32 3
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.net::MultiplexedSessionHandle", %"class.net::MultiplexedSessionHandle"* %0, i64 0, i32 2
  %8 = tail call dereferenceable(128) %"class.net::SSLInfo"* @_ZN3net7SSLInfoaSERKS0_(%"class.net::SSLInfo"* %1, %"class.net::SSLInfo"* dereferenceable(128) %7) #5
  br label %9

9:                                                ; preds = %2, %6
  %10 = phi i1 [ true, %6 ], [ false, %2 ]
  ret i1 %10
}

declare dereferenceable(128) %"class.net::SSLInfo"* @_ZN3net7SSLInfoaSERKS0_(%"class.net::SSLInfo"*, %"class.net::SSLInfo"* dereferenceable(128)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden { i8*, i64 } @_ZNK3net24MultiplexedSessionHandle27GetAcceptChViaAlpsForOriginERKN3url6OriginE(%"class.net::MultiplexedSessionHandle"*, %"class.url::Origin"* dereferenceable(80)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.net::MultiplexedSessionHandle", %"class.net::MultiplexedSessionHandle"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %4) #5
  br i1 %5, label %6, label %30

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.net::MultiplexedSessionHandle", %"class.net::MultiplexedSessionHandle"* %0, i64 0, i32 1, i32 0, i32 1
  %8 = bitcast i64* %7 to %"class.net::MultiplexedSession"**
  %9 = load %"class.net::MultiplexedSession"*, %"class.net::MultiplexedSession"** %8, align 8
  %10 = icmp eq %"class.net::MultiplexedSession"* %9, null
  br i1 %10, label %30, label %11

11:                                               ; preds = %6
  %12 = tail call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %4) #5
  br i1 %12, label %16, label %13

13:                                               ; preds = %11
  %14 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #5
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i32 255, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #5
  %15 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #5
  br label %16

16:                                               ; preds = %13, %11
  %17 = call zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"* %4) #5
  br i1 %17, label %18, label %21

18:                                               ; preds = %16
  %19 = load %"class.net::MultiplexedSession"*, %"class.net::MultiplexedSession"** %8, align 8
  %20 = bitcast %"class.net::MultiplexedSession"* %19 to { i8*, i64 } (%"class.net::MultiplexedSession"*, %"class.url::Origin"*)***
  br label %21

21:                                               ; preds = %16, %18
  %22 = phi { i8*, i64 } (%"class.net::MultiplexedSession"*, %"class.url::Origin"*)*** [ %20, %18 ], [ null, %16 ]
  %23 = phi %"class.net::MultiplexedSession"* [ %19, %18 ], [ null, %16 ]
  %24 = load { i8*, i64 } (%"class.net::MultiplexedSession"*, %"class.url::Origin"*)**, { i8*, i64 } (%"class.net::MultiplexedSession"*, %"class.url::Origin"*)*** %22, align 8
  %25 = getelementptr inbounds { i8*, i64 } (%"class.net::MultiplexedSession"*, %"class.url::Origin"*)*, { i8*, i64 } (%"class.net::MultiplexedSession"*, %"class.url::Origin"*)** %24, i64 4
  %26 = load { i8*, i64 } (%"class.net::MultiplexedSession"*, %"class.url::Origin"*)*, { i8*, i64 } (%"class.net::MultiplexedSession"*, %"class.url::Origin"*)** %25, align 8
  %27 = call { i8*, i64 } %26(%"class.net::MultiplexedSession"* %23, %"class.url::Origin"* dereferenceable(80) %1) #5
  %28 = extractvalue { i8*, i64 } %27, 0
  %29 = extractvalue { i8*, i64 } %27, 1
  br label %30

30:                                               ; preds = %6, %2, %21
  %31 = phi i8* [ %28, %21 ], [ null, %6 ], [ null, %2 ]
  %32 = phi i64 [ %29, %21 ], [ 0, %6 ], [ 0, %2 ]
  %33 = insertvalue { i8*, i64 } undef, i8* %31, 0
  %34 = insertvalue { i8*, i64 } %33, i64 %32, 1
  ret { i8*, i64 } %34
}

declare void @_ZN4base8internal13WeakReferenceC1ERKS1_(%"class.base::internal::WeakReference"*, %"class.base::internal::WeakReference"* dereferenceable(8)) unnamed_addr #1

declare zeroext i1 @_ZNK4base8internal13WeakReference7IsValidEv(%"class.base::internal::WeakReference"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
