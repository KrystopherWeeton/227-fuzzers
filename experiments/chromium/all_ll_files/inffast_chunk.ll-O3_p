; ModuleID = '../../third_party/zlib/contrib/optimizations/inffast_chunk.c'
source_filename = "../../third_party/zlib/contrib/optimizations/inffast_chunk.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.z_stream_s = type { i8*, i32, i64, i8*, i32, i64, i8*, %struct.internal_state*, i8* (i8*, i32, i32)*, void (i8*, i8*)*, i8*, i32, i64, i64 }
%struct.internal_state = type opaque
%struct.inflate_state = type { %struct.z_stream_s*, i32, i32, i32, i32, i32, i32, i64, i64, %struct.Cr_z_gz_header_s*, i32, i32, i32, i32, i8*, i64, i32, i32, i32, i32, %struct.code*, %struct.code*, i32, i32, i32, i32, i32, i32, %struct.code*, [320 x i16], [288 x i16], [1444 x %struct.code], i32, i32, i32 }
%struct.Cr_z_gz_header_s = type { i32, i64, i32, i32, i8*, i32, i32, i8*, i32, i8*, i32, i32, i32 }
%struct.code = type { i8, i8, i16 }

@.str = private unnamed_addr constant [30 x i8] c"invalid distance too far back\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"invalid distance code\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"invalid literal/length code\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @Cr_z_inflate_fast_chunk_(%struct.z_stream_s* nocapture, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 7
  %4 = bitcast %struct.internal_state** %3 to %struct.inflate_state**
  %5 = load %struct.inflate_state*, %struct.inflate_state** %4, align 8
  %6 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = add i32 %9, -7
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds i8, i8* %7, i64 %11
  %13 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 3
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 4
  %16 = load i32, i32* %15, align 8
  %17 = sub i32 %1, %16
  %18 = zext i32 %17 to i64
  %19 = sub nsw i64 0, %18
  %20 = getelementptr inbounds i8, i8* %14, i64 %19
  %21 = add i32 %16, -257
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %14, i64 %22
  %24 = zext i32 %16 to i64
  %25 = getelementptr inbounds i8, i8* %14, i64 %24
  %26 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %5, i64 0, i32 11
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %5, i64 0, i32 12
  %29 = load i32, i32* %28, align 8
  %30 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %5, i64 0, i32 13
  %31 = load i32, i32* %30, align 4
  %32 = icmp ne i32 %31, 0
  %33 = icmp ult i32 %29, %27
  %34 = or i1 %33, %32
  %35 = select i1 %34, i32 %31, i32 %27
  %36 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %5, i64 0, i32 14
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %5, i64 0, i32 15
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %5, i64 0, i32 16
  %41 = load i32, i32* %40, align 8
  %42 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %5, i64 0, i32 20
  %43 = load %struct.code*, %struct.code** %42, align 8
  %44 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %5, i64 0, i32 21
  %45 = load %struct.code*, %struct.code** %44, align 8
  %46 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %5, i64 0, i32 22
  %47 = load i32, i32* %46, align 8
  %48 = shl nsw i32 -1, %47
  %49 = xor i32 %48, -1
  %50 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %5, i64 0, i32 23
  %51 = load i32, i32* %50, align 4
  %52 = shl nsw i32 -1, %51
  %53 = xor i32 %52, -1
  %54 = zext i32 %49 to i64
  %55 = zext i32 %53 to i64
  %56 = ptrtoint i8* %20 to i64
  %57 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %5, i64 0, i32 32
  %58 = ptrtoint i8* %25 to i64
  br label %59

59:                                               ; preds = %1389, %2
  %60 = phi i8* [ %7, %2 ], [ %1390, %1389 ]
  %61 = phi i8* [ %14, %2 ], [ %1391, %1389 ]
  %62 = phi i64 [ %39, %2 ], [ %1392, %1389 ]
  %63 = phi i32 [ %41, %2 ], [ %1393, %1389 ]
  %64 = icmp ult i32 %63, 15
  br i1 %64, label %65, label %73

65:                                               ; preds = %59
  %66 = bitcast i8* %60 to i64*
  %67 = load i64, i64* %66, align 1
  %68 = zext i32 %63 to i64
  %69 = shl i64 %67, %68
  %70 = or i64 %69, %62
  %71 = getelementptr inbounds i8, i8* %60, i64 6
  %72 = add nuw nsw i32 %63, 48
  br label %73

73:                                               ; preds = %65, %59
  %74 = phi i8* [ %71, %65 ], [ %60, %59 ]
  %75 = phi i64 [ %70, %65 ], [ %62, %59 ]
  %76 = phi i32 [ %72, %65 ], [ %63, %59 ]
  %77 = and i64 %75, %54
  %78 = getelementptr inbounds %struct.code, %struct.code* %43, i64 %77, i32 0
  %79 = getelementptr inbounds %struct.code, %struct.code* %43, i64 %77, i32 1
  %80 = getelementptr inbounds %struct.code, %struct.code* %43, i64 %77, i32 2
  %81 = load i8, i8* %78, align 2
  %82 = load i8, i8* %79, align 1
  %83 = load i16, i16* %80, align 2
  %84 = zext i8 %82 to i32
  %85 = zext i8 %82 to i64
  %86 = lshr i64 %75, %85
  %87 = sub i32 %76, %84
  %88 = icmp eq i8 %81, 0
  br i1 %88, label %89, label %95

89:                                               ; preds = %1368, %73
  %90 = phi i16 [ %83, %73 ], [ %1380, %1368 ]
  %91 = phi i64 [ %86, %73 ], [ %1383, %1368 ]
  %92 = phi i32 [ %87, %73 ], [ %1384, %1368 ]
  %93 = trunc i16 %90 to i8
  %94 = getelementptr inbounds i8, i8* %61, i64 1
  store i8 %93, i8* %61, align 1
  br label %1389

95:                                               ; preds = %73, %1368
  %96 = phi i8 [ %1378, %1368 ], [ %81, %73 ]
  %97 = phi i32 [ %1384, %1368 ], [ %87, %73 ]
  %98 = phi i64 [ %1383, %1368 ], [ %86, %73 ]
  %99 = phi i16 [ %1380, %1368 ], [ %83, %73 ]
  %100 = zext i8 %96 to i32
  %101 = and i32 %100, 16
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %1365, label %103

103:                                              ; preds = %95
  %104 = zext i16 %99 to i32
  %105 = and i32 %100, 15
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %129, label %107

107:                                              ; preds = %103
  %108 = icmp ult i32 %97, %105
  br i1 %108, label %109, label %117

109:                                              ; preds = %107
  %110 = bitcast i8* %74 to i64*
  %111 = load i64, i64* %110, align 1
  %112 = zext i32 %97 to i64
  %113 = shl i64 %111, %112
  %114 = or i64 %113, %98
  %115 = getelementptr inbounds i8, i8* %74, i64 6
  %116 = add i32 %97, 48
  br label %117

117:                                              ; preds = %109, %107
  %118 = phi i8* [ %115, %109 ], [ %74, %107 ]
  %119 = phi i64 [ %114, %109 ], [ %98, %107 ]
  %120 = phi i32 [ %116, %109 ], [ %97, %107 ]
  %121 = trunc i64 %119 to i32
  %122 = shl nsw i32 -1, %105
  %123 = xor i32 %122, -1
  %124 = and i32 %121, %123
  %125 = add nuw nsw i32 %124, %104
  %126 = zext i32 %105 to i64
  %127 = lshr i64 %119, %126
  %128 = sub i32 %120, %105
  br label %129

129:                                              ; preds = %103, %117
  %130 = phi i32 [ %104, %103 ], [ %125, %117 ]
  %131 = phi i8* [ %74, %103 ], [ %118, %117 ]
  %132 = phi i64 [ %98, %103 ], [ %127, %117 ]
  %133 = phi i32 [ %97, %103 ], [ %128, %117 ]
  %134 = icmp ult i32 %133, 15
  br i1 %134, label %135, label %143

135:                                              ; preds = %129
  %136 = bitcast i8* %131 to i64*
  %137 = load i64, i64* %136, align 1
  %138 = zext i32 %133 to i64
  %139 = shl i64 %137, %138
  %140 = or i64 %139, %132
  %141 = getelementptr inbounds i8, i8* %131, i64 6
  %142 = add nuw nsw i32 %133, 48
  br label %143

143:                                              ; preds = %135, %129
  %144 = phi i8* [ %141, %135 ], [ %131, %129 ]
  %145 = phi i64 [ %140, %135 ], [ %132, %129 ]
  %146 = phi i32 [ %142, %135 ], [ %133, %129 ]
  %147 = and i64 %145, %55
  %148 = getelementptr inbounds %struct.code, %struct.code* %45, i64 %147, i32 0
  %149 = getelementptr inbounds %struct.code, %struct.code* %45, i64 %147, i32 1
  %150 = getelementptr inbounds %struct.code, %struct.code* %45, i64 %147, i32 2
  %151 = load i8, i8* %148, align 2
  %152 = load i8, i8* %149, align 1
  %153 = load i16, i16* %150, align 2
  %154 = zext i8 %152 to i32
  %155 = zext i8 %152 to i64
  %156 = lshr i64 %145, %155
  %157 = sub i32 %146, %154
  %158 = zext i8 %151 to i32
  %159 = and i32 %158, 16
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %1338, label %163

161:                                              ; preds = %1345
  %162 = zext i8 %1355 to i32
  br label %163

163:                                              ; preds = %161, %143
  %164 = phi i16 [ %153, %143 ], [ %1357, %161 ]
  %165 = phi i64 [ %156, %143 ], [ %1360, %161 ]
  %166 = phi i32 [ %157, %143 ], [ %1361, %161 ]
  %167 = phi i32 [ %158, %143 ], [ %162, %161 ]
  %168 = zext i16 %164 to i32
  %169 = and i32 %167, 15
  %170 = icmp ult i32 %166, %169
  br i1 %170, label %171, label %179

171:                                              ; preds = %163
  %172 = bitcast i8* %144 to i64*
  %173 = load i64, i64* %172, align 1
  %174 = zext i32 %166 to i64
  %175 = shl i64 %173, %174
  %176 = or i64 %175, %165
  %177 = getelementptr inbounds i8, i8* %144, i64 6
  %178 = add i32 %166, 48
  br label %179

179:                                              ; preds = %171, %163
  %180 = phi i8* [ %177, %171 ], [ %144, %163 ]
  %181 = phi i64 [ %176, %171 ], [ %165, %163 ]
  %182 = phi i32 [ %178, %171 ], [ %166, %163 ]
  %183 = trunc i64 %181 to i32
  %184 = shl nsw i32 -1, %169
  %185 = xor i32 %184, -1
  %186 = and i32 %183, %185
  %187 = add nuw nsw i32 %186, %168
  %188 = zext i32 %169 to i64
  %189 = lshr i64 %181, %188
  %190 = sub i32 %182, %169
  %191 = ptrtoint i8* %61 to i64
  %192 = sub i64 %191, %56
  %193 = trunc i64 %192 to i32
  %194 = icmp ugt i32 %187, %193
  br i1 %194, label %195, label %1055

195:                                              ; preds = %179
  %196 = sub i32 %187, %193
  %197 = icmp ugt i32 %196, %29
  br i1 %197, label %198, label %201

198:                                              ; preds = %195
  %199 = load i32, i32* %57, align 8
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %201, label %1397

201:                                              ; preds = %198, %195
  %202 = icmp ult i32 %35, %196
  br i1 %202, label %207, label %203

203:                                              ; preds = %201
  %204 = sub i32 %35, %196
  %205 = zext i32 %204 to i64
  %206 = getelementptr inbounds i8, i8* %37, i64 %205
  br label %337

207:                                              ; preds = %201
  %208 = sub i32 %196, %35
  %209 = sub i32 %27, %208
  %210 = zext i32 %209 to i64
  %211 = getelementptr inbounds i8, i8* %37, i64 %210
  %212 = icmp ugt i32 %130, %208
  br i1 %212, label %213, label %337

213:                                              ; preds = %207
  %214 = sub i32 %130, %208
  %215 = sub i64 %58, %191
  %216 = icmp slt i64 %215, 16
  br i1 %216, label %217, label %256

217:                                              ; preds = %213
  %218 = and i32 %208, 8
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %226, label %220

220:                                              ; preds = %217
  %221 = bitcast i8* %211 to i64*
  %222 = bitcast i8* %61 to i64*
  %223 = load i64, i64* %221, align 1, !alias.scope !2
  store i64 %223, i64* %222, align 1, !noalias !2
  %224 = getelementptr inbounds i8, i8* %61, i64 8
  %225 = getelementptr inbounds i8, i8* %211, i64 8
  br label %226

226:                                              ; preds = %220, %217
  %227 = phi i8* [ %224, %220 ], [ %61, %217 ]
  %228 = phi i8* [ %225, %220 ], [ %211, %217 ]
  %229 = and i32 %208, 4
  %230 = icmp eq i32 %229, 0
  br i1 %230, label %237, label %231

231:                                              ; preds = %226
  %232 = bitcast i8* %228 to i32*
  %233 = bitcast i8* %227 to i32*
  %234 = load i32, i32* %232, align 1, !alias.scope !2
  store i32 %234, i32* %233, align 1, !noalias !2
  %235 = getelementptr inbounds i8, i8* %227, i64 4
  %236 = getelementptr inbounds i8, i8* %228, i64 4
  br label %237

237:                                              ; preds = %231, %226
  %238 = phi i8* [ %235, %231 ], [ %227, %226 ]
  %239 = phi i8* [ %236, %231 ], [ %228, %226 ]
  %240 = and i32 %208, 2
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %248, label %242

242:                                              ; preds = %237
  %243 = bitcast i8* %239 to i16*
  %244 = bitcast i8* %238 to i16*
  %245 = load i16, i16* %243, align 1, !alias.scope !2
  store i16 %245, i16* %244, align 1, !noalias !2
  %246 = getelementptr inbounds i8, i8* %238, i64 2
  %247 = getelementptr inbounds i8, i8* %239, i64 2
  br label %248

248:                                              ; preds = %242, %237
  %249 = phi i8* [ %246, %242 ], [ %238, %237 ]
  %250 = phi i8* [ %247, %242 ], [ %239, %237 ]
  %251 = and i32 %208, 1
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %337, label %253

253:                                              ; preds = %248
  %254 = load i8, i8* %250, align 1, !alias.scope !2
  %255 = getelementptr inbounds i8, i8* %249, i64 1
  store i8 %254, i8* %249, align 1, !noalias !2
  br label %337

256:                                              ; preds = %213
  %257 = add i32 %208, -1
  %258 = and i32 %257, 15
  %259 = add nuw nsw i32 %258, 1
  %260 = bitcast i8* %211 to <2 x i64>*
  %261 = load <2 x i64>, <2 x i64>* %260, align 1, !alias.scope !2
  %262 = bitcast i8* %61 to <2 x i64>*
  store <2 x i64> %261, <2 x i64>* %262, align 1, !noalias !2
  %263 = zext i32 %259 to i64
  %264 = getelementptr inbounds i8, i8* %61, i64 %263
  %265 = lshr i32 %257, 4
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %337, label %267

267:                                              ; preds = %256
  %268 = getelementptr inbounds i8, i8* %211, i64 %263
  %269 = add nsw i32 %265, -1
  %270 = and i32 %265, 7
  %271 = icmp eq i32 %270, 0
  br i1 %271, label %285, label %272

272:                                              ; preds = %267, %272
  %273 = phi i8* [ %281, %272 ], [ %264, %267 ]
  %274 = phi i32 [ %277, %272 ], [ %265, %267 ]
  %275 = phi i8* [ %282, %272 ], [ %268, %267 ]
  %276 = phi i32 [ %283, %272 ], [ %270, %267 ]
  %277 = add nsw i32 %274, -1
  %278 = bitcast i8* %275 to <2 x i64>*
  %279 = load <2 x i64>, <2 x i64>* %278, align 1, !alias.scope !2
  %280 = bitcast i8* %273 to <2 x i64>*
  store <2 x i64> %279, <2 x i64>* %280, align 1, !noalias !2
  %281 = getelementptr inbounds i8, i8* %273, i64 16
  %282 = getelementptr inbounds i8, i8* %275, i64 16
  %283 = add i32 %276, -1
  %284 = icmp eq i32 %283, 0
  br i1 %284, label %285, label %272, !llvm.loop !5

285:                                              ; preds = %272, %267
  %286 = phi i8* [ undef, %267 ], [ %281, %272 ]
  %287 = phi i8* [ %264, %267 ], [ %281, %272 ]
  %288 = phi i32 [ %265, %267 ], [ %277, %272 ]
  %289 = phi i8* [ %268, %267 ], [ %282, %272 ]
  %290 = icmp ult i32 %269, 7
  br i1 %290, label %337, label %291

291:                                              ; preds = %285, %291
  %292 = phi i8* [ %334, %291 ], [ %287, %285 ]
  %293 = phi i32 [ %330, %291 ], [ %288, %285 ]
  %294 = phi i8* [ %335, %291 ], [ %289, %285 ]
  %295 = bitcast i8* %294 to <2 x i64>*
  %296 = load <2 x i64>, <2 x i64>* %295, align 1, !alias.scope !2
  %297 = bitcast i8* %292 to <2 x i64>*
  store <2 x i64> %296, <2 x i64>* %297, align 1, !noalias !2
  %298 = getelementptr inbounds i8, i8* %292, i64 16
  %299 = getelementptr inbounds i8, i8* %294, i64 16
  %300 = bitcast i8* %299 to <2 x i64>*
  %301 = load <2 x i64>, <2 x i64>* %300, align 1, !alias.scope !2
  %302 = bitcast i8* %298 to <2 x i64>*
  store <2 x i64> %301, <2 x i64>* %302, align 1, !noalias !2
  %303 = getelementptr inbounds i8, i8* %292, i64 32
  %304 = getelementptr inbounds i8, i8* %294, i64 32
  %305 = bitcast i8* %304 to <2 x i64>*
  %306 = load <2 x i64>, <2 x i64>* %305, align 1, !alias.scope !2
  %307 = bitcast i8* %303 to <2 x i64>*
  store <2 x i64> %306, <2 x i64>* %307, align 1, !noalias !2
  %308 = getelementptr inbounds i8, i8* %292, i64 48
  %309 = getelementptr inbounds i8, i8* %294, i64 48
  %310 = bitcast i8* %309 to <2 x i64>*
  %311 = load <2 x i64>, <2 x i64>* %310, align 1, !alias.scope !2
  %312 = bitcast i8* %308 to <2 x i64>*
  store <2 x i64> %311, <2 x i64>* %312, align 1, !noalias !2
  %313 = getelementptr inbounds i8, i8* %292, i64 64
  %314 = getelementptr inbounds i8, i8* %294, i64 64
  %315 = bitcast i8* %314 to <2 x i64>*
  %316 = load <2 x i64>, <2 x i64>* %315, align 1, !alias.scope !2
  %317 = bitcast i8* %313 to <2 x i64>*
  store <2 x i64> %316, <2 x i64>* %317, align 1, !noalias !2
  %318 = getelementptr inbounds i8, i8* %292, i64 80
  %319 = getelementptr inbounds i8, i8* %294, i64 80
  %320 = bitcast i8* %319 to <2 x i64>*
  %321 = load <2 x i64>, <2 x i64>* %320, align 1, !alias.scope !2
  %322 = bitcast i8* %318 to <2 x i64>*
  store <2 x i64> %321, <2 x i64>* %322, align 1, !noalias !2
  %323 = getelementptr inbounds i8, i8* %292, i64 96
  %324 = getelementptr inbounds i8, i8* %294, i64 96
  %325 = bitcast i8* %324 to <2 x i64>*
  %326 = load <2 x i64>, <2 x i64>* %325, align 1, !alias.scope !2
  %327 = bitcast i8* %323 to <2 x i64>*
  store <2 x i64> %326, <2 x i64>* %327, align 1, !noalias !2
  %328 = getelementptr inbounds i8, i8* %292, i64 112
  %329 = getelementptr inbounds i8, i8* %294, i64 112
  %330 = add nsw i32 %293, -8
  %331 = bitcast i8* %329 to <2 x i64>*
  %332 = load <2 x i64>, <2 x i64>* %331, align 1, !alias.scope !2
  %333 = bitcast i8* %328 to <2 x i64>*
  store <2 x i64> %332, <2 x i64>* %333, align 1, !noalias !2
  %334 = getelementptr inbounds i8, i8* %292, i64 128
  %335 = getelementptr inbounds i8, i8* %294, i64 128
  %336 = icmp eq i32 %330, 0
  br i1 %336, label %337, label %291

337:                                              ; preds = %285, %291, %256, %253, %248, %207, %203
  %338 = phi i32 [ %130, %207 ], [ %130, %203 ], [ %214, %248 ], [ %214, %253 ], [ %214, %256 ], [ %214, %291 ], [ %214, %285 ]
  %339 = phi i8* [ %61, %207 ], [ %61, %203 ], [ %249, %248 ], [ %255, %253 ], [ %264, %256 ], [ %286, %285 ], [ %334, %291 ]
  %340 = phi i32 [ %208, %207 ], [ %196, %203 ], [ %35, %248 ], [ %35, %253 ], [ %35, %256 ], [ %35, %291 ], [ %35, %285 ]
  %341 = phi i8* [ %211, %207 ], [ %206, %203 ], [ %37, %248 ], [ %37, %253 ], [ %37, %256 ], [ %37, %291 ], [ %37, %285 ]
  %342 = icmp ugt i32 %338, %340
  %343 = ptrtoint i8* %339 to i64
  %344 = sub i64 %58, %343
  %345 = icmp slt i64 %344, 16
  br i1 %342, label %346, label %934

346:                                              ; preds = %337
  br i1 %345, label %347, label %386

347:                                              ; preds = %346
  %348 = and i32 %340, 8
  %349 = icmp eq i32 %348, 0
  br i1 %349, label %356, label %350

350:                                              ; preds = %347
  %351 = bitcast i8* %341 to i64*
  %352 = bitcast i8* %339 to i64*
  %353 = load i64, i64* %351, align 1, !alias.scope !7
  store i64 %353, i64* %352, align 1, !noalias !7
  %354 = getelementptr inbounds i8, i8* %339, i64 8
  %355 = getelementptr inbounds i8, i8* %341, i64 8
  br label %356

356:                                              ; preds = %350, %347
  %357 = phi i8* [ %354, %350 ], [ %339, %347 ]
  %358 = phi i8* [ %355, %350 ], [ %341, %347 ]
  %359 = and i32 %340, 4
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %367, label %361

361:                                              ; preds = %356
  %362 = bitcast i8* %358 to i32*
  %363 = bitcast i8* %357 to i32*
  %364 = load i32, i32* %362, align 1, !alias.scope !7
  store i32 %364, i32* %363, align 1, !noalias !7
  %365 = getelementptr inbounds i8, i8* %357, i64 4
  %366 = getelementptr inbounds i8, i8* %358, i64 4
  br label %367

367:                                              ; preds = %361, %356
  %368 = phi i8* [ %365, %361 ], [ %357, %356 ]
  %369 = phi i8* [ %366, %361 ], [ %358, %356 ]
  %370 = and i32 %340, 2
  %371 = icmp eq i32 %370, 0
  br i1 %371, label %378, label %372

372:                                              ; preds = %367
  %373 = bitcast i8* %369 to i16*
  %374 = bitcast i8* %368 to i16*
  %375 = load i16, i16* %373, align 1, !alias.scope !7
  store i16 %375, i16* %374, align 1, !noalias !7
  %376 = getelementptr inbounds i8, i8* %368, i64 2
  %377 = getelementptr inbounds i8, i8* %369, i64 2
  br label %378

378:                                              ; preds = %372, %367
  %379 = phi i8* [ %376, %372 ], [ %368, %367 ]
  %380 = phi i8* [ %377, %372 ], [ %369, %367 ]
  %381 = and i32 %340, 1
  %382 = icmp eq i32 %381, 0
  br i1 %382, label %467, label %383

383:                                              ; preds = %378
  %384 = load i8, i8* %380, align 1, !alias.scope !7
  %385 = getelementptr inbounds i8, i8* %379, i64 1
  store i8 %384, i8* %379, align 1, !noalias !7
  br label %467

386:                                              ; preds = %346
  %387 = add i32 %340, -1
  %388 = and i32 %387, 15
  %389 = add nuw nsw i32 %388, 1
  %390 = bitcast i8* %341 to <2 x i64>*
  %391 = load <2 x i64>, <2 x i64>* %390, align 1, !alias.scope !7
  %392 = bitcast i8* %339 to <2 x i64>*
  store <2 x i64> %391, <2 x i64>* %392, align 1, !noalias !7
  %393 = zext i32 %389 to i64
  %394 = getelementptr inbounds i8, i8* %339, i64 %393
  %395 = lshr i32 %387, 4
  %396 = icmp eq i32 %395, 0
  br i1 %396, label %467, label %397

397:                                              ; preds = %386
  %398 = getelementptr inbounds i8, i8* %341, i64 %393
  %399 = add nsw i32 %395, -1
  %400 = and i32 %395, 7
  %401 = icmp eq i32 %400, 0
  br i1 %401, label %415, label %402

402:                                              ; preds = %397, %402
  %403 = phi i8* [ %411, %402 ], [ %394, %397 ]
  %404 = phi i32 [ %407, %402 ], [ %395, %397 ]
  %405 = phi i8* [ %412, %402 ], [ %398, %397 ]
  %406 = phi i32 [ %413, %402 ], [ %400, %397 ]
  %407 = add nsw i32 %404, -1
  %408 = bitcast i8* %405 to <2 x i64>*
  %409 = load <2 x i64>, <2 x i64>* %408, align 1, !alias.scope !7
  %410 = bitcast i8* %403 to <2 x i64>*
  store <2 x i64> %409, <2 x i64>* %410, align 1, !noalias !7
  %411 = getelementptr inbounds i8, i8* %403, i64 16
  %412 = getelementptr inbounds i8, i8* %405, i64 16
  %413 = add i32 %406, -1
  %414 = icmp eq i32 %413, 0
  br i1 %414, label %415, label %402, !llvm.loop !10

415:                                              ; preds = %402, %397
  %416 = phi i8* [ undef, %397 ], [ %411, %402 ]
  %417 = phi i8* [ %394, %397 ], [ %411, %402 ]
  %418 = phi i32 [ %395, %397 ], [ %407, %402 ]
  %419 = phi i8* [ %398, %397 ], [ %412, %402 ]
  %420 = icmp ult i32 %399, 7
  br i1 %420, label %467, label %421

421:                                              ; preds = %415, %421
  %422 = phi i8* [ %464, %421 ], [ %417, %415 ]
  %423 = phi i32 [ %460, %421 ], [ %418, %415 ]
  %424 = phi i8* [ %465, %421 ], [ %419, %415 ]
  %425 = bitcast i8* %424 to <2 x i64>*
  %426 = load <2 x i64>, <2 x i64>* %425, align 1, !alias.scope !7
  %427 = bitcast i8* %422 to <2 x i64>*
  store <2 x i64> %426, <2 x i64>* %427, align 1, !noalias !7
  %428 = getelementptr inbounds i8, i8* %422, i64 16
  %429 = getelementptr inbounds i8, i8* %424, i64 16
  %430 = bitcast i8* %429 to <2 x i64>*
  %431 = load <2 x i64>, <2 x i64>* %430, align 1, !alias.scope !7
  %432 = bitcast i8* %428 to <2 x i64>*
  store <2 x i64> %431, <2 x i64>* %432, align 1, !noalias !7
  %433 = getelementptr inbounds i8, i8* %422, i64 32
  %434 = getelementptr inbounds i8, i8* %424, i64 32
  %435 = bitcast i8* %434 to <2 x i64>*
  %436 = load <2 x i64>, <2 x i64>* %435, align 1, !alias.scope !7
  %437 = bitcast i8* %433 to <2 x i64>*
  store <2 x i64> %436, <2 x i64>* %437, align 1, !noalias !7
  %438 = getelementptr inbounds i8, i8* %422, i64 48
  %439 = getelementptr inbounds i8, i8* %424, i64 48
  %440 = bitcast i8* %439 to <2 x i64>*
  %441 = load <2 x i64>, <2 x i64>* %440, align 1, !alias.scope !7
  %442 = bitcast i8* %438 to <2 x i64>*
  store <2 x i64> %441, <2 x i64>* %442, align 1, !noalias !7
  %443 = getelementptr inbounds i8, i8* %422, i64 64
  %444 = getelementptr inbounds i8, i8* %424, i64 64
  %445 = bitcast i8* %444 to <2 x i64>*
  %446 = load <2 x i64>, <2 x i64>* %445, align 1, !alias.scope !7
  %447 = bitcast i8* %443 to <2 x i64>*
  store <2 x i64> %446, <2 x i64>* %447, align 1, !noalias !7
  %448 = getelementptr inbounds i8, i8* %422, i64 80
  %449 = getelementptr inbounds i8, i8* %424, i64 80
  %450 = bitcast i8* %449 to <2 x i64>*
  %451 = load <2 x i64>, <2 x i64>* %450, align 1, !alias.scope !7
  %452 = bitcast i8* %448 to <2 x i64>*
  store <2 x i64> %451, <2 x i64>* %452, align 1, !noalias !7
  %453 = getelementptr inbounds i8, i8* %422, i64 96
  %454 = getelementptr inbounds i8, i8* %424, i64 96
  %455 = bitcast i8* %454 to <2 x i64>*
  %456 = load <2 x i64>, <2 x i64>* %455, align 1, !alias.scope !7
  %457 = bitcast i8* %453 to <2 x i64>*
  store <2 x i64> %456, <2 x i64>* %457, align 1, !noalias !7
  %458 = getelementptr inbounds i8, i8* %422, i64 112
  %459 = getelementptr inbounds i8, i8* %424, i64 112
  %460 = add nsw i32 %423, -8
  %461 = bitcast i8* %459 to <2 x i64>*
  %462 = load <2 x i64>, <2 x i64>* %461, align 1, !alias.scope !7
  %463 = bitcast i8* %458 to <2 x i64>*
  store <2 x i64> %462, <2 x i64>* %463, align 1, !noalias !7
  %464 = getelementptr inbounds i8, i8* %422, i64 128
  %465 = getelementptr inbounds i8, i8* %424, i64 128
  %466 = icmp eq i32 %460, 0
  br i1 %466, label %467, label %421

467:                                              ; preds = %415, %421, %378, %383, %386
  %468 = phi i8* [ %385, %383 ], [ %379, %378 ], [ %394, %386 ], [ %416, %415 ], [ %464, %421 ]
  %469 = sub i32 %338, %340
  %470 = icmp ult i32 %187, %469
  %471 = icmp ult i32 %187, 16
  %472 = and i1 %471, %470
  br i1 %472, label %473, label %491

473:                                              ; preds = %467
  %474 = zext i32 %187 to i64
  %475 = sub nsw i64 0, %474
  %476 = getelementptr inbounds i8, i8* %468, i64 %475
  %477 = bitcast i8* %476 to <2 x i64>*
  br label %478

478:                                              ; preds = %478, %473
  %479 = phi i32 [ %469, %473 ], [ %486, %478 ]
  %480 = phi i32 [ %187, %473 ], [ %487, %478 ]
  %481 = phi i8* [ %468, %473 ], [ %485, %478 ]
  %482 = load <2 x i64>, <2 x i64>* %477, align 1
  %483 = bitcast i8* %481 to <2 x i64>*
  store <2 x i64> %482, <2 x i64>* %483, align 1
  %484 = zext i32 %480 to i64
  %485 = getelementptr inbounds i8, i8* %481, i64 %484
  %486 = sub i32 %479, %480
  %487 = shl i32 %480, 1
  %488 = icmp ult i32 %487, %486
  %489 = icmp ult i32 %487, 16
  %490 = and i1 %489, %488
  br i1 %490, label %478, label %491

491:                                              ; preds = %478, %467
  %492 = phi i32 [ %469, %467 ], [ %486, %478 ]
  %493 = phi i32 [ %187, %467 ], [ %487, %478 ]
  %494 = phi i8* [ %468, %467 ], [ %485, %478 ]
  %495 = ptrtoint i8* %494 to i64
  %496 = sub i64 %58, %495
  %497 = icmp slt i64 %496, 48
  br i1 %497, label %498, label %651

498:                                              ; preds = %491
  %499 = icmp eq i32 %492, 0
  br i1 %499, label %1389, label %500

500:                                              ; preds = %498
  %501 = zext i32 %493 to i64
  %502 = sub nsw i64 0, %501
  %503 = add i32 %492, -1
  %504 = zext i32 %503 to i64
  %505 = add nuw nsw i64 %504, 1
  %506 = icmp ult i64 %505, 32
  br i1 %506, label %601, label %507

507:                                              ; preds = %500
  %508 = getelementptr i8, i8* %494, i64 1
  %509 = add i32 %492, -1
  %510 = zext i32 %509 to i64
  %511 = getelementptr i8, i8* %508, i64 %510
  %512 = getelementptr i8, i8* %494, i64 %502
  %513 = getelementptr i8, i8* %494, i64 1
  %514 = sub nsw i64 %510, %501
  %515 = getelementptr i8, i8* %513, i64 %514
  %516 = icmp ult i8* %494, %515
  %517 = icmp ult i8* %512, %511
  %518 = and i1 %516, %517
  br i1 %518, label %601, label %519

519:                                              ; preds = %507
  %520 = and i64 %505, 8589934560
  %521 = trunc i64 %520 to i32
  %522 = sub i32 %492, %521
  %523 = getelementptr i8, i8* %494, i64 %520
  %524 = add nsw i64 %520, -32
  %525 = lshr exact i64 %524, 5
  %526 = add nuw nsw i64 %525, 1
  %527 = and i64 %526, 3
  %528 = icmp ult i64 %524, 96
  br i1 %528, label %580, label %529

529:                                              ; preds = %519
  %530 = sub nsw i64 %526, %527
  br label %531

531:                                              ; preds = %531, %529
  %532 = phi i64 [ 0, %529 ], [ %577, %531 ]
  %533 = phi i64 [ %530, %529 ], [ %578, %531 ]
  %534 = getelementptr i8, i8* %494, i64 %532
  %535 = getelementptr inbounds i8, i8* %534, i64 %502
  %536 = bitcast i8* %535 to <16 x i8>*
  %537 = load <16 x i8>, <16 x i8>* %536, align 1, !alias.scope !11
  %538 = getelementptr inbounds i8, i8* %535, i64 16
  %539 = bitcast i8* %538 to <16 x i8>*
  %540 = load <16 x i8>, <16 x i8>* %539, align 1, !alias.scope !11
  %541 = bitcast i8* %534 to <16 x i8>*
  store <16 x i8> %537, <16 x i8>* %541, align 1, !alias.scope !14, !noalias !11
  %542 = getelementptr i8, i8* %534, i64 16
  %543 = bitcast i8* %542 to <16 x i8>*
  store <16 x i8> %540, <16 x i8>* %543, align 1, !alias.scope !14, !noalias !11
  %544 = or i64 %532, 32
  %545 = getelementptr i8, i8* %494, i64 %544
  %546 = getelementptr inbounds i8, i8* %545, i64 %502
  %547 = bitcast i8* %546 to <16 x i8>*
  %548 = load <16 x i8>, <16 x i8>* %547, align 1, !alias.scope !11
  %549 = getelementptr inbounds i8, i8* %546, i64 16
  %550 = bitcast i8* %549 to <16 x i8>*
  %551 = load <16 x i8>, <16 x i8>* %550, align 1, !alias.scope !11
  %552 = bitcast i8* %545 to <16 x i8>*
  store <16 x i8> %548, <16 x i8>* %552, align 1, !alias.scope !14, !noalias !11
  %553 = getelementptr i8, i8* %545, i64 16
  %554 = bitcast i8* %553 to <16 x i8>*
  store <16 x i8> %551, <16 x i8>* %554, align 1, !alias.scope !14, !noalias !11
  %555 = or i64 %532, 64
  %556 = getelementptr i8, i8* %494, i64 %555
  %557 = getelementptr inbounds i8, i8* %556, i64 %502
  %558 = bitcast i8* %557 to <16 x i8>*
  %559 = load <16 x i8>, <16 x i8>* %558, align 1, !alias.scope !11
  %560 = getelementptr inbounds i8, i8* %557, i64 16
  %561 = bitcast i8* %560 to <16 x i8>*
  %562 = load <16 x i8>, <16 x i8>* %561, align 1, !alias.scope !11
  %563 = bitcast i8* %556 to <16 x i8>*
  store <16 x i8> %559, <16 x i8>* %563, align 1, !alias.scope !14, !noalias !11
  %564 = getelementptr i8, i8* %556, i64 16
  %565 = bitcast i8* %564 to <16 x i8>*
  store <16 x i8> %562, <16 x i8>* %565, align 1, !alias.scope !14, !noalias !11
  %566 = or i64 %532, 96
  %567 = getelementptr i8, i8* %494, i64 %566
  %568 = getelementptr inbounds i8, i8* %567, i64 %502
  %569 = bitcast i8* %568 to <16 x i8>*
  %570 = load <16 x i8>, <16 x i8>* %569, align 1, !alias.scope !11
  %571 = getelementptr inbounds i8, i8* %568, i64 16
  %572 = bitcast i8* %571 to <16 x i8>*
  %573 = load <16 x i8>, <16 x i8>* %572, align 1, !alias.scope !11
  %574 = bitcast i8* %567 to <16 x i8>*
  store <16 x i8> %570, <16 x i8>* %574, align 1, !alias.scope !14, !noalias !11
  %575 = getelementptr i8, i8* %567, i64 16
  %576 = bitcast i8* %575 to <16 x i8>*
  store <16 x i8> %573, <16 x i8>* %576, align 1, !alias.scope !14, !noalias !11
  %577 = add i64 %532, 128
  %578 = add i64 %533, -4
  %579 = icmp eq i64 %578, 0
  br i1 %579, label %580, label %531, !llvm.loop !16

580:                                              ; preds = %531, %519
  %581 = phi i64 [ 0, %519 ], [ %577, %531 ]
  %582 = icmp eq i64 %527, 0
  br i1 %582, label %599, label %583

583:                                              ; preds = %580, %583
  %584 = phi i64 [ %596, %583 ], [ %581, %580 ]
  %585 = phi i64 [ %597, %583 ], [ %527, %580 ]
  %586 = getelementptr i8, i8* %494, i64 %584
  %587 = getelementptr inbounds i8, i8* %586, i64 %502
  %588 = bitcast i8* %587 to <16 x i8>*
  %589 = load <16 x i8>, <16 x i8>* %588, align 1, !alias.scope !11
  %590 = getelementptr inbounds i8, i8* %587, i64 16
  %591 = bitcast i8* %590 to <16 x i8>*
  %592 = load <16 x i8>, <16 x i8>* %591, align 1, !alias.scope !11
  %593 = bitcast i8* %586 to <16 x i8>*
  store <16 x i8> %589, <16 x i8>* %593, align 1, !alias.scope !14, !noalias !11
  %594 = getelementptr i8, i8* %586, i64 16
  %595 = bitcast i8* %594 to <16 x i8>*
  store <16 x i8> %592, <16 x i8>* %595, align 1, !alias.scope !14, !noalias !11
  %596 = add i64 %584, 32
  %597 = add i64 %585, -1
  %598 = icmp eq i64 %597, 0
  br i1 %598, label %599, label %583, !llvm.loop !18

599:                                              ; preds = %583, %580
  %600 = icmp eq i64 %505, %520
  br i1 %600, label %1389, label %601

601:                                              ; preds = %599, %507, %500
  %602 = phi i32 [ %492, %507 ], [ %492, %500 ], [ %522, %599 ]
  %603 = phi i8* [ %494, %507 ], [ %494, %500 ], [ %523, %599 ]
  %604 = add i32 %602, -1
  %605 = and i32 %602, 7
  %606 = icmp eq i32 %605, 0
  br i1 %606, label %617, label %607

607:                                              ; preds = %601, %607
  %608 = phi i32 [ %611, %607 ], [ %602, %601 ]
  %609 = phi i8* [ %614, %607 ], [ %603, %601 ]
  %610 = phi i32 [ %615, %607 ], [ %605, %601 ]
  %611 = add i32 %608, -1
  %612 = getelementptr inbounds i8, i8* %609, i64 %502
  %613 = load i8, i8* %612, align 1
  store i8 %613, i8* %609, align 1
  %614 = getelementptr inbounds i8, i8* %609, i64 1
  %615 = add i32 %610, -1
  %616 = icmp eq i32 %615, 0
  br i1 %616, label %617, label %607, !llvm.loop !19

617:                                              ; preds = %607, %601
  %618 = phi i8* [ undef, %601 ], [ %614, %607 ]
  %619 = phi i32 [ %602, %601 ], [ %611, %607 ]
  %620 = phi i8* [ %603, %601 ], [ %614, %607 ]
  %621 = icmp ult i32 %604, 7
  br i1 %621, label %1389, label %622

622:                                              ; preds = %617, %622
  %623 = phi i32 [ %646, %622 ], [ %619, %617 ]
  %624 = phi i8* [ %649, %622 ], [ %620, %617 ]
  %625 = getelementptr inbounds i8, i8* %624, i64 %502
  %626 = load i8, i8* %625, align 1
  store i8 %626, i8* %624, align 1
  %627 = getelementptr inbounds i8, i8* %624, i64 1
  %628 = getelementptr inbounds i8, i8* %627, i64 %502
  %629 = load i8, i8* %628, align 1
  store i8 %629, i8* %627, align 1
  %630 = getelementptr inbounds i8, i8* %624, i64 2
  %631 = getelementptr inbounds i8, i8* %630, i64 %502
  %632 = load i8, i8* %631, align 1
  store i8 %632, i8* %630, align 1
  %633 = getelementptr inbounds i8, i8* %624, i64 3
  %634 = getelementptr inbounds i8, i8* %633, i64 %502
  %635 = load i8, i8* %634, align 1
  store i8 %635, i8* %633, align 1
  %636 = getelementptr inbounds i8, i8* %624, i64 4
  %637 = getelementptr inbounds i8, i8* %636, i64 %502
  %638 = load i8, i8* %637, align 1
  store i8 %638, i8* %636, align 1
  %639 = getelementptr inbounds i8, i8* %624, i64 5
  %640 = getelementptr inbounds i8, i8* %639, i64 %502
  %641 = load i8, i8* %640, align 1
  store i8 %641, i8* %639, align 1
  %642 = getelementptr inbounds i8, i8* %624, i64 6
  %643 = getelementptr inbounds i8, i8* %642, i64 %502
  %644 = load i8, i8* %643, align 1
  store i8 %644, i8* %642, align 1
  %645 = getelementptr inbounds i8, i8* %624, i64 7
  %646 = add i32 %623, -8
  %647 = getelementptr inbounds i8, i8* %645, i64 %502
  %648 = load i8, i8* %647, align 1
  store i8 %648, i8* %645, align 1
  %649 = getelementptr inbounds i8, i8* %624, i64 8
  %650 = icmp eq i32 %646, 0
  br i1 %650, label %1389, label %622, !llvm.loop !20

651:                                              ; preds = %491
  %652 = icmp ult i32 %493, %492
  %653 = icmp ult i32 %493, 16
  %654 = and i1 %653, %652
  br i1 %654, label %655, label %850

655:                                              ; preds = %651
  %656 = add i32 %492, 15
  %657 = and i32 %656, 15
  %658 = add nuw nsw i32 %657, 1
  switch i32 %493, label %748 [
    i32 1, label %659
    i32 2, label %676
    i32 4, label %700
    i32 8, label %724
  ]

659:                                              ; preds = %655
  %660 = getelementptr inbounds i8, i8* %494, i64 -1
  %661 = load i8, i8* %660, align 1
  %662 = insertelement <16 x i8> undef, i8 %661, i32 0
  %663 = shufflevector <16 x i8> %662, <16 x i8> undef, <16 x i32> zeroinitializer
  %664 = bitcast i8* %494 to <16 x i8>*
  store <16 x i8> %663, <16 x i8>* %664, align 1
  %665 = zext i32 %658 to i64
  %666 = getelementptr inbounds i8, i8* %494, i64 %665
  %667 = sub i32 %492, %658
  %668 = icmp eq i32 %667, 0
  br i1 %668, label %1389, label %669

669:                                              ; preds = %659, %669
  %670 = phi i8* [ %673, %669 ], [ %666, %659 ]
  %671 = phi i32 [ %674, %669 ], [ %667, %659 ]
  %672 = bitcast i8* %670 to <16 x i8>*
  store <16 x i8> %663, <16 x i8>* %672, align 1
  %673 = getelementptr inbounds i8, i8* %670, i64 16
  %674 = add i32 %671, -16
  %675 = icmp eq i32 %674, 0
  br i1 %675, label %1389, label %669

676:                                              ; preds = %655
  %677 = getelementptr inbounds i8, i8* %494, i64 -2
  %678 = bitcast i8* %677 to i16*
  %679 = load i16, i16* %678, align 1
  %680 = insertelement <8 x i16> undef, i16 %679, i32 0
  %681 = shufflevector <8 x i16> %680, <8 x i16> undef, <8 x i32> zeroinitializer
  %682 = bitcast i8* %494 to <8 x i16>*
  store <8 x i16> %681, <8 x i16>* %682, align 1
  %683 = zext i32 %658 to i64
  %684 = getelementptr inbounds i8, i8* %494, i64 %683
  %685 = sub i32 %492, %658
  %686 = icmp eq i32 %685, 0
  br i1 %686, label %1389, label %687

687:                                              ; preds = %676
  %688 = getelementptr inbounds i8, i8* %684, i64 -2
  %689 = bitcast i8* %688 to i16*
  %690 = load i16, i16* %689, align 1
  %691 = insertelement <8 x i16> undef, i16 %690, i32 0
  %692 = shufflevector <8 x i16> %691, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %693

693:                                              ; preds = %693, %687
  %694 = phi i32 [ %685, %687 ], [ %698, %693 ]
  %695 = phi i8* [ %684, %687 ], [ %697, %693 ]
  %696 = bitcast i8* %695 to <8 x i16>*
  store <8 x i16> %692, <8 x i16>* %696, align 1
  %697 = getelementptr inbounds i8, i8* %695, i64 16
  %698 = add i32 %694, -16
  %699 = icmp eq i32 %698, 0
  br i1 %699, label %1389, label %693

700:                                              ; preds = %655
  %701 = getelementptr inbounds i8, i8* %494, i64 -4
  %702 = bitcast i8* %701 to i32*
  %703 = load i32, i32* %702, align 1
  %704 = insertelement <4 x i32> undef, i32 %703, i32 0
  %705 = shufflevector <4 x i32> %704, <4 x i32> undef, <4 x i32> zeroinitializer
  %706 = bitcast i8* %494 to <4 x i32>*
  store <4 x i32> %705, <4 x i32>* %706, align 1
  %707 = zext i32 %658 to i64
  %708 = getelementptr inbounds i8, i8* %494, i64 %707
  %709 = sub i32 %492, %658
  %710 = icmp eq i32 %709, 0
  br i1 %710, label %1389, label %711

711:                                              ; preds = %700
  %712 = getelementptr inbounds i8, i8* %708, i64 -4
  %713 = bitcast i8* %712 to i32*
  %714 = load i32, i32* %713, align 1
  %715 = insertelement <4 x i32> undef, i32 %714, i32 0
  %716 = shufflevector <4 x i32> %715, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %717

717:                                              ; preds = %717, %711
  %718 = phi i32 [ %709, %711 ], [ %722, %717 ]
  %719 = phi i8* [ %708, %711 ], [ %721, %717 ]
  %720 = bitcast i8* %719 to <4 x i32>*
  store <4 x i32> %716, <4 x i32>* %720, align 1
  %721 = getelementptr inbounds i8, i8* %719, i64 16
  %722 = add i32 %718, -16
  %723 = icmp eq i32 %722, 0
  br i1 %723, label %1389, label %717

724:                                              ; preds = %655
  %725 = getelementptr inbounds i8, i8* %494, i64 -8
  %726 = bitcast i8* %725 to i64*
  %727 = load i64, i64* %726, align 1
  %728 = insertelement <2 x i64> undef, i64 %727, i32 0
  %729 = shufflevector <2 x i64> %728, <2 x i64> undef, <2 x i32> zeroinitializer
  %730 = bitcast i8* %494 to <2 x i64>*
  store <2 x i64> %729, <2 x i64>* %730, align 1
  %731 = zext i32 %658 to i64
  %732 = getelementptr inbounds i8, i8* %494, i64 %731
  %733 = sub i32 %492, %658
  %734 = icmp eq i32 %733, 0
  br i1 %734, label %1389, label %735

735:                                              ; preds = %724
  %736 = getelementptr inbounds i8, i8* %732, i64 -8
  %737 = bitcast i8* %736 to i64*
  %738 = load i64, i64* %737, align 1
  %739 = insertelement <2 x i64> undef, i64 %738, i32 0
  %740 = shufflevector <2 x i64> %739, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %741

741:                                              ; preds = %741, %735
  %742 = phi i32 [ %733, %735 ], [ %746, %741 ]
  %743 = phi i8* [ %732, %735 ], [ %745, %741 ]
  %744 = bitcast i8* %743 to <2 x i64>*
  store <2 x i64> %740, <2 x i64>* %744, align 1
  %745 = getelementptr inbounds i8, i8* %743, i64 16
  %746 = add i32 %742, -16
  %747 = icmp eq i32 %746, 0
  br i1 %747, label %1389, label %741

748:                                              ; preds = %655
  %749 = zext i32 %493 to i64
  %750 = sub nsw i64 0, %749
  %751 = getelementptr inbounds i8, i8* %494, i64 %750
  %752 = bitcast i8* %751 to <2 x i64>*
  br label %753

753:                                              ; preds = %753, %748
  %754 = phi i32 [ %493, %748 ], [ %762, %753 ]
  %755 = phi i32 [ %492, %748 ], [ %761, %753 ]
  %756 = phi i8* [ %494, %748 ], [ %760, %753 ]
  %757 = load <2 x i64>, <2 x i64>* %752, align 1
  %758 = bitcast i8* %756 to <2 x i64>*
  store <2 x i64> %757, <2 x i64>* %758, align 1
  %759 = zext i32 %754 to i64
  %760 = getelementptr inbounds i8, i8* %756, i64 %759
  %761 = sub i32 %755, %754
  %762 = shl i32 %754, 1
  %763 = icmp ult i32 %762, %761
  %764 = icmp ult i32 %762, 16
  %765 = and i1 %764, %763
  br i1 %765, label %753, label %766

766:                                              ; preds = %753
  %767 = zext i32 %762 to i64
  %768 = sub nsw i64 0, %767
  %769 = getelementptr inbounds i8, i8* %760, i64 %768
  %770 = add i32 %761, -1
  %771 = and i32 %770, 15
  %772 = add nuw nsw i32 %771, 1
  %773 = bitcast i8* %769 to <2 x i64>*
  %774 = load <2 x i64>, <2 x i64>* %773, align 1
  %775 = bitcast i8* %760 to <2 x i64>*
  store <2 x i64> %774, <2 x i64>* %775, align 1
  %776 = zext i32 %772 to i64
  %777 = getelementptr inbounds i8, i8* %760, i64 %776
  %778 = lshr i32 %770, 4
  %779 = icmp eq i32 %778, 0
  br i1 %779, label %1389, label %780

780:                                              ; preds = %766
  %781 = getelementptr inbounds i8, i8* %769, i64 %776
  %782 = add nsw i32 %778, -1
  %783 = and i32 %778, 7
  %784 = icmp eq i32 %783, 0
  br i1 %784, label %798, label %785

785:                                              ; preds = %780, %785
  %786 = phi i8* [ %794, %785 ], [ %777, %780 ]
  %787 = phi i32 [ %790, %785 ], [ %778, %780 ]
  %788 = phi i8* [ %795, %785 ], [ %781, %780 ]
  %789 = phi i32 [ %796, %785 ], [ %783, %780 ]
  %790 = add nsw i32 %787, -1
  %791 = bitcast i8* %788 to <2 x i64>*
  %792 = load <2 x i64>, <2 x i64>* %791, align 1
  %793 = bitcast i8* %786 to <2 x i64>*
  store <2 x i64> %792, <2 x i64>* %793, align 1
  %794 = getelementptr inbounds i8, i8* %786, i64 16
  %795 = getelementptr inbounds i8, i8* %788, i64 16
  %796 = add i32 %789, -1
  %797 = icmp eq i32 %796, 0
  br i1 %797, label %798, label %785, !llvm.loop !21

798:                                              ; preds = %785, %780
  %799 = phi i8* [ undef, %780 ], [ %794, %785 ]
  %800 = phi i8* [ %777, %780 ], [ %794, %785 ]
  %801 = phi i32 [ %778, %780 ], [ %790, %785 ]
  %802 = phi i8* [ %781, %780 ], [ %795, %785 ]
  %803 = icmp ult i32 %782, 7
  br i1 %803, label %1389, label %804

804:                                              ; preds = %798, %804
  %805 = phi i8* [ %847, %804 ], [ %800, %798 ]
  %806 = phi i32 [ %843, %804 ], [ %801, %798 ]
  %807 = phi i8* [ %848, %804 ], [ %802, %798 ]
  %808 = bitcast i8* %807 to <2 x i64>*
  %809 = load <2 x i64>, <2 x i64>* %808, align 1
  %810 = bitcast i8* %805 to <2 x i64>*
  store <2 x i64> %809, <2 x i64>* %810, align 1
  %811 = getelementptr inbounds i8, i8* %805, i64 16
  %812 = getelementptr inbounds i8, i8* %807, i64 16
  %813 = bitcast i8* %812 to <2 x i64>*
  %814 = load <2 x i64>, <2 x i64>* %813, align 1
  %815 = bitcast i8* %811 to <2 x i64>*
  store <2 x i64> %814, <2 x i64>* %815, align 1
  %816 = getelementptr inbounds i8, i8* %805, i64 32
  %817 = getelementptr inbounds i8, i8* %807, i64 32
  %818 = bitcast i8* %817 to <2 x i64>*
  %819 = load <2 x i64>, <2 x i64>* %818, align 1
  %820 = bitcast i8* %816 to <2 x i64>*
  store <2 x i64> %819, <2 x i64>* %820, align 1
  %821 = getelementptr inbounds i8, i8* %805, i64 48
  %822 = getelementptr inbounds i8, i8* %807, i64 48
  %823 = bitcast i8* %822 to <2 x i64>*
  %824 = load <2 x i64>, <2 x i64>* %823, align 1
  %825 = bitcast i8* %821 to <2 x i64>*
  store <2 x i64> %824, <2 x i64>* %825, align 1
  %826 = getelementptr inbounds i8, i8* %805, i64 64
  %827 = getelementptr inbounds i8, i8* %807, i64 64
  %828 = bitcast i8* %827 to <2 x i64>*
  %829 = load <2 x i64>, <2 x i64>* %828, align 1
  %830 = bitcast i8* %826 to <2 x i64>*
  store <2 x i64> %829, <2 x i64>* %830, align 1
  %831 = getelementptr inbounds i8, i8* %805, i64 80
  %832 = getelementptr inbounds i8, i8* %807, i64 80
  %833 = bitcast i8* %832 to <2 x i64>*
  %834 = load <2 x i64>, <2 x i64>* %833, align 1
  %835 = bitcast i8* %831 to <2 x i64>*
  store <2 x i64> %834, <2 x i64>* %835, align 1
  %836 = getelementptr inbounds i8, i8* %805, i64 96
  %837 = getelementptr inbounds i8, i8* %807, i64 96
  %838 = bitcast i8* %837 to <2 x i64>*
  %839 = load <2 x i64>, <2 x i64>* %838, align 1
  %840 = bitcast i8* %836 to <2 x i64>*
  store <2 x i64> %839, <2 x i64>* %840, align 1
  %841 = getelementptr inbounds i8, i8* %805, i64 112
  %842 = getelementptr inbounds i8, i8* %807, i64 112
  %843 = add nsw i32 %806, -8
  %844 = bitcast i8* %842 to <2 x i64>*
  %845 = load <2 x i64>, <2 x i64>* %844, align 1
  %846 = bitcast i8* %841 to <2 x i64>*
  store <2 x i64> %845, <2 x i64>* %846, align 1
  %847 = getelementptr inbounds i8, i8* %805, i64 128
  %848 = getelementptr inbounds i8, i8* %807, i64 128
  %849 = icmp eq i32 %843, 0
  br i1 %849, label %1389, label %804

850:                                              ; preds = %651
  %851 = zext i32 %493 to i64
  %852 = sub nsw i64 0, %851
  %853 = getelementptr inbounds i8, i8* %494, i64 %852
  %854 = add i32 %492, -1
  %855 = and i32 %854, 15
  %856 = add nuw nsw i32 %855, 1
  %857 = bitcast i8* %853 to <2 x i64>*
  %858 = load <2 x i64>, <2 x i64>* %857, align 1
  %859 = bitcast i8* %494 to <2 x i64>*
  store <2 x i64> %858, <2 x i64>* %859, align 1
  %860 = zext i32 %856 to i64
  %861 = getelementptr inbounds i8, i8* %494, i64 %860
  %862 = lshr i32 %854, 4
  %863 = icmp eq i32 %862, 0
  br i1 %863, label %1389, label %864

864:                                              ; preds = %850
  %865 = getelementptr inbounds i8, i8* %853, i64 %860
  %866 = add nsw i32 %862, -1
  %867 = and i32 %862, 7
  %868 = icmp eq i32 %867, 0
  br i1 %868, label %882, label %869

869:                                              ; preds = %864, %869
  %870 = phi i8* [ %878, %869 ], [ %861, %864 ]
  %871 = phi i32 [ %874, %869 ], [ %862, %864 ]
  %872 = phi i8* [ %879, %869 ], [ %865, %864 ]
  %873 = phi i32 [ %880, %869 ], [ %867, %864 ]
  %874 = add nsw i32 %871, -1
  %875 = bitcast i8* %872 to <2 x i64>*
  %876 = load <2 x i64>, <2 x i64>* %875, align 1
  %877 = bitcast i8* %870 to <2 x i64>*
  store <2 x i64> %876, <2 x i64>* %877, align 1
  %878 = getelementptr inbounds i8, i8* %870, i64 16
  %879 = getelementptr inbounds i8, i8* %872, i64 16
  %880 = add i32 %873, -1
  %881 = icmp eq i32 %880, 0
  br i1 %881, label %882, label %869, !llvm.loop !22

882:                                              ; preds = %869, %864
  %883 = phi i8* [ undef, %864 ], [ %878, %869 ]
  %884 = phi i8* [ %861, %864 ], [ %878, %869 ]
  %885 = phi i32 [ %862, %864 ], [ %874, %869 ]
  %886 = phi i8* [ %865, %864 ], [ %879, %869 ]
  %887 = icmp ult i32 %866, 7
  br i1 %887, label %1389, label %888

888:                                              ; preds = %882, %888
  %889 = phi i8* [ %931, %888 ], [ %884, %882 ]
  %890 = phi i32 [ %927, %888 ], [ %885, %882 ]
  %891 = phi i8* [ %932, %888 ], [ %886, %882 ]
  %892 = bitcast i8* %891 to <2 x i64>*
  %893 = load <2 x i64>, <2 x i64>* %892, align 1
  %894 = bitcast i8* %889 to <2 x i64>*
  store <2 x i64> %893, <2 x i64>* %894, align 1
  %895 = getelementptr inbounds i8, i8* %889, i64 16
  %896 = getelementptr inbounds i8, i8* %891, i64 16
  %897 = bitcast i8* %896 to <2 x i64>*
  %898 = load <2 x i64>, <2 x i64>* %897, align 1
  %899 = bitcast i8* %895 to <2 x i64>*
  store <2 x i64> %898, <2 x i64>* %899, align 1
  %900 = getelementptr inbounds i8, i8* %889, i64 32
  %901 = getelementptr inbounds i8, i8* %891, i64 32
  %902 = bitcast i8* %901 to <2 x i64>*
  %903 = load <2 x i64>, <2 x i64>* %902, align 1
  %904 = bitcast i8* %900 to <2 x i64>*
  store <2 x i64> %903, <2 x i64>* %904, align 1
  %905 = getelementptr inbounds i8, i8* %889, i64 48
  %906 = getelementptr inbounds i8, i8* %891, i64 48
  %907 = bitcast i8* %906 to <2 x i64>*
  %908 = load <2 x i64>, <2 x i64>* %907, align 1
  %909 = bitcast i8* %905 to <2 x i64>*
  store <2 x i64> %908, <2 x i64>* %909, align 1
  %910 = getelementptr inbounds i8, i8* %889, i64 64
  %911 = getelementptr inbounds i8, i8* %891, i64 64
  %912 = bitcast i8* %911 to <2 x i64>*
  %913 = load <2 x i64>, <2 x i64>* %912, align 1
  %914 = bitcast i8* %910 to <2 x i64>*
  store <2 x i64> %913, <2 x i64>* %914, align 1
  %915 = getelementptr inbounds i8, i8* %889, i64 80
  %916 = getelementptr inbounds i8, i8* %891, i64 80
  %917 = bitcast i8* %916 to <2 x i64>*
  %918 = load <2 x i64>, <2 x i64>* %917, align 1
  %919 = bitcast i8* %915 to <2 x i64>*
  store <2 x i64> %918, <2 x i64>* %919, align 1
  %920 = getelementptr inbounds i8, i8* %889, i64 96
  %921 = getelementptr inbounds i8, i8* %891, i64 96
  %922 = bitcast i8* %921 to <2 x i64>*
  %923 = load <2 x i64>, <2 x i64>* %922, align 1
  %924 = bitcast i8* %920 to <2 x i64>*
  store <2 x i64> %923, <2 x i64>* %924, align 1
  %925 = getelementptr inbounds i8, i8* %889, i64 112
  %926 = getelementptr inbounds i8, i8* %891, i64 112
  %927 = add nsw i32 %890, -8
  %928 = bitcast i8* %926 to <2 x i64>*
  %929 = load <2 x i64>, <2 x i64>* %928, align 1
  %930 = bitcast i8* %925 to <2 x i64>*
  store <2 x i64> %929, <2 x i64>* %930, align 1
  %931 = getelementptr inbounds i8, i8* %889, i64 128
  %932 = getelementptr inbounds i8, i8* %891, i64 128
  %933 = icmp eq i32 %927, 0
  br i1 %933, label %1389, label %888

934:                                              ; preds = %337
  br i1 %345, label %935, label %974

935:                                              ; preds = %934
  %936 = and i32 %338, 8
  %937 = icmp eq i32 %936, 0
  br i1 %937, label %944, label %938

938:                                              ; preds = %935
  %939 = bitcast i8* %341 to i64*
  %940 = bitcast i8* %339 to i64*
  %941 = load i64, i64* %939, align 1, !alias.scope !23
  store i64 %941, i64* %940, align 1, !noalias !23
  %942 = getelementptr inbounds i8, i8* %339, i64 8
  %943 = getelementptr inbounds i8, i8* %341, i64 8
  br label %944

944:                                              ; preds = %938, %935
  %945 = phi i8* [ %942, %938 ], [ %339, %935 ]
  %946 = phi i8* [ %943, %938 ], [ %341, %935 ]
  %947 = and i32 %338, 4
  %948 = icmp eq i32 %947, 0
  br i1 %948, label %955, label %949

949:                                              ; preds = %944
  %950 = bitcast i8* %946 to i32*
  %951 = bitcast i8* %945 to i32*
  %952 = load i32, i32* %950, align 1, !alias.scope !23
  store i32 %952, i32* %951, align 1, !noalias !23
  %953 = getelementptr inbounds i8, i8* %945, i64 4
  %954 = getelementptr inbounds i8, i8* %946, i64 4
  br label %955

955:                                              ; preds = %949, %944
  %956 = phi i8* [ %953, %949 ], [ %945, %944 ]
  %957 = phi i8* [ %954, %949 ], [ %946, %944 ]
  %958 = and i32 %338, 2
  %959 = icmp eq i32 %958, 0
  br i1 %959, label %966, label %960

960:                                              ; preds = %955
  %961 = bitcast i8* %957 to i16*
  %962 = bitcast i8* %956 to i16*
  %963 = load i16, i16* %961, align 1, !alias.scope !23
  store i16 %963, i16* %962, align 1, !noalias !23
  %964 = getelementptr inbounds i8, i8* %956, i64 2
  %965 = getelementptr inbounds i8, i8* %957, i64 2
  br label %966

966:                                              ; preds = %960, %955
  %967 = phi i8* [ %964, %960 ], [ %956, %955 ]
  %968 = phi i8* [ %965, %960 ], [ %957, %955 ]
  %969 = and i32 %338, 1
  %970 = icmp eq i32 %969, 0
  br i1 %970, label %1389, label %971

971:                                              ; preds = %966
  %972 = load i8, i8* %968, align 1, !alias.scope !23
  %973 = getelementptr inbounds i8, i8* %967, i64 1
  store i8 %972, i8* %967, align 1, !noalias !23
  br label %1389

974:                                              ; preds = %934
  %975 = add i32 %338, -1
  %976 = and i32 %975, 15
  %977 = add nuw nsw i32 %976, 1
  %978 = bitcast i8* %341 to <2 x i64>*
  %979 = load <2 x i64>, <2 x i64>* %978, align 1, !alias.scope !23
  %980 = bitcast i8* %339 to <2 x i64>*
  store <2 x i64> %979, <2 x i64>* %980, align 1, !noalias !23
  %981 = zext i32 %977 to i64
  %982 = getelementptr inbounds i8, i8* %339, i64 %981
  %983 = lshr i32 %975, 4
  %984 = icmp eq i32 %983, 0
  br i1 %984, label %1389, label %985

985:                                              ; preds = %974
  %986 = getelementptr inbounds i8, i8* %341, i64 %981
  %987 = add nsw i32 %983, -1
  %988 = and i32 %983, 7
  %989 = icmp eq i32 %988, 0
  br i1 %989, label %1003, label %990

990:                                              ; preds = %985, %990
  %991 = phi i8* [ %999, %990 ], [ %982, %985 ]
  %992 = phi i32 [ %995, %990 ], [ %983, %985 ]
  %993 = phi i8* [ %1000, %990 ], [ %986, %985 ]
  %994 = phi i32 [ %1001, %990 ], [ %988, %985 ]
  %995 = add nsw i32 %992, -1
  %996 = bitcast i8* %993 to <2 x i64>*
  %997 = load <2 x i64>, <2 x i64>* %996, align 1, !alias.scope !23
  %998 = bitcast i8* %991 to <2 x i64>*
  store <2 x i64> %997, <2 x i64>* %998, align 1, !noalias !23
  %999 = getelementptr inbounds i8, i8* %991, i64 16
  %1000 = getelementptr inbounds i8, i8* %993, i64 16
  %1001 = add i32 %994, -1
  %1002 = icmp eq i32 %1001, 0
  br i1 %1002, label %1003, label %990, !llvm.loop !26

1003:                                             ; preds = %990, %985
  %1004 = phi i8* [ undef, %985 ], [ %999, %990 ]
  %1005 = phi i8* [ %982, %985 ], [ %999, %990 ]
  %1006 = phi i32 [ %983, %985 ], [ %995, %990 ]
  %1007 = phi i8* [ %986, %985 ], [ %1000, %990 ]
  %1008 = icmp ult i32 %987, 7
  br i1 %1008, label %1389, label %1009

1009:                                             ; preds = %1003, %1009
  %1010 = phi i8* [ %1052, %1009 ], [ %1005, %1003 ]
  %1011 = phi i32 [ %1048, %1009 ], [ %1006, %1003 ]
  %1012 = phi i8* [ %1053, %1009 ], [ %1007, %1003 ]
  %1013 = bitcast i8* %1012 to <2 x i64>*
  %1014 = load <2 x i64>, <2 x i64>* %1013, align 1, !alias.scope !23
  %1015 = bitcast i8* %1010 to <2 x i64>*
  store <2 x i64> %1014, <2 x i64>* %1015, align 1, !noalias !23
  %1016 = getelementptr inbounds i8, i8* %1010, i64 16
  %1017 = getelementptr inbounds i8, i8* %1012, i64 16
  %1018 = bitcast i8* %1017 to <2 x i64>*
  %1019 = load <2 x i64>, <2 x i64>* %1018, align 1, !alias.scope !23
  %1020 = bitcast i8* %1016 to <2 x i64>*
  store <2 x i64> %1019, <2 x i64>* %1020, align 1, !noalias !23
  %1021 = getelementptr inbounds i8, i8* %1010, i64 32
  %1022 = getelementptr inbounds i8, i8* %1012, i64 32
  %1023 = bitcast i8* %1022 to <2 x i64>*
  %1024 = load <2 x i64>, <2 x i64>* %1023, align 1, !alias.scope !23
  %1025 = bitcast i8* %1021 to <2 x i64>*
  store <2 x i64> %1024, <2 x i64>* %1025, align 1, !noalias !23
  %1026 = getelementptr inbounds i8, i8* %1010, i64 48
  %1027 = getelementptr inbounds i8, i8* %1012, i64 48
  %1028 = bitcast i8* %1027 to <2 x i64>*
  %1029 = load <2 x i64>, <2 x i64>* %1028, align 1, !alias.scope !23
  %1030 = bitcast i8* %1026 to <2 x i64>*
  store <2 x i64> %1029, <2 x i64>* %1030, align 1, !noalias !23
  %1031 = getelementptr inbounds i8, i8* %1010, i64 64
  %1032 = getelementptr inbounds i8, i8* %1012, i64 64
  %1033 = bitcast i8* %1032 to <2 x i64>*
  %1034 = load <2 x i64>, <2 x i64>* %1033, align 1, !alias.scope !23
  %1035 = bitcast i8* %1031 to <2 x i64>*
  store <2 x i64> %1034, <2 x i64>* %1035, align 1, !noalias !23
  %1036 = getelementptr inbounds i8, i8* %1010, i64 80
  %1037 = getelementptr inbounds i8, i8* %1012, i64 80
  %1038 = bitcast i8* %1037 to <2 x i64>*
  %1039 = load <2 x i64>, <2 x i64>* %1038, align 1, !alias.scope !23
  %1040 = bitcast i8* %1036 to <2 x i64>*
  store <2 x i64> %1039, <2 x i64>* %1040, align 1, !noalias !23
  %1041 = getelementptr inbounds i8, i8* %1010, i64 96
  %1042 = getelementptr inbounds i8, i8* %1012, i64 96
  %1043 = bitcast i8* %1042 to <2 x i64>*
  %1044 = load <2 x i64>, <2 x i64>* %1043, align 1, !alias.scope !23
  %1045 = bitcast i8* %1041 to <2 x i64>*
  store <2 x i64> %1044, <2 x i64>* %1045, align 1, !noalias !23
  %1046 = getelementptr inbounds i8, i8* %1010, i64 112
  %1047 = getelementptr inbounds i8, i8* %1012, i64 112
  %1048 = add nsw i32 %1011, -8
  %1049 = bitcast i8* %1047 to <2 x i64>*
  %1050 = load <2 x i64>, <2 x i64>* %1049, align 1, !alias.scope !23
  %1051 = bitcast i8* %1046 to <2 x i64>*
  store <2 x i64> %1050, <2 x i64>* %1051, align 1, !noalias !23
  %1052 = getelementptr inbounds i8, i8* %1010, i64 128
  %1053 = getelementptr inbounds i8, i8* %1012, i64 128
  %1054 = icmp eq i32 %1048, 0
  br i1 %1054, label %1389, label %1009

1055:                                             ; preds = %179
  %1056 = icmp ult i32 %187, %130
  %1057 = icmp ult i32 %187, 16
  %1058 = and i1 %1057, %1056
  br i1 %1058, label %1059, label %1254

1059:                                             ; preds = %1055
  %1060 = add nsw i32 %130, 15
  %1061 = and i32 %1060, 15
  %1062 = add nuw nsw i32 %1061, 1
  switch i32 %187, label %1152 [
    i32 1, label %1063
    i32 2, label %1080
    i32 4, label %1104
    i32 8, label %1128
  ]

1063:                                             ; preds = %1059
  %1064 = getelementptr inbounds i8, i8* %61, i64 -1
  %1065 = load i8, i8* %1064, align 1
  %1066 = insertelement <16 x i8> undef, i8 %1065, i32 0
  %1067 = shufflevector <16 x i8> %1066, <16 x i8> undef, <16 x i32> zeroinitializer
  %1068 = bitcast i8* %61 to <16 x i8>*
  store <16 x i8> %1067, <16 x i8>* %1068, align 1
  %1069 = zext i32 %1062 to i64
  %1070 = getelementptr inbounds i8, i8* %61, i64 %1069
  %1071 = sub nsw i32 %130, %1062
  %1072 = icmp eq i32 %1071, 0
  br i1 %1072, label %1389, label %1073

1073:                                             ; preds = %1063, %1073
  %1074 = phi i8* [ %1077, %1073 ], [ %1070, %1063 ]
  %1075 = phi i32 [ %1078, %1073 ], [ %1071, %1063 ]
  %1076 = bitcast i8* %1074 to <16 x i8>*
  store <16 x i8> %1067, <16 x i8>* %1076, align 1
  %1077 = getelementptr inbounds i8, i8* %1074, i64 16
  %1078 = add i32 %1075, -16
  %1079 = icmp eq i32 %1078, 0
  br i1 %1079, label %1389, label %1073

1080:                                             ; preds = %1059
  %1081 = getelementptr inbounds i8, i8* %61, i64 -2
  %1082 = bitcast i8* %1081 to i16*
  %1083 = load i16, i16* %1082, align 1
  %1084 = insertelement <8 x i16> undef, i16 %1083, i32 0
  %1085 = shufflevector <8 x i16> %1084, <8 x i16> undef, <8 x i32> zeroinitializer
  %1086 = bitcast i8* %61 to <8 x i16>*
  store <8 x i16> %1085, <8 x i16>* %1086, align 1
  %1087 = zext i32 %1062 to i64
  %1088 = getelementptr inbounds i8, i8* %61, i64 %1087
  %1089 = sub nsw i32 %130, %1062
  %1090 = icmp eq i32 %1089, 0
  br i1 %1090, label %1389, label %1091

1091:                                             ; preds = %1080
  %1092 = getelementptr inbounds i8, i8* %1088, i64 -2
  %1093 = bitcast i8* %1092 to i16*
  %1094 = load i16, i16* %1093, align 1
  %1095 = insertelement <8 x i16> undef, i16 %1094, i32 0
  %1096 = shufflevector <8 x i16> %1095, <8 x i16> undef, <8 x i32> zeroinitializer
  br label %1097

1097:                                             ; preds = %1097, %1091
  %1098 = phi i32 [ %1089, %1091 ], [ %1102, %1097 ]
  %1099 = phi i8* [ %1088, %1091 ], [ %1101, %1097 ]
  %1100 = bitcast i8* %1099 to <8 x i16>*
  store <8 x i16> %1096, <8 x i16>* %1100, align 1
  %1101 = getelementptr inbounds i8, i8* %1099, i64 16
  %1102 = add i32 %1098, -16
  %1103 = icmp eq i32 %1102, 0
  br i1 %1103, label %1389, label %1097

1104:                                             ; preds = %1059
  %1105 = getelementptr inbounds i8, i8* %61, i64 -4
  %1106 = bitcast i8* %1105 to i32*
  %1107 = load i32, i32* %1106, align 1
  %1108 = insertelement <4 x i32> undef, i32 %1107, i32 0
  %1109 = shufflevector <4 x i32> %1108, <4 x i32> undef, <4 x i32> zeroinitializer
  %1110 = bitcast i8* %61 to <4 x i32>*
  store <4 x i32> %1109, <4 x i32>* %1110, align 1
  %1111 = zext i32 %1062 to i64
  %1112 = getelementptr inbounds i8, i8* %61, i64 %1111
  %1113 = sub nsw i32 %130, %1062
  %1114 = icmp eq i32 %1113, 0
  br i1 %1114, label %1389, label %1115

1115:                                             ; preds = %1104
  %1116 = getelementptr inbounds i8, i8* %1112, i64 -4
  %1117 = bitcast i8* %1116 to i32*
  %1118 = load i32, i32* %1117, align 1
  %1119 = insertelement <4 x i32> undef, i32 %1118, i32 0
  %1120 = shufflevector <4 x i32> %1119, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %1121

1121:                                             ; preds = %1121, %1115
  %1122 = phi i32 [ %1113, %1115 ], [ %1126, %1121 ]
  %1123 = phi i8* [ %1112, %1115 ], [ %1125, %1121 ]
  %1124 = bitcast i8* %1123 to <4 x i32>*
  store <4 x i32> %1120, <4 x i32>* %1124, align 1
  %1125 = getelementptr inbounds i8, i8* %1123, i64 16
  %1126 = add i32 %1122, -16
  %1127 = icmp eq i32 %1126, 0
  br i1 %1127, label %1389, label %1121

1128:                                             ; preds = %1059
  %1129 = getelementptr inbounds i8, i8* %61, i64 -8
  %1130 = bitcast i8* %1129 to i64*
  %1131 = load i64, i64* %1130, align 1
  %1132 = insertelement <2 x i64> undef, i64 %1131, i32 0
  %1133 = shufflevector <2 x i64> %1132, <2 x i64> undef, <2 x i32> zeroinitializer
  %1134 = bitcast i8* %61 to <2 x i64>*
  store <2 x i64> %1133, <2 x i64>* %1134, align 1
  %1135 = zext i32 %1062 to i64
  %1136 = getelementptr inbounds i8, i8* %61, i64 %1135
  %1137 = sub nsw i32 %130, %1062
  %1138 = icmp eq i32 %1137, 0
  br i1 %1138, label %1389, label %1139

1139:                                             ; preds = %1128
  %1140 = getelementptr inbounds i8, i8* %1136, i64 -8
  %1141 = bitcast i8* %1140 to i64*
  %1142 = load i64, i64* %1141, align 1
  %1143 = insertelement <2 x i64> undef, i64 %1142, i32 0
  %1144 = shufflevector <2 x i64> %1143, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %1145

1145:                                             ; preds = %1145, %1139
  %1146 = phi i32 [ %1137, %1139 ], [ %1150, %1145 ]
  %1147 = phi i8* [ %1136, %1139 ], [ %1149, %1145 ]
  %1148 = bitcast i8* %1147 to <2 x i64>*
  store <2 x i64> %1144, <2 x i64>* %1148, align 1
  %1149 = getelementptr inbounds i8, i8* %1147, i64 16
  %1150 = add i32 %1146, -16
  %1151 = icmp eq i32 %1150, 0
  br i1 %1151, label %1389, label %1145

1152:                                             ; preds = %1059
  %1153 = zext i32 %187 to i64
  %1154 = sub nsw i64 0, %1153
  %1155 = getelementptr inbounds i8, i8* %61, i64 %1154
  %1156 = bitcast i8* %1155 to <2 x i64>*
  br label %1157

1157:                                             ; preds = %1157, %1152
  %1158 = phi i32 [ %187, %1152 ], [ %1166, %1157 ]
  %1159 = phi i32 [ %130, %1152 ], [ %1165, %1157 ]
  %1160 = phi i8* [ %61, %1152 ], [ %1164, %1157 ]
  %1161 = load <2 x i64>, <2 x i64>* %1156, align 1
  %1162 = bitcast i8* %1160 to <2 x i64>*
  store <2 x i64> %1161, <2 x i64>* %1162, align 1
  %1163 = zext i32 %1158 to i64
  %1164 = getelementptr inbounds i8, i8* %1160, i64 %1163
  %1165 = sub i32 %1159, %1158
  %1166 = shl i32 %1158, 1
  %1167 = icmp ult i32 %1166, %1165
  %1168 = icmp ult i32 %1166, 16
  %1169 = and i1 %1168, %1167
  br i1 %1169, label %1157, label %1170

1170:                                             ; preds = %1157
  %1171 = zext i32 %1166 to i64
  %1172 = sub nsw i64 0, %1171
  %1173 = getelementptr inbounds i8, i8* %1164, i64 %1172
  %1174 = add i32 %1165, -1
  %1175 = and i32 %1174, 15
  %1176 = add nuw nsw i32 %1175, 1
  %1177 = bitcast i8* %1173 to <2 x i64>*
  %1178 = load <2 x i64>, <2 x i64>* %1177, align 1
  %1179 = bitcast i8* %1164 to <2 x i64>*
  store <2 x i64> %1178, <2 x i64>* %1179, align 1
  %1180 = zext i32 %1176 to i64
  %1181 = getelementptr inbounds i8, i8* %1164, i64 %1180
  %1182 = lshr i32 %1174, 4
  %1183 = icmp eq i32 %1182, 0
  br i1 %1183, label %1389, label %1184

1184:                                             ; preds = %1170
  %1185 = getelementptr inbounds i8, i8* %1173, i64 %1180
  %1186 = add nsw i32 %1182, -1
  %1187 = and i32 %1182, 7
  %1188 = icmp eq i32 %1187, 0
  br i1 %1188, label %1202, label %1189

1189:                                             ; preds = %1184, %1189
  %1190 = phi i8* [ %1198, %1189 ], [ %1181, %1184 ]
  %1191 = phi i32 [ %1194, %1189 ], [ %1182, %1184 ]
  %1192 = phi i8* [ %1199, %1189 ], [ %1185, %1184 ]
  %1193 = phi i32 [ %1200, %1189 ], [ %1187, %1184 ]
  %1194 = add nsw i32 %1191, -1
  %1195 = bitcast i8* %1192 to <2 x i64>*
  %1196 = load <2 x i64>, <2 x i64>* %1195, align 1
  %1197 = bitcast i8* %1190 to <2 x i64>*
  store <2 x i64> %1196, <2 x i64>* %1197, align 1
  %1198 = getelementptr inbounds i8, i8* %1190, i64 16
  %1199 = getelementptr inbounds i8, i8* %1192, i64 16
  %1200 = add i32 %1193, -1
  %1201 = icmp eq i32 %1200, 0
  br i1 %1201, label %1202, label %1189, !llvm.loop !27

1202:                                             ; preds = %1189, %1184
  %1203 = phi i8* [ undef, %1184 ], [ %1198, %1189 ]
  %1204 = phi i8* [ %1181, %1184 ], [ %1198, %1189 ]
  %1205 = phi i32 [ %1182, %1184 ], [ %1194, %1189 ]
  %1206 = phi i8* [ %1185, %1184 ], [ %1199, %1189 ]
  %1207 = icmp ult i32 %1186, 7
  br i1 %1207, label %1389, label %1208

1208:                                             ; preds = %1202, %1208
  %1209 = phi i8* [ %1251, %1208 ], [ %1204, %1202 ]
  %1210 = phi i32 [ %1247, %1208 ], [ %1205, %1202 ]
  %1211 = phi i8* [ %1252, %1208 ], [ %1206, %1202 ]
  %1212 = bitcast i8* %1211 to <2 x i64>*
  %1213 = load <2 x i64>, <2 x i64>* %1212, align 1
  %1214 = bitcast i8* %1209 to <2 x i64>*
  store <2 x i64> %1213, <2 x i64>* %1214, align 1
  %1215 = getelementptr inbounds i8, i8* %1209, i64 16
  %1216 = getelementptr inbounds i8, i8* %1211, i64 16
  %1217 = bitcast i8* %1216 to <2 x i64>*
  %1218 = load <2 x i64>, <2 x i64>* %1217, align 1
  %1219 = bitcast i8* %1215 to <2 x i64>*
  store <2 x i64> %1218, <2 x i64>* %1219, align 1
  %1220 = getelementptr inbounds i8, i8* %1209, i64 32
  %1221 = getelementptr inbounds i8, i8* %1211, i64 32
  %1222 = bitcast i8* %1221 to <2 x i64>*
  %1223 = load <2 x i64>, <2 x i64>* %1222, align 1
  %1224 = bitcast i8* %1220 to <2 x i64>*
  store <2 x i64> %1223, <2 x i64>* %1224, align 1
  %1225 = getelementptr inbounds i8, i8* %1209, i64 48
  %1226 = getelementptr inbounds i8, i8* %1211, i64 48
  %1227 = bitcast i8* %1226 to <2 x i64>*
  %1228 = load <2 x i64>, <2 x i64>* %1227, align 1
  %1229 = bitcast i8* %1225 to <2 x i64>*
  store <2 x i64> %1228, <2 x i64>* %1229, align 1
  %1230 = getelementptr inbounds i8, i8* %1209, i64 64
  %1231 = getelementptr inbounds i8, i8* %1211, i64 64
  %1232 = bitcast i8* %1231 to <2 x i64>*
  %1233 = load <2 x i64>, <2 x i64>* %1232, align 1
  %1234 = bitcast i8* %1230 to <2 x i64>*
  store <2 x i64> %1233, <2 x i64>* %1234, align 1
  %1235 = getelementptr inbounds i8, i8* %1209, i64 80
  %1236 = getelementptr inbounds i8, i8* %1211, i64 80
  %1237 = bitcast i8* %1236 to <2 x i64>*
  %1238 = load <2 x i64>, <2 x i64>* %1237, align 1
  %1239 = bitcast i8* %1235 to <2 x i64>*
  store <2 x i64> %1238, <2 x i64>* %1239, align 1
  %1240 = getelementptr inbounds i8, i8* %1209, i64 96
  %1241 = getelementptr inbounds i8, i8* %1211, i64 96
  %1242 = bitcast i8* %1241 to <2 x i64>*
  %1243 = load <2 x i64>, <2 x i64>* %1242, align 1
  %1244 = bitcast i8* %1240 to <2 x i64>*
  store <2 x i64> %1243, <2 x i64>* %1244, align 1
  %1245 = getelementptr inbounds i8, i8* %1209, i64 112
  %1246 = getelementptr inbounds i8, i8* %1211, i64 112
  %1247 = add nsw i32 %1210, -8
  %1248 = bitcast i8* %1246 to <2 x i64>*
  %1249 = load <2 x i64>, <2 x i64>* %1248, align 1
  %1250 = bitcast i8* %1245 to <2 x i64>*
  store <2 x i64> %1249, <2 x i64>* %1250, align 1
  %1251 = getelementptr inbounds i8, i8* %1209, i64 128
  %1252 = getelementptr inbounds i8, i8* %1211, i64 128
  %1253 = icmp eq i32 %1247, 0
  br i1 %1253, label %1389, label %1208

1254:                                             ; preds = %1055
  %1255 = zext i32 %187 to i64
  %1256 = sub nsw i64 0, %1255
  %1257 = getelementptr inbounds i8, i8* %61, i64 %1256
  %1258 = add nsw i32 %130, -1
  %1259 = and i32 %1258, 15
  %1260 = add nuw nsw i32 %1259, 1
  %1261 = bitcast i8* %1257 to <2 x i64>*
  %1262 = load <2 x i64>, <2 x i64>* %1261, align 1
  %1263 = bitcast i8* %61 to <2 x i64>*
  store <2 x i64> %1262, <2 x i64>* %1263, align 1
  %1264 = zext i32 %1260 to i64
  %1265 = getelementptr inbounds i8, i8* %61, i64 %1264
  %1266 = lshr i32 %1258, 4
  %1267 = icmp eq i32 %1266, 0
  br i1 %1267, label %1389, label %1268

1268:                                             ; preds = %1254
  %1269 = getelementptr inbounds i8, i8* %1257, i64 %1264
  %1270 = add nsw i32 %1266, -1
  %1271 = and i32 %1266, 7
  %1272 = icmp eq i32 %1271, 0
  br i1 %1272, label %1286, label %1273

1273:                                             ; preds = %1268, %1273
  %1274 = phi i8* [ %1282, %1273 ], [ %1265, %1268 ]
  %1275 = phi i32 [ %1278, %1273 ], [ %1266, %1268 ]
  %1276 = phi i8* [ %1283, %1273 ], [ %1269, %1268 ]
  %1277 = phi i32 [ %1284, %1273 ], [ %1271, %1268 ]
  %1278 = add nsw i32 %1275, -1
  %1279 = bitcast i8* %1276 to <2 x i64>*
  %1280 = load <2 x i64>, <2 x i64>* %1279, align 1
  %1281 = bitcast i8* %1274 to <2 x i64>*
  store <2 x i64> %1280, <2 x i64>* %1281, align 1
  %1282 = getelementptr inbounds i8, i8* %1274, i64 16
  %1283 = getelementptr inbounds i8, i8* %1276, i64 16
  %1284 = add i32 %1277, -1
  %1285 = icmp eq i32 %1284, 0
  br i1 %1285, label %1286, label %1273, !llvm.loop !28

1286:                                             ; preds = %1273, %1268
  %1287 = phi i8* [ undef, %1268 ], [ %1282, %1273 ]
  %1288 = phi i8* [ %1265, %1268 ], [ %1282, %1273 ]
  %1289 = phi i32 [ %1266, %1268 ], [ %1278, %1273 ]
  %1290 = phi i8* [ %1269, %1268 ], [ %1283, %1273 ]
  %1291 = icmp ult i32 %1270, 7
  br i1 %1291, label %1389, label %1292

1292:                                             ; preds = %1286, %1292
  %1293 = phi i8* [ %1335, %1292 ], [ %1288, %1286 ]
  %1294 = phi i32 [ %1331, %1292 ], [ %1289, %1286 ]
  %1295 = phi i8* [ %1336, %1292 ], [ %1290, %1286 ]
  %1296 = bitcast i8* %1295 to <2 x i64>*
  %1297 = load <2 x i64>, <2 x i64>* %1296, align 1
  %1298 = bitcast i8* %1293 to <2 x i64>*
  store <2 x i64> %1297, <2 x i64>* %1298, align 1
  %1299 = getelementptr inbounds i8, i8* %1293, i64 16
  %1300 = getelementptr inbounds i8, i8* %1295, i64 16
  %1301 = bitcast i8* %1300 to <2 x i64>*
  %1302 = load <2 x i64>, <2 x i64>* %1301, align 1
  %1303 = bitcast i8* %1299 to <2 x i64>*
  store <2 x i64> %1302, <2 x i64>* %1303, align 1
  %1304 = getelementptr inbounds i8, i8* %1293, i64 32
  %1305 = getelementptr inbounds i8, i8* %1295, i64 32
  %1306 = bitcast i8* %1305 to <2 x i64>*
  %1307 = load <2 x i64>, <2 x i64>* %1306, align 1
  %1308 = bitcast i8* %1304 to <2 x i64>*
  store <2 x i64> %1307, <2 x i64>* %1308, align 1
  %1309 = getelementptr inbounds i8, i8* %1293, i64 48
  %1310 = getelementptr inbounds i8, i8* %1295, i64 48
  %1311 = bitcast i8* %1310 to <2 x i64>*
  %1312 = load <2 x i64>, <2 x i64>* %1311, align 1
  %1313 = bitcast i8* %1309 to <2 x i64>*
  store <2 x i64> %1312, <2 x i64>* %1313, align 1
  %1314 = getelementptr inbounds i8, i8* %1293, i64 64
  %1315 = getelementptr inbounds i8, i8* %1295, i64 64
  %1316 = bitcast i8* %1315 to <2 x i64>*
  %1317 = load <2 x i64>, <2 x i64>* %1316, align 1
  %1318 = bitcast i8* %1314 to <2 x i64>*
  store <2 x i64> %1317, <2 x i64>* %1318, align 1
  %1319 = getelementptr inbounds i8, i8* %1293, i64 80
  %1320 = getelementptr inbounds i8, i8* %1295, i64 80
  %1321 = bitcast i8* %1320 to <2 x i64>*
  %1322 = load <2 x i64>, <2 x i64>* %1321, align 1
  %1323 = bitcast i8* %1319 to <2 x i64>*
  store <2 x i64> %1322, <2 x i64>* %1323, align 1
  %1324 = getelementptr inbounds i8, i8* %1293, i64 96
  %1325 = getelementptr inbounds i8, i8* %1295, i64 96
  %1326 = bitcast i8* %1325 to <2 x i64>*
  %1327 = load <2 x i64>, <2 x i64>* %1326, align 1
  %1328 = bitcast i8* %1324 to <2 x i64>*
  store <2 x i64> %1327, <2 x i64>* %1328, align 1
  %1329 = getelementptr inbounds i8, i8* %1293, i64 112
  %1330 = getelementptr inbounds i8, i8* %1295, i64 112
  %1331 = add nsw i32 %1294, -8
  %1332 = bitcast i8* %1330 to <2 x i64>*
  %1333 = load <2 x i64>, <2 x i64>* %1332, align 1
  %1334 = bitcast i8* %1329 to <2 x i64>*
  store <2 x i64> %1333, <2 x i64>* %1334, align 1
  %1335 = getelementptr inbounds i8, i8* %1293, i64 128
  %1336 = getelementptr inbounds i8, i8* %1295, i64 128
  %1337 = icmp eq i32 %1331, 0
  br i1 %1337, label %1389, label %1292

1338:                                             ; preds = %143, %1345
  %1339 = phi i32 [ %1362, %1345 ], [ %158, %143 ]
  %1340 = phi i32 [ %1361, %1345 ], [ %157, %143 ]
  %1341 = phi i64 [ %1360, %1345 ], [ %156, %143 ]
  %1342 = phi i16 [ %1357, %1345 ], [ %153, %143 ]
  %1343 = and i32 %1339, 64
  %1344 = icmp eq i32 %1343, 0
  br i1 %1344, label %1345, label %1397

1345:                                             ; preds = %1338
  %1346 = zext i16 %1342 to i64
  %1347 = shl nsw i32 -1, %1339
  %1348 = xor i32 %1347, -1
  %1349 = zext i32 %1348 to i64
  %1350 = and i64 %1341, %1349
  %1351 = add nuw nsw i64 %1350, %1346
  %1352 = getelementptr inbounds %struct.code, %struct.code* %45, i64 %1351, i32 0
  %1353 = getelementptr inbounds %struct.code, %struct.code* %45, i64 %1351, i32 1
  %1354 = getelementptr inbounds %struct.code, %struct.code* %45, i64 %1351, i32 2
  %1355 = load i8, i8* %1352, align 2
  %1356 = load i8, i8* %1353, align 1
  %1357 = load i16, i16* %1354, align 2
  %1358 = zext i8 %1356 to i32
  %1359 = zext i8 %1356 to i64
  %1360 = lshr i64 %1341, %1359
  %1361 = sub i32 %1340, %1358
  %1362 = zext i8 %1355 to i32
  %1363 = and i32 %1362, 16
  %1364 = icmp eq i32 %1363, 0
  br i1 %1364, label %1338, label %161

1365:                                             ; preds = %95
  %1366 = and i32 %100, 64
  %1367 = icmp eq i32 %1366, 0
  br i1 %1367, label %1368, label %1386

1368:                                             ; preds = %1365
  %1369 = zext i16 %99 to i64
  %1370 = shl nsw i32 -1, %100
  %1371 = xor i32 %1370, -1
  %1372 = zext i32 %1371 to i64
  %1373 = and i64 %98, %1372
  %1374 = add nuw nsw i64 %1373, %1369
  %1375 = getelementptr inbounds %struct.code, %struct.code* %43, i64 %1374, i32 0
  %1376 = getelementptr inbounds %struct.code, %struct.code* %43, i64 %1374, i32 1
  %1377 = getelementptr inbounds %struct.code, %struct.code* %43, i64 %1374, i32 2
  %1378 = load i8, i8* %1375, align 2
  %1379 = load i8, i8* %1376, align 1
  %1380 = load i16, i16* %1377, align 2
  %1381 = zext i8 %1379 to i32
  %1382 = zext i8 %1379 to i64
  %1383 = lshr i64 %98, %1382
  %1384 = sub i32 %97, %1381
  %1385 = icmp eq i8 %1378, 0
  br i1 %1385, label %89, label %95

1386:                                             ; preds = %1365
  %1387 = and i32 %100, 32
  %1388 = icmp eq i32 %1387, 0
  br i1 %1388, label %1397, label %1403

1389:                                             ; preds = %1286, %1292, %1145, %1121, %1097, %1073, %1202, %1208, %1003, %1009, %882, %888, %741, %717, %693, %669, %798, %804, %617, %622, %599, %1254, %1170, %1128, %1104, %1080, %1063, %974, %971, %966, %850, %766, %724, %700, %676, %659, %498, %89
  %1390 = phi i8* [ %74, %89 ], [ %180, %498 ], [ %180, %659 ], [ %180, %676 ], [ %180, %700 ], [ %180, %724 ], [ %180, %766 ], [ %180, %850 ], [ %180, %966 ], [ %180, %971 ], [ %180, %974 ], [ %180, %1063 ], [ %180, %1080 ], [ %180, %1104 ], [ %180, %1128 ], [ %180, %1170 ], [ %180, %1254 ], [ %180, %599 ], [ %180, %622 ], [ %180, %617 ], [ %180, %804 ], [ %180, %798 ], [ %180, %669 ], [ %180, %693 ], [ %180, %717 ], [ %180, %741 ], [ %180, %888 ], [ %180, %882 ], [ %180, %1009 ], [ %180, %1003 ], [ %180, %1208 ], [ %180, %1202 ], [ %180, %1073 ], [ %180, %1097 ], [ %180, %1121 ], [ %180, %1145 ], [ %180, %1292 ], [ %180, %1286 ]
  %1391 = phi i8* [ %94, %89 ], [ %494, %498 ], [ %666, %659 ], [ %684, %676 ], [ %708, %700 ], [ %732, %724 ], [ %777, %766 ], [ %861, %850 ], [ %967, %966 ], [ %973, %971 ], [ %982, %974 ], [ %1070, %1063 ], [ %1088, %1080 ], [ %1112, %1104 ], [ %1136, %1128 ], [ %1181, %1170 ], [ %1265, %1254 ], [ %523, %599 ], [ %618, %617 ], [ %649, %622 ], [ %799, %798 ], [ %847, %804 ], [ %673, %669 ], [ %697, %693 ], [ %721, %717 ], [ %745, %741 ], [ %883, %882 ], [ %931, %888 ], [ %1004, %1003 ], [ %1052, %1009 ], [ %1203, %1202 ], [ %1251, %1208 ], [ %1077, %1073 ], [ %1101, %1097 ], [ %1125, %1121 ], [ %1149, %1145 ], [ %1287, %1286 ], [ %1335, %1292 ]
  %1392 = phi i64 [ %91, %89 ], [ %189, %498 ], [ %189, %659 ], [ %189, %676 ], [ %189, %700 ], [ %189, %724 ], [ %189, %766 ], [ %189, %850 ], [ %189, %966 ], [ %189, %971 ], [ %189, %974 ], [ %189, %1063 ], [ %189, %1080 ], [ %189, %1104 ], [ %189, %1128 ], [ %189, %1170 ], [ %189, %1254 ], [ %189, %599 ], [ %189, %622 ], [ %189, %617 ], [ %189, %804 ], [ %189, %798 ], [ %189, %669 ], [ %189, %693 ], [ %189, %717 ], [ %189, %741 ], [ %189, %888 ], [ %189, %882 ], [ %189, %1009 ], [ %189, %1003 ], [ %189, %1208 ], [ %189, %1202 ], [ %189, %1073 ], [ %189, %1097 ], [ %189, %1121 ], [ %189, %1145 ], [ %189, %1292 ], [ %189, %1286 ]
  %1393 = phi i32 [ %92, %89 ], [ %190, %498 ], [ %190, %659 ], [ %190, %676 ], [ %190, %700 ], [ %190, %724 ], [ %190, %766 ], [ %190, %850 ], [ %190, %966 ], [ %190, %971 ], [ %190, %974 ], [ %190, %1063 ], [ %190, %1080 ], [ %190, %1104 ], [ %190, %1128 ], [ %190, %1170 ], [ %190, %1254 ], [ %190, %599 ], [ %190, %622 ], [ %190, %617 ], [ %190, %804 ], [ %190, %798 ], [ %190, %669 ], [ %190, %693 ], [ %190, %717 ], [ %190, %741 ], [ %190, %888 ], [ %190, %882 ], [ %190, %1009 ], [ %190, %1003 ], [ %190, %1208 ], [ %190, %1202 ], [ %190, %1073 ], [ %190, %1097 ], [ %190, %1121 ], [ %190, %1145 ], [ %190, %1292 ], [ %190, %1286 ]
  %1394 = icmp ult i8* %1390, %12
  %1395 = icmp ult i8* %1391, %23
  %1396 = and i1 %1394, %1395
  br i1 %1396, label %59, label %1409

1397:                                             ; preds = %198, %1338, %1386
  %1398 = phi i8* [ getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0), %1386 ], [ getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0), %1338 ], [ getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), %198 ]
  %1399 = phi i8* [ %74, %1386 ], [ %144, %1338 ], [ %180, %198 ]
  %1400 = phi i64 [ %98, %1386 ], [ %1341, %1338 ], [ %189, %198 ]
  %1401 = phi i32 [ %97, %1386 ], [ %1340, %1338 ], [ %190, %198 ]
  %1402 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %0, i64 0, i32 6
  store i8* %1398, i8** %1402, align 8
  br label %1403

1403:                                             ; preds = %1397, %1386
  %1404 = phi i32 [ 16191, %1386 ], [ 16209, %1397 ]
  %1405 = phi i8* [ %74, %1386 ], [ %1399, %1397 ]
  %1406 = phi i64 [ %98, %1386 ], [ %1400, %1397 ]
  %1407 = phi i32 [ %97, %1386 ], [ %1401, %1397 ]
  %1408 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %5, i64 0, i32 1
  store i32 %1404, i32* %1408, align 8
  br label %1409

1409:                                             ; preds = %1389, %1403
  %1410 = phi i8* [ %1405, %1403 ], [ %1390, %1389 ]
  %1411 = phi i8* [ %61, %1403 ], [ %1391, %1389 ]
  %1412 = phi i64 [ %1406, %1403 ], [ %1392, %1389 ]
  %1413 = phi i32 [ %1407, %1403 ], [ %1393, %1389 ]
  %1414 = lshr i32 %1413, 3
  %1415 = zext i32 %1414 to i64
  %1416 = sub nsw i64 0, %1415
  %1417 = getelementptr inbounds i8, i8* %1410, i64 %1416
  %1418 = and i32 %1413, 7
  %1419 = shl nsw i32 -1, %1418
  %1420 = xor i32 %1419, -1
  %1421 = zext i32 %1420 to i64
  %1422 = and i64 %1412, %1421
  store i8* %1417, i8** %6, align 8
  store i8* %1411, i8** %13, align 8
  %1423 = ptrtoint i8* %12 to i64
  %1424 = ptrtoint i8* %1417 to i64
  %1425 = sub i64 %1423, %1424
  %1426 = trunc i64 %1425 to i32
  %1427 = add i32 %1426, 7
  store i32 %1427, i32* %8, align 8
  %1428 = ptrtoint i8* %23 to i64
  %1429 = ptrtoint i8* %1411 to i64
  %1430 = sub i64 %1428, %1429
  %1431 = trunc i64 %1430 to i32
  %1432 = add i32 %1431, 257
  store i32 %1432, i32* %15, align 8
  store i64 %1422, i64* %38, align 8
  store i32 %1418, i32* %40, align 8
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"chunkcopy_safe: argument 0"}
!4 = distinct !{!4, !"chunkcopy_safe"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"chunkcopy_safe: argument 0"}
!9 = distinct !{!9, !"chunkcopy_safe"}
!10 = distinct !{!10, !6}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.isvectorized", i32 1}
!18 = distinct !{!18, !6}
!19 = distinct !{!19, !6}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !6}
!22 = distinct !{!22, !6}
!23 = !{!24}
!24 = distinct !{!24, !25, !"chunkcopy_safe: argument 0"}
!25 = distinct !{!25, !"chunkcopy_safe"}
!26 = distinct !{!26, !6}
!27 = distinct !{!27, !6}
!28 = distinct !{!28, !6}
