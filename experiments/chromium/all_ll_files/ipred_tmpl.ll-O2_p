; ModuleID = '../../third_party/dav1d/libdav1d/src/ipred_tmpl.c'
source_filename = "../../third_party/dav1d/libdav1d/src/ipred_tmpl.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Dav1dIntraPredDSPContext = type { [14 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*], [3 x void (i16*, i8*, i64, i32, i32, i32, i32)*], [6 x void (i8*, i64, i8*, i32, i32, i16*, i32)*], void (i8*, i64, i16*, i8*, i32, i32)* }

@dav1d_sm_weights = external local_unnamed_addr constant [128 x i8], align 16
@dav1d_dr_intra_derivative = external local_unnamed_addr constant [44 x i16], align 16
@filter_edge.kernel = internal unnamed_addr constant [3 x [5 x i8]] [[5 x i8] c"\00\04\08\04\00", [5 x i8] c"\00\05\06\05\00", [5 x i8] c"\02\04\04\04\02"], align 1
@dav1d_filter_intra_taps = external local_unnamed_addr constant [5 x [64 x i8]], align 16

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @dav1d_intra_pred_dsp_init_8bpc(%struct.Dav1dIntraPredDSPContext*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.Dav1dIntraPredDSPContext, %struct.Dav1dIntraPredDSPContext* %0, i64 0, i32 0, i64 4
  %3 = bitcast void (i8*, i64, i8*, i32, i32, i32, i32, i32)** %2 to <2 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*>*
  store <2 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*> <void (i8*, i64, i8*, i32, i32, i32, i32, i32)* @ipred_dc_top_c, void (i8*, i64, i8*, i32, i32, i32, i32, i32)* @ipred_dc_128_c>, <2 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*>* %3, align 8
  %4 = getelementptr inbounds %struct.Dav1dIntraPredDSPContext, %struct.Dav1dIntraPredDSPContext* %0, i64 0, i32 0, i64 2
  %5 = bitcast void (i8*, i64, i8*, i32, i32, i32, i32, i32)** %4 to <2 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*>*
  store <2 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*> <void (i8*, i64, i8*, i32, i32, i32, i32, i32)* @ipred_h_c, void (i8*, i64, i8*, i32, i32, i32, i32, i32)* @ipred_dc_left_c>, <2 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*>* %5, align 8
  %6 = bitcast %struct.Dav1dIntraPredDSPContext* %0 to <2 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*>*
  store <2 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*> <void (i8*, i64, i8*, i32, i32, i32, i32, i32)* @ipred_dc_c, void (i8*, i64, i8*, i32, i32, i32, i32, i32)* @ipred_v_c>, <2 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*>* %6, align 8
  %7 = getelementptr inbounds %struct.Dav1dIntraPredDSPContext, %struct.Dav1dIntraPredDSPContext* %0, i64 0, i32 0, i64 12
  %8 = getelementptr inbounds %struct.Dav1dIntraPredDSPContext, %struct.Dav1dIntraPredDSPContext* %0, i64 0, i32 0, i64 10
  %9 = bitcast void (i8*, i64, i8*, i32, i32, i32, i32, i32)** %8 to <2 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*>*
  store <2 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*> <void (i8*, i64, i8*, i32, i32, i32, i32, i32)* @ipred_smooth_v_c, void (i8*, i64, i8*, i32, i32, i32, i32, i32)* @ipred_smooth_h_c>, <2 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*>* %9, align 8
  %10 = getelementptr inbounds %struct.Dav1dIntraPredDSPContext, %struct.Dav1dIntraPredDSPContext* %0, i64 0, i32 0, i64 6
  %11 = bitcast void (i8*, i64, i8*, i32, i32, i32, i32, i32)** %10 to <2 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*>*
  store <2 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*> <void (i8*, i64, i8*, i32, i32, i32, i32, i32)* @ipred_z1_c, void (i8*, i64, i8*, i32, i32, i32, i32, i32)* @ipred_z2_c>, <2 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*>* %11, align 8
  %12 = getelementptr inbounds %struct.Dav1dIntraPredDSPContext, %struct.Dav1dIntraPredDSPContext* %0, i64 0, i32 0, i64 8
  %13 = bitcast void (i8*, i64, i8*, i32, i32, i32, i32, i32)** %12 to <2 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*>*
  store <2 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*> <void (i8*, i64, i8*, i32, i32, i32, i32, i32)* @ipred_z3_c, void (i8*, i64, i8*, i32, i32, i32, i32, i32)* @ipred_smooth_c>, <2 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*>* %13, align 8
  %14 = bitcast void (i8*, i64, i8*, i32, i32, i32, i32, i32)** %7 to <2 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*>*
  store <2 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*> <void (i8*, i64, i8*, i32, i32, i32, i32, i32)* @ipred_paeth_c, void (i8*, i64, i8*, i32, i32, i32, i32, i32)* @ipred_filter_c>, <2 x void (i8*, i64, i8*, i32, i32, i32, i32, i32)*>* %14, align 8
  %15 = getelementptr inbounds %struct.Dav1dIntraPredDSPContext, %struct.Dav1dIntraPredDSPContext* %0, i64 0, i32 1, i64 0
  %16 = bitcast void (i16*, i8*, i64, i32, i32, i32, i32)** %15 to <2 x void (i16*, i8*, i64, i32, i32, i32, i32)*>*
  store <2 x void (i16*, i8*, i64, i32, i32, i32, i32)*> <void (i16*, i8*, i64, i32, i32, i32, i32)* @cfl_ac_420_c, void (i16*, i8*, i64, i32, i32, i32, i32)* @cfl_ac_422_c>, <2 x void (i16*, i8*, i64, i32, i32, i32, i32)*>* %16, align 8
  %17 = getelementptr inbounds %struct.Dav1dIntraPredDSPContext, %struct.Dav1dIntraPredDSPContext* %0, i64 0, i32 1, i64 2
  store void (i16*, i8*, i64, i32, i32, i32, i32)* @cfl_ac_444_c, void (i16*, i8*, i64, i32, i32, i32, i32)** %17, align 8
  %18 = getelementptr inbounds %struct.Dav1dIntraPredDSPContext, %struct.Dav1dIntraPredDSPContext* %0, i64 0, i32 2, i64 0
  store void (i8*, i64, i8*, i32, i32, i16*, i32)* @ipred_cfl_c, void (i8*, i64, i8*, i32, i32, i16*, i32)** %18, align 8
  %19 = getelementptr inbounds %struct.Dav1dIntraPredDSPContext, %struct.Dav1dIntraPredDSPContext* %0, i64 0, i32 2, i64 5
  store void (i8*, i64, i8*, i32, i32, i16*, i32)* @ipred_cfl_128_c, void (i8*, i64, i8*, i32, i32, i16*, i32)** %19, align 8
  %20 = getelementptr inbounds %struct.Dav1dIntraPredDSPContext, %struct.Dav1dIntraPredDSPContext* %0, i64 0, i32 2, i64 3
  %21 = bitcast void (i8*, i64, i8*, i32, i32, i16*, i32)** %20 to <2 x void (i8*, i64, i8*, i32, i32, i16*, i32)*>*
  store <2 x void (i8*, i64, i8*, i32, i32, i16*, i32)*> <void (i8*, i64, i8*, i32, i32, i16*, i32)* @ipred_cfl_left_c, void (i8*, i64, i8*, i32, i32, i16*, i32)* @ipred_cfl_top_c>, <2 x void (i8*, i64, i8*, i32, i32, i16*, i32)*>* %21, align 8
  %22 = getelementptr inbounds %struct.Dav1dIntraPredDSPContext, %struct.Dav1dIntraPredDSPContext* %0, i64 0, i32 3
  store void (i8*, i64, i16*, i8*, i32, i32)* @pal_pred_c, void (i8*, i64, i16*, i8*, i32, i32)** %22, align 8
  tail call void @dav1d_intra_pred_dsp_init_x86_8bpc(%struct.Dav1dIntraPredDSPContext* %0) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @ipred_dc_c(i8* nocapture, i64, i8* nocapture readonly, i32, i32, i32, i32, i32) #1 {
  %9 = add nsw i32 %4, %3
  %10 = ashr i32 %9, 1
  %11 = icmp sgt i32 %3, 0
  br i1 %11, label %12, label %88

12:                                               ; preds = %8
  %13 = zext i32 %3 to i64
  %14 = icmp ult i32 %3, 8
  br i1 %14, label %15, label %18

15:                                               ; preds = %78, %12
  %16 = phi i64 [ 0, %12 ], [ %19, %78 ]
  %17 = phi i32 [ %10, %12 ], [ %86, %78 ]
  br label %179

18:                                               ; preds = %12
  %19 = and i64 %13, 4294967288
  %20 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %10, i32 0
  %21 = add nsw i64 %19, -8
  %22 = lshr exact i64 %21, 3
  %23 = add nuw nsw i64 %22, 1
  %24 = and i64 %23, 1
  %25 = icmp eq i64 %21, 0
  br i1 %25, label %60, label %26

26:                                               ; preds = %18
  %27 = sub nuw nsw i64 %23, %24
  br label %28

28:                                               ; preds = %28, %26
  %29 = phi i64 [ 0, %26 ], [ %55, %28 ]
  %30 = phi <4 x i32> [ %20, %26 ], [ %53, %28 ]
  %31 = phi <4 x i32> [ zeroinitializer, %26 ], [ %54, %28 ]
  %32 = phi i64 [ %27, %26 ], [ %56, %28 ]
  %33 = or i64 %29, 1
  %34 = getelementptr inbounds i8, i8* %2, i64 %33
  %35 = bitcast i8* %34 to <4 x i8>*
  %36 = load <4 x i8>, <4 x i8>* %35, align 1
  %37 = getelementptr inbounds i8, i8* %34, i64 4
  %38 = bitcast i8* %37 to <4 x i8>*
  %39 = load <4 x i8>, <4 x i8>* %38, align 1
  %40 = zext <4 x i8> %36 to <4 x i32>
  %41 = zext <4 x i8> %39 to <4 x i32>
  %42 = add <4 x i32> %30, %40
  %43 = add <4 x i32> %31, %41
  %44 = or i64 %29, 9
  %45 = getelementptr inbounds i8, i8* %2, i64 %44
  %46 = bitcast i8* %45 to <4 x i8>*
  %47 = load <4 x i8>, <4 x i8>* %46, align 1
  %48 = getelementptr inbounds i8, i8* %45, i64 4
  %49 = bitcast i8* %48 to <4 x i8>*
  %50 = load <4 x i8>, <4 x i8>* %49, align 1
  %51 = zext <4 x i8> %47 to <4 x i32>
  %52 = zext <4 x i8> %50 to <4 x i32>
  %53 = add <4 x i32> %42, %51
  %54 = add <4 x i32> %43, %52
  %55 = add i64 %29, 16
  %56 = add i64 %32, -2
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %28, !llvm.loop !2

58:                                               ; preds = %28
  %59 = or i64 %55, 1
  br label %60

60:                                               ; preds = %58, %18
  %61 = phi <4 x i32> [ undef, %18 ], [ %53, %58 ]
  %62 = phi <4 x i32> [ undef, %18 ], [ %54, %58 ]
  %63 = phi i64 [ 1, %18 ], [ %59, %58 ]
  %64 = phi <4 x i32> [ %20, %18 ], [ %53, %58 ]
  %65 = phi <4 x i32> [ zeroinitializer, %18 ], [ %54, %58 ]
  %66 = icmp eq i64 %24, 0
  br i1 %66, label %78, label %67

67:                                               ; preds = %60
  %68 = getelementptr inbounds i8, i8* %2, i64 %63
  %69 = getelementptr inbounds i8, i8* %68, i64 4
  %70 = bitcast i8* %69 to <4 x i8>*
  %71 = load <4 x i8>, <4 x i8>* %70, align 1
  %72 = zext <4 x i8> %71 to <4 x i32>
  %73 = add <4 x i32> %65, %72
  %74 = bitcast i8* %68 to <4 x i8>*
  %75 = load <4 x i8>, <4 x i8>* %74, align 1
  %76 = zext <4 x i8> %75 to <4 x i32>
  %77 = add <4 x i32> %64, %76
  br label %78

78:                                               ; preds = %60, %67
  %79 = phi <4 x i32> [ %61, %60 ], [ %77, %67 ]
  %80 = phi <4 x i32> [ %62, %60 ], [ %73, %67 ]
  %81 = add <4 x i32> %80, %79
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %83 = add <4 x i32> %81, %82
  %84 = shufflevector <4 x i32> %83, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %85 = add <4 x i32> %83, %84
  %86 = extractelement <4 x i32> %85, i32 0
  %87 = icmp eq i64 %19, %13
  br i1 %87, label %88, label %15

88:                                               ; preds = %179, %78, %8
  %89 = phi i32 [ %10, %8 ], [ %86, %78 ], [ %186, %179 ]
  %90 = icmp sgt i32 %4, 0
  br i1 %90, label %91, label %188

91:                                               ; preds = %88
  %92 = zext i32 %4 to i64
  %93 = icmp ult i32 %4, 8
  br i1 %93, label %94, label %97

94:                                               ; preds = %169, %91
  %95 = phi i64 [ 0, %91 ], [ %98, %169 ]
  %96 = phi i32 [ %89, %91 ], [ %177, %169 ]
  br label %193

97:                                               ; preds = %91
  %98 = and i64 %92, 4294967288
  %99 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %89, i32 0
  %100 = add nsw i64 %98, -8
  %101 = lshr exact i64 %100, 3
  %102 = add nuw nsw i64 %101, 1
  %103 = and i64 %102, 1
  %104 = icmp eq i64 %100, 0
  br i1 %104, label %147, label %105

105:                                              ; preds = %97
  %106 = sub nuw nsw i64 %102, %103
  br label %107

107:                                              ; preds = %107, %105
  %108 = phi i64 [ 0, %105 ], [ %142, %107 ]
  %109 = phi <4 x i32> [ %99, %105 ], [ %140, %107 ]
  %110 = phi <4 x i32> [ zeroinitializer, %105 ], [ %141, %107 ]
  %111 = phi i64 [ %106, %105 ], [ %143, %107 ]
  %112 = xor i64 %108, -1
  %113 = getelementptr inbounds i8, i8* %2, i64 %112
  %114 = getelementptr inbounds i8, i8* %113, i64 -3
  %115 = bitcast i8* %114 to <4 x i8>*
  %116 = load <4 x i8>, <4 x i8>* %115, align 1
  %117 = shufflevector <4 x i8> %116, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %118 = getelementptr inbounds i8, i8* %113, i64 -4
  %119 = getelementptr inbounds i8, i8* %118, i64 -3
  %120 = bitcast i8* %119 to <4 x i8>*
  %121 = load <4 x i8>, <4 x i8>* %120, align 1
  %122 = shufflevector <4 x i8> %121, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %123 = zext <4 x i8> %117 to <4 x i32>
  %124 = zext <4 x i8> %122 to <4 x i32>
  %125 = add <4 x i32> %109, %123
  %126 = add <4 x i32> %110, %124
  %127 = sub nuw nsw i64 -9, %108
  %128 = getelementptr inbounds i8, i8* %2, i64 %127
  %129 = getelementptr inbounds i8, i8* %128, i64 -3
  %130 = bitcast i8* %129 to <4 x i8>*
  %131 = load <4 x i8>, <4 x i8>* %130, align 1
  %132 = shufflevector <4 x i8> %131, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %133 = getelementptr inbounds i8, i8* %128, i64 -4
  %134 = getelementptr inbounds i8, i8* %133, i64 -3
  %135 = bitcast i8* %134 to <4 x i8>*
  %136 = load <4 x i8>, <4 x i8>* %135, align 1
  %137 = shufflevector <4 x i8> %136, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %138 = zext <4 x i8> %132 to <4 x i32>
  %139 = zext <4 x i8> %137 to <4 x i32>
  %140 = add <4 x i32> %125, %138
  %141 = add <4 x i32> %126, %139
  %142 = add i64 %108, 16
  %143 = add i64 %111, -2
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %107, !llvm.loop !4

145:                                              ; preds = %107
  %146 = sub i64 -17, %108
  br label %147

147:                                              ; preds = %145, %97
  %148 = phi <4 x i32> [ undef, %97 ], [ %140, %145 ]
  %149 = phi <4 x i32> [ undef, %97 ], [ %141, %145 ]
  %150 = phi i64 [ -1, %97 ], [ %146, %145 ]
  %151 = phi <4 x i32> [ %99, %97 ], [ %140, %145 ]
  %152 = phi <4 x i32> [ zeroinitializer, %97 ], [ %141, %145 ]
  %153 = icmp eq i64 %103, 0
  br i1 %153, label %169, label %154

154:                                              ; preds = %147
  %155 = getelementptr inbounds i8, i8* %2, i64 %150
  %156 = getelementptr inbounds i8, i8* %155, i64 -4
  %157 = getelementptr inbounds i8, i8* %156, i64 -3
  %158 = bitcast i8* %157 to <4 x i8>*
  %159 = load <4 x i8>, <4 x i8>* %158, align 1
  %160 = shufflevector <4 x i8> %159, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %161 = zext <4 x i8> %160 to <4 x i32>
  %162 = add <4 x i32> %152, %161
  %163 = getelementptr inbounds i8, i8* %155, i64 -3
  %164 = bitcast i8* %163 to <4 x i8>*
  %165 = load <4 x i8>, <4 x i8>* %164, align 1
  %166 = shufflevector <4 x i8> %165, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %167 = zext <4 x i8> %166 to <4 x i32>
  %168 = add <4 x i32> %151, %167
  br label %169

169:                                              ; preds = %147, %154
  %170 = phi <4 x i32> [ %148, %147 ], [ %168, %154 ]
  %171 = phi <4 x i32> [ %149, %147 ], [ %162, %154 ]
  %172 = add <4 x i32> %171, %170
  %173 = shufflevector <4 x i32> %172, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %174 = add <4 x i32> %172, %173
  %175 = shufflevector <4 x i32> %174, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %176 = add <4 x i32> %174, %175
  %177 = extractelement <4 x i32> %176, i32 0
  %178 = icmp eq i64 %98, %92
  br i1 %178, label %188, label %94

179:                                              ; preds = %15, %179
  %180 = phi i64 [ %182, %179 ], [ %16, %15 ]
  %181 = phi i32 [ %186, %179 ], [ %17, %15 ]
  %182 = add nuw nsw i64 %180, 1
  %183 = getelementptr inbounds i8, i8* %2, i64 %182
  %184 = load i8, i8* %183, align 1
  %185 = zext i8 %184 to i32
  %186 = add i32 %181, %185
  %187 = icmp eq i64 %182, %13
  br i1 %187, label %88, label %179, !llvm.loop !5

188:                                              ; preds = %193, %169, %88
  %189 = phi i32 [ %89, %88 ], [ %177, %169 ], [ %201, %193 ]
  %190 = tail call i32 @llvm.cttz.i32(i32 %9, i1 true) #10, !range !7
  %191 = lshr i32 %189, %190
  %192 = icmp eq i32 %3, %4
  br i1 %192, label %214, label %203

193:                                              ; preds = %94, %193
  %194 = phi i64 [ %196, %193 ], [ %95, %94 ]
  %195 = phi i32 [ %201, %193 ], [ %96, %94 ]
  %196 = add nuw nsw i64 %194, 1
  %197 = xor i64 %194, -1
  %198 = getelementptr inbounds i8, i8* %2, i64 %197
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i32
  %201 = add i32 %195, %200
  %202 = icmp eq i64 %196, %92
  br i1 %202, label %188, label %193, !llvm.loop !8

203:                                              ; preds = %188
  %204 = shl nsw i32 %4, 1
  %205 = icmp slt i32 %204, %3
  br i1 %205, label %210, label %206

206:                                              ; preds = %203
  %207 = shl nsw i32 %3, 1
  %208 = icmp slt i32 %207, %4
  %209 = select i1 %208, i32 13108, i32 21846
  br label %210

210:                                              ; preds = %206, %203
  %211 = phi i32 [ 13108, %203 ], [ %209, %206 ]
  %212 = mul i32 %211, %191
  %213 = lshr i32 %212, 16
  br label %214

214:                                              ; preds = %188, %210
  %215 = phi i32 [ %213, %210 ], [ %191, %188 ]
  tail call fastcc void @splat_dc(i8* %0, i64 %1, i32 %3, i32 %4, i32 %215)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @ipred_dc_128_c(i8* nocapture, i64, i8* nocapture readnone, i32, i32, i32, i32, i32) #1 {
  tail call fastcc void @splat_dc(i8* %0, i64 %1, i32 %3, i32 %4, i32 128)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @ipred_dc_top_c(i8* nocapture, i64, i8* nocapture readonly, i32, i32, i32, i32, i32) #1 {
  %9 = ashr i32 %3, 1
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %96

11:                                               ; preds = %8
  %12 = zext i32 %3 to i64
  %13 = icmp ult i32 %3, 8
  br i1 %13, label %84, label %14

14:                                               ; preds = %11
  %15 = and i64 %12, 4294967288
  %16 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %9, i32 0
  %17 = add nsw i64 %15, -8
  %18 = lshr exact i64 %17, 3
  %19 = add nuw nsw i64 %18, 1
  %20 = and i64 %19, 1
  %21 = icmp eq i64 %17, 0
  br i1 %21, label %56, label %22

22:                                               ; preds = %14
  %23 = sub nuw nsw i64 %19, %20
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i64 [ 0, %22 ], [ %51, %24 ]
  %26 = phi <4 x i32> [ %16, %22 ], [ %49, %24 ]
  %27 = phi <4 x i32> [ zeroinitializer, %22 ], [ %50, %24 ]
  %28 = phi i64 [ %23, %22 ], [ %52, %24 ]
  %29 = or i64 %25, 1
  %30 = getelementptr inbounds i8, i8* %2, i64 %29
  %31 = bitcast i8* %30 to <4 x i8>*
  %32 = load <4 x i8>, <4 x i8>* %31, align 1
  %33 = getelementptr inbounds i8, i8* %30, i64 4
  %34 = bitcast i8* %33 to <4 x i8>*
  %35 = load <4 x i8>, <4 x i8>* %34, align 1
  %36 = zext <4 x i8> %32 to <4 x i32>
  %37 = zext <4 x i8> %35 to <4 x i32>
  %38 = add <4 x i32> %26, %36
  %39 = add <4 x i32> %27, %37
  %40 = or i64 %25, 9
  %41 = getelementptr inbounds i8, i8* %2, i64 %40
  %42 = bitcast i8* %41 to <4 x i8>*
  %43 = load <4 x i8>, <4 x i8>* %42, align 1
  %44 = getelementptr inbounds i8, i8* %41, i64 4
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = zext <4 x i8> %43 to <4 x i32>
  %48 = zext <4 x i8> %46 to <4 x i32>
  %49 = add <4 x i32> %38, %47
  %50 = add <4 x i32> %39, %48
  %51 = add i64 %25, 16
  %52 = add i64 %28, -2
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %24, !llvm.loop !9

54:                                               ; preds = %24
  %55 = or i64 %51, 1
  br label %56

56:                                               ; preds = %54, %14
  %57 = phi <4 x i32> [ undef, %14 ], [ %49, %54 ]
  %58 = phi <4 x i32> [ undef, %14 ], [ %50, %54 ]
  %59 = phi i64 [ 1, %14 ], [ %55, %54 ]
  %60 = phi <4 x i32> [ %16, %14 ], [ %49, %54 ]
  %61 = phi <4 x i32> [ zeroinitializer, %14 ], [ %50, %54 ]
  %62 = icmp eq i64 %20, 0
  br i1 %62, label %74, label %63

63:                                               ; preds = %56
  %64 = getelementptr inbounds i8, i8* %2, i64 %59
  %65 = getelementptr inbounds i8, i8* %64, i64 4
  %66 = bitcast i8* %65 to <4 x i8>*
  %67 = load <4 x i8>, <4 x i8>* %66, align 1
  %68 = zext <4 x i8> %67 to <4 x i32>
  %69 = add <4 x i32> %61, %68
  %70 = bitcast i8* %64 to <4 x i8>*
  %71 = load <4 x i8>, <4 x i8>* %70, align 1
  %72 = zext <4 x i8> %71 to <4 x i32>
  %73 = add <4 x i32> %60, %72
  br label %74

74:                                               ; preds = %56, %63
  %75 = phi <4 x i32> [ %57, %56 ], [ %73, %63 ]
  %76 = phi <4 x i32> [ %58, %56 ], [ %69, %63 ]
  %77 = add <4 x i32> %76, %75
  %78 = shufflevector <4 x i32> %77, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %79 = add <4 x i32> %77, %78
  %80 = shufflevector <4 x i32> %79, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %81 = add <4 x i32> %79, %80
  %82 = extractelement <4 x i32> %81, i32 0
  %83 = icmp eq i64 %15, %12
  br i1 %83, label %96, label %84

84:                                               ; preds = %74, %11
  %85 = phi i64 [ 0, %11 ], [ %15, %74 ]
  %86 = phi i32 [ %9, %11 ], [ %82, %74 ]
  br label %87

87:                                               ; preds = %84, %87
  %88 = phi i64 [ %90, %87 ], [ %85, %84 ]
  %89 = phi i32 [ %94, %87 ], [ %86, %84 ]
  %90 = add nuw nsw i64 %88, 1
  %91 = getelementptr inbounds i8, i8* %2, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = add i32 %89, %93
  %95 = icmp eq i64 %90, %12
  br i1 %95, label %96, label %87, !llvm.loop !10

96:                                               ; preds = %87, %74, %8
  %97 = phi i32 [ %9, %8 ], [ %82, %74 ], [ %94, %87 ]
  %98 = tail call i32 @llvm.cttz.i32(i32 %3, i1 true) #10, !range !7
  %99 = lshr i32 %97, %98
  tail call fastcc void @splat_dc(i8* %0, i64 %1, i32 %3, i32 %4, i32 %99)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @ipred_dc_left_c(i8* nocapture, i64, i8* nocapture readonly, i32, i32, i32, i32, i32) #1 {
  %9 = ashr i32 %4, 1
  %10 = icmp sgt i32 %4, 0
  br i1 %10, label %11, label %109

11:                                               ; preds = %8
  %12 = zext i32 %4 to i64
  %13 = icmp ult i32 %4, 8
  br i1 %13, label %96, label %14

14:                                               ; preds = %11
  %15 = and i64 %12, 4294967288
  %16 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %9, i32 0
  %17 = add nsw i64 %15, -8
  %18 = lshr exact i64 %17, 3
  %19 = add nuw nsw i64 %18, 1
  %20 = and i64 %19, 1
  %21 = icmp eq i64 %17, 0
  br i1 %21, label %64, label %22

22:                                               ; preds = %14
  %23 = sub nuw nsw i64 %19, %20
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i64 [ 0, %22 ], [ %59, %24 ]
  %26 = phi <4 x i32> [ %16, %22 ], [ %57, %24 ]
  %27 = phi <4 x i32> [ zeroinitializer, %22 ], [ %58, %24 ]
  %28 = phi i64 [ %23, %22 ], [ %60, %24 ]
  %29 = xor i64 %25, -1
  %30 = getelementptr inbounds i8, i8* %2, i64 %29
  %31 = getelementptr inbounds i8, i8* %30, i64 -3
  %32 = bitcast i8* %31 to <4 x i8>*
  %33 = load <4 x i8>, <4 x i8>* %32, align 1
  %34 = shufflevector <4 x i8> %33, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %35 = getelementptr inbounds i8, i8* %30, i64 -4
  %36 = getelementptr inbounds i8, i8* %35, i64 -3
  %37 = bitcast i8* %36 to <4 x i8>*
  %38 = load <4 x i8>, <4 x i8>* %37, align 1
  %39 = shufflevector <4 x i8> %38, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %40 = zext <4 x i8> %34 to <4 x i32>
  %41 = zext <4 x i8> %39 to <4 x i32>
  %42 = add <4 x i32> %26, %40
  %43 = add <4 x i32> %27, %41
  %44 = sub nuw nsw i64 -9, %25
  %45 = getelementptr inbounds i8, i8* %2, i64 %44
  %46 = getelementptr inbounds i8, i8* %45, i64 -3
  %47 = bitcast i8* %46 to <4 x i8>*
  %48 = load <4 x i8>, <4 x i8>* %47, align 1
  %49 = shufflevector <4 x i8> %48, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %50 = getelementptr inbounds i8, i8* %45, i64 -4
  %51 = getelementptr inbounds i8, i8* %50, i64 -3
  %52 = bitcast i8* %51 to <4 x i8>*
  %53 = load <4 x i8>, <4 x i8>* %52, align 1
  %54 = shufflevector <4 x i8> %53, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %55 = zext <4 x i8> %49 to <4 x i32>
  %56 = zext <4 x i8> %54 to <4 x i32>
  %57 = add <4 x i32> %42, %55
  %58 = add <4 x i32> %43, %56
  %59 = add i64 %25, 16
  %60 = add i64 %28, -2
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %24, !llvm.loop !11

62:                                               ; preds = %24
  %63 = sub i64 -17, %25
  br label %64

64:                                               ; preds = %62, %14
  %65 = phi <4 x i32> [ undef, %14 ], [ %57, %62 ]
  %66 = phi <4 x i32> [ undef, %14 ], [ %58, %62 ]
  %67 = phi i64 [ -1, %14 ], [ %63, %62 ]
  %68 = phi <4 x i32> [ %16, %14 ], [ %57, %62 ]
  %69 = phi <4 x i32> [ zeroinitializer, %14 ], [ %58, %62 ]
  %70 = icmp eq i64 %20, 0
  br i1 %70, label %86, label %71

71:                                               ; preds = %64
  %72 = getelementptr inbounds i8, i8* %2, i64 %67
  %73 = getelementptr inbounds i8, i8* %72, i64 -4
  %74 = getelementptr inbounds i8, i8* %73, i64 -3
  %75 = bitcast i8* %74 to <4 x i8>*
  %76 = load <4 x i8>, <4 x i8>* %75, align 1
  %77 = shufflevector <4 x i8> %76, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %78 = zext <4 x i8> %77 to <4 x i32>
  %79 = add <4 x i32> %69, %78
  %80 = getelementptr inbounds i8, i8* %72, i64 -3
  %81 = bitcast i8* %80 to <4 x i8>*
  %82 = load <4 x i8>, <4 x i8>* %81, align 1
  %83 = shufflevector <4 x i8> %82, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %84 = zext <4 x i8> %83 to <4 x i32>
  %85 = add <4 x i32> %68, %84
  br label %86

86:                                               ; preds = %64, %71
  %87 = phi <4 x i32> [ %65, %64 ], [ %85, %71 ]
  %88 = phi <4 x i32> [ %66, %64 ], [ %79, %71 ]
  %89 = add <4 x i32> %88, %87
  %90 = shufflevector <4 x i32> %89, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %91 = add <4 x i32> %89, %90
  %92 = shufflevector <4 x i32> %91, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %93 = add <4 x i32> %91, %92
  %94 = extractelement <4 x i32> %93, i32 0
  %95 = icmp eq i64 %15, %12
  br i1 %95, label %109, label %96

96:                                               ; preds = %86, %11
  %97 = phi i64 [ 0, %11 ], [ %15, %86 ]
  %98 = phi i32 [ %9, %11 ], [ %94, %86 ]
  br label %99

99:                                               ; preds = %96, %99
  %100 = phi i64 [ %102, %99 ], [ %97, %96 ]
  %101 = phi i32 [ %107, %99 ], [ %98, %96 ]
  %102 = add nuw nsw i64 %100, 1
  %103 = xor i64 %100, -1
  %104 = getelementptr inbounds i8, i8* %2, i64 %103
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = add i32 %101, %106
  %108 = icmp eq i64 %102, %12
  br i1 %108, label %109, label %99, !llvm.loop !12

109:                                              ; preds = %99, %86, %8
  %110 = phi i32 [ %9, %8 ], [ %94, %86 ], [ %107, %99 ]
  %111 = tail call i32 @llvm.cttz.i32(i32 %4, i1 true) #10, !range !7
  %112 = lshr i32 %110, %111
  tail call fastcc void @splat_dc(i8* %0, i64 %1, i32 %3, i32 %4, i32 %112)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @ipred_h_c(i8* nocapture, i64, i8* nocapture readonly, i32, i32, i32, i32, i32) #1 {
  %9 = icmp sgt i32 %4, 0
  br i1 %9, label %10, label %33

10:                                               ; preds = %8
  %11 = sext i32 %3 to i64
  %12 = zext i32 %4 to i64
  %13 = add nsw i64 %12, -1
  %14 = and i64 %12, 3
  %15 = icmp ult i64 %13, 3
  br i1 %15, label %18, label %16

16:                                               ; preds = %10
  %17 = sub nsw i64 %12, %14
  br label %34

18:                                               ; preds = %34, %10
  %19 = phi i64 [ 0, %10 ], [ %50, %34 ]
  %20 = phi i8* [ %0, %10 ], [ %54, %34 ]
  %21 = icmp eq i64 %14, 0
  br i1 %21, label %33, label %22

22:                                               ; preds = %18, %22
  %23 = phi i64 [ %26, %22 ], [ %19, %18 ]
  %24 = phi i8* [ %30, %22 ], [ %20, %18 ]
  %25 = phi i64 [ %31, %22 ], [ %14, %18 ]
  %26 = add nuw nsw i64 %23, 1
  %27 = xor i64 %23, -1
  %28 = getelementptr inbounds i8, i8* %2, i64 %27
  %29 = load i8, i8* %28, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %24, i8 %29, i64 %11, i1 false)
  %30 = getelementptr inbounds i8, i8* %24, i64 %1
  %31 = add i64 %25, -1
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %22, !llvm.loop !13

33:                                               ; preds = %18, %22, %8
  ret void

34:                                               ; preds = %34, %16
  %35 = phi i64 [ 0, %16 ], [ %50, %34 ]
  %36 = phi i8* [ %0, %16 ], [ %54, %34 ]
  %37 = phi i64 [ %17, %16 ], [ %55, %34 ]
  %38 = xor i64 %35, -1
  %39 = getelementptr inbounds i8, i8* %2, i64 %38
  %40 = load i8, i8* %39, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 %40, i64 %11, i1 false)
  %41 = getelementptr inbounds i8, i8* %36, i64 %1
  %42 = sub nuw nsw i64 -2, %35
  %43 = getelementptr inbounds i8, i8* %2, i64 %42
  %44 = load i8, i8* %43, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %41, i8 %44, i64 %11, i1 false)
  %45 = getelementptr inbounds i8, i8* %41, i64 %1
  %46 = sub nuw nsw i64 -3, %35
  %47 = getelementptr inbounds i8, i8* %2, i64 %46
  %48 = load i8, i8* %47, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 %48, i64 %11, i1 false)
  %49 = getelementptr inbounds i8, i8* %45, i64 %1
  %50 = add nuw nsw i64 %35, 4
  %51 = sub nuw nsw i64 -4, %35
  %52 = getelementptr inbounds i8, i8* %2, i64 %51
  %53 = load i8, i8* %52, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 %53, i64 %11, i1 false)
  %54 = getelementptr inbounds i8, i8* %49, i64 %1
  %55 = add i64 %37, -4
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %18, label %34
}

; Function Attrs: nounwind ssp uwtable
define internal void @ipred_v_c(i8* nocapture, i64, i8* nocapture readonly, i32, i32, i32, i32, i32) #1 {
  %9 = icmp sgt i32 %4, 0
  br i1 %9, label %10, label %27

10:                                               ; preds = %8
  %11 = getelementptr inbounds i8, i8* %2, i64 1
  %12 = sext i32 %3 to i64
  %13 = add i32 %4, -1
  %14 = and i32 %4, 3
  %15 = icmp ult i32 %13, 3
  br i1 %15, label %18, label %16

16:                                               ; preds = %10
  %17 = sub i32 %4, %14
  br label %28

18:                                               ; preds = %28, %10
  %19 = phi i8* [ %0, %10 ], [ %34, %28 ]
  %20 = icmp eq i32 %14, 0
  br i1 %20, label %27, label %21

21:                                               ; preds = %18, %21
  %22 = phi i8* [ %24, %21 ], [ %19, %18 ]
  %23 = phi i32 [ %25, %21 ], [ %14, %18 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %22, i8* align 1 %11, i64 %12, i1 false)
  %24 = getelementptr inbounds i8, i8* %22, i64 %1
  %25 = add i32 %23, -1
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %21, !llvm.loop !15

27:                                               ; preds = %18, %21, %8
  ret void

28:                                               ; preds = %28, %16
  %29 = phi i8* [ %0, %16 ], [ %34, %28 ]
  %30 = phi i32 [ %17, %16 ], [ %35, %28 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %29, i8* align 1 %11, i64 %12, i1 false)
  %31 = getelementptr inbounds i8, i8* %29, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %31, i8* align 1 %11, i64 %12, i1 false)
  %32 = getelementptr inbounds i8, i8* %31, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 1 %11, i64 %12, i1 false)
  %33 = getelementptr inbounds i8, i8* %32, i64 %1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %33, i8* align 1 %11, i64 %12, i1 false)
  %34 = getelementptr inbounds i8, i8* %33, i64 %1
  %35 = add i32 %30, -4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %18, label %28
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @ipred_paeth_c(i8* nocapture, i64, i8* nocapture readonly, i32, i32, i32, i32, i32) #2 {
  %9 = load i8, i8* %2, align 1
  %10 = zext i8 %9 to i32
  %11 = icmp sgt i32 %4, 0
  br i1 %11, label %12, label %26

12:                                               ; preds = %8
  %13 = icmp sgt i32 %3, 0
  %14 = zext i32 %4 to i64
  %15 = zext i32 %3 to i64
  %16 = getelementptr i8, i8* %2, i64 1
  %17 = add nuw nsw i64 %15, 1
  %18 = getelementptr i8, i8* %2, i64 %17
  %19 = icmp ult i32 %3, 16
  %20 = and i64 %15, 4294967280
  %21 = insertelement <16 x i32> undef, i32 %10, i32 0
  %22 = shufflevector <16 x i32> %21, <16 x i32> undef, <16 x i32> zeroinitializer
  %23 = insertelement <16 x i8> undef, i8 %9, i32 0
  %24 = shufflevector <16 x i8> %23, <16 x i8> undef, <16 x i32> zeroinitializer
  %25 = icmp eq i64 %20, %15
  br label %27

26:                                               ; preds = %86, %8
  ret void

27:                                               ; preds = %86, %12
  %28 = phi i64 [ 0, %12 ], [ %34, %86 ]
  %29 = phi i8* [ %0, %12 ], [ %87, %86 ]
  %30 = mul i64 %28, %1
  %31 = getelementptr i8, i8* %0, i64 %30
  %32 = add i64 %30, %15
  %33 = getelementptr i8, i8* %0, i64 %32
  %34 = add nuw nsw i64 %28, 1
  %35 = xor i64 %28, -1
  %36 = getelementptr inbounds i8, i8* %2, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  br i1 %13, label %39, label %86

39:                                               ; preds = %27
  %40 = sub nsw i32 %38, %10
  %41 = sub nsw i32 0, %40
  %42 = icmp slt i32 %40, 0
  %43 = select i1 %42, i32 %41, i32 %40
  br i1 %19, label %44, label %46

44:                                               ; preds = %85, %46, %39
  %45 = phi i64 [ 0, %46 ], [ 0, %39 ], [ %20, %85 ]
  br label %89

46:                                               ; preds = %39
  %47 = icmp ult i8* %31, %18
  %48 = icmp ult i8* %16, %33
  %49 = and i1 %47, %48
  br i1 %49, label %44, label %50

50:                                               ; preds = %46
  %51 = insertelement <16 x i32> undef, i32 %40, i32 0
  %52 = shufflevector <16 x i32> %51, <16 x i32> undef, <16 x i32> zeroinitializer
  %53 = insertelement <16 x i32> undef, i32 %38, i32 0
  %54 = shufflevector <16 x i32> %53, <16 x i32> undef, <16 x i32> zeroinitializer
  %55 = insertelement <16 x i32> undef, i32 %43, i32 0
  %56 = shufflevector <16 x i32> %55, <16 x i32> undef, <16 x i32> zeroinitializer
  %57 = insertelement <16 x i8> undef, i8 %37, i32 0
  %58 = shufflevector <16 x i8> %57, <16 x i8> undef, <16 x i32> zeroinitializer
  br label %59

59:                                               ; preds = %59, %50
  %60 = phi i64 [ 0, %50 ], [ %83, %59 ]
  %61 = or i64 %60, 1
  %62 = getelementptr inbounds i8, i8* %2, i64 %61
  %63 = bitcast i8* %62 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1, !alias.scope !16
  %65 = zext <16 x i8> %64 to <16 x i32>
  %66 = add nsw <16 x i32> %52, %65
  %67 = sub nsw <16 x i32> %54, %66
  %68 = icmp slt <16 x i32> %67, zeroinitializer
  %69 = sub nsw <16 x i32> zeroinitializer, %67
  %70 = select <16 x i1> %68, <16 x i32> %69, <16 x i32> %67
  %71 = sub nsw <16 x i32> %22, %66
  %72 = icmp slt <16 x i32> %71, zeroinitializer
  %73 = sub nsw <16 x i32> zeroinitializer, %71
  %74 = select <16 x i1> %72, <16 x i32> %73, <16 x i32> %71
  %75 = icmp sgt <16 x i32> %70, %56
  %76 = icmp sgt <16 x i32> %70, %74
  %77 = or <16 x i1> %75, %76
  %78 = icmp sgt <16 x i32> %56, %74
  %79 = select <16 x i1> %78, <16 x i8> %24, <16 x i8> %64
  %80 = select <16 x i1> %77, <16 x i8> %79, <16 x i8> %58
  %81 = getelementptr inbounds i8, i8* %29, i64 %60
  %82 = bitcast i8* %81 to <16 x i8>*
  store <16 x i8> %80, <16 x i8>* %82, align 1, !alias.scope !19, !noalias !16
  %83 = add i64 %60, 16
  %84 = icmp eq i64 %83, %20
  br i1 %84, label %85, label %59, !llvm.loop !21

85:                                               ; preds = %59
  br i1 %25, label %86, label %44

86:                                               ; preds = %89, %85, %27
  %87 = getelementptr inbounds i8, i8* %29, i64 %1
  %88 = icmp eq i64 %34, %14
  br i1 %88, label %26, label %27

89:                                               ; preds = %44, %89
  %90 = phi i64 [ %91, %89 ], [ %45, %44 ]
  %91 = add nuw nsw i64 %90, 1
  %92 = getelementptr inbounds i8, i8* %2, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = add nsw i32 %40, %94
  %96 = sub nsw i32 %38, %95
  %97 = icmp slt i32 %96, 0
  %98 = sub nsw i32 0, %96
  %99 = select i1 %97, i32 %98, i32 %96
  %100 = sub nsw i32 %10, %95
  %101 = icmp slt i32 %100, 0
  %102 = sub nsw i32 0, %100
  %103 = select i1 %101, i32 %102, i32 %100
  %104 = icmp sgt i32 %99, %43
  %105 = icmp sgt i32 %99, %103
  %106 = or i1 %104, %105
  %107 = icmp sgt i32 %43, %103
  %108 = select i1 %107, i8 %9, i8 %93
  %109 = select i1 %106, i8 %108, i8 %37
  %110 = getelementptr inbounds i8, i8* %29, i64 %90
  store i8 %109, i8* %110, align 1
  %111 = icmp eq i64 %91, %15
  br i1 %111, label %86, label %89, !llvm.loop !22
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @ipred_smooth_c(i8* nocapture, i64, i8* nocapture readonly, i32, i32, i32, i32, i32) #2 {
  %9 = sext i32 %3 to i64
  %10 = getelementptr inbounds [128 x i8], [128 x i8]* @dav1d_sm_weights, i64 0, i64 %9
  %11 = sext i32 %4 to i64
  %12 = getelementptr inbounds [128 x i8], [128 x i8]* @dav1d_sm_weights, i64 0, i64 %11
  %13 = getelementptr inbounds i8, i8* %2, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = sub nsw i32 0, %4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %2, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = icmp sgt i32 %4, 0
  br i1 %21, label %22, label %103

22:                                               ; preds = %8
  %23 = icmp sgt i32 %3, 0
  %24 = zext i32 %4 to i64
  %25 = zext i32 %3 to i64
  %26 = getelementptr i8, i8* %2, i64 1
  %27 = add nuw nsw i64 %25, 1
  %28 = getelementptr i8, i8* %2, i64 %27
  %29 = getelementptr [128 x i8], [128 x i8]* @dav1d_sm_weights, i64 0, i64 %9
  %30 = add nsw i64 %9, %25
  %31 = getelementptr [128 x i8], [128 x i8]* @dav1d_sm_weights, i64 0, i64 %30
  %32 = icmp ult i32 %3, 16
  %33 = and i64 %25, 4294967280
  %34 = insertelement <16 x i32> undef, i32 %15, i32 0
  %35 = shufflevector <16 x i32> %34, <16 x i32> undef, <16 x i32> zeroinitializer
  %36 = icmp eq i64 %33, %25
  br label %37

37:                                               ; preds = %104, %22
  %38 = phi i64 [ 0, %22 ], [ %106, %104 ]
  %39 = phi i8* [ %0, %22 ], [ %105, %104 ]
  %40 = mul i64 %38, %1
  %41 = getelementptr i8, i8* %0, i64 %40
  %42 = add i64 %40, %25
  %43 = getelementptr i8, i8* %0, i64 %42
  %44 = sub nsw i64 0, %38
  %45 = getelementptr i8, i8* %2, i64 %44
  br i1 %23, label %46, label %104

46:                                               ; preds = %37
  %47 = getelementptr inbounds i8, i8* %12, i64 %38
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = sub nuw nsw i32 256, %49
  %51 = mul nuw nsw i32 %50, %20
  %52 = xor i64 %38, -1
  %53 = getelementptr inbounds i8, i8* %2, i64 %52
  %54 = add nuw nsw i32 %51, 256
  br i1 %32, label %55, label %57

55:                                               ; preds = %102, %57, %46
  %56 = phi i64 [ 0, %57 ], [ 0, %46 ], [ %33, %102 ]
  br label %108

57:                                               ; preds = %46
  %58 = icmp ult i8* %41, %45
  %59 = icmp ult i8* %53, %43
  %60 = and i1 %58, %59
  %61 = icmp ult i8* %41, %28
  %62 = icmp ult i8* %26, %43
  %63 = and i1 %61, %62
  %64 = or i1 %60, %63
  %65 = icmp ult i8* %41, %31
  %66 = icmp ult i8* %29, %43
  %67 = and i1 %65, %66
  %68 = or i1 %64, %67
  br i1 %68, label %55, label %69

69:                                               ; preds = %57
  %70 = insertelement <16 x i32> undef, i32 %49, i32 0
  %71 = shufflevector <16 x i32> %70, <16 x i32> undef, <16 x i32> zeroinitializer
  %72 = insertelement <16 x i32> undef, i32 %54, i32 0
  %73 = shufflevector <16 x i32> %72, <16 x i32> undef, <16 x i32> zeroinitializer
  %74 = load i8, i8* %53, align 1, !alias.scope !23
  %75 = insertelement <16 x i8> undef, i8 %74, i32 0
  %76 = shufflevector <16 x i8> %75, <16 x i8> undef, <16 x i32> zeroinitializer
  %77 = zext <16 x i8> %76 to <16 x i32>
  br label %78

78:                                               ; preds = %78, %69
  %79 = phi i64 [ 0, %69 ], [ %100, %78 ]
  %80 = or i64 %79, 1
  %81 = getelementptr inbounds i8, i8* %2, i64 %80
  %82 = bitcast i8* %81 to <16 x i8>*
  %83 = load <16 x i8>, <16 x i8>* %82, align 1, !alias.scope !26
  %84 = zext <16 x i8> %83 to <16 x i32>
  %85 = mul nuw nsw <16 x i32> %71, %84
  %86 = getelementptr inbounds i8, i8* %10, i64 %79
  %87 = bitcast i8* %86 to <16 x i8>*
  %88 = load <16 x i8>, <16 x i8>* %87, align 1, !alias.scope !28
  %89 = zext <16 x i8> %88 to <16 x i32>
  %90 = mul nuw nsw <16 x i32> %77, %89
  %91 = sub nuw nsw <16 x i32> <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>, %89
  %92 = mul nuw nsw <16 x i32> %91, %35
  %93 = add nuw nsw <16 x i32> %73, %85
  %94 = add nuw nsw <16 x i32> %93, %90
  %95 = add nuw nsw <16 x i32> %94, %92
  %96 = lshr <16 x i32> %95, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %97 = trunc <16 x i32> %96 to <16 x i8>
  %98 = getelementptr inbounds i8, i8* %39, i64 %79
  %99 = bitcast i8* %98 to <16 x i8>*
  store <16 x i8> %97, <16 x i8>* %99, align 1, !alias.scope !30, !noalias !32
  %100 = add i64 %79, 16
  %101 = icmp eq i64 %100, %33
  br i1 %101, label %102, label %78, !llvm.loop !33

102:                                              ; preds = %78
  br i1 %36, label %104, label %55

103:                                              ; preds = %104, %8
  ret void

104:                                              ; preds = %108, %102, %37
  %105 = getelementptr inbounds i8, i8* %39, i64 %1
  %106 = add nuw nsw i64 %38, 1
  %107 = icmp eq i64 %106, %24
  br i1 %107, label %103, label %37

108:                                              ; preds = %55, %108
  %109 = phi i64 [ %110, %108 ], [ %56, %55 ]
  %110 = add nuw nsw i64 %109, 1
  %111 = getelementptr inbounds i8, i8* %2, i64 %110
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = mul nuw nsw i32 %113, %49
  %115 = getelementptr inbounds i8, i8* %10, i64 %109
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  %118 = load i8, i8* %53, align 1
  %119 = zext i8 %118 to i32
  %120 = mul nuw nsw i32 %119, %117
  %121 = sub nuw nsw i32 256, %117
  %122 = mul nuw nsw i32 %121, %15
  %123 = add nuw nsw i32 %54, %114
  %124 = add nuw nsw i32 %123, %120
  %125 = add nuw nsw i32 %124, %122
  %126 = lshr i32 %125, 9
  %127 = trunc i32 %126 to i8
  %128 = getelementptr inbounds i8, i8* %39, i64 %109
  store i8 %127, i8* %128, align 1
  %129 = icmp eq i64 %110, %25
  br i1 %129, label %104, label %108, !llvm.loop !34
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @ipred_smooth_v_c(i8* nocapture, i64, i8* nocapture readonly, i32, i32, i32, i32, i32) #2 {
  %9 = sext i32 %4 to i64
  %10 = getelementptr inbounds [128 x i8], [128 x i8]* @dav1d_sm_weights, i64 0, i64 %9
  %11 = sub nsw i32 0, %4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %2, i64 %12
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = icmp sgt i32 %4, 0
  br i1 %16, label %17, label %121

17:                                               ; preds = %8
  %18 = icmp sgt i32 %3, 0
  %19 = zext i32 %4 to i64
  %20 = zext i32 %3 to i64
  %21 = getelementptr i8, i8* %2, i64 1
  %22 = add nuw nsw i64 %20, 1
  %23 = getelementptr i8, i8* %2, i64 %22
  %24 = and i64 %20, 4294967280
  %25 = add nsw i64 %24, -16
  %26 = lshr exact i64 %25, 4
  %27 = add nuw nsw i64 %26, 1
  %28 = icmp ult i32 %3, 16
  %29 = and i64 %20, 4294967280
  %30 = and i64 %27, 1
  %31 = icmp eq i64 %25, 0
  %32 = sub nuw nsw i64 %27, %30
  %33 = icmp eq i64 %30, 0
  %34 = icmp eq i64 %29, %20
  %35 = and i64 %20, 1
  %36 = icmp eq i64 %35, 0
  %37 = sub nsw i64 0, %20
  br label %38

38:                                               ; preds = %122, %17
  %39 = phi i64 [ 0, %17 ], [ %124, %122 ]
  %40 = phi i8* [ %0, %17 ], [ %123, %122 ]
  %41 = mul i64 %39, %1
  %42 = getelementptr i8, i8* %0, i64 %41
  %43 = add i64 %41, %20
  %44 = getelementptr i8, i8* %0, i64 %43
  br i1 %18, label %45, label %122

45:                                               ; preds = %38
  %46 = getelementptr inbounds i8, i8* %10, i64 %39
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = sub nuw nsw i32 256, %48
  %50 = mul nuw nsw i32 %49, %15
  %51 = add nuw nsw i32 %50, 128
  br i1 %28, label %52, label %68

52:                                               ; preds = %120, %68, %45
  %53 = phi i64 [ 0, %68 ], [ 0, %45 ], [ %29, %120 ]
  %54 = xor i64 %53, -1
  br i1 %36, label %65, label %55

55:                                               ; preds = %52
  %56 = or i64 %53, 1
  %57 = getelementptr inbounds i8, i8* %2, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = mul nuw nsw i32 %59, %48
  %61 = add nuw nsw i32 %51, %60
  %62 = lshr i32 %61, 8
  %63 = trunc i32 %62 to i8
  %64 = getelementptr inbounds i8, i8* %40, i64 %53
  store i8 %63, i8* %64, align 1
  br label %65

65:                                               ; preds = %55, %52
  %66 = phi i64 [ %56, %55 ], [ %53, %52 ]
  %67 = icmp eq i64 %54, %37
  br i1 %67, label %122, label %126

68:                                               ; preds = %45
  %69 = icmp ult i8* %42, %23
  %70 = icmp ult i8* %21, %44
  %71 = and i1 %69, %70
  br i1 %71, label %52, label %72

72:                                               ; preds = %68
  %73 = insertelement <16 x i32> undef, i32 %48, i32 0
  %74 = shufflevector <16 x i32> %73, <16 x i32> undef, <16 x i32> zeroinitializer
  %75 = insertelement <16 x i32> undef, i32 %51, i32 0
  %76 = shufflevector <16 x i32> %75, <16 x i32> undef, <16 x i32> zeroinitializer
  br i1 %31, label %106, label %77

77:                                               ; preds = %72, %77
  %78 = phi i64 [ %103, %77 ], [ 0, %72 ]
  %79 = phi i64 [ %104, %77 ], [ %32, %72 ]
  %80 = or i64 %78, 1
  %81 = getelementptr inbounds i8, i8* %2, i64 %80
  %82 = bitcast i8* %81 to <16 x i8>*
  %83 = load <16 x i8>, <16 x i8>* %82, align 1, !alias.scope !35
  %84 = zext <16 x i8> %83 to <16 x i32>
  %85 = mul nuw nsw <16 x i32> %74, %84
  %86 = add nuw nsw <16 x i32> %76, %85
  %87 = lshr <16 x i32> %86, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %88 = trunc <16 x i32> %87 to <16 x i8>
  %89 = getelementptr inbounds i8, i8* %40, i64 %78
  %90 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %88, <16 x i8>* %90, align 1, !alias.scope !38, !noalias !35
  %91 = or i64 %78, 16
  %92 = or i64 %78, 17
  %93 = getelementptr inbounds i8, i8* %2, i64 %92
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !35
  %96 = zext <16 x i8> %95 to <16 x i32>
  %97 = mul nuw nsw <16 x i32> %74, %96
  %98 = add nuw nsw <16 x i32> %76, %97
  %99 = lshr <16 x i32> %98, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %100 = trunc <16 x i32> %99 to <16 x i8>
  %101 = getelementptr inbounds i8, i8* %40, i64 %91
  %102 = bitcast i8* %101 to <16 x i8>*
  store <16 x i8> %100, <16 x i8>* %102, align 1, !alias.scope !38, !noalias !35
  %103 = add i64 %78, 32
  %104 = add i64 %79, -2
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %106, label %77, !llvm.loop !40

106:                                              ; preds = %77, %72
  %107 = phi i64 [ 0, %72 ], [ %103, %77 ]
  br i1 %33, label %120, label %108

108:                                              ; preds = %106
  %109 = or i64 %107, 1
  %110 = getelementptr inbounds i8, i8* %2, i64 %109
  %111 = bitcast i8* %110 to <16 x i8>*
  %112 = load <16 x i8>, <16 x i8>* %111, align 1, !alias.scope !35
  %113 = zext <16 x i8> %112 to <16 x i32>
  %114 = mul nuw nsw <16 x i32> %74, %113
  %115 = add nuw nsw <16 x i32> %76, %114
  %116 = lshr <16 x i32> %115, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %117 = trunc <16 x i32> %116 to <16 x i8>
  %118 = getelementptr inbounds i8, i8* %40, i64 %107
  %119 = bitcast i8* %118 to <16 x i8>*
  store <16 x i8> %117, <16 x i8>* %119, align 1, !alias.scope !38, !noalias !35
  br label %120

120:                                              ; preds = %106, %108
  br i1 %34, label %122, label %52

121:                                              ; preds = %122, %8
  ret void

122:                                              ; preds = %65, %126, %120, %38
  %123 = getelementptr inbounds i8, i8* %40, i64 %1
  %124 = add nuw nsw i64 %39, 1
  %125 = icmp eq i64 %124, %19
  br i1 %125, label %121, label %38

126:                                              ; preds = %65, %126
  %127 = phi i64 [ %137, %126 ], [ %66, %65 ]
  %128 = add nuw nsw i64 %127, 1
  %129 = getelementptr inbounds i8, i8* %2, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = mul nuw nsw i32 %131, %48
  %133 = add nuw nsw i32 %51, %132
  %134 = lshr i32 %133, 8
  %135 = trunc i32 %134 to i8
  %136 = getelementptr inbounds i8, i8* %40, i64 %127
  store i8 %135, i8* %136, align 1
  %137 = add nuw nsw i64 %127, 2
  %138 = getelementptr inbounds i8, i8* %2, i64 %137
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = mul nuw nsw i32 %140, %48
  %142 = add nuw nsw i32 %51, %141
  %143 = lshr i32 %142, 8
  %144 = trunc i32 %143 to i8
  %145 = getelementptr inbounds i8, i8* %40, i64 %128
  store i8 %144, i8* %145, align 1
  %146 = icmp eq i64 %137, %20
  br i1 %146, label %122, label %126, !llvm.loop !41
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @ipred_smooth_h_c(i8* nocapture, i64, i8* nocapture readonly, i32, i32, i32, i32, i32) #2 {
  %9 = sext i32 %3 to i64
  %10 = getelementptr inbounds [128 x i8], [128 x i8]* @dav1d_sm_weights, i64 0, i64 %9
  %11 = getelementptr inbounds i8, i8* %2, i64 %9
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = icmp sgt i32 %4, 0
  br i1 %14, label %15, label %94

15:                                               ; preds = %8
  %16 = icmp sgt i32 %3, 0
  %17 = zext i32 %4 to i64
  %18 = zext i32 %3 to i64
  %19 = getelementptr [128 x i8], [128 x i8]* @dav1d_sm_weights, i64 0, i64 %9
  %20 = add nsw i64 %9, %18
  %21 = getelementptr [128 x i8], [128 x i8]* @dav1d_sm_weights, i64 0, i64 %20
  %22 = icmp ult i32 %3, 16
  %23 = and i64 %18, 4294967280
  %24 = insertelement <16 x i32> undef, i32 %13, i32 0
  %25 = shufflevector <16 x i32> %24, <16 x i32> undef, <16 x i32> zeroinitializer
  %26 = icmp eq i64 %23, %18
  %27 = and i64 %18, 1
  %28 = icmp eq i64 %27, 0
  %29 = sub nsw i64 0, %18
  br label %30

30:                                               ; preds = %95, %15
  %31 = phi i64 [ 0, %15 ], [ %97, %95 ]
  %32 = phi i8* [ %0, %15 ], [ %96, %95 ]
  %33 = mul i64 %31, %1
  %34 = getelementptr i8, i8* %0, i64 %33
  %35 = add i64 %33, %18
  %36 = getelementptr i8, i8* %0, i64 %35
  %37 = sub nsw i64 0, %31
  %38 = getelementptr i8, i8* %2, i64 %37
  br i1 %16, label %39, label %95

39:                                               ; preds = %30
  %40 = xor i64 %31, -1
  %41 = getelementptr inbounds i8, i8* %2, i64 %40
  br i1 %22, label %42, label %63

42:                                               ; preds = %93, %63, %39
  %43 = phi i64 [ 0, %63 ], [ 0, %39 ], [ %23, %93 ]
  %44 = xor i64 %43, -1
  br i1 %28, label %60, label %45

45:                                               ; preds = %42
  %46 = getelementptr inbounds i8, i8* %10, i64 %43
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = load i8, i8* %41, align 1
  %50 = zext i8 %49 to i32
  %51 = mul nuw nsw i32 %50, %48
  %52 = sub nuw nsw i32 256, %48
  %53 = mul nuw nsw i32 %52, %13
  %54 = add nuw nsw i32 %53, 128
  %55 = add nuw nsw i32 %54, %51
  %56 = lshr i32 %55, 8
  %57 = trunc i32 %56 to i8
  %58 = getelementptr inbounds i8, i8* %32, i64 %43
  store i8 %57, i8* %58, align 1
  %59 = or i64 %43, 1
  br label %60

60:                                               ; preds = %45, %42
  %61 = phi i64 [ %59, %45 ], [ %43, %42 ]
  %62 = icmp eq i64 %44, %29
  br i1 %62, label %95, label %99

63:                                               ; preds = %39
  %64 = icmp ult i8* %34, %21
  %65 = icmp ult i8* %19, %36
  %66 = and i1 %64, %65
  %67 = icmp ult i8* %34, %38
  %68 = icmp ult i8* %41, %36
  %69 = and i1 %67, %68
  %70 = or i1 %66, %69
  br i1 %70, label %42, label %71

71:                                               ; preds = %63
  %72 = load i8, i8* %41, align 1, !alias.scope !42
  %73 = insertelement <16 x i8> undef, i8 %72, i32 0
  %74 = shufflevector <16 x i8> %73, <16 x i8> undef, <16 x i32> zeroinitializer
  %75 = zext <16 x i8> %74 to <16 x i32>
  br label %76

76:                                               ; preds = %76, %71
  %77 = phi i64 [ 0, %71 ], [ %91, %76 ]
  %78 = getelementptr inbounds i8, i8* %10, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1, !alias.scope !45
  %81 = zext <16 x i8> %80 to <16 x i32>
  %82 = mul nuw nsw <16 x i32> %75, %81
  %83 = sub nuw nsw <16 x i32> <i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256, i32 256>, %81
  %84 = mul nuw nsw <16 x i32> %83, %25
  %85 = add nuw nsw <16 x i32> %84, <i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128, i32 128>
  %86 = add nuw nsw <16 x i32> %85, %82
  %87 = lshr <16 x i32> %86, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %88 = trunc <16 x i32> %87 to <16 x i8>
  %89 = getelementptr inbounds i8, i8* %32, i64 %77
  %90 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %88, <16 x i8>* %90, align 1, !alias.scope !47, !noalias !49
  %91 = add i64 %77, 16
  %92 = icmp eq i64 %91, %23
  br i1 %92, label %93, label %76, !llvm.loop !50

93:                                               ; preds = %76
  br i1 %26, label %95, label %42

94:                                               ; preds = %95, %8
  ret void

95:                                               ; preds = %60, %99, %93, %30
  %96 = getelementptr inbounds i8, i8* %32, i64 %1
  %97 = add nuw nsw i64 %31, 1
  %98 = icmp eq i64 %97, %17
  br i1 %98, label %94, label %30

99:                                               ; preds = %60, %99
  %100 = phi i64 [ %128, %99 ], [ %61, %60 ]
  %101 = getelementptr inbounds i8, i8* %10, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = load i8, i8* %41, align 1
  %105 = zext i8 %104 to i32
  %106 = mul nuw nsw i32 %105, %103
  %107 = sub nuw nsw i32 256, %103
  %108 = mul nuw nsw i32 %107, %13
  %109 = add nuw nsw i32 %108, 128
  %110 = add nuw nsw i32 %109, %106
  %111 = lshr i32 %110, 8
  %112 = trunc i32 %111 to i8
  %113 = getelementptr inbounds i8, i8* %32, i64 %100
  store i8 %112, i8* %113, align 1
  %114 = add nuw nsw i64 %100, 1
  %115 = getelementptr inbounds i8, i8* %10, i64 %114
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  %118 = load i8, i8* %41, align 1
  %119 = zext i8 %118 to i32
  %120 = mul nuw nsw i32 %119, %117
  %121 = sub nuw nsw i32 256, %117
  %122 = mul nuw nsw i32 %121, %13
  %123 = add nuw nsw i32 %122, 128
  %124 = add nuw nsw i32 %123, %120
  %125 = lshr i32 %124, 8
  %126 = trunc i32 %125 to i8
  %127 = getelementptr inbounds i8, i8* %32, i64 %114
  store i8 %126, i8* %127, align 1
  %128 = add nuw nsw i64 %100, 2
  %129 = icmp eq i64 %128, %18
  br i1 %129, label %95, label %99, !llvm.loop !51
}

; Function Attrs: nounwind ssp uwtable
define internal void @ipred_z1_c(i8* nocapture, i64, i8* nocapture readonly, i32, i32, i32, i32, i32) #1 {
  %9 = alloca [128 x i8], align 16
  %10 = lshr i32 %5, 9
  %11 = and i32 %10, 1
  %12 = and i32 %5, 511
  %13 = icmp ult i32 %12, 90
  tail call void @llvm.assume(i1 %13)
  %14 = lshr i32 %12, 1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds [44 x i16], [44 x i16]* @dav1d_dr_intra_derivative, i64 0, i64 %15
  %17 = load i16, i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = getelementptr inbounds [128 x i8], [128 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %19) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -86, i64 128, i1 false)
  %20 = icmp ugt i32 %5, 1023
  br i1 %20, label %21, label %44

21:                                               ; preds = %8
  %22 = icmp ult i32 %12, 51
  %23 = add nsw i32 %4, %3
  %24 = lshr i32 16, %11
  %25 = icmp slt i32 %24, %23
  %26 = or i1 %22, %25
  br i1 %26, label %35, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds i8, i8* %2, i64 1
  %29 = icmp slt i32 %3, %4
  %30 = select i1 %29, i32 %3, i32 %4
  %31 = add nsw i32 %30, %3
  call fastcc void @upsample_edge(i8* nonnull %19, i32 %23, i8* %28, i32 -1, i32 %31)
  %32 = shl i32 %23, 1
  %33 = add nsw i32 %32, -2
  %34 = shl nuw nsw i32 %18, 1
  br label %53

35:                                               ; preds = %21
  %36 = sub nuw nsw i32 90, %12
  %37 = tail call fastcc i32 @get_filter_strength(i32 %23, i32 %36, i32 %11)
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %44, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds i8, i8* %2, i64 1
  %41 = icmp slt i32 %3, %4
  %42 = select i1 %41, i32 %3, i32 %4
  %43 = add nsw i32 %42, %3
  call fastcc void @filter_edge(i8* nonnull %19, i32 %23, i32 0, i32 %23, i8* %40, i32 -1, i32 %43, i32 %37)
  br label %49

44:                                               ; preds = %8, %35
  %45 = getelementptr inbounds i8, i8* %2, i64 1
  %46 = icmp slt i32 %3, %4
  %47 = select i1 %46, i32 %3, i32 %4
  %48 = add nsw i32 %47, %3
  br label %49

49:                                               ; preds = %44, %39
  %50 = phi i8* [ %19, %39 ], [ %45, %44 ]
  %51 = phi i32 [ %23, %39 ], [ %48, %44 ]
  %52 = add nsw i32 %51, -1
  br label %53

53:                                               ; preds = %49, %27
  %54 = phi i64 [ 2, %27 ], [ 1, %49 ]
  %55 = phi i32 [ %34, %27 ], [ %18, %49 ]
  %56 = phi i8* [ %19, %27 ], [ %50, %49 ]
  %57 = phi i32 [ %33, %27 ], [ %52, %49 ]
  %58 = icmp sgt i32 %4, 0
  br i1 %58, label %59, label %64

59:                                               ; preds = %53
  %60 = icmp sgt i32 %3, 0
  %61 = sext i32 %57 to i64
  %62 = getelementptr inbounds i8, i8* %56, i64 %61
  %63 = zext i32 %3 to i64
  br label %65

64:                                               ; preds = %103, %53
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %19) #10
  ret void

65:                                               ; preds = %103, %59
  %66 = phi i8* [ %0, %59 ], [ %105, %103 ]
  %67 = phi i32 [ %55, %59 ], [ %106, %103 ]
  %68 = phi i32 [ 0, %59 ], [ %104, %103 ]
  %69 = and i32 %67, 62
  br i1 %60, label %70, label %103

70:                                               ; preds = %65
  %71 = ashr i32 %67, 6
  %72 = sub nuw nsw i32 64, %69
  %73 = sext i32 %71 to i64
  br label %74

74:                                               ; preds = %78, %70
  %75 = phi i64 [ 0, %70 ], [ %93, %78 ]
  %76 = phi i64 [ %73, %70 ], [ %94, %78 ]
  %77 = icmp slt i64 %76, %61
  br i1 %77, label %78, label %96

78:                                               ; preds = %74
  %79 = getelementptr inbounds i8, i8* %56, i64 %76
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = mul nuw nsw i32 %72, %81
  %83 = add nsw i64 %76, 1
  %84 = getelementptr inbounds i8, i8* %56, i64 %83
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = mul nuw nsw i32 %69, %86
  %88 = add nuw nsw i32 %82, 32
  %89 = add nuw nsw i32 %88, %87
  %90 = lshr i32 %89, 6
  %91 = trunc i32 %90 to i8
  %92 = getelementptr inbounds i8, i8* %66, i64 %75
  store i8 %91, i8* %92, align 1
  %93 = add nuw nsw i64 %75, 1
  %94 = add nsw i64 %76, %54
  %95 = icmp eq i64 %93, %63
  br i1 %95, label %103, label %74

96:                                               ; preds = %74
  %97 = trunc i64 %75 to i32
  %98 = and i64 %75, 4294967295
  %99 = getelementptr inbounds i8, i8* %66, i64 %98
  %100 = load i8, i8* %62, align 1
  %101 = sub nsw i32 %3, %97
  %102 = sext i32 %101 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %99, i8 %100, i64 %102, i1 false)
  br label %103

103:                                              ; preds = %78, %65, %96
  %104 = add nuw nsw i32 %68, 1
  %105 = getelementptr inbounds i8, i8* %66, i64 %1
  %106 = add nsw i32 %67, %55
  %107 = icmp eq i32 %104, %4
  br i1 %107, label %64, label %65
}

; Function Attrs: nounwind ssp uwtable
define internal void @ipred_z2_c(i8* nocapture, i64, i8* nocapture readonly, i32, i32, i32, i32, i32) #1 {
  %9 = alloca [129 x i8], align 16
  %10 = lshr i32 %5, 9
  %11 = and i32 %10, 1
  %12 = and i32 %5, 511
  %13 = add nsw i32 %12, -91
  %14 = icmp ult i32 %13, 89
  tail call void @llvm.assume(i1 %14)
  %15 = add nsw i32 %12, -90
  %16 = ashr i32 %15, 1
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [44 x i16], [44 x i16]* @dav1d_dr_intra_derivative, i64 0, i64 %17
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = sub nsw i32 180, %12
  %22 = ashr i32 %21, 1
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [44 x i16], [44 x i16]* @dav1d_dr_intra_derivative, i64 0, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = icmp ugt i32 %5, 1023
  br i1 %27, label %28, label %43

28:                                               ; preds = %8
  %29 = icmp ugt i32 %12, 140
  br i1 %29, label %30, label %35

30:                                               ; preds = %28
  %31 = add nsw i32 %4, %3
  %32 = lshr i32 16, %11
  %33 = icmp sge i32 %32, %31
  %34 = zext i1 %33 to i32
  br label %35

35:                                               ; preds = %30, %28
  %36 = phi i32 [ %34, %30 ], [ 0, %28 ]
  %37 = icmp slt i32 %15, 40
  br i1 %37, label %38, label %43

38:                                               ; preds = %35
  %39 = add nsw i32 %4, %3
  %40 = lshr i32 16, %11
  %41 = icmp sge i32 %40, %39
  %42 = zext i1 %41 to i32
  br label %43

43:                                               ; preds = %38, %35, %8
  %44 = phi i32 [ 0, %8 ], [ %36, %35 ], [ %36, %38 ]
  %45 = phi i32 [ 0, %8 ], [ 0, %35 ], [ %42, %38 ]
  %46 = getelementptr inbounds [129 x i8], [129 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %46) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %46, i8 -86, i64 129, i1 false)
  %47 = getelementptr inbounds [129 x i8], [129 x i8]* %9, i64 0, i64 64
  %48 = icmp eq i32 %45, 0
  br i1 %48, label %52, label %49

49:                                               ; preds = %43
  %50 = add nsw i32 %3, 1
  call fastcc void @upsample_edge(i8* %47, i32 %50, i8* %2, i32 0, i32 %50)
  %51 = shl nuw nsw i32 %26, 1
  br label %67

52:                                               ; preds = %43
  br i1 %27, label %56, label %53

53:                                               ; preds = %52
  %54 = getelementptr inbounds [129 x i8], [129 x i8]* %9, i64 0, i64 65
  %55 = getelementptr inbounds i8, i8* %2, i64 1
  br label %63

56:                                               ; preds = %52
  %57 = add nsw i32 %4, %3
  %58 = tail call fastcc i32 @get_filter_strength(i32 %57, i32 %15, i32 %11)
  %59 = icmp eq i32 %58, 0
  %60 = getelementptr inbounds [129 x i8], [129 x i8]* %9, i64 0, i64 65
  %61 = getelementptr inbounds i8, i8* %2, i64 1
  br i1 %59, label %63, label %62

62:                                               ; preds = %56
  call fastcc void @filter_edge(i8* %60, i32 %3, i32 0, i32 %6, i8* %61, i32 -1, i32 %3, i32 %58)
  br label %67

63:                                               ; preds = %53, %56
  %64 = phi i8* [ %55, %53 ], [ %61, %56 ]
  %65 = phi i8* [ %54, %53 ], [ %60, %56 ]
  %66 = sext i32 %3 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %65, i8* align 1 %64, i64 %66, i1 false)
  br label %67

67:                                               ; preds = %62, %63, %49
  %68 = phi i32 [ %51, %49 ], [ %26, %63 ], [ %26, %62 ]
  %69 = icmp eq i32 %44, 0
  br i1 %69, label %79, label %70

70:                                               ; preds = %67
  %71 = sub nsw i32 0, %4
  %72 = shl nsw i32 %71, 1
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8, i8* %47, i64 %73
  %75 = add nsw i32 %4, 1
  %76 = sext i32 %71 to i64
  %77 = getelementptr inbounds i8, i8* %2, i64 %76
  call fastcc void @upsample_edge(i8* %74, i32 %75, i8* %77, i32 0, i32 %75)
  %78 = shl nuw nsw i32 %20, 1
  br label %100

79:                                               ; preds = %67
  br i1 %27, label %84, label %80

80:                                               ; preds = %79
  %81 = sub nsw i32 0, %4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %47, i64 %82
  br label %95

84:                                               ; preds = %79
  %85 = add nsw i32 %4, %3
  %86 = tail call fastcc i32 @get_filter_strength(i32 %85, i32 %21, i32 %11)
  %87 = icmp eq i32 %86, 0
  %88 = sub nsw i32 0, %4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %47, i64 %89
  br i1 %87, label %95, label %91

91:                                               ; preds = %84
  %92 = sub nsw i32 %4, %7
  %93 = getelementptr inbounds i8, i8* %2, i64 %89
  %94 = add nsw i32 %4, 1
  call fastcc void @filter_edge(i8* %90, i32 %4, i32 %92, i32 %4, i8* %93, i32 0, i32 %94, i32 %86)
  br label %100

95:                                               ; preds = %80, %84
  %96 = phi i8* [ %83, %80 ], [ %90, %84 ]
  %97 = phi i64 [ %82, %80 ], [ %89, %84 ]
  %98 = getelementptr inbounds i8, i8* %2, i64 %97
  %99 = sext i32 %4 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %96, i8* align 1 %98, i64 %99, i1 false)
  br label %100

100:                                              ; preds = %91, %95, %70
  %101 = phi i32 [ %78, %70 ], [ %20, %95 ], [ %20, %91 ]
  %102 = load i8, i8* %2, align 1
  store i8 %102, i8* %47, align 16
  %103 = xor i32 %44, -1
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i8, i8* %47, i64 %104
  %106 = icmp sgt i32 %4, 0
  br i1 %106, label %107, label %115

107:                                              ; preds = %100
  %108 = shl nuw nsw i32 %45, 6
  %109 = add nuw nsw i32 %108, 64
  %110 = add nuw nsw i32 %44, 6
  %111 = icmp sgt i32 %3, 0
  %112 = add nuw nsw i32 %45, 1
  %113 = zext i32 %112 to i64
  %114 = zext i32 %3 to i64
  br label %116

115:                                              ; preds = %127, %100
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %46) #10
  ret void

116:                                              ; preds = %127, %107
  %117 = phi i32 [ %109, %107 ], [ %120, %127 ]
  %118 = phi i8* [ %0, %107 ], [ %129, %127 ]
  %119 = phi i32 [ 0, %107 ], [ %128, %127 ]
  %120 = sub nsw i32 %117, %68
  %121 = and i32 %120, 62
  br i1 %111, label %122, label %127

122:                                              ; preds = %116
  %123 = shl i32 %119, %110
  %124 = ashr i32 %120, 6
  %125 = sub nuw nsw i32 64, %121
  %126 = sext i32 %124 to i64
  br label %131

127:                                              ; preds = %158, %116
  %128 = add nuw nsw i32 %119, 1
  %129 = getelementptr inbounds i8, i8* %118, i64 %1
  %130 = icmp eq i32 %128, %4
  br i1 %130, label %115, label %116

131:                                              ; preds = %158, %122
  %132 = phi i64 [ %126, %122 ], [ %171, %158 ]
  %133 = phi i64 [ 0, %122 ], [ %170, %158 ]
  %134 = phi i32 [ %123, %122 ], [ %135, %158 ]
  %135 = sub nsw i32 %134, %101
  %136 = icmp sgt i64 %132, -1
  br i1 %136, label %137, label %144

137:                                              ; preds = %131
  %138 = getelementptr inbounds i8, i8* %47, i64 %132
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = mul nuw nsw i32 %125, %140
  %142 = add nuw nsw i64 %132, 1
  %143 = getelementptr inbounds i8, i8* %47, i64 %142
  br label %158

144:                                              ; preds = %131
  %145 = ashr i32 %135, 6
  %146 = icmp sge i32 %145, %103
  tail call void @llvm.assume(i1 %146)
  %147 = and i32 %135, 62
  %148 = sub nsw i32 0, %145
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds i8, i8* %105, i64 %149
  %151 = load i8, i8* %150, align 1
  %152 = zext i8 %151 to i32
  %153 = sub nuw nsw i32 64, %147
  %154 = mul nuw nsw i32 %153, %152
  %155 = xor i32 %145, -1
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i8, i8* %105, i64 %156
  br label %158

158:                                              ; preds = %144, %137
  %159 = phi i8* [ %157, %144 ], [ %143, %137 ]
  %160 = phi i32 [ %147, %144 ], [ %121, %137 ]
  %161 = phi i32 [ %154, %144 ], [ %141, %137 ]
  %162 = load i8, i8* %159, align 1
  %163 = zext i8 %162 to i32
  %164 = mul nuw nsw i32 %160, %163
  %165 = add nuw nsw i32 %164, %161
  %166 = add nsw i32 %165, 32
  %167 = lshr i32 %166, 6
  %168 = trunc i32 %167 to i8
  %169 = getelementptr inbounds i8, i8* %118, i64 %133
  store i8 %168, i8* %169, align 1
  %170 = add nuw nsw i64 %133, 1
  %171 = add i64 %132, %113
  %172 = icmp eq i64 %170, %114
  br i1 %172, label %127, label %131
}

; Function Attrs: nounwind ssp uwtable
define internal void @ipred_z3_c(i8* nocapture, i64, i8* nocapture readonly, i32, i32, i32, i32, i32) #1 {
  %9 = alloca [128 x i8], align 16
  %10 = lshr i32 %5, 9
  %11 = and i32 %10, 1
  %12 = and i32 %5, 511
  %13 = icmp ugt i32 %12, 180
  tail call void @llvm.assume(i1 %13)
  %14 = sub nsw i32 270, %12
  %15 = ashr i32 %14, 1
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [44 x i16], [44 x i16]* @dav1d_dr_intra_derivative, i64 0, i64 %16
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i32
  %20 = getelementptr inbounds [128 x i8], [128 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %20) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 128, i1 false)
  %21 = icmp ugt i32 %5, 1023
  br i1 %21, label %22, label %56

22:                                               ; preds = %8
  %23 = icmp ugt i32 %12, 219
  %24 = add nsw i32 %4, %3
  %25 = lshr i32 16, %11
  %26 = icmp slt i32 %25, %24
  %27 = or i1 %23, %26
  br i1 %27, label %41, label %28

28:                                               ; preds = %22
  %29 = sub nsw i32 0, %24
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i8, i8* %2, i64 %30
  %32 = sub nsw i32 %3, %4
  %33 = icmp sgt i32 %32, 0
  %34 = select i1 %33, i32 %32, i32 0
  %35 = add nsw i32 %24, 1
  call fastcc void @upsample_edge(i8* nonnull %20, i32 %24, i8* %31, i32 %34, i32 %35)
  %36 = shl nsw i32 %24, 1
  %37 = add nsw i32 %36, -2
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [128 x i8], [128 x i8]* %9, i64 0, i64 %38
  %40 = shl nuw nsw i32 %19, 1
  br label %62

41:                                               ; preds = %22
  %42 = add nsw i32 %12, -180
  %43 = tail call fastcc i32 @get_filter_strength(i32 %24, i32 %42, i32 %11)
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %56, label %45

45:                                               ; preds = %41
  %46 = sub nsw i32 0, %24
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %2, i64 %47
  %49 = sub nsw i32 %3, %4
  %50 = icmp sgt i32 %49, 0
  %51 = select i1 %50, i32 %49, i32 0
  %52 = add nsw i32 %24, 1
  call fastcc void @filter_edge(i8* nonnull %20, i32 %24, i32 0, i32 %24, i8* %48, i32 %51, i32 %52, i32 %43)
  %53 = add nsw i32 %24, -1
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds [128 x i8], [128 x i8]* %9, i64 0, i64 %54
  br label %62

56:                                               ; preds = %8, %41
  %57 = getelementptr inbounds i8, i8* %2, i64 -1
  %58 = icmp slt i32 %3, %4
  %59 = select i1 %58, i32 %3, i32 %4
  %60 = add i32 %4, -1
  %61 = add i32 %60, %59
  br label %62

62:                                               ; preds = %45, %56, %28
  %63 = phi i64 [ 2, %28 ], [ 1, %56 ], [ 1, %45 ]
  %64 = phi i32 [ %40, %28 ], [ %19, %56 ], [ %19, %45 ]
  %65 = phi i8* [ %39, %28 ], [ %57, %56 ], [ %55, %45 ]
  %66 = phi i32 [ %37, %28 ], [ %61, %56 ], [ %53, %45 ]
  %67 = icmp sgt i32 %3, 0
  br i1 %67, label %68, label %80

68:                                               ; preds = %62
  %69 = icmp sgt i32 %4, 0
  %70 = sub nsw i32 0, %66
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %65, i64 %71
  %73 = sext i32 %66 to i64
  %74 = sext i32 %4 to i64
  %75 = zext i32 %3 to i64
  %76 = zext i32 %4 to i64
  %77 = sub nsw i64 1, %73
  %78 = getelementptr i8, i8* %65, i64 %77
  %79 = icmp eq i64 %1, 1
  br label %81

80:                                               ; preds = %202, %62
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %20) #10
  ret void

81:                                               ; preds = %202, %68
  %82 = phi i64 [ 0, %68 ], [ %203, %202 ]
  %83 = phi i32 [ %64, %68 ], [ %204, %202 ]
  %84 = getelementptr i8, i8* %0, i64 %82
  %85 = and i32 %83, 62
  br i1 %69, label %86, label %202

86:                                               ; preds = %81
  %87 = ashr i32 %83, 6
  %88 = sub nuw nsw i32 64, %85
  %89 = sext i32 %87 to i64
  br label %90

90:                                               ; preds = %171, %86
  %91 = phi i64 [ 0, %86 ], [ %191, %171 ]
  %92 = phi i64 [ %89, %86 ], [ %192, %171 ]
  %93 = icmp slt i64 %92, %73
  br i1 %93, label %171, label %94

94:                                               ; preds = %90
  %95 = add nuw nsw i64 %91, 1
  %96 = icmp sgt i64 %95, %74
  %97 = select i1 %96, i64 %95, i64 %74
  %98 = sub nsw i64 %97, %91
  %99 = icmp ugt i64 %98, 31
  %100 = and i1 %99, %79
  br i1 %100, label %101, label %110

101:                                              ; preds = %94
  %102 = getelementptr i8, i8* %84, i64 %91
  %103 = add nuw nsw i64 %91, 1
  %104 = icmp sgt i64 %103, %74
  %105 = select i1 %104, i64 %103, i64 %74
  %106 = getelementptr i8, i8* %84, i64 %105
  %107 = icmp ult i8* %102, %78
  %108 = icmp ult i8* %72, %106
  %109 = and i1 %107, %108
  br i1 %109, label %110, label %112

110:                                              ; preds = %94, %169, %101
  %111 = phi i64 [ %91, %101 ], [ %91, %94 ], [ %114, %169 ]
  br label %194

112:                                              ; preds = %101
  %113 = and i64 %98, -32
  %114 = add i64 %91, %113
  %115 = add i64 %113, -32
  %116 = lshr exact i64 %115, 5
  %117 = add nuw nsw i64 %116, 1
  %118 = and i64 %117, 1
  %119 = icmp eq i64 %115, 0
  br i1 %119, label %153, label %120

120:                                              ; preds = %112
  %121 = sub nuw nsw i64 %117, %118
  %122 = load i8, i8* %72, align 1, !alias.scope !52
  %123 = insertelement <16 x i8> undef, i8 %122, i32 0
  %124 = shufflevector <16 x i8> %123, <16 x i8> undef, <16 x i32> zeroinitializer
  %125 = insertelement <16 x i8> undef, i8 %122, i32 0
  %126 = shufflevector <16 x i8> %125, <16 x i8> undef, <16 x i32> zeroinitializer
  %127 = load i8, i8* %72, align 1, !alias.scope !52
  %128 = insertelement <16 x i8> undef, i8 %127, i32 0
  %129 = shufflevector <16 x i8> %128, <16 x i8> undef, <16 x i32> zeroinitializer
  %130 = insertelement <16 x i8> undef, i8 %127, i32 0
  %131 = shufflevector <16 x i8> %130, <16 x i8> undef, <16 x i32> zeroinitializer
  br label %132

132:                                              ; preds = %132, %120
  %133 = phi i64 [ 0, %120 ], [ %150, %132 ]
  %134 = phi i64 [ %121, %120 ], [ %151, %132 ]
  %135 = add i64 %91, %133
  %136 = mul nsw i64 %135, %1
  %137 = add nsw i64 %136, %82
  %138 = getelementptr inbounds i8, i8* %0, i64 %137
  %139 = bitcast i8* %138 to <16 x i8>*
  store <16 x i8> %124, <16 x i8>* %139, align 1, !alias.scope !55, !noalias !52
  %140 = getelementptr inbounds i8, i8* %138, i64 16
  %141 = bitcast i8* %140 to <16 x i8>*
  store <16 x i8> %126, <16 x i8>* %141, align 1, !alias.scope !55, !noalias !52
  %142 = or i64 %133, 32
  %143 = add i64 %91, %142
  %144 = mul nsw i64 %143, %1
  %145 = add nsw i64 %144, %82
  %146 = getelementptr inbounds i8, i8* %0, i64 %145
  %147 = bitcast i8* %146 to <16 x i8>*
  store <16 x i8> %129, <16 x i8>* %147, align 1, !alias.scope !55, !noalias !52
  %148 = getelementptr inbounds i8, i8* %146, i64 16
  %149 = bitcast i8* %148 to <16 x i8>*
  store <16 x i8> %131, <16 x i8>* %149, align 1, !alias.scope !55, !noalias !52
  %150 = add i64 %133, 64
  %151 = add i64 %134, -2
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %132, !llvm.loop !57

153:                                              ; preds = %132, %112
  %154 = phi i64 [ 0, %112 ], [ %150, %132 ]
  %155 = icmp eq i64 %118, 0
  br i1 %155, label %169, label %156

156:                                              ; preds = %153
  %157 = add i64 %91, %154
  %158 = load i8, i8* %72, align 1, !alias.scope !52
  %159 = insertelement <16 x i8> undef, i8 %158, i32 0
  %160 = shufflevector <16 x i8> %159, <16 x i8> undef, <16 x i32> zeroinitializer
  %161 = insertelement <16 x i8> undef, i8 %158, i32 0
  %162 = shufflevector <16 x i8> %161, <16 x i8> undef, <16 x i32> zeroinitializer
  %163 = mul nsw i64 %157, %1
  %164 = add nsw i64 %163, %82
  %165 = getelementptr inbounds i8, i8* %0, i64 %164
  %166 = bitcast i8* %165 to <16 x i8>*
  store <16 x i8> %160, <16 x i8>* %166, align 1, !alias.scope !55, !noalias !52
  %167 = getelementptr inbounds i8, i8* %165, i64 16
  %168 = bitcast i8* %167 to <16 x i8>*
  store <16 x i8> %162, <16 x i8>* %168, align 1, !alias.scope !55, !noalias !52
  br label %169

169:                                              ; preds = %153, %156
  %170 = icmp eq i64 %98, %113
  br i1 %170, label %202, label %110

171:                                              ; preds = %90
  %172 = sub nsw i64 0, %92
  %173 = getelementptr inbounds i8, i8* %65, i64 %172
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = mul nuw nsw i32 %88, %175
  %177 = shl i64 %92, 32
  %178 = ashr exact i64 %177, 32
  %179 = xor i64 %178, -1
  %180 = getelementptr inbounds i8, i8* %65, i64 %179
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i32
  %183 = mul nuw nsw i32 %85, %182
  %184 = add nuw nsw i32 %176, 32
  %185 = add nuw nsw i32 %184, %183
  %186 = lshr i32 %185, 6
  %187 = trunc i32 %186 to i8
  %188 = mul nsw i64 %91, %1
  %189 = add nsw i64 %188, %82
  %190 = getelementptr inbounds i8, i8* %0, i64 %189
  store i8 %187, i8* %190, align 1
  %191 = add nuw nsw i64 %91, 1
  %192 = add nsw i64 %92, %63
  %193 = icmp eq i64 %191, %76
  br i1 %193, label %202, label %90

194:                                              ; preds = %110, %194
  %195 = phi i64 [ %200, %194 ], [ %111, %110 ]
  %196 = load i8, i8* %72, align 1
  %197 = mul nsw i64 %195, %1
  %198 = add nsw i64 %197, %82
  %199 = getelementptr inbounds i8, i8* %0, i64 %198
  store i8 %196, i8* %199, align 1
  %200 = add nuw nsw i64 %195, 1
  %201 = icmp slt i64 %200, %74
  br i1 %201, label %194, label %202, !llvm.loop !58

202:                                              ; preds = %171, %194, %169, %81
  %203 = add nuw nsw i64 %82, 1
  %204 = add nsw i32 %83, %64
  %205 = icmp eq i64 %203, %75
  br i1 %205, label %80, label %81
}

; Function Attrs: nounwind ssp uwtable
define internal void @ipred_filter_c(i8* nocapture, i64, i8* nocapture readonly, i32, i32, i32, i32, i32) #1 {
  %9 = and i32 %5, 511
  %10 = icmp ult i32 %9, 5
  tail call void @llvm.assume(i1 %10)
  %11 = zext i32 %9 to i64
  %12 = getelementptr inbounds [5 x [64 x i8]], [5 x [64 x i8]]* @dav1d_filter_intra_taps, i64 0, i64 %11, i64 0
  %13 = icmp sgt i32 %4, 0
  br i1 %13, label %14, label %20

14:                                               ; preds = %8
  %15 = getelementptr inbounds i8, i8* %2, i64 1
  %16 = icmp sgt i32 %3, 0
  %17 = shl nsw i64 %1, 1
  %18 = sext i32 %3 to i64
  %19 = sext i32 %4 to i64
  br label %21

20:                                               ; preds = %29, %8
  ret void

21:                                               ; preds = %14, %29
  %22 = phi i64 [ 0, %14 ], [ %32, %29 ]
  %23 = phi i8* [ %0, %14 ], [ %31, %29 ]
  %24 = phi i8* [ %15, %14 ], [ %30, %29 ]
  %25 = sub nsw i64 0, %22
  %26 = getelementptr inbounds i8, i8* %2, i64 %25
  br i1 %16, label %27, label %29

27:                                               ; preds = %21
  %28 = getelementptr inbounds i8, i8* %26, i64 -1
  br label %34

29:                                               ; preds = %233, %21
  %30 = getelementptr inbounds i8, i8* %23, i64 %1
  %31 = getelementptr inbounds i8, i8* %23, i64 %17
  %32 = add nuw nsw i64 %22, 2
  %33 = icmp slt i64 %32, %19
  br i1 %33, label %21, label %20

34:                                               ; preds = %27, %233
  %35 = phi i64 [ 0, %27 ], [ %234, %233 ]
  %36 = phi i64 [ -1, %27 ], [ %1, %233 ]
  %37 = phi i8* [ %28, %27 ], [ %236, %233 ]
  %38 = phi i8* [ %26, %27 ], [ %50, %233 ]
  %39 = phi i8* [ %24, %27 ], [ %237, %233 ]
  %40 = load i8, i8* %38, align 1
  %41 = zext i8 %40 to i32
  %42 = load i8, i8* %39, align 1
  %43 = zext i8 %42 to i32
  %44 = getelementptr inbounds i8, i8* %39, i64 1
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = getelementptr inbounds i8, i8* %39, i64 2
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = getelementptr inbounds i8, i8* %39, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = load i8, i8* %37, align 1
  %54 = zext i8 %53 to i32
  %55 = getelementptr inbounds i8, i8* %37, i64 %36
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i32
  %58 = getelementptr inbounds i8, i8* %23, i64 %35
  br label %59

59:                                               ; preds = %59, %34
  %60 = phi i32 [ 0, %34 ], [ %231, %59 ]
  %61 = phi i8* [ %12, %34 ], [ %229, %59 ]
  %62 = phi i8* [ %58, %34 ], [ %230, %59 ]
  %63 = load i8, i8* %61, align 1
  %64 = sext i8 %63 to i32
  %65 = mul nsw i32 %64, %41
  %66 = getelementptr inbounds i8, i8* %61, i64 1
  %67 = load i8, i8* %66, align 1
  %68 = sext i8 %67 to i32
  %69 = mul nsw i32 %68, %43
  %70 = getelementptr inbounds i8, i8* %61, i64 16
  %71 = load i8, i8* %70, align 1
  %72 = sext i8 %71 to i32
  %73 = mul nsw i32 %72, %46
  %74 = getelementptr inbounds i8, i8* %61, i64 17
  %75 = load i8, i8* %74, align 1
  %76 = sext i8 %75 to i32
  %77 = mul nsw i32 %76, %49
  %78 = getelementptr inbounds i8, i8* %61, i64 32
  %79 = load i8, i8* %78, align 1
  %80 = sext i8 %79 to i32
  %81 = mul nsw i32 %80, %52
  %82 = getelementptr inbounds i8, i8* %61, i64 33
  %83 = load i8, i8* %82, align 1
  %84 = sext i8 %83 to i32
  %85 = mul nsw i32 %84, %54
  %86 = getelementptr inbounds i8, i8* %61, i64 48
  %87 = load i8, i8* %86, align 1
  %88 = sext i8 %87 to i32
  %89 = mul nsw i32 %88, %57
  %90 = add nsw i32 %65, 8
  %91 = add nsw i32 %90, %69
  %92 = add nsw i32 %91, %73
  %93 = add nsw i32 %92, %77
  %94 = add nsw i32 %93, %81
  %95 = add i32 %94, %85
  %96 = add i32 %95, %89
  %97 = ashr i32 %96, 4
  %98 = icmp slt i32 %97, 255
  %99 = select i1 %98, i32 %97, i32 255
  %100 = icmp sgt i32 %99, 0
  %101 = select i1 %100, i32 %99, i32 0
  %102 = trunc i32 %101 to i8
  store i8 %102, i8* %62, align 1
  %103 = getelementptr inbounds i8, i8* %61, i64 2
  %104 = load i8, i8* %103, align 1
  %105 = sext i8 %104 to i32
  %106 = mul nsw i32 %105, %41
  %107 = getelementptr inbounds i8, i8* %61, i64 3
  %108 = load i8, i8* %107, align 1
  %109 = sext i8 %108 to i32
  %110 = mul nsw i32 %109, %43
  %111 = getelementptr inbounds i8, i8* %61, i64 18
  %112 = load i8, i8* %111, align 1
  %113 = sext i8 %112 to i32
  %114 = mul nsw i32 %113, %46
  %115 = getelementptr inbounds i8, i8* %61, i64 19
  %116 = load i8, i8* %115, align 1
  %117 = sext i8 %116 to i32
  %118 = mul nsw i32 %117, %49
  %119 = getelementptr inbounds i8, i8* %61, i64 34
  %120 = load i8, i8* %119, align 1
  %121 = sext i8 %120 to i32
  %122 = mul nsw i32 %121, %52
  %123 = getelementptr inbounds i8, i8* %61, i64 35
  %124 = load i8, i8* %123, align 1
  %125 = sext i8 %124 to i32
  %126 = mul nsw i32 %125, %54
  %127 = getelementptr inbounds i8, i8* %61, i64 50
  %128 = load i8, i8* %127, align 1
  %129 = sext i8 %128 to i32
  %130 = mul nsw i32 %129, %57
  %131 = add nsw i32 %106, 8
  %132 = add nsw i32 %131, %110
  %133 = add nsw i32 %132, %114
  %134 = add nsw i32 %133, %118
  %135 = add nsw i32 %134, %122
  %136 = add i32 %135, %126
  %137 = add i32 %136, %130
  %138 = ashr i32 %137, 4
  %139 = icmp slt i32 %138, 255
  %140 = select i1 %139, i32 %138, i32 255
  %141 = icmp sgt i32 %140, 0
  %142 = select i1 %141, i32 %140, i32 0
  %143 = trunc i32 %142 to i8
  %144 = getelementptr inbounds i8, i8* %62, i64 1
  store i8 %143, i8* %144, align 1
  %145 = getelementptr inbounds i8, i8* %61, i64 4
  %146 = load i8, i8* %145, align 1
  %147 = sext i8 %146 to i32
  %148 = mul nsw i32 %147, %41
  %149 = getelementptr inbounds i8, i8* %61, i64 5
  %150 = load i8, i8* %149, align 1
  %151 = sext i8 %150 to i32
  %152 = mul nsw i32 %151, %43
  %153 = getelementptr inbounds i8, i8* %61, i64 20
  %154 = load i8, i8* %153, align 1
  %155 = sext i8 %154 to i32
  %156 = mul nsw i32 %155, %46
  %157 = getelementptr inbounds i8, i8* %61, i64 21
  %158 = load i8, i8* %157, align 1
  %159 = sext i8 %158 to i32
  %160 = mul nsw i32 %159, %49
  %161 = getelementptr inbounds i8, i8* %61, i64 36
  %162 = load i8, i8* %161, align 1
  %163 = sext i8 %162 to i32
  %164 = mul nsw i32 %163, %52
  %165 = getelementptr inbounds i8, i8* %61, i64 37
  %166 = load i8, i8* %165, align 1
  %167 = sext i8 %166 to i32
  %168 = mul nsw i32 %167, %54
  %169 = getelementptr inbounds i8, i8* %61, i64 52
  %170 = load i8, i8* %169, align 1
  %171 = sext i8 %170 to i32
  %172 = mul nsw i32 %171, %57
  %173 = add nsw i32 %148, 8
  %174 = add nsw i32 %173, %152
  %175 = add nsw i32 %174, %156
  %176 = add nsw i32 %175, %160
  %177 = add nsw i32 %176, %164
  %178 = add i32 %177, %168
  %179 = add i32 %178, %172
  %180 = ashr i32 %179, 4
  %181 = icmp slt i32 %180, 255
  %182 = select i1 %181, i32 %180, i32 255
  %183 = icmp sgt i32 %182, 0
  %184 = select i1 %183, i32 %182, i32 0
  %185 = trunc i32 %184 to i8
  %186 = getelementptr inbounds i8, i8* %62, i64 2
  store i8 %185, i8* %186, align 1
  %187 = getelementptr inbounds i8, i8* %61, i64 6
  %188 = load i8, i8* %187, align 1
  %189 = sext i8 %188 to i32
  %190 = mul nsw i32 %189, %41
  %191 = getelementptr inbounds i8, i8* %61, i64 7
  %192 = load i8, i8* %191, align 1
  %193 = sext i8 %192 to i32
  %194 = mul nsw i32 %193, %43
  %195 = getelementptr inbounds i8, i8* %61, i64 22
  %196 = load i8, i8* %195, align 1
  %197 = sext i8 %196 to i32
  %198 = mul nsw i32 %197, %46
  %199 = getelementptr inbounds i8, i8* %61, i64 23
  %200 = load i8, i8* %199, align 1
  %201 = sext i8 %200 to i32
  %202 = mul nsw i32 %201, %49
  %203 = getelementptr inbounds i8, i8* %61, i64 38
  %204 = load i8, i8* %203, align 1
  %205 = sext i8 %204 to i32
  %206 = mul nsw i32 %205, %52
  %207 = getelementptr inbounds i8, i8* %61, i64 39
  %208 = load i8, i8* %207, align 1
  %209 = sext i8 %208 to i32
  %210 = mul nsw i32 %209, %54
  %211 = getelementptr inbounds i8, i8* %61, i64 54
  %212 = load i8, i8* %211, align 1
  %213 = sext i8 %212 to i32
  %214 = mul nsw i32 %213, %57
  %215 = add nsw i32 %190, 8
  %216 = add nsw i32 %215, %194
  %217 = add nsw i32 %216, %198
  %218 = add nsw i32 %217, %202
  %219 = add nsw i32 %218, %206
  %220 = add i32 %219, %210
  %221 = add i32 %220, %214
  %222 = ashr i32 %221, 4
  %223 = icmp slt i32 %222, 255
  %224 = select i1 %223, i32 %222, i32 255
  %225 = icmp sgt i32 %224, 0
  %226 = select i1 %225, i32 %224, i32 0
  %227 = trunc i32 %226 to i8
  %228 = getelementptr inbounds i8, i8* %62, i64 3
  store i8 %227, i8* %228, align 1
  %229 = getelementptr inbounds i8, i8* %61, i64 8
  %230 = getelementptr inbounds i8, i8* %62, i64 %1
  %231 = add nuw nsw i32 %60, 1
  %232 = icmp eq i32 %231, 2
  br i1 %232, label %233, label %59

233:                                              ; preds = %59
  %234 = add nuw nsw i64 %35, 4
  %235 = or i64 %35, 3
  %236 = getelementptr inbounds i8, i8* %23, i64 %235
  %237 = getelementptr inbounds i8, i8* %39, i64 4
  %238 = icmp slt i64 %234, %18
  br i1 %238, label %34, label %29
}

; Function Attrs: nounwind ssp uwtable
define internal void @cfl_ac_420_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  tail call fastcc void @cfl_ac_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 1, i32 1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @cfl_ac_422_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  tail call fastcc void @cfl_ac_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 1, i32 0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @cfl_ac_444_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32) #1 {
  tail call fastcc void @cfl_ac_c(i16* %0, i8* %1, i64 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 0, i32 0)
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @ipred_cfl_c(i8* nocapture, i64, i8* nocapture readonly, i32, i32, i16* nocapture readonly, i32) #3 {
  %8 = add nsw i32 %4, %3
  %9 = ashr i32 %8, 1
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %87

11:                                               ; preds = %7
  %12 = zext i32 %3 to i64
  %13 = icmp ult i32 %3, 8
  br i1 %13, label %14, label %17

14:                                               ; preds = %77, %11
  %15 = phi i64 [ 0, %11 ], [ %18, %77 ]
  %16 = phi i32 [ %9, %11 ], [ %85, %77 ]
  br label %178

17:                                               ; preds = %11
  %18 = and i64 %12, 4294967288
  %19 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %9, i32 0
  %20 = add nsw i64 %18, -8
  %21 = lshr exact i64 %20, 3
  %22 = add nuw nsw i64 %21, 1
  %23 = and i64 %22, 1
  %24 = icmp eq i64 %20, 0
  br i1 %24, label %59, label %25

25:                                               ; preds = %17
  %26 = sub nuw nsw i64 %22, %23
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 0, %25 ], [ %54, %27 ]
  %29 = phi <4 x i32> [ %19, %25 ], [ %52, %27 ]
  %30 = phi <4 x i32> [ zeroinitializer, %25 ], [ %53, %27 ]
  %31 = phi i64 [ %26, %25 ], [ %55, %27 ]
  %32 = or i64 %28, 1
  %33 = getelementptr inbounds i8, i8* %2, i64 %32
  %34 = bitcast i8* %33 to <4 x i8>*
  %35 = load <4 x i8>, <4 x i8>* %34, align 1
  %36 = getelementptr inbounds i8, i8* %33, i64 4
  %37 = bitcast i8* %36 to <4 x i8>*
  %38 = load <4 x i8>, <4 x i8>* %37, align 1
  %39 = zext <4 x i8> %35 to <4 x i32>
  %40 = zext <4 x i8> %38 to <4 x i32>
  %41 = add <4 x i32> %29, %39
  %42 = add <4 x i32> %30, %40
  %43 = or i64 %28, 9
  %44 = getelementptr inbounds i8, i8* %2, i64 %43
  %45 = bitcast i8* %44 to <4 x i8>*
  %46 = load <4 x i8>, <4 x i8>* %45, align 1
  %47 = getelementptr inbounds i8, i8* %44, i64 4
  %48 = bitcast i8* %47 to <4 x i8>*
  %49 = load <4 x i8>, <4 x i8>* %48, align 1
  %50 = zext <4 x i8> %46 to <4 x i32>
  %51 = zext <4 x i8> %49 to <4 x i32>
  %52 = add <4 x i32> %41, %50
  %53 = add <4 x i32> %42, %51
  %54 = add i64 %28, 16
  %55 = add i64 %31, -2
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %27, !llvm.loop !59

57:                                               ; preds = %27
  %58 = or i64 %54, 1
  br label %59

59:                                               ; preds = %57, %17
  %60 = phi <4 x i32> [ undef, %17 ], [ %52, %57 ]
  %61 = phi <4 x i32> [ undef, %17 ], [ %53, %57 ]
  %62 = phi i64 [ 1, %17 ], [ %58, %57 ]
  %63 = phi <4 x i32> [ %19, %17 ], [ %52, %57 ]
  %64 = phi <4 x i32> [ zeroinitializer, %17 ], [ %53, %57 ]
  %65 = icmp eq i64 %23, 0
  br i1 %65, label %77, label %66

66:                                               ; preds = %59
  %67 = getelementptr inbounds i8, i8* %2, i64 %62
  %68 = getelementptr inbounds i8, i8* %67, i64 4
  %69 = bitcast i8* %68 to <4 x i8>*
  %70 = load <4 x i8>, <4 x i8>* %69, align 1
  %71 = zext <4 x i8> %70 to <4 x i32>
  %72 = add <4 x i32> %64, %71
  %73 = bitcast i8* %67 to <4 x i8>*
  %74 = load <4 x i8>, <4 x i8>* %73, align 1
  %75 = zext <4 x i8> %74 to <4 x i32>
  %76 = add <4 x i32> %63, %75
  br label %77

77:                                               ; preds = %59, %66
  %78 = phi <4 x i32> [ %60, %59 ], [ %76, %66 ]
  %79 = phi <4 x i32> [ %61, %59 ], [ %72, %66 ]
  %80 = add <4 x i32> %79, %78
  %81 = shufflevector <4 x i32> %80, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %82 = add <4 x i32> %80, %81
  %83 = shufflevector <4 x i32> %82, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %84 = add <4 x i32> %82, %83
  %85 = extractelement <4 x i32> %84, i32 0
  %86 = icmp eq i64 %18, %12
  br i1 %86, label %87, label %14

87:                                               ; preds = %178, %77, %7
  %88 = phi i32 [ %9, %7 ], [ %85, %77 ], [ %185, %178 ]
  %89 = icmp sgt i32 %4, 0
  br i1 %89, label %90, label %187

90:                                               ; preds = %87
  %91 = zext i32 %4 to i64
  %92 = icmp ult i32 %4, 8
  br i1 %92, label %93, label %96

93:                                               ; preds = %168, %90
  %94 = phi i64 [ 0, %90 ], [ %97, %168 ]
  %95 = phi i32 [ %88, %90 ], [ %176, %168 ]
  br label %192

96:                                               ; preds = %90
  %97 = and i64 %91, 4294967288
  %98 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %88, i32 0
  %99 = add nsw i64 %97, -8
  %100 = lshr exact i64 %99, 3
  %101 = add nuw nsw i64 %100, 1
  %102 = and i64 %101, 1
  %103 = icmp eq i64 %99, 0
  br i1 %103, label %146, label %104

104:                                              ; preds = %96
  %105 = sub nuw nsw i64 %101, %102
  br label %106

106:                                              ; preds = %106, %104
  %107 = phi i64 [ 0, %104 ], [ %141, %106 ]
  %108 = phi <4 x i32> [ %98, %104 ], [ %139, %106 ]
  %109 = phi <4 x i32> [ zeroinitializer, %104 ], [ %140, %106 ]
  %110 = phi i64 [ %105, %104 ], [ %142, %106 ]
  %111 = xor i64 %107, -1
  %112 = getelementptr inbounds i8, i8* %2, i64 %111
  %113 = getelementptr inbounds i8, i8* %112, i64 -3
  %114 = bitcast i8* %113 to <4 x i8>*
  %115 = load <4 x i8>, <4 x i8>* %114, align 1
  %116 = shufflevector <4 x i8> %115, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %117 = getelementptr inbounds i8, i8* %112, i64 -4
  %118 = getelementptr inbounds i8, i8* %117, i64 -3
  %119 = bitcast i8* %118 to <4 x i8>*
  %120 = load <4 x i8>, <4 x i8>* %119, align 1
  %121 = shufflevector <4 x i8> %120, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %122 = zext <4 x i8> %116 to <4 x i32>
  %123 = zext <4 x i8> %121 to <4 x i32>
  %124 = add <4 x i32> %108, %122
  %125 = add <4 x i32> %109, %123
  %126 = sub nuw nsw i64 -9, %107
  %127 = getelementptr inbounds i8, i8* %2, i64 %126
  %128 = getelementptr inbounds i8, i8* %127, i64 -3
  %129 = bitcast i8* %128 to <4 x i8>*
  %130 = load <4 x i8>, <4 x i8>* %129, align 1
  %131 = shufflevector <4 x i8> %130, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %132 = getelementptr inbounds i8, i8* %127, i64 -4
  %133 = getelementptr inbounds i8, i8* %132, i64 -3
  %134 = bitcast i8* %133 to <4 x i8>*
  %135 = load <4 x i8>, <4 x i8>* %134, align 1
  %136 = shufflevector <4 x i8> %135, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %137 = zext <4 x i8> %131 to <4 x i32>
  %138 = zext <4 x i8> %136 to <4 x i32>
  %139 = add <4 x i32> %124, %137
  %140 = add <4 x i32> %125, %138
  %141 = add i64 %107, 16
  %142 = add i64 %110, -2
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %144, label %106, !llvm.loop !60

144:                                              ; preds = %106
  %145 = sub i64 -17, %107
  br label %146

146:                                              ; preds = %144, %96
  %147 = phi <4 x i32> [ undef, %96 ], [ %139, %144 ]
  %148 = phi <4 x i32> [ undef, %96 ], [ %140, %144 ]
  %149 = phi i64 [ -1, %96 ], [ %145, %144 ]
  %150 = phi <4 x i32> [ %98, %96 ], [ %139, %144 ]
  %151 = phi <4 x i32> [ zeroinitializer, %96 ], [ %140, %144 ]
  %152 = icmp eq i64 %102, 0
  br i1 %152, label %168, label %153

153:                                              ; preds = %146
  %154 = getelementptr inbounds i8, i8* %2, i64 %149
  %155 = getelementptr inbounds i8, i8* %154, i64 -4
  %156 = getelementptr inbounds i8, i8* %155, i64 -3
  %157 = bitcast i8* %156 to <4 x i8>*
  %158 = load <4 x i8>, <4 x i8>* %157, align 1
  %159 = shufflevector <4 x i8> %158, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %160 = zext <4 x i8> %159 to <4 x i32>
  %161 = add <4 x i32> %151, %160
  %162 = getelementptr inbounds i8, i8* %154, i64 -3
  %163 = bitcast i8* %162 to <4 x i8>*
  %164 = load <4 x i8>, <4 x i8>* %163, align 1
  %165 = shufflevector <4 x i8> %164, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %166 = zext <4 x i8> %165 to <4 x i32>
  %167 = add <4 x i32> %150, %166
  br label %168

168:                                              ; preds = %146, %153
  %169 = phi <4 x i32> [ %147, %146 ], [ %167, %153 ]
  %170 = phi <4 x i32> [ %148, %146 ], [ %161, %153 ]
  %171 = add <4 x i32> %170, %169
  %172 = shufflevector <4 x i32> %171, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %173 = add <4 x i32> %171, %172
  %174 = shufflevector <4 x i32> %173, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %175 = add <4 x i32> %173, %174
  %176 = extractelement <4 x i32> %175, i32 0
  %177 = icmp eq i64 %97, %91
  br i1 %177, label %187, label %93

178:                                              ; preds = %14, %178
  %179 = phi i64 [ %181, %178 ], [ %15, %14 ]
  %180 = phi i32 [ %185, %178 ], [ %16, %14 ]
  %181 = add nuw nsw i64 %179, 1
  %182 = getelementptr inbounds i8, i8* %2, i64 %181
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i32
  %185 = add i32 %180, %184
  %186 = icmp eq i64 %181, %12
  br i1 %186, label %87, label %178, !llvm.loop !61

187:                                              ; preds = %192, %168, %87
  %188 = phi i32 [ %88, %87 ], [ %176, %168 ], [ %200, %192 ]
  %189 = tail call i32 @llvm.cttz.i32(i32 %8, i1 true) #10, !range !7
  %190 = lshr i32 %188, %189
  %191 = icmp eq i32 %3, %4
  br i1 %191, label %213, label %202

192:                                              ; preds = %93, %192
  %193 = phi i64 [ %195, %192 ], [ %94, %93 ]
  %194 = phi i32 [ %200, %192 ], [ %95, %93 ]
  %195 = add nuw nsw i64 %193, 1
  %196 = xor i64 %193, -1
  %197 = getelementptr inbounds i8, i8* %2, i64 %196
  %198 = load i8, i8* %197, align 1
  %199 = zext i8 %198 to i32
  %200 = add i32 %194, %199
  %201 = icmp eq i64 %195, %91
  br i1 %201, label %187, label %192, !llvm.loop !62

202:                                              ; preds = %187
  %203 = shl nsw i32 %4, 1
  %204 = icmp slt i32 %203, %3
  br i1 %204, label %209, label %205

205:                                              ; preds = %202
  %206 = shl nsw i32 %3, 1
  %207 = icmp slt i32 %206, %4
  %208 = select i1 %207, i32 13108, i32 21846
  br label %209

209:                                              ; preds = %205, %202
  %210 = phi i32 [ 13108, %202 ], [ %208, %205 ]
  %211 = mul i32 %210, %190
  %212 = lshr i32 %211, 16
  br label %213

213:                                              ; preds = %187, %209
  %214 = phi i32 [ %212, %209 ], [ %190, %187 ]
  tail call fastcc void @cfl_pred(i8* %0, i64 %1, i32 %3, i32 %4, i32 %214, i16* %5, i32 %6)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @ipred_cfl_128_c(i8* nocapture, i64, i8* nocapture readnone, i32, i32, i16* nocapture readonly, i32) #2 {
  tail call fastcc void @cfl_pred(i8* %0, i64 %1, i32 %3, i32 %4, i32 128, i16* %5, i32 %6)
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @ipred_cfl_top_c(i8* nocapture, i64, i8* nocapture readonly, i32, i32, i16* nocapture readonly, i32) #3 {
  %8 = ashr i32 %3, 1
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %10, label %95

10:                                               ; preds = %7
  %11 = zext i32 %3 to i64
  %12 = icmp ult i32 %3, 8
  br i1 %12, label %83, label %13

13:                                               ; preds = %10
  %14 = and i64 %11, 4294967288
  %15 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %8, i32 0
  %16 = add nsw i64 %14, -8
  %17 = lshr exact i64 %16, 3
  %18 = add nuw nsw i64 %17, 1
  %19 = and i64 %18, 1
  %20 = icmp eq i64 %16, 0
  br i1 %20, label %55, label %21

21:                                               ; preds = %13
  %22 = sub nuw nsw i64 %18, %19
  br label %23

23:                                               ; preds = %23, %21
  %24 = phi i64 [ 0, %21 ], [ %50, %23 ]
  %25 = phi <4 x i32> [ %15, %21 ], [ %48, %23 ]
  %26 = phi <4 x i32> [ zeroinitializer, %21 ], [ %49, %23 ]
  %27 = phi i64 [ %22, %21 ], [ %51, %23 ]
  %28 = or i64 %24, 1
  %29 = getelementptr inbounds i8, i8* %2, i64 %28
  %30 = bitcast i8* %29 to <4 x i8>*
  %31 = load <4 x i8>, <4 x i8>* %30, align 1
  %32 = getelementptr inbounds i8, i8* %29, i64 4
  %33 = bitcast i8* %32 to <4 x i8>*
  %34 = load <4 x i8>, <4 x i8>* %33, align 1
  %35 = zext <4 x i8> %31 to <4 x i32>
  %36 = zext <4 x i8> %34 to <4 x i32>
  %37 = add <4 x i32> %25, %35
  %38 = add <4 x i32> %26, %36
  %39 = or i64 %24, 9
  %40 = getelementptr inbounds i8, i8* %2, i64 %39
  %41 = bitcast i8* %40 to <4 x i8>*
  %42 = load <4 x i8>, <4 x i8>* %41, align 1
  %43 = getelementptr inbounds i8, i8* %40, i64 4
  %44 = bitcast i8* %43 to <4 x i8>*
  %45 = load <4 x i8>, <4 x i8>* %44, align 1
  %46 = zext <4 x i8> %42 to <4 x i32>
  %47 = zext <4 x i8> %45 to <4 x i32>
  %48 = add <4 x i32> %37, %46
  %49 = add <4 x i32> %38, %47
  %50 = add i64 %24, 16
  %51 = add i64 %27, -2
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %23, !llvm.loop !63

53:                                               ; preds = %23
  %54 = or i64 %50, 1
  br label %55

55:                                               ; preds = %53, %13
  %56 = phi <4 x i32> [ undef, %13 ], [ %48, %53 ]
  %57 = phi <4 x i32> [ undef, %13 ], [ %49, %53 ]
  %58 = phi i64 [ 1, %13 ], [ %54, %53 ]
  %59 = phi <4 x i32> [ %15, %13 ], [ %48, %53 ]
  %60 = phi <4 x i32> [ zeroinitializer, %13 ], [ %49, %53 ]
  %61 = icmp eq i64 %19, 0
  br i1 %61, label %73, label %62

62:                                               ; preds = %55
  %63 = getelementptr inbounds i8, i8* %2, i64 %58
  %64 = getelementptr inbounds i8, i8* %63, i64 4
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1
  %67 = zext <4 x i8> %66 to <4 x i32>
  %68 = add <4 x i32> %60, %67
  %69 = bitcast i8* %63 to <4 x i8>*
  %70 = load <4 x i8>, <4 x i8>* %69, align 1
  %71 = zext <4 x i8> %70 to <4 x i32>
  %72 = add <4 x i32> %59, %71
  br label %73

73:                                               ; preds = %55, %62
  %74 = phi <4 x i32> [ %56, %55 ], [ %72, %62 ]
  %75 = phi <4 x i32> [ %57, %55 ], [ %68, %62 ]
  %76 = add <4 x i32> %75, %74
  %77 = shufflevector <4 x i32> %76, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %78 = add <4 x i32> %76, %77
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %80 = add <4 x i32> %78, %79
  %81 = extractelement <4 x i32> %80, i32 0
  %82 = icmp eq i64 %14, %11
  br i1 %82, label %95, label %83

83:                                               ; preds = %73, %10
  %84 = phi i64 [ 0, %10 ], [ %14, %73 ]
  %85 = phi i32 [ %8, %10 ], [ %81, %73 ]
  br label %86

86:                                               ; preds = %83, %86
  %87 = phi i64 [ %89, %86 ], [ %84, %83 ]
  %88 = phi i32 [ %93, %86 ], [ %85, %83 ]
  %89 = add nuw nsw i64 %87, 1
  %90 = getelementptr inbounds i8, i8* %2, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = add i32 %88, %92
  %94 = icmp eq i64 %89, %11
  br i1 %94, label %95, label %86, !llvm.loop !64

95:                                               ; preds = %86, %73, %7
  %96 = phi i32 [ %8, %7 ], [ %81, %73 ], [ %93, %86 ]
  %97 = tail call i32 @llvm.cttz.i32(i32 %3, i1 true) #10, !range !7
  %98 = lshr i32 %96, %97
  tail call fastcc void @cfl_pred(i8* %0, i64 %1, i32 %3, i32 %4, i32 %98, i16* %5, i32 %6)
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal void @ipred_cfl_left_c(i8* nocapture, i64, i8* nocapture readonly, i32, i32, i16* nocapture readonly, i32) #3 {
  %8 = ashr i32 %4, 1
  %9 = icmp sgt i32 %4, 0
  br i1 %9, label %10, label %108

10:                                               ; preds = %7
  %11 = zext i32 %4 to i64
  %12 = icmp ult i32 %4, 8
  br i1 %12, label %95, label %13

13:                                               ; preds = %10
  %14 = and i64 %11, 4294967288
  %15 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %8, i32 0
  %16 = add nsw i64 %14, -8
  %17 = lshr exact i64 %16, 3
  %18 = add nuw nsw i64 %17, 1
  %19 = and i64 %18, 1
  %20 = icmp eq i64 %16, 0
  br i1 %20, label %63, label %21

21:                                               ; preds = %13
  %22 = sub nuw nsw i64 %18, %19
  br label %23

23:                                               ; preds = %23, %21
  %24 = phi i64 [ 0, %21 ], [ %58, %23 ]
  %25 = phi <4 x i32> [ %15, %21 ], [ %56, %23 ]
  %26 = phi <4 x i32> [ zeroinitializer, %21 ], [ %57, %23 ]
  %27 = phi i64 [ %22, %21 ], [ %59, %23 ]
  %28 = xor i64 %24, -1
  %29 = getelementptr inbounds i8, i8* %2, i64 %28
  %30 = getelementptr inbounds i8, i8* %29, i64 -3
  %31 = bitcast i8* %30 to <4 x i8>*
  %32 = load <4 x i8>, <4 x i8>* %31, align 1
  %33 = shufflevector <4 x i8> %32, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %34 = getelementptr inbounds i8, i8* %29, i64 -4
  %35 = getelementptr inbounds i8, i8* %34, i64 -3
  %36 = bitcast i8* %35 to <4 x i8>*
  %37 = load <4 x i8>, <4 x i8>* %36, align 1
  %38 = shufflevector <4 x i8> %37, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %39 = zext <4 x i8> %33 to <4 x i32>
  %40 = zext <4 x i8> %38 to <4 x i32>
  %41 = add <4 x i32> %25, %39
  %42 = add <4 x i32> %26, %40
  %43 = sub nuw nsw i64 -9, %24
  %44 = getelementptr inbounds i8, i8* %2, i64 %43
  %45 = getelementptr inbounds i8, i8* %44, i64 -3
  %46 = bitcast i8* %45 to <4 x i8>*
  %47 = load <4 x i8>, <4 x i8>* %46, align 1
  %48 = shufflevector <4 x i8> %47, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %49 = getelementptr inbounds i8, i8* %44, i64 -4
  %50 = getelementptr inbounds i8, i8* %49, i64 -3
  %51 = bitcast i8* %50 to <4 x i8>*
  %52 = load <4 x i8>, <4 x i8>* %51, align 1
  %53 = shufflevector <4 x i8> %52, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %54 = zext <4 x i8> %48 to <4 x i32>
  %55 = zext <4 x i8> %53 to <4 x i32>
  %56 = add <4 x i32> %41, %54
  %57 = add <4 x i32> %42, %55
  %58 = add i64 %24, 16
  %59 = add i64 %27, -2
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %23, !llvm.loop !65

61:                                               ; preds = %23
  %62 = sub i64 -17, %24
  br label %63

63:                                               ; preds = %61, %13
  %64 = phi <4 x i32> [ undef, %13 ], [ %56, %61 ]
  %65 = phi <4 x i32> [ undef, %13 ], [ %57, %61 ]
  %66 = phi i64 [ -1, %13 ], [ %62, %61 ]
  %67 = phi <4 x i32> [ %15, %13 ], [ %56, %61 ]
  %68 = phi <4 x i32> [ zeroinitializer, %13 ], [ %57, %61 ]
  %69 = icmp eq i64 %19, 0
  br i1 %69, label %85, label %70

70:                                               ; preds = %63
  %71 = getelementptr inbounds i8, i8* %2, i64 %66
  %72 = getelementptr inbounds i8, i8* %71, i64 -4
  %73 = getelementptr inbounds i8, i8* %72, i64 -3
  %74 = bitcast i8* %73 to <4 x i8>*
  %75 = load <4 x i8>, <4 x i8>* %74, align 1
  %76 = shufflevector <4 x i8> %75, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %77 = zext <4 x i8> %76 to <4 x i32>
  %78 = add <4 x i32> %68, %77
  %79 = getelementptr inbounds i8, i8* %71, i64 -3
  %80 = bitcast i8* %79 to <4 x i8>*
  %81 = load <4 x i8>, <4 x i8>* %80, align 1
  %82 = shufflevector <4 x i8> %81, <4 x i8> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %83 = zext <4 x i8> %82 to <4 x i32>
  %84 = add <4 x i32> %67, %83
  br label %85

85:                                               ; preds = %63, %70
  %86 = phi <4 x i32> [ %64, %63 ], [ %84, %70 ]
  %87 = phi <4 x i32> [ %65, %63 ], [ %78, %70 ]
  %88 = add <4 x i32> %87, %86
  %89 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %90 = add <4 x i32> %88, %89
  %91 = shufflevector <4 x i32> %90, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %92 = add <4 x i32> %90, %91
  %93 = extractelement <4 x i32> %92, i32 0
  %94 = icmp eq i64 %14, %11
  br i1 %94, label %108, label %95

95:                                               ; preds = %85, %10
  %96 = phi i64 [ 0, %10 ], [ %14, %85 ]
  %97 = phi i32 [ %8, %10 ], [ %93, %85 ]
  br label %98

98:                                               ; preds = %95, %98
  %99 = phi i64 [ %101, %98 ], [ %96, %95 ]
  %100 = phi i32 [ %106, %98 ], [ %97, %95 ]
  %101 = add nuw nsw i64 %99, 1
  %102 = xor i64 %99, -1
  %103 = getelementptr inbounds i8, i8* %2, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = add i32 %100, %105
  %107 = icmp eq i64 %101, %11
  br i1 %107, label %108, label %98, !llvm.loop !66

108:                                              ; preds = %98, %85, %7
  %109 = phi i32 [ %8, %7 ], [ %93, %85 ], [ %106, %98 ]
  %110 = tail call i32 @llvm.cttz.i32(i32 %4, i1 true) #10, !range !7
  %111 = lshr i32 %109, %110
  tail call fastcc void @cfl_pred(i8* %0, i64 %1, i32 %3, i32 %4, i32 %111, i16* %5, i32 %6)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @pal_pred_c(i8* nocapture, i64, i16* nocapture readonly, i8* nocapture readonly, i32, i32) #2 {
  %7 = icmp sgt i32 %5, 0
  br i1 %7, label %8, label %22

8:                                                ; preds = %6
  %9 = icmp sgt i32 %4, 0
  %10 = sext i32 %4 to i64
  %11 = zext i32 %4 to i64
  %12 = add nsw i64 %11, -1
  %13 = and i64 %11, 3
  %14 = icmp ult i64 %12, 3
  %15 = sub nsw i64 %11, %13
  %16 = icmp eq i64 %13, 0
  br label %17

17:                                               ; preds = %38, %8
  %18 = phi i32 [ 0, %8 ], [ %41, %38 ]
  %19 = phi i8* [ %0, %8 ], [ %40, %38 ]
  %20 = phi i8* [ %3, %8 ], [ %39, %38 ]
  br i1 %9, label %21, label %38

21:                                               ; preds = %17
  br i1 %14, label %23, label %43

22:                                               ; preds = %38, %6
  ret void

23:                                               ; preds = %43, %21
  %24 = phi i64 [ 0, %21 ], [ %77, %43 ]
  br i1 %16, label %38, label %25

25:                                               ; preds = %23, %25
  %26 = phi i64 [ %35, %25 ], [ %24, %23 ]
  %27 = phi i64 [ %36, %25 ], [ %13, %23 ]
  %28 = getelementptr inbounds i8, i8* %20, i64 %26
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i64
  %31 = getelementptr inbounds i16, i16* %2, i64 %30
  %32 = load i16, i16* %31, align 2
  %33 = trunc i16 %32 to i8
  %34 = getelementptr inbounds i8, i8* %19, i64 %26
  store i8 %33, i8* %34, align 1
  %35 = add nuw nsw i64 %26, 1
  %36 = add i64 %27, -1
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %25, !llvm.loop !67

38:                                               ; preds = %23, %25, %17
  %39 = getelementptr inbounds i8, i8* %20, i64 %10
  %40 = getelementptr inbounds i8, i8* %19, i64 %1
  %41 = add nuw nsw i32 %18, 1
  %42 = icmp eq i32 %41, %5
  br i1 %42, label %22, label %17

43:                                               ; preds = %21, %43
  %44 = phi i64 [ %77, %43 ], [ 0, %21 ]
  %45 = phi i64 [ %78, %43 ], [ %15, %21 ]
  %46 = getelementptr inbounds i8, i8* %20, i64 %44
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i64
  %49 = getelementptr inbounds i16, i16* %2, i64 %48
  %50 = load i16, i16* %49, align 2
  %51 = trunc i16 %50 to i8
  %52 = getelementptr inbounds i8, i8* %19, i64 %44
  store i8 %51, i8* %52, align 1
  %53 = or i64 %44, 1
  %54 = getelementptr inbounds i8, i8* %20, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i64
  %57 = getelementptr inbounds i16, i16* %2, i64 %56
  %58 = load i16, i16* %57, align 2
  %59 = trunc i16 %58 to i8
  %60 = getelementptr inbounds i8, i8* %19, i64 %53
  store i8 %59, i8* %60, align 1
  %61 = or i64 %44, 2
  %62 = getelementptr inbounds i8, i8* %20, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i64
  %65 = getelementptr inbounds i16, i16* %2, i64 %64
  %66 = load i16, i16* %65, align 2
  %67 = trunc i16 %66 to i8
  %68 = getelementptr inbounds i8, i8* %19, i64 %61
  store i8 %67, i8* %68, align 1
  %69 = or i64 %44, 3
  %70 = getelementptr inbounds i8, i8* %20, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i64
  %73 = getelementptr inbounds i16, i16* %2, i64 %72
  %74 = load i16, i16* %73, align 2
  %75 = trunc i16 %74 to i8
  %76 = getelementptr inbounds i8, i8* %19, i64 %69
  store i8 %75, i8* %76, align 1
  %77 = add nuw nsw i64 %44, 4
  %78 = add i64 %45, -4
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %23, label %43
}

declare void @dav1d_intra_pred_dsp_init_x86_8bpc(%struct.Dav1dIntraPredDSPContext*) local_unnamed_addr #4

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @splat_dc(i8* nocapture, i64, i32, i32, i32) unnamed_addr #5 {
  %6 = icmp slt i32 %4, 256
  tail call void @llvm.assume(i1 %6)
  %7 = icmp sgt i32 %2, 4
  br i1 %7, label %8, label %29

8:                                                ; preds = %5
  %9 = sext i32 %4 to i64
  %10 = mul i64 %9, 72340172838076673
  %11 = icmp sgt i32 %3, 0
  br i1 %11, label %12, label %72

12:                                               ; preds = %8
  %13 = and i32 %3, 1
  %14 = icmp eq i32 %3, 1
  br i1 %14, label %50, label %15

15:                                               ; preds = %12
  %16 = sub i32 %3, %13
  br label %17

17:                                               ; preds = %80, %15
  %18 = phi i8* [ %0, %15 ], [ %81, %80 ]
  %19 = phi i32 [ %16, %15 ], [ %82, %80 ]
  br label %22

20:                                               ; preds = %22
  %21 = getelementptr inbounds i8, i8* %18, i64 %1
  br label %73

22:                                               ; preds = %17, %22
  %23 = phi i32 [ %27, %22 ], [ 0, %17 ]
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %18, i64 %24
  %26 = bitcast i8* %25 to i64*
  store i64 %10, i64* %26, align 8
  %27 = add i32 %23, 8
  %28 = icmp slt i32 %27, %2
  br i1 %28, label %22, label %20

29:                                               ; preds = %5
  %30 = mul i32 %4, 16843009
  %31 = icmp sgt i32 %3, 0
  br i1 %31, label %32, label %72

32:                                               ; preds = %29
  %33 = icmp sgt i32 %2, 0
  %34 = and i32 %3, 1
  %35 = icmp eq i32 %3, 1
  br i1 %35, label %60, label %36

36:                                               ; preds = %32
  %37 = sub i32 %3, %34
  br label %38

38:                                               ; preds = %91, %36
  %39 = phi i8* [ %0, %36 ], [ %92, %91 ]
  %40 = phi i32 [ %37, %36 ], [ %93, %91 ]
  br i1 %33, label %43, label %41

41:                                               ; preds = %43, %38
  %42 = getelementptr inbounds i8, i8* %39, i64 %1
  br i1 %33, label %84, label %91

43:                                               ; preds = %38, %43
  %44 = phi i32 [ %48, %43 ], [ 0, %38 ]
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i8, i8* %39, i64 %45
  %47 = bitcast i8* %46 to i32*
  store i32 %30, i32* %47, align 4
  %48 = add i32 %44, 4
  %49 = icmp slt i32 %48, %2
  br i1 %49, label %43, label %41

50:                                               ; preds = %80, %12
  %51 = phi i8* [ %0, %12 ], [ %81, %80 ]
  %52 = icmp eq i32 %13, 0
  br i1 %52, label %72, label %53

53:                                               ; preds = %50, %53
  %54 = phi i32 [ %58, %53 ], [ 0, %50 ]
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %51, i64 %55
  %57 = bitcast i8* %56 to i64*
  store i64 %10, i64* %57, align 8
  %58 = add i32 %54, 8
  %59 = icmp slt i32 %58, %2
  br i1 %59, label %53, label %72

60:                                               ; preds = %91, %32
  %61 = phi i8* [ %0, %32 ], [ %92, %91 ]
  %62 = icmp eq i32 %34, 0
  %63 = xor i1 %33, true
  %64 = or i1 %62, %63
  br i1 %64, label %72, label %65

65:                                               ; preds = %60, %65
  %66 = phi i32 [ %70, %65 ], [ 0, %60 ]
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i8, i8* %61, i64 %67
  %69 = bitcast i8* %68 to i32*
  store i32 %30, i32* %69, align 4
  %70 = add i32 %66, 4
  %71 = icmp slt i32 %70, %2
  br i1 %71, label %65, label %72

72:                                               ; preds = %60, %65, %50, %53, %29, %8
  ret void

73:                                               ; preds = %73, %20
  %74 = phi i32 [ %78, %73 ], [ 0, %20 ]
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %21, i64 %75
  %77 = bitcast i8* %76 to i64*
  store i64 %10, i64* %77, align 8
  %78 = add i32 %74, 8
  %79 = icmp slt i32 %78, %2
  br i1 %79, label %73, label %80

80:                                               ; preds = %73
  %81 = getelementptr inbounds i8, i8* %21, i64 %1
  %82 = add i32 %19, -2
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %50, label %17

84:                                               ; preds = %41, %84
  %85 = phi i32 [ %89, %84 ], [ 0, %41 ]
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %42, i64 %86
  %88 = bitcast i8* %87 to i32*
  store i32 %30, i32* %88, align 4
  %89 = add i32 %85, 4
  %90 = icmp slt i32 %89, %2
  br i1 %90, label %84, label %91

91:                                               ; preds = %84, %41
  %92 = getelementptr inbounds i8, i8* %42, i64 %1
  %93 = add i32 %40, -2
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %60, label %38
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nofree noinline norecurse nounwind ssp uwtable
define internal fastcc void @upsample_edge(i8* nocapture, i32, i8* nocapture readonly, i32, i32) unnamed_addr #8 {
  %6 = add i32 %1, -1
  %7 = icmp sgt i32 %6, 0
  %8 = add nsw i32 %4, -1
  %9 = icmp sgt i32 %3, 0
  %10 = icmp slt i32 %8, 0
  %11 = select i1 %10, i32 %8, i32 0
  %12 = select i1 %9, i32 %3, i32 %11
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i8, i8* %2, i64 %13
  %15 = load i8, i8* %14, align 1
  store i8 %15, i8* %0, align 1
  br i1 %7, label %16, label %91

16:                                               ; preds = %5
  %17 = sext i32 %8 to i64
  %18 = sext i32 %3 to i64
  %19 = zext i32 %6 to i64
  br label %20

20:                                               ; preds = %20, %16
  %21 = phi i64 [ 0, %16 ], [ %33, %20 ]
  %22 = phi i64 [ 0, %16 ], [ %89, %20 ]
  %23 = add nsw i64 %21, -1
  %24 = icmp sgt i64 %21, %18
  %25 = icmp sgt i64 %23, %17
  %26 = trunc i64 %23 to i32
  %27 = select i1 %25, i32 %8, i32 %26
  %28 = select i1 %24, i32 %27, i32 %3
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %2, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = add nuw nsw i64 %21, 1
  %34 = trunc i64 %33 to i32
  %35 = add nsw i32 %34, -1
  %36 = icmp slt i64 %21, %18
  %37 = icmp sgt i32 %35, %8
  %38 = select i1 %37, i32 %8, i32 %35
  %39 = select i1 %36, i32 %3, i32 %38
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %2, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = mul nuw nsw i32 %43, 9
  %45 = sub nsw i32 %44, %32
  %46 = trunc i64 %21 to i32
  %47 = add i32 %46, 2
  %48 = add i32 %46, 1
  %49 = icmp sgt i32 %47, %3
  %50 = icmp sgt i32 %48, %8
  %51 = select i1 %50, i32 %8, i32 %48
  %52 = select i1 %49, i32 %51, i32 %3
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %2, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = mul nuw nsw i32 %56, 9
  %58 = add nsw i32 %57, %45
  %59 = trunc i64 %21 to i32
  %60 = add i32 %59, 3
  %61 = add i32 %59, 2
  %62 = icmp sgt i32 %60, %3
  %63 = icmp sgt i32 %61, %8
  %64 = select i1 %63, i32 %8, i32 %61
  %65 = select i1 %62, i32 %64, i32 %3
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i8, i8* %2, i64 %66
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = sub nsw i32 %58, %69
  %71 = add nsw i32 %70, 8
  %72 = ashr i32 %71, 4
  %73 = icmp slt i32 %72, 255
  %74 = select i1 %73, i32 %72, i32 255
  %75 = icmp sgt i32 %74, 0
  %76 = select i1 %75, i32 %74, i32 0
  %77 = trunc i32 %76 to i8
  %78 = or i64 %22, 1
  %79 = getelementptr inbounds i8, i8* %0, i64 %78
  store i8 %77, i8* %79, align 1
  %80 = icmp slt i64 %33, %18
  %81 = icmp slt i64 %21, %17
  %82 = select i1 %81, i32 %34, i32 %8
  %83 = select i1 %80, i32 %3, i32 %82
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %2, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = shl nuw nsw i64 %33, 1
  %88 = getelementptr inbounds i8, i8* %0, i64 %87
  store i8 %86, i8* %88, align 1
  %89 = add nuw nsw i64 %22, 2
  %90 = icmp eq i64 %33, %19
  br i1 %90, label %91, label %20

91:                                               ; preds = %20, %5
  ret void
}

; Function Attrs: noinline norecurse nounwind readnone ssp uwtable
define internal fastcc i32 @get_filter_strength(i32, i32, i32) unnamed_addr #9 {
  %4 = icmp eq i32 %2, 0
  %5 = icmp slt i32 %0, 9
  br i1 %4, label %21, label %6

6:                                                ; preds = %3
  br i1 %5, label %7, label %11

7:                                                ; preds = %6
  %8 = icmp sgt i32 %1, 63
  br i1 %8, label %44, label %9

9:                                                ; preds = %7
  %10 = icmp sgt i32 %1, 39
  br i1 %10, label %44, label %43

11:                                               ; preds = %6
  %12 = icmp slt i32 %0, 17
  br i1 %12, label %13, label %17

13:                                               ; preds = %11
  %14 = icmp sgt i32 %1, 47
  br i1 %14, label %44, label %15

15:                                               ; preds = %13
  %16 = icmp sgt i32 %1, 19
  br i1 %16, label %44, label %43

17:                                               ; preds = %11
  %18 = icmp sgt i32 %0, 24
  %19 = icmp sgt i32 %1, 3
  %20 = or i1 %18, %19
  br i1 %20, label %44, label %43

21:                                               ; preds = %3
  br i1 %5, label %22, label %24

22:                                               ; preds = %21
  %23 = icmp sgt i32 %1, 55
  br i1 %23, label %44, label %43

24:                                               ; preds = %21
  %25 = icmp slt i32 %0, 17
  br i1 %25, label %26, label %28

26:                                               ; preds = %24
  %27 = icmp sgt i32 %1, 39
  br i1 %27, label %44, label %43

28:                                               ; preds = %24
  %29 = icmp slt i32 %0, 25
  br i1 %29, label %30, label %36

30:                                               ; preds = %28
  %31 = icmp sgt i32 %1, 31
  br i1 %31, label %44, label %32

32:                                               ; preds = %30
  %33 = icmp sgt i32 %1, 15
  br i1 %33, label %44, label %34

34:                                               ; preds = %32
  %35 = icmp sgt i32 %1, 7
  br i1 %35, label %44, label %43

36:                                               ; preds = %28
  %37 = icmp sgt i32 %0, 32
  %38 = icmp sgt i32 %1, 31
  %39 = or i1 %37, %38
  br i1 %39, label %44, label %40

40:                                               ; preds = %36
  %41 = icmp sgt i32 %1, 3
  %42 = select i1 %41, i32 2, i32 1
  br label %44

43:                                               ; preds = %17, %22, %34, %26, %9, %15
  br label %44

44:                                               ; preds = %36, %17, %40, %34, %32, %30, %26, %22, %15, %13, %9, %7, %43
  %45 = phi i32 [ 0, %43 ], [ 2, %7 ], [ 1, %9 ], [ 2, %13 ], [ 1, %15 ], [ 3, %17 ], [ 1, %22 ], [ 1, %26 ], [ 3, %30 ], [ 2, %32 ], [ 1, %34 ], [ %42, %40 ], [ 3, %36 ]
  ret i32 %45
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @filter_edge(i8* nocapture, i32, i32, i32, i8* nocapture readonly, i32, i32, i32) unnamed_addr #5 {
  %9 = icmp sgt i32 %7, 0
  tail call void @llvm.assume(i1 %9)
  %10 = icmp slt i32 %1, %2
  %11 = select i1 %10, i32 %1, i32 %2
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %40

13:                                               ; preds = %8
  %14 = add nsw i32 %6, -1
  %15 = sext i32 %14 to i64
  %16 = sext i32 %5 to i64
  %17 = sext i32 %11 to i64
  %18 = and i64 %17, 1
  %19 = icmp eq i32 %11, 1
  br i1 %19, label %22, label %20

20:                                               ; preds = %13
  %21 = sub nsw i64 %17, %18
  br label %68

22:                                               ; preds = %68, %13
  %23 = phi i64 [ undef, %13 ], [ %90, %68 ]
  %24 = phi i64 [ 0, %13 ], [ %90, %68 ]
  %25 = icmp eq i64 %18, 0
  br i1 %25, label %37, label %26

26:                                               ; preds = %22
  %27 = icmp slt i64 %24, %16
  %28 = icmp sgt i64 %24, %15
  %29 = trunc i64 %24 to i32
  %30 = select i1 %28, i32 %14, i32 %29
  %31 = select i1 %27, i32 %5, i32 %30
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %4, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr inbounds i8, i8* %0, i64 %24
  store i8 %34, i8* %35, align 1
  %36 = add nuw nsw i64 %24, 1
  br label %37

37:                                               ; preds = %22, %26
  %38 = phi i64 [ %23, %22 ], [ %36, %26 ]
  %39 = trunc i64 %38 to i32
  br label %40

40:                                               ; preds = %37, %8
  %41 = phi i32 [ 0, %8 ], [ %39, %37 ]
  %42 = icmp slt i32 %3, %1
  %43 = select i1 %42, i32 %3, i32 %1
  %44 = icmp slt i32 %41, %43
  br i1 %44, label %45, label %160

45:                                               ; preds = %40
  %46 = add nsw i32 %6, -1
  %47 = add nsw i32 %7, -1
  %48 = sext i32 %47 to i64
  %49 = zext i32 %41 to i64
  %50 = sext i32 %5 to i64
  %51 = sext i32 %46 to i64
  %52 = sext i32 %43 to i64
  %53 = getelementptr inbounds [3 x [5 x i8]], [3 x [5 x i8]]* @filter_edge.kernel, i64 0, i64 %48, i64 0
  %54 = load i8, i8* %53, align 1
  %55 = getelementptr inbounds [3 x [5 x i8]], [3 x [5 x i8]]* @filter_edge.kernel, i64 0, i64 %48, i64 1
  %56 = load i8, i8* %55, align 1
  %57 = getelementptr inbounds [3 x [5 x i8]], [3 x [5 x i8]]* @filter_edge.kernel, i64 0, i64 %48, i64 2
  %58 = load i8, i8* %57, align 1
  %59 = getelementptr inbounds [3 x [5 x i8]], [3 x [5 x i8]]* @filter_edge.kernel, i64 0, i64 %48, i64 3
  %60 = load i8, i8* %59, align 1
  %61 = getelementptr inbounds [3 x [5 x i8]], [3 x [5 x i8]]* @filter_edge.kernel, i64 0, i64 %48, i64 4
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %54 to i32
  %64 = zext i8 %56 to i32
  %65 = zext i8 %58 to i32
  %66 = zext i8 %60 to i32
  %67 = zext i8 %62 to i32
  br label %93

68:                                               ; preds = %68, %20
  %69 = phi i64 [ 0, %20 ], [ %90, %68 ]
  %70 = phi i64 [ %21, %20 ], [ %91, %68 ]
  %71 = icmp slt i64 %69, %16
  %72 = icmp sgt i64 %69, %15
  %73 = trunc i64 %69 to i32
  %74 = select i1 %72, i32 %14, i32 %73
  %75 = select i1 %71, i32 %5, i32 %74
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %4, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = getelementptr inbounds i8, i8* %0, i64 %69
  store i8 %78, i8* %79, align 1
  %80 = or i64 %69, 1
  %81 = icmp slt i64 %80, %16
  %82 = icmp slt i64 %69, %15
  %83 = trunc i64 %80 to i32
  %84 = select i1 %82, i32 %83, i32 %14
  %85 = select i1 %81, i32 %5, i32 %84
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %4, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = getelementptr inbounds i8, i8* %0, i64 %80
  store i8 %88, i8* %89, align 1
  %90 = add nuw nsw i64 %69, 2
  %91 = add i64 %70, -2
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %22, label %68

93:                                               ; preds = %45, %93
  %94 = phi i64 [ %49, %45 ], [ %129, %93 ]
  %95 = add nsw i64 %94, -2
  %96 = icmp slt i64 %95, %50
  %97 = icmp sgt i64 %95, %51
  %98 = trunc i64 %95 to i32
  %99 = select i1 %97, i32 %46, i32 %98
  %100 = select i1 %96, i32 %5, i32 %99
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i8, i8* %4, i64 %101
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = mul nuw nsw i32 %63, %104
  %106 = add nsw i64 %94, -1
  %107 = icmp sgt i64 %94, %50
  %108 = icmp sgt i64 %106, %51
  %109 = trunc i64 %106 to i32
  %110 = select i1 %108, i32 %46, i32 %109
  %111 = select i1 %107, i32 %110, i32 %5
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i8, i8* %4, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = mul nuw nsw i32 %64, %115
  %117 = add nuw nsw i32 %116, %105
  %118 = icmp slt i64 %94, %50
  %119 = icmp sgt i64 %94, %51
  %120 = trunc i64 %94 to i32
  %121 = select i1 %119, i32 %46, i32 %120
  %122 = select i1 %118, i32 %5, i32 %121
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %4, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = mul nuw nsw i32 %65, %126
  %128 = add nuw nsw i32 %127, %117
  %129 = add nuw nsw i64 %94, 1
  %130 = icmp slt i64 %129, %50
  %131 = icmp slt i64 %94, %51
  %132 = trunc i64 %129 to i32
  %133 = select i1 %131, i32 %132, i32 %46
  %134 = select i1 %130, i32 %5, i32 %133
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds i8, i8* %4, i64 %135
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = mul nuw nsw i32 %66, %138
  %140 = add nuw nsw i32 %139, %128
  %141 = add nuw nsw i64 %94, 2
  %142 = icmp slt i64 %141, %50
  %143 = icmp sgt i64 %141, %51
  %144 = trunc i64 %141 to i32
  %145 = select i1 %143, i32 %46, i32 %144
  %146 = select i1 %142, i32 %5, i32 %145
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds i8, i8* %4, i64 %147
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = mul nuw nsw i32 %67, %150
  %152 = add nuw nsw i32 %151, %140
  %153 = add nuw nsw i32 %152, 8
  %154 = lshr i32 %153, 4
  %155 = trunc i32 %154 to i8
  %156 = getelementptr inbounds i8, i8* %0, i64 %94
  store i8 %155, i8* %156, align 1
  %157 = icmp slt i64 %129, %52
  br i1 %157, label %93, label %158

158:                                              ; preds = %93
  %159 = trunc i64 %129 to i32
  br label %160

160:                                              ; preds = %158, %40
  %161 = phi i32 [ %41, %40 ], [ %159, %158 ]
  %162 = icmp slt i32 %161, %1
  br i1 %162, label %163, label %211

163:                                              ; preds = %160
  %164 = add nsw i32 %6, -1
  %165 = zext i32 %161 to i64
  %166 = sub i32 %1, %161
  %167 = xor i32 %161, -1
  %168 = and i32 %166, 1
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %181, label %170

170:                                              ; preds = %163
  %171 = icmp slt i32 %161, %5
  %172 = icmp slt i32 %164, %161
  %173 = select i1 %172, i32 %164, i32 %161
  %174 = select i1 %171, i32 %5, i32 %173
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds i8, i8* %4, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = getelementptr inbounds i8, i8* %0, i64 %165
  store i8 %177, i8* %178, align 1
  %179 = add nuw nsw i64 %165, 1
  %180 = add nuw nsw i32 %161, 1
  br label %181

181:                                              ; preds = %163, %170
  %182 = phi i64 [ %165, %163 ], [ %179, %170 ]
  %183 = phi i32 [ %161, %163 ], [ %180, %170 ]
  %184 = sub i32 0, %1
  %185 = icmp eq i32 %167, %184
  br i1 %185, label %211, label %186

186:                                              ; preds = %181, %186
  %187 = phi i64 [ %208, %186 ], [ %182, %181 ]
  %188 = phi i32 [ %209, %186 ], [ %183, %181 ]
  %189 = trunc i64 %187 to i32
  %190 = icmp slt i32 %189, %5
  %191 = icmp slt i32 %164, %189
  %192 = select i1 %191, i32 %164, i32 %189
  %193 = select i1 %190, i32 %5, i32 %192
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds i8, i8* %4, i64 %194
  %196 = load i8, i8* %195, align 1
  %197 = getelementptr inbounds i8, i8* %0, i64 %187
  store i8 %196, i8* %197, align 1
  %198 = add nuw nsw i64 %187, 1
  %199 = trunc i64 %198 to i32
  %200 = icmp slt i32 %199, %5
  %201 = icmp slt i32 %164, %199
  %202 = select i1 %201, i32 %164, i32 %199
  %203 = select i1 %200, i32 %5, i32 %202
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds i8, i8* %4, i64 %204
  %206 = load i8, i8* %205, align 1
  %207 = getelementptr inbounds i8, i8* %0, i64 %198
  store i8 %206, i8* %207, align 1
  %208 = add nuw nsw i64 %187, 2
  %209 = add nuw nsw i32 %188, 2
  %210 = icmp eq i32 %209, %1
  br i1 %210, label %211, label %186

211:                                              ; preds = %181, %186, %160
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal fastcc void @cfl_ac_c(i16* nocapture, i8* nocapture readonly, i64, i32, i32, i32, i32, i32, i32) unnamed_addr #5 {
  %10 = icmp sgt i32 %3, -1
  tail call void @llvm.assume(i1 %10)
  %11 = shl i32 %3, 2
  %12 = icmp slt i32 %11, %5
  tail call void @llvm.assume(i1 %12)
  %13 = icmp sgt i32 %4, -1
  tail call void @llvm.assume(i1 %13)
  %14 = shl i32 %4, 2
  %15 = icmp slt i32 %14, %6
  tail call void @llvm.assume(i1 %15)
  %16 = sub i32 %6, %14
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %18, label %53

18:                                               ; preds = %9
  %19 = sub i32 %5, %11
  %20 = icmp sgt i32 %19, 0
  %21 = icmp ne i32 %7, 0
  %22 = icmp ne i32 %8, 0
  %23 = select i1 %22, i32 1, i32 2
  %24 = xor i1 %21, true
  %25 = zext i1 %24 to i32
  %26 = add nuw nsw i32 %23, %25
  %27 = sext i32 %5 to i64
  %28 = zext i32 %8 to i64
  %29 = shl i64 %2, %28
  %30 = zext i32 %19 to i64
  %31 = zext i32 %5 to i64
  %32 = icmp sgt i32 %19, 0
  %33 = select i1 %32, i32 %19, i32 0
  %34 = zext i32 %33 to i64
  %35 = add nsw i64 %34, -1
  %36 = icmp sgt i32 %19, 0
  %37 = select i1 %36, i32 %19, i32 0
  %38 = zext i32 %37 to i64
  %39 = sub nsw i64 %31, %38
  %40 = xor i64 %38, -1
  %41 = add nsw i64 %40, %31
  %42 = and i64 %39, 7
  %43 = icmp eq i64 %42, 0
  %44 = icmp ult i64 %41, 7
  br label %45

45:                                               ; preds = %154, %18
  %46 = phi i64 [ %159, %154 ], [ 0, %18 ]
  %47 = phi i32 [ %157, %154 ], [ 0, %18 ]
  %48 = phi i16* [ %155, %154 ], [ %0, %18 ]
  %49 = phi i8* [ %156, %154 ], [ %1, %18 ]
  %50 = mul i64 %46, %27
  %51 = add i64 %35, %50
  %52 = getelementptr i16, i16* %0, i64 %51
  br i1 %20, label %97, label %82

53:                                               ; preds = %154, %9
  %54 = phi i16* [ %0, %9 ], [ %155, %154 ]
  %55 = phi i32 [ 0, %9 ], [ %16, %154 ]
  %56 = icmp slt i32 %55, %6
  br i1 %56, label %57, label %181

57:                                               ; preds = %53
  %58 = sub nsw i32 0, %5
  %59 = sext i32 %58 to i64
  %60 = sext i32 %5 to i64
  %61 = shl nsw i64 %60, 1
  %62 = sub i32 %6, %55
  %63 = xor i32 %55, -1
  %64 = add i32 %63, %6
  %65 = and i32 %62, 3
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %78, label %67

67:                                               ; preds = %57, %67
  %68 = phi i32 [ %75, %67 ], [ %55, %57 ]
  %69 = phi i16* [ %74, %67 ], [ %54, %57 ]
  %70 = phi i32 [ %76, %67 ], [ %65, %57 ]
  %71 = bitcast i16* %69 to i8*
  %72 = getelementptr inbounds i16, i16* %69, i64 %59
  %73 = bitcast i16* %72 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %71, i8* align 2 %73, i64 %61, i1 false)
  %74 = getelementptr inbounds i16, i16* %69, i64 %60
  %75 = add nuw nsw i32 %68, 1
  %76 = add i32 %70, -1
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %67, !llvm.loop !68

78:                                               ; preds = %67, %57
  %79 = phi i32 [ %55, %57 ], [ %75, %67 ]
  %80 = phi i16* [ %54, %57 ], [ %74, %67 ]
  %81 = icmp ult i32 %64, 3
  br i1 %81, label %181, label %160

82:                                               ; preds = %128, %45
  %83 = phi i32 [ 0, %45 ], [ %19, %128 ]
  %84 = icmp slt i32 %83, %5
  br i1 %84, label %85, label %154

85:                                               ; preds = %82
  %86 = zext i32 %83 to i64
  %87 = load i16, i16* %52, align 2
  br i1 %43, label %95, label %88

88:                                               ; preds = %85, %88
  %89 = phi i64 [ %92, %88 ], [ %86, %85 ]
  %90 = phi i64 [ %93, %88 ], [ %42, %85 ]
  %91 = getelementptr inbounds i16, i16* %48, i64 %89
  store i16 %87, i16* %91, align 2
  %92 = add nuw nsw i64 %89, 1
  %93 = add i64 %90, -1
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %88, !llvm.loop !69

95:                                               ; preds = %88, %85
  %96 = phi i64 [ %86, %85 ], [ %92, %88 ]
  br i1 %44, label %154, label %135

97:                                               ; preds = %45, %128
  %98 = phi i64 [ %133, %128 ], [ 0, %45 ]
  %99 = trunc i64 %98 to i32
  %100 = shl i32 %99, %7
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i8, i8* %49, i64 %101
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  br i1 %21, label %105, label %112

105:                                              ; preds = %97
  %106 = shl nuw nsw i64 %98, 1
  %107 = or i64 %106, 1
  %108 = getelementptr inbounds i8, i8* %49, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = add nuw nsw i32 %110, %104
  br label %112

112:                                              ; preds = %105, %97
  %113 = phi i32 [ %111, %105 ], [ %104, %97 ]
  br i1 %22, label %114, label %128

114:                                              ; preds = %112
  %115 = add nsw i64 %101, %2
  %116 = getelementptr inbounds i8, i8* %49, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = add nuw nsw i32 %113, %118
  br i1 %21, label %120, label %128

120:                                              ; preds = %114
  %121 = shl nuw nsw i64 %98, 1
  %122 = or i64 %121, 1
  %123 = add nsw i64 %122, %2
  %124 = getelementptr inbounds i8, i8* %49, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = add nuw nsw i32 %119, %126
  br label %128

128:                                              ; preds = %114, %120, %112
  %129 = phi i32 [ %127, %120 ], [ %119, %114 ], [ %113, %112 ]
  %130 = shl i32 %129, %26
  %131 = trunc i32 %130 to i16
  %132 = getelementptr inbounds i16, i16* %48, i64 %98
  store i16 %131, i16* %132, align 2
  %133 = add nuw nsw i64 %98, 1
  %134 = icmp eq i64 %133, %30
  br i1 %134, label %82, label %97

135:                                              ; preds = %95, %135
  %136 = phi i64 [ %152, %135 ], [ %96, %95 ]
  %137 = getelementptr inbounds i16, i16* %48, i64 %136
  store i16 %87, i16* %137, align 2
  %138 = add nuw nsw i64 %136, 1
  %139 = getelementptr inbounds i16, i16* %48, i64 %138
  store i16 %87, i16* %139, align 2
  %140 = add nuw nsw i64 %136, 2
  %141 = getelementptr inbounds i16, i16* %48, i64 %140
  store i16 %87, i16* %141, align 2
  %142 = add nuw nsw i64 %136, 3
  %143 = getelementptr inbounds i16, i16* %48, i64 %142
  store i16 %87, i16* %143, align 2
  %144 = add nuw nsw i64 %136, 4
  %145 = getelementptr inbounds i16, i16* %48, i64 %144
  store i16 %87, i16* %145, align 2
  %146 = add nuw nsw i64 %136, 5
  %147 = getelementptr inbounds i16, i16* %48, i64 %146
  store i16 %87, i16* %147, align 2
  %148 = add nuw nsw i64 %136, 6
  %149 = getelementptr inbounds i16, i16* %48, i64 %148
  store i16 %87, i16* %149, align 2
  %150 = add nuw nsw i64 %136, 7
  %151 = getelementptr inbounds i16, i16* %48, i64 %150
  store i16 %87, i16* %151, align 2
  %152 = add nuw nsw i64 %136, 8
  %153 = icmp eq i64 %152, %31
  br i1 %153, label %154, label %135

154:                                              ; preds = %95, %135, %82
  %155 = getelementptr inbounds i16, i16* %48, i64 %27
  %156 = getelementptr inbounds i8, i8* %49, i64 %29
  %157 = add nuw nsw i32 %47, 1
  %158 = icmp eq i32 %157, %16
  %159 = add i64 %46, 1
  br i1 %158, label %53, label %45

160:                                              ; preds = %78, %160
  %161 = phi i32 [ %179, %160 ], [ %79, %78 ]
  %162 = phi i16* [ %178, %160 ], [ %80, %78 ]
  %163 = bitcast i16* %162 to i8*
  %164 = getelementptr inbounds i16, i16* %162, i64 %59
  %165 = bitcast i16* %164 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %163, i8* align 2 %165, i64 %61, i1 false)
  %166 = getelementptr inbounds i16, i16* %162, i64 %60
  %167 = bitcast i16* %166 to i8*
  %168 = getelementptr inbounds i16, i16* %166, i64 %59
  %169 = bitcast i16* %168 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %167, i8* align 2 %169, i64 %61, i1 false)
  %170 = getelementptr inbounds i16, i16* %166, i64 %60
  %171 = bitcast i16* %170 to i8*
  %172 = getelementptr inbounds i16, i16* %170, i64 %59
  %173 = bitcast i16* %172 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %171, i8* align 2 %173, i64 %61, i1 false)
  %174 = getelementptr inbounds i16, i16* %170, i64 %60
  %175 = bitcast i16* %174 to i8*
  %176 = getelementptr inbounds i16, i16* %174, i64 %59
  %177 = bitcast i16* %176 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %175, i8* align 2 %177, i64 %61, i1 false)
  %178 = getelementptr inbounds i16, i16* %174, i64 %60
  %179 = add nuw nsw i32 %161, 4
  %180 = icmp eq i32 %179, %6
  br i1 %180, label %181, label %160

181:                                              ; preds = %78, %160, %53
  %182 = tail call i32 @llvm.cttz.i32(i32 %5, i1 true) #10, !range !7
  %183 = tail call i32 @llvm.cttz.i32(i32 %6, i1 true) #10, !range !7
  %184 = add nuw nsw i32 %183, %182
  %185 = icmp sgt i32 %6, 0
  br i1 %185, label %186, label %363

186:                                              ; preds = %181
  %187 = shl i32 1, %184
  %188 = ashr i32 %187, 1
  %189 = icmp sgt i32 %5, 0
  %190 = sext i32 %5 to i64
  %191 = zext i32 %5 to i64
  %192 = and i64 %191, 4294967288
  %193 = add nsw i64 %192, -8
  %194 = lshr exact i64 %193, 3
  %195 = add nuw nsw i64 %194, 1
  %196 = icmp ult i32 %5, 8
  %197 = and i64 %191, 4294967288
  %198 = and i64 %195, 1
  %199 = icmp eq i64 %193, 0
  %200 = sub nuw nsw i64 %195, %198
  %201 = icmp eq i64 %198, 0
  %202 = icmp eq i64 %197, %191
  br label %203

203:                                              ; preds = %277, %186
  %204 = phi i32 [ %188, %186 ], [ %278, %277 ]
  %205 = phi i32 [ 0, %186 ], [ %280, %277 ]
  %206 = phi i16* [ %0, %186 ], [ %279, %277 ]
  br i1 %189, label %207, label %277

207:                                              ; preds = %203
  br i1 %196, label %265, label %208

208:                                              ; preds = %207
  %209 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %204, i32 0
  br i1 %199, label %239, label %210

210:                                              ; preds = %208, %210
  %211 = phi i64 [ %236, %210 ], [ 0, %208 ]
  %212 = phi <4 x i32> [ %234, %210 ], [ %209, %208 ]
  %213 = phi <4 x i32> [ %235, %210 ], [ zeroinitializer, %208 ]
  %214 = phi i64 [ %237, %210 ], [ %200, %208 ]
  %215 = getelementptr inbounds i16, i16* %206, i64 %211
  %216 = bitcast i16* %215 to <4 x i16>*
  %217 = load <4 x i16>, <4 x i16>* %216, align 2
  %218 = getelementptr inbounds i16, i16* %215, i64 4
  %219 = bitcast i16* %218 to <4 x i16>*
  %220 = load <4 x i16>, <4 x i16>* %219, align 2
  %221 = sext <4 x i16> %217 to <4 x i32>
  %222 = sext <4 x i16> %220 to <4 x i32>
  %223 = add nsw <4 x i32> %212, %221
  %224 = add nsw <4 x i32> %213, %222
  %225 = or i64 %211, 8
  %226 = getelementptr inbounds i16, i16* %206, i64 %225
  %227 = bitcast i16* %226 to <4 x i16>*
  %228 = load <4 x i16>, <4 x i16>* %227, align 2
  %229 = getelementptr inbounds i16, i16* %226, i64 4
  %230 = bitcast i16* %229 to <4 x i16>*
  %231 = load <4 x i16>, <4 x i16>* %230, align 2
  %232 = sext <4 x i16> %228 to <4 x i32>
  %233 = sext <4 x i16> %231 to <4 x i32>
  %234 = add nsw <4 x i32> %223, %232
  %235 = add nsw <4 x i32> %224, %233
  %236 = add i64 %211, 16
  %237 = add i64 %214, -2
  %238 = icmp eq i64 %237, 0
  br i1 %238, label %239, label %210, !llvm.loop !70

239:                                              ; preds = %210, %208
  %240 = phi <4 x i32> [ undef, %208 ], [ %234, %210 ]
  %241 = phi <4 x i32> [ undef, %208 ], [ %235, %210 ]
  %242 = phi i64 [ 0, %208 ], [ %236, %210 ]
  %243 = phi <4 x i32> [ %209, %208 ], [ %234, %210 ]
  %244 = phi <4 x i32> [ zeroinitializer, %208 ], [ %235, %210 ]
  br i1 %201, label %256, label %245

245:                                              ; preds = %239
  %246 = getelementptr inbounds i16, i16* %206, i64 %242
  %247 = getelementptr inbounds i16, i16* %246, i64 4
  %248 = bitcast i16* %247 to <4 x i16>*
  %249 = load <4 x i16>, <4 x i16>* %248, align 2
  %250 = sext <4 x i16> %249 to <4 x i32>
  %251 = add nsw <4 x i32> %244, %250
  %252 = bitcast i16* %246 to <4 x i16>*
  %253 = load <4 x i16>, <4 x i16>* %252, align 2
  %254 = sext <4 x i16> %253 to <4 x i32>
  %255 = add nsw <4 x i32> %243, %254
  br label %256

256:                                              ; preds = %239, %245
  %257 = phi <4 x i32> [ %240, %239 ], [ %255, %245 ]
  %258 = phi <4 x i32> [ %241, %239 ], [ %251, %245 ]
  %259 = add <4 x i32> %258, %257
  %260 = shufflevector <4 x i32> %259, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %261 = add <4 x i32> %259, %260
  %262 = shufflevector <4 x i32> %261, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %263 = add <4 x i32> %261, %262
  %264 = extractelement <4 x i32> %263, i32 0
  br i1 %202, label %277, label %265

265:                                              ; preds = %256, %207
  %266 = phi i64 [ 0, %207 ], [ %197, %256 ]
  %267 = phi i32 [ %204, %207 ], [ %264, %256 ]
  br label %268

268:                                              ; preds = %265, %268
  %269 = phi i64 [ %275, %268 ], [ %266, %265 ]
  %270 = phi i32 [ %274, %268 ], [ %267, %265 ]
  %271 = getelementptr inbounds i16, i16* %206, i64 %269
  %272 = load i16, i16* %271, align 2
  %273 = sext i16 %272 to i32
  %274 = add nsw i32 %270, %273
  %275 = add nuw nsw i64 %269, 1
  %276 = icmp eq i64 %275, %191
  br i1 %276, label %277, label %268, !llvm.loop !71

277:                                              ; preds = %268, %256, %203
  %278 = phi i32 [ %204, %203 ], [ %264, %256 ], [ %274, %268 ]
  %279 = getelementptr inbounds i16, i16* %206, i64 %190
  %280 = add nuw nsw i32 %205, 1
  %281 = icmp eq i32 %280, %6
  br i1 %281, label %282, label %203

282:                                              ; preds = %277
  br i1 %185, label %283, label %363

283:                                              ; preds = %282
  %284 = ashr i32 %278, %184
  %285 = icmp sgt i32 %5, 0
  %286 = trunc i32 %284 to i16
  %287 = sext i32 %5 to i64
  %288 = zext i32 %5 to i64
  %289 = and i64 %191, 4294967280
  %290 = add nsw i64 %289, -16
  %291 = lshr exact i64 %290, 4
  %292 = add nuw nsw i64 %291, 1
  %293 = icmp ult i32 %5, 16
  %294 = and i64 %191, 4294967280
  %295 = insertelement <8 x i16> undef, i16 %286, i32 0
  %296 = shufflevector <8 x i16> %295, <8 x i16> undef, <8 x i32> zeroinitializer
  %297 = insertelement <8 x i16> undef, i16 %286, i32 0
  %298 = shufflevector <8 x i16> %297, <8 x i16> undef, <8 x i32> zeroinitializer
  %299 = and i64 %292, 1
  %300 = icmp eq i64 %290, 0
  %301 = sub nuw nsw i64 %292, %299
  %302 = icmp eq i64 %299, 0
  %303 = icmp eq i64 %294, %191
  br label %304

304:                                              ; preds = %359, %283
  %305 = phi i32 [ 0, %283 ], [ %361, %359 ]
  %306 = phi i16* [ %0, %283 ], [ %360, %359 ]
  br i1 %285, label %307, label %359

307:                                              ; preds = %304
  br i1 %293, label %350, label %308

308:                                              ; preds = %307
  br i1 %300, label %336, label %309

309:                                              ; preds = %308, %309
  %310 = phi i64 [ %333, %309 ], [ 0, %308 ]
  %311 = phi i64 [ %334, %309 ], [ %301, %308 ]
  %312 = getelementptr inbounds i16, i16* %306, i64 %310
  %313 = bitcast i16* %312 to <8 x i16>*
  %314 = load <8 x i16>, <8 x i16>* %313, align 2
  %315 = getelementptr inbounds i16, i16* %312, i64 8
  %316 = bitcast i16* %315 to <8 x i16>*
  %317 = load <8 x i16>, <8 x i16>* %316, align 2
  %318 = sub <8 x i16> %314, %296
  %319 = sub <8 x i16> %317, %298
  %320 = bitcast i16* %312 to <8 x i16>*
  store <8 x i16> %318, <8 x i16>* %320, align 2
  %321 = bitcast i16* %315 to <8 x i16>*
  store <8 x i16> %319, <8 x i16>* %321, align 2
  %322 = or i64 %310, 16
  %323 = getelementptr inbounds i16, i16* %306, i64 %322
  %324 = bitcast i16* %323 to <8 x i16>*
  %325 = load <8 x i16>, <8 x i16>* %324, align 2
  %326 = getelementptr inbounds i16, i16* %323, i64 8
  %327 = bitcast i16* %326 to <8 x i16>*
  %328 = load <8 x i16>, <8 x i16>* %327, align 2
  %329 = sub <8 x i16> %325, %296
  %330 = sub <8 x i16> %328, %298
  %331 = bitcast i16* %323 to <8 x i16>*
  store <8 x i16> %329, <8 x i16>* %331, align 2
  %332 = bitcast i16* %326 to <8 x i16>*
  store <8 x i16> %330, <8 x i16>* %332, align 2
  %333 = add i64 %310, 32
  %334 = add i64 %311, -2
  %335 = icmp eq i64 %334, 0
  br i1 %335, label %336, label %309, !llvm.loop !72

336:                                              ; preds = %309, %308
  %337 = phi i64 [ 0, %308 ], [ %333, %309 ]
  br i1 %302, label %349, label %338

338:                                              ; preds = %336
  %339 = getelementptr inbounds i16, i16* %306, i64 %337
  %340 = bitcast i16* %339 to <8 x i16>*
  %341 = load <8 x i16>, <8 x i16>* %340, align 2
  %342 = getelementptr inbounds i16, i16* %339, i64 8
  %343 = bitcast i16* %342 to <8 x i16>*
  %344 = load <8 x i16>, <8 x i16>* %343, align 2
  %345 = sub <8 x i16> %341, %296
  %346 = sub <8 x i16> %344, %298
  %347 = bitcast i16* %339 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %347, align 2
  %348 = bitcast i16* %342 to <8 x i16>*
  store <8 x i16> %346, <8 x i16>* %348, align 2
  br label %349

349:                                              ; preds = %336, %338
  br i1 %303, label %359, label %350

350:                                              ; preds = %349, %307
  %351 = phi i64 [ 0, %307 ], [ %294, %349 ]
  br label %352

352:                                              ; preds = %350, %352
  %353 = phi i64 [ %357, %352 ], [ %351, %350 ]
  %354 = getelementptr inbounds i16, i16* %306, i64 %353
  %355 = load i16, i16* %354, align 2
  %356 = sub i16 %355, %286
  store i16 %356, i16* %354, align 2
  %357 = add nuw nsw i64 %353, 1
  %358 = icmp eq i64 %357, %288
  br i1 %358, label %359, label %352, !llvm.loop !73

359:                                              ; preds = %352, %349, %304
  %360 = getelementptr inbounds i16, i16* %306, i64 %287
  %361 = add nuw nsw i32 %305, 1
  %362 = icmp eq i32 %361, %6
  br i1 %362, label %363, label %304

363:                                              ; preds = %359, %181, %282
  ret void
}

; Function Attrs: nofree noinline norecurse nounwind ssp uwtable
define internal fastcc void @cfl_pred(i8* nocapture, i64, i32, i32, i32, i16* nocapture readonly, i32) unnamed_addr #8 {
  %8 = icmp sgt i32 %3, 0
  br i1 %8, label %9, label %67

9:                                                ; preds = %7
  %10 = icmp sgt i32 %2, 0
  %11 = sext i32 %2 to i64
  %12 = zext i32 %2 to i64
  %13 = icmp ult i32 %2, 8
  %14 = and i64 %12, 4294967288
  %15 = insertelement <8 x i32> undef, i32 %6, i32 0
  %16 = shufflevector <8 x i32> %15, <8 x i32> undef, <8 x i32> zeroinitializer
  %17 = insertelement <8 x i32> undef, i32 %4, i32 0
  %18 = shufflevector <8 x i32> %17, <8 x i32> undef, <8 x i32> zeroinitializer
  %19 = icmp eq i64 %14, %12
  br label %20

20:                                               ; preds = %68, %9
  %21 = phi i64 [ %73, %68 ], [ 0, %9 ]
  %22 = phi i8* [ %70, %68 ], [ %0, %9 ]
  %23 = phi i32 [ %71, %68 ], [ 0, %9 ]
  %24 = phi i16* [ %69, %68 ], [ %5, %9 ]
  %25 = mul i64 %21, %1
  %26 = getelementptr i8, i8* %0, i64 %25
  %27 = add i64 %25, %12
  %28 = getelementptr i8, i8* %0, i64 %27
  %29 = mul i64 %21, %11
  %30 = getelementptr i16, i16* %5, i64 %29
  %31 = bitcast i16* %30 to i8*
  %32 = add i64 %29, %12
  %33 = getelementptr i16, i16* %5, i64 %32
  %34 = bitcast i16* %33 to i8*
  br i1 %10, label %35, label %68

35:                                               ; preds = %20
  br i1 %13, label %36, label %38

36:                                               ; preds = %66, %38, %35
  %37 = phi i64 [ 0, %38 ], [ 0, %35 ], [ %14, %66 ]
  br label %74

38:                                               ; preds = %35
  %39 = icmp ult i8* %26, %34
  %40 = icmp ugt i8* %28, %31
  %41 = and i1 %39, %40
  br i1 %41, label %36, label %42

42:                                               ; preds = %38, %42
  %43 = phi i64 [ %64, %42 ], [ 0, %38 ]
  %44 = getelementptr inbounds i16, i16* %24, i64 %43
  %45 = bitcast i16* %44 to <8 x i16>*
  %46 = load <8 x i16>, <8 x i16>* %45, align 2, !alias.scope !74
  %47 = sext <8 x i16> %46 to <8 x i32>
  %48 = mul nsw <8 x i32> %16, %47
  %49 = icmp slt <8 x i32> %48, zeroinitializer
  %50 = sub nsw <8 x i32> zeroinitializer, %48
  %51 = select <8 x i1> %49, <8 x i32> %50, <8 x i32> %48
  %52 = add nuw nsw <8 x i32> %51, <i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32, i32 32>
  %53 = lshr <8 x i32> %52, <i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6>
  %54 = sub nsw <8 x i32> zeroinitializer, %53
  %55 = select <8 x i1> %49, <8 x i32> %54, <8 x i32> %53
  %56 = add nsw <8 x i32> %55, %18
  %57 = icmp slt <8 x i32> %56, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %58 = select <8 x i1> %57, <8 x i32> %56, <8 x i32> <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %59 = icmp sgt <8 x i32> %58, zeroinitializer
  %60 = select <8 x i1> %59, <8 x i32> %58, <8 x i32> zeroinitializer
  %61 = trunc <8 x i32> %60 to <8 x i8>
  %62 = getelementptr inbounds i8, i8* %22, i64 %43
  %63 = bitcast i8* %62 to <8 x i8>*
  store <8 x i8> %61, <8 x i8>* %63, align 1, !alias.scope !77, !noalias !74
  %64 = add i64 %43, 8
  %65 = icmp eq i64 %64, %14
  br i1 %65, label %66, label %42, !llvm.loop !79

66:                                               ; preds = %42
  br i1 %19, label %68, label %36

67:                                               ; preds = %68, %7
  ret void

68:                                               ; preds = %74, %66, %20
  %69 = getelementptr inbounds i16, i16* %24, i64 %11
  %70 = getelementptr inbounds i8, i8* %22, i64 %1
  %71 = add nuw nsw i32 %23, 1
  %72 = icmp eq i32 %71, %3
  %73 = add i64 %21, 1
  br i1 %72, label %67, label %20

74:                                               ; preds = %36, %74
  %75 = phi i64 [ %94, %74 ], [ %37, %36 ]
  %76 = getelementptr inbounds i16, i16* %24, i64 %75
  %77 = load i16, i16* %76, align 2
  %78 = sext i16 %77 to i32
  %79 = mul nsw i32 %78, %6
  %80 = icmp slt i32 %79, 0
  %81 = sub nsw i32 0, %79
  %82 = select i1 %80, i32 %81, i32 %79
  %83 = add nuw nsw i32 %82, 32
  %84 = lshr i32 %83, 6
  %85 = sub nsw i32 0, %84
  %86 = select i1 %80, i32 %85, i32 %84
  %87 = add nsw i32 %86, %4
  %88 = icmp slt i32 %87, 255
  %89 = select i1 %88, i32 %87, i32 255
  %90 = icmp sgt i32 %89, 0
  %91 = select i1 %90, i32 %89, i32 0
  %92 = trunc i32 %91 to i8
  %93 = getelementptr inbounds i8, i8* %22, i64 %75
  store i8 %92, i8* %93, align 1
  %94 = add nuw nsw i64 %75, 1
  %95 = icmp eq i64 %94, %12
  br i1 %95, label %68, label %74, !llvm.loop !80
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #10

attributes #0 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nofree noinline norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noinline norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !6, !3}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
!7 = !{i32 0, i32 33}
!8 = distinct !{!8, !6, !3}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !6, !3}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !6, !3}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.unroll.disable"}
!15 = distinct !{!15, !14}
!16 = !{!17}
!17 = distinct !{!17, !18}
!18 = distinct !{!18, !"LVerDomain"}
!19 = !{!20}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !3}
!22 = distinct !{!22, !3}
!23 = !{!24}
!24 = distinct !{!24, !25}
!25 = distinct !{!25, !"LVerDomain"}
!26 = !{!27}
!27 = distinct !{!27, !25}
!28 = !{!29}
!29 = distinct !{!29, !25}
!30 = !{!31}
!31 = distinct !{!31, !25}
!32 = !{!24, !27, !29}
!33 = distinct !{!33, !3}
!34 = distinct !{!34, !3}
!35 = !{!36}
!36 = distinct !{!36, !37}
!37 = distinct !{!37, !"LVerDomain"}
!38 = !{!39}
!39 = distinct !{!39, !37}
!40 = distinct !{!40, !3}
!41 = distinct !{!41, !3}
!42 = !{!43}
!43 = distinct !{!43, !44}
!44 = distinct !{!44, !"LVerDomain"}
!45 = !{!46}
!46 = distinct !{!46, !44}
!47 = !{!48}
!48 = distinct !{!48, !44}
!49 = !{!46, !43}
!50 = distinct !{!50, !3}
!51 = distinct !{!51, !3}
!52 = !{!53}
!53 = distinct !{!53, !54}
!54 = distinct !{!54, !"LVerDomain"}
!55 = !{!56}
!56 = distinct !{!56, !54}
!57 = distinct !{!57, !3}
!58 = distinct !{!58, !3}
!59 = distinct !{!59, !3}
!60 = distinct !{!60, !3}
!61 = distinct !{!61, !6, !3}
!62 = distinct !{!62, !6, !3}
!63 = distinct !{!63, !3}
!64 = distinct !{!64, !6, !3}
!65 = distinct !{!65, !3}
!66 = distinct !{!66, !6, !3}
!67 = distinct !{!67, !14}
!68 = distinct !{!68, !14}
!69 = distinct !{!69, !14}
!70 = distinct !{!70, !3}
!71 = distinct !{!71, !6, !3}
!72 = distinct !{!72, !3}
!73 = distinct !{!73, !6, !3}
!74 = !{!75}
!75 = distinct !{!75, !76}
!76 = distinct !{!76, !"LVerDomain"}
!77 = !{!78}
!78 = distinct !{!78, !76}
!79 = distinct !{!79, !3}
!80 = distinct !{!80, !3}
