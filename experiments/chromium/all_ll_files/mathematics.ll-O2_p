; ModuleID = '../../third_party/ffmpeg/libavutil/mathematics.c'
source_filename = "../../third_party/ffmpeg/libavutil/mathematics.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@.str = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c"in_ts != ((int64_t)0x8000000000000000UL)\00", align 1
@.str.2 = private unnamed_addr constant [49 x i8] c"../../third_party/ffmpeg/libavutil/mathematics.c\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"duration >= 0\00", align 1

; Function Attrs: nounwind readnone ssp uwtable
define hidden i64 @av_gcd(i64, i64) local_unnamed_addr #0 {
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %35, label %4

4:                                                ; preds = %2
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %35, label %6

6:                                                ; preds = %4
  %7 = tail call i64 @llvm.cttz.i64(i64 %0, i1 true), !range !2
  %8 = trunc i64 %7 to i32
  %9 = tail call i64 @llvm.cttz.i64(i64 %1, i1 true), !range !2
  %10 = trunc i64 %9 to i32
  %11 = icmp ugt i32 %8, %10
  %12 = select i1 %11, i64 %9, i64 %7
  %13 = ashr i64 %0, %7
  %14 = icmp slt i64 %13, 0
  %15 = sub nsw i64 0, %13
  %16 = select i1 %14, i64 %15, i64 %13
  %17 = ashr i64 %1, %9
  %18 = icmp slt i64 %17, 0
  %19 = sub nsw i64 0, %17
  %20 = select i1 %18, i64 %19, i64 %17
  %21 = icmp eq i64 %16, %20
  br i1 %21, label %32, label %22

22:                                               ; preds = %6, %22
  %23 = phi i64 [ %30, %22 ], [ %20, %6 ]
  %24 = phi i64 [ %26, %22 ], [ %16, %6 ]
  %25 = icmp sgt i64 %24, %23
  %26 = select i1 %25, i64 %23, i64 %24
  %27 = select i1 %25, i64 %24, i64 %23
  %28 = sub nsw i64 %27, %26
  %29 = tail call i64 @llvm.cttz.i64(i64 %28, i1 true), !range !2
  %30 = ashr i64 %28, %29
  %31 = icmp eq i64 %26, %30
  br i1 %31, label %32, label %22

32:                                               ; preds = %22, %6
  %33 = phi i64 [ %16, %6 ], [ %26, %22 ]
  %34 = shl i64 %33, %12
  br label %35

35:                                               ; preds = %4, %2, %32
  %36 = phi i64 [ %34, %32 ], [ %1, %2 ], [ %0, %4 ]
  ret i64 %36
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.cttz.i64(i64, i1 immarg) #1

; Function Attrs: nounwind readnone ssp uwtable
define hidden i64 @av_rescale_rnd(i64, i64, i64, i32) local_unnamed_addr #0 {
  %5 = icmp slt i64 %2, 1
  %6 = icmp slt i64 %1, 0
  %7 = or i1 %6, %5
  br i1 %7, label %122, label %8

8:                                                ; preds = %4
  %9 = and i32 %3, -8193
  %10 = icmp ugt i32 %9, 5
  %11 = icmp eq i32 %9, 4
  %12 = or i1 %10, %11
  br i1 %12, label %122, label %13

13:                                               ; preds = %8
  %14 = and i32 %3, 8192
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %21, label %16

16:                                               ; preds = %13
  %17 = add i64 %0, -9223372036854775807
  %18 = icmp ult i64 %17, 2
  br i1 %18, label %122, label %19

19:                                               ; preds = %16
  %20 = add i32 %3, -8192
  br label %21

21:                                               ; preds = %13, %19
  %22 = phi i32 [ %20, %19 ], [ %3, %13 ]
  %23 = icmp slt i64 %0, 0
  br i1 %23, label %24, label %33

24:                                               ; preds = %21
  %25 = icmp sgt i64 %0, -9223372036854775807
  %26 = select i1 %25, i64 %0, i64 -9223372036854775807
  %27 = sub nsw i64 0, %26
  %28 = lshr i32 %22, 1
  %29 = and i32 %28, 1
  %30 = xor i32 %29, %22
  %31 = tail call i64 @av_rescale_rnd(i64 %27, i64 %1, i64 %2, i32 %30) #7
  %32 = sub i64 0, %31
  ret i64 %32

33:                                               ; preds = %21
  %34 = icmp eq i32 %22, 5
  br i1 %34, label %35, label %37

35:                                               ; preds = %33
  %36 = lshr i64 %2, 1
  br label %42

37:                                               ; preds = %33
  %38 = and i32 %22, 1
  %39 = icmp eq i32 %38, 0
  %40 = add nsw i64 %2, -1
  %41 = select i1 %39, i64 0, i64 %40
  br label %42

42:                                               ; preds = %37, %35
  %43 = phi i64 [ %36, %35 ], [ %41, %37 ]
  %44 = icmp slt i64 %1, 2147483648
  %45 = icmp slt i64 %2, 2147483648
  %46 = and i1 %44, %45
  br i1 %46, label %47, label %69

47:                                               ; preds = %42
  %48 = icmp slt i64 %0, 2147483648
  br i1 %48, label %49, label %53

49:                                               ; preds = %47
  %50 = mul nsw i64 %1, %0
  %51 = add nuw nsw i64 %43, %50
  %52 = sdiv i64 %51, %2
  br label %122

53:                                               ; preds = %47
  %54 = udiv i64 %0, %2
  %55 = urem i64 %0, %2
  %56 = mul nsw i64 %55, %1
  %57 = add nuw nsw i64 %56, %43
  %58 = sdiv i64 %57, %2
  %59 = icmp sgt i64 %54, 2147483646
  %60 = icmp ne i64 %1, 0
  %61 = and i1 %60, %59
  br i1 %61, label %62, label %66

62:                                               ; preds = %53
  %63 = sub nsw i64 9223372036854775807, %58
  %64 = sdiv i64 %63, %1
  %65 = icmp sgt i64 %54, %64
  br i1 %65, label %122, label %66

66:                                               ; preds = %62, %53
  %67 = mul nsw i64 %54, %1
  %68 = add nsw i64 %58, %67
  br label %122

69:                                               ; preds = %42
  %70 = and i64 %0, 4294967295
  %71 = lshr i64 %0, 32
  %72 = and i64 %1, 4294967295
  %73 = lshr i64 %1, 32
  %74 = mul nuw nsw i64 %73, %70
  %75 = mul nuw nsw i64 %72, %71
  %76 = add nuw i64 %74, %75
  %77 = shl i64 %76, 32
  %78 = mul nuw i64 %72, %70
  %79 = add i64 %77, %78
  %80 = mul nuw nsw i64 %73, %71
  %81 = lshr i64 %76, 32
  %82 = add nuw nsw i64 %81, %80
  %83 = icmp ult i64 %79, %77
  %84 = zext i1 %83 to i64
  %85 = add nuw nsw i64 %82, %84
  %86 = add i64 %43, %79
  %87 = icmp ult i64 %86, %43
  %88 = zext i1 %87 to i64
  %89 = add nuw nsw i64 %85, %88
  br label %90

90:                                               ; preds = %90, %69
  %91 = phi i64 [ 63, %69 ], [ %117, %90 ]
  %92 = phi i64 [ %76, %69 ], [ %116, %90 ]
  %93 = phi i64 [ %89, %69 ], [ %113, %90 ]
  %94 = lshr i64 %86, %91
  %95 = and i64 %94, 1
  %96 = shl i64 %93, 1
  %97 = or i64 %95, %96
  %98 = shl i64 %92, 1
  %99 = icmp ult i64 %97, %2
  %100 = select i1 %99, i64 0, i64 %2
  %101 = sub i64 %97, %100
  %102 = xor i1 %99, true
  %103 = zext i1 %102 to i64
  %104 = or i64 %98, %103
  %105 = add nsw i64 %91, -1
  %106 = lshr i64 %86, %105
  %107 = and i64 %106, 1
  %108 = shl i64 %101, 1
  %109 = or i64 %107, %108
  %110 = shl i64 %104, 1
  %111 = icmp ult i64 %109, %2
  %112 = select i1 %111, i64 0, i64 %2
  %113 = sub i64 %109, %112
  %114 = xor i1 %111, true
  %115 = zext i1 %114 to i64
  %116 = or i64 %110, %115
  %117 = add nsw i64 %91, -2
  %118 = icmp eq i64 %105, 0
  br i1 %118, label %119, label %90

119:                                              ; preds = %90
  %120 = icmp slt i64 %116, 0
  %121 = select i1 %120, i64 -9223372036854775808, i64 %116
  br label %122

122:                                              ; preds = %66, %62, %16, %4, %8, %119, %49
  %123 = phi i64 [ %52, %49 ], [ %121, %119 ], [ -9223372036854775808, %8 ], [ -9223372036854775808, %4 ], [ %0, %16 ], [ %68, %66 ], [ -9223372036854775808, %62 ]
  ret i64 %123
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i64 @av_rescale(i64, i64, i64) local_unnamed_addr #0 {
  %4 = tail call i64 @av_rescale_rnd(i64 %0, i64 %1, i64 %2, i32 5) #7
  ret i64 %4
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i64 @av_rescale_q_rnd(i64, i64, i64, i32) local_unnamed_addr #0 {
  %5 = shl i64 %1, 32
  %6 = ashr exact i64 %5, 32
  %7 = ashr i64 %2, 32
  %8 = mul nsw i64 %6, %7
  %9 = shl i64 %2, 32
  %10 = ashr exact i64 %9, 32
  %11 = ashr i64 %1, 32
  %12 = mul nsw i64 %10, %11
  %13 = tail call i64 @av_rescale_rnd(i64 %0, i64 %8, i64 %12, i32 %3) #7
  ret i64 %13
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i64 @av_rescale_q(i64, i64, i64) local_unnamed_addr #0 {
  %4 = shl i64 %1, 32
  %5 = ashr exact i64 %4, 32
  %6 = ashr i64 %2, 32
  %7 = mul nsw i64 %5, %6
  %8 = shl i64 %2, 32
  %9 = ashr exact i64 %8, 32
  %10 = ashr i64 %1, 32
  %11 = mul nsw i64 %9, %10
  %12 = tail call i64 @av_rescale_rnd(i64 %0, i64 %7, i64 %11, i32 5) #7
  ret i64 %12
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i32 @av_compare_ts(i64, i64, i64, i64) local_unnamed_addr #0 {
  %5 = shl i64 %1, 32
  %6 = ashr exact i64 %5, 32
  %7 = ashr i64 %3, 32
  %8 = mul nsw i64 %7, %6
  %9 = shl i64 %3, 32
  %10 = ashr exact i64 %9, 32
  %11 = ashr i64 %1, 32
  %12 = mul nsw i64 %10, %11
  %13 = icmp slt i64 %0, 0
  %14 = sub i64 0, %0
  %15 = select i1 %13, i64 %14, i64 %0
  %16 = icmp slt i64 %2, 0
  %17 = sub i64 0, %2
  %18 = select i1 %16, i64 %17, i64 %2
  %19 = or i64 %18, %15
  %20 = or i64 %19, %8
  %21 = or i64 %20, %12
  %22 = icmp ult i64 %21, 2147483648
  br i1 %22, label %23, label %31

23:                                               ; preds = %4
  %24 = mul nsw i64 %8, %0
  %25 = mul nsw i64 %12, %2
  %26 = icmp sgt i64 %24, %25
  %27 = zext i1 %26 to i32
  %28 = icmp slt i64 %24, %25
  %29 = zext i1 %28 to i32
  %30 = sub nsw i32 %27, %29
  br label %38

31:                                               ; preds = %4
  %32 = tail call i64 @av_rescale_rnd(i64 %0, i64 %8, i64 %12, i32 2) #7
  %33 = icmp slt i64 %32, %2
  br i1 %33, label %38, label %34

34:                                               ; preds = %31
  %35 = tail call i64 @av_rescale_rnd(i64 %2, i64 %12, i64 %8, i32 2) #7
  %36 = icmp slt i64 %35, %0
  %37 = zext i1 %36 to i32
  br label %38

38:                                               ; preds = %34, %31, %23
  %39 = phi i32 [ %30, %23 ], [ -1, %31 ], [ %37, %34 ]
  ret i32 %39
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @av_compare_mod(i64, i64, i64) local_unnamed_addr #2 {
  %4 = sub i64 %0, %1
  %5 = add i64 %2, -1
  %6 = and i64 %5, %4
  %7 = lshr i64 %2, 1
  %8 = icmp ugt i64 %6, %7
  %9 = select i1 %8, i64 %2, i64 0
  %10 = sub i64 %6, %9
  ret i64 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @av_rescale_delta(i64, i64, i64, i32, i64* nocapture, i64) local_unnamed_addr #3 {
  %7 = icmp eq i64 %1, -9223372036854775808
  br i1 %7, label %8, label %9

8:                                                ; preds = %6
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.2, i64 0, i64 0), i32 171) #8
  tail call void @abort() #9
  unreachable

9:                                                ; preds = %6
  %10 = icmp sgt i32 %3, -1
  br i1 %10, label %12, label %11

11:                                               ; preds = %9
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.2, i64 0, i64 0), i32 172) #8
  tail call void @abort() #9
  unreachable

12:                                               ; preds = %9
  %13 = load i64, i64* %4, align 8
  %14 = icmp ne i64 %13, -9223372036854775808
  %15 = icmp ne i32 %3, 0
  %16 = and i1 %15, %14
  %17 = shl i64 %0, 32
  %18 = ashr exact i64 %17, 32
  br i1 %16, label %26, label %19

19:                                               ; preds = %12
  %20 = ashr i64 %0, 32
  %21 = ashr i64 %5, 32
  %22 = mul nsw i64 %21, %18
  %23 = shl i64 %5, 32
  %24 = ashr exact i64 %23, 32
  %25 = mul nsw i64 %24, %20
  br label %34

26:                                               ; preds = %12
  %27 = ashr i64 %5, 32
  %28 = mul nsw i64 %27, %18
  %29 = shl i64 %5, 32
  %30 = ashr exact i64 %29, 32
  %31 = ashr i64 %0, 32
  %32 = mul nsw i64 %30, %31
  %33 = icmp sgt i64 %28, %32
  br i1 %33, label %47, label %34

34:                                               ; preds = %19, %26, %47, %64
  %35 = phi i64 [ %25, %19 ], [ %32, %26 ], [ %32, %47 ], [ %32, %64 ]
  %36 = phi i64 [ %22, %19 ], [ %28, %26 ], [ %28, %47 ], [ %28, %64 ]
  %37 = phi i64 [ %20, %19 ], [ %31, %26 ], [ %31, %47 ], [ %31, %64 ]
  %38 = ashr i64 %2, 32
  %39 = mul nsw i64 %38, %18
  %40 = shl i64 %2, 32
  %41 = ashr exact i64 %40, 32
  %42 = mul nsw i64 %41, %37
  %43 = tail call i64 @av_rescale_rnd(i64 %1, i64 %39, i64 %42, i32 5) #7
  %44 = sext i32 %3 to i64
  %45 = add nsw i64 %43, %44
  store i64 %45, i64* %4, align 8
  %46 = tail call i64 @av_rescale_rnd(i64 %1, i64 %36, i64 %35, i32 5) #7
  br label %78

47:                                               ; preds = %26
  %48 = shl nsw i64 %1, 1
  %49 = add nsw i64 %48, -1
  %50 = ashr i64 %2, 32
  %51 = mul nsw i64 %50, %18
  %52 = shl i64 %2, 32
  %53 = ashr exact i64 %52, 32
  %54 = mul nsw i64 %53, %31
  %55 = tail call i64 @av_rescale_rnd(i64 %49, i64 %51, i64 %54, i32 2) #7
  %56 = ashr i64 %55, 1
  %57 = or i64 %48, 1
  %58 = tail call i64 @av_rescale_rnd(i64 %57, i64 %51, i64 %54, i32 3) #7
  %59 = add nsw i64 %58, 1
  %60 = ashr i64 %59, 1
  %61 = and i64 %55, -2
  %62 = sub nsw i64 %61, %60
  %63 = icmp slt i64 %13, %62
  br i1 %63, label %34, label %64

64:                                               ; preds = %47
  %65 = and i64 %59, -2
  %66 = sub nsw i64 %65, %56
  %67 = icmp sgt i64 %13, %66
  br i1 %67, label %34, label %68

68:                                               ; preds = %64
  %69 = icmp slt i64 %13, %56
  %70 = icmp sgt i64 %13, %60
  %71 = select i1 %70, i64 %60, i64 %13
  %72 = select i1 %69, i64 %56, i64 %71
  %73 = sext i32 %3 to i64
  %74 = add nsw i64 %72, %73
  store i64 %74, i64* %4, align 8
  %75 = mul nsw i64 %27, %53
  %76 = mul nsw i64 %30, %50
  %77 = tail call i64 @av_rescale_rnd(i64 %72, i64 %75, i64 %76, i32 5) #7
  br label %78

78:                                               ; preds = %68, %34
  %79 = phi i64 [ %46, %34 ], [ %77, %68 ]
  ret i64 %79
}

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nounwind readnone ssp uwtable
define hidden i64 @av_add_stable(i64, i64, i64, i64) local_unnamed_addr #0 {
  %5 = icmp eq i64 %3, 1
  br i1 %5, label %10, label %6

6:                                                ; preds = %4
  %7 = and i64 %3, 4294967295
  %8 = or i64 %7, 4294967296
  %9 = tail call i64 @av_mul_q(i64 %2, i64 %8) #7
  br label %10

10:                                               ; preds = %4, %6
  %11 = phi i64 [ %9, %6 ], [ %2, %4 ]
  %12 = shl i64 %11, 32
  %13 = ashr exact i64 %12, 32
  %14 = ashr i64 %0, 32
  %15 = mul nsw i64 %13, %14
  %16 = ashr i64 %11, 32
  %17 = shl i64 %0, 32
  %18 = ashr exact i64 %17, 32
  %19 = mul nsw i64 %16, %18
  %20 = srem i64 %15, %19
  %21 = sdiv i64 %15, %19
  %22 = icmp ne i64 %20, 0
  %23 = sub nsw i64 9223372036854775807, %21
  %24 = icmp slt i64 %23, %1
  %25 = or i1 %22, %24
  br i1 %25, label %28, label %26

26:                                               ; preds = %10
  %27 = add nsw i64 %21, %1
  br label %47

28:                                               ; preds = %10
  %29 = icmp slt i64 %15, %19
  br i1 %29, label %47, label %30

30:                                               ; preds = %28
  %31 = tail call i64 @av_rescale_rnd(i64 %1, i64 %19, i64 %15, i32 5) #7
  %32 = tail call i64 @av_rescale_rnd(i64 %31, i64 %15, i64 %19, i32 5) #7
  %33 = add i64 %31, -9223372036854775807
  %34 = icmp ult i64 %33, 2
  %35 = icmp eq i64 %32, -9223372036854775808
  %36 = or i1 %34, %35
  br i1 %36, label %47, label %37

37:                                               ; preds = %30
  %38 = add nsw i64 %31, 1
  %39 = tail call i64 @av_rescale_rnd(i64 %38, i64 %15, i64 %19, i32 5) #7
  %40 = sub nsw i64 %1, %32
  %41 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %39, i64 %40) #8
  %42 = extractvalue { i64, i1 } %41, 1
  %43 = extractvalue { i64, i1 } %41, 0
  %44 = icmp slt i64 %43, 0
  %45 = select i1 %44, i64 9223372036854775807, i64 -9223372036854775808
  %46 = select i1 %42, i64 %45, i64 %43
  br label %47

47:                                               ; preds = %37, %30, %28, %26
  %48 = phi i64 [ %27, %26 ], [ %1, %28 ], [ %46, %37 ], [ %1, %30 ]
  ret i64 %48
}

; Function Attrs: nounwind readnone
declare i64 @av_mul_q(i64, i64) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #1

attributes #0 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i64 0, i64 65}
