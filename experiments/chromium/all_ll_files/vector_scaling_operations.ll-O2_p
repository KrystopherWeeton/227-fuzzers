; ModuleID = '../../third_party/webrtc/common_audio/signal_processing/vector_scaling_operations.c'
source_filename = "../../third_party/webrtc/common_audio/signal_processing/vector_scaling_operations.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @WebRtcSpl_VectorBitShiftW16(i16* nocapture, i64, i16* nocapture readonly, i16 signext) local_unnamed_addr #0 {
  %5 = sext i16 %3 to i32
  %6 = icmp sgt i16 %3, 0
  %7 = icmp eq i64 %1, 0
  br i1 %6, label %121, label %8

8:                                                ; preds = %4
  br i1 %7, label %293, label %9

9:                                                ; preds = %8
  %10 = sub nsw i32 0, %5
  %11 = icmp ult i64 %1, 16
  br i1 %11, label %12, label %38

12:                                               ; preds = %119, %38, %9
  %13 = phi i64 [ %1, %38 ], [ %1, %9 ], [ %46, %119 ]
  %14 = phi i16* [ %0, %38 ], [ %0, %9 ], [ %47, %119 ]
  %15 = phi i16* [ %2, %38 ], [ %2, %9 ], [ %48, %119 ]
  %16 = add i64 %13, -1
  %17 = and i64 %13, 3
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %33, label %19

19:                                               ; preds = %12, %19
  %20 = phi i64 [ %30, %19 ], [ %13, %12 ]
  %21 = phi i16* [ %29, %19 ], [ %14, %12 ]
  %22 = phi i16* [ %24, %19 ], [ %15, %12 ]
  %23 = phi i64 [ %31, %19 ], [ %17, %12 ]
  %24 = getelementptr inbounds i16, i16* %22, i64 1
  %25 = load i16, i16* %22, align 2
  %26 = sext i16 %25 to i32
  %27 = shl i32 %26, %10
  %28 = trunc i32 %27 to i16
  %29 = getelementptr inbounds i16, i16* %21, i64 1
  store i16 %28, i16* %21, align 2
  %30 = add i64 %20, -1
  %31 = add i64 %23, -1
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %19, !llvm.loop !2

33:                                               ; preds = %19, %12
  %34 = phi i64 [ %13, %12 ], [ %30, %19 ]
  %35 = phi i16* [ %14, %12 ], [ %29, %19 ]
  %36 = phi i16* [ %15, %12 ], [ %24, %19 ]
  %37 = icmp ult i64 %16, 3
  br i1 %37, label %293, label %263

38:                                               ; preds = %9
  %39 = getelementptr i16, i16* %0, i64 %1
  %40 = getelementptr i16, i16* %2, i64 %1
  %41 = icmp ugt i16* %40, %0
  %42 = icmp ugt i16* %39, %2
  %43 = and i1 %41, %42
  br i1 %43, label %12, label %44

44:                                               ; preds = %38
  %45 = and i64 %1, -16
  %46 = sub i64 %1, %45
  %47 = getelementptr i16, i16* %0, i64 %45
  %48 = getelementptr i16, i16* %2, i64 %45
  %49 = insertelement <8 x i32> undef, i32 %10, i32 0
  %50 = shufflevector <8 x i32> %49, <8 x i32> undef, <8 x i32> zeroinitializer
  %51 = insertelement <8 x i32> undef, i32 %10, i32 0
  %52 = shufflevector <8 x i32> %51, <8 x i32> undef, <8 x i32> zeroinitializer
  %53 = add i64 %45, -16
  %54 = lshr exact i64 %53, 4
  %55 = add nuw nsw i64 %54, 1
  %56 = and i64 %55, 1
  %57 = icmp eq i64 %53, 0
  br i1 %57, label %99, label %58

58:                                               ; preds = %44
  %59 = sub nuw nsw i64 %55, %56
  br label %60

60:                                               ; preds = %60, %58
  %61 = phi i64 [ 0, %58 ], [ %96, %60 ]
  %62 = phi i64 [ %59, %58 ], [ %97, %60 ]
  %63 = getelementptr i16, i16* %0, i64 %61
  %64 = getelementptr i16, i16* %2, i64 %61
  %65 = bitcast i16* %64 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2, !alias.scope !4
  %67 = getelementptr i16, i16* %64, i64 8
  %68 = bitcast i16* %67 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 2, !alias.scope !4
  %70 = sext <8 x i16> %66 to <8 x i32>
  %71 = sext <8 x i16> %69 to <8 x i32>
  %72 = shl <8 x i32> %70, %50
  %73 = shl <8 x i32> %71, %52
  %74 = trunc <8 x i32> %72 to <8 x i16>
  %75 = trunc <8 x i32> %73 to <8 x i16>
  %76 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %76, align 2, !alias.scope !7, !noalias !4
  %77 = getelementptr i16, i16* %63, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 2, !alias.scope !7, !noalias !4
  %79 = or i64 %61, 16
  %80 = getelementptr i16, i16* %0, i64 %79
  %81 = getelementptr i16, i16* %2, i64 %79
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !4
  %84 = getelementptr i16, i16* %81, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !4
  %87 = sext <8 x i16> %83 to <8 x i32>
  %88 = sext <8 x i16> %86 to <8 x i32>
  %89 = shl <8 x i32> %87, %50
  %90 = shl <8 x i32> %88, %52
  %91 = trunc <8 x i32> %89 to <8 x i16>
  %92 = trunc <8 x i32> %90 to <8 x i16>
  %93 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %93, align 2, !alias.scope !7, !noalias !4
  %94 = getelementptr i16, i16* %80, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %95, align 2, !alias.scope !7, !noalias !4
  %96 = add i64 %61, 32
  %97 = add i64 %62, -2
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %60, !llvm.loop !9

99:                                               ; preds = %60, %44
  %100 = phi i64 [ 0, %44 ], [ %96, %60 ]
  %101 = icmp eq i64 %56, 0
  br i1 %101, label %119, label %102

102:                                              ; preds = %99
  %103 = getelementptr i16, i16* %0, i64 %100
  %104 = getelementptr i16, i16* %2, i64 %100
  %105 = bitcast i16* %104 to <8 x i16>*
  %106 = load <8 x i16>, <8 x i16>* %105, align 2, !alias.scope !4
  %107 = getelementptr i16, i16* %104, i64 8
  %108 = bitcast i16* %107 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 2, !alias.scope !4
  %110 = sext <8 x i16> %106 to <8 x i32>
  %111 = sext <8 x i16> %109 to <8 x i32>
  %112 = shl <8 x i32> %110, %50
  %113 = shl <8 x i32> %111, %52
  %114 = trunc <8 x i32> %112 to <8 x i16>
  %115 = trunc <8 x i32> %113 to <8 x i16>
  %116 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %116, align 2, !alias.scope !7, !noalias !4
  %117 = getelementptr i16, i16* %103, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %118, align 2, !alias.scope !7, !noalias !4
  br label %119

119:                                              ; preds = %99, %102
  %120 = icmp eq i64 %45, %1
  br i1 %120, label %293, label %12

121:                                              ; preds = %4
  br i1 %7, label %293, label %122

122:                                              ; preds = %121
  %123 = icmp ult i64 %1, 16
  br i1 %123, label %207, label %124

124:                                              ; preds = %122
  %125 = getelementptr i16, i16* %0, i64 %1
  %126 = getelementptr i16, i16* %2, i64 %1
  %127 = icmp ugt i16* %126, %0
  %128 = icmp ugt i16* %125, %2
  %129 = and i1 %127, %128
  br i1 %129, label %207, label %130

130:                                              ; preds = %124
  %131 = and i64 %1, -16
  %132 = sub i64 %1, %131
  %133 = getelementptr i16, i16* %0, i64 %131
  %134 = getelementptr i16, i16* %2, i64 %131
  %135 = insertelement <8 x i32> undef, i32 %5, i32 0
  %136 = shufflevector <8 x i32> %135, <8 x i32> undef, <8 x i32> zeroinitializer
  %137 = insertelement <8 x i32> undef, i32 %5, i32 0
  %138 = shufflevector <8 x i32> %137, <8 x i32> undef, <8 x i32> zeroinitializer
  %139 = add i64 %131, -16
  %140 = lshr exact i64 %139, 4
  %141 = add nuw nsw i64 %140, 1
  %142 = and i64 %141, 1
  %143 = icmp eq i64 %139, 0
  br i1 %143, label %185, label %144

144:                                              ; preds = %130
  %145 = sub nuw nsw i64 %141, %142
  br label %146

146:                                              ; preds = %146, %144
  %147 = phi i64 [ 0, %144 ], [ %182, %146 ]
  %148 = phi i64 [ %145, %144 ], [ %183, %146 ]
  %149 = getelementptr i16, i16* %0, i64 %147
  %150 = getelementptr i16, i16* %2, i64 %147
  %151 = bitcast i16* %150 to <8 x i16>*
  %152 = load <8 x i16>, <8 x i16>* %151, align 2, !alias.scope !11
  %153 = getelementptr i16, i16* %150, i64 8
  %154 = bitcast i16* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 2, !alias.scope !11
  %156 = sext <8 x i16> %152 to <8 x i32>
  %157 = sext <8 x i16> %155 to <8 x i32>
  %158 = ashr <8 x i32> %156, %136
  %159 = ashr <8 x i32> %157, %138
  %160 = trunc <8 x i32> %158 to <8 x i16>
  %161 = trunc <8 x i32> %159 to <8 x i16>
  %162 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> %160, <8 x i16>* %162, align 2, !alias.scope !14, !noalias !11
  %163 = getelementptr i16, i16* %149, i64 8
  %164 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %164, align 2, !alias.scope !14, !noalias !11
  %165 = or i64 %147, 16
  %166 = getelementptr i16, i16* %0, i64 %165
  %167 = getelementptr i16, i16* %2, i64 %165
  %168 = bitcast i16* %167 to <8 x i16>*
  %169 = load <8 x i16>, <8 x i16>* %168, align 2, !alias.scope !11
  %170 = getelementptr i16, i16* %167, i64 8
  %171 = bitcast i16* %170 to <8 x i16>*
  %172 = load <8 x i16>, <8 x i16>* %171, align 2, !alias.scope !11
  %173 = sext <8 x i16> %169 to <8 x i32>
  %174 = sext <8 x i16> %172 to <8 x i32>
  %175 = ashr <8 x i32> %173, %136
  %176 = ashr <8 x i32> %174, %138
  %177 = trunc <8 x i32> %175 to <8 x i16>
  %178 = trunc <8 x i32> %176 to <8 x i16>
  %179 = bitcast i16* %166 to <8 x i16>*
  store <8 x i16> %177, <8 x i16>* %179, align 2, !alias.scope !14, !noalias !11
  %180 = getelementptr i16, i16* %166, i64 8
  %181 = bitcast i16* %180 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %181, align 2, !alias.scope !14, !noalias !11
  %182 = add i64 %147, 32
  %183 = add i64 %148, -2
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %185, label %146, !llvm.loop !16

185:                                              ; preds = %146, %130
  %186 = phi i64 [ 0, %130 ], [ %182, %146 ]
  %187 = icmp eq i64 %142, 0
  br i1 %187, label %205, label %188

188:                                              ; preds = %185
  %189 = getelementptr i16, i16* %0, i64 %186
  %190 = getelementptr i16, i16* %2, i64 %186
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 2, !alias.scope !11
  %193 = getelementptr i16, i16* %190, i64 8
  %194 = bitcast i16* %193 to <8 x i16>*
  %195 = load <8 x i16>, <8 x i16>* %194, align 2, !alias.scope !11
  %196 = sext <8 x i16> %192 to <8 x i32>
  %197 = sext <8 x i16> %195 to <8 x i32>
  %198 = ashr <8 x i32> %196, %136
  %199 = ashr <8 x i32> %197, %138
  %200 = trunc <8 x i32> %198 to <8 x i16>
  %201 = trunc <8 x i32> %199 to <8 x i16>
  %202 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %200, <8 x i16>* %202, align 2, !alias.scope !14, !noalias !11
  %203 = getelementptr i16, i16* %189, i64 8
  %204 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %201, <8 x i16>* %204, align 2, !alias.scope !14, !noalias !11
  br label %205

205:                                              ; preds = %185, %188
  %206 = icmp eq i64 %131, %1
  br i1 %206, label %293, label %207

207:                                              ; preds = %205, %124, %122
  %208 = phi i64 [ %1, %124 ], [ %1, %122 ], [ %132, %205 ]
  %209 = phi i16* [ %0, %124 ], [ %0, %122 ], [ %133, %205 ]
  %210 = phi i16* [ %2, %124 ], [ %2, %122 ], [ %134, %205 ]
  %211 = add i64 %208, -1
  %212 = and i64 %208, 3
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %228, label %214

214:                                              ; preds = %207, %214
  %215 = phi i64 [ %225, %214 ], [ %208, %207 ]
  %216 = phi i16* [ %224, %214 ], [ %209, %207 ]
  %217 = phi i16* [ %219, %214 ], [ %210, %207 ]
  %218 = phi i64 [ %226, %214 ], [ %212, %207 ]
  %219 = getelementptr inbounds i16, i16* %217, i64 1
  %220 = load i16, i16* %217, align 2
  %221 = sext i16 %220 to i32
  %222 = ashr i32 %221, %5
  %223 = trunc i32 %222 to i16
  %224 = getelementptr inbounds i16, i16* %216, i64 1
  store i16 %223, i16* %216, align 2
  %225 = add i64 %215, -1
  %226 = add i64 %218, -1
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %228, label %214, !llvm.loop !17

228:                                              ; preds = %214, %207
  %229 = phi i64 [ %208, %207 ], [ %225, %214 ]
  %230 = phi i16* [ %209, %207 ], [ %224, %214 ]
  %231 = phi i16* [ %210, %207 ], [ %219, %214 ]
  %232 = icmp ult i64 %211, 3
  br i1 %232, label %293, label %233

233:                                              ; preds = %228, %233
  %234 = phi i64 [ %261, %233 ], [ %229, %228 ]
  %235 = phi i16* [ %260, %233 ], [ %230, %228 ]
  %236 = phi i16* [ %255, %233 ], [ %231, %228 ]
  %237 = getelementptr inbounds i16, i16* %236, i64 1
  %238 = load i16, i16* %236, align 2
  %239 = sext i16 %238 to i32
  %240 = ashr i32 %239, %5
  %241 = trunc i32 %240 to i16
  %242 = getelementptr inbounds i16, i16* %235, i64 1
  store i16 %241, i16* %235, align 2
  %243 = getelementptr inbounds i16, i16* %236, i64 2
  %244 = load i16, i16* %237, align 2
  %245 = sext i16 %244 to i32
  %246 = ashr i32 %245, %5
  %247 = trunc i32 %246 to i16
  %248 = getelementptr inbounds i16, i16* %235, i64 2
  store i16 %247, i16* %242, align 2
  %249 = getelementptr inbounds i16, i16* %236, i64 3
  %250 = load i16, i16* %243, align 2
  %251 = sext i16 %250 to i32
  %252 = ashr i32 %251, %5
  %253 = trunc i32 %252 to i16
  %254 = getelementptr inbounds i16, i16* %235, i64 3
  store i16 %253, i16* %248, align 2
  %255 = getelementptr inbounds i16, i16* %236, i64 4
  %256 = load i16, i16* %249, align 2
  %257 = sext i16 %256 to i32
  %258 = ashr i32 %257, %5
  %259 = trunc i32 %258 to i16
  %260 = getelementptr inbounds i16, i16* %235, i64 4
  store i16 %259, i16* %254, align 2
  %261 = add i64 %234, -4
  %262 = icmp eq i64 %261, 0
  br i1 %262, label %293, label %233, !llvm.loop !18

263:                                              ; preds = %33, %263
  %264 = phi i64 [ %291, %263 ], [ %34, %33 ]
  %265 = phi i16* [ %290, %263 ], [ %35, %33 ]
  %266 = phi i16* [ %285, %263 ], [ %36, %33 ]
  %267 = getelementptr inbounds i16, i16* %266, i64 1
  %268 = load i16, i16* %266, align 2
  %269 = sext i16 %268 to i32
  %270 = shl i32 %269, %10
  %271 = trunc i32 %270 to i16
  %272 = getelementptr inbounds i16, i16* %265, i64 1
  store i16 %271, i16* %265, align 2
  %273 = getelementptr inbounds i16, i16* %266, i64 2
  %274 = load i16, i16* %267, align 2
  %275 = sext i16 %274 to i32
  %276 = shl i32 %275, %10
  %277 = trunc i32 %276 to i16
  %278 = getelementptr inbounds i16, i16* %265, i64 2
  store i16 %277, i16* %272, align 2
  %279 = getelementptr inbounds i16, i16* %266, i64 3
  %280 = load i16, i16* %273, align 2
  %281 = sext i16 %280 to i32
  %282 = shl i32 %281, %10
  %283 = trunc i32 %282 to i16
  %284 = getelementptr inbounds i16, i16* %265, i64 3
  store i16 %283, i16* %278, align 2
  %285 = getelementptr inbounds i16, i16* %266, i64 4
  %286 = load i16, i16* %279, align 2
  %287 = sext i16 %286 to i32
  %288 = shl i32 %287, %10
  %289 = trunc i32 %288 to i16
  %290 = getelementptr inbounds i16, i16* %265, i64 4
  store i16 %289, i16* %284, align 2
  %291 = add i64 %264, -4
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %293, label %263, !llvm.loop !19

293:                                              ; preds = %33, %263, %228, %233, %119, %205, %8, %121
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @WebRtcSpl_VectorBitShiftW32(i32* nocapture, i64, i32* nocapture readonly, i16 signext) local_unnamed_addr #0 {
  %5 = sext i16 %3 to i32
  %6 = icmp sgt i16 %3, 0
  %7 = icmp eq i64 %1, 0
  br i1 %6, label %107, label %8

8:                                                ; preds = %4
  br i1 %7, label %249, label %9

9:                                                ; preds = %8
  %10 = sub nsw i32 0, %5
  %11 = icmp ult i64 %1, 8
  br i1 %11, label %12, label %36

12:                                               ; preds = %105, %36, %9
  %13 = phi i64 [ %1, %36 ], [ %1, %9 ], [ %44, %105 ]
  %14 = phi i32* [ %0, %36 ], [ %0, %9 ], [ %45, %105 ]
  %15 = phi i32* [ %2, %36 ], [ %2, %9 ], [ %46, %105 ]
  %16 = add i64 %13, -1
  %17 = and i64 %13, 3
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %31, label %19

19:                                               ; preds = %12, %19
  %20 = phi i64 [ %28, %19 ], [ %13, %12 ]
  %21 = phi i32* [ %27, %19 ], [ %14, %12 ]
  %22 = phi i32* [ %24, %19 ], [ %15, %12 ]
  %23 = phi i64 [ %29, %19 ], [ %17, %12 ]
  %24 = getelementptr inbounds i32, i32* %22, i64 1
  %25 = load i32, i32* %22, align 4
  %26 = shl i32 %25, %10
  %27 = getelementptr inbounds i32, i32* %21, i64 1
  store i32 %26, i32* %21, align 4
  %28 = add i64 %20, -1
  %29 = add i64 %23, -1
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %31, label %19, !llvm.loop !20

31:                                               ; preds = %19, %12
  %32 = phi i64 [ %13, %12 ], [ %28, %19 ]
  %33 = phi i32* [ %14, %12 ], [ %27, %19 ]
  %34 = phi i32* [ %15, %12 ], [ %24, %19 ]
  %35 = icmp ult i64 %16, 3
  br i1 %35, label %249, label %227

36:                                               ; preds = %9
  %37 = getelementptr i32, i32* %0, i64 %1
  %38 = getelementptr i32, i32* %2, i64 %1
  %39 = icmp ugt i32* %38, %0
  %40 = icmp ugt i32* %37, %2
  %41 = and i1 %39, %40
  br i1 %41, label %12, label %42

42:                                               ; preds = %36
  %43 = and i64 %1, -8
  %44 = sub i64 %1, %43
  %45 = getelementptr i32, i32* %0, i64 %43
  %46 = getelementptr i32, i32* %2, i64 %43
  %47 = insertelement <4 x i32> undef, i32 %10, i32 0
  %48 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> zeroinitializer
  %49 = insertelement <4 x i32> undef, i32 %10, i32 0
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> zeroinitializer
  %51 = add i64 %43, -8
  %52 = lshr exact i64 %51, 3
  %53 = add nuw nsw i64 %52, 1
  %54 = and i64 %53, 1
  %55 = icmp eq i64 %51, 0
  br i1 %55, label %89, label %56

56:                                               ; preds = %42
  %57 = sub nuw nsw i64 %53, %54
  br label %58

58:                                               ; preds = %58, %56
  %59 = phi i64 [ 0, %56 ], [ %86, %58 ]
  %60 = phi i64 [ %57, %56 ], [ %87, %58 ]
  %61 = getelementptr i32, i32* %0, i64 %59
  %62 = getelementptr i32, i32* %2, i64 %59
  %63 = bitcast i32* %62 to <4 x i32>*
  %64 = load <4 x i32>, <4 x i32>* %63, align 4, !alias.scope !21
  %65 = getelementptr i32, i32* %62, i64 4
  %66 = bitcast i32* %65 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 4, !alias.scope !21
  %68 = shl <4 x i32> %64, %48
  %69 = shl <4 x i32> %67, %50
  %70 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> %68, <4 x i32>* %70, align 4, !alias.scope !24, !noalias !21
  %71 = getelementptr i32, i32* %61, i64 4
  %72 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %72, align 4, !alias.scope !24, !noalias !21
  %73 = or i64 %59, 8
  %74 = getelementptr i32, i32* %0, i64 %73
  %75 = getelementptr i32, i32* %2, i64 %73
  %76 = bitcast i32* %75 to <4 x i32>*
  %77 = load <4 x i32>, <4 x i32>* %76, align 4, !alias.scope !21
  %78 = getelementptr i32, i32* %75, i64 4
  %79 = bitcast i32* %78 to <4 x i32>*
  %80 = load <4 x i32>, <4 x i32>* %79, align 4, !alias.scope !21
  %81 = shl <4 x i32> %77, %48
  %82 = shl <4 x i32> %80, %50
  %83 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %81, <4 x i32>* %83, align 4, !alias.scope !24, !noalias !21
  %84 = getelementptr i32, i32* %74, i64 4
  %85 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %85, align 4, !alias.scope !24, !noalias !21
  %86 = add i64 %59, 16
  %87 = add i64 %60, -2
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %58, !llvm.loop !26

89:                                               ; preds = %58, %42
  %90 = phi i64 [ 0, %42 ], [ %86, %58 ]
  %91 = icmp eq i64 %54, 0
  br i1 %91, label %105, label %92

92:                                               ; preds = %89
  %93 = getelementptr i32, i32* %0, i64 %90
  %94 = getelementptr i32, i32* %2, i64 %90
  %95 = bitcast i32* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 4, !alias.scope !21
  %97 = getelementptr i32, i32* %94, i64 4
  %98 = bitcast i32* %97 to <4 x i32>*
  %99 = load <4 x i32>, <4 x i32>* %98, align 4, !alias.scope !21
  %100 = shl <4 x i32> %96, %48
  %101 = shl <4 x i32> %99, %50
  %102 = bitcast i32* %93 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %102, align 4, !alias.scope !24, !noalias !21
  %103 = getelementptr i32, i32* %93, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %104, align 4, !alias.scope !24, !noalias !21
  br label %105

105:                                              ; preds = %89, %92
  %106 = icmp eq i64 %43, %1
  br i1 %106, label %249, label %12

107:                                              ; preds = %4
  br i1 %7, label %249, label %108

108:                                              ; preds = %107
  %109 = icmp ult i64 %1, 8
  br i1 %109, label %181, label %110

110:                                              ; preds = %108
  %111 = getelementptr i32, i32* %0, i64 %1
  %112 = getelementptr i32, i32* %2, i64 %1
  %113 = icmp ugt i32* %112, %0
  %114 = icmp ugt i32* %111, %2
  %115 = and i1 %113, %114
  br i1 %115, label %181, label %116

116:                                              ; preds = %110
  %117 = and i64 %1, -8
  %118 = sub i64 %1, %117
  %119 = getelementptr i32, i32* %0, i64 %117
  %120 = getelementptr i32, i32* %2, i64 %117
  %121 = insertelement <4 x i32> undef, i32 %5, i32 0
  %122 = shufflevector <4 x i32> %121, <4 x i32> undef, <4 x i32> zeroinitializer
  %123 = insertelement <4 x i32> undef, i32 %5, i32 0
  %124 = shufflevector <4 x i32> %123, <4 x i32> undef, <4 x i32> zeroinitializer
  %125 = add i64 %117, -8
  %126 = lshr exact i64 %125, 3
  %127 = add nuw nsw i64 %126, 1
  %128 = and i64 %127, 1
  %129 = icmp eq i64 %125, 0
  br i1 %129, label %163, label %130

130:                                              ; preds = %116
  %131 = sub nuw nsw i64 %127, %128
  br label %132

132:                                              ; preds = %132, %130
  %133 = phi i64 [ 0, %130 ], [ %160, %132 ]
  %134 = phi i64 [ %131, %130 ], [ %161, %132 ]
  %135 = getelementptr i32, i32* %0, i64 %133
  %136 = getelementptr i32, i32* %2, i64 %133
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 4, !alias.scope !27
  %139 = getelementptr i32, i32* %136, i64 4
  %140 = bitcast i32* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 4, !alias.scope !27
  %142 = ashr <4 x i32> %138, %122
  %143 = ashr <4 x i32> %141, %124
  %144 = bitcast i32* %135 to <4 x i32>*
  store <4 x i32> %142, <4 x i32>* %144, align 4, !alias.scope !30, !noalias !27
  %145 = getelementptr i32, i32* %135, i64 4
  %146 = bitcast i32* %145 to <4 x i32>*
  store <4 x i32> %143, <4 x i32>* %146, align 4, !alias.scope !30, !noalias !27
  %147 = or i64 %133, 8
  %148 = getelementptr i32, i32* %0, i64 %147
  %149 = getelementptr i32, i32* %2, i64 %147
  %150 = bitcast i32* %149 to <4 x i32>*
  %151 = load <4 x i32>, <4 x i32>* %150, align 4, !alias.scope !27
  %152 = getelementptr i32, i32* %149, i64 4
  %153 = bitcast i32* %152 to <4 x i32>*
  %154 = load <4 x i32>, <4 x i32>* %153, align 4, !alias.scope !27
  %155 = ashr <4 x i32> %151, %122
  %156 = ashr <4 x i32> %154, %124
  %157 = bitcast i32* %148 to <4 x i32>*
  store <4 x i32> %155, <4 x i32>* %157, align 4, !alias.scope !30, !noalias !27
  %158 = getelementptr i32, i32* %148, i64 4
  %159 = bitcast i32* %158 to <4 x i32>*
  store <4 x i32> %156, <4 x i32>* %159, align 4, !alias.scope !30, !noalias !27
  %160 = add i64 %133, 16
  %161 = add i64 %134, -2
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %163, label %132, !llvm.loop !32

163:                                              ; preds = %132, %116
  %164 = phi i64 [ 0, %116 ], [ %160, %132 ]
  %165 = icmp eq i64 %128, 0
  br i1 %165, label %179, label %166

166:                                              ; preds = %163
  %167 = getelementptr i32, i32* %0, i64 %164
  %168 = getelementptr i32, i32* %2, i64 %164
  %169 = bitcast i32* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4, !alias.scope !27
  %171 = getelementptr i32, i32* %168, i64 4
  %172 = bitcast i32* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 4, !alias.scope !27
  %174 = ashr <4 x i32> %170, %122
  %175 = ashr <4 x i32> %173, %124
  %176 = bitcast i32* %167 to <4 x i32>*
  store <4 x i32> %174, <4 x i32>* %176, align 4, !alias.scope !30, !noalias !27
  %177 = getelementptr i32, i32* %167, i64 4
  %178 = bitcast i32* %177 to <4 x i32>*
  store <4 x i32> %175, <4 x i32>* %178, align 4, !alias.scope !30, !noalias !27
  br label %179

179:                                              ; preds = %163, %166
  %180 = icmp eq i64 %117, %1
  br i1 %180, label %249, label %181

181:                                              ; preds = %179, %110, %108
  %182 = phi i64 [ %1, %110 ], [ %1, %108 ], [ %118, %179 ]
  %183 = phi i32* [ %0, %110 ], [ %0, %108 ], [ %119, %179 ]
  %184 = phi i32* [ %2, %110 ], [ %2, %108 ], [ %120, %179 ]
  %185 = add i64 %182, -1
  %186 = and i64 %182, 3
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %200, label %188

188:                                              ; preds = %181, %188
  %189 = phi i64 [ %197, %188 ], [ %182, %181 ]
  %190 = phi i32* [ %196, %188 ], [ %183, %181 ]
  %191 = phi i32* [ %193, %188 ], [ %184, %181 ]
  %192 = phi i64 [ %198, %188 ], [ %186, %181 ]
  %193 = getelementptr inbounds i32, i32* %191, i64 1
  %194 = load i32, i32* %191, align 4
  %195 = ashr i32 %194, %5
  %196 = getelementptr inbounds i32, i32* %190, i64 1
  store i32 %195, i32* %190, align 4
  %197 = add i64 %189, -1
  %198 = add i64 %192, -1
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %200, label %188, !llvm.loop !33

200:                                              ; preds = %188, %181
  %201 = phi i64 [ %182, %181 ], [ %197, %188 ]
  %202 = phi i32* [ %183, %181 ], [ %196, %188 ]
  %203 = phi i32* [ %184, %181 ], [ %193, %188 ]
  %204 = icmp ult i64 %185, 3
  br i1 %204, label %249, label %205

205:                                              ; preds = %200, %205
  %206 = phi i64 [ %225, %205 ], [ %201, %200 ]
  %207 = phi i32* [ %224, %205 ], [ %202, %200 ]
  %208 = phi i32* [ %221, %205 ], [ %203, %200 ]
  %209 = getelementptr inbounds i32, i32* %208, i64 1
  %210 = load i32, i32* %208, align 4
  %211 = ashr i32 %210, %5
  %212 = getelementptr inbounds i32, i32* %207, i64 1
  store i32 %211, i32* %207, align 4
  %213 = getelementptr inbounds i32, i32* %208, i64 2
  %214 = load i32, i32* %209, align 4
  %215 = ashr i32 %214, %5
  %216 = getelementptr inbounds i32, i32* %207, i64 2
  store i32 %215, i32* %212, align 4
  %217 = getelementptr inbounds i32, i32* %208, i64 3
  %218 = load i32, i32* %213, align 4
  %219 = ashr i32 %218, %5
  %220 = getelementptr inbounds i32, i32* %207, i64 3
  store i32 %219, i32* %216, align 4
  %221 = getelementptr inbounds i32, i32* %208, i64 4
  %222 = load i32, i32* %217, align 4
  %223 = ashr i32 %222, %5
  %224 = getelementptr inbounds i32, i32* %207, i64 4
  store i32 %223, i32* %220, align 4
  %225 = add i64 %206, -4
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %249, label %205, !llvm.loop !34

227:                                              ; preds = %31, %227
  %228 = phi i64 [ %247, %227 ], [ %32, %31 ]
  %229 = phi i32* [ %246, %227 ], [ %33, %31 ]
  %230 = phi i32* [ %243, %227 ], [ %34, %31 ]
  %231 = getelementptr inbounds i32, i32* %230, i64 1
  %232 = load i32, i32* %230, align 4
  %233 = shl i32 %232, %10
  %234 = getelementptr inbounds i32, i32* %229, i64 1
  store i32 %233, i32* %229, align 4
  %235 = getelementptr inbounds i32, i32* %230, i64 2
  %236 = load i32, i32* %231, align 4
  %237 = shl i32 %236, %10
  %238 = getelementptr inbounds i32, i32* %229, i64 2
  store i32 %237, i32* %234, align 4
  %239 = getelementptr inbounds i32, i32* %230, i64 3
  %240 = load i32, i32* %235, align 4
  %241 = shl i32 %240, %10
  %242 = getelementptr inbounds i32, i32* %229, i64 3
  store i32 %241, i32* %238, align 4
  %243 = getelementptr inbounds i32, i32* %230, i64 4
  %244 = load i32, i32* %239, align 4
  %245 = shl i32 %244, %10
  %246 = getelementptr inbounds i32, i32* %229, i64 4
  store i32 %245, i32* %242, align 4
  %247 = add i64 %228, -4
  %248 = icmp eq i64 %247, 0
  br i1 %248, label %249, label %227, !llvm.loop !35

249:                                              ; preds = %31, %227, %200, %205, %105, %179, %8, %107
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @WebRtcSpl_VectorBitShiftW32ToW16(i16* nocapture, i64, i32* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = icmp sgt i32 %3, -1
  br i1 %5, label %6, label %101

6:                                                ; preds = %4
  %7 = icmp eq i64 %1, 0
  br i1 %7, label %197, label %8

8:                                                ; preds = %6
  %9 = icmp ult i64 %1, 8
  br i1 %9, label %55, label %10

10:                                               ; preds = %8
  %11 = getelementptr i16, i16* %0, i64 %1
  %12 = getelementptr i32, i32* %2, i64 %1
  %13 = bitcast i32* %12 to i16*
  %14 = icmp ugt i16* %13, %0
  %15 = bitcast i16* %11 to i32*
  %16 = icmp ugt i32* %15, %2
  %17 = and i1 %14, %16
  br i1 %17, label %55, label %18

18:                                               ; preds = %10
  %19 = and i64 %1, -8
  %20 = sub i64 %1, %19
  %21 = getelementptr i16, i16* %0, i64 %19
  %22 = getelementptr i32, i32* %2, i64 %19
  %23 = insertelement <4 x i32> undef, i32 %3, i32 0
  %24 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> zeroinitializer
  %25 = insertelement <4 x i32> undef, i32 %3, i32 0
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %27

27:                                               ; preds = %27, %18
  %28 = phi i64 [ 0, %18 ], [ %51, %27 ]
  %29 = getelementptr i16, i16* %0, i64 %28
  %30 = getelementptr i32, i32* %2, i64 %28
  %31 = bitcast i32* %30 to <4 x i32>*
  %32 = load <4 x i32>, <4 x i32>* %31, align 4, !alias.scope !36
  %33 = getelementptr i32, i32* %30, i64 4
  %34 = bitcast i32* %33 to <4 x i32>*
  %35 = load <4 x i32>, <4 x i32>* %34, align 4, !alias.scope !36
  %36 = ashr <4 x i32> %32, %24
  %37 = ashr <4 x i32> %35, %26
  %38 = icmp sgt <4 x i32> %36, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %39 = icmp sgt <4 x i32> %37, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %40 = select <4 x i1> %38, <4 x i32> %36, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %41 = select <4 x i1> %39, <4 x i32> %37, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %42 = icmp slt <4 x i32> %40, <i32 32767, i32 32767, i32 32767, i32 32767>
  %43 = icmp slt <4 x i32> %41, <i32 32767, i32 32767, i32 32767, i32 32767>
  %44 = select <4 x i1> %42, <4 x i32> %40, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %45 = select <4 x i1> %43, <4 x i32> %41, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %46 = trunc <4 x i32> %44 to <4 x i16>
  %47 = trunc <4 x i32> %45 to <4 x i16>
  %48 = bitcast i16* %29 to <4 x i16>*
  store <4 x i16> %46, <4 x i16>* %48, align 2, !alias.scope !39, !noalias !36
  %49 = getelementptr i16, i16* %29, i64 4
  %50 = bitcast i16* %49 to <4 x i16>*
  store <4 x i16> %47, <4 x i16>* %50, align 2, !alias.scope !39, !noalias !36
  %51 = add i64 %28, 8
  %52 = icmp eq i64 %51, %19
  br i1 %52, label %53, label %27, !llvm.loop !41

53:                                               ; preds = %27
  %54 = icmp eq i64 %19, %1
  br i1 %54, label %197, label %55

55:                                               ; preds = %53, %10, %8
  %56 = phi i64 [ %1, %10 ], [ %1, %8 ], [ %20, %53 ]
  %57 = phi i16* [ %0, %10 ], [ %0, %8 ], [ %21, %53 ]
  %58 = phi i32* [ %2, %10 ], [ %2, %8 ], [ %22, %53 ]
  %59 = and i64 %56, 1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %72, label %61

61:                                               ; preds = %55
  %62 = getelementptr inbounds i32, i32* %58, i64 1
  %63 = load i32, i32* %58, align 4
  %64 = ashr i32 %63, %3
  %65 = icmp sgt i32 %64, -32768
  %66 = select i1 %65, i32 %64, i32 -32768
  %67 = icmp slt i32 %66, 32767
  %68 = select i1 %67, i32 %66, i32 32767
  %69 = trunc i32 %68 to i16
  %70 = getelementptr inbounds i16, i16* %57, i64 1
  store i16 %69, i16* %57, align 2
  %71 = add i64 %56, -1
  br label %72

72:                                               ; preds = %55, %61
  %73 = phi i64 [ %56, %55 ], [ %71, %61 ]
  %74 = phi i16* [ %57, %55 ], [ %70, %61 ]
  %75 = phi i32* [ %58, %55 ], [ %62, %61 ]
  %76 = icmp eq i64 %56, 1
  br i1 %76, label %197, label %77

77:                                               ; preds = %72, %77
  %78 = phi i64 [ %99, %77 ], [ %73, %72 ]
  %79 = phi i16* [ %98, %77 ], [ %74, %72 ]
  %80 = phi i32* [ %90, %77 ], [ %75, %72 ]
  %81 = getelementptr inbounds i32, i32* %80, i64 1
  %82 = load i32, i32* %80, align 4
  %83 = ashr i32 %82, %3
  %84 = icmp sgt i32 %83, -32768
  %85 = select i1 %84, i32 %83, i32 -32768
  %86 = icmp slt i32 %85, 32767
  %87 = select i1 %86, i32 %85, i32 32767
  %88 = trunc i32 %87 to i16
  %89 = getelementptr inbounds i16, i16* %79, i64 1
  store i16 %88, i16* %79, align 2
  %90 = getelementptr inbounds i32, i32* %80, i64 2
  %91 = load i32, i32* %81, align 4
  %92 = ashr i32 %91, %3
  %93 = icmp sgt i32 %92, -32768
  %94 = select i1 %93, i32 %92, i32 -32768
  %95 = icmp slt i32 %94, 32767
  %96 = select i1 %95, i32 %94, i32 32767
  %97 = trunc i32 %96 to i16
  %98 = getelementptr inbounds i16, i16* %79, i64 2
  store i16 %97, i16* %89, align 2
  %99 = add i64 %78, -2
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %197, label %77, !llvm.loop !42

101:                                              ; preds = %4
  %102 = sub nsw i32 0, %3
  %103 = icmp eq i64 %1, 0
  br i1 %103, label %197, label %104

104:                                              ; preds = %101
  %105 = icmp ult i64 %1, 8
  br i1 %105, label %151, label %106

106:                                              ; preds = %104
  %107 = getelementptr i16, i16* %0, i64 %1
  %108 = getelementptr i32, i32* %2, i64 %1
  %109 = bitcast i32* %108 to i16*
  %110 = icmp ugt i16* %109, %0
  %111 = bitcast i16* %107 to i32*
  %112 = icmp ugt i32* %111, %2
  %113 = and i1 %110, %112
  br i1 %113, label %151, label %114

114:                                              ; preds = %106
  %115 = and i64 %1, -8
  %116 = sub i64 %1, %115
  %117 = getelementptr i16, i16* %0, i64 %115
  %118 = getelementptr i32, i32* %2, i64 %115
  %119 = insertelement <4 x i32> undef, i32 %102, i32 0
  %120 = shufflevector <4 x i32> %119, <4 x i32> undef, <4 x i32> zeroinitializer
  %121 = insertelement <4 x i32> undef, i32 %102, i32 0
  %122 = shufflevector <4 x i32> %121, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %123

123:                                              ; preds = %123, %114
  %124 = phi i64 [ 0, %114 ], [ %147, %123 ]
  %125 = getelementptr i16, i16* %0, i64 %124
  %126 = getelementptr i32, i32* %2, i64 %124
  %127 = bitcast i32* %126 to <4 x i32>*
  %128 = load <4 x i32>, <4 x i32>* %127, align 4, !alias.scope !43
  %129 = getelementptr i32, i32* %126, i64 4
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 4, !alias.scope !43
  %132 = shl <4 x i32> %128, %120
  %133 = shl <4 x i32> %131, %122
  %134 = icmp sgt <4 x i32> %132, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %135 = icmp sgt <4 x i32> %133, <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %136 = select <4 x i1> %134, <4 x i32> %132, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %137 = select <4 x i1> %135, <4 x i32> %133, <4 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %138 = icmp slt <4 x i32> %136, <i32 32767, i32 32767, i32 32767, i32 32767>
  %139 = icmp slt <4 x i32> %137, <i32 32767, i32 32767, i32 32767, i32 32767>
  %140 = select <4 x i1> %138, <4 x i32> %136, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %141 = select <4 x i1> %139, <4 x i32> %137, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>
  %142 = trunc <4 x i32> %140 to <4 x i16>
  %143 = trunc <4 x i32> %141 to <4 x i16>
  %144 = bitcast i16* %125 to <4 x i16>*
  store <4 x i16> %142, <4 x i16>* %144, align 2, !alias.scope !46, !noalias !43
  %145 = getelementptr i16, i16* %125, i64 4
  %146 = bitcast i16* %145 to <4 x i16>*
  store <4 x i16> %143, <4 x i16>* %146, align 2, !alias.scope !46, !noalias !43
  %147 = add i64 %124, 8
  %148 = icmp eq i64 %147, %115
  br i1 %148, label %149, label %123, !llvm.loop !48

149:                                              ; preds = %123
  %150 = icmp eq i64 %115, %1
  br i1 %150, label %197, label %151

151:                                              ; preds = %149, %106, %104
  %152 = phi i64 [ %1, %106 ], [ %1, %104 ], [ %116, %149 ]
  %153 = phi i16* [ %0, %106 ], [ %0, %104 ], [ %117, %149 ]
  %154 = phi i32* [ %2, %106 ], [ %2, %104 ], [ %118, %149 ]
  %155 = and i64 %152, 1
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %168, label %157

157:                                              ; preds = %151
  %158 = getelementptr inbounds i32, i32* %154, i64 1
  %159 = load i32, i32* %154, align 4
  %160 = shl i32 %159, %102
  %161 = icmp sgt i32 %160, -32768
  %162 = select i1 %161, i32 %160, i32 -32768
  %163 = icmp slt i32 %162, 32767
  %164 = select i1 %163, i32 %162, i32 32767
  %165 = trunc i32 %164 to i16
  %166 = getelementptr inbounds i16, i16* %153, i64 1
  store i16 %165, i16* %153, align 2
  %167 = add i64 %152, -1
  br label %168

168:                                              ; preds = %151, %157
  %169 = phi i64 [ %152, %151 ], [ %167, %157 ]
  %170 = phi i16* [ %153, %151 ], [ %166, %157 ]
  %171 = phi i32* [ %154, %151 ], [ %158, %157 ]
  %172 = icmp eq i64 %152, 1
  br i1 %172, label %197, label %173

173:                                              ; preds = %168, %173
  %174 = phi i64 [ %195, %173 ], [ %169, %168 ]
  %175 = phi i16* [ %194, %173 ], [ %170, %168 ]
  %176 = phi i32* [ %186, %173 ], [ %171, %168 ]
  %177 = getelementptr inbounds i32, i32* %176, i64 1
  %178 = load i32, i32* %176, align 4
  %179 = shl i32 %178, %102
  %180 = icmp sgt i32 %179, -32768
  %181 = select i1 %180, i32 %179, i32 -32768
  %182 = icmp slt i32 %181, 32767
  %183 = select i1 %182, i32 %181, i32 32767
  %184 = trunc i32 %183 to i16
  %185 = getelementptr inbounds i16, i16* %175, i64 1
  store i16 %184, i16* %175, align 2
  %186 = getelementptr inbounds i32, i32* %176, i64 2
  %187 = load i32, i32* %177, align 4
  %188 = shl i32 %187, %102
  %189 = icmp sgt i32 %188, -32768
  %190 = select i1 %189, i32 %188, i32 -32768
  %191 = icmp slt i32 %190, 32767
  %192 = select i1 %191, i32 %190, i32 32767
  %193 = trunc i32 %192 to i16
  %194 = getelementptr inbounds i16, i16* %175, i64 2
  store i16 %193, i16* %185, align 2
  %195 = add i64 %174, -2
  %196 = icmp eq i64 %195, 0
  br i1 %196, label %197, label %173, !llvm.loop !49

197:                                              ; preds = %168, %173, %72, %77, %149, %53, %101, %6
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @WebRtcSpl_ScaleVector(i16* nocapture readonly, i16* nocapture, i16 signext, i64, i16 signext) local_unnamed_addr #0 {
  %6 = icmp eq i64 %3, 0
  br i1 %6, label %134, label %7

7:                                                ; preds = %5
  %8 = sext i16 %2 to i32
  %9 = sext i16 %4 to i32
  %10 = icmp ult i64 %3, 8
  br i1 %10, label %72, label %11

11:                                               ; preds = %7
  %12 = getelementptr i16, i16* %1, i64 %3
  %13 = getelementptr i16, i16* %0, i64 %3
  %14 = icmp ugt i16* %13, %1
  %15 = icmp ugt i16* %12, %0
  %16 = and i1 %14, %15
  br i1 %16, label %72, label %17

17:                                               ; preds = %11
  %18 = and i64 %3, -8
  %19 = getelementptr i16, i16* %1, i64 %18
  %20 = getelementptr i16, i16* %0, i64 %18
  %21 = insertelement <8 x i32> undef, i32 %8, i32 0
  %22 = shufflevector <8 x i32> %21, <8 x i32> undef, <8 x i32> zeroinitializer
  %23 = insertelement <8 x i32> undef, i32 %9, i32 0
  %24 = shufflevector <8 x i32> %23, <8 x i32> undef, <8 x i32> zeroinitializer
  %25 = add i64 %18, -8
  %26 = lshr exact i64 %25, 3
  %27 = add nuw nsw i64 %26, 1
  %28 = and i64 %27, 1
  %29 = icmp eq i64 %25, 0
  br i1 %29, label %57, label %30

30:                                               ; preds = %17
  %31 = sub nuw nsw i64 %27, %28
  br label %32

32:                                               ; preds = %32, %30
  %33 = phi i64 [ 0, %30 ], [ %54, %32 ]
  %34 = phi i64 [ %31, %30 ], [ %55, %32 ]
  %35 = getelementptr i16, i16* %1, i64 %33
  %36 = getelementptr i16, i16* %0, i64 %33
  %37 = bitcast i16* %36 to <8 x i16>*
  %38 = load <8 x i16>, <8 x i16>* %37, align 2, !alias.scope !50
  %39 = sext <8 x i16> %38 to <8 x i32>
  %40 = mul nsw <8 x i32> %22, %39
  %41 = ashr <8 x i32> %40, %24
  %42 = trunc <8 x i32> %41 to <8 x i16>
  %43 = bitcast i16* %35 to <8 x i16>*
  store <8 x i16> %42, <8 x i16>* %43, align 2, !alias.scope !53, !noalias !50
  %44 = or i64 %33, 8
  %45 = getelementptr i16, i16* %1, i64 %44
  %46 = getelementptr i16, i16* %0, i64 %44
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 2, !alias.scope !50
  %49 = sext <8 x i16> %48 to <8 x i32>
  %50 = mul nsw <8 x i32> %22, %49
  %51 = ashr <8 x i32> %50, %24
  %52 = trunc <8 x i32> %51 to <8 x i16>
  %53 = bitcast i16* %45 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %53, align 2, !alias.scope !53, !noalias !50
  %54 = add i64 %33, 16
  %55 = add i64 %34, -2
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %32, !llvm.loop !55

57:                                               ; preds = %32, %17
  %58 = phi i64 [ 0, %17 ], [ %54, %32 ]
  %59 = icmp eq i64 %28, 0
  br i1 %59, label %70, label %60

60:                                               ; preds = %57
  %61 = getelementptr i16, i16* %1, i64 %58
  %62 = getelementptr i16, i16* %0, i64 %58
  %63 = bitcast i16* %62 to <8 x i16>*
  %64 = load <8 x i16>, <8 x i16>* %63, align 2, !alias.scope !50
  %65 = sext <8 x i16> %64 to <8 x i32>
  %66 = mul nsw <8 x i32> %22, %65
  %67 = ashr <8 x i32> %66, %24
  %68 = trunc <8 x i32> %67 to <8 x i16>
  %69 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %69, align 2, !alias.scope !53, !noalias !50
  br label %70

70:                                               ; preds = %57, %60
  %71 = icmp eq i64 %18, %3
  br i1 %71, label %134, label %72

72:                                               ; preds = %70, %11, %7
  %73 = phi i16* [ %1, %11 ], [ %1, %7 ], [ %19, %70 ]
  %74 = phi i16* [ %0, %11 ], [ %0, %7 ], [ %20, %70 ]
  %75 = phi i64 [ 0, %11 ], [ 0, %7 ], [ %18, %70 ]
  %76 = xor i64 %75, -1
  %77 = add i64 %76, %3
  %78 = and i64 %3, 3
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %95, label %80

80:                                               ; preds = %72, %80
  %81 = phi i16* [ %91, %80 ], [ %73, %72 ]
  %82 = phi i16* [ %85, %80 ], [ %74, %72 ]
  %83 = phi i64 [ %92, %80 ], [ %75, %72 ]
  %84 = phi i64 [ %93, %80 ], [ %78, %72 ]
  %85 = getelementptr inbounds i16, i16* %82, i64 1
  %86 = load i16, i16* %82, align 2
  %87 = sext i16 %86 to i32
  %88 = mul nsw i32 %87, %8
  %89 = ashr i32 %88, %9
  %90 = trunc i32 %89 to i16
  %91 = getelementptr inbounds i16, i16* %81, i64 1
  store i16 %90, i16* %81, align 2
  %92 = add nuw i64 %83, 1
  %93 = add i64 %84, -1
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %80, !llvm.loop !56

95:                                               ; preds = %80, %72
  %96 = phi i16* [ %73, %72 ], [ %91, %80 ]
  %97 = phi i16* [ %74, %72 ], [ %85, %80 ]
  %98 = phi i64 [ %75, %72 ], [ %92, %80 ]
  %99 = icmp ult i64 %77, 3
  br i1 %99, label %134, label %100

100:                                              ; preds = %95, %100
  %101 = phi i16* [ %131, %100 ], [ %96, %95 ]
  %102 = phi i16* [ %125, %100 ], [ %97, %95 ]
  %103 = phi i64 [ %132, %100 ], [ %98, %95 ]
  %104 = getelementptr inbounds i16, i16* %102, i64 1
  %105 = load i16, i16* %102, align 2
  %106 = sext i16 %105 to i32
  %107 = mul nsw i32 %106, %8
  %108 = ashr i32 %107, %9
  %109 = trunc i32 %108 to i16
  %110 = getelementptr inbounds i16, i16* %101, i64 1
  store i16 %109, i16* %101, align 2
  %111 = getelementptr inbounds i16, i16* %102, i64 2
  %112 = load i16, i16* %104, align 2
  %113 = sext i16 %112 to i32
  %114 = mul nsw i32 %113, %8
  %115 = ashr i32 %114, %9
  %116 = trunc i32 %115 to i16
  %117 = getelementptr inbounds i16, i16* %101, i64 2
  store i16 %116, i16* %110, align 2
  %118 = getelementptr inbounds i16, i16* %102, i64 3
  %119 = load i16, i16* %111, align 2
  %120 = sext i16 %119 to i32
  %121 = mul nsw i32 %120, %8
  %122 = ashr i32 %121, %9
  %123 = trunc i32 %122 to i16
  %124 = getelementptr inbounds i16, i16* %101, i64 3
  store i16 %123, i16* %117, align 2
  %125 = getelementptr inbounds i16, i16* %102, i64 4
  %126 = load i16, i16* %118, align 2
  %127 = sext i16 %126 to i32
  %128 = mul nsw i32 %127, %8
  %129 = ashr i32 %128, %9
  %130 = trunc i32 %129 to i16
  %131 = getelementptr inbounds i16, i16* %101, i64 4
  store i16 %130, i16* %124, align 2
  %132 = add nuw i64 %103, 4
  %133 = icmp eq i64 %132, %3
  br i1 %133, label %134, label %100, !llvm.loop !57

134:                                              ; preds = %95, %100, %70, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @WebRtcSpl_ScaleVectorWithSat(i16* nocapture readonly, i16* nocapture, i16 signext, i64, i16 signext) local_unnamed_addr #0 {
  %6 = icmp eq i64 %3, 0
  br i1 %6, label %138, label %7

7:                                                ; preds = %5
  %8 = sext i16 %2 to i32
  %9 = sext i16 %4 to i32
  %10 = icmp ult i64 %3, 8
  br i1 %10, label %84, label %11

11:                                               ; preds = %7
  %12 = getelementptr i16, i16* %1, i64 %3
  %13 = getelementptr i16, i16* %0, i64 %3
  %14 = icmp ugt i16* %13, %1
  %15 = icmp ugt i16* %12, %0
  %16 = and i1 %14, %15
  br i1 %16, label %84, label %17

17:                                               ; preds = %11
  %18 = and i64 %3, -8
  %19 = getelementptr i16, i16* %1, i64 %18
  %20 = getelementptr i16, i16* %0, i64 %18
  %21 = insertelement <8 x i32> undef, i32 %8, i32 0
  %22 = shufflevector <8 x i32> %21, <8 x i32> undef, <8 x i32> zeroinitializer
  %23 = insertelement <8 x i32> undef, i32 %9, i32 0
  %24 = shufflevector <8 x i32> %23, <8 x i32> undef, <8 x i32> zeroinitializer
  %25 = add i64 %18, -8
  %26 = lshr exact i64 %25, 3
  %27 = add nuw nsw i64 %26, 1
  %28 = and i64 %27, 1
  %29 = icmp eq i64 %25, 0
  br i1 %29, label %65, label %30

30:                                               ; preds = %17
  %31 = sub nuw nsw i64 %27, %28
  br label %32

32:                                               ; preds = %32, %30
  %33 = phi i64 [ 0, %30 ], [ %62, %32 ]
  %34 = phi i64 [ %31, %30 ], [ %63, %32 ]
  %35 = getelementptr i16, i16* %1, i64 %33
  %36 = getelementptr i16, i16* %0, i64 %33
  %37 = bitcast i16* %36 to <8 x i16>*
  %38 = load <8 x i16>, <8 x i16>* %37, align 2, !alias.scope !58
  %39 = sext <8 x i16> %38 to <8 x i32>
  %40 = mul nsw <8 x i32> %22, %39
  %41 = ashr <8 x i32> %40, %24
  %42 = icmp sgt <8 x i32> %41, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %43 = select <8 x i1> %42, <8 x i32> %41, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %44 = icmp slt <8 x i32> %43, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %45 = select <8 x i1> %44, <8 x i32> %43, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %46 = trunc <8 x i32> %45 to <8 x i16>
  %47 = bitcast i16* %35 to <8 x i16>*
  store <8 x i16> %46, <8 x i16>* %47, align 2, !alias.scope !61, !noalias !58
  %48 = or i64 %33, 8
  %49 = getelementptr i16, i16* %1, i64 %48
  %50 = getelementptr i16, i16* %0, i64 %48
  %51 = bitcast i16* %50 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 2, !alias.scope !58
  %53 = sext <8 x i16> %52 to <8 x i32>
  %54 = mul nsw <8 x i32> %22, %53
  %55 = ashr <8 x i32> %54, %24
  %56 = icmp sgt <8 x i32> %55, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %57 = select <8 x i1> %56, <8 x i32> %55, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %58 = icmp slt <8 x i32> %57, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %59 = select <8 x i1> %58, <8 x i32> %57, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %60 = trunc <8 x i32> %59 to <8 x i16>
  %61 = bitcast i16* %49 to <8 x i16>*
  store <8 x i16> %60, <8 x i16>* %61, align 2, !alias.scope !61, !noalias !58
  %62 = add i64 %33, 16
  %63 = add i64 %34, -2
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %32, !llvm.loop !63

65:                                               ; preds = %32, %17
  %66 = phi i64 [ 0, %17 ], [ %62, %32 ]
  %67 = icmp eq i64 %28, 0
  br i1 %67, label %82, label %68

68:                                               ; preds = %65
  %69 = getelementptr i16, i16* %1, i64 %66
  %70 = getelementptr i16, i16* %0, i64 %66
  %71 = bitcast i16* %70 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !58
  %73 = sext <8 x i16> %72 to <8 x i32>
  %74 = mul nsw <8 x i32> %22, %73
  %75 = ashr <8 x i32> %74, %24
  %76 = icmp sgt <8 x i32> %75, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %77 = select <8 x i1> %76, <8 x i32> %75, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %78 = icmp slt <8 x i32> %77, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %79 = select <8 x i1> %78, <8 x i32> %77, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %80 = trunc <8 x i32> %79 to <8 x i16>
  %81 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %81, align 2, !alias.scope !61, !noalias !58
  br label %82

82:                                               ; preds = %65, %68
  %83 = icmp eq i64 %18, %3
  br i1 %83, label %138, label %84

84:                                               ; preds = %82, %11, %7
  %85 = phi i16* [ %1, %11 ], [ %1, %7 ], [ %19, %82 ]
  %86 = phi i16* [ %0, %11 ], [ %0, %7 ], [ %20, %82 ]
  %87 = phi i64 [ 0, %11 ], [ 0, %7 ], [ %18, %82 ]
  %88 = xor i64 %87, -1
  %89 = and i64 %3, 1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %104, label %91

91:                                               ; preds = %84
  %92 = getelementptr inbounds i16, i16* %86, i64 1
  %93 = load i16, i16* %86, align 2
  %94 = sext i16 %93 to i32
  %95 = mul nsw i32 %94, %8
  %96 = ashr i32 %95, %9
  %97 = icmp sgt i32 %96, -32768
  %98 = select i1 %97, i32 %96, i32 -32768
  %99 = icmp slt i32 %98, 32767
  %100 = select i1 %99, i32 %98, i32 32767
  %101 = trunc i32 %100 to i16
  %102 = getelementptr inbounds i16, i16* %85, i64 1
  store i16 %101, i16* %85, align 2
  %103 = or i64 %87, 1
  br label %104

104:                                              ; preds = %84, %91
  %105 = phi i16* [ %85, %84 ], [ %102, %91 ]
  %106 = phi i16* [ %86, %84 ], [ %92, %91 ]
  %107 = phi i64 [ %87, %84 ], [ %103, %91 ]
  %108 = sub i64 0, %3
  %109 = icmp eq i64 %88, %108
  br i1 %109, label %138, label %110

110:                                              ; preds = %104, %110
  %111 = phi i16* [ %135, %110 ], [ %105, %104 ]
  %112 = phi i16* [ %125, %110 ], [ %106, %104 ]
  %113 = phi i64 [ %136, %110 ], [ %107, %104 ]
  %114 = getelementptr inbounds i16, i16* %112, i64 1
  %115 = load i16, i16* %112, align 2
  %116 = sext i16 %115 to i32
  %117 = mul nsw i32 %116, %8
  %118 = ashr i32 %117, %9
  %119 = icmp sgt i32 %118, -32768
  %120 = select i1 %119, i32 %118, i32 -32768
  %121 = icmp slt i32 %120, 32767
  %122 = select i1 %121, i32 %120, i32 32767
  %123 = trunc i32 %122 to i16
  %124 = getelementptr inbounds i16, i16* %111, i64 1
  store i16 %123, i16* %111, align 2
  %125 = getelementptr inbounds i16, i16* %112, i64 2
  %126 = load i16, i16* %114, align 2
  %127 = sext i16 %126 to i32
  %128 = mul nsw i32 %127, %8
  %129 = ashr i32 %128, %9
  %130 = icmp sgt i32 %129, -32768
  %131 = select i1 %130, i32 %129, i32 -32768
  %132 = icmp slt i32 %131, 32767
  %133 = select i1 %132, i32 %131, i32 32767
  %134 = trunc i32 %133 to i16
  %135 = getelementptr inbounds i16, i16* %111, i64 2
  store i16 %134, i16* %124, align 2
  %136 = add nuw i64 %113, 2
  %137 = icmp eq i64 %136, %3
  br i1 %137, label %138, label %110, !llvm.loop !64

138:                                              ; preds = %104, %110, %82, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @WebRtcSpl_ScaleAndAddVectors(i16* nocapture readonly, i16 signext, i32, i16* nocapture readonly, i16 signext, i32, i16* nocapture, i64) local_unnamed_addr #0 {
  %9 = icmp eq i64 %7, 0
  br i1 %9, label %169, label %10

10:                                               ; preds = %8
  %11 = sext i16 %1 to i32
  %12 = sext i16 %4 to i32
  %13 = icmp ult i64 %7, 8
  br i1 %13, label %106, label %14

14:                                               ; preds = %10
  %15 = getelementptr i16, i16* %6, i64 %7
  %16 = getelementptr i16, i16* %0, i64 %7
  %17 = getelementptr i16, i16* %3, i64 %7
  %18 = icmp ugt i16* %16, %6
  %19 = icmp ugt i16* %15, %0
  %20 = and i1 %18, %19
  %21 = icmp ugt i16* %17, %6
  %22 = icmp ugt i16* %15, %3
  %23 = and i1 %21, %22
  %24 = or i1 %20, %23
  br i1 %24, label %106, label %25

25:                                               ; preds = %14
  %26 = and i64 %7, -8
  %27 = getelementptr i16, i16* %6, i64 %26
  %28 = getelementptr i16, i16* %3, i64 %26
  %29 = getelementptr i16, i16* %0, i64 %26
  %30 = insertelement <8 x i32> undef, i32 %11, i32 0
  %31 = shufflevector <8 x i32> %30, <8 x i32> undef, <8 x i32> zeroinitializer
  %32 = insertelement <8 x i32> undef, i32 %2, i32 0
  %33 = shufflevector <8 x i32> %32, <8 x i32> undef, <8 x i32> zeroinitializer
  %34 = insertelement <8 x i32> undef, i32 %12, i32 0
  %35 = shufflevector <8 x i32> %34, <8 x i32> undef, <8 x i32> zeroinitializer
  %36 = insertelement <8 x i32> undef, i32 %5, i32 0
  %37 = shufflevector <8 x i32> %36, <8 x i32> undef, <8 x i32> zeroinitializer
  %38 = add i64 %26, -8
  %39 = lshr exact i64 %38, 3
  %40 = add nuw nsw i64 %39, 1
  %41 = and i64 %40, 1
  %42 = icmp eq i64 %38, 0
  br i1 %42, label %84, label %43

43:                                               ; preds = %25
  %44 = sub nuw nsw i64 %40, %41
  br label %45

45:                                               ; preds = %45, %43
  %46 = phi i64 [ 0, %43 ], [ %81, %45 ]
  %47 = phi i64 [ %44, %43 ], [ %82, %45 ]
  %48 = getelementptr i16, i16* %6, i64 %46
  %49 = getelementptr i16, i16* %3, i64 %46
  %50 = getelementptr i16, i16* %0, i64 %46
  %51 = bitcast i16* %50 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 2, !alias.scope !65
  %53 = sext <8 x i16> %52 to <8 x i32>
  %54 = mul nsw <8 x i32> %31, %53
  %55 = ashr <8 x i32> %54, %33
  %56 = bitcast i16* %49 to <8 x i16>*
  %57 = load <8 x i16>, <8 x i16>* %56, align 2, !alias.scope !68
  %58 = sext <8 x i16> %57 to <8 x i32>
  %59 = mul nsw <8 x i32> %35, %58
  %60 = ashr <8 x i32> %59, %37
  %61 = add <8 x i32> %60, %55
  %62 = trunc <8 x i32> %61 to <8 x i16>
  %63 = bitcast i16* %48 to <8 x i16>*
  store <8 x i16> %62, <8 x i16>* %63, align 2, !alias.scope !70, !noalias !72
  %64 = or i64 %46, 8
  %65 = getelementptr i16, i16* %6, i64 %64
  %66 = getelementptr i16, i16* %3, i64 %64
  %67 = getelementptr i16, i16* %0, i64 %64
  %68 = bitcast i16* %67 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 2, !alias.scope !65
  %70 = sext <8 x i16> %69 to <8 x i32>
  %71 = mul nsw <8 x i32> %31, %70
  %72 = ashr <8 x i32> %71, %33
  %73 = bitcast i16* %66 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2, !alias.scope !68
  %75 = sext <8 x i16> %74 to <8 x i32>
  %76 = mul nsw <8 x i32> %35, %75
  %77 = ashr <8 x i32> %76, %37
  %78 = add <8 x i32> %77, %72
  %79 = trunc <8 x i32> %78 to <8 x i16>
  %80 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %80, align 2, !alias.scope !70, !noalias !72
  %81 = add i64 %46, 16
  %82 = add i64 %47, -2
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %84, label %45, !llvm.loop !73

84:                                               ; preds = %45, %25
  %85 = phi i64 [ 0, %25 ], [ %81, %45 ]
  %86 = icmp eq i64 %41, 0
  br i1 %86, label %104, label %87

87:                                               ; preds = %84
  %88 = getelementptr i16, i16* %6, i64 %85
  %89 = getelementptr i16, i16* %3, i64 %85
  %90 = getelementptr i16, i16* %0, i64 %85
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !65
  %93 = sext <8 x i16> %92 to <8 x i32>
  %94 = mul nsw <8 x i32> %31, %93
  %95 = ashr <8 x i32> %94, %33
  %96 = bitcast i16* %89 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !68
  %98 = sext <8 x i16> %97 to <8 x i32>
  %99 = mul nsw <8 x i32> %35, %98
  %100 = ashr <8 x i32> %99, %37
  %101 = add <8 x i32> %100, %95
  %102 = trunc <8 x i32> %101 to <8 x i16>
  %103 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %103, align 2, !alias.scope !70, !noalias !72
  br label %104

104:                                              ; preds = %84, %87
  %105 = icmp eq i64 %26, %7
  br i1 %105, label %169, label %106

106:                                              ; preds = %104, %14, %10
  %107 = phi i16* [ %6, %14 ], [ %6, %10 ], [ %27, %104 ]
  %108 = phi i16* [ %3, %14 ], [ %3, %10 ], [ %28, %104 ]
  %109 = phi i16* [ %0, %14 ], [ %0, %10 ], [ %29, %104 ]
  %110 = phi i64 [ 0, %14 ], [ 0, %10 ], [ %26, %104 ]
  %111 = xor i64 %110, -1
  %112 = and i64 %7, 1
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %129, label %114

114:                                              ; preds = %106
  %115 = getelementptr inbounds i16, i16* %109, i64 1
  %116 = load i16, i16* %109, align 2
  %117 = sext i16 %116 to i32
  %118 = mul nsw i32 %117, %11
  %119 = ashr i32 %118, %2
  %120 = getelementptr inbounds i16, i16* %108, i64 1
  %121 = load i16, i16* %108, align 2
  %122 = sext i16 %121 to i32
  %123 = mul nsw i32 %122, %12
  %124 = ashr i32 %123, %5
  %125 = add i32 %124, %119
  %126 = trunc i32 %125 to i16
  %127 = getelementptr inbounds i16, i16* %107, i64 1
  store i16 %126, i16* %107, align 2
  %128 = or i64 %110, 1
  br label %129

129:                                              ; preds = %106, %114
  %130 = phi i16* [ %107, %106 ], [ %127, %114 ]
  %131 = phi i16* [ %108, %106 ], [ %120, %114 ]
  %132 = phi i16* [ %109, %106 ], [ %115, %114 ]
  %133 = phi i64 [ %110, %106 ], [ %128, %114 ]
  %134 = sub i64 0, %7
  %135 = icmp eq i64 %111, %134
  br i1 %135, label %169, label %136

136:                                              ; preds = %129, %136
  %137 = phi i16* [ %166, %136 ], [ %130, %129 ]
  %138 = phi i16* [ %159, %136 ], [ %131, %129 ]
  %139 = phi i16* [ %154, %136 ], [ %132, %129 ]
  %140 = phi i64 [ %167, %136 ], [ %133, %129 ]
  %141 = getelementptr inbounds i16, i16* %139, i64 1
  %142 = load i16, i16* %139, align 2
  %143 = sext i16 %142 to i32
  %144 = mul nsw i32 %143, %11
  %145 = ashr i32 %144, %2
  %146 = getelementptr inbounds i16, i16* %138, i64 1
  %147 = load i16, i16* %138, align 2
  %148 = sext i16 %147 to i32
  %149 = mul nsw i32 %148, %12
  %150 = ashr i32 %149, %5
  %151 = add i32 %150, %145
  %152 = trunc i32 %151 to i16
  %153 = getelementptr inbounds i16, i16* %137, i64 1
  store i16 %152, i16* %137, align 2
  %154 = getelementptr inbounds i16, i16* %139, i64 2
  %155 = load i16, i16* %141, align 2
  %156 = sext i16 %155 to i32
  %157 = mul nsw i32 %156, %11
  %158 = ashr i32 %157, %2
  %159 = getelementptr inbounds i16, i16* %138, i64 2
  %160 = load i16, i16* %146, align 2
  %161 = sext i16 %160 to i32
  %162 = mul nsw i32 %161, %12
  %163 = ashr i32 %162, %5
  %164 = add i32 %163, %158
  %165 = trunc i32 %164 to i16
  %166 = getelementptr inbounds i16, i16* %137, i64 2
  store i16 %165, i16* %153, align 2
  %167 = add nuw i64 %140, 2
  %168 = icmp eq i64 %167, %7
  br i1 %168, label %169, label %136, !llvm.loop !74

169:                                              ; preds = %129, %136, %104, %8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @WebRtcSpl_ScaleAndAddVectorsWithRoundC(i16* readonly, i16 signext, i16* readonly, i16 signext, i32, i16*, i64) local_unnamed_addr #0 {
  %8 = shl i32 1, %4
  %9 = ashr i32 %8, 1
  %10 = icmp eq i16* %0, null
  %11 = icmp eq i16* %2, null
  %12 = or i1 %10, %11
  %13 = icmp eq i16* %5, null
  %14 = or i1 %12, %13
  %15 = icmp eq i64 %6, 0
  %16 = or i1 %14, %15
  %17 = icmp slt i32 %4, 0
  %18 = or i1 %17, %16
  br i1 %18, label %167, label %19

19:                                               ; preds = %7
  %20 = sext i16 %1 to i32
  %21 = sext i16 %3 to i32
  %22 = icmp ult i64 %6, 8
  br i1 %22, label %112, label %23

23:                                               ; preds = %19
  %24 = getelementptr i16, i16* %5, i64 %6
  %25 = getelementptr i16, i16* %0, i64 %6
  %26 = getelementptr i16, i16* %2, i64 %6
  %27 = icmp ugt i16* %25, %5
  %28 = icmp ugt i16* %24, %0
  %29 = and i1 %27, %28
  %30 = icmp ugt i16* %26, %5
  %31 = icmp ugt i16* %24, %2
  %32 = and i1 %30, %31
  %33 = or i1 %29, %32
  br i1 %33, label %112, label %34

34:                                               ; preds = %23
  %35 = and i64 %6, -8
  %36 = insertelement <8 x i32> undef, i32 %20, i32 0
  %37 = shufflevector <8 x i32> %36, <8 x i32> undef, <8 x i32> zeroinitializer
  %38 = insertelement <8 x i32> undef, i32 %21, i32 0
  %39 = shufflevector <8 x i32> %38, <8 x i32> undef, <8 x i32> zeroinitializer
  %40 = insertelement <8 x i32> undef, i32 %9, i32 0
  %41 = shufflevector <8 x i32> %40, <8 x i32> undef, <8 x i32> zeroinitializer
  %42 = insertelement <8 x i32> undef, i32 %4, i32 0
  %43 = shufflevector <8 x i32> %42, <8 x i32> undef, <8 x i32> zeroinitializer
  %44 = add i64 %35, -8
  %45 = lshr exact i64 %44, 3
  %46 = add nuw nsw i64 %45, 1
  %47 = and i64 %46, 1
  %48 = icmp eq i64 %44, 0
  br i1 %48, label %90, label %49

49:                                               ; preds = %34
  %50 = sub nuw nsw i64 %46, %47
  br label %51

51:                                               ; preds = %51, %49
  %52 = phi i64 [ 0, %49 ], [ %87, %51 ]
  %53 = phi i64 [ %50, %49 ], [ %88, %51 ]
  %54 = getelementptr inbounds i16, i16* %0, i64 %52
  %55 = bitcast i16* %54 to <8 x i16>*
  %56 = load <8 x i16>, <8 x i16>* %55, align 2, !alias.scope !75
  %57 = sext <8 x i16> %56 to <8 x i32>
  %58 = mul nsw <8 x i32> %37, %57
  %59 = getelementptr inbounds i16, i16* %2, i64 %52
  %60 = bitcast i16* %59 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2, !alias.scope !78
  %62 = sext <8 x i16> %61 to <8 x i32>
  %63 = mul nsw <8 x i32> %39, %62
  %64 = add <8 x i32> %58, %41
  %65 = add <8 x i32> %64, %63
  %66 = ashr <8 x i32> %65, %43
  %67 = trunc <8 x i32> %66 to <8 x i16>
  %68 = getelementptr inbounds i16, i16* %5, i64 %52
  %69 = bitcast i16* %68 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %69, align 2, !alias.scope !80, !noalias !82
  %70 = or i64 %52, 8
  %71 = getelementptr inbounds i16, i16* %0, i64 %70
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 2, !alias.scope !75
  %74 = sext <8 x i16> %73 to <8 x i32>
  %75 = mul nsw <8 x i32> %37, %74
  %76 = getelementptr inbounds i16, i16* %2, i64 %70
  %77 = bitcast i16* %76 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2, !alias.scope !78
  %79 = sext <8 x i16> %78 to <8 x i32>
  %80 = mul nsw <8 x i32> %39, %79
  %81 = add <8 x i32> %75, %41
  %82 = add <8 x i32> %81, %80
  %83 = ashr <8 x i32> %82, %43
  %84 = trunc <8 x i32> %83 to <8 x i16>
  %85 = getelementptr inbounds i16, i16* %5, i64 %70
  %86 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %84, <8 x i16>* %86, align 2, !alias.scope !80, !noalias !82
  %87 = add i64 %52, 16
  %88 = add i64 %53, -2
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %51, !llvm.loop !83

90:                                               ; preds = %51, %34
  %91 = phi i64 [ 0, %34 ], [ %87, %51 ]
  %92 = icmp eq i64 %47, 0
  br i1 %92, label %110, label %93

93:                                               ; preds = %90
  %94 = getelementptr inbounds i16, i16* %0, i64 %91
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2, !alias.scope !75
  %97 = sext <8 x i16> %96 to <8 x i32>
  %98 = mul nsw <8 x i32> %37, %97
  %99 = getelementptr inbounds i16, i16* %2, i64 %91
  %100 = bitcast i16* %99 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2, !alias.scope !78
  %102 = sext <8 x i16> %101 to <8 x i32>
  %103 = mul nsw <8 x i32> %39, %102
  %104 = add <8 x i32> %98, %41
  %105 = add <8 x i32> %104, %103
  %106 = ashr <8 x i32> %105, %43
  %107 = trunc <8 x i32> %106 to <8 x i16>
  %108 = getelementptr inbounds i16, i16* %5, i64 %91
  %109 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %109, align 2, !alias.scope !80, !noalias !82
  br label %110

110:                                              ; preds = %90, %93
  %111 = icmp eq i64 %35, %6
  br i1 %111, label %167, label %112

112:                                              ; preds = %110, %23, %19
  %113 = phi i64 [ 0, %23 ], [ 0, %19 ], [ %35, %110 ]
  %114 = xor i64 %113, -1
  %115 = and i64 %6, 1
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %132, label %117

117:                                              ; preds = %112
  %118 = getelementptr inbounds i16, i16* %0, i64 %113
  %119 = load i16, i16* %118, align 2
  %120 = sext i16 %119 to i32
  %121 = mul nsw i32 %120, %20
  %122 = getelementptr inbounds i16, i16* %2, i64 %113
  %123 = load i16, i16* %122, align 2
  %124 = sext i16 %123 to i32
  %125 = mul nsw i32 %124, %21
  %126 = add i32 %121, %9
  %127 = add i32 %126, %125
  %128 = ashr i32 %127, %4
  %129 = trunc i32 %128 to i16
  %130 = getelementptr inbounds i16, i16* %5, i64 %113
  store i16 %129, i16* %130, align 2
  %131 = or i64 %113, 1
  br label %132

132:                                              ; preds = %112, %117
  %133 = phi i64 [ %113, %112 ], [ %131, %117 ]
  %134 = sub i64 0, %6
  %135 = icmp eq i64 %114, %134
  br i1 %135, label %167, label %136

136:                                              ; preds = %132, %136
  %137 = phi i64 [ %165, %136 ], [ %133, %132 ]
  %138 = getelementptr inbounds i16, i16* %0, i64 %137
  %139 = load i16, i16* %138, align 2
  %140 = sext i16 %139 to i32
  %141 = mul nsw i32 %140, %20
  %142 = getelementptr inbounds i16, i16* %2, i64 %137
  %143 = load i16, i16* %142, align 2
  %144 = sext i16 %143 to i32
  %145 = mul nsw i32 %144, %21
  %146 = add i32 %141, %9
  %147 = add i32 %146, %145
  %148 = ashr i32 %147, %4
  %149 = trunc i32 %148 to i16
  %150 = getelementptr inbounds i16, i16* %5, i64 %137
  store i16 %149, i16* %150, align 2
  %151 = add nuw i64 %137, 1
  %152 = getelementptr inbounds i16, i16* %0, i64 %151
  %153 = load i16, i16* %152, align 2
  %154 = sext i16 %153 to i32
  %155 = mul nsw i32 %154, %20
  %156 = getelementptr inbounds i16, i16* %2, i64 %151
  %157 = load i16, i16* %156, align 2
  %158 = sext i16 %157 to i32
  %159 = mul nsw i32 %158, %21
  %160 = add i32 %155, %9
  %161 = add i32 %160, %159
  %162 = ashr i32 %161, %4
  %163 = trunc i32 %162 to i16
  %164 = getelementptr inbounds i16, i16* %5, i64 %151
  store i16 %163, i16* %164, align 2
  %165 = add nuw i64 %137, 2
  %166 = icmp eq i64 %165, %6
  br i1 %166, label %167, label %136, !llvm.loop !84

167:                                              ; preds = %132, %136, %110, %7
  %168 = phi i32 [ -1, %7 ], [ 0, %110 ], [ 0, %136 ], [ 0, %132 ]
  ret i32 %168
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !10}
!17 = distinct !{!17, !3}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !3}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !10}
!27 = !{!28}
!28 = distinct !{!28, !29}
!29 = distinct !{!29, !"LVerDomain"}
!30 = !{!31}
!31 = distinct !{!31, !29}
!32 = distinct !{!32, !10}
!33 = distinct !{!33, !3}
!34 = distinct !{!34, !10}
!35 = distinct !{!35, !10}
!36 = !{!37}
!37 = distinct !{!37, !38}
!38 = distinct !{!38, !"LVerDomain"}
!39 = !{!40}
!40 = distinct !{!40, !38}
!41 = distinct !{!41, !10}
!42 = distinct !{!42, !10}
!43 = !{!44}
!44 = distinct !{!44, !45}
!45 = distinct !{!45, !"LVerDomain"}
!46 = !{!47}
!47 = distinct !{!47, !45}
!48 = distinct !{!48, !10}
!49 = distinct !{!49, !10}
!50 = !{!51}
!51 = distinct !{!51, !52}
!52 = distinct !{!52, !"LVerDomain"}
!53 = !{!54}
!54 = distinct !{!54, !52}
!55 = distinct !{!55, !10}
!56 = distinct !{!56, !3}
!57 = distinct !{!57, !10}
!58 = !{!59}
!59 = distinct !{!59, !60}
!60 = distinct !{!60, !"LVerDomain"}
!61 = !{!62}
!62 = distinct !{!62, !60}
!63 = distinct !{!63, !10}
!64 = distinct !{!64, !10}
!65 = !{!66}
!66 = distinct !{!66, !67}
!67 = distinct !{!67, !"LVerDomain"}
!68 = !{!69}
!69 = distinct !{!69, !67}
!70 = !{!71}
!71 = distinct !{!71, !67}
!72 = !{!66, !69}
!73 = distinct !{!73, !10}
!74 = distinct !{!74, !10}
!75 = !{!76}
!76 = distinct !{!76, !77}
!77 = distinct !{!77, !"LVerDomain"}
!78 = !{!79}
!79 = distinct !{!79, !77}
!80 = !{!81}
!81 = distinct !{!81, !77}
!82 = !{!76, !79}
!83 = distinct !{!83, !10}
!84 = distinct !{!84, !10}
