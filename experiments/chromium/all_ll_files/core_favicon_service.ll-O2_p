; ModuleID = '../../components/favicon/core/core_favicon_service.cc'
source_filename = "../../components/favicon/core/core_favicon_service.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { float*, float*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { float* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %class.SkBitmap*, %class.SkBitmap*, %"class.std::__1::__compressed_pair.18" }
%class.SkBitmap = type { %class.sk_sp, %class.SkPixmap, %class.sk_sp.17 }
%class.sk_sp = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.10, i32, i32 }
%class.sk_sp.10 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.11" }
%"struct.std::__1::__atomic_base.11" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.12" }
%"struct.std::__1::atomic.12" = type { %"struct.std::__1::__atomic_base.13" }
%"struct.std::__1::__atomic_base.13" = type { %"struct.std::__1::__atomic_base.14" }
%"struct.std::__1::__atomic_base.14" = type { %"struct.std::__1::__cxx_atomic_impl.15" }
%"struct.std::__1::__cxx_atomic_impl.15" = type { %"struct.std::__1::__cxx_atomic_base_impl.16" }
%"struct.std::__1::__cxx_atomic_base_impl.16" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.sk_sp.17 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %class.SkBitmap* }
%"class.gfx::Image" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.gfx::internal::ImageStorage"* }
%"class.gfx::internal::ImageStorage" = type opaque
%"class.gfx::ImageSkia" = type { %class.scoped_refptr.23 }
%class.scoped_refptr.23 = type { %"class.gfx::internal::ImageSkiaStorage"* }
%"class.gfx::internal::ImageSkiaStorage" = type opaque
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { %"class.gfx::ImageSkiaRep"*, %"class.gfx::ImageSkiaRep"*, %"class.std::__1::__compressed_pair.34" }
%"class.gfx::ImageSkiaRep" = type <{ %"class.cc::PaintImage", %class.sk_sp.27, i32, %"class.gfx::Size", [4 x i8], %class.SkBitmap, float, [4 x i8] }>
%"class.cc::PaintImage" = type { %class.sk_sp.26, %class.sk_sp.27, %"class.gfx::Rect", i32, %class.sk_sp.31, %class.sk_sp.32, i32, i32, i32, i32, i8, i8, i32, i32, %class.sk_sp.26, %class.scoped_refptr.33 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%class.sk_sp.31 = type { %"class.cc::PaintImageGenerator"* }
%"class.cc::PaintImageGenerator" = type opaque
%class.sk_sp.32 = type { %"class.cc::TextureBacking"* }
%"class.cc::TextureBacking" = type opaque
%class.sk_sp.26 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.scoped_refptr.33 = type { %"class.cc::PaintWorkletInput"* }
%"class.cc::PaintWorkletInput" = type opaque
%class.sk_sp.27 = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { i8* }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.gfx::ImageSkiaRep"* }

$_ZNSt3__16vectorI8SkBitmapNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_ = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7favicon18CoreFaviconService29GetPixelSizesForFaviconScalesEi(%"class.std::__1::vector"* noalias sret, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::vector.1", align 8
  %4 = bitcast %"class.std::__1::vector.1"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #10
  %5 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %3, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %3, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector.1"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 24, i1 false)
  call void @_ZN12favicon_base16GetFaviconScalesEv(%"class.std::__1::vector.1"* nonnull sret %3) #10
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = bitcast %"class.std::__1::vector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false) #10
  %11 = load float*, float** %5, align 8
  %12 = load float*, float** %6, align 8
  %13 = icmp eq float* %11, %12
  br i1 %13, label %21, label %14

14:                                               ; preds = %2
  %15 = sitofp i32 %1 to float
  %16 = bitcast i32** %8 to i64*
  %17 = bitcast %"class.std::__1::vector"* %0 to i64*
  %18 = bitcast i32** %9 to i64*
  br label %29

19:                                               ; preds = %90
  %20 = load float*, float** %5, align 8
  br label %21

21:                                               ; preds = %19, %2
  %22 = phi float* [ %20, %19 ], [ %11, %2 ]
  %23 = icmp eq float* %22, null
  br i1 %23, label %28, label %24

24:                                               ; preds = %21
  %25 = ptrtoint float* %22 to i64
  %26 = bitcast float** %6 to i64*
  store i64 %25, i64* %26, align 8
  %27 = bitcast float* %22 to i8*
  call void @_ZdlPv(i8* %27) #11
  br label %28

28:                                               ; preds = %21, %24
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #10
  ret void

29:                                               ; preds = %93, %14
  %30 = phi i64 [ 0, %14 ], [ %96, %93 ]
  %31 = phi i32* [ null, %14 ], [ %95, %93 ]
  %32 = phi i32* [ null, %14 ], [ %94, %93 ]
  %33 = phi float* [ %11, %14 ], [ %91, %93 ]
  %34 = load float, float* %33, align 4
  %35 = fmul float %34, %15
  %36 = call float @llvm.ceil.f32(float %35) #10
  %37 = fptosi float %36 to i32
  %38 = icmp ult i32* %32, %31
  %39 = ptrtoint i32* %31 to i64
  br i1 %38, label %40, label %43

40:                                               ; preds = %29
  store i32 %37, i32* %32, align 4
  %41 = getelementptr inbounds i32, i32* %32, i64 1
  %42 = ptrtoint i32* %41 to i64
  store i64 %42, i64* %16, align 8
  br label %90

43:                                               ; preds = %29
  %44 = ptrtoint i32* %32 to i64
  %45 = load i64, i64* %17, align 8
  %46 = sub i64 %44, %45
  %47 = ashr exact i64 %46, 2
  %48 = add nsw i64 %47, 1
  %49 = icmp ugt i64 %48, 4611686018427387903
  br i1 %49, label %50, label %52

50:                                               ; preds = %43
  %51 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %51) #12
  unreachable

52:                                               ; preds = %43
  %53 = sub i64 %39, %45
  %54 = ashr exact i64 %53, 2
  %55 = icmp ult i64 %54, 2305843009213693951
  br i1 %55, label %56, label %64

56:                                               ; preds = %52
  %57 = ashr exact i64 %53, 1
  %58 = icmp ult i64 %57, %48
  %59 = select i1 %58, i64 %48, i64 %57
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %69, label %61

61:                                               ; preds = %56
  %62 = icmp ugt i64 %59, 4611686018427387903
  br i1 %62, label %63, label %64

63:                                               ; preds = %61
  call void @abort() #12
  unreachable

64:                                               ; preds = %61, %52
  %65 = phi i64 [ %59, %61 ], [ 4611686018427387903, %52 ]
  %66 = shl i64 %65, 2
  %67 = call i8* @_Znwm(i64 %66) #11
  %68 = bitcast i8* %67 to i32*
  br label %69

69:                                               ; preds = %64, %56
  %70 = phi i64 [ %65, %64 ], [ 0, %56 ]
  %71 = phi i32* [ %68, %64 ], [ null, %56 ]
  %72 = getelementptr inbounds i32, i32* %71, i64 %47
  %73 = getelementptr inbounds i32, i32* %71, i64 %70
  %74 = ptrtoint i32* %73 to i64
  store i32 %37, i32* %72, align 4
  %75 = getelementptr inbounds i32, i32* %72, i64 1
  %76 = ptrtoint i32* %75 to i64
  %77 = sub i64 %30, %45
  %78 = ashr exact i64 %77, 2
  %79 = sub nsw i64 0, %78
  %80 = getelementptr inbounds i32, i32* %72, i64 %79
  %81 = ptrtoint i32* %80 to i64
  %82 = icmp sgt i64 %77, 0
  br i1 %82, label %83, label %86

83:                                               ; preds = %69
  %84 = bitcast i32* %80 to i8*
  %85 = inttoptr i64 %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %84, i8* align 4 %85, i64 %77, i1 false) #10
  br label %86

86:                                               ; preds = %83, %69
  store i64 %81, i64* %17, align 8
  store i64 %76, i64* %16, align 8
  store i64 %74, i64* %18, align 8
  %87 = icmp eq i64 %45, 0
  br i1 %87, label %90, label %88

88:                                               ; preds = %86
  %89 = inttoptr i64 %45 to i8*
  call void @_ZdlPv(i8* %89) #11
  br label %90

90:                                               ; preds = %40, %86, %88
  %91 = getelementptr inbounds float, float* %33, i64 1
  %92 = icmp eq float* %91, %12
  br i1 %92, label %19, label %93

93:                                               ; preds = %90
  %94 = load i32*, i32** %8, align 8
  %95 = load i32*, i32** %9, align 8
  %96 = ptrtoint i32* %94 to i64
  br label %29
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN12favicon_base16GetFaviconScalesEv(%"class.std::__1::vector.1"* sret) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7favicon18CoreFaviconService23ExtractSkBitmapsToStoreERKN3gfx5ImageE(%"class.std::__1::vector.8"* noalias sret, %"class.gfx::Image"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.gfx::ImageSkia", align 8
  %4 = alloca %"class.std::__1::vector.1", align 8
  %5 = alloca %"class.std::__1::vector.24", align 8
  %6 = bitcast %"class.gfx::ImageSkia"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.gfx::ImageSkia", %"class.gfx::ImageSkia"* %3, i64 0, i32 0, i32 0
  store %"class.gfx::internal::ImageSkiaStorage"* inttoptr (i64 -6148914691236517206 to %"class.gfx::internal::ImageSkiaStorage"*), %"class.gfx::internal::ImageSkiaStorage"** %7, align 8
  call void @_ZNK3gfx5Image11AsImageSkiaEv(%"class.gfx::ImageSkia"* nonnull sret %3, %"class.gfx::Image"* %1) #10
  call void @_ZNK3gfx9ImageSkia28EnsureRepsForSupportedScalesEv(%"class.gfx::ImageSkia"* nonnull %3) #10
  %8 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = bitcast %"class.std::__1::vector.8"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 24, i1 false) #10
  %11 = bitcast %"class.std::__1::vector.1"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #10
  %12 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %4, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %4, i64 0, i32 0, i32 1
  %14 = bitcast %"class.std::__1::vector.1"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 24, i1 false)
  call void @_ZN12favicon_base16GetFaviconScalesEv(%"class.std::__1::vector.1"* nonnull sret %4) #10
  %15 = bitcast %"class.std::__1::vector.24"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #10
  call void @_ZNK3gfx9ImageSkia10image_repsEv(%"class.std::__1::vector.24"* nonnull sret %5, %"class.gfx::ImageSkia"* nonnull %3) #10
  %16 = getelementptr inbounds %"class.std::__1::vector.24", %"class.std::__1::vector.24"* %5, i64 0, i32 0, i32 0
  %17 = load %"class.gfx::ImageSkiaRep"*, %"class.gfx::ImageSkiaRep"** %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector.24", %"class.std::__1::vector.24"* %5, i64 0, i32 0, i32 1
  %19 = load %"class.gfx::ImageSkiaRep"*, %"class.gfx::ImageSkiaRep"** %18, align 8
  %20 = icmp eq %"class.gfx::ImageSkiaRep"* %17, %19
  br i1 %20, label %25, label %21

21:                                               ; preds = %2
  %22 = bitcast %class.SkBitmap** %8 to i64*
  br label %49

23:                                               ; preds = %77
  %24 = load %"class.gfx::ImageSkiaRep"*, %"class.gfx::ImageSkiaRep"** %16, align 8
  br label %25

25:                                               ; preds = %23, %2
  %26 = phi %"class.gfx::ImageSkiaRep"* [ %24, %23 ], [ %17, %2 ]
  %27 = icmp eq %"class.gfx::ImageSkiaRep"* %26, null
  br i1 %27, label %41, label %28

28:                                               ; preds = %25
  %29 = bitcast %"class.gfx::ImageSkiaRep"* %26 to i8*
  %30 = load %"class.gfx::ImageSkiaRep"*, %"class.gfx::ImageSkiaRep"** %18, align 8
  %31 = icmp eq %"class.gfx::ImageSkiaRep"* %30, %26
  br i1 %31, label %39, label %32

32:                                               ; preds = %28, %32
  %33 = phi %"class.gfx::ImageSkiaRep"* [ %34, %32 ], [ %30, %28 ]
  %34 = getelementptr inbounds %"class.gfx::ImageSkiaRep", %"class.gfx::ImageSkiaRep"* %33, i64 -1
  call void @_ZN3gfx12ImageSkiaRepD1Ev(%"class.gfx::ImageSkiaRep"* %34) #10
  %35 = icmp eq %"class.gfx::ImageSkiaRep"* %34, %26
  br i1 %35, label %36, label %32

36:                                               ; preds = %32
  %37 = bitcast %"class.std::__1::vector.24"* %5 to i8**
  %38 = load i8*, i8** %37, align 8
  br label %39

39:                                               ; preds = %36, %28
  %40 = phi i8* [ %38, %36 ], [ %29, %28 ]
  store %"class.gfx::ImageSkiaRep"* %26, %"class.gfx::ImageSkiaRep"** %18, align 8
  call void @_ZdlPv(i8* %40) #11
  br label %41

41:                                               ; preds = %25, %39
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #10
  %42 = load float*, float** %12, align 8
  %43 = icmp eq float* %42, null
  br i1 %43, label %48, label %44

44:                                               ; preds = %41
  %45 = ptrtoint float* %42 to i64
  %46 = bitcast float** %13 to i64*
  store i64 %45, i64* %46, align 8
  %47 = bitcast float* %42 to i8*
  call void @_ZdlPv(i8* %47) #11
  br label %48

48:                                               ; preds = %41, %44
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #10
  call void @_ZN3gfx9ImageSkiaD1Ev(%"class.gfx::ImageSkia"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  ret void

49:                                               ; preds = %21, %77
  %50 = phi %"class.gfx::ImageSkiaRep"* [ %17, %21 ], [ %78, %77 ]
  %51 = getelementptr inbounds %"class.gfx::ImageSkiaRep", %"class.gfx::ImageSkiaRep"* %50, i64 0, i32 6
  %52 = load float, float* %51, align 8
  %53 = fcmp oeq float %52, 0.000000e+00
  %54 = select i1 %53, float 1.000000e+00, float %52
  %55 = load float*, float** %12, align 8
  %56 = load float*, float** %13, align 8
  %57 = icmp eq float* %55, %56
  br i1 %57, label %65, label %58

58:                                               ; preds = %49, %62
  %59 = phi float* [ %63, %62 ], [ %55, %49 ]
  %60 = load float, float* %59, align 4
  %61 = fcmp oeq float %60, %54
  br i1 %61, label %65, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds float, float* %59, i64 1
  %64 = icmp eq float* %63, %56
  br i1 %64, label %77, label %58

65:                                               ; preds = %58, %49
  %66 = phi float* [ %55, %49 ], [ %59, %58 ]
  %67 = icmp eq float* %66, %56
  br i1 %67, label %77, label %68

68:                                               ; preds = %65
  %69 = call dereferenceable(56) %class.SkBitmap* @_ZNK3gfx12ImageSkiaRep9GetBitmapEv(%"class.gfx::ImageSkiaRep"* %50) #10
  %70 = load %class.SkBitmap*, %class.SkBitmap** %8, align 8
  %71 = load %class.SkBitmap*, %class.SkBitmap** %9, align 8
  %72 = icmp eq %class.SkBitmap* %70, %71
  br i1 %72, label %76, label %73

73:                                               ; preds = %68
  call void @_ZN8SkBitmapC1ERKS_(%class.SkBitmap* %70, %class.SkBitmap* dereferenceable(56) %69) #10
  %74 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %70, i64 1
  %75 = ptrtoint %class.SkBitmap* %74 to i64
  store i64 %75, i64* %22, align 8
  br label %77

76:                                               ; preds = %68
  call void @_ZNSt3__16vectorI8SkBitmapNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(%"class.std::__1::vector.8"* %0, %class.SkBitmap* dereferenceable(56) %69) #10
  br label %77

77:                                               ; preds = %62, %65, %76, %73
  %78 = getelementptr inbounds %"class.gfx::ImageSkiaRep", %"class.gfx::ImageSkiaRep"* %50, i64 1
  %79 = icmp eq %"class.gfx::ImageSkiaRep"* %78, %19
  br i1 %79, label %23, label %49
}

declare void @_ZNK3gfx5Image11AsImageSkiaEv(%"class.gfx::ImageSkia"* sret, %"class.gfx::Image"*) local_unnamed_addr #2

declare void @_ZNK3gfx9ImageSkia28EnsureRepsForSupportedScalesEv(%"class.gfx::ImageSkia"*) local_unnamed_addr #2

declare void @_ZNK3gfx9ImageSkia10image_repsEv(%"class.std::__1::vector.24"* sret, %"class.gfx::ImageSkia"*) local_unnamed_addr #2

declare dereferenceable(56) %class.SkBitmap* @_ZNK3gfx12ImageSkiaRep9GetBitmapEv(%"class.gfx::ImageSkiaRep"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3gfx9ImageSkiaD1Ev(%"class.gfx::ImageSkia"*) unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nounwind
declare void @_ZN8SkBitmapD1Ev(%class.SkBitmap*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN3gfx12ImageSkiaRepD1Ev(%"class.gfx::ImageSkiaRep"*) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI8SkBitmapNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(%"class.std::__1::vector.8"*, %class.SkBitmap* dereferenceable(56)) local_unnamed_addr #9 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %class.SkBitmap** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.8"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 56
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 329406144173384850
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.8"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #12
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %class.SkBitmap** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 56
  %20 = icmp ult i64 %19, 164703072086692425
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 329406144173384850, %14 ]
  %28 = mul i64 %27, 56
  %29 = tail call i8* @_Znwm(i64 %28) #11
  %30 = bitcast i8* %29 to %class.SkBitmap*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %class.SkBitmap* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %33, i64 %9
  %35 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %33, i64 %32
  %36 = ptrtoint %class.SkBitmap* %35 to i64
  tail call void @_ZN8SkBitmapC1ERKS_(%class.SkBitmap* %34, %class.SkBitmap* dereferenceable(56) %1) #10
  %37 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %34, i64 1
  %38 = ptrtoint %class.SkBitmap* %37 to i64
  %39 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 0
  %40 = load %class.SkBitmap*, %class.SkBitmap** %39, align 8
  %41 = load %class.SkBitmap*, %class.SkBitmap** %3, align 8
  %42 = icmp eq %class.SkBitmap* %41, %40
  br i1 %42, label %43, label %45

43:                                               ; preds = %31
  %44 = ptrtoint %class.SkBitmap* %40 to i64
  br label %54

45:                                               ; preds = %31, %45
  %46 = phi %class.SkBitmap* [ %48, %45 ], [ %34, %31 ]
  %47 = phi %class.SkBitmap* [ %49, %45 ], [ %41, %31 ]
  %48 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %46, i64 -1
  %49 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %47, i64 -1
  tail call void @_ZN8SkBitmapC1EOS_(%class.SkBitmap* %48, %class.SkBitmap* dereferenceable(56) %49) #10
  %50 = icmp eq %class.SkBitmap* %49, %40
  br i1 %50, label %51, label %45

51:                                               ; preds = %45
  %52 = load i64, i64* %6, align 8
  %53 = load %class.SkBitmap*, %class.SkBitmap** %3, align 8
  br label %54

54:                                               ; preds = %43, %51
  %55 = phi %class.SkBitmap* [ %40, %43 ], [ %53, %51 ]
  %56 = phi %class.SkBitmap* [ %34, %43 ], [ %48, %51 ]
  %57 = phi i64 [ %44, %43 ], [ %52, %51 ]
  %58 = ptrtoint %class.SkBitmap* %56 to i64
  store i64 %58, i64* %6, align 8
  store i64 %38, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %59 = inttoptr i64 %57 to %class.SkBitmap*
  %60 = icmp eq %class.SkBitmap* %55, %59
  br i1 %60, label %65, label %61

61:                                               ; preds = %54, %61
  %62 = phi %class.SkBitmap* [ %63, %61 ], [ %55, %54 ]
  %63 = getelementptr inbounds %class.SkBitmap, %class.SkBitmap* %62, i64 -1
  tail call void @_ZN8SkBitmapD1Ev(%class.SkBitmap* %63) #10
  %64 = icmp eq %class.SkBitmap* %63, %59
  br i1 %64, label %65, label %61

65:                                               ; preds = %61, %54
  %66 = icmp eq i64 %57, 0
  br i1 %66, label %69, label %67

67:                                               ; preds = %65
  %68 = inttoptr i64 %57 to i8*
  tail call void @_ZdlPv(i8* %68) #11
  br label %69

69:                                               ; preds = %65, %67
  ret void
}

declare void @_ZN8SkBitmapC1ERKS_(%class.SkBitmap*, %class.SkBitmap* dereferenceable(56)) unnamed_addr #2

declare void @_ZN8SkBitmapC1EOS_(%class.SkBitmap*, %class.SkBitmap* dereferenceable(56)) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
