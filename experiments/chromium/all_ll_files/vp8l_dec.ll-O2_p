; ModuleID = '../../third_party/libwebp/src/dec/vp8l_dec.c'
source_filename = "../../third_party/libwebp/src/dec/vp8l_dec.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8LBitReader = type { i64, i8*, i64, i64, i32, i32 }
%struct.VP8LDecoder = type { i32, i32, %struct.VP8Io*, %struct.WebPDecBuffer*, i32*, i32*, %struct.VP8LBitReader, i32, %struct.VP8LBitReader, i32, i32, i32, i32, i32, i32, %struct.VP8LMetadata, i32, [4 x %struct.VP8LTransform], i32, i8*, %struct.WebPRescaler* }
%struct.VP8Io = type { i32, i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i8*, i32 (%struct.VP8Io*)*, i32 (%struct.VP8Io*)*, void (%struct.VP8Io*)*, i32, i64, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
%struct.WebPDecBuffer = type { i32, i32, i32, i32, %union.anon, [4 x i32], i8* }
%union.anon = type { %struct.WebPYUVABuffer }
%struct.WebPYUVABuffer = type { i8*, i8*, i8*, i8*, i32, i32, i32, i32, i64, i64, i64, i64 }
%struct.VP8LMetadata = type { i32, %struct.VP8LColorCache, %struct.VP8LColorCache, i32, i32, i32, i32*, i32, %struct.HTreeGroup*, %struct.HuffmanCode* }
%struct.VP8LColorCache = type { i32*, i32, i32 }
%struct.HTreeGroup = type { [5 x %struct.HuffmanCode*], i32, i32, i32, i32, [64 x %struct.HuffmanCode32] }
%struct.HuffmanCode32 = type { i32, i32 }
%struct.HuffmanCode = type { i8, i16 }
%struct.VP8LTransform = type { i32, i32, i32, i32, i32* }
%struct.WebPRescaler = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, i32*, i32* }
%struct.ALPHDecoder = type { i32, i32, i32, i32, i32, %struct.VP8LDecoder*, %struct.VP8Io, i32, i8*, i8* }
%struct.WebPDecParams = type { %struct.WebPDecBuffer*, i8*, i8*, i8*, i32, %struct.WebPDecoderOptions*, %struct.WebPRescaler*, %struct.WebPRescaler*, %struct.WebPRescaler*, %struct.WebPRescaler*, i8*, i32 (%struct.VP8Io*, %struct.WebPDecParams*)*, i32 (%struct.VP8Io*, %struct.WebPDecParams*, i32)*, i32 (%struct.WebPDecParams*, i32, i32)* }
%struct.WebPDecoderOptions = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [5 x i32] }

@kTableSize = internal unnamed_addr constant [12 x i16] [i16 2954, i16 2956, i16 2958, i16 2962, i16 2970, i16 2986, i16 3018, i16 3082, i16 3212, i16 3468, i16 3980, i16 5004], align 16
@kAlphabetSize = internal unnamed_addr constant [5 x i16] [i16 280, i16 256, i16 256, i16 256, i16 40], align 2
@kCodeLengthCodeOrder = internal unnamed_addr constant [19 x i8] c"\11\12\00\01\02\03\04\05\10\06\07\08\09\0A\0B\0C\0D\0E\0F", align 16
@kCodeLengthExtraBits = internal unnamed_addr constant [3 x i8] c"\02\03\07", align 1
@kCodeLengthRepeatOffsets = internal unnamed_addr constant [3 x i8] c"\03\03\0B", align 1
@WebPUnfilters = external local_unnamed_addr global [4 x void (i8*, i8*, i8*, i32)*], align 16
@kCodeToPlane = internal unnamed_addr constant [120 x i8] c"\18\07\17\19(\06')\16\1A&*8\0579\15\1B6:%+H\04GI\14\1C5;FJ$,XEK4<\03WY\13\1DVZ#-DLU[3=h\02gi\12\1Efj\22.T\5CCMek2>x\01wyS]\11\1FdlBNvz!/u{1?cmR^\00t|AO\10 bn0s}Q_@r~aoPq\7F`p", align 16
@WebPExtractGreen = external local_unnamed_addr global void (i32*, i8*, i32)*, align 8
@WebPMultARGBRow = external local_unnamed_addr global void (i32*, i32, i32)*, align 8
@WebPConvertARGBToY = external local_unnamed_addr global void (i32*, i8*, i32)*, align 8
@WebPConvertARGBToUV = external local_unnamed_addr global void (i32*, i8*, i8*, i32, i32)*, align 8
@WebPExtractAlpha = external local_unnamed_addr global i32 (i8*, i32, i32, i32, i8*, i32)*, align 8

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @VP8LCheckSignature(i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %3 = icmp ugt i64 %1, 4
  br i1 %3, label %4, label %12

4:                                                ; preds = %2
  %5 = load i8, i8* %0, align 1
  %6 = icmp eq i8 %5, 47
  br i1 %6, label %7, label %12

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %0, i64 4
  %9 = load i8, i8* %8, align 1
  %10 = icmp ult i8 %9, 32
  %11 = zext i1 %10 to i32
  br label %12

12:                                               ; preds = %7, %4, %2
  %13 = phi i32 [ 0, %4 ], [ 0, %2 ], [ %11, %7 ]
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8LGetInfo(i8*, i64, i32*, i32*, i32*) local_unnamed_addr #1 {
  %6 = alloca %struct.VP8LBitReader, align 8
  %7 = icmp eq i8* %0, null
  %8 = icmp ult i64 %1, 5
  %9 = or i1 %7, %8
  br i1 %9, label %44, label %10

10:                                               ; preds = %5
  %11 = load i8, i8* %0, align 1
  %12 = icmp eq i8 %11, 47
  br i1 %12, label %13, label %44

13:                                               ; preds = %10
  %14 = getelementptr inbounds i8, i8* %0, i64 4
  %15 = load i8, i8* %14, align 1
  %16 = icmp ugt i8 %15, 31
  br i1 %16, label %44, label %17

17:                                               ; preds = %13
  %18 = bitcast %struct.VP8LBitReader* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %18) #4
  %19 = bitcast %struct.VP8LBitReader* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 -86, i64 40, i1 false)
  call void @VP8LInitBitReader(%struct.VP8LBitReader* nonnull %6, i8* nonnull %0, i64 %1) #4
  %20 = call i32 @VP8LReadBits(%struct.VP8LBitReader* nonnull %6, i32 8) #4
  %21 = icmp eq i32 %20, 47
  br i1 %21, label %22, label %42

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %6, i64 0, i32 5
  %24 = call i32 @VP8LReadBits(%struct.VP8LBitReader* nonnull %6, i32 14) #4
  %25 = add i32 %24, 1
  %26 = call i32 @VP8LReadBits(%struct.VP8LBitReader* nonnull %6, i32 14) #4
  %27 = add i32 %26, 1
  %28 = call i32 @VP8LReadBits(%struct.VP8LBitReader* nonnull %6, i32 1) #4
  %29 = call i32 @VP8LReadBits(%struct.VP8LBitReader* nonnull %6, i32 3) #4
  %30 = load i32, i32* %23, align 4
  %31 = or i32 %29, %30
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %42

33:                                               ; preds = %22
  %34 = icmp eq i32* %2, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %33
  store i32 %25, i32* %2, align 4
  br label %36

36:                                               ; preds = %33, %35
  %37 = icmp eq i32* %3, null
  br i1 %37, label %39, label %38

38:                                               ; preds = %36
  store i32 %27, i32* %3, align 4
  br label %39

39:                                               ; preds = %36, %38
  %40 = icmp eq i32* %4, null
  br i1 %40, label %42, label %41

41:                                               ; preds = %39
  store i32 %28, i32* %4, align 4
  br label %42

42:                                               ; preds = %22, %17, %41, %39
  %43 = phi i32 [ 1, %39 ], [ 1, %41 ], [ 0, %17 ], [ 0, %22 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %18) #4
  br label %44

44:                                               ; preds = %10, %13, %5, %42
  %45 = phi i32 [ %43, %42 ], [ 0, %5 ], [ 0, %13 ], [ 0, %10 ]
  ret i32 %45
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @VP8LInitBitReader(%struct.VP8LBitReader*, i8*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.VP8LDecoder* @VP8LNew() local_unnamed_addr #1 {
  %1 = tail call i8* @WebPSafeCalloc(i64 1, i64 368) #4
  %2 = icmp eq i8* %1, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %0
  %4 = bitcast i8* %1 to %struct.VP8LDecoder*
  %5 = bitcast i8* %1 to i32*
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 4
  %7 = bitcast i8* %6 to i32*
  store i32 2, i32* %7, align 4
  tail call void @VP8LDspInit() #4
  br label %8

8:                                                ; preds = %0, %3
  %9 = phi %struct.VP8LDecoder* [ %4, %3 ], [ null, %0 ]
  ret %struct.VP8LDecoder* %9
}

declare i8* @WebPSafeCalloc(i64, i64) local_unnamed_addr #3

declare void @VP8LDspInit() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8LClear(%struct.VP8LDecoder*) local_unnamed_addr #1 {
  %2 = icmp eq %struct.VP8LDecoder* %0, null
  br i1 %2, label %36, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15
  %5 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15, i32 6
  %6 = bitcast i32** %5 to i8**
  %7 = load i8*, i8** %6, align 8
  tail call void @WebPSafeFree(i8* %7) #4
  %8 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15, i32 9
  %9 = bitcast %struct.HuffmanCode** %8 to i8**
  %10 = load i8*, i8** %9, align 8
  tail call void @WebPSafeFree(i8* %10) #4
  %11 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15, i32 8
  %12 = load %struct.HTreeGroup*, %struct.HTreeGroup** %11, align 8
  tail call void @VP8LHtreeGroupsFree(%struct.HTreeGroup* %12) #4
  %13 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15, i32 1
  tail call void @VP8LColorCacheClear(%struct.VP8LColorCache* %13) #4
  %14 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15, i32 2
  tail call void @VP8LColorCacheClear(%struct.VP8LColorCache* %14) #4
  %15 = bitcast %struct.VP8LMetadata* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 88, i1 false) #4
  %16 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 4
  %17 = bitcast i32** %16 to i8**
  %18 = load i8*, i8** %17, align 8
  tail call void @WebPSafeFree(i8* %18) #4
  store i32* null, i32** %16, align 8
  %19 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 16
  %20 = load i32, i32* %19, align 8
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %22, label %31

22:                                               ; preds = %3, %22
  %23 = phi i64 [ %27, %22 ], [ 0, %3 ]
  %24 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 17, i64 %23, i32 4
  %25 = bitcast i32** %24 to i8**
  %26 = load i8*, i8** %25, align 8
  tail call void @WebPSafeFree(i8* %26) #4
  store i32* null, i32** %24, align 8
  %27 = add nuw nsw i64 %23, 1
  %28 = load i32, i32* %19, align 8
  %29 = sext i32 %28 to i64
  %30 = icmp slt i64 %27, %29
  br i1 %30, label %22, label %31

31:                                               ; preds = %22, %3
  store i32 0, i32* %19, align 8
  %32 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 18
  store i32 0, i32* %32, align 8
  %33 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 19
  %34 = load i8*, i8** %33, align 8
  tail call void @WebPSafeFree(i8* %34) #4
  store i8* null, i8** %33, align 8
  %35 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 3
  store %struct.WebPDecBuffer* null, %struct.WebPDecBuffer** %35, align 8
  br label %36

36:                                               ; preds = %1, %31
  ret void
}

declare void @WebPSafeFree(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8LDelete(%struct.VP8LDecoder*) local_unnamed_addr #1 {
  %2 = icmp eq %struct.VP8LDecoder* %0, null
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  tail call void @VP8LClear(%struct.VP8LDecoder* nonnull %0)
  %4 = bitcast %struct.VP8LDecoder* %0 to i8*
  tail call void @WebPSafeFree(i8* nonnull %4) #4
  br label %5

5:                                                ; preds = %1, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8LDecodeAlphaHeader(%struct.ALPHDecoder*, i8*, i64) local_unnamed_addr #1 {
  %4 = tail call i8* @WebPSafeCalloc(i64 1, i64 368) #4
  %5 = icmp eq i8* %4, null
  br i1 %5, label %128, label %6

6:                                                ; preds = %3
  %7 = bitcast i8* %4 to %struct.VP8LDecoder*
  %8 = bitcast i8* %4 to i32*
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds i8, i8* %4, i64 4
  %10 = bitcast i8* %9 to i32*
  store i32 2, i32* %10, align 4
  tail call void @VP8LDspInit() #4
  %11 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %0, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds i8, i8* %4, i64 132
  %14 = bitcast i8* %13 to i32*
  store i32 %12, i32* %14, align 4
  %15 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %0, i64 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds i8, i8* %4, i64 136
  %18 = bitcast i8* %17 to i32*
  store i32 %16, i32* %18, align 8
  %19 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %0, i64 0, i32 6
  %20 = getelementptr inbounds i8, i8* %4, i64 8
  %21 = bitcast i8* %20 to %struct.VP8Io**
  store %struct.VP8Io* %19, %struct.VP8Io** %21, align 8
  %22 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %0, i64 0, i32 6, i32 10
  %23 = bitcast i8** %22 to %struct.ALPHDecoder**
  store %struct.ALPHDecoder* %0, %struct.ALPHDecoder** %23, align 8
  %24 = load i32, i32* %11, align 8
  %25 = load %struct.VP8Io*, %struct.VP8Io** %21, align 8
  %26 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %25, i64 0, i32 0
  store i32 %24, i32* %26, align 8
  %27 = load i32, i32* %15, align 4
  %28 = load %struct.VP8Io*, %struct.VP8Io** %21, align 8
  %29 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %28, i64 0, i32 1
  store i32 %27, i32* %29, align 4
  store i32 0, i32* %8, align 8
  %30 = getelementptr inbounds i8, i8* %4, i64 40
  %31 = bitcast i8* %30 to %struct.VP8LBitReader*
  tail call void @VP8LInitBitReader(%struct.VP8LBitReader* %31, i8* %1, i64 %2) #4
  %32 = load i32, i32* %11, align 8
  %33 = load i32, i32* %15, align 4
  %34 = tail call fastcc i32 @DecodeImageStream(i32 %32, i32 %33, i32 1, %struct.VP8LDecoder* nonnull %7, i32** null)
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %127, label %36

36:                                               ; preds = %6
  %37 = getelementptr inbounds i8, i8* %4, i64 240
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %39, 1
  br i1 %40, label %41, label %97

41:                                               ; preds = %36
  %42 = getelementptr inbounds i8, i8* %4, i64 248
  %43 = bitcast i8* %42 to i32*
  %44 = load i32, i32* %43, align 8
  %45 = icmp eq i32 %44, 3
  br i1 %45, label %46, label %97

46:                                               ; preds = %41
  %47 = getelementptr inbounds i8, i8* %4, i64 152
  %48 = bitcast i8* %47 to i32*
  %49 = load i32, i32* %48, align 8
  %50 = icmp sgt i32 %49, 0
  br i1 %50, label %97, label %51

51:                                               ; preds = %46
  %52 = getelementptr inbounds i8, i8* %4, i64 216
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %53, align 8
  %55 = icmp sgt i32 %54, 0
  br i1 %55, label %56, label %83

56:                                               ; preds = %51
  %57 = getelementptr inbounds i8, i8* %4, i64 224
  %58 = bitcast i8* %57 to %struct.HTreeGroup**
  %59 = load %struct.HTreeGroup*, %struct.HTreeGroup** %58, align 8
  %60 = sext i32 %54 to i64
  br label %63

61:                                               ; preds = %76
  %62 = icmp eq i64 %82, %60
  br i1 %62, label %83, label %63

63:                                               ; preds = %61, %56
  %64 = phi i64 [ 0, %56 ], [ %82, %61 ]
  %65 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %59, i64 %64, i32 0, i64 1
  %66 = load %struct.HuffmanCode*, %struct.HuffmanCode** %65, align 8
  %67 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %66, i64 0, i32 0
  %68 = load i8, i8* %67, align 2
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %70, label %97

70:                                               ; preds = %63
  %71 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %59, i64 %64, i32 0, i64 2
  %72 = load %struct.HuffmanCode*, %struct.HuffmanCode** %71, align 8
  %73 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %72, i64 0, i32 0
  %74 = load i8, i8* %73, align 2
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %76, label %97

76:                                               ; preds = %70
  %77 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %59, i64 %64, i32 0, i64 3
  %78 = load %struct.HuffmanCode*, %struct.HuffmanCode** %77, align 8
  %79 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %78, i64 0, i32 0
  %80 = load i8, i8* %79, align 2
  %81 = icmp eq i8 %80, 0
  %82 = add nuw nsw i64 %64, 1
  br i1 %81, label %61, label %97

83:                                               ; preds = %61, %51
  %84 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %0, i64 0, i32 7
  store i32 1, i32* %84, align 8
  %85 = load i32, i32* %14, align 4
  %86 = sext i32 %85 to i64
  %87 = load i32, i32* %18, align 8
  %88 = sext i32 %87 to i64
  %89 = mul nsw i64 %88, %86
  %90 = getelementptr inbounds i8, i8* %4, i64 32
  %91 = bitcast i8* %90 to i32**
  store i32* null, i32** %91, align 8
  %92 = tail call i8* @WebPSafeMalloc(i64 %89, i64 1) #4
  %93 = getelementptr inbounds i8, i8* %4, i64 24
  %94 = bitcast i8* %93 to i8**
  store i8* %92, i8** %94, align 8
  %95 = icmp eq i8* %92, null
  br i1 %95, label %96, label %124

96:                                               ; preds = %83
  store i32 1, i32* %8, align 8
  br label %127

97:                                               ; preds = %70, %63, %76, %46, %41, %36
  %98 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %0, i64 0, i32 7
  store i32 0, i32* %98, align 8
  %99 = load i32, i32* %11, align 8
  %100 = load i32, i32* %14, align 4
  %101 = sext i32 %100 to i64
  %102 = load i32, i32* %18, align 8
  %103 = sext i32 %102 to i64
  %104 = mul nsw i64 %103, %101
  %105 = and i32 %99, 65535
  %106 = zext i32 %105 to i64
  %107 = sext i32 %99 to i64
  %108 = shl nsw i64 %107, 4
  %109 = add nsw i64 %108, %106
  %110 = add i64 %109, %104
  %111 = tail call i8* @WebPSafeMalloc(i64 %110, i64 4) #4
  %112 = getelementptr inbounds i8, i8* %4, i64 24
  %113 = bitcast i8* %112 to i8**
  store i8* %111, i8** %113, align 8
  %114 = icmp eq i8* %111, null
  br i1 %114, label %115, label %118

115:                                              ; preds = %97
  store i32 1, i32* %8, align 8
  %116 = getelementptr inbounds i8, i8* %4, i64 32
  %117 = bitcast i8* %116 to i32**
  store i32* null, i32** %117, align 8
  br label %127

118:                                              ; preds = %97
  %119 = bitcast i8* %111 to i32*
  %120 = getelementptr inbounds i32, i32* %119, i64 %104
  %121 = getelementptr inbounds i32, i32* %120, i64 %106
  %122 = getelementptr inbounds i8, i8* %4, i64 32
  %123 = bitcast i8* %122 to i32**
  store i32* %121, i32** %123, align 8
  br label %124

124:                                              ; preds = %83, %118
  %125 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %0, i64 0, i32 5
  %126 = bitcast %struct.VP8LDecoder** %125 to i8**
  store i8* %4, i8** %126, align 8
  br label %128

127:                                              ; preds = %115, %96, %6
  tail call void @VP8LClear(%struct.VP8LDecoder* nonnull %7) #4
  tail call void @WebPSafeFree(i8* nonnull %4) #4
  br label %128

128:                                              ; preds = %3, %127, %124
  %129 = phi i32 [ 1, %124 ], [ 0, %127 ], [ 0, %3 ]
  ret i32 %129
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @DecodeImageStream(i32, i32, i32, %struct.VP8LDecoder*, i32**) unnamed_addr #1 {
  %6 = alloca i32*, align 8
  %7 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 6
  %8 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 15
  %9 = icmp ne i32 %2, 0
  br i1 %9, label %10, label %209

10:                                               ; preds = %5
  %11 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 16
  %12 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 18
  br label %13

13:                                               ; preds = %10, %205
  %14 = phi i32 [ %0, %10 ], [ %206, %205 ]
  %15 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %7, i32 1) #4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %209, label %17

17:                                               ; preds = %13
  %18 = load i32, i32* %11, align 8
  %19 = sext i32 %18 to i64
  %20 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %7, i32 2) #4
  %21 = load i32, i32* %12, align 8
  %22 = shl i32 1, %20
  %23 = and i32 %21, %22
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %667

25:                                               ; preds = %17
  %26 = or i32 %21, %22
  store i32 %26, i32* %12, align 8
  %27 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 17, i64 %19, i32 0
  store i32 %20, i32* %27, align 8
  %28 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 17, i64 %19, i32 2
  store i32 %14, i32* %28, align 8
  %29 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 17, i64 %19, i32 3
  store i32 %1, i32* %29, align 4
  %30 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 17, i64 %19, i32 4
  store i32* null, i32** %30, align 8
  %31 = load i32, i32* %11, align 8
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %11, align 8
  switch i32 %20, label %205 [
    i32 0, label %33
    i32 1, label %33
    i32 3, label %46
  ]

33:                                               ; preds = %25, %25
  %34 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %7, i32 3) #4
  %35 = add i32 %34, 2
  %36 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 17, i64 %19, i32 1
  store i32 %35, i32* %36, align 4
  %37 = load i32, i32* %28, align 8
  %38 = shl nsw i32 -1, %35
  %39 = xor i32 %38, -1
  %40 = add i32 %37, %39
  %41 = lshr i32 %40, %35
  %42 = load i32, i32* %29, align 4
  %43 = add i32 %42, %39
  %44 = lshr i32 %43, %35
  %45 = tail call fastcc i32 @DecodeImageStream(i32 %41, i32 %44, i32 0, %struct.VP8LDecoder* %3, i32** %30) #4
  br label %205

46:                                               ; preds = %25
  %47 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %7, i32 8) #4
  %48 = add i32 %47, 1
  %49 = icmp sgt i32 %48, 16
  br i1 %49, label %55, label %50

50:                                               ; preds = %46
  %51 = icmp sgt i32 %48, 4
  br i1 %51, label %55, label %52

52:                                               ; preds = %50
  %53 = icmp sgt i32 %48, 2
  %54 = select i1 %53, i32 2, i32 3
  br label %55

55:                                               ; preds = %52, %50, %46
  %56 = phi i32 [ 0, %46 ], [ %54, %52 ], [ 1, %50 ]
  %57 = load i32, i32* %28, align 8
  %58 = shl i32 1, %56
  %59 = add i32 %57, -1
  %60 = add i32 %59, %58
  %61 = lshr i32 %60, %56
  %62 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 17, i64 %19, i32 1
  store i32 %56, i32* %62, align 4
  %63 = tail call fastcc i32 @DecodeImageStream(i32 %48, i32 1, i32 0, %struct.VP8LDecoder* %3, i32** %30) #4
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %667, label %65

65:                                               ; preds = %55
  %66 = load i32, i32* %62, align 4
  %67 = lshr i32 8, %66
  %68 = shl i32 1, %67
  %69 = sext i32 %68 to i64
  %70 = tail call i8* @WebPSafeMalloc(i64 %69, i64 4) #4
  %71 = icmp eq i8* %70, null
  br i1 %71, label %667, label %72

72:                                               ; preds = %65
  %73 = bitcast i8* %70 to i32*
  %74 = load i32*, i32** %30, align 8
  %75 = bitcast i32* %74 to i8*
  %76 = load i32, i32* %74, align 4
  store i32 %76, i32* %73, align 4
  %77 = icmp sgt i32 %48, 1
  br i1 %77, label %78, label %180

78:                                               ; preds = %72
  %79 = shl nsw i32 %48, 2
  %80 = sext i32 %79 to i64
  %81 = icmp sgt i64 %80, 5
  %82 = select i1 %81, i64 %80, i64 5
  %83 = add nsw i64 %82, -4
  %84 = icmp ult i64 %83, 4
  br i1 %84, label %85, label %87

85:                                               ; preds = %175, %87, %78
  %86 = phi i64 [ 4, %87 ], [ 4, %78 ], [ %99, %175 ]
  br label %191

87:                                               ; preds = %78
  %88 = icmp sgt i64 %80, 5
  %89 = select i1 %88, i64 %80, i64 5
  %90 = getelementptr i8, i8* %70, i64 %89
  %91 = getelementptr i32, i32* %74, i64 1
  %92 = bitcast i32* %91 to i8*
  %93 = getelementptr i8, i8* %75, i64 %89
  %94 = icmp ult i8* %70, %93
  %95 = icmp ugt i8* %90, %92
  %96 = and i1 %94, %95
  br i1 %96, label %85, label %97

97:                                               ; preds = %87
  %98 = and i64 %83, -4
  %99 = add nsw i64 %98, 4
  %100 = add nsw i64 %98, -4
  %101 = lshr exact i64 %100, 2
  %102 = add nuw nsw i64 %101, 1
  %103 = and i64 %102, 3
  %104 = icmp ult i64 %100, 12
  br i1 %104, label %156, label %105

105:                                              ; preds = %97
  %106 = sub nsw i64 %102, %103
  br label %107

107:                                              ; preds = %107, %105
  %108 = phi i64 [ 0, %105 ], [ %153, %107 ]
  %109 = phi i64 [ %106, %105 ], [ %154, %107 ]
  %110 = or i64 %108, 4
  %111 = getelementptr inbounds i8, i8* %75, i64 %110
  %112 = bitcast i8* %111 to <4 x i8>*
  %113 = load <4 x i8>, <4 x i8>* %112, align 1, !alias.scope !2
  %114 = getelementptr inbounds i8, i8* %70, i64 %108
  %115 = bitcast i8* %114 to <4 x i8>*
  %116 = load <4 x i8>, <4 x i8>* %115, align 1, !alias.scope !5, !noalias !2
  %117 = add <4 x i8> %116, %113
  %118 = getelementptr inbounds i8, i8* %70, i64 %110
  %119 = bitcast i8* %118 to <4 x i8>*
  store <4 x i8> %117, <4 x i8>* %119, align 1, !alias.scope !5, !noalias !2
  %120 = or i64 %108, 4
  %121 = or i64 %108, 8
  %122 = getelementptr inbounds i8, i8* %75, i64 %121
  %123 = bitcast i8* %122 to <4 x i8>*
  %124 = load <4 x i8>, <4 x i8>* %123, align 1, !alias.scope !2
  %125 = getelementptr inbounds i8, i8* %70, i64 %120
  %126 = bitcast i8* %125 to <4 x i8>*
  %127 = load <4 x i8>, <4 x i8>* %126, align 1, !alias.scope !5, !noalias !2
  %128 = add <4 x i8> %127, %124
  %129 = getelementptr inbounds i8, i8* %70, i64 %121
  %130 = bitcast i8* %129 to <4 x i8>*
  store <4 x i8> %128, <4 x i8>* %130, align 1, !alias.scope !5, !noalias !2
  %131 = or i64 %108, 8
  %132 = or i64 %108, 12
  %133 = getelementptr inbounds i8, i8* %75, i64 %132
  %134 = bitcast i8* %133 to <4 x i8>*
  %135 = load <4 x i8>, <4 x i8>* %134, align 1, !alias.scope !2
  %136 = getelementptr inbounds i8, i8* %70, i64 %131
  %137 = bitcast i8* %136 to <4 x i8>*
  %138 = load <4 x i8>, <4 x i8>* %137, align 1, !alias.scope !5, !noalias !2
  %139 = add <4 x i8> %138, %135
  %140 = getelementptr inbounds i8, i8* %70, i64 %132
  %141 = bitcast i8* %140 to <4 x i8>*
  store <4 x i8> %139, <4 x i8>* %141, align 1, !alias.scope !5, !noalias !2
  %142 = or i64 %108, 12
  %143 = add i64 %108, 16
  %144 = getelementptr inbounds i8, i8* %75, i64 %143
  %145 = bitcast i8* %144 to <4 x i8>*
  %146 = load <4 x i8>, <4 x i8>* %145, align 1, !alias.scope !2
  %147 = getelementptr inbounds i8, i8* %70, i64 %142
  %148 = bitcast i8* %147 to <4 x i8>*
  %149 = load <4 x i8>, <4 x i8>* %148, align 1, !alias.scope !5, !noalias !2
  %150 = add <4 x i8> %149, %146
  %151 = getelementptr inbounds i8, i8* %70, i64 %143
  %152 = bitcast i8* %151 to <4 x i8>*
  store <4 x i8> %150, <4 x i8>* %152, align 1, !alias.scope !5, !noalias !2
  %153 = add i64 %108, 16
  %154 = add i64 %109, -4
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %107, !llvm.loop !7

156:                                              ; preds = %107, %97
  %157 = phi i64 [ 0, %97 ], [ %153, %107 ]
  %158 = icmp eq i64 %103, 0
  br i1 %158, label %175, label %159

159:                                              ; preds = %156, %159
  %160 = phi i64 [ %172, %159 ], [ %157, %156 ]
  %161 = phi i64 [ %173, %159 ], [ %103, %156 ]
  %162 = add i64 %160, 4
  %163 = getelementptr inbounds i8, i8* %75, i64 %162
  %164 = bitcast i8* %163 to <4 x i8>*
  %165 = load <4 x i8>, <4 x i8>* %164, align 1, !alias.scope !2
  %166 = getelementptr inbounds i8, i8* %70, i64 %160
  %167 = bitcast i8* %166 to <4 x i8>*
  %168 = load <4 x i8>, <4 x i8>* %167, align 1, !alias.scope !5, !noalias !2
  %169 = add <4 x i8> %168, %165
  %170 = getelementptr inbounds i8, i8* %70, i64 %162
  %171 = bitcast i8* %170 to <4 x i8>*
  store <4 x i8> %169, <4 x i8>* %171, align 1, !alias.scope !5, !noalias !2
  %172 = add i64 %160, 4
  %173 = add i64 %161, -1
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %175, label %159, !llvm.loop !9

175:                                              ; preds = %159, %156
  %176 = icmp eq i64 %83, %98
  br i1 %176, label %177, label %85

177:                                              ; preds = %191, %175
  %178 = phi i64 [ %99, %175 ], [ %200, %191 ]
  %179 = trunc i64 %178 to i32
  br label %180

180:                                              ; preds = %177, %72
  %181 = phi i32 [ 4, %72 ], [ %179, %177 ]
  %182 = shl i32 %68, 2
  %183 = icmp slt i32 %181, %182
  br i1 %183, label %184, label %202

184:                                              ; preds = %180
  %185 = zext i32 %181 to i64
  %186 = getelementptr i8, i8* %70, i64 %185
  %187 = xor i32 %181, -1
  %188 = add i32 %182, %187
  %189 = zext i32 %188 to i64
  %190 = add nuw nsw i64 %189, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %186, i8 0, i64 %190, i1 false) #4
  br label %202

191:                                              ; preds = %85, %191
  %192 = phi i64 [ %200, %191 ], [ %86, %85 ]
  %193 = getelementptr inbounds i8, i8* %75, i64 %192
  %194 = load i8, i8* %193, align 1
  %195 = add nsw i64 %192, -4
  %196 = getelementptr inbounds i8, i8* %70, i64 %195
  %197 = load i8, i8* %196, align 1
  %198 = add i8 %197, %194
  %199 = getelementptr inbounds i8, i8* %70, i64 %192
  store i8 %198, i8* %199, align 1
  %200 = add nuw nsw i64 %192, 1
  %201 = icmp slt i64 %200, %80
  br i1 %201, label %191, label %177, !llvm.loop !11

202:                                              ; preds = %184, %180
  %203 = bitcast i32** %30 to i8**
  %204 = load i8*, i8** %203, align 8
  tail call void @WebPSafeFree(i8* %204) #4
  store i8* %70, i8** %203, align 8
  br label %205

205:                                              ; preds = %202, %25, %33
  %206 = phi i32 [ %14, %25 ], [ %14, %33 ], [ %61, %202 ]
  %207 = phi i32 [ 1, %25 ], [ %45, %33 ], [ 1, %202 ]
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %667, label %13

209:                                              ; preds = %13, %5
  %210 = phi i32 [ %0, %5 ], [ %14, %13 ]
  %211 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %7, i32 1) #4
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %219, label %213

213:                                              ; preds = %209
  %214 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %7, i32 4) #4
  %215 = add i32 %214, -1
  %216 = icmp ult i32 %215, 11
  br i1 %216, label %219, label %217

217:                                              ; preds = %213
  %218 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 0
  store i32 3, i32* %218, align 8
  br label %714

219:                                              ; preds = %213, %209
  %220 = phi i32 [ 0, %209 ], [ %214, %213 ]
  %221 = bitcast i32** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %221) #4
  store i32* null, i32** %6, align 8
  %222 = sext i32 %220 to i64
  %223 = getelementptr inbounds [12 x i16], [12 x i16]* @kTableSize, i64 0, i64 %222
  %224 = load i16, i16* %223, align 2
  %225 = zext i16 %224 to i32
  %226 = icmp eq i32 %2, 0
  br i1 %226, label %359, label %227

227:                                              ; preds = %219
  %228 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %7, i32 1) #4
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %359, label %230

230:                                              ; preds = %227
  %231 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %7, i32 3) #4
  %232 = add i32 %231, 2
  %233 = shl i32 1, %232
  %234 = add i32 %210, -1
  %235 = add i32 %234, %233
  %236 = lshr i32 %235, %232
  %237 = add i32 %233, -1
  %238 = add i32 %237, %1
  %239 = lshr i32 %238, %232
  %240 = mul i32 %236, %239
  %241 = call fastcc i32 @DecodeImageStream(i32 %236, i32 %239, i32 0, %struct.VP8LDecoder* %3, i32** nonnull %6) #4
  %242 = icmp eq i32 %241, 0
  br i1 %242, label %657, label %243

243:                                              ; preds = %230
  %244 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 15, i32 4
  store i32 %232, i32* %244, align 4
  %245 = icmp sgt i32 %240, 0
  br i1 %245, label %246, label %290

246:                                              ; preds = %243
  %247 = zext i32 %240 to i64
  %248 = and i64 %247, 1
  %249 = icmp eq i32 %240, 1
  br i1 %249, label %276, label %250

250:                                              ; preds = %246
  %251 = sub nsw i64 %247, %248
  br label %252

252:                                              ; preds = %252, %250
  %253 = phi i64 [ 0, %250 ], [ %273, %252 ]
  %254 = phi i32 [ 1, %250 ], [ %272, %252 ]
  %255 = phi i64 [ %251, %250 ], [ %274, %252 ]
  %256 = load i32*, i32** %6, align 8
  %257 = getelementptr inbounds i32, i32* %256, i64 %253
  %258 = load i32, i32* %257, align 4
  %259 = lshr i32 %258, 8
  %260 = and i32 %259, 65535
  store i32 %260, i32* %257, align 4
  %261 = icmp slt i32 %260, %254
  %262 = add nuw nsw i32 %260, 1
  %263 = select i1 %261, i32 %254, i32 %262
  %264 = or i64 %253, 1
  %265 = load i32*, i32** %6, align 8
  %266 = getelementptr inbounds i32, i32* %265, i64 %264
  %267 = load i32, i32* %266, align 4
  %268 = lshr i32 %267, 8
  %269 = and i32 %268, 65535
  store i32 %269, i32* %266, align 4
  %270 = icmp slt i32 %269, %263
  %271 = add nuw nsw i32 %269, 1
  %272 = select i1 %270, i32 %263, i32 %271
  %273 = add nuw nsw i64 %253, 2
  %274 = add i64 %255, -2
  %275 = icmp eq i64 %274, 0
  br i1 %275, label %276, label %252

276:                                              ; preds = %252, %246
  %277 = phi i32 [ undef, %246 ], [ %272, %252 ]
  %278 = phi i64 [ 0, %246 ], [ %273, %252 ]
  %279 = phi i32 [ 1, %246 ], [ %272, %252 ]
  %280 = icmp eq i64 %248, 0
  br i1 %280, label %290, label %281

281:                                              ; preds = %276
  %282 = load i32*, i32** %6, align 8
  %283 = getelementptr inbounds i32, i32* %282, i64 %278
  %284 = load i32, i32* %283, align 4
  %285 = lshr i32 %284, 8
  %286 = and i32 %285, 65535
  store i32 %286, i32* %283, align 4
  %287 = icmp slt i32 %286, %279
  %288 = add nuw nsw i32 %286, 1
  %289 = select i1 %287, i32 %279, i32 %288
  br label %290

290:                                              ; preds = %281, %276, %243
  %291 = phi i32 [ 1, %243 ], [ %277, %276 ], [ %289, %281 ]
  %292 = icmp sgt i32 %291, 1000
  %293 = mul nsw i32 %210, %1
  %294 = icmp sgt i32 %291, %293
  %295 = or i1 %292, %294
  br i1 %295, label %296, label %359

296:                                              ; preds = %290
  %297 = sext i32 %291 to i64
  %298 = call i8* @WebPSafeMalloc(i64 %297, i64 4) #4
  %299 = bitcast i8* %298 to i32*
  %300 = icmp eq i8* %298, null
  br i1 %300, label %301, label %303

301:                                              ; preds = %296
  %302 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 0
  store i32 1, i32* %302, align 8
  br label %657

303:                                              ; preds = %296
  %304 = shl nsw i64 %297, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %298, i8 -1, i64 %304, i1 false) #4
  br i1 %245, label %305, label %359

305:                                              ; preds = %303
  %306 = zext i32 %240 to i64
  %307 = and i64 %306, 1
  %308 = icmp eq i32 %240, 1
  br i1 %308, label %338, label %309

309:                                              ; preds = %305
  %310 = sub nsw i64 %306, %307
  br label %311

311:                                              ; preds = %750, %309
  %312 = phi i64 [ 0, %309 ], [ %755, %750 ]
  %313 = phi i32 [ 0, %309 ], [ %753, %750 ]
  %314 = phi i64 [ %310, %309 ], [ %756, %750 ]
  %315 = load i32*, i32** %6, align 8
  %316 = getelementptr inbounds i32, i32* %315, i64 %312
  %317 = load i32, i32* %316, align 4
  %318 = zext i32 %317 to i64
  %319 = getelementptr inbounds i32, i32* %299, i64 %318
  %320 = load i32, i32* %319, align 4
  %321 = icmp eq i32 %320, -1
  br i1 %321, label %322, label %325

322:                                              ; preds = %311
  %323 = add nsw i32 %313, 1
  store i32 %313, i32* %319, align 4
  %324 = load i32*, i32** %6, align 8
  br label %325

325:                                              ; preds = %322, %311
  %326 = phi i32* [ %324, %322 ], [ %315, %311 ]
  %327 = phi i32 [ %313, %322 ], [ %320, %311 ]
  %328 = phi i32 [ %323, %322 ], [ %313, %311 ]
  %329 = getelementptr inbounds i32, i32* %326, i64 %312
  store i32 %327, i32* %329, align 4
  %330 = or i64 %312, 1
  %331 = load i32*, i32** %6, align 8
  %332 = getelementptr inbounds i32, i32* %331, i64 %330
  %333 = load i32, i32* %332, align 4
  %334 = zext i32 %333 to i64
  %335 = getelementptr inbounds i32, i32* %299, i64 %334
  %336 = load i32, i32* %335, align 4
  %337 = icmp eq i32 %336, -1
  br i1 %337, label %747, label %750

338:                                              ; preds = %750, %305
  %339 = phi i32 [ undef, %305 ], [ %753, %750 ]
  %340 = phi i64 [ 0, %305 ], [ %755, %750 ]
  %341 = phi i32 [ 0, %305 ], [ %753, %750 ]
  %342 = icmp eq i64 %307, 0
  br i1 %342, label %359, label %343

343:                                              ; preds = %338
  %344 = load i32*, i32** %6, align 8
  %345 = getelementptr inbounds i32, i32* %344, i64 %340
  %346 = load i32, i32* %345, align 4
  %347 = zext i32 %346 to i64
  %348 = getelementptr inbounds i32, i32* %299, i64 %347
  %349 = load i32, i32* %348, align 4
  %350 = icmp eq i32 %349, -1
  br i1 %350, label %351, label %354

351:                                              ; preds = %343
  %352 = add nsw i32 %341, 1
  store i32 %341, i32* %348, align 4
  %353 = load i32*, i32** %6, align 8
  br label %354

354:                                              ; preds = %351, %343
  %355 = phi i32* [ %353, %351 ], [ %344, %343 ]
  %356 = phi i32 [ %341, %351 ], [ %349, %343 ]
  %357 = phi i32 [ %352, %351 ], [ %341, %343 ]
  %358 = getelementptr inbounds i32, i32* %355, i64 %340
  store i32 %356, i32* %358, align 4
  br label %359

359:                                              ; preds = %354, %338, %303, %290, %227, %219
  %360 = phi i32 [ 1, %227 ], [ 1, %219 ], [ %291, %290 ], [ 0, %303 ], [ %339, %338 ], [ %357, %354 ]
  %361 = phi i32 [ 1, %227 ], [ 1, %219 ], [ %291, %290 ], [ %291, %303 ], [ %291, %338 ], [ %291, %354 ]
  %362 = phi i8* [ null, %227 ], [ null, %219 ], [ null, %290 ], [ %298, %303 ], [ %298, %338 ], [ %298, %354 ]
  %363 = phi i32* [ null, %227 ], [ null, %219 ], [ null, %290 ], [ %299, %303 ], [ %299, %338 ], [ %299, %354 ]
  %364 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 6, i32 5
  %365 = load i32, i32* %364, align 4
  %366 = icmp eq i32 %365, 0
  br i1 %366, label %367, label %657

367:                                              ; preds = %359
  %368 = icmp sgt i32 %220, 0
  %369 = shl i32 1, %220
  %370 = add i32 %369, 280
  %371 = select i1 %368, i32 %370, i32 280
  %372 = icmp sgt i32 %371, 256
  %373 = select i1 %372, i32 %371, i32 256
  %374 = zext i32 %373 to i64
  %375 = call i8* @WebPSafeCalloc(i64 %374, i64 4) #4
  %376 = bitcast i8* %375 to i32*
  %377 = mul nsw i32 %360, %225
  %378 = sext i32 %377 to i64
  %379 = call i8* @WebPSafeMalloc(i64 %378, i64 4) #4
  %380 = bitcast i8* %379 to %struct.HuffmanCode*
  %381 = call %struct.HTreeGroup* @VP8LHtreeGroupsNew(i32 %360) #4
  %382 = icmp eq %struct.HTreeGroup* %381, null
  %383 = icmp eq i8* %375, null
  %384 = or i1 %383, %382
  %385 = icmp eq i8* %379, null
  %386 = or i1 %385, %384
  br i1 %386, label %392, label %387

387:                                              ; preds = %367
  %388 = icmp sgt i32 %361, 0
  br i1 %388, label %389, label %648

389:                                              ; preds = %387
  %390 = icmp eq i32* %363, null
  %391 = zext i32 %361 to i64
  br label %394

392:                                              ; preds = %367
  %393 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 0
  store i32 1, i32* %393, align 8
  br label %657

394:                                              ; preds = %644, %389
  %395 = phi i64 [ 0, %389 ], [ %646, %644 ]
  %396 = phi %struct.HuffmanCode* [ %380, %389 ], [ %645, %644 ]
  %397 = trunc i64 %395 to i32
  br i1 %390, label %408, label %398

398:                                              ; preds = %394
  %399 = getelementptr inbounds i32, i32* %363, i64 %395
  %400 = load i32, i32* %399, align 4
  %401 = icmp eq i32 %400, -1
  br i1 %401, label %402, label %408

402:                                              ; preds = %398
  %403 = call fastcc i32 @ReadHuffmanCode(i32 %371, %struct.VP8LDecoder* %3, i32* %376, %struct.HuffmanCode* null) #4
  %404 = icmp eq i32 %403, 0
  br i1 %404, label %657, label %405

405:                                              ; preds = %402
  %406 = call fastcc i32 @ReadHuffmanCode(i32 256, %struct.VP8LDecoder* %3, i32* %376, %struct.HuffmanCode* null) #4
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %657, label %738

408:                                              ; preds = %398, %394
  %409 = phi i32 [ %397, %394 ], [ %400, %398 ]
  %410 = sext i32 %409 to i64
  %411 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %381, i64 %410, i32 0, i64 0
  br label %412

412:                                              ; preds = %540, %408
  %413 = phi i64 [ 0, %408 ], [ %542, %540 ]
  %414 = phi i32 [ 0, %408 ], [ %541, %540 ]
  %415 = phi i32 [ 1, %408 ], [ %437, %540 ]
  %416 = phi i32 [ 0, %408 ], [ %439, %540 ]
  %417 = phi %struct.HuffmanCode* [ %396, %408 ], [ %441, %540 ]
  %418 = getelementptr inbounds [5 x i16], [5 x i16]* @kAlphabetSize, i64 0, i64 %413
  %419 = load i16, i16* %418, align 2
  %420 = zext i16 %419 to i32
  %421 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %381, i64 %410, i32 0, i64 %413
  store %struct.HuffmanCode* %417, %struct.HuffmanCode** %421, align 8
  %422 = icmp eq i64 %413, 0
  %423 = and i1 %368, %422
  %424 = select i1 %423, i32 %369, i32 0
  %425 = add i32 %424, %420
  %426 = call fastcc i32 @ReadHuffmanCode(i32 %425, %struct.VP8LDecoder* %3, i32* %376, %struct.HuffmanCode* %417) #4
  %427 = icmp eq i32 %426, 0
  br i1 %427, label %657, label %428

428:                                              ; preds = %412
  %429 = icmp eq i32 %415, 0
  %430 = and i64 %413, 2147483643
  %431 = icmp eq i64 %430, 0
  %432 = or i1 %429, %431
  %433 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %417, i64 0, i32 0
  %434 = load i8, i8* %433, align 2
  %435 = icmp eq i8 %434, 0
  %436 = zext i1 %435 to i32
  %437 = select i1 %432, i32 %415, i32 %436
  %438 = zext i8 %434 to i32
  %439 = add nuw nsw i32 %416, %438
  %440 = sext i32 %426 to i64
  %441 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %417, i64 %440
  %442 = icmp ult i64 %413, 4
  br i1 %442, label %443, label %540

443:                                              ; preds = %428
  %444 = load i32, i32* %376, align 4
  %445 = icmp sgt i32 %425, 1
  br i1 %445, label %446, label %537

446:                                              ; preds = %443
  %447 = zext i32 %425 to i64
  %448 = zext i32 %425 to i64
  %449 = add nsw i64 %448, -1
  %450 = icmp ult i64 %449, 8
  br i1 %450, label %525, label %451

451:                                              ; preds = %446
  %452 = and i64 %449, -8
  %453 = or i64 %452, 1
  %454 = insertelement <4 x i32> undef, i32 %444, i32 0
  %455 = shufflevector <4 x i32> %454, <4 x i32> undef, <4 x i32> zeroinitializer
  %456 = add nsw i64 %452, -8
  %457 = lshr exact i64 %456, 3
  %458 = add nuw nsw i64 %457, 1
  %459 = and i64 %458, 1
  %460 = icmp eq i64 %456, 0
  br i1 %460, label %493, label %461

461:                                              ; preds = %451
  %462 = sub nuw nsw i64 %458, %459
  br label %463

463:                                              ; preds = %463, %461
  %464 = phi i64 [ 0, %461 ], [ %490, %463 ]
  %465 = phi <4 x i32> [ %455, %461 ], [ %488, %463 ]
  %466 = phi <4 x i32> [ %455, %461 ], [ %489, %463 ]
  %467 = phi i64 [ %462, %461 ], [ %491, %463 ]
  %468 = or i64 %464, 1
  %469 = getelementptr inbounds i32, i32* %376, i64 %468
  %470 = bitcast i32* %469 to <4 x i32>*
  %471 = load <4 x i32>, <4 x i32>* %470, align 4
  %472 = getelementptr inbounds i32, i32* %469, i64 4
  %473 = bitcast i32* %472 to <4 x i32>*
  %474 = load <4 x i32>, <4 x i32>* %473, align 4
  %475 = icmp sgt <4 x i32> %471, %465
  %476 = icmp sgt <4 x i32> %474, %466
  %477 = select <4 x i1> %475, <4 x i32> %471, <4 x i32> %465
  %478 = select <4 x i1> %476, <4 x i32> %474, <4 x i32> %466
  %479 = or i64 %464, 9
  %480 = getelementptr inbounds i32, i32* %376, i64 %479
  %481 = bitcast i32* %480 to <4 x i32>*
  %482 = load <4 x i32>, <4 x i32>* %481, align 4
  %483 = getelementptr inbounds i32, i32* %480, i64 4
  %484 = bitcast i32* %483 to <4 x i32>*
  %485 = load <4 x i32>, <4 x i32>* %484, align 4
  %486 = icmp sgt <4 x i32> %482, %477
  %487 = icmp sgt <4 x i32> %485, %478
  %488 = select <4 x i1> %486, <4 x i32> %482, <4 x i32> %477
  %489 = select <4 x i1> %487, <4 x i32> %485, <4 x i32> %478
  %490 = add i64 %464, 16
  %491 = add i64 %467, -2
  %492 = icmp eq i64 %491, 0
  br i1 %492, label %493, label %463, !llvm.loop !12

493:                                              ; preds = %463, %451
  %494 = phi <4 x i32> [ undef, %451 ], [ %488, %463 ]
  %495 = phi <4 x i32> [ undef, %451 ], [ %489, %463 ]
  %496 = phi i64 [ 0, %451 ], [ %490, %463 ]
  %497 = phi <4 x i32> [ %455, %451 ], [ %488, %463 ]
  %498 = phi <4 x i32> [ %455, %451 ], [ %489, %463 ]
  %499 = icmp eq i64 %459, 0
  br i1 %499, label %512, label %500

500:                                              ; preds = %493
  %501 = or i64 %496, 1
  %502 = getelementptr inbounds i32, i32* %376, i64 %501
  %503 = bitcast i32* %502 to <4 x i32>*
  %504 = load <4 x i32>, <4 x i32>* %503, align 4
  %505 = getelementptr inbounds i32, i32* %502, i64 4
  %506 = bitcast i32* %505 to <4 x i32>*
  %507 = load <4 x i32>, <4 x i32>* %506, align 4
  %508 = icmp sgt <4 x i32> %507, %498
  %509 = select <4 x i1> %508, <4 x i32> %507, <4 x i32> %498
  %510 = icmp sgt <4 x i32> %504, %497
  %511 = select <4 x i1> %510, <4 x i32> %504, <4 x i32> %497
  br label %512

512:                                              ; preds = %493, %500
  %513 = phi <4 x i32> [ %494, %493 ], [ %511, %500 ]
  %514 = phi <4 x i32> [ %495, %493 ], [ %509, %500 ]
  %515 = icmp sgt <4 x i32> %513, %514
  %516 = select <4 x i1> %515, <4 x i32> %513, <4 x i32> %514
  %517 = shufflevector <4 x i32> %516, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %518 = icmp sgt <4 x i32> %516, %517
  %519 = select <4 x i1> %518, <4 x i32> %516, <4 x i32> %517
  %520 = shufflevector <4 x i32> %519, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %521 = icmp sgt <4 x i32> %519, %520
  %522 = select <4 x i1> %521, <4 x i32> %519, <4 x i32> %520
  %523 = extractelement <4 x i32> %522, i32 0
  %524 = icmp eq i64 %449, %452
  br i1 %524, label %537, label %525

525:                                              ; preds = %512, %446
  %526 = phi i64 [ 1, %446 ], [ %453, %512 ]
  %527 = phi i32 [ %444, %446 ], [ %523, %512 ]
  br label %528

528:                                              ; preds = %525, %528
  %529 = phi i64 [ %535, %528 ], [ %526, %525 ]
  %530 = phi i32 [ %534, %528 ], [ %527, %525 ]
  %531 = getelementptr inbounds i32, i32* %376, i64 %529
  %532 = load i32, i32* %531, align 4
  %533 = icmp sgt i32 %532, %530
  %534 = select i1 %533, i32 %532, i32 %530
  %535 = add nuw nsw i64 %529, 1
  %536 = icmp eq i64 %535, %447
  br i1 %536, label %537, label %528, !llvm.loop !13

537:                                              ; preds = %528, %512, %443
  %538 = phi i32 [ %444, %443 ], [ %523, %512 ], [ %534, %528 ]
  %539 = add nsw i32 %538, %414
  br label %540

540:                                              ; preds = %537, %428
  %541 = phi i32 [ %414, %428 ], [ %539, %537 ]
  %542 = add nuw nsw i64 %413, 1
  %543 = icmp eq i64 %542, 5
  br i1 %543, label %544, label %412

544:                                              ; preds = %540
  %545 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %381, i64 %410, i32 1
  store i32 %437, i32* %545, align 8
  %546 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %381, i64 %410, i32 3
  store i32 0, i32* %546, align 8
  %547 = icmp eq i32 %437, 0
  br i1 %547, label %581, label %548

548:                                              ; preds = %544
  %549 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %381, i64 %410, i32 0, i64 1
  %550 = load %struct.HuffmanCode*, %struct.HuffmanCode** %549, align 8
  %551 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %550, i64 0, i32 1
  %552 = load i16, i16* %551, align 2
  %553 = zext i16 %552 to i32
  %554 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %381, i64 %410, i32 0, i64 2
  %555 = load %struct.HuffmanCode*, %struct.HuffmanCode** %554, align 8
  %556 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %555, i64 0, i32 1
  %557 = load i16, i16* %556, align 2
  %558 = zext i16 %557 to i32
  %559 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %381, i64 %410, i32 0, i64 3
  %560 = load %struct.HuffmanCode*, %struct.HuffmanCode** %559, align 8
  %561 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %560, i64 0, i32 1
  %562 = load i16, i16* %561, align 2
  %563 = zext i16 %562 to i32
  %564 = shl i32 %563, 24
  %565 = shl nuw i32 %553, 16
  %566 = or i32 %565, %558
  %567 = or i32 %566, %564
  %568 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %381, i64 %410, i32 2
  store i32 %567, i32* %568, align 4
  %569 = icmp eq i32 %439, 0
  br i1 %569, label %570, label %581

570:                                              ; preds = %548
  %571 = load %struct.HuffmanCode*, %struct.HuffmanCode** %411, align 8
  %572 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %571, i64 0, i32 1
  %573 = load i16, i16* %572, align 2
  %574 = icmp ult i16 %573, 256
  br i1 %574, label %575, label %581

575:                                              ; preds = %570
  store i32 1, i32* %546, align 8
  %576 = load i16, i16* %572, align 2
  %577 = zext i16 %576 to i32
  %578 = shl nuw nsw i32 %577, 8
  %579 = or i32 %578, %567
  store i32 %579, i32* %568, align 4
  %580 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %381, i64 %410, i32 4
  store i32 0, i32* %580, align 4
  br label %644

581:                                              ; preds = %570, %548, %544
  %582 = icmp slt i32 %541, 6
  %583 = zext i1 %582 to i32
  %584 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %381, i64 %410, i32 4
  store i32 %583, i32* %584, align 4
  br i1 %582, label %585, label %644

585:                                              ; preds = %581
  %586 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %381, i64 %410, i32 0, i64 1
  %587 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %381, i64 %410, i32 0, i64 2
  %588 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %381, i64 %410, i32 0, i64 3
  %589 = load %struct.HuffmanCode*, %struct.HuffmanCode** %411, align 8
  br label %590

590:                                              ; preds = %641, %585
  %591 = phi i64 [ 0, %585 ], [ %642, %641 ]
  %592 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %381, i64 %410, i32 5, i64 %591
  %593 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %589, i64 %591, i32 0
  %594 = load i8, i8* %593, align 2
  %595 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %589, i64 %591, i32 1
  %596 = load i16, i16* %595, align 2
  %597 = zext i16 %596 to i32
  %598 = icmp ugt i16 %596, 255
  br i1 %598, label %599, label %604

599:                                              ; preds = %590
  %600 = zext i8 %594 to i32
  %601 = or i32 %600, 256
  %602 = getelementptr inbounds %struct.HuffmanCode32, %struct.HuffmanCode32* %592, i64 0, i32 0
  store i32 %601, i32* %602, align 4
  %603 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %381, i64 %410, i32 5, i64 %591, i32 1
  store i32 %597, i32* %603, align 4
  br label %641

604:                                              ; preds = %590
  %605 = getelementptr inbounds %struct.HuffmanCode32, %struct.HuffmanCode32* %592, i64 0, i32 0
  %606 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %381, i64 %410, i32 5, i64 %591, i32 1
  %607 = zext i8 %594 to i32
  store i32 %607, i32* %605, align 4
  %608 = shl nuw nsw i32 %597, 8
  store i32 %608, i32* %606, align 4
  %609 = trunc i64 %591 to i32
  %610 = lshr i32 %609, %607
  %611 = load %struct.HuffmanCode*, %struct.HuffmanCode** %586, align 8
  %612 = zext i32 %610 to i64
  %613 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %611, i64 %612
  %614 = bitcast %struct.HuffmanCode* %613 to i32*
  %615 = load i32, i32* %614, align 2
  %616 = and i32 %615, -65536
  %617 = and i32 %615, 255
  %618 = add nuw nsw i32 %617, %607
  store i32 %618, i32* %605, align 4
  %619 = or i32 %616, %608
  store i32 %619, i32* %606, align 4
  %620 = lshr i32 %610, %617
  %621 = load %struct.HuffmanCode*, %struct.HuffmanCode** %587, align 8
  %622 = zext i32 %620 to i64
  %623 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %621, i64 %622
  %624 = bitcast %struct.HuffmanCode* %623 to i32*
  %625 = load i32, i32* %624, align 2
  %626 = lshr i32 %625, 16
  %627 = and i32 %625, 255
  %628 = add nuw nsw i32 %627, %618
  store i32 %628, i32* %605, align 4
  %629 = or i32 %626, %619
  store i32 %629, i32* %606, align 4
  %630 = lshr i32 %620, %627
  %631 = load %struct.HuffmanCode*, %struct.HuffmanCode** %588, align 8
  %632 = zext i32 %630 to i64
  %633 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %631, i64 %632
  %634 = bitcast %struct.HuffmanCode* %633 to i32*
  %635 = load i32, i32* %634, align 2
  %636 = lshr i32 %635, 16
  %637 = and i32 %635, 255
  %638 = add nuw nsw i32 %637, %628
  store i32 %638, i32* %605, align 4
  %639 = shl i32 %636, 24
  %640 = or i32 %639, %629
  store i32 %640, i32* %606, align 4
  br label %641

641:                                              ; preds = %604, %599
  %642 = add nuw nsw i64 %591, 1
  %643 = icmp eq i64 %642, 64
  br i1 %643, label %644, label %590

644:                                              ; preds = %641, %744, %575, %581
  %645 = phi %struct.HuffmanCode* [ %441, %581 ], [ %441, %575 ], [ %396, %744 ], [ %441, %641 ]
  %646 = add nuw nsw i64 %395, 1
  %647 = icmp eq i64 %646, %391
  br i1 %647, label %648, label %394

648:                                              ; preds = %644, %387
  %649 = bitcast i32** %6 to i64*
  %650 = load i64, i64* %649, align 8
  %651 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 15, i32 6
  %652 = bitcast i32** %651 to i64*
  store i64 %650, i64* %652, align 8
  %653 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 15, i32 7
  store i32 %360, i32* %653, align 8
  %654 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 15, i32 8
  store %struct.HTreeGroup* %381, %struct.HTreeGroup** %654, align 8
  %655 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 15, i32 9
  %656 = bitcast %struct.HuffmanCode** %655 to i8**
  store i8* %379, i8** %656, align 8
  br label %657

657:                                              ; preds = %402, %405, %738, %741, %744, %412, %230, %301, %648, %392, %359
  %658 = phi %struct.HTreeGroup* [ null, %359 ], [ %381, %392 ], [ %381, %648 ], [ null, %301 ], [ null, %230 ], [ %381, %412 ], [ %381, %744 ], [ %381, %741 ], [ %381, %738 ], [ %381, %405 ], [ %381, %402 ]
  %659 = phi %struct.HuffmanCode* [ null, %359 ], [ %380, %392 ], [ %380, %648 ], [ null, %301 ], [ null, %230 ], [ %380, %412 ], [ %380, %744 ], [ %380, %741 ], [ %380, %738 ], [ %380, %405 ], [ %380, %402 ]
  %660 = phi i8* [ null, %359 ], [ %375, %392 ], [ %375, %648 ], [ null, %301 ], [ null, %230 ], [ %375, %412 ], [ %375, %744 ], [ %375, %741 ], [ %375, %738 ], [ %375, %405 ], [ %375, %402 ]
  %661 = phi i8* [ %362, %359 ], [ %362, %392 ], [ %362, %648 ], [ null, %301 ], [ null, %230 ], [ %362, %412 ], [ %362, %744 ], [ %362, %741 ], [ %362, %738 ], [ %362, %405 ], [ %362, %402 ]
  %662 = phi i1 [ true, %359 ], [ true, %392 ], [ false, %648 ], [ true, %301 ], [ true, %230 ], [ true, %412 ], [ true, %744 ], [ true, %741 ], [ true, %738 ], [ true, %405 ], [ true, %402 ]
  call void @WebPSafeFree(i8* %660) #4
  call void @WebPSafeFree(i8* %661) #4
  br i1 %662, label %663, label %669

663:                                              ; preds = %657
  %664 = bitcast i32** %6 to i8**
  %665 = load i8*, i8** %664, align 8
  call void @WebPSafeFree(i8* %665) #4
  %666 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %659, i64 0, i32 0
  call void @WebPSafeFree(i8* %666) #4
  call void @VP8LHtreeGroupsFree(%struct.HTreeGroup* %658) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %221) #4
  br label %667

667:                                              ; preds = %65, %17, %55, %205, %663
  %668 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 0
  store i32 3, i32* %668, align 8
  br label %714

669:                                              ; preds = %657
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %221) #4
  %670 = icmp sgt i32 %220, 0
  br i1 %670, label %671, label %679

671:                                              ; preds = %669
  %672 = shl i32 1, %220
  %673 = getelementptr inbounds %struct.VP8LMetadata, %struct.VP8LMetadata* %8, i64 0, i32 0
  store i32 %672, i32* %673, align 8
  %674 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 15, i32 1
  %675 = call i32 @VP8LColorCacheInit(%struct.VP8LColorCache* %674, i32 %220) #4
  %676 = icmp eq i32 %675, 0
  br i1 %676, label %677, label %681

677:                                              ; preds = %671
  %678 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 0
  store i32 1, i32* %678, align 8
  br label %714

679:                                              ; preds = %669
  %680 = getelementptr inbounds %struct.VP8LMetadata, %struct.VP8LMetadata* %8, i64 0, i32 0
  store i32 0, i32* %680, align 8
  br label %681

681:                                              ; preds = %671, %679
  %682 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 15, i32 4
  %683 = load i32, i32* %682, align 4
  %684 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 10
  store i32 %210, i32* %684, align 4
  %685 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 11
  store i32 %1, i32* %685, align 8
  %686 = shl i32 1, %683
  %687 = add i32 %210, -1
  %688 = add i32 %687, %686
  %689 = lshr i32 %688, %683
  %690 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 15, i32 5
  store i32 %689, i32* %690, align 8
  %691 = icmp eq i32 %683, 0
  %692 = shl nsw i32 -1, %683
  %693 = xor i32 %692, -1
  %694 = select i1 %691, i32 -1, i32 %693
  %695 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 15, i32 3
  store i32 %694, i32* %695, align 8
  br i1 %9, label %696, label %698

696:                                              ; preds = %681
  %697 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 1
  store i32 1, i32* %697, align 4
  br label %716

698:                                              ; preds = %681
  %699 = sext i32 %210 to i64
  %700 = sext i32 %1 to i64
  %701 = mul nsw i64 %699, %700
  %702 = call i8* @WebPSafeMalloc(i64 %701, i64 4) #4
  %703 = icmp eq i8* %702, null
  br i1 %703, label %704, label %706

704:                                              ; preds = %698
  %705 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 0
  store i32 1, i32* %705, align 8
  br label %714

706:                                              ; preds = %698
  %707 = bitcast i8* %702 to i32*
  %708 = call fastcc i32 @DecodeImageData(%struct.VP8LDecoder* %3, i32* nonnull %707, i32 %210, i32 %1, i32 %1, void (%struct.VP8LDecoder*, i32)* null)
  %709 = icmp eq i32 %708, 0
  br i1 %709, label %714, label %710

710:                                              ; preds = %706
  %711 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 6, i32 5
  %712 = load i32, i32* %711, align 4
  %713 = icmp eq i32 %712, 0
  br i1 %713, label %716, label %714

714:                                              ; preds = %710, %706, %217, %667, %677, %704
  %715 = phi i8* [ %702, %710 ], [ %702, %706 ], [ null, %217 ], [ null, %667 ], [ null, %677 ], [ null, %704 ]
  call void @WebPSafeFree(i8* %715) #4
  br label %723

716:                                              ; preds = %710, %696
  %717 = phi i8* [ null, %696 ], [ %702, %710 ]
  %718 = icmp eq i32** %4, null
  br i1 %718, label %721, label %719

719:                                              ; preds = %716
  %720 = bitcast i32** %4 to i8**
  store i8* %717, i8** %720, align 8
  br label %721

721:                                              ; preds = %716, %719
  %722 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 13
  store i32 0, i32* %722, align 8
  br i1 %9, label %736, label %723

723:                                              ; preds = %721, %714
  %724 = phi i32 [ 0, %714 ], [ 1, %721 ]
  %725 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 15, i32 6
  %726 = bitcast i32** %725 to i8**
  %727 = load i8*, i8** %726, align 8
  call void @WebPSafeFree(i8* %727) #4
  %728 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 15, i32 9
  %729 = bitcast %struct.HuffmanCode** %728 to i8**
  %730 = load i8*, i8** %729, align 8
  call void @WebPSafeFree(i8* %730) #4
  %731 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 15, i32 8
  %732 = load %struct.HTreeGroup*, %struct.HTreeGroup** %731, align 8
  call void @VP8LHtreeGroupsFree(%struct.HTreeGroup* %732) #4
  %733 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 15, i32 1
  call void @VP8LColorCacheClear(%struct.VP8LColorCache* %733) #4
  %734 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %3, i64 0, i32 15, i32 2
  call void @VP8LColorCacheClear(%struct.VP8LColorCache* %734) #4
  %735 = bitcast %struct.VP8LMetadata* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %735, i8 0, i64 88, i1 false) #4
  br label %736

736:                                              ; preds = %723, %721
  %737 = phi i32 [ 1, %721 ], [ %724, %723 ]
  ret i32 %737

738:                                              ; preds = %405
  %739 = call fastcc i32 @ReadHuffmanCode(i32 256, %struct.VP8LDecoder* %3, i32* %376, %struct.HuffmanCode* null) #4
  %740 = icmp eq i32 %739, 0
  br i1 %740, label %657, label %741

741:                                              ; preds = %738
  %742 = call fastcc i32 @ReadHuffmanCode(i32 256, %struct.VP8LDecoder* %3, i32* %376, %struct.HuffmanCode* null) #4
  %743 = icmp eq i32 %742, 0
  br i1 %743, label %657, label %744

744:                                              ; preds = %741
  %745 = call fastcc i32 @ReadHuffmanCode(i32 40, %struct.VP8LDecoder* %3, i32* %376, %struct.HuffmanCode* null) #4
  %746 = icmp eq i32 %745, 0
  br i1 %746, label %657, label %644

747:                                              ; preds = %325
  %748 = add nsw i32 %328, 1
  store i32 %328, i32* %335, align 4
  %749 = load i32*, i32** %6, align 8
  br label %750

750:                                              ; preds = %747, %325
  %751 = phi i32* [ %749, %747 ], [ %331, %325 ]
  %752 = phi i32 [ %328, %747 ], [ %336, %325 ]
  %753 = phi i32 [ %748, %747 ], [ %328, %325 ]
  %754 = getelementptr inbounds i32, i32* %751, i64 %330
  store i32 %752, i32* %754, align 4
  %755 = add nuw nsw i64 %312, 2
  %756 = add i64 %314, -2
  %757 = icmp eq i64 %756, 0
  br i1 %757, label %338, label %311
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8LDecodeAlphaImageStream(%struct.ALPHDecoder* nocapture readonly, i32) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %0, i64 0, i32 5
  %4 = load %struct.VP8LDecoder*, %struct.VP8LDecoder** %3, align 8
  %5 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 12
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, %1
  br i1 %7, label %8, label %783

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %0, i64 0, i32 7
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 4
  %14 = load i32*, i32** %13, align 8
  br label %20

15:                                               ; preds = %8
  tail call void @WebPInitAlphaProcessing() #4
  %16 = load i32, i32* %9, align 8
  %17 = icmp eq i32 %16, 0
  %18 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 4
  %19 = load i32*, i32** %18, align 8
  br i1 %17, label %777, label %20

20:                                               ; preds = %12, %15
  %21 = phi i32* [ %14, %12 ], [ %19, %15 ]
  %22 = bitcast i32* %21 to i8*
  %23 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 10
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 11
  %26 = load i32, i32* %25, align 8
  %27 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 13
  %28 = load i32, i32* %27, align 8
  %29 = sdiv i32 %28, %24
  %30 = srem i32 %28, %24
  %31 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 6
  %32 = mul nsw i32 %26, %24
  %33 = mul nsw i32 %24, %1
  %34 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 15, i32 3
  %35 = load i32, i32* %34, align 8
  %36 = icmp slt i32 %28, %33
  br i1 %36, label %39, label %37

37:                                               ; preds = %20
  %38 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 6, i32 5
  br label %742

39:                                               ; preds = %20
  %40 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 15, i32 4
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %56, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 15, i32 5
  %45 = load i32, i32* %44, align 8
  %46 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 15, i32 6
  %47 = load i32*, i32** %46, align 8
  %48 = ashr i32 %29, %41
  %49 = mul nsw i32 %45, %48
  %50 = ashr i32 %30, %41
  %51 = add nsw i32 %49, %50
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i32, i32* %47, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = sext i32 %54 to i64
  br label %56

56:                                               ; preds = %43, %39
  %57 = phi i64 [ %55, %43 ], [ 0, %39 ]
  %58 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 6, i32 5
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %742

61:                                               ; preds = %56
  %62 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 15, i32 8
  %63 = load %struct.HTreeGroup*, %struct.HTreeGroup** %62, align 8
  %64 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %63, i64 %57
  %65 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 15, i32 5
  %66 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 15, i32 6
  %67 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 6, i32 4
  %68 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %31, i64 0, i32 0
  %69 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 6, i32 3
  %70 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 6, i32 2
  br label %71

71:                                               ; preds = %737, %61
  %72 = phi i32 [ %29, %61 ], [ %725, %737 ]
  %73 = phi %struct.HTreeGroup* [ %64, %61 ], [ %724, %737 ]
  %74 = phi i32 [ %30, %61 ], [ %723, %737 ]
  %75 = phi i32 [ %28, %61 ], [ %722, %737 ]
  %76 = and i32 %74, %35
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %96

78:                                               ; preds = %71
  %79 = load i32, i32* %40, align 4
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %92, label %81

81:                                               ; preds = %78
  %82 = load i32, i32* %65, align 8
  %83 = load i32*, i32** %66, align 8
  %84 = ashr i32 %72, %79
  %85 = mul nsw i32 %82, %84
  %86 = ashr i32 %74, %79
  %87 = add nsw i32 %85, %86
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i32, i32* %83, i64 %88
  %90 = load i32, i32* %89, align 4
  %91 = sext i32 %90 to i64
  br label %92

92:                                               ; preds = %81, %78
  %93 = phi i64 [ %91, %81 ], [ 0, %78 ]
  %94 = load %struct.HTreeGroup*, %struct.HTreeGroup** %62, align 8
  %95 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %94, i64 %93
  br label %96

96:                                               ; preds = %92, %71
  %97 = phi %struct.HTreeGroup* [ %95, %92 ], [ %73, %71 ]
  %98 = load i32, i32* %67, align 8
  %99 = icmp sgt i32 %98, 31
  br i1 %99, label %100, label %102

100:                                              ; preds = %96
  tail call void @VP8LDoFillBitWindow(%struct.VP8LBitReader* %31) #4
  %101 = load i32, i32* %67, align 8
  br label %102

102:                                              ; preds = %100, %96
  %103 = phi i32 [ %98, %96 ], [ %101, %100 ]
  %104 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %97, i64 0, i32 0, i64 0
  %105 = load %struct.HuffmanCode*, %struct.HuffmanCode** %104, align 8
  %106 = load i64, i64* %68, align 8
  %107 = and i32 %103, 63
  %108 = zext i32 %107 to i64
  %109 = lshr i64 %106, %108
  %110 = and i64 %109, 255
  %111 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %105, i64 %110
  %112 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %111, i64 0, i32 0
  %113 = load i8, i8* %112, align 2
  %114 = zext i8 %113 to i32
  %115 = add nsw i32 %114, -8
  %116 = icmp sgt i32 %115, 0
  br i1 %116, label %117, label %135

117:                                              ; preds = %102
  %118 = add nsw i32 %103, 8
  store i32 %118, i32* %67, align 8
  %119 = and i32 %118, 63
  %120 = zext i32 %119 to i64
  %121 = lshr i64 %106, %120
  %122 = trunc i64 %121 to i32
  %123 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %105, i64 %110, i32 1
  %124 = load i16, i16* %123, align 2
  %125 = zext i16 %124 to i64
  %126 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %111, i64 %125
  %127 = shl nsw i32 -1, %115
  %128 = xor i32 %127, -1
  %129 = and i32 %128, %122
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %126, i64 %130
  %132 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %131, i64 0, i32 0
  %133 = load i8, i8* %132, align 2
  %134 = zext i8 %133 to i32
  br label %135

135:                                              ; preds = %117, %102
  %136 = phi i32 [ %134, %117 ], [ %114, %102 ]
  %137 = phi i32 [ %118, %117 ], [ %103, %102 ]
  %138 = phi %struct.HuffmanCode* [ %131, %117 ], [ %111, %102 ]
  %139 = add nsw i32 %137, %136
  store i32 %139, i32* %67, align 8
  %140 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %138, i64 0, i32 1
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = icmp ult i16 %141, 256
  br i1 %143, label %144, label %158

144:                                              ; preds = %135
  %145 = trunc i16 %141 to i8
  %146 = sext i32 %75 to i64
  %147 = getelementptr inbounds i8, i8* %22, i64 %146
  store i8 %145, i8* %147, align 1
  %148 = add nsw i32 %75, 1
  %149 = add nsw i32 %74, 1
  %150 = icmp slt i32 %149, %24
  br i1 %150, label %721, label %151

151:                                              ; preds = %144
  %152 = add nsw i32 %72, 1
  %153 = icmp slt i32 %72, %1
  %154 = and i32 %152, 15
  %155 = icmp eq i32 %154, 0
  %156 = and i1 %153, %155
  br i1 %156, label %157, label %721

157:                                              ; preds = %151
  tail call fastcc void @ExtractPalettedAlphaRows(%struct.VP8LDecoder* %4, i32 %152) #4
  br label %721

158:                                              ; preds = %135
  %159 = icmp ult i16 %141, 280
  br i1 %159, label %160, label %748

160:                                              ; preds = %158
  %161 = add nsw i32 %142, -256
  %162 = icmp slt i32 %161, 4
  br i1 %162, label %173, label %163

163:                                              ; preds = %160
  %164 = add nsw i32 %142, -258
  %165 = ashr i32 %164, 1
  %166 = and i32 %161, 1
  %167 = or i32 %166, 2
  %168 = shl i32 %167, %165
  %169 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %31, i32 %165) #4
  %170 = add i32 %169, %168
  %171 = load i64, i64* %68, align 8
  %172 = load i32, i32* %67, align 8
  br label %173

173:                                              ; preds = %163, %160
  %174 = phi i32 [ %172, %163 ], [ %139, %160 ]
  %175 = phi i64 [ %171, %163 ], [ %106, %160 ]
  %176 = phi i32 [ %170, %163 ], [ %161, %160 ]
  %177 = add i32 %176, 1
  %178 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %97, i64 0, i32 0, i64 4
  %179 = load %struct.HuffmanCode*, %struct.HuffmanCode** %178, align 8
  %180 = and i32 %174, 63
  %181 = zext i32 %180 to i64
  %182 = lshr i64 %175, %181
  %183 = and i64 %182, 255
  %184 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %179, i64 %183
  %185 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %184, i64 0, i32 0
  %186 = load i8, i8* %185, align 2
  %187 = zext i8 %186 to i32
  %188 = add nsw i32 %187, -8
  %189 = icmp sgt i32 %188, 0
  br i1 %189, label %190, label %208

190:                                              ; preds = %173
  %191 = add nsw i32 %174, 8
  store i32 %191, i32* %67, align 8
  %192 = and i32 %191, 63
  %193 = zext i32 %192 to i64
  %194 = lshr i64 %175, %193
  %195 = trunc i64 %194 to i32
  %196 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %179, i64 %183, i32 1
  %197 = load i16, i16* %196, align 2
  %198 = zext i16 %197 to i64
  %199 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %184, i64 %198
  %200 = shl nsw i32 -1, %188
  %201 = xor i32 %200, -1
  %202 = and i32 %201, %195
  %203 = zext i32 %202 to i64
  %204 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %199, i64 %203
  %205 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %204, i64 0, i32 0
  %206 = load i8, i8* %205, align 2
  %207 = zext i8 %206 to i32
  br label %208

208:                                              ; preds = %190, %173
  %209 = phi i32 [ %207, %190 ], [ %187, %173 ]
  %210 = phi i32 [ %191, %190 ], [ %174, %173 ]
  %211 = phi %struct.HuffmanCode* [ %204, %190 ], [ %184, %173 ]
  %212 = add nsw i32 %210, %209
  store i32 %212, i32* %67, align 8
  %213 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %211, i64 0, i32 1
  %214 = load i16, i16* %213, align 2
  %215 = zext i16 %214 to i32
  %216 = icmp sgt i32 %212, 31
  br i1 %216, label %217, label %218

217:                                              ; preds = %208
  tail call void @VP8LDoFillBitWindow(%struct.VP8LBitReader* %31) #4
  br label %218

218:                                              ; preds = %217, %208
  %219 = icmp ult i16 %214, 4
  br i1 %219, label %228, label %220

220:                                              ; preds = %218
  %221 = add nsw i32 %215, -2
  %222 = ashr i32 %221, 1
  %223 = and i32 %215, 1
  %224 = or i32 %223, 2
  %225 = shl i32 %224, %222
  %226 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %31, i32 %222) #4
  %227 = add i32 %226, %225
  br label %228

228:                                              ; preds = %220, %218
  %229 = phi i32 [ %227, %220 ], [ %215, %218 ]
  %230 = add i32 %229, 1
  %231 = icmp sgt i32 %230, 120
  br i1 %231, label %232, label %234

232:                                              ; preds = %228
  %233 = add nsw i32 %229, -119
  br label %246

234:                                              ; preds = %228
  %235 = sext i32 %229 to i64
  %236 = getelementptr inbounds [120 x i8], [120 x i8]* @kCodeToPlane, i64 0, i64 %235
  %237 = load i8, i8* %236, align 1
  %238 = zext i8 %237 to i32
  %239 = lshr i32 %238, 4
  %240 = and i32 %238, 15
  %241 = sub nsw i32 8, %240
  %242 = mul nsw i32 %239, %24
  %243 = add nsw i32 %242, %241
  %244 = icmp sgt i32 %243, 1
  %245 = select i1 %244, i32 %243, i32 1
  br label %246

246:                                              ; preds = %234, %232
  %247 = phi i32 [ %233, %232 ], [ %245, %234 ]
  %248 = icmp slt i32 %75, %247
  %249 = sub nsw i32 %32, %75
  %250 = icmp slt i32 %249, %177
  %251 = or i1 %250, %248
  br i1 %251, label %748, label %252

252:                                              ; preds = %246
  %253 = sext i32 %75 to i64
  %254 = getelementptr inbounds i8, i8* %22, i64 %253
  %255 = sext i32 %247 to i64
  %256 = sub nsw i64 0, %255
  %257 = getelementptr inbounds i8, i8* %254, i64 %256
  %258 = icmp sgt i32 %177, 7
  br i1 %258, label %259, label %544

259:                                              ; preds = %252
  switch i32 %247, label %544 [
    i32 1, label %260
    i32 2, label %264
    i32 4, label %270
  ]

260:                                              ; preds = %259
  %261 = load i8, i8* %257, align 1
  %262 = zext i8 %261 to i32
  %263 = mul nuw i32 %262, 16843009
  br label %274

264:                                              ; preds = %259
  %265 = bitcast i8* %257 to i16*
  %266 = load i16, i16* %265, align 1
  %267 = zext i16 %266 to i32
  %268 = mul nuw i32 %267, 65537
  %269 = trunc i16 %266 to i8
  br label %274

270:                                              ; preds = %259
  %271 = bitcast i8* %257 to i32*
  %272 = load i32, i32* %271, align 1
  %273 = trunc i32 %272 to i8
  br label %274

274:                                              ; preds = %270, %264, %260
  %275 = phi i8 [ %273, %270 ], [ %269, %264 ], [ %261, %260 ]
  %276 = phi i32 [ %272, %270 ], [ %268, %264 ], [ %263, %260 ]
  %277 = ptrtoint i8* %254 to i64
  %278 = and i64 %277, 3
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %291, label %280

280:                                              ; preds = %274
  %281 = getelementptr inbounds i8, i8* %257, i64 1
  %282 = getelementptr inbounds i8, i8* %254, i64 1
  store i8 %275, i8* %254, align 1
  %283 = shl i32 %276, 24
  %284 = lshr i32 %276, 8
  %285 = or i32 %283, %284
  %286 = ptrtoint i8* %282 to i64
  %287 = and i64 %286, 3
  %288 = icmp eq i64 %287, 0
  br i1 %288, label %291, label %377

289:                                              ; preds = %377
  %290 = icmp sgt i32 %388, 3
  br i1 %290, label %291, label %400

291:                                              ; preds = %289, %280, %274
  %292 = phi i32 [ %387, %289 ], [ %276, %274 ], [ %285, %280 ]
  %293 = phi i32 [ %388, %289 ], [ %177, %274 ], [ %176, %280 ]
  %294 = phi i8* [ %384, %289 ], [ %254, %274 ], [ %282, %280 ]
  %295 = phi i8* [ %383, %289 ], [ %257, %274 ], [ %281, %280 ]
  %296 = lshr i32 %293, 2
  %297 = bitcast i8* %294 to i32*
  %298 = zext i32 %296 to i64
  %299 = icmp ugt i64 %298, 1
  %300 = select i1 %299, i64 %298, i64 1
  %301 = icmp ult i64 %300, 8
  br i1 %301, label %302, label %304

302:                                              ; preds = %375, %291
  %303 = phi i64 [ 0, %291 ], [ %305, %375 ]
  br label %392

304:                                              ; preds = %291
  %305 = and i64 %300, 1073741816
  %306 = insertelement <4 x i32> undef, i32 %292, i32 0
  %307 = shufflevector <4 x i32> %306, <4 x i32> undef, <4 x i32> zeroinitializer
  %308 = insertelement <4 x i32> undef, i32 %292, i32 0
  %309 = shufflevector <4 x i32> %308, <4 x i32> undef, <4 x i32> zeroinitializer
  %310 = add nsw i64 %305, -8
  %311 = lshr exact i64 %310, 3
  %312 = add nuw nsw i64 %311, 1
  %313 = and i64 %312, 7
  %314 = icmp ult i64 %310, 56
  br i1 %314, label %362, label %315

315:                                              ; preds = %304
  %316 = sub nsw i64 %312, %313
  br label %317

317:                                              ; preds = %317, %315
  %318 = phi i64 [ 0, %315 ], [ %359, %317 ]
  %319 = phi i64 [ %316, %315 ], [ %360, %317 ]
  %320 = getelementptr inbounds i32, i32* %297, i64 %318
  %321 = bitcast i32* %320 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %321, align 4
  %322 = getelementptr inbounds i32, i32* %320, i64 4
  %323 = bitcast i32* %322 to <4 x i32>*
  store <4 x i32> %309, <4 x i32>* %323, align 4
  %324 = or i64 %318, 8
  %325 = getelementptr inbounds i32, i32* %297, i64 %324
  %326 = bitcast i32* %325 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %326, align 4
  %327 = getelementptr inbounds i32, i32* %325, i64 4
  %328 = bitcast i32* %327 to <4 x i32>*
  store <4 x i32> %309, <4 x i32>* %328, align 4
  %329 = or i64 %318, 16
  %330 = getelementptr inbounds i32, i32* %297, i64 %329
  %331 = bitcast i32* %330 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %331, align 4
  %332 = getelementptr inbounds i32, i32* %330, i64 4
  %333 = bitcast i32* %332 to <4 x i32>*
  store <4 x i32> %309, <4 x i32>* %333, align 4
  %334 = or i64 %318, 24
  %335 = getelementptr inbounds i32, i32* %297, i64 %334
  %336 = bitcast i32* %335 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %336, align 4
  %337 = getelementptr inbounds i32, i32* %335, i64 4
  %338 = bitcast i32* %337 to <4 x i32>*
  store <4 x i32> %309, <4 x i32>* %338, align 4
  %339 = or i64 %318, 32
  %340 = getelementptr inbounds i32, i32* %297, i64 %339
  %341 = bitcast i32* %340 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %341, align 4
  %342 = getelementptr inbounds i32, i32* %340, i64 4
  %343 = bitcast i32* %342 to <4 x i32>*
  store <4 x i32> %309, <4 x i32>* %343, align 4
  %344 = or i64 %318, 40
  %345 = getelementptr inbounds i32, i32* %297, i64 %344
  %346 = bitcast i32* %345 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %346, align 4
  %347 = getelementptr inbounds i32, i32* %345, i64 4
  %348 = bitcast i32* %347 to <4 x i32>*
  store <4 x i32> %309, <4 x i32>* %348, align 4
  %349 = or i64 %318, 48
  %350 = getelementptr inbounds i32, i32* %297, i64 %349
  %351 = bitcast i32* %350 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %351, align 4
  %352 = getelementptr inbounds i32, i32* %350, i64 4
  %353 = bitcast i32* %352 to <4 x i32>*
  store <4 x i32> %309, <4 x i32>* %353, align 4
  %354 = or i64 %318, 56
  %355 = getelementptr inbounds i32, i32* %297, i64 %354
  %356 = bitcast i32* %355 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %356, align 4
  %357 = getelementptr inbounds i32, i32* %355, i64 4
  %358 = bitcast i32* %357 to <4 x i32>*
  store <4 x i32> %309, <4 x i32>* %358, align 4
  %359 = add i64 %318, 64
  %360 = add i64 %319, -8
  %361 = icmp eq i64 %360, 0
  br i1 %361, label %362, label %317, !llvm.loop !15

362:                                              ; preds = %317, %304
  %363 = phi i64 [ 0, %304 ], [ %359, %317 ]
  %364 = icmp eq i64 %313, 0
  br i1 %364, label %375, label %365

365:                                              ; preds = %362, %365
  %366 = phi i64 [ %372, %365 ], [ %363, %362 ]
  %367 = phi i64 [ %373, %365 ], [ %313, %362 ]
  %368 = getelementptr inbounds i32, i32* %297, i64 %366
  %369 = bitcast i32* %368 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %369, align 4
  %370 = getelementptr inbounds i32, i32* %368, i64 4
  %371 = bitcast i32* %370 to <4 x i32>*
  store <4 x i32> %309, <4 x i32>* %371, align 4
  %372 = add i64 %366, 8
  %373 = add i64 %367, -1
  %374 = icmp eq i64 %373, 0
  br i1 %374, label %375, label %365, !llvm.loop !16

375:                                              ; preds = %365, %362
  %376 = icmp eq i64 %300, %305
  br i1 %376, label %397, label %302

377:                                              ; preds = %280, %377
  %378 = phi i32 [ %388, %377 ], [ %176, %280 ]
  %379 = phi i32 [ %387, %377 ], [ %285, %280 ]
  %380 = phi i8* [ %384, %377 ], [ %282, %280 ]
  %381 = phi i8* [ %383, %377 ], [ %281, %280 ]
  %382 = load i8, i8* %381, align 1
  %383 = getelementptr inbounds i8, i8* %381, i64 1
  %384 = getelementptr inbounds i8, i8* %380, i64 1
  store i8 %382, i8* %380, align 1
  %385 = shl i32 %379, 24
  %386 = lshr i32 %379, 8
  %387 = or i32 %385, %386
  %388 = add nsw i32 %378, -1
  %389 = ptrtoint i8* %384 to i64
  %390 = and i64 %389, 3
  %391 = icmp eq i64 %390, 0
  br i1 %391, label %289, label %377

392:                                              ; preds = %302, %392
  %393 = phi i64 [ %395, %392 ], [ %303, %302 ]
  %394 = getelementptr inbounds i32, i32* %297, i64 %393
  store i32 %292, i32* %394, align 4
  %395 = add nuw nsw i64 %393, 1
  %396 = icmp ult i64 %395, %298
  br i1 %396, label %392, label %397, !llvm.loop !17

397:                                              ; preds = %392, %375
  %398 = phi i64 [ %305, %375 ], [ %395, %392 ]
  %399 = trunc i64 %398 to i32
  br label %400

400:                                              ; preds = %397, %289
  %401 = phi i32 [ %388, %289 ], [ %293, %397 ]
  %402 = phi i8* [ %384, %289 ], [ %294, %397 ]
  %403 = phi i8* [ %383, %289 ], [ %295, %397 ]
  %404 = phi i32 [ 0, %289 ], [ %399, %397 ]
  %405 = shl i32 %404, 2
  %406 = icmp slt i32 %405, %401
  br i1 %406, label %407, label %680

407:                                              ; preds = %400
  %408 = zext i32 %404 to i64
  %409 = shl nuw nsw i64 %408, 2
  %410 = zext i32 %401 to i64
  %411 = sub nsw i64 %410, %409
  %412 = icmp ult i64 %411, 32
  br i1 %412, label %506, label %413

413:                                              ; preds = %407
  %414 = getelementptr i8, i8* %402, i64 %409
  %415 = getelementptr i8, i8* %402, i64 %410
  %416 = getelementptr i8, i8* %403, i64 %409
  %417 = getelementptr i8, i8* %403, i64 %410
  %418 = icmp ult i8* %414, %417
  %419 = icmp ult i8* %416, %415
  %420 = and i1 %418, %419
  br i1 %420, label %506, label %421

421:                                              ; preds = %413
  %422 = and i64 %411, -32
  %423 = add nsw i64 %409, %422
  %424 = add nsw i64 %422, -32
  %425 = lshr exact i64 %424, 5
  %426 = add nuw nsw i64 %425, 1
  %427 = and i64 %426, 3
  %428 = icmp ult i64 %424, 96
  br i1 %428, label %484, label %429

429:                                              ; preds = %421
  %430 = sub nsw i64 %426, %427
  br label %431

431:                                              ; preds = %431, %429
  %432 = phi i64 [ 0, %429 ], [ %481, %431 ]
  %433 = phi i64 [ %430, %429 ], [ %482, %431 ]
  %434 = add i64 %409, %432
  %435 = getelementptr inbounds i8, i8* %403, i64 %434
  %436 = bitcast i8* %435 to <16 x i8>*
  %437 = load <16 x i8>, <16 x i8>* %436, align 1, !alias.scope !18
  %438 = getelementptr inbounds i8, i8* %435, i64 16
  %439 = bitcast i8* %438 to <16 x i8>*
  %440 = load <16 x i8>, <16 x i8>* %439, align 1, !alias.scope !18
  %441 = getelementptr inbounds i8, i8* %402, i64 %434
  %442 = bitcast i8* %441 to <16 x i8>*
  store <16 x i8> %437, <16 x i8>* %442, align 1, !alias.scope !21, !noalias !18
  %443 = getelementptr inbounds i8, i8* %441, i64 16
  %444 = bitcast i8* %443 to <16 x i8>*
  store <16 x i8> %440, <16 x i8>* %444, align 1, !alias.scope !21, !noalias !18
  %445 = or i64 %432, 32
  %446 = add i64 %409, %445
  %447 = getelementptr inbounds i8, i8* %403, i64 %446
  %448 = bitcast i8* %447 to <16 x i8>*
  %449 = load <16 x i8>, <16 x i8>* %448, align 1, !alias.scope !18
  %450 = getelementptr inbounds i8, i8* %447, i64 16
  %451 = bitcast i8* %450 to <16 x i8>*
  %452 = load <16 x i8>, <16 x i8>* %451, align 1, !alias.scope !18
  %453 = getelementptr inbounds i8, i8* %402, i64 %446
  %454 = bitcast i8* %453 to <16 x i8>*
  store <16 x i8> %449, <16 x i8>* %454, align 1, !alias.scope !21, !noalias !18
  %455 = getelementptr inbounds i8, i8* %453, i64 16
  %456 = bitcast i8* %455 to <16 x i8>*
  store <16 x i8> %452, <16 x i8>* %456, align 1, !alias.scope !21, !noalias !18
  %457 = or i64 %432, 64
  %458 = add i64 %409, %457
  %459 = getelementptr inbounds i8, i8* %403, i64 %458
  %460 = bitcast i8* %459 to <16 x i8>*
  %461 = load <16 x i8>, <16 x i8>* %460, align 1, !alias.scope !18
  %462 = getelementptr inbounds i8, i8* %459, i64 16
  %463 = bitcast i8* %462 to <16 x i8>*
  %464 = load <16 x i8>, <16 x i8>* %463, align 1, !alias.scope !18
  %465 = getelementptr inbounds i8, i8* %402, i64 %458
  %466 = bitcast i8* %465 to <16 x i8>*
  store <16 x i8> %461, <16 x i8>* %466, align 1, !alias.scope !21, !noalias !18
  %467 = getelementptr inbounds i8, i8* %465, i64 16
  %468 = bitcast i8* %467 to <16 x i8>*
  store <16 x i8> %464, <16 x i8>* %468, align 1, !alias.scope !21, !noalias !18
  %469 = or i64 %432, 96
  %470 = add i64 %409, %469
  %471 = getelementptr inbounds i8, i8* %403, i64 %470
  %472 = bitcast i8* %471 to <16 x i8>*
  %473 = load <16 x i8>, <16 x i8>* %472, align 1, !alias.scope !18
  %474 = getelementptr inbounds i8, i8* %471, i64 16
  %475 = bitcast i8* %474 to <16 x i8>*
  %476 = load <16 x i8>, <16 x i8>* %475, align 1, !alias.scope !18
  %477 = getelementptr inbounds i8, i8* %402, i64 %470
  %478 = bitcast i8* %477 to <16 x i8>*
  store <16 x i8> %473, <16 x i8>* %478, align 1, !alias.scope !21, !noalias !18
  %479 = getelementptr inbounds i8, i8* %477, i64 16
  %480 = bitcast i8* %479 to <16 x i8>*
  store <16 x i8> %476, <16 x i8>* %480, align 1, !alias.scope !21, !noalias !18
  %481 = add i64 %432, 128
  %482 = add i64 %433, -4
  %483 = icmp eq i64 %482, 0
  br i1 %483, label %484, label %431, !llvm.loop !23

484:                                              ; preds = %431, %421
  %485 = phi i64 [ 0, %421 ], [ %481, %431 ]
  %486 = icmp eq i64 %427, 0
  br i1 %486, label %504, label %487

487:                                              ; preds = %484, %487
  %488 = phi i64 [ %501, %487 ], [ %485, %484 ]
  %489 = phi i64 [ %502, %487 ], [ %427, %484 ]
  %490 = add i64 %409, %488
  %491 = getelementptr inbounds i8, i8* %403, i64 %490
  %492 = bitcast i8* %491 to <16 x i8>*
  %493 = load <16 x i8>, <16 x i8>* %492, align 1, !alias.scope !18
  %494 = getelementptr inbounds i8, i8* %491, i64 16
  %495 = bitcast i8* %494 to <16 x i8>*
  %496 = load <16 x i8>, <16 x i8>* %495, align 1, !alias.scope !18
  %497 = getelementptr inbounds i8, i8* %402, i64 %490
  %498 = bitcast i8* %497 to <16 x i8>*
  store <16 x i8> %493, <16 x i8>* %498, align 1, !alias.scope !21, !noalias !18
  %499 = getelementptr inbounds i8, i8* %497, i64 16
  %500 = bitcast i8* %499 to <16 x i8>*
  store <16 x i8> %496, <16 x i8>* %500, align 1, !alias.scope !21, !noalias !18
  %501 = add i64 %488, 32
  %502 = add i64 %489, -1
  %503 = icmp eq i64 %502, 0
  br i1 %503, label %504, label %487, !llvm.loop !24

504:                                              ; preds = %487, %484
  %505 = icmp eq i64 %411, %422
  br i1 %505, label %680, label %506

506:                                              ; preds = %504, %413, %407
  %507 = phi i64 [ %409, %413 ], [ %409, %407 ], [ %423, %504 ]
  %508 = sub nsw i64 %410, %507
  %509 = xor i64 %507, -1
  %510 = add i64 %509, %410
  %511 = and i64 %508, 3
  %512 = icmp eq i64 %511, 0
  br i1 %512, label %522, label %513

513:                                              ; preds = %506, %513
  %514 = phi i64 [ %519, %513 ], [ %507, %506 ]
  %515 = phi i64 [ %520, %513 ], [ %511, %506 ]
  %516 = getelementptr inbounds i8, i8* %403, i64 %514
  %517 = load i8, i8* %516, align 1
  %518 = getelementptr inbounds i8, i8* %402, i64 %514
  store i8 %517, i8* %518, align 1
  %519 = add nuw nsw i64 %514, 1
  %520 = add i64 %515, -1
  %521 = icmp eq i64 %520, 0
  br i1 %521, label %522, label %513, !llvm.loop !25

522:                                              ; preds = %513, %506
  %523 = phi i64 [ %507, %506 ], [ %519, %513 ]
  %524 = icmp ult i64 %510, 3
  br i1 %524, label %680, label %525

525:                                              ; preds = %522, %525
  %526 = phi i64 [ %542, %525 ], [ %523, %522 ]
  %527 = getelementptr inbounds i8, i8* %403, i64 %526
  %528 = load i8, i8* %527, align 1
  %529 = getelementptr inbounds i8, i8* %402, i64 %526
  store i8 %528, i8* %529, align 1
  %530 = add nuw nsw i64 %526, 1
  %531 = getelementptr inbounds i8, i8* %403, i64 %530
  %532 = load i8, i8* %531, align 1
  %533 = getelementptr inbounds i8, i8* %402, i64 %530
  store i8 %532, i8* %533, align 1
  %534 = add nuw nsw i64 %526, 2
  %535 = getelementptr inbounds i8, i8* %403, i64 %534
  %536 = load i8, i8* %535, align 1
  %537 = getelementptr inbounds i8, i8* %402, i64 %534
  store i8 %536, i8* %537, align 1
  %538 = add nuw nsw i64 %526, 3
  %539 = getelementptr inbounds i8, i8* %403, i64 %538
  %540 = load i8, i8* %539, align 1
  %541 = getelementptr inbounds i8, i8* %402, i64 %538
  store i8 %540, i8* %541, align 1
  %542 = add nuw nsw i64 %526, 4
  %543 = icmp eq i64 %542, %410
  br i1 %543, label %680, label %525, !llvm.loop !26

544:                                              ; preds = %259, %252
  %545 = icmp slt i32 %247, %177
  br i1 %545, label %546, label %659

546:                                              ; preds = %544
  %547 = icmp sgt i32 %177, 0
  br i1 %547, label %548, label %680

548:                                              ; preds = %546
  %549 = zext i32 %177 to i64
  %550 = icmp ult i32 %177, 32
  br i1 %550, label %551, label %569

551:                                              ; preds = %657, %569, %548
  %552 = phi i64 [ 0, %569 ], [ 0, %548 ], [ %581, %657 ]
  %553 = xor i64 %552, -1
  %554 = add nsw i64 %553, %549
  %555 = and i64 %549, 3
  %556 = icmp eq i64 %555, 0
  br i1 %556, label %566, label %557

557:                                              ; preds = %551, %557
  %558 = phi i64 [ %563, %557 ], [ %552, %551 ]
  %559 = phi i64 [ %564, %557 ], [ %555, %551 ]
  %560 = getelementptr inbounds i8, i8* %257, i64 %558
  %561 = load i8, i8* %560, align 1
  %562 = getelementptr inbounds i8, i8* %254, i64 %558
  store i8 %561, i8* %562, align 1
  %563 = add nuw nsw i64 %558, 1
  %564 = add i64 %559, -1
  %565 = icmp eq i64 %564, 0
  br i1 %565, label %566, label %557, !llvm.loop !27

566:                                              ; preds = %557, %551
  %567 = phi i64 [ %552, %551 ], [ %563, %557 ]
  %568 = icmp ult i64 %554, 3
  br i1 %568, label %680, label %661

569:                                              ; preds = %548
  %570 = getelementptr i8, i8* %22, i64 %253
  %571 = add nsw i64 %253, %549
  %572 = getelementptr i8, i8* %22, i64 %571
  %573 = sub nsw i64 %253, %255
  %574 = getelementptr i8, i8* %22, i64 %573
  %575 = sub nsw i64 %571, %255
  %576 = getelementptr i8, i8* %22, i64 %575
  %577 = icmp ult i8* %570, %576
  %578 = icmp ult i8* %574, %572
  %579 = and i1 %577, %578
  br i1 %579, label %551, label %580

580:                                              ; preds = %569
  %581 = and i64 %549, 4294967264
  %582 = add nsw i64 %581, -32
  %583 = lshr exact i64 %582, 5
  %584 = add nuw nsw i64 %583, 1
  %585 = and i64 %584, 3
  %586 = icmp ult i64 %582, 96
  br i1 %586, label %638, label %587

587:                                              ; preds = %580
  %588 = sub nsw i64 %584, %585
  br label %589

589:                                              ; preds = %589, %587
  %590 = phi i64 [ 0, %587 ], [ %635, %589 ]
  %591 = phi i64 [ %588, %587 ], [ %636, %589 ]
  %592 = getelementptr inbounds i8, i8* %257, i64 %590
  %593 = bitcast i8* %592 to <16 x i8>*
  %594 = load <16 x i8>, <16 x i8>* %593, align 1, !alias.scope !28
  %595 = getelementptr inbounds i8, i8* %592, i64 16
  %596 = bitcast i8* %595 to <16 x i8>*
  %597 = load <16 x i8>, <16 x i8>* %596, align 1, !alias.scope !28
  %598 = getelementptr inbounds i8, i8* %254, i64 %590
  %599 = bitcast i8* %598 to <16 x i8>*
  store <16 x i8> %594, <16 x i8>* %599, align 1, !alias.scope !31, !noalias !28
  %600 = getelementptr inbounds i8, i8* %598, i64 16
  %601 = bitcast i8* %600 to <16 x i8>*
  store <16 x i8> %597, <16 x i8>* %601, align 1, !alias.scope !31, !noalias !28
  %602 = or i64 %590, 32
  %603 = getelementptr inbounds i8, i8* %257, i64 %602
  %604 = bitcast i8* %603 to <16 x i8>*
  %605 = load <16 x i8>, <16 x i8>* %604, align 1, !alias.scope !28
  %606 = getelementptr inbounds i8, i8* %603, i64 16
  %607 = bitcast i8* %606 to <16 x i8>*
  %608 = load <16 x i8>, <16 x i8>* %607, align 1, !alias.scope !28
  %609 = getelementptr inbounds i8, i8* %254, i64 %602
  %610 = bitcast i8* %609 to <16 x i8>*
  store <16 x i8> %605, <16 x i8>* %610, align 1, !alias.scope !31, !noalias !28
  %611 = getelementptr inbounds i8, i8* %609, i64 16
  %612 = bitcast i8* %611 to <16 x i8>*
  store <16 x i8> %608, <16 x i8>* %612, align 1, !alias.scope !31, !noalias !28
  %613 = or i64 %590, 64
  %614 = getelementptr inbounds i8, i8* %257, i64 %613
  %615 = bitcast i8* %614 to <16 x i8>*
  %616 = load <16 x i8>, <16 x i8>* %615, align 1, !alias.scope !28
  %617 = getelementptr inbounds i8, i8* %614, i64 16
  %618 = bitcast i8* %617 to <16 x i8>*
  %619 = load <16 x i8>, <16 x i8>* %618, align 1, !alias.scope !28
  %620 = getelementptr inbounds i8, i8* %254, i64 %613
  %621 = bitcast i8* %620 to <16 x i8>*
  store <16 x i8> %616, <16 x i8>* %621, align 1, !alias.scope !31, !noalias !28
  %622 = getelementptr inbounds i8, i8* %620, i64 16
  %623 = bitcast i8* %622 to <16 x i8>*
  store <16 x i8> %619, <16 x i8>* %623, align 1, !alias.scope !31, !noalias !28
  %624 = or i64 %590, 96
  %625 = getelementptr inbounds i8, i8* %257, i64 %624
  %626 = bitcast i8* %625 to <16 x i8>*
  %627 = load <16 x i8>, <16 x i8>* %626, align 1, !alias.scope !28
  %628 = getelementptr inbounds i8, i8* %625, i64 16
  %629 = bitcast i8* %628 to <16 x i8>*
  %630 = load <16 x i8>, <16 x i8>* %629, align 1, !alias.scope !28
  %631 = getelementptr inbounds i8, i8* %254, i64 %624
  %632 = bitcast i8* %631 to <16 x i8>*
  store <16 x i8> %627, <16 x i8>* %632, align 1, !alias.scope !31, !noalias !28
  %633 = getelementptr inbounds i8, i8* %631, i64 16
  %634 = bitcast i8* %633 to <16 x i8>*
  store <16 x i8> %630, <16 x i8>* %634, align 1, !alias.scope !31, !noalias !28
  %635 = add i64 %590, 128
  %636 = add i64 %591, -4
  %637 = icmp eq i64 %636, 0
  br i1 %637, label %638, label %589, !llvm.loop !33

638:                                              ; preds = %589, %580
  %639 = phi i64 [ 0, %580 ], [ %635, %589 ]
  %640 = icmp eq i64 %585, 0
  br i1 %640, label %657, label %641

641:                                              ; preds = %638, %641
  %642 = phi i64 [ %654, %641 ], [ %639, %638 ]
  %643 = phi i64 [ %655, %641 ], [ %585, %638 ]
  %644 = getelementptr inbounds i8, i8* %257, i64 %642
  %645 = bitcast i8* %644 to <16 x i8>*
  %646 = load <16 x i8>, <16 x i8>* %645, align 1, !alias.scope !28
  %647 = getelementptr inbounds i8, i8* %644, i64 16
  %648 = bitcast i8* %647 to <16 x i8>*
  %649 = load <16 x i8>, <16 x i8>* %648, align 1, !alias.scope !28
  %650 = getelementptr inbounds i8, i8* %254, i64 %642
  %651 = bitcast i8* %650 to <16 x i8>*
  store <16 x i8> %646, <16 x i8>* %651, align 1, !alias.scope !31, !noalias !28
  %652 = getelementptr inbounds i8, i8* %650, i64 16
  %653 = bitcast i8* %652 to <16 x i8>*
  store <16 x i8> %649, <16 x i8>* %653, align 1, !alias.scope !31, !noalias !28
  %654 = add i64 %642, 32
  %655 = add i64 %643, -1
  %656 = icmp eq i64 %655, 0
  br i1 %656, label %657, label %641, !llvm.loop !34

657:                                              ; preds = %641, %638
  %658 = icmp eq i64 %581, %549
  br i1 %658, label %680, label %551

659:                                              ; preds = %544
  %660 = sext i32 %177 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %254, i8* align 1 %257, i64 %660, i1 false) #4
  br label %680

661:                                              ; preds = %566, %661
  %662 = phi i64 [ %678, %661 ], [ %567, %566 ]
  %663 = getelementptr inbounds i8, i8* %257, i64 %662
  %664 = load i8, i8* %663, align 1
  %665 = getelementptr inbounds i8, i8* %254, i64 %662
  store i8 %664, i8* %665, align 1
  %666 = add nuw nsw i64 %662, 1
  %667 = getelementptr inbounds i8, i8* %257, i64 %666
  %668 = load i8, i8* %667, align 1
  %669 = getelementptr inbounds i8, i8* %254, i64 %666
  store i8 %668, i8* %669, align 1
  %670 = add nuw nsw i64 %662, 2
  %671 = getelementptr inbounds i8, i8* %257, i64 %670
  %672 = load i8, i8* %671, align 1
  %673 = getelementptr inbounds i8, i8* %254, i64 %670
  store i8 %672, i8* %673, align 1
  %674 = add nuw nsw i64 %662, 3
  %675 = getelementptr inbounds i8, i8* %257, i64 %674
  %676 = load i8, i8* %675, align 1
  %677 = getelementptr inbounds i8, i8* %254, i64 %674
  store i8 %676, i8* %677, align 1
  %678 = add nuw nsw i64 %662, 4
  %679 = icmp eq i64 %678, %549
  br i1 %679, label %680, label %661, !llvm.loop !35

680:                                              ; preds = %522, %525, %566, %661, %504, %657, %659, %546, %400
  %681 = add nsw i32 %177, %75
  %682 = add nsw i32 %177, %74
  %683 = icmp slt i32 %682, %24
  br i1 %683, label %696, label %684

684:                                              ; preds = %680, %694
  %685 = phi i32 [ %688, %694 ], [ %72, %680 ]
  %686 = phi i32 [ %687, %694 ], [ %682, %680 ]
  %687 = sub nsw i32 %686, %24
  %688 = add nsw i32 %685, 1
  %689 = icmp slt i32 %685, %1
  %690 = and i32 %688, 15
  %691 = icmp eq i32 %690, 0
  %692 = and i1 %689, %691
  br i1 %692, label %693, label %694

693:                                              ; preds = %684
  tail call fastcc void @ExtractPalettedAlphaRows(%struct.VP8LDecoder* %4, i32 %688) #4
  br label %694

694:                                              ; preds = %693, %684
  %695 = icmp slt i32 %687, %24
  br i1 %695, label %696, label %684

696:                                              ; preds = %694, %680
  %697 = phi i32 [ %682, %680 ], [ %687, %694 ]
  %698 = phi i32 [ %72, %680 ], [ %688, %694 ]
  %699 = icmp sge i32 %681, %33
  %700 = and i32 %697, %35
  %701 = icmp eq i32 %700, 0
  %702 = or i1 %699, %701
  br i1 %702, label %721, label %703

703:                                              ; preds = %696
  %704 = load i32, i32* %40, align 4
  %705 = icmp eq i32 %704, 0
  br i1 %705, label %717, label %706

706:                                              ; preds = %703
  %707 = load i32, i32* %65, align 8
  %708 = load i32*, i32** %66, align 8
  %709 = ashr i32 %698, %704
  %710 = mul nsw i32 %707, %709
  %711 = ashr i32 %697, %704
  %712 = add nsw i32 %710, %711
  %713 = sext i32 %712 to i64
  %714 = getelementptr inbounds i32, i32* %708, i64 %713
  %715 = load i32, i32* %714, align 4
  %716 = sext i32 %715 to i64
  br label %717

717:                                              ; preds = %706, %703
  %718 = phi i64 [ %716, %706 ], [ 0, %703 ]
  %719 = load %struct.HTreeGroup*, %struct.HTreeGroup** %62, align 8
  %720 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %719, i64 %718
  br label %721

721:                                              ; preds = %717, %696, %157, %151, %144
  %722 = phi i32 [ %148, %157 ], [ %148, %151 ], [ %148, %144 ], [ %681, %696 ], [ %681, %717 ]
  %723 = phi i32 [ 0, %157 ], [ 0, %151 ], [ %149, %144 ], [ %697, %696 ], [ %697, %717 ]
  %724 = phi %struct.HTreeGroup* [ %97, %157 ], [ %97, %151 ], [ %97, %144 ], [ %97, %696 ], [ %720, %717 ]
  %725 = phi i32 [ %152, %157 ], [ %152, %151 ], [ %72, %144 ], [ %698, %696 ], [ %698, %717 ]
  %726 = load i32, i32* %58, align 4
  %727 = icmp eq i32 %726, 0
  br i1 %727, label %729, label %728

728:                                              ; preds = %721
  store i32 1, i32* %58, align 4
  br label %742

729:                                              ; preds = %721
  %730 = load i64, i64* %69, align 8
  %731 = load i64, i64* %70, align 8
  %732 = icmp eq i64 %730, %731
  br i1 %732, label %733, label %737

733:                                              ; preds = %729
  %734 = load i32, i32* %67, align 8
  %735 = icmp sgt i32 %734, 64
  %736 = zext i1 %735 to i32
  br label %737

737:                                              ; preds = %733, %729
  %738 = phi i32 [ 0, %729 ], [ %736, %733 ]
  store i32 %738, i32* %58, align 4
  %739 = icmp eq i32 %738, 0
  %740 = icmp slt i32 %722, %33
  %741 = and i1 %740, %739
  br i1 %741, label %71, label %742

742:                                              ; preds = %737, %728, %56, %37
  %743 = phi i32* [ %58, %56 ], [ %38, %37 ], [ %58, %728 ], [ %58, %737 ]
  %744 = phi i32 [ %28, %56 ], [ %28, %37 ], [ %722, %728 ], [ %722, %737 ]
  %745 = phi i32 [ %29, %56 ], [ %29, %37 ], [ %725, %728 ], [ %725, %737 ]
  %746 = icmp sgt i32 %745, %1
  %747 = select i1 %746, i32 %1, i32 %745
  tail call fastcc void @ExtractPalettedAlphaRows(%struct.VP8LDecoder* %4, i32 %747) #4
  br label %748

748:                                              ; preds = %246, %158, %742
  %749 = phi i32* [ %743, %742 ], [ %58, %158 ], [ %58, %246 ]
  %750 = phi i32 [ %744, %742 ], [ %75, %158 ], [ %75, %246 ]
  %751 = phi i32 [ 1, %742 ], [ 0, %158 ], [ 0, %246 ]
  %752 = load i32, i32* %749, align 4
  %753 = icmp eq i32 %752, 0
  br i1 %753, label %754, label %765

754:                                              ; preds = %748
  %755 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 6, i32 3
  %756 = load i64, i64* %755, align 8
  %757 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 6, i32 2
  %758 = load i64, i64* %757, align 8
  %759 = icmp eq i64 %756, %758
  br i1 %759, label %760, label %765

760:                                              ; preds = %754
  %761 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 6, i32 4
  %762 = load i32, i32* %761, align 8
  %763 = icmp sgt i32 %762, 64
  %764 = zext i1 %763 to i32
  br label %765

765:                                              ; preds = %760, %754, %748
  %766 = phi i32 [ 1, %748 ], [ 0, %754 ], [ %764, %760 ]
  store i32 %766, i32* %749, align 4
  %767 = icmp eq i32 %751, 0
  br i1 %767, label %772, label %768

768:                                              ; preds = %765
  %769 = icmp ne i32 %766, 0
  %770 = icmp sgt i32 %32, %750
  %771 = and i1 %770, %769
  br i1 %771, label %772, label %776

772:                                              ; preds = %768, %765
  %773 = icmp eq i32 %766, 0
  %774 = select i1 %773, i32 3, i32 5
  %775 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 0
  store i32 %774, i32* %775, align 8
  br label %783

776:                                              ; preds = %768
  store i32 %750, i32* %27, align 8
  br label %783

777:                                              ; preds = %15
  %778 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 10
  %779 = load i32, i32* %778, align 4
  %780 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %4, i64 0, i32 11
  %781 = load i32, i32* %780, align 8
  %782 = tail call fastcc i32 @DecodeImageData(%struct.VP8LDecoder* %4, i32* %19, i32 %779, i32 %781, i32 %1, void (%struct.VP8LDecoder*, i32)* nonnull @ExtractAlphaRows)
  br label %783

783:                                              ; preds = %776, %772, %777, %2
  %784 = phi i32 [ 1, %2 ], [ %782, %777 ], [ 0, %772 ], [ 1, %776 ]
  ret i32 %784
}

declare void @WebPInitAlphaProcessing() local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @DecodeImageData(%struct.VP8LDecoder*, i32*, i32, i32, i32, void (%struct.VP8LDecoder*, i32)*) unnamed_addr #1 {
  %7 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 13
  %8 = load i32, i32* %7, align 8
  %9 = sdiv i32 %8, %2
  %10 = srem i32 %8, %2
  %11 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 6
  %12 = sext i32 %8 to i64
  %13 = getelementptr inbounds i32, i32* %1, i64 %12
  %14 = mul nsw i32 %3, %2
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i32, i32* %1, i64 %15
  %17 = mul nsw i32 %4, %2
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i32, i32* %1, i64 %18
  %20 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15, i32 0
  %21 = load i32, i32* %20, align 8
  %22 = add nsw i32 %21, 280
  %23 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 7
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 0
  %26 = select i1 %25, i32 16777216, i32 %9
  %27 = icmp sgt i32 %21, 0
  %28 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15, i32 1
  %29 = select i1 %27, %struct.VP8LColorCache* %28, %struct.VP8LColorCache* null
  %30 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15, i32 3
  %31 = load i32, i32* %30, align 8
  %32 = icmp slt i32 %8, %17
  br i1 %32, label %33, label %908

33:                                               ; preds = %6
  %34 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15, i32 4
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %50, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15, i32 5
  %39 = load i32, i32* %38, align 8
  %40 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15, i32 6
  %41 = load i32*, i32** %40, align 8
  %42 = ashr i32 %9, %35
  %43 = mul nsw i32 %39, %42
  %44 = ashr i32 %10, %35
  %45 = add nsw i32 %43, %44
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i32, i32* %41, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = sext i32 %48 to i64
  br label %50

50:                                               ; preds = %37, %33
  %51 = phi i64 [ %49, %37 ], [ 0, %33 ]
  %52 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15, i32 8
  %53 = load %struct.HTreeGroup*, %struct.HTreeGroup** %52, align 8
  %54 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %53, i64 %51
  %55 = ptrtoint i32* %1 to i64
  %56 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 8
  %57 = bitcast %struct.VP8LBitReader* %56 to i8*
  %58 = bitcast %struct.VP8LBitReader* %11 to i8*
  %59 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 9
  %60 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15, i32 2
  %61 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15, i32 4
  %62 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15, i32 5
  %63 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15, i32 6
  %64 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15, i32 8
  %65 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 6, i32 4
  %66 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %11, i64 0, i32 0
  %67 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 6, i32 5
  %68 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 6, i32 3
  %69 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 6, i32 2
  %70 = getelementptr inbounds %struct.VP8LColorCache, %struct.VP8LColorCache* %29, i64 0, i32 1
  %71 = getelementptr inbounds %struct.VP8LColorCache, %struct.VP8LColorCache* %29, i64 0, i32 0
  %72 = ptrtoint i32* %16 to i64
  %73 = icmp ne void (%struct.VP8LDecoder*, i32)* %5, null
  %74 = icmp ne %struct.VP8LColorCache* %29, null
  br label %75

75:                                               ; preds = %50, %901
  %76 = phi i32 [ %9, %50 ], [ %906, %901 ]
  %77 = phi i32 [ %10, %50 ], [ %905, %901 ]
  %78 = phi %struct.HTreeGroup* [ %54, %50 ], [ %904, %901 ]
  %79 = phi i32 [ %26, %50 ], [ %96, %901 ]
  %80 = phi i32* [ %13, %50 ], [ %903, %901 ]
  %81 = phi i32* [ %13, %50 ], [ %902, %901 ]
  %82 = ptrtoint i32* %80 to i64
  %83 = bitcast i32* %81 to i8*
  %84 = icmp slt i32 %76, %79
  br i1 %84, label %95, label %85

85:                                               ; preds = %75
  %86 = ptrtoint i32* %81 to i64
  %87 = sub i64 %86, %55
  %88 = lshr exact i64 %87, 2
  %89 = trunc i64 %88 to i32
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %57, i8* align 8 %58, i64 40, i1 false) #4
  store i32 %89, i32* %59, align 8
  %90 = load i32, i32* %20, align 8
  %91 = icmp sgt i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %85
  tail call void @VP8LColorCacheCopy(%struct.VP8LColorCache* %28, %struct.VP8LColorCache* %60) #4
  br label %93

93:                                               ; preds = %85, %92
  %94 = add nsw i32 %76, 8
  br label %95

95:                                               ; preds = %75, %93
  %96 = phi i32 [ %94, %93 ], [ %79, %75 ]
  %97 = and i32 %77, %31
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %117

99:                                               ; preds = %95
  %100 = load i32, i32* %61, align 4
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %113, label %102

102:                                              ; preds = %99
  %103 = load i32, i32* %62, align 8
  %104 = load i32*, i32** %63, align 8
  %105 = ashr i32 %76, %100
  %106 = mul nsw i32 %103, %105
  %107 = ashr i32 %77, %100
  %108 = add nsw i32 %106, %107
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i32, i32* %104, i64 %109
  %111 = load i32, i32* %110, align 4
  %112 = sext i32 %111 to i64
  br label %113

113:                                              ; preds = %99, %102
  %114 = phi i64 [ %112, %102 ], [ 0, %99 ]
  %115 = load %struct.HTreeGroup*, %struct.HTreeGroup** %64, align 8
  %116 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %115, i64 %114
  br label %117

117:                                              ; preds = %113, %95
  %118 = phi %struct.HTreeGroup* [ %116, %113 ], [ %78, %95 ]
  %119 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %118, i64 0, i32 3
  %120 = load i32, i32* %119, align 8
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %125, label %122

122:                                              ; preds = %117
  %123 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %118, i64 0, i32 2
  %124 = load i32, i32* %123, align 4
  br label %363

125:                                              ; preds = %117
  %126 = load i32, i32* %65, align 8
  %127 = icmp sgt i32 %126, 31
  br i1 %127, label %128, label %129

128:                                              ; preds = %125
  tail call void @VP8LDoFillBitWindow(%struct.VP8LBitReader* %11) #4
  br label %129

129:                                              ; preds = %125, %128
  %130 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %118, i64 0, i32 4
  %131 = load i32, i32* %130, align 4
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %162, label %133

133:                                              ; preds = %129
  %134 = load i64, i64* %66, align 8
  %135 = load i32, i32* %65, align 8
  %136 = and i32 %135, 63
  %137 = zext i32 %136 to i64
  %138 = lshr i64 %134, %137
  %139 = and i64 %138, 63
  %140 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %118, i64 0, i32 5, i64 %139, i32 0
  %141 = load i32, i32* %140, align 8
  %142 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %118, i64 0, i32 5, i64 %139, i32 1
  %143 = load i32, i32* %142, align 4
  %144 = icmp slt i32 %141, 256
  %145 = add nsw i32 %141, %135
  br i1 %144, label %146, label %147

146:                                              ; preds = %133
  store i32 %145, i32* %65, align 8
  store i32 %143, i32* %81, align 4
  br label %149

147:                                              ; preds = %133
  %148 = add nsw i32 %145, -256
  store i32 %148, i32* %65, align 8
  br label %149

149:                                              ; preds = %146, %147
  %150 = phi i32 [ 0, %146 ], [ %143, %147 ]
  %151 = load i32, i32* %67, align 4
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %908

153:                                              ; preds = %149
  %154 = load i64, i64* %68, align 8
  %155 = load i64, i64* %69, align 8
  %156 = icmp eq i64 %154, %155
  br i1 %156, label %157, label %160

157:                                              ; preds = %153
  %158 = load i32, i32* %65, align 8
  %159 = icmp slt i32 %158, 65
  br i1 %159, label %160, label %908

160:                                              ; preds = %153, %157
  %161 = icmp eq i32 %150, 0
  br i1 %161, label %366, label %205

162:                                              ; preds = %129
  %163 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %118, i64 0, i32 0, i64 0
  %164 = load %struct.HuffmanCode*, %struct.HuffmanCode** %163, align 8
  %165 = load i64, i64* %66, align 8
  %166 = load i32, i32* %65, align 8
  %167 = and i32 %166, 63
  %168 = zext i32 %167 to i64
  %169 = lshr i64 %165, %168
  %170 = and i64 %169, 255
  %171 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %164, i64 %170
  %172 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %171, i64 0, i32 0
  %173 = load i8, i8* %172, align 2
  %174 = zext i8 %173 to i32
  %175 = add nsw i32 %174, -8
  %176 = icmp sgt i32 %175, 0
  br i1 %176, label %177, label %195

177:                                              ; preds = %162
  %178 = add nsw i32 %166, 8
  store i32 %178, i32* %65, align 8
  %179 = and i32 %178, 63
  %180 = zext i32 %179 to i64
  %181 = lshr i64 %165, %180
  %182 = trunc i64 %181 to i32
  %183 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %164, i64 %170, i32 1
  %184 = load i16, i16* %183, align 2
  %185 = zext i16 %184 to i64
  %186 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %171, i64 %185
  %187 = shl nsw i32 -1, %175
  %188 = xor i32 %187, -1
  %189 = and i32 %182, %188
  %190 = zext i32 %189 to i64
  %191 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %186, i64 %190
  %192 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %191, i64 0, i32 0
  %193 = load i8, i8* %192, align 2
  %194 = zext i8 %193 to i32
  br label %195

195:                                              ; preds = %177, %162
  %196 = phi i32 [ %194, %177 ], [ %174, %162 ]
  %197 = phi i32 [ %178, %177 ], [ %166, %162 ]
  %198 = phi %struct.HuffmanCode* [ %191, %177 ], [ %171, %162 ]
  %199 = add nsw i32 %197, %196
  store i32 %199, i32* %65, align 8
  %200 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %198, i64 0, i32 1
  %201 = load i16, i16* %200, align 2
  %202 = zext i16 %201 to i32
  %203 = load i32, i32* %67, align 4
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %205, label %908

205:                                              ; preds = %160, %195
  %206 = phi i32 [ %202, %195 ], [ %150, %160 ]
  %207 = load i64, i64* %68, align 8
  %208 = load i64, i64* %69, align 8
  %209 = icmp eq i64 %207, %208
  br i1 %209, label %210, label %213

210:                                              ; preds = %205
  %211 = load i32, i32* %65, align 8
  %212 = icmp slt i32 %211, 65
  br i1 %212, label %213, label %908

213:                                              ; preds = %205, %210
  %214 = icmp slt i32 %206, 256
  br i1 %214, label %215, label %393

215:                                              ; preds = %213
  %216 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %118, i64 0, i32 1
  %217 = load i32, i32* %216, align 8
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %224, label %219

219:                                              ; preds = %215
  %220 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %118, i64 0, i32 2
  %221 = load i32, i32* %220, align 4
  %222 = shl i32 %206, 8
  %223 = or i32 %221, %222
  br label %363

224:                                              ; preds = %215
  %225 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %118, i64 0, i32 0, i64 1
  %226 = load %struct.HuffmanCode*, %struct.HuffmanCode** %225, align 8
  %227 = load i64, i64* %66, align 8
  %228 = load i32, i32* %65, align 8
  %229 = and i32 %228, 63
  %230 = zext i32 %229 to i64
  %231 = lshr i64 %227, %230
  %232 = and i64 %231, 255
  %233 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %226, i64 %232
  %234 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %233, i64 0, i32 0
  %235 = load i8, i8* %234, align 2
  %236 = zext i8 %235 to i32
  %237 = add nsw i32 %236, -8
  %238 = icmp sgt i32 %237, 0
  br i1 %238, label %239, label %257

239:                                              ; preds = %224
  %240 = add nsw i32 %228, 8
  store i32 %240, i32* %65, align 8
  %241 = and i32 %240, 63
  %242 = zext i32 %241 to i64
  %243 = lshr i64 %227, %242
  %244 = trunc i64 %243 to i32
  %245 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %226, i64 %232, i32 1
  %246 = load i16, i16* %245, align 2
  %247 = zext i16 %246 to i64
  %248 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %233, i64 %247
  %249 = shl nsw i32 -1, %237
  %250 = xor i32 %249, -1
  %251 = and i32 %244, %250
  %252 = zext i32 %251 to i64
  %253 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %248, i64 %252
  %254 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %253, i64 0, i32 0
  %255 = load i8, i8* %254, align 2
  %256 = zext i8 %255 to i32
  br label %257

257:                                              ; preds = %224, %239
  %258 = phi i32 [ %256, %239 ], [ %236, %224 ]
  %259 = phi i32 [ %240, %239 ], [ %228, %224 ]
  %260 = phi %struct.HuffmanCode* [ %253, %239 ], [ %233, %224 ]
  %261 = add nsw i32 %259, %258
  store i32 %261, i32* %65, align 8
  %262 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %260, i64 0, i32 1
  %263 = load i16, i16* %262, align 2
  %264 = zext i16 %263 to i32
  %265 = icmp sgt i32 %261, 31
  br i1 %265, label %266, label %269

266:                                              ; preds = %257
  tail call void @VP8LDoFillBitWindow(%struct.VP8LBitReader* %11) #4
  %267 = load i64, i64* %66, align 8
  %268 = load i32, i32* %65, align 8
  br label %269

269:                                              ; preds = %257, %266
  %270 = phi i32 [ %261, %257 ], [ %268, %266 ]
  %271 = phi i64 [ %227, %257 ], [ %267, %266 ]
  %272 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %118, i64 0, i32 0, i64 2
  %273 = load %struct.HuffmanCode*, %struct.HuffmanCode** %272, align 8
  %274 = and i32 %270, 63
  %275 = zext i32 %274 to i64
  %276 = lshr i64 %271, %275
  %277 = and i64 %276, 255
  %278 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %273, i64 %277
  %279 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %278, i64 0, i32 0
  %280 = load i8, i8* %279, align 2
  %281 = zext i8 %280 to i32
  %282 = add nsw i32 %281, -8
  %283 = icmp sgt i32 %282, 0
  br i1 %283, label %284, label %302

284:                                              ; preds = %269
  %285 = add nsw i32 %270, 8
  store i32 %285, i32* %65, align 8
  %286 = and i32 %285, 63
  %287 = zext i32 %286 to i64
  %288 = lshr i64 %271, %287
  %289 = trunc i64 %288 to i32
  %290 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %273, i64 %277, i32 1
  %291 = load i16, i16* %290, align 2
  %292 = zext i16 %291 to i64
  %293 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %278, i64 %292
  %294 = shl nsw i32 -1, %282
  %295 = xor i32 %294, -1
  %296 = and i32 %289, %295
  %297 = zext i32 %296 to i64
  %298 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %293, i64 %297
  %299 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %298, i64 0, i32 0
  %300 = load i8, i8* %299, align 2
  %301 = zext i8 %300 to i32
  br label %302

302:                                              ; preds = %269, %284
  %303 = phi i32 [ %301, %284 ], [ %281, %269 ]
  %304 = phi i32 [ %285, %284 ], [ %270, %269 ]
  %305 = phi %struct.HuffmanCode* [ %298, %284 ], [ %278, %269 ]
  %306 = add nsw i32 %304, %303
  store i32 %306, i32* %65, align 8
  %307 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %305, i64 0, i32 1
  %308 = load i16, i16* %307, align 2
  %309 = zext i16 %308 to i32
  %310 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %118, i64 0, i32 0, i64 3
  %311 = load %struct.HuffmanCode*, %struct.HuffmanCode** %310, align 8
  %312 = and i32 %306, 63
  %313 = zext i32 %312 to i64
  %314 = lshr i64 %271, %313
  %315 = and i64 %314, 255
  %316 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %311, i64 %315
  %317 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %316, i64 0, i32 0
  %318 = load i8, i8* %317, align 2
  %319 = zext i8 %318 to i32
  %320 = add nsw i32 %319, -8
  %321 = icmp sgt i32 %320, 0
  br i1 %321, label %322, label %340

322:                                              ; preds = %302
  %323 = add nsw i32 %306, 8
  store i32 %323, i32* %65, align 8
  %324 = and i32 %323, 63
  %325 = zext i32 %324 to i64
  %326 = lshr i64 %271, %325
  %327 = trunc i64 %326 to i32
  %328 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %311, i64 %315, i32 1
  %329 = load i16, i16* %328, align 2
  %330 = zext i16 %329 to i64
  %331 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %316, i64 %330
  %332 = shl nsw i32 -1, %320
  %333 = xor i32 %332, -1
  %334 = and i32 %333, %327
  %335 = zext i32 %334 to i64
  %336 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %331, i64 %335
  %337 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %336, i64 0, i32 0
  %338 = load i8, i8* %337, align 2
  %339 = zext i8 %338 to i32
  br label %340

340:                                              ; preds = %302, %322
  %341 = phi i32 [ %339, %322 ], [ %319, %302 ]
  %342 = phi i32 [ %323, %322 ], [ %306, %302 ]
  %343 = phi %struct.HuffmanCode* [ %336, %322 ], [ %316, %302 ]
  %344 = add nsw i32 %342, %341
  store i32 %344, i32* %65, align 8
  %345 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %343, i64 0, i32 1
  %346 = load i16, i16* %345, align 2
  %347 = zext i16 %346 to i32
  %348 = load i32, i32* %67, align 4
  %349 = icmp eq i32 %348, 0
  br i1 %349, label %350, label %908

350:                                              ; preds = %340
  %351 = load i64, i64* %68, align 8
  %352 = load i64, i64* %69, align 8
  %353 = icmp ne i64 %351, %352
  %354 = icmp slt i32 %344, 65
  %355 = or i1 %354, %353
  br i1 %355, label %356, label %908

356:                                              ; preds = %350
  %357 = shl i32 %347, 24
  %358 = shl nuw i32 %264, 16
  %359 = shl i32 %206, 8
  %360 = or i32 %358, %359
  %361 = or i32 %360, %309
  %362 = or i32 %361, %357
  br label %363

363:                                              ; preds = %122, %895, %219, %356
  %364 = phi i32 [ %362, %356 ], [ %223, %219 ], [ %900, %895 ], [ %124, %122 ]
  %365 = phi i32* [ %80, %356 ], [ %80, %219 ], [ %896, %895 ], [ %80, %122 ]
  store i32 %364, i32* %81, align 4
  br label %366

366:                                              ; preds = %363, %160
  %367 = phi i32* [ %80, %160 ], [ %365, %363 ]
  %368 = getelementptr inbounds i32, i32* %81, i64 1
  %369 = add nsw i32 %77, 1
  %370 = icmp slt i32 %369, %2
  br i1 %370, label %901, label %371

371:                                              ; preds = %366
  %372 = add nsw i32 %76, 1
  %373 = icmp slt i32 %76, %4
  %374 = and i1 %73, %373
  %375 = and i32 %372, 15
  %376 = icmp eq i32 %375, 0
  %377 = and i1 %374, %376
  br i1 %377, label %378, label %379

378:                                              ; preds = %371
  tail call void %5(%struct.VP8LDecoder* %0, i32 %372) #4, !callees !36
  br label %379

379:                                              ; preds = %371, %378
  %380 = icmp ult i32* %367, %368
  %381 = and i1 %74, %380
  br i1 %381, label %382, label %901

382:                                              ; preds = %379, %382
  %383 = phi i32* [ %384, %382 ], [ %367, %379 ]
  %384 = getelementptr inbounds i32, i32* %383, i64 1
  %385 = load i32, i32* %383, align 4
  %386 = load i32, i32* %70, align 8
  %387 = mul i32 %385, 506832829
  %388 = lshr i32 %387, %386
  %389 = load i32*, i32** %71, align 8
  %390 = sext i32 %388 to i64
  %391 = getelementptr inbounds i32, i32* %389, i64 %390
  store i32 %385, i32* %391, align 4
  %392 = icmp ult i32* %383, %81
  br i1 %392, label %382, label %901

393:                                              ; preds = %213
  %394 = icmp slt i32 %206, 280
  br i1 %394, label %395, label %851

395:                                              ; preds = %393
  %396 = add nsw i32 %206, -256
  %397 = icmp slt i32 %396, 4
  br i1 %397, label %406, label %398

398:                                              ; preds = %395
  %399 = add nsw i32 %206, -258
  %400 = ashr i32 %399, 1
  %401 = and i32 %396, 1
  %402 = or i32 %401, 2
  %403 = shl i32 %402, %400
  %404 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %11, i32 %400) #4
  %405 = add i32 %404, %403
  br label %406

406:                                              ; preds = %395, %398
  %407 = phi i32 [ %405, %398 ], [ %396, %395 ]
  %408 = add i32 %407, 1
  %409 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %118, i64 0, i32 0, i64 4
  %410 = load %struct.HuffmanCode*, %struct.HuffmanCode** %409, align 8
  %411 = load i64, i64* %66, align 8
  %412 = load i32, i32* %65, align 8
  %413 = and i32 %412, 63
  %414 = zext i32 %413 to i64
  %415 = lshr i64 %411, %414
  %416 = and i64 %415, 255
  %417 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %410, i64 %416
  %418 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %417, i64 0, i32 0
  %419 = load i8, i8* %418, align 2
  %420 = zext i8 %419 to i32
  %421 = add nsw i32 %420, -8
  %422 = icmp sgt i32 %421, 0
  br i1 %422, label %423, label %441

423:                                              ; preds = %406
  %424 = add nsw i32 %412, 8
  store i32 %424, i32* %65, align 8
  %425 = and i32 %424, 63
  %426 = zext i32 %425 to i64
  %427 = lshr i64 %411, %426
  %428 = trunc i64 %427 to i32
  %429 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %410, i64 %416, i32 1
  %430 = load i16, i16* %429, align 2
  %431 = zext i16 %430 to i64
  %432 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %417, i64 %431
  %433 = shl nsw i32 -1, %421
  %434 = xor i32 %433, -1
  %435 = and i32 %428, %434
  %436 = zext i32 %435 to i64
  %437 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %432, i64 %436
  %438 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %437, i64 0, i32 0
  %439 = load i8, i8* %438, align 2
  %440 = zext i8 %439 to i32
  br label %441

441:                                              ; preds = %406, %423
  %442 = phi i32 [ %440, %423 ], [ %420, %406 ]
  %443 = phi i32 [ %424, %423 ], [ %412, %406 ]
  %444 = phi %struct.HuffmanCode* [ %437, %423 ], [ %417, %406 ]
  %445 = add nsw i32 %443, %442
  store i32 %445, i32* %65, align 8
  %446 = getelementptr inbounds %struct.HuffmanCode, %struct.HuffmanCode* %444, i64 0, i32 1
  %447 = load i16, i16* %446, align 2
  %448 = zext i16 %447 to i32
  %449 = icmp sgt i32 %445, 31
  br i1 %449, label %450, label %451

450:                                              ; preds = %441
  tail call void @VP8LDoFillBitWindow(%struct.VP8LBitReader* %11) #4
  br label %451

451:                                              ; preds = %441, %450
  %452 = icmp ult i16 %447, 4
  br i1 %452, label %461, label %453

453:                                              ; preds = %451
  %454 = add nsw i32 %448, -2
  %455 = ashr i32 %454, 1
  %456 = and i32 %448, 1
  %457 = or i32 %456, 2
  %458 = shl i32 %457, %455
  %459 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %11, i32 %455) #4
  %460 = add i32 %459, %458
  br label %461

461:                                              ; preds = %451, %453
  %462 = phi i32 [ %460, %453 ], [ %448, %451 ]
  %463 = add i32 %462, 1
  %464 = icmp sgt i32 %463, 120
  br i1 %464, label %465, label %467

465:                                              ; preds = %461
  %466 = add nsw i32 %462, -119
  br label %479

467:                                              ; preds = %461
  %468 = sext i32 %462 to i64
  %469 = getelementptr inbounds [120 x i8], [120 x i8]* @kCodeToPlane, i64 0, i64 %468
  %470 = load i8, i8* %469, align 1
  %471 = zext i8 %470 to i32
  %472 = lshr i32 %471, 4
  %473 = and i32 %471, 15
  %474 = sub nsw i32 8, %473
  %475 = mul nsw i32 %472, %2
  %476 = add nsw i32 %475, %474
  %477 = icmp sgt i32 %476, 1
  %478 = select i1 %477, i32 %476, i32 1
  br label %479

479:                                              ; preds = %465, %467
  %480 = phi i32 [ %466, %465 ], [ %478, %467 ]
  %481 = load i32, i32* %67, align 4
  %482 = icmp eq i32 %481, 0
  br i1 %482, label %483, label %908

483:                                              ; preds = %479
  %484 = load i64, i64* %68, align 8
  %485 = load i64, i64* %69, align 8
  %486 = icmp eq i64 %484, %485
  br i1 %486, label %487, label %490

487:                                              ; preds = %483
  %488 = load i32, i32* %65, align 8
  %489 = icmp slt i32 %488, 65
  br i1 %489, label %490, label %908

490:                                              ; preds = %483, %487
  %491 = ptrtoint i32* %81 to i64
  %492 = sub i64 %491, %55
  %493 = ashr exact i64 %492, 2
  %494 = sext i32 %480 to i64
  %495 = icmp slt i64 %493, %494
  br i1 %495, label %958, label %496

496:                                              ; preds = %490
  %497 = sub i64 %72, %491
  %498 = ashr exact i64 %497, 2
  %499 = sext i32 %408 to i64
  %500 = icmp slt i64 %498, %499
  br i1 %500, label %958, label %501

501:                                              ; preds = %496
  %502 = sub nsw i64 0, %494
  %503 = getelementptr inbounds i32, i32* %81, i64 %502
  %504 = bitcast i32* %503 to i8*
  %505 = icmp slt i32 %480, 3
  %506 = icmp sgt i32 %408, 3
  %507 = and i1 %506, %505
  %508 = and i64 %491, 3
  %509 = icmp eq i64 %508, 0
  %510 = and i1 %509, %507
  br i1 %510, label %511, label %635

511:                                              ; preds = %501
  %512 = icmp eq i32 %480, 1
  br i1 %512, label %513, label %518

513:                                              ; preds = %511
  %514 = load i32, i32* %503, align 4
  %515 = zext i32 %514 to i64
  %516 = shl nuw i64 %515, 32
  %517 = or i64 %516, %515
  br label %522

518:                                              ; preds = %511
  %519 = bitcast i32* %503 to i64*
  %520 = load i64, i64* %519, align 4
  %521 = trunc i64 %520 to i32
  br label %522

522:                                              ; preds = %518, %513
  %523 = phi i32 [ %514, %513 ], [ %521, %518 ]
  %524 = phi i64 [ %517, %513 ], [ %520, %518 ]
  %525 = and i64 %491, 4
  %526 = icmp eq i64 %525, 0
  br i1 %526, label %533, label %527

527:                                              ; preds = %522
  %528 = getelementptr inbounds i32, i32* %503, i64 1
  %529 = getelementptr inbounds i32, i32* %81, i64 1
  store i32 %523, i32* %81, align 4
  %530 = lshr i64 %524, 32
  %531 = shl i64 %524, 32
  %532 = or i64 %530, %531
  br label %533

533:                                              ; preds = %527, %522
  %534 = phi i32* [ %528, %527 ], [ %503, %522 ]
  %535 = phi i32* [ %529, %527 ], [ %81, %522 ]
  %536 = phi i32 [ %407, %527 ], [ %408, %522 ]
  %537 = phi i64 [ %532, %527 ], [ %524, %522 ]
  %538 = lshr i32 %536, 1
  %539 = bitcast i32* %535 to i64*
  %540 = zext i32 %538 to i64
  %541 = icmp ugt i64 %540, 1
  %542 = select i1 %541, i64 %540, i64 1
  %543 = icmp ult i64 %542, 4
  br i1 %543, label %617, label %544

544:                                              ; preds = %533
  %545 = and i64 %542, 2147483644
  %546 = insertelement <2 x i64> undef, i64 %537, i32 0
  %547 = shufflevector <2 x i64> %546, <2 x i64> undef, <2 x i32> zeroinitializer
  %548 = insertelement <2 x i64> undef, i64 %537, i32 0
  %549 = shufflevector <2 x i64> %548, <2 x i64> undef, <2 x i32> zeroinitializer
  %550 = add nsw i64 %545, -4
  %551 = lshr exact i64 %550, 2
  %552 = add nuw nsw i64 %551, 1
  %553 = and i64 %552, 7
  %554 = icmp ult i64 %550, 28
  br i1 %554, label %602, label %555

555:                                              ; preds = %544
  %556 = sub nsw i64 %552, %553
  br label %557

557:                                              ; preds = %557, %555
  %558 = phi i64 [ 0, %555 ], [ %599, %557 ]
  %559 = phi i64 [ %556, %555 ], [ %600, %557 ]
  %560 = getelementptr inbounds i64, i64* %539, i64 %558
  %561 = bitcast i64* %560 to <2 x i64>*
  store <2 x i64> %547, <2 x i64>* %561, align 8
  %562 = getelementptr inbounds i64, i64* %560, i64 2
  %563 = bitcast i64* %562 to <2 x i64>*
  store <2 x i64> %549, <2 x i64>* %563, align 8
  %564 = or i64 %558, 4
  %565 = getelementptr inbounds i64, i64* %539, i64 %564
  %566 = bitcast i64* %565 to <2 x i64>*
  store <2 x i64> %547, <2 x i64>* %566, align 8
  %567 = getelementptr inbounds i64, i64* %565, i64 2
  %568 = bitcast i64* %567 to <2 x i64>*
  store <2 x i64> %549, <2 x i64>* %568, align 8
  %569 = or i64 %558, 8
  %570 = getelementptr inbounds i64, i64* %539, i64 %569
  %571 = bitcast i64* %570 to <2 x i64>*
  store <2 x i64> %547, <2 x i64>* %571, align 8
  %572 = getelementptr inbounds i64, i64* %570, i64 2
  %573 = bitcast i64* %572 to <2 x i64>*
  store <2 x i64> %549, <2 x i64>* %573, align 8
  %574 = or i64 %558, 12
  %575 = getelementptr inbounds i64, i64* %539, i64 %574
  %576 = bitcast i64* %575 to <2 x i64>*
  store <2 x i64> %547, <2 x i64>* %576, align 8
  %577 = getelementptr inbounds i64, i64* %575, i64 2
  %578 = bitcast i64* %577 to <2 x i64>*
  store <2 x i64> %549, <2 x i64>* %578, align 8
  %579 = or i64 %558, 16
  %580 = getelementptr inbounds i64, i64* %539, i64 %579
  %581 = bitcast i64* %580 to <2 x i64>*
  store <2 x i64> %547, <2 x i64>* %581, align 8
  %582 = getelementptr inbounds i64, i64* %580, i64 2
  %583 = bitcast i64* %582 to <2 x i64>*
  store <2 x i64> %549, <2 x i64>* %583, align 8
  %584 = or i64 %558, 20
  %585 = getelementptr inbounds i64, i64* %539, i64 %584
  %586 = bitcast i64* %585 to <2 x i64>*
  store <2 x i64> %547, <2 x i64>* %586, align 8
  %587 = getelementptr inbounds i64, i64* %585, i64 2
  %588 = bitcast i64* %587 to <2 x i64>*
  store <2 x i64> %549, <2 x i64>* %588, align 8
  %589 = or i64 %558, 24
  %590 = getelementptr inbounds i64, i64* %539, i64 %589
  %591 = bitcast i64* %590 to <2 x i64>*
  store <2 x i64> %547, <2 x i64>* %591, align 8
  %592 = getelementptr inbounds i64, i64* %590, i64 2
  %593 = bitcast i64* %592 to <2 x i64>*
  store <2 x i64> %549, <2 x i64>* %593, align 8
  %594 = or i64 %558, 28
  %595 = getelementptr inbounds i64, i64* %539, i64 %594
  %596 = bitcast i64* %595 to <2 x i64>*
  store <2 x i64> %547, <2 x i64>* %596, align 8
  %597 = getelementptr inbounds i64, i64* %595, i64 2
  %598 = bitcast i64* %597 to <2 x i64>*
  store <2 x i64> %549, <2 x i64>* %598, align 8
  %599 = add i64 %558, 32
  %600 = add i64 %559, -8
  %601 = icmp eq i64 %600, 0
  br i1 %601, label %602, label %557, !llvm.loop !37

602:                                              ; preds = %557, %544
  %603 = phi i64 [ 0, %544 ], [ %599, %557 ]
  %604 = icmp eq i64 %553, 0
  br i1 %604, label %615, label %605

605:                                              ; preds = %602, %605
  %606 = phi i64 [ %612, %605 ], [ %603, %602 ]
  %607 = phi i64 [ %613, %605 ], [ %553, %602 ]
  %608 = getelementptr inbounds i64, i64* %539, i64 %606
  %609 = bitcast i64* %608 to <2 x i64>*
  store <2 x i64> %547, <2 x i64>* %609, align 8
  %610 = getelementptr inbounds i64, i64* %608, i64 2
  %611 = bitcast i64* %610 to <2 x i64>*
  store <2 x i64> %549, <2 x i64>* %611, align 8
  %612 = add i64 %606, 4
  %613 = add i64 %607, -1
  %614 = icmp eq i64 %613, 0
  br i1 %614, label %615, label %605, !llvm.loop !38

615:                                              ; preds = %605, %602
  %616 = icmp eq i64 %542, %545
  br i1 %616, label %624, label %617

617:                                              ; preds = %615, %533
  %618 = phi i64 [ 0, %533 ], [ %545, %615 ]
  br label %619

619:                                              ; preds = %617, %619
  %620 = phi i64 [ %622, %619 ], [ %618, %617 ]
  %621 = getelementptr inbounds i64, i64* %539, i64 %620
  store i64 %537, i64* %621, align 8
  %622 = add nuw nsw i64 %620, 1
  %623 = icmp ult i64 %622, %540
  br i1 %623, label %619, label %624, !llvm.loop !39

624:                                              ; preds = %619, %615
  %625 = phi i64 [ %545, %615 ], [ %622, %619 ]
  %626 = trunc i64 %625 to i32
  %627 = shl i32 %626, 1
  %628 = sext i32 %627 to i64
  %629 = and i32 %536, 1
  %630 = icmp eq i32 %629, 0
  br i1 %630, label %767, label %631

631:                                              ; preds = %624
  %632 = getelementptr inbounds i32, i32* %534, i64 %628
  %633 = load i32, i32* %632, align 4
  %634 = getelementptr inbounds i32, i32* %535, i64 %628
  store i32 %633, i32* %634, align 4
  br label %767

635:                                              ; preds = %501
  %636 = icmp slt i32 %480, %408
  br i1 %636, label %637, label %746

637:                                              ; preds = %635
  %638 = icmp sgt i32 %408, 0
  br i1 %638, label %639, label %767

639:                                              ; preds = %637
  %640 = zext i32 %408 to i64
  %641 = icmp ult i32 %408, 8
  br i1 %641, label %642, label %660

642:                                              ; preds = %744, %660, %639
  %643 = phi i64 [ 0, %660 ], [ 0, %639 ], [ %668, %744 ]
  %644 = xor i64 %643, -1
  %645 = add nsw i64 %644, %640
  %646 = and i64 %640, 3
  %647 = icmp eq i64 %646, 0
  br i1 %647, label %657, label %648

648:                                              ; preds = %642, %648
  %649 = phi i64 [ %654, %648 ], [ %643, %642 ]
  %650 = phi i64 [ %655, %648 ], [ %646, %642 ]
  %651 = getelementptr inbounds i32, i32* %503, i64 %649
  %652 = load i32, i32* %651, align 4
  %653 = getelementptr inbounds i32, i32* %81, i64 %649
  store i32 %652, i32* %653, align 4
  %654 = add nuw nsw i64 %649, 1
  %655 = add i64 %650, -1
  %656 = icmp eq i64 %655, 0
  br i1 %656, label %657, label %648, !llvm.loop !40

657:                                              ; preds = %648, %642
  %658 = phi i64 [ %643, %642 ], [ %654, %648 ]
  %659 = icmp ult i64 %645, 3
  br i1 %659, label %767, label %748

660:                                              ; preds = %639
  %661 = getelementptr i32, i32* %81, i64 %640
  %662 = sub nsw i64 %640, %494
  %663 = getelementptr i32, i32* %81, i64 %662
  %664 = icmp ult i32* %81, %663
  %665 = icmp ult i32* %503, %661
  %666 = and i1 %664, %665
  br i1 %666, label %642, label %667

667:                                              ; preds = %660
  %668 = and i64 %640, 4294967288
  %669 = add nsw i64 %668, -8
  %670 = lshr exact i64 %669, 3
  %671 = add nuw nsw i64 %670, 1
  %672 = and i64 %671, 3
  %673 = icmp ult i64 %669, 24
  br i1 %673, label %725, label %674

674:                                              ; preds = %667
  %675 = sub nsw i64 %671, %672
  br label %676

676:                                              ; preds = %676, %674
  %677 = phi i64 [ 0, %674 ], [ %722, %676 ]
  %678 = phi i64 [ %675, %674 ], [ %723, %676 ]
  %679 = getelementptr inbounds i32, i32* %503, i64 %677
  %680 = bitcast i32* %679 to <4 x i32>*
  %681 = load <4 x i32>, <4 x i32>* %680, align 4, !alias.scope !41
  %682 = getelementptr inbounds i32, i32* %679, i64 4
  %683 = bitcast i32* %682 to <4 x i32>*
  %684 = load <4 x i32>, <4 x i32>* %683, align 4, !alias.scope !41
  %685 = getelementptr inbounds i32, i32* %81, i64 %677
  %686 = bitcast i32* %685 to <4 x i32>*
  store <4 x i32> %681, <4 x i32>* %686, align 4, !alias.scope !44, !noalias !41
  %687 = getelementptr inbounds i32, i32* %685, i64 4
  %688 = bitcast i32* %687 to <4 x i32>*
  store <4 x i32> %684, <4 x i32>* %688, align 4, !alias.scope !44, !noalias !41
  %689 = or i64 %677, 8
  %690 = getelementptr inbounds i32, i32* %503, i64 %689
  %691 = bitcast i32* %690 to <4 x i32>*
  %692 = load <4 x i32>, <4 x i32>* %691, align 4, !alias.scope !41
  %693 = getelementptr inbounds i32, i32* %690, i64 4
  %694 = bitcast i32* %693 to <4 x i32>*
  %695 = load <4 x i32>, <4 x i32>* %694, align 4, !alias.scope !41
  %696 = getelementptr inbounds i32, i32* %81, i64 %689
  %697 = bitcast i32* %696 to <4 x i32>*
  store <4 x i32> %692, <4 x i32>* %697, align 4, !alias.scope !44, !noalias !41
  %698 = getelementptr inbounds i32, i32* %696, i64 4
  %699 = bitcast i32* %698 to <4 x i32>*
  store <4 x i32> %695, <4 x i32>* %699, align 4, !alias.scope !44, !noalias !41
  %700 = or i64 %677, 16
  %701 = getelementptr inbounds i32, i32* %503, i64 %700
  %702 = bitcast i32* %701 to <4 x i32>*
  %703 = load <4 x i32>, <4 x i32>* %702, align 4, !alias.scope !41
  %704 = getelementptr inbounds i32, i32* %701, i64 4
  %705 = bitcast i32* %704 to <4 x i32>*
  %706 = load <4 x i32>, <4 x i32>* %705, align 4, !alias.scope !41
  %707 = getelementptr inbounds i32, i32* %81, i64 %700
  %708 = bitcast i32* %707 to <4 x i32>*
  store <4 x i32> %703, <4 x i32>* %708, align 4, !alias.scope !44, !noalias !41
  %709 = getelementptr inbounds i32, i32* %707, i64 4
  %710 = bitcast i32* %709 to <4 x i32>*
  store <4 x i32> %706, <4 x i32>* %710, align 4, !alias.scope !44, !noalias !41
  %711 = or i64 %677, 24
  %712 = getelementptr inbounds i32, i32* %503, i64 %711
  %713 = bitcast i32* %712 to <4 x i32>*
  %714 = load <4 x i32>, <4 x i32>* %713, align 4, !alias.scope !41
  %715 = getelementptr inbounds i32, i32* %712, i64 4
  %716 = bitcast i32* %715 to <4 x i32>*
  %717 = load <4 x i32>, <4 x i32>* %716, align 4, !alias.scope !41
  %718 = getelementptr inbounds i32, i32* %81, i64 %711
  %719 = bitcast i32* %718 to <4 x i32>*
  store <4 x i32> %714, <4 x i32>* %719, align 4, !alias.scope !44, !noalias !41
  %720 = getelementptr inbounds i32, i32* %718, i64 4
  %721 = bitcast i32* %720 to <4 x i32>*
  store <4 x i32> %717, <4 x i32>* %721, align 4, !alias.scope !44, !noalias !41
  %722 = add i64 %677, 32
  %723 = add i64 %678, -4
  %724 = icmp eq i64 %723, 0
  br i1 %724, label %725, label %676, !llvm.loop !46

725:                                              ; preds = %676, %667
  %726 = phi i64 [ 0, %667 ], [ %722, %676 ]
  %727 = icmp eq i64 %672, 0
  br i1 %727, label %744, label %728

728:                                              ; preds = %725, %728
  %729 = phi i64 [ %741, %728 ], [ %726, %725 ]
  %730 = phi i64 [ %742, %728 ], [ %672, %725 ]
  %731 = getelementptr inbounds i32, i32* %503, i64 %729
  %732 = bitcast i32* %731 to <4 x i32>*
  %733 = load <4 x i32>, <4 x i32>* %732, align 4, !alias.scope !41
  %734 = getelementptr inbounds i32, i32* %731, i64 4
  %735 = bitcast i32* %734 to <4 x i32>*
  %736 = load <4 x i32>, <4 x i32>* %735, align 4, !alias.scope !41
  %737 = getelementptr inbounds i32, i32* %81, i64 %729
  %738 = bitcast i32* %737 to <4 x i32>*
  store <4 x i32> %733, <4 x i32>* %738, align 4, !alias.scope !44, !noalias !41
  %739 = getelementptr inbounds i32, i32* %737, i64 4
  %740 = bitcast i32* %739 to <4 x i32>*
  store <4 x i32> %736, <4 x i32>* %740, align 4, !alias.scope !44, !noalias !41
  %741 = add i64 %729, 8
  %742 = add i64 %730, -1
  %743 = icmp eq i64 %742, 0
  br i1 %743, label %744, label %728, !llvm.loop !47

744:                                              ; preds = %728, %725
  %745 = icmp eq i64 %668, %640
  br i1 %745, label %767, label %642

746:                                              ; preds = %635
  %747 = shl nsw i64 %499, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %83, i8* align 4 %504, i64 %747, i1 false) #4
  br label %767

748:                                              ; preds = %657, %748
  %749 = phi i64 [ %765, %748 ], [ %658, %657 ]
  %750 = getelementptr inbounds i32, i32* %503, i64 %749
  %751 = load i32, i32* %750, align 4
  %752 = getelementptr inbounds i32, i32* %81, i64 %749
  store i32 %751, i32* %752, align 4
  %753 = add nuw nsw i64 %749, 1
  %754 = getelementptr inbounds i32, i32* %503, i64 %753
  %755 = load i32, i32* %754, align 4
  %756 = getelementptr inbounds i32, i32* %81, i64 %753
  store i32 %755, i32* %756, align 4
  %757 = add nuw nsw i64 %749, 2
  %758 = getelementptr inbounds i32, i32* %503, i64 %757
  %759 = load i32, i32* %758, align 4
  %760 = getelementptr inbounds i32, i32* %81, i64 %757
  store i32 %759, i32* %760, align 4
  %761 = add nuw nsw i64 %749, 3
  %762 = getelementptr inbounds i32, i32* %503, i64 %761
  %763 = load i32, i32* %762, align 4
  %764 = getelementptr inbounds i32, i32* %81, i64 %761
  store i32 %763, i32* %764, align 4
  %765 = add nuw nsw i64 %749, 4
  %766 = icmp eq i64 %765, %640
  br i1 %766, label %767, label %748, !llvm.loop !48

767:                                              ; preds = %657, %748, %744, %624, %631, %637, %746
  %768 = getelementptr inbounds i32, i32* %81, i64 %499
  %769 = add nsw i32 %408, %77
  %770 = icmp slt i32 %769, %2
  br i1 %770, label %784, label %771

771:                                              ; preds = %767, %782
  %772 = phi i32 [ %775, %782 ], [ %76, %767 ]
  %773 = phi i32 [ %774, %782 ], [ %769, %767 ]
  %774 = sub nsw i32 %773, %2
  %775 = add nsw i32 %772, 1
  %776 = icmp slt i32 %772, %4
  %777 = and i1 %73, %776
  %778 = and i32 %775, 15
  %779 = icmp eq i32 %778, 0
  %780 = and i1 %777, %779
  br i1 %780, label %781, label %782

781:                                              ; preds = %771
  tail call void %5(%struct.VP8LDecoder* %0, i32 %775) #4, !callees !36
  br label %782

782:                                              ; preds = %771, %781
  %783 = icmp slt i32 %774, %2
  br i1 %783, label %784, label %771

784:                                              ; preds = %782, %767
  %785 = phi i32 [ %769, %767 ], [ %774, %782 ]
  %786 = phi i32 [ %76, %767 ], [ %775, %782 ]
  %787 = and i32 %785, %31
  %788 = icmp eq i32 %787, 0
  br i1 %788, label %807, label %789

789:                                              ; preds = %784
  %790 = load i32, i32* %61, align 4
  %791 = icmp eq i32 %790, 0
  br i1 %791, label %803, label %792

792:                                              ; preds = %789
  %793 = load i32, i32* %62, align 8
  %794 = load i32*, i32** %63, align 8
  %795 = ashr i32 %786, %790
  %796 = mul nsw i32 %793, %795
  %797 = ashr i32 %785, %790
  %798 = add nsw i32 %796, %797
  %799 = sext i32 %798 to i64
  %800 = getelementptr inbounds i32, i32* %794, i64 %799
  %801 = load i32, i32* %800, align 4
  %802 = sext i32 %801 to i64
  br label %803

803:                                              ; preds = %789, %792
  %804 = phi i64 [ %802, %792 ], [ 0, %789 ]
  %805 = load %struct.HTreeGroup*, %struct.HTreeGroup** %64, align 8
  %806 = getelementptr inbounds %struct.HTreeGroup, %struct.HTreeGroup* %805, i64 %804
  br label %807

807:                                              ; preds = %784, %803
  %808 = phi %struct.HTreeGroup* [ %806, %803 ], [ %118, %784 ]
  %809 = icmp ult i32* %80, %768
  %810 = and i1 %74, %809
  br i1 %810, label %811, label %901

811:                                              ; preds = %807
  %812 = getelementptr i8, i8* %83, i64 -1
  %813 = shl nsw i64 %499, 2
  %814 = sub i64 %813, %82
  %815 = getelementptr i8, i8* %812, i64 %814
  %816 = ptrtoint i8* %815 to i64
  %817 = and i64 %816, 4
  %818 = icmp eq i64 %817, 0
  br i1 %818, label %819, label %828

819:                                              ; preds = %811
  %820 = getelementptr inbounds i32, i32* %80, i64 1
  %821 = load i32, i32* %80, align 4
  %822 = load i32, i32* %70, align 8
  %823 = mul i32 %821, 506832829
  %824 = lshr i32 %823, %822
  %825 = load i32*, i32** %71, align 8
  %826 = sext i32 %824 to i64
  %827 = getelementptr inbounds i32, i32* %825, i64 %826
  store i32 %821, i32* %827, align 4
  br label %828

828:                                              ; preds = %819, %811
  %829 = phi i32* [ %820, %819 ], [ %80, %811 ]
  %830 = phi i32* [ %820, %819 ], [ undef, %811 ]
  %831 = icmp ult i8* %815, inttoptr (i64 4 to i8*)
  br i1 %831, label %901, label %832

832:                                              ; preds = %828, %832
  %833 = phi i32* [ %842, %832 ], [ %829, %828 ]
  %834 = getelementptr inbounds i32, i32* %833, i64 1
  %835 = load i32, i32* %833, align 4
  %836 = load i32, i32* %70, align 8
  %837 = mul i32 %835, 506832829
  %838 = lshr i32 %837, %836
  %839 = load i32*, i32** %71, align 8
  %840 = sext i32 %838 to i64
  %841 = getelementptr inbounds i32, i32* %839, i64 %840
  store i32 %835, i32* %841, align 4
  %842 = getelementptr inbounds i32, i32* %833, i64 2
  %843 = load i32, i32* %834, align 4
  %844 = load i32, i32* %70, align 8
  %845 = mul i32 %843, 506832829
  %846 = lshr i32 %845, %844
  %847 = load i32*, i32** %71, align 8
  %848 = sext i32 %846 to i64
  %849 = getelementptr inbounds i32, i32* %847, i64 %848
  store i32 %843, i32* %849, align 4
  %850 = icmp ult i32* %842, %768
  br i1 %850, label %832, label %901

851:                                              ; preds = %393
  %852 = icmp slt i32 %206, %22
  br i1 %852, label %853, label %958

853:                                              ; preds = %851
  %854 = add nsw i32 %206, -280
  %855 = icmp ult i32* %80, %81
  br i1 %855, label %856, label %895

856:                                              ; preds = %853
  %857 = getelementptr i8, i8* %83, i64 -1
  %858 = sub i64 0, %82
  %859 = getelementptr i8, i8* %857, i64 %858
  %860 = ptrtoint i8* %859 to i64
  %861 = and i64 %860, 4
  %862 = icmp eq i64 %861, 0
  br i1 %862, label %863, label %872

863:                                              ; preds = %856
  %864 = getelementptr inbounds i32, i32* %80, i64 1
  %865 = load i32, i32* %80, align 4
  %866 = load i32, i32* %70, align 8
  %867 = mul i32 %865, 506832829
  %868 = lshr i32 %867, %866
  %869 = load i32*, i32** %71, align 8
  %870 = sext i32 %868 to i64
  %871 = getelementptr inbounds i32, i32* %869, i64 %870
  store i32 %865, i32* %871, align 4
  br label %872

872:                                              ; preds = %863, %856
  %873 = phi i32* [ %864, %863 ], [ %80, %856 ]
  %874 = phi i32* [ %864, %863 ], [ undef, %856 ]
  %875 = icmp ult i8* %859, inttoptr (i64 4 to i8*)
  br i1 %875, label %895, label %876

876:                                              ; preds = %872, %876
  %877 = phi i32* [ %886, %876 ], [ %873, %872 ]
  %878 = getelementptr inbounds i32, i32* %877, i64 1
  %879 = load i32, i32* %877, align 4
  %880 = load i32, i32* %70, align 8
  %881 = mul i32 %879, 506832829
  %882 = lshr i32 %881, %880
  %883 = load i32*, i32** %71, align 8
  %884 = sext i32 %882 to i64
  %885 = getelementptr inbounds i32, i32* %883, i64 %884
  store i32 %879, i32* %885, align 4
  %886 = getelementptr inbounds i32, i32* %877, i64 2
  %887 = load i32, i32* %878, align 4
  %888 = load i32, i32* %70, align 8
  %889 = mul i32 %887, 506832829
  %890 = lshr i32 %889, %888
  %891 = load i32*, i32** %71, align 8
  %892 = sext i32 %890 to i64
  %893 = getelementptr inbounds i32, i32* %891, i64 %892
  store i32 %887, i32* %893, align 4
  %894 = icmp ult i32* %886, %81
  br i1 %894, label %876, label %895

895:                                              ; preds = %872, %876, %853
  %896 = phi i32* [ %80, %853 ], [ %874, %872 ], [ %886, %876 ]
  %897 = load i32*, i32** %71, align 8
  %898 = zext i32 %854 to i64
  %899 = getelementptr inbounds i32, i32* %897, i64 %898
  %900 = load i32, i32* %899, align 4
  br label %363

901:                                              ; preds = %828, %832, %382, %807, %379, %366
  %902 = phi i32* [ %368, %379 ], [ %368, %366 ], [ %768, %807 ], [ %368, %382 ], [ %768, %832 ], [ %768, %828 ]
  %903 = phi i32* [ %367, %379 ], [ %367, %366 ], [ %80, %807 ], [ %384, %382 ], [ %830, %828 ], [ %842, %832 ]
  %904 = phi %struct.HTreeGroup* [ %118, %379 ], [ %118, %366 ], [ %808, %807 ], [ %118, %382 ], [ %808, %832 ], [ %808, %828 ]
  %905 = phi i32 [ 0, %379 ], [ %369, %366 ], [ %785, %807 ], [ 0, %382 ], [ %785, %832 ], [ %785, %828 ]
  %906 = phi i32 [ %372, %379 ], [ %76, %366 ], [ %786, %807 ], [ %372, %382 ], [ %786, %832 ], [ %786, %828 ]
  %907 = icmp ult i32* %902, %19
  br i1 %907, label %75, label %908

908:                                              ; preds = %901, %157, %210, %149, %195, %340, %487, %479, %350, %6
  %909 = phi i32* [ %13, %6 ], [ %81, %350 ], [ %81, %479 ], [ %81, %487 ], [ %81, %340 ], [ %81, %195 ], [ %81, %149 ], [ %81, %210 ], [ %81, %157 ], [ %902, %901 ]
  %910 = phi i32 [ %9, %6 ], [ %76, %350 ], [ %76, %479 ], [ %76, %487 ], [ %76, %340 ], [ %76, %195 ], [ %76, %149 ], [ %76, %210 ], [ %76, %157 ], [ %906, %901 ]
  %911 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 6, i32 5
  %912 = load i32, i32* %911, align 4
  %913 = icmp eq i32 %912, 0
  br i1 %913, label %914, label %925

914:                                              ; preds = %908
  %915 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 6, i32 3
  %916 = load i64, i64* %915, align 8
  %917 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 6, i32 2
  %918 = load i64, i64* %917, align 8
  %919 = icmp eq i64 %916, %918
  br i1 %919, label %920, label %925

920:                                              ; preds = %914
  %921 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 6, i32 4
  %922 = load i32, i32* %921, align 8
  %923 = icmp sgt i32 %922, 64
  %924 = zext i1 %923 to i32
  br label %925

925:                                              ; preds = %908, %914, %920
  %926 = phi i32 [ 1, %908 ], [ 0, %914 ], [ %924, %920 ]
  store i32 %926, i32* %911, align 4
  %927 = load i32, i32* %23, align 8
  %928 = icmp eq i32 %927, 0
  %929 = icmp eq i32 %926, 0
  %930 = or i1 %929, %928
  %931 = xor i1 %930, true
  %932 = icmp ult i32* %909, %16
  %933 = and i1 %932, %931
  br i1 %933, label %934, label %945

934:                                              ; preds = %925
  %935 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 0
  store i32 5, i32* %935, align 8
  %936 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 8
  %937 = bitcast %struct.VP8LBitReader* %11 to i8*
  %938 = bitcast %struct.VP8LBitReader* %936 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %937, i8* align 8 %938, i64 40, i1 false) #4
  %939 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 9
  %940 = load i32, i32* %939, align 8
  store i32 %940, i32* %7, align 8
  %941 = load i32, i32* %20, align 8
  %942 = icmp sgt i32 %941, 0
  br i1 %942, label %943, label %960

943:                                              ; preds = %934
  %944 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15, i32 2
  tail call void @VP8LColorCacheCopy(%struct.VP8LColorCache* %944, %struct.VP8LColorCache* %28) #4
  br label %960

945:                                              ; preds = %925
  br i1 %929, label %946, label %958

946:                                              ; preds = %945
  %947 = icmp eq void (%struct.VP8LDecoder*, i32)* %5, null
  br i1 %947, label %951, label %948

948:                                              ; preds = %946
  %949 = icmp sgt i32 %910, %4
  %950 = select i1 %949, i32 %4, i32 %910
  tail call void %5(%struct.VP8LDecoder* %0, i32 %950) #4, !callees !36
  br label %951

951:                                              ; preds = %946, %948
  %952 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 0
  store i32 0, i32* %952, align 8
  %953 = ptrtoint i32* %909 to i64
  %954 = ptrtoint i32* %1 to i64
  %955 = sub i64 %953, %954
  %956 = lshr exact i64 %955, 2
  %957 = trunc i64 %956 to i32
  store i32 %957, i32* %7, align 8
  br label %960

958:                                              ; preds = %496, %490, %851, %945
  %959 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 0
  store i32 3, i32* %959, align 8
  br label %960

960:                                              ; preds = %943, %934, %951, %958
  %961 = phi i32 [ 0, %958 ], [ 1, %951 ], [ 1, %934 ], [ 1, %943 ]
  ret i32 %961
}

; Function Attrs: nounwind ssp uwtable
define internal void @ExtractAlphaRows(%struct.VP8LDecoder*, i32) #1 {
  %3 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 12
  %4 = load i32, i32* %3, align 4
  %5 = sub nsw i32 %1, %4
  %6 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 10
  %7 = icmp sgt i32 %5, 0
  br i1 %7, label %8, label %94

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 4
  %10 = load i32*, i32** %9, align 8
  %11 = load i32, i32* %6, align 4
  %12 = mul nsw i32 %11, %4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i32, i32* %10, i64 %13
  %15 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 2
  %16 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 5
  %17 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 16
  br label %18

18:                                               ; preds = %8, %87
  %19 = phi i32 [ %11, %8 ], [ %89, %87 ]
  %20 = phi i32 [ %4, %8 ], [ %40, %87 ]
  %21 = phi i32 [ %5, %8 ], [ %88, %87 ]
  %22 = phi i32* [ %14, %8 ], [ %92, %87 ]
  %23 = icmp slt i32 %21, 16
  %24 = select i1 %23, i32 %21, i32 16
  %25 = load %struct.VP8Io*, %struct.VP8Io** %15, align 8
  %26 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %25, i64 0, i32 10
  %27 = bitcast i8** %26 to %struct.ALPHDecoder**
  %28 = load %struct.ALPHDecoder*, %struct.ALPHDecoder** %27, align 8
  %29 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %28, i64 0, i32 8
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %25, i64 0, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = mul nsw i32 %32, %24
  %34 = mul nsw i32 %32, %20
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %30, i64 %35
  %37 = load i32*, i32** %16, align 8
  %38 = load i32, i32* %17, align 8
  %39 = mul nsw i32 %19, %24
  %40 = add nsw i32 %24, %20
  %41 = icmp sgt i32 %38, 0
  br i1 %41, label %42, label %52

42:                                               ; preds = %18
  %43 = sext i32 %38 to i64
  %44 = add nsw i64 %43, -1
  %45 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 17, i64 %44
  tail call void @VP8LInverseTransform(%struct.VP8LTransform* %45, i32 %20, i32 %40, i32* %22, i32* %37) #4
  %46 = icmp sgt i64 %44, 0
  br i1 %46, label %47, label %59

47:                                               ; preds = %42, %47
  %48 = phi i64 [ %49, %47 ], [ %44, %42 ]
  %49 = add nsw i64 %48, -1
  %50 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 17, i64 %49
  tail call void @VP8LInverseTransform(%struct.VP8LTransform* %50, i32 %20, i32 %40, i32* %37, i32* %37) #4
  %51 = icmp sgt i64 %49, 0
  br i1 %51, label %47, label %59, !llvm.loop !49

52:                                               ; preds = %18
  %53 = icmp eq i32* %37, %22
  br i1 %53, label %59, label %54

54:                                               ; preds = %52
  %55 = bitcast i32* %37 to i8*
  %56 = bitcast i32* %22 to i8*
  %57 = sext i32 %39 to i64
  %58 = shl nsw i64 %57, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %55, i8* align 4 %56, i64 %58, i1 false) #4
  br label %59

59:                                               ; preds = %42, %47, %52, %54
  %60 = load void (i32*, i8*, i32)*, void (i32*, i8*, i32)** @WebPExtractGreen, align 8
  tail call void %60(i32* %37, i8* %36, i32 %33) #4
  %61 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %28, i64 0, i32 3
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %87, label %64

64:                                               ; preds = %59
  %65 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %28, i64 0, i32 9
  %66 = load i8*, i8** %65, align 8
  %67 = icmp sgt i32 %21, 0
  br i1 %67, label %68, label %85

68:                                               ; preds = %64
  %69 = sext i32 %32 to i64
  %70 = zext i32 %62 to i64
  %71 = getelementptr inbounds [4 x void (i8*, i8*, i8*, i32)*], [4 x void (i8*, i8*, i8*, i32)*]* @WebPUnfilters, i64 0, i64 %70
  %72 = load void (i8*, i8*, i8*, i32)*, void (i8*, i8*, i8*, i32)** %71, align 8
  tail call void %72(i8* %66, i8* %36, i8* %36, i32 %32) #4
  %73 = add i32 %20, 1
  %74 = icmp eq i32 %73, %40
  br i1 %74, label %85, label %75

75:                                               ; preds = %68, %75
  %76 = phi i32 [ %83, %75 ], [ %73, %68 ]
  %77 = phi i8* [ %78, %75 ], [ %36, %68 ]
  %78 = getelementptr inbounds i8, i8* %77, i64 %69
  %79 = load i32, i32* %61, align 4
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds [4 x void (i8*, i8*, i8*, i32)*], [4 x void (i8*, i8*, i8*, i32)*]* @WebPUnfilters, i64 0, i64 %80
  %82 = load void (i8*, i8*, i8*, i32)*, void (i8*, i8*, i8*, i32)** %81, align 8
  tail call void %82(i8* %77, i8* %78, i8* %78, i32 %32) #4
  %83 = add i32 %76, 1
  %84 = icmp eq i32 %83, %40
  br i1 %84, label %85, label %75

85:                                               ; preds = %75, %68, %64
  %86 = phi i8* [ %66, %64 ], [ %36, %68 ], [ %78, %75 ]
  store i8* %86, i8** %65, align 8
  br label %87

87:                                               ; preds = %59, %85
  %88 = sub nsw i32 %21, %24
  %89 = load i32, i32* %6, align 4
  %90 = mul nsw i32 %89, %24
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i32, i32* %22, i64 %91
  %93 = icmp sgt i32 %88, 0
  br i1 %93, label %18, label %94

94:                                               ; preds = %87, %2
  %95 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 14
  store i32 %1, i32* %95, align 4
  store i32 %1, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8LDecodeHeader(%struct.VP8LDecoder*, %struct.VP8Io*) local_unnamed_addr #1 {
  %3 = icmp eq %struct.VP8LDecoder* %0, null
  br i1 %3, label %38, label %4

4:                                                ; preds = %2
  %5 = icmp eq %struct.VP8Io* %1, null
  br i1 %5, label %6, label %8

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 0
  store i32 2, i32* %7, align 8
  br label %38

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 2
  store %struct.VP8Io* %1, %struct.VP8Io** %9, align 8
  %10 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 0
  store i32 0, i32* %10, align 8
  %11 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 6
  %12 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 16
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 15
  %15 = load i64, i64* %14, align 8
  tail call void @VP8LInitBitReader(%struct.VP8LBitReader* %11, i8* %13, i64 %15) #4
  %16 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %11, i32 8) #4
  %17 = icmp eq i32 %16, 47
  br i1 %17, label %18, label %30

18:                                               ; preds = %8
  %19 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %11, i32 14) #4
  %20 = add i32 %19, 1
  %21 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %11, i32 14) #4
  %22 = add i32 %21, 1
  %23 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %11, i32 1) #4
  %24 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %11, i32 3) #4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %30

26:                                               ; preds = %18
  %27 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 6, i32 5
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %31, label %30

30:                                               ; preds = %26, %18, %8
  store i32 3, i32* %10, align 8
  br label %37

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 1
  store i32 2, i32* %32, align 4
  %33 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 0
  store i32 %20, i32* %33, align 8
  %34 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 1
  store i32 %22, i32* %34, align 4
  %35 = tail call fastcc i32 @DecodeImageStream(i32 %20, i32 %22, i32 1, %struct.VP8LDecoder* nonnull %0, i32** null)
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %31, %30
  tail call void @VP8LClear(%struct.VP8LDecoder* nonnull %0)
  br label %38

38:                                               ; preds = %31, %2, %37, %6
  %39 = phi i32 [ 0, %6 ], [ 0, %37 ], [ 0, %2 ], [ 1, %31 ]
  ret i32 %39
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8LDecodeImage(%struct.VP8LDecoder*) local_unnamed_addr #1 {
  %2 = icmp eq %struct.VP8LDecoder* %0, null
  br i1 %2, label %112, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 2
  %5 = load %struct.VP8Io*, %struct.VP8Io** %4, align 8
  %6 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %5, i64 0, i32 10
  %7 = bitcast i8** %6 to %struct.WebPDecParams**
  %8 = load %struct.WebPDecParams*, %struct.WebPDecParams** %7, align 8
  %9 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %96, label %12

12:                                               ; preds = %3
  %13 = bitcast %struct.WebPDecParams* %8 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 3
  %16 = bitcast %struct.WebPDecBuffer** %15 to i64*
  store i64 %14, i64* %16, align 8
  %17 = getelementptr inbounds %struct.WebPDecParams, %struct.WebPDecParams* %8, i64 0, i32 5
  %18 = load %struct.WebPDecoderOptions*, %struct.WebPDecoderOptions** %17, align 8
  %19 = tail call i32 @WebPIoInitFromOptions(%struct.WebPDecoderOptions* %18, %struct.VP8Io* %5, i32 3) #4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %12
  %22 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 0
  store i32 2, i32* %22, align 8
  br label %111

23:                                               ; preds = %12
  %24 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %5, i64 0, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 10
  %27 = load i32, i32* %26, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 11
  %30 = load i32, i32* %29, align 8
  %31 = sext i32 %30 to i64
  %32 = mul nsw i64 %31, %28
  %33 = and i32 %25, 65535
  %34 = zext i32 %33 to i64
  %35 = sext i32 %25 to i64
  %36 = shl nsw i64 %35, 4
  %37 = add nsw i64 %36, %34
  %38 = add i64 %37, %32
  %39 = tail call i8* @WebPSafeMalloc(i64 %38, i64 4) #4
  %40 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 4
  %41 = bitcast i32** %40 to i8**
  store i8* %39, i8** %41, align 8
  %42 = icmp eq i8* %39, null
  br i1 %42, label %43, label %46

43:                                               ; preds = %23
  %44 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 0
  store i32 1, i32* %44, align 8
  %45 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 5
  store i32* null, i32** %45, align 8
  br label %111

46:                                               ; preds = %23
  %47 = bitcast i8* %39 to i32*
  %48 = getelementptr inbounds i32, i32* %47, i64 %32
  %49 = getelementptr inbounds i32, i32* %48, i64 %34
  %50 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 5
  store i32* %49, i32** %50, align 8
  %51 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %5, i64 0, i32 23
  %52 = load i32, i32* %51, align 8
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %56, label %54

54:                                               ; preds = %46
  %55 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 0
  store i32 2, i32* %55, align 8
  br label %111

56:                                               ; preds = %46
  %57 = load %struct.WebPDecBuffer*, %struct.WebPDecBuffer** %15, align 8
  %58 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %57, i64 0, i32 0
  %59 = load i32, i32* %58, align 8
  %60 = add i32 %59, -7
  %61 = icmp ugt i32 %60, 3
  br i1 %61, label %66, label %62

62:                                               ; preds = %56
  tail call void @WebPInitAlphaProcessing() #4
  %63 = load %struct.WebPDecBuffer*, %struct.WebPDecBuffer** %15, align 8
  %64 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %63, i64 0, i32 0
  %65 = load i32, i32* %64, align 8
  br label %66

66:                                               ; preds = %56, %62
  %67 = phi i32 [ %59, %56 ], [ %65, %62 ]
  %68 = icmp ugt i32 %67, 10
  br i1 %68, label %69, label %75

69:                                               ; preds = %66
  tail call void @WebPInitConvertARGBToYUV() #4
  %70 = load %struct.WebPDecBuffer*, %struct.WebPDecBuffer** %15, align 8
  %71 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %70, i64 0, i32 4, i32 0, i32 3
  %72 = load i8*, i8** %71, align 8
  %73 = icmp eq i8* %72, null
  br i1 %73, label %75, label %74

74:                                               ; preds = %69
  tail call void @WebPInitAlphaProcessing() #4
  br label %75

75:                                               ; preds = %69, %66, %74
  %76 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 7
  %77 = load i32, i32* %76, align 8
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %95, label %79

79:                                               ; preds = %75
  %80 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15, i32 0
  %81 = load i32, i32* %80, align 8
  %82 = icmp sgt i32 %81, 0
  br i1 %82, label %83, label %95

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15, i32 2
  %85 = getelementptr inbounds %struct.VP8LColorCache, %struct.VP8LColorCache* %84, i64 0, i32 0
  %86 = load i32*, i32** %85, align 8
  %87 = icmp eq i32* %86, null
  br i1 %87, label %88, label %95

88:                                               ; preds = %83
  %89 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 15, i32 1, i32 2
  %90 = load i32, i32* %89, align 4
  %91 = tail call i32 @VP8LColorCacheInit(%struct.VP8LColorCache* %84, i32 %90) #4
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %95

93:                                               ; preds = %88
  %94 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 0
  store i32 1, i32* %94, align 8
  br label %111

95:                                               ; preds = %88, %75, %79, %83
  store i32 0, i32* %9, align 4
  br label %96

96:                                               ; preds = %3, %95
  %97 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 4
  %98 = load i32*, i32** %97, align 8
  %99 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 10
  %100 = load i32, i32* %99, align 4
  %101 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 11
  %102 = load i32, i32* %101, align 8
  %103 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %5, i64 0, i32 22
  %104 = load i32, i32* %103, align 4
  %105 = tail call fastcc i32 @DecodeImageData(%struct.VP8LDecoder* nonnull %0, i32* %98, i32 %100, i32 %102, i32 %104, void (%struct.VP8LDecoder*, i32)* nonnull @ProcessRows)
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %111, label %107

107:                                              ; preds = %96
  %108 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 14
  %109 = load i32, i32* %108, align 4
  %110 = getelementptr inbounds %struct.WebPDecParams, %struct.WebPDecParams* %8, i64 0, i32 4
  store i32 %109, i32* %110, align 8
  br label %112

111:                                              ; preds = %43, %96, %93, %54, %21
  tail call void @VP8LClear(%struct.VP8LDecoder* nonnull %0)
  br label %112

112:                                              ; preds = %1, %111, %107
  %113 = phi i32 [ 0, %111 ], [ 1, %107 ], [ 0, %1 ]
  ret i32 %113
}

declare i32 @WebPIoInitFromOptions(%struct.WebPDecoderOptions*, %struct.VP8Io*, i32) local_unnamed_addr #3

declare void @WebPInitConvertARGBToYUV() local_unnamed_addr #3

declare i32 @VP8LColorCacheInit(%struct.VP8LColorCache*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @ProcessRows(%struct.VP8LDecoder*, i32) #1 {
  %3 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 12
  %4 = load i32, i32* %3, align 4
  %5 = sub nsw i32 %1, %4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %265

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 4
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 10
  %11 = load i32, i32* %10, align 4
  %12 = mul nsw i32 %11, %4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i32, i32* %9, i64 %13
  %15 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 2
  %16 = load %struct.VP8Io*, %struct.VP8Io** %15, align 8
  %17 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 5
  %18 = bitcast i32** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %16, i64 0, i32 0
  %21 = load i32, i32* %20, align 8
  %22 = shl i32 %21, 2
  %23 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 16
  %24 = load i32, i32* %23, align 8
  %25 = mul nsw i32 %11, %5
  %26 = inttoptr i64 %19 to i32*
  %27 = icmp sgt i32 %24, 0
  br i1 %27, label %28, label %38

28:                                               ; preds = %7
  %29 = sext i32 %24 to i64
  %30 = add nsw i64 %29, -1
  %31 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 17, i64 %30
  tail call void @VP8LInverseTransform(%struct.VP8LTransform* %31, i32 %4, i32 %1, i32* %14, i32* %26) #4
  %32 = icmp sgt i64 %30, 0
  br i1 %32, label %33, label %45

33:                                               ; preds = %28, %33
  %34 = phi i64 [ %35, %33 ], [ %30, %28 ]
  %35 = add nsw i64 %34, -1
  %36 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 17, i64 %35
  tail call void @VP8LInverseTransform(%struct.VP8LTransform* %36, i32 %4, i32 %1, i32* %26, i32* %26) #4
  %37 = icmp sgt i64 %35, 0
  br i1 %37, label %33, label %45, !llvm.loop !50

38:                                               ; preds = %7
  %39 = icmp eq i32* %14, %26
  br i1 %39, label %45, label %40

40:                                               ; preds = %38
  %41 = inttoptr i64 %19 to i8*
  %42 = bitcast i32* %14 to i8*
  %43 = sext i32 %25 to i64
  %44 = shl nsw i64 %43, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %42, i64 %44, i1 false) #4
  br label %45

45:                                               ; preds = %28, %33, %38, %40
  %46 = load i32, i32* %3, align 4
  %47 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %16, i64 0, i32 22
  %48 = load i32, i32* %47, align 4
  %49 = icmp slt i32 %48, %1
  %50 = select i1 %49, i32 %48, i32 %1
  %51 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %16, i64 0, i32 21
  %52 = load i32, i32* %51, align 8
  %53 = icmp sgt i32 %52, %46
  br i1 %53, label %54, label %61

54:                                               ; preds = %45
  %55 = sub nsw i32 %52, %46
  %56 = mul nsw i32 %55, %22
  %57 = inttoptr i64 %19 to i8*
  %58 = sext i32 %56 to i64
  %59 = getelementptr inbounds i8, i8* %57, i64 %58
  %60 = ptrtoint i8* %59 to i64
  br label %61

61:                                               ; preds = %54, %45
  %62 = phi i64 [ %60, %54 ], [ %19, %45 ]
  %63 = phi i32 [ %52, %54 ], [ %46, %45 ]
  %64 = icmp sgt i32 %50, %63
  br i1 %64, label %65, label %265

65:                                               ; preds = %61
  %66 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %16, i64 0, i32 19
  %67 = load i32, i32* %66, align 8
  %68 = sext i32 %67 to i64
  %69 = shl nsw i64 %68, 2
  %70 = inttoptr i64 %62 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 %69
  %72 = sub nsw i32 %63, %52
  %73 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %16, i64 0, i32 2
  store i32 %72, i32* %73, align 8
  %74 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %16, i64 0, i32 20
  %75 = load i32, i32* %74, align 4
  %76 = sub nsw i32 %75, %67
  %77 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %16, i64 0, i32 3
  store i32 %76, i32* %77, align 4
  %78 = sub nsw i32 %50, %63
  %79 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %16, i64 0, i32 4
  store i32 %78, i32* %79, align 8
  %80 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 3
  %81 = load %struct.WebPDecBuffer*, %struct.WebPDecBuffer** %80, align 8
  %82 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %81, i64 0, i32 0
  %83 = load i32, i32* %82, align 8
  %84 = icmp ugt i32 %83, 10
  br i1 %84, label %112, label %85

85:                                               ; preds = %65
  %86 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 14
  %87 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %81, i64 0, i32 4, i32 0, i32 1
  %88 = bitcast i8** %87 to i32*
  %89 = load i32, i32* %88, align 8
  %90 = icmp sgt i32 %78, 0
  br i1 %90, label %91, label %109

91:                                               ; preds = %85
  %92 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %81, i64 0, i32 4, i32 0, i32 0
  %93 = load i8*, i8** %92, align 8
  %94 = load i32, i32* %86, align 4
  %95 = mul nsw i32 %94, %89
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i8, i8* %93, i64 %96
  %98 = sext i32 %22 to i64
  %99 = sext i32 %89 to i64
  br label %100

100:                                              ; preds = %100, %91
  %101 = phi i8* [ %97, %91 ], [ %107, %100 ]
  %102 = phi i32 [ %78, %91 ], [ %104, %100 ]
  %103 = phi i8* [ %71, %91 ], [ %106, %100 ]
  %104 = add nsw i32 %102, -1
  %105 = bitcast i8* %103 to i32*
  tail call void @VP8LConvertFromBGRA(i32* %105, i32 %76, i32 %83, i8* %101) #4
  %106 = getelementptr inbounds i8, i8* %103, i64 %98
  %107 = getelementptr inbounds i8, i8* %101, i64 %99
  %108 = icmp sgt i32 %104, 0
  br i1 %108, label %100, label %109

109:                                              ; preds = %100, %85
  %110 = load i32, i32* %86, align 4
  %111 = add nsw i32 %110, %78
  store i32 %111, i32* %86, align 4
  br label %265

112:                                              ; preds = %65
  %113 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %16, i64 0, i32 23
  %114 = load i32, i32* %113, align 8
  %115 = icmp eq i32 %114, 0
  %116 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 14
  %117 = load i32, i32* %116, align 4
  %118 = icmp sgt i32 %78, 0
  br i1 %115, label %208, label %119

119:                                              ; preds = %112
  br i1 %118, label %120, label %262

120:                                              ; preds = %119
  %121 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 20
  br label %122

122:                                              ; preds = %204, %120
  %123 = phi i8* [ %71, %120 ], [ %137, %204 ]
  %124 = phi i32 [ 0, %120 ], [ %134, %204 ]
  %125 = phi i32 [ %117, %120 ], [ %206, %204 ]
  %126 = sub nsw i32 %78, %124
  %127 = load %struct.WebPRescaler*, %struct.WebPRescaler** %121, align 8
  %128 = tail call i32 @WebPRescaleNeededLines(%struct.WebPRescaler* %127, i32 %126) #4
  %129 = load %struct.WebPRescaler*, %struct.WebPRescaler** %121, align 8
  %130 = getelementptr inbounds %struct.WebPRescaler, %struct.WebPRescaler* %129, i64 0, i32 11
  %131 = load i32, i32* %130, align 4
  tail call void @WebPMultARGBRows(i8* %123, i32 %22, i32 %131, i32 %128, i32 0) #4
  %132 = load %struct.WebPRescaler*, %struct.WebPRescaler** %121, align 8
  %133 = tail call i32 @WebPRescalerImport(%struct.WebPRescaler* %132, i32 %126, i8* %123, i32 %22) #4
  %134 = add nsw i32 %133, %124
  %135 = mul nsw i32 %128, %22
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds i8, i8* %123, i64 %136
  %138 = load %struct.WebPRescaler*, %struct.WebPRescaler** %121, align 8
  %139 = getelementptr inbounds %struct.WebPRescaler, %struct.WebPRescaler* %138, i64 0, i32 17
  %140 = bitcast i8** %139 to i32**
  %141 = load i32*, i32** %140, align 8
  %142 = getelementptr inbounds %struct.WebPRescaler, %struct.WebPRescaler* %138, i64 0, i32 13
  %143 = load i32, i32* %142, align 4
  %144 = getelementptr inbounds %struct.WebPRescaler, %struct.WebPRescaler* %138, i64 0, i32 6
  %145 = getelementptr inbounds %struct.WebPRescaler, %struct.WebPRescaler* %138, i64 0, i32 16
  %146 = load i32, i32* %145, align 8
  %147 = getelementptr inbounds %struct.WebPRescaler, %struct.WebPRescaler* %138, i64 0, i32 14
  %148 = load i32, i32* %147, align 8
  %149 = icmp slt i32 %146, %148
  br i1 %149, label %150, label %204

150:                                              ; preds = %122
  %151 = bitcast i32* %141 to i8*
  %152 = getelementptr inbounds i8, i8* %151, i64 3
  br label %153

153:                                              ; preds = %198, %150
  %154 = phi i32 [ 0, %150 ], [ %200, %198 ]
  %155 = phi i32 [ %125, %150 ], [ %199, %198 ]
  %156 = load i32, i32* %144, align 8
  %157 = icmp sgt i32 %156, 0
  br i1 %157, label %204, label %158

158:                                              ; preds = %153
  tail call void @WebPRescalerExportRow(%struct.WebPRescaler* %138) #4
  %159 = load void (i32*, i32, i32)*, void (i32*, i32, i32)** @WebPMultARGBRow, align 8
  tail call void %159(i32* %141, i32 %143, i32 1) #4
  %160 = load %struct.WebPDecBuffer*, %struct.WebPDecBuffer** %80, align 8
  %161 = load void (i32*, i8*, i32)*, void (i32*, i8*, i32)** @WebPConvertARGBToY, align 8
  %162 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %160, i64 0, i32 4, i32 0, i32 0
  %163 = load i8*, i8** %162, align 8
  %164 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %160, i64 0, i32 4, i32 0, i32 4
  %165 = load i32, i32* %164, align 8
  %166 = mul nsw i32 %165, %155
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i8, i8* %163, i64 %167
  tail call void %161(i32* %141, i8* %168, i32 %143) #4
  %169 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %160, i64 0, i32 4, i32 0, i32 1
  %170 = load i8*, i8** %169, align 8
  %171 = ashr i32 %155, 1
  %172 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %160, i64 0, i32 4, i32 0, i32 5
  %173 = load i32, i32* %172, align 4
  %174 = mul nsw i32 %173, %171
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds i8, i8* %170, i64 %175
  %177 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %160, i64 0, i32 4, i32 0, i32 2
  %178 = load i8*, i8** %177, align 8
  %179 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %160, i64 0, i32 4, i32 0, i32 6
  %180 = load i32, i32* %179, align 8
  %181 = mul nsw i32 %180, %171
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds i8, i8* %178, i64 %182
  %184 = load void (i32*, i8*, i8*, i32, i32)*, void (i32*, i8*, i8*, i32, i32)** @WebPConvertARGBToUV, align 8
  %185 = and i32 %155, 1
  %186 = xor i32 %185, 1
  tail call void %184(i32* %141, i8* %176, i8* %183, i32 %143, i32 %186) #4
  %187 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %160, i64 0, i32 4, i32 0, i32 3
  %188 = load i8*, i8** %187, align 8
  %189 = icmp eq i8* %188, null
  br i1 %189, label %198, label %190

190:                                              ; preds = %158
  %191 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %160, i64 0, i32 4, i32 0, i32 7
  %192 = load i32, i32* %191, align 4
  %193 = mul nsw i32 %192, %155
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds i8, i8* %188, i64 %194
  %196 = load i32 (i8*, i32, i32, i32, i8*, i32)*, i32 (i8*, i32, i32, i32, i8*, i32)** @WebPExtractAlpha, align 8
  %197 = tail call i32 %196(i8* %152, i32 0, i32 %143, i32 1, i8* %195, i32 0) #4
  br label %198

198:                                              ; preds = %190, %158
  %199 = add nsw i32 %155, 1
  %200 = add nuw nsw i32 %154, 1
  %201 = load i32, i32* %145, align 8
  %202 = load i32, i32* %147, align 8
  %203 = icmp slt i32 %201, %202
  br i1 %203, label %153, label %204

204:                                              ; preds = %198, %153, %122
  %205 = phi i32 [ 0, %122 ], [ %200, %198 ], [ %154, %153 ]
  %206 = add nsw i32 %205, %125
  %207 = icmp slt i32 %134, %78
  br i1 %207, label %122, label %262

208:                                              ; preds = %112
  br i1 %118, label %209, label %262

209:                                              ; preds = %208
  %210 = sext i32 %22 to i64
  br label %211

211:                                              ; preds = %259, %209
  %212 = phi %struct.WebPDecBuffer* [ %81, %209 ], [ %261, %259 ]
  %213 = phi i32 [ %117, %209 ], [ %257, %259 ]
  %214 = phi i32 [ %78, %209 ], [ %216, %259 ]
  %215 = phi i8* [ %71, %209 ], [ %260, %259 ]
  %216 = add nsw i32 %214, -1
  %217 = bitcast i8* %215 to i32*
  %218 = load void (i32*, i8*, i32)*, void (i32*, i8*, i32)** @WebPConvertARGBToY, align 8
  %219 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %212, i64 0, i32 4, i32 0, i32 0
  %220 = load i8*, i8** %219, align 8
  %221 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %212, i64 0, i32 4, i32 0, i32 4
  %222 = load i32, i32* %221, align 8
  %223 = mul nsw i32 %222, %213
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds i8, i8* %220, i64 %224
  tail call void %218(i32* %217, i8* %225, i32 %76) #4
  %226 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %212, i64 0, i32 4, i32 0, i32 1
  %227 = load i8*, i8** %226, align 8
  %228 = ashr i32 %213, 1
  %229 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %212, i64 0, i32 4, i32 0, i32 5
  %230 = load i32, i32* %229, align 4
  %231 = mul nsw i32 %230, %228
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds i8, i8* %227, i64 %232
  %234 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %212, i64 0, i32 4, i32 0, i32 2
  %235 = load i8*, i8** %234, align 8
  %236 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %212, i64 0, i32 4, i32 0, i32 6
  %237 = load i32, i32* %236, align 8
  %238 = mul nsw i32 %237, %228
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds i8, i8* %235, i64 %239
  %241 = load void (i32*, i8*, i8*, i32, i32)*, void (i32*, i8*, i8*, i32, i32)** @WebPConvertARGBToUV, align 8
  %242 = and i32 %213, 1
  %243 = xor i32 %242, 1
  tail call void %241(i32* %217, i8* %233, i8* %240, i32 %76, i32 %243) #4
  %244 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %212, i64 0, i32 4, i32 0, i32 3
  %245 = load i8*, i8** %244, align 8
  %246 = icmp eq i8* %245, null
  br i1 %246, label %256, label %247

247:                                              ; preds = %211
  %248 = getelementptr inbounds %struct.WebPDecBuffer, %struct.WebPDecBuffer* %212, i64 0, i32 4, i32 0, i32 7
  %249 = load i32, i32* %248, align 4
  %250 = mul nsw i32 %249, %213
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds i8, i8* %245, i64 %251
  %253 = load i32 (i8*, i32, i32, i32, i8*, i32)*, i32 (i8*, i32, i32, i32, i8*, i32)** @WebPExtractAlpha, align 8
  %254 = getelementptr inbounds i8, i8* %215, i64 3
  %255 = tail call i32 %253(i8* %254, i32 0, i32 %76, i32 1, i8* %252, i32 0) #4
  br label %256

256:                                              ; preds = %247, %211
  %257 = add nsw i32 %213, 1
  %258 = icmp sgt i32 %216, 0
  br i1 %258, label %259, label %262

259:                                              ; preds = %256
  %260 = getelementptr inbounds i8, i8* %215, i64 %210
  %261 = load %struct.WebPDecBuffer*, %struct.WebPDecBuffer** %80, align 8
  br label %211

262:                                              ; preds = %204, %256, %208, %119
  %263 = phi i32 [ %117, %119 ], [ %117, %208 ], [ %257, %256 ], [ %206, %204 ]
  %264 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 14
  store i32 %263, i32* %264, align 4
  br label %265

265:                                              ; preds = %61, %262, %109, %2
  store i32 %1, i32* %3, align 4
  ret void
}

declare i32 @VP8LReadBits(%struct.VP8LBitReader*, i32) local_unnamed_addr #3

declare void @VP8LHtreeGroupsFree(%struct.HTreeGroup*) local_unnamed_addr #3

declare void @VP8LColorCacheClear(%struct.VP8LColorCache*) local_unnamed_addr #3

declare i8* @WebPSafeMalloc(i64, i64) local_unnamed_addr #3

declare %struct.HTreeGroup* @VP8LHtreeGroupsNew(i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @ReadHuffmanCode(i32, %struct.VP8LDecoder*, i32*, %struct.HuffmanCode*) unnamed_addr #1 {
  %5 = alloca [128 x %struct.HuffmanCode], align 16
  %6 = alloca [19 x i32], align 16
  %7 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %1, i64 0, i32 6
  %8 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %7, i32 1) #4
  %9 = bitcast i32* %2 to i8*
  %10 = sext i32 %0 to i64
  %11 = shl nsw i64 %10, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %9, i8 0, i64 %11, i1 false)
  %12 = icmp eq i32 %8, 0
  br i1 %12, label %26, label %13

13:                                               ; preds = %4
  %14 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %7, i32 1) #4
  %15 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %7, i32 1) #4
  %16 = icmp eq i32 %15, 0
  %17 = select i1 %16, i32 1, i32 8
  %18 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %7, i32 %17) #4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i32, i32* %2, i64 %19
  store i32 1, i32* %20, align 4
  %21 = icmp eq i32 %14, 1
  br i1 %21, label %22, label %205

22:                                               ; preds = %13
  %23 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %7, i32 8) #4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i32, i32* %2, i64 %24
  store i32 1, i32* %25, align 4
  br label %205

26:                                               ; preds = %4
  %27 = bitcast [19 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 76, i8* nonnull %27) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 0, i64 76, i1 false)
  %28 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %7, i32 4) #4
  %29 = add i32 %28, 4
  %30 = icmp sgt i32 %29, 19
  br i1 %30, label %200, label %31

31:                                               ; preds = %26
  %32 = icmp sgt i32 %29, 0
  br i1 %32, label %33, label %44

33:                                               ; preds = %31
  %34 = zext i32 %29 to i64
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %42, %35 ]
  %37 = tail call i32 @VP8LReadBits(%struct.VP8LBitReader* %7, i32 3) #4
  %38 = getelementptr inbounds [19 x i8], [19 x i8]* @kCodeLengthCodeOrder, i64 0, i64 %36
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i64
  %41 = getelementptr inbounds [19 x i32], [19 x i32]* %6, i64 0, i64 %40
  store i32 %37, i32* %41, align 4
  %42 = add nuw nsw i64 %36, 1
  %43 = icmp eq i64 %42, %34
  br i1 %43, label %44, label %35

44:                                               ; preds = %35, %31
  %45 = getelementptr inbounds [19 x i32], [19 x i32]* %6, i64 0, i64 0
  %46 = getelementptr inbounds [128 x %struct.HuffmanCode], [128 x %struct.HuffmanCode]* %5, i64 0, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %46) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %46, i8 -86, i64 512, i1 false) #4
  %47 = getelementptr inbounds [128 x %struct.HuffmanCode], [128 x %struct.HuffmanCode]* %5, i64 0, i64 0
  %48 = call i32 @VP8LBuildHuffmanTable(%struct.HuffmanCode* nonnull %47, i32 7, i32* nonnull %45, i32 19) #4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %203, label %50

50:                                               ; preds = %44
  %51 = call i32 @VP8LReadBits(%struct.VP8LBitReader* %7, i32 1) #4
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %60, label %53

53:                                               ; preds = %50
  %54 = call i32 @VP8LReadBits(%struct.VP8LBitReader* %7, i32 3) #4
  %55 = shl i32 %54, 1
  %56 = add i32 %55, 2
  %57 = call i32 @VP8LReadBits(%struct.VP8LBitReader* %7, i32 %56) #4
  %58 = add i32 %57, 2
  %59 = icmp sgt i32 %58, %0
  br i1 %59, label %203, label %60

60:                                               ; preds = %53, %50
  %61 = phi i32 [ %58, %53 ], [ %0, %50 ]
  %62 = icmp sgt i32 %0, 0
  br i1 %62, label %63, label %202

63:                                               ; preds = %60
  %64 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %1, i64 0, i32 6, i32 4
  %65 = getelementptr inbounds %struct.VP8LBitReader, %struct.VP8LBitReader* %7, i64 0, i32 0
  br label %66

66:                                               ; preds = %196, %63
  %67 = phi i32 [ 0, %63 ], [ %198, %196 ]
  %68 = phi i32 [ 8, %63 ], [ %197, %196 ]
  %69 = phi i32 [ %61, %63 ], [ %70, %196 ]
  %70 = add nsw i32 %69, -1
  %71 = icmp eq i32 %69, 0
  br i1 %71, label %202, label %72

72:                                               ; preds = %66
  %73 = load i32, i32* %64, align 8
  %74 = icmp sgt i32 %73, 31
  br i1 %74, label %75, label %77

75:                                               ; preds = %72
  call void @VP8LDoFillBitWindow(%struct.VP8LBitReader* %7) #4
  %76 = load i32, i32* %64, align 8
  br label %77

77:                                               ; preds = %75, %72
  %78 = phi i32 [ %73, %72 ], [ %76, %75 ]
  %79 = load i64, i64* %65, align 8
  %80 = and i32 %78, 63
  %81 = zext i32 %80 to i64
  %82 = lshr i64 %79, %81
  %83 = and i64 %82, 127
  %84 = getelementptr inbounds [128 x %struct.HuffmanCode], [128 x %struct.HuffmanCode]* %5, i64 0, i64 %83, i32 0
  %85 = load i8, i8* %84, align 4
  %86 = zext i8 %85 to i32
  %87 = add nsw i32 %78, %86
  store i32 %87, i32* %64, align 8
  %88 = getelementptr inbounds [128 x %struct.HuffmanCode], [128 x %struct.HuffmanCode]* %5, i64 0, i64 %83, i32 1
  %89 = load i16, i16* %88, align 2
  %90 = zext i16 %89 to i32
  %91 = icmp ult i16 %89, 16
  br i1 %91, label %92, label %98

92:                                               ; preds = %77
  %93 = add nsw i32 %67, 1
  %94 = sext i32 %67 to i64
  %95 = getelementptr inbounds i32, i32* %2, i64 %94
  store i32 %90, i32* %95, align 4
  %96 = icmp eq i16 %89, 0
  %97 = select i1 %96, i32 %68, i32 %90
  br label %196

98:                                               ; preds = %77
  %99 = add nsw i32 %90, -16
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [3 x i8], [3 x i8]* @kCodeLengthExtraBits, i64 0, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = getelementptr inbounds [3 x i8], [3 x i8]* @kCodeLengthRepeatOffsets, i64 0, i64 %100
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = call i32 @VP8LReadBits(%struct.VP8LBitReader* %7, i32 %103) #4
  %108 = add i32 %107, %106
  %109 = add nsw i32 %108, %67
  %110 = icmp sgt i32 %109, %0
  br i1 %110, label %203, label %111

111:                                              ; preds = %98
  %112 = icmp eq i16 %89, 16
  %113 = select i1 %112, i32 %68, i32 0
  %114 = icmp sgt i32 %108, 0
  br i1 %114, label %115, label %196

115:                                              ; preds = %111
  %116 = sext i32 %67 to i64
  %117 = add i32 %107, -1
  %118 = add i32 %117, %106
  %119 = zext i32 %118 to i64
  %120 = add nuw nsw i64 %119, 1
  %121 = icmp ult i64 %120, 8
  br i1 %121, label %183, label %122

122:                                              ; preds = %115
  %123 = and i64 %120, 8589934584
  %124 = add nsw i64 %123, %116
  %125 = trunc i64 %123 to i32
  %126 = sub i32 %108, %125
  %127 = insertelement <4 x i32> undef, i32 %113, i32 0
  %128 = shufflevector <4 x i32> %127, <4 x i32> undef, <4 x i32> zeroinitializer
  %129 = insertelement <4 x i32> undef, i32 %113, i32 0
  %130 = shufflevector <4 x i32> %129, <4 x i32> undef, <4 x i32> zeroinitializer
  %131 = add nsw i64 %123, -8
  %132 = lshr exact i64 %131, 3
  %133 = add nuw nsw i64 %132, 1
  %134 = and i64 %133, 3
  %135 = icmp ult i64 %131, 24
  br i1 %135, label %167, label %136

136:                                              ; preds = %122
  %137 = sub nsw i64 %133, %134
  br label %138

138:                                              ; preds = %138, %136
  %139 = phi i64 [ 0, %136 ], [ %164, %138 ]
  %140 = phi i64 [ %137, %136 ], [ %165, %138 ]
  %141 = add i64 %139, %116
  %142 = getelementptr inbounds i32, i32* %2, i64 %141
  %143 = bitcast i32* %142 to <4 x i32>*
  store <4 x i32> %128, <4 x i32>* %143, align 4
  %144 = getelementptr inbounds i32, i32* %142, i64 4
  %145 = bitcast i32* %144 to <4 x i32>*
  store <4 x i32> %130, <4 x i32>* %145, align 4
  %146 = or i64 %139, 8
  %147 = add i64 %146, %116
  %148 = getelementptr inbounds i32, i32* %2, i64 %147
  %149 = bitcast i32* %148 to <4 x i32>*
  store <4 x i32> %128, <4 x i32>* %149, align 4
  %150 = getelementptr inbounds i32, i32* %148, i64 4
  %151 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> %130, <4 x i32>* %151, align 4
  %152 = or i64 %139, 16
  %153 = add i64 %152, %116
  %154 = getelementptr inbounds i32, i32* %2, i64 %153
  %155 = bitcast i32* %154 to <4 x i32>*
  store <4 x i32> %128, <4 x i32>* %155, align 4
  %156 = getelementptr inbounds i32, i32* %154, i64 4
  %157 = bitcast i32* %156 to <4 x i32>*
  store <4 x i32> %130, <4 x i32>* %157, align 4
  %158 = or i64 %139, 24
  %159 = add i64 %158, %116
  %160 = getelementptr inbounds i32, i32* %2, i64 %159
  %161 = bitcast i32* %160 to <4 x i32>*
  store <4 x i32> %128, <4 x i32>* %161, align 4
  %162 = getelementptr inbounds i32, i32* %160, i64 4
  %163 = bitcast i32* %162 to <4 x i32>*
  store <4 x i32> %130, <4 x i32>* %163, align 4
  %164 = add i64 %139, 32
  %165 = add i64 %140, -4
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %167, label %138, !llvm.loop !51

167:                                              ; preds = %138, %122
  %168 = phi i64 [ 0, %122 ], [ %164, %138 ]
  %169 = icmp eq i64 %134, 0
  br i1 %169, label %181, label %170

170:                                              ; preds = %167, %170
  %171 = phi i64 [ %178, %170 ], [ %168, %167 ]
  %172 = phi i64 [ %179, %170 ], [ %134, %167 ]
  %173 = add i64 %171, %116
  %174 = getelementptr inbounds i32, i32* %2, i64 %173
  %175 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %128, <4 x i32>* %175, align 4
  %176 = getelementptr inbounds i32, i32* %174, i64 4
  %177 = bitcast i32* %176 to <4 x i32>*
  store <4 x i32> %130, <4 x i32>* %177, align 4
  %178 = add i64 %171, 8
  %179 = add i64 %172, -1
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %181, label %170, !llvm.loop !52

181:                                              ; preds = %170, %167
  %182 = icmp eq i64 %120, %123
  br i1 %182, label %193, label %183

183:                                              ; preds = %181, %115
  %184 = phi i64 [ %116, %115 ], [ %124, %181 ]
  %185 = phi i32 [ %108, %115 ], [ %126, %181 ]
  br label %186

186:                                              ; preds = %183, %186
  %187 = phi i64 [ %190, %186 ], [ %184, %183 ]
  %188 = phi i32 [ %189, %186 ], [ %185, %183 ]
  %189 = add nsw i32 %188, -1
  %190 = add nsw i64 %187, 1
  %191 = getelementptr inbounds i32, i32* %2, i64 %187
  store i32 %113, i32* %191, align 4
  %192 = icmp sgt i32 %189, 0
  br i1 %192, label %186, label %193, !llvm.loop !53

193:                                              ; preds = %186, %181
  %194 = phi i64 [ %124, %181 ], [ %190, %186 ]
  %195 = trunc i64 %194 to i32
  br label %196

196:                                              ; preds = %193, %111, %92
  %197 = phi i32 [ %97, %92 ], [ %68, %111 ], [ %68, %193 ]
  %198 = phi i32 [ %93, %92 ], [ %67, %111 ], [ %195, %193 ]
  %199 = icmp slt i32 %198, %0
  br i1 %199, label %66, label %202

200:                                              ; preds = %26
  %201 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %1, i64 0, i32 0
  store i32 3, i32* %201, align 8
  call void @llvm.lifetime.end.p0i8(i64 76, i8* nonnull %27) #4
  br label %214

202:                                              ; preds = %66, %196, %60
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %46) #4
  call void @llvm.lifetime.end.p0i8(i64 76, i8* nonnull %27) #4
  br label %205

203:                                              ; preds = %98, %53, %44
  %204 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %1, i64 0, i32 0
  store i32 3, i32* %204, align 8
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %46) #4
  call void @llvm.lifetime.end.p0i8(i64 76, i8* nonnull %27) #4
  br label %212

205:                                              ; preds = %13, %22, %202
  %206 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %1, i64 0, i32 6, i32 5
  %207 = load i32, i32* %206, align 4
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %209, label %212

209:                                              ; preds = %205
  %210 = call i32 @VP8LBuildHuffmanTable(%struct.HuffmanCode* %3, i32 8, i32* %2, i32 %0) #4
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %212, label %214

212:                                              ; preds = %203, %205, %209
  %213 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %1, i64 0, i32 0
  store i32 3, i32* %213, align 8
  br label %214

214:                                              ; preds = %200, %209, %212
  %215 = phi i32 [ 0, %212 ], [ 0, %200 ], [ %210, %209 ]
  ret i32 %215
}

declare i32 @VP8LBuildHuffmanTable(%struct.HuffmanCode*, i32, i32*, i32) local_unnamed_addr #3

declare void @VP8LDoFillBitWindow(%struct.VP8LBitReader*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @ExtractPalettedAlphaRows(%struct.VP8LDecoder*, i32) unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 2
  %4 = load %struct.VP8Io*, %struct.VP8Io** %3, align 8
  %5 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %4, i64 0, i32 10
  %6 = bitcast i8** %5 to %struct.ALPHDecoder**
  %7 = load %struct.ALPHDecoder*, %struct.ALPHDecoder** %6, align 8
  %8 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %7, i64 0, i32 3
  %9 = load i32, i32* %8, align 4
  %10 = icmp ult i32 %9, 2
  %11 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %4, i64 0, i32 21
  %12 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 12
  %13 = select i1 %10, i32* %11, i32* %12
  %14 = load i32, i32* %13, align 4
  %15 = load i32, i32* %12, align 4
  %16 = icmp slt i32 %15, %14
  %17 = select i1 %16, i32 %14, i32 %15
  %18 = icmp slt i32 %17, %1
  br i1 %18, label %19, label %59

19:                                               ; preds = %2
  %20 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %4, i64 0, i32 0
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %7, i64 0, i32 8
  %23 = load i8*, i8** %22, align 8
  %24 = mul nsw i32 %21, %17
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %23, i64 %25
  %27 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 4
  %28 = bitcast i32** %27 to i8**
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 10
  %31 = load i32, i32* %30, align 4
  %32 = mul nsw i32 %31, %17
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %29, i64 %33
  %35 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 17, i64 0
  tail call void @VP8LColorIndexInverseTransformAlpha(%struct.VP8LTransform* %35, i32 %17, i32 %1, i8* %34, i8* %26) #4
  %36 = load i32, i32* %8, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %59, label %38

38:                                               ; preds = %19
  %39 = getelementptr inbounds %struct.ALPHDecoder, %struct.ALPHDecoder* %7, i64 0, i32 9
  %40 = load i8*, i8** %39, align 8
  %41 = sext i32 %21 to i64
  %42 = zext i32 %36 to i64
  %43 = getelementptr inbounds [4 x void (i8*, i8*, i8*, i32)*], [4 x void (i8*, i8*, i8*, i32)*]* @WebPUnfilters, i64 0, i64 %42
  %44 = load void (i8*, i8*, i8*, i32)*, void (i8*, i8*, i8*, i32)** %43, align 8
  tail call void %44(i8* %40, i8* %26, i8* %26, i32 %21) #4
  %45 = add nsw i32 %17, 1
  %46 = icmp eq i32 %45, %1
  br i1 %46, label %57, label %47

47:                                               ; preds = %38, %47
  %48 = phi i32 [ %55, %47 ], [ %45, %38 ]
  %49 = phi i8* [ %50, %47 ], [ %26, %38 ]
  %50 = getelementptr inbounds i8, i8* %49, i64 %41
  %51 = load i32, i32* %8, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [4 x void (i8*, i8*, i8*, i32)*], [4 x void (i8*, i8*, i8*, i32)*]* @WebPUnfilters, i64 0, i64 %52
  %54 = load void (i8*, i8*, i8*, i32)*, void (i8*, i8*, i8*, i32)** %53, align 8
  tail call void %54(i8* %49, i8* %50, i8* %50, i32 %21) #4
  %55 = add i32 %48, 1
  %56 = icmp eq i32 %55, %1
  br i1 %56, label %57, label %47

57:                                               ; preds = %47, %38
  %58 = phi i8* [ %26, %38 ], [ %50, %47 ]
  store i8* %58, i8** %39, align 8
  br label %59

59:                                               ; preds = %57, %19, %2
  %60 = getelementptr inbounds %struct.VP8LDecoder, %struct.VP8LDecoder* %0, i64 0, i32 14
  store i32 %1, i32* %60, align 4
  store i32 %1, i32* %12, align 4
  ret void
}

declare void @VP8LColorIndexInverseTransformAlpha(%struct.VP8LTransform*, i32, i32, i8*, i8*) local_unnamed_addr #3

declare void @VP8LColorCacheCopy(%struct.VP8LColorCache*, %struct.VP8LColorCache*) local_unnamed_addr #3

declare void @VP8LInverseTransform(%struct.VP8LTransform*, i32, i32, i32*, i32*) local_unnamed_addr #3

declare void @VP8LConvertFromBGRA(i32*, i32, i32, i8*) local_unnamed_addr #3

declare i32 @WebPRescaleNeededLines(%struct.WebPRescaler*, i32) local_unnamed_addr #3

declare void @WebPMultARGBRows(i8*, i32, i32, i32, i32) local_unnamed_addr #3

declare i32 @WebPRescalerImport(%struct.WebPRescaler*, i32, i8*, i32) local_unnamed_addr #3

declare void @WebPRescalerExportRow(%struct.WebPRescaler*) local_unnamed_addr #3

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = distinct !{!12, !8}
!13 = distinct !{!13, !14, !8}
!14 = !{!"llvm.loop.unroll.runtime.disable"}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !10}
!17 = distinct !{!17, !14, !8}
!18 = !{!19}
!19 = distinct !{!19, !20}
!20 = distinct !{!20, !"LVerDomain"}
!21 = !{!22}
!22 = distinct !{!22, !20}
!23 = distinct !{!23, !8}
!24 = distinct !{!24, !10}
!25 = distinct !{!25, !10}
!26 = distinct !{!26, !8}
!27 = distinct !{!27, !10}
!28 = !{!29}
!29 = distinct !{!29, !30}
!30 = distinct !{!30, !"LVerDomain"}
!31 = !{!32}
!32 = distinct !{!32, !30}
!33 = distinct !{!33, !8}
!34 = distinct !{!34, !10}
!35 = distinct !{!35, !8}
!36 = !{void (%struct.VP8LDecoder*, i32)* @ExtractAlphaRows, void (%struct.VP8LDecoder*, i32)* @ProcessRows}
!37 = distinct !{!37, !8}
!38 = distinct !{!38, !10}
!39 = distinct !{!39, !14, !8}
!40 = distinct !{!40, !10}
!41 = !{!42}
!42 = distinct !{!42, !43}
!43 = distinct !{!43, !"LVerDomain"}
!44 = !{!45}
!45 = distinct !{!45, !43}
!46 = distinct !{!46, !8}
!47 = distinct !{!47, !10}
!48 = distinct !{!48, !8}
!49 = distinct !{!49, !10}
!50 = distinct !{!50, !10}
!51 = distinct !{!51, !8}
!52 = distinct !{!52, !10}
!53 = distinct !{!53, !14, !8}
