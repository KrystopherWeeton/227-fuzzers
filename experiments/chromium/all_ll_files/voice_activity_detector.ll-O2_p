; ModuleID = '../../third_party/webrtc/modules/audio_processing/vad/voice_activity_detector.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/vad/voice_activity_detector.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.webrtc::VoiceActivityDetector" = type { %"class.std::__1::vector", %"class.std::__1::vector", float, %"class.webrtc::Resampler", %"class.webrtc::VadAudioProc", %"class.std::__1::unique_ptr.16", %"class.webrtc::PitchBasedVad", [160 x i16], %struct.AudioFeatures }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { double*, double*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { double* }
%"class.webrtc::Resampler" = type { i8*, i8*, i8*, i16*, i16*, i64, i64, i64, i64, i32, i32, i32, i64, %"class.webrtc::Resampler"*, %"class.webrtc::Resampler"* }
%"class.webrtc::VadAudioProc" = type { [256 x i64], [256 x float], [560 x float], i64, double, double, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.4", %"class.std::__1::unique_ptr.10" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.webrtc::VadAudioProc::PitchAnalysisStruct"* }
%"struct.webrtc::VadAudioProc::PitchAnalysisStruct" = type opaque
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.webrtc::VadAudioProc::PreFiltBankstr"* }
%"struct.webrtc::VadAudioProc::PreFiltBankstr" = type opaque
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.webrtc::PoleZeroFilter"* }
%"class.webrtc::PoleZeroFilter" = type opaque
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.webrtc::StandaloneVad"* }
%"class.webrtc::StandaloneVad" = type <{ %struct.WebRtcVadInst*, [480 x i16], i64, i32, [4 x i8] }>
%struct.WebRtcVadInst = type opaque
%"class.webrtc::PitchBasedVad" = type { %"struct.webrtc::GmmParameters", %"struct.webrtc::GmmParameters", double, %"class.std::__1::unique_ptr.22" }
%"struct.webrtc::GmmParameters" = type { double*, double*, double*, i32, i32 }
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.webrtc::VadCircularBuffer"* }
%"class.webrtc::VadCircularBuffer" = type opaque
%struct.AudioFeatures = type { [4 x double], [4 x double], [4 x double], [4 x double], i64, i8 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEm = comdat any

$_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t = comdat any

@.str = private unnamed_addr constant [81 x i8] c"../../third_party/webrtc/modules/audio_processing/vad/voice_activity_detector.cc\00", align 1
@.str.1 = private unnamed_addr constant [75 x i8] c"resampler_.ResetIfNeeded(sample_rate_hz, kSampleRateHz, kNumChannels) == 0\00", align 1
@.str.2 = private unnamed_addr constant [54 x i8] c"standalone_vad_->AddAudio(resampled_ptr, length) == 0\00", align 1
@.str.3 = private unnamed_addr constant [109 x i8] c"standalone_vad_->GetActivity(&chunkwise_voice_probabilities_[0], chunkwise_voice_probabilities_.size()) >= 0\00", align 1
@.str.4 = private unnamed_addr constant [89 x i8] c"pitch_based_vad_.VoicingProbability( features_, &chunkwise_voice_probabilities_[0]) >= 0\00", align 1
@_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t = linkonce_odr hidden constant [4 x i8] c"\0D\01\01\00", comdat, align 1

@_ZN6webrtc21VoiceActivityDetectorC1Ev = hidden unnamed_addr alias void (%"class.webrtc::VoiceActivityDetector"*), void (%"class.webrtc::VoiceActivityDetector"*)* @_ZN6webrtc21VoiceActivityDetectorC2Ev
@_ZN6webrtc21VoiceActivityDetectorD1Ev = hidden unnamed_addr alias void (%"class.webrtc::VoiceActivityDetector"*), void (%"class.webrtc::VoiceActivityDetector"*)* @_ZN6webrtc21VoiceActivityDetectorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc21VoiceActivityDetectorC2Ev(%"class.webrtc::VoiceActivityDetector"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 2
  %3 = bitcast %"class.webrtc::VoiceActivityDetector"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 48, i1 false)
  store float 1.000000e+00, float* %2, align 8
  %4 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 3
  tail call void @_ZN6webrtc9ResamplerC1Ev(%"class.webrtc::Resampler"* %4) #8
  %5 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 4
  tail call void @_ZN6webrtc12VadAudioProcC1Ev(%"class.webrtc::VadAudioProc"* %5) #8
  %6 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 5
  %7 = tail call %"class.webrtc::StandaloneVad"* @_ZN6webrtc13StandaloneVad6CreateEv() #8
  %8 = ptrtoint %"class.webrtc::StandaloneVad"* %7 to i64
  %9 = bitcast %"class.std::__1::unique_ptr.16"* %6 to i64*
  store i64 %8, i64* %9, align 8
  %10 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 6
  tail call void @_ZN6webrtc13PitchBasedVadC1Ev(%"class.webrtc::PitchBasedVad"* %10) #8
  ret void
}

declare void @_ZN6webrtc9ResamplerC1Ev(%"class.webrtc::Resampler"*) unnamed_addr #1

declare void @_ZN6webrtc12VadAudioProcC1Ev(%"class.webrtc::VadAudioProc"*) unnamed_addr #1

declare %"class.webrtc::StandaloneVad"* @_ZN6webrtc13StandaloneVad6CreateEv() local_unnamed_addr #1

declare void @_ZN6webrtc13PitchBasedVadC1Ev(%"class.webrtc::PitchBasedVad"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc21VoiceActivityDetectorD2Ev(%"class.webrtc::VoiceActivityDetector"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 6
  tail call void @_ZN6webrtc13PitchBasedVadD1Ev(%"class.webrtc::PitchBasedVad"* %2) #8
  %3 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %4 = load %"class.webrtc::StandaloneVad"*, %"class.webrtc::StandaloneVad"** %3, align 8
  store %"class.webrtc::StandaloneVad"* null, %"class.webrtc::StandaloneVad"** %3, align 8
  %5 = icmp eq %"class.webrtc::StandaloneVad"* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  tail call void @_ZN6webrtc13StandaloneVadD1Ev(%"class.webrtc::StandaloneVad"* nonnull %4) #8
  %7 = bitcast %"class.webrtc::StandaloneVad"* %4 to i8*
  tail call void @_ZdlPv(i8* %7) #9
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 4
  tail call void @_ZN6webrtc12VadAudioProcD1Ev(%"class.webrtc::VadAudioProc"* %9) #8
  %10 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 3
  tail call void @_ZN6webrtc9ResamplerD1Ev(%"class.webrtc::Resampler"* %10) #8
  %11 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = load double*, double** %11, align 8
  %13 = icmp eq double* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %8
  %15 = ptrtoint double* %12 to i64
  %16 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 1, i32 0, i32 1
  %17 = bitcast double** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = bitcast double* %12 to i8*
  tail call void @_ZdlPv(i8* %18) #9
  br label %19

19:                                               ; preds = %8, %14
  %20 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 0, i32 0, i32 0
  %21 = load double*, double** %20, align 8
  %22 = icmp eq double* %21, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %19
  %24 = ptrtoint double* %21 to i64
  %25 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 0, i32 0, i32 1
  %26 = bitcast double** %25 to i64*
  store i64 %24, i64* %26, align 8
  %27 = bitcast double* %21 to i8*
  tail call void @_ZdlPv(i8* %27) #9
  br label %28

28:                                               ; preds = %19, %23
  ret void
}

; Function Attrs: nounwind
declare void @_ZN6webrtc13PitchBasedVadD1Ev(%"class.webrtc::PitchBasedVad"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6webrtc12VadAudioProcD1Ev(%"class.webrtc::VadAudioProc"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6webrtc9ResamplerD1Ev(%"class.webrtc::Resampler"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc21VoiceActivityDetector12ProcessChunkEPKsmi(%"class.webrtc::VoiceActivityDetector"*, i16*, i64, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca i64, align 8
  store i64 %2, i64* %5, align 8
  %6 = icmp eq i32 %3, 16000
  br i1 %6, label %17, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 3
  %9 = tail call i32 @_ZN6webrtc9Resampler13ResetIfNeededEiim(%"class.webrtc::Resampler"* %8, i32 %3, i32 16000, i64 1) #8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = tail call i32 @_ZN6webrtc9Resampler13ResetIfNeededEiim(%"class.webrtc::Resampler"* %8, i32 %3, i32 16000, i64 1) #8
  tail call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str, i64 0, i64 0), i32 46, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t, i64 0, i64 0), i32 %12, i32 0) #10
  unreachable

13:                                               ; preds = %7
  %14 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 7, i64 0
  %15 = call i32 @_ZN6webrtc9Resampler4PushEPKsmPsmRm(%"class.webrtc::Resampler"* %8, i16* %1, i64 %2, i16* %14, i64 160, i64* nonnull dereferenceable(8) %5) #8
  %16 = load i64, i64* %5, align 8
  br label %17

17:                                               ; preds = %4, %13
  %18 = phi i64 [ %16, %13 ], [ %2, %4 ]
  %19 = phi i16* [ %14, %13 ], [ %1, %4 ]
  %20 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %21 = load %"class.webrtc::StandaloneVad"*, %"class.webrtc::StandaloneVad"** %20, align 8
  %22 = call i32 @_ZN6webrtc13StandaloneVad8AddAudioEPKsm(%"class.webrtc::StandaloneVad"* %21, i16* %19, i64 %18) #8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %28, label %24

24:                                               ; preds = %17
  %25 = load %"class.webrtc::StandaloneVad"*, %"class.webrtc::StandaloneVad"** %20, align 8
  %26 = load i64, i64* %5, align 8
  %27 = call i32 @_ZN6webrtc13StandaloneVad8AddAudioEPKsm(%"class.webrtc::StandaloneVad"* %25, i16* %19, i64 %26) #8
  call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str, i64 0, i64 0), i32 55, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t, i64 0, i64 0), i32 %27, i32 0) #10
  unreachable

28:                                               ; preds = %17
  %29 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 4
  %30 = load i64, i64* %5, align 8
  %31 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 8
  %32 = call i32 @_ZN6webrtc12VadAudioProc15ExtractFeaturesEPKsmP13AudioFeatures(%"class.webrtc::VadAudioProc"* %29, i16* %19, i64 %30, %struct.AudioFeatures* %31) #8
  %33 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 8, i32 4
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 0, i32 0, i32 1
  %36 = bitcast double** %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = bitcast %"class.webrtc::VoiceActivityDetector"* %0 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = sub i64 %37, %39
  %41 = ashr exact i64 %40, 3
  %42 = icmp ugt i64 %34, %41
  %43 = inttoptr i64 %39 to double*
  br i1 %42, label %44, label %48

44:                                               ; preds = %28
  %45 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 0
  %46 = sub i64 %34, %41
  call void @_ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEm(%"class.std::__1::vector"* %45, i64 %46) #8
  %47 = load i64, i64* %33, align 8
  br label %52

48:                                               ; preds = %28
  %49 = icmp ult i64 %34, %41
  br i1 %49, label %50, label %52

50:                                               ; preds = %48
  %51 = getelementptr inbounds double, double* %43, i64 %34
  store double* %51, double** %35, align 8
  br label %52

52:                                               ; preds = %44, %48, %50
  %53 = phi i64 [ %47, %44 ], [ %34, %48 ], [ %34, %50 ]
  %54 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 1
  %55 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 1, i32 0, i32 1
  %56 = bitcast double** %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = bitcast %"class.std::__1::vector"* %54 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = sub i64 %57, %59
  %61 = ashr exact i64 %60, 3
  %62 = icmp ugt i64 %53, %61
  %63 = inttoptr i64 %59 to double*
  %64 = inttoptr i64 %59 to i8*
  br i1 %62, label %65, label %70

65:                                               ; preds = %52
  %66 = sub i64 %53, %61
  call void @_ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEm(%"class.std::__1::vector"* %54, i64 %66) #8
  %67 = load i64, i64* %56, align 8
  %68 = load i64, i64* %58, align 8
  %69 = inttoptr i64 %68 to i8*
  br label %75

70:                                               ; preds = %52
  %71 = icmp ult i64 %53, %61
  br i1 %71, label %72, label %75

72:                                               ; preds = %70
  %73 = getelementptr inbounds double, double* %63, i64 %53
  store double* %73, double** %55, align 8
  %74 = ptrtoint double* %73 to i64
  br label %75

75:                                               ; preds = %65, %70, %72
  %76 = phi i8* [ %69, %65 ], [ %64, %70 ], [ %64, %72 ]
  %77 = phi i64 [ %68, %65 ], [ %59, %70 ], [ %59, %72 ]
  %78 = phi i64 [ %67, %65 ], [ %57, %70 ], [ %74, %72 ]
  %79 = sub i64 %78, %77
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %84, label %81

81:                                               ; preds = %75
  %82 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 8, i32 3, i64 0
  %83 = bitcast double* %82 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %83, i64 %79, i1 false) #8
  br label %84

84:                                               ; preds = %75, %81
  %85 = load i64, i64* %33, align 8
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %309, label %87

87:                                               ; preds = %84
  %88 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 8, i32 5
  %89 = load i8, i8* %88, align 8, !range !2
  %90 = icmp eq i8 %89, 0
  %91 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 0, i32 0, i32 0
  %92 = load double*, double** %91, align 8
  %93 = load i64, i64* %36, align 8
  %94 = ptrtoint double* %92 to i64
  %95 = sub i64 %93, %94
  %96 = icmp sgt i64 %95, 0
  br i1 %90, label %186, label %97

97:                                               ; preds = %87
  br i1 %96, label %98, label %303

98:                                               ; preds = %97
  %99 = lshr exact i64 %95, 3
  %100 = lshr i64 %95, 3
  %101 = icmp eq i64 %100, 0
  %102 = zext i1 %101 to i64
  %103 = add nuw nsw i64 %100, %102
  %104 = icmp ult i64 %103, 4
  br i1 %104, label %176, label %105

105:                                              ; preds = %98
  %106 = and i64 %103, 4611686018427387900
  %107 = sub nsw i64 %99, %106
  %108 = getelementptr double, double* %92, i64 %106
  %109 = add nsw i64 %106, -4
  %110 = lshr exact i64 %109, 2
  %111 = add nuw nsw i64 %110, 1
  %112 = and i64 %111, 7
  %113 = icmp ult i64 %109, 28
  br i1 %113, label %161, label %114

114:                                              ; preds = %105
  %115 = sub nsw i64 %111, %112
  br label %116

116:                                              ; preds = %116, %114
  %117 = phi i64 [ 0, %114 ], [ %158, %116 ]
  %118 = phi i64 [ %115, %114 ], [ %159, %116 ]
  %119 = getelementptr double, double* %92, i64 %117
  %120 = bitcast double* %119 to <2 x i64>*
  store <2 x i64> <i64 4576918229304087675, i64 4576918229304087675>, <2 x i64>* %120, align 8
  %121 = getelementptr double, double* %119, i64 2
  %122 = bitcast double* %121 to <2 x i64>*
  store <2 x i64> <i64 4576918229304087675, i64 4576918229304087675>, <2 x i64>* %122, align 8
  %123 = or i64 %117, 4
  %124 = getelementptr double, double* %92, i64 %123
  %125 = bitcast double* %124 to <2 x i64>*
  store <2 x i64> <i64 4576918229304087675, i64 4576918229304087675>, <2 x i64>* %125, align 8
  %126 = getelementptr double, double* %124, i64 2
  %127 = bitcast double* %126 to <2 x i64>*
  store <2 x i64> <i64 4576918229304087675, i64 4576918229304087675>, <2 x i64>* %127, align 8
  %128 = or i64 %117, 8
  %129 = getelementptr double, double* %92, i64 %128
  %130 = bitcast double* %129 to <2 x i64>*
  store <2 x i64> <i64 4576918229304087675, i64 4576918229304087675>, <2 x i64>* %130, align 8
  %131 = getelementptr double, double* %129, i64 2
  %132 = bitcast double* %131 to <2 x i64>*
  store <2 x i64> <i64 4576918229304087675, i64 4576918229304087675>, <2 x i64>* %132, align 8
  %133 = or i64 %117, 12
  %134 = getelementptr double, double* %92, i64 %133
  %135 = bitcast double* %134 to <2 x i64>*
  store <2 x i64> <i64 4576918229304087675, i64 4576918229304087675>, <2 x i64>* %135, align 8
  %136 = getelementptr double, double* %134, i64 2
  %137 = bitcast double* %136 to <2 x i64>*
  store <2 x i64> <i64 4576918229304087675, i64 4576918229304087675>, <2 x i64>* %137, align 8
  %138 = or i64 %117, 16
  %139 = getelementptr double, double* %92, i64 %138
  %140 = bitcast double* %139 to <2 x i64>*
  store <2 x i64> <i64 4576918229304087675, i64 4576918229304087675>, <2 x i64>* %140, align 8
  %141 = getelementptr double, double* %139, i64 2
  %142 = bitcast double* %141 to <2 x i64>*
  store <2 x i64> <i64 4576918229304087675, i64 4576918229304087675>, <2 x i64>* %142, align 8
  %143 = or i64 %117, 20
  %144 = getelementptr double, double* %92, i64 %143
  %145 = bitcast double* %144 to <2 x i64>*
  store <2 x i64> <i64 4576918229304087675, i64 4576918229304087675>, <2 x i64>* %145, align 8
  %146 = getelementptr double, double* %144, i64 2
  %147 = bitcast double* %146 to <2 x i64>*
  store <2 x i64> <i64 4576918229304087675, i64 4576918229304087675>, <2 x i64>* %147, align 8
  %148 = or i64 %117, 24
  %149 = getelementptr double, double* %92, i64 %148
  %150 = bitcast double* %149 to <2 x i64>*
  store <2 x i64> <i64 4576918229304087675, i64 4576918229304087675>, <2 x i64>* %150, align 8
  %151 = getelementptr double, double* %149, i64 2
  %152 = bitcast double* %151 to <2 x i64>*
  store <2 x i64> <i64 4576918229304087675, i64 4576918229304087675>, <2 x i64>* %152, align 8
  %153 = or i64 %117, 28
  %154 = getelementptr double, double* %92, i64 %153
  %155 = bitcast double* %154 to <2 x i64>*
  store <2 x i64> <i64 4576918229304087675, i64 4576918229304087675>, <2 x i64>* %155, align 8
  %156 = getelementptr double, double* %154, i64 2
  %157 = bitcast double* %156 to <2 x i64>*
  store <2 x i64> <i64 4576918229304087675, i64 4576918229304087675>, <2 x i64>* %157, align 8
  %158 = add i64 %117, 32
  %159 = add i64 %118, -8
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %161, label %116, !llvm.loop !3

161:                                              ; preds = %116, %105
  %162 = phi i64 [ 0, %105 ], [ %158, %116 ]
  %163 = icmp eq i64 %112, 0
  br i1 %163, label %174, label %164

164:                                              ; preds = %161, %164
  %165 = phi i64 [ %171, %164 ], [ %162, %161 ]
  %166 = phi i64 [ %172, %164 ], [ %112, %161 ]
  %167 = getelementptr double, double* %92, i64 %165
  %168 = bitcast double* %167 to <2 x i64>*
  store <2 x i64> <i64 4576918229304087675, i64 4576918229304087675>, <2 x i64>* %168, align 8
  %169 = getelementptr double, double* %167, i64 2
  %170 = bitcast double* %169 to <2 x i64>*
  store <2 x i64> <i64 4576918229304087675, i64 4576918229304087675>, <2 x i64>* %170, align 8
  %171 = add i64 %165, 4
  %172 = add i64 %166, -1
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %174, label %164, !llvm.loop !5

174:                                              ; preds = %164, %161
  %175 = icmp eq i64 %103, %106
  br i1 %175, label %303, label %176

176:                                              ; preds = %174, %98
  %177 = phi i64 [ %99, %98 ], [ %107, %174 ]
  %178 = phi double* [ %92, %98 ], [ %108, %174 ]
  br label %179

179:                                              ; preds = %176, %179
  %180 = phi i64 [ %184, %179 ], [ %177, %176 ]
  %181 = phi double* [ %183, %179 ], [ %178, %176 ]
  %182 = bitcast double* %181 to i64*
  store i64 4576918229304087675, i64* %182, align 8
  %183 = getelementptr inbounds double, double* %181, i64 1
  %184 = add nsw i64 %180, -1
  %185 = icmp sgt i64 %184, 0
  br i1 %185, label %179, label %303, !llvm.loop !7

186:                                              ; preds = %87
  br i1 %96, label %187, label %280

187:                                              ; preds = %186
  %188 = lshr exact i64 %95, 3
  %189 = lshr i64 %95, 3
  %190 = icmp eq i64 %189, 0
  %191 = zext i1 %190 to i64
  %192 = add nuw nsw i64 %189, %191
  %193 = icmp ult i64 %192, 4
  br i1 %193, label %265, label %194

194:                                              ; preds = %187
  %195 = and i64 %192, 4611686018427387900
  %196 = sub nsw i64 %188, %195
  %197 = getelementptr double, double* %92, i64 %195
  %198 = add nsw i64 %195, -4
  %199 = lshr exact i64 %198, 2
  %200 = add nuw nsw i64 %199, 1
  %201 = and i64 %200, 7
  %202 = icmp ult i64 %198, 28
  br i1 %202, label %250, label %203

203:                                              ; preds = %194
  %204 = sub nsw i64 %200, %201
  br label %205

205:                                              ; preds = %205, %203
  %206 = phi i64 [ 0, %203 ], [ %247, %205 ]
  %207 = phi i64 [ %204, %203 ], [ %248, %205 ]
  %208 = getelementptr double, double* %92, i64 %206
  %209 = bitcast double* %208 to <2 x i64>*
  store <2 x i64> <i64 4602678819172646912, i64 4602678819172646912>, <2 x i64>* %209, align 8
  %210 = getelementptr double, double* %208, i64 2
  %211 = bitcast double* %210 to <2 x i64>*
  store <2 x i64> <i64 4602678819172646912, i64 4602678819172646912>, <2 x i64>* %211, align 8
  %212 = or i64 %206, 4
  %213 = getelementptr double, double* %92, i64 %212
  %214 = bitcast double* %213 to <2 x i64>*
  store <2 x i64> <i64 4602678819172646912, i64 4602678819172646912>, <2 x i64>* %214, align 8
  %215 = getelementptr double, double* %213, i64 2
  %216 = bitcast double* %215 to <2 x i64>*
  store <2 x i64> <i64 4602678819172646912, i64 4602678819172646912>, <2 x i64>* %216, align 8
  %217 = or i64 %206, 8
  %218 = getelementptr double, double* %92, i64 %217
  %219 = bitcast double* %218 to <2 x i64>*
  store <2 x i64> <i64 4602678819172646912, i64 4602678819172646912>, <2 x i64>* %219, align 8
  %220 = getelementptr double, double* %218, i64 2
  %221 = bitcast double* %220 to <2 x i64>*
  store <2 x i64> <i64 4602678819172646912, i64 4602678819172646912>, <2 x i64>* %221, align 8
  %222 = or i64 %206, 12
  %223 = getelementptr double, double* %92, i64 %222
  %224 = bitcast double* %223 to <2 x i64>*
  store <2 x i64> <i64 4602678819172646912, i64 4602678819172646912>, <2 x i64>* %224, align 8
  %225 = getelementptr double, double* %223, i64 2
  %226 = bitcast double* %225 to <2 x i64>*
  store <2 x i64> <i64 4602678819172646912, i64 4602678819172646912>, <2 x i64>* %226, align 8
  %227 = or i64 %206, 16
  %228 = getelementptr double, double* %92, i64 %227
  %229 = bitcast double* %228 to <2 x i64>*
  store <2 x i64> <i64 4602678819172646912, i64 4602678819172646912>, <2 x i64>* %229, align 8
  %230 = getelementptr double, double* %228, i64 2
  %231 = bitcast double* %230 to <2 x i64>*
  store <2 x i64> <i64 4602678819172646912, i64 4602678819172646912>, <2 x i64>* %231, align 8
  %232 = or i64 %206, 20
  %233 = getelementptr double, double* %92, i64 %232
  %234 = bitcast double* %233 to <2 x i64>*
  store <2 x i64> <i64 4602678819172646912, i64 4602678819172646912>, <2 x i64>* %234, align 8
  %235 = getelementptr double, double* %233, i64 2
  %236 = bitcast double* %235 to <2 x i64>*
  store <2 x i64> <i64 4602678819172646912, i64 4602678819172646912>, <2 x i64>* %236, align 8
  %237 = or i64 %206, 24
  %238 = getelementptr double, double* %92, i64 %237
  %239 = bitcast double* %238 to <2 x i64>*
  store <2 x i64> <i64 4602678819172646912, i64 4602678819172646912>, <2 x i64>* %239, align 8
  %240 = getelementptr double, double* %238, i64 2
  %241 = bitcast double* %240 to <2 x i64>*
  store <2 x i64> <i64 4602678819172646912, i64 4602678819172646912>, <2 x i64>* %241, align 8
  %242 = or i64 %206, 28
  %243 = getelementptr double, double* %92, i64 %242
  %244 = bitcast double* %243 to <2 x i64>*
  store <2 x i64> <i64 4602678819172646912, i64 4602678819172646912>, <2 x i64>* %244, align 8
  %245 = getelementptr double, double* %243, i64 2
  %246 = bitcast double* %245 to <2 x i64>*
  store <2 x i64> <i64 4602678819172646912, i64 4602678819172646912>, <2 x i64>* %246, align 8
  %247 = add i64 %206, 32
  %248 = add i64 %207, -8
  %249 = icmp eq i64 %248, 0
  br i1 %249, label %250, label %205, !llvm.loop !9

250:                                              ; preds = %205, %194
  %251 = phi i64 [ 0, %194 ], [ %247, %205 ]
  %252 = icmp eq i64 %201, 0
  br i1 %252, label %263, label %253

253:                                              ; preds = %250, %253
  %254 = phi i64 [ %260, %253 ], [ %251, %250 ]
  %255 = phi i64 [ %261, %253 ], [ %201, %250 ]
  %256 = getelementptr double, double* %92, i64 %254
  %257 = bitcast double* %256 to <2 x i64>*
  store <2 x i64> <i64 4602678819172646912, i64 4602678819172646912>, <2 x i64>* %257, align 8
  %258 = getelementptr double, double* %256, i64 2
  %259 = bitcast double* %258 to <2 x i64>*
  store <2 x i64> <i64 4602678819172646912, i64 4602678819172646912>, <2 x i64>* %259, align 8
  %260 = add i64 %254, 4
  %261 = add i64 %255, -1
  %262 = icmp eq i64 %261, 0
  br i1 %262, label %263, label %253, !llvm.loop !10

263:                                              ; preds = %253, %250
  %264 = icmp eq i64 %192, %195
  br i1 %264, label %275, label %265

265:                                              ; preds = %263, %187
  %266 = phi i64 [ %188, %187 ], [ %196, %263 ]
  %267 = phi double* [ %92, %187 ], [ %197, %263 ]
  br label %268

268:                                              ; preds = %265, %268
  %269 = phi i64 [ %273, %268 ], [ %266, %265 ]
  %270 = phi double* [ %272, %268 ], [ %267, %265 ]
  %271 = bitcast double* %270 to i64*
  store i64 4602678819172646912, i64* %271, align 8
  %272 = getelementptr inbounds double, double* %270, i64 1
  %273 = add nsw i64 %269, -1
  %274 = icmp sgt i64 %273, 0
  br i1 %274, label %268, label %275, !llvm.loop !11

275:                                              ; preds = %268, %263
  %276 = load double*, double** %91, align 8
  %277 = load i64, i64* %36, align 8
  %278 = ptrtoint double* %276 to i64
  %279 = sub i64 %277, %278
  br label %280

280:                                              ; preds = %275, %186
  %281 = phi i64 [ %279, %275 ], [ %95, %186 ]
  %282 = phi double* [ %276, %275 ], [ %92, %186 ]
  %283 = load %"class.webrtc::StandaloneVad"*, %"class.webrtc::StandaloneVad"** %20, align 8
  %284 = ashr exact i64 %281, 3
  %285 = call i32 @_ZN6webrtc13StandaloneVad11GetActivityEPdm(%"class.webrtc::StandaloneVad"* %283, double* %282, i64 %284) #8
  %286 = icmp sgt i32 %285, -1
  br i1 %286, label %295, label %287

287:                                              ; preds = %280
  %288 = load %"class.webrtc::StandaloneVad"*, %"class.webrtc::StandaloneVad"** %20, align 8
  %289 = load double*, double** %91, align 8
  %290 = load i64, i64* %36, align 8
  %291 = ptrtoint double* %289 to i64
  %292 = sub i64 %290, %291
  %293 = ashr exact i64 %292, 3
  %294 = call i32 @_ZN6webrtc13StandaloneVad11GetActivityEPdm(%"class.webrtc::StandaloneVad"* %288, double* %289, i64 %293) #8
  call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([109 x i8], [109 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t, i64 0, i64 0), i32 %294, i32 0) #10
  unreachable

295:                                              ; preds = %280
  %296 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 6
  %297 = load double*, double** %91, align 8
  %298 = call i32 @_ZN6webrtc13PitchBasedVad18VoicingProbabilityERK13AudioFeaturesPd(%"class.webrtc::PitchBasedVad"* %296, %struct.AudioFeatures* dereferenceable(144) %31, double* %297) #8
  %299 = icmp sgt i32 %298, -1
  br i1 %299, label %303, label %300

300:                                              ; preds = %295
  %301 = load double*, double** %91, align 8
  %302 = call i32 @_ZN6webrtc13PitchBasedVad18VoicingProbabilityERK13AudioFeaturesPd(%"class.webrtc::PitchBasedVad"* %296, %struct.AudioFeatures* dereferenceable(144) %31, double* %301) #8
  call void (i8*, i32, i8*, i8*, ...) @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str, i64 0, i64 0), i32 78, i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE11CallCheckOpIJNS0_3ValILNS0_12CheckArgTypeE1EiEES6_EEEvPKciS8_DpRKT_E1t, i64 0, i64 0), i32 %302, i32 0) #10
  unreachable

303:                                              ; preds = %179, %174, %295, %97
  %304 = load double*, double** %35, align 8
  %305 = getelementptr inbounds double, double* %304, i64 -1
  %306 = load double, double* %305, align 8
  %307 = fptrunc double %306 to float
  %308 = getelementptr inbounds %"class.webrtc::VoiceActivityDetector", %"class.webrtc::VoiceActivityDetector"* %0, i64 0, i32 2
  store float %307, float* %308, align 8
  br label %309

309:                                              ; preds = %84, %303
  ret void
}

declare i32 @_ZN6webrtc9Resampler13ResetIfNeededEiim(%"class.webrtc::Resampler"*, i32, i32, i64) local_unnamed_addr #1

declare i32 @_ZN6webrtc9Resampler4PushEPKsmPsmRm(%"class.webrtc::Resampler"*, i16*, i64, i16*, i64, i64* dereferenceable(8)) local_unnamed_addr #1

declare i32 @_ZN6webrtc13StandaloneVad8AddAudioEPKsm(%"class.webrtc::StandaloneVad"*, i16*, i64) local_unnamed_addr #1

declare i32 @_ZN6webrtc12VadAudioProc15ExtractFeaturesEPKsmP13AudioFeatures(%"class.webrtc::VadAudioProc"*, i16*, i64, %struct.AudioFeatures*) local_unnamed_addr #1

declare i32 @_ZN6webrtc13StandaloneVad11GetActivityEPdm(%"class.webrtc::StandaloneVad"*, double*, i64) local_unnamed_addr #1

declare i32 @_ZN6webrtc13PitchBasedVad18VoicingProbabilityERK13AudioFeaturesPd(%"class.webrtc::PitchBasedVad"*, %struct.AudioFeatures* dereferenceable(144), double*) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN6webrtc13StandaloneVadD1Ev(%"class.webrtc::StandaloneVad"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: noreturn
declare void @_ZN3rtc18webrtc_checks_impl8FatalLogEPKciS2_PKNS0_12CheckArgTypeEz(i8*, i32, i8*, i8*, ...) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast double** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast double** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to double*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds double, double* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr double, double* %13, i64 %18
  %20 = bitcast double* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 8
  %25 = and i64 %24, -8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #8
  %26 = ptrtoint double* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 3
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 2305843009213693951
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #10
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 3
  %41 = icmp ult i64 %40, 1152921504606846975
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 2
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 2305843009213693951
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #10
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 2305843009213693951, %38 ]
  %52 = shl i64 %51, 3
  %53 = tail call i8* @_Znwm(i64 %52) #9
  %54 = bitcast i8* %53 to double*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi double* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds double, double* %57, i64 %33
  %59 = getelementptr inbounds double, double* %57, i64 %56
  %60 = getelementptr inbounds double, double* %58, i64 %1
  %61 = bitcast double* %58 to i8*
  %62 = shl i64 %1, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 %62, i1 false) #8
  %63 = ptrtoint double* %59 to i64
  %64 = ptrtoint double* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %66 = load double*, double** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint double* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 3
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds double, double* %58, i64 %71
  %73 = ptrtoint double* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast double* %72 to i8*
  %77 = bitcast double* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 %69, i1 false) #8
  %78 = load double*, double** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi double* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq double* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast double* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #9
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = distinct !{!7, !8, !4}
!8 = !{!"llvm.loop.unroll.runtime.disable"}
!9 = distinct !{!9, !4}
!10 = distinct !{!10, !6}
!11 = distinct !{!11, !8, !4}
