; ModuleID = '../../third_party/ffmpeg/libavcodec/autorename_libavcodec_flacdec.c'
source_filename = "../../third_party/ffmpeg/libavcodec/autorename_libavcodec_flacdec.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type { i8*, i8*, i32, i32, %union.anon, double, double, i32, i8* }
%union.anon = type { i64 }
%struct.AVOptionRanges = type { %struct.AVOptionRange**, i32, i32 }
%struct.AVOptionRange = type { i8*, double, double, double, double, i32 }
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVRational = type { i32, i32 }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVCodecInternal = type { i32, i32, %struct.AVFrame*, %struct.AVBufferRef*, i8*, %struct.DecodeSimpleContext, %struct.AVBSFContext*, %struct.AVPacket*, %struct.AVFifoBuffer*, i8*, i32, i8*, %struct.EncodeSimpleContext, i32, i8*, i32, %struct.AVPacket*, %struct.AVFrame*, i32, i32, i64, i64, %struct.AVFrame*, %struct.AVPacket*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 }
%struct.DecodeSimpleContext = type { %struct.AVPacket* }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVBSFInternal = type opaque
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVFifoBuffer = type { i8*, i8*, i8*, i8*, i32, i32 }
%struct.EncodeSimpleContext = type { %struct.AVFrame* }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVDictionary = type opaque
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVCodecDefault = type { i8*, i8* }
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVCodecHWConfigInternal = type opaque
%struct.FLACContext = type { %struct.AVClass*, %struct.FLACStreaminfo, %struct.AVCodecContext*, %struct.GetBitContext, i32, i32, i32, i32, [8 x i32*], i8*, i32, i32, %struct.FLACDSPContext }
%struct.FLACStreaminfo = type { i32, i32, i32, i32, i32, i64 }
%struct.GetBitContext = type { i8*, i8*, i32, i32, i32 }
%struct.FLACDSPContext = type { [4 x void (i8**, i32**, i32, i32, i32)*], void (i32*, i32*, i32, i32, i32)*, void (i32*, i32*, i32, i32, i32)*, void (i32*, i32*, i32, i32, i32*, i32)*, void (i32*, i32*, i32, i32, i32*, i32)* }
%struct.FLACFrameInfo = type { i32, i32, i32, i32, i32, i64, i32 }
%struct.ThreadFrame = type { %struct.AVFrame*, [2 x %struct.AVCodecContext*], %struct.AVBufferRef* }

@.str = private unnamed_addr constant [5 x i8] c"flac\00", align 1
@.str.1 = private unnamed_addr constant [33 x i8] c"FLAC (Free Lossless Audio Codec)\00", align 1
@.compoundliteral = internal constant [5 x i32] [i32 1, i32 6, i32 2, i32 7, i32 -1], align 4
@flac_decoder_class = internal constant %struct.AVClass { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i8* (i8*)* @av_default_item_name, %struct.AVOption* getelementptr inbounds ([2 x %struct.AVOption], [2 x %struct.AVOption]* @options, i32 0, i32 0), i32 3687524, i32 0, i32 0, i8* (i8*, i8*)* null, %struct.AVClass* (%struct.AVClass*)* null, i32 0, i32 (i8*)* null, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* null, %struct.AVClass* (i8**)* null }, align 8
@ff_flac_decoder = hidden local_unnamed_addr global %struct.AVCodec { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i32 0, i32 0), i32 1, i32 86028, i32 5122, %struct.AVRational* null, i32* null, i32* null, i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.compoundliteral, i32 0, i32 0), i64* null, i8 0, %struct.AVClass* @flac_decoder_class, %struct.AVProfile* null, i8* null, i32 240, %struct.AVCodec* null, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)* null, %struct.AVCodecDefault* null, void (%struct.AVCodec*)* null, i32 (%struct.AVCodecContext*)* @flac_decode_init, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)* null, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)* @flac_decode_frame, i32 (%struct.AVCodecContext*)* @flac_decode_close, i32 (%struct.AVCodecContext*, %struct.AVPacket*)* null, i32 (%struct.AVCodecContext*, %struct.AVFrame*)* null, void (%struct.AVCodecContext*)* null, i32 0, i8* null, %struct.AVCodecHWConfigInternal** null, i32* null }, align 8
@.str.2 = private unnamed_addr constant [13 x i8] c"FLAC decoder\00", align 1
@options = internal constant [2 x %struct.AVOption] [%struct.AVOption { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i32 0, i32 0), i32 172, i32 18, %union.anon zeroinitializer, double 0.000000e+00, double 1.000000e+00, i32 10, i8* null }, %struct.AVOption zeroinitializer], align 16
@.str.3 = private unnamed_addr constant [14 x i8] c"use_buggy_lpc\00", align 1
@.str.4 = private unnamed_addr constant [32 x i8] c"emulate old buggy lavc behavior\00", align 1
@.str.5 = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.6 = private unnamed_addr constant [34 x i8] c"s->flac_stream_info.max_blocksize\00", align 1
@.str.7 = private unnamed_addr constant [46 x i8] c"../../third_party/ffmpeg/libavcodec/flacdec.c\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"\7FFLAC\00", align 1
@.str.9 = private unnamed_addr constant [31 x i8] c"skipping flac header packet 1\0A\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"skipping vorbis comment\0A\00", align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"invalid header\0A\00", align 1
@.str.12 = private unnamed_addr constant [23 x i8] c"decode_frame() failed\0A\00", align 1
@.str.13 = private unnamed_addr constant [22 x i8] c"CRC error at PTS %ld\0A\00", align 1
@.str.14 = private unnamed_addr constant [14 x i8] c"overread: %d\0A\00", align 1
@.str.15 = private unnamed_addr constant [29 x i8] c"underread: %d orig size: %d\0A\00", align 1
@.str.16 = private unnamed_addr constant [22 x i8] c"invalid frame header\0A\00", align 1
@.str.17 = private unnamed_addr constant [45 x i8] c"bps not found in STREAMINFO or frame header\0A\00", align 1
@.str.18 = private unnamed_addr constant [43 x i8] c"switching bps mid-stream is not supported\0A\00", align 1
@.str.19 = private unnamed_addr constant [19 x i8] c"blocksize %d > %d\0A\00", align 1
@.str.20 = private unnamed_addr constant [53 x i8] c"sample rate not found in STREAMINFO or frame header\0A\00", align 1
@.str.21 = private unnamed_addr constant [21 x i8] c"  Max Blocksize: %d\0A\00", align 1
@.str.22 = private unnamed_addr constant [21 x i8] c"  Max Framesize: %d\0A\00", align 1
@.str.23 = private unnamed_addr constant [18 x i8] c"  Samplerate: %d\0A\00", align 1
@.str.24 = private unnamed_addr constant [16 x i8] c"  Channels: %d\0A\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"  Bits: %d\0A\00", align 1
@.str.26 = private unnamed_addr constant [26 x i8] c"invalid subframe padding\0A\00", align 1
@.str.27 = private unnamed_addr constant [63 x i8] c"Invalid number of wasted bits > available bits (%d) - left=%d\0A\00", align 1
@.str.28 = private unnamed_addr constant [28 x i8] c"Decorrelated bit depth > 32\00", align 1
@.str.29 = private unnamed_addr constant [21 x i8] c"invalid coding type\0A\00", align 1
@.str.30 = private unnamed_addr constant [23 x i8] c"illegal pred order %d\0A\00", align 1
@.str.31 = private unnamed_addr constant [35 x i8] c"illegal residual coding method %d\0A\00", align 1
@.str.32 = private unnamed_addr constant [37 x i8] c"invalid rice order: %i blocksize %i\0A\00", align 1
@.str.33 = private unnamed_addr constant [34 x i8] c"invalid predictor order: %i > %i\0A\00", align 1
@.str.34 = private unnamed_addr constant [18 x i8] c"invalid residual\0A\00", align 1
@.str.35 = private unnamed_addr constant [25 x i8] c"invalid coeff precision\0A\00", align 1
@.str.36 = private unnamed_addr constant [45 x i8] c"qlevel %d not supported, maybe buggy stream\0A\00", align 1

; Function Attrs: cold nounwind optsize ssp uwtable
define internal i32 @flac_decode_init(%struct.AVCodecContext*) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #8
  store i32 -1431655766, i32* %2, align 4
  %5 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %3, align 8
  %6 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %7 = bitcast i8** %6 to %struct.FLACContext**
  %8 = load %struct.FLACContext*, %struct.FLACContext** %7, align 8
  %9 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %8, i64 0, i32 2
  store %struct.AVCodecContext* %0, %struct.AVCodecContext** %9, align 8
  %10 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 15
  %11 = load i8*, i8** %10, align 8
  %12 = icmp eq i8* %11, null
  br i1 %12, label %33, label %13

13:                                               ; preds = %1
  %14 = call i32 @ff_flac_is_extradata_valid(%struct.AVCodecContext* %0, i32* nonnull %2, i8** nonnull %3) #8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %33, label %16

16:                                               ; preds = %13
  %17 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %8, i64 0, i32 1
  %18 = load i8*, i8** %3, align 8
  %19 = call i32 @ff_flac_parse_streaminfo(%struct.AVCodecContext* %0, %struct.FLACStreaminfo* %17, i8* %18) #8
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %33, label %21

21:                                               ; preds = %16
  %22 = call fastcc i32 @allocate_buffers(%struct.FLACContext* %8)
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %33, label %24

24:                                               ; preds = %21
  call fastcc void @flac_set_bps(%struct.FLACContext* %8)
  %25 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %8, i64 0, i32 12
  %26 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 84
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %8, i64 0, i32 1, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %8, i64 0, i32 1, i32 2
  %31 = load i32, i32* %30, align 8
  call void @ff_flacdsp_init(%struct.FLACDSPContext* %25, i32 %27, i32 %29, i32 %31) #8
  %32 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %8, i64 0, i32 7
  store i32 1, i32* %32, align 4
  br label %33

33:                                               ; preds = %21, %16, %13, %1, %24
  %34 = phi i32 [ 0, %24 ], [ 0, %1 ], [ -1094995529, %13 ], [ %19, %16 ], [ %22, %21 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #8
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @flac_decode_frame(%struct.AVCodecContext*, i8*, i32* nocapture, %struct.AVPacket* nocapture readonly) #1 {
  %5 = alloca [32 x i32], align 16
  %6 = alloca %struct.FLACFrameInfo, align 8
  %7 = alloca %struct.ThreadFrame, align 8
  %8 = bitcast %struct.ThreadFrame* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #8
  %9 = getelementptr inbounds %struct.ThreadFrame, %struct.ThreadFrame* %7, i64 0, i32 1
  %10 = bitcast [2 x %struct.AVCodecContext*]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 24, i1 false)
  %11 = bitcast %struct.ThreadFrame* %7 to i8**
  store i8* %1, i8** %11, align 8
  %12 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 3
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 4
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %17 = bitcast i8** %16 to %struct.FLACContext**
  %18 = load %struct.FLACContext*, %struct.FLACContext** %17, align 8
  store i32 0, i32* %2, align 4
  %19 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 1, i32 4
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %28

22:                                               ; preds = %4
  %23 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 1, i32 3
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, 0
  %26 = select i1 %25, i32 65535, i32 %24
  %27 = tail call i32 @ff_flac_get_max_frame_size(i32 %26, i32 8, i32 32) #8
  store i32 %27, i32* %19, align 8
  br label %28

28:                                               ; preds = %22, %4
  %29 = icmp sgt i32 %15, 5
  br i1 %29, label %30, label %37

30:                                               ; preds = %28
  %31 = tail call i32 @bcmp(i8* %13, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i64 0, i64 0), i64 5)
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %39

33:                                               ; preds = %30
  %34 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 2
  %35 = bitcast %struct.AVCodecContext** %34 to i8**
  %36 = load i8*, i8** %35, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %36, i32 48, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.9, i64 0, i64 0)) #8
  br label %1382

37:                                               ; preds = %28
  %38 = icmp sgt i32 %15, 0
  br i1 %38, label %39, label %1382

39:                                               ; preds = %30, %37
  %40 = load i8, i8* %13, align 1
  %41 = and i8 %40, 127
  %42 = icmp eq i8 %41, 4
  br i1 %42, label %43, label %47

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 2
  %45 = bitcast %struct.AVCodecContext** %44 to i8**
  %46 = load i8*, i8** %45, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %46, i32 48, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0)) #8
  br label %1382

47:                                               ; preds = %39
  %48 = icmp slt i32 %15, 11
  br i1 %48, label %1382, label %49

49:                                               ; preds = %47
  %50 = bitcast i8* %13 to i32*
  %51 = load i32, i32* %50, align 1
  %52 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %51) #9, !srcloc !2
  %53 = icmp eq i32 %52, 1716281667
  br i1 %53, label %54, label %164

54:                                               ; preds = %49
  %55 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 7
  %56 = load i32, i32* %55, align 4
  %57 = icmp ne i32 %56, 0
  %58 = icmp slt i32 %15, 42
  %59 = or i1 %58, %57
  br i1 %59, label %127, label %60

60:                                               ; preds = %54
  %61 = getelementptr inbounds i8, i8* %13, i64 4
  %62 = getelementptr inbounds i8, i8* %13, i64 5
  %63 = load i8, i8* %61, align 1
  %64 = and i8 %63, 127
  %65 = load i8, i8* %62, align 1
  %66 = zext i8 %65 to i32
  %67 = shl nuw nsw i32 %66, 16
  %68 = getelementptr inbounds i8, i8* %13, i64 6
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = shl nuw nsw i32 %70, 8
  %72 = or i32 %71, %67
  %73 = getelementptr inbounds i8, i8* %13, i64 7
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = or i32 %72, %75
  %77 = icmp ne i8 %64, 0
  %78 = icmp ne i32 %76, 34
  %79 = or i1 %77, %78
  br i1 %79, label %122, label %80

80:                                               ; preds = %60
  %81 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 2
  %82 = load %struct.AVCodecContext*, %struct.AVCodecContext** %81, align 8
  %83 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 1
  %84 = getelementptr inbounds i8, i8* %13, i64 8
  %85 = tail call i32 @ff_flac_parse_streaminfo(%struct.AVCodecContext* %82, %struct.FLACStreaminfo* %83, i8* %84) #8
  %86 = icmp slt i32 %85, 0
  br i1 %86, label %122, label %87

87:                                               ; preds = %80
  %88 = tail call fastcc i32 @allocate_buffers(%struct.FLACContext* %18) #8
  %89 = icmp slt i32 %88, 0
  br i1 %89, label %122, label %90

90:                                               ; preds = %87
  %91 = load %struct.AVCodecContext*, %struct.AVCodecContext** %81, align 8
  %92 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %91, i64 0, i32 92
  %93 = load i32, i32* %92, align 4
  %94 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 1, i32 2
  %95 = load i32, i32* %94, align 8
  %96 = icmp sgt i32 %95, 16
  %97 = tail call i32 @av_get_bytes_per_sample(i32 %93) #8
  %98 = icmp sgt i32 %97, 2
  %99 = tail call i32 @av_sample_fmt_is_planar(i32 %93) #8
  %100 = or i1 %96, %98
  %101 = icmp ne i32 %99, 0
  %102 = load %struct.AVCodecContext*, %struct.AVCodecContext** %81, align 8
  %103 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %102, i64 0, i32 84
  br i1 %100, label %104, label %108

104:                                              ; preds = %90
  %105 = select i1 %101, i32 7, i32 2
  store i32 %105, i32* %103, align 8
  %106 = load i32, i32* %94, align 8
  %107 = sub nsw i32 32, %106
  br label %112

108:                                              ; preds = %90
  %109 = select i1 %101, i32 6, i32 1
  store i32 %109, i32* %103, align 8
  %110 = load i32, i32* %94, align 8
  %111 = sub nsw i32 16, %110
  br label %112

112:                                              ; preds = %108, %104
  %113 = phi i32 [ %110, %108 ], [ %106, %104 ]
  %114 = phi i32 [ %111, %108 ], [ %107, %104 ]
  %115 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 5
  store i32 %114, i32* %115, align 4
  %116 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 12
  %117 = load %struct.AVCodecContext*, %struct.AVCodecContext** %81, align 8
  %118 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %117, i64 0, i32 84
  %119 = load i32, i32* %118, align 8
  %120 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 1, i32 1
  %121 = load i32, i32* %120, align 4
  tail call void @ff_flacdsp_init(%struct.FLACDSPContext* %116, i32 %119, i32 %121, i32 %113) #8
  store i32 1, i32* %55, align 4
  br label %127

122:                                              ; preds = %60, %80, %87
  %123 = phi i32 [ %88, %87 ], [ %85, %80 ], [ -1094995529, %60 ]
  %124 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 2
  %125 = bitcast %struct.AVCodecContext** %124 to i8**
  %126 = load i8*, i8** %125, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %126, i32 16, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i64 0, i64 0)) #8
  br label %1382

127:                                              ; preds = %54, %112
  %128 = sext i32 %15 to i64
  %129 = getelementptr inbounds i8, i8* %13, i64 %128
  %130 = getelementptr inbounds i8, i8* %13, i64 4
  %131 = ptrtoint i8* %129 to i64
  br label %132

132:                                              ; preds = %155, %127
  %133 = phi i8* [ %130, %127 ], [ %157, %155 ]
  %134 = ptrtoint i8* %133 to i64
  %135 = sub i64 %131, %134
  %136 = icmp slt i64 %135, 4
  br i1 %136, label %1382, label %137

137:                                              ; preds = %132
  %138 = getelementptr inbounds i8, i8* %133, i64 1
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i64
  %141 = shl nuw nsw i64 %140, 16
  %142 = getelementptr inbounds i8, i8* %133, i64 2
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i64
  %145 = shl nuw nsw i64 %144, 8
  %146 = or i64 %145, %141
  %147 = getelementptr inbounds i8, i8* %133, i64 3
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i64
  %150 = or i64 %146, %149
  %151 = getelementptr inbounds i8, i8* %133, i64 4
  %152 = ptrtoint i8* %151 to i64
  %153 = sub i64 %131, %152
  %154 = icmp slt i64 %153, %150
  br i1 %154, label %1382, label %155

155:                                              ; preds = %137
  %156 = load i8, i8* %133, align 1
  %157 = getelementptr inbounds i8, i8* %151, i64 %150
  %158 = icmp sgt i8 %156, -1
  br i1 %158, label %132, label %159

159:                                              ; preds = %155
  %160 = ptrtoint i8* %157 to i64
  %161 = sub i64 %160, %131
  %162 = trunc i64 %161 to i32
  %163 = add i32 %15, %162
  br label %1382

164:                                              ; preds = %49
  %165 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 3
  %166 = icmp ugt i32 %15, 268435455
  %167 = shl i32 %15, 3
  %168 = select i1 %166, i32 -8, i32 %167
  %169 = icmp ult i32 %168, 2147483135
  %170 = icmp ne i8* %13, null
  %171 = and i1 %170, %169
  %172 = select i1 %171, i32 %168, i32 0
  %173 = select i1 %171, i8* %13, i8* null
  %174 = ashr exact i32 %172, 3
  %175 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %165, i64 0, i32 0
  store i8* %173, i8** %175, align 8
  %176 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 3, i32 3
  store i32 %172, i32* %176, align 4
  %177 = add nsw i32 %172, 8
  %178 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 3, i32 4
  store i32 %177, i32* %178, align 8
  %179 = sext i32 %174 to i64
  %180 = getelementptr inbounds i8, i8* %173, i64 %179
  %181 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 3, i32 1
  store i8* %180, i8** %181, align 8
  %182 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 3, i32 2
  store i32 0, i32* %182, align 8
  br i1 %171, label %183, label %1382

183:                                              ; preds = %164
  %184 = bitcast %struct.FLACFrameInfo* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %184) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %184, i8 -86, i64 40, i1 false) #8
  %185 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 2
  %186 = load %struct.AVCodecContext*, %struct.AVCodecContext** %185, align 8
  %187 = call i32 @ff_flac_decode_frame_header(%struct.AVCodecContext* %186, %struct.GetBitContext* %165, %struct.FLACFrameInfo* nonnull %6, i32 0) #8
  %188 = icmp slt i32 %187, 0
  br i1 %188, label %189, label %192

189:                                              ; preds = %183
  %190 = bitcast %struct.AVCodecContext** %185 to i8**
  %191 = load i8*, i8** %190, align 8
  call void (i8*, i32, i8*, ...) @av_log(i8* %191, i32 16, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.16, i64 0, i64 0)) #8
  br label %1323

192:                                              ; preds = %183
  %193 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 1, i32 1
  %194 = load i32, i32* %193, align 4
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %210, label %196

196:                                              ; preds = %192
  %197 = getelementptr inbounds %struct.FLACFrameInfo, %struct.FLACFrameInfo* %6, i64 0, i32 1
  %198 = load i32, i32* %197, align 4
  %199 = icmp eq i32 %198, %194
  br i1 %199, label %210, label %200

200:                                              ; preds = %196
  %201 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 7
  %202 = load i32, i32* %201, align 4
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %210, label %204

204:                                              ; preds = %200
  %205 = load %struct.AVCodecContext*, %struct.AVCodecContext** %185, align 8
  %206 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %205, i64 0, i32 83
  store i32 %198, i32* %206, align 4
  store i32 %198, i32* %193, align 4
  %207 = load %struct.AVCodecContext*, %struct.AVCodecContext** %185, align 8
  call void @ff_flac_set_channel_layout(%struct.AVCodecContext* %207) #8
  %208 = call fastcc i32 @allocate_buffers(%struct.FLACContext* %18) #8
  %209 = icmp slt i32 %208, 0
  br i1 %209, label %1323, label %210

210:                                              ; preds = %204, %200, %196, %192
  %211 = getelementptr inbounds %struct.FLACFrameInfo, %struct.FLACFrameInfo* %6, i64 0, i32 1
  %212 = load i32, i32* %211, align 4
  %213 = load %struct.AVCodecContext*, %struct.AVCodecContext** %185, align 8
  %214 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %213, i64 0, i32 83
  store i32 %212, i32* %214, align 4
  store i32 %212, i32* %193, align 4
  %215 = load %struct.AVCodecContext*, %struct.AVCodecContext** %185, align 8
  %216 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %215, i64 0, i32 89
  %217 = load i64, i64* %216, align 8
  %218 = icmp eq i64 %217, 0
  br i1 %218, label %219, label %220

219:                                              ; preds = %210
  call void @ff_flac_set_channel_layout(%struct.AVCodecContext* %215) #8
  br label %220

220:                                              ; preds = %219, %210
  %221 = getelementptr inbounds %struct.FLACFrameInfo, %struct.FLACFrameInfo* %6, i64 0, i32 4
  %222 = load i32, i32* %221, align 8
  %223 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 6
  store i32 %222, i32* %223, align 8
  %224 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 1, i32 2
  %225 = load i32, i32* %224, align 8
  %226 = icmp eq i32 %225, 0
  %227 = getelementptr inbounds %struct.FLACFrameInfo, %struct.FLACFrameInfo* %6, i64 0, i32 2
  %228 = load i32, i32* %227, align 8
  %229 = icmp eq i32 %228, 0
  br i1 %226, label %230, label %234

230:                                              ; preds = %220
  br i1 %229, label %231, label %241

231:                                              ; preds = %230
  %232 = bitcast %struct.AVCodecContext** %185 to i8**
  %233 = load i8*, i8** %232, align 8
  call void (i8*, i32, i8*, ...) @av_log(i8* %233, i32 16, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.17, i64 0, i64 0)) #8
  br label %1323

234:                                              ; preds = %220
  br i1 %229, label %235, label %236

235:                                              ; preds = %234
  store i32 %225, i32* %227, align 8
  br label %262

236:                                              ; preds = %234
  %237 = icmp eq i32 %228, %225
  br i1 %237, label %262, label %238

238:                                              ; preds = %236
  %239 = bitcast %struct.AVCodecContext** %185 to i8**
  %240 = load i8*, i8** %239, align 8
  call void (i8*, i32, i8*, ...) @av_log(i8* %240, i32 16, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.18, i64 0, i64 0)) #8
  br label %1323

241:                                              ; preds = %230
  %242 = load %struct.AVCodecContext*, %struct.AVCodecContext** %185, align 8
  %243 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %242, i64 0, i32 143
  store i32 %228, i32* %243, align 4
  store i32 %228, i32* %224, align 8
  %244 = load %struct.AVCodecContext*, %struct.AVCodecContext** %185, align 8
  %245 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %244, i64 0, i32 92
  %246 = load i32, i32* %245, align 4
  %247 = icmp sgt i32 %228, 16
  %248 = call i32 @av_get_bytes_per_sample(i32 %246) #8
  %249 = icmp sgt i32 %248, 2
  %250 = call i32 @av_sample_fmt_is_planar(i32 %246) #8
  %251 = or i1 %247, %249
  %252 = icmp ne i32 %250, 0
  %253 = load %struct.AVCodecContext*, %struct.AVCodecContext** %185, align 8
  %254 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %253, i64 0, i32 84
  %255 = select i1 %252, i32 6, i32 1
  %256 = select i1 %252, i32 7, i32 2
  %257 = select i1 %251, i32 %256, i32 %255
  %258 = select i1 %251, i32 32, i32 16
  store i32 %257, i32* %254, align 8
  %259 = load i32, i32* %224, align 8
  %260 = sub nsw i32 %258, %259
  %261 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 5
  store i32 %260, i32* %261, align 4
  br label %262

262:                                              ; preds = %241, %236, %235
  %263 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 1, i32 3
  %264 = load i32, i32* %263, align 4
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %266, label %267

266:                                              ; preds = %262
  store i32 65535, i32* %263, align 4
  br label %267

267:                                              ; preds = %266, %262
  %268 = phi i32 [ %264, %262 ], [ 65535, %266 ]
  %269 = getelementptr inbounds %struct.FLACFrameInfo, %struct.FLACFrameInfo* %6, i64 0, i32 3
  %270 = load i32, i32* %269, align 4
  %271 = icmp sgt i32 %270, %268
  br i1 %271, label %272, label %275

272:                                              ; preds = %267
  %273 = bitcast %struct.AVCodecContext** %185 to i8**
  %274 = load i8*, i8** %273, align 8
  call void (i8*, i32, i8*, ...) @av_log(i8* %274, i32 16, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.19, i64 0, i64 0), i32 %270, i32 %268) #8
  br label %1323

275:                                              ; preds = %267
  %276 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 4
  store i32 %270, i32* %276, align 8
  %277 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 1, i32 0
  %278 = load i32, i32* %277, align 8
  %279 = icmp eq i32 %278, 0
  %280 = getelementptr inbounds %struct.FLACFrameInfo, %struct.FLACFrameInfo* %6, i64 0, i32 0
  %281 = load i32, i32* %280, align 8
  %282 = icmp eq i32 %281, 0
  br i1 %279, label %283, label %287

283:                                              ; preds = %275
  br i1 %282, label %284, label %289

284:                                              ; preds = %283
  %285 = bitcast %struct.AVCodecContext** %185 to i8**
  %286 = load i8*, i8** %285, align 8
  call void (i8*, i32, i8*, ...) @av_log(i8* %286, i32 16, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.20, i64 0, i64 0)) #8
  br label %1323

287:                                              ; preds = %275
  br i1 %282, label %288, label %289

288:                                              ; preds = %287
  store i32 %278, i32* %280, align 8
  br label %289

289:                                              ; preds = %288, %287, %283
  %290 = phi i32 [ %278, %288 ], [ %281, %287 ], [ %281, %283 ]
  %291 = load %struct.AVCodecContext*, %struct.AVCodecContext** %185, align 8
  %292 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %291, i64 0, i32 82
  store i32 %290, i32* %292, align 8
  store i32 %290, i32* %277, align 8
  %293 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 7
  %294 = load i32, i32* %293, align 4
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %296, label %307

296:                                              ; preds = %289
  %297 = call fastcc i32 @allocate_buffers(%struct.FLACContext* %18) #8
  %298 = icmp slt i32 %297, 0
  br i1 %298, label %1323, label %299

299:                                              ; preds = %296
  store i32 1, i32* %293, align 4
  %300 = bitcast %struct.AVCodecContext** %185 to i8**
  %301 = load i8*, i8** %300, align 8
  %302 = load i32, i32* %263, align 4
  call void (i8*, i32, i8*, ...) @av_log(i8* %301, i32 48, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.21, i64 0, i64 0), i32 %302) #8
  %303 = load i32, i32* %19, align 8
  call void (i8*, i32, i8*, ...) @av_log(i8* %301, i32 48, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.22, i64 0, i64 0), i32 %303) #8
  %304 = load i32, i32* %277, align 8
  call void (i8*, i32, i8*, ...) @av_log(i8* %301, i32 48, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.23, i64 0, i64 0), i32 %304) #8
  %305 = load i32, i32* %193, align 4
  call void (i8*, i32, i8*, ...) @av_log(i8* %301, i32 48, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.24, i64 0, i64 0), i32 %305) #8
  %306 = load i32, i32* %224, align 8
  call void (i8*, i32, i8*, ...) @av_log(i8* %301, i32 48, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i64 0, i64 0), i32 %306) #8
  br label %307

307:                                              ; preds = %299, %289
  %308 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 12
  %309 = load %struct.AVCodecContext*, %struct.AVCodecContext** %185, align 8
  %310 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %309, i64 0, i32 84
  %311 = load i32, i32* %310, align 8
  %312 = load i32, i32* %193, align 4
  %313 = load i32, i32* %224, align 8
  call void @ff_flacdsp_init(%struct.FLACDSPContext* %308, i32 %311, i32 %312, i32 %313) #8
  %314 = load i32, i32* %193, align 4
  %315 = icmp sgt i32 %314, 0
  br i1 %315, label %316, label %1313

316:                                              ; preds = %307
  %317 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 3, i32 0
  %318 = bitcast [32 x i32]* %5 to i8*
  %319 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 11
  %320 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 12, i32 2
  %321 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 0
  %322 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 12, i32 1
  br label %323

323:                                              ; preds = %1308, %316
  %324 = phi i64 [ 0, %316 ], [ %1309, %1308 ]
  %325 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 8, i64 %324
  %326 = load i32*, i32** %325, align 8
  %327 = load i32, i32* %224, align 8
  %328 = icmp eq i64 %324, 0
  %329 = load i32, i32* %223, align 8
  br i1 %328, label %330, label %334

330:                                              ; preds = %323
  %331 = icmp eq i32 %329, 2
  %332 = zext i1 %331 to i32
  %333 = add nsw i32 %327, %332
  br label %337

334:                                              ; preds = %323
  switch i32 %329, label %337 [
    i32 1, label %335
    i32 3, label %335
  ]

335:                                              ; preds = %334, %334
  %336 = add nsw i32 %327, 1
  br label %337

337:                                              ; preds = %335, %334, %330
  %338 = phi i32 [ %336, %335 ], [ %333, %330 ], [ %327, %334 ]
  %339 = load i32, i32* %182, align 8
  %340 = load i8*, i8** %317, align 8
  %341 = lshr i32 %339, 3
  %342 = zext i32 %341 to i64
  %343 = getelementptr inbounds i8, i8* %340, i64 %342
  %344 = load i8, i8* %343, align 1
  %345 = and i32 %339, 7
  %346 = zext i8 %344 to i32
  %347 = shl i32 %346, %345
  %348 = load i32, i32* %178, align 8
  %349 = icmp slt i32 %339, %348
  %350 = zext i1 %349 to i32
  %351 = add i32 %339, %350
  store i32 %351, i32* %182, align 8
  %352 = trunc i32 %347 to i8
  %353 = icmp sgt i8 %352, -1
  br i1 %353, label %357, label %354

354:                                              ; preds = %337
  %355 = bitcast %struct.AVCodecContext** %185 to i8**
  %356 = load i8*, i8** %355, align 8
  call void (i8*, i32, i8*, ...) @av_log(i8* %356, i32 16, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.26, i64 0, i64 0)) #8
  br label %1323

357:                                              ; preds = %337
  %358 = lshr i32 %351, 3
  %359 = zext i32 %358 to i64
  %360 = getelementptr inbounds i8, i8* %340, i64 %359
  %361 = bitcast i8* %360 to i32*
  %362 = load i32, i32* %361, align 1
  %363 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %362) #9, !srcloc !2
  %364 = and i32 %351, 7
  %365 = shl i32 %363, %364
  %366 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -6, i32 %365) #9, !srcloc !3
  %367 = add i32 %351, 6
  %368 = icmp ugt i32 %348, %367
  %369 = select i1 %368, i32 %367, i32 %348
  store i32 %369, i32* %182, align 8
  %370 = lshr i32 %369, 3
  %371 = zext i32 %370 to i64
  %372 = getelementptr inbounds i8, i8* %340, i64 %371
  %373 = load i8, i8* %372, align 1
  %374 = and i32 %369, 7
  %375 = zext i8 %373 to i32
  %376 = shl i32 %375, %374
  %377 = icmp slt i32 %369, %348
  %378 = zext i1 %377 to i32
  %379 = add i32 %369, %378
  store i32 %379, i32* %182, align 8
  %380 = trunc i32 %376 to i8
  %381 = icmp sgt i8 %380, -1
  br i1 %381, label %488, label %382

382:                                              ; preds = %357
  %383 = load i32, i32* %176, align 4
  %384 = sub nsw i32 %383, %379
  %385 = icmp slt i32 %384, 1
  br i1 %385, label %485, label %386

386:                                              ; preds = %382
  %387 = icmp slt i32 %384, %338
  br i1 %387, label %395, label %388

388:                                              ; preds = %386
  %389 = lshr i32 %379, 3
  %390 = zext i32 %389 to i64
  %391 = and i32 %379, 7
  %392 = getelementptr inbounds i8, i8* %340, i64 %390
  %393 = bitcast i8* %392 to i32*
  %394 = load i32, i32* %393, align 1
  br label %431

395:                                              ; preds = %386
  %396 = icmp slt i32 %384, 26
  %397 = lshr i32 %379, 3
  %398 = zext i32 %397 to i64
  %399 = getelementptr inbounds i8, i8* %340, i64 %398
  %400 = bitcast i8* %399 to i32*
  %401 = load i32, i32* %400, align 1
  %402 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %401) #9
  %403 = and i32 %379, 7
  %404 = shl i32 %402, %403
  br i1 %396, label %405, label %409

405:                                              ; preds = %395
  %406 = trunc i32 %384 to i8
  %407 = sub nsw i8 0, %406
  %408 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %407, i32 %404) #9, !srcloc !3
  br label %428

409:                                              ; preds = %395
  %410 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %404) #9, !srcloc !3
  %411 = add i32 %379, 16
  %412 = icmp ugt i32 %348, %411
  %413 = select i1 %412, i32 %411, i32 %348
  %414 = add nsw i32 %384, -16
  %415 = shl i32 %410, %414
  %416 = lshr i32 %413, 3
  %417 = zext i32 %416 to i64
  %418 = getelementptr inbounds i8, i8* %340, i64 %417
  %419 = bitcast i8* %418 to i32*
  %420 = load i32, i32* %419, align 1
  %421 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %420) #9, !srcloc !2
  %422 = and i32 %413, 7
  %423 = shl i32 %421, %422
  %424 = trunc i32 %414 to i8
  %425 = sub i8 0, %424
  %426 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %425, i32 %423) #9, !srcloc !3
  %427 = or i32 %426, %415
  br label %428

428:                                              ; preds = %409, %405
  %429 = phi i32 [ %408, %405 ], [ %427, %409 ]
  %430 = icmp eq i32 %429, 0
  br i1 %430, label %485, label %431

431:                                              ; preds = %428, %388
  %432 = phi i32 [ %394, %388 ], [ %401, %428 ]
  %433 = phi i32 [ %391, %388 ], [ %403, %428 ]
  %434 = icmp slt i32 %338, 26
  %435 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %432) #9
  %436 = shl i32 %435, %433
  br i1 %434, label %437, label %441

437:                                              ; preds = %431
  %438 = trunc i32 %338 to i8
  %439 = sub i8 0, %438
  %440 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %439, i32 %436) #9, !srcloc !3
  br label %460

441:                                              ; preds = %431
  %442 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %436) #9, !srcloc !3
  %443 = add i32 %379, 16
  %444 = icmp ugt i32 %348, %443
  %445 = select i1 %444, i32 %443, i32 %348
  %446 = add nsw i32 %338, -16
  %447 = shl i32 %442, %446
  %448 = lshr i32 %445, 3
  %449 = zext i32 %448 to i64
  %450 = getelementptr inbounds i8, i8* %340, i64 %449
  %451 = bitcast i8* %450 to i32*
  %452 = load i32, i32* %451, align 1
  %453 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %452) #9, !srcloc !2
  %454 = and i32 %445, 7
  %455 = shl i32 %453, %454
  %456 = trunc i32 %446 to i8
  %457 = sub i8 0, %456
  %458 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %457, i32 %455) #9, !srcloc !3
  %459 = or i32 %458, %447
  br label %460

460:                                              ; preds = %441, %437
  %461 = phi i32 [ %440, %437 ], [ %459, %441 ]
  %462 = icmp eq i32 %461, 0
  br i1 %462, label %485, label %463

463:                                              ; preds = %460, %478
  %464 = phi i32 [ %475, %478 ], [ %379, %460 ]
  %465 = phi i32 [ %479, %478 ], [ 0, %460 ]
  %466 = lshr i32 %464, 3
  %467 = zext i32 %466 to i64
  %468 = getelementptr inbounds i8, i8* %340, i64 %467
  %469 = load i8, i8* %468, align 1
  %470 = and i32 %464, 7
  %471 = zext i8 %469 to i32
  %472 = shl i32 %471, %470
  %473 = icmp slt i32 %464, %348
  %474 = zext i1 %473 to i32
  %475 = add i32 %464, %474
  store i32 %475, i32* %182, align 8
  %476 = trunc i32 %472 to i8
  %477 = icmp slt i8 %476, 0
  br i1 %477, label %481, label %478

478:                                              ; preds = %463
  %479 = add nuw nsw i32 %465, 1
  %480 = icmp eq i32 %479, %384
  br i1 %480, label %481, label %463

481:                                              ; preds = %478, %463
  %482 = phi i32 [ %465, %463 ], [ %384, %478 ]
  %483 = add nsw i32 %482, 1
  %484 = sub nsw i32 %338, %483
  br label %488

485:                                              ; preds = %460, %428, %382
  %486 = bitcast %struct.AVCodecContext** %185 to i8**
  %487 = load i8*, i8** %486, align 8
  call void (i8*, i32, i8*, ...) @av_log(i8* %487, i32 16, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.27, i64 0, i64 0), i32 %338, i32 %384) #8
  br label %1323

488:                                              ; preds = %481, %357
  %489 = phi i32 [ %379, %357 ], [ %475, %481 ]
  %490 = phi i32 [ 0, %357 ], [ %483, %481 ]
  %491 = phi i32 [ %338, %357 ], [ %484, %481 ]
  %492 = icmp sgt i32 %491, 32
  br i1 %492, label %493, label %496

493:                                              ; preds = %488
  %494 = bitcast %struct.AVCodecContext** %185 to i8**
  %495 = load i8*, i8** %494, align 8
  call void (i8*, i8*, ...) @avpriv_report_missing_feature(i8* %495, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.28, i64 0, i64 0)) #8
  br label %1323

496:                                              ; preds = %488
  switch i32 %366, label %615 [
    i32 0, label %509
    i32 1, label %497
  ]

497:                                              ; preds = %496
  %498 = load i32, i32* %276, align 8
  %499 = icmp sgt i32 %498, 0
  br i1 %499, label %500, label %1292

500:                                              ; preds = %497
  %501 = icmp eq i32 %491, 0
  %502 = icmp slt i32 %491, 26
  %503 = add nsw i32 %491, -16
  %504 = trunc i32 %503 to i8
  %505 = sub i8 0, %504
  %506 = trunc i32 %491 to i8
  %507 = sub i8 0, %506
  %508 = sub i32 32, %491
  br label %566

509:                                              ; preds = %496
  %510 = icmp eq i32 %491, 0
  br i1 %510, label %555, label %511

511:                                              ; preds = %509
  %512 = icmp slt i32 %491, 26
  %513 = lshr i32 %489, 3
  %514 = zext i32 %513 to i64
  %515 = getelementptr inbounds i8, i8* %340, i64 %514
  %516 = bitcast i8* %515 to i32*
  %517 = load i32, i32* %516, align 1
  %518 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %517) #9
  %519 = and i32 %489, 7
  %520 = shl i32 %518, %519
  br i1 %512, label %521, label %528

521:                                              ; preds = %511
  %522 = trunc i32 %491 to i8
  %523 = sub i8 0, %522
  %524 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %523, i32 %520) #9, !srcloc !3
  %525 = add i32 %491, %489
  %526 = icmp ugt i32 %348, %525
  %527 = select i1 %526, i32 %525, i32 %348
  store i32 %527, i32* %182, align 8
  br label %550

528:                                              ; preds = %511
  %529 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %520) #9, !srcloc !3
  %530 = add i32 %489, 16
  %531 = icmp ugt i32 %348, %530
  %532 = select i1 %531, i32 %530, i32 %348
  store i32 %532, i32* %182, align 8
  %533 = add nsw i32 %491, -16
  %534 = shl i32 %529, %533
  %535 = lshr i32 %532, 3
  %536 = zext i32 %535 to i64
  %537 = getelementptr inbounds i8, i8* %340, i64 %536
  %538 = bitcast i8* %537 to i32*
  %539 = load i32, i32* %538, align 1
  %540 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %539) #9, !srcloc !2
  %541 = and i32 %532, 7
  %542 = shl i32 %540, %541
  %543 = trunc i32 %533 to i8
  %544 = sub nsw i8 0, %543
  %545 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %544, i32 %542) #9, !srcloc !3
  %546 = add i32 %532, %533
  %547 = icmp ugt i32 %348, %546
  %548 = select i1 %547, i32 %546, i32 %348
  store i32 %548, i32* %182, align 8
  %549 = or i32 %545, %534
  br label %550

550:                                              ; preds = %528, %521
  %551 = phi i32 [ %524, %521 ], [ %549, %528 ]
  %552 = sub i32 32, %491
  %553 = shl i32 %551, %552
  %554 = ashr i32 %553, %552
  br label %555

555:                                              ; preds = %550, %509
  %556 = phi i32 [ %554, %550 ], [ 0, %509 ]
  %557 = load i32, i32* %276, align 8
  %558 = icmp sgt i32 %557, 0
  br i1 %558, label %559, label %1292

559:                                              ; preds = %555, %559
  %560 = phi i64 [ %562, %559 ], [ 0, %555 ]
  %561 = getelementptr inbounds i32, i32* %326, i64 %560
  store i32 %556, i32* %561, align 4
  %562 = add nuw nsw i64 %560, 1
  %563 = load i32, i32* %276, align 8
  %564 = sext i32 %563 to i64
  %565 = icmp slt i64 %562, %564
  br i1 %565, label %559, label %1292

566:                                              ; preds = %608, %500
  %567 = phi i64 [ 0, %500 ], [ %611, %608 ]
  br i1 %501, label %608, label %568

568:                                              ; preds = %566
  %569 = load i32, i32* %182, align 8
  %570 = load i32, i32* %178, align 8
  %571 = load i8*, i8** %317, align 8
  %572 = lshr i32 %569, 3
  %573 = zext i32 %572 to i64
  %574 = getelementptr inbounds i8, i8* %571, i64 %573
  %575 = bitcast i8* %574 to i32*
  %576 = load i32, i32* %575, align 1
  %577 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %576) #9
  %578 = and i32 %569, 7
  %579 = shl i32 %577, %578
  br i1 %502, label %580, label %585

580:                                              ; preds = %568
  %581 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %507, i32 %579) #9, !srcloc !3
  %582 = add i32 %569, %491
  %583 = icmp ugt i32 %570, %582
  %584 = select i1 %583, i32 %582, i32 %570
  store i32 %584, i32* %182, align 8
  br label %604

585:                                              ; preds = %568
  %586 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %579) #9, !srcloc !3
  %587 = add i32 %569, 16
  %588 = icmp ugt i32 %570, %587
  %589 = select i1 %588, i32 %587, i32 %570
  store i32 %589, i32* %182, align 8
  %590 = shl i32 %586, %503
  %591 = lshr i32 %589, 3
  %592 = zext i32 %591 to i64
  %593 = getelementptr inbounds i8, i8* %571, i64 %592
  %594 = bitcast i8* %593 to i32*
  %595 = load i32, i32* %594, align 1
  %596 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %595) #9, !srcloc !2
  %597 = and i32 %589, 7
  %598 = shl i32 %596, %597
  %599 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %505, i32 %598) #9, !srcloc !3
  %600 = add i32 %589, %503
  %601 = icmp ugt i32 %570, %600
  %602 = select i1 %601, i32 %600, i32 %570
  store i32 %602, i32* %182, align 8
  %603 = or i32 %599, %590
  br label %604

604:                                              ; preds = %585, %580
  %605 = phi i32 [ %581, %580 ], [ %603, %585 ]
  %606 = shl i32 %605, %508
  %607 = ashr i32 %606, %508
  br label %608

608:                                              ; preds = %604, %566
  %609 = phi i32 [ %607, %604 ], [ 0, %566 ]
  %610 = getelementptr inbounds i32, i32* %326, i64 %567
  store i32 %609, i32* %610, align 4
  %611 = add nuw nsw i64 %567, 1
  %612 = load i32, i32* %276, align 8
  %613 = sext i32 %612 to i64
  %614 = icmp slt i64 %611, %613
  br i1 %614, label %566, label %1292

615:                                              ; preds = %496
  %616 = add i32 %366, -8
  %617 = icmp ult i32 %616, 5
  br i1 %617, label %618, label %851

618:                                              ; preds = %615
  %619 = and i32 %366, -9
  %620 = load i32, i32* %276, align 8
  %621 = icmp sgt i32 %619, 0
  br i1 %621, label %622, label %679

622:                                              ; preds = %618
  %623 = icmp eq i32 %491, 0
  %624 = icmp slt i32 %491, 26
  %625 = add nsw i32 %491, -16
  %626 = trunc i32 %625 to i8
  %627 = sub i8 0, %626
  %628 = trunc i32 %491 to i8
  %629 = sub i8 0, %628
  %630 = sub i32 32, %491
  %631 = zext i32 %619 to i64
  br label %632

632:                                              ; preds = %674, %622
  %633 = phi i64 [ 0, %622 ], [ %677, %674 ]
  br i1 %623, label %674, label %634

634:                                              ; preds = %632
  %635 = load i32, i32* %182, align 8
  %636 = load i32, i32* %178, align 8
  %637 = load i8*, i8** %317, align 8
  %638 = lshr i32 %635, 3
  %639 = zext i32 %638 to i64
  %640 = getelementptr inbounds i8, i8* %637, i64 %639
  %641 = bitcast i8* %640 to i32*
  %642 = load i32, i32* %641, align 1
  %643 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %642) #9
  %644 = and i32 %635, 7
  %645 = shl i32 %643, %644
  br i1 %624, label %646, label %651

646:                                              ; preds = %634
  %647 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %629, i32 %645) #9, !srcloc !3
  %648 = add i32 %635, %491
  %649 = icmp ugt i32 %636, %648
  %650 = select i1 %649, i32 %648, i32 %636
  store i32 %650, i32* %182, align 8
  br label %670

651:                                              ; preds = %634
  %652 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %645) #9, !srcloc !3
  %653 = add i32 %635, 16
  %654 = icmp ugt i32 %636, %653
  %655 = select i1 %654, i32 %653, i32 %636
  store i32 %655, i32* %182, align 8
  %656 = shl i32 %652, %625
  %657 = lshr i32 %655, 3
  %658 = zext i32 %657 to i64
  %659 = getelementptr inbounds i8, i8* %637, i64 %658
  %660 = bitcast i8* %659 to i32*
  %661 = load i32, i32* %660, align 1
  %662 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %661) #9, !srcloc !2
  %663 = and i32 %655, 7
  %664 = shl i32 %662, %663
  %665 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %627, i32 %664) #9, !srcloc !3
  %666 = add i32 %655, %625
  %667 = icmp ugt i32 %636, %666
  %668 = select i1 %667, i32 %666, i32 %636
  store i32 %668, i32* %182, align 8
  %669 = or i32 %665, %656
  br label %670

670:                                              ; preds = %651, %646
  %671 = phi i32 [ %647, %646 ], [ %669, %651 ]
  %672 = shl i32 %671, %630
  %673 = ashr i32 %672, %630
  br label %674

674:                                              ; preds = %670, %632
  %675 = phi i32 [ %673, %670 ], [ 0, %632 ]
  %676 = getelementptr inbounds i32, i32* %326, i64 %633
  store i32 %675, i32* %676, align 4
  %677 = add nuw nsw i64 %633, 1
  %678 = icmp eq i64 %677, %631
  br i1 %678, label %679, label %632

679:                                              ; preds = %674, %618
  %680 = call fastcc i32 @decode_residuals(%struct.FLACContext* %18, i32* %326, i32 %619) #8
  %681 = icmp slt i32 %680, 0
  br i1 %681, label %1323, label %682

682:                                              ; preds = %679
  br i1 %621, label %683, label %713

683:                                              ; preds = %682
  %684 = add nsw i32 %619, -1
  %685 = sext i32 %684 to i64
  %686 = getelementptr inbounds i32, i32* %326, i64 %685
  %687 = load i32, i32* %686, align 4
  %688 = icmp eq i32 %619, 1
  br i1 %688, label %746, label %689

689:                                              ; preds = %683
  %690 = add nsw i32 %619, -2
  %691 = sext i32 %690 to i64
  %692 = getelementptr inbounds i32, i32* %326, i64 %691
  %693 = load i32, i32* %692, align 4
  %694 = sub i32 %687, %693
  %695 = icmp sgt i32 %619, 2
  br i1 %695, label %696, label %736

696:                                              ; preds = %689
  %697 = sub i32 %694, %693
  %698 = add nsw i32 %619, -3
  %699 = sext i32 %698 to i64
  %700 = getelementptr inbounds i32, i32* %326, i64 %699
  %701 = load i32, i32* %700, align 4
  %702 = add i32 %701, %697
  %703 = icmp eq i32 %619, 3
  br i1 %703, label %727, label %704

704:                                              ; preds = %696
  %705 = sub i32 %702, %693
  %706 = shl i32 %701, 1
  %707 = add i32 %705, %706
  %708 = add nsw i32 %619, -4
  %709 = sext i32 %708 to i64
  %710 = getelementptr inbounds i32, i32* %326, i64 %709
  %711 = load i32, i32* %710, align 4
  %712 = sub i32 %707, %711
  br label %713

713:                                              ; preds = %704, %682
  %714 = phi i32 [ %702, %704 ], [ -1431655766, %682 ]
  %715 = phi i32 [ %687, %704 ], [ -1431655766, %682 ]
  %716 = phi i32 [ %694, %704 ], [ -1431655766, %682 ]
  %717 = phi i32 [ %712, %704 ], [ -1431655766, %682 ]
  switch i32 %619, label %848 [
    i32 0, label %1292
    i32 4, label %718
  ]

718:                                              ; preds = %713
  %719 = icmp sgt i32 %620, 4
  br i1 %719, label %720, label %1292

720:                                              ; preds = %718
  %721 = zext i32 %620 to i64
  %722 = add nsw i64 %721, -4
  %723 = and i64 %722, 1
  %724 = icmp eq i32 %620, 5
  br i1 %724, label %1261, label %725

725:                                              ; preds = %720
  %726 = sub nsw i64 %722, %723
  br label %825

727:                                              ; preds = %696
  %728 = icmp sgt i32 %620, 3
  br i1 %728, label %729, label %1292

729:                                              ; preds = %727
  %730 = zext i32 %620 to i64
  %731 = add nsw i64 %730, -3
  %732 = and i64 %731, 1
  %733 = icmp eq i32 %620, 4
  br i1 %733, label %1249, label %734

734:                                              ; preds = %729
  %735 = sub nsw i64 %731, %732
  br label %805

736:                                              ; preds = %689
  %737 = icmp sgt i32 %620, 2
  br i1 %737, label %738, label %1292

738:                                              ; preds = %736
  %739 = zext i32 %620 to i64
  %740 = add nsw i64 %739, -2
  %741 = add nsw i64 %739, -3
  %742 = and i64 %740, 3
  %743 = icmp ult i64 %741, 3
  br i1 %743, label %1275, label %744

744:                                              ; preds = %738
  %745 = sub nsw i64 %740, %742
  br label %778

746:                                              ; preds = %683
  %747 = icmp sgt i32 %620, 1
  br i1 %747, label %748, label %1292

748:                                              ; preds = %746
  %749 = zext i32 %620 to i64
  %750 = add nsw i64 %749, -1
  %751 = add nsw i64 %749, -2
  %752 = and i64 %750, 3
  %753 = icmp ult i64 %751, 3
  br i1 %753, label %1235, label %754

754:                                              ; preds = %748
  %755 = sub nsw i64 %750, %752
  br label %756

756:                                              ; preds = %756, %754
  %757 = phi i64 [ 1, %754 ], [ %775, %756 ]
  %758 = phi i32 [ %687, %754 ], [ %774, %756 ]
  %759 = phi i64 [ %755, %754 ], [ %776, %756 ]
  %760 = getelementptr inbounds i32, i32* %326, i64 %757
  %761 = load i32, i32* %760, align 4
  %762 = add i32 %761, %758
  store i32 %762, i32* %760, align 4
  %763 = add nuw nsw i64 %757, 1
  %764 = getelementptr inbounds i32, i32* %326, i64 %763
  %765 = load i32, i32* %764, align 4
  %766 = add i32 %765, %762
  store i32 %766, i32* %764, align 4
  %767 = add nuw nsw i64 %757, 2
  %768 = getelementptr inbounds i32, i32* %326, i64 %767
  %769 = load i32, i32* %768, align 4
  %770 = add i32 %769, %766
  store i32 %770, i32* %768, align 4
  %771 = add nuw nsw i64 %757, 3
  %772 = getelementptr inbounds i32, i32* %326, i64 %771
  %773 = load i32, i32* %772, align 4
  %774 = add i32 %773, %770
  store i32 %774, i32* %772, align 4
  %775 = add nuw nsw i64 %757, 4
  %776 = add i64 %759, -4
  %777 = icmp eq i64 %776, 0
  br i1 %777, label %1235, label %756

778:                                              ; preds = %778, %744
  %779 = phi i64 [ 2, %744 ], [ %802, %778 ]
  %780 = phi i32 [ %694, %744 ], [ %800, %778 ]
  %781 = phi i32 [ %687, %744 ], [ %801, %778 ]
  %782 = phi i64 [ %745, %744 ], [ %803, %778 ]
  %783 = getelementptr inbounds i32, i32* %326, i64 %779
  %784 = load i32, i32* %783, align 4
  %785 = add i32 %784, %780
  %786 = add i32 %785, %781
  store i32 %786, i32* %783, align 4
  %787 = or i64 %779, 1
  %788 = getelementptr inbounds i32, i32* %326, i64 %787
  %789 = load i32, i32* %788, align 4
  %790 = add i32 %789, %785
  %791 = add i32 %790, %786
  store i32 %791, i32* %788, align 4
  %792 = add nuw nsw i64 %779, 2
  %793 = getelementptr inbounds i32, i32* %326, i64 %792
  %794 = load i32, i32* %793, align 4
  %795 = add i32 %794, %790
  %796 = add i32 %795, %791
  store i32 %796, i32* %793, align 4
  %797 = add nuw nsw i64 %779, 3
  %798 = getelementptr inbounds i32, i32* %326, i64 %797
  %799 = load i32, i32* %798, align 4
  %800 = add i32 %799, %795
  %801 = add i32 %800, %796
  store i32 %801, i32* %798, align 4
  %802 = add nuw nsw i64 %779, 4
  %803 = add i64 %782, -4
  %804 = icmp eq i64 %803, 0
  br i1 %804, label %1275, label %778

805:                                              ; preds = %805, %734
  %806 = phi i64 [ 3, %734 ], [ %822, %805 ]
  %807 = phi i32 [ %702, %734 ], [ %819, %805 ]
  %808 = phi i32 [ %694, %734 ], [ %820, %805 ]
  %809 = phi i32 [ %687, %734 ], [ %821, %805 ]
  %810 = phi i64 [ %735, %734 ], [ %823, %805 ]
  %811 = getelementptr inbounds i32, i32* %326, i64 %806
  %812 = load i32, i32* %811, align 4
  %813 = add i32 %812, %807
  %814 = add i32 %813, %808
  %815 = add i32 %814, %809
  store i32 %815, i32* %811, align 4
  %816 = add nuw nsw i64 %806, 1
  %817 = getelementptr inbounds i32, i32* %326, i64 %816
  %818 = load i32, i32* %817, align 4
  %819 = add i32 %818, %813
  %820 = add i32 %819, %814
  %821 = add i32 %820, %815
  store i32 %821, i32* %817, align 4
  %822 = add nuw nsw i64 %806, 2
  %823 = add i64 %810, -2
  %824 = icmp eq i64 %823, 0
  br i1 %824, label %1249, label %805

825:                                              ; preds = %825, %725
  %826 = phi i64 [ 4, %725 ], [ %845, %825 ]
  %827 = phi i32 [ %717, %725 ], [ %841, %825 ]
  %828 = phi i32 [ %714, %725 ], [ %842, %825 ]
  %829 = phi i32 [ %716, %725 ], [ %843, %825 ]
  %830 = phi i32 [ %715, %725 ], [ %844, %825 ]
  %831 = phi i64 [ %726, %725 ], [ %846, %825 ]
  %832 = getelementptr inbounds i32, i32* %326, i64 %826
  %833 = load i32, i32* %832, align 4
  %834 = add i32 %833, %827
  %835 = add i32 %834, %828
  %836 = add i32 %835, %829
  %837 = add i32 %836, %830
  store i32 %837, i32* %832, align 4
  %838 = or i64 %826, 1
  %839 = getelementptr inbounds i32, i32* %326, i64 %838
  %840 = load i32, i32* %839, align 4
  %841 = add i32 %840, %834
  %842 = add i32 %841, %835
  %843 = add i32 %842, %836
  %844 = add i32 %843, %837
  store i32 %844, i32* %839, align 4
  %845 = add nuw nsw i64 %826, 2
  %846 = add i64 %831, -2
  %847 = icmp eq i64 %846, 0
  br i1 %847, label %1261, label %825

848:                                              ; preds = %713
  %849 = bitcast %struct.AVCodecContext** %185 to i8**
  %850 = load i8*, i8** %849, align 8
  call void (i8*, i32, i8*, ...) @av_log(i8* %850, i32 16, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.30, i64 0, i64 0), i32 %619) #8
  br label %1323

851:                                              ; preds = %615
  %852 = icmp sgt i32 %366, 31
  br i1 %852, label %853, label %1232

853:                                              ; preds = %851
  %854 = and i32 %366, -33
  %855 = add nuw nsw i32 %854, 1
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %318) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %318, i8 -86, i64 128, i1 false) #8
  %856 = icmp sgt i32 %854, -1
  br i1 %856, label %857, label %918

857:                                              ; preds = %853
  %858 = icmp eq i32 %491, 0
  %859 = icmp slt i32 %491, 26
  %860 = add nsw i32 %491, -16
  %861 = trunc i32 %860 to i8
  %862 = sub i8 0, %861
  %863 = trunc i32 %491 to i8
  %864 = sub i8 0, %863
  %865 = sub i32 32, %491
  %866 = zext i32 %855 to i64
  br label %867

867:                                              ; preds = %909, %857
  %868 = phi i64 [ 0, %857 ], [ %912, %909 ]
  br i1 %858, label %909, label %869

869:                                              ; preds = %867
  %870 = load i32, i32* %182, align 8
  %871 = load i32, i32* %178, align 8
  %872 = load i8*, i8** %317, align 8
  %873 = lshr i32 %870, 3
  %874 = zext i32 %873 to i64
  %875 = getelementptr inbounds i8, i8* %872, i64 %874
  %876 = bitcast i8* %875 to i32*
  %877 = load i32, i32* %876, align 1
  %878 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %877) #9
  %879 = and i32 %870, 7
  %880 = shl i32 %878, %879
  br i1 %859, label %881, label %886

881:                                              ; preds = %869
  %882 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %864, i32 %880) #9, !srcloc !3
  %883 = add i32 %870, %491
  %884 = icmp ugt i32 %871, %883
  %885 = select i1 %884, i32 %883, i32 %871
  store i32 %885, i32* %182, align 8
  br label %905

886:                                              ; preds = %869
  %887 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %880) #9, !srcloc !3
  %888 = add i32 %870, 16
  %889 = icmp ugt i32 %871, %888
  %890 = select i1 %889, i32 %888, i32 %871
  store i32 %890, i32* %182, align 8
  %891 = shl i32 %887, %860
  %892 = lshr i32 %890, 3
  %893 = zext i32 %892 to i64
  %894 = getelementptr inbounds i8, i8* %872, i64 %893
  %895 = bitcast i8* %894 to i32*
  %896 = load i32, i32* %895, align 1
  %897 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %896) #9, !srcloc !2
  %898 = and i32 %890, 7
  %899 = shl i32 %897, %898
  %900 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %862, i32 %899) #9, !srcloc !3
  %901 = add i32 %890, %860
  %902 = icmp ugt i32 %871, %901
  %903 = select i1 %902, i32 %901, i32 %871
  store i32 %903, i32* %182, align 8
  %904 = or i32 %900, %891
  br label %905

905:                                              ; preds = %886, %881
  %906 = phi i32 [ %882, %881 ], [ %904, %886 ]
  %907 = shl i32 %906, %865
  %908 = ashr i32 %907, %865
  br label %909

909:                                              ; preds = %905, %867
  %910 = phi i32 [ %908, %905 ], [ 0, %867 ]
  %911 = getelementptr inbounds i32, i32* %326, i64 %868
  store i32 %910, i32* %911, align 4
  %912 = add nuw nsw i64 %868, 1
  %913 = icmp eq i64 %912, %866
  br i1 %913, label %914, label %867

914:                                              ; preds = %909
  %915 = load i32, i32* %182, align 8
  %916 = load i32, i32* %178, align 8
  %917 = load i8*, i8** %317, align 8
  br label %918

918:                                              ; preds = %914, %853
  %919 = phi i8* [ %917, %914 ], [ %340, %853 ]
  %920 = phi i32 [ %916, %914 ], [ %348, %853 ]
  %921 = phi i32 [ %915, %914 ], [ %489, %853 ]
  %922 = lshr i32 %921, 3
  %923 = zext i32 %922 to i64
  %924 = getelementptr inbounds i8, i8* %919, i64 %923
  %925 = bitcast i8* %924 to i32*
  %926 = load i32, i32* %925, align 1
  %927 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %926) #9, !srcloc !2
  %928 = and i32 %921, 7
  %929 = shl i32 %927, %928
  %930 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -4, i32 %929) #9, !srcloc !3
  %931 = add i32 %921, 4
  %932 = icmp ugt i32 %920, %931
  %933 = select i1 %932, i32 %931, i32 %920
  store i32 %933, i32* %182, align 8
  %934 = add i32 %930, 1
  %935 = icmp eq i32 %934, 16
  br i1 %935, label %936, label %939

936:                                              ; preds = %918
  %937 = bitcast %struct.AVCodecContext** %185 to i8**
  %938 = load i8*, i8** %937, align 8
  call void (i8*, i32, i8*, ...) @av_log(i8* %938, i32 16, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.35, i64 0, i64 0)) #8
  br label %1230

939:                                              ; preds = %918
  %940 = lshr i32 %933, 3
  %941 = zext i32 %940 to i64
  %942 = getelementptr inbounds i8, i8* %919, i64 %941
  %943 = bitcast i8* %942 to i32*
  %944 = load i32, i32* %943, align 1
  %945 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %944) #9, !srcloc !2
  %946 = and i32 %933, 7
  %947 = shl i32 %945, %946
  %948 = call i32 asm "sarl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -5, i32 %947) #9, !srcloc !4
  %949 = add i32 %933, 5
  %950 = icmp ugt i32 %920, %949
  %951 = select i1 %950, i32 %949, i32 %920
  store i32 %951, i32* %182, align 8
  %952 = icmp slt i32 %948, 0
  br i1 %952, label %958, label %953

953:                                              ; preds = %939
  br i1 %856, label %954, label %982

954:                                              ; preds = %953
  %955 = trunc i32 %934 to i8
  %956 = sub i8 0, %955
  %957 = zext i32 %855 to i64
  br label %961

958:                                              ; preds = %939
  %959 = bitcast %struct.AVCodecContext** %185 to i8**
  %960 = load i8*, i8** %959, align 8
  call void (i8*, i32, i8*, ...) @av_log(i8* %960, i32 16, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.36, i64 0, i64 0), i32 %948) #8
  br label %1230

961:                                              ; preds = %961, %954
  %962 = phi i32 [ %951, %954 ], [ %975, %961 ]
  %963 = phi i64 [ 0, %954 ], [ %980, %961 ]
  %964 = lshr i32 %962, 3
  %965 = zext i32 %964 to i64
  %966 = getelementptr inbounds i8, i8* %919, i64 %965
  %967 = bitcast i8* %966 to i32*
  %968 = load i32, i32* %967, align 1
  %969 = call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %968) #9, !srcloc !2
  %970 = and i32 %962, 7
  %971 = shl i32 %969, %970
  %972 = call i32 asm "sarl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %956, i32 %971) #9, !srcloc !4
  %973 = add i32 %962, %934
  %974 = icmp ugt i32 %920, %973
  %975 = select i1 %974, i32 %973, i32 %920
  store i32 %975, i32* %182, align 8
  %976 = trunc i64 %963 to i32
  %977 = sub i32 %854, %976
  %978 = sext i32 %977 to i64
  %979 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %978
  store i32 %972, i32* %979, align 4
  %980 = add nuw nsw i64 %963, 1
  %981 = icmp eq i64 %980, %957
  br i1 %981, label %982, label %961

982:                                              ; preds = %961, %953
  %983 = call fastcc i32 @decode_residuals(%struct.FLACContext* %18, i32* %326, i32 %855) #8
  %984 = icmp slt i32 %983, 0
  br i1 %984, label %1230, label %985

985:                                              ; preds = %982
  %986 = load i32, i32* %319, align 4
  %987 = icmp eq i32 %986, 0
  br i1 %987, label %991, label %988

988:                                              ; preds = %985
  %989 = load i32, i32* %224, align 8
  %990 = icmp slt i32 %989, 17
  br i1 %990, label %1000, label %1003

991:                                              ; preds = %985
  %992 = icmp slt i32 %491, 17
  br i1 %992, label %993, label %1003

993:                                              ; preds = %991
  %994 = or i32 %855, 1
  %995 = call i32 @llvm.ctlz.i32(i32 %994, i1 true) #8, !range !5
  %996 = xor i32 %995, 31
  %997 = add i32 %491, %996
  %998 = add i32 %997, %934
  %999 = icmp slt i32 %998, 33
  br i1 %999, label %1000, label %1003

1000:                                             ; preds = %993, %988
  %1001 = load void (i32*, i32*, i32, i32, i32)*, void (i32*, i32*, i32, i32, i32)** %322, align 8
  %1002 = load i32, i32* %276, align 8
  call void %1001(i32* %326, i32* nonnull %321, i32 %855, i32 %948, i32 %1002) #8
  br label %1229

1003:                                             ; preds = %993, %991, %988
  %1004 = load void (i32*, i32*, i32, i32, i32)*, void (i32*, i32*, i32, i32, i32)** %320, align 8
  %1005 = load i32, i32* %276, align 8
  call void %1004(i32* %326, i32* nonnull %321, i32 %855, i32 %948, i32 %1005) #8
  %1006 = load i32, i32* %224, align 8
  %1007 = icmp slt i32 %1006, 17
  br i1 %1007, label %1008, label %1229

1008:                                             ; preds = %1003
  %1009 = load i32, i32* %276, align 8
  %1010 = add nsw i32 %491, -1
  %1011 = shl i32 1, %1010
  %1012 = icmp sgt i32 %1009, %855
  br i1 %1012, label %1013, label %1229

1013:                                             ; preds = %1008
  %1014 = sext i32 %855 to i64
  %1015 = sext i32 %1009 to i64
  %1016 = sub nsw i64 %1015, %1014
  %1017 = xor i64 %1014, -1
  %1018 = add nsw i64 %1017, %1015
  %1019 = and i64 %1016, 3
  %1020 = icmp ult i64 %1018, 3
  br i1 %1020, label %1049, label %1021

1021:                                             ; preds = %1013
  %1022 = sub nsw i64 %1016, %1019
  br label %1023

1023:                                             ; preds = %1023, %1021
  %1024 = phi i64 [ %1014, %1021 ], [ %1046, %1023 ]
  %1025 = phi i32 [ 0, %1021 ], [ %1045, %1023 ]
  %1026 = phi i64 [ %1022, %1021 ], [ %1047, %1023 ]
  %1027 = getelementptr inbounds i32, i32* %326, i64 %1024
  %1028 = load i32, i32* %1027, align 4
  %1029 = add i32 %1028, %1011
  %1030 = or i32 %1029, %1025
  %1031 = add nsw i64 %1024, 1
  %1032 = getelementptr inbounds i32, i32* %326, i64 %1031
  %1033 = load i32, i32* %1032, align 4
  %1034 = add i32 %1033, %1011
  %1035 = or i32 %1034, %1030
  %1036 = add nsw i64 %1024, 2
  %1037 = getelementptr inbounds i32, i32* %326, i64 %1036
  %1038 = load i32, i32* %1037, align 4
  %1039 = add i32 %1038, %1011
  %1040 = or i32 %1039, %1035
  %1041 = add nsw i64 %1024, 3
  %1042 = getelementptr inbounds i32, i32* %326, i64 %1041
  %1043 = load i32, i32* %1042, align 4
  %1044 = add i32 %1043, %1011
  %1045 = or i32 %1044, %1040
  %1046 = add nsw i64 %1024, 4
  %1047 = add i64 %1026, -4
  %1048 = icmp eq i64 %1047, 0
  br i1 %1048, label %1049, label %1023

1049:                                             ; preds = %1023, %1013
  %1050 = phi i32 [ undef, %1013 ], [ %1045, %1023 ]
  %1051 = phi i64 [ %1014, %1013 ], [ %1046, %1023 ]
  %1052 = phi i32 [ 0, %1013 ], [ %1045, %1023 ]
  %1053 = icmp eq i64 %1019, 0
  br i1 %1053, label %1065, label %1054

1054:                                             ; preds = %1049, %1054
  %1055 = phi i64 [ %1062, %1054 ], [ %1051, %1049 ]
  %1056 = phi i32 [ %1061, %1054 ], [ %1052, %1049 ]
  %1057 = phi i64 [ %1063, %1054 ], [ %1019, %1049 ]
  %1058 = getelementptr inbounds i32, i32* %326, i64 %1055
  %1059 = load i32, i32* %1058, align 4
  %1060 = add i32 %1059, %1011
  %1061 = or i32 %1060, %1056
  %1062 = add nsw i64 %1055, 1
  %1063 = add i64 %1057, -1
  %1064 = icmp eq i64 %1063, 0
  br i1 %1064, label %1065, label %1054, !llvm.loop !6

1065:                                             ; preds = %1054, %1049
  %1066 = phi i32 [ %1050, %1049 ], [ %1061, %1054 ]
  %1067 = shl nsw i32 %1011, 1
  %1068 = icmp ult i32 %1066, %1067
  br i1 %1068, label %1229, label %1069

1069:                                             ; preds = %1065
  %1070 = zext i32 %948 to i64
  %1071 = zext i32 %855 to i64
  %1072 = add nsw i64 %1071, -1
  %1073 = and i64 %1071, 3
  %1074 = icmp ult i64 %1072, 3
  %1075 = sub nsw i64 %1071, %1073
  %1076 = icmp eq i64 %1073, 0
  br label %1077

1077:                                             ; preds = %1150, %1069
  %1078 = phi i64 [ %1015, %1069 ], [ %1079, %1150 ]
  %1079 = add nsw i64 %1078, -1
  br i1 %856, label %1080, label %1150

1080:                                             ; preds = %1077
  %1081 = trunc i64 %1079 to i32
  %1082 = sub i32 %1081, %855
  %1083 = sext i32 %1082 to i64
  br i1 %1074, label %1130, label %1084

1084:                                             ; preds = %1080, %1084
  %1085 = phi i64 [ %1127, %1084 ], [ 0, %1080 ]
  %1086 = phi i64 [ %1126, %1084 ], [ 0, %1080 ]
  %1087 = phi i64 [ %1128, %1084 ], [ %1075, %1080 ]
  %1088 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %1085
  %1089 = load i32, i32* %1088, align 16
  %1090 = sext i32 %1089 to i64
  %1091 = add nsw i64 %1085, %1083
  %1092 = getelementptr inbounds i32, i32* %326, i64 %1091
  %1093 = load i32, i32* %1092, align 4
  %1094 = sext i32 %1093 to i64
  %1095 = mul nsw i64 %1094, %1090
  %1096 = add nsw i64 %1095, %1086
  %1097 = or i64 %1085, 1
  %1098 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %1097
  %1099 = load i32, i32* %1098, align 4
  %1100 = sext i32 %1099 to i64
  %1101 = add nsw i64 %1097, %1083
  %1102 = getelementptr inbounds i32, i32* %326, i64 %1101
  %1103 = load i32, i32* %1102, align 4
  %1104 = sext i32 %1103 to i64
  %1105 = mul nsw i64 %1104, %1100
  %1106 = add nsw i64 %1105, %1096
  %1107 = or i64 %1085, 2
  %1108 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %1107
  %1109 = load i32, i32* %1108, align 8
  %1110 = sext i32 %1109 to i64
  %1111 = add nsw i64 %1107, %1083
  %1112 = getelementptr inbounds i32, i32* %326, i64 %1111
  %1113 = load i32, i32* %1112, align 4
  %1114 = sext i32 %1113 to i64
  %1115 = mul nsw i64 %1114, %1110
  %1116 = add nsw i64 %1115, %1106
  %1117 = or i64 %1085, 3
  %1118 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %1117
  %1119 = load i32, i32* %1118, align 4
  %1120 = sext i32 %1119 to i64
  %1121 = add nsw i64 %1117, %1083
  %1122 = getelementptr inbounds i32, i32* %326, i64 %1121
  %1123 = load i32, i32* %1122, align 4
  %1124 = sext i32 %1123 to i64
  %1125 = mul nsw i64 %1124, %1120
  %1126 = add nsw i64 %1125, %1116
  %1127 = add nuw nsw i64 %1085, 4
  %1128 = add i64 %1087, -4
  %1129 = icmp eq i64 %1128, 0
  br i1 %1129, label %1130, label %1084

1130:                                             ; preds = %1084, %1080
  %1131 = phi i64 [ undef, %1080 ], [ %1126, %1084 ]
  %1132 = phi i64 [ 0, %1080 ], [ %1127, %1084 ]
  %1133 = phi i64 [ 0, %1080 ], [ %1126, %1084 ]
  br i1 %1076, label %1150, label %1134

1134:                                             ; preds = %1130, %1134
  %1135 = phi i64 [ %1147, %1134 ], [ %1132, %1130 ]
  %1136 = phi i64 [ %1146, %1134 ], [ %1133, %1130 ]
  %1137 = phi i64 [ %1148, %1134 ], [ %1073, %1130 ]
  %1138 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %1135
  %1139 = load i32, i32* %1138, align 4
  %1140 = sext i32 %1139 to i64
  %1141 = add nsw i64 %1135, %1083
  %1142 = getelementptr inbounds i32, i32* %326, i64 %1141
  %1143 = load i32, i32* %1142, align 4
  %1144 = sext i32 %1143 to i64
  %1145 = mul nsw i64 %1144, %1140
  %1146 = add nsw i64 %1145, %1136
  %1147 = add nuw nsw i64 %1135, 1
  %1148 = add i64 %1137, -1
  %1149 = icmp eq i64 %1148, 0
  br i1 %1149, label %1150, label %1134, !llvm.loop !8

1150:                                             ; preds = %1130, %1134, %1077
  %1151 = phi i64 [ 0, %1077 ], [ %1131, %1130 ], [ %1146, %1134 ]
  %1152 = ashr i64 %1151, %1070
  %1153 = getelementptr inbounds i32, i32* %326, i64 %1079
  %1154 = load i32, i32* %1153, align 4
  %1155 = trunc i64 %1152 to i32
  %1156 = sub i32 %1154, %1155
  store i32 %1156, i32* %1153, align 4
  %1157 = icmp sgt i64 %1079, %1014
  br i1 %1157, label %1077, label %1158

1158:                                             ; preds = %1150
  %1159 = add nsw i64 %1071, -1
  %1160 = and i64 %1071, 3
  %1161 = icmp ult i64 %1159, 3
  %1162 = sub nsw i64 %1071, %1160
  %1163 = icmp eq i64 %1160, 0
  br label %1164

1164:                                             ; preds = %1158, %1219
  %1165 = phi i32 [ %1226, %1219 ], [ %855, %1158 ]
  %1166 = phi i32* [ %1227, %1219 ], [ %326, %1158 ]
  br i1 %856, label %1167, label %1219

1167:                                             ; preds = %1164
  br i1 %1161, label %1202, label %1168

1168:                                             ; preds = %1167, %1168
  %1169 = phi i64 [ %1199, %1168 ], [ 0, %1167 ]
  %1170 = phi i32 [ %1198, %1168 ], [ 0, %1167 ]
  %1171 = phi i64 [ %1200, %1168 ], [ %1162, %1167 ]
  %1172 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %1169
  %1173 = load i32, i32* %1172, align 16
  %1174 = getelementptr inbounds i32, i32* %1166, i64 %1169
  %1175 = load i32, i32* %1174, align 4
  %1176 = mul i32 %1175, %1173
  %1177 = add i32 %1176, %1170
  %1178 = or i64 %1169, 1
  %1179 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %1178
  %1180 = load i32, i32* %1179, align 4
  %1181 = getelementptr inbounds i32, i32* %1166, i64 %1178
  %1182 = load i32, i32* %1181, align 4
  %1183 = mul i32 %1182, %1180
  %1184 = add i32 %1183, %1177
  %1185 = or i64 %1169, 2
  %1186 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %1185
  %1187 = load i32, i32* %1186, align 8
  %1188 = getelementptr inbounds i32, i32* %1166, i64 %1185
  %1189 = load i32, i32* %1188, align 4
  %1190 = mul i32 %1189, %1187
  %1191 = add i32 %1190, %1184
  %1192 = or i64 %1169, 3
  %1193 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %1192
  %1194 = load i32, i32* %1193, align 4
  %1195 = getelementptr inbounds i32, i32* %1166, i64 %1192
  %1196 = load i32, i32* %1195, align 4
  %1197 = mul i32 %1196, %1194
  %1198 = add i32 %1197, %1191
  %1199 = add nuw nsw i64 %1169, 4
  %1200 = add i64 %1171, -4
  %1201 = icmp eq i64 %1200, 0
  br i1 %1201, label %1202, label %1168

1202:                                             ; preds = %1168, %1167
  %1203 = phi i32 [ undef, %1167 ], [ %1198, %1168 ]
  %1204 = phi i64 [ 0, %1167 ], [ %1199, %1168 ]
  %1205 = phi i32 [ 0, %1167 ], [ %1198, %1168 ]
  br i1 %1163, label %1219, label %1206

1206:                                             ; preds = %1202, %1206
  %1207 = phi i64 [ %1216, %1206 ], [ %1204, %1202 ]
  %1208 = phi i32 [ %1215, %1206 ], [ %1205, %1202 ]
  %1209 = phi i64 [ %1217, %1206 ], [ %1160, %1202 ]
  %1210 = getelementptr inbounds [32 x i32], [32 x i32]* %5, i64 0, i64 %1207
  %1211 = load i32, i32* %1210, align 4
  %1212 = getelementptr inbounds i32, i32* %1166, i64 %1207
  %1213 = load i32, i32* %1212, align 4
  %1214 = mul i32 %1213, %1211
  %1215 = add i32 %1214, %1208
  %1216 = add nuw nsw i64 %1207, 1
  %1217 = add i64 %1209, -1
  %1218 = icmp eq i64 %1217, 0
  br i1 %1218, label %1219, label %1206, !llvm.loop !9

1219:                                             ; preds = %1202, %1206, %1164
  %1220 = phi i64 [ 0, %1164 ], [ %1071, %1206 ], [ %1071, %1202 ]
  %1221 = phi i32 [ 0, %1164 ], [ %1203, %1202 ], [ %1215, %1206 ]
  %1222 = ashr i32 %1221, %948
  %1223 = getelementptr inbounds i32, i32* %1166, i64 %1220
  %1224 = load i32, i32* %1223, align 4
  %1225 = add i32 %1224, %1222
  store i32 %1225, i32* %1223, align 4
  %1226 = add nsw i32 %1165, 1
  %1227 = getelementptr inbounds i32, i32* %1166, i64 1
  %1228 = icmp eq i32 %1226, %1009
  br i1 %1228, label %1229, label %1164

1229:                                             ; preds = %1219, %1065, %1008, %1003, %1000
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %318) #8
  br label %1292

1230:                                             ; preds = %982, %958, %936
  %1231 = phi i32 [ -1094995529, %936 ], [ -1094995529, %958 ], [ %983, %982 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %318) #8
  br label %1323

1232:                                             ; preds = %851
  %1233 = bitcast %struct.AVCodecContext** %185 to i8**
  %1234 = load i8*, i8** %1233, align 8
  call void (i8*, i32, i8*, ...) @av_log(i8* %1234, i32 16, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.29, i64 0, i64 0)) #8
  br label %1323

1235:                                             ; preds = %756, %748
  %1236 = phi i64 [ 1, %748 ], [ %775, %756 ]
  %1237 = phi i32 [ %687, %748 ], [ %774, %756 ]
  %1238 = icmp eq i64 %752, 0
  br i1 %1238, label %1292, label %1239

1239:                                             ; preds = %1235, %1239
  %1240 = phi i64 [ %1246, %1239 ], [ %1236, %1235 ]
  %1241 = phi i32 [ %1245, %1239 ], [ %1237, %1235 ]
  %1242 = phi i64 [ %1247, %1239 ], [ %752, %1235 ]
  %1243 = getelementptr inbounds i32, i32* %326, i64 %1240
  %1244 = load i32, i32* %1243, align 4
  %1245 = add i32 %1244, %1241
  store i32 %1245, i32* %1243, align 4
  %1246 = add nuw nsw i64 %1240, 1
  %1247 = add i64 %1242, -1
  %1248 = icmp eq i64 %1247, 0
  br i1 %1248, label %1292, label %1239, !llvm.loop !10

1249:                                             ; preds = %805, %729
  %1250 = phi i64 [ 3, %729 ], [ %822, %805 ]
  %1251 = phi i32 [ %702, %729 ], [ %819, %805 ]
  %1252 = phi i32 [ %694, %729 ], [ %820, %805 ]
  %1253 = phi i32 [ %687, %729 ], [ %821, %805 ]
  %1254 = icmp eq i64 %732, 0
  br i1 %1254, label %1292, label %1255

1255:                                             ; preds = %1249
  %1256 = getelementptr inbounds i32, i32* %326, i64 %1250
  %1257 = load i32, i32* %1256, align 4
  %1258 = add i32 %1257, %1251
  %1259 = add i32 %1258, %1252
  %1260 = add i32 %1259, %1253
  store i32 %1260, i32* %1256, align 4
  br label %1292

1261:                                             ; preds = %825, %720
  %1262 = phi i64 [ 4, %720 ], [ %845, %825 ]
  %1263 = phi i32 [ %717, %720 ], [ %841, %825 ]
  %1264 = phi i32 [ %714, %720 ], [ %842, %825 ]
  %1265 = phi i32 [ %716, %720 ], [ %843, %825 ]
  %1266 = phi i32 [ %715, %720 ], [ %844, %825 ]
  %1267 = icmp eq i64 %723, 0
  br i1 %1267, label %1292, label %1268

1268:                                             ; preds = %1261
  %1269 = getelementptr inbounds i32, i32* %326, i64 %1262
  %1270 = load i32, i32* %1269, align 4
  %1271 = add i32 %1270, %1263
  %1272 = add i32 %1271, %1264
  %1273 = add i32 %1272, %1265
  %1274 = add i32 %1273, %1266
  store i32 %1274, i32* %1269, align 4
  br label %1292

1275:                                             ; preds = %778, %738
  %1276 = phi i64 [ 2, %738 ], [ %802, %778 ]
  %1277 = phi i32 [ %694, %738 ], [ %800, %778 ]
  %1278 = phi i32 [ %687, %738 ], [ %801, %778 ]
  %1279 = icmp eq i64 %742, 0
  br i1 %1279, label %1292, label %1280

1280:                                             ; preds = %1275, %1280
  %1281 = phi i64 [ %1289, %1280 ], [ %1276, %1275 ]
  %1282 = phi i32 [ %1287, %1280 ], [ %1277, %1275 ]
  %1283 = phi i32 [ %1288, %1280 ], [ %1278, %1275 ]
  %1284 = phi i64 [ %1290, %1280 ], [ %742, %1275 ]
  %1285 = getelementptr inbounds i32, i32* %326, i64 %1281
  %1286 = load i32, i32* %1285, align 4
  %1287 = add i32 %1286, %1282
  %1288 = add i32 %1287, %1283
  store i32 %1288, i32* %1285, align 4
  %1289 = add nuw nsw i64 %1281, 1
  %1290 = add i64 %1284, -1
  %1291 = icmp eq i64 %1290, 0
  br i1 %1291, label %1292, label %1280, !llvm.loop !11

1292:                                             ; preds = %608, %559, %1275, %1280, %1268, %1261, %1255, %1249, %1235, %1239, %1229, %746, %736, %727, %718, %713, %555, %497
  %1293 = icmp ne i32 %490, 0
  %1294 = icmp slt i32 %490, 32
  %1295 = and i1 %1293, %1294
  br i1 %1295, label %1296, label %1308

1296:                                             ; preds = %1292
  %1297 = load i32, i32* %276, align 8
  %1298 = icmp sgt i32 %1297, 0
  br i1 %1298, label %1299, label %1308

1299:                                             ; preds = %1296, %1299
  %1300 = phi i64 [ %1304, %1299 ], [ 0, %1296 ]
  %1301 = getelementptr inbounds i32, i32* %326, i64 %1300
  %1302 = load i32, i32* %1301, align 4
  %1303 = shl i32 %1302, %490
  store i32 %1303, i32* %1301, align 4
  %1304 = add nuw nsw i64 %1300, 1
  %1305 = load i32, i32* %276, align 8
  %1306 = sext i32 %1305 to i64
  %1307 = icmp slt i64 %1304, %1306
  br i1 %1307, label %1299, label %1308

1308:                                             ; preds = %1299, %1296, %1292
  %1309 = add nuw nsw i64 %324, 1
  %1310 = load i32, i32* %193, align 4
  %1311 = sext i32 %1310 to i64
  %1312 = icmp slt i64 %1309, %1311
  br i1 %1312, label %323, label %1313

1313:                                             ; preds = %1308, %307
  %1314 = load i32, i32* %182, align 8
  %1315 = sub nsw i32 0, %1314
  %1316 = and i32 %1315, 7
  %1317 = icmp eq i32 %1316, 0
  %1318 = load i32, i32* %178, align 8
  br i1 %1317, label %1327, label %1319

1319:                                             ; preds = %1313
  %1320 = add i32 %1316, %1314
  %1321 = icmp ugt i32 %1318, %1320
  %1322 = select i1 %1321, i32 %1320, i32 %1318
  store i32 %1322, i32* %182, align 8
  br label %1327

1323:                                             ; preds = %679, %189, %238, %272, %284, %231, %204, %296, %848, %1230, %485, %1232, %493, %354
  %1324 = phi i32 [ -1094995529, %354 ], [ -1163346256, %493 ], [ -1094995529, %1232 ], [ -1094995529, %485 ], [ %1231, %1230 ], [ -1094995529, %848 ], [ %297, %296 ], [ %208, %204 ], [ -1094995529, %231 ], [ -1094995529, %284 ], [ -1094995529, %272 ], [ -1094995529, %238 ], [ %187, %189 ], [ %680, %679 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %184) #8
  %1325 = bitcast %struct.AVCodecContext** %185 to i8**
  %1326 = load i8*, i8** %1325, align 8
  call void (i8*, i32, i8*, ...) @av_log(i8* %1326, i32 16, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0)) #8
  br label %1382

1327:                                             ; preds = %1319, %1313
  %1328 = phi i32 [ %1322, %1319 ], [ %1314, %1313 ]
  %1329 = add i32 %1328, 16
  %1330 = icmp ugt i32 %1318, %1329
  %1331 = select i1 %1330, i32 %1329, i32 %1318
  store i32 %1331, i32* %182, align 8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %184) #8
  %1332 = sdiv i32 %1331, 8
  %1333 = load %struct.AVCodecContext*, %struct.AVCodecContext** %185, align 8
  %1334 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1333, i64 0, i32 135
  %1335 = load i32, i32* %1334, align 8
  %1336 = and i32 %1335, 131073
  %1337 = icmp eq i32 %1336, 0
  br i1 %1337, label %1353, label %1338

1338:                                             ; preds = %1327
  %1339 = call i32* @av_crc_get_table(i32 1) #8
  %1340 = sext i32 %1332 to i64
  %1341 = call i32 @av_crc(i32* %1339, i32 0, i8* nonnull %13, i64 %1340) #10
  %1342 = icmp eq i32 %1341, 0
  br i1 %1342, label %1353, label %1343

1343:                                             ; preds = %1338
  %1344 = bitcast %struct.AVCodecContext** %185 to i8**
  %1345 = load i8*, i8** %1344, align 8
  %1346 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %3, i64 0, i32 1
  %1347 = load i64, i64* %1346, align 8
  call void (i8*, i32, i8*, ...) @av_log(i8* %1345, i32 16, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i64 0, i64 0), i64 %1347) #8
  %1348 = load %struct.AVCodecContext*, %struct.AVCodecContext** %185, align 8
  %1349 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1348, i64 0, i32 135
  %1350 = load i32, i32* %1349, align 8
  %1351 = and i32 %1350, 8
  %1352 = icmp eq i32 %1351, 0
  br i1 %1352, label %1353, label %1382

1353:                                             ; preds = %1343, %1338, %1327
  %1354 = load i32, i32* %276, align 8
  %1355 = getelementptr inbounds i8, i8* %1, i64 112
  %1356 = bitcast i8* %1355 to i32*
  store i32 %1354, i32* %1356, align 8
  %1357 = call i32 @ff_thread_get_buffer(%struct.AVCodecContext* %0, %struct.ThreadFrame* nonnull %7, i32 0) #8
  %1358 = icmp slt i32 %1357, 0
  br i1 %1358, label %1382, label %1359

1359:                                             ; preds = %1353
  %1360 = load i32, i32* %223, align 8
  %1361 = sext i32 %1360 to i64
  %1362 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 12, i32 0, i64 %1361
  %1363 = load void (i8**, i32**, i32, i32, i32)*, void (i8**, i32**, i32, i32, i32)** %1362, align 8
  %1364 = bitcast i8* %1 to i8**
  %1365 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 8, i64 0
  %1366 = load i32, i32* %193, align 4
  %1367 = load i32, i32* %276, align 8
  %1368 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %18, i64 0, i32 5
  %1369 = load i32, i32* %1368, align 4
  call void %1363(i8** %1364, i32** %1365, i32 %1366, i32 %1367, i32 %1369) #8
  %1370 = icmp sgt i32 %1332, %15
  br i1 %1370, label %1371, label %1375

1371:                                             ; preds = %1359
  %1372 = bitcast %struct.AVCodecContext** %185 to i8**
  %1373 = load i8*, i8** %1372, align 8
  %1374 = sub nsw i32 %1332, %15
  call void (i8*, i32, i8*, ...) @av_log(i8* %1373, i32 16, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i32 %1374) #8
  br label %1382

1375:                                             ; preds = %1359
  %1376 = icmp slt i32 %1332, %15
  br i1 %1376, label %1377, label %1381

1377:                                             ; preds = %1375
  %1378 = bitcast %struct.AVCodecContext** %185 to i8**
  %1379 = load i8*, i8** %1378, align 8
  %1380 = sub nsw i32 %15, %1332
  call void (i8*, i32, i8*, ...) @av_log(i8* %1379, i32 48, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i64 0, i64 0), i32 %1380, i32 %15) #8
  br label %1381

1381:                                             ; preds = %1377, %1375
  store i32 1, i32* %2, align 4
  br label %1382

1382:                                             ; preds = %137, %132, %164, %37, %159, %1353, %1343, %47, %1381, %1371, %1323, %122, %43, %33
  %1383 = phi i32 [ %15, %43 ], [ %123, %122 ], [ %1324, %1323 ], [ -1094995529, %1371 ], [ %1332, %1381 ], [ %15, %33 ], [ %15, %47 ], [ -1094995529, %164 ], [ -1094995529, %1343 ], [ %1357, %1353 ], [ %163, %159 ], [ %15, %37 ], [ -1094995529, %132 ], [ -1094995529, %137 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #8
  ret i32 %1383
}

; Function Attrs: cold nounwind optsize ssp uwtable
define internal i32 @flac_decode_close(%struct.AVCodecContext* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i64 0, i32 6
  %3 = bitcast i8** %2 to %struct.FLACContext**
  %4 = load %struct.FLACContext*, %struct.FLACContext** %3, align 8
  %5 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %4, i64 0, i32 9
  %6 = bitcast i8** %5 to i8*
  tail call void @av_freep(i8* %6) #8
  ret i32 0
}

declare i8* @av_default_item_name(i8*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare i32 @ff_flac_is_extradata_valid(%struct.AVCodecContext*, i32*, i8**) local_unnamed_addr #2

declare i32 @ff_flac_parse_streaminfo(%struct.AVCodecContext*, %struct.FLACStreaminfo*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @allocate_buffers(%struct.FLACContext*) unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %0, i64 0, i32 1, i32 3
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.7, i64 0, i64 0), i32 140) #8
  tail call void @abort() #11
  unreachable

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %0, i64 0, i32 1, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = tail call i32 @av_samples_get_buffer_size(i32* null, i32 %8, i32 %3, i32 7, i32 0) #8
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %26, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %0, i64 0, i32 9
  %13 = bitcast i8** %12 to i8*
  %14 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %0, i64 0, i32 10
  %15 = sext i32 %9 to i64
  tail call void @av_fast_malloc(i8* %13, i32* %14, i64 %15) #8
  %16 = load i8*, i8** %12, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %26, label %18

18:                                               ; preds = %11
  %19 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %0, i64 0, i32 8, i64 0
  %20 = bitcast i32** %19 to i8**
  %21 = load i32, i32* %7, align 4
  %22 = load i32, i32* %2, align 4
  %23 = tail call i32 @av_samples_fill_arrays(i8** %20, i32* null, i8* nonnull %16, i32 %21, i32 %22, i32 7, i32 0) #8
  %24 = icmp slt i32 %23, 0
  %25 = select i1 %24, i32 %23, i32 0
  br label %26

26:                                               ; preds = %11, %6, %18
  %27 = phi i32 [ %25, %18 ], [ %9, %6 ], [ -12, %11 ]
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @flac_set_bps(%struct.FLACContext* nocapture) unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %0, i64 0, i32 2
  %3 = load %struct.AVCodecContext*, %struct.AVCodecContext** %2, align 8
  %4 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %3, i64 0, i32 92
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %0, i64 0, i32 1, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = icmp sgt i32 %7, 16
  %9 = tail call i32 @av_get_bytes_per_sample(i32 %5) #8
  %10 = icmp sgt i32 %9, 2
  %11 = tail call i32 @av_sample_fmt_is_planar(i32 %5) #8
  %12 = or i1 %8, %10
  %13 = icmp ne i32 %11, 0
  %14 = load %struct.AVCodecContext*, %struct.AVCodecContext** %2, align 8
  %15 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %14, i64 0, i32 84
  %16 = select i1 %13, i32 6, i32 1
  %17 = select i1 %13, i32 7, i32 2
  %18 = select i1 %12, i32 %17, i32 %16
  %19 = select i1 %12, i32 32, i32 16
  store i32 %18, i32* %15, align 8
  %20 = load i32, i32* %6, align 8
  %21 = sub nsw i32 %19, %20
  %22 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %0, i64 0, i32 5
  store i32 %21, i32* %22, align 4
  ret void
}

declare void @ff_flacdsp_init(%struct.FLACDSPContext*, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #4

declare i32 @av_samples_get_buffer_size(i32*, i32, i32, i32, i32) local_unnamed_addr #2

declare void @av_fast_malloc(i8*, i32*, i64) local_unnamed_addr #2

declare i32 @av_samples_fill_arrays(i8**, i32*, i8*, i32, i32, i32, i32) local_unnamed_addr #2

declare i32 @av_get_bytes_per_sample(i32) local_unnamed_addr #2

declare i32 @av_sample_fmt_is_planar(i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare i32 @ff_flac_get_max_frame_size(i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind readonly
declare i32 @av_crc(i32*, i32, i8*, i64) local_unnamed_addr #5

declare i32* @av_crc_get_table(i32) local_unnamed_addr #2

declare i32 @ff_thread_get_buffer(%struct.AVCodecContext*, %struct.ThreadFrame*, i32) local_unnamed_addr #2

declare i32 @ff_flac_decode_frame_header(%struct.AVCodecContext*, %struct.GetBitContext*, %struct.FLACFrameInfo*, i32) local_unnamed_addr #2

declare void @ff_flac_set_channel_layout(%struct.AVCodecContext*) local_unnamed_addr #2

declare void @avpriv_report_missing_feature(i8*, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @decode_residuals(%struct.FLACContext* nocapture, i32* nocapture, i32) unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %0, i64 0, i32 3
  %5 = bitcast %struct.GetBitContext* %4 to i8*
  %6 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %0, i64 0, i32 3, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %0, i64 0, i32 3, i32 1
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %0, i64 0, i32 3, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %0, i64 0, i32 3, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %0, i64 0, i32 3, i32 4
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds i8, i8* %5, i64 28
  %18 = bitcast i8* %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = lshr i32 %12, 3
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %7, i64 %21
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 1
  %25 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %24) #9, !srcloc !2
  %26 = and i32 %12, 7
  %27 = shl i32 %25, %26
  %28 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -2, i32 %27) #9, !srcloc !3
  %29 = add i32 %12, 2
  %30 = icmp ugt i32 %16, %29
  %31 = select i1 %30, i32 %29, i32 %16
  %32 = lshr i32 %31, 3
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %7, i64 %33
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 1
  %37 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %36) #9, !srcloc !2
  %38 = and i32 %31, 7
  %39 = shl i32 %37, %38
  %40 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -4, i32 %39) #9, !srcloc !3
  %41 = add i32 %31, 4
  %42 = icmp ugt i32 %16, %41
  %43 = select i1 %42, i32 %41, i32 %16
  %44 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %0, i64 0, i32 4
  %45 = load i32, i32* %44, align 8
  %46 = ashr i32 %45, %40
  %47 = add nsw i32 %28, 4
  %48 = shl nsw i32 -1, %47
  %49 = xor i32 %48, -1
  %50 = sext i32 %2 to i64
  %51 = getelementptr inbounds i32, i32* %1, i64 %50
  %52 = icmp sgt i32 %28, 1
  br i1 %52, label %53, label %57

53:                                               ; preds = %3
  %54 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %0, i64 0, i32 2
  %55 = bitcast %struct.AVCodecContext** %54 to i8**
  %56 = load i8*, i8** %55, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %56, i32 16, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.31, i64 0, i64 0), i32 %28) #8
  br label %327

57:                                               ; preds = %3
  %58 = shl i32 %46, %40
  %59 = icmp eq i32 %58, %45
  br i1 %59, label %64, label %60

60:                                               ; preds = %57
  %61 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %0, i64 0, i32 2
  %62 = bitcast %struct.AVCodecContext** %61 to i8**
  %63 = load i8*, i8** %62, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %63, i32 16, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.32, i64 0, i64 0), i32 %40, i32 %45) #8
  br label %327

64:                                               ; preds = %57
  %65 = icmp slt i32 %46, %2
  br i1 %65, label %72, label %66

66:                                               ; preds = %64
  %67 = shl i32 1, %40
  %68 = icmp eq i32 %40, 31
  br i1 %68, label %325, label %69

69:                                               ; preds = %66
  %70 = trunc i32 %47 to i8
  %71 = sub i8 0, %70
  br label %76

72:                                               ; preds = %64
  %73 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %0, i64 0, i32 2
  %74 = bitcast %struct.AVCodecContext** %73 to i8**
  %75 = load i8*, i8** %74, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %75, i32 16, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.33, i64 0, i64 0), i32 %2, i32 %46) #8
  br label %327

76:                                               ; preds = %69, %320
  %77 = phi i32 [ 0, %69 ], [ %323, %320 ]
  %78 = phi i32 [ %2, %69 ], [ 0, %320 ]
  %79 = phi i32* [ %51, %69 ], [ %322, %320 ]
  %80 = phi i32 [ %43, %69 ], [ %321, %320 ]
  %81 = lshr i32 %80, 3
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %7, i64 %82
  %84 = bitcast i8* %83 to i32*
  %85 = load i32, i32* %84, align 1
  %86 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %85) #9, !srcloc !2
  %87 = and i32 %80, 7
  %88 = shl i32 %86, %87
  %89 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %71, i32 %88) #9, !srcloc !3
  %90 = add i32 %80, %47
  %91 = icmp ugt i32 %16, %90
  %92 = select i1 %91, i32 %90, i32 %16
  %93 = icmp eq i32 %89, %49
  br i1 %93, label %94, label %165

94:                                               ; preds = %76
  %95 = lshr i32 %92, 3
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds i8, i8* %7, i64 %96
  %98 = bitcast i8* %97 to i32*
  %99 = load i32, i32* %98, align 1
  %100 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %99) #9, !srcloc !2
  %101 = and i32 %92, 7
  %102 = shl i32 %100, %101
  %103 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -5, i32 %102) #9, !srcloc !3
  %104 = add i32 %92, 5
  %105 = icmp ugt i32 %16, %104
  %106 = select i1 %105, i32 %104, i32 %16
  %107 = icmp slt i32 %78, %46
  br i1 %107, label %108, label %320

108:                                              ; preds = %94
  %109 = icmp eq i32 %103, 0
  %110 = icmp slt i32 %103, 26
  %111 = add nsw i32 %103, -16
  %112 = trunc i32 %111 to i8
  %113 = sub i8 0, %112
  %114 = trunc i32 %103 to i8
  %115 = sub i8 0, %114
  %116 = sub i32 32, %103
  br label %117

117:                                              ; preds = %159, %108
  %118 = phi i32 [ %78, %108 ], [ %163, %159 ]
  %119 = phi i32* [ %79, %108 ], [ %162, %159 ]
  %120 = phi i32 [ %106, %108 ], [ %160, %159 ]
  br i1 %109, label %159, label %121

121:                                              ; preds = %117
  %122 = lshr i32 %120, 3
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %7, i64 %123
  %125 = bitcast i8* %124 to i32*
  %126 = load i32, i32* %125, align 1
  %127 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %126) #9
  %128 = and i32 %120, 7
  %129 = shl i32 %127, %128
  br i1 %110, label %130, label %135

130:                                              ; preds = %121
  %131 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %115, i32 %129) #9, !srcloc !3
  %132 = add i32 %120, %103
  %133 = icmp ugt i32 %16, %132
  %134 = select i1 %133, i32 %132, i32 %16
  br label %154

135:                                              ; preds = %121
  %136 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %129) #9, !srcloc !3
  %137 = add i32 %120, 16
  %138 = icmp ugt i32 %16, %137
  %139 = select i1 %138, i32 %137, i32 %16
  %140 = shl i32 %136, %111
  %141 = lshr i32 %139, 3
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds i8, i8* %7, i64 %142
  %144 = bitcast i8* %143 to i32*
  %145 = load i32, i32* %144, align 1
  %146 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %145) #9, !srcloc !2
  %147 = and i32 %139, 7
  %148 = shl i32 %146, %147
  %149 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %113, i32 %148) #9, !srcloc !3
  %150 = add i32 %139, %111
  %151 = icmp ugt i32 %16, %150
  %152 = select i1 %151, i32 %150, i32 %16
  %153 = or i32 %149, %140
  br label %154

154:                                              ; preds = %135, %130
  %155 = phi i32 [ %134, %130 ], [ %152, %135 ]
  %156 = phi i32 [ %131, %130 ], [ %153, %135 ]
  %157 = shl i32 %156, %116
  %158 = ashr i32 %157, %116
  br label %159

159:                                              ; preds = %117, %154
  %160 = phi i32 [ %120, %117 ], [ %155, %154 ]
  %161 = phi i32 [ 0, %117 ], [ %158, %154 ]
  %162 = getelementptr inbounds i32, i32* %119, i64 1
  store i32 %161, i32* %119, align 4
  %163 = add nsw i32 %118, 1
  %164 = icmp eq i32 %163, %46
  br i1 %164, label %320, label %117

165:                                              ; preds = %76
  %166 = icmp eq i32 %89, 0
  %167 = lshr i32 2147483647, %89
  %168 = add nuw nsw i32 %167, 2
  %169 = select i1 %166, i32 2147483647, i32 %168
  %170 = icmp slt i32 %78, %46
  br i1 %170, label %171, label %320

171:                                              ; preds = %165
  %172 = icmp slt i32 %169, 25
  %173 = add nsw i32 %169, -1
  %174 = icmp sgt i32 %89, 24
  %175 = trunc i32 %89 to i8
  %176 = sub i8 0, %175
  %177 = add nsw i32 %89, -16
  %178 = trunc i32 %177 to i8
  %179 = sub i8 0, %178
  %180 = add nsw i32 %89, 32
  br label %181

181:                                              ; preds = %312, %171
  %182 = phi i32 [ %78, %171 ], [ %314, %312 ]
  %183 = phi i32* [ %79, %171 ], [ %313, %312 ]
  %184 = phi i32 [ %92, %171 ], [ %305, %312 ]
  %185 = lshr i32 %184, 3
  %186 = zext i32 %185 to i64
  %187 = getelementptr inbounds i8, i8* %7, i64 %186
  %188 = bitcast i8* %187 to i32*
  %189 = load i32, i32* %188, align 1
  %190 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %189) #9, !srcloc !2
  %191 = and i32 %184, 7
  %192 = shl i32 %190, %191
  %193 = or i32 %192, 1
  %194 = tail call i32 @llvm.ctlz.i32(i32 %193, i1 true) #8, !range !5
  %195 = xor i32 %194, 31
  %196 = sub nsw i32 %195, %89
  %197 = icmp sgt i32 %196, 6
  %198 = sub nuw nsw i32 32, %195
  %199 = icmp slt i32 %198, %169
  %200 = and i1 %197, %199
  br i1 %200, label %205, label %201

201:                                              ; preds = %181
  br i1 %172, label %235, label %202

202:                                              ; preds = %201
  %203 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -25, i32 %192) #9, !srcloc !3
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %217, label %235

205:                                              ; preds = %181
  %206 = lshr i32 %192, %196
  %207 = sub nsw i32 30, %195
  %208 = shl i32 %207, %89
  %209 = add i32 %206, %208
  %210 = add i32 %180, %184
  %211 = sub i32 %210, %195
  %212 = icmp ugt i32 %16, %211
  %213 = select i1 %212, i32 %211, i32 %16
  br label %304

214:                                              ; preds = %221
  %215 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -25, i32 %232) #9, !srcloc !3
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %217, label %235

217:                                              ; preds = %202, %214
  %218 = phi i32 [ %224, %214 ], [ %184, %202 ]
  %219 = phi i32 [ %233, %214 ], [ 25, %202 ]
  %220 = icmp ugt i32 %14, %218
  br i1 %220, label %221, label %304

221:                                              ; preds = %217
  %222 = add i32 %218, 25
  %223 = icmp ugt i32 %16, %222
  %224 = select i1 %223, i32 %222, i32 %16
  %225 = lshr i32 %224, 3
  %226 = zext i32 %225 to i64
  %227 = getelementptr inbounds i8, i8* %7, i64 %226
  %228 = bitcast i8* %227 to i32*
  %229 = load i32, i32* %228, align 1
  %230 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %229) #9, !srcloc !2
  %231 = and i32 %224, 7
  %232 = shl i32 %230, %231
  %233 = add nuw nsw i32 %219, 25
  %234 = icmp sgt i32 %233, %169
  br i1 %234, label %235, label %214

235:                                              ; preds = %221, %214, %202, %201
  %236 = phi i32 [ %184, %201 ], [ %184, %202 ], [ %224, %214 ], [ %224, %221 ]
  %237 = phi i32 [ %192, %201 ], [ %192, %202 ], [ %232, %214 ], [ %232, %221 ]
  %238 = phi i32 [ 0, %201 ], [ 0, %202 ], [ %219, %214 ], [ %219, %221 ]
  %239 = icmp slt i32 %238, %169
  br i1 %239, label %240, label %253

240:                                              ; preds = %235, %246
  %241 = phi i32 [ %251, %246 ], [ %238, %235 ]
  %242 = phi i32 [ %247, %246 ], [ %237, %235 ]
  %243 = phi i32 [ %250, %246 ], [ %236, %235 ]
  %244 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -1, i32 %242) #9, !srcloc !3
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %246, label %253

246:                                              ; preds = %240
  %247 = shl i32 %242, 1
  %248 = add i32 %243, 1
  %249 = icmp ugt i32 %16, %248
  %250 = select i1 %249, i32 %248, i32 %16
  %251 = add nuw i32 %241, 1
  %252 = icmp eq i32 %251, %169
  br i1 %252, label %253, label %240

253:                                              ; preds = %246, %240, %235
  %254 = phi i32 [ %236, %235 ], [ %250, %246 ], [ %243, %240 ]
  %255 = phi i32 [ %238, %235 ], [ %169, %246 ], [ %241, %240 ]
  %256 = add i32 %254, 1
  %257 = icmp ugt i32 %16, %256
  %258 = select i1 %257, i32 %256, i32 %16
  %259 = lshr i32 %258, 3
  %260 = zext i32 %259 to i64
  %261 = getelementptr inbounds i8, i8* %7, i64 %260
  %262 = bitcast i8* %261 to i32*
  %263 = load i32, i32* %262, align 1
  %264 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %263) #9, !srcloc !2
  %265 = and i32 %258, 7
  %266 = shl i32 %264, %265
  %267 = icmp slt i32 %255, %173
  br i1 %267, label %268, label %299

268:                                              ; preds = %253
  br i1 %166, label %294, label %269

269:                                              ; preds = %268
  br i1 %174, label %270, label %289

270:                                              ; preds = %269
  %271 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %266) #9, !srcloc !3
  %272 = shl i32 %271, %177
  %273 = add i32 %258, 16
  %274 = icmp ugt i32 %16, %273
  %275 = select i1 %274, i32 %273, i32 %16
  %276 = lshr i32 %275, 3
  %277 = zext i32 %276 to i64
  %278 = getelementptr inbounds i8, i8* %7, i64 %277
  %279 = bitcast i8* %278 to i32*
  %280 = load i32, i32* %279, align 1
  %281 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %280) #9, !srcloc !2
  %282 = and i32 %275, 7
  %283 = shl i32 %281, %282
  %284 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %179, i32 %283) #9, !srcloc !3
  %285 = or i32 %284, %272
  %286 = add i32 %275, %177
  %287 = icmp ugt i32 %16, %286
  %288 = select i1 %287, i32 %286, i32 %16
  br label %294

289:                                              ; preds = %269
  %290 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %176, i32 %266) #9, !srcloc !3
  %291 = add i32 %258, %89
  %292 = icmp ugt i32 %16, %291
  %293 = select i1 %292, i32 %291, i32 %16
  br label %294

294:                                              ; preds = %289, %270, %268
  %295 = phi i32 [ %285, %270 ], [ %290, %289 ], [ 0, %268 ]
  %296 = phi i32 [ %288, %270 ], [ %293, %289 ], [ %258, %268 ]
  %297 = shl i32 %255, %89
  %298 = add i32 %295, %297
  br label %304

299:                                              ; preds = %253
  %300 = icmp eq i32 %255, %173
  br i1 %300, label %301, label %304

301:                                              ; preds = %299
  %302 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 0, i32 %266) #9, !srcloc !3
  %303 = add i32 %302, 1
  br label %304

304:                                              ; preds = %217, %205, %294, %299, %301
  %305 = phi i32 [ %213, %205 ], [ %296, %294 ], [ %258, %301 ], [ %258, %299 ], [ %218, %217 ]
  %306 = phi i32 [ %209, %205 ], [ %298, %294 ], [ %303, %301 ], [ -1, %299 ], [ -1, %217 ]
  %307 = lshr i32 %306, 1
  %308 = and i32 %306, 1
  %309 = sub nsw i32 0, %308
  %310 = xor i32 %307, %309
  %311 = icmp eq i32 %310, -2147483648
  br i1 %311, label %316, label %312

312:                                              ; preds = %304
  %313 = getelementptr inbounds i32, i32* %183, i64 1
  store i32 %310, i32* %183, align 4
  %314 = add i32 %182, 1
  %315 = icmp eq i32 %314, %46
  br i1 %315, label %320, label %181

316:                                              ; preds = %304
  %317 = getelementptr inbounds %struct.FLACContext, %struct.FLACContext* %0, i64 0, i32 2
  %318 = bitcast %struct.AVCodecContext** %317 to i8**
  %319 = load i8*, i8** %318, align 8
  tail call void (i8*, i32, i8*, ...) @av_log(i8* %319, i32 16, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.34, i64 0, i64 0)) #8
  br label %327

320:                                              ; preds = %312, %159, %165, %94
  %321 = phi i32 [ %106, %94 ], [ %92, %165 ], [ %160, %159 ], [ %305, %312 ]
  %322 = phi i32* [ %79, %94 ], [ %79, %165 ], [ %162, %159 ], [ %313, %312 ]
  %323 = add nuw nsw i32 %77, 1
  %324 = icmp slt i32 %323, %67
  br i1 %324, label %76, label %325

325:                                              ; preds = %320, %66
  %326 = phi i32 [ %43, %66 ], [ %321, %320 ]
  store i8* %7, i8** %6, align 8
  store i64 %10, i64* %9, align 8
  store i32 %326, i32* %11, align 8
  store i32 %14, i32* %13, align 4
  store i32 %16, i32* %15, align 8
  store i32 %19, i32* %18, align 4
  br label %327

327:                                              ; preds = %316, %325, %72, %60, %53
  %328 = phi i32 [ -1094995529, %53 ], [ -1094995529, %60 ], [ -1094995529, %72 ], [ -1094995529, %316 ], [ 0, %325 ]
  ret i32 %328
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #6

declare void @av_freep(i8*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #7

attributes #0 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nofree nounwind readonly }
attributes #8 = { nounwind }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind readonly }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 1855659}
!3 = !{i32 1869283, i32 1869297}
!4 = !{i32 1869092, i32 1869106}
!5 = !{i32 0, i32 32}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !7}
!11 = distinct !{!11, !7}
