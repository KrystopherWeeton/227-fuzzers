; ModuleID = '../../third_party/nasm/asm/pragma.c'
source_filename = "../../third_party/nasm/asm/pragma.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.pragma_facility = type { i8*, i32 (%struct.pragma*)* }
%struct.pragma = type { %struct.pragma_facility*, i8*, i8*, i8*, i32 }
%struct.perfect_hash = type { i64, i32, i32, i32, i32, i16*, i8** }
%struct.ofmt = type { i8*, i8*, i8*, i32, i32, %struct.dfmt**, %struct.dfmt*, i8*, void ()*, void ()*, void (%struct.out_data*)*, void (i32, i8*, i32, i64, i32, i32)*, void (i8*, i32, i64, i32, i8*)*, i32 (i8*, i32*)*, i32 (i8*, i32, i32, i32*, i8*)*, void (i32, i32)*, i32 (i32)*, i32 (i32, i8*)*, void ()*, %struct.pragma_facility* }
%struct.dfmt = type { i8*, i8*, void ()*, void (i8*, i32, i32)*, void (i8*, i32, i64, i32, i8*)*, void (i8*, i8*)*, void (i32)*, void (i32, i8*)*, void ()*, %struct.pragma_facility* }
%struct.out_data = type { i64, i32, i32, i32, i32, i32, i32, i64, %struct.itemplate*, i8*, i64, i32, i32, i64, %struct.src_location }
%struct.itemplate = type opaque
%struct.src_location = type { i8*, i32 }

@.str = private unnamed_addr constant [34 x i8] c"empty %%pragma directive, ignored\00", align 1
@global_pragmas = internal global [10 x %struct.pragma_facility] [%struct.pragma_facility { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i32 (%struct.pragma*)* null }, %struct.pragma_facility { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i32 (%struct.pragma*)* @limit_pragma }, %struct.pragma_facility { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i32 (%struct.pragma*)* @list_pragma }, %struct.pragma_facility { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 (%struct.pragma*)* null }, %struct.pragma_facility { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i32 (%struct.pragma*)* null }, %struct.pragma_facility { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i32 (%struct.pragma*)* @output_pragma }, %struct.pragma_facility { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 (%struct.pragma*)* @debug_pragma }, %struct.pragma_facility { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i32 0, i32 0), i32 (%struct.pragma*)* @ignore_pragma }, %struct.pragma_facility { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0), i32 (%struct.pragma*)* null }, %struct.pragma_facility zeroinitializer], align 16
@directive_hash = external constant %struct.perfect_hash, align 8
@.str.1 = private unnamed_addr constant [4 x i8] c"asm\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"limit\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"list\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"file\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"input\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"output\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"ignore\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"preproc\00", align 1
@.str.10 = private unnamed_addr constant [18 x i8] c"empty %%pragma %s\00", align 1
@.str.11 = private unnamed_addr constant [23 x i8] c"unknown %%pragma %s %s\00", align 1
@.str.12 = private unnamed_addr constant [31 x i8] c"bad argument to %%pragma %s %s\00", align 1
@.str.13 = private unnamed_addr constant [36 x i8] c"../../third_party/nasm/asm/pragma.c\00", align 1
@output_pragma.output_pragma_def = internal constant %struct.pragma_facility { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i32 (%struct.pragma*)* @output_pragma_common }, align 8
@ofmt = external local_unnamed_addr global %struct.ofmt*, align 8
@debug_pragma.debug_pragma_def = internal constant %struct.pragma_facility { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 (%struct.pragma*)* null }, align 8
@dfmt = external local_unnamed_addr global %struct.dfmt*, align 8
@switch.table.output_pragma_common = private unnamed_addr constant [6 x i32] [i32 2, i32 3, i32 2, i32 3, i32 0, i32 1], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @process_pragma(i8*) local_unnamed_addr #0 {
  %2 = alloca %struct.pragma, align 8
  %3 = alloca i8*, align 8
  %4 = bitcast %struct.pragma* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %4) #6
  %5 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #6
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %3, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 40, i1 false)
  %6 = call i8* @nasm_get_word(i8* %0, i8** nonnull %3) #6
  %7 = getelementptr inbounds %struct.pragma, %struct.pragma* %2, i64 0, i32 1
  store i8* %6, i8** %7, align 8
  %8 = icmp eq i8* %6, null
  br i1 %8, label %9, label %10

9:                                                ; preds = %1
  call void (i32, i8*, ...) @nasm_warn(i32 1573120, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0)) #6
  br label %49

10:                                               ; preds = %1
  %11 = load i8*, i8** %3, align 8
  %12 = call i8* @nasm_get_word(i8* %11, i8** nonnull %3) #6
  %13 = getelementptr inbounds %struct.pragma, %struct.pragma* %2, i64 0, i32 2
  store i8* %12, i8** %13, align 8
  %14 = icmp eq i8* %12, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %10
  %16 = call i32 @perfhash_find(%struct.perfect_hash* nonnull @directive_hash, i8* nonnull %12) #6
  br label %17

17:                                               ; preds = %10, %15
  %18 = phi i32 [ %16, %15 ], [ 0, %10 ]
  %19 = getelementptr inbounds %struct.pragma, %struct.pragma* %2, i64 0, i32 4
  store i32 %18, i32* %19, align 8
  %20 = load i8*, i8** %3, align 8
  %21 = call i8* @nasm_trim_spaces(i8* %20) #6
  %22 = getelementptr inbounds %struct.pragma, %struct.pragma* %2, i64 0, i32 3
  store i8* %21, i8** %22, align 8
  %23 = load i8*, i8** getelementptr inbounds ([10 x %struct.pragma_facility], [10 x %struct.pragma_facility]* @global_pragmas, i64 0, i64 0, i32 0), align 16
  %24 = icmp eq i8* %23, null
  br i1 %24, label %34, label %29

25:                                               ; preds = %29
  %26 = getelementptr inbounds %struct.pragma_facility, %struct.pragma_facility* %33, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = icmp eq i8* %27, null
  br i1 %28, label %34, label %29

29:                                               ; preds = %17, %25
  %30 = phi %struct.pragma_facility* [ %33, %25 ], [ getelementptr inbounds ([10 x %struct.pragma_facility], [10 x %struct.pragma_facility]* @global_pragmas, i64 0, i64 0), %17 ]
  %31 = call fastcc i32 @search_pragma_list(%struct.pragma_facility* null, i8* null, %struct.pragma_facility* %30, %struct.pragma* nonnull %2)
  %32 = icmp eq i32 %31, 0
  %33 = getelementptr inbounds %struct.pragma_facility, %struct.pragma_facility* %30, i64 1
  br i1 %32, label %25, label %49

34:                                               ; preds = %25, %17
  %35 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %36 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %35, i64 0, i32 19
  %37 = load %struct.pragma_facility*, %struct.pragma_facility** %36, align 8
  %38 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %35, i64 0, i32 1
  %39 = load i8*, i8** %38, align 8
  %40 = call fastcc i32 @search_pragma_list(%struct.pragma_facility* %37, i8* %39, %struct.pragma_facility* nonnull @output_pragma.output_pragma_def, %struct.pragma* nonnull %2) #6
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %49

42:                                               ; preds = %34
  %43 = load %struct.dfmt*, %struct.dfmt** @dfmt, align 8
  %44 = getelementptr inbounds %struct.dfmt, %struct.dfmt* %43, i64 0, i32 9
  %45 = load %struct.pragma_facility*, %struct.pragma_facility** %44, align 8
  %46 = getelementptr inbounds %struct.dfmt, %struct.dfmt* %43, i64 0, i32 1
  %47 = load i8*, i8** %46, align 8
  %48 = call fastcc i32 @search_pragma_list(%struct.pragma_facility* %45, i8* %47, %struct.pragma_facility* nonnull @debug_pragma.debug_pragma_def, %struct.pragma* nonnull %2) #6
  br label %49

49:                                               ; preds = %29, %42, %34, %9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %4) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i8* @nasm_get_word(i8*, i8**) local_unnamed_addr #2

declare void @nasm_warn(i32, i8*, ...) local_unnamed_addr #2

declare i8* @nasm_trim_spaces(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @search_pragma_list(%struct.pragma_facility*, i8* readonly, %struct.pragma_facility*, %struct.pragma* nocapture readonly) unnamed_addr #0 {
  %5 = alloca %struct.pragma, align 8
  %6 = bitcast %struct.pragma* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %6) #6
  %7 = bitcast %struct.pragma* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 8 %7, i64 40, i1 false)
  %8 = getelementptr inbounds %struct.pragma, %struct.pragma* %5, i64 0, i32 1
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq %struct.pragma_facility* %2, null
  br i1 %10, label %18, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %struct.pragma_facility, %struct.pragma_facility* %2, i64 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq i8* %13, null
  br i1 %14, label %18, label %15

15:                                               ; preds = %11
  %16 = tail call i32 @strcasecmp(i8* %9, i8* nonnull %13) #7
  %17 = icmp eq i32 %16, 0
  br label %18

18:                                               ; preds = %11, %4, %15
  %19 = phi i1 [ false, %11 ], [ false, %4 ], [ %17, %15 ]
  %20 = icmp eq i8* %1, null
  %21 = or i1 %20, %19
  %22 = select i1 %20, i8* %9, i8* %1
  br i1 %21, label %26, label %23

23:                                               ; preds = %18
  %24 = tail call i32 @strcasecmp(i8* %9, i8* nonnull %1) #7
  %25 = icmp eq i32 %24, 0
  br label %26

26:                                               ; preds = %18, %23
  %27 = phi i1 [ %25, %23 ], [ %19, %18 ]
  %28 = phi i8* [ %9, %23 ], [ %22, %18 ]
  %29 = zext i1 %27 to i8
  %30 = icmp ne i8* %28, null
  %31 = icmp ne %struct.pragma_facility* %0, null
  %32 = and i1 %31, %30
  br i1 %32, label %33, label %75

33:                                               ; preds = %26
  %34 = getelementptr inbounds %struct.pragma_facility, %struct.pragma_facility* %0, i64 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = icmp eq i8* %35, null
  br i1 %36, label %60, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.pragma, %struct.pragma* %5, i64 0, i32 0
  br label %39

39:                                               ; preds = %37, %54
  %40 = phi i8* [ %35, %37 ], [ %58, %54 ]
  %41 = phi i8 [ %29, %37 ], [ %55, %54 ]
  %42 = phi %struct.pragma_facility* [ %0, %37 ], [ %56, %54 ]
  %43 = call i32 @strcasecmp(i8* nonnull %28, i8* nonnull %40) #7
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %54

45:                                               ; preds = %39
  %46 = icmp eq %struct.pragma_facility* %42, null
  br i1 %46, label %54, label %47

47:                                               ; preds = %45
  %48 = getelementptr inbounds %struct.pragma_facility, %struct.pragma_facility* %42, i64 0, i32 1
  %49 = load i32 (%struct.pragma*)*, i32 (%struct.pragma*)** %48, align 8
  %50 = icmp eq i32 (%struct.pragma*)* %49, null
  br i1 %50, label %54, label %51

51:                                               ; preds = %47
  store %struct.pragma_facility* %42, %struct.pragma_facility** %38, align 8
  %52 = call i32 %49(%struct.pragma* nonnull %5) #6
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %86

54:                                               ; preds = %45, %47, %51, %39
  %55 = phi i8 [ %41, %39 ], [ 1, %51 ], [ 1, %47 ], [ 1, %45 ]
  %56 = getelementptr inbounds %struct.pragma_facility, %struct.pragma_facility* %42, i64 1
  %57 = getelementptr inbounds %struct.pragma_facility, %struct.pragma_facility* %56, i64 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = icmp eq i8* %58, null
  br i1 %59, label %60, label %39

60:                                               ; preds = %54, %33
  %61 = phi %struct.pragma_facility* [ %0, %33 ], [ %56, %54 ]
  %62 = phi i8 [ %29, %33 ], [ %55, %54 ]
  %63 = and i8 %62, 1
  %64 = icmp eq i8 %63, 0
  %65 = icmp eq %struct.pragma_facility* %61, null
  %66 = or i1 %65, %64
  br i1 %66, label %75, label %67

67:                                               ; preds = %60
  %68 = getelementptr inbounds %struct.pragma_facility, %struct.pragma_facility* %61, i64 0, i32 1
  %69 = load i32 (%struct.pragma*)*, i32 (%struct.pragma*)** %68, align 8
  %70 = icmp eq i32 (%struct.pragma*)* %69, null
  br i1 %70, label %78, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.pragma, %struct.pragma* %5, i64 0, i32 0
  store %struct.pragma_facility* %61, %struct.pragma_facility** %72, align 8
  %73 = call i32 %69(%struct.pragma* nonnull %5) #6
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %78, label %86

75:                                               ; preds = %26, %60
  %76 = phi i8 [ %63, %60 ], [ %29, %26 ]
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %102, label %78

78:                                               ; preds = %71, %67, %75
  br i1 %10, label %88, label %79

79:                                               ; preds = %78
  %80 = getelementptr inbounds %struct.pragma_facility, %struct.pragma_facility* %2, i64 0, i32 1
  %81 = load i32 (%struct.pragma*)*, i32 (%struct.pragma*)** %80, align 8
  %82 = icmp eq i32 (%struct.pragma*)* %81, null
  br i1 %82, label %88, label %83

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.pragma, %struct.pragma* %5, i64 0, i32 0
  store %struct.pragma_facility* %2, %struct.pragma_facility** %84, align 8
  %85 = call i32 %81(%struct.pragma* nonnull %5) #6
  br label %86

86:                                               ; preds = %51, %83, %71
  %87 = phi i32 [ %73, %71 ], [ %85, %83 ], [ %52, %51 ]
  switch i32 %87, label %101 [
    i32 0, label %88
    i32 1, label %102
    i32 2, label %102
    i32 3, label %97
  ]

88:                                               ; preds = %78, %79, %86
  %89 = getelementptr inbounds %struct.pragma, %struct.pragma* %5, i64 0, i32 4
  %90 = load i32, i32* %89, align 8
  %91 = icmp eq i32 %90, 0
  %92 = load i8*, i8** %8, align 8
  br i1 %91, label %93, label %94

93:                                               ; preds = %88
  call void (i32, i8*, ...) @nasm_warn(i32 1507584, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.10, i64 0, i64 0), i8* %92) #6
  br label %102

94:                                               ; preds = %88
  %95 = getelementptr inbounds %struct.pragma, %struct.pragma* %5, i64 0, i32 2
  %96 = load i8*, i8** %95, align 8
  call void (i32, i8*, ...) @nasm_warn(i32 1704192, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* %92, i8* %96) #6
  br label %102

97:                                               ; preds = %86
  %98 = load i8*, i8** %8, align 8
  %99 = getelementptr inbounds %struct.pragma, %struct.pragma* %5, i64 0, i32 2
  %100 = load i8*, i8** %99, align 8
  call void (i32, i8*, ...) @nasm_error(i32 4, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.12, i64 0, i64 0), i8* %98, i8* %100) #6
  br label %102

101:                                              ; preds = %86
  call void @nasm_panic_from_macro(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.13, i64 0, i64 0), i32 233) #8
  unreachable

102:                                              ; preds = %97, %86, %86, %94, %93, %75
  %103 = phi i32 [ 0, %75 ], [ 3, %97 ], [ %87, %86 ], [ %87, %86 ], [ 2, %94 ], [ 2, %93 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %6) #6
  ret i32 %103
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @output_pragma(%struct.pragma* nocapture readonly) #0 {
  %2 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %3 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %2, i64 0, i32 19
  %4 = load %struct.pragma_facility*, %struct.pragma_facility** %3, align 8
  %5 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %2, i64 0, i32 1
  %6 = load i8*, i8** %5, align 8
  %7 = tail call fastcc i32 @search_pragma_list(%struct.pragma_facility* %4, i8* %6, %struct.pragma_facility* nonnull @output_pragma.output_pragma_def, %struct.pragma* %0)
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @debug_pragma(%struct.pragma* nocapture readonly) #0 {
  %2 = load %struct.dfmt*, %struct.dfmt** @dfmt, align 8
  %3 = getelementptr inbounds %struct.dfmt, %struct.dfmt* %2, i64 0, i32 9
  %4 = load %struct.pragma_facility*, %struct.pragma_facility** %3, align 8
  %5 = getelementptr inbounds %struct.dfmt, %struct.dfmt* %2, i64 0, i32 1
  %6 = load i8*, i8** %5, align 8
  %7 = tail call fastcc i32 @search_pragma_list(%struct.pragma_facility* %4, i8* %6, %struct.pragma_facility* nonnull @debug_pragma.debug_pragma_def, %struct.pragma* %0)
  ret i32 %7
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @perfhash_find(%struct.perfect_hash*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @limit_pragma(%struct.pragma* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.pragma, %struct.pragma* %0, i64 0, i32 2
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %struct.pragma, %struct.pragma* %0, i64 0, i32 3
  %5 = load i8*, i8** %4, align 8
  %6 = tail call i32 @nasm_set_limit(i8* %3, i8* %5) #6
  ret i32 %6
}

declare i32 @list_pragma(%struct.pragma*) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @ignore_pragma(%struct.pragma* nocapture readnone) #3 {
  ret i32 1
}

declare i32 @nasm_set_limit(i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree nounwind readonly
declare i32 @strcasecmp(i8* nocapture, i8* nocapture) local_unnamed_addr #4

declare void @nasm_error(i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: cold noreturn
declare void @nasm_panic_from_macro(i8*, i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define internal i32 @output_pragma_common(%struct.pragma* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.pragma, %struct.pragma* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 8
  %4 = add i32 %3, -30
  %5 = icmp ult i32 %4, 6
  br i1 %5, label %6, label %12

6:                                                ; preds = %1
  %7 = sext i32 %4 to i64
  %8 = getelementptr inbounds [6 x i32], [6 x i32]* @switch.table.output_pragma_common, i64 0, i64 %7
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.pragma, %struct.pragma* %0, i64 0, i32 3
  %11 = load i8*, i8** %10, align 8
  tail call void @set_label_mangle(i32 %9, i8* %11) #6
  br label %12

12:                                               ; preds = %1, %6
  %13 = phi i32 [ 0, %1 ], [ 1, %6 ]
  ret i32 %13
}

declare void @set_label_mangle(i32, i8*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }
attributes #8 = { cold noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
