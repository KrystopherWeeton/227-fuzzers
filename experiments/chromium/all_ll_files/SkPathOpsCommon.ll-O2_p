; ModuleID = '../../third_party/skia/src/pathops/SkPathOpsCommon.cpp'
source_filename = "../../third_party/skia/src/pathops/SkPathOpsCommon.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkOpAngle = type <{ %struct.SkDCurve, %class.SkDCurveSweep, double, %class.SkLineParameters, %class.SkOpAngle*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, i32, i8, i8, i8, i8, i8, i8, i8, [5 x i8] }>
%struct.SkDCurve = type { %union.anon }
%union.anon = type { %struct.SkDCubic }
%struct.SkDCubic = type { [4 x %struct.SkDPoint] }
%struct.SkDPoint = type { double, double }
%class.SkDCurveSweep = type <{ %struct.SkDCurve, [2 x %struct.SkDVector], i8, i8, [6 x i8] }>
%struct.SkDVector = type { double, double }
%class.SkLineParameters = type { double, double, double }
%class.SkOpSpanBase = type <{ %class.SkOpPtT, %class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpAngle*, %class.SkOpSpan*, i32, i8, i8, [2 x i8] }>
%class.SkOpPtT = type <{ double, %struct.SkPoint, %class.SkOpSpanBase*, %class.SkOpPtT*, i8, i8, i8, [5 x i8] }>
%struct.SkPoint = type { float, float }
%class.SkOpSegment = type <{ %class.SkOpSpan, %class.SkOpSpanBase, %class.SkOpContour*, %class.SkOpSegment*, %class.SkOpSegment*, %struct.SkPoint*, %struct.SkPathOpsBounds, float, i32, i32, i32, i8, [7 x i8] }>
%class.SkOpSpan = type <{ %class.SkOpSpanBase.base, [2 x i8], %class.SkOpSpan*, %class.SkOpAngle*, %class.SkOpSpanBase*, i32, i32, i32, i32, i32, i8, i8, [2 x i8] }>
%class.SkOpSpanBase.base = type <{ %class.SkOpPtT, %class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpAngle*, %class.SkOpSpan*, i32, i8, i8 }>
%class.SkOpContour = type <{ %class.SkOpGlobalState*, %class.SkOpSegment, %class.SkOpSegment*, %class.SkOpContour*, %struct.SkPathOpsBounds, i32, i32, i32, i8, i8, i8, i8, i8, [7 x i8] }>
%class.SkOpGlobalState = type <{ %class.SkArenaAlloc*, %class.SkOpCoincidence*, %class.SkOpContourHead*, i32, i8, i8, i8, i8 }>
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%class.SkOpCoincidence = type <{ %class.SkCoincidentSpans*, %class.SkCoincidentSpans*, %class.SkOpGlobalState*, i8, i8, i8, i8, i8, [3 x i8] }>
%class.SkCoincidentSpans = type { %class.SkCoincidentSpans*, %class.SkOpPtT*, %class.SkOpPtT*, %class.SkOpPtT*, %class.SkOpPtT* }
%class.SkOpContourHead = type { %class.SkOpContour.base, [7 x i8] }
%class.SkOpContour.base = type <{ %class.SkOpGlobalState*, %class.SkOpSegment, %class.SkOpSegment*, %class.SkOpContour*, %struct.SkPathOpsBounds, i32, i32, i32, i8, i8, i8, i8, i8 }>
%struct.SkPathOpsBounds = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %class.SkOpSpanBase**, i32, i32 }
%class.anon.7 = type { i8 }

$_Z12SkTIntroSortIP11SkOpContourZ8SkTQSortIS0_EvPPT_S5_EUlPKS0_S7_E_EviS4_iRKT0_ = comdat any

@.str = private unnamed_addr constant [51 x i8] c"../../third_party/skia/include/private/SkTDArray.h\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"assert(%s)\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"SkTFitsIn<int>(count)\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"SkTFitsIn<int>(reserve)\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkOpAngle* @_Z12AngleWindingP12SkOpSpanBaseS0_PiPb(%class.SkOpSpanBase* nocapture readonly, %class.SkOpSpanBase* nocapture readonly, i32* nocapture, i8* nocapture) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %0, i64 0, i32 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %1, i64 0, i32 0, i32 0
  %8 = load double, double* %7, align 8
  %9 = fcmp olt double %6, %8
  %10 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %0, i64 1, i32 0, i32 1
  %11 = bitcast %struct.SkPoint* %10 to %class.SkOpAngle**
  %12 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %0, i64 0, i32 3
  %13 = select i1 %9, %class.SkOpAngle** %11, %class.SkOpAngle** %12
  %14 = load %class.SkOpAngle*, %class.SkOpAngle** %13, align 8
  %15 = icmp eq %class.SkOpAngle* %14, null
  br i1 %15, label %74, label %16

16:                                               ; preds = %4, %30
  %17 = phi %class.SkOpAngle* [ %20, %30 ], [ %14, %4 ]
  %18 = phi i8 [ %32, %30 ], [ 0, %4 ]
  %19 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %17, i64 0, i32 4
  %20 = load %class.SkOpAngle*, %class.SkOpAngle** %19, align 8
  %21 = icmp eq %class.SkOpAngle* %20, null
  br i1 %21, label %77, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %20, i64 0, i32 12
  %24 = load i8, i8* %23, align 2, !range !2
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %36

26:                                               ; preds = %22
  %27 = icmp eq %class.SkOpAngle* %20, %14
  %28 = icmp ne i8 %18, 0
  %29 = and i1 %28, %27
  br i1 %29, label %36, label %30

30:                                               ; preds = %26
  %31 = zext i1 %27 to i8
  %32 = or i8 %18, %31
  %33 = tail call %class.SkOpSegment* @_ZNK9SkOpAngle7segmentEv(%class.SkOpAngle* nonnull %20) #5
  %34 = tail call i32 @_ZNK11SkOpSegment7windSumEPK9SkOpAngle(%class.SkOpSegment* %33, %class.SkOpAngle* nonnull %20) #5
  %35 = icmp eq i32 %34, -2147483647
  br i1 %35, label %16, label %68

36:                                               ; preds = %22, %26
  %37 = phi i8 [ 1, %22 ], [ 0, %26 ]
  %38 = phi %class.SkOpAngle* [ %20, %22 ], [ %14, %26 ]
  br label %39

39:                                               ; preds = %36, %63
  %40 = phi %class.SkOpAngle* [ %66, %63 ], [ %38, %36 ]
  %41 = phi i32 [ %64, %63 ], [ -2147483647, %36 ]
  %42 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %40, i64 0, i32 6
  %43 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %42, align 8
  %44 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %40, i64 0, i32 7
  %45 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %44, align 8
  %46 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %43, i64 0, i32 0, i32 0
  %47 = load double, double* %46, align 8
  %48 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %45, i64 0, i32 0, i32 0
  %49 = load double, double* %48, align 8
  %50 = fcmp olt double %47, %49
  %51 = select i1 %50, %class.SkOpSpanBase* %43, %class.SkOpSpanBase* %45
  %52 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %51, i64 1, i32 0, i32 3
  %53 = bitcast %class.SkOpPtT** %52 to i32*
  %54 = load i32, i32* %53, align 8
  %55 = icmp eq i32 %54, -2147483647
  br i1 %55, label %56, label %60

56:                                               ; preds = %39
  %57 = bitcast %class.SkOpSpanBase* %51 to %class.SkOpSpan*
  %58 = tail call i32 @_ZN8SkOpSpan14computeWindSumEv(%class.SkOpSpan* %57) #5
  %59 = icmp eq i32 %58, -2147483647
  br i1 %59, label %63, label %60

60:                                               ; preds = %39, %56
  %61 = phi i32 [ %58, %56 ], [ %54, %39 ]
  %62 = tail call %class.SkOpSegment* @_ZNK9SkOpAngle7segmentEv(%class.SkOpAngle* %40) #5
  br label %63

63:                                               ; preds = %56, %60
  %64 = phi i32 [ %61, %60 ], [ %41, %56 ]
  %65 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %40, i64 0, i32 4
  %66 = load %class.SkOpAngle*, %class.SkOpAngle** %65, align 8
  %67 = icmp eq %class.SkOpAngle* %66, %38
  br i1 %67, label %68, label %39

68:                                               ; preds = %30, %63
  %69 = phi i8 [ %37, %63 ], [ 0, %30 ]
  %70 = phi %class.SkOpAngle* [ %38, %63 ], [ %20, %30 ]
  %71 = phi i32 [ %64, %63 ], [ %34, %30 ]
  %72 = and i8 %69, 1
  %73 = xor i8 %72, 1
  store i8 %73, i8* %3, align 1
  br label %74

74:                                               ; preds = %4, %68
  %75 = phi i32 [ %71, %68 ], [ -2147483647, %4 ]
  %76 = phi %class.SkOpAngle* [ %70, %68 ], [ null, %4 ]
  store i32 %75, i32* %2, align 4
  br label %77

77:                                               ; preds = %16, %74
  %78 = phi %class.SkOpAngle* [ %76, %74 ], [ null, %16 ]
  ret %class.SkOpAngle* %78
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %class.SkOpSegment* @_ZNK9SkOpAngle7segmentEv(%class.SkOpAngle*) local_unnamed_addr #2

declare i32 @_ZNK11SkOpSegment7windSumEPK9SkOpAngle(%class.SkOpSegment*, %class.SkOpAngle*) local_unnamed_addr #2

declare i32 @_ZN8SkOpSpan14computeWindSumEv(%class.SkOpSpan*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkOpSpan* @_Z10FindUndoneP15SkOpContourHead(%class.SkOpContourHead*) local_unnamed_addr #0 {
  %2 = bitcast %class.SkOpContourHead* %0 to %class.SkOpContour*
  br label %3

3:                                                ; preds = %11, %1
  %4 = phi %class.SkOpContour* [ %2, %1 ], [ %13, %11 ]
  %5 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %4, i64 0, i32 8
  %6 = load i8, i8* %5, align 4, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %3
  %9 = tail call %class.SkOpSpan* @_ZN11SkOpContour10undoneSpanEv(%class.SkOpContour* %4) #5
  %10 = icmp eq %class.SkOpSpan* %9, null
  br i1 %10, label %11, label %15

11:                                               ; preds = %3, %8
  %12 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %4, i64 0, i32 3
  %13 = load %class.SkOpContour*, %class.SkOpContour** %12, align 8
  %14 = icmp eq %class.SkOpContour* %13, null
  br i1 %14, label %15, label %3

15:                                               ; preds = %11, %8
  %16 = phi %class.SkOpSpan* [ %9, %8 ], [ null, %11 ]
  ret %class.SkOpSpan* %16
}

declare %class.SkOpSpan* @_ZN11SkOpContour10undoneSpanEv(%class.SkOpContour*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkOpSegment* @_Z9FindChaseP9SkTDArrayIP12SkOpSpanBaseEPS1_S4_(%class.SkTDArray* nocapture, %class.SkOpSpanBase**, %class.SkOpSpanBase**) local_unnamed_addr #0 {
  %4 = alloca i8, align 1
  %5 = alloca i32, align 4
  %6 = alloca i8, align 1
  %7 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %0, i64 0, i32 2
  %8 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %0, i64 0, i32 0
  %9 = bitcast %class.SkOpSpanBase** %1 to i64*
  %10 = bitcast i32* %5 to i8*
  %11 = getelementptr inbounds %class.SkTDArray, %class.SkTDArray* %0, i64 0, i32 1
  %12 = bitcast %class.SkTDArray* %0 to i8**
  br label %13

13:                                               ; preds = %180, %3
  %14 = phi %class.SkOpSegment* [ undef, %3 ], [ %181, %180 ]
  %15 = load i32, i32* %7, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %184, label %17

17:                                               ; preds = %13
  %18 = add nsw i32 %15, -1
  %19 = load %class.SkOpSpanBase**, %class.SkOpSpanBase*** %8, align 8
  %20 = sext i32 %18 to i64
  %21 = getelementptr inbounds %class.SkOpSpanBase*, %class.SkOpSpanBase** %19, i64 %20
  %22 = bitcast %class.SkOpSpanBase** %21 to i64*
  %23 = load i64, i64* %22, align 8
  store i32 %18, i32* %7, align 4
  %24 = inttoptr i64 %23 to %class.SkOpSpanBase*
  %25 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %24, i64 0, i32 1
  %26 = load %class.SkOpSegment*, %class.SkOpSegment** %25, align 8
  %27 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %24, i64 0, i32 0, i32 3
  %28 = load %class.SkOpPtT*, %class.SkOpPtT** %27, align 8
  %29 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %28, i64 0, i32 2
  %30 = bitcast %class.SkOpSpanBase** %29 to i64*
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %9, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #5
  store i8 1, i8* %4, align 1
  store %class.SkOpSpanBase* null, %class.SkOpSpanBase** %2, align 8
  %32 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %1, align 8
  %33 = call %class.SkOpAngle* @_ZN11SkOpSegment11activeAngleEP12SkOpSpanBasePS1_S2_Pb(%class.SkOpSegment* %26, %class.SkOpSpanBase* %32, %class.SkOpSpanBase** %1, %class.SkOpSpanBase** %2, i8* nonnull %4) #5
  %34 = icmp eq %class.SkOpAngle* %33, null
  br i1 %34, label %70, label %35

35:                                               ; preds = %17
  %36 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %33, i64 0, i32 6
  %37 = bitcast %class.SkOpSpanBase** %36 to i64*
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %9, align 8
  %39 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %33, i64 0, i32 7
  %40 = bitcast %class.SkOpSpanBase** %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = bitcast %class.SkOpSpanBase** %2 to i64*
  store i64 %41, i64* %42, align 8
  %43 = load i32, i32* %7, align 4
  %44 = add i32 %43, 1
  %45 = icmp sgt i32 %44, -1
  br i1 %45, label %47, label %46

46:                                               ; preds = %35
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0)) #6
  unreachable

47:                                               ; preds = %35
  %48 = load i32, i32* %11, align 8
  %49 = icmp slt i32 %48, %44
  br i1 %49, label %52, label %50

50:                                               ; preds = %47
  %51 = load %class.SkOpSpanBase**, %class.SkOpSpanBase*** %8, align 8
  br label %64

52:                                               ; preds = %47
  %53 = add i32 %43, 5
  %54 = lshr i32 %53, 2
  %55 = add nuw i32 %54, %53
  %56 = icmp sgt i32 %55, -1
  br i1 %56, label %58, label %57

57:                                               ; preds = %52
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #6
  unreachable

58:                                               ; preds = %52
  store i32 %55, i32* %11, align 8
  %59 = load i8*, i8** %12, align 8
  %60 = sext i32 %55 to i64
  %61 = shl nsw i64 %60, 3
  %62 = call i8* @_Z16sk_realloc_throwPvm(i8* %59, i64 %61) #5
  store i8* %62, i8** %12, align 8
  %63 = bitcast i8* %62 to %class.SkOpSpanBase**
  br label %64

64:                                               ; preds = %50, %58
  %65 = phi %class.SkOpSpanBase** [ %51, %50 ], [ %63, %58 ]
  store i32 %44, i32* %7, align 4
  %66 = sext i32 %43 to i64
  %67 = getelementptr inbounds %class.SkOpSpanBase*, %class.SkOpSpanBase** %65, i64 %66
  %68 = bitcast %class.SkOpSpanBase** %67 to i64*
  store i64 %23, i64* %68, align 8
  %69 = call %class.SkOpSegment* @_ZNK9SkOpAngle7segmentEv(%class.SkOpAngle* nonnull %33) #5
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #5
  br label %184

70:                                               ; preds = %17
  %71 = load i8, i8* %4, align 1, !range !2
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %73, label %180

73:                                               ; preds = %70
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #5
  store i32 -1431655766, i32* %5, align 4
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #5
  store i8 -86, i8* %6, align 1
  %74 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %1, align 8
  %75 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %2, align 8
  %76 = call %class.SkOpAngle* @_Z12AngleWindingP12SkOpSpanBaseS0_PiPb(%class.SkOpSpanBase* %74, %class.SkOpSpanBase* %75, i32* nonnull %5, i8* nonnull %6)
  %77 = icmp eq %class.SkOpAngle* %76, null
  br i1 %77, label %177, label %78

78:                                               ; preds = %73
  %79 = load i32, i32* %5, align 4
  %80 = icmp eq i32 %79, -2147483647
  br i1 %80, label %177, label %81

81:                                               ; preds = %78
  %82 = load i8, i8* %6, align 1, !range !2
  %83 = icmp eq i8 %82, 0
  br i1 %83, label %87, label %84

84:                                               ; preds = %81
  %85 = call %class.SkOpSegment* @_ZNK9SkOpAngle7segmentEv(%class.SkOpAngle* nonnull %76) #5
  %86 = call i32 @_ZN11SkOpSegment20updateWindingReverseEPK9SkOpAngle(%class.SkOpSegment* %85, %class.SkOpAngle* nonnull %76) #5
  br label %87

87:                                               ; preds = %81, %84
  %88 = phi i32 [ 0, %81 ], [ %86, %84 ]
  %89 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %76, i64 0, i32 4
  %90 = load %class.SkOpAngle*, %class.SkOpAngle** %89, align 8
  %91 = icmp eq %class.SkOpAngle* %90, %76
  br i1 %91, label %177, label %92

92:                                               ; preds = %87, %143
  %93 = phi %class.SkOpAngle* [ %146, %143 ], [ %90, %87 ]
  %94 = phi %class.SkOpSegment* [ %144, %143 ], [ null, %87 ]
  %95 = phi i32 [ %122, %143 ], [ %88, %87 ]
  %96 = call %class.SkOpSegment* @_ZNK9SkOpAngle7segmentEv(%class.SkOpAngle* %93) #5
  %97 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %93, i64 0, i32 6
  %98 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %97, align 8
  %99 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %93, i64 0, i32 7
  %100 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %99, align 8
  %101 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %98, i64 0, i32 0, i32 0
  %102 = load double, double* %101, align 8
  %103 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %100, i64 0, i32 0, i32 0
  %104 = load double, double* %103, align 8
  br i1 %83, label %121, label %105

105:                                              ; preds = %92
  %106 = fcmp olt double %102, %104
  br i1 %106, label %107, label %112

107:                                              ; preds = %105
  %108 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %98, i64 1, i32 0, i32 4
  %109 = bitcast i8* %108 to i32*
  %110 = load i32, i32* %109, align 8
  %111 = sub nsw i32 0, %110
  br label %116

112:                                              ; preds = %105
  %113 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %100, i64 1, i32 0, i32 4
  %114 = bitcast i8* %113 to i32*
  %115 = load i32, i32* %114, align 8
  br label %116

116:                                              ; preds = %112, %107
  %117 = phi i32 [ %111, %107 ], [ %115, %112 ]
  %118 = icmp eq i32 %95, -2147483647
  br i1 %118, label %121, label %119

119:                                              ; preds = %116
  %120 = sub nsw i32 %95, %117
  br label %121

121:                                              ; preds = %92, %119, %116
  %122 = phi i32 [ -2147483647, %116 ], [ %120, %119 ], [ %95, %92 ]
  %123 = phi i32 [ -2147483647, %116 ], [ %95, %119 ], [ 0, %92 ]
  %124 = fcmp olt double %102, %104
  %125 = select i1 %124, %class.SkOpSpanBase* %98, %class.SkOpSpanBase* %100
  %126 = bitcast %class.SkOpSpanBase* %125 to %class.SkOpSpan*
  %127 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %126, i64 0, i32 10
  %128 = load i8, i8* %127, align 4, !range !2
  %129 = icmp eq i8 %128, 0
  br i1 %129, label %130, label %143

130:                                              ; preds = %121
  %131 = icmp eq %class.SkOpSegment* %94, null
  br i1 %131, label %132, label %139

132:                                              ; preds = %130
  br i1 %83, label %133, label %138

133:                                              ; preds = %132
  %134 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %125, i64 1, i32 0, i32 3
  %135 = bitcast %class.SkOpPtT** %134 to i32*
  %136 = load i32, i32* %135, align 8
  %137 = icmp eq i32 %136, -2147483647
  br i1 %137, label %143, label %138

138:                                              ; preds = %133, %132
  store %class.SkOpSpanBase* %98, %class.SkOpSpanBase** %1, align 8
  store %class.SkOpSpanBase* %100, %class.SkOpSpanBase** %2, align 8
  br label %139

139:                                              ; preds = %130, %138
  %140 = phi %class.SkOpSegment* [ %94, %130 ], [ %96, %138 ]
  br i1 %83, label %143, label %141

141:                                              ; preds = %139
  %142 = call zeroext i1 @_ZN11SkOpSegment9markAngleEiiPK9SkOpAnglePP12SkOpSpanBase(%class.SkOpSegment* %96, i32 %123, i32 %122, %class.SkOpAngle* %93, %class.SkOpSpanBase** null) #5
  br label %143

143:                                              ; preds = %121, %133, %139, %141
  %144 = phi %class.SkOpSegment* [ %94, %121 ], [ %140, %141 ], [ %140, %139 ], [ null, %133 ]
  %145 = getelementptr inbounds %class.SkOpAngle, %class.SkOpAngle* %93, i64 0, i32 4
  %146 = load %class.SkOpAngle*, %class.SkOpAngle** %145, align 8
  %147 = icmp eq %class.SkOpAngle* %146, %76
  br i1 %147, label %148, label %92

148:                                              ; preds = %143
  %149 = icmp eq %class.SkOpSegment* %144, null
  br i1 %149, label %177, label %150

150:                                              ; preds = %148
  %151 = load i32, i32* %7, align 4
  %152 = add i32 %151, 1
  %153 = icmp sgt i32 %152, -1
  br i1 %153, label %155, label %154

154:                                              ; preds = %150
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0)) #6
  unreachable

155:                                              ; preds = %150
  %156 = load i32, i32* %11, align 8
  %157 = icmp slt i32 %156, %152
  br i1 %157, label %160, label %158

158:                                              ; preds = %155
  %159 = load %class.SkOpSpanBase**, %class.SkOpSpanBase*** %8, align 8
  br label %172

160:                                              ; preds = %155
  %161 = add i32 %151, 5
  %162 = lshr i32 %161, 2
  %163 = add nuw i32 %162, %161
  %164 = icmp sgt i32 %163, -1
  br i1 %164, label %166, label %165

165:                                              ; preds = %160
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #6
  unreachable

166:                                              ; preds = %160
  store i32 %163, i32* %11, align 8
  %167 = load i8*, i8** %12, align 8
  %168 = sext i32 %163 to i64
  %169 = shl nsw i64 %168, 3
  %170 = call i8* @_Z16sk_realloc_throwPvm(i8* %167, i64 %169) #5
  store i8* %170, i8** %12, align 8
  %171 = bitcast i8* %170 to %class.SkOpSpanBase**
  br label %172

172:                                              ; preds = %158, %166
  %173 = phi %class.SkOpSpanBase** [ %159, %158 ], [ %171, %166 ]
  store i32 %152, i32* %7, align 4
  %174 = sext i32 %151 to i64
  %175 = getelementptr inbounds %class.SkOpSpanBase*, %class.SkOpSpanBase** %173, i64 %174
  %176 = bitcast %class.SkOpSpanBase** %175 to i64*
  store i64 %23, i64* %176, align 8
  br label %177

177:                                              ; preds = %87, %172, %148, %78, %73
  %178 = phi %class.SkOpSegment* [ null, %73 ], [ %14, %78 ], [ %144, %172 ], [ %14, %148 ], [ %14, %87 ]
  %179 = phi i32 [ 1, %73 ], [ 2, %78 ], [ 1, %172 ], [ 0, %148 ], [ 0, %87 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #5
  br label %180

180:                                              ; preds = %70, %177
  %181 = phi %class.SkOpSegment* [ %178, %177 ], [ %14, %70 ]
  %182 = phi i32 [ %179, %177 ], [ 2, %70 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #5
  %183 = icmp eq i32 %182, 1
  br i1 %183, label %184, label %13

184:                                              ; preds = %13, %180, %64
  %185 = phi %class.SkOpSegment* [ %69, %64 ], [ null, %13 ], [ %181, %180 ]
  ret %class.SkOpSegment* %185
}

declare %class.SkOpAngle* @_ZN11SkOpSegment11activeAngleEP12SkOpSpanBasePS1_S2_Pb(%class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpSpanBase**, %class.SkOpSpanBase**, i8*) local_unnamed_addr #2

declare i32 @_ZN11SkOpSegment20updateWindingReverseEPK9SkOpAngle(%class.SkOpSegment*, %class.SkOpAngle*) local_unnamed_addr #2

declare zeroext i1 @_ZN11SkOpSegment9markAngleEiiPK9SkOpAnglePP12SkOpSpanBase(%class.SkOpSegment*, i32, i32, %class.SkOpAngle*, %class.SkOpSpanBase**) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_Z15SortContourListPP15SkOpContourHeadbb(%class.SkOpContourHead** nocapture, i1 zeroext, i1 zeroext) local_unnamed_addr #0 {
  %4 = alloca %class.anon.7, align 1
  %5 = bitcast %class.SkOpContourHead** %0 to %class.SkOpContour**
  %6 = load %class.SkOpContour*, %class.SkOpContour** %5, align 8
  br label %7

7:                                                ; preds = %45, %3
  %8 = phi i8* [ null, %3 ], [ %46, %45 ]
  %9 = phi %class.SkOpContour** [ null, %3 ], [ %47, %45 ]
  %10 = phi i32 [ 0, %3 ], [ %48, %45 ]
  %11 = phi i32 [ 0, %3 ], [ %49, %45 ]
  %12 = phi %class.SkOpContour* [ %6, %3 ], [ %51, %45 ]
  %13 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %12, i64 0, i32 6
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %45, label %16

16:                                               ; preds = %7
  %17 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %12, i64 0, i32 9
  %18 = load i8, i8* %17, align 1, !range !2
  %19 = icmp eq i8 %18, 0
  %20 = select i1 %19, i1 %2, i1 %1
  %21 = zext i1 %20 to i8
  %22 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %12, i64 0, i32 12
  store i8 %21, i8* %22, align 8
  %23 = add i32 %11, 1
  %24 = icmp sgt i32 %23, -1
  br i1 %24, label %26, label %25

25:                                               ; preds = %16
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0)) #6
  unreachable

26:                                               ; preds = %16
  %27 = icmp slt i32 %10, %23
  br i1 %27, label %28, label %39

28:                                               ; preds = %26
  %29 = add i32 %11, 5
  %30 = lshr i32 %29, 2
  %31 = add nuw i32 %30, %29
  %32 = icmp sgt i32 %31, -1
  br i1 %32, label %34, label %33

33:                                               ; preds = %28
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)) #6
  unreachable

34:                                               ; preds = %28
  %35 = sext i32 %31 to i64
  %36 = shl nsw i64 %35, 3
  %37 = tail call i8* @_Z16sk_realloc_throwPvm(i8* %8, i64 %36) #5
  %38 = bitcast i8* %37 to %class.SkOpContour**
  br label %39

39:                                               ; preds = %26, %34
  %40 = phi i8* [ %37, %34 ], [ %8, %26 ]
  %41 = phi %class.SkOpContour** [ %38, %34 ], [ %9, %26 ]
  %42 = phi i32 [ %31, %34 ], [ %10, %26 ]
  %43 = sext i32 %11 to i64
  %44 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %41, i64 %43
  store %class.SkOpContour* %12, %class.SkOpContour** %44, align 8
  br label %45

45:                                               ; preds = %7, %39
  %46 = phi i8* [ %8, %7 ], [ %40, %39 ]
  %47 = phi %class.SkOpContour** [ %9, %7 ], [ %41, %39 ]
  %48 = phi i32 [ %10, %7 ], [ %42, %39 ]
  %49 = phi i32 [ %11, %7 ], [ %23, %39 ]
  %50 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %12, i64 0, i32 3
  %51 = load %class.SkOpContour*, %class.SkOpContour** %50, align 8
  %52 = icmp eq %class.SkOpContour* %51, null
  br i1 %52, label %53, label %7

53:                                               ; preds = %45
  %54 = icmp eq i32 %49, 0
  br i1 %54, label %149, label %55

55:                                               ; preds = %53
  %56 = icmp sgt i32 %49, 1
  br i1 %56, label %57, label %74

57:                                               ; preds = %55
  %58 = icmp eq %class.SkOpContour** %47, null
  %59 = sext i32 %49 to i64
  %60 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %47, i64 %59
  %61 = select i1 %58, %class.SkOpContour** null, %class.SkOpContour** %60
  %62 = getelementptr inbounds %class.anon.7, %class.anon.7* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %62) #5
  %63 = ptrtoint %class.SkOpContour** %61 to i64
  %64 = ptrtoint %class.SkOpContour** %47 to i64
  %65 = sub i64 %63, %64
  %66 = lshr exact i64 %65, 3
  %67 = trunc i64 %66 to i32
  %68 = icmp slt i32 %67, 2
  br i1 %68, label %80, label %69

69:                                               ; preds = %57
  %70 = add nsw i32 %67, -2
  %71 = tail call i32 @llvm.ctlz.i32(i32 %70, i1 false) #5, !range !3
  %72 = shl nuw nsw i32 %71, 1
  %73 = sub nsw i32 64, %72
  call void @_Z12SkTIntroSortIP11SkOpContourZ8SkTQSortIS0_EvPPT_S5_EUlPKS0_S7_E_EviS4_iRKT0_(i32 %73, %class.SkOpContour** %47, i32 %67, %class.anon.7* nonnull dereferenceable(1) %4) #5
  br label %80

74:                                               ; preds = %55
  %75 = load %class.SkOpContour*, %class.SkOpContour** %47, align 8
  %76 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %75, i64 0, i32 0
  %77 = load %class.SkOpGlobalState*, %class.SkOpGlobalState** %76, align 8
  %78 = getelementptr inbounds %class.SkOpGlobalState, %class.SkOpGlobalState* %77, i64 0, i32 2
  %79 = bitcast %class.SkOpContourHead** %78 to %class.SkOpContour**
  store %class.SkOpContour* %75, %class.SkOpContour** %79, align 8
  store %class.SkOpContour* %75, %class.SkOpContour** %5, align 8
  br label %108

80:                                               ; preds = %69, %57
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %62) #5
  %81 = load %class.SkOpContour*, %class.SkOpContour** %47, align 8
  %82 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %81, i64 0, i32 0
  %83 = load %class.SkOpGlobalState*, %class.SkOpGlobalState** %82, align 8
  %84 = getelementptr inbounds %class.SkOpGlobalState, %class.SkOpGlobalState* %83, i64 0, i32 2
  %85 = bitcast %class.SkOpContourHead** %84 to %class.SkOpContour**
  store %class.SkOpContour* %81, %class.SkOpContour** %85, align 8
  store %class.SkOpContour* %81, %class.SkOpContour** %5, align 8
  %86 = zext i32 %49 to i64
  %87 = add nsw i64 %86, -1
  %88 = add nsw i64 %86, -2
  %89 = and i64 %87, 7
  %90 = icmp ult i64 %88, 7
  br i1 %90, label %93, label %91

91:                                               ; preds = %80
  %92 = sub nsw i64 %87, %89
  br label %111

93:                                               ; preds = %111, %80
  %94 = phi %class.SkOpContour* [ undef, %80 ], [ %144, %111 ]
  %95 = phi i64 [ 1, %80 ], [ %146, %111 ]
  %96 = phi %class.SkOpContour* [ %81, %80 ], [ %144, %111 ]
  %97 = icmp eq i64 %89, 0
  br i1 %97, label %108, label %98

98:                                               ; preds = %93, %98
  %99 = phi i64 [ %105, %98 ], [ %95, %93 ]
  %100 = phi %class.SkOpContour* [ %103, %98 ], [ %96, %93 ]
  %101 = phi i64 [ %106, %98 ], [ %89, %93 ]
  %102 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %47, i64 %99
  %103 = load %class.SkOpContour*, %class.SkOpContour** %102, align 8
  %104 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %100, i64 0, i32 3
  store %class.SkOpContour* %103, %class.SkOpContour** %104, align 8
  %105 = add nuw nsw i64 %99, 1
  %106 = add i64 %101, -1
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %108, label %98, !llvm.loop !4

108:                                              ; preds = %93, %98, %74
  %109 = phi %class.SkOpContour* [ %75, %74 ], [ %94, %93 ], [ %103, %98 ]
  %110 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %109, i64 0, i32 3
  store %class.SkOpContour* null, %class.SkOpContour** %110, align 8
  br label %149

111:                                              ; preds = %111, %91
  %112 = phi i64 [ 1, %91 ], [ %146, %111 ]
  %113 = phi %class.SkOpContour* [ %81, %91 ], [ %144, %111 ]
  %114 = phi i64 [ %92, %91 ], [ %147, %111 ]
  %115 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %47, i64 %112
  %116 = load %class.SkOpContour*, %class.SkOpContour** %115, align 8
  %117 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %113, i64 0, i32 3
  store %class.SkOpContour* %116, %class.SkOpContour** %117, align 8
  %118 = add nuw nsw i64 %112, 1
  %119 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %47, i64 %118
  %120 = load %class.SkOpContour*, %class.SkOpContour** %119, align 8
  %121 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %116, i64 0, i32 3
  store %class.SkOpContour* %120, %class.SkOpContour** %121, align 8
  %122 = add nuw nsw i64 %112, 2
  %123 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %47, i64 %122
  %124 = load %class.SkOpContour*, %class.SkOpContour** %123, align 8
  %125 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %120, i64 0, i32 3
  store %class.SkOpContour* %124, %class.SkOpContour** %125, align 8
  %126 = add nuw nsw i64 %112, 3
  %127 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %47, i64 %126
  %128 = load %class.SkOpContour*, %class.SkOpContour** %127, align 8
  %129 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %124, i64 0, i32 3
  store %class.SkOpContour* %128, %class.SkOpContour** %129, align 8
  %130 = add nuw nsw i64 %112, 4
  %131 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %47, i64 %130
  %132 = load %class.SkOpContour*, %class.SkOpContour** %131, align 8
  %133 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %128, i64 0, i32 3
  store %class.SkOpContour* %132, %class.SkOpContour** %133, align 8
  %134 = add nuw nsw i64 %112, 5
  %135 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %47, i64 %134
  %136 = load %class.SkOpContour*, %class.SkOpContour** %135, align 8
  %137 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %132, i64 0, i32 3
  store %class.SkOpContour* %136, %class.SkOpContour** %137, align 8
  %138 = add nuw nsw i64 %112, 6
  %139 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %47, i64 %138
  %140 = load %class.SkOpContour*, %class.SkOpContour** %139, align 8
  %141 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %136, i64 0, i32 3
  store %class.SkOpContour* %140, %class.SkOpContour** %141, align 8
  %142 = add nuw nsw i64 %112, 7
  %143 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %47, i64 %142
  %144 = load %class.SkOpContour*, %class.SkOpContour** %143, align 8
  %145 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %140, i64 0, i32 3
  store %class.SkOpContour* %144, %class.SkOpContour** %145, align 8
  %146 = add nuw nsw i64 %112, 8
  %147 = add i64 %114, -8
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %93, label %111

149:                                              ; preds = %53, %108
  %150 = phi i1 [ true, %108 ], [ false, %53 ]
  call void @_Z7sk_freePv(i8* %46) #5
  ret i1 %150
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_Z17HandleCoincidenceP15SkOpContourHeadP15SkOpCoincidence(%class.SkOpContourHead*, %class.SkOpCoincidence*) local_unnamed_addr #0 {
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = alloca %class.SkOpCoincidence, align 8
  %6 = bitcast %class.SkOpContourHead* %0 to %class.SkOpContour*
  %7 = getelementptr inbounds %class.SkOpContourHead, %class.SkOpContourHead* %0, i64 0, i32 0, i32 0
  %8 = load %class.SkOpGlobalState*, %class.SkOpGlobalState** %7, align 8
  %9 = tail call zeroext i1 @_ZN15SkOpCoincidence11addExpandedEv(%class.SkOpCoincidence* %1) #5
  br i1 %9, label %10, label %192

10:                                               ; preds = %2, %20
  %11 = phi %class.SkOpContour* [ %22, %20 ], [ %6, %2 ]
  %12 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %11, i64 0, i32 1
  br label %13

13:                                               ; preds = %16, %10
  %14 = phi %class.SkOpSegment* [ %12, %10 ], [ %18, %16 ]
  %15 = tail call zeroext i1 @_ZN11SkOpSegment13moveMultiplesEv(%class.SkOpSegment* %14) #5
  br i1 %15, label %16, label %192

16:                                               ; preds = %13
  %17 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %14, i64 0, i32 3
  %18 = load %class.SkOpSegment*, %class.SkOpSegment** %17, align 8
  %19 = icmp eq %class.SkOpSegment* %18, null
  br i1 %19, label %20, label %13

20:                                               ; preds = %16
  %21 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %11, i64 0, i32 3
  %22 = load %class.SkOpContour*, %class.SkOpContour** %21, align 8
  %23 = icmp eq %class.SkOpContour* %22, null
  br i1 %23, label %24, label %10

24:                                               ; preds = %20, %34
  %25 = phi %class.SkOpContour* [ %36, %34 ], [ %6, %20 ]
  %26 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %25, i64 0, i32 1
  br label %27

27:                                               ; preds = %30, %24
  %28 = phi %class.SkOpSegment* [ %26, %24 ], [ %32, %30 ]
  %29 = tail call zeroext i1 @_ZN11SkOpSegment10moveNearbyEv(%class.SkOpSegment* %28) #5
  br i1 %29, label %30, label %192

30:                                               ; preds = %27
  %31 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %28, i64 0, i32 3
  %32 = load %class.SkOpSegment*, %class.SkOpSegment** %31, align 8
  %33 = icmp eq %class.SkOpSegment* %32, null
  br i1 %33, label %34, label %27

34:                                               ; preds = %30
  %35 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %25, i64 0, i32 3
  %36 = load %class.SkOpContour*, %class.SkOpContour** %35, align 8
  %37 = icmp eq %class.SkOpContour* %36, null
  br i1 %37, label %38, label %24

38:                                               ; preds = %34
  tail call void @_ZN15SkOpCoincidence11correctEndsEv(%class.SkOpCoincidence* %1) #5
  %39 = tail call zeroext i1 @_ZN15SkOpCoincidence16addEndMovedSpansEv(%class.SkOpCoincidence* %1) #5
  br i1 %39, label %40, label %192

40:                                               ; preds = %38
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #5
  store i8 -86, i8* %3, align 1
  %41 = call zeroext i1 @_ZN15SkOpCoincidence10addMissingEPb(%class.SkOpCoincidence* %1, i8* nonnull %3) #5
  br i1 %41, label %42, label %63

42:                                               ; preds = %40, %64
  %43 = phi i32 [ %47, %64 ], [ 3, %40 ]
  %44 = load i8, i8* %3, align 1, !range !2
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %66, label %46

46:                                               ; preds = %42
  %47 = add nsw i32 %43, -1
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %63, label %49

49:                                               ; preds = %46, %59
  %50 = phi %class.SkOpContour* [ %61, %59 ], [ %6, %46 ]
  %51 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %50, i64 0, i32 1
  br label %52

52:                                               ; preds = %55, %49
  %53 = phi %class.SkOpSegment* [ %51, %49 ], [ %57, %55 ]
  %54 = call zeroext i1 @_ZN11SkOpSegment10moveNearbyEv(%class.SkOpSegment* %53) #5
  br i1 %54, label %55, label %64

55:                                               ; preds = %52
  %56 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %53, i64 0, i32 3
  %57 = load %class.SkOpSegment*, %class.SkOpSegment** %56, align 8
  %58 = icmp eq %class.SkOpSegment* %57, null
  br i1 %58, label %59, label %52

59:                                               ; preds = %55
  %60 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %50, i64 0, i32 3
  %61 = load %class.SkOpContour*, %class.SkOpContour** %60, align 8
  %62 = icmp eq %class.SkOpContour* %61, null
  br i1 %62, label %64, label %49

63:                                               ; preds = %46, %64, %40
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #5
  br label %192

64:                                               ; preds = %59, %52
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #5
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #5
  store i8 -86, i8* %3, align 1
  %65 = call zeroext i1 @_ZN15SkOpCoincidence10addMissingEPb(%class.SkOpCoincidence* %1, i8* nonnull %3) #5
  br i1 %65, label %42, label %63

66:                                               ; preds = %42
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #5
  %67 = call zeroext i1 @_ZN15SkOpCoincidence6expandEv(%class.SkOpCoincidence* %1) #5
  br i1 %67, label %68, label %102

68:                                               ; preds = %66
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #5
  store i8 -86, i8* %4, align 1
  %69 = call zeroext i1 @_ZN15SkOpCoincidence10addMissingEPb(%class.SkOpCoincidence* %1, i8* nonnull %4) #5
  br i1 %69, label %70, label %101

70:                                               ; preds = %68
  %71 = call zeroext i1 @_ZN15SkOpCoincidence11addExpandedEv(%class.SkOpCoincidence* %1) #5
  br i1 %71, label %72, label %101

72:                                               ; preds = %70, %82
  %73 = phi %class.SkOpContour* [ %84, %82 ], [ %6, %70 ]
  %74 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %73, i64 0, i32 1
  br label %75

75:                                               ; preds = %78, %72
  %76 = phi %class.SkOpSegment* [ %74, %72 ], [ %80, %78 ]
  %77 = call zeroext i1 @_ZN11SkOpSegment13moveMultiplesEv(%class.SkOpSegment* %76) #5
  br i1 %77, label %78, label %101

78:                                               ; preds = %75
  %79 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %76, i64 0, i32 3
  %80 = load %class.SkOpSegment*, %class.SkOpSegment** %79, align 8
  %81 = icmp eq %class.SkOpSegment* %80, null
  br i1 %81, label %82, label %75

82:                                               ; preds = %78
  %83 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %73, i64 0, i32 3
  %84 = load %class.SkOpContour*, %class.SkOpContour** %83, align 8
  %85 = icmp eq %class.SkOpContour* %84, null
  br i1 %85, label %86, label %72

86:                                               ; preds = %82, %96
  %87 = phi %class.SkOpContour* [ %98, %96 ], [ %6, %82 ]
  %88 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %87, i64 0, i32 1
  br label %89

89:                                               ; preds = %92, %86
  %90 = phi %class.SkOpSegment* [ %88, %86 ], [ %94, %92 ]
  %91 = call zeroext i1 @_ZN11SkOpSegment10moveNearbyEv(%class.SkOpSegment* %90) #5
  br i1 %91, label %92, label %100

92:                                               ; preds = %89
  %93 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %90, i64 0, i32 3
  %94 = load %class.SkOpSegment*, %class.SkOpSegment** %93, align 8
  %95 = icmp eq %class.SkOpSegment* %94, null
  br i1 %95, label %96, label %89

96:                                               ; preds = %92
  %97 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %87, i64 0, i32 3
  %98 = load %class.SkOpContour*, %class.SkOpContour** %97, align 8
  %99 = icmp eq %class.SkOpContour* %98, null
  br i1 %99, label %100, label %86

100:                                              ; preds = %96, %89
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #5
  br label %102

101:                                              ; preds = %75, %70, %68
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #5
  br label %192

102:                                              ; preds = %100, %66
  %103 = call zeroext i1 @_ZN15SkOpCoincidence11addExpandedEv(%class.SkOpCoincidence* %1) #5
  br i1 %103, label %104, label %192

104:                                              ; preds = %102
  %105 = call zeroext i1 @_ZN15SkOpCoincidence4markEv(%class.SkOpCoincidence* %1) #5
  br label %106

106:                                              ; preds = %118, %104
  %107 = phi %class.SkOpContour* [ %6, %104 ], [ %123, %118 ]
  %108 = phi i1 [ false, %104 ], [ %121, %118 ]
  %109 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %107, i64 0, i32 1
  br label %110

110:                                              ; preds = %110, %106
  %111 = phi %class.SkOpSegment* [ %109, %106 ], [ %116, %110 ]
  %112 = phi i8 [ 0, %106 ], [ %114, %110 ]
  %113 = call zeroext i1 @_ZN11SkOpSegment18missingCoincidenceEv(%class.SkOpSegment* %111) #5
  %114 = select i1 %113, i8 1, i8 %112
  %115 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %111, i64 0, i32 3
  %116 = load %class.SkOpSegment*, %class.SkOpSegment** %115, align 8
  %117 = icmp eq %class.SkOpSegment* %116, null
  br i1 %117, label %118, label %110

118:                                              ; preds = %110
  %119 = and i8 %114, 1
  %120 = icmp ne i8 %119, 0
  %121 = or i1 %108, %120
  %122 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %107, i64 0, i32 3
  %123 = load %class.SkOpContour*, %class.SkOpContour** %122, align 8
  %124 = icmp eq %class.SkOpContour* %123, null
  br i1 %124, label %125, label %106

125:                                              ; preds = %118
  %126 = call zeroext i1 @_ZN15SkOpCoincidence6expandEv(%class.SkOpCoincidence* %1) #5
  br i1 %121, label %127, label %131

127:                                              ; preds = %125
  %128 = call zeroext i1 @_ZN15SkOpCoincidence11addExpandedEv(%class.SkOpCoincidence* %1) #5
  br i1 %128, label %129, label %192

129:                                              ; preds = %127
  %130 = call zeroext i1 @_ZN15SkOpCoincidence4markEv(%class.SkOpCoincidence* %1) #5
  br i1 %130, label %131, label %192

131:                                              ; preds = %125, %129
  %132 = call zeroext i1 @_ZN15SkOpCoincidence6expandEv(%class.SkOpCoincidence* %1) #5
  %133 = bitcast %class.SkOpCoincidence* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %133) #5
  %134 = getelementptr inbounds %class.SkOpCoincidence, %class.SkOpCoincidence* %5, i64 0, i32 0
  %135 = getelementptr inbounds %class.SkOpCoincidence, %class.SkOpCoincidence* %5, i64 0, i32 1
  %136 = getelementptr inbounds %class.SkOpCoincidence, %class.SkOpCoincidence* %5, i64 0, i32 2
  %137 = getelementptr inbounds %class.SkOpCoincidence, %class.SkOpCoincidence* %5, i64 0, i32 3
  %138 = bitcast %class.SkOpCoincidence* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %138, i8 -86, i64 32, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %133, i8 0, i64 16, i1 false) #5
  store %class.SkOpGlobalState* %8, %class.SkOpGlobalState** %136, align 8
  %139 = getelementptr inbounds %class.SkOpGlobalState, %class.SkOpGlobalState* %8, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* align 8 %137, i8 0, i64 5, i1 false) #5
  store %class.SkOpCoincidence* %5, %class.SkOpCoincidence** %139, align 8
  %140 = load %class.SkCoincidentSpans*, %class.SkCoincidentSpans** %135, align 8
  %141 = icmp eq %class.SkCoincidentSpans* %140, null
  %142 = select i1 %141, %class.SkOpCoincidence* %1, %class.SkOpCoincidence* %5
  %143 = call zeroext i1 @_ZN15SkOpCoincidence5applyEv(%class.SkOpCoincidence* %142) #5
  br i1 %143, label %144, label %190

144:                                              ; preds = %131, %157
  %145 = phi %class.SkOpCoincidence* [ %161, %157 ], [ %142, %131 ]
  %146 = phi i32 [ %149, %157 ], [ 3, %131 ]
  %147 = call zeroext i1 @_ZNK15SkOpCoincidence12findOverlapsEPS_(%class.SkOpCoincidence* %145, %class.SkOpCoincidence* nonnull %5) #5
  br i1 %147, label %148, label %190

148:                                              ; preds = %144
  %149 = add nsw i32 %146, -1
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %190, label %151

151:                                              ; preds = %148
  %152 = load %class.SkCoincidentSpans*, %class.SkCoincidentSpans** %134, align 8
  %153 = icmp eq %class.SkCoincidentSpans* %152, null
  %154 = load %class.SkCoincidentSpans*, %class.SkCoincidentSpans** %135, align 8
  %155 = icmp eq %class.SkCoincidentSpans* %154, null
  %156 = and i1 %153, %155
  br i1 %156, label %163, label %157

157:                                              ; preds = %151
  %158 = icmp eq %class.SkCoincidentSpans* %152, null
  %159 = icmp eq %class.SkCoincidentSpans* %154, null
  %160 = and i1 %158, %159
  %161 = select i1 %160, %class.SkOpCoincidence* %1, %class.SkOpCoincidence* %5
  %162 = call zeroext i1 @_ZN15SkOpCoincidence5applyEv(%class.SkOpCoincidence* %161) #5
  br i1 %162, label %144, label %190

163:                                              ; preds = %151, %171
  %164 = phi %class.SkOpContour* [ %173, %171 ], [ %6, %151 ]
  %165 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %164, i64 0, i32 1
  br label %166

166:                                              ; preds = %166, %163
  %167 = phi %class.SkOpSegment* [ %165, %163 ], [ %169, %166 ]
  call void @_ZN11SkOpSegment10calcAnglesEv(%class.SkOpSegment* %167) #5
  %168 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %167, i64 0, i32 3
  %169 = load %class.SkOpSegment*, %class.SkOpSegment** %168, align 8
  %170 = icmp eq %class.SkOpSegment* %169, null
  br i1 %170, label %171, label %166

171:                                              ; preds = %166
  %172 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %164, i64 0, i32 3
  %173 = load %class.SkOpContour*, %class.SkOpContour** %172, align 8
  %174 = icmp eq %class.SkOpContour* %173, null
  br i1 %174, label %175, label %163

175:                                              ; preds = %171, %185
  %176 = phi %class.SkOpContour* [ %187, %185 ], [ %6, %171 ]
  %177 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %176, i64 0, i32 1
  br label %178

178:                                              ; preds = %181, %175
  %179 = phi %class.SkOpSegment* [ %177, %175 ], [ %183, %181 ]
  %180 = call zeroext i1 @_ZN11SkOpSegment10sortAnglesEv(%class.SkOpSegment* %179) #5
  br i1 %180, label %181, label %190

181:                                              ; preds = %178
  %182 = getelementptr inbounds %class.SkOpSegment, %class.SkOpSegment* %179, i64 0, i32 3
  %183 = load %class.SkOpSegment*, %class.SkOpSegment** %182, align 8
  %184 = icmp eq %class.SkOpSegment* %183, null
  br i1 %184, label %185, label %178

185:                                              ; preds = %181
  %186 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %176, i64 0, i32 3
  %187 = load %class.SkOpContour*, %class.SkOpContour** %186, align 8
  %188 = icmp eq %class.SkOpContour* %187, null
  br i1 %188, label %189, label %175

189:                                              ; preds = %185
  call void @_ZN14SkPathOpsDebug15ShowActiveSpansEP15SkOpContourHead(%class.SkOpContourHead* %0) #5
  br label %190

190:                                              ; preds = %157, %144, %148, %178, %131, %189
  %191 = phi i1 [ true, %189 ], [ false, %131 ], [ false, %178 ], [ false, %148 ], [ false, %144 ], [ false, %157 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %133) #5
  br label %192

192:                                              ; preds = %13, %27, %63, %190, %101, %102, %127, %129, %38, %2
  %193 = phi i1 [ false, %2 ], [ false, %38 ], [ %191, %190 ], [ false, %101 ], [ false, %102 ], [ false, %127 ], [ false, %129 ], [ false, %63 ], [ false, %27 ], [ false, %13 ]
  ret i1 %193
}

declare zeroext i1 @_ZN15SkOpCoincidence11addExpandedEv(%class.SkOpCoincidence*) local_unnamed_addr #2

declare void @_ZN15SkOpCoincidence11correctEndsEv(%class.SkOpCoincidence*) local_unnamed_addr #2

declare zeroext i1 @_ZN15SkOpCoincidence16addEndMovedSpansEv(%class.SkOpCoincidence*) local_unnamed_addr #2

declare zeroext i1 @_ZN15SkOpCoincidence10addMissingEPb(%class.SkOpCoincidence*, i8*) local_unnamed_addr #2

declare zeroext i1 @_ZN15SkOpCoincidence6expandEv(%class.SkOpCoincidence*) local_unnamed_addr #2

declare zeroext i1 @_ZN15SkOpCoincidence4markEv(%class.SkOpCoincidence*) local_unnamed_addr #2

declare zeroext i1 @_ZN15SkOpCoincidence5applyEv(%class.SkOpCoincidence*) local_unnamed_addr #2

declare zeroext i1 @_ZNK15SkOpCoincidence12findOverlapsEPS_(%class.SkOpCoincidence*, %class.SkOpCoincidence*) local_unnamed_addr #2

declare void @_ZN14SkPathOpsDebug15ShowActiveSpansEP15SkOpContourHead(%class.SkOpContourHead*) local_unnamed_addr #2

declare zeroext i1 @_ZN11SkOpSegment13moveMultiplesEv(%class.SkOpSegment*) local_unnamed_addr #2

declare zeroext i1 @_ZN11SkOpSegment10moveNearbyEv(%class.SkOpSegment*) local_unnamed_addr #2

declare zeroext i1 @_ZN11SkOpSegment18missingCoincidenceEv(%class.SkOpSegment*) local_unnamed_addr #2

declare void @_ZN11SkOpSegment10calcAnglesEv(%class.SkOpSegment*) local_unnamed_addr #2

declare zeroext i1 @_ZN11SkOpSegment10sortAnglesEv(%class.SkOpSegment*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #3

declare i8* @_Z16sk_realloc_throwPvm(i8*, i64) local_unnamed_addr #2

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z12SkTIntroSortIP11SkOpContourZ8SkTQSortIS0_EvPPT_S5_EUlPKS0_S7_E_EviS4_iRKT0_(i32, %class.SkOpContour**, i32, %class.anon.7* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %5 = icmp slt i32 %2, 33
  br i1 %5, label %6, label %74

6:                                                ; preds = %287, %4
  %7 = phi i32 [ %2, %4 ], [ %300, %287 ]
  %8 = phi %class.SkOpContour** [ %1, %4 ], [ %299, %287 ]
  %9 = sext i32 %7 to i64
  %10 = add nsw i64 %9, -1
  %11 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %8, i64 %10
  %12 = icmp slt i32 %7, 2
  br i1 %12, label %302, label %13

13:                                               ; preds = %6
  %14 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %8, i64 1
  br label %15

15:                                               ; preds = %71, %13
  %16 = phi %class.SkOpContour** [ %72, %71 ], [ %14, %13 ]
  %17 = phi %class.SkOpContour** [ %16, %71 ], [ %8, %13 ]
  %18 = load %class.SkOpContour*, %class.SkOpContour** %16, align 8
  %19 = load %class.SkOpContour*, %class.SkOpContour** %17, align 8
  %20 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %18, i64 0, i32 4, i32 0, i32 1
  %21 = load float, float* %20, align 4
  %22 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %19, i64 0, i32 4, i32 0, i32 1
  %23 = load float, float* %22, align 4
  %24 = fcmp oeq float %21, %23
  %25 = ptrtoint %class.SkOpContour* %18 to i64
  br i1 %24, label %26, label %32

26:                                               ; preds = %15
  %27 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %18, i64 0, i32 4, i32 0, i32 0
  %28 = load float, float* %27, align 8
  %29 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %19, i64 0, i32 4, i32 0, i32 0
  %30 = load float, float* %29, align 8
  %31 = fcmp olt float %28, %30
  br i1 %31, label %34, label %71

32:                                               ; preds = %15
  %33 = fcmp olt float %21, %23
  br i1 %33, label %34, label %71

34:                                               ; preds = %32, %26
  %35 = bitcast %class.SkOpContour** %16 to i64*
  %36 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %18, i64 0, i32 4, i32 0, i32 0
  %37 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %16, i64 -1
  %38 = bitcast %class.SkOpContour** %37 to i64*
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %35, align 8
  %40 = icmp ugt %class.SkOpContour** %37, %8
  br i1 %40, label %41, label %69

41:                                               ; preds = %34, %58
  %42 = phi %class.SkOpContour** [ %59, %58 ], [ %37, %34 ]
  %43 = phi %class.SkOpContour** [ %42, %58 ], [ %16, %34 ]
  %44 = bitcast %class.SkOpContour** %42 to i64*
  %45 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %43, i64 -2
  %46 = load %class.SkOpContour*, %class.SkOpContour** %45, align 8
  %47 = load float, float* %20, align 4
  %48 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %46, i64 0, i32 4, i32 0, i32 1
  %49 = load float, float* %48, align 4
  %50 = fcmp oeq float %47, %49
  br i1 %50, label %51, label %56

51:                                               ; preds = %41
  %52 = load float, float* %36, align 8
  %53 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %46, i64 0, i32 4, i32 0, i32 0
  %54 = load float, float* %53, align 8
  %55 = fcmp olt float %52, %54
  br i1 %55, label %58, label %67

56:                                               ; preds = %41
  %57 = fcmp olt float %47, %49
  br i1 %57, label %58, label %65

58:                                               ; preds = %56, %51
  %59 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %42, i64 -1
  %60 = bitcast %class.SkOpContour** %59 to i64*
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %44, align 8
  %62 = icmp ugt %class.SkOpContour** %59, %8
  br i1 %62, label %41, label %63

63:                                               ; preds = %58
  %64 = bitcast %class.SkOpContour** %59 to i64*
  br label %69

65:                                               ; preds = %56
  %66 = bitcast %class.SkOpContour** %42 to i64*
  br label %69

67:                                               ; preds = %51
  %68 = bitcast %class.SkOpContour** %42 to i64*
  br label %69

69:                                               ; preds = %63, %65, %67, %34
  %70 = phi i64* [ %38, %34 ], [ %64, %63 ], [ %66, %65 ], [ %68, %67 ]
  store i64 %25, i64* %70, align 8
  br label %71

71:                                               ; preds = %69, %32, %26
  %72 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %16, i64 1
  %73 = icmp ugt %class.SkOpContour** %72, %11
  br i1 %73, label %302, label %15

74:                                               ; preds = %4, %287
  %75 = phi i32 [ %243, %287 ], [ %0, %4 ]
  %76 = phi %class.SkOpContour** [ %299, %287 ], [ %1, %4 ]
  %77 = phi i32 [ %300, %287 ], [ %2, %4 ]
  %78 = icmp eq i32 %75, 0
  br i1 %78, label %79, label %242

79:                                               ; preds = %74
  %80 = sext i32 %77 to i64
  %81 = lshr i64 %80, 1
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %91

83:                                               ; preds = %79
  %84 = add nsw i64 %80, -1
  br label %88

85:                                               ; preds = %154
  %86 = add nsw i64 %80, -1
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %302, label %88

88:                                               ; preds = %83, %85
  %89 = phi i64 [ %84, %83 ], [ %86, %85 ]
  %90 = bitcast %class.SkOpContour** %76 to i64*
  br label %158

91:                                               ; preds = %79, %154
  %92 = phi i64 [ %93, %154 ], [ %81, %79 ]
  %93 = add nsw i64 %92, -1
  %94 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %76, i64 %93
  %95 = load %class.SkOpContour*, %class.SkOpContour** %94, align 8
  %96 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %95, i64 0, i32 4, i32 0, i32 0
  %97 = shl i64 %92, 1
  %98 = icmp ugt i64 %97, %80
  br i1 %98, label %154, label %99

99:                                               ; preds = %91
  %100 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %95, i64 0, i32 4, i32 0, i32 1
  br label %101

101:                                              ; preds = %145, %99
  %102 = phi i64 [ %97, %99 ], [ %149, %145 ]
  %103 = phi i64 [ %92, %99 ], [ %129, %145 ]
  %104 = icmp ult i64 %102, %80
  br i1 %104, label %105, label %128

105:                                              ; preds = %101
  %106 = add i64 %102, -1
  %107 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %76, i64 %106
  %108 = load %class.SkOpContour*, %class.SkOpContour** %107, align 8
  %109 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %76, i64 %102
  %110 = load %class.SkOpContour*, %class.SkOpContour** %109, align 8
  %111 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %108, i64 0, i32 4, i32 0, i32 1
  %112 = load float, float* %111, align 4
  %113 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %110, i64 0, i32 4, i32 0, i32 1
  %114 = load float, float* %113, align 4
  %115 = fcmp oeq float %112, %114
  br i1 %115, label %116, label %122

116:                                              ; preds = %105
  %117 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %108, i64 0, i32 4, i32 0, i32 0
  %118 = load float, float* %117, align 8
  %119 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %110, i64 0, i32 4, i32 0, i32 0
  %120 = load float, float* %119, align 8
  %121 = fcmp olt float %118, %120
  br label %124

122:                                              ; preds = %105
  %123 = fcmp olt float %112, %114
  br label %124

124:                                              ; preds = %122, %116
  %125 = phi i1 [ %121, %116 ], [ %123, %122 ]
  %126 = zext i1 %125 to i64
  %127 = or i64 %102, %126
  br label %128

128:                                              ; preds = %124, %101
  %129 = phi i64 [ %102, %101 ], [ %127, %124 ]
  %130 = add i64 %129, -1
  %131 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %76, i64 %130
  %132 = load %class.SkOpContour*, %class.SkOpContour** %131, align 8
  %133 = load float, float* %100, align 4
  %134 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %132, i64 0, i32 4, i32 0, i32 1
  %135 = load float, float* %134, align 4
  %136 = fcmp oeq float %133, %135
  %137 = ptrtoint %class.SkOpContour* %132 to i64
  br i1 %136, label %138, label %143

138:                                              ; preds = %128
  %139 = load float, float* %96, align 8
  %140 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %132, i64 0, i32 4, i32 0, i32 0
  %141 = load float, float* %140, align 8
  %142 = fcmp olt float %139, %141
  br i1 %142, label %145, label %151

143:                                              ; preds = %128
  %144 = fcmp olt float %133, %135
  br i1 %144, label %145, label %151

145:                                              ; preds = %143, %138
  %146 = add i64 %103, -1
  %147 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %76, i64 %146
  %148 = bitcast %class.SkOpContour** %147 to i64*
  store i64 %137, i64* %148, align 8
  %149 = shl i64 %129, 1
  %150 = icmp ugt i64 %149, %80
  br i1 %150, label %151, label %101

151:                                              ; preds = %145, %143, %138
  %152 = phi i64 [ %103, %143 ], [ %129, %145 ], [ %103, %138 ]
  %153 = add i64 %152, -1
  br label %154

154:                                              ; preds = %91, %151
  %155 = phi i64 [ %153, %151 ], [ %93, %91 ]
  %156 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %76, i64 %155
  store %class.SkOpContour* %95, %class.SkOpContour** %156, align 8
  %157 = icmp eq i64 %93, 0
  br i1 %157, label %85, label %91

158:                                              ; preds = %237, %88
  %159 = phi i64 [ %89, %88 ], [ %240, %237 ]
  %160 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %76, i64 %159
  %161 = load i64, i64* %90, align 8
  %162 = bitcast %class.SkOpContour** %160 to i64*
  %163 = load i64, i64* %162, align 8
  store i64 %163, i64* %90, align 8
  store i64 %161, i64* %162, align 8
  %164 = load %class.SkOpContour*, %class.SkOpContour** %76, align 8
  %165 = icmp ult i64 %159, 2
  br i1 %165, label %302, label %172

166:                                              ; preds = %199
  %167 = lshr i64 %200, 1
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %237, label %169

169:                                              ; preds = %166
  %170 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %164, i64 0, i32 4, i32 0, i32 1
  %171 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %164, i64 0, i32 4, i32 0, i32 0
  br label %210

172:                                              ; preds = %158, %199
  %173 = phi i64 [ %208, %199 ], [ 2, %158 ]
  %174 = phi i64 [ %200, %199 ], [ 1, %158 ]
  %175 = icmp ult i64 %173, %159
  br i1 %175, label %176, label %199

176:                                              ; preds = %172
  %177 = add i64 %173, -1
  %178 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %76, i64 %177
  %179 = load %class.SkOpContour*, %class.SkOpContour** %178, align 8
  %180 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %76, i64 %173
  %181 = load %class.SkOpContour*, %class.SkOpContour** %180, align 8
  %182 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %179, i64 0, i32 4, i32 0, i32 1
  %183 = load float, float* %182, align 4
  %184 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %181, i64 0, i32 4, i32 0, i32 1
  %185 = load float, float* %184, align 4
  %186 = fcmp oeq float %183, %185
  br i1 %186, label %187, label %193

187:                                              ; preds = %176
  %188 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %179, i64 0, i32 4, i32 0, i32 0
  %189 = load float, float* %188, align 8
  %190 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %181, i64 0, i32 4, i32 0, i32 0
  %191 = load float, float* %190, align 8
  %192 = fcmp olt float %189, %191
  br label %195

193:                                              ; preds = %176
  %194 = fcmp olt float %183, %185
  br label %195

195:                                              ; preds = %193, %187
  %196 = phi i1 [ %192, %187 ], [ %194, %193 ]
  %197 = zext i1 %196 to i64
  %198 = or i64 %173, %197
  br label %199

199:                                              ; preds = %195, %172
  %200 = phi i64 [ %173, %172 ], [ %198, %195 ]
  %201 = add i64 %200, -1
  %202 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %76, i64 %201
  %203 = bitcast %class.SkOpContour** %202 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = add i64 %174, -1
  %206 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %76, i64 %205
  %207 = bitcast %class.SkOpContour** %206 to i64*
  store i64 %204, i64* %207, align 8
  %208 = shl i64 %200, 1
  %209 = icmp ugt i64 %208, %159
  br i1 %209, label %166, label %172

210:                                              ; preds = %228, %169
  %211 = phi i64 [ %167, %169 ], [ %232, %228 ]
  %212 = phi i64 [ %200, %169 ], [ %211, %228 ]
  %213 = add nsw i64 %211, -1
  %214 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %76, i64 %213
  %215 = load %class.SkOpContour*, %class.SkOpContour** %214, align 8
  %216 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %215, i64 0, i32 4, i32 0, i32 1
  %217 = load float, float* %216, align 4
  %218 = load float, float* %170, align 4
  %219 = fcmp oeq float %217, %218
  %220 = ptrtoint %class.SkOpContour* %215 to i64
  br i1 %219, label %221, label %226

221:                                              ; preds = %210
  %222 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %215, i64 0, i32 4, i32 0, i32 0
  %223 = load float, float* %222, align 8
  %224 = load float, float* %171, align 8
  %225 = fcmp olt float %223, %224
  br i1 %225, label %228, label %234

226:                                              ; preds = %210
  %227 = fcmp olt float %217, %218
  br i1 %227, label %228, label %234

228:                                              ; preds = %226, %221
  %229 = add i64 %212, -1
  %230 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %76, i64 %229
  %231 = bitcast %class.SkOpContour** %230 to i64*
  store i64 %220, i64* %231, align 8
  %232 = lshr i64 %211, 1
  %233 = icmp eq i64 %232, 0
  br i1 %233, label %234, label %210

234:                                              ; preds = %228, %226, %221
  %235 = phi i64 [ %212, %221 ], [ %211, %228 ], [ %212, %226 ]
  %236 = add i64 %235, -1
  br label %237

237:                                              ; preds = %234, %166
  %238 = phi i64 [ %236, %234 ], [ %201, %166 ]
  %239 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %76, i64 %238
  store %class.SkOpContour* %164, %class.SkOpContour** %239, align 8
  %240 = add i64 %159, -1
  %241 = icmp eq i64 %240, 0
  br i1 %241, label %302, label %158

242:                                              ; preds = %74
  %243 = add nsw i32 %75, -1
  %244 = add nsw i32 %77, -1
  %245 = ashr i32 %244, 1
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %76, i64 %246
  %248 = sext i32 %77 to i64
  %249 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %76, i64 -1
  %250 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %249, i64 %248
  %251 = load %class.SkOpContour*, %class.SkOpContour** %247, align 8
  %252 = bitcast %class.SkOpContour** %247 to i64*
  %253 = ptrtoint %class.SkOpContour* %251 to i64
  %254 = bitcast %class.SkOpContour** %250 to i64*
  %255 = load i64, i64* %254, align 8
  store i64 %255, i64* %252, align 8
  store i64 %253, i64* %254, align 8
  %256 = icmp ugt %class.SkOpContour** %250, %76
  br i1 %256, label %257, label %287

257:                                              ; preds = %242
  %258 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %251, i64 0, i32 4, i32 0, i32 1
  %259 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %251, i64 0, i32 4, i32 0, i32 0
  br label %260

260:                                              ; preds = %281, %257
  %261 = phi %class.SkOpContour** [ %76, %257 ], [ %282, %281 ]
  %262 = phi %class.SkOpContour** [ %76, %257 ], [ %283, %281 ]
  %263 = load %class.SkOpContour*, %class.SkOpContour** %262, align 8
  %264 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %263, i64 0, i32 4, i32 0, i32 1
  %265 = load float, float* %264, align 4
  %266 = load float, float* %258, align 4
  %267 = fcmp oeq float %265, %266
  %268 = ptrtoint %class.SkOpContour* %263 to i64
  br i1 %267, label %269, label %274

269:                                              ; preds = %260
  %270 = getelementptr inbounds %class.SkOpContour, %class.SkOpContour* %263, i64 0, i32 4, i32 0, i32 0
  %271 = load float, float* %270, align 8
  %272 = load float, float* %259, align 8
  %273 = fcmp olt float %271, %272
  br i1 %273, label %276, label %281

274:                                              ; preds = %260
  %275 = fcmp olt float %265, %266
  br i1 %275, label %276, label %281

276:                                              ; preds = %274, %269
  %277 = bitcast %class.SkOpContour** %262 to i64*
  %278 = bitcast %class.SkOpContour** %261 to i64*
  %279 = load i64, i64* %278, align 8
  store i64 %279, i64* %277, align 8
  store i64 %268, i64* %278, align 8
  %280 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %261, i64 1
  br label %281

281:                                              ; preds = %276, %274, %269
  %282 = phi %class.SkOpContour** [ %280, %276 ], [ %261, %274 ], [ %261, %269 ]
  %283 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %262, i64 1
  %284 = icmp ult %class.SkOpContour** %283, %250
  br i1 %284, label %260, label %285

285:                                              ; preds = %281
  %286 = load i64, i64* %254, align 8
  br label %287

287:                                              ; preds = %242, %285
  %288 = phi i64 [ %253, %242 ], [ %286, %285 ]
  %289 = phi %class.SkOpContour** [ %76, %242 ], [ %282, %285 ]
  %290 = bitcast %class.SkOpContour** %289 to i64*
  %291 = load i64, i64* %290, align 8
  store i64 %288, i64* %290, align 8
  store i64 %291, i64* %254, align 8
  %292 = ptrtoint %class.SkOpContour** %289 to i64
  %293 = ptrtoint %class.SkOpContour** %76 to i64
  %294 = sub i64 %292, %293
  %295 = lshr exact i64 %294, 3
  %296 = trunc i64 %295 to i32
  tail call void @_Z12SkTIntroSortIP11SkOpContourZ8SkTQSortIS0_EvPPT_S5_EUlPKS0_S7_E_EviS4_iRKT0_(i32 %243, %class.SkOpContour** %76, i32 %296, %class.anon.7* dereferenceable(1) %3)
  %297 = add nsw i32 %296, 1
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds %class.SkOpContour*, %class.SkOpContour** %76, i64 %298
  %300 = sub nsw i32 %77, %297
  %301 = icmp slt i32 %300, 33
  br i1 %301, label %6, label %74

302:                                              ; preds = %237, %158, %71, %85, %6
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{i32 0, i32 33}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
