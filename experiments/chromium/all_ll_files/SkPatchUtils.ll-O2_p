; ModuleID = '../../third_party/skia/src/utils/SkPatchUtils.cpp'
source_filename = "../../third_party/skia/src/utils/SkPatchUtils.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkPoint = type { float, float }
%class.SkMatrix = type { [9 x float], i32 }
%class.sk_sp = type { %class.SkVertices* }
%class.SkVertices = type <{ %class.SkNVRefCnt.6, i32, %struct.SkPoint*, i16*, %struct.SkPoint*, i32*, %struct.SkRect, i32, i32, i32, [4 x i8] }>
%class.SkNVRefCnt.6 = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.10, i32, i32 }
%class.sk_sp.10 = type { %class.SkColorSpace* }
%struct.SkISize = type { i32, i32 }
%class.SkSTArenaAlloc = type { %"struct.std::__1::array", %class.SkArenaAlloc.base, [4 x i8] }
%"struct.std::__1::array" = type { [2048 x i8] }
%class.SkArenaAlloc.base = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes }>
%class.SkFibBlockSizes = type { i32 }
%"class.SkVertices::Builder" = type { %class.sk_sp, %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%struct.SkRGBA4f = type { float, float, float, float }

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN12SkPatchUtils16GetLevelOfDetailEPK7SkPointPK8SkMatrix(%struct.SkPoint* nocapture readonly, %class.SkMatrix*) local_unnamed_addr #0 align 2 {
  %3 = alloca [4 x %struct.SkPoint], align 16
  %4 = bitcast [4 x %struct.SkPoint]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #9
  %5 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %3, i64 0, i64 0
  %6 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %3, i64 0, i64 0, i32 0
  %7 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %3, i64 0, i64 0, i32 1
  %8 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %3, i64 0, i64 1, i32 0
  %9 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %3, i64 0, i64 1, i32 1
  %10 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %3, i64 0, i64 2, i32 0
  %11 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %3, i64 0, i64 2, i32 1
  %12 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %3, i64 0, i64 3, i32 0
  %13 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %3, i64 0, i64 3, i32 1
  %14 = bitcast %struct.SkPoint* %0 to i64*
  %15 = bitcast [4 x %struct.SkPoint]* %3 to i64*
  %16 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %3, i64 0, i64 1
  %17 = bitcast %struct.SkPoint* %0 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 4
  %19 = bitcast [4 x %struct.SkPoint]* %3 to <2 x i64>*
  store <2 x i64> %18, <2 x i64>* %19, align 16
  %20 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %21 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %3, i64 0, i64 2
  %22 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3
  %23 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %3, i64 0, i64 3
  %24 = bitcast %struct.SkPoint* %23 to i64*
  %25 = bitcast %struct.SkPoint* %20 to <2 x i64>*
  %26 = load <2 x i64>, <2 x i64>* %25, align 4
  %27 = bitcast %struct.SkPoint* %21 to <2 x i64>*
  store <2 x i64> %26, <2 x i64>* %27, align 16
  call void @_ZNK8SkMatrix9mapPointsEP7SkPointPKS0_i(%class.SkMatrix* %1, %struct.SkPoint* nonnull %5, %struct.SkPoint* nonnull %5, i32 4) #9
  %28 = load float, float* %6, align 16
  %29 = load float, float* %8, align 8
  %30 = fsub float %28, %29
  %31 = load float, float* %7, align 4
  %32 = load float, float* %9, align 4
  %33 = fsub float %31, %32
  %34 = call float @_ZN7SkPoint6LengthEff(float %30, float %33) #9
  %35 = load float, float* %8, align 8
  %36 = load float, float* %10, align 16
  %37 = fsub float %35, %36
  %38 = load float, float* %9, align 4
  %39 = load float, float* %11, align 4
  %40 = fsub float %38, %39
  %41 = call float @_ZN7SkPoint6LengthEff(float %37, float %40) #9
  %42 = load float, float* %10, align 16
  %43 = load float, float* %12, align 8
  %44 = fsub float %42, %43
  %45 = load float, float* %11, align 4
  %46 = load float, float* %13, align 4
  %47 = fsub float %45, %46
  %48 = call float @_ZN7SkPoint6LengthEff(float %44, float %47) #9
  %49 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 9
  %50 = bitcast %struct.SkPoint* %49 to i64*
  %51 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 8
  %52 = bitcast %struct.SkPoint* %51 to <2 x i64>*
  %53 = load <2 x i64>, <2 x i64>* %52, align 4
  %54 = shufflevector <2 x i64> %53, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %55 = bitcast [4 x %struct.SkPoint]* %3 to <2 x i64>*
  store <2 x i64> %54, <2 x i64>* %55, align 16
  %56 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 6
  %57 = bitcast %struct.SkPoint* %56 to <2 x i64>*
  %58 = load <2 x i64>, <2 x i64>* %57, align 4
  %59 = shufflevector <2 x i64> %58, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %60 = bitcast %struct.SkPoint* %21 to <2 x i64>*
  store <2 x i64> %59, <2 x i64>* %60, align 16
  call void @_ZNK8SkMatrix9mapPointsEP7SkPointPKS0_i(%class.SkMatrix* %1, %struct.SkPoint* nonnull %5, %struct.SkPoint* nonnull %5, i32 4) #9
  %61 = load float, float* %6, align 16
  %62 = load float, float* %8, align 8
  %63 = fsub float %61, %62
  %64 = load float, float* %7, align 4
  %65 = load float, float* %9, align 4
  %66 = fsub float %64, %65
  %67 = call float @_ZN7SkPoint6LengthEff(float %63, float %66) #9
  %68 = load float, float* %8, align 8
  %69 = load float, float* %10, align 16
  %70 = fsub float %68, %69
  %71 = load float, float* %9, align 4
  %72 = load float, float* %11, align 4
  %73 = fsub float %71, %72
  %74 = call float @_ZN7SkPoint6LengthEff(float %70, float %73) #9
  %75 = load float, float* %10, align 16
  %76 = load float, float* %12, align 8
  %77 = fsub float %75, %76
  %78 = load float, float* %11, align 4
  %79 = load float, float* %13, align 4
  %80 = fsub float %78, %79
  %81 = call float @_ZN7SkPoint6LengthEff(float %77, float %80) #9
  %82 = load i64, i64* %14, align 4
  store i64 %82, i64* %15, align 16
  %83 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 10
  %84 = bitcast %struct.SkPoint* %83 to <2 x i64>*
  %85 = load <2 x i64>, <2 x i64>* %84, align 4
  %86 = shufflevector <2 x i64> %85, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %87 = bitcast %struct.SkPoint* %16 to <2 x i64>*
  store <2 x i64> %86, <2 x i64>* %87, align 8
  %88 = load i64, i64* %50, align 4
  store i64 %88, i64* %24, align 8
  call void @_ZNK8SkMatrix9mapPointsEP7SkPointPKS0_i(%class.SkMatrix* %1, %struct.SkPoint* nonnull %5, %struct.SkPoint* nonnull %5, i32 4) #9
  %89 = load float, float* %6, align 16
  %90 = load float, float* %8, align 8
  %91 = fsub float %89, %90
  %92 = load float, float* %7, align 4
  %93 = load float, float* %9, align 4
  %94 = fsub float %92, %93
  %95 = call float @_ZN7SkPoint6LengthEff(float %91, float %94) #9
  %96 = load float, float* %8, align 8
  %97 = load float, float* %10, align 16
  %98 = fsub float %96, %97
  %99 = load float, float* %9, align 4
  %100 = load float, float* %11, align 4
  %101 = fsub float %99, %100
  %102 = call float @_ZN7SkPoint6LengthEff(float %98, float %101) #9
  %103 = load float, float* %10, align 16
  %104 = load float, float* %12, align 8
  %105 = fsub float %103, %104
  %106 = load float, float* %11, align 4
  %107 = load float, float* %13, align 4
  %108 = fsub float %106, %107
  %109 = call float @_ZN7SkPoint6LengthEff(float %105, float %108) #9
  %110 = bitcast %struct.SkPoint* %22 to <2 x i64>*
  %111 = load <2 x i64>, <2 x i64>* %110, align 4
  %112 = bitcast [4 x %struct.SkPoint]* %3 to <2 x i64>*
  store <2 x i64> %111, <2 x i64>* %112, align 16
  %113 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 5
  %114 = bitcast %struct.SkPoint* %113 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 4
  %116 = bitcast %struct.SkPoint* %21 to <2 x i64>*
  store <2 x i64> %115, <2 x i64>* %116, align 16
  call void @_ZNK8SkMatrix9mapPointsEP7SkPointPKS0_i(%class.SkMatrix* %1, %struct.SkPoint* nonnull %5, %struct.SkPoint* nonnull %5, i32 4) #9
  %117 = load float, float* %6, align 16
  %118 = load float, float* %8, align 8
  %119 = fsub float %117, %118
  %120 = load float, float* %7, align 4
  %121 = load float, float* %9, align 4
  %122 = fsub float %120, %121
  %123 = call float @_ZN7SkPoint6LengthEff(float %119, float %122) #9
  %124 = insertelement <4 x float> undef, float %34, i32 0
  %125 = insertelement <4 x float> %124, float %67, i32 1
  %126 = insertelement <4 x float> %125, float %95, i32 2
  %127 = insertelement <4 x float> %126, float %123, i32 3
  %128 = fadd <4 x float> %127, zeroinitializer
  %129 = load float, float* %8, align 8
  %130 = load float, float* %10, align 16
  %131 = fsub float %129, %130
  %132 = load float, float* %9, align 4
  %133 = load float, float* %11, align 4
  %134 = fsub float %132, %133
  %135 = call float @_ZN7SkPoint6LengthEff(float %131, float %134) #9
  %136 = insertelement <4 x float> undef, float %41, i32 0
  %137 = insertelement <4 x float> %136, float %74, i32 1
  %138 = insertelement <4 x float> %137, float %102, i32 2
  %139 = insertelement <4 x float> %138, float %135, i32 3
  %140 = fadd <4 x float> %128, %139
  %141 = load float, float* %10, align 16
  %142 = load float, float* %12, align 8
  %143 = fsub float %141, %142
  %144 = load float, float* %11, align 4
  %145 = load float, float* %13, align 4
  %146 = fsub float %144, %145
  %147 = call float @_ZN7SkPoint6LengthEff(float %143, float %146) #9
  %148 = insertelement <4 x float> undef, float %48, i32 0
  %149 = insertelement <4 x float> %148, float %81, i32 1
  %150 = insertelement <4 x float> %149, float %109, i32 2
  %151 = insertelement <4 x float> %150, float %147, i32 3
  %152 = fadd <4 x float> %140, %151
  %153 = bitcast <4 x float> %152 to <4 x i32>
  %154 = and <4 x i32> %153, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %155 = icmp eq <4 x i32> %154, <i32 2139095040, i32 2139095040, i32 2139095040, i32 2139095040>
  %156 = select <4 x i1> %155, <4 x float> <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>, <4 x float> %152
  %157 = fcmp olt <4 x float> %156, zeroinitializer
  %158 = shufflevector <4 x i1> %157, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %159 = or <4 x i1> %157, %158
  %160 = shufflevector <4 x i1> %159, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %161 = or <4 x i1> %159, %160
  %162 = extractelement <4 x i1> %161, i32 0
  br i1 %162, label %183, label %163

163:                                              ; preds = %2
  %164 = extractelement <4 x float> %156, i32 0
  %165 = extractelement <4 x float> %156, i32 1
  %166 = fcmp olt float %164, %165
  %167 = select i1 %166, float %165, float %164
  %168 = fdiv float %167, 1.000000e+01
  %169 = fptosi float %168 to i32
  %170 = extractelement <4 x float> %156, i32 2
  %171 = extractelement <4 x float> %156, i32 3
  %172 = fcmp olt float %170, %171
  %173 = select i1 %172, float %171, float %170
  %174 = fdiv float %173, 1.000000e+01
  %175 = fptosi float %174 to i32
  %176 = icmp sgt i32 %169, 8
  %177 = select i1 %176, i32 %169, i32 8
  %178 = icmp sgt i32 %175, 8
  %179 = select i1 %178, i32 %175, i32 8
  %180 = zext i32 %179 to i64
  %181 = shl nuw nsw i64 %180, 32
  %182 = zext i32 %177 to i64
  br label %183

183:                                              ; preds = %2, %163
  %184 = phi i64 [ %182, %163 ], [ 0, %2 ]
  %185 = phi i64 [ %181, %163 ], [ 0, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #9
  %186 = or i64 %185, %184
  ret i64 %186
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN12SkPatchUtils11GetTopCubicEPK7SkPointPS0_(%struct.SkPoint* nocapture readonly, %struct.SkPoint* nocapture) local_unnamed_addr #2 align 2 {
  %3 = bitcast %struct.SkPoint* %0 to i64*
  %4 = bitcast %struct.SkPoint* %1 to i64*
  %5 = load i64, i64* %3, align 4
  store i64 %5, i64* %4, align 4
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %8 = bitcast %struct.SkPoint* %6 to i64*
  %9 = bitcast %struct.SkPoint* %7 to i64*
  %10 = load i64, i64* %8, align 4
  store i64 %10, i64* %9, align 4
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %13 = bitcast %struct.SkPoint* %11 to i64*
  %14 = bitcast %struct.SkPoint* %12 to i64*
  %15 = load i64, i64* %13, align 4
  store i64 %15, i64* %14, align 4
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3
  %18 = bitcast %struct.SkPoint* %16 to i64*
  %19 = bitcast %struct.SkPoint* %17 to i64*
  %20 = load i64, i64* %18, align 4
  store i64 %20, i64* %19, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN12SkPatchUtils14GetBottomCubicEPK7SkPointPS0_(%struct.SkPoint* nocapture readonly, %struct.SkPoint* nocapture) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 9
  %4 = bitcast %struct.SkPoint* %3 to i64*
  %5 = bitcast %struct.SkPoint* %1 to i64*
  %6 = load i64, i64* %4, align 4
  store i64 %6, i64* %5, align 4
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 8
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %9 = bitcast %struct.SkPoint* %7 to i64*
  %10 = bitcast %struct.SkPoint* %8 to i64*
  %11 = load i64, i64* %9, align 4
  store i64 %11, i64* %10, align 4
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 7
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %14 = bitcast %struct.SkPoint* %12 to i64*
  %15 = bitcast %struct.SkPoint* %13 to i64*
  %16 = load i64, i64* %14, align 4
  store i64 %16, i64* %15, align 4
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 6
  %18 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3
  %19 = bitcast %struct.SkPoint* %17 to i64*
  %20 = bitcast %struct.SkPoint* %18 to i64*
  %21 = load i64, i64* %19, align 4
  store i64 %21, i64* %20, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN12SkPatchUtils12GetLeftCubicEPK7SkPointPS0_(%struct.SkPoint* nocapture readonly, %struct.SkPoint* nocapture) local_unnamed_addr #2 align 2 {
  %3 = bitcast %struct.SkPoint* %0 to i64*
  %4 = bitcast %struct.SkPoint* %1 to i64*
  %5 = load i64, i64* %3, align 4
  store i64 %5, i64* %4, align 4
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 11
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %8 = bitcast %struct.SkPoint* %6 to i64*
  %9 = bitcast %struct.SkPoint* %7 to i64*
  %10 = load i64, i64* %8, align 4
  store i64 %10, i64* %9, align 4
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 10
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %13 = bitcast %struct.SkPoint* %11 to i64*
  %14 = bitcast %struct.SkPoint* %12 to i64*
  %15 = load i64, i64* %13, align 4
  store i64 %15, i64* %14, align 4
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 9
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3
  %18 = bitcast %struct.SkPoint* %16 to i64*
  %19 = bitcast %struct.SkPoint* %17 to i64*
  %20 = load i64, i64* %18, align 4
  store i64 %20, i64* %19, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN12SkPatchUtils13GetRightCubicEPK7SkPointPS0_(%struct.SkPoint* nocapture readonly, %struct.SkPoint* nocapture) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3
  %4 = bitcast %struct.SkPoint* %3 to i64*
  %5 = bitcast %struct.SkPoint* %1 to i64*
  %6 = load i64, i64* %4, align 4
  store i64 %6, i64* %5, align 4
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 4
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %9 = bitcast %struct.SkPoint* %7 to i64*
  %10 = bitcast %struct.SkPoint* %8 to i64*
  %11 = load i64, i64* %9, align 4
  store i64 %11, i64* %10, align 4
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 5
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %14 = bitcast %struct.SkPoint* %12 to i64*
  %15 = bitcast %struct.SkPoint* %13 to i64*
  %16 = load i64, i64* %14, align 4
  store i64 %16, i64* %15, align 4
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 6
  %18 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3
  %19 = bitcast %struct.SkPoint* %17 to i64*
  %20 = bitcast %struct.SkPoint* %18 to i64*
  %21 = load i64, i64* %19, align 4
  store i64 %21, i64* %20, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkPatchUtils12MakeVerticesEPK7SkPointPKjS2_iiP12SkColorSpace(%class.sk_sp* noalias sret, %struct.SkPoint* readonly, i32*, %struct.SkPoint* readonly, i32, i32, %class.SkColorSpace*) local_unnamed_addr #3 align 2 {
  %8 = alloca %struct.SkImageInfo, align 8
  %9 = alloca %class.sk_sp.10, align 8
  %10 = alloca %struct.SkImageInfo, align 8
  %11 = alloca %struct.SkImageInfo, align 8
  %12 = alloca %struct.SkImageInfo, align 8
  %13 = alloca %class.sk_sp.10, align 8
  %14 = alloca %class.SkSTArenaAlloc, align 8
  %15 = alloca %"class.SkVertices::Builder", align 8
  %16 = icmp slt i32 %4, 1
  %17 = icmp slt i32 %5, 1
  %18 = or i1 %16, %17
  %19 = icmp eq %struct.SkPoint* %1, null
  %20 = or i1 %19, %18
  br i1 %20, label %21, label %23

21:                                               ; preds = %7
  %22 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  store %class.SkVertices* null, %class.SkVertices** %22, align 8
  br label %685

23:                                               ; preds = %7
  %24 = add nuw nsw i32 %4, 1
  %25 = sext i32 %24 to i64
  %26 = add nuw nsw i32 %5, 1
  %27 = sext i32 %26 to i64
  %28 = mul nsw i64 %27, %25
  %29 = icmp sgt i64 %28, 2147483647
  br i1 %29, label %30, label %32

30:                                               ; preds = %23
  %31 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  store %class.SkVertices* null, %class.SkVertices** %31, align 8
  br label %685

32:                                               ; preds = %23
  %33 = icmp eq %class.SkColorSpace* %6, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %32
  %35 = tail call %class.SkColorSpace* @_Z17sk_srgb_singletonv() #9
  br label %36

36:                                               ; preds = %32, %34
  %37 = phi %class.SkColorSpace* [ %6, %32 ], [ %35, %34 ]
  %38 = trunc i64 %28 to i32
  %39 = icmp sgt i32 %38, 10000
  %40 = icmp sgt i32 %4, 200
  %41 = or i1 %40, %39
  %42 = icmp sgt i32 %5, 200
  %43 = or i1 %42, %41
  br i1 %43, label %44, label %64

44:                                               ; preds = %36
  %45 = sitofp i32 %4 to float
  %46 = add nuw nsw i32 %5, %4
  %47 = sitofp i32 %46 to float
  %48 = fdiv float %45, %47
  %49 = sitofp i32 %5 to float
  %50 = fdiv float %49, %47
  %51 = fmul float %48, 2.000000e+02
  %52 = tail call float @llvm.floor.f32(float %51)
  %53 = fptosi float %52 to i32
  %54 = icmp sgt i32 %53, 1
  %55 = select i1 %54, i32 %53, i32 1
  %56 = fmul float %50, 2.000000e+02
  %57 = tail call float @llvm.floor.f32(float %56)
  %58 = fptosi float %57 to i32
  %59 = icmp sgt i32 %58, 1
  %60 = select i1 %59, i32 %58, i32 1
  %61 = add nuw nsw i32 %55, 1
  %62 = add nuw nsw i32 %60, 1
  %63 = mul nsw i32 %61, %62
  br label %64

64:                                               ; preds = %36, %44
  %65 = phi i32 [ %63, %44 ], [ %38, %36 ]
  %66 = phi i32 [ %60, %44 ], [ %5, %36 ]
  %67 = phi i32 [ %55, %44 ], [ %4, %36 ]
  %68 = mul i32 %66, 6
  %69 = mul i32 %68, %67
  %70 = icmp ne %struct.SkPoint* %3, null
  %71 = zext i1 %70 to i32
  %72 = icmp ne i32* %2, null
  %73 = or i32 %71, 2
  %74 = select i1 %72, i32 %73, i32 %71
  %75 = getelementptr inbounds %class.SkSTArenaAlloc, %class.SkSTArenaAlloc* %14, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 2080, i8* nonnull %75) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %75, i8 -86, i64 2080, i1 false)
  %76 = getelementptr inbounds %class.SkSTArenaAlloc, %class.SkSTArenaAlloc* %14, i64 0, i32 0, i32 0, i64 2048
  %77 = bitcast i8* %76 to %class.SkArenaAlloc*
  call void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc* %77, i8* nonnull %75, i64 2048, i64 2048) #9
  br i1 %72, label %78, label %132

78:                                               ; preds = %64
  %79 = getelementptr inbounds %class.SkSTArenaAlloc, %class.SkSTArenaAlloc* %14, i64 0, i32 0, i32 0, i64 2056
  %80 = bitcast i8* %79 to i8**
  %81 = bitcast i8* %79 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = sub i64 0, %82
  %84 = and i64 %83, 3
  %85 = or i64 %84, 64
  %86 = getelementptr inbounds %class.SkSTArenaAlloc, %class.SkSTArenaAlloc* %14, i64 0, i32 0, i32 0, i64 2064
  %87 = bitcast i8* %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = sub i64 %88, %82
  %90 = icmp ugt i64 %85, %89
  br i1 %90, label %91, label %95

91:                                               ; preds = %78
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %77, i32 64, i32 4) #9
  %92 = load i64, i64* %81, align 8
  %93 = sub i64 0, %92
  %94 = and i64 %93, 3
  br label %95

95:                                               ; preds = %91, %78
  %96 = phi i64 [ %92, %91 ], [ %82, %78 ]
  %97 = phi i64 [ %94, %91 ], [ %84, %78 ]
  %98 = inttoptr i64 %96 to i8*
  %99 = getelementptr inbounds i8, i8* %98, i64 %97
  %100 = getelementptr inbounds i8, i8* %99, i64 64
  store i8* %100, i8** %80, align 8
  %101 = bitcast i8* %99 to %struct.SkRGBA4f*
  call void @llvm.memset.p0i8.i64(i8* align 4 %99, i8 0, i64 64, i1 false) #9
  %102 = sext i32 %65 to i64
  %103 = icmp sgt i32 %65, -1
  br i1 %103, label %105, label %104

104:                                              ; preds = %95
  call void @abort() #10
  unreachable

105:                                              ; preds = %95
  %106 = icmp ult i32 %65, 268435456
  br i1 %106, label %108, label %107

107:                                              ; preds = %105
  call void @abort() #10
  unreachable

108:                                              ; preds = %105
  %109 = shl nsw i64 %102, 4
  %110 = load i64, i64* %81, align 8
  %111 = sub i64 0, %110
  %112 = and i64 %111, 3
  %113 = and i64 %109, 4294967280
  %114 = or i64 %112, %113
  %115 = load i64, i64* %87, align 8
  %116 = sub i64 %115, %110
  %117 = icmp ugt i64 %114, %116
  br i1 %117, label %118, label %123

118:                                              ; preds = %108
  %119 = trunc i64 %109 to i32
  call void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc* %77, i32 %119, i32 4) #9
  %120 = load i64, i64* %81, align 8
  %121 = sub i64 0, %120
  %122 = and i64 %121, 3
  br label %123

123:                                              ; preds = %118, %108
  %124 = phi i64 [ %120, %118 ], [ %110, %108 ]
  %125 = phi i64 [ %122, %118 ], [ %112, %108 ]
  %126 = inttoptr i64 %124 to i8*
  %127 = getelementptr inbounds i8, i8* %126, i64 %125
  %128 = getelementptr inbounds i8, i8* %127, i64 %113
  store i8* %128, i8** %80, align 8
  %129 = bitcast i8* %127 to %struct.SkRGBA4f*
  %130 = icmp eq i32 %65, 0
  br i1 %130, label %132, label %131

131:                                              ; preds = %123
  call void @llvm.memset.p0i8.i64(i8* align 4 %127, i8 0, i64 %109, i1 false) #9
  br label %132

132:                                              ; preds = %131, %123, %64
  %133 = phi i8* [ null, %64 ], [ %99, %123 ], [ %99, %131 ]
  %134 = phi %struct.SkRGBA4f* [ null, %64 ], [ %101, %123 ], [ %101, %131 ]
  %135 = phi i8* [ null, %64 ], [ %127, %123 ], [ %127, %131 ]
  %136 = phi %struct.SkRGBA4f* [ null, %64 ], [ %129, %123 ], [ %129, %131 ]
  %137 = bitcast %"class.SkVertices::Builder"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %137) #9
  %138 = getelementptr inbounds %"class.SkVertices::Builder", %"class.SkVertices::Builder"* %15, i64 0, i32 0, i32 0
  %139 = getelementptr inbounds %"class.SkVertices::Builder", %"class.SkVertices::Builder"* %15, i64 0, i32 1, i32 0, i32 0, i32 0
  %140 = bitcast %"class.SkVertices::Builder"* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %140, i8 -86, i64 16, i1 false)
  call void @_ZN10SkVertices7BuilderC1ENS_10VertexModeEiij(%"class.SkVertices::Builder"* nonnull %15, i32 0, i32 %65, i32 %69, i32 %74) #9
  %141 = call %struct.SkPoint* @_ZN10SkVertices7Builder9positionsEv(%"class.SkVertices::Builder"* nonnull %15) #9
  %142 = call %struct.SkPoint* @_ZN10SkVertices7Builder9texCoordsEv(%"class.SkVertices::Builder"* nonnull %15) #9
  %143 = call i16* @_ZN10SkVertices7Builder7indicesEv(%"class.SkVertices::Builder"* nonnull %15) #9
  %144 = icmp ne %struct.SkRGBA4f* %134, null
  br i1 %144, label %145, label %186

145:                                              ; preds = %132
  %146 = bitcast %class.sk_sp.10* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %146)
  %147 = bitcast %struct.SkImageInfo* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %147) #9
  %148 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %8, i64 0, i32 0, i32 0, i32 0
  %149 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %8, i64 0, i32 0, i32 1
  call void @_ZN12SkColorSpace8MakeSRGBEv(%class.sk_sp.10* nonnull sret %9) #9
  %150 = getelementptr inbounds %class.sk_sp.10, %class.sk_sp.10* %9, i64 0, i32 0
  %151 = bitcast %class.sk_sp.10* %9 to i64*
  %152 = load i64, i64* %151, align 8, !noalias !2
  store %class.SkColorSpace* null, %class.SkColorSpace** %150, align 8, !noalias !2
  %153 = bitcast %struct.SkImageInfo* %8 to i64*
  store i64 %152, i64* %153, align 8, !alias.scope !2
  %154 = bitcast i32* %149 to <2 x i64>*
  store <2 x i64> <i64 12884901894, i64 4294967300>, <2 x i64>* %154, align 8, !alias.scope !2
  %155 = bitcast %struct.SkImageInfo* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %155) #9
  %156 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %10, i64 0, i32 0, i32 0, i32 0
  %157 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %10, i64 0, i32 0, i32 1
  %158 = icmp eq %class.SkColorSpace* %37, null
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %155, i8 -86, i64 24, i1 false) #9
  br i1 %158, label %162, label %159

159:                                              ; preds = %145
  %160 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %37, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %161 = atomicrmw add i32* %160, i32 1 monotonic, !noalias !5
  br label %162

162:                                              ; preds = %159, %145
  %163 = ptrtoint %class.SkColorSpace* %37 to i64
  %164 = bitcast %struct.SkImageInfo* %10 to i64*
  store i64 %163, i64* %164, align 8, !alias.scope !8
  %165 = bitcast i32* %157 to <2 x i64>*
  store <2 x i64> <i64 8589934606, i64 4294967300>, <2 x i64>* %165, align 8, !alias.scope !8
  %166 = bitcast i32* %2 to i8*
  %167 = call zeroext i1 @_Z15SkConvertPixelsRK11SkImageInfoPvmS1_PKvm(%struct.SkImageInfo* nonnull dereferenceable(24) %10, i8* %133, i64 0, %struct.SkImageInfo* nonnull dereferenceable(24) %8, i8* %166, i64 0) #9
  %168 = load %class.SkColorSpace*, %class.SkColorSpace** %156, align 8
  %169 = icmp eq %class.SkColorSpace* %168, null
  br i1 %169, label %176, label %170

170:                                              ; preds = %162
  %171 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %168, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %172 = atomicrmw add i32* %171, i32 -1 acq_rel
  %173 = icmp eq i32 %172, 1
  br i1 %173, label %174, label %176

174:                                              ; preds = %170
  %175 = bitcast %class.SkColorSpace* %168 to i8*
  call void @_ZdlPv(i8* %175) #11
  br label %176

176:                                              ; preds = %174, %170, %162
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %155) #9
  %177 = load %class.SkColorSpace*, %class.SkColorSpace** %148, align 8
  %178 = icmp eq %class.SkColorSpace* %177, null
  br i1 %178, label %185, label %179

179:                                              ; preds = %176
  %180 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %177, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %181 = atomicrmw add i32* %180, i32 -1 acq_rel
  %182 = icmp eq i32 %181, 1
  br i1 %182, label %183, label %185

183:                                              ; preds = %179
  %184 = bitcast %class.SkColorSpace* %177 to i8*
  call void @_ZdlPv(i8* %184) #11
  br label %185

185:                                              ; preds = %176, %179, %183
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %147) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %146)
  br label %186

186:                                              ; preds = %185, %132
  %187 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 9
  %188 = bitcast %struct.SkPoint* %187 to <2 x i32>*
  %189 = load <2 x i32>, <2 x i32>* %188, align 4
  %190 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 8
  %191 = bitcast %struct.SkPoint* %190 to i32*
  %192 = load i32, i32* %191, align 4
  %193 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 8, i32 1
  %194 = bitcast float* %193 to i32*
  %195 = load i32, i32* %194, align 4
  %196 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 7
  %197 = bitcast %struct.SkPoint* %196 to i32*
  %198 = load i32, i32* %197, align 4
  %199 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 7, i32 1
  %200 = bitcast float* %199 to i32*
  %201 = load i32, i32* %200, align 4
  %202 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 6
  %203 = bitcast %struct.SkPoint* %202 to <2 x i32>*
  %204 = load <2 x i32>, <2 x i32>* %203, align 4
  %205 = extractelement <2 x i32> %189, i32 1
  %206 = zext i32 %205 to i64
  %207 = shl nuw i64 %206, 32
  %208 = extractelement <2 x i32> %189, i32 0
  %209 = zext i32 %208 to i64
  %210 = or i64 %207, %209
  %211 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %210, i32 0
  %212 = bitcast <2 x i64> %211 to <4 x float>
  %213 = zext i32 %195 to i64
  %214 = shl nuw i64 %213, 32
  %215 = zext i32 %192 to i64
  %216 = or i64 %214, %215
  %217 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %216, i32 0
  %218 = bitcast <2 x i64> %217 to <4 x float>
  %219 = zext i32 %201 to i64
  %220 = shl nuw i64 %219, 32
  %221 = zext i32 %198 to i64
  %222 = or i64 %220, %221
  %223 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %222, i32 0
  %224 = bitcast <2 x i64> %223 to <4 x float>
  %225 = extractelement <2 x i32> %204, i32 1
  %226 = zext i32 %225 to i64
  %227 = shl nuw i64 %226, 32
  %228 = extractelement <2 x i32> %204, i32 0
  %229 = zext i32 %228 to i64
  %230 = or i64 %227, %229
  %231 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %230, i32 0
  %232 = bitcast <2 x i64> %231 to <4 x float>
  %233 = fsub <4 x float> %218, %224
  %234 = fmul <4 x float> %233, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %235 = fadd <4 x float> %234, %232
  %236 = fsub <4 x float> %235, %212
  %237 = fadd <4 x float> %218, %218
  %238 = fsub <4 x float> %224, %237
  %239 = fadd <4 x float> %238, %212
  %240 = fmul <4 x float> %239, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %241 = bitcast <2 x i32> %189 to <2 x float>
  %242 = bitcast <2 x i32> %204 to <2 x float>
  %243 = fmul <4 x float> %236, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %244 = bitcast %struct.SkPoint* %1 to <2 x i32>*
  %245 = load <2 x i32>, <2 x i32>* %244, align 4
  %246 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %247 = bitcast %struct.SkPoint* %246 to i32*
  %248 = load i32, i32* %247, align 4
  %249 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1, i32 1
  %250 = bitcast float* %249 to i32*
  %251 = load i32, i32* %250, align 4
  %252 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2
  %253 = bitcast %struct.SkPoint* %252 to i32*
  %254 = load i32, i32* %253, align 4
  %255 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 2, i32 1
  %256 = bitcast float* %255 to i32*
  %257 = load i32, i32* %256, align 4
  %258 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 3
  %259 = bitcast %struct.SkPoint* %258 to <2 x i32>*
  %260 = load <2 x i32>, <2 x i32>* %259, align 4
  %261 = extractelement <2 x i32> %245, i32 1
  %262 = zext i32 %261 to i64
  %263 = shl nuw i64 %262, 32
  %264 = extractelement <2 x i32> %245, i32 0
  %265 = zext i32 %264 to i64
  %266 = or i64 %263, %265
  %267 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %266, i32 0
  %268 = bitcast <2 x i64> %267 to <4 x float>
  %269 = zext i32 %251 to i64
  %270 = shl nuw i64 %269, 32
  %271 = zext i32 %248 to i64
  %272 = or i64 %270, %271
  %273 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %272, i32 0
  %274 = bitcast <2 x i64> %273 to <4 x float>
  %275 = zext i32 %257 to i64
  %276 = shl nuw i64 %275, 32
  %277 = zext i32 %254 to i64
  %278 = or i64 %276, %277
  %279 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %278, i32 0
  %280 = bitcast <2 x i64> %279 to <4 x float>
  %281 = extractelement <2 x i32> %260, i32 1
  %282 = zext i32 %281 to i64
  %283 = shl nuw i64 %282, 32
  %284 = extractelement <2 x i32> %260, i32 0
  %285 = zext i32 %284 to i64
  %286 = or i64 %283, %285
  %287 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %286, i32 0
  %288 = bitcast <2 x i64> %287 to <4 x float>
  %289 = fsub <4 x float> %274, %280
  %290 = fmul <4 x float> %289, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %291 = fadd <4 x float> %290, %288
  %292 = fsub <4 x float> %291, %268
  %293 = fadd <4 x float> %274, %274
  %294 = fsub <4 x float> %280, %293
  %295 = fadd <4 x float> %294, %268
  %296 = fmul <4 x float> %295, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %297 = bitcast <2 x i32> %245 to <2 x float>
  %298 = bitcast <2 x i32> %260 to <2 x float>
  %299 = fmul <4 x float> %292, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %300 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 11
  %301 = bitcast %struct.SkPoint* %300 to i32*
  %302 = load i32, i32* %301, align 4
  %303 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 11, i32 1
  %304 = bitcast float* %303 to i32*
  %305 = load i32, i32* %304, align 4
  %306 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 10
  %307 = bitcast %struct.SkPoint* %306 to i32*
  %308 = load i32, i32* %307, align 4
  %309 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 10, i32 1
  %310 = bitcast float* %309 to i32*
  %311 = load i32, i32* %310, align 4
  %312 = zext i32 %305 to i64
  %313 = shl nuw i64 %312, 32
  %314 = zext i32 %302 to i64
  %315 = or i64 %313, %314
  %316 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %315, i32 0
  %317 = bitcast <2 x i64> %316 to <4 x float>
  %318 = zext i32 %311 to i64
  %319 = shl nuw i64 %318, 32
  %320 = zext i32 %308 to i64
  %321 = or i64 %319, %320
  %322 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %321, i32 0
  %323 = bitcast <2 x i64> %322 to <4 x float>
  %324 = fsub <4 x float> %317, %323
  %325 = fmul <4 x float> %324, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %326 = fadd <4 x float> %325, %212
  %327 = fsub <4 x float> %326, %268
  %328 = fadd <4 x float> %317, %317
  %329 = fsub <4 x float> %323, %328
  %330 = fadd <4 x float> %329, %268
  %331 = fmul <4 x float> %330, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %332 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 4
  %333 = bitcast %struct.SkPoint* %332 to i32*
  %334 = load i32, i32* %333, align 4
  %335 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 4, i32 1
  %336 = bitcast float* %335 to i32*
  %337 = load i32, i32* %336, align 4
  %338 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 5
  %339 = bitcast %struct.SkPoint* %338 to i32*
  %340 = load i32, i32* %339, align 4
  %341 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 5, i32 1
  %342 = bitcast float* %341 to i32*
  %343 = load i32, i32* %342, align 4
  %344 = zext i32 %337 to i64
  %345 = shl nuw i64 %344, 32
  %346 = zext i32 %334 to i64
  %347 = or i64 %345, %346
  %348 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %347, i32 0
  %349 = bitcast <2 x i64> %348 to <4 x float>
  %350 = zext i32 %343 to i64
  %351 = shl nuw i64 %350, 32
  %352 = zext i32 %340 to i64
  %353 = or i64 %351, %352
  %354 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %353, i32 0
  %355 = bitcast <2 x i64> %354 to <4 x float>
  %356 = fsub <4 x float> %349, %355
  %357 = fmul <4 x float> %356, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %358 = fadd <4 x float> %357, %232
  %359 = fsub <4 x float> %358, %288
  %360 = fadd <4 x float> %349, %349
  %361 = fsub <4 x float> %355, %360
  %362 = fadd <4 x float> %361, %288
  %363 = fmul <4 x float> %362, <float 3.000000e+00, float 3.000000e+00, float 3.000000e+00, float 3.000000e+00>
  %364 = sitofp i32 %67 to float
  %365 = fdiv float 1.000000e+00, %364
  %366 = insertelement <4 x float> undef, float %365, i32 0
  %367 = shufflevector <4 x float> %366, <4 x float> undef, <4 x i32> zeroinitializer
  %368 = fmul <4 x float> %366, %366
  %369 = shufflevector <4 x float> %368, <4 x float> undef, <4 x i32> zeroinitializer
  %370 = fmul <4 x float> %367, %369
  %371 = fmul <4 x float> %370, %243
  %372 = fmul <4 x float> %370, %299
  %373 = shufflevector <4 x float> %268, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %374 = add i32 %66, 1
  %375 = icmp slt i32 %67, 0
  br i1 %375, label %464, label %376

376:                                              ; preds = %186
  %377 = fsub <4 x float> %274, %268
  %378 = fmul <4 x float> %377, <float 3.000000e+00, float 3.000000e+00, float undef, float undef>
  %379 = fmul <4 x float> %367, %378
  %380 = fmul <4 x float> %369, %296
  %381 = fmul <4 x float> %370, %292
  %382 = fadd <4 x float> %380, %381
  %383 = fadd <4 x float> %379, %382
  %384 = shufflevector <4 x float> %383, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %385 = fadd <4 x float> %296, %296
  %386 = fmul <4 x float> %369, %385
  %387 = fadd <4 x float> %386, %372
  %388 = shufflevector <4 x float> %387, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %389 = shufflevector <4 x float> %212, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %390 = fsub <4 x float> %218, %212
  %391 = fmul <4 x float> %390, <float 3.000000e+00, float 3.000000e+00, float undef, float undef>
  %392 = fmul <4 x float> %367, %391
  %393 = fmul <4 x float> %369, %240
  %394 = fmul <4 x float> %370, %236
  %395 = fadd <4 x float> %393, %394
  %396 = fadd <4 x float> %392, %395
  %397 = shufflevector <4 x float> %396, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %398 = fadd <4 x float> %240, %240
  %399 = fmul <4 x float> %369, %398
  %400 = fadd <4 x float> %399, %371
  %401 = shufflevector <4 x float> %400, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %402 = fadd <4 x float> %363, %363
  %403 = fmul <4 x float> %359, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %404 = fsub <4 x float> %349, %288
  %405 = fmul <4 x float> %404, <float 3.000000e+00, float 3.000000e+00, float undef, float undef>
  %406 = fadd <4 x float> %331, %331
  %407 = fmul <4 x float> %327, <float 6.000000e+00, float 6.000000e+00, float 6.000000e+00, float 6.000000e+00>
  %408 = fsub <4 x float> %317, %268
  %409 = fmul <4 x float> %408, <float 3.000000e+00, float 3.000000e+00, float undef, float undef>
  %410 = sitofp i32 %66 to float
  %411 = fdiv float 1.000000e+00, %410
  %412 = insertelement <4 x float> undef, float %411, i32 0
  %413 = shufflevector <4 x float> %412, <4 x float> undef, <4 x i32> zeroinitializer
  %414 = fmul <4 x float> %412, %412
  %415 = shufflevector <4 x float> %414, <4 x float> undef, <4 x i32> zeroinitializer
  %416 = fmul <4 x float> %413, %415
  %417 = fmul <4 x float> %416, %407
  %418 = fmul <4 x float> %415, %406
  %419 = fadd <4 x float> %418, %417
  %420 = shufflevector <4 x float> %419, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %421 = fmul <4 x float> %416, %327
  %422 = fmul <4 x float> %415, %331
  %423 = fadd <4 x float> %422, %421
  %424 = fmul <4 x float> %413, %409
  %425 = fadd <4 x float> %424, %423
  %426 = shufflevector <4 x float> %425, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %427 = fmul <4 x float> %416, %403
  %428 = fmul <4 x float> %415, %402
  %429 = fadd <4 x float> %428, %427
  %430 = shufflevector <4 x float> %429, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %431 = fmul <4 x float> %416, %359
  %432 = fmul <4 x float> %415, %363
  %433 = fadd <4 x float> %432, %431
  %434 = fmul <4 x float> %413, %405
  %435 = fadd <4 x float> %434, %433
  %436 = shufflevector <4 x float> %435, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %437 = shufflevector <4 x float> %288, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %438 = icmp slt i32 %66, 0
  %439 = bitcast i8* %133 to <4 x float>*
  %440 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %134, i64 1, i32 0
  %441 = bitcast float* %440 to <4 x float>*
  %442 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %134, i64 3, i32 0
  %443 = bitcast float* %442 to <4 x float>*
  %444 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %134, i64 2, i32 0
  %445 = bitcast float* %444 to <4 x float>*
  %446 = icmp eq %struct.SkPoint* %142, null
  %447 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 1, i32 0
  %448 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 3, i32 0
  %449 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %3, i64 2, i32 0
  %450 = sext i32 %66 to i64
  %451 = sext i32 %374 to i64
  %452 = sext i32 %67 to i64
  %453 = add nuw i32 %67, 1
  %454 = zext i32 %453 to i64
  %455 = zext i32 %374 to i64
  %456 = shufflevector <4 x float> %372, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %457 = shufflevector <4 x float> %371, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %458 = shufflevector <4 x float> %427, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %459 = shufflevector <4 x float> %417, <4 x float> undef, <2 x i32> <i32 0, i32 1>
  %460 = bitcast %struct.SkPoint* %3 to <2 x float>*
  %461 = bitcast float* %447 to <2 x float>*
  %462 = bitcast float* %448 to <2 x float>*
  %463 = bitcast float* %449 to <2 x float>*
  br label %466

464:                                              ; preds = %506, %186
  %465 = icmp eq %struct.SkRGBA4f* %136, null
  br i1 %465, label %671, label %623

466:                                              ; preds = %506, %376
  %467 = phi i64 [ %507, %506 ], [ 0, %376 ]
  %468 = phi float [ %512, %506 ], [ 0.000000e+00, %376 ]
  %469 = phi <2 x float> [ %477, %506 ], [ %401, %376 ]
  %470 = phi <2 x float> [ %476, %506 ], [ %397, %376 ]
  %471 = phi <2 x float> [ %475, %506 ], [ %389, %376 ]
  %472 = phi <2 x float> [ %480, %506 ], [ %388, %376 ]
  %473 = phi <2 x float> [ %479, %506 ], [ %384, %376 ]
  %474 = phi <2 x float> [ %478, %506 ], [ %373, %376 ]
  %475 = fadd <2 x float> %471, %470
  %476 = fadd <2 x float> %470, %469
  %477 = fadd <2 x float> %457, %469
  %478 = fadd <2 x float> %474, %473
  %479 = fadd <2 x float> %473, %472
  %480 = fadd <2 x float> %456, %472
  br i1 %438, label %481, label %483

481:                                              ; preds = %466
  %482 = add nuw nsw i64 %467, 1
  br label %506

483:                                              ; preds = %466
  %484 = mul nsw i64 %467, %451
  %485 = fsub float 1.000000e+00, %468
  %486 = insertelement <2 x float> undef, float %485, i32 0
  %487 = shufflevector <2 x float> %486, <2 x float> undef, <2 x i32> zeroinitializer
  %488 = fmul <2 x float> %487, %297
  %489 = insertelement <2 x float> undef, float %468, i32 0
  %490 = shufflevector <2 x float> %489, <2 x float> undef, <2 x i32> zeroinitializer
  %491 = fmul <2 x float> %490, %298
  %492 = fadd <2 x float> %491, %488
  %493 = fmul <2 x float> %487, %241
  %494 = fmul <2 x float> %490, %242
  %495 = fadd <2 x float> %494, %493
  %496 = insertelement <4 x float> undef, float %485, i32 0
  %497 = shufflevector <4 x float> %496, <4 x float> undef, <4 x i32> zeroinitializer
  %498 = insertelement <4 x float> undef, float %468, i32 0
  %499 = shufflevector <4 x float> %498, <4 x float> undef, <4 x i32> zeroinitializer
  %500 = icmp slt i64 %467, %452
  %501 = mul nsw i64 %467, %450
  %502 = add nuw nsw i64 %467, 1
  %503 = mul nsw i64 %502, %451
  %504 = trunc i64 %484 to i32
  %505 = trunc i64 %503 to i32
  br label %514

506:                                              ; preds = %615, %481
  %507 = phi i64 [ %482, %481 ], [ %502, %615 ]
  %508 = fadd float %365, %468
  %509 = fcmp ogt float %508, 1.000000e+00
  %510 = select i1 %509, float 1.000000e+00, float %508
  %511 = fcmp ogt float %510, 0.000000e+00
  %512 = select i1 %511, float %510, float 0.000000e+00
  %513 = icmp eq i64 %507, %454
  br i1 %513, label %464, label %466

514:                                              ; preds = %615, %483
  %515 = phi i64 [ %616, %615 ], [ 0, %483 ]
  %516 = phi float [ %621, %615 ], [ 0.000000e+00, %483 ]
  %517 = phi <2 x float> [ %527, %615 ], [ %437, %483 ]
  %518 = phi <2 x float> [ %528, %615 ], [ %436, %483 ]
  %519 = phi <2 x float> [ %529, %615 ], [ %430, %483 ]
  %520 = phi <2 x float> [ %524, %615 ], [ %373, %483 ]
  %521 = phi <2 x float> [ %525, %615 ], [ %426, %483 ]
  %522 = phi <2 x float> [ %526, %615 ], [ %420, %483 ]
  %523 = add nsw i64 %515, %484
  %524 = fadd <2 x float> %521, %520
  %525 = fadd <2 x float> %522, %521
  %526 = fadd <2 x float> %459, %522
  %527 = fadd <2 x float> %518, %517
  %528 = fadd <2 x float> %519, %518
  %529 = fadd <2 x float> %458, %519
  %530 = fsub float 1.000000e+00, %516
  %531 = insertelement <2 x float> undef, float %530, i32 0
  %532 = shufflevector <2 x float> %531, <2 x float> undef, <2 x i32> zeroinitializer
  %533 = fmul <2 x float> %474, %532
  %534 = insertelement <2 x float> undef, float %516, i32 0
  %535 = shufflevector <2 x float> %534, <2 x float> undef, <2 x i32> zeroinitializer
  %536 = fmul <2 x float> %471, %535
  %537 = fadd <2 x float> %536, %533
  %538 = fmul <2 x float> %487, %520
  %539 = fmul <2 x float> %490, %517
  %540 = fadd <2 x float> %538, %539
  %541 = fmul <2 x float> %492, %532
  %542 = fmul <2 x float> %495, %535
  %543 = fadd <2 x float> %542, %541
  %544 = fadd <2 x float> %540, %537
  %545 = fsub <2 x float> %544, %543
  %546 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %141, i64 %523
  %547 = bitcast %struct.SkPoint* %546 to <2 x float>*
  store <2 x float> %545, <2 x float>* %547, align 4
  br i1 %144, label %548, label %568

548:                                              ; preds = %514
  %549 = load <4 x float>, <4 x float>* %439, align 1
  %550 = load <4 x float>, <4 x float>* %441, align 1
  %551 = load <4 x float>, <4 x float>* %443, align 1
  %552 = load <4 x float>, <4 x float>* %445, align 1
  %553 = fmul <4 x float> %497, %549
  %554 = fmul <4 x float> %499, %550
  %555 = fadd <4 x float> %553, %554
  %556 = fmul <4 x float> %497, %551
  %557 = fmul <4 x float> %499, %552
  %558 = fadd <4 x float> %556, %557
  %559 = insertelement <4 x float> undef, float %530, i32 0
  %560 = shufflevector <4 x float> %559, <4 x float> undef, <4 x i32> zeroinitializer
  %561 = fmul <4 x float> %560, %555
  %562 = insertelement <4 x float> undef, float %516, i32 0
  %563 = shufflevector <4 x float> %562, <4 x float> undef, <4 x i32> zeroinitializer
  %564 = fmul <4 x float> %563, %558
  %565 = fadd <4 x float> %561, %564
  %566 = getelementptr inbounds %struct.SkRGBA4f, %struct.SkRGBA4f* %136, i64 %523, i32 0
  %567 = bitcast float* %566 to <4 x float>*
  store <4 x float> %565, <4 x float>* %567, align 1
  br label %568

568:                                              ; preds = %548, %514
  br i1 %446, label %585, label %569

569:                                              ; preds = %568
  %570 = load <2 x float>, <2 x float>* %460, align 4
  %571 = load <2 x float>, <2 x float>* %461, align 4
  %572 = load <2 x float>, <2 x float>* %462, align 4
  %573 = load <2 x float>, <2 x float>* %463, align 4
  %574 = fmul <2 x float> %487, %570
  %575 = fmul <2 x float> %490, %571
  %576 = fadd <2 x float> %574, %575
  %577 = fmul <2 x float> %487, %572
  %578 = fmul <2 x float> %490, %573
  %579 = fadd <2 x float> %577, %578
  %580 = fmul <2 x float> %532, %576
  %581 = fmul <2 x float> %535, %579
  %582 = fadd <2 x float> %580, %581
  %583 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %142, i64 %523
  %584 = bitcast %struct.SkPoint* %583 to <2 x float>*
  store <2 x float> %582, <2 x float>* %584, align 4
  br label %585

585:                                              ; preds = %568, %569
  %586 = icmp slt i64 %515, %450
  %587 = and i1 %500, %586
  br i1 %587, label %590, label %588

588:                                              ; preds = %585
  %589 = add nuw nsw i64 %515, 1
  br label %615

590:                                              ; preds = %585
  %591 = add nsw i64 %515, %501
  %592 = mul nsw i64 %591, 6
  %593 = trunc i64 %523 to i16
  %594 = getelementptr inbounds i16, i16* %143, i64 %592
  store i16 %593, i16* %594, align 2
  %595 = add nuw nsw i64 %515, 1
  %596 = trunc i64 %595 to i32
  %597 = add i32 %596, %504
  %598 = trunc i32 %597 to i16
  %599 = mul i64 %591, 25769803776
  %600 = ashr exact i64 %599, 32
  %601 = or i64 %600, 1
  %602 = getelementptr inbounds i16, i16* %143, i64 %601
  store i16 %598, i16* %602, align 2
  %603 = add i32 %596, %505
  %604 = trunc i32 %603 to i16
  %605 = add nsw i64 %592, 2
  %606 = getelementptr inbounds i16, i16* %143, i64 %605
  store i16 %604, i16* %606, align 2
  %607 = add nsw i64 %592, 3
  %608 = getelementptr inbounds i16, i16* %143, i64 %607
  store i16 %593, i16* %608, align 2
  %609 = add nsw i64 %592, 4
  %610 = getelementptr inbounds i16, i16* %143, i64 %609
  store i16 %604, i16* %610, align 2
  %611 = add nsw i64 %515, %503
  %612 = trunc i64 %611 to i16
  %613 = add nsw i64 %592, 5
  %614 = getelementptr inbounds i16, i16* %143, i64 %613
  store i16 %612, i16* %614, align 2
  br label %615

615:                                              ; preds = %588, %590
  %616 = phi i64 [ %589, %588 ], [ %595, %590 ]
  %617 = fadd float %411, %516
  %618 = fcmp ogt float %617, 1.000000e+00
  %619 = select i1 %618, float 1.000000e+00, float %617
  %620 = fcmp ogt float %619, 0.000000e+00
  %621 = select i1 %620, float %619, float 0.000000e+00
  %622 = icmp eq i64 %616, %455
  br i1 %622, label %506, label %514

623:                                              ; preds = %464
  %624 = call i32* @_ZN10SkVertices7Builder6colorsEv(%"class.SkVertices::Builder"* nonnull %15) #9
  %625 = bitcast %class.sk_sp.10* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %625)
  %626 = bitcast %struct.SkImageInfo* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %626) #9
  %627 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %11, i64 0, i32 0, i32 0, i32 0
  %628 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %11, i64 0, i32 0, i32 1
  %629 = icmp eq %class.SkColorSpace* %37, null
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %626, i8 -86, i64 24, i1 false) #9
  br i1 %629, label %633, label %630

630:                                              ; preds = %623
  %631 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %37, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %632 = atomicrmw add i32* %631, i32 1 monotonic, !noalias !11
  br label %633

633:                                              ; preds = %630, %623
  %634 = ptrtoint %class.SkColorSpace* %37 to i64
  %635 = zext i32 %65 to i64
  %636 = or i64 %635, 4294967296
  %637 = bitcast %struct.SkImageInfo* %11 to i64*
  store i64 %634, i64* %637, align 8, !alias.scope !14
  %638 = bitcast i32* %628 to i64*
  store i64 8589934606, i64* %638, align 8, !alias.scope !14
  %639 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %11, i64 0, i32 1
  %640 = bitcast %struct.SkISize* %639 to i64*
  store i64 %636, i64* %640, align 8, !alias.scope !14
  %641 = bitcast %struct.SkImageInfo* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %641) #9
  %642 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %12, i64 0, i32 0, i32 0, i32 0
  %643 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %12, i64 0, i32 0, i32 1
  call void @_ZN12SkColorSpace8MakeSRGBEv(%class.sk_sp.10* nonnull sret %13) #9
  %644 = getelementptr inbounds %class.sk_sp.10, %class.sk_sp.10* %13, i64 0, i32 0
  %645 = bitcast %class.sk_sp.10* %13 to i64*
  %646 = load i64, i64* %645, align 8, !noalias !17
  store %class.SkColorSpace* null, %class.SkColorSpace** %644, align 8, !noalias !17
  %647 = bitcast %struct.SkImageInfo* %12 to i64*
  store i64 %646, i64* %647, align 8, !alias.scope !17
  %648 = bitcast i32* %643 to i64*
  store i64 12884901894, i64* %648, align 8, !alias.scope !17
  %649 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %12, i64 0, i32 1
  %650 = bitcast %struct.SkISize* %649 to i64*
  store i64 %636, i64* %650, align 8, !alias.scope !17
  %651 = bitcast i32* %624 to i8*
  %652 = call zeroext i1 @_Z15SkConvertPixelsRK11SkImageInfoPvmS1_PKvm(%struct.SkImageInfo* nonnull dereferenceable(24) %12, i8* %651, i64 0, %struct.SkImageInfo* nonnull dereferenceable(24) %11, i8* %135, i64 0) #9
  %653 = load %class.SkColorSpace*, %class.SkColorSpace** %642, align 8
  %654 = icmp eq %class.SkColorSpace* %653, null
  br i1 %654, label %661, label %655

655:                                              ; preds = %633
  %656 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %653, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %657 = atomicrmw add i32* %656, i32 -1 acq_rel
  %658 = icmp eq i32 %657, 1
  br i1 %658, label %659, label %661

659:                                              ; preds = %655
  %660 = bitcast %class.SkColorSpace* %653 to i8*
  call void @_ZdlPv(i8* %660) #11
  br label %661

661:                                              ; preds = %659, %655, %633
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %641) #9
  %662 = load %class.SkColorSpace*, %class.SkColorSpace** %627, align 8
  %663 = icmp eq %class.SkColorSpace* %662, null
  br i1 %663, label %670, label %664

664:                                              ; preds = %661
  %665 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %662, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %666 = atomicrmw add i32* %665, i32 -1 acq_rel
  %667 = icmp eq i32 %666, 1
  br i1 %667, label %668, label %670

668:                                              ; preds = %664
  %669 = bitcast %class.SkColorSpace* %662 to i8*
  call void @_ZdlPv(i8* %669) #11
  br label %670

670:                                              ; preds = %661, %664, %668
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %626) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %625)
  br label %671

671:                                              ; preds = %464, %670
  call void @_ZN10SkVertices7Builder6detachEv(%class.sk_sp* sret %0, %"class.SkVertices::Builder"* nonnull %15) #9
  %672 = load i8*, i8** %139, align 8
  store i8* null, i8** %139, align 8
  %673 = icmp eq i8* %672, null
  br i1 %673, label %675, label %674

674:                                              ; preds = %671
  call void @_ZdaPv(i8* nonnull %672) #11
  br label %675

675:                                              ; preds = %674, %671
  %676 = load %class.SkVertices*, %class.SkVertices** %138, align 8
  %677 = icmp eq %class.SkVertices* %676, null
  br i1 %677, label %684, label %678

678:                                              ; preds = %675
  %679 = getelementptr inbounds %class.SkVertices, %class.SkVertices* %676, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %680 = atomicrmw add i32* %679, i32 -1 acq_rel
  %681 = icmp eq i32 %680, 1
  br i1 %681, label %682, label %684

682:                                              ; preds = %678
  %683 = bitcast %class.SkVertices* %676 to i8*
  call void @_ZN10SkVerticesdlEPv(i8* nonnull %683) #9
  br label %684

684:                                              ; preds = %675, %678, %682
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %137) #9
  call void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc* %77) #9
  call void @llvm.lifetime.end.p0i8(i64 2080, i8* nonnull %75) #9
  br label %685

685:                                              ; preds = %30, %684, %21
  ret void
}

declare %class.SkColorSpace* @_Z17sk_srgb_singletonv() local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN10SkVertices7BuilderC1ENS_10VertexModeEiij(%"class.SkVertices::Builder"*, i32, i32, i32, i32) unnamed_addr #4

declare %struct.SkPoint* @_ZN10SkVertices7Builder9positionsEv(%"class.SkVertices::Builder"*) local_unnamed_addr #4

declare %struct.SkPoint* @_ZN10SkVertices7Builder9texCoordsEv(%"class.SkVertices::Builder"*) local_unnamed_addr #4

declare i16* @_ZN10SkVertices7Builder7indicesEv(%"class.SkVertices::Builder"*) local_unnamed_addr #4

declare i32* @_ZN10SkVertices7Builder6colorsEv(%"class.SkVertices::Builder"*) local_unnamed_addr #4

declare void @_ZN10SkVertices7Builder6detachEv(%class.sk_sp* sret, %"class.SkVertices::Builder"*) local_unnamed_addr #4

declare void @_ZNK8SkMatrix9mapPointsEP7SkPointPKS0_i(%class.SkMatrix*, %struct.SkPoint*, %struct.SkPoint*, i32) local_unnamed_addr #4

declare float @_ZN7SkPoint6LengthEff(float, float) local_unnamed_addr #4

declare void @_ZN12SkColorSpace8MakeSRGBEv(%class.sk_sp.10* sret) local_unnamed_addr #4

declare zeroext i1 @_Z15SkConvertPixelsRK11SkImageInfoPvmS1_PKvm(%struct.SkImageInfo* dereferenceable(24), i8*, i64, %struct.SkImageInfo* dereferenceable(24), i8*, i64) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN10SkVerticesdlEPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN12SkArenaAllocD2Ev(%class.SkArenaAlloc*) unnamed_addr #7

declare void @_ZN12SkArenaAllocC2EPcmm(%class.SkArenaAlloc*, i8*, i64, i64) unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

declare void @_ZN12SkArenaAlloc11ensureSpaceEjj(%class.SkArenaAlloc*, i32, i32) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!4 = distinct !{!4, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_Z9sk_ref_spI12SkColorSpaceE5sk_spIT_EPS2_: argument 0"}
!7 = distinct !{!7, !"_Z9sk_ref_spI12SkColorSpaceE5sk_spIT_EPS2_"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!10 = distinct !{!10, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_Z9sk_ref_spI12SkColorSpaceE5sk_spIT_EPS2_: argument 0"}
!13 = distinct !{!13, !"_Z9sk_ref_spI12SkColorSpaceE5sk_spIT_EPS2_"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!16 = distinct !{!16, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE: argument 0"}
!19 = distinct !{!19, !"_ZN11SkImageInfo4MakeEii11SkColorType11SkAlphaType5sk_spI12SkColorSpaceE"}
