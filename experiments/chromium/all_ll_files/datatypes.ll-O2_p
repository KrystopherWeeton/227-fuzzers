; ModuleID = '../../third_party/libsrtp/crypto/math/datatypes.c'
source_filename = "../../third_party/libsrtp/crypto/math/datatypes.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.v128_t = type { [2 x i64] }
%struct.bitvector_t = type { i32, i32* }

@octet_weight = internal unnamed_addr constant [256 x i8] calign 16
@__const.srtp_nibble_to_hex_char.buf = private unnamed_addr constant [16 x i8] c"0123456789abcdef", align 16
@bit_string = internal global [1025 x i8] zeroinitializer, align 16

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @octet_get_weight(i8 zeroext) local_unnamed_addr #0 {
  %2 = zext i8 %0 to i64
  %3 = getelementptr inbounds [256 x i8], [256 x i8]* @octet_weight, i64 0, i64 %2
  %4 = load i8, i8* %3, align 1
  %5 = sext i8 %4 to i32
  ret i32 %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @srtp_nibble_to_hex_char(i8 zeroext) local_unnamed_addr #0 {
  %2 = and i8 %0, 15
  %3 = zext i8 %2 to i64
  %4 = getelementptr inbounds [16 x i8], [16 x i8]* @__const.srtp_nibble_to_hex_char.buf, i64 0, i64 %3
  %5 = load i8, i8* %4, align 1
  ret i8 %5
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i8* @srtp_octet_string_hex_string(i8* nocapture readonly, i32) local_unnamed_addr #1 {
  %3 = shl nsw i32 %1, 1
  %4 = icmp sgt i32 %1, 512
  %5 = select i1 %4, i32 1022, i32 %3
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %30

7:                                                ; preds = %2
  %8 = sext i32 %5 to i64
  br label %9

9:                                                ; preds = %7, %9
  %10 = phi i64 [ 0, %7 ], [ %26, %9 ]
  %11 = phi i8* [ %0, %7 ], [ %18, %9 ]
  %12 = load i8, i8* %11, align 1
  %13 = lshr i8 %12, 4
  %14 = zext i8 %13 to i64
  %15 = getelementptr inbounds [16 x i8], [16 x i8]* @__const.srtp_nibble_to_hex_char.buf, i64 0, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = getelementptr inbounds [1025 x i8], [1025 x i8]* @bit_string, i64 0, i64 %10
  store i8 %16, i8* %17, align 2
  %18 = getelementptr inbounds i8, i8* %11, i64 1
  %19 = load i8, i8* %11, align 1
  %20 = and i8 %19, 15
  %21 = zext i8 %20 to i64
  %22 = getelementptr inbounds [16 x i8], [16 x i8]* @__const.srtp_nibble_to_hex_char.buf, i64 0, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = or i64 %10, 1
  %25 = getelementptr inbounds [1025 x i8], [1025 x i8]* @bit_string, i64 0, i64 %24
  store i8 %23, i8* %25, align 1
  %26 = add nuw nsw i64 %10, 2
  %27 = icmp slt i64 %26, %8
  br i1 %27, label %9, label %28

28:                                               ; preds = %9
  %29 = and i64 %26, 4294967294
  br label %30

30:                                               ; preds = %28, %2
  %31 = phi i64 [ 0, %2 ], [ %29, %28 ]
  %32 = getelementptr inbounds [1025 x i8], [1025 x i8]* @bit_string, i64 0, i64 %31
  store i8 0, i8* %32, align 2
  ret i8* getelementptr inbounds ([1025 x i8], [1025 x i8]* @bit_string, i64 0, i64 0)
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i8* @v128_hex_string(%union.v128_t* nocapture readonly) local_unnamed_addr #1 {
  %2 = bitcast %union.v128_t* %0 to [16 x i8]*
  br label %3

3:                                                ; preds = %3, %1
  %4 = phi i64 [ 0, %1 ], [ %21, %3 ]
  %5 = phi i64 [ 0, %1 ], [ %19, %3 ]
  %6 = getelementptr inbounds [16 x i8], [16 x i8]* %2, i64 0, i64 %4
  %7 = load i8, i8* %6, align 1
  %8 = lshr i8 %7, 4
  %9 = zext i8 %8 to i64
  %10 = getelementptr inbounds [16 x i8], [16 x i8]* @__const.srtp_nibble_to_hex_char.buf, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = or i64 %5, 1
  %13 = getelementptr inbounds [1025 x i8], [1025 x i8]* @bit_string, i64 0, i64 %5
  store i8 %11, i8* %13, align 2
  %14 = load i8, i8* %6, align 1
  %15 = and i8 %14, 15
  %16 = zext i8 %15 to i64
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* @__const.srtp_nibble_to_hex_char.buf, i64 0, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = add nuw nsw i64 %5, 2
  %20 = getelementptr inbounds [1025 x i8], [1025 x i8]* @bit_string, i64 0, i64 %12
  store i8 %18, i8* %20, align 1
  %21 = add nuw nsw i64 %4, 1
  %22 = icmp eq i64 %21, 16
  br i1 %22, label %23, label %3

23:                                               ; preds = %3
  store i8 0, i8* getelementptr inbounds ([1025 x i8], [1025 x i8]* @bit_string, i64 0, i64 32), align 16
  ret i8* getelementptr inbounds ([1025 x i8], [1025 x i8]* @bit_string, i64 0, i64 0)
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i8* @v128_bit_string(%union.v128_t* nocapture readonly) local_unnamed_addr #1 {
  %2 = bitcast %union.v128_t* %0 to [4 x i32]*
  %3 = bitcast %union.v128_t* %0 to i32*
  br label %4

4:                                                ; preds = %4, %1
  %5 = phi i64 [ 0, %1 ], [ %19, %4 ]
  %6 = phi i32 [ -2147483648, %1 ], [ %20, %4 ]
  %7 = load i32, i32* %3, align 4
  %8 = and i32 %7, %6
  %9 = icmp eq i32 %8, 0
  %10 = getelementptr inbounds [1025 x i8], [1025 x i8]* @bit_string, i64 0, i64 %5
  %11 = select i1 %9, i8 48, i8 49
  store i8 %11, i8* %10, align 2
  %12 = or i64 %5, 1
  %13 = lshr i32 %6, 1
  %14 = load i32, i32* %3, align 4
  %15 = and i32 %14, %13
  %16 = icmp eq i32 %15, 0
  %17 = getelementptr inbounds [1025 x i8], [1025 x i8]* @bit_string, i64 0, i64 %12
  %18 = select i1 %16, i8 48, i8 49
  store i8 %18, i8* %17, align 1
  %19 = add nuw nsw i64 %5, 2
  %20 = lshr i32 %6, 2
  %21 = icmp eq i64 %19, 32
  br i1 %21, label %22, label %4

22:                                               ; preds = %4
  %23 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 1
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i64 [ 32, %22 ], [ %39, %24 ]
  %26 = phi i32 [ -2147483648, %22 ], [ %40, %24 ]
  %27 = load i32, i32* %23, align 4
  %28 = and i32 %27, %26
  %29 = icmp eq i32 %28, 0
  %30 = getelementptr inbounds [1025 x i8], [1025 x i8]* @bit_string, i64 0, i64 %25
  %31 = select i1 %29, i8 48, i8 49
  store i8 %31, i8* %30, align 2
  %32 = or i64 %25, 1
  %33 = lshr i32 %26, 1
  %34 = load i32, i32* %23, align 4
  %35 = and i32 %34, %33
  %36 = icmp eq i32 %35, 0
  %37 = getelementptr inbounds [1025 x i8], [1025 x i8]* @bit_string, i64 0, i64 %32
  %38 = select i1 %36, i8 48, i8 49
  store i8 %38, i8* %37, align 1
  %39 = add nuw nsw i64 %25, 2
  %40 = lshr i32 %26, 2
  %41 = icmp eq i64 %39, 64
  br i1 %41, label %42, label %24

42:                                               ; preds = %24
  %43 = getelementptr inbounds %union.v128_t, %union.v128_t* %0, i64 0, i32 0, i64 1
  %44 = bitcast i64* %43 to i32*
  br label %45

45:                                               ; preds = %45, %42
  %46 = phi i64 [ 64, %42 ], [ %60, %45 ]
  %47 = phi i32 [ -2147483648, %42 ], [ %61, %45 ]
  %48 = load i32, i32* %44, align 4
  %49 = and i32 %48, %47
  %50 = icmp eq i32 %49, 0
  %51 = getelementptr inbounds [1025 x i8], [1025 x i8]* @bit_string, i64 0, i64 %46
  %52 = select i1 %50, i8 48, i8 49
  store i8 %52, i8* %51, align 2
  %53 = or i64 %46, 1
  %54 = lshr i32 %47, 1
  %55 = load i32, i32* %44, align 4
  %56 = and i32 %55, %54
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds [1025 x i8], [1025 x i8]* @bit_string, i64 0, i64 %53
  %59 = select i1 %57, i8 48, i8 49
  store i8 %59, i8* %58, align 1
  %60 = add nuw nsw i64 %46, 2
  %61 = lshr i32 %47, 2
  %62 = icmp eq i64 %60, 96
  br i1 %62, label %63, label %45

63:                                               ; preds = %45
  %64 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 3
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 96, %63 ], [ %80, %65 ]
  %67 = phi i32 [ -2147483648, %63 ], [ %81, %65 ]
  %68 = load i32, i32* %64, align 4
  %69 = and i32 %68, %67
  %70 = icmp eq i32 %69, 0
  %71 = getelementptr inbounds [1025 x i8], [1025 x i8]* @bit_string, i64 0, i64 %66
  %72 = select i1 %70, i8 48, i8 49
  store i8 %72, i8* %71, align 2
  %73 = or i64 %66, 1
  %74 = lshr i32 %67, 1
  %75 = load i32, i32* %64, align 4
  %76 = and i32 %75, %74
  %77 = icmp eq i32 %76, 0
  %78 = getelementptr inbounds [1025 x i8], [1025 x i8]* @bit_string, i64 0, i64 %73
  %79 = select i1 %77, i8 48, i8 49
  store i8 %79, i8* %78, align 1
  %80 = add nuw nsw i64 %66, 2
  %81 = lshr i32 %67, 2
  %82 = icmp eq i64 %80, 128
  br i1 %82, label %83, label %65

83:                                               ; preds = %65
  store i8 0, i8* getelementptr inbounds ([1025 x i8], [1025 x i8]* @bit_string, i64 0, i64 128), align 16
  ret i8* getelementptr inbounds ([1025 x i8], [1025 x i8]* @bit_string, i64 0, i64 0)
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @v128_copy_octet_string(%union.v128_t* nocapture, i8* nocapture readonly) local_unnamed_addr #1 {
  %3 = load i8, i8* %1, align 1
  %4 = bitcast %union.v128_t* %0 to [16 x i8]*
  %5 = bitcast %union.v128_t* %0 to i8*
  store i8 %3, i8* %5, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 1
  %7 = load i8, i8* %6, align 1
  %8 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 1
  store i8 %7, i8* %8, align 1
  %9 = getelementptr inbounds i8, i8* %1, i64 2
  %10 = load i8, i8* %9, align 1
  %11 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 2
  store i8 %10, i8* %11, align 2
  %12 = getelementptr inbounds i8, i8* %1, i64 3
  %13 = load i8, i8* %12, align 1
  %14 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 3
  store i8 %13, i8* %14, align 1
  %15 = getelementptr inbounds i8, i8* %1, i64 4
  %16 = load i8, i8* %15, align 1
  %17 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 4
  store i8 %16, i8* %17, align 4
  %18 = getelementptr inbounds i8, i8* %1, i64 5
  %19 = load i8, i8* %18, align 1
  %20 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 5
  store i8 %19, i8* %20, align 1
  %21 = getelementptr inbounds i8, i8* %1, i64 6
  %22 = load i8, i8* %21, align 1
  %23 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 6
  store i8 %22, i8* %23, align 2
  %24 = getelementptr inbounds i8, i8* %1, i64 7
  %25 = load i8, i8* %24, align 1
  %26 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 7
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds i8, i8* %1, i64 8
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr inbounds %union.v128_t, %union.v128_t* %0, i64 0, i32 0, i64 1
  %30 = bitcast i64* %29 to i8*
  store i8 %28, i8* %30, align 8
  %31 = getelementptr inbounds i8, i8* %1, i64 9
  %32 = load i8, i8* %31, align 1
  %33 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 9
  store i8 %32, i8* %33, align 1
  %34 = getelementptr inbounds i8, i8* %1, i64 10
  %35 = load i8, i8* %34, align 1
  %36 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 10
  store i8 %35, i8* %36, align 2
  %37 = getelementptr inbounds i8, i8* %1, i64 11
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 11
  store i8 %38, i8* %39, align 1
  %40 = getelementptr inbounds i8, i8* %1, i64 12
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 12
  store i8 %41, i8* %42, align 4
  %43 = getelementptr inbounds i8, i8* %1, i64 13
  %44 = load i8, i8* %43, align 1
  %45 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 13
  store i8 %44, i8* %45, align 1
  %46 = getelementptr inbounds i8, i8* %1, i64 14
  %47 = load i8, i8* %46, align 1
  %48 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 14
  store i8 %47, i8* %48, align 2
  %49 = getelementptr inbounds i8, i8* %1, i64 15
  %50 = load i8, i8* %49, align 1
  %51 = getelementptr inbounds [16 x i8], [16 x i8]* %4, i64 0, i64 15
  store i8 %50, i8* %51, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @v128_right_shift(%union.v128_t* nocapture, i32) local_unnamed_addr #1 {
  %3 = bitcast %union.v128_t* %0 to i8*
  %4 = bitcast %union.v128_t* %0 to i8*
  %5 = ashr i32 %1, 5
  %6 = and i32 %1, 31
  %7 = icmp sgt i32 %1, 127
  br i1 %7, label %8, label %9

8:                                                ; preds = %2
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 16, i1 false)
  br label %168

9:                                                ; preds = %2
  %10 = icmp eq i32 %6, 0
  %11 = bitcast %union.v128_t* %0 to [4 x i32]*
  br i1 %10, label %15, label %12

12:                                               ; preds = %9
  %13 = sub nuw nsw i32 32, %6
  %14 = sext i32 %5 to i64
  br label %143

15:                                               ; preds = %9
  %16 = sub nsw i32 3, %5
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %17
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 3
  store i32 %19, i32* %20, align 4
  %21 = icmp slt i32 %1, 96
  br i1 %21, label %22, label %163

22:                                               ; preds = %15
  %23 = sext i32 %5 to i64
  %24 = icmp slt i64 %23, 2
  %25 = select i1 %24, i64 %23, i64 2
  %26 = sub nsw i64 3, %25
  %27 = icmp ult i64 %26, 8
  br i1 %27, label %133, label %28

28:                                               ; preds = %22
  %29 = icmp slt i64 %23, 2
  %30 = select i1 %29, i64 %23, i64 2
  %31 = sub nsw i64 2, %30
  %32 = getelementptr %union.v128_t, %union.v128_t* %0, i64 0, i32 0, i64 1
  %33 = ptrtoint i64* %32 to i64
  %34 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %31, i64 4)
  %35 = extractvalue { i64, i1 } %34, 0
  %36 = extractvalue { i64, i1 } %34, 1
  %37 = icmp ugt i64 %35, %33
  %38 = or i1 %37, %36
  %39 = getelementptr %union.v128_t, %union.v128_t* %0, i64 0, i32 0, i64 1
  %40 = bitcast i64* %39 to i8*
  %41 = mul nsw i64 %23, -4
  %42 = getelementptr i8, i8* %40, i64 %41
  %43 = ptrtoint i8* %42 to i64
  %44 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %31, i64 4)
  %45 = extractvalue { i64, i1 } %44, 0
  %46 = extractvalue { i64, i1 } %44, 1
  %47 = icmp ugt i64 %45, %43
  %48 = or i1 %47, %46
  %49 = or i1 %38, %48
  br i1 %49, label %133, label %50

50:                                               ; preds = %28
  %51 = icmp slt i64 %23, 2
  %52 = select i1 %51, i64 %23, i64 2
  %53 = shl nsw i64 %52, 2
  %54 = getelementptr i8, i8* %3, i64 %53
  %55 = getelementptr %union.v128_t, %union.v128_t* %0, i64 0, i32 0, i64 1
  %56 = bitcast i64* %55 to i8*
  %57 = getelementptr i8, i8* %56, i64 4
  %58 = shl nsw i64 %23, 2
  %59 = sub nsw i64 %53, %58
  %60 = getelementptr i8, i8* %3, i64 %59
  %61 = getelementptr %union.v128_t, %union.v128_t* %0, i64 0, i32 0, i64 1
  %62 = bitcast i64* %61 to i8*
  %63 = sub nsw i64 4, %58
  %64 = getelementptr i8, i8* %62, i64 %63
  %65 = icmp ult i8* %54, %64
  %66 = icmp ult i8* %60, %57
  %67 = and i1 %65, %66
  br i1 %67, label %133, label %68

68:                                               ; preds = %50
  %69 = and i64 %26, -8
  %70 = sub nsw i64 3, %69
  %71 = add nsw i64 %69, -8
  %72 = lshr exact i64 %71, 3
  %73 = add nuw nsw i64 %72, 1
  %74 = and i64 %73, 1
  %75 = icmp eq i64 %71, 0
  br i1 %75, label %114, label %76

76:                                               ; preds = %68
  %77 = sub nuw nsw i64 %73, %74
  br label %78

78:                                               ; preds = %78, %76
  %79 = phi i64 [ 0, %76 ], [ %109, %78 ]
  %80 = phi i64 [ %77, %76 ], [ %110, %78 ]
  %81 = sub i64 2, %79
  %82 = sub nsw i64 %81, %23
  %83 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %82
  %84 = getelementptr inbounds i32, i32* %83, i64 -3
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4, !alias.scope !2
  %87 = getelementptr inbounds i32, i32* %83, i64 -7
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !2
  %90 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %81
  %91 = getelementptr inbounds i32, i32* %90, i64 -3
  %92 = bitcast i32* %91 to <4 x i32>*
  store <4 x i32> %86, <4 x i32>* %92, align 4, !alias.scope !5, !noalias !2
  %93 = getelementptr inbounds i32, i32* %90, i64 -7
  %94 = bitcast i32* %93 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %94, align 4, !alias.scope !5, !noalias !2
  %95 = sub nuw nsw i64 -6, %79
  %96 = sub nsw i64 %95, %23
  %97 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %96
  %98 = getelementptr inbounds i32, i32* %97, i64 -3
  %99 = bitcast i32* %98 to <4 x i32>*
  %100 = load <4 x i32>, <4 x i32>* %99, align 4, !alias.scope !2
  %101 = getelementptr inbounds i32, i32* %97, i64 -7
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 4, !alias.scope !2
  %104 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %95
  %105 = getelementptr inbounds i32, i32* %104, i64 -3
  %106 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %106, align 4, !alias.scope !5, !noalias !2
  %107 = getelementptr inbounds i32, i32* %104, i64 -7
  %108 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %108, align 4, !alias.scope !5, !noalias !2
  %109 = add i64 %79, 16
  %110 = add i64 %80, -2
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %112, label %78, !llvm.loop !7

112:                                              ; preds = %78
  %113 = sub nuw nsw i64 -14, %79
  br label %114

114:                                              ; preds = %112, %68
  %115 = phi i64 [ 2, %68 ], [ %113, %112 ]
  %116 = icmp eq i64 %74, 0
  br i1 %116, label %131, label %117

117:                                              ; preds = %114
  %118 = sub nsw i64 %115, %23
  %119 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %118
  %120 = getelementptr inbounds i32, i32* %119, i64 -3
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4, !alias.scope !2
  %123 = getelementptr inbounds i32, i32* %119, i64 -7
  %124 = bitcast i32* %123 to <4 x i32>*
  %125 = load <4 x i32>, <4 x i32>* %124, align 4, !alias.scope !2
  %126 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %115
  %127 = getelementptr inbounds i32, i32* %126, i64 -3
  %128 = bitcast i32* %127 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %128, align 4, !alias.scope !5, !noalias !2
  %129 = getelementptr inbounds i32, i32* %126, i64 -7
  %130 = bitcast i32* %129 to <4 x i32>*
  store <4 x i32> %125, <4 x i32>* %130, align 4, !alias.scope !5, !noalias !2
  br label %131

131:                                              ; preds = %114, %117
  %132 = icmp eq i64 %26, %69
  br i1 %132, label %161, label %133

133:                                              ; preds = %131, %50, %28, %22
  %134 = phi i64 [ 3, %50 ], [ 3, %28 ], [ 3, %22 ], [ %70, %131 ]
  br label %135

135:                                              ; preds = %133, %135
  %136 = phi i64 [ %137, %135 ], [ %134, %133 ]
  %137 = add nsw i64 %136, -1
  %138 = sub nsw i64 %137, %23
  %139 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %138
  %140 = load i32, i32* %139, align 4
  %141 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %137
  store i32 %140, i32* %141, align 4
  %142 = icmp sgt i64 %137, %23
  br i1 %142, label %135, label %161, !llvm.loop !9

143:                                              ; preds = %12, %157
  %144 = phi i64 [ 4, %12 ], [ %145, %157 ]
  %145 = add nsw i64 %144, -1
  %146 = sub nsw i64 %145, %14
  %147 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %146
  %148 = load i32, i32* %147, align 4
  %149 = shl i32 %148, %6
  %150 = icmp sgt i64 %146, 0
  br i1 %150, label %151, label %157

151:                                              ; preds = %143
  %152 = add nsw i64 %146, -1
  %153 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %152
  %154 = load i32, i32* %153, align 4
  %155 = lshr i32 %154, %13
  %156 = or i32 %155, %149
  br label %157

157:                                              ; preds = %151, %143
  %158 = phi i32 [ %156, %151 ], [ %149, %143 ]
  %159 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %145
  store i32 %158, i32* %159, align 4
  %160 = icmp sgt i64 %145, %14
  br i1 %160, label %143, label %161

161:                                              ; preds = %157, %135, %131
  %162 = icmp sgt i32 %1, 31
  br i1 %162, label %163, label %168

163:                                              ; preds = %15, %161
  %164 = icmp sgt i32 %5, 1
  %165 = select i1 %164, i32 %5, i32 1
  %166 = zext i32 %165 to i64
  %167 = shl nuw nsw i64 %166, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 %167, i1 false)
  br label %168

168:                                              ; preds = %163, %161, %8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @v128_left_shift(%union.v128_t* nocapture, i32) local_unnamed_addr #1 {
  %3 = bitcast %union.v128_t* %0 to i8*
  %4 = ashr i32 %1, 5
  %5 = and i32 %1, 31
  %6 = icmp sgt i32 %1, 127
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 16, i1 false)
  br label %236

8:                                                ; preds = %2
  %9 = icmp eq i32 %5, 0
  br i1 %9, label %85, label %10

10:                                               ; preds = %8
  %11 = sub nsw i32 3, %4
  %12 = icmp slt i32 %1, 96
  %13 = bitcast %union.v128_t* %0 to [4 x i32]*
  br i1 %12, label %16, label %14

14:                                               ; preds = %10
  %15 = sext i32 %11 to i64
  br label %213

16:                                               ; preds = %10
  %17 = sub nuw nsw i32 32, %5
  %18 = sext i32 %4 to i64
  %19 = sext i32 %11 to i64
  %20 = icmp sgt i64 %19, 1
  %21 = select i1 %20, i64 %19, i64 1
  %22 = icmp ult i64 %21, 8
  br i1 %22, label %23, label %25

23:                                               ; preds = %83, %25, %16
  %24 = phi i64 [ 0, %25 ], [ 0, %16 ], [ %46, %83 ]
  br label %199

25:                                               ; preds = %16
  %26 = icmp sgt i64 %19, 1
  %27 = select i1 %26, i64 %19, i64 1
  %28 = shl nuw nsw i64 %27, 2
  %29 = getelementptr i8, i8* %3, i64 %28
  %30 = shl nsw i64 %18, 2
  %31 = getelementptr i8, i8* %3, i64 %30
  %32 = add nsw i64 %28, %30
  %33 = getelementptr i8, i8* %3, i64 %32
  %34 = add nsw i64 %30, 4
  %35 = getelementptr i8, i8* %3, i64 %34
  %36 = add nsw i64 %32, 4
  %37 = getelementptr i8, i8* %3, i64 %36
  %38 = icmp ugt i8* %33, %3
  %39 = icmp ult i8* %31, %29
  %40 = and i1 %38, %39
  %41 = icmp ugt i8* %37, %3
  %42 = icmp ult i8* %35, %29
  %43 = and i1 %41, %42
  %44 = or i1 %40, %43
  br i1 %44, label %23, label %45

45:                                               ; preds = %25
  %46 = and i64 %21, 9223372036854775800
  %47 = insertelement <4 x i32> undef, i32 %5, i32 0
  %48 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> zeroinitializer
  %49 = insertelement <4 x i32> undef, i32 %5, i32 0
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> zeroinitializer
  %51 = insertelement <4 x i32> undef, i32 %17, i32 0
  %52 = shufflevector <4 x i32> %51, <4 x i32> undef, <4 x i32> zeroinitializer
  %53 = insertelement <4 x i32> undef, i32 %17, i32 0
  %54 = shufflevector <4 x i32> %53, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %55

55:                                               ; preds = %55, %45
  %56 = phi i64 [ 0, %45 ], [ %81, %55 ]
  %57 = add nsw i64 %56, %18
  %58 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i64 0, i64 %57
  %59 = bitcast i32* %58 to <4 x i32>*
  %60 = load <4 x i32>, <4 x i32>* %59, align 4, !alias.scope !10
  %61 = getelementptr inbounds i32, i32* %58, i64 4
  %62 = bitcast i32* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 4, !alias.scope !10
  %64 = lshr <4 x i32> %60, %48
  %65 = lshr <4 x i32> %63, %50
  %66 = add nsw i64 %57, 1
  %67 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i64 0, i64 %66
  %68 = bitcast i32* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4, !alias.scope !13
  %70 = getelementptr inbounds i32, i32* %67, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  %72 = load <4 x i32>, <4 x i32>* %71, align 4, !alias.scope !13
  %73 = shl <4 x i32> %69, %52
  %74 = shl <4 x i32> %72, %54
  %75 = xor <4 x i32> %73, %64
  %76 = xor <4 x i32> %74, %65
  %77 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i64 0, i64 %56
  %78 = bitcast i32* %77 to <4 x i32>*
  store <4 x i32> %75, <4 x i32>* %78, align 4, !alias.scope !15, !noalias !17
  %79 = getelementptr inbounds i32, i32* %77, i64 4
  %80 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %80, align 4, !alias.scope !15, !noalias !17
  %81 = add i64 %56, 8
  %82 = icmp eq i64 %81, %46
  br i1 %82, label %83, label %55, !llvm.loop !18

83:                                               ; preds = %55
  %84 = icmp eq i64 %21, %46
  br i1 %84, label %213, label %23

85:                                               ; preds = %8
  %86 = sub nsw i32 4, %4
  %87 = bitcast %union.v128_t* %0 to [4 x i32]*
  %88 = sext i32 %4 to i64
  %89 = sext i32 %86 to i64
  %90 = icmp sgt i64 %89, 1
  %91 = select i1 %90, i64 %89, i64 1
  %92 = icmp ult i64 %91, 8
  br i1 %92, label %189, label %93

93:                                               ; preds = %85
  %94 = icmp sgt i64 %89, 1
  %95 = select i1 %94, i64 %89, i64 1
  %96 = shl nuw nsw i64 %95, 2
  %97 = getelementptr i8, i8* %3, i64 %96
  %98 = shl nsw i64 %88, 2
  %99 = getelementptr i8, i8* %3, i64 %98
  %100 = add nsw i64 %96, %98
  %101 = getelementptr i8, i8* %3, i64 %100
  %102 = icmp ugt i8* %101, %3
  %103 = icmp ult i8* %99, %97
  %104 = and i1 %102, %103
  br i1 %104, label %189, label %105

105:                                              ; preds = %93
  %106 = and i64 %91, 9223372036854775800
  %107 = add nsw i64 %106, -8
  %108 = lshr exact i64 %107, 3
  %109 = add nuw nsw i64 %108, 1
  %110 = and i64 %109, 3
  %111 = icmp ult i64 %107, 24
  br i1 %111, label %167, label %112

112:                                              ; preds = %105
  %113 = sub nsw i64 %109, %110
  br label %114

114:                                              ; preds = %114, %112
  %115 = phi i64 [ 0, %112 ], [ %164, %114 ]
  %116 = phi i64 [ %113, %112 ], [ %165, %114 ]
  %117 = add nsw i64 %115, %88
  %118 = getelementptr inbounds [4 x i32], [4 x i32]* %87, i64 0, i64 %117
  %119 = bitcast i32* %118 to <4 x i32>*
  %120 = load <4 x i32>, <4 x i32>* %119, align 4, !alias.scope !19
  %121 = getelementptr inbounds i32, i32* %118, i64 4
  %122 = bitcast i32* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4, !alias.scope !19
  %124 = getelementptr inbounds [4 x i32], [4 x i32]* %87, i64 0, i64 %115
  %125 = bitcast i32* %124 to <4 x i32>*
  store <4 x i32> %120, <4 x i32>* %125, align 4, !alias.scope !22, !noalias !19
  %126 = getelementptr inbounds i32, i32* %124, i64 4
  %127 = bitcast i32* %126 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %127, align 4, !alias.scope !22, !noalias !19
  %128 = or i64 %115, 8
  %129 = add nsw i64 %128, %88
  %130 = getelementptr inbounds [4 x i32], [4 x i32]* %87, i64 0, i64 %129
  %131 = bitcast i32* %130 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 4, !alias.scope !19
  %133 = getelementptr inbounds i32, i32* %130, i64 4
  %134 = bitcast i32* %133 to <4 x i32>*
  %135 = load <4 x i32>, <4 x i32>* %134, align 4, !alias.scope !19
  %136 = getelementptr inbounds [4 x i32], [4 x i32]* %87, i64 0, i64 %128
  %137 = bitcast i32* %136 to <4 x i32>*
  store <4 x i32> %132, <4 x i32>* %137, align 4, !alias.scope !22, !noalias !19
  %138 = getelementptr inbounds i32, i32* %136, i64 4
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %135, <4 x i32>* %139, align 4, !alias.scope !22, !noalias !19
  %140 = or i64 %115, 16
  %141 = add nsw i64 %140, %88
  %142 = getelementptr inbounds [4 x i32], [4 x i32]* %87, i64 0, i64 %141
  %143 = bitcast i32* %142 to <4 x i32>*
  %144 = load <4 x i32>, <4 x i32>* %143, align 4, !alias.scope !19
  %145 = getelementptr inbounds i32, i32* %142, i64 4
  %146 = bitcast i32* %145 to <4 x i32>*
  %147 = load <4 x i32>, <4 x i32>* %146, align 4, !alias.scope !19
  %148 = getelementptr inbounds [4 x i32], [4 x i32]* %87, i64 0, i64 %140
  %149 = bitcast i32* %148 to <4 x i32>*
  store <4 x i32> %144, <4 x i32>* %149, align 4, !alias.scope !22, !noalias !19
  %150 = getelementptr inbounds i32, i32* %148, i64 4
  %151 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> %147, <4 x i32>* %151, align 4, !alias.scope !22, !noalias !19
  %152 = or i64 %115, 24
  %153 = add nsw i64 %152, %88
  %154 = getelementptr inbounds [4 x i32], [4 x i32]* %87, i64 0, i64 %153
  %155 = bitcast i32* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 4, !alias.scope !19
  %157 = getelementptr inbounds i32, i32* %154, i64 4
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 4, !alias.scope !19
  %160 = getelementptr inbounds [4 x i32], [4 x i32]* %87, i64 0, i64 %152
  %161 = bitcast i32* %160 to <4 x i32>*
  store <4 x i32> %156, <4 x i32>* %161, align 4, !alias.scope !22, !noalias !19
  %162 = getelementptr inbounds i32, i32* %160, i64 4
  %163 = bitcast i32* %162 to <4 x i32>*
  store <4 x i32> %159, <4 x i32>* %163, align 4, !alias.scope !22, !noalias !19
  %164 = add i64 %115, 32
  %165 = add i64 %116, -4
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %167, label %114, !llvm.loop !24

167:                                              ; preds = %114, %105
  %168 = phi i64 [ 0, %105 ], [ %164, %114 ]
  %169 = icmp eq i64 %110, 0
  br i1 %169, label %187, label %170

170:                                              ; preds = %167, %170
  %171 = phi i64 [ %184, %170 ], [ %168, %167 ]
  %172 = phi i64 [ %185, %170 ], [ %110, %167 ]
  %173 = add nsw i64 %171, %88
  %174 = getelementptr inbounds [4 x i32], [4 x i32]* %87, i64 0, i64 %173
  %175 = bitcast i32* %174 to <4 x i32>*
  %176 = load <4 x i32>, <4 x i32>* %175, align 4, !alias.scope !19
  %177 = getelementptr inbounds i32, i32* %174, i64 4
  %178 = bitcast i32* %177 to <4 x i32>*
  %179 = load <4 x i32>, <4 x i32>* %178, align 4, !alias.scope !19
  %180 = getelementptr inbounds [4 x i32], [4 x i32]* %87, i64 0, i64 %171
  %181 = bitcast i32* %180 to <4 x i32>*
  store <4 x i32> %176, <4 x i32>* %181, align 4, !alias.scope !22, !noalias !19
  %182 = getelementptr inbounds i32, i32* %180, i64 4
  %183 = bitcast i32* %182 to <4 x i32>*
  store <4 x i32> %179, <4 x i32>* %183, align 4, !alias.scope !22, !noalias !19
  %184 = add i64 %171, 8
  %185 = add i64 %172, -1
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %170, !llvm.loop !25

187:                                              ; preds = %170, %167
  %188 = icmp eq i64 %91, %106
  br i1 %188, label %219, label %189

189:                                              ; preds = %187, %93, %85
  %190 = phi i64 [ 0, %93 ], [ 0, %85 ], [ %106, %187 ]
  br label %191

191:                                              ; preds = %189, %191
  %192 = phi i64 [ %197, %191 ], [ %190, %189 ]
  %193 = add nsw i64 %192, %88
  %194 = getelementptr inbounds [4 x i32], [4 x i32]* %87, i64 0, i64 %193
  %195 = load i32, i32* %194, align 4
  %196 = getelementptr inbounds [4 x i32], [4 x i32]* %87, i64 0, i64 %192
  store i32 %195, i32* %196, align 4
  %197 = add nuw nsw i64 %192, 1
  %198 = icmp slt i64 %197, %89
  br i1 %198, label %191, label %219, !llvm.loop !27

199:                                              ; preds = %23, %199
  %200 = phi i64 [ %211, %199 ], [ %24, %23 ]
  %201 = add nsw i64 %200, %18
  %202 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i64 0, i64 %201
  %203 = load i32, i32* %202, align 4
  %204 = lshr i32 %203, %5
  %205 = add nsw i64 %201, 1
  %206 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i64 0, i64 %205
  %207 = load i32, i32* %206, align 4
  %208 = shl i32 %207, %17
  %209 = xor i32 %208, %204
  %210 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i64 0, i64 %200
  store i32 %209, i32* %210, align 4
  %211 = add nuw nsw i64 %200, 1
  %212 = icmp slt i64 %211, %19
  br i1 %212, label %199, label %213, !llvm.loop !28

213:                                              ; preds = %199, %83, %14
  %214 = phi i64 [ %15, %14 ], [ %19, %83 ], [ %19, %199 ]
  %215 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i64 0, i64 3
  %216 = load i32, i32* %215, align 4
  %217 = lshr i32 %216, %5
  %218 = getelementptr inbounds [4 x i32], [4 x i32]* %13, i64 0, i64 %214
  store i32 %217, i32* %218, align 4
  br label %219

219:                                              ; preds = %191, %187, %213
  %220 = icmp sgt i32 %1, 31
  br i1 %220, label %221, label %236

221:                                              ; preds = %219
  %222 = sub nsw i32 0, %4
  %223 = sext i32 %222 to i64
  %224 = getelementptr %union.v128_t, %union.v128_t* %0, i64 1, i32 0, i64 0
  %225 = bitcast i64* %224 to i8*
  %226 = shl nsw i64 %223, 2
  %227 = getelementptr i8, i8* %225, i64 %226
  %228 = sub nsw i32 5, %4
  %229 = icmp sgt i32 %228, 4
  %230 = select i1 %229, i32 %228, i32 4
  %231 = add nsw i32 %4, %230
  %232 = add nsw i32 %231, -5
  %233 = zext i32 %232 to i64
  %234 = shl nuw nsw i64 %233, 2
  %235 = add nuw nsw i64 %234, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %227, i8 0, i64 %235, i1 false)
  br label %236

236:                                              ; preds = %221, %219, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @bitvector_alloc(%struct.bitvector_t* nocapture, i64) local_unnamed_addr #2 {
  %3 = add i64 %1, 31
  %4 = lshr i64 %3, 5
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.bitvector_t, %struct.bitvector_t* %0, i64 0, i32 1
  store i32* null, i32** %7, align 8
  %8 = getelementptr inbounds %struct.bitvector_t, %struct.bitvector_t* %0, i64 0, i32 0
  store i32 0, i32* %8, align 8
  br label %23

9:                                                ; preds = %2
  %10 = shl nuw nsw i64 %4, 2
  %11 = tail call i8* @srtp_crypto_alloc(i64 %10) #7
  %12 = getelementptr inbounds %struct.bitvector_t, %struct.bitvector_t* %0, i64 0, i32 1
  %13 = bitcast i32** %12 to i8**
  store i8* %11, i8** %13, align 8
  %14 = icmp eq i8* %11, null
  br i1 %14, label %15, label %17

15:                                               ; preds = %9
  %16 = getelementptr inbounds %struct.bitvector_t, %struct.bitvector_t* %0, i64 0, i32 0
  store i32 0, i32* %16, align 8
  br label %23

17:                                               ; preds = %9
  %18 = trunc i64 %3 to i32
  %19 = and i32 %18, -32
  %20 = getelementptr inbounds %struct.bitvector_t, %struct.bitvector_t* %0, i64 0, i32 0
  store i32 %19, i32* %20, align 8
  %21 = lshr exact i32 %19, 3
  %22 = zext i32 %21 to i64
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %11, i8 0, i64 %22, i1 false) #7
  br label %23

23:                                               ; preds = %17, %15, %6
  %24 = phi i32 [ -1, %6 ], [ -1, %15 ], [ 0, %17 ]
  ret i32 %24
}

declare i8* @srtp_crypto_alloc(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @bitvector_set_to_zero(%struct.bitvector_t* nocapture readonly) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.bitvector_t, %struct.bitvector_t* %0, i64 0, i32 1
  %3 = bitcast i32** %2 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.bitvector_t, %struct.bitvector_t* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = lshr i32 %6, 3
  %8 = zext i32 %7 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 %8, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @bitvector_dealloc(%struct.bitvector_t* nocapture) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.bitvector_t, %struct.bitvector_t* %0, i64 0, i32 1
  %3 = load i32*, i32** %2, align 8
  %4 = icmp eq i32* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast i32* %3 to i8*
  tail call void @srtp_crypto_free(i8* nonnull %6) #7
  br label %7

7:                                                ; preds = %1, %5
  store i32* null, i32** %2, align 8
  %8 = getelementptr inbounds %struct.bitvector_t, %struct.bitvector_t* %0, i64 0, i32 0
  store i32 0, i32* %8, align 8
  ret void
}

declare void @srtp_crypto_free(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i8* @bitvector_bit_string(%struct.bitvector_t* nocapture readonly, i8* returned, i32) local_unnamed_addr #1 {
  %4 = add nsw i32 %2, -1
  %5 = getelementptr inbounds %struct.bitvector_t, %struct.bitvector_t* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp ugt i32 %6, 31
  %8 = icmp sgt i32 %4, 0
  %9 = and i1 %7, %8
  br i1 %9, label %10, label %45

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.bitvector_t, %struct.bitvector_t* %0, i64 0, i32 1
  %12 = sext i32 %4 to i64
  br label %13

13:                                               ; preds = %10, %33
  %14 = phi i64 [ 0, %10 ], [ %35, %33 ]
  %15 = phi i64 [ 0, %10 ], [ %28, %33 ]
  %16 = shl i64 %15, 32
  %17 = ashr exact i64 %16, 32
  br label %18

18:                                               ; preds = %18, %13
  %19 = phi i64 [ %28, %18 ], [ %17, %13 ]
  %20 = phi i32 [ %30, %18 ], [ -2147483648, %13 ]
  %21 = load i32*, i32** %11, align 8
  %22 = getelementptr inbounds i32, i32* %21, i64 %14
  %23 = load i32, i32* %22, align 4
  %24 = and i32 %23, %20
  %25 = icmp eq i32 %24, 0
  %26 = getelementptr inbounds i8, i8* %1, i64 %19
  %27 = select i1 %25, i8 48, i8 49
  store i8 %27, i8* %26, align 1
  %28 = add nsw i64 %19, 1
  %29 = icmp sge i64 %28, %12
  %30 = lshr i32 %20, 1
  %31 = icmp eq i32 %30, 0
  %32 = or i1 %29, %31
  br i1 %32, label %33, label %18

33:                                               ; preds = %18
  %34 = trunc i64 %28 to i32
  %35 = add nuw nsw i64 %14, 1
  %36 = load i32, i32* %5, align 8
  %37 = lshr i32 %36, 5
  %38 = zext i32 %37 to i64
  %39 = icmp ult i64 %35, %38
  %40 = icmp sgt i32 %4, %34
  %41 = and i1 %39, %40
  br i1 %41, label %13, label %42

42:                                               ; preds = %33
  %43 = shl i64 %28, 32
  %44 = ashr exact i64 %43, 32
  br label %45

45:                                               ; preds = %42, %3
  %46 = phi i64 [ 0, %3 ], [ %44, %42 ]
  %47 = getelementptr inbounds i8, i8* %1, i64 %46
  store i8 0, i8* %47, align 1
  ret i8* %1
}

; Function Attrs: nounwind ssp uwtable
define hidden void @bitvector_left_shift(%struct.bitvector_t* nocapture readonly, i32) local_unnamed_addr #2 {
  %3 = ashr i32 %1, 5
  %4 = and i32 %1, 31
  %5 = getelementptr inbounds %struct.bitvector_t, %struct.bitvector_t* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = lshr i32 %6, 5
  %8 = icmp sgt i32 %6, %1
  br i1 %8, label %15, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.bitvector_t, %struct.bitvector_t* %0, i64 0, i32 1
  %11 = bitcast i32** %10 to i8**
  %12 = load i8*, i8** %11, align 8
  %13 = lshr i32 %6, 3
  %14 = zext i32 %13 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 0, i64 %14, i1 false) #7
  br label %159

15:                                               ; preds = %2
  %16 = icmp eq i32 %4, 0
  br i1 %16, label %35, label %17

17:                                               ; preds = %15
  %18 = xor i32 %3, -1
  %19 = add nsw i32 %7, %18
  %20 = icmp sgt i32 %19, 0
  %21 = getelementptr inbounds %struct.bitvector_t, %struct.bitvector_t* %0, i64 0, i32 1
  %22 = load i32*, i32** %21, align 8
  br i1 %20, label %25, label %23

23:                                               ; preds = %17
  %24 = add nsw i32 %7, -1
  br label %123

25:                                               ; preds = %17
  %26 = sub nuw nsw i32 32, %4
  %27 = sext i32 %3 to i64
  %28 = add nsw i32 %7, -1
  %29 = sub nsw i32 %28, %3
  %30 = zext i32 %29 to i64
  %31 = and i64 %30, 1
  %32 = icmp eq i32 %29, 1
  br i1 %32, label %106, label %33

33:                                               ; preds = %25
  %34 = sub nsw i64 %30, %31
  br label %76

35:                                               ; preds = %15
  %36 = sub nsw i32 %7, %3
  %37 = icmp sgt i32 %36, 0
  br i1 %37, label %38, label %146

38:                                               ; preds = %35
  %39 = getelementptr inbounds %struct.bitvector_t, %struct.bitvector_t* %0, i64 0, i32 1
  %40 = sext i32 %3 to i64
  %41 = zext i32 %36 to i64
  %42 = add nsw i64 %41, -1
  %43 = and i64 %41, 3
  %44 = icmp ult i64 %42, 3
  br i1 %44, label %132, label %45

45:                                               ; preds = %38
  %46 = sub nsw i64 %41, %43
  br label %47

47:                                               ; preds = %47, %45
  %48 = phi i64 [ 0, %45 ], [ %73, %47 ]
  %49 = phi i64 [ %46, %45 ], [ %74, %47 ]
  %50 = load i32*, i32** %39, align 8
  %51 = add nsw i64 %48, %40
  %52 = getelementptr inbounds i32, i32* %50, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds i32, i32* %50, i64 %48
  store i32 %53, i32* %54, align 4
  %55 = or i64 %48, 1
  %56 = load i32*, i32** %39, align 8
  %57 = add nsw i64 %55, %40
  %58 = getelementptr inbounds i32, i32* %56, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds i32, i32* %56, i64 %55
  store i32 %59, i32* %60, align 4
  %61 = or i64 %48, 2
  %62 = load i32*, i32** %39, align 8
  %63 = add nsw i64 %61, %40
  %64 = getelementptr inbounds i32, i32* %62, i64 %63
  %65 = load i32, i32* %64, align 4
  %66 = getelementptr inbounds i32, i32* %62, i64 %61
  store i32 %65, i32* %66, align 4
  %67 = or i64 %48, 3
  %68 = load i32*, i32** %39, align 8
  %69 = add nsw i64 %67, %40
  %70 = getelementptr inbounds i32, i32* %68, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds i32, i32* %68, i64 %67
  store i32 %71, i32* %72, align 4
  %73 = add nuw nsw i64 %48, 4
  %74 = add i64 %49, -4
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %132, label %47

76:                                               ; preds = %76, %33
  %77 = phi i64 [ 0, %33 ], [ %102, %76 ]
  %78 = phi i32* [ %22, %33 ], [ %103, %76 ]
  %79 = phi i64 [ %34, %33 ], [ %104, %76 ]
  %80 = add nsw i64 %77, %27
  %81 = getelementptr inbounds i32, i32* %78, i64 %80
  %82 = load i32, i32* %81, align 4
  %83 = lshr i32 %82, %4
  %84 = add nsw i64 %80, 1
  %85 = getelementptr inbounds i32, i32* %78, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = shl i32 %86, %26
  %88 = xor i32 %87, %83
  %89 = getelementptr inbounds i32, i32* %78, i64 %77
  store i32 %88, i32* %89, align 4
  %90 = or i64 %77, 1
  %91 = load i32*, i32** %21, align 8
  %92 = add nsw i64 %90, %27
  %93 = getelementptr inbounds i32, i32* %91, i64 %92
  %94 = load i32, i32* %93, align 4
  %95 = lshr i32 %94, %4
  %96 = add nsw i64 %92, 1
  %97 = getelementptr inbounds i32, i32* %91, i64 %96
  %98 = load i32, i32* %97, align 4
  %99 = shl i32 %98, %26
  %100 = xor i32 %99, %95
  %101 = getelementptr inbounds i32, i32* %91, i64 %90
  store i32 %100, i32* %101, align 4
  %102 = add nuw nsw i64 %77, 2
  %103 = load i32*, i32** %21, align 8
  %104 = add i64 %79, -2
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %106, label %76

106:                                              ; preds = %76, %25
  %107 = phi i32* [ undef, %25 ], [ %103, %76 ]
  %108 = phi i64 [ 0, %25 ], [ %102, %76 ]
  %109 = phi i32* [ %22, %25 ], [ %103, %76 ]
  %110 = icmp eq i64 %31, 0
  br i1 %110, label %123, label %111

111:                                              ; preds = %106
  %112 = add nsw i64 %108, %27
  %113 = getelementptr inbounds i32, i32* %109, i64 %112
  %114 = load i32, i32* %113, align 4
  %115 = lshr i32 %114, %4
  %116 = add nsw i64 %112, 1
  %117 = getelementptr inbounds i32, i32* %109, i64 %116
  %118 = load i32, i32* %117, align 4
  %119 = shl i32 %118, %26
  %120 = xor i32 %119, %115
  %121 = getelementptr inbounds i32, i32* %109, i64 %108
  store i32 %120, i32* %121, align 4
  %122 = load i32*, i32** %21, align 8
  br label %123

123:                                              ; preds = %111, %106, %23
  %124 = phi i32 [ %24, %23 ], [ %28, %106 ], [ %28, %111 ]
  %125 = phi i32* [ %22, %23 ], [ %107, %106 ], [ %122, %111 ]
  %126 = sext i32 %124 to i64
  %127 = getelementptr inbounds i32, i32* %125, i64 %126
  %128 = load i32, i32* %127, align 4
  %129 = lshr i32 %128, %4
  %130 = sext i32 %19 to i64
  %131 = getelementptr inbounds i32, i32* %125, i64 %130
  store i32 %129, i32* %131, align 4
  br label %146

132:                                              ; preds = %47, %38
  %133 = phi i64 [ 0, %38 ], [ %73, %47 ]
  %134 = icmp eq i64 %43, 0
  br i1 %134, label %146, label %135

135:                                              ; preds = %132, %135
  %136 = phi i64 [ %143, %135 ], [ %133, %132 ]
  %137 = phi i64 [ %144, %135 ], [ %43, %132 ]
  %138 = load i32*, i32** %39, align 8
  %139 = add nsw i64 %136, %40
  %140 = getelementptr inbounds i32, i32* %138, i64 %139
  %141 = load i32, i32* %140, align 4
  %142 = getelementptr inbounds i32, i32* %138, i64 %136
  store i32 %141, i32* %142, align 4
  %143 = add nuw nsw i64 %136, 1
  %144 = add i64 %137, -1
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %146, label %135, !llvm.loop !29

146:                                              ; preds = %132, %135, %35, %123
  %147 = icmp sgt i32 %1, 31
  br i1 %147, label %148, label %159

148:                                              ; preds = %146
  %149 = getelementptr inbounds %struct.bitvector_t, %struct.bitvector_t* %0, i64 0, i32 1
  %150 = sub nsw i32 %7, %3
  %151 = sext i32 %150 to i64
  %152 = zext i32 %7 to i64
  br label %153

153:                                              ; preds = %148, %153
  %154 = phi i64 [ %151, %148 ], [ %157, %153 ]
  %155 = load i32*, i32** %149, align 8
  %156 = getelementptr inbounds i32, i32* %155, i64 %154
  store i32 0, i32* %156, align 4
  %157 = add nsw i64 %154, 1
  %158 = icmp slt i64 %157, %152
  br i1 %158, label %153, label %159

159:                                              ; preds = %153, %146, %9
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @srtp_octet_string_is_eq(i8* nocapture readonly, i8* readonly, i32) local_unnamed_addr #5 {
  %4 = sext i32 %2 to i64
  %5 = getelementptr inbounds i8, i8* %1, i64 %4
  %6 = icmp sgt i32 %2, 0
  br i1 %6, label %7, label %127

7:                                                ; preds = %3
  %8 = ptrtoint i8* %1 to i64
  %9 = getelementptr i8, i8* %1, i64 1
  %10 = icmp ugt i8* %5, %9
  %11 = select i1 %10, i8* %5, i8* %9
  %12 = ptrtoint i8* %11 to i64
  %13 = sub i64 %12, %8
  %14 = icmp ult i64 %13, 8
  br i1 %14, label %107, label %15

15:                                               ; preds = %7
  %16 = and i64 %13, -8
  %17 = getelementptr i8, i8* %0, i64 %16
  %18 = getelementptr i8, i8* %1, i64 %16
  %19 = add i64 %16, -8
  %20 = lshr exact i64 %19, 3
  %21 = add nuw nsw i64 %20, 1
  %22 = and i64 %21, 1
  %23 = icmp eq i64 %19, 0
  br i1 %23, label %71, label %24

24:                                               ; preds = %15
  %25 = sub nuw nsw i64 %21, %22
  br label %26

26:                                               ; preds = %26, %24
  %27 = phi i64 [ 0, %24 ], [ %68, %26 ]
  %28 = phi <4 x i32> [ zeroinitializer, %24 ], [ %66, %26 ]
  %29 = phi <4 x i32> [ zeroinitializer, %24 ], [ %67, %26 ]
  %30 = phi i64 [ %25, %24 ], [ %69, %26 ]
  %31 = getelementptr i8, i8* %0, i64 %27
  %32 = getelementptr i8, i8* %1, i64 %27
  %33 = bitcast i8* %31 to <4 x i8>*
  %34 = load <4 x i8>, <4 x i8>* %33, align 1
  %35 = getelementptr i8, i8* %31, i64 4
  %36 = bitcast i8* %35 to <4 x i8>*
  %37 = load <4 x i8>, <4 x i8>* %36, align 1
  %38 = bitcast i8* %32 to <4 x i8>*
  %39 = load <4 x i8>, <4 x i8>* %38, align 1
  %40 = getelementptr i8, i8* %32, i64 4
  %41 = bitcast i8* %40 to <4 x i8>*
  %42 = load <4 x i8>, <4 x i8>* %41, align 1
  %43 = xor <4 x i8> %39, %34
  %44 = xor <4 x i8> %42, %37
  %45 = zext <4 x i8> %43 to <4 x i32>
  %46 = zext <4 x i8> %44 to <4 x i32>
  %47 = or <4 x i32> %28, %45
  %48 = or <4 x i32> %29, %46
  %49 = or i64 %27, 8
  %50 = getelementptr i8, i8* %0, i64 %49
  %51 = getelementptr i8, i8* %1, i64 %49
  %52 = bitcast i8* %50 to <4 x i8>*
  %53 = load <4 x i8>, <4 x i8>* %52, align 1
  %54 = getelementptr i8, i8* %50, i64 4
  %55 = bitcast i8* %54 to <4 x i8>*
  %56 = load <4 x i8>, <4 x i8>* %55, align 1
  %57 = bitcast i8* %51 to <4 x i8>*
  %58 = load <4 x i8>, <4 x i8>* %57, align 1
  %59 = getelementptr i8, i8* %51, i64 4
  %60 = bitcast i8* %59 to <4 x i8>*
  %61 = load <4 x i8>, <4 x i8>* %60, align 1
  %62 = xor <4 x i8> %58, %53
  %63 = xor <4 x i8> %61, %56
  %64 = zext <4 x i8> %62 to <4 x i32>
  %65 = zext <4 x i8> %63 to <4 x i32>
  %66 = or <4 x i32> %47, %64
  %67 = or <4 x i32> %48, %65
  %68 = add i64 %27, 16
  %69 = add i64 %30, -2
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %26, !llvm.loop !30

71:                                               ; preds = %26, %15
  %72 = phi <4 x i32> [ undef, %15 ], [ %66, %26 ]
  %73 = phi <4 x i32> [ undef, %15 ], [ %67, %26 ]
  %74 = phi i64 [ 0, %15 ], [ %68, %26 ]
  %75 = phi <4 x i32> [ zeroinitializer, %15 ], [ %66, %26 ]
  %76 = phi <4 x i32> [ zeroinitializer, %15 ], [ %67, %26 ]
  %77 = icmp eq i64 %22, 0
  br i1 %77, label %97, label %78

78:                                               ; preds = %71
  %79 = getelementptr i8, i8* %0, i64 %74
  %80 = getelementptr i8, i8* %1, i64 %74
  %81 = getelementptr i8, i8* %80, i64 4
  %82 = bitcast i8* %81 to <4 x i8>*
  %83 = load <4 x i8>, <4 x i8>* %82, align 1
  %84 = getelementptr i8, i8* %79, i64 4
  %85 = bitcast i8* %84 to <4 x i8>*
  %86 = load <4 x i8>, <4 x i8>* %85, align 1
  %87 = xor <4 x i8> %83, %86
  %88 = zext <4 x i8> %87 to <4 x i32>
  %89 = or <4 x i32> %76, %88
  %90 = bitcast i8* %80 to <4 x i8>*
  %91 = load <4 x i8>, <4 x i8>* %90, align 1
  %92 = bitcast i8* %79 to <4 x i8>*
  %93 = load <4 x i8>, <4 x i8>* %92, align 1
  %94 = xor <4 x i8> %91, %93
  %95 = zext <4 x i8> %94 to <4 x i32>
  %96 = or <4 x i32> %75, %95
  br label %97

97:                                               ; preds = %71, %78
  %98 = phi <4 x i32> [ %72, %71 ], [ %96, %78 ]
  %99 = phi <4 x i32> [ %73, %71 ], [ %89, %78 ]
  %100 = or <4 x i32> %99, %98
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %102 = or <4 x i32> %100, %101
  %103 = shufflevector <4 x i32> %102, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %104 = or <4 x i32> %102, %103
  %105 = extractelement <4 x i32> %104, i32 0
  %106 = icmp eq i64 %13, %16
  br i1 %106, label %123, label %107

107:                                              ; preds = %97, %7
  %108 = phi i32 [ 0, %7 ], [ %105, %97 ]
  %109 = phi i8* [ %0, %7 ], [ %17, %97 ]
  %110 = phi i8* [ %1, %7 ], [ %18, %97 ]
  br label %111

111:                                              ; preds = %107, %111
  %112 = phi i32 [ %121, %111 ], [ %108, %107 ]
  %113 = phi i8* [ %115, %111 ], [ %109, %107 ]
  %114 = phi i8* [ %117, %111 ], [ %110, %107 ]
  %115 = getelementptr inbounds i8, i8* %113, i64 1
  %116 = load i8, i8* %113, align 1
  %117 = getelementptr inbounds i8, i8* %114, i64 1
  %118 = load i8, i8* %114, align 1
  %119 = xor i8 %118, %116
  %120 = zext i8 %119 to i32
  %121 = or i32 %112, %120
  %122 = icmp ult i8* %117, %5
  br i1 %122, label %111, label %123, !llvm.loop !31

123:                                              ; preds = %111, %97
  %124 = phi i32 [ %105, %97 ], [ %121, %111 ]
  %125 = icmp ne i32 %124, 0
  %126 = zext i1 %125 to i32
  br label %127

127:                                              ; preds = %123, %3
  %128 = phi i32 [ 0, %3 ], [ %126, %123 ]
  ret i32 %128
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @srtp_cleanse(i8*, i64) local_unnamed_addr #1 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %33, label %4

4:                                                ; preds = %2
  %5 = add i64 %1, -1
  %6 = and i64 %1, 7
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %16, label %8

8:                                                ; preds = %4, %8
  %9 = phi i8* [ %13, %8 ], [ %0, %4 ]
  %10 = phi i64 [ %12, %8 ], [ %1, %4 ]
  %11 = phi i64 [ %14, %8 ], [ %6, %4 ]
  %12 = add i64 %10, -1
  %13 = getelementptr inbounds i8, i8* %9, i64 1
  store volatile i8 0, i8* %9, align 1
  %14 = add i64 %11, -1
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %8, !llvm.loop !33

16:                                               ; preds = %8, %4
  %17 = phi i8* [ %0, %4 ], [ %13, %8 ]
  %18 = phi i64 [ %1, %4 ], [ %12, %8 ]
  %19 = icmp ult i64 %5, 7
  br i1 %19, label %33, label %20

20:                                               ; preds = %16, %20
  %21 = phi i8* [ %31, %20 ], [ %17, %16 ]
  %22 = phi i64 [ %30, %20 ], [ %18, %16 ]
  %23 = getelementptr inbounds i8, i8* %21, i64 1
  store volatile i8 0, i8* %21, align 1
  %24 = getelementptr inbounds i8, i8* %21, i64 2
  store volatile i8 0, i8* %23, align 1
  %25 = getelementptr inbounds i8, i8* %21, i64 3
  store volatile i8 0, i8* %24, align 1
  %26 = getelementptr inbounds i8, i8* %21, i64 4
  store volatile i8 0, i8* %25, align 1
  %27 = getelementptr inbounds i8, i8* %21, i64 5
  store volatile i8 0, i8* %26, align 1
  %28 = getelementptr inbounds i8, i8* %21, i64 6
  store volatile i8 0, i8* %27, align 1
  %29 = getelementptr inbounds i8, i8* %21, i64 7
  store volatile i8 0, i8* %28, align 1
  %30 = add i64 %22, -8
  %31 = getelementptr inbounds i8, i8* %21, i64 8
  store volatile i8 0, i8* %29, align 1
  %32 = icmp eq i64 %30, 0
  br i1 %32, label %33, label %20

33:                                               ; preds = %16, %20, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @octet_string_set_to_zero(i8*, i64) local_unnamed_addr #2 {
  tail call void @OPENSSL_cleanse(i8* %0, i64 %1) #7
  ret void
}

declare void @OPENSSL_cleanse(i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #6

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = !{!16}
!16 = distinct !{!16, !12}
!17 = !{!11, !14}
!18 = distinct !{!18, !8}
!19 = !{!20}
!20 = distinct !{!20, !21}
!21 = distinct !{!21, !"LVerDomain"}
!22 = !{!23}
!23 = distinct !{!23, !21}
!24 = distinct !{!24, !8}
!25 = distinct !{!25, !26}
!26 = !{!"llvm.loop.unroll.disable"}
!27 = distinct !{!27, !8}
!28 = distinct !{!28, !8}
!29 = distinct !{!29, !26}
!30 = distinct !{!30, !8}
!31 = distinct !{!31, !32, !8}
!32 = !{!"llvm.loop.unroll.runtime.disable"}
!33 = distinct !{!33, !26}
