; ModuleID = '../../third_party/pdfium/core/fxcodec/jbig2/jbig2_decoder.cpp'
source_filename = "../../third_party/pdfium/core/fxcodec/jbig2/jbig2_decoder.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.fxcodec::Jbig2Context" = type { i32, i32, i32, i32, %"class.pdfium::span", %"class.pdfium::span", i8*, i32, %"class.std::__1::unique_ptr" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i8* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CJBig2_Context* }
%class.CJBig2_Context = type { %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.1", %"class.std::__1::vector", %"class.std::__1::vector.80", %"class.std::__1::unique_ptr.27", %"class.std::__1::vector.88", i8, i8, i8, i32, i32, %"class.std::__1::vector.18", %"class.std::__1::unique_ptr.95", %"class.std::__1::unique_ptr.102", %"class.std::__1::unique_ptr.7", %"class.pdfium::base::internal::CheckedNumeric", %struct.JBig2RegionInfo, %"class.fxcrt::UnownedPtr.108" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %class.CJBig2_BitStream* }
%class.CJBig2_BitStream = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr.7"*, %"class.std::__1::unique_ptr.7"*, %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.std::__1::unique_ptr.7"* }
%"class.std::__1::vector.80" = type { %"class.std::__1::__vector_base.81" }
%"class.std::__1::__vector_base.81" = type { %"class.std::__1::unique_ptr.82"*, %"class.std::__1::unique_ptr.82"*, %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::unique_ptr.82" = type opaque
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"class.std::__1::unique_ptr.82"* }
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %class.CJBig2_Image* }
%class.CJBig2_Image = type <{ %"class.fxcrt::MaybeOwned", i32, i32, i32, [4 x i8] }>
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.30", %"class.fxcrt::UnownedPtr.34" }
%"class.std::__1::unique_ptr.30" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { i8* }
%"class.fxcrt::UnownedPtr.34" = type { i8* }
%"class.std::__1::vector.88" = type { %"class.std::__1::__vector_base.89" }
%"class.std::__1::__vector_base.89" = type { %"class.std::__1::unique_ptr.52"*, %"class.std::__1::unique_ptr.52"*, %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::unique_ptr.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %class.CJBig2_HuffmanTable* }
%class.CJBig2_HuffmanTable = type { i8, i8, i32, %"class.std::__1::vector.55", %"class.std::__1::vector.62", %"class.std::__1::vector.62" }
%"class.std::__1::vector.55" = type { %"class.std::__1::__vector_base.56" }
%"class.std::__1::__vector_base.56" = type { %struct.JBig2HuffmanCode*, %struct.JBig2HuffmanCode*, %"class.std::__1::__compressed_pair.57" }
%struct.JBig2HuffmanCode = type { i32, i32 }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %struct.JBig2HuffmanCode* }
%"class.std::__1::vector.62" = type { %"class.std::__1::__vector_base.63" }
%"class.std::__1::__vector_base.63" = type { i32*, i32*, %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { i32* }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"class.std::__1::unique_ptr.52"* }
%"class.std::__1::vector.18" = type { %"class.std::__1::__vector_base.19" }
%"class.std::__1::__vector_base.19" = type { %class.JBig2ArithCtx*, %class.JBig2ArithCtx*, %"class.std::__1::__compressed_pair.20" }
%class.JBig2ArithCtx = type { i8, i32 }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %class.JBig2ArithCtx* }
%"class.std::__1::unique_ptr.95" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %class.CJBig2_ArithDecoder* }
%class.CJBig2_ArithDecoder = type { i8, i8, i8, i32, i32, i32, %"class.fxcrt::UnownedPtr.98" }
%"class.fxcrt::UnownedPtr.98" = type { %class.CJBig2_BitStream* }
%"class.std::__1::unique_ptr.102" = type { %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %class.CJBig2_GRDProc* }
%class.CJBig2_GRDProc = type opaque
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %class.CJBig2_Segment* }
%class.CJBig2_Segment = type { i32, %union.anon, i32, %"class.std::__1::vector.10", i32, i32, i32, i32, i32, i32, i32, %"class.std::__1::unique_ptr.15", %"class.std::__1::unique_ptr.46", %"class.std::__1::unique_ptr.27", %"class.std::__1::unique_ptr.52" }
%union.anon = type { %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { i32*, i32*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { i32* }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %class.CJBig2_SymbolDict* }
%class.CJBig2_SymbolDict = type { %"class.std::__1::vector.18", %"class.std::__1::vector.18", %"class.std::__1::vector.25" }
%"class.std::__1::vector.25" = type { %"class.std::__1::__vector_base.26" }
%"class.std::__1::__vector_base.26" = type { %"class.std::__1::unique_ptr.27"*, %"class.std::__1::unique_ptr.27"*, %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.std::__1::unique_ptr.27"* }
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %class.CJBig2_PatternDict* }
%class.CJBig2_PatternDict = type { i32, %"class.std::__1::vector.25" }
%"class.pdfium::base::internal::CheckedNumeric" = type { %"class.pdfium::base::internal::CheckedNumericState" }
%"class.pdfium::base::internal::CheckedNumericState" = type { i8, i32 }
%struct.JBig2RegionInfo = type { i32, i32, i32, i32, i8 }
%"class.fxcrt::UnownedPtr.108" = type { %"class.std::__1::list"* }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.109" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { i64 }
%class.JBig2_DocumentContext = type { %"class.std::__1::list" }
%class.PauseIndicatorIface = type opaque

@_ZN7fxcodec12Jbig2ContextC1Ev = hidden unnamed_addr alias void (%"class.fxcodec::Jbig2Context"*), void (%"class.fxcodec::Jbig2Context"*)* @_ZN7fxcodec12Jbig2ContextC2Ev
@_ZN7fxcodec12Jbig2ContextD1Ev = hidden unnamed_addr alias void (%"class.fxcodec::Jbig2Context"*), void (%"class.fxcodec::Jbig2Context"*)* @_ZN7fxcodec12Jbig2ContextD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7fxcodec12Jbig2ContextC2Ev(%"class.fxcodec::Jbig2Context"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::Jbig2Context", %"class.fxcodec::Jbig2Context"* %0, i64 0, i32 8
  %3 = bitcast %"class.std::__1::unique_ptr"* %2 to i64*
  store i64 0, i64* %3, align 8
  %4 = bitcast %"class.fxcodec::Jbig2Context"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 60, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7fxcodec12Jbig2ContextD2Ev(%"class.fxcodec::Jbig2Context"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::Jbig2Context", %"class.fxcodec::Jbig2Context"* %0, i64 0, i32 8, i32 0, i32 0, i32 0
  %3 = load %class.CJBig2_Context*, %class.CJBig2_Context** %2, align 8
  store %class.CJBig2_Context* null, %class.CJBig2_Context** %2, align 8
  %4 = icmp eq %class.CJBig2_Context* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  tail call void @_ZN14CJBig2_ContextD1Ev(%class.CJBig2_Context* nonnull %3) #5
  %6 = bitcast %class.CJBig2_Context* %3 to i8*
  tail call void @_ZdlPv(i8* %6) #6
  br label %7

7:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN7fxcodec12Jbig2Decoder11StartDecodeEPNS_12Jbig2ContextEP21JBig2_DocumentContextjjN6pdfium4spanIKhEEjS8_jPhjP19PauseIndicatorIface(%"class.fxcodec::Jbig2Context"* nocapture, %class.JBig2_DocumentContext*, i32, i32, %"class.pdfium::span"* nocapture readonly, i32, %"class.pdfium::span"* nocapture readonly, i32, i8*, i32, %class.PauseIndicatorIface*) local_unnamed_addr #0 align 2 {
  %12 = alloca %"class.pdfium::span", align 8
  %13 = alloca %"class.pdfium::span", align 8
  %14 = getelementptr inbounds %"class.fxcodec::Jbig2Context", %"class.fxcodec::Jbig2Context"* %0, i64 0, i32 0
  store i32 %2, i32* %14, align 8
  %15 = getelementptr inbounds %"class.fxcodec::Jbig2Context", %"class.fxcodec::Jbig2Context"* %0, i64 0, i32 1
  store i32 %3, i32* %15, align 4
  %16 = getelementptr inbounds %"class.fxcodec::Jbig2Context", %"class.fxcodec::Jbig2Context"* %0, i64 0, i32 5, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %4, i64 0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %17, %19
  br i1 %20, label %22, label %21

21:                                               ; preds = %11
  store i8* %19, i8** %16, align 8
  br label %22

22:                                               ; preds = %11, %21
  %23 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %4, i64 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %"class.fxcodec::Jbig2Context", %"class.fxcodec::Jbig2Context"* %0, i64 0, i32 5, i32 1
  store i64 %24, i64* %25, align 8
  %26 = getelementptr inbounds %"class.fxcodec::Jbig2Context", %"class.fxcodec::Jbig2Context"* %0, i64 0, i32 3
  store i32 %5, i32* %26, align 4
  %27 = getelementptr inbounds %"class.fxcodec::Jbig2Context", %"class.fxcodec::Jbig2Context"* %0, i64 0, i32 4, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %6, i64 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = icmp eq i8* %28, %30
  br i1 %31, label %33, label %32

32:                                               ; preds = %22
  store i8* %30, i8** %27, align 8
  br label %33

33:                                               ; preds = %22, %32
  %34 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %6, i64 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %"class.fxcodec::Jbig2Context", %"class.fxcodec::Jbig2Context"* %0, i64 0, i32 4, i32 1
  store i64 %35, i64* %36, align 8
  %37 = getelementptr inbounds %"class.fxcodec::Jbig2Context", %"class.fxcodec::Jbig2Context"* %0, i64 0, i32 2
  store i32 %7, i32* %37, align 8
  %38 = getelementptr inbounds %"class.fxcodec::Jbig2Context", %"class.fxcodec::Jbig2Context"* %0, i64 0, i32 6
  store i8* %8, i8** %38, align 8
  %39 = getelementptr inbounds %"class.fxcodec::Jbig2Context", %"class.fxcodec::Jbig2Context"* %0, i64 0, i32 7
  store i32 %9, i32* %39, align 8
  %40 = mul i32 %9, %3
  %41 = zext i32 %40 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 0, i64 %41, i1 false)
  %42 = bitcast %"class.pdfium::span"* %12 to i8*
  %43 = bitcast %"class.pdfium::span"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %42, i8* align 8 %43, i64 16, i1 false)
  %44 = bitcast %"class.pdfium::span"* %13 to i8*
  %45 = bitcast %"class.pdfium::span"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %44, i8* align 8 %45, i64 16, i1 false)
  %46 = getelementptr inbounds %class.JBig2_DocumentContext, %class.JBig2_DocumentContext* %1, i64 0, i32 0
  %47 = call %class.CJBig2_Context* @_ZN14CJBig2_Context6CreateEN6pdfium4spanIKhEEjS3_jPNSt3__14listINS4_4pairINS6_IjjEENS4_10unique_ptrI17CJBig2_SymbolDictNS4_14default_deleteIS9_EEEEEENS4_9allocatorISD_EEEE(%"class.pdfium::span"* nonnull %12, i32 %7, %"class.pdfium::span"* nonnull %13, i32 %5, %"class.std::__1::list"* %46) #5
  %48 = ptrtoint %class.CJBig2_Context* %47 to i64
  %49 = getelementptr inbounds %"class.fxcodec::Jbig2Context", %"class.fxcodec::Jbig2Context"* %0, i64 0, i32 8
  %50 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = load %class.CJBig2_Context*, %class.CJBig2_Context** %50, align 8
  %52 = bitcast %"class.std::__1::unique_ptr"* %49 to i64*
  store i64 %48, i64* %52, align 8
  %53 = icmp eq %class.CJBig2_Context* %51, null
  br i1 %53, label %57, label %54

54:                                               ; preds = %33
  call void @_ZN14CJBig2_ContextD1Ev(%class.CJBig2_Context* nonnull %51) #5
  %55 = bitcast %class.CJBig2_Context* %51 to i8*
  call void @_ZdlPv(i8* %55) #6
  %56 = load %class.CJBig2_Context*, %class.CJBig2_Context** %50, align 8
  br label %57

57:                                               ; preds = %54, %33
  %58 = phi %class.CJBig2_Context* [ %56, %54 ], [ %47, %33 ]
  %59 = call zeroext i1 @_ZN14CJBig2_Context12GetFirstPageEPhiiiP19PauseIndicatorIface(%class.CJBig2_Context* %58, i8* %8, i32 %2, i32 %3, i32 %9, %class.PauseIndicatorIface* %10) #5
  %60 = getelementptr inbounds %"class.fxcodec::Jbig2Context", %"class.fxcodec::Jbig2Context"* %0, i64 0, i32 8, i32 0, i32 0, i32 0
  %61 = load %class.CJBig2_Context*, %class.CJBig2_Context** %60, align 8
  %62 = getelementptr inbounds %class.CJBig2_Context, %class.CJBig2_Context* %61, i64 0, i32 10
  %63 = load i32, i32* %62, align 8
  %64 = icmp eq i32 %63, 4
  br i1 %64, label %65, label %142

65:                                               ; preds = %57
  store %class.CJBig2_Context* null, %class.CJBig2_Context** %60, align 8
  %66 = icmp eq %class.CJBig2_Context* %61, null
  br i1 %66, label %69, label %67

67:                                               ; preds = %65
  call void @_ZN14CJBig2_ContextD1Ev(%class.CJBig2_Context* nonnull %61) #5
  %68 = bitcast %class.CJBig2_Context* %61 to i8*
  call void @_ZdlPv(i8* %68) #6
  br label %69

69:                                               ; preds = %67, %65
  br i1 %59, label %70, label %142

70:                                               ; preds = %69
  %71 = load i32, i32* %15, align 4
  %72 = load i32, i32* %39, align 8
  %73 = mul i32 %72, %71
  %74 = lshr i32 %73, 2
  %75 = bitcast i8** %38 to i32**
  %76 = load i32*, i32** %75, align 8
  %77 = icmp eq i32 %74, 0
  br i1 %77, label %142, label %78

78:                                               ; preds = %70
  %79 = zext i32 %74 to i64
  %80 = icmp ult i32 %73, 32
  br i1 %80, label %133, label %81

81:                                               ; preds = %78
  %82 = and i64 %79, 1073741816
  %83 = add nsw i64 %82, -8
  %84 = lshr exact i64 %83, 3
  %85 = add nuw nsw i64 %84, 1
  %86 = and i64 %85, 1
  %87 = icmp eq i64 %83, 0
  br i1 %87, label %117, label %88

88:                                               ; preds = %81
  %89 = sub nuw nsw i64 %85, %86
  br label %90

90:                                               ; preds = %90, %88
  %91 = phi i64 [ 0, %88 ], [ %114, %90 ]
  %92 = phi i64 [ %89, %88 ], [ %115, %90 ]
  %93 = getelementptr inbounds i32, i32* %76, i64 %91
  %94 = bitcast i32* %93 to <4 x i32>*
  %95 = load <4 x i32>, <4 x i32>* %94, align 4
  %96 = getelementptr inbounds i32, i32* %93, i64 4
  %97 = bitcast i32* %96 to <4 x i32>*
  %98 = load <4 x i32>, <4 x i32>* %97, align 4
  %99 = xor <4 x i32> %95, <i32 -1, i32 -1, i32 -1, i32 -1>
  %100 = xor <4 x i32> %98, <i32 -1, i32 -1, i32 -1, i32 -1>
  %101 = bitcast i32* %93 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %101, align 4
  %102 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %102, align 4
  %103 = or i64 %91, 8
  %104 = getelementptr inbounds i32, i32* %76, i64 %103
  %105 = bitcast i32* %104 to <4 x i32>*
  %106 = load <4 x i32>, <4 x i32>* %105, align 4
  %107 = getelementptr inbounds i32, i32* %104, i64 4
  %108 = bitcast i32* %107 to <4 x i32>*
  %109 = load <4 x i32>, <4 x i32>* %108, align 4
  %110 = xor <4 x i32> %106, <i32 -1, i32 -1, i32 -1, i32 -1>
  %111 = xor <4 x i32> %109, <i32 -1, i32 -1, i32 -1, i32 -1>
  %112 = bitcast i32* %104 to <4 x i32>*
  store <4 x i32> %110, <4 x i32>* %112, align 4
  %113 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> %111, <4 x i32>* %113, align 4
  %114 = add i64 %91, 16
  %115 = add i64 %92, -2
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %117, label %90, !llvm.loop !2

117:                                              ; preds = %90, %81
  %118 = phi i64 [ 0, %81 ], [ %114, %90 ]
  %119 = icmp eq i64 %86, 0
  br i1 %119, label %131, label %120

120:                                              ; preds = %117
  %121 = getelementptr inbounds i32, i32* %76, i64 %118
  %122 = bitcast i32* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4
  %124 = getelementptr inbounds i32, i32* %121, i64 4
  %125 = bitcast i32* %124 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 4
  %127 = xor <4 x i32> %123, <i32 -1, i32 -1, i32 -1, i32 -1>
  %128 = xor <4 x i32> %126, <i32 -1, i32 -1, i32 -1, i32 -1>
  %129 = bitcast i32* %121 to <4 x i32>*
  store <4 x i32> %127, <4 x i32>* %129, align 4
  %130 = bitcast i32* %124 to <4 x i32>*
  store <4 x i32> %128, <4 x i32>* %130, align 4
  br label %131

131:                                              ; preds = %117, %120
  %132 = icmp eq i64 %82, %79
  br i1 %132, label %142, label %133

133:                                              ; preds = %131, %78
  %134 = phi i64 [ 0, %78 ], [ %82, %131 ]
  br label %135

135:                                              ; preds = %133, %135
  %136 = phi i64 [ %140, %135 ], [ %134, %133 ]
  %137 = getelementptr inbounds i32, i32* %76, i64 %136
  %138 = load i32, i32* %137, align 4
  %139 = xor i32 %138, -1
  store i32 %139, i32* %137, align 4
  %140 = add nuw nsw i64 %136, 1
  %141 = icmp eq i64 %140, %79
  br i1 %141, label %142, label %135, !llvm.loop !4

142:                                              ; preds = %135, %131, %57, %69, %70
  %143 = phi i32 [ %63, %57 ], [ -1, %69 ], [ 4, %70 ], [ 4, %131 ], [ 4, %135 ]
  ret i32 %143
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare %class.CJBig2_Context* @_ZN14CJBig2_Context6CreateEN6pdfium4spanIKhEEjS3_jPNSt3__14listINS4_4pairINS6_IjjEENS4_10unique_ptrI17CJBig2_SymbolDictNS4_14default_deleteIS9_EEEEEENS4_9allocatorISD_EEEE(%"class.pdfium::span"*, i32, %"class.pdfium::span"*, i32, %"class.std::__1::list"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare zeroext i1 @_ZN14CJBig2_Context12GetFirstPageEPhiiiP19PauseIndicatorIface(%class.CJBig2_Context*, i8*, i32, i32, i32, %class.PauseIndicatorIface*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN7fxcodec12Jbig2Decoder14ContinueDecodeEPNS_12Jbig2ContextEP19PauseIndicatorIface(%"class.fxcodec::Jbig2Context"* nocapture, %class.PauseIndicatorIface*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.fxcodec::Jbig2Context", %"class.fxcodec::Jbig2Context"* %0, i64 0, i32 8, i32 0, i32 0, i32 0
  %4 = load %class.CJBig2_Context*, %class.CJBig2_Context** %3, align 8
  %5 = tail call zeroext i1 @_ZN14CJBig2_Context8ContinueEP19PauseIndicatorIface(%class.CJBig2_Context* %4, %class.PauseIndicatorIface* %1) #5
  %6 = load %class.CJBig2_Context*, %class.CJBig2_Context** %3, align 8
  %7 = getelementptr inbounds %class.CJBig2_Context, %class.CJBig2_Context* %6, i64 0, i32 10
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 4
  br i1 %9, label %10, label %90

10:                                               ; preds = %2
  store %class.CJBig2_Context* null, %class.CJBig2_Context** %3, align 8
  %11 = icmp eq %class.CJBig2_Context* %6, null
  br i1 %11, label %14, label %12

12:                                               ; preds = %10
  tail call void @_ZN14CJBig2_ContextD1Ev(%class.CJBig2_Context* nonnull %6) #5
  %13 = bitcast %class.CJBig2_Context* %6 to i8*
  tail call void @_ZdlPv(i8* %13) #6
  br label %14

14:                                               ; preds = %12, %10
  br i1 %5, label %15, label %90

15:                                               ; preds = %14
  %16 = getelementptr inbounds %"class.fxcodec::Jbig2Context", %"class.fxcodec::Jbig2Context"* %0, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.fxcodec::Jbig2Context", %"class.fxcodec::Jbig2Context"* %0, i64 0, i32 7
  %19 = load i32, i32* %18, align 8
  %20 = mul i32 %19, %17
  %21 = lshr i32 %20, 2
  %22 = getelementptr inbounds %"class.fxcodec::Jbig2Context", %"class.fxcodec::Jbig2Context"* %0, i64 0, i32 6
  %23 = bitcast i8** %22 to i32**
  %24 = load i32*, i32** %23, align 8
  %25 = icmp eq i32 %21, 0
  br i1 %25, label %90, label %26

26:                                               ; preds = %15
  %27 = zext i32 %21 to i64
  %28 = icmp ult i32 %20, 32
  br i1 %28, label %81, label %29

29:                                               ; preds = %26
  %30 = and i64 %27, 1073741816
  %31 = add nsw i64 %30, -8
  %32 = lshr exact i64 %31, 3
  %33 = add nuw nsw i64 %32, 1
  %34 = and i64 %33, 1
  %35 = icmp eq i64 %31, 0
  br i1 %35, label %65, label %36

36:                                               ; preds = %29
  %37 = sub nuw nsw i64 %33, %34
  br label %38

38:                                               ; preds = %38, %36
  %39 = phi i64 [ 0, %36 ], [ %62, %38 ]
  %40 = phi i64 [ %37, %36 ], [ %63, %38 ]
  %41 = getelementptr inbounds i32, i32* %24, i64 %39
  %42 = bitcast i32* %41 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4
  %44 = getelementptr inbounds i32, i32* %41, i64 4
  %45 = bitcast i32* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 4
  %47 = xor <4 x i32> %43, <i32 -1, i32 -1, i32 -1, i32 -1>
  %48 = xor <4 x i32> %46, <i32 -1, i32 -1, i32 -1, i32 -1>
  %49 = bitcast i32* %41 to <4 x i32>*
  store <4 x i32> %47, <4 x i32>* %49, align 4
  %50 = bitcast i32* %44 to <4 x i32>*
  store <4 x i32> %48, <4 x i32>* %50, align 4
  %51 = or i64 %39, 8
  %52 = getelementptr inbounds i32, i32* %24, i64 %51
  %53 = bitcast i32* %52 to <4 x i32>*
  %54 = load <4 x i32>, <4 x i32>* %53, align 4
  %55 = getelementptr inbounds i32, i32* %52, i64 4
  %56 = bitcast i32* %55 to <4 x i32>*
  %57 = load <4 x i32>, <4 x i32>* %56, align 4
  %58 = xor <4 x i32> %54, <i32 -1, i32 -1, i32 -1, i32 -1>
  %59 = xor <4 x i32> %57, <i32 -1, i32 -1, i32 -1, i32 -1>
  %60 = bitcast i32* %52 to <4 x i32>*
  store <4 x i32> %58, <4 x i32>* %60, align 4
  %61 = bitcast i32* %55 to <4 x i32>*
  store <4 x i32> %59, <4 x i32>* %61, align 4
  %62 = add i64 %39, 16
  %63 = add i64 %40, -2
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %65, label %38, !llvm.loop !6

65:                                               ; preds = %38, %29
  %66 = phi i64 [ 0, %29 ], [ %62, %38 ]
  %67 = icmp eq i64 %34, 0
  br i1 %67, label %79, label %68

68:                                               ; preds = %65
  %69 = getelementptr inbounds i32, i32* %24, i64 %66
  %70 = bitcast i32* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 4
  %72 = getelementptr inbounds i32, i32* %69, i64 4
  %73 = bitcast i32* %72 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 4
  %75 = xor <4 x i32> %71, <i32 -1, i32 -1, i32 -1, i32 -1>
  %76 = xor <4 x i32> %74, <i32 -1, i32 -1, i32 -1, i32 -1>
  %77 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %75, <4 x i32>* %77, align 4
  %78 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %78, align 4
  br label %79

79:                                               ; preds = %65, %68
  %80 = icmp eq i64 %30, %27
  br i1 %80, label %90, label %81

81:                                               ; preds = %79, %26
  %82 = phi i64 [ 0, %26 ], [ %30, %79 ]
  br label %83

83:                                               ; preds = %81, %83
  %84 = phi i64 [ %88, %83 ], [ %82, %81 ]
  %85 = getelementptr inbounds i32, i32* %24, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = xor i32 %86, -1
  store i32 %87, i32* %85, align 4
  %88 = add nuw nsw i64 %84, 1
  %89 = icmp eq i64 %88, %27
  br i1 %89, label %90, label %83, !llvm.loop !7

90:                                               ; preds = %83, %79, %2, %14, %15
  %91 = phi i32 [ %8, %2 ], [ -1, %14 ], [ 4, %15 ], [ 4, %79 ], [ 4, %83 ]
  ret i32 %91
}

declare zeroext i1 @_ZN14CJBig2_Context8ContinueEP19PauseIndicatorIface(%class.CJBig2_Context*, %class.PauseIndicatorIface*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN14CJBig2_ContextD1Ev(%class.CJBig2_Context*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
