; ModuleID = '../../third_party/blink/renderer/core/timing/performance_entry.cc'
source_filename = "../../third_party/blink/renderer/core/timing/performance_entry.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.blink::WrapperTypeInfo" = type { i16, void (%"class.v8::Isolate"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Template"*)*, void (%"class.v8::Context"*, %"class.blink::DOMWrapperWorld"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Object"*, %"class.v8::Template"*, i64)*, i8*, %"struct.blink::WrapperTypeInfo"*, i8 }
%"class.v8::Isolate" = type { i8 }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.blink::WeakMember", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.29", i32, [4 x i8], %"class.std::__1::unique_ptr.161", %"class.std::__1::unique_ptr.161", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.171", %"class.std::__1::unique_ptr.177", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.189", %"class.std::__1::unique_ptr.195", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.202", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.32", %"class.std::__1::unique_ptr.38", %"class.std::__1::unique_ptr.44", %"class.std::__1::unique_ptr.50", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.62", %"class.std::__1::unique_ptr.73", %"class.std::__1::unique_ptr.80", %"class.std::__1::unique_ptr.80", %"class.std::__1::unique_ptr.87", %"class.std::__1::unique_ptr.94", %"class.std::__1::unique_ptr.101", %"class.std::__1::unique_ptr.101", %"class.std::__1::unique_ptr.108", %"class.std::__1::unique_ptr.115", %"class.std::__1::unique_ptr.122", %"class.std::__1::unique_ptr.145", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.38" = type { %"class.std::__1::__compressed_pair.39" }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.50" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.56" = type { %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.62" = type { %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.65" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.65" = type { %"struct.std::__1::__atomic_base.66" }
%"struct.std::__1::__atomic_base.66" = type { %"struct.std::__1::__atomic_base.67" }
%"struct.std::__1::__atomic_base.67" = type { %"struct.std::__1::__cxx_atomic_impl.68" }
%"struct.std::__1::__cxx_atomic_impl.68" = type { %"struct.std::__1::__cxx_atomic_base_impl.69" }
%"struct.std::__1::__cxx_atomic_base_impl.69" = type { i64 }
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.blink::Worklist.76"* }
%"class.blink::Worklist.76" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.65" }
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.blink::Worklist.83"* }
%"class.blink::Worklist.83" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.65" }
%"class.std::__1::unique_ptr.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"class.blink::Worklist.90"* }
%"class.blink::Worklist.90" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.65" }
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"class.blink::Worklist.97"* }
%"class.blink::Worklist.97" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.65" }
%"class.std::__1::unique_ptr.101" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"class.blink::Worklist.104"* }
%"class.blink::Worklist.104" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.65" }
%"class.std::__1::unique_ptr.108" = type { %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %"class.blink::Worklist.111"* }
%"class.blink::Worklist.111" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.65" }
%"class.std::__1::unique_ptr.115" = type { %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.blink::Worklist.118"* }
%"class.blink::Worklist.118" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.65" }
%"class.std::__1::unique_ptr.122" = type { %"class.std::__1::__compressed_pair.123" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.125", %"class.std::__1::__compressed_pair.132", %"class.std::__1::__compressed_pair.137", %"class.std::__1::__compressed_pair.139", [4 x i8] }>
%"class.std::__1::unique_ptr.125" = type { %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127", %"struct.std::__1::__compressed_pair_elem.128" }
%"struct.std::__1::__compressed_pair_elem.127" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.128" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.129" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.130" }
%"struct.std::__1::__compressed_pair_elem.130" = type { i64 }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.130" }
%"class.std::__1::__compressed_pair.139" = type { %"struct.std::__1::__compressed_pair_elem.140" }
%"struct.std::__1::__compressed_pair_elem.140" = type { float }
%"class.std::__1::unique_ptr.145" = type { %"class.std::__1::__compressed_pair.146" }
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.148", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.161" = type { %"class.std::__1::__compressed_pair.162" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.169" }
%"class.WTF::VectorBuffer.169" = type { %"class.WTF::VectorBufferBase.170" }
%"class.WTF::VectorBufferBase.170" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.171" = type { %"class.std::__1::__compressed_pair.172" }
%"class.std::__1::__compressed_pair.172" = type { %"struct.std::__1::__compressed_pair_elem.173" }
%"struct.std::__1::__compressed_pair_elem.173" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.177" = type { %"class.std::__1::__compressed_pair.178" }
%"class.std::__1::__compressed_pair.178" = type { %"struct.std::__1::__compressed_pair_elem.179" }
%"struct.std::__1::__compressed_pair_elem.179" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.183" }
%"class.std::__1::unique_ptr.183" = type { %"class.std::__1::__compressed_pair.184" }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.185" }
%"struct.std::__1::__compressed_pair_elem.185" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.76"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.83"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.90"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.97"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.104"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.209" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.209" = type { %"struct.std::__1::__compressed_pair_elem.210" }
%"struct.std::__1::__compressed_pair_elem.210" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.189" = type { %"class.std::__1::__compressed_pair.190" }
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.191" }
%"struct.std::__1::__compressed_pair_elem.191" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.195" = type { %"class.std::__1::__compressed_pair.196" }
%"class.std::__1::__compressed_pair.196" = type { %"struct.std::__1::__compressed_pair_elem.197" }
%"struct.std::__1::__compressed_pair_elem.197" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.201 }
%class.scoped_refptr.201 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.202" = type { %"struct.std::__1::__atomic_base.203" }
%"struct.std::__1::__atomic_base.203" = type { %"struct.std::__1::__cxx_atomic_impl.204" }
%"struct.std::__1::__cxx_atomic_impl.204" = type { %"struct.std::__1::__cxx_atomic_base_impl.205" }
%"struct.std::__1::__cxx_atomic_base_impl.205" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.v8::Template" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::Object" = type { i8 }
%"class.blink::PerformanceEntry" = type <{ %"class.blink::ScriptWrappable", double, %"class.WTF::AtomicString", double, i32, [4 x i8] }>
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::mojom::blink::PerformanceMarkOrMeasure"* }
%"class.blink::mojom::blink::PerformanceMarkOrMeasure" = type { %"class.WTF::String", i32, double, double, %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.mojo_base::BigBuffer" }
%"class.mojo_base::BigBuffer" = type { i32, %"class.std::__1::unique_ptr.6", i64, %"class.absl::optional.10" }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { i8* }
%"class.absl::optional.10" = type { %"class.absl::optional_internal::optional_data.11" }
%"class.absl::optional_internal::optional_data.11" = type { %"class.absl::optional_internal::optional_data_base.12" }
%"class.absl::optional_internal::optional_data_base.12" = type { %"class.absl::optional_internal::optional_data_dtor_base.13" }
%"class.absl::optional_internal::optional_data_dtor_base.13" = type { i8, %union.anon.14 }
%union.anon.14 = type { %"class.mojo_base::internal::BigBufferSharedMemoryRegion" }
%"class.mojo_base::internal::BigBufferSharedMemoryRegion" = type { i64, %"class.mojo::ScopedHandleBase", %"class.std::__1::unique_ptr.15" }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::SharedBufferHandle" }
%"class.mojo::SharedBufferHandle" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { i8* }
%"class.blink::ScriptValue" = type { %"class.v8::Isolate"*, %"class.blink::WorldSafeV8Reference" }
%"class.blink::WorldSafeV8Reference" = type { %"class.blink::TraceWrapperV8Reference.214", %class.scoped_refptr.217 }
%"class.blink::TraceWrapperV8Reference.214" = type { %"class.v8::TracedReference.215" }
%"class.v8::TracedReference.215" = type { %"class.v8::BasicTracedReference.216" }
%"class.v8::BasicTracedReference.216" = type { %"class.v8::TracedReferenceBase" }
%class.scoped_refptr.217 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.24, %"class.blink::Member", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%class.scoped_refptr.24 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::Member" = type { %"class.blink::MemberBase.206" }
%"class.blink::MemberBase.206" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent.207" }
%"class.blink::Persistent.207" = type { %"class.blink::PersistentBase.208" }
%"class.blink::PersistentBase.208" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::V8ObjectBuilder" = type { %"class.blink::ScriptState"*, %"class.v8::Local" }
%"class.v8::Local" = type { %"class.v8::Object"* }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.v8::Value" = type { i8 }

$_ZNK5blink15ScriptWrappable18HasPendingActivityEv = comdat any

$_ZNK5blink15ScriptWrappable17HasEventListenersEv = comdat any

$_ZNK5blink16PerformanceEntry18GetWrapperTypeInfoEv = comdat any

@_ZTVN5blink16PerformanceEntryE = hidden unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (i8* (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv to i8*), i8* bitcast (void (%"class.blink::PerformanceEntry"*)* @_ZN5blink16PerformanceEntryD2Ev to i8*), i8* bitcast (void (%"class.blink::PerformanceEntry"*)* @_ZN5blink16PerformanceEntryD0Ev to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable18HasPendingActivityEv to i8*), i8* bitcast (i1 (%"class.blink::ScriptWrappable"*)* @_ZNK5blink15ScriptWrappable17HasEventListenersEv to i8*), i8* bitcast (void (%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*)* @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE to i8*), i8* bitcast (%"struct.blink::WrapperTypeInfo"* (%"class.blink::PerformanceEntry"*)* @_ZNK5blink16PerformanceEntry18GetWrapperTypeInfoEv to i8*), i8* bitcast (%"class.v8::Value"* (%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*)* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE to i8*), i8* bitcast (%"class.v8::Object"* (%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*)* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (double (%"class.blink::PerformanceEntry"*)* @_ZNK5blink16PerformanceEntry8durationEv to i8*), i8* bitcast (void (%"class.mojo::StructPtr"*, %"class.blink::PerformanceEntry"*)* @_ZN5blink16PerformanceEntry30ToMojoPerformanceMarkOrMeasureEv to i8*), i8* bitcast (void (%"class.blink::PerformanceEntry"*, %"class.blink::V8ObjectBuilder"*)* @_ZNK5blink16PerformanceEntry14BuildJSONValueERNS_15V8ObjectBuilderE to i8*)] }, align 8
@_ZN5blink23performance_entry_names9kLongtaskE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink23performance_entry_names5kMarkE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink23performance_entry_names8kMeasureE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink23performance_entry_names9kResourceE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink23performance_entry_names11kNavigationE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink23performance_entry_names16kTaskattributionE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink23performance_entry_names6kPaintE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink23performance_entry_names6kEventE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink23performance_entry_names11kFirstInputE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink23performance_entry_names8kElementE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink23performance_entry_names12kLayoutShiftE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink23performance_entry_names23kLargestContentfulPaintE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@_ZN5blink23performance_entry_names16kVisibilityStateE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@.str = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"entryType\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"startTime\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"duration\00", align 1
@_ZN5blink12_GLOBAL__N_19index_seqE = internal global { { { i32 } } } zeroinitializer, align 4
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZN5blink16PerformanceEntry18wrapper_type_info_E = external local_unnamed_addr constant %"struct.blink::WrapperTypeInfo"*, align 8

@_ZN5blink16PerformanceEntryD1Ev = hidden unnamed_addr alias void (%"class.blink::PerformanceEntry"*), void (%"class.blink::PerformanceEntry"*)* @_ZN5blink16PerformanceEntryD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16PerformanceEntryC2ERKN3WTF12AtomicStringEdd(%"class.blink::PerformanceEntry"* nocapture, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), double, double) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64* null, i64** %6, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN5blink16PerformanceEntryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %7 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %0, i64 0, i32 1
  %8 = fsub double %3, %2
  store double %8, double* %7, align 8
  %9 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %10, %"class.WTF::StringImpl"** %11, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %12, label %30, label %13

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 2
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i33
  %22 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %21, i33 1) #8
  %23 = extractvalue { i33, i1 } %22, 1
  %24 = extractvalue { i33, i1 } %22, 0
  %25 = icmp slt i33 %24, 0
  %26 = or i1 %23, %25
  br i1 %26, label %27, label %28, !prof !2

27:                                               ; preds = %18
  tail call void @llvm.trap() #8
  unreachable

28:                                               ; preds = %18
  %29 = trunc i33 %24 to i32
  store i32 %29, i32* %19, align 4
  br label %30

30:                                               ; preds = %4, %13, %28
  %31 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %0, i64 0, i32 3
  store double %2, double* %31, align 8
  %32 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %0, i64 0, i32 4
  %33 = atomicrmw add i32* getelementptr inbounds ({ { { i32 } } }, { { { i32 } } }* @_ZN5blink12_GLOBAL__N_19index_seqE, i64 0, i32 0, i32 0, i32 0), i32 1 monotonic
  store i32 %33, i32* %32, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16PerformanceEntryC2EdRKN3WTF12AtomicStringEd(%"class.blink::PerformanceEntry"* nocapture, double, %"class.WTF::AtomicString"* nocapture readonly dereferenceable(8), double) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i64* null, i64** %6, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN5blink16PerformanceEntryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %7 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %0, i64 0, i32 1
  store double %1, double* %7, align 8
  %8 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %9, %"class.WTF::StringImpl"** %10, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %11, label %29, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %29

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i33
  %21 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %20, i33 1) #8
  %22 = extractvalue { i33, i1 } %21, 1
  %23 = extractvalue { i33, i1 } %21, 0
  %24 = icmp slt i33 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %27, !prof !2

26:                                               ; preds = %17
  tail call void @llvm.trap() #8
  unreachable

27:                                               ; preds = %17
  %28 = trunc i33 %23 to i32
  store i32 %28, i32* %18, align 4
  br label %29

29:                                               ; preds = %4, %12, %27
  %30 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %0, i64 0, i32 3
  store double %3, double* %30, align 8
  %31 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %0, i64 0, i32 4
  %32 = atomicrmw add i32* getelementptr inbounds ({ { { i32 } } }, { { { i32 } } }* @_ZN5blink12_GLOBAL__N_19index_seqE, i64 0, i32 0, i32 0, i32 0), i32 1 monotonic
  store i32 %32, i32* %31, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16PerformanceEntryD2Ev(%"class.blink::PerformanceEntry"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN5blink16PerformanceEntryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = and i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  br i1 %10, label %13, label %15

13:                                               ; preds = %6
  %14 = add i32 %12, -1
  store i32 %14, i32* %11, align 4
  br label %15

15:                                               ; preds = %13, %6
  %16 = phi i32 [ %14, %13 ], [ %12, %6 ]
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %15
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %4) #8
  br label %19

19:                                               ; preds = %1, %15, %18
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN5blink16PerformanceEntryD0Ev(%"class.blink::PerformanceEntry"* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @llvm.trap() #9
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK5blink16PerformanceEntry9startTimeEv(%"class.blink::PerformanceEntry"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %0, i64 0, i32 3
  %3 = load double, double* %2, align 8
  ret double %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK5blink16PerformanceEntry8durationEv(%"class.blink::PerformanceEntry"* nocapture readonly) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %0, i64 0, i32 1
  %3 = load double, double* %2, align 8
  ret double %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16PerformanceEntry30ToMojoPerformanceMarkOrMeasureEv(%"class.mojo::StructPtr"* noalias nocapture sret, %"class.blink::PerformanceEntry"*) unnamed_addr #0 align 2 {
  %3 = tail call i8* @_Znwm(i64 96) #10, !noalias !3
  %4 = bitcast i8* %3 to %"class.blink::mojom::blink::PerformanceMarkOrMeasure"*
  tail call void @_ZN5blink5mojom5blink24PerformanceMarkOrMeasureC1Ev(%"class.blink::mojom::blink::PerformanceMarkOrMeasure"* nonnull %4) #8, !noalias !3
  %5 = ptrtoint i8* %3 to i64
  %6 = bitcast %"class.mojo::StructPtr"* %0 to i64*
  store i64 %5, i64* %6, align 8, !alias.scope !3
  %7 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %27, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %27

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i33
  %19 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %18, i33 1) #8
  %20 = extractvalue { i33, i1 } %19, 1
  %21 = extractvalue { i33, i1 } %19, 0
  %22 = icmp slt i33 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %25, !prof !2

24:                                               ; preds = %15
  tail call void @llvm.trap() #8
  unreachable

25:                                               ; preds = %15
  %26 = trunc i33 %21 to i32
  store i32 %26, i32* %16, align 4
  br label %27

27:                                               ; preds = %25, %10, %2
  %28 = ptrtoint %"class.WTF::StringImpl"* %8 to i64
  %29 = bitcast i8* %3 to i64*
  %30 = bitcast i8* %3 to %"class.WTF::StringImpl"**
  %31 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %30, align 8
  store i64 %28, i64* %29, align 8
  %32 = icmp eq %"class.WTF::StringImpl"* %31, null
  br i1 %32, label %46, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = and i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %31, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  br i1 %37, label %40, label %42

40:                                               ; preds = %33
  %41 = add i32 %39, -1
  store i32 %41, i32* %38, align 4
  br label %42

42:                                               ; preds = %40, %33
  %43 = phi i32 [ %41, %40 ], [ %39, %33 ]
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %42
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %31) #8
  br label %46

46:                                               ; preds = %27, %42, %45
  %47 = bitcast %"class.blink::PerformanceEntry"* %1 to i32 (%"class.blink::PerformanceEntry"*)***
  %48 = load i32 (%"class.blink::PerformanceEntry"*)**, i32 (%"class.blink::PerformanceEntry"*)*** %47, align 8
  %49 = getelementptr inbounds i32 (%"class.blink::PerformanceEntry"*)*, i32 (%"class.blink::PerformanceEntry"*)** %48, i64 10
  %50 = load i32 (%"class.blink::PerformanceEntry"*)*, i32 (%"class.blink::PerformanceEntry"*)** %49, align 8
  %51 = tail call i32 %50(%"class.blink::PerformanceEntry"* %1) #8
  %52 = icmp ne i32 %51, 2
  %53 = zext i1 %52 to i32
  %54 = getelementptr inbounds i8, i8* %3, i64 8
  %55 = bitcast i8* %54 to i32*
  store i32 %53, i32* %55, align 8
  %56 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %1, i64 0, i32 3
  %57 = bitcast double* %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds i8, i8* %3, i64 16
  %60 = bitcast i8* %59 to i64*
  store i64 %58, i64* %60, align 8
  %61 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %1, i64 0, i32 1
  %62 = bitcast double* %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds i8, i8* %3, i64 24
  %65 = bitcast i8* %64 to i64*
  store i64 %63, i64* %65, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN5blink16PerformanceEntry15ToEntryTypeEnumERKN3WTF12AtomicStringE(%"class.WTF::AtomicString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #3 align 2 {
  %2 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink23performance_entry_names9kLongtaskE, align 8
  %3 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %4, %6
  br i1 %7, label %69, label %8

8:                                                ; preds = %1
  %9 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink23performance_entry_names5kMarkE, align 8
  %10 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %9, i64 0, i32 0, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %4, %11
  br i1 %12, label %69, label %13

13:                                               ; preds = %8
  %14 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink23performance_entry_names8kMeasureE, align 8
  %15 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %14, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %17 = icmp eq %"class.WTF::StringImpl"* %4, %16
  br i1 %17, label %69, label %18

18:                                               ; preds = %13
  %19 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink23performance_entry_names9kResourceE, align 8
  %20 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %19, i64 0, i32 0, i32 0, i32 0
  %21 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %20, align 8
  %22 = icmp eq %"class.WTF::StringImpl"* %4, %21
  br i1 %22, label %69, label %23

23:                                               ; preds = %18
  %24 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink23performance_entry_names11kNavigationE, align 8
  %25 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %24, i64 0, i32 0, i32 0, i32 0
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %4, %26
  br i1 %27, label %69, label %28

28:                                               ; preds = %23
  %29 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink23performance_entry_names16kTaskattributionE, align 8
  %30 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %29, i64 0, i32 0, i32 0, i32 0
  %31 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %30, align 8
  %32 = icmp eq %"class.WTF::StringImpl"* %4, %31
  br i1 %32, label %69, label %33

33:                                               ; preds = %28
  %34 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink23performance_entry_names6kPaintE, align 8
  %35 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %34, i64 0, i32 0, i32 0, i32 0
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %35, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %4, %36
  br i1 %37, label %69, label %38

38:                                               ; preds = %33
  %39 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink23performance_entry_names6kEventE, align 8
  %40 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %39, i64 0, i32 0, i32 0, i32 0
  %41 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %40, align 8
  %42 = icmp eq %"class.WTF::StringImpl"* %4, %41
  br i1 %42, label %69, label %43

43:                                               ; preds = %38
  %44 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink23performance_entry_names11kFirstInputE, align 8
  %45 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %44, i64 0, i32 0, i32 0, i32 0
  %46 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %45, align 8
  %47 = icmp eq %"class.WTF::StringImpl"* %4, %46
  br i1 %47, label %69, label %48

48:                                               ; preds = %43
  %49 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink23performance_entry_names8kElementE, align 8
  %50 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %49, i64 0, i32 0, i32 0, i32 0
  %51 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  %52 = icmp eq %"class.WTF::StringImpl"* %4, %51
  br i1 %52, label %69, label %53

53:                                               ; preds = %48
  %54 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink23performance_entry_names12kLayoutShiftE, align 8
  %55 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %54, i64 0, i32 0, i32 0, i32 0
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %55, align 8
  %57 = icmp eq %"class.WTF::StringImpl"* %4, %56
  br i1 %57, label %69, label %58

58:                                               ; preds = %53
  %59 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink23performance_entry_names23kLargestContentfulPaintE, align 8
  %60 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %59, i64 0, i32 0, i32 0, i32 0
  %61 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %60, align 8
  %62 = icmp eq %"class.WTF::StringImpl"* %4, %61
  br i1 %62, label %69, label %63

63:                                               ; preds = %58
  %64 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN5blink23performance_entry_names16kVisibilityStateE, align 8
  %65 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %64, i64 0, i32 0, i32 0, i32 0
  %66 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %65, align 8
  %67 = icmp eq %"class.WTF::StringImpl"* %4, %66
  %68 = select i1 %67, i32 4096, i32 0
  br label %69

69:                                               ; preds = %63, %58, %53, %48, %43, %38, %33, %28, %23, %18, %13, %8, %1
  %70 = phi i32 [ 16, %1 ], [ 2, %8 ], [ 4, %13 ], [ 8, %18 ], [ 1, %23 ], [ 32, %28 ], [ 64, %33 ], [ 128, %38 ], [ 256, %43 ], [ 512, %48 ], [ 1024, %53 ], [ 2048, %58 ], [ %68, %63 ]
  ret i32 %70
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink16PerformanceEntry16toJSONForBindingEPNS_11ScriptStateE(%"class.blink::ScriptValue"* noalias sret, %"class.blink::PerformanceEntry"*, %"class.blink::ScriptState"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::V8ObjectBuilder", align 8
  %5 = bitcast %"class.blink::V8ObjectBuilder"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #8
  %6 = bitcast %"class.blink::V8ObjectBuilder"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZN5blink15V8ObjectBuilderC1EPNS_11ScriptStateE(%"class.blink::V8ObjectBuilder"* nonnull %4, %"class.blink::ScriptState"* %2) #8
  %7 = bitcast %"class.blink::PerformanceEntry"* %1 to void (%"class.blink::PerformanceEntry"*, %"class.blink::V8ObjectBuilder"*)***
  %8 = load void (%"class.blink::PerformanceEntry"*, %"class.blink::V8ObjectBuilder"*)**, void (%"class.blink::PerformanceEntry"*, %"class.blink::V8ObjectBuilder"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.blink::PerformanceEntry"*, %"class.blink::V8ObjectBuilder"*)*, void (%"class.blink::PerformanceEntry"*, %"class.blink::V8ObjectBuilder"*)** %8, i64 13
  %10 = load void (%"class.blink::PerformanceEntry"*, %"class.blink::V8ObjectBuilder"*)*, void (%"class.blink::PerformanceEntry"*, %"class.blink::V8ObjectBuilder"*)** %9, align 8
  call void %10(%"class.blink::PerformanceEntry"* %1, %"class.blink::V8ObjectBuilder"* nonnull dereferenceable(16) %4) #8
  call void @_ZNK5blink15V8ObjectBuilder14GetScriptValueEv(%"class.blink::ScriptValue"* sret %0, %"class.blink::V8ObjectBuilder"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZN5blink15V8ObjectBuilderC1EPNS_11ScriptStateE(%"class.blink::V8ObjectBuilder"*, %"class.blink::ScriptState"*) unnamed_addr #5

declare void @_ZNK5blink15V8ObjectBuilder14GetScriptValueEv(%"class.blink::ScriptValue"* sret, %"class.blink::V8ObjectBuilder"*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink16PerformanceEntry14BuildJSONValueERNS_15V8ObjectBuilderE(%"class.blink::PerformanceEntry"*, %"class.blink::V8ObjectBuilder"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = bitcast %"class.WTF::StringView"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #8
  %10 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %11 = bitcast %"class.WTF::StringView"* %3 to i64*
  store i64 %10, i64* %11, align 8
  %12 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8** %12, align 8
  %13 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  store i32 4, i32* %13, align 8
  %14 = bitcast %"class.WTF::StringView"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #8
  %15 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %17 = icmp eq %"class.WTF::StringImpl"* %16, null
  br i1 %17, label %18, label %21

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  store i8* null, i8** %19, align 8
  %20 = bitcast %"class.WTF::StringView"* %4 to i64*
  store i64 %10, i64* %20, align 8
  br label %28

21:                                               ; preds = %2
  %22 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 0
  store %"class.WTF::StringImpl"* %16, %"class.WTF::StringImpl"** %22, align 8
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 1
  %26 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  %27 = bitcast i8** %26 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %25, %"class.WTF::StringImpl"** %27, align 8
  br label %28

28:                                               ; preds = %18, %21
  %29 = phi i32 [ %24, %21 ], [ 0, %18 ]
  %30 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  store i32 %29, i32* %30, align 8
  %31 = call dereferenceable(16) %"class.blink::V8ObjectBuilder"* @_ZN5blink15V8ObjectBuilder9AddStringERKN3WTF10StringViewES4_(%"class.blink::V8ObjectBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %4) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #8
  %32 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #8
  %33 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %34 = bitcast %"class.WTF::StringView"* %5 to i64*
  store i64 %33, i64* %34, align 8
  %35 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8** %35, align 8
  %36 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 9, i32* %36, align 8
  %37 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %37) #8
  %38 = bitcast %"class.blink::PerformanceEntry"* %0 to %"class.WTF::StringImpl"* (%"class.blink::PerformanceEntry"*)***
  %39 = load %"class.WTF::StringImpl"* (%"class.blink::PerformanceEntry"*)**, %"class.WTF::StringImpl"* (%"class.blink::PerformanceEntry"*)*** %38, align 8
  %40 = getelementptr inbounds %"class.WTF::StringImpl"* (%"class.blink::PerformanceEntry"*)*, %"class.WTF::StringImpl"* (%"class.blink::PerformanceEntry"*)** %39, i64 9
  %41 = load %"class.WTF::StringImpl"* (%"class.blink::PerformanceEntry"*)*, %"class.WTF::StringImpl"* (%"class.blink::PerformanceEntry"*)** %40, align 8
  %42 = call %"class.WTF::StringImpl"* %41(%"class.blink::PerformanceEntry"* %0) #8
  %43 = icmp eq %"class.WTF::StringImpl"* %42, null
  br i1 %43, label %44, label %50

44:                                               ; preds = %28
  %45 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  store i8* null, i8** %45, align 8
  %46 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %47 = bitcast %"class.WTF::StringView"* %6 to i64*
  store i64 %46, i64* %47, align 8
  %48 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 0, i32* %48, align 8
  %49 = call dereferenceable(16) %"class.blink::V8ObjectBuilder"* @_ZN5blink15V8ObjectBuilder9AddStringERKN3WTF10StringViewES4_(%"class.blink::V8ObjectBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %5, %"class.WTF::StringView"* nonnull dereferenceable(24) %6) #8
  br label %71

50:                                               ; preds = %28
  %51 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 0
  store %"class.WTF::StringImpl"* %42, %"class.WTF::StringImpl"** %51, align 8
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 1
  %55 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  %56 = bitcast i8** %55 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %54, %"class.WTF::StringImpl"** %56, align 8
  %57 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 %53, i32* %57, align 8
  %58 = call dereferenceable(16) %"class.blink::V8ObjectBuilder"* @_ZN5blink15V8ObjectBuilder9AddStringERKN3WTF10StringViewES4_(%"class.blink::V8ObjectBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %5, %"class.WTF::StringView"* nonnull dereferenceable(24) %6) #8
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %60 = load atomic i32, i32* %59 monotonic, align 4
  %61 = and i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %64 = load i32, i32* %63, align 4
  br i1 %62, label %65, label %67

65:                                               ; preds = %50
  %66 = add i32 %64, -1
  store i32 %66, i32* %63, align 4
  br label %67

67:                                               ; preds = %65, %50
  %68 = phi i32 [ %66, %65 ], [ %64, %50 ]
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %71

70:                                               ; preds = %67
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %42) #8
  br label %71

71:                                               ; preds = %44, %67, %70
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %37) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %32) #8
  %72 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %72) #8
  %73 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %74 = bitcast %"class.WTF::StringView"* %7 to i64*
  store i64 %73, i64* %74, align 8
  %75 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i8** %75, align 8
  %76 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 9, i32* %76, align 8
  %77 = getelementptr inbounds %"class.blink::PerformanceEntry", %"class.blink::PerformanceEntry"* %0, i64 0, i32 3
  %78 = load double, double* %77, align 8
  %79 = call dereferenceable(16) %"class.blink::V8ObjectBuilder"* @_ZN5blink15V8ObjectBuilder9AddNumberERKN3WTF10StringViewEd(%"class.blink::V8ObjectBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %7, double %78) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %72) #8
  %80 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %80) #8
  %81 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %82 = bitcast %"class.WTF::StringView"* %8 to i64*
  store i64 %81, i64* %82, align 8
  %83 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i8** %83, align 8
  %84 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 8, i32* %84, align 8
  %85 = bitcast %"class.blink::PerformanceEntry"* %0 to double (%"class.blink::PerformanceEntry"*)***
  %86 = load double (%"class.blink::PerformanceEntry"*)**, double (%"class.blink::PerformanceEntry"*)*** %85, align 8
  %87 = getelementptr inbounds double (%"class.blink::PerformanceEntry"*)*, double (%"class.blink::PerformanceEntry"*)** %86, i64 11
  %88 = load double (%"class.blink::PerformanceEntry"*)*, double (%"class.blink::PerformanceEntry"*)** %87, align 8
  %89 = call double %88(%"class.blink::PerformanceEntry"* %0) #8
  %90 = call dereferenceable(16) %"class.blink::V8ObjectBuilder"* @_ZN5blink15V8ObjectBuilder9AddNumberERKN3WTF10StringViewEd(%"class.blink::V8ObjectBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %8, double %89) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %80) #8
  ret void
}

declare dereferenceable(16) %"class.blink::V8ObjectBuilder"* @_ZN5blink15V8ObjectBuilder9AddStringERKN3WTF10StringViewES4_(%"class.blink::V8ObjectBuilder"*, %"class.WTF::StringView"* dereferenceable(24), %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #5

declare dereferenceable(16) %"class.blink::V8ObjectBuilder"* @_ZN5blink15V8ObjectBuilder9AddNumberERKN3WTF10StringViewEd(%"class.blink::V8ObjectBuilder"*, %"class.WTF::StringView"* dereferenceable(24), double) local_unnamed_addr #5

declare i8* @_ZNK5blink15ScriptWrappable18NameInHeapSnapshotEv(%"class.blink::ScriptWrappable"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable18HasPendingActivityEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15ScriptWrappable17HasEventListenersEv(%"class.blink::ScriptWrappable"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare void @_ZNK5blink15ScriptWrappable5TraceEPNS_7VisitorE(%"class.blink::ScriptWrappable"*, %"class.blink::Visitor"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.blink::WrapperTypeInfo"* @_ZNK5blink16PerformanceEntry18GetWrapperTypeInfoEv(%"class.blink::PerformanceEntry"*) unnamed_addr #0 comdat align 2 {
  %2 = load %"struct.blink::WrapperTypeInfo"*, %"struct.blink::WrapperTypeInfo"** @_ZN5blink16PerformanceEntry18wrapper_type_info_E, align 8
  ret %"struct.blink::WrapperTypeInfo"* %2
}

declare %"class.v8::Value"* @_ZN5blink15ScriptWrappable4WrapEPNS_11ScriptStateE(%"class.blink::ScriptWrappable"*, %"class.blink::ScriptState"*) unnamed_addr #5

declare %"class.v8::Object"* @_ZN5blink15ScriptWrappable20AssociateWithWrapperEPN2v87IsolateEPKNS_15WrapperTypeInfoENS1_5LocalINS1_6ObjectEEE(%"class.blink::ScriptWrappable"*, %"class.v8::Isolate"*, %"struct.blink::WrapperTypeInfo"*, %"class.v8::Object"*) unnamed_addr #5

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #6

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

declare void @_ZN5blink5mojom5blink24PerformanceMarkOrMeasureC1Ev(%"class.blink::mojom::blink::PerformanceMarkOrMeasure"*) unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold noreturn nounwind }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN5blink5mojom5blink24PerformanceMarkOrMeasure3NewIJEEEN4mojo9StructPtrIS2_EEDpOT_: argument 0"}
!5 = distinct !{!5, !"_ZN5blink5mojom5blink24PerformanceMarkOrMeasure3NewIJEEEN4mojo9StructPtrIS2_EEDpOT_"}
