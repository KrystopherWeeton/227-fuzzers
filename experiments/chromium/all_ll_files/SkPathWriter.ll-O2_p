; ModuleID = '../../third_party/skia/src/pathops/SkPathWriter.cpp'
source_filename = "../../third_party/skia/src/pathops/SkPathWriter.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkPathWriter = type { %class.SkPath, %class.SkTArray, %class.SkTDArray.13, %class.SkPath*, [2 x %class.SkOpPtT*], %class.SkOpPtT* }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%class.SkTArray = type { %class.SkPath*, i64 }
%class.SkTDArray.13 = type { %class.SkOpPtT**, i32, i32 }
%class.SkOpPtT = type <{ double, %struct.SkPoint, %class.SkOpSpanBase*, %class.SkOpPtT*, i8, i8, i8, [5 x i8] }>
%class.SkOpSpanBase = type <{ %class.SkOpPtT, %class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpAngle*, %class.SkOpSpan*, i32, i8, i8, [2 x i8] }>
%class.SkOpSegment = type <{ %class.SkOpSpan, %class.SkOpSpanBase, %class.SkOpContour*, %class.SkOpSegment*, %class.SkOpSegment*, %struct.SkPoint*, %struct.SkPathOpsBounds, float, i32, i32, i32, i8, [7 x i8] }>
%class.SkOpSpan = type <{ %class.SkOpSpanBase.base, [2 x i8], %class.SkOpSpan*, %class.SkOpAngle*, %class.SkOpSpanBase*, i32, i32, i32, i32, i32, i8, i8, [2 x i8] }>
%class.SkOpSpanBase.base = type <{ %class.SkOpPtT, %class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpAngle*, %class.SkOpSpan*, i32, i8, i8 }>
%class.SkOpContour = type opaque
%struct.SkPathOpsBounds = type { %struct.SkRect }
%class.SkOpAngle = type <{ %struct.SkDCurve, %class.SkDCurveSweep, double, %class.SkLineParameters, %class.SkOpAngle*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, i32, i8, i8, i8, i8, i8, i8, i8, [5 x i8] }>
%struct.SkDCurve = type { %union.anon }
%union.anon = type { %struct.SkDCubic }
%struct.SkDCubic = type { [4 x %struct.SkDPoint] }
%struct.SkDPoint = type { double, double }
%class.SkDCurveSweep = type <{ %struct.SkDCurve, [2 x %struct.SkDVector], i8, i8, [6 x i8] }>
%struct.SkDVector = type { double, double }
%class.SkLineParameters = type { double, double, double }
%class.SkMatrix = type { [9 x float], i32 }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray.15 }
%class.SkAlignedSTStorage = type { [64 x i8] }
%class.SkTArray.15 = type { double*, i64 }
%class.SkSTArray.16 = type { %class.SkAlignedSTStorage.17, %class.SkTArray.18 }
%class.SkAlignedSTStorage.17 = type { [32 x i8] }
%class.SkTArray.18 = type { i32*, i64 }
%class.DistanceLessThan = type { double* }

$_ZN8SkTArrayI6SkPathLb0EE12checkReallocEiNS1_11ReallocTypeE = comdat any

$_ZN8SkTArrayIdLb1EE12checkReallocEiNS0_11ReallocTypeE = comdat any

$_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE = comdat any

$_Z12SkTIntroSortIi16DistanceLessThanEviPT_iRKT0_ = comdat any

$_Z11SkTHeapSortIi16DistanceLessThanEvPT_mRKT0_ = comdat any

@.str = private unnamed_addr constant [52 x i8] c"../../third_party/skia/src/pathops/SkPathWriter.cpp\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [51 x i8] c"../../third_party/skia/include/private/SkTDArray.h\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"assert(%s)\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c"SkTFitsIn<int>(count)\00", align 1
@.str.5 = private unnamed_addr constant [24 x i8] c"SkTFitsIn<int>(reserve)\00", align 1

@_ZN12SkPathWriterC1ER6SkPath = hidden unnamed_addr alias void (%class.SkPathWriter*, %class.SkPath*), void (%class.SkPathWriter*, %class.SkPath*)* @_ZN12SkPathWriterC2ER6SkPath

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkPathWriterC2ER6SkPath(%class.SkPathWriter*, %class.SkPath* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 0
  tail call void @_ZN6SkPathC1Ev(%class.SkPath* %3) #7
  %4 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 1, i32 1
  %5 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 1, i32 0
  store %class.SkPath* null, %class.SkPath** %5, align 8
  store i64 1, i64* %4, align 8
  %6 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 2
  %7 = bitcast %class.SkTDArray.13* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false) #7
  %8 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 3
  store %class.SkPath* %1, %class.SkPath** %8, align 8
  %9 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath* %3) #7
  %10 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 4, i64 0
  %11 = bitcast %class.SkOpPtT** %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 24, i1 false) #7
  ret void
}

declare void @_ZN6SkPathC1Ev(%class.SkPath*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkPathWriter4initEv(%class.SkPathWriter*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 0
  %3 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath* %2) #7
  %4 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 4, i64 0
  %5 = bitcast %class.SkOpPtT** %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkPathWriter5closeEv(%class.SkPathWriter*) local_unnamed_addr #0 align 2 {
  %2 = alloca %class.SkMatrix, align 16
  %3 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load %class.SkPathRef*, %class.SkPathRef** %4, align 8
  %6 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %5, i64 0, i32 4, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %25, label %9

9:                                                ; preds = %1
  %10 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath5closeEv(%class.SkPath* %3) #7
  %11 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 3
  %12 = load %class.SkPath*, %class.SkPath** %11, align 8
  %13 = bitcast %class.SkMatrix* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %13) #7
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 1
  %15 = bitcast %class.SkMatrix* %2 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %15, align 16
  %16 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 4
  %17 = bitcast float* %16 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %17, align 16
  %18 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %18, align 16
  store i32 16, i32* %14, align 4
  %19 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* nonnull %2) #7
  %20 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath7addPathERKS_RK8SkMatrixNS_11AddPathModeE(%class.SkPath* %12, %class.SkPath* dereferenceable(16) %3, %class.SkMatrix* nonnull dereferenceable(40) %2, i32 0) #7
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %13) #7
  %21 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath* %3) #7
  %22 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath* %3) #7
  %23 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 4, i64 0
  %24 = bitcast %class.SkOpPtT** %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 24, i1 false) #7
  br label %25

25:                                               ; preds = %1, %9
  ret void
}

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath5closeEv(%class.SkPath*) local_unnamed_addr #1

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkPathWriter7conicToERK7SkPointPK7SkOpPtTf(%class.SkPathWriter*, %struct.SkPoint* nocapture readonly dereferenceable(8), %class.SkOpPtT*, float) local_unnamed_addr #2 align 2 {
  %5 = tail call <2 x float> @_ZN12SkPathWriter6updateEPK7SkOpPtT(%class.SkPathWriter* %0, %class.SkOpPtT* %2)
  %6 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 0
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %10 = load float, float* %9, align 4
  %11 = extractelement <2 x float> %5, i32 0
  %12 = extractelement <2 x float> %5, i32 1
  %13 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath7conicToEfffff(%class.SkPath* %6, float %8, float %10, float %11, float %12, float %3) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden <2 x float> @_ZN12SkPathWriter6updateEPK7SkOpPtT(%class.SkPathWriter*, %class.SkOpPtT*) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 4
  %4 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 4, i64 1
  %5 = load %class.SkOpPtT*, %class.SkOpPtT** %4, align 8
  %6 = icmp eq %class.SkOpPtT* %5, null
  br i1 %6, label %7, label %16

7:                                                ; preds = %2
  %8 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 0
  %9 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 5
  %10 = load %class.SkOpPtT*, %class.SkOpPtT** %9, align 8
  %11 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %10, i64 0, i32 1, i32 0
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %10, i64 0, i32 1, i32 1
  %14 = load float, float* %13, align 4
  %15 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath* %8, float %12, float %14) #7
  br label %46

16:                                               ; preds = %2
  %17 = getelementptr inbounds [2 x %class.SkOpPtT*], [2 x %class.SkOpPtT*]* %3, i64 0, i64 0
  %18 = load %class.SkOpPtT*, %class.SkOpPtT** %17, align 8
  %19 = icmp eq %class.SkOpPtT* %5, %18
  br i1 %19, label %46, label %20

20:                                               ; preds = %16
  %21 = icmp eq %class.SkOpPtT* %18, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %20
  %23 = tail call zeroext i1 @_ZNK7SkOpPtT8containsEPKS_(%class.SkOpPtT* nonnull %18, %class.SkOpPtT* nonnull %5) #7
  br i1 %23, label %46, label %24

24:                                               ; preds = %20, %22
  %25 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 0
  %26 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 0, i32 0, i32 0
  %27 = load %class.SkPathRef*, %class.SkPathRef** %26, align 8
  %28 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %27, i64 0, i32 4, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %39

31:                                               ; preds = %24
  %32 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 5
  %33 = load %class.SkOpPtT*, %class.SkOpPtT** %32, align 8
  %34 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %33, i64 0, i32 1, i32 0
  %35 = load float, float* %34, align 4
  %36 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %33, i64 0, i32 1, i32 1
  %37 = load float, float* %36, align 4
  %38 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath* %25, float %35, float %37) #7
  br label %39

39:                                               ; preds = %24, %31
  %40 = load %class.SkOpPtT*, %class.SkOpPtT** %4, align 8
  %41 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %40, i64 0, i32 1, i32 0
  %42 = load float, float* %41, align 4
  %43 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %40, i64 0, i32 1, i32 1
  %44 = load float, float* %43, align 4
  %45 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath6lineToEff(%class.SkPath* %25, float %42, float %44) #7
  br label %46

46:                                               ; preds = %16, %22, %39, %7
  %47 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %1, i64 0, i32 1
  %48 = bitcast %struct.SkPoint* %47 to <2 x float>*
  %49 = load <2 x float>, <2 x float>* %48, align 8
  %50 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 5
  %51 = load %class.SkOpPtT*, %class.SkOpPtT** %50, align 8
  %52 = icmp eq %class.SkOpPtT* %51, null
  br i1 %52, label %70, label %53

53:                                               ; preds = %46
  %54 = extractelement <2 x float> %49, i32 0
  %55 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %51, i64 0, i32 1, i32 0
  %56 = load float, float* %55, align 4
  %57 = fcmp une float %54, %56
  br i1 %57, label %63, label %58

58:                                               ; preds = %53
  %59 = extractelement <2 x float> %49, i32 1
  %60 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %51, i64 0, i32 1, i32 1
  %61 = load float, float* %60, align 4
  %62 = fcmp une float %59, %61
  br i1 %62, label %63, label %70

63:                                               ; preds = %53, %58
  %64 = tail call zeroext i1 @_ZNK7SkOpPtT8containsEPKS_(%class.SkOpPtT* nonnull %51, %class.SkOpPtT* %1) #7
  br i1 %64, label %65, label %70

65:                                               ; preds = %63
  %66 = load %class.SkOpPtT*, %class.SkOpPtT** %50, align 8
  %67 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %66, i64 0, i32 1
  %68 = bitcast %struct.SkPoint* %67 to <2 x float>*
  %69 = load <2 x float>, <2 x float>* %68, align 4
  br label %70

70:                                               ; preds = %46, %65, %63, %58
  %71 = phi <2 x float> [ %49, %46 ], [ %69, %65 ], [ %49, %63 ], [ %49, %58 ]
  store %class.SkOpPtT* %1, %class.SkOpPtT** %4, align 8
  %72 = getelementptr inbounds [2 x %class.SkOpPtT*], [2 x %class.SkOpPtT*]* %3, i64 0, i64 0
  store %class.SkOpPtT* %1, %class.SkOpPtT** %72, align 8
  ret <2 x float> %71
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkPathWriter7cubicToERK7SkPointS2_PK7SkOpPtT(%class.SkPathWriter*, %struct.SkPoint* nocapture readonly dereferenceable(8), %struct.SkPoint* nocapture readonly dereferenceable(8), %class.SkOpPtT*) local_unnamed_addr #2 align 2 {
  %5 = tail call <2 x float> @_ZN12SkPathWriter6updateEPK7SkOpPtT(%class.SkPathWriter* %0, %class.SkOpPtT* %3)
  %6 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 0
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 0
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 0, i32 1
  %14 = load float, float* %13, align 4
  %15 = extractelement <2 x float> %5, i32 0
  %16 = extractelement <2 x float> %5, i32 1
  %17 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath7cubicToEffffff(%class.SkPath* %6, float %8, float %10, float %12, float %14, float %15, float %16) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12SkPathWriter12deferredLineEPK7SkOpPtT(%class.SkPathWriter*, %class.SkOpPtT*) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 4, i64 0
  %4 = load %class.SkOpPtT*, %class.SkOpPtT** %3, align 8
  %5 = icmp eq %class.SkOpPtT* %4, %1
  br i1 %5, label %82, label %6

6:                                                ; preds = %2
  %7 = tail call zeroext i1 @_ZNK7SkOpPtT8containsEPKS_(%class.SkOpPtT* %1, %class.SkOpPtT* %4) #7
  br i1 %7, label %82, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 4, i64 1
  %10 = load %class.SkOpPtT*, %class.SkOpPtT** %9, align 8
  %11 = icmp eq %class.SkOpPtT* %10, %1
  br i1 %11, label %82, label %12

12:                                               ; preds = %8
  %13 = icmp eq %class.SkOpPtT* %1, null
  %14 = icmp eq %class.SkOpPtT* %10, null
  %15 = or i1 %13, %14
  br i1 %15, label %20, label %16

16:                                               ; preds = %12
  %17 = tail call zeroext i1 @_ZNK7SkOpPtT8containsEPKS_(%class.SkOpPtT* nonnull %1, %class.SkOpPtT* nonnull %10) #7
  br i1 %17, label %82, label %18

18:                                               ; preds = %16
  %19 = load %class.SkOpPtT*, %class.SkOpPtT** %9, align 8
  br label %20

20:                                               ; preds = %18, %12
  %21 = phi %class.SkOpPtT* [ %19, %18 ], [ %10, %12 ]
  %22 = icmp eq %class.SkOpPtT* %21, null
  br i1 %22, label %81, label %23

23:                                               ; preds = %20
  %24 = load %class.SkOpPtT*, %class.SkOpPtT** %3, align 8
  %25 = icmp eq %class.SkOpPtT* %21, %24
  br i1 %25, label %81, label %26

26:                                               ; preds = %23
  %27 = icmp eq %class.SkOpPtT* %24, null
  br i1 %27, label %33, label %28

28:                                               ; preds = %26
  %29 = tail call zeroext i1 @_ZNK7SkOpPtT8containsEPKS_(%class.SkOpPtT* nonnull %24, %class.SkOpPtT* nonnull %21) #7
  br i1 %29, label %81, label %30

30:                                               ; preds = %28
  %31 = load %class.SkOpPtT*, %class.SkOpPtT** %9, align 8
  %32 = load %class.SkOpPtT*, %class.SkOpPtT** %3, align 8
  br label %33

33:                                               ; preds = %26, %30
  %34 = phi %class.SkOpPtT* [ %32, %30 ], [ null, %26 ]
  %35 = phi %class.SkOpPtT* [ %31, %30 ], [ %21, %26 ]
  %36 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %35, i64 0, i32 1, i32 0
  %37 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %34, i64 0, i32 1, i32 0
  %38 = bitcast float* %36 to <2 x float>*
  %39 = load <2 x float>, <2 x float>* %38, align 4
  %40 = bitcast float* %37 to <2 x float>*
  %41 = load <2 x float>, <2 x float>* %40, align 4
  %42 = fsub <2 x float> %39, %41
  %43 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %1, i64 0, i32 1, i32 0
  %44 = bitcast float* %43 to <2 x float>*
  %45 = load <2 x float>, <2 x float>* %44, align 4
  %46 = fsub <2 x float> %45, %39
  %47 = shufflevector <2 x float> %46, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %48 = fmul <2 x float> %42, %47
  %49 = extractelement <2 x float> %48, i32 0
  %50 = extractelement <2 x float> %48, i32 1
  %51 = fcmp une float %49, %50
  br i1 %51, label %52, label %81

52:                                               ; preds = %33
  %53 = extractelement <2 x float> %39, i32 1
  %54 = extractelement <2 x float> %39, i32 0
  %55 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 0
  %56 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 0, i32 0, i32 0
  %57 = load %class.SkPathRef*, %class.SkPathRef** %56, align 8
  %58 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %57, i64 0, i32 4, i32 2
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %74

61:                                               ; preds = %52
  %62 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 5
  %63 = load %class.SkOpPtT*, %class.SkOpPtT** %62, align 8
  %64 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %63, i64 0, i32 1, i32 0
  %65 = load float, float* %64, align 4
  %66 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %63, i64 0, i32 1, i32 1
  %67 = load float, float* %66, align 4
  %68 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath* %55, float %65, float %67) #7
  %69 = load %class.SkOpPtT*, %class.SkOpPtT** %9, align 8
  %70 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %69, i64 0, i32 1, i32 0
  %71 = load float, float* %70, align 4
  %72 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %69, i64 0, i32 1, i32 1
  %73 = load float, float* %72, align 4
  br label %74

74:                                               ; preds = %52, %61
  %75 = phi float [ %53, %52 ], [ %73, %61 ]
  %76 = phi float [ %54, %52 ], [ %71, %61 ]
  %77 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath6lineToEff(%class.SkPath* %55, float %76, float %75) #7
  %78 = bitcast %class.SkOpPtT** %9 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = bitcast %class.SkOpPtT** %3 to i64*
  store i64 %79, i64* %80, align 8
  br label %81

81:                                               ; preds = %23, %28, %20, %74, %33
  store %class.SkOpPtT* %1, %class.SkOpPtT** %9, align 8
  br label %82

82:                                               ; preds = %8, %16, %6, %2, %81
  %83 = phi i1 [ true, %81 ], [ true, %2 ], [ true, %6 ], [ false, %16 ], [ false, %8 ]
  ret i1 %83
}

declare zeroext i1 @_ZNK7SkOpPtT8containsEPKS_(%class.SkOpPtT*, %class.SkOpPtT*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK12SkPathWriter11matchedLastEPK7SkOpPtT(%class.SkPathWriter* nocapture readonly, %class.SkOpPtT*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 4, i64 1
  %4 = load %class.SkOpPtT*, %class.SkOpPtT** %3, align 8
  %5 = icmp eq %class.SkOpPtT* %4, %1
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = icmp eq %class.SkOpPtT* %1, null
  %8 = icmp eq %class.SkOpPtT* %4, null
  %9 = or i1 %7, %8
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  %11 = tail call zeroext i1 @_ZNK7SkOpPtT8containsEPKS_(%class.SkOpPtT* nonnull %1, %class.SkOpPtT* nonnull %4) #7
  br label %12

12:                                               ; preds = %6, %2, %10
  %13 = phi i1 [ %11, %10 ], [ true, %2 ], [ false, %6 ]
  ret i1 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK12SkPathWriter13changedSlopesEPK7SkOpPtT(%class.SkPathWriter* nocapture readonly, %class.SkOpPtT* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 4, i64 0
  %4 = load %class.SkOpPtT*, %class.SkOpPtT** %3, align 8
  %5 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 4, i64 1
  %6 = load %class.SkOpPtT*, %class.SkOpPtT** %5, align 8
  %7 = icmp eq %class.SkOpPtT* %6, %4
  br i1 %7, label %36, label %8

8:                                                ; preds = %2
  %9 = icmp eq %class.SkOpPtT* %4, null
  %10 = icmp eq %class.SkOpPtT* %6, null
  %11 = or i1 %9, %10
  br i1 %11, label %17, label %12

12:                                               ; preds = %8
  %13 = tail call zeroext i1 @_ZNK7SkOpPtT8containsEPKS_(%class.SkOpPtT* nonnull %4, %class.SkOpPtT* nonnull %6) #7
  br i1 %13, label %36, label %14

14:                                               ; preds = %12
  %15 = load %class.SkOpPtT*, %class.SkOpPtT** %5, align 8
  %16 = load %class.SkOpPtT*, %class.SkOpPtT** %3, align 8
  br label %17

17:                                               ; preds = %14, %8
  %18 = phi %class.SkOpPtT* [ %16, %14 ], [ %4, %8 ]
  %19 = phi %class.SkOpPtT* [ %15, %14 ], [ %6, %8 ]
  %20 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %19, i64 0, i32 1, i32 0
  %21 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %18, i64 0, i32 1, i32 0
  %22 = bitcast float* %20 to <2 x float>*
  %23 = load <2 x float>, <2 x float>* %22, align 4
  %24 = bitcast float* %21 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 4
  %26 = fsub <2 x float> %23, %25
  %27 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %1, i64 0, i32 1, i32 0
  %28 = bitcast float* %27 to <2 x float>*
  %29 = load <2 x float>, <2 x float>* %28, align 4
  %30 = fsub <2 x float> %29, %23
  %31 = shufflevector <2 x float> %30, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %32 = fmul <2 x float> %26, %31
  %33 = extractelement <2 x float> %32, i32 0
  %34 = extractelement <2 x float> %32, i32 1
  %35 = fcmp une float %33, %34
  br label %36

36:                                               ; preds = %2, %12, %17
  %37 = phi i1 [ %35, %17 ], [ false, %12 ], [ false, %2 ]
  ret i1 %37
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkPathWriter6lineToEv(%class.SkPathWriter*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 0
  %3 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %class.SkPathRef*, %class.SkPathRef** %3, align 8
  %5 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %4, i64 0, i32 4, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %16

8:                                                ; preds = %1
  %9 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 5
  %10 = load %class.SkOpPtT*, %class.SkOpPtT** %9, align 8
  %11 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %10, i64 0, i32 1, i32 0
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %10, i64 0, i32 1, i32 1
  %14 = load float, float* %13, align 4
  %15 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath* %2, float %12, float %14) #7
  br label %16

16:                                               ; preds = %8, %1
  %17 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 4, i64 1
  %18 = load %class.SkOpPtT*, %class.SkOpPtT** %17, align 8
  %19 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %18, i64 0, i32 1, i32 0
  %20 = load float, float* %19, align 4
  %21 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %18, i64 0, i32 1, i32 1
  %22 = load float, float* %21, align 4
  %23 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath6lineToEff(%class.SkPath* %2, float %20, float %22) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkPathWriter12deferredMoveEPK7SkOpPtT(%class.SkPathWriter*, %class.SkOpPtT*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 4
  %4 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 4, i64 1
  %5 = load %class.SkOpPtT*, %class.SkOpPtT** %4, align 8
  %6 = icmp eq %class.SkOpPtT* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds [2 x %class.SkOpPtT*], [2 x %class.SkOpPtT*]* %3, i64 0, i64 0
  store %class.SkOpPtT* %1, %class.SkOpPtT** %8, align 8
  %9 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 5
  store %class.SkOpPtT* %1, %class.SkOpPtT** %9, align 8
  br label %19

10:                                               ; preds = %2
  %11 = icmp eq %class.SkOpPtT* %5, %1
  br i1 %11, label %19, label %12

12:                                               ; preds = %10
  %13 = icmp eq %class.SkOpPtT* %1, null
  br i1 %13, label %16, label %14

14:                                               ; preds = %12
  %15 = tail call zeroext i1 @_ZNK7SkOpPtT8containsEPKS_(%class.SkOpPtT* nonnull %1, %class.SkOpPtT* nonnull %5) #7
  br i1 %15, label %19, label %16

16:                                               ; preds = %12, %14
  tail call void @_ZN12SkPathWriter13finishContourEv(%class.SkPathWriter* %0)
  %17 = getelementptr inbounds [2 x %class.SkOpPtT*], [2 x %class.SkOpPtT*]* %3, i64 0, i64 0
  store %class.SkOpPtT* %1, %class.SkOpPtT** %17, align 8
  %18 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 5
  store %class.SkOpPtT* %1, %class.SkOpPtT** %18, align 8
  br label %19

19:                                               ; preds = %10, %7, %16, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkPathWriter13finishContourEv(%class.SkPathWriter*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 4, i64 0
  %3 = load %class.SkOpPtT*, %class.SkOpPtT** %2, align 8
  %4 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 4, i64 1
  %5 = load %class.SkOpPtT*, %class.SkOpPtT** %4, align 8
  %6 = icmp eq %class.SkOpPtT* %5, %3
  br i1 %6, label %41, label %7

7:                                                ; preds = %1
  %8 = icmp eq %class.SkOpPtT* %3, null
  %9 = icmp eq %class.SkOpPtT* %5, null
  %10 = or i1 %8, %9
  br i1 %10, label %15, label %11

11:                                               ; preds = %7
  %12 = tail call zeroext i1 @_ZNK7SkOpPtT8containsEPKS_(%class.SkOpPtT* nonnull %3, %class.SkOpPtT* nonnull %5) #7
  br i1 %12, label %41, label %13

13:                                               ; preds = %11
  %14 = load %class.SkOpPtT*, %class.SkOpPtT** %4, align 8
  br label %15

15:                                               ; preds = %13, %7
  %16 = phi %class.SkOpPtT* [ %14, %13 ], [ %5, %7 ]
  %17 = icmp eq %class.SkOpPtT* %16, null
  br i1 %17, label %141, label %18

18:                                               ; preds = %15
  %19 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 0
  %20 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 0, i32 0, i32 0
  %21 = load %class.SkPathRef*, %class.SkPathRef** %20, align 8
  %22 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %21, i64 0, i32 4, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %34

25:                                               ; preds = %18
  %26 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 5
  %27 = load %class.SkOpPtT*, %class.SkOpPtT** %26, align 8
  %28 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %27, i64 0, i32 1, i32 0
  %29 = load float, float* %28, align 4
  %30 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %27, i64 0, i32 1, i32 1
  %31 = load float, float* %30, align 4
  %32 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath* %19, float %29, float %31) #7
  %33 = load %class.SkOpPtT*, %class.SkOpPtT** %4, align 8
  br label %34

34:                                               ; preds = %18, %25
  %35 = phi %class.SkOpPtT* [ %16, %18 ], [ %33, %25 ]
  %36 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %35, i64 0, i32 1, i32 0
  %37 = load float, float* %36, align 4
  %38 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %35, i64 0, i32 1, i32 1
  %39 = load float, float* %38, align 4
  %40 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath6lineToEff(%class.SkPath* %19, float %37, float %39) #7
  br label %41

41:                                               ; preds = %1, %34, %11
  %42 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 0
  %43 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 0, i32 0, i32 0
  %44 = load %class.SkPathRef*, %class.SkPathRef** %43, align 8
  %45 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %44, i64 0, i32 4, i32 2
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %141, label %48

48:                                               ; preds = %41
  %49 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 5
  %50 = load %class.SkOpPtT*, %class.SkOpPtT** %49, align 8
  %51 = load %class.SkOpPtT*, %class.SkOpPtT** %4, align 8
  %52 = icmp eq %class.SkOpPtT* %51, %50
  br i1 %52, label %63, label %53

53:                                               ; preds = %48
  %54 = ptrtoint %class.SkOpPtT* %50 to i64
  %55 = icmp eq %class.SkOpPtT* %50, null
  %56 = icmp eq %class.SkOpPtT* %51, null
  %57 = or i1 %55, %56
  br i1 %57, label %64, label %58

58:                                               ; preds = %53
  %59 = tail call zeroext i1 @_ZNK7SkOpPtT8containsEPKS_(%class.SkOpPtT* nonnull %50, %class.SkOpPtT* nonnull %51) #7
  br i1 %59, label %63, label %60

60:                                               ; preds = %58
  %61 = bitcast %class.SkOpPtT** %49 to i64*
  %62 = load i64, i64* %61, align 8
  br label %64

63:                                               ; preds = %48, %58
  tail call void @_ZN12SkPathWriter5closeEv(%class.SkPathWriter* %0)
  br label %141

64:                                               ; preds = %53, %60
  %65 = phi i64 [ %62, %60 ], [ %54, %53 ]
  %66 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 2
  %67 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 2, i32 2
  %68 = load i32, i32* %67, align 4
  %69 = add i32 %68, 1
  %70 = icmp sgt i32 %69, -1
  br i1 %70, label %72, label %71

71:                                               ; preds = %64
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.2, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0)) #8
  unreachable

72:                                               ; preds = %64
  %73 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 2, i32 1
  %74 = load i32, i32* %73, align 8
  %75 = icmp slt i32 %74, %69
  br i1 %75, label %79, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds %class.SkTDArray.13, %class.SkTDArray.13* %66, i64 0, i32 0
  %78 = load %class.SkOpPtT**, %class.SkOpPtT*** %77, align 8
  br label %92

79:                                               ; preds = %72
  %80 = add i32 %68, 5
  %81 = lshr i32 %80, 2
  %82 = add nuw i32 %81, %80
  %83 = icmp sgt i32 %82, -1
  br i1 %83, label %85, label %84

84:                                               ; preds = %79
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.2, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0)) #8
  unreachable

85:                                               ; preds = %79
  store i32 %82, i32* %73, align 8
  %86 = bitcast %class.SkTDArray.13* %66 to i8**
  %87 = load i8*, i8** %86, align 8
  %88 = sext i32 %82 to i64
  %89 = shl nsw i64 %88, 3
  %90 = tail call i8* @_Z16sk_realloc_throwPvm(i8* %87, i64 %89) #7
  store i8* %90, i8** %86, align 8
  %91 = bitcast i8* %90 to %class.SkOpPtT**
  br label %92

92:                                               ; preds = %76, %85
  %93 = phi %class.SkOpPtT** [ %78, %76 ], [ %91, %85 ]
  store i32 %69, i32* %67, align 4
  %94 = sext i32 %68 to i64
  %95 = getelementptr inbounds %class.SkOpPtT*, %class.SkOpPtT** %93, i64 %94
  %96 = bitcast %class.SkOpPtT** %95 to i64*
  store i64 %65, i64* %96, align 8
  %97 = bitcast %class.SkOpPtT** %4 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = load i32, i32* %67, align 4
  %100 = add i32 %99, 1
  %101 = icmp sgt i32 %100, -1
  br i1 %101, label %103, label %102

102:                                              ; preds = %92
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.2, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0)) #8
  unreachable

103:                                              ; preds = %92
  %104 = load i32, i32* %73, align 8
  %105 = icmp slt i32 %104, %100
  br i1 %105, label %109, label %106

106:                                              ; preds = %103
  %107 = getelementptr inbounds %class.SkTDArray.13, %class.SkTDArray.13* %66, i64 0, i32 0
  %108 = load %class.SkOpPtT**, %class.SkOpPtT*** %107, align 8
  br label %122

109:                                              ; preds = %103
  %110 = add i32 %99, 5
  %111 = lshr i32 %110, 2
  %112 = add nuw i32 %111, %110
  %113 = icmp sgt i32 %112, -1
  br i1 %113, label %115, label %114

114:                                              ; preds = %109
  tail call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.2, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0)) #8
  unreachable

115:                                              ; preds = %109
  store i32 %112, i32* %73, align 8
  %116 = bitcast %class.SkTDArray.13* %66 to i8**
  %117 = load i8*, i8** %116, align 8
  %118 = sext i32 %112 to i64
  %119 = shl nsw i64 %118, 3
  %120 = tail call i8* @_Z16sk_realloc_throwPvm(i8* %117, i64 %119) #7
  store i8* %120, i8** %116, align 8
  %121 = bitcast i8* %120 to %class.SkOpPtT**
  br label %122

122:                                              ; preds = %106, %115
  %123 = phi %class.SkOpPtT** [ %108, %106 ], [ %121, %115 ]
  store i32 %100, i32* %67, align 4
  %124 = sext i32 %99 to i64
  %125 = getelementptr inbounds %class.SkOpPtT*, %class.SkOpPtT** %123, i64 %124
  %126 = bitcast %class.SkOpPtT** %125 to i64*
  store i64 %98, i64* %126, align 8
  %127 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 1
  tail call void @_ZN8SkTArrayI6SkPathLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray* %127, i32 1, i32 1) #7
  %128 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %127, i64 0, i32 0
  %129 = load %class.SkPath*, %class.SkPath** %128, align 8
  %130 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 1, i32 1
  %131 = load i64, i64* %130, align 8
  %132 = lshr i64 %131, 1
  %133 = and i64 %132, 2147483647
  %134 = getelementptr inbounds %class.SkPath, %class.SkPath* %129, i64 %133
  %135 = add i64 %131, 2
  %136 = and i64 %135, 4294967294
  %137 = and i64 %131, -4294967295
  %138 = or i64 %136, %137
  store i64 %138, i64* %130, align 8
  tail call void @_ZN6SkPathC1ERKS_(%class.SkPath* %134, %class.SkPath* dereferenceable(16) %42) #7
  %139 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath* %42) #7
  %140 = bitcast %class.SkOpPtT** %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %140, i8 0, i64 24, i1 false) #7
  br label %141

141:                                              ; preds = %15, %41, %122, %63
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK12SkPathWriter8isClosedEv(%class.SkPathWriter* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 5
  %3 = load %class.SkOpPtT*, %class.SkOpPtT** %2, align 8
  %4 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 4, i64 1
  %5 = load %class.SkOpPtT*, %class.SkOpPtT** %4, align 8
  %6 = icmp eq %class.SkOpPtT* %5, %3
  br i1 %6, label %13, label %7

7:                                                ; preds = %1
  %8 = icmp eq %class.SkOpPtT* %3, null
  %9 = icmp eq %class.SkOpPtT* %5, null
  %10 = or i1 %8, %9
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = tail call zeroext i1 @_ZNK7SkOpPtT8containsEPKS_(%class.SkOpPtT* nonnull %3, %class.SkOpPtT* nonnull %5) #7
  br label %13

13:                                               ; preds = %1, %7, %11
  %14 = phi i1 [ %12, %11 ], [ true, %1 ], [ false, %7 ]
  ret i1 %14
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkPathWriter6moveToEv(%class.SkPathWriter*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 0
  %3 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 5
  %4 = load %class.SkOpPtT*, %class.SkOpPtT** %3, align 8
  %5 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %4, i64 0, i32 1, i32 0
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %4, i64 0, i32 1, i32 1
  %8 = load float, float* %7, align 4
  %9 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath* %2, float %6, float %8) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkPathWriter6quadToERK7SkPointPK7SkOpPtT(%class.SkPathWriter*, %struct.SkPoint* nocapture readonly dereferenceable(8), %class.SkOpPtT*) local_unnamed_addr #2 align 2 {
  %4 = tail call <2 x float> @_ZN12SkPathWriter6updateEPK7SkOpPtT(%class.SkPathWriter* %0, %class.SkOpPtT* %2)
  %5 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 0
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %9 = load float, float* %8, align 4
  %10 = extractelement <2 x float> %4, i32 0
  %11 = extractelement <2 x float> %4, i32 1
  %12 = tail call dereferenceable(16) %class.SkPath* @_ZN6SkPath6quadToEffff(%class.SkPath* %5, float %7, float %9, float %10, float %11) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN12SkPathWriter20someAssemblyRequiredEv(%class.SkPathWriter*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN12SkPathWriter13finishContourEv(%class.SkPathWriter* %0)
  %2 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 2, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = icmp sgt i32 %3, 0
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12SkPathWriter8assembleEv(%class.SkPathWriter*) local_unnamed_addr #2 align 2 {
  %2 = alloca %class.SkMatrix, align 16
  %3 = alloca %class.SkMatrix, align 16
  %4 = alloca %class.SkMatrix, align 16
  %5 = alloca %class.SkPath, align 8
  %6 = alloca %class.SkPathWriter, align 8
  %7 = alloca %class.SkOpSpanBase*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %class.SkPath, align 8
  %10 = alloca %class.SkSTArray, align 8
  %11 = alloca %class.SkSTArray.16, align 8
  %12 = alloca %class.SkSTArray.16, align 8
  %13 = alloca %class.DistanceLessThan, align 8
  %14 = alloca %struct.SkPoint, align 4
  %15 = alloca <2 x float>, align 8
  %16 = bitcast <2 x float>* %15 to %struct.SkPoint*
  tail call void @_ZN12SkPathWriter13finishContourEv(%class.SkPathWriter* %0) #7
  %17 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 2, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = icmp sgt i32 %18, 0
  br i1 %19, label %20, label %728

20:                                               ; preds = %1
  %21 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 2, i32 0
  %22 = load %class.SkOpPtT**, %class.SkOpPtT*** %21, align 8
  %23 = bitcast %class.SkPath* %5 to i8*
  %24 = bitcast %class.SkPathWriter* %6 to i8*
  %25 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %6, i64 0, i32 0
  %26 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %6, i64 0, i32 1, i32 1
  %27 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %6, i64 0, i32 1, i32 0
  %28 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %6, i64 0, i32 2
  %29 = bitcast %class.SkTDArray.13* %28 to i8*
  %30 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %6, i64 0, i32 3
  %31 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %6, i64 0, i32 4, i64 0
  %32 = bitcast %class.SkOpPtT** %31 to i8*
  %33 = bitcast %class.SkOpSpanBase** %7 to i8*
  %34 = bitcast %class.SkOpSpanBase** %7 to i64*
  %35 = bitcast i32* %8 to i8*
  %36 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %6, i64 0, i32 1
  %37 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 1, i32 0
  %38 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %36, i64 0, i32 0
  %39 = bitcast %class.SkMatrix* %3 to i8*
  %40 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 1
  %41 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 4
  %42 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %3, i64 0, i32 0, i64 8
  %43 = bitcast %class.SkPath* %9 to i8*
  %44 = bitcast %class.SkMatrix* %2 to i8*
  %45 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 1
  %46 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 4
  %47 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 8
  %48 = bitcast %class.SkTDArray.13* %28 to i8**
  %49 = bitcast %class.SkTArray* %36 to i8**
  %50 = zext i32 %18 to i64
  %51 = bitcast %class.SkPath* %5 to i8*
  %52 = bitcast %class.SkPath* %9 to i8*
  %53 = bitcast %class.SkMatrix* %3 to <4 x float>*
  %54 = bitcast float* %41 to <4 x float>*
  %55 = bitcast %class.SkMatrix* %2 to <4 x float>*
  %56 = bitcast float* %46 to <4 x float>*
  br label %180

57:                                               ; preds = %276
  %58 = sdiv i32 %18, 2
  %59 = add i32 %18, 1
  %60 = icmp ult i32 %59, 3
  br i1 %60, label %294, label %61

61:                                               ; preds = %57
  %62 = icmp sgt i32 %18, -2
  br i1 %62, label %64, label %63

63:                                               ; preds = %61
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.2, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0)) #8
  unreachable

64:                                               ; preds = %61
  %65 = add nuw nsw i32 %58, 4
  %66 = lshr i32 %65, 2
  %67 = add nuw nsw i32 %66, %65
  %68 = icmp sgt i32 %67, -1
  br i1 %68, label %70, label %69

69:                                               ; preds = %64
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.2, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0)) #8
  unreachable

70:                                               ; preds = %64
  %71 = sext i32 %67 to i64
  %72 = shl nsw i64 %71, 2
  %73 = call i8* @_Z16sk_realloc_throwPvm(i8* null, i64 %72) #7
  %74 = bitcast i8* %73 to i32*
  %75 = add nuw nsw i32 %58, 4
  %76 = lshr i32 %75, 2
  %77 = add nuw nsw i32 %76, %75
  %78 = icmp sgt i32 %77, -1
  br i1 %78, label %80, label %79

79:                                               ; preds = %70
  call void (i8*, i32, i8*, ...) @_Z16SkAbort_FileLinePKciS0_z(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.2, i64 0, i64 0), i32 374, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0)) #8
  unreachable

80:                                               ; preds = %70
  %81 = sext i32 %77 to i64
  %82 = shl nsw i64 %81, 2
  %83 = call i8* @_Z16sk_realloc_throwPvm(i8* null, i64 %82) #7
  %84 = bitcast i8* %83 to i32*
  %85 = zext i32 %58 to i64
  %86 = icmp ult i32 %58, 8
  br i1 %86, label %87, label %104

87:                                               ; preds = %178, %104, %80
  %88 = phi i64 [ 0, %104 ], [ 0, %80 ], [ %112, %178 ]
  %89 = xor i64 %88, -1
  %90 = add nsw i64 %89, %85
  %91 = and i64 %85, 3
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %101, label %93

93:                                               ; preds = %87, %93
  %94 = phi i64 [ %98, %93 ], [ %88, %87 ]
  %95 = phi i64 [ %99, %93 ], [ %91, %87 ]
  %96 = getelementptr inbounds i32, i32* %84, i64 %94
  store i32 2147483647, i32* %96, align 4
  %97 = getelementptr inbounds i32, i32* %74, i64 %94
  store i32 2147483647, i32* %97, align 4
  %98 = add nuw nsw i64 %94, 1
  %99 = add i64 %95, -1
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %93, !llvm.loop !2

101:                                              ; preds = %93, %87
  %102 = phi i64 [ %88, %87 ], [ %98, %93 ]
  %103 = icmp ult i64 %90, 3
  br i1 %103, label %294, label %279

104:                                              ; preds = %80
  %105 = shl nuw nsw i64 %85, 2
  %106 = getelementptr i8, i8* %83, i64 %105
  %107 = getelementptr i8, i8* %73, i64 %105
  %108 = icmp ult i8* %83, %107
  %109 = icmp ult i8* %73, %106
  %110 = and i1 %108, %109
  br i1 %110, label %87, label %111

111:                                              ; preds = %104
  %112 = and i64 %85, 4294967288
  %113 = add nsw i64 %112, -8
  %114 = lshr exact i64 %113, 3
  %115 = add nuw nsw i64 %114, 1
  %116 = and i64 %115, 3
  %117 = icmp ult i64 %113, 24
  br i1 %117, label %161, label %118

118:                                              ; preds = %111
  %119 = sub nsw i64 %115, %116
  br label %120

120:                                              ; preds = %120, %118
  %121 = phi i64 [ 0, %118 ], [ %158, %120 ]
  %122 = phi i64 [ %119, %118 ], [ %159, %120 ]
  %123 = getelementptr inbounds i32, i32* %84, i64 %121
  %124 = bitcast i32* %123 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <4 x i32>* %124, align 4, !alias.scope !4, !noalias !7
  %125 = getelementptr inbounds i32, i32* %123, i64 4
  %126 = bitcast i32* %125 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <4 x i32>* %126, align 4, !alias.scope !4, !noalias !7
  %127 = getelementptr inbounds i32, i32* %74, i64 %121
  %128 = bitcast i32* %127 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <4 x i32>* %128, align 4, !alias.scope !7
  %129 = getelementptr inbounds i32, i32* %127, i64 4
  %130 = bitcast i32* %129 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <4 x i32>* %130, align 4, !alias.scope !7
  %131 = or i64 %121, 8
  %132 = getelementptr inbounds i32, i32* %84, i64 %131
  %133 = bitcast i32* %132 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <4 x i32>* %133, align 4, !alias.scope !4, !noalias !7
  %134 = getelementptr inbounds i32, i32* %132, i64 4
  %135 = bitcast i32* %134 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <4 x i32>* %135, align 4, !alias.scope !4, !noalias !7
  %136 = getelementptr inbounds i32, i32* %74, i64 %131
  %137 = bitcast i32* %136 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <4 x i32>* %137, align 4, !alias.scope !7
  %138 = getelementptr inbounds i32, i32* %136, i64 4
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <4 x i32>* %139, align 4, !alias.scope !7
  %140 = or i64 %121, 16
  %141 = getelementptr inbounds i32, i32* %84, i64 %140
  %142 = bitcast i32* %141 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <4 x i32>* %142, align 4, !alias.scope !4, !noalias !7
  %143 = getelementptr inbounds i32, i32* %141, i64 4
  %144 = bitcast i32* %143 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <4 x i32>* %144, align 4, !alias.scope !4, !noalias !7
  %145 = getelementptr inbounds i32, i32* %74, i64 %140
  %146 = bitcast i32* %145 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <4 x i32>* %146, align 4, !alias.scope !7
  %147 = getelementptr inbounds i32, i32* %145, i64 4
  %148 = bitcast i32* %147 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <4 x i32>* %148, align 4, !alias.scope !7
  %149 = or i64 %121, 24
  %150 = getelementptr inbounds i32, i32* %84, i64 %149
  %151 = bitcast i32* %150 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <4 x i32>* %151, align 4, !alias.scope !4, !noalias !7
  %152 = getelementptr inbounds i32, i32* %150, i64 4
  %153 = bitcast i32* %152 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <4 x i32>* %153, align 4, !alias.scope !4, !noalias !7
  %154 = getelementptr inbounds i32, i32* %74, i64 %149
  %155 = bitcast i32* %154 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <4 x i32>* %155, align 4, !alias.scope !7
  %156 = getelementptr inbounds i32, i32* %154, i64 4
  %157 = bitcast i32* %156 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <4 x i32>* %157, align 4, !alias.scope !7
  %158 = add i64 %121, 32
  %159 = add i64 %122, -4
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %161, label %120, !llvm.loop !9

161:                                              ; preds = %120, %111
  %162 = phi i64 [ 0, %111 ], [ %158, %120 ]
  %163 = icmp eq i64 %116, 0
  br i1 %163, label %178, label %164

164:                                              ; preds = %161, %164
  %165 = phi i64 [ %175, %164 ], [ %162, %161 ]
  %166 = phi i64 [ %176, %164 ], [ %116, %161 ]
  %167 = getelementptr inbounds i32, i32* %84, i64 %165
  %168 = bitcast i32* %167 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <4 x i32>* %168, align 4, !alias.scope !4, !noalias !7
  %169 = getelementptr inbounds i32, i32* %167, i64 4
  %170 = bitcast i32* %169 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <4 x i32>* %170, align 4, !alias.scope !4, !noalias !7
  %171 = getelementptr inbounds i32, i32* %74, i64 %165
  %172 = bitcast i32* %171 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <4 x i32>* %172, align 4, !alias.scope !7
  %173 = getelementptr inbounds i32, i32* %171, i64 4
  %174 = bitcast i32* %173 to <4 x i32>*
  store <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>, <4 x i32>* %174, align 4, !alias.scope !7
  %175 = add i64 %165, 8
  %176 = add i64 %166, -1
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %164, !llvm.loop !11

178:                                              ; preds = %164, %161
  %179 = icmp eq i64 %112, %85
  br i1 %179, label %294, label %87

180:                                              ; preds = %276, %20
  %181 = phi i64 [ 0, %20 ], [ %277, %276 ]
  %182 = getelementptr inbounds %class.SkOpPtT*, %class.SkOpPtT** %22, i64 %181
  %183 = load %class.SkOpPtT*, %class.SkOpPtT** %182, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %5) #7
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %24) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 -86, i64 80, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %25) #7
  store %class.SkPath* null, %class.SkPath** %27, align 8
  store i64 1, i64* %26, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 16, i1 false) #7
  store %class.SkPath* %5, %class.SkPath** %30, align 8
  %184 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath* nonnull %25) #7
  call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 24, i1 false) #7
  %185 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %183, i64 0, i32 0
  %186 = load double, double* %185, align 8
  %187 = fcmp oeq double %186, 0.000000e+00
  %188 = fcmp oeq double %186, 1.000000e+00
  %189 = or i1 %187, %188
  br i1 %189, label %190, label %236

190:                                              ; preds = %180, %229
  %191 = phi double* [ %220, %229 ], [ %185, %180 ]
  %192 = phi %class.SkOpPtT* [ %231, %229 ], [ %183, %180 ]
  %193 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %192, i64 0, i32 2
  %194 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %193, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #7
  store %class.SkOpSpanBase* inttoptr (i64 -6148914691236517206 to %class.SkOpSpanBase*), %class.SkOpSpanBase** %7, align 8
  %195 = load double, double* %191, align 8
  %196 = fcmp une double %195, 0.000000e+00
  %197 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %194, i64 0, i32 4
  %198 = bitcast %class.SkOpSpan** %197 to %class.SkOpSpanBase**
  %199 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %194, i64 1, i32 0, i32 2
  %200 = select i1 %196, %class.SkOpSpanBase** %198, %class.SkOpSpanBase** %199
  %201 = bitcast %class.SkOpSpanBase** %200 to i64*
  %202 = load i64, i64* %201, align 8
  store i64 %202, i64* %34, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %35) #7
  %203 = load double, double* %191, align 8
  %204 = fcmp une double %203, 0.000000e+00
  %205 = select i1 %204, i32 1, i32 -1
  store i32 %205, i32* %8, align 4
  %206 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %194, i64 0, i32 1
  %207 = load %class.SkOpSegment*, %class.SkOpSegment** %206, align 8
  %208 = call %class.SkOpSegment* @_ZNK11SkOpSegment9nextChaseEPP12SkOpSpanBasePiPP8SkOpSpanS2_(%class.SkOpSegment* %207, %class.SkOpSpanBase** nonnull %7, i32* nonnull %8, %class.SkOpSpan** null, %class.SkOpSpanBase** null) #7
  %209 = icmp eq %class.SkOpSegment* %208, null
  br i1 %209, label %228, label %210

210:                                              ; preds = %190
  %211 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %7, align 8
  %212 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %211, i64 0, i32 0, i32 0
  %213 = load double, double* %212, align 8
  %214 = fcmp une double %213, 0.000000e+00
  %215 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %211, i64 0, i32 4
  %216 = bitcast %class.SkOpSpan** %215 to %class.SkOpSpanBase**
  %217 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %211, i64 1, i32 0, i32 2
  %218 = select i1 %214, %class.SkOpSpanBase** %216, %class.SkOpSpanBase** %217
  %219 = load %class.SkOpSpanBase*, %class.SkOpSpanBase** %218, align 8
  %220 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %219, i64 0, i32 0, i32 0
  %221 = load double, double* %220, align 8
  %222 = fcmp olt double %213, %221
  %223 = select i1 %222, %class.SkOpSpanBase* %211, %class.SkOpSpanBase* %219
  %224 = bitcast %class.SkOpSpanBase* %223 to %class.SkOpSpan*
  %225 = getelementptr inbounds %class.SkOpSpan, %class.SkOpSpan* %224, i64 0, i32 11
  %226 = load i8, i8* %225, align 1, !range !12
  %227 = icmp eq i8 %226, 0
  br i1 %227, label %229, label %228

228:                                              ; preds = %210, %190
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %35) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #7
  br label %236

229:                                              ; preds = %210
  %230 = call zeroext i1 @_ZNK11SkOpSegment10addCurveToEPK12SkOpSpanBaseS2_P12SkPathWriter(%class.SkOpSegment* nonnull %208, %class.SkOpSpanBase* %211, %class.SkOpSpanBase* %219, %class.SkPathWriter* nonnull %6) #7
  %231 = getelementptr inbounds %class.SkOpSpanBase, %class.SkOpSpanBase* %219, i64 0, i32 0
  store %class.SkOpPtT* %231, %class.SkOpPtT** %182, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %35) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #7
  %232 = load double, double* %220, align 8
  %233 = fcmp oeq double %232, 0.000000e+00
  %234 = fcmp oeq double %232, 1.000000e+00
  %235 = or i1 %233, %234
  br i1 %235, label %190, label %236

236:                                              ; preds = %229, %180, %228
  call void @_ZN12SkPathWriter13finishContourEv(%class.SkPathWriter* nonnull %6)
  %237 = load i64, i64* %26, align 8
  %238 = and i64 %237, 4294967294
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %256, label %240

240:                                              ; preds = %236
  %241 = lshr i64 %181, 1
  %242 = load %class.SkPath*, %class.SkPath** %37, align 8
  %243 = and i64 %241, 2147483647
  %244 = getelementptr inbounds %class.SkPath, %class.SkPath* %242, i64 %243
  %245 = load %class.SkPath*, %class.SkPath** %38, align 8
  %246 = and i64 %181, 1
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %251, label %248

248:                                              ; preds = %240
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %39) #7
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %53, align 16
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %54, align 16
  store float 1.000000e+00, float* %42, align 16
  store i32 16, i32* %40, align 4
  %249 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* nonnull %3) #7
  %250 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath7addPathERKS_RK8SkMatrixNS_11AddPathModeE(%class.SkPath* %244, %class.SkPath* dereferenceable(16) %245, %class.SkMatrix* nonnull dereferenceable(40) %3, i32 1) #7
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %39) #7
  br label %256

251:                                              ; preds = %240
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %43) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %52, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %9) #7
  %252 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath14reverseAddPathERKS_(%class.SkPath* nonnull %9, %class.SkPath* dereferenceable(16) %245) #7
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %44) #7
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %55, align 16
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %56, align 16
  store float 1.000000e+00, float* %47, align 16
  store i32 16, i32* %45, align 4
  %253 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* nonnull %2) #7
  %254 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath7addPathERKS_RK8SkMatrixNS_11AddPathModeE(%class.SkPath* nonnull %9, %class.SkPath* dereferenceable(16) %244, %class.SkMatrix* nonnull dereferenceable(40) %2, i32 1) #7
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %44) #7
  %255 = call dereferenceable(16) %class.SkPath* @_ZN6SkPathaSERKS_(%class.SkPath* %244, %class.SkPath* nonnull dereferenceable(16) %9) #7
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %9) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %43) #7
  br label %256

256:                                              ; preds = %248, %251, %236
  %257 = load i8*, i8** %48, align 8
  call void @_Z7sk_freePv(i8* %257) #7
  %258 = load i64, i64* %26, align 8
  %259 = and i64 %258, 4294967294
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %261, label %265

261:                                              ; preds = %265, %256
  %262 = phi i64 [ %258, %256 ], [ %270, %265 ]
  %263 = and i64 %262, 1
  %264 = icmp eq i64 %263, 0
  br i1 %264, label %276, label %274

265:                                              ; preds = %256, %265
  %266 = phi i64 [ %269, %265 ], [ 0, %256 ]
  %267 = load %class.SkPath*, %class.SkPath** %38, align 8
  %268 = getelementptr inbounds %class.SkPath, %class.SkPath* %267, i64 %266
  call void @_ZN6SkPathD1Ev(%class.SkPath* %268) #7
  %269 = add nuw nsw i64 %266, 1
  %270 = load i64, i64* %26, align 8
  %271 = lshr i64 %270, 1
  %272 = and i64 %271, 2147483647
  %273 = icmp ult i64 %269, %272
  br i1 %273, label %265, label %261

274:                                              ; preds = %261
  %275 = load i8*, i8** %49, align 8
  call void @_Z7sk_freePv(i8* %275) #7
  br label %276

276:                                              ; preds = %261, %274
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %25) #7
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %24) #7
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #7
  %277 = add nuw nsw i64 %181, 1
  %278 = icmp eq i64 %277, %50
  br i1 %278, label %57, label %180

279:                                              ; preds = %101, %279
  %280 = phi i64 [ %292, %279 ], [ %102, %101 ]
  %281 = getelementptr inbounds i32, i32* %84, i64 %280
  store i32 2147483647, i32* %281, align 4
  %282 = getelementptr inbounds i32, i32* %74, i64 %280
  store i32 2147483647, i32* %282, align 4
  %283 = add nuw nsw i64 %280, 1
  %284 = getelementptr inbounds i32, i32* %84, i64 %283
  store i32 2147483647, i32* %284, align 4
  %285 = getelementptr inbounds i32, i32* %74, i64 %283
  store i32 2147483647, i32* %285, align 4
  %286 = add nuw nsw i64 %280, 2
  %287 = getelementptr inbounds i32, i32* %84, i64 %286
  store i32 2147483647, i32* %287, align 4
  %288 = getelementptr inbounds i32, i32* %74, i64 %286
  store i32 2147483647, i32* %288, align 4
  %289 = add nuw nsw i64 %280, 3
  %290 = getelementptr inbounds i32, i32* %84, i64 %289
  store i32 2147483647, i32* %290, align 4
  %291 = getelementptr inbounds i32, i32* %74, i64 %289
  store i32 2147483647, i32* %291, align 4
  %292 = add nuw nsw i64 %280, 4
  %293 = icmp eq i64 %292, %85
  br i1 %293, label %294, label %279, !llvm.loop !13

294:                                              ; preds = %101, %279, %178, %57
  %295 = phi i1 [ false, %57 ], [ true, %178 ], [ true, %279 ], [ true, %101 ]
  %296 = phi i32* [ null, %57 ], [ %84, %178 ], [ %84, %279 ], [ %84, %101 ]
  %297 = phi i8* [ null, %57 ], [ %83, %178 ], [ %83, %279 ], [ %83, %101 ]
  %298 = phi i32* [ null, %57 ], [ %74, %178 ], [ %74, %279 ], [ %74, %101 ]
  %299 = phi i8* [ null, %57 ], [ %73, %178 ], [ %73, %279 ], [ %73, %101 ]
  %300 = add i32 %18, -1
  %301 = mul nsw i32 %300, %18
  %302 = sdiv i32 %301, 2
  %303 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %10, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %303) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %303, i8 -86, i64 64, i1 false)
  %304 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %10, i64 0, i32 0, i32 0, i64 64
  %305 = getelementptr inbounds %class.SkSTArray, %class.SkSTArray* %10, i64 0, i32 0, i32 0, i64 72
  %306 = bitcast i8* %305 to i64*
  %307 = bitcast i8* %304 to i8**
  store i8* %303, i8** %307, align 8
  store i64 68719476736, i64* %306, align 8
  %308 = icmp sgt i32 %301, 1
  br i1 %308, label %309, label %343

309:                                              ; preds = %294
  %310 = sext i32 %302 to i64
  %311 = icmp slt i32 %301, 18
  %312 = and i32 %301, -2
  %313 = icmp eq i32 %312, 16
  %314 = or i1 %313, %311
  br i1 %314, label %337, label %315

315:                                              ; preds = %309
  %316 = shl nsw i64 %310, 33
  store i64 %316, i64* %306, align 8
  %317 = and i64 %310, 2147483647
  %318 = call i8* @_Z15sk_malloc_throwmm(i64 %317, i64 8) #7
  %319 = load i64, i64* %306, align 8
  %320 = shl i64 %319, 2
  %321 = and i64 %320, 17179869176
  %322 = icmp eq i64 %321, 0
  br i1 %322, label %326, label %323

323:                                              ; preds = %315
  %324 = load i8*, i8** %307, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %318, i8* align 1 %324, i64 %321, i1 false) #7
  %325 = load i64, i64* %306, align 8
  br label %326

326:                                              ; preds = %323, %315
  %327 = phi i64 [ %319, %315 ], [ %325, %323 ]
  %328 = and i64 %327, 1
  %329 = icmp eq i64 %328, 0
  br i1 %329, label %333, label %330

330:                                              ; preds = %326
  %331 = load i8*, i8** %307, align 8
  call void @_Z7sk_freePv(i8* %331) #7
  %332 = load i64, i64* %306, align 8
  br label %333

333:                                              ; preds = %330, %326
  %334 = phi i64 [ %332, %330 ], [ %327, %326 ]
  store i8* %318, i8** %307, align 8
  %335 = and i64 %334, -4294967298
  %336 = or i64 %335, 1
  store i64 %336, i64* %306, align 8
  br label %337

337:                                              ; preds = %309, %333
  %338 = phi i64 [ 68719476736, %309 ], [ %336, %333 ]
  %339 = shl i64 %338, 32
  %340 = and i64 %339, 4294967296
  %341 = and i64 %338, -4294967297
  %342 = or i64 %340, %341
  br label %343

343:                                              ; preds = %294, %337
  %344 = phi i64 [ %342, %337 ], [ 68719476736, %294 ]
  store i64 %344, i64* %306, align 8
  %345 = getelementptr inbounds %class.SkSTArray.16, %class.SkSTArray.16* %11, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %345) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %345, i8 -86, i64 32, i1 false)
  %346 = getelementptr inbounds %class.SkSTArray.16, %class.SkSTArray.16* %11, i64 0, i32 0, i32 0, i64 32
  %347 = getelementptr inbounds %class.SkSTArray.16, %class.SkSTArray.16* %11, i64 0, i32 0, i32 0, i64 40
  %348 = bitcast i8* %347 to i64*
  %349 = bitcast i8* %346 to i8**
  store i8* %345, i8** %349, align 8
  store i64 68719476736, i64* %348, align 8
  br i1 %308, label %350, label %384

350:                                              ; preds = %343
  %351 = sext i32 %302 to i64
  %352 = icmp slt i32 %301, 18
  %353 = and i32 %301, -2
  %354 = icmp eq i32 %353, 16
  %355 = or i1 %354, %352
  br i1 %355, label %378, label %356

356:                                              ; preds = %350
  %357 = shl nsw i64 %351, 33
  store i64 %357, i64* %348, align 8
  %358 = and i64 %351, 2147483647
  %359 = call i8* @_Z15sk_malloc_throwmm(i64 %358, i64 4) #7
  %360 = load i64, i64* %348, align 8
  %361 = shl i64 %360, 1
  %362 = and i64 %361, 8589934588
  %363 = icmp eq i64 %362, 0
  br i1 %363, label %367, label %364

364:                                              ; preds = %356
  %365 = load i8*, i8** %349, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %359, i8* align 1 %365, i64 %362, i1 false) #7
  %366 = load i64, i64* %348, align 8
  br label %367

367:                                              ; preds = %364, %356
  %368 = phi i64 [ %360, %356 ], [ %366, %364 ]
  %369 = and i64 %368, 1
  %370 = icmp eq i64 %369, 0
  br i1 %370, label %374, label %371

371:                                              ; preds = %367
  %372 = load i8*, i8** %349, align 8
  call void @_Z7sk_freePv(i8* %372) #7
  %373 = load i64, i64* %348, align 8
  br label %374

374:                                              ; preds = %371, %367
  %375 = phi i64 [ %373, %371 ], [ %368, %367 ]
  store i8* %359, i8** %349, align 8
  %376 = and i64 %375, -4294967298
  %377 = or i64 %376, 1
  store i64 %377, i64* %348, align 8
  br label %378

378:                                              ; preds = %350, %374
  %379 = phi i64 [ 68719476736, %350 ], [ %377, %374 ]
  %380 = shl i64 %379, 32
  %381 = and i64 %380, 4294967296
  %382 = and i64 %379, -4294967297
  %383 = or i64 %381, %382
  br label %384

384:                                              ; preds = %343, %378
  %385 = phi i64 [ %383, %378 ], [ 68719476736, %343 ]
  store i64 %385, i64* %348, align 8
  %386 = getelementptr inbounds %class.SkSTArray.16, %class.SkSTArray.16* %12, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %386) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %386, i8 -86, i64 32, i1 false)
  %387 = getelementptr inbounds %class.SkSTArray.16, %class.SkSTArray.16* %12, i64 0, i32 0, i32 0, i64 32
  %388 = getelementptr inbounds %class.SkSTArray.16, %class.SkSTArray.16* %12, i64 0, i32 0, i32 0, i64 40
  %389 = bitcast i8* %388 to i64*
  %390 = bitcast i8* %387 to i8**
  store i8* %386, i8** %390, align 8
  store i64 68719476736, i64* %389, align 8
  br i1 %308, label %391, label %425

391:                                              ; preds = %384
  %392 = sext i32 %302 to i64
  %393 = icmp slt i32 %301, 18
  %394 = and i32 %301, -2
  %395 = icmp eq i32 %394, 16
  %396 = or i1 %395, %393
  br i1 %396, label %419, label %397

397:                                              ; preds = %391
  %398 = shl nsw i64 %392, 33
  store i64 %398, i64* %389, align 8
  %399 = and i64 %392, 2147483647
  %400 = call i8* @_Z15sk_malloc_throwmm(i64 %399, i64 4) #7
  %401 = load i64, i64* %389, align 8
  %402 = shl i64 %401, 1
  %403 = and i64 %402, 8589934588
  %404 = icmp eq i64 %403, 0
  br i1 %404, label %408, label %405

405:                                              ; preds = %397
  %406 = load i8*, i8** %390, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %400, i8* align 1 %406, i64 %403, i1 false) #7
  %407 = load i64, i64* %389, align 8
  br label %408

408:                                              ; preds = %405, %397
  %409 = phi i64 [ %401, %397 ], [ %407, %405 ]
  %410 = and i64 %409, 1
  %411 = icmp eq i64 %410, 0
  br i1 %411, label %415, label %412

412:                                              ; preds = %408
  %413 = load i8*, i8** %390, align 8
  call void @_Z7sk_freePv(i8* %413) #7
  %414 = load i64, i64* %389, align 8
  br label %415

415:                                              ; preds = %412, %408
  %416 = phi i64 [ %414, %412 ], [ %409, %408 ]
  store i8* %400, i8** %390, align 8
  %417 = and i64 %416, -4294967298
  %418 = or i64 %417, 1
  store i64 %418, i64* %389, align 8
  br label %419

419:                                              ; preds = %391, %415
  %420 = phi i64 [ 68719476736, %391 ], [ %418, %415 ]
  %421 = shl i64 %420, 32
  %422 = and i64 %421, 4294967296
  %423 = and i64 %420, -4294967297
  %424 = or i64 %422, %423
  br label %425

425:                                              ; preds = %384, %419
  %426 = phi i64 [ %424, %419 ], [ 68719476736, %384 ]
  store i64 %426, i64* %389, align 8
  %427 = icmp sgt i32 %300, 0
  br i1 %427, label %430, label %428

428:                                              ; preds = %425
  %429 = bitcast i8* %346 to i32**
  br label %507

430:                                              ; preds = %425
  %431 = bitcast i8* %387 to %class.SkTArray.18*
  %432 = bitcast i8* %387 to i32**
  %433 = bitcast i8* %304 to %class.SkTArray.15*
  %434 = bitcast i8* %304 to double**
  %435 = bitcast i8* %346 to %class.SkTArray.18*
  %436 = bitcast i8* %346 to i32**
  %437 = sext i32 %18 to i64
  %438 = zext i32 %300 to i64
  %439 = zext i32 %18 to i64
  br label %440

440:                                              ; preds = %502, %430
  %441 = phi i64 [ 0, %430 ], [ %447, %502 ]
  %442 = phi i64 [ 0, %430 ], [ %504, %502 ]
  %443 = phi i64 [ 1, %430 ], [ %505, %502 ]
  %444 = phi i32 [ 0, %430 ], [ %503, %502 ]
  %445 = getelementptr inbounds %class.SkOpPtT*, %class.SkOpPtT** %22, i64 %441
  %446 = load %class.SkOpPtT*, %class.SkOpPtT** %445, align 8
  %447 = add nuw nsw i64 %441, 1
  %448 = icmp slt i64 %447, %437
  br i1 %448, label %449, label %502

449:                                              ; preds = %440
  %450 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %446, i64 0, i32 1, i32 0
  %451 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %446, i64 0, i32 1, i32 1
  br label %452

452:                                              ; preds = %452, %449
  %453 = phi i64 [ %443, %449 ], [ %500, %452 ]
  %454 = phi i32 [ %444, %449 ], [ %490, %452 ]
  %455 = getelementptr inbounds %class.SkOpPtT*, %class.SkOpPtT** %22, i64 %453
  %456 = load %class.SkOpPtT*, %class.SkOpPtT** %455, align 8
  %457 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %456, i64 0, i32 1, i32 0
  %458 = load float, float* %457, align 8
  %459 = load float, float* %450, align 8
  %460 = fsub float %458, %459
  %461 = fpext float %460 to double
  %462 = getelementptr inbounds %class.SkOpPtT, %class.SkOpPtT* %456, i64 0, i32 1, i32 1
  %463 = load float, float* %462, align 4
  %464 = load float, float* %451, align 4
  %465 = fsub float %463, %464
  %466 = fpext float %465 to double
  %467 = fmul double %461, %461
  %468 = fmul double %466, %466
  %469 = fadd double %467, %468
  %470 = add nsw i64 %453, %442
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.18* %431, i32 1, i32 1) #7
  %471 = load i32*, i32** %432, align 8
  %472 = load i64, i64* %389, align 8
  %473 = lshr i64 %472, 1
  %474 = and i64 %473, 2147483647
  %475 = getelementptr inbounds i32, i32* %471, i64 %474
  %476 = add i64 %472, 2
  %477 = and i64 %476, 4294967294
  %478 = and i64 %472, -4294967295
  %479 = or i64 %477, %478
  store i64 %479, i64* %389, align 8
  %480 = trunc i64 %470 to i32
  store i32 %480, i32* %475, align 4
  call void @_ZN8SkTArrayIdLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.15* %433, i32 1, i32 1) #7
  %481 = load double*, double** %434, align 8
  %482 = load i64, i64* %306, align 8
  %483 = lshr i64 %482, 1
  %484 = and i64 %483, 2147483647
  %485 = getelementptr inbounds double, double* %481, i64 %484
  %486 = add i64 %482, 2
  %487 = and i64 %486, 4294967294
  %488 = and i64 %482, -4294967295
  %489 = or i64 %487, %488
  store i64 %489, i64* %306, align 8
  store double %469, double* %485, align 8
  %490 = add nsw i32 %454, 1
  call void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.18* %435, i32 1, i32 1) #7
  %491 = load i32*, i32** %436, align 8
  %492 = load i64, i64* %348, align 8
  %493 = lshr i64 %492, 1
  %494 = and i64 %493, 2147483647
  %495 = getelementptr inbounds i32, i32* %491, i64 %494
  %496 = add i64 %492, 2
  %497 = and i64 %496, 4294967294
  %498 = and i64 %492, -4294967295
  %499 = or i64 %497, %498
  store i64 %499, i64* %348, align 8
  store i32 %454, i32* %495, align 4
  %500 = add nuw nsw i64 %453, 1
  %501 = icmp eq i64 %500, %439
  br i1 %501, label %502, label %452

502:                                              ; preds = %452, %440
  %503 = phi i32 [ %444, %440 ], [ %490, %452 ]
  %504 = add nsw i64 %442, %437
  %505 = add nuw nsw i64 %443, 1
  %506 = icmp eq i64 %447, %438
  br i1 %506, label %507, label %440

507:                                              ; preds = %502, %428
  %508 = phi i32** [ %429, %428 ], [ %436, %502 ]
  %509 = load i32*, i32** %508, align 8
  %510 = icmp eq i32* %509, null
  br i1 %510, label %517, label %511

511:                                              ; preds = %507
  %512 = load i64, i64* %348, align 8
  %513 = lshr i64 %512, 1
  %514 = and i64 %513, 2147483647
  %515 = getelementptr inbounds i32, i32* %509, i64 %514
  %516 = ptrtoint i32* %515 to i64
  br label %517

517:                                              ; preds = %507, %511
  %518 = phi i64 [ %516, %511 ], [ 0, %507 ]
  %519 = bitcast %class.DistanceLessThan* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %519) #7
  %520 = bitcast i8* %304 to i64*
  %521 = load i64, i64* %520, align 8
  %522 = bitcast %class.DistanceLessThan* %13 to i64*
  store i64 %521, i64* %522, align 8
  %523 = ptrtoint i32* %509 to i64
  %524 = sub i64 %518, %523
  %525 = lshr exact i64 %524, 2
  %526 = trunc i64 %525 to i32
  %527 = icmp slt i32 %526, 2
  br i1 %527, label %533, label %528

528:                                              ; preds = %517
  %529 = add nsw i32 %526, -2
  %530 = call i32 @llvm.ctlz.i32(i32 %529, i1 false) #7, !range !14
  %531 = shl nuw nsw i32 %530, 1
  %532 = sub nsw i32 64, %531
  call void @_Z12SkTIntroSortIi16DistanceLessThanEviPT_iRKT0_(i32 %532, i32* %509, i32 %526, %class.DistanceLessThan* nonnull dereferenceable(8) %13) #7
  br label %533

533:                                              ; preds = %517, %528
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %519) #7
  br i1 %308, label %534, label %578

534:                                              ; preds = %533
  %535 = bitcast i8* %387 to i32**
  %536 = zext i32 %302 to i64
  br label %537

537:                                              ; preds = %574, %534
  %538 = phi i64 [ 0, %534 ], [ %576, %574 ]
  %539 = phi i32 [ %58, %534 ], [ %575, %574 ]
  %540 = load i32*, i32** %508, align 8
  %541 = getelementptr inbounds i32, i32* %540, i64 %538
  %542 = load i32, i32* %541, align 4
  %543 = load i32*, i32** %535, align 8
  %544 = sext i32 %542 to i64
  %545 = getelementptr inbounds i32, i32* %543, i64 %544
  %546 = load i32, i32* %545, align 4
  %547 = sdiv i32 %546, %18
  %548 = mul nsw i32 %547, %18
  %549 = sub nsw i32 %546, %548
  %550 = ashr i32 %547, 1
  %551 = and i32 %547, 1
  %552 = icmp eq i32 %551, 0
  %553 = select i1 %552, i32* %298, i32* %296
  %554 = sext i32 %550 to i64
  %555 = getelementptr inbounds i32, i32* %553, i64 %554
  %556 = load i32, i32* %555, align 4
  %557 = icmp eq i32 %556, 2147483647
  br i1 %557, label %558, label %574

558:                                              ; preds = %537
  %559 = ashr i32 %549, 1
  %560 = and i32 %549, 1
  %561 = icmp eq i32 %560, 0
  %562 = select i1 %561, i32* %298, i32* %296
  %563 = sext i32 %559 to i64
  %564 = getelementptr inbounds i32, i32* %562, i64 %563
  %565 = load i32, i32* %564, align 4
  %566 = icmp eq i32 %565, 2147483647
  br i1 %566, label %567, label %574

567:                                              ; preds = %558
  %568 = icmp eq i32 %551, %560
  %569 = sext i1 %568 to i32
  %570 = xor i32 %559, %569
  store i32 %570, i32* %555, align 4
  %571 = xor i32 %550, %569
  store i32 %571, i32* %564, align 4
  %572 = add nsw i32 %539, -1
  %573 = icmp eq i32 %572, 0
  br i1 %573, label %578, label %574

574:                                              ; preds = %537, %567, %558
  %575 = phi i32 [ %539, %558 ], [ %572, %567 ], [ %539, %537 ]
  %576 = add nuw nsw i64 %538, 1
  %577 = icmp eq i64 %576, %536
  br i1 %577, label %578, label %537

578:                                              ; preds = %567, %574, %533
  %579 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 1, i32 0
  %580 = bitcast %struct.SkPoint* %14 to i8*
  %581 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %14, i64 0, i32 0
  %582 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %14, i64 0, i32 1
  %583 = bitcast <2 x float>* %15 to i8*
  %584 = getelementptr inbounds <2 x float>, <2 x float>* %15, i64 0, i64 0
  %585 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %16, i64 0, i32 1
  %586 = getelementptr inbounds %class.SkPathWriter, %class.SkPathWriter* %0, i64 0, i32 3
  %587 = bitcast %class.SkMatrix* %4 to i8*
  %588 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 1
  %589 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 4
  %590 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 0, i64 8
  %591 = zext i32 %58 to i64
  %592 = bitcast %class.SkMatrix* %4 to <4 x float>*
  %593 = bitcast float* %589 to <4 x float>*
  br label %594

594:                                              ; preds = %706, %578
  %595 = phi i32 [ 0, %578 ], [ %707, %706 ]
  %596 = sext i32 %595 to i64
  %597 = getelementptr inbounds i32, i32* %298, i64 %596
  %598 = load i32, i32* %597, align 4
  store i32 2147483647, i32* %597, align 4
  %599 = icmp slt i32 %598, 0
  %600 = sext i32 %598 to i64
  %601 = getelementptr inbounds i32, i32* %296, i64 %600
  %602 = xor i32 %598, -1
  %603 = sext i32 %602 to i64
  %604 = getelementptr inbounds i32, i32* %298, i64 %603
  %605 = select i1 %599, i32* %604, i32* %601
  %606 = select i1 %599, i32* %604, i32* %601
  %607 = load i32, i32* %605, align 4
  store i32 2147483647, i32* %606, align 4
  br label %608

608:                                              ; preds = %680, %594
  %609 = phi i32 [ %595, %594 ], [ %689, %680 ]
  %610 = phi i8 [ 1, %594 ], [ %690, %680 ]
  %611 = phi i8 [ 1, %594 ], [ %655, %680 ]
  %612 = phi i32 [ %607, %594 ], [ %683, %680 ]
  %613 = load %class.SkPath*, %class.SkPath** %579, align 8
  %614 = sext i32 %609 to i64
  %615 = getelementptr inbounds %class.SkPath, %class.SkPath* %613, i64 %614
  %616 = and i8 %611, 1
  %617 = icmp ne i8 %616, 0
  br i1 %617, label %618, label %620

618:                                              ; preds = %608
  %619 = and i8 %610, 1
  br label %643

620:                                              ; preds = %608
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %580) #7
  store float 0xFFFFFFFFE0000000, float* %581, align 4
  store float 0xFFFFFFFFE0000000, float* %582, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %583) #7
  store float 0xFFFFFFFFE0000000, float* %584, align 8
  store float 0xFFFFFFFFE0000000, float* %585, align 4
  %621 = load %class.SkPath*, %class.SkPath** %586, align 8
  %622 = call zeroext i1 @_ZNK6SkPath9getLastPtEP7SkPoint(%class.SkPath* %621, %struct.SkPoint* nonnull %14) #7
  br i1 %622, label %623, label %642

623:                                              ; preds = %620
  %624 = and i8 %610, 1
  %625 = icmp eq i8 %624, 0
  br i1 %625, label %629, label %626

626:                                              ; preds = %623
  %627 = call <2 x float> @_ZNK6SkPath8getPointEi(%class.SkPath* %615, i32 0) #7
  store <2 x float> %627, <2 x float>* %15, align 8
  %628 = extractelement <2 x float> %627, i32 0
  br label %632

629:                                              ; preds = %623
  %630 = call zeroext i1 @_ZNK6SkPath9getLastPtEP7SkPoint(%class.SkPath* %615, %struct.SkPoint* nonnull %16) #7
  %631 = load float, float* %584, align 8
  br label %632

632:                                              ; preds = %629, %626
  %633 = phi float [ %631, %629 ], [ %628, %626 ]
  %634 = load float, float* %581, align 4
  %635 = fcmp une float %634, %633
  br i1 %635, label %640, label %636

636:                                              ; preds = %632
  %637 = load float, float* %582, align 4
  %638 = load float, float* %585, align 4
  %639 = fcmp une float %637, %638
  br i1 %639, label %640, label %641

640:                                              ; preds = %632, %636
  call void (i8*, i32, i8*, ...) @_Z17SkDebugf_FileLinePKciS0_z(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 367, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0)) #7
  br label %641

641:                                              ; preds = %640, %636
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %583) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %580) #7
  br label %643

642:                                              ; preds = %620
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %583) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %580) #7
  br label %709

643:                                              ; preds = %618, %641
  %644 = phi i8 [ %619, %618 ], [ %624, %641 ]
  %645 = icmp ne i8 %644, 0
  %646 = load %class.SkPath*, %class.SkPath** %586, align 8
  br i1 %645, label %647, label %652

647:                                              ; preds = %643
  %648 = xor i1 %617, true
  %649 = zext i1 %648 to i32
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %587) #7
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %592, align 16
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %593, align 16
  store float 1.000000e+00, float* %590, align 16
  store i32 16, i32* %588, align 4
  %650 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* nonnull %4) #7
  %651 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath7addPathERKS_RK8SkMatrixNS_11AddPathModeE(%class.SkPath* %646, %class.SkPath* dereferenceable(16) %615, %class.SkMatrix* nonnull dereferenceable(40) %4, i32 %649) #7
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %587) #7
  br label %654

652:                                              ; preds = %643
  %653 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath13reversePathToERKS_(%class.SkPath* %646, %class.SkPath* dereferenceable(16) %615) #7
  br label %654

654:                                              ; preds = %652, %647
  %655 = select i1 %617, i8 0, i8 %611
  %656 = icmp ne i32 %609, %612
  %657 = zext i1 %656 to i32
  %658 = zext i8 %644 to i32
  %659 = icmp eq i32 %657, %658
  %660 = sext i1 %659 to i32
  %661 = xor i32 %612, %660
  %662 = icmp eq i32 %598, %661
  br i1 %662, label %691, label %663

663:                                              ; preds = %654
  br i1 %645, label %664, label %672

664:                                              ; preds = %663
  %665 = getelementptr inbounds i32, i32* %296, i64 %614
  %666 = load i32, i32* %665, align 4
  store i32 2147483647, i32* %665, align 4
  %667 = icmp sgt i32 %666, -1
  %668 = xor i1 %667, true
  %669 = sext i1 %668 to i32
  %670 = xor i32 %666, %669
  %671 = select i1 %667, i32* %298, i32* %296
  br label %680

672:                                              ; preds = %663
  %673 = getelementptr inbounds i32, i32* %298, i64 %614
  %674 = load i32, i32* %673, align 4
  store i32 2147483647, i32* %673, align 4
  %675 = icmp sgt i32 %674, -1
  %676 = xor i1 %675, true
  %677 = sext i1 %676 to i32
  %678 = xor i32 %674, %677
  %679 = select i1 %675, i32* %296, i32* %298
  br label %680

680:                                              ; preds = %672, %664
  %681 = phi i32 [ %670, %664 ], [ %678, %672 ]
  %682 = phi i32* [ %671, %664 ], [ %679, %672 ]
  %683 = phi i32 [ %666, %664 ], [ %674, %672 ]
  %684 = sext i32 %681 to i64
  %685 = getelementptr inbounds i32, i32* %682, i64 %684
  store i32 2147483647, i32* %685, align 4
  %686 = icmp slt i32 %683, 0
  %687 = xor i8 %644, 1
  %688 = ashr i32 %683, 31
  %689 = xor i32 %688, %683
  %690 = select i1 %686, i8 %687, i8 %610
  br label %608

691:                                              ; preds = %654
  %692 = load %class.SkPath*, %class.SkPath** %586, align 8
  %693 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5closeEv(%class.SkPath* %692) #7
  br i1 %295, label %694, label %706

694:                                              ; preds = %691, %700
  %695 = phi i64 [ %701, %700 ], [ 0, %691 ]
  %696 = phi i32 [ %702, %700 ], [ 0, %691 ]
  %697 = getelementptr inbounds i32, i32* %298, i64 %695
  %698 = load i32, i32* %697, align 4
  %699 = icmp eq i32 %698, 2147483647
  br i1 %699, label %700, label %704

700:                                              ; preds = %694
  %701 = add nuw nsw i64 %695, 1
  %702 = add nuw nsw i32 %696, 1
  %703 = icmp eq i64 %701, %591
  br i1 %703, label %706, label %694

704:                                              ; preds = %694
  %705 = trunc i64 %695 to i32
  br label %706

706:                                              ; preds = %700, %704, %691
  %707 = phi i32 [ 0, %691 ], [ %705, %704 ], [ %702, %700 ]
  %708 = icmp slt i32 %707, %58
  br i1 %708, label %594, label %709

709:                                              ; preds = %706, %642
  %710 = load i64, i64* %389, align 8
  %711 = and i64 %710, 1
  %712 = icmp eq i64 %711, 0
  br i1 %712, label %715, label %713

713:                                              ; preds = %709
  %714 = load i8*, i8** %390, align 8
  call void @_Z7sk_freePv(i8* %714) #7
  br label %715

715:                                              ; preds = %709, %713
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %386) #7
  %716 = load i64, i64* %348, align 8
  %717 = and i64 %716, 1
  %718 = icmp eq i64 %717, 0
  br i1 %718, label %721, label %719

719:                                              ; preds = %715
  %720 = load i8*, i8** %349, align 8
  call void @_Z7sk_freePv(i8* %720) #7
  br label %721

721:                                              ; preds = %715, %719
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %345) #7
  %722 = load i64, i64* %306, align 8
  %723 = and i64 %722, 1
  %724 = icmp eq i64 %723, 0
  br i1 %724, label %727, label %725

725:                                              ; preds = %721
  %726 = load i8*, i8** %307, align 8
  call void @_Z7sk_freePv(i8* %726) #7
  br label %727

727:                                              ; preds = %721, %725
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %303) #7
  call void @_Z7sk_freePv(i8* %297) #7
  call void @_Z7sk_freePv(i8* %299) #7
  br label %728

728:                                              ; preds = %1, %727
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare zeroext i1 @_ZNK11SkOpSegment10addCurveToEPK12SkOpSpanBaseS2_P12SkPathWriter(%class.SkOpSegment*, %class.SkOpSpanBase*, %class.SkOpSpanBase*, %class.SkPathWriter*) local_unnamed_addr #1

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath14reverseAddPathERKS_(%class.SkPath*, %class.SkPath* dereferenceable(16)) local_unnamed_addr #1

declare dereferenceable(16) %class.SkPath* @_ZN6SkPathaSERKS_(%class.SkPath*, %class.SkPath* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN6SkPathD1Ev(%class.SkPath*) unnamed_addr #4

declare zeroext i1 @_ZNK6SkPath9getLastPtEP7SkPoint(%class.SkPath*, %struct.SkPoint*) local_unnamed_addr #1

declare <2 x float> @_ZNK6SkPath8getPointEi(%class.SkPath*, i32) local_unnamed_addr #1

declare void @_Z17SkDebugf_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #1

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath13reversePathToERKS_(%class.SkPath*, %class.SkPath* dereferenceable(16)) local_unnamed_addr #1

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix*) local_unnamed_addr #1

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath7addPathERKS_RK8SkMatrixNS_11AddPathModeE(%class.SkPath*, %class.SkPath* dereferenceable(16), %class.SkMatrix* dereferenceable(40), i32) local_unnamed_addr #1

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath7conicToEfffff(%class.SkPath*, float, float, float, float, float) local_unnamed_addr #1

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath7cubicToEffffff(%class.SkPath*, float, float, float, float, float, float) local_unnamed_addr #1

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath6lineToEff(%class.SkPath*, float, float) local_unnamed_addr #1

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath*, float, float) local_unnamed_addr #1

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath6quadToEffff(%class.SkPath*, float, float, float, float) local_unnamed_addr #1

declare %class.SkOpSegment* @_ZNK11SkOpSegment9nextChaseEPP12SkOpSpanBasePiPP8SkOpSpanS2_(%class.SkOpSegment*, %class.SkOpSpanBase**, i32*, %class.SkOpSpan**, %class.SkOpSpanBase**) local_unnamed_addr #1

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #1

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_Z16SkAbort_FileLinePKciS0_z(i8*, i32, i8*, ...) local_unnamed_addr #5

declare i8* @_Z16sk_realloc_throwPvm(i8*, i64) local_unnamed_addr #1

declare void @_ZN6SkPathC1ERKS_(%class.SkPath*, %class.SkPath* dereferenceable(16)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayI6SkPathLb0EE12checkReallocEiNS1_11ReallocTypeE(%class.SkTArray*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %76

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %76, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 16) #7
  %45 = load i64, i64* %4, align 8
  %46 = and i64 %45, 4294967294
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %64, label %48

48:                                               ; preds = %35
  %49 = getelementptr inbounds %class.SkTArray, %class.SkTArray* %0, i64 0, i32 0
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %59, %50 ]
  %52 = shl nuw nsw i64 %51, 4
  %53 = getelementptr inbounds i8, i8* %44, i64 %52
  %54 = bitcast i8* %53 to %class.SkPath*
  %55 = load %class.SkPath*, %class.SkPath** %49, align 8
  %56 = getelementptr inbounds %class.SkPath, %class.SkPath* %55, i64 %51
  tail call void @_ZN6SkPathC1ERKS_(%class.SkPath* %54, %class.SkPath* dereferenceable(16) %56) #7
  %57 = load %class.SkPath*, %class.SkPath** %49, align 8
  %58 = getelementptr inbounds %class.SkPath, %class.SkPath* %57, i64 %51
  tail call void @_ZN6SkPathD1Ev(%class.SkPath* %58) #7
  %59 = add nuw nsw i64 %51, 1
  %60 = load i64, i64* %4, align 8
  %61 = lshr i64 %60, 1
  %62 = and i64 %61, 2147483647
  %63 = icmp ult i64 %59, %62
  br i1 %63, label %50, label %64

64:                                               ; preds = %50, %35
  %65 = phi i64 [ %45, %35 ], [ %60, %50 ]
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  %68 = bitcast %class.SkTArray* %0 to i8**
  br i1 %67, label %72, label %69

69:                                               ; preds = %64
  %70 = load i8*, i8** %68, align 8
  tail call void @_Z7sk_freePv(i8* %70) #7
  %71 = load i64, i64* %4, align 8
  br label %72

72:                                               ; preds = %64, %69
  %73 = phi i64 [ %71, %69 ], [ %65, %64 ]
  store i8* %44, i8** %68, align 8
  %74 = and i64 %73, -4294967298
  %75 = or i64 %74, 1
  store i64 %75, i64* %4, align 8
  br label %76

76:                                               ; preds = %72, %32, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayIdLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.15*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray.15, %class.SkTArray.15* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %65

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %65, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 8) #7
  %45 = load i64, i64* %4, align 8
  %46 = shl i64 %45, 2
  %47 = and i64 %46, 17179869176
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %35
  %50 = bitcast %class.SkTArray.15* %0 to i8**
  %51 = load i8*, i8** %50, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %51, i64 %47, i1 false) #7
  %52 = load i64, i64* %4, align 8
  br label %53

53:                                               ; preds = %35, %49
  %54 = phi i64 [ %45, %35 ], [ %52, %49 ]
  %55 = and i64 %54, 1
  %56 = icmp eq i64 %55, 0
  %57 = bitcast %class.SkTArray.15* %0 to i8**
  br i1 %56, label %61, label %58

58:                                               ; preds = %53
  %59 = load i8*, i8** %57, align 8
  tail call void @_Z7sk_freePv(i8* %59) #7
  %60 = load i64, i64* %4, align 8
  br label %61

61:                                               ; preds = %53, %58
  %62 = phi i64 [ %60, %58 ], [ %54, %53 ]
  store i8* %44, i8** %57, align 8
  %63 = and i64 %62, -4294967298
  %64 = or i64 %63, 1
  store i64 %64, i64* %4, align 8
  br label %65

65:                                               ; preds = %61, %32, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkTArrayIiLb1EE12checkReallocEiNS0_11ReallocTypeE(%class.SkTArray.18*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %class.SkTArray.18, %class.SkTArray.18* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 1
  %7 = trunc i64 %6 to i32
  %8 = and i32 %7, 2147483647
  %9 = add nsw i32 %8, %1
  %10 = sext i32 %9 to i64
  %11 = lshr i64 %5, 33
  %12 = icmp slt i64 %11, %10
  %13 = mul nsw i64 %10, 3
  %14 = icmp sle i64 %11, %13
  %15 = and i64 %5, 1
  %16 = icmp eq i64 %15, 0
  %17 = or i1 %16, %14
  br i1 %17, label %21, label %18

18:                                               ; preds = %3
  %19 = and i64 %5, 4294967296
  %20 = icmp eq i64 %19, 0
  br label %21

21:                                               ; preds = %3, %18
  %22 = phi i1 [ false, %3 ], [ %20, %18 ]
  %23 = or i1 %12, %22
  br i1 %23, label %24, label %65

24:                                               ; preds = %21
  %25 = icmp eq i32 %2, 0
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = add nsw i64 %10, 1
  %28 = ashr i64 %27, 1
  %29 = add nsw i64 %10, 7
  %30 = add nsw i64 %29, %28
  %31 = and i64 %30, -8
  br label %32

32:                                               ; preds = %24, %26
  %33 = phi i64 [ %31, %26 ], [ %10, %24 ]
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %65, label %35

35:                                               ; preds = %32
  %36 = icmp slt i64 %33, 2147483647
  %37 = select i1 %36, i64 %33, i64 2147483647
  %38 = icmp sgt i64 %37, -2147483647
  %39 = select i1 %38, i64 %37, i64 -2147483647
  %40 = shl i64 %39, 33
  %41 = and i64 %5, 8589934591
  %42 = or i64 %40, %41
  store i64 %42, i64* %4, align 8
  %43 = and i64 %39, 2147483647
  %44 = tail call i8* @_Z15sk_malloc_throwmm(i64 %43, i64 4) #7
  %45 = load i64, i64* %4, align 8
  %46 = shl i64 %45, 1
  %47 = and i64 %46, 8589934588
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %35
  %50 = bitcast %class.SkTArray.18* %0 to i8**
  %51 = load i8*, i8** %50, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %44, i8* align 1 %51, i64 %47, i1 false) #7
  %52 = load i64, i64* %4, align 8
  br label %53

53:                                               ; preds = %35, %49
  %54 = phi i64 [ %45, %35 ], [ %52, %49 ]
  %55 = and i64 %54, 1
  %56 = icmp eq i64 %55, 0
  %57 = bitcast %class.SkTArray.18* %0 to i8**
  br i1 %56, label %61, label %58

58:                                               ; preds = %53
  %59 = load i8*, i8** %57, align 8
  tail call void @_Z7sk_freePv(i8* %59) #7
  %60 = load i64, i64* %4, align 8
  br label %61

61:                                               ; preds = %53, %58
  %62 = phi i64 [ %60, %58 ], [ %54, %53 ]
  store i8* %44, i8** %57, align 8
  %63 = and i64 %62, -4294967298
  %64 = or i64 %63, 1
  store i64 %64, i64* %4, align 8
  br label %65

65:                                               ; preds = %61, %32, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z12SkTIntroSortIi16DistanceLessThanEviPT_iRKT0_(i32, i32*, i32, %class.DistanceLessThan* dereferenceable(8)) local_unnamed_addr #0 comdat {
  %5 = icmp slt i32 %2, 33
  br i1 %5, label %8, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %class.DistanceLessThan, %class.DistanceLessThan* %3, i64 0, i32 0
  br label %50

8:                                                ; preds = %122, %4
  %9 = phi i32 [ %2, %4 ], [ %134, %122 ]
  %10 = phi i32* [ %1, %4 ], [ %133, %122 ]
  %11 = sext i32 %9 to i64
  %12 = add nsw i64 %11, -1
  %13 = getelementptr inbounds i32, i32* %10, i64 %12
  %14 = icmp slt i32 %9, 2
  br i1 %14, label %136, label %15

15:                                               ; preds = %8
  %16 = getelementptr inbounds i32, i32* %10, i64 1
  %17 = getelementptr inbounds %class.DistanceLessThan, %class.DistanceLessThan* %3, i64 0, i32 0
  br label %18

18:                                               ; preds = %47, %15
  %19 = phi i32* [ %16, %15 ], [ %48, %47 ]
  %20 = phi i32* [ %10, %15 ], [ %19, %47 ]
  %21 = load i32, i32* %19, align 4
  %22 = load i32, i32* %20, align 4
  %23 = load double*, double** %17, align 8
  %24 = sext i32 %21 to i64
  %25 = getelementptr inbounds double, double* %23, i64 %24
  %26 = load double, double* %25, align 8
  %27 = sext i32 %22 to i64
  %28 = getelementptr inbounds double, double* %23, i64 %27
  %29 = load double, double* %28, align 8
  %30 = fcmp olt double %26, %29
  br i1 %30, label %31, label %47

31:                                               ; preds = %18, %36
  %32 = phi i32* [ %33, %36 ], [ %19, %18 ]
  %33 = getelementptr inbounds i32, i32* %32, i64 -1
  %34 = load i32, i32* %33, align 4
  store i32 %34, i32* %32, align 4
  %35 = icmp ugt i32* %33, %10
  br i1 %35, label %36, label %46

36:                                               ; preds = %31
  %37 = getelementptr inbounds i32, i32* %32, i64 -2
  %38 = load i32, i32* %37, align 4
  %39 = load double*, double** %17, align 8
  %40 = getelementptr inbounds double, double* %39, i64 %24
  %41 = load double, double* %40, align 8
  %42 = sext i32 %38 to i64
  %43 = getelementptr inbounds double, double* %39, i64 %42
  %44 = load double, double* %43, align 8
  %45 = fcmp olt double %41, %44
  br i1 %45, label %31, label %46

46:                                               ; preds = %36, %31
  store i32 %21, i32* %33, align 4
  br label %47

47:                                               ; preds = %46, %18
  %48 = getelementptr inbounds i32, i32* %19, i64 1
  %49 = icmp ugt i32* %48, %13
  br i1 %49, label %136, label %18

50:                                               ; preds = %6, %122
  %51 = phi i32 [ %0, %6 ], [ %58, %122 ]
  %52 = phi i32* [ %1, %6 ], [ %133, %122 ]
  %53 = phi i32 [ %2, %6 ], [ %134, %122 ]
  %54 = icmp eq i32 %51, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %50
  %56 = sext i32 %53 to i64
  tail call void @_Z11SkTHeapSortIi16DistanceLessThanEvPT_mRKT0_(i32* %52, i64 %56, %class.DistanceLessThan* dereferenceable(8) %3)
  br label %136

57:                                               ; preds = %50
  %58 = add nsw i32 %51, -1
  %59 = add nsw i32 %53, -1
  %60 = ashr i32 %59, 1
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i32, i32* %52, i64 %61
  %63 = sext i32 %53 to i64
  %64 = getelementptr inbounds i32, i32* %52, i64 -1
  %65 = getelementptr inbounds i32, i32* %64, i64 %63
  %66 = load i32, i32* %62, align 4
  %67 = load i32, i32* %65, align 4
  store i32 %67, i32* %62, align 4
  store i32 %66, i32* %65, align 4
  %68 = icmp ugt i32* %65, %52
  br i1 %68, label %69, label %122

69:                                               ; preds = %57
  %70 = sext i32 %66 to i64
  %71 = shl nsw i64 %63, 2
  %72 = add nsw i64 %71, -5
  %73 = and i64 %72, 4
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %89

75:                                               ; preds = %69
  %76 = load i32, i32* %52, align 4
  %77 = load double*, double** %7, align 8
  %78 = sext i32 %76 to i64
  %79 = getelementptr inbounds double, double* %77, i64 %78
  %80 = load double, double* %79, align 8
  %81 = getelementptr inbounds double, double* %77, i64 %70
  %82 = load double, double* %81, align 8
  %83 = fcmp olt double %80, %82
  br i1 %83, label %84, label %86

84:                                               ; preds = %75
  store i32 %76, i32* %52, align 4
  %85 = getelementptr inbounds i32, i32* %52, i64 1
  br label %86

86:                                               ; preds = %84, %75
  %87 = phi i32* [ %85, %84 ], [ %52, %75 ]
  %88 = getelementptr inbounds i32, i32* %52, i64 1
  br label %89

89:                                               ; preds = %86, %69
  %90 = phi i32* [ %87, %86 ], [ %52, %69 ]
  %91 = phi i32* [ %88, %86 ], [ %52, %69 ]
  %92 = phi i32* [ %87, %86 ], [ undef, %69 ]
  %93 = icmp eq i64 %72, 3
  br i1 %93, label %119, label %94

94:                                               ; preds = %89, %140
  %95 = phi i32* [ %141, %140 ], [ %90, %89 ]
  %96 = phi i32* [ %142, %140 ], [ %91, %89 ]
  %97 = load i32, i32* %96, align 4
  %98 = load double*, double** %7, align 8
  %99 = sext i32 %97 to i64
  %100 = getelementptr inbounds double, double* %98, i64 %99
  %101 = load double, double* %100, align 8
  %102 = getelementptr inbounds double, double* %98, i64 %70
  %103 = load double, double* %102, align 8
  %104 = fcmp olt double %101, %103
  br i1 %104, label %105, label %108

105:                                              ; preds = %94
  %106 = load i32, i32* %95, align 4
  store i32 %106, i32* %96, align 4
  store i32 %97, i32* %95, align 4
  %107 = getelementptr inbounds i32, i32* %95, i64 1
  br label %108

108:                                              ; preds = %105, %94
  %109 = phi i32* [ %107, %105 ], [ %95, %94 ]
  %110 = getelementptr inbounds i32, i32* %96, i64 1
  %111 = load i32, i32* %110, align 4
  %112 = load double*, double** %7, align 8
  %113 = sext i32 %111 to i64
  %114 = getelementptr inbounds double, double* %112, i64 %113
  %115 = load double, double* %114, align 8
  %116 = getelementptr inbounds double, double* %112, i64 %70
  %117 = load double, double* %116, align 8
  %118 = fcmp olt double %115, %117
  br i1 %118, label %137, label %140

119:                                              ; preds = %140, %89
  %120 = phi i32* [ %92, %89 ], [ %141, %140 ]
  %121 = load i32, i32* %65, align 4
  br label %122

122:                                              ; preds = %57, %119
  %123 = phi i32 [ %66, %57 ], [ %121, %119 ]
  %124 = phi i32* [ %52, %57 ], [ %120, %119 ]
  %125 = load i32, i32* %124, align 4
  store i32 %123, i32* %124, align 4
  store i32 %125, i32* %65, align 4
  %126 = ptrtoint i32* %124 to i64
  %127 = ptrtoint i32* %52 to i64
  %128 = sub i64 %126, %127
  %129 = lshr exact i64 %128, 2
  %130 = trunc i64 %129 to i32
  tail call void @_Z12SkTIntroSortIi16DistanceLessThanEviPT_iRKT0_(i32 %58, i32* %52, i32 %130, %class.DistanceLessThan* dereferenceable(8) %3)
  %131 = add nsw i32 %130, 1
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds i32, i32* %52, i64 %132
  %134 = sub nsw i32 %53, %131
  %135 = icmp slt i32 %134, 33
  br i1 %135, label %8, label %50

136:                                              ; preds = %47, %8, %55
  ret void

137:                                              ; preds = %108
  %138 = load i32, i32* %109, align 4
  store i32 %138, i32* %110, align 4
  store i32 %111, i32* %109, align 4
  %139 = getelementptr inbounds i32, i32* %109, i64 1
  br label %140

140:                                              ; preds = %137, %108
  %141 = phi i32* [ %139, %137 ], [ %109, %108 ]
  %142 = getelementptr inbounds i32, i32* %96, i64 2
  %143 = icmp ult i32* %142, %65
  br i1 %143, label %94, label %119
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z11SkTHeapSortIi16DistanceLessThanEvPT_mRKT0_(i32*, i64, %class.DistanceLessThan* dereferenceable(8)) local_unnamed_addr #0 comdat {
  %4 = lshr i64 %1, 1
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %class.DistanceLessThan, %class.DistanceLessThan* %2, i64 0, i32 0
  br label %13

8:                                                ; preds = %61, %3
  %9 = add i64 %1, -1
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %65, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %class.DistanceLessThan, %class.DistanceLessThan* %2, i64 0, i32 0
  br label %66

13:                                               ; preds = %6, %61
  %14 = phi i64 [ %4, %6 ], [ %15, %61 ]
  %15 = add nsw i64 %14, -1
  %16 = getelementptr inbounds i32, i32* %0, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = shl i64 %14, 1
  %19 = icmp ugt i64 %18, %1
  br i1 %19, label %61, label %20

20:                                               ; preds = %13
  %21 = sext i32 %17 to i64
  br label %22

22:                                               ; preds = %57, %20
  %23 = phi i64 [ %18, %20 ], [ %59, %57 ]
  %24 = phi i64 [ %14, %20 ], [ %46, %57 ]
  %25 = icmp ult i64 %23, %1
  br i1 %25, label %28, label %26

26:                                               ; preds = %22
  %27 = load double*, double** %7, align 8
  br label %44

28:                                               ; preds = %22
  %29 = add i64 %23, -1
  %30 = getelementptr inbounds i32, i32* %0, i64 %29
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds i32, i32* %0, i64 %23
  %33 = load i32, i32* %32, align 4
  %34 = load double*, double** %7, align 8
  %35 = sext i32 %31 to i64
  %36 = getelementptr inbounds double, double* %34, i64 %35
  %37 = load double, double* %36, align 8
  %38 = sext i32 %33 to i64
  %39 = getelementptr inbounds double, double* %34, i64 %38
  %40 = load double, double* %39, align 8
  %41 = fcmp olt double %37, %40
  %42 = zext i1 %41 to i64
  %43 = or i64 %23, %42
  br label %44

44:                                               ; preds = %28, %26
  %45 = phi double* [ %27, %26 ], [ %34, %28 ]
  %46 = phi i64 [ %23, %26 ], [ %43, %28 ]
  %47 = add i64 %46, -1
  %48 = getelementptr inbounds i32, i32* %0, i64 %47
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds double, double* %45, i64 %21
  %51 = load double, double* %50, align 8
  %52 = sext i32 %49 to i64
  %53 = getelementptr inbounds double, double* %45, i64 %52
  %54 = load double, double* %53, align 8
  %55 = fcmp olt double %51, %54
  %56 = add i64 %24, -1
  br i1 %55, label %57, label %61

57:                                               ; preds = %44
  %58 = getelementptr inbounds i32, i32* %0, i64 %56
  store i32 %49, i32* %58, align 4
  %59 = shl i64 %46, 1
  %60 = icmp ugt i64 %59, %1
  br i1 %60, label %61, label %22

61:                                               ; preds = %44, %57, %13
  %62 = phi i64 [ %15, %13 ], [ %56, %44 ], [ %47, %57 ]
  %63 = getelementptr inbounds i32, i32* %0, i64 %62
  store i32 %17, i32* %63, align 4
  %64 = icmp eq i64 %15, 0
  br i1 %64, label %8, label %13

65:                                               ; preds = %66, %125, %8
  ret void

66:                                               ; preds = %11, %125
  %67 = phi i64 [ %9, %11 ], [ %129, %125 ]
  %68 = getelementptr inbounds i32, i32* %0, i64 %67
  %69 = load i32, i32* %0, align 4
  %70 = load i32, i32* %68, align 4
  store i32 %70, i32* %0, align 4
  store i32 %69, i32* %68, align 4
  %71 = load i32, i32* %0, align 4
  %72 = icmp eq i64 %67, 1
  br i1 %72, label %65, label %78

73:                                               ; preds = %98
  %74 = lshr i64 %99, 1
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %125, label %76

76:                                               ; preds = %73
  %77 = sext i32 %71 to i64
  br label %107

78:                                               ; preds = %66, %98
  %79 = phi i64 [ %105, %98 ], [ 2, %66 ]
  %80 = phi i64 [ %99, %98 ], [ 1, %66 ]
  %81 = icmp ult i64 %79, %67
  br i1 %81, label %82, label %98

82:                                               ; preds = %78
  %83 = add i64 %79, -1
  %84 = getelementptr inbounds i32, i32* %0, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = getelementptr inbounds i32, i32* %0, i64 %79
  %87 = load i32, i32* %86, align 4
  %88 = load double*, double** %12, align 8
  %89 = sext i32 %85 to i64
  %90 = getelementptr inbounds double, double* %88, i64 %89
  %91 = load double, double* %90, align 8
  %92 = sext i32 %87 to i64
  %93 = getelementptr inbounds double, double* %88, i64 %92
  %94 = load double, double* %93, align 8
  %95 = fcmp olt double %91, %94
  %96 = zext i1 %95 to i64
  %97 = or i64 %79, %96
  br label %98

98:                                               ; preds = %82, %78
  %99 = phi i64 [ %79, %78 ], [ %97, %82 ]
  %100 = add i64 %99, -1
  %101 = getelementptr inbounds i32, i32* %0, i64 %100
  %102 = load i32, i32* %101, align 4
  %103 = add i64 %80, -1
  %104 = getelementptr inbounds i32, i32* %0, i64 %103
  store i32 %102, i32* %104, align 4
  %105 = shl i64 %99, 1
  %106 = icmp ugt i64 %105, %67
  br i1 %106, label %73, label %78

107:                                              ; preds = %120, %76
  %108 = phi i64 [ %74, %76 ], [ %123, %120 ]
  %109 = phi i64 [ %99, %76 ], [ %108, %120 ]
  %110 = add nsw i64 %108, -1
  %111 = getelementptr inbounds i32, i32* %0, i64 %110
  %112 = load i32, i32* %111, align 4
  %113 = load double*, double** %12, align 8
  %114 = sext i32 %112 to i64
  %115 = getelementptr inbounds double, double* %113, i64 %114
  %116 = load double, double* %115, align 8
  %117 = getelementptr inbounds double, double* %113, i64 %77
  %118 = load double, double* %117, align 8
  %119 = fcmp olt double %116, %118
  br i1 %119, label %120, label %125

120:                                              ; preds = %107
  %121 = add i64 %109, -1
  %122 = getelementptr inbounds i32, i32* %0, i64 %121
  store i32 %112, i32* %122, align 4
  %123 = lshr i64 %108, 1
  %124 = icmp eq i64 %123, 0
  br i1 %124, label %125, label %107

125:                                              ; preds = %107, %120, %73
  %126 = phi i64 [ %99, %73 ], [ %109, %107 ], [ %108, %120 ]
  %127 = add i64 %126, -1
  %128 = getelementptr inbounds i32, i32* %0, i64 %127
  store i32 %71, i32* %128, align 4
  %129 = add i64 %67, -1
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %65, label %66
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !3}
!12 = !{i8 0, i8 2}
!13 = distinct !{!13, !10}
!14 = !{i32 0, i32 33}
