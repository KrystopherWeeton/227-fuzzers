; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/decoder/vp9_decodemv.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/decoder/vp9_decodemv.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.position = type { i32, i32 }
%struct.TileWorkerData = type { i8*, i32, i32, %struct.vpx_reader, %struct.FRAME_COUNTS, %struct.LoopFilterWorkerData*, %struct.VP9LfSyncData*, [8 x i8], %struct.macroblockd, [1024 x i32], [25600 x i16], %struct.vpx_internal_error_info, [8 x i8] }
%struct.vpx_reader = type { i64, i32, i32, i8*, i8*, void (i8*, i8*, i8*, i32)*, i8*, [9 x i8] }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.VP9Common*, [3 x %struct.macroblockd_plane], i32, i32, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%union.int_mv = type { i32 }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.buf_2d = type { i8*, i32 }
%struct.VP9LfSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, %struct.LoopFilterWorkerData*, i32, i32, %union.pthread_mutex_t*, %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.0, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.VP9Decoder = type { %struct.macroblockd, %struct.VP9Common, i32, i32, %struct.RefCntBuffer*, %struct.VPxWorker, %struct.VPxWorker*, %struct.TileWorkerData*, [64 x %struct.TileBuffer], i32, i32, %struct.VP9LfSyncData, void (i8*, i8*, i8*, i32)*, i8*, i32, i32, i32, i32, i32, i32, %struct.RowMTWorkerData* }
%struct.VPxWorker = type { %struct.VPxWorkerImpl*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VPxWorkerImpl = type opaque
%struct.TileBuffer = type { i8*, i64, i32 }
%struct.RowMTWorkerData = type { i32, [3 x i32*], i32*, [3 x i32*], i8*, i8*, i8*, %struct.JobQueueRowMt, i64, i32, i32, %union.pthread_mutex_t, %union.pthread_mutex_t*, %union.pthread_cond_t*, %struct.ThreadData* }
%struct.JobQueueRowMt = type { i8*, i8*, i8*, i8*, i32, %union.pthread_mutex_t, %union.pthread_cond_t }
%struct.ThreadData = type { %struct.VP9Decoder*, %struct.LoopFilterWorkerData*, %struct.VP9LfSyncData* }
%struct.mv = type { i16, i16 }

@vp9_kf_uv_mode_prob = external local_unnamed_addr constant [10 x [9 x i8]], align 16
@vp9_segment_tree = external local_unnamed_addr constant [14 x i8], align 1
@vpx_norm = external local_unnamed_addr constant [256 x i8], align 16
@max_txsize_lookup = external local_unnamed_addr constant [13 x i8], align 1
@tx_mode_to_biggest_tx_size = external local_unnamed_addr constant [5 x i8], align 1
@vp9_intra_mode_tree = external local_unnamed_addr constant [18 x i8], align 16
@vp9_kf_y_mode_prob = external local_unnamed_addr constant [10 x [10 x [9 x i8]]], align 16
@mv_ref_blocks = internal constant [13 x [8 x %struct.position]] [[8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -2, i32 0 }, %struct.position { i32 0, i32 -2 }, %struct.position { i32 -2, i32 -1 }, %struct.position { i32 -1, i32 -2 }, %struct.position { i32 -2, i32 -2 }], [8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -2, i32 0 }, %struct.position { i32 0, i32 -2 }, %struct.position { i32 -2, i32 -1 }, %struct.position { i32 -1, i32 -2 }, %struct.position { i32 -2, i32 -2 }], [8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -2, i32 0 }, %struct.position { i32 0, i32 -2 }, %struct.position { i32 -2, i32 -1 }, %struct.position { i32 -1, i32 -2 }, %struct.position { i32 -2, i32 -2 }], [8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -2, i32 0 }, %struct.position { i32 0, i32 -2 }, %struct.position { i32 -2, i32 -1 }, %struct.position { i32 -1, i32 -2 }, %struct.position { i32 -2, i32 -2 }], [8 x %struct.position] [%struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 0 }, %struct.position { i32 1, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 0, i32 -2 }, %struct.position { i32 -2, i32 0 }, %struct.position { i32 -2, i32 -1 }, %struct.position { i32 -1, i32 -2 }], [8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -2, i32 0 }, %struct.position { i32 0, i32 -2 }, %struct.position { i32 -1, i32 -2 }, %struct.position { i32 -2, i32 -1 }], [8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 1 }, %struct.position { i32 1, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -3, i32 0 }, %struct.position { i32 0, i32 -3 }, %struct.position { i32 -3, i32 -3 }], [8 x %struct.position] [%struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 0 }, %struct.position { i32 2, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -1, i32 1 }, %struct.position { i32 0, i32 -3 }, %struct.position { i32 -3, i32 0 }, %struct.position { i32 -3, i32 -3 }], [8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 2 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 1, i32 -1 }, %struct.position { i32 -3, i32 0 }, %struct.position { i32 0, i32 -3 }, %struct.position { i32 -3, i32 -3 }], [8 x %struct.position] [%struct.position { i32 -1, i32 1 }, %struct.position { i32 1, i32 -1 }, %struct.position { i32 -1, i32 2 }, %struct.position { i32 2, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -3, i32 0 }, %struct.position { i32 0, i32 -3 }, %struct.position { i32 -3, i32 -3 }], [8 x %struct.position] [%struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 0 }, %struct.position { i32 4, i32 -1 }, %struct.position { i32 -1, i32 2 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 0, i32 -3 }, %struct.position { i32 -3, i32 0 }, %struct.position { i32 2, i32 -1 }], [8 x %struct.position] [%struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 4 }, %struct.position { i32 2, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -3, i32 0 }, %struct.position { i32 0, i32 -3 }, %struct.position { i32 -1, i32 2 }], [8 x %struct.position] [%struct.position { i32 -1, i32 3 }, %struct.position { i32 3, i32 -1 }, %struct.position { i32 -1, i32 4 }, %struct.position { i32 4, i32 -1 }, %struct.position { i32 -1, i32 -1 }, %struct.position { i32 -1, i32 0 }, %struct.position { i32 0, i32 -1 }, %struct.position { i32 -1, i32 6 }]], align 16
@.str = private unnamed_addr constant [50 x i8] c"Invalid usage of segement feature on small blocks\00", align 1
@mode_2_counter = internal unnamed_addr constant [14 x i32] [i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 0, i32 0, i32 3, i32 1], align 16
@counter_to_context = internal unnamed_addr constant [19 x i32] [i32 2, i32 3, i32 4, i32 1, i32 3, i32 9, i32 0, i32 9, i32 9, i32 5, i32 5, i32 9, i32 5, i32 9, i32 9, i32 9, i32 9, i32 9, i32 6], align 16
@vp9_inter_mode_tree = external local_unnamed_addr constant [6 x i8], align 1
@vp9_switchable_interp_tree = external local_unnamed_addr constant [4 x i8], align 1
@idx_n_column_to_subblock = internal unnamed_addr constant [4 x [2 x i32]] [[2 x i32] [i32 1, i32 2], [2 x i32] [i32 1, i32 3], [2 x i32] [i32 3, i32 2], [2 x i32] [i32 3, i32 3]], align 16
@vp9_mv_joint_tree = external local_unnamed_addr constant [0 x i8], align 1
@vp9_mv_class_tree = external local_unnamed_addr constant [0 x i8], align 1
@vp9_mv_fp_tree = external local_unnamed_addr constant [0 x i8], align 1
@size_group_lookup = external local_unnamed_addr constant [13 x i8], align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_read_mode_info(%struct.TileWorkerData*, %struct.VP9Decoder*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %7 = alloca [2 x %union.int_mv], align 4
  %8 = alloca i64, align 8
  %9 = alloca [2 x %union.int_mv], align 4
  %10 = alloca [2 x %union.int_mv], align 4
  %11 = alloca [2 x %union.int_mv], align 4
  %12 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3
  %13 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8
  %14 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1
  %15 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 6
  %16 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %15, align 8
  %17 = load %struct.MODE_INFO*, %struct.MODE_INFO** %16, align 8
  %18 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 14
  %19 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %18, align 8
  %20 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %19, i64 0, i32 1
  %21 = load %struct.MV_REF*, %struct.MV_REF** %20, align 8
  %22 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 35
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 23
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %6
  %28 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 27
  %29 = load i8, i8* %28, align 4
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %699, label %31

31:                                               ; preds = %6, %27
  %32 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 8
  %33 = load %struct.MODE_INFO*, %struct.MODE_INFO** %32, align 8
  %34 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 7
  %35 = load %struct.MODE_INFO*, %struct.MODE_INFO** %34, align 8
  %36 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 0
  %37 = load i8, i8* %36, align 4
  %38 = mul nsw i32 %23, %2
  %39 = add nsw i32 %38, %3
  %40 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 69, i32 0
  %41 = load i8, i8* %40, align 4
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %200, label %43

43:                                               ; preds = %31
  %44 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 69, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %47, label %100

47:                                               ; preds = %43
  %48 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 60
  %49 = load i8*, i8** %48, align 16
  %50 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 61
  %51 = load i8*, i8** %50, align 8
  %52 = icmp sgt i32 %5, 0
  br i1 %52, label %53, label %200

53:                                               ; preds = %47
  %54 = icmp sgt i32 %4, 0
  %55 = icmp eq i8* %49, null
  %56 = and i32 %4, 1
  %57 = icmp eq i32 %4, 1
  %58 = sub i32 %4, %56
  %59 = icmp eq i32 %56, 0
  br label %60

60:                                               ; preds = %97, %53
  %61 = phi i32 [ 0, %53 ], [ %98, %97 ]
  br i1 %54, label %62, label %97

62:                                               ; preds = %60
  br i1 %57, label %83, label %63

63:                                               ; preds = %62, %2588
  %64 = phi i32 [ %2591, %2588 ], [ 0, %62 ]
  %65 = phi i32 [ %2592, %2588 ], [ %58, %62 ]
  %66 = load i32, i32* %22, align 8
  %67 = mul nsw i32 %66, %61
  %68 = add i32 %64, %39
  %69 = add i32 %68, %67
  %70 = sext i32 %69 to i64
  br i1 %55, label %74, label %71

71:                                               ; preds = %63
  %72 = getelementptr inbounds i8, i8* %49, i64 %70
  %73 = load i8, i8* %72, align 1
  br label %74

74:                                               ; preds = %71, %63
  %75 = phi i8 [ %73, %71 ], [ 0, %63 ]
  %76 = getelementptr inbounds i8, i8* %51, i64 %70
  store i8 %75, i8* %76, align 1
  %77 = or i32 %64, 1
  %78 = load i32, i32* %22, align 8
  %79 = mul nsw i32 %78, %61
  %80 = add i32 %77, %39
  %81 = add i32 %80, %79
  %82 = sext i32 %81 to i64
  br i1 %55, label %2588, label %2585

83:                                               ; preds = %2588, %62
  %84 = phi i32 [ 0, %62 ], [ %2591, %2588 ]
  br i1 %59, label %97, label %85

85:                                               ; preds = %83
  %86 = load i32, i32* %22, align 8
  %87 = mul nsw i32 %86, %61
  %88 = add i32 %84, %39
  %89 = add i32 %88, %87
  %90 = sext i32 %89 to i64
  br i1 %55, label %94, label %91

91:                                               ; preds = %85
  %92 = getelementptr inbounds i8, i8* %49, i64 %90
  %93 = load i8, i8* %92, align 1
  br label %94

94:                                               ; preds = %91, %85
  %95 = phi i8 [ %93, %91 ], [ 0, %85 ]
  %96 = getelementptr inbounds i8, i8* %51, i64 %90
  store i8 %95, i8* %96, align 1
  br label %97

97:                                               ; preds = %94, %83, %60
  %98 = add nuw nsw i32 %61, 1
  %99 = icmp eq i32 %98, %5
  br i1 %99, label %200, label %60

100:                                              ; preds = %43
  %101 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %102 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %103 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %12, i64 0, i32 0
  %104 = load i32, i32* %101, align 8
  %105 = load i32, i32* %102, align 4
  br label %106

106:                                              ; preds = %133, %100
  %107 = phi i32 [ %105, %100 ], [ %145, %133 ]
  %108 = phi i32 [ %104, %100 ], [ %142, %133 ]
  %109 = phi i8 [ 0, %100 ], [ %149, %133 ]
  %110 = sext i8 %109 to i32
  %111 = ashr i32 %110, 1
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 69, i32 5, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = mul i32 %108, %115
  %117 = sub nuw nsw i32 256, %115
  %118 = add i32 %117, %116
  %119 = lshr i32 %118, 8
  %120 = icmp slt i32 %107, 0
  br i1 %120, label %121, label %123

121:                                              ; preds = %106
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %122 = load i32, i32* %102, align 4
  br label %123

123:                                              ; preds = %121, %106
  %124 = phi i32 [ %122, %121 ], [ %107, %106 ]
  %125 = load i64, i64* %103, align 8
  %126 = zext i32 %119 to i64
  %127 = shl i64 %126, 56
  %128 = icmp ult i64 %125, %127
  br i1 %128, label %133, label %129

129:                                              ; preds = %123
  %130 = load i32, i32* %101, align 8
  %131 = sub i32 %130, %119
  %132 = sub i64 %125, %127
  br label %133

133:                                              ; preds = %129, %123
  %134 = phi i64 [ %132, %129 ], [ %125, %123 ]
  %135 = phi i32 [ %131, %129 ], [ %119, %123 ]
  %136 = phi i32 [ 1, %129 ], [ 0, %123 ]
  %137 = and i32 %135, 255
  %138 = zext i32 %137 to i64
  %139 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %138
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i32
  %142 = shl i32 %135, %141
  %143 = zext i8 %140 to i64
  %144 = shl i64 %134, %143
  %145 = sub nsw i32 %124, %141
  store i64 %144, i64* %103, align 8
  store i32 %145, i32* %102, align 4
  store i32 %142, i32* %101, align 8
  %146 = add nuw nsw i32 %136, %110
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds [14 x i8], [14 x i8]* @vp9_segment_tree, i64 0, i64 %147
  %149 = load i8, i8* %148, align 1
  %150 = icmp sgt i8 %149, 0
  br i1 %150, label %106, label %151

151:                                              ; preds = %133
  %152 = sext i8 %149 to i32
  %153 = sub nsw i32 0, %152
  %154 = icmp sgt i32 %5, 0
  br i1 %154, label %155, label %200

155:                                              ; preds = %151
  %156 = icmp sgt i32 %4, 0
  %157 = trunc i32 %153 to i8
  %158 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 61
  %159 = and i32 %4, 1
  %160 = icmp eq i32 %4, 1
  %161 = sub i32 %4, %159
  %162 = icmp eq i32 %159, 0
  br label %163

163:                                              ; preds = %197, %155
  %164 = phi i32 [ 0, %155 ], [ %198, %197 ]
  br i1 %156, label %165, label %197

165:                                              ; preds = %163
  br i1 %160, label %187, label %166

166:                                              ; preds = %165, %166
  %167 = phi i32 [ %184, %166 ], [ 0, %165 ]
  %168 = phi i32 [ %185, %166 ], [ %161, %165 ]
  %169 = load i8*, i8** %158, align 8
  %170 = load i32, i32* %22, align 8
  %171 = mul nsw i32 %170, %164
  %172 = add i32 %167, %39
  %173 = add i32 %172, %171
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds i8, i8* %169, i64 %174
  store i8 %157, i8* %175, align 1
  %176 = or i32 %167, 1
  %177 = load i8*, i8** %158, align 8
  %178 = load i32, i32* %22, align 8
  %179 = mul nsw i32 %178, %164
  %180 = add i32 %176, %39
  %181 = add i32 %180, %179
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds i8, i8* %177, i64 %182
  store i8 %157, i8* %183, align 1
  %184 = add nuw nsw i32 %167, 2
  %185 = add i32 %168, -2
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %166

187:                                              ; preds = %166, %165
  %188 = phi i32 [ 0, %165 ], [ %184, %166 ]
  br i1 %162, label %197, label %189

189:                                              ; preds = %187
  %190 = load i8*, i8** %158, align 8
  %191 = load i32, i32* %22, align 8
  %192 = mul nsw i32 %191, %164
  %193 = add i32 %188, %39
  %194 = add i32 %193, %192
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds i8, i8* %190, i64 %195
  store i8 %157, i8* %196, align 1
  br label %197

197:                                              ; preds = %189, %187, %163
  %198 = add nuw nsw i32 %164, 1
  %199 = icmp eq i32 %198, %5
  br i1 %199, label %200, label %163

200:                                              ; preds = %197, %97, %151, %47, %31
  %201 = phi i32 [ 0, %31 ], [ 0, %47 ], [ %153, %151 ], [ 0, %97 ], [ %153, %197 ]
  %202 = trunc i32 %201 to i8
  %203 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 4
  store i8 %202, i8* %203, align 4
  %204 = load i8, i8* %40, align 4
  %205 = icmp eq i8 %204, 0
  br i1 %205, label %214, label %206

206:                                              ; preds = %200
  %207 = shl i32 %201, 24
  %208 = ashr exact i32 %207, 24
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 69, i32 8, i64 %209
  %211 = load i32, i32* %210, align 4
  %212 = and i32 %211, 8
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %214, label %280

214:                                              ; preds = %206, %200
  %215 = load %struct.MODE_INFO*, %struct.MODE_INFO** %32, align 8
  %216 = load %struct.MODE_INFO*, %struct.MODE_INFO** %34, align 8
  %217 = icmp eq %struct.MODE_INFO* %215, null
  br i1 %217, label %222, label %218

218:                                              ; preds = %214
  %219 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %215, i64 0, i32 3
  %220 = load i8, i8* %219, align 1
  %221 = sext i8 %220 to i64
  br label %222

222:                                              ; preds = %218, %214
  %223 = phi i64 [ %221, %218 ], [ 0, %214 ]
  %224 = icmp eq %struct.MODE_INFO* %216, null
  br i1 %224, label %229, label %225

225:                                              ; preds = %222
  %226 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %216, i64 0, i32 3
  %227 = load i8, i8* %226, align 1
  %228 = sext i8 %227 to i64
  br label %229

229:                                              ; preds = %225, %222
  %230 = phi i64 [ %228, %225 ], [ 0, %222 ]
  %231 = add nsw i64 %230, %223
  %232 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 73
  %233 = load %struct.frame_contexts*, %struct.frame_contexts** %232, align 8
  %234 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %233, i64 0, i32 11, i64 %231
  %235 = load i8, i8* %234, align 1
  %236 = zext i8 %235 to i32
  %237 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %238 = load i32, i32* %237, align 8
  %239 = mul i32 %238, %236
  %240 = sub nuw nsw i32 256, %236
  %241 = add i32 %240, %239
  %242 = lshr i32 %241, 8
  %243 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %244 = load i32, i32* %243, align 4
  %245 = icmp slt i32 %244, 0
  br i1 %245, label %246, label %248

246:                                              ; preds = %229
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %247 = load i32, i32* %243, align 4
  br label %248

248:                                              ; preds = %246, %229
  %249 = phi i32 [ %247, %246 ], [ %244, %229 ]
  %250 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %12, i64 0, i32 0
  %251 = load i64, i64* %250, align 8
  %252 = zext i32 %242 to i64
  %253 = shl i64 %252, 56
  %254 = icmp ult i64 %251, %253
  br i1 %254, label %259, label %255

255:                                              ; preds = %248
  %256 = load i32, i32* %237, align 8
  %257 = sub i32 %256, %242
  %258 = sub i64 %251, %253
  br label %259

259:                                              ; preds = %255, %248
  %260 = phi i64 [ %258, %255 ], [ %251, %248 ]
  %261 = phi i32 [ %257, %255 ], [ %242, %248 ]
  %262 = phi i32 [ 1, %255 ], [ 0, %248 ]
  %263 = and i32 %261, 255
  %264 = zext i32 %263 to i64
  %265 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %264
  %266 = load i8, i8* %265, align 1
  %267 = zext i8 %266 to i32
  %268 = shl i32 %261, %267
  %269 = zext i8 %266 to i64
  %270 = shl i64 %260, %269
  %271 = sub nsw i32 %249, %267
  store i64 %270, i64* %250, align 8
  store i32 %271, i32* %243, align 4
  store i32 %268, i32* %237, align 8
  %272 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 3
  %273 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %272, align 8
  %274 = icmp eq %struct.FRAME_COUNTS* %273, null
  br i1 %274, label %280, label %275

275:                                              ; preds = %259
  %276 = zext i32 %262 to i64
  %277 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %273, i64 0, i32 12, i64 %231, i64 %276
  %278 = load i32, i32* %277, align 4
  %279 = add i32 %278, 1
  store i32 %279, i32* %277, align 4
  br label %280

280:                                              ; preds = %275, %259, %206
  %281 = phi i32 [ 1, %206 ], [ %262, %259 ], [ %262, %275 ]
  %282 = trunc i32 %281 to i8
  %283 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 3
  store i8 %282, i8* %283, align 1
  %284 = tail call fastcc zeroext i8 @read_tx_size(%struct.VP9Common* %14, %struct.macroblockd* %13, i32 1, %struct.vpx_reader* %12) #5
  %285 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 2
  store i8 %284, i8* %285, align 2
  %286 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 8, i64 0
  store i8 0, i8* %286, align 4
  %287 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 8, i64 1
  store i8 -1, i8* %287, align 1
  switch i8 %37, label %585 [
    i8 0, label %288
    i8 1, label %355
    i8 2, label %470
  ]

288:                                              ; preds = %280
  %289 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %290 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %291 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %12, i64 0, i32 0
  br label %292

292:                                              ; preds = %346, %288
  %293 = phi i64 [ 0, %288 ], [ %349, %346 ]
  %294 = trunc i64 %293 to i32
  %295 = tail call zeroext i8 @vp9_above_block_mode(%struct.MODE_INFO* %17, %struct.MODE_INFO* %33, i32 %294) #5
  %296 = tail call zeroext i8 @vp9_left_block_mode(%struct.MODE_INFO* %17, %struct.MODE_INFO* %35, i32 %294) #5
  %297 = zext i8 %295 to i64
  %298 = zext i8 %296 to i64
  %299 = load i32, i32* %289, align 8
  %300 = load i32, i32* %290, align 4
  br label %301

301:                                              ; preds = %328, %292
  %302 = phi i32 [ %300, %292 ], [ %340, %328 ]
  %303 = phi i32 [ %299, %292 ], [ %337, %328 ]
  %304 = phi i8 [ 0, %292 ], [ %344, %328 ]
  %305 = sext i8 %304 to i32
  %306 = ashr i32 %305, 1
  %307 = sext i32 %306 to i64
  %308 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @vp9_kf_y_mode_prob, i64 0, i64 %297, i64 %298, i64 %307
  %309 = load i8, i8* %308, align 1
  %310 = zext i8 %309 to i32
  %311 = mul i32 %303, %310
  %312 = sub nuw nsw i32 256, %310
  %313 = add i32 %312, %311
  %314 = lshr i32 %313, 8
  %315 = icmp slt i32 %302, 0
  br i1 %315, label %316, label %318

316:                                              ; preds = %301
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %317 = load i32, i32* %290, align 4
  br label %318

318:                                              ; preds = %316, %301
  %319 = phi i32 [ %317, %316 ], [ %302, %301 ]
  %320 = load i64, i64* %291, align 8
  %321 = zext i32 %314 to i64
  %322 = shl i64 %321, 56
  %323 = icmp ult i64 %320, %322
  br i1 %323, label %328, label %324

324:                                              ; preds = %318
  %325 = load i32, i32* %289, align 8
  %326 = sub i32 %325, %314
  %327 = sub i64 %320, %322
  br label %328

328:                                              ; preds = %324, %318
  %329 = phi i64 [ %327, %324 ], [ %320, %318 ]
  %330 = phi i32 [ %326, %324 ], [ %314, %318 ]
  %331 = phi i32 [ 1, %324 ], [ 0, %318 ]
  %332 = and i32 %330, 255
  %333 = zext i32 %332 to i64
  %334 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %333
  %335 = load i8, i8* %334, align 1
  %336 = zext i8 %335 to i32
  %337 = shl i32 %330, %336
  %338 = zext i8 %335 to i64
  %339 = shl i64 %329, %338
  %340 = sub nsw i32 %319, %336
  store i64 %339, i64* %291, align 8
  store i32 %340, i32* %290, align 4
  store i32 %337, i32* %289, align 8
  %341 = add nuw nsw i32 %331, %305
  %342 = sext i32 %341 to i64
  %343 = getelementptr inbounds [18 x i8], [18 x i8]* @vp9_intra_mode_tree, i64 0, i64 %342
  %344 = load i8, i8* %343, align 1
  %345 = icmp sgt i8 %344, 0
  br i1 %345, label %301, label %346

346:                                              ; preds = %328
  %347 = sub i8 0, %344
  %348 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 %293, i32 0
  store i8 %347, i8* %348, align 4
  %349 = add nuw nsw i64 %293, 1
  %350 = icmp eq i64 %349, 4
  br i1 %350, label %351, label %292

351:                                              ; preds = %346
  %352 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 3, i32 0
  %353 = load i8, i8* %352, align 4
  %354 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 1
  store i8 %353, i8* %354, align 1
  br label %643

355:                                              ; preds = %280
  %356 = tail call zeroext i8 @vp9_above_block_mode(%struct.MODE_INFO* %17, %struct.MODE_INFO* %33, i32 0) #5
  %357 = tail call zeroext i8 @vp9_left_block_mode(%struct.MODE_INFO* %17, %struct.MODE_INFO* %35, i32 0) #5
  %358 = zext i8 %356 to i64
  %359 = zext i8 %357 to i64
  %360 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %361 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %362 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %12, i64 0, i32 0
  %363 = load i32, i32* %360, align 8
  %364 = load i32, i32* %361, align 4
  br label %365

365:                                              ; preds = %392, %355
  %366 = phi i32 [ %364, %355 ], [ %404, %392 ]
  %367 = phi i32 [ %363, %355 ], [ %401, %392 ]
  %368 = phi i8 [ 0, %355 ], [ %408, %392 ]
  %369 = sext i8 %368 to i32
  %370 = ashr i32 %369, 1
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @vp9_kf_y_mode_prob, i64 0, i64 %358, i64 %359, i64 %371
  %373 = load i8, i8* %372, align 1
  %374 = zext i8 %373 to i32
  %375 = mul i32 %367, %374
  %376 = sub nuw nsw i32 256, %374
  %377 = add i32 %376, %375
  %378 = lshr i32 %377, 8
  %379 = icmp slt i32 %366, 0
  br i1 %379, label %380, label %382

380:                                              ; preds = %365
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %381 = load i32, i32* %361, align 4
  br label %382

382:                                              ; preds = %380, %365
  %383 = phi i32 [ %381, %380 ], [ %366, %365 ]
  %384 = load i64, i64* %362, align 8
  %385 = zext i32 %378 to i64
  %386 = shl i64 %385, 56
  %387 = icmp ult i64 %384, %386
  br i1 %387, label %392, label %388

388:                                              ; preds = %382
  %389 = load i32, i32* %360, align 8
  %390 = sub i32 %389, %378
  %391 = sub i64 %384, %386
  br label %392

392:                                              ; preds = %388, %382
  %393 = phi i64 [ %391, %388 ], [ %384, %382 ]
  %394 = phi i32 [ %390, %388 ], [ %378, %382 ]
  %395 = phi i32 [ 1, %388 ], [ 0, %382 ]
  %396 = and i32 %394, 255
  %397 = zext i32 %396 to i64
  %398 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %397
  %399 = load i8, i8* %398, align 1
  %400 = zext i8 %399 to i32
  %401 = shl i32 %394, %400
  %402 = zext i8 %399 to i64
  %403 = shl i64 %393, %402
  %404 = sub nsw i32 %383, %400
  store i64 %403, i64* %362, align 8
  store i32 %404, i32* %361, align 4
  store i32 %401, i32* %360, align 8
  %405 = add nuw nsw i32 %395, %369
  %406 = sext i32 %405 to i64
  %407 = getelementptr inbounds [18 x i8], [18 x i8]* @vp9_intra_mode_tree, i64 0, i64 %406
  %408 = load i8, i8* %407, align 1
  %409 = icmp sgt i8 %408, 0
  br i1 %409, label %365, label %410

410:                                              ; preds = %392
  %411 = sub i8 0, %408
  %412 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 2, i32 0
  store i8 %411, i8* %412, align 4
  %413 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 0, i32 0
  store i8 %411, i8* %413, align 4
  %414 = tail call zeroext i8 @vp9_above_block_mode(%struct.MODE_INFO* %17, %struct.MODE_INFO* %33, i32 1) #5
  %415 = tail call zeroext i8 @vp9_left_block_mode(%struct.MODE_INFO* %17, %struct.MODE_INFO* %35, i32 1) #5
  %416 = zext i8 %414 to i64
  %417 = zext i8 %415 to i64
  %418 = load i32, i32* %360, align 8
  %419 = load i32, i32* %361, align 4
  br label %420

420:                                              ; preds = %447, %410
  %421 = phi i32 [ %419, %410 ], [ %459, %447 ]
  %422 = phi i32 [ %418, %410 ], [ %456, %447 ]
  %423 = phi i8 [ 0, %410 ], [ %463, %447 ]
  %424 = sext i8 %423 to i32
  %425 = ashr i32 %424, 1
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @vp9_kf_y_mode_prob, i64 0, i64 %416, i64 %417, i64 %426
  %428 = load i8, i8* %427, align 1
  %429 = zext i8 %428 to i32
  %430 = mul i32 %422, %429
  %431 = sub nuw nsw i32 256, %429
  %432 = add i32 %431, %430
  %433 = lshr i32 %432, 8
  %434 = icmp slt i32 %421, 0
  br i1 %434, label %435, label %437

435:                                              ; preds = %420
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %436 = load i32, i32* %361, align 4
  br label %437

437:                                              ; preds = %435, %420
  %438 = phi i32 [ %436, %435 ], [ %421, %420 ]
  %439 = load i64, i64* %362, align 8
  %440 = zext i32 %433 to i64
  %441 = shl i64 %440, 56
  %442 = icmp ult i64 %439, %441
  br i1 %442, label %447, label %443

443:                                              ; preds = %437
  %444 = load i32, i32* %360, align 8
  %445 = sub i32 %444, %433
  %446 = sub i64 %439, %441
  br label %447

447:                                              ; preds = %443, %437
  %448 = phi i64 [ %446, %443 ], [ %439, %437 ]
  %449 = phi i32 [ %445, %443 ], [ %433, %437 ]
  %450 = phi i32 [ 1, %443 ], [ 0, %437 ]
  %451 = and i32 %449, 255
  %452 = zext i32 %451 to i64
  %453 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %452
  %454 = load i8, i8* %453, align 1
  %455 = zext i8 %454 to i32
  %456 = shl i32 %449, %455
  %457 = zext i8 %454 to i64
  %458 = shl i64 %448, %457
  %459 = sub nsw i32 %438, %455
  store i64 %458, i64* %362, align 8
  store i32 %459, i32* %361, align 4
  store i32 %456, i32* %360, align 8
  %460 = add nuw nsw i32 %450, %424
  %461 = sext i32 %460 to i64
  %462 = getelementptr inbounds [18 x i8], [18 x i8]* @vp9_intra_mode_tree, i64 0, i64 %461
  %463 = load i8, i8* %462, align 1
  %464 = icmp sgt i8 %463, 0
  br i1 %464, label %420, label %465

465:                                              ; preds = %447
  %466 = sub i8 0, %463
  %467 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 1
  store i8 %466, i8* %467, align 1
  %468 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 3, i32 0
  store i8 %466, i8* %468, align 4
  %469 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 1, i32 0
  store i8 %466, i8* %469, align 4
  br label %643

470:                                              ; preds = %280
  %471 = tail call zeroext i8 @vp9_above_block_mode(%struct.MODE_INFO* %17, %struct.MODE_INFO* %33, i32 0) #5
  %472 = tail call zeroext i8 @vp9_left_block_mode(%struct.MODE_INFO* %17, %struct.MODE_INFO* %35, i32 0) #5
  %473 = zext i8 %471 to i64
  %474 = zext i8 %472 to i64
  %475 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %476 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %477 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %12, i64 0, i32 0
  %478 = load i32, i32* %475, align 8
  %479 = load i32, i32* %476, align 4
  br label %480

480:                                              ; preds = %507, %470
  %481 = phi i32 [ %479, %470 ], [ %519, %507 ]
  %482 = phi i32 [ %478, %470 ], [ %516, %507 ]
  %483 = phi i8 [ 0, %470 ], [ %523, %507 ]
  %484 = sext i8 %483 to i32
  %485 = ashr i32 %484, 1
  %486 = sext i32 %485 to i64
  %487 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @vp9_kf_y_mode_prob, i64 0, i64 %473, i64 %474, i64 %486
  %488 = load i8, i8* %487, align 1
  %489 = zext i8 %488 to i32
  %490 = mul i32 %482, %489
  %491 = sub nuw nsw i32 256, %489
  %492 = add i32 %491, %490
  %493 = lshr i32 %492, 8
  %494 = icmp slt i32 %481, 0
  br i1 %494, label %495, label %497

495:                                              ; preds = %480
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %496 = load i32, i32* %476, align 4
  br label %497

497:                                              ; preds = %495, %480
  %498 = phi i32 [ %496, %495 ], [ %481, %480 ]
  %499 = load i64, i64* %477, align 8
  %500 = zext i32 %493 to i64
  %501 = shl i64 %500, 56
  %502 = icmp ult i64 %499, %501
  br i1 %502, label %507, label %503

503:                                              ; preds = %497
  %504 = load i32, i32* %475, align 8
  %505 = sub i32 %504, %493
  %506 = sub i64 %499, %501
  br label %507

507:                                              ; preds = %503, %497
  %508 = phi i64 [ %506, %503 ], [ %499, %497 ]
  %509 = phi i32 [ %505, %503 ], [ %493, %497 ]
  %510 = phi i32 [ 1, %503 ], [ 0, %497 ]
  %511 = and i32 %509, 255
  %512 = zext i32 %511 to i64
  %513 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %512
  %514 = load i8, i8* %513, align 1
  %515 = zext i8 %514 to i32
  %516 = shl i32 %509, %515
  %517 = zext i8 %514 to i64
  %518 = shl i64 %508, %517
  %519 = sub nsw i32 %498, %515
  store i64 %518, i64* %477, align 8
  store i32 %519, i32* %476, align 4
  store i32 %516, i32* %475, align 8
  %520 = add nuw nsw i32 %510, %484
  %521 = sext i32 %520 to i64
  %522 = getelementptr inbounds [18 x i8], [18 x i8]* @vp9_intra_mode_tree, i64 0, i64 %521
  %523 = load i8, i8* %522, align 1
  %524 = icmp sgt i8 %523, 0
  br i1 %524, label %480, label %525

525:                                              ; preds = %507
  %526 = sub i8 0, %523
  %527 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 1, i32 0
  store i8 %526, i8* %527, align 4
  %528 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 0, i32 0
  store i8 %526, i8* %528, align 4
  %529 = tail call zeroext i8 @vp9_above_block_mode(%struct.MODE_INFO* %17, %struct.MODE_INFO* %33, i32 2) #5
  %530 = tail call zeroext i8 @vp9_left_block_mode(%struct.MODE_INFO* %17, %struct.MODE_INFO* %35, i32 2) #5
  %531 = zext i8 %529 to i64
  %532 = zext i8 %530 to i64
  %533 = load i32, i32* %475, align 8
  %534 = load i32, i32* %476, align 4
  br label %535

535:                                              ; preds = %562, %525
  %536 = phi i32 [ %534, %525 ], [ %574, %562 ]
  %537 = phi i32 [ %533, %525 ], [ %571, %562 ]
  %538 = phi i8 [ 0, %525 ], [ %578, %562 ]
  %539 = sext i8 %538 to i32
  %540 = ashr i32 %539, 1
  %541 = sext i32 %540 to i64
  %542 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @vp9_kf_y_mode_prob, i64 0, i64 %531, i64 %532, i64 %541
  %543 = load i8, i8* %542, align 1
  %544 = zext i8 %543 to i32
  %545 = mul i32 %537, %544
  %546 = sub nuw nsw i32 256, %544
  %547 = add i32 %546, %545
  %548 = lshr i32 %547, 8
  %549 = icmp slt i32 %536, 0
  br i1 %549, label %550, label %552

550:                                              ; preds = %535
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %551 = load i32, i32* %476, align 4
  br label %552

552:                                              ; preds = %550, %535
  %553 = phi i32 [ %551, %550 ], [ %536, %535 ]
  %554 = load i64, i64* %477, align 8
  %555 = zext i32 %548 to i64
  %556 = shl i64 %555, 56
  %557 = icmp ult i64 %554, %556
  br i1 %557, label %562, label %558

558:                                              ; preds = %552
  %559 = load i32, i32* %475, align 8
  %560 = sub i32 %559, %548
  %561 = sub i64 %554, %556
  br label %562

562:                                              ; preds = %558, %552
  %563 = phi i64 [ %561, %558 ], [ %554, %552 ]
  %564 = phi i32 [ %560, %558 ], [ %548, %552 ]
  %565 = phi i32 [ 1, %558 ], [ 0, %552 ]
  %566 = and i32 %564, 255
  %567 = zext i32 %566 to i64
  %568 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %567
  %569 = load i8, i8* %568, align 1
  %570 = zext i8 %569 to i32
  %571 = shl i32 %564, %570
  %572 = zext i8 %569 to i64
  %573 = shl i64 %563, %572
  %574 = sub nsw i32 %553, %570
  store i64 %573, i64* %477, align 8
  store i32 %574, i32* %476, align 4
  store i32 %571, i32* %475, align 8
  %575 = add nuw nsw i32 %565, %539
  %576 = sext i32 %575 to i64
  %577 = getelementptr inbounds [18 x i8], [18 x i8]* @vp9_intra_mode_tree, i64 0, i64 %576
  %578 = load i8, i8* %577, align 1
  %579 = icmp sgt i8 %578, 0
  br i1 %579, label %535, label %580

580:                                              ; preds = %562
  %581 = sub i8 0, %578
  %582 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 1
  store i8 %581, i8* %582, align 1
  %583 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 3, i32 0
  store i8 %581, i8* %583, align 4
  %584 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 2, i32 0
  store i8 %581, i8* %584, align 4
  br label %643

585:                                              ; preds = %280
  %586 = tail call zeroext i8 @vp9_above_block_mode(%struct.MODE_INFO* %17, %struct.MODE_INFO* %33, i32 0) #5
  %587 = tail call zeroext i8 @vp9_left_block_mode(%struct.MODE_INFO* %17, %struct.MODE_INFO* %35, i32 0) #5
  %588 = zext i8 %586 to i64
  %589 = zext i8 %587 to i64
  %590 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %591 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %592 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %12, i64 0, i32 0
  %593 = load i32, i32* %590, align 8
  %594 = load i32, i32* %591, align 4
  br label %595

595:                                              ; preds = %622, %585
  %596 = phi i32 [ %594, %585 ], [ %634, %622 ]
  %597 = phi i32 [ %593, %585 ], [ %631, %622 ]
  %598 = phi i8 [ 0, %585 ], [ %638, %622 ]
  %599 = sext i8 %598 to i32
  %600 = ashr i32 %599, 1
  %601 = sext i32 %600 to i64
  %602 = getelementptr inbounds [10 x [10 x [9 x i8]]], [10 x [10 x [9 x i8]]]* @vp9_kf_y_mode_prob, i64 0, i64 %588, i64 %589, i64 %601
  %603 = load i8, i8* %602, align 1
  %604 = zext i8 %603 to i32
  %605 = mul i32 %597, %604
  %606 = sub nuw nsw i32 256, %604
  %607 = add i32 %606, %605
  %608 = lshr i32 %607, 8
  %609 = icmp slt i32 %596, 0
  br i1 %609, label %610, label %612

610:                                              ; preds = %595
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %611 = load i32, i32* %591, align 4
  br label %612

612:                                              ; preds = %610, %595
  %613 = phi i32 [ %611, %610 ], [ %596, %595 ]
  %614 = load i64, i64* %592, align 8
  %615 = zext i32 %608 to i64
  %616 = shl i64 %615, 56
  %617 = icmp ult i64 %614, %616
  br i1 %617, label %622, label %618

618:                                              ; preds = %612
  %619 = load i32, i32* %590, align 8
  %620 = sub i32 %619, %608
  %621 = sub i64 %614, %616
  br label %622

622:                                              ; preds = %618, %612
  %623 = phi i64 [ %621, %618 ], [ %614, %612 ]
  %624 = phi i32 [ %620, %618 ], [ %608, %612 ]
  %625 = phi i32 [ 1, %618 ], [ 0, %612 ]
  %626 = and i32 %624, 255
  %627 = zext i32 %626 to i64
  %628 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %627
  %629 = load i8, i8* %628, align 1
  %630 = zext i8 %629 to i32
  %631 = shl i32 %624, %630
  %632 = zext i8 %629 to i64
  %633 = shl i64 %623, %632
  %634 = sub nsw i32 %613, %630
  store i64 %633, i64* %592, align 8
  store i32 %634, i32* %591, align 4
  store i32 %631, i32* %590, align 8
  %635 = add nuw nsw i32 %625, %599
  %636 = sext i32 %635 to i64
  %637 = getelementptr inbounds [18 x i8], [18 x i8]* @vp9_intra_mode_tree, i64 0, i64 %636
  %638 = load i8, i8* %637, align 1
  %639 = icmp sgt i8 %638, 0
  br i1 %639, label %595, label %640

640:                                              ; preds = %622
  %641 = sub i8 0, %638
  %642 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 1
  store i8 %641, i8* %642, align 1
  br label %643

643:                                              ; preds = %640, %580, %465, %351
  %644 = phi i8 [ %641, %640 ], [ %581, %580 ], [ %466, %465 ], [ %353, %351 ]
  %645 = zext i8 %644 to i64
  %646 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %647 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %648 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %12, i64 0, i32 0
  %649 = load i32, i32* %646, align 8
  %650 = load i32, i32* %647, align 4
  br label %651

651:                                              ; preds = %678, %643
  %652 = phi i32 [ %650, %643 ], [ %690, %678 ]
  %653 = phi i32 [ %649, %643 ], [ %687, %678 ]
  %654 = phi i8 [ 0, %643 ], [ %694, %678 ]
  %655 = sext i8 %654 to i32
  %656 = ashr i32 %655, 1
  %657 = sext i32 %656 to i64
  %658 = getelementptr inbounds [10 x [9 x i8]], [10 x [9 x i8]]* @vp9_kf_uv_mode_prob, i64 0, i64 %645, i64 %657
  %659 = load i8, i8* %658, align 1
  %660 = zext i8 %659 to i32
  %661 = mul i32 %653, %660
  %662 = sub nuw nsw i32 256, %660
  %663 = add i32 %662, %661
  %664 = lshr i32 %663, 8
  %665 = icmp slt i32 %652, 0
  br i1 %665, label %666, label %668

666:                                              ; preds = %651
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %667 = load i32, i32* %647, align 4
  br label %668

668:                                              ; preds = %666, %651
  %669 = phi i32 [ %667, %666 ], [ %652, %651 ]
  %670 = load i64, i64* %648, align 8
  %671 = zext i32 %664 to i64
  %672 = shl i64 %671, 56
  %673 = icmp ult i64 %670, %672
  br i1 %673, label %678, label %674

674:                                              ; preds = %668
  %675 = load i32, i32* %646, align 8
  %676 = sub i32 %675, %664
  %677 = sub i64 %670, %672
  br label %678

678:                                              ; preds = %674, %668
  %679 = phi i64 [ %677, %674 ], [ %670, %668 ]
  %680 = phi i32 [ %676, %674 ], [ %664, %668 ]
  %681 = phi i32 [ 1, %674 ], [ 0, %668 ]
  %682 = and i32 %680, 255
  %683 = zext i32 %682 to i64
  %684 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %683
  %685 = load i8, i8* %684, align 1
  %686 = zext i8 %685 to i32
  %687 = shl i32 %680, %686
  %688 = zext i8 %685 to i64
  %689 = shl i64 %679, %688
  %690 = sub nsw i32 %669, %686
  store i64 %689, i64* %648, align 8
  store i32 %690, i32* %647, align 4
  store i32 %687, i32* %646, align 8
  %691 = add nuw nsw i32 %681, %655
  %692 = sext i32 %691 to i64
  %693 = getelementptr inbounds [18 x i8], [18 x i8]* @vp9_intra_mode_tree, i64 0, i64 %692
  %694 = load i8, i8* %693, align 1
  %695 = icmp sgt i8 %694, 0
  br i1 %695, label %651, label %696

696:                                              ; preds = %678
  %697 = sub i8 0, %694
  %698 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 6
  store i8 %697, i8* %698, align 2
  br label %2584

699:                                              ; preds = %27
  %700 = mul nsw i32 %23, %2
  %701 = sext i32 %700 to i64
  %702 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %21, i64 %701
  %703 = sext i32 %3 to i64
  %704 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %702, i64 %703
  %705 = add nsw i32 %700, %3
  %706 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 69, i32 0
  %707 = load i8, i8* %706, align 4
  %708 = icmp eq i8 %707, 0
  br i1 %708, label %1166, label %709

709:                                              ; preds = %699
  %710 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 60
  %711 = load i8*, i8** %710, align 16
  %712 = icmp eq i8* %711, null
  br i1 %712, label %893, label %713

713:                                              ; preds = %709
  %714 = icmp sgt i32 %5, 0
  br i1 %714, label %715, label %893

715:                                              ; preds = %713
  %716 = icmp sgt i32 %4, 0
  %717 = zext i32 %4 to i64
  %718 = add nsw i64 %717, -1
  %719 = mul i32 %23, %2
  %720 = add i32 %719, %3
  %721 = and i64 %717, 4294967288
  %722 = add nsw i64 %721, -8
  %723 = lshr exact i64 %722, 3
  %724 = add nuw nsw i64 %723, 1
  %725 = icmp ult i32 %4, 8
  %726 = trunc i64 %718 to i32
  %727 = icmp ugt i64 %718, 4294967295
  %728 = and i64 %717, 4294967288
  %729 = and i64 %724, 1
  %730 = icmp eq i64 %722, 0
  %731 = sub nuw nsw i64 %724, %729
  %732 = icmp eq i64 %729, 0
  %733 = icmp eq i64 %728, %717
  %734 = and i64 %717, 3
  %735 = icmp eq i64 %734, 0
  br label %736

736:                                              ; preds = %889, %715
  %737 = phi i32 [ 2147483647, %715 ], [ %890, %889 ]
  %738 = phi i32 [ 0, %715 ], [ %891, %889 ]
  %739 = mul i32 %23, %738
  %740 = add i32 %720, %739
  br i1 %716, label %741, label %889

741:                                              ; preds = %736
  %742 = mul nsw i32 %738, %23
  %743 = add i32 %742, %705
  br i1 %725, label %824, label %744

744:                                              ; preds = %741
  %745 = add i32 %740, %726
  %746 = icmp slt i32 %745, %740
  %747 = or i1 %746, %727
  br i1 %747, label %824, label %748

748:                                              ; preds = %744
  %749 = insertelement <4 x i32> undef, i32 %737, i32 0
  %750 = shufflevector <4 x i32> %749, <4 x i32> undef, <4 x i32> zeroinitializer
  br i1 %730, label %790, label %751

751:                                              ; preds = %748, %751
  %752 = phi i64 [ %787, %751 ], [ 0, %748 ]
  %753 = phi <4 x i32> [ %785, %751 ], [ %750, %748 ]
  %754 = phi <4 x i32> [ %786, %751 ], [ %750, %748 ]
  %755 = phi i64 [ %788, %751 ], [ %731, %748 ]
  %756 = trunc i64 %752 to i32
  %757 = add i32 %743, %756
  %758 = sext i32 %757 to i64
  %759 = getelementptr inbounds i8, i8* %711, i64 %758
  %760 = bitcast i8* %759 to <4 x i8>*
  %761 = load <4 x i8>, <4 x i8>* %760, align 1
  %762 = getelementptr inbounds i8, i8* %759, i64 4
  %763 = bitcast i8* %762 to <4 x i8>*
  %764 = load <4 x i8>, <4 x i8>* %763, align 1
  %765 = zext <4 x i8> %761 to <4 x i32>
  %766 = zext <4 x i8> %764 to <4 x i32>
  %767 = icmp slt <4 x i32> %753, %765
  %768 = icmp slt <4 x i32> %754, %766
  %769 = select <4 x i1> %767, <4 x i32> %753, <4 x i32> %765
  %770 = select <4 x i1> %768, <4 x i32> %754, <4 x i32> %766
  %771 = trunc i64 %752 to i32
  %772 = or i32 %771, 8
  %773 = add i32 %743, %772
  %774 = sext i32 %773 to i64
  %775 = getelementptr inbounds i8, i8* %711, i64 %774
  %776 = bitcast i8* %775 to <4 x i8>*
  %777 = load <4 x i8>, <4 x i8>* %776, align 1
  %778 = getelementptr inbounds i8, i8* %775, i64 4
  %779 = bitcast i8* %778 to <4 x i8>*
  %780 = load <4 x i8>, <4 x i8>* %779, align 1
  %781 = zext <4 x i8> %777 to <4 x i32>
  %782 = zext <4 x i8> %780 to <4 x i32>
  %783 = icmp slt <4 x i32> %769, %781
  %784 = icmp slt <4 x i32> %770, %782
  %785 = select <4 x i1> %783, <4 x i32> %769, <4 x i32> %781
  %786 = select <4 x i1> %784, <4 x i32> %770, <4 x i32> %782
  %787 = add i64 %752, 16
  %788 = add i64 %755, -2
  %789 = icmp eq i64 %788, 0
  br i1 %789, label %790, label %751, !llvm.loop !2

790:                                              ; preds = %751, %748
  %791 = phi <4 x i32> [ undef, %748 ], [ %785, %751 ]
  %792 = phi <4 x i32> [ undef, %748 ], [ %786, %751 ]
  %793 = phi i64 [ 0, %748 ], [ %787, %751 ]
  %794 = phi <4 x i32> [ %750, %748 ], [ %785, %751 ]
  %795 = phi <4 x i32> [ %750, %748 ], [ %786, %751 ]
  br i1 %732, label %812, label %796

796:                                              ; preds = %790
  %797 = trunc i64 %793 to i32
  %798 = add i32 %743, %797
  %799 = sext i32 %798 to i64
  %800 = getelementptr inbounds i8, i8* %711, i64 %799
  %801 = bitcast i8* %800 to <4 x i8>*
  %802 = load <4 x i8>, <4 x i8>* %801, align 1
  %803 = getelementptr inbounds i8, i8* %800, i64 4
  %804 = bitcast i8* %803 to <4 x i8>*
  %805 = load <4 x i8>, <4 x i8>* %804, align 1
  %806 = zext <4 x i8> %802 to <4 x i32>
  %807 = zext <4 x i8> %805 to <4 x i32>
  %808 = icmp slt <4 x i32> %795, %807
  %809 = select <4 x i1> %808, <4 x i32> %795, <4 x i32> %807
  %810 = icmp slt <4 x i32> %794, %806
  %811 = select <4 x i1> %810, <4 x i32> %794, <4 x i32> %806
  br label %812

812:                                              ; preds = %790, %796
  %813 = phi <4 x i32> [ %791, %790 ], [ %811, %796 ]
  %814 = phi <4 x i32> [ %792, %790 ], [ %809, %796 ]
  %815 = icmp slt <4 x i32> %813, %814
  %816 = select <4 x i1> %815, <4 x i32> %813, <4 x i32> %814
  %817 = shufflevector <4 x i32> %816, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %818 = icmp slt <4 x i32> %816, %817
  %819 = select <4 x i1> %818, <4 x i32> %816, <4 x i32> %817
  %820 = shufflevector <4 x i32> %819, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %821 = icmp slt <4 x i32> %819, %820
  %822 = select <4 x i1> %821, <4 x i32> %819, <4 x i32> %820
  %823 = extractelement <4 x i32> %822, i32 0
  br i1 %733, label %889, label %824

824:                                              ; preds = %812, %744, %741
  %825 = phi i64 [ 0, %744 ], [ 0, %741 ], [ %728, %812 ]
  %826 = phi i32 [ %737, %744 ], [ %737, %741 ], [ %823, %812 ]
  %827 = xor i64 %825, -1
  %828 = add nsw i64 %827, %717
  br i1 %735, label %844, label %829

829:                                              ; preds = %824, %829
  %830 = phi i64 [ %841, %829 ], [ %825, %824 ]
  %831 = phi i32 [ %840, %829 ], [ %826, %824 ]
  %832 = phi i64 [ %842, %829 ], [ %734, %824 ]
  %833 = trunc i64 %830 to i32
  %834 = add i32 %743, %833
  %835 = sext i32 %834 to i64
  %836 = getelementptr inbounds i8, i8* %711, i64 %835
  %837 = load i8, i8* %836, align 1
  %838 = zext i8 %837 to i32
  %839 = icmp slt i32 %831, %838
  %840 = select i1 %839, i32 %831, i32 %838
  %841 = add nuw nsw i64 %830, 1
  %842 = add i64 %832, -1
  %843 = icmp eq i64 %842, 0
  br i1 %843, label %844, label %829, !llvm.loop !4

844:                                              ; preds = %829, %824
  %845 = phi i32 [ undef, %824 ], [ %840, %829 ]
  %846 = phi i64 [ %825, %824 ], [ %841, %829 ]
  %847 = phi i32 [ %826, %824 ], [ %840, %829 ]
  %848 = icmp ult i64 %828, 3
  br i1 %848, label %889, label %849

849:                                              ; preds = %844, %849
  %850 = phi i64 [ %887, %849 ], [ %846, %844 ]
  %851 = phi i32 [ %886, %849 ], [ %847, %844 ]
  %852 = trunc i64 %850 to i32
  %853 = add i32 %743, %852
  %854 = sext i32 %853 to i64
  %855 = getelementptr inbounds i8, i8* %711, i64 %854
  %856 = load i8, i8* %855, align 1
  %857 = zext i8 %856 to i32
  %858 = icmp slt i32 %851, %857
  %859 = select i1 %858, i32 %851, i32 %857
  %860 = trunc i64 %850 to i32
  %861 = add i32 %860, 1
  %862 = add i32 %743, %861
  %863 = sext i32 %862 to i64
  %864 = getelementptr inbounds i8, i8* %711, i64 %863
  %865 = load i8, i8* %864, align 1
  %866 = zext i8 %865 to i32
  %867 = icmp slt i32 %859, %866
  %868 = select i1 %867, i32 %859, i32 %866
  %869 = trunc i64 %850 to i32
  %870 = add i32 %869, 2
  %871 = add i32 %743, %870
  %872 = sext i32 %871 to i64
  %873 = getelementptr inbounds i8, i8* %711, i64 %872
  %874 = load i8, i8* %873, align 1
  %875 = zext i8 %874 to i32
  %876 = icmp slt i32 %868, %875
  %877 = select i1 %876, i32 %868, i32 %875
  %878 = trunc i64 %850 to i32
  %879 = add i32 %878, 3
  %880 = add i32 %743, %879
  %881 = sext i32 %880 to i64
  %882 = getelementptr inbounds i8, i8* %711, i64 %881
  %883 = load i8, i8* %882, align 1
  %884 = zext i8 %883 to i32
  %885 = icmp slt i32 %877, %884
  %886 = select i1 %885, i32 %877, i32 %884
  %887 = add nuw nsw i64 %850, 4
  %888 = icmp eq i64 %887, %717
  br i1 %888, label %889, label %849, !llvm.loop !6

889:                                              ; preds = %844, %849, %812, %736
  %890 = phi i32 [ %737, %736 ], [ %823, %812 ], [ %845, %844 ], [ %886, %849 ]
  %891 = add nuw nsw i32 %738, 1
  %892 = icmp eq i32 %891, %5
  br i1 %892, label %893, label %736

893:                                              ; preds = %889, %713, %709
  %894 = phi i32 [ 0, %709 ], [ 2147483647, %713 ], [ %890, %889 ]
  %895 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 69, i32 1
  %896 = load i8, i8* %895, align 1
  %897 = icmp eq i8 %896, 0
  br i1 %897, label %898, label %948

898:                                              ; preds = %893
  %899 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 61
  %900 = load i8*, i8** %899, align 8
  %901 = icmp sgt i32 %5, 0
  br i1 %901, label %902, label %1166

902:                                              ; preds = %898
  %903 = icmp sgt i32 %4, 0
  %904 = and i32 %4, 1
  %905 = icmp eq i32 %4, 1
  %906 = sub i32 %4, %904
  %907 = icmp eq i32 %904, 0
  br label %908

908:                                              ; preds = %945, %902
  %909 = phi i32 [ 0, %902 ], [ %946, %945 ]
  br i1 %903, label %910, label %945

910:                                              ; preds = %908
  br i1 %905, label %931, label %911

911:                                              ; preds = %910, %2597
  %912 = phi i32 [ %2600, %2597 ], [ 0, %910 ]
  %913 = phi i32 [ %2601, %2597 ], [ %906, %910 ]
  %914 = load i32, i32* %22, align 8
  %915 = mul nsw i32 %914, %909
  %916 = add i32 %912, %705
  %917 = add i32 %916, %915
  %918 = sext i32 %917 to i64
  br i1 %712, label %922, label %919

919:                                              ; preds = %911
  %920 = getelementptr inbounds i8, i8* %711, i64 %918
  %921 = load i8, i8* %920, align 1
  br label %922

922:                                              ; preds = %919, %911
  %923 = phi i8 [ %921, %919 ], [ 0, %911 ]
  %924 = getelementptr inbounds i8, i8* %900, i64 %918
  store i8 %923, i8* %924, align 1
  %925 = or i32 %912, 1
  %926 = load i32, i32* %22, align 8
  %927 = mul nsw i32 %926, %909
  %928 = add i32 %925, %705
  %929 = add i32 %928, %927
  %930 = sext i32 %929 to i64
  br i1 %712, label %2597, label %2594

931:                                              ; preds = %2597, %910
  %932 = phi i32 [ 0, %910 ], [ %2600, %2597 ]
  br i1 %907, label %945, label %933

933:                                              ; preds = %931
  %934 = load i32, i32* %22, align 8
  %935 = mul nsw i32 %934, %909
  %936 = add i32 %932, %705
  %937 = add i32 %936, %935
  %938 = sext i32 %937 to i64
  br i1 %712, label %942, label %939

939:                                              ; preds = %933
  %940 = getelementptr inbounds i8, i8* %711, i64 %938
  %941 = load i8, i8* %940, align 1
  br label %942

942:                                              ; preds = %939, %933
  %943 = phi i8 [ %941, %939 ], [ 0, %933 ]
  %944 = getelementptr inbounds i8, i8* %900, i64 %938
  store i8 %943, i8* %944, align 1
  br label %945

945:                                              ; preds = %942, %931, %908
  %946 = add nuw nsw i32 %909, 1
  %947 = icmp eq i32 %946, %5
  br i1 %947, label %1166, label %908

948:                                              ; preds = %893
  %949 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 69, i32 4
  %950 = load i8, i8* %949, align 4
  %951 = icmp eq i8 %950, 0
  br i1 %951, label %1064, label %952

952:                                              ; preds = %948
  %953 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 8
  %954 = load %struct.MODE_INFO*, %struct.MODE_INFO** %953, align 8
  %955 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 7
  %956 = load %struct.MODE_INFO*, %struct.MODE_INFO** %955, align 8
  %957 = icmp eq %struct.MODE_INFO* %954, null
  br i1 %957, label %962, label %958

958:                                              ; preds = %952
  %959 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %954, i64 0, i32 5
  %960 = load i8, i8* %959, align 1
  %961 = sext i8 %960 to i64
  br label %962

962:                                              ; preds = %958, %952
  %963 = phi i64 [ %961, %958 ], [ 0, %952 ]
  %964 = icmp eq %struct.MODE_INFO* %956, null
  br i1 %964, label %969, label %965

965:                                              ; preds = %962
  %966 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %956, i64 0, i32 5
  %967 = load i8, i8* %966, align 1
  %968 = sext i8 %967 to i64
  br label %969

969:                                              ; preds = %965, %962
  %970 = phi i64 [ %968, %965 ], [ 0, %962 ]
  %971 = add nsw i64 %970, %963
  %972 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 69, i32 6, i64 %971
  %973 = load i8, i8* %972, align 1
  %974 = zext i8 %973 to i32
  %975 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %976 = load i32, i32* %975, align 8
  %977 = mul i32 %976, %974
  %978 = sub nuw nsw i32 256, %974
  %979 = add i32 %978, %977
  %980 = lshr i32 %979, 8
  %981 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %982 = load i32, i32* %981, align 4
  %983 = icmp slt i32 %982, 0
  br i1 %983, label %984, label %986

984:                                              ; preds = %969
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %985 = load i32, i32* %981, align 4
  br label %986

986:                                              ; preds = %984, %969
  %987 = phi i32 [ %985, %984 ], [ %982, %969 ]
  %988 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %12, i64 0, i32 0
  %989 = load i64, i64* %988, align 8
  %990 = zext i32 %980 to i64
  %991 = shl i64 %990, 56
  %992 = icmp ult i64 %989, %991
  br i1 %992, label %997, label %993

993:                                              ; preds = %986
  %994 = load i32, i32* %975, align 8
  %995 = sub i32 %994, %980
  %996 = sub i64 %989, %991
  br label %997

997:                                              ; preds = %993, %986
  %998 = phi i64 [ %996, %993 ], [ %989, %986 ]
  %999 = phi i32 [ %995, %993 ], [ %980, %986 ]
  %1000 = phi i32 [ 1, %993 ], [ 0, %986 ]
  %1001 = and i32 %999, 255
  %1002 = zext i32 %1001 to i64
  %1003 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1002
  %1004 = load i8, i8* %1003, align 1
  %1005 = zext i8 %1004 to i32
  %1006 = shl i32 %999, %1005
  %1007 = zext i8 %1004 to i64
  %1008 = shl i64 %998, %1007
  %1009 = sub nsw i32 %987, %1005
  store i64 %1008, i64* %988, align 8
  store i32 %1009, i32* %981, align 4
  store i32 %1006, i32* %975, align 8
  %1010 = trunc i32 %1000 to i8
  %1011 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 5
  store i8 %1010, i8* %1011, align 1
  %1012 = icmp eq i32 %1000, 0
  br i1 %1012, label %1013, label %1118

1013:                                             ; preds = %997
  %1014 = load i32, i32* %975, align 8
  %1015 = load i32, i32* %981, align 4
  br label %1016

1016:                                             ; preds = %1043, %1013
  %1017 = phi i32 [ %1015, %1013 ], [ %1055, %1043 ]
  %1018 = phi i32 [ %1014, %1013 ], [ %1052, %1043 ]
  %1019 = phi i8 [ 0, %1013 ], [ %1059, %1043 ]
  %1020 = sext i8 %1019 to i32
  %1021 = ashr i32 %1020, 1
  %1022 = sext i32 %1021 to i64
  %1023 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 69, i32 5, i64 %1022
  %1024 = load i8, i8* %1023, align 1
  %1025 = zext i8 %1024 to i32
  %1026 = mul i32 %1018, %1025
  %1027 = sub nuw nsw i32 256, %1025
  %1028 = add i32 %1027, %1026
  %1029 = lshr i32 %1028, 8
  %1030 = icmp slt i32 %1017, 0
  br i1 %1030, label %1031, label %1033

1031:                                             ; preds = %1016
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %1032 = load i32, i32* %981, align 4
  br label %1033

1033:                                             ; preds = %1031, %1016
  %1034 = phi i32 [ %1032, %1031 ], [ %1017, %1016 ]
  %1035 = load i64, i64* %988, align 8
  %1036 = zext i32 %1029 to i64
  %1037 = shl i64 %1036, 56
  %1038 = icmp ult i64 %1035, %1037
  br i1 %1038, label %1043, label %1039

1039:                                             ; preds = %1033
  %1040 = load i32, i32* %975, align 8
  %1041 = sub i32 %1040, %1029
  %1042 = sub i64 %1035, %1037
  br label %1043

1043:                                             ; preds = %1039, %1033
  %1044 = phi i64 [ %1042, %1039 ], [ %1035, %1033 ]
  %1045 = phi i32 [ %1041, %1039 ], [ %1029, %1033 ]
  %1046 = phi i32 [ 1, %1039 ], [ 0, %1033 ]
  %1047 = and i32 %1045, 255
  %1048 = zext i32 %1047 to i64
  %1049 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1048
  %1050 = load i8, i8* %1049, align 1
  %1051 = zext i8 %1050 to i32
  %1052 = shl i32 %1045, %1051
  %1053 = zext i8 %1050 to i64
  %1054 = shl i64 %1044, %1053
  %1055 = sub nsw i32 %1034, %1051
  store i64 %1054, i64* %988, align 8
  store i32 %1055, i32* %981, align 4
  store i32 %1052, i32* %975, align 8
  %1056 = add nuw nsw i32 %1046, %1020
  %1057 = sext i32 %1056 to i64
  %1058 = getelementptr inbounds [14 x i8], [14 x i8]* @vp9_segment_tree, i64 0, i64 %1057
  %1059 = load i8, i8* %1058, align 1
  %1060 = icmp sgt i8 %1059, 0
  br i1 %1060, label %1016, label %1061

1061:                                             ; preds = %1043
  %1062 = sext i8 %1059 to i32
  %1063 = sub nsw i32 0, %1062
  br label %1118

1064:                                             ; preds = %948
  %1065 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %1066 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %1067 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %12, i64 0, i32 0
  %1068 = load i32, i32* %1065, align 8
  %1069 = load i32, i32* %1066, align 4
  br label %1070

1070:                                             ; preds = %1097, %1064
  %1071 = phi i32 [ %1069, %1064 ], [ %1109, %1097 ]
  %1072 = phi i32 [ %1068, %1064 ], [ %1106, %1097 ]
  %1073 = phi i8 [ 0, %1064 ], [ %1113, %1097 ]
  %1074 = sext i8 %1073 to i32
  %1075 = ashr i32 %1074, 1
  %1076 = sext i32 %1075 to i64
  %1077 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 69, i32 5, i64 %1076
  %1078 = load i8, i8* %1077, align 1
  %1079 = zext i8 %1078 to i32
  %1080 = mul i32 %1072, %1079
  %1081 = sub nuw nsw i32 256, %1079
  %1082 = add i32 %1081, %1080
  %1083 = lshr i32 %1082, 8
  %1084 = icmp slt i32 %1071, 0
  br i1 %1084, label %1085, label %1087

1085:                                             ; preds = %1070
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %1086 = load i32, i32* %1066, align 4
  br label %1087

1087:                                             ; preds = %1085, %1070
  %1088 = phi i32 [ %1086, %1085 ], [ %1071, %1070 ]
  %1089 = load i64, i64* %1067, align 8
  %1090 = zext i32 %1083 to i64
  %1091 = shl i64 %1090, 56
  %1092 = icmp ult i64 %1089, %1091
  br i1 %1092, label %1097, label %1093

1093:                                             ; preds = %1087
  %1094 = load i32, i32* %1065, align 8
  %1095 = sub i32 %1094, %1083
  %1096 = sub i64 %1089, %1091
  br label %1097

1097:                                             ; preds = %1093, %1087
  %1098 = phi i64 [ %1096, %1093 ], [ %1089, %1087 ]
  %1099 = phi i32 [ %1095, %1093 ], [ %1083, %1087 ]
  %1100 = phi i32 [ 1, %1093 ], [ 0, %1087 ]
  %1101 = and i32 %1099, 255
  %1102 = zext i32 %1101 to i64
  %1103 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1102
  %1104 = load i8, i8* %1103, align 1
  %1105 = zext i8 %1104 to i32
  %1106 = shl i32 %1099, %1105
  %1107 = zext i8 %1104 to i64
  %1108 = shl i64 %1098, %1107
  %1109 = sub nsw i32 %1088, %1105
  store i64 %1108, i64* %1067, align 8
  store i32 %1109, i32* %1066, align 4
  store i32 %1106, i32* %1065, align 8
  %1110 = add nuw nsw i32 %1100, %1074
  %1111 = sext i32 %1110 to i64
  %1112 = getelementptr inbounds [14 x i8], [14 x i8]* @vp9_segment_tree, i64 0, i64 %1111
  %1113 = load i8, i8* %1112, align 1
  %1114 = icmp sgt i8 %1113, 0
  br i1 %1114, label %1070, label %1115

1115:                                             ; preds = %1097
  %1116 = sext i8 %1113 to i32
  %1117 = sub nsw i32 0, %1116
  br label %1118

1118:                                             ; preds = %1115, %1061, %997
  %1119 = phi i32 [ %1117, %1115 ], [ %1063, %1061 ], [ %894, %997 ]
  %1120 = icmp sgt i32 %5, 0
  br i1 %1120, label %1121, label %1166

1121:                                             ; preds = %1118
  %1122 = icmp sgt i32 %4, 0
  %1123 = trunc i32 %1119 to i8
  %1124 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 61
  %1125 = and i32 %4, 1
  %1126 = icmp eq i32 %4, 1
  %1127 = sub i32 %4, %1125
  %1128 = icmp eq i32 %1125, 0
  br label %1129

1129:                                             ; preds = %1163, %1121
  %1130 = phi i32 [ 0, %1121 ], [ %1164, %1163 ]
  br i1 %1122, label %1131, label %1163

1131:                                             ; preds = %1129
  br i1 %1126, label %1153, label %1132

1132:                                             ; preds = %1131, %1132
  %1133 = phi i32 [ %1150, %1132 ], [ 0, %1131 ]
  %1134 = phi i32 [ %1151, %1132 ], [ %1127, %1131 ]
  %1135 = load i8*, i8** %1124, align 8
  %1136 = load i32, i32* %22, align 8
  %1137 = mul nsw i32 %1136, %1130
  %1138 = add i32 %1133, %705
  %1139 = add i32 %1138, %1137
  %1140 = sext i32 %1139 to i64
  %1141 = getelementptr inbounds i8, i8* %1135, i64 %1140
  store i8 %1123, i8* %1141, align 1
  %1142 = or i32 %1133, 1
  %1143 = load i8*, i8** %1124, align 8
  %1144 = load i32, i32* %22, align 8
  %1145 = mul nsw i32 %1144, %1130
  %1146 = add i32 %1142, %705
  %1147 = add i32 %1146, %1145
  %1148 = sext i32 %1147 to i64
  %1149 = getelementptr inbounds i8, i8* %1143, i64 %1148
  store i8 %1123, i8* %1149, align 1
  %1150 = add nuw nsw i32 %1133, 2
  %1151 = add i32 %1134, -2
  %1152 = icmp eq i32 %1151, 0
  br i1 %1152, label %1153, label %1132

1153:                                             ; preds = %1132, %1131
  %1154 = phi i32 [ 0, %1131 ], [ %1150, %1132 ]
  br i1 %1128, label %1163, label %1155

1155:                                             ; preds = %1153
  %1156 = load i8*, i8** %1124, align 8
  %1157 = load i32, i32* %22, align 8
  %1158 = mul nsw i32 %1157, %1130
  %1159 = add i32 %1154, %705
  %1160 = add i32 %1159, %1158
  %1161 = sext i32 %1160 to i64
  %1162 = getelementptr inbounds i8, i8* %1156, i64 %1161
  store i8 %1123, i8* %1162, align 1
  br label %1163

1163:                                             ; preds = %1155, %1153, %1129
  %1164 = add nuw nsw i32 %1130, 1
  %1165 = icmp eq i32 %1164, %5
  br i1 %1165, label %1166, label %1129

1166:                                             ; preds = %1163, %945, %1118, %898, %699
  %1167 = phi i32 [ 0, %699 ], [ %894, %898 ], [ %1119, %1118 ], [ %894, %945 ], [ %1119, %1163 ]
  %1168 = trunc i32 %1167 to i8
  %1169 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 4
  store i8 %1168, i8* %1169, align 4
  %1170 = load i8, i8* %706, align 4
  %1171 = icmp eq i8 %1170, 0
  br i1 %1171, label %1180, label %1172

1172:                                             ; preds = %1166
  %1173 = shl i32 %1167, 24
  %1174 = ashr exact i32 %1173, 24
  %1175 = sext i32 %1174 to i64
  %1176 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 69, i32 8, i64 %1175
  %1177 = load i32, i32* %1176, align 4
  %1178 = and i32 %1177, 8
  %1179 = icmp eq i32 %1178, 0
  br i1 %1179, label %1180, label %1248

1180:                                             ; preds = %1172, %1166
  %1181 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 8
  %1182 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1181, align 8
  %1183 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 7
  %1184 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1183, align 8
  %1185 = icmp eq %struct.MODE_INFO* %1182, null
  br i1 %1185, label %1190, label %1186

1186:                                             ; preds = %1180
  %1187 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1182, i64 0, i32 3
  %1188 = load i8, i8* %1187, align 1
  %1189 = sext i8 %1188 to i64
  br label %1190

1190:                                             ; preds = %1186, %1180
  %1191 = phi i64 [ %1189, %1186 ], [ 0, %1180 ]
  %1192 = icmp eq %struct.MODE_INFO* %1184, null
  br i1 %1192, label %1197, label %1193

1193:                                             ; preds = %1190
  %1194 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1184, i64 0, i32 3
  %1195 = load i8, i8* %1194, align 1
  %1196 = sext i8 %1195 to i64
  br label %1197

1197:                                             ; preds = %1193, %1190
  %1198 = phi i64 [ %1196, %1193 ], [ 0, %1190 ]
  %1199 = add nsw i64 %1198, %1191
  %1200 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 73
  %1201 = load %struct.frame_contexts*, %struct.frame_contexts** %1200, align 8
  %1202 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1201, i64 0, i32 11, i64 %1199
  %1203 = load i8, i8* %1202, align 1
  %1204 = zext i8 %1203 to i32
  %1205 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %1206 = load i32, i32* %1205, align 8
  %1207 = mul i32 %1206, %1204
  %1208 = sub nuw nsw i32 256, %1204
  %1209 = add i32 %1208, %1207
  %1210 = lshr i32 %1209, 8
  %1211 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %1212 = load i32, i32* %1211, align 4
  %1213 = icmp slt i32 %1212, 0
  br i1 %1213, label %1214, label %1216

1214:                                             ; preds = %1197
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %1215 = load i32, i32* %1211, align 4
  br label %1216

1216:                                             ; preds = %1214, %1197
  %1217 = phi i32 [ %1215, %1214 ], [ %1212, %1197 ]
  %1218 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %12, i64 0, i32 0
  %1219 = load i64, i64* %1218, align 8
  %1220 = zext i32 %1210 to i64
  %1221 = shl i64 %1220, 56
  %1222 = icmp ult i64 %1219, %1221
  br i1 %1222, label %1227, label %1223

1223:                                             ; preds = %1216
  %1224 = load i32, i32* %1205, align 8
  %1225 = sub i32 %1224, %1210
  %1226 = sub i64 %1219, %1221
  br label %1227

1227:                                             ; preds = %1223, %1216
  %1228 = phi i64 [ %1226, %1223 ], [ %1219, %1216 ]
  %1229 = phi i32 [ %1225, %1223 ], [ %1210, %1216 ]
  %1230 = phi i32 [ 1, %1223 ], [ 0, %1216 ]
  %1231 = and i32 %1229, 255
  %1232 = zext i32 %1231 to i64
  %1233 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1232
  %1234 = load i8, i8* %1233, align 1
  %1235 = zext i8 %1234 to i32
  %1236 = shl i32 %1229, %1235
  %1237 = zext i8 %1234 to i64
  %1238 = shl i64 %1228, %1237
  %1239 = sub nsw i32 %1217, %1235
  store i64 %1238, i64* %1218, align 8
  store i32 %1239, i32* %1211, align 4
  store i32 %1236, i32* %1205, align 8
  %1240 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 3
  %1241 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %1240, align 8
  %1242 = icmp eq %struct.FRAME_COUNTS* %1241, null
  br i1 %1242, label %1248, label %1243

1243:                                             ; preds = %1227
  %1244 = zext i32 %1230 to i64
  %1245 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1241, i64 0, i32 12, i64 %1199, i64 %1244
  %1246 = load i32, i32* %1245, align 4
  %1247 = add i32 %1246, 1
  store i32 %1247, i32* %1245, align 4
  br label %1248

1248:                                             ; preds = %1243, %1227, %1172
  %1249 = phi i32 [ 1, %1172 ], [ %1230, %1227 ], [ %1230, %1243 ]
  %1250 = trunc i32 %1249 to i8
  %1251 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 3
  store i8 %1250, i8* %1251, align 1
  %1252 = load i8, i8* %706, align 4
  %1253 = icmp eq i8 %1252, 0
  br i1 %1253, label %1266, label %1254

1254:                                             ; preds = %1248
  %1255 = load i8, i8* %1169, align 4
  %1256 = sext i8 %1255 to i64
  %1257 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 69, i32 8, i64 %1256
  %1258 = load i32, i32* %1257, align 4
  %1259 = and i32 %1258, 4
  %1260 = icmp eq i32 %1259, 0
  br i1 %1260, label %1266, label %1261

1261:                                             ; preds = %1254
  %1262 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 69, i32 7, i64 %1256, i64 2
  %1263 = load i16, i16* %1262, align 2
  %1264 = icmp ne i16 %1263, 0
  %1265 = zext i1 %1264 to i32
  br label %1346

1266:                                             ; preds = %1254, %1248
  %1267 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 8
  %1268 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1267, align 8
  %1269 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 7
  %1270 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1269, align 8
  %1271 = icmp ne %struct.MODE_INFO* %1268, null
  %1272 = icmp ne %struct.MODE_INFO* %1270, null
  %1273 = and i1 %1271, %1272
  br i1 %1273, label %1274, label %1286

1274:                                             ; preds = %1266
  %1275 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1268, i64 0, i32 8, i64 0
  %1276 = load i8, i8* %1275, align 4
  %1277 = icmp sgt i8 %1276, 0
  %1278 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1270, i64 0, i32 8, i64 0
  %1279 = load i8, i8* %1278, align 4
  %1280 = icmp sgt i8 %1279, 0
  %1281 = or i1 %1277, %1280
  br i1 %1281, label %1282, label %1295

1282:                                             ; preds = %1274
  %1283 = and i1 %1277, %1280
  %1284 = xor i1 %1283, true
  %1285 = zext i1 %1284 to i32
  br label %1295

1286:                                             ; preds = %1266
  %1287 = or i1 %1271, %1272
  br i1 %1287, label %1288, label %1295

1288:                                             ; preds = %1286
  %1289 = select i1 %1271, %struct.MODE_INFO* %1268, %struct.MODE_INFO* %1270
  %1290 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1289, i64 0, i32 8, i64 0
  %1291 = load i8, i8* %1290, align 4
  %1292 = icmp slt i8 %1291, 1
  %1293 = zext i1 %1292 to i32
  %1294 = shl nuw nsw i32 %1293, 1
  br label %1295

1295:                                             ; preds = %1288, %1286, %1282, %1274
  %1296 = phi i32 [ %1294, %1288 ], [ %1285, %1282 ], [ 3, %1274 ], [ 0, %1286 ]
  %1297 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 73
  %1298 = load %struct.frame_contexts*, %struct.frame_contexts** %1297, align 8
  %1299 = sext i32 %1296 to i64
  %1300 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1298, i64 0, i32 6, i64 %1299
  %1301 = load i8, i8* %1300, align 1
  %1302 = zext i8 %1301 to i32
  %1303 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %1304 = load i32, i32* %1303, align 8
  %1305 = mul i32 %1304, %1302
  %1306 = sub nuw nsw i32 256, %1302
  %1307 = add i32 %1306, %1305
  %1308 = lshr i32 %1307, 8
  %1309 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %1310 = load i32, i32* %1309, align 4
  %1311 = icmp slt i32 %1310, 0
  br i1 %1311, label %1312, label %1314

1312:                                             ; preds = %1295
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %1313 = load i32, i32* %1309, align 4
  br label %1314

1314:                                             ; preds = %1312, %1295
  %1315 = phi i32 [ %1313, %1312 ], [ %1310, %1295 ]
  %1316 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %12, i64 0, i32 0
  %1317 = load i64, i64* %1316, align 8
  %1318 = zext i32 %1308 to i64
  %1319 = shl i64 %1318, 56
  %1320 = icmp ult i64 %1317, %1319
  br i1 %1320, label %1325, label %1321

1321:                                             ; preds = %1314
  %1322 = load i32, i32* %1303, align 8
  %1323 = sub i32 %1322, %1308
  %1324 = sub i64 %1317, %1319
  br label %1325

1325:                                             ; preds = %1321, %1314
  %1326 = phi i64 [ %1324, %1321 ], [ %1317, %1314 ]
  %1327 = phi i32 [ %1323, %1321 ], [ %1308, %1314 ]
  %1328 = phi i32 [ 1, %1321 ], [ 0, %1314 ]
  %1329 = and i32 %1327, 255
  %1330 = zext i32 %1329 to i64
  %1331 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1330
  %1332 = load i8, i8* %1331, align 1
  %1333 = zext i8 %1332 to i32
  %1334 = shl i32 %1327, %1333
  %1335 = zext i8 %1332 to i64
  %1336 = shl i64 %1326, %1335
  %1337 = sub nsw i32 %1315, %1333
  store i64 %1336, i64* %1316, align 8
  store i32 %1337, i32* %1309, align 4
  store i32 %1334, i32* %1303, align 8
  %1338 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 3
  %1339 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %1338, align 8
  %1340 = icmp eq %struct.FRAME_COUNTS* %1339, null
  br i1 %1340, label %1346, label %1341

1341:                                             ; preds = %1325
  %1342 = zext i32 %1328 to i64
  %1343 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1339, i64 0, i32 7, i64 %1299, i64 %1342
  %1344 = load i32, i32* %1343, align 4
  %1345 = add i32 %1344, 1
  store i32 %1345, i32* %1343, align 4
  br label %1346

1346:                                             ; preds = %1341, %1325, %1261
  %1347 = phi i32 [ %1265, %1261 ], [ %1328, %1325 ], [ %1328, %1341 ]
  %1348 = load i8, i8* %1251, align 1
  %1349 = icmp eq i8 %1348, 0
  %1350 = icmp eq i32 %1347, 0
  %1351 = or i1 %1350, %1349
  %1352 = zext i1 %1351 to i32
  %1353 = tail call fastcc zeroext i8 @read_tx_size(%struct.VP9Common* %14, %struct.macroblockd* %13, i32 %1352, %struct.vpx_reader* %12) #5
  %1354 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 2
  store i8 %1353, i8* %1354, align 2
  br i1 %1350, label %2052, label %1355

1355:                                             ; preds = %1346
  %1356 = bitcast i64* %8 to [2 x %union.int_mv]*
  %1357 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 0
  %1358 = load i8, i8* %1357, align 4
  %1359 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 29
  %1360 = load i32, i32* %1359, align 16
  %1361 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1361) #5
  store i64 0, i64* %8, align 8
  %1362 = zext i8 %1358 to i64
  %1363 = getelementptr inbounds [13 x [8 x %struct.position]], [13 x [8 x %struct.position]]* @mv_ref_blocks, i64 0, i64 %1362, i64 0
  %1364 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 8, i64 0
  %1365 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 73
  %1366 = load %struct.frame_contexts*, %struct.frame_contexts** %1365, align 8
  %1367 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 3
  %1368 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %1367, align 8
  %1369 = load i8, i8* %706, align 4
  %1370 = icmp eq i8 %1369, 0
  br i1 %1370, label %1383, label %1371

1371:                                             ; preds = %1355
  %1372 = load i8, i8* %1169, align 4
  %1373 = sext i8 %1372 to i64
  %1374 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 69, i32 8, i64 %1373
  %1375 = load i32, i32* %1374, align 4
  %1376 = and i32 %1375, 4
  %1377 = icmp eq i32 %1376, 0
  br i1 %1377, label %1383, label %1378

1378:                                             ; preds = %1371
  %1379 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 69, i32 7, i64 %1373, i64 2
  %1380 = load i16, i16* %1379, align 2
  %1381 = trunc i16 %1380 to i8
  store i8 %1381, i8* %1364, align 1
  %1382 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 8, i64 1
  store i8 -1, i8* %1382, align 1
  br label %1596

1383:                                             ; preds = %1371, %1355
  %1384 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 72
  %1385 = load i32, i32* %1384, align 16
  %1386 = icmp eq i32 %1385, 2
  br i1 %1386, label %1387, label %1436

1387:                                             ; preds = %1383
  %1388 = tail call i32 @vp9_get_reference_mode_context(%struct.VP9Common* %14, %struct.macroblockd* %13) #5
  %1389 = load %struct.frame_contexts*, %struct.frame_contexts** %1365, align 8
  %1390 = sext i32 %1388 to i64
  %1391 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1389, i64 0, i32 7, i64 %1390
  %1392 = load i8, i8* %1391, align 1
  %1393 = zext i8 %1392 to i32
  %1394 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %1395 = load i32, i32* %1394, align 8
  %1396 = mul i32 %1395, %1393
  %1397 = sub nuw nsw i32 256, %1393
  %1398 = add i32 %1397, %1396
  %1399 = lshr i32 %1398, 8
  %1400 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %1401 = load i32, i32* %1400, align 4
  %1402 = icmp slt i32 %1401, 0
  br i1 %1402, label %1403, label %1405

1403:                                             ; preds = %1387
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %1404 = load i32, i32* %1400, align 4
  br label %1405

1405:                                             ; preds = %1403, %1387
  %1406 = phi i32 [ %1404, %1403 ], [ %1401, %1387 ]
  %1407 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %12, i64 0, i32 0
  %1408 = load i64, i64* %1407, align 8
  %1409 = zext i32 %1399 to i64
  %1410 = shl i64 %1409, 56
  %1411 = icmp ult i64 %1408, %1410
  br i1 %1411, label %1416, label %1412

1412:                                             ; preds = %1405
  %1413 = load i32, i32* %1394, align 8
  %1414 = sub i32 %1413, %1399
  %1415 = sub i64 %1408, %1410
  br label %1416

1416:                                             ; preds = %1412, %1405
  %1417 = phi i64 [ %1415, %1412 ], [ %1408, %1405 ]
  %1418 = phi i32 [ %1414, %1412 ], [ %1399, %1405 ]
  %1419 = phi i32 [ 1, %1412 ], [ 0, %1405 ]
  %1420 = and i32 %1418, 255
  %1421 = zext i32 %1420 to i64
  %1422 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1421
  %1423 = load i8, i8* %1422, align 1
  %1424 = zext i8 %1423 to i32
  %1425 = shl i32 %1418, %1424
  %1426 = zext i8 %1423 to i64
  %1427 = shl i64 %1417, %1426
  %1428 = sub nsw i32 %1406, %1424
  store i64 %1427, i64* %1407, align 8
  store i32 %1428, i32* %1400, align 4
  store i32 %1425, i32* %1394, align 8
  %1429 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %1367, align 8
  %1430 = icmp eq %struct.FRAME_COUNTS* %1429, null
  br i1 %1430, label %1436, label %1431

1431:                                             ; preds = %1416
  %1432 = zext i32 %1419 to i64
  %1433 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1429, i64 0, i32 8, i64 %1390, i64 %1432
  %1434 = load i32, i32* %1433, align 4
  %1435 = add i32 %1434, 1
  store i32 %1435, i32* %1433, align 4
  br label %1436

1436:                                             ; preds = %1431, %1416, %1383
  %1437 = phi i32 [ %1419, %1416 ], [ %1419, %1431 ], [ %1385, %1383 ]
  switch i32 %1437, label %1596 [
    i32 1, label %1438
    i32 0, label %1498
  ]

1438:                                             ; preds = %1436
  %1439 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 70
  %1440 = load i8, i8* %1439, align 4
  %1441 = sext i8 %1440 to i64
  %1442 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 67, i64 %1441
  %1443 = load i32, i32* %1442, align 4
  %1444 = tail call i32 @vp9_get_pred_context_comp_ref_p(%struct.VP9Common* %14, %struct.macroblockd* %13) #5
  %1445 = sext i32 %1444 to i64
  %1446 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1366, i64 0, i32 9, i64 %1445
  %1447 = load i8, i8* %1446, align 1
  %1448 = zext i8 %1447 to i32
  %1449 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %1450 = load i32, i32* %1449, align 8
  %1451 = mul i32 %1450, %1448
  %1452 = sub nuw nsw i32 256, %1448
  %1453 = add i32 %1452, %1451
  %1454 = lshr i32 %1453, 8
  %1455 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %1456 = load i32, i32* %1455, align 4
  %1457 = icmp slt i32 %1456, 0
  br i1 %1457, label %1458, label %1460

1458:                                             ; preds = %1438
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %1459 = load i32, i32* %1455, align 4
  br label %1460

1460:                                             ; preds = %1458, %1438
  %1461 = phi i32 [ %1459, %1458 ], [ %1456, %1438 ]
  %1462 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %12, i64 0, i32 0
  %1463 = load i64, i64* %1462, align 8
  %1464 = zext i32 %1454 to i64
  %1465 = shl i64 %1464, 56
  %1466 = icmp ult i64 %1463, %1465
  br i1 %1466, label %1471, label %1467

1467:                                             ; preds = %1460
  %1468 = load i32, i32* %1449, align 8
  %1469 = sub i32 %1468, %1454
  %1470 = sub i64 %1463, %1465
  br label %1471

1471:                                             ; preds = %1467, %1460
  %1472 = phi i64 [ %1470, %1467 ], [ %1463, %1460 ]
  %1473 = phi i32 [ %1469, %1467 ], [ %1454, %1460 ]
  %1474 = phi i64 [ 1, %1467 ], [ 0, %1460 ]
  %1475 = and i32 %1473, 255
  %1476 = zext i32 %1475 to i64
  %1477 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1476
  %1478 = load i8, i8* %1477, align 1
  %1479 = zext i8 %1478 to i32
  %1480 = shl i32 %1473, %1479
  %1481 = zext i8 %1478 to i64
  %1482 = shl i64 %1472, %1481
  %1483 = sub nsw i32 %1461, %1479
  store i64 %1482, i64* %1462, align 8
  store i32 %1483, i32* %1455, align 4
  store i32 %1480, i32* %1449, align 8
  %1484 = icmp eq %struct.FRAME_COUNTS* %1368, null
  br i1 %1484, label %1489, label %1485

1485:                                             ; preds = %1471
  %1486 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1368, i64 0, i32 10, i64 %1445, i64 %1474
  %1487 = load i32, i32* %1486, align 4
  %1488 = add i32 %1487, 1
  store i32 %1488, i32* %1486, align 4
  br label %1489

1489:                                             ; preds = %1485, %1471
  %1490 = load i8, i8* %1439, align 4
  %1491 = sext i32 %1443 to i64
  %1492 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 8, i64 %1491
  store i8 %1490, i8* %1492, align 1
  %1493 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 71, i64 %1474
  %1494 = load i8, i8* %1493, align 1
  %1495 = icmp eq i32 %1443, 0
  %1496 = zext i1 %1495 to i64
  %1497 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 8, i64 %1496
  store i8 %1494, i8* %1497, align 1
  br label %1596

1498:                                             ; preds = %1436
  %1499 = tail call i32 @vp9_get_pred_context_single_ref_p1(%struct.macroblockd* %13) #5
  %1500 = sext i32 %1499 to i64
  %1501 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1366, i64 0, i32 8, i64 %1500, i64 0
  %1502 = load i8, i8* %1501, align 2
  %1503 = zext i8 %1502 to i32
  %1504 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %1505 = load i32, i32* %1504, align 8
  %1506 = mul i32 %1505, %1503
  %1507 = sub nuw nsw i32 256, %1503
  %1508 = add i32 %1507, %1506
  %1509 = lshr i32 %1508, 8
  %1510 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %1511 = load i32, i32* %1510, align 4
  %1512 = icmp slt i32 %1511, 0
  br i1 %1512, label %1513, label %1515

1513:                                             ; preds = %1498
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %1514 = load i32, i32* %1510, align 4
  br label %1515

1515:                                             ; preds = %1513, %1498
  %1516 = phi i32 [ %1514, %1513 ], [ %1511, %1498 ]
  %1517 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %12, i64 0, i32 0
  %1518 = load i64, i64* %1517, align 8
  %1519 = zext i32 %1509 to i64
  %1520 = shl i64 %1519, 56
  %1521 = icmp ult i64 %1518, %1520
  br i1 %1521, label %1526, label %1522

1522:                                             ; preds = %1515
  %1523 = load i32, i32* %1504, align 8
  %1524 = sub i32 %1523, %1509
  %1525 = sub i64 %1518, %1520
  br label %1526

1526:                                             ; preds = %1522, %1515
  %1527 = phi i64 [ %1525, %1522 ], [ %1518, %1515 ]
  %1528 = phi i32 [ %1524, %1522 ], [ %1509, %1515 ]
  %1529 = phi i32 [ 1, %1522 ], [ 0, %1515 ]
  %1530 = and i32 %1528, 255
  %1531 = zext i32 %1530 to i64
  %1532 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1531
  %1533 = load i8, i8* %1532, align 1
  %1534 = zext i8 %1533 to i32
  %1535 = shl i32 %1528, %1534
  %1536 = zext i8 %1533 to i64
  %1537 = shl i64 %1527, %1536
  %1538 = sub nsw i32 %1516, %1534
  store i64 %1537, i64* %1517, align 8
  store i32 %1538, i32* %1510, align 4
  store i32 %1535, i32* %1504, align 8
  %1539 = icmp ne %struct.FRAME_COUNTS* %1368, null
  br i1 %1539, label %1540, label %1545

1540:                                             ; preds = %1526
  %1541 = zext i32 %1529 to i64
  %1542 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1368, i64 0, i32 9, i64 %1500, i64 0, i64 %1541
  %1543 = load i32, i32* %1542, align 4
  %1544 = add i32 %1543, 1
  store i32 %1544, i32* %1542, align 4
  br label %1545

1545:                                             ; preds = %1540, %1526
  %1546 = icmp eq i32 %1529, 0
  br i1 %1546, label %1593, label %1547

1547:                                             ; preds = %1545
  %1548 = tail call i32 @vp9_get_pred_context_single_ref_p2(%struct.macroblockd* %13) #5
  %1549 = sext i32 %1548 to i64
  %1550 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1366, i64 0, i32 8, i64 %1549, i64 1
  %1551 = load i8, i8* %1550, align 1
  %1552 = zext i8 %1551 to i32
  %1553 = load i32, i32* %1504, align 8
  %1554 = mul i32 %1553, %1552
  %1555 = sub nuw nsw i32 256, %1552
  %1556 = add i32 %1555, %1554
  %1557 = lshr i32 %1556, 8
  %1558 = load i32, i32* %1510, align 4
  %1559 = icmp slt i32 %1558, 0
  br i1 %1559, label %1560, label %1562

1560:                                             ; preds = %1547
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %1561 = load i32, i32* %1510, align 4
  br label %1562

1562:                                             ; preds = %1560, %1547
  %1563 = phi i32 [ %1561, %1560 ], [ %1558, %1547 ]
  %1564 = load i64, i64* %1517, align 8
  %1565 = zext i32 %1557 to i64
  %1566 = shl i64 %1565, 56
  %1567 = icmp ult i64 %1564, %1566
  br i1 %1567, label %1572, label %1568

1568:                                             ; preds = %1562
  %1569 = load i32, i32* %1504, align 8
  %1570 = sub i32 %1569, %1557
  %1571 = sub i64 %1564, %1566
  br label %1572

1572:                                             ; preds = %1568, %1562
  %1573 = phi i64 [ %1571, %1568 ], [ %1564, %1562 ]
  %1574 = phi i32 [ %1570, %1568 ], [ %1557, %1562 ]
  %1575 = phi i32 [ 1, %1568 ], [ 0, %1562 ]
  %1576 = and i32 %1574, 255
  %1577 = zext i32 %1576 to i64
  %1578 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1577
  %1579 = load i8, i8* %1578, align 1
  %1580 = zext i8 %1579 to i32
  %1581 = shl i32 %1574, %1580
  %1582 = zext i8 %1579 to i64
  %1583 = shl i64 %1573, %1582
  %1584 = sub nsw i32 %1563, %1580
  store i64 %1583, i64* %1517, align 8
  store i32 %1584, i32* %1510, align 4
  store i32 %1581, i32* %1504, align 8
  br i1 %1539, label %1585, label %1590

1585:                                             ; preds = %1572
  %1586 = zext i32 %1575 to i64
  %1587 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1368, i64 0, i32 9, i64 %1549, i64 1, i64 %1586
  %1588 = load i32, i32* %1587, align 4
  %1589 = add i32 %1588, 1
  store i32 %1589, i32* %1587, align 4
  br label %1590

1590:                                             ; preds = %1585, %1572
  %1591 = icmp eq i32 %1575, 0
  %1592 = select i1 %1591, i8 2, i8 3
  br label %1593

1593:                                             ; preds = %1590, %1545
  %1594 = phi i8 [ %1592, %1590 ], [ 1, %1545 ]
  store i8 %1594, i8* %1364, align 1
  %1595 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 8, i64 1
  store i8 -1, i8* %1595, align 1
  br label %1596

1596:                                             ; preds = %1593, %1489, %1436, %1378
  %1597 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 8, i64 1
  %1598 = load i8, i8* %1597, align 1
  %1599 = icmp sgt i8 %1598, 0
  %1600 = zext i1 %1599 to i32
  %1601 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 33
  %1602 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 4, i32 2
  %1603 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 4, i32 3
  %1604 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 5
  %1605 = getelementptr inbounds %struct.position, %struct.position* %1363, i64 0, i32 0
  %1606 = load i32, i32* %1605, align 16
  %1607 = add nsw i32 %1606, %2
  %1608 = icmp slt i32 %1607, 0
  br i1 %1608, label %1634, label %1609

1609:                                             ; preds = %1596
  %1610 = load i32, i32* %1601, align 16
  %1611 = getelementptr inbounds [13 x [8 x %struct.position]], [13 x [8 x %struct.position]]* @mv_ref_blocks, i64 0, i64 %1362, i64 0, i32 1
  %1612 = load i32, i32* %1611, align 4
  %1613 = add nsw i32 %1612, %3
  %1614 = load i32, i32* %1602, align 4
  %1615 = icmp sge i32 %1613, %1614
  %1616 = icmp slt i32 %1607, %1610
  %1617 = and i1 %1616, %1615
  br i1 %1617, label %1618, label %1634

1618:                                             ; preds = %1609
  %1619 = load i32, i32* %1603, align 4
  %1620 = icmp slt i32 %1613, %1619
  br i1 %1620, label %1621, label %1634

1621:                                             ; preds = %1618
  %1622 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %15, align 8
  %1623 = load i32, i32* %1604, align 8
  %1624 = mul nsw i32 %1623, %1606
  %1625 = add nsw i32 %1624, %1612
  %1626 = sext i32 %1625 to i64
  %1627 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %1622, i64 %1626
  %1628 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1627, align 8
  %1629 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1628, i64 0, i32 1
  %1630 = load i8, i8* %1629, align 1
  %1631 = zext i8 %1630 to i64
  %1632 = getelementptr inbounds [14 x i32], [14 x i32]* @mode_2_counter, i64 0, i64 %1631
  %1633 = load i32, i32* %1632, align 4
  br label %1634

1634:                                             ; preds = %1621, %1618, %1609, %1596
  %1635 = phi i32 [ %1633, %1621 ], [ 0, %1618 ], [ 0, %1609 ], [ 0, %1596 ]
  %1636 = getelementptr inbounds [13 x [8 x %struct.position]], [13 x [8 x %struct.position]]* @mv_ref_blocks, i64 0, i64 %1362, i64 1, i32 0
  %1637 = load i32, i32* %1636, align 8
  %1638 = add nsw i32 %1637, %2
  %1639 = icmp slt i32 %1638, 0
  br i1 %1639, label %1666, label %1640

1640:                                             ; preds = %1634
  %1641 = load i32, i32* %1601, align 16
  %1642 = getelementptr inbounds [13 x [8 x %struct.position]], [13 x [8 x %struct.position]]* @mv_ref_blocks, i64 0, i64 %1362, i64 1, i32 1
  %1643 = load i32, i32* %1642, align 4
  %1644 = add nsw i32 %1643, %3
  %1645 = load i32, i32* %1602, align 4
  %1646 = icmp sge i32 %1644, %1645
  %1647 = icmp slt i32 %1638, %1641
  %1648 = and i1 %1647, %1646
  br i1 %1648, label %1649, label %1666

1649:                                             ; preds = %1640
  %1650 = load i32, i32* %1603, align 4
  %1651 = icmp slt i32 %1644, %1650
  br i1 %1651, label %1652, label %1666

1652:                                             ; preds = %1649
  %1653 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %15, align 8
  %1654 = load i32, i32* %1604, align 8
  %1655 = mul nsw i32 %1654, %1637
  %1656 = add nsw i32 %1655, %1643
  %1657 = sext i32 %1656 to i64
  %1658 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %1653, i64 %1657
  %1659 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1658, align 8
  %1660 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1659, i64 0, i32 1
  %1661 = load i8, i8* %1660, align 1
  %1662 = zext i8 %1661 to i64
  %1663 = getelementptr inbounds [14 x i32], [14 x i32]* @mode_2_counter, i64 0, i64 %1662
  %1664 = load i32, i32* %1663, align 4
  %1665 = add nsw i32 %1664, %1635
  br label %1666

1666:                                             ; preds = %1652, %1649, %1640, %1634
  %1667 = phi i32 [ %1665, %1652 ], [ %1635, %1649 ], [ %1635, %1640 ], [ %1635, %1634 ]
  %1668 = sext i32 %1667 to i64
  %1669 = getelementptr inbounds [19 x i32], [19 x i32]* @counter_to_context, i64 0, i64 %1668
  %1670 = load i32, i32* %1669, align 4
  %1671 = load i8, i8* %706, align 4
  %1672 = icmp eq i8 %1671, 0
  br i1 %1672, label %1686, label %1673

1673:                                             ; preds = %1666
  %1674 = load i8, i8* %1169, align 4
  %1675 = sext i8 %1674 to i64
  %1676 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 69, i32 8, i64 %1675
  %1677 = load i32, i32* %1676, align 4
  %1678 = and i32 %1677, 8
  %1679 = icmp eq i32 %1678, 0
  br i1 %1679, label %1686, label %1680

1680:                                             ; preds = %1673
  %1681 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 1
  store i8 12, i8* %1681, align 1
  %1682 = icmp ult i8 %1358, 3
  br i1 %1682, label %1683, label %1692

1683:                                             ; preds = %1680
  %1684 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 26
  %1685 = load %struct.vpx_internal_error_info*, %struct.vpx_internal_error_info** %1684, align 8
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %1685, i32 5, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0)) #5
  br label %2051

1686:                                             ; preds = %1673, %1666
  %1687 = icmp ugt i8 %1358, 2
  br i1 %1687, label %1688, label %1692

1688:                                             ; preds = %1686
  %1689 = and i32 %1670, 255
  %1690 = tail call fastcc zeroext i8 @read_inter_mode(%struct.VP9Common* %14, %struct.macroblockd* %13, %struct.vpx_reader* %12, i32 %1689) #5
  %1691 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 1
  store i8 %1690, i8* %1691, align 1
  br label %1692

1692:                                             ; preds = %1688, %1686, %1680
  %1693 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 63
  %1694 = load i8, i8* %1693, align 4
  %1695 = icmp eq i8 %1694, 4
  br i1 %1695, label %1696, label %1787

1696:                                             ; preds = %1692
  %1697 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 7
  %1698 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1697, align 8
  %1699 = icmp eq %struct.MODE_INFO* %1698, null
  br i1 %1699, label %1704, label %1700

1700:                                             ; preds = %1696
  %1701 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1698, i64 0, i32 7
  %1702 = load i8, i8* %1701, align 1
  %1703 = zext i8 %1702 to i32
  br label %1704

1704:                                             ; preds = %1700, %1696
  %1705 = phi i32 [ %1703, %1700 ], [ 3, %1696 ]
  %1706 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 8
  %1707 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1706, align 8
  %1708 = icmp eq %struct.MODE_INFO* %1707, null
  br i1 %1708, label %1713, label %1709

1709:                                             ; preds = %1704
  %1710 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1707, i64 0, i32 7
  %1711 = load i8, i8* %1710, align 1
  %1712 = zext i8 %1711 to i32
  br label %1713

1713:                                             ; preds = %1709, %1704
  %1714 = phi i32 [ %1712, %1709 ], [ 3, %1704 ]
  %1715 = icmp eq i32 %1705, %1714
  br i1 %1715, label %1721, label %1716

1716:                                             ; preds = %1713
  %1717 = icmp eq i32 %1705, 3
  br i1 %1717, label %1721, label %1718

1718:                                             ; preds = %1716
  %1719 = icmp eq i32 %1714, 3
  %1720 = select i1 %1719, i32 %1705, i32 3
  br label %1721

1721:                                             ; preds = %1718, %1716, %1713
  %1722 = phi i32 [ %1705, %1713 ], [ %1714, %1716 ], [ %1720, %1718 ]
  %1723 = load %struct.frame_contexts*, %struct.frame_contexts** %1365, align 8
  %1724 = sext i32 %1722 to i64
  %1725 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %1726 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %1727 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %12, i64 0, i32 0
  %1728 = load i32, i32* %1725, align 8
  %1729 = load i32, i32* %1726, align 4
  br label %1730

1730:                                             ; preds = %1757, %1721
  %1731 = phi i32 [ %1729, %1721 ], [ %1769, %1757 ]
  %1732 = phi i32 [ %1728, %1721 ], [ %1766, %1757 ]
  %1733 = phi i8 [ 0, %1721 ], [ %1773, %1757 ]
  %1734 = sext i8 %1733 to i32
  %1735 = ashr i32 %1734, 1
  %1736 = sext i32 %1735 to i64
  %1737 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %1723, i64 0, i32 4, i64 %1724, i64 %1736
  %1738 = load i8, i8* %1737, align 1
  %1739 = zext i8 %1738 to i32
  %1740 = mul i32 %1732, %1739
  %1741 = sub nuw nsw i32 256, %1739
  %1742 = add i32 %1741, %1740
  %1743 = lshr i32 %1742, 8
  %1744 = icmp slt i32 %1731, 0
  br i1 %1744, label %1745, label %1747

1745:                                             ; preds = %1730
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %1746 = load i32, i32* %1726, align 4
  br label %1747

1747:                                             ; preds = %1745, %1730
  %1748 = phi i32 [ %1746, %1745 ], [ %1731, %1730 ]
  %1749 = load i64, i64* %1727, align 8
  %1750 = zext i32 %1743 to i64
  %1751 = shl i64 %1750, 56
  %1752 = icmp ult i64 %1749, %1751
  br i1 %1752, label %1757, label %1753

1753:                                             ; preds = %1747
  %1754 = load i32, i32* %1725, align 8
  %1755 = sub i32 %1754, %1743
  %1756 = sub i64 %1749, %1751
  br label %1757

1757:                                             ; preds = %1753, %1747
  %1758 = phi i64 [ %1756, %1753 ], [ %1749, %1747 ]
  %1759 = phi i32 [ %1755, %1753 ], [ %1743, %1747 ]
  %1760 = phi i32 [ 1, %1753 ], [ 0, %1747 ]
  %1761 = and i32 %1759, 255
  %1762 = zext i32 %1761 to i64
  %1763 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %1762
  %1764 = load i8, i8* %1763, align 1
  %1765 = zext i8 %1764 to i32
  %1766 = shl i32 %1759, %1765
  %1767 = zext i8 %1764 to i64
  %1768 = shl i64 %1758, %1767
  %1769 = sub nsw i32 %1748, %1765
  store i64 %1768, i64* %1727, align 8
  store i32 %1769, i32* %1726, align 4
  store i32 %1766, i32* %1725, align 8
  %1770 = add nuw nsw i32 %1760, %1734
  %1771 = sext i32 %1770 to i64
  %1772 = getelementptr inbounds [4 x i8], [4 x i8]* @vp9_switchable_interp_tree, i64 0, i64 %1771
  %1773 = load i8, i8* %1772, align 1
  %1774 = icmp sgt i8 %1773, 0
  br i1 %1774, label %1730, label %1775

1775:                                             ; preds = %1757
  %1776 = sext i8 %1773 to i32
  %1777 = sub nsw i32 0, %1776
  %1778 = trunc i32 %1777 to i8
  %1779 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %1367, align 8
  %1780 = icmp eq %struct.FRAME_COUNTS* %1779, null
  br i1 %1780, label %1787, label %1781

1781:                                             ; preds = %1775
  %1782 = and i32 %1777, 255
  %1783 = zext i32 %1782 to i64
  %1784 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %1779, i64 0, i32 5, i64 %1724, i64 %1783
  %1785 = load i32, i32* %1784, align 4
  %1786 = add i32 %1785, 1
  store i32 %1786, i32* %1784, align 4
  br label %1787

1787:                                             ; preds = %1781, %1775, %1692
  %1788 = phi i8 [ %1694, %1692 ], [ %1778, %1775 ], [ %1778, %1781 ]
  %1789 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 7
  store i8 %1788, i8* %1789, align 1
  %1790 = icmp ult i8 %1358, 3
  br i1 %1790, label %1791, label %1981

1791:                                             ; preds = %1787
  %1792 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 1
  %1793 = load i8, i8* %1792, align 8
  %1794 = zext i8 %1793 to i32
  %1795 = shl i32 1, %1794
  %1796 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 2
  %1797 = load i8, i8* %1796, align 1
  %1798 = zext i8 %1797 to i32
  %1799 = shl i32 1, %1798
  %1800 = bitcast [2 x %union.int_mv]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1800) #5
  %1801 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %9, i64 0, i64 0
  %1802 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %9, i64 0, i64 0, i32 0
  store i32 -1431655766, i32* %1802, align 4
  %1803 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %9, i64 0, i64 1, i32 0
  store i32 -2147450880, i32* %1803, align 4
  %1804 = and i32 %1670, 255
  %1805 = bitcast [2 x %union.int_mv]* %10 to i8*
  %1806 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %10, i64 0, i64 0
  %1807 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %10, i64 0, i64 0, i32 0
  %1808 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %10, i64 0, i64 1, i32 0
  %1809 = bitcast [2 x %union.int_mv]* %10 to %struct.mv*
  %1810 = icmp eq i32 %1360, 0
  %1811 = bitcast [2 x %union.int_mv]* %10 to i16*
  %1812 = getelementptr inbounds %struct.mv, %struct.mv* %1809, i64 0, i32 1
  %1813 = bitcast [2 x %union.int_mv]* %7 to i8*
  %1814 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %7, i64 0, i64 0
  %1815 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %7, i64 0, i64 0, i32 0
  %1816 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %7, i64 0, i64 1, i32 0
  %1817 = bitcast i64* %8 to %union.int_mv*
  %1818 = icmp eq i8 %1797, 1
  %1819 = icmp eq i8 %1793, 1
  %1820 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 25
  %1821 = sext i32 %1795 to i64
  %1822 = sext i32 %1799 to i64
  %1823 = select i1 %1599, i64 2, i64 1
  br label %1824

1824:                                             ; preds = %1971, %1791
  %1825 = phi i64 [ 0, %1791 ], [ %1972, %1971 ]
  %1826 = phi i32 [ 0, %1791 ], [ %1950, %1971 ]
  %1827 = trunc i64 %1825 to i32
  %1828 = shl nsw i32 %1827, 1
  %1829 = sext i32 %1828 to i64
  br label %1830

1830:                                             ; preds = %1968, %1824
  %1831 = phi i64 [ 0, %1824 ], [ %1969, %1968 ]
  %1832 = phi i32 [ %1826, %1824 ], [ %1950, %1968 ]
  %1833 = add nsw i64 %1831, %1829
  %1834 = call fastcc zeroext i8 @read_inter_mode(%struct.VP9Common* %14, %struct.macroblockd* %13, %struct.vpx_reader* %12, i32 %1804) #5
  %1835 = and i8 %1834, -2
  %1836 = icmp eq i8 %1835, 10
  br i1 %1836, label %1837, label %1906

1837:                                             ; preds = %1830
  %1838 = icmp eq i8 %1834, 10
  %1839 = trunc i64 %1833 to i32
  br label %1840

1840:                                             ; preds = %1903, %1837
  %1841 = phi i64 [ %1904, %1903 ], [ 0, %1837 ]
  %1842 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %9, i64 0, i64 %1841
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1813) #5
  store i32 -1431655766, i32* %1815, align 4
  store i32 -1431655766, i32* %1816, align 4
  %1843 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %15, align 8
  %1844 = load %struct.MODE_INFO*, %struct.MODE_INFO** %1843, align 8
  switch i32 %1839, label %1903 [
    i32 0, label %1845
    i32 1, label %1854
    i32 2, label %1854
    i32 3, label %1873
  ]

1845:                                             ; preds = %1840
  %1846 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1844, i64 0, i32 8, i64 %1841
  %1847 = load i8, i8* %1846, align 1
  %1848 = call fastcc i32 @dec_find_mv_refs(%struct.VP9Common* %14, %struct.macroblockd* %13, i8 zeroext %1834, i8 signext %1847, %struct.position* %1363, %union.int_mv* nonnull %1814, i32 %2, i32 %3, i32 0) #5
  %1849 = add nsw i32 %1848, -1
  %1850 = sext i32 %1849 to i64
  %1851 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %7, i64 0, i64 %1850, i32 0
  %1852 = load i32, i32* %1851, align 4
  %1853 = getelementptr inbounds %union.int_mv, %union.int_mv* %1842, i64 0, i32 0
  store i32 %1852, i32* %1853, align 4
  br label %1903

1854:                                             ; preds = %1840, %1840
  br i1 %1838, label %1855, label %1859

1855:                                             ; preds = %1854
  %1856 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1844, i64 0, i32 10, i64 0, i32 1, i64 %1841, i32 0
  %1857 = load i32, i32* %1856, align 4
  %1858 = getelementptr inbounds %union.int_mv, %union.int_mv* %1842, i64 0, i32 0
  store i32 %1857, i32* %1858, align 4
  br label %1903

1859:                                             ; preds = %1854
  %1860 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1844, i64 0, i32 8, i64 %1841
  %1861 = load i8, i8* %1860, align 1
  %1862 = call fastcc i32 @dec_find_mv_refs(%struct.VP9Common* %14, %struct.macroblockd* %13, i8 zeroext %1834, i8 signext %1861, %struct.position* %1363, %union.int_mv* nonnull %1814, i32 %2, i32 %3, i32 %1839) #5
  %1863 = getelementptr inbounds %union.int_mv, %union.int_mv* %1842, i64 0, i32 0
  store i32 0, i32* %1863, align 4
  %1864 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1844, i64 0, i32 10, i64 0, i32 1, i64 %1841, i32 0
  %1865 = load i32, i32* %1864, align 4
  %1866 = load i32, i32* %1815, align 4
  %1867 = icmp eq i32 %1865, %1866
  br i1 %1867, label %1868, label %1871

1868:                                             ; preds = %1859
  %1869 = load i32, i32* %1816, align 4
  %1870 = icmp eq i32 %1865, %1869
  br i1 %1870, label %1903, label %1871

1871:                                             ; preds = %1868, %1859
  %1872 = phi i32 [ %1866, %1859 ], [ %1869, %1868 ]
  store i32 %1872, i32* %1863, align 4
  br label %1903

1873:                                             ; preds = %1840
  br i1 %1838, label %1874, label %1878

1874:                                             ; preds = %1873
  %1875 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1844, i64 0, i32 10, i64 2, i32 1, i64 %1841, i32 0
  %1876 = load i32, i32* %1875, align 4
  %1877 = getelementptr inbounds %union.int_mv, %union.int_mv* %1842, i64 0, i32 0
  store i32 %1876, i32* %1877, align 4
  br label %1903

1878:                                             ; preds = %1873
  %1879 = getelementptr inbounds %union.int_mv, %union.int_mv* %1842, i64 0, i32 0
  store i32 0, i32* %1879, align 4
  %1880 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1844, i64 0, i32 10, i64 2, i32 1, i64 %1841, i32 0
  %1881 = load i32, i32* %1880, align 4
  %1882 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1844, i64 0, i32 10, i64 1, i32 1, i64 %1841, i32 0
  %1883 = load i32, i32* %1882, align 4
  %1884 = icmp eq i32 %1881, %1883
  br i1 %1884, label %1886, label %1885

1885:                                             ; preds = %1878
  store i32 %1883, i32* %1879, align 4
  br label %1903

1886:                                             ; preds = %1878
  %1887 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1844, i64 0, i32 10, i64 0, i32 1, i64 %1841, i32 0
  %1888 = load i32, i32* %1887, align 4
  %1889 = icmp eq i32 %1881, %1888
  br i1 %1889, label %1891, label %1890

1890:                                             ; preds = %1886
  store i32 %1888, i32* %1879, align 4
  br label %1903

1891:                                             ; preds = %1886
  %1892 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1844, i64 0, i32 8, i64 %1841
  %1893 = load i8, i8* %1892, align 1
  %1894 = call fastcc i32 @dec_find_mv_refs(%struct.VP9Common* %14, %struct.macroblockd* %13, i8 zeroext %1834, i8 signext %1893, %struct.position* %1363, %union.int_mv* nonnull %1814, i32 %2, i32 %3, i32 3) #5
  %1895 = load i32, i32* %1880, align 4
  %1896 = load i32, i32* %1815, align 4
  %1897 = icmp eq i32 %1895, %1896
  br i1 %1897, label %1898, label %1901

1898:                                             ; preds = %1891
  %1899 = load i32, i32* %1816, align 4
  %1900 = icmp eq i32 %1895, %1899
  br i1 %1900, label %1903, label %1901

1901:                                             ; preds = %1898, %1891
  %1902 = phi i32 [ %1896, %1891 ], [ %1899, %1898 ]
  store i32 %1902, i32* %1879, align 4
  br label %1903

1903:                                             ; preds = %1901, %1898, %1890, %1885, %1874, %1871, %1868, %1855, %1845, %1840
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1813) #5
  %1904 = add nuw nsw i64 %1841, 1
  %1905 = icmp eq i64 %1904, %1823
  br i1 %1905, label %1949, label %1840

1906:                                             ; preds = %1830
  %1907 = icmp ne i8 %1834, 13
  %1908 = icmp ne i32 %1832, 0
  %1909 = or i1 %1908, %1907
  br i1 %1909, label %1949, label %1910

1910:                                             ; preds = %1906, %1944
  %1911 = phi i64 [ %1947, %1944 ], [ 0, %1906 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1805) #5
  store i32 -1431655766, i32* %1807, align 4
  store i32 -1431655766, i32* %1808, align 4
  %1912 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 8, i64 %1911
  %1913 = load i8, i8* %1912, align 1
  %1914 = call fastcc i32 @dec_find_mv_refs(%struct.VP9Common* %14, %struct.macroblockd* %13, i8 zeroext 13, i8 signext %1913, %struct.position* %1363, %union.int_mv* nonnull %1806, i32 %2, i32 %3, i32 -1) #5
  %1915 = load i16, i16* %1811, align 4
  br i1 %1810, label %1929, label %1916

1916:                                             ; preds = %1910
  %1917 = sext i16 %1915 to i32
  %1918 = icmp slt i32 %1917, 0
  %1919 = sub nsw i32 0, %1917
  %1920 = select i1 %1918, i32 %1919, i32 %1917
  %1921 = icmp slt i32 %1920, 64
  br i1 %1921, label %1922, label %1929

1922:                                             ; preds = %1916
  %1923 = load i16, i16* %1812, align 2
  %1924 = sext i16 %1923 to i32
  %1925 = icmp slt i32 %1924, 0
  %1926 = sub nsw i32 0, %1924
  %1927 = select i1 %1925, i32 %1926, i32 %1924
  %1928 = icmp slt i32 %1927, 64
  br i1 %1928, label %1944, label %1929

1929:                                             ; preds = %1922, %1916, %1910
  %1930 = and i16 %1915, 1
  %1931 = icmp eq i16 %1930, 0
  br i1 %1931, label %1936, label %1932

1932:                                             ; preds = %1929
  %1933 = icmp sgt i16 %1915, 0
  %1934 = select i1 %1933, i16 -1, i16 1
  %1935 = add i16 %1934, %1915
  store i16 %1935, i16* %1811, align 4
  br label %1936

1936:                                             ; preds = %1932, %1929
  %1937 = load i16, i16* %1812, align 2
  %1938 = and i16 %1937, 1
  %1939 = icmp eq i16 %1938, 0
  br i1 %1939, label %1944, label %1940

1940:                                             ; preds = %1936
  %1941 = icmp sgt i16 %1937, 0
  %1942 = select i1 %1941, i16 -1, i16 1
  %1943 = add i16 %1942, %1937
  store i16 %1943, i16* %1812, align 2
  br label %1944

1944:                                             ; preds = %1940, %1936, %1922
  %1945 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %1356, i64 0, i64 %1911, i32 0
  %1946 = load i32, i32* %1807, align 4
  store i32 %1946, i32* %1945, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1805) #5
  %1947 = add nuw nsw i64 %1911, 1
  %1948 = icmp eq i64 %1947, %1823
  br i1 %1948, label %1949, label %1910

1949:                                             ; preds = %1944, %1903, %1906
  %1950 = phi i32 [ %1832, %1906 ], [ %1832, %1903 ], [ 1, %1944 ]
  %1951 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 %1833
  %1952 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 %1833, i32 1, i64 0
  %1953 = call fastcc i32 @assign_mv(%struct.VP9Common* %14, %struct.macroblockd* %13, i8 zeroext %1834, %union.int_mv* %1952, %union.int_mv* nonnull %1817, %union.int_mv* nonnull %1801, i32 %1600, i32 %1360, %struct.vpx_reader* %12) #5
  %1954 = icmp eq i32 %1953, 0
  br i1 %1954, label %1955, label %1958

1955:                                             ; preds = %1949
  %1956 = load i32, i32* %1820, align 8
  %1957 = or i32 %1956, 1
  store i32 %1957, i32* %1820, align 8
  br label %1971

1958:                                             ; preds = %1949
  br i1 %1818, label %1959, label %1963

1959:                                             ; preds = %1958
  %1960 = add nsw i64 %1833, 2
  %1961 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 %1960, i32 0
  %1962 = getelementptr inbounds %struct.b_mode_info, %struct.b_mode_info* %1951, i64 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1961, i8* align 4 %1962, i64 12, i1 false) #5
  br label %1963

1963:                                             ; preds = %1959, %1958
  br i1 %1819, label %1964, label %1968

1964:                                             ; preds = %1963
  %1965 = add nsw i64 %1833, 1
  %1966 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 %1965, i32 0
  %1967 = getelementptr inbounds %struct.b_mode_info, %struct.b_mode_info* %1951, i64 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1966, i8* align 4 %1967, i64 12, i1 false) #5
  br label %1968

1968:                                             ; preds = %1964, %1963
  %1969 = add i64 %1831, %1821
  %1970 = icmp slt i64 %1969, 2
  br i1 %1970, label %1830, label %1971

1971:                                             ; preds = %1968, %1955
  %1972 = add i64 %1825, %1822
  %1973 = icmp slt i64 %1972, 2
  br i1 %1973, label %1824, label %1974

1974:                                             ; preds = %1971
  %1975 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 1
  store i8 %1834, i8* %1975, align 1
  %1976 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 9, i64 0
  %1977 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 3, i32 1, i64 0
  %1978 = bitcast %union.int_mv* %1977 to i64*
  %1979 = bitcast %union.int_mv* %1976 to i64*
  %1980 = load i64, i64* %1978, align 4
  store i64 %1980, i64* %1979, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1800) #5
  br label %2051

1981:                                             ; preds = %1787
  %1982 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 1
  %1983 = load i8, i8* %1982, align 1
  %1984 = icmp eq i8 %1983, 12
  br i1 %1984, label %2041, label %1985

1985:                                             ; preds = %1981
  %1986 = bitcast [2 x %union.int_mv]* %11 to i8*
  %1987 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %11, i64 0, i64 0
  %1988 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %11, i64 0, i64 0, i32 0
  %1989 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %11, i64 0, i64 1, i32 0
  %1990 = icmp eq i32 %1360, 0
  %1991 = select i1 %1599, i64 2, i64 1
  br label %1992

1992:                                             ; preds = %2034, %1985
  %1993 = phi i8 [ %1983, %1985 ], [ %2040, %2034 ]
  %1994 = phi i64 [ 0, %1985 ], [ %2038, %2034 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1986) #5
  store i32 -1431655766, i32* %1988, align 4
  store i32 -1431655766, i32* %1989, align 4
  %1995 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 8, i64 %1994
  %1996 = load i8, i8* %1995, align 1
  %1997 = call fastcc i32 @dec_find_mv_refs(%struct.VP9Common* %14, %struct.macroblockd* %13, i8 zeroext %1993, i8 signext %1996, %struct.position* %1363, %union.int_mv* nonnull %1987, i32 %2, i32 %3, i32 -1) #5
  %1998 = add nsw i32 %1997, -1
  %1999 = sext i32 %1998 to i64
  %2000 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %11, i64 0, i64 %1999
  %2001 = bitcast %union.int_mv* %2000 to %struct.mv*
  %2002 = bitcast %union.int_mv* %2000 to i16*
  %2003 = load i16, i16* %2002, align 4
  br i1 %1990, label %2018, label %2004

2004:                                             ; preds = %1992
  %2005 = sext i16 %2003 to i32
  %2006 = icmp slt i32 %2005, 0
  %2007 = sub nsw i32 0, %2005
  %2008 = select i1 %2006, i32 %2007, i32 %2005
  %2009 = icmp slt i32 %2008, 64
  br i1 %2009, label %2010, label %2018

2010:                                             ; preds = %2004
  %2011 = getelementptr inbounds %struct.mv, %struct.mv* %2001, i64 0, i32 1
  %2012 = load i16, i16* %2011, align 2
  %2013 = sext i16 %2012 to i32
  %2014 = icmp slt i32 %2013, 0
  %2015 = sub nsw i32 0, %2013
  %2016 = select i1 %2014, i32 %2015, i32 %2013
  %2017 = icmp slt i32 %2016, 64
  br i1 %2017, label %2034, label %2018

2018:                                             ; preds = %2010, %2004, %1992
  %2019 = and i16 %2003, 1
  %2020 = icmp eq i16 %2019, 0
  br i1 %2020, label %2025, label %2021

2021:                                             ; preds = %2018
  %2022 = icmp sgt i16 %2003, 0
  %2023 = select i1 %2022, i16 -1, i16 1
  %2024 = add i16 %2023, %2003
  store i16 %2024, i16* %2002, align 4
  br label %2025

2025:                                             ; preds = %2021, %2018
  %2026 = getelementptr inbounds %struct.mv, %struct.mv* %2001, i64 0, i32 1
  %2027 = load i16, i16* %2026, align 2
  %2028 = and i16 %2027, 1
  %2029 = icmp eq i16 %2028, 0
  br i1 %2029, label %2034, label %2030

2030:                                             ; preds = %2025
  %2031 = icmp sgt i16 %2027, 0
  %2032 = select i1 %2031, i16 -1, i16 1
  %2033 = add i16 %2032, %2027
  store i16 %2033, i16* %2026, align 2
  br label %2034

2034:                                             ; preds = %2030, %2025, %2010
  %2035 = getelementptr inbounds %union.int_mv, %union.int_mv* %2000, i64 0, i32 0
  %2036 = getelementptr inbounds [2 x %union.int_mv], [2 x %union.int_mv]* %1356, i64 0, i64 %1994, i32 0
  %2037 = load i32, i32* %2035, align 4
  store i32 %2037, i32* %2036, align 4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1986) #5
  %2038 = add nuw nsw i64 %1994, 1
  %2039 = icmp eq i64 %2038, %1991
  %2040 = load i8, i8* %1982, align 1
  br i1 %2039, label %2041, label %1992

2041:                                             ; preds = %2034, %1981
  %2042 = phi i8 [ 12, %1981 ], [ %2040, %2034 ]
  %2043 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 9, i64 0
  %2044 = bitcast i64* %8 to %union.int_mv*
  %2045 = call fastcc i32 @assign_mv(%struct.VP9Common* %14, %struct.macroblockd* %13, i8 zeroext %2042, %union.int_mv* %2043, %union.int_mv* nonnull %2044, %union.int_mv* nonnull %2044, i32 %1600, i32 %1360, %struct.vpx_reader* %12) #5
  %2046 = icmp eq i32 %2045, 0
  %2047 = zext i1 %2046 to i32
  %2048 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 25
  %2049 = load i32, i32* %2048, align 8
  %2050 = or i32 %2049, %2047
  store i32 %2050, i32* %2048, align 8
  br label %2051

2051:                                             ; preds = %2041, %1974, %1683
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1361) #5
  br label %2521

2052:                                             ; preds = %1346
  %2053 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 0
  %2054 = load i8, i8* %2053, align 4
  switch i8 %2054, label %2382 [
    i8 0, label %2055
    i8 1, label %2128
    i8 2, label %2255
  ]

2055:                                             ; preds = %2052
  %2056 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 73
  %2057 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %2058 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %2059 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %12, i64 0, i32 0
  %2060 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 3
  br label %2061

2061:                                             ; preds = %2120, %2055
  %2062 = phi i64 [ 0, %2055 ], [ %2122, %2120 ]
  %2063 = load %struct.frame_contexts*, %struct.frame_contexts** %2056, align 8
  %2064 = load i32, i32* %2057, align 8
  %2065 = load i32, i32* %2058, align 4
  br label %2066

2066:                                             ; preds = %2093, %2061
  %2067 = phi i32 [ %2065, %2061 ], [ %2105, %2093 ]
  %2068 = phi i32 [ %2064, %2061 ], [ %2102, %2093 ]
  %2069 = phi i8 [ 0, %2061 ], [ %2109, %2093 ]
  %2070 = sext i8 %2069 to i32
  %2071 = ashr i32 %2070, 1
  %2072 = sext i32 %2071 to i64
  %2073 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %2063, i64 0, i32 0, i64 0, i64 %2072
  %2074 = load i8, i8* %2073, align 1
  %2075 = zext i8 %2074 to i32
  %2076 = mul i32 %2068, %2075
  %2077 = sub nuw nsw i32 256, %2075
  %2078 = add i32 %2077, %2076
  %2079 = lshr i32 %2078, 8
  %2080 = icmp slt i32 %2067, 0
  br i1 %2080, label %2081, label %2083

2081:                                             ; preds = %2066
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %2082 = load i32, i32* %2058, align 4
  br label %2083

2083:                                             ; preds = %2081, %2066
  %2084 = phi i32 [ %2082, %2081 ], [ %2067, %2066 ]
  %2085 = load i64, i64* %2059, align 8
  %2086 = zext i32 %2079 to i64
  %2087 = shl i64 %2086, 56
  %2088 = icmp ult i64 %2085, %2087
  br i1 %2088, label %2093, label %2089

2089:                                             ; preds = %2083
  %2090 = load i32, i32* %2057, align 8
  %2091 = sub i32 %2090, %2079
  %2092 = sub i64 %2085, %2087
  br label %2093

2093:                                             ; preds = %2089, %2083
  %2094 = phi i64 [ %2092, %2089 ], [ %2085, %2083 ]
  %2095 = phi i32 [ %2091, %2089 ], [ %2079, %2083 ]
  %2096 = phi i32 [ 1, %2089 ], [ 0, %2083 ]
  %2097 = and i32 %2095, 255
  %2098 = zext i32 %2097 to i64
  %2099 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %2098
  %2100 = load i8, i8* %2099, align 1
  %2101 = zext i8 %2100 to i32
  %2102 = shl i32 %2095, %2101
  %2103 = zext i8 %2100 to i64
  %2104 = shl i64 %2094, %2103
  %2105 = sub nsw i32 %2084, %2101
  store i64 %2104, i64* %2059, align 8
  store i32 %2105, i32* %2058, align 4
  store i32 %2102, i32* %2057, align 8
  %2106 = add nuw nsw i32 %2096, %2070
  %2107 = sext i32 %2106 to i64
  %2108 = getelementptr inbounds [18 x i8], [18 x i8]* @vp9_intra_mode_tree, i64 0, i64 %2107
  %2109 = load i8, i8* %2108, align 1
  %2110 = icmp sgt i8 %2109, 0
  br i1 %2110, label %2066, label %2111

2111:                                             ; preds = %2093
  %2112 = sub i8 0, %2109
  %2113 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %2060, align 8
  %2114 = icmp eq %struct.FRAME_COUNTS* %2113, null
  br i1 %2114, label %2120, label %2115

2115:                                             ; preds = %2111
  %2116 = zext i8 %2112 to i64
  %2117 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %2113, i64 0, i32 0, i64 0, i64 %2116
  %2118 = load i32, i32* %2117, align 4
  %2119 = add i32 %2118, 1
  store i32 %2119, i32* %2117, align 4
  br label %2120

2120:                                             ; preds = %2115, %2111
  %2121 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 %2062, i32 0
  store i8 %2112, i8* %2121, align 4
  %2122 = add nuw nsw i64 %2062, 1
  %2123 = icmp eq i64 %2122, 4
  br i1 %2123, label %2124, label %2061

2124:                                             ; preds = %2120
  %2125 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 3, i32 0
  %2126 = load i8, i8* %2125, align 4
  %2127 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 1
  store i8 %2126, i8* %2127, align 1
  br label %2451

2128:                                             ; preds = %2052
  %2129 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 73
  %2130 = load %struct.frame_contexts*, %struct.frame_contexts** %2129, align 8
  %2131 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %2132 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %2133 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %12, i64 0, i32 0
  %2134 = load i32, i32* %2131, align 8
  %2135 = load i32, i32* %2132, align 4
  br label %2136

2136:                                             ; preds = %2163, %2128
  %2137 = phi i32 [ %2135, %2128 ], [ %2175, %2163 ]
  %2138 = phi i32 [ %2134, %2128 ], [ %2172, %2163 ]
  %2139 = phi i8 [ 0, %2128 ], [ %2179, %2163 ]
  %2140 = sext i8 %2139 to i32
  %2141 = ashr i32 %2140, 1
  %2142 = sext i32 %2141 to i64
  %2143 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %2130, i64 0, i32 0, i64 0, i64 %2142
  %2144 = load i8, i8* %2143, align 1
  %2145 = zext i8 %2144 to i32
  %2146 = mul i32 %2138, %2145
  %2147 = sub nuw nsw i32 256, %2145
  %2148 = add i32 %2147, %2146
  %2149 = lshr i32 %2148, 8
  %2150 = icmp slt i32 %2137, 0
  br i1 %2150, label %2151, label %2153

2151:                                             ; preds = %2136
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %2152 = load i32, i32* %2132, align 4
  br label %2153

2153:                                             ; preds = %2151, %2136
  %2154 = phi i32 [ %2152, %2151 ], [ %2137, %2136 ]
  %2155 = load i64, i64* %2133, align 8
  %2156 = zext i32 %2149 to i64
  %2157 = shl i64 %2156, 56
  %2158 = icmp ult i64 %2155, %2157
  br i1 %2158, label %2163, label %2159

2159:                                             ; preds = %2153
  %2160 = load i32, i32* %2131, align 8
  %2161 = sub i32 %2160, %2149
  %2162 = sub i64 %2155, %2157
  br label %2163

2163:                                             ; preds = %2159, %2153
  %2164 = phi i64 [ %2162, %2159 ], [ %2155, %2153 ]
  %2165 = phi i32 [ %2161, %2159 ], [ %2149, %2153 ]
  %2166 = phi i32 [ 1, %2159 ], [ 0, %2153 ]
  %2167 = and i32 %2165, 255
  %2168 = zext i32 %2167 to i64
  %2169 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %2168
  %2170 = load i8, i8* %2169, align 1
  %2171 = zext i8 %2170 to i32
  %2172 = shl i32 %2165, %2171
  %2173 = zext i8 %2170 to i64
  %2174 = shl i64 %2164, %2173
  %2175 = sub nsw i32 %2154, %2171
  store i64 %2174, i64* %2133, align 8
  store i32 %2175, i32* %2132, align 4
  store i32 %2172, i32* %2131, align 8
  %2176 = add nuw nsw i32 %2166, %2140
  %2177 = sext i32 %2176 to i64
  %2178 = getelementptr inbounds [18 x i8], [18 x i8]* @vp9_intra_mode_tree, i64 0, i64 %2177
  %2179 = load i8, i8* %2178, align 1
  %2180 = icmp sgt i8 %2179, 0
  br i1 %2180, label %2136, label %2181

2181:                                             ; preds = %2163
  %2182 = sub i8 0, %2179
  %2183 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 3
  %2184 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %2183, align 8
  %2185 = icmp eq %struct.FRAME_COUNTS* %2184, null
  br i1 %2185, label %2191, label %2186

2186:                                             ; preds = %2181
  %2187 = zext i8 %2182 to i64
  %2188 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %2184, i64 0, i32 0, i64 0, i64 %2187
  %2189 = load i32, i32* %2188, align 4
  %2190 = add i32 %2189, 1
  store i32 %2190, i32* %2188, align 4
  br label %2191

2191:                                             ; preds = %2186, %2181
  %2192 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 2, i32 0
  store i8 %2182, i8* %2192, align 4
  %2193 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 0, i32 0
  store i8 %2182, i8* %2193, align 4
  %2194 = load %struct.frame_contexts*, %struct.frame_contexts** %2129, align 8
  %2195 = load i32, i32* %2131, align 8
  %2196 = load i32, i32* %2132, align 4
  br label %2197

2197:                                             ; preds = %2224, %2191
  %2198 = phi i32 [ %2196, %2191 ], [ %2236, %2224 ]
  %2199 = phi i32 [ %2195, %2191 ], [ %2233, %2224 ]
  %2200 = phi i8 [ 0, %2191 ], [ %2240, %2224 ]
  %2201 = sext i8 %2200 to i32
  %2202 = ashr i32 %2201, 1
  %2203 = sext i32 %2202 to i64
  %2204 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %2194, i64 0, i32 0, i64 0, i64 %2203
  %2205 = load i8, i8* %2204, align 1
  %2206 = zext i8 %2205 to i32
  %2207 = mul i32 %2199, %2206
  %2208 = sub nuw nsw i32 256, %2206
  %2209 = add i32 %2208, %2207
  %2210 = lshr i32 %2209, 8
  %2211 = icmp slt i32 %2198, 0
  br i1 %2211, label %2212, label %2214

2212:                                             ; preds = %2197
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %2213 = load i32, i32* %2132, align 4
  br label %2214

2214:                                             ; preds = %2212, %2197
  %2215 = phi i32 [ %2213, %2212 ], [ %2198, %2197 ]
  %2216 = load i64, i64* %2133, align 8
  %2217 = zext i32 %2210 to i64
  %2218 = shl i64 %2217, 56
  %2219 = icmp ult i64 %2216, %2218
  br i1 %2219, label %2224, label %2220

2220:                                             ; preds = %2214
  %2221 = load i32, i32* %2131, align 8
  %2222 = sub i32 %2221, %2210
  %2223 = sub i64 %2216, %2218
  br label %2224

2224:                                             ; preds = %2220, %2214
  %2225 = phi i64 [ %2223, %2220 ], [ %2216, %2214 ]
  %2226 = phi i32 [ %2222, %2220 ], [ %2210, %2214 ]
  %2227 = phi i32 [ 1, %2220 ], [ 0, %2214 ]
  %2228 = and i32 %2226, 255
  %2229 = zext i32 %2228 to i64
  %2230 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %2229
  %2231 = load i8, i8* %2230, align 1
  %2232 = zext i8 %2231 to i32
  %2233 = shl i32 %2226, %2232
  %2234 = zext i8 %2231 to i64
  %2235 = shl i64 %2225, %2234
  %2236 = sub nsw i32 %2215, %2232
  store i64 %2235, i64* %2133, align 8
  store i32 %2236, i32* %2132, align 4
  store i32 %2233, i32* %2131, align 8
  %2237 = add nuw nsw i32 %2227, %2201
  %2238 = sext i32 %2237 to i64
  %2239 = getelementptr inbounds [18 x i8], [18 x i8]* @vp9_intra_mode_tree, i64 0, i64 %2238
  %2240 = load i8, i8* %2239, align 1
  %2241 = icmp sgt i8 %2240, 0
  br i1 %2241, label %2197, label %2242

2242:                                             ; preds = %2224
  %2243 = sub i8 0, %2240
  %2244 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %2183, align 8
  %2245 = icmp eq %struct.FRAME_COUNTS* %2244, null
  br i1 %2245, label %2251, label %2246

2246:                                             ; preds = %2242
  %2247 = zext i8 %2243 to i64
  %2248 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %2244, i64 0, i32 0, i64 0, i64 %2247
  %2249 = load i32, i32* %2248, align 4
  %2250 = add i32 %2249, 1
  store i32 %2250, i32* %2248, align 4
  br label %2251

2251:                                             ; preds = %2246, %2242
  %2252 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 1
  store i8 %2243, i8* %2252, align 1
  %2253 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 3, i32 0
  store i8 %2243, i8* %2253, align 4
  %2254 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 1, i32 0
  store i8 %2243, i8* %2254, align 4
  br label %2451

2255:                                             ; preds = %2052
  %2256 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 73
  %2257 = load %struct.frame_contexts*, %struct.frame_contexts** %2256, align 8
  %2258 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %2259 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %2260 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %12, i64 0, i32 0
  %2261 = load i32, i32* %2258, align 8
  %2262 = load i32, i32* %2259, align 4
  br label %2263

2263:                                             ; preds = %2290, %2255
  %2264 = phi i32 [ %2262, %2255 ], [ %2302, %2290 ]
  %2265 = phi i32 [ %2261, %2255 ], [ %2299, %2290 ]
  %2266 = phi i8 [ 0, %2255 ], [ %2306, %2290 ]
  %2267 = sext i8 %2266 to i32
  %2268 = ashr i32 %2267, 1
  %2269 = sext i32 %2268 to i64
  %2270 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %2257, i64 0, i32 0, i64 0, i64 %2269
  %2271 = load i8, i8* %2270, align 1
  %2272 = zext i8 %2271 to i32
  %2273 = mul i32 %2265, %2272
  %2274 = sub nuw nsw i32 256, %2272
  %2275 = add i32 %2274, %2273
  %2276 = lshr i32 %2275, 8
  %2277 = icmp slt i32 %2264, 0
  br i1 %2277, label %2278, label %2280

2278:                                             ; preds = %2263
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %2279 = load i32, i32* %2259, align 4
  br label %2280

2280:                                             ; preds = %2278, %2263
  %2281 = phi i32 [ %2279, %2278 ], [ %2264, %2263 ]
  %2282 = load i64, i64* %2260, align 8
  %2283 = zext i32 %2276 to i64
  %2284 = shl i64 %2283, 56
  %2285 = icmp ult i64 %2282, %2284
  br i1 %2285, label %2290, label %2286

2286:                                             ; preds = %2280
  %2287 = load i32, i32* %2258, align 8
  %2288 = sub i32 %2287, %2276
  %2289 = sub i64 %2282, %2284
  br label %2290

2290:                                             ; preds = %2286, %2280
  %2291 = phi i64 [ %2289, %2286 ], [ %2282, %2280 ]
  %2292 = phi i32 [ %2288, %2286 ], [ %2276, %2280 ]
  %2293 = phi i32 [ 1, %2286 ], [ 0, %2280 ]
  %2294 = and i32 %2292, 255
  %2295 = zext i32 %2294 to i64
  %2296 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %2295
  %2297 = load i8, i8* %2296, align 1
  %2298 = zext i8 %2297 to i32
  %2299 = shl i32 %2292, %2298
  %2300 = zext i8 %2297 to i64
  %2301 = shl i64 %2291, %2300
  %2302 = sub nsw i32 %2281, %2298
  store i64 %2301, i64* %2260, align 8
  store i32 %2302, i32* %2259, align 4
  store i32 %2299, i32* %2258, align 8
  %2303 = add nuw nsw i32 %2293, %2267
  %2304 = sext i32 %2303 to i64
  %2305 = getelementptr inbounds [18 x i8], [18 x i8]* @vp9_intra_mode_tree, i64 0, i64 %2304
  %2306 = load i8, i8* %2305, align 1
  %2307 = icmp sgt i8 %2306, 0
  br i1 %2307, label %2263, label %2308

2308:                                             ; preds = %2290
  %2309 = sub i8 0, %2306
  %2310 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 3
  %2311 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %2310, align 8
  %2312 = icmp eq %struct.FRAME_COUNTS* %2311, null
  br i1 %2312, label %2318, label %2313

2313:                                             ; preds = %2308
  %2314 = zext i8 %2309 to i64
  %2315 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %2311, i64 0, i32 0, i64 0, i64 %2314
  %2316 = load i32, i32* %2315, align 4
  %2317 = add i32 %2316, 1
  store i32 %2317, i32* %2315, align 4
  br label %2318

2318:                                             ; preds = %2313, %2308
  %2319 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 1, i32 0
  store i8 %2309, i8* %2319, align 4
  %2320 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 0, i32 0
  store i8 %2309, i8* %2320, align 4
  %2321 = load %struct.frame_contexts*, %struct.frame_contexts** %2256, align 8
  %2322 = load i32, i32* %2258, align 8
  %2323 = load i32, i32* %2259, align 4
  br label %2324

2324:                                             ; preds = %2351, %2318
  %2325 = phi i32 [ %2323, %2318 ], [ %2363, %2351 ]
  %2326 = phi i32 [ %2322, %2318 ], [ %2360, %2351 ]
  %2327 = phi i8 [ 0, %2318 ], [ %2367, %2351 ]
  %2328 = sext i8 %2327 to i32
  %2329 = ashr i32 %2328, 1
  %2330 = sext i32 %2329 to i64
  %2331 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %2321, i64 0, i32 0, i64 0, i64 %2330
  %2332 = load i8, i8* %2331, align 1
  %2333 = zext i8 %2332 to i32
  %2334 = mul i32 %2326, %2333
  %2335 = sub nuw nsw i32 256, %2333
  %2336 = add i32 %2335, %2334
  %2337 = lshr i32 %2336, 8
  %2338 = icmp slt i32 %2325, 0
  br i1 %2338, label %2339, label %2341

2339:                                             ; preds = %2324
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %2340 = load i32, i32* %2259, align 4
  br label %2341

2341:                                             ; preds = %2339, %2324
  %2342 = phi i32 [ %2340, %2339 ], [ %2325, %2324 ]
  %2343 = load i64, i64* %2260, align 8
  %2344 = zext i32 %2337 to i64
  %2345 = shl i64 %2344, 56
  %2346 = icmp ult i64 %2343, %2345
  br i1 %2346, label %2351, label %2347

2347:                                             ; preds = %2341
  %2348 = load i32, i32* %2258, align 8
  %2349 = sub i32 %2348, %2337
  %2350 = sub i64 %2343, %2345
  br label %2351

2351:                                             ; preds = %2347, %2341
  %2352 = phi i64 [ %2350, %2347 ], [ %2343, %2341 ]
  %2353 = phi i32 [ %2349, %2347 ], [ %2337, %2341 ]
  %2354 = phi i32 [ 1, %2347 ], [ 0, %2341 ]
  %2355 = and i32 %2353, 255
  %2356 = zext i32 %2355 to i64
  %2357 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %2356
  %2358 = load i8, i8* %2357, align 1
  %2359 = zext i8 %2358 to i32
  %2360 = shl i32 %2353, %2359
  %2361 = zext i8 %2358 to i64
  %2362 = shl i64 %2352, %2361
  %2363 = sub nsw i32 %2342, %2359
  store i64 %2362, i64* %2260, align 8
  store i32 %2363, i32* %2259, align 4
  store i32 %2360, i32* %2258, align 8
  %2364 = add nuw nsw i32 %2354, %2328
  %2365 = sext i32 %2364 to i64
  %2366 = getelementptr inbounds [18 x i8], [18 x i8]* @vp9_intra_mode_tree, i64 0, i64 %2365
  %2367 = load i8, i8* %2366, align 1
  %2368 = icmp sgt i8 %2367, 0
  br i1 %2368, label %2324, label %2369

2369:                                             ; preds = %2351
  %2370 = sub i8 0, %2367
  %2371 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %2310, align 8
  %2372 = icmp eq %struct.FRAME_COUNTS* %2371, null
  br i1 %2372, label %2378, label %2373

2373:                                             ; preds = %2369
  %2374 = zext i8 %2370 to i64
  %2375 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %2371, i64 0, i32 0, i64 0, i64 %2374
  %2376 = load i32, i32* %2375, align 4
  %2377 = add i32 %2376, 1
  store i32 %2377, i32* %2375, align 4
  br label %2378

2378:                                             ; preds = %2373, %2369
  %2379 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 1
  store i8 %2370, i8* %2379, align 1
  %2380 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 3, i32 0
  store i8 %2370, i8* %2380, align 4
  %2381 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 10, i64 2, i32 0
  store i8 %2370, i8* %2381, align 4
  br label %2451

2382:                                             ; preds = %2052
  %2383 = zext i8 %2054 to i64
  %2384 = getelementptr inbounds [13 x i8], [13 x i8]* @size_group_lookup, i64 0, i64 %2383
  %2385 = load i8, i8* %2384, align 1
  %2386 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 73
  %2387 = load %struct.frame_contexts*, %struct.frame_contexts** %2386, align 8
  %2388 = zext i8 %2385 to i64
  %2389 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %2390 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %2391 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %12, i64 0, i32 0
  %2392 = load i32, i32* %2389, align 8
  %2393 = load i32, i32* %2390, align 4
  br label %2394

2394:                                             ; preds = %2421, %2382
  %2395 = phi i32 [ %2393, %2382 ], [ %2433, %2421 ]
  %2396 = phi i32 [ %2392, %2382 ], [ %2430, %2421 ]
  %2397 = phi i8 [ 0, %2382 ], [ %2437, %2421 ]
  %2398 = sext i8 %2397 to i32
  %2399 = ashr i32 %2398, 1
  %2400 = sext i32 %2399 to i64
  %2401 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %2387, i64 0, i32 0, i64 %2388, i64 %2400
  %2402 = load i8, i8* %2401, align 1
  %2403 = zext i8 %2402 to i32
  %2404 = mul i32 %2396, %2403
  %2405 = sub nuw nsw i32 256, %2403
  %2406 = add i32 %2405, %2404
  %2407 = lshr i32 %2406, 8
  %2408 = icmp slt i32 %2395, 0
  br i1 %2408, label %2409, label %2411

2409:                                             ; preds = %2394
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %2410 = load i32, i32* %2390, align 4
  br label %2411

2411:                                             ; preds = %2409, %2394
  %2412 = phi i32 [ %2410, %2409 ], [ %2395, %2394 ]
  %2413 = load i64, i64* %2391, align 8
  %2414 = zext i32 %2407 to i64
  %2415 = shl i64 %2414, 56
  %2416 = icmp ult i64 %2413, %2415
  br i1 %2416, label %2421, label %2417

2417:                                             ; preds = %2411
  %2418 = load i32, i32* %2389, align 8
  %2419 = sub i32 %2418, %2407
  %2420 = sub i64 %2413, %2415
  br label %2421

2421:                                             ; preds = %2417, %2411
  %2422 = phi i64 [ %2420, %2417 ], [ %2413, %2411 ]
  %2423 = phi i32 [ %2419, %2417 ], [ %2407, %2411 ]
  %2424 = phi i32 [ 1, %2417 ], [ 0, %2411 ]
  %2425 = and i32 %2423, 255
  %2426 = zext i32 %2425 to i64
  %2427 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %2426
  %2428 = load i8, i8* %2427, align 1
  %2429 = zext i8 %2428 to i32
  %2430 = shl i32 %2423, %2429
  %2431 = zext i8 %2428 to i64
  %2432 = shl i64 %2422, %2431
  %2433 = sub nsw i32 %2412, %2429
  store i64 %2432, i64* %2391, align 8
  store i32 %2433, i32* %2390, align 4
  store i32 %2430, i32* %2389, align 8
  %2434 = add nuw nsw i32 %2424, %2398
  %2435 = sext i32 %2434 to i64
  %2436 = getelementptr inbounds [18 x i8], [18 x i8]* @vp9_intra_mode_tree, i64 0, i64 %2435
  %2437 = load i8, i8* %2436, align 1
  %2438 = icmp sgt i8 %2437, 0
  br i1 %2438, label %2394, label %2439

2439:                                             ; preds = %2421
  %2440 = sub i8 0, %2437
  %2441 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 3
  %2442 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %2441, align 8
  %2443 = icmp eq %struct.FRAME_COUNTS* %2442, null
  br i1 %2443, label %2449, label %2444

2444:                                             ; preds = %2439
  %2445 = zext i8 %2440 to i64
  %2446 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %2442, i64 0, i32 0, i64 %2388, i64 %2445
  %2447 = load i32, i32* %2446, align 4
  %2448 = add i32 %2447, 1
  store i32 %2448, i32* %2446, align 4
  br label %2449

2449:                                             ; preds = %2444, %2439
  %2450 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 1
  store i8 %2440, i8* %2450, align 1
  br label %2451

2451:                                             ; preds = %2449, %2378, %2251, %2124
  %2452 = phi i8 [ %2440, %2449 ], [ %2370, %2378 ], [ %2243, %2251 ], [ %2126, %2124 ]
  %2453 = getelementptr inbounds %struct.VP9Decoder, %struct.VP9Decoder* %1, i64 0, i32 1, i32 73
  %2454 = load %struct.frame_contexts*, %struct.frame_contexts** %2453, align 8
  %2455 = zext i8 %2452 to i64
  %2456 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 1
  %2457 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 3, i32 2
  %2458 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %12, i64 0, i32 0
  %2459 = load i32, i32* %2456, align 8
  %2460 = load i32, i32* %2457, align 4
  br label %2461

2461:                                             ; preds = %2488, %2451
  %2462 = phi i32 [ %2460, %2451 ], [ %2500, %2488 ]
  %2463 = phi i32 [ %2459, %2451 ], [ %2497, %2488 ]
  %2464 = phi i8 [ 0, %2451 ], [ %2504, %2488 ]
  %2465 = sext i8 %2464 to i32
  %2466 = ashr i32 %2465, 1
  %2467 = sext i32 %2466 to i64
  %2468 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %2454, i64 0, i32 1, i64 %2455, i64 %2467
  %2469 = load i8, i8* %2468, align 1
  %2470 = zext i8 %2469 to i32
  %2471 = mul i32 %2463, %2470
  %2472 = sub nuw nsw i32 256, %2470
  %2473 = add i32 %2472, %2471
  %2474 = lshr i32 %2473, 8
  %2475 = icmp slt i32 %2462, 0
  br i1 %2475, label %2476, label %2478

2476:                                             ; preds = %2461
  tail call void @vpx_reader_fill(%struct.vpx_reader* %12) #5
  %2477 = load i32, i32* %2457, align 4
  br label %2478

2478:                                             ; preds = %2476, %2461
  %2479 = phi i32 [ %2477, %2476 ], [ %2462, %2461 ]
  %2480 = load i64, i64* %2458, align 8
  %2481 = zext i32 %2474 to i64
  %2482 = shl i64 %2481, 56
  %2483 = icmp ult i64 %2480, %2482
  br i1 %2483, label %2488, label %2484

2484:                                             ; preds = %2478
  %2485 = load i32, i32* %2456, align 8
  %2486 = sub i32 %2485, %2474
  %2487 = sub i64 %2480, %2482
  br label %2488

2488:                                             ; preds = %2484, %2478
  %2489 = phi i64 [ %2487, %2484 ], [ %2480, %2478 ]
  %2490 = phi i32 [ %2486, %2484 ], [ %2474, %2478 ]
  %2491 = phi i32 [ 1, %2484 ], [ 0, %2478 ]
  %2492 = and i32 %2490, 255
  %2493 = zext i32 %2492 to i64
  %2494 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %2493
  %2495 = load i8, i8* %2494, align 1
  %2496 = zext i8 %2495 to i32
  %2497 = shl i32 %2490, %2496
  %2498 = zext i8 %2495 to i64
  %2499 = shl i64 %2489, %2498
  %2500 = sub nsw i32 %2479, %2496
  store i64 %2499, i64* %2458, align 8
  store i32 %2500, i32* %2457, align 4
  store i32 %2497, i32* %2456, align 8
  %2501 = add nuw nsw i32 %2491, %2465
  %2502 = sext i32 %2501 to i64
  %2503 = getelementptr inbounds [18 x i8], [18 x i8]* @vp9_intra_mode_tree, i64 0, i64 %2502
  %2504 = load i8, i8* %2503, align 1
  %2505 = icmp sgt i8 %2504, 0
  br i1 %2505, label %2461, label %2506

2506:                                             ; preds = %2488
  %2507 = sub i8 0, %2504
  %2508 = getelementptr inbounds %struct.TileWorkerData, %struct.TileWorkerData* %0, i64 0, i32 8, i32 3
  %2509 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %2508, align 8
  %2510 = icmp eq %struct.FRAME_COUNTS* %2509, null
  br i1 %2510, label %2516, label %2511

2511:                                             ; preds = %2506
  %2512 = zext i8 %2507 to i64
  %2513 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %2509, i64 0, i32 1, i64 %2455, i64 %2512
  %2514 = load i32, i32* %2513, align 4
  %2515 = add i32 %2514, 1
  store i32 %2515, i32* %2513, align 4
  br label %2516

2516:                                             ; preds = %2511, %2506
  %2517 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 6
  store i8 %2507, i8* %2517, align 2
  %2518 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 7
  store i8 3, i8* %2518, align 1
  %2519 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 8, i64 0
  store i8 0, i8* %2519, align 4
  %2520 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 8, i64 1
  store i8 -1, i8* %2520, align 1
  br label %2521

2521:                                             ; preds = %2051, %2516
  %2522 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 8, i64 0
  %2523 = bitcast i8* %2522 to i16*
  %2524 = load i16, i16* %2523, align 1
  %2525 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %17, i64 0, i32 9, i64 0
  %2526 = bitcast %union.int_mv* %2525 to i64*
  %2527 = load i64, i64* %2526, align 4
  %2528 = icmp sgt i32 %5, 0
  br i1 %2528, label %2529, label %2584

2529:                                             ; preds = %2521
  %2530 = icmp sgt i32 %4, 0
  %2531 = zext i32 %4 to i64
  %2532 = add nsw i64 %2531, -1
  %2533 = and i64 %2531, 3
  %2534 = icmp ult i64 %2532, 3
  %2535 = sub nsw i64 %2531, %2533
  %2536 = icmp eq i64 %2533, 0
  br label %2537

2537:                                             ; preds = %2578, %2529
  %2538 = phi i32 [ 0, %2529 ], [ %2582, %2578 ]
  %2539 = phi %struct.MV_REF* [ %704, %2529 ], [ %2581, %2578 ]
  br i1 %2530, label %2540, label %2578

2540:                                             ; preds = %2537
  br i1 %2534, label %2566, label %2541

2541:                                             ; preds = %2540, %2541
  %2542 = phi i64 [ %2563, %2541 ], [ 0, %2540 ]
  %2543 = phi i64 [ %2564, %2541 ], [ %2535, %2540 ]
  %2544 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %2539, i64 %2542, i32 1, i64 0
  %2545 = bitcast i8* %2544 to i16*
  store i16 %2524, i16* %2545, align 1
  %2546 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %2539, i64 %2542, i32 0, i64 0
  %2547 = bitcast %union.int_mv* %2546 to i64*
  store i64 %2527, i64* %2547, align 4
  %2548 = or i64 %2542, 1
  %2549 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %2539, i64 %2548, i32 1, i64 0
  %2550 = bitcast i8* %2549 to i16*
  store i16 %2524, i16* %2550, align 1
  %2551 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %2539, i64 %2548, i32 0, i64 0
  %2552 = bitcast %union.int_mv* %2551 to i64*
  store i64 %2527, i64* %2552, align 4
  %2553 = or i64 %2542, 2
  %2554 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %2539, i64 %2553, i32 1, i64 0
  %2555 = bitcast i8* %2554 to i16*
  store i16 %2524, i16* %2555, align 1
  %2556 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %2539, i64 %2553, i32 0, i64 0
  %2557 = bitcast %union.int_mv* %2556 to i64*
  store i64 %2527, i64* %2557, align 4
  %2558 = or i64 %2542, 3
  %2559 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %2539, i64 %2558, i32 1, i64 0
  %2560 = bitcast i8* %2559 to i16*
  store i16 %2524, i16* %2560, align 1
  %2561 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %2539, i64 %2558, i32 0, i64 0
  %2562 = bitcast %union.int_mv* %2561 to i64*
  store i64 %2527, i64* %2562, align 4
  %2563 = add nuw nsw i64 %2542, 4
  %2564 = add i64 %2543, -4
  %2565 = icmp eq i64 %2564, 0
  br i1 %2565, label %2566, label %2541

2566:                                             ; preds = %2541, %2540
  %2567 = phi i64 [ 0, %2540 ], [ %2563, %2541 ]
  br i1 %2536, label %2578, label %2568

2568:                                             ; preds = %2566, %2568
  %2569 = phi i64 [ %2575, %2568 ], [ %2567, %2566 ]
  %2570 = phi i64 [ %2576, %2568 ], [ %2533, %2566 ]
  %2571 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %2539, i64 %2569, i32 1, i64 0
  %2572 = bitcast i8* %2571 to i16*
  store i16 %2524, i16* %2572, align 1
  %2573 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %2539, i64 %2569, i32 0, i64 0
  %2574 = bitcast %union.int_mv* %2573 to i64*
  store i64 %2527, i64* %2574, align 4
  %2575 = add nuw nsw i64 %2569, 1
  %2576 = add i64 %2570, -1
  %2577 = icmp eq i64 %2576, 0
  br i1 %2577, label %2578, label %2568, !llvm.loop !7

2578:                                             ; preds = %2566, %2568, %2537
  %2579 = load i32, i32* %22, align 8
  %2580 = sext i32 %2579 to i64
  %2581 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %2539, i64 %2580
  %2582 = add nuw nsw i32 %2538, 1
  %2583 = icmp eq i32 %2582, %5
  br i1 %2583, label %2584, label %2537

2584:                                             ; preds = %2578, %2521, %696
  ret void

2585:                                             ; preds = %74
  %2586 = getelementptr inbounds i8, i8* %49, i64 %82
  %2587 = load i8, i8* %2586, align 1
  br label %2588

2588:                                             ; preds = %2585, %74
  %2589 = phi i8 [ %2587, %2585 ], [ 0, %74 ]
  %2590 = getelementptr inbounds i8, i8* %51, i64 %82
  store i8 %2589, i8* %2590, align 1
  %2591 = add nuw nsw i32 %64, 2
  %2592 = add i32 %65, -2
  %2593 = icmp eq i32 %2592, 0
  br i1 %2593, label %83, label %63

2594:                                             ; preds = %922
  %2595 = getelementptr inbounds i8, i8* %711, i64 %930
  %2596 = load i8, i8* %2595, align 1
  br label %2597

2597:                                             ; preds = %2594, %922
  %2598 = phi i8 [ %2596, %2594 ], [ 0, %922 ]
  %2599 = getelementptr inbounds i8, i8* %900, i64 %930
  store i8 %2598, i8* %2599, align 1
  %2600 = add nuw nsw i32 %912, 2
  %2601 = add i32 %913, -2
  %2602 = icmp eq i32 %2601, 0
  br i1 %2602, label %931, label %911
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc zeroext i8 @read_tx_size(%struct.VP9Common* nocapture readonly, %struct.macroblockd* nocapture readonly, i32, %struct.vpx_reader*) unnamed_addr #2 {
  %5 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 37
  %6 = load i32, i32* %5, align 16
  %7 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 6
  %8 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %7, align 8
  %9 = load %struct.MODE_INFO*, %struct.MODE_INFO** %8, align 8
  %10 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %9, i64 0, i32 0
  %11 = load i8, i8* %10, align 4
  %12 = zext i8 %11 to i64
  %13 = getelementptr inbounds [13 x i8], [13 x i8]* @max_txsize_lookup, i64 0, i64 %12
  %14 = load i8, i8* %13, align 1
  %15 = icmp ne i32 %2, 0
  %16 = icmp eq i32 %6, 4
  %17 = and i1 %15, %16
  %18 = icmp ugt i8 %11, 2
  %19 = and i1 %17, %18
  br i1 %19, label %20, label %203

20:                                               ; preds = %4
  %21 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 3
  %22 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %21, align 8
  %23 = zext i8 %14 to i32
  %24 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 8
  %25 = load %struct.MODE_INFO*, %struct.MODE_INFO** %24, align 8
  %26 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 7
  %27 = load %struct.MODE_INFO*, %struct.MODE_INFO** %26, align 8
  %28 = icmp ne %struct.MODE_INFO* %25, null
  %29 = icmp ne %struct.MODE_INFO* %27, null
  br i1 %28, label %30, label %38

30:                                               ; preds = %20
  %31 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %25, i64 0, i32 3
  %32 = load i8, i8* %31, align 1
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %38

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %25, i64 0, i32 2
  %36 = load i8, i8* %35, align 2
  %37 = zext i8 %36 to i32
  br label %38

38:                                               ; preds = %34, %30, %20
  %39 = phi i32 [ %37, %34 ], [ %23, %30 ], [ %23, %20 ]
  br i1 %29, label %40, label %48

40:                                               ; preds = %38
  %41 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %27, i64 0, i32 3
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %44, label %48

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %27, i64 0, i32 2
  %46 = load i8, i8* %45, align 2
  %47 = zext i8 %46 to i32
  br label %48

48:                                               ; preds = %44, %40, %38
  %49 = phi i32 [ %47, %44 ], [ %23, %40 ], [ %23, %38 ]
  %50 = select i1 %29, i32 %49, i32 %39
  %51 = select i1 %28, i32 %39, i32 %50
  %52 = add nuw nsw i32 %51, %50
  %53 = icmp ugt i32 %52, %23
  %54 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 73
  %55 = load %struct.frame_contexts*, %struct.frame_contexts** %54, align 8
  switch i8 %14, label %65 [
    i8 1, label %56
    i8 2, label %59
    i8 3, label %62
  ]

56:                                               ; preds = %48
  %57 = zext i1 %53 to i64
  %58 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %55, i64 0, i32 10, i32 2, i64 %57, i64 0
  br label %65

59:                                               ; preds = %48
  %60 = zext i1 %53 to i64
  %61 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %55, i64 0, i32 10, i32 1, i64 %60, i64 0
  br label %65

62:                                               ; preds = %48
  %63 = zext i1 %53 to i64
  %64 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %55, i64 0, i32 10, i32 0, i64 %63, i64 0
  br label %65

65:                                               ; preds = %62, %59, %56, %48
  %66 = phi i8* [ %64, %62 ], [ %61, %59 ], [ %58, %56 ], [ null, %48 ]
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %3, i64 0, i32 1
  %70 = load i32, i32* %69, align 8
  %71 = mul i32 %70, %68
  %72 = sub nuw nsw i32 256, %68
  %73 = add i32 %72, %71
  %74 = lshr i32 %73, 8
  %75 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %3, i64 0, i32 2
  %76 = load i32, i32* %75, align 4
  %77 = icmp slt i32 %76, 0
  br i1 %77, label %78, label %80

78:                                               ; preds = %65
  tail call void @vpx_reader_fill(%struct.vpx_reader* %3) #5
  %79 = load i32, i32* %75, align 4
  br label %80

80:                                               ; preds = %78, %65
  %81 = phi i32 [ %79, %78 ], [ %76, %65 ]
  %82 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %3, i64 0, i32 0
  %83 = load i64, i64* %82, align 8
  %84 = zext i32 %74 to i64
  %85 = shl i64 %84, 56
  %86 = icmp ult i64 %83, %85
  br i1 %86, label %91, label %87

87:                                               ; preds = %80
  %88 = load i32, i32* %69, align 8
  %89 = sub i32 %88, %74
  %90 = sub i64 %83, %85
  br label %91

91:                                               ; preds = %87, %80
  %92 = phi i64 [ %90, %87 ], [ %83, %80 ]
  %93 = phi i32 [ %89, %87 ], [ %74, %80 ]
  %94 = phi i32 [ 1, %87 ], [ 0, %80 ]
  %95 = and i32 %93, 255
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %96
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i32
  %100 = shl i32 %93, %99
  %101 = zext i8 %98 to i64
  %102 = shl i64 %92, %101
  %103 = sub nsw i32 %81, %99
  store i64 %102, i64* %82, align 8
  store i32 %103, i32* %75, align 4
  store i32 %100, i32* %69, align 8
  %104 = icmp eq i32 %94, 0
  br i1 %104, label %182, label %105

105:                                              ; preds = %91
  %106 = icmp ugt i8 %14, 1
  br i1 %106, label %107, label %182

107:                                              ; preds = %105
  %108 = getelementptr inbounds i8, i8* %66, i64 1
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = mul i32 %100, %110
  %112 = sub nuw nsw i32 256, %110
  %113 = add i32 %112, %111
  %114 = lshr i32 %113, 8
  %115 = icmp slt i32 %103, 0
  br i1 %115, label %116, label %119

116:                                              ; preds = %107
  tail call void @vpx_reader_fill(%struct.vpx_reader* %3) #5
  %117 = load i32, i32* %75, align 4
  %118 = load i64, i64* %82, align 8
  br label %119

119:                                              ; preds = %116, %107
  %120 = phi i64 [ %118, %116 ], [ %102, %107 ]
  %121 = phi i32 [ %117, %116 ], [ %103, %107 ]
  %122 = zext i32 %114 to i64
  %123 = shl i64 %122, 56
  %124 = icmp ult i64 %120, %123
  br i1 %124, label %129, label %125

125:                                              ; preds = %119
  %126 = load i32, i32* %69, align 8
  %127 = sub i32 %126, %114
  %128 = sub i64 %120, %123
  br label %129

129:                                              ; preds = %125, %119
  %130 = phi i64 [ %128, %125 ], [ %120, %119 ]
  %131 = phi i32 [ %127, %125 ], [ %114, %119 ]
  %132 = phi i32 [ 1, %125 ], [ 0, %119 ]
  %133 = and i32 %131, 255
  %134 = zext i32 %133 to i64
  %135 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %134
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i32
  %138 = shl i32 %131, %137
  %139 = zext i8 %136 to i64
  %140 = shl i64 %130, %139
  %141 = sub nsw i32 %121, %137
  store i64 %140, i64* %82, align 8
  store i32 %141, i32* %75, align 4
  store i32 %138, i32* %69, align 8
  %142 = add nuw nsw i32 %132, %94
  %143 = icmp eq i32 %142, 1
  br i1 %143, label %182, label %144

144:                                              ; preds = %129
  %145 = icmp ugt i8 %14, 2
  br i1 %145, label %146, label %182

146:                                              ; preds = %144
  %147 = getelementptr inbounds i8, i8* %66, i64 2
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = mul i32 %138, %149
  %151 = sub nuw nsw i32 256, %149
  %152 = add i32 %151, %150
  %153 = lshr i32 %152, 8
  %154 = icmp slt i32 %141, 0
  br i1 %154, label %155, label %158

155:                                              ; preds = %146
  tail call void @vpx_reader_fill(%struct.vpx_reader* %3) #5
  %156 = load i32, i32* %75, align 4
  %157 = load i64, i64* %82, align 8
  br label %158

158:                                              ; preds = %155, %146
  %159 = phi i64 [ %157, %155 ], [ %140, %146 ]
  %160 = phi i32 [ %156, %155 ], [ %141, %146 ]
  %161 = zext i32 %153 to i64
  %162 = shl i64 %161, 56
  %163 = icmp ult i64 %159, %162
  br i1 %163, label %168, label %164

164:                                              ; preds = %158
  %165 = load i32, i32* %69, align 8
  %166 = sub i32 %165, %153
  %167 = sub i64 %159, %162
  br label %168

168:                                              ; preds = %164, %158
  %169 = phi i64 [ %167, %164 ], [ %159, %158 ]
  %170 = phi i32 [ %166, %164 ], [ %153, %158 ]
  %171 = phi i32 [ 1, %164 ], [ 0, %158 ]
  %172 = and i32 %170, 255
  %173 = zext i32 %172 to i64
  %174 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %173
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i32
  %177 = shl i32 %170, %176
  %178 = zext i8 %175 to i64
  %179 = shl i64 %169, %178
  %180 = sub nsw i32 %160, %176
  store i64 %179, i64* %82, align 8
  store i32 %180, i32* %75, align 4
  store i32 %177, i32* %69, align 8
  %181 = add nuw nsw i32 %171, %142
  br label %182

182:                                              ; preds = %168, %144, %129, %105, %91
  %183 = phi i32 [ %181, %168 ], [ 2, %144 ], [ 1, %129 ], [ 1, %105 ], [ 0, %91 ]
  %184 = icmp eq %struct.FRAME_COUNTS* %22, null
  br i1 %184, label %201, label %185

185:                                              ; preds = %182
  switch i8 %14, label %195 [
    i8 1, label %186
    i8 2, label %189
    i8 3, label %192
  ]

186:                                              ; preds = %185
  %187 = zext i1 %53 to i64
  %188 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %22, i64 0, i32 11, i32 2, i64 %187, i64 0
  br label %195

189:                                              ; preds = %185
  %190 = zext i1 %53 to i64
  %191 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %22, i64 0, i32 11, i32 1, i64 %190, i64 0
  br label %195

192:                                              ; preds = %185
  %193 = zext i1 %53 to i64
  %194 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %22, i64 0, i32 11, i32 0, i64 %193, i64 0
  br label %195

195:                                              ; preds = %192, %189, %186, %185
  %196 = phi i32* [ %194, %192 ], [ %191, %189 ], [ %188, %186 ], [ null, %185 ]
  %197 = sext i32 %183 to i64
  %198 = getelementptr inbounds i32, i32* %196, i64 %197
  %199 = load i32, i32* %198, align 4
  %200 = add i32 %199, 1
  store i32 %200, i32* %198, align 4
  br label %201

201:                                              ; preds = %182, %195
  %202 = trunc i32 %183 to i8
  br label %209

203:                                              ; preds = %4
  %204 = zext i32 %6 to i64
  %205 = getelementptr inbounds [5 x i8], [5 x i8]* @tx_mode_to_biggest_tx_size, i64 0, i64 %204
  %206 = load i8, i8* %205, align 1
  %207 = icmp ult i8 %14, %206
  %208 = select i1 %207, i8 %14, i8 %206
  br label %209

209:                                              ; preds = %203, %201
  %210 = phi i8 [ %202, %201 ], [ %208, %203 ]
  ret i8 %210
}

declare void @vpx_reader_fill(%struct.vpx_reader*) local_unnamed_addr #3

declare zeroext i8 @vp9_above_block_mode(%struct.MODE_INFO*, %struct.MODE_INFO*, i32) local_unnamed_addr #3

declare zeroext i8 @vp9_left_block_mode(%struct.MODE_INFO*, %struct.MODE_INFO*, i32) local_unnamed_addr #3

declare void @vpx_internal_error(%struct.vpx_internal_error_info*, i32, i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i8 @read_inter_mode(%struct.VP9Common* nocapture readonly, %struct.macroblockd* nocapture readonly, %struct.vpx_reader*, i32) unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 73
  %6 = load %struct.frame_contexts*, %struct.frame_contexts** %5, align 8
  %7 = sext i32 %3 to i64
  %8 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %2, i64 0, i32 1
  %9 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %2, i64 0, i32 2
  %10 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %2, i64 0, i32 0
  %11 = load i32, i32* %8, align 8
  %12 = load i32, i32* %9, align 4
  br label %13

13:                                               ; preds = %40, %4
  %14 = phi i32 [ %12, %4 ], [ %52, %40 ]
  %15 = phi i32 [ %11, %4 ], [ %49, %40 ]
  %16 = phi i8 [ 0, %4 ], [ %56, %40 ]
  %17 = sext i8 %16 to i32
  %18 = ashr i32 %17, 1
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %6, i64 0, i32 5, i64 %7, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = mul i32 %15, %22
  %24 = sub nuw nsw i32 256, %22
  %25 = add i32 %24, %23
  %26 = lshr i32 %25, 8
  %27 = icmp slt i32 %14, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %13
  tail call void @vpx_reader_fill(%struct.vpx_reader* %2) #5
  %29 = load i32, i32* %9, align 4
  br label %30

30:                                               ; preds = %28, %13
  %31 = phi i32 [ %29, %28 ], [ %14, %13 ]
  %32 = load i64, i64* %10, align 8
  %33 = zext i32 %26 to i64
  %34 = shl i64 %33, 56
  %35 = icmp ult i64 %32, %34
  br i1 %35, label %40, label %36

36:                                               ; preds = %30
  %37 = load i32, i32* %8, align 8
  %38 = sub i32 %37, %26
  %39 = sub i64 %32, %34
  br label %40

40:                                               ; preds = %36, %30
  %41 = phi i64 [ %39, %36 ], [ %32, %30 ]
  %42 = phi i32 [ %38, %36 ], [ %26, %30 ]
  %43 = phi i32 [ 1, %36 ], [ 0, %30 ]
  %44 = and i32 %42, 255
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = shl i32 %42, %48
  %50 = zext i8 %47 to i64
  %51 = shl i64 %41, %50
  %52 = sub nsw i32 %31, %48
  store i64 %51, i64* %10, align 8
  store i32 %52, i32* %9, align 4
  store i32 %49, i32* %8, align 8
  %53 = add nuw nsw i32 %43, %17
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds [6 x i8], [6 x i8]* @vp9_inter_mode_tree, i64 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = icmp sgt i8 %56, 0
  br i1 %57, label %13, label %58

58:                                               ; preds = %40
  %59 = sext i8 %56 to i32
  %60 = sub nsw i32 0, %59
  %61 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 3
  %62 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %61, align 8
  %63 = icmp eq %struct.FRAME_COUNTS* %62, null
  br i1 %63, label %69, label %64

64:                                               ; preds = %58
  %65 = sext i32 %60 to i64
  %66 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %62, i64 0, i32 6, i64 %7, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = add i32 %67, 1
  store i32 %68, i32* %66, align 4
  br label %69

69:                                               ; preds = %58, %64
  %70 = trunc i32 %60 to i8
  %71 = add nuw i8 %70, 10
  ret i8 %71
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc i32 @dec_find_mv_refs(%struct.VP9Common* nocapture readonly, %struct.macroblockd* nocapture readonly, i8 zeroext, i8 signext, %struct.position* nocapture readonly, %union.int_mv*, i32, i32, i32) unnamed_addr #4 {
  %10 = bitcast %union.int_mv* %5 to i8*
  %11 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 56
  %12 = load i32, i32* %11, align 16
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %26, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 13
  %16 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %15, align 16
  %17 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %16, i64 0, i32 1
  %18 = load %struct.MV_REF*, %struct.MV_REF** %17, align 8
  %19 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 35
  %20 = load i32, i32* %19, align 8
  %21 = mul nsw i32 %20, %6
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %18, i64 %22
  %24 = sext i32 %7 to i64
  %25 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %23, i64 %24
  br label %26

26:                                               ; preds = %9, %14
  %27 = phi %struct.MV_REF* [ %25, %14 ], [ null, %9 ]
  %28 = icmp ne i8 %2, 11
  %29 = bitcast %union.int_mv* %5 to i64*
  store i64 0, i64* %29, align 4
  %30 = icmp sgt i32 %8, -1
  br i1 %30, label %31, label %146

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %33 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 4, i32 2
  %34 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 4, i32 3
  %35 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 6
  %36 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5
  %37 = sext i32 %8 to i64
  %38 = getelementptr inbounds %union.int_mv, %union.int_mv* %5, i64 0, i32 0
  %39 = getelementptr inbounds %struct.position, %struct.position* %4, i64 0, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = add nsw i32 %40, %6
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %138, label %43

43:                                               ; preds = %31
  %44 = load i32, i32* %32, align 16
  %45 = getelementptr inbounds %struct.position, %struct.position* %4, i64 0, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = add nsw i32 %46, %7
  %48 = load i32, i32* %33, align 4
  %49 = icmp sge i32 %47, %48
  %50 = icmp slt i32 %41, %44
  %51 = and i1 %50, %49
  br i1 %51, label %52, label %138

52:                                               ; preds = %43
  %53 = load i32, i32* %34, align 4
  %54 = icmp slt i32 %47, %53
  br i1 %54, label %55, label %138

55:                                               ; preds = %52
  %56 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %35, align 8
  %57 = load i32, i32* %36, align 8
  %58 = mul nsw i32 %57, %40
  %59 = add nsw i32 %58, %46
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %56, i64 %60
  %62 = load %struct.MODE_INFO*, %struct.MODE_INFO** %61, align 8
  %63 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %62, i64 0, i32 8, i64 0
  %64 = load i8, i8* %63, align 4
  %65 = icmp eq i8 %64, %3
  br i1 %65, label %66, label %100

66:                                               ; preds = %55
  %67 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %62, i64 0, i32 0
  %68 = load i8, i8* %67, align 4
  %69 = icmp ult i8 %68, 3
  br i1 %69, label %70, label %77

70:                                               ; preds = %66
  %71 = icmp eq i32 %46, 0
  %72 = zext i1 %71 to i64
  %73 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @idx_n_column_to_subblock, i64 0, i64 %37, i64 %72
  %74 = load i32, i32* %73, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %62, i64 0, i32 10, i64 %75, i32 1, i64 0, i32 0
  br label %97

77:                                               ; preds = %66
  %78 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %62, i64 0, i32 9, i64 0, i32 0
  br label %97

79:                                               ; preds = %646
  %80 = zext i32 %141 to i64
  %81 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %601, i64 0, i32 0
  %82 = load i8, i8* %81, align 4
  %83 = icmp ult i8 %82, 3
  br i1 %83, label %84, label %91

84:                                               ; preds = %79
  %85 = icmp eq i32 %585, 0
  %86 = zext i1 %85 to i64
  %87 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @idx_n_column_to_subblock, i64 0, i64 %37, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %601, i64 0, i32 10, i64 %89, i32 1, i64 0, i32 0
  br label %93

91:                                               ; preds = %79
  %92 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %601, i64 0, i32 9, i64 0, i32 0
  br label %93

93:                                               ; preds = %84, %91
  %94 = phi i32* [ %90, %84 ], [ %92, %91 ]
  %95 = load i32, i32* %94, align 4
  %96 = getelementptr inbounds %union.int_mv, %union.int_mv* %5, i64 %80, i32 0
  store i32 %95, i32* %96, align 4
  br label %486

97:                                               ; preds = %77, %70
  %98 = phi i32* [ %76, %70 ], [ %78, %77 ]
  %99 = load i32, i32* %98, align 4
  store i32 %99, i32* %38, align 4
  br i1 %28, label %486, label %138

100:                                              ; preds = %55
  %101 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %62, i64 0, i32 8, i64 1
  %102 = load i8, i8* %101, align 1
  %103 = icmp eq i8 %102, %3
  br i1 %103, label %104, label %138

104:                                              ; preds = %100
  %105 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %62, i64 0, i32 0
  %106 = load i8, i8* %105, align 4
  %107 = icmp ult i8 %106, 3
  br i1 %107, label %108, label %115

108:                                              ; preds = %104
  %109 = icmp eq i32 %46, 0
  %110 = zext i1 %109 to i64
  %111 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @idx_n_column_to_subblock, i64 0, i64 %37, i64 %110
  %112 = load i32, i32* %111, align 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %62, i64 0, i32 10, i64 %113, i32 1, i64 1, i32 0
  br label %135

115:                                              ; preds = %104
  %116 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %62, i64 0, i32 9, i64 1, i32 0
  br label %135

117:                                              ; preds = %626
  %118 = zext i32 %141 to i64
  %119 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %601, i64 0, i32 0
  %120 = load i8, i8* %119, align 4
  %121 = icmp ult i8 %120, 3
  br i1 %121, label %122, label %129

122:                                              ; preds = %117
  %123 = icmp eq i32 %585, 0
  %124 = zext i1 %123 to i64
  %125 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @idx_n_column_to_subblock, i64 0, i64 %37, i64 %124
  %126 = load i32, i32* %125, align 4
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %601, i64 0, i32 10, i64 %127, i32 1, i64 1, i32 0
  br label %131

129:                                              ; preds = %117
  %130 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %601, i64 0, i32 9, i64 1, i32 0
  br label %131

131:                                              ; preds = %122, %129
  %132 = phi i32* [ %128, %122 ], [ %130, %129 ]
  %133 = load i32, i32* %132, align 4
  %134 = getelementptr inbounds %union.int_mv, %union.int_mv* %5, i64 %118, i32 0
  store i32 %133, i32* %134, align 4
  br label %486

135:                                              ; preds = %115, %108
  %136 = phi i32* [ %114, %108 ], [ %116, %115 ]
  %137 = load i32, i32* %136, align 4
  store i32 %137, i32* %38, align 4
  br i1 %28, label %486, label %138

138:                                              ; preds = %52, %31, %43, %100, %135, %97
  %139 = phi i32 [ 0, %100 ], [ %137, %135 ], [ %99, %97 ], [ 0, %52 ], [ 0, %43 ], [ 0, %31 ]
  %140 = phi i32 [ 1, %100 ], [ 1, %135 ], [ 1, %97 ], [ 0, %52 ], [ 0, %43 ], [ 0, %31 ]
  %141 = phi i32 [ 0, %100 ], [ 1, %135 ], [ 1, %97 ], [ 0, %52 ], [ 0, %43 ], [ 0, %31 ]
  %142 = getelementptr inbounds %struct.position, %struct.position* %4, i64 1, i32 0
  %143 = load i32, i32* %142, align 4
  %144 = add nsw i32 %143, %6
  %145 = icmp slt i32 %144, 0
  br i1 %145, label %146, label %582

146:                                              ; preds = %138, %582, %591, %605, %626, %628, %646, %648, %26
  %147 = phi i32 [ 0, %26 ], [ %139, %646 ], [ %139, %626 ], [ %139, %605 ], [ %625, %628 ], [ %645, %648 ], [ %139, %591 ], [ %139, %582 ], [ %139, %138 ]
  %148 = phi i32 [ 0, %26 ], [ 1, %646 ], [ 1, %626 ], [ 1, %605 ], [ 1, %628 ], [ 1, %648 ], [ %140, %591 ], [ %140, %582 ], [ %140, %138 ]
  %149 = phi i32 [ 0, %26 ], [ 1, %646 ], [ 1, %626 ], [ %141, %605 ], [ 1, %628 ], [ 1, %648 ], [ %141, %591 ], [ %141, %582 ], [ %141, %138 ]
  %150 = phi i64 [ 0, %26 ], [ 2, %646 ], [ 2, %626 ], [ 2, %605 ], [ 2, %628 ], [ 2, %648 ], [ 2, %591 ], [ 2, %582 ], [ 2, %138 ]
  %151 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %152 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 4, i32 2
  %153 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 4, i32 3
  %154 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 6
  %155 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5
  %156 = getelementptr inbounds %union.int_mv, %union.int_mv* %5, i64 0, i32 0
  br label %157

157:                                              ; preds = %215, %146
  %158 = phi i32 [ %147, %146 ], [ %216, %215 ]
  %159 = phi i32 [ %147, %146 ], [ %217, %215 ]
  %160 = phi i32 [ %147, %146 ], [ %218, %215 ]
  %161 = phi i64 [ %150, %146 ], [ %221, %215 ]
  %162 = phi i32 [ %149, %146 ], [ %220, %215 ]
  %163 = phi i32 [ %148, %146 ], [ %219, %215 ]
  %164 = getelementptr inbounds %struct.position, %struct.position* %4, i64 %161, i32 0
  %165 = load i32, i32* %164, align 4
  %166 = add nsw i32 %165, %6
  %167 = icmp slt i32 %166, 0
  br i1 %167, label %215, label %168

168:                                              ; preds = %157
  %169 = load i32, i32* %151, align 16
  %170 = getelementptr inbounds %struct.position, %struct.position* %4, i64 %161, i32 1
  %171 = load i32, i32* %170, align 4
  %172 = add nsw i32 %171, %7
  %173 = load i32, i32* %152, align 4
  %174 = icmp sge i32 %172, %173
  %175 = icmp slt i32 %166, %169
  %176 = and i1 %175, %174
  br i1 %176, label %177, label %215

177:                                              ; preds = %168
  %178 = load i32, i32* %153, align 4
  %179 = icmp slt i32 %172, %178
  br i1 %179, label %180, label %215

180:                                              ; preds = %177
  %181 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %154, align 8
  %182 = load i32, i32* %155, align 8
  %183 = mul nsw i32 %182, %165
  %184 = add nsw i32 %183, %171
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %181, i64 %185
  %187 = load %struct.MODE_INFO*, %struct.MODE_INFO** %186, align 8
  %188 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %187, i64 0, i32 8, i64 0
  %189 = load i8, i8* %188, align 4
  %190 = icmp eq i8 %189, %3
  br i1 %190, label %191, label %201

191:                                              ; preds = %180
  %192 = icmp eq i32 %162, 0
  %193 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %187, i64 0, i32 9, i64 0, i32 0
  %194 = load i32, i32* %193, align 4
  br i1 %192, label %200, label %195

195:                                              ; preds = %191
  %196 = icmp eq i32 %194, %159
  br i1 %196, label %215, label %197

197:                                              ; preds = %195
  %198 = sext i32 %162 to i64
  %199 = getelementptr inbounds %union.int_mv, %union.int_mv* %5, i64 %198, i32 0
  store i32 %194, i32* %199, align 4
  br label %482

200:                                              ; preds = %191
  store i32 %194, i32* %156, align 4
  br i1 %28, label %486, label %215

201:                                              ; preds = %180
  %202 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %187, i64 0, i32 8, i64 1
  %203 = load i8, i8* %202, align 1
  %204 = icmp eq i8 %203, %3
  br i1 %204, label %205, label %215

205:                                              ; preds = %201
  %206 = icmp eq i32 %162, 0
  %207 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %187, i64 0, i32 9, i64 1, i32 0
  %208 = load i32, i32* %207, align 4
  br i1 %206, label %214, label %209

209:                                              ; preds = %205
  %210 = icmp eq i32 %208, %160
  br i1 %210, label %215, label %211

211:                                              ; preds = %209
  %212 = sext i32 %162 to i64
  %213 = getelementptr inbounds %union.int_mv, %union.int_mv* %5, i64 %212, i32 0
  store i32 %208, i32* %213, align 4
  br label %482

214:                                              ; preds = %205
  store i32 %208, i32* %156, align 4
  br i1 %28, label %486, label %215

215:                                              ; preds = %177, %157, %168, %195, %209, %201, %214, %200
  %216 = phi i32 [ %158, %195 ], [ %158, %209 ], [ %158, %201 ], [ %208, %214 ], [ %194, %200 ], [ %158, %177 ], [ %158, %168 ], [ %158, %157 ]
  %217 = phi i32 [ %159, %195 ], [ %159, %209 ], [ %159, %201 ], [ %208, %214 ], [ %194, %200 ], [ %159, %177 ], [ %159, %168 ], [ %159, %157 ]
  %218 = phi i32 [ %159, %195 ], [ %160, %209 ], [ %160, %201 ], [ %208, %214 ], [ %194, %200 ], [ %160, %177 ], [ %160, %168 ], [ %160, %157 ]
  %219 = phi i32 [ 1, %195 ], [ 1, %209 ], [ 1, %201 ], [ 1, %214 ], [ 1, %200 ], [ %163, %177 ], [ %163, %168 ], [ %163, %157 ]
  %220 = phi i32 [ %162, %195 ], [ %162, %209 ], [ %162, %201 ], [ 1, %214 ], [ 1, %200 ], [ %162, %177 ], [ %162, %168 ], [ %162, %157 ]
  %221 = add nuw nsw i64 %161, 1
  %222 = icmp eq i64 %221, 8
  br i1 %222, label %223, label %157

223:                                              ; preds = %215
  %224 = icmp ne %struct.MV_REF* %27, null
  br i1 %224, label %225, label %257

225:                                              ; preds = %223
  %226 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %27, i64 0, i32 1, i64 0
  %227 = load i8, i8* %226, align 4
  %228 = icmp eq i8 %227, %3
  br i1 %228, label %229, label %241

229:                                              ; preds = %225
  %230 = icmp eq i32 %220, 0
  %231 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %27, i64 0, i32 0, i64 0, i32 0
  br i1 %230, label %238, label %232

232:                                              ; preds = %229
  %233 = load i32, i32* %231, align 4
  %234 = icmp eq i32 %233, %216
  br i1 %234, label %257, label %235

235:                                              ; preds = %232
  %236 = sext i32 %220 to i64
  %237 = getelementptr inbounds %union.int_mv, %union.int_mv* %5, i64 %236, i32 0
  store i32 %233, i32* %237, align 4
  br label %482

238:                                              ; preds = %229
  %239 = getelementptr inbounds %union.int_mv, %union.int_mv* %5, i64 0, i32 0
  %240 = load i32, i32* %231, align 4
  store i32 %240, i32* %239, align 4
  br i1 %28, label %486, label %257

241:                                              ; preds = %225
  %242 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %27, i64 0, i32 1, i64 1
  %243 = load i8, i8* %242, align 1
  %244 = icmp eq i8 %243, %3
  br i1 %244, label %245, label %257

245:                                              ; preds = %241
  %246 = icmp eq i32 %220, 0
  %247 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %27, i64 0, i32 0, i64 1, i32 0
  br i1 %246, label %254, label %248

248:                                              ; preds = %245
  %249 = load i32, i32* %247, align 4
  %250 = icmp eq i32 %249, %216
  br i1 %250, label %257, label %251

251:                                              ; preds = %248
  %252 = sext i32 %220 to i64
  %253 = getelementptr inbounds %union.int_mv, %union.int_mv* %5, i64 %252, i32 0
  store i32 %249, i32* %253, align 4
  br label %482

254:                                              ; preds = %245
  %255 = getelementptr inbounds %union.int_mv, %union.int_mv* %5, i64 0, i32 0
  %256 = load i32, i32* %247, align 4
  store i32 %256, i32* %255, align 4
  br i1 %28, label %486, label %257

257:                                              ; preds = %232, %248, %238, %254, %241, %223
  %258 = phi i32 [ %216, %232 ], [ %240, %238 ], [ %216, %248 ], [ %256, %254 ], [ %216, %241 ], [ %216, %223 ]
  %259 = phi i32 [ %220, %232 ], [ 1, %238 ], [ %220, %248 ], [ 1, %254 ], [ %220, %241 ], [ %220, %223 ]
  %260 = icmp eq i32 %219, 0
  br i1 %260, label %382, label %261

261:                                              ; preds = %257
  %262 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 33
  %263 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 4, i32 2
  %264 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 4, i32 3
  %265 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 6
  %266 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 5
  %267 = sext i8 %3 to i64
  %268 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 67, i64 %267
  %269 = getelementptr inbounds %union.int_mv, %union.int_mv* %5, i64 0, i32 0
  br label %270

270:                                              ; preds = %375, %261
  %271 = phi i32 [ %258, %261 ], [ %376, %375 ]
  %272 = phi i32 [ %258, %261 ], [ %377, %375 ]
  %273 = phi i32 [ %258, %261 ], [ %378, %375 ]
  %274 = phi i64 [ 0, %261 ], [ %380, %375 ]
  %275 = phi i32 [ %259, %261 ], [ %379, %375 ]
  %276 = getelementptr inbounds %struct.position, %struct.position* %4, i64 %274, i32 0
  %277 = load i32, i32* %276, align 4
  %278 = add nsw i32 %277, %6
  %279 = icmp slt i32 %278, 0
  br i1 %279, label %375, label %280

280:                                              ; preds = %270
  %281 = load i32, i32* %262, align 16
  %282 = getelementptr inbounds %struct.position, %struct.position* %4, i64 %274, i32 1
  %283 = load i32, i32* %282, align 4
  %284 = add nsw i32 %283, %7
  %285 = load i32, i32* %263, align 4
  %286 = icmp sge i32 %284, %285
  %287 = icmp slt i32 %278, %281
  %288 = and i1 %287, %286
  br i1 %288, label %289, label %375

289:                                              ; preds = %280
  %290 = load i32, i32* %264, align 4
  %291 = icmp slt i32 %284, %290
  br i1 %291, label %292, label %375

292:                                              ; preds = %289
  %293 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %265, align 8
  %294 = load i32, i32* %266, align 8
  %295 = mul nsw i32 %294, %277
  %296 = add nsw i32 %295, %283
  %297 = sext i32 %296 to i64
  %298 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %293, i64 %297
  %299 = load %struct.MODE_INFO*, %struct.MODE_INFO** %298, align 8
  %300 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %299, i64 0, i32 8, i64 0
  %301 = load i8, i8* %300, align 4
  %302 = icmp slt i8 %301, 1
  br i1 %302, label %375, label %303

303:                                              ; preds = %292
  %304 = icmp eq i8 %301, %3
  br i1 %304, label %333, label %305

305:                                              ; preds = %303
  %306 = icmp eq i32 %275, 0
  %307 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %299, i64 0, i32 9, i64 0
  %308 = bitcast %union.int_mv* %307 to i8*
  %309 = bitcast %union.int_mv* %307 to i16*
  %310 = load i16, i16* %309, align 4
  %311 = getelementptr inbounds i8, i8* %308, i64 2
  %312 = bitcast i8* %311 to i16*
  %313 = load i16, i16* %312, align 2
  %314 = sext i8 %301 to i64
  %315 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 67, i64 %314
  %316 = load i32, i32* %315, align 4
  %317 = load i32, i32* %268, align 4
  %318 = icmp eq i32 %316, %317
  %319 = sub i16 0, %310
  %320 = sub i16 0, %313
  %321 = select i1 %318, i16 %310, i16 %319
  %322 = select i1 %318, i16 %313, i16 %320
  %323 = zext i16 %322 to i32
  %324 = shl nuw i32 %323, 16
  %325 = zext i16 %321 to i32
  %326 = or i32 %324, %325
  br i1 %306, label %332, label %327

327:                                              ; preds = %305
  %328 = icmp eq i32 %326, %273
  br i1 %328, label %333, label %329

329:                                              ; preds = %327
  %330 = sext i32 %275 to i64
  %331 = getelementptr inbounds %union.int_mv, %union.int_mv* %5, i64 %330, i32 0
  store i32 %326, i32* %331, align 4
  br label %482

332:                                              ; preds = %305
  store i32 %326, i32* %269, align 4
  br i1 %28, label %486, label %333

333:                                              ; preds = %327, %303, %332
  %334 = phi i32 [ %271, %327 ], [ %326, %332 ], [ %271, %303 ]
  %335 = phi i32 [ %272, %327 ], [ %326, %332 ], [ %272, %303 ]
  %336 = phi i32 [ %273, %327 ], [ %326, %332 ], [ %273, %303 ]
  %337 = phi i32 [ %275, %327 ], [ 1, %332 ], [ %275, %303 ]
  %338 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %299, i64 0, i32 8, i64 1
  %339 = load i8, i8* %338, align 1
  %340 = icmp slt i8 %339, 1
  %341 = icmp eq i8 %339, %3
  %342 = or i1 %340, %341
  br i1 %342, label %375, label %343

343:                                              ; preds = %333
  %344 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %299, i64 0, i32 9, i64 1, i32 0
  %345 = load i32, i32* %344, align 4
  %346 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %299, i64 0, i32 9, i64 0, i32 0
  %347 = load i32, i32* %346, align 4
  %348 = icmp eq i32 %345, %347
  br i1 %348, label %375, label %349

349:                                              ; preds = %343
  %350 = icmp eq i32 %337, 0
  %351 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %299, i64 0, i32 9, i64 1
  %352 = bitcast %union.int_mv* %351 to i8*
  %353 = getelementptr inbounds i8, i8* %352, i64 2
  %354 = bitcast i8* %353 to i16*
  %355 = load i16, i16* %354, align 2
  %356 = sext i8 %339 to i64
  %357 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 67, i64 %356
  %358 = load i32, i32* %357, align 4
  %359 = load i32, i32* %268, align 4
  %360 = icmp eq i32 %358, %359
  %361 = sub i32 0, %345
  %362 = sub i16 0, %355
  %363 = select i1 %360, i32 %345, i32 %361
  %364 = select i1 %360, i16 %355, i16 %362
  %365 = zext i16 %364 to i32
  %366 = shl nuw i32 %365, 16
  %367 = and i32 %363, 65535
  %368 = or i32 %366, %367
  br i1 %350, label %374, label %369

369:                                              ; preds = %349
  %370 = icmp eq i32 %368, %335
  br i1 %370, label %375, label %371

371:                                              ; preds = %369
  %372 = sext i32 %337 to i64
  %373 = getelementptr inbounds %union.int_mv, %union.int_mv* %5, i64 %372, i32 0
  store i32 %368, i32* %373, align 4
  br label %482

374:                                              ; preds = %349
  store i32 %368, i32* %269, align 4
  br i1 %28, label %486, label %375

375:                                              ; preds = %289, %270, %280, %369, %343, %333, %292, %374
  %376 = phi i32 [ %271, %292 ], [ %334, %333 ], [ %334, %343 ], [ %368, %374 ], [ %334, %369 ], [ %271, %289 ], [ %271, %280 ], [ %271, %270 ]
  %377 = phi i32 [ %272, %292 ], [ %335, %333 ], [ %335, %343 ], [ %368, %374 ], [ %335, %369 ], [ %272, %289 ], [ %272, %280 ], [ %272, %270 ]
  %378 = phi i32 [ %273, %292 ], [ %336, %333 ], [ %336, %343 ], [ %368, %374 ], [ %335, %369 ], [ %273, %289 ], [ %273, %280 ], [ %273, %270 ]
  %379 = phi i32 [ %275, %292 ], [ %337, %333 ], [ %337, %343 ], [ 1, %374 ], [ %337, %369 ], [ %275, %289 ], [ %275, %280 ], [ %275, %270 ]
  %380 = add nuw nsw i64 %274, 1
  %381 = icmp eq i64 %380, 8
  br i1 %381, label %382, label %270

382:                                              ; preds = %375, %257
  %383 = phi i32 [ %258, %257 ], [ %376, %375 ]
  %384 = phi i32 [ %259, %257 ], [ %379, %375 ]
  br i1 %224, label %385, label %479

385:                                              ; preds = %382
  %386 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %27, i64 0, i32 1, i64 0
  %387 = load i8, i8* %386, align 4
  %388 = icmp ne i8 %387, %3
  %389 = icmp sgt i8 %387, 0
  %390 = and i1 %388, %389
  br i1 %390, label %391, label %427

391:                                              ; preds = %385
  %392 = bitcast %struct.MV_REF* %27 to i8*
  %393 = bitcast %struct.MV_REF* %27 to i16*
  %394 = load i16, i16* %393, align 4
  %395 = getelementptr inbounds i8, i8* %392, i64 2
  %396 = bitcast i8* %395 to i16*
  %397 = load i16, i16* %396, align 2
  %398 = sext i8 %387 to i64
  %399 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 67, i64 %398
  %400 = load i32, i32* %399, align 4
  %401 = sext i8 %3 to i64
  %402 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 67, i64 %401
  %403 = load i32, i32* %402, align 4
  %404 = icmp eq i32 %400, %403
  %405 = sub i16 0, %394
  %406 = sub i16 0, %397
  %407 = select i1 %404, i16 %397, i16 %406
  %408 = select i1 %404, i16 %394, i16 %405
  %409 = icmp eq i32 %384, 0
  br i1 %409, label %423, label %410

410:                                              ; preds = %391
  %411 = zext i16 %407 to i32
  %412 = shl nuw i32 %411, 16
  %413 = zext i16 %408 to i32
  %414 = or i32 %412, %413
  %415 = icmp eq i32 %414, %383
  br i1 %415, label %427, label %416

416:                                              ; preds = %410
  %417 = sext i32 %384 to i64
  %418 = getelementptr inbounds %union.int_mv, %union.int_mv* %5, i64 %417
  %419 = bitcast %union.int_mv* %418 to i8*
  %420 = bitcast %union.int_mv* %418 to i16*
  store i16 %408, i16* %420, align 4
  %421 = getelementptr inbounds i8, i8* %419, i64 2
  %422 = bitcast i8* %421 to i16*
  store i16 %407, i16* %422, align 2
  br label %482

423:                                              ; preds = %391
  %424 = bitcast %union.int_mv* %5 to i16*
  store i16 %408, i16* %424, align 4
  %425 = getelementptr inbounds i8, i8* %10, i64 2
  %426 = bitcast i8* %425 to i16*
  store i16 %407, i16* %426, align 2
  br i1 %28, label %486, label %427

427:                                              ; preds = %410, %423, %385
  %428 = phi i32 [ %384, %385 ], [ %384, %410 ], [ 1, %423 ]
  %429 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %27, i64 0, i32 1, i64 1
  %430 = load i8, i8* %429, align 1
  %431 = icmp slt i8 %430, 1
  %432 = icmp eq i8 %430, %3
  %433 = or i1 %431, %432
  br i1 %433, label %479, label %434

434:                                              ; preds = %427
  %435 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %27, i64 0, i32 0, i64 1
  %436 = getelementptr inbounds %union.int_mv, %union.int_mv* %435, i64 0, i32 0
  %437 = load i32, i32* %436, align 4
  %438 = getelementptr inbounds %struct.MV_REF, %struct.MV_REF* %27, i64 0, i32 0, i64 0, i32 0
  %439 = load i32, i32* %438, align 4
  %440 = icmp eq i32 %437, %439
  %441 = trunc i32 %437 to i16
  br i1 %440, label %479, label %442

442:                                              ; preds = %434
  %443 = bitcast %union.int_mv* %435 to i8*
  %444 = getelementptr inbounds i8, i8* %443, i64 2
  %445 = bitcast i8* %444 to i16*
  %446 = load i16, i16* %445, align 2
  %447 = sext i8 %430 to i64
  %448 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 67, i64 %447
  %449 = load i32, i32* %448, align 4
  %450 = sext i8 %3 to i64
  %451 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 67, i64 %450
  %452 = load i32, i32* %451, align 4
  %453 = icmp eq i32 %449, %452
  %454 = sub i16 0, %441
  %455 = sub i16 0, %446
  %456 = select i1 %453, i16 %446, i16 %455
  %457 = select i1 %453, i16 %441, i16 %454
  %458 = icmp eq i32 %428, 0
  br i1 %458, label %474, label %459

459:                                              ; preds = %442
  %460 = zext i16 %456 to i32
  %461 = shl nuw i32 %460, 16
  %462 = zext i16 %457 to i32
  %463 = or i32 %461, %462
  %464 = getelementptr inbounds %union.int_mv, %union.int_mv* %5, i64 0, i32 0
  %465 = load i32, i32* %464, align 4
  %466 = icmp eq i32 %463, %465
  br i1 %466, label %479, label %467

467:                                              ; preds = %459
  %468 = sext i32 %428 to i64
  %469 = getelementptr inbounds %union.int_mv, %union.int_mv* %5, i64 %468
  %470 = bitcast %union.int_mv* %469 to i8*
  %471 = bitcast %union.int_mv* %469 to i16*
  store i16 %457, i16* %471, align 4
  %472 = getelementptr inbounds i8, i8* %470, i64 2
  %473 = bitcast i8* %472 to i16*
  store i16 %456, i16* %473, align 2
  br label %482

474:                                              ; preds = %442
  %475 = bitcast %union.int_mv* %5 to i8*
  %476 = bitcast %union.int_mv* %5 to i16*
  store i16 %457, i16* %476, align 4
  %477 = getelementptr inbounds i8, i8* %475, i64 2
  %478 = bitcast i8* %477 to i16*
  store i16 %456, i16* %478, align 2
  br i1 %28, label %486, label %479

479:                                              ; preds = %459, %474, %427, %434, %382
  %480 = icmp eq i8 %2, 11
  %481 = select i1 %480, i32 2, i32 1
  br label %486

482:                                              ; preds = %467, %416, %371, %329, %211, %197, %251, %235
  %483 = phi i32 [ %220, %235 ], [ %220, %251 ], [ %162, %211 ], [ %162, %197 ], [ %337, %371 ], [ %275, %329 ], [ %384, %416 ], [ %428, %467 ]
  %484 = add nsw i32 %483, 1
  %485 = icmp sgt i32 %483, -1
  br i1 %485, label %486, label %580

486:                                              ; preds = %214, %200, %374, %332, %135, %97, %628, %648, %474, %423, %93, %131, %479, %254, %238, %482
  %487 = phi i32 [ %484, %482 ], [ 1, %135 ], [ 1, %97 ], [ 1, %628 ], [ 1, %648 ], [ 1, %474 ], [ 1, %423 ], [ 2, %93 ], [ 2, %131 ], [ %481, %479 ], [ 1, %254 ], [ 1, %238 ], [ 1, %332 ], [ 1, %374 ], [ 1, %200 ], [ 1, %214 ]
  %488 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 12
  %489 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 13
  %490 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 14
  %491 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 15
  %492 = zext i32 %487 to i64
  %493 = icmp ult i32 %487, 4
  br i1 %493, label %548, label %494

494:                                              ; preds = %486
  %495 = getelementptr %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 15
  %496 = bitcast i32* %495 to i8*
  %497 = getelementptr i8, i8* %496, i64 1
  %498 = icmp ugt i8* %497, %10
  %499 = getelementptr inbounds %union.int_mv, %union.int_mv* %5, i64 %492, i32 0
  %500 = icmp ult i32* %491, %499
  %501 = and i1 %498, %500
  br i1 %501, label %548, label %502

502:                                              ; preds = %494
  %503 = and i64 %492, 4294967292
  br label %504

504:                                              ; preds = %504, %502
  %505 = phi i64 [ 0, %502 ], [ %544, %504 ]
  %506 = getelementptr inbounds %union.int_mv, %union.int_mv* %5, i64 %505
  %507 = bitcast %union.int_mv* %506 to %struct.mv*
  %508 = load i32, i32* %488, align 8, !alias.scope !8
  %509 = insertelement <4 x i32> undef, i32 %508, i32 0
  %510 = add nsw <4 x i32> %509, <i32 -128, i32 undef, i32 undef, i32 undef>
  %511 = shufflevector <4 x i32> %510, <4 x i32> undef, <4 x i32> zeroinitializer
  %512 = load i32, i32* %489, align 4, !alias.scope !8
  %513 = insertelement <4 x i32> undef, i32 %512, i32 0
  %514 = add nsw <4 x i32> %513, <i32 128, i32 undef, i32 undef, i32 undef>
  %515 = shufflevector <4 x i32> %514, <4 x i32> undef, <4 x i32> zeroinitializer
  %516 = load i32, i32* %490, align 8, !alias.scope !8
  %517 = insertelement <4 x i32> undef, i32 %516, i32 0
  %518 = add nsw <4 x i32> %517, <i32 -128, i32 undef, i32 undef, i32 undef>
  %519 = shufflevector <4 x i32> %518, <4 x i32> undef, <4 x i32> zeroinitializer
  %520 = load i32, i32* %491, align 4, !alias.scope !8
  %521 = insertelement <4 x i32> undef, i32 %520, i32 0
  %522 = add nsw <4 x i32> %521, <i32 128, i32 undef, i32 undef, i32 undef>
  %523 = shufflevector <4 x i32> %522, <4 x i32> undef, <4 x i32> zeroinitializer
  %524 = getelementptr inbounds %struct.mv, %struct.mv* %507, i64 0, i32 1
  %525 = getelementptr inbounds i16, i16* %524, i64 -1
  %526 = bitcast i16* %525 to <8 x i16>*
  %527 = load <8 x i16>, <8 x i16>* %526, align 2
  %528 = shufflevector <8 x i16> %527, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %529 = shufflevector <8 x i16> %527, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %530 = sext <4 x i16> %529 to <4 x i32>
  %531 = icmp sgt <4 x i32> %511, %530
  %532 = icmp slt <4 x i32> %515, %530
  %533 = select <4 x i1> %532, <4 x i32> %515, <4 x i32> %530
  %534 = select <4 x i1> %531, <4 x i32> %511, <4 x i32> %533
  %535 = trunc <4 x i32> %534 to <4 x i16>
  %536 = sext <4 x i16> %528 to <4 x i32>
  %537 = icmp sgt <4 x i32> %519, %536
  %538 = icmp slt <4 x i32> %523, %536
  %539 = select <4 x i1> %538, <4 x i32> %523, <4 x i32> %536
  %540 = select <4 x i1> %537, <4 x i32> %519, <4 x i32> %539
  %541 = trunc <4 x i32> %540 to <4 x i16>
  %542 = bitcast %union.int_mv* %506 to <8 x i16>*
  %543 = shufflevector <4 x i16> %541, <4 x i16> %535, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x i16> %543, <8 x i16>* %542, align 2
  %544 = add i64 %505, 4
  %545 = icmp eq i64 %544, %503
  br i1 %545, label %546, label %504, !llvm.loop !11

546:                                              ; preds = %504
  %547 = icmp eq i64 %503, %492
  br i1 %547, label %580, label %548

548:                                              ; preds = %546, %494, %486
  %549 = phi i64 [ 0, %494 ], [ 0, %486 ], [ %503, %546 ]
  br label %550

550:                                              ; preds = %548, %550
  %551 = phi i64 [ %578, %550 ], [ %549, %548 ]
  %552 = getelementptr inbounds %union.int_mv, %union.int_mv* %5, i64 %551
  %553 = bitcast %union.int_mv* %552 to %struct.mv*
  %554 = load i32, i32* %488, align 8
  %555 = add nsw i32 %554, -128
  %556 = load i32, i32* %489, align 4
  %557 = add nsw i32 %556, 128
  %558 = load i32, i32* %490, align 8
  %559 = add nsw i32 %558, -128
  %560 = load i32, i32* %491, align 4
  %561 = add nsw i32 %560, 128
  %562 = getelementptr inbounds %struct.mv, %struct.mv* %553, i64 0, i32 1
  %563 = load i16, i16* %562, align 2
  %564 = sext i16 %563 to i32
  %565 = icmp sgt i32 %555, %564
  %566 = icmp slt i32 %557, %564
  %567 = select i1 %566, i32 %557, i32 %564
  %568 = select i1 %565, i32 %555, i32 %567
  %569 = trunc i32 %568 to i16
  store i16 %569, i16* %562, align 2
  %570 = bitcast %union.int_mv* %552 to i16*
  %571 = load i16, i16* %570, align 2
  %572 = sext i16 %571 to i32
  %573 = icmp sgt i32 %559, %572
  %574 = icmp slt i32 %561, %572
  %575 = select i1 %574, i32 %561, i32 %572
  %576 = select i1 %573, i32 %559, i32 %575
  %577 = trunc i32 %576 to i16
  store i16 %577, i16* %570, align 2
  %578 = add nuw nsw i64 %551, 1
  %579 = icmp eq i64 %578, %492
  br i1 %579, label %580, label %550, !llvm.loop !12

580:                                              ; preds = %550, %546, %482
  %581 = phi i32 [ %484, %482 ], [ %487, %546 ], [ %487, %550 ]
  ret i32 %581

582:                                              ; preds = %138
  %583 = load i32, i32* %32, align 16
  %584 = getelementptr inbounds %struct.position, %struct.position* %4, i64 1, i32 1
  %585 = load i32, i32* %584, align 4
  %586 = add nsw i32 %585, %7
  %587 = load i32, i32* %33, align 4
  %588 = icmp sge i32 %586, %587
  %589 = icmp slt i32 %144, %583
  %590 = and i1 %589, %588
  br i1 %590, label %591, label %146

591:                                              ; preds = %582
  %592 = load i32, i32* %34, align 4
  %593 = icmp slt i32 %586, %592
  br i1 %593, label %594, label %146

594:                                              ; preds = %591
  %595 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %35, align 8
  %596 = load i32, i32* %36, align 8
  %597 = mul nsw i32 %596, %143
  %598 = add nsw i32 %597, %585
  %599 = sext i32 %598 to i64
  %600 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %595, i64 %599
  %601 = load %struct.MODE_INFO*, %struct.MODE_INFO** %600, align 8
  %602 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %601, i64 0, i32 8, i64 0
  %603 = load i8, i8* %602, align 4
  %604 = icmp eq i8 %603, %3
  br i1 %604, label %629, label %605

605:                                              ; preds = %594
  %606 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %601, i64 0, i32 8, i64 1
  %607 = load i8, i8* %606, align 1
  %608 = icmp eq i8 %607, %3
  br i1 %608, label %609, label %146

609:                                              ; preds = %605
  %610 = icmp eq i32 %141, 0
  %611 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %601, i64 0, i32 0
  %612 = load i8, i8* %611, align 4
  %613 = icmp ult i8 %612, 3
  br i1 %613, label %616, label %614

614:                                              ; preds = %609
  %615 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %601, i64 0, i32 9, i64 1, i32 0
  br label %623

616:                                              ; preds = %609
  %617 = icmp eq i32 %585, 0
  %618 = zext i1 %617 to i64
  %619 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @idx_n_column_to_subblock, i64 0, i64 %37, i64 %618
  %620 = load i32, i32* %619, align 4
  %621 = sext i32 %620 to i64
  %622 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %601, i64 0, i32 10, i64 %621, i32 1, i64 1, i32 0
  br label %623

623:                                              ; preds = %616, %614
  %624 = phi i32* [ %622, %616 ], [ %615, %614 ]
  %625 = load i32, i32* %624, align 4
  br i1 %610, label %628, label %626

626:                                              ; preds = %623
  %627 = icmp eq i32 %625, %139
  br i1 %627, label %146, label %117

628:                                              ; preds = %623
  store i32 %625, i32* %38, align 4
  br i1 %28, label %486, label %146

629:                                              ; preds = %594
  %630 = icmp eq i32 %141, 0
  %631 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %601, i64 0, i32 0
  %632 = load i8, i8* %631, align 4
  %633 = icmp ult i8 %632, 3
  br i1 %633, label %636, label %634

634:                                              ; preds = %629
  %635 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %601, i64 0, i32 9, i64 0, i32 0
  br label %643

636:                                              ; preds = %629
  %637 = icmp eq i32 %585, 0
  %638 = zext i1 %637 to i64
  %639 = getelementptr inbounds [4 x [2 x i32]], [4 x [2 x i32]]* @idx_n_column_to_subblock, i64 0, i64 %37, i64 %638
  %640 = load i32, i32* %639, align 4
  %641 = sext i32 %640 to i64
  %642 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %601, i64 0, i32 10, i64 %641, i32 1, i64 0, i32 0
  br label %643

643:                                              ; preds = %636, %634
  %644 = phi i32* [ %642, %636 ], [ %635, %634 ]
  %645 = load i32, i32* %644, align 4
  br i1 %630, label %648, label %646

646:                                              ; preds = %643
  %647 = icmp eq i32 %645, %139
  br i1 %647, label %146, label %79

648:                                              ; preds = %643
  store i32 %645, i32* %38, align 4
  br i1 %28, label %486, label %146
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc i32 @assign_mv(%struct.VP9Common* nocapture readonly, %struct.macroblockd* nocapture readonly, i8 zeroext, %union.int_mv* nocapture, %union.int_mv* nocapture readonly, %union.int_mv* nocapture readonly, i32, i32, %struct.vpx_reader*) unnamed_addr #2 {
  %10 = alloca i32, align 4
  switch i8 %2, label %149 [
    i8 13, label %11
    i8 11, label %143
    i8 10, label %143
    i8 12, label %147
  ]

11:                                               ; preds = %9
  %12 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %1, i64 0, i32 3
  %13 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %12, align 8
  %14 = icmp eq %struct.FRAME_COUNTS* %13, null
  %15 = getelementptr inbounds %struct.FRAME_COUNTS, %struct.FRAME_COUNTS* %13, i64 0, i32 13
  %16 = select i1 %14, %struct.nmv_context_counts* null, %struct.nmv_context_counts* %15
  %17 = icmp slt i32 %6, 0
  br i1 %17, label %149, label %18

18:                                               ; preds = %11
  %19 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %0, i64 0, i32 73
  %20 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %8, i64 0, i32 1
  %21 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %8, i64 0, i32 2
  %22 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %8, i64 0, i32 0
  %23 = bitcast i32* %10 to %struct.mv*
  %24 = icmp eq i32 %7, 0
  %25 = bitcast i32* %10 to i8*
  %26 = bitcast i32* %10 to i16*
  %27 = getelementptr inbounds %struct.mv, %struct.mv* %23, i64 0, i32 1
  %28 = add nuw i32 %6, 1
  %29 = zext i32 %28 to i64
  br label %30

30:                                               ; preds = %138, %18
  %31 = phi i64 [ %141, %138 ], [ 0, %18 ]
  %32 = phi i32 [ %140, %138 ], [ 1, %18 ]
  %33 = getelementptr inbounds %union.int_mv, %union.int_mv* %3, i64 %31
  %34 = getelementptr inbounds %union.int_mv, %union.int_mv* %4, i64 %31
  %35 = load %struct.frame_contexts*, %struct.frame_contexts** %19, align 8
  %36 = load i32, i32* %20, align 8
  %37 = load i32, i32* %21, align 4
  br label %38

38:                                               ; preds = %65, %30
  %39 = phi i32 [ %37, %30 ], [ %77, %65 ]
  %40 = phi i32 [ %36, %30 ], [ %74, %65 ]
  %41 = phi i8 [ 0, %30 ], [ %81, %65 ]
  %42 = sext i8 %41 to i32
  %43 = ashr i32 %42, 1
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %35, i64 0, i32 12, i32 0, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = mul i32 %40, %47
  %49 = sub nuw nsw i32 256, %47
  %50 = add i32 %49, %48
  %51 = lshr i32 %50, 8
  %52 = icmp slt i32 %39, 0
  br i1 %52, label %53, label %55

53:                                               ; preds = %38
  call void @vpx_reader_fill(%struct.vpx_reader* %8) #5
  %54 = load i32, i32* %21, align 4
  br label %55

55:                                               ; preds = %53, %38
  %56 = phi i32 [ %54, %53 ], [ %39, %38 ]
  %57 = load i64, i64* %22, align 8
  %58 = zext i32 %51 to i64
  %59 = shl i64 %58, 56
  %60 = icmp ult i64 %57, %59
  br i1 %60, label %65, label %61

61:                                               ; preds = %55
  %62 = load i32, i32* %20, align 8
  %63 = sub i32 %62, %51
  %64 = sub i64 %57, %59
  br label %65

65:                                               ; preds = %61, %55
  %66 = phi i64 [ %64, %61 ], [ %57, %55 ]
  %67 = phi i32 [ %63, %61 ], [ %51, %55 ]
  %68 = phi i32 [ 1, %61 ], [ 0, %55 ]
  %69 = and i32 %67, 255
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = shl i32 %67, %73
  %75 = zext i8 %72 to i64
  %76 = shl i64 %66, %75
  %77 = sub nsw i32 %56, %73
  store i64 %76, i64* %22, align 8
  store i32 %77, i32* %21, align 4
  store i32 %74, i32* %20, align 8
  %78 = add nuw nsw i32 %68, %42
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds [0 x i8], [0 x i8]* @vp9_mv_joint_tree, i64 0, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = icmp sgt i8 %81, 0
  br i1 %82, label %38, label %83

83:                                               ; preds = %65
  %84 = bitcast %union.int_mv* %33 to %struct.mv*
  %85 = bitcast %union.int_mv* %34 to %struct.mv*
  %86 = sext i8 %81 to i32
  %87 = sub nsw i32 0, %86
  br i1 %24, label %105, label %88

88:                                               ; preds = %83
  %89 = bitcast %union.int_mv* %34 to i16*
  %90 = load i16, i16* %89, align 2
  %91 = sext i16 %90 to i32
  %92 = icmp slt i32 %91, 0
  %93 = sub nsw i32 0, %91
  %94 = select i1 %92, i32 %93, i32 %91
  %95 = icmp slt i32 %94, 64
  br i1 %95, label %96, label %105

96:                                               ; preds = %88
  %97 = getelementptr inbounds %struct.mv, %struct.mv* %85, i64 0, i32 1
  %98 = load i16, i16* %97, align 2
  %99 = sext i16 %98 to i32
  %100 = icmp slt i32 %99, 0
  %101 = sub nsw i32 0, %99
  %102 = select i1 %100, i32 %101, i32 %99
  %103 = icmp slt i32 %102, 64
  %104 = zext i1 %103 to i32
  br label %105

105:                                              ; preds = %96, %88, %83
  %106 = phi i32 [ 0, %83 ], [ 0, %88 ], [ %104, %96 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25) #5
  store i32 0, i32* %10, align 4
  %107 = or i32 %87, 1
  %108 = icmp eq i32 %107, 3
  br i1 %108, label %109, label %113

109:                                              ; preds = %105
  %110 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %35, i64 0, i32 12, i32 1, i64 0
  %111 = call fastcc i32 @read_mv_component(%struct.vpx_reader* %8, %struct.nmv_component* %110, i32 %106) #5
  %112 = trunc i32 %111 to i16
  store i16 %112, i16* %26, align 4
  br label %113

113:                                              ; preds = %109, %105
  %114 = or i32 %87, 2
  %115 = icmp eq i32 %114, 3
  br i1 %115, label %116, label %120

116:                                              ; preds = %113
  %117 = getelementptr inbounds %struct.frame_contexts, %struct.frame_contexts* %35, i64 0, i32 12, i32 1, i64 1
  %118 = call fastcc i32 @read_mv_component(%struct.vpx_reader* %8, %struct.nmv_component* %117, i32 %106) #5
  %119 = trunc i32 %118 to i16
  store i16 %119, i16* %27, align 2
  br label %120

120:                                              ; preds = %113, %116
  call void @vp9_inc_mv(%struct.mv* nonnull %23, %struct.nmv_context_counts* %16) #5
  %121 = bitcast %union.int_mv* %34 to i16*
  %122 = load i16, i16* %121, align 2
  %123 = load i16, i16* %26, align 4
  %124 = add i16 %123, %122
  %125 = bitcast %union.int_mv* %33 to i16*
  store i16 %124, i16* %125, align 2
  %126 = getelementptr inbounds %struct.mv, %struct.mv* %85, i64 0, i32 1
  %127 = load i16, i16* %126, align 2
  %128 = load i16, i16* %27, align 2
  %129 = add i16 %128, %127
  %130 = getelementptr inbounds %struct.mv, %struct.mv* %84, i64 0, i32 1
  store i16 %129, i16* %130, align 2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #5
  %131 = icmp eq i32 %32, 0
  br i1 %131, label %138, label %132

132:                                              ; preds = %120
  %133 = add i16 %124, 16383
  %134 = icmp ult i16 %133, 32766
  %135 = add i16 %129, 16383
  %136 = icmp ult i16 %135, 32766
  %137 = and i1 %134, %136
  br label %138

138:                                              ; preds = %120, %132
  %139 = phi i1 [ false, %120 ], [ %137, %132 ]
  %140 = zext i1 %139 to i32
  %141 = add nuw nsw i64 %31, 1
  %142 = icmp eq i64 %141, %29
  br i1 %142, label %149, label %30

143:                                              ; preds = %9, %9
  %144 = bitcast %union.int_mv* %5 to i64*
  %145 = bitcast %union.int_mv* %3 to i64*
  %146 = load i64, i64* %144, align 4
  store i64 %146, i64* %145, align 4
  br label %149

147:                                              ; preds = %9
  %148 = bitcast %union.int_mv* %3 to i64*
  store i64 0, i64* %148, align 4
  br label %149

149:                                              ; preds = %138, %11, %143, %147, %9
  %150 = phi i32 [ 0, %9 ], [ 1, %147 ], [ 1, %143 ], [ 1, %11 ], [ %140, %138 ]
  ret i32 %150
}

declare i32 @vp9_get_pred_context_comp_ref_p(%struct.VP9Common*, %struct.macroblockd*) local_unnamed_addr #3

declare i32 @vp9_get_pred_context_single_ref_p1(%struct.macroblockd*) local_unnamed_addr #3

declare i32 @vp9_get_pred_context_single_ref_p2(%struct.macroblockd*) local_unnamed_addr #3

declare i32 @vp9_get_reference_mode_context(%struct.VP9Common*, %struct.macroblockd*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @read_mv_component(%struct.vpx_reader*, %struct.nmv_component* nocapture readonly, i32) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i32
  %7 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = mul i32 %8, %6
  %10 = sub nuw nsw i32 256, %6
  %11 = add i32 %10, %9
  %12 = lshr i32 %11, 8
  %13 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %0, i64 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %3
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #5
  %17 = load i32, i32* %13, align 4
  br label %18

18:                                               ; preds = %16, %3
  %19 = phi i32 [ %17, %16 ], [ %14, %3 ]
  %20 = getelementptr inbounds %struct.vpx_reader, %struct.vpx_reader* %0, i64 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = zext i32 %12 to i64
  %23 = shl i64 %22, 56
  %24 = icmp ult i64 %21, %23
  br i1 %24, label %29, label %25

25:                                               ; preds = %18
  %26 = load i32, i32* %7, align 8
  %27 = sub i32 %26, %12
  %28 = sub i64 %21, %23
  br label %29

29:                                               ; preds = %18, %25
  %30 = phi i64 [ %28, %25 ], [ %21, %18 ]
  %31 = phi i32 [ %27, %25 ], [ %12, %18 ]
  %32 = phi i32 [ 1, %25 ], [ 0, %18 ]
  %33 = and i32 %31, 255
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = shl i32 %31, %37
  %39 = zext i8 %36 to i64
  %40 = shl i64 %30, %39
  %41 = sub nsw i32 %19, %37
  store i64 %40, i64* %20, align 8
  store i32 %41, i32* %13, align 4
  store i32 %38, i32* %7, align 8
  br label %42

42:                                               ; preds = %71, %29
  %43 = phi i64 [ %40, %29 ], [ %82, %71 ]
  %44 = phi i32 [ %41, %29 ], [ %83, %71 ]
  %45 = phi i32 [ %38, %29 ], [ %80, %71 ]
  %46 = phi i8 [ 0, %29 ], [ %87, %71 ]
  %47 = sext i8 %46 to i32
  %48 = ashr i32 %47, 1
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 1, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = mul i32 %45, %52
  %54 = sub nuw nsw i32 256, %52
  %55 = add i32 %54, %53
  %56 = lshr i32 %55, 8
  %57 = icmp slt i32 %44, 0
  br i1 %57, label %58, label %61

58:                                               ; preds = %42
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #5
  %59 = load i32, i32* %13, align 4
  %60 = load i64, i64* %20, align 8
  br label %61

61:                                               ; preds = %58, %42
  %62 = phi i64 [ %60, %58 ], [ %43, %42 ]
  %63 = phi i32 [ %59, %58 ], [ %44, %42 ]
  %64 = zext i32 %56 to i64
  %65 = shl i64 %64, 56
  %66 = icmp ult i64 %62, %65
  br i1 %66, label %71, label %67

67:                                               ; preds = %61
  %68 = load i32, i32* %7, align 8
  %69 = sub i32 %68, %56
  %70 = sub i64 %62, %65
  br label %71

71:                                               ; preds = %67, %61
  %72 = phi i64 [ %70, %67 ], [ %62, %61 ]
  %73 = phi i32 [ %69, %67 ], [ %56, %61 ]
  %74 = phi i32 [ 1, %67 ], [ 0, %61 ]
  %75 = and i32 %73, 255
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = shl i32 %73, %79
  %81 = zext i8 %78 to i64
  %82 = shl i64 %72, %81
  %83 = sub nsw i32 %63, %79
  store i64 %82, i64* %20, align 8
  store i32 %83, i32* %13, align 4
  store i32 %80, i32* %7, align 8
  %84 = add nuw nsw i32 %74, %47
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [0 x i8], [0 x i8]* @vp9_mv_class_tree, i64 0, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = icmp sgt i8 %87, 0
  br i1 %88, label %42, label %89

89:                                               ; preds = %71
  %90 = sext i8 %87 to i32
  %91 = icmp eq i8 %87, 0
  br i1 %91, label %95, label %92

92:                                               ; preds = %89
  %93 = sub nsw i32 0, %90
  %94 = sext i32 %93 to i64
  br label %130

95:                                               ; preds = %89
  %96 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 2, i64 0
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = mul i32 %80, %98
  %100 = sub nuw nsw i32 256, %98
  %101 = add i32 %100, %99
  %102 = lshr i32 %101, 8
  %103 = icmp slt i32 %83, 0
  br i1 %103, label %104, label %107

104:                                              ; preds = %95
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #5
  %105 = load i32, i32* %13, align 4
  %106 = load i64, i64* %20, align 8
  br label %107

107:                                              ; preds = %104, %95
  %108 = phi i64 [ %106, %104 ], [ %82, %95 ]
  %109 = phi i32 [ %105, %104 ], [ %83, %95 ]
  %110 = zext i32 %102 to i64
  %111 = shl i64 %110, 56
  %112 = icmp ult i64 %108, %111
  br i1 %112, label %117, label %113

113:                                              ; preds = %107
  %114 = load i32, i32* %7, align 8
  %115 = sub i32 %114, %102
  %116 = sub i64 %108, %111
  br label %117

117:                                              ; preds = %107, %113
  %118 = phi i64 [ %116, %113 ], [ %108, %107 ]
  %119 = phi i32 [ %115, %113 ], [ %102, %107 ]
  %120 = phi i32 [ 1, %113 ], [ 0, %107 ]
  %121 = and i32 %119, 255
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %122
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = shl i32 %119, %125
  %127 = zext i8 %124 to i64
  %128 = shl i64 %118, %127
  %129 = sub nsw i32 %109, %125
  store i64 %128, i64* %20, align 8
  store i32 %129, i32* %13, align 4
  store i32 %126, i32* %7, align 8
  br label %179

130:                                              ; preds = %92, %157
  %131 = phi i64 [ %82, %92 ], [ %168, %157 ]
  %132 = phi i32 [ %83, %92 ], [ %169, %157 ]
  %133 = phi i32 [ %80, %92 ], [ %166, %157 ]
  %134 = phi i64 [ 0, %92 ], [ %173, %157 ]
  %135 = phi i32 [ 0, %92 ], [ %172, %157 ]
  %136 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 3, i64 %134
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = mul i32 %133, %138
  %140 = sub nuw nsw i32 256, %138
  %141 = add i32 %140, %139
  %142 = lshr i32 %141, 8
  %143 = icmp slt i32 %132, 0
  br i1 %143, label %144, label %147

144:                                              ; preds = %130
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #5
  %145 = load i32, i32* %13, align 4
  %146 = load i64, i64* %20, align 8
  br label %147

147:                                              ; preds = %144, %130
  %148 = phi i64 [ %146, %144 ], [ %131, %130 ]
  %149 = phi i32 [ %145, %144 ], [ %132, %130 ]
  %150 = zext i32 %142 to i64
  %151 = shl i64 %150, 56
  %152 = icmp ult i64 %148, %151
  br i1 %152, label %157, label %153

153:                                              ; preds = %147
  %154 = load i32, i32* %7, align 8
  %155 = sub i32 %154, %142
  %156 = sub i64 %148, %151
  br label %157

157:                                              ; preds = %147, %153
  %158 = phi i64 [ %156, %153 ], [ %148, %147 ]
  %159 = phi i32 [ %155, %153 ], [ %142, %147 ]
  %160 = phi i32 [ 1, %153 ], [ 0, %147 ]
  %161 = and i32 %159, 255
  %162 = zext i32 %161 to i64
  %163 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = shl i32 %159, %165
  %167 = zext i8 %164 to i64
  %168 = shl i64 %158, %167
  %169 = sub nsw i32 %149, %165
  store i64 %168, i64* %20, align 8
  store i32 %169, i32* %13, align 4
  store i32 %166, i32* %7, align 8
  %170 = trunc i64 %134 to i32
  %171 = shl i32 %160, %170
  %172 = or i32 %171, %135
  %173 = add nuw nsw i64 %134, 1
  %174 = icmp slt i64 %173, %94
  br i1 %174, label %130, label %175

175:                                              ; preds = %157
  %176 = sub nsw i32 2, %90
  %177 = shl i32 2, %176
  %178 = add i32 %177, 1
  br label %179

179:                                              ; preds = %175, %117
  %180 = phi i64 [ %128, %117 ], [ %168, %175 ]
  %181 = phi i32 [ %129, %117 ], [ %169, %175 ]
  %182 = phi i32 [ %126, %117 ], [ %166, %175 ]
  %183 = phi i32 [ 1, %117 ], [ %178, %175 ]
  %184 = phi i32 [ %120, %117 ], [ %172, %175 ]
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 4, i64 %185, i64 0
  %187 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 5, i64 0
  %188 = select i1 %91, i8* %186, i8* %187
  br label %189

189:                                              ; preds = %218, %179
  %190 = phi i64 [ %180, %179 ], [ %229, %218 ]
  %191 = phi i32 [ %181, %179 ], [ %230, %218 ]
  %192 = phi i32 [ %182, %179 ], [ %227, %218 ]
  %193 = phi i8 [ 0, %179 ], [ %234, %218 ]
  %194 = sext i8 %193 to i32
  %195 = ashr i32 %194, 1
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds i8, i8* %188, i64 %196
  %198 = load i8, i8* %197, align 1
  %199 = zext i8 %198 to i32
  %200 = mul i32 %192, %199
  %201 = sub nuw nsw i32 256, %199
  %202 = add i32 %201, %200
  %203 = lshr i32 %202, 8
  %204 = icmp slt i32 %191, 0
  br i1 %204, label %205, label %208

205:                                              ; preds = %189
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #5
  %206 = load i32, i32* %13, align 4
  %207 = load i64, i64* %20, align 8
  br label %208

208:                                              ; preds = %205, %189
  %209 = phi i64 [ %207, %205 ], [ %190, %189 ]
  %210 = phi i32 [ %206, %205 ], [ %191, %189 ]
  %211 = zext i32 %203 to i64
  %212 = shl i64 %211, 56
  %213 = icmp ult i64 %209, %212
  br i1 %213, label %218, label %214

214:                                              ; preds = %208
  %215 = load i32, i32* %7, align 8
  %216 = sub i32 %215, %203
  %217 = sub i64 %209, %212
  br label %218

218:                                              ; preds = %214, %208
  %219 = phi i64 [ %217, %214 ], [ %209, %208 ]
  %220 = phi i32 [ %216, %214 ], [ %203, %208 ]
  %221 = phi i32 [ 1, %214 ], [ 0, %208 ]
  %222 = and i32 %220, 255
  %223 = zext i32 %222 to i64
  %224 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %223
  %225 = load i8, i8* %224, align 1
  %226 = zext i8 %225 to i32
  %227 = shl i32 %220, %226
  %228 = zext i8 %225 to i64
  %229 = shl i64 %219, %228
  %230 = sub nsw i32 %210, %226
  store i64 %229, i64* %20, align 8
  store i32 %230, i32* %13, align 4
  store i32 %227, i32* %7, align 8
  %231 = add nuw nsw i32 %221, %194
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds [0 x i8], [0 x i8]* @vp9_mv_fp_tree, i64 0, i64 %232
  %234 = load i8, i8* %233, align 1
  %235 = icmp sgt i8 %234, 0
  br i1 %235, label %189, label %236

236:                                              ; preds = %218
  %237 = sext i8 %234 to i32
  %238 = icmp eq i32 %2, 0
  br i1 %238, label %276, label %239

239:                                              ; preds = %236
  %240 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 6
  %241 = getelementptr inbounds %struct.nmv_component, %struct.nmv_component* %1, i64 0, i32 7
  %242 = select i1 %91, i8* %240, i8* %241
  %243 = load i8, i8* %242, align 1
  %244 = zext i8 %243 to i32
  %245 = mul i32 %227, %244
  %246 = sub nuw nsw i32 256, %244
  %247 = add i32 %246, %245
  %248 = lshr i32 %247, 8
  %249 = icmp slt i32 %230, 0
  br i1 %249, label %250, label %253

250:                                              ; preds = %239
  tail call void @vpx_reader_fill(%struct.vpx_reader* %0) #5
  %251 = load i32, i32* %13, align 4
  %252 = load i64, i64* %20, align 8
  br label %253

253:                                              ; preds = %250, %239
  %254 = phi i64 [ %252, %250 ], [ %229, %239 ]
  %255 = phi i32 [ %251, %250 ], [ %230, %239 ]
  %256 = zext i32 %248 to i64
  %257 = shl i64 %256, 56
  %258 = icmp ult i64 %254, %257
  br i1 %258, label %263, label %259

259:                                              ; preds = %253
  %260 = load i32, i32* %7, align 8
  %261 = sub i32 %260, %248
  %262 = sub i64 %254, %257
  br label %263

263:                                              ; preds = %253, %259
  %264 = phi i64 [ %262, %259 ], [ %254, %253 ]
  %265 = phi i32 [ %261, %259 ], [ %248, %253 ]
  %266 = phi i32 [ 1, %259 ], [ 0, %253 ]
  %267 = and i32 %265, 255
  %268 = zext i32 %267 to i64
  %269 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %268
  %270 = load i8, i8* %269, align 1
  %271 = zext i8 %270 to i32
  %272 = shl i32 %265, %271
  %273 = zext i8 %270 to i64
  %274 = shl i64 %264, %273
  %275 = sub nsw i32 %255, %271
  store i64 %274, i64* %20, align 8
  store i32 %275, i32* %13, align 4
  store i32 %272, i32* %7, align 8
  br label %276

276:                                              ; preds = %236, %263
  %277 = phi i32 [ %266, %263 ], [ 1, %236 ]
  %278 = shl i32 %184, 3
  %279 = shl nsw i32 %237, 1
  %280 = sub nsw i32 0, %279
  %281 = or i32 %278, %280
  %282 = or i32 %281, %277
  %283 = add i32 %183, %282
  %284 = icmp eq i32 %32, 0
  %285 = sub nsw i32 0, %283
  %286 = select i1 %284, i32 %283, i32 %285
  ret i32 %286
}

declare void @vp9_inc_mv(%struct.mv*, %struct.nmv_context_counts*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5}
!8 = !{!9}
!9 = distinct !{!9, !10}
!10 = distinct !{!10, !"LVerDomain"}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !3}
