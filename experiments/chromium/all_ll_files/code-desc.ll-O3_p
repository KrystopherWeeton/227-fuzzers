; ModuleID = '../../v8/src/codegen/code-desc.cc'
source_filename = "../../v8/src/codegen/code-desc.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::CodeDesc" = type { i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, %"class.v8::internal::Assembler"* }
%"class.v8::internal::Assembler" = type { %"class.v8::internal::AssemblerBase", %"class.v8::internal::RelocInfoWriter", %"class.std::__1::deque", i32, %"class.std::__1::deque", %"class.std::__1::map", %"class.v8::internal::ConstPool" }
%"class.v8::internal::AssemblerBase" = type { i32 (...)**, %"class.std::__1::unique_ptr", i8*, %"class.std::__1::forward_list", i8*, %"class.v8::internal::CodeCommentsWriter", %"class.std::__1::vector.14", %"class.std::__1::vector.21", %"class.std::__1::unordered_map", %"struct.v8::internal::AssemblerOptions", i64, i8, i8, %"class.v8::internal::JumpOptimizationInfo"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::AssemblerBuffer"* }
%"class.v8::internal::AssemblerBuffer" = type { i32 (...)** }
%"class.std::__1::forward_list" = type { %"class.std::__1::__forward_list_base" }
%"class.std::__1::__forward_list_base" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::__forward_begin_node" }
%"struct.std::__1::__forward_begin_node" = type { %"struct.std::__1::__forward_list_node"* }
%"struct.std::__1::__forward_list_node" = type opaque
%"class.v8::internal::CodeCommentsWriter" = type { i32, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.v8::internal::CodeCommentEntry"*, %"struct.v8::internal::CodeCommentEntry"*, %"class.std::__1::__compressed_pair.9" }
%"struct.v8::internal::CodeCommentEntry" = type { i32, %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.v8::internal::CodeCommentEntry"* }
%"class.std::__1::vector.14" = type { %"class.std::__1::__vector_base.15" }
%"class.std::__1::__vector_base.15" = type { %"class.v8::internal::Handle"*, %"class.v8::internal::Handle"*, %"class.std::__1::__compressed_pair.16" }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.v8::internal::Handle"* }
%"class.std::__1::vector.21" = type { %"class.std::__1::__vector_base.22" }
%"class.std::__1::__vector_base.22" = type { %"class.v8::internal::Handle.23"*, %"class.v8::internal::Handle.23"*, %"class.std::__1::__compressed_pair.24" }
%"class.v8::internal::Handle.23" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.v8::internal::Handle.23"* }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.29", %"class.std::__1::__compressed_pair.38", %"class.std::__1::__compressed_pair.43", %"class.std::__1::__compressed_pair.45", [4 x i8] }>
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31", %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { i64 }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { float }
%"struct.v8::internal::AssemblerOptions" = type <{ i8, i8, i8, i8, i8, i8, i8, i8, i64, i8, i8, i8, [5 x i8] }>
%"class.v8::internal::JumpOptimizationInfo" = type { i32, i8, %"class.std::__1::vector.48", i64 }
%"class.std::__1::vector.48" = type { %"class.std::__1::__vector_base.49" }
%"class.std::__1::__vector_base.49" = type { i32*, i32*, %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { i32* }
%"class.v8::internal::RelocInfoWriter" = type { i8*, i8* }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.60" }
%"struct.std::__1::__split_buffer" = type { i32**, i32**, i32**, %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { i32** }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.64", %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.v8::internal::ConstPool" = type { %"class.v8::internal::Assembler"*, %"class.std::__1::multimap" }
%"class.std::__1::multimap" = type { %"class.std::__1::__tree.71" }
%"class.std::__1::__tree.71" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.72", %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.34" }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8CodeDesc10InitializeEPS1_PNS0_9AssemblerEiiiii(%"class.v8::internal::CodeDesc"* nocapture, %"class.v8::internal::Assembler"*, i32, i32, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %8 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %9 = load %"class.v8::internal::AssemblerBuffer"*, %"class.v8::internal::AssemblerBuffer"** %8, align 8
  %10 = bitcast %"class.v8::internal::AssemblerBuffer"* %9 to i8* (%"class.v8::internal::AssemblerBuffer"*)***
  %11 = load i8* (%"class.v8::internal::AssemblerBuffer"*)**, i8* (%"class.v8::internal::AssemblerBuffer"*)*** %10, align 8
  %12 = getelementptr inbounds i8* (%"class.v8::internal::AssemblerBuffer"*)*, i8* (%"class.v8::internal::AssemblerBuffer"*)** %11, i64 2
  %13 = load i8* (%"class.v8::internal::AssemblerBuffer"*)*, i8* (%"class.v8::internal::AssemblerBuffer"*)** %12, align 8
  %14 = tail call i8* %13(%"class.v8::internal::AssemblerBuffer"* %9) #1
  %15 = getelementptr inbounds %"class.v8::internal::CodeDesc", %"class.v8::internal::CodeDesc"* %0, i64 0, i32 0
  store i8* %14, i8** %15, align 8
  %16 = load %"class.v8::internal::AssemblerBuffer"*, %"class.v8::internal::AssemblerBuffer"** %8, align 8
  %17 = bitcast %"class.v8::internal::AssemblerBuffer"* %16 to i32 (%"class.v8::internal::AssemblerBuffer"*)***
  %18 = load i32 (%"class.v8::internal::AssemblerBuffer"*)**, i32 (%"class.v8::internal::AssemblerBuffer"*)*** %17, align 8
  %19 = getelementptr inbounds i32 (%"class.v8::internal::AssemblerBuffer"*)*, i32 (%"class.v8::internal::AssemblerBuffer"*)** %18, i64 3
  %20 = load i32 (%"class.v8::internal::AssemblerBuffer"*)*, i32 (%"class.v8::internal::AssemblerBuffer"*)** %19, align 8
  %21 = tail call i32 %20(%"class.v8::internal::AssemblerBuffer"* %16) #1
  %22 = getelementptr inbounds %"class.v8::internal::CodeDesc", %"class.v8::internal::CodeDesc"* %0, i64 0, i32 1
  store i32 %21, i32* %22, align 8
  %23 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %1, i64 0, i32 0, i32 4
  %24 = bitcast i8** %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::Assembler", %"class.v8::internal::Assembler"* %1, i64 0, i32 0, i32 2
  %27 = bitcast i8** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = sub i64 %25, %28
  %30 = trunc i64 %29 to i32
  %31 = getelementptr inbounds %"class.v8::internal::CodeDesc", %"class.v8::internal::CodeDesc"* %0, i64 0, i32 2
  store i32 %30, i32* %31, align 4
  %32 = getelementptr inbounds %"class.v8::internal::CodeDesc", %"class.v8::internal::CodeDesc"* %0, i64 0, i32 9
  store i32 %5, i32* %32, align 8
  %33 = sub nsw i32 %30, %5
  %34 = getelementptr inbounds %"class.v8::internal::CodeDesc", %"class.v8::internal::CodeDesc"* %0, i64 0, i32 10
  store i32 %33, i32* %34, align 4
  %35 = getelementptr inbounds %"class.v8::internal::CodeDesc", %"class.v8::internal::CodeDesc"* %0, i64 0, i32 7
  store i32 %4, i32* %35, align 8
  %36 = sub nsw i32 %5, %4
  %37 = getelementptr inbounds %"class.v8::internal::CodeDesc", %"class.v8::internal::CodeDesc"* %0, i64 0, i32 8
  store i32 %36, i32* %37, align 4
  %38 = getelementptr inbounds %"class.v8::internal::CodeDesc", %"class.v8::internal::CodeDesc"* %0, i64 0, i32 5
  store i32 %3, i32* %38, align 8
  %39 = sub nsw i32 %4, %3
  %40 = getelementptr inbounds %"class.v8::internal::CodeDesc", %"class.v8::internal::CodeDesc"* %0, i64 0, i32 6
  store i32 %39, i32* %40, align 4
  %41 = getelementptr inbounds %"class.v8::internal::CodeDesc", %"class.v8::internal::CodeDesc"* %0, i64 0, i32 3
  store i32 %2, i32* %41, align 8
  %42 = sub nsw i32 %3, %2
  %43 = getelementptr inbounds %"class.v8::internal::CodeDesc", %"class.v8::internal::CodeDesc"* %0, i64 0, i32 4
  store i32 %42, i32* %43, align 4
  %44 = getelementptr inbounds %"class.v8::internal::CodeDesc", %"class.v8::internal::CodeDesc"* %0, i64 0, i32 11
  store i32 %6, i32* %44, align 8
  %45 = sub nsw i32 %21, %6
  %46 = getelementptr inbounds %"class.v8::internal::CodeDesc", %"class.v8::internal::CodeDesc"* %0, i64 0, i32 12
  store i32 %45, i32* %46, align 4
  %47 = getelementptr inbounds %"class.v8::internal::CodeDesc", %"class.v8::internal::CodeDesc"* %0, i64 0, i32 14
  store i32 0, i32* %47, align 8
  %48 = getelementptr inbounds %"class.v8::internal::CodeDesc", %"class.v8::internal::CodeDesc"* %0, i64 0, i32 13
  store i8* null, i8** %48, align 8
  %49 = getelementptr inbounds %"class.v8::internal::CodeDesc", %"class.v8::internal::CodeDesc"* %0, i64 0, i32 15
  store %"class.v8::internal::Assembler"* %1, %"class.v8::internal::Assembler"** %49, align 8
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
