; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/encode_strategy.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/encode_strategy.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AV1_COMP = type { %struct.AV1_PRIMARY*, [8 x i8], %struct.EncQuantDequantParams, %struct.ThreadData, %struct.FRAME_COUNTS, %struct.MBMIExtFrameBufferInfo, %struct.CB_COEFF_BUFFER*, %struct.CoeffBufferPool, %struct.AV1Common, %struct.AV1EncoderConfig, i32, [8 x i8], %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, %struct.TemporalFilterCtx, i32, %struct.ForceIntegerMVInfo, [7 x %struct.RefCntBuffer*], %struct.RefCntBuffer*, %struct.RefreshFrameFlagsInfo, [8 x i32], %struct.ExternalFlags, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i64, %struct.RD_OPT, %struct.CODING_CONTEXT, %struct.GlobalMotionInfo, %struct.WinnerModeParams, %struct.TimeStamps, %struct.RATE_CONTROL, double, i32, i32, %struct.SPEED_FEATURES, %struct.MotionVectorSearchParams, i32, %struct.EncSegmentationInfo, %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i8, %struct.RefBufferStack, i32, i32, %struct.FRAME_INFO, %struct.FRAME_INDEX_SET, %struct.InitialDimensions, i32, %struct.ResizePendingParams, %struct.TileDataEnc*, i32, %struct.TokenInfo, i32, %struct.VarBasedPartitionInfo, %struct.FrameProbInfo, %struct.MultiThreadInfo, i32, i32, i32, %struct.AV1LrStruct, %struct.aom_film_grain_table_t*, %struct.aom_denoise_and_model_t*, %struct.InterpSearchFlags, i32, i32, i32, i32, %struct.RefFrameDistanceInfo, double*, %struct.SVC, i8, %struct.MV_STATS, i8, i32, i32, %struct.FirstPassData, %struct.noise_estimate, %struct.av1_denoiser, i8*, i8, i32, i64, [8 x i8] }
%struct.AV1_PRIMARY = type { %struct.AV1_COMP*, %struct.AV1_COMP*, %struct.lookahead_ctx*, i32, %struct.aom_codec_pkt_list*, i32, %struct.GF_GROUP, %struct.GF_STATE, i32, %struct.AV1LevelParams, i32, i32, %struct.TWO_PASS, %struct.PRIMARY_RATE_CONTROL, %struct.yv12_buffer_config, %struct.SequenceHeader, i32, i8, i32, i32, %struct.aom_internal_error_info, [22 x %struct.aom_variance_vtable], double*, double*, %struct.TplParams }
%struct.lookahead_ctx = type { i32, i32, [2 x %struct.read_ctx], %struct.lookahead_entry*, i32, i8 }
%struct.read_ctx = type { i32, i32, i32, i32 }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.aom_codec_pkt_list = type { i32, i32, [1 x %struct.aom_codec_cx_pkt] }
%struct.aom_codec_cx_pkt = type { i32, %union.anon.10 }
%union.anon.10 = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.GF_GROUP = type { [250 x i8], [250 x i8], [250 x i8], [250 x i32], [250 x i32], i32, i32, [250 x i8], [250 x i32], [250 x i8], [250 x i8], i32, i32 }
%struct.GF_STATE = type { i32 }
%struct.AV1LevelParams = type { [32 x i8], i32, [32 x %struct.AV1LevelInfo*] }
%struct.AV1LevelInfo = type { %struct.AV1LevelStats, %struct.AV1LevelSpec, %struct.FrameWindowBuffer, [24 x %struct.DECODER_MODEL] }
%struct.AV1LevelStats = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, double }
%struct.AV1LevelSpec = type { i8, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double, double, double }
%struct.FrameWindowBuffer = type { [256 x %struct.FrameRecord], i32, i32 }
%struct.FrameRecord = type { i64, i64, i64, i32, i32, i32, i32, i32 }
%struct.DECODER_MODEL = type { i8, i8, i8, i8, i32, i32, i32, i32, i64, double, double, double, double, i32, i32, i32, [8 x i32], [10 x %struct.FRAME_BUFFER], %struct.DFG_INTERVAL_QUEUE, double, double, i64, double, double, i32, i32, double, double }
%struct.FRAME_BUFFER = type { i32, i32, i32, i8, double }
%struct.DFG_INTERVAL_QUEUE = type { i32, i32, double, [64 x %struct.DFG_INTERVAL] }
%struct.DFG_INTERVAL = type { double, double, double }
%struct.TWO_PASS = type { i32, [36 x %struct.FIRSTPASS_STATS*], i32, %struct.FIRSTPASS_STATS*, %struct.STATS_BUFFER_CTX*, i32, i64, double, double, double, double, double, i8, i64, i64, double, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64, double, double }
%struct.STATS_BUFFER_CTX = type { %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS* }
%struct.PRIMARY_RATE_CONTROL = type { i64, i32, i32, [15 x i32], i32, i32, [150 x %struct.regions], i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regions = type { i32, i32, double, double, double, double, double, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.aom_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, i32 (i8*, i32, i32*, i32*)*, i32 (i8*, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i32, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)* }
%struct.dist_wtd_comp_params = type { i32, i32, i32 }
%struct.TplParams = type { i8, i8, [79 x %struct.TplDepFrame], [35 x %struct.TplDepStats*], [35 x %struct.yv12_buffer_config], %struct.TplDepFrame*, %struct.scale_factors, i32, [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*], %struct.AV1TplRowMultiThreadSync, i32 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, [8 x i32], i32, i32, i32, i32, i32, i32, i32, [256 x double], [256 x double], i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, [2 x i64], i64, i64, [2 x i64], i64, i64, [7 x %union.int_mv], [2 x i32], [7 x i64] }
%union.int_mv = type { i32 }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.AV1TplRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.12, %union.anon.14, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.12 = type { i64 }
%union.anon.14 = type { i64 }
%struct.EncQuantDequantParams = type { %struct.QUANTS, %struct.Dequants }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.Dequants = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PC_TREE_SHARED_BUFFERS, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.inter_modes_info*, [2 x [2 x i32*]], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, [2 x i8*], i32, i32, i32, i32, [4 x i32], %struct.frame_contexts*, %struct.VP64x64*, i32, %struct.PICK_MODE_CONTEXT*, %struct.TemporalFilterData, %struct.TplTxfmStats, %struct.PixelLevelGradientInfo*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], [8 x i8], %struct.macroblockd, %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT_FRAME*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CB_COEFF_BUFFER*, [2 x i16], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, %struct.aom_internal_error_info*, [2 x i8*], i32, i32, i32, i32, i32, %struct.ModeCosts, %struct.MvCosts*, %struct.IntraBCMVCosts*, %struct.CoeffCosts, i32, i32, i32, i32, i32, i32, %struct.SuperBlockEnc, %struct.CONTENT_STATE_SB, [8 x i32], i32, [8 x i8], [8 x %struct.WARP_SAMPLE_INFO], [1024 x i32], i32, %struct.PartitionSearchInfo, i32, i32, [22 x [169 x i32]], %struct.WinnerModeStats*, i32, i8, %struct.inter_modes_info*, i8, [64 x %struct.COMP_RD_STATS], i32, i32, %struct.intrabc_hash_info, i32, %struct.MB_MODE_INFO*, %struct.PixelLevelGradientInfo*, [2 x i8], [8 x i32], %struct.FullMvLimits, %struct.TxfmSearchParams, %struct.TxfmSearchInfo, [2 x i8], i32, [8 x i32] }
%struct.macroblock_plane = type { i16*, i32*, i32*, i32*, i16*, i8*, %struct.buf_2d, i16*, i16*, i16*, i16*, i16*, i16*, i16* }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [29 x [4 x %struct.candidate_mv]], [29 x [4 x i16]], [29 x i8], [8 x %union.int_mv], [29 x i16] }
%struct.MB_MODE_INFO_EXT_FRAME = type { [4 x %struct.candidate_mv], [4 x i16], i8, [8 x %union.int_mv], i16, [2 x i16] }
%struct.ModeCosts = type { [20 x [10 x i32]], [4 x [13 x i32]], [13 x [13 x [13 x i32]]], [2 x [13 x [14 x i32]]], [22 x [2 x i32]], [5 x i32], [8 x [7 x i32]], [8 x [2 x [16 x i32]]], [2 x i32], [7 x [7 x i32]], [7 x [7 x i32]], [7 x [5 x [8 x i32]]], [7 x [5 x [8 x i32]]], [7 x [3 x [2 x i32]]], [2 x [2 x i32]], [3 x [2 x i32]], [6 x [2 x i32]], [2 x [2 x i32]], [6 x [2 x i32]], [3 x [2 x i32]], [3 x [6 x [2 x i32]]], [5 x [2 x i32]], [5 x [3 x i32]], [3 x [3 x [3 x i32]]], [3 x [3 x [2 x i32]]], [3 x [2 x [2 x i32]]], [4 x [2 x i32]], [8 x [8 x i32]], [22 x [2 x i32]], [22 x [16 x i32]], [4 x [2 x i32]], [22 x [2 x i32]], [4 x [4 x i32]], [6 x [2 x i32]], [6 x [2 x i32]], [22 x [3 x i32]], [22 x [2 x i32]], [16 x [3 x i32]], [3 x [2 x i32]], [4 x [3 x [5 x i32]]], [21 x [2 x i32]], [4 x [4 x [16 x i32]]], [3 x [4 x [13 x [16 x i32]]]], [3 x i32], [2 x i32], [2 x i32] }
%struct.MvCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [2 x i32*], [2 x i32*], i32** }
%struct.IntraBCMVCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x i32*] }
%struct.CoeffCosts = type { [5 x [2 x %struct.LV_MAP_COEFF_COST]], [7 x [2 x %struct.LV_MAP_EOB_COST]] }
%struct.LV_MAP_COEFF_COST = type { [13 x [2 x i32]], [4 x [3 x i32]], [42 x [8 x i32]], [9 x [2 x i32]], [3 x [2 x i32]], [21 x [26 x i32]] }
%struct.LV_MAP_EOB_COST = type { [2 x [11 x i32]] }
%struct.SuperBlockEnc = type { i8, i8, i32, [64 x i64], [64 x i64], [64 x [7 x %union.int_mv]], i32 }
%struct.CONTENT_STATE_SB = type { i32, i32, i32 }
%struct.WARP_SAMPLE_INFO = type { i32, [16 x i32], [16 x i32] }
%struct.PartitionSearchInfo = type { [105 x i8] }
%struct.WinnerModeStats = type { %struct.MB_MODE_INFO, %struct.RD_STATS, i64, i32, i32, [16384 x i8], i8 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.RD_STATS = type { i32, i64, i64, i64, i32, i32 }
%struct.COMP_RD_STATS = type { [4 x i32], [4 x i64], [4 x i32], [4 x i64], [4 x i32], [2 x %union.int_mv], [2 x i8], i8, %union.int_interpfilters, i32, [2 x i32], %struct.INTERINTER_COMPOUND_DATA }
%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.FullMvLimits = type { i32, i32, i32, i32 }
%struct.TxfmSearchParams = type { i32, i32, i32, [2 x i32], i32, i8, i32, i32, i8, i32 }
%struct.TxfmSearchInfo = type { i32, [1024 x i8], [1024 x i8], %struct.TxbRdRecords*, i32 }
%struct.TxbRdRecords = type { %struct.MB_RD_RECORD, [256 x %struct.TXB_RD_RECORD], [64 x %struct.TXB_RD_RECORD], [16 x %struct.TXB_RD_RECORD], [4 x %struct.TXB_RD_RECORD], %struct.TXB_RD_RECORD }
%struct.MB_RD_RECORD = type { [8 x %struct.MB_RD_INFO], i32, i32, %struct._CRC32C }
%struct.MB_RD_INFO = type { i8, [16 x i8], [1024 x i8], [1024 x i8], %struct.RD_STATS, i32 }
%struct._CRC32C = type { [8 x [256 x i32]] }
%struct.TXB_RD_RECORD = type { [256 x i32], [256 x %struct.TXB_RD_INFO], i32, i32 }
%struct.TXB_RD_INFO = type { i64, i64, i32, i16, i8, i16, i8, i8, i8, i8 }
%struct.RD_COUNTS = type { [3 x i64], i32, i32, [19 x [16 x i32]], [22 x [2 x i32]], [2 x i32] }
%struct.PC_TREE_SHARED_BUFFERS = type { [3 x i32*], [3 x i32*], [3 x i32*] }
%struct.SIMPLE_MOTION_DATA_TREE = type { i8, i8, [4 x %struct.SIMPLE_MOTION_DATA_TREE*], [8 x %struct.fullpel_mv], [2 x i32], [8 x i32], i32, i32 }
%struct.fullpel_mv = type { i16, i16 }
%struct.inter_modes_info = type { i32, [4 x i8], [1024 x %struct.MB_MODE_INFO], [1024 x i32], [1024 x i64], [1024 x i64], [1024 x %struct.RdIdxPair], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS] }
%struct.RdIdxPair = type { i32, i64 }
%struct.OBMCBuffer = type { i32*, i32*, i8*, i8* }
%struct.PALETTE_BUFFER = type { [4096 x i8], [8192 x i32] }
%struct.CompoundTypeRdBuffers = type { i8*, i8*, i16*, i16*, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.VP64x64 = type { %struct.VPVariance, [4 x %struct.VP32x32] }
%struct.VPVariance = type { %struct.VPartVar, [2 x %struct.VPartVar], [2 x %struct.VPartVar] }
%struct.VPartVar = type { i32, i32, i32, i32 }
%struct.VP32x32 = type { %struct.VPVariance, [4 x %struct.VP16x16] }
%struct.VP16x16 = type { %struct.VPVariance, [4 x %struct.VP8x8] }
%struct.VP8x8 = type { %struct.VPVariance, [4 x %struct.VP4x4] }
%struct.VP4x4 = type { %struct.VPVariance, [4 x %struct.VPartVar] }
%struct.PICK_MODE_CONTEXT = type { %struct.MB_MODE_INFO, %struct.MB_MODE_INFO_EXT_FRAME, [2 x i8*], i8*, [3 x i32*], [3 x i32*], [3 x i32*], [3 x i16*], [3 x i8*], i8*, i32, i32, i32, i32, i32, %struct.RD_STATS, i32, i64, i64, i64, i8, %union.int_mv, i8, i8, i32 }
%struct.TemporalFilterData = type { %struct.FRAME_DIFF, %struct.MB_MODE_INFO*, i32*, i16*, i8* }
%struct.FRAME_DIFF = type { i64, i64 }
%struct.TplTxfmStats = type { [256 x double], i32 }
%struct.PixelLevelGradientInfo = type { i16, i8, i8 }
%struct.FRAME_COUNTS = type { [16 x [3 x i32]] }
%struct.MBMIExtFrameBufferInfo = type { %struct.MB_MODE_INFO_EXT_FRAME*, i32, i32 }
%struct.CB_COEFF_BUFFER = type { [3 x i32*], [3 x i16*], [3 x i8*] }
%struct.CoeffBufferPool = type { i32*, i16*, i8* }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1EncoderConfig = type { %struct.InputCfg, %struct.FrameDimensionCfg, %struct.AlgoCfg, %struct.KeyFrameCfg, %struct.RateControlCfg, %struct.QuantizationCfg, %struct.ResizeCfg, %struct.SuperResCfg, %struct.aom_fixed_buf, %struct.ToolCfg, %struct.GFConfig, %struct.TileConfig, %struct.TuneCfg, %struct.ColorCfg, %struct.DecoderModelCfg, %struct.RefFrameCfg, %struct.UnitTestCfg, %struct.MotionModeCfg, %struct.IntraModeCfg, %struct.TxfmSizeTypeCfg, %struct.CompoundTypeCfg, %struct.PartitionCfg, %struct.CostUpdateFreq, float, i32, i32, i32, i32, i32, i32, i32, [32 x i8], i8, i32, i8, i8, i8, i8, i8* }
%struct.InputCfg = type { double, i32, i32, i32, i32 }
%struct.FrameDimensionCfg = type { i32, i32, i32, i32, i32, i32 }
%struct.AlgoCfg = type { i32, i32, i32, i32, i8, i8, i8 }
%struct.KeyFrameCfg = type { i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.RateControlCfg = type { i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QuantizationCfg = type { [5 x double], i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.ResizeCfg = type { i8, i8, i8 }
%struct.SuperResCfg = type { i32, i32, i8, i8, i32, i8 }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.ToolCfg = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GFConfig = type { i32, i32, i32, i32, i32, i8, i8 }
%struct.TileConfig = type { i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i8, i8, i8 }
%struct.TuneCfg = type { i8*, i8*, i32, i32, i32 }
%struct.ColorCfg = type { i32, i32, i32, i32, i32 }
%struct.DecoderModelCfg = type { %struct.aom_timing, i32, i8, i8, i8 }
%struct.RefFrameCfg = type { i32, i8, i8 }
%struct.UnitTestCfg = type { i32, i32 }
%struct.MotionModeCfg = type { i8, i8, i8 }
%struct.IntraModeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.TxfmSizeTypeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.CompoundTypeCfg = type { i8, i8, i8, i8, i8, i8 }
%struct.PartitionCfg = type { i8, i8, i8, i8, i8 }
%struct.CostUpdateFreq = type { i32, i32, i32, i32 }
%struct.TemporalFilterCtx = type { [35 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors, [3 x double], i32, i32, i32, i32, i32 }
%struct.ForceIntegerMVInfo = type { [32 x double], i32, i32 }
%struct.RefreshFrameFlagsInfo = type { i8, i8, i8 }
%struct.ExternalFlags = type { i32, %struct.ExtRefreshFrameFlagsInfo, i8, i8, i8, i8, i8, i8 }
%struct.ExtRefreshFrameFlagsInfo = type { i8, i8, i8, i8, i8, i8 }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.RD_OPT = type { [169 x i32], [8 x [22 x [169 x i32]]], i32, double }
%struct.CODING_CONTEXT = type { %struct.loopfilter, %struct.CdefInfo, %struct.yv12_buffer_config, %struct.RATE_CONTROL, %struct.MV_STATS }
%struct.GlobalMotionInfo = type { i8, [8 x %struct.yv12_buffer_config*], i8*, [2 x i32], [2 x [7 x %struct.FrameDistPair]], i32, i32, i32, [8192 x i32] }
%struct.FrameDistPair = type { i32, i8 }
%struct.WinnerModeParams = type { [3 x [2 x i32]], [3 x i8], [3 x i32], [3 x i32], [3 x i32], [3 x i32] }
%struct.TimeStamps = type { i64, i64, i64 }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, i32, [4 x i32], i32, [4 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [4 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32 }
%struct.SPEED_FEATURES = type { %struct.HIGH_LEVEL_SPEED_FEATURES, %struct.FIRST_PASS_SPEED_FEATURES, %struct.TPL_SPEED_FEATURES, %struct.GLOBAL_MOTION_SPEED_FEATURES, %struct.PARTITION_SPEED_FEATURES, %struct.MV_SPEED_FEATURES, %struct.INTER_MODE_SPEED_FEATURES, %struct.INTERP_FILTER_SPEED_FEATURES, %struct.INTRA_MODE_SPEED_FEATURES, %struct.TX_SPEED_FEATURES, %struct.RD_CALC_SPEED_FEATURES, %struct.WINNER_MODE_SPEED_FEATURES, %struct.LOOP_FILTER_SPEED_FEATURES, %struct.REAL_TIME_SPEED_FEATURES }
%struct.HIGH_LEVEL_SPEED_FEATURES = type { i32, i8, i32, i8, i32, i8, i32, i32 }
%struct.FIRST_PASS_SPEED_FEATURES = type { i32, i32 }
%struct.TPL_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32 }
%struct.GLOBAL_MOTION_SPEED_FEATURES = type { i8, i32, i32 }
%struct.PARTITION_SPEED_FEATURES = type { i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i64, i32, [5 x i32], i32, i32, i32, i32, i32, i32, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i8, i32, i32, i8, i32, i8, i8, i8, i32, [4 x %struct.MESH_PATTERN], [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.INTER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERP_FILTER_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32 }
%struct.INTRA_MODE_SPEED_FEATURES = type { [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_SPEED_FEATURES = type { i32, i32, i32, i32, i32, %struct.TX_TYPE_SEARCH, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_TYPE_SEARCH = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.RD_CALC_SPEED_FEATURES = type { i32, i32, i32, i8, i32, i32 }
%struct.WINNER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i32, i32 }
%struct.LOOP_FILTER_SPEED_FEATURES = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.REAL_TIME_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.MotionVectorSearchParams = type { i32, i32, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, [3 x [7 x %struct.search_site_config]] }
%struct.SUBPEL_MOTION_SEARCH_PARAMS = type { i32, i32*, i8, i32, %struct.SubpelMvLimits, %struct.MV_COST_PARAMS, %struct.SUBPEL_SEARCH_VAR_PARAMS }
%struct.SubpelMvLimits = type { i32, i32, i32, i32 }
%struct.MV_COST_PARAMS = type { %struct.mv*, %struct.fullpel_mv, i8, i32*, [2 x i32*], i32, i32 }
%struct.SUBPEL_SEARCH_VAR_PARAMS = type { %struct.aom_variance_vtable*, i8, %struct.MSBuffers, i32, i32 }
%struct.MSBuffers = type { %struct.buf_2d*, %struct.buf_2d*, i8*, i8*, i32, i32, i32*, i32* }
%struct.mv = type { i16, i16 }
%struct.search_site_config = type { [22 x [17 x %struct.search_site]], i32, [22 x i32], [22 x i32], i32 }
%struct.search_site = type { %struct.fullpel_mv, i32 }
%struct.EncSegmentationInfo = type { i8*, i8 }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, [3 x i32], double, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.RefBufferStack = type { [16 x i32], i32, [16 x i32], i32, [16 x i32], i32 }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FRAME_INDEX_SET = type { i32 }
%struct.InitialDimensions = type { i32, i32 }
%struct.ResizePendingParams = type { i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [8 x i8], %struct.frame_contexts, %struct.frame_contexts*, i8, [22 x %struct.InterModeRdModel], %struct.AV1EncRowMultiThreadSync, %struct.mv }
%struct.InterModeRdModel = type { i32, double, double, double, double, double, double, double, i32, double, double, double, double, double }
%struct.AV1EncRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32, i32 }
%struct.TokenInfo = type { [64 x [64 x %struct.TokenExtra*]], [64 x [64 x %struct.TokenList*]] }
%struct.TokenExtra = type { i8 }
%struct.TokenList = type { %struct.TokenExtra*, i32 }
%struct.VarBasedPartitionInfo = type { [5 x i64], i64 }
%struct.FrameProbInfo = type { [7 x [22 x i32]], [7 x i32], [7 x [19 x [16 x i32]]], [7 x [16 x [3 x i32]]] }
%struct.MultiThreadInfo = type { i32, [10 x i32], i32, i32, %struct.AVxWorker*, %struct.EncWorkerData*, i8, %struct.AV1EncRowMultiThreadInfo, %struct.AV1TplRowMultiThreadInfo, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1EncPackBSSync, %struct.AV1GlobalMotionSync, %struct.AV1TemporalFilterSync, %struct.AV1CdefSyncData, %struct.AV1CdefWorker* }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.EncWorkerData = type opaque
%struct.AV1EncRowMultiThreadInfo = type { i32, i32, i32, i32, [64 x i32], %union.pthread_mutex_t*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32)*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1TplRowMultiThreadInfo = type { void (%struct.AV1TplRowMultiThreadSync*, i32, i32)*, void (%struct.AV1TplRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncPackBSSync = type { %union.pthread_mutex_t*, [512 x %struct.PackBSTileOrder], i32 }
%struct.PackBSTileOrder = type { i16, i32 }
%struct.AV1GlobalMotionSync = type { %struct.JobInfo, %struct.GlobalMotionThreadData*, %union.pthread_mutex_t*, i32, i32, i8 }
%struct.JobInfo = type { [64 x i8], [2 x i8], [2 x i8] }
%struct.GlobalMotionThreadData = type { [1 x %struct.MotionModel], i8* }
%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.AV1TemporalFilterSync = type { %union.pthread_mutex_t*, i32 }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.aom_film_grain_table_t = type { %struct.aom_film_grain_table_entry_t*, %struct.aom_film_grain_table_entry_t* }
%struct.aom_film_grain_table_entry_t = type { %struct.aom_film_grain_t, i64, i64, %struct.aom_film_grain_table_entry_t* }
%struct.aom_denoise_and_model_t = type opaque
%struct.InterpSearchFlags = type { i32, i16 }
%struct.RefFrameDistanceInfo = type { [7 x i32], i8, i8 }
%struct.SVC = type { i32, i32, i32, i32, i32, i32, i32, i32, [7 x i32], [7 x i32], [8 x i32], double, i32, [8 x i32], [8 x i8], i32, i32, [8 x i32], [8 x i32], i32, i32, [32 x %struct.LAYER_CONTEXT], [4 x i8], [4 x i32], i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, %struct.PRIMARY_RATE_CONTROL, i32, i64, i32, i32, i64, i64, double, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i8, i8, i32, i32 }
%struct.MV_STATS = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FirstPassData = type { %struct.FRAME_STATS*, i32* }
%struct.FRAME_STATS = type { i64, i64, i64, i64, i64, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.av1_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.EncodeFrameParams = type { i32, i8, i32, i32, i32, i32, i32, i32, i32, [8 x i32], %struct.RefreshFrameFlagsInfo, i32 }
%struct.aom_rational64 = type { i64, i32 }
%struct.EncodeFrameInput = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i64 }
%struct.EncodeFrameResults = type { i64 }

@switch.table.av1_encode_strategy.1 = private unnamed_addr constant [8 x i64] [i64 0, i64 1, i64 7, i64 7, i64 7, i64 7, i64 4, i64 4], align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_configure_buffer_updates(%struct.AV1_COMP* nocapture, %struct.RefreshFrameFlagsInfo*, i8 zeroext, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 16
  store i32 0, i32* %6, align 8
  switch i8 %2, label %53 [
    i8 0, label %7
    i8 1, label %11
    i8 2, label %15
    i8 4, label %19
    i8 3, label %31
    i8 5, label %45
    i8 6, label %49
  ]

7:                                                ; preds = %5
  %8 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 0
  store i8 1, i8* %8, align 1
  %9 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 1
  store i8 1, i8* %9, align 1
  %10 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 2
  store i8 1, i8* %10, align 1
  br label %53

11:                                               ; preds = %5
  %12 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 0
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 1
  store i8 0, i8* %13, align 1
  %14 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 2
  store i8 0, i8* %14, align 1
  br label %53

15:                                               ; preds = %5
  %16 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 0
  store i8 1, i8* %16, align 1
  %17 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 1
  store i8 0, i8* %17, align 1
  %18 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 2
  store i8 0, i8* %18, align 1
  br label %53

19:                                               ; preds = %5
  %20 = icmp eq i8 %3, 0
  br i1 %20, label %21, label %25

21:                                               ; preds = %19
  %22 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 14
  %23 = load i32, i32* %22, align 16
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %21, %19
  br label %26

26:                                               ; preds = %21, %25
  %27 = phi i8 [ 0, %25 ], [ 1, %21 ]
  %28 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 0
  store i8 1, i8* %28, align 1
  %29 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 1
  store i8 %27, i8* %29, align 1
  %30 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 2
  store i8 %27, i8* %30, align 1
  store i32 1, i32* %6, align 8
  br label %53

31:                                               ; preds = %5
  %32 = icmp eq i8 %3, 0
  br i1 %32, label %33, label %41

33:                                               ; preds = %31
  %34 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 10
  %35 = load i32, i32* %34, align 8
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %41

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 0
  store i8 1, i8* %38, align 1
  %39 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 1
  store i8 1, i8* %39, align 1
  %40 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 2
  store i8 1, i8* %40, align 1
  br label %53

41:                                               ; preds = %33, %31
  %42 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 0
  store i8 0, i8* %42, align 1
  %43 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 1
  store i8 0, i8* %43, align 1
  %44 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 2
  store i8 1, i8* %44, align 1
  br label %53

45:                                               ; preds = %5
  %46 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 0
  store i8 0, i8* %46, align 1
  %47 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 1
  store i8 0, i8* %47, align 1
  %48 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 2
  store i8 0, i8* %48, align 1
  store i32 1, i32* %6, align 8
  br label %53

49:                                               ; preds = %5
  %50 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 0
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 1
  store i8 1, i8* %51, align 1
  %52 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 2
  store i8 0, i8* %52, align 1
  br label %53

53:                                               ; preds = %5, %37, %41, %49, %45, %26, %15, %11, %7
  %54 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 5
  %55 = load i8, i8* %54, align 1, !range !2
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %75, label %57

57:                                               ; preds = %53
  %58 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 33
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %59, 1
  br i1 %60, label %75, label %61

61:                                               ; preds = %57
  %62 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 76
  %63 = load i8, i8* %62, align 8
  %64 = icmp eq i8 %63, 1
  br i1 %64, label %75, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 1
  %67 = load i8, i8* %66, align 1, !range !2
  %68 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 2
  %69 = load i8, i8* %68, align 1, !range !2
  %70 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 4
  %71 = load i8, i8* %70, align 1, !range !2
  %72 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 0
  store i8 %67, i8* %72, align 1
  %73 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 1
  store i8 %69, i8* %73, align 1
  %74 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 2
  store i8 %71, i8* %74, align 1
  br label %75

75:                                               ; preds = %61, %57, %53, %65
  %76 = icmp eq i32 %4, 0
  br i1 %76, label %81, label %77

77:                                               ; preds = %75
  %78 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 0
  store i8 1, i8* %78, align 1
  %79 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 1
  store i8 1, i8* %79, align 1
  %80 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %1, i64 0, i32 2
  store i8 1, i8* %80, align 1
  br label %81

81:                                               ; preds = %75, %77
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @is_forced_keyframe_pending(%struct.lookahead_ctx*, i32, i8 zeroext) local_unnamed_addr #2 {
  %4 = icmp slt i32 %1, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %3, %13
  %6 = phi i32 [ %14, %13 ], [ 0, %3 ]
  %7 = tail call %struct.lookahead_entry* @av1_lookahead_peek(%struct.lookahead_ctx* %0, i32 %6, i8 zeroext %2) #6
  %8 = icmp eq %struct.lookahead_entry* %7, null
  br i1 %8, label %16, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.lookahead_entry, %struct.lookahead_entry* %7, i64 0, i32 4
  %11 = load i64, i64* %10, align 8
  %12 = icmp eq i64 %11, 1
  br i1 %12, label %16, label %13

13:                                               ; preds = %9
  %14 = add nuw i32 %6, 1
  %15 = icmp eq i32 %6, %1
  br i1 %15, label %16, label %5

16:                                               ; preds = %5, %9, %13, %3
  %17 = phi i32 [ -1, %3 ], [ %6, %9 ], [ -1, %13 ], [ -1, %5 ]
  ret i32 %17
}

declare %struct.lookahead_entry* @av1_lookahead_peek(%struct.lookahead_ctx*, i32, i8 zeroext) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @av1_get_refresh_ref_frame_map(i32) local_unnamed_addr #4 {
  %2 = and i32 %0, 1
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %7

4:                                                ; preds = %1
  %5 = and i32 %0, 2
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %11, label %7

7:                                                ; preds = %1, %4, %11, %14, %17, %20, %23, %26
  %8 = phi i32 [ 7, %26 ], [ 6, %23 ], [ 5, %20 ], [ 4, %17 ], [ 3, %14 ], [ 2, %11 ], [ 1, %4 ], [ 0, %1 ]
  br label %9

9:                                                ; preds = %26, %7
  %10 = phi i32 [ %8, %7 ], [ -1, %26 ]
  ret i32 %10

11:                                               ; preds = %4
  %12 = and i32 %0, 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %7

14:                                               ; preds = %11
  %15 = and i32 %0, 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %7

17:                                               ; preds = %14
  %18 = and i32 %0, 16
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %7

20:                                               ; preds = %17
  %21 = and i32 %0, 32
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %7

23:                                               ; preds = %20
  %24 = and i32 %0, 64
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %7

26:                                               ; preds = %23
  %27 = trunc i32 %0 to i8
  %28 = icmp sgt i8 %27, -1
  br i1 %28, label %9, label %7
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_update_ref_frame_map(%struct.AV1_COMP* nocapture readonly, i8 zeroext, i8 zeroext, i32, i32, %struct.RefBufferStack*) local_unnamed_addr #0 {
  %7 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %8 = load i8, i8* %7, align 16
  %9 = icmp eq i8 %8, 3
  %10 = select i1 %9, i8 0, i8 %1
  %11 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %17, label %14

14:                                               ; preds = %6
  %15 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 5
  %16 = load i32, i32* %15, align 4
  br label %42

17:                                               ; preds = %6
  %18 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 5
  %19 = load i8, i8* %18, align 1, !range !2
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %45, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 4
  %23 = load i8, i8* %22, align 1, !range !2
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %45

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 3
  %27 = load i8, i8* %26, align 1, !range !2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %45

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 2
  %31 = load i8, i8* %30, align 1, !range !2
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %33, label %45

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 1
  %35 = load i8, i8* %34, align 1, !range !2
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %45

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 0
  %39 = load i8, i8* %38, align 1, !range !2
  %40 = xor i8 %39, 1
  %41 = zext i8 %40 to i32
  br label %42

42:                                               ; preds = %14, %37
  %43 = phi i32 [ %16, %14 ], [ %41, %37 ]
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %653

45:                                               ; preds = %17, %21, %25, %29, %33, %42
  switch i8 %10, label %653 [
    i8 0, label %46
    i8 2, label %146
    i8 1, label %241
    i8 3, label %287
    i8 6, label %287
    i8 4, label %376
    i8 5, label %588
  ]

46:                                               ; preds = %45
  %47 = icmp eq i32 %3, 0
  br i1 %47, label %66, label %48

48:                                               ; preds = %46
  %49 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = icmp slt i32 %50, 1
  br i1 %51, label %66, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 0
  %54 = load i32, i32* %53, align 4
  br label %57

55:                                               ; preds = %57
  %56 = add nsw i32 %63, -1
  store i32 %56, i32* %49, align 4
  br label %66

57:                                               ; preds = %57, %52
  %58 = phi i64 [ 0, %52 ], [ %59, %57 ]
  %59 = add nuw nsw i64 %58, 1
  %60 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 %59
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 %58
  store i32 %61, i32* %62, align 4
  %63 = load i32, i32* %49, align 4
  %64 = sext i32 %63 to i64
  %65 = icmp slt i64 %59, %64
  br i1 %65, label %57, label %55

66:                                               ; preds = %55, %48, %46
  %67 = phi i32 [ %4, %46 ], [ %54, %55 ], [ -1, %48 ]
  %68 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 3
  %69 = load i32, i32* %68, align 4
  %70 = icmp sgt i32 %69, 0
  br i1 %70, label %71, label %78

71:                                               ; preds = %66, %71
  %72 = phi i64 [ %74, %71 ], [ 0, %66 ]
  %73 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %72
  store i32 -1, i32* %73, align 4
  %74 = add nuw nsw i64 %72, 1
  %75 = load i32, i32* %68, align 4
  %76 = sext i32 %75 to i64
  %77 = icmp slt i64 %74, %76
  br i1 %77, label %71, label %78

78:                                               ; preds = %71, %66
  store i32 0, i32* %68, align 4
  %79 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 0
  %80 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 5
  %81 = load i32, i32* %80, align 4
  %82 = icmp sgt i32 %81, 0
  br i1 %82, label %83, label %90

83:                                               ; preds = %78, %83
  %84 = phi i64 [ %86, %83 ], [ 0, %78 ]
  %85 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %84
  store i32 -1, i32* %85, align 4
  %86 = add nuw nsw i64 %84, 1
  %87 = load i32, i32* %80, align 4
  %88 = sext i32 %87 to i64
  %89 = icmp slt i64 %86, %88
  br i1 %89, label %83, label %90

90:                                               ; preds = %83, %78
  store i32 0, i32* %80, align 4
  %91 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 1
  %92 = load i32, i32* %91, align 4
  %93 = icmp sgt i32 %92, 0
  br i1 %93, label %95, label %94

94:                                               ; preds = %90
  store i32 0, i32* %91, align 4
  br label %143

95:                                               ; preds = %90, %95
  %96 = phi i64 [ %98, %95 ], [ 0, %90 ]
  %97 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 %96
  store i32 -1, i32* %97, align 4
  %98 = add nuw nsw i64 %96, 1
  %99 = load i32, i32* %91, align 4
  %100 = sext i32 %99 to i64
  %101 = icmp slt i64 %98, %100
  br i1 %101, label %95, label %102

102:                                              ; preds = %95
  %103 = load i32, i32* %80, align 4
  store i32 0, i32* %91, align 4
  %104 = icmp sgt i32 %103, 0
  br i1 %104, label %105, label %143

105:                                              ; preds = %102
  %106 = sext i32 %103 to i64
  %107 = add nsw i64 %106, -1
  %108 = and i64 %106, 3
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %119, label %110

110:                                              ; preds = %105, %110
  %111 = phi i64 [ %113, %110 ], [ %106, %105 ]
  %112 = phi i64 [ %117, %110 ], [ %108, %105 ]
  %113 = add nsw i64 %111, -1
  %114 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %113
  %115 = load i32, i32* %114, align 4
  %116 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %111
  store i32 %115, i32* %116, align 4
  %117 = add i64 %112, -1
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %110, !llvm.loop !3

119:                                              ; preds = %110, %105
  %120 = phi i64 [ %106, %105 ], [ %113, %110 ]
  %121 = icmp ult i64 %107, 3
  br i1 %121, label %141, label %122

122:                                              ; preds = %119, %122
  %123 = phi i64 [ %136, %122 ], [ %120, %119 ]
  %124 = add nsw i64 %123, -1
  %125 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %124
  %126 = load i32, i32* %125, align 4
  %127 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %123
  store i32 %126, i32* %127, align 4
  %128 = add nsw i64 %123, -2
  %129 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %128
  %130 = load i32, i32* %129, align 4
  %131 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %124
  store i32 %130, i32* %131, align 4
  %132 = add nsw i64 %123, -3
  %133 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %132
  %134 = load i32, i32* %133, align 4
  %135 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %128
  store i32 %134, i32* %135, align 4
  %136 = add nsw i64 %123, -4
  %137 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %136
  %138 = load i32, i32* %137, align 4
  %139 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %132
  store i32 %138, i32* %139, align 4
  %140 = icmp sgt i64 %136, 0
  br i1 %140, label %122, label %141

141:                                              ; preds = %122, %119
  %142 = load i32, i32* %80, align 4
  br label %143

143:                                              ; preds = %141, %94, %102
  %144 = phi i32 [ %142, %141 ], [ 0, %94 ], [ %103, %102 ]
  store i32 %67, i32* %79, align 4
  %145 = add nsw i32 %144, 1
  store i32 %145, i32* %80, align 4
  br label %653

146:                                              ; preds = %45
  tail call fastcc void @update_arf_stack(i32 %4, %struct.RefBufferStack* %5)
  %147 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 0
  %148 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 5
  %149 = load i32, i32* %148, align 4
  %150 = icmp sgt i32 %149, 0
  br i1 %150, label %151, label %189

151:                                              ; preds = %146
  %152 = sext i32 %149 to i64
  %153 = add nsw i64 %152, -1
  %154 = and i64 %152, 3
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %165, label %156

156:                                              ; preds = %151, %156
  %157 = phi i64 [ %159, %156 ], [ %152, %151 ]
  %158 = phi i64 [ %163, %156 ], [ %154, %151 ]
  %159 = add nsw i64 %157, -1
  %160 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %159
  %161 = load i32, i32* %160, align 4
  %162 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %157
  store i32 %161, i32* %162, align 4
  %163 = add i64 %158, -1
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %165, label %156, !llvm.loop !5

165:                                              ; preds = %156, %151
  %166 = phi i64 [ %152, %151 ], [ %159, %156 ]
  %167 = icmp ult i64 %153, 3
  br i1 %167, label %187, label %168

168:                                              ; preds = %165, %168
  %169 = phi i64 [ %182, %168 ], [ %166, %165 ]
  %170 = add nsw i64 %169, -1
  %171 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %170
  %172 = load i32, i32* %171, align 4
  %173 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %169
  store i32 %172, i32* %173, align 4
  %174 = add nsw i64 %169, -2
  %175 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %174
  %176 = load i32, i32* %175, align 4
  %177 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %170
  store i32 %176, i32* %177, align 4
  %178 = add nsw i64 %169, -3
  %179 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %178
  %180 = load i32, i32* %179, align 4
  %181 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %174
  store i32 %180, i32* %181, align 4
  %182 = add nsw i64 %169, -4
  %183 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %182
  %184 = load i32, i32* %183, align 4
  %185 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %178
  store i32 %184, i32* %185, align 4
  %186 = icmp sgt i64 %182, 0
  br i1 %186, label %168, label %187

187:                                              ; preds = %168, %165
  %188 = load i32, i32* %148, align 4
  br label %189

189:                                              ; preds = %187, %146
  %190 = phi i32 [ %188, %187 ], [ %149, %146 ]
  store i32 %4, i32* %147, align 4
  %191 = add nsw i32 %190, 1
  store i32 %191, i32* %148, align 4
  %192 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 7
  %193 = load i32, i32* %192, align 4
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %653, label %195

195:                                              ; preds = %189
  %196 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 0
  %197 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 3
  %198 = load i32, i32* %197, align 4
  %199 = icmp sgt i32 %198, 0
  br i1 %199, label %200, label %238

200:                                              ; preds = %195
  %201 = sext i32 %198 to i64
  %202 = add nsw i64 %201, -1
  %203 = and i64 %201, 3
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %214, label %205

205:                                              ; preds = %200, %205
  %206 = phi i64 [ %208, %205 ], [ %201, %200 ]
  %207 = phi i64 [ %212, %205 ], [ %203, %200 ]
  %208 = add nsw i64 %206, -1
  %209 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %208
  %210 = load i32, i32* %209, align 4
  %211 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %206
  store i32 %210, i32* %211, align 4
  %212 = add i64 %207, -1
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %205, !llvm.loop !6

214:                                              ; preds = %205, %200
  %215 = phi i64 [ %201, %200 ], [ %208, %205 ]
  %216 = icmp ult i64 %202, 3
  br i1 %216, label %236, label %217

217:                                              ; preds = %214, %217
  %218 = phi i64 [ %231, %217 ], [ %215, %214 ]
  %219 = add nsw i64 %218, -1
  %220 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %219
  %221 = load i32, i32* %220, align 4
  %222 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %218
  store i32 %221, i32* %222, align 4
  %223 = add nsw i64 %218, -2
  %224 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %223
  %225 = load i32, i32* %224, align 4
  %226 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %219
  store i32 %225, i32* %226, align 4
  %227 = add nsw i64 %218, -3
  %228 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %227
  %229 = load i32, i32* %228, align 4
  %230 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %223
  store i32 %229, i32* %230, align 4
  %231 = add nsw i64 %218, -4
  %232 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %231
  %233 = load i32, i32* %232, align 4
  %234 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %227
  store i32 %233, i32* %234, align 4
  %235 = icmp sgt i64 %231, 0
  br i1 %235, label %217, label %236

236:                                              ; preds = %217, %214
  %237 = load i32, i32* %197, align 4
  br label %238

238:                                              ; preds = %236, %195
  %239 = phi i32 [ %237, %236 ], [ %198, %195 ]
  store i32 %4, i32* %196, align 4
  %240 = add nsw i32 %239, 1
  store i32 %240, i32* %197, align 4
  br label %653

241:                                              ; preds = %45
  tail call fastcc void @update_arf_stack(i32 %4, %struct.RefBufferStack* %5)
  %242 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 0
  %243 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 3
  %244 = load i32, i32* %243, align 4
  %245 = icmp sgt i32 %244, 0
  br i1 %245, label %246, label %284

246:                                              ; preds = %241
  %247 = sext i32 %244 to i64
  %248 = add nsw i64 %247, -1
  %249 = and i64 %247, 3
  %250 = icmp eq i64 %249, 0
  br i1 %250, label %260, label %251

251:                                              ; preds = %246, %251
  %252 = phi i64 [ %254, %251 ], [ %247, %246 ]
  %253 = phi i64 [ %258, %251 ], [ %249, %246 ]
  %254 = add nsw i64 %252, -1
  %255 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %254
  %256 = load i32, i32* %255, align 4
  %257 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %252
  store i32 %256, i32* %257, align 4
  %258 = add i64 %253, -1
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %260, label %251, !llvm.loop !7

260:                                              ; preds = %251, %246
  %261 = phi i64 [ %247, %246 ], [ %254, %251 ]
  %262 = icmp ult i64 %248, 3
  br i1 %262, label %282, label %263

263:                                              ; preds = %260, %263
  %264 = phi i64 [ %277, %263 ], [ %261, %260 ]
  %265 = add nsw i64 %264, -1
  %266 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %265
  %267 = load i32, i32* %266, align 4
  %268 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %264
  store i32 %267, i32* %268, align 4
  %269 = add nsw i64 %264, -2
  %270 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %269
  %271 = load i32, i32* %270, align 4
  %272 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %265
  store i32 %271, i32* %272, align 4
  %273 = add nsw i64 %264, -3
  %274 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %273
  %275 = load i32, i32* %274, align 4
  %276 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %269
  store i32 %275, i32* %276, align 4
  %277 = add nsw i64 %264, -4
  %278 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %277
  %279 = load i32, i32* %278, align 4
  %280 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %273
  store i32 %279, i32* %280, align 4
  %281 = icmp sgt i64 %277, 0
  br i1 %281, label %263, label %282

282:                                              ; preds = %263, %260
  %283 = load i32, i32* %243, align 4
  br label %284

284:                                              ; preds = %282, %241
  %285 = phi i32 [ %283, %282 ], [ %244, %241 ]
  store i32 %4, i32* %242, align 4
  %286 = add nsw i32 %285, 1
  store i32 %286, i32* %243, align 4
  br label %653

287:                                              ; preds = %45, %45
  %288 = icmp eq i8 %2, 0
  br i1 %288, label %289, label %329

289:                                              ; preds = %287
  %290 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 10
  %291 = load i32, i32* %290, align 8
  %292 = icmp eq i32 %291, 0
  br i1 %292, label %293, label %329

293:                                              ; preds = %289
  %294 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 3
  %295 = load i32, i32* %294, align 4
  %296 = icmp sgt i32 %295, 0
  br i1 %296, label %297, label %304

297:                                              ; preds = %293, %297
  %298 = phi i64 [ %300, %297 ], [ 0, %293 ]
  %299 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %298
  store i32 -1, i32* %299, align 4
  %300 = add nuw nsw i64 %298, 1
  %301 = load i32, i32* %294, align 4
  %302 = sext i32 %301 to i64
  %303 = icmp slt i64 %300, %302
  br i1 %303, label %297, label %304

304:                                              ; preds = %297, %293
  store i32 0, i32* %294, align 4
  %305 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 5
  %306 = load i32, i32* %305, align 4
  %307 = icmp sgt i32 %306, 0
  br i1 %307, label %308, label %315

308:                                              ; preds = %304, %308
  %309 = phi i64 [ %311, %308 ], [ 0, %304 ]
  %310 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %309
  store i32 -1, i32* %310, align 4
  %311 = add nuw nsw i64 %309, 1
  %312 = load i32, i32* %305, align 4
  %313 = sext i32 %312 to i64
  %314 = icmp slt i64 %311, %313
  br i1 %314, label %308, label %315

315:                                              ; preds = %308, %304
  store i32 0, i32* %305, align 4
  %316 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 1
  %317 = load i32, i32* %316, align 4
  %318 = icmp sgt i32 %317, 0
  br i1 %318, label %319, label %326

319:                                              ; preds = %315, %319
  %320 = phi i64 [ %322, %319 ], [ 0, %315 ]
  %321 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 %320
  store i32 -1, i32* %321, align 4
  %322 = add nuw nsw i64 %320, 1
  %323 = load i32, i32* %316, align 4
  %324 = sext i32 %323 to i64
  %325 = icmp slt i64 %322, %324
  br i1 %325, label %319, label %326

326:                                              ; preds = %319, %315
  store i32 0, i32* %316, align 4
  %327 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 0
  %328 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 1
  br label %371

329:                                              ; preds = %287, %289
  tail call fastcc void @update_arf_stack(i32 %4, %struct.RefBufferStack* %5)
  %330 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 1
  %331 = load i32, i32* %330, align 4
  %332 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 0
  %333 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 1
  %334 = icmp sgt i32 %331, 0
  br i1 %334, label %335, label %371

335:                                              ; preds = %329
  %336 = sext i32 %331 to i64
  %337 = add nsw i64 %336, -1
  %338 = and i64 %336, 3
  %339 = icmp eq i64 %338, 0
  br i1 %339, label %349, label %340

340:                                              ; preds = %335, %340
  %341 = phi i64 [ %343, %340 ], [ %336, %335 ]
  %342 = phi i64 [ %347, %340 ], [ %338, %335 ]
  %343 = add nsw i64 %341, -1
  %344 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 %343
  %345 = load i32, i32* %344, align 4
  %346 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 %341
  store i32 %345, i32* %346, align 4
  %347 = add i64 %342, -1
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %349, label %340, !llvm.loop !8

349:                                              ; preds = %340, %335
  %350 = phi i64 [ %336, %335 ], [ %343, %340 ]
  %351 = icmp ult i64 %337, 3
  br i1 %351, label %371, label %352

352:                                              ; preds = %349, %352
  %353 = phi i64 [ %366, %352 ], [ %350, %349 ]
  %354 = add nsw i64 %353, -1
  %355 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 %354
  %356 = load i32, i32* %355, align 4
  %357 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 %353
  store i32 %356, i32* %357, align 4
  %358 = add nsw i64 %353, -2
  %359 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 %358
  %360 = load i32, i32* %359, align 4
  %361 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 %354
  store i32 %360, i32* %361, align 4
  %362 = add nsw i64 %353, -3
  %363 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 %362
  %364 = load i32, i32* %363, align 4
  %365 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 %358
  store i32 %364, i32* %365, align 4
  %366 = add nsw i64 %353, -4
  %367 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 %366
  %368 = load i32, i32* %367, align 4
  %369 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 %362
  store i32 %368, i32* %369, align 4
  %370 = icmp sgt i64 %366, 0
  br i1 %370, label %352, label %371

371:                                              ; preds = %349, %352, %326, %329
  %372 = phi i32* [ %328, %326 ], [ %333, %329 ], [ %333, %352 ], [ %333, %349 ]
  %373 = phi i32* [ %327, %326 ], [ %332, %329 ], [ %332, %352 ], [ %332, %349 ]
  store i32 %4, i32* %373, align 4
  %374 = load i32, i32* %372, align 4
  %375 = add nsw i32 %374, 1
  store i32 %375, i32* %372, align 4
  br label %653

376:                                              ; preds = %45
  %377 = icmp eq i8 %2, 0
  br i1 %377, label %378, label %475

378:                                              ; preds = %376
  %379 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 1
  %380 = load i32, i32* %379, align 4
  %381 = icmp slt i32 %380, 1
  br i1 %381, label %396, label %382

382:                                              ; preds = %378
  %383 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 0
  %384 = load i32, i32* %383, align 4
  br label %387

385:                                              ; preds = %387
  %386 = add nsw i32 %393, -1
  store i32 %386, i32* %379, align 4
  br label %396

387:                                              ; preds = %387, %382
  %388 = phi i64 [ 0, %382 ], [ %389, %387 ]
  %389 = add nuw nsw i64 %388, 1
  %390 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 %389
  %391 = load i32, i32* %390, align 4
  %392 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 %388
  store i32 %391, i32* %392, align 4
  %393 = load i32, i32* %379, align 4
  %394 = sext i32 %393 to i64
  %395 = icmp slt i64 %389, %394
  br i1 %395, label %387, label %385

396:                                              ; preds = %378, %385
  %397 = phi i32 [ %386, %385 ], [ %380, %378 ]
  %398 = phi i32 [ %384, %385 ], [ -1, %378 ]
  %399 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 3
  %400 = load i32, i32* %399, align 4
  %401 = icmp sgt i32 %400, 0
  br i1 %401, label %402, label %409

402:                                              ; preds = %396, %402
  %403 = phi i64 [ %405, %402 ], [ 0, %396 ]
  %404 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %403
  store i32 -1, i32* %404, align 4
  %405 = add nuw nsw i64 %403, 1
  %406 = load i32, i32* %399, align 4
  %407 = sext i32 %406 to i64
  %408 = icmp slt i64 %405, %407
  br i1 %408, label %402, label %409

409:                                              ; preds = %402, %396
  store i32 0, i32* %399, align 4
  %410 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 0
  %411 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 5
  %412 = load i32, i32* %411, align 4
  %413 = icmp sgt i32 %412, 0
  br i1 %413, label %414, label %421

414:                                              ; preds = %409, %414
  %415 = phi i64 [ %417, %414 ], [ 0, %409 ]
  %416 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %415
  store i32 -1, i32* %416, align 4
  %417 = add nuw nsw i64 %415, 1
  %418 = load i32, i32* %411, align 4
  %419 = sext i32 %418 to i64
  %420 = icmp slt i64 %417, %419
  br i1 %420, label %414, label %421

421:                                              ; preds = %414, %409
  store i32 0, i32* %411, align 4
  %422 = icmp sgt i32 %397, 0
  br i1 %422, label %424, label %423

423:                                              ; preds = %421
  store i32 0, i32* %379, align 4
  br label %472

424:                                              ; preds = %421, %424
  %425 = phi i64 [ %427, %424 ], [ 0, %421 ]
  %426 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 %425
  store i32 -1, i32* %426, align 4
  %427 = add nuw nsw i64 %425, 1
  %428 = load i32, i32* %379, align 4
  %429 = sext i32 %428 to i64
  %430 = icmp slt i64 %427, %429
  br i1 %430, label %424, label %431

431:                                              ; preds = %424
  %432 = load i32, i32* %411, align 4
  store i32 0, i32* %379, align 4
  %433 = icmp sgt i32 %432, 0
  br i1 %433, label %434, label %472

434:                                              ; preds = %431
  %435 = sext i32 %432 to i64
  %436 = add nsw i64 %435, -1
  %437 = and i64 %435, 3
  %438 = icmp eq i64 %437, 0
  br i1 %438, label %448, label %439

439:                                              ; preds = %434, %439
  %440 = phi i64 [ %442, %439 ], [ %435, %434 ]
  %441 = phi i64 [ %446, %439 ], [ %437, %434 ]
  %442 = add nsw i64 %440, -1
  %443 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %442
  %444 = load i32, i32* %443, align 4
  %445 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %440
  store i32 %444, i32* %445, align 4
  %446 = add i64 %441, -1
  %447 = icmp eq i64 %446, 0
  br i1 %447, label %448, label %439, !llvm.loop !9

448:                                              ; preds = %439, %434
  %449 = phi i64 [ %435, %434 ], [ %442, %439 ]
  %450 = icmp ult i64 %436, 3
  br i1 %450, label %470, label %451

451:                                              ; preds = %448, %451
  %452 = phi i64 [ %465, %451 ], [ %449, %448 ]
  %453 = add nsw i64 %452, -1
  %454 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %453
  %455 = load i32, i32* %454, align 4
  %456 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %452
  store i32 %455, i32* %456, align 4
  %457 = add nsw i64 %452, -2
  %458 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %457
  %459 = load i32, i32* %458, align 4
  %460 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %453
  store i32 %459, i32* %460, align 4
  %461 = add nsw i64 %452, -3
  %462 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %461
  %463 = load i32, i32* %462, align 4
  %464 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %457
  store i32 %463, i32* %464, align 4
  %465 = add nsw i64 %452, -4
  %466 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %465
  %467 = load i32, i32* %466, align 4
  %468 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %461
  store i32 %467, i32* %468, align 4
  %469 = icmp sgt i64 %465, 0
  br i1 %469, label %451, label %470

470:                                              ; preds = %451, %448
  %471 = load i32, i32* %411, align 4
  br label %472

472:                                              ; preds = %470, %423, %431
  %473 = phi i32 [ %471, %470 ], [ 0, %423 ], [ %432, %431 ]
  store i32 %398, i32* %410, align 4
  %474 = add nsw i32 %473, 1
  store i32 %474, i32* %411, align 4
  br label %653

475:                                              ; preds = %376
  %476 = icmp eq i32 %4, -1
  br i1 %476, label %523, label %477

477:                                              ; preds = %475
  tail call fastcc void @update_arf_stack(i32 %4, %struct.RefBufferStack* %5)
  %478 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 0
  %479 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 3
  %480 = load i32, i32* %479, align 4
  %481 = icmp sgt i32 %480, 0
  br i1 %481, label %482, label %520

482:                                              ; preds = %477
  %483 = sext i32 %480 to i64
  %484 = add nsw i64 %483, -1
  %485 = and i64 %483, 3
  %486 = icmp eq i64 %485, 0
  br i1 %486, label %496, label %487

487:                                              ; preds = %482, %487
  %488 = phi i64 [ %490, %487 ], [ %483, %482 ]
  %489 = phi i64 [ %494, %487 ], [ %485, %482 ]
  %490 = add nsw i64 %488, -1
  %491 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %490
  %492 = load i32, i32* %491, align 4
  %493 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %488
  store i32 %492, i32* %493, align 4
  %494 = add i64 %489, -1
  %495 = icmp eq i64 %494, 0
  br i1 %495, label %496, label %487, !llvm.loop !10

496:                                              ; preds = %487, %482
  %497 = phi i64 [ %483, %482 ], [ %490, %487 ]
  %498 = icmp ult i64 %484, 3
  br i1 %498, label %518, label %499

499:                                              ; preds = %496, %499
  %500 = phi i64 [ %513, %499 ], [ %497, %496 ]
  %501 = add nsw i64 %500, -1
  %502 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %501
  %503 = load i32, i32* %502, align 4
  %504 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %500
  store i32 %503, i32* %504, align 4
  %505 = add nsw i64 %500, -2
  %506 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %505
  %507 = load i32, i32* %506, align 4
  %508 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %501
  store i32 %507, i32* %508, align 4
  %509 = add nsw i64 %500, -3
  %510 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %509
  %511 = load i32, i32* %510, align 4
  %512 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %505
  store i32 %511, i32* %512, align 4
  %513 = add nsw i64 %500, -4
  %514 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %513
  %515 = load i32, i32* %514, align 4
  %516 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %509
  store i32 %515, i32* %516, align 4
  %517 = icmp sgt i64 %513, 0
  br i1 %517, label %499, label %518

518:                                              ; preds = %499, %496
  %519 = load i32, i32* %479, align 4
  br label %520

520:                                              ; preds = %518, %477
  %521 = phi i32 [ %519, %518 ], [ %480, %477 ]
  store i32 %4, i32* %478, align 4
  %522 = add nsw i32 %521, 1
  store i32 %522, i32* %479, align 4
  br label %523

523:                                              ; preds = %475, %520
  %524 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 1
  %525 = load i32, i32* %524, align 4
  %526 = icmp slt i32 %525, 1
  br i1 %526, label %541, label %527

527:                                              ; preds = %523
  %528 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 0
  %529 = load i32, i32* %528, align 4
  br label %532

530:                                              ; preds = %532
  %531 = add nsw i32 %538, -1
  store i32 %531, i32* %524, align 4
  br label %541

532:                                              ; preds = %532, %527
  %533 = phi i64 [ 0, %527 ], [ %534, %532 ]
  %534 = add nuw nsw i64 %533, 1
  %535 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 %534
  %536 = load i32, i32* %535, align 4
  %537 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 %533
  store i32 %536, i32* %537, align 4
  %538 = load i32, i32* %524, align 4
  %539 = sext i32 %538 to i64
  %540 = icmp slt i64 %534, %539
  br i1 %540, label %532, label %530

541:                                              ; preds = %523, %530
  %542 = phi i32 [ %529, %530 ], [ -1, %523 ]
  %543 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 0
  %544 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 5
  %545 = load i32, i32* %544, align 4
  %546 = icmp sgt i32 %545, 0
  br i1 %546, label %547, label %585

547:                                              ; preds = %541
  %548 = sext i32 %545 to i64
  %549 = add nsw i64 %548, -1
  %550 = and i64 %548, 3
  %551 = icmp eq i64 %550, 0
  br i1 %551, label %561, label %552

552:                                              ; preds = %547, %552
  %553 = phi i64 [ %555, %552 ], [ %548, %547 ]
  %554 = phi i64 [ %559, %552 ], [ %550, %547 ]
  %555 = add nsw i64 %553, -1
  %556 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %555
  %557 = load i32, i32* %556, align 4
  %558 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %553
  store i32 %557, i32* %558, align 4
  %559 = add i64 %554, -1
  %560 = icmp eq i64 %559, 0
  br i1 %560, label %561, label %552, !llvm.loop !11

561:                                              ; preds = %552, %547
  %562 = phi i64 [ %548, %547 ], [ %555, %552 ]
  %563 = icmp ult i64 %549, 3
  br i1 %563, label %583, label %564

564:                                              ; preds = %561, %564
  %565 = phi i64 [ %578, %564 ], [ %562, %561 ]
  %566 = add nsw i64 %565, -1
  %567 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %566
  %568 = load i32, i32* %567, align 4
  %569 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %565
  store i32 %568, i32* %569, align 4
  %570 = add nsw i64 %565, -2
  %571 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %570
  %572 = load i32, i32* %571, align 4
  %573 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %566
  store i32 %572, i32* %573, align 4
  %574 = add nsw i64 %565, -3
  %575 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %574
  %576 = load i32, i32* %575, align 4
  %577 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %570
  store i32 %576, i32* %577, align 4
  %578 = add nsw i64 %565, -4
  %579 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %578
  %580 = load i32, i32* %579, align 4
  %581 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 4, i64 %574
  store i32 %580, i32* %581, align 4
  %582 = icmp sgt i64 %578, 0
  br i1 %582, label %564, label %583

583:                                              ; preds = %564, %561
  %584 = load i32, i32* %544, align 4
  br label %585

585:                                              ; preds = %583, %541
  %586 = phi i32 [ %584, %583 ], [ %545, %541 ]
  store i32 %542, i32* %543, align 4
  %587 = add nsw i32 %586, 1
  store i32 %587, i32* %544, align 4
  br label %653

588:                                              ; preds = %45
  %589 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 1
  %590 = load i32, i32* %589, align 4
  %591 = icmp slt i32 %590, 1
  br i1 %591, label %606, label %592

592:                                              ; preds = %588
  %593 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 0
  %594 = load i32, i32* %593, align 4
  br label %597

595:                                              ; preds = %597
  %596 = add nsw i32 %603, -1
  store i32 %596, i32* %589, align 4
  br label %606

597:                                              ; preds = %597, %592
  %598 = phi i64 [ 0, %592 ], [ %599, %597 ]
  %599 = add nuw nsw i64 %598, 1
  %600 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 %599
  %601 = load i32, i32* %600, align 4
  %602 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 0, i64 %598
  store i32 %601, i32* %602, align 4
  %603 = load i32, i32* %589, align 4
  %604 = sext i32 %603 to i64
  %605 = icmp slt i64 %599, %604
  br i1 %605, label %597, label %595

606:                                              ; preds = %588, %595
  %607 = phi i32 [ %594, %595 ], [ -1, %588 ]
  %608 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 0
  %609 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 3
  %610 = load i32, i32* %609, align 4
  %611 = icmp sgt i32 %610, 0
  br i1 %611, label %612, label %650

612:                                              ; preds = %606
  %613 = sext i32 %610 to i64
  %614 = add nsw i64 %613, -1
  %615 = and i64 %613, 3
  %616 = icmp eq i64 %615, 0
  br i1 %616, label %626, label %617

617:                                              ; preds = %612, %617
  %618 = phi i64 [ %620, %617 ], [ %613, %612 ]
  %619 = phi i64 [ %624, %617 ], [ %615, %612 ]
  %620 = add nsw i64 %618, -1
  %621 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %620
  %622 = load i32, i32* %621, align 4
  %623 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %618
  store i32 %622, i32* %623, align 4
  %624 = add i64 %619, -1
  %625 = icmp eq i64 %624, 0
  br i1 %625, label %626, label %617, !llvm.loop !12

626:                                              ; preds = %617, %612
  %627 = phi i64 [ %613, %612 ], [ %620, %617 ]
  %628 = icmp ult i64 %614, 3
  br i1 %628, label %648, label %629

629:                                              ; preds = %626, %629
  %630 = phi i64 [ %643, %629 ], [ %627, %626 ]
  %631 = add nsw i64 %630, -1
  %632 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %631
  %633 = load i32, i32* %632, align 4
  %634 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %630
  store i32 %633, i32* %634, align 4
  %635 = add nsw i64 %630, -2
  %636 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %635
  %637 = load i32, i32* %636, align 4
  %638 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %631
  store i32 %637, i32* %638, align 4
  %639 = add nsw i64 %630, -3
  %640 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %639
  %641 = load i32, i32* %640, align 4
  %642 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %635
  store i32 %641, i32* %642, align 4
  %643 = add nsw i64 %630, -4
  %644 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %643
  %645 = load i32, i32* %644, align 4
  %646 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %5, i64 0, i32 2, i64 %639
  store i32 %645, i32* %646, align 4
  %647 = icmp sgt i64 %643, 0
  br i1 %647, label %629, label %648

648:                                              ; preds = %629, %626
  %649 = load i32, i32* %609, align 4
  br label %650

650:                                              ; preds = %648, %606
  %651 = phi i32 [ %649, %648 ], [ %610, %606 ]
  store i32 %607, i32* %608, align 4
  %652 = add nsw i32 %651, 1
  store i32 %652, i32* %609, align 4
  br label %653

653:                                              ; preds = %143, %284, %371, %650, %238, %585, %472, %45, %189, %42
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @update_arf_stack(i32, %struct.RefBufferStack* nocapture) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %1, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp sgt i32 %4, -1
  br i1 %5, label %6, label %23

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %1, i64 0, i32 0, i64 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp ne i32 %8, %0
  %10 = icmp eq i32 %4, 0
  %11 = or i1 %10, %9
  br i1 %11, label %23, label %14

12:                                               ; preds = %14
  %13 = add nsw i32 %20, -1
  store i32 %13, i32* %3, align 4
  br label %23

14:                                               ; preds = %6, %14
  %15 = phi i64 [ %16, %14 ], [ 0, %6 ]
  %16 = add nuw nsw i64 %15, 1
  %17 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %1, i64 0, i32 0, i64 %16
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %1, i64 0, i32 0, i64 %15
  store i32 %18, i32* %19, align 4
  %20 = load i32, i32* %3, align 4
  %21 = sext i32 %20 to i64
  %22 = icmp slt i64 %16, %21
  br i1 %22, label %14, label %12

23:                                               ; preds = %6, %12, %2
  %24 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %1, i64 0, i32 3
  %25 = load i32, i32* %24, align 4
  %26 = icmp sgt i32 %25, 0
  br i1 %26, label %27, label %62

27:                                               ; preds = %23
  %28 = sext i32 %25 to i64
  br label %29

29:                                               ; preds = %27, %59
  %30 = phi i32 [ %25, %27 ], [ %60, %59 ]
  %31 = phi i64 [ %28, %27 ], [ %34, %59 ]
  %32 = phi i64 [ %28, %27 ], [ %33, %59 ]
  %33 = add i64 %32, -1
  %34 = add nsw i64 %31, -1
  %35 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %1, i64 0, i32 2, i64 %34
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, %0
  br i1 %37, label %38, label %59

38:                                               ; preds = %29
  %39 = sext i32 %30 to i64
  %40 = icmp slt i64 %31, %39
  br i1 %40, label %49, label %41

41:                                               ; preds = %38
  %42 = add nsw i32 %30, -1
  %43 = sext i32 %42 to i64
  br label %44

44:                                               ; preds = %49, %41
  %45 = phi i64 [ %43, %41 ], [ %57, %49 ]
  %46 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %1, i64 0, i32 2, i64 %45
  store i32 -1, i32* %46, align 4
  %47 = load i32, i32* %24, align 4
  %48 = add nsw i32 %47, -1
  store i32 %48, i32* %24, align 4
  br label %59

49:                                               ; preds = %38, %49
  %50 = phi i64 [ %51, %49 ], [ %33, %38 ]
  %51 = add nsw i64 %50, 1
  %52 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %1, i64 0, i32 2, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %1, i64 0, i32 2, i64 %50
  store i32 %53, i32* %54, align 4
  %55 = load i32, i32* %24, align 4
  %56 = add nsw i32 %55, -1
  %57 = sext i32 %56 to i64
  %58 = icmp slt i64 %51, %57
  br i1 %58, label %49, label %44

59:                                               ; preds = %29, %44
  %60 = phi i32 [ %30, %29 ], [ %48, %44 ]
  %61 = icmp sgt i64 %34, 0
  br i1 %61, label %29, label %62

62:                                               ; preds = %59, %23
  %63 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %1, i64 0, i32 5
  %64 = load i32, i32* %63, align 4
  %65 = icmp sgt i32 %64, 0
  br i1 %65, label %66, label %101

66:                                               ; preds = %62
  %67 = sext i32 %64 to i64
  br label %68

68:                                               ; preds = %66, %98
  %69 = phi i32 [ %64, %66 ], [ %99, %98 ]
  %70 = phi i64 [ %67, %66 ], [ %73, %98 ]
  %71 = phi i64 [ %67, %66 ], [ %72, %98 ]
  %72 = add i64 %71, -1
  %73 = add nsw i64 %70, -1
  %74 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %1, i64 0, i32 4, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = icmp eq i32 %75, %0
  br i1 %76, label %77, label %98

77:                                               ; preds = %68
  %78 = sext i32 %69 to i64
  %79 = icmp slt i64 %70, %78
  br i1 %79, label %88, label %80

80:                                               ; preds = %77
  %81 = add nsw i32 %69, -1
  %82 = sext i32 %81 to i64
  br label %83

83:                                               ; preds = %88, %80
  %84 = phi i64 [ %82, %80 ], [ %96, %88 ]
  %85 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %1, i64 0, i32 4, i64 %84
  store i32 -1, i32* %85, align 4
  %86 = load i32, i32* %63, align 4
  %87 = add nsw i32 %86, -1
  store i32 %87, i32* %63, align 4
  br label %98

88:                                               ; preds = %77, %88
  %89 = phi i64 [ %90, %88 ], [ %72, %77 ]
  %90 = add nsw i64 %89, 1
  %91 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %1, i64 0, i32 4, i64 %90
  %92 = load i32, i32* %91, align 4
  %93 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %1, i64 0, i32 4, i64 %89
  store i32 %92, i32* %93, align 4
  %94 = load i32, i32* %63, align 4
  %95 = add nsw i32 %94, -1
  %96 = sext i32 %95 to i64
  %97 = icmp slt i64 %90, %96
  br i1 %97, label %88, label %83

98:                                               ; preds = %68, %83
  %99 = phi i32 [ %69, %68 ], [ %87, %83 ]
  %100 = icmp sgt i64 %73, 0
  br i1 %100, label %68, label %101

101:                                              ; preds = %98, %62
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @av1_get_refresh_frame_flags(%struct.AV1_COMP* nocapture readonly, %struct.EncodeFrameParams* nocapture readonly, i8 zeroext, %struct.RefBufferStack* nocapture readonly) local_unnamed_addr #5 {
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1
  %6 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %1, i64 0, i32 1
  %7 = load i8, i8* %6, align 4
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 10
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %300, label %15

13:                                               ; preds = %4
  %14 = icmp eq i8 %7, 3
  br i1 %14, label %300, label %15

15:                                               ; preds = %9, %13
  %16 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %1, i64 0, i32 6
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %1, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  %23 = or i1 %8, %22
  br i1 %23, label %300, label %24

24:                                               ; preds = %19, %15
  %25 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 4
  %26 = load i32, i32* %25, align 8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %31, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 5
  %30 = load i32, i32* %29, align 4
  br label %56

31:                                               ; preds = %24
  %32 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 5
  %33 = load i8, i8* %32, align 1, !range !2
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %178, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 4
  %37 = load i8, i8* %36, align 1, !range !2
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %113

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 3
  %41 = load i8, i8* %40, align 1, !range !2
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %43, label %113

43:                                               ; preds = %39
  %44 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 2
  %45 = load i8, i8* %44, align 1, !range !2
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %47, label %113

47:                                               ; preds = %43
  %48 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 1
  %49 = load i8, i8* %48, align 1, !range !2
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %51, label %113

51:                                               ; preds = %47
  %52 = getelementptr inbounds %struct.ExtRefreshFrameFlagsInfo, %struct.ExtRefreshFrameFlagsInfo* %5, i64 0, i32 0
  %53 = load i8, i8* %52, align 1, !range !2
  %54 = xor i8 %53, 1
  %55 = zext i8 %54 to i32
  br label %56

56:                                               ; preds = %28, %51
  %57 = phi i32 [ %30, %28 ], [ %55, %51 ]
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %300

59:                                               ; preds = %56
  %60 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 5
  %61 = load i8, i8* %60, align 1, !range !2
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %178, label %63

63:                                               ; preds = %59
  br i1 %27, label %113, label %64

64:                                               ; preds = %63
  %65 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 0
  %66 = load i32, i32* %65, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = shl i32 %69, %66
  %71 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 1
  %72 = load i32, i32* %71, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = shl i32 %75, %72
  %77 = or i32 %76, %70
  %78 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 2
  %79 = load i32, i32* %78, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 %80
  %82 = load i32, i32* %81, align 4
  %83 = shl i32 %82, %79
  %84 = or i32 %83, %77
  %85 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 3
  %86 = load i32, i32* %85, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 %87
  %89 = load i32, i32* %88, align 4
  %90 = shl i32 %89, %86
  %91 = or i32 %90, %84
  %92 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 4
  %93 = load i32, i32* %92, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 %94
  %96 = load i32, i32* %95, align 4
  %97 = shl i32 %96, %93
  %98 = or i32 %97, %91
  %99 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 5
  %100 = load i32, i32* %99, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 %101
  %103 = load i32, i32* %102, align 4
  %104 = shl i32 %103, %100
  %105 = or i32 %104, %98
  %106 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 6
  %107 = load i32, i32* %106, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 10, i64 %108
  %110 = load i32, i32* %109, align 4
  %111 = shl i32 %110, %107
  %112 = or i32 %111, %105
  br label %300

113:                                              ; preds = %35, %39, %43, %47, %63
  %114 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 0
  %115 = load i32, i32* %114, align 4
  %116 = icmp eq i32 %115, -1
  br i1 %116, label %122, label %117

117:                                              ; preds = %113
  %118 = getelementptr inbounds %struct.ExtRefreshFrameFlagsInfo, %struct.ExtRefreshFrameFlagsInfo* %5, i64 0, i32 0
  %119 = load i8, i8* %118, align 1, !range !2
  %120 = zext i8 %119 to i32
  %121 = shl i32 %120, %115
  br label %122

122:                                              ; preds = %113, %117
  %123 = phi i32 [ %121, %117 ], [ 0, %113 ]
  %124 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 7
  %125 = load i32, i32* %124, align 4
  %126 = icmp eq i32 %125, -1
  br i1 %126, label %133, label %127

127:                                              ; preds = %122
  %128 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 2
  %129 = load i8, i8* %128, align 1, !range !2
  %130 = zext i8 %129 to i32
  %131 = shl i32 %130, %125
  %132 = or i32 %131, %123
  br label %133

133:                                              ; preds = %122, %127
  %134 = phi i32 [ %132, %127 ], [ %123, %122 ]
  %135 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 5
  %136 = load i32, i32* %135, align 4
  %137 = icmp eq i32 %136, -1
  br i1 %137, label %144, label %138

138:                                              ; preds = %133
  %139 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 3
  %140 = load i8, i8* %139, align 1, !range !2
  %141 = zext i8 %140 to i32
  %142 = shl i32 %141, %136
  %143 = or i32 %142, %134
  br label %144

144:                                              ; preds = %133, %138
  %145 = phi i32 [ %143, %138 ], [ %134, %133 ]
  %146 = icmp eq i8 %2, 4
  br i1 %146, label %147, label %157

147:                                              ; preds = %144
  %148 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 6
  %149 = load i32, i32* %148, align 4
  %150 = icmp eq i32 %149, -1
  br i1 %150, label %300, label %151

151:                                              ; preds = %147
  %152 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 1
  %153 = load i8, i8* %152, align 1, !range !2
  %154 = zext i8 %153 to i32
  %155 = shl i32 %154, %149
  %156 = or i32 %155, %145
  br label %300

157:                                              ; preds = %144
  %158 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 3
  %159 = load i32, i32* %158, align 4
  %160 = icmp eq i32 %159, -1
  br i1 %160, label %167, label %161

161:                                              ; preds = %157
  %162 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 1
  %163 = load i8, i8* %162, align 1, !range !2
  %164 = zext i8 %163 to i32
  %165 = shl i32 %164, %159
  %166 = or i32 %165, %145
  br label %167

167:                                              ; preds = %157, %161
  %168 = phi i32 [ %166, %161 ], [ %145, %157 ]
  %169 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 6
  %170 = load i32, i32* %169, align 4
  %171 = icmp eq i32 %170, -1
  br i1 %171, label %300, label %172

172:                                              ; preds = %167
  %173 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 4
  %174 = load i8, i8* %173, align 1, !range !2
  %175 = zext i8 %174 to i32
  %176 = shl i32 %175, %170
  %177 = or i32 %176, %168
  br label %300

178:                                              ; preds = %31, %59
  %179 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %3, i64 0, i32 1
  %180 = load i32, i32* %179, align 4
  %181 = icmp sgt i32 %180, 0
  %182 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %3, i64 0, i32 3
  %183 = load i32, i32* %182, align 4
  %184 = icmp sgt i32 %183, 0
  %185 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %3, i64 0, i32 5
  %186 = load i32, i32* %185, align 4
  %187 = icmp sgt i32 %186, 0
  %188 = sext i32 %180 to i64
  %189 = sext i32 %183 to i64
  %190 = sext i32 %186 to i64
  br label %191

191:                                              ; preds = %223, %178
  %192 = phi i32 [ 0, %178 ], [ %224, %223 ]
  br i1 %181, label %195, label %201

193:                                              ; preds = %195
  %194 = icmp eq i64 %200, %188
  br i1 %194, label %201, label %195

195:                                              ; preds = %191, %193
  %196 = phi i64 [ %200, %193 ], [ 0, %191 ]
  %197 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %3, i64 0, i32 0, i64 %196
  %198 = load i32, i32* %197, align 4
  %199 = icmp eq i32 %198, %192
  %200 = add nuw nsw i64 %196, 1
  br i1 %199, label %201, label %193

201:                                              ; preds = %195, %193, %191
  %202 = phi i32 [ 1, %191 ], [ 1, %193 ], [ 0, %195 ]
  br i1 %184, label %205, label %211

203:                                              ; preds = %205
  %204 = icmp eq i64 %210, %189
  br i1 %204, label %211, label %205

205:                                              ; preds = %201, %203
  %206 = phi i64 [ %210, %203 ], [ 0, %201 ]
  %207 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %3, i64 0, i32 2, i64 %206
  %208 = load i32, i32* %207, align 4
  %209 = icmp eq i32 %208, %192
  %210 = add nuw nsw i64 %206, 1
  br i1 %209, label %211, label %203

211:                                              ; preds = %205, %203, %201
  %212 = phi i32 [ %202, %201 ], [ %202, %203 ], [ 0, %205 ]
  br i1 %187, label %215, label %221

213:                                              ; preds = %215
  %214 = icmp eq i64 %220, %190
  br i1 %214, label %221, label %215

215:                                              ; preds = %211, %213
  %216 = phi i64 [ %220, %213 ], [ 0, %211 ]
  %217 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %3, i64 0, i32 4, i64 %216
  %218 = load i32, i32* %217, align 4
  %219 = icmp eq i32 %218, %192
  %220 = add nuw nsw i64 %216, 1
  br i1 %219, label %223, label %213

221:                                              ; preds = %213, %211
  %222 = icmp eq i32 %212, 0
  br i1 %222, label %223, label %226

223:                                              ; preds = %215, %221
  %224 = add nuw nsw i32 %192, 1
  %225 = icmp eq i32 %224, 8
  br i1 %225, label %226, label %191

226:                                              ; preds = %221, %223
  %227 = phi i32 [ %192, %221 ], [ -1, %223 ]
  switch i8 %2, label %300 [
    i8 0, label %228
    i8 2, label %228
    i8 1, label %246
    i8 3, label %266
    i8 6, label %286
    i8 4, label %296
  ]

228:                                              ; preds = %226, %226
  %229 = icmp eq i32 %227, -1
  br i1 %229, label %232, label %230

230:                                              ; preds = %228
  %231 = shl i32 1, %227
  br label %300

232:                                              ; preds = %228
  %233 = icmp eq i32 %186, 0
  br i1 %233, label %240, label %234

234:                                              ; preds = %232
  %235 = add nsw i32 %186, -1
  %236 = sext i32 %235 to i64
  %237 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %3, i64 0, i32 4, i64 %236
  %238 = load i32, i32* %237, align 4
  %239 = shl i32 1, %238
  br label %300

240:                                              ; preds = %232
  %241 = add nsw i32 %183, -1
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %3, i64 0, i32 2, i64 %242
  %244 = load i32, i32* %243, align 4
  %245 = shl i32 1, %244
  br label %300

246:                                              ; preds = %226
  %247 = icmp eq i32 %227, -1
  br i1 %247, label %250, label %248

248:                                              ; preds = %246
  %249 = shl i32 1, %227
  br label %300

250:                                              ; preds = %246
  %251 = icmp sgt i32 %183, 1
  br i1 %251, label %252, label %258

252:                                              ; preds = %250
  %253 = add nsw i32 %183, -1
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %3, i64 0, i32 2, i64 %254
  %256 = load i32, i32* %255, align 4
  %257 = shl i32 1, %256
  br label %300

258:                                              ; preds = %250
  %259 = icmp sgt i32 %186, 1
  br i1 %259, label %260, label %300

260:                                              ; preds = %258
  %261 = add nsw i32 %186, -1
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %3, i64 0, i32 4, i64 %262
  %264 = load i32, i32* %263, align 4
  %265 = shl i32 1, %264
  br label %300

266:                                              ; preds = %226
  %267 = icmp eq i32 %227, -1
  br i1 %267, label %270, label %268

268:                                              ; preds = %266
  %269 = shl i32 1, %227
  br label %300

270:                                              ; preds = %266
  %271 = icmp sgt i32 %186, 2
  br i1 %271, label %272, label %278

272:                                              ; preds = %270
  %273 = add nsw i32 %186, -1
  %274 = sext i32 %273 to i64
  %275 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %3, i64 0, i32 4, i64 %274
  %276 = load i32, i32* %275, align 4
  %277 = shl i32 1, %276
  br label %300

278:                                              ; preds = %270
  %279 = icmp sgt i32 %183, 1
  br i1 %279, label %280, label %300

280:                                              ; preds = %278
  %281 = add nsw i32 %183, -1
  %282 = sext i32 %281 to i64
  %283 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %3, i64 0, i32 2, i64 %282
  %284 = load i32, i32* %283, align 4
  %285 = shl i32 1, %284
  br label %300

286:                                              ; preds = %226
  %287 = icmp eq i32 %227, -1
  br i1 %287, label %290, label %288

288:                                              ; preds = %286
  %289 = shl i32 1, %227
  br label %300

290:                                              ; preds = %286
  %291 = add nsw i32 %183, -1
  %292 = sext i32 %291 to i64
  %293 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %3, i64 0, i32 2, i64 %292
  %294 = load i32, i32* %293, align 4
  %295 = shl i32 1, %294
  br label %300

296:                                              ; preds = %226
  %297 = icmp eq i32 %227, -1
  %298 = shl i32 1, %227
  %299 = select i1 %297, i32 0, i32 %298
  ret i32 %299

300:                                              ; preds = %64, %147, %167, %172, %151, %226, %288, %290, %268, %280, %278, %272, %248, %260, %258, %252, %230, %240, %234, %56, %19, %13, %9
  %301 = phi i32 [ 255, %9 ], [ 255, %13 ], [ 0, %19 ], [ 0, %56 ], [ %156, %151 ], [ %145, %147 ], [ %177, %172 ], [ %168, %167 ], [ 0, %226 ], [ %289, %288 ], [ %295, %290 ], [ %269, %268 ], [ %277, %272 ], [ %285, %280 ], [ 0, %278 ], [ %249, %248 ], [ %257, %252 ], [ %265, %260 ], [ 0, %258 ], [ %231, %230 ], [ %239, %234 ], [ %245, %240 ], [ %112, %64 ]
  ret i32 %301
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_get_ref_frames(%struct.RefBufferStack* nocapture readonly, i32*) local_unnamed_addr #0 {
  %3 = bitcast i32* %1 to i8*
  %4 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %0, i64 0, i32 2, i64 0
  %5 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %0, i64 0, i32 5
  %10 = load i32, i32* %9, align 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 -1, i64 32, i1 false)
  %11 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %0, i64 0, i32 0, i64 0
  %12 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %0, i64 0, i32 4, i64 0
  %13 = icmp ne i32 %6, 0
  br i1 %13, label %14, label %29

14:                                               ; preds = %2
  %15 = add nsw i32 %6, -1
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %0, i64 0, i32 0, i64 %16
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds i32, i32* %1, i64 6
  store i32 %18, i32* %19, align 4
  %20 = icmp sgt i32 %6, 1
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = load i32, i32* %11, align 4
  %23 = getelementptr inbounds i32, i32* %1, i64 4
  store i32 %22, i32* %23, align 4
  %24 = icmp eq i32 %6, 2
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %0, i64 0, i32 0, i64 1
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds i32, i32* %1, i64 5
  store i32 %27, i32* %28, align 4
  br label %29

29:                                               ; preds = %21, %14, %25, %2
  %30 = phi i32 [ %18, %21 ], [ %18, %14 ], [ %18, %25 ], [ -1, %2 ]
  %31 = icmp eq i32 %8, 0
  br i1 %31, label %39, label %32

32:                                               ; preds = %29
  %33 = load i32, i32* %4, align 4
  store i32 %33, i32* %1, align 4
  %34 = icmp sgt i32 %8, 1
  br i1 %34, label %35, label %39

35:                                               ; preds = %32
  %36 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %0, i64 0, i32 2, i64 1
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %37, i32* %38, align 4
  br label %39

39:                                               ; preds = %29, %32, %35
  %40 = icmp eq i32 %10, 0
  br i1 %40, label %64, label %41

41:                                               ; preds = %39
  %42 = load i32, i32* %12, align 4
  %43 = getelementptr inbounds i32, i32* %1, i64 3
  store i32 %42, i32* %43, align 4
  %44 = icmp sgt i32 %10, 1
  br i1 %44, label %45, label %64

45:                                               ; preds = %41
  %46 = icmp slt i32 %6, 3
  br i1 %46, label %47, label %60

47:                                               ; preds = %45
  %48 = icmp eq i32 %6, 2
  %49 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %0, i64 0, i32 4, i64 1
  %50 = load i32, i32* %49, align 4
  br i1 %48, label %58, label %51

51:                                               ; preds = %47
  %52 = getelementptr inbounds i32, i32* %1, i64 4
  store i32 %50, i32* %52, align 4
  %53 = icmp sgt i32 %10, 2
  br i1 %53, label %54, label %64

54:                                               ; preds = %51
  %55 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %0, i64 0, i32 4, i64 2
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds i32, i32* %1, i64 5
  store i32 %56, i32* %57, align 4
  br label %64

58:                                               ; preds = %47
  %59 = getelementptr inbounds i32, i32* %1, i64 5
  store i32 %50, i32* %59, align 4
  br label %64

60:                                               ; preds = %45
  %61 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %0, i64 0, i32 4, i64 1
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds i32, i32* %1, i64 2
  store i32 %62, i32* %63, align 4
  br label %64

64:                                               ; preds = %39, %41, %58, %54, %51, %60
  %65 = icmp sgt i32 %6, 0
  %66 = zext i32 %6 to i64
  %67 = getelementptr inbounds i32, i32* %1, i64 6
  %68 = getelementptr inbounds i32, i32* %1, i64 1
  %69 = getelementptr inbounds i32, i32* %1, i64 2
  %70 = getelementptr inbounds i32, i32* %1, i64 3
  %71 = getelementptr inbounds i32, i32* %1, i64 4
  %72 = getelementptr inbounds i32, i32* %1, i64 5
  %73 = icmp sgt i32 %10, 0
  %74 = zext i32 %10 to i64
  %75 = icmp sgt i32 %8, 0
  %76 = zext i32 %8 to i64
  %77 = and i1 %13, %40
  br label %79

78:                                               ; preds = %184
  ret void

79:                                               ; preds = %187, %64
  %80 = phi i32 [ %30, %64 ], [ %189, %187 ]
  %81 = phi i64 [ 6, %64 ], [ %185, %187 ]
  %82 = getelementptr inbounds i32, i32* %1, i64 %81
  %83 = icmp eq i32 %80, -1
  br i1 %83, label %84, label %184

84:                                               ; preds = %79
  br i1 %65, label %85, label %115

85:                                               ; preds = %84
  %86 = load i32, i32* %1, align 4
  br label %87

87:                                               ; preds = %95, %85
  %88 = phi i64 [ 0, %85 ], [ %96, %95 ]
  %89 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %0, i64 0, i32 0, i64 %88
  %90 = load i32, i32* %89, align 4
  %91 = icmp eq i32 %90, %86
  br i1 %91, label %95, label %92

92:                                               ; preds = %87
  %93 = load i32, i32* %68, align 4
  %94 = icmp eq i32 %90, %93
  br i1 %94, label %95, label %98

95:                                               ; preds = %110, %107, %104, %101, %98, %92, %87
  %96 = add nuw nsw i64 %88, 1
  %97 = icmp eq i64 %96, %66
  br i1 %97, label %115, label %87

98:                                               ; preds = %92
  %99 = load i32, i32* %69, align 4
  %100 = icmp eq i32 %90, %99
  br i1 %100, label %95, label %101

101:                                              ; preds = %98
  %102 = load i32, i32* %70, align 4
  %103 = icmp eq i32 %90, %102
  br i1 %103, label %95, label %104

104:                                              ; preds = %101
  %105 = load i32, i32* %71, align 4
  %106 = icmp eq i32 %90, %105
  br i1 %106, label %95, label %107

107:                                              ; preds = %104
  %108 = load i32, i32* %72, align 4
  %109 = icmp eq i32 %90, %108
  br i1 %109, label %95, label %110

110:                                              ; preds = %107
  %111 = load i32, i32* %67, align 4
  %112 = icmp eq i32 %90, %111
  br i1 %112, label %95, label %113

113:                                              ; preds = %110
  %114 = icmp eq i32 %90, -1
  br i1 %114, label %115, label %182

115:                                              ; preds = %95, %84, %113
  br i1 %73, label %116, label %146

116:                                              ; preds = %115
  %117 = load i32, i32* %1, align 4
  br label %118

118:                                              ; preds = %126, %116
  %119 = phi i64 [ 0, %116 ], [ %127, %126 ]
  %120 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %0, i64 0, i32 4, i64 %119
  %121 = load i32, i32* %120, align 4
  %122 = icmp eq i32 %121, %117
  br i1 %122, label %126, label %123

123:                                              ; preds = %118
  %124 = load i32, i32* %68, align 4
  %125 = icmp eq i32 %121, %124
  br i1 %125, label %126, label %129

126:                                              ; preds = %141, %138, %135, %132, %129, %123, %118
  %127 = add nuw nsw i64 %119, 1
  %128 = icmp eq i64 %127, %74
  br i1 %128, label %146, label %118

129:                                              ; preds = %123
  %130 = load i32, i32* %69, align 4
  %131 = icmp eq i32 %121, %130
  br i1 %131, label %126, label %132

132:                                              ; preds = %129
  %133 = load i32, i32* %70, align 4
  %134 = icmp eq i32 %121, %133
  br i1 %134, label %126, label %135

135:                                              ; preds = %132
  %136 = load i32, i32* %71, align 4
  %137 = icmp eq i32 %121, %136
  br i1 %137, label %126, label %138

138:                                              ; preds = %135
  %139 = load i32, i32* %72, align 4
  %140 = icmp eq i32 %121, %139
  br i1 %140, label %126, label %141

141:                                              ; preds = %138
  %142 = load i32, i32* %67, align 4
  %143 = icmp eq i32 %121, %142
  br i1 %143, label %126, label %144

144:                                              ; preds = %141
  %145 = icmp eq i32 %121, -1
  br i1 %145, label %146, label %182

146:                                              ; preds = %126, %115, %144
  br i1 %75, label %147, label %177

147:                                              ; preds = %146
  %148 = load i32, i32* %1, align 4
  br label %149

149:                                              ; preds = %157, %147
  %150 = phi i64 [ 0, %147 ], [ %158, %157 ]
  %151 = getelementptr inbounds %struct.RefBufferStack, %struct.RefBufferStack* %0, i64 0, i32 2, i64 %150
  %152 = load i32, i32* %151, align 4
  %153 = icmp eq i32 %152, %148
  br i1 %153, label %157, label %154

154:                                              ; preds = %149
  %155 = load i32, i32* %68, align 4
  %156 = icmp eq i32 %152, %155
  br i1 %156, label %157, label %160

157:                                              ; preds = %172, %169, %166, %163, %160, %154, %149
  %158 = add nuw nsw i64 %150, 1
  %159 = icmp eq i64 %158, %76
  br i1 %159, label %177, label %149

160:                                              ; preds = %154
  %161 = load i32, i32* %69, align 4
  %162 = icmp eq i32 %152, %161
  br i1 %162, label %157, label %163

163:                                              ; preds = %160
  %164 = load i32, i32* %70, align 4
  %165 = icmp eq i32 %152, %164
  br i1 %165, label %157, label %166

166:                                              ; preds = %163
  %167 = load i32, i32* %71, align 4
  %168 = icmp eq i32 %152, %167
  br i1 %168, label %157, label %169

169:                                              ; preds = %166
  %170 = load i32, i32* %72, align 4
  %171 = icmp eq i32 %152, %170
  br i1 %171, label %157, label %172

172:                                              ; preds = %169
  %173 = load i32, i32* %67, align 4
  %174 = icmp eq i32 %152, %173
  br i1 %174, label %157, label %175

175:                                              ; preds = %172
  %176 = icmp eq i32 %152, -1
  br i1 %176, label %177, label %182

177:                                              ; preds = %157, %146, %175
  br i1 %77, label %178, label %180

178:                                              ; preds = %177
  %179 = load i32, i32* %11, align 4
  br label %182

180:                                              ; preds = %177
  %181 = load i32, i32* %12, align 4
  br label %182

182:                                              ; preds = %175, %144, %113, %178, %180
  %183 = phi i32 [ %181, %180 ], [ %179, %178 ], [ %152, %175 ], [ %121, %144 ], [ %90, %113 ]
  store i32 %183, i32* %82, align 4
  br label %184

184:                                              ; preds = %182, %79
  %185 = add nsw i64 %81, -1
  %186 = icmp eq i64 %81, 0
  br i1 %186, label %78, label %187

187:                                              ; preds = %184
  %188 = getelementptr inbounds i32, i32* %1, i64 %185
  %189 = load i32, i32* %188, align 4
  br label %79
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_encode_strategy(%struct.AV1_COMP*, i64* nocapture, i8*, i32* nocapture, i64* nocapture, i64* nocapture, %struct.aom_rational64* nocapture readonly, i32) local_unnamed_addr #2 {
  %9 = alloca %struct.EncodeFrameInput, align 8
  %10 = alloca %struct.EncodeFrameParams, align 4
  %11 = alloca %struct.EncodeFrameResults, align 8
  %12 = alloca [7 x %struct.yv12_buffer_config*], align 16
  %13 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8
  %14 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %15 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %14, align 16
  %16 = bitcast %struct.EncodeFrameInput* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #6
  %17 = getelementptr inbounds %struct.EncodeFrameInput, %struct.EncodeFrameInput* %9, i64 0, i32 0
  %18 = getelementptr inbounds %struct.EncodeFrameInput, %struct.EncodeFrameInput* %9, i64 0, i32 1
  %19 = getelementptr inbounds %struct.EncodeFrameInput, %struct.EncodeFrameInput* %9, i64 0, i32 2
  %20 = bitcast %struct.EncodeFrameParams* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 76, i8* nonnull %20) #6
  %21 = bitcast %struct.EncodeFrameResults* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #6
  %22 = getelementptr inbounds %struct.EncodeFrameResults, %struct.EncodeFrameResults* %11, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 24, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %20, i8 0, i64 76, i1 false)
  store i64 0, i64* %22, align 8
  %23 = icmp eq i32 %7, 0
  br i1 %23, label %24, label %38

24:                                               ; preds = %8
  %25 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %15, i64 0, i32 2
  %26 = load %struct.lookahead_ctx*, %struct.lookahead_ctx** %25, align 8
  %27 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 76
  %28 = load i8, i8* %27, align 8
  %29 = tail call i32 @av1_lookahead_depth(%struct.lookahead_ctx* %26, i8 zeroext %28) #6
  %30 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %14, align 16
  %31 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %30, i64 0, i32 2
  %32 = load %struct.lookahead_ctx*, %struct.lookahead_ctx** %31, align 8
  %33 = load i8, i8* %27, align 8
  %34 = tail call i32 @av1_lookahead_pop_sz(%struct.lookahead_ctx* %32, i8 zeroext %33) #6
  %35 = icmp slt i32 %29, %34
  br i1 %35, label %1117, label %36

36:                                               ; preds = %24
  %37 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %14, align 16
  br label %38

38:                                               ; preds = %36, %8
  %39 = phi %struct.AV1_PRIMARY* [ %37, %36 ], [ %15, %8 ]
  %40 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %39, i64 0, i32 2
  %41 = load %struct.lookahead_ctx*, %struct.lookahead_ctx** %40, align 8
  %42 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 76
  %43 = load i8, i8* %42, align 8
  %44 = tail call %struct.lookahead_entry* @av1_lookahead_peek(%struct.lookahead_ctx* %41, i32 0, i8 zeroext %43) #6
  %45 = icmp eq %struct.lookahead_entry* %44, null
  br i1 %45, label %1117, label %46

46:                                               ; preds = %38
  %47 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 33
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %66

50:                                               ; preds = %46
  %51 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %14, align 16
  %52 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %51, i64 0, i32 8
  %53 = load i32, i32* %52, align 8
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %64

55:                                               ; preds = %50
  %56 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 10, i32 4
  %57 = load i32, i32* %56, align 4
  %58 = icmp slt i32 %57, 1
  %59 = select i1 %58, i32 %57, i32 1
  store i32 %59, i32* %56, align 4
  %60 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 10, i32 3
  %61 = load i32, i32* %60, align 4
  %62 = icmp slt i32 %61, %59
  %63 = select i1 %62, i32 %61, i32 %59
  store i32 %63, i32* %60, align 4
  br label %64

64:                                               ; preds = %50, %55
  %65 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 19
  store i32 0, i32* %65, align 16
  br label %69

66:                                               ; preds = %46
  %67 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 19
  store i32 0, i32* %67, align 16
  %68 = icmp eq i32 %48, 1
  br i1 %68, label %157, label %69

69:                                               ; preds = %66, %64
  %70 = load i8, i8* %42, align 8
  %71 = icmp eq i8 %70, 1
  br i1 %71, label %157, label %72

72:                                               ; preds = %69
  %73 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 3, i32 6
  %74 = load i8, i8* %73, align 1, !range !2
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %87, label %76

76:                                               ; preds = %72
  %77 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 46
  %78 = load i8, i8* %77, align 16
  %79 = zext i8 %78 to i64
  %80 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %15, i64 0, i32 6, i32 0, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = icmp eq i8 %81, 4
  br i1 %82, label %83, label %87

83:                                               ; preds = %76
  %84 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 14
  %85 = load i32, i32* %84, align 16
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %101, label %87

87:                                               ; preds = %72, %83, %76
  %88 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 48
  %89 = load i32, i32* %88, align 16
  %90 = icmp ne i32 %89, 0
  %91 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 46
  %92 = load i8, i8* %91, align 16
  %93 = zext i8 %92 to i64
  %94 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %15, i64 0, i32 6, i32 0, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = icmp eq i8 %95, 4
  %97 = and i1 %90, %96
  %98 = icmp eq i8 %95, 5
  %99 = or i1 %97, %98
  %100 = zext i1 %99 to i32
  br label %101

101:                                              ; preds = %83, %87
  %102 = phi i32 [ %100, %87 ], [ 1, %83 ]
  %103 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 6
  store i32 %102, i32* %103, align 4
  %104 = load i32, i32* %3, align 4
  %105 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 4
  %106 = load i32, i32* %105, align 4
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %145, label %108

108:                                              ; preds = %101
  %109 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %14, align 16
  %110 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %109, i64 0, i32 2
  %111 = load %struct.lookahead_ctx*, %struct.lookahead_ctx** %110, align 8
  %112 = tail call %struct.lookahead_entry* @av1_lookahead_peek(%struct.lookahead_ctx* %111, i32 0, i8 zeroext %70) #6
  %113 = icmp eq %struct.lookahead_entry* %112, null
  br i1 %113, label %145, label %114

114:                                              ; preds = %108
  %115 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 9, i32 6
  %116 = load i8, i8* %115, align 4, !range !2
  %117 = icmp eq i8 %116, 0
  br i1 %117, label %118, label %123

118:                                              ; preds = %114
  %119 = getelementptr inbounds %struct.lookahead_entry, %struct.lookahead_entry* %112, i64 0, i32 4
  %120 = load i64, i64* %119, align 8
  %121 = and i64 %120, 268435456
  %122 = icmp ne i64 %121, 0
  br label %123

123:                                              ; preds = %118, %114
  %124 = phi i1 [ true, %114 ], [ %122, %118 ]
  %125 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 3, i32 7
  %126 = load i8, i8* %125, align 2, !range !2
  %127 = icmp eq i8 %126, 0
  br i1 %127, label %128, label %133

128:                                              ; preds = %123
  %129 = getelementptr inbounds %struct.lookahead_entry, %struct.lookahead_entry* %112, i64 0, i32 4
  %130 = load i64, i64* %129, align 8
  %131 = and i64 %130, 536870912
  %132 = icmp ne i64 %131, 0
  br label %133

133:                                              ; preds = %128, %123
  %134 = phi i1 [ true, %123 ], [ %132, %128 ]
  %135 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 14
  %136 = load i32, i32* %135, align 16
  %137 = icmp eq i32 %136, 0
  %138 = and i32 %104, 1
  %139 = icmp ne i32 %138, 0
  %140 = or i1 %139, %137
  %141 = or i1 %124, %134
  %142 = xor i1 %141, true
  %143 = or i1 %140, %142
  %144 = zext i1 %143 to i32
  br label %145

145:                                              ; preds = %101, %108, %133
  %146 = phi i32 [ 0, %101 ], [ %144, %133 ], [ 1, %108 ]
  %147 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 6
  %148 = and i32 %102, %146
  store i32 %148, i32* %147, align 4
  %149 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 46
  %150 = load i8, i8* %149, align 16
  %151 = zext i8 %150 to i64
  %152 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %15, i64 0, i32 6, i32 0, i64 %151
  %153 = load i8, i8* %152, align 1
  %154 = icmp eq i8 %153, 4
  br i1 %154, label %155, label %161

155:                                              ; preds = %145
  %156 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 48
  store i32 0, i32* %156, align 16
  br label %161

157:                                              ; preds = %66, %69
  %158 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 6
  store i32 0, i32* %158, align 4
  %159 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 6
  %160 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %14, align 16
  br label %171

161:                                              ; preds = %145, %155
  %162 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 6
  %163 = icmp eq i32 %148, 0
  %164 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %14, align 16
  br i1 %163, label %171, label %165

165:                                              ; preds = %161
  %166 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %164, i64 0, i32 2
  %167 = load %struct.lookahead_ctx*, %struct.lookahead_ctx** %166, align 8
  %168 = load i8, i8* %42, align 8
  %169 = tail call %struct.lookahead_entry* @av1_lookahead_peek(%struct.lookahead_ctx* %167, i32 0, i8 zeroext %168) #6
  %170 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 4
  store i32 1, i32* %170, align 4
  br label %289

171:                                              ; preds = %157, %161
  %172 = phi %struct.AV1_PRIMARY* [ %160, %157 ], [ %164, %161 ]
  %173 = phi i32* [ %159, %157 ], [ %162, %161 ]
  %174 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 46
  %175 = load i8, i8* %174, align 16
  %176 = zext i8 %175 to i64
  %177 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %172, i64 0, i32 6, i32 1, i64 %176
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i32
  %180 = icmp eq i8 %178, 0
  br i1 %180, label %206, label %181

181:                                              ; preds = %171
  %182 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %172, i64 0, i32 2
  %183 = load %struct.lookahead_ctx*, %struct.lookahead_ctx** %182, align 8
  %184 = load i8, i8* %42, align 8
  br label %185

185:                                              ; preds = %193, %181
  %186 = phi i32 [ %194, %193 ], [ 0, %181 ]
  %187 = tail call %struct.lookahead_entry* @av1_lookahead_peek(%struct.lookahead_ctx* %183, i32 %186, i8 zeroext %184) #6
  %188 = icmp eq %struct.lookahead_entry* %187, null
  br i1 %188, label %240, label %189

189:                                              ; preds = %185
  %190 = getelementptr inbounds %struct.lookahead_entry, %struct.lookahead_entry* %187, i64 0, i32 4
  %191 = load i64, i64* %190, align 8
  %192 = icmp eq i64 %191, 1
  br i1 %192, label %196, label %193

193:                                              ; preds = %189
  %194 = add nuw nsw i32 %186, 1
  %195 = icmp eq i32 %186, %179
  br i1 %195, label %240, label %185

196:                                              ; preds = %189
  %197 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 15
  %198 = load i32, i32* %197, align 4
  %199 = icmp eq i32 %198, 3
  br i1 %199, label %240, label %200

200:                                              ; preds = %196
  %201 = load i32, i32* %47, align 4
  %202 = icmp eq i32 %201, 1
  br i1 %202, label %249, label %203

203:                                              ; preds = %200
  %204 = load i8, i8* %42, align 8
  %205 = icmp eq i8 %204, 1
  br i1 %205, label %249, label %206

206:                                              ; preds = %203, %171
  %207 = phi i32 [ %7, %171 ], [ 1, %203 ]
  %208 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 3, i32 2
  %209 = load i32, i32* %208, align 4
  %210 = icmp sgt i32 %209, 1
  br i1 %210, label %211, label %240

211:                                              ; preds = %206
  %212 = load i8, i8* %174, align 16
  %213 = zext i8 %212 to i64
  %214 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %172, i64 0, i32 6, i32 0, i64 %213
  %215 = load i8, i8* %214, align 1
  %216 = icmp eq i8 %215, 3
  br i1 %216, label %217, label %240

217:                                              ; preds = %211
  %218 = load i32, i32* %47, align 4
  %219 = icmp eq i32 %218, 1
  br i1 %219, label %249, label %220

220:                                              ; preds = %217
  %221 = load i8, i8* %42, align 8
  %222 = icmp eq i8 %221, 1
  br i1 %222, label %249, label %223

223:                                              ; preds = %220
  %224 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %14, align 16
  %225 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %224, i64 0, i32 2
  %226 = load %struct.lookahead_ctx*, %struct.lookahead_ctx** %225, align 8
  %227 = icmp eq %struct.lookahead_ctx* %226, null
  br i1 %227, label %240, label %228

228:                                              ; preds = %223
  %229 = zext i8 %221 to i64
  %230 = getelementptr inbounds %struct.lookahead_ctx, %struct.lookahead_ctx* %226, i64 0, i32 2, i64 %229, i32 0
  %231 = load i32, i32* %230, align 8
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %240, label %233

233:                                              ; preds = %228
  %234 = icmp eq i32 %207, 0
  br i1 %234, label %235, label %239

235:                                              ; preds = %233
  %236 = getelementptr inbounds %struct.lookahead_ctx, %struct.lookahead_ctx* %226, i64 0, i32 2, i64 %229, i32 2
  %237 = load i32, i32* %236, align 8
  %238 = icmp eq i32 %231, %237
  br i1 %238, label %239, label %240

239:                                              ; preds = %235, %233
  br label %240

240:                                              ; preds = %185, %193, %196, %239, %235, %228, %223, %211, %206
  %241 = phi i32 [ %7, %196 ], [ %207, %206 ], [ %207, %211 ], [ 0, %235 ], [ %207, %239 ], [ %207, %228 ], [ %207, %223 ], [ %7, %193 ], [ %7, %185 ]
  %242 = phi i32 [ 0, %196 ], [ 1, %206 ], [ 1, %211 ], [ 1, %235 ], [ 0, %239 ], [ 1, %228 ], [ 1, %223 ], [ 0, %193 ], [ 0, %185 ]
  %243 = phi i32 [ %179, %196 ], [ 0, %206 ], [ 0, %211 ], [ 0, %235 ], [ 0, %239 ], [ 0, %228 ], [ 0, %223 ], [ %179, %193 ], [ %179, %185 ]
  %244 = load i32, i32* %47, align 4
  %245 = icmp eq i32 %244, 1
  br i1 %245, label %249, label %246

246:                                              ; preds = %240
  %247 = load i8, i8* %42, align 8
  %248 = icmp eq i8 %247, 1
  br i1 %248, label %249, label %252

249:                                              ; preds = %203, %220, %240, %246, %200, %217
  %250 = phi i32 [ %241, %246 ], [ %241, %240 ], [ %7, %200 ], [ %207, %217 ], [ %207, %220 ], [ %7, %203 ]
  %251 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 4
  store i32 1, i32* %251, align 4
  br label %255

252:                                              ; preds = %246
  %253 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 4
  store i32 %242, i32* %253, align 4
  %254 = icmp eq i32 %242, 0
  br i1 %254, label %273, label %255

255:                                              ; preds = %249, %252
  %256 = phi i32 [ %250, %249 ], [ %241, %252 ]
  %257 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 4
  %258 = load i32, i32* %257, align 4
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %266, label %260

260:                                              ; preds = %255
  %261 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %14, align 16
  %262 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %261, i64 0, i32 2
  %263 = load %struct.lookahead_ctx*, %struct.lookahead_ctx** %262, align 8
  %264 = load i8, i8* %42, align 8
  %265 = tail call %struct.lookahead_entry* @av1_lookahead_peek(%struct.lookahead_ctx* %263, i32 -1, i8 zeroext %264) #6
  br label %266

266:                                              ; preds = %260, %255
  %267 = phi %struct.lookahead_entry* [ null, %255 ], [ %265, %260 ]
  %268 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %14, align 16
  %269 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %268, i64 0, i32 2
  %270 = load %struct.lookahead_ctx*, %struct.lookahead_ctx** %269, align 8
  %271 = load i8, i8* %42, align 8
  %272 = tail call %struct.lookahead_entry* @av1_lookahead_peek(%struct.lookahead_ctx* %270, i32 0, i8 zeroext %271) #6
  br label %289

273:                                              ; preds = %252
  %274 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %14, align 16
  %275 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %274, i64 0, i32 2
  %276 = load %struct.lookahead_ctx*, %struct.lookahead_ctx** %275, align 8
  %277 = tail call %struct.lookahead_entry* @av1_lookahead_peek(%struct.lookahead_ctx* %276, i32 %243, i8 zeroext %247) #6
  %278 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 14
  %279 = load i32, i32* %278, align 16
  %280 = icmp eq i32 %243, %279
  %281 = icmp ne i32 %243, 0
  %282 = and i1 %281, %280
  br i1 %282, label %283, label %285

283:                                              ; preds = %273
  %284 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 10
  store i32 1, i32* %284, align 8
  br label %285

285:                                              ; preds = %283, %273
  %286 = icmp eq %struct.lookahead_entry* %277, null
  br i1 %286, label %1117, label %287

287:                                              ; preds = %285
  %288 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 18
  store i32 1, i32* %288, align 4
  br label %296

289:                                              ; preds = %266, %165
  %290 = phi i1 [ false, %165 ], [ true, %266 ]
  %291 = phi i32* [ %162, %165 ], [ %173, %266 ]
  %292 = phi i32 [ %7, %165 ], [ %256, %266 ]
  %293 = phi %struct.lookahead_entry* [ null, %165 ], [ %267, %266 ]
  %294 = phi %struct.lookahead_entry* [ %169, %165 ], [ %272, %266 ]
  %295 = icmp eq %struct.lookahead_entry* %294, null
  br i1 %295, label %1117, label %296

296:                                              ; preds = %287, %289
  %297 = phi i1 [ true, %287 ], [ %290, %289 ]
  %298 = phi i32* [ %173, %287 ], [ %291, %289 ]
  %299 = phi i32 [ 0, %287 ], [ 1, %289 ]
  %300 = phi %struct.lookahead_entry* [ %277, %287 ], [ %294, %289 ]
  %301 = phi %struct.lookahead_entry* [ null, %287 ], [ %293, %289 ]
  %302 = phi i32 [ %241, %287 ], [ %292, %289 ]
  %303 = getelementptr inbounds %struct.lookahead_entry, %struct.lookahead_entry* %300, i64 0, i32 0
  store %struct.yv12_buffer_config* %303, %struct.yv12_buffer_config** %17, align 8
  %304 = getelementptr inbounds %struct.lookahead_entry, %struct.lookahead_entry* %301, i64 0, i32 0
  store %struct.yv12_buffer_config* %304, %struct.yv12_buffer_config** %18, align 8
  %305 = getelementptr inbounds %struct.lookahead_entry, %struct.lookahead_entry* %300, i64 0, i32 2
  %306 = load i64, i64* %305, align 8
  %307 = getelementptr inbounds %struct.lookahead_entry, %struct.lookahead_entry* %300, i64 0, i32 1
  %308 = load i64, i64* %307, align 8
  %309 = sub nsw i64 %306, %308
  store i64 %309, i64* %19, align 8
  %310 = ptrtoint %struct.lookahead_entry* %300 to i64
  %311 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 18
  %312 = bitcast %struct.yv12_buffer_config** %311 to i64*
  store i64 %310, i64* %312, align 8
  %313 = load i64, i64* %307, align 8
  store i64 %313, i64* %4, align 8
  %314 = load i64, i64* %305, align 8
  store i64 %314, i64* %5, align 8
  %315 = load i64, i64* %307, align 8
  %316 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 35, i32 2
  %317 = load i64, i64* %316, align 8
  %318 = icmp slt i64 %315, %317
  br i1 %318, label %319, label %322

319:                                              ; preds = %296
  store i64 %315, i64* %316, align 8
  %320 = load i64, i64* %307, align 8
  %321 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 35, i32 1
  store i64 %320, i64* %321, align 8
  br label %322

322:                                              ; preds = %319, %296
  %323 = getelementptr inbounds %struct.lookahead_entry, %struct.lookahead_entry* %300, i64 0, i32 4
  %324 = load i64, i64* %323, align 8
  tail call void @av1_apply_encoding_flags(%struct.AV1_COMP* %0, i64 %324) #6
  %325 = load i64, i64* %323, align 8
  %326 = trunc i64 %325 to i32
  %327 = and i32 %326, 1
  store i32 %327, i32* %3, align 4
  %328 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 4
  %329 = icmp eq i32 %299, 0
  br i1 %329, label %397, label %330

330:                                              ; preds = %322
  %331 = load i64, i64* %307, align 8
  %332 = load i64, i64* %305, align 8
  %333 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 35
  %334 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %14, align 16
  %335 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %334, i64 0, i32 16
  %336 = load i32, i32* %335, align 8
  %337 = icmp eq i32 %336, 0
  br i1 %337, label %352, label %338

338:                                              ; preds = %330
  %339 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 0
  %340 = load i32, i32* %339, align 16
  %341 = icmp sgt i32 %340, 0
  br i1 %341, label %342, label %352

342:                                              ; preds = %338
  %343 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 11
  %344 = bitcast double* %343 to i64*
  %345 = load i64, i64* %344, align 8
  %346 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 37
  %347 = bitcast double* %346 to i64*
  store i64 %345, i64* %347, align 16
  %348 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %349 = load i32, i32* %348, align 16
  %350 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %351 = load i32, i32* %350, align 4
  tail call void @av1_rc_update_framerate(%struct.AV1_COMP* %0, i32 %349, i32 %351) #6
  br label %397

352:                                              ; preds = %338, %330
  %353 = load i64, i64* %316, align 8
  %354 = icmp eq i64 %353, %331
  br i1 %354, label %355, label %357

355:                                              ; preds = %352
  %356 = sub nsw i64 %332, %331
  br label %370

357:                                              ; preds = %352
  %358 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 35, i32 1
  %359 = load i64, i64* %358, align 8
  %360 = getelementptr inbounds %struct.TimeStamps, %struct.TimeStamps* %333, i64 0, i32 0
  %361 = load i64, i64* %360, align 8
  %362 = sub nsw i64 %359, %361
  %363 = sub nsw i64 %332, %359
  %364 = icmp eq i64 %362, 0
  br i1 %364, label %370, label %365

365:                                              ; preds = %357
  %366 = sub nsw i64 %363, %362
  %367 = mul nsw i64 %366, 10
  %368 = sdiv i64 %367, %362
  %369 = trunc i64 %368 to i32
  br label %370

370:                                              ; preds = %365, %357, %355
  %371 = phi i64 [ %356, %355 ], [ %363, %357 ], [ %363, %365 ]
  %372 = phi i32 [ 1, %355 ], [ 0, %357 ], [ %369, %365 ]
  %373 = icmp eq i64 %371, 0
  br i1 %373, label %394, label %374

374:                                              ; preds = %370
  %375 = icmp eq i32 %372, 0
  br i1 %375, label %378, label %376

376:                                              ; preds = %374
  %377 = sitofp i64 %371 to double
  br label %391

378:                                              ; preds = %374
  %379 = sub nsw i64 %332, %353
  %380 = icmp slt i64 %379, 10000000
  %381 = select i1 %380, i64 %379, i64 10000000
  %382 = sitofp i64 %381 to double
  %383 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 37
  %384 = load double, double* %383, align 16
  %385 = fdiv double 1.000000e+07, %384
  %386 = fsub double %382, %385
  %387 = sitofp i64 %371 to double
  %388 = fadd double %386, %387
  %389 = fmul double %385, %388
  %390 = fdiv double %389, %382
  br label %391

391:                                              ; preds = %376, %378
  %392 = phi double [ %390, %378 ], [ %377, %376 ]
  %393 = fdiv double 1.000000e+07, %392
  tail call void @av1_new_framerate(%struct.AV1_COMP* %0, double %393) #6
  br label %394

394:                                              ; preds = %391, %370
  %395 = getelementptr inbounds %struct.TimeStamps, %struct.TimeStamps* %333, i64 0, i32 0
  store i64 %331, i64* %395, align 8
  %396 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 35, i32 1
  store i64 %332, i64* %396, align 8
  br label %397

397:                                              ; preds = %394, %342, %322
  br i1 %297, label %398, label %435

398:                                              ; preds = %397
  %399 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 66
  %400 = load %struct.aom_film_grain_table_t*, %struct.aom_film_grain_table_t** %399, align 16
  %401 = icmp eq %struct.aom_film_grain_table_t* %400, null
  br i1 %401, label %408, label %402

402:                                              ; preds = %398
  %403 = load i64, i64* %4, align 8
  %404 = load i64, i64* %5, align 8
  %405 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 32
  %406 = tail call i32 @aom_film_grain_table_lookup(%struct.aom_film_grain_table_t* nonnull %400, i64 %403, i64 %404, i32 0, %struct.aom_film_grain_t* %405) #6
  %407 = trunc i32 %406 to i8
  br label %413

408:                                              ; preds = %398
  %409 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 35
  %410 = load %struct.SequenceHeader*, %struct.SequenceHeader** %409, align 16
  %411 = getelementptr inbounds %struct.SequenceHeader, %struct.SequenceHeader* %410, i64 0, i32 36
  %412 = load i8, i8* %411, align 1
  br label %413

413:                                              ; preds = %408, %402
  %414 = phi i8 [ %412, %408 ], [ %407, %402 ]
  %415 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 12
  %416 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %415, align 16
  %417 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %416, i64 0, i32 14
  store i8 %414, i8* %417, align 8
  %418 = load i64, i64* %4, align 8
  %419 = getelementptr inbounds %struct.aom_rational64, %struct.aom_rational64* %6, i64 0, i32 0
  %420 = load i64, i64* %419, align 8
  %421 = sdiv i64 %420, 2
  %422 = icmp sgt i64 %420, 1
  %423 = zext i1 %422 to i64
  %424 = sub nsw i64 %421, %423
  %425 = getelementptr inbounds %struct.aom_rational64, %struct.aom_rational64* %6, i64 0, i32 1
  %426 = load i32, i32* %425, align 8
  %427 = sext i32 %426 to i64
  %428 = mul nsw i64 %418, %427
  %429 = add nsw i64 %424, %428
  %430 = sdiv i64 %429, %420
  %431 = icmp ugt i64 %430, 4294967295
  br i1 %431, label %1117, label %432

432:                                              ; preds = %413
  %433 = trunc i64 %430 to i32
  %434 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 10
  store i32 %433, i32* %434, align 16
  br label %435

435:                                              ; preds = %432, %397
  %436 = load i32, i32* %3, align 4
  call void @av1_get_one_pass_rt_params(%struct.AV1_COMP* %0, %struct.EncodeFrameParams* nonnull %10, i32 %436) #6
  %437 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 30
  %438 = load i32, i32* %437, align 4
  %439 = icmp sgt i32 %438, 4
  br i1 %439, label %440, label %454

440:                                              ; preds = %435
  %441 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %14, align 16
  %442 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %441, i64 0, i32 19
  %443 = load i32, i32* %442, align 4
  %444 = icmp eq i32 %443, 1
  br i1 %444, label %445, label %454

445:                                              ; preds = %440
  %446 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %441, i64 0, i32 18
  %447 = load i32, i32* %446, align 8
  %448 = icmp eq i32 %447, 1
  br i1 %448, label %449, label %454

449:                                              ; preds = %445
  %450 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 46
  %451 = load i8, i8* %450, align 16
  %452 = icmp eq i8 %451, 0
  %453 = zext i1 %452 to i32
  call void @av1_set_reference_structure_one_pass_rt(%struct.AV1_COMP* %0, i32 %453) #6
  br label %454

454:                                              ; preds = %449, %445, %440, %435
  %455 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 46
  %456 = load i8, i8* %455, align 16
  %457 = zext i8 %456 to i64
  %458 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %15, i64 0, i32 6, i32 0, i64 %457
  %459 = load i8, i8* %458, align 1
  %460 = load i32, i32* %298, align 4
  %461 = icmp eq i32 %460, 0
  br i1 %461, label %467, label %462

462:                                              ; preds = %454
  %463 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 1
  %464 = load i8, i8* %463, align 4
  %465 = icmp eq i8 %464, 0
  br i1 %465, label %467, label %466

466:                                              ; preds = %462
  store i8 1, i8* %463, align 4
  br label %467

467:                                              ; preds = %462, %454, %466
  %468 = load i32, i32* %437, align 4
  %469 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 11
  store i32 %468, i32* %469, align 4
  %470 = load i32, i32* %47, align 4
  switch i32 %470, label %482 [
    i32 0, label %471
    i32 1, label %485
  ]

471:                                              ; preds = %467
  %472 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %14, align 16
  %473 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %472, i64 0, i32 8
  %474 = load i32, i32* %473, align 8
  %475 = icmp eq i32 %474, 0
  br i1 %475, label %476, label %482

476:                                              ; preds = %471
  %477 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 5, i32 5
  %478 = load i8, i8* %477, align 8
  %479 = icmp eq i8 %478, 3
  br i1 %479, label %480, label %482

480:                                              ; preds = %476
  call void @av1_cyclic_refresh_update_parameters(%struct.AV1_COMP* %0) #6
  %481 = load i32, i32* %47, align 4
  br label %518

482:                                              ; preds = %471, %467, %476
  %483 = load i8, i8* %42, align 8
  %484 = icmp eq i8 %483, 1
  br i1 %484, label %485, label %524

485:                                              ; preds = %482, %467
  %486 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 13
  %487 = load i32, i32* %486, align 4
  %488 = icmp eq i32 %487, 0
  br i1 %488, label %489, label %494

489:                                              ; preds = %485
  %490 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 12
  %491 = load i32, i32* %490, align 8
  %492 = icmp eq i32 %491, 0
  %493 = zext i1 %492 to i32
  br label %494

494:                                              ; preds = %485, %489
  %495 = phi i32 [ 0, %485 ], [ %493, %489 ]
  %496 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 2, i32 42, i64 0
  store i32 %495, i32* %496, align 4
  %497 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 4
  %498 = load i32, i32* %497, align 4
  %499 = icmp eq i32 %498, 0
  br i1 %499, label %511, label %500

500:                                              ; preds = %494
  %501 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 3, i32 1
  %502 = load i32, i32* %501, align 4
  %503 = icmp eq i32 %502, 0
  br i1 %503, label %511, label %504

504:                                              ; preds = %500
  %505 = load i32, i32* %3, align 4
  %506 = and i32 %505, 1
  %507 = icmp eq i32 %506, 0
  %508 = or i8 %459, 1
  %509 = icmp eq i8 %508, 5
  %510 = or i1 %509, %507
  br i1 %510, label %516, label %514

511:                                              ; preds = %494, %500
  %512 = and i8 %459, -2
  %513 = icmp eq i8 %512, 4
  br i1 %513, label %516, label %514

514:                                              ; preds = %511, %504
  %515 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 1
  store i8 0, i8* %515, align 4
  br label %518

516:                                              ; preds = %511, %504
  %517 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 1
  store i8 1, i8* %517, align 4
  br label %518

518:                                              ; preds = %514, %516, %480
  %519 = phi i32 [ %470, %514 ], [ %470, %516 ], [ %481, %480 ]
  %520 = icmp eq i32 %519, 1
  br i1 %520, label %554, label %521

521:                                              ; preds = %518
  %522 = load i8, i8* %42, align 8
  %523 = icmp eq i8 %522, 1
  br i1 %523, label %554, label %524

524:                                              ; preds = %482, %521
  %525 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 6
  %526 = load i8, i8* %525, align 2, !range !2
  %527 = icmp eq i8 %526, 0
  br i1 %527, label %530, label %528

528:                                              ; preds = %524
  %529 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 1
  store i8 3, i8* %529, align 4
  br label %530

530:                                              ; preds = %528, %524
  %531 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 3
  %532 = load i8, i8* %531, align 1, !range !2
  %533 = icmp eq i8 %532, 0
  br i1 %533, label %538, label %534

534:                                              ; preds = %530
  %535 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 2
  %536 = load i8, i8* %535, align 2, !range !2
  %537 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 16
  store i8 %536, i8* %537, align 4
  store i8 0, i8* %531, align 1
  br label %538

538:                                              ; preds = %530, %534
  %539 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 4
  %540 = load i8, i8* %539, align 4, !range !2
  %541 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 6
  store i8 %540, i8* %541, align 2
  %542 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 5
  %543 = load i8, i8* %542, align 1, !range !2
  %544 = zext i8 %543 to i32
  %545 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 0
  %546 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 1
  %547 = load i8, i8* %546, align 4
  %548 = icmp ne i8 %547, 0
  %549 = zext i1 %548 to i32
  %550 = and i32 %549, %544
  %551 = icmp eq i8 %547, 3
  %552 = zext i1 %551 to i32
  %553 = or i32 %550, %552
  store i32 %553, i32* %545, align 4
  br label %554

554:                                              ; preds = %521, %518, %538
  %555 = phi i1 [ false, %521 ], [ true, %518 ], [ false, %538 ]
  %556 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 1
  %557 = load i8, i8* %556, align 4
  %558 = icmp eq i8 %557, 0
  %559 = load i32, i32* %328, align 4
  %560 = icmp ne i32 %559, 0
  %561 = and i1 %558, %560
  %562 = icmp eq i8 %557, 3
  %563 = or i1 %562, %561
  br i1 %563, label %564, label %567

564:                                              ; preds = %554
  %565 = load i32, i32* %298, align 4
  %566 = icmp eq i32 %565, 0
  br label %567

567:                                              ; preds = %554, %564
  %568 = phi i1 [ %566, %564 ], [ false, %554 ]
  %569 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 10
  %570 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 16
  store i32 0, i32* %570, align 8
  switch i8 %459, label %615 [
    i8 0, label %571
    i8 1, label %575
    i8 2, label %579
    i8 4, label %583
    i8 3, label %594
    i8 5, label %607
    i8 6, label %611
  ]

571:                                              ; preds = %567
  %572 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %569, i64 0, i32 0
  store i8 1, i8* %572, align 4
  %573 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 10, i32 1
  store i8 1, i8* %573, align 1
  %574 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 10, i32 2
  store i8 1, i8* %574, align 2
  br label %615

575:                                              ; preds = %567
  %576 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %569, i64 0, i32 0
  store i8 0, i8* %576, align 4
  %577 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 10, i32 1
  store i8 0, i8* %577, align 1
  %578 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 10, i32 2
  store i8 0, i8* %578, align 2
  br label %615

579:                                              ; preds = %567
  %580 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %569, i64 0, i32 0
  store i8 1, i8* %580, align 4
  %581 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 10, i32 1
  store i8 0, i8* %581, align 1
  %582 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 10, i32 2
  store i8 0, i8* %582, align 2
  br label %615

583:                                              ; preds = %567
  br i1 %558, label %584, label %588

584:                                              ; preds = %583
  %585 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 14
  %586 = load i32, i32* %585, align 16
  %587 = icmp eq i32 %586, 0
  br i1 %587, label %589, label %588

588:                                              ; preds = %584, %583
  br label %589

589:                                              ; preds = %584, %588
  %590 = phi i8 [ 0, %588 ], [ 1, %584 ]
  %591 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %569, i64 0, i32 0
  store i8 1, i8* %591, align 4
  %592 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 10, i32 1
  store i8 %590, i8* %592, align 1
  %593 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 10, i32 2
  store i8 %590, i8* %593, align 2
  store i32 1, i32* %570, align 8
  br label %615

594:                                              ; preds = %567
  br i1 %558, label %595, label %603

595:                                              ; preds = %594
  %596 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 10
  %597 = load i32, i32* %596, align 8
  %598 = icmp eq i32 %597, 0
  br i1 %598, label %599, label %603

599:                                              ; preds = %595
  %600 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %569, i64 0, i32 0
  store i8 1, i8* %600, align 4
  %601 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 10, i32 1
  store i8 1, i8* %601, align 1
  %602 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 10, i32 2
  store i8 1, i8* %602, align 2
  br label %615

603:                                              ; preds = %595, %594
  %604 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %569, i64 0, i32 0
  store i8 0, i8* %604, align 4
  %605 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 10, i32 1
  store i8 0, i8* %605, align 1
  %606 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 10, i32 2
  store i8 1, i8* %606, align 2
  br label %615

607:                                              ; preds = %567
  %608 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %569, i64 0, i32 0
  store i8 0, i8* %608, align 4
  %609 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 10, i32 1
  store i8 0, i8* %609, align 1
  %610 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 10, i32 2
  store i8 0, i8* %610, align 2
  store i32 1, i32* %570, align 8
  br label %615

611:                                              ; preds = %567
  %612 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %569, i64 0, i32 0
  store i8 0, i8* %612, align 4
  %613 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 10, i32 1
  store i8 1, i8* %613, align 1
  %614 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 10, i32 2
  store i8 0, i8* %614, align 2
  br label %615

615:                                              ; preds = %611, %607, %603, %599, %589, %579, %575, %571, %567
  %616 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 5
  %617 = load i8, i8* %616, align 1, !range !2
  %618 = icmp eq i8 %617, 0
  %619 = or i1 %555, %618
  br i1 %619, label %633, label %620

620:                                              ; preds = %615
  %621 = load i8, i8* %42, align 8
  %622 = icmp eq i8 %621, 1
  br i1 %622, label %633, label %623

623:                                              ; preds = %620
  %624 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 1
  %625 = load i8, i8* %624, align 1, !range !2
  %626 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 2
  %627 = load i8, i8* %626, align 1, !range !2
  %628 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 4
  %629 = load i8, i8* %628, align 1, !range !2
  %630 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %569, i64 0, i32 0
  store i8 %625, i8* %630, align 4
  %631 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 10, i32 1
  store i8 %627, i8* %631, align 1
  %632 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 10, i32 2
  store i8 %629, i8* %632, align 2
  br label %633

633:                                              ; preds = %615, %623, %620
  br i1 %568, label %634, label %638

634:                                              ; preds = %633
  %635 = getelementptr inbounds %struct.RefreshFrameFlagsInfo, %struct.RefreshFrameFlagsInfo* %569, i64 0, i32 0
  store i8 1, i8* %635, align 4
  %636 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 10, i32 1
  store i8 1, i8* %636, align 1
  %637 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 10, i32 2
  store i8 1, i8* %637, align 2
  br label %638

638:                                              ; preds = %633, %634
  br i1 %555, label %806, label %639

639:                                              ; preds = %638
  %640 = load i8, i8* %42, align 8
  %641 = icmp eq i8 %640, 1
  br i1 %641, label %806, label %642

642:                                              ; preds = %639
  %643 = bitcast [7 x %struct.yv12_buffer_config*]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %643) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %643, i8 -86, i64 56, i1 false)
  br i1 %618, label %644, label %647

644:                                              ; preds = %642
  %645 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 47
  %646 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 0
  call void @av1_get_ref_frames(%struct.RefBufferStack* %645, i32* %646)
  br label %789

647:                                              ; preds = %642
  %648 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 4
  %649 = load i32, i32* %648, align 16
  %650 = icmp eq i32 %649, 0
  br i1 %650, label %789, label %651

651:                                              ; preds = %647
  %652 = getelementptr %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 0
  %653 = bitcast i32* %652 to i8*
  %654 = getelementptr %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 9, i64 0
  %655 = bitcast i32* %654 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %653, i8* align 4 %655, i64 28, i1 false)
  br label %789

656:                                              ; preds = %1197
  %657 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 8
  %658 = load i32, i32* %657, align 8
  %659 = add nsw i32 %658, 1
  %660 = icmp sgt i32 %658, -1
  br i1 %660, label %661, label %675

661:                                              ; preds = %656, %1197
  %662 = phi i32 [ %659, %656 ], [ 3, %1197 ]
  %663 = zext i32 %662 to i64
  %664 = icmp eq %struct.yv12_buffer_config* %1162, %1123
  br i1 %664, label %673, label %665

665:                                              ; preds = %661, %668
  %666 = phi i64 [ %672, %668 ], [ 1, %661 ]
  %667 = icmp eq i64 %666, %663
  br i1 %667, label %675, label %668

668:                                              ; preds = %665
  %669 = getelementptr inbounds [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*]* %12, i64 0, i64 %666
  %670 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %669, align 8
  %671 = icmp eq %struct.yv12_buffer_config* %1162, %670
  %672 = add nuw nsw i64 %666, 1
  br i1 %671, label %673, label %665

673:                                              ; preds = %668, %661
  %674 = and i32 %1215, -9
  br label %675

675:                                              ; preds = %665, %673, %656
  %676 = phi i32 [ %674, %673 ], [ %1215, %656 ], [ %1215, %665 ]
  %677 = icmp eq %struct.yv12_buffer_config* %1175, %1123
  %678 = icmp eq %struct.yv12_buffer_config* %1175, %1136
  %679 = or i1 %677, %678
  %680 = icmp eq %struct.yv12_buffer_config* %1175, %1149
  %681 = or i1 %679, %680
  %682 = icmp eq %struct.yv12_buffer_config* %1175, %1162
  %683 = or i1 %681, %682
  %684 = and i32 %676, -33
  %685 = select i1 %683, i32 %684, i32 %676
  %686 = icmp eq %struct.yv12_buffer_config* %1188, %1123
  %687 = icmp eq %struct.yv12_buffer_config* %1188, %1136
  %688 = or i1 %686, %687
  %689 = icmp eq %struct.yv12_buffer_config* %1188, %1149
  %690 = or i1 %688, %689
  %691 = icmp eq %struct.yv12_buffer_config* %1188, %1162
  %692 = or i1 %690, %691
  %693 = icmp eq %struct.yv12_buffer_config* %1188, %1175
  %694 = or i1 %692, %693
  %695 = and i32 %685, -3
  %696 = select i1 %694, i32 %695, i32 %685
  %697 = icmp eq %struct.yv12_buffer_config* %1201, %1123
  %698 = icmp eq %struct.yv12_buffer_config* %1201, %1136
  %699 = or i1 %697, %698
  %700 = icmp eq %struct.yv12_buffer_config* %1201, %1149
  %701 = or i1 %699, %700
  %702 = icmp eq %struct.yv12_buffer_config* %1201, %1162
  %703 = or i1 %701, %702
  %704 = icmp eq %struct.yv12_buffer_config* %1201, %1175
  %705 = or i1 %703, %704
  %706 = icmp eq %struct.yv12_buffer_config* %1201, %1188
  %707 = or i1 %705, %706
  %708 = and i32 %696, -5
  %709 = select i1 %707, i32 %708, i32 %696
  %710 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 8
  store i32 %709, i32* %710, align 4
  %711 = load i8, i8* %556, align 4
  %712 = and i8 %711, -3
  %713 = icmp eq i8 %712, 0
  br i1 %713, label %775, label %714

714:                                              ; preds = %675
  %715 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 0
  %716 = load i32, i32* %715, align 4
  %717 = icmp eq i32 %716, 0
  br i1 %717, label %718, label %775

718:                                              ; preds = %714
  %719 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 7
  %720 = load i8, i8* %719, align 1, !range !2
  %721 = icmp eq i8 %720, 0
  br i1 %721, label %722, label %775

722:                                              ; preds = %718
  %723 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 38, i32 17
  %724 = load i32, i32* %723, align 4
  %725 = icmp eq i32 %724, 0
  br i1 %725, label %726, label %775

726:                                              ; preds = %722
  %727 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %14, align 16
  %728 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %727, i64 0, i32 16
  %729 = load i32, i32* %728, align 8
  %730 = icmp eq i32 %729, 0
  br i1 %730, label %733, label %731

731:                                              ; preds = %726
  %732 = call i32 @av1_svc_primary_ref_frame(%struct.AV1_COMP* %0) #6
  br label %775

733:                                              ; preds = %726
  %734 = load i8, i8* %455, align 16
  %735 = zext i8 %734 to i64
  %736 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %727, i64 0, i32 6, i32 3, i64 %735
  %737 = load i32, i32* %736, align 4
  %738 = icmp ult i32 %737, 8
  br i1 %738, label %739, label %743

739:                                              ; preds = %733
  %740 = sext i32 %737 to i64
  %741 = getelementptr inbounds [8 x i64], [8 x i64]* @switch.table.av1_encode_strategy.1, i64 0, i64 %740
  %742 = load i64, i64* %741, align 8
  br label %743

743:                                              ; preds = %733, %739
  %744 = phi i64 [ %742, %739 ], [ 7, %733 ]
  %745 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 26, i64 %744
  %746 = load i32, i32* %745, align 4
  %747 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 0
  %748 = load i32, i32* %747, align 4
  %749 = icmp eq i32 %748, %746
  %750 = select i1 %749, i32 0, i32 7
  %751 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 1
  %752 = load i32, i32* %751, align 4
  %753 = icmp eq i32 %752, %746
  %754 = select i1 %753, i32 1, i32 %750
  %755 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 2
  %756 = load i32, i32* %755, align 4
  %757 = icmp eq i32 %756, %746
  %758 = select i1 %757, i32 2, i32 %754
  %759 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 3
  %760 = load i32, i32* %759, align 4
  %761 = icmp eq i32 %760, %746
  %762 = select i1 %761, i32 3, i32 %758
  %763 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 4
  %764 = load i32, i32* %763, align 4
  %765 = icmp eq i32 %764, %746
  %766 = select i1 %765, i32 4, i32 %762
  %767 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 5
  %768 = load i32, i32* %767, align 4
  %769 = icmp eq i32 %768, %746
  %770 = select i1 %769, i32 5, i32 %766
  %771 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 6
  %772 = load i32, i32* %771, align 4
  %773 = icmp eq i32 %772, %746
  %774 = select i1 %773, i32 6, i32 %770
  br label %775

775:                                              ; preds = %675, %714, %718, %722, %731, %743
  %776 = phi i32 [ %732, %731 ], [ 7, %718 ], [ 7, %714 ], [ 7, %675 ], [ 0, %722 ], [ %774, %743 ]
  %777 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 2
  store i32 %776, i32* %777, align 4
  %778 = load i8, i8* %455, align 16
  %779 = zext i8 %778 to i64
  %780 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %15, i64 0, i32 6, i32 1, i64 %779
  %781 = load i8, i8* %780, align 1
  %782 = zext i8 %781 to i32
  %783 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 3
  store i32 %782, i32* %783, align 4
  %784 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 47
  %785 = call i32 @av1_get_refresh_frame_flags(%struct.AV1_COMP* %0, %struct.EncodeFrameParams* nonnull %10, i8 zeroext %459, %struct.RefBufferStack* %784)
  %786 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 5
  store i32 %785, i32* %786, align 4
  %787 = load i32, i32* %298, align 4
  %788 = icmp eq i32 %787, 0
  br i1 %788, label %803, label %797

789:                                              ; preds = %644, %647, %651
  %790 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 0
  %791 = load i32, i32* %790, align 4
  %792 = icmp eq i32 %791, -1
  br i1 %792, label %1119, label %793

793:                                              ; preds = %789
  %794 = sext i32 %791 to i64
  %795 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %794
  %796 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %795, align 8
  br label %1119

797:                                              ; preds = %775
  %798 = icmp eq i8 %459, 5
  %799 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 4
  %800 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 6
  %801 = select i1 %798, i32* %799, i32* %800
  %802 = load i32, i32* %801, align 4
  br label %803

803:                                              ; preds = %797, %775
  %804 = phi i32 [ -1, %775 ], [ %802, %797 ]
  %805 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 7
  store i32 %804, i32* %805, align 4
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %643) #6
  br label %806

806:                                              ; preds = %639, %638, %803
  %807 = getelementptr inbounds %struct.EncodeFrameParams, %struct.EncodeFrameParams* %10, i64 0, i32 9, i64 0
  %808 = bitcast i32* %807 to i8*
  %809 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 0
  %810 = bitcast i32* %809 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %808, i8* align 8 %810, i64 32, i1 false)
  %811 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 3, i32 0, i32 16
  store i32 0, i32* %811, align 4
  %812 = load i32, i32* %298, align 4
  %813 = icmp eq i32 %812, 0
  br i1 %813, label %814, label %818

814:                                              ; preds = %806
  %815 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 5, i32 8
  %816 = load i8, i8* %815, align 1, !range !2
  %817 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 22, i32 14
  store i8 %816, i8* %817, align 8
  br label %818

818:                                              ; preds = %806, %814
  %819 = call i32 @av1_encode(%struct.AV1_COMP* %0, i8* %2, %struct.EncodeFrameInput* nonnull %9, %struct.EncodeFrameParams* nonnull %10, %struct.EncodeFrameResults* nonnull %11) #6
  %820 = icmp eq i32 %819, 0
  br i1 %820, label %821, label %1117

821:                                              ; preds = %818
  %822 = load i32, i32* %47, align 4
  %823 = icmp eq i32 %822, 1
  br i1 %823, label %906, label %824

824:                                              ; preds = %821
  %825 = load i8, i8* %42, align 8
  %826 = icmp eq i8 %825, 1
  br i1 %826, label %906, label %827

827:                                              ; preds = %824
  %828 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 19
  %829 = load i32, i32* %828, align 16
  %830 = icmp eq i32 %829, 0
  br i1 %830, label %842, label %831

831:                                              ; preds = %827
  %832 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 10
  %833 = load i8, i8* %832, align 2, !range !2
  %834 = icmp eq i8 %833, 0
  br i1 %834, label %839, label %835

835:                                              ; preds = %831
  %836 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %13, i64 0, i32 0, i32 0
  %837 = load i8, i8* %836, align 16
  %838 = icmp eq i8 %837, 0
  br i1 %838, label %839, label %842

839:                                              ; preds = %835, %831
  %840 = load i32, i32* %3, align 4
  %841 = and i32 %840, -16
  br label %869

842:                                              ; preds = %835, %827
  %843 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 25, i32 0
  %844 = load i8, i8* %843, align 1, !range !2
  %845 = icmp eq i8 %844, 0
  %846 = load i32, i32* %3, align 4
  %847 = and i32 %846, -3
  %848 = or i32 %846, 2
  %849 = select i1 %845, i32 %847, i32 %848
  store i32 %849, i32* %3, align 4
  %850 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 25, i32 2
  %851 = load i8, i8* %850, align 1, !range !2
  %852 = icmp eq i8 %851, 0
  %853 = and i32 %849, -9
  %854 = or i32 %849, 8
  %855 = select i1 %852, i32 %853, i32 %854
  store i32 %855, i32* %3, align 4
  %856 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 25, i32 1
  %857 = load i8, i8* %856, align 1, !range !2
  %858 = icmp eq i8 %857, 0
  %859 = and i32 %855, -5
  %860 = or i32 %855, 4
  %861 = select i1 %858, i32 %859, i32 %860
  store i32 %861, i32* %3, align 4
  %862 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %13, i64 0, i32 0, i32 0
  %863 = load i8, i8* %862, align 16
  %864 = icmp eq i8 %863, 0
  br i1 %864, label %865, label %867

865:                                              ; preds = %842
  %866 = or i32 %861, 1
  br label %869

867:                                              ; preds = %842
  %868 = and i32 %861, -2
  br label %869

869:                                              ; preds = %839, %865, %867
  %870 = phi i32 [ %841, %839 ], [ %866, %865 ], [ %868, %867 ]
  store i32 %870, i32* %3, align 4
  %871 = load i8, i8* %616, align 1, !range !2
  %872 = icmp eq i8 %871, 0
  br i1 %872, label %873, label %906

873:                                              ; preds = %869
  %874 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 6
  %875 = load i32, i32* %874, align 16
  %876 = and i32 %875, 1
  %877 = icmp eq i32 %876, 0
  br i1 %877, label %878, label %881

878:                                              ; preds = %873
  %879 = and i32 %875, 2
  %880 = icmp eq i32 %879, 0
  br i1 %880, label %883, label %881

881:                                              ; preds = %898, %895, %892, %889, %886, %883, %878, %873
  %882 = phi i32 [ 7, %898 ], [ 6, %895 ], [ 5, %892 ], [ 4, %889 ], [ 3, %886 ], [ 2, %883 ], [ 1, %878 ], [ 0, %873 ]
  br label %901

883:                                              ; preds = %878
  %884 = and i32 %875, 4
  %885 = icmp eq i32 %884, 0
  br i1 %885, label %886, label %881

886:                                              ; preds = %883
  %887 = and i32 %875, 8
  %888 = icmp eq i32 %887, 0
  br i1 %888, label %889, label %881

889:                                              ; preds = %886
  %890 = and i32 %875, 16
  %891 = icmp eq i32 %890, 0
  br i1 %891, label %892, label %881

892:                                              ; preds = %889
  %893 = and i32 %875, 32
  %894 = icmp eq i32 %893, 0
  br i1 %894, label %895, label %881

895:                                              ; preds = %892
  %896 = and i32 %875, 64
  %897 = icmp eq i32 %896, 0
  br i1 %897, label %898, label %881

898:                                              ; preds = %895
  %899 = trunc i32 %875 to i8
  %900 = icmp sgt i8 %899, -1
  br i1 %900, label %901, label %881

901:                                              ; preds = %881, %898
  %902 = phi i32 [ %882, %881 ], [ -1, %898 ]
  %903 = load i8, i8* %556, align 4
  %904 = load i32, i32* %828, align 16
  %905 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 47
  call void @av1_update_ref_frame_map(%struct.AV1_COMP* %0, i8 zeroext %459, i8 zeroext %903, i32 %904, i32 %902, %struct.RefBufferStack* %905)
  br label %906

906:                                              ; preds = %824, %821, %869, %901
  %907 = icmp eq i32 %299, 1
  br i1 %907, label %908, label %914

908:                                              ; preds = %906
  %909 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %14, align 16
  %910 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %909, i64 0, i32 2
  %911 = load %struct.lookahead_ctx*, %struct.lookahead_ctx** %910, align 8
  %912 = load i8, i8* %42, align 8
  %913 = call %struct.lookahead_entry* @av1_lookahead_pop(%struct.lookahead_ctx* %911, i32 %302, i8 zeroext %912) #6
  br label %914

914:                                              ; preds = %908, %906
  %915 = load i32, i32* %47, align 4
  %916 = icmp eq i32 %915, 1
  br i1 %916, label %1074, label %917

917:                                              ; preds = %914
  %918 = load i8, i8* %42, align 8
  %919 = icmp eq i8 %918, 1
  br i1 %919, label %1074, label %920

920:                                              ; preds = %917
  %921 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 26, i64 0
  %922 = bitcast i32* %921 to i8*
  %923 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %14, align 16
  %924 = load i8, i8* %455, align 16
  %925 = zext i8 %924 to i64
  %926 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %923, i64 0, i32 6, i32 3, i64 %925
  %927 = load i32, i32* %926, align 4
  %928 = icmp ult i32 %927, 8
  br i1 %928, label %929, label %933

929:                                              ; preds = %920
  %930 = sext i32 %927 to i64
  %931 = getelementptr inbounds [8 x i64], [8 x i64]* @switch.table.av1_encode_strategy.1, i64 0, i64 %930
  %932 = load i64, i64* %931, align 8
  br label %933

933:                                              ; preds = %920, %929
  %934 = phi i64 [ %932, %929 ], [ 7, %920 ]
  %935 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 0
  %936 = load i8, i8* %935, align 16
  %937 = and i8 %936, -3
  %938 = icmp eq i8 %937, 0
  br i1 %938, label %947, label %939

939:                                              ; preds = %933
  %940 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 10
  %941 = load i8, i8* %940, align 2, !range !2
  %942 = icmp eq i8 %941, 0
  br i1 %942, label %943, label %947

943:                                              ; preds = %939
  %944 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 7
  %945 = load i8, i8* %944, align 1, !range !2
  %946 = icmp eq i8 %945, 0
  br i1 %946, label %956, label %947

947:                                              ; preds = %943, %939, %933
  call void @llvm.memset.p0i8.i64(i8* align 4 %922, i8 -1, i64 32, i1 false) #6
  %948 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 17
  %949 = load i32, i32* %948, align 8
  %950 = icmp eq i32 %949, 0
  %951 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 3
  %952 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 6
  %953 = select i1 %950, i32* %952, i32* %951
  %954 = load i32, i32* %953, align 4
  %955 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 26, i64 %934
  store i32 %954, i32* %955, align 4
  br label %956

956:                                              ; preds = %947, %943
  %957 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 19
  %958 = load i32, i32* %957, align 16
  %959 = icmp eq i32 %958, 0
  br i1 %959, label %966, label %960

960:                                              ; preds = %956
  %961 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 10
  %962 = load i8, i8* %961, align 2, !range !2
  %963 = icmp eq i8 %962, 0
  %964 = icmp eq i8 %936, 0
  %965 = or i1 %964, %963
  br i1 %965, label %999, label %968

966:                                              ; preds = %956
  %967 = icmp eq i8 %936, 0
  br i1 %967, label %973, label %968

968:                                              ; preds = %960, %966
  %969 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 6
  %970 = load i32, i32* %969, align 16
  %971 = and i32 %970, 1
  %972 = icmp eq i32 %971, 0
  br i1 %972, label %978, label %975

973:                                              ; preds = %966
  %974 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 26, i64 %934
  store i32 0, i32* %974, align 4
  br label %999

975:                                              ; preds = %996, %993, %990, %987, %984, %981, %978, %968
  %976 = phi i32 [ 0, %968 ], [ 1, %978 ], [ 2, %981 ], [ 3, %984 ], [ 4, %987 ], [ 5, %990 ], [ 6, %993 ], [ 7, %996 ]
  %977 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 26, i64 %934
  store i32 %976, i32* %977, align 4
  br label %999

978:                                              ; preds = %968
  %979 = and i32 %970, 2
  %980 = icmp eq i32 %979, 0
  br i1 %980, label %981, label %975

981:                                              ; preds = %978
  %982 = and i32 %970, 4
  %983 = icmp eq i32 %982, 0
  br i1 %983, label %984, label %975

984:                                              ; preds = %981
  %985 = and i32 %970, 8
  %986 = icmp eq i32 %985, 0
  br i1 %986, label %987, label %975

987:                                              ; preds = %984
  %988 = and i32 %970, 16
  %989 = icmp eq i32 %988, 0
  br i1 %989, label %990, label %975

990:                                              ; preds = %987
  %991 = and i32 %970, 32
  %992 = icmp eq i32 %991, 0
  br i1 %992, label %993, label %975

993:                                              ; preds = %990
  %994 = and i32 %970, 64
  %995 = icmp eq i32 %994, 0
  br i1 %995, label %996, label %975

996:                                              ; preds = %993
  %997 = trunc i32 %970 to i8
  %998 = icmp sgt i8 %997, -1
  br i1 %998, label %999, label %975

999:                                              ; preds = %960, %973, %975, %996
  br i1 %938, label %1000, label %1005

1000:                                             ; preds = %999
  %1001 = getelementptr inbounds %struct.AV1Common, %struct.AV1Common* %13, i64 0, i32 0, i32 0
  %1002 = load i32, i32* %3, align 4
  %1003 = or i32 %1002, 16
  store i32 %1003, i32* %3, align 4
  %1004 = load i8, i8* %1001, align 16
  br label %1005

1005:                                             ; preds = %1000, %999
  %1006 = phi i8 [ %936, %999 ], [ %1004, %1000 ]
  %1007 = icmp eq i8 %1006, 3
  br i1 %1007, label %1008, label %1011

1008:                                             ; preds = %1005
  %1009 = load i32, i32* %3, align 4
  %1010 = or i32 %1009, 32
  store i32 %1010, i32* %3, align 4
  br label %1011

1011:                                             ; preds = %1008, %1005
  %1012 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 20, i32 10
  %1013 = load i8, i8* %1012, align 2, !range !2
  %1014 = icmp eq i8 %1013, 0
  br i1 %1014, label %1018, label %1015

1015:                                             ; preds = %1011
  %1016 = load i32, i32* %3, align 4
  %1017 = or i32 %1016, 64
  store i32 %1017, i32* %3, align 4
  br label %1018

1018:                                             ; preds = %1011, %1015
  %1019 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 17
  %1020 = load i32, i32* %1019, align 8
  %1021 = icmp eq i32 %1020, 0
  br i1 %1021, label %1031, label %1022

1022:                                             ; preds = %1018
  %1023 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 14
  %1024 = load i32, i32* %1023, align 16
  %1025 = icmp eq i32 %1024, 0
  br i1 %1025, label %1065, label %1026

1026:                                             ; preds = %1022
  %1027 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 15
  %1028 = load i32, i32* %1027, align 4
  %1029 = add nsw i32 %1028, 1
  store i32 %1029, i32* %1027, align 4
  %1030 = add nsw i32 %1024, -1
  store i32 %1030, i32* %1023, align 16
  br label %1065

1031:                                             ; preds = %1018
  %1032 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 4
  %1033 = load i32, i32* %1032, align 8
  %1034 = icmp eq i32 %1033, 0
  br i1 %1034, label %1038, label %1035

1035:                                             ; preds = %1031
  %1036 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 5
  %1037 = load i32, i32* %1036, align 4
  br label %1062

1038:                                             ; preds = %1031
  %1039 = load i8, i8* %616, align 1, !range !2
  %1040 = icmp eq i8 %1039, 0
  br i1 %1040, label %1071, label %1041

1041:                                             ; preds = %1038
  %1042 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 4
  %1043 = load i8, i8* %1042, align 1, !range !2
  %1044 = icmp eq i8 %1043, 0
  br i1 %1044, label %1045, label %1071

1045:                                             ; preds = %1041
  %1046 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 3
  %1047 = load i8, i8* %1046, align 1, !range !2
  %1048 = icmp eq i8 %1047, 0
  br i1 %1048, label %1049, label %1071

1049:                                             ; preds = %1045
  %1050 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 2
  %1051 = load i8, i8* %1050, align 1, !range !2
  %1052 = icmp eq i8 %1051, 0
  br i1 %1052, label %1053, label %1071

1053:                                             ; preds = %1049
  %1054 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 1
  %1055 = load i8, i8* %1054, align 1, !range !2
  %1056 = icmp eq i8 %1055, 0
  br i1 %1056, label %1057, label %1071

1057:                                             ; preds = %1053
  %1058 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 0
  %1059 = load i8, i8* %1058, align 1, !range !2
  %1060 = xor i8 %1059, 1
  %1061 = zext i8 %1060 to i32
  br label %1062

1062:                                             ; preds = %1057, %1035
  %1063 = phi i32 [ %1037, %1035 ], [ %1061, %1057 ]
  %1064 = icmp eq i32 %1063, 0
  br i1 %1064, label %1071, label %1065

1065:                                             ; preds = %1062, %1026, %1022
  %1066 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 9
  %1067 = load i32, i32* %1066, align 4
  %1068 = icmp sgt i32 %1067, 0
  br i1 %1068, label %1069, label %1071

1069:                                             ; preds = %1065
  %1070 = add nsw i32 %1067, -1
  store i32 %1070, i32* %1066, align 4
  br label %1071

1071:                                             ; preds = %1038, %1041, %1045, %1049, %1053, %1062, %1065, %1069
  %1072 = load i8, i8* %455, align 16
  %1073 = add i8 %1072, 1
  store i8 %1073, i8* %455, align 16
  br label %1074

1074:                                             ; preds = %917, %914, %1071
  %1075 = load i64, i64* %22, align 8
  store i64 %1075, i64* %1, align 8
  %1076 = icmp eq i64 %1075, 0
  br i1 %1076, label %1111, label %1077

1077:                                             ; preds = %1074
  %1078 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 4
  %1079 = load i32, i32* %1078, align 8
  %1080 = icmp eq i32 %1079, 0
  br i1 %1080, label %1084, label %1081

1081:                                             ; preds = %1077
  %1082 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 5
  %1083 = load i32, i32* %1082, align 4
  br label %1108

1084:                                             ; preds = %1077
  %1085 = load i8, i8* %616, align 1, !range !2
  %1086 = icmp eq i8 %1085, 0
  br i1 %1086, label %1108, label %1087

1087:                                             ; preds = %1084
  %1088 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 4
  %1089 = load i8, i8* %1088, align 1, !range !2
  %1090 = icmp eq i8 %1089, 0
  br i1 %1090, label %1091, label %1108

1091:                                             ; preds = %1087
  %1092 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 3
  %1093 = load i8, i8* %1092, align 1, !range !2
  %1094 = icmp eq i8 %1093, 0
  br i1 %1094, label %1095, label %1108

1095:                                             ; preds = %1091
  %1096 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 2
  %1097 = load i8, i8* %1096, align 1, !range !2
  %1098 = icmp eq i8 %1097, 0
  br i1 %1098, label %1099, label %1108

1099:                                             ; preds = %1095
  %1100 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 1
  %1101 = load i8, i8* %1100, align 1, !range !2
  %1102 = icmp eq i8 %1101, 0
  br i1 %1102, label %1103, label %1108

1103:                                             ; preds = %1099
  %1104 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 1, i32 0
  %1105 = load i8, i8* %1104, align 1, !range !2
  %1106 = xor i8 %1105, 1
  %1107 = zext i8 %1106 to i32
  br label %1108

1108:                                             ; preds = %1081, %1084, %1087, %1091, %1095, %1099, %1103
  %1109 = phi i32 [ %1083, %1081 ], [ 0, %1099 ], [ 0, %1095 ], [ 0, %1091 ], [ 0, %1087 ], [ %1107, %1103 ], [ 0, %1084 ]
  %1110 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 49
  store i32 %1109, i32* %1110, align 4
  br label %1111

1111:                                             ; preds = %1074, %1108
  %1112 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %14, align 16
  %1113 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %1112, i64 0, i32 16
  %1114 = load i32, i32* %1113, align 8
  %1115 = icmp eq i32 %1114, 0
  br i1 %1115, label %1117, label %1116

1116:                                             ; preds = %1111
  call void @av1_save_layer_context(%struct.AV1_COMP* %0) #6
  br label %1117

1117:                                             ; preds = %24, %285, %289, %1116, %1111, %818, %413, %38
  %1118 = phi i32 [ -1, %24 ], [ -1, %38 ], [ -1, %289 ], [ 1, %818 ], [ 0, %1111 ], [ 0, %1116 ], [ 1, %413 ], [ -1, %285 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #6
  call void @llvm.lifetime.end.p0i8(i64 76, i8* nonnull %20) #6
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #6
  ret i32 %1118

1119:                                             ; preds = %793, %789
  %1120 = phi %struct.RefCntBuffer* [ %796, %793 ], [ null, %789 ]
  %1121 = icmp eq %struct.RefCntBuffer* %1120, null
  %1122 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1120, i64 0, i32 17
  %1123 = select i1 %1121, %struct.yv12_buffer_config* null, %struct.yv12_buffer_config* %1122
  %1124 = getelementptr inbounds [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*]* %12, i64 0, i64 0
  store %struct.yv12_buffer_config* %1123, %struct.yv12_buffer_config** %1124, align 16
  %1125 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 6
  %1126 = load i32, i32* %1125, align 4
  %1127 = icmp eq i32 %1126, -1
  br i1 %1127, label %1132, label %1128

1128:                                             ; preds = %1119
  %1129 = sext i32 %1126 to i64
  %1130 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %1129
  %1131 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %1130, align 8
  br label %1132

1132:                                             ; preds = %1119, %1128
  %1133 = phi %struct.RefCntBuffer* [ %1131, %1128 ], [ null, %1119 ]
  %1134 = icmp eq %struct.RefCntBuffer* %1133, null
  %1135 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1133, i64 0, i32 17
  %1136 = select i1 %1134, %struct.yv12_buffer_config* null, %struct.yv12_buffer_config* %1135
  %1137 = getelementptr inbounds [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*]* %12, i64 0, i64 1
  store %struct.yv12_buffer_config* %1136, %struct.yv12_buffer_config** %1137, align 8
  %1138 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 4
  %1139 = load i32, i32* %1138, align 4
  %1140 = icmp eq i32 %1139, -1
  br i1 %1140, label %1145, label %1141

1141:                                             ; preds = %1132
  %1142 = sext i32 %1139 to i64
  %1143 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %1142
  %1144 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %1143, align 8
  br label %1145

1145:                                             ; preds = %1132, %1141
  %1146 = phi %struct.RefCntBuffer* [ %1144, %1141 ], [ null, %1132 ]
  %1147 = icmp eq %struct.RefCntBuffer* %1146, null
  %1148 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1146, i64 0, i32 17
  %1149 = select i1 %1147, %struct.yv12_buffer_config* null, %struct.yv12_buffer_config* %1148
  %1150 = getelementptr inbounds [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*]* %12, i64 0, i64 2
  store %struct.yv12_buffer_config* %1149, %struct.yv12_buffer_config** %1150, align 16
  %1151 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 3
  %1152 = load i32, i32* %1151, align 4
  %1153 = icmp eq i32 %1152, -1
  br i1 %1153, label %1158, label %1154

1154:                                             ; preds = %1145
  %1155 = sext i32 %1152 to i64
  %1156 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %1155
  %1157 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %1156, align 8
  br label %1158

1158:                                             ; preds = %1145, %1154
  %1159 = phi %struct.RefCntBuffer* [ %1157, %1154 ], [ null, %1145 ]
  %1160 = icmp eq %struct.RefCntBuffer* %1159, null
  %1161 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1159, i64 0, i32 17
  %1162 = select i1 %1160, %struct.yv12_buffer_config* null, %struct.yv12_buffer_config* %1161
  %1163 = getelementptr inbounds [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*]* %12, i64 0, i64 3
  store %struct.yv12_buffer_config* %1162, %struct.yv12_buffer_config** %1163, align 8
  %1164 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 5
  %1165 = load i32, i32* %1164, align 4
  %1166 = icmp eq i32 %1165, -1
  br i1 %1166, label %1171, label %1167

1167:                                             ; preds = %1158
  %1168 = sext i32 %1165 to i64
  %1169 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %1168
  %1170 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %1169, align 8
  br label %1171

1171:                                             ; preds = %1158, %1167
  %1172 = phi %struct.RefCntBuffer* [ %1170, %1167 ], [ null, %1158 ]
  %1173 = icmp eq %struct.RefCntBuffer* %1172, null
  %1174 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1172, i64 0, i32 17
  %1175 = select i1 %1173, %struct.yv12_buffer_config* null, %struct.yv12_buffer_config* %1174
  %1176 = getelementptr inbounds [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*]* %12, i64 0, i64 4
  store %struct.yv12_buffer_config* %1175, %struct.yv12_buffer_config** %1176, align 16
  %1177 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 1
  %1178 = load i32, i32* %1177, align 4
  %1179 = icmp eq i32 %1178, -1
  br i1 %1179, label %1184, label %1180

1180:                                             ; preds = %1171
  %1181 = sext i32 %1178 to i64
  %1182 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %1181
  %1183 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %1182, align 8
  br label %1184

1184:                                             ; preds = %1171, %1180
  %1185 = phi %struct.RefCntBuffer* [ %1183, %1180 ], [ null, %1171 ]
  %1186 = icmp eq %struct.RefCntBuffer* %1185, null
  %1187 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1185, i64 0, i32 17
  %1188 = select i1 %1186, %struct.yv12_buffer_config* null, %struct.yv12_buffer_config* %1187
  %1189 = getelementptr inbounds [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*]* %12, i64 0, i64 5
  store %struct.yv12_buffer_config* %1188, %struct.yv12_buffer_config** %1189, align 8
  %1190 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 13, i64 2
  %1191 = load i32, i32* %1190, align 4
  %1192 = icmp eq i32 %1191, -1
  br i1 %1192, label %1197, label %1193

1193:                                             ; preds = %1184
  %1194 = sext i32 %1191 to i64
  %1195 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 16, i64 %1194
  %1196 = load %struct.RefCntBuffer*, %struct.RefCntBuffer** %1195, align 8
  br label %1197

1197:                                             ; preds = %1193, %1184
  %1198 = phi %struct.RefCntBuffer* [ %1196, %1193 ], [ null, %1184 ]
  %1199 = icmp eq %struct.RefCntBuffer* %1198, null
  %1200 = getelementptr inbounds %struct.RefCntBuffer, %struct.RefCntBuffer* %1198, i64 0, i32 17
  %1201 = select i1 %1199, %struct.yv12_buffer_config* null, %struct.yv12_buffer_config* %1200
  %1202 = getelementptr inbounds [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*]* %12, i64 0, i64 6
  store %struct.yv12_buffer_config* %1201, %struct.yv12_buffer_config** %1202, align 16
  %1203 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 27, i32 0
  %1204 = load i32, i32* %1203, align 4
  %1205 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 40, i32 13, i32 7
  %1206 = load i32, i32* %1205, align 4
  %1207 = icmp eq i32 %1206, 0
  %1208 = icmp eq %struct.yv12_buffer_config* %1136, %1123
  %1209 = and i32 %1204, -65
  %1210 = select i1 %1208, i32 %1209, i32 %1204
  %1211 = icmp eq %struct.yv12_buffer_config* %1149, %1123
  %1212 = icmp eq %struct.yv12_buffer_config* %1149, %1136
  %1213 = or i1 %1211, %1212
  %1214 = and i32 %1210, -17
  %1215 = select i1 %1213, i32 %1214, i32 %1210
  br i1 %1207, label %661, label %656
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @av1_lookahead_depth(%struct.lookahead_ctx*, i8 zeroext) local_unnamed_addr #3

declare i32 @av1_lookahead_pop_sz(%struct.lookahead_ctx*, i8 zeroext) local_unnamed_addr #3

declare void @av1_apply_encoding_flags(%struct.AV1_COMP*, i64) local_unnamed_addr #3

declare i32 @aom_film_grain_table_lookup(%struct.aom_film_grain_table_t*, i64, i64, i32, %struct.aom_film_grain_t*) local_unnamed_addr #3

declare void @av1_get_one_pass_rt_params(%struct.AV1_COMP*, %struct.EncodeFrameParams*, i32) local_unnamed_addr #3

declare void @av1_set_reference_structure_one_pass_rt(%struct.AV1_COMP*, i32) local_unnamed_addr #3

declare void @av1_cyclic_refresh_update_parameters(%struct.AV1_COMP*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @av1_encode(%struct.AV1_COMP*, i8*, %struct.EncodeFrameInput*, %struct.EncodeFrameParams*, %struct.EncodeFrameResults*) local_unnamed_addr #3

declare %struct.lookahead_entry* @av1_lookahead_pop(%struct.lookahead_ctx*, i32, i8 zeroext) local_unnamed_addr #3

declare void @av1_save_layer_context(%struct.AV1_COMP*) local_unnamed_addr #3

declare void @av1_rc_update_framerate(%struct.AV1_COMP*, i32, i32) local_unnamed_addr #3

declare void @av1_new_framerate(%struct.AV1_COMP*, double) local_unnamed_addr #3

declare i32 @av1_svc_primary_ref_frame(%struct.AV1_COMP*) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = distinct !{!5, !4}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !4}
!8 = distinct !{!8, !4}
!9 = distinct !{!9, !4}
!10 = distinct !{!10, !4}
!11 = distinct !{!11, !4}
!12 = distinct !{!12, !4}
