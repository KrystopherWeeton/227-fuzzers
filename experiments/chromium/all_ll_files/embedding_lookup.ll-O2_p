; ModuleID = '../../components/translate/core/language_detection/embedding_lookup.cc'
source_filename = "../../components/translate/core/language_detection/embedding_lookup.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteRegistration = type { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, {}*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%"class.flexbuffers::Map" = type { %"class.flexbuffers::Vector" }
%"class.flexbuffers::Vector" = type { %"class.flexbuffers::Sized" }
%"class.flexbuffers::Sized" = type { %"class.flexbuffers::Object.base", i64 }
%"class.flexbuffers::Object.base" = type <{ i8*, i8 }>
%"class.flexbuffers::Reference" = type { i8*, i8, i8, i32 }
%"class.(anonymous namespace)::EmbeddingLookupOpParams" = type { i8, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { float*, float*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.flexbuffers::String" = type { %"class.flexbuffers::Sized" }

$_ZNK11flexbuffers3MapixEPKc = comdat any

$_ZN11flexbuffers10KeyCompareIhEEiPKvS2_ = comdat any

$_ZN11flexbuffers10KeyCompareItEEiPKvS2_ = comdat any

$_ZN11flexbuffers10KeyCompareIjEEiPKvS2_ = comdat any

$_ZN11flexbuffers10KeyCompareImEEiPKvS2_ = comdat any

$_ZNK11flexbuffers9Reference8AsUInt64Ev = comdat any

$_ZNK11flexbuffers9Reference8AsStringEv = comdat any

$_ZNK11flexbuffers9Reference7AsInt64Ev = comdat any

$_ZZN11flexbuffers3Map8EmptyMapEvE9empty_map = comdat any

$_ZZN11flexbuffers6String11EmptyStringEvE12empty_string = comdat any

@.str = private unnamed_addr constant [19 x i8] c"FlatBuffers 1.12.0\00", align 1
@_ZN11flatbuffers25flatbuffer_version_stringE = weak hidden local_unnamed_addr global i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), align 8
@_ZZN9translate25Register_EMBEDDING_LOOKUPEvE1r = internal global %struct.TfLiteRegistration { i8* (%struct.TfLiteContext*, i8*, i64)* @_ZN12_GLOBAL__N_14InitEP13TfLiteContextPKcm, void (%struct.TfLiteContext*, i8*)* @_ZN12_GLOBAL__N_14FreeEP13TfLiteContextPv, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN12_GLOBAL__N_16ResizeEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@.str.1 = private unnamed_addr constant [13 x i8] c"is_quantized\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"num_precision_bits\00", align 1
@_ZZN11flexbuffers3Map8EmptyMapEvE9empty_map = linkonce_odr hidden constant [4 x i8] c"\00\00\01\00", comdat, align 1
@_ZZN11flexbuffers6String11EmptyStringEvE12empty_string = linkonce_odr hidden local_unnamed_addr global i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0), comdat, align 8
@.str.3 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"%s:%d %s was not true.\00", align 1
@.str.5 = private unnamed_addr constant [71 x i8] c"../../components/translate/core/language_detection/embedding_lookup.cc\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"output != nullptr\00", align 1
@.str.7 = private unnamed_addr constant [24 x i8] c"input_tensor != nullptr\00", align 1
@.str.8 = private unnamed_addr constant [61 x i8] c"`num_precision_bits` must be in [2, 32) and a divisor of 32.\00", align 1
@.str.9 = private unnamed_addr constant [17 x i8] c"input != nullptr\00", align 1
@.str.10 = private unnamed_addr constant [27 x i8] c"embedding_table != nullptr\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"min_val != nullptr\00", align 1
@.str.12 = private unnamed_addr constant [19 x i8] c"max_val != nullptr\00", align 1
@.str.13 = private unnamed_addr constant [27 x i8] c"`batch_size` must be == 1.\00", align 1
@.str.14 = private unnamed_addr constant [29 x i8] c"Output type must be Float32.\00", align 1
@switch.table._ZNK11flexbuffers3MapixEPKc = private unnamed_addr constant [8 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @_ZN11flexbuffers10KeyCompareIhEEiPKvS2_, i32 (i8*, i8*)* @_ZN11flexbuffers10KeyCompareItEEiPKvS2_, i32 (i8*, i8*)* null, i32 (i8*, i8*)* @_ZN11flexbuffers10KeyCompareIjEEiPKvS2_, i32 (i8*, i8*)* null, i32 (i8*, i8*)* null, i32 (i8*, i8*)* null, i32 (i8*, i8*)* @_ZN11flexbuffers10KeyCompareImEEiPKvS2_], align 8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.TfLiteRegistration* @_ZN9translate25Register_EMBEDDING_LOOKUPEv() local_unnamed_addr #0 {
  ret %struct.TfLiteRegistration* @_ZZN9translate25Register_EMBEDDING_LOOKUPEvE1r
}

; Function Attrs: nounwind ssp uwtable
define internal noalias nonnull i8* @_ZN12_GLOBAL__N_14InitEP13TfLiteContextPKcm(%struct.TfLiteContext* nocapture readnone, i8*, i64) #1 {
  %4 = alloca %"class.flexbuffers::Map", align 8
  %5 = alloca %"class.flexbuffers::Reference", align 8
  %6 = alloca %"class.flexbuffers::Reference", align 8
  %7 = bitcast %"class.flexbuffers::Map"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #12
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = getelementptr inbounds i8, i8* %8, i64 -1
  %10 = load i8, i8* %9, align 1
  %11 = getelementptr inbounds i8, i8* %9, i64 -1
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %10 to i64
  %14 = sub nsw i64 0, %13
  %15 = getelementptr inbounds i8, i8* %11, i64 %14
  %16 = zext i8 %12 to i32
  %17 = and i32 %16, 3
  %18 = shl i32 256, %17
  %19 = and i32 %16, 252
  %20 = icmp eq i32 %19, 36
  br i1 %20, label %21, label %74

21:                                               ; preds = %3
  %22 = icmp ult i8 %10, 4
  br i1 %22, label %23, label %32

23:                                               ; preds = %21
  %24 = icmp ult i8 %10, 2
  br i1 %24, label %25, label %28

25:                                               ; preds = %23
  %26 = load i8, i8* %15, align 1, !noalias !2
  %27 = zext i8 %26 to i64
  br label %41

28:                                               ; preds = %23
  %29 = bitcast i8* %15 to i16*
  %30 = load i16, i16* %29, align 2, !noalias !2
  %31 = zext i16 %30 to i64
  br label %41

32:                                               ; preds = %21
  %33 = icmp ult i8 %10, 8
  br i1 %33, label %34, label %38

34:                                               ; preds = %32
  %35 = bitcast i8* %15 to i32*
  %36 = load i32, i32* %35, align 4, !noalias !2
  %37 = zext i32 %36 to i64
  br label %41

38:                                               ; preds = %32
  %39 = bitcast i8* %15 to i64*
  %40 = load i64, i64* %39, align 8, !noalias !2
  br label %41

41:                                               ; preds = %38, %34, %28, %25
  %42 = phi i64 [ %27, %25 ], [ %31, %28 ], [ %37, %34 ], [ %40, %38 ]
  %43 = sub i64 0, %42
  %44 = getelementptr inbounds i8, i8* %15, i64 %43
  %45 = lshr exact i32 %18, 8
  %46 = trunc i32 %45 to i8
  %47 = getelementptr inbounds %"class.flexbuffers::Map", %"class.flexbuffers::Map"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8* %44, i8** %47, align 8, !alias.scope !2
  %48 = getelementptr inbounds %"class.flexbuffers::Map", %"class.flexbuffers::Map"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  store i8 %46, i8* %48, align 8, !alias.scope !2
  %49 = getelementptr inbounds %"class.flexbuffers::Map", %"class.flexbuffers::Map"* %4, i64 0, i32 0, i32 0, i32 1
  %50 = zext i32 %45 to i64
  %51 = sub nsw i64 0, %50
  %52 = getelementptr inbounds i8, i8* %44, i64 %51
  %53 = icmp ult i8 %46, 4
  br i1 %53, label %54, label %63

54:                                               ; preds = %41
  %55 = icmp ult i8 %46, 2
  br i1 %55, label %56, label %59

56:                                               ; preds = %54
  %57 = load i8, i8* %52, align 1, !noalias !2
  %58 = zext i8 %57 to i64
  br label %72

59:                                               ; preds = %54
  %60 = bitcast i8* %52 to i16*
  %61 = load i16, i16* %60, align 2, !noalias !2
  %62 = zext i16 %61 to i64
  br label %72

63:                                               ; preds = %41
  %64 = icmp ult i8 %46, 8
  br i1 %64, label %65, label %69

65:                                               ; preds = %63
  %66 = bitcast i8* %52 to i32*
  %67 = load i32, i32* %66, align 4, !noalias !2
  %68 = zext i32 %67 to i64
  br label %72

69:                                               ; preds = %63
  %70 = bitcast i8* %52 to i64*
  %71 = load i64, i64* %70, align 8, !noalias !2
  br label %72

72:                                               ; preds = %69, %65, %59, %56
  %73 = phi i64 [ %58, %56 ], [ %62, %59 ], [ %68, %65 ], [ %71, %69 ]
  store i64 %73, i64* %49, align 8, !alias.scope !2
  br label %78

74:                                               ; preds = %3
  %75 = getelementptr inbounds %"class.flexbuffers::Map", %"class.flexbuffers::Map"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @_ZZN11flexbuffers3Map8EmptyMapEvE9empty_map, i64 1, i64 0), i8** %75, align 8, !alias.scope !5
  %76 = getelementptr inbounds %"class.flexbuffers::Map", %"class.flexbuffers::Map"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  store i8 1, i8* %76, align 8, !alias.scope !5
  %77 = getelementptr inbounds %"class.flexbuffers::Map", %"class.flexbuffers::Map"* %4, i64 0, i32 0, i32 0, i32 1
  store i64 0, i64* %77, align 8, !alias.scope !5
  br label %78

78:                                               ; preds = %72, %74
  %79 = call { i8*, i64 } @_ZNK11flexbuffers3MapixEPKc(%"class.flexbuffers::Map"* nonnull %4, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0))
  %80 = extractvalue { i8*, i64 } %79, 1
  %81 = icmp ult i64 %80, 4294967296
  %82 = bitcast %"class.flexbuffers::Reference"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %82) #12
  br i1 %81, label %119, label %83

83:                                               ; preds = %78
  %84 = call { i8*, i64 } @_ZNK11flexbuffers3MapixEPKc(%"class.flexbuffers::Map"* nonnull %4, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0))
  %85 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %5, i64 0, i32 0
  %86 = extractvalue { i8*, i64 } %84, 0
  store i8* %86, i8** %85, align 8
  %87 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %5, i64 0, i32 1
  %88 = bitcast i8* %87 to i64*
  %89 = extractvalue { i8*, i64 } %84, 1
  store i64 %89, i64* %88, align 8
  %90 = and i64 %89, -4294967296
  %91 = icmp eq i64 %90, 111669149696
  %92 = trunc i64 %89 to i8
  br i1 %91, label %93, label %113

93:                                               ; preds = %83
  %94 = icmp ult i8 %92, 4
  br i1 %94, label %95, label %104

95:                                               ; preds = %93
  %96 = icmp ult i8 %92, 2
  br i1 %96, label %97, label %100

97:                                               ; preds = %95
  %98 = load i8, i8* %86, align 1
  %99 = zext i8 %98 to i64
  br label %115

100:                                              ; preds = %95
  %101 = bitcast i8* %86 to i16*
  %102 = load i16, i16* %101, align 2
  %103 = zext i16 %102 to i64
  br label %115

104:                                              ; preds = %93
  %105 = icmp ult i8 %92, 8
  br i1 %105, label %106, label %110

106:                                              ; preds = %104
  %107 = bitcast i8* %86 to i32*
  %108 = load i32, i32* %107, align 4
  %109 = zext i32 %108 to i64
  br label %115

110:                                              ; preds = %104
  %111 = bitcast i8* %86 to i64*
  %112 = load i64, i64* %111, align 8
  br label %115

113:                                              ; preds = %83
  %114 = call i64 @_ZNK11flexbuffers9Reference8AsUInt64Ev(%"class.flexbuffers::Reference"* nonnull %5) #12
  br label %115

115:                                              ; preds = %97, %100, %106, %110, %113
  %116 = phi i64 [ %114, %113 ], [ %99, %97 ], [ %103, %100 ], [ %109, %106 ], [ %112, %110 ]
  %117 = icmp ne i64 %116, 0
  %118 = zext i1 %117 to i8
  br label %119

119:                                              ; preds = %78, %115
  %120 = phi i8 [ %118, %115 ], [ 0, %78 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %82) #12
  %121 = bitcast %"class.flexbuffers::Reference"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %121) #12
  %122 = call { i8*, i64 } @_ZNK11flexbuffers3MapixEPKc(%"class.flexbuffers::Map"* nonnull %4, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0))
  %123 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %6, i64 0, i32 0
  %124 = extractvalue { i8*, i64 } %122, 0
  store i8* %124, i8** %123, align 8
  %125 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %6, i64 0, i32 1
  %126 = bitcast i8* %125 to i64*
  %127 = extractvalue { i8*, i64 } %122, 1
  store i64 %127, i64* %126, align 8
  %128 = call i64 @_ZNK11flexbuffers9Reference7AsInt64Ev(%"class.flexbuffers::Reference"* nonnull %6) #12
  %129 = trunc i64 %128 to i32
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %121) #12
  %130 = call i8* @_Znwm(i64 8) #13
  store i8 %120, i8* %130, align 4
  %131 = getelementptr inbounds i8, i8* %130, i64 4
  %132 = bitcast i8* %131 to i32*
  store i32 %129, i32* %132, align 4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #12
  ret i8* %130
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN12_GLOBAL__N_14FreeEP13TfLiteContextPv(%struct.TfLiteContext* nocapture readnone, i8*) #1 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %5, label %4

4:                                                ; preds = %2
  tail call void @_ZdlPv(i8* nonnull %1) #13
  br label %5

5:                                                ; preds = %4, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN12_GLOBAL__N_16ResizeEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #1 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %4 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %5 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %10 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %9, align 8
  %11 = sext i32 %6 to i64
  %12 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %10, i64 %11
  %13 = icmp eq %struct.TfLiteTensor* %12, null
  br i1 %13, label %14, label %17

14:                                               ; preds = %2, %8
  %15 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %16 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %15, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %16(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.5, i64 0, i64 0), i32 77, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i64 0, i64 0)) #12
  br label %70

17:                                               ; preds = %8
  %18 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %19 = bitcast i8** %18 to %"class.(anonymous namespace)::EmbeddingLookupOpParams"**
  %20 = load %"class.(anonymous namespace)::EmbeddingLookupOpParams"*, %"class.(anonymous namespace)::EmbeddingLookupOpParams"** %19, align 8
  %21 = getelementptr inbounds %"class.(anonymous namespace)::EmbeddingLookupOpParams", %"class.(anonymous namespace)::EmbeddingLookupOpParams"* %20, i64 0, i32 0
  %22 = load i8, i8* %21, align 4, !range !8
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %36, label %24

24:                                               ; preds = %17
  %25 = getelementptr inbounds %"class.(anonymous namespace)::EmbeddingLookupOpParams", %"class.(anonymous namespace)::EmbeddingLookupOpParams"* %20, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = add i32 %26, -2
  %28 = icmp ult i32 %27, 30
  br i1 %28, label %29, label %33

29:                                               ; preds = %24
  %30 = trunc i32 %26 to i8
  %31 = urem i8 32, %30
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %36, label %33

33:                                               ; preds = %29, %24
  %34 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %35 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %34, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %35(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.8, i64 0, i64 0)) #12
  br label %70

36:                                               ; preds = %17, %29
  %37 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32 2) #12
  %38 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %37, i64 0, i32 1, i64 0
  store i32 1, i32* %38, align 4
  %39 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %40 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %39, align 8
  %41 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %40, i64 0, i32 1, i64 1
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %36
  %45 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %9, align 8
  %46 = sext i32 %42 to i64
  %47 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %45, i64 %46
  %48 = icmp eq %struct.TfLiteTensor* %47, null
  br i1 %48, label %49, label %52

49:                                               ; preds = %36, %44
  %50 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %51 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %50, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %51(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.5, i64 0, i64 0), i32 85, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0)) #12
  br label %70

52:                                               ; preds = %44
  %53 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %45, i64 %46, i32 2
  %54 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %53, align 8
  %55 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %54, i64 0, i32 1, i64 1
  %56 = load i32, i32* %55, align 4
  %57 = load i8, i8* %21, align 4, !range !8
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %64, label %59

59:                                               ; preds = %52
  %60 = getelementptr inbounds %"class.(anonymous namespace)::EmbeddingLookupOpParams", %"class.(anonymous namespace)::EmbeddingLookupOpParams"* %20, i64 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = shl nsw i32 %56, 5
  %63 = sdiv i32 %62, %61
  br label %64

64:                                               ; preds = %52, %59
  %65 = phi i32 [ %63, %59 ], [ %56, %52 ]
  %66 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %37, i64 0, i32 1, i64 1
  store i32 %65, i32* %66, align 4
  %67 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %68 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %67, align 8
  %69 = tail call i32 %68(%struct.TfLiteContext* %0, %struct.TfLiteTensor* nonnull %12, %struct.TfLiteIntArray* %37) #12
  br label %70

70:                                               ; preds = %33, %64, %49, %14
  %71 = phi i32 [ 1, %14 ], [ 1, %33 ], [ %69, %64 ], [ 1, %49 ]
  ret i32 %71
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #1 {
  %3 = alloca %"class.std::__1::vector", align 8
  %4 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 4
  %5 = bitcast i8** %4 to %"class.(anonymous namespace)::EmbeddingLookupOpParams"**
  %6 = load %"class.(anonymous namespace)::EmbeddingLookupOpParams"*, %"class.(anonymous namespace)::EmbeddingLookupOpParams"** %5, align 8
  %7 = getelementptr inbounds %"class.(anonymous namespace)::EmbeddingLookupOpParams", %"class.(anonymous namespace)::EmbeddingLookupOpParams"* %6, i64 0, i32 0
  %8 = load i8, i8* %7, align 4, !range !8
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %22, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.(anonymous namespace)::EmbeddingLookupOpParams", %"class.(anonymous namespace)::EmbeddingLookupOpParams"* %6, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = add i32 %12, -2
  %14 = icmp ult i32 %13, 30
  br i1 %14, label %15, label %19

15:                                               ; preds = %10
  %16 = trunc i32 %12 to i8
  %17 = urem i8 32, %16
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %15, %10
  %20 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %21 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %20, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %21(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.8, i64 0, i64 0)) #12
  br label %375

22:                                               ; preds = %2, %15
  %23 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %24 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %23, align 8
  %25 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %24, i64 0, i32 1, i64 0
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %34, label %28

28:                                               ; preds = %22
  %29 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %30 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %29, align 8
  %31 = sext i32 %26 to i64
  %32 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 %31
  %33 = icmp eq %struct.TfLiteTensor* %32, null
  br i1 %33, label %34, label %37

34:                                               ; preds = %22, %28
  %35 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %36 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %35, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %36(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.5, i64 0, i64 0), i32 172, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0)) #12
  br label %375

37:                                               ; preds = %28
  %38 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %24, i64 0, i32 1, i64 1
  %39 = load i32, i32* %38, align 4
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %45, label %41

41:                                               ; preds = %37
  %42 = sext i32 %39 to i64
  %43 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 %42
  %44 = icmp eq %struct.TfLiteTensor* %43, null
  br i1 %44, label %45, label %48

45:                                               ; preds = %37, %41
  %46 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %47 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %46, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %47(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.5, i64 0, i64 0), i32 175, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.10, i64 0, i64 0)) #12
  br label %375

48:                                               ; preds = %41
  %49 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %24, i64 0, i32 1, i64 2
  %50 = load i32, i32* %49, align 4
  %51 = icmp slt i32 %50, 0
  br i1 %51, label %56, label %52

52:                                               ; preds = %48
  %53 = sext i32 %50 to i64
  %54 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 %53
  %55 = icmp eq %struct.TfLiteTensor* %54, null
  br i1 %55, label %56, label %59

56:                                               ; preds = %48, %52
  %57 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %58 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %57, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %58(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.5, i64 0, i64 0), i32 177, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i64 0, i64 0)) #12
  br label %375

59:                                               ; preds = %52
  %60 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %24, i64 0, i32 1, i64 3
  %61 = load i32, i32* %60, align 4
  %62 = icmp slt i32 %61, 0
  br i1 %62, label %67, label %63

63:                                               ; preds = %59
  %64 = sext i32 %61 to i64
  %65 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 %64
  %66 = icmp eq %struct.TfLiteTensor* %65, null
  br i1 %66, label %67, label %70

67:                                               ; preds = %59, %63
  %68 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %69 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %68, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %69(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.5, i64 0, i64 0), i32 179, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.12, i64 0, i64 0)) #12
  br label %375

70:                                               ; preds = %63
  %71 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %72 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %71, align 8
  %73 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %72, i64 0, i32 1, i64 0
  %74 = load i32, i32* %73, align 4
  %75 = icmp slt i32 %74, 0
  br i1 %75, label %80, label %76

76:                                               ; preds = %70
  %77 = sext i32 %74 to i64
  %78 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 %77
  %79 = icmp eq %struct.TfLiteTensor* %78, null
  br i1 %79, label %80, label %83

80:                                               ; preds = %70, %76
  %81 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %82 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %81, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %82(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.5, i64 0, i64 0), i32 181, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i64 0, i64 0)) #12
  br label %375

83:                                               ; preds = %76
  %84 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 %31, i32 2
  %85 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %84, align 8
  %86 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %85, i64 0, i32 1, i64 0
  %87 = load i32, i32* %86, align 4
  %88 = icmp eq i32 %87, 1
  br i1 %88, label %92, label %89

89:                                               ; preds = %83
  %90 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %91 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %90, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %91(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.13, i64 0, i64 0)) #12
  br label %375

92:                                               ; preds = %83
  %93 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %78, i64 0, i32 0
  %94 = load i32, i32* %93, align 8
  %95 = icmp eq i32 %94, 1
  br i1 %95, label %99, label %96

96:                                               ; preds = %92
  %97 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %98 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %97, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %98(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.14, i64 0, i64 0)) #12
  br label %375

99:                                               ; preds = %92
  %100 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 %53, i32 1
  %101 = bitcast %union.TfLitePtrUnion* %100 to float**
  %102 = load float*, float** %101, align 8
  %103 = load float, float* %102, align 4
  %104 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 %64, i32 1
  %105 = bitcast %union.TfLitePtrUnion* %104 to float**
  %106 = load float*, float** %105, align 8
  %107 = load float, float* %106, align 4
  %108 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 %77, i32 1
  %109 = bitcast %union.TfLitePtrUnion* %108 to float**
  %110 = load float*, float** %109, align 8
  %111 = icmp ne i8 %8, 0
  %112 = getelementptr inbounds %"class.(anonymous namespace)::EmbeddingLookupOpParams", %"class.(anonymous namespace)::EmbeddingLookupOpParams"* %6, i64 0, i32 1
  %113 = load i32, i32* %112, align 4
  %114 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 %42, i32 2
  %115 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %114, align 8
  %116 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %115, i64 0, i32 1, i64 1
  %117 = load i32, i32* %116, align 4
  %118 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %85, i64 0, i32 1, i64 1
  %119 = load i32, i32* %118, align 4
  br i1 %111, label %120, label %123

120:                                              ; preds = %99
  %121 = shl nsw i32 %117, 5
  %122 = sdiv i32 %121, %113
  br label %123

123:                                              ; preds = %120, %99
  %124 = phi i32 [ %122, %120 ], [ %117, %99 ]
  %125 = bitcast %"class.std::__1::vector"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %125) #12
  %126 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %127 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %128 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %129 = sext i32 %124 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %125, i8 0, i64 24, i1 false) #12
  %130 = icmp eq i32 %124, 0
  br i1 %130, label %143, label %131

131:                                              ; preds = %123
  %132 = icmp slt i32 %124, 0
  br i1 %132, label %133, label %135

133:                                              ; preds = %131
  %134 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %134) #14
  unreachable

135:                                              ; preds = %131
  %136 = shl nsw i64 %129, 2
  %137 = tail call i8* @_Znwm(i64 %136) #13
  %138 = bitcast i8* %137 to float*
  %139 = bitcast %"class.std::__1::vector"* %3 to i8**
  store i8* %137, i8** %139, align 8
  %140 = getelementptr inbounds float, float* %138, i64 %129
  store float* %140, float** %128, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %137, i8 0, i64 %136, i1 false) #12
  %141 = bitcast float** %127 to i64*
  %142 = ptrtoint float* %140 to i64
  store i64 %142, i64* %141, align 8
  br label %143

143:                                              ; preds = %135, %123
  %144 = icmp sgt i32 %119, 0
  br i1 %144, label %145, label %279

145:                                              ; preds = %143
  %146 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 %31, i32 1, i32 0
  %147 = icmp sgt i32 %117, 0
  %148 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 %42, i32 1
  %149 = bitcast %union.TfLitePtrUnion* %148 to float**
  %150 = zext i32 %113 to i64
  %151 = shl nsw i64 -1, %150
  %152 = trunc i64 %151 to i32
  %153 = xor i32 %152, -1
  %154 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 %42, i32 1, i32 0
  %155 = zext i32 %119 to i64
  %156 = zext i32 %117 to i64
  %157 = and i64 %156, 1
  %158 = icmp eq i32 %117, 1
  %159 = sub nsw i64 %156, %157
  %160 = icmp eq i64 %157, 0
  br label %161

161:                                              ; preds = %275, %145
  %162 = phi i64 [ 0, %145 ], [ %277, %275 ]
  %163 = phi i32 [ 0, %145 ], [ %276, %275 ]
  %164 = load i32*, i32** %146, align 8
  %165 = getelementptr inbounds i32, i32* %164, i64 %162
  %166 = load i32, i32* %165, align 4
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %279, label %168

168:                                              ; preds = %161
  br i1 %111, label %173, label %169

169:                                              ; preds = %168
  br i1 %147, label %170, label %275

170:                                              ; preds = %169
  %171 = mul nsw i32 %166, %117
  %172 = sext i32 %171 to i64
  br i1 %158, label %264, label %241

173:                                              ; preds = %168
  %174 = sdiv i32 32, %113
  %175 = tail call { <2 x float>, i64 } @_ZN9translate21GetQuantizationParamsEffi(float %103, float %107, i32 %113) #12
  %176 = extractvalue { <2 x float>, i64 } %175, 0
  br i1 %147, label %177, label %275

177:                                              ; preds = %173
  %178 = mul nsw i32 %166, %117
  %179 = icmp sgt i32 %174, 0
  %180 = extractelement <2 x float> %176, i32 0
  %181 = extractelement <2 x float> %176, i32 1
  %182 = sext i32 %174 to i64
  %183 = sext i32 %178 to i64
  %184 = zext i32 %174 to i64
  %185 = and i64 %184, 1
  %186 = icmp eq i32 %174, 1
  %187 = sub nsw i64 %184, %185
  %188 = icmp eq i64 %185, 0
  br label %189

189:                                              ; preds = %210, %177
  %190 = phi i64 [ 0, %177 ], [ %211, %210 ]
  br i1 %179, label %191, label %210

191:                                              ; preds = %189
  %192 = load i32*, i32** %154, align 8
  %193 = add nsw i64 %190, %183
  %194 = getelementptr inbounds i32, i32* %192, i64 %193
  %195 = load i32, i32* %194, align 4
  %196 = mul nsw i64 %190, %182
  br i1 %186, label %197, label %213

197:                                              ; preds = %213, %191
  %198 = phi i64 [ 0, %191 ], [ %238, %213 ]
  %199 = phi i32 [ %195, %191 ], [ %237, %213 ]
  br i1 %188, label %210, label %200

200:                                              ; preds = %197
  %201 = and i32 %199, %153
  %202 = uitofp i32 %201 to float
  %203 = fmul float %180, %202
  %204 = fadd float %181, %203
  %205 = add nsw i64 %198, %196
  %206 = load float*, float** %126, align 8
  %207 = getelementptr inbounds float, float* %206, i64 %205
  %208 = load float, float* %207, align 4
  %209 = fadd float %208, %204
  store float %209, float* %207, align 4
  br label %210

210:                                              ; preds = %200, %197, %189
  %211 = add nuw nsw i64 %190, 1
  %212 = icmp eq i64 %211, %156
  br i1 %212, label %275, label %189

213:                                              ; preds = %191, %213
  %214 = phi i64 [ %238, %213 ], [ 0, %191 ]
  %215 = phi i32 [ %237, %213 ], [ %195, %191 ]
  %216 = phi i64 [ %239, %213 ], [ %187, %191 ]
  %217 = and i32 %215, %153
  %218 = uitofp i32 %217 to float
  %219 = fmul float %180, %218
  %220 = fadd float %181, %219
  %221 = add nsw i64 %214, %196
  %222 = load float*, float** %126, align 8
  %223 = getelementptr inbounds float, float* %222, i64 %221
  %224 = load float, float* %223, align 4
  %225 = fadd float %224, %220
  store float %225, float* %223, align 4
  %226 = lshr i32 %215, %113
  %227 = or i64 %214, 1
  %228 = and i32 %226, %153
  %229 = uitofp i32 %228 to float
  %230 = fmul float %180, %229
  %231 = fadd float %181, %230
  %232 = add nsw i64 %227, %196
  %233 = load float*, float** %126, align 8
  %234 = getelementptr inbounds float, float* %233, i64 %232
  %235 = load float, float* %234, align 4
  %236 = fadd float %235, %231
  store float %236, float* %234, align 4
  %237 = lshr i32 %226, %113
  %238 = add nuw nsw i64 %214, 2
  %239 = add i64 %216, -2
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %197, label %213

241:                                              ; preds = %170, %241
  %242 = phi i64 [ %261, %241 ], [ 0, %170 ]
  %243 = phi i64 [ %262, %241 ], [ %159, %170 ]
  %244 = load float*, float** %149, align 8
  %245 = add nsw i64 %242, %172
  %246 = getelementptr inbounds float, float* %244, i64 %245
  %247 = load float, float* %246, align 4
  %248 = load float*, float** %126, align 8
  %249 = getelementptr inbounds float, float* %248, i64 %242
  %250 = load float, float* %249, align 4
  %251 = fadd float %247, %250
  store float %251, float* %249, align 4
  %252 = or i64 %242, 1
  %253 = load float*, float** %149, align 8
  %254 = add nsw i64 %252, %172
  %255 = getelementptr inbounds float, float* %253, i64 %254
  %256 = load float, float* %255, align 4
  %257 = load float*, float** %126, align 8
  %258 = getelementptr inbounds float, float* %257, i64 %252
  %259 = load float, float* %258, align 4
  %260 = fadd float %256, %259
  store float %260, float* %258, align 4
  %261 = add nuw nsw i64 %242, 2
  %262 = add i64 %243, -2
  %263 = icmp eq i64 %262, 0
  br i1 %263, label %264, label %241

264:                                              ; preds = %241, %170
  %265 = phi i64 [ 0, %170 ], [ %261, %241 ]
  br i1 %160, label %275, label %266

266:                                              ; preds = %264
  %267 = load float*, float** %149, align 8
  %268 = add nsw i64 %265, %172
  %269 = getelementptr inbounds float, float* %267, i64 %268
  %270 = load float, float* %269, align 4
  %271 = load float*, float** %126, align 8
  %272 = getelementptr inbounds float, float* %271, i64 %265
  %273 = load float, float* %272, align 4
  %274 = fadd float %270, %273
  store float %274, float* %272, align 4
  br label %275

275:                                              ; preds = %266, %264, %210, %173, %169
  %276 = add nuw nsw i32 %163, 1
  %277 = add nuw nsw i64 %162, 1
  %278 = icmp eq i64 %277, %155
  br i1 %278, label %279, label %161

279:                                              ; preds = %275, %161, %143
  %280 = phi i32 [ 0, %143 ], [ %276, %275 ], [ %163, %161 ]
  %281 = icmp sgt i32 %124, 0
  br i1 %281, label %284, label %282

282:                                              ; preds = %279
  %283 = load float*, float** %126, align 8
  br label %354

284:                                              ; preds = %279
  %285 = icmp eq i32 %280, 0
  %286 = select i1 %285, i32 1, i32 %280
  %287 = sitofp i32 %286 to float
  %288 = zext i32 %124 to i64
  %289 = load float*, float** %126, align 8
  %290 = icmp ult i32 %124, 4
  br i1 %290, label %291, label %306

291:                                              ; preds = %352, %306, %284
  %292 = phi i64 [ 0, %306 ], [ 0, %284 ], [ %313, %352 ]
  %293 = xor i64 %292, -1
  %294 = and i64 %288, 1
  %295 = icmp eq i64 %294, 0
  br i1 %295, label %302, label %296

296:                                              ; preds = %291
  %297 = getelementptr inbounds float, float* %289, i64 %292
  %298 = load float, float* %297, align 4
  %299 = fdiv float %298, %287
  %300 = getelementptr inbounds float, float* %110, i64 %292
  store float %299, float* %300, align 4
  %301 = or i64 %292, 1
  br label %302

302:                                              ; preds = %291, %296
  %303 = phi i64 [ %292, %291 ], [ %301, %296 ]
  %304 = sub nsw i64 0, %288
  %305 = icmp eq i64 %293, %304
  br i1 %305, label %354, label %361

306:                                              ; preds = %284
  %307 = getelementptr float, float* %110, i64 %288
  %308 = getelementptr float, float* %289, i64 %288
  %309 = icmp ult float* %110, %308
  %310 = icmp ult float* %289, %307
  %311 = and i1 %309, %310
  br i1 %311, label %291, label %312

312:                                              ; preds = %306
  %313 = and i64 %288, 4294967292
  %314 = insertelement <4 x float> undef, float %287, i32 0
  %315 = shufflevector <4 x float> %314, <4 x float> undef, <4 x i32> zeroinitializer
  %316 = add nsw i64 %313, -4
  %317 = lshr exact i64 %316, 2
  %318 = add nuw nsw i64 %317, 1
  %319 = and i64 %318, 1
  %320 = icmp eq i64 %316, 0
  br i1 %320, label %342, label %321

321:                                              ; preds = %312
  %322 = sub nuw nsw i64 %318, %319
  br label %323

323:                                              ; preds = %323, %321
  %324 = phi i64 [ 0, %321 ], [ %339, %323 ]
  %325 = phi i64 [ %322, %321 ], [ %340, %323 ]
  %326 = getelementptr inbounds float, float* %289, i64 %324
  %327 = bitcast float* %326 to <4 x float>*
  %328 = load <4 x float>, <4 x float>* %327, align 4, !alias.scope !9
  %329 = fdiv <4 x float> %328, %315
  %330 = getelementptr inbounds float, float* %110, i64 %324
  %331 = bitcast float* %330 to <4 x float>*
  store <4 x float> %329, <4 x float>* %331, align 4, !alias.scope !12, !noalias !9
  %332 = or i64 %324, 4
  %333 = getelementptr inbounds float, float* %289, i64 %332
  %334 = bitcast float* %333 to <4 x float>*
  %335 = load <4 x float>, <4 x float>* %334, align 4, !alias.scope !9
  %336 = fdiv <4 x float> %335, %315
  %337 = getelementptr inbounds float, float* %110, i64 %332
  %338 = bitcast float* %337 to <4 x float>*
  store <4 x float> %336, <4 x float>* %338, align 4, !alias.scope !12, !noalias !9
  %339 = add i64 %324, 8
  %340 = add i64 %325, -2
  %341 = icmp eq i64 %340, 0
  br i1 %341, label %342, label %323, !llvm.loop !14

342:                                              ; preds = %323, %312
  %343 = phi i64 [ 0, %312 ], [ %339, %323 ]
  %344 = icmp eq i64 %319, 0
  br i1 %344, label %352, label %345

345:                                              ; preds = %342
  %346 = getelementptr inbounds float, float* %289, i64 %343
  %347 = bitcast float* %346 to <4 x float>*
  %348 = load <4 x float>, <4 x float>* %347, align 4, !alias.scope !9
  %349 = fdiv <4 x float> %348, %315
  %350 = getelementptr inbounds float, float* %110, i64 %343
  %351 = bitcast float* %350 to <4 x float>*
  store <4 x float> %349, <4 x float>* %351, align 4, !alias.scope !12, !noalias !9
  br label %352

352:                                              ; preds = %342, %345
  %353 = icmp eq i64 %313, %288
  br i1 %353, label %354, label %291

354:                                              ; preds = %302, %361, %352, %282
  %355 = phi float* [ %283, %282 ], [ %289, %352 ], [ %289, %361 ], [ %289, %302 ]
  %356 = icmp eq float* %355, null
  br i1 %356, label %374, label %357

357:                                              ; preds = %354
  %358 = ptrtoint float* %355 to i64
  %359 = bitcast float** %127 to i64*
  store i64 %358, i64* %359, align 8
  %360 = bitcast float* %355 to i8*
  tail call void @_ZdlPv(i8* %360) #13
  br label %374

361:                                              ; preds = %302, %361
  %362 = phi i64 [ %372, %361 ], [ %303, %302 ]
  %363 = getelementptr inbounds float, float* %289, i64 %362
  %364 = load float, float* %363, align 4
  %365 = fdiv float %364, %287
  %366 = getelementptr inbounds float, float* %110, i64 %362
  store float %365, float* %366, align 4
  %367 = add nuw nsw i64 %362, 1
  %368 = getelementptr inbounds float, float* %289, i64 %367
  %369 = load float, float* %368, align 4
  %370 = fdiv float %369, %287
  %371 = getelementptr inbounds float, float* %110, i64 %367
  store float %370, float* %371, align 4
  %372 = add nuw nsw i64 %362, 2
  %373 = icmp eq i64 %372, %288
  br i1 %373, label %354, label %361, !llvm.loop !16

374:                                              ; preds = %354, %357
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %125) #12
  br label %375

375:                                              ; preds = %19, %34, %56, %80, %374, %96, %89, %67, %45
  %376 = phi i32 [ 1, %19 ], [ 1, %34 ], [ 1, %45 ], [ 1, %56 ], [ 1, %67 ], [ 1, %80 ], [ 1, %89 ], [ 1, %96 ], [ 0, %374 ]
  ret i32 %376
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden { i8*, i64 } @_ZNK11flexbuffers3MapixEPKc(%"class.flexbuffers::Map"*, i8*) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.flexbuffers::Map", %"class.flexbuffers::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8, !noalias !17
  %5 = getelementptr inbounds %"class.flexbuffers::Map", %"class.flexbuffers::Map"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %6 = load i8, i8* %5, align 8, !noalias !17
  %7 = zext i8 %6 to i64
  %8 = mul nsw i64 %7, -3
  %9 = getelementptr inbounds i8, i8* %4, i64 %8
  %10 = icmp ult i8 %6, 4
  br i1 %10, label %11, label %13

11:                                               ; preds = %2
  %12 = icmp ult i8 %6, 2
  br i1 %12, label %15, label %23

13:                                               ; preds = %2
  %14 = icmp ult i8 %6, 8
  br i1 %14, label %33, label %43

15:                                               ; preds = %11
  %16 = load i8, i8* %9, align 1, !noalias !17
  %17 = zext i8 %16 to i64
  %18 = sub nsw i64 0, %17
  %19 = getelementptr inbounds i8, i8* %9, i64 %18
  %20 = getelementptr inbounds i8, i8* %9, i64 %7
  %21 = load i8, i8* %20, align 1, !noalias !17
  %22 = zext i8 %21 to i64
  br label %51

23:                                               ; preds = %11
  %24 = bitcast i8* %9 to i16*
  %25 = load i16, i16* %24, align 2, !noalias !17
  %26 = zext i16 %25 to i64
  %27 = sub nsw i64 0, %26
  %28 = getelementptr inbounds i8, i8* %9, i64 %27
  %29 = getelementptr inbounds i8, i8* %9, i64 %7
  %30 = bitcast i8* %29 to i16*
  %31 = load i16, i16* %30, align 2, !noalias !17
  %32 = zext i16 %31 to i64
  br label %51

33:                                               ; preds = %13
  %34 = bitcast i8* %9 to i32*
  %35 = load i32, i32* %34, align 4, !noalias !17
  %36 = zext i32 %35 to i64
  %37 = sub nsw i64 0, %36
  %38 = getelementptr inbounds i8, i8* %9, i64 %37
  %39 = getelementptr inbounds i8, i8* %9, i64 %7
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 4, !noalias !17
  %42 = zext i32 %41 to i64
  br label %51

43:                                               ; preds = %13
  %44 = bitcast i8* %9 to i64*
  %45 = load i64, i64* %44, align 8, !noalias !17
  %46 = sub i64 0, %45
  %47 = getelementptr inbounds i8, i8* %9, i64 %46
  %48 = getelementptr inbounds i8, i8* %9, i64 %7
  %49 = bitcast i8* %48 to i64*
  %50 = load i64, i64* %49, align 8, !noalias !17
  br label %51

51:                                               ; preds = %43, %33, %23, %15
  %52 = phi i8* [ %19, %15 ], [ %28, %23 ], [ %38, %33 ], [ %47, %43 ]
  %53 = phi i64 [ %22, %15 ], [ %32, %23 ], [ %42, %33 ], [ %50, %43 ]
  %54 = trunc i64 %53 to i8
  %55 = and i64 %53, 255
  %56 = sub nsw i64 0, %55
  %57 = getelementptr inbounds i8, i8* %52, i64 %56
  %58 = icmp ult i8 %54, 4
  br i1 %58, label %59, label %68

59:                                               ; preds = %51
  %60 = icmp ult i8 %54, 2
  br i1 %60, label %61, label %64

61:                                               ; preds = %59
  %62 = load i8, i8* %57, align 1, !noalias !17
  %63 = zext i8 %62 to i64
  br label %77

64:                                               ; preds = %59
  %65 = bitcast i8* %57 to i16*
  %66 = load i16, i16* %65, align 2, !noalias !17
  %67 = zext i16 %66 to i64
  br label %77

68:                                               ; preds = %51
  %69 = icmp ult i8 %54, 8
  br i1 %69, label %70, label %74

70:                                               ; preds = %68
  %71 = bitcast i8* %57 to i32*
  %72 = load i32, i32* %71, align 4, !noalias !17
  %73 = zext i32 %72 to i64
  br label %77

74:                                               ; preds = %68
  %75 = bitcast i8* %57 to i64*
  %76 = load i64, i64* %75, align 8, !noalias !17
  br label %77

77:                                               ; preds = %61, %64, %70, %74
  %78 = phi i64 [ %63, %61 ], [ %67, %64 ], [ %73, %70 ], [ %76, %74 ]
  %79 = add i8 %54, -1
  %80 = icmp ult i8 %79, 8
  br i1 %80, label %81, label %85

81:                                               ; preds = %77
  %82 = sext i8 %79 to i64
  %83 = getelementptr inbounds [8 x i32 (i8*, i8*)*], [8 x i32 (i8*, i8*)*]* @switch.table._ZNK11flexbuffers3MapixEPKc, i64 0, i64 %82
  %84 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %83, align 8
  br label %85

85:                                               ; preds = %81, %77
  %86 = phi i32 (i8*, i8*)* [ null, %77 ], [ %84, %81 ]
  %87 = icmp eq i64 %78, 0
  br i1 %87, label %138, label %88

88:                                               ; preds = %85, %101
  %89 = phi i64 [ %103, %101 ], [ %78, %85 ]
  %90 = phi i64 [ %102, %101 ], [ 0, %85 ]
  %91 = add i64 %90, %89
  %92 = lshr i64 %91, 1
  %93 = mul i64 %92, %55
  %94 = getelementptr inbounds i8, i8* %52, i64 %93
  %95 = tail call i32 %86(i8* %1, i8* %94) #12
  %96 = icmp slt i32 %95, 0
  br i1 %96, label %101, label %97

97:                                               ; preds = %88
  %98 = icmp eq i32 %95, 0
  br i1 %98, label %105, label %99

99:                                               ; preds = %97
  %100 = add nuw i64 %92, 1
  br label %101

101:                                              ; preds = %99, %88
  %102 = phi i64 [ %100, %99 ], [ %90, %88 ]
  %103 = phi i64 [ %89, %99 ], [ %92, %88 ]
  %104 = icmp ult i64 %102, %103
  br i1 %104, label %88, label %138

105:                                              ; preds = %97
  %106 = icmp eq i8* %94, null
  br i1 %106, label %138, label %107

107:                                              ; preds = %105
  %108 = sdiv i64 %93, %55
  %109 = getelementptr inbounds %"class.flexbuffers::Map", %"class.flexbuffers::Map"* %0, i64 0, i32 0, i32 0, i32 1
  %110 = load i64, i64* %109, align 8
  %111 = icmp ugt i64 %110, %108
  br i1 %111, label %112, label %129

112:                                              ; preds = %107
  %113 = load i8*, i8** %3, align 8
  %114 = load i8, i8* %5, align 8
  %115 = zext i8 %114 to i64
  %116 = mul i64 %110, %115
  %117 = getelementptr inbounds i8, i8* %113, i64 %116
  %118 = getelementptr inbounds i8, i8* %117, i64 %108
  %119 = load i8, i8* %118, align 1
  %120 = mul i64 %108, %115
  %121 = getelementptr inbounds i8, i8* %113, i64 %120
  %122 = zext i8 %119 to i32
  %123 = and i32 %122, 3
  %124 = lshr i32 %122, 2
  %125 = zext i32 %124 to i64
  %126 = shl nuw nsw i64 %125, 32
  %127 = shl i32 256, %123
  %128 = zext i32 %127 to i64
  br label %129

129:                                              ; preds = %107, %112
  %130 = phi i64 [ %126, %112 ], [ 0, %107 ]
  %131 = phi i64 [ %128, %112 ], [ 256, %107 ]
  %132 = phi i64 [ %115, %112 ], [ 1, %107 ]
  %133 = phi i8* [ %121, %112 ], [ null, %107 ]
  %134 = and i64 %131, 4294901760
  %135 = and i64 %131, 65280
  %136 = and i64 %131, 255
  %137 = or i64 %136, %132
  br label %138

138:                                              ; preds = %101, %85, %105, %129
  %139 = phi i64 [ %134, %129 ], [ 0, %105 ], [ 0, %85 ], [ 0, %101 ]
  %140 = phi i64 [ %135, %129 ], [ 256, %105 ], [ 256, %85 ], [ 256, %101 ]
  %141 = phi i64 [ %137, %129 ], [ 1, %105 ], [ 1, %85 ], [ 1, %101 ]
  %142 = phi i8* [ %133, %129 ], [ null, %105 ], [ null, %85 ], [ null, %101 ]
  %143 = phi i64 [ %130, %129 ], [ 0, %105 ], [ 0, %85 ], [ 0, %101 ]
  %144 = insertvalue { i8*, i64 } undef, i8* %142, 0
  %145 = or i64 %140, %139
  %146 = or i64 %145, %141
  %147 = or i64 %146, %143
  %148 = insertvalue { i8*, i64 } %144, i64 %147, 1
  ret { i8*, i64 } %148
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN11flexbuffers10KeyCompareIhEEiPKvS2_(i8*, i8*) local_unnamed_addr #1 comdat {
  %3 = load i8, i8* %1, align 1
  %4 = zext i8 %3 to i64
  %5 = sub nsw i64 0, %4
  %6 = getelementptr inbounds i8, i8* %1, i64 %5
  %7 = tail call i32 @strcmp(i8* %0, i8* %6) #15
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN11flexbuffers10KeyCompareItEEiPKvS2_(i8*, i8*) local_unnamed_addr #1 comdat {
  %3 = bitcast i8* %1 to i16*
  %4 = load i16, i16* %3, align 2
  %5 = zext i16 %4 to i64
  %6 = sub nsw i64 0, %5
  %7 = getelementptr inbounds i8, i8* %1, i64 %6
  %8 = tail call i32 @strcmp(i8* %0, i8* %7) #15
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN11flexbuffers10KeyCompareIjEEiPKvS2_(i8*, i8*) local_unnamed_addr #1 comdat {
  %3 = bitcast i8* %1 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = zext i32 %4 to i64
  %6 = sub nsw i64 0, %5
  %7 = getelementptr inbounds i8, i8* %1, i64 %6
  %8 = tail call i32 @strcmp(i8* %0, i8* %7) #15
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN11flexbuffers10KeyCompareImEEiPKvS2_(i8*, i8*) local_unnamed_addr #1 comdat {
  %3 = bitcast i8* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = sub i64 0, %4
  %6 = getelementptr inbounds i8, i8* %1, i64 %5
  %7 = tail call i32 @strcmp(i8* %0, i8* %6) #15
  ret i32 %7
}

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK11flexbuffers9Reference8AsUInt64Ev(%"class.flexbuffers::Reference"*) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca i8*, align 8
  %3 = alloca %"class.flexbuffers::String", align 8
  %4 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  switch i32 %5, label %325 [
    i32 2, label %6
    i32 7, label %30
    i32 1, label %79
    i32 6, label %103
    i32 3, label %152
    i32 8, label %179
    i32 26, label %301
    i32 5, label %231
    i32 10, label %249
  ]

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %10 = load i8, i8* %9, align 8
  %11 = icmp ult i8 %10, 4
  br i1 %11, label %12, label %21

12:                                               ; preds = %6
  %13 = icmp ult i8 %10, 2
  br i1 %13, label %14, label %17

14:                                               ; preds = %12
  %15 = load i8, i8* %8, align 1
  %16 = zext i8 %15 to i64
  br label %325

17:                                               ; preds = %12
  %18 = bitcast i8* %8 to i16*
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i64
  br label %325

21:                                               ; preds = %6
  %22 = icmp ult i8 %10, 8
  br i1 %22, label %23, label %27

23:                                               ; preds = %21
  %24 = bitcast i8* %8 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i64
  br label %325

27:                                               ; preds = %21
  %28 = bitcast i8* %8 to i64*
  %29 = load i64, i64* %28, align 8
  br label %325

30:                                               ; preds = %1
  %31 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %34 = load i8, i8* %33, align 8
  %35 = icmp ult i8 %34, 4
  br i1 %35, label %36, label %45

36:                                               ; preds = %30
  %37 = icmp ult i8 %34, 2
  br i1 %37, label %38, label %41

38:                                               ; preds = %36
  %39 = load i8, i8* %32, align 1
  %40 = zext i8 %39 to i64
  br label %54

41:                                               ; preds = %36
  %42 = bitcast i8* %32 to i16*
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i64
  br label %54

45:                                               ; preds = %30
  %46 = icmp ult i8 %34, 8
  br i1 %46, label %47, label %51

47:                                               ; preds = %45
  %48 = bitcast i8* %32 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = zext i32 %49 to i64
  br label %54

51:                                               ; preds = %45
  %52 = bitcast i8* %32 to i64*
  %53 = load i64, i64* %52, align 8
  br label %54

54:                                               ; preds = %38, %41, %47, %51
  %55 = phi i64 [ %40, %38 ], [ %44, %41 ], [ %50, %47 ], [ %53, %51 ]
  %56 = sub i64 0, %55
  %57 = getelementptr inbounds i8, i8* %32, i64 %56
  %58 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 2
  %59 = load i8, i8* %58, align 1
  %60 = icmp ult i8 %59, 4
  br i1 %60, label %61, label %70

61:                                               ; preds = %54
  %62 = icmp ult i8 %59, 2
  br i1 %62, label %63, label %66

63:                                               ; preds = %61
  %64 = load i8, i8* %57, align 1
  %65 = zext i8 %64 to i64
  br label %325

66:                                               ; preds = %61
  %67 = bitcast i8* %57 to i16*
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i64
  br label %325

70:                                               ; preds = %54
  %71 = icmp ult i8 %59, 8
  br i1 %71, label %72, label %76

72:                                               ; preds = %70
  %73 = bitcast i8* %57 to i32*
  %74 = load i32, i32* %73, align 4
  %75 = zext i32 %74 to i64
  br label %325

76:                                               ; preds = %70
  %77 = bitcast i8* %57 to i64*
  %78 = load i64, i64* %77, align 8
  br label %325

79:                                               ; preds = %1
  %80 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %81 = load i8*, i8** %80, align 8
  %82 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %83 = load i8, i8* %82, align 8
  %84 = icmp ult i8 %83, 4
  br i1 %84, label %85, label %94

85:                                               ; preds = %79
  %86 = icmp ult i8 %83, 2
  br i1 %86, label %87, label %90

87:                                               ; preds = %85
  %88 = load i8, i8* %81, align 1
  %89 = sext i8 %88 to i64
  br label %325

90:                                               ; preds = %85
  %91 = bitcast i8* %81 to i16*
  %92 = load i16, i16* %91, align 2
  %93 = sext i16 %92 to i64
  br label %325

94:                                               ; preds = %79
  %95 = icmp ult i8 %83, 8
  br i1 %95, label %96, label %100

96:                                               ; preds = %94
  %97 = bitcast i8* %81 to i32*
  %98 = load i32, i32* %97, align 4
  %99 = sext i32 %98 to i64
  br label %325

100:                                              ; preds = %94
  %101 = bitcast i8* %81 to i64*
  %102 = load i64, i64* %101, align 8
  br label %325

103:                                              ; preds = %1
  %104 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %105 = load i8*, i8** %104, align 8
  %106 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %107 = load i8, i8* %106, align 8
  %108 = icmp ult i8 %107, 4
  br i1 %108, label %109, label %118

109:                                              ; preds = %103
  %110 = icmp ult i8 %107, 2
  br i1 %110, label %111, label %114

111:                                              ; preds = %109
  %112 = load i8, i8* %105, align 1
  %113 = zext i8 %112 to i64
  br label %127

114:                                              ; preds = %109
  %115 = bitcast i8* %105 to i16*
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i64
  br label %127

118:                                              ; preds = %103
  %119 = icmp ult i8 %107, 8
  br i1 %119, label %120, label %124

120:                                              ; preds = %118
  %121 = bitcast i8* %105 to i32*
  %122 = load i32, i32* %121, align 4
  %123 = zext i32 %122 to i64
  br label %127

124:                                              ; preds = %118
  %125 = bitcast i8* %105 to i64*
  %126 = load i64, i64* %125, align 8
  br label %127

127:                                              ; preds = %111, %114, %120, %124
  %128 = phi i64 [ %113, %111 ], [ %117, %114 ], [ %123, %120 ], [ %126, %124 ]
  %129 = sub i64 0, %128
  %130 = getelementptr inbounds i8, i8* %105, i64 %129
  %131 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 2
  %132 = load i8, i8* %131, align 1
  %133 = icmp ult i8 %132, 4
  br i1 %133, label %134, label %143

134:                                              ; preds = %127
  %135 = icmp ult i8 %132, 2
  br i1 %135, label %136, label %139

136:                                              ; preds = %134
  %137 = load i8, i8* %130, align 1
  %138 = sext i8 %137 to i64
  br label %325

139:                                              ; preds = %134
  %140 = bitcast i8* %130 to i16*
  %141 = load i16, i16* %140, align 2
  %142 = sext i16 %141 to i64
  br label %325

143:                                              ; preds = %127
  %144 = icmp ult i8 %132, 8
  br i1 %144, label %145, label %149

145:                                              ; preds = %143
  %146 = bitcast i8* %130 to i32*
  %147 = load i32, i32* %146, align 4
  %148 = sext i32 %147 to i64
  br label %325

149:                                              ; preds = %143
  %150 = bitcast i8* %130 to i64*
  %151 = load i64, i64* %150, align 8
  br label %325

152:                                              ; preds = %1
  %153 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %154 = load i8*, i8** %153, align 8
  %155 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %156 = load i8, i8* %155, align 8
  %157 = icmp ult i8 %156, 4
  br i1 %157, label %158, label %167

158:                                              ; preds = %152
  %159 = icmp ult i8 %156, 2
  br i1 %159, label %160, label %163

160:                                              ; preds = %158
  %161 = load i8, i8* %154, align 1
  %162 = sitofp i8 %161 to double
  br label %176

163:                                              ; preds = %158
  %164 = bitcast i8* %154 to i16*
  %165 = load i16, i16* %164, align 2
  %166 = sitofp i16 %165 to double
  br label %176

167:                                              ; preds = %152
  %168 = icmp ult i8 %156, 8
  br i1 %168, label %169, label %173

169:                                              ; preds = %167
  %170 = bitcast i8* %154 to float*
  %171 = load float, float* %170, align 4
  %172 = fpext float %171 to double
  br label %176

173:                                              ; preds = %167
  %174 = bitcast i8* %154 to double*
  %175 = load double, double* %174, align 8
  br label %176

176:                                              ; preds = %160, %163, %169, %173
  %177 = phi double [ %162, %160 ], [ %166, %163 ], [ %172, %169 ], [ %175, %173 ]
  %178 = fptoui double %177 to i64
  br label %325

179:                                              ; preds = %1
  %180 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %181 = load i8*, i8** %180, align 8
  %182 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %183 = load i8, i8* %182, align 8
  %184 = icmp ult i8 %183, 4
  br i1 %184, label %185, label %194

185:                                              ; preds = %179
  %186 = icmp ult i8 %183, 2
  br i1 %186, label %187, label %190

187:                                              ; preds = %185
  %188 = load i8, i8* %181, align 1
  %189 = zext i8 %188 to i64
  br label %203

190:                                              ; preds = %185
  %191 = bitcast i8* %181 to i16*
  %192 = load i16, i16* %191, align 2
  %193 = zext i16 %192 to i64
  br label %203

194:                                              ; preds = %179
  %195 = icmp ult i8 %183, 8
  br i1 %195, label %196, label %200

196:                                              ; preds = %194
  %197 = bitcast i8* %181 to i32*
  %198 = load i32, i32* %197, align 4
  %199 = zext i32 %198 to i64
  br label %203

200:                                              ; preds = %194
  %201 = bitcast i8* %181 to i64*
  %202 = load i64, i64* %201, align 8
  br label %203

203:                                              ; preds = %187, %190, %196, %200
  %204 = phi i64 [ %189, %187 ], [ %193, %190 ], [ %199, %196 ], [ %202, %200 ]
  %205 = sub i64 0, %204
  %206 = getelementptr inbounds i8, i8* %181, i64 %205
  %207 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 2
  %208 = load i8, i8* %207, align 1
  %209 = icmp ult i8 %208, 4
  br i1 %209, label %210, label %219

210:                                              ; preds = %203
  %211 = icmp ult i8 %208, 2
  br i1 %211, label %212, label %215

212:                                              ; preds = %210
  %213 = load i8, i8* %206, align 1
  %214 = sitofp i8 %213 to double
  br label %228

215:                                              ; preds = %210
  %216 = bitcast i8* %206 to i16*
  %217 = load i16, i16* %216, align 2
  %218 = sitofp i16 %217 to double
  br label %228

219:                                              ; preds = %203
  %220 = icmp ult i8 %208, 8
  br i1 %220, label %221, label %225

221:                                              ; preds = %219
  %222 = bitcast i8* %206 to float*
  %223 = load float, float* %222, align 4
  %224 = fpext float %223 to double
  br label %228

225:                                              ; preds = %219
  %226 = bitcast i8* %206 to double*
  %227 = load double, double* %226, align 8
  br label %228

228:                                              ; preds = %212, %215, %221, %225
  %229 = phi double [ %214, %212 ], [ %218, %215 ], [ %224, %221 ], [ %227, %225 ]
  %230 = fptoui double %229 to i64
  br label %325

231:                                              ; preds = %1
  %232 = bitcast %"class.flexbuffers::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %232) #12
  call void @_ZNK11flexbuffers9Reference8AsStringEv(%"class.flexbuffers::String"* nonnull sret %3, %"class.flexbuffers::Reference"* %0)
  %233 = getelementptr inbounds %"class.flexbuffers::String", %"class.flexbuffers::String"* %3, i64 0, i32 0, i32 0, i32 0
  %234 = load i8*, i8** %233, align 8
  %235 = tail call i32* @__errno_location() #16
  store i32 0, i32* %235, align 4
  %236 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %236) #12
  store i8* %234, i8** %2, align 8
  %237 = call i64 @strtoull(i8* %234, i8** nonnull %2, i32 10) #12
  %238 = load i8*, i8** %2, align 8
  %239 = load i8, i8* %238, align 1
  %240 = icmp ne i8 %239, 0
  %241 = icmp eq i8* %238, %234
  %242 = or i1 %241, %240
  br i1 %242, label %247, label %243

243:                                              ; preds = %231
  %244 = load i32, i32* %235, align 4
  %245 = icmp eq i32 %244, 0
  %246 = select i1 %245, i64 %237, i64 0
  br label %247

247:                                              ; preds = %243, %231
  %248 = phi i64 [ 0, %231 ], [ %246, %243 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %236) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %232) #12
  br label %325

249:                                              ; preds = %1
  %250 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %251 = load i8*, i8** %250, align 8, !noalias !20
  %252 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %253 = load i8, i8* %252, align 8, !noalias !20
  %254 = icmp ult i8 %253, 4
  br i1 %254, label %255, label %264

255:                                              ; preds = %249
  %256 = icmp ult i8 %253, 2
  br i1 %256, label %257, label %260

257:                                              ; preds = %255
  %258 = load i8, i8* %251, align 1, !noalias !20
  %259 = zext i8 %258 to i64
  br label %273

260:                                              ; preds = %255
  %261 = bitcast i8* %251 to i16*
  %262 = load i16, i16* %261, align 2, !noalias !20
  %263 = zext i16 %262 to i64
  br label %273

264:                                              ; preds = %249
  %265 = icmp ult i8 %253, 8
  br i1 %265, label %266, label %270

266:                                              ; preds = %264
  %267 = bitcast i8* %251 to i32*
  %268 = load i32, i32* %267, align 4, !noalias !20
  %269 = zext i32 %268 to i64
  br label %273

270:                                              ; preds = %264
  %271 = bitcast i8* %251 to i64*
  %272 = load i64, i64* %271, align 8, !noalias !20
  br label %273

273:                                              ; preds = %270, %266, %260, %257
  %274 = phi i64 [ %259, %257 ], [ %263, %260 ], [ %269, %266 ], [ %272, %270 ]
  %275 = sub i64 0, %274
  %276 = getelementptr inbounds i8, i8* %251, i64 %275
  %277 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 2
  %278 = load i8, i8* %277, align 1, !noalias !20
  %279 = zext i8 %278 to i64
  %280 = sub nsw i64 0, %279
  %281 = getelementptr inbounds i8, i8* %276, i64 %280
  %282 = icmp ult i8 %278, 4
  br i1 %282, label %283, label %292

283:                                              ; preds = %273
  %284 = icmp ult i8 %278, 2
  br i1 %284, label %285, label %288

285:                                              ; preds = %283
  %286 = load i8, i8* %281, align 1, !noalias !20
  %287 = zext i8 %286 to i64
  br label %325

288:                                              ; preds = %283
  %289 = bitcast i8* %281 to i16*
  %290 = load i16, i16* %289, align 2, !noalias !20
  %291 = zext i16 %290 to i64
  br label %325

292:                                              ; preds = %273
  %293 = icmp ult i8 %278, 8
  br i1 %293, label %294, label %298

294:                                              ; preds = %292
  %295 = bitcast i8* %281 to i32*
  %296 = load i32, i32* %295, align 4, !noalias !20
  %297 = zext i32 %296 to i64
  br label %325

298:                                              ; preds = %292
  %299 = bitcast i8* %281 to i64*
  %300 = load i64, i64* %299, align 8, !noalias !20
  br label %325

301:                                              ; preds = %1
  %302 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %303 = load i8*, i8** %302, align 8
  %304 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %305 = load i8, i8* %304, align 8
  %306 = icmp ult i8 %305, 4
  br i1 %306, label %307, label %316

307:                                              ; preds = %301
  %308 = icmp ult i8 %305, 2
  br i1 %308, label %309, label %312

309:                                              ; preds = %307
  %310 = load i8, i8* %303, align 1
  %311 = zext i8 %310 to i64
  br label %325

312:                                              ; preds = %307
  %313 = bitcast i8* %303 to i16*
  %314 = load i16, i16* %313, align 2
  %315 = zext i16 %314 to i64
  br label %325

316:                                              ; preds = %301
  %317 = icmp ult i8 %305, 8
  br i1 %317, label %318, label %322

318:                                              ; preds = %316
  %319 = bitcast i8* %303 to i32*
  %320 = load i32, i32* %319, align 4
  %321 = zext i32 %320 to i64
  br label %325

322:                                              ; preds = %316
  %323 = bitcast i8* %303 to i64*
  %324 = load i64, i64* %323, align 8
  br label %325

325:                                              ; preds = %322, %318, %312, %309, %298, %294, %288, %285, %149, %145, %139, %136, %100, %96, %90, %87, %76, %72, %66, %63, %27, %23, %17, %14, %1, %247, %228, %176
  %326 = phi i64 [ %248, %247 ], [ %230, %228 ], [ %178, %176 ], [ 0, %1 ], [ %16, %14 ], [ %20, %17 ], [ %26, %23 ], [ %29, %27 ], [ %65, %63 ], [ %69, %66 ], [ %75, %72 ], [ %78, %76 ], [ %89, %87 ], [ %93, %90 ], [ %99, %96 ], [ %102, %100 ], [ %138, %136 ], [ %142, %139 ], [ %148, %145 ], [ %151, %149 ], [ %287, %285 ], [ %291, %288 ], [ %297, %294 ], [ %300, %298 ], [ %311, %309 ], [ %315, %312 ], [ %321, %318 ], [ %324, %322 ]
  ret i64 %326
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK11flexbuffers9Reference8AsStringEv(%"class.flexbuffers::String"* noalias sret, %"class.flexbuffers::Reference"*) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %1, i64 0, i32 3
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %96 [
    i32 5, label %5
    i32 4, label %62
  ]

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %1, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %1, i64 0, i32 1
  %9 = load i8, i8* %8, align 8
  %10 = icmp ult i8 %9, 4
  br i1 %10, label %11, label %20

11:                                               ; preds = %5
  %12 = icmp ult i8 %9, 2
  br i1 %12, label %13, label %16

13:                                               ; preds = %11
  %14 = load i8, i8* %7, align 1
  %15 = zext i8 %14 to i64
  br label %29

16:                                               ; preds = %11
  %17 = bitcast i8* %7 to i16*
  %18 = load i16, i16* %17, align 2
  %19 = zext i16 %18 to i64
  br label %29

20:                                               ; preds = %5
  %21 = icmp ult i8 %9, 8
  br i1 %21, label %22, label %26

22:                                               ; preds = %20
  %23 = bitcast i8* %7 to i32*
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i64
  br label %29

26:                                               ; preds = %20
  %27 = bitcast i8* %7 to i64*
  %28 = load i64, i64* %27, align 8
  br label %29

29:                                               ; preds = %13, %16, %22, %26
  %30 = phi i64 [ %15, %13 ], [ %19, %16 ], [ %25, %22 ], [ %28, %26 ]
  %31 = sub i64 0, %30
  %32 = getelementptr inbounds i8, i8* %7, i64 %31
  %33 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %1, i64 0, i32 2
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr inbounds %"class.flexbuffers::String", %"class.flexbuffers::String"* %0, i64 0, i32 0, i32 0, i32 0
  store i8* %32, i8** %35, align 8
  %36 = getelementptr inbounds %"class.flexbuffers::String", %"class.flexbuffers::String"* %0, i64 0, i32 0, i32 0, i32 1
  store i8 %34, i8* %36, align 8
  %37 = getelementptr inbounds %"class.flexbuffers::String", %"class.flexbuffers::String"* %0, i64 0, i32 0, i32 1
  %38 = zext i8 %34 to i64
  %39 = sub nsw i64 0, %38
  %40 = getelementptr inbounds i8, i8* %32, i64 %39
  %41 = icmp ult i8 %34, 4
  br i1 %41, label %42, label %51

42:                                               ; preds = %29
  %43 = icmp ult i8 %34, 2
  br i1 %43, label %44, label %47

44:                                               ; preds = %42
  %45 = load i8, i8* %40, align 1
  %46 = zext i8 %45 to i64
  br label %60

47:                                               ; preds = %42
  %48 = bitcast i8* %40 to i16*
  %49 = load i16, i16* %48, align 2
  %50 = zext i16 %49 to i64
  br label %60

51:                                               ; preds = %29
  %52 = icmp ult i8 %34, 8
  br i1 %52, label %53, label %57

53:                                               ; preds = %51
  %54 = bitcast i8* %40 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = zext i32 %55 to i64
  br label %60

57:                                               ; preds = %51
  %58 = bitcast i8* %40 to i64*
  %59 = load i64, i64* %58, align 8
  br label %60

60:                                               ; preds = %44, %47, %53, %57
  %61 = phi i64 [ %46, %44 ], [ %50, %47 ], [ %56, %53 ], [ %59, %57 ]
  store i64 %61, i64* %37, align 8
  br label %101

62:                                               ; preds = %2
  %63 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %1, i64 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %1, i64 0, i32 1
  %66 = load i8, i8* %65, align 8
  %67 = icmp ult i8 %66, 4
  br i1 %67, label %68, label %77

68:                                               ; preds = %62
  %69 = icmp ult i8 %66, 2
  br i1 %69, label %70, label %73

70:                                               ; preds = %68
  %71 = load i8, i8* %64, align 1
  %72 = zext i8 %71 to i64
  br label %86

73:                                               ; preds = %68
  %74 = bitcast i8* %64 to i16*
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i64
  br label %86

77:                                               ; preds = %62
  %78 = icmp ult i8 %66, 8
  br i1 %78, label %79, label %83

79:                                               ; preds = %77
  %80 = bitcast i8* %64 to i32*
  %81 = load i32, i32* %80, align 4
  %82 = zext i32 %81 to i64
  br label %86

83:                                               ; preds = %77
  %84 = bitcast i8* %64 to i64*
  %85 = load i64, i64* %84, align 8
  br label %86

86:                                               ; preds = %70, %73, %79, %83
  %87 = phi i64 [ %72, %70 ], [ %76, %73 ], [ %82, %79 ], [ %85, %83 ]
  %88 = sub i64 0, %87
  %89 = getelementptr inbounds i8, i8* %64, i64 %88
  %90 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %1, i64 0, i32 2
  %91 = load i8, i8* %90, align 1
  %92 = tail call i64 @strlen(i8* %89) #15
  %93 = getelementptr inbounds %"class.flexbuffers::String", %"class.flexbuffers::String"* %0, i64 0, i32 0, i32 0, i32 0
  store i8* %89, i8** %93, align 8
  %94 = getelementptr inbounds %"class.flexbuffers::String", %"class.flexbuffers::String"* %0, i64 0, i32 0, i32 0, i32 1
  store i8 %91, i8* %94, align 8
  %95 = getelementptr inbounds %"class.flexbuffers::String", %"class.flexbuffers::String"* %0, i64 0, i32 0, i32 1
  store i64 %92, i64* %95, align 8
  br label %101

96:                                               ; preds = %2
  %97 = load i64, i64* bitcast (i8** @_ZZN11flexbuffers6String11EmptyStringEvE12empty_string to i64*), align 8, !noalias !23
  %98 = bitcast %"class.flexbuffers::String"* %0 to i64*
  store i64 %97, i64* %98, align 8, !alias.scope !23
  %99 = getelementptr inbounds %"class.flexbuffers::String", %"class.flexbuffers::String"* %0, i64 0, i32 0, i32 0, i32 1
  store i8 1, i8* %99, align 8, !alias.scope !23
  %100 = getelementptr inbounds %"class.flexbuffers::String", %"class.flexbuffers::String"* %0, i64 0, i32 0, i32 1
  store i64 0, i64* %100, align 8, !alias.scope !23
  br label %101

101:                                              ; preds = %96, %86, %60
  ret void
}

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare i64 @strtoull(i8* readonly, i8** nocapture, i32) local_unnamed_addr #7

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK11flexbuffers9Reference7AsInt64Ev(%"class.flexbuffers::Reference"*) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca i8*, align 8
  %3 = alloca %"class.flexbuffers::String", align 8
  %4 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  switch i32 %5, label %325 [
    i32 1, label %6
    i32 6, label %30
    i32 2, label %79
    i32 7, label %103
    i32 3, label %152
    i32 8, label %179
    i32 26, label %301
    i32 5, label %231
    i32 10, label %249
  ]

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %10 = load i8, i8* %9, align 8
  %11 = icmp ult i8 %10, 4
  br i1 %11, label %12, label %21

12:                                               ; preds = %6
  %13 = icmp ult i8 %10, 2
  br i1 %13, label %14, label %17

14:                                               ; preds = %12
  %15 = load i8, i8* %8, align 1
  %16 = sext i8 %15 to i64
  br label %325

17:                                               ; preds = %12
  %18 = bitcast i8* %8 to i16*
  %19 = load i16, i16* %18, align 2
  %20 = sext i16 %19 to i64
  br label %325

21:                                               ; preds = %6
  %22 = icmp ult i8 %10, 8
  br i1 %22, label %23, label %27

23:                                               ; preds = %21
  %24 = bitcast i8* %8 to i32*
  %25 = load i32, i32* %24, align 4
  %26 = sext i32 %25 to i64
  br label %325

27:                                               ; preds = %21
  %28 = bitcast i8* %8 to i64*
  %29 = load i64, i64* %28, align 8
  br label %325

30:                                               ; preds = %1
  %31 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %34 = load i8, i8* %33, align 8
  %35 = icmp ult i8 %34, 4
  br i1 %35, label %36, label %45

36:                                               ; preds = %30
  %37 = icmp ult i8 %34, 2
  br i1 %37, label %38, label %41

38:                                               ; preds = %36
  %39 = load i8, i8* %32, align 1
  %40 = zext i8 %39 to i64
  br label %54

41:                                               ; preds = %36
  %42 = bitcast i8* %32 to i16*
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i64
  br label %54

45:                                               ; preds = %30
  %46 = icmp ult i8 %34, 8
  br i1 %46, label %47, label %51

47:                                               ; preds = %45
  %48 = bitcast i8* %32 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = zext i32 %49 to i64
  br label %54

51:                                               ; preds = %45
  %52 = bitcast i8* %32 to i64*
  %53 = load i64, i64* %52, align 8
  br label %54

54:                                               ; preds = %38, %41, %47, %51
  %55 = phi i64 [ %40, %38 ], [ %44, %41 ], [ %50, %47 ], [ %53, %51 ]
  %56 = sub i64 0, %55
  %57 = getelementptr inbounds i8, i8* %32, i64 %56
  %58 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 2
  %59 = load i8, i8* %58, align 1
  %60 = icmp ult i8 %59, 4
  br i1 %60, label %61, label %70

61:                                               ; preds = %54
  %62 = icmp ult i8 %59, 2
  br i1 %62, label %63, label %66

63:                                               ; preds = %61
  %64 = load i8, i8* %57, align 1
  %65 = sext i8 %64 to i64
  br label %325

66:                                               ; preds = %61
  %67 = bitcast i8* %57 to i16*
  %68 = load i16, i16* %67, align 2
  %69 = sext i16 %68 to i64
  br label %325

70:                                               ; preds = %54
  %71 = icmp ult i8 %59, 8
  br i1 %71, label %72, label %76

72:                                               ; preds = %70
  %73 = bitcast i8* %57 to i32*
  %74 = load i32, i32* %73, align 4
  %75 = sext i32 %74 to i64
  br label %325

76:                                               ; preds = %70
  %77 = bitcast i8* %57 to i64*
  %78 = load i64, i64* %77, align 8
  br label %325

79:                                               ; preds = %1
  %80 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %81 = load i8*, i8** %80, align 8
  %82 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %83 = load i8, i8* %82, align 8
  %84 = icmp ult i8 %83, 4
  br i1 %84, label %85, label %94

85:                                               ; preds = %79
  %86 = icmp ult i8 %83, 2
  br i1 %86, label %87, label %90

87:                                               ; preds = %85
  %88 = load i8, i8* %81, align 1
  %89 = zext i8 %88 to i64
  br label %325

90:                                               ; preds = %85
  %91 = bitcast i8* %81 to i16*
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i64
  br label %325

94:                                               ; preds = %79
  %95 = icmp ult i8 %83, 8
  br i1 %95, label %96, label %100

96:                                               ; preds = %94
  %97 = bitcast i8* %81 to i32*
  %98 = load i32, i32* %97, align 4
  %99 = zext i32 %98 to i64
  br label %325

100:                                              ; preds = %94
  %101 = bitcast i8* %81 to i64*
  %102 = load i64, i64* %101, align 8
  br label %325

103:                                              ; preds = %1
  %104 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %105 = load i8*, i8** %104, align 8
  %106 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %107 = load i8, i8* %106, align 8
  %108 = icmp ult i8 %107, 4
  br i1 %108, label %109, label %118

109:                                              ; preds = %103
  %110 = icmp ult i8 %107, 2
  br i1 %110, label %111, label %114

111:                                              ; preds = %109
  %112 = load i8, i8* %105, align 1
  %113 = zext i8 %112 to i64
  br label %127

114:                                              ; preds = %109
  %115 = bitcast i8* %105 to i16*
  %116 = load i16, i16* %115, align 2
  %117 = zext i16 %116 to i64
  br label %127

118:                                              ; preds = %103
  %119 = icmp ult i8 %107, 8
  br i1 %119, label %120, label %124

120:                                              ; preds = %118
  %121 = bitcast i8* %105 to i32*
  %122 = load i32, i32* %121, align 4
  %123 = zext i32 %122 to i64
  br label %127

124:                                              ; preds = %118
  %125 = bitcast i8* %105 to i64*
  %126 = load i64, i64* %125, align 8
  br label %127

127:                                              ; preds = %111, %114, %120, %124
  %128 = phi i64 [ %113, %111 ], [ %117, %114 ], [ %123, %120 ], [ %126, %124 ]
  %129 = sub i64 0, %128
  %130 = getelementptr inbounds i8, i8* %105, i64 %129
  %131 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 2
  %132 = load i8, i8* %131, align 1
  %133 = icmp ult i8 %132, 4
  br i1 %133, label %134, label %143

134:                                              ; preds = %127
  %135 = icmp ult i8 %132, 2
  br i1 %135, label %136, label %139

136:                                              ; preds = %134
  %137 = load i8, i8* %130, align 1
  %138 = zext i8 %137 to i64
  br label %325

139:                                              ; preds = %134
  %140 = bitcast i8* %130 to i16*
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i64
  br label %325

143:                                              ; preds = %127
  %144 = icmp ult i8 %132, 8
  br i1 %144, label %145, label %149

145:                                              ; preds = %143
  %146 = bitcast i8* %130 to i32*
  %147 = load i32, i32* %146, align 4
  %148 = zext i32 %147 to i64
  br label %325

149:                                              ; preds = %143
  %150 = bitcast i8* %130 to i64*
  %151 = load i64, i64* %150, align 8
  br label %325

152:                                              ; preds = %1
  %153 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %154 = load i8*, i8** %153, align 8
  %155 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %156 = load i8, i8* %155, align 8
  %157 = icmp ult i8 %156, 4
  br i1 %157, label %158, label %167

158:                                              ; preds = %152
  %159 = icmp ult i8 %156, 2
  br i1 %159, label %160, label %163

160:                                              ; preds = %158
  %161 = load i8, i8* %154, align 1
  %162 = sitofp i8 %161 to double
  br label %176

163:                                              ; preds = %158
  %164 = bitcast i8* %154 to i16*
  %165 = load i16, i16* %164, align 2
  %166 = sitofp i16 %165 to double
  br label %176

167:                                              ; preds = %152
  %168 = icmp ult i8 %156, 8
  br i1 %168, label %169, label %173

169:                                              ; preds = %167
  %170 = bitcast i8* %154 to float*
  %171 = load float, float* %170, align 4
  %172 = fpext float %171 to double
  br label %176

173:                                              ; preds = %167
  %174 = bitcast i8* %154 to double*
  %175 = load double, double* %174, align 8
  br label %176

176:                                              ; preds = %160, %163, %169, %173
  %177 = phi double [ %162, %160 ], [ %166, %163 ], [ %172, %169 ], [ %175, %173 ]
  %178 = fptosi double %177 to i64
  br label %325

179:                                              ; preds = %1
  %180 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %181 = load i8*, i8** %180, align 8
  %182 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %183 = load i8, i8* %182, align 8
  %184 = icmp ult i8 %183, 4
  br i1 %184, label %185, label %194

185:                                              ; preds = %179
  %186 = icmp ult i8 %183, 2
  br i1 %186, label %187, label %190

187:                                              ; preds = %185
  %188 = load i8, i8* %181, align 1
  %189 = zext i8 %188 to i64
  br label %203

190:                                              ; preds = %185
  %191 = bitcast i8* %181 to i16*
  %192 = load i16, i16* %191, align 2
  %193 = zext i16 %192 to i64
  br label %203

194:                                              ; preds = %179
  %195 = icmp ult i8 %183, 8
  br i1 %195, label %196, label %200

196:                                              ; preds = %194
  %197 = bitcast i8* %181 to i32*
  %198 = load i32, i32* %197, align 4
  %199 = zext i32 %198 to i64
  br label %203

200:                                              ; preds = %194
  %201 = bitcast i8* %181 to i64*
  %202 = load i64, i64* %201, align 8
  br label %203

203:                                              ; preds = %187, %190, %196, %200
  %204 = phi i64 [ %189, %187 ], [ %193, %190 ], [ %199, %196 ], [ %202, %200 ]
  %205 = sub i64 0, %204
  %206 = getelementptr inbounds i8, i8* %181, i64 %205
  %207 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 2
  %208 = load i8, i8* %207, align 1
  %209 = icmp ult i8 %208, 4
  br i1 %209, label %210, label %219

210:                                              ; preds = %203
  %211 = icmp ult i8 %208, 2
  br i1 %211, label %212, label %215

212:                                              ; preds = %210
  %213 = load i8, i8* %206, align 1
  %214 = sitofp i8 %213 to double
  br label %228

215:                                              ; preds = %210
  %216 = bitcast i8* %206 to i16*
  %217 = load i16, i16* %216, align 2
  %218 = sitofp i16 %217 to double
  br label %228

219:                                              ; preds = %203
  %220 = icmp ult i8 %208, 8
  br i1 %220, label %221, label %225

221:                                              ; preds = %219
  %222 = bitcast i8* %206 to float*
  %223 = load float, float* %222, align 4
  %224 = fpext float %223 to double
  br label %228

225:                                              ; preds = %219
  %226 = bitcast i8* %206 to double*
  %227 = load double, double* %226, align 8
  br label %228

228:                                              ; preds = %212, %215, %221, %225
  %229 = phi double [ %214, %212 ], [ %218, %215 ], [ %224, %221 ], [ %227, %225 ]
  %230 = fptosi double %229 to i64
  br label %325

231:                                              ; preds = %1
  %232 = bitcast %"class.flexbuffers::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %232) #12
  call void @_ZNK11flexbuffers9Reference8AsStringEv(%"class.flexbuffers::String"* nonnull sret %3, %"class.flexbuffers::Reference"* %0)
  %233 = getelementptr inbounds %"class.flexbuffers::String", %"class.flexbuffers::String"* %3, i64 0, i32 0, i32 0, i32 0
  %234 = load i8*, i8** %233, align 8
  %235 = tail call i32* @__errno_location() #16
  store i32 0, i32* %235, align 4
  %236 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %236) #12
  store i8* %234, i8** %2, align 8
  %237 = call i64 @strtoll(i8* %234, i8** nonnull %2, i32 10) #12
  %238 = load i8*, i8** %2, align 8
  %239 = load i8, i8* %238, align 1
  %240 = icmp ne i8 %239, 0
  %241 = icmp eq i8* %238, %234
  %242 = or i1 %241, %240
  br i1 %242, label %247, label %243

243:                                              ; preds = %231
  %244 = load i32, i32* %235, align 4
  %245 = icmp eq i32 %244, 0
  %246 = select i1 %245, i64 %237, i64 0
  br label %247

247:                                              ; preds = %243, %231
  %248 = phi i64 [ 0, %231 ], [ %246, %243 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %236) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %232) #12
  br label %325

249:                                              ; preds = %1
  %250 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %251 = load i8*, i8** %250, align 8, !noalias !26
  %252 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %253 = load i8, i8* %252, align 8, !noalias !26
  %254 = icmp ult i8 %253, 4
  br i1 %254, label %255, label %264

255:                                              ; preds = %249
  %256 = icmp ult i8 %253, 2
  br i1 %256, label %257, label %260

257:                                              ; preds = %255
  %258 = load i8, i8* %251, align 1, !noalias !26
  %259 = zext i8 %258 to i64
  br label %273

260:                                              ; preds = %255
  %261 = bitcast i8* %251 to i16*
  %262 = load i16, i16* %261, align 2, !noalias !26
  %263 = zext i16 %262 to i64
  br label %273

264:                                              ; preds = %249
  %265 = icmp ult i8 %253, 8
  br i1 %265, label %266, label %270

266:                                              ; preds = %264
  %267 = bitcast i8* %251 to i32*
  %268 = load i32, i32* %267, align 4, !noalias !26
  %269 = zext i32 %268 to i64
  br label %273

270:                                              ; preds = %264
  %271 = bitcast i8* %251 to i64*
  %272 = load i64, i64* %271, align 8, !noalias !26
  br label %273

273:                                              ; preds = %270, %266, %260, %257
  %274 = phi i64 [ %259, %257 ], [ %263, %260 ], [ %269, %266 ], [ %272, %270 ]
  %275 = sub i64 0, %274
  %276 = getelementptr inbounds i8, i8* %251, i64 %275
  %277 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 2
  %278 = load i8, i8* %277, align 1, !noalias !26
  %279 = zext i8 %278 to i64
  %280 = sub nsw i64 0, %279
  %281 = getelementptr inbounds i8, i8* %276, i64 %280
  %282 = icmp ult i8 %278, 4
  br i1 %282, label %283, label %292

283:                                              ; preds = %273
  %284 = icmp ult i8 %278, 2
  br i1 %284, label %285, label %288

285:                                              ; preds = %283
  %286 = load i8, i8* %281, align 1, !noalias !26
  %287 = zext i8 %286 to i64
  br label %325

288:                                              ; preds = %283
  %289 = bitcast i8* %281 to i16*
  %290 = load i16, i16* %289, align 2, !noalias !26
  %291 = zext i16 %290 to i64
  br label %325

292:                                              ; preds = %273
  %293 = icmp ult i8 %278, 8
  br i1 %293, label %294, label %298

294:                                              ; preds = %292
  %295 = bitcast i8* %281 to i32*
  %296 = load i32, i32* %295, align 4, !noalias !26
  %297 = zext i32 %296 to i64
  br label %325

298:                                              ; preds = %292
  %299 = bitcast i8* %281 to i64*
  %300 = load i64, i64* %299, align 8, !noalias !26
  br label %325

301:                                              ; preds = %1
  %302 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 0
  %303 = load i8*, i8** %302, align 8
  %304 = getelementptr inbounds %"class.flexbuffers::Reference", %"class.flexbuffers::Reference"* %0, i64 0, i32 1
  %305 = load i8, i8* %304, align 8
  %306 = icmp ult i8 %305, 4
  br i1 %306, label %307, label %316

307:                                              ; preds = %301
  %308 = icmp ult i8 %305, 2
  br i1 %308, label %309, label %312

309:                                              ; preds = %307
  %310 = load i8, i8* %303, align 1
  %311 = sext i8 %310 to i64
  br label %325

312:                                              ; preds = %307
  %313 = bitcast i8* %303 to i16*
  %314 = load i16, i16* %313, align 2
  %315 = sext i16 %314 to i64
  br label %325

316:                                              ; preds = %301
  %317 = icmp ult i8 %305, 8
  br i1 %317, label %318, label %322

318:                                              ; preds = %316
  %319 = bitcast i8* %303 to i32*
  %320 = load i32, i32* %319, align 4
  %321 = sext i32 %320 to i64
  br label %325

322:                                              ; preds = %316
  %323 = bitcast i8* %303 to i64*
  %324 = load i64, i64* %323, align 8
  br label %325

325:                                              ; preds = %322, %318, %312, %309, %298, %294, %288, %285, %149, %145, %139, %136, %100, %96, %90, %87, %76, %72, %66, %63, %27, %23, %17, %14, %1, %247, %228, %176
  %326 = phi i64 [ %248, %247 ], [ %230, %228 ], [ %178, %176 ], [ 0, %1 ], [ %16, %14 ], [ %20, %17 ], [ %26, %23 ], [ %29, %27 ], [ %65, %63 ], [ %69, %66 ], [ %75, %72 ], [ %78, %76 ], [ %89, %87 ], [ %93, %90 ], [ %99, %96 ], [ %102, %100 ], [ %138, %136 ], [ %142, %139 ], [ %148, %145 ], [ %151, %149 ], [ %287, %285 ], [ %291, %288 ], [ %297, %294 ], [ %300, %298 ], [ %311, %309 ], [ %315, %312 ], [ %321, %318 ], [ %324, %322 ]
  ret i64 %326
}

; Function Attrs: nofree nounwind
declare i64 @strtoll(i8* readonly, i8** nocapture, i32) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

declare %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32) local_unnamed_addr #10

declare { <2 x float>, i64 } @_ZN9translate21GetQuantizationParamsEffi(float, float, i32) local_unnamed_addr #10

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn nounwind }
attributes #15 = { nounwind readonly }
attributes #16 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK11flexbuffers9Reference5AsMapEv: argument 0"}
!4 = distinct !{!4, !"_ZNK11flexbuffers9Reference5AsMapEv"}
!5 = !{!6, !3}
!6 = distinct !{!6, !7, !"_ZN11flexbuffers3Map8EmptyMapEv: argument 0"}
!7 = distinct !{!7, !"_ZN11flexbuffers3Map8EmptyMapEv"}
!8 = !{i8 0, i8 2}
!9 = !{!10}
!10 = distinct !{!10, !11}
!11 = distinct !{!11, !"LVerDomain"}
!12 = !{!13}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.isvectorized", i32 1}
!16 = distinct !{!16, !15}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZNK11flexbuffers3Map4KeysEv: argument 0"}
!19 = distinct !{!19, !"_ZNK11flexbuffers3Map4KeysEv"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZNK11flexbuffers9Reference8AsVectorEv: argument 0"}
!22 = distinct !{!22, !"_ZNK11flexbuffers9Reference8AsVectorEv"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZN11flexbuffers6String11EmptyStringEv: argument 0"}
!25 = distinct !{!25, !"_ZN11flexbuffers6String11EmptyStringEv"}
!26 = !{!27}
!27 = distinct !{!27, !28, !"_ZNK11flexbuffers9Reference8AsVectorEv: argument 0"}
!28 = distinct !{!28, !"_ZNK11flexbuffers9Reference8AsVectorEv"}
