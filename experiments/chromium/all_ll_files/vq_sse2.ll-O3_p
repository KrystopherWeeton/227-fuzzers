; ModuleID = '../../third_party/opus/src/celt/x86/vq_sse2.c'
source_filename = "../../third_party/opus/src/celt/x86/vq_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nounwind ssp uwtable
define hidden float @op_pvq_search_sse2(float* nocapture readonly, i32* nocapture, i32, i32, i32) local_unnamed_addr #0 {
  %6 = add nsw i32 %3, 3
  %7 = sext i32 %6 to i64
  %8 = shl nsw i64 %7, 2
  %9 = alloca float, i64 %7, align 16
  %10 = bitcast float* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 %8, i1 false)
  %11 = alloca float, i64 %7, align 16
  %12 = bitcast float* %11 to i8*
  %13 = alloca float, i64 %7, align 16
  %14 = bitcast float* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 %8, i1 false)
  %15 = bitcast float* %0 to i8*
  %16 = sext i32 %3 to i64
  %17 = shl nsw i64 %16, 2
  %18 = call i64 @llvm.usub.sat.i64(i64 %8, i64 %17)
  %19 = getelementptr float, float* %11, i64 %16
  %20 = bitcast float* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %20, i8 -86, i64 %18, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %12, i8* align 4 %15, i64 %17, i1 false)
  %21 = add nsw i32 %3, 2
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds float, float* %11, i64 %22
  store float 0.000000e+00, float* %23, align 4
  %24 = add nsw i32 %3, 1
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds float, float* %11, i64 %25
  store float 0.000000e+00, float* %26, align 4
  %27 = getelementptr inbounds float, float* %11, i64 %16
  store float 0.000000e+00, float* %27, align 4
  %28 = icmp sgt i32 %3, 0
  br i1 %28, label %29, label %93

29:                                               ; preds = %5
  %30 = bitcast i32* %1 to i8*
  %31 = add nsw i32 %3, -1
  %32 = lshr i32 %31, 2
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 4
  %35 = add nuw nsw i64 %34, 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 0, i64 %35, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 1 %30, i8 0, i64 %35, i1 false)
  %36 = add nsw i64 %16, -1
  %37 = lshr i64 %36, 2
  %38 = add nuw nsw i64 %37, 1
  %39 = and i64 %38, 1
  %40 = icmp eq i64 %37, 0
  br i1 %40, label %75, label %41

41:                                               ; preds = %29
  %42 = sub nuw nsw i64 %38, %39
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %72, %43 ]
  %45 = phi <4 x float> [ zeroinitializer, %41 ], [ %68, %43 ]
  %46 = phi i64 [ %42, %41 ], [ %73, %43 ]
  %47 = getelementptr inbounds float, float* %11, i64 %44
  %48 = bitcast float* %47 to <4 x float>*
  %49 = load <4 x float>, <4 x float>* %48, align 16
  %50 = fcmp olt <4 x float> %49, zeroinitializer
  %51 = sext <4 x i1> %50 to <4 x i32>
  %52 = bitcast <4 x float> %49 to <4 x i32>
  %53 = and <4 x i32> %52, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %54 = bitcast <4 x i32> %53 to <4 x float>
  %55 = fadd <4 x float> %45, %54
  %56 = bitcast float* %47 to <4 x i32>*
  store <4 x i32> %53, <4 x i32>* %56, align 16
  %57 = getelementptr inbounds float, float* %13, i64 %44
  %58 = bitcast float* %57 to <4 x i32>*
  store <4 x i32> %51, <4 x i32>* %58, align 16
  %59 = or i64 %44, 4
  %60 = getelementptr inbounds float, float* %11, i64 %59
  %61 = bitcast float* %60 to <4 x float>*
  %62 = load <4 x float>, <4 x float>* %61, align 16
  %63 = fcmp olt <4 x float> %62, zeroinitializer
  %64 = sext <4 x i1> %63 to <4 x i32>
  %65 = bitcast <4 x float> %62 to <4 x i32>
  %66 = and <4 x i32> %65, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %67 = bitcast <4 x i32> %66 to <4 x float>
  %68 = fadd <4 x float> %55, %67
  %69 = bitcast float* %60 to <4 x i32>*
  store <4 x i32> %66, <4 x i32>* %69, align 16
  %70 = getelementptr inbounds float, float* %13, i64 %59
  %71 = bitcast float* %70 to <4 x i32>*
  store <4 x i32> %64, <4 x i32>* %71, align 16
  %72 = add nuw nsw i64 %44, 8
  %73 = add i64 %46, -2
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %43

75:                                               ; preds = %43, %29
  %76 = phi <4 x float> [ undef, %29 ], [ %68, %43 ]
  %77 = phi i64 [ 0, %29 ], [ %72, %43 ]
  %78 = phi <4 x float> [ zeroinitializer, %29 ], [ %68, %43 ]
  %79 = icmp eq i64 %39, 0
  br i1 %79, label %93, label %80

80:                                               ; preds = %75
  %81 = getelementptr inbounds float, float* %11, i64 %77
  %82 = bitcast float* %81 to <4 x float>*
  %83 = load <4 x float>, <4 x float>* %82, align 16
  %84 = fcmp olt <4 x float> %83, zeroinitializer
  %85 = sext <4 x i1> %84 to <4 x i32>
  %86 = bitcast <4 x float> %83 to <4 x i32>
  %87 = and <4 x i32> %86, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %88 = bitcast float* %81 to <4 x i32>*
  store <4 x i32> %87, <4 x i32>* %88, align 16
  %89 = getelementptr inbounds float, float* %13, i64 %77
  %90 = bitcast float* %89 to <4 x i32>*
  store <4 x i32> %85, <4 x i32>* %90, align 16
  %91 = bitcast <4 x i32> %87 to <4 x float>
  %92 = fadd <4 x float> %78, %91
  br label %93

93:                                               ; preds = %80, %75, %5
  %94 = phi <4 x float> [ zeroinitializer, %5 ], [ %76, %75 ], [ %92, %80 ]
  %95 = shufflevector <4 x float> %94, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %96 = fadd <4 x float> %94, %95
  %97 = shufflevector <4 x float> %96, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %98 = fadd <4 x float> %96, %97
  %99 = ashr i32 %3, 1
  %100 = icmp slt i32 %99, %2
  br i1 %100, label %101, label %219

101:                                              ; preds = %93
  %102 = extractelement <4 x float> %98, i32 0
  %103 = fcmp ogt float %102, 0x3CD203AFA0000000
  %104 = fcmp olt float %102, 6.400000e+01
  %105 = and i1 %103, %104
  br i1 %105, label %114, label %106

106:                                              ; preds = %101
  store float 1.000000e+00, float* %11, align 16
  %107 = getelementptr inbounds float, float* %11, i64 1
  %108 = bitcast float* %107 to i8*
  %109 = icmp sgt i32 %3, 2
  %110 = select i1 %109, i32 %3, i32 2
  %111 = add nsw i32 %110, -1
  %112 = zext i32 %111 to i64
  %113 = shl nuw nsw i64 %112, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %108, i8 0, i64 %113, i1 false)
  br label %114

114:                                              ; preds = %106, %101
  %115 = phi <4 x float> [ %98, %101 ], [ <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, %106 ]
  %116 = sitofp i32 %2 to double
  %117 = fadd double %116, 8.000000e-01
  %118 = fptrunc double %117 to float
  %119 = insertelement <4 x float> undef, float %118, i32 0
  %120 = shufflevector <4 x float> %119, <4 x float> undef, <4 x i32> zeroinitializer
  %121 = tail call <4 x float> @llvm.x86.sse.rcp.ps(<4 x float> %115) #4
  %122 = fmul <4 x float> %120, %121
  br i1 %28, label %123, label %199

123:                                              ; preds = %114
  %124 = add nsw i64 %16, -1
  %125 = lshr i64 %124, 2
  %126 = add nuw nsw i64 %125, 1
  %127 = and i64 %126, 1
  %128 = icmp eq i64 %125, 0
  br i1 %128, label %173, label %129

129:                                              ; preds = %123
  %130 = sub nuw nsw i64 %126, %127
  br label %131

131:                                              ; preds = %131, %129
  %132 = phi i64 [ 0, %129 ], [ %170, %131 ]
  %133 = phi <4 x i32> [ zeroinitializer, %129 ], [ %159, %131 ]
  %134 = phi <4 x float> [ zeroinitializer, %129 ], [ %166, %131 ]
  %135 = phi <4 x float> [ zeroinitializer, %129 ], [ %164, %131 ]
  %136 = phi i64 [ %130, %129 ], [ %171, %131 ]
  %137 = getelementptr inbounds float, float* %11, i64 %132
  %138 = bitcast float* %137 to <4 x float>*
  %139 = load <4 x float>, <4 x float>* %138, align 16
  %140 = fmul <4 x float> %122, %139
  %141 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %140) #4
  %142 = add <4 x i32> %141, %133
  %143 = getelementptr inbounds i32, i32* %1, i64 %132
  %144 = bitcast i32* %143 to <4 x i32>*
  store <4 x i32> %141, <4 x i32>* %144, align 1
  %145 = sitofp <4 x i32> %141 to <4 x float>
  %146 = fmul <4 x float> %139, %145
  %147 = fadd <4 x float> %135, %146
  %148 = fmul <4 x float> %145, %145
  %149 = fadd <4 x float> %134, %148
  %150 = getelementptr inbounds float, float* %9, i64 %132
  %151 = fadd <4 x float> %145, %145
  %152 = bitcast float* %150 to <4 x float>*
  store <4 x float> %151, <4 x float>* %152, align 16
  %153 = or i64 %132, 4
  %154 = getelementptr inbounds float, float* %11, i64 %153
  %155 = bitcast float* %154 to <4 x float>*
  %156 = load <4 x float>, <4 x float>* %155, align 16
  %157 = fmul <4 x float> %122, %156
  %158 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %157) #4
  %159 = add <4 x i32> %158, %142
  %160 = getelementptr inbounds i32, i32* %1, i64 %153
  %161 = bitcast i32* %160 to <4 x i32>*
  store <4 x i32> %158, <4 x i32>* %161, align 1
  %162 = sitofp <4 x i32> %158 to <4 x float>
  %163 = fmul <4 x float> %156, %162
  %164 = fadd <4 x float> %147, %163
  %165 = fmul <4 x float> %162, %162
  %166 = fadd <4 x float> %149, %165
  %167 = getelementptr inbounds float, float* %9, i64 %153
  %168 = fadd <4 x float> %162, %162
  %169 = bitcast float* %167 to <4 x float>*
  store <4 x float> %168, <4 x float>* %169, align 16
  %170 = add nuw nsw i64 %132, 8
  %171 = add i64 %136, -2
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %173, label %131

173:                                              ; preds = %131, %123
  %174 = phi <4 x i32> [ undef, %123 ], [ %159, %131 ]
  %175 = phi <4 x float> [ undef, %123 ], [ %164, %131 ]
  %176 = phi <4 x float> [ undef, %123 ], [ %166, %131 ]
  %177 = phi i64 [ 0, %123 ], [ %170, %131 ]
  %178 = phi <4 x i32> [ zeroinitializer, %123 ], [ %159, %131 ]
  %179 = phi <4 x float> [ zeroinitializer, %123 ], [ %166, %131 ]
  %180 = phi <4 x float> [ zeroinitializer, %123 ], [ %164, %131 ]
  %181 = icmp eq i64 %127, 0
  br i1 %181, label %199, label %182

182:                                              ; preds = %173
  %183 = getelementptr inbounds float, float* %11, i64 %177
  %184 = bitcast float* %183 to <4 x float>*
  %185 = load <4 x float>, <4 x float>* %184, align 16
  %186 = fmul <4 x float> %122, %185
  %187 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %186) #4
  %188 = getelementptr inbounds i32, i32* %1, i64 %177
  %189 = bitcast i32* %188 to <4 x i32>*
  store <4 x i32> %187, <4 x i32>* %189, align 1
  %190 = sitofp <4 x i32> %187 to <4 x float>
  %191 = getelementptr inbounds float, float* %9, i64 %177
  %192 = fadd <4 x float> %190, %190
  %193 = bitcast float* %191 to <4 x float>*
  store <4 x float> %192, <4 x float>* %193, align 16
  %194 = fmul <4 x float> %190, %190
  %195 = fadd <4 x float> %179, %194
  %196 = fmul <4 x float> %185, %190
  %197 = fadd <4 x float> %180, %196
  %198 = add <4 x i32> %187, %178
  br label %199

199:                                              ; preds = %182, %173, %114
  %200 = phi <4 x float> [ zeroinitializer, %114 ], [ %175, %173 ], [ %197, %182 ]
  %201 = phi <4 x float> [ zeroinitializer, %114 ], [ %176, %173 ], [ %195, %182 ]
  %202 = phi <4 x i32> [ zeroinitializer, %114 ], [ %174, %173 ], [ %198, %182 ]
  %203 = shufflevector <4 x i32> %202, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %204 = add <4 x i32> %203, %202
  %205 = shufflevector <4 x i32> %204, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %206 = add <4 x i32> %205, %204
  %207 = extractelement <4 x i32> %206, i32 0
  %208 = sub nsw i32 %2, %207
  %209 = shufflevector <4 x float> %200, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %210 = fadd <4 x float> %200, %209
  %211 = shufflevector <4 x float> %210, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %212 = fadd <4 x float> %210, %211
  %213 = extractelement <4 x float> %212, i32 0
  %214 = shufflevector <4 x float> %201, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %215 = fadd <4 x float> %201, %214
  %216 = shufflevector <4 x float> %215, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %217 = fadd <4 x float> %215, %216
  %218 = extractelement <4 x float> %217, i32 0
  br label %219

219:                                              ; preds = %199, %93
  %220 = phi float [ %213, %199 ], [ 0.000000e+00, %93 ]
  %221 = phi float [ %218, %199 ], [ 0.000000e+00, %93 ]
  %222 = phi i32 [ %208, %199 ], [ %2, %93 ]
  store float -1.000000e+02, float* %23, align 4
  store float -1.000000e+02, float* %26, align 4
  store float -1.000000e+02, float* %27, align 4
  %223 = getelementptr inbounds float, float* %9, i64 %22
  store float 1.000000e+02, float* %223, align 4
  %224 = getelementptr inbounds float, float* %9, i64 %25
  store float 1.000000e+02, float* %224, align 4
  %225 = getelementptr inbounds float, float* %9, i64 %16
  store float 1.000000e+02, float* %225, align 4
  %226 = icmp sgt i32 %222, %6
  br i1 %226, label %227, label %236

227:                                              ; preds = %219
  %228 = sitofp i32 %222 to float
  %229 = fmul float %228, %228
  %230 = fadd float %221, %229
  %231 = load float, float* %9, align 16
  %232 = fmul float %231, %228
  %233 = fadd float %230, %232
  %234 = load i32, i32* %1, align 4
  %235 = add nsw i32 %234, %222
  store i32 %235, i32* %1, align 4
  br label %340

236:                                              ; preds = %219
  %237 = icmp sgt i32 %222, 0
  br i1 %237, label %238, label %340

238:                                              ; preds = %236
  br i1 %28, label %247, label %239

239:                                              ; preds = %238
  %240 = load float, float* %9, align 16
  %241 = load i32, i32* %1, align 4
  %242 = add i32 %222, -1
  %243 = and i32 %222, 3
  %244 = icmp ult i32 %242, 3
  br i1 %244, label %317, label %245

245:                                              ; preds = %239
  %246 = sub i32 %222, %243
  br label %350

247:                                              ; preds = %238, %284
  %248 = phi i32 [ %315, %284 ], [ 0, %238 ]
  %249 = phi float [ %310, %284 ], [ %221, %238 ]
  %250 = phi float [ %307, %284 ], [ %220, %238 ]
  %251 = fadd float %249, 1.000000e+00
  %252 = insertelement <4 x float> undef, float %250, i32 0
  %253 = shufflevector <4 x float> %252, <4 x float> undef, <4 x i32> zeroinitializer
  %254 = insertelement <4 x float> undef, float %251, i32 0
  %255 = shufflevector <4 x float> %254, <4 x float> undef, <4 x i32> zeroinitializer
  br label %256

256:                                              ; preds = %247, %256
  %257 = phi i64 [ 0, %247 ], [ %282, %256 ]
  %258 = phi <8 x i16> [ zeroinitializer, %247 ], [ %278, %256 ]
  %259 = phi <2 x i64> [ <i64 4294967296, i64 12884901890>, %247 ], [ %281, %256 ]
  %260 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %247 ], [ %280, %256 ]
  %261 = phi <4 x float> [ zeroinitializer, %247 ], [ %279, %256 ]
  %262 = getelementptr inbounds float, float* %11, i64 %257
  %263 = bitcast float* %262 to <4 x float>*
  %264 = load <4 x float>, <4 x float>* %263, align 16
  %265 = getelementptr inbounds float, float* %9, i64 %257
  %266 = bitcast float* %265 to <4 x float>*
  %267 = load <4 x float>, <4 x float>* %266, align 16
  %268 = fadd <4 x float> %253, %264
  %269 = fadd <4 x float> %255, %267
  %270 = tail call <4 x float> @llvm.x86.sse.rsqrt.ps(<4 x float> %269) #4
  %271 = fmul <4 x float> %268, %270
  %272 = fcmp olt <4 x float> %261, %271
  %273 = sext <4 x i1> %272 to <4 x i32>
  %274 = bitcast <4 x i32> %273 to <2 x i64>
  %275 = and <2 x i64> %259, %274
  %276 = bitcast <2 x i64> %275 to <8 x i16>
  %277 = icmp sgt <8 x i16> %258, %276
  %278 = select <8 x i1> %277, <8 x i16> %258, <8 x i16> %276
  %279 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %261, <4 x float> %271) #4
  %280 = add <4 x i32> %260, <i32 4, i32 4, i32 4, i32 4>
  %281 = bitcast <4 x i32> %280 to <2 x i64>
  %282 = add nuw nsw i64 %257, 4
  %283 = icmp slt i64 %282, %16
  br i1 %283, label %256, label %284

284:                                              ; preds = %256
  %285 = bitcast <8 x i16> %278 to <2 x i64>
  %286 = shufflevector <4 x float> %279, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %287 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %279, <4 x float> %286) #4
  %288 = shufflevector <4 x float> %287, <4 x float> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %289 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> %287, <4 x float> %288) #4
  %290 = fcmp oeq <4 x float> %279, %289
  %291 = sext <4 x i1> %290 to <4 x i32>
  %292 = bitcast <4 x i32> %291 to <2 x i64>
  %293 = and <2 x i64> %292, %285
  %294 = shufflevector <2 x i64> %293, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %295 = bitcast <2 x i64> %293 to <8 x i16>
  %296 = bitcast <2 x i64> %294 to <8 x i16>
  %297 = icmp sgt <8 x i16> %295, %296
  %298 = select <8 x i1> %297, <8 x i16> %295, <8 x i16> %296
  %299 = shufflevector <8 x i16> %298, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 4, i32 5, i32 6, i32 7>
  %300 = icmp sgt <8 x i16> %298, %299
  %301 = select <8 x i1> %300, <8 x i16> %298, <8 x i16> %299
  %302 = bitcast <8 x i16> %301 to <4 x i32>
  %303 = extractelement <4 x i32> %302, i32 0
  %304 = sext i32 %303 to i64
  %305 = getelementptr inbounds float, float* %11, i64 %304
  %306 = load float, float* %305, align 4
  %307 = fadd float %250, %306
  %308 = getelementptr inbounds float, float* %9, i64 %304
  %309 = load float, float* %308, align 4
  %310 = fadd float %251, %309
  %311 = fadd float %309, 2.000000e+00
  store float %311, float* %308, align 4
  %312 = getelementptr inbounds i32, i32* %1, i64 %304
  %313 = load i32, i32* %312, align 4
  %314 = add nsw i32 %313, 1
  store i32 %314, i32* %312, align 4
  %315 = add nuw nsw i32 %248, 1
  %316 = icmp eq i32 %315, %222
  br i1 %316, label %340, label %247

317:                                              ; preds = %350, %239
  %318 = phi float [ undef, %239 ], [ %365, %350 ]
  %319 = phi float [ undef, %239 ], [ %366, %350 ]
  %320 = phi i32 [ undef, %239 ], [ %367, %350 ]
  %321 = phi i32 [ %241, %239 ], [ %367, %350 ]
  %322 = phi float [ %240, %239 ], [ %366, %350 ]
  %323 = phi float [ %221, %239 ], [ %365, %350 ]
  %324 = icmp eq i32 %243, 0
  br i1 %324, label %336, label %325

325:                                              ; preds = %317, %325
  %326 = phi i32 [ %333, %325 ], [ %321, %317 ]
  %327 = phi float [ %332, %325 ], [ %322, %317 ]
  %328 = phi float [ %331, %325 ], [ %323, %317 ]
  %329 = phi i32 [ %334, %325 ], [ %243, %317 ]
  %330 = fadd float %328, 1.000000e+00
  %331 = fadd float %330, %327
  %332 = fadd float %327, 2.000000e+00
  %333 = add nsw i32 %326, 1
  %334 = add i32 %329, -1
  %335 = icmp eq i32 %334, 0
  br i1 %335, label %336, label %325, !llvm.loop !2

336:                                              ; preds = %325, %317
  %337 = phi float [ %318, %317 ], [ %331, %325 ]
  %338 = phi float [ %319, %317 ], [ %332, %325 ]
  %339 = phi i32 [ %320, %317 ], [ %333, %325 ]
  store float %338, float* %9, align 16
  store i32 %339, i32* %1, align 4
  br label %340

340:                                              ; preds = %284, %336, %227, %236
  %341 = phi float [ %221, %236 ], [ %233, %227 ], [ %337, %336 ], [ %310, %284 ]
  br i1 %28, label %342, label %414

342:                                              ; preds = %340
  %343 = add nsw i64 %16, -1
  %344 = lshr i64 %343, 2
  %345 = add nuw nsw i64 %344, 1
  %346 = and i64 %345, 1
  %347 = icmp eq i64 %344, 0
  br i1 %347, label %399, label %348

348:                                              ; preds = %342
  %349 = sub nuw nsw i64 %345, %346
  br label %370

350:                                              ; preds = %350, %245
  %351 = phi i32 [ %241, %245 ], [ %367, %350 ]
  %352 = phi float [ %240, %245 ], [ %366, %350 ]
  %353 = phi float [ %221, %245 ], [ %365, %350 ]
  %354 = phi i32 [ %246, %245 ], [ %368, %350 ]
  %355 = fadd float %353, 1.000000e+00
  %356 = fadd float %355, %352
  %357 = fadd float %352, 2.000000e+00
  %358 = fadd float %356, 1.000000e+00
  %359 = fadd float %358, %357
  %360 = fadd float %357, 2.000000e+00
  %361 = fadd float %359, 1.000000e+00
  %362 = fadd float %361, %360
  %363 = fadd float %360, 2.000000e+00
  %364 = fadd float %362, 1.000000e+00
  %365 = fadd float %364, %363
  %366 = fadd float %363, 2.000000e+00
  %367 = add nsw i32 %351, 4
  %368 = add i32 %354, -4
  %369 = icmp eq i32 %368, 0
  br i1 %369, label %317, label %350

370:                                              ; preds = %370, %348
  %371 = phi i64 [ 0, %348 ], [ %396, %370 ]
  %372 = phi i64 [ %349, %348 ], [ %397, %370 ]
  %373 = getelementptr inbounds i32, i32* %1, i64 %371
  %374 = bitcast i32* %373 to <2 x i64>*
  %375 = bitcast i32* %373 to <4 x i32>*
  %376 = load <4 x i32>, <4 x i32>* %375, align 1
  %377 = getelementptr inbounds float, float* %13, i64 %371
  %378 = bitcast float* %377 to <2 x i64>*
  %379 = load <2 x i64>, <2 x i64>* %378, align 16
  %380 = bitcast <2 x i64> %379 to <4 x i32>
  %381 = add <4 x i32> %376, %380
  %382 = bitcast <4 x i32> %381 to <2 x i64>
  %383 = xor <2 x i64> %379, %382
  store <2 x i64> %383, <2 x i64>* %374, align 1
  %384 = or i64 %371, 4
  %385 = getelementptr inbounds i32, i32* %1, i64 %384
  %386 = bitcast i32* %385 to <2 x i64>*
  %387 = bitcast i32* %385 to <4 x i32>*
  %388 = load <4 x i32>, <4 x i32>* %387, align 1
  %389 = getelementptr inbounds float, float* %13, i64 %384
  %390 = bitcast float* %389 to <2 x i64>*
  %391 = load <2 x i64>, <2 x i64>* %390, align 16
  %392 = bitcast <2 x i64> %391 to <4 x i32>
  %393 = add <4 x i32> %388, %392
  %394 = bitcast <4 x i32> %393 to <2 x i64>
  %395 = xor <2 x i64> %391, %394
  store <2 x i64> %395, <2 x i64>* %386, align 1
  %396 = add nuw nsw i64 %371, 8
  %397 = add i64 %372, -2
  %398 = icmp eq i64 %397, 0
  br i1 %398, label %399, label %370

399:                                              ; preds = %370, %342
  %400 = phi i64 [ 0, %342 ], [ %396, %370 ]
  %401 = icmp eq i64 %346, 0
  br i1 %401, label %414, label %402

402:                                              ; preds = %399
  %403 = getelementptr inbounds i32, i32* %1, i64 %400
  %404 = bitcast i32* %403 to <2 x i64>*
  %405 = bitcast i32* %403 to <4 x i32>*
  %406 = load <4 x i32>, <4 x i32>* %405, align 1
  %407 = getelementptr inbounds float, float* %13, i64 %400
  %408 = bitcast float* %407 to <2 x i64>*
  %409 = load <2 x i64>, <2 x i64>* %408, align 16
  %410 = bitcast <2 x i64> %409 to <4 x i32>
  %411 = add <4 x i32> %406, %410
  %412 = bitcast <4 x i32> %411 to <2 x i64>
  %413 = xor <2 x i64> %409, %412
  store <2 x i64> %413, <2 x i64>* %404, align 1
  br label %414

414:                                              ; preds = %402, %399, %340
  ret float %341
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.rcp.ps(<4 x float>) #2

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float>) #2

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.rsqrt.ps(<4 x float>) #2

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.max.ps(<4 x float>, <4 x float>) #2

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
