; ModuleID = '../../third_party/ffmpeg/libavutil/tx.c'
source_filename = "../../third_party/ffmpeg/libavutil/tx.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVTXContext = type { i32, i32, i32, i32, i64, double, i8*, i8*, i32*, i32*, i32* }

@.str = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.2 = private unnamed_addr constant [40 x i8] c"../../third_party/ffmpeg/libavutil/tx.c\00", align 1
@switch.table.ff_tx_gen_compound_mapping = private unnamed_addr constant [5 x i32] [i32 1, i32 0, i32 1, i32 0, i32 1], align 4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @ff_tx_type_is_mdct(i32) local_unnamed_addr #0 {
  %2 = add i32 %0, -1
  %3 = icmp ult i32 %2, 5
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds [5 x i32], [5 x i32]* @switch.table.ff_tx_gen_compound_mapping, i64 0, i64 %5
  %7 = load i32, i32* %6, align 4
  ret i32 %7

8:                                                ; preds = %1
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_tx_gen_compound_mapping(%struct.AVTXContext* nocapture) local_unnamed_addr #1 {
  %2 = alloca [15 x i32], align 16
  %3 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = mul nsw i32 %6, %4
  %10 = srem i32 %6, %4
  %11 = icmp sgt i32 %4, 1
  br i1 %11, label %12, label %20

12:                                               ; preds = %1, %17
  %13 = phi i32 [ %18, %17 ], [ 1, %1 ]
  %14 = mul nsw i32 %13, %10
  %15 = srem i32 %14, %4
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %21, label %17

17:                                               ; preds = %12
  %18 = add nuw nsw i32 %13, 1
  %19 = icmp eq i32 %18, %4
  br i1 %19, label %20, label %12

20:                                               ; preds = %17, %1
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2, i64 0, i64 0), i32 40) #7
  tail call void @abort() #8
  unreachable

21:                                               ; preds = %12
  %22 = srem i32 %4, %6
  %23 = icmp sgt i32 %6, 1
  br i1 %23, label %24, label %32

24:                                               ; preds = %21, %29
  %25 = phi i32 [ %30, %29 ], [ 1, %21 ]
  %26 = mul nsw i32 %25, %22
  %27 = srem i32 %26, %6
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %33, label %29

29:                                               ; preds = %24
  %30 = add nuw nsw i32 %25, 1
  %31 = icmp eq i32 %30, %6
  br i1 %31, label %32, label %24

32:                                               ; preds = %29, %21
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2, i64 0, i64 0), i32 40) #7
  tail call void @abort() #8
  unreachable

33:                                               ; preds = %24
  %34 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 3
  %35 = load i32, i32* %34, align 4
  %36 = add i32 %35, -1
  %37 = icmp ult i32 %36, 5
  br i1 %37, label %38, label %42

38:                                               ; preds = %33
  %39 = sext i32 %36 to i64
  %40 = getelementptr inbounds [5 x i32], [5 x i32]* @switch.table.ff_tx_gen_compound_mapping, i64 0, i64 %39
  %41 = load i32, i32* %40, align 4
  br label %42

42:                                               ; preds = %33, %38
  %43 = phi i32 [ %41, %38 ], [ 0, %33 ]
  %44 = shl nsw i32 %9, 1
  %45 = sext i32 %44 to i64
  %46 = shl nsw i64 %45, 2
  %47 = tail call noalias i8* @av_malloc(i64 %46) #7
  %48 = bitcast i8* %47 to i32*
  %49 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 8
  %50 = bitcast i32** %49 to i8**
  store i8* %47, i8** %50, align 8
  %51 = icmp eq i8* %47, null
  br i1 %51, label %193, label %52

52:                                               ; preds = %42
  %53 = sext i32 %9 to i64
  %54 = getelementptr inbounds i32, i32* %48, i64 %53
  %55 = icmp sgt i32 %6, 0
  br i1 %55, label %56, label %193

56:                                               ; preds = %52
  %57 = icmp sgt i32 %4, 0
  %58 = sext i32 %6 to i64
  %59 = zext i32 %13 to i64
  %60 = sext i32 %4 to i64
  %61 = zext i32 %25 to i64
  %62 = zext i32 %6 to i64
  %63 = zext i32 %4 to i64
  br label %64

64:                                               ; preds = %80, %56
  %65 = phi i64 [ 0, %56 ], [ %81, %80 ]
  br i1 %57, label %66, label %80

66:                                               ; preds = %64
  %67 = mul nsw i64 %65, %60
  %68 = mul nsw i64 %67, %61
  br label %83

69:                                               ; preds = %80
  %70 = icmp ne i32 %8, 0
  %71 = and i1 %70, %55
  br i1 %71, label %72, label %121

72:                                               ; preds = %69
  %73 = add nsw i32 %4, -1
  %74 = ashr i32 %73, 1
  %75 = icmp sgt i32 %73, 1
  %76 = add i32 %4, -2
  %77 = sext i32 %74 to i64
  %78 = sext i32 %4 to i64
  %79 = zext i32 %6 to i64
  br label %102

80:                                               ; preds = %83, %64
  %81 = add nuw nsw i64 %65, 1
  %82 = icmp eq i64 %81, %62
  br i1 %82, label %69, label %64

83:                                               ; preds = %83, %66
  %84 = phi i64 [ 0, %66 ], [ %100, %83 ]
  %85 = mul nsw i64 %84, %58
  %86 = add nsw i64 %85, %67
  %87 = trunc i64 %86 to i32
  %88 = srem i32 %87, %9
  %89 = shl i32 %88, %43
  %90 = add nsw i64 %84, %67
  %91 = getelementptr inbounds i32, i32* %48, i64 %90
  store i32 %89, i32* %91, align 4
  %92 = add nsw i64 %85, %65
  %93 = mul nsw i64 %85, %59
  %94 = add nsw i64 %93, %68
  %95 = trunc i64 %94 to i32
  %96 = srem i32 %95, %9
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i32, i32* %54, i64 %97
  %99 = trunc i64 %92 to i32
  store i32 %99, i32* %98, align 4
  %100 = add nuw nsw i64 %84, 1
  %101 = icmp eq i64 %100, %63
  br i1 %101, label %80, label %83

102:                                              ; preds = %107, %72
  %103 = phi i64 [ 0, %72 ], [ %108, %107 ]
  %104 = mul nsw i64 %103, %78
  %105 = add nsw i64 %104, 1
  %106 = getelementptr inbounds i32, i32* %48, i64 %105
  br i1 %75, label %110, label %107

107:                                              ; preds = %110, %102
  %108 = add nuw nsw i64 %103, 1
  %109 = icmp eq i64 %108, %79
  br i1 %109, label %121, label %102

110:                                              ; preds = %102, %110
  %111 = phi i64 [ %119, %110 ], [ 0, %102 ]
  %112 = trunc i64 %111 to i32
  %113 = sub i32 %76, %112
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i32, i32* %106, i64 %114
  %116 = load i32, i32* %115, align 4
  %117 = getelementptr inbounds i32, i32* %106, i64 %111
  %118 = load i32, i32* %117, align 4
  store i32 %118, i32* %115, align 4
  store i32 %116, i32* %117, align 4
  %119 = add nuw nsw i64 %111, 1
  %120 = icmp slt i64 %119, %77
  br i1 %120, label %110, label %107

121:                                              ; preds = %107, %69
  %122 = icmp eq i32 %4, 15
  %123 = and i1 %122, %55
  br i1 %123, label %124, label %193

124:                                              ; preds = %121
  %125 = bitcast [15 x i32]* %2 to i8*
  %126 = getelementptr inbounds [15 x i32], [15 x i32]* %2, i64 0, i64 12
  %127 = zext i32 %6 to i64
  %128 = getelementptr inbounds [15 x i32], [15 x i32]* %2, i64 0, i64 0
  %129 = getelementptr inbounds [15 x i32], [15 x i32]* %2, i64 0, i64 5
  %130 = getelementptr inbounds [15 x i32], [15 x i32]* %2, i64 0, i64 10
  %131 = getelementptr inbounds [15 x i32], [15 x i32]* %2, i64 0, i64 3
  %132 = getelementptr inbounds [15 x i32], [15 x i32]* %2, i64 0, i64 8
  %133 = getelementptr inbounds [15 x i32], [15 x i32]* %2, i64 0, i64 13
  %134 = getelementptr inbounds [15 x i32], [15 x i32]* %2, i64 0, i64 6
  %135 = getelementptr inbounds [15 x i32], [15 x i32]* %2, i64 0, i64 11
  %136 = getelementptr inbounds [15 x i32], [15 x i32]* %2, i64 0, i64 1
  %137 = getelementptr inbounds [15 x i32], [15 x i32]* %2, i64 0, i64 9
  %138 = getelementptr inbounds [15 x i32], [15 x i32]* %2, i64 0, i64 14
  %139 = getelementptr inbounds [15 x i32], [15 x i32]* %2, i64 0, i64 4
  %140 = getelementptr inbounds [15 x i32], [15 x i32]* %2, i64 0, i64 2
  %141 = getelementptr inbounds [15 x i32], [15 x i32]* %2, i64 0, i64 7
  br label %142

142:                                              ; preds = %142, %124
  %143 = phi i64 [ 0, %124 ], [ %191, %142 ]
  call void @llvm.lifetime.start.p0i8(i64 60, i8* nonnull %125) #7
  %144 = mul i64 %143, 15
  %145 = and i64 %144, 4294967295
  %146 = getelementptr inbounds i32, i32* %48, i64 %145
  %147 = bitcast i32* %146 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %125, i8* align 4 %147, i64 60, i1 false)
  %148 = load i32, i32* %128, align 16
  store i32 %148, i32* %146, align 4
  %149 = load i32, i32* %129, align 4
  %150 = add nuw nsw i64 %145, 1
  %151 = getelementptr inbounds i32, i32* %48, i64 %150
  store i32 %149, i32* %151, align 4
  %152 = load i32, i32* %130, align 8
  %153 = add nuw nsw i64 %145, 2
  %154 = getelementptr inbounds i32, i32* %48, i64 %153
  store i32 %152, i32* %154, align 4
  %155 = add nuw nsw i64 %145, 3
  %156 = load i32, i32* %131, align 4
  %157 = getelementptr inbounds i32, i32* %48, i64 %155
  store i32 %156, i32* %157, align 4
  %158 = load i32, i32* %132, align 16
  %159 = add nuw nsw i64 %145, 4
  %160 = getelementptr inbounds i32, i32* %48, i64 %159
  store i32 %158, i32* %160, align 4
  %161 = load i32, i32* %133, align 4
  %162 = add nuw nsw i64 %145, 5
  %163 = getelementptr inbounds i32, i32* %48, i64 %162
  store i32 %161, i32* %163, align 4
  %164 = add nuw nsw i64 %145, 6
  %165 = load i32, i32* %134, align 8
  %166 = getelementptr inbounds i32, i32* %48, i64 %164
  store i32 %165, i32* %166, align 4
  %167 = load i32, i32* %135, align 4
  %168 = add nuw nsw i64 %145, 7
  %169 = getelementptr inbounds i32, i32* %48, i64 %168
  store i32 %167, i32* %169, align 4
  %170 = load i32, i32* %136, align 4
  %171 = add nuw nsw i64 %145, 8
  %172 = getelementptr inbounds i32, i32* %48, i64 %171
  store i32 %170, i32* %172, align 4
  %173 = add nuw nsw i64 %145, 9
  %174 = load i32, i32* %137, align 4
  %175 = getelementptr inbounds i32, i32* %48, i64 %173
  store i32 %174, i32* %175, align 4
  %176 = load i32, i32* %138, align 8
  %177 = add nuw nsw i64 %145, 10
  %178 = getelementptr inbounds i32, i32* %48, i64 %177
  store i32 %176, i32* %178, align 4
  %179 = load i32, i32* %139, align 16
  %180 = add nuw nsw i64 %145, 11
  %181 = getelementptr inbounds i32, i32* %48, i64 %180
  store i32 %179, i32* %181, align 4
  %182 = add nuw nsw i64 %145, 12
  %183 = load i32, i32* %126, align 16
  %184 = getelementptr inbounds i32, i32* %48, i64 %182
  store i32 %183, i32* %184, align 4
  %185 = load i32, i32* %140, align 8
  %186 = add nuw nsw i64 %145, 13
  %187 = getelementptr inbounds i32, i32* %48, i64 %186
  store i32 %185, i32* %187, align 4
  %188 = load i32, i32* %141, align 4
  %189 = add nuw nsw i64 %145, 14
  %190 = getelementptr inbounds i32, i32* %48, i64 %189
  store i32 %188, i32* %190, align 4
  call void @llvm.lifetime.end.p0i8(i64 60, i8* nonnull %125) #7
  %191 = add nuw nsw i64 %143, 1
  %192 = icmp eq i64 %191, %127
  br i1 %192, label %193, label %142

193:                                              ; preds = %142, %52, %121, %42
  %194 = phi i32 [ -12, %42 ], [ 0, %121 ], [ 0, %52 ], [ 0, %142 ]
  ret i32 %194
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare noalias i8* @av_malloc(i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_tx_gen_ptwo_revtab(%struct.AVTXContext* nocapture, i32) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = sext i32 %4 to i64
  %8 = shl nsw i64 %7, 2
  %9 = tail call noalias i8* @av_malloc(i64 %8) #7
  %10 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 9
  %11 = bitcast i32** %10 to i8**
  store i8* %9, i8** %11, align 8
  %12 = icmp eq i8* %9, null
  %13 = bitcast i8* %9 to i32*
  br i1 %12, label %35, label %14

14:                                               ; preds = %2
  %15 = icmp sgt i32 %4, 0
  br i1 %15, label %16, label %35

16:                                               ; preds = %14
  %17 = add nsw i32 %4, -1
  %18 = icmp eq i32 %1, 0
  %19 = zext i32 %4 to i64
  br label %20

20:                                               ; preds = %33, %16
  %21 = phi i32* [ %13, %16 ], [ %34, %33 ]
  %22 = phi i64 [ 0, %16 ], [ %31, %33 ]
  %23 = trunc i64 %22 to i32
  %24 = tail call fastcc i32 @split_radix_permutation(i32 %23, i32 %4, i32 %6)
  %25 = sub nsw i32 0, %24
  %26 = and i32 %17, %25
  %27 = sext i32 %26 to i64
  %28 = select i1 %18, i64 %27, i64 %22
  %29 = select i1 %18, i32 %23, i32 %26
  %30 = getelementptr inbounds i32, i32* %21, i64 %28
  store i32 %29, i32* %30, align 4
  %31 = add nuw nsw i64 %22, 1
  %32 = icmp eq i64 %31, %19
  br i1 %32, label %35, label %33

33:                                               ; preds = %20
  %34 = load i32*, i32** %10, align 8
  br label %20

35:                                               ; preds = %20, %14, %2
  %36 = phi i32 [ -12, %2 ], [ 0, %14 ], [ 0, %20 ]
  ret i32 %36
}

; Function Attrs: inlinehint nounwind readnone ssp uwtable
define internal fastcc i32 @split_radix_permutation(i32, i32, i32) unnamed_addr #4 {
  %4 = icmp slt i32 %1, 3
  br i1 %4, label %5, label %7

5:                                                ; preds = %3
  %6 = and i32 %0, 1
  br label %26

7:                                                ; preds = %3
  %8 = lshr i32 %1, 1
  %9 = and i32 %8, %0
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %7
  %12 = tail call fastcc i32 @split_radix_permutation(i32 %0, i32 %8, i32 %2)
  %13 = shl nsw i32 %12, 1
  ret i32 %13

14:                                               ; preds = %7
  %15 = lshr i32 %1, 2
  %16 = and i32 %15, %0
  %17 = icmp eq i32 %16, 0
  %18 = zext i1 %17 to i32
  %19 = icmp eq i32 %18, %2
  %20 = tail call fastcc i32 @split_radix_permutation(i32 %0, i32 %15, i32 %2)
  %21 = shl nsw i32 %20, 2
  br i1 %19, label %22, label %24

22:                                               ; preds = %14
  %23 = or i32 %21, 1
  br label %26

24:                                               ; preds = %14
  %25 = add nsw i32 %21, -1
  br label %26

26:                                               ; preds = %24, %22, %5
  %27 = phi i32 [ %6, %5 ], [ %23, %22 ], [ %25, %24 ]
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ff_tx_gen_ptwo_inplace_revtab_idx(%struct.AVTXContext* nocapture) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 2
  %6 = tail call noalias i8* @av_malloc(i64 %5) #7
  %7 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 10
  %8 = bitcast i32** %7 to i8**
  store i8* %6, i8** %8, align 8
  %9 = icmp eq i8* %6, null
  br i1 %9, label %66, label %10

10:                                               ; preds = %1
  %11 = bitcast i8* %6 to i32*
  %12 = load i32, i32* %2, align 4
  %13 = icmp sgt i32 %12, 1
  br i1 %13, label %14, label %18

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %0, i64 0, i32 9
  br label %23

16:                                               ; preds = %60
  %17 = load i32*, i32** %7, align 8
  br label %18

18:                                               ; preds = %16, %10
  %19 = phi i32* [ %11, %10 ], [ %17, %16 ]
  %20 = phi i32 [ 0, %10 ], [ %62, %16 ]
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i32, i32* %19, i64 %21
  store i32 0, i32* %22, align 4
  br label %66

23:                                               ; preds = %14, %60
  %24 = phi i32 [ %12, %14 ], [ %61, %60 ]
  %25 = phi i64 [ 1, %14 ], [ %63, %60 ]
  %26 = phi i32 [ 0, %14 ], [ %62, %60 ]
  %27 = load i32*, i32** %15, align 8
  %28 = getelementptr inbounds i32, i32* %27, i64 %25
  %29 = load i32, i32* %28, align 4
  %30 = sext i32 %29 to i64
  %31 = icmp slt i64 %25, %30
  br i1 %31, label %32, label %60

32:                                               ; preds = %23
  %33 = icmp sgt i32 %26, 0
  %34 = zext i32 %26 to i64
  br label %35

35:                                               ; preds = %32, %47
  %36 = phi i32 [ %50, %47 ], [ %29, %32 ]
  br i1 %33, label %37, label %47

37:                                               ; preds = %35
  %38 = load i32*, i32** %7, align 8
  br label %41

39:                                               ; preds = %41
  %40 = icmp eq i64 %46, %34
  br i1 %40, label %47, label %41

41:                                               ; preds = %39, %37
  %42 = phi i64 [ 0, %37 ], [ %46, %39 ]
  %43 = getelementptr inbounds i32, i32* %38, i64 %42
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %36, %44
  %46 = add nuw nsw i64 %42, 1
  br i1 %45, label %60, label %39

47:                                               ; preds = %39, %35
  %48 = sext i32 %36 to i64
  %49 = getelementptr inbounds i32, i32* %27, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = zext i32 %50 to i64
  %52 = icmp eq i64 %25, %51
  br i1 %52, label %53, label %35

53:                                               ; preds = %47
  %54 = load i32*, i32** %7, align 8
  %55 = add nsw i32 %26, 1
  %56 = sext i32 %26 to i64
  %57 = getelementptr inbounds i32, i32* %54, i64 %56
  %58 = trunc i64 %25 to i32
  store i32 %58, i32* %57, align 4
  %59 = load i32, i32* %2, align 4
  br label %60

60:                                               ; preds = %41, %53, %23
  %61 = phi i32 [ %24, %23 ], [ %59, %53 ], [ %24, %41 ]
  %62 = phi i32 [ %26, %23 ], [ %55, %53 ], [ %26, %41 ]
  %63 = add nuw nsw i64 %25, 1
  %64 = sext i32 %61 to i64
  %65 = icmp slt i64 %63, %64
  br i1 %65, label %23, label %16

66:                                               ; preds = %1, %18
  %67 = phi i32 [ 0, %18 ], [ -12, %1 ]
  ret i32 %67
}

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @av_tx_uninit(%struct.AVTXContext**) local_unnamed_addr #5 {
  %2 = load %struct.AVTXContext*, %struct.AVTXContext** %0, align 8
  %3 = icmp eq %struct.AVTXContext* %2, null
  br i1 %3, label %23, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %2, i64 0, i32 8
  %6 = bitcast i32** %5 to i8**
  %7 = load i8*, i8** %6, align 8
  tail call void @av_free(i8* %7) #7
  %8 = load %struct.AVTXContext*, %struct.AVTXContext** %0, align 8
  %9 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %8, i64 0, i32 6
  %10 = load i8*, i8** %9, align 8
  tail call void @av_free(i8* %10) #7
  %11 = load %struct.AVTXContext*, %struct.AVTXContext** %0, align 8
  %12 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %11, i64 0, i32 9
  %13 = bitcast i32** %12 to i8**
  %14 = load i8*, i8** %13, align 8
  tail call void @av_free(i8* %14) #7
  %15 = load %struct.AVTXContext*, %struct.AVTXContext** %0, align 8
  %16 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %15, i64 0, i32 10
  %17 = bitcast i32** %16 to i8**
  %18 = load i8*, i8** %17, align 8
  tail call void @av_free(i8* %18) #7
  %19 = load %struct.AVTXContext*, %struct.AVTXContext** %0, align 8
  %20 = getelementptr inbounds %struct.AVTXContext, %struct.AVTXContext* %19, i64 0, i32 7
  %21 = load i8*, i8** %20, align 8
  tail call void @av_free(i8* %21) #7
  %22 = bitcast %struct.AVTXContext** %0 to i8*
  tail call void @av_freep(i8* %22) #7
  br label %23

23:                                               ; preds = %1, %4
  ret void
}

declare void @av_free(i8*) local_unnamed_addr #3

declare void @av_freep(i8*) local_unnamed_addr #3

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden i32 @av_tx_init(%struct.AVTXContext** nocapture, void (%struct.AVTXContext*, i8*, i8*, i64)**, i32, i32, i32, i8*, i64) local_unnamed_addr #5 {
  %8 = alloca %struct.AVTXContext*, align 8
  %9 = bitcast %struct.AVTXContext** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #7
  %10 = tail call noalias i8* @av_mallocz(i64 72) #7
  %11 = bitcast %struct.AVTXContext** %8 to i8**
  store i8* %10, i8** %11, align 8
  %12 = icmp eq i8* %10, null
  %13 = bitcast i8* %10 to %struct.AVTXContext*
  %14 = ptrtoint i8* %10 to i64
  br i1 %12, label %29, label %15

15:                                               ; preds = %7
  switch i32 %2, label %27 [
    i32 0, label %16
    i32 1, label %16
    i32 2, label %19
    i32 3, label %19
    i32 4, label %22
    i32 5, label %22
  ]

16:                                               ; preds = %15, %15
  %17 = tail call i32 @ff_tx_init_mdct_fft_float(%struct.AVTXContext* nonnull %13, void (%struct.AVTXContext*, i8*, i8*, i64)** %1, i32 %2, i32 %3, i32 %4, i8* %5, i64 %6) #7
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %25, label %27

19:                                               ; preds = %15, %15
  %20 = tail call i32 @ff_tx_init_mdct_fft_double(%struct.AVTXContext* nonnull %13, void (%struct.AVTXContext*, i8*, i8*, i64)** %1, i32 %2, i32 %3, i32 %4, i8* %5, i64 %6) #7
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %25, label %27

22:                                               ; preds = %15, %15
  %23 = tail call i32 @ff_tx_init_mdct_fft_int32(%struct.AVTXContext* nonnull %13, void (%struct.AVTXContext*, i8*, i8*, i64)** %1, i32 %2, i32 %3, i32 %4, i8* %5, i64 %6) #7
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %16, %19, %22
  %26 = bitcast %struct.AVTXContext** %0 to i64*
  store i64 %14, i64* %26, align 8
  br label %29

27:                                               ; preds = %15, %16, %19, %22
  %28 = phi i32 [ %23, %22 ], [ %20, %19 ], [ %17, %16 ], [ -22, %15 ]
  call void @av_tx_uninit(%struct.AVTXContext** nonnull %8) #9
  store void (%struct.AVTXContext*, i8*, i8*, i64)* null, void (%struct.AVTXContext*, i8*, i8*, i64)** %1, align 8
  br label %29

29:                                               ; preds = %7, %27, %25
  %30 = phi i32 [ %28, %27 ], [ 0, %25 ], [ -12, %7 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #7
  ret i32 %30
}

declare noalias i8* @av_mallocz(i64) local_unnamed_addr #3

declare i32 @ff_tx_init_mdct_fft_float(%struct.AVTXContext*, void (%struct.AVTXContext*, i8*, i8*, i64)**, i32, i32, i32, i8*, i64) local_unnamed_addr #3

declare i32 @ff_tx_init_mdct_fft_double(%struct.AVTXContext*, void (%struct.AVTXContext*, i8*, i8*, i64)**, i32, i32, i32, i8*, i64) local_unnamed_addr #3

declare i32 @ff_tx_init_mdct_fft_int32(%struct.AVTXContext*, void (%struct.AVTXContext*, i8*, i8*, i64)**, i32, i32, i32, i8*, i64) local_unnamed_addr #3

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { cold }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
