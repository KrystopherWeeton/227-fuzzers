; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/x86/quantize_avx.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/x86/quantize_avx.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_quantize_b_avx(i32* nocapture readonly, i64, i32, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readnone, i16* nocapture readonly) local_unnamed_addr #0 {
  store i16 0, i16* %10, align 2
  %14 = bitcast i16* %3 to <8 x i16>*
  %15 = load <8 x i16>, <8 x i16>* %14, align 16
  %16 = bitcast i16* %4 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 16
  %18 = bitcast i16* %5 to <2 x i64>*
  %19 = load <2 x i64>, <2 x i64>* %18, align 16
  %20 = add <8 x i16> %15, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %21 = bitcast <8 x i16> %20 to <2 x i64>
  %22 = bitcast i16* %9 to <2 x i64>*
  %23 = load <2 x i64>, <2 x i64>* %22, align 16
  %24 = bitcast i16* %6 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 16
  %26 = bitcast i32* %0 to <4 x i32>*
  %27 = load <4 x i32>, <4 x i32>* %26, align 16
  %28 = getelementptr inbounds i32, i32* %0, i64 4
  %29 = bitcast i32* %28 to <4 x i32>*
  %30 = load <4 x i32>, <4 x i32>* %29, align 16
  %31 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %27, <4 x i32> %30) #3
  %32 = getelementptr inbounds i32, i32* %0, i64 8
  %33 = bitcast i32* %32 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 16
  %35 = getelementptr inbounds i32, i32* %0, i64 12
  %36 = bitcast i32* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 16
  %38 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %34, <4 x i32> %37) #3
  %39 = sub <8 x i16> zeroinitializer, %31
  %40 = icmp slt <8 x i16> %31, zeroinitializer
  %41 = select <8 x i1> %40, <8 x i16> %39, <8 x i16> %31
  %42 = sub <8 x i16> zeroinitializer, %38
  %43 = icmp slt <8 x i16> %38, zeroinitializer
  %44 = select <8 x i1> %43, <8 x i16> %42, <8 x i16> %38
  %45 = icmp sgt <8 x i16> %41, %20
  %46 = sext <8 x i1> %45 to <8 x i16>
  %47 = shufflevector <2 x i64> %21, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %48 = bitcast <2 x i64> %47 to <8 x i16>
  %49 = icmp sgt <8 x i16> %44, %48
  %50 = sext <8 x i1> %49 to <8 x i16>
  %51 = or <8 x i1> %49, %45
  %52 = sext <8 x i1> %51 to <8 x i16>
  %53 = bitcast <8 x i16> %52 to <2 x i64>
  %54 = tail call i32 @llvm.x86.sse41.ptestz(<2 x i64> %53, <2 x i64> %53) #3
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %69, label %56

56:                                               ; preds = %13
  %57 = bitcast i32* %7 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %57, align 32
  %58 = bitcast i32* %8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %58, align 32
  %59 = getelementptr inbounds i32, i32* %7, i64 8
  %60 = bitcast i32* %59 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %60, align 32
  %61 = getelementptr inbounds i32, i32* %8, i64 8
  %62 = bitcast i32* %61 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %62, align 32
  %63 = icmp eq i64 %1, 16
  br i1 %63, label %271, label %64

64:                                               ; preds = %56
  %65 = shufflevector <2 x i64> %17, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %66 = shufflevector <2 x i64> %19, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %67 = shufflevector <2 x i64> %25, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %68 = shufflevector <2 x i64> %23, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  br label %136

69:                                               ; preds = %13
  %70 = bitcast <2 x i64> %17 to <8 x i16>
  %71 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %41, <8 x i16> %70) #3
  %72 = bitcast <2 x i64> %19 to <8 x i16>
  %73 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %71, <8 x i16> %72) #3
  %74 = add <8 x i16> %73, %71
  %75 = bitcast <2 x i64> %25 to <8 x i16>
  %76 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %74, <8 x i16> %75) #3
  %77 = shufflevector <2 x i64> %17, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %78 = shufflevector <2 x i64> %19, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %79 = shufflevector <2 x i64> %25, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %80 = bitcast <2 x i64> %77 to <8 x i16>
  %81 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %44, <8 x i16> %80) #3
  %82 = bitcast <2 x i64> %78 to <8 x i16>
  %83 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %81, <8 x i16> %82) #3
  %84 = add <8 x i16> %83, %81
  %85 = bitcast <2 x i64> %79 to <8 x i16>
  %86 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %84, <8 x i16> %85) #3
  %87 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %76, <8 x i16> %31) #3
  %88 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %86, <8 x i16> %38) #3
  %89 = and <8 x i16> %87, %46
  %90 = and <8 x i16> %88, %50
  %91 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %89, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %92 = shufflevector <8 x i16> %89, <8 x i16> %91, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %93 = shufflevector <8 x i16> %89, <8 x i16> %91, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %94 = bitcast i32* %7 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %94, align 16
  %95 = getelementptr inbounds i32, i32* %7, i64 4
  %96 = bitcast i32* %95 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %96, align 16
  %97 = getelementptr inbounds i32, i32* %7, i64 8
  %98 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %90, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %99 = shufflevector <8 x i16> %90, <8 x i16> %98, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %100 = shufflevector <8 x i16> %90, <8 x i16> %98, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %101 = bitcast i32* %97 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %101, align 16
  %102 = getelementptr inbounds i32, i32* %7, i64 12
  %103 = bitcast i32* %102 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %103, align 16
  %104 = bitcast <2 x i64> %23 to <8 x i16>
  %105 = mul <8 x i16> %89, %104
  %106 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %89, <8 x i16> %104) #3
  %107 = shufflevector <8 x i16> %105, <8 x i16> %106, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %108 = shufflevector <8 x i16> %105, <8 x i16> %106, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %109 = bitcast i32* %8 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %109, align 16
  %110 = getelementptr inbounds i32, i32* %8, i64 4
  %111 = bitcast i32* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 16
  %112 = shufflevector <2 x i64> %23, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %113 = getelementptr inbounds i32, i32* %8, i64 8
  %114 = bitcast <2 x i64> %112 to <8 x i16>
  %115 = mul <8 x i16> %90, %114
  %116 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %90, <8 x i16> %114) #3
  %117 = shufflevector <8 x i16> %115, <8 x i16> %116, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %118 = shufflevector <8 x i16> %115, <8 x i16> %116, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %119 = bitcast i32* %113 to <8 x i16>*
  store <8 x i16> %117, <8 x i16>* %119, align 16
  %120 = getelementptr inbounds i32, i32* %8, i64 12
  %121 = bitcast i32* %120 to <8 x i16>*
  store <8 x i16> %118, <8 x i16>* %121, align 16
  %122 = icmp eq <8 x i16> %89, zeroinitializer
  %123 = icmp eq <8 x i16> %90, zeroinitializer
  %124 = bitcast i16* %12 to <8 x i16>*
  %125 = load <8 x i16>, <8 x i16>* %124, align 16
  %126 = getelementptr inbounds i16, i16* %12, i64 8
  %127 = bitcast i16* %126 to <8 x i16>*
  %128 = load <8 x i16>, <8 x i16>* %127, align 16
  %129 = sub <8 x i16> %125, %46
  %130 = sub <8 x i16> %128, %50
  %131 = select <8 x i1> %122, <8 x i16> zeroinitializer, <8 x i16> %129
  %132 = select <8 x i1> %123, <8 x i16> zeroinitializer, <8 x i16> %130
  %133 = icmp sgt <8 x i16> %131, %132
  %134 = select <8 x i1> %133, <8 x i16> %131, <8 x i16> %132
  %135 = bitcast <8 x i16> %134 to <2 x i64>
  br label %136

136:                                              ; preds = %69, %64
  %137 = phi <2 x i64> [ %77, %69 ], [ %65, %64 ]
  %138 = phi <2 x i64> [ %78, %69 ], [ %66, %64 ]
  %139 = phi <2 x i64> [ %112, %69 ], [ %68, %64 ]
  %140 = phi <2 x i64> [ %79, %69 ], [ %67, %64 ]
  %141 = phi <8 x i16> [ %134, %69 ], [ zeroinitializer, %64 ]
  %142 = phi <2 x i64> [ %135, %69 ], [ zeroinitializer, %64 ]
  %143 = icmp sgt i64 %1, 16
  br i1 %143, label %144, label %256

144:                                              ; preds = %136
  %145 = bitcast <2 x i64> %137 to <8 x i16>
  %146 = bitcast <2 x i64> %138 to <8 x i16>
  %147 = bitcast <2 x i64> %140 to <8 x i16>
  %148 = bitcast <2 x i64> %139 to <8 x i16>
  br label %149

149:                                              ; preds = %144, %251
  %150 = phi i64 [ 16, %144 ], [ %254, %251 ]
  %151 = phi <2 x i64> [ %142, %144 ], [ %253, %251 ]
  %152 = phi <8 x i16> [ %141, %144 ], [ %252, %251 ]
  %153 = getelementptr inbounds i32, i32* %0, i64 %150
  %154 = bitcast i32* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 16
  %156 = getelementptr inbounds i32, i32* %153, i64 4
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 16
  %159 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %155, <4 x i32> %158) #3
  %160 = getelementptr inbounds i32, i32* %153, i64 8
  %161 = bitcast i32* %160 to <4 x i32>*
  %162 = load <4 x i32>, <4 x i32>* %161, align 16
  %163 = getelementptr inbounds i32, i32* %160, i64 4
  %164 = bitcast i32* %163 to <4 x i32>*
  %165 = load <4 x i32>, <4 x i32>* %164, align 16
  %166 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %162, <4 x i32> %165) #3
  %167 = sub <8 x i16> zeroinitializer, %159
  %168 = icmp slt <8 x i16> %159, zeroinitializer
  %169 = select <8 x i1> %168, <8 x i16> %167, <8 x i16> %159
  %170 = sub <8 x i16> zeroinitializer, %166
  %171 = icmp slt <8 x i16> %166, zeroinitializer
  %172 = select <8 x i1> %171, <8 x i16> %170, <8 x i16> %166
  %173 = icmp sgt <8 x i16> %169, %48
  %174 = sext <8 x i1> %173 to <8 x i16>
  %175 = icmp sgt <8 x i16> %172, %48
  %176 = sext <8 x i1> %175 to <8 x i16>
  %177 = or <8 x i1> %175, %173
  %178 = sext <8 x i1> %177 to <8 x i16>
  %179 = bitcast <8 x i16> %178 to <2 x i64>
  %180 = tail call i32 @llvm.x86.sse41.ptestz(<2 x i64> %179, <2 x i64> %179) #3
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %191, label %182

182:                                              ; preds = %149
  %183 = getelementptr inbounds i32, i32* %7, i64 %150
  %184 = bitcast i32* %183 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %184, align 32
  %185 = getelementptr inbounds i32, i32* %8, i64 %150
  %186 = bitcast i32* %185 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %186, align 32
  %187 = getelementptr inbounds i32, i32* %183, i64 8
  %188 = bitcast i32* %187 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %188, align 32
  %189 = getelementptr inbounds i32, i32* %185, i64 8
  %190 = bitcast i32* %189 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %190, align 32
  br label %251

191:                                              ; preds = %149
  %192 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %169, <8 x i16> %145) #3
  %193 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %192, <8 x i16> %146) #3
  %194 = add <8 x i16> %193, %192
  %195 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %194, <8 x i16> %147) #3
  %196 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %172, <8 x i16> %145) #3
  %197 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %196, <8 x i16> %146) #3
  %198 = add <8 x i16> %197, %196
  %199 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %198, <8 x i16> %147) #3
  %200 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %195, <8 x i16> %159) #3
  %201 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %199, <8 x i16> %166) #3
  %202 = and <8 x i16> %200, %174
  %203 = and <8 x i16> %201, %176
  %204 = getelementptr inbounds i32, i32* %7, i64 %150
  %205 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %202, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %206 = shufflevector <8 x i16> %202, <8 x i16> %205, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %207 = shufflevector <8 x i16> %202, <8 x i16> %205, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %208 = bitcast i32* %204 to <8 x i16>*
  store <8 x i16> %206, <8 x i16>* %208, align 16
  %209 = getelementptr inbounds i32, i32* %204, i64 4
  %210 = bitcast i32* %209 to <8 x i16>*
  store <8 x i16> %207, <8 x i16>* %210, align 16
  %211 = getelementptr inbounds i32, i32* %204, i64 8
  %212 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %203, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %213 = shufflevector <8 x i16> %203, <8 x i16> %212, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %214 = shufflevector <8 x i16> %203, <8 x i16> %212, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %215 = bitcast i32* %211 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %215, align 16
  %216 = getelementptr inbounds i32, i32* %211, i64 4
  %217 = bitcast i32* %216 to <8 x i16>*
  store <8 x i16> %214, <8 x i16>* %217, align 16
  %218 = getelementptr inbounds i32, i32* %8, i64 %150
  %219 = mul <8 x i16> %202, %148
  %220 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %202, <8 x i16> %148) #3
  %221 = shufflevector <8 x i16> %219, <8 x i16> %220, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %222 = shufflevector <8 x i16> %219, <8 x i16> %220, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %223 = bitcast i32* %218 to <8 x i16>*
  store <8 x i16> %221, <8 x i16>* %223, align 16
  %224 = getelementptr inbounds i32, i32* %218, i64 4
  %225 = bitcast i32* %224 to <8 x i16>*
  store <8 x i16> %222, <8 x i16>* %225, align 16
  %226 = getelementptr inbounds i32, i32* %218, i64 8
  %227 = mul <8 x i16> %203, %148
  %228 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %203, <8 x i16> %148) #3
  %229 = shufflevector <8 x i16> %227, <8 x i16> %228, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %230 = shufflevector <8 x i16> %227, <8 x i16> %228, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %231 = bitcast i32* %226 to <8 x i16>*
  store <8 x i16> %229, <8 x i16>* %231, align 16
  %232 = getelementptr inbounds i32, i32* %226, i64 4
  %233 = bitcast i32* %232 to <8 x i16>*
  store <8 x i16> %230, <8 x i16>* %233, align 16
  %234 = icmp eq <8 x i16> %202, zeroinitializer
  %235 = icmp eq <8 x i16> %203, zeroinitializer
  %236 = getelementptr inbounds i16, i16* %12, i64 %150
  %237 = bitcast i16* %236 to <8 x i16>*
  %238 = load <8 x i16>, <8 x i16>* %237, align 16
  %239 = getelementptr inbounds i16, i16* %236, i64 8
  %240 = bitcast i16* %239 to <8 x i16>*
  %241 = load <8 x i16>, <8 x i16>* %240, align 16
  %242 = sub <8 x i16> %238, %174
  %243 = sub <8 x i16> %241, %176
  %244 = select <8 x i1> %234, <8 x i16> zeroinitializer, <8 x i16> %242
  %245 = select <8 x i1> %235, <8 x i16> zeroinitializer, <8 x i16> %243
  %246 = icmp sgt <8 x i16> %244, %245
  %247 = select <8 x i1> %246, <8 x i16> %244, <8 x i16> %245
  %248 = icmp sgt <8 x i16> %152, %247
  %249 = select <8 x i1> %248, <8 x i16> %152, <8 x i16> %247
  %250 = bitcast <8 x i16> %249 to <2 x i64>
  br label %251

251:                                              ; preds = %191, %182
  %252 = phi <8 x i16> [ %152, %182 ], [ %249, %191 ]
  %253 = phi <2 x i64> [ %151, %182 ], [ %250, %191 ]
  %254 = add nuw i64 %150, 16
  %255 = icmp slt i64 %254, %1
  br i1 %255, label %149, label %256

256:                                              ; preds = %251, %136
  %257 = phi <8 x i16> [ %141, %136 ], [ %252, %251 ]
  %258 = phi <2 x i64> [ %142, %136 ], [ %253, %251 ]
  %259 = bitcast <2 x i64> %258 to <4 x i32>
  %260 = shufflevector <4 x i32> %259, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 0>
  %261 = bitcast <4 x i32> %260 to <8 x i16>
  %262 = icmp sgt <8 x i16> %257, %261
  %263 = select <8 x i1> %262, <8 x i16> %257, <8 x i16> %261
  %264 = shufflevector <8 x i16> %263, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %265 = icmp sgt <8 x i16> %263, %264
  %266 = select <8 x i1> %265, <8 x i16> %263, <8 x i16> %264
  %267 = shufflevector <8 x i16> %266, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %268 = icmp sgt <8 x i16> %266, %267
  %269 = select <8 x i1> %268, <8 x i16> %266, <8 x i16> %267
  %270 = extractelement <8 x i16> %269, i64 1
  store i16 %270, i16* %10, align 2
  br label %271

271:                                              ; preds = %56, %256
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_quantize_b_32x32_avx(i32* nocapture readonly, i64, i32, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i16* nocapture readonly, i32* nocapture, i32* nocapture, i16* nocapture readonly, i16* nocapture, i16* nocapture readnone, i16* nocapture readonly) local_unnamed_addr #0 {
  %14 = bitcast i16* %3 to <8 x i16>*
  %15 = load <8 x i16>, <8 x i16>* %14, align 16
  %16 = add <8 x i16> %15, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17 = lshr <8 x i16> %16, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18 = add <8 x i16> %17, <i16 undef, i16 undef, i16 undef, i16 undef, i16 -1, i16 -1, i16 -1, i16 -1>
  %19 = bitcast <8 x i16> %18 to <2 x i64>
  %20 = bitcast i16* %4 to <8 x i16>*
  %21 = load <8 x i16>, <8 x i16>* %20, align 16
  %22 = add <8 x i16> %21, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %23 = lshr <8 x i16> %22, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %24 = bitcast <8 x i16> %23 to <2 x i64>
  %25 = bitcast i16* %5 to <2 x i64>*
  %26 = load <2 x i64>, <2 x i64>* %25, align 16
  %27 = bitcast i16* %9 to <2 x i64>*
  %28 = load <2 x i64>, <2 x i64>* %27, align 16
  %29 = bitcast i16* %6 to <8 x i16>*
  %30 = load <8 x i16>, <8 x i16>* %29, align 16
  %31 = shl <8 x i16> %30, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %32 = bitcast <8 x i16> %31 to <2 x i64>
  %33 = bitcast i32* %0 to <4 x i32>*
  %34 = load <4 x i32>, <4 x i32>* %33, align 16
  %35 = getelementptr inbounds i32, i32* %0, i64 4
  %36 = bitcast i32* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 16
  %38 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %34, <4 x i32> %37) #3
  %39 = getelementptr inbounds i32, i32* %0, i64 8
  %40 = bitcast i32* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 16
  %42 = getelementptr inbounds i32, i32* %0, i64 12
  %43 = bitcast i32* %42 to <4 x i32>*
  %44 = load <4 x i32>, <4 x i32>* %43, align 16
  %45 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %41, <4 x i32> %44) #3
  %46 = sub <8 x i16> zeroinitializer, %38
  %47 = icmp slt <8 x i16> %38, zeroinitializer
  %48 = select <8 x i1> %47, <8 x i16> %46, <8 x i16> %38
  %49 = sub <8 x i16> zeroinitializer, %45
  %50 = icmp slt <8 x i16> %45, zeroinitializer
  %51 = select <8 x i1> %50, <8 x i16> %49, <8 x i16> %45
  %52 = icmp sge <8 x i16> %48, %17
  %53 = sext <8 x i1> %52 to <8 x i16>
  %54 = shufflevector <2 x i64> %19, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %55 = bitcast <2 x i64> %54 to <8 x i16>
  %56 = icmp sgt <8 x i16> %51, %55
  %57 = sext <8 x i1> %56 to <8 x i16>
  %58 = or <8 x i1> %56, %52
  %59 = sext <8 x i1> %58 to <8 x i16>
  %60 = bitcast <8 x i16> %59 to <2 x i64>
  %61 = tail call i32 @llvm.x86.sse41.ptestz(<2 x i64> %60, <2 x i64> %60) #3
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %78, label %63

63:                                               ; preds = %13
  %64 = bitcast i32* %7 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %64, align 32
  %65 = bitcast i32* %8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %65, align 32
  %66 = getelementptr inbounds i32, i32* %7, i64 8
  %67 = bitcast i32* %66 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %67, align 32
  %68 = getelementptr inbounds i32, i32* %8, i64 8
  %69 = bitcast i32* %68 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %69, align 32
  %70 = shufflevector <2 x i64> %24, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %71 = shufflevector <2 x i64> %26, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %72 = shufflevector <2 x i64> %32, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %73 = shufflevector <2 x i64> %28, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %74 = bitcast <2 x i64> %70 to <8 x i16>
  %75 = bitcast <2 x i64> %71 to <8 x i16>
  %76 = bitcast <2 x i64> %72 to <8 x i16>
  %77 = bitcast <2 x i64> %73 to <8 x i16>
  br label %169

78:                                               ; preds = %13
  %79 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %48, <8 x i16> %23) #3
  %80 = bitcast <2 x i64> %26 to <8 x i16>
  %81 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %79, <8 x i16> %80) #3
  %82 = add <8 x i16> %81, %79
  %83 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %82, <8 x i16> %31) #3
  %84 = shufflevector <2 x i64> %24, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %85 = shufflevector <2 x i64> %26, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %86 = shufflevector <2 x i64> %32, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %87 = bitcast <2 x i64> %84 to <8 x i16>
  %88 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %51, <8 x i16> %87) #3
  %89 = bitcast <2 x i64> %85 to <8 x i16>
  %90 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %88, <8 x i16> %89) #3
  %91 = add <8 x i16> %90, %88
  %92 = bitcast <2 x i64> %86 to <8 x i16>
  %93 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %91, <8 x i16> %92) #3
  %94 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %83, <8 x i16> %38) #3
  %95 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %93, <8 x i16> %45) #3
  %96 = and <8 x i16> %94, %53
  %97 = and <8 x i16> %95, %57
  %98 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %96, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %99 = shufflevector <8 x i16> %96, <8 x i16> %98, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %100 = shufflevector <8 x i16> %96, <8 x i16> %98, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %101 = bitcast i32* %7 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %101, align 16
  %102 = getelementptr inbounds i32, i32* %7, i64 4
  %103 = bitcast i32* %102 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %103, align 16
  %104 = getelementptr inbounds i32, i32* %7, i64 8
  %105 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %97, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %106 = shufflevector <8 x i16> %97, <8 x i16> %105, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %107 = shufflevector <8 x i16> %97, <8 x i16> %105, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %108 = bitcast i32* %104 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %108, align 16
  %109 = getelementptr inbounds i32, i32* %7, i64 12
  %110 = bitcast i32* %109 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %110, align 16
  %111 = sub <8 x i16> zeroinitializer, %96
  %112 = icmp slt <8 x i16> %96, zeroinitializer
  %113 = select <8 x i1> %112, <8 x i16> %111, <8 x i16> %96
  %114 = shufflevector <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %96, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %115 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %96, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %116 = bitcast <2 x i64> %28 to <8 x i16>
  %117 = mul <8 x i16> %113, %116
  %118 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %113, <8 x i16> %116) #3
  %119 = shufflevector <8 x i16> %117, <8 x i16> %118, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %120 = shufflevector <8 x i16> %117, <8 x i16> %118, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %121 = bitcast <8 x i16> %119 to <4 x i32>
  %122 = lshr <4 x i32> %121, <i32 1, i32 1, i32 1, i32 1>
  %123 = bitcast <8 x i16> %120 to <4 x i32>
  %124 = lshr <4 x i32> %123, <i32 1, i32 1, i32 1, i32 1>
  %125 = bitcast <8 x i16> %114 to <4 x i32>
  %126 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %122, <4 x i32> %125) #3
  %127 = bitcast <8 x i16> %115 to <4 x i32>
  %128 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %124, <4 x i32> %127) #3
  %129 = bitcast i32* %8 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %129, align 16
  %130 = getelementptr inbounds i32, i32* %8, i64 4
  %131 = bitcast i32* %130 to <4 x i32>*
  store <4 x i32> %128, <4 x i32>* %131, align 16
  %132 = shufflevector <2 x i64> %28, <2 x i64> undef, <2 x i32> <i32 1, i32 1>
  %133 = getelementptr inbounds i32, i32* %8, i64 8
  %134 = sub <8 x i16> zeroinitializer, %97
  %135 = icmp slt <8 x i16> %97, zeroinitializer
  %136 = select <8 x i1> %135, <8 x i16> %134, <8 x i16> %97
  %137 = shufflevector <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %97, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %138 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %97, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %139 = bitcast <2 x i64> %132 to <8 x i16>
  %140 = mul <8 x i16> %136, %139
  %141 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %136, <8 x i16> %139) #3
  %142 = shufflevector <8 x i16> %140, <8 x i16> %141, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %143 = shufflevector <8 x i16> %140, <8 x i16> %141, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %144 = bitcast <8 x i16> %142 to <4 x i32>
  %145 = lshr <4 x i32> %144, <i32 1, i32 1, i32 1, i32 1>
  %146 = bitcast <8 x i16> %143 to <4 x i32>
  %147 = lshr <4 x i32> %146, <i32 1, i32 1, i32 1, i32 1>
  %148 = bitcast <8 x i16> %137 to <4 x i32>
  %149 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %145, <4 x i32> %148) #3
  %150 = bitcast <8 x i16> %138 to <4 x i32>
  %151 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %147, <4 x i32> %150) #3
  %152 = bitcast i32* %133 to <4 x i32>*
  store <4 x i32> %149, <4 x i32>* %152, align 16
  %153 = getelementptr inbounds i32, i32* %8, i64 12
  %154 = bitcast i32* %153 to <4 x i32>*
  store <4 x i32> %151, <4 x i32>* %154, align 16
  %155 = icmp eq <8 x i16> %96, zeroinitializer
  %156 = icmp eq <8 x i16> %97, zeroinitializer
  %157 = bitcast i16* %12 to <8 x i16>*
  %158 = load <8 x i16>, <8 x i16>* %157, align 16
  %159 = getelementptr inbounds i16, i16* %12, i64 8
  %160 = bitcast i16* %159 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 16
  %162 = sub <8 x i16> %158, %53
  %163 = sub <8 x i16> %161, %57
  %164 = select <8 x i1> %155, <8 x i16> zeroinitializer, <8 x i16> %162
  %165 = select <8 x i1> %156, <8 x i16> zeroinitializer, <8 x i16> %163
  %166 = icmp sgt <8 x i16> %164, %165
  %167 = select <8 x i1> %166, <8 x i16> %164, <8 x i16> %165
  %168 = bitcast <8 x i16> %167 to <2 x i64>
  br label %169

169:                                              ; preds = %78, %63
  %170 = phi <8 x i16> [ %139, %78 ], [ %77, %63 ]
  %171 = phi <8 x i16> [ %92, %78 ], [ %76, %63 ]
  %172 = phi <8 x i16> [ %89, %78 ], [ %75, %63 ]
  %173 = phi <8 x i16> [ %87, %78 ], [ %74, %63 ]
  %174 = phi <8 x i16> [ %167, %78 ], [ zeroinitializer, %63 ]
  %175 = phi <2 x i64> [ %168, %78 ], [ zeroinitializer, %63 ]
  br label %176

176:                                              ; preds = %169, %304
  %177 = phi i64 [ 16, %169 ], [ %307, %304 ]
  %178 = phi <2 x i64> [ %175, %169 ], [ %306, %304 ]
  %179 = phi <8 x i16> [ %174, %169 ], [ %305, %304 ]
  %180 = getelementptr inbounds i32, i32* %0, i64 %177
  %181 = bitcast i32* %180 to <4 x i32>*
  %182 = load <4 x i32>, <4 x i32>* %181, align 16
  %183 = getelementptr inbounds i32, i32* %180, i64 4
  %184 = bitcast i32* %183 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 16
  %186 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %182, <4 x i32> %185) #3
  %187 = getelementptr inbounds i32, i32* %180, i64 8
  %188 = bitcast i32* %187 to <4 x i32>*
  %189 = load <4 x i32>, <4 x i32>* %188, align 16
  %190 = getelementptr inbounds i32, i32* %187, i64 4
  %191 = bitcast i32* %190 to <4 x i32>*
  %192 = load <4 x i32>, <4 x i32>* %191, align 16
  %193 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %189, <4 x i32> %192) #3
  %194 = sub <8 x i16> zeroinitializer, %186
  %195 = icmp slt <8 x i16> %186, zeroinitializer
  %196 = select <8 x i1> %195, <8 x i16> %194, <8 x i16> %186
  %197 = sub <8 x i16> zeroinitializer, %193
  %198 = icmp slt <8 x i16> %193, zeroinitializer
  %199 = select <8 x i1> %198, <8 x i16> %197, <8 x i16> %193
  %200 = icmp sgt <8 x i16> %196, %55
  %201 = sext <8 x i1> %200 to <8 x i16>
  %202 = icmp sgt <8 x i16> %199, %55
  %203 = sext <8 x i1> %202 to <8 x i16>
  %204 = or <8 x i1> %202, %200
  %205 = sext <8 x i1> %204 to <8 x i16>
  %206 = bitcast <8 x i16> %205 to <2 x i64>
  %207 = tail call i32 @llvm.x86.sse41.ptestz(<2 x i64> %206, <2 x i64> %206) #3
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %218, label %209

209:                                              ; preds = %176
  %210 = getelementptr inbounds i32, i32* %7, i64 %177
  %211 = bitcast i32* %210 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %211, align 32
  %212 = getelementptr inbounds i32, i32* %8, i64 %177
  %213 = bitcast i32* %212 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %213, align 32
  %214 = getelementptr inbounds i32, i32* %210, i64 8
  %215 = bitcast i32* %214 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %215, align 32
  %216 = getelementptr inbounds i32, i32* %212, i64 8
  %217 = bitcast i32* %216 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %217, align 32
  br label %304

218:                                              ; preds = %176
  %219 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %196, <8 x i16> %173) #3
  %220 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %219, <8 x i16> %172) #3
  %221 = add <8 x i16> %220, %219
  %222 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %221, <8 x i16> %171) #3
  %223 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %199, <8 x i16> %173) #3
  %224 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %223, <8 x i16> %172) #3
  %225 = add <8 x i16> %224, %223
  %226 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %225, <8 x i16> %171) #3
  %227 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %222, <8 x i16> %186) #3
  %228 = tail call <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16> %226, <8 x i16> %193) #3
  %229 = and <8 x i16> %227, %201
  %230 = and <8 x i16> %228, %203
  %231 = getelementptr inbounds i32, i32* %7, i64 %177
  %232 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %229, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %233 = shufflevector <8 x i16> %229, <8 x i16> %232, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %234 = shufflevector <8 x i16> %229, <8 x i16> %232, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %235 = bitcast i32* %231 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %235, align 16
  %236 = getelementptr inbounds i32, i32* %231, i64 4
  %237 = bitcast i32* %236 to <8 x i16>*
  store <8 x i16> %234, <8 x i16>* %237, align 16
  %238 = getelementptr inbounds i32, i32* %231, i64 8
  %239 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %230, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>) #3
  %240 = shufflevector <8 x i16> %230, <8 x i16> %239, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %241 = shufflevector <8 x i16> %230, <8 x i16> %239, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %242 = bitcast i32* %238 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %242, align 16
  %243 = getelementptr inbounds i32, i32* %238, i64 4
  %244 = bitcast i32* %243 to <8 x i16>*
  store <8 x i16> %241, <8 x i16>* %244, align 16
  %245 = getelementptr inbounds i32, i32* %8, i64 %177
  %246 = sub <8 x i16> zeroinitializer, %229
  %247 = icmp slt <8 x i16> %229, zeroinitializer
  %248 = select <8 x i1> %247, <8 x i16> %246, <8 x i16> %229
  %249 = shufflevector <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %229, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %250 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %229, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %251 = mul <8 x i16> %248, %170
  %252 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %248, <8 x i16> %170) #3
  %253 = shufflevector <8 x i16> %251, <8 x i16> %252, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %254 = shufflevector <8 x i16> %251, <8 x i16> %252, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %255 = bitcast <8 x i16> %253 to <4 x i32>
  %256 = lshr <4 x i32> %255, <i32 1, i32 1, i32 1, i32 1>
  %257 = bitcast <8 x i16> %254 to <4 x i32>
  %258 = lshr <4 x i32> %257, <i32 1, i32 1, i32 1, i32 1>
  %259 = bitcast <8 x i16> %249 to <4 x i32>
  %260 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %256, <4 x i32> %259) #3
  %261 = bitcast <8 x i16> %250 to <4 x i32>
  %262 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %258, <4 x i32> %261) #3
  %263 = bitcast i32* %245 to <4 x i32>*
  store <4 x i32> %260, <4 x i32>* %263, align 16
  %264 = getelementptr inbounds i32, i32* %245, i64 4
  %265 = bitcast i32* %264 to <4 x i32>*
  store <4 x i32> %262, <4 x i32>* %265, align 16
  %266 = getelementptr inbounds i32, i32* %245, i64 8
  %267 = sub <8 x i16> zeroinitializer, %230
  %268 = icmp slt <8 x i16> %230, zeroinitializer
  %269 = select <8 x i1> %268, <8 x i16> %267, <8 x i16> %230
  %270 = shufflevector <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i16> %230, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %271 = shufflevector <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %230, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %272 = mul <8 x i16> %269, %170
  %273 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %269, <8 x i16> %170) #3
  %274 = shufflevector <8 x i16> %272, <8 x i16> %273, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %275 = shufflevector <8 x i16> %272, <8 x i16> %273, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %276 = bitcast <8 x i16> %274 to <4 x i32>
  %277 = lshr <4 x i32> %276, <i32 1, i32 1, i32 1, i32 1>
  %278 = bitcast <8 x i16> %275 to <4 x i32>
  %279 = lshr <4 x i32> %278, <i32 1, i32 1, i32 1, i32 1>
  %280 = bitcast <8 x i16> %270 to <4 x i32>
  %281 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %277, <4 x i32> %280) #3
  %282 = bitcast <8 x i16> %271 to <4 x i32>
  %283 = tail call <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32> %279, <4 x i32> %282) #3
  %284 = bitcast i32* %266 to <4 x i32>*
  store <4 x i32> %281, <4 x i32>* %284, align 16
  %285 = getelementptr inbounds i32, i32* %266, i64 4
  %286 = bitcast i32* %285 to <4 x i32>*
  store <4 x i32> %283, <4 x i32>* %286, align 16
  %287 = icmp eq <8 x i16> %229, zeroinitializer
  %288 = icmp eq <8 x i16> %230, zeroinitializer
  %289 = getelementptr inbounds i16, i16* %12, i64 %177
  %290 = bitcast i16* %289 to <8 x i16>*
  %291 = load <8 x i16>, <8 x i16>* %290, align 16
  %292 = getelementptr inbounds i16, i16* %289, i64 8
  %293 = bitcast i16* %292 to <8 x i16>*
  %294 = load <8 x i16>, <8 x i16>* %293, align 16
  %295 = sub <8 x i16> %291, %201
  %296 = sub <8 x i16> %294, %203
  %297 = select <8 x i1> %287, <8 x i16> zeroinitializer, <8 x i16> %295
  %298 = select <8 x i1> %288, <8 x i16> zeroinitializer, <8 x i16> %296
  %299 = icmp sgt <8 x i16> %297, %298
  %300 = select <8 x i1> %299, <8 x i16> %297, <8 x i16> %298
  %301 = icmp sgt <8 x i16> %179, %300
  %302 = select <8 x i1> %301, <8 x i16> %179, <8 x i16> %300
  %303 = bitcast <8 x i16> %302 to <2 x i64>
  br label %304

304:                                              ; preds = %218, %209
  %305 = phi <8 x i16> [ %179, %209 ], [ %302, %218 ]
  %306 = phi <2 x i64> [ %178, %209 ], [ %303, %218 ]
  %307 = add nuw nsw i64 %177, 16
  %308 = icmp ult i64 %307, 1024
  br i1 %308, label %176, label %309

309:                                              ; preds = %304
  %310 = bitcast <2 x i64> %306 to <4 x i32>
  %311 = shufflevector <4 x i32> %310, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 0>
  %312 = bitcast <4 x i32> %311 to <8 x i16>
  %313 = icmp sgt <8 x i16> %305, %312
  %314 = select <8 x i1> %313, <8 x i16> %305, <8 x i16> %312
  %315 = shufflevector <8 x i16> %314, <8 x i16> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %316 = icmp sgt <8 x i16> %314, %315
  %317 = select <8 x i1> %316, <8 x i16> %314, <8 x i16> %315
  %318 = shufflevector <8 x i16> %317, <8 x i16> undef, <8 x i32> <i32 1, i32 0, i32 0, i32 0, i32 4, i32 5, i32 6, i32 7>
  %319 = icmp sgt <8 x i16> %317, %318
  %320 = select <8 x i1> %319, <8 x i16> %317, <8 x i16> %318
  %321 = extractelement <8 x i16> %320, i64 1
  store i16 %321, i16* %10, align 2
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse41.ptestz(<2 x i64>, <2 x i64>) #1

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16>, <8 x i16>) #1

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.psign.w.128(<8 x i16>, <8 x i16>) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.ssse3.psign.d.128(<4 x i32>, <4 x i32>) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
