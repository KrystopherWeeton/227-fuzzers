; ModuleID = '../../third_party/blink/renderer/platform/text/segmented_string.cc'
source_filename = "../../third_party/blink/renderer/platform/text/segmented_string.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::SegmentedString" = type <{ %"class.blink::SegmentedSubstring", i32, i32, i32, [4 x i8], %"class.WTF::Deque", i8, i8, [6 x i8] }>
%"class.blink::SegmentedSubstring" = type { %union.anon, i8*, i8*, i8, i8, %"class.WTF::String" }
%union.anon = type { i8* }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::Deque" = type { %"class.WTF::Deque<blink::SegmentedSubstring, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<blink::SegmentedSubstring, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::SegmentedSubstring"*, i32, i32 }
%"class.WTF::DequeConstIterator" = type { %"class.WTF::DequeIteratorBase.base", [4 x i8] }
%"class.WTF::DequeIteratorBase.base" = type <{ %"class.WTF::Deque"*, i32 }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.11 }
%union.anon.11 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.WTF::DequeIterator" = type { %"class.WTF::DequeIteratorBase.base", [4 x i8] }
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon.1, i32, i8, i8, [2 x i8] }>
%union.anon.1 = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer.2" }
%"class.WTF::VectorBuffer.2" = type { %"class.WTF::VectorBufferBase.3", [16 x i8] }
%"class.WTF::VectorBufferBase.3" = type { i8*, i32, i32 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>

$_ZNK3WTF18DequeConstIteratorIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEEdeEv = comdat any

$_ZNK3WTF13DequeIteratorIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEEdeEv = comdat any

$_ZNK5blink18SegmentedSubstring8AppendToERN3WTF13StringBuilderE = comdat any

$_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv = comdat any

$_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE = comdat any

$_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE14ExpandCapacityEv = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18SegmentedSubstringEEEmm = comdat any

@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str = private unnamed_addr constant [23 x i8] c"index_ != deque_->end_\00", align 1
@.str.1 = private unnamed_addr constant [54 x i8] c"../../third_party/blink/renderer/platform/wtf/deque.h\00", align 1
@.str.2 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.3 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink18SegmentedSubstringEEEPKcv = private unnamed_addr constant [73 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::SegmentedSubstring]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink15SegmentedString6lengthEv(%"class.blink::SegmentedString"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::DequeConstIterator", align 8
  %3 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %10

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 4
  %8 = load i8, i8* %7, align 1, !range !2
  %9 = xor i8 %8, 1
  br label %18

10:                                               ; preds = %1
  %11 = getelementptr inbounds i8, i8* %4, i64 1
  %12 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 4
  %13 = load i8, i8* %12, align 1, !range !2
  %14 = xor i8 %13, 1
  %15 = zext i8 %14 to i64
  %16 = getelementptr inbounds i8, i8* %11, i64 %15
  %17 = ptrtoint i8* %16 to i64
  br label %18

18:                                               ; preds = %6, %10
  %19 = phi i8 [ %9, %6 ], [ %14, %10 ]
  %20 = phi i64 [ 0, %6 ], [ %17, %10 ]
  %21 = bitcast %"class.blink::SegmentedString"* %0 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %20, %22
  %24 = trunc i64 %23 to i32
  %25 = zext i8 %19 to i32
  %26 = ashr i32 %24, %25
  %27 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5, i32 1
  %28 = load i32, i32* %27, align 8
  %29 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5, i32 2
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %28, %30
  br i1 %31, label %76, label %32

32:                                               ; preds = %18
  %33 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5
  %34 = bitcast %"class.WTF::DequeConstIterator"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #10
  %35 = getelementptr inbounds %"class.WTF::DequeConstIterator", %"class.WTF::DequeConstIterator"* %2, i64 0, i32 0, i32 0
  %36 = getelementptr inbounds %"class.WTF::DequeConstIterator", %"class.WTF::DequeConstIterator"* %2, i64 0, i32 0, i32 1
  %37 = bitcast %"class.WTF::DequeConstIterator"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %37, i8 -86, i64 16, i1 false)
  store %"class.WTF::Deque"* %33, %"class.WTF::Deque"** %35, align 8, !alias.scope !3
  store i32 %28, i32* %36, align 8, !alias.scope !3
  br label %39

38:                                               ; preds = %57
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #10
  br label %76

39:                                               ; preds = %32, %57
  %40 = phi i32 [ %66, %57 ], [ %26, %32 ]
  %41 = call dereferenceable(40) %"class.blink::SegmentedSubstring"* @_ZNK3WTF18DequeConstIteratorIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEEdeEv(%"class.WTF::DequeConstIterator"* nonnull %2)
  %42 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %41, i64 0, i32 2
  %43 = load i8*, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %45, label %49

45:                                               ; preds = %39
  %46 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %41, i64 0, i32 4
  %47 = load i8, i8* %46, align 1, !range !2
  %48 = xor i8 %47, 1
  br label %57

49:                                               ; preds = %39
  %50 = getelementptr inbounds i8, i8* %43, i64 1
  %51 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %41, i64 0, i32 4
  %52 = load i8, i8* %51, align 1, !range !2
  %53 = xor i8 %52, 1
  %54 = zext i8 %53 to i64
  %55 = getelementptr inbounds i8, i8* %50, i64 %54
  %56 = ptrtoint i8* %55 to i64
  br label %57

57:                                               ; preds = %45, %49
  %58 = phi i8 [ %48, %45 ], [ %53, %49 ]
  %59 = phi i64 [ 0, %45 ], [ %56, %49 ]
  %60 = bitcast %"class.blink::SegmentedSubstring"* %41 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = sub i64 %59, %61
  %63 = trunc i64 %62 to i32
  %64 = zext i8 %58 to i32
  %65 = ashr i32 %63, %64
  %66 = add i32 %65, %40
  %67 = load i32, i32* %36, align 8
  %68 = load %"class.WTF::Deque"*, %"class.WTF::Deque"** %35, align 8
  %69 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %68, i64 0, i32 0, i32 0, i32 0, i32 1
  %70 = load i32, i32* %69, align 8
  %71 = add i32 %70, -1
  %72 = icmp eq i32 %67, %71
  %73 = add i32 %67, 1
  %74 = select i1 %72, i32 0, i32 %73
  store i32 %74, i32* %36, align 8
  %75 = icmp eq i32 %74, %30
  br i1 %75, label %38, label %39

76:                                               ; preds = %18, %38
  %77 = phi i32 [ %66, %38 ], [ %26, %18 ]
  ret i32 %77
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(40) %"class.blink::SegmentedSubstring"* @_ZNK3WTF18DequeConstIteratorIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEEdeEv(%"class.WTF::DequeConstIterator"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = getelementptr inbounds %"class.WTF::DequeConstIterator", %"class.WTF::DequeConstIterator"* %0, i64 0, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.WTF::DequeConstIterator", %"class.WTF::DequeConstIterator"* %0, i64 0, i32 0, i32 0
  %10 = load %"class.WTF::Deque"*, %"class.WTF::Deque"** %9, align 8
  %11 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %10, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #10
  %14 = icmp eq i32 %8, %12
  br i1 %14, label %16, label %15

15:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #10
  store i8* null, i8** %6, align 8
  br label %25

16:                                               ; preds = %1
  %17 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #10
  %18 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %17, i8* %18) #10
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #10
  store i8* %20, i8** %6, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %25, label %22

22:                                               ; preds = %16
  %23 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0), i32 693, %"class.logging::CheckOpResult"* nonnull %3) #10
  %24 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #10
  br label %25

25:                                               ; preds = %15, %16, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %26 = load %"class.WTF::Deque"*, %"class.WTF::Deque"** %9, align 8
  %27 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %26, i64 0, i32 0, i32 0, i32 0, i32 0
  %28 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %27, align 8
  %29 = load i32, i32* %7, align 8
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %28, i64 %30
  ret %"class.blink::SegmentedSubstring"* %31
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15SegmentedString21SetExcludeLineNumbersEv(%"class.blink::SegmentedString"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::DequeIterator", align 8
  %3 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 3
  store i8 0, i8* %3, align 8
  %4 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %5, %7
  br i1 %8, label %28, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5
  %11 = bitcast %"class.WTF::DequeIterator"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #10
  %12 = getelementptr inbounds %"class.WTF::DequeIterator", %"class.WTF::DequeIterator"* %2, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.WTF::DequeIterator", %"class.WTF::DequeIterator"* %2, i64 0, i32 0, i32 1
  %14 = bitcast %"class.WTF::DequeIterator"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 16, i1 false)
  store %"class.WTF::Deque"* %10, %"class.WTF::Deque"** %12, align 8, !alias.scope !6
  store i32 %5, i32* %13, align 8, !alias.scope !6
  br label %16

15:                                               ; preds = %16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #10
  br label %28

16:                                               ; preds = %9, %16
  %17 = call dereferenceable(40) %"class.blink::SegmentedSubstring"* @_ZNK3WTF13DequeIteratorIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEEdeEv(%"class.WTF::DequeIterator"* nonnull %2)
  %18 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %17, i64 0, i32 3
  store i8 0, i8* %18, align 8
  %19 = load i32, i32* %13, align 8
  %20 = load %"class.WTF::Deque"*, %"class.WTF::Deque"** %12, align 8
  %21 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %20, i64 0, i32 0, i32 0, i32 0, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = add i32 %22, -1
  %24 = icmp eq i32 %19, %23
  %25 = add i32 %19, 1
  %26 = select i1 %24, i32 0, i32 %25
  store i32 %26, i32* %13, align 8
  %27 = icmp eq i32 %26, %7
  br i1 %27, label %15, label %16

28:                                               ; preds = %1, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(40) %"class.blink::SegmentedSubstring"* @_ZNK3WTF13DequeIteratorIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEEdeEv(%"class.WTF::DequeIterator"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = getelementptr inbounds %"class.WTF::DequeIterator", %"class.WTF::DequeIterator"* %0, i64 0, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.WTF::DequeIterator", %"class.WTF::DequeIterator"* %0, i64 0, i32 0, i32 0
  %10 = load %"class.WTF::Deque"*, %"class.WTF::Deque"** %9, align 8
  %11 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %10, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #10
  %14 = icmp eq i32 %8, %12
  br i1 %14, label %16, label %15

15:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #10
  store i8* null, i8** %6, align 8
  br label %25

16:                                               ; preds = %1
  %17 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #10
  %18 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %17, i8* %18) #10
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #10
  store i8* %20, i8** %6, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %25, label %22

22:                                               ; preds = %16
  %23 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0), i32 693, %"class.logging::CheckOpResult"* nonnull %3) #10
  %24 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #10
  br label %25

25:                                               ; preds = %15, %16, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %26 = load %"class.WTF::Deque"*, %"class.WTF::Deque"** %9, align 8
  %27 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %26, i64 0, i32 0, i32 0, i32 0, i32 0
  %28 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %27, align 8
  %29 = load i32, i32* %7, align 8
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %28, i64 %30
  ret %"class.blink::SegmentedSubstring"* %31
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15SegmentedString5ClearEv(%"class.blink::SegmentedString"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 4
  store i8 1, i8* %2, align 1
  %3 = bitcast %"class.blink::SegmentedString"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #10
  %4 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 1
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 2
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 3
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5
  tail call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"* %7) #10
  %8 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5, i32 1
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5, i32 2
  store i32 0, i32* %9, align 4
  %10 = bitcast %"class.WTF::Deque"* %7 to i8**
  %11 = load i8*, i8** %10, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %11) #10
  %12 = bitcast %"class.WTF::Deque"* %7 to i64*
  store atomic i64 0, i64* %12 monotonic, align 8
  %13 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1
  store i32 0, i32* %13, align 8
  %14 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 6
  store i8 0, i8* %14, align 8
  %15 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 7
  store i8 1, i8* %15, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15SegmentedString6AppendERKNS_18SegmentedSubstringE(%"class.blink::SegmentedString"*, %"class.blink::SegmentedSubstring"* nocapture readonly dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %1, i64 0, i32 2
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %1, i64 0, i32 4
  %8 = load i8, i8* %7, align 1, !range !2
  %9 = xor i8 %8, 1
  br label %18

10:                                               ; preds = %2
  %11 = getelementptr inbounds i8, i8* %4, i64 1
  %12 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %1, i64 0, i32 4
  %13 = load i8, i8* %12, align 1, !range !2
  %14 = xor i8 %13, 1
  %15 = zext i8 %14 to i64
  %16 = getelementptr inbounds i8, i8* %11, i64 %15
  %17 = ptrtoint i8* %16 to i64
  br label %18

18:                                               ; preds = %6, %10
  %19 = phi i8 [ %9, %6 ], [ %14, %10 ]
  %20 = phi i64 [ 0, %6 ], [ %17, %10 ]
  %21 = bitcast %"class.blink::SegmentedSubstring"* %1 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %20, %22
  %24 = trunc i64 %23 to i32
  %25 = zext i8 %19 to i32
  %26 = ashr i32 %24, %25
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %167, label %28

28:                                               ; preds = %18
  %29 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 2
  %30 = load i8*, i8** %29, align 8
  %31 = icmp eq i8* %30, null
  br i1 %31, label %32, label %36

32:                                               ; preds = %28
  %33 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 4
  %34 = load i8, i8* %33, align 1, !range !2
  %35 = xor i8 %34, 1
  br label %44

36:                                               ; preds = %28
  %37 = getelementptr inbounds i8, i8* %30, i64 1
  %38 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 4
  %39 = load i8, i8* %38, align 1, !range !2
  %40 = xor i8 %39, 1
  %41 = zext i8 %40 to i64
  %42 = getelementptr inbounds i8, i8* %37, i64 %41
  %43 = ptrtoint i8* %42 to i64
  br label %44

44:                                               ; preds = %32, %36
  %45 = phi i8 [ %34, %32 ], [ %39, %36 ]
  %46 = phi i8 [ %35, %32 ], [ %40, %36 ]
  %47 = phi i64 [ 0, %32 ], [ %43, %36 ]
  %48 = bitcast %"class.blink::SegmentedString"* %0 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = sub i64 %47, %49
  %51 = trunc i64 %50 to i32
  %52 = zext i8 %46 to i32
  %53 = ashr i32 %51, %52
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %109

55:                                               ; preds = %44
  %56 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 1
  %57 = bitcast i8** %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = sub i64 %49, %58
  %60 = trunc i64 %59 to i32
  %61 = xor i8 %45, 1
  %62 = zext i8 %61 to i32
  %63 = ashr i32 %60, %62
  %64 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 1
  %65 = load i32, i32* %64, align 8
  %66 = add nsw i32 %63, %65
  store i32 %66, i32* %64, align 8
  %67 = bitcast %"class.blink::SegmentedString"* %0 to i8*
  %68 = bitcast %"class.blink::SegmentedSubstring"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 26, i1 false) #10
  %69 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 5
  %70 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %1, i64 0, i32 5, i32 0, i32 0
  %71 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %70, align 8
  %72 = icmp eq %"class.WTF::StringImpl"* %71, null
  br i1 %72, label %90, label %73

73:                                               ; preds = %55
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load atomic i32, i32* %74 monotonic, align 4
  %76 = and i32 %75, 2
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %90

78:                                               ; preds = %73
  %79 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 0
  %80 = load i32, i32* %79, align 4
  %81 = zext i32 %80 to i33
  %82 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %81, i33 1) #10
  %83 = extractvalue { i33, i1 } %82, 1
  %84 = extractvalue { i33, i1 } %82, 0
  %85 = icmp slt i33 %84, 0
  %86 = or i1 %83, %85
  br i1 %86, label %87, label %88, !prof !9

87:                                               ; preds = %78
  tail call void @llvm.trap() #10
  unreachable

88:                                               ; preds = %78
  %89 = trunc i33 %84 to i32
  store i32 %89, i32* %79, align 4
  br label %90

90:                                               ; preds = %88, %73, %55
  %91 = ptrtoint %"class.WTF::StringImpl"* %71 to i64
  %92 = bitcast %"class.WTF::String"* %69 to i64*
  %93 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %69, i64 0, i32 0, i32 0
  %94 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %93, align 8
  store i64 %91, i64* %92, align 8
  %95 = icmp eq %"class.WTF::StringImpl"* %94, null
  br i1 %95, label %165, label %96

96:                                               ; preds = %90
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %94, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %98 = load atomic i32, i32* %97 monotonic, align 4
  %99 = and i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %94, i64 0, i32 0
  %102 = load i32, i32* %101, align 4
  br i1 %100, label %103, label %105

103:                                              ; preds = %96
  %104 = add i32 %102, -1
  store i32 %104, i32* %101, align 4
  br label %105

105:                                              ; preds = %103, %96
  %106 = phi i32 [ %104, %103 ], [ %102, %96 ]
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %165

108:                                              ; preds = %105
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %94) #10
  br label %165

109:                                              ; preds = %44
  %110 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5
  %111 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5, i32 1
  %112 = load i32, i32* %111, align 8
  %113 = icmp eq i32 %112, 0
  %114 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5, i32 2
  %115 = load i32, i32* %114, align 4
  br i1 %113, label %119, label %116

116:                                              ; preds = %109
  %117 = add i32 %115, 1
  %118 = icmp eq i32 %117, %112
  br i1 %118, label %128, label %130

119:                                              ; preds = %109
  %120 = icmp eq i32 %115, 0
  %121 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1
  %122 = load i32, i32* %121, align 8
  br i1 %120, label %126, label %123

123:                                              ; preds = %119
  %124 = add i32 %122, -1
  %125 = icmp eq i32 %115, %124
  br i1 %125, label %128, label %130

126:                                              ; preds = %119
  %127 = icmp eq i32 %122, 0
  br i1 %127, label %128, label %130

128:                                              ; preds = %126, %123, %116
  tail call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE14ExpandCapacityEv(%"class.WTF::Deque"* %110) #10
  %129 = load i32, i32* %114, align 4
  br label %130

130:                                              ; preds = %128, %126, %123, %116
  %131 = phi i32 [ %115, %116 ], [ %115, %123 ], [ 0, %126 ], [ %129, %128 ]
  %132 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %110, i64 0, i32 0, i32 0, i32 0, i32 0
  %133 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %132, align 8
  %134 = zext i32 %131 to i64
  %135 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %133, i64 %134
  %136 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1
  %137 = load i32, i32* %136, align 8
  %138 = add i32 %137, -1
  %139 = icmp eq i32 %131, %138
  %140 = add i32 %131, 1
  %141 = select i1 %139, i32 0, i32 %140
  store i32 %141, i32* %114, align 4
  %142 = bitcast %"class.blink::SegmentedSubstring"* %135 to i8*
  %143 = bitcast %"class.blink::SegmentedSubstring"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %142, i8* align 8 %143, i64 26, i1 false) #10
  %144 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %1, i64 0, i32 5, i32 0, i32 0
  %145 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %144, align 8
  %146 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %133, i64 %134, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %145, %"class.WTF::StringImpl"** %146, align 8
  %147 = icmp eq %"class.WTF::StringImpl"* %145, null
  br i1 %147, label %165, label %148

148:                                              ; preds = %130
  %149 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %145, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %150 = load atomic i32, i32* %149 monotonic, align 4
  %151 = and i32 %150, 2
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %165

153:                                              ; preds = %148
  %154 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %145, i64 0, i32 0
  %155 = load i32, i32* %154, align 4
  %156 = zext i32 %155 to i33
  %157 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %156, i33 1) #10
  %158 = extractvalue { i33, i1 } %157, 1
  %159 = extractvalue { i33, i1 } %157, 0
  %160 = icmp slt i33 %159, 0
  %161 = or i1 %158, %160
  br i1 %161, label %162, label %163, !prof !9

162:                                              ; preds = %153
  tail call void @llvm.trap() #10
  unreachable

163:                                              ; preds = %153
  %164 = trunc i33 %159 to i32
  store i32 %164, i32* %154, align 4
  br label %165

165:                                              ; preds = %163, %148, %130, %108, %105, %90
  %166 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 7
  store i8 0, i8* %166, align 1
  br label %167

167:                                              ; preds = %18, %165
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15SegmentedString4PushEDs(%"class.blink::SegmentedString"*, i16 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca i16, align 2
  %4 = alloca %"class.blink::SegmentedString", align 8
  %5 = alloca %"class.WTF::String", align 8
  store i16 %1, i16* %3, align 2
  %6 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 1
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %7, %9
  br i1 %10, label %28, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 4
  %13 = load i8, i8* %12, align 1, !range !2
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %22, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds i8, i8* %7, i64 -1
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = zext i16 %1 to i32
  %20 = icmp eq i32 %18, %19
  br i1 %20, label %21, label %28

21:                                               ; preds = %15
  store i8* %16, i8** %6, align 8
  br label %162

22:                                               ; preds = %11
  %23 = getelementptr inbounds i8, i8* %7, i64 -2
  %24 = bitcast i8* %23 to i16*
  %25 = load i16, i16* %24, align 2
  %26 = icmp eq i16 %25, %1
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  store i8* %23, i8** %6, align 8
  br label %162

28:                                               ; preds = %2, %15, %22
  %29 = bitcast %"class.blink::SegmentedString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %29) #10
  %30 = bitcast %"class.WTF::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #10
  call void @_ZN3WTF6StringC1EPKDsj(%"class.WTF::String"* nonnull %5, i16* nonnull %3, i32 1) #10
  %31 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %4, i64 0, i32 0, i32 3
  store i8 1, i8* %31, align 8
  %32 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %4, i64 0, i32 0, i32 4
  store i8 1, i8* %32, align 1
  %33 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  %34 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %35 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %4, i64 0, i32 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %34, %"class.WTF::StringImpl"** %35, align 8
  %36 = icmp eq %"class.WTF::StringImpl"* %34, null
  br i1 %36, label %90, label %37

37:                                               ; preds = %28
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load atomic i32, i32* %38 monotonic, align 4
  %40 = and i32 %39, 2
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %56

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 0, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = zext i32 %44 to i33
  %46 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %45, i33 1) #10
  %47 = extractvalue { i33, i1 } %46, 1
  %48 = extractvalue { i33, i1 } %46, 0
  %49 = icmp slt i33 %48, 0
  %50 = or i1 %47, %49
  br i1 %50, label %51, label %52, !prof !9

51:                                               ; preds = %42
  call void @llvm.trap() #10
  unreachable

52:                                               ; preds = %42
  %53 = trunc i33 %48 to i32
  store i32 %53, i32* %43, align 4
  %54 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %55 = icmp eq %"class.WTF::StringImpl"* %54, null
  br i1 %55, label %90, label %56

56:                                               ; preds = %37, %52
  %57 = phi %"class.WTF::StringImpl"* [ %54, %52 ], [ %34, %37 ]
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %57, i64 0, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %90, label %61

61:                                               ; preds = %56
  %62 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %35, align 8
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = and i32 %64, 1
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %78, label %67

67:                                               ; preds = %61
  store i8 1, i8* %32, align 1
  %68 = icmp eq %"class.WTF::StringImpl"* %62, null
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 1
  %70 = bitcast %"class.WTF::StringImpl"* %69 to i8*
  %71 = select i1 %68, i8* null, i8* %70
  %72 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %4, i64 0, i32 0, i32 0, i32 0
  store i8* %71, i8** %72, align 8
  %73 = zext i32 %59 to i64
  %74 = getelementptr inbounds i8, i8* %71, i64 %73
  %75 = getelementptr inbounds i8, i8* %74, i64 -1
  %76 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %4, i64 0, i32 0, i32 2
  store i8* %75, i8** %76, align 8
  %77 = ptrtoint i8* %71 to i64
  br label %95

78:                                               ; preds = %61
  store i8 0, i8* %32, align 1
  %79 = icmp eq %"class.WTF::StringImpl"* %62, null
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 1
  %81 = bitcast %"class.WTF::StringImpl"* %80 to i16*
  %82 = select i1 %79, i16* null, i16* %81
  %83 = bitcast %"class.blink::SegmentedString"* %4 to i16**
  store i16* %82, i16** %83, align 8
  %84 = zext i32 %59 to i64
  %85 = getelementptr inbounds i16, i16* %82, i64 %84
  %86 = getelementptr inbounds i16, i16* %85, i64 -1
  %87 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %4, i64 0, i32 0, i32 2
  %88 = bitcast i8** %87 to i16**
  store i16* %86, i16** %88, align 8
  %89 = ptrtoint i16* %82 to i64
  br label %95

90:                                               ; preds = %28, %56, %52
  %91 = phi i1 [ false, %56 ], [ true, %52 ], [ true, %28 ]
  %92 = phi %"class.WTF::StringImpl"* [ %57, %56 ], [ null, %52 ], [ null, %28 ]
  store i8 1, i8* %32, align 1
  %93 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %4, i64 0, i32 0, i32 0, i32 0
  store i8* null, i8** %93, align 8
  %94 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %4, i64 0, i32 0, i32 2
  store i8* null, i8** %94, align 8
  br label %95

95:                                               ; preds = %90, %78, %67
  %96 = phi i1 [ false, %67 ], [ false, %78 ], [ %91, %90 ]
  %97 = phi %"class.WTF::StringImpl"* [ %57, %67 ], [ %57, %78 ], [ %92, %90 ]
  %98 = phi i64 [ %77, %67 ], [ %89, %78 ], [ 0, %90 ]
  %99 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %4, i64 0, i32 0, i32 1
  %100 = bitcast i8** %99 to i64*
  store i64 %98, i64* %100, align 8
  %101 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %4, i64 0, i32 1
  store i32 0, i32* %101, align 8
  %102 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %4, i64 0, i32 2
  store i32 0, i32* %102, align 4
  %103 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %4, i64 0, i32 3
  store i32 0, i32* %103, align 8
  %104 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %4, i64 0, i32 5
  %105 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %4, i64 0, i32 7
  %106 = bitcast %"class.WTF::Deque"* %104 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %106, i8 0, i64 25, i1 false) #10
  br i1 %96, label %112, label %107

107:                                              ; preds = %95
  %108 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %97, i64 0, i32 1
  %109 = load i32, i32* %108, align 4
  %110 = icmp eq i32 %109, 0
  %111 = zext i1 %110 to i8
  br label %112

112:                                              ; preds = %95, %107
  %113 = phi i8 [ %111, %107 ], [ 1, %95 ]
  store i8 %113, i8* %105, align 1
  call void @_ZN5blink15SegmentedString7PrependERKS0_NS0_11PrependTypeE(%"class.blink::SegmentedString"* %0, %"class.blink::SegmentedString"* nonnull dereferenceable(88) %4, i32 1)
  %114 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %104, i64 0, i32 0, i32 0, i32 0, i32 0
  %115 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %114, align 8
  %116 = icmp eq %"class.blink::SegmentedSubstring"* %115, null
  br i1 %116, label %129, label %117

117:                                              ; preds = %112
  %118 = bitcast %"class.blink::SegmentedSubstring"* %115 to i8*
  %119 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %4, i64 0, i32 5, i32 1
  %120 = load i32, i32* %119, align 8
  %121 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %4, i64 0, i32 5, i32 2
  %122 = load i32, i32* %121, align 4
  %123 = icmp eq i32 %120, %122
  br i1 %123, label %127, label %124

124:                                              ; preds = %117
  call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"* %104) #10
  %125 = bitcast %"class.WTF::Deque"* %104 to i8**
  %126 = load i8*, i8** %125, align 8
  br label %127

127:                                              ; preds = %124, %117
  %128 = phi i8* [ %126, %124 ], [ %118, %117 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %128) #10
  store %"class.blink::SegmentedSubstring"* null, %"class.blink::SegmentedSubstring"** %114, align 8
  br label %129

129:                                              ; preds = %127, %112
  %130 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %35, align 8
  %131 = icmp eq %"class.WTF::StringImpl"* %130, null
  br i1 %131, label %145, label %132

132:                                              ; preds = %129
  %133 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %130, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %134 = load atomic i32, i32* %133 monotonic, align 4
  %135 = and i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %130, i64 0, i32 0
  %138 = load i32, i32* %137, align 4
  br i1 %136, label %139, label %141

139:                                              ; preds = %132
  %140 = add i32 %138, -1
  store i32 %140, i32* %137, align 4
  br label %141

141:                                              ; preds = %139, %132
  %142 = phi i32 [ %140, %139 ], [ %138, %132 ]
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %145

144:                                              ; preds = %141
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %130) #10
  br label %145

145:                                              ; preds = %129, %141, %144
  %146 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %147 = icmp eq %"class.WTF::StringImpl"* %146, null
  br i1 %147, label %161, label %148

148:                                              ; preds = %145
  %149 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %146, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %150 = load atomic i32, i32* %149 monotonic, align 4
  %151 = and i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %146, i64 0, i32 0
  %154 = load i32, i32* %153, align 4
  br i1 %152, label %155, label %157

155:                                              ; preds = %148
  %156 = add i32 %154, -1
  store i32 %156, i32* %153, align 4
  br label %157

157:                                              ; preds = %155, %148
  %158 = phi i32 [ %156, %155 ], [ %154, %148 ]
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %160, label %161

160:                                              ; preds = %157
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %146) #10
  br label %161

161:                                              ; preds = %145, %157, %160
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #10
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %29) #10
  br label %162

162:                                              ; preds = %27, %21, %161
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15SegmentedString7PrependERKS0_NS0_11PrependTypeE(%"class.blink::SegmentedString"*, %"class.blink::SegmentedString"* dereferenceable(88), i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::DequeConstIterator", align 8
  %5 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 5, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 5, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %6, %8
  br i1 %9, label %32, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 5
  %12 = ptrtoint %"class.WTF::Deque"* %11 to i64
  %13 = bitcast %"class.WTF::DequeConstIterator"* %4 to i8*
  %14 = getelementptr inbounds %"class.WTF::DequeConstIterator", %"class.WTF::DequeConstIterator"* %4, i64 0, i32 0, i32 1
  %15 = bitcast %"class.WTF::DequeConstIterator"* %4 to i64*
  %16 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1
  br label %17

17:                                               ; preds = %10, %29
  %18 = phi i32 [ %8, %10 ], [ %30, %29 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false) #10
  store i64 %12, i64* %15, align 8
  store i32 %18, i32* %14, align 8
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %26

20:                                               ; preds = %17
  %21 = load i32, i32* %16, align 8
  %22 = add i32 %21, -1
  store i32 %22, i32* %14, align 8
  %23 = call dereferenceable(40) %"class.blink::SegmentedSubstring"* @_ZNK3WTF18DequeConstIteratorIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEEdeEv(%"class.WTF::DequeConstIterator"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #10
  call void @_ZN5blink15SegmentedString7PrependERKNS_18SegmentedSubstringENS0_11PrependTypeE(%"class.blink::SegmentedString"* %0, %"class.blink::SegmentedSubstring"* dereferenceable(40) %23, i32 %2)
  %24 = load i32, i32* %16, align 8
  %25 = add i32 %24, -1
  br label %29

26:                                               ; preds = %17
  %27 = add i32 %18, -1
  store i32 %27, i32* %14, align 8
  %28 = call dereferenceable(40) %"class.blink::SegmentedSubstring"* @_ZNK3WTF18DequeConstIteratorIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEEdeEv(%"class.WTF::DequeConstIterator"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #10
  call void @_ZN5blink15SegmentedString7PrependERKNS_18SegmentedSubstringENS0_11PrependTypeE(%"class.blink::SegmentedString"* %0, %"class.blink::SegmentedSubstring"* dereferenceable(40) %28, i32 %2)
  br label %29

29:                                               ; preds = %26, %20
  %30 = phi i32 [ %27, %26 ], [ %25, %20 ]
  %31 = icmp eq i32 %30, %6
  br i1 %31, label %32, label %17

32:                                               ; preds = %29, %3
  %33 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 0
  call void @_ZN5blink15SegmentedString7PrependERKNS_18SegmentedSubstringENS0_11PrependTypeE(%"class.blink::SegmentedString"* %0, %"class.blink::SegmentedSubstring"* dereferenceable(40) %33, i32 %2)
  ret void
}

declare void @_ZN3WTF6StringC1EPKDsj(%"class.WTF::String"*, i16*, i32) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15SegmentedString7PrependERKNS_18SegmentedSubstringENS0_11PrependTypeE(%"class.blink::SegmentedString"*, %"class.blink::SegmentedSubstring"* nocapture readonly dereferenceable(40), i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %1, i64 0, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %7, label %11

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %1, i64 0, i32 4
  %9 = load i8, i8* %8, align 1, !range !2
  %10 = xor i8 %9, 1
  br label %19

11:                                               ; preds = %3
  %12 = getelementptr inbounds i8, i8* %5, i64 1
  %13 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %1, i64 0, i32 4
  %14 = load i8, i8* %13, align 1, !range !2
  %15 = xor i8 %14, 1
  %16 = zext i8 %15 to i64
  %17 = getelementptr inbounds i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  br label %19

19:                                               ; preds = %7, %11
  %20 = phi i8 [ %10, %7 ], [ %15, %11 ]
  %21 = phi i64 [ 0, %7 ], [ %18, %11 ]
  %22 = bitcast %"class.blink::SegmentedSubstring"* %1 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = sub i64 %21, %23
  %25 = trunc i64 %24 to i32
  %26 = zext i8 %20 to i32
  %27 = ashr i32 %25, %26
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %225, label %29

29:                                               ; preds = %19
  %30 = bitcast %"class.blink::SegmentedString"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 1
  %33 = bitcast i8** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = sub i64 %31, %34
  %36 = trunc i64 %35 to i32
  %37 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 4
  %38 = load i8, i8* %37, align 1, !range !2
  %39 = xor i8 %38, 1
  %40 = zext i8 %39 to i32
  %41 = ashr i32 %36, %40
  %42 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = add nsw i32 %41, %43
  store i32 %44, i32* %42, align 8
  %45 = icmp eq i32 %2, 1
  br i1 %45, label %46, label %70

46:                                               ; preds = %29
  %47 = load i8*, i8** %4, align 8
  %48 = icmp eq i8* %47, null
  br i1 %48, label %49, label %53

49:                                               ; preds = %46
  %50 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %1, i64 0, i32 4
  %51 = load i8, i8* %50, align 1, !range !2
  %52 = xor i8 %51, 1
  br label %61

53:                                               ; preds = %46
  %54 = getelementptr inbounds i8, i8* %47, i64 1
  %55 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %1, i64 0, i32 4
  %56 = load i8, i8* %55, align 1, !range !2
  %57 = xor i8 %56, 1
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds i8, i8* %54, i64 %58
  %60 = ptrtoint i8* %59 to i64
  br label %61

61:                                               ; preds = %49, %53
  %62 = phi i8 [ %52, %49 ], [ %57, %53 ]
  %63 = phi i64 [ 0, %49 ], [ %60, %53 ]
  %64 = load i64, i64* %22, align 8
  %65 = sub i64 %63, %64
  %66 = trunc i64 %65 to i32
  %67 = zext i8 %62 to i32
  %68 = ashr i32 %66, %67
  %69 = sub nsw i32 %44, %68
  store i32 %69, i32* %42, align 8
  br label %70

70:                                               ; preds = %61, %29
  %71 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 2
  %72 = load i8*, i8** %71, align 8
  %73 = icmp eq i8* %72, null
  %74 = getelementptr inbounds i8, i8* %72, i64 1
  %75 = zext i8 %39 to i64
  %76 = getelementptr inbounds i8, i8* %74, i64 %75
  %77 = ptrtoint i8* %76 to i64
  %78 = select i1 %73, i64 0, i64 %77
  %79 = sub i64 %78, %31
  %80 = trunc i64 %79 to i32
  %81 = ashr i32 %80, %40
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %126

83:                                               ; preds = %70
  %84 = bitcast %"class.blink::SegmentedString"* %0 to i8*
  %85 = bitcast %"class.blink::SegmentedSubstring"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %85, i64 26, i1 false) #10
  %86 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 5
  %87 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %1, i64 0, i32 5, i32 0, i32 0
  %88 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %87, align 8
  %89 = icmp eq %"class.WTF::StringImpl"* %88, null
  br i1 %89, label %107, label %90

90:                                               ; preds = %83
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %88, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = load atomic i32, i32* %91 monotonic, align 4
  %93 = and i32 %92, 2
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %107

95:                                               ; preds = %90
  %96 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %88, i64 0, i32 0
  %97 = load i32, i32* %96, align 4
  %98 = zext i32 %97 to i33
  %99 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %98, i33 1) #10
  %100 = extractvalue { i33, i1 } %99, 1
  %101 = extractvalue { i33, i1 } %99, 0
  %102 = icmp slt i33 %101, 0
  %103 = or i1 %100, %102
  br i1 %103, label %104, label %105, !prof !9

104:                                              ; preds = %95
  tail call void @llvm.trap() #10
  unreachable

105:                                              ; preds = %95
  %106 = trunc i33 %101 to i32
  store i32 %106, i32* %96, align 4
  br label %107

107:                                              ; preds = %105, %90, %83
  %108 = ptrtoint %"class.WTF::StringImpl"* %88 to i64
  %109 = bitcast %"class.WTF::String"* %86 to i64*
  %110 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %86, i64 0, i32 0, i32 0
  %111 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %110, align 8
  store i64 %108, i64* %109, align 8
  %112 = icmp eq %"class.WTF::StringImpl"* %111, null
  br i1 %112, label %223, label %113

113:                                              ; preds = %107
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %115 = load atomic i32, i32* %114 monotonic, align 4
  %116 = and i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %111, i64 0, i32 0
  %119 = load i32, i32* %118, align 4
  br i1 %117, label %120, label %122

120:                                              ; preds = %113
  %121 = add i32 %119, -1
  store i32 %121, i32* %118, align 4
  br label %122

122:                                              ; preds = %120, %113
  %123 = phi i32 [ %121, %120 ], [ %119, %113 ]
  %124 = icmp eq i32 %123, 0
  br i1 %124, label %125, label %223

125:                                              ; preds = %122
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %111) #10
  br label %223

126:                                              ; preds = %70
  %127 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5
  %128 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5, i32 1
  %129 = load i32, i32* %128, align 8
  %130 = icmp eq i32 %129, 0
  %131 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5, i32 2
  %132 = load i32, i32* %131, align 4
  br i1 %130, label %136, label %133

133:                                              ; preds = %126
  %134 = add i32 %132, 1
  %135 = icmp eq i32 %134, %129
  br i1 %135, label %145, label %151

136:                                              ; preds = %126
  %137 = icmp eq i32 %132, 0
  %138 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1
  %139 = load i32, i32* %138, align 8
  br i1 %137, label %143, label %140

140:                                              ; preds = %136
  %141 = add i32 %139, -1
  %142 = icmp eq i32 %132, %141
  br i1 %142, label %145, label %151

143:                                              ; preds = %136
  %144 = icmp eq i32 %139, 0
  br i1 %144, label %145, label %151

145:                                              ; preds = %143, %140, %133
  tail call void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE14ExpandCapacityEv(%"class.WTF::Deque"* %127) #10
  %146 = load i32, i32* %128, align 8
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %151

148:                                              ; preds = %145
  %149 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1
  %150 = load i32, i32* %149, align 8
  br label %151

151:                                              ; preds = %140, %143, %148, %145, %133
  %152 = phi i32 [ %146, %145 ], [ %129, %133 ], [ %150, %148 ], [ %139, %143 ], [ %139, %140 ]
  %153 = add i32 %152, -1
  store i32 %153, i32* %128, align 8
  %154 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %127, i64 0, i32 0, i32 0, i32 0, i32 0
  %155 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %154, align 8
  %156 = zext i32 %153 to i64
  %157 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %155, i64 %156
  %158 = bitcast %"class.blink::SegmentedSubstring"* %157 to i8*
  %159 = bitcast %"class.blink::SegmentedString"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %158, i8* align 8 %159, i64 26, i1 false) #10
  %160 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  %161 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %160, align 8
  %162 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %155, i64 %156, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %161, %"class.WTF::StringImpl"** %162, align 8
  %163 = icmp eq %"class.WTF::StringImpl"* %161, null
  br i1 %163, label %181, label %164

164:                                              ; preds = %151
  %165 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %161, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %166 = load atomic i32, i32* %165 monotonic, align 4
  %167 = and i32 %166, 2
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %169, label %181

169:                                              ; preds = %164
  %170 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %161, i64 0, i32 0
  %171 = load i32, i32* %170, align 4
  %172 = zext i32 %171 to i33
  %173 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %172, i33 1) #10
  %174 = extractvalue { i33, i1 } %173, 1
  %175 = extractvalue { i33, i1 } %173, 0
  %176 = icmp slt i33 %175, 0
  %177 = or i1 %174, %176
  br i1 %177, label %178, label %179, !prof !9

178:                                              ; preds = %169
  tail call void @llvm.trap() #10
  unreachable

179:                                              ; preds = %169
  %180 = trunc i33 %175 to i32
  store i32 %180, i32* %170, align 4
  br label %181

181:                                              ; preds = %151, %164, %179
  %182 = bitcast %"class.blink::SegmentedSubstring"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %159, i8* align 8 %182, i64 26, i1 false) #10
  %183 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 5
  %184 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %1, i64 0, i32 5, i32 0, i32 0
  %185 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %184, align 8
  %186 = icmp eq %"class.WTF::StringImpl"* %185, null
  br i1 %186, label %204, label %187

187:                                              ; preds = %181
  %188 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %189 = load atomic i32, i32* %188 monotonic, align 4
  %190 = and i32 %189, 2
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %192, label %204

192:                                              ; preds = %187
  %193 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 0, i32 0
  %194 = load i32, i32* %193, align 4
  %195 = zext i32 %194 to i33
  %196 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %195, i33 1) #10
  %197 = extractvalue { i33, i1 } %196, 1
  %198 = extractvalue { i33, i1 } %196, 0
  %199 = icmp slt i33 %198, 0
  %200 = or i1 %197, %199
  br i1 %200, label %201, label %202, !prof !9

201:                                              ; preds = %192
  tail call void @llvm.trap() #10
  unreachable

202:                                              ; preds = %192
  %203 = trunc i33 %198 to i32
  store i32 %203, i32* %193, align 4
  br label %204

204:                                              ; preds = %202, %187, %181
  %205 = ptrtoint %"class.WTF::StringImpl"* %185 to i64
  %206 = bitcast %"class.WTF::String"* %183 to i64*
  %207 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %183, i64 0, i32 0, i32 0
  %208 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %207, align 8
  store i64 %205, i64* %206, align 8
  %209 = icmp eq %"class.WTF::StringImpl"* %208, null
  br i1 %209, label %223, label %210

210:                                              ; preds = %204
  %211 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %208, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %212 = load atomic i32, i32* %211 monotonic, align 4
  %213 = and i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %208, i64 0, i32 0
  %216 = load i32, i32* %215, align 4
  br i1 %214, label %217, label %219

217:                                              ; preds = %210
  %218 = add i32 %216, -1
  store i32 %218, i32* %215, align 4
  br label %219

219:                                              ; preds = %217, %210
  %220 = phi i32 [ %218, %217 ], [ %216, %210 ]
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %222, label %223

222:                                              ; preds = %219
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %208) #10
  br label %223

223:                                              ; preds = %222, %219, %204, %125, %122, %107
  %224 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 7
  store i8 0, i8* %224, align 1
  br label %225

225:                                              ; preds = %19, %223
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink15SegmentedString5CloseEv(%"class.blink::SegmentedString"* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 6
  store i8 1, i8* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15SegmentedString6AppendERKS0_(%"class.blink::SegmentedString"*, %"class.blink::SegmentedString"* dereferenceable(88)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::DequeConstIterator", align 8
  %4 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 0
  tail call void @_ZN5blink15SegmentedString6AppendERKNS_18SegmentedSubstringE(%"class.blink::SegmentedString"* %0, %"class.blink::SegmentedSubstring"* dereferenceable(40) %4)
  %5 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 5, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 5, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %6, %8
  br i1 %9, label %28, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %1, i64 0, i32 5
  %12 = bitcast %"class.WTF::DequeConstIterator"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #10
  %13 = getelementptr inbounds %"class.WTF::DequeConstIterator", %"class.WTF::DequeConstIterator"* %3, i64 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.WTF::DequeConstIterator", %"class.WTF::DequeConstIterator"* %3, i64 0, i32 0, i32 1
  %15 = bitcast %"class.WTF::DequeConstIterator"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 16, i1 false)
  store %"class.WTF::Deque"* %11, %"class.WTF::Deque"** %13, align 8, !alias.scope !10
  store i32 %6, i32* %14, align 8, !alias.scope !10
  br label %17

16:                                               ; preds = %17
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #10
  br label %28

17:                                               ; preds = %10, %17
  %18 = call dereferenceable(40) %"class.blink::SegmentedSubstring"* @_ZNK3WTF18DequeConstIteratorIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEEdeEv(%"class.WTF::DequeConstIterator"* nonnull %3)
  call void @_ZN5blink15SegmentedString6AppendERKNS_18SegmentedSubstringE(%"class.blink::SegmentedString"* %0, %"class.blink::SegmentedSubstring"* dereferenceable(40) %18)
  %19 = load i32, i32* %14, align 8
  %20 = load %"class.WTF::Deque"*, %"class.WTF::Deque"** %13, align 8
  %21 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %20, i64 0, i32 0, i32 0, i32 0, i32 1
  %22 = load i32, i32* %21, align 8
  %23 = add i32 %22, -1
  %24 = icmp eq i32 %19, %23
  %25 = add i32 %19, 1
  %26 = select i1 %24, i32 0, i32 %25
  store i32 %26, i32* %14, align 8
  %27 = icmp eq i32 %26, %8
  br i1 %27, label %16, label %17

28:                                               ; preds = %2, %16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = alloca { %union.anon, i8*, i8*, i8, i8 }, align 8
  %3 = bitcast %"class.blink::SegmentedString"* %0 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 1
  %6 = bitcast i8** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %4, %7
  %9 = trunc i64 %8 to i32
  %10 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 4
  %11 = load i8, i8* %10, align 1, !range !2
  %12 = xor i8 %11, 1
  %13 = zext i8 %12 to i32
  %14 = ashr i32 %9, %13
  %15 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = add i32 %16, 1
  %18 = add i32 %17, %14
  store i32 %18, i32* %15, align 8
  %19 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %20, %22
  br i1 %23, label %109, label %24

24:                                               ; preds = %1
  %25 = bitcast { %union.anon, i8*, i8*, i8, i8 }* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 32, i1 false), !alias.scope !13
  %26 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %27 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %26, align 8, !noalias !13
  %28 = zext i32 %20 to i64
  %29 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %27, i64 %28
  %30 = bitcast %"class.blink::SegmentedSubstring"* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %25, i8* align 8 %30, i64 26, i1 false)
  %31 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %27, i64 %28, i32 5
  %32 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %31, i64 0, i32 0, i32 0
  %33 = bitcast %"class.WTF::String"* %31 to i64*
  %34 = load i64, i64* %33, align 8, !noalias !13
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %32, align 8, !noalias !13
  %35 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %26, align 8, !noalias !13
  %36 = load i32, i32* %19, align 8, !noalias !13
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %35, i64 %37
  %39 = add i32 %36, 1
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %35, i64 %40
  br label %42

42:                                               ; preds = %60, %24
  %43 = phi %"class.blink::SegmentedSubstring"* [ %61, %60 ], [ %38, %24 ]
  %44 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %43, i64 0, i32 5, i32 0, i32 0
  %45 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %44, align 8, !noalias !13
  %46 = icmp eq %"class.WTF::StringImpl"* %45, null
  br i1 %46, label %60, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %49 = load atomic i32, i32* %48 monotonic, align 4, !noalias !13
  %50 = and i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %45, i64 0, i32 0
  %53 = load i32, i32* %52, align 4, !noalias !13
  br i1 %51, label %54, label %56

54:                                               ; preds = %47
  %55 = add i32 %53, -1
  store i32 %55, i32* %52, align 4, !noalias !13
  br label %56

56:                                               ; preds = %54, %47
  %57 = phi i32 [ %55, %54 ], [ %53, %47 ]
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %56
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %45) #10, !noalias !13
  br label %60

60:                                               ; preds = %59, %56, %42
  %61 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %43, i64 1
  %62 = icmp eq %"class.blink::SegmentedSubstring"* %61, %41
  br i1 %62, label %63, label %42

63:                                               ; preds = %60
  %64 = load i32, i32* %19, align 8, !noalias !13
  %65 = add i32 %64, 1
  %66 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1
  %67 = load i32, i32* %66, align 8, !noalias !13
  %68 = add i32 %67, -1
  %69 = icmp eq i32 %64, %68
  %70 = select i1 %69, i32 0, i32 %65
  store i32 %70, i32* %19, align 8, !noalias !13
  %71 = bitcast %"class.blink::SegmentedString"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %71, i8* nonnull align 8 %25, i64 26, i1 false)
  %72 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 5
  %73 = bitcast %"class.WTF::String"* %72 to i64*
  %74 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %72, i64 0, i32 0, i32 0
  %75 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %74, align 8
  store i64 %34, i64* %73, align 8
  %76 = icmp eq %"class.WTF::StringImpl"* %75, null
  br i1 %76, label %90, label %77

77:                                               ; preds = %63
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = load atomic i32, i32* %78 monotonic, align 4
  %80 = and i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 0
  %83 = load i32, i32* %82, align 4
  br i1 %81, label %84, label %86

84:                                               ; preds = %77
  %85 = add i32 %83, -1
  store i32 %85, i32* %82, align 4
  br label %86

86:                                               ; preds = %84, %77
  %87 = phi i32 [ %85, %84 ], [ %83, %77 ]
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %90

89:                                               ; preds = %86
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %75) #10
  br label %90

90:                                               ; preds = %89, %86, %63
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25)
  %91 = load i64, i64* %3, align 8
  %92 = load i64, i64* %6, align 8
  %93 = sub i64 %91, %92
  %94 = trunc i64 %93 to i32
  %95 = load i8, i8* %10, align 1, !range !2
  %96 = xor i8 %95, 1
  %97 = zext i8 %96 to i32
  %98 = ashr i32 %94, %97
  %99 = load i32, i32* %15, align 8
  %100 = sub nsw i32 %99, %98
  store i32 %100, i32* %15, align 8
  %101 = icmp eq i8 %95, 0
  br i1 %101, label %106, label %102

102:                                              ; preds = %90
  %103 = inttoptr i64 %91 to i8*
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i16
  br label %112

106:                                              ; preds = %90
  %107 = inttoptr i64 %91 to i16*
  %108 = load i16, i16* %107, align 2
  br label %112

109:                                              ; preds = %1
  store i8 1, i8* %10, align 1
  %110 = bitcast %"class.blink::SegmentedString"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %110, i8 0, i64 24, i1 false) #10
  %111 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 7
  store i8 1, i8* %111, align 1
  br label %112

112:                                              ; preds = %106, %102, %109
  %113 = phi i16 [ 0, %109 ], [ %105, %102 ], [ %108, %106 ]
  ret i16 %113
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink15SegmentedString8ToStringEv(%"class.blink::SegmentedString"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::StringBuilder", align 8
  %3 = alloca %"class.WTF::DequeConstIterator", align 8
  %4 = bitcast %"class.WTF::StringBuilder"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %4) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 48, i1 false)
  %5 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %2, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %5, align 8
  %6 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %2, i64 0, i32 1
  %7 = bitcast %union.anon.1* %6 to i8*
  store i8 0, i8* %7, align 8
  %8 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %2, i64 0, i32 2
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %2, i64 0, i32 3
  store i8 1, i8* %9, align 4
  %10 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %2, i64 0, i32 4
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0
  call void @_ZNK5blink18SegmentedSubstring8AppendToERN3WTF13StringBuilderE(%"class.blink::SegmentedSubstring"* %11, %"class.WTF::StringBuilder"* nonnull dereferenceable(48) %2)
  %12 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %13, %15
  br i1 %16, label %35, label %17

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 5
  %19 = bitcast %"class.WTF::DequeConstIterator"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #10
  %20 = getelementptr inbounds %"class.WTF::DequeConstIterator", %"class.WTF::DequeConstIterator"* %3, i64 0, i32 0, i32 0
  %21 = getelementptr inbounds %"class.WTF::DequeConstIterator", %"class.WTF::DequeConstIterator"* %3, i64 0, i32 0, i32 1
  %22 = bitcast %"class.WTF::DequeConstIterator"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 16, i1 false)
  store %"class.WTF::Deque"* %18, %"class.WTF::Deque"** %20, align 8, !alias.scope !16
  store i32 %13, i32* %21, align 8, !alias.scope !16
  br label %24

23:                                               ; preds = %24
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #10
  br label %35

24:                                               ; preds = %17, %24
  %25 = call dereferenceable(40) %"class.blink::SegmentedSubstring"* @_ZNK3WTF18DequeConstIteratorIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEEdeEv(%"class.WTF::DequeConstIterator"* nonnull %3)
  call void @_ZNK5blink18SegmentedSubstring8AppendToERN3WTF13StringBuilderE(%"class.blink::SegmentedSubstring"* %25, %"class.WTF::StringBuilder"* nonnull dereferenceable(48) %2)
  %26 = load i32, i32* %21, align 8
  %27 = load %"class.WTF::Deque"*, %"class.WTF::Deque"** %20, align 8
  %28 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %27, i64 0, i32 0, i32 0, i32 0, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = add i32 %29, -1
  %31 = icmp eq i32 %26, %30
  %32 = add i32 %26, 1
  %33 = select i1 %31, i32 0, i32 %32
  store i32 %33, i32* %21, align 8
  %34 = icmp eq i32 %33, %15
  br i1 %34, label %23, label %24

35:                                               ; preds = %1, %23
  %36 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %2) #10
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %2) #10
  %37 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %38 = icmp eq %"class.WTF::StringImpl"* %37, null
  br i1 %38, label %52, label %39

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  br i1 %43, label %46, label %48

46:                                               ; preds = %39
  %47 = add i32 %45, -1
  store i32 %47, i32* %44, align 4
  br label %48

48:                                               ; preds = %46, %39
  %49 = phi i32 [ %47, %46 ], [ %45, %39 ]
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %48
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %37) #10
  br label %52

52:                                               ; preds = %35, %48, %51
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %4) #10
  ret %"class.WTF::StringImpl"* %36
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5blink18SegmentedSubstring8AppendToERN3WTF13StringBuilderE(%"class.blink::SegmentedSubstring"*, %"class.WTF::StringBuilder"* dereferenceable(48)) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = bitcast %"class.blink::SegmentedSubstring"* %0 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %0, i64 0, i32 1
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = trunc i64 %10 to i32
  %12 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %0, i64 0, i32 4
  %13 = load i8, i8* %12, align 1, !range !2
  %14 = xor i8 %13, 1
  %15 = zext i8 %14 to i32
  %16 = ashr i32 %11, %15
  %17 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %0, i64 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = icmp eq i8* %18, null
  %20 = getelementptr inbounds i8, i8* %18, i64 1
  %21 = zext i8 %14 to i64
  %22 = getelementptr inbounds i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = select i1 %19, i64 0, i64 %23
  %25 = sub i64 %24, %6
  %26 = trunc i64 %25 to i32
  %27 = ashr i32 %26, %15
  %28 = icmp eq i32 %16, 0
  br i1 %28, label %29, label %50

29:                                               ; preds = %2
  %30 = icmp eq i32 %27, 0
  br i1 %30, label %82, label %31

31:                                               ; preds = %29
  %32 = bitcast %"class.WTF::StringView"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #10
  %33 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %0, i64 0, i32 5, i32 0, i32 0
  %34 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %33, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %34, null
  br i1 %35, label %36, label %40

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  store i8* null, i8** %37, align 8
  %38 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %39 = bitcast %"class.WTF::StringView"* %3 to i64*
  store i64 %38, i64* %39, align 8
  br label %47

40:                                               ; preds = %31
  %41 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 0
  store %"class.WTF::StringImpl"* %34, %"class.WTF::StringImpl"** %41, align 8
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 0, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 1
  %45 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  %46 = bitcast i8** %45 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %44, %"class.WTF::StringImpl"** %46, align 8
  br label %47

47:                                               ; preds = %36, %40
  %48 = phi i32 [ %43, %40 ], [ 0, %36 ]
  %49 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  store i32 %48, i32* %49, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %3)
  br label %80

50:                                               ; preds = %2
  %51 = bitcast %"class.WTF::StringView"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %51) #10
  %52 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %0, i64 0, i32 5
  %53 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF6String9SubstringEjj(%"class.WTF::String"* %52, i32 %16, i32 %27) #10
  %54 = icmp eq %"class.WTF::StringImpl"* %53, null
  br i1 %54, label %55, label %60

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  store i8* null, i8** %56, align 8
  %57 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %58 = bitcast %"class.WTF::StringView"* %4 to i64*
  store i64 %57, i64* %58, align 8
  %59 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  store i32 0, i32* %59, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %4)
  br label %80

60:                                               ; preds = %50
  %61 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 0
  store %"class.WTF::StringImpl"* %53, %"class.WTF::StringImpl"** %61, align 8
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %53, i64 0, i32 1
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %53, i64 1
  %65 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  %66 = bitcast i8** %65 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %64, %"class.WTF::StringImpl"** %66, align 8
  %67 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  store i32 %63, i32* %67, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %4)
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %53, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %53, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %60
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %60
  %77 = phi i32 [ %75, %74 ], [ %73, %60 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %76
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %53) #10
  br label %80

80:                                               ; preds = %79, %76, %55, %47
  %81 = phi i8* [ %32, %47 ], [ %51, %55 ], [ %51, %76 ], [ %51, %79 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %81) #10
  br label %82

82:                                               ; preds = %80, %29
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15SegmentedString7AdvanceEjPDs(%"class.blink::SegmentedString"* nocapture, i32, i16* nocapture) local_unnamed_addr #0 align 2 {
  %4 = icmp eq i32 %1, 0
  br i1 %4, label %11, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 4
  %7 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 0, i32 0
  %8 = bitcast %"class.blink::SegmentedString"* %0 to i16**
  %9 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 2
  %10 = zext i32 %1 to i64
  br label %12

11:                                               ; preds = %38, %3
  ret void

12:                                               ; preds = %38, %5
  %13 = phi i64 [ 0, %5 ], [ %39, %38 ]
  %14 = load i8, i8* %6, align 1, !range !2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %12
  %17 = load i8*, i8** %7, align 8
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i16
  br label %23

20:                                               ; preds = %12
  %21 = load i16*, i16** %8, align 8
  %22 = load i16, i16* %21, align 2
  br label %23

23:                                               ; preds = %16, %20
  %24 = phi i16 [ %19, %16 ], [ %22, %20 ]
  %25 = getelementptr inbounds i16, i16* %2, i64 %13
  store i16 %24, i16* %25, align 2
  %26 = load i8*, i8** %7, align 8
  %27 = load i8*, i8** %9, align 8
  %28 = icmp ult i8* %26, %27
  br i1 %28, label %29, label %36, !prof !19

29:                                               ; preds = %23
  %30 = load i8, i8* %6, align 1, !range !2
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %34, label %32

32:                                               ; preds = %29
  %33 = getelementptr inbounds i8, i8* %26, i64 1
  store i8* %33, i8** %7, align 8
  br label %38

34:                                               ; preds = %29
  %35 = getelementptr inbounds i8, i8* %26, i64 2
  store i8* %35, i8** %7, align 8
  br label %38

36:                                               ; preds = %23
  %37 = tail call zeroext i16 @_ZN5blink15SegmentedString16AdvanceSubstringEv(%"class.blink::SegmentedString"* %0) #10
  br label %38

38:                                               ; preds = %32, %34, %36
  %39 = add nuw nsw i64 %13, 1
  %40 = icmp eq i64 %39, %10
  br i1 %40, label %11, label %12
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink15SegmentedString11CurrentLineEv(%"class.blink::SegmentedString"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink15SegmentedString13CurrentColumnEv(%"class.blink::SegmentedString"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = bitcast %"class.blink::SegmentedString"* %0 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = trunc i64 %9 to i32
  %11 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 4
  %12 = load i8, i8* %11, align 1, !range !2
  %13 = xor i8 %12, 1
  %14 = zext i8 %13 to i32
  %15 = ashr i32 %10, %14
  %16 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = sub i32 %3, %17
  %19 = add i32 %18, %15
  ret i32 %19
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink15SegmentedString18SetCurrentPositionEN3WTF13OrdinalNumberES2_i(%"class.blink::SegmentedString"* nocapture, i32, i32, i32) local_unnamed_addr #5 align 2 {
  %5 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 3
  store i32 %1, i32* %5, align 8
  %6 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = bitcast %"class.blink::SegmentedString"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 1
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %9, %12
  %14 = trunc i64 %13 to i32
  %15 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 0, i32 4
  %16 = load i8, i8* %15, align 1, !range !2
  %17 = xor i8 %16, 1
  %18 = zext i8 %17 to i32
  %19 = ashr i32 %14, %18
  %20 = sub i32 %3, %2
  %21 = add i32 %20, %7
  %22 = add i32 %21, %19
  %23 = getelementptr inbounds %"class.blink::SegmentedString", %"class.blink::SegmentedString"* %0, i64 0, i32 2
  store i32 %22, i32* %23, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE10DestroyAllEv(%"class.WTF::Deque"*) local_unnamed_addr #8 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp ugt i32 %3, %5
  %7 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %7, align 8
  %9 = zext i32 %5 to i64
  %10 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %8, i64 %9
  br i1 %6, label %37, label %11

11:                                               ; preds = %1
  %12 = icmp eq i32 %3, %5
  br i1 %12, label %95, label %13

13:                                               ; preds = %11
  %14 = zext i32 %3 to i64
  %15 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %8, i64 %14
  br label %16

16:                                               ; preds = %13, %34
  %17 = phi %"class.blink::SegmentedSubstring"* [ %35, %34 ], [ %15, %13 ]
  %18 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %17, i64 0, i32 5, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %34, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  br i1 %25, label %28, label %30

28:                                               ; preds = %21
  %29 = add i32 %27, -1
  store i32 %29, i32* %26, align 4
  br label %30

30:                                               ; preds = %28, %21
  %31 = phi i32 [ %29, %28 ], [ %27, %21 ]
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %30
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %19) #10
  br label %34

34:                                               ; preds = %33, %30, %16
  %35 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %17, i64 1
  %36 = icmp eq %"class.blink::SegmentedSubstring"* %35, %10
  br i1 %36, label %95, label %16

37:                                               ; preds = %1
  %38 = icmp eq i32 %5, 0
  br i1 %38, label %63, label %39

39:                                               ; preds = %37, %57
  %40 = phi %"class.blink::SegmentedSubstring"* [ %58, %57 ], [ %8, %37 ]
  %41 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %40, i64 0, i32 5, i32 0, i32 0
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %42, null
  br i1 %43, label %57, label %44

44:                                               ; preds = %39
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %50 = load i32, i32* %49, align 4
  br i1 %48, label %51, label %53

51:                                               ; preds = %44
  %52 = add i32 %50, -1
  store i32 %52, i32* %49, align 4
  br label %53

53:                                               ; preds = %51, %44
  %54 = phi i32 [ %52, %51 ], [ %50, %44 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %53
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %42) #10
  br label %57

57:                                               ; preds = %56, %53, %39
  %58 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %40, i64 1
  %59 = icmp eq %"class.blink::SegmentedSubstring"* %58, %10
  br i1 %59, label %60, label %39

60:                                               ; preds = %57
  %61 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %7, align 8
  %62 = load i32, i32* %2, align 8
  br label %63

63:                                               ; preds = %60, %37
  %64 = phi i32 [ %62, %60 ], [ %3, %37 ]
  %65 = phi %"class.blink::SegmentedSubstring"* [ %61, %60 ], [ %8, %37 ]
  %66 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %67 = load i32, i32* %66, align 8
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %65, i64 %68
  %70 = icmp eq i32 %64, %67
  br i1 %70, label %95, label %71

71:                                               ; preds = %63
  %72 = zext i32 %64 to i64
  %73 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %65, i64 %72
  br label %74

74:                                               ; preds = %71, %92
  %75 = phi %"class.blink::SegmentedSubstring"* [ %93, %92 ], [ %73, %71 ]
  %76 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %75, i64 0, i32 5, i32 0, i32 0
  %77 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %76, align 8
  %78 = icmp eq %"class.WTF::StringImpl"* %77, null
  br i1 %78, label %92, label %79

79:                                               ; preds = %74
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load atomic i32, i32* %80 monotonic, align 4
  %82 = and i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 0
  %85 = load i32, i32* %84, align 4
  br i1 %83, label %86, label %88

86:                                               ; preds = %79
  %87 = add i32 %85, -1
  store i32 %87, i32* %84, align 4
  br label %88

88:                                               ; preds = %86, %79
  %89 = phi i32 [ %87, %86 ], [ %85, %79 ]
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %92

91:                                               ; preds = %88
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %77) #10
  br label %92

92:                                               ; preds = %91, %88, %74
  %93 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %75, i64 1
  %94 = icmp eq %"class.blink::SegmentedSubstring"* %93, %69
  br i1 %94, label %95, label %74

95:                                               ; preds = %34, %92, %63, %11
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %81, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 1
  %10 = bitcast %"class.WTF::StringImpl"* %9 to i8*
  %11 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, %10
  %14 = bitcast i8* %12 to i16*
  br i1 %13, label %15, label %20

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %4, %17
  %19 = select i1 %18, %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"* null
  br label %20

20:                                               ; preds = %6, %15
  %21 = phi %"class.WTF::StringImpl"* [ %19, %15 ], [ null, %6 ]
  %22 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %74

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %27 = load i8, i8* %26, align 1, !range !2
  %28 = icmp eq i8 %27, 0
  %29 = icmp ne %"class.WTF::StringImpl"* %21, null
  %30 = and i1 %29, %28
  br i1 %30, label %31, label %74

31:                                               ; preds = %25
  %32 = ptrtoint %"class.WTF::StringImpl"* %21 to i64
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 2
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %49

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = zext i32 %39 to i33
  %41 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %40, i33 1) #10
  %42 = extractvalue { i33, i1 } %41, 1
  %43 = extractvalue { i33, i1 } %41, 0
  %44 = icmp slt i33 %43, 0
  %45 = or i1 %42, %44
  br i1 %45, label %46, label %47, !prof !9

46:                                               ; preds = %37
  tail call void @llvm.trap() #10
  unreachable

47:                                               ; preds = %37
  %48 = trunc i33 %43 to i32
  store i32 %48, i32* %38, align 4
  br label %49

49:                                               ; preds = %31, %47
  %50 = bitcast %"class.WTF::StringBuilder"* %0 to i64*
  %51 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 0, i32 0, i32 0
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  store i64 %32, i64* %50, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %67, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  br i1 %58, label %61, label %63

61:                                               ; preds = %54
  %62 = add i32 %60, -1
  store i32 %62, i32* %59, align 4
  br label %63

63:                                               ; preds = %61, %54
  %64 = phi i32 [ %62, %61 ], [ %60, %54 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %52) #10
  br label %67

67:                                               ; preds = %66, %63, %49
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 1
  %69 = load i32, i32* %68, align 4
  store i32 %69, i32* %22, align 8
  %70 = load atomic i32, i32* %33 monotonic, align 4
  %71 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %72 = trunc i32 %70 to i8
  %73 = and i8 %72, 1
  store i8 %73, i8* %71, align 4
  br label %81

74:                                               ; preds = %20, %25
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = and i32 %76, 1
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %80, label %79

79:                                               ; preds = %74
  tail call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* %0, i8* %12, i32 %4) #10
  br label %81

80:                                               ; preds = %74
  tail call void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"* %0, i16* %14, i32 %4) #10
  br label %81

81:                                               ; preds = %67, %80, %79, %2
  ret void
}

declare %"class.WTF::StringImpl"* @_ZNK3WTF6String9SubstringEjj(%"class.WTF::String"*, i32, i32) local_unnamed_addr #2

declare void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"*, i8*, i32) local_unnamed_addr #2

declare void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"*, i16*, i32) local_unnamed_addr #2

declare void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #2

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #9

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE14ExpandCapacityEv(%"class.WTF::Deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %4, align 8
  %6 = lshr i32 %3, 2
  %7 = add i32 %3, 1
  %8 = add i32 %7, %6
  %9 = icmp ugt i32 %8, 16
  %10 = select i1 %9, i32 %8, i32 16
  %11 = zext i32 %10 to i64
  %12 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18SegmentedSubstringEEEmm(i64 %11) #10
  %13 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18SegmentedSubstringEEEmm(i64 %11) #10
  %14 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %13, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink18SegmentedSubstringEEEPKcv, i64 0, i64 0)) #10
  %15 = ptrtoint i8* %14 to i64
  %16 = bitcast %"class.WTF::Deque"* %0 to i64*
  store atomic i64 %15, i64* %16 monotonic, align 8
  %17 = udiv i64 %13, 40
  %18 = trunc i64 %17 to i32
  store i32 %18, i32* %2, align 8
  %19 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = getelementptr inbounds %"class.WTF::Deque", %"class.WTF::Deque"* %0, i64 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = icmp ugt i32 %20, %22
  %24 = bitcast i8* %14 to %"class.blink::SegmentedSubstring"*
  br i1 %23, label %47, label %25

25:                                               ; preds = %1
  %26 = zext i32 %20 to i64
  %27 = zext i32 %22 to i64
  %28 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %5, i64 %27
  %29 = icmp eq i32 %20, %22
  br i1 %29, label %98, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %24, i64 %26
  %32 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %5, i64 %26
  br label %33

33:                                               ; preds = %30, %33
  %34 = phi %"class.blink::SegmentedSubstring"* [ %45, %33 ], [ %32, %30 ]
  %35 = phi %"class.blink::SegmentedSubstring"* [ %44, %33 ], [ %31, %30 ]
  %36 = bitcast %"class.blink::SegmentedSubstring"* %35 to i8*
  %37 = bitcast %"class.blink::SegmentedSubstring"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 26, i1 false) #10
  %38 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %35, i64 0, i32 5
  %39 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %34, i64 0, i32 5
  %40 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %39, i64 0, i32 0, i32 0
  %41 = bitcast %"class.WTF::String"* %39 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %"class.WTF::String"* %38 to i64*
  store i64 %42, i64* %43, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %40, align 8
  %44 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %35, i64 1
  %45 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %34, i64 1
  %46 = icmp eq %"class.blink::SegmentedSubstring"* %45, %28
  br i1 %46, label %98, label %33

47:                                               ; preds = %1
  %48 = zext i32 %22 to i64
  %49 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %5, i64 %48
  %50 = icmp eq i32 %22, 0
  br i1 %50, label %69, label %51

51:                                               ; preds = %47, %51
  %52 = phi %"class.blink::SegmentedSubstring"* [ %63, %51 ], [ %5, %47 ]
  %53 = phi %"class.blink::SegmentedSubstring"* [ %62, %51 ], [ %24, %47 ]
  %54 = bitcast %"class.blink::SegmentedSubstring"* %53 to i8*
  %55 = bitcast %"class.blink::SegmentedSubstring"* %52 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 26, i1 false) #10
  %56 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %53, i64 0, i32 5
  %57 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %52, i64 0, i32 5
  %58 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %57, i64 0, i32 0, i32 0
  %59 = bitcast %"class.WTF::String"* %57 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = bitcast %"class.WTF::String"* %56 to i64*
  store i64 %60, i64* %61, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %58, align 8
  %62 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %53, i64 1
  %63 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %52, i64 1
  %64 = icmp eq %"class.blink::SegmentedSubstring"* %63, %49
  br i1 %64, label %65, label %51

65:                                               ; preds = %51
  %66 = load i32, i32* %2, align 8
  %67 = load i32, i32* %19, align 8
  %68 = load %"class.blink::SegmentedSubstring"*, %"class.blink::SegmentedSubstring"** %4, align 8
  br label %69

69:                                               ; preds = %65, %47
  %70 = phi %"class.blink::SegmentedSubstring"* [ %68, %65 ], [ %24, %47 ]
  %71 = phi i32 [ %67, %65 ], [ %20, %47 ]
  %72 = phi i32 [ %66, %65 ], [ %18, %47 ]
  %73 = sub i32 %71, %3
  %74 = add i32 %73, %72
  %75 = zext i32 %3 to i64
  %76 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %5, i64 %75
  %77 = icmp eq i32 %71, %3
  br i1 %77, label %97, label %78

78:                                               ; preds = %69
  %79 = zext i32 %74 to i64
  %80 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %70, i64 %79
  %81 = zext i32 %71 to i64
  %82 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %5, i64 %81
  br label %83

83:                                               ; preds = %78, %83
  %84 = phi %"class.blink::SegmentedSubstring"* [ %95, %83 ], [ %82, %78 ]
  %85 = phi %"class.blink::SegmentedSubstring"* [ %94, %83 ], [ %80, %78 ]
  %86 = bitcast %"class.blink::SegmentedSubstring"* %85 to i8*
  %87 = bitcast %"class.blink::SegmentedSubstring"* %84 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %86, i8* align 8 %87, i64 26, i1 false) #10
  %88 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %85, i64 0, i32 5
  %89 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %84, i64 0, i32 5
  %90 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %89, i64 0, i32 0, i32 0
  %91 = bitcast %"class.WTF::String"* %89 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = bitcast %"class.WTF::String"* %88 to i64*
  store i64 %92, i64* %93, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %90, align 8
  %94 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %85, i64 1
  %95 = getelementptr inbounds %"class.blink::SegmentedSubstring", %"class.blink::SegmentedSubstring"* %84, i64 1
  %96 = icmp eq %"class.blink::SegmentedSubstring"* %95, %76
  br i1 %96, label %97, label %83

97:                                               ; preds = %83, %69
  store i32 %74, i32* %19, align 8
  br label %98

98:                                               ; preds = %33, %25, %97
  %99 = bitcast %"class.blink::SegmentedSubstring"* %5 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %99) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink18SegmentedSubstringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 53634662
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 53634662) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #10
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #10
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #10
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %20 = mul i64 %0, 40
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #10
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNK3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE5beginEv: argument 0"}
!5 = distinct !{!5, !"_ZNK3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE5beginEv"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE5beginEv: argument 0"}
!8 = distinct !{!8, !"_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE5beginEv"}
!9 = !{!"branch_weights", i32 1, i32 2000}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZNK3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE5beginEv: argument 0"}
!12 = distinct !{!12, !"_ZNK3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE5beginEv"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE9TakeFirstEv: argument 0"}
!15 = distinct !{!15, !"_ZN3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE9TakeFirstEv"}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZNK3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE5beginEv: argument 0"}
!18 = distinct !{!18, !"_ZNK3WTF5DequeIN5blink18SegmentedSubstringELj0ENS_18PartitionAllocatorEE5beginEv"}
!19 = !{!"branch_weights", i32 2000, i32 1}
