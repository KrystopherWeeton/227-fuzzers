; ModuleID = '../../third_party/skia/src/utils/SkOSPath.cpp'
source_filename = "../../third_party/skia/src/utils/SkOSPath.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkString = type { %class.sk_sp }
%class.sk_sp = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8SkOSPath4JoinEPKcS1_(%class.SkString* noalias sret, i8*, i8*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkString, %class.SkString* %0, i64 0, i32 0, i32 0
  store %"struct.SkString::Rec"* inttoptr (i64 -6148914691236517206 to %"struct.SkString::Rec"*), %"struct.SkString::Rec"** %4, align 8
  tail call void @_ZN8SkStringC1EPKc(%class.SkString* %0, i8* %1) #3
  %5 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %4, align 8
  %6 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %5, i64 0, i32 2
  %7 = tail call zeroext i1 @_Z13SkStrEndsWithPKcc(i8* %6, i8 signext 47) #3
  br i1 %7, label %14, label %8

8:                                                ; preds = %3
  %9 = load %"struct.SkString::Rec"*, %"struct.SkString::Rec"** %4, align 8
  %10 = getelementptr inbounds %"struct.SkString::Rec", %"struct.SkString::Rec"* %9, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %8
  tail call void @_ZN8SkString13insertUnicharEmi(%class.SkString* %0, i64 -1, i32 47) #3
  br label %14

14:                                               ; preds = %13, %8, %3
  tail call void @_ZN8SkString6insertEmPKc(%class.SkString* %0, i64 -1, i8* %2) #3
  ret void
}

declare void @_ZN8SkStringC1EPKc(%class.SkString*, i8*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8SkOSPath8BasenameEPKc(%class.SkString* noalias sret, i8*) local_unnamed_addr #0 align 2 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %4, label %5

4:                                                ; preds = %2
  tail call void @_ZN8SkStringC1Ev(%class.SkString* %0) #3
  br label %10

5:                                                ; preds = %2
  %6 = tail call i8* @strrchr(i8* nonnull %1, i32 47) #4
  %7 = icmp eq i8* %6, null
  %8 = getelementptr inbounds i8, i8* %6, i64 1
  %9 = select i1 %7, i8* %1, i8* %8
  tail call void @_ZN8SkStringC1EPKc(%class.SkString* %0, i8* %9) #3
  br label %10

10:                                               ; preds = %5, %4
  ret void
}

declare void @_ZN8SkStringC1Ev(%class.SkString*) unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i8* @strrchr(i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8SkOSPath7DirnameEPKc(%class.SkString* noalias sret, i8*) local_unnamed_addr #0 align 2 {
  %3 = icmp eq i8* %1, null
  br i1 %3, label %4, label %5

4:                                                ; preds = %2
  tail call void @_ZN8SkStringC1Ev(%class.SkString* %0) #3
  br label %16

5:                                                ; preds = %2
  %6 = tail call i8* @strrchr(i8* nonnull %1, i32 47) #4
  %7 = icmp eq i8* %6, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %5
  tail call void @_ZN8SkStringC1Ev(%class.SkString* %0) #3
  br label %16

9:                                                ; preds = %5
  %10 = icmp eq i8* %6, %1
  %11 = getelementptr inbounds i8, i8* %6, i64 1
  %12 = select i1 %10, i8* %11, i8* %6
  %13 = ptrtoint i8* %12 to i64
  %14 = ptrtoint i8* %1 to i64
  %15 = sub i64 %13, %14
  tail call void @_ZN8SkStringC1EPKcm(%class.SkString* %0, i8* nonnull %1, i64 %15) #3
  br label %16

16:                                               ; preds = %8, %9, %4
  ret void
}

declare void @_ZN8SkStringC1EPKcm(%class.SkString*, i8*, i64) unnamed_addr #1

declare zeroext i1 @_Z13SkStrEndsWithPKcc(i8*, i8 signext) local_unnamed_addr #1

declare void @_ZN8SkString13insertUnicharEmi(%class.SkString*, i64, i32) local_unnamed_addr #1

declare void @_ZN8SkString6insertEmPKc(%class.SkString*, i64, i8*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
