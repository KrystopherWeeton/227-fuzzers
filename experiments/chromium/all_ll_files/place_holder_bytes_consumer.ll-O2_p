; ModuleID = '../../third_party/blink/renderer/core/fetch/place_holder_bytes_consumer.cc'
source_filename = "../../third_party/blink/renderer/core/fetch/place_holder_bytes_consumer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::AtomicEntryFlag" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.148", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.158", %"class.std::__1::unique_ptr.164", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.176", %"class.std::__1::unique_ptr.182", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.189", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.17", %"class.std::__1::unique_ptr.21", %"class.std::__1::unique_ptr.27", %"class.std::__1::unique_ptr.33", %"class.std::__1::unique_ptr.39", %"class.std::__1::unique_ptr.45", %"class.std::__1::unique_ptr.56", %"class.std::__1::unique_ptr.63", %"class.std::__1::unique_ptr.63", %"class.std::__1::unique_ptr.70", %"class.std::__1::unique_ptr.77", %"class.std::__1::unique_ptr.84", %"class.std::__1::unique_ptr.84", %"class.std::__1::unique_ptr.91", %"class.std::__1::unique_ptr.98", %"class.std::__1::unique_ptr.105", %"class.std::__1::unique_ptr.128", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.39" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.48" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.48" = type { %"struct.std::__1::__atomic_base.49" }
%"struct.std::__1::__atomic_base.49" = type { %"struct.std::__1::__atomic_base.50" }
%"struct.std::__1::__atomic_base.50" = type { %"struct.std::__1::__cxx_atomic_impl.51" }
%"struct.std::__1::__cxx_atomic_impl.51" = type { %"struct.std::__1::__cxx_atomic_base_impl.52" }
%"struct.std::__1::__cxx_atomic_base_impl.52" = type { i64 }
%"class.std::__1::unique_ptr.56" = type { %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"class.blink::Worklist.59"* }
%"class.blink::Worklist.59" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.48" }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"class.blink::Worklist.66"* }
%"class.blink::Worklist.66" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.48" }
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"class.blink::Worklist.73"* }
%"class.blink::Worklist.73" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.48" }
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"class.blink::Worklist.80"* }
%"class.blink::Worklist.80" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.48" }
%"class.std::__1::unique_ptr.84" = type { %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"class.blink::Worklist.87"* }
%"class.blink::Worklist.87" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.48" }
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"class.blink::Worklist.94"* }
%"class.blink::Worklist.94" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.48" }
%"class.std::__1::unique_ptr.98" = type { %"class.std::__1::__compressed_pair.99" }
%"class.std::__1::__compressed_pair.99" = type { %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"class.blink::Worklist.101"* }
%"class.blink::Worklist.101" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.48" }
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.108", %"class.std::__1::__compressed_pair.115", %"class.std::__1::__compressed_pair.120", %"class.std::__1::__compressed_pair.122", [4 x i8] }>
%"class.std::__1::unique_ptr.108" = type { %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110", %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { i64 }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.116" }
%"struct.std::__1::__compressed_pair_elem.116" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.120" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.123" }
%"struct.std::__1::__compressed_pair_elem.123" = type { float }
%"class.std::__1::unique_ptr.128" = type { %"class.std::__1::__compressed_pair.129" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.130" }
%"struct.std::__1::__compressed_pair_elem.130" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.131", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.131" = type { %"class.std::__1::__compressed_pair.132" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.140" }
%"class.WTF::Vector.140" = type { %"class.WTF::VectorBuffer.141" }
%"class.WTF::VectorBuffer.141" = type { %"class.WTF::VectorBufferBase.142" }
%"class.WTF::VectorBufferBase.142" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.156" }
%"class.WTF::VectorBuffer.156" = type { %"class.WTF::VectorBufferBase.157" }
%"class.WTF::VectorBufferBase.157" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.158" = type { %"class.std::__1::__compressed_pair.159" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.164" = type { %"class.std::__1::__compressed_pair.165" }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.166" }
%"struct.std::__1::__compressed_pair_elem.166" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.170" }
%"class.std::__1::unique_ptr.170" = type { %"class.std::__1::__compressed_pair.171" }
%"class.std::__1::__compressed_pair.171" = type { %"struct.std::__1::__compressed_pair_elem.172" }
%"struct.std::__1::__compressed_pair_elem.172" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.59"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.66"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.73"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.80"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.87"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.194" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.176" = type { %"class.std::__1::__compressed_pair.177" }
%"class.std::__1::__compressed_pair.177" = type { %"struct.std::__1::__compressed_pair_elem.178" }
%"struct.std::__1::__compressed_pair_elem.178" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.182" = type { %"class.std::__1::__compressed_pair.183" }
%"class.std::__1::__compressed_pair.183" = type { %"struct.std::__1::__compressed_pair_elem.184" }
%"struct.std::__1::__compressed_pair_elem.184" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.188 }
%class.scoped_refptr.188 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.189" = type { %"struct.std::__1::__atomic_base.190" }
%"struct.std::__1::__atomic_base.190" = type { %"struct.std::__1::__cxx_atomic_impl.191" }
%"struct.std::__1::__cxx_atomic_impl.191" = type { %"struct.std::__1::__cxx_atomic_base_impl.192" }
%"struct.std::__1::__cxx_atomic_base_impl.192" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase.193" }
%"class.base::time_internal::TimeBase.193" = type { i64 }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.blink::PlaceHolderBytesConsumer" = type <{ %"class.blink::BytesConsumer", %"class.blink::Member", %"class.blink::Member.0", i8, [7 x i8] }>
%"class.blink::BytesConsumer" = type { i32 (...)** }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::BytesConsumer"* }
%"class.blink::Member.0" = type { %"class.blink::MemberBase.1" }
%"class.blink::MemberBase.1" = type { %"class.blink::BytesConsumer::Client"* }
%"class.blink::BytesConsumer::Client" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::BlobDataHandle" = type { %"class.WTF::ThreadSafeRefCounted", %"class.WTF::String", %"class.WTF::String", i64, i8, %"class.mojo::PendingRemote", %"class.WTF::Mutex" }
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"class.WTF::String" = type { %class.scoped_refptr.3 }
%class.scoped_refptr.3 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.4" }
%"struct.std::__1::atomic.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__cxx_atomic_impl.7" }
%"struct.std::__1::__cxx_atomic_impl.7" = type { %"struct.std::__1::__cxx_atomic_base_impl.8" }
%"struct.std::__1::__cxx_atomic_base_impl.8" = type { i32 }
%"class.mojo::PendingRemote" = type { %"struct.mojo::internal::PendingRemoteState" }
%"struct.mojo::internal::PendingRemoteState" = type { %"class.mojo::ScopedHandleBase", i32 }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessagePipeHandle" }
%"class.mojo::MessagePipeHandle" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.blink::EncodedFormData" = type <{ %"class.WTF::RefCounted", [4 x i8], %"class.WTF::Vector", i64, %"class.WTF::Vector.10", i8, [7 x i8] }>
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::FormDataElement"*, i32, i32 }
%"class.blink::FormDataElement" = type { i32, %"class.WTF::Vector.10", %"class.WTF::String", %"class.WTF::String", %class.scoped_refptr, i64, i64, %"class.absl::optional", %class.scoped_refptr.13 }
%class.scoped_refptr = type { %"class.blink::BlobDataHandle"* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.base::Time" }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%class.scoped_refptr.13 = type { %"class.blink::WrappedDataPipeGetter"* }
%"class.blink::WrappedDataPipeGetter" = type opaque
%"class.WTF::Vector.10" = type { %"class.WTF::VectorBuffer.11" }
%"class.WTF::VectorBuffer.11" = type { %"class.WTF::VectorBufferBase.12" }
%"class.WTF::VectorBufferBase.12" = type { i8*, i32, i32 }
%"class.mojo::ScopedHandleBase.16" = type { %"class.mojo::DataPipeConsumerHandle" }
%"class.mojo::DataPipeConsumerHandle" = type { %"class.mojo::Handle" }
%"class.blink::NormalPage" = type { %"class.blink::BasePage.base", %"class.blink::NormalPage::CardTable", %"class.blink::PlatformAwareObjectStartBitmap", %"class.WTF::Vector.207", %"class.blink::FreeList", %"class.WTF::Vector.212" }
%"class.blink::BasePage.base" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8 }>
%"class.blink::NormalPage::CardTable" = type { %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [256 x i8] }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.WTF::Vector.207" = type { %"class.WTF::VectorBuffer.208" }
%"class.WTF::VectorBuffer.208" = type { %"class.WTF::VectorBufferBase.209" }
%"class.WTF::VectorBufferBase.209" = type { %"struct.blink::NormalPage::ToBeFinalizedObject"*, i32, i32 }
%"struct.blink::NormalPage::ToBeFinalizedObject" = type { %"class.blink::HeapObjectHeader"* }
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.WTF::Vector.212" = type { %"class.WTF::VectorBuffer.213" }
%"class.WTF::VectorBuffer.213" = type { %"class.WTF::VectorBufferBase.214" }
%"class.WTF::VectorBufferBase.214" = type { %"struct.blink::NormalPage::FutureFreelistEntry"*, i32, i32 }
%"struct.blink::NormalPage::FutureFreelistEntry" = type { i8*, i64 }

$_ZN5blink13BytesConsumerD2Ev = comdat any

$_ZN5blink24PlaceHolderBytesConsumerD0Ev = comdat any

$_ZNK5blink24PlaceHolderBytesConsumer9DebugNameEv = comdat any

$_ZN5blink10TraceTraitINS_13BytesConsumerEE5TraceEPNS_7VisitorEPKv = comdat any

@_ZTVN5blink24PlaceHolderBytesConsumerE = hidden unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::BytesConsumer"*)* @_ZN5blink13BytesConsumerD2Ev to i8*), i8* bitcast (void (%"class.blink::PlaceHolderBytesConsumer"*)* @_ZN5blink24PlaceHolderBytesConsumerD0Ev to i8*), i8* bitcast (i32 (%"class.blink::PlaceHolderBytesConsumer"*, i8**, i64*)* @_ZN5blink24PlaceHolderBytesConsumer9BeginReadEPPKcPm to i8*), i8* bitcast (i32 (%"class.blink::PlaceHolderBytesConsumer"*, i64)* @_ZN5blink24PlaceHolderBytesConsumer7EndReadEm to i8*), i8* bitcast (%"class.blink::BlobDataHandle"* (%"class.blink::PlaceHolderBytesConsumer"*, i32)* @_ZN5blink24PlaceHolderBytesConsumer21DrainAsBlobDataHandleENS_13BytesConsumer14BlobSizePolicyE to i8*), i8* bitcast (%"class.blink::EncodedFormData"* (%"class.blink::PlaceHolderBytesConsumer"*)* @_ZN5blink24PlaceHolderBytesConsumer15DrainAsFormDataEv to i8*), i8* bitcast (void (%"class.mojo::ScopedHandleBase.16"*, %"class.blink::PlaceHolderBytesConsumer"*)* @_ZN5blink24PlaceHolderBytesConsumer15DrainAsDataPipeEv to i8*), i8* bitcast (void (%"class.blink::PlaceHolderBytesConsumer"*, %"class.blink::BytesConsumer::Client"*)* @_ZN5blink24PlaceHolderBytesConsumer9SetClientEPNS_13BytesConsumer6ClientE to i8*), i8* bitcast (void (%"class.blink::PlaceHolderBytesConsumer"*)* @_ZN5blink24PlaceHolderBytesConsumer11ClearClientEv to i8*), i8* bitcast (void (%"class.blink::PlaceHolderBytesConsumer"*)* @_ZN5blink24PlaceHolderBytesConsumer6CancelEv to i8*), i8* bitcast (i32 (%"class.blink::PlaceHolderBytesConsumer"*)* @_ZNK5blink24PlaceHolderBytesConsumer14GetPublicStateEv to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::PlaceHolderBytesConsumer"*)* @_ZNK5blink24PlaceHolderBytesConsumer8GetErrorEv to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::PlaceHolderBytesConsumer"*)* @_ZNK5blink24PlaceHolderBytesConsumer9DebugNameEv to i8*), i8* bitcast (void (%"class.blink::PlaceHolderBytesConsumer"*, %"class.blink::Visitor"*)* @_ZNK5blink24PlaceHolderBytesConsumer5TraceEPNS_7VisitorE to i8*)] }, align 8
@.str = private unnamed_addr constant [25 x i8] c"PlaceHolderBytesConsumer\00", align 1
@_ZN5blink11ThreadState25incremental_marking_flag_E = external local_unnamed_addr global %"class.blink::AtomicEntryFlag", align 4
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink24PlaceHolderBytesConsumer9BeginReadEPPKcPm(%"class.blink::PlaceHolderBytesConsumer"* nocapture readonly, i8**, i64*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::PlaceHolderBytesConsumer", %"class.blink::PlaceHolderBytesConsumer"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = load %"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer"** %4, align 8
  %6 = icmp eq %"class.blink::BytesConsumer"* %5, null
  br i1 %6, label %7, label %12

7:                                                ; preds = %3
  store i8* null, i8** %1, align 8
  store i64 0, i64* %2, align 8
  %8 = getelementptr inbounds %"class.blink::PlaceHolderBytesConsumer", %"class.blink::PlaceHolderBytesConsumer"* %0, i64 0, i32 3
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  %11 = select i1 %10, i32 1, i32 2
  br label %18

12:                                               ; preds = %3
  %13 = bitcast %"class.blink::BytesConsumer"* %5 to i32 (%"class.blink::BytesConsumer"*, i8**, i64*)***
  %14 = load i32 (%"class.blink::BytesConsumer"*, i8**, i64*)**, i32 (%"class.blink::BytesConsumer"*, i8**, i64*)*** %13, align 8
  %15 = getelementptr inbounds i32 (%"class.blink::BytesConsumer"*, i8**, i64*)*, i32 (%"class.blink::BytesConsumer"*, i8**, i64*)** %14, i64 2
  %16 = load i32 (%"class.blink::BytesConsumer"*, i8**, i64*)*, i32 (%"class.blink::BytesConsumer"*, i8**, i64*)** %15, align 8
  %17 = tail call i32 %16(%"class.blink::BytesConsumer"* nonnull %5, i8** %1, i64* %2) #4
  br label %18

18:                                               ; preds = %12, %7
  %19 = phi i32 [ %17, %12 ], [ %11, %7 ]
  ret i32 %19
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink24PlaceHolderBytesConsumer7EndReadEm(%"class.blink::PlaceHolderBytesConsumer"* nocapture readonly, i64) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::PlaceHolderBytesConsumer", %"class.blink::PlaceHolderBytesConsumer"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load %"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer"** %3, align 8
  %5 = bitcast %"class.blink::BytesConsumer"* %4 to i32 (%"class.blink::BytesConsumer"*, i64)***
  %6 = load i32 (%"class.blink::BytesConsumer"*, i64)**, i32 (%"class.blink::BytesConsumer"*, i64)*** %5, align 8
  %7 = getelementptr inbounds i32 (%"class.blink::BytesConsumer"*, i64)*, i32 (%"class.blink::BytesConsumer"*, i64)** %6, i64 3
  %8 = load i32 (%"class.blink::BytesConsumer"*, i64)*, i32 (%"class.blink::BytesConsumer"*, i64)** %7, align 8
  %9 = tail call i32 %8(%"class.blink::BytesConsumer"* %4, i64 %1) #4
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::BlobDataHandle"* @_ZN5blink24PlaceHolderBytesConsumer21DrainAsBlobDataHandleENS_13BytesConsumer14BlobSizePolicyE(%"class.blink::PlaceHolderBytesConsumer"* nocapture readonly, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::PlaceHolderBytesConsumer", %"class.blink::PlaceHolderBytesConsumer"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load %"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer"** %3, align 8
  %5 = icmp eq %"class.blink::BytesConsumer"* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = bitcast %"class.blink::BytesConsumer"* %4 to %"class.blink::BlobDataHandle"* (%"class.blink::BytesConsumer"*, i32)***
  %8 = load %"class.blink::BlobDataHandle"* (%"class.blink::BytesConsumer"*, i32)**, %"class.blink::BlobDataHandle"* (%"class.blink::BytesConsumer"*, i32)*** %7, align 8
  %9 = getelementptr inbounds %"class.blink::BlobDataHandle"* (%"class.blink::BytesConsumer"*, i32)*, %"class.blink::BlobDataHandle"* (%"class.blink::BytesConsumer"*, i32)** %8, i64 4
  %10 = load %"class.blink::BlobDataHandle"* (%"class.blink::BytesConsumer"*, i32)*, %"class.blink::BlobDataHandle"* (%"class.blink::BytesConsumer"*, i32)** %9, align 8
  %11 = tail call %"class.blink::BlobDataHandle"* %10(%"class.blink::BytesConsumer"* nonnull %4, i32 %1) #4
  br label %12

12:                                               ; preds = %2, %6
  %13 = phi %"class.blink::BlobDataHandle"* [ %11, %6 ], [ null, %2 ]
  ret %"class.blink::BlobDataHandle"* %13
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::EncodedFormData"* @_ZN5blink24PlaceHolderBytesConsumer15DrainAsFormDataEv(%"class.blink::PlaceHolderBytesConsumer"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::PlaceHolderBytesConsumer", %"class.blink::PlaceHolderBytesConsumer"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer"** %2, align 8
  %4 = icmp eq %"class.blink::BytesConsumer"* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.blink::BytesConsumer"* %3 to %"class.blink::EncodedFormData"* (%"class.blink::BytesConsumer"*)***
  %7 = load %"class.blink::EncodedFormData"* (%"class.blink::BytesConsumer"*)**, %"class.blink::EncodedFormData"* (%"class.blink::BytesConsumer"*)*** %6, align 8
  %8 = getelementptr inbounds %"class.blink::EncodedFormData"* (%"class.blink::BytesConsumer"*)*, %"class.blink::EncodedFormData"* (%"class.blink::BytesConsumer"*)** %7, i64 5
  %9 = load %"class.blink::EncodedFormData"* (%"class.blink::BytesConsumer"*)*, %"class.blink::EncodedFormData"* (%"class.blink::BytesConsumer"*)** %8, align 8
  %10 = tail call %"class.blink::EncodedFormData"* %9(%"class.blink::BytesConsumer"* nonnull %3) #4
  br label %11

11:                                               ; preds = %1, %5
  %12 = phi %"class.blink::EncodedFormData"* [ %10, %5 ], [ null, %1 ]
  ret %"class.blink::EncodedFormData"* %12
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink24PlaceHolderBytesConsumer15DrainAsDataPipeEv(%"class.mojo::ScopedHandleBase.16"* noalias sret, %"class.blink::PlaceHolderBytesConsumer"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::PlaceHolderBytesConsumer", %"class.blink::PlaceHolderBytesConsumer"* %1, i64 0, i32 1, i32 0, i32 0
  %4 = load %"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer"** %3, align 8
  %5 = icmp eq %"class.blink::BytesConsumer"* %4, null
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.mojo::ScopedHandleBase.16", %"class.mojo::ScopedHandleBase.16"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 0, i32* %7, align 4
  br label %13

8:                                                ; preds = %2
  %9 = bitcast %"class.blink::BytesConsumer"* %4 to void (%"class.mojo::ScopedHandleBase.16"*, %"class.blink::BytesConsumer"*)***
  %10 = load void (%"class.mojo::ScopedHandleBase.16"*, %"class.blink::BytesConsumer"*)**, void (%"class.mojo::ScopedHandleBase.16"*, %"class.blink::BytesConsumer"*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.mojo::ScopedHandleBase.16"*, %"class.blink::BytesConsumer"*)*, void (%"class.mojo::ScopedHandleBase.16"*, %"class.blink::BytesConsumer"*)** %10, i64 6
  %12 = load void (%"class.mojo::ScopedHandleBase.16"*, %"class.blink::BytesConsumer"*)*, void (%"class.mojo::ScopedHandleBase.16"*, %"class.blink::BytesConsumer"*)** %11, align 8
  tail call void %12(%"class.mojo::ScopedHandleBase.16"* sret %0, %"class.blink::BytesConsumer"* nonnull %4) #4
  br label %13

13:                                               ; preds = %8, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink24PlaceHolderBytesConsumer9SetClientEPNS_13BytesConsumer6ClientE(%"class.blink::PlaceHolderBytesConsumer"* nocapture, %"class.blink::BytesConsumer::Client"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::PlaceHolderBytesConsumer", %"class.blink::PlaceHolderBytesConsumer"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load %"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer"** %3, align 8
  %5 = icmp eq %"class.blink::BytesConsumer"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %2
  %7 = bitcast %"class.blink::BytesConsumer"* %4 to void (%"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer::Client"*)***
  %8 = load void (%"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer::Client"*)**, void (%"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer::Client"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer::Client"*)*, void (%"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer::Client"*)** %8, i64 7
  %10 = load void (%"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer::Client"*)*, void (%"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer::Client"*)** %9, align 8
  tail call void %10(%"class.blink::BytesConsumer"* nonnull %4, %"class.blink::BytesConsumer::Client"* %1) #4
  br label %20

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.blink::PlaceHolderBytesConsumer", %"class.blink::PlaceHolderBytesConsumer"* %0, i64 0, i32 2
  %13 = ptrtoint %"class.blink::BytesConsumer::Client"* %1 to i64
  %14 = bitcast %"class.blink::Member.0"* %12 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %11
  %18 = bitcast %"class.blink::BytesConsumer::Client"* %1 to i8*
  %19 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %18) #4
  br label %20

20:                                               ; preds = %17, %11, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink24PlaceHolderBytesConsumer11ClearClientEv(%"class.blink::PlaceHolderBytesConsumer"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::PlaceHolderBytesConsumer", %"class.blink::PlaceHolderBytesConsumer"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer"** %2, align 8
  %4 = icmp eq %"class.blink::BytesConsumer"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.blink::BytesConsumer"* %3 to void (%"class.blink::BytesConsumer"*)***
  %7 = load void (%"class.blink::BytesConsumer"*)**, void (%"class.blink::BytesConsumer"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.blink::BytesConsumer"*)*, void (%"class.blink::BytesConsumer"*)** %7, i64 8
  %9 = load void (%"class.blink::BytesConsumer"*)*, void (%"class.blink::BytesConsumer"*)** %8, align 8
  tail call void %9(%"class.blink::BytesConsumer"* nonnull %3) #4
  br label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.blink::PlaceHolderBytesConsumer", %"class.blink::PlaceHolderBytesConsumer"* %0, i64 0, i32 2
  %12 = bitcast %"class.blink::Member.0"* %11 to i64*
  store atomic i64 0, i64* %12 monotonic, align 8
  br label %13

13:                                               ; preds = %10, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink24PlaceHolderBytesConsumer6CancelEv(%"class.blink::PlaceHolderBytesConsumer"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::PlaceHolderBytesConsumer", %"class.blink::PlaceHolderBytesConsumer"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer"** %2, align 8
  %4 = icmp eq %"class.blink::BytesConsumer"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.blink::BytesConsumer"* %3 to void (%"class.blink::BytesConsumer"*)***
  %7 = load void (%"class.blink::BytesConsumer"*)**, void (%"class.blink::BytesConsumer"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.blink::BytesConsumer"*)*, void (%"class.blink::BytesConsumer"*)** %7, i64 9
  %9 = load void (%"class.blink::BytesConsumer"*)*, void (%"class.blink::BytesConsumer"*)** %8, align 8
  tail call void %9(%"class.blink::BytesConsumer"* nonnull %3) #4
  br label %14

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.blink::PlaceHolderBytesConsumer", %"class.blink::PlaceHolderBytesConsumer"* %0, i64 0, i32 3
  store i8 1, i8* %11, align 8
  %12 = getelementptr inbounds %"class.blink::PlaceHolderBytesConsumer", %"class.blink::PlaceHolderBytesConsumer"* %0, i64 0, i32 2
  %13 = bitcast %"class.blink::Member.0"* %12 to i64*
  store atomic i64 0, i64* %13 monotonic, align 8
  br label %14

14:                                               ; preds = %10, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink24PlaceHolderBytesConsumer14GetPublicStateEv(%"class.blink::PlaceHolderBytesConsumer"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::PlaceHolderBytesConsumer", %"class.blink::PlaceHolderBytesConsumer"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer"** %2, align 8
  %4 = icmp eq %"class.blink::BytesConsumer"* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.blink::BytesConsumer"* %3 to i32 (%"class.blink::BytesConsumer"*)***
  %7 = load i32 (%"class.blink::BytesConsumer"*)**, i32 (%"class.blink::BytesConsumer"*)*** %6, align 8
  %8 = getelementptr inbounds i32 (%"class.blink::BytesConsumer"*)*, i32 (%"class.blink::BytesConsumer"*)** %7, i64 10
  %9 = load i32 (%"class.blink::BytesConsumer"*)*, i32 (%"class.blink::BytesConsumer"*)** %8, align 8
  %10 = tail call i32 %9(%"class.blink::BytesConsumer"* nonnull %3) #4
  br label %15

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.blink::PlaceHolderBytesConsumer", %"class.blink::PlaceHolderBytesConsumer"* %0, i64 0, i32 3
  %13 = load i8, i8* %12, align 8, !range !2
  %14 = zext i8 %13 to i32
  br label %15

15:                                               ; preds = %11, %5
  %16 = phi i32 [ %10, %5 ], [ %14, %11 ]
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink24PlaceHolderBytesConsumer8GetErrorEv(%"class.blink::PlaceHolderBytesConsumer"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::PlaceHolderBytesConsumer", %"class.blink::PlaceHolderBytesConsumer"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = load %"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer"** %2, align 8
  %4 = bitcast %"class.blink::BytesConsumer"* %3 to %"class.WTF::StringImpl"* (%"class.blink::BytesConsumer"*)***
  %5 = load %"class.WTF::StringImpl"* (%"class.blink::BytesConsumer"*)**, %"class.WTF::StringImpl"* (%"class.blink::BytesConsumer"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.WTF::StringImpl"* (%"class.blink::BytesConsumer"*)*, %"class.WTF::StringImpl"* (%"class.blink::BytesConsumer"*)** %5, i64 11
  %7 = load %"class.WTF::StringImpl"* (%"class.blink::BytesConsumer"*)*, %"class.WTF::StringImpl"* (%"class.blink::BytesConsumer"*)** %6, align 8
  %8 = tail call %"class.WTF::StringImpl"* %7(%"class.blink::BytesConsumer"* %3) #4
  ret %"class.WTF::StringImpl"* %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink24PlaceHolderBytesConsumer6UpdateEPNS_13BytesConsumerE(%"class.blink::PlaceHolderBytesConsumer"* nocapture, %"class.blink::BytesConsumer"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::PlaceHolderBytesConsumer", %"class.blink::PlaceHolderBytesConsumer"* %0, i64 0, i32 3
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %32

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.blink::PlaceHolderBytesConsumer", %"class.blink::PlaceHolderBytesConsumer"* %0, i64 0, i32 1
  %8 = ptrtoint %"class.blink::BytesConsumer"* %1 to i64
  %9 = bitcast %"class.blink::Member"* %7 to i64*
  store atomic i64 %8, i64* %9 monotonic, align 8
  %10 = load atomic i32, i32* getelementptr inbounds (%"class.blink::AtomicEntryFlag", %"class.blink::AtomicEntryFlag"* @_ZN5blink11ThreadState25incremental_marking_flag_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %6
  %13 = bitcast %"class.blink::BytesConsumer"* %1 to i8*
  %14 = tail call zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8* %13) #4
  br label %15

15:                                               ; preds = %6, %12
  %16 = getelementptr inbounds %"class.blink::PlaceHolderBytesConsumer", %"class.blink::PlaceHolderBytesConsumer"* %0, i64 0, i32 2
  %17 = getelementptr inbounds %"class.blink::Member.0", %"class.blink::Member.0"* %16, i64 0, i32 0, i32 0
  %18 = load %"class.blink::BytesConsumer::Client"*, %"class.blink::BytesConsumer::Client"** %17, align 8
  %19 = icmp eq %"class.blink::BytesConsumer::Client"* %18, null
  br i1 %19, label %32, label %20

20:                                               ; preds = %15
  %21 = bitcast %"class.blink::Member.0"* %16 to i64*
  store atomic i64 0, i64* %21 monotonic, align 8
  %22 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %7, i64 0, i32 0, i32 0
  %23 = load %"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer"** %22, align 8
  %24 = bitcast %"class.blink::BytesConsumer"* %23 to void (%"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer::Client"*)***
  %25 = load void (%"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer::Client"*)**, void (%"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer::Client"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer::Client"*)*, void (%"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer::Client"*)** %25, i64 7
  %27 = load void (%"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer::Client"*)*, void (%"class.blink::BytesConsumer"*, %"class.blink::BytesConsumer::Client"*)** %26, align 8
  tail call void %27(%"class.blink::BytesConsumer"* %23, %"class.blink::BytesConsumer::Client"* nonnull %18) #4
  %28 = bitcast %"class.blink::BytesConsumer::Client"* %18 to void (%"class.blink::BytesConsumer::Client"*)***
  %29 = load void (%"class.blink::BytesConsumer::Client"*)**, void (%"class.blink::BytesConsumer::Client"*)*** %28, align 8
  %30 = getelementptr inbounds void (%"class.blink::BytesConsumer::Client"*)*, void (%"class.blink::BytesConsumer::Client"*)** %29, i64 3
  %31 = load void (%"class.blink::BytesConsumer::Client"*)*, void (%"class.blink::BytesConsumer::Client"*)** %30, align 8
  tail call void %31(%"class.blink::BytesConsumer::Client"* nonnull %18) #4
  br label %32

32:                                               ; preds = %15, %2, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink24PlaceHolderBytesConsumer5TraceEPNS_7VisitorE(%"class.blink::PlaceHolderBytesConsumer"* nocapture readonly, %"class.blink::Visitor"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::PlaceHolderBytesConsumer", %"class.blink::PlaceHolderBytesConsumer"* %0, i64 0, i32 1
  %4 = bitcast %"class.blink::Member"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %10 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %10, i64 5
  %12 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %11, align 8
  tail call void %12(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* nonnull %8, void (%"class.blink::Visitor"*, i8*)* nonnull @_ZN5blink10TraceTraitINS_13BytesConsumerEE5TraceEPNS_7VisitorEPKv) #4
  br label %13

13:                                               ; preds = %2, %7
  %14 = getelementptr inbounds %"class.blink::PlaceHolderBytesConsumer", %"class.blink::PlaceHolderBytesConsumer"* %0, i64 0, i32 2
  %15 = bitcast %"class.blink::Member.0"* %14 to i64*
  %16 = load atomic i64, i64* %15 monotonic, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %84, label %18

18:                                               ; preds = %13
  %19 = inttoptr i64 %16 to i8*
  %20 = and i64 %16, -131072
  %21 = inttoptr i64 %20 to i8*
  %22 = getelementptr inbounds i8, i8* %21, i64 4138
  %23 = load i8, i8* %22, align 2
  %24 = icmp eq i8 %23, 1
  br i1 %24, label %25, label %27

25:                                               ; preds = %18
  %26 = getelementptr inbounds i8, i8* %21, i64 4160
  br label %65

27:                                               ; preds = %18
  %28 = getelementptr inbounds i8, i8* %21, i64 4096
  %29 = bitcast i8* %28 to %"class.blink::NormalPage"*
  %30 = getelementptr inbounds i8, i8* %21, i64 4400
  %31 = bitcast i8* %30 to i8**
  %32 = bitcast i8* %30 to i64*
  %33 = load i64, i64* %32, align 16
  %34 = sub i64 %16, %33
  %35 = lshr i64 %34, 3
  %36 = lshr i64 %34, 6
  %37 = getelementptr inbounds %"class.blink::NormalPage", %"class.blink::NormalPage"* %29, i64 0, i32 2, i32 0, i32 1, i64 %36
  %38 = load atomic i8, i8* %37 acquire, align 1
  %39 = trunc i64 %35 to i32
  %40 = and i32 %39, 7
  %41 = shl i32 2, %40
  %42 = trunc i32 %41 to i8
  %43 = add i8 %42, -1
  %44 = and i8 %43, %38
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %52

46:                                               ; preds = %27, %46
  %47 = phi i64 [ %48, %46 ], [ %36, %27 ]
  %48 = add i64 %47, -1
  %49 = getelementptr inbounds %"class.blink::NormalPage", %"class.blink::NormalPage"* %29, i64 0, i32 2, i32 0, i32 1, i64 %48
  %50 = load atomic i8, i8* %49 acquire, align 1
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %46, label %52

52:                                               ; preds = %46, %27
  %53 = phi i64 [ %36, %27 ], [ %48, %46 ]
  %54 = phi i8 [ %44, %27 ], [ %50, %46 ]
  %55 = zext i8 %54 to i32
  %56 = tail call i32 @llvm.ctlz.i32(i32 %55, i1 true) #4, !range !3
  %57 = add nsw i32 %56, -24
  %58 = shl i64 %53, 3
  %59 = or i64 %58, 7
  %60 = sext i32 %57 to i64
  %61 = sub i64 %59, %60
  %62 = shl i64 %61, 3
  %63 = load i8*, i8** %31, align 16
  %64 = getelementptr inbounds i8, i8* %63, i64 %62
  br label %65

65:                                               ; preds = %52, %25
  %66 = phi i8* [ %26, %25 ], [ %64, %52 ]
  %67 = getelementptr inbounds i8, i8* %66, i64 8
  %68 = getelementptr inbounds i8, i8* %66, i64 4
  %69 = bitcast i8* %68 to i16*
  %70 = load atomic i16, i16* %69 acquire, align 2
  %71 = lshr i16 %70, 2
  %72 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %73 = getelementptr inbounds %"class.blink::GCInfoTable", %"class.blink::GCInfoTable"* %72, i64 0, i32 0
  %74 = load %"struct.blink::GCInfo"**, %"struct.blink::GCInfo"*** %73, align 8
  %75 = zext i16 %71 to i64
  %76 = getelementptr inbounds %"struct.blink::GCInfo"*, %"struct.blink::GCInfo"** %74, i64 %75
  %77 = load %"struct.blink::GCInfo"*, %"struct.blink::GCInfo"** %76, align 8
  %78 = getelementptr inbounds %"struct.blink::GCInfo", %"struct.blink::GCInfo"* %77, i64 0, i32 0
  %79 = load void (%"class.blink::Visitor"*, i8*)*, void (%"class.blink::Visitor"*, i8*)** %78, align 8
  %80 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %81 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %80, align 8
  %82 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %81, i64 5
  %83 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %82, align 8
  tail call void %83(%"class.blink::Visitor"* %1, i8* nonnull %19, i8* %67, void (%"class.blink::Visitor"*, i8*)* %79) #4
  br label %84

84:                                               ; preds = %13, %65
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink13BytesConsumerD2Ev(%"class.blink::BytesConsumer"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink24PlaceHolderBytesConsumerD0Ev(%"class.blink::PlaceHolderBytesConsumer"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK5blink24PlaceHolderBytesConsumer9DebugNameEv(%"class.blink::PlaceHolderBytesConsumer"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::String", align 8
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i64 24) #4
  %3 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  ret %"class.WTF::StringImpl"* %4
}

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #2

declare zeroext i1 @_ZN5blink14MarkingVisitor16WriteBarrierSlowEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_13BytesConsumerEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::BytesConsumer"*
  %4 = bitcast i8* %1 to void (%"class.blink::BytesConsumer"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::BytesConsumer"*, %"class.blink::Visitor"*)**, void (%"class.blink::BytesConsumer"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::BytesConsumer"*, %"class.blink::Visitor"*)*, void (%"class.blink::BytesConsumer"*, %"class.blink::Visitor"*)** %5, i64 13
  %7 = load void (%"class.blink::BytesConsumer"*, %"class.blink::Visitor"*)*, void (%"class.blink::BytesConsumer"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::BytesConsumer"* %3, %"class.blink::Visitor"* %0) #4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{i32 24, i32 33}
