; ModuleID = '../../third_party/boringssl/src/crypto/x509/t_x509a.c'
source_filename = "../../third_party/boringssl/src/crypto/x509/t_x509a.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%struct.x509_cert_aux_st = type { %struct.stack_st_ASN1_OBJECT*, %struct.stack_st_ASN1_OBJECT*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_ALGOR* }
%struct.stack_st_ASN1_OBJECT = type opaque
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.stack_st_X509_ALGOR = type opaque
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }

@.str = private unnamed_addr constant [21 x i8] c"%*sTrusted Uses:\0A%*s\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"%*sNo Trusted Uses.\0A\00", align 1
@.str.5 = private unnamed_addr constant [22 x i8] c"%*sRejected Uses:\0A%*s\00", align 1
@.str.6 = private unnamed_addr constant [22 x i8] c"%*sNo Rejected Uses.\0A\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"%*sAlias: %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"%*sKey Id: \00", align 1
@.str.9 = private unnamed_addr constant [7 x i8] c"%s%02X\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c":\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @X509_CERT_AUX_print(%struct.bio_st*, %struct.x509_cert_aux_st* readonly, i32) local_unnamed_addr #0 {
  %4 = alloca [80 x i8], align 16
  %5 = getelementptr inbounds [80 x i8], [80 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %5) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 80, i1 false)
  %6 = icmp eq %struct.x509_cert_aux_st* %1, null
  br i1 %6, label %116, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.x509_cert_aux_st, %struct.x509_cert_aux_st* %1, i64 0, i32 0
  %9 = load %struct.stack_st_ASN1_OBJECT*, %struct.stack_st_ASN1_OBJECT** %8, align 8
  %10 = icmp eq %struct.stack_st_ASN1_OBJECT* %9, null
  br i1 %10, label %41, label %11

11:                                               ; preds = %7
  %12 = add nsw i32 %2, 2
  %13 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i32 %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i32 %12, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0)) #3
  %14 = bitcast %struct.x509_cert_aux_st* %1 to %struct.stack_st**
  %15 = load %struct.stack_st*, %struct.stack_st** %14, align 8
  %16 = call i64 @sk_num(%struct.stack_st* %15) #3
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %39, label %18

18:                                               ; preds = %11
  %19 = load %struct.stack_st*, %struct.stack_st** %14, align 8
  %20 = call i8* @sk_value(%struct.stack_st* %19, i64 0) #3
  %21 = bitcast i8* %20 to %struct.asn1_object_st*
  %22 = call i32 @OBJ_obj2txt(i8* nonnull %5, i32 80, %struct.asn1_object_st* %21, i32 0) #3
  %23 = call i32 @BIO_puts(%struct.bio_st* %0, i8* nonnull %5) #3
  %24 = load %struct.stack_st*, %struct.stack_st** %14, align 8
  %25 = call i64 @sk_num(%struct.stack_st* %24) #3
  %26 = icmp ugt i64 %25, 1
  br i1 %26, label %27, label %39

27:                                               ; preds = %18, %27
  %28 = phi i64 [ %35, %27 ], [ 1, %18 ]
  %29 = call i32 @BIO_puts(%struct.bio_st* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0)) #3
  %30 = load %struct.stack_st*, %struct.stack_st** %14, align 8
  %31 = call i8* @sk_value(%struct.stack_st* %30, i64 %28) #3
  %32 = bitcast i8* %31 to %struct.asn1_object_st*
  %33 = call i32 @OBJ_obj2txt(i8* nonnull %5, i32 80, %struct.asn1_object_st* %32, i32 0) #3
  %34 = call i32 @BIO_puts(%struct.bio_st* %0, i8* nonnull %5) #3
  %35 = add nuw i64 %28, 1
  %36 = load %struct.stack_st*, %struct.stack_st** %14, align 8
  %37 = call i64 @sk_num(%struct.stack_st* %36) #3
  %38 = icmp ult i64 %35, %37
  br i1 %38, label %27, label %39, !llvm.loop !2

39:                                               ; preds = %18, %27, %11
  %40 = call i32 @BIO_puts(%struct.bio_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)) #3
  br label %43

41:                                               ; preds = %7
  %42 = tail call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0), i32 %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0)) #3
  br label %43

43:                                               ; preds = %41, %39
  %44 = getelementptr inbounds %struct.x509_cert_aux_st, %struct.x509_cert_aux_st* %1, i64 0, i32 1
  %45 = load %struct.stack_st_ASN1_OBJECT*, %struct.stack_st_ASN1_OBJECT** %44, align 8
  %46 = icmp eq %struct.stack_st_ASN1_OBJECT* %45, null
  br i1 %46, label %77, label %47

47:                                               ; preds = %43
  %48 = add nsw i32 %2, 2
  %49 = call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i64 0, i64 0), i32 %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i32 %48, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0)) #3
  %50 = bitcast %struct.stack_st_ASN1_OBJECT** %44 to %struct.stack_st**
  %51 = load %struct.stack_st*, %struct.stack_st** %50, align 8
  %52 = call i64 @sk_num(%struct.stack_st* %51) #3
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %75, label %54

54:                                               ; preds = %47
  %55 = load %struct.stack_st*, %struct.stack_st** %50, align 8
  %56 = call i8* @sk_value(%struct.stack_st* %55, i64 0) #3
  %57 = bitcast i8* %56 to %struct.asn1_object_st*
  %58 = call i32 @OBJ_obj2txt(i8* nonnull %5, i32 80, %struct.asn1_object_st* %57, i32 0) #3
  %59 = call i32 @BIO_puts(%struct.bio_st* %0, i8* nonnull %5) #3
  %60 = load %struct.stack_st*, %struct.stack_st** %50, align 8
  %61 = call i64 @sk_num(%struct.stack_st* %60) #3
  %62 = icmp ugt i64 %61, 1
  br i1 %62, label %63, label %75

63:                                               ; preds = %54, %63
  %64 = phi i64 [ %71, %63 ], [ 1, %54 ]
  %65 = call i32 @BIO_puts(%struct.bio_st* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0)) #3
  %66 = load %struct.stack_st*, %struct.stack_st** %50, align 8
  %67 = call i8* @sk_value(%struct.stack_st* %66, i64 %64) #3
  %68 = bitcast i8* %67 to %struct.asn1_object_st*
  %69 = call i32 @OBJ_obj2txt(i8* nonnull %5, i32 80, %struct.asn1_object_st* %68, i32 0) #3
  %70 = call i32 @BIO_puts(%struct.bio_st* %0, i8* nonnull %5) #3
  %71 = add nuw i64 %64, 1
  %72 = load %struct.stack_st*, %struct.stack_st** %50, align 8
  %73 = call i64 @sk_num(%struct.stack_st* %72) #3
  %74 = icmp ult i64 %71, %73
  br i1 %74, label %63, label %75, !llvm.loop !4

75:                                               ; preds = %54, %63, %47
  %76 = call i32 @BIO_puts(%struct.bio_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)) #3
  br label %79

77:                                               ; preds = %43
  %78 = call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i64 0, i64 0), i32 %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0)) #3
  br label %79

79:                                               ; preds = %77, %75
  %80 = getelementptr inbounds %struct.x509_cert_aux_st, %struct.x509_cert_aux_st* %1, i64 0, i32 2
  %81 = load %struct.asn1_string_st*, %struct.asn1_string_st** %80, align 8
  %82 = icmp eq %struct.asn1_string_st* %81, null
  br i1 %82, label %87, label %83

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %81, i64 0, i32 2
  %85 = load i8*, i8** %84, align 8
  %86 = call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0), i32 %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i8* %85) #3
  br label %87

87:                                               ; preds = %79, %83
  %88 = getelementptr inbounds %struct.x509_cert_aux_st, %struct.x509_cert_aux_st* %1, i64 0, i32 3
  %89 = load %struct.asn1_string_st*, %struct.asn1_string_st** %88, align 8
  %90 = icmp eq %struct.asn1_string_st* %89, null
  br i1 %90, label %116, label %91

91:                                               ; preds = %87
  %92 = call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i32 %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0)) #3
  %93 = load %struct.asn1_string_st*, %struct.asn1_string_st** %88, align 8
  %94 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %93, i64 0, i32 0
  %95 = load i32, i32* %94, align 8
  %96 = icmp sgt i32 %95, 0
  br i1 %96, label %97, label %114

97:                                               ; preds = %91, %97
  %98 = phi i64 [ %108, %97 ], [ 0, %91 ]
  %99 = phi %struct.asn1_string_st* [ %109, %97 ], [ %93, %91 ]
  %100 = icmp eq i64 %98, 0
  %101 = select i1 %100, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)
  %102 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %99, i64 0, i32 2
  %103 = load i8*, i8** %102, align 8
  %104 = getelementptr inbounds i8, i8* %103, i64 %98
  %105 = load i8, i8* %104, align 1
  %106 = zext i8 %105 to i32
  %107 = call i32 (%struct.bio_st*, i8*, ...) @BIO_printf(%struct.bio_st* %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0), i8* %101, i32 %106) #3
  %108 = add nuw nsw i64 %98, 1
  %109 = load %struct.asn1_string_st*, %struct.asn1_string_st** %88, align 8
  %110 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %109, i64 0, i32 0
  %111 = load i32, i32* %110, align 8
  %112 = sext i32 %111 to i64
  %113 = icmp slt i64 %108, %112
  br i1 %113, label %97, label %114

114:                                              ; preds = %97, %91
  %115 = call i32 @BIO_write(%struct.bio_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i32 1) #3
  br label %116

116:                                              ; preds = %114, %87, %3
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %5) #3
  ret i32 1
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @BIO_printf(%struct.bio_st*, i8*, ...) local_unnamed_addr #2

declare i32 @BIO_puts(%struct.bio_st*, i8*) local_unnamed_addr #2

declare i32 @OBJ_obj2txt(i8*, i32, %struct.asn1_object_st*, i32) local_unnamed_addr #2

declare i32 @BIO_write(%struct.bio_st*, i8*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #2

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
