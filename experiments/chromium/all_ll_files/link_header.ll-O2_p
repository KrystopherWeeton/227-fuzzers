; ModuleID = '../../third_party/blink/renderer/platform/loader/link_header.cc'
source_filename = "../../third_party/blink/renderer/platform/loader/link_header.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::LinkHeaderSet" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::LinkHeader"*, i32, i32 }
%"class.blink::LinkHeader" = type <{ %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.absl::optional", i8, [7 x i8] }>
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.WTF::String" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.1 }
%union.anon.1 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.3" }
%"struct.std::__1::pair" = type { %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter" }
%"class.std::__1::__wrap_iter" = type { i8* }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::pair"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.17", %"class.std::__1::__compressed_pair.22", %"class.std::__1::__compressed_pair.24", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10", %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { i64 }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { float }
%"struct.std::__1::__hash_node" = type { %"struct.std::__1::__hash_node_base", i64, %"struct.std::__1::__hash_value_type" }
%"struct.std::__1::__hash_value_type" = type { %"struct.std::__1::pair.27" }
%"struct.std::__1::pair.27" = type { %"class.std::__1::basic_string", %"class.absl::optional.28" }
%"class.absl::optional.28" = type { %"class.absl::optional_internal::optional_data.29" }
%"class.absl::optional_internal::optional_data.29" = type { %"class.absl::optional_internal::optional_data_base.30" }
%"class.absl::optional_internal::optional_data_base.30" = type { %"class.absl::optional_internal::optional_data_dtor_base.31" }
%"class.absl::optional_internal::optional_data_dtor_base.31" = type { i8, %union.anon.32 }
%union.anon.32 = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN5blink10LinkHeaderC2INSt3__111__wrap_iterIPKcEEEET_S7_ = comdat any

$_ZN5blink10LinkHeaderD2Ev = comdat any

$_ZN3WTF6VectorIN5blink10LinkHeaderELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_ = comdat any

$_ZN3WTF6VectorIN5blink10LinkHeaderELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink10LinkHeaderEEEmm = comdat any

@.str.2 = private unnamed_addr constant [10 x i8] c"alternate\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"rel\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"anchor\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"crossorigin\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"title\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"media\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"type\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"rev\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"hreflang\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"as\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"nonce\00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c"integrity\00", align 1
@.str.14 = private unnamed_addr constant [12 x i8] c"imagesrcset\00", align 1
@.str.15 = private unnamed_addr constant [11 x i8] c"imagesizes\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"header-integrity\00", align 1
@_ZN5blink29kSignedExchangeVariantsHeaderE = external constant [0 x i8], align 1
@_ZN5blink31kSignedExchangeVariantKeyHeaderE = external constant [0 x i8], align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.21 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.22 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10LinkHeaderEEEPKcv = private unnamed_addr constant [65 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::LinkHeader]\00", align 1

@_ZN5blink13LinkHeaderSetC1ERKN3WTF6StringE = hidden unnamed_addr alias void (%"class.blink::LinkHeaderSet"*, %"class.WTF::String"*), void (%"class.blink::LinkHeaderSet"*, %"class.WTF::String"*)* @_ZN5blink13LinkHeaderSetC2ERKN3WTF6StringE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10LinkHeader8SetValueENS0_17LinkParameterNameERKN3WTF6StringE(%"class.blink::LinkHeader"* nocapture, i32, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  switch i32 %1, label %487 [
    i32 0, label %4
    i32 1, label %28
    i32 8, label %96
    i32 9, label %137
    i32 4, label %158
    i32 3, label %179
    i32 10, label %200
    i32 11, label %241
    i32 12, label %282
    i32 13, label %323
    i32 14, label %364
    i32 15, label %405
    i32 16, label %446
  ]

4:                                                ; preds = %3
  %5 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %8, label %9, label %487

9:                                                ; preds = %4
  %10 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF6String15DeprecatedLowerEv(%"class.WTF::String"* %2) #11
  %11 = ptrtoint %"class.WTF::StringImpl"* %10 to i64
  %12 = bitcast %"class.WTF::String"* %5 to i64*
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  store i64 %11, i64* %12, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  br i1 %14, label %487, label %15

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = and i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  br i1 %19, label %22, label %24

22:                                               ; preds = %15
  %23 = add i32 %21, -1
  store i32 %23, i32* %20, align 4
  br label %24

24:                                               ; preds = %22, %15
  %25 = phi i32 [ %23, %22 ], [ %21, %15 ]
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %487

27:                                               ; preds = %24
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %13) #11
  br label %487

28:                                               ; preds = %3
  %29 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  %30 = load i8, i8* %29, align 8, !range !2
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %73, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0
  %34 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  %36 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %36, label %54, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load atomic i32, i32* %38 monotonic, align 4
  %40 = and i32 %39, 2
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %54

42:                                               ; preds = %37
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = zext i32 %44 to i33
  %46 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %45, i33 1) #11
  %47 = extractvalue { i33, i1 } %46, 1
  %48 = extractvalue { i33, i1 } %46, 0
  %49 = icmp slt i33 %48, 0
  %50 = or i1 %47, %49
  br i1 %50, label %51, label %52, !prof !3

51:                                               ; preds = %42
  tail call void @llvm.trap() #11
  unreachable

52:                                               ; preds = %42
  %53 = trunc i33 %48 to i32
  store i32 %53, i32* %43, align 4
  br label %54

54:                                               ; preds = %52, %37, %32
  %55 = ptrtoint %"class.WTF::StringImpl"* %35 to i64
  %56 = bitcast %"class.WTF::String"* %33 to i64*
  %57 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %33, i64 0, i32 0, i32 0
  %58 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %57, align 8
  store i64 %55, i64* %56, align 8
  %59 = icmp eq %"class.WTF::StringImpl"* %58, null
  br i1 %59, label %487, label %60

60:                                               ; preds = %54
  %61 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %58, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = load atomic i32, i32* %61 monotonic, align 4
  %63 = and i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %58, i64 0, i32 0
  %66 = load i32, i32* %65, align 4
  br i1 %64, label %67, label %69

67:                                               ; preds = %60
  %68 = add i32 %66, -1
  store i32 %68, i32* %65, align 4
  br label %69

69:                                               ; preds = %67, %60
  %70 = phi i32 [ %68, %67 ], [ %66, %60 ]
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %487

72:                                               ; preds = %69
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %58) #11
  br label %487

73:                                               ; preds = %28
  %74 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %75 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %74, align 8
  %76 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %75, %"class.WTF::StringImpl"** %76, align 8
  %77 = icmp eq %"class.WTF::StringImpl"* %75, null
  br i1 %77, label %95, label %78

78:                                               ; preds = %73
  %79 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = load atomic i32, i32* %79 monotonic, align 4
  %81 = and i32 %80, 2
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %95

83:                                               ; preds = %78
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 0
  %85 = load i32, i32* %84, align 4
  %86 = zext i32 %85 to i33
  %87 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %86, i33 1) #11
  %88 = extractvalue { i33, i1 } %87, 1
  %89 = extractvalue { i33, i1 } %87, 0
  %90 = icmp slt i33 %89, 0
  %91 = or i1 %88, %90
  br i1 %91, label %92, label %93, !prof !3

92:                                               ; preds = %83
  tail call void @llvm.trap() #11
  unreachable

93:                                               ; preds = %83
  %94 = trunc i33 %89 to i32
  store i32 %94, i32* %84, align 4
  br label %95

95:                                               ; preds = %93, %78, %73
  store i8 1, i8* %29, align 8
  br label %487

96:                                               ; preds = %3
  %97 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 5
  %98 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %99 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %98, align 8
  %100 = icmp eq %"class.WTF::StringImpl"* %99, null
  br i1 %100, label %118, label %101

101:                                              ; preds = %96
  %102 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %99, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %103 = load atomic i32, i32* %102 monotonic, align 4
  %104 = and i32 %103, 2
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %118

106:                                              ; preds = %101
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %99, i64 0, i32 0
  %108 = load i32, i32* %107, align 4
  %109 = zext i32 %108 to i33
  %110 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %109, i33 1) #11
  %111 = extractvalue { i33, i1 } %110, 1
  %112 = extractvalue { i33, i1 } %110, 0
  %113 = icmp slt i33 %112, 0
  %114 = or i1 %111, %113
  br i1 %114, label %115, label %116, !prof !3

115:                                              ; preds = %106
  tail call void @llvm.trap() #11
  unreachable

116:                                              ; preds = %106
  %117 = trunc i33 %112 to i32
  store i32 %117, i32* %107, align 4
  br label %118

118:                                              ; preds = %116, %101, %96
  %119 = ptrtoint %"class.WTF::StringImpl"* %99 to i64
  %120 = bitcast %"class.WTF::String"* %97 to i64*
  %121 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %97, i64 0, i32 0, i32 0
  %122 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %121, align 8
  store i64 %119, i64* %120, align 8
  %123 = icmp eq %"class.WTF::StringImpl"* %122, null
  br i1 %123, label %487, label %124

124:                                              ; preds = %118
  %125 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %126 = load atomic i32, i32* %125 monotonic, align 4
  %127 = and i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %122, i64 0, i32 0
  %130 = load i32, i32* %129, align 4
  br i1 %128, label %131, label %133

131:                                              ; preds = %124
  %132 = add i32 %130, -1
  store i32 %132, i32* %129, align 4
  br label %133

133:                                              ; preds = %131, %124
  %134 = phi i32 [ %132, %131 ], [ %130, %124 ]
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %487

136:                                              ; preds = %133
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %122) #11
  br label %487

137:                                              ; preds = %3
  %138 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF6String15DeprecatedLowerEv(%"class.WTF::String"* %2) #11
  %139 = ptrtoint %"class.WTF::StringImpl"* %138 to i64
  %140 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 2
  %141 = bitcast %"class.WTF::String"* %140 to i64*
  %142 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %140, i64 0, i32 0, i32 0
  %143 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %142, align 8
  store i64 %139, i64* %141, align 8
  %144 = icmp eq %"class.WTF::StringImpl"* %143, null
  br i1 %144, label %487, label %145

145:                                              ; preds = %137
  %146 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %143, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %147 = load atomic i32, i32* %146 monotonic, align 4
  %148 = and i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %143, i64 0, i32 0
  %151 = load i32, i32* %150, align 4
  br i1 %149, label %152, label %154

152:                                              ; preds = %145
  %153 = add i32 %151, -1
  store i32 %153, i32* %150, align 4
  br label %154

154:                                              ; preds = %152, %145
  %155 = phi i32 [ %153, %152 ], [ %151, %145 ]
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %487

157:                                              ; preds = %154
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %143) #11
  br label %487

158:                                              ; preds = %3
  %159 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF6String15DeprecatedLowerEv(%"class.WTF::String"* %2) #11
  %160 = ptrtoint %"class.WTF::StringImpl"* %159 to i64
  %161 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 3
  %162 = bitcast %"class.WTF::String"* %161 to i64*
  %163 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %161, i64 0, i32 0, i32 0
  %164 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %163, align 8
  store i64 %160, i64* %162, align 8
  %165 = icmp eq %"class.WTF::StringImpl"* %164, null
  br i1 %165, label %487, label %166

166:                                              ; preds = %158
  %167 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %164, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %168 = load atomic i32, i32* %167 monotonic, align 4
  %169 = and i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %164, i64 0, i32 0
  %172 = load i32, i32* %171, align 4
  br i1 %170, label %173, label %175

173:                                              ; preds = %166
  %174 = add i32 %172, -1
  store i32 %174, i32* %171, align 4
  br label %175

175:                                              ; preds = %173, %166
  %176 = phi i32 [ %174, %173 ], [ %172, %166 ]
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %178, label %487

178:                                              ; preds = %175
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %164) #11
  br label %487

179:                                              ; preds = %3
  %180 = tail call %"class.WTF::StringImpl"* @_ZNK3WTF6String15DeprecatedLowerEv(%"class.WTF::String"* %2) #11
  %181 = ptrtoint %"class.WTF::StringImpl"* %180 to i64
  %182 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 4
  %183 = bitcast %"class.WTF::String"* %182 to i64*
  %184 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %182, i64 0, i32 0, i32 0
  %185 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %184, align 8
  store i64 %181, i64* %183, align 8
  %186 = icmp eq %"class.WTF::StringImpl"* %185, null
  br i1 %186, label %487, label %187

187:                                              ; preds = %179
  %188 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %189 = load atomic i32, i32* %188 monotonic, align 4
  %190 = and i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %185, i64 0, i32 0
  %193 = load i32, i32* %192, align 4
  br i1 %191, label %194, label %196

194:                                              ; preds = %187
  %195 = add i32 %193, -1
  store i32 %195, i32* %192, align 4
  br label %196

196:                                              ; preds = %194, %187
  %197 = phi i32 [ %195, %194 ], [ %193, %187 ]
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %487

199:                                              ; preds = %196
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %185) #11
  br label %487

200:                                              ; preds = %3
  %201 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 6
  %202 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %203 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %202, align 8
  %204 = icmp eq %"class.WTF::StringImpl"* %203, null
  br i1 %204, label %222, label %205

205:                                              ; preds = %200
  %206 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %203, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %207 = load atomic i32, i32* %206 monotonic, align 4
  %208 = and i32 %207, 2
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %210, label %222

210:                                              ; preds = %205
  %211 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %203, i64 0, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = zext i32 %212 to i33
  %214 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %213, i33 1) #11
  %215 = extractvalue { i33, i1 } %214, 1
  %216 = extractvalue { i33, i1 } %214, 0
  %217 = icmp slt i33 %216, 0
  %218 = or i1 %215, %217
  br i1 %218, label %219, label %220, !prof !3

219:                                              ; preds = %210
  tail call void @llvm.trap() #11
  unreachable

220:                                              ; preds = %210
  %221 = trunc i33 %216 to i32
  store i32 %221, i32* %211, align 4
  br label %222

222:                                              ; preds = %220, %205, %200
  %223 = ptrtoint %"class.WTF::StringImpl"* %203 to i64
  %224 = bitcast %"class.WTF::String"* %201 to i64*
  %225 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %201, i64 0, i32 0, i32 0
  %226 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %225, align 8
  store i64 %223, i64* %224, align 8
  %227 = icmp eq %"class.WTF::StringImpl"* %226, null
  br i1 %227, label %487, label %228

228:                                              ; preds = %222
  %229 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %226, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %230 = load atomic i32, i32* %229 monotonic, align 4
  %231 = and i32 %230, 2
  %232 = icmp eq i32 %231, 0
  %233 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %226, i64 0, i32 0
  %234 = load i32, i32* %233, align 4
  br i1 %232, label %235, label %237

235:                                              ; preds = %228
  %236 = add i32 %234, -1
  store i32 %236, i32* %233, align 4
  br label %237

237:                                              ; preds = %235, %228
  %238 = phi i32 [ %236, %235 ], [ %234, %228 ]
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %240, label %487

240:                                              ; preds = %237
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %226) #11
  br label %487

241:                                              ; preds = %3
  %242 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 7
  %243 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %244 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %243, align 8
  %245 = icmp eq %"class.WTF::StringImpl"* %244, null
  br i1 %245, label %263, label %246

246:                                              ; preds = %241
  %247 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %244, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %248 = load atomic i32, i32* %247 monotonic, align 4
  %249 = and i32 %248, 2
  %250 = icmp eq i32 %249, 0
  br i1 %250, label %251, label %263

251:                                              ; preds = %246
  %252 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %244, i64 0, i32 0
  %253 = load i32, i32* %252, align 4
  %254 = zext i32 %253 to i33
  %255 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %254, i33 1) #11
  %256 = extractvalue { i33, i1 } %255, 1
  %257 = extractvalue { i33, i1 } %255, 0
  %258 = icmp slt i33 %257, 0
  %259 = or i1 %256, %258
  br i1 %259, label %260, label %261, !prof !3

260:                                              ; preds = %251
  tail call void @llvm.trap() #11
  unreachable

261:                                              ; preds = %251
  %262 = trunc i33 %257 to i32
  store i32 %262, i32* %252, align 4
  br label %263

263:                                              ; preds = %261, %246, %241
  %264 = ptrtoint %"class.WTF::StringImpl"* %244 to i64
  %265 = bitcast %"class.WTF::String"* %242 to i64*
  %266 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %242, i64 0, i32 0, i32 0
  %267 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %266, align 8
  store i64 %264, i64* %265, align 8
  %268 = icmp eq %"class.WTF::StringImpl"* %267, null
  br i1 %268, label %487, label %269

269:                                              ; preds = %263
  %270 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %267, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %271 = load atomic i32, i32* %270 monotonic, align 4
  %272 = and i32 %271, 2
  %273 = icmp eq i32 %272, 0
  %274 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %267, i64 0, i32 0
  %275 = load i32, i32* %274, align 4
  br i1 %273, label %276, label %278

276:                                              ; preds = %269
  %277 = add i32 %275, -1
  store i32 %277, i32* %274, align 4
  br label %278

278:                                              ; preds = %276, %269
  %279 = phi i32 [ %277, %276 ], [ %275, %269 ]
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %281, label %487

281:                                              ; preds = %278
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %267) #11
  br label %487

282:                                              ; preds = %3
  %283 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 8
  %284 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %285 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %284, align 8
  %286 = icmp eq %"class.WTF::StringImpl"* %285, null
  br i1 %286, label %304, label %287

287:                                              ; preds = %282
  %288 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %285, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %289 = load atomic i32, i32* %288 monotonic, align 4
  %290 = and i32 %289, 2
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %292, label %304

292:                                              ; preds = %287
  %293 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %285, i64 0, i32 0
  %294 = load i32, i32* %293, align 4
  %295 = zext i32 %294 to i33
  %296 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %295, i33 1) #11
  %297 = extractvalue { i33, i1 } %296, 1
  %298 = extractvalue { i33, i1 } %296, 0
  %299 = icmp slt i33 %298, 0
  %300 = or i1 %297, %299
  br i1 %300, label %301, label %302, !prof !3

301:                                              ; preds = %292
  tail call void @llvm.trap() #11
  unreachable

302:                                              ; preds = %292
  %303 = trunc i33 %298 to i32
  store i32 %303, i32* %293, align 4
  br label %304

304:                                              ; preds = %302, %287, %282
  %305 = ptrtoint %"class.WTF::StringImpl"* %285 to i64
  %306 = bitcast %"class.WTF::String"* %283 to i64*
  %307 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %283, i64 0, i32 0, i32 0
  %308 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %307, align 8
  store i64 %305, i64* %306, align 8
  %309 = icmp eq %"class.WTF::StringImpl"* %308, null
  br i1 %309, label %487, label %310

310:                                              ; preds = %304
  %311 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %308, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %312 = load atomic i32, i32* %311 monotonic, align 4
  %313 = and i32 %312, 2
  %314 = icmp eq i32 %313, 0
  %315 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %308, i64 0, i32 0
  %316 = load i32, i32* %315, align 4
  br i1 %314, label %317, label %319

317:                                              ; preds = %310
  %318 = add i32 %316, -1
  store i32 %318, i32* %315, align 4
  br label %319

319:                                              ; preds = %317, %310
  %320 = phi i32 [ %318, %317 ], [ %316, %310 ]
  %321 = icmp eq i32 %320, 0
  br i1 %321, label %322, label %487

322:                                              ; preds = %319
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %308) #11
  br label %487

323:                                              ; preds = %3
  %324 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 9
  %325 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %326 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %325, align 8
  %327 = icmp eq %"class.WTF::StringImpl"* %326, null
  br i1 %327, label %345, label %328

328:                                              ; preds = %323
  %329 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %326, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %330 = load atomic i32, i32* %329 monotonic, align 4
  %331 = and i32 %330, 2
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %333, label %345

333:                                              ; preds = %328
  %334 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %326, i64 0, i32 0
  %335 = load i32, i32* %334, align 4
  %336 = zext i32 %335 to i33
  %337 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %336, i33 1) #11
  %338 = extractvalue { i33, i1 } %337, 1
  %339 = extractvalue { i33, i1 } %337, 0
  %340 = icmp slt i33 %339, 0
  %341 = or i1 %338, %340
  br i1 %341, label %342, label %343, !prof !3

342:                                              ; preds = %333
  tail call void @llvm.trap() #11
  unreachable

343:                                              ; preds = %333
  %344 = trunc i33 %339 to i32
  store i32 %344, i32* %334, align 4
  br label %345

345:                                              ; preds = %343, %328, %323
  %346 = ptrtoint %"class.WTF::StringImpl"* %326 to i64
  %347 = bitcast %"class.WTF::String"* %324 to i64*
  %348 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %324, i64 0, i32 0, i32 0
  %349 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %348, align 8
  store i64 %346, i64* %347, align 8
  %350 = icmp eq %"class.WTF::StringImpl"* %349, null
  br i1 %350, label %487, label %351

351:                                              ; preds = %345
  %352 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %349, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %353 = load atomic i32, i32* %352 monotonic, align 4
  %354 = and i32 %353, 2
  %355 = icmp eq i32 %354, 0
  %356 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %349, i64 0, i32 0
  %357 = load i32, i32* %356, align 4
  br i1 %355, label %358, label %360

358:                                              ; preds = %351
  %359 = add i32 %357, -1
  store i32 %359, i32* %356, align 4
  br label %360

360:                                              ; preds = %358, %351
  %361 = phi i32 [ %359, %358 ], [ %357, %351 ]
  %362 = icmp eq i32 %361, 0
  br i1 %362, label %363, label %487

363:                                              ; preds = %360
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %349) #11
  br label %487

364:                                              ; preds = %3
  %365 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 10
  %366 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %367 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %366, align 8
  %368 = icmp eq %"class.WTF::StringImpl"* %367, null
  br i1 %368, label %386, label %369

369:                                              ; preds = %364
  %370 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %367, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %371 = load atomic i32, i32* %370 monotonic, align 4
  %372 = and i32 %371, 2
  %373 = icmp eq i32 %372, 0
  br i1 %373, label %374, label %386

374:                                              ; preds = %369
  %375 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %367, i64 0, i32 0
  %376 = load i32, i32* %375, align 4
  %377 = zext i32 %376 to i33
  %378 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %377, i33 1) #11
  %379 = extractvalue { i33, i1 } %378, 1
  %380 = extractvalue { i33, i1 } %378, 0
  %381 = icmp slt i33 %380, 0
  %382 = or i1 %379, %381
  br i1 %382, label %383, label %384, !prof !3

383:                                              ; preds = %374
  tail call void @llvm.trap() #11
  unreachable

384:                                              ; preds = %374
  %385 = trunc i33 %380 to i32
  store i32 %385, i32* %375, align 4
  br label %386

386:                                              ; preds = %384, %369, %364
  %387 = ptrtoint %"class.WTF::StringImpl"* %367 to i64
  %388 = bitcast %"class.WTF::String"* %365 to i64*
  %389 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %365, i64 0, i32 0, i32 0
  %390 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %389, align 8
  store i64 %387, i64* %388, align 8
  %391 = icmp eq %"class.WTF::StringImpl"* %390, null
  br i1 %391, label %487, label %392

392:                                              ; preds = %386
  %393 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %390, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %394 = load atomic i32, i32* %393 monotonic, align 4
  %395 = and i32 %394, 2
  %396 = icmp eq i32 %395, 0
  %397 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %390, i64 0, i32 0
  %398 = load i32, i32* %397, align 4
  br i1 %396, label %399, label %401

399:                                              ; preds = %392
  %400 = add i32 %398, -1
  store i32 %400, i32* %397, align 4
  br label %401

401:                                              ; preds = %399, %392
  %402 = phi i32 [ %400, %399 ], [ %398, %392 ]
  %403 = icmp eq i32 %402, 0
  br i1 %403, label %404, label %487

404:                                              ; preds = %401
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %390) #11
  br label %487

405:                                              ; preds = %3
  %406 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 11
  %407 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %408 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %407, align 8
  %409 = icmp eq %"class.WTF::StringImpl"* %408, null
  br i1 %409, label %427, label %410

410:                                              ; preds = %405
  %411 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %408, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %412 = load atomic i32, i32* %411 monotonic, align 4
  %413 = and i32 %412, 2
  %414 = icmp eq i32 %413, 0
  br i1 %414, label %415, label %427

415:                                              ; preds = %410
  %416 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %408, i64 0, i32 0
  %417 = load i32, i32* %416, align 4
  %418 = zext i32 %417 to i33
  %419 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %418, i33 1) #11
  %420 = extractvalue { i33, i1 } %419, 1
  %421 = extractvalue { i33, i1 } %419, 0
  %422 = icmp slt i33 %421, 0
  %423 = or i1 %420, %422
  br i1 %423, label %424, label %425, !prof !3

424:                                              ; preds = %415
  tail call void @llvm.trap() #11
  unreachable

425:                                              ; preds = %415
  %426 = trunc i33 %421 to i32
  store i32 %426, i32* %416, align 4
  br label %427

427:                                              ; preds = %425, %410, %405
  %428 = ptrtoint %"class.WTF::StringImpl"* %408 to i64
  %429 = bitcast %"class.WTF::String"* %406 to i64*
  %430 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %406, i64 0, i32 0, i32 0
  %431 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %430, align 8
  store i64 %428, i64* %429, align 8
  %432 = icmp eq %"class.WTF::StringImpl"* %431, null
  br i1 %432, label %487, label %433

433:                                              ; preds = %427
  %434 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %431, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %435 = load atomic i32, i32* %434 monotonic, align 4
  %436 = and i32 %435, 2
  %437 = icmp eq i32 %436, 0
  %438 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %431, i64 0, i32 0
  %439 = load i32, i32* %438, align 4
  br i1 %437, label %440, label %442

440:                                              ; preds = %433
  %441 = add i32 %439, -1
  store i32 %441, i32* %438, align 4
  br label %442

442:                                              ; preds = %440, %433
  %443 = phi i32 [ %441, %440 ], [ %439, %433 ]
  %444 = icmp eq i32 %443, 0
  br i1 %444, label %445, label %487

445:                                              ; preds = %442
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %431) #11
  br label %487

446:                                              ; preds = %3
  %447 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 12
  %448 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %449 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %448, align 8
  %450 = icmp eq %"class.WTF::StringImpl"* %449, null
  br i1 %450, label %468, label %451

451:                                              ; preds = %446
  %452 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %449, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %453 = load atomic i32, i32* %452 monotonic, align 4
  %454 = and i32 %453, 2
  %455 = icmp eq i32 %454, 0
  br i1 %455, label %456, label %468

456:                                              ; preds = %451
  %457 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %449, i64 0, i32 0
  %458 = load i32, i32* %457, align 4
  %459 = zext i32 %458 to i33
  %460 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %459, i33 1) #11
  %461 = extractvalue { i33, i1 } %460, 1
  %462 = extractvalue { i33, i1 } %460, 0
  %463 = icmp slt i33 %462, 0
  %464 = or i1 %461, %463
  br i1 %464, label %465, label %466, !prof !3

465:                                              ; preds = %456
  tail call void @llvm.trap() #11
  unreachable

466:                                              ; preds = %456
  %467 = trunc i33 %462 to i32
  store i32 %467, i32* %457, align 4
  br label %468

468:                                              ; preds = %466, %451, %446
  %469 = ptrtoint %"class.WTF::StringImpl"* %449 to i64
  %470 = bitcast %"class.WTF::String"* %447 to i64*
  %471 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %447, i64 0, i32 0, i32 0
  %472 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %471, align 8
  store i64 %469, i64* %470, align 8
  %473 = icmp eq %"class.WTF::StringImpl"* %472, null
  br i1 %473, label %487, label %474

474:                                              ; preds = %468
  %475 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %472, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %476 = load atomic i32, i32* %475 monotonic, align 4
  %477 = and i32 %476, 2
  %478 = icmp eq i32 %477, 0
  %479 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %472, i64 0, i32 0
  %480 = load i32, i32* %479, align 4
  br i1 %478, label %481, label %483

481:                                              ; preds = %474
  %482 = add i32 %480, -1
  store i32 %482, i32* %479, align 4
  br label %483

483:                                              ; preds = %481, %474
  %484 = phi i32 [ %482, %481 ], [ %480, %474 ]
  %485 = icmp eq i32 %484, 0
  br i1 %485, label %486, label %487

486:                                              ; preds = %483
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %472) #11
  br label %487

487:                                              ; preds = %4, %486, %483, %468, %445, %442, %427, %404, %401, %386, %363, %360, %345, %322, %319, %304, %281, %278, %263, %240, %237, %222, %179, %196, %199, %158, %175, %178, %137, %154, %157, %136, %133, %118, %95, %54, %69, %72, %9, %24, %27, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.WTF::StringImpl"* @_ZNK3WTF6String15DeprecatedLowerEv(%"class.WTF::String"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink13LinkHeaderSetC2ERKN3WTF6StringE(%"class.blink::LinkHeaderSet"*, %"class.WTF::String"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = alloca %"class.blink::LinkHeader", align 8
  %6 = getelementptr inbounds %"class.blink::LinkHeaderSet", %"class.blink::LinkHeaderSet"* %0, i64 0, i32 0
  %7 = bitcast %"class.blink::LinkHeaderSet"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 16, i1 false) #11
  %8 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %10, label %176, label %11

11:                                               ; preds = %2
  %12 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #11
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 1
  %15 = bitcast %"class.WTF::StringImpl"* %14 to i8*
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 1
  %17 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 24, i1 false)
  %18 = load i32, i32* %16, align 4
  %19 = zext i32 %18 to i64
  %20 = icmp ult i32 %18, 23
  br i1 %20, label %28, label %21

21:                                               ; preds = %11
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %24 = add nuw nsw i64 %19, 16
  %25 = and i64 %24, 8589934576
  %26 = tail call i8* @_Znwm(i64 %25) #12
  store i8* %26, i8** %13, align 8
  %27 = or i64 %25, -9223372036854775808
  store i64 %27, i64* %22, align 8
  store i64 %19, i64* %23, align 8
  br label %33

28:                                               ; preds = %11
  %29 = trunc i32 %18 to i8
  %30 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %31 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %30, i64 0, i32 1, i32 0
  store i8 %29, i8* %31, align 1
  %32 = icmp eq i32 %18, 0
  br i1 %32, label %35, label %33

33:                                               ; preds = %28, %21
  %34 = phi i8* [ %26, %21 ], [ %12, %28 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %34, i8* align 1 %15, i64 %19, i1 false) #11
  br label %35

35:                                               ; preds = %28, %33
  %36 = phi i8* [ %12, %28 ], [ %34, %33 ]
  %37 = getelementptr inbounds i8, i8* %36, i64 %19
  store i8 0, i8* %37, align 1
  %38 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %38) #11
  call void @_ZN16link_header_util15SplitLinkHeaderERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::vector"* nonnull sret %4, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %3) #11
  %39 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %40 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %39, align 8
  %41 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %42 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %41, align 8
  %43 = icmp eq %"struct.std::__1::pair"* %40, %42
  br i1 %43, label %94, label %44

44:                                               ; preds = %35
  %45 = bitcast %"class.blink::LinkHeader"* %5 to i8*
  %46 = getelementptr inbounds %"class.blink::LinkHeaderSet", %"class.blink::LinkHeaderSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %47 = getelementptr inbounds %"class.blink::LinkHeaderSet", %"class.blink::LinkHeaderSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %48 = getelementptr inbounds %"class.blink::LinkHeaderSet", %"class.blink::LinkHeaderSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %49 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %5, i64 0, i32 0, i32 0, i32 0
  %50 = bitcast %"class.blink::LinkHeader"* %5 to i64*
  %51 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %5, i64 0, i32 1
  %52 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %51, i64 0, i32 0, i32 0
  %53 = bitcast %"class.WTF::String"* %51 to i64*
  %54 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %5, i64 0, i32 2
  %55 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %54, i64 0, i32 0, i32 0
  %56 = bitcast %"class.WTF::String"* %54 to i64*
  %57 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %5, i64 0, i32 3
  %58 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %57, i64 0, i32 0, i32 0
  %59 = bitcast %"class.WTF::String"* %57 to i64*
  %60 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %5, i64 0, i32 4
  %61 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %60, i64 0, i32 0, i32 0
  %62 = bitcast %"class.WTF::String"* %60 to i64*
  %63 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %5, i64 0, i32 5
  %64 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %63, i64 0, i32 0, i32 0
  %65 = bitcast %"class.WTF::String"* %63 to i64*
  %66 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %5, i64 0, i32 6
  %67 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %66, i64 0, i32 0, i32 0
  %68 = bitcast %"class.WTF::String"* %66 to i64*
  %69 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %5, i64 0, i32 7
  %70 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %69, i64 0, i32 0, i32 0
  %71 = bitcast %"class.WTF::String"* %69 to i64*
  %72 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %5, i64 0, i32 8
  %73 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %72, i64 0, i32 0, i32 0
  %74 = bitcast %"class.WTF::String"* %72 to i64*
  %75 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %5, i64 0, i32 9
  %76 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %75, i64 0, i32 0, i32 0
  %77 = bitcast %"class.WTF::String"* %75 to i64*
  %78 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %5, i64 0, i32 10
  %79 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %78, i64 0, i32 0, i32 0
  %80 = bitcast %"class.WTF::String"* %78 to i64*
  %81 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %5, i64 0, i32 11
  %82 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %81, i64 0, i32 0, i32 0
  %83 = bitcast %"class.WTF::String"* %81 to i64*
  %84 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %5, i64 0, i32 12
  %85 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %84, i64 0, i32 0, i32 0
  %86 = bitcast %"class.WTF::String"* %84 to i64*
  %87 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %5, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  %88 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %5, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0
  %89 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %88, i64 0, i32 0, i32 0
  %90 = bitcast %"class.WTF::String"* %88 to i64*
  %91 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %5, i64 0, i32 14
  br label %109

92:                                               ; preds = %173
  %93 = load %"struct.std::__1::pair"*, %"struct.std::__1::pair"** %39, align 8
  br label %94

94:                                               ; preds = %92, %35
  %95 = phi %"struct.std::__1::pair"* [ %93, %92 ], [ %40, %35 ]
  %96 = icmp eq %"struct.std::__1::pair"* %95, null
  br i1 %96, label %101, label %97

97:                                               ; preds = %94
  %98 = ptrtoint %"struct.std::__1::pair"* %95 to i64
  %99 = bitcast %"struct.std::__1::pair"** %41 to i64*
  store i64 %98, i64* %99, align 8
  %100 = bitcast %"struct.std::__1::pair"* %95 to i8*
  call void @_ZdlPv(i8* %100) #12
  br label %101

101:                                              ; preds = %94, %97
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %38) #11
  %102 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %103 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %102, i64 0, i32 1, i32 0
  %104 = load i8, i8* %103, align 1
  %105 = icmp slt i8 %104, 0
  br i1 %105, label %106, label %108

106:                                              ; preds = %101
  %107 = load i8*, i8** %13, align 8
  call void @_ZdlPv(i8* %107) #12
  br label %108

108:                                              ; preds = %101, %106
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #11
  br label %176

109:                                              ; preds = %44, %173
  %110 = phi %"struct.std::__1::pair"* [ %40, %44 ], [ %174, %173 ]
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %45) #11
  %111 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %110, i64 0, i32 0, i32 0
  %112 = load i8*, i8** %111, align 8
  %113 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %110, i64 0, i32 1, i32 0
  %114 = load i8*, i8** %113, align 8
  call void @_ZN5blink10LinkHeaderC2INSt3__111__wrap_iterIPKcEEEET_S7_(%"class.blink::LinkHeader"* nonnull %5, i8* %112, i8* %114)
  %115 = load i32, i32* %46, align 4
  %116 = load i32, i32* %47, align 8
  %117 = icmp eq i32 %115, %116
  br i1 %117, label %172, label %118, !prof !3

118:                                              ; preds = %109
  %119 = load %"class.blink::LinkHeader"*, %"class.blink::LinkHeader"** %48, align 8
  %120 = zext i32 %115 to i64
  %121 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %119, i64 %120
  %122 = load i64, i64* %50, align 8
  %123 = bitcast %"class.blink::LinkHeader"* %121 to i64*
  store i64 %122, i64* %123, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %49, align 8
  %124 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %119, i64 %120, i32 1
  %125 = load i64, i64* %53, align 8
  %126 = bitcast %"class.WTF::String"* %124 to i64*
  store i64 %125, i64* %126, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %52, align 8
  %127 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %119, i64 %120, i32 2
  %128 = load i64, i64* %56, align 8
  %129 = bitcast %"class.WTF::String"* %127 to i64*
  store i64 %128, i64* %129, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %55, align 8
  %130 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %119, i64 %120, i32 3
  %131 = load i64, i64* %59, align 8
  %132 = bitcast %"class.WTF::String"* %130 to i64*
  store i64 %131, i64* %132, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %58, align 8
  %133 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %119, i64 %120, i32 4
  %134 = load i64, i64* %62, align 8
  %135 = bitcast %"class.WTF::String"* %133 to i64*
  store i64 %134, i64* %135, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %61, align 8
  %136 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %119, i64 %120, i32 5
  %137 = load i64, i64* %65, align 8
  %138 = bitcast %"class.WTF::String"* %136 to i64*
  store i64 %137, i64* %138, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %64, align 8
  %139 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %119, i64 %120, i32 6
  %140 = load i64, i64* %68, align 8
  %141 = bitcast %"class.WTF::String"* %139 to i64*
  store i64 %140, i64* %141, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %67, align 8
  %142 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %119, i64 %120, i32 7
  %143 = load i64, i64* %71, align 8
  %144 = bitcast %"class.WTF::String"* %142 to i64*
  store i64 %143, i64* %144, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %70, align 8
  %145 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %119, i64 %120, i32 8
  %146 = load i64, i64* %74, align 8
  %147 = bitcast %"class.WTF::String"* %145 to i64*
  store i64 %146, i64* %147, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %73, align 8
  %148 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %119, i64 %120, i32 9
  %149 = load i64, i64* %77, align 8
  %150 = bitcast %"class.WTF::String"* %148 to i64*
  store i64 %149, i64* %150, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %76, align 8
  %151 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %119, i64 %120, i32 10
  %152 = load i64, i64* %80, align 8
  %153 = bitcast %"class.WTF::String"* %151 to i64*
  store i64 %152, i64* %153, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %79, align 8
  %154 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %119, i64 %120, i32 11
  %155 = load i64, i64* %83, align 8
  %156 = bitcast %"class.WTF::String"* %154 to i64*
  store i64 %155, i64* %156, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %82, align 8
  %157 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %119, i64 %120, i32 12
  %158 = load i64, i64* %86, align 8
  %159 = bitcast %"class.WTF::String"* %157 to i64*
  store i64 %158, i64* %159, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %85, align 8
  %160 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %119, i64 %120, i32 13, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %160, i8 0, i64 16, i1 false) #11
  %161 = load i8, i8* %87, align 8, !range !2
  %162 = icmp eq i8 %161, 0
  br i1 %162, label %167, label %163

163:                                              ; preds = %118
  %164 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %119, i64 %120, i32 13, i32 0, i32 0, i32 0, i32 1
  %165 = load i64, i64* %90, align 8
  %166 = bitcast %union.anon* %164 to i64*
  store i64 %165, i64* %166, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %89, align 8
  store i8 1, i8* %160, align 8
  br label %167

167:                                              ; preds = %163, %118
  %168 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %119, i64 %120, i32 14
  %169 = load i8, i8* %91, align 8, !range !2
  store i8 %169, i8* %168, align 8
  %170 = load i32, i32* %46, align 4
  %171 = add i32 %170, 1
  store i32 %171, i32* %46, align 4
  br label %173

172:                                              ; preds = %109
  call void @_ZN3WTF6VectorIN5blink10LinkHeaderELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector"* %6, %"class.blink::LinkHeader"* nonnull dereferenceable(128) %5) #11
  br label %173

173:                                              ; preds = %167, %172
  call void @_ZN5blink10LinkHeaderD2Ev(%"class.blink::LinkHeader"* nonnull %5) #11
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %45) #11
  %174 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %110, i64 1
  %175 = icmp eq %"struct.std::__1::pair"* %174, %42
  br i1 %175, label %92, label %109

176:                                              ; preds = %2, %108
  ret void
}

declare void @_ZN16link_header_util15SplitLinkHeaderERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::vector"* sret, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10LinkHeaderC2INSt3__111__wrap_iterIPKcEEEET_S7_(%"class.blink::LinkHeader"*, i8*, i8*) unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.std::__1::unordered_map", align 8
  %8 = alloca %"class.WTF::String", align 8
  %9 = alloca %"class.std::__1::basic_string", align 8
  %10 = alloca %"class.WTF::String", align 8
  %11 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 14
  %14 = bitcast %"class.blink::LinkHeader"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 105, i1 false)
  store i8 1, i8* %13, align 8
  %15 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #11
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 0, i64 24, i1 false) #11
  %17 = bitcast %"class.std::__1::unordered_map"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %17) #11
  %18 = getelementptr inbounds %"class.std::__1::unordered_map", %"class.std::__1::unordered_map"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = getelementptr inbounds %"class.std::__1::unordered_map", %"class.std::__1::unordered_map"* %7, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.std::__1::unordered_map", %"class.std::__1::unordered_map"* %7, i64 0, i32 0, i32 4, i64 0
  %21 = getelementptr inbounds %"class.std::__1::unordered_map", %"class.std::__1::unordered_map"* %7, i64 0, i32 0, i32 3
  %22 = bitcast %"class.std::__1::__compressed_pair.24"* %21 to i32*
  %23 = bitcast i8* %20 to i32*
  store i32 -1431655766, i32* %23, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 32, i1 false) #11
  store i32 1065353216, i32* %22, align 8
  %24 = call zeroext i1 @_ZN16link_header_util20ParseLinkHeaderValueENSt3__111__wrap_iterIPKcEES4_PNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPNS0_13unordered_mapISA_N4absl8optionalISA_EENS0_4hashISA_EENS0_8equal_toISA_EENS8_INS0_4pairIKSA_SF_EEEEEE(i8* %1, i8* %2, %"class.std::__1::basic_string"* nonnull %6, %"class.std::__1::unordered_map"* nonnull %7) #11
  %25 = zext i1 %24 to i8
  store i8 %25, i8* %13, align 8
  br i1 %24, label %26, label %225

26:                                               ; preds = %3
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %28 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 0, i32 0, i32 0
  %29 = bitcast %"class.WTF::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #11
  %30 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %31 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %30, i64 0, i32 1, i32 0
  %32 = load i8, i8* %31, align 1
  %33 = icmp slt i8 %32, 0
  %34 = load i8*, i8** %16, align 8
  %35 = load i64, i64* %27, align 8
  %36 = zext i8 %32 to i64
  %37 = select i1 %33, i8* %34, i8* %15
  %38 = select i1 %33, i64 %35, i64 %36
  call void @_ZN3WTF6StringC1EPKcm(%"class.WTF::String"* nonnull %8, i8* %37, i64 %38) #11
  %39 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  %40 = bitcast %"class.WTF::String"* %8 to i64*
  %41 = load i64, i64* %40, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %39, align 8
  %42 = bitcast %"class.blink::LinkHeader"* %0 to i64*
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %28, align 8
  store i64 %41, i64* %42, align 8
  %44 = icmp eq %"class.WTF::StringImpl"* %43, null
  br i1 %44, label %74, label %45

45:                                               ; preds = %26
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load atomic i32, i32* %46 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  br i1 %49, label %52, label %54

52:                                               ; preds = %45
  %53 = add i32 %51, -1
  store i32 %53, i32* %50, align 4
  br label %54

54:                                               ; preds = %52, %45
  %55 = phi i32 [ %53, %52 ], [ %51, %45 ]
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %54
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %43) #11
  br label %58

58:                                               ; preds = %54, %57
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  %60 = icmp eq %"class.WTF::StringImpl"* %59, null
  br i1 %60, label %74, label %61

61:                                               ; preds = %58
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = load atomic i32, i32* %62 monotonic, align 4
  %64 = and i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %67 = load i32, i32* %66, align 4
  br i1 %65, label %68, label %70

68:                                               ; preds = %61
  %69 = add i32 %67, -1
  store i32 %69, i32* %66, align 4
  br label %70

70:                                               ; preds = %68, %61
  %71 = phi i32 [ %69, %68 ], [ %67, %61 ]
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %74

73:                                               ; preds = %70
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %59) #11
  br label %74

74:                                               ; preds = %26, %58, %70, %73
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #11
  %75 = bitcast %"struct.std::__1::__hash_node_base"** %19 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %87, label %78

78:                                               ; preds = %74
  %79 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  %80 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %82 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %83 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %82, i64 0, i32 1, i32 0
  %84 = bitcast %"class.WTF::String"* %10 to i8*
  %85 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %10, i64 0, i32 0, i32 0
  %86 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  br label %90

87:                                               ; preds = %195, %74
  %88 = load i8, i8* %12, align 8, !range !2
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %225, label %199

90:                                               ; preds = %78, %195
  %91 = phi i64 [ %76, %78 ], [ %197, %195 ]
  %92 = inttoptr i64 %91 to %"struct.std::__1::__hash_node"*
  %93 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %92, i64 0, i32 2, i32 0
  %94 = bitcast %"struct.std::__1::pair.27"* %93 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %95 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %94, i64 0, i32 1, i32 0
  %96 = load i8, i8* %95, align 1
  %97 = icmp slt i8 %96, 0
  %98 = getelementptr inbounds %"struct.std::__1::pair.27", %"struct.std::__1::pair.27"* %93, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %99 = load i8*, i8** %98, align 8
  %100 = bitcast %"struct.std::__1::pair.27"* %93 to i8*
  %101 = select i1 %97, i8* %99, i8* %100
  %102 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %92, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %103 = load i64, i64* %102, align 8
  %104 = zext i8 %96 to i64
  %105 = select i1 %97, i64 %103, i64 %104
  %106 = call zeroext i1 @_ZN4base26EqualsCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %101, i64 %105, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i64 3) #11
  br i1 %106, label %142, label %107

107:                                              ; preds = %90
  %108 = call zeroext i1 @_ZN4base26EqualsCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %101, i64 %105, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i64 6) #11
  br i1 %108, label %142, label %109

109:                                              ; preds = %107
  %110 = call zeroext i1 @_ZN4base26EqualsCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %101, i64 %105, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0), i64 11) #11
  br i1 %110, label %148, label %111

111:                                              ; preds = %109
  %112 = call zeroext i1 @_ZN4base26EqualsCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %101, i64 %105, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0), i64 5) #11
  br i1 %112, label %142, label %113

113:                                              ; preds = %111
  %114 = call zeroext i1 @_ZN4base26EqualsCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %101, i64 %105, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i64 5) #11
  br i1 %114, label %142, label %115

115:                                              ; preds = %113
  %116 = call zeroext i1 @_ZN4base26EqualsCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %101, i64 %105, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i64 4) #11
  br i1 %116, label %142, label %117

117:                                              ; preds = %115
  %118 = call zeroext i1 @_ZN4base26EqualsCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %101, i64 %105, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0), i64 3) #11
  br i1 %118, label %142, label %119

119:                                              ; preds = %117
  %120 = call zeroext i1 @_ZN4base26EqualsCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %101, i64 %105, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i64 0, i64 0), i64 8) #11
  br i1 %120, label %142, label %121

121:                                              ; preds = %119
  %122 = call zeroext i1 @_ZN4base26EqualsCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %101, i64 %105, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i64 2) #11
  br i1 %122, label %148, label %123

123:                                              ; preds = %121
  %124 = call zeroext i1 @_ZN4base26EqualsCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %101, i64 %105, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0), i64 5) #11
  br i1 %124, label %148, label %125

125:                                              ; preds = %123
  %126 = call zeroext i1 @_ZN4base26EqualsCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %101, i64 %105, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i64 9) #11
  br i1 %126, label %148, label %127

127:                                              ; preds = %125
  %128 = call zeroext i1 @_ZN4base26EqualsCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %101, i64 %105, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.14, i64 0, i64 0), i64 11) #11
  br i1 %128, label %148, label %129

129:                                              ; preds = %127
  %130 = call zeroext i1 @_ZN4base26EqualsCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %101, i64 %105, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i64 0, i64 0), i64 10) #11
  br i1 %130, label %148, label %131

131:                                              ; preds = %129
  %132 = call zeroext i1 @_ZN4base26EqualsCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %101, i64 %105, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i64 6) #11
  br i1 %132, label %142, label %133

133:                                              ; preds = %131
  %134 = call zeroext i1 @_ZN4base26EqualsCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %101, i64 %105, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i64 0, i64 0), i64 16) #11
  br i1 %134, label %148, label %135

135:                                              ; preds = %133
  %136 = call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink29kSignedExchangeVariantsHeaderE, i64 0, i64 0)) #11
  %137 = call zeroext i1 @_ZN4base26EqualsCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %101, i64 %105, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink29kSignedExchangeVariantsHeaderE, i64 0, i64 0), i64 %136) #11
  br i1 %137, label %148, label %138

138:                                              ; preds = %135
  %139 = call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink31kSignedExchangeVariantKeyHeaderE, i64 0, i64 0)) #11
  %140 = call zeroext i1 @_ZN4base26EqualsCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8* %101, i64 %105, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink31kSignedExchangeVariantKeyHeaderE, i64 0, i64 0), i64 %139) #11
  %141 = select i1 %140, i32 16, i32 7
  br label %148

142:                                              ; preds = %131, %119, %117, %115, %113, %111, %107, %90
  %143 = phi i32 [ 0, %90 ], [ 1, %107 ], [ 2, %111 ], [ 3, %113 ], [ 4, %115 ], [ 5, %117 ], [ 6, %119 ], [ 1, %131 ]
  %144 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %92, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %145 = load i8, i8* %144, align 8, !range !2
  %146 = icmp eq i8 %145, 0
  br i1 %146, label %147, label %148

147:                                              ; preds = %142
  store i8 0, i8* %13, align 8
  br label %148

148:                                              ; preds = %142, %138, %135, %133, %129, %127, %125, %123, %121, %109, %147
  %149 = phi i32 [ %143, %147 ], [ %143, %142 ], [ %141, %138 ], [ 15, %135 ], [ 14, %133 ], [ 13, %129 ], [ 12, %127 ], [ 11, %125 ], [ 10, %123 ], [ 9, %121 ], [ 8, %109 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %79) #11
  %150 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %92, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %86, i8 -86, i64 24, i1 false)
  %151 = load i8, i8* %150, align 8, !range !2, !noalias !4
  %152 = icmp eq i8 %151, 0
  br i1 %152, label %166, label %153

153:                                              ; preds = %148
  %154 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %92, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %155 = bitcast %"class.std::__1::basic_string"* %154 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %156 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %155, i64 0, i32 1, i32 0
  %157 = load i8, i8* %156, align 1, !noalias !4
  %158 = icmp slt i8 %157, 0
  br i1 %158, label %161, label %159

159:                                              ; preds = %153
  %160 = bitcast %"class.std::__1::basic_string"* %154 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %79, i8* align 8 %160, i64 24, i1 false) #11
  br label %167

161:                                              ; preds = %153
  %162 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %154, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %163 = load i8*, i8** %162, align 8, !noalias !4
  %164 = getelementptr inbounds %"struct.std::__1::__hash_node", %"struct.std::__1::__hash_node"* %92, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %165 = load i64, i64* %164, align 8, !noalias !4
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* nonnull %9, i8* %163, i64 %165) #11
  br label %167

166:                                              ; preds = %148
  store i8 0, i8* %83, align 1
  store i8 0, i8* %79, align 8
  br label %167

167:                                              ; preds = %159, %161, %166
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %84) #11
  %168 = load i8, i8* %83, align 1
  %169 = icmp slt i8 %168, 0
  %170 = load i8*, i8** %80, align 8
  %171 = load i64, i64* %81, align 8
  %172 = zext i8 %168 to i64
  %173 = select i1 %169, i8* %170, i8* %79
  %174 = select i1 %169, i64 %171, i64 %172
  call void @_ZN3WTF6StringC1EPKcm(%"class.WTF::String"* nonnull %10, i8* %173, i64 %174) #11
  call void @_ZN5blink10LinkHeader8SetValueENS0_17LinkParameterNameERKN3WTF6StringE(%"class.blink::LinkHeader"* %0, i32 %149, %"class.WTF::String"* nonnull dereferenceable(8) %10)
  %175 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %85, align 8
  %176 = icmp eq %"class.WTF::StringImpl"* %175, null
  br i1 %176, label %190, label %177

177:                                              ; preds = %167
  %178 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %175, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %179 = load atomic i32, i32* %178 monotonic, align 4
  %180 = and i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %175, i64 0, i32 0
  %183 = load i32, i32* %182, align 4
  br i1 %181, label %184, label %186

184:                                              ; preds = %177
  %185 = add i32 %183, -1
  store i32 %185, i32* %182, align 4
  br label %186

186:                                              ; preds = %184, %177
  %187 = phi i32 [ %185, %184 ], [ %183, %177 ]
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %189, label %190

189:                                              ; preds = %186
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %175) #11
  br label %190

190:                                              ; preds = %167, %186, %189
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %84) #11
  %191 = load i8, i8* %83, align 1
  %192 = icmp slt i8 %191, 0
  br i1 %192, label %193, label %195

193:                                              ; preds = %190
  %194 = load i8*, i8** %80, align 8
  call void @_ZdlPv(i8* %194) #12
  br label %195

195:                                              ; preds = %190, %193
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %79) #11
  %196 = inttoptr i64 %91 to i64*
  %197 = load i64, i64* %196, align 8
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %87, label %90

199:                                              ; preds = %87
  %200 = bitcast %"class.WTF::StringView"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %200) #11
  %201 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %202 = icmp eq %"class.WTF::StringImpl"* %201, null
  br i1 %202, label %203, label %207

203:                                              ; preds = %199
  %204 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  store i8* null, i8** %204, align 8
  %205 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %206 = bitcast %"class.WTF::StringView"* %4 to i64*
  store i64 %205, i64* %206, align 8
  br label %215

207:                                              ; preds = %199
  %208 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 0
  store %"class.WTF::StringImpl"* %201, %"class.WTF::StringImpl"** %208, align 8
  %209 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %201, i64 0, i32 1
  %210 = load i32, i32* %209, align 4
  %211 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %201, i64 1
  %212 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  %213 = bitcast i8** %212 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %211, %"class.WTF::StringImpl"** %213, align 8
  %214 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %215

215:                                              ; preds = %207, %203
  %216 = phi i64 [ %214, %207 ], [ %205, %203 ]
  %217 = phi i32 [ %210, %207 ], [ 0, %203 ]
  %218 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  store i32 %217, i32* %218, align 8
  %219 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %219) #11
  %220 = bitcast %"class.WTF::StringView"* %5 to i64*
  store i64 %216, i64* %220, align 8
  %221 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i8** %221, align 8
  %222 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 9, i32* %222, align 8
  %223 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %4, %"class.WTF::StringView"* nonnull dereferenceable(24) %5) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %219) #11
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %200) #11
  br i1 %223, label %225, label %224

224:                                              ; preds = %215
  store i8 0, i8* %13, align 8
  br label %225

225:                                              ; preds = %215, %87, %224, %3
  %226 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %19, align 8
  %227 = icmp eq %"struct.std::__1::__hash_node_base"* %226, null
  br i1 %227, label %258, label %228

228:                                              ; preds = %225, %255
  %229 = phi %"struct.std::__1::__hash_node_base"* [ %231, %255 ], [ %226, %225 ]
  %230 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %229, i64 0, i32 0
  %231 = load %"struct.std::__1::__hash_node_base"*, %"struct.std::__1::__hash_node_base"** %230, align 8
  %232 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %229, i64 2
  %233 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %229, i64 5
  %234 = bitcast %"struct.std::__1::__hash_node_base"* %233 to i8*
  %235 = load i8, i8* %234, align 8, !range !2
  %236 = icmp eq i8 %235, 0
  br i1 %236, label %247, label %237

237:                                              ; preds = %228
  %238 = getelementptr inbounds %"struct.std::__1::__hash_node_base", %"struct.std::__1::__hash_node_base"* %229, i64 6
  %239 = bitcast %"struct.std::__1::__hash_node_base"* %238 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %240 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %239, i64 0, i32 1, i32 0
  %241 = load i8, i8* %240, align 1
  %242 = icmp slt i8 %241, 0
  br i1 %242, label %243, label %246

243:                                              ; preds = %237
  %244 = bitcast %"struct.std::__1::__hash_node_base"* %238 to i8**
  %245 = load i8*, i8** %244, align 8
  call void @_ZdlPv(i8* %245) #12
  br label %246

246:                                              ; preds = %243, %237
  store i8 0, i8* %234, align 8
  br label %247

247:                                              ; preds = %246, %228
  %248 = bitcast %"struct.std::__1::__hash_node_base"* %232 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %249 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %248, i64 0, i32 1, i32 0
  %250 = load i8, i8* %249, align 1
  %251 = icmp slt i8 %250, 0
  br i1 %251, label %252, label %255

252:                                              ; preds = %247
  %253 = bitcast %"struct.std::__1::__hash_node_base"* %232 to i8**
  %254 = load i8*, i8** %253, align 8
  call void @_ZdlPv(i8* %254) #12
  br label %255

255:                                              ; preds = %252, %247
  %256 = bitcast %"struct.std::__1::__hash_node_base"* %229 to i8*
  call void @_ZdlPv(i8* %256) #12
  %257 = icmp eq %"struct.std::__1::__hash_node_base"* %231, null
  br i1 %257, label %258, label %228

258:                                              ; preds = %255, %225
  %259 = load %"struct.std::__1::__hash_node_base"**, %"struct.std::__1::__hash_node_base"*** %18, align 8
  store %"struct.std::__1::__hash_node_base"** null, %"struct.std::__1::__hash_node_base"*** %18, align 8
  %260 = icmp eq %"struct.std::__1::__hash_node_base"** %259, null
  br i1 %260, label %263, label %261

261:                                              ; preds = %258
  %262 = bitcast %"struct.std::__1::__hash_node_base"** %259 to i8*
  call void @_ZdlPv(i8* %262) #12
  br label %263

263:                                              ; preds = %258, %261
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %17) #11
  %264 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %265 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %264, i64 0, i32 1, i32 0
  %266 = load i8, i8* %265, align 1
  %267 = icmp slt i8 %266, 0
  br i1 %267, label %268, label %270

268:                                              ; preds = %263
  %269 = load i8*, i8** %16, align 8
  call void @_ZdlPv(i8* %269) #12
  br label %270

270:                                              ; preds = %263, %268
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #11
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10LinkHeaderD2Ev(%"class.blink::LinkHeader"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %23, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %8, label %22, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  br i1 %13, label %16, label %18

16:                                               ; preds = %9
  %17 = add i32 %15, -1
  store i32 %17, i32* %14, align 4
  br label %18

18:                                               ; preds = %16, %9
  %19 = phi i32 [ %17, %16 ], [ %15, %9 ]
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %18
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %7) #11
  br label %22

22:                                               ; preds = %21, %18, %5
  store i8 0, i8* %2, align 8
  br label %23

23:                                               ; preds = %1, %22
  %24 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 12, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %40, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = and i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 0
  %33 = load i32, i32* %32, align 4
  br i1 %31, label %34, label %36

34:                                               ; preds = %27
  %35 = add i32 %33, -1
  store i32 %35, i32* %32, align 4
  br label %36

36:                                               ; preds = %34, %27
  %37 = phi i32 [ %35, %34 ], [ %33, %27 ]
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %36
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %25) #11
  br label %40

40:                                               ; preds = %23, %36, %39
  %41 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 11, i32 0, i32 0
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8
  %43 = icmp eq %"class.WTF::StringImpl"* %42, null
  br i1 %43, label %57, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %50 = load i32, i32* %49, align 4
  br i1 %48, label %51, label %53

51:                                               ; preds = %44
  %52 = add i32 %50, -1
  store i32 %52, i32* %49, align 4
  br label %53

53:                                               ; preds = %51, %44
  %54 = phi i32 [ %52, %51 ], [ %50, %44 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %53
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %42) #11
  br label %57

57:                                               ; preds = %40, %53, %56
  %58 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 10, i32 0, i32 0
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %58, align 8
  %60 = icmp eq %"class.WTF::StringImpl"* %59, null
  br i1 %60, label %74, label %61

61:                                               ; preds = %57
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = load atomic i32, i32* %62 monotonic, align 4
  %64 = and i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %67 = load i32, i32* %66, align 4
  br i1 %65, label %68, label %70

68:                                               ; preds = %61
  %69 = add i32 %67, -1
  store i32 %69, i32* %66, align 4
  br label %70

70:                                               ; preds = %68, %61
  %71 = phi i32 [ %69, %68 ], [ %67, %61 ]
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %74

73:                                               ; preds = %70
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %59) #11
  br label %74

74:                                               ; preds = %57, %70, %73
  %75 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 9, i32 0, i32 0
  %76 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %75, align 8
  %77 = icmp eq %"class.WTF::StringImpl"* %76, null
  br i1 %77, label %91, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %76, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = load atomic i32, i32* %79 monotonic, align 4
  %81 = and i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %76, i64 0, i32 0
  %84 = load i32, i32* %83, align 4
  br i1 %82, label %85, label %87

85:                                               ; preds = %78
  %86 = add i32 %84, -1
  store i32 %86, i32* %83, align 4
  br label %87

87:                                               ; preds = %85, %78
  %88 = phi i32 [ %86, %85 ], [ %84, %78 ]
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %91

90:                                               ; preds = %87
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %76) #11
  br label %91

91:                                               ; preds = %74, %87, %90
  %92 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 8, i32 0, i32 0
  %93 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %92, align 8
  %94 = icmp eq %"class.WTF::StringImpl"* %93, null
  br i1 %94, label %108, label %95

95:                                               ; preds = %91
  %96 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %93, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %97 = load atomic i32, i32* %96 monotonic, align 4
  %98 = and i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %93, i64 0, i32 0
  %101 = load i32, i32* %100, align 4
  br i1 %99, label %102, label %104

102:                                              ; preds = %95
  %103 = add i32 %101, -1
  store i32 %103, i32* %100, align 4
  br label %104

104:                                              ; preds = %102, %95
  %105 = phi i32 [ %103, %102 ], [ %101, %95 ]
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %108

107:                                              ; preds = %104
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %93) #11
  br label %108

108:                                              ; preds = %91, %104, %107
  %109 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 7, i32 0, i32 0
  %110 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %109, align 8
  %111 = icmp eq %"class.WTF::StringImpl"* %110, null
  br i1 %111, label %125, label %112

112:                                              ; preds = %108
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %110, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %114 = load atomic i32, i32* %113 monotonic, align 4
  %115 = and i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %110, i64 0, i32 0
  %118 = load i32, i32* %117, align 4
  br i1 %116, label %119, label %121

119:                                              ; preds = %112
  %120 = add i32 %118, -1
  store i32 %120, i32* %117, align 4
  br label %121

121:                                              ; preds = %119, %112
  %122 = phi i32 [ %120, %119 ], [ %118, %112 ]
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %125

124:                                              ; preds = %121
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %110) #11
  br label %125

125:                                              ; preds = %108, %121, %124
  %126 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 6, i32 0, i32 0
  %127 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %126, align 8
  %128 = icmp eq %"class.WTF::StringImpl"* %127, null
  br i1 %128, label %142, label %129

129:                                              ; preds = %125
  %130 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %127, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %131 = load atomic i32, i32* %130 monotonic, align 4
  %132 = and i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %127, i64 0, i32 0
  %135 = load i32, i32* %134, align 4
  br i1 %133, label %136, label %138

136:                                              ; preds = %129
  %137 = add i32 %135, -1
  store i32 %137, i32* %134, align 4
  br label %138

138:                                              ; preds = %136, %129
  %139 = phi i32 [ %137, %136 ], [ %135, %129 ]
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %142

141:                                              ; preds = %138
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %127) #11
  br label %142

142:                                              ; preds = %125, %138, %141
  %143 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 5, i32 0, i32 0
  %144 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %143, align 8
  %145 = icmp eq %"class.WTF::StringImpl"* %144, null
  br i1 %145, label %159, label %146

146:                                              ; preds = %142
  %147 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %148 = load atomic i32, i32* %147 monotonic, align 4
  %149 = and i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 0
  %152 = load i32, i32* %151, align 4
  br i1 %150, label %153, label %155

153:                                              ; preds = %146
  %154 = add i32 %152, -1
  store i32 %154, i32* %151, align 4
  br label %155

155:                                              ; preds = %153, %146
  %156 = phi i32 [ %154, %153 ], [ %152, %146 ]
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %159

158:                                              ; preds = %155
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %144) #11
  br label %159

159:                                              ; preds = %142, %155, %158
  %160 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 4, i32 0, i32 0
  %161 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %160, align 8
  %162 = icmp eq %"class.WTF::StringImpl"* %161, null
  br i1 %162, label %176, label %163

163:                                              ; preds = %159
  %164 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %161, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %165 = load atomic i32, i32* %164 monotonic, align 4
  %166 = and i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %161, i64 0, i32 0
  %169 = load i32, i32* %168, align 4
  br i1 %167, label %170, label %172

170:                                              ; preds = %163
  %171 = add i32 %169, -1
  store i32 %171, i32* %168, align 4
  br label %172

172:                                              ; preds = %170, %163
  %173 = phi i32 [ %171, %170 ], [ %169, %163 ]
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %176

175:                                              ; preds = %172
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %161) #11
  br label %176

176:                                              ; preds = %159, %172, %175
  %177 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 3, i32 0, i32 0
  %178 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %177, align 8
  %179 = icmp eq %"class.WTF::StringImpl"* %178, null
  br i1 %179, label %193, label %180

180:                                              ; preds = %176
  %181 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %178, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %182 = load atomic i32, i32* %181 monotonic, align 4
  %183 = and i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %178, i64 0, i32 0
  %186 = load i32, i32* %185, align 4
  br i1 %184, label %187, label %189

187:                                              ; preds = %180
  %188 = add i32 %186, -1
  store i32 %188, i32* %185, align 4
  br label %189

189:                                              ; preds = %187, %180
  %190 = phi i32 [ %188, %187 ], [ %186, %180 ]
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %192, label %193

192:                                              ; preds = %189
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %178) #11
  br label %193

193:                                              ; preds = %176, %189, %192
  %194 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 2, i32 0, i32 0
  %195 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %194, align 8
  %196 = icmp eq %"class.WTF::StringImpl"* %195, null
  br i1 %196, label %210, label %197

197:                                              ; preds = %193
  %198 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %195, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %199 = load atomic i32, i32* %198 monotonic, align 4
  %200 = and i32 %199, 2
  %201 = icmp eq i32 %200, 0
  %202 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %195, i64 0, i32 0
  %203 = load i32, i32* %202, align 4
  br i1 %201, label %204, label %206

204:                                              ; preds = %197
  %205 = add i32 %203, -1
  store i32 %205, i32* %202, align 4
  br label %206

206:                                              ; preds = %204, %197
  %207 = phi i32 [ %205, %204 ], [ %203, %197 ]
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %209, label %210

209:                                              ; preds = %206
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %195) #11
  br label %210

210:                                              ; preds = %193, %206, %209
  %211 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 1, i32 0, i32 0
  %212 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %211, align 8
  %213 = icmp eq %"class.WTF::StringImpl"* %212, null
  br i1 %213, label %227, label %214

214:                                              ; preds = %210
  %215 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %212, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %216 = load atomic i32, i32* %215 monotonic, align 4
  %217 = and i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %212, i64 0, i32 0
  %220 = load i32, i32* %219, align 4
  br i1 %218, label %221, label %223

221:                                              ; preds = %214
  %222 = add i32 %220, -1
  store i32 %222, i32* %219, align 4
  br label %223

223:                                              ; preds = %221, %214
  %224 = phi i32 [ %222, %221 ], [ %220, %214 ]
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %226, label %227

226:                                              ; preds = %223
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %212) #11
  br label %227

227:                                              ; preds = %210, %223, %226
  %228 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %0, i64 0, i32 0, i32 0, i32 0
  %229 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %228, align 8
  %230 = icmp eq %"class.WTF::StringImpl"* %229, null
  br i1 %230, label %244, label %231

231:                                              ; preds = %227
  %232 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %229, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %233 = load atomic i32, i32* %232 monotonic, align 4
  %234 = and i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %229, i64 0, i32 0
  %237 = load i32, i32* %236, align 4
  br i1 %235, label %238, label %240

238:                                              ; preds = %231
  %239 = add i32 %237, -1
  store i32 %239, i32* %236, align 4
  br label %240

240:                                              ; preds = %238, %231
  %241 = phi i32 [ %239, %238 ], [ %237, %231 ]
  %242 = icmp eq i32 %241, 0
  br i1 %242, label %243, label %244

243:                                              ; preds = %240
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %229) #11
  br label %244

244:                                              ; preds = %227, %240, %243
  ret void
}

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare zeroext i1 @_ZN16link_header_util20ParseLinkHeaderValueENSt3__111__wrap_iterIPKcEES4_PNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPNS0_13unordered_mapISA_N4absl8optionalISA_EENS0_4hashISA_EENS0_8equal_toISA_EENS8_INS0_4pairIKSA_SF_EEEEEE(i8*, i8*, %"class.std::__1::basic_string"*, %"class.std::__1::unordered_map"*) local_unnamed_addr #2

declare void @_ZN3WTF6StringC1EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #2

declare zeroext i1 @_ZN4base26EqualsCaseInsensitiveASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8*, i64, i8*, i64) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #9

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

declare zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* dereferenceable(24), %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink10LinkHeaderELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS2_EEvOT_(%"class.WTF::Vector"*, %"class.blink::LinkHeader"* dereferenceable(128)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.blink::LinkHeader"*, %"class.blink::LinkHeader"** %6, align 8
  %8 = icmp ugt %"class.blink::LinkHeader"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %7, i64 %10
  %12 = icmp ugt %"class.blink::LinkHeader"* %11, %1
  br i1 %12, label %37, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %68, !prof !7

24:                                               ; preds = %13
  %25 = icmp eq %"class.blink::LinkHeader"* %7, null
  br i1 %25, label %26, label %35

26:                                               ; preds = %24
  %27 = zext i32 %22 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink10LinkHeaderEEEmm(i64 %27) #11
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10LinkHeaderEEEPKcv, i64 0, i64 0)) #11
  %30 = ptrtoint i8* %29 to i64
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %28, 7
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %29 to %"class.blink::LinkHeader"*
  br label %68

35:                                               ; preds = %24
  tail call void @_ZN3WTF6VectorIN5blink10LinkHeaderELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %22) #11
  %36 = load %"class.blink::LinkHeader"*, %"class.blink::LinkHeader"** %6, align 8
  br label %68

37:                                               ; preds = %9
  %38 = ptrtoint %"class.blink::LinkHeader"* %1 to i64
  %39 = ptrtoint %"class.blink::LinkHeader"* %7 to i64
  %40 = sub i64 %38, %39
  %41 = ashr exact i64 %40, 7
  %42 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = lshr i32 %43, 2
  %45 = add i32 %43, 1
  %46 = add i32 %45, %44
  %47 = icmp ugt i32 %46, 4
  %48 = select i1 %47, i32 %46, i32 4
  %49 = icmp ugt i32 %48, %5
  %50 = select i1 %49, i32 %48, i32 %5
  %51 = icmp ult i32 %43, %50
  br i1 %51, label %52, label %65, !prof !7

52:                                               ; preds = %37
  %53 = icmp eq %"class.blink::LinkHeader"* %7, null
  br i1 %53, label %54, label %63

54:                                               ; preds = %52
  %55 = zext i32 %50 to i64
  %56 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink10LinkHeaderEEEmm(i64 %55) #11
  %57 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %56, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10LinkHeaderEEEPKcv, i64 0, i64 0)) #11
  %58 = ptrtoint i8* %57 to i64
  %59 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %58, i64* %59 monotonic, align 8
  %60 = lshr i64 %56, 7
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %42, align 8
  %62 = bitcast i8* %57 to %"class.blink::LinkHeader"*
  br label %65

63:                                               ; preds = %52
  tail call void @_ZN3WTF6VectorIN5blink10LinkHeaderELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %50) #11
  %64 = load %"class.blink::LinkHeader"*, %"class.blink::LinkHeader"** %6, align 8
  br label %65

65:                                               ; preds = %37, %54, %63
  %66 = phi %"class.blink::LinkHeader"* [ %7, %37 ], [ %62, %54 ], [ %64, %63 ]
  %67 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %66, i64 %41
  br label %68

68:                                               ; preds = %35, %26, %13, %65
  %69 = phi %"class.blink::LinkHeader"* [ %66, %65 ], [ %7, %13 ], [ %34, %26 ], [ %36, %35 ]
  %70 = phi %"class.blink::LinkHeader"* [ %67, %65 ], [ %1, %13 ], [ %1, %26 ], [ %1, %35 ]
  %71 = load i32, i32* %3, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %69, i64 %72
  %74 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %70, i64 0, i32 0, i32 0, i32 0
  %75 = bitcast %"class.blink::LinkHeader"* %70 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = bitcast %"class.blink::LinkHeader"* %73 to i64*
  store i64 %76, i64* %77, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %74, align 8
  %78 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %69, i64 %72, i32 1
  %79 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %70, i64 0, i32 1
  %80 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %79, i64 0, i32 0, i32 0
  %81 = bitcast %"class.WTF::String"* %79 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = bitcast %"class.WTF::String"* %78 to i64*
  store i64 %82, i64* %83, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %80, align 8
  %84 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %69, i64 %72, i32 2
  %85 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %70, i64 0, i32 2
  %86 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %85, i64 0, i32 0, i32 0
  %87 = bitcast %"class.WTF::String"* %85 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = bitcast %"class.WTF::String"* %84 to i64*
  store i64 %88, i64* %89, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %86, align 8
  %90 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %69, i64 %72, i32 3
  %91 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %70, i64 0, i32 3
  %92 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %91, i64 0, i32 0, i32 0
  %93 = bitcast %"class.WTF::String"* %91 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = bitcast %"class.WTF::String"* %90 to i64*
  store i64 %94, i64* %95, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %92, align 8
  %96 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %69, i64 %72, i32 4
  %97 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %70, i64 0, i32 4
  %98 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %97, i64 0, i32 0, i32 0
  %99 = bitcast %"class.WTF::String"* %97 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = bitcast %"class.WTF::String"* %96 to i64*
  store i64 %100, i64* %101, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %98, align 8
  %102 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %69, i64 %72, i32 5
  %103 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %70, i64 0, i32 5
  %104 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %103, i64 0, i32 0, i32 0
  %105 = bitcast %"class.WTF::String"* %103 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = bitcast %"class.WTF::String"* %102 to i64*
  store i64 %106, i64* %107, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %104, align 8
  %108 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %69, i64 %72, i32 6
  %109 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %70, i64 0, i32 6
  %110 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %109, i64 0, i32 0, i32 0
  %111 = bitcast %"class.WTF::String"* %109 to i64*
  %112 = load i64, i64* %111, align 8
  %113 = bitcast %"class.WTF::String"* %108 to i64*
  store i64 %112, i64* %113, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %110, align 8
  %114 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %69, i64 %72, i32 7
  %115 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %70, i64 0, i32 7
  %116 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %115, i64 0, i32 0, i32 0
  %117 = bitcast %"class.WTF::String"* %115 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"class.WTF::String"* %114 to i64*
  store i64 %118, i64* %119, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %116, align 8
  %120 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %69, i64 %72, i32 8
  %121 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %70, i64 0, i32 8
  %122 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %121, i64 0, i32 0, i32 0
  %123 = bitcast %"class.WTF::String"* %121 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"class.WTF::String"* %120 to i64*
  store i64 %124, i64* %125, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %122, align 8
  %126 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %69, i64 %72, i32 9
  %127 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %70, i64 0, i32 9
  %128 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %127, i64 0, i32 0, i32 0
  %129 = bitcast %"class.WTF::String"* %127 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = bitcast %"class.WTF::String"* %126 to i64*
  store i64 %130, i64* %131, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %128, align 8
  %132 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %69, i64 %72, i32 10
  %133 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %70, i64 0, i32 10
  %134 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %133, i64 0, i32 0, i32 0
  %135 = bitcast %"class.WTF::String"* %133 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = bitcast %"class.WTF::String"* %132 to i64*
  store i64 %136, i64* %137, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %134, align 8
  %138 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %69, i64 %72, i32 11
  %139 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %70, i64 0, i32 11
  %140 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %139, i64 0, i32 0, i32 0
  %141 = bitcast %"class.WTF::String"* %139 to i64*
  %142 = load i64, i64* %141, align 8
  %143 = bitcast %"class.WTF::String"* %138 to i64*
  store i64 %142, i64* %143, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %140, align 8
  %144 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %69, i64 %72, i32 12
  %145 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %70, i64 0, i32 12
  %146 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %145, i64 0, i32 0, i32 0
  %147 = bitcast %"class.WTF::String"* %145 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = bitcast %"class.WTF::String"* %144 to i64*
  store i64 %148, i64* %149, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %146, align 8
  %150 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %69, i64 %72, i32 13, i32 0, i32 0, i32 0, i32 0
  %151 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %70, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %150, i8 0, i64 16, i1 false) #11
  %152 = load i8, i8* %151, align 8, !range !2
  %153 = icmp eq i8 %152, 0
  br i1 %153, label %161, label %154

154:                                              ; preds = %68
  %155 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %70, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0
  %156 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %69, i64 %72, i32 13, i32 0, i32 0, i32 0, i32 1
  %157 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %155, i64 0, i32 0, i32 0
  %158 = bitcast %"class.WTF::String"* %155 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = bitcast %union.anon* %156 to i64*
  store i64 %159, i64* %160, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %157, align 8
  store i8 1, i8* %150, align 8
  br label %161

161:                                              ; preds = %68, %154
  %162 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %69, i64 %72, i32 14
  %163 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %70, i64 0, i32 14
  %164 = load i8, i8* %163, align 8, !range !2
  store i8 %164, i8* %162, align 8
  %165 = load i32, i32* %3, align 4
  %166 = add i32 %165, 1
  store i32 %166, i32* %3, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink10LinkHeaderELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %113

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.blink::LinkHeader"*, %"class.blink::LinkHeader"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %6, i64 %9
  %11 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %11 monotonic, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %8, 0
  br i1 %13, label %111, label %14

14:                                               ; preds = %4, %104
  %15 = phi %"class.blink::LinkHeader"* [ %109, %104 ], [ %6, %4 ]
  %16 = phi %"class.blink::LinkHeader"* [ %108, %104 ], [ null, %4 ]
  %17 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %15, i64 0, i32 0, i32 0, i32 0
  %18 = bitcast %"class.blink::LinkHeader"* %15 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.blink::LinkHeader"* %16 to i64*
  store i64 %19, i64* %20, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %17, align 8
  %21 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %16, i64 0, i32 1
  %22 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %15, i64 0, i32 1
  %23 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %22, i64 0, i32 0, i32 0
  %24 = bitcast %"class.WTF::String"* %22 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.WTF::String"* %21 to i64*
  store i64 %25, i64* %26, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %23, align 8
  %27 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %16, i64 0, i32 2
  %28 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %15, i64 0, i32 2
  %29 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %28, i64 0, i32 0, i32 0
  %30 = bitcast %"class.WTF::String"* %28 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = bitcast %"class.WTF::String"* %27 to i64*
  store i64 %31, i64* %32, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %29, align 8
  %33 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %16, i64 0, i32 3
  %34 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %15, i64 0, i32 3
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %34, i64 0, i32 0, i32 0
  %36 = bitcast %"class.WTF::String"* %34 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = bitcast %"class.WTF::String"* %33 to i64*
  store i64 %37, i64* %38, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %35, align 8
  %39 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %16, i64 0, i32 4
  %40 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %15, i64 0, i32 4
  %41 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %40, i64 0, i32 0, i32 0
  %42 = bitcast %"class.WTF::String"* %40 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = bitcast %"class.WTF::String"* %39 to i64*
  store i64 %43, i64* %44, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %41, align 8
  %45 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %16, i64 0, i32 5
  %46 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %15, i64 0, i32 5
  %47 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %46, i64 0, i32 0, i32 0
  %48 = bitcast %"class.WTF::String"* %46 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = bitcast %"class.WTF::String"* %45 to i64*
  store i64 %49, i64* %50, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %47, align 8
  %51 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %16, i64 0, i32 6
  %52 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %15, i64 0, i32 6
  %53 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %52, i64 0, i32 0, i32 0
  %54 = bitcast %"class.WTF::String"* %52 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = bitcast %"class.WTF::String"* %51 to i64*
  store i64 %55, i64* %56, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %53, align 8
  %57 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %16, i64 0, i32 7
  %58 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %15, i64 0, i32 7
  %59 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %58, i64 0, i32 0, i32 0
  %60 = bitcast %"class.WTF::String"* %58 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = bitcast %"class.WTF::String"* %57 to i64*
  store i64 %61, i64* %62, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %59, align 8
  %63 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %16, i64 0, i32 8
  %64 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %15, i64 0, i32 8
  %65 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %64, i64 0, i32 0, i32 0
  %66 = bitcast %"class.WTF::String"* %64 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast %"class.WTF::String"* %63 to i64*
  store i64 %67, i64* %68, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %65, align 8
  %69 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %16, i64 0, i32 9
  %70 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %15, i64 0, i32 9
  %71 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %70, i64 0, i32 0, i32 0
  %72 = bitcast %"class.WTF::String"* %70 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = bitcast %"class.WTF::String"* %69 to i64*
  store i64 %73, i64* %74, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %71, align 8
  %75 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %16, i64 0, i32 10
  %76 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %15, i64 0, i32 10
  %77 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %76, i64 0, i32 0, i32 0
  %78 = bitcast %"class.WTF::String"* %76 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = bitcast %"class.WTF::String"* %75 to i64*
  store i64 %79, i64* %80, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %77, align 8
  %81 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %16, i64 0, i32 11
  %82 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %15, i64 0, i32 11
  %83 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %82, i64 0, i32 0, i32 0
  %84 = bitcast %"class.WTF::String"* %82 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = bitcast %"class.WTF::String"* %81 to i64*
  store i64 %85, i64* %86, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %83, align 8
  %87 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %16, i64 0, i32 12
  %88 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %15, i64 0, i32 12
  %89 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %88, i64 0, i32 0, i32 0
  %90 = bitcast %"class.WTF::String"* %88 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = bitcast %"class.WTF::String"* %87 to i64*
  store i64 %91, i64* %92, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %89, align 8
  %93 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %16, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  %94 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %15, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %93, i8 0, i64 16, i1 false) #11
  %95 = load i8, i8* %94, align 8, !range !2
  %96 = icmp eq i8 %95, 0
  br i1 %96, label %104, label %97

97:                                               ; preds = %14
  %98 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %15, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0
  %99 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %16, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1
  %100 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %98, i64 0, i32 0, i32 0
  %101 = bitcast %"class.WTF::String"* %98 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = bitcast %union.anon* %99 to i64*
  store i64 %102, i64* %103, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %100, align 8
  store i8 1, i8* %93, align 8
  br label %104

104:                                              ; preds = %14, %97
  %105 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %16, i64 0, i32 14
  %106 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %15, i64 0, i32 14
  %107 = load i8, i8* %106, align 8, !range !2
  store i8 %107, i8* %105, align 8
  tail call void @_ZN5blink10LinkHeaderD2Ev(%"class.blink::LinkHeader"* %15) #11
  %108 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %16, i64 1
  %109 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %15, i64 1
  %110 = icmp eq %"class.blink::LinkHeader"* %109, %10
  br i1 %110, label %111, label %14

111:                                              ; preds = %104, %4
  %112 = bitcast %"class.blink::LinkHeader"* %6 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %112) #11
  br label %235

113:                                              ; preds = %2
  %114 = zext i32 %1 to i64
  %115 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink10LinkHeaderEEEmm(i64 %114) #11
  %116 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %115, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink10LinkHeaderEEEPKcv, i64 0, i64 0)) #11
  %117 = lshr i64 %115, 7
  %118 = ptrtoint i8* %116 to i64
  %119 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %120 = load %"class.blink::LinkHeader"*, %"class.blink::LinkHeader"** %119, align 8
  %121 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %122 = load i32, i32* %121, align 4
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %120, i64 %123
  %125 = icmp eq i32 %122, 0
  br i1 %125, label %126, label %128

126:                                              ; preds = %113
  %127 = bitcast %"class.blink::LinkHeader"* %120 to i8*
  br label %230

128:                                              ; preds = %113
  %129 = bitcast i8* %116 to %"class.blink::LinkHeader"*
  br label %130

130:                                              ; preds = %128, %220
  %131 = phi %"class.blink::LinkHeader"* [ %225, %220 ], [ %120, %128 ]
  %132 = phi %"class.blink::LinkHeader"* [ %224, %220 ], [ %129, %128 ]
  %133 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %131, i64 0, i32 0, i32 0, i32 0
  %134 = bitcast %"class.blink::LinkHeader"* %131 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = bitcast %"class.blink::LinkHeader"* %132 to i64*
  store i64 %135, i64* %136, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %133, align 8
  %137 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %132, i64 0, i32 1
  %138 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %131, i64 0, i32 1
  %139 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %138, i64 0, i32 0, i32 0
  %140 = bitcast %"class.WTF::String"* %138 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = bitcast %"class.WTF::String"* %137 to i64*
  store i64 %141, i64* %142, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %139, align 8
  %143 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %132, i64 0, i32 2
  %144 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %131, i64 0, i32 2
  %145 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %144, i64 0, i32 0, i32 0
  %146 = bitcast %"class.WTF::String"* %144 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = bitcast %"class.WTF::String"* %143 to i64*
  store i64 %147, i64* %148, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %145, align 8
  %149 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %132, i64 0, i32 3
  %150 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %131, i64 0, i32 3
  %151 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %150, i64 0, i32 0, i32 0
  %152 = bitcast %"class.WTF::String"* %150 to i64*
  %153 = load i64, i64* %152, align 8
  %154 = bitcast %"class.WTF::String"* %149 to i64*
  store i64 %153, i64* %154, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %151, align 8
  %155 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %132, i64 0, i32 4
  %156 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %131, i64 0, i32 4
  %157 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %156, i64 0, i32 0, i32 0
  %158 = bitcast %"class.WTF::String"* %156 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = bitcast %"class.WTF::String"* %155 to i64*
  store i64 %159, i64* %160, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %157, align 8
  %161 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %132, i64 0, i32 5
  %162 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %131, i64 0, i32 5
  %163 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %162, i64 0, i32 0, i32 0
  %164 = bitcast %"class.WTF::String"* %162 to i64*
  %165 = load i64, i64* %164, align 8
  %166 = bitcast %"class.WTF::String"* %161 to i64*
  store i64 %165, i64* %166, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %163, align 8
  %167 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %132, i64 0, i32 6
  %168 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %131, i64 0, i32 6
  %169 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %168, i64 0, i32 0, i32 0
  %170 = bitcast %"class.WTF::String"* %168 to i64*
  %171 = load i64, i64* %170, align 8
  %172 = bitcast %"class.WTF::String"* %167 to i64*
  store i64 %171, i64* %172, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %169, align 8
  %173 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %132, i64 0, i32 7
  %174 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %131, i64 0, i32 7
  %175 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %174, i64 0, i32 0, i32 0
  %176 = bitcast %"class.WTF::String"* %174 to i64*
  %177 = load i64, i64* %176, align 8
  %178 = bitcast %"class.WTF::String"* %173 to i64*
  store i64 %177, i64* %178, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %175, align 8
  %179 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %132, i64 0, i32 8
  %180 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %131, i64 0, i32 8
  %181 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %180, i64 0, i32 0, i32 0
  %182 = bitcast %"class.WTF::String"* %180 to i64*
  %183 = load i64, i64* %182, align 8
  %184 = bitcast %"class.WTF::String"* %179 to i64*
  store i64 %183, i64* %184, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %181, align 8
  %185 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %132, i64 0, i32 9
  %186 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %131, i64 0, i32 9
  %187 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %186, i64 0, i32 0, i32 0
  %188 = bitcast %"class.WTF::String"* %186 to i64*
  %189 = load i64, i64* %188, align 8
  %190 = bitcast %"class.WTF::String"* %185 to i64*
  store i64 %189, i64* %190, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %187, align 8
  %191 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %132, i64 0, i32 10
  %192 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %131, i64 0, i32 10
  %193 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %192, i64 0, i32 0, i32 0
  %194 = bitcast %"class.WTF::String"* %192 to i64*
  %195 = load i64, i64* %194, align 8
  %196 = bitcast %"class.WTF::String"* %191 to i64*
  store i64 %195, i64* %196, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %193, align 8
  %197 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %132, i64 0, i32 11
  %198 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %131, i64 0, i32 11
  %199 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %198, i64 0, i32 0, i32 0
  %200 = bitcast %"class.WTF::String"* %198 to i64*
  %201 = load i64, i64* %200, align 8
  %202 = bitcast %"class.WTF::String"* %197 to i64*
  store i64 %201, i64* %202, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %199, align 8
  %203 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %132, i64 0, i32 12
  %204 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %131, i64 0, i32 12
  %205 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %204, i64 0, i32 0, i32 0
  %206 = bitcast %"class.WTF::String"* %204 to i64*
  %207 = load i64, i64* %206, align 8
  %208 = bitcast %"class.WTF::String"* %203 to i64*
  store i64 %207, i64* %208, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %205, align 8
  %209 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %132, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  %210 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %131, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %209, i8 0, i64 16, i1 false) #11
  %211 = load i8, i8* %210, align 8, !range !2
  %212 = icmp eq i8 %211, 0
  br i1 %212, label %220, label %213

213:                                              ; preds = %130
  %214 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %131, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0
  %215 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %132, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1
  %216 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %214, i64 0, i32 0, i32 0
  %217 = bitcast %"class.WTF::String"* %214 to i64*
  %218 = load i64, i64* %217, align 8
  %219 = bitcast %union.anon* %215 to i64*
  store i64 %218, i64* %219, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %216, align 8
  store i8 1, i8* %209, align 8
  br label %220

220:                                              ; preds = %130, %213
  %221 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %132, i64 0, i32 14
  %222 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %131, i64 0, i32 14
  %223 = load i8, i8* %222, align 8, !range !2
  store i8 %223, i8* %221, align 8
  tail call void @_ZN5blink10LinkHeaderD2Ev(%"class.blink::LinkHeader"* %131) #11
  %224 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %132, i64 1
  %225 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %131, i64 1
  %226 = icmp eq %"class.blink::LinkHeader"* %225, %124
  br i1 %226, label %227, label %130

227:                                              ; preds = %220
  %228 = bitcast %"class.WTF::Vector"* %0 to i8**
  %229 = load i8*, i8** %228, align 8
  br label %230

230:                                              ; preds = %126, %227
  %231 = phi i8* [ %229, %227 ], [ %127, %126 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %231) #11
  %232 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %118, i64* %232 monotonic, align 8
  %233 = trunc i64 %117 to i32
  %234 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %233, i32* %234, align 8
  br label %235

235:                                              ; preds = %230, %111
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink10LinkHeaderEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 16760832
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #11
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 16760832) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.21, i64 0, i64 0), i8* %11, i8* %12) #11
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.22, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #11
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #11
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #11
  %20 = shl i64 %0, 7
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #11
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!5}
!5 = distinct !{!5, !6, !"_ZNKR4absl8optionalINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE8value_orIRA1_KcEES7_OT_: argument 0"}
!6 = distinct !{!6, !"_ZNKR4absl8optionalINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE8value_orIRA1_KcEES7_OT_"}
!7 = !{!"branch_weights", i32 2000, i32 1}
