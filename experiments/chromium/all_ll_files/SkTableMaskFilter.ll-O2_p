; ModuleID = '../../third_party/skia/src/effects/SkTableMaskFilter.cpp'
source_filename = "../../third_party/skia/src/effects/SkTableMaskFilter.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkTableMaskFilterImpl = type { %class.SkMaskFilterBase.base, [256 x i8], [4 x i8] }
%class.SkMaskFilterBase.base = type { %class.SkMaskFilter.base }
%class.SkMaskFilter.base = type { %class.SkFlattenable.base }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkMask = type <{ i8*, %struct.SkIRect, i32, i8, [3 x i8] }>
%struct.SkIRect = type { i32, i32, i32, i32 }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkIPoint = type { i32, i32 }
%class.SkWriteBuffer = type { i32 (...)**, %struct.SkSerialProcs }
%struct.SkSerialProcs = type { void (%class.sk_sp*, %class.SkPicture*, i8*)*, i8*, void (%class.sk_sp*, %class.SkImage*, i8*)*, i8*, void (%class.sk_sp*, %class.SkTypeface*, i8*)*, i8* }
%class.sk_sp = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.1", [7 x i8] }>
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl.3" }
%"struct.std::__1::__cxx_atomic_impl.3" = type { %"struct.std::__1::__cxx_atomic_base_impl.4" }
%"struct.std::__1::__cxx_atomic_base_impl.4" = type { i8 }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.5, i32, i32 }
%class.sk_sp.5 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt.6, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt.6 = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.7" }
%"struct.std::__1::atomic.7" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__cxx_atomic_impl.10" }
%"struct.std::__1::__cxx_atomic_impl.10" = type { %"struct.std::__1::__cxx_atomic_base_impl.11" }
%"struct.std::__1::__cxx_atomic_base_impl.11" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.sk_sp.16 = type { %class.SkFlattenable* }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkReadBuffer = type <{ i8*, i8*, i8*, %class.SkTHashMap, i32, [4 x i8], %class.sk_sp.13*, i32, [4 x i8], {}**, i32, [4 x i8], %struct.SkDeserialProcs, i8, [7 x i8] }>
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, void (%class.sk_sp.16*, %class.SkReadBuffer*)* }
%class.sk_sp.13 = type { %class.SkTypeface* }
%struct.SkDeserialProcs = type { {}*, i8*, {}*, i8*, void (%class.sk_sp.13*, i8*, i64, i8*)*, i8* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkMaskFilterBase = type { %class.SkMaskFilter.base, [4 x i8] }
%class.GrStyledShape = type opaque
%class.GrRecordingContext = type opaque
%class.GrSurfaceDrawContext = type opaque
%class.GrPaint = type opaque
%class.GrClip = type opaque
%"struct.SkMaskFilterBase::BlurRec" = type { float, i32 }
%"class.SkMaskFilterBase::NinePatch" = type { %struct.SkMask, %struct.SkIRect, %struct.SkIPoint, %class.SkCachedData* }
%class.SkCachedData = type opaque
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkPoint = type { float, float }

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZNK21SkTableMaskFilterImpl10getFactoryEv = comdat any

$_ZNK21SkTableMaskFilterImpl11getTypeNameEv = comdat any

$_ZNK12SkMaskFilter18getFlattenableTypeEv = comdat any

@_ZTV21SkTableMaskFilterImpl = hidden unnamed_addr constant { [20 x i8*] } { [20 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkTableMaskFilterImpl*)* @_ZN21SkTableMaskFilterImplD2Ev to i8*), i8* bitcast (void (%class.SkTableMaskFilterImpl*)* @_ZN21SkTableMaskFilterImplD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%class.sk_sp.16*, %class.SkReadBuffer*)* (%class.SkTableMaskFilterImpl*)* @_ZNK21SkTableMaskFilterImpl10getFactoryEv to i8*), i8* bitcast (i8* (%class.SkTableMaskFilterImpl*)* @_ZNK21SkTableMaskFilterImpl11getTypeNameEv to i8*), i8* bitcast (void (%class.SkTableMaskFilterImpl*, %class.SkWriteBuffer*)* @_ZNK21SkTableMaskFilterImpl7flattenER13SkWriteBuffer to i8*), i8* bitcast (i32 (%class.SkMaskFilter*)* @_ZNK12SkMaskFilter18getFlattenableTypeEv to i8*), i8* bitcast (i8 (%class.SkTableMaskFilterImpl*)* @_ZNK21SkTableMaskFilterImpl9getFormatEv to i8*), i8* bitcast (i1 (%class.SkTableMaskFilterImpl*, %struct.SkMask*, %struct.SkMask*, %class.SkMatrix*, %struct.SkIPoint*)* @_ZNK21SkTableMaskFilterImpl10filterMaskEP6SkMaskRKS0_RK8SkMatrixP8SkIPoint to i8*), i8* bitcast (i1 (%class.SkMaskFilterBase*, %class.GrStyledShape*, %struct.SkIRect*, %struct.SkIRect*, %class.SkMatrix*, %struct.SkIRect*)* @_ZNK16SkMaskFilterBase16canFilterMaskGPUERK13GrStyledShapeRK7SkIRectS5_RK8SkMatrixPS3_ to i8*), i8* bitcast (i1 (%class.SkMaskFilterBase*, %class.GrRecordingContext*, %class.GrSurfaceDrawContext*, %class.GrPaint*, %class.GrClip*, %class.SkMatrix*, %class.GrStyledShape*)* @_ZNK16SkMaskFilterBase19directFilterMaskGPUEP18GrRecordingContextP20GrSurfaceDrawContextO7GrPaintPK6GrClipRK8SkMatrixRK13GrStyledShape to i8*), i8* bitcast (void ()* @_ZNK16SkMaskFilterBase13filterMaskGPUEP18GrRecordingContext18GrSurfaceProxyView11GrColorType11SkAlphaTypeRK8SkMatrixRK7SkIRect to i8*), i8* bitcast (void (%class.SkMaskFilterBase*, %struct.SkRect*, %struct.SkRect*)* @_ZNK16SkMaskFilterBase17computeFastBoundsERK6SkRectPS0_ to i8*), i8* bitcast (i1 (%class.SkMaskFilterBase*, %"struct.SkMaskFilterBase::BlurRec"*)* @_ZNK16SkMaskFilterBase7asABlurEPNS_7BlurRecE to i8*), i8* bitcast (void ()* @_ZNK16SkMaskFilterBase21onAsFragmentProcessorERK8GrFPArgs to i8*), i8* bitcast (i1 (%class.SkMaskFilterBase*)* @_ZNK16SkMaskFilterBase22onHasFragmentProcessorEv to i8*), i8* bitcast (i32 (%class.SkMaskFilterBase*, %struct.SkRect*, i32, %class.SkMatrix*, %struct.SkIRect*, %"class.SkMaskFilterBase::NinePatch"*)* @_ZNK16SkMaskFilterBase17filterRectsToNineEPK6SkRectiRK8SkMatrixRK7SkIRectPNS_9NinePatchE to i8*), i8* bitcast (i32 (%class.SkMaskFilterBase*, %class.SkRRect*, %class.SkMatrix*, %struct.SkIRect*, %"class.SkMaskFilterBase::NinePatch"*)* @_ZNK16SkMaskFilterBase17filterRRectToNineERK7SkRRectRK8SkMatrixRK7SkIRectPNS_9NinePatchE to i8*)] }, align 8
@.str = private unnamed_addr constant [22 x i8] c"SkTableMaskFilterImpl\00", align 1

@_ZN21SkTableMaskFilterImplC1Ev = hidden unnamed_addr alias void (%class.SkTableMaskFilterImpl*), void (%class.SkTableMaskFilterImpl*)* @_ZN21SkTableMaskFilterImplC2Ev
@_ZN21SkTableMaskFilterImplC1EPKh = hidden unnamed_addr alias void (%class.SkTableMaskFilterImpl*, i8*), void (%class.SkTableMaskFilterImpl*, i8*)* @_ZN21SkTableMaskFilterImplC2EPKh
@_ZN21SkTableMaskFilterImplD1Ev = hidden unnamed_addr alias void (%class.SkTableMaskFilterImpl*), void (%class.SkTableMaskFilterImpl*)* @_ZN21SkTableMaskFilterImplD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN21SkTableMaskFilterImplC2Ev(%class.SkTableMaskFilterImpl* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %2, align 4
  %3 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV21SkTableMaskFilterImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 0
  %5 = bitcast i8* %4 to <16 x i8>*
  store <16 x i8> <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, <16 x i8>* %5, align 1
  %6 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 16
  %7 = bitcast i8* %6 to <16 x i8>*
  store <16 x i8> <i8 16, i8 17, i8 18, i8 19, i8 20, i8 21, i8 22, i8 23, i8 24, i8 25, i8 26, i8 27, i8 28, i8 29, i8 30, i8 31>, <16 x i8>* %7, align 1
  %8 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 32
  %9 = bitcast i8* %8 to <16 x i8>*
  store <16 x i8> <i8 32, i8 33, i8 34, i8 35, i8 36, i8 37, i8 38, i8 39, i8 40, i8 41, i8 42, i8 43, i8 44, i8 45, i8 46, i8 47>, <16 x i8>* %9, align 1
  %10 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 48
  %11 = bitcast i8* %10 to <16 x i8>*
  store <16 x i8> <i8 48, i8 49, i8 50, i8 51, i8 52, i8 53, i8 54, i8 55, i8 56, i8 57, i8 58, i8 59, i8 60, i8 61, i8 62, i8 63>, <16 x i8>* %11, align 1
  %12 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 64
  %13 = bitcast i8* %12 to <16 x i8>*
  store <16 x i8> <i8 64, i8 65, i8 66, i8 67, i8 68, i8 69, i8 70, i8 71, i8 72, i8 73, i8 74, i8 75, i8 76, i8 77, i8 78, i8 79>, <16 x i8>* %13, align 1
  %14 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 80
  %15 = bitcast i8* %14 to <16 x i8>*
  store <16 x i8> <i8 80, i8 81, i8 82, i8 83, i8 84, i8 85, i8 86, i8 87, i8 88, i8 89, i8 90, i8 91, i8 92, i8 93, i8 94, i8 95>, <16 x i8>* %15, align 1
  %16 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 96
  %17 = bitcast i8* %16 to <16 x i8>*
  store <16 x i8> <i8 96, i8 97, i8 98, i8 99, i8 100, i8 101, i8 102, i8 103, i8 104, i8 105, i8 106, i8 107, i8 108, i8 109, i8 110, i8 111>, <16 x i8>* %17, align 1
  %18 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 112
  %19 = bitcast i8* %18 to <16 x i8>*
  store <16 x i8> <i8 112, i8 113, i8 114, i8 115, i8 116, i8 117, i8 118, i8 119, i8 120, i8 121, i8 122, i8 123, i8 124, i8 125, i8 126, i8 127>, <16 x i8>* %19, align 1
  %20 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 128
  %21 = bitcast i8* %20 to <16 x i8>*
  store <16 x i8> <i8 -128, i8 -127, i8 -126, i8 -125, i8 -124, i8 -123, i8 -122, i8 -121, i8 -120, i8 -119, i8 -118, i8 -117, i8 -116, i8 -115, i8 -114, i8 -113>, <16 x i8>* %21, align 1
  %22 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 144
  %23 = bitcast i8* %22 to <16 x i8>*
  store <16 x i8> <i8 -112, i8 -111, i8 -110, i8 -109, i8 -108, i8 -107, i8 -106, i8 -105, i8 -104, i8 -103, i8 -102, i8 -101, i8 -100, i8 -99, i8 -98, i8 -97>, <16 x i8>* %23, align 1
  %24 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 160
  %25 = bitcast i8* %24 to <16 x i8>*
  store <16 x i8> <i8 -96, i8 -95, i8 -94, i8 -93, i8 -92, i8 -91, i8 -90, i8 -89, i8 -88, i8 -87, i8 -86, i8 -85, i8 -84, i8 -83, i8 -82, i8 -81>, <16 x i8>* %25, align 1
  %26 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 176
  %27 = bitcast i8* %26 to <16 x i8>*
  store <16 x i8> <i8 -80, i8 -79, i8 -78, i8 -77, i8 -76, i8 -75, i8 -74, i8 -73, i8 -72, i8 -71, i8 -70, i8 -69, i8 -68, i8 -67, i8 -66, i8 -65>, <16 x i8>* %27, align 1
  %28 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 192
  %29 = bitcast i8* %28 to <16 x i8>*
  store <16 x i8> <i8 -64, i8 -63, i8 -62, i8 -61, i8 -60, i8 -59, i8 -58, i8 -57, i8 -56, i8 -55, i8 -54, i8 -53, i8 -52, i8 -51, i8 -50, i8 -49>, <16 x i8>* %29, align 1
  %30 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 208
  %31 = bitcast i8* %30 to <16 x i8>*
  store <16 x i8> <i8 -48, i8 -47, i8 -46, i8 -45, i8 -44, i8 -43, i8 -42, i8 -41, i8 -40, i8 -39, i8 -38, i8 -37, i8 -36, i8 -35, i8 -34, i8 -33>, <16 x i8>* %31, align 1
  %32 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 224
  %33 = bitcast i8* %32 to <16 x i8>*
  store <16 x i8> <i8 -32, i8 -31, i8 -30, i8 -29, i8 -28, i8 -27, i8 -26, i8 -25, i8 -24, i8 -23, i8 -22, i8 -21, i8 -20, i8 -19, i8 -18, i8 -17>, <16 x i8>* %33, align 1
  %34 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 240
  %35 = bitcast i8* %34 to <16 x i8>*
  store <16 x i8> <i8 -16, i8 -15, i8 -14, i8 -13, i8 -12, i8 -11, i8 -10, i8 -9, i8 -8, i8 -7, i8 -6, i8 -5, i8 -4, i8 -3, i8 -2, i8 -1>, <16 x i8>* %35, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN21SkTableMaskFilterImplC2EPKh(%class.SkTableMaskFilterImpl* nocapture, i8* nocapture readonly) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %3, align 4
  %4 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV21SkTableMaskFilterImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5, i8* align 1 %1, i64 256, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN21SkTableMaskFilterImplD2Ev(%class.SkTableMaskFilterImpl* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN21SkTableMaskFilterImplD0Ev(%class.SkTableMaskFilterImpl*) unnamed_addr #2 align 2 {
  %2 = bitcast %class.SkTableMaskFilterImpl* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK21SkTableMaskFilterImpl10filterMaskEP6SkMaskRKS0_RK8SkMatrixP8SkIPoint(%class.SkTableMaskFilterImpl* nocapture readonly, %struct.SkMask*, %struct.SkMask* nocapture readonly dereferenceable(32), %class.SkMatrix* nocapture readnone dereferenceable(40), %struct.SkIPoint*) unnamed_addr #2 align 2 {
  %6 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 3
  %7 = load i8, i8* %6, align 4
  %8 = icmp eq i8 %7, 1
  br i1 %8, label %9, label %131

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1
  %11 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1
  %12 = bitcast %struct.SkIRect* %11 to i8*
  %13 = bitcast %struct.SkIRect* %10 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 4 %13, i64 16, i1 false)
  %14 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %11, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = add i32 %15, 3
  %19 = sub i32 %18, %17
  %20 = and i32 %19, -4
  %21 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 2
  store i32 %20, i32* %21, align 8
  %22 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 3
  store i8 1, i8* %22, align 4
  %23 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 0
  store i8* null, i8** %23, align 8
  %24 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %126, label %27

27:                                               ; preds = %9
  %28 = tail call i64 @_ZNK6SkMask16computeImageSizeEv(%struct.SkMask* %1) #10
  %29 = tail call i8* @_ZN6SkMask10AllocImageEmNS_9AllocTypeE(i64 %28, i32 0) #10
  store i8* %29, i8** %23, align 8
  %30 = load i32, i32* %14, align 4
  %31 = load i32, i32* %16, align 4
  %32 = sub i32 %30, %31
  %33 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 3
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = sub i32 %34, %36
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %39, label %126

39:                                               ; preds = %27
  %40 = load i32, i32* %21, align 8
  %41 = load i8*, i8** %24, align 8
  %42 = icmp sgt i32 %32, 0
  %43 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 2
  %44 = sext i32 %32 to i64
  %45 = xor i32 %32, -1
  %46 = add i32 %40, %45
  %47 = icmp sgt i32 %46, -1
  %48 = add i32 %31, %40
  %49 = xor i32 %30, -1
  %50 = add i32 %48, %49
  %51 = icmp slt i32 %46, 0
  %52 = select i1 %51, i32 %46, i32 0
  %53 = sub i32 %50, %52
  %54 = zext i32 %53 to i64
  %55 = add nuw nsw i64 %54, 1
  %56 = add nsw i64 %44, -1
  %57 = and i64 %44, 3
  %58 = icmp eq i64 %57, 0
  %59 = icmp ult i64 %56, 3
  br label %63

60:                                               ; preds = %120, %83
  %61 = phi i8* [ %87, %83 ], [ %123, %120 ]
  %62 = icmp sgt i32 %67, 0
  br i1 %62, label %63, label %126

63:                                               ; preds = %39, %60
  %64 = phi i32 [ %37, %39 ], [ %67, %60 ]
  %65 = phi i8* [ %29, %39 ], [ %61, %60 ]
  %66 = phi i8* [ %41, %39 ], [ %86, %60 ]
  %67 = add nsw i32 %64, -1
  br i1 %42, label %68, label %83

68:                                               ; preds = %63
  br i1 %58, label %81, label %69

69:                                               ; preds = %68, %69
  %70 = phi i64 [ %72, %69 ], [ %44, %68 ]
  %71 = phi i64 [ %79, %69 ], [ %57, %68 ]
  %72 = add nsw i64 %70, -1
  %73 = getelementptr inbounds i8, i8* %66, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i64
  %76 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = getelementptr inbounds i8, i8* %65, i64 %72
  store i8 %77, i8* %78, align 1
  %79 = add i64 %71, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %69, !llvm.loop !2

81:                                               ; preds = %69, %68
  %82 = phi i64 [ %44, %68 ], [ %72, %69 ]
  br i1 %59, label %83, label %89

83:                                               ; preds = %81, %89, %63
  %84 = load i32, i32* %43, align 8
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %66, i64 %85
  %87 = getelementptr inbounds i8, i8* %65, i64 %44
  br i1 %47, label %88, label %60

88:                                               ; preds = %83
  call void @llvm.memset.p0i8.i64(i8* align 1 %87, i8 0, i64 %55, i1 false)
  br label %120

89:                                               ; preds = %81, %89
  %90 = phi i64 [ %112, %89 ], [ %82, %81 ]
  %91 = add nsw i64 %90, -1
  %92 = getelementptr inbounds i8, i8* %66, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i64
  %95 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 %94
  %96 = load i8, i8* %95, align 1
  %97 = getelementptr inbounds i8, i8* %65, i64 %91
  store i8 %96, i8* %97, align 1
  %98 = add nsw i64 %90, -2
  %99 = getelementptr inbounds i8, i8* %66, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i64
  %102 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 %101
  %103 = load i8, i8* %102, align 1
  %104 = getelementptr inbounds i8, i8* %65, i64 %98
  store i8 %103, i8* %104, align 1
  %105 = add nsw i64 %90, -3
  %106 = getelementptr inbounds i8, i8* %66, i64 %105
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i64
  %109 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 %108
  %110 = load i8, i8* %109, align 1
  %111 = getelementptr inbounds i8, i8* %65, i64 %105
  store i8 %110, i8* %111, align 1
  %112 = add nsw i64 %90, -4
  %113 = getelementptr inbounds i8, i8* %66, i64 %112
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i64
  %116 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = getelementptr inbounds i8, i8* %65, i64 %112
  store i8 %117, i8* %118, align 1
  %119 = icmp sgt i64 %112, 0
  br i1 %119, label %89, label %83

120:                                              ; preds = %88, %120
  %121 = phi i32 [ %124, %120 ], [ %46, %88 ]
  %122 = phi i8* [ %123, %120 ], [ %87, %88 ]
  %123 = getelementptr inbounds i8, i8* %122, i64 1
  %124 = add nsw i32 %121, -1
  %125 = icmp sgt i32 %121, 0
  br i1 %125, label %120, label %60

126:                                              ; preds = %60, %27, %9
  %127 = icmp eq %struct.SkIPoint* %4, null
  br i1 %127, label %131, label %128

128:                                              ; preds = %126
  %129 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %4, i64 0, i32 0
  store i32 0, i32* %129, align 4
  %130 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %4, i64 0, i32 1
  store i32 0, i32* %130, align 4
  br label %131

131:                                              ; preds = %128, %126, %5
  %132 = phi i1 [ false, %5 ], [ true, %126 ], [ true, %128 ]
  ret i1 %132
}

declare i8* @_ZN6SkMask10AllocImageEmNS_9AllocTypeE(i64, i32) local_unnamed_addr #5

declare i64 @_ZNK6SkMask16computeImageSizeEv(%struct.SkMask*) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZNK21SkTableMaskFilterImpl9getFormatEv(%class.SkTableMaskFilterImpl* nocapture readnone) unnamed_addr #3 align 2 {
  ret i8 1
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK21SkTableMaskFilterImpl7flattenER13SkWriteBuffer(%class.SkTableMaskFilterImpl*, %class.SkWriteBuffer* dereferenceable(56)) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %class.SkTableMaskFilterImpl, %class.SkTableMaskFilterImpl* %0, i64 0, i32 1, i64 0
  %4 = bitcast %class.SkWriteBuffer* %1 to void (%class.SkWriteBuffer*, i8*, i64)***
  %5 = load void (%class.SkWriteBuffer*, i8*, i64)**, void (%class.SkWriteBuffer*, i8*, i64)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkWriteBuffer*, i8*, i64)*, void (%class.SkWriteBuffer*, i8*, i64)** %5, i64 3
  %7 = load void (%class.SkWriteBuffer*, i8*, i64)*, void (%class.SkWriteBuffer*, i8*, i64)** %6, align 8
  tail call void %7(%class.SkWriteBuffer* %1, i8* %3, i64 256) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN21SkTableMaskFilterImpl10CreateProcER12SkReadBuffer(%class.sk_sp.16* noalias nocapture sret, %class.SkReadBuffer* dereferenceable(136)) #2 align 2 {
  %3 = alloca [256 x i8], align 16
  %4 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %4) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 256, i1 false)
  %5 = call zeroext i1 @_ZN12SkReadBuffer13readByteArrayEPvm(%class.SkReadBuffer* %1, i8* nonnull %4, i64 256) #10
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.sk_sp.16, %class.sk_sp.16* %0, i64 0, i32 0
  store %class.SkFlattenable* null, %class.SkFlattenable** %7, align 8
  br label %15

8:                                                ; preds = %2
  %9 = call i8* @_Znwm(i64 272) #9
  %10 = getelementptr inbounds i8, i8* %9, i64 8
  %11 = bitcast i8* %10 to i32*
  store i32 1, i32* %11, align 4
  %12 = bitcast i8* %9 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV21SkTableMaskFilterImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  %13 = getelementptr inbounds i8, i8* %9, i64 12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %13, i8* nonnull align 16 %4, i64 256, i1 false) #10
  %14 = bitcast %class.sk_sp.16* %0 to i8**
  store i8* %9, i8** %14, align 8
  br label %15

15:                                               ; preds = %8, %6
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %4) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZN12SkReadBuffer13readByteArrayEPvm(%class.SkReadBuffer*, i8*, i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden noalias nonnull %class.SkMaskFilter* @_ZN17SkTableMaskFilter6CreateEPKh(i8* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = tail call i8* @_Znwm(i64 272) #9
  %3 = getelementptr inbounds i8, i8* %2, i64 8
  %4 = bitcast i8* %3 to i32*
  store i32 1, i32* %4, align 4
  %5 = bitcast i8* %2 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV21SkTableMaskFilterImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds i8, i8* %2, i64 12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 1 %0, i64 256, i1 false) #10
  %7 = bitcast i8* %2 to %class.SkMaskFilter*
  ret %class.SkMaskFilter* %7
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden noalias nonnull %class.SkMaskFilter* @_ZN17SkTableMaskFilter11CreateGammaEf(float) local_unnamed_addr #2 align 2 {
  %2 = alloca [256 x i8], align 16
  %3 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %3) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %3, i8 -86, i64 256, i1 false)
  br label %4

4:                                                ; preds = %4, %1
  %5 = phi i64 [ 0, %1 ], [ %23, %4 ]
  %6 = phi float [ 0.000000e+00, %1 ], [ %22, %4 ]
  %7 = tail call float @powf(float %6, float %0) #10
  %8 = fmul float %7, 2.550000e+02
  %9 = fadd float %8, 5.000000e-01
  %10 = tail call float @llvm.floor.f32(float %9) #10
  %11 = fcmp olt float %10, 0x41DFFFFFE0000000
  %12 = select i1 %11, float %10, float 0x41DFFFFFE0000000
  %13 = fcmp ogt float %12, 0xC1DFFFFFE0000000
  %14 = select i1 %13, float %12, float 0xC1DFFFFFE0000000
  %15 = fptosi float %14 to i32
  %16 = icmp slt i32 %15, 255
  %17 = select i1 %16, i32 %15, i32 255
  %18 = icmp sgt i32 %17, 0
  %19 = select i1 %18, i32 %17, i32 0
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 %5
  store i8 %20, i8* %21, align 1
  %22 = fadd float %6, 0x3F70101020000000
  %23 = add nuw nsw i64 %5, 1
  %24 = icmp eq i64 %23, 256
  br i1 %24, label %25, label %4

25:                                               ; preds = %4
  %26 = tail call i8* @_Znwm(i64 272) #9
  %27 = getelementptr inbounds i8, i8* %26, i64 8
  %28 = bitcast i8* %27 to i32*
  store i32 1, i32* %28, align 4
  %29 = bitcast i8* %26 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV21SkTableMaskFilterImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %29, align 8
  %30 = getelementptr inbounds i8, i8* %26, i64 12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %30, i8* nonnull align 16 %3, i64 256, i1 false) #10
  %31 = bitcast i8* %26 to %class.SkMaskFilter*
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %3) #10
  ret %class.SkMaskFilter* %31
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17SkTableMaskFilter14MakeGammaTableEPhf(i8* nocapture, float) local_unnamed_addr #2 align 2 {
  br label %4

3:                                                ; preds = %4
  ret void

4:                                                ; preds = %4, %2
  %5 = phi i64 [ 0, %2 ], [ %23, %4 ]
  %6 = phi float [ 0.000000e+00, %2 ], [ %22, %4 ]
  %7 = tail call float @powf(float %6, float %1) #10
  %8 = fmul float %7, 2.550000e+02
  %9 = fadd float %8, 5.000000e-01
  %10 = tail call float @llvm.floor.f32(float %9)
  %11 = fcmp olt float %10, 0x41DFFFFFE0000000
  %12 = select i1 %11, float %10, float 0x41DFFFFFE0000000
  %13 = fcmp ogt float %12, 0xC1DFFFFFE0000000
  %14 = select i1 %13, float %12, float 0xC1DFFFFFE0000000
  %15 = fptosi float %14 to i32
  %16 = icmp slt i32 %15, 255
  %17 = select i1 %16, i32 %15, i32 255
  %18 = icmp sgt i32 %17, 0
  %19 = select i1 %18, i32 %17, i32 0
  %20 = trunc i32 %19 to i8
  %21 = getelementptr inbounds i8, i8* %0, i64 %5
  store i8 %20, i8* %21, align 1
  %22 = fadd float %6, 0x3F70101020000000
  %23 = add nuw nsw i64 %5, 1
  %24 = icmp eq i64 %23, 256
  br i1 %24, label %3, label %4
}

; Function Attrs: nounwind ssp uwtable
define hidden noalias nonnull %class.SkMaskFilter* @_ZN17SkTableMaskFilter10CreateClipEhh(i8 zeroext, i8 zeroext) local_unnamed_addr #2 align 2 {
  %3 = alloca [256 x i8], align 16
  %4 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %4) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 256, i1 false)
  %5 = icmp eq i8 %1, 0
  %6 = select i1 %5, i8 1, i8 %1
  %7 = zext i8 %6 to i32
  %8 = icmp ugt i8 %6, %0
  %9 = add i8 %6, -1
  %10 = select i1 %8, i8 %0, i8 %9
  %11 = zext i8 %10 to i32
  %12 = sub nsw i32 %7, %11
  %13 = sdiv i32 16711680, %12
  %14 = add nuw nsw i32 %11, 1
  %15 = zext i32 %14 to i64
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 0, i64 %15, i1 false) #10
  %16 = icmp ult i32 %14, %7
  br i1 %16, label %19, label %17

17:                                               ; preds = %2
  %18 = zext i8 %6 to i64
  br label %100

19:                                               ; preds = %2
  %20 = zext i8 %10 to i64
  %21 = add nuw nsw i64 %20, 1
  %22 = zext i8 %6 to i64
  %23 = xor i64 %20, -1
  %24 = add nsw i64 %23, %22
  %25 = icmp ult i64 %24, 16
  br i1 %25, label %87, label %26

26:                                               ; preds = %19
  %27 = and i64 %24, -16
  %28 = add nsw i64 %21, %27
  %29 = insertelement <16 x i64> undef, i64 %21, i32 0
  %30 = shufflevector <16 x i64> %29, <16 x i64> undef, <16 x i32> zeroinitializer
  %31 = add <16 x i64> %30, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15>
  %32 = insertelement <16 x i64> undef, i64 %20, i32 0
  %33 = shufflevector <16 x i64> %32, <16 x i64> undef, <16 x i32> zeroinitializer
  %34 = insertelement <16 x i32> undef, i32 %13, i32 0
  %35 = shufflevector <16 x i32> %34, <16 x i32> undef, <16 x i32> zeroinitializer
  %36 = add nsw i64 %27, -16
  %37 = lshr exact i64 %36, 4
  %38 = add nuw nsw i64 %37, 1
  %39 = and i64 %38, 1
  %40 = icmp eq i64 %36, 0
  br i1 %40, label %71, label %41

41:                                               ; preds = %26
  %42 = sub nuw nsw i64 %38, %39
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %67, %43 ]
  %45 = phi <16 x i64> [ %31, %41 ], [ %68, %43 ]
  %46 = phi i64 [ %42, %41 ], [ %69, %43 ]
  %47 = add i64 %21, %44
  %48 = sub nuw nsw <16 x i64> %45, %33
  %49 = trunc <16 x i64> %48 to <16 x i32>
  %50 = mul nsw <16 x i32> %35, %49
  %51 = add nsw <16 x i32> %50, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %52 = lshr <16 x i32> %51, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %53 = trunc <16 x i32> %52 to <16 x i8>
  %54 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %47
  %55 = bitcast i8* %54 to <16 x i8>*
  store <16 x i8> %53, <16 x i8>* %55, align 1
  %56 = or i64 %44, 16
  %57 = add <16 x i64> %45, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %58 = add i64 %21, %56
  %59 = sub nuw nsw <16 x i64> %57, %33
  %60 = trunc <16 x i64> %59 to <16 x i32>
  %61 = mul nsw <16 x i32> %35, %60
  %62 = add nsw <16 x i32> %61, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %63 = lshr <16 x i32> %62, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %64 = trunc <16 x i32> %63 to <16 x i8>
  %65 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %58
  %66 = bitcast i8* %65 to <16 x i8>*
  store <16 x i8> %64, <16 x i8>* %66, align 1
  %67 = add i64 %44, 32
  %68 = add <16 x i64> %45, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %69 = add i64 %46, -2
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %43, !llvm.loop !4

71:                                               ; preds = %43, %26
  %72 = phi i64 [ 0, %26 ], [ %67, %43 ]
  %73 = phi <16 x i64> [ %31, %26 ], [ %68, %43 ]
  %74 = icmp eq i64 %39, 0
  br i1 %74, label %85, label %75

75:                                               ; preds = %71
  %76 = add i64 %21, %72
  %77 = sub nuw nsw <16 x i64> %73, %33
  %78 = trunc <16 x i64> %77 to <16 x i32>
  %79 = mul nsw <16 x i32> %35, %78
  %80 = add nsw <16 x i32> %79, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %81 = lshr <16 x i32> %80, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %82 = trunc <16 x i32> %81 to <16 x i8>
  %83 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %76
  %84 = bitcast i8* %83 to <16 x i8>*
  store <16 x i8> %82, <16 x i8>* %84, align 1
  br label %85

85:                                               ; preds = %71, %75
  %86 = icmp eq i64 %24, %27
  br i1 %86, label %100, label %87

87:                                               ; preds = %85, %19
  %88 = phi i64 [ %21, %19 ], [ %28, %85 ]
  br label %89

89:                                               ; preds = %87, %89
  %90 = phi i64 [ %98, %89 ], [ %88, %87 ]
  %91 = sub nuw nsw i64 %90, %20
  %92 = trunc i64 %91 to i32
  %93 = mul nsw i32 %13, %92
  %94 = add nsw i32 %93, 32768
  %95 = lshr i32 %94, 16
  %96 = trunc i32 %95 to i8
  %97 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %90
  store i8 %96, i8* %97, align 1
  %98 = add nuw i64 %90, 1
  %99 = icmp ult i64 %98, %22
  br i1 %99, label %89, label %100, !llvm.loop !6

100:                                              ; preds = %89, %85, %17
  %101 = phi i64 [ %18, %17 ], [ %22, %85 ], [ %22, %89 ]
  %102 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %101
  %103 = sub nuw nsw i32 256, %7
  %104 = zext i32 %103 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %102, i8 -1, i64 %104, i1 false) #10
  %105 = tail call i8* @_Znwm(i64 272) #9
  %106 = getelementptr inbounds i8, i8* %105, i64 8
  %107 = bitcast i8* %106 to i32*
  store i32 1, i32* %107, align 4
  %108 = bitcast i8* %105 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV21SkTableMaskFilterImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %108, align 8
  %109 = getelementptr inbounds i8, i8* %105, i64 12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %109, i8* nonnull align 16 %4, i64 256, i1 false) #10
  %110 = bitcast i8* %105 to %class.SkMaskFilter*
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %4) #10
  ret %class.SkMaskFilter* %110
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN17SkTableMaskFilter13MakeClipTableEPhhh(i8* nocapture, i8 zeroext, i8 zeroext) local_unnamed_addr #2 align 2 {
  %4 = icmp eq i8 %2, 0
  %5 = select i1 %4, i8 1, i8 %2
  %6 = zext i8 %5 to i32
  %7 = icmp ugt i8 %5, %1
  %8 = add i8 %5, -1
  %9 = select i1 %7, i8 %1, i8 %8
  %10 = zext i8 %9 to i32
  %11 = sub nsw i32 %6, %10
  %12 = sdiv i32 16711680, %11
  %13 = add nuw nsw i32 %10, 1
  %14 = zext i32 %13 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %0, i8 0, i64 %14, i1 false)
  %15 = icmp ult i32 %13, %6
  br i1 %15, label %16, label %87

16:                                               ; preds = %3
  %17 = zext i8 %9 to i64
  %18 = add nuw nsw i64 %17, 1
  %19 = zext i8 %9 to i64
  %20 = zext i8 %5 to i64
  %21 = xor i64 %17, -1
  %22 = add nsw i64 %21, %20
  %23 = icmp ult i64 %22, 16
  br i1 %23, label %24, label %26

24:                                               ; preds = %85, %16
  %25 = phi i64 [ %18, %16 ], [ %28, %85 ]
  br label %92

26:                                               ; preds = %16
  %27 = and i64 %22, -16
  %28 = add nsw i64 %18, %27
  %29 = insertelement <16 x i64> undef, i64 %18, i32 0
  %30 = shufflevector <16 x i64> %29, <16 x i64> undef, <16 x i32> zeroinitializer
  %31 = add <16 x i64> %30, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15>
  %32 = insertelement <16 x i64> undef, i64 %19, i32 0
  %33 = shufflevector <16 x i64> %32, <16 x i64> undef, <16 x i32> zeroinitializer
  %34 = insertelement <16 x i32> undef, i32 %12, i32 0
  %35 = shufflevector <16 x i32> %34, <16 x i32> undef, <16 x i32> zeroinitializer
  %36 = add nsw i64 %27, -16
  %37 = lshr exact i64 %36, 4
  %38 = add nuw nsw i64 %37, 1
  %39 = and i64 %38, 1
  %40 = icmp eq i64 %36, 0
  br i1 %40, label %71, label %41

41:                                               ; preds = %26
  %42 = sub nuw nsw i64 %38, %39
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %67, %43 ]
  %45 = phi <16 x i64> [ %31, %41 ], [ %68, %43 ]
  %46 = phi i64 [ %42, %41 ], [ %69, %43 ]
  %47 = add i64 %18, %44
  %48 = sub nuw nsw <16 x i64> %45, %33
  %49 = trunc <16 x i64> %48 to <16 x i32>
  %50 = mul nsw <16 x i32> %35, %49
  %51 = add nsw <16 x i32> %50, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %52 = lshr <16 x i32> %51, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %53 = trunc <16 x i32> %52 to <16 x i8>
  %54 = getelementptr inbounds i8, i8* %0, i64 %47
  %55 = bitcast i8* %54 to <16 x i8>*
  store <16 x i8> %53, <16 x i8>* %55, align 1
  %56 = or i64 %44, 16
  %57 = add <16 x i64> %45, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %58 = add i64 %18, %56
  %59 = sub nuw nsw <16 x i64> %57, %33
  %60 = trunc <16 x i64> %59 to <16 x i32>
  %61 = mul nsw <16 x i32> %35, %60
  %62 = add nsw <16 x i32> %61, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %63 = lshr <16 x i32> %62, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %64 = trunc <16 x i32> %63 to <16 x i8>
  %65 = getelementptr inbounds i8, i8* %0, i64 %58
  %66 = bitcast i8* %65 to <16 x i8>*
  store <16 x i8> %64, <16 x i8>* %66, align 1
  %67 = add i64 %44, 32
  %68 = add <16 x i64> %45, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %69 = add i64 %46, -2
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %43, !llvm.loop !8

71:                                               ; preds = %43, %26
  %72 = phi i64 [ 0, %26 ], [ %67, %43 ]
  %73 = phi <16 x i64> [ %31, %26 ], [ %68, %43 ]
  %74 = icmp eq i64 %39, 0
  br i1 %74, label %85, label %75

75:                                               ; preds = %71
  %76 = add i64 %18, %72
  %77 = sub nuw nsw <16 x i64> %73, %33
  %78 = trunc <16 x i64> %77 to <16 x i32>
  %79 = mul nsw <16 x i32> %35, %78
  %80 = add nsw <16 x i32> %79, <i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768, i32 32768>
  %81 = lshr <16 x i32> %80, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %82 = trunc <16 x i32> %81 to <16 x i8>
  %83 = getelementptr inbounds i8, i8* %0, i64 %76
  %84 = bitcast i8* %83 to <16 x i8>*
  store <16 x i8> %82, <16 x i8>* %84, align 1
  br label %85

85:                                               ; preds = %71, %75
  %86 = icmp eq i64 %22, %27
  br i1 %86, label %87, label %24

87:                                               ; preds = %92, %85, %3
  %88 = zext i8 %5 to i64
  %89 = getelementptr inbounds i8, i8* %0, i64 %88
  %90 = sub nuw nsw i32 256, %6
  %91 = zext i32 %90 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %89, i8 -1, i64 %91, i1 false)
  ret void

92:                                               ; preds = %24, %92
  %93 = phi i64 [ %101, %92 ], [ %25, %24 ]
  %94 = sub nuw nsw i64 %93, %19
  %95 = trunc i64 %94 to i32
  %96 = mul nsw i32 %12, %95
  %97 = add nsw i32 %96, 32768
  %98 = lshr i32 %97, 16
  %99 = trunc i32 %98 to i8
  %100 = getelementptr inbounds i8, i8* %0, i64 %93
  store i8 %99, i8* %100, align 1
  %101 = add nuw i64 %93, 1
  %102 = icmp ult i64 %101, %20
  br i1 %102, label %92, label %87, !llvm.loop !9
}

; Function Attrs: nofree nounwind
declare float @powf(float, float) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #2 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #10
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void (%class.sk_sp.16*, %class.SkReadBuffer*)* @_ZNK21SkTableMaskFilterImpl10getFactoryEv(%class.SkTableMaskFilterImpl*) unnamed_addr #2 comdat align 2 {
  ret void (%class.sk_sp.16*, %class.SkReadBuffer*)* @_ZN21SkTableMaskFilterImpl10CreateProcER12SkReadBuffer
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK21SkTableMaskFilterImpl11getTypeNameEv(%class.SkTableMaskFilterImpl*) unnamed_addr #2 comdat align 2 {
  ret i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK12SkMaskFilter18getFlattenableTypeEv(%class.SkMaskFilter*) unnamed_addr #2 comdat align 2 {
  ret i32 4
}

declare zeroext i1 @_ZNK16SkMaskFilterBase16canFilterMaskGPUERK13GrStyledShapeRK7SkIRectS5_RK8SkMatrixPS3_(%class.SkMaskFilterBase*, %class.GrStyledShape*, %struct.SkIRect* dereferenceable(16), %struct.SkIRect* dereferenceable(16), %class.SkMatrix* dereferenceable(40), %struct.SkIRect*) unnamed_addr #5

declare zeroext i1 @_ZNK16SkMaskFilterBase19directFilterMaskGPUEP18GrRecordingContextP20GrSurfaceDrawContextO7GrPaintPK6GrClipRK8SkMatrixRK13GrStyledShape(%class.SkMaskFilterBase*, %class.GrRecordingContext*, %class.GrSurfaceDrawContext*, %class.GrPaint*, %class.GrClip*, %class.SkMatrix* dereferenceable(40), %class.GrStyledShape*) unnamed_addr #5

declare void @_ZNK16SkMaskFilterBase13filterMaskGPUEP18GrRecordingContext18GrSurfaceProxyView11GrColorType11SkAlphaTypeRK8SkMatrixRK7SkIRect() unnamed_addr

declare void @_ZNK16SkMaskFilterBase17computeFastBoundsERK6SkRectPS0_(%class.SkMaskFilterBase*, %struct.SkRect* dereferenceable(16), %struct.SkRect*) unnamed_addr #5

declare zeroext i1 @_ZNK16SkMaskFilterBase7asABlurEPNS_7BlurRecE(%class.SkMaskFilterBase*, %"struct.SkMaskFilterBase::BlurRec"*) unnamed_addr #5

declare void @_ZNK16SkMaskFilterBase21onAsFragmentProcessorERK8GrFPArgs() unnamed_addr

declare zeroext i1 @_ZNK16SkMaskFilterBase22onHasFragmentProcessorEv(%class.SkMaskFilterBase*) unnamed_addr #5

declare i32 @_ZNK16SkMaskFilterBase17filterRectsToNineEPK6SkRectiRK8SkMatrixRK7SkIRectPNS_9NinePatchE(%class.SkMaskFilterBase*, %struct.SkRect*, i32, %class.SkMatrix* dereferenceable(40), %struct.SkIRect* dereferenceable(16), %"class.SkMaskFilterBase::NinePatch"*) unnamed_addr #5

declare i32 @_ZNK16SkMaskFilterBase17filterRRectToNineERK7SkRRectRK8SkMatrixRK7SkIRectPNS_9NinePatchE(%class.SkMaskFilterBase*, %class.SkRRect* dereferenceable(52), %class.SkMatrix* dereferenceable(40), %struct.SkIRect* dereferenceable(16), %"class.SkMaskFilterBase::NinePatch"*) unnamed_addr #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.isvectorized", i32 1}
!6 = distinct !{!6, !7, !5}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !5}
!9 = distinct !{!9, !7, !5}
