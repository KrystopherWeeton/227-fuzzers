; ModuleID = '../../components/viz/common/quads/surface_draw_quad.cc'
source_filename = "../../components/viz/common/quads/surface_draw_quad.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.viz::SurfaceDrawQuad" = type <{ %"class.viz::DrawQuad.base", [4 x i8], %"class.viz::SurfaceRange", i32, i8, i8, i8, i8 }>
%"class.viz::DrawQuad.base" = type <{ i32 (...)**, i32, %"class.gfx::Rect", %"class.gfx::Rect", i8, [3 x i8], %"class.viz::SharedQuadState"*, %"struct.viz::DrawQuad::Resources" }>
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.viz::SharedQuadState" = type <{ %"class.gfx::Transform", %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::MaskFilterInfo", %"class.absl::optional", i8, [3 x i8], float, i32, i32, i8, [3 x i8], %"class.absl::optional.0", float, i8, [3 x i8] }>
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.gfx::MaskFilterInfo" = type { %"class.gfx::RRectF" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.gfx::Rect" }
%"class.absl::optional.0" = type { %"class.absl::optional_internal::optional_data.1" }
%"class.absl::optional_internal::optional_data.1" = type { %"class.absl::optional_internal::optional_data_base.2" }
%"class.absl::optional_internal::optional_data_base.2" = type { %"class.absl::optional_internal::optional_data_dtor_base.3" }
%"class.absl::optional_internal::optional_data_dtor_base.3" = type { i8, %union.anon.4 }
%union.anon.4 = type { i64 }
%"struct.viz::DrawQuad::Resources" = type { i32, [4 x %"class.util::IdType"] }
%"class.util::IdType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { i32 }
%"class.viz::SurfaceRange" = type { %"class.absl::optional.5", %"class.viz::SurfaceId" }
%"class.absl::optional.5" = type { %"class.absl::optional_internal::optional_data.6" }
%"class.absl::optional_internal::optional_data.6" = type { %"class.absl::optional_internal::optional_data_base.7" }
%"class.absl::optional_internal::optional_data_base.7" = type { %"class.absl::optional_internal::optional_data_dtor_base.8" }
%"class.absl::optional_internal::optional_data_dtor_base.8" = type { i8, %union.anon.9 }
%union.anon.9 = type { %"class.viz::SurfaceId" }
%"class.viz::SurfaceId" = type { %"class.viz::FrameSinkId", %"class.viz::LocalSurfaceId" }
%"class.viz::FrameSinkId" = type { i32, i32 }
%"class.viz::LocalSurfaceId" = type { i32, i32, %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.viz::DrawQuad" = type <{ i32 (...)**, i32, %"class.gfx::Rect", %"class.gfx::Rect", i8, [3 x i8], %"class.viz::SharedQuadState"*, %"struct.viz::DrawQuad::Resources", [4 x i8] }>
%"class.base::trace_event::TracedValue" = type { %"class.base::trace_event::ConvertableToTraceFormat", %"class.std::__1::unique_ptr" }
%"class.base::trace_event::ConvertableToTraceFormat" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.base::trace_event::TracedValue::Writer"* }
%"class.base::trace_event::TracedValue::Writer" = type { i32 (...)** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.13 }
%union.anon.13 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@_ZTVN3viz15SurfaceDrawQuadE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.viz::SurfaceDrawQuad"*)* @_ZN3viz15SurfaceDrawQuadD2Ev to i8*), i8* bitcast (void (%"class.viz::SurfaceDrawQuad"*)* @_ZN3viz15SurfaceDrawQuadD0Ev to i8*), i8* bitcast (void (%"class.viz::SurfaceDrawQuad"*, %"class.base::trace_event::TracedValue"*)* @_ZNK3viz15SurfaceDrawQuad11ExtendValueEPN4base11trace_event11TracedValueE to i8*)] }, align 8
@.str = private unnamed_addr constant [14 x i8] c"surface_range\00", align 1

@_ZN3viz15SurfaceDrawQuadC1Ev = hidden unnamed_addr alias void (%"class.viz::SurfaceDrawQuad"*), void (%"class.viz::SurfaceDrawQuad"*)* @_ZN3viz15SurfaceDrawQuadC2Ev
@_ZN3viz15SurfaceDrawQuadC1ERKS0_ = hidden unnamed_addr alias void (%"class.viz::SurfaceDrawQuad"*, %"class.viz::SurfaceDrawQuad"*), void (%"class.viz::SurfaceDrawQuad"*, %"class.viz::SurfaceDrawQuad"*)* @_ZN3viz15SurfaceDrawQuadC2ERKS0_
@_ZN3viz15SurfaceDrawQuadD1Ev = hidden unnamed_addr alias void (%"class.viz::SurfaceDrawQuad"*), void (%"class.viz::SurfaceDrawQuad"*)* @_ZN3viz15SurfaceDrawQuadD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz15SurfaceDrawQuadC2Ev(%"class.viz::SurfaceDrawQuad"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.viz::SurfaceDrawQuad"* %0 to %"class.viz::DrawQuad"*
  tail call void @_ZN3viz8DrawQuadC2Ev(%"class.viz::DrawQuad"* %2) #6
  %3 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3viz15SurfaceDrawQuadE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2
  tail call void @_ZN3viz12SurfaceRangeC1Ev(%"class.viz::SurfaceRange"* %4) #6
  %5 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 3
  store i32 -1, i32* %5, align 8
  %6 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 4
  store i8 0, i8* %6, align 4
  %7 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 5
  store i8 0, i8* %7, align 1
  %8 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 6
  store i8 1, i8* %8, align 2
  ret void
}

declare void @_ZN3viz8DrawQuadC2Ev(%"class.viz::DrawQuad"*) unnamed_addr #1

declare void @_ZN3viz12SurfaceRangeC1Ev(%"class.viz::SurfaceRange"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz15SurfaceDrawQuadC2ERKS0_(%"class.viz::SurfaceDrawQuad"*, %"class.viz::SurfaceDrawQuad"* dereferenceable(160)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.viz::SurfaceDrawQuad"* %0 to %"class.viz::DrawQuad"*
  %4 = bitcast %"class.viz::SurfaceDrawQuad"* %1 to %"class.viz::DrawQuad"*
  tail call void @_ZN3viz8DrawQuadC2ERKS0_(%"class.viz::DrawQuad"* %3, %"class.viz::DrawQuad"* dereferenceable(80) %4) #6
  %5 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN3viz15SurfaceDrawQuadE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2
  %7 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %1, i64 0, i32 2
  tail call void @_ZN3viz12SurfaceRangeC1ERKS0_(%"class.viz::SurfaceRange"* %6, %"class.viz::SurfaceRange"* dereferenceable(72) %7) #6
  %8 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 3
  %9 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %1, i64 0, i32 3
  %10 = bitcast i32* %8 to i8*
  %11 = bitcast i32* %9 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 7, i1 false)
  ret void
}

declare void @_ZN3viz8DrawQuadC2ERKS0_(%"class.viz::DrawQuad"*, %"class.viz::DrawQuad"* dereferenceable(80)) unnamed_addr #1

declare void @_ZN3viz12SurfaceRangeC1ERKS0_(%"class.viz::SurfaceRange"*, %"class.viz::SurfaceRange"* dereferenceable(72)) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind
declare void @_ZN3viz8DrawQuadD2Ev(%"class.viz::DrawQuad"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz15SurfaceDrawQuadD2Ev(%"class.viz::SurfaceDrawQuad"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.viz::SurfaceDrawQuad"* %0 to %"class.viz::DrawQuad"*
  tail call void @_ZN3viz8DrawQuadD2Ev(%"class.viz::DrawQuad"* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz15SurfaceDrawQuadD0Ev(%"class.viz::SurfaceDrawQuad"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.viz::SurfaceDrawQuad"* %0 to %"class.viz::DrawQuad"*
  tail call void @_ZN3viz8DrawQuadD2Ev(%"class.viz::DrawQuad"* %2) #6
  %3 = bitcast %"class.viz::SurfaceDrawQuad"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.viz::SurfaceDrawQuad"* @_ZN3viz15SurfaceDrawQuadaSERKS0_(%"class.viz::SurfaceDrawQuad"* returned, %"class.viz::SurfaceDrawQuad"* nocapture readonly dereferenceable(160)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %1, i64 0, i32 0, i32 1
  %5 = bitcast i32* %3 to i8*
  %6 = bitcast i32* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 68, i1 false) #6
  %7 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2
  %8 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %37, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %13 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i8, i8* %13, align 8, !range !2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %20, label %16

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %18 = bitcast %"class.viz::SurfaceId"* %17 to i8*
  %19 = bitcast %"class.viz::SurfaceId"* %12 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 32, i1 false) #6
  br label %39

20:                                               ; preds = %11
  %21 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %12, i64 0, i32 0, i32 0
  %23 = load i32, i32* %22, align 4
  store i32 %23, i32* %21, align 4
  %24 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %25 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  store i32 %26, i32* %24, align 4
  %27 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  %28 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  %29 = load i32, i32* %28, align 8
  store i32 %29, i32* %27, align 8
  %30 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %31 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %32 = load i32, i32* %31, align 4
  store i32 %32, i32* %30, align 4
  %33 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2
  %34 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2
  %35 = bitcast %"class.base::UnguessableToken"* %33 to i8*
  %36 = bitcast %"class.base::UnguessableToken"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 16, i1 false) #6
  store i8 1, i8* %13, align 8
  br label %39

37:                                               ; preds = %2
  %38 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %38, align 8
  br label %39

39:                                               ; preds = %16, %20, %37
  %40 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2, i32 1
  %41 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %1, i64 0, i32 2, i32 1
  %42 = bitcast %"class.viz::SurfaceId"* %40 to i8*
  %43 = bitcast %"class.viz::SurfaceId"* %41 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 32, i1 false) #6
  %44 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 3
  %45 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %1, i64 0, i32 3
  %46 = bitcast i32* %44 to i8*
  %47 = bitcast i32* %45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 7, i1 false)
  ret %"class.viz::SurfaceDrawQuad"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz15SurfaceDrawQuad6SetNewEPKNS_15SharedQuadStateERKN3gfx4RectES7_RKNS_12SurfaceRangeEjb(%"class.viz::SurfaceDrawQuad"*, %"class.viz::SharedQuadState"*, %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Rect"* dereferenceable(16), %"class.viz::SurfaceRange"* nocapture readonly dereferenceable(72), i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  %8 = zext i1 %6 to i8
  %9 = bitcast %"class.viz::SurfaceDrawQuad"* %0 to %"class.viz::DrawQuad"*
  tail call void @_ZN3viz8DrawQuad6SetAllEPKNS_15SharedQuadStateENS0_8MaterialERKN3gfx4RectES8_b(%"class.viz::DrawQuad"* %9, %"class.viz::SharedQuadState"* %1, i32 7, %"class.gfx::Rect"* dereferenceable(16) %2, %"class.gfx::Rect"* dereferenceable(16) %3, i1 zeroext true) #6
  %10 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2
  %11 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %40, label %14

14:                                               ; preds = %7
  %15 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %16 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i8, i8* %16, align 8, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %21 = bitcast %"class.viz::SurfaceId"* %20 to i8*
  %22 = bitcast %"class.viz::SurfaceId"* %15 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 32, i1 false) #6
  br label %42

23:                                               ; preds = %14
  %24 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %25 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %15, i64 0, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  store i32 %26, i32* %24, align 4
  %27 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %28 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %29 = load i32, i32* %28, align 4
  store i32 %29, i32* %27, align 4
  %30 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  %31 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  %32 = load i32, i32* %31, align 8
  store i32 %32, i32* %30, align 8
  %33 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %34 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %35 = load i32, i32* %34, align 4
  store i32 %35, i32* %33, align 4
  %36 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2
  %37 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2
  %38 = bitcast %"class.base::UnguessableToken"* %36 to i8*
  %39 = bitcast %"class.base::UnguessableToken"* %37 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %39, i64 16, i1 false) #6
  store i8 1, i8* %16, align 8
  br label %42

40:                                               ; preds = %7
  %41 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %41, align 8
  br label %42

42:                                               ; preds = %19, %23, %40
  %43 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2, i32 1
  %44 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %4, i64 0, i32 1
  %45 = bitcast %"class.viz::SurfaceId"* %43 to i8*
  %46 = bitcast %"class.viz::SurfaceId"* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %45, i8* align 8 %46, i64 32, i1 false) #6
  %47 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 3
  store i32 %5, i32* %47, align 8
  %48 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 4
  store i8 %8, i8* %48, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @_ZN3viz8DrawQuad6SetAllEPKNS_15SharedQuadStateENS0_8MaterialERKN3gfx4RectES8_b(%"class.viz::DrawQuad"*, %"class.viz::SharedQuadState"*, i32, %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Rect"* dereferenceable(16), i1 zeroext) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz15SurfaceDrawQuad6SetAllEPKNS_15SharedQuadStateERKN3gfx4RectES7_bRKNS_12SurfaceRangeEjbbb(%"class.viz::SurfaceDrawQuad"*, %"class.viz::SharedQuadState"*, %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Rect"* dereferenceable(16), i1 zeroext, %"class.viz::SurfaceRange"* nocapture readonly dereferenceable(72), i32, i1 zeroext, i1 zeroext, i1 zeroext) local_unnamed_addr #0 align 2 {
  %11 = zext i1 %7 to i8
  %12 = zext i1 %8 to i8
  %13 = zext i1 %9 to i8
  %14 = bitcast %"class.viz::SurfaceDrawQuad"* %0 to %"class.viz::DrawQuad"*
  tail call void @_ZN3viz8DrawQuad6SetAllEPKNS_15SharedQuadStateENS0_8MaterialERKN3gfx4RectES8_b(%"class.viz::DrawQuad"* %14, %"class.viz::SharedQuadState"* %1, i32 7, %"class.gfx::Rect"* dereferenceable(16) %2, %"class.gfx::Rect"* dereferenceable(16) %3, i1 zeroext %4) #6
  %15 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2
  %16 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i8, i8* %16, align 8, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %45, label %19

19:                                               ; preds = %10
  %20 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %21 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i8, i8* %21, align 8, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %28, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %26 = bitcast %"class.viz::SurfaceId"* %25 to i8*
  %27 = bitcast %"class.viz::SurfaceId"* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 32, i1 false) #6
  br label %47

28:                                               ; preds = %19
  %29 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %30 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %20, i64 0, i32 0, i32 0
  %31 = load i32, i32* %30, align 4
  store i32 %31, i32* %29, align 4
  %32 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %33 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %34 = load i32, i32* %33, align 4
  store i32 %34, i32* %32, align 4
  %35 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  %36 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  %37 = load i32, i32* %36, align 8
  store i32 %37, i32* %35, align 8
  %38 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %39 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %40 = load i32, i32* %39, align 4
  store i32 %40, i32* %38, align 4
  %41 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2
  %42 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2
  %43 = bitcast %"class.base::UnguessableToken"* %41 to i8*
  %44 = bitcast %"class.base::UnguessableToken"* %42 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %44, i64 16, i1 false) #6
  store i8 1, i8* %21, align 8
  br label %47

45:                                               ; preds = %10
  %46 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %46, align 8
  br label %47

47:                                               ; preds = %24, %28, %45
  %48 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2, i32 1
  %49 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %5, i64 0, i32 1
  %50 = bitcast %"class.viz::SurfaceId"* %48 to i8*
  %51 = bitcast %"class.viz::SurfaceId"* %49 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 32, i1 false) #6
  %52 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 3
  store i32 %6, i32* %52, align 8
  %53 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 4
  store i8 %11, i8* %53, align 4
  %54 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 5
  store i8 %12, i8* %54, align 1
  %55 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 6
  store i8 %13, i8* %55, align 2
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"class.viz::SurfaceDrawQuad"* @_ZN3viz15SurfaceDrawQuad12MaterialCastEPKNS_8DrawQuadE(%"class.viz::DrawQuad"* readnone) local_unnamed_addr #5 align 2 {
  %2 = bitcast %"class.viz::DrawQuad"* %0 to %"class.viz::SurfaceDrawQuad"*
  ret %"class.viz::SurfaceDrawQuad"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3viz15SurfaceDrawQuad11ExtendValueEPN4base11trace_event11TracedValueE(%"class.viz::SurfaceDrawQuad"*, %"class.base::trace_event::TracedValue"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #6
  %5 = getelementptr inbounds %"class.viz::SurfaceDrawQuad", %"class.viz::SurfaceDrawQuad"* %0, i64 0, i32 2
  call void @_ZNK3viz12SurfaceRange8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %3, %"class.viz::SurfaceRange"* %5) #6
  %6 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %6, i64 0, i32 1, i32 0
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = select i1 %9, i8* %11, i8* %4
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = zext i8 %8 to i64
  %16 = select i1 %9, i64 %14, i64 %15
  call void @_ZN4base11trace_event11TracedValue9SetStringEPKcNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::trace_event::TracedValue"* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i8* %12, i64 %16) #6
  %17 = load i8, i8* %7, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %2
  %20 = load i8*, i8** %10, align 8
  call void @_ZdlPv(i8* %20) #7
  br label %21

21:                                               ; preds = %2, %19
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #6
  ret void
}

declare void @_ZN4base11trace_event11TracedValue9SetStringEPKcNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::trace_event::TracedValue"*, i8*, i8*, i64) local_unnamed_addr #1

declare void @_ZNK3viz12SurfaceRange8ToStringEv(%"class.std::__1::basic_string"* sret, %"class.viz::SurfaceRange"*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
