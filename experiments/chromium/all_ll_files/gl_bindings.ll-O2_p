; ModuleID = '../../ui/gl/gl_bindings.cc'
source_filename = "../../ui/gl/gl_bindings.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gl::EGLApi" = type { i32 (...)** }
%"class.gl::GLXApi" = type { i32 (...)** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.gl::DriverEGL" = type { %"struct.gl::ProcsEGL", %"struct.gl::ExtensionsEGL" }
%"struct.gl::ProcsEGL" = type { i32 (i32)*, i32 (i8*, i8*, i32)*, i32 (i8*, i32*, i8**, i32, i32*)*, i32 (i8*, i8*, i32, i64)*, i32 (i8*, i8*, i64)*, i8* (i8*, i8*, i8*, i32*)*, i8* (i8*, i8*, i32, i8*, i32*)*, i8* (i8*, i32, i8*, i8*, i32*)*, i8* (i8*, i8*, i32*)*, i8* (i8*, i8*, i64, i32*)*, i8* (i8*, i32*)*, i32 (i8*, i8*, i64*)*, i8* (i8*, i32, i32*)*, i8* (i8*, i8*, i64, i32*)*, i32 (void (i32, i8*, i32, i8*, i8*, i8*)*, i64*)*, i32 (i8*, i8*)*, i32 (i8*, i8*)*, i32 (i8*, i8*)*, i32 (i8*, i8*)*, i32 (i8*, i8*)*, i32 (i8*, i8*)*, i32 (i8*, i8*, i32*, i32*, i32*)*, i32 (i8*, i8*, i32*, i32*, i64*)*, i32 (i8*, i8*, i32, i32*, i64*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32, i32*)*, i32 (i8*, i8**, i32, i32*)*, i8* ()*, i8* ()*, i8* (i32)*, i8* (i64)*, i32 ()*, i32 (i8*, i8*, i64, i32, i32*, i64*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32*, i32*)*, i8* (%struct.AHardwareBuffer*)*, i32 (i8*, i8*, i64*)*, i8* (i32, i8*, i64*)*, void ()* (i8*)*, i32 (i8*, i8*, i32, i32*)*, i32 (i8*, i8*, i64*, i64*, i64*)*, void (i8*)*, i32 (i8*, i8*, i64*)*, i32 (i8*, i32*, i32*)*, i32 (i8*, i32, i8*, i8*)*, i32 (i8*, i8*, i8*, i8*)*, i32 (i8*, i8*, i32, i32, i32, i32)*, i32 ()*, i32 (i8*, i8*, i32, i32*)*, i32 (i32, i64*)*, i32 (i32, i8**, i32*)*, i8* (i8*, i32)*, i32 (i8*, i32, i64*)*, i32 (i8*, i8*, i32, i32*)*, i32 (i8*, i8*, i32, i64*)*, i8* (i8*, i32)*, i8* (i8*, i32, i32)*, i32 (i8*, i8*, i32, i32*)*, i32 (i8*, i8*, i32, i8**)*, void (i8*, i8*)*, void (i8*, i8*)*, i32 (i8*, i8*, i32)*, i32 ()*, void (i8*, void (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)*)*, i32 (i8*, i8*, i32, i32)*, i32 (i8*, i8*)*, i32 (i8*, i8*, i64*)*, i32 (i8*, i8*)*, i32 (i8*, i8*)*, i32 (i8*, i8*, i8*, i64*)*, i32 (i8*, i8*, i32, i32)*, i32 (i8*, i8*)*, i32 (i8*, i8*, i32*, i32)*, i32 (i8*, i32)*, i32 (i8*)*, i32 ()*, i32 ()*, i32 (i32)*, i32 (i8*, i8*, i32)* }
%struct.AHardwareBuffer = type opaque
%"struct.gl::ExtensionsEGL" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.x11::XlibDisplayWrapper" = type <{ %struct._XDisplay*, i32, [4 x i8] }>
%struct._XDisplay = type opaque
%"class.x11::Connection" = type { %"class.x11::XProto", %"class.x11::ExtensionManager", %"class.std::__1::unique_ptr.178", %struct.xcb_connection_t*, %"class.std::__1::unique_ptr.193", i8, i8, i32, %"class.std::__1::basic_string", i32, %"struct.x11::Setup", %"struct.x11::Screen"*, %"struct.x11::Depth"*, %"struct.x11::VisualType"*, %"class.base::flat_map", %"class.std::__1::unique_ptr.234", %"class.base::circular_deque", %"class.base::ObserverList.240", %"class.x11::Event"*, %"class.base::circular_deque.244", i32, %"class.absl::optional", %"struct.std::__1::array", %"class.base::RepeatingCallback", %"class.base::OnceCallback.256" }
%"class.x11::XProto" = type { %"class.x11::Connection"* }
%"class.x11::ExtensionManager" = type { %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.4", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.22", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.40", %"class.std::__1::unique_ptr.46", %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.64", %"class.std::__1::unique_ptr.70", %"class.std::__1::unique_ptr.76", %"class.std::__1::unique_ptr.82", %"class.std::__1::unique_ptr.88", %"class.std::__1::unique_ptr.94", %"class.std::__1::unique_ptr.100", %"class.std::__1::unique_ptr.106", %"class.std::__1::unique_ptr.112", %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.124", %"class.std::__1::unique_ptr.130", %"class.std::__1::unique_ptr.136", %"class.std::__1::unique_ptr.142", %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.154", %"class.std::__1::unique_ptr.160", %"class.std::__1::unique_ptr.166", %"class.std::__1::unique_ptr.172" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.x11::BigRequests"* }
%"class.x11::BigRequests" = type opaque
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.x11::Composite"* }
%"class.x11::Composite" = type opaque
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.x11::Damage"* }
%"class.x11::Damage" = type opaque
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.x11::Dpms"* }
%"class.x11::Dpms" = type opaque
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.x11::Dri2"* }
%"class.x11::Dri2" = type opaque
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.x11::Dri3"* }
%"class.x11::Dri3" = type opaque
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.x11::GenericEvent"* }
%"class.x11::GenericEvent" = type opaque
%"class.std::__1::unique_ptr.40" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"class.x11::Glx"* }
%"class.x11::Glx" = type <{ %"class.x11::Connection"*, %"struct.x11::QueryExtensionReply", [2 x i8] }>
%"struct.x11::QueryExtensionReply" = type { i16, i8, i8, i8, i8 }
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"class.x11::Present"* }
%"class.x11::Present" = type opaque
%"class.std::__1::unique_ptr.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.x11::RandR"* }
%"class.x11::RandR" = type opaque
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"class.x11::Record"* }
%"class.x11::Record" = type opaque
%"class.std::__1::unique_ptr.64" = type { %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"class.x11::Render"* }
%"class.x11::Render" = type opaque
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"class.x11::Res"* }
%"class.x11::Res" = type opaque
%"class.std::__1::unique_ptr.76" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"class.x11::ScreenSaver"* }
%"class.x11::ScreenSaver" = type opaque
%"class.std::__1::unique_ptr.82" = type { %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"class.x11::Shape"* }
%"class.x11::Shape" = type opaque
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.x11::Shm"* }
%"class.x11::Shm" = type opaque
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"class.x11::Sync"* }
%"class.x11::Sync" = type opaque
%"class.std::__1::unique_ptr.100" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"class.x11::XCMisc"* }
%"class.x11::XCMisc" = type opaque
%"class.std::__1::unique_ptr.106" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"class.x11::Xevie"* }
%"class.x11::Xevie" = type opaque
%"class.std::__1::unique_ptr.112" = type { %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"class.x11::XF86Dri"* }
%"class.x11::XF86Dri" = type opaque
%"class.std::__1::unique_ptr.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.120" }
%"struct.std::__1::__compressed_pair_elem.120" = type { %"class.x11::XF86VidMode"* }
%"class.x11::XF86VidMode" = type opaque
%"class.std::__1::unique_ptr.124" = type { %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"class.x11::XFixes"* }
%"class.x11::XFixes" = type opaque
%"class.std::__1::unique_ptr.130" = type { %"class.std::__1::__compressed_pair.131" }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.132" }
%"struct.std::__1::__compressed_pair_elem.132" = type { %"class.x11::Xinerama"* }
%"class.x11::Xinerama" = type opaque
%"class.std::__1::unique_ptr.136" = type { %"class.std::__1::__compressed_pair.137" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"class.x11::Input"* }
%"class.x11::Input" = type opaque
%"class.std::__1::unique_ptr.142" = type { %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { %"class.x11::Xkb"* }
%"class.x11::Xkb" = type opaque
%"class.std::__1::unique_ptr.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.x11::XPrint"* }
%"class.x11::XPrint" = type opaque
%"class.std::__1::unique_ptr.154" = type { %"class.std::__1::__compressed_pair.155" }
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"class.x11::SELinux"* }
%"class.x11::SELinux" = type opaque
%"class.std::__1::unique_ptr.160" = type { %"class.std::__1::__compressed_pair.161" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.x11::Test"* }
%"class.x11::Test" = type opaque
%"class.std::__1::unique_ptr.166" = type { %"class.std::__1::__compressed_pair.167" }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"class.x11::Xv"* }
%"class.x11::Xv" = type opaque
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.x11::XvMC"* }
%"class.x11::XvMC" = type opaque
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"class.ui::PlatformEventSource"* }
%"class.ui::PlatformEventSource" = type { i32 (...)**, %"class.base::ObserverList", %"class.ui::PlatformEventDispatcher"*, i8, [7 x i8], %"class.base::ObserverList.186" }
%"class.base::ObserverList" = type <{ %"class.std::__1::vector", %"class.base::LinkedList", i64, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.base::internal::UncheckedObserverAdapter"*, %"class.base::internal::UncheckedObserverAdapter"*, %"class.std::__1::__compressed_pair.181" }
%"class.base::internal::UncheckedObserverAdapter" = type { i8* }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"class.base::internal::UncheckedObserverAdapter"* }
%"class.base::LinkedList" = type { %"class.base::LinkNode" }
%"class.base::LinkNode" = type { %"class.base::internal::LinkNodeBase" }
%"class.base::internal::LinkNodeBase" = type { %"class.base::internal::LinkNodeBase"*, %"class.base::internal::LinkNodeBase"* }
%"class.ui::PlatformEventDispatcher" = type opaque
%"class.base::ObserverList.186" = type <{ %"class.std::__1::vector", %"class.base::LinkedList.187", i64, i32, [4 x i8] }>
%"class.base::LinkedList.187" = type { %"class.base::LinkNode.188" }
%"class.base::LinkNode.188" = type { %"class.base::internal::LinkNodeBase" }
%struct.xcb_connection_t = type opaque
%"class.std::__1::unique_ptr.193" = type { %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.x11::XlibDisplay"* }
%"class.x11::XlibDisplay" = type { %struct._XDisplay* }
%"struct.x11::Setup" = type { i8, i16, i16, i16, i32, i32, i32, i32, i16, i32, i32, i8, i8, i8, i8, %"class.std::__1::basic_string", %"class.std::__1::vector.199", %"class.std::__1::vector.206" }
%"class.std::__1::vector.199" = type { %"class.std::__1::__vector_base.200" }
%"class.std::__1::__vector_base.200" = type { %"struct.x11::Format"*, %"struct.x11::Format"*, %"class.std::__1::__compressed_pair.201" }
%"struct.x11::Format" = type { i8, i8, i8 }
%"class.std::__1::__compressed_pair.201" = type { %"struct.std::__1::__compressed_pair_elem.202" }
%"struct.std::__1::__compressed_pair_elem.202" = type { %"struct.x11::Format"* }
%"class.std::__1::vector.206" = type { %"class.std::__1::__vector_base.207" }
%"class.std::__1::__vector_base.207" = type { %"struct.x11::Screen"*, %"struct.x11::Screen"*, %"class.std::__1::__compressed_pair.222" }
%"class.std::__1::__compressed_pair.222" = type { %"struct.std::__1::__compressed_pair_elem.223" }
%"struct.std::__1::__compressed_pair_elem.223" = type { %"struct.x11::Screen"* }
%"struct.x11::Screen" = type { i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i32, i32, i8, i8, %"class.std::__1::vector.208" }
%"class.std::__1::vector.208" = type { %"class.std::__1::__vector_base.209" }
%"class.std::__1::__vector_base.209" = type { %"struct.x11::Depth"*, %"struct.x11::Depth"*, %"class.std::__1::__compressed_pair.217" }
%"class.std::__1::__compressed_pair.217" = type { %"struct.std::__1::__compressed_pair_elem.218" }
%"struct.std::__1::__compressed_pair_elem.218" = type { %"struct.x11::Depth"* }
%"struct.x11::Depth" = type { i8, %"class.std::__1::vector.210" }
%"class.std::__1::vector.210" = type { %"class.std::__1::__vector_base.211" }
%"class.std::__1::__vector_base.211" = type { %"struct.x11::VisualType"*, %"struct.x11::VisualType"*, %"class.std::__1::__compressed_pair.212" }
%"class.std::__1::__compressed_pair.212" = type { %"struct.std::__1::__compressed_pair_elem.213" }
%"struct.std::__1::__compressed_pair_elem.213" = type { %"struct.x11::VisualType"* }
%"struct.x11::VisualType" = type { i32, i32, i8, i16, i32, i32, i32 }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.227" }
%"class.std::__1::vector.227" = type { %"class.std::__1::__vector_base.228" }
%"class.std::__1::__vector_base.228" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.229" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.229" = type { %"struct.std::__1::__compressed_pair_elem.230" }
%"struct.std::__1::__compressed_pair_elem.230" = type { %"struct.std::__1::pair"* }
%"class.std::__1::unique_ptr.234" = type { %"class.std::__1::__compressed_pair.235" }
%"class.std::__1::__compressed_pair.235" = type { %"struct.std::__1::__compressed_pair_elem.236" }
%"struct.std::__1::__compressed_pair_elem.236" = type { %"class.x11::KeyboardState"* }
%"class.x11::KeyboardState" = type opaque
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"class.x11::Event"*, i64 }
%"class.base::ObserverList.240" = type <{ %"class.std::__1::vector", %"class.base::LinkedList.241", i64, i32, [4 x i8] }>
%"class.base::LinkedList.241" = type { %"class.base::LinkNode.242" }
%"class.base::LinkNode.242" = type { %"class.base::internal::LinkNodeBase" }
%"class.x11::Event" = type opaque
%"class.base::circular_deque.244" = type { %"class.base::internal::VectorBuffer.245", i64, i64 }
%"class.base::internal::VectorBuffer.245" = type { %"struct.x11::Connection::Request"*, i64 }
%"struct.x11::Connection::Request" = type { %"class.base::OnceCallback", i8, %class.scoped_refptr.247, %"class.std::__1::unique_ptr.249" }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.246" }
%"struct.std::__1::__atomic_base.246" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.scoped_refptr.247 = type { %"class.base::RefCountedMemory"* }
%"class.base::RefCountedMemory" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.248", [4 x i8] }>
%"class.base::RefCountedThreadSafe.248" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr.249" = type { %"class.std::__1::__compressed_pair.250" }
%"class.std::__1::__compressed_pair.250" = type { %"struct.std::__1::__compressed_pair_elem.251" }
%"struct.std::__1::__compressed_pair_elem.251" = type { %"class.x11::Error"* }
%"class.x11::Error" = type { i32 (...)** }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.255 }
%union.anon.255 = type { i32 }
%"struct.std::__1::array" = type { [256 x %"class.x11::Error"* (%"class.base::RefCountedMemory"*)*] }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::OnceCallback.256" = type { %"class.base::internal::CallbackBase" }

@_ZN2gl21g_current_egl_contextE = external local_unnamed_addr global %"class.gl::EGLApi"*, align 8
@.str.1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"EGL_KHR_fence_sync \00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"EGL_KHR_wait_sync \00", align 1
@_ZN2gl21g_current_glx_contextE = external local_unnamed_addr global %"class.gl::GLXApi"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl9DriverEGL21GetPlatformExtensionsEv(%"class.std::__1::basic_string"* noalias sret) local_unnamed_addr #0 align 2 {
  %2 = tail call i8* @_ZN2gl12GLSurfaceEGL18GetHardwareDisplayEv() #10
  %3 = icmp eq i8* %2, null
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %5, i64 0, i32 1, i32 0
  store i8 0, i8* %6, align 1
  %7 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  store i8 0, i8* %7, align 8
  br label %46

8:                                                ; preds = %1
  %9 = load %"class.gl::EGLApi"*, %"class.gl::EGLApi"** @_ZN2gl21g_current_egl_contextE, align 8
  %10 = bitcast %"class.gl::EGLApi"* %9 to i8* (%"class.gl::EGLApi"*, i8*, i32)***
  %11 = load i8* (%"class.gl::EGLApi"*, i8*, i32)**, i8* (%"class.gl::EGLApi"*, i8*, i32)*** %10, align 8
  %12 = getelementptr inbounds i8* (%"class.gl::EGLApi"*, i8*, i32)*, i8* (%"class.gl::EGLApi"*, i8*, i32)** %11, i64 58
  %13 = load i8* (%"class.gl::EGLApi"*, i8*, i32)*, i8* (%"class.gl::EGLApi"*, i8*, i32)** %12, align 8
  %14 = tail call i8* %13(%"class.gl::EGLApi"* %9, i8* nonnull %2, i32 12373) #10
  %15 = icmp eq i8* %14, null
  br i1 %15, label %42, label %16

16:                                               ; preds = %8
  %17 = tail call i64 @strlen(i8* nonnull %14) #10
  %18 = icmp ugt i64 %17, -17
  br i1 %18, label %19, label %21

19:                                               ; preds = %16
  %20 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %20) #11
  unreachable

21:                                               ; preds = %16
  %22 = icmp ult i64 %17, 23
  br i1 %22, label %31, label %23

23:                                               ; preds = %21
  %24 = add nuw i64 %17, 16
  %25 = and i64 %24, -16
  %26 = tail call i8* @_Znwm(i64 %25) #12
  %27 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %26, i8** %27, align 8
  %28 = or i64 %25, -9223372036854775808
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %28, i64* %29, align 8
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %17, i64* %30, align 8
  br label %37

31:                                               ; preds = %21
  %32 = trunc i64 %17 to i8
  %33 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %34 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %33, i64 0, i32 1, i32 0
  store i8 %32, i8* %34, align 1
  %35 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %36 = icmp eq i64 %17, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %31, %23
  %38 = phi i8* [ %26, %23 ], [ %35, %31 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* nonnull align 1 %14, i64 %17, i1 false) #10
  br label %39

39:                                               ; preds = %31, %37
  %40 = phi i8* [ %35, %31 ], [ %38, %37 ]
  %41 = getelementptr inbounds i8, i8* %40, i64 %17
  store i8 0, i8* %41, align 1
  br label %46

42:                                               ; preds = %8
  %43 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %44 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %43, i64 0, i32 1, i32 0
  store i8 0, i8* %44, align 1
  %45 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  store i8 0, i8* %45, align 8
  br label %46

46:                                               ; preds = %39, %42, %4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @_ZN2gl12GLSurfaceEGL18GetHardwareDisplayEv() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl9DriverEGL34UpdateConditionalExtensionBindingsEv(%"struct.gl::DriverEGL"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #10
  %4 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %6 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 24, i1 false)
  call void @_ZN2gl9DriverEGL21GetPlatformExtensionsEv(%"class.std::__1::basic_string"* nonnull sret %2)
  %7 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #10
  %8 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %9 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %8, i64 0, i32 1, i32 0
  %10 = load i8, i8* %9, align 1
  %11 = icmp slt i8 %10, 0
  %12 = load i8*, i8** %4, align 8
  %13 = select i1 %11, i8* %12, i8* %3
  %14 = load i64, i64* %5, align 8
  %15 = zext i8 %10 to i64
  %16 = select i1 %11, i64 %14, i64 %15
  %17 = getelementptr inbounds i8, i8* %13, i64 %16
  %18 = ptrtoint i8* %17 to i64
  %19 = ptrtoint i8* %13 to i64
  %20 = icmp slt i64 %16, 19
  br i1 %20, label %39, label %21

21:                                               ; preds = %1, %34
  %22 = phi i64 [ %37, %34 ], [ %16, %1 ]
  %23 = phi i8* [ %35, %34 ], [ %13, %1 ]
  %24 = add nsw i64 %22, -18
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %39, label %26

26:                                               ; preds = %21
  %27 = call i8* @memchr(i8* %23, i32 69, i64 %24) #10
  %28 = icmp eq i8* %27, null
  br i1 %28, label %39, label %29

29:                                               ; preds = %26
  %30 = call i32 @bcmp(i8* nonnull %27, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0), i64 19) #10
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %29
  %33 = ptrtoint i8* %27 to i64
  br label %39

34:                                               ; preds = %29
  %35 = getelementptr inbounds i8, i8* %27, i64 1
  %36 = ptrtoint i8* %35 to i64
  %37 = sub i64 %18, %36
  %38 = icmp slt i64 %37, 19
  br i1 %38, label %39, label %21

39:                                               ; preds = %34, %26, %21, %32, %1
  %40 = phi i64 [ %18, %1 ], [ %33, %32 ], [ %18, %21 ], [ %18, %26 ], [ %18, %34 ]
  %41 = phi i8* [ %17, %1 ], [ %27, %32 ], [ %17, %21 ], [ %17, %26 ], [ %17, %34 ]
  %42 = icmp ne i8* %41, %17
  %43 = sub i64 %40, %19
  %44 = icmp ne i64 %43, -1
  %45 = and i1 %44, %42
  %46 = zext i1 %45 to i8
  %47 = getelementptr inbounds %"struct.gl::DriverEGL", %"struct.gl::DriverEGL"* %0, i64 0, i32 1, i32 17
  store i8 %46, i8* %47, align 1
  %48 = icmp slt i64 %16, 18
  br i1 %48, label %67, label %49

49:                                               ; preds = %39, %60
  %50 = phi i64 [ %63, %60 ], [ %16, %39 ]
  %51 = phi i8* [ %61, %60 ], [ %13, %39 ]
  %52 = add nsw i64 %50, -17
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %67, label %54

54:                                               ; preds = %49
  %55 = call i8* @memchr(i8* %51, i32 69, i64 %52) #10
  %56 = icmp eq i8* %55, null
  br i1 %56, label %67, label %57

57:                                               ; preds = %54
  %58 = call i32 @bcmp(i8* nonnull %55, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i64 18) #10
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %65, label %60

60:                                               ; preds = %57
  %61 = getelementptr inbounds i8, i8* %55, i64 1
  %62 = ptrtoint i8* %61 to i64
  %63 = sub i64 %18, %62
  %64 = icmp slt i64 %63, 18
  br i1 %64, label %67, label %49

65:                                               ; preds = %57
  %66 = icmp eq i8* %55, %17
  br i1 %66, label %67, label %69

67:                                               ; preds = %60, %54, %49, %39, %65
  %68 = getelementptr inbounds %"struct.gl::DriverEGL", %"struct.gl::DriverEGL"* %0, i64 0, i32 1, i32 24
  store i8 0, i8* %68, align 8
  br label %75

69:                                               ; preds = %65
  %70 = ptrtoint i8* %55 to i64
  %71 = sub i64 %70, %19
  %72 = icmp ne i64 %71, -1
  %73 = getelementptr inbounds %"struct.gl::DriverEGL", %"struct.gl::DriverEGL"* %0, i64 0, i32 1, i32 24
  %74 = zext i1 %72 to i8
  store i8 %74, i8* %73, align 8
  br i1 %72, label %77, label %75

75:                                               ; preds = %67, %69
  %76 = getelementptr inbounds %"struct.gl::DriverEGL", %"struct.gl::DriverEGL"* %0, i64 0, i32 0, i32 78
  store i32 (i8*, i8*, i32)* null, i32 (i8*, i8*, i32)** %76, align 8
  br label %77

77:                                               ; preds = %75, %69
  br i1 %11, label %78, label %79

78:                                               ; preds = %77
  call void @_ZdlPv(i8* %12) #12
  br label %79

79:                                               ; preds = %77, %78
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl9DriverEGL19GetClientExtensionsEv(%"class.std::__1::basic_string"* noalias sret) local_unnamed_addr #0 align 2 {
  %2 = load %"class.gl::EGLApi"*, %"class.gl::EGLApi"** @_ZN2gl21g_current_egl_contextE, align 8
  %3 = bitcast %"class.gl::EGLApi"* %2 to i8* (%"class.gl::EGLApi"*, i8*, i32)***
  %4 = load i8* (%"class.gl::EGLApi"*, i8*, i32)**, i8* (%"class.gl::EGLApi"*, i8*, i32)*** %3, align 8
  %5 = getelementptr inbounds i8* (%"class.gl::EGLApi"*, i8*, i32)*, i8* (%"class.gl::EGLApi"*, i8*, i32)** %4, i64 58
  %6 = load i8* (%"class.gl::EGLApi"*, i8*, i32)*, i8* (%"class.gl::EGLApi"*, i8*, i32)** %5, align 8
  %7 = tail call i8* %6(%"class.gl::EGLApi"* %2, i8* null, i32 12373) #10
  %8 = icmp eq i8* %7, null
  br i1 %8, label %35, label %9

9:                                                ; preds = %1
  %10 = tail call i64 @strlen(i8* nonnull %7) #10
  %11 = icmp ugt i64 %10, -17
  br i1 %11, label %12, label %14

12:                                               ; preds = %9
  %13 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %13) #11
  unreachable

14:                                               ; preds = %9
  %15 = icmp ult i64 %10, 23
  br i1 %15, label %24, label %16

16:                                               ; preds = %14
  %17 = add nuw i64 %10, 16
  %18 = and i64 %17, -16
  %19 = tail call i8* @_Znwm(i64 %18) #12
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %19, i8** %20, align 8
  %21 = or i64 %18, -9223372036854775808
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %21, i64* %22, align 8
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %10, i64* %23, align 8
  br label %30

24:                                               ; preds = %14
  %25 = trunc i64 %10 to i8
  %26 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %27 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %26, i64 0, i32 1, i32 0
  store i8 %25, i8* %27, align 1
  %28 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %29 = icmp eq i64 %10, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %24, %16
  %31 = phi i8* [ %19, %16 ], [ %28, %24 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %31, i8* nonnull align 1 %7, i64 %10, i1 false) #10
  br label %32

32:                                               ; preds = %24, %30
  %33 = phi i8* [ %28, %24 ], [ %31, %30 ]
  %34 = getelementptr inbounds i8, i8* %33, i64 %10
  store i8 0, i8* %34, align 1
  br label %39

35:                                               ; preds = %1
  %36 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %36, i64 0, i32 1, i32 0
  store i8 0, i8* %37, align 1
  %38 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  store i8 0, i8* %38, align 8
  br label %39

39:                                               ; preds = %35, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl9DriverGLX21GetPlatformExtensionsEv(%"class.std::__1::basic_string"* noalias sret) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.x11::XlibDisplayWrapper", align 8
  %3 = tail call %"class.x11::Connection"* @_ZN3x1110Connection3GetEv() #10
  %4 = icmp eq %"class.x11::Connection"* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = tail call i32 @_ZNK3x1110Connection15DefaultScreenIdEv(%"class.x11::Connection"* nonnull %3) #10
  br label %7

7:                                                ; preds = %1, %5
  %8 = phi i32 [ %6, %5 ], [ 0, %1 ]
  %9 = load %"class.gl::GLXApi"*, %"class.gl::GLXApi"** @_ZN2gl21g_current_glx_contextE, align 8
  %10 = bitcast %"class.x11::XlibDisplayWrapper"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #10
  call void @_ZN3x1110Connection14GetXlibDisplayENS_15XlibDisplayTypeE(%"class.x11::XlibDisplayWrapper"* nonnull sret %2, %"class.x11::Connection"* %3, i32 0) #10
  %11 = getelementptr inbounds %"class.x11::XlibDisplayWrapper", %"class.x11::XlibDisplayWrapper"* %2, i64 0, i32 0
  %12 = load %struct._XDisplay*, %struct._XDisplay** %11, align 8
  %13 = bitcast %"class.gl::GLXApi"* %9 to i8* (%"class.gl::GLXApi"*, %struct._XDisplay*, i32)***
  %14 = load i8* (%"class.gl::GLXApi"*, %struct._XDisplay*, i32)**, i8* (%"class.gl::GLXApi"*, %struct._XDisplay*, i32)*** %13, align 8
  %15 = getelementptr inbounds i8* (%"class.gl::GLXApi"*, %struct._XDisplay*, i32)*, i8* (%"class.gl::GLXApi"*, %struct._XDisplay*, i32)** %14, i64 39
  %16 = load i8* (%"class.gl::GLXApi"*, %struct._XDisplay*, i32)*, i8* (%"class.gl::GLXApi"*, %struct._XDisplay*, i32)** %15, align 8
  %17 = call i8* %16(%"class.gl::GLXApi"* %9, %struct._XDisplay* %12, i32 %8) #10
  call void @_ZN3x1118XlibDisplayWrapperD1Ev(%"class.x11::XlibDisplayWrapper"* nonnull %2) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #10
  %18 = icmp eq i8* %17, null
  br i1 %18, label %45, label %19

19:                                               ; preds = %7
  %20 = call i64 @strlen(i8* nonnull %17) #10
  %21 = icmp ugt i64 %20, -17
  br i1 %21, label %22, label %24

22:                                               ; preds = %19
  %23 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %23) #11
  unreachable

24:                                               ; preds = %19
  %25 = icmp ult i64 %20, 23
  br i1 %25, label %34, label %26

26:                                               ; preds = %24
  %27 = add nuw i64 %20, 16
  %28 = and i64 %27, -16
  %29 = call i8* @_Znwm(i64 %28) #12
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %29, i8** %30, align 8
  %31 = or i64 %28, -9223372036854775808
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %31, i64* %32, align 8
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %20, i64* %33, align 8
  br label %40

34:                                               ; preds = %24
  %35 = trunc i64 %20 to i8
  %36 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %36, i64 0, i32 1, i32 0
  store i8 %35, i8* %37, align 1
  %38 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %39 = icmp eq i64 %20, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %34, %26
  %41 = phi i8* [ %29, %26 ], [ %38, %34 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* nonnull align 1 %17, i64 %20, i1 false) #10
  br label %42

42:                                               ; preds = %34, %40
  %43 = phi i8* [ %38, %34 ], [ %41, %40 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %20
  store i8 0, i8* %44, align 1
  br label %49

45:                                               ; preds = %7
  %46 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %47 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %46, i64 0, i32 1, i32 0
  store i8 0, i8* %47, align 1
  %48 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  store i8 0, i8* %48, align 8
  br label %49

49:                                               ; preds = %45, %42
  ret void
}

declare %"class.x11::Connection"* @_ZN3x1110Connection3GetEv() local_unnamed_addr #2

declare i32 @_ZNK3x1110Connection15DefaultScreenIdEv(%"class.x11::Connection"*) local_unnamed_addr #2

declare void @_ZN3x1110Connection14GetXlibDisplayENS_15XlibDisplayTypeE(%"class.x11::XlibDisplayWrapper"* sret, %"class.x11::Connection"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3x1118XlibDisplayWrapperD1Ev(%"class.x11::XlibDisplayWrapper"*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #7

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #8

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind readonly }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
