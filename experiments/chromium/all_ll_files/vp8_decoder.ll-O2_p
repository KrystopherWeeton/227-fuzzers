; ModuleID = '../../media/gpu/vp8_decoder.cc'
source_filename = "../../media/gpu/vp8_decoder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.media::VP8Decoder::VP8Accelerator" = type { i32 (...)** }
%"class.media::VP8Decoder" = type { %"class.media::AcceleratedVideoDecoder", i32, %"class.media::Vp8Parser", %"class.std::__1::unique_ptr", %"class.media::Vp8ReferenceFrameVector", i32, i32, i64, i8*, i64, %"class.gfx::Size", i32, i32, %"class.std::__1::unique_ptr.17" }
%"class.media::AcceleratedVideoDecoder" = type { i32 (...)** }
%"class.media::Vp8Parser" = type { %"struct.media::Vp8SegmentationHeader", %"struct.media::Vp8LoopFilterHeader", %"struct.media::Vp8EntropyHeader", i8*, i64, %"class.media::Vp8BoolDecoder" }
%"struct.media::Vp8SegmentationHeader" = type { i8, i8, i8, i32, [4 x i8], [4 x i8], [3 x i8] }
%"struct.media::Vp8LoopFilterHeader" = type { i32, i8, i8, i8, i8, [4 x i8], [4 x i8] }
%"struct.media::Vp8EntropyHeader" = type { [4 x [8 x [3 x [11 x i8]]]], [4 x i8], [3 x i8], [2 x [19 x i8]] }
%"class.media::Vp8BoolDecoder" = type { i8*, i8*, i8*, i64, i32, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.media::Vp8FrameHeader"* }
%"struct.media::Vp8FrameHeader" = type <{ i32, i8, i8, i8, i8, i64, i16, i8, i8, i16, i8, i8, %"struct.media::Vp8SegmentationHeader", %"struct.media::Vp8LoopFilterHeader", %"struct.media::Vp8QuantizationHeader", [6 x i8], i64, %"struct.media::Vp8EntropyHeader", i8, i8, i8, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8*, i64, [8 x i64], i64, i64, i8, i8, i8, i8, [4 x i8] }>
%"struct.media::Vp8QuantizationHeader" = type { i8, i8, i8, i8, i8, i8 }
%"class.media::Vp8ReferenceFrameVector" = type { %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [3 x %class.scoped_refptr] }
%class.scoped_refptr = type { %"class.media::VP8Picture"* }
%"class.media::VP8Picture" = type { %"class.media::CodecPicture.base", %"class.std::__1::unique_ptr" }
%"class.media::CodecPicture.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", i32, %"class.gfx::Rect", %"class.std::__1::unique_ptr.2", %"class.media::VideoColorSpace" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.media::DecryptConfig"* }
%"class.media::DecryptConfig" = type <{ i32, [4 x i8], %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector", %"class.absl::optional", [4 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.media::SubsampleEntry"*, %"struct.media::SubsampleEntry"*, %"class.std::__1::__compressed_pair.8" }
%"struct.media::SubsampleEntry" = type { i32, i32 }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.media::SubsampleEntry"* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.13 }
%union.anon.13 = type { %"class.media::EncryptionPattern" }
%"class.media::EncryptionPattern" = type { i32, i32 }
%"class.media::VideoColorSpace" = type { i8, i8, i8, i8 }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.media::VP8Decoder::VP8Accelerator"* }
%"class.media::DecoderBuffer" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.23", [4 x i8], %"class.std::__1::unique_ptr.24", %"class.base::TimeDelta", %"class.base::TimeDelta", i64, i64, %"class.std::__1::unique_ptr.24", %"class.std::__1::unique_ptr.30", %"class.std::__1::unique_ptr.36", %"class.std::__1::unique_ptr.2", %"struct.std::__1::pair", i8, [7 x i8] }>
%"class.base::RefCountedThreadSafe.23" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { i8* }
%"class.std::__1::unique_ptr.30" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.media::ReadOnlyUnalignedMapping"* }
%"class.media::ReadOnlyUnalignedMapping" = type { %"class.base::ReadOnlySharedMemoryMapping", i64, i64 }
%"class.base::ReadOnlySharedMemoryMapping" = type { %"class.base::SharedMemoryMapping" }
%"class.base::SharedMemoryMapping" = type { i32 (...)**, i8*, i64, i64, %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.std::__1::unique_ptr.36" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.media::UnalignedSharedMemory"* }
%"class.media::UnalignedSharedMemory" = type { %"class.base::subtle::PlatformSharedMemoryRegion", %"class.base::WritableSharedMemoryMapping", %"class.base::ReadOnlySharedMemoryMapping", i8, i64, i8* }
%"class.base::subtle::PlatformSharedMemoryRegion" = type { %"struct.base::subtle::ScopedFDPair", i32, i64, %"class.base::UnguessableToken" }
%"struct.base::subtle::ScopedFDPair" = type { %"class.base::ScopedGeneric", %"class.base::ScopedGeneric" }
%"class.base::ScopedGeneric" = type <{ i32 (...)**, %"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data", i8, [3 x i8] }>
%"struct.base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data" = type { i32 }
%"class.base::WritableSharedMemoryMapping" = type { %"class.base::SharedMemoryMapping" }
%"struct.std::__1::pair" = type { %"class.base::TimeDelta", %"class.base::TimeDelta" }
%"class.media::CodecPicture" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", i32, %"class.gfx::Rect", %"class.std::__1::unique_ptr.2", %"class.media::VideoColorSpace", [4 x i8] }>

@_ZTVN5media10VP8Decoder14VP8AcceleratorE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.media::VP8Decoder::VP8Accelerator"*)* @_ZN5media10VP8Decoder14VP8AcceleratorD2Ev to i8*), i8* bitcast (void (%"class.media::VP8Decoder::VP8Accelerator"*)* @_ZN5media10VP8Decoder14VP8AcceleratorD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@_ZTVN5media10VP8DecoderE = hidden unnamed_addr constant { [14 x i8*] } { [14 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.media::VP8Decoder"*)* @_ZN5media10VP8DecoderD2Ev to i8*), i8* bitcast (void (%"class.media::VP8Decoder"*)* @_ZN5media10VP8DecoderD0Ev to i8*), i8* bitcast (void (%"class.media::VP8Decoder"*, i32, %"class.media::DecoderBuffer"*)* @_ZN5media10VP8Decoder9SetStreamEiRKNS_13DecoderBufferE to i8*), i8* bitcast (i1 (%"class.media::VP8Decoder"*)* @_ZN5media10VP8Decoder5FlushEv to i8*), i8* bitcast (void (%"class.media::VP8Decoder"*)* @_ZN5media10VP8Decoder5ResetEv to i8*), i8* bitcast (i32 (%"class.media::VP8Decoder"*)* @_ZN5media10VP8Decoder6DecodeEv to i8*), i8* bitcast (i64 (%"class.media::VP8Decoder"*)* @_ZNK5media10VP8Decoder10GetPicSizeEv to i8*), i8* bitcast ({ i64, i64 } (%"class.media::VP8Decoder"*)* @_ZNK5media10VP8Decoder14GetVisibleRectEv to i8*), i8* bitcast (i32 (%"class.media::VP8Decoder"*)* @_ZNK5media10VP8Decoder10GetProfileEv to i8*), i8* bitcast (i8 (%"class.media::VP8Decoder"*)* @_ZNK5media10VP8Decoder11GetBitDepthEv to i8*), i8* bitcast (i64 (%"class.media::VP8Decoder"*)* @_ZNK5media10VP8Decoder24GetRequiredNumOfPicturesEv to i8*), i8* bitcast (i64 (%"class.media::VP8Decoder"*)* @_ZNK5media10VP8Decoder21GetNumReferenceFramesEv to i8*)] }, align 8

@_ZN5media10VP8Decoder14VP8AcceleratorD1Ev = hidden unnamed_addr alias void (%"class.media::VP8Decoder::VP8Accelerator"*), void (%"class.media::VP8Decoder::VP8Accelerator"*)* @_ZN5media10VP8Decoder14VP8AcceleratorD2Ev
@_ZN5media10VP8DecoderC1ENSt3__110unique_ptrINS0_14VP8AcceleratorENS1_14default_deleteIS3_EEEE = hidden unnamed_addr alias void (%"class.media::VP8Decoder"*, %"class.media::VP8Decoder::VP8Accelerator"*), void (%"class.media::VP8Decoder"*, %"class.media::VP8Decoder::VP8Accelerator"*)* @_ZN5media10VP8DecoderC2ENSt3__110unique_ptrINS0_14VP8AcceleratorENS1_14default_deleteIS3_EEEE
@_ZN5media10VP8DecoderD1Ev = hidden unnamed_addr alias void (%"class.media::VP8Decoder"*), void (%"class.media::VP8Decoder"*)* @_ZN5media10VP8DecoderD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5media10VP8Decoder14VP8AcceleratorC2Ev(%"class.media::VP8Decoder::VP8Accelerator"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.media::VP8Decoder::VP8Accelerator", %"class.media::VP8Decoder::VP8Accelerator"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN5media10VP8Decoder14VP8AcceleratorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5media10VP8Decoder14VP8AcceleratorD2Ev(%"class.media::VP8Decoder::VP8Accelerator"* nocapture) unnamed_addr #1 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN5media10VP8Decoder14VP8AcceleratorD0Ev(%"class.media::VP8Decoder::VP8Accelerator"* nocapture readnone) unnamed_addr #2 align 2 {
  tail call void @llvm.trap() #11
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media10VP8DecoderC2ENSt3__110unique_ptrINS0_14VP8AcceleratorENS1_14default_deleteIS3_EEEE(%"class.media::VP8Decoder"*, %"class.media::VP8Decoder::VP8Accelerator"*) unnamed_addr #4 align 2 {
  %3 = ptrtoint %"class.media::VP8Decoder::VP8Accelerator"* %1 to i64
  %4 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*] }, { [14 x i8*] }* @_ZTVN5media10VP8DecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 1
  store i32 0, i32* %5, align 8
  %6 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 2
  tail call void @_ZN5media9Vp8ParserC1Ev(%"class.media::Vp8Parser"* %6) #12
  %7 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 3
  %8 = bitcast %"class.std::__1::unique_ptr"* %7 to i64*
  store i64 0, i64* %8, align 8
  %9 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 4
  tail call void @_ZN5media23Vp8ReferenceFrameVectorC1Ev(%"class.media::Vp8ReferenceFrameVector"* %9) #12
  %10 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 5
  store i32 -1, i32* %10, align 8
  %11 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 6
  store i32 -1, i32* %11, align 4
  %12 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 7
  %13 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 13
  %14 = bitcast %"class.std::__1::unique_ptr.17"* %13 to i64*
  %15 = bitcast i64* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 32, i1 false)
  store i64 %3, i64* %14, align 8
  ret void
}

declare void @_ZN5media9Vp8ParserC1Ev(%"class.media::Vp8Parser"*) unnamed_addr #5

declare void @_ZN5media23Vp8ReferenceFrameVectorC1Ev(%"class.media::Vp8ReferenceFrameVector"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media10VP8DecoderD2Ev(%"class.media::VP8Decoder"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*] }, { [14 x i8*] }* @_ZTVN5media10VP8DecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 13, i32 0, i32 0, i32 0
  %4 = load %"class.media::VP8Decoder::VP8Accelerator"*, %"class.media::VP8Decoder::VP8Accelerator"** %3, align 8
  store %"class.media::VP8Decoder::VP8Accelerator"* null, %"class.media::VP8Decoder::VP8Accelerator"** %3, align 8
  %5 = icmp eq %"class.media::VP8Decoder::VP8Accelerator"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.media::VP8Decoder::VP8Accelerator"* %4 to void (%"class.media::VP8Decoder::VP8Accelerator"*)***
  %8 = load void (%"class.media::VP8Decoder::VP8Accelerator"*)**, void (%"class.media::VP8Decoder::VP8Accelerator"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.media::VP8Decoder::VP8Accelerator"*)*, void (%"class.media::VP8Decoder::VP8Accelerator"*)** %8, i64 1
  %10 = load void (%"class.media::VP8Decoder::VP8Accelerator"*)*, void (%"class.media::VP8Decoder::VP8Accelerator"*)** %9, align 8
  tail call void %10(%"class.media::VP8Decoder::VP8Accelerator"* nonnull %4) #12
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 4
  tail call void @_ZN5media23Vp8ReferenceFrameVectorD1Ev(%"class.media::Vp8ReferenceFrameVector"* %12) #12
  %13 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %14 = load %"struct.media::Vp8FrameHeader"*, %"struct.media::Vp8FrameHeader"** %13, align 8
  store %"struct.media::Vp8FrameHeader"* null, %"struct.media::Vp8FrameHeader"** %13, align 8
  %15 = icmp eq %"struct.media::Vp8FrameHeader"* %14, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %11
  %17 = bitcast %"struct.media::Vp8FrameHeader"* %14 to i8*
  tail call void @_ZdlPv(i8* %17) #13
  br label %18

18:                                               ; preds = %11, %16
  %19 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 2
  tail call void @_ZN5media9Vp8ParserD1Ev(%"class.media::Vp8Parser"* %19) #12
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5media23Vp8ReferenceFrameVectorD1Ev(%"class.media::Vp8ReferenceFrameVector"*) unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN5media9Vp8ParserD1Ev(%"class.media::Vp8Parser"*) unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media10VP8DecoderD0Ev(%"class.media::VP8Decoder"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [14 x i8*] }, { [14 x i8*] }* @_ZTVN5media10VP8DecoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 13, i32 0, i32 0, i32 0
  %4 = load %"class.media::VP8Decoder::VP8Accelerator"*, %"class.media::VP8Decoder::VP8Accelerator"** %3, align 8
  store %"class.media::VP8Decoder::VP8Accelerator"* null, %"class.media::VP8Decoder::VP8Accelerator"** %3, align 8
  %5 = icmp eq %"class.media::VP8Decoder::VP8Accelerator"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.media::VP8Decoder::VP8Accelerator"* %4 to void (%"class.media::VP8Decoder::VP8Accelerator"*)***
  %8 = load void (%"class.media::VP8Decoder::VP8Accelerator"*)**, void (%"class.media::VP8Decoder::VP8Accelerator"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.media::VP8Decoder::VP8Accelerator"*)*, void (%"class.media::VP8Decoder::VP8Accelerator"*)** %8, i64 1
  %10 = load void (%"class.media::VP8Decoder::VP8Accelerator"*)*, void (%"class.media::VP8Decoder::VP8Accelerator"*)** %9, align 8
  tail call void %10(%"class.media::VP8Decoder::VP8Accelerator"* nonnull %4) #12
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 4
  tail call void @_ZN5media23Vp8ReferenceFrameVectorD1Ev(%"class.media::Vp8ReferenceFrameVector"* %12) #12
  %13 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %14 = load %"struct.media::Vp8FrameHeader"*, %"struct.media::Vp8FrameHeader"** %13, align 8
  store %"struct.media::Vp8FrameHeader"* null, %"struct.media::Vp8FrameHeader"** %13, align 8
  %15 = icmp eq %"struct.media::Vp8FrameHeader"* %14, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %11
  %17 = bitcast %"struct.media::Vp8FrameHeader"* %14 to i8*
  tail call void @_ZdlPv(i8* %17) #13
  br label %18

18:                                               ; preds = %11, %16
  %19 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 2
  tail call void @_ZN5media9Vp8ParserD1Ev(%"class.media::Vp8Parser"* %19) #12
  %20 = bitcast %"class.media::VP8Decoder"* %0 to i8*
  tail call void @_ZdlPv(i8* %20) #13
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5media10VP8Decoder5FlushEv(%"class.media::VP8Decoder"*) unnamed_addr #4 align 2 {
  %2 = bitcast %"class.media::VP8Decoder"* %0 to void (%"class.media::VP8Decoder"*)***
  %3 = load void (%"class.media::VP8Decoder"*)**, void (%"class.media::VP8Decoder"*)*** %2, align 8
  %4 = getelementptr inbounds void (%"class.media::VP8Decoder"*)*, void (%"class.media::VP8Decoder"*)** %3, i64 4
  %5 = load void (%"class.media::VP8Decoder"*)*, void (%"class.media::VP8Decoder"*)** %4, align 8
  tail call void %5(%"class.media::VP8Decoder"* %0) #12
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media10VP8Decoder9SetStreamEiRKNS_13DecoderBufferE(%"class.media::VP8Decoder"* nocapture, i32, %"class.media::DecoderBuffer"* nocapture readonly dereferenceable(112)) unnamed_addr #4 align 2 {
  %4 = getelementptr inbounds %"class.media::DecoderBuffer", %"class.media::DecoderBuffer"* %2, i64 0, i32 9, i32 0, i32 0, i32 0
  %5 = load %"class.media::ReadOnlyUnalignedMapping"*, %"class.media::ReadOnlyUnalignedMapping"** %4, align 8
  %6 = icmp eq %"class.media::ReadOnlyUnalignedMapping"* %5, null
  br i1 %6, label %13, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.media::ReadOnlyUnalignedMapping", %"class.media::ReadOnlyUnalignedMapping"* %5, i64 0, i32 0, i32 0, i32 1
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = tail call i8* @_ZNK5media24ReadOnlyUnalignedMapping6memoryEv(%"class.media::ReadOnlyUnalignedMapping"* nonnull %5) #12
  br label %23

13:                                               ; preds = %7, %3
  %14 = getelementptr inbounds %"class.media::DecoderBuffer", %"class.media::DecoderBuffer"* %2, i64 0, i32 10, i32 0, i32 0, i32 0
  %15 = load %"class.media::UnalignedSharedMemory"*, %"class.media::UnalignedSharedMemory"** %14, align 8
  %16 = icmp eq %"class.media::UnalignedSharedMemory"* %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.media::UnalignedSharedMemory", %"class.media::UnalignedSharedMemory"* %15, i64 0, i32 5
  %19 = load i8*, i8** %18, align 8
  br label %23

20:                                               ; preds = %13
  %21 = getelementptr inbounds %"class.media::DecoderBuffer", %"class.media::DecoderBuffer"* %2, i64 0, i32 3, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  br label %23

23:                                               ; preds = %11, %17, %20
  %24 = phi i8* [ %12, %11 ], [ %19, %17 ], [ %22, %20 ]
  %25 = getelementptr inbounds %"class.media::DecoderBuffer", %"class.media::DecoderBuffer"* %2, i64 0, i32 11, i32 0, i32 0, i32 0
  %26 = load %"class.media::DecryptConfig"*, %"class.media::DecryptConfig"** %25, align 8
  %27 = icmp eq %"class.media::DecryptConfig"* %26, null
  br i1 %27, label %30, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 1
  store i32 3, i32* %29, align 8
  br label %36

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.media::DecoderBuffer", %"class.media::DecoderBuffer"* %2, i64 0, i32 6
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 5
  store i32 %1, i32* %33, align 8
  %34 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 8
  store i8* %24, i8** %34, align 8
  %35 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 9
  store i64 %32, i64* %35, align 8
  br label %36

36:                                               ; preds = %30, %28
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media10VP8Decoder5ResetEv(%"class.media::VP8Decoder"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %3 = load %"struct.media::Vp8FrameHeader"*, %"struct.media::Vp8FrameHeader"** %2, align 8
  store %"struct.media::Vp8FrameHeader"* null, %"struct.media::Vp8FrameHeader"** %2, align 8
  %4 = icmp eq %"struct.media::Vp8FrameHeader"* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast %"struct.media::Vp8FrameHeader"* %3 to i8*
  tail call void @_ZdlPv(i8* %6) #13
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 8
  %9 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 4
  %10 = bitcast i8** %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false)
  tail call void @_ZN5media23Vp8ReferenceFrameVector5ClearEv(%"class.media::Vp8ReferenceFrameVector"* %9) #12
  %11 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %14, label %15

14:                                               ; preds = %7
  store i32 2, i32* %11, align 8
  br label %15

15:                                               ; preds = %14, %7
  ret void
}

declare void @_ZN5media23Vp8ReferenceFrameVector5ClearEv(%"class.media::Vp8ReferenceFrameVector"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5media10VP8Decoder6DecodeEv(%"class.media::VP8Decoder"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 8
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %107, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 9
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %107, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %11 = load %"struct.media::Vp8FrameHeader"*, %"struct.media::Vp8FrameHeader"** %10, align 8
  %12 = icmp eq %"struct.media::Vp8FrameHeader"* %11, null
  br i1 %12, label %13, label %32

13:                                               ; preds = %9
  %14 = tail call i8* @_Znwm(i64 1304) #13
  %15 = bitcast i8* %14 to %"struct.media::Vp8FrameHeader"*
  tail call void @_ZN5media14Vp8FrameHeaderC1Ev(%"struct.media::Vp8FrameHeader"* nonnull %15) #12
  %16 = load %"struct.media::Vp8FrameHeader"*, %"struct.media::Vp8FrameHeader"** %10, align 8
  %17 = bitcast %"struct.media::Vp8FrameHeader"** %10 to i8**
  store i8* %14, i8** %17, align 8
  %18 = icmp eq %"struct.media::Vp8FrameHeader"* %16, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"struct.media::Vp8FrameHeader"* %16 to i8*
  tail call void @_ZdlPv(i8* %20) #13
  %21 = load %"struct.media::Vp8FrameHeader"*, %"struct.media::Vp8FrameHeader"** %10, align 8
  br label %22

22:                                               ; preds = %13, %19
  %23 = phi %"struct.media::Vp8FrameHeader"* [ %15, %13 ], [ %21, %19 ]
  %24 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 2
  %25 = load i8*, i8** %2, align 8
  %26 = load i64, i64* %6, align 8
  %27 = tail call zeroext i1 @_ZN5media9Vp8Parser10ParseFrameEPKhmPNS_14Vp8FrameHeaderE(%"class.media::Vp8Parser"* %24, i8* %25, i64 %26, %"struct.media::Vp8FrameHeader"* %23) #12
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = load %"struct.media::Vp8FrameHeader"*, %"struct.media::Vp8FrameHeader"** %10, align 8
  br label %32

30:                                               ; preds = %22
  %31 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 1
  store i32 3, i32* %31, align 8
  br label %107

32:                                               ; preds = %28, %9
  %33 = phi %"struct.media::Vp8FrameHeader"* [ %29, %28 ], [ %11, %9 ]
  %34 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 6
  %35 = load i32, i32* %34, align 4
  %36 = add nsw i32 %35, 1
  %37 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 5
  %38 = load i32, i32* %37, align 8
  %39 = icmp ne i32 %36, %38
  %40 = icmp ne i32 %35, -1
  %41 = and i1 %40, %39
  %42 = getelementptr inbounds %"struct.media::Vp8FrameHeader", %"struct.media::Vp8FrameHeader"* %33, i64 0, i32 0
  %43 = load i32, i32* %42, align 8
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %75

45:                                               ; preds = %32
  %46 = getelementptr inbounds %"struct.media::Vp8FrameHeader", %"struct.media::Vp8FrameHeader"* %33, i64 0, i32 6
  %47 = load i16, i16* %46, align 8
  %48 = getelementptr inbounds %"struct.media::Vp8FrameHeader", %"struct.media::Vp8FrameHeader"* %33, i64 0, i32 9
  %49 = load i16, i16* %48, align 4
  %50 = zext i16 %49 to i32
  %51 = icmp eq i16 %47, 0
  %52 = icmp eq i16 %49, 0
  %53 = or i1 %51, %52
  br i1 %53, label %107, label %54

54:                                               ; preds = %45
  %55 = zext i16 %47 to i32
  %56 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 10
  %57 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %56, i64 0, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, %55
  br i1 %59, label %60, label %64

60:                                               ; preds = %54
  %61 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 10, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, %50
  br i1 %63, label %73, label %64

64:                                               ; preds = %60, %54
  %65 = bitcast %"class.gfx::Size"* %56 to i64*
  %66 = zext i16 %49 to i64
  %67 = shl nuw nsw i64 %66, 32
  %68 = zext i16 %47 to i64
  %69 = or i64 %67, %68
  store i64 %69, i64* %65, align 8
  %70 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 4
  tail call void @_ZN5media23Vp8ReferenceFrameVector5ClearEv(%"class.media::Vp8ReferenceFrameVector"* %70) #12
  %71 = load i32, i32* %37, align 8
  store i32 %71, i32* %34, align 4
  %72 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 7
  store i64 0, i64* %72, align 8
  br label %107

73:                                               ; preds = %60
  %74 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 1
  store i32 1, i32* %74, align 8
  br label %91

75:                                               ; preds = %32
  %76 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 1
  %77 = load i32, i32* %76, align 8
  %78 = icmp ne i32 %77, 1
  %79 = or i1 %41, %78
  br i1 %79, label %80, label %91

80:                                               ; preds = %75
  br i1 %41, label %81, label %87

81:                                               ; preds = %80
  %82 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 7
  %83 = load i64, i64* %82, align 8
  %84 = add i64 %83, 1
  store i64 %84, i64* %82, align 8
  %85 = icmp ugt i64 %84, 75
  br i1 %85, label %86, label %87

86:                                               ; preds = %81
  store i32 3, i32* %76, align 8
  br label %107

87:                                               ; preds = %81, %80
  store %"struct.media::Vp8FrameHeader"* null, %"struct.media::Vp8FrameHeader"** %10, align 8
  %88 = icmp eq %"struct.media::Vp8FrameHeader"* %33, null
  br i1 %88, label %107, label %89

89:                                               ; preds = %87
  %90 = bitcast %"struct.media::Vp8FrameHeader"* %33 to i8*
  tail call void @_ZdlPv(i8* %90) #13
  br label %107

91:                                               ; preds = %73, %75
  %92 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 13, i32 0, i32 0, i32 0
  %93 = load %"class.media::VP8Decoder::VP8Accelerator"*, %"class.media::VP8Decoder::VP8Accelerator"** %92, align 8
  %94 = bitcast %"class.media::VP8Decoder::VP8Accelerator"* %93 to %"class.media::VP8Picture"* (%"class.media::VP8Decoder::VP8Accelerator"*)***
  %95 = load %"class.media::VP8Picture"* (%"class.media::VP8Decoder::VP8Accelerator"*)**, %"class.media::VP8Picture"* (%"class.media::VP8Decoder::VP8Accelerator"*)*** %94, align 8
  %96 = getelementptr inbounds %"class.media::VP8Picture"* (%"class.media::VP8Decoder::VP8Accelerator"*)*, %"class.media::VP8Picture"* (%"class.media::VP8Decoder::VP8Accelerator"*)** %95, i64 2
  %97 = load %"class.media::VP8Picture"* (%"class.media::VP8Decoder::VP8Accelerator"*)*, %"class.media::VP8Picture"* (%"class.media::VP8Decoder::VP8Accelerator"*)** %96, align 8
  %98 = tail call %"class.media::VP8Picture"* %97(%"class.media::VP8Decoder::VP8Accelerator"* %93) #12
  %99 = icmp eq %"class.media::VP8Picture"* %98, null
  br i1 %99, label %107, label %100

100:                                              ; preds = %91
  %101 = tail call zeroext i1 @_ZN5media10VP8Decoder27DecodeAndOutputCurrentFrameE13scoped_refptrINS_10VP8PictureEE(%"class.media::VP8Decoder"* %0, %"class.media::VP8Picture"* nonnull %98)
  br i1 %101, label %104, label %102

102:                                              ; preds = %100
  %103 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 1
  store i32 3, i32* %103, align 8
  br label %107

104:                                              ; preds = %100
  %105 = load i32, i32* %37, align 8
  store i32 %105, i32* %34, align 4
  %106 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 7
  store i64 0, i64* %106, align 8
  br label %107

107:                                              ; preds = %91, %102, %104, %45, %64, %89, %87, %86, %5, %1, %30
  %108 = phi i32 [ 0, %30 ], [ 2, %1 ], [ 2, %5 ], [ 0, %86 ], [ 2, %87 ], [ 2, %89 ], [ 1, %64 ], [ 0, %45 ], [ 2, %104 ], [ 0, %102 ], [ 3, %91 ]
  ret i32 %108
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

declare void @_ZN5media14Vp8FrameHeaderC1Ev(%"struct.media::Vp8FrameHeader"*) unnamed_addr #5

declare zeroext i1 @_ZN5media9Vp8Parser10ParseFrameEPKhmPNS_14Vp8FrameHeaderE(%"class.media::Vp8Parser"*, i8*, i64, %"struct.media::Vp8FrameHeader"*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5media10VP8Decoder27DecodeAndOutputCurrentFrameE13scoped_refptrINS_10VP8PictureEE(%"class.media::VP8Decoder"*, %"class.media::VP8Picture"*) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 10
  %4 = bitcast %"class.gfx::Size"* %3 to i64*
  %5 = load i64, i64* %4, align 4
  %6 = getelementptr inbounds %"class.media::VP8Picture", %"class.media::VP8Picture"* %1, i64 0, i32 0, i32 3, i32 0, i32 0
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds %"class.media::VP8Picture", %"class.media::VP8Picture"* %1, i64 0, i32 0, i32 3, i32 0, i32 1
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %"class.media::VP8Picture", %"class.media::VP8Picture"* %1, i64 0, i32 0, i32 3, i32 1
  %9 = bitcast %"class.gfx::Size"* %8 to i64*
  store i64 %5, i64* %9, align 8
  %10 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 5
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %"class.media::VP8Picture", %"class.media::VP8Picture"* %1, i64 0, i32 0, i32 2
  store i32 %11, i32* %12, align 4
  %13 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %14 = load %"struct.media::Vp8FrameHeader"*, %"struct.media::Vp8FrameHeader"** %13, align 8
  %15 = getelementptr inbounds %"struct.media::Vp8FrameHeader", %"struct.media::Vp8FrameHeader"* %14, i64 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %27

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"struct.media::Vp8FrameHeader", %"struct.media::Vp8FrameHeader"* %14, i64 0, i32 7
  %20 = load i8, i8* %19, align 2
  %21 = zext i8 %20 to i32
  %22 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 11
  store i32 %21, i32* %22, align 8
  %23 = getelementptr inbounds %"struct.media::Vp8FrameHeader", %"struct.media::Vp8FrameHeader"* %14, i64 0, i32 10
  %24 = load i8, i8* %23, align 2
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 12
  store i32 %25, i32* %26, align 4
  br label %48

27:                                               ; preds = %2
  %28 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %3, i64 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = trunc i32 %29 to i16
  %31 = getelementptr inbounds %"struct.media::Vp8FrameHeader", %"struct.media::Vp8FrameHeader"* %14, i64 0, i32 6
  store i16 %30, i16* %31, align 8
  %32 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 10, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = trunc i32 %33 to i16
  %35 = load %"struct.media::Vp8FrameHeader"*, %"struct.media::Vp8FrameHeader"** %13, align 8
  %36 = getelementptr inbounds %"struct.media::Vp8FrameHeader", %"struct.media::Vp8FrameHeader"* %35, i64 0, i32 9
  store i16 %34, i16* %36, align 4
  %37 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 11
  %38 = load i32, i32* %37, align 8
  %39 = trunc i32 %38 to i8
  %40 = load %"struct.media::Vp8FrameHeader"*, %"struct.media::Vp8FrameHeader"** %13, align 8
  %41 = getelementptr inbounds %"struct.media::Vp8FrameHeader", %"struct.media::Vp8FrameHeader"* %40, i64 0, i32 7
  store i8 %39, i8* %41, align 2
  %42 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 12
  %43 = load i32, i32* %42, align 4
  %44 = trunc i32 %43 to i8
  %45 = load %"struct.media::Vp8FrameHeader"*, %"struct.media::Vp8FrameHeader"** %13, align 8
  %46 = getelementptr inbounds %"struct.media::Vp8FrameHeader", %"struct.media::Vp8FrameHeader"* %45, i64 0, i32 10
  store i8 %44, i8* %46, align 2
  %47 = load %"struct.media::Vp8FrameHeader"*, %"struct.media::Vp8FrameHeader"** %13, align 8
  br label %48

48:                                               ; preds = %27, %18
  %49 = phi %"struct.media::Vp8FrameHeader"* [ %47, %27 ], [ %14, %18 ]
  %50 = getelementptr inbounds %"struct.media::Vp8FrameHeader", %"struct.media::Vp8FrameHeader"* %49, i64 0, i32 3
  %51 = load i8, i8* %50, align 2, !range !2
  %52 = getelementptr inbounds %"class.media::VP8Picture", %"class.media::VP8Picture"* %1, i64 0, i32 1
  %53 = ptrtoint %"struct.media::Vp8FrameHeader"* %49 to i64
  store %"struct.media::Vp8FrameHeader"* null, %"struct.media::Vp8FrameHeader"** %13, align 8
  %54 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %52, i64 0, i32 0, i32 0, i32 0
  %55 = load %"struct.media::Vp8FrameHeader"*, %"struct.media::Vp8FrameHeader"** %54, align 8
  %56 = bitcast %"class.std::__1::unique_ptr"* %52 to i64*
  store i64 %53, i64* %56, align 8
  %57 = icmp eq %"struct.media::Vp8FrameHeader"* %55, null
  br i1 %57, label %60, label %58

58:                                               ; preds = %48
  %59 = bitcast %"struct.media::Vp8FrameHeader"* %55 to i8*
  tail call void @_ZdlPv(i8* %59) #13
  br label %60

60:                                               ; preds = %48, %58
  %61 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 13, i32 0, i32 0, i32 0
  %62 = load %"class.media::VP8Decoder::VP8Accelerator"*, %"class.media::VP8Decoder::VP8Accelerator"** %61, align 8
  %63 = icmp eq %"class.media::VP8Picture"* %1, null
  br i1 %63, label %67, label %64

64:                                               ; preds = %60
  %65 = getelementptr inbounds %"class.media::VP8Picture", %"class.media::VP8Picture"* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = atomicrmw add i32* %65, i32 1 monotonic
  br label %67

67:                                               ; preds = %60, %64
  %68 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 4
  %69 = bitcast %"class.media::VP8Decoder::VP8Accelerator"* %62 to i1 (%"class.media::VP8Decoder::VP8Accelerator"*, %"class.media::VP8Picture"*, %"class.media::Vp8ReferenceFrameVector"*)***
  %70 = load i1 (%"class.media::VP8Decoder::VP8Accelerator"*, %"class.media::VP8Picture"*, %"class.media::Vp8ReferenceFrameVector"*)**, i1 (%"class.media::VP8Decoder::VP8Accelerator"*, %"class.media::VP8Picture"*, %"class.media::Vp8ReferenceFrameVector"*)*** %69, align 8
  %71 = getelementptr inbounds i1 (%"class.media::VP8Decoder::VP8Accelerator"*, %"class.media::VP8Picture"*, %"class.media::Vp8ReferenceFrameVector"*)*, i1 (%"class.media::VP8Decoder::VP8Accelerator"*, %"class.media::VP8Picture"*, %"class.media::Vp8ReferenceFrameVector"*)** %70, i64 3
  %72 = load i1 (%"class.media::VP8Decoder::VP8Accelerator"*, %"class.media::VP8Picture"*, %"class.media::Vp8ReferenceFrameVector"*)*, i1 (%"class.media::VP8Decoder::VP8Accelerator"*, %"class.media::VP8Picture"*, %"class.media::Vp8ReferenceFrameVector"*)** %71, align 8
  %73 = tail call zeroext i1 %72(%"class.media::VP8Decoder::VP8Accelerator"* %62, %"class.media::VP8Picture"* %1, %"class.media::Vp8ReferenceFrameVector"* dereferenceable(24) %68) #12
  br i1 %73, label %74, label %94

74:                                               ; preds = %67
  %75 = icmp eq i8 %51, 0
  br i1 %75, label %87, label %76

76:                                               ; preds = %74
  %77 = load %"class.media::VP8Decoder::VP8Accelerator"*, %"class.media::VP8Decoder::VP8Accelerator"** %61, align 8
  br i1 %63, label %81, label %78

78:                                               ; preds = %76
  %79 = getelementptr inbounds %"class.media::VP8Picture", %"class.media::VP8Picture"* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = atomicrmw add i32* %79, i32 1 monotonic
  br label %81

81:                                               ; preds = %76, %78
  %82 = bitcast %"class.media::VP8Decoder::VP8Accelerator"* %77 to i1 (%"class.media::VP8Decoder::VP8Accelerator"*, %"class.media::VP8Picture"*)***
  %83 = load i1 (%"class.media::VP8Decoder::VP8Accelerator"*, %"class.media::VP8Picture"*)**, i1 (%"class.media::VP8Decoder::VP8Accelerator"*, %"class.media::VP8Picture"*)*** %82, align 8
  %84 = getelementptr inbounds i1 (%"class.media::VP8Decoder::VP8Accelerator"*, %"class.media::VP8Picture"*)*, i1 (%"class.media::VP8Decoder::VP8Accelerator"*, %"class.media::VP8Picture"*)** %83, i64 4
  %85 = load i1 (%"class.media::VP8Decoder::VP8Accelerator"*, %"class.media::VP8Picture"*)*, i1 (%"class.media::VP8Decoder::VP8Accelerator"*, %"class.media::VP8Picture"*)** %84, align 8
  %86 = tail call zeroext i1 %85(%"class.media::VP8Decoder::VP8Accelerator"* %77, %"class.media::VP8Picture"* %1) #12
  br i1 %86, label %87, label %94

87:                                               ; preds = %81, %74
  br i1 %63, label %91, label %88

88:                                               ; preds = %87
  %89 = getelementptr inbounds %"class.media::VP8Picture", %"class.media::VP8Picture"* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = atomicrmw add i32* %89, i32 1 monotonic
  br label %91

91:                                               ; preds = %87, %88
  tail call void @_ZN5media23Vp8ReferenceFrameVector7RefreshE13scoped_refptrINS_10VP8PictureEE(%"class.media::Vp8ReferenceFrameVector"* %68, %"class.media::VP8Picture"* %1) #12
  %92 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 8
  %93 = bitcast i8** %92 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %93, i8 0, i64 16, i1 false)
  br label %94

94:                                               ; preds = %81, %67, %91
  %95 = phi i1 [ true, %91 ], [ false, %67 ], [ false, %81 ]
  br i1 %63, label %108, label %96

96:                                               ; preds = %94
  %97 = getelementptr inbounds %"class.media::VP8Picture", %"class.media::VP8Picture"* %1, i64 0, i32 0, i32 1
  %98 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %99 = atomicrmw sub i32* %98, i32 1 acq_rel
  %100 = icmp eq i32 %99, 1
  br i1 %100, label %101, label %108

101:                                              ; preds = %96
  %102 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %97, i64 -2
  %103 = bitcast %"class.base::RefCountedThreadSafe"* %102 to %"class.media::CodecPicture"*
  %104 = bitcast %"class.base::RefCountedThreadSafe"* %102 to void (%"class.media::CodecPicture"*)***
  %105 = load void (%"class.media::CodecPicture"*)**, void (%"class.media::CodecPicture"*)*** %104, align 8
  %106 = getelementptr inbounds void (%"class.media::CodecPicture"*)*, void (%"class.media::CodecPicture"*)** %105, i64 1
  %107 = load void (%"class.media::CodecPicture"*)*, void (%"class.media::CodecPicture"*)** %106, align 8
  tail call void %107(%"class.media::CodecPicture"* nonnull %103) #12
  br label %108

108:                                              ; preds = %94, %96, %101
  ret i1 %95
}

declare void @_ZN5media23Vp8ReferenceFrameVector7RefreshE13scoped_refptrINS_10VP8PictureEE(%"class.media::Vp8ReferenceFrameVector"*, %"class.media::VP8Picture"*) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK5media10VP8Decoder10GetPicSizeEv(%"class.media::VP8Decoder"* nocapture readonly) unnamed_addr #9 align 2 {
  %2 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 10
  %3 = bitcast %"class.gfx::Size"* %2 to i64*
  %4 = load i64, i64* %3, align 8
  ret i64 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZNK5media10VP8Decoder14GetVisibleRectEv(%"class.media::VP8Decoder"* nocapture readonly) unnamed_addr #9 align 2 {
  %2 = getelementptr inbounds %"class.media::VP8Decoder", %"class.media::VP8Decoder"* %0, i64 0, i32 10
  %3 = bitcast %"class.gfx::Size"* %2 to i64*
  %4 = load i64, i64* %3, align 4
  %5 = insertvalue { i64, i64 } { i64 0, i64 undef }, i64 %4, 1
  ret { i64, i64 } %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK5media10VP8Decoder10GetProfileEv(%"class.media::VP8Decoder"* nocapture readnone) unnamed_addr #1 align 2 {
  ret i32 11
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZNK5media10VP8Decoder11GetBitDepthEv(%"class.media::VP8Decoder"* nocapture readnone) unnamed_addr #1 align 2 {
  ret i8 8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK5media10VP8Decoder24GetRequiredNumOfPicturesEv(%"class.media::VP8Decoder"* nocapture readnone) unnamed_addr #1 align 2 {
  ret i64 9
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK5media10VP8Decoder21GetNumReferenceFramesEv(%"class.media::VP8Decoder"* nocapture readnone) unnamed_addr #1 align 2 {
  ret i64 4
}

declare void @__cxa_pure_virtual() unnamed_addr

declare i8* @_ZNK5media24ReadOnlyUnalignedMapping6memoryEv(%"class.media::ReadOnlyUnalignedMapping"*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #10

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { argmemonly nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
