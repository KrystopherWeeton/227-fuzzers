; ModuleID = '../../third_party/blink/renderer/platform/graphics/squashing_disallowed_reasons.cc'
source_filename = "../../third_party/blink/renderer/platform/graphics/squashing_disallowed_reasons.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap" = type { i32, i8*, i8* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8**, i32, i32 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }

$_ZN3WTF6VectorIPKcLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS2_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIPKcEEmm = comdat any

@_ZN5blink12_GLOBAL__N_136kSquashingDisallowedReasonsStringMapE = internal constant [19 x %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap"] [%"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap" { i32 1, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.1, i32 0, i32 0) }, %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap" { i32 2, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.3, i32 0, i32 0) }, %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap" { i32 4, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.5, i32 0, i32 0) }, %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap" { i32 8, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.7, i32 0, i32 0) }, %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap" { i32 16, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.9, i32 0, i32 0) }, %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap" { i32 32, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.11, i32 0, i32 0) }, %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap" { i32 64, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.13, i32 0, i32 0) }, %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap" { i32 128, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.15, i32 0, i32 0) }, %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap" { i32 256, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.17, i32 0, i32 0) }, %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap" { i32 512, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.19, i32 0, i32 0) }, %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap" { i32 1024, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.21, i32 0, i32 0) }, %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap" { i32 2048, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([108 x i8], [108 x i8]* @.str.23, i32 0, i32 0) }, %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap" { i32 4096, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.25, i32 0, i32 0) }, %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap" { i32 8192, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.27, i32 0, i32 0) }, %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap" { i32 16384, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.29, i32 0, i32 0) }, %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap" { i32 32768, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.31, i32 0, i32 0) }, %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap" { i32 65536, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.33, i32 0, i32 0) }, %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap" { i32 131072, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.35, i32 0, i32 0) }, %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap" { i32 262144, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.37, i32 0, i32 0) }], align 16
@.str = private unnamed_addr constant [35 x i8] c"scrollsWithRespectToSquashingLayer\00", align 1
@.str.1 = private unnamed_addr constant [80 x i8] c"Cannot be squashed since this layer scrolls with respect to the squashing layer\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"squashingSparsityExceeded\00", align 1
@.str.3 = private unnamed_addr constant [66 x i8] c"Cannot be squashed as the squashing layer would become too sparse\00", align 1
@.str.4 = private unnamed_addr constant [35 x i8] c"squashingClippingContainerMismatch\00", align 1
@.str.5 = private unnamed_addr constant [98 x i8] c"Cannot be squashed because this layer has a different clipping container than the squashing layer\00", align 1
@.str.6 = private unnamed_addr constant [33 x i8] c"squashingOpacityAncestorMismatch\00", align 1
@.str.7 = private unnamed_addr constant [96 x i8] c"Cannot be squashed because this layer has a different opacity ancestor than the squashing layer\00", align 1
@.str.8 = private unnamed_addr constant [35 x i8] c"squashingTransformAncestorMismatch\00", align 1
@.str.9 = private unnamed_addr constant [98 x i8] c"Cannot be squashed because this layer has a different transform ancestor than the squashing layer\00", align 1
@.str.10 = private unnamed_addr constant [42 x i8] c"squashingPreserve3DSortingContextMismatch\00", align 1
@.str.11 = private unnamed_addr constant [107 x i8] c"Cannot be squashed because this layer is part of a different 3-DRendering Context than the squashing layer\00", align 1
@.str.12 = private unnamed_addr constant [32 x i8] c"squashingFilterAncestorMismatch\00", align 1
@.str.13 = private unnamed_addr constant [123 x i8] c"Cannot be squashed because this layer has a different filter ancestor than the squashing layer, or this layer has a filter\00", align 1
@.str.14 = private unnamed_addr constant [30 x i8] c"squashingWouldBreakPaintOrder\00", align 1
@.str.15 = private unnamed_addr constant [48 x i8] c"Cannot be squashed without breaking paint order\00", align 1
@.str.16 = private unnamed_addr constant [27 x i8] c"squashingVideoIsDisallowed\00", align 1
@.str.17 = private unnamed_addr constant [33 x i8] c"Squashing video is not supported\00", align 1
@.str.18 = private unnamed_addr constant [43 x i8] c"squashingLayoutEmbeddedContentIsDisallowed\00", align 1
@.str.19 = private unnamed_addr constant [54 x i8] c"Squashing a frame, iframe or plugin is not supported.\00", align 1
@.str.20 = private unnamed_addr constant [28 x i8] c"squashingBlendingDisallowed\00", align 1
@.str.21 = private unnamed_addr constant [50 x i8] c"Squashing a layer with blending is not supported.\00", align 1
@.str.22 = private unnamed_addr constant [38 x i8] c"squashingNearestFixedPositionMismatch\00", align 1
@.str.23 = private unnamed_addr constant [108 x i8] c"Cannot be squashed because this layer has a different nearest fixed position layer than the squashing layer\00", align 1
@.str.24 = private unnamed_addr constant [26 x i8] c"squashingLayerIsAnimating\00", align 1
@.str.25 = private unnamed_addr constant [46 x i8] c"Cannot squash into a layer that is animating.\00", align 1
@.str.26 = private unnamed_addr constant [39 x i8] c"squashingLayerRenderingContextMismatch\00", align 1
@.str.27 = private unnamed_addr constant [49 x i8] c"Cannot squash layers with different 3D contexts.\00", align 1
@.str.28 = private unnamed_addr constant [43 x i8] c"SquashingDisallowedReasonFragmentedContent\00", align 1
@.str.29 = private unnamed_addr constant [61 x i8] c"Cannot squash layers that are inside fragmentation contexts.\00", align 1
@.str.30 = private unnamed_addr constant [42 x i8] c"SquashingDisallowedReasonClipPathMismatch\00", align 1
@.str.31 = private unnamed_addr constant [50 x i8] c"Cannot squash layers across clip-path boundaries.\00", align 1
@.str.32 = private unnamed_addr constant [38 x i8] c"SquashingDisallowedReasonMaskMismatch\00", align 1
@.str.33 = private unnamed_addr constant [45 x i8] c"Cannot squash layers across mask boundaries.\00", align 1
@.str.34 = private unnamed_addr constant [58 x i8] c"SquashingDisallowedReasonCrossesLayoutContainmentBoundary\00", align 1
@.str.35 = private unnamed_addr constant [56 x i8] c"Cannot squash layer across layout containment boundary.\00", align 1
@.str.36 = private unnamed_addr constant [34 x i8] c"SquashingDisallowedReasonDisabled\00", align 1
@.str.37 = private unnamed_addr constant [39 x i8] c"Squashing is disabled by runtime flag.\00", align 1
@.str.40 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.41 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPKcEES2_v = private unnamed_addr constant [60 x i8] c"const char *WTF::GetStringWithTypeName() [T = const char *]\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink25SquashingDisallowedReason10ShortNamesEj(%"class.WTF::Vector"* noalias sret, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = bitcast %"class.WTF::Vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false) #5
  %7 = icmp eq i32 %1, 0
  br i1 %7, label %32, label %8

8:                                                ; preds = %2, %29
  %9 = phi %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap"* [ %30, %29 ], [ getelementptr inbounds ([19 x %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap"], [19 x %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap"]* @_ZN5blink12_GLOBAL__N_136kSquashingDisallowedReasonsStringMapE, i64 0, i64 0), %2 ]
  %10 = getelementptr inbounds %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap", %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap"* %9, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, %1
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %29, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap", %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap"* %9, i64 0, i32 1
  %16 = load i32, i32* %5, align 4
  %17 = load i32, i32* %4, align 8
  %18 = icmp eq i32 %16, %17
  br i1 %18, label %28, label %19, !prof !2

19:                                               ; preds = %14
  %20 = load i8**, i8*** %3, align 8
  %21 = zext i32 %16 to i64
  %22 = getelementptr inbounds i8*, i8** %20, i64 %21
  %23 = bitcast i8** %15 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast i8** %22 to i64*
  store i64 %24, i64* %25, align 8
  %26 = load i32, i32* %5, align 4
  %27 = add i32 %26, 1
  store i32 %27, i32* %5, align 4
  br label %29

28:                                               ; preds = %14
  tail call void @_ZN3WTF6VectorIPKcLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS2_EEvOT_(%"class.WTF::Vector"* %0, i8** dereferenceable(8) %15) #5
  br label %29

29:                                               ; preds = %28, %19, %8
  %30 = getelementptr inbounds %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap", %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap"* %9, i64 1
  %31 = icmp eq %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap"* %30, getelementptr inbounds ([19 x %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap"], [19 x %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap"]* @_ZN5blink12_GLOBAL__N_136kSquashingDisallowedReasonsStringMapE, i64 1, i64 0)
  br i1 %31, label %32, label %8

32:                                               ; preds = %29, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink25SquashingDisallowedReason12DescriptionsEj(%"class.WTF::Vector"* noalias sret, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = bitcast %"class.WTF::Vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false) #5
  %7 = icmp eq i32 %1, 0
  br i1 %7, label %32, label %8

8:                                                ; preds = %2, %29
  %9 = phi %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap"* [ %30, %29 ], [ getelementptr inbounds ([19 x %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap"], [19 x %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap"]* @_ZN5blink12_GLOBAL__N_136kSquashingDisallowedReasonsStringMapE, i64 0, i64 0), %2 ]
  %10 = getelementptr inbounds %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap", %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap"* %9, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = and i32 %11, %1
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %29, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap", %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap"* %9, i64 0, i32 2
  %16 = load i32, i32* %5, align 4
  %17 = load i32, i32* %4, align 8
  %18 = icmp eq i32 %16, %17
  br i1 %18, label %28, label %19, !prof !2

19:                                               ; preds = %14
  %20 = load i8**, i8*** %3, align 8
  %21 = zext i32 %16 to i64
  %22 = getelementptr inbounds i8*, i8** %20, i64 %21
  %23 = bitcast i8** %15 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = bitcast i8** %22 to i64*
  store i64 %24, i64* %25, align 8
  %26 = load i32, i32* %5, align 4
  %27 = add i32 %26, 1
  store i32 %27, i32* %5, align 4
  br label %29

28:                                               ; preds = %14
  tail call void @_ZN3WTF6VectorIPKcLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS2_EEvOT_(%"class.WTF::Vector"* %0, i8** dereferenceable(8) %15) #5
  br label %29

29:                                               ; preds = %28, %19, %8
  %30 = getelementptr inbounds %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap", %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap"* %9, i64 1
  %31 = icmp eq %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap"* %30, getelementptr inbounds ([19 x %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap"], [19 x %"struct.blink::(anonymous namespace)::SquashingDisallowedReasonStringMap"]* @_ZN5blink12_GLOBAL__N_136kSquashingDisallowedReasonsStringMapE, i64 1, i64 0)
  br i1 %31, label %32, label %8

32:                                               ; preds = %29, %2
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIPKcLj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS2_EEvOT_(%"class.WTF::Vector"*, i8** dereferenceable(8)) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i8**, i8*** %6, align 8
  %8 = icmp ugt i8** %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i8*, i8** %7, i64 %10
  %12 = icmp ugt i8** %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !3

24:                                               ; preds = %13
  %25 = icmp eq i8** %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIPKcEEmm(i64 %26) #5
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPKcEES2_v, i64 0, i64 0)) #5
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to i8**
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load i8**, i8*** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne i8** %38, null
  %41 = and i1 %39, %40
  %42 = bitcast i8** %38 to i8*
  br i1 %41, label %43, label %49, !prof !3

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #5
  %47 = bitcast %"class.WTF::Vector"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #5
  %51 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to i8**
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint i8** %1 to i64
  %56 = ptrtoint i8** %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !3

69:                                               ; preds = %54
  %70 = icmp eq i8** %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIPKcEEmm(i64 %71) #5
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPKcEES2_v, i64 0, i64 0)) #5
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load i8**, i8*** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne i8** %78, null
  %81 = and i1 %79, %80
  %82 = bitcast i8** %78 to i8*
  br i1 %81, label %83, label %89, !prof !3

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #5
  %87 = bitcast %"class.WTF::Vector"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #5
  %91 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to i8**
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi i8** [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds i8*, i8** %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi i8** [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi i8** [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds i8*, i8** %100, i64 %103
  %105 = bitcast i8** %101 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = bitcast i8** %104 to i64*
  store i64 %106, i64* %107, align 8
  %108 = load i32, i32* %3, align 4
  %109 = add i32 %108, 1
  store i32 %109, i32* %3, align 4
  ret void
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIPKcEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #5
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #5
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.40, i64 0, i64 0), i8* %11, i8* %12) #5
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.41, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #5
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #5
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #5
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #5
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
