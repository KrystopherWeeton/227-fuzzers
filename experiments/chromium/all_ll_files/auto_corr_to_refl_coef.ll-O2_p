; ModuleID = '../../third_party/webrtc/common_audio/signal_processing/auto_corr_to_refl_coef.c'
source_filename = "../../third_party/webrtc/common_audio/signal_processing/auto_corr_to_refl_coef.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcSpl_AutoCorrToReflCoef(i32* nocapture readonly, i32, i16* nocapture) local_unnamed_addr #0 {
  %4 = alloca [14 x i16], align 16
  %5 = alloca [14 x i16], align 16
  %6 = alloca [14 x i16], align 16
  %7 = bitcast [14 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %7) #3
  %8 = getelementptr inbounds [14 x i16], [14 x i16]* %4, i64 0, i64 0
  %9 = getelementptr inbounds [14 x i16], [14 x i16]* %4, i64 0, i64 1
  %10 = bitcast [14 x i16]* %5 to i8*
  %11 = bitcast [14 x i16]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 28, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %10) #3
  %12 = getelementptr inbounds [14 x i16], [14 x i16]* %5, i64 0, i64 0
  %13 = getelementptr inbounds [14 x i16], [14 x i16]* %5, i64 0, i64 1
  %14 = bitcast [14 x i16]* %6 to i8*
  %15 = bitcast [14 x i16]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 28, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 28, i8* nonnull %14) #3
  %16 = getelementptr inbounds [14 x i16], [14 x i16]* %6, i64 0, i64 1
  %17 = bitcast [14 x i16]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -86, i64 28, i1 false)
  %18 = load i32, i32* %0, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %25, label %20

20:                                               ; preds = %3
  %21 = ashr i32 %18, 31
  %22 = xor i32 %21, %18
  %23 = tail call i32 @llvm.ctlz.i32(i32 %22, i1 false) #3, !range !2
  %24 = add nsw i32 %23, -1
  br label %25

25:                                               ; preds = %3, %20
  %26 = phi i32 [ %24, %20 ], [ 0, %3 ]
  %27 = shl i32 %18, %26
  %28 = lshr i32 %27, 16
  %29 = trunc i32 %28 to i16
  store i16 %29, i16* %8, align 16
  store i16 %29, i16* %12, align 16
  %30 = icmp slt i32 %1, 1
  br i1 %30, label %380, label %31

31:                                               ; preds = %25
  %32 = add i32 %1, -1
  %33 = zext i32 %32 to i64
  %34 = add nuw nsw i64 %33, 1
  %35 = icmp ult i64 %34, 8
  br i1 %35, label %36, label %61

36:                                               ; preds = %143, %61, %31
  %37 = phi i32* [ %0, %61 ], [ %0, %31 ], [ %104, %143 ]
  %38 = phi i16* [ %16, %61 ], [ %16, %31 ], [ %105, %143 ]
  %39 = phi i16* [ %13, %61 ], [ %13, %31 ], [ %106, %143 ]
  %40 = phi i16* [ %9, %61 ], [ %9, %31 ], [ %107, %143 ]
  %41 = phi i32 [ 1, %61 ], [ 1, %31 ], [ %109, %143 ]
  %42 = and i32 %1, 1
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %54, label %44

44:                                               ; preds = %36
  %45 = getelementptr inbounds i32, i32* %37, i64 1
  %46 = load i32, i32* %45, align 4
  %47 = shl i32 %46, %26
  %48 = lshr i32 %47, 16
  %49 = trunc i32 %48 to i16
  store i16 %49, i16* %40, align 2
  %50 = getelementptr inbounds i16, i16* %38, i64 1
  store i16 %49, i16* %38, align 2
  %51 = getelementptr inbounds i16, i16* %40, i64 1
  %52 = getelementptr inbounds i16, i16* %39, i64 1
  store i16 %49, i16* %39, align 2
  %53 = add nuw i32 %41, 1
  br label %54

54:                                               ; preds = %36, %44
  %55 = phi i32* [ %37, %36 ], [ %45, %44 ]
  %56 = phi i16* [ %38, %36 ], [ %50, %44 ]
  %57 = phi i16* [ %39, %36 ], [ %52, %44 ]
  %58 = phi i16* [ %40, %36 ], [ %51, %44 ]
  %59 = phi i32 [ %41, %36 ], [ %53, %44 ]
  %60 = icmp eq i32 %41, %1
  br i1 %60, label %145, label %148

61:                                               ; preds = %31
  %62 = getelementptr inbounds [14 x i16], [14 x i16]* %4, i64 0, i64 1
  %63 = add i32 %1, -1
  %64 = zext i32 %63 to i64
  %65 = add nuw nsw i64 %64, 2
  %66 = getelementptr [14 x i16], [14 x i16]* %4, i64 0, i64 %65
  %67 = getelementptr inbounds [14 x i16], [14 x i16]* %6, i64 0, i64 1
  %68 = getelementptr [14 x i16], [14 x i16]* %6, i64 0, i64 %65
  %69 = getelementptr inbounds [14 x i16], [14 x i16]* %5, i64 0, i64 1
  %70 = getelementptr [14 x i16], [14 x i16]* %5, i64 0, i64 %65
  %71 = getelementptr i32, i32* %0, i64 1
  %72 = getelementptr i32, i32* %0, i64 %65
  %73 = icmp ult i16* %62, %68
  %74 = icmp ult i16* %67, %66
  %75 = and i1 %73, %74
  %76 = icmp ult i16* %62, %70
  %77 = icmp ult i16* %69, %66
  %78 = and i1 %76, %77
  %79 = or i1 %75, %78
  %80 = bitcast i32* %72 to i16*
  %81 = icmp ult i16* %62, %80
  %82 = bitcast i16* %66 to i32*
  %83 = icmp ult i32* %71, %82
  %84 = and i1 %81, %83
  %85 = or i1 %79, %84
  %86 = icmp ult i16* %67, %70
  %87 = icmp ult i16* %69, %68
  %88 = and i1 %86, %87
  %89 = or i1 %85, %88
  %90 = bitcast i32* %72 to i16*
  %91 = icmp ult i16* %67, %90
  %92 = bitcast i16* %68 to i32*
  %93 = icmp ult i32* %71, %92
  %94 = and i1 %91, %93
  %95 = or i1 %89, %94
  %96 = bitcast i32* %72 to i16*
  %97 = icmp ult i16* %69, %96
  %98 = bitcast i16* %70 to i32*
  %99 = icmp ult i32* %71, %98
  %100 = and i1 %97, %99
  %101 = or i1 %95, %100
  br i1 %101, label %36, label %102

102:                                              ; preds = %61
  %103 = and i64 %34, 8589934584
  %104 = getelementptr i32, i32* %0, i64 %103
  %105 = getelementptr i16, i16* %16, i64 %103
  %106 = getelementptr i16, i16* %13, i64 %103
  %107 = getelementptr i16, i16* %9, i64 %103
  %108 = trunc i64 %103 to i32
  %109 = or i32 %108, 1
  %110 = insertelement <4 x i32> undef, i32 %26, i32 0
  %111 = shufflevector <4 x i32> %110, <4 x i32> undef, <4 x i32> zeroinitializer
  %112 = insertelement <4 x i32> undef, i32 %26, i32 0
  %113 = shufflevector <4 x i32> %112, <4 x i32> undef, <4 x i32> zeroinitializer
  %114 = getelementptr i32, i32* %0, i64 1
  br label %115

115:                                              ; preds = %115, %102
  %116 = phi i64 [ 0, %102 ], [ %141, %115 ]
  %117 = getelementptr i16, i16* %16, i64 %116
  %118 = getelementptr i16, i16* %13, i64 %116
  %119 = getelementptr i16, i16* %9, i64 %116
  %120 = getelementptr inbounds i32, i32* %114, i64 %116
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4, !alias.scope !3
  %123 = getelementptr inbounds i32, i32* %120, i64 4
  %124 = bitcast i32* %123 to <4 x i32>*
  %125 = load <4 x i32>, <4 x i32>* %124, align 4, !alias.scope !3
  %126 = shl <4 x i32> %122, %111
  %127 = shl <4 x i32> %125, %113
  %128 = lshr <4 x i32> %126, <i32 16, i32 16, i32 16, i32 16>
  %129 = lshr <4 x i32> %127, <i32 16, i32 16, i32 16, i32 16>
  %130 = trunc <4 x i32> %128 to <4 x i16>
  %131 = trunc <4 x i32> %129 to <4 x i16>
  %132 = bitcast i16* %119 to <4 x i16>*
  store <4 x i16> %130, <4 x i16>* %132, align 2, !alias.scope !6, !noalias !8
  %133 = getelementptr i16, i16* %119, i64 4
  %134 = bitcast i16* %133 to <4 x i16>*
  store <4 x i16> %131, <4 x i16>* %134, align 2, !alias.scope !6, !noalias !8
  %135 = bitcast i16* %117 to <4 x i16>*
  store <4 x i16> %130, <4 x i16>* %135, align 2, !alias.scope !11, !noalias !12
  %136 = getelementptr i16, i16* %117, i64 4
  %137 = bitcast i16* %136 to <4 x i16>*
  store <4 x i16> %131, <4 x i16>* %137, align 2, !alias.scope !11, !noalias !12
  %138 = bitcast i16* %118 to <4 x i16>*
  store <4 x i16> %130, <4 x i16>* %138, align 2, !alias.scope !13, !noalias !3
  %139 = getelementptr i16, i16* %118, i64 4
  %140 = bitcast i16* %139 to <4 x i16>*
  store <4 x i16> %131, <4 x i16>* %140, align 2, !alias.scope !13, !noalias !3
  %141 = add i64 %116, 8
  %142 = icmp eq i64 %141, %103
  br i1 %142, label %143, label %115, !llvm.loop !14

143:                                              ; preds = %115
  %144 = icmp eq i64 %34, %103
  br i1 %144, label %145, label %36

145:                                              ; preds = %54, %148, %143
  br i1 %30, label %380, label %146

146:                                              ; preds = %145
  %147 = load i16, i16* %12, align 16
  br label %173

148:                                              ; preds = %54, %148
  %149 = phi i32* [ %163, %148 ], [ %55, %54 ]
  %150 = phi i16* [ %168, %148 ], [ %56, %54 ]
  %151 = phi i16* [ %170, %148 ], [ %57, %54 ]
  %152 = phi i16* [ %169, %148 ], [ %58, %54 ]
  %153 = phi i32 [ %171, %148 ], [ %59, %54 ]
  %154 = getelementptr inbounds i32, i32* %149, i64 1
  %155 = load i32, i32* %154, align 4
  %156 = shl i32 %155, %26
  %157 = lshr i32 %156, 16
  %158 = trunc i32 %157 to i16
  store i16 %158, i16* %152, align 2
  %159 = getelementptr inbounds i16, i16* %150, i64 1
  store i16 %158, i16* %150, align 2
  %160 = getelementptr inbounds i16, i16* %152, i64 1
  %161 = getelementptr inbounds i16, i16* %151, i64 1
  store i16 %158, i16* %151, align 2
  %162 = add nuw i32 %153, 1
  %163 = getelementptr inbounds i32, i32* %149, i64 2
  %164 = load i32, i32* %163, align 4
  %165 = shl i32 %164, %26
  %166 = lshr i32 %165, 16
  %167 = trunc i32 %166 to i16
  store i16 %167, i16* %160, align 2
  %168 = getelementptr inbounds i16, i16* %150, i64 2
  store i16 %167, i16* %159, align 2
  %169 = getelementptr inbounds i16, i16* %152, i64 2
  %170 = getelementptr inbounds i16, i16* %151, i64 2
  store i16 %167, i16* %161, align 2
  %171 = add nuw i32 %153, 2
  %172 = icmp eq i32 %162, %1
  br i1 %172, label %145, label %148, !llvm.loop !16

173:                                              ; preds = %371, %146
  %174 = phi i16 [ %147, %146 ], [ %331, %371 ]
  %175 = phi i16 [ %29, %146 ], [ %331, %371 ]
  %176 = phi i32 [ %1, %146 ], [ %374, %371 ]
  %177 = phi i32 [ 1, %146 ], [ %372, %371 ]
  %178 = phi i16* [ %2, %146 ], [ %373, %371 ]
  %179 = load i16, i16* %13, align 2
  %180 = icmp slt i16 %179, 0
  %181 = sub i16 0, %179
  %182 = select i1 %180, i16 %181, i16 %179
  %183 = sext i16 %182 to i32
  %184 = icmp slt i16 %175, %182
  br i1 %184, label %185, label %193

185:                                              ; preds = %173
  store i16 %174, i16* %12, align 16
  %186 = icmp sgt i32 %177, %1
  br i1 %186, label %380, label %187

187:                                              ; preds = %185
  %188 = bitcast i16* %178 to i8*
  %189 = sub i32 %1, %177
  %190 = zext i32 %189 to i64
  %191 = shl nuw nsw i64 %190, 1
  %192 = add nuw nsw i64 %191, 2
  call void @llvm.memset.p0i8.i64(i8* align 2 %188, i8 0, i64 %192, i1 false)
  br label %380

193:                                              ; preds = %173
  store i16 0, i16* %178, align 2
  %194 = icmp eq i16 %179, 0
  br i1 %194, label %315, label %195

195:                                              ; preds = %193
  %196 = sext i16 %175 to i32
  %197 = shl nsw i32 %183, 1
  %198 = icmp slt i32 %197, %196
  %199 = xor i1 %198, true
  %200 = zext i1 %199 to i16
  %201 = select i1 %198, i32 0, i32 %196
  %202 = sub nsw i32 %197, %201
  %203 = shl nuw nsw i16 %200, 1
  %204 = shl nsw i32 %202, 1
  %205 = icmp slt i32 %204, %196
  %206 = xor i1 %205, true
  %207 = zext i1 %206 to i16
  %208 = or i16 %203, %207
  %209 = select i1 %205, i32 0, i32 %196
  %210 = sub nsw i32 %204, %209
  %211 = shl nuw nsw i16 %208, 1
  %212 = shl nsw i32 %210, 1
  %213 = icmp slt i32 %212, %196
  %214 = xor i1 %213, true
  %215 = zext i1 %214 to i16
  %216 = or i16 %211, %215
  %217 = select i1 %213, i32 0, i32 %196
  %218 = sub nsw i32 %212, %217
  %219 = shl nuw nsw i16 %216, 1
  %220 = shl i32 %218, 1
  %221 = icmp slt i32 %220, %196
  %222 = xor i1 %221, true
  %223 = zext i1 %222 to i16
  %224 = or i16 %219, %223
  %225 = select i1 %221, i32 0, i32 %196
  %226 = sub nsw i32 %220, %225
  %227 = shl i16 %224, 1
  %228 = shl i32 %226, 1
  %229 = icmp slt i32 %228, %196
  %230 = xor i1 %229, true
  %231 = zext i1 %230 to i16
  %232 = or i16 %227, %231
  %233 = select i1 %229, i32 0, i32 %196
  %234 = sub nsw i32 %228, %233
  %235 = shl i16 %232, 1
  %236 = shl i32 %234, 1
  %237 = icmp slt i32 %236, %196
  %238 = xor i1 %237, true
  %239 = zext i1 %238 to i16
  %240 = or i16 %235, %239
  %241 = select i1 %237, i32 0, i32 %196
  %242 = sub nsw i32 %236, %241
  %243 = shl i16 %240, 1
  %244 = shl i32 %242, 1
  %245 = icmp slt i32 %244, %196
  %246 = xor i1 %245, true
  %247 = zext i1 %246 to i16
  %248 = or i16 %243, %247
  %249 = select i1 %245, i32 0, i32 %196
  %250 = sub nsw i32 %244, %249
  %251 = shl i16 %248, 1
  %252 = shl i32 %250, 1
  %253 = icmp slt i32 %252, %196
  %254 = xor i1 %253, true
  %255 = zext i1 %254 to i16
  %256 = or i16 %251, %255
  %257 = select i1 %253, i32 0, i32 %196
  %258 = sub nsw i32 %252, %257
  %259 = shl i16 %256, 1
  %260 = shl i32 %258, 1
  %261 = icmp slt i32 %260, %196
  %262 = xor i1 %261, true
  %263 = zext i1 %262 to i16
  %264 = or i16 %259, %263
  %265 = select i1 %261, i32 0, i32 %196
  %266 = sub nsw i32 %260, %265
  %267 = shl i16 %264, 1
  %268 = shl i32 %266, 1
  %269 = icmp slt i32 %268, %196
  %270 = xor i1 %269, true
  %271 = zext i1 %270 to i16
  %272 = or i16 %267, %271
  %273 = select i1 %269, i32 0, i32 %196
  %274 = sub nsw i32 %268, %273
  %275 = shl i16 %272, 1
  %276 = shl i32 %274, 1
  %277 = icmp slt i32 %276, %196
  %278 = xor i1 %277, true
  %279 = zext i1 %278 to i16
  %280 = or i16 %275, %279
  %281 = select i1 %277, i32 0, i32 %196
  %282 = sub nsw i32 %276, %281
  %283 = shl i16 %280, 1
  %284 = shl i32 %282, 1
  %285 = icmp slt i32 %284, %196
  %286 = xor i1 %285, true
  %287 = zext i1 %286 to i16
  %288 = or i16 %283, %287
  %289 = select i1 %285, i32 0, i32 %196
  %290 = sub nsw i32 %284, %289
  %291 = shl i16 %288, 1
  %292 = shl i32 %290, 1
  %293 = icmp slt i32 %292, %196
  %294 = xor i1 %293, true
  %295 = zext i1 %294 to i16
  %296 = or i16 %291, %295
  %297 = select i1 %293, i32 0, i32 %196
  %298 = sub nsw i32 %292, %297
  %299 = shl i16 %296, 1
  %300 = shl i32 %298, 1
  %301 = icmp slt i32 %300, %196
  %302 = xor i1 %301, true
  %303 = zext i1 %302 to i16
  %304 = or i16 %299, %303
  %305 = select i1 %301, i32 0, i32 %196
  %306 = sub nsw i32 %300, %305
  %307 = shl i16 %304, 1
  %308 = shl i32 %306, 1
  %309 = icmp sge i32 %308, %196
  %310 = zext i1 %309 to i16
  %311 = or i16 %307, %310
  store i16 %311, i16* %178, align 2
  %312 = icmp sgt i16 %179, 0
  br i1 %312, label %313, label %315

313:                                              ; preds = %195
  %314 = sub i16 0, %311
  store i16 %314, i16* %178, align 2
  br label %315

315:                                              ; preds = %193, %195, %313
  %316 = phi i16 [ 0, %193 ], [ %311, %195 ], [ %314, %313 ]
  %317 = icmp eq i32 %177, %1
  br i1 %317, label %378, label %318

318:                                              ; preds = %315
  %319 = sext i16 %179 to i32
  %320 = sext i16 %316 to i32
  %321 = sext i16 %175 to i32
  %322 = shl nsw i32 %319, 1
  %323 = mul i32 %322, %320
  %324 = add i32 %323, 32768
  %325 = ashr i32 %324, 16
  %326 = add nsw i32 %325, %321
  %327 = icmp sgt i32 %326, -32768
  %328 = select i1 %327, i32 %326, i32 -32768
  %329 = icmp slt i32 %328, 32767
  %330 = select i1 %329, i32 %328, i32 32767
  %331 = trunc i32 %330 to i16
  %332 = icmp slt i32 %177, %1
  br i1 %332, label %333, label %371

333:                                              ; preds = %318, %368
  %334 = phi i16 [ %370, %368 ], [ %316, %318 ]
  %335 = phi i16* [ %369, %368 ], [ %16, %318 ]
  %336 = phi i16* [ %341, %368 ], [ %13, %318 ]
  %337 = phi i32 [ %366, %368 ], [ 1, %318 ]
  %338 = load i16, i16* %335, align 2
  %339 = sext i16 %338 to i32
  %340 = sext i16 %334 to i32
  %341 = getelementptr inbounds i16, i16* %336, i64 1
  %342 = load i16, i16* %341, align 2
  %343 = sext i16 %342 to i32
  %344 = shl nsw i32 %339, 1
  %345 = mul i32 %344, %340
  %346 = add i32 %345, 32768
  %347 = ashr i32 %346, 16
  %348 = add nsw i32 %347, %343
  %349 = icmp sgt i32 %348, -32768
  %350 = select i1 %349, i32 %348, i32 -32768
  %351 = icmp slt i32 %350, 32767
  %352 = select i1 %351, i32 %350, i32 32767
  %353 = trunc i32 %352 to i16
  store i16 %353, i16* %336, align 2
  %354 = load i16, i16* %178, align 2
  %355 = sext i16 %354 to i32
  %356 = shl nsw i32 %343, 1
  %357 = mul i32 %356, %355
  %358 = add i32 %357, 32768
  %359 = ashr i32 %358, 16
  %360 = add nsw i32 %359, %339
  %361 = icmp sgt i32 %360, -32768
  %362 = select i1 %361, i32 %360, i32 -32768
  %363 = icmp slt i32 %362, 32767
  %364 = select i1 %363, i32 %362, i32 32767
  %365 = trunc i32 %364 to i16
  store i16 %365, i16* %335, align 2
  %366 = add nuw i32 %337, 1
  %367 = icmp eq i32 %366, %176
  br i1 %367, label %371, label %368

368:                                              ; preds = %333
  %369 = getelementptr inbounds i16, i16* %335, i64 1
  %370 = load i16, i16* %178, align 2
  br label %333

371:                                              ; preds = %333, %318
  %372 = add nuw i32 %177, 1
  %373 = getelementptr inbounds i16, i16* %178, i64 1
  %374 = add i32 %176, -1
  %375 = icmp eq i32 %177, %1
  br i1 %375, label %376, label %173

376:                                              ; preds = %371
  %377 = trunc i32 %330 to i16
  br label %378

378:                                              ; preds = %315, %376
  %379 = phi i16 [ %377, %376 ], [ %174, %315 ]
  store i16 %379, i16* %12, align 16
  br label %380

380:                                              ; preds = %378, %25, %187, %145, %185
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %14) #3
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %10) #3
  call void @llvm.lifetime.end.p0i8(i64 28, i8* nonnull %7) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = !{!9, !10, !4}
!9 = distinct !{!9, !5}
!10 = distinct !{!10, !5}
!11 = !{!9}
!12 = !{!10, !4}
!13 = !{!10}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.isvectorized", i32 1}
!16 = distinct !{!16, !15}
