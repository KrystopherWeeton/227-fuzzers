; ModuleID = '../../third_party/blink/renderer/core/layout/shapes/polygon_shape.cc'
source_filename = "../../third_party/blink/renderer/core/layout/shapes/polygon_shape.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::OffsetPolygonEdge" = type { %"class.blink::VertexPair", %"class.blink::FloatPoint", %"class.blink::FloatPoint" }
%"class.blink::VertexPair" = type { i32 (...)** }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::PolygonShape" = type { %"class.blink::Shape", %"class.blink::FloatPolygon" }
%"class.blink::Shape" = type { i32 (...)**, i8, float }
%"class.blink::FloatPolygon" = type { %"class.WTF::Vector", %"class.blink::FloatRect", i8, %"class.WTF::Vector.0", %"class.WTF::PODIntervalTree" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::FloatPoint"*, i32, i32 }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatSize" = type { float, float }
%"class.WTF::Vector.0" = type { %"class.WTF::VectorBuffer.1" }
%"class.WTF::VectorBuffer.1" = type { %"class.WTF::VectorBufferBase.2" }
%"class.WTF::VectorBufferBase.2" = type { %"class.blink::FloatPolygonEdge"*, i32, i32 }
%"class.blink::FloatPolygonEdge" = type { %"class.blink::VertexPair", i32, i32, i32, %"class.blink::FloatPolygon"* }
%"class.WTF::PODIntervalTree" = type { %"class.WTF::PODRedBlackTree.base", [7 x i8] }
%"class.WTF::PODRedBlackTree.base" = type <{ i32 (...)**, %class.scoped_refptr, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, i8 }>
%class.scoped_refptr = type { %"class.WTF::PODFreeListArena"* }
%"class.WTF::PODFreeListArena" = type { %"class.WTF::RefCounted", %class.scoped_refptr.23, %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk"* }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%class.scoped_refptr.23 = type { %"class.WTF::PODArena"* }
%"class.WTF::PODArena" = type { %"class.WTF::RefCounted.24", %class.scoped_refptr.26, %"class.WTF::PODArena::Chunk"*, i64, %"class.WTF::Vector.29" }
%"class.WTF::RefCounted.24" = type { %"class.base::RefCounted.25" }
%"class.base::RefCounted.25" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.26 = type { %"class.WTF::PODArena::Allocator"* }
%"class.WTF::PODArena::Allocator" = type <{ i32 (...)**, %"class.WTF::RefCounted.27", [4 x i8] }>
%"class.WTF::RefCounted.27" = type { %"class.base::RefCounted.28" }
%"class.base::RefCounted.28" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::PODArena::Chunk" = type { %"class.WTF::PODArena::Allocator"*, i8*, i64, i64 }
%"class.WTF::Vector.29" = type { %"class.WTF::VectorBuffer.30" }
%"class.WTF::VectorBuffer.30" = type { %"class.WTF::VectorBufferBase.31" }
%"class.WTF::VectorBufferBase.31" = type { %"class.std::__1::unique_ptr"*, i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.WTF::PODArena::Chunk"* }
%"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk" = type { %"struct.WTF::PODFreeListArena<WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node>::FixedSizeMemoryChunk"* }
%"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node" = type { i32 (...)**, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, i32, %"class.WTF::PODInterval" }
%"class.WTF::PODInterval" = type { float, float, %"class.blink::FloatPolygonEdge"*, float, float }
%"class.WTF::Vector.5" = type { %"class.WTF::VectorBuffer.6" }
%"class.WTF::VectorBuffer.6" = type { %"class.WTF::VectorBufferBase.7" }
%"class.WTF::VectorBufferBase.7" = type { %"class.blink::FloatPolygonEdge"**, i32, i32 }
%"struct.blink::Shape::DisplayPaths" = type { %"class.blink::Path", %"class.blink::Path" }
%"class.blink::Path" = type { %class.SkPath }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.13", %"struct.std::__1::atomic.13", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.11, %class.SkTDArray.12, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.11 = type { i8*, i32, i32 }
%class.SkTDArray.12 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.18 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.13" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.18 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.19", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.19" = type { %"struct.std::__1::__atomic_base.20" }
%"struct.std::__1::__atomic_base.20" = type { %"struct.std::__1::__cxx_atomic_impl.21" }
%"struct.std::__1::__cxx_atomic_impl.21" = type { %"struct.std::__1::__cxx_atomic_base_impl.22" }
%"struct.std::__1::__cxx_atomic_base_impl.22" = type { i8 }
%"struct.std::__1::atomic.13" = type { %"struct.std::__1::__atomic_base.14" }
%"struct.std::__1::__atomic_base.14" = type { %"struct.std::__1::__atomic_base.15" }
%"struct.std::__1::__atomic_base.15" = type { %"struct.std::__1::__cxx_atomic_impl.16" }
%"struct.std::__1::__cxx_atomic_impl.16" = type { %"struct.std::__1::__cxx_atomic_base_impl.17" }
%"struct.std::__1::__cxx_atomic_base_impl.17" = type { i8 }
%"class.WTF::PODRedBlackTree" = type <{ i32 (...)**, %class.scoped_refptr, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, i8, [7 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZNK5blink17OffsetPolygonEdge7Vertex1Ev = comdat any

$_ZNK5blink17OffsetPolygonEdge7Vertex2Ev = comdat any

$_ZN5blink12PolygonShapeD2Ev = comdat any

$_ZN5blink12PolygonShapeD0Ev = comdat any

$_ZNK5blink12PolygonShape7IsEmptyEv = comdat any

$_ZN5blink17OffsetPolygonEdgeD0Ev = comdat any

$_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEED2Ev = comdat any

$_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEED0Ev = comdat any

$_ZNK3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE15CheckInvariantsEv = comdat any

$_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE10UpdateNodeEPNS6_4NodeE = comdat any

$_ZNK3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE23CheckInvariantsFromNodeEPNS6_4NodeEPi = comdat any

$_ZN5blink10VertexPairD2Ev = comdat any

$_ZN3WTF6VectorIPKN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZTVN5blink17OffsetPolygonEdgeE = comdat any

$_ZTVN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEEE = comdat any

@_ZTVN5blink12PolygonShapeE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::PolygonShape"*)* @_ZN5blink12PolygonShapeD2Ev to i8*), i8* bitcast (void (%"class.blink::PolygonShape"*)* @_ZN5blink12PolygonShapeD0Ev to i8*), i8* bitcast ({ i64, i64 } (%"class.blink::PolygonShape"*)* @_ZNK5blink12PolygonShape29ShapeMarginLogicalBoundingBoxEv to i8*), i8* bitcast (i1 (%"class.blink::PolygonShape"*)* @_ZNK5blink12PolygonShape7IsEmptyEv to i8*), i8* bitcast ({ i64, i8 } (%"class.blink::PolygonShape"*, i32, i32)* @_ZNK5blink12PolygonShape19GetExcludedIntervalENS_10LayoutUnitES1_ to i8*), i8* bitcast (void (%"class.blink::PolygonShape"*, %"struct.blink::Shape::DisplayPaths"*)* @_ZNK5blink12PolygonShape17BuildDisplayPathsERNS_5Shape12DisplayPathsE to i8*)] }, align 8
@_ZTVN5blink17OffsetPolygonEdgeE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::VertexPair"*)* @_ZN5blink10VertexPairD2Ev to i8*), i8* bitcast (void (%"class.blink::OffsetPolygonEdge"*)* @_ZN5blink17OffsetPolygonEdgeD0Ev to i8*), i8* bitcast (%"class.blink::FloatPoint"* (%"class.blink::OffsetPolygonEdge"*)* @_ZNK5blink17OffsetPolygonEdge7Vertex1Ev to i8*), i8* bitcast (%"class.blink::FloatPoint"* (%"class.blink::OffsetPolygonEdge"*)* @_ZNK5blink17OffsetPolygonEdge7Vertex2Ev to i8*)] }, comdat, align 8
@.str = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@_ZTVN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEEE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.WTF::PODRedBlackTree"*)* @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEED2Ev to i8*), i8* bitcast (void (%"class.WTF::PODRedBlackTree"*)* @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEED0Ev to i8*), i8* bitcast (i1 (%"class.WTF::PODRedBlackTree"*)* @_ZNK3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE15CheckInvariantsEv to i8*), i8* bitcast (i1 (%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*)* @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE10UpdateNodeEPNS6_4NodeE to i8*)] }, comdat, align 8

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK5blink17OffsetPolygonEdge10XInterceptEf(%"class.blink::OffsetPolygonEdge"*, float) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %0, i64 0, i32 1, i32 1
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %0, i64 0, i32 2, i32 1
  %6 = load float, float* %5, align 4
  %7 = fcmp oeq float %4, %6
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %0, i64 0, i32 1, i32 0
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %0, i64 0, i32 2, i32 0
  %12 = load float, float* %11, align 4
  %13 = fcmp oeq float %10, %12
  br i1 %13, label %14, label %31

14:                                               ; preds = %8, %2
  %15 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %0, i64 0, i32 0
  %16 = bitcast %"class.blink::OffsetPolygonEdge"* %0 to %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)***
  %17 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %16, align 8
  %18 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %17, i64 2
  %19 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %18, align 8
  %20 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %19(%"class.blink::VertexPair"* %15) #9
  %21 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %20, i64 0, i32 0
  %22 = load float, float* %21, align 4
  %23 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %16, align 8
  %24 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %23, i64 3
  %25 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %24, align 8
  %26 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %25(%"class.blink::VertexPair"* %15) #9
  %27 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %26, i64 0, i32 0
  %28 = load float, float* %27, align 4
  %29 = fcmp olt float %28, %22
  %30 = select i1 %29, float %28, float %22
  br label %92

31:                                               ; preds = %8
  %32 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %0, i64 0, i32 0
  %33 = bitcast %"class.blink::OffsetPolygonEdge"* %0 to %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)***
  %34 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %33, align 8
  %35 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %34, i64 2
  %36 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %35, align 8
  %37 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %36(%"class.blink::VertexPair"* %32) #9
  %38 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %37, i64 0, i32 1
  %39 = load float, float* %38, align 4
  %40 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %33, align 8
  %41 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %40, i64 3
  %42 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %41, align 8
  %43 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %42(%"class.blink::VertexPair"* %32) #9
  %44 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %43, i64 0, i32 1
  %45 = load float, float* %44, align 4
  %46 = fcmp olt float %45, %39
  %47 = select i1 %46, float %45, float %39
  %48 = fcmp oeq float %47, %1
  br i1 %48, label %49, label %57

49:                                               ; preds = %31
  %50 = load float, float* %3, align 4
  %51 = load float, float* %5, align 4
  %52 = fcmp olt float %50, %51
  br i1 %52, label %53, label %55

53:                                               ; preds = %49
  %54 = load float, float* %9, align 4
  br label %92

55:                                               ; preds = %49
  %56 = load float, float* %11, align 4
  br label %92

57:                                               ; preds = %31
  %58 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %33, align 8
  %59 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %58, i64 2
  %60 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %59, align 8
  %61 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %60(%"class.blink::VertexPair"* %32) #9
  %62 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %61, i64 0, i32 1
  %63 = load float, float* %62, align 4
  %64 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %33, align 8
  %65 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %64, i64 3
  %66 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %65, align 8
  %67 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %66(%"class.blink::VertexPair"* %32) #9
  %68 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %67, i64 0, i32 1
  %69 = load float, float* %68, align 4
  %70 = fcmp olt float %63, %69
  %71 = select i1 %70, float %69, float %63
  %72 = fcmp oeq float %71, %1
  br i1 %72, label %73, label %81

73:                                               ; preds = %57
  %74 = load float, float* %3, align 4
  %75 = load float, float* %5, align 4
  %76 = fcmp ogt float %74, %75
  br i1 %76, label %77, label %79

77:                                               ; preds = %73
  %78 = load float, float* %9, align 4
  br label %92

79:                                               ; preds = %73
  %80 = load float, float* %11, align 4
  br label %92

81:                                               ; preds = %57
  %82 = load float, float* %9, align 4
  %83 = load float, float* %3, align 4
  %84 = fsub float %1, %83
  %85 = load float, float* %11, align 4
  %86 = fsub float %85, %82
  %87 = fmul float %84, %86
  %88 = load float, float* %5, align 4
  %89 = fsub float %88, %83
  %90 = fdiv float %87, %89
  %91 = fadd float %82, %90
  br label %92

92:                                               ; preds = %77, %79, %53, %55, %81, %14
  %93 = phi float [ %30, %14 ], [ %91, %81 ], [ %54, %53 ], [ %56, %55 ], [ %78, %77 ], [ %80, %79 ]
  ret float %93
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK5blink17OffsetPolygonEdge7Vertex1Ev(%"class.blink::OffsetPolygonEdge"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %0, i64 0, i32 1
  ret %"class.blink::FloatPoint"* %2
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK5blink17OffsetPolygonEdge7Vertex2Ev(%"class.blink::OffsetPolygonEdge"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %0, i64 0, i32 2
  ret %"class.blink::FloatPoint"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden <2 x float> @_ZNK5blink17OffsetPolygonEdge17ClippedEdgeXRangeEff(%"class.blink::OffsetPolygonEdge"*, float, float) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %0, i64 0, i32 0
  %5 = bitcast %"class.blink::OffsetPolygonEdge"* %0 to %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)***
  %6 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %5, align 8
  %7 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %6, i64 2
  %8 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %7, align 8
  %9 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %8(%"class.blink::VertexPair"* %4) #9
  %10 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %9, i64 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %5, align 8
  %13 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %12, i64 3
  %14 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %13, align 8
  %15 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %14(%"class.blink::VertexPair"* %4) #9
  %16 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %15, i64 0, i32 1
  %17 = load float, float* %16, align 4
  %18 = fcmp olt float %17, %11
  %19 = select i1 %18, float %17, float %11
  %20 = fcmp ugt float %19, %2
  br i1 %20, label %198, label %21

21:                                               ; preds = %3
  %22 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %5, align 8
  %23 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %22, i64 2
  %24 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %23, align 8
  %25 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %24(%"class.blink::VertexPair"* %4) #9
  %26 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %25, i64 0, i32 1
  %27 = load float, float* %26, align 4
  %28 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %5, align 8
  %29 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %28, i64 3
  %30 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %29, align 8
  %31 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %30(%"class.blink::VertexPair"* %4) #9
  %32 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %31, i64 0, i32 1
  %33 = load float, float* %32, align 4
  %34 = fcmp olt float %27, %33
  %35 = select i1 %34, float %33, float %27
  %36 = fcmp ult float %35, %1
  br i1 %36, label %198, label %37

37:                                               ; preds = %21
  %38 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %5, align 8
  %39 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %38, i64 2
  %40 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %39, align 8
  %41 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %40(%"class.blink::VertexPair"* %4) #9
  %42 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %41, i64 0, i32 1
  %43 = load float, float* %42, align 4
  %44 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %5, align 8
  %45 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %44, i64 3
  %46 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %45, align 8
  %47 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %46(%"class.blink::VertexPair"* %4) #9
  %48 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %47, i64 0, i32 1
  %49 = load float, float* %48, align 4
  %50 = fcmp olt float %43, %49
  %51 = select i1 %50, float %49, float %43
  %52 = fcmp oeq float %51, %1
  br i1 %52, label %53, label %69

53:                                               ; preds = %37
  %54 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %5, align 8
  %55 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %54, i64 2
  %56 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %55, align 8
  %57 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %56(%"class.blink::VertexPair"* %4) #9
  %58 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %57, i64 0, i32 1
  %59 = load float, float* %58, align 4
  %60 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %5, align 8
  %61 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %60, i64 3
  %62 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %61, align 8
  %63 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %62(%"class.blink::VertexPair"* %4) #9
  %64 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %63, i64 0, i32 1
  %65 = load float, float* %64, align 4
  %66 = fcmp olt float %65, %59
  %67 = select i1 %66, float %65, float %59
  %68 = fcmp ugt float %67, %1
  br i1 %68, label %69, label %198

69:                                               ; preds = %53, %37
  %70 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %5, align 8
  %71 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %70, i64 2
  %72 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %71, align 8
  %73 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %72(%"class.blink::VertexPair"* %4) #9
  %74 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %73, i64 0, i32 1
  %75 = load float, float* %74, align 4
  %76 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %5, align 8
  %77 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %76, i64 3
  %78 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %77, align 8
  %79 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %78(%"class.blink::VertexPair"* %4) #9
  %80 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %79, i64 0, i32 1
  %81 = load float, float* %80, align 4
  %82 = fcmp olt float %81, %75
  %83 = select i1 %82, float %81, float %75
  %84 = fcmp oeq float %83, %2
  br i1 %84, label %85, label %101

85:                                               ; preds = %69
  %86 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %5, align 8
  %87 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %86, i64 2
  %88 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %87, align 8
  %89 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %88(%"class.blink::VertexPair"* %4) #9
  %90 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %89, i64 0, i32 1
  %91 = load float, float* %90, align 4
  %92 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %5, align 8
  %93 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %92, i64 3
  %94 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %93, align 8
  %95 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %94(%"class.blink::VertexPair"* %4) #9
  %96 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %95, i64 0, i32 1
  %97 = load float, float* %96, align 4
  %98 = fcmp olt float %91, %97
  %99 = select i1 %98, float %97, float %91
  %100 = fcmp ult float %99, %2
  br i1 %100, label %101, label %198

101:                                              ; preds = %85, %69
  %102 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %5, align 8
  %103 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %102, i64 2
  %104 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %103, align 8
  %105 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %104(%"class.blink::VertexPair"* %4) #9
  %106 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %105, i64 0, i32 1
  %107 = load float, float* %106, align 4
  %108 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %5, align 8
  %109 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %108, i64 3
  %110 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %109, align 8
  %111 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %110(%"class.blink::VertexPair"* %4) #9
  %112 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %111, i64 0, i32 1
  %113 = load float, float* %112, align 4
  %114 = fcmp olt float %113, %107
  %115 = select i1 %114, float %113, float %107
  %116 = fcmp ult float %115, %1
  br i1 %116, label %164, label %117

117:                                              ; preds = %101
  %118 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %5, align 8
  %119 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %118, i64 2
  %120 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %119, align 8
  %121 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %120(%"class.blink::VertexPair"* %4) #9
  %122 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %121, i64 0, i32 1
  %123 = load float, float* %122, align 4
  %124 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %5, align 8
  %125 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %124, i64 3
  %126 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %125, align 8
  %127 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %126(%"class.blink::VertexPair"* %4) #9
  %128 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %127, i64 0, i32 1
  %129 = load float, float* %128, align 4
  %130 = fcmp olt float %123, %129
  %131 = select i1 %130, float %129, float %123
  %132 = fcmp ugt float %131, %2
  br i1 %132, label %164, label %133

133:                                              ; preds = %117
  %134 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %5, align 8
  %135 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %134, i64 2
  %136 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %135, align 8
  %137 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %136(%"class.blink::VertexPair"* %4) #9
  %138 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %137, i64 0, i32 0
  %139 = load float, float* %138, align 4
  %140 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %5, align 8
  %141 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %140, i64 3
  %142 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %141, align 8
  %143 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %142(%"class.blink::VertexPair"* %4) #9
  %144 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %143, i64 0, i32 0
  %145 = load float, float* %144, align 4
  %146 = fcmp olt float %145, %139
  %147 = select i1 %146, float %145, float %139
  %148 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %5, align 8
  %149 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %148, i64 2
  %150 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %149, align 8
  %151 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %150(%"class.blink::VertexPair"* %4) #9
  %152 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %151, i64 0, i32 0
  %153 = load float, float* %152, align 4
  %154 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %5, align 8
  %155 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %154, i64 3
  %156 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %155, align 8
  %157 = tail call dereferenceable(8) %"class.blink::FloatPoint"* %156(%"class.blink::VertexPair"* %4) #9
  %158 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %157, i64 0, i32 0
  %159 = load float, float* %158, align 4
  %160 = fcmp olt float %153, %159
  %161 = select i1 %160, float %159, float %153
  %162 = insertelement <2 x float> undef, float %147, i32 0
  %163 = insertelement <2 x float> %162, float %161, i32 1
  br label %198

164:                                              ; preds = %117, %101
  %165 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %0, i64 0, i32 1
  %166 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %0, i64 0, i32 1, i32 1
  %167 = load float, float* %166, align 4
  %168 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %0, i64 0, i32 2
  %169 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %0, i64 0, i32 2, i32 1
  %170 = load float, float* %169, align 4
  %171 = fcmp olt float %167, %170
  %172 = select i1 %171, %"class.blink::FloatPoint"* %168, %"class.blink::FloatPoint"* %165
  %173 = select i1 %171, float %167, float %170
  %174 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %172, i64 0, i32 0
  %175 = load float, float* %174, align 4
  %176 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %172, i64 0, i32 1
  %177 = load float, float* %176, align 4
  %178 = fcmp olt float %173, %1
  br i1 %178, label %179, label %181

179:                                              ; preds = %164
  %180 = tail call float @_ZNK5blink17OffsetPolygonEdge10XInterceptEf(%"class.blink::OffsetPolygonEdge"* %0, float %1)
  br label %185

181:                                              ; preds = %164
  %182 = select i1 %171, %"class.blink::FloatPoint"* %165, %"class.blink::FloatPoint"* %168
  %183 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %182, i64 0, i32 0
  %184 = load float, float* %183, align 4
  br label %185

185:                                              ; preds = %181, %179
  %186 = phi float [ %180, %179 ], [ %184, %181 ]
  %187 = fcmp ogt float %177, %2
  br i1 %187, label %188, label %190

188:                                              ; preds = %185
  %189 = tail call float @_ZNK5blink17OffsetPolygonEdge10XInterceptEf(%"class.blink::OffsetPolygonEdge"* %0, float %2)
  br label %190

190:                                              ; preds = %185, %188
  %191 = phi float [ %189, %188 ], [ %175, %185 ]
  %192 = fcmp olt float %191, %186
  %193 = select i1 %192, float %191, float %186
  %194 = fcmp olt float %186, %191
  %195 = select i1 %194, float %191, float %186
  %196 = insertelement <2 x float> undef, float %193, i32 0
  %197 = insertelement <2 x float> %196, float %195, i32 1
  br label %198

198:                                              ; preds = %21, %3, %85, %53, %190, %133
  %199 = phi <2 x float> [ %163, %133 ], [ %197, %190 ], [ <float -1.000000e+00, float -2.000000e+00>, %53 ], [ <float -1.000000e+00, float -2.000000e+00>, %85 ], [ <float -1.000000e+00, float -2.000000e+00>, %21 ], [ <float -1.000000e+00, float -2.000000e+00>, %3 ]
  ret <2 x float> %199
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZNK5blink12PolygonShape29ShapeMarginLogicalBoundingBoxEv(%"class.blink::PolygonShape"* nocapture readonly) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 1, i32 1
  %3 = bitcast %"class.blink::FloatRect"* %2 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 8
  %5 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 1, i32 1, i32 1
  %6 = bitcast %"class.blink::FloatSize"* %5 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 8
  %8 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 0, i32 2
  %9 = load float, float* %8, align 4
  %10 = extractelement <2 x float> %4, i32 0
  %11 = fsub float %10, %9
  %12 = extractelement <2 x float> %7, i32 0
  %13 = fadd float %12, %9
  %14 = fadd float %9, %13
  %15 = extractelement <2 x float> %4, i32 1
  %16 = fsub float %15, %9
  %17 = extractelement <2 x float> %7, i32 1
  %18 = fadd float %17, %9
  %19 = fadd float %9, %18
  %20 = fmul float %11, 6.400000e+01
  %21 = fcmp ult float %20, 0xC1E0000000000000
  %22 = fcmp ugt float %20, 0x41DFFFFFE0000000
  %23 = fcmp ogt float %20, 0xC1E0000000000000
  %24 = select i1 %23, float %20, float 0xC1E0000000000000
  %25 = fptosi float %24 to i32
  %26 = select i1 %21, i32 0, i32 2147483647
  %27 = select i1 %22, i32 %26, i32 %25
  %28 = fmul float %16, 6.400000e+01
  %29 = fcmp ult float %28, 0xC1E0000000000000
  %30 = fcmp ugt float %28, 0x41DFFFFFE0000000
  %31 = fcmp ogt float %28, 0xC1E0000000000000
  %32 = select i1 %31, float %28, float 0xC1E0000000000000
  %33 = fptosi float %32 to i32
  %34 = select i1 %29, i32 0, i32 2147483647
  %35 = select i1 %30, i32 %34, i32 %33
  %36 = fmul float %14, 6.400000e+01
  %37 = fcmp ult float %36, 0xC1E0000000000000
  %38 = fcmp ugt float %36, 0x41DFFFFFE0000000
  %39 = fcmp ogt float %36, 0xC1E0000000000000
  %40 = select i1 %39, float %36, float 0xC1E0000000000000
  %41 = fptosi float %40 to i32
  %42 = select i1 %37, i32 0, i32 2147483647
  %43 = select i1 %38, i32 %42, i32 %41
  %44 = fmul float %19, 6.400000e+01
  %45 = fcmp ult float %44, 0xC1E0000000000000
  %46 = fcmp ugt float %44, 0x41DFFFFFE0000000
  %47 = fcmp ogt float %44, 0xC1E0000000000000
  %48 = select i1 %47, float %44, float 0xC1E0000000000000
  %49 = fptosi float %48 to i32
  %50 = select i1 %45, i32 0, i32 2147483647
  %51 = select i1 %46, i32 %50, i32 %49
  %52 = zext i32 %35 to i64
  %53 = shl nuw i64 %52, 32
  %54 = zext i32 %27 to i64
  %55 = or i64 %53, %54
  %56 = insertvalue { i64, i64 } undef, i64 %55, 0
  %57 = zext i32 %51 to i64
  %58 = shl nuw i64 %57, 32
  %59 = zext i32 %43 to i64
  %60 = or i64 %58, %59
  %61 = insertvalue { i64, i64 } %56, i64 %60, 1
  ret { i64, i64 } %61
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i8 } @_ZNK5blink12PolygonShape19GetExcludedIntervalENS_10LayoutUnitES1_(%"class.blink::PolygonShape"*, i32, i32) unnamed_addr #1 align 2 {
  %4 = alloca <2 x float>, align 8
  %5 = alloca <2 x float>, align 8
  %6 = alloca %"class.WTF::Vector.5", align 8
  %7 = alloca %"class.blink::OffsetPolygonEdge", align 8
  %8 = alloca %"class.blink::OffsetPolygonEdge", align 8
  %9 = alloca %"class.blink::OffsetPolygonEdge", align 8
  %10 = sitofp i32 %1 to float
  %11 = fmul float %10, 1.562500e-02
  %12 = sitofp i32 %2 to float
  %13 = fmul float %12, 1.562500e-02
  %14 = fadd float %11, %13
  %15 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 1
  %16 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 1, i32 2
  %17 = load i8, i8* %16, align 8, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %468

19:                                               ; preds = %3
  %20 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 1, i32 1
  %21 = bitcast %"class.blink::FloatRect"* %20 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 8
  %23 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 1, i32 1, i32 1
  %24 = bitcast %"class.blink::FloatSize"* %23 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 8
  %26 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 0, i32 2
  %27 = load float, float* %26, align 4
  %28 = fsub float %11, %27
  %29 = fadd float %14, %27
  %30 = extractelement <2 x float> %25, i32 0
  %31 = fcmp ugt float %30, 0.000000e+00
  br i1 %31, label %32, label %468

32:                                               ; preds = %19
  %33 = extractelement <2 x float> %25, i32 1
  %34 = fcmp ole float %33, 0.000000e+00
  %35 = fcmp ult float %29, %28
  %36 = or i1 %34, %35
  br i1 %36, label %468, label %37

37:                                               ; preds = %32
  %38 = extractelement <2 x float> %22, i32 1
  %39 = fcmp ole float %38, %29
  %40 = fadd float %38, %33
  %41 = fcmp oge float %40, %28
  %42 = and i1 %39, %41
  br i1 %42, label %43, label %468

43:                                               ; preds = %37
  %44 = bitcast %"class.WTF::Vector.5"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %44) #9
  %45 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %6, i64 0, i32 0, i32 0, i32 0
  %46 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %6, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %44, i8 0, i64 16, i1 false) #9
  %47 = call zeroext i1 @_ZNK5blink12FloatPolygon16OverlappingEdgesEffRN3WTF6VectorIPKNS_16FloatPolygonEdgeELj0ENS1_18PartitionAllocatorEEE(%"class.blink::FloatPolygon"* %15, float %28, float %29, %"class.WTF::Vector.5"* nonnull dereferenceable(16) %6) #9
  %48 = xor i1 %47, true
  %49 = load i32, i32* %46, align 4
  %50 = icmp eq i32 %49, 0
  %51 = or i1 %50, %48
  br i1 %51, label %455, label %52

52:                                               ; preds = %43
  %53 = bitcast %"class.blink::OffsetPolygonEdge"* %7 to i8*
  %54 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %7, i64 0, i32 0, i32 0
  %55 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %7, i64 0, i32 1
  %56 = bitcast %"class.blink::FloatPoint"* %55 to <2 x float>*
  %57 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %7, i64 0, i32 2
  %58 = bitcast %"class.blink::FloatPoint"* %57 to <2 x float>*
  %59 = bitcast %"class.blink::OffsetPolygonEdge"* %8 to i8*
  %60 = bitcast <2 x float>* %4 to %"class.blink::FloatSize"*
  %61 = bitcast <2 x float>* %4 to i8*
  %62 = getelementptr inbounds <2 x float>, <2 x float>* %4, i64 0, i64 0
  %63 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %60, i64 0, i32 1
  %64 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %8, i64 0, i32 0, i32 0
  %65 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %8, i64 0, i32 1
  %66 = bitcast %"class.blink::FloatPoint"* %65 to <2 x float>*
  %67 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %8, i64 0, i32 2
  %68 = bitcast %"class.blink::FloatPoint"* %67 to <2 x float>*
  %69 = bitcast %"class.blink::OffsetPolygonEdge"* %9 to i8*
  %70 = bitcast <2 x float>* %5 to %"class.blink::FloatSize"*
  %71 = bitcast <2 x float>* %5 to i8*
  %72 = getelementptr inbounds <2 x float>, <2 x float>* %5, i64 0, i64 0
  %73 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %70, i64 0, i32 1
  %74 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %9, i64 0, i32 0, i32 0
  %75 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %9, i64 0, i32 1
  %76 = bitcast %"class.blink::FloatPoint"* %75 to <2 x float>*
  %77 = getelementptr inbounds %"class.blink::OffsetPolygonEdge", %"class.blink::OffsetPolygonEdge"* %9, i64 0, i32 2
  %78 = bitcast %"class.blink::FloatPoint"* %77 to <2 x float>*
  br label %81

79:                                               ; preds = %429
  %80 = fcmp ugt float %431, %430
  br i1 %80, label %435, label %455

81:                                               ; preds = %52, %429
  %82 = phi i32 [ 0, %52 ], [ %432, %429 ]
  %83 = phi float [ -2.000000e+00, %52 ], [ %431, %429 ]
  %84 = phi float [ -1.000000e+00, %52 ], [ %430, %429 ]
  %85 = call dereferenceable(8) %"class.blink::FloatPolygonEdge"** @_ZN3WTF6VectorIPKN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.5"* nonnull %6, i32 %82) #9
  %86 = load %"class.blink::FloatPolygonEdge"*, %"class.blink::FloatPolygonEdge"** %85, align 8
  %87 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %86, i64 0, i32 0
  %88 = bitcast %"class.blink::FloatPolygonEdge"* %86 to %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)***
  %89 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %88, align 8
  %90 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %89, i64 2
  %91 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %90, align 8
  %92 = call dereferenceable(8) %"class.blink::FloatPoint"* %91(%"class.blink::VertexPair"* %87) #9
  %93 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %92, i64 0, i32 1
  %94 = load float, float* %93, align 4
  %95 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %88, align 8
  %96 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %95, i64 3
  %97 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %96, align 8
  %98 = call dereferenceable(8) %"class.blink::FloatPoint"* %97(%"class.blink::VertexPair"* %87) #9
  %99 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %98, i64 0, i32 1
  %100 = load float, float* %99, align 4
  %101 = fcmp olt float %94, %100
  %102 = select i1 %101, float %100, float %94
  %103 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %88, align 8
  %104 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %103, i64 2
  %105 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %104, align 8
  %106 = call dereferenceable(8) %"class.blink::FloatPoint"* %105(%"class.blink::VertexPair"* %87) #9
  %107 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %106, i64 0, i32 1
  %108 = load float, float* %107, align 4
  %109 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)**, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*** %88, align 8
  %110 = getelementptr inbounds %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %109, i64 3
  %111 = load %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)*, %"class.blink::FloatPoint"* (%"class.blink::VertexPair"*)** %110, align 8
  %112 = call dereferenceable(8) %"class.blink::FloatPoint"* %111(%"class.blink::VertexPair"* %87) #9
  %113 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %112, i64 0, i32 1
  %114 = load float, float* %113, align 4
  %115 = fcmp olt float %114, %108
  %116 = select i1 %115, float %114, float %108
  %117 = fcmp oeq float %102, %116
  br i1 %117, label %429, label %118

118:                                              ; preds = %81
  %119 = load float, float* %26, align 4
  %120 = fcmp une float %119, 0.000000e+00
  br i1 %120, label %153, label %121

121:                                              ; preds = %118
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %53) #9
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink17OffsetPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %54, align 8
  %122 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %86, i64 0, i32 4
  %123 = load %"class.blink::FloatPolygon"*, %"class.blink::FloatPolygon"** %122, align 8
  %124 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %86, i64 0, i32 1
  %125 = load i32, i32* %124, align 8
  %126 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %123, i64 0, i32 0
  %127 = call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %126, i32 %125) #9
  %128 = bitcast %"class.blink::FloatPoint"* %127 to <2 x float>*
  %129 = load <2 x float>, <2 x float>* %128, align 4
  %130 = fadd <2 x float> %129, zeroinitializer
  store <2 x float> %130, <2 x float>* %56, align 8
  %131 = load %"class.blink::FloatPolygon"*, %"class.blink::FloatPolygon"** %122, align 8
  %132 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %86, i64 0, i32 2
  %133 = load i32, i32* %132, align 4
  %134 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %131, i64 0, i32 0
  %135 = call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %134, i32 %133) #9
  %136 = bitcast %"class.blink::FloatPoint"* %135 to <2 x float>*
  %137 = load <2 x float>, <2 x float>* %136, align 4
  %138 = fadd <2 x float> %137, zeroinitializer
  store <2 x float> %138, <2 x float>* %58, align 8
  %139 = call <2 x float> @_ZNK5blink17OffsetPolygonEdge17ClippedEdgeXRangeEff(%"class.blink::OffsetPolygonEdge"* nonnull %7, float %11, float %14)
  %140 = extractelement <2 x float> %139, i32 1
  %141 = extractelement <2 x float> %139, i32 0
  %142 = fcmp olt float %140, %141
  br i1 %142, label %150, label %143

143:                                              ; preds = %121
  %144 = fcmp olt float %83, %84
  br i1 %144, label %150, label %145

145:                                              ; preds = %143
  %146 = fcmp olt float %141, %84
  %147 = select i1 %146, float %141, float %84
  %148 = fcmp olt float %83, %140
  %149 = select i1 %148, float %140, float %83
  br label %150

150:                                              ; preds = %143, %121, %145
  %151 = phi float [ %84, %121 ], [ %147, %145 ], [ %141, %143 ]
  %152 = phi float [ %83, %121 ], [ %149, %145 ], [ %140, %143 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %53) #9
  br label %429

153:                                              ; preds = %118
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %59) #9
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %61) #9
  store float 0xFFFFFFFFE0000000, float* %62, align 8
  store float 0xFFFFFFFFE0000000, float* %63, align 4
  %154 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %86, i64 0, i32 4
  %155 = load %"class.blink::FloatPolygon"*, %"class.blink::FloatPolygon"** %154, align 8
  %156 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %86, i64 0, i32 2
  %157 = load i32, i32* %156, align 4
  %158 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %155, i64 0, i32 0
  %159 = call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %158, i32 %157) #9
  %160 = load %"class.blink::FloatPolygon"*, %"class.blink::FloatPolygon"** %154, align 8
  %161 = getelementptr inbounds %"class.blink::FloatPolygonEdge", %"class.blink::FloatPolygonEdge"* %86, i64 0, i32 1
  %162 = load i32, i32* %161, align 8
  %163 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %160, i64 0, i32 0
  %164 = call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %163, i32 %162) #9
  %165 = bitcast %"class.blink::FloatPoint"* %159 to <2 x float>*
  %166 = load <2 x float>, <2 x float>* %165, align 4
  %167 = bitcast %"class.blink::FloatPoint"* %164 to <2 x float>*
  %168 = load <2 x float>, <2 x float>* %167, align 4
  %169 = fsub <2 x float> %166, %168
  %170 = extractelement <2 x float> %169, i32 0
  %171 = extractelement <2 x float> %169, i32 1
  store <2 x float> %169, <2 x float>* %4, align 8
  %172 = fcmp une float %170, 0.000000e+00
  br i1 %172, label %177, label %173

173:                                              ; preds = %153
  %174 = fcmp ogt float %171, 0.000000e+00
  %175 = select i1 %174, float -1.000000e+00, float 1.000000e+00
  %176 = insertelement <2 x float> <float undef, float 0.000000e+00>, float %175, i32 0
  br label %193

177:                                              ; preds = %153
  %178 = fcmp une float %171, 0.000000e+00
  br i1 %178, label %183, label %179

179:                                              ; preds = %177
  %180 = fcmp ogt float %170, 0.000000e+00
  %181 = select i1 %180, float 1.000000e+00, float -1.000000e+00
  %182 = insertelement <2 x float> <float 0.000000e+00, float undef>, float %181, i32 1
  br label %193

183:                                              ; preds = %177
  %184 = call float @_ZNK5blink9FloatSize14DiagonalLengthEv(%"class.blink::FloatSize"* nonnull %60) #9
  %185 = load float, float* %63, align 4
  %186 = fsub float -0.000000e+00, %185
  %187 = load float, float* %62, align 8
  %188 = insertelement <2 x float> undef, float %186, i32 0
  %189 = insertelement <2 x float> %188, float %187, i32 1
  %190 = insertelement <2 x float> undef, float %184, i32 0
  %191 = shufflevector <2 x float> %190, <2 x float> undef, <2 x i32> zeroinitializer
  %192 = fdiv <2 x float> %189, %191
  br label %193

193:                                              ; preds = %173, %179, %183
  %194 = phi <2 x float> [ %192, %183 ], [ %182, %179 ], [ %176, %173 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %61) #9
  %195 = extractelement <2 x float> %194, i32 0
  %196 = extractelement <2 x float> %194, i32 1
  %197 = load float, float* %26, align 4
  %198 = fmul float %195, %197
  %199 = fmul float %196, %197
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink17OffsetPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %64, align 8
  %200 = load %"class.blink::FloatPolygon"*, %"class.blink::FloatPolygon"** %154, align 8
  %201 = load i32, i32* %161, align 8
  %202 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %200, i64 0, i32 0
  %203 = call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %202, i32 %201) #9
  %204 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %203, i64 0, i32 0
  %205 = load float, float* %204, align 4
  %206 = fsub float %205, %198
  %207 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %203, i64 0, i32 1
  %208 = load float, float* %207, align 4
  %209 = fsub float %208, %199
  %210 = insertelement <2 x float> undef, float %206, i32 0
  %211 = insertelement <2 x float> %210, float %209, i32 1
  store <2 x float> %211, <2 x float>* %66, align 8
  %212 = load %"class.blink::FloatPolygon"*, %"class.blink::FloatPolygon"** %154, align 8
  %213 = load i32, i32* %156, align 4
  %214 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %212, i64 0, i32 0
  %215 = call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %214, i32 %213) #9
  %216 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %215, i64 0, i32 0
  %217 = load float, float* %216, align 4
  %218 = fsub float %217, %198
  %219 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %215, i64 0, i32 1
  %220 = load float, float* %219, align 4
  %221 = fsub float %220, %199
  %222 = insertelement <2 x float> undef, float %218, i32 0
  %223 = insertelement <2 x float> %222, float %221, i32 1
  store <2 x float> %223, <2 x float>* %68, align 8
  %224 = call <2 x float> @_ZNK5blink17OffsetPolygonEdge17ClippedEdgeXRangeEff(%"class.blink::OffsetPolygonEdge"* nonnull %8, float %11, float %14)
  %225 = extractelement <2 x float> %224, i32 1
  %226 = extractelement <2 x float> %224, i32 0
  %227 = fcmp olt float %225, %226
  br i1 %227, label %235, label %228

228:                                              ; preds = %193
  %229 = fcmp olt float %83, %84
  br i1 %229, label %235, label %230

230:                                              ; preds = %228
  %231 = fcmp olt float %226, %84
  %232 = select i1 %231, float %226, float %84
  %233 = fcmp olt float %83, %225
  %234 = select i1 %233, float %225, float %83
  br label %235

235:                                              ; preds = %228, %193, %230
  %236 = phi float [ %84, %193 ], [ %232, %230 ], [ %226, %228 ]
  %237 = phi float [ %83, %193 ], [ %234, %230 ], [ %225, %228 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %59) #9
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %69) #9
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %71) #9
  store float 0xFFFFFFFFE0000000, float* %72, align 8
  store float 0xFFFFFFFFE0000000, float* %73, align 4
  %238 = load %"class.blink::FloatPolygon"*, %"class.blink::FloatPolygon"** %154, align 8
  %239 = load i32, i32* %156, align 4
  %240 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %238, i64 0, i32 0
  %241 = call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %240, i32 %239) #9
  %242 = load %"class.blink::FloatPolygon"*, %"class.blink::FloatPolygon"** %154, align 8
  %243 = load i32, i32* %161, align 8
  %244 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %242, i64 0, i32 0
  %245 = call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %244, i32 %243) #9
  %246 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %241, i64 0, i32 0
  %247 = load float, float* %246, align 4
  %248 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %245, i64 0, i32 0
  %249 = load float, float* %248, align 4
  %250 = fsub float %247, %249
  %251 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %241, i64 0, i32 1
  %252 = load float, float* %251, align 4
  %253 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %245, i64 0, i32 1
  %254 = load float, float* %253, align 4
  %255 = fsub float %252, %254
  %256 = insertelement <2 x float> undef, float %250, i32 0
  %257 = insertelement <2 x float> %256, float %255, i32 1
  store <2 x float> %257, <2 x float>* %5, align 8
  %258 = fcmp une float %250, 0.000000e+00
  br i1 %258, label %263, label %259

259:                                              ; preds = %235
  %260 = fcmp ogt float %255, 0.000000e+00
  %261 = select i1 %260, float -1.000000e+00, float 1.000000e+00
  %262 = insertelement <2 x float> <float undef, float 0.000000e+00>, float %261, i32 0
  br label %279

263:                                              ; preds = %235
  %264 = fcmp une float %255, 0.000000e+00
  br i1 %264, label %269, label %265

265:                                              ; preds = %263
  %266 = fcmp ogt float %250, 0.000000e+00
  %267 = select i1 %266, float 1.000000e+00, float -1.000000e+00
  %268 = insertelement <2 x float> <float 0.000000e+00, float undef>, float %267, i32 1
  br label %279

269:                                              ; preds = %263
  %270 = call float @_ZNK5blink9FloatSize14DiagonalLengthEv(%"class.blink::FloatSize"* nonnull %70) #9
  %271 = load float, float* %73, align 4
  %272 = fsub float -0.000000e+00, %271
  %273 = load float, float* %72, align 8
  %274 = insertelement <2 x float> undef, float %272, i32 0
  %275 = insertelement <2 x float> %274, float %273, i32 1
  %276 = insertelement <2 x float> undef, float %270, i32 0
  %277 = shufflevector <2 x float> %276, <2 x float> undef, <2 x i32> zeroinitializer
  %278 = fdiv <2 x float> %275, %277
  br label %279

279:                                              ; preds = %259, %265, %269
  %280 = phi <2 x float> [ %278, %269 ], [ %268, %265 ], [ %262, %259 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %71) #9
  %281 = load float, float* %26, align 4
  %282 = extractelement <2 x float> %280, i32 0
  %283 = fmul float %282, %281
  %284 = extractelement <2 x float> %280, i32 1
  %285 = fmul float %284, %281
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink17OffsetPolygonEdgeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %74, align 8
  %286 = load %"class.blink::FloatPolygon"*, %"class.blink::FloatPolygon"** %154, align 8
  %287 = load i32, i32* %161, align 8
  %288 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %286, i64 0, i32 0
  %289 = call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %288, i32 %287) #9
  %290 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %289, i64 0, i32 0
  %291 = load float, float* %290, align 4
  %292 = fadd float %283, %291
  %293 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %289, i64 0, i32 1
  %294 = load float, float* %293, align 4
  %295 = fadd float %285, %294
  %296 = insertelement <2 x float> undef, float %292, i32 0
  %297 = insertelement <2 x float> %296, float %295, i32 1
  store <2 x float> %297, <2 x float>* %76, align 8
  %298 = load %"class.blink::FloatPolygon"*, %"class.blink::FloatPolygon"** %154, align 8
  %299 = load i32, i32* %156, align 4
  %300 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %298, i64 0, i32 0
  %301 = call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %300, i32 %299) #9
  %302 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %301, i64 0, i32 0
  %303 = load float, float* %302, align 4
  %304 = fadd float %283, %303
  %305 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %301, i64 0, i32 1
  %306 = load float, float* %305, align 4
  %307 = fadd float %285, %306
  %308 = insertelement <2 x float> undef, float %304, i32 0
  %309 = insertelement <2 x float> %308, float %307, i32 1
  store <2 x float> %309, <2 x float>* %78, align 8
  %310 = call <2 x float> @_ZNK5blink17OffsetPolygonEdge17ClippedEdgeXRangeEff(%"class.blink::OffsetPolygonEdge"* nonnull %9, float %11, float %14)
  %311 = extractelement <2 x float> %310, i32 1
  %312 = extractelement <2 x float> %310, i32 0
  %313 = fcmp olt float %311, %312
  br i1 %313, label %321, label %314

314:                                              ; preds = %279
  %315 = fcmp olt float %237, %236
  br i1 %315, label %321, label %316

316:                                              ; preds = %314
  %317 = fcmp olt float %312, %236
  %318 = select i1 %317, float %312, float %236
  %319 = fcmp olt float %237, %311
  %320 = select i1 %319, float %311, float %237
  br label %321

321:                                              ; preds = %314, %279, %316
  %322 = phi float [ %236, %279 ], [ %318, %316 ], [ %312, %314 ]
  %323 = phi float [ %237, %279 ], [ %320, %316 ], [ %311, %314 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %69) #9
  %324 = load %"class.blink::FloatPolygon"*, %"class.blink::FloatPolygon"** %154, align 8
  %325 = load i32, i32* %161, align 8
  %326 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %324, i64 0, i32 0
  %327 = call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %326, i32 %325) #9
  %328 = load float, float* %26, align 4
  %329 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %327, i64 0, i32 1
  %330 = load float, float* %329, align 4
  %331 = fadd float %328, %330
  %332 = fcmp ugt float %331, %11
  %333 = fsub float %330, %328
  %334 = fcmp ult float %333, %14
  %335 = and i1 %332, %334
  br i1 %335, label %336, label %363

336:                                              ; preds = %321
  %337 = fcmp ult float %330, %11
  %338 = fcmp ugt float %330, %14
  %339 = or i1 %337, %338
  br i1 %339, label %347, label %340

340:                                              ; preds = %336
  %341 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %327, i64 0, i32 0
  %342 = load float, float* %341, align 4
  %343 = fsub float %342, %328
  %344 = fadd float %328, %342
  %345 = insertelement <2 x float> undef, float %343, i32 0
  %346 = insertelement <2 x float> %345, float %344, i32 1
  br label %363

347:                                              ; preds = %336
  %348 = fcmp ogt float %330, %14
  %349 = select i1 %348, float %14, float %11
  %350 = fsub float %349, %330
  %351 = fmul float %350, %350
  %352 = fmul float %328, %328
  %353 = fdiv float %351, %352
  %354 = fsub float 1.000000e+00, %353
  %355 = call float @sqrtf(float %354) #9
  %356 = fmul float %328, %355
  %357 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %327, i64 0, i32 0
  %358 = load float, float* %357, align 4
  %359 = fsub float %358, %356
  %360 = fadd float %358, %356
  %361 = insertelement <2 x float> undef, float %359, i32 0
  %362 = insertelement <2 x float> %361, float %360, i32 1
  br label %363

363:                                              ; preds = %321, %340, %347
  %364 = phi <2 x float> [ %362, %347 ], [ %346, %340 ], [ <float -1.000000e+00, float -2.000000e+00>, %321 ]
  %365 = extractelement <2 x float> %364, i32 1
  %366 = extractelement <2 x float> %364, i32 0
  %367 = fcmp olt float %365, %366
  br i1 %367, label %375, label %368

368:                                              ; preds = %363
  %369 = fcmp olt float %323, %322
  br i1 %369, label %375, label %370

370:                                              ; preds = %368
  %371 = fcmp olt float %366, %322
  %372 = select i1 %371, float %366, float %322
  %373 = fcmp olt float %323, %365
  %374 = select i1 %373, float %365, float %323
  br label %375

375:                                              ; preds = %368, %363, %370
  %376 = phi float [ %322, %363 ], [ %372, %370 ], [ %366, %368 ]
  %377 = phi float [ %323, %363 ], [ %374, %370 ], [ %365, %368 ]
  %378 = load %"class.blink::FloatPolygon"*, %"class.blink::FloatPolygon"** %154, align 8
  %379 = load i32, i32* %156, align 4
  %380 = getelementptr inbounds %"class.blink::FloatPolygon", %"class.blink::FloatPolygon"* %378, i64 0, i32 0
  %381 = call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %380, i32 %379) #9
  %382 = load float, float* %26, align 4
  %383 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %381, i64 0, i32 1
  %384 = load float, float* %383, align 4
  %385 = fadd float %382, %384
  %386 = fcmp ugt float %385, %11
  %387 = fsub float %384, %382
  %388 = fcmp ult float %387, %14
  %389 = and i1 %386, %388
  br i1 %389, label %390, label %417

390:                                              ; preds = %375
  %391 = fcmp ult float %384, %11
  %392 = fcmp ugt float %384, %14
  %393 = or i1 %391, %392
  br i1 %393, label %401, label %394

394:                                              ; preds = %390
  %395 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %381, i64 0, i32 0
  %396 = load float, float* %395, align 4
  %397 = fsub float %396, %382
  %398 = fadd float %382, %396
  %399 = insertelement <2 x float> undef, float %397, i32 0
  %400 = insertelement <2 x float> %399, float %398, i32 1
  br label %417

401:                                              ; preds = %390
  %402 = fcmp ogt float %384, %14
  %403 = select i1 %402, float %14, float %11
  %404 = fsub float %403, %384
  %405 = fmul float %404, %404
  %406 = fmul float %382, %382
  %407 = fdiv float %405, %406
  %408 = fsub float 1.000000e+00, %407
  %409 = call float @sqrtf(float %408) #9
  %410 = fmul float %382, %409
  %411 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %381, i64 0, i32 0
  %412 = load float, float* %411, align 4
  %413 = fsub float %412, %410
  %414 = fadd float %412, %410
  %415 = insertelement <2 x float> undef, float %413, i32 0
  %416 = insertelement <2 x float> %415, float %414, i32 1
  br label %417

417:                                              ; preds = %375, %394, %401
  %418 = phi <2 x float> [ %416, %401 ], [ %400, %394 ], [ <float -1.000000e+00, float -2.000000e+00>, %375 ]
  %419 = extractelement <2 x float> %418, i32 1
  %420 = extractelement <2 x float> %418, i32 0
  %421 = fcmp olt float %419, %420
  br i1 %421, label %429, label %422

422:                                              ; preds = %417
  %423 = fcmp olt float %377, %376
  br i1 %423, label %429, label %424

424:                                              ; preds = %422
  %425 = fcmp olt float %420, %376
  %426 = select i1 %425, float %420, float %376
  %427 = fcmp olt float %377, %419
  %428 = select i1 %427, float %419, float %377
  br label %429

429:                                              ; preds = %424, %417, %422, %150, %81
  %430 = phi float [ %84, %81 ], [ %151, %150 ], [ %376, %417 ], [ %426, %424 ], [ %420, %422 ]
  %431 = phi float [ %83, %81 ], [ %152, %150 ], [ %377, %417 ], [ %428, %424 ], [ %419, %422 ]
  %432 = add nuw i32 %82, 1
  %433 = load i32, i32* %46, align 4
  %434 = icmp ult i32 %432, %433
  br i1 %434, label %81, label %79

435:                                              ; preds = %79
  %436 = fcmp olt float %431, %430
  %437 = fmul float %430, 6.400000e+01
  %438 = select i1 %436, float 0.000000e+00, float %437
  %439 = fcmp ult float %438, 0xC1E0000000000000
  %440 = fcmp ugt float %438, 0x41DFFFFFE0000000
  %441 = fcmp ogt float %438, 0xC1E0000000000000
  %442 = select i1 %441, float %438, float 0xC1E0000000000000
  %443 = fptosi float %442 to i32
  %444 = select i1 %439, i32 0, i32 2147483647
  %445 = select i1 %440, i32 %444, i32 %443
  %446 = fmul float %431, 6.400000e+01
  %447 = select i1 %436, float 0.000000e+00, float %446
  %448 = fcmp ult float %447, 0xC1E0000000000000
  %449 = fcmp ugt float %447, 0x41DFFFFFE0000000
  %450 = fcmp ogt float %447, 0xC1E0000000000000
  %451 = select i1 %450, float %447, float 0xC1E0000000000000
  %452 = fptosi float %451 to i32
  %453 = select i1 %448, i32 0, i32 2147483647
  %454 = select i1 %449, i32 %453, i32 %452
  br label %455

455:                                              ; preds = %43, %79, %435
  %456 = phi i8 [ 0, %43 ], [ 1, %435 ], [ 0, %79 ]
  %457 = phi i32 [ 0, %43 ], [ %454, %435 ], [ 0, %79 ]
  %458 = phi i32 [ 0, %43 ], [ %445, %435 ], [ 0, %79 ]
  %459 = load %"class.blink::FloatPolygonEdge"**, %"class.blink::FloatPolygonEdge"*** %45, align 8
  %460 = icmp eq %"class.blink::FloatPolygonEdge"** %459, null
  %461 = bitcast %"class.blink::FloatPolygonEdge"** %459 to i8*
  br i1 %460, label %467, label %462, !prof !3

462:                                              ; preds = %455
  %463 = load i32, i32* %46, align 4
  %464 = icmp eq i32 %463, 0
  br i1 %464, label %466, label %465, !prof !4

465:                                              ; preds = %462
  store i32 0, i32* %46, align 4
  br label %466

466:                                              ; preds = %465, %462
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %461) #9
  store %"class.blink::FloatPolygonEdge"** null, %"class.blink::FloatPolygonEdge"*** %45, align 8
  br label %467

467:                                              ; preds = %455, %466
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %44) #9
  br label %468

468:                                              ; preds = %3, %37, %19, %32, %467
  %469 = phi i8 [ %456, %467 ], [ 0, %3 ], [ 0, %37 ], [ 0, %32 ], [ 0, %19 ]
  %470 = phi i32 [ %457, %467 ], [ 0, %3 ], [ 0, %37 ], [ 0, %32 ], [ 0, %19 ]
  %471 = phi i32 [ %458, %467 ], [ 0, %3 ], [ 0, %37 ], [ 0, %32 ], [ 0, %19 ]
  %472 = zext i32 %470 to i64
  %473 = shl nuw i64 %472, 32
  %474 = zext i32 %471 to i64
  %475 = or i64 %473, %474
  %476 = insertvalue { i64, i8 } undef, i64 %475, 0
  %477 = insertvalue { i64, i8 } %476, i8 %469, 1
  ret { i64, i8 } %477
}

declare zeroext i1 @_ZNK5blink12FloatPolygon16OverlappingEdgesEffRN3WTF6VectorIPKNS_16FloatPolygonEdgeELj0ENS1_18PartitionAllocatorEEE(%"class.blink::FloatPolygon"*, float, float, %"class.WTF::Vector.5"* dereferenceable(16)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink12PolygonShape17BuildDisplayPathsERNS_5Shape12DisplayPathsE(%"class.blink::PolygonShape"*, %"struct.blink::Shape::DisplayPaths"* dereferenceable(32)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %19, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.blink::Shape::DisplayPaths", %"struct.blink::Shape::DisplayPaths"* %1, i64 0, i32 0
  %8 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 1, i32 0
  %9 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %8, i32 0) #9
  tail call void @_ZN5blink4Path6MoveToERKNS_10FloatPointE(%"class.blink::Path"* %7, %"class.blink::FloatPoint"* dereferenceable(8) %9) #9
  %10 = load i32, i32* %3, align 4
  %11 = icmp ugt i32 %10, 1
  br i1 %11, label %13, label %12

12:                                               ; preds = %13, %6
  tail call void @_ZN5blink4Path12CloseSubpathEv(%"class.blink::Path"* %7) #9
  br label %19

13:                                               ; preds = %6, %13
  %14 = phi i32 [ %16, %13 ], [ 1, %6 ]
  %15 = tail call dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %8, i32 %14) #9
  tail call void @_ZN5blink4Path9AddLineToERKNS_10FloatPointE(%"class.blink::Path"* %7, %"class.blink::FloatPoint"* dereferenceable(8) %15) #9
  %16 = add nuw i32 %14, 1
  %17 = load i32, i32* %3, align 4
  %18 = icmp ult i32 %16, %17
  br i1 %18, label %13, label %12

19:                                               ; preds = %2, %12
  ret void
}

declare void @_ZN5blink4Path6MoveToERKNS_10FloatPointE(%"class.blink::Path"*, %"class.blink::FloatPoint"* dereferenceable(8)) local_unnamed_addr #4

declare void @_ZN5blink4Path9AddLineToERKNS_10FloatPointE(%"class.blink::Path"*, %"class.blink::FloatPoint"* dereferenceable(8)) local_unnamed_addr #4

declare void @_ZN5blink4Path12CloseSubpathEv(%"class.blink::Path"*) local_unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink12PolygonShapeD2Ev(%"class.blink::PolygonShape"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN5blink12PolygonShapeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 1, i32 4
  %4 = bitcast %"class.WTF::PODIntervalTree"* %3 to %"class.WTF::PODRedBlackTree"*
  tail call void @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEED2Ev(%"class.WTF::PODRedBlackTree"* %4) #9
  %5 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 1, i32 3, i32 0, i32 0, i32 0
  %6 = load %"class.blink::FloatPolygonEdge"*, %"class.blink::FloatPolygonEdge"** %5, align 8
  %7 = icmp eq %"class.blink::FloatPolygonEdge"* %6, null
  %8 = bitcast %"class.blink::FloatPolygonEdge"* %6 to i8*
  br i1 %7, label %15, label %9, !prof !3

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 1, i32 3, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13, !prof !4

13:                                               ; preds = %9
  store i32 0, i32* %10, align 4
  br label %14

14:                                               ; preds = %13, %9
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %8) #9
  store %"class.blink::FloatPolygonEdge"* null, %"class.blink::FloatPolygonEdge"** %5, align 8
  br label %15

15:                                               ; preds = %14, %1
  %16 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %17 = load %"class.blink::FloatPoint"*, %"class.blink::FloatPoint"** %16, align 8
  %18 = icmp eq %"class.blink::FloatPoint"* %17, null
  %19 = bitcast %"class.blink::FloatPoint"* %17 to i8*
  br i1 %18, label %26, label %20, !prof !3

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %25, label %24, !prof !4

24:                                               ; preds = %20
  store i32 0, i32* %21, align 4
  br label %25

25:                                               ; preds = %24, %20
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %19) #9
  store %"class.blink::FloatPoint"* null, %"class.blink::FloatPoint"** %16, align 8
  br label %26

26:                                               ; preds = %15, %25
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink12PolygonShapeD0Ev(%"class.blink::PolygonShape"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN5blink12PolygonShapeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 1, i32 4
  %4 = bitcast %"class.WTF::PODIntervalTree"* %3 to %"class.WTF::PODRedBlackTree"*
  tail call void @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEED2Ev(%"class.WTF::PODRedBlackTree"* %4) #9
  %5 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 1, i32 3, i32 0, i32 0, i32 0
  %6 = load %"class.blink::FloatPolygonEdge"*, %"class.blink::FloatPolygonEdge"** %5, align 8
  %7 = icmp eq %"class.blink::FloatPolygonEdge"* %6, null
  %8 = bitcast %"class.blink::FloatPolygonEdge"* %6 to i8*
  br i1 %7, label %15, label %9, !prof !3

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 1, i32 3, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13, !prof !4

13:                                               ; preds = %9
  store i32 0, i32* %10, align 4
  br label %14

14:                                               ; preds = %13, %9
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %8) #9
  store %"class.blink::FloatPolygonEdge"* null, %"class.blink::FloatPolygonEdge"** %5, align 8
  br label %15

15:                                               ; preds = %14, %1
  %16 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %17 = load %"class.blink::FloatPoint"*, %"class.blink::FloatPoint"** %16, align 8
  %18 = icmp eq %"class.blink::FloatPoint"* %17, null
  %19 = bitcast %"class.blink::FloatPoint"* %17 to i8*
  br i1 %18, label %26, label %20, !prof !3

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %25, label %24, !prof !4

24:                                               ; preds = %20
  store i32 0, i32* %21, align 4
  br label %25

25:                                               ; preds = %24, %20
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %19) #9
  br label %26

26:                                               ; preds = %15, %25
  %27 = bitcast %"class.blink::PolygonShape"* %0 to i8*
  tail call void @free(i8* %27) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink12PolygonShape7IsEmptyEv(%"class.blink::PolygonShape"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::PolygonShape", %"class.blink::PolygonShape"* %0, i64 0, i32 1, i32 2
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink17OffsetPolygonEdgeD0Ev(%"class.blink::OffsetPolygonEdge"*) unnamed_addr #5 comdat align 2 {
  %2 = bitcast %"class.blink::OffsetPolygonEdge"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

declare float @_ZNK5blink9FloatSize14DiagonalLengthEv(%"class.blink::FloatSize"*) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #7

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::FloatPoint"* @_ZNK3WTF6VectorIN5blink10FloatPointELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::FloatPoint"*, %"class.blink::FloatPoint"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %24, i64 %25
  ret %"class.blink::FloatPoint"* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEED2Ev(%"class.WTF::PODRedBlackTree"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.WTF::PODRedBlackTree", %"class.WTF::PODRedBlackTree"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.WTF::PODRedBlackTree", %"class.WTF::PODRedBlackTree"* %0, i64 0, i32 1, i32 0
  %4 = load %"class.WTF::PODFreeListArena"*, %"class.WTF::PODFreeListArena"** %3, align 8
  %5 = icmp eq %"class.WTF::PODFreeListArena"* %4, null
  br i1 %5, label %79, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.WTF::PODFreeListArena", %"class.WTF::PODFreeListArena"* %4, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %7) #9
  %8 = getelementptr inbounds %"class.WTF::PODFreeListArena", %"class.WTF::PODFreeListArena"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %79

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.WTF::PODFreeListArena", %"class.WTF::PODFreeListArena"* %4, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.base::RefCounted", %"class.base::RefCounted"* %12, i64 2
  %14 = bitcast %"class.base::RefCounted"* %13 to %"class.WTF::PODArena"**
  %15 = load %"class.WTF::PODArena"*, %"class.WTF::PODArena"** %14, align 8
  %16 = icmp eq %"class.WTF::PODArena"* %15, null
  br i1 %16, label %77, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.WTF::PODArena", %"class.WTF::PODArena"* %15, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %18) #9
  %19 = getelementptr inbounds %"class.WTF::PODArena", %"class.WTF::PODArena"* %15, i64 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %77

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::PODArena", %"class.WTF::PODArena"* %15, i64 0, i32 4
  %24 = getelementptr inbounds %"class.WTF::Vector.29", %"class.WTF::Vector.29"* %23, i64 0, i32 0, i32 0, i32 0
  %25 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %24, align 8
  %26 = icmp eq %"class.std::__1::unique_ptr"* %25, null
  br i1 %26, label %58, label %27, !prof !3

27:                                               ; preds = %22
  %28 = bitcast %"class.std::__1::unique_ptr"* %25 to i8*
  %29 = getelementptr inbounds %"class.WTF::PODArena", %"class.WTF::PODArena"* %15, i64 0, i32 4, i32 0, i32 0, i32 2
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %56, label %32, !prof !4

32:                                               ; preds = %27
  %33 = zext i32 %30 to i64
  %34 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %25, i64 %33
  br label %35

35:                                               ; preds = %50, %32
  %36 = phi %"class.std::__1::unique_ptr"* [ %51, %50 ], [ %25, %32 ]
  %37 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 0, i32 0, i32 0, i32 0
  %38 = load %"class.WTF::PODArena::Chunk"*, %"class.WTF::PODArena::Chunk"** %37, align 8
  store %"class.WTF::PODArena::Chunk"* null, %"class.WTF::PODArena::Chunk"** %37, align 8
  %39 = icmp eq %"class.WTF::PODArena::Chunk"* %38, null
  br i1 %39, label %50, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.WTF::PODArena::Chunk", %"class.WTF::PODArena::Chunk"* %38, i64 0, i32 0
  %42 = load %"class.WTF::PODArena::Allocator"*, %"class.WTF::PODArena::Allocator"** %41, align 8
  %43 = getelementptr inbounds %"class.WTF::PODArena::Chunk", %"class.WTF::PODArena::Chunk"* %38, i64 0, i32 1
  %44 = load i8*, i8** %43, align 8
  %45 = bitcast %"class.WTF::PODArena::Allocator"* %42 to void (%"class.WTF::PODArena::Allocator"*, i8*)***
  %46 = load void (%"class.WTF::PODArena::Allocator"*, i8*)**, void (%"class.WTF::PODArena::Allocator"*, i8*)*** %45, align 8
  %47 = getelementptr inbounds void (%"class.WTF::PODArena::Allocator"*, i8*)*, void (%"class.WTF::PODArena::Allocator"*, i8*)** %46, i64 1
  %48 = load void (%"class.WTF::PODArena::Allocator"*, i8*)*, void (%"class.WTF::PODArena::Allocator"*, i8*)** %47, align 8
  tail call void %48(%"class.WTF::PODArena::Allocator"* %42, i8* %44) #9
  %49 = bitcast %"class.WTF::PODArena::Chunk"* %38 to i8*
  tail call void @free(i8* %49) #9
  br label %50

50:                                               ; preds = %40, %35
  %51 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %36, i64 1
  %52 = icmp eq %"class.std::__1::unique_ptr"* %51, %34
  br i1 %52, label %53, label %35

53:                                               ; preds = %50
  store i32 0, i32* %29, align 4
  %54 = bitcast %"class.WTF::Vector.29"* %23 to i8**
  %55 = load i8*, i8** %54, align 8
  br label %56

56:                                               ; preds = %53, %27
  %57 = phi i8* [ %55, %53 ], [ %28, %27 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %57) #9
  store %"class.std::__1::unique_ptr"* null, %"class.std::__1::unique_ptr"** %24, align 8
  br label %58

58:                                               ; preds = %56, %22
  %59 = getelementptr inbounds %"class.WTF::PODArena", %"class.WTF::PODArena"* %15, i64 0, i32 1, i32 0
  %60 = load %"class.WTF::PODArena::Allocator"*, %"class.WTF::PODArena::Allocator"** %59, align 8
  %61 = icmp eq %"class.WTF::PODArena::Allocator"* %60, null
  br i1 %61, label %75, label %62

62:                                               ; preds = %58
  %63 = getelementptr inbounds %"class.WTF::PODArena::Allocator", %"class.WTF::PODArena::Allocator"* %60, i64 0, i32 1, i32 0
  %64 = getelementptr inbounds %"class.base::RefCounted.28", %"class.base::RefCounted.28"* %63, i64 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %64) #9
  %65 = getelementptr inbounds %"class.base::RefCounted.28", %"class.base::RefCounted.28"* %63, i64 0, i32 0, i32 0
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %75

68:                                               ; preds = %62
  %69 = getelementptr inbounds %"class.base::RefCounted.28", %"class.base::RefCounted.28"* %63, i64 -2
  %70 = bitcast %"class.base::RefCounted.28"* %69 to %"class.WTF::PODArena::Allocator"*
  %71 = bitcast %"class.base::RefCounted.28"* %69 to void (%"class.WTF::PODArena::Allocator"*)***
  %72 = load void (%"class.WTF::PODArena::Allocator"*)**, void (%"class.WTF::PODArena::Allocator"*)*** %71, align 8
  %73 = getelementptr inbounds void (%"class.WTF::PODArena::Allocator"*)*, void (%"class.WTF::PODArena::Allocator"*)** %72, i64 3
  %74 = load void (%"class.WTF::PODArena::Allocator"*)*, void (%"class.WTF::PODArena::Allocator"*)** %73, align 8
  tail call void %74(%"class.WTF::PODArena::Allocator"* nonnull %70) #9
  br label %75

75:                                               ; preds = %58, %62, %68
  %76 = bitcast %"class.WTF::PODArena"* %15 to i8*
  tail call void @free(i8* %76) #9
  br label %77

77:                                               ; preds = %75, %17, %11
  %78 = bitcast %"class.WTF::PODFreeListArena"* %4 to i8*
  tail call void @free(i8* %78) #9
  br label %79

79:                                               ; preds = %1, %6, %77
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEED0Ev(%"class.WTF::PODRedBlackTree"*) unnamed_addr #0 comdat align 2 {
  tail call void @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEED2Ev(%"class.WTF::PODRedBlackTree"* %0) #9
  %2 = bitcast %"class.WTF::PODRedBlackTree"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE15CheckInvariantsEv(%"class.WTF::PODRedBlackTree"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca i32, align 4
  %3 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #9
  store i32 -1431655766, i32* %2, align 4
  %4 = getelementptr inbounds %"class.WTF::PODRedBlackTree", %"class.WTF::PODRedBlackTree"* %0, i64 0, i32 2
  %5 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %4, align 8
  %6 = call zeroext i1 @_ZNK3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE23CheckInvariantsFromNodeEPNS6_4NodeEPi(%"class.WTF::PODRedBlackTree"* %0, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %5, i32* nonnull %2)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #9
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE10UpdateNodeEPNS6_4NodeE(%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*) unnamed_addr #0 comdat align 2 {
  ret i1 false
}

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE23CheckInvariantsFromNodeEPNS6_4NodeEPi(%"class.WTF::PODRedBlackTree"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, i32*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, null
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  store i32 1, i32* %2, align 4
  br label %49

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 4
  %10 = load i32, i32* %9, align 8
  switch i32 %10, label %49 [
    i32 1, label %14
    i32 2, label %11
  ]

11:                                               ; preds = %8
  %12 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 1
  %13 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %12, align 8
  br label %30

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 1
  %16 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %15, align 8
  %17 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %16, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %16, i64 0, i32 4
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %20, 2
  br i1 %21, label %22, label %49

22:                                               ; preds = %14, %18
  %23 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 2
  %24 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %23, align 8
  %25 = icmp eq %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %24, null
  br i1 %25, label %30, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %24, i64 0, i32 4
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %28, 2
  br i1 %29, label %30, label %49

30:                                               ; preds = %11, %22, %26
  %31 = phi %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* [ %13, %11 ], [ %16, %22 ], [ %16, %26 ]
  %32 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #9
  store i32 0, i32* %4, align 4
  %33 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %33) #9
  store i32 0, i32* %5, align 4
  %34 = call zeroext i1 @_ZNK3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE23CheckInvariantsFromNodeEPNS6_4NodeEPi(%"class.WTF::PODRedBlackTree"* %0, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %31, i32* nonnull %4)
  %35 = getelementptr inbounds %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node", %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %1, i64 0, i32 2
  %36 = load %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"*, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"** %35, align 8
  %37 = call zeroext i1 @_ZNK3WTF15PODRedBlackTreeINS_11PODIntervalIfPN5blink16FloatPolygonEdgeEEEE23CheckInvariantsFromNodeEPNS6_4NodeEPi(%"class.WTF::PODRedBlackTree"* %0, %"class.WTF::PODRedBlackTree<WTF::PODInterval<float, blink::FloatPolygonEdge *> >::Node"* %36, i32* nonnull %5)
  %38 = and i1 %34, %37
  br i1 %38, label %39, label %47

39:                                               ; preds = %30
  %40 = load i32, i32* %4, align 4
  %41 = load i32, i32* %9, align 8
  %42 = icmp eq i32 %41, 2
  %43 = zext i1 %42 to i32
  %44 = add nsw i32 %40, %43
  store i32 %44, i32* %2, align 4
  %45 = load i32, i32* %5, align 4
  %46 = icmp eq i32 %40, %45
  br label %47

47:                                               ; preds = %30, %39
  %48 = phi i1 [ %46, %39 ], [ false, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %33) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #9
  br label %49

49:                                               ; preds = %8, %26, %18, %47, %7
  %50 = phi i1 [ %48, %47 ], [ true, %7 ], [ false, %18 ], [ false, %26 ], [ false, %8 ]
  ret i1 %50
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10VertexPairD2Ev(%"class.blink::VertexPair"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::FloatPolygonEdge"** @_ZN3WTF6VectorIPKN5blink16FloatPolygonEdgeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.5"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector.5", %"class.WTF::Vector.5"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::FloatPolygonEdge"**, %"class.blink::FloatPolygonEdge"*** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::FloatPolygonEdge"*, %"class.blink::FloatPolygonEdge"** %24, i64 %25
  ret %"class.blink::FloatPolygonEdge"** %26
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{!"branch_weights", i32 1, i32 2000}
