; ModuleID = '../../third_party/freetype/src/builds/unix/ftsystem.c'
source_filename = "../../third_party/freetype/src/builds/unix/ftsystem.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%struct.FT_StreamRec_ = type { i8*, i64, i64, %union.FT_StreamDesc_, %union.FT_StreamDesc_, i64 (%struct.FT_StreamRec_*, i64, i8*, i64)*, void (%struct.FT_StreamRec_*)*, %struct.FT_MemoryRec_*, i8*, i8* }
%union.FT_StreamDesc_ = type { i64 }
%struct.FT_MemoryRec_ = type { i8*, i8* (%struct.FT_MemoryRec_*, i64)*, void (%struct.FT_MemoryRec_*, i8*)*, i8* (%struct.FT_MemoryRec_*, i64, i64, i8*)* }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.stat64 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FT_Stream_Open(%struct.FT_StreamRec_*, i8*) local_unnamed_addr #0 {
  %3 = alloca %struct.stat, align 8
  %4 = bitcast %struct.stat* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %4) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 144, i1 false)
  %5 = icmp eq %struct.FT_StreamRec_* %0, null
  br i1 %5, label %65, label %6

6:                                                ; preds = %2
  %7 = tail call i32 (i8*, i32, ...) @open64(i8* %1, i32 0) #8
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %65, label %9

9:                                                ; preds = %6
  %10 = tail call i32 (i32, i32, ...) @fcntl(i32 %7, i32 2, i32 1) #8
  %11 = bitcast %struct.stat* %3 to %struct.stat64*
  %12 = call i32 @__fxstat64(i32 1, i32 %7, %struct.stat64* nonnull %11) #8
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %62, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.stat, %struct.stat* %3, i64 0, i32 8
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %62, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.FT_StreamRec_, %struct.FT_StreamRec_* %0, i64 0, i32 1
  store i64 %16, i64* %19, align 8
  %20 = getelementptr inbounds %struct.FT_StreamRec_, %struct.FT_StreamRec_* %0, i64 0, i32 2
  store i64 0, i64* %20, align 8
  %21 = call i8* @mmap64(i8* null, i64 %16, i32 1, i32 2, i32 %7, i64 0) #8
  %22 = getelementptr inbounds %struct.FT_StreamRec_, %struct.FT_StreamRec_* %0, i64 0, i32 0
  store i8* %21, i8** %22, align 8
  %23 = ptrtoint i8* %21 to i64
  switch i64 %23, label %50 [
    i64 -1, label %24
    i64 0, label %24
  ]

24:                                               ; preds = %18, %18
  %25 = load i64, i64* %19, align 8
  %26 = call noalias i8* @malloc(i64 %25) #8
  store i8* %26, i8** %22, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %62, label %28

28:                                               ; preds = %24, %48
  %29 = phi i64 [ %46, %48 ], [ %25, %24 ]
  %30 = phi i8* [ %49, %48 ], [ %26, %24 ]
  %31 = phi i64 [ %45, %48 ], [ 0, %24 ]
  %32 = getelementptr inbounds i8, i8* %30, i64 %31
  %33 = sub i64 %29, %31
  %34 = call i64 @read(i32 %7, i8* %32, i64 %33) #8
  %35 = icmp slt i64 %34, 1
  br i1 %35, label %36, label %42

36:                                               ; preds = %28
  %37 = icmp eq i64 %34, -1
  br i1 %37, label %38, label %60

38:                                               ; preds = %36
  %39 = tail call i32* @__errno_location() #9
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, 4
  br i1 %41, label %44, label %60

42:                                               ; preds = %28
  %43 = add nsw i64 %34, %31
  br label %44

44:                                               ; preds = %42, %38
  %45 = phi i64 [ %31, %38 ], [ %43, %42 ]
  %46 = load i64, i64* %19, align 8
  %47 = icmp eq i64 %45, %46
  br i1 %47, label %50, label %48

48:                                               ; preds = %44
  %49 = load i8*, i8** %22, align 8
  br label %28

50:                                               ; preds = %44, %18
  %51 = phi void (%struct.FT_StreamRec_*)* [ @ft_close_stream_by_munmap, %18 ], [ @ft_close_stream_by_free, %44 ]
  %52 = getelementptr inbounds %struct.FT_StreamRec_, %struct.FT_StreamRec_* %0, i64 0, i32 6
  store void (%struct.FT_StreamRec_*)* %51, void (%struct.FT_StreamRec_*)** %52, align 8
  %53 = call i32 @close(i32 %7) #8
  %54 = bitcast %struct.FT_StreamRec_* %0 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %struct.FT_StreamRec_, %struct.FT_StreamRec_* %0, i64 0, i32 3, i32 0
  store i64 %55, i64* %56, align 8
  %57 = getelementptr inbounds %struct.FT_StreamRec_, %struct.FT_StreamRec_* %0, i64 0, i32 4
  %58 = bitcast %union.FT_StreamDesc_* %57 to i8**
  store i8* %1, i8** %58, align 8
  %59 = getelementptr inbounds %struct.FT_StreamRec_, %struct.FT_StreamRec_* %0, i64 0, i32 5
  store i64 (%struct.FT_StreamRec_*, i64, i8*, i64)* null, i64 (%struct.FT_StreamRec_*, i64, i8*, i64)** %59, align 8
  br label %65

60:                                               ; preds = %36, %38
  %61 = load i8*, i8** %22, align 8
  call void @free(i8* %61) #8
  br label %62

62:                                               ; preds = %24, %14, %9, %60
  %63 = call i32 @close(i32 %7) #8
  %64 = bitcast %struct.FT_StreamRec_* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %64, i8 0, i64 24, i1 false)
  br label %65

65:                                               ; preds = %6, %2, %62, %50
  %66 = phi i32 [ 81, %62 ], [ 0, %50 ], [ 40, %2 ], [ 1, %6 ]
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %4) #8
  ret i32 %66
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree
declare i32 @open64(i8* nocapture readonly, i32, ...) local_unnamed_addr #2

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr #3

; Function Attrs: nounwind
declare i8* @mmap64(i8*, i64, i32, i32, i32, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal void @ft_close_stream_by_munmap(%struct.FT_StreamRec_* nocapture) #0 {
  %2 = getelementptr inbounds %struct.FT_StreamRec_, %struct.FT_StreamRec_* %0, i64 0, i32 3
  %3 = bitcast %union.FT_StreamDesc_* %2 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.FT_StreamRec_, %struct.FT_StreamRec_* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = tail call i32 @munmap(i8* %4, i64 %6) #8
  store i8* null, i8** %3, align 8
  %8 = bitcast %struct.FT_StreamRec_* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal noalias i8* @ft_alloc(%struct.FT_MemoryRec_* nocapture readnone, i64) #5 {
  %3 = tail call noalias i8* @malloc(i64 %1) #8
  ret i8* %3
}

; Function Attrs: nofree
declare i64 @read(i32, i8* nocapture, i64) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal void @ft_close_stream_by_free(%struct.FT_StreamRec_* nocapture) #0 {
  %2 = getelementptr inbounds %struct.FT_StreamRec_, %struct.FT_StreamRec_* %0, i64 0, i32 3
  %3 = bitcast %union.FT_StreamDesc_* %2 to i8**
  %4 = load i8*, i8** %3, align 8
  tail call void @free(i8* %4) #8
  store i8* null, i8** %3, align 8
  %5 = bitcast %struct.FT_StreamRec_* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false)
  ret void
}

declare i32 @close(i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @ft_free(%struct.FT_MemoryRec_* nocapture readnone, i8* nocapture) #0 {
  tail call void @free(i8* %1) #8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias %struct.FT_MemoryRec_* @FT_New_Memory() local_unnamed_addr #5 {
  %1 = tail call noalias i8* @malloc(i64 32) #8
  %2 = bitcast i8* %1 to %struct.FT_MemoryRec_*
  %3 = icmp eq i8* %1, null
  br i1 %3, label %12, label %4

4:                                                ; preds = %0
  %5 = bitcast i8* %1 to i8**
  store i8* null, i8** %5, align 8
  %6 = getelementptr inbounds i8, i8* %1, i64 8
  %7 = bitcast i8* %6 to i8* (%struct.FT_MemoryRec_*, i64)**
  store i8* (%struct.FT_MemoryRec_*, i64)* @ft_alloc, i8* (%struct.FT_MemoryRec_*, i64)** %7, align 8
  %8 = getelementptr inbounds i8, i8* %1, i64 24
  %9 = bitcast i8* %8 to i8* (%struct.FT_MemoryRec_*, i64, i64, i8*)**
  store i8* (%struct.FT_MemoryRec_*, i64, i64, i8*)* @ft_realloc, i8* (%struct.FT_MemoryRec_*, i64, i64, i8*)** %9, align 8
  %10 = getelementptr inbounds i8, i8* %1, i64 16
  %11 = bitcast i8* %10 to void (%struct.FT_MemoryRec_*, i8*)**
  store void (%struct.FT_MemoryRec_*, i8*)* @ft_free, void (%struct.FT_MemoryRec_*, i8*)** %11, align 8
  br label %12

12:                                               ; preds = %0, %4
  ret %struct.FT_MemoryRec_* %2
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define internal noalias i8* @ft_realloc(%struct.FT_MemoryRec_* nocapture readnone, i64, i64, i8* nocapture) #0 {
  %5 = tail call i8* @realloc(i8* %3, i64 %2) #8
  ret i8* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @FT_Done_Memory(%struct.FT_MemoryRec_*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.FT_MemoryRec_, %struct.FT_MemoryRec_* %0, i64 0, i32 2
  %3 = load void (%struct.FT_MemoryRec_*, i8*)*, void (%struct.FT_MemoryRec_*, i8*)** %2, align 8
  %4 = bitcast %struct.FT_MemoryRec_* %0 to i8*
  tail call void %3(%struct.FT_MemoryRec_* %0, i8* %4) #8
  ret void
}

; Function Attrs: nounwind
declare i32 @__fxstat64(i32, i32, %struct.stat64*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @munmap(i8*, i64) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind
declare noalias i8* @realloc(i8* nocapture, i64) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
