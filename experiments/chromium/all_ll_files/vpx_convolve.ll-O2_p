; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/vpx_convolve.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/vpx_convolve.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_convolve8_horiz_c(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  tail call fastcc void @convolve_horiz(i8* %0, i64 %1, i8* %2, i64 %3, [8 x i16]* %4, i32 %5, i32 %6, i32 %9, i32 %10)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @convolve_horiz(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32) unnamed_addr #0 {
  %10 = icmp sgt i32 %8, 0
  br i1 %10, label %11, label %58

11:                                               ; preds = %9
  %12 = getelementptr inbounds i8, i8* %0, i64 -3
  %13 = icmp sgt i32 %7, 0
  %14 = zext i32 %7 to i64
  br label %15

15:                                               ; preds = %53, %11
  %16 = phi i32 [ 0, %11 ], [ %56, %53 ]
  %17 = phi i8* [ %12, %11 ], [ %54, %53 ]
  %18 = phi i8* [ %2, %11 ], [ %55, %53 ]
  br i1 %13, label %19, label %53

19:                                               ; preds = %15, %19
  %20 = phi i64 [ %51, %19 ], [ 0, %15 ]
  %21 = phi i32 [ %50, %19 ], [ %5, %15 ]
  %22 = ashr i32 %21, 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %17, i64 %23
  %25 = and i32 %21, 15
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %26, i64 0
  %28 = bitcast i8* %24 to <8 x i8>*
  %29 = load <8 x i8>, <8 x i8>* %28, align 1
  %30 = zext <8 x i8> %29 to <8 x i32>
  %31 = bitcast i16* %27 to <8 x i16>*
  %32 = load <8 x i16>, <8 x i16>* %31, align 2
  %33 = sext <8 x i16> %32 to <8 x i32>
  %34 = mul nsw <8 x i32> %33, %30
  %35 = shufflevector <8 x i32> %34, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %36 = add nsw <8 x i32> %34, %35
  %37 = shufflevector <8 x i32> %36, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %38 = add nsw <8 x i32> %36, %37
  %39 = shufflevector <8 x i32> %38, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %40 = add nsw <8 x i32> %38, %39
  %41 = extractelement <8 x i32> %40, i32 0
  %42 = add nsw i32 %41, 64
  %43 = ashr i32 %42, 7
  %44 = icmp sgt i32 %43, 0
  %45 = select i1 %44, i32 %43, i32 0
  %46 = icmp slt i32 %45, 255
  %47 = select i1 %46, i32 %45, i32 255
  %48 = trunc i32 %47 to i8
  %49 = getelementptr inbounds i8, i8* %18, i64 %20
  store i8 %48, i8* %49, align 1
  %50 = add nsw i32 %21, %6
  %51 = add nuw nsw i64 %20, 1
  %52 = icmp eq i64 %51, %14
  br i1 %52, label %53, label %19

53:                                               ; preds = %19, %15
  %54 = getelementptr inbounds i8, i8* %17, i64 %1
  %55 = getelementptr inbounds i8, i8* %18, i64 %3
  %56 = add nuw nsw i32 %16, 1
  %57 = icmp eq i32 %56, %8
  br i1 %57, label %58, label %15

58:                                               ; preds = %53, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_convolve8_avg_horiz_c(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %12 = icmp sgt i32 %10, 0
  br i1 %12, label %13, label %65

13:                                               ; preds = %11
  %14 = getelementptr inbounds i8, i8* %0, i64 -3
  %15 = icmp sgt i32 %9, 0
  %16 = zext i32 %9 to i64
  br label %17

17:                                               ; preds = %60, %13
  %18 = phi i32 [ 0, %13 ], [ %63, %60 ]
  %19 = phi i8* [ %14, %13 ], [ %61, %60 ]
  %20 = phi i8* [ %2, %13 ], [ %62, %60 ]
  br i1 %15, label %21, label %60

21:                                               ; preds = %17, %21
  %22 = phi i64 [ %58, %21 ], [ 0, %17 ]
  %23 = phi i32 [ %57, %21 ], [ %5, %17 ]
  %24 = ashr i32 %23, 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %19, i64 %25
  %27 = and i32 %23, 15
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %28, i64 0
  %30 = bitcast i8* %26 to <8 x i8>*
  %31 = load <8 x i8>, <8 x i8>* %30, align 1
  %32 = zext <8 x i8> %31 to <8 x i32>
  %33 = bitcast i16* %29 to <8 x i16>*
  %34 = load <8 x i16>, <8 x i16>* %33, align 2
  %35 = sext <8 x i16> %34 to <8 x i32>
  %36 = mul nsw <8 x i32> %35, %32
  %37 = getelementptr inbounds i8, i8* %20, i64 %22
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = shufflevector <8 x i32> %36, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %41 = add nsw <8 x i32> %36, %40
  %42 = shufflevector <8 x i32> %41, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %43 = add nsw <8 x i32> %41, %42
  %44 = shufflevector <8 x i32> %43, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = add nsw <8 x i32> %43, %44
  %46 = extractelement <8 x i32> %45, i32 0
  %47 = add nsw i32 %46, 64
  %48 = ashr i32 %47, 7
  %49 = icmp sgt i32 %48, 0
  %50 = select i1 %49, i32 %48, i32 0
  %51 = icmp slt i32 %50, 255
  %52 = select i1 %51, i32 %50, i32 255
  %53 = add nuw nsw i32 %39, 1
  %54 = add nuw nsw i32 %53, %52
  %55 = lshr i32 %54, 1
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %37, align 1
  %57 = add nsw i32 %23, %6
  %58 = add nuw nsw i64 %22, 1
  %59 = icmp eq i64 %58, %16
  br i1 %59, label %60, label %21

60:                                               ; preds = %21, %17
  %61 = getelementptr inbounds i8, i8* %19, i64 %1
  %62 = getelementptr inbounds i8, i8* %20, i64 %3
  %63 = add nuw nsw i32 %18, 1
  %64 = icmp eq i32 %63, %10
  br i1 %64, label %65, label %17

65:                                               ; preds = %60, %11
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_convolve8_vert_c(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  tail call fastcc void @convolve_vert(i8* %0, i64 %1, i8* %2, i64 %3, [8 x i16]* %4, i32 %7, i32 %8, i32 %9, i32 %10)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @convolve_vert(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32) unnamed_addr #0 {
  %10 = icmp sgt i32 %7, 0
  br i1 %10, label %11, label %114

11:                                               ; preds = %9
  %12 = mul i64 %1, -3
  %13 = getelementptr inbounds i8, i8* %0, i64 %12
  %14 = icmp sgt i32 %8, 0
  %15 = zext i32 %8 to i64
  %16 = shl nsw i64 %1, 1
  %17 = mul nsw i64 %1, 3
  %18 = shl nsw i64 %1, 2
  %19 = mul nsw i64 %1, 5
  %20 = mul nsw i64 %1, 6
  %21 = mul nsw i64 %1, 7
  br label %22

22:                                               ; preds = %109, %11
  %23 = phi i32 [ 0, %11 ], [ %112, %109 ]
  %24 = phi i8* [ %13, %11 ], [ %110, %109 ]
  %25 = phi i8* [ %2, %11 ], [ %111, %109 ]
  br i1 %14, label %26, label %109

26:                                               ; preds = %22, %26
  %27 = phi i64 [ %107, %26 ], [ 0, %22 ]
  %28 = phi i32 [ %106, %26 ], [ %5, %22 ]
  %29 = ashr i32 %28, 4
  %30 = sext i32 %29 to i64
  %31 = mul nsw i64 %30, %1
  %32 = getelementptr inbounds i8, i8* %24, i64 %31
  %33 = and i32 %28, 15
  %34 = zext i32 %33 to i64
  %35 = load i8, i8* %32, align 1
  %36 = zext i8 %35 to i32
  %37 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %34, i64 0
  %38 = load i16, i16* %37, align 2
  %39 = sext i16 %38 to i32
  %40 = mul nsw i32 %39, %36
  %41 = getelementptr inbounds i8, i8* %32, i64 %1
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %34, i64 1
  %45 = load i16, i16* %44, align 2
  %46 = sext i16 %45 to i32
  %47 = mul nsw i32 %46, %43
  %48 = add nsw i32 %47, %40
  %49 = getelementptr inbounds i8, i8* %32, i64 %16
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %34, i64 2
  %53 = load i16, i16* %52, align 2
  %54 = sext i16 %53 to i32
  %55 = mul nsw i32 %54, %51
  %56 = add nsw i32 %55, %48
  %57 = getelementptr inbounds i8, i8* %32, i64 %17
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %34, i64 3
  %61 = load i16, i16* %60, align 2
  %62 = sext i16 %61 to i32
  %63 = mul nsw i32 %62, %59
  %64 = add nsw i32 %63, %56
  %65 = getelementptr inbounds i8, i8* %32, i64 %18
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %34, i64 4
  %69 = load i16, i16* %68, align 2
  %70 = sext i16 %69 to i32
  %71 = mul nsw i32 %70, %67
  %72 = add nsw i32 %71, %64
  %73 = getelementptr inbounds i8, i8* %32, i64 %19
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %34, i64 5
  %77 = load i16, i16* %76, align 2
  %78 = sext i16 %77 to i32
  %79 = mul nsw i32 %78, %75
  %80 = add nsw i32 %79, %72
  %81 = getelementptr inbounds i8, i8* %32, i64 %20
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %34, i64 6
  %85 = load i16, i16* %84, align 2
  %86 = sext i16 %85 to i32
  %87 = mul nsw i32 %86, %83
  %88 = add nsw i32 %87, %80
  %89 = getelementptr inbounds i8, i8* %32, i64 %21
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %34, i64 7
  %93 = load i16, i16* %92, align 2
  %94 = sext i16 %93 to i32
  %95 = mul nsw i32 %94, %91
  %96 = add nsw i32 %95, %88
  %97 = add nsw i32 %96, 64
  %98 = ashr i32 %97, 7
  %99 = icmp sgt i32 %98, 0
  %100 = select i1 %99, i32 %98, i32 0
  %101 = icmp slt i32 %100, 255
  %102 = select i1 %101, i32 %100, i32 255
  %103 = trunc i32 %102 to i8
  %104 = mul nsw i64 %27, %3
  %105 = getelementptr inbounds i8, i8* %25, i64 %104
  store i8 %103, i8* %105, align 1
  %106 = add nsw i32 %28, %6
  %107 = add nuw nsw i64 %27, 1
  %108 = icmp eq i64 %107, %15
  br i1 %108, label %109, label %26

109:                                              ; preds = %26, %22
  %110 = getelementptr inbounds i8, i8* %24, i64 1
  %111 = getelementptr inbounds i8, i8* %25, i64 1
  %112 = add nuw nsw i32 %23, 1
  %113 = icmp eq i32 %112, %7
  br i1 %113, label %114, label %22

114:                                              ; preds = %109, %9
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_convolve8_avg_vert_c(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %12 = icmp sgt i32 %9, 0
  br i1 %12, label %13, label %121

13:                                               ; preds = %11
  %14 = mul i64 %1, -3
  %15 = getelementptr inbounds i8, i8* %0, i64 %14
  %16 = icmp sgt i32 %10, 0
  %17 = zext i32 %10 to i64
  %18 = shl nsw i64 %1, 1
  %19 = mul nsw i64 %1, 3
  %20 = shl nsw i64 %1, 2
  %21 = mul nsw i64 %1, 5
  %22 = mul nsw i64 %1, 6
  %23 = mul nsw i64 %1, 7
  br label %24

24:                                               ; preds = %116, %13
  %25 = phi i32 [ 0, %13 ], [ %119, %116 ]
  %26 = phi i8* [ %15, %13 ], [ %117, %116 ]
  %27 = phi i8* [ %2, %13 ], [ %118, %116 ]
  br i1 %16, label %28, label %116

28:                                               ; preds = %24, %28
  %29 = phi i64 [ %114, %28 ], [ 0, %24 ]
  %30 = phi i32 [ %113, %28 ], [ %7, %24 ]
  %31 = ashr i32 %30, 4
  %32 = sext i32 %31 to i64
  %33 = mul nsw i64 %32, %1
  %34 = getelementptr inbounds i8, i8* %26, i64 %33
  %35 = and i32 %30, 15
  %36 = zext i32 %35 to i64
  %37 = load i8, i8* %34, align 1
  %38 = zext i8 %37 to i32
  %39 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %36, i64 0
  %40 = load i16, i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = mul nsw i32 %41, %38
  %43 = getelementptr inbounds i8, i8* %34, i64 %1
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %36, i64 1
  %47 = load i16, i16* %46, align 2
  %48 = sext i16 %47 to i32
  %49 = mul nsw i32 %48, %45
  %50 = getelementptr inbounds i8, i8* %34, i64 %18
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %36, i64 2
  %54 = load i16, i16* %53, align 2
  %55 = sext i16 %54 to i32
  %56 = mul nsw i32 %55, %52
  %57 = getelementptr inbounds i8, i8* %34, i64 %19
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %36, i64 3
  %61 = load i16, i16* %60, align 2
  %62 = sext i16 %61 to i32
  %63 = mul nsw i32 %62, %59
  %64 = getelementptr inbounds i8, i8* %34, i64 %20
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %36, i64 4
  %68 = load i16, i16* %67, align 2
  %69 = sext i16 %68 to i32
  %70 = mul nsw i32 %69, %66
  %71 = getelementptr inbounds i8, i8* %34, i64 %21
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %36, i64 5
  %75 = load i16, i16* %74, align 2
  %76 = sext i16 %75 to i32
  %77 = mul nsw i32 %76, %73
  %78 = getelementptr inbounds i8, i8* %34, i64 %22
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %36, i64 6
  %82 = load i16, i16* %81, align 2
  %83 = sext i16 %82 to i32
  %84 = mul nsw i32 %83, %80
  %85 = getelementptr inbounds i8, i8* %34, i64 %23
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %36, i64 7
  %89 = load i16, i16* %88, align 2
  %90 = sext i16 %89 to i32
  %91 = mul nsw i32 %90, %87
  %92 = mul nsw i64 %29, %3
  %93 = getelementptr inbounds i8, i8* %27, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = add nsw i32 %42, 64
  %97 = add nsw i32 %96, %49
  %98 = add nsw i32 %97, %56
  %99 = add nsw i32 %98, %63
  %100 = add nsw i32 %99, %70
  %101 = add nsw i32 %100, %77
  %102 = add nsw i32 %101, %84
  %103 = add nsw i32 %102, %91
  %104 = ashr i32 %103, 7
  %105 = icmp sgt i32 %104, 0
  %106 = select i1 %105, i32 %104, i32 0
  %107 = icmp slt i32 %106, 255
  %108 = select i1 %107, i32 %106, i32 255
  %109 = add nuw nsw i32 %95, 1
  %110 = add nuw nsw i32 %109, %108
  %111 = lshr i32 %110, 1
  %112 = trunc i32 %111 to i8
  store i8 %112, i8* %93, align 1
  %113 = add nsw i32 %30, %8
  %114 = add nuw nsw i64 %29, 1
  %115 = icmp eq i64 %114, %17
  br i1 %115, label %116, label %28

116:                                              ; preds = %28, %24
  %117 = getelementptr inbounds i8, i8* %26, i64 1
  %118 = getelementptr inbounds i8, i8* %27, i64 1
  %119 = add nuw nsw i32 %25, 1
  %120 = icmp eq i32 %119, %9
  br i1 %120, label %121, label %24

121:                                              ; preds = %116, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_convolve8_c(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32) local_unnamed_addr #1 {
  %12 = alloca [8640 x i8], align 16
  %13 = getelementptr inbounds [8640 x i8], [8640 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8640, i8* nonnull %13) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 8640, i1 false)
  %14 = add nsw i32 %10, -1
  %15 = mul nsw i32 %14, %8
  %16 = add nsw i32 %15, %7
  %17 = ashr i32 %16, 4
  %18 = add nsw i32 %17, 8
  %19 = mul i64 %1, -3
  %20 = getelementptr inbounds i8, i8* %0, i64 %19
  call fastcc void @convolve_horiz(i8* %20, i64 %1, i8* nonnull %13, i64 64, [8 x i16]* %4, i32 %5, i32 %6, i32 %9, i32 %18)
  %21 = getelementptr inbounds [8640 x i8], [8640 x i8]* %12, i64 0, i64 192
  call fastcc void @convolve_vert(i8* %21, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 %7, i32 %8, i32 %9, i32 %10)
  call void @llvm.lifetime.end.p0i8(i64 8640, i8* nonnull %13) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_convolve8_avg_c(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32) local_unnamed_addr #1 {
  %12 = alloca [8640 x i8], align 16
  %13 = alloca [4096 x i8], align 16
  %14 = getelementptr inbounds [4096 x i8], [4096 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %14) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 4096, i1 false)
  %15 = getelementptr inbounds [8640 x i8], [8640 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8640, i8* nonnull %15) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 8640, i1 false) #3
  %16 = add nsw i32 %10, -1
  %17 = mul nsw i32 %16, %8
  %18 = add nsw i32 %17, %7
  %19 = ashr i32 %18, 4
  %20 = add nsw i32 %19, 8
  %21 = mul i64 %1, -3
  %22 = getelementptr inbounds i8, i8* %0, i64 %21
  call fastcc void @convolve_horiz(i8* %22, i64 %1, i8* nonnull %15, i64 64, [8 x i16]* %4, i32 %5, i32 %6, i32 %9, i32 %20) #3
  %23 = getelementptr inbounds [8640 x i8], [8640 x i8]* %12, i64 0, i64 192
  call fastcc void @convolve_vert(i8* %23, i64 64, i8* nonnull %14, i64 64, [8 x i16]* %4, i32 %7, i32 %8, i32 %9, i32 %10) #3
  call void @llvm.lifetime.end.p0i8(i64 8640, i8* nonnull %15) #3
  %24 = icmp sgt i32 %10, 0
  br i1 %24, label %25, label %116

25:                                               ; preds = %11
  %26 = icmp sgt i32 %9, 0
  %27 = zext i32 %9 to i64
  %28 = and i64 %27, 4294967280
  %29 = add nsw i64 %28, -16
  %30 = lshr exact i64 %29, 4
  %31 = add nuw nsw i64 %30, 1
  %32 = icmp ult i32 %9, 16
  %33 = and i64 %27, 4294967280
  %34 = and i64 %31, 1
  %35 = icmp eq i64 %29, 0
  %36 = sub nuw nsw i64 %31, %34
  %37 = icmp eq i64 %34, 0
  %38 = icmp eq i64 %33, %27
  br label %39

39:                                               ; preds = %111, %25
  %40 = phi i32 [ 0, %25 ], [ %114, %111 ]
  %41 = phi i8* [ %14, %25 ], [ %112, %111 ]
  %42 = phi i8* [ %2, %25 ], [ %113, %111 ]
  br i1 %26, label %43, label %111

43:                                               ; preds = %39
  br i1 %32, label %95, label %44

44:                                               ; preds = %43
  br i1 %35, label %78, label %45

45:                                               ; preds = %44, %45
  %46 = phi i64 [ %75, %45 ], [ 0, %44 ]
  %47 = phi i64 [ %76, %45 ], [ %36, %44 ]
  %48 = getelementptr inbounds i8, i8* %42, i64 %46
  %49 = bitcast i8* %48 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 1
  %51 = zext <16 x i8> %50 to <16 x i32>
  %52 = getelementptr inbounds i8, i8* %41, i64 %46
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1
  %55 = zext <16 x i8> %54 to <16 x i32>
  %56 = add nuw nsw <16 x i32> %51, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %57 = add nuw nsw <16 x i32> %56, %55
  %58 = lshr <16 x i32> %57, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %59 = trunc <16 x i32> %58 to <16 x i8>
  %60 = bitcast i8* %48 to <16 x i8>*
  store <16 x i8> %59, <16 x i8>* %60, align 1
  %61 = or i64 %46, 16
  %62 = getelementptr inbounds i8, i8* %42, i64 %61
  %63 = bitcast i8* %62 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1
  %65 = zext <16 x i8> %64 to <16 x i32>
  %66 = getelementptr inbounds i8, i8* %41, i64 %61
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = zext <16 x i8> %68 to <16 x i32>
  %70 = add nuw nsw <16 x i32> %65, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %71 = add nuw nsw <16 x i32> %70, %69
  %72 = lshr <16 x i32> %71, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %73 = trunc <16 x i32> %72 to <16 x i8>
  %74 = bitcast i8* %62 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %74, align 1
  %75 = add i64 %46, 32
  %76 = add i64 %47, -2
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %78, label %45, !llvm.loop !2

78:                                               ; preds = %45, %44
  %79 = phi i64 [ 0, %44 ], [ %75, %45 ]
  br i1 %37, label %94, label %80

80:                                               ; preds = %78
  %81 = getelementptr inbounds i8, i8* %42, i64 %79
  %82 = bitcast i8* %81 to <16 x i8>*
  %83 = load <16 x i8>, <16 x i8>* %82, align 1
  %84 = zext <16 x i8> %83 to <16 x i32>
  %85 = getelementptr inbounds i8, i8* %41, i64 %79
  %86 = bitcast i8* %85 to <16 x i8>*
  %87 = load <16 x i8>, <16 x i8>* %86, align 1
  %88 = zext <16 x i8> %87 to <16 x i32>
  %89 = add nuw nsw <16 x i32> %84, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %90 = add nuw nsw <16 x i32> %89, %88
  %91 = lshr <16 x i32> %90, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %92 = trunc <16 x i32> %91 to <16 x i8>
  %93 = bitcast i8* %81 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %93, align 1
  br label %94

94:                                               ; preds = %78, %80
  br i1 %38, label %111, label %95

95:                                               ; preds = %94, %43
  %96 = phi i64 [ 0, %43 ], [ %33, %94 ]
  br label %97

97:                                               ; preds = %95, %97
  %98 = phi i64 [ %109, %97 ], [ %96, %95 ]
  %99 = getelementptr inbounds i8, i8* %42, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = getelementptr inbounds i8, i8* %41, i64 %98
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = add nuw nsw i32 %101, 1
  %106 = add nuw nsw i32 %105, %104
  %107 = lshr i32 %106, 1
  %108 = trunc i32 %107 to i8
  store i8 %108, i8* %99, align 1
  %109 = add nuw nsw i64 %98, 1
  %110 = icmp eq i64 %109, %27
  br i1 %110, label %111, label %97, !llvm.loop !4

111:                                              ; preds = %97, %94, %39
  %112 = getelementptr inbounds i8, i8* %41, i64 64
  %113 = getelementptr inbounds i8, i8* %42, i64 %3
  %114 = add nuw nsw i32 %40, 1
  %115 = icmp eq i32 %114, %10
  br i1 %115, label %116, label %39

116:                                              ; preds = %111, %11
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %14) #3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_convolve_avg_c(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readnone, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %12 = icmp sgt i32 %10, 0
  br i1 %12, label %13, label %148

13:                                               ; preds = %11
  %14 = icmp sgt i32 %9, 0
  %15 = zext i32 %9 to i64
  %16 = and i64 %15, 4294967280
  %17 = add nsw i64 %16, -16
  %18 = lshr exact i64 %17, 4
  %19 = add nuw nsw i64 %18, 1
  %20 = icmp ult i32 %9, 16
  %21 = and i64 %15, 4294967280
  %22 = and i64 %19, 1
  %23 = icmp eq i64 %17, 0
  %24 = sub nuw nsw i64 %19, %22
  %25 = icmp eq i64 %22, 0
  %26 = icmp eq i64 %21, %15
  %27 = and i64 %15, 1
  %28 = icmp eq i64 %27, 0
  %29 = sub nsw i64 0, %15
  br label %30

30:                                               ; preds = %142, %13
  %31 = phi i64 [ %147, %142 ], [ 0, %13 ]
  %32 = phi i32 [ %145, %142 ], [ 0, %13 ]
  %33 = phi i8* [ %143, %142 ], [ %0, %13 ]
  %34 = phi i8* [ %144, %142 ], [ %2, %13 ]
  %35 = mul i64 %31, %3
  %36 = getelementptr i8, i8* %2, i64 %35
  %37 = add i64 %35, %15
  %38 = getelementptr i8, i8* %2, i64 %37
  %39 = mul i64 %31, %1
  %40 = getelementptr i8, i8* %0, i64 %39
  %41 = add i64 %39, %15
  %42 = getelementptr i8, i8* %0, i64 %41
  br i1 %14, label %43, label %142

43:                                               ; preds = %30
  br i1 %20, label %99, label %44

44:                                               ; preds = %43
  %45 = icmp ult i8* %36, %42
  %46 = icmp ult i8* %40, %38
  %47 = and i1 %45, %46
  br i1 %47, label %99, label %48

48:                                               ; preds = %44
  br i1 %23, label %82, label %49

49:                                               ; preds = %48, %49
  %50 = phi i64 [ %79, %49 ], [ 0, %48 ]
  %51 = phi i64 [ %80, %49 ], [ %24, %48 ]
  %52 = getelementptr inbounds i8, i8* %34, i64 %50
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1, !alias.scope !6, !noalias !9
  %55 = zext <16 x i8> %54 to <16 x i32>
  %56 = getelementptr inbounds i8, i8* %33, i64 %50
  %57 = bitcast i8* %56 to <16 x i8>*
  %58 = load <16 x i8>, <16 x i8>* %57, align 1, !alias.scope !9
  %59 = zext <16 x i8> %58 to <16 x i32>
  %60 = add nuw nsw <16 x i32> %55, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %61 = add nuw nsw <16 x i32> %60, %59
  %62 = lshr <16 x i32> %61, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %63 = trunc <16 x i32> %62 to <16 x i8>
  %64 = bitcast i8* %52 to <16 x i8>*
  store <16 x i8> %63, <16 x i8>* %64, align 1, !alias.scope !6, !noalias !9
  %65 = or i64 %50, 16
  %66 = getelementptr inbounds i8, i8* %34, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1, !alias.scope !6, !noalias !9
  %69 = zext <16 x i8> %68 to <16 x i32>
  %70 = getelementptr inbounds i8, i8* %33, i64 %65
  %71 = bitcast i8* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1, !alias.scope !9
  %73 = zext <16 x i8> %72 to <16 x i32>
  %74 = add nuw nsw <16 x i32> %69, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %75 = add nuw nsw <16 x i32> %74, %73
  %76 = lshr <16 x i32> %75, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %77 = trunc <16 x i32> %76 to <16 x i8>
  %78 = bitcast i8* %66 to <16 x i8>*
  store <16 x i8> %77, <16 x i8>* %78, align 1, !alias.scope !6, !noalias !9
  %79 = add i64 %50, 32
  %80 = add i64 %51, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %49, !llvm.loop !11

82:                                               ; preds = %49, %48
  %83 = phi i64 [ 0, %48 ], [ %79, %49 ]
  br i1 %25, label %98, label %84

84:                                               ; preds = %82
  %85 = getelementptr inbounds i8, i8* %34, i64 %83
  %86 = bitcast i8* %85 to <16 x i8>*
  %87 = load <16 x i8>, <16 x i8>* %86, align 1, !alias.scope !6, !noalias !9
  %88 = zext <16 x i8> %87 to <16 x i32>
  %89 = getelementptr inbounds i8, i8* %33, i64 %83
  %90 = bitcast i8* %89 to <16 x i8>*
  %91 = load <16 x i8>, <16 x i8>* %90, align 1, !alias.scope !9
  %92 = zext <16 x i8> %91 to <16 x i32>
  %93 = add nuw nsw <16 x i32> %88, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %94 = add nuw nsw <16 x i32> %93, %92
  %95 = lshr <16 x i32> %94, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %96 = trunc <16 x i32> %95 to <16 x i8>
  %97 = bitcast i8* %85 to <16 x i8>*
  store <16 x i8> %96, <16 x i8>* %97, align 1, !alias.scope !6, !noalias !9
  br label %98

98:                                               ; preds = %82, %84
  br i1 %26, label %142, label %99

99:                                               ; preds = %98, %44, %43
  %100 = phi i64 [ 0, %44 ], [ 0, %43 ], [ %21, %98 ]
  %101 = xor i64 %100, -1
  br i1 %28, label %114, label %102

102:                                              ; preds = %99
  %103 = getelementptr inbounds i8, i8* %34, i64 %100
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = getelementptr inbounds i8, i8* %33, i64 %100
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = add nuw nsw i32 %105, 1
  %110 = add nuw nsw i32 %109, %108
  %111 = lshr i32 %110, 1
  %112 = trunc i32 %111 to i8
  store i8 %112, i8* %103, align 1
  %113 = or i64 %100, 1
  br label %114

114:                                              ; preds = %102, %99
  %115 = phi i64 [ %113, %102 ], [ %100, %99 ]
  %116 = icmp eq i64 %101, %29
  br i1 %116, label %142, label %117

117:                                              ; preds = %114, %117
  %118 = phi i64 [ %140, %117 ], [ %115, %114 ]
  %119 = getelementptr inbounds i8, i8* %34, i64 %118
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = getelementptr inbounds i8, i8* %33, i64 %118
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = add nuw nsw i32 %121, 1
  %126 = add nuw nsw i32 %125, %124
  %127 = lshr i32 %126, 1
  %128 = trunc i32 %127 to i8
  store i8 %128, i8* %119, align 1
  %129 = add nuw nsw i64 %118, 1
  %130 = getelementptr inbounds i8, i8* %34, i64 %129
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = getelementptr inbounds i8, i8* %33, i64 %129
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = add nuw nsw i32 %132, 1
  %137 = add nuw nsw i32 %136, %135
  %138 = lshr i32 %137, 1
  %139 = trunc i32 %138 to i8
  store i8 %139, i8* %130, align 1
  %140 = add nuw nsw i64 %118, 2
  %141 = icmp eq i64 %140, %15
  br i1 %141, label %142, label %117, !llvm.loop !12

142:                                              ; preds = %114, %117, %98, %30
  %143 = getelementptr inbounds i8, i8* %33, i64 %1
  %144 = getelementptr inbounds i8, i8* %34, i64 %3
  %145 = add nuw nsw i32 %32, 1
  %146 = icmp eq i32 %145, %10
  %147 = add i64 %31, 1
  br i1 %146, label %148, label %30

148:                                              ; preds = %142, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_convolve_copy_c(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readnone, i32, i32, i32, i32, i32, i32) local_unnamed_addr #1 {
  %12 = icmp sgt i32 %10, 0
  br i1 %12, label %13, label %47

13:                                               ; preds = %11
  %14 = sext i32 %9 to i64
  %15 = add nsw i32 %10, -1
  %16 = and i32 %10, 3
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %28, label %18

18:                                               ; preds = %13, %18
  %19 = phi i32 [ %25, %18 ], [ %10, %13 ]
  %20 = phi i8* [ %23, %18 ], [ %0, %13 ]
  %21 = phi i8* [ %24, %18 ], [ %2, %13 ]
  %22 = phi i32 [ %26, %18 ], [ %16, %13 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %21, i8* align 1 %20, i64 %14, i1 false)
  %23 = getelementptr inbounds i8, i8* %20, i64 %1
  %24 = getelementptr inbounds i8, i8* %21, i64 %3
  %25 = add nsw i32 %19, -1
  %26 = add i32 %22, -1
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %18, !llvm.loop !13

28:                                               ; preds = %18, %13
  %29 = phi i32 [ %10, %13 ], [ %25, %18 ]
  %30 = phi i8* [ %0, %13 ], [ %23, %18 ]
  %31 = phi i8* [ %2, %13 ], [ %24, %18 ]
  %32 = icmp ult i32 %15, 3
  br i1 %32, label %47, label %33

33:                                               ; preds = %28, %33
  %34 = phi i32 [ %45, %33 ], [ %29, %28 ]
  %35 = phi i8* [ %43, %33 ], [ %30, %28 ]
  %36 = phi i8* [ %44, %33 ], [ %31, %28 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 %35, i64 %14, i1 false)
  %37 = getelementptr inbounds i8, i8* %35, i64 %1
  %38 = getelementptr inbounds i8, i8* %36, i64 %3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %37, i64 %14, i1 false)
  %39 = getelementptr inbounds i8, i8* %37, i64 %1
  %40 = getelementptr inbounds i8, i8* %38, i64 %3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %39, i64 %14, i1 false)
  %41 = getelementptr inbounds i8, i8* %39, i64 %1
  %42 = getelementptr inbounds i8, i8* %40, i64 %3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %41, i64 %14, i1 false)
  %43 = getelementptr inbounds i8, i8* %41, i64 %1
  %44 = getelementptr inbounds i8, i8* %42, i64 %3
  %45 = add nsw i32 %34, -4
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %33, label %47

47:                                               ; preds = %28, %33, %11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_scaled_horiz_c(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  tail call fastcc void @convolve_horiz(i8* %0, i64 %1, i8* %2, i64 %3, [8 x i16]* %4, i32 %5, i32 %6, i32 %9, i32 %10) #3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_scaled_vert_c(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  tail call fastcc void @convolve_vert(i8* %0, i64 %1, i8* %2, i64 %3, [8 x i16]* %4, i32 %7, i32 %8, i32 %9, i32 %10) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_scaled_2d_c(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32) local_unnamed_addr #1 {
  %12 = alloca [8640 x i8], align 16
  %13 = getelementptr inbounds [8640 x i8], [8640 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8640, i8* nonnull %13) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 8640, i1 false) #3
  %14 = add nsw i32 %10, -1
  %15 = mul nsw i32 %14, %8
  %16 = add nsw i32 %15, %7
  %17 = ashr i32 %16, 4
  %18 = add nsw i32 %17, 8
  %19 = mul i64 %1, -3
  %20 = getelementptr inbounds i8, i8* %0, i64 %19
  call fastcc void @convolve_horiz(i8* %20, i64 %1, i8* nonnull %13, i64 64, [8 x i16]* %4, i32 %5, i32 %6, i32 %9, i32 %18) #3
  %21 = getelementptr inbounds [8640 x i8], [8640 x i8]* %12, i64 0, i64 192
  call fastcc void @convolve_vert(i8* %21, i64 64, i8* %2, i64 %3, [8 x i16]* %4, i32 %7, i32 %8, i32 %9, i32 %10) #3
  call void @llvm.lifetime.end.p0i8(i64 8640, i8* nonnull %13) #3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_scaled_avg_horiz_c(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  tail call void @vpx_convolve8_avg_horiz_c(i8* %0, i64 %1, i8* %2, i64 %3, [8 x i16]* %4, i32 %5, i32 %6, i32 undef, i32 undef, i32 %9, i32 %10)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_scaled_avg_vert_c(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  tail call void @vpx_convolve8_avg_vert_c(i8* %0, i64 %1, i8* %2, i64 %3, [8 x i16]* %4, i32 undef, i32 undef, i32 %7, i32 %8, i32 %9, i32 %10)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_scaled_avg_2d_c(i8* nocapture readonly, i64, i8* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32) local_unnamed_addr #1 {
  %12 = alloca [8640 x i8], align 16
  %13 = alloca [4096 x i8], align 16
  %14 = getelementptr inbounds [4096 x i8], [4096 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %14) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 4096, i1 false) #3
  %15 = getelementptr inbounds [8640 x i8], [8640 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8640, i8* nonnull %15) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 8640, i1 false) #3
  %16 = add nsw i32 %10, -1
  %17 = mul nsw i32 %16, %8
  %18 = add nsw i32 %17, %7
  %19 = ashr i32 %18, 4
  %20 = add nsw i32 %19, 8
  %21 = mul i64 %1, -3
  %22 = getelementptr inbounds i8, i8* %0, i64 %21
  call fastcc void @convolve_horiz(i8* %22, i64 %1, i8* nonnull %15, i64 64, [8 x i16]* %4, i32 %5, i32 %6, i32 %9, i32 %20) #3
  %23 = getelementptr inbounds [8640 x i8], [8640 x i8]* %12, i64 0, i64 192
  call fastcc void @convolve_vert(i8* %23, i64 64, i8* nonnull %14, i64 64, [8 x i16]* %4, i32 %7, i32 %8, i32 %9, i32 %10) #3
  call void @llvm.lifetime.end.p0i8(i64 8640, i8* nonnull %15) #3
  %24 = icmp sgt i32 %10, 0
  br i1 %24, label %25, label %116

25:                                               ; preds = %11
  %26 = icmp sgt i32 %9, 0
  %27 = zext i32 %9 to i64
  %28 = and i64 %27, 4294967280
  %29 = add nsw i64 %28, -16
  %30 = lshr exact i64 %29, 4
  %31 = add nuw nsw i64 %30, 1
  %32 = icmp ult i32 %9, 16
  %33 = and i64 %27, 4294967280
  %34 = and i64 %31, 1
  %35 = icmp eq i64 %29, 0
  %36 = sub nuw nsw i64 %31, %34
  %37 = icmp eq i64 %34, 0
  %38 = icmp eq i64 %33, %27
  br label %39

39:                                               ; preds = %111, %25
  %40 = phi i32 [ 0, %25 ], [ %114, %111 ]
  %41 = phi i8* [ %14, %25 ], [ %112, %111 ]
  %42 = phi i8* [ %2, %25 ], [ %113, %111 ]
  br i1 %26, label %43, label %111

43:                                               ; preds = %39
  br i1 %32, label %95, label %44

44:                                               ; preds = %43
  br i1 %35, label %78, label %45

45:                                               ; preds = %44, %45
  %46 = phi i64 [ %75, %45 ], [ 0, %44 ]
  %47 = phi i64 [ %76, %45 ], [ %36, %44 ]
  %48 = getelementptr inbounds i8, i8* %42, i64 %46
  %49 = bitcast i8* %48 to <16 x i8>*
  %50 = load <16 x i8>, <16 x i8>* %49, align 1
  %51 = zext <16 x i8> %50 to <16 x i32>
  %52 = getelementptr inbounds i8, i8* %41, i64 %46
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1
  %55 = zext <16 x i8> %54 to <16 x i32>
  %56 = add nuw nsw <16 x i32> %51, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %57 = add nuw nsw <16 x i32> %56, %55
  %58 = lshr <16 x i32> %57, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %59 = trunc <16 x i32> %58 to <16 x i8>
  %60 = bitcast i8* %48 to <16 x i8>*
  store <16 x i8> %59, <16 x i8>* %60, align 1
  %61 = or i64 %46, 16
  %62 = getelementptr inbounds i8, i8* %42, i64 %61
  %63 = bitcast i8* %62 to <16 x i8>*
  %64 = load <16 x i8>, <16 x i8>* %63, align 1
  %65 = zext <16 x i8> %64 to <16 x i32>
  %66 = getelementptr inbounds i8, i8* %41, i64 %61
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = zext <16 x i8> %68 to <16 x i32>
  %70 = add nuw nsw <16 x i32> %65, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %71 = add nuw nsw <16 x i32> %70, %69
  %72 = lshr <16 x i32> %71, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %73 = trunc <16 x i32> %72 to <16 x i8>
  %74 = bitcast i8* %62 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %74, align 1
  %75 = add i64 %46, 32
  %76 = add i64 %47, -2
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %78, label %45, !llvm.loop !15

78:                                               ; preds = %45, %44
  %79 = phi i64 [ 0, %44 ], [ %75, %45 ]
  br i1 %37, label %94, label %80

80:                                               ; preds = %78
  %81 = getelementptr inbounds i8, i8* %42, i64 %79
  %82 = bitcast i8* %81 to <16 x i8>*
  %83 = load <16 x i8>, <16 x i8>* %82, align 1
  %84 = zext <16 x i8> %83 to <16 x i32>
  %85 = getelementptr inbounds i8, i8* %41, i64 %79
  %86 = bitcast i8* %85 to <16 x i8>*
  %87 = load <16 x i8>, <16 x i8>* %86, align 1
  %88 = zext <16 x i8> %87 to <16 x i32>
  %89 = add nuw nsw <16 x i32> %84, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %90 = add nuw nsw <16 x i32> %89, %88
  %91 = lshr <16 x i32> %90, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %92 = trunc <16 x i32> %91 to <16 x i8>
  %93 = bitcast i8* %81 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %93, align 1
  br label %94

94:                                               ; preds = %78, %80
  br i1 %38, label %111, label %95

95:                                               ; preds = %94, %43
  %96 = phi i64 [ 0, %43 ], [ %33, %94 ]
  br label %97

97:                                               ; preds = %95, %97
  %98 = phi i64 [ %109, %97 ], [ %96, %95 ]
  %99 = getelementptr inbounds i8, i8* %42, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i32
  %102 = getelementptr inbounds i8, i8* %41, i64 %98
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = add nuw nsw i32 %101, 1
  %106 = add nuw nsw i32 %105, %104
  %107 = lshr i32 %106, 1
  %108 = trunc i32 %107 to i8
  store i8 %108, i8* %99, align 1
  %109 = add nuw nsw i64 %98, 1
  %110 = icmp eq i64 %109, %27
  br i1 %110, label %111, label %97, !llvm.loop !16

111:                                              ; preds = %97, %94, %39
  %112 = getelementptr inbounds i8, i8* %41, i64 64
  %113 = getelementptr inbounds i8, i8* %42, i64 %3
  %114 = add nuw nsw i32 %40, 1
  %115 = icmp eq i32 %114, %10
  br i1 %115, label %116, label %39

116:                                              ; preds = %111, %11
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %14) #3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_convolve8_horiz_c(i16* nocapture readonly, i64, i16* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  tail call fastcc void @highbd_convolve_horiz(i16* %0, i64 %1, i16* %2, i64 %3, [8 x i16]* %4, i32 %5, i32 %6, i32 %9, i32 %10, i32 %11)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @highbd_convolve_horiz(i16* nocapture readonly, i64, i16* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32) unnamed_addr #0 {
  %11 = icmp sgt i32 %8, 0
  br i1 %11, label %12, label %63

12:                                               ; preds = %10
  %13 = getelementptr inbounds i16, i16* %0, i64 -3
  %14 = icmp sgt i32 %7, 0
  %15 = zext i32 %7 to i64
  %16 = icmp eq i32 %9, 10
  %17 = select i1 %16, i32 1023, i32 255
  %18 = icmp eq i32 %9, 12
  %19 = select i1 %18, i32 4095, i32 %17
  br label %20

20:                                               ; preds = %58, %12
  %21 = phi i32 [ 0, %12 ], [ %61, %58 ]
  %22 = phi i16* [ %13, %12 ], [ %59, %58 ]
  %23 = phi i16* [ %2, %12 ], [ %60, %58 ]
  br i1 %14, label %24, label %58

24:                                               ; preds = %20, %24
  %25 = phi i64 [ %56, %24 ], [ 0, %20 ]
  %26 = phi i32 [ %55, %24 ], [ %5, %20 ]
  %27 = ashr i32 %26, 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i16, i16* %22, i64 %28
  %30 = and i32 %26, 15
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %31, i64 0
  %33 = bitcast i16* %29 to <8 x i16>*
  %34 = load <8 x i16>, <8 x i16>* %33, align 2
  %35 = zext <8 x i16> %34 to <8 x i32>
  %36 = bitcast i16* %32 to <8 x i16>*
  %37 = load <8 x i16>, <8 x i16>* %36, align 2
  %38 = sext <8 x i16> %37 to <8 x i32>
  %39 = mul nsw <8 x i32> %38, %35
  %40 = shufflevector <8 x i32> %39, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %41 = add nsw <8 x i32> %39, %40
  %42 = shufflevector <8 x i32> %41, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %43 = add nsw <8 x i32> %41, %42
  %44 = shufflevector <8 x i32> %43, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %45 = add nsw <8 x i32> %43, %44
  %46 = extractelement <8 x i32> %45, i32 0
  %47 = add nsw i32 %46, 64
  %48 = ashr i32 %47, 7
  %49 = icmp slt i32 %48, %19
  %50 = select i1 %49, i32 %48, i32 %19
  %51 = icmp sgt i32 %50, 0
  %52 = select i1 %51, i32 %50, i32 0
  %53 = trunc i32 %52 to i16
  %54 = getelementptr inbounds i16, i16* %23, i64 %25
  store i16 %53, i16* %54, align 2
  %55 = add nsw i32 %26, %6
  %56 = add nuw nsw i64 %25, 1
  %57 = icmp eq i64 %56, %15
  br i1 %57, label %58, label %24

58:                                               ; preds = %24, %20
  %59 = getelementptr inbounds i16, i16* %22, i64 %1
  %60 = getelementptr inbounds i16, i16* %23, i64 %3
  %61 = add nuw nsw i32 %21, 1
  %62 = icmp eq i32 %61, %8
  br i1 %62, label %63, label %20

63:                                               ; preds = %58, %10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_convolve8_avg_horiz_c(i16* nocapture readonly, i64, i16* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %13 = icmp sgt i32 %10, 0
  br i1 %13, label %14, label %71

14:                                               ; preds = %12
  %15 = getelementptr inbounds i16, i16* %0, i64 -3
  %16 = icmp sgt i32 %9, 0
  %17 = zext i32 %9 to i64
  %18 = icmp eq i32 %11, 10
  %19 = select i1 %18, i32 1023, i32 255
  %20 = icmp eq i32 %11, 12
  %21 = select i1 %20, i32 4095, i32 %19
  br label %22

22:                                               ; preds = %66, %14
  %23 = phi i32 [ 0, %14 ], [ %69, %66 ]
  %24 = phi i16* [ %15, %14 ], [ %67, %66 ]
  %25 = phi i16* [ %2, %14 ], [ %68, %66 ]
  br i1 %16, label %26, label %66

26:                                               ; preds = %22, %26
  %27 = phi i64 [ %64, %26 ], [ 0, %22 ]
  %28 = phi i32 [ %63, %26 ], [ %5, %22 ]
  %29 = ashr i32 %28, 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i16, i16* %24, i64 %30
  %32 = and i32 %28, 15
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %33, i64 0
  %35 = bitcast i16* %31 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 2
  %37 = zext <8 x i16> %36 to <8 x i32>
  %38 = bitcast i16* %34 to <8 x i16>*
  %39 = load <8 x i16>, <8 x i16>* %38, align 2
  %40 = sext <8 x i16> %39 to <8 x i32>
  %41 = mul nsw <8 x i32> %40, %37
  %42 = getelementptr inbounds i16, i16* %25, i64 %27
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i32
  %45 = shufflevector <8 x i32> %41, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %46 = add <8 x i32> %41, %45
  %47 = shufflevector <8 x i32> %46, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %48 = add <8 x i32> %46, %47
  %49 = shufflevector <8 x i32> %48, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %50 = add <8 x i32> %48, %49
  %51 = extractelement <8 x i32> %50, i32 0
  %52 = add nsw i32 %51, 64
  %53 = ashr i32 %52, 7
  %54 = icmp slt i32 %53, %21
  %55 = select i1 %54, i32 %53, i32 %21
  %56 = icmp sgt i32 %55, 0
  %57 = select i1 %56, i32 %55, i32 0
  %58 = and i32 %57, 65535
  %59 = add nuw nsw i32 %44, 1
  %60 = add nuw nsw i32 %59, %58
  %61 = lshr i32 %60, 1
  %62 = trunc i32 %61 to i16
  store i16 %62, i16* %42, align 2
  %63 = add nsw i32 %28, %6
  %64 = add nuw nsw i64 %27, 1
  %65 = icmp eq i64 %64, %17
  br i1 %65, label %66, label %26

66:                                               ; preds = %26, %22
  %67 = getelementptr inbounds i16, i16* %24, i64 %1
  %68 = getelementptr inbounds i16, i16* %25, i64 %3
  %69 = add nuw nsw i32 %23, 1
  %70 = icmp eq i32 %69, %10
  br i1 %70, label %71, label %22

71:                                               ; preds = %66, %12
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_convolve8_vert_c(i16* nocapture readonly, i64, i16* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  tail call fastcc void @highbd_convolve_vert(i16* %0, i64 %1, i16* %2, i64 %3, [8 x i16]* %4, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @highbd_convolve_vert(i16* nocapture readonly, i64, i16* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32) unnamed_addr #0 {
  %11 = icmp sgt i32 %7, 0
  br i1 %11, label %12, label %119

12:                                               ; preds = %10
  %13 = mul i64 %1, -3
  %14 = getelementptr inbounds i16, i16* %0, i64 %13
  %15 = icmp sgt i32 %8, 0
  %16 = zext i32 %8 to i64
  %17 = shl nsw i64 %1, 1
  %18 = mul nsw i64 %1, 3
  %19 = shl nsw i64 %1, 2
  %20 = mul nsw i64 %1, 5
  %21 = mul nsw i64 %1, 6
  %22 = mul nsw i64 %1, 7
  %23 = icmp eq i32 %9, 10
  %24 = select i1 %23, i32 1023, i32 255
  %25 = icmp eq i32 %9, 12
  %26 = select i1 %25, i32 4095, i32 %24
  br label %27

27:                                               ; preds = %114, %12
  %28 = phi i32 [ 0, %12 ], [ %117, %114 ]
  %29 = phi i16* [ %14, %12 ], [ %115, %114 ]
  %30 = phi i16* [ %2, %12 ], [ %116, %114 ]
  br i1 %15, label %31, label %114

31:                                               ; preds = %27, %31
  %32 = phi i64 [ %112, %31 ], [ 0, %27 ]
  %33 = phi i32 [ %111, %31 ], [ %5, %27 ]
  %34 = ashr i32 %33, 4
  %35 = sext i32 %34 to i64
  %36 = mul nsw i64 %35, %1
  %37 = getelementptr inbounds i16, i16* %29, i64 %36
  %38 = and i32 %33, 15
  %39 = zext i32 %38 to i64
  %40 = load i16, i16* %37, align 2
  %41 = zext i16 %40 to i32
  %42 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %39, i64 0
  %43 = load i16, i16* %42, align 2
  %44 = sext i16 %43 to i32
  %45 = mul nsw i32 %44, %41
  %46 = getelementptr inbounds i16, i16* %37, i64 %1
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %39, i64 1
  %50 = load i16, i16* %49, align 2
  %51 = sext i16 %50 to i32
  %52 = mul nsw i32 %51, %48
  %53 = add nsw i32 %52, %45
  %54 = getelementptr inbounds i16, i16* %37, i64 %17
  %55 = load i16, i16* %54, align 2
  %56 = zext i16 %55 to i32
  %57 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %39, i64 2
  %58 = load i16, i16* %57, align 2
  %59 = sext i16 %58 to i32
  %60 = mul nsw i32 %59, %56
  %61 = add nsw i32 %60, %53
  %62 = getelementptr inbounds i16, i16* %37, i64 %18
  %63 = load i16, i16* %62, align 2
  %64 = zext i16 %63 to i32
  %65 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %39, i64 3
  %66 = load i16, i16* %65, align 2
  %67 = sext i16 %66 to i32
  %68 = mul nsw i32 %67, %64
  %69 = add nsw i32 %68, %61
  %70 = getelementptr inbounds i16, i16* %37, i64 %19
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %39, i64 4
  %74 = load i16, i16* %73, align 2
  %75 = sext i16 %74 to i32
  %76 = mul nsw i32 %75, %72
  %77 = add nsw i32 %76, %69
  %78 = getelementptr inbounds i16, i16* %37, i64 %20
  %79 = load i16, i16* %78, align 2
  %80 = zext i16 %79 to i32
  %81 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %39, i64 5
  %82 = load i16, i16* %81, align 2
  %83 = sext i16 %82 to i32
  %84 = mul nsw i32 %83, %80
  %85 = add nsw i32 %84, %77
  %86 = getelementptr inbounds i16, i16* %37, i64 %21
  %87 = load i16, i16* %86, align 2
  %88 = zext i16 %87 to i32
  %89 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %39, i64 6
  %90 = load i16, i16* %89, align 2
  %91 = sext i16 %90 to i32
  %92 = mul nsw i32 %91, %88
  %93 = add nsw i32 %92, %85
  %94 = getelementptr inbounds i16, i16* %37, i64 %22
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i32
  %97 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %39, i64 7
  %98 = load i16, i16* %97, align 2
  %99 = sext i16 %98 to i32
  %100 = mul nsw i32 %99, %96
  %101 = add nsw i32 %100, %93
  %102 = add nsw i32 %101, 64
  %103 = ashr i32 %102, 7
  %104 = icmp slt i32 %103, %26
  %105 = select i1 %104, i32 %103, i32 %26
  %106 = icmp sgt i32 %105, 0
  %107 = select i1 %106, i32 %105, i32 0
  %108 = trunc i32 %107 to i16
  %109 = mul nsw i64 %32, %3
  %110 = getelementptr inbounds i16, i16* %30, i64 %109
  store i16 %108, i16* %110, align 2
  %111 = add nsw i32 %33, %6
  %112 = add nuw nsw i64 %32, 1
  %113 = icmp eq i64 %112, %16
  br i1 %113, label %114, label %31

114:                                              ; preds = %31, %27
  %115 = getelementptr inbounds i16, i16* %29, i64 1
  %116 = getelementptr inbounds i16, i16* %30, i64 1
  %117 = add nuw nsw i32 %28, 1
  %118 = icmp eq i32 %117, %7
  br i1 %118, label %119, label %27

119:                                              ; preds = %114, %10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_convolve8_avg_vert_c(i16* nocapture readonly, i64, i16* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %13 = icmp sgt i32 %9, 0
  br i1 %13, label %14, label %127

14:                                               ; preds = %12
  %15 = mul i64 %1, -3
  %16 = getelementptr inbounds i16, i16* %0, i64 %15
  %17 = icmp sgt i32 %10, 0
  %18 = zext i32 %10 to i64
  %19 = shl nsw i64 %1, 1
  %20 = mul nsw i64 %1, 3
  %21 = shl nsw i64 %1, 2
  %22 = mul nsw i64 %1, 5
  %23 = mul nsw i64 %1, 6
  %24 = mul nsw i64 %1, 7
  %25 = icmp eq i32 %11, 10
  %26 = select i1 %25, i32 1023, i32 255
  %27 = icmp eq i32 %11, 12
  %28 = select i1 %27, i32 4095, i32 %26
  br label %29

29:                                               ; preds = %122, %14
  %30 = phi i32 [ 0, %14 ], [ %125, %122 ]
  %31 = phi i16* [ %16, %14 ], [ %123, %122 ]
  %32 = phi i16* [ %2, %14 ], [ %124, %122 ]
  br i1 %17, label %33, label %122

33:                                               ; preds = %29, %33
  %34 = phi i64 [ %120, %33 ], [ 0, %29 ]
  %35 = phi i32 [ %119, %33 ], [ %7, %29 ]
  %36 = ashr i32 %35, 4
  %37 = sext i32 %36 to i64
  %38 = mul nsw i64 %37, %1
  %39 = getelementptr inbounds i16, i16* %31, i64 %38
  %40 = and i32 %35, 15
  %41 = zext i32 %40 to i64
  %42 = load i16, i16* %39, align 2
  %43 = zext i16 %42 to i32
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %41, i64 0
  %45 = load i16, i16* %44, align 2
  %46 = sext i16 %45 to i32
  %47 = mul nsw i32 %46, %43
  %48 = getelementptr inbounds i16, i16* %39, i64 %1
  %49 = load i16, i16* %48, align 2
  %50 = zext i16 %49 to i32
  %51 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %41, i64 1
  %52 = load i16, i16* %51, align 2
  %53 = sext i16 %52 to i32
  %54 = mul nsw i32 %53, %50
  %55 = getelementptr inbounds i16, i16* %39, i64 %19
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %41, i64 2
  %59 = load i16, i16* %58, align 2
  %60 = sext i16 %59 to i32
  %61 = mul nsw i32 %60, %57
  %62 = getelementptr inbounds i16, i16* %39, i64 %20
  %63 = load i16, i16* %62, align 2
  %64 = zext i16 %63 to i32
  %65 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %41, i64 3
  %66 = load i16, i16* %65, align 2
  %67 = sext i16 %66 to i32
  %68 = mul nsw i32 %67, %64
  %69 = getelementptr inbounds i16, i16* %39, i64 %21
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i32
  %72 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %41, i64 4
  %73 = load i16, i16* %72, align 2
  %74 = sext i16 %73 to i32
  %75 = mul nsw i32 %74, %71
  %76 = getelementptr inbounds i16, i16* %39, i64 %22
  %77 = load i16, i16* %76, align 2
  %78 = zext i16 %77 to i32
  %79 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %41, i64 5
  %80 = load i16, i16* %79, align 2
  %81 = sext i16 %80 to i32
  %82 = mul nsw i32 %81, %78
  %83 = getelementptr inbounds i16, i16* %39, i64 %23
  %84 = load i16, i16* %83, align 2
  %85 = zext i16 %84 to i32
  %86 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %41, i64 6
  %87 = load i16, i16* %86, align 2
  %88 = sext i16 %87 to i32
  %89 = mul nsw i32 %88, %85
  %90 = getelementptr inbounds i16, i16* %39, i64 %24
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %41, i64 7
  %94 = load i16, i16* %93, align 2
  %95 = sext i16 %94 to i32
  %96 = mul nsw i32 %95, %92
  %97 = mul nsw i64 %34, %3
  %98 = getelementptr inbounds i16, i16* %32, i64 %97
  %99 = load i16, i16* %98, align 2
  %100 = zext i16 %99 to i32
  %101 = add nsw i32 %47, 64
  %102 = add i32 %101, %54
  %103 = add i32 %102, %61
  %104 = add i32 %103, %68
  %105 = add i32 %104, %75
  %106 = add i32 %105, %82
  %107 = add i32 %106, %89
  %108 = add i32 %107, %96
  %109 = ashr i32 %108, 7
  %110 = icmp slt i32 %109, %28
  %111 = select i1 %110, i32 %109, i32 %28
  %112 = icmp sgt i32 %111, 0
  %113 = select i1 %112, i32 %111, i32 0
  %114 = and i32 %113, 65535
  %115 = add nuw nsw i32 %100, 1
  %116 = add nuw nsw i32 %115, %114
  %117 = lshr i32 %116, 1
  %118 = trunc i32 %117 to i16
  store i16 %118, i16* %98, align 2
  %119 = add nsw i32 %35, %8
  %120 = add nuw nsw i64 %34, 1
  %121 = icmp eq i64 %120, %18
  br i1 %121, label %122, label %33

122:                                              ; preds = %33, %29
  %123 = getelementptr inbounds i16, i16* %31, i64 1
  %124 = getelementptr inbounds i16, i16* %32, i64 1
  %125 = add nuw nsw i32 %30, 1
  %126 = icmp eq i32 %125, %9
  br i1 %126, label %127, label %29

127:                                              ; preds = %122, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_convolve8_c(i16* nocapture readonly, i64, i16* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #1 {
  %13 = alloca [8640 x i16], align 16
  %14 = bitcast [8640 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 17280, i8* nonnull %14) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 17280, i1 false) #3
  %15 = add nsw i32 %10, -1
  %16 = mul nsw i32 %15, %8
  %17 = add nsw i32 %16, %7
  %18 = ashr i32 %17, 4
  %19 = add nsw i32 %18, 8
  %20 = mul i64 %1, -3
  %21 = getelementptr inbounds i16, i16* %0, i64 %20
  %22 = getelementptr inbounds [8640 x i16], [8640 x i16]* %13, i64 0, i64 0
  call fastcc void @highbd_convolve_horiz(i16* %21, i64 %1, i16* nonnull %22, i64 64, [8 x i16]* %4, i32 %5, i32 %6, i32 %9, i32 %19, i32 %11) #3
  %23 = getelementptr inbounds [8640 x i16], [8640 x i16]* %13, i64 0, i64 192
  call fastcc void @highbd_convolve_vert(i16* %23, i64 64, i16* %2, i64 %3, [8 x i16]* %4, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11) #3
  call void @llvm.lifetime.end.p0i8(i64 17280, i8* nonnull %14) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_convolve8_avg_c(i16* nocapture readonly, i64, i16* nocapture, i64, [8 x i16]* nocapture readonly, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #1 {
  %13 = alloca [8640 x i16], align 16
  %14 = alloca [4096 x i16], align 16
  %15 = bitcast [4096 x i16]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8192, i8* nonnull %15) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 8192, i1 false)
  %16 = getelementptr inbounds [4096 x i16], [4096 x i16]* %14, i64 0, i64 0
  %17 = bitcast [8640 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 17280, i8* nonnull %17) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -86, i64 17280, i1 false) #3
  %18 = add nsw i32 %10, -1
  %19 = mul nsw i32 %18, %8
  %20 = add nsw i32 %19, %7
  %21 = ashr i32 %20, 4
  %22 = add nsw i32 %21, 8
  %23 = mul i64 %1, -3
  %24 = getelementptr inbounds i16, i16* %0, i64 %23
  %25 = getelementptr inbounds [8640 x i16], [8640 x i16]* %13, i64 0, i64 0
  call fastcc void @highbd_convolve_horiz(i16* %24, i64 %1, i16* nonnull %25, i64 64, [8 x i16]* %4, i32 %5, i32 %6, i32 %9, i32 %22, i32 %11) #3
  %26 = getelementptr inbounds [8640 x i16], [8640 x i16]* %13, i64 0, i64 192
  call fastcc void @highbd_convolve_vert(i16* %26, i64 64, i16* nonnull %16, i64 64, [8 x i16]* %4, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11) #3
  call void @llvm.lifetime.end.p0i8(i64 17280, i8* nonnull %17) #3
  %27 = icmp sgt i32 %10, 0
  br i1 %27, label %28, label %119

28:                                               ; preds = %12
  %29 = icmp sgt i32 %9, 0
  %30 = zext i32 %9 to i64
  %31 = and i64 %30, 4294967288
  %32 = add nsw i64 %31, -8
  %33 = lshr exact i64 %32, 3
  %34 = add nuw nsw i64 %33, 1
  %35 = icmp ult i32 %9, 8
  %36 = and i64 %30, 4294967288
  %37 = and i64 %34, 1
  %38 = icmp eq i64 %32, 0
  %39 = sub nuw nsw i64 %34, %37
  %40 = icmp eq i64 %37, 0
  %41 = icmp eq i64 %36, %30
  br label %42

42:                                               ; preds = %114, %28
  %43 = phi i32 [ 0, %28 ], [ %117, %114 ]
  %44 = phi i16* [ %16, %28 ], [ %115, %114 ]
  %45 = phi i16* [ %2, %28 ], [ %116, %114 ]
  br i1 %29, label %46, label %114

46:                                               ; preds = %42
  br i1 %35, label %98, label %47

47:                                               ; preds = %46
  br i1 %38, label %81, label %48

48:                                               ; preds = %47, %48
  %49 = phi i64 [ %78, %48 ], [ 0, %47 ]
  %50 = phi i64 [ %79, %48 ], [ %39, %47 ]
  %51 = getelementptr inbounds i16, i16* %45, i64 %49
  %52 = bitcast i16* %51 to <8 x i16>*
  %53 = load <8 x i16>, <8 x i16>* %52, align 2
  %54 = zext <8 x i16> %53 to <8 x i32>
  %55 = getelementptr inbounds i16, i16* %44, i64 %49
  %56 = bitcast i16* %55 to <8 x i16>*
  %57 = load <8 x i16>, <8 x i16>* %56, align 2
  %58 = zext <8 x i16> %57 to <8 x i32>
  %59 = add nuw nsw <8 x i32> %54, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %60 = add nuw nsw <8 x i32> %59, %58
  %61 = lshr <8 x i32> %60, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %62 = trunc <8 x i32> %61 to <8 x i16>
  %63 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %62, <8 x i16>* %63, align 2
  %64 = or i64 %49, 8
  %65 = getelementptr inbounds i16, i16* %45, i64 %64
  %66 = bitcast i16* %65 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2
  %68 = zext <8 x i16> %67 to <8 x i32>
  %69 = getelementptr inbounds i16, i16* %44, i64 %64
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2
  %72 = zext <8 x i16> %71 to <8 x i32>
  %73 = add nuw nsw <8 x i32> %68, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %74 = add nuw nsw <8 x i32> %73, %72
  %75 = lshr <8 x i32> %74, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %76 = trunc <8 x i32> %75 to <8 x i16>
  %77 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %76, <8 x i16>* %77, align 2
  %78 = add i64 %49, 16
  %79 = add i64 %50, -2
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %48, !llvm.loop !17

81:                                               ; preds = %48, %47
  %82 = phi i64 [ 0, %47 ], [ %78, %48 ]
  br i1 %40, label %97, label %83

83:                                               ; preds = %81
  %84 = getelementptr inbounds i16, i16* %45, i64 %82
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2
  %87 = zext <8 x i16> %86 to <8 x i32>
  %88 = getelementptr inbounds i16, i16* %44, i64 %82
  %89 = bitcast i16* %88 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2
  %91 = zext <8 x i16> %90 to <8 x i32>
  %92 = add nuw nsw <8 x i32> %87, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %93 = add nuw nsw <8 x i32> %92, %91
  %94 = lshr <8 x i32> %93, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %95 = trunc <8 x i32> %94 to <8 x i16>
  %96 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %96, align 2
  br label %97

97:                                               ; preds = %81, %83
  br i1 %41, label %114, label %98

98:                                               ; preds = %97, %46
  %99 = phi i64 [ 0, %46 ], [ %36, %97 ]
  br label %100

100:                                              ; preds = %98, %100
  %101 = phi i64 [ %112, %100 ], [ %99, %98 ]
  %102 = getelementptr inbounds i16, i16* %45, i64 %101
  %103 = load i16, i16* %102, align 2
  %104 = zext i16 %103 to i32
  %105 = getelementptr inbounds i16, i16* %44, i64 %101
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = add nuw nsw i32 %104, 1
  %109 = add nuw nsw i32 %108, %107
  %110 = lshr i32 %109, 1
  %111 = trunc i32 %110 to i16
  store i16 %111, i16* %102, align 2
  %112 = add nuw nsw i64 %101, 1
  %113 = icmp eq i64 %112, %30
  br i1 %113, label %114, label %100, !llvm.loop !18

114:                                              ; preds = %100, %97, %42
  %115 = getelementptr inbounds i16, i16* %44, i64 64
  %116 = getelementptr inbounds i16, i16* %45, i64 %3
  %117 = add nuw nsw i32 %43, 1
  %118 = icmp eq i32 %117, %10
  br i1 %118, label %119, label %42

119:                                              ; preds = %114, %12
  call void @llvm.lifetime.end.p0i8(i64 8192, i8* nonnull %15) #3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_convolve_avg_c(i16* nocapture readonly, i64, i16* nocapture, i64, [8 x i16]* nocapture readnone, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %13 = icmp sgt i32 %10, 0
  br i1 %13, label %14, label %149

14:                                               ; preds = %12
  %15 = icmp sgt i32 %9, 0
  %16 = zext i32 %9 to i64
  %17 = and i64 %16, 4294967288
  %18 = add nsw i64 %17, -8
  %19 = lshr exact i64 %18, 3
  %20 = add nuw nsw i64 %19, 1
  %21 = icmp ult i32 %9, 8
  %22 = and i64 %16, 4294967288
  %23 = and i64 %20, 1
  %24 = icmp eq i64 %18, 0
  %25 = sub nuw nsw i64 %20, %23
  %26 = icmp eq i64 %23, 0
  %27 = icmp eq i64 %22, %16
  %28 = and i64 %16, 1
  %29 = icmp eq i64 %28, 0
  %30 = sub nsw i64 0, %16
  br label %31

31:                                               ; preds = %143, %14
  %32 = phi i64 [ %148, %143 ], [ 0, %14 ]
  %33 = phi i32 [ %146, %143 ], [ 0, %14 ]
  %34 = phi i16* [ %144, %143 ], [ %0, %14 ]
  %35 = phi i16* [ %145, %143 ], [ %2, %14 ]
  %36 = mul i64 %32, %3
  %37 = getelementptr i16, i16* %2, i64 %36
  %38 = add i64 %36, %16
  %39 = getelementptr i16, i16* %2, i64 %38
  %40 = mul i64 %32, %1
  %41 = getelementptr i16, i16* %0, i64 %40
  %42 = add i64 %40, %16
  %43 = getelementptr i16, i16* %0, i64 %42
  br i1 %15, label %44, label %143

44:                                               ; preds = %31
  br i1 %21, label %100, label %45

45:                                               ; preds = %44
  %46 = icmp ult i16* %37, %43
  %47 = icmp ult i16* %41, %39
  %48 = and i1 %46, %47
  br i1 %48, label %100, label %49

49:                                               ; preds = %45
  br i1 %24, label %83, label %50

50:                                               ; preds = %49, %50
  %51 = phi i64 [ %80, %50 ], [ 0, %49 ]
  %52 = phi i64 [ %81, %50 ], [ %25, %49 ]
  %53 = getelementptr inbounds i16, i16* %35, i64 %51
  %54 = bitcast i16* %53 to <8 x i16>*
  %55 = load <8 x i16>, <8 x i16>* %54, align 2, !alias.scope !19, !noalias !22
  %56 = zext <8 x i16> %55 to <8 x i32>
  %57 = getelementptr inbounds i16, i16* %34, i64 %51
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2, !alias.scope !22
  %60 = zext <8 x i16> %59 to <8 x i32>
  %61 = add nuw nsw <8 x i32> %56, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %62 = add nuw nsw <8 x i32> %61, %60
  %63 = lshr <8 x i32> %62, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %64 = trunc <8 x i32> %63 to <8 x i16>
  %65 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %64, <8 x i16>* %65, align 2, !alias.scope !19, !noalias !22
  %66 = or i64 %51, 8
  %67 = getelementptr inbounds i16, i16* %35, i64 %66
  %68 = bitcast i16* %67 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 2, !alias.scope !19, !noalias !22
  %70 = zext <8 x i16> %69 to <8 x i32>
  %71 = getelementptr inbounds i16, i16* %34, i64 %66
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 2, !alias.scope !22
  %74 = zext <8 x i16> %73 to <8 x i32>
  %75 = add nuw nsw <8 x i32> %70, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %76 = add nuw nsw <8 x i32> %75, %74
  %77 = lshr <8 x i32> %76, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %78 = trunc <8 x i32> %77 to <8 x i16>
  %79 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %79, align 2, !alias.scope !19, !noalias !22
  %80 = add i64 %51, 16
  %81 = add i64 %52, -2
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %50, !llvm.loop !24

83:                                               ; preds = %50, %49
  %84 = phi i64 [ 0, %49 ], [ %80, %50 ]
  br i1 %26, label %99, label %85

85:                                               ; preds = %83
  %86 = getelementptr inbounds i16, i16* %35, i64 %84
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2, !alias.scope !19, !noalias !22
  %89 = zext <8 x i16> %88 to <8 x i32>
  %90 = getelementptr inbounds i16, i16* %34, i64 %84
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !22
  %93 = zext <8 x i16> %92 to <8 x i32>
  %94 = add nuw nsw <8 x i32> %89, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %95 = add nuw nsw <8 x i32> %94, %93
  %96 = lshr <8 x i32> %95, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %97 = trunc <8 x i32> %96 to <8 x i16>
  %98 = bitcast i16* %86 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %98, align 2, !alias.scope !19, !noalias !22
  br label %99

99:                                               ; preds = %83, %85
  br i1 %27, label %143, label %100

100:                                              ; preds = %99, %45, %44
  %101 = phi i64 [ 0, %45 ], [ 0, %44 ], [ %22, %99 ]
  %102 = xor i64 %101, -1
  br i1 %29, label %115, label %103

103:                                              ; preds = %100
  %104 = getelementptr inbounds i16, i16* %35, i64 %101
  %105 = load i16, i16* %104, align 2
  %106 = zext i16 %105 to i32
  %107 = getelementptr inbounds i16, i16* %34, i64 %101
  %108 = load i16, i16* %107, align 2
  %109 = zext i16 %108 to i32
  %110 = add nuw nsw i32 %106, 1
  %111 = add nuw nsw i32 %110, %109
  %112 = lshr i32 %111, 1
  %113 = trunc i32 %112 to i16
  store i16 %113, i16* %104, align 2
  %114 = or i64 %101, 1
  br label %115

115:                                              ; preds = %103, %100
  %116 = phi i64 [ %114, %103 ], [ %101, %100 ]
  %117 = icmp eq i64 %102, %30
  br i1 %117, label %143, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %141, %118 ], [ %116, %115 ]
  %120 = getelementptr inbounds i16, i16* %35, i64 %119
  %121 = load i16, i16* %120, align 2
  %122 = zext i16 %121 to i32
  %123 = getelementptr inbounds i16, i16* %34, i64 %119
  %124 = load i16, i16* %123, align 2
  %125 = zext i16 %124 to i32
  %126 = add nuw nsw i32 %122, 1
  %127 = add nuw nsw i32 %126, %125
  %128 = lshr i32 %127, 1
  %129 = trunc i32 %128 to i16
  store i16 %129, i16* %120, align 2
  %130 = add nuw nsw i64 %119, 1
  %131 = getelementptr inbounds i16, i16* %35, i64 %130
  %132 = load i16, i16* %131, align 2
  %133 = zext i16 %132 to i32
  %134 = getelementptr inbounds i16, i16* %34, i64 %130
  %135 = load i16, i16* %134, align 2
  %136 = zext i16 %135 to i32
  %137 = add nuw nsw i32 %133, 1
  %138 = add nuw nsw i32 %137, %136
  %139 = lshr i32 %138, 1
  %140 = trunc i32 %139 to i16
  store i16 %140, i16* %131, align 2
  %141 = add nuw nsw i64 %119, 2
  %142 = icmp eq i64 %141, %16
  br i1 %142, label %143, label %118, !llvm.loop !25

143:                                              ; preds = %115, %118, %99, %31
  %144 = getelementptr inbounds i16, i16* %34, i64 %1
  %145 = getelementptr inbounds i16, i16* %35, i64 %3
  %146 = add nuw nsw i32 %33, 1
  %147 = icmp eq i32 %146, %10
  %148 = add i64 %32, 1
  br i1 %147, label %149, label %31

149:                                              ; preds = %143, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_convolve_copy_c(i16* nocapture readonly, i64, i16* nocapture, i64, [8 x i16]* nocapture readnone, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #1 {
  %13 = icmp sgt i32 %10, 0
  br i1 %13, label %14, label %59

14:                                               ; preds = %12
  %15 = sext i32 %9 to i64
  %16 = shl nsw i64 %15, 1
  %17 = add nsw i32 %10, -1
  %18 = and i32 %10, 3
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %32, label %20

20:                                               ; preds = %14, %20
  %21 = phi i32 [ %29, %20 ], [ %10, %14 ]
  %22 = phi i16* [ %27, %20 ], [ %0, %14 ]
  %23 = phi i16* [ %28, %20 ], [ %2, %14 ]
  %24 = phi i32 [ %30, %20 ], [ %18, %14 ]
  %25 = bitcast i16* %23 to i8*
  %26 = bitcast i16* %22 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %25, i8* align 2 %26, i64 %16, i1 false)
  %27 = getelementptr inbounds i16, i16* %22, i64 %1
  %28 = getelementptr inbounds i16, i16* %23, i64 %3
  %29 = add nsw i32 %21, -1
  %30 = add i32 %24, -1
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %20, !llvm.loop !26

32:                                               ; preds = %20, %14
  %33 = phi i32 [ %10, %14 ], [ %29, %20 ]
  %34 = phi i16* [ %0, %14 ], [ %27, %20 ]
  %35 = phi i16* [ %2, %14 ], [ %28, %20 ]
  %36 = icmp ult i32 %17, 3
  br i1 %36, label %59, label %37

37:                                               ; preds = %32, %37
  %38 = phi i32 [ %57, %37 ], [ %33, %32 ]
  %39 = phi i16* [ %55, %37 ], [ %34, %32 ]
  %40 = phi i16* [ %56, %37 ], [ %35, %32 ]
  %41 = bitcast i16* %40 to i8*
  %42 = bitcast i16* %39 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %41, i8* align 2 %42, i64 %16, i1 false)
  %43 = getelementptr inbounds i16, i16* %39, i64 %1
  %44 = getelementptr inbounds i16, i16* %40, i64 %3
  %45 = bitcast i16* %44 to i8*
  %46 = bitcast i16* %43 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %45, i8* align 2 %46, i64 %16, i1 false)
  %47 = getelementptr inbounds i16, i16* %43, i64 %1
  %48 = getelementptr inbounds i16, i16* %44, i64 %3
  %49 = bitcast i16* %48 to i8*
  %50 = bitcast i16* %47 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %49, i8* align 2 %50, i64 %16, i1 false)
  %51 = getelementptr inbounds i16, i16* %47, i64 %1
  %52 = getelementptr inbounds i16, i16* %48, i64 %3
  %53 = bitcast i16* %52 to i8*
  %54 = bitcast i16* %51 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %53, i8* align 2 %54, i64 %16, i1 false)
  %55 = getelementptr inbounds i16, i16* %51, i64 %1
  %56 = getelementptr inbounds i16, i16* %52, i64 %3
  %57 = add nsw i32 %38, -4
  %58 = icmp sgt i32 %57, 0
  br i1 %58, label %37, label %59

59:                                               ; preds = %32, %37, %12
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.unroll.disable"}
!15 = distinct !{!15, !3}
!16 = distinct !{!16, !5, !3}
!17 = distinct !{!17, !3}
!18 = distinct !{!18, !5, !3}
!19 = !{!20}
!20 = distinct !{!20, !21}
!21 = distinct !{!21, !"LVerDomain"}
!22 = !{!23}
!23 = distinct !{!23, !21}
!24 = distinct !{!24, !3}
!25 = distinct !{!25, !3}
!26 = distinct !{!26, !14}
