; ModuleID = '../../third_party/skia/src/utils/SkBase64.cpp'
source_filename = "../../third_party/skia/src/utils/SkBase64.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_ZL10decodeData = internal unnamed_addr constant [80 x i8] c">\FF\FF\FF?456789:;<=\FF\FF\FF\FE\FF\FF\FF\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F\10\11\12\13\14\15\16\17\18\19\FF\FF\FF\FF\FF\FF\1A\1B\1C\1D\1E\1F !\22#$%&'()*+,-./0123", align 16
@_ZL14default_encode = internal unnamed_addr constant [66 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\00", align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN8SkBase646DecodeEPKvmPvPm(i8* readonly, i64, i8*, i64* nocapture) local_unnamed_addr #0 align 2 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to [4 x i8]*
  %7 = getelementptr inbounds i8, i8* %0, i64 %1
  %8 = icmp sgt i64 %1, 0
  br i1 %8, label %9, label %105

9:                                                ; preds = %4
  %10 = bitcast i32* %5 to i8*
  %11 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 1
  %12 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 2
  %13 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 3
  %14 = icmp ne i8* %2, null
  br label %15

15:                                               ; preds = %9, %99
  %16 = phi i64 [ 0, %9 ], [ %100, %99 ]
  %17 = phi i8 [ 0, %9 ], [ %57, %99 ]
  %18 = phi i8 [ 0, %9 ], [ %58, %99 ]
  %19 = phi i32 [ 0, %9 ], [ %101, %99 ]
  %20 = phi i8* [ %0, %9 ], [ %24, %99 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #3
  store i32 -1431655766, i32* %5, align 4
  br label %21

21:                                               ; preds = %53, %15
  %22 = phi i8* [ %20, %15 ], [ %24, %53 ]
  %23 = phi i32 [ 0, %15 ], [ %54, %53 ]
  %24 = getelementptr inbounds i8, i8* %22, i64 1
  %25 = load i8, i8* %22, align 1
  %26 = zext i8 %25 to i64
  %27 = icmp eq i8 %25, 0
  br i1 %27, label %97, label %28

28:                                               ; preds = %21
  %29 = icmp ult i8 %25, 33
  br i1 %29, label %53, label %30

30:                                               ; preds = %28
  %31 = add i8 %25, -43
  %32 = icmp ugt i8 %31, 79
  br i1 %32, label %95, label %33

33:                                               ; preds = %30
  %34 = add nsw i64 %26, -43
  %35 = getelementptr inbounds [80 x i8], [80 x i8]* @_ZL10decodeData, i64 0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = sext i32 %23 to i64
  %38 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 %37
  store i8 %36, i8* %38, align 1
  %39 = icmp slt i8 %36, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %33
  %41 = icmp eq i64 %34, 18
  br i1 %41, label %47, label %95

42:                                               ; preds = %33
  %43 = add nsw i32 %23, 1
  %44 = load i8, i8* %24, align 1
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %46, label %53

46:                                               ; preds = %42
  switch i32 %23, label %47 [
    i32 -1, label %97
    i32 3, label %56
  ]

47:                                               ; preds = %46, %40
  %48 = phi i32 [ %23, %40 ], [ %43, %46 ]
  %49 = icmp slt i32 %48, 2
  br i1 %49, label %95, label %50

50:                                               ; preds = %47
  %51 = icmp eq i32 %48, 2
  %52 = select i1 %51, i8 1, i8 %18
  br label %56

53:                                               ; preds = %28, %42
  %54 = phi i32 [ %43, %42 ], [ %23, %28 ]
  %55 = icmp slt i32 %54, 4
  br i1 %55, label %21, label %56

56:                                               ; preds = %53, %46, %50
  %57 = phi i8 [ 1, %50 ], [ %17, %46 ], [ %17, %53 ]
  %58 = phi i8 [ %52, %50 ], [ %18, %46 ], [ %18, %53 ]
  br i1 %14, label %59, label %73

59:                                               ; preds = %56
  %60 = load i8, i8* %10, align 4
  %61 = shl i8 %60, 2
  %62 = load i8, i8* %11, align 1
  %63 = lshr i8 %62, 4
  %64 = or i8 %63, %61
  %65 = shl i8 %62, 4
  %66 = load i8, i8* %12, align 2
  %67 = lshr i8 %66, 2
  %68 = or i8 %67, %65
  %69 = shl i8 %66, 6
  %70 = load i8, i8* %13, align 1
  %71 = or i8 %70, %69
  %72 = getelementptr inbounds i8, i8* %2, i64 %16
  store i8 %64, i8* %72, align 1
  br label %73

73:                                               ; preds = %59, %56
  %74 = phi i8 [ %68, %59 ], [ 0, %56 ]
  %75 = phi i8 [ %71, %59 ], [ 0, %56 ]
  %76 = add nuw nsw i64 %16, 1
  %77 = and i8 %58, 1
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %79, label %89

79:                                               ; preds = %73
  br i1 %14, label %80, label %82

80:                                               ; preds = %79
  %81 = getelementptr inbounds i8, i8* %2, i64 %76
  store i8 %74, i8* %81, align 1
  br label %82

82:                                               ; preds = %80, %79
  %83 = add nuw nsw i64 %16, 2
  %84 = and i8 %57, 1
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %86, label %91

86:                                               ; preds = %82
  br i1 %14, label %87, label %99

87:                                               ; preds = %86
  %88 = getelementptr inbounds i8, i8* %2, i64 %83
  store i8 %75, i8* %88, align 1
  br label %99

89:                                               ; preds = %73
  %90 = add nuw nsw i32 %19, 1
  br label %93

91:                                               ; preds = %82
  %92 = trunc i64 %83 to i32
  br label %93

93:                                               ; preds = %91, %89
  %94 = phi i32 [ %90, %89 ], [ %92, %91 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #3
  br label %105

95:                                               ; preds = %47, %40, %30
  %96 = phi i32 [ 2, %30 ], [ 1, %47 ], [ 2, %40 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #3
  br label %108

97:                                               ; preds = %46, %21
  %98 = trunc i64 %16 to i32
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #3
  br label %105

99:                                               ; preds = %86, %87
  %100 = add nuw i64 %16, 3
  %101 = add nuw nsw i32 %19, 3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #3
  %102 = icmp ult i8* %24, %7
  br i1 %102, label %15, label %103

103:                                              ; preds = %99
  %104 = trunc i64 %100 to i32
  br label %105

105:                                              ; preds = %103, %4, %97, %93
  %106 = phi i32 [ %94, %93 ], [ %98, %97 ], [ 0, %4 ], [ %104, %103 ]
  %107 = sext i32 %106 to i64
  store i64 %107, i64* %3, align 8
  br label %108

108:                                              ; preds = %95, %105
  %109 = phi i32 [ 0, %105 ], [ %96, %95 ]
  ret i32 %109
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @_ZN8SkBase646EncodeEPKvmPvPKc(i8* readonly, i64, i8*, i8* readonly) local_unnamed_addr #2 align 2 {
  %5 = icmp eq i8* %3, null
  %6 = select i1 %5, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @_ZL14default_encode, i64 0, i64 0), i8* %3
  %7 = icmp eq i8* %2, null
  br i1 %7, label %88, label %8

8:                                                ; preds = %4
  %9 = urem i64 %1, 3
  %10 = sub i64 %1, %9
  %11 = getelementptr inbounds i8, i8* %0, i64 %10
  %12 = icmp sgt i64 %10, 0
  br i1 %12, label %13, label %52

13:                                               ; preds = %8, %13
  %14 = phi i8* [ %22, %13 ], [ %0, %8 ]
  %15 = phi i8* [ %50, %13 ], [ %2, %8 ]
  %16 = getelementptr inbounds i8, i8* %14, i64 1
  %17 = load i8, i8* %14, align 1
  %18 = zext i8 %17 to i32
  %19 = getelementptr inbounds i8, i8* %14, i64 2
  %20 = load i8, i8* %16, align 1
  %21 = zext i8 %20 to i32
  %22 = getelementptr inbounds i8, i8* %14, i64 3
  %23 = load i8, i8* %19, align 1
  %24 = zext i8 %23 to i32
  %25 = and i32 %24, 63
  %26 = lshr i32 %24, 6
  %27 = shl nuw nsw i32 %21, 2
  %28 = and i32 %27, 60
  %29 = or i32 %26, %28
  %30 = lshr i32 %21, 4
  %31 = shl nuw nsw i32 %18, 4
  %32 = and i32 %31, 48
  %33 = or i32 %30, %32
  %34 = lshr i32 %18, 2
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %6, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = getelementptr inbounds i8, i8* %15, i64 1
  store i8 %37, i8* %15, align 1
  %39 = zext i32 %33 to i64
  %40 = getelementptr inbounds i8, i8* %6, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds i8, i8* %15, i64 2
  store i8 %41, i8* %38, align 1
  %43 = zext i32 %29 to i64
  %44 = getelementptr inbounds i8, i8* %6, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr inbounds i8, i8* %15, i64 3
  store i8 %45, i8* %42, align 1
  %47 = zext i32 %25 to i64
  %48 = getelementptr inbounds i8, i8* %6, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = getelementptr inbounds i8, i8* %15, i64 4
  store i8 %49, i8* %46, align 1
  %51 = icmp ult i8* %22, %11
  br i1 %51, label %13, label %52

52:                                               ; preds = %13, %8
  %53 = phi i8* [ %2, %8 ], [ %50, %13 ]
  %54 = phi i8* [ %0, %8 ], [ %22, %13 ]
  %55 = icmp eq i64 %9, 0
  br i1 %55, label %88, label %56

56:                                               ; preds = %52
  %57 = load i8, i8* %54, align 1
  %58 = zext i8 %57 to i32
  %59 = icmp eq i64 %9, 2
  br i1 %59, label %60, label %68

60:                                               ; preds = %56
  %61 = getelementptr inbounds i8, i8* %54, i64 1
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = lshr i32 %63, 4
  %65 = shl nuw nsw i32 %63, 2
  %66 = and i32 %65, 60
  %67 = zext i32 %66 to i64
  br label %68

68:                                               ; preds = %60, %56
  %69 = phi i32 [ %64, %60 ], [ 0, %56 ]
  %70 = phi i64 [ %67, %60 ], [ 64, %56 ]
  %71 = lshr i32 %58, 2
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %6, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = getelementptr inbounds i8, i8* %53, i64 1
  store i8 %74, i8* %53, align 1
  %76 = shl nuw nsw i32 %58, 4
  %77 = or i32 %69, %76
  %78 = and i32 %77, 63
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %6, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = getelementptr inbounds i8, i8* %53, i64 2
  store i8 %81, i8* %75, align 1
  %83 = getelementptr inbounds i8, i8* %6, i64 %70
  %84 = load i8, i8* %83, align 1
  %85 = getelementptr inbounds i8, i8* %53, i64 3
  store i8 %84, i8* %82, align 1
  %86 = getelementptr inbounds i8, i8* %6, i64 64
  %87 = load i8, i8* %86, align 1
  store i8 %87, i8* %85, align 1
  br label %88

88:                                               ; preds = %68, %52, %4
  %89 = add i64 %1, 2
  %90 = udiv i64 %89, 3
  %91 = shl i64 %90, 2
  ret i64 %91
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
