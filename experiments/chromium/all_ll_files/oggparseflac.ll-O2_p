; ModuleID = '../../third_party/ffmpeg/libavformat/oggparseflac.c'
source_filename = "../../third_party/ffmpeg/libavformat/oggparseflac.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.ogg_codec = type { i8*, i8, i8*, i32 (%struct.AVFormatContext*, i32)*, i32 (%struct.AVFormatContext*, i32)*, i64 (%struct.AVFormatContext*, i32, i64, i64*)*, i32, i32, void (%struct.AVFormatContext*, i32)* }
%struct.AVFormatContext = type { %struct.AVClass*, %struct.AVInputFormat*, %struct.AVOutputFormat*, i8*, %struct.AVIOContext*, i32, i32, %struct.AVStream**, [1024 x i8], i8*, i64, i64, i64, i32, i32, i32, i64, i64, i8*, i32, i32, %struct.AVProgram**, i32, i32, i32, i32, i32, i32, %struct.AVChapter**, %struct.AVDictionary*, i64, i32, i32, %struct.AVIOInterruptCB, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i8*, i8*, %struct.AVFormatInternal*, i32, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, i32, i8*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i64, i8*, i32, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVIOInterruptCB*, %struct.AVDictionary**)*, i8*, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVDictionary**)*, void (%struct.AVFormatContext*, %struct.AVIOContext*)*, i8*, i32, i32, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVInputFormat = type { i8*, i8*, i32, i8*, %struct.AVCodecTag**, %struct.AVClass*, i8*, %struct.AVInputFormat*, i32, i32, i32 (%struct.AVProbeData*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i32)*, i64 (%struct.AVFormatContext*, i32, i64*, i64)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i64, i64, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)* }
%struct.AVCodecTag = type { i32, i32 }
%struct.AVProbeData = type { i8*, i8*, i32, i8* }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVDeviceInfoList = type opaque
%struct.AVDeviceCapabilitiesQuery = type opaque
%struct.AVOutputFormat = type { i8*, i8*, i8*, i8*, i32, i32, i32, i32, %struct.AVCodecTag**, %struct.AVClass*, %struct.AVOutputFormat*, i32, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*, %struct.AVPacket*, i32)*, i32 (i32, i32)*, void (%struct.AVFormatContext*, i32, i64*, i64*)*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i32 (%struct.AVFormatContext*, i32, %struct.AVFrame**, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32, i32 (%struct.AVFormatContext*)*, void (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)* }
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVRational = type { i32, i32 }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVIOContext = type { %struct.AVClass*, i8*, i32, i8*, i8*, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i64, i32, i32, i32, i64, i8*, i64 (i64, i8*, i32)*, i32, i32 (i8*, i32)*, i64 (i8*, i32, i64, i32)*, i32, i64, i32, i64, i32, i32, i32, i32, i8*, i8*, i32 (i8*, i8*, i32, i32, i64)*, i32, i32, i64, i32 (i8*)*, i64, i8*, i32 }
%struct.AVStream = type { i32, i32, %struct.AVCodecContext*, i8*, %struct.AVRational, i64, i64, i64, i32, i32, %struct.AVRational, %struct.AVDictionary*, %struct.AVRational, %struct.AVPacket, %struct.AVPacketSideData*, i32, i32, %struct.AVRational, i8*, %struct.AVCodecParameters*, i8*, i32, i64, i64, i64, i32, i32, i32, i32, %struct.AVCodecParserContext*, i8*, %struct.AVProbeData, [17 x i64], i8*, i32, i32, i32, i32, i32, i32, %struct.AVStreamInternal* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32, i64, i32 }
%struct.AVCodecInternal = type opaque
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParserContext = type { i8*, %struct.AVCodecParser*, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32, i32, [4 x i64], [4 x i64], [4 x i64], i32, i64, [4 x i64], i32, i64, i32, i32, i32, [4 x i64], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParser = type { [5 x i32], i32, i32 (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, void (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, %struct.AVCodecParser* }
%struct.AVStreamInternal = type { i32, %struct.AVBSFContext*, i32, %struct.AVCodecContext*, i32, i32, %struct.anon, i32, i32, %struct.FFFrac*, %struct.anon.0*, %struct.AVIndexEntry*, i32, i32, i64, i64, i32, i32, i32, i64, i64, i64, i32, i64, i64, i32, i32, [17 x i64], [17 x i8], [17 x i64], i64, i8, i8, i32, %struct.AVRational, %struct.AVProbeData, %struct.AVPacketList* }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVBSFInternal = type opaque
%struct.anon = type { %struct.AVBSFContext*, %struct.AVPacket*, i32 }
%struct.FFFrac = type { i64, i64, i64 }
%struct.anon.0 = type { i64, i64, i32, i64, [2 x [399 x double]]*, i64, i64, i32, i32, i64, i64, i32, i64, i32 }
%struct.AVIndexEntry = type { i64, i64, i32, i32 }
%struct.AVPacketList = type { %struct.AVPacket, %struct.AVPacketList* }
%struct.AVProgram = type { i32, i32, i32, i32*, i32, %struct.AVDictionary*, i32, i32, i32, i32, i64, i64, i64, i32 }
%struct.AVChapter = type { i32, %struct.AVRational, i64, i64, %struct.AVDictionary* }
%struct.AVDictionary = type opaque
%struct.AVIOInterruptCB = type { i32 (i8*)*, i8* }
%struct.AVFormatInternal = type { i32, %struct.AVPacketList*, %struct.AVPacketList*, i64, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, %struct.AVPacketList*, i32, i64, %struct.AVRational, i32, i32, i32, i64, i32, i32, %struct.AVDictionary*, i32, i32 }
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal**, i32* }
%struct.AVCodecDefault = type opaque
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVCodecHWConfigInternal = type opaque
%struct.ogg = type { %struct.ogg_stream*, i32, i32, i32, i64, %struct.ogg_state* }
%struct.ogg_stream = type { i8*, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i32, %struct.ogg_codec*, i32, i32, i32, [255 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, i8* }
%struct.ogg_state = type { i64, i32, %struct.ogg_state*, i32, [1 x %struct.ogg_stream] }

@.str = private unnamed_addr constant [6 x i8] c"\7FFLAC\00", align 1
@ff_flac_codec = hidden local_unnamed_addr constant %struct.ogg_codec { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8 5, i8* null, i32 (%struct.AVFormatContext*, i32)* @flac_header, i32 (%struct.AVFormatContext*, i32)* null, i64 (%struct.AVFormatContext*, i32, i64, i64*)* null, i32 0, i32 2, void (%struct.AVFormatContext*, i32)* null }, align 8
@.str.1 = private unnamed_addr constant [5 x i8] c"fLaC\00", align 1
@ff_old_flac_codec = hidden local_unnamed_addr constant %struct.ogg_codec { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i8 4, i8* null, i32 (%struct.AVFormatContext*, i32)* @old_flac_header, i32 (%struct.AVFormatContext*, i32)* null, i64 (%struct.AVFormatContext*, i32, i64, i64*)* null, i32 0, i32 0, void (%struct.AVFormatContext*, i32)* null }, align 8

; Function Attrs: nounwind ssp uwtable
define internal i32 @flac_header(%struct.AVFormatContext*, i32) #0 {
  %3 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 3
  %4 = bitcast i8** %3 to %struct.ogg**
  %5 = load %struct.ogg*, %struct.ogg** %4, align 8
  %6 = getelementptr inbounds %struct.ogg, %struct.ogg* %5, i64 0, i32 0
  %7 = load %struct.ogg_stream*, %struct.ogg_stream** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 7
  %10 = load %struct.AVStream**, %struct.AVStream*** %9, align 8
  %11 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %10, i64 %8
  %12 = load %struct.AVStream*, %struct.AVStream** %11, align 8
  %13 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 3
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %14, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = icmp eq i8 %19, -1
  br i1 %20, label %141, label %21

21:                                               ; preds = %2
  %22 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %7, i64 %8, i32 4
  %23 = load i32, i32* %22, align 4
  %24 = shl i32 %23, 3
  %25 = icmp ult i32 %24, 2147483135
  %26 = icmp ne i8* %18, null
  %27 = and i1 %26, %25
  %28 = select i1 %27, i8* %18, i8* null
  %29 = add i32 %24, 8
  %30 = select i1 %27, i32 %29, i32 8
  %31 = icmp ne i32 %30, 0
  %32 = zext i1 %31 to i32
  %33 = bitcast i8* %28 to i32*
  %34 = load i32, i32* %33, align 1
  %35 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %34) #3, !srcloc !2
  %36 = shl i32 %35, %32
  %37 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -7, i32 %36) #3, !srcloc !3
  %38 = select i1 %31, i32 8, i32 7
  %39 = icmp ugt i32 %30, %38
  %40 = select i1 %39, i32 %38, i32 %30
  switch i32 %37, label %141 [
    i32 127, label %41
    i32 4, label %137
  ]

41:                                               ; preds = %21
  %42 = getelementptr inbounds i8, i8* %18, i64 5
  %43 = getelementptr inbounds i8, i8* %42, i64 4
  %44 = getelementptr inbounds i8, i8* %43, i64 4
  %45 = getelementptr inbounds i8, i8* %44, i64 4
  %46 = sub nsw i32 0, %40
  %47 = sub nsw i32 %30, %40
  %48 = icmp slt i32 %40, -32
  %49 = icmp slt i32 %47, 32
  %50 = select i1 %49, i32 %47, i32 32
  %51 = select i1 %48, i32 %46, i32 %50
  %52 = add nsw i32 %51, %40
  %53 = lshr i32 %52, 3
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %28, i64 %54
  %56 = bitcast i8* %55 to i32*
  %57 = load i32, i32* %56, align 1
  %58 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %57) #3, !srcloc !2
  %59 = and i32 %52, 7
  %60 = shl i32 %58, %59
  %61 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -8, i32 %60) #3, !srcloc !3
  %62 = add i32 %52, 8
  %63 = icmp eq i32 %61, 1
  br i1 %63, label %64, label %141

64:                                               ; preds = %41
  %65 = icmp ugt i32 %30, %62
  %66 = select i1 %65, i32 %62, i32 %30
  %67 = add i32 %66, 24
  %68 = icmp ugt i32 %30, %67
  %69 = select i1 %68, i32 %67, i32 %30
  %70 = sub nsw i32 0, %69
  %71 = sub nsw i32 %30, %69
  %72 = icmp slt i32 %69, -32
  %73 = icmp slt i32 %71, 32
  %74 = select i1 %73, i32 %71, i32 32
  %75 = select i1 %72, i32 %70, i32 %74
  %76 = add nsw i32 %75, %69
  %77 = lshr i32 %76, 3
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* %28, i64 %78
  %80 = bitcast i8* %79 to i32*
  %81 = load i32, i32* %80, align 1
  %82 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %81) #3, !srcloc !2
  %83 = and i32 %76, 7
  %84 = shl i32 %82, %83
  %85 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %84) #3, !srcloc !3
  %86 = add i32 %76, 16
  %87 = icmp ugt i32 %30, %86
  %88 = select i1 %87, i32 %86, i32 %30
  %89 = lshr i32 %88, 3
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %28, i64 %90
  %92 = bitcast i8* %91 to i32*
  %93 = load i32, i32* %92, align 1
  %94 = tail call i32 asm "bswap   $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %93) #3, !srcloc !2
  %95 = and i32 %88, 7
  %96 = shl i32 %94, %95
  %97 = tail call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 -16, i32 %96) #3, !srcloc !3
  %98 = shl i32 %85, 16
  %99 = or i32 %97, %98
  %100 = icmp eq i32 %99, 34
  br i1 %100, label %101, label %141

101:                                              ; preds = %64
  %102 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %12, i64 0, i32 19
  %103 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %102, align 8
  %104 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %103, i64 0, i32 0
  store i32 1, i32* %104, align 8
  %105 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %102, align 8
  %106 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %105, i64 0, i32 1
  store i32 86028, i32* %106, align 4
  %107 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %12, i64 0, i32 28
  store i32 2, i32* %107, align 4
  %108 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %102, align 8
  %109 = tail call i32 @ff_alloc_extradata(%struct.AVCodecParameters* %108, i32 34) #4
  %110 = icmp slt i32 %109, 0
  br i1 %110, label %141, label %111

111:                                              ; preds = %101
  %112 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %102, align 8
  %113 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %112, i64 0, i32 3
  %114 = load i8*, i8** %113, align 8
  %115 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %112, i64 0, i32 4
  %116 = load i32, i32* %115, align 8
  %117 = sext i32 %116 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %114, i8* align 1 %45, i64 %117, i1 false)
  %118 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %102, align 8
  %119 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %118, i64 0, i32 3
  %120 = load i8*, i8** %119, align 8
  %121 = getelementptr inbounds i8, i8* %120, i64 10
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = shl nuw nsw i32 %123, 16
  %125 = getelementptr inbounds i8, i8* %120, i64 11
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = shl nuw nsw i32 %127, 8
  %129 = or i32 %128, %124
  %130 = getelementptr inbounds i8, i8* %120, i64 12
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = or i32 %129, %132
  %134 = lshr i32 %133, 4
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %141, label %136

136:                                              ; preds = %111
  tail call void @avpriv_set_pts_info(%struct.AVStream* %12, i32 64, i32 1, i32 %134) #4
  br label %141

137:                                              ; preds = %21
  %138 = getelementptr inbounds i8, i8* %18, i64 4
  %139 = add i32 %23, -4
  %140 = tail call i32 @ff_vorbis_stream_comment(%struct.AVFormatContext* %0, %struct.AVStream* %12, i8* %138, i32 %139) #4
  br label %141

141:                                              ; preds = %111, %101, %64, %41, %137, %21, %136, %2
  %142 = phi i32 [ 0, %2 ], [ 1, %136 ], [ 1, %21 ], [ 1, %137 ], [ -1094995529, %111 ], [ %109, %101 ], [ -1, %64 ], [ -1, %41 ]
  ret i32 %142
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @old_flac_header(%struct.AVFormatContext* nocapture readonly, i32) #0 {
  %3 = alloca %struct.AVCodecContext*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 3
  %7 = bitcast i8** %6 to %struct.ogg**
  %8 = load %struct.ogg*, %struct.ogg** %7, align 8
  %9 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i64 0, i32 7
  %10 = load %struct.AVStream**, %struct.AVStream*** %9, align 8
  %11 = sext i32 %1 to i64
  %12 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %10, i64 %11
  %13 = load %struct.AVStream*, %struct.AVStream** %12, align 8
  %14 = getelementptr inbounds %struct.ogg, %struct.ogg* %8, i64 0, i32 0
  %15 = load %struct.ogg_stream*, %struct.ogg_stream** %14, align 8
  %16 = tail call %struct.AVCodecParserContext* @av_parser_init(i32 86028) #4
  %17 = bitcast %struct.AVCodecContext** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #4
  store %struct.AVCodecContext* inttoptr (i64 -6148914691236517206 to %struct.AVCodecContext*), %struct.AVCodecContext** %3, align 8
  %18 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #4
  store i32 -1431655766, i32* %4, align 4
  %19 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #4
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %5, align 8
  %20 = icmp eq %struct.AVCodecParserContext* %16, null
  br i1 %20, label %53, label %21

21:                                               ; preds = %2
  %22 = getelementptr inbounds %struct.AVStream, %struct.AVStream* %13, i64 0, i32 19
  %23 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %22, align 8
  %24 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %23, i64 0, i32 0
  store i32 1, i32* %24, align 8
  %25 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %22, align 8
  %26 = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %25, i64 0, i32 1
  store i32 86028, i32* %26, align 4
  %27 = tail call %struct.AVCodecContext* @avcodec_alloc_context3(%struct.AVCodec* null) #4
  store %struct.AVCodecContext* %27, %struct.AVCodecContext** %3, align 8
  %28 = icmp eq %struct.AVCodecContext* %27, null
  br i1 %28, label %49, label %29

29:                                               ; preds = %21
  %30 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %22, align 8
  %31 = tail call i32 @avcodec_parameters_to_context(%struct.AVCodecContext* nonnull %27, %struct.AVCodecParameters* %30) #4
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %49, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.AVCodecParserContext, %struct.AVCodecParserContext* %16, i64 0, i32 16
  store i32 1, i32* %34, align 8
  %35 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %15, i64 %11, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %15, i64 %11, i32 3
  %38 = load i32, i32* %37, align 8
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %36, i64 %39
  %41 = getelementptr inbounds %struct.ogg_stream, %struct.ogg_stream* %15, i64 %11, i32 4
  %42 = load i32, i32* %41, align 4
  %43 = call i32 @av_parser_parse2(%struct.AVCodecParserContext* nonnull %16, %struct.AVCodecContext* nonnull %27, i8** nonnull %5, i32* nonnull %4, i8* %40, i32 %42, i64 -9223372036854775808, i64 -9223372036854775808, i64 -1) #4
  call void @av_parser_close(%struct.AVCodecParserContext* nonnull %16) #4
  %44 = load %struct.AVCodecContext*, %struct.AVCodecContext** %3, align 8
  %45 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %44, i64 0, i32 82
  %46 = load i32, i32* %45, align 8
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %51, label %48

48:                                               ; preds = %33
  call void @avpriv_set_pts_info(%struct.AVStream* %13, i32 64, i32 1, i32 %46) #4
  br label %51

49:                                               ; preds = %21, %29
  %50 = phi i32 [ %31, %29 ], [ -12, %21 ]
  tail call void @av_parser_close(%struct.AVCodecParserContext* nonnull %16) #4
  br label %51

51:                                               ; preds = %33, %48, %49
  %52 = phi i32 [ 0, %48 ], [ %50, %49 ], [ 1, %33 ]
  call void @avcodec_free_context(%struct.AVCodecContext** nonnull %3) #4
  br label %53

53:                                               ; preds = %51, %2
  %54 = phi i32 [ -1, %2 ], [ %52, %51 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #4
  ret i32 %54
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare i32 @ff_alloc_extradata(%struct.AVCodecParameters*, i32) local_unnamed_addr #2

declare void @avpriv_set_pts_info(%struct.AVStream*, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @ff_vorbis_stream_comment(%struct.AVFormatContext*, %struct.AVStream*, i8*, i32) local_unnamed_addr #2

declare %struct.AVCodecParserContext* @av_parser_init(i32) local_unnamed_addr #2

declare %struct.AVCodecContext* @avcodec_alloc_context3(%struct.AVCodec*) local_unnamed_addr #2

declare i32 @avcodec_parameters_to_context(%struct.AVCodecContext*, %struct.AVCodecParameters*) local_unnamed_addr #2

declare i32 @av_parser_parse2(%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32, i64, i64, i64) local_unnamed_addr #2

declare void @av_parser_close(%struct.AVCodecParserContext*) local_unnamed_addr #2

declare void @avcodec_free_context(%struct.AVCodecContext**) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 1441262}
!3 = !{i32 1796901, i32 1796915}
