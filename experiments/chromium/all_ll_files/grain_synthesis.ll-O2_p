; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/grain_synthesis.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/grain_synthesis.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.aom_image = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i8*], [3 x i32], i64, i32, i32, i32, i8*, i8*, i32, i32, %struct.aom_metadata_array*, i8* }
%struct.aom_metadata_array = type opaque

@stderr = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [49 x i8] c"Film grain error: input format is not supported!\00", align 1
@random_register = internal unnamed_addr global i16 0, align 2
@chroma_subblock_size_y = internal unnamed_addr global i32 16, align 4
@chroma_subblock_size_x = internal unnamed_addr global i32 16, align 4
@grain_min = internal unnamed_addr global i32 0, align 4
@grain_max = internal unnamed_addr global i32 0, align 4
@scaling_lut_y = internal unnamed_addr global [256 x i32] zeroinitializer, align 16
@scaling_lut_cb = internal unnamed_addr global [256 x i32] zeroinitializer, align 16
@scaling_lut_cr = internal unnamed_addr global [256 x i32] zeroinitializer, align 16
@gaussian_sequence = internal unnamed_addr constant [2048 x i32] [i32 56, i32 568, i32 -180, i32 172, i32 124, i32 -84, i32 172, i32 -64, i32 -900, i32 24, i32 820, i32 224, i32 1248, i32 996, i32 272, i32 -8, i32 -916, i32 -388, i32 -732, i32 -104, i32 -188, i32 800, i32 112, i32 -652, i32 -320, i32 -376, i32 140, i32 -252, i32 492, i32 -168, i32 44, i32 -788, i32 588, i32 -584, i32 500, i32 -228, i32 12, i32 680, i32 272, i32 -476, i32 972, i32 -100, i32 652, i32 368, i32 432, i32 -196, i32 -720, i32 -192, i32 1000, i32 -332, i32 652, i32 -136, i32 -552, i32 -604, i32 -4, i32 192, i32 -220, i32 -136, i32 1000, i32 -52, i32 372, i32 -96, i32 -624, i32 124, i32 -24, i32 396, i32 540, i32 -12, i32 -104, i32 640, i32 464, i32 244, i32 -208, i32 -84, i32 368, i32 -528, i32 -740, i32 248, i32 -968, i32 -848, i32 608, i32 376, i32 -60, i32 -292, i32 -40, i32 -156, i32 252, i32 -292, i32 248, i32 224, i32 -280, i32 400, i32 -244, i32 244, i32 -60, i32 76, i32 -80, i32 212, i32 532, i32 340, i32 128, i32 -36, i32 824, i32 -352, i32 -60, i32 -264, i32 -96, i32 -612, i32 416, i32 -704, i32 220, i32 -204, i32 640, i32 -160, i32 1220, i32 -408, i32 900, i32 336, i32 20, i32 -336, i32 -96, i32 -792, i32 304, i32 48, i32 -28, i32 -1232, i32 -1172, i32 -448, i32 104, i32 -292, i32 -520, i32 244, i32 60, i32 -948, i32 0, i32 -708, i32 268, i32 108, i32 356, i32 -548, i32 488, i32 -344, i32 -136, i32 488, i32 -196, i32 -224, i32 656, i32 -236, i32 -1128, i32 60, i32 4, i32 140, i32 276, i32 -676, i32 -376, i32 168, i32 -108, i32 464, i32 8, i32 564, i32 64, i32 240, i32 308, i32 -300, i32 -400, i32 -456, i32 -136, i32 56, i32 120, i32 -408, i32 -116, i32 436, i32 504, i32 -232, i32 328, i32 844, i32 -164, i32 -84, i32 784, i32 -168, i32 232, i32 -224, i32 348, i32 -376, i32 128, i32 568, i32 96, i32 -1244, i32 -288, i32 276, i32 848, i32 832, i32 -360, i32 656, i32 464, i32 -384, i32 -332, i32 -356, i32 728, i32 -388, i32 160, i32 -192, i32 468, i32 296, i32 224, i32 140, i32 -776, i32 -100, i32 280, i32 4, i32 196, i32 44, i32 -36, i32 -648, i32 932, i32 16, i32 1428, i32 28, i32 528, i32 808, i32 772, i32 20, i32 268, i32 88, i32 -332, i32 -284, i32 124, i32 -384, i32 -448, i32 208, i32 -228, i32 -1044, i32 -328, i32 660, i32 380, i32 -148, i32 -300, i32 588, i32 240, i32 540, i32 28, i32 136, i32 -88, i32 -436, i32 256, i32 296, i32 -1000, i32 1400, i32 0, i32 -48, i32 1056, i32 -136, i32 264, i32 -528, i32 -1108, i32 632, i32 -484, i32 -592, i32 -344, i32 796, i32 124, i32 -668, i32 -768, i32 388, i32 1296, i32 -232, i32 -188, i32 -200, i32 -288, i32 -4, i32 308, i32 100, i32 -168, i32 256, i32 -500, i32 204, i32 -508, i32 648, i32 -136, i32 372, i32 -272, i32 -120, i32 -1004, i32 -552, i32 -548, i32 -384, i32 548, i32 -296, i32 428, i32 -108, i32 -8, i32 -912, i32 -324, i32 -224, i32 -88, i32 -112, i32 -220, i32 -100, i32 996, i32 -796, i32 548, i32 360, i32 -216, i32 180, i32 428, i32 -200, i32 -212, i32 148, i32 96, i32 148, i32 284, i32 216, i32 -412, i32 -320, i32 120, i32 -300, i32 -384, i32 -604, i32 -572, i32 -332, i32 -8, i32 -180, i32 -176, i32 696, i32 116, i32 -88, i32 628, i32 76, i32 44, i32 -516, i32 240, i32 -208, i32 -40, i32 100, i32 -592, i32 344, i32 -308, i32 -452, i32 -228, i32 20, i32 916, i32 -1752, i32 -136, i32 -340, i32 -804, i32 140, i32 40, i32 512, i32 340, i32 248, i32 184, i32 -492, i32 896, i32 -156, i32 932, i32 -628, i32 328, i32 -688, i32 -448, i32 -616, i32 -752, i32 -100, i32 560, i32 -1020, i32 180, i32 -800, i32 -64, i32 76, i32 576, i32 1068, i32 396, i32 660, i32 552, i32 -108, i32 -28, i32 320, i32 -628, i32 312, i32 -92, i32 -92, i32 -472, i32 268, i32 16, i32 560, i32 516, i32 -672, i32 -52, i32 492, i32 -100, i32 260, i32 384, i32 284, i32 292, i32 304, i32 -148, i32 88, i32 -152, i32 1012, i32 1064, i32 -228, i32 164, i32 -376, i32 -684, i32 592, i32 -392, i32 156, i32 196, i32 -524, i32 -64, i32 -884, i32 160, i32 -176, i32 636, i32 648, i32 404, i32 -396, i32 -436, i32 864, i32 424, i32 -728, i32 988, i32 -604, i32 904, i32 -592, i32 296, i32 -224, i32 536, i32 -176, i32 -920, i32 436, i32 -48, i32 1176, i32 -884, i32 416, i32 -776, i32 -824, i32 -884, i32 524, i32 -548, i32 -564, i32 -68, i32 -164, i32 -96, i32 692, i32 364, i32 -692, i32 -1012, i32 -68, i32 260, i32 -480, i32 876, i32 -1116, i32 452, i32 -332, i32 -352, i32 892, i32 -1088, i32 1220, i32 -676, i32 12, i32 -292, i32 244, i32 496, i32 372, i32 -32, i32 280, i32 200, i32 112, i32 -440, i32 -96, i32 24, i32 -644, i32 -184, i32 56, i32 -432, i32 224, i32 -980, i32 272, i32 -260, i32 144, i32 -436, i32 420, i32 356, i32 364, i32 -528, i32 76, i32 172, i32 -744, i32 -368, i32 404, i32 -752, i32 -416, i32 684, i32 -688, i32 72, i32 540, i32 416, i32 92, i32 444, i32 480, i32 -72, i32 -1416, i32 164, i32 -1172, i32 -68, i32 24, i32 424, i32 264, i32 1040, i32 128, i32 -912, i32 -524, i32 -356, i32 64, i32 876, i32 -12, i32 4, i32 -88, i32 532, i32 272, i32 -524, i32 320, i32 276, i32 -508, i32 940, i32 24, i32 -400, i32 -120, i32 756, i32 60, i32 236, i32 -412, i32 100, i32 376, i32 -484, i32 400, i32 -100, i32 -740, i32 -108, i32 -260, i32 328, i32 -268, i32 224, i32 -200, i32 -416, i32 184, i32 -604, i32 -564, i32 -20, i32 296, i32 60, i32 892, i32 -888, i32 60, i32 164, i32 68, i32 -760, i32 216, i32 -296, i32 904, i32 -336, i32 -28, i32 404, i32 -356, i32 -568, i32 -208, i32 -1480, i32 -512, i32 296, i32 328, i32 -360, i32 -164, i32 -1560, i32 -776, i32 1156, i32 -428, i32 164, i32 -504, i32 -112, i32 120, i32 -216, i32 -148, i32 -264, i32 308, i32 32, i32 64, i32 -72, i32 72, i32 116, i32 176, i32 -64, i32 -272, i32 460, i32 -536, i32 -784, i32 -280, i32 348, i32 108, i32 -752, i32 -132, i32 524, i32 -540, i32 -776, i32 116, i32 -296, i32 -1196, i32 -288, i32 -560, i32 1040, i32 -472, i32 116, i32 -848, i32 -1116, i32 116, i32 636, i32 696, i32 284, i32 -176, i32 1016, i32 204, i32 -864, i32 -648, i32 -248, i32 356, i32 972, i32 -584, i32 -204, i32 264, i32 880, i32 528, i32 -24, i32 -184, i32 116, i32 448, i32 -144, i32 828, i32 524, i32 212, i32 -212, i32 52, i32 12, i32 200, i32 268, i32 -488, i32 -404, i32 -880, i32 824, i32 -672, i32 -40, i32 908, i32 -248, i32 500, i32 716, i32 -576, i32 492, i32 -576, i32 16, i32 720, i32 -108, i32 384, i32 124, i32 344, i32 280, i32 576, i32 -500, i32 252, i32 104, i32 -308, i32 196, i32 -188, i32 -8, i32 1268, i32 296, i32 1032, i32 -1196, i32 436, i32 316, i32 372, i32 -432, i32 -200, i32 -660, i32 704, i32 -224, i32 596, i32 -132, i32 268, i32 32, i32 -452, i32 884, i32 104, i32 -1008, i32 424, i32 -1348, i32 -280, i32 4, i32 -1168, i32 368, i32 476, i32 696, i32 300, i32 -8, i32 24, i32 180, i32 -592, i32 -196, i32 388, i32 304, i32 500, i32 724, i32 -160, i32 244, i32 -84, i32 272, i32 -256, i32 -420, i32 320, i32 208, i32 -144, i32 -156, i32 156, i32 364, i32 452, i32 28, i32 540, i32 316, i32 220, i32 -644, i32 -248, i32 464, i32 72, i32 360, i32 32, i32 -388, i32 496, i32 -680, i32 -48, i32 208, i32 -116, i32 -408, i32 60, i32 -604, i32 -392, i32 548, i32 -840, i32 784, i32 -460, i32 656, i32 -544, i32 -388, i32 -264, i32 908, i32 -800, i32 -628, i32 -612, i32 -568, i32 572, i32 -220, i32 164, i32 288, i32 -16, i32 -308, i32 308, i32 -112, i32 -636, i32 -760, i32 280, i32 -668, i32 432, i32 364, i32 240, i32 -196, i32 604, i32 340, i32 384, i32 196, i32 592, i32 -44, i32 -500, i32 432, i32 -580, i32 -132, i32 636, i32 -76, i32 392, i32 4, i32 -412, i32 540, i32 508, i32 328, i32 -356, i32 -36, i32 16, i32 -220, i32 -64, i32 -248, i32 -60, i32 24, i32 -192, i32 368, i32 1040, i32 92, i32 -24, i32 -1044, i32 -32, i32 40, i32 104, i32 148, i32 192, i32 -136, i32 -520, i32 56, i32 -816, i32 -224, i32 732, i32 392, i32 356, i32 212, i32 -80, i32 -424, i32 -1008, i32 -324, i32 588, i32 -1496, i32 576, i32 460, i32 -816, i32 -848, i32 56, i32 -580, i32 -92, i32 -1372, i32 -112, i32 -496, i32 200, i32 364, i32 52, i32 -140, i32 48, i32 -48, i32 -60, i32 84, i32 72, i32 40, i32 132, i32 -356, i32 -268, i32 -104, i32 -284, i32 -404, i32 732, i32 -520, i32 164, i32 -304, i32 -540, i32 120, i32 328, i32 -76, i32 -460, i32 756, i32 388, i32 588, i32 236, i32 -436, i32 -72, i32 -176, i32 -404, i32 -316, i32 -148, i32 716, i32 -604, i32 404, i32 -72, i32 -88, i32 -888, i32 -68, i32 944, i32 88, i32 -220, i32 -344, i32 960, i32 472, i32 460, i32 -232, i32 704, i32 120, i32 832, i32 -228, i32 692, i32 -508, i32 132, i32 -476, i32 844, i32 -748, i32 -364, i32 -44, i32 1116, i32 -1104, i32 -1056, i32 76, i32 428, i32 552, i32 -692, i32 60, i32 356, i32 96, i32 -384, i32 -188, i32 -612, i32 -576, i32 736, i32 508, i32 892, i32 352, i32 -1132, i32 504, i32 -24, i32 -352, i32 324, i32 332, i32 -600, i32 -312, i32 292, i32 508, i32 -144, i32 -8, i32 484, i32 48, i32 284, i32 -260, i32 -240, i32 256, i32 -100, i32 -292, i32 -204, i32 -44, i32 472, i32 -204, i32 908, i32 -188, i32 -1000, i32 -256, i32 92, i32 1164, i32 -392, i32 564, i32 356, i32 652, i32 -28, i32 -884, i32 256, i32 484, i32 -192, i32 760, i32 -176, i32 376, i32 -524, i32 -452, i32 -436, i32 860, i32 -736, i32 212, i32 124, i32 504, i32 -476, i32 468, i32 76, i32 -472, i32 552, i32 -692, i32 -944, i32 -620, i32 740, i32 -240, i32 400, i32 132, i32 20, i32 192, i32 -196, i32 264, i32 -668, i32 -1012, i32 -60, i32 296, i32 -316, i32 -828, i32 76, i32 -156, i32 284, i32 -768, i32 -448, i32 -832, i32 148, i32 248, i32 652, i32 616, i32 1236, i32 288, i32 -328, i32 -400, i32 -124, i32 588, i32 220, i32 520, i32 -696, i32 1032, i32 768, i32 -740, i32 -92, i32 -272, i32 296, i32 448, i32 -464, i32 412, i32 -200, i32 392, i32 440, i32 -200, i32 264, i32 -152, i32 -260, i32 320, i32 1032, i32 216, i32 320, i32 -8, i32 -64, i32 156, i32 -1016, i32 1084, i32 1172, i32 536, i32 484, i32 -432, i32 132, i32 372, i32 -52, i32 -256, i32 84, i32 116, i32 -352, i32 48, i32 116, i32 304, i32 -384, i32 412, i32 924, i32 -300, i32 528, i32 628, i32 180, i32 648, i32 44, i32 -980, i32 -220, i32 1320, i32 48, i32 332, i32 748, i32 524, i32 -268, i32 -720, i32 540, i32 -276, i32 564, i32 -344, i32 -208, i32 -196, i32 436, i32 896, i32 88, i32 -392, i32 132, i32 80, i32 -964, i32 -288, i32 568, i32 56, i32 -48, i32 -456, i32 888, i32 8, i32 552, i32 -156, i32 -292, i32 948, i32 288, i32 128, i32 -716, i32 -292, i32 1192, i32 -152, i32 876, i32 352, i32 -600, i32 -260, i32 -812, i32 -468, i32 -28, i32 -120, i32 -32, i32 -44, i32 1284, i32 496, i32 192, i32 464, i32 312, i32 -76, i32 -516, i32 -380, i32 -456, i32 -1012, i32 -48, i32 308, i32 -156, i32 36, i32 492, i32 -156, i32 -808, i32 188, i32 1652, i32 68, i32 -120, i32 -116, i32 316, i32 160, i32 -140, i32 352, i32 808, i32 -416, i32 592, i32 316, i32 -480, i32 56, i32 528, i32 -204, i32 -568, i32 372, i32 -232, i32 752, i32 -344, i32 744, i32 -4, i32 324, i32 -416, i32 -600, i32 768, i32 268, i32 -248, i32 -88, i32 -132, i32 -420, i32 -432, i32 80, i32 -288, i32 404, i32 -316, i32 -1216, i32 -588, i32 520, i32 -108, i32 92, i32 -320, i32 368, i32 -480, i32 -216, i32 -92, i32 1688, i32 -300, i32 180, i32 1020, i32 -176, i32 820, i32 -68, i32 -228, i32 -260, i32 436, i32 -904, i32 20, i32 40, i32 -508, i32 440, i32 -736, i32 312, i32 332, i32 204, i32 760, i32 -372, i32 728, i32 96, i32 -20, i32 -632, i32 -520, i32 -560, i32 336, i32 1076, i32 -64, i32 -532, i32 776, i32 584, i32 192, i32 396, i32 -728, i32 -520, i32 276, i32 -188, i32 80, i32 -52, i32 -612, i32 -252, i32 -48, i32 648, i32 212, i32 -688, i32 228, i32 -52, i32 -260, i32 428, i32 -412, i32 -272, i32 -404, i32 180, i32 816, i32 -796, i32 48, i32 152, i32 484, i32 -88, i32 -216, i32 988, i32 696, i32 188, i32 -528, i32 648, i32 -116, i32 -180, i32 316, i32 476, i32 12, i32 -564, i32 96, i32 476, i32 -252, i32 -364, i32 -376, i32 -392, i32 556, i32 -256, i32 -576, i32 260, i32 -352, i32 120, i32 -16, i32 -136, i32 -260, i32 -492, i32 72, i32 556, i32 660, i32 580, i32 616, i32 772, i32 436, i32 424, i32 -32, i32 -324, i32 -1268, i32 416, i32 -324, i32 -80, i32 920, i32 160, i32 228, i32 724, i32 32, i32 -516, i32 64, i32 384, i32 68, i32 -128, i32 136, i32 240, i32 248, i32 -204, i32 -68, i32 252, i32 -932, i32 -120, i32 -480, i32 -628, i32 -84, i32 192, i32 852, i32 -404, i32 -288, i32 -132, i32 204, i32 100, i32 168, i32 -68, i32 -196, i32 -868, i32 460, i32 1080, i32 380, i32 -80, i32 244, i32 0, i32 484, i32 -888, i32 64, i32 184, i32 352, i32 600, i32 460, i32 164, i32 604, i32 -196, i32 320, i32 -64, i32 588, i32 -184, i32 228, i32 12, i32 372, i32 48, i32 -848, i32 -344, i32 224, i32 208, i32 -200, i32 484, i32 128, i32 -20, i32 272, i32 -468, i32 -840, i32 384, i32 256, i32 -720, i32 -520, i32 -464, i32 -580, i32 112, i32 -120, i32 644, i32 -356, i32 -208, i32 -608, i32 -528, i32 704, i32 560, i32 -424, i32 392, i32 828, i32 40, i32 84, i32 200, i32 -152, i32 0, i32 -144, i32 584, i32 280, i32 -120, i32 80, i32 -556, i32 -972, i32 -196, i32 -472, i32 724, i32 80, i32 168, i32 -32, i32 88, i32 160, i32 -688, i32 0, i32 160, i32 356, i32 372, i32 -776, i32 740, i32 -128, i32 676, i32 -248, i32 -480, i32 4, i32 -364, i32 96, i32 544, i32 232, i32 -1032, i32 956, i32 236, i32 356, i32 20, i32 -40, i32 300, i32 24, i32 -676, i32 -596, i32 132, i32 1120, i32 -104, i32 532, i32 -1096, i32 568, i32 648, i32 444, i32 508, i32 380, i32 188, i32 -376, i32 -604, i32 1488, i32 424, i32 24, i32 756, i32 -220, i32 -192, i32 716, i32 120, i32 920, i32 688, i32 168, i32 44, i32 -460, i32 568, i32 284, i32 1144, i32 1160, i32 600, i32 424, i32 888, i32 656, i32 -356, i32 -320, i32 220, i32 316, i32 -176, i32 -724, i32 -188, i32 -816, i32 -628, i32 -348, i32 -228, i32 -380, i32 1012, i32 -452, i32 -660, i32 736, i32 928, i32 404, i32 -696, i32 -72, i32 -268, i32 -892, i32 128, i32 184, i32 -344, i32 -780, i32 360, i32 336, i32 400, i32 344, i32 428, i32 548, i32 -112, i32 136, i32 -228, i32 -216, i32 -820, i32 -516, i32 340, i32 92, i32 -136, i32 116, i32 -300, i32 376, i32 -244, i32 100, i32 -316, i32 -520, i32 -284, i32 -12, i32 824, i32 164, i32 -548, i32 -180, i32 -128, i32 116, i32 -924, i32 -828, i32 268, i32 -368, i32 -580, i32 620, i32 192, i32 160, i32 0, i32 -1676, i32 1068, i32 424, i32 -56, i32 -360, i32 468, i32 -156, i32 720, i32 288, i32 -528, i32 556, i32 -364, i32 548, i32 -148, i32 504, i32 316, i32 152, i32 -648, i32 -620, i32 -684, i32 -24, i32 -376, i32 -384, i32 -108, i32 -920, i32 -1032, i32 768, i32 180, i32 -264, i32 -508, i32 -1268, i32 -260, i32 -60, i32 300, i32 -240, i32 988, i32 724, i32 -376, i32 -576, i32 -212, i32 -736, i32 556, i32 192, i32 1092, i32 -620, i32 -880, i32 376, i32 -56, i32 -4, i32 -216, i32 -32, i32 836, i32 268, i32 396, i32 1332, i32 864, i32 -600, i32 100, i32 56, i32 -412, i32 -92, i32 356, i32 180, i32 884, i32 -468, i32 -436, i32 292, i32 -388, i32 -804, i32 -704, i32 -840, i32 368, i32 -348, i32 140, i32 -724, i32 1536, i32 940, i32 372, i32 112, i32 -372, i32 436, i32 -480, i32 1136, i32 296, i32 -32, i32 -228, i32 132, i32 -48, i32 -220, i32 868, i32 -1016, i32 -60, i32 -1044, i32 -464, i32 328, i32 916, i32 244, i32 12, i32 -736, i32 -296, i32 360, i32 468, i32 -376, i32 -108, i32 -92, i32 788, i32 368, i32 -56, i32 544, i32 400, i32 -672, i32 -420, i32 728, i32 16, i32 320, i32 44, i32 -284, i32 -380, i32 -796, i32 488, i32 132, i32 204, i32 -596, i32 -372, i32 88, i32 -152, i32 -908, i32 -636, i32 -572, i32 -624, i32 -116, i32 -692, i32 -200, i32 -56, i32 276, i32 -88, i32 484, i32 -324, i32 948, i32 864, i32 1000, i32 -456, i32 -184, i32 -276, i32 292, i32 -296, i32 156, i32 676, i32 320, i32 160, i32 908, i32 -84, i32 -1236, i32 -288, i32 -116, i32 260, i32 -372, i32 -644, i32 732, i32 -756, i32 -96, i32 84, i32 344, i32 -520, i32 348, i32 -688, i32 240, i32 -84, i32 216, i32 -1044, i32 -136, i32 -676, i32 -396, i32 -1500, i32 960, i32 -40, i32 176, i32 168, i32 1516, i32 420, i32 -504, i32 -344, i32 -364, i32 -360, i32 1216, i32 -940, i32 -380, i32 -212, i32 252, i32 -660, i32 -708, i32 484, i32 -444, i32 -152, i32 928, i32 -120, i32 1112, i32 476, i32 -260, i32 560, i32 -148, i32 -344, i32 108, i32 -196, i32 228, i32 -288, i32 504, i32 560, i32 -328, i32 -88, i32 288, i32 -1008, i32 460, i32 -228, i32 468, i32 -836, i32 -196, i32 76, i32 388, i32 232, i32 412, i32 -1168, i32 -716, i32 -644, i32 756, i32 -172, i32 -356, i32 -504, i32 116, i32 432, i32 528, i32 48, i32 476, i32 -168, i32 -608, i32 448, i32 160, i32 -532, i32 -272, i32 28, i32 -676, i32 -12, i32 828, i32 980, i32 456, i32 520, i32 104, i32 -104, i32 256, i32 -344, i32 -4, i32 -28, i32 -368, i32 -52, i32 -524, i32 -572, i32 -556, i32 -200, i32 768, i32 1124, i32 -208, i32 -512, i32 176, i32 232, i32 248, i32 -148, i32 -888, i32 604, i32 -600, i32 -304, i32 804, i32 -156, i32 -212, i32 488, i32 -192, i32 -804, i32 -256, i32 368, i32 -360, i32 -916, i32 -328, i32 228, i32 -240, i32 -448, i32 -472, i32 856, i32 -556, i32 -364, i32 572, i32 -12, i32 -156, i32 -368, i32 -340, i32 432, i32 252, i32 -752, i32 -152, i32 288, i32 268, i32 -580, i32 -848, i32 -592, i32 108, i32 -76, i32 244, i32 312, i32 -716, i32 592, i32 -80, i32 436, i32 360, i32 4, i32 -248, i32 160, i32 516, i32 584, i32 732, i32 44, i32 -468, i32 -280, i32 -292, i32 -156, i32 -588, i32 28, i32 308, i32 912, i32 24, i32 124, i32 156, i32 180, i32 -252, i32 944, i32 -924, i32 -772, i32 -520, i32 -428, i32 -624, i32 300, i32 -212, i32 -1144, i32 32, i32 -724, i32 800, i32 -1128, i32 -212, i32 -1288, i32 -848, i32 180, i32 -416, i32 440, i32 192, i32 -576, i32 -792, i32 -76, i32 -1080, i32 80, i32 -532, i32 -352, i32 -132, i32 380, i32 -820, i32 148, i32 1112, i32 128, i32 164, i32 456, i32 700, i32 -924, i32 144, i32 -668, i32 -384, i32 648, i32 -832, i32 508, i32 552, i32 -52, i32 -100, i32 -656, i32 208, i32 -568, i32 748, i32 -88, i32 680, i32 232, i32 300, i32 192, i32 -408, i32 -1012, i32 -152, i32 -252, i32 -268, i32 272, i32 -876, i32 -664, i32 -648, i32 -332, i32 -136, i32 16, i32 12, i32 1152, i32 -28, i32 332, i32 -536, i32 320, i32 -672, i32 -460, i32 -316, i32 532, i32 -260, i32 228, i32 -40, i32 1052, i32 -816, i32 180, i32 88, i32 -496, i32 -556, i32 -672, i32 -368, i32 428, i32 92, i32 356, i32 404, i32 -408, i32 252, i32 196, i32 -176, i32 -556, i32 792, i32 268, i32 32, i32 372, i32 40, i32 96, i32 -332, i32 328, i32 120, i32 372, i32 -900, i32 -40, i32 472, i32 -264, i32 -592, i32 952, i32 128, i32 656, i32 112, i32 664, i32 -232, i32 420, i32 4, i32 -344, i32 -464, i32 556, i32 244, i32 -416, i32 -32, i32 252, i32 0, i32 -412, i32 188, i32 -696, i32 508, i32 -476, i32 324, i32 -1096, i32 656, i32 -312, i32 560, i32 264, i32 -136, i32 304, i32 160, i32 -64, i32 -580, i32 248, i32 336, i32 -720, i32 560, i32 -348, i32 -288, i32 -276, i32 -196, i32 -500, i32 852, i32 -544, i32 -236, i32 -1128, i32 -992, i32 -776, i32 116, i32 56, i32 52, i32 860, i32 884, i32 212, i32 -12, i32 168, i32 1020, i32 512, i32 -552, i32 924, i32 -148, i32 716, i32 188, i32 164, i32 -340, i32 -520, i32 -184, i32 880, i32 -152, i32 -680, i32 -208, i32 -1156, i32 -300, i32 -528, i32 -472, i32 364, i32 100, i32 -744, i32 -1056, i32 -32, i32 540, i32 280, i32 144, i32 -676, i32 -32, i32 -232, i32 -280, i32 -224, i32 96, i32 568, i32 -76, i32 172, i32 148, i32 148, i32 104, i32 32, i32 -296, i32 -32, i32 788, i32 -80, i32 32, i32 -16, i32 280, i32 288, i32 944, i32 428, i32 -484], align 16
@.str.1 = private unnamed_addr constant [76 x i8] c"Grain synthesis: prediction between two chroma components is not supported!\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_add_film_grain(%struct.aom_film_grain_t* readonly, %struct.aom_image* readonly, %struct.aom_image*) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  %7 = zext i1 %6 to i32
  %8 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  switch i32 %9, label %15 [
    i32 260, label %18
    i32 258, label %18
    i32 2306, label %10
    i32 262, label %11
    i32 2310, label %12
    i32 261, label %13
    i32 2309, label %14
  ]

10:                                               ; preds = %3
  br label %18

11:                                               ; preds = %3
  br label %18

12:                                               ; preds = %3
  br label %18

13:                                               ; preds = %3
  br label %18

14:                                               ; preds = %3
  br label %18

15:                                               ; preds = %3
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %17 = tail call i64 @fwrite(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0), i64 48, i64 1, %struct._IO_FILE* %16) #5
  br label %450

18:                                               ; preds = %3, %3, %14, %13, %12, %11, %10
  %19 = phi i32 [ 1, %14 ], [ 0, %13 ], [ 1, %12 ], [ 0, %11 ], [ 1, %10 ], [ 0, %3 ], [ 0, %3 ]
  %20 = phi i32 [ 1, %14 ], [ 1, %13 ], [ 0, %12 ], [ 0, %11 ], [ 1, %10 ], [ 1, %3 ], [ 1, %3 ]
  %21 = phi i32 [ 0, %14 ], [ 0, %13 ], [ 0, %12 ], [ 0, %11 ], [ 1, %10 ], [ 1, %3 ], [ 1, %3 ]
  %22 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 0
  store i32 %9, i32* %22, align 8
  %23 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 9
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 9
  store i32 %24, i32* %25, align 4
  %26 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 12
  %27 = load i32, i32* %26, align 8
  %28 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 12
  store i32 %27, i32* %28, align 8
  %29 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 13
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 13
  store i32 %30, i32* %31, align 4
  %32 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 10
  %33 = load i32, i32* %32, align 8
  %34 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 10
  store i32 %33, i32* %34, align 8
  %35 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 11
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 11
  store i32 %36, i32* %37, align 4
  %38 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 1
  store i32 %39, i32* %40, align 4
  %41 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 2
  %42 = load i32, i32* %41, align 8
  %43 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 2
  store i32 %42, i32* %43, align 8
  %44 = load i32, i32* %4, align 4
  %45 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 3
  store i32 %44, i32* %45, align 4
  %46 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 4
  %47 = load i32, i32* %46, align 8
  %48 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 4
  store i32 %47, i32* %48, align 8
  %49 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 5
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 5
  store i32 %50, i32* %51, align 4
  %52 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 6
  %53 = load i32, i32* %52, align 8
  %54 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 6
  store i32 %53, i32* %54, align 8
  %55 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 14
  %56 = load i32, i32* %55, align 8
  %57 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 14
  store i32 %56, i32* %57, align 8
  %58 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 15
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 15
  store i32 %59, i32* %60, align 4
  %61 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 20
  %62 = load i32, i32* %61, align 4
  %63 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 20
  store i32 %62, i32* %63, align 4
  %64 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 21
  %65 = load i32, i32* %64, align 8
  %66 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 21
  store i32 %65, i32* %66, align 8
  %67 = load i32, i32* %32, align 8
  %68 = and i32 %67, 1
  %69 = add i32 %68, %67
  %70 = load i32, i32* %35, align 4
  %71 = and i32 %70, 1
  %72 = add i32 %71, %70
  %73 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 16, i64 0
  %74 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 17, i64 0
  %75 = icmp eq i32 %70, 0
  br i1 %75, label %125, label %76

76:                                               ; preds = %18
  %77 = load i32, i32* %74, align 8
  %78 = load i8*, i8** %73, align 8
  %79 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 17, i64 0
  %80 = load i32, i32* %79, align 8
  %81 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 16, i64 0
  %82 = load i8*, i8** %81, align 8
  %83 = icmp eq i32 %19, 0
  %84 = select i1 %83, i64 1, i64 2
  %85 = sext i32 %67 to i64
  %86 = mul nsw i64 %84, %85
  %87 = sext i32 %80 to i64
  %88 = sext i32 %77 to i64
  %89 = add nsw i32 %70, -1
  %90 = and i32 %70, 3
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %102, label %92

92:                                               ; preds = %76, %92
  %93 = phi i8* [ %97, %92 ], [ %82, %76 ]
  %94 = phi i32 [ %99, %92 ], [ %70, %76 ]
  %95 = phi i8* [ %98, %92 ], [ %78, %76 ]
  %96 = phi i32 [ %100, %92 ], [ %90, %76 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %95, i8* align 1 %93, i64 %86, i1 false) #6
  %97 = getelementptr inbounds i8, i8* %93, i64 %87
  %98 = getelementptr inbounds i8, i8* %95, i64 %88
  %99 = add nsw i32 %94, -1
  %100 = add i32 %96, -1
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %92, !llvm.loop !2

102:                                              ; preds = %92, %76
  %103 = phi i8* [ %82, %76 ], [ %97, %92 ]
  %104 = phi i32 [ %70, %76 ], [ %99, %92 ]
  %105 = phi i8* [ %78, %76 ], [ %98, %92 ]
  %106 = icmp ult i32 %89, 3
  br i1 %106, label %121, label %107

107:                                              ; preds = %102, %107
  %108 = phi i8* [ %117, %107 ], [ %103, %102 ]
  %109 = phi i32 [ %119, %107 ], [ %104, %102 ]
  %110 = phi i8* [ %118, %107 ], [ %105, %102 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %110, i8* align 1 %108, i64 %86, i1 false) #6
  %111 = getelementptr inbounds i8, i8* %108, i64 %87
  %112 = getelementptr inbounds i8, i8* %110, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %112, i8* align 1 %111, i64 %86, i1 false) #6
  %113 = getelementptr inbounds i8, i8* %111, i64 %87
  %114 = getelementptr inbounds i8, i8* %112, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %114, i8* align 1 %113, i64 %86, i1 false) #6
  %115 = getelementptr inbounds i8, i8* %113, i64 %87
  %116 = getelementptr inbounds i8, i8* %114, i64 %88
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %116, i8* align 1 %115, i64 %86, i1 false) #6
  %117 = getelementptr inbounds i8, i8* %115, i64 %87
  %118 = getelementptr inbounds i8, i8* %116, i64 %88
  %119 = add nsw i32 %109, -4
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %107

121:                                              ; preds = %107, %102
  %122 = load i32, i32* %32, align 8
  %123 = load i32, i32* %35, align 4
  %124 = and i32 %122, 1
  br label %125

125:                                              ; preds = %121, %18
  %126 = phi i32 [ %124, %121 ], [ %68, %18 ]
  %127 = phi i32 [ %123, %121 ], [ 0, %18 ]
  %128 = phi i32 [ %122, %121 ], [ %67, %18 ]
  %129 = load i8*, i8** %73, align 8
  %130 = load i32, i32* %74, align 8
  %131 = icmp eq i32 %126, 0
  %132 = and i32 %127, 1
  %133 = icmp eq i32 %132, 0
  %134 = or i32 %127, %128
  %135 = and i32 %134, 1
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %341, label %137

137:                                              ; preds = %125
  %138 = icmp eq i32 %19, 0
  br i1 %138, label %244, label %139

139:                                              ; preds = %137
  %140 = bitcast i8* %129 to i16*
  %141 = sdiv i32 %130, 2
  %142 = xor i1 %131, true
  %143 = icmp sgt i32 %127, 0
  %144 = and i1 %143, %142
  br i1 %144, label %145, label %229

145:                                              ; preds = %139
  %146 = sext i32 %141 to i64
  %147 = sext i32 %128 to i64
  %148 = zext i32 %127 to i64
  %149 = and i32 %130, -2
  %150 = icmp eq i32 %149, 2
  br i1 %150, label %175, label %151

151:                                              ; preds = %145
  %152 = and i64 %148, 1
  %153 = icmp eq i32 %127, 1
  br i1 %153, label %219, label %154

154:                                              ; preds = %151
  %155 = sub nsw i64 %148, %152
  br label %156

156:                                              ; preds = %156, %154
  %157 = phi i64 [ 0, %154 ], [ %172, %156 ]
  %158 = phi i64 [ %155, %154 ], [ %173, %156 ]
  %159 = mul nsw i64 %157, %146
  %160 = add nsw i64 %159, %147
  %161 = add nsw i64 %160, -1
  %162 = getelementptr inbounds i16, i16* %140, i64 %161
  %163 = load i16, i16* %162, align 2
  %164 = getelementptr inbounds i16, i16* %140, i64 %160
  store i16 %163, i16* %164, align 2
  %165 = or i64 %157, 1
  %166 = mul nsw i64 %165, %146
  %167 = add nsw i64 %166, %147
  %168 = add nsw i64 %167, -1
  %169 = getelementptr inbounds i16, i16* %140, i64 %168
  %170 = load i16, i16* %169, align 2
  %171 = getelementptr inbounds i16, i16* %140, i64 %167
  store i16 %170, i16* %171, align 2
  %172 = add nuw nsw i64 %157, 2
  %173 = add i64 %158, -2
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %219, label %156

175:                                              ; preds = %145
  %176 = shl nsw i64 %147, 1
  %177 = add nsw i64 %176, -2
  %178 = getelementptr i8, i8* %129, i64 %177
  %179 = bitcast i8* %178 to i16*
  %180 = load i16, i16* %179, align 2
  %181 = add nsw i64 %148, -1
  %182 = and i64 %148, 3
  %183 = icmp ult i64 %181, 3
  br i1 %183, label %207, label %184

184:                                              ; preds = %175
  %185 = sub nsw i64 %148, %182
  br label %186

186:                                              ; preds = %186, %184
  %187 = phi i64 [ 0, %184 ], [ %204, %186 ]
  %188 = phi i64 [ %185, %184 ], [ %205, %186 ]
  %189 = mul nsw i64 %187, %146
  %190 = add nsw i64 %189, %147
  %191 = getelementptr inbounds i16, i16* %140, i64 %190
  store i16 %180, i16* %191, align 2
  %192 = or i64 %187, 1
  %193 = mul nsw i64 %192, %146
  %194 = add nsw i64 %193, %147
  %195 = getelementptr inbounds i16, i16* %140, i64 %194
  store i16 %180, i16* %195, align 2
  %196 = or i64 %187, 2
  %197 = mul nsw i64 %196, %146
  %198 = add nsw i64 %197, %147
  %199 = getelementptr inbounds i16, i16* %140, i64 %198
  store i16 %180, i16* %199, align 2
  %200 = or i64 %187, 3
  %201 = mul nsw i64 %200, %146
  %202 = add nsw i64 %201, %147
  %203 = getelementptr inbounds i16, i16* %140, i64 %202
  store i16 %180, i16* %203, align 2
  %204 = add nuw nsw i64 %187, 4
  %205 = add i64 %188, -4
  %206 = icmp eq i64 %205, 0
  br i1 %206, label %207, label %186

207:                                              ; preds = %186, %175
  %208 = phi i64 [ 0, %175 ], [ %204, %186 ]
  %209 = icmp eq i64 %182, 0
  br i1 %209, label %229, label %210

210:                                              ; preds = %207, %210
  %211 = phi i64 [ %216, %210 ], [ %208, %207 ]
  %212 = phi i64 [ %217, %210 ], [ %182, %207 ]
  %213 = mul nsw i64 %211, %146
  %214 = add nsw i64 %213, %147
  %215 = getelementptr inbounds i16, i16* %140, i64 %214
  store i16 %180, i16* %215, align 2
  %216 = add nuw nsw i64 %211, 1
  %217 = add i64 %212, -1
  %218 = icmp eq i64 %217, 0
  br i1 %218, label %229, label %210, !llvm.loop !4

219:                                              ; preds = %156, %151
  %220 = phi i64 [ 0, %151 ], [ %172, %156 ]
  %221 = icmp eq i64 %152, 0
  br i1 %221, label %229, label %222

222:                                              ; preds = %219
  %223 = mul nsw i64 %220, %146
  %224 = add nsw i64 %223, %147
  %225 = add nsw i64 %224, -1
  %226 = getelementptr inbounds i16, i16* %140, i64 %225
  %227 = load i16, i16* %226, align 2
  %228 = getelementptr inbounds i16, i16* %140, i64 %224
  store i16 %227, i16* %228, align 2
  br label %229

229:                                              ; preds = %222, %219, %207, %210, %139
  br i1 %133, label %341, label %230

230:                                              ; preds = %229
  %231 = add nsw i32 %128, 1
  %232 = and i32 %231, -2
  %233 = mul nsw i32 %127, %141
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds i16, i16* %140, i64 %234
  %236 = bitcast i16* %235 to i8*
  %237 = add nsw i32 %127, -1
  %238 = mul nsw i32 %237, %141
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds i16, i16* %140, i64 %239
  %241 = bitcast i16* %240 to i8*
  %242 = sext i32 %232 to i64
  %243 = shl nsw i64 %242, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %236, i8* align 2 %241, i64 %243, i1 false) #6
  br label %341

244:                                              ; preds = %137
  %245 = xor i1 %131, true
  %246 = icmp sgt i32 %127, 0
  %247 = and i1 %246, %245
  br i1 %247, label %248, label %329

248:                                              ; preds = %244
  %249 = sext i32 %130 to i64
  %250 = sext i32 %128 to i64
  %251 = zext i32 %127 to i64
  %252 = icmp eq i32 %130, 1
  br i1 %252, label %277, label %253

253:                                              ; preds = %248
  %254 = and i64 %251, 1
  %255 = icmp eq i32 %127, 1
  br i1 %255, label %319, label %256

256:                                              ; preds = %253
  %257 = sub nsw i64 %251, %254
  br label %258

258:                                              ; preds = %258, %256
  %259 = phi i64 [ 0, %256 ], [ %274, %258 ]
  %260 = phi i64 [ %257, %256 ], [ %275, %258 ]
  %261 = mul nsw i64 %259, %249
  %262 = add nsw i64 %261, %250
  %263 = add nsw i64 %262, -1
  %264 = getelementptr inbounds i8, i8* %129, i64 %263
  %265 = load i8, i8* %264, align 1
  %266 = getelementptr inbounds i8, i8* %129, i64 %262
  store i8 %265, i8* %266, align 1
  %267 = or i64 %259, 1
  %268 = mul nsw i64 %267, %249
  %269 = add nsw i64 %268, %250
  %270 = add nsw i64 %269, -1
  %271 = getelementptr inbounds i8, i8* %129, i64 %270
  %272 = load i8, i8* %271, align 1
  %273 = getelementptr inbounds i8, i8* %129, i64 %269
  store i8 %272, i8* %273, align 1
  %274 = add nuw nsw i64 %259, 2
  %275 = add i64 %260, -2
  %276 = icmp eq i64 %275, 0
  br i1 %276, label %319, label %258

277:                                              ; preds = %248
  %278 = add nsw i64 %250, -1
  %279 = getelementptr i8, i8* %129, i64 %278
  %280 = load i8, i8* %279, align 1
  %281 = add nsw i64 %251, -1
  %282 = and i64 %251, 3
  %283 = icmp ult i64 %281, 3
  br i1 %283, label %307, label %284

284:                                              ; preds = %277
  %285 = sub nsw i64 %251, %282
  br label %286

286:                                              ; preds = %286, %284
  %287 = phi i64 [ 0, %284 ], [ %304, %286 ]
  %288 = phi i64 [ %285, %284 ], [ %305, %286 ]
  %289 = mul nsw i64 %287, %249
  %290 = add nsw i64 %289, %250
  %291 = getelementptr inbounds i8, i8* %129, i64 %290
  store i8 %280, i8* %291, align 1
  %292 = or i64 %287, 1
  %293 = mul nsw i64 %292, %249
  %294 = add nsw i64 %293, %250
  %295 = getelementptr inbounds i8, i8* %129, i64 %294
  store i8 %280, i8* %295, align 1
  %296 = or i64 %287, 2
  %297 = mul nsw i64 %296, %249
  %298 = add nsw i64 %297, %250
  %299 = getelementptr inbounds i8, i8* %129, i64 %298
  store i8 %280, i8* %299, align 1
  %300 = or i64 %287, 3
  %301 = mul nsw i64 %300, %249
  %302 = add nsw i64 %301, %250
  %303 = getelementptr inbounds i8, i8* %129, i64 %302
  store i8 %280, i8* %303, align 1
  %304 = add nuw nsw i64 %287, 4
  %305 = add i64 %288, -4
  %306 = icmp eq i64 %305, 0
  br i1 %306, label %307, label %286

307:                                              ; preds = %286, %277
  %308 = phi i64 [ 0, %277 ], [ %304, %286 ]
  %309 = icmp eq i64 %282, 0
  br i1 %309, label %329, label %310

310:                                              ; preds = %307, %310
  %311 = phi i64 [ %316, %310 ], [ %308, %307 ]
  %312 = phi i64 [ %317, %310 ], [ %282, %307 ]
  %313 = mul nsw i64 %311, %249
  %314 = add nsw i64 %313, %250
  %315 = getelementptr inbounds i8, i8* %129, i64 %314
  store i8 %280, i8* %315, align 1
  %316 = add nuw nsw i64 %311, 1
  %317 = add i64 %312, -1
  %318 = icmp eq i64 %317, 0
  br i1 %318, label %329, label %310, !llvm.loop !5

319:                                              ; preds = %258, %253
  %320 = phi i64 [ 0, %253 ], [ %274, %258 ]
  %321 = icmp eq i64 %254, 0
  br i1 %321, label %329, label %322

322:                                              ; preds = %319
  %323 = mul nsw i64 %320, %249
  %324 = add nsw i64 %323, %250
  %325 = add nsw i64 %324, -1
  %326 = getelementptr inbounds i8, i8* %129, i64 %325
  %327 = load i8, i8* %326, align 1
  %328 = getelementptr inbounds i8, i8* %129, i64 %324
  store i8 %327, i8* %328, align 1
  br label %329

329:                                              ; preds = %322, %319, %307, %310, %244
  br i1 %133, label %341, label %330

330:                                              ; preds = %329
  %331 = add nsw i32 %128, 1
  %332 = and i32 %331, -2
  %333 = mul nsw i32 %127, %130
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds i8, i8* %129, i64 %334
  %336 = add nsw i32 %127, -1
  %337 = mul nsw i32 %336, %130
  %338 = sext i32 %337 to i64
  %339 = getelementptr inbounds i8, i8* %129, i64 %338
  %340 = sext i32 %332 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %335, i8* align 1 %339, i64 %340, i1 false) #6
  br label %341

341:                                              ; preds = %125, %229, %230, %329, %330
  %342 = load i32, i32* %46, align 8
  %343 = icmp eq i32 %342, 0
  br i1 %343, label %344, label %438

344:                                              ; preds = %341
  %345 = ashr i32 %72, %21
  %346 = icmp eq i32 %345, 0
  br i1 %346, label %438, label %347

347:                                              ; preds = %344
  %348 = ashr i32 %69, %20
  %349 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 17, i64 1
  %350 = load i32, i32* %349, align 4
  %351 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 16, i64 1
  %352 = load i8*, i8** %351, align 8
  %353 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 17, i64 1
  %354 = load i32, i32* %353, align 4
  %355 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 16, i64 1
  %356 = load i8*, i8** %355, align 8
  %357 = icmp eq i32 %19, 0
  %358 = select i1 %357, i64 1, i64 2
  %359 = sext i32 %348 to i64
  %360 = mul nsw i64 %358, %359
  %361 = sext i32 %354 to i64
  %362 = sext i32 %350 to i64
  %363 = add nsw i32 %345, -1
  %364 = and i32 %345, 3
  %365 = icmp eq i32 %364, 0
  br i1 %365, label %376, label %366

366:                                              ; preds = %347, %366
  %367 = phi i8* [ %371, %366 ], [ %356, %347 ]
  %368 = phi i32 [ %373, %366 ], [ %345, %347 ]
  %369 = phi i8* [ %372, %366 ], [ %352, %347 ]
  %370 = phi i32 [ %374, %366 ], [ %364, %347 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %369, i8* align 1 %367, i64 %360, i1 false) #6
  %371 = getelementptr inbounds i8, i8* %367, i64 %361
  %372 = getelementptr inbounds i8, i8* %369, i64 %362
  %373 = add nsw i32 %368, -1
  %374 = add i32 %370, -1
  %375 = icmp eq i32 %374, 0
  br i1 %375, label %376, label %366, !llvm.loop !6

376:                                              ; preds = %366, %347
  %377 = phi i8* [ %356, %347 ], [ %371, %366 ]
  %378 = phi i32 [ %345, %347 ], [ %373, %366 ]
  %379 = phi i8* [ %352, %347 ], [ %372, %366 ]
  %380 = icmp ult i32 %363, 3
  br i1 %380, label %395, label %381

381:                                              ; preds = %376, %381
  %382 = phi i8* [ %391, %381 ], [ %377, %376 ]
  %383 = phi i32 [ %393, %381 ], [ %378, %376 ]
  %384 = phi i8* [ %392, %381 ], [ %379, %376 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %384, i8* align 1 %382, i64 %360, i1 false) #6
  %385 = getelementptr inbounds i8, i8* %382, i64 %361
  %386 = getelementptr inbounds i8, i8* %384, i64 %362
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %386, i8* align 1 %385, i64 %360, i1 false) #6
  %387 = getelementptr inbounds i8, i8* %385, i64 %361
  %388 = getelementptr inbounds i8, i8* %386, i64 %362
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %388, i8* align 1 %387, i64 %360, i1 false) #6
  %389 = getelementptr inbounds i8, i8* %387, i64 %361
  %390 = getelementptr inbounds i8, i8* %388, i64 %362
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %390, i8* align 1 %389, i64 %360, i1 false) #6
  %391 = getelementptr inbounds i8, i8* %389, i64 %361
  %392 = getelementptr inbounds i8, i8* %390, i64 %362
  %393 = add nsw i32 %383, -4
  %394 = icmp eq i32 %393, 0
  br i1 %394, label %395, label %381

395:                                              ; preds = %381, %376
  %396 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 17, i64 2
  %397 = load i32, i32* %396, align 8
  %398 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 16, i64 2
  %399 = load i8*, i8** %398, align 8
  %400 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 17, i64 2
  %401 = load i32, i32* %400, align 8
  %402 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %1, i64 0, i32 16, i64 2
  %403 = load i8*, i8** %402, align 8
  %404 = sext i32 %401 to i64
  %405 = sext i32 %397 to i64
  %406 = add nsw i32 %345, -1
  %407 = and i32 %345, 3
  %408 = icmp eq i32 %407, 0
  br i1 %408, label %419, label %409

409:                                              ; preds = %395, %409
  %410 = phi i8* [ %414, %409 ], [ %403, %395 ]
  %411 = phi i32 [ %416, %409 ], [ %345, %395 ]
  %412 = phi i8* [ %415, %409 ], [ %399, %395 ]
  %413 = phi i32 [ %417, %409 ], [ %407, %395 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %412, i8* align 1 %410, i64 %360, i1 false) #6
  %414 = getelementptr inbounds i8, i8* %410, i64 %404
  %415 = getelementptr inbounds i8, i8* %412, i64 %405
  %416 = add nsw i32 %411, -1
  %417 = add i32 %413, -1
  %418 = icmp eq i32 %417, 0
  br i1 %418, label %419, label %409, !llvm.loop !7

419:                                              ; preds = %409, %395
  %420 = phi i8* [ %403, %395 ], [ %414, %409 ]
  %421 = phi i32 [ %345, %395 ], [ %416, %409 ]
  %422 = phi i8* [ %399, %395 ], [ %415, %409 ]
  %423 = icmp ult i32 %406, 3
  br i1 %423, label %438, label %424

424:                                              ; preds = %419, %424
  %425 = phi i8* [ %434, %424 ], [ %420, %419 ]
  %426 = phi i32 [ %436, %424 ], [ %421, %419 ]
  %427 = phi i8* [ %435, %424 ], [ %422, %419 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %427, i8* align 1 %425, i64 %360, i1 false) #6
  %428 = getelementptr inbounds i8, i8* %425, i64 %404
  %429 = getelementptr inbounds i8, i8* %427, i64 %405
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %429, i8* align 1 %428, i64 %360, i1 false) #6
  %430 = getelementptr inbounds i8, i8* %428, i64 %404
  %431 = getelementptr inbounds i8, i8* %429, i64 %405
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %431, i8* align 1 %430, i64 %360, i1 false) #6
  %432 = getelementptr inbounds i8, i8* %430, i64 %404
  %433 = getelementptr inbounds i8, i8* %431, i64 %405
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %433, i8* align 1 %432, i64 %360, i1 false) #6
  %434 = getelementptr inbounds i8, i8* %432, i64 %404
  %435 = getelementptr inbounds i8, i8* %433, i64 %405
  %436 = add nsw i32 %426, -4
  %437 = icmp eq i32 %436, 0
  br i1 %437, label %438, label %424

438:                                              ; preds = %419, %424, %344, %341
  %439 = load i8*, i8** %73, align 8
  %440 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 16, i64 1
  %441 = load i8*, i8** %440, align 8
  %442 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 16, i64 2
  %443 = load i8*, i8** %442, align 8
  %444 = load i32, i32* %74, align 8
  %445 = ashr i32 %444, %19
  %446 = getelementptr inbounds %struct.aom_image, %struct.aom_image* %2, i64 0, i32 17, i64 1
  %447 = load i32, i32* %446, align 4
  %448 = ashr i32 %447, %19
  %449 = tail call i32 @av1_add_film_grain_run(%struct.aom_film_grain_t* %0, i8* %439, i8* %441, i8* %443, i32 %72, i32 %69, i32 %445, i32 %448, i32 %19, i32 %21, i32 %20, i32 %7)
  br label %450

450:                                              ; preds = %438, %15
  %451 = phi i32 [ -1, %15 ], [ %449, %438 ]
  ret i32 %451
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av1_add_film_grain_run(%struct.aom_film_grain_t* readonly, i8* nocapture, i8* nocapture, i8* nocapture, i32, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %13 = bitcast %struct.aom_film_grain_t* %0 to i8*
  %14 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 25
  %15 = load i16, i16* %14, align 4
  store i16 %15, i16* @random_register, align 2
  %16 = lshr i32 32, %9
  store i32 %16, i32* @chroma_subblock_size_y, align 4
  %17 = lshr i32 32, %10
  store i32 %17, i32* @chroma_subblock_size_x, align 4
  %18 = lshr i32 2, %9
  %19 = mul nsw i32 %18, 3
  %20 = add nuw nsw i32 %19, 3
  %21 = shl nsw i32 %16, 1
  %22 = add nuw nsw i32 %20, %21
  %23 = lshr i32 2, %10
  %24 = mul nsw i32 %23, 3
  %25 = add nuw nsw i32 %24, 3
  %26 = shl i32 %17, 1
  %27 = add nuw nsw i32 %24, %26
  %28 = add nuw nsw i32 %27, %25
  %29 = add nuw nsw i32 %28, 3
  %30 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 20
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 22
  %33 = load i32, i32* %32, align 4
  %34 = add nsw i32 %33, -8
  %35 = shl i32 128, %34
  %36 = sub nsw i32 0, %35
  store i32 %36, i32* @grain_min, align 4
  %37 = add nsw i32 %35, -1
  store i32 %37, i32* @grain_max, align 4
  %38 = mul nsw i32 %29, %22
  tail call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([256 x i32]* @scaling_lut_y to i8*), i8 0, i64 1024, i1 false) #6
  tail call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([256 x i32]* @scaling_lut_cb to i8*), i8 0, i64 1024, i1 false) #6
  tail call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([256 x i32]* @scaling_lut_cr to i8*), i8 0, i64 1024, i1 false) #6
  %39 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 9
  %40 = load i32, i32* %39, align 4
  %41 = shl i32 %40, 1
  %42 = add i32 %40, 1
  %43 = mul i32 %41, %42
  %44 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 3
  %45 = load i32, i32* %44, align 4
  %46 = icmp sgt i32 %45, 0
  %47 = zext i1 %46 to i32
  %48 = or i32 %43, %47
  %49 = sext i32 %43 to i64
  %50 = shl nsw i64 %49, 3
  %51 = tail call i8* @aom_malloc(i64 %50) #6
  %52 = bitcast i8* %51 to i32**
  %53 = icmp sgt i32 %43, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %12
  %55 = zext i32 %43 to i64
  br label %64

56:                                               ; preds = %64, %12
  %57 = sext i32 %48 to i64
  %58 = shl nsw i64 %57, 3
  %59 = tail call i8* @aom_malloc(i64 %58) #6
  %60 = bitcast i8* %59 to i32**
  %61 = icmp sgt i32 %48, 0
  br i1 %61, label %62, label %71

62:                                               ; preds = %56
  %63 = zext i32 %48 to i64
  br label %75

64:                                               ; preds = %64, %54
  %65 = phi i64 [ 0, %54 ], [ %69, %64 ]
  %66 = tail call i8* @aom_malloc(i64 12) #6
  %67 = getelementptr inbounds i32*, i32** %52, i64 %65
  %68 = bitcast i32** %67 to i8**
  store i8* %66, i8** %68, align 8
  %69 = add nuw nsw i64 %65, 1
  %70 = icmp eq i64 %69, %55
  br i1 %70, label %56, label %64

71:                                               ; preds = %75, %56
  %72 = load i32, i32* %39, align 4
  %73 = sub nsw i32 0, %72
  %74 = icmp sgt i32 %72, 0
  br i1 %74, label %82, label %90

75:                                               ; preds = %75, %62
  %76 = phi i64 [ 0, %62 ], [ %80, %75 ]
  %77 = tail call i8* @aom_malloc(i64 12) #6
  %78 = getelementptr inbounds i32*, i32** %60, i64 %76
  %79 = bitcast i32** %78 to i8**
  store i8* %77, i8** %79, align 8
  %80 = add nuw nsw i64 %76, 1
  %81 = icmp eq i64 %80, %63
  br i1 %81, label %71, label %75

82:                                               ; preds = %71, %98
  %83 = phi i32 [ %99, %98 ], [ %72, %71 ]
  %84 = phi i32 [ %103, %98 ], [ %73, %71 ]
  %85 = phi i32 [ %101, %98 ], [ %73, %71 ]
  %86 = phi i32 [ %100, %98 ], [ 0, %71 ]
  %87 = icmp sgt i32 %84, %83
  br i1 %87, label %98, label %88

88:                                               ; preds = %82
  %89 = sext i32 %86 to i64
  br label %104

90:                                               ; preds = %98, %71
  %91 = phi i32 [ 0, %71 ], [ %100, %98 ]
  %92 = phi i32 [ %73, %71 ], [ %103, %98 ]
  %93 = icmp slt i32 %92, 0
  br i1 %93, label %94, label %125

94:                                               ; preds = %90
  %95 = sext i32 %91 to i64
  br label %129

96:                                               ; preds = %104
  %97 = trunc i64 %119 to i32
  br label %98

98:                                               ; preds = %96, %82
  %99 = phi i32 [ %83, %82 ], [ %121, %96 ]
  %100 = phi i32 [ %86, %82 ], [ %97, %96 ]
  %101 = add nsw i32 %85, 1
  %102 = icmp slt i32 %101, 0
  %103 = sub nsw i32 0, %99
  br i1 %102, label %82, label %90

104:                                              ; preds = %104, %88
  %105 = phi i64 [ %89, %88 ], [ %119, %104 ]
  %106 = phi i32 [ %84, %88 ], [ %120, %104 ]
  %107 = getelementptr inbounds i32*, i32** %52, i64 %105
  %108 = load i32*, i32** %107, align 8
  store i32 %85, i32* %108, align 4
  %109 = load i32*, i32** %107, align 8
  %110 = getelementptr inbounds i32, i32* %109, i64 1
  store i32 %106, i32* %110, align 4
  %111 = load i32*, i32** %107, align 8
  %112 = getelementptr inbounds i32, i32* %111, i64 2
  store i32 0, i32* %112, align 4
  %113 = getelementptr inbounds i32*, i32** %60, i64 %105
  %114 = load i32*, i32** %113, align 8
  store i32 %85, i32* %114, align 4
  %115 = load i32*, i32** %113, align 8
  %116 = getelementptr inbounds i32, i32* %115, i64 1
  store i32 %106, i32* %116, align 4
  %117 = load i32*, i32** %113, align 8
  %118 = getelementptr inbounds i32, i32* %117, i64 2
  store i32 0, i32* %118, align 4
  %119 = add nsw i64 %105, 1
  %120 = add nsw i32 %106, 1
  %121 = load i32, i32* %39, align 4
  %122 = icmp slt i32 %106, %121
  br i1 %122, label %104, label %96

123:                                              ; preds = %129
  %124 = trunc i64 %144 to i32
  br label %125

125:                                              ; preds = %123, %90
  %126 = phi i32 [ %91, %90 ], [ %124, %123 ]
  %127 = load i32, i32* %44, align 4
  %128 = icmp sgt i32 %127, 0
  br i1 %128, label %147, label %155

129:                                              ; preds = %129, %94
  %130 = phi i64 [ %95, %94 ], [ %144, %129 ]
  %131 = phi i32 [ %92, %94 ], [ %145, %129 ]
  %132 = getelementptr inbounds i32*, i32** %52, i64 %130
  %133 = load i32*, i32** %132, align 8
  store i32 0, i32* %133, align 4
  %134 = load i32*, i32** %132, align 8
  %135 = getelementptr inbounds i32, i32* %134, i64 1
  store i32 %131, i32* %135, align 4
  %136 = load i32*, i32** %132, align 8
  %137 = getelementptr inbounds i32, i32* %136, i64 2
  store i32 0, i32* %137, align 4
  %138 = getelementptr inbounds i32*, i32** %60, i64 %130
  %139 = load i32*, i32** %138, align 8
  store i32 0, i32* %139, align 4
  %140 = load i32*, i32** %138, align 8
  %141 = getelementptr inbounds i32, i32* %140, i64 1
  store i32 %131, i32* %141, align 4
  %142 = load i32*, i32** %138, align 8
  %143 = getelementptr inbounds i32, i32* %142, i64 2
  store i32 0, i32* %143, align 4
  %144 = add nsw i64 %130, 1
  %145 = add nsw i32 %131, 1
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %123, label %129

147:                                              ; preds = %125
  %148 = sext i32 %126 to i64
  %149 = getelementptr inbounds i32*, i32** %60, i64 %148
  %150 = load i32*, i32** %149, align 8
  store i32 0, i32* %150, align 4
  %151 = load i32*, i32** %149, align 8
  %152 = getelementptr inbounds i32, i32* %151, i64 1
  store i32 0, i32* %152, align 4
  %153 = load i32*, i32** %149, align 8
  %154 = getelementptr inbounds i32, i32* %153, i64 2
  store i32 1, i32* %154, align 4
  br label %155

155:                                              ; preds = %125, %147
  %156 = sext i32 %6 to i64
  %157 = shl nsw i64 %156, 3
  %158 = tail call i8* @aom_malloc(i64 %157) #6
  %159 = bitcast i8* %158 to i32*
  %160 = sext i32 %7 to i64
  %161 = shl nsw i64 %160, 2
  %162 = sext i32 %18 to i64
  %163 = mul i64 %161, %162
  %164 = tail call i8* @aom_malloc(i64 %163) #6
  %165 = bitcast i8* %164 to i32*
  %166 = tail call i8* @aom_malloc(i64 %163) #6
  %167 = bitcast i8* %166 to i32*
  %168 = tail call i8* @aom_malloc(i64 272) #6
  %169 = bitcast i8* %168 to i32*
  %170 = load i32, i32* @chroma_subblock_size_y, align 4
  %171 = add nsw i32 %170, %18
  %172 = sext i32 %171 to i64
  %173 = sext i32 %23 to i64
  %174 = shl nsw i64 %173, 2
  %175 = mul i64 %174, %172
  %176 = tail call i8* @aom_malloc(i64 %175) #6
  %177 = bitcast i8* %176 to i32*
  %178 = load i32, i32* @chroma_subblock_size_y, align 4
  %179 = add nsw i32 %178, %18
  %180 = sext i32 %179 to i64
  %181 = mul i64 %174, %180
  %182 = tail call i8* @aom_malloc(i64 %181) #6
  %183 = bitcast i8* %182 to i32*
  %184 = tail call i8* @aom_malloc(i64 23944) #6
  %185 = bitcast i8* %184 to i32*
  %186 = sext i32 %38 to i64
  %187 = shl nsw i64 %186, 2
  %188 = tail call i8* @aom_malloc(i64 %187) #6
  %189 = bitcast i8* %188 to i32*
  %190 = tail call i8* @aom_malloc(i64 %187) #6
  %191 = bitcast i8* %190 to i32*
  %192 = load i32, i32* %44, align 4
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %194, label %195

194:                                              ; preds = %155
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %184, i8 0, i64 23944, i1 false) #6
  br label %314

195:                                              ; preds = %155
  %196 = load i32, i32* %32, align 4
  %197 = sub nsw i32 12, %196
  %198 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 24
  %199 = load i32, i32* %198, align 4
  %200 = add nsw i32 %197, %199
  %201 = load i32, i32* %39, align 4
  %202 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 13
  %203 = load i32, i32* %202, align 4
  %204 = shl i32 1, %200
  %205 = ashr i32 %204, 1
  %206 = load i16, i16* @random_register, align 2
  br label %207

207:                                              ; preds = %222, %195
  %208 = phi i64 [ 0, %195 ], [ %224, %222 ]
  %209 = phi i16 [ %206, %195 ], [ %223, %222 ]
  %210 = mul nuw nsw i64 %208, 82
  br label %226

211:                                              ; preds = %222
  %212 = trunc i32 %237 to i16
  %213 = add i32 %201, 1
  %214 = add nsw i32 %203, -1
  %215 = shl i32 %201, 1
  %216 = mul i32 %215, %213
  %217 = shl i32 1, %214
  store i16 %212, i16* @random_register, align 2
  %218 = icmp sgt i32 %216, 0
  %219 = load i32, i32* @grain_min, align 4
  %220 = load i32, i32* @grain_max, align 4
  %221 = zext i32 %216 to i64
  br label %250

222:                                              ; preds = %226
  %223 = trunc i32 %237 to i16
  %224 = add nuw nsw i64 %208, 1
  %225 = icmp eq i64 %224, 73
  br i1 %225, label %211, label %207

226:                                              ; preds = %226, %207
  %227 = phi i64 [ 0, %207 ], [ %248, %226 ]
  %228 = phi i16 [ %209, %207 ], [ %238, %226 ]
  %229 = zext i16 %228 to i32
  %230 = lshr i32 %229, 1
  %231 = xor i32 %230, %229
  %232 = lshr i32 %229, 3
  %233 = xor i32 %231, %232
  %234 = lshr i32 %229, 12
  %235 = xor i32 %233, %234
  %236 = shl nuw nsw i32 %235, 15
  %237 = or i32 %236, %230
  %238 = trunc i32 %237 to i16
  %239 = lshr i32 %237, 5
  %240 = and i32 %239, 2047
  %241 = zext i32 %240 to i64
  %242 = getelementptr inbounds [2048 x i32], [2048 x i32]* @gaussian_sequence, i64 0, i64 %241
  %243 = load i32, i32* %242, align 4
  %244 = add nsw i32 %243, %205
  %245 = ashr i32 %244, %200
  %246 = add nuw nsw i64 %227, %210
  %247 = getelementptr inbounds i32, i32* %185, i64 %246
  store i32 %245, i32* %247, align 4
  %248 = add nuw nsw i64 %227, 1
  %249 = icmp eq i64 %248, 82
  br i1 %249, label %222, label %226

250:                                              ; preds = %258, %211
  %251 = phi i64 [ 3, %211 ], [ %259, %258 ]
  %252 = mul nuw nsw i64 %251, 82
  %253 = trunc i64 %251 to i32
  br label %254

254:                                              ; preds = %261, %250
  %255 = phi i64 [ 3, %250 ], [ %274, %261 ]
  br i1 %218, label %256, label %261

256:                                              ; preds = %254
  %257 = trunc i64 %255 to i32
  br label %276

258:                                              ; preds = %261
  %259 = add nuw nsw i64 %251, 1
  %260 = icmp eq i64 %259, 73
  br i1 %260, label %314, label %250

261:                                              ; preds = %276, %254
  %262 = phi i32 [ 0, %254 ], [ %311, %276 ]
  %263 = add nuw nsw i64 %255, %252
  %264 = getelementptr inbounds i32, i32* %185, i64 %263
  %265 = load i32, i32* %264, align 4
  %266 = add nsw i32 %262, %217
  %267 = load i32, i32* %202, align 4
  %268 = ashr i32 %266, %267
  %269 = add nsw i32 %268, %265
  %270 = icmp slt i32 %269, %219
  %271 = icmp sgt i32 %269, %220
  %272 = select i1 %271, i32 %220, i32 %269
  %273 = select i1 %270, i32 %219, i32 %272
  store i32 %273, i32* %264, align 4
  %274 = add nuw nsw i64 %255, 1
  %275 = icmp eq i64 %274, 79
  br i1 %275, label %258, label %254

276:                                              ; preds = %276, %256
  %277 = phi i64 [ 0, %256 ], [ %312, %276 ]
  %278 = phi i32 [ 0, %256 ], [ %311, %276 ]
  %279 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 10, i64 %277
  %280 = load i32, i32* %279, align 4
  %281 = getelementptr inbounds i32*, i32** %52, i64 %277
  %282 = load i32*, i32** %281, align 8
  %283 = load i32, i32* %282, align 4
  %284 = add nsw i32 %283, %253
  %285 = mul nsw i32 %284, 82
  %286 = getelementptr inbounds i32, i32* %282, i64 1
  %287 = load i32, i32* %286, align 4
  %288 = add i32 %287, %257
  %289 = add i32 %288, %285
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds i32, i32* %185, i64 %290
  %292 = load i32, i32* %291, align 4
  %293 = mul nsw i32 %292, %280
  %294 = add nsw i32 %293, %278
  %295 = or i64 %277, 1
  %296 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 10, i64 %295
  %297 = load i32, i32* %296, align 4
  %298 = getelementptr inbounds i32*, i32** %52, i64 %295
  %299 = load i32*, i32** %298, align 8
  %300 = load i32, i32* %299, align 4
  %301 = add nsw i32 %300, %253
  %302 = mul nsw i32 %301, 82
  %303 = getelementptr inbounds i32, i32* %299, i64 1
  %304 = load i32, i32* %303, align 4
  %305 = add i32 %304, %257
  %306 = add i32 %305, %302
  %307 = sext i32 %306 to i64
  %308 = getelementptr inbounds i32, i32* %185, i64 %307
  %309 = load i32, i32* %308, align 4
  %310 = mul nsw i32 %309, %297
  %311 = add nsw i32 %310, %294
  %312 = add nuw nsw i64 %277, 2
  %313 = icmp eq i64 %312, %221
  br i1 %313, label %261, label %276

314:                                              ; preds = %258, %194
  %315 = load i32, i32* %32, align 4
  %316 = sub nsw i32 12, %315
  %317 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 24
  %318 = load i32, i32* %317, align 4
  %319 = add nsw i32 %316, %318
  %320 = load i32, i32* %39, align 4
  %321 = shl i32 %320, 1
  %322 = add nsw i32 %320, 1
  %323 = mul nsw i32 %321, %322
  %324 = load i32, i32* %44, align 4
  %325 = icmp sgt i32 %324, 0
  %326 = zext i1 %325 to i32
  %327 = or i32 %323, %326
  %328 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 13
  %329 = load i32, i32* %328, align 4
  %330 = add nsw i32 %329, -1
  %331 = shl i32 1, %330
  %332 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 5
  %333 = load i32, i32* %332, align 4
  %334 = icmp eq i32 %333, 0
  br i1 %334, label %335, label %339

335:                                              ; preds = %314
  %336 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 23
  %337 = load i32, i32* %336, align 4
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %385, label %339

339:                                              ; preds = %335, %314
  %340 = load i16, i16* %14, align 4
  %341 = xor i16 %340, -19164
  store i16 %341, i16* @random_register, align 2
  %342 = icmp sgt i32 %22, 0
  br i1 %342, label %343, label %386

343:                                              ; preds = %339
  %344 = icmp sgt i32 %29, 0
  %345 = shl i32 1, %319
  %346 = ashr i32 %345, 1
  %347 = sext i32 %29 to i64
  %348 = zext i32 %22 to i64
  %349 = zext i32 %29 to i64
  br label %350

350:                                              ; preds = %357, %343
  %351 = phi i16 [ %341, %343 ], [ %358, %357 ]
  %352 = phi i64 [ 0, %343 ], [ %359, %357 ]
  br i1 %344, label %353, label %357

353:                                              ; preds = %350
  %354 = mul nsw i64 %352, %347
  br label %361

355:                                              ; preds = %361
  %356 = trunc i32 %372 to i16
  store i16 %356, i16* @random_register, align 2
  br label %357

357:                                              ; preds = %355, %350
  %358 = phi i16 [ %356, %355 ], [ %351, %350 ]
  %359 = add nuw nsw i64 %352, 1
  %360 = icmp eq i64 %359, %348
  br i1 %360, label %386, label %350

361:                                              ; preds = %361, %353
  %362 = phi i64 [ 0, %353 ], [ %383, %361 ]
  %363 = phi i16 [ %351, %353 ], [ %373, %361 ]
  %364 = zext i16 %363 to i32
  %365 = lshr i32 %364, 1
  %366 = xor i32 %365, %364
  %367 = lshr i32 %364, 3
  %368 = xor i32 %366, %367
  %369 = lshr i32 %364, 12
  %370 = xor i32 %368, %369
  %371 = shl nuw nsw i32 %370, 15
  %372 = or i32 %371, %365
  %373 = trunc i32 %372 to i16
  %374 = lshr i32 %372, 5
  %375 = and i32 %374, 2047
  %376 = zext i32 %375 to i64
  %377 = getelementptr inbounds [2048 x i32], [2048 x i32]* @gaussian_sequence, i64 0, i64 %376
  %378 = load i32, i32* %377, align 4
  %379 = add nsw i32 %378, %346
  %380 = ashr i32 %379, %319
  %381 = add nsw i64 %362, %354
  %382 = getelementptr inbounds i32, i32* %189, i64 %381
  store i32 %380, i32* %382, align 4
  %383 = add nuw nsw i64 %362, 1
  %384 = icmp eq i64 %383, %349
  br i1 %384, label %355, label %361

385:                                              ; preds = %335
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %188, i8 0, i64 %187, i1 false) #6
  br label %386

386:                                              ; preds = %357, %385, %339
  %387 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 7
  %388 = load i32, i32* %387, align 4
  %389 = icmp eq i32 %388, 0
  br i1 %389, label %390, label %394

390:                                              ; preds = %386
  %391 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 23
  %392 = load i32, i32* %391, align 4
  %393 = icmp eq i32 %392, 0
  br i1 %393, label %440, label %394

394:                                              ; preds = %390, %386
  %395 = load i16, i16* %14, align 4
  %396 = xor i16 %395, 18904
  store i16 %396, i16* @random_register, align 2
  %397 = icmp sgt i32 %22, 0
  br i1 %397, label %398, label %668

398:                                              ; preds = %394
  %399 = icmp sgt i32 %29, 0
  %400 = shl i32 1, %319
  %401 = ashr i32 %400, 1
  %402 = sext i32 %29 to i64
  %403 = zext i32 %22 to i64
  %404 = zext i32 %29 to i64
  br label %405

405:                                              ; preds = %412, %398
  %406 = phi i16 [ %396, %398 ], [ %413, %412 ]
  %407 = phi i64 [ 0, %398 ], [ %414, %412 ]
  br i1 %399, label %408, label %412

408:                                              ; preds = %405
  %409 = mul nsw i64 %407, %402
  br label %416

410:                                              ; preds = %416
  %411 = trunc i32 %427 to i16
  store i16 %411, i16* @random_register, align 2
  br label %412

412:                                              ; preds = %410, %405
  %413 = phi i16 [ %411, %410 ], [ %406, %405 ]
  %414 = add nuw nsw i64 %407, 1
  %415 = icmp eq i64 %414, %403
  br i1 %415, label %441, label %405

416:                                              ; preds = %416, %408
  %417 = phi i64 [ 0, %408 ], [ %438, %416 ]
  %418 = phi i16 [ %406, %408 ], [ %428, %416 ]
  %419 = zext i16 %418 to i32
  %420 = lshr i32 %419, 1
  %421 = xor i32 %420, %419
  %422 = lshr i32 %419, 3
  %423 = xor i32 %421, %422
  %424 = lshr i32 %419, 12
  %425 = xor i32 %423, %424
  %426 = shl nuw nsw i32 %425, 15
  %427 = or i32 %426, %420
  %428 = trunc i32 %427 to i16
  %429 = lshr i32 %427, 5
  %430 = and i32 %429, 2047
  %431 = zext i32 %430 to i64
  %432 = getelementptr inbounds [2048 x i32], [2048 x i32]* @gaussian_sequence, i64 0, i64 %431
  %433 = load i32, i32* %432, align 4
  %434 = add nsw i32 %433, %401
  %435 = ashr i32 %434, %319
  %436 = add nsw i64 %417, %409
  %437 = getelementptr inbounds i32, i32* %191, i64 %436
  store i32 %435, i32* %437, align 4
  %438 = add nuw nsw i64 %417, 1
  %439 = icmp eq i64 %438, %404
  br i1 %439, label %410, label %416

440:                                              ; preds = %390
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %190, i8 0, i64 %187, i1 false) #6
  br label %441

441:                                              ; preds = %412, %440
  %442 = icmp sgt i32 %22, 3
  br i1 %442, label %443, label %668

443:                                              ; preds = %441
  %444 = icmp sgt i32 %28, 3
  %445 = icmp sgt i32 %327, 0
  %446 = add nsw i32 %10, %9
  %447 = shl i32 1, %446
  %448 = ashr i32 %447, 1
  %449 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 23
  %450 = load i32, i32* @grain_min, align 4
  %451 = load i32, i32* @grain_max, align 4
  %452 = sext i32 %29 to i64
  %453 = zext i32 %22 to i64
  %454 = icmp slt i32 %9, 0
  %455 = zext i32 %28 to i64
  %456 = icmp slt i32 %10, 0
  %457 = zext i32 %327 to i64
  %458 = add i32 %10, 3
  br label %459

459:                                              ; preds = %662, %443
  %460 = phi i64 [ 3, %443 ], [ %663, %662 ]
  br i1 %444, label %461, label %662

461:                                              ; preds = %459
  %462 = trunc i64 %460 to i32
  %463 = add i32 %462, -3
  %464 = shl i32 %463, %9
  %465 = add i32 %464, 3
  %466 = add nsw i32 %465, %9
  %467 = mul nsw i64 %460, %452
  %468 = sext i32 %465 to i64
  %469 = sext i32 %466 to i64
  br label %470

470:                                              ; preds = %659, %461
  %471 = phi i64 [ 3, %461 ], [ %660, %659 ]
  br i1 %445, label %472, label %621

472:                                              ; preds = %470
  %473 = trunc i64 %471 to i32
  %474 = add i32 %473, -3
  %475 = shl i32 %474, %10
  %476 = add i32 %475, 3
  %477 = add nsw i32 %476, %10
  %478 = sext i32 %476 to i64
  %479 = sext i32 %477 to i64
  %480 = add i32 %458, %475
  %481 = sext i32 %480 to i64
  %482 = icmp sgt i64 %481, %478
  %483 = select i1 %482, i64 %481, i64 %478
  %484 = add nsw i64 %483, 1
  %485 = sub nsw i64 %484, %478
  %486 = add nsw i64 %483, 1
  %487 = sub nsw i64 %486, %478
  %488 = add nsw i64 %487, -8
  %489 = lshr i64 %488, 3
  %490 = add nuw nsw i64 %489, 1
  %491 = icmp ult i64 %485, 8
  %492 = and i64 %485, -8
  %493 = add nsw i64 %492, %478
  %494 = and i64 %490, 1
  %495 = icmp eq i64 %489, 0
  %496 = sub nuw nsw i64 %490, %494
  %497 = icmp eq i64 %494, 0
  %498 = icmp eq i64 %485, %492
  br label %499

499:                                              ; preds = %611, %472
  %500 = phi i64 [ 0, %472 ], [ %619, %611 ]
  %501 = phi i32 [ 0, %472 ], [ %617, %611 ]
  %502 = phi i32 [ 0, %472 ], [ %618, %611 ]
  %503 = getelementptr inbounds i32*, i32** %60, i64 %500
  %504 = load i32*, i32** %503, align 8
  %505 = getelementptr inbounds i32, i32* %504, i64 2
  %506 = load i32, i32* %505, align 4
  switch i32 %506, label %665 [
    i32 0, label %507
    i32 1, label %524
  ]

507:                                              ; preds = %499
  %508 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 11, i64 %500
  %509 = load i32, i32* %508, align 4
  %510 = load i32, i32* %504, align 4
  %511 = add nsw i32 %510, %462
  %512 = mul nsw i32 %511, %29
  %513 = getelementptr inbounds i32, i32* %504, i64 1
  %514 = load i32, i32* %513, align 4
  %515 = add i32 %514, %473
  %516 = add i32 %515, %512
  %517 = sext i32 %516 to i64
  %518 = getelementptr inbounds i32, i32* %189, i64 %517
  %519 = load i32, i32* %518, align 4
  %520 = mul nsw i32 %519, %509
  %521 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 12, i64 %500
  %522 = load i32, i32* %521, align 4
  %523 = getelementptr inbounds i32, i32* %191, i64 %517
  br label %611

524:                                              ; preds = %499
  br i1 %454, label %590, label %525

525:                                              ; preds = %524, %598
  %526 = phi i64 [ %600, %598 ], [ %468, %524 ]
  %527 = phi i32 [ %599, %598 ], [ 0, %524 ]
  br i1 %456, label %598, label %528

528:                                              ; preds = %525
  %529 = mul nsw i64 %526, 82
  br i1 %491, label %530, label %533

530:                                              ; preds = %581, %528
  %531 = phi i64 [ %478, %528 ], [ %493, %581 ]
  %532 = phi i32 [ %527, %528 ], [ %589, %581 ]
  br label %602

533:                                              ; preds = %528
  %534 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %527, i32 0
  br i1 %495, label %564, label %535

535:                                              ; preds = %533, %535
  %536 = phi i64 [ %561, %535 ], [ 0, %533 ]
  %537 = phi <4 x i32> [ %559, %535 ], [ %534, %533 ]
  %538 = phi <4 x i32> [ %560, %535 ], [ zeroinitializer, %533 ]
  %539 = phi i64 [ %562, %535 ], [ %496, %533 ]
  %540 = add i64 %536, %478
  %541 = add nsw i64 %540, %529
  %542 = getelementptr inbounds i32, i32* %185, i64 %541
  %543 = bitcast i32* %542 to <4 x i32>*
  %544 = load <4 x i32>, <4 x i32>* %543, align 4
  %545 = getelementptr inbounds i32, i32* %542, i64 4
  %546 = bitcast i32* %545 to <4 x i32>*
  %547 = load <4 x i32>, <4 x i32>* %546, align 4
  %548 = add nsw <4 x i32> %544, %537
  %549 = add nsw <4 x i32> %547, %538
  %550 = or i64 %536, 8
  %551 = add i64 %550, %478
  %552 = add nsw i64 %551, %529
  %553 = getelementptr inbounds i32, i32* %185, i64 %552
  %554 = bitcast i32* %553 to <4 x i32>*
  %555 = load <4 x i32>, <4 x i32>* %554, align 4
  %556 = getelementptr inbounds i32, i32* %553, i64 4
  %557 = bitcast i32* %556 to <4 x i32>*
  %558 = load <4 x i32>, <4 x i32>* %557, align 4
  %559 = add nsw <4 x i32> %555, %548
  %560 = add nsw <4 x i32> %558, %549
  %561 = add i64 %536, 16
  %562 = add i64 %539, -2
  %563 = icmp eq i64 %562, 0
  br i1 %563, label %564, label %535, !llvm.loop !8

564:                                              ; preds = %535, %533
  %565 = phi <4 x i32> [ undef, %533 ], [ %559, %535 ]
  %566 = phi <4 x i32> [ undef, %533 ], [ %560, %535 ]
  %567 = phi i64 [ 0, %533 ], [ %561, %535 ]
  %568 = phi <4 x i32> [ %534, %533 ], [ %559, %535 ]
  %569 = phi <4 x i32> [ zeroinitializer, %533 ], [ %560, %535 ]
  br i1 %497, label %581, label %570

570:                                              ; preds = %564
  %571 = add i64 %567, %478
  %572 = add nsw i64 %571, %529
  %573 = getelementptr inbounds i32, i32* %185, i64 %572
  %574 = getelementptr inbounds i32, i32* %573, i64 4
  %575 = bitcast i32* %574 to <4 x i32>*
  %576 = load <4 x i32>, <4 x i32>* %575, align 4
  %577 = add nsw <4 x i32> %576, %569
  %578 = bitcast i32* %573 to <4 x i32>*
  %579 = load <4 x i32>, <4 x i32>* %578, align 4
  %580 = add nsw <4 x i32> %579, %568
  br label %581

581:                                              ; preds = %564, %570
  %582 = phi <4 x i32> [ %565, %564 ], [ %580, %570 ]
  %583 = phi <4 x i32> [ %566, %564 ], [ %577, %570 ]
  %584 = add <4 x i32> %583, %582
  %585 = shufflevector <4 x i32> %584, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %586 = add <4 x i32> %584, %585
  %587 = shufflevector <4 x i32> %586, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %588 = add <4 x i32> %586, %587
  %589 = extractelement <4 x i32> %588, i32 0
  br i1 %498, label %598, label %530

590:                                              ; preds = %598, %524
  %591 = phi i32 [ 0, %524 ], [ %599, %598 ]
  %592 = add nsw i32 %591, %448
  %593 = ashr i32 %592, %446
  %594 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 11, i64 %500
  %595 = load i32, i32* %594, align 4
  %596 = mul nsw i32 %593, %595
  %597 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 12, i64 %500
  br label %611

598:                                              ; preds = %602, %581, %525
  %599 = phi i32 [ %527, %525 ], [ %589, %581 ], [ %608, %602 ]
  %600 = add nsw i64 %526, 1
  %601 = icmp slt i64 %526, %469
  br i1 %601, label %525, label %590

602:                                              ; preds = %530, %602
  %603 = phi i64 [ %609, %602 ], [ %531, %530 ]
  %604 = phi i32 [ %608, %602 ], [ %532, %530 ]
  %605 = add nsw i64 %603, %529
  %606 = getelementptr inbounds i32, i32* %185, i64 %605
  %607 = load i32, i32* %606, align 4
  %608 = add nsw i32 %607, %604
  %609 = add nsw i64 %603, 1
  %610 = icmp slt i64 %603, %479
  br i1 %610, label %602, label %598, !llvm.loop !10

611:                                              ; preds = %590, %507
  %612 = phi i32* [ %597, %590 ], [ %523, %507 ]
  %613 = phi i32 [ %593, %590 ], [ %522, %507 ]
  %614 = phi i32 [ %596, %590 ], [ %520, %507 ]
  %615 = load i32, i32* %612, align 4
  %616 = mul nsw i32 %615, %613
  %617 = add nsw i32 %616, %501
  %618 = add nsw i32 %614, %502
  %619 = add nuw nsw i64 %500, 1
  %620 = icmp eq i64 %619, %457
  br i1 %620, label %621, label %499

621:                                              ; preds = %611, %470
  %622 = phi i32 [ 0, %470 ], [ %618, %611 ]
  %623 = phi i32 [ 0, %470 ], [ %617, %611 ]
  %624 = load i32, i32* %332, align 4
  %625 = icmp eq i32 %624, 0
  br i1 %625, label %626, label %629

626:                                              ; preds = %621
  %627 = load i32, i32* %449, align 4
  %628 = icmp eq i32 %627, 0
  br i1 %628, label %641, label %629

629:                                              ; preds = %626, %621
  %630 = add nsw i64 %471, %467
  %631 = getelementptr inbounds i32, i32* %189, i64 %630
  %632 = load i32, i32* %631, align 4
  %633 = add nsw i32 %622, %331
  %634 = load i32, i32* %328, align 4
  %635 = ashr i32 %633, %634
  %636 = add nsw i32 %635, %632
  %637 = icmp slt i32 %636, %450
  %638 = icmp sgt i32 %636, %451
  %639 = select i1 %638, i32 %451, i32 %636
  %640 = select i1 %637, i32 %450, i32 %639
  store i32 %640, i32* %631, align 4
  br label %641

641:                                              ; preds = %629, %626
  %642 = load i32, i32* %387, align 4
  %643 = icmp eq i32 %642, 0
  br i1 %643, label %644, label %647

644:                                              ; preds = %641
  %645 = load i32, i32* %449, align 4
  %646 = icmp eq i32 %645, 0
  br i1 %646, label %659, label %647

647:                                              ; preds = %644, %641
  %648 = add nsw i64 %471, %467
  %649 = getelementptr inbounds i32, i32* %191, i64 %648
  %650 = load i32, i32* %649, align 4
  %651 = add nsw i32 %623, %331
  %652 = load i32, i32* %328, align 4
  %653 = ashr i32 %651, %652
  %654 = add nsw i32 %653, %650
  %655 = icmp slt i32 %654, %450
  %656 = icmp sgt i32 %654, %451
  %657 = select i1 %656, i32 %451, i32 %654
  %658 = select i1 %655, i32 %450, i32 %657
  store i32 %658, i32* %649, align 4
  br label %659

659:                                              ; preds = %647, %644
  %660 = add nuw nsw i64 %471, 1
  %661 = icmp eq i64 %660, %455
  br i1 %661, label %662, label %470

662:                                              ; preds = %659, %459
  %663 = add nuw nsw i64 %460, 1
  %664 = icmp eq i64 %663, %453
  br i1 %664, label %668, label %459

665:                                              ; preds = %499
  %666 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %667 = tail call i64 @fwrite(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.1, i64 0, i64 0), i64 75, i64 1, %struct._IO_FILE* %666) #7
  br label %3477

668:                                              ; preds = %662, %441, %394
  %669 = load i32, i32* %44, align 4
  %670 = icmp eq i32 %669, 0
  br i1 %670, label %873, label %671

671:                                              ; preds = %668
  %672 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 2, i64 0, i64 0
  %673 = load i32, i32* %672, align 4
  %674 = icmp sgt i32 %673, 0
  br i1 %674, label %675, label %677

675:                                              ; preds = %671
  %676 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 2, i64 0, i64 1
  br label %683

677:                                              ; preds = %683, %671
  %678 = phi i32 [ %673, %671 ], [ %688, %683 ]
  %679 = add i32 %669, -1
  %680 = icmp sgt i32 %679, 0
  br i1 %680, label %681, label %710

681:                                              ; preds = %677
  %682 = zext i32 %679 to i64
  br label %799

683:                                              ; preds = %683, %675
  %684 = phi i64 [ 0, %675 ], [ %687, %683 ]
  %685 = load i32, i32* %676, align 4
  %686 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_y, i64 0, i64 %684
  store i32 %685, i32* %686, align 4
  %687 = add nuw nsw i64 %684, 1
  %688 = load i32, i32* %672, align 4
  %689 = sext i32 %688 to i64
  %690 = icmp slt i64 %687, %689
  br i1 %690, label %683, label %677

691:                                              ; preds = %829, %822
  %692 = phi i64 [ 1, %822 ], [ %855, %829 ]
  %693 = icmp eq i64 %825, 0
  br i1 %693, label %706, label %694

694:                                              ; preds = %691
  %695 = load i32, i32* %805, align 4
  %696 = load i32, i32* %810, align 4
  %697 = mul nsw i64 %692, %816
  %698 = add nsw i64 %697, 32768
  %699 = lshr i64 %698, 16
  %700 = trunc i64 %699 to i32
  %701 = add nsw i32 %695, %700
  %702 = trunc i64 %692 to i32
  %703 = add nsw i32 %696, %702
  %704 = sext i32 %703 to i64
  %705 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_y, i64 0, i64 %704
  store i32 %701, i32* %705, align 4
  br label %706

706:                                              ; preds = %694, %691, %818, %799
  %707 = icmp eq i64 %802, %682
  br i1 %707, label %710, label %708

708:                                              ; preds = %706
  %709 = load i32, i32* %808, align 4
  br label %799

710:                                              ; preds = %706, %677
  %711 = sext i32 %679 to i64
  %712 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 2, i64 %711, i64 0
  %713 = load i32, i32* %712, align 4
  %714 = icmp slt i32 %713, 256
  br i1 %714, label %715, label %873

715:                                              ; preds = %710
  %716 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 2, i64 %711, i64 1
  %717 = sext i32 %713 to i64
  %718 = sub nsw i64 256, %717
  %719 = icmp ult i64 %718, 8
  br i1 %719, label %720, label %737

720:                                              ; preds = %797, %737, %715
  %721 = phi i64 [ %717, %737 ], [ %717, %715 ], [ %748, %797 ]
  %722 = sub nsw i64 0, %721
  %723 = sub nsw i64 255, %721
  %724 = and i64 %722, 3
  %725 = icmp eq i64 %724, 0
  br i1 %725, label %734, label %726

726:                                              ; preds = %720, %726
  %727 = phi i64 [ %731, %726 ], [ %721, %720 ]
  %728 = phi i64 [ %732, %726 ], [ %724, %720 ]
  %729 = load i32, i32* %716, align 4
  %730 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_y, i64 0, i64 %727
  store i32 %729, i32* %730, align 4
  %731 = add nsw i64 %727, 1
  %732 = add i64 %728, -1
  %733 = icmp eq i64 %732, 0
  br i1 %733, label %734, label %726, !llvm.loop !12

734:                                              ; preds = %726, %720
  %735 = phi i64 [ %721, %720 ], [ %731, %726 ]
  %736 = icmp ult i64 %723, 3
  br i1 %736, label %873, label %858

737:                                              ; preds = %715
  %738 = getelementptr [256 x i32], [256 x i32]* @scaling_lut_y, i64 0, i64 %717
  %739 = bitcast i32* %738 to i8*
  %740 = shl nsw i64 %711, 3
  %741 = add nsw i64 %740, 13
  %742 = getelementptr i8, i8* %13, i64 %741
  %743 = icmp ugt i8* %742, %739
  %744 = icmp ult i32* %716, getelementptr inbounds ([256 x i32], [256 x i32]* @scaling_lut_y, i64 1, i64 0)
  %745 = and i1 %743, %744
  br i1 %745, label %720, label %746

746:                                              ; preds = %737
  %747 = and i64 %718, -8
  %748 = add nsw i64 %747, %717
  %749 = add nsw i64 %747, -8
  %750 = lshr exact i64 %749, 3
  %751 = add nuw nsw i64 %750, 1
  %752 = and i64 %751, 1
  %753 = icmp eq i64 %749, 0
  br i1 %753, label %783, label %754

754:                                              ; preds = %746
  %755 = sub nuw nsw i64 %751, %752
  %756 = load i32, i32* %716, align 4, !alias.scope !13
  %757 = insertelement <4 x i32> undef, i32 %756, i32 0
  %758 = shufflevector <4 x i32> %757, <4 x i32> undef, <4 x i32> zeroinitializer
  %759 = insertelement <4 x i32> undef, i32 %756, i32 0
  %760 = shufflevector <4 x i32> %759, <4 x i32> undef, <4 x i32> zeroinitializer
  %761 = load i32, i32* %716, align 4, !alias.scope !13
  %762 = insertelement <4 x i32> undef, i32 %761, i32 0
  %763 = shufflevector <4 x i32> %762, <4 x i32> undef, <4 x i32> zeroinitializer
  %764 = insertelement <4 x i32> undef, i32 %761, i32 0
  %765 = shufflevector <4 x i32> %764, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %766

766:                                              ; preds = %766, %754
  %767 = phi i64 [ 0, %754 ], [ %780, %766 ]
  %768 = phi i64 [ %755, %754 ], [ %781, %766 ]
  %769 = add i64 %767, %717
  %770 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_y, i64 0, i64 %769
  %771 = bitcast i32* %770 to <4 x i32>*
  store <4 x i32> %758, <4 x i32>* %771, align 4, !alias.scope !16, !noalias !13
  %772 = getelementptr inbounds i32, i32* %770, i64 4
  %773 = bitcast i32* %772 to <4 x i32>*
  store <4 x i32> %760, <4 x i32>* %773, align 4, !alias.scope !16, !noalias !13
  %774 = or i64 %767, 8
  %775 = add i64 %774, %717
  %776 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_y, i64 0, i64 %775
  %777 = bitcast i32* %776 to <4 x i32>*
  store <4 x i32> %763, <4 x i32>* %777, align 4, !alias.scope !16, !noalias !13
  %778 = getelementptr inbounds i32, i32* %776, i64 4
  %779 = bitcast i32* %778 to <4 x i32>*
  store <4 x i32> %765, <4 x i32>* %779, align 4, !alias.scope !16, !noalias !13
  %780 = add i64 %767, 16
  %781 = add i64 %768, -2
  %782 = icmp eq i64 %781, 0
  br i1 %782, label %783, label %766, !llvm.loop !18

783:                                              ; preds = %766, %746
  %784 = phi i64 [ 0, %746 ], [ %780, %766 ]
  %785 = icmp eq i64 %752, 0
  br i1 %785, label %797, label %786

786:                                              ; preds = %783
  %787 = add i64 %784, %717
  %788 = load i32, i32* %716, align 4, !alias.scope !13
  %789 = insertelement <4 x i32> undef, i32 %788, i32 0
  %790 = shufflevector <4 x i32> %789, <4 x i32> undef, <4 x i32> zeroinitializer
  %791 = insertelement <4 x i32> undef, i32 %788, i32 0
  %792 = shufflevector <4 x i32> %791, <4 x i32> undef, <4 x i32> zeroinitializer
  %793 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_y, i64 0, i64 %787
  %794 = bitcast i32* %793 to <4 x i32>*
  store <4 x i32> %790, <4 x i32>* %794, align 4, !alias.scope !16, !noalias !13
  %795 = getelementptr inbounds i32, i32* %793, i64 4
  %796 = bitcast i32* %795 to <4 x i32>*
  store <4 x i32> %792, <4 x i32>* %796, align 4, !alias.scope !16, !noalias !13
  br label %797

797:                                              ; preds = %783, %786
  %798 = icmp eq i64 %718, %747
  br i1 %798, label %873, label %720

799:                                              ; preds = %708, %681
  %800 = phi i32 [ %678, %681 ], [ %709, %708 ]
  %801 = phi i64 [ 0, %681 ], [ %802, %708 ]
  %802 = add nuw nsw i64 %801, 1
  %803 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 2, i64 %802, i64 1
  %804 = load i32, i32* %803, align 4
  %805 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 2, i64 %801, i64 1
  %806 = load i32, i32* %805, align 4
  %807 = sub nsw i32 %804, %806
  %808 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 2, i64 %802, i64 0
  %809 = load i32, i32* %808, align 4
  %810 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 2, i64 %801, i64 0
  %811 = sub i32 %809, %800
  %812 = ashr i32 %811, 1
  %813 = add nsw i32 %812, 65536
  %814 = sdiv i32 %813, %811
  %815 = mul nsw i32 %814, %807
  %816 = sext i32 %815 to i64
  %817 = icmp sgt i32 %811, 0
  br i1 %817, label %818, label %706

818:                                              ; preds = %799
  %819 = sext i32 %800 to i64
  %820 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_y, i64 0, i64 %819
  store i32 %806, i32* %820, align 4
  %821 = icmp eq i32 %811, 1
  br i1 %821, label %706, label %822

822:                                              ; preds = %818
  %823 = zext i32 %811 to i64
  %824 = add nsw i64 %823, -1
  %825 = and i64 %824, 1
  %826 = icmp eq i32 %811, 2
  br i1 %826, label %691, label %827

827:                                              ; preds = %822
  %828 = sub nsw i64 %824, %825
  br label %829

829:                                              ; preds = %829, %827
  %830 = phi i64 [ 1, %827 ], [ %855, %829 ]
  %831 = phi i64 [ %828, %827 ], [ %856, %829 ]
  %832 = load i32, i32* %805, align 4
  %833 = load i32, i32* %810, align 4
  %834 = mul nsw i64 %830, %816
  %835 = add nsw i64 %834, 32768
  %836 = lshr i64 %835, 16
  %837 = trunc i64 %836 to i32
  %838 = add nsw i32 %832, %837
  %839 = trunc i64 %830 to i32
  %840 = add nsw i32 %833, %839
  %841 = sext i32 %840 to i64
  %842 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_y, i64 0, i64 %841
  store i32 %838, i32* %842, align 4
  %843 = add nuw nsw i64 %830, 1
  %844 = load i32, i32* %805, align 4
  %845 = load i32, i32* %810, align 4
  %846 = mul nsw i64 %843, %816
  %847 = add nsw i64 %846, 32768
  %848 = lshr i64 %847, 16
  %849 = trunc i64 %848 to i32
  %850 = add nsw i32 %844, %849
  %851 = trunc i64 %843 to i32
  %852 = add nsw i32 %845, %851
  %853 = sext i32 %852 to i64
  %854 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_y, i64 0, i64 %853
  store i32 %850, i32* %854, align 4
  %855 = add nuw nsw i64 %830, 2
  %856 = add i64 %831, -2
  %857 = icmp eq i64 %856, 0
  br i1 %857, label %691, label %829

858:                                              ; preds = %734, %858
  %859 = phi i64 [ %871, %858 ], [ %735, %734 ]
  %860 = load i32, i32* %716, align 4
  %861 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_y, i64 0, i64 %859
  store i32 %860, i32* %861, align 4
  %862 = add nsw i64 %859, 1
  %863 = load i32, i32* %716, align 4
  %864 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_y, i64 0, i64 %862
  store i32 %863, i32* %864, align 4
  %865 = add nsw i64 %859, 2
  %866 = load i32, i32* %716, align 4
  %867 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_y, i64 0, i64 %865
  store i32 %866, i32* %867, align 4
  %868 = add nsw i64 %859, 3
  %869 = load i32, i32* %716, align 4
  %870 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_y, i64 0, i64 %868
  store i32 %869, i32* %870, align 4
  %871 = add nsw i64 %859, 4
  %872 = icmp eq i64 %871, 256
  br i1 %872, label %873, label %858, !llvm.loop !19

873:                                              ; preds = %734, %858, %797, %668, %710
  %874 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 23
  %875 = load i32, i32* %874, align 4
  %876 = icmp eq i32 %875, 0
  br i1 %876, label %878, label %877

877:                                              ; preds = %873
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([256 x i32]* @scaling_lut_cb to i8*), i8* align 16 bitcast ([256 x i32]* @scaling_lut_y to i8*), i64 1024, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([256 x i32]* @scaling_lut_cr to i8*), i8* align 16 bitcast ([256 x i32]* @scaling_lut_y to i8*), i64 1024, i1 false)
  br label %1288

878:                                              ; preds = %873
  %879 = load i32, i32* %332, align 4
  %880 = icmp eq i32 %879, 0
  br i1 %880, label %1083, label %881

881:                                              ; preds = %878
  %882 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 4, i64 0, i64 0
  %883 = load i32, i32* %882, align 4
  %884 = icmp sgt i32 %883, 0
  br i1 %884, label %885, label %887

885:                                              ; preds = %881
  %886 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 4, i64 0, i64 1
  br label %893

887:                                              ; preds = %893, %881
  %888 = phi i32 [ %883, %881 ], [ %898, %893 ]
  %889 = add i32 %879, -1
  %890 = icmp sgt i32 %889, 0
  br i1 %890, label %891, label %920

891:                                              ; preds = %887
  %892 = zext i32 %889 to i64
  br label %1009

893:                                              ; preds = %893, %885
  %894 = phi i64 [ 0, %885 ], [ %897, %893 ]
  %895 = load i32, i32* %886, align 4
  %896 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cb, i64 0, i64 %894
  store i32 %895, i32* %896, align 4
  %897 = add nuw nsw i64 %894, 1
  %898 = load i32, i32* %882, align 4
  %899 = sext i32 %898 to i64
  %900 = icmp slt i64 %897, %899
  br i1 %900, label %893, label %887

901:                                              ; preds = %1039, %1032
  %902 = phi i64 [ 1, %1032 ], [ %1065, %1039 ]
  %903 = icmp eq i64 %1035, 0
  br i1 %903, label %916, label %904

904:                                              ; preds = %901
  %905 = load i32, i32* %1015, align 4
  %906 = load i32, i32* %1020, align 4
  %907 = mul nsw i64 %902, %1026
  %908 = add nsw i64 %907, 32768
  %909 = lshr i64 %908, 16
  %910 = trunc i64 %909 to i32
  %911 = add nsw i32 %905, %910
  %912 = trunc i64 %902 to i32
  %913 = add nsw i32 %906, %912
  %914 = sext i32 %913 to i64
  %915 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cb, i64 0, i64 %914
  store i32 %911, i32* %915, align 4
  br label %916

916:                                              ; preds = %904, %901, %1028, %1009
  %917 = icmp eq i64 %1012, %892
  br i1 %917, label %920, label %918

918:                                              ; preds = %916
  %919 = load i32, i32* %1018, align 4
  br label %1009

920:                                              ; preds = %916, %887
  %921 = sext i32 %889 to i64
  %922 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 4, i64 %921, i64 0
  %923 = load i32, i32* %922, align 4
  %924 = icmp slt i32 %923, 256
  br i1 %924, label %925, label %1083

925:                                              ; preds = %920
  %926 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 4, i64 %921, i64 1
  %927 = sext i32 %923 to i64
  %928 = sub nsw i64 256, %927
  %929 = icmp ult i64 %928, 8
  br i1 %929, label %930, label %947

930:                                              ; preds = %1007, %947, %925
  %931 = phi i64 [ %927, %947 ], [ %927, %925 ], [ %958, %1007 ]
  %932 = sub nsw i64 0, %931
  %933 = sub nsw i64 255, %931
  %934 = and i64 %932, 3
  %935 = icmp eq i64 %934, 0
  br i1 %935, label %944, label %936

936:                                              ; preds = %930, %936
  %937 = phi i64 [ %941, %936 ], [ %931, %930 ]
  %938 = phi i64 [ %942, %936 ], [ %934, %930 ]
  %939 = load i32, i32* %926, align 4
  %940 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cb, i64 0, i64 %937
  store i32 %939, i32* %940, align 4
  %941 = add nsw i64 %937, 1
  %942 = add i64 %938, -1
  %943 = icmp eq i64 %942, 0
  br i1 %943, label %944, label %936, !llvm.loop !20

944:                                              ; preds = %936, %930
  %945 = phi i64 [ %931, %930 ], [ %941, %936 ]
  %946 = icmp ult i64 %933, 3
  br i1 %946, label %1083, label %1068

947:                                              ; preds = %925
  %948 = getelementptr [256 x i32], [256 x i32]* @scaling_lut_cb, i64 0, i64 %927
  %949 = bitcast i32* %948 to i8*
  %950 = shl nsw i64 %921, 3
  %951 = add nsw i64 %950, 129
  %952 = getelementptr i8, i8* %13, i64 %951
  %953 = icmp ugt i8* %952, %949
  %954 = icmp ult i32* %926, getelementptr inbounds ([256 x i32], [256 x i32]* @scaling_lut_cb, i64 1, i64 0)
  %955 = and i1 %953, %954
  br i1 %955, label %930, label %956

956:                                              ; preds = %947
  %957 = and i64 %928, -8
  %958 = add nsw i64 %957, %927
  %959 = add nsw i64 %957, -8
  %960 = lshr exact i64 %959, 3
  %961 = add nuw nsw i64 %960, 1
  %962 = and i64 %961, 1
  %963 = icmp eq i64 %959, 0
  br i1 %963, label %993, label %964

964:                                              ; preds = %956
  %965 = sub nuw nsw i64 %961, %962
  %966 = load i32, i32* %926, align 4, !alias.scope !21
  %967 = insertelement <4 x i32> undef, i32 %966, i32 0
  %968 = shufflevector <4 x i32> %967, <4 x i32> undef, <4 x i32> zeroinitializer
  %969 = insertelement <4 x i32> undef, i32 %966, i32 0
  %970 = shufflevector <4 x i32> %969, <4 x i32> undef, <4 x i32> zeroinitializer
  %971 = load i32, i32* %926, align 4, !alias.scope !21
  %972 = insertelement <4 x i32> undef, i32 %971, i32 0
  %973 = shufflevector <4 x i32> %972, <4 x i32> undef, <4 x i32> zeroinitializer
  %974 = insertelement <4 x i32> undef, i32 %971, i32 0
  %975 = shufflevector <4 x i32> %974, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %976

976:                                              ; preds = %976, %964
  %977 = phi i64 [ 0, %964 ], [ %990, %976 ]
  %978 = phi i64 [ %965, %964 ], [ %991, %976 ]
  %979 = add i64 %977, %927
  %980 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cb, i64 0, i64 %979
  %981 = bitcast i32* %980 to <4 x i32>*
  store <4 x i32> %968, <4 x i32>* %981, align 4, !alias.scope !24, !noalias !21
  %982 = getelementptr inbounds i32, i32* %980, i64 4
  %983 = bitcast i32* %982 to <4 x i32>*
  store <4 x i32> %970, <4 x i32>* %983, align 4, !alias.scope !24, !noalias !21
  %984 = or i64 %977, 8
  %985 = add i64 %984, %927
  %986 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cb, i64 0, i64 %985
  %987 = bitcast i32* %986 to <4 x i32>*
  store <4 x i32> %973, <4 x i32>* %987, align 4, !alias.scope !24, !noalias !21
  %988 = getelementptr inbounds i32, i32* %986, i64 4
  %989 = bitcast i32* %988 to <4 x i32>*
  store <4 x i32> %975, <4 x i32>* %989, align 4, !alias.scope !24, !noalias !21
  %990 = add i64 %977, 16
  %991 = add i64 %978, -2
  %992 = icmp eq i64 %991, 0
  br i1 %992, label %993, label %976, !llvm.loop !26

993:                                              ; preds = %976, %956
  %994 = phi i64 [ 0, %956 ], [ %990, %976 ]
  %995 = icmp eq i64 %962, 0
  br i1 %995, label %1007, label %996

996:                                              ; preds = %993
  %997 = add i64 %994, %927
  %998 = load i32, i32* %926, align 4, !alias.scope !21
  %999 = insertelement <4 x i32> undef, i32 %998, i32 0
  %1000 = shufflevector <4 x i32> %999, <4 x i32> undef, <4 x i32> zeroinitializer
  %1001 = insertelement <4 x i32> undef, i32 %998, i32 0
  %1002 = shufflevector <4 x i32> %1001, <4 x i32> undef, <4 x i32> zeroinitializer
  %1003 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cb, i64 0, i64 %997
  %1004 = bitcast i32* %1003 to <4 x i32>*
  store <4 x i32> %1000, <4 x i32>* %1004, align 4, !alias.scope !24, !noalias !21
  %1005 = getelementptr inbounds i32, i32* %1003, i64 4
  %1006 = bitcast i32* %1005 to <4 x i32>*
  store <4 x i32> %1002, <4 x i32>* %1006, align 4, !alias.scope !24, !noalias !21
  br label %1007

1007:                                             ; preds = %993, %996
  %1008 = icmp eq i64 %928, %957
  br i1 %1008, label %1083, label %930

1009:                                             ; preds = %918, %891
  %1010 = phi i32 [ %888, %891 ], [ %919, %918 ]
  %1011 = phi i64 [ 0, %891 ], [ %1012, %918 ]
  %1012 = add nuw nsw i64 %1011, 1
  %1013 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 4, i64 %1012, i64 1
  %1014 = load i32, i32* %1013, align 4
  %1015 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 4, i64 %1011, i64 1
  %1016 = load i32, i32* %1015, align 4
  %1017 = sub nsw i32 %1014, %1016
  %1018 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 4, i64 %1012, i64 0
  %1019 = load i32, i32* %1018, align 4
  %1020 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 4, i64 %1011, i64 0
  %1021 = sub i32 %1019, %1010
  %1022 = ashr i32 %1021, 1
  %1023 = add nsw i32 %1022, 65536
  %1024 = sdiv i32 %1023, %1021
  %1025 = mul nsw i32 %1024, %1017
  %1026 = sext i32 %1025 to i64
  %1027 = icmp sgt i32 %1021, 0
  br i1 %1027, label %1028, label %916

1028:                                             ; preds = %1009
  %1029 = sext i32 %1010 to i64
  %1030 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cb, i64 0, i64 %1029
  store i32 %1016, i32* %1030, align 4
  %1031 = icmp eq i32 %1021, 1
  br i1 %1031, label %916, label %1032

1032:                                             ; preds = %1028
  %1033 = zext i32 %1021 to i64
  %1034 = add nsw i64 %1033, -1
  %1035 = and i64 %1034, 1
  %1036 = icmp eq i32 %1021, 2
  br i1 %1036, label %901, label %1037

1037:                                             ; preds = %1032
  %1038 = sub nsw i64 %1034, %1035
  br label %1039

1039:                                             ; preds = %1039, %1037
  %1040 = phi i64 [ 1, %1037 ], [ %1065, %1039 ]
  %1041 = phi i64 [ %1038, %1037 ], [ %1066, %1039 ]
  %1042 = load i32, i32* %1015, align 4
  %1043 = load i32, i32* %1020, align 4
  %1044 = mul nsw i64 %1040, %1026
  %1045 = add nsw i64 %1044, 32768
  %1046 = lshr i64 %1045, 16
  %1047 = trunc i64 %1046 to i32
  %1048 = add nsw i32 %1042, %1047
  %1049 = trunc i64 %1040 to i32
  %1050 = add nsw i32 %1043, %1049
  %1051 = sext i32 %1050 to i64
  %1052 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cb, i64 0, i64 %1051
  store i32 %1048, i32* %1052, align 4
  %1053 = add nuw nsw i64 %1040, 1
  %1054 = load i32, i32* %1015, align 4
  %1055 = load i32, i32* %1020, align 4
  %1056 = mul nsw i64 %1053, %1026
  %1057 = add nsw i64 %1056, 32768
  %1058 = lshr i64 %1057, 16
  %1059 = trunc i64 %1058 to i32
  %1060 = add nsw i32 %1054, %1059
  %1061 = trunc i64 %1053 to i32
  %1062 = add nsw i32 %1055, %1061
  %1063 = sext i32 %1062 to i64
  %1064 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cb, i64 0, i64 %1063
  store i32 %1060, i32* %1064, align 4
  %1065 = add nuw nsw i64 %1040, 2
  %1066 = add i64 %1041, -2
  %1067 = icmp eq i64 %1066, 0
  br i1 %1067, label %901, label %1039

1068:                                             ; preds = %944, %1068
  %1069 = phi i64 [ %1081, %1068 ], [ %945, %944 ]
  %1070 = load i32, i32* %926, align 4
  %1071 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cb, i64 0, i64 %1069
  store i32 %1070, i32* %1071, align 4
  %1072 = add nsw i64 %1069, 1
  %1073 = load i32, i32* %926, align 4
  %1074 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cb, i64 0, i64 %1072
  store i32 %1073, i32* %1074, align 4
  %1075 = add nsw i64 %1069, 2
  %1076 = load i32, i32* %926, align 4
  %1077 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cb, i64 0, i64 %1075
  store i32 %1076, i32* %1077, align 4
  %1078 = add nsw i64 %1069, 3
  %1079 = load i32, i32* %926, align 4
  %1080 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cb, i64 0, i64 %1078
  store i32 %1079, i32* %1080, align 4
  %1081 = add nsw i64 %1069, 4
  %1082 = icmp eq i64 %1081, 256
  br i1 %1082, label %1083, label %1068, !llvm.loop !27

1083:                                             ; preds = %944, %1068, %1007, %878, %920
  %1084 = load i32, i32* %387, align 4
  %1085 = icmp eq i32 %1084, 0
  br i1 %1085, label %1288, label %1086

1086:                                             ; preds = %1083
  %1087 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 6, i64 0, i64 0
  %1088 = load i32, i32* %1087, align 4
  %1089 = icmp sgt i32 %1088, 0
  br i1 %1089, label %1090, label %1092

1090:                                             ; preds = %1086
  %1091 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 6, i64 0, i64 1
  br label %1098

1092:                                             ; preds = %1098, %1086
  %1093 = phi i32 [ %1088, %1086 ], [ %1103, %1098 ]
  %1094 = add i32 %1084, -1
  %1095 = icmp sgt i32 %1094, 0
  br i1 %1095, label %1096, label %1125

1096:                                             ; preds = %1092
  %1097 = zext i32 %1094 to i64
  br label %1214

1098:                                             ; preds = %1098, %1090
  %1099 = phi i64 [ 0, %1090 ], [ %1102, %1098 ]
  %1100 = load i32, i32* %1091, align 4
  %1101 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cr, i64 0, i64 %1099
  store i32 %1100, i32* %1101, align 4
  %1102 = add nuw nsw i64 %1099, 1
  %1103 = load i32, i32* %1087, align 4
  %1104 = sext i32 %1103 to i64
  %1105 = icmp slt i64 %1102, %1104
  br i1 %1105, label %1098, label %1092

1106:                                             ; preds = %1244, %1237
  %1107 = phi i64 [ 1, %1237 ], [ %1270, %1244 ]
  %1108 = icmp eq i64 %1240, 0
  br i1 %1108, label %1121, label %1109

1109:                                             ; preds = %1106
  %1110 = load i32, i32* %1220, align 4
  %1111 = load i32, i32* %1225, align 4
  %1112 = mul nsw i64 %1107, %1231
  %1113 = add nsw i64 %1112, 32768
  %1114 = lshr i64 %1113, 16
  %1115 = trunc i64 %1114 to i32
  %1116 = add nsw i32 %1110, %1115
  %1117 = trunc i64 %1107 to i32
  %1118 = add nsw i32 %1111, %1117
  %1119 = sext i32 %1118 to i64
  %1120 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cr, i64 0, i64 %1119
  store i32 %1116, i32* %1120, align 4
  br label %1121

1121:                                             ; preds = %1109, %1106, %1233, %1214
  %1122 = icmp eq i64 %1217, %1097
  br i1 %1122, label %1125, label %1123

1123:                                             ; preds = %1121
  %1124 = load i32, i32* %1223, align 4
  br label %1214

1125:                                             ; preds = %1121, %1092
  %1126 = sext i32 %1094 to i64
  %1127 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 6, i64 %1126, i64 0
  %1128 = load i32, i32* %1127, align 4
  %1129 = icmp slt i32 %1128, 256
  br i1 %1129, label %1130, label %1288

1130:                                             ; preds = %1125
  %1131 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 6, i64 %1126, i64 1
  %1132 = sext i32 %1128 to i64
  %1133 = sub nsw i64 256, %1132
  %1134 = icmp ult i64 %1133, 8
  br i1 %1134, label %1135, label %1152

1135:                                             ; preds = %1212, %1152, %1130
  %1136 = phi i64 [ %1132, %1152 ], [ %1132, %1130 ], [ %1163, %1212 ]
  %1137 = sub nsw i64 0, %1136
  %1138 = sub nsw i64 255, %1136
  %1139 = and i64 %1137, 3
  %1140 = icmp eq i64 %1139, 0
  br i1 %1140, label %1149, label %1141

1141:                                             ; preds = %1135, %1141
  %1142 = phi i64 [ %1146, %1141 ], [ %1136, %1135 ]
  %1143 = phi i64 [ %1147, %1141 ], [ %1139, %1135 ]
  %1144 = load i32, i32* %1131, align 4
  %1145 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cr, i64 0, i64 %1142
  store i32 %1144, i32* %1145, align 4
  %1146 = add nsw i64 %1142, 1
  %1147 = add i64 %1143, -1
  %1148 = icmp eq i64 %1147, 0
  br i1 %1148, label %1149, label %1141, !llvm.loop !28

1149:                                             ; preds = %1141, %1135
  %1150 = phi i64 [ %1136, %1135 ], [ %1146, %1141 ]
  %1151 = icmp ult i64 %1138, 3
  br i1 %1151, label %1288, label %1273

1152:                                             ; preds = %1130
  %1153 = getelementptr [256 x i32], [256 x i32]* @scaling_lut_cr, i64 0, i64 %1132
  %1154 = bitcast i32* %1153 to i8*
  %1155 = shl nsw i64 %1126, 3
  %1156 = add nsw i64 %1155, 213
  %1157 = getelementptr i8, i8* %13, i64 %1156
  %1158 = icmp ugt i8* %1157, %1154
  %1159 = icmp ult i32* %1131, getelementptr inbounds ([256 x i32], [256 x i32]* @scaling_lut_cr, i64 1, i64 0)
  %1160 = and i1 %1158, %1159
  br i1 %1160, label %1135, label %1161

1161:                                             ; preds = %1152
  %1162 = and i64 %1133, -8
  %1163 = add nsw i64 %1162, %1132
  %1164 = add nsw i64 %1162, -8
  %1165 = lshr exact i64 %1164, 3
  %1166 = add nuw nsw i64 %1165, 1
  %1167 = and i64 %1166, 1
  %1168 = icmp eq i64 %1164, 0
  br i1 %1168, label %1198, label %1169

1169:                                             ; preds = %1161
  %1170 = sub nuw nsw i64 %1166, %1167
  %1171 = load i32, i32* %1131, align 4, !alias.scope !29
  %1172 = insertelement <4 x i32> undef, i32 %1171, i32 0
  %1173 = shufflevector <4 x i32> %1172, <4 x i32> undef, <4 x i32> zeroinitializer
  %1174 = insertelement <4 x i32> undef, i32 %1171, i32 0
  %1175 = shufflevector <4 x i32> %1174, <4 x i32> undef, <4 x i32> zeroinitializer
  %1176 = load i32, i32* %1131, align 4, !alias.scope !29
  %1177 = insertelement <4 x i32> undef, i32 %1176, i32 0
  %1178 = shufflevector <4 x i32> %1177, <4 x i32> undef, <4 x i32> zeroinitializer
  %1179 = insertelement <4 x i32> undef, i32 %1176, i32 0
  %1180 = shufflevector <4 x i32> %1179, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %1181

1181:                                             ; preds = %1181, %1169
  %1182 = phi i64 [ 0, %1169 ], [ %1195, %1181 ]
  %1183 = phi i64 [ %1170, %1169 ], [ %1196, %1181 ]
  %1184 = add i64 %1182, %1132
  %1185 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cr, i64 0, i64 %1184
  %1186 = bitcast i32* %1185 to <4 x i32>*
  store <4 x i32> %1173, <4 x i32>* %1186, align 4, !alias.scope !32, !noalias !29
  %1187 = getelementptr inbounds i32, i32* %1185, i64 4
  %1188 = bitcast i32* %1187 to <4 x i32>*
  store <4 x i32> %1175, <4 x i32>* %1188, align 4, !alias.scope !32, !noalias !29
  %1189 = or i64 %1182, 8
  %1190 = add i64 %1189, %1132
  %1191 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cr, i64 0, i64 %1190
  %1192 = bitcast i32* %1191 to <4 x i32>*
  store <4 x i32> %1178, <4 x i32>* %1192, align 4, !alias.scope !32, !noalias !29
  %1193 = getelementptr inbounds i32, i32* %1191, i64 4
  %1194 = bitcast i32* %1193 to <4 x i32>*
  store <4 x i32> %1180, <4 x i32>* %1194, align 4, !alias.scope !32, !noalias !29
  %1195 = add i64 %1182, 16
  %1196 = add i64 %1183, -2
  %1197 = icmp eq i64 %1196, 0
  br i1 %1197, label %1198, label %1181, !llvm.loop !34

1198:                                             ; preds = %1181, %1161
  %1199 = phi i64 [ 0, %1161 ], [ %1195, %1181 ]
  %1200 = icmp eq i64 %1167, 0
  br i1 %1200, label %1212, label %1201

1201:                                             ; preds = %1198
  %1202 = add i64 %1199, %1132
  %1203 = load i32, i32* %1131, align 4, !alias.scope !29
  %1204 = insertelement <4 x i32> undef, i32 %1203, i32 0
  %1205 = shufflevector <4 x i32> %1204, <4 x i32> undef, <4 x i32> zeroinitializer
  %1206 = insertelement <4 x i32> undef, i32 %1203, i32 0
  %1207 = shufflevector <4 x i32> %1206, <4 x i32> undef, <4 x i32> zeroinitializer
  %1208 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cr, i64 0, i64 %1202
  %1209 = bitcast i32* %1208 to <4 x i32>*
  store <4 x i32> %1205, <4 x i32>* %1209, align 4, !alias.scope !32, !noalias !29
  %1210 = getelementptr inbounds i32, i32* %1208, i64 4
  %1211 = bitcast i32* %1210 to <4 x i32>*
  store <4 x i32> %1207, <4 x i32>* %1211, align 4, !alias.scope !32, !noalias !29
  br label %1212

1212:                                             ; preds = %1198, %1201
  %1213 = icmp eq i64 %1133, %1162
  br i1 %1213, label %1288, label %1135

1214:                                             ; preds = %1123, %1096
  %1215 = phi i32 [ %1093, %1096 ], [ %1124, %1123 ]
  %1216 = phi i64 [ 0, %1096 ], [ %1217, %1123 ]
  %1217 = add nuw nsw i64 %1216, 1
  %1218 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 6, i64 %1217, i64 1
  %1219 = load i32, i32* %1218, align 4
  %1220 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 6, i64 %1216, i64 1
  %1221 = load i32, i32* %1220, align 4
  %1222 = sub nsw i32 %1219, %1221
  %1223 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 6, i64 %1217, i64 0
  %1224 = load i32, i32* %1223, align 4
  %1225 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 6, i64 %1216, i64 0
  %1226 = sub i32 %1224, %1215
  %1227 = ashr i32 %1226, 1
  %1228 = add nsw i32 %1227, 65536
  %1229 = sdiv i32 %1228, %1226
  %1230 = mul nsw i32 %1229, %1222
  %1231 = sext i32 %1230 to i64
  %1232 = icmp sgt i32 %1226, 0
  br i1 %1232, label %1233, label %1121

1233:                                             ; preds = %1214
  %1234 = sext i32 %1215 to i64
  %1235 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cr, i64 0, i64 %1234
  store i32 %1221, i32* %1235, align 4
  %1236 = icmp eq i32 %1226, 1
  br i1 %1236, label %1121, label %1237

1237:                                             ; preds = %1233
  %1238 = zext i32 %1226 to i64
  %1239 = add nsw i64 %1238, -1
  %1240 = and i64 %1239, 1
  %1241 = icmp eq i32 %1226, 2
  br i1 %1241, label %1106, label %1242

1242:                                             ; preds = %1237
  %1243 = sub nsw i64 %1239, %1240
  br label %1244

1244:                                             ; preds = %1244, %1242
  %1245 = phi i64 [ 1, %1242 ], [ %1270, %1244 ]
  %1246 = phi i64 [ %1243, %1242 ], [ %1271, %1244 ]
  %1247 = load i32, i32* %1220, align 4
  %1248 = load i32, i32* %1225, align 4
  %1249 = mul nsw i64 %1245, %1231
  %1250 = add nsw i64 %1249, 32768
  %1251 = lshr i64 %1250, 16
  %1252 = trunc i64 %1251 to i32
  %1253 = add nsw i32 %1247, %1252
  %1254 = trunc i64 %1245 to i32
  %1255 = add nsw i32 %1248, %1254
  %1256 = sext i32 %1255 to i64
  %1257 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cr, i64 0, i64 %1256
  store i32 %1253, i32* %1257, align 4
  %1258 = add nuw nsw i64 %1245, 1
  %1259 = load i32, i32* %1220, align 4
  %1260 = load i32, i32* %1225, align 4
  %1261 = mul nsw i64 %1258, %1231
  %1262 = add nsw i64 %1261, 32768
  %1263 = lshr i64 %1262, 16
  %1264 = trunc i64 %1263 to i32
  %1265 = add nsw i32 %1259, %1264
  %1266 = trunc i64 %1258 to i32
  %1267 = add nsw i32 %1260, %1266
  %1268 = sext i32 %1267 to i64
  %1269 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cr, i64 0, i64 %1268
  store i32 %1265, i32* %1269, align 4
  %1270 = add nuw nsw i64 %1245, 2
  %1271 = add i64 %1246, -2
  %1272 = icmp eq i64 %1271, 0
  br i1 %1272, label %1106, label %1244

1273:                                             ; preds = %1149, %1273
  %1274 = phi i64 [ %1286, %1273 ], [ %1150, %1149 ]
  %1275 = load i32, i32* %1131, align 4
  %1276 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cr, i64 0, i64 %1274
  store i32 %1275, i32* %1276, align 4
  %1277 = add nsw i64 %1274, 1
  %1278 = load i32, i32* %1131, align 4
  %1279 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cr, i64 0, i64 %1277
  store i32 %1278, i32* %1279, align 4
  %1280 = add nsw i64 %1274, 2
  %1281 = load i32, i32* %1131, align 4
  %1282 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cr, i64 0, i64 %1280
  store i32 %1281, i32* %1282, align 4
  %1283 = add nsw i64 %1274, 3
  %1284 = load i32, i32* %1131, align 4
  %1285 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cr, i64 0, i64 %1283
  store i32 %1284, i32* %1285, align 4
  %1286 = add nsw i64 %1274, 4
  %1287 = icmp eq i64 %1286, 256
  br i1 %1287, label %1288, label %1273, !llvm.loop !35

1288:                                             ; preds = %1149, %1273, %1212, %1125, %1083, %877
  %1289 = icmp sgt i32 %4, 1
  br i1 %1289, label %1290, label %1457

1290:                                             ; preds = %1288
  %1291 = lshr i32 %4, 1
  %1292 = sdiv i32 %5, 2
  %1293 = icmp sgt i32 %5, 1
  %1294 = icmp ne i32 %31, 0
  %1295 = icmp eq i32 %8, 0
  %1296 = bitcast i8* %1 to i16*
  %1297 = shl i32 %6, 1
  %1298 = bitcast i8* %2 to i16*
  %1299 = sub nsw i32 1, %9
  %1300 = sub nsw i32 1, %10
  %1301 = bitcast i8* %3 to i16*
  %1302 = sub nsw i32 2, %9
  %1303 = sub nsw i32 2, %10
  %1304 = icmp ugt i32 %10, 1
  %1305 = sext i32 %29 to i64
  %1306 = getelementptr inbounds i8, i8* %168, i64 256
  %1307 = icmp ugt i32 %9, 1
  %1308 = getelementptr inbounds i8, i8* %184, i64 128
  %1309 = bitcast i8* %1308 to i32*
  %1310 = sext i32 %1292 to i64
  %1311 = sext i32 %5 to i64
  %1312 = sext i32 %4 to i64
  %1313 = zext i32 %1291 to i64
  %1314 = getelementptr inbounds i8, i8* %168, i64 8
  %1315 = bitcast i8* %1314 to i32*
  %1316 = getelementptr inbounds i8, i8* %168, i64 4
  %1317 = bitcast i8* %1316 to i32*
  %1318 = getelementptr inbounds i8, i8* %168, i64 12
  %1319 = bitcast i8* %1318 to i32*
  %1320 = bitcast i8* %1306 to i64*
  %1321 = getelementptr inbounds i8, i8* %168, i64 264
  %1322 = bitcast i8* %1321 to i64*
  %1323 = getelementptr i8, i8* %166, i64 4
  %1324 = getelementptr i8, i8* %190, i64 4
  %1325 = getelementptr i8, i8* %166, i64 4
  %1326 = shl nsw i64 %160, 2
  %1327 = getelementptr i8, i8* %166, i64 %1326
  %1328 = add nsw i64 %1326, 4
  %1329 = getelementptr i8, i8* %166, i64 %1328
  %1330 = getelementptr i8, i8* %190, i64 4
  %1331 = shl nsw i64 %1305, 2
  %1332 = getelementptr i8, i8* %190, i64 %1331
  %1333 = add nuw nsw i64 %1331, 4
  %1334 = getelementptr i8, i8* %190, i64 %1333
  %1335 = getelementptr i8, i8* %164, i64 4
  %1336 = getelementptr i8, i8* %188, i64 4
  %1337 = getelementptr i8, i8* %164, i64 4
  %1338 = shl nsw i64 %160, 2
  %1339 = getelementptr i8, i8* %164, i64 %1338
  %1340 = add nsw i64 %1338, 4
  %1341 = getelementptr i8, i8* %164, i64 %1340
  %1342 = getelementptr i8, i8* %188, i64 4
  %1343 = shl nsw i64 %1305, 2
  %1344 = getelementptr i8, i8* %188, i64 %1343
  %1345 = add nuw nsw i64 %1343, 4
  %1346 = getelementptr i8, i8* %188, i64 %1345
  %1347 = getelementptr i8, i8* %158, i64 4
  %1348 = shl nsw i64 %156, 2
  %1349 = getelementptr i8, i8* %158, i64 %1348
  %1350 = add nsw i64 %1348, 4
  %1351 = getelementptr i8, i8* %158, i64 %1350
  %1352 = getelementptr i8, i8* %184, i64 2988
  %1353 = getelementptr i8, i8* %184, i64 2992
  %1354 = getelementptr i8, i8* %184, i64 3316
  %1355 = getelementptr i8, i8* %184, i64 3320
  %1356 = add nsw i32 %23, -1
  %1357 = zext i32 %1356 to i64
  %1358 = add nuw nsw i64 %1357, 1
  %1359 = shl nsw i64 %173, 6
  %1360 = add nsw i32 %23, -1
  %1361 = zext i32 %1360 to i64
  %1362 = shl nuw nsw i64 %1361, 2
  %1363 = add nuw nsw i64 %1362, 4
  %1364 = getelementptr i8, i8* %182, i64 %1363
  %1365 = add nsw i32 %23, -1
  %1366 = zext i32 %1365 to i64
  %1367 = add nuw nsw i64 %1366, 1
  %1368 = shl nsw i64 %173, 6
  %1369 = add nsw i32 %23, -1
  %1370 = zext i32 %1369 to i64
  %1371 = shl nuw nsw i64 %1370, 2
  %1372 = add nuw nsw i64 %1371, 4
  %1373 = shl nsw i64 %160, 2
  %1374 = add nsw i64 %1373, %1371
  %1375 = add nsw i64 %1374, 4
  %1376 = getelementptr i8, i8* %182, i64 %1372
  %1377 = shl nsw i64 %173, 2
  %1378 = getelementptr i8, i8* %182, i64 %1377
  %1379 = add nsw i64 %1377, %1371
  %1380 = add nsw i64 %1379, 4
  %1381 = getelementptr i8, i8* %182, i64 %1380
  %1382 = add nsw i32 %23, -1
  %1383 = zext i32 %1382 to i64
  %1384 = add nuw nsw i64 %1383, 1
  %1385 = shl nsw i64 %173, 6
  %1386 = add nsw i32 %23, -1
  %1387 = zext i32 %1386 to i64
  %1388 = shl nuw nsw i64 %1387, 2
  %1389 = add nuw nsw i64 %1388, 4
  %1390 = getelementptr i8, i8* %176, i64 %1389
  %1391 = add nsw i32 %23, -1
  %1392 = zext i32 %1391 to i64
  %1393 = add nuw nsw i64 %1392, 1
  %1394 = shl nsw i64 %173, 6
  %1395 = add nsw i32 %23, -1
  %1396 = zext i32 %1395 to i64
  %1397 = shl nuw nsw i64 %1396, 2
  %1398 = add nuw nsw i64 %1397, 4
  %1399 = shl nsw i64 %160, 2
  %1400 = add nsw i64 %1399, %1397
  %1401 = add nsw i64 %1400, 4
  %1402 = getelementptr i8, i8* %176, i64 %1398
  %1403 = shl nsw i64 %173, 2
  %1404 = getelementptr i8, i8* %176, i64 %1403
  %1405 = add nsw i64 %1403, %1397
  %1406 = add nsw i64 %1405, 4
  %1407 = getelementptr i8, i8* %176, i64 %1406
  %1408 = and i64 %1393, 8589934588
  %1409 = add nsw i64 %1408, -4
  %1410 = lshr exact i64 %1409, 2
  %1411 = add nuw nsw i64 %1410, 1
  %1412 = add nsw i32 %18, -1
  %1413 = icmp ult i64 %1393, 4
  %1414 = and i64 %1393, 8589934588
  %1415 = trunc i64 %1414 to i32
  %1416 = sub i32 %23, %1415
  %1417 = getelementptr i32, i32* %177, i64 %1414
  %1418 = icmp eq i64 %1393, %1414
  %1419 = icmp ult i64 %1384, 4
  %1420 = and i64 %1384, 8589934588
  %1421 = trunc i64 %1420 to i32
  %1422 = sub i32 %23, %1421
  %1423 = getelementptr i32, i32* %177, i64 %1420
  %1424 = and i64 %1411, 1
  %1425 = icmp eq i64 %1409, 0
  %1426 = sub nuw nsw i64 %1411, %1424
  %1427 = icmp eq i64 %1424, 0
  %1428 = icmp eq i64 %1384, %1420
  %1429 = icmp ult i64 %1367, 4
  %1430 = and i64 %1367, 8589934588
  %1431 = trunc i64 %1430 to i32
  %1432 = sub i32 %23, %1431
  %1433 = getelementptr i32, i32* %183, i64 %1430
  %1434 = icmp eq i64 %1367, %1430
  %1435 = icmp ult i64 %1358, 4
  %1436 = and i64 %1358, 8589934588
  %1437 = trunc i64 %1436 to i32
  %1438 = sub i32 %23, %1437
  %1439 = getelementptr i32, i32* %183, i64 %1436
  %1440 = and i64 %1411, 1
  %1441 = icmp eq i64 %1409, 0
  %1442 = sub nuw nsw i64 %1411, %1440
  %1443 = icmp eq i64 %1440, 0
  %1444 = icmp eq i64 %1358, %1436
  %1445 = and i32 %18, 3
  %1446 = icmp eq i32 %1445, 0
  %1447 = icmp ult i32 %1412, 3
  %1448 = and i32 %18, 3
  %1449 = icmp eq i32 %1448, 0
  %1450 = icmp ult i32 %1412, 3
  %1451 = and i32 %18, 3
  %1452 = icmp eq i32 %1451, 0
  %1453 = icmp ult i32 %1412, 3
  %1454 = and i32 %18, 3
  %1455 = icmp eq i32 %1454, 0
  %1456 = icmp ult i32 %1412, 3
  br label %1488

1457:                                             ; preds = %1583, %1288
  %1458 = load i32, i32* %39, align 4
  %1459 = shl i32 %1458, 1
  %1460 = add i32 %1458, 1
  %1461 = mul i32 %1459, %1460
  %1462 = load i32, i32* %44, align 4
  %1463 = icmp sgt i32 %1462, 0
  %1464 = zext i1 %1463 to i32
  %1465 = or i32 %1461, %1464
  %1466 = icmp sgt i32 %1461, 0
  br i1 %1466, label %1467, label %1469

1467:                                             ; preds = %1457
  %1468 = zext i32 %1461 to i64
  br label %1473

1469:                                             ; preds = %1473, %1457
  tail call void @aom_free(i8* %51) #6
  %1470 = icmp sgt i32 %1465, 0
  br i1 %1470, label %1471, label %1487

1471:                                             ; preds = %1469
  %1472 = zext i32 %1465 to i64
  br label %1480

1473:                                             ; preds = %1473, %1467
  %1474 = phi i64 [ 0, %1467 ], [ %1478, %1473 ]
  %1475 = getelementptr inbounds i32*, i32** %52, i64 %1474
  %1476 = bitcast i32** %1475 to i8**
  %1477 = load i8*, i8** %1476, align 8
  tail call void @aom_free(i8* %1477) #6
  %1478 = add nuw nsw i64 %1474, 1
  %1479 = icmp eq i64 %1478, %1468
  br i1 %1479, label %1469, label %1473

1480:                                             ; preds = %1480, %1471
  %1481 = phi i64 [ 0, %1471 ], [ %1485, %1480 ]
  %1482 = getelementptr inbounds i32*, i32** %60, i64 %1481
  %1483 = bitcast i32** %1482 to i8**
  %1484 = load i8*, i8** %1483, align 8
  tail call void @aom_free(i8* %1484) #6
  %1485 = add nuw nsw i64 %1481, 1
  %1486 = icmp eq i64 %1485, %1472
  br i1 %1486, label %1487, label %1480

1487:                                             ; preds = %1480, %1469
  tail call void @aom_free(i8* %59) #6
  tail call void @aom_free(i8* %158) #6
  tail call void @aom_free(i8* %164) #6
  tail call void @aom_free(i8* %166) #6
  tail call void @aom_free(i8* %168) #6
  tail call void @aom_free(i8* %176) #6
  tail call void @aom_free(i8* %182) #6
  tail call void @aom_free(i8* %184) #6
  tail call void @aom_free(i8* %188) #6
  tail call void @aom_free(i8* %190) #6
  br label %3477

1488:                                             ; preds = %1290, %1583
  %1489 = phi i64 [ 0, %1290 ], [ %1586, %1583 ]
  %1490 = phi i64 [ 0, %1290 ], [ %1584, %1583 ]
  %1491 = mul nsw i64 %1489, -32
  %1492 = add i64 %1491, %1312
  %1493 = icmp slt i64 %1492, 34
  %1494 = select i1 %1493, i64 %1492, i64 34
  %1495 = trunc i64 %1494 to i32
  %1496 = add nsw i32 %1495, -1
  %1497 = shl nuw i64 %1490, 1
  %1498 = load i16, i16* %14, align 4
  %1499 = lshr exact i64 %1490, 4
  %1500 = trunc i64 %1499 to i16
  %1501 = mul i16 %1500, 9472
  %1502 = add i16 %1501, -19968
  %1503 = mul i16 %1500, 173
  %1504 = add i16 %1503, 105
  %1505 = and i16 %1504, 255
  %1506 = or i16 %1505, %1502
  %1507 = xor i16 %1506, %1498
  store i16 %1507, i16* @random_register, align 2
  br i1 %1293, label %1508, label %1583

1508:                                             ; preds = %1488
  %1509 = sub nsw i64 %1312, %1497
  %1510 = trunc i64 %1509 to i32
  %1511 = icmp slt i64 %1509, 34
  %1512 = select i1 %1511, i64 %1509, i64 34
  %1513 = trunc i64 %1512 to i32
  %1514 = icmp eq i32 %1513, 0
  %1515 = ashr i32 %1510, %9
  %1516 = icmp ne i64 %1490, 0
  %1517 = zext i1 %1516 to i32
  %1518 = trunc i64 %1490 to i32
  %1519 = or i32 %1518, %1517
  %1520 = mul i32 %1297, %1519
  %1521 = sext i32 %1520 to i64
  %1522 = getelementptr inbounds i16, i16* %1296, i64 %1521
  %1523 = shl i32 %1519, %1299
  %1524 = mul nsw i32 %1523, %7
  %1525 = sext i32 %1524 to i64
  %1526 = getelementptr inbounds i16, i16* %1298, i64 %1525
  %1527 = getelementptr inbounds i16, i16* %1301, i64 %1525
  %1528 = shl nuw nsw i32 %1517, 2
  %1529 = zext i32 %1528 to i64
  %1530 = getelementptr inbounds i32, i32* %169, i64 %1529
  %1531 = select i1 %1516, i32 %1302, i32 0
  %1532 = mul nsw i32 %1531, %1303
  %1533 = sext i32 %1532 to i64
  %1534 = getelementptr inbounds i32, i32* %177, i64 %1533
  %1535 = getelementptr inbounds i32, i32* %183, i64 %1533
  %1536 = sub nsw i64 %1313, %1490
  %1537 = icmp slt i64 %1536, 16
  %1538 = select i1 %1537, i64 %1536, i64 16
  %1539 = trunc i64 %1538 to i32
  %1540 = sub nsw i32 %1539, %1517
  %1541 = getelementptr inbounds i8, i8* %1, i64 %1521
  %1542 = getelementptr inbounds i8, i8* %2, i64 %1525
  %1543 = getelementptr inbounds i8, i8* %3, i64 %1525
  %1544 = and i1 %1294, %1516
  %1545 = mul nsw i64 %1497, %156
  %1546 = getelementptr inbounds i16, i16* %1296, i64 %1545
  %1547 = shl i32 %1518, %1299
  %1548 = mul nsw i32 %1547, %7
  %1549 = sext i32 %1548 to i64
  %1550 = getelementptr inbounds i16, i16* %1298, i64 %1549
  %1551 = getelementptr inbounds i16, i16* %1301, i64 %1549
  %1552 = zext i1 %1544 to i32
  %1553 = getelementptr inbounds i8, i8* %1, i64 %1545
  %1554 = getelementptr inbounds i8, i8* %2, i64 %1549
  %1555 = getelementptr inbounds i8, i8* %3, i64 %1549
  %1556 = or i32 %1552, %1518
  %1557 = mul i32 %1297, %1556
  %1558 = sext i32 %1557 to i64
  %1559 = getelementptr inbounds i16, i16* %1296, i64 %1558
  %1560 = shl i32 %1556, %1299
  %1561 = mul nsw i32 %1560, %7
  %1562 = sext i32 %1561 to i64
  %1563 = getelementptr inbounds i16, i16* %1298, i64 %1562
  %1564 = getelementptr inbounds i16, i16* %1301, i64 %1562
  %1565 = shl nuw nsw i32 %1552, 1
  %1566 = shl i32 %1552, %1299
  %1567 = sub nsw i32 %1539, %1552
  %1568 = or i32 %1552, %1518
  %1569 = mul i32 %1297, %1568
  %1570 = sext i32 %1569 to i64
  %1571 = getelementptr inbounds i8, i8* %1, i64 %1570
  %1572 = shl i32 %1568, %1299
  %1573 = mul nsw i32 %1572, %7
  %1574 = sext i32 %1573 to i64
  %1575 = getelementptr inbounds i8, i8* %2, i64 %1574
  %1576 = getelementptr inbounds i8, i8* %3, i64 %1574
  %1577 = shl nuw nsw i32 %1552, 1
  %1578 = shl i32 %1552, %1299
  %1579 = sub nsw i32 %1539, %1552
  %1580 = and i32 %1495, 7
  %1581 = icmp eq i32 %1580, 0
  %1582 = icmp ult i32 %1496, 7
  br label %1587

1583:                                             ; preds = %3471, %1488
  %1584 = add nuw nsw i64 %1490, 16
  %1585 = icmp ult i64 %1584, %1313
  %1586 = add i64 %1489, 1
  br i1 %1585, label %1488, label %1457

1587:                                             ; preds = %3474, %1508
  %1588 = phi i64 [ %3476, %3474 ], [ 0, %1508 ]
  %1589 = phi i16 [ %3475, %3474 ], [ %1507, %1508 ]
  %1590 = phi i64 [ %3472, %3474 ], [ 0, %1508 ]
  %1591 = mul i64 %1394, %1588
  %1592 = getelementptr i8, i8* %164, i64 %1591
  %1593 = add i64 %1398, %1591
  %1594 = getelementptr i8, i8* %164, i64 %1593
  %1595 = add i64 %1399, %1591
  %1596 = getelementptr i8, i8* %164, i64 %1595
  %1597 = add i64 %1401, %1591
  %1598 = getelementptr i8, i8* %164, i64 %1597
  %1599 = mul i64 %1385, %1588
  %1600 = getelementptr i8, i8* %164, i64 %1599
  %1601 = add i64 %1389, %1599
  %1602 = getelementptr i8, i8* %164, i64 %1601
  %1603 = mul i64 %1368, %1588
  %1604 = getelementptr i8, i8* %166, i64 %1603
  %1605 = add i64 %1372, %1603
  %1606 = getelementptr i8, i8* %166, i64 %1605
  %1607 = add i64 %1373, %1603
  %1608 = getelementptr i8, i8* %166, i64 %1607
  %1609 = add i64 %1375, %1603
  %1610 = getelementptr i8, i8* %166, i64 %1609
  %1611 = mul i64 %1359, %1588
  %1612 = getelementptr i8, i8* %166, i64 %1611
  %1613 = add i64 %1363, %1611
  %1614 = getelementptr i8, i8* %166, i64 %1613
  %1615 = zext i16 %1589 to i32
  %1616 = lshr i32 %1615, 1
  %1617 = xor i32 %1616, %1615
  %1618 = lshr i32 %1615, 3
  %1619 = xor i32 %1617, %1618
  %1620 = lshr i32 %1615, 12
  %1621 = xor i32 %1619, %1620
  %1622 = shl nuw nsw i32 %1621, 15
  %1623 = or i32 %1622, %1616
  %1624 = trunc i32 %1623 to i16
  store i16 %1624, i16* @random_register, align 2
  %1625 = lshr i32 %1615, 9
  %1626 = lshr i32 %1623, 12
  %1627 = and i32 %1626, 15
  %1628 = and i32 %1625, 15
  %1629 = shl nuw nsw i32 %1628, 1
  %1630 = add nuw nsw i32 %1629, 9
  %1631 = shl nuw nsw i32 %1627, 1
  %1632 = add nuw nsw i32 %1631, 9
  %1633 = mul nsw i32 %1628, %18
  %1634 = add nsw i32 %1633, %20
  %1635 = mul nsw i32 %1627, %23
  %1636 = add nsw i32 %1635, %25
  %1637 = icmp ne i64 %1590, 0
  %1638 = and i1 %1294, %1637
  br i1 %1638, label %1639, label %1711

1639:                                             ; preds = %1587
  br i1 %1514, label %1680, label %1640

1640:                                             ; preds = %1639
  %1641 = mul nuw nsw i32 %1630, 82
  %1642 = zext i32 %1641 to i64
  %1643 = getelementptr inbounds i32, i32* %185, i64 %1642
  %1644 = zext i32 %1632 to i64
  %1645 = getelementptr inbounds i32, i32* %1643, i64 %1644
  %1646 = load i32, i32* @grain_min, align 4
  %1647 = load i32, i32* @grain_max, align 4
  br label %1648

1648:                                             ; preds = %1648, %1640
  %1649 = phi i32 [ %1513, %1640 ], [ %1678, %1648 ]
  %1650 = phi i32* [ %169, %1640 ], [ %1676, %1648 ]
  %1651 = phi i32* [ %1645, %1640 ], [ %1677, %1648 ]
  %1652 = load i32, i32* %1650, align 4
  %1653 = mul nsw i32 %1652, 27
  %1654 = load i32, i32* %1651, align 4
  %1655 = mul nsw i32 %1654, 17
  %1656 = add i32 %1653, 16
  %1657 = add i32 %1656, %1655
  %1658 = ashr i32 %1657, 5
  %1659 = icmp slt i32 %1658, %1646
  %1660 = icmp sgt i32 %1658, %1647
  %1661 = select i1 %1660, i32 %1647, i32 %1658
  %1662 = select i1 %1659, i32 %1646, i32 %1661
  store i32 %1662, i32* %1650, align 4
  %1663 = getelementptr inbounds i32, i32* %1650, i64 1
  %1664 = load i32, i32* %1663, align 4
  %1665 = mul nsw i32 %1664, 17
  %1666 = getelementptr inbounds i32, i32* %1651, i64 1
  %1667 = load i32, i32* %1666, align 4
  %1668 = mul nsw i32 %1667, 27
  %1669 = add i32 %1665, 16
  %1670 = add i32 %1669, %1668
  %1671 = ashr i32 %1670, 5
  %1672 = icmp slt i32 %1671, %1646
  %1673 = icmp sgt i32 %1671, %1647
  %1674 = select i1 %1673, i32 %1647, i32 %1671
  %1675 = select i1 %1672, i32 %1646, i32 %1674
  store i32 %1675, i32* %1663, align 4
  %1676 = getelementptr inbounds i32, i32* %1650, i64 2
  %1677 = getelementptr inbounds i32, i32* %1651, i64 82
  %1678 = add nsw i32 %1649, -1
  %1679 = icmp eq i32 %1678, 0
  br i1 %1679, label %1680, label %1648

1680:                                             ; preds = %1648, %1639
  %1681 = mul nsw i32 %1634, %29
  %1682 = sext i32 %1681 to i64
  %1683 = getelementptr inbounds i32, i32* %189, i64 %1682
  %1684 = sext i32 %1636 to i64
  %1685 = getelementptr inbounds i32, i32* %1683, i64 %1684
  %1686 = load i32, i32* @chroma_subblock_size_y, align 4
  %1687 = add nsw i32 %1686, %18
  %1688 = icmp slt i32 %1687, %1515
  %1689 = select i1 %1688, i32 %1687, i32 %1515
  tail call fastcc void @ver_boundary_overlap(i32* %177, i32 %23, i32* %1685, i32 %29, i32* %177, i32 %23, i32 %23, i32 %1689)
  %1690 = getelementptr inbounds i32, i32* %191, i64 %1682
  %1691 = getelementptr inbounds i32, i32* %1690, i64 %1684
  %1692 = load i32, i32* @chroma_subblock_size_y, align 4
  %1693 = add nsw i32 %1692, %18
  %1694 = icmp slt i32 %1693, %1515
  %1695 = select i1 %1694, i32 %1693, i32 %1515
  tail call fastcc void @ver_boundary_overlap(i32* %183, i32 %23, i32* %1691, i32 %29, i32* %183, i32 %23, i32 %23, i32 %1695)
  %1696 = shl nuw i64 %1590, 1
  br i1 %1295, label %1704, label %1697

1697:                                             ; preds = %1680
  %1698 = getelementptr inbounds i16, i16* %1522, i64 %1696
  %1699 = trunc i64 %1590 to i32
  %1700 = shl i32 %1699, %1300
  %1701 = sext i32 %1700 to i64
  %1702 = getelementptr inbounds i16, i16* %1526, i64 %1701
  %1703 = getelementptr inbounds i16, i16* %1527, i64 %1701
  tail call fastcc void @add_noise_to_block_hbd(%struct.aom_film_grain_t* %0, i16* %1698, i16* %1702, i16* %1703, i32 %6, i32 %7, i32* %1530, i32* %1534, i32* %1535, i32 2, i32 %1303, i32 %1540, i32 1, i32 %33, i32 %9, i32 %10, i32 %11)
  br label %1711

1704:                                             ; preds = %1680
  %1705 = getelementptr inbounds i8, i8* %1541, i64 %1696
  %1706 = trunc i64 %1590 to i32
  %1707 = shl i32 %1706, %1300
  %1708 = sext i32 %1707 to i64
  %1709 = getelementptr inbounds i8, i8* %1542, i64 %1708
  %1710 = getelementptr inbounds i8, i8* %1543, i64 %1708
  tail call fastcc void @add_noise_to_block(%struct.aom_film_grain_t* %0, i8* %1705, i8* %1709, i8* %1710, i32 %6, i32 %7, i32* %1530, i32* %1534, i32* %1535, i32 2, i32 %1303, i32 %1540, i32 1, i32 %33, i32 %9, i32 %10, i32 %11)
  br label %1711

1711:                                             ; preds = %1697, %1704, %1587
  br i1 %1544, label %1712, label %3022

1712:                                             ; preds = %1711
  br i1 %1637, label %1713, label %2229

1713:                                             ; preds = %1712
  %1714 = shl nuw i64 %1590, 1
  %1715 = getelementptr inbounds i32, i32* %159, i64 %1714
  %1716 = load i32, i32* @grain_min, align 4
  %1717 = load i32, i32* @grain_max, align 4
  %1718 = load i32, i32* %1715, align 4
  %1719 = mul nsw i32 %1718, 27
  %1720 = load i32, i32* %169, align 4
  %1721 = mul nsw i32 %1720, 17
  %1722 = add i32 %1719, 16
  %1723 = add i32 %1722, %1721
  %1724 = ashr i32 %1723, 5
  %1725 = icmp slt i32 %1724, %1716
  %1726 = icmp sgt i32 %1724, %1717
  %1727 = select i1 %1726, i32 %1717, i32 %1724
  %1728 = select i1 %1725, i32 %1716, i32 %1727
  store i32 %1728, i32* %1715, align 4
  %1729 = getelementptr inbounds i32, i32* %1715, i64 %156
  %1730 = load i32, i32* %1729, align 4
  %1731 = mul nsw i32 %1730, 17
  %1732 = load i32, i32* %1315, align 4
  %1733 = mul nsw i32 %1732, 27
  %1734 = add i32 %1731, 16
  %1735 = add i32 %1734, %1733
  %1736 = ashr i32 %1735, 5
  %1737 = icmp slt i32 %1736, %1716
  %1738 = icmp sgt i32 %1736, %1717
  %1739 = select i1 %1738, i32 %1717, i32 %1736
  %1740 = select i1 %1737, i32 %1716, i32 %1739
  store i32 %1740, i32* %1729, align 4
  %1741 = getelementptr inbounds i32, i32* %1715, i64 1
  %1742 = load i32, i32* %1741, align 4
  %1743 = mul nsw i32 %1742, 27
  %1744 = load i32, i32* %1317, align 4
  %1745 = mul nsw i32 %1744, 17
  %1746 = add i32 %1743, 16
  %1747 = add i32 %1746, %1745
  %1748 = ashr i32 %1747, 5
  %1749 = icmp slt i32 %1748, %1716
  %1750 = icmp sgt i32 %1748, %1717
  %1751 = select i1 %1750, i32 %1717, i32 %1748
  %1752 = select i1 %1749, i32 %1716, i32 %1751
  store i32 %1752, i32* %1741, align 4
  %1753 = getelementptr inbounds i32, i32* %1741, i64 %156
  %1754 = load i32, i32* %1753, align 4
  %1755 = mul nsw i32 %1754, 17
  %1756 = load i32, i32* %1319, align 4
  %1757 = mul nsw i32 %1756, 27
  %1758 = add i32 %1755, 16
  %1759 = add i32 %1758, %1757
  %1760 = ashr i32 %1759, 5
  %1761 = icmp slt i32 %1760, %1716
  %1762 = icmp sgt i32 %1760, %1717
  %1763 = select i1 %1762, i32 %1717, i32 %1760
  %1764 = select i1 %1761, i32 %1716, i32 %1763
  store i32 %1764, i32* %1753, align 4
  %1765 = mul nsw i64 %1590, %173
  %1766 = getelementptr inbounds i32, i32* %165, i64 %1765
  switch i32 %18, label %1997 [
    i32 1, label %1836
    i32 2, label %1767
  ]

1767:                                             ; preds = %1713
  br i1 %1304, label %2229, label %1768

1768:                                             ; preds = %1767
  br i1 %1413, label %1769, label %1773

1769:                                             ; preds = %1835, %1773, %1768
  %1770 = phi i32* [ %1766, %1773 ], [ %1766, %1768 ], [ %1794, %1835 ]
  %1771 = phi i32 [ %23, %1773 ], [ %23, %1768 ], [ %1416, %1835 ]
  %1772 = phi i32* [ %177, %1773 ], [ %177, %1768 ], [ %1417, %1835 ]
  br label %1965

1773:                                             ; preds = %1768
  %1774 = icmp ult i8* %1592, %1598
  %1775 = icmp ult i8* %1596, %1594
  %1776 = and i1 %1774, %1775
  %1777 = icmp ult i8* %1592, %1402
  %1778 = icmp ult i8* %176, %1594
  %1779 = and i1 %1777, %1778
  %1780 = or i1 %1776, %1779
  %1781 = icmp ult i8* %1592, %1407
  %1782 = icmp ult i8* %1404, %1594
  %1783 = and i1 %1781, %1782
  %1784 = or i1 %1780, %1783
  %1785 = icmp ult i8* %1596, %1402
  %1786 = icmp ult i8* %176, %1598
  %1787 = and i1 %1785, %1786
  %1788 = or i1 %1784, %1787
  %1789 = icmp ult i8* %1596, %1407
  %1790 = icmp ult i8* %1404, %1598
  %1791 = and i1 %1789, %1790
  %1792 = or i1 %1788, %1791
  br i1 %1792, label %1769, label %1793

1793:                                             ; preds = %1773
  %1794 = getelementptr i32, i32* %1766, i64 %1414
  %1795 = insertelement <4 x i32> undef, i32 %1716, i32 0
  %1796 = shufflevector <4 x i32> %1795, <4 x i32> undef, <4 x i32> zeroinitializer
  %1797 = insertelement <4 x i32> undef, i32 %1717, i32 0
  %1798 = shufflevector <4 x i32> %1797, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %1799

1799:                                             ; preds = %1799, %1793
  %1800 = phi i64 [ 0, %1793 ], [ %1833, %1799 ]
  %1801 = getelementptr i32, i32* %1766, i64 %1800
  %1802 = getelementptr i32, i32* %177, i64 %1800
  %1803 = bitcast i32* %1801 to <4 x i32>*
  %1804 = load <4 x i32>, <4 x i32>* %1803, align 4, !alias.scope !36, !noalias !39
  %1805 = mul nsw <4 x i32> %1804, <i32 27, i32 27, i32 27, i32 27>
  %1806 = bitcast i32* %1802 to <4 x i32>*
  %1807 = load <4 x i32>, <4 x i32>* %1806, align 4, !alias.scope !43
  %1808 = mul nsw <4 x i32> %1807, <i32 17, i32 17, i32 17, i32 17>
  %1809 = add <4 x i32> %1805, <i32 16, i32 16, i32 16, i32 16>
  %1810 = add <4 x i32> %1809, %1808
  %1811 = ashr <4 x i32> %1810, <i32 5, i32 5, i32 5, i32 5>
  %1812 = icmp slt <4 x i32> %1811, %1796
  %1813 = icmp sgt <4 x i32> %1811, %1798
  %1814 = select <4 x i1> %1813, <4 x i32> %1798, <4 x i32> %1811
  %1815 = select <4 x i1> %1812, <4 x i32> %1796, <4 x i32> %1814
  %1816 = bitcast i32* %1801 to <4 x i32>*
  store <4 x i32> %1815, <4 x i32>* %1816, align 4, !alias.scope !36, !noalias !39
  %1817 = getelementptr inbounds i32, i32* %1801, i64 %160
  %1818 = bitcast i32* %1817 to <4 x i32>*
  %1819 = load <4 x i32>, <4 x i32>* %1818, align 4, !alias.scope !44, !noalias !45
  %1820 = mul nsw <4 x i32> %1819, <i32 17, i32 17, i32 17, i32 17>
  %1821 = getelementptr inbounds i32, i32* %1802, i64 %173
  %1822 = bitcast i32* %1821 to <4 x i32>*
  %1823 = load <4 x i32>, <4 x i32>* %1822, align 4, !alias.scope !46
  %1824 = mul nsw <4 x i32> %1823, <i32 27, i32 27, i32 27, i32 27>
  %1825 = add <4 x i32> %1820, <i32 16, i32 16, i32 16, i32 16>
  %1826 = add <4 x i32> %1825, %1824
  %1827 = ashr <4 x i32> %1826, <i32 5, i32 5, i32 5, i32 5>
  %1828 = icmp slt <4 x i32> %1827, %1796
  %1829 = icmp sgt <4 x i32> %1827, %1798
  %1830 = select <4 x i1> %1829, <4 x i32> %1798, <4 x i32> %1827
  %1831 = select <4 x i1> %1828, <4 x i32> %1796, <4 x i32> %1830
  %1832 = bitcast i32* %1817 to <4 x i32>*
  store <4 x i32> %1831, <4 x i32>* %1832, align 4, !alias.scope !44, !noalias !45
  %1833 = add i64 %1800, 4
  %1834 = icmp eq i64 %1833, %1414
  br i1 %1834, label %1835, label %1799, !llvm.loop !47

1835:                                             ; preds = %1799
  br i1 %1418, label %1997, label %1769

1836:                                             ; preds = %1713
  br i1 %1304, label %2229, label %1837

1837:                                             ; preds = %1836
  br i1 %1419, label %1907, label %1838

1838:                                             ; preds = %1837
  %1839 = icmp ult i8* %1600, %1390
  %1840 = icmp ult i8* %176, %1602
  %1841 = and i1 %1839, %1840
  br i1 %1841, label %1907, label %1842

1842:                                             ; preds = %1838
  %1843 = getelementptr i32, i32* %1766, i64 %1420
  %1844 = insertelement <4 x i32> undef, i32 %1716, i32 0
  %1845 = shufflevector <4 x i32> %1844, <4 x i32> undef, <4 x i32> zeroinitializer
  %1846 = insertelement <4 x i32> undef, i32 %1717, i32 0
  %1847 = shufflevector <4 x i32> %1846, <4 x i32> undef, <4 x i32> zeroinitializer
  br i1 %1425, label %1887, label %1848

1848:                                             ; preds = %1842, %1848
  %1849 = phi i64 [ %1884, %1848 ], [ 0, %1842 ]
  %1850 = phi i64 [ %1885, %1848 ], [ %1426, %1842 ]
  %1851 = getelementptr i32, i32* %1766, i64 %1849
  %1852 = getelementptr i32, i32* %177, i64 %1849
  %1853 = bitcast i32* %1851 to <4 x i32>*
  %1854 = load <4 x i32>, <4 x i32>* %1853, align 4, !alias.scope !48, !noalias !51
  %1855 = mul nsw <4 x i32> %1854, <i32 23, i32 23, i32 23, i32 23>
  %1856 = bitcast i32* %1852 to <4 x i32>*
  %1857 = load <4 x i32>, <4 x i32>* %1856, align 4, !alias.scope !51
  %1858 = mul nsw <4 x i32> %1857, <i32 22, i32 22, i32 22, i32 22>
  %1859 = add <4 x i32> %1855, <i32 16, i32 16, i32 16, i32 16>
  %1860 = add <4 x i32> %1859, %1858
  %1861 = ashr <4 x i32> %1860, <i32 5, i32 5, i32 5, i32 5>
  %1862 = icmp slt <4 x i32> %1861, %1845
  %1863 = icmp sgt <4 x i32> %1861, %1847
  %1864 = select <4 x i1> %1863, <4 x i32> %1847, <4 x i32> %1861
  %1865 = select <4 x i1> %1862, <4 x i32> %1845, <4 x i32> %1864
  %1866 = bitcast i32* %1851 to <4 x i32>*
  store <4 x i32> %1865, <4 x i32>* %1866, align 4, !alias.scope !48, !noalias !51
  %1867 = or i64 %1849, 4
  %1868 = getelementptr i32, i32* %1766, i64 %1867
  %1869 = getelementptr i32, i32* %177, i64 %1867
  %1870 = bitcast i32* %1868 to <4 x i32>*
  %1871 = load <4 x i32>, <4 x i32>* %1870, align 4, !alias.scope !48, !noalias !51
  %1872 = mul nsw <4 x i32> %1871, <i32 23, i32 23, i32 23, i32 23>
  %1873 = bitcast i32* %1869 to <4 x i32>*
  %1874 = load <4 x i32>, <4 x i32>* %1873, align 4, !alias.scope !51
  %1875 = mul nsw <4 x i32> %1874, <i32 22, i32 22, i32 22, i32 22>
  %1876 = add <4 x i32> %1872, <i32 16, i32 16, i32 16, i32 16>
  %1877 = add <4 x i32> %1876, %1875
  %1878 = ashr <4 x i32> %1877, <i32 5, i32 5, i32 5, i32 5>
  %1879 = icmp slt <4 x i32> %1878, %1845
  %1880 = icmp sgt <4 x i32> %1878, %1847
  %1881 = select <4 x i1> %1880, <4 x i32> %1847, <4 x i32> %1878
  %1882 = select <4 x i1> %1879, <4 x i32> %1845, <4 x i32> %1881
  %1883 = bitcast i32* %1868 to <4 x i32>*
  store <4 x i32> %1882, <4 x i32>* %1883, align 4, !alias.scope !48, !noalias !51
  %1884 = add i64 %1849, 8
  %1885 = add i64 %1850, -2
  %1886 = icmp eq i64 %1885, 0
  br i1 %1886, label %1887, label %1848, !llvm.loop !53

1887:                                             ; preds = %1848, %1842
  %1888 = phi i64 [ 0, %1842 ], [ %1884, %1848 ]
  br i1 %1427, label %1906, label %1889

1889:                                             ; preds = %1887
  %1890 = getelementptr i32, i32* %1766, i64 %1888
  %1891 = getelementptr i32, i32* %177, i64 %1888
  %1892 = bitcast i32* %1890 to <4 x i32>*
  %1893 = load <4 x i32>, <4 x i32>* %1892, align 4, !alias.scope !48, !noalias !51
  %1894 = mul nsw <4 x i32> %1893, <i32 23, i32 23, i32 23, i32 23>
  %1895 = bitcast i32* %1891 to <4 x i32>*
  %1896 = load <4 x i32>, <4 x i32>* %1895, align 4, !alias.scope !51
  %1897 = mul nsw <4 x i32> %1896, <i32 22, i32 22, i32 22, i32 22>
  %1898 = add <4 x i32> %1894, <i32 16, i32 16, i32 16, i32 16>
  %1899 = add <4 x i32> %1898, %1897
  %1900 = ashr <4 x i32> %1899, <i32 5, i32 5, i32 5, i32 5>
  %1901 = icmp slt <4 x i32> %1900, %1845
  %1902 = icmp sgt <4 x i32> %1900, %1847
  %1903 = select <4 x i1> %1902, <4 x i32> %1847, <4 x i32> %1900
  %1904 = select <4 x i1> %1901, <4 x i32> %1845, <4 x i32> %1903
  %1905 = bitcast i32* %1890 to <4 x i32>*
  store <4 x i32> %1904, <4 x i32>* %1905, align 4, !alias.scope !48, !noalias !51
  br label %1906

1906:                                             ; preds = %1887, %1889
  br i1 %1428, label %1997, label %1907

1907:                                             ; preds = %1906, %1838, %1837
  %1908 = phi i32* [ %1766, %1838 ], [ %1766, %1837 ], [ %1843, %1906 ]
  %1909 = phi i32 [ %23, %1838 ], [ %23, %1837 ], [ %1422, %1906 ]
  %1910 = phi i32* [ %177, %1838 ], [ %177, %1837 ], [ %1423, %1906 ]
  %1911 = and i32 %1909, 1
  %1912 = icmp eq i32 %1911, 0
  br i1 %1912, label %1928, label %1913

1913:                                             ; preds = %1907
  %1914 = load i32, i32* %1908, align 4
  %1915 = mul nsw i32 %1914, 23
  %1916 = load i32, i32* %1910, align 4
  %1917 = mul nsw i32 %1916, 22
  %1918 = add i32 %1915, 16
  %1919 = add i32 %1918, %1917
  %1920 = ashr i32 %1919, 5
  %1921 = icmp slt i32 %1920, %1716
  %1922 = icmp sgt i32 %1920, %1717
  %1923 = select i1 %1922, i32 %1717, i32 %1920
  %1924 = select i1 %1921, i32 %1716, i32 %1923
  store i32 %1924, i32* %1908, align 4
  %1925 = getelementptr inbounds i32, i32* %1908, i64 1
  %1926 = getelementptr inbounds i32, i32* %1910, i64 1
  %1927 = add nsw i32 %1909, -1
  br label %1928

1928:                                             ; preds = %1913, %1907
  %1929 = phi i32* [ %1925, %1913 ], [ %1908, %1907 ]
  %1930 = phi i32 [ %1927, %1913 ], [ %1909, %1907 ]
  %1931 = phi i32* [ %1926, %1913 ], [ %1910, %1907 ]
  %1932 = icmp eq i32 %1909, 1
  br i1 %1932, label %1997, label %1933

1933:                                             ; preds = %1928, %1933
  %1934 = phi i32* [ %1961, %1933 ], [ %1929, %1928 ]
  %1935 = phi i32 [ %1963, %1933 ], [ %1930, %1928 ]
  %1936 = phi i32* [ %1962, %1933 ], [ %1931, %1928 ]
  %1937 = load i32, i32* %1934, align 4
  %1938 = mul nsw i32 %1937, 23
  %1939 = load i32, i32* %1936, align 4
  %1940 = mul nsw i32 %1939, 22
  %1941 = add i32 %1938, 16
  %1942 = add i32 %1941, %1940
  %1943 = ashr i32 %1942, 5
  %1944 = icmp slt i32 %1943, %1716
  %1945 = icmp sgt i32 %1943, %1717
  %1946 = select i1 %1945, i32 %1717, i32 %1943
  %1947 = select i1 %1944, i32 %1716, i32 %1946
  store i32 %1947, i32* %1934, align 4
  %1948 = getelementptr inbounds i32, i32* %1934, i64 1
  %1949 = getelementptr inbounds i32, i32* %1936, i64 1
  %1950 = load i32, i32* %1948, align 4
  %1951 = mul nsw i32 %1950, 23
  %1952 = load i32, i32* %1949, align 4
  %1953 = mul nsw i32 %1952, 22
  %1954 = add i32 %1951, 16
  %1955 = add i32 %1954, %1953
  %1956 = ashr i32 %1955, 5
  %1957 = icmp slt i32 %1956, %1716
  %1958 = icmp sgt i32 %1956, %1717
  %1959 = select i1 %1958, i32 %1717, i32 %1956
  %1960 = select i1 %1957, i32 %1716, i32 %1959
  store i32 %1960, i32* %1948, align 4
  %1961 = getelementptr inbounds i32, i32* %1934, i64 2
  %1962 = getelementptr inbounds i32, i32* %1936, i64 2
  %1963 = add nsw i32 %1935, -2
  %1964 = icmp eq i32 %1963, 0
  br i1 %1964, label %1997, label %1933, !llvm.loop !54

1965:                                             ; preds = %1769, %1965
  %1966 = phi i32* [ %1993, %1965 ], [ %1770, %1769 ]
  %1967 = phi i32 [ %1995, %1965 ], [ %1771, %1769 ]
  %1968 = phi i32* [ %1994, %1965 ], [ %1772, %1769 ]
  %1969 = load i32, i32* %1966, align 4
  %1970 = mul nsw i32 %1969, 27
  %1971 = load i32, i32* %1968, align 4
  %1972 = mul nsw i32 %1971, 17
  %1973 = add i32 %1970, 16
  %1974 = add i32 %1973, %1972
  %1975 = ashr i32 %1974, 5
  %1976 = icmp slt i32 %1975, %1716
  %1977 = icmp sgt i32 %1975, %1717
  %1978 = select i1 %1977, i32 %1717, i32 %1975
  %1979 = select i1 %1976, i32 %1716, i32 %1978
  store i32 %1979, i32* %1966, align 4
  %1980 = getelementptr inbounds i32, i32* %1966, i64 %160
  %1981 = load i32, i32* %1980, align 4
  %1982 = mul nsw i32 %1981, 17
  %1983 = getelementptr inbounds i32, i32* %1968, i64 %173
  %1984 = load i32, i32* %1983, align 4
  %1985 = mul nsw i32 %1984, 27
  %1986 = add i32 %1982, 16
  %1987 = add i32 %1986, %1985
  %1988 = ashr i32 %1987, 5
  %1989 = icmp slt i32 %1988, %1716
  %1990 = icmp sgt i32 %1988, %1717
  %1991 = select i1 %1990, i32 %1717, i32 %1988
  %1992 = select i1 %1989, i32 %1716, i32 %1991
  store i32 %1992, i32* %1980, align 4
  %1993 = getelementptr inbounds i32, i32* %1966, i64 1
  %1994 = getelementptr inbounds i32, i32* %1968, i64 1
  %1995 = add nsw i32 %1967, -1
  %1996 = icmp eq i32 %1995, 0
  br i1 %1996, label %1997, label %1965, !llvm.loop !55

1997:                                             ; preds = %1965, %1928, %1933, %1835, %1906, %1713
  %1998 = getelementptr inbounds i32, i32* %167, i64 %1765
  switch i32 %18, label %2229 [
    i32 1, label %2068
    i32 2, label %1999
  ]

1999:                                             ; preds = %1997
  br i1 %1304, label %2229, label %2000

2000:                                             ; preds = %1999
  br i1 %1429, label %2001, label %2005

2001:                                             ; preds = %2067, %2005, %2000
  %2002 = phi i32* [ %1998, %2005 ], [ %1998, %2000 ], [ %2026, %2067 ]
  %2003 = phi i32 [ %23, %2005 ], [ %23, %2000 ], [ %1432, %2067 ]
  %2004 = phi i32* [ %183, %2005 ], [ %183, %2000 ], [ %1433, %2067 ]
  br label %2197

2005:                                             ; preds = %2000
  %2006 = icmp ult i8* %1604, %1610
  %2007 = icmp ult i8* %1608, %1606
  %2008 = and i1 %2006, %2007
  %2009 = icmp ult i8* %1604, %1376
  %2010 = icmp ult i8* %182, %1606
  %2011 = and i1 %2009, %2010
  %2012 = or i1 %2008, %2011
  %2013 = icmp ult i8* %1604, %1381
  %2014 = icmp ult i8* %1378, %1606
  %2015 = and i1 %2013, %2014
  %2016 = or i1 %2012, %2015
  %2017 = icmp ult i8* %1608, %1376
  %2018 = icmp ult i8* %182, %1610
  %2019 = and i1 %2017, %2018
  %2020 = or i1 %2016, %2019
  %2021 = icmp ult i8* %1608, %1381
  %2022 = icmp ult i8* %1378, %1610
  %2023 = and i1 %2021, %2022
  %2024 = or i1 %2020, %2023
  br i1 %2024, label %2001, label %2025

2025:                                             ; preds = %2005
  %2026 = getelementptr i32, i32* %1998, i64 %1430
  %2027 = insertelement <4 x i32> undef, i32 %1716, i32 0
  %2028 = shufflevector <4 x i32> %2027, <4 x i32> undef, <4 x i32> zeroinitializer
  %2029 = insertelement <4 x i32> undef, i32 %1717, i32 0
  %2030 = shufflevector <4 x i32> %2029, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %2031

2031:                                             ; preds = %2031, %2025
  %2032 = phi i64 [ 0, %2025 ], [ %2065, %2031 ]
  %2033 = getelementptr i32, i32* %1998, i64 %2032
  %2034 = getelementptr i32, i32* %183, i64 %2032
  %2035 = bitcast i32* %2033 to <4 x i32>*
  %2036 = load <4 x i32>, <4 x i32>* %2035, align 4, !alias.scope !56, !noalias !59
  %2037 = mul nsw <4 x i32> %2036, <i32 27, i32 27, i32 27, i32 27>
  %2038 = bitcast i32* %2034 to <4 x i32>*
  %2039 = load <4 x i32>, <4 x i32>* %2038, align 4, !alias.scope !63
  %2040 = mul nsw <4 x i32> %2039, <i32 17, i32 17, i32 17, i32 17>
  %2041 = add <4 x i32> %2037, <i32 16, i32 16, i32 16, i32 16>
  %2042 = add <4 x i32> %2041, %2040
  %2043 = ashr <4 x i32> %2042, <i32 5, i32 5, i32 5, i32 5>
  %2044 = icmp slt <4 x i32> %2043, %2028
  %2045 = icmp sgt <4 x i32> %2043, %2030
  %2046 = select <4 x i1> %2045, <4 x i32> %2030, <4 x i32> %2043
  %2047 = select <4 x i1> %2044, <4 x i32> %2028, <4 x i32> %2046
  %2048 = bitcast i32* %2033 to <4 x i32>*
  store <4 x i32> %2047, <4 x i32>* %2048, align 4, !alias.scope !56, !noalias !59
  %2049 = getelementptr inbounds i32, i32* %2033, i64 %160
  %2050 = bitcast i32* %2049 to <4 x i32>*
  %2051 = load <4 x i32>, <4 x i32>* %2050, align 4, !alias.scope !64, !noalias !65
  %2052 = mul nsw <4 x i32> %2051, <i32 17, i32 17, i32 17, i32 17>
  %2053 = getelementptr inbounds i32, i32* %2034, i64 %173
  %2054 = bitcast i32* %2053 to <4 x i32>*
  %2055 = load <4 x i32>, <4 x i32>* %2054, align 4, !alias.scope !66
  %2056 = mul nsw <4 x i32> %2055, <i32 27, i32 27, i32 27, i32 27>
  %2057 = add <4 x i32> %2052, <i32 16, i32 16, i32 16, i32 16>
  %2058 = add <4 x i32> %2057, %2056
  %2059 = ashr <4 x i32> %2058, <i32 5, i32 5, i32 5, i32 5>
  %2060 = icmp slt <4 x i32> %2059, %2028
  %2061 = icmp sgt <4 x i32> %2059, %2030
  %2062 = select <4 x i1> %2061, <4 x i32> %2030, <4 x i32> %2059
  %2063 = select <4 x i1> %2060, <4 x i32> %2028, <4 x i32> %2062
  %2064 = bitcast i32* %2049 to <4 x i32>*
  store <4 x i32> %2063, <4 x i32>* %2064, align 4, !alias.scope !64, !noalias !65
  %2065 = add i64 %2032, 4
  %2066 = icmp eq i64 %2065, %1430
  br i1 %2066, label %2067, label %2031, !llvm.loop !67

2067:                                             ; preds = %2031
  br i1 %1434, label %2229, label %2001

2068:                                             ; preds = %1997
  br i1 %1304, label %2229, label %2069

2069:                                             ; preds = %2068
  br i1 %1435, label %2139, label %2070

2070:                                             ; preds = %2069
  %2071 = icmp ult i8* %1612, %1364
  %2072 = icmp ult i8* %182, %1614
  %2073 = and i1 %2071, %2072
  br i1 %2073, label %2139, label %2074

2074:                                             ; preds = %2070
  %2075 = getelementptr i32, i32* %1998, i64 %1436
  %2076 = insertelement <4 x i32> undef, i32 %1716, i32 0
  %2077 = shufflevector <4 x i32> %2076, <4 x i32> undef, <4 x i32> zeroinitializer
  %2078 = insertelement <4 x i32> undef, i32 %1717, i32 0
  %2079 = shufflevector <4 x i32> %2078, <4 x i32> undef, <4 x i32> zeroinitializer
  br i1 %1441, label %2119, label %2080

2080:                                             ; preds = %2074, %2080
  %2081 = phi i64 [ %2116, %2080 ], [ 0, %2074 ]
  %2082 = phi i64 [ %2117, %2080 ], [ %1442, %2074 ]
  %2083 = getelementptr i32, i32* %1998, i64 %2081
  %2084 = getelementptr i32, i32* %183, i64 %2081
  %2085 = bitcast i32* %2083 to <4 x i32>*
  %2086 = load <4 x i32>, <4 x i32>* %2085, align 4, !alias.scope !68, !noalias !71
  %2087 = mul nsw <4 x i32> %2086, <i32 23, i32 23, i32 23, i32 23>
  %2088 = bitcast i32* %2084 to <4 x i32>*
  %2089 = load <4 x i32>, <4 x i32>* %2088, align 4, !alias.scope !71
  %2090 = mul nsw <4 x i32> %2089, <i32 22, i32 22, i32 22, i32 22>
  %2091 = add <4 x i32> %2087, <i32 16, i32 16, i32 16, i32 16>
  %2092 = add <4 x i32> %2091, %2090
  %2093 = ashr <4 x i32> %2092, <i32 5, i32 5, i32 5, i32 5>
  %2094 = icmp slt <4 x i32> %2093, %2077
  %2095 = icmp sgt <4 x i32> %2093, %2079
  %2096 = select <4 x i1> %2095, <4 x i32> %2079, <4 x i32> %2093
  %2097 = select <4 x i1> %2094, <4 x i32> %2077, <4 x i32> %2096
  %2098 = bitcast i32* %2083 to <4 x i32>*
  store <4 x i32> %2097, <4 x i32>* %2098, align 4, !alias.scope !68, !noalias !71
  %2099 = or i64 %2081, 4
  %2100 = getelementptr i32, i32* %1998, i64 %2099
  %2101 = getelementptr i32, i32* %183, i64 %2099
  %2102 = bitcast i32* %2100 to <4 x i32>*
  %2103 = load <4 x i32>, <4 x i32>* %2102, align 4, !alias.scope !68, !noalias !71
  %2104 = mul nsw <4 x i32> %2103, <i32 23, i32 23, i32 23, i32 23>
  %2105 = bitcast i32* %2101 to <4 x i32>*
  %2106 = load <4 x i32>, <4 x i32>* %2105, align 4, !alias.scope !71
  %2107 = mul nsw <4 x i32> %2106, <i32 22, i32 22, i32 22, i32 22>
  %2108 = add <4 x i32> %2104, <i32 16, i32 16, i32 16, i32 16>
  %2109 = add <4 x i32> %2108, %2107
  %2110 = ashr <4 x i32> %2109, <i32 5, i32 5, i32 5, i32 5>
  %2111 = icmp slt <4 x i32> %2110, %2077
  %2112 = icmp sgt <4 x i32> %2110, %2079
  %2113 = select <4 x i1> %2112, <4 x i32> %2079, <4 x i32> %2110
  %2114 = select <4 x i1> %2111, <4 x i32> %2077, <4 x i32> %2113
  %2115 = bitcast i32* %2100 to <4 x i32>*
  store <4 x i32> %2114, <4 x i32>* %2115, align 4, !alias.scope !68, !noalias !71
  %2116 = add i64 %2081, 8
  %2117 = add i64 %2082, -2
  %2118 = icmp eq i64 %2117, 0
  br i1 %2118, label %2119, label %2080, !llvm.loop !73

2119:                                             ; preds = %2080, %2074
  %2120 = phi i64 [ 0, %2074 ], [ %2116, %2080 ]
  br i1 %1443, label %2138, label %2121

2121:                                             ; preds = %2119
  %2122 = getelementptr i32, i32* %1998, i64 %2120
  %2123 = getelementptr i32, i32* %183, i64 %2120
  %2124 = bitcast i32* %2122 to <4 x i32>*
  %2125 = load <4 x i32>, <4 x i32>* %2124, align 4, !alias.scope !68, !noalias !71
  %2126 = mul nsw <4 x i32> %2125, <i32 23, i32 23, i32 23, i32 23>
  %2127 = bitcast i32* %2123 to <4 x i32>*
  %2128 = load <4 x i32>, <4 x i32>* %2127, align 4, !alias.scope !71
  %2129 = mul nsw <4 x i32> %2128, <i32 22, i32 22, i32 22, i32 22>
  %2130 = add <4 x i32> %2126, <i32 16, i32 16, i32 16, i32 16>
  %2131 = add <4 x i32> %2130, %2129
  %2132 = ashr <4 x i32> %2131, <i32 5, i32 5, i32 5, i32 5>
  %2133 = icmp slt <4 x i32> %2132, %2077
  %2134 = icmp sgt <4 x i32> %2132, %2079
  %2135 = select <4 x i1> %2134, <4 x i32> %2079, <4 x i32> %2132
  %2136 = select <4 x i1> %2133, <4 x i32> %2077, <4 x i32> %2135
  %2137 = bitcast i32* %2122 to <4 x i32>*
  store <4 x i32> %2136, <4 x i32>* %2137, align 4, !alias.scope !68, !noalias !71
  br label %2138

2138:                                             ; preds = %2119, %2121
  br i1 %1444, label %2229, label %2139

2139:                                             ; preds = %2138, %2070, %2069
  %2140 = phi i32* [ %1998, %2070 ], [ %1998, %2069 ], [ %2075, %2138 ]
  %2141 = phi i32 [ %23, %2070 ], [ %23, %2069 ], [ %1438, %2138 ]
  %2142 = phi i32* [ %183, %2070 ], [ %183, %2069 ], [ %1439, %2138 ]
  %2143 = and i32 %2141, 1
  %2144 = icmp eq i32 %2143, 0
  br i1 %2144, label %2160, label %2145

2145:                                             ; preds = %2139
  %2146 = load i32, i32* %2140, align 4
  %2147 = mul nsw i32 %2146, 23
  %2148 = load i32, i32* %2142, align 4
  %2149 = mul nsw i32 %2148, 22
  %2150 = add i32 %2147, 16
  %2151 = add i32 %2150, %2149
  %2152 = ashr i32 %2151, 5
  %2153 = icmp slt i32 %2152, %1716
  %2154 = icmp sgt i32 %2152, %1717
  %2155 = select i1 %2154, i32 %1717, i32 %2152
  %2156 = select i1 %2153, i32 %1716, i32 %2155
  store i32 %2156, i32* %2140, align 4
  %2157 = getelementptr inbounds i32, i32* %2140, i64 1
  %2158 = getelementptr inbounds i32, i32* %2142, i64 1
  %2159 = add nsw i32 %2141, -1
  br label %2160

2160:                                             ; preds = %2145, %2139
  %2161 = phi i32* [ %2157, %2145 ], [ %2140, %2139 ]
  %2162 = phi i32 [ %2159, %2145 ], [ %2141, %2139 ]
  %2163 = phi i32* [ %2158, %2145 ], [ %2142, %2139 ]
  %2164 = icmp eq i32 %2141, 1
  br i1 %2164, label %2229, label %2165

2165:                                             ; preds = %2160, %2165
  %2166 = phi i32* [ %2193, %2165 ], [ %2161, %2160 ]
  %2167 = phi i32 [ %2195, %2165 ], [ %2162, %2160 ]
  %2168 = phi i32* [ %2194, %2165 ], [ %2163, %2160 ]
  %2169 = load i32, i32* %2166, align 4
  %2170 = mul nsw i32 %2169, 23
  %2171 = load i32, i32* %2168, align 4
  %2172 = mul nsw i32 %2171, 22
  %2173 = add i32 %2170, 16
  %2174 = add i32 %2173, %2172
  %2175 = ashr i32 %2174, 5
  %2176 = icmp slt i32 %2175, %1716
  %2177 = icmp sgt i32 %2175, %1717
  %2178 = select i1 %2177, i32 %1717, i32 %2175
  %2179 = select i1 %2176, i32 %1716, i32 %2178
  store i32 %2179, i32* %2166, align 4
  %2180 = getelementptr inbounds i32, i32* %2166, i64 1
  %2181 = getelementptr inbounds i32, i32* %2168, i64 1
  %2182 = load i32, i32* %2180, align 4
  %2183 = mul nsw i32 %2182, 23
  %2184 = load i32, i32* %2181, align 4
  %2185 = mul nsw i32 %2184, 22
  %2186 = add i32 %2183, 16
  %2187 = add i32 %2186, %2185
  %2188 = ashr i32 %2187, 5
  %2189 = icmp slt i32 %2188, %1716
  %2190 = icmp sgt i32 %2188, %1717
  %2191 = select i1 %2190, i32 %1717, i32 %2188
  %2192 = select i1 %2189, i32 %1716, i32 %2191
  store i32 %2192, i32* %2180, align 4
  %2193 = getelementptr inbounds i32, i32* %2166, i64 2
  %2194 = getelementptr inbounds i32, i32* %2168, i64 2
  %2195 = add nsw i32 %2167, -2
  %2196 = icmp eq i32 %2195, 0
  br i1 %2196, label %2229, label %2165, !llvm.loop !74

2197:                                             ; preds = %2001, %2197
  %2198 = phi i32* [ %2225, %2197 ], [ %2002, %2001 ]
  %2199 = phi i32 [ %2227, %2197 ], [ %2003, %2001 ]
  %2200 = phi i32* [ %2226, %2197 ], [ %2004, %2001 ]
  %2201 = load i32, i32* %2198, align 4
  %2202 = mul nsw i32 %2201, 27
  %2203 = load i32, i32* %2200, align 4
  %2204 = mul nsw i32 %2203, 17
  %2205 = add i32 %2202, 16
  %2206 = add i32 %2205, %2204
  %2207 = ashr i32 %2206, 5
  %2208 = icmp slt i32 %2207, %1716
  %2209 = icmp sgt i32 %2207, %1717
  %2210 = select i1 %2209, i32 %1717, i32 %2207
  %2211 = select i1 %2208, i32 %1716, i32 %2210
  store i32 %2211, i32* %2198, align 4
  %2212 = getelementptr inbounds i32, i32* %2198, i64 %160
  %2213 = load i32, i32* %2212, align 4
  %2214 = mul nsw i32 %2213, 17
  %2215 = getelementptr inbounds i32, i32* %2200, i64 %173
  %2216 = load i32, i32* %2215, align 4
  %2217 = mul nsw i32 %2216, 27
  %2218 = add i32 %2214, 16
  %2219 = add i32 %2218, %2217
  %2220 = ashr i32 %2219, 5
  %2221 = icmp slt i32 %2220, %1716
  %2222 = icmp sgt i32 %2220, %1717
  %2223 = select i1 %2222, i32 %1717, i32 %2220
  %2224 = select i1 %2221, i32 %1716, i32 %2223
  store i32 %2224, i32* %2212, align 4
  %2225 = getelementptr inbounds i32, i32* %2198, i64 1
  %2226 = getelementptr inbounds i32, i32* %2200, i64 1
  %2227 = add nsw i32 %2199, -1
  %2228 = icmp eq i32 %2227, 0
  br i1 %2228, label %2229, label %2197, !llvm.loop !75

2229:                                             ; preds = %2197, %2160, %2165, %2067, %2138, %1836, %1767, %2068, %1999, %1997, %1712
  %2230 = trunc i64 %1590 to i32
  %2231 = or i32 %2230, 1
  %2232 = select i1 %1637, i32 %2231, i32 0
  %2233 = shl nuw i32 %2232, 1
  %2234 = zext i1 %1637 to i32
  %2235 = shl nuw nsw i32 %2234, 1
  %2236 = sub nuw nsw i32 32, %2235
  %2237 = sub nsw i32 %5, %2233
  %2238 = icmp slt i32 %2236, %2237
  %2239 = select i1 %2238, i32 %2236, i32 %2237
  %2240 = icmp eq i32 %2239, 0
  br i1 %2240, label %2384, label %2241

2241:                                             ; preds = %2229
  %2242 = sext i32 %2233 to i64
  %2243 = getelementptr inbounds i32, i32* %159, i64 %2242
  %2244 = mul nuw nsw i32 %1630, 82
  %2245 = zext i32 %2244 to i64
  %2246 = getelementptr inbounds i32, i32* %185, i64 %2245
  %2247 = zext i32 %1632 to i64
  %2248 = getelementptr inbounds i32, i32* %2246, i64 %2247
  %2249 = select i1 %1637, i64 2, i64 0
  %2250 = getelementptr inbounds i32, i32* %2248, i64 %2249
  %2251 = load i32, i32* @grain_min, align 4
  %2252 = load i32, i32* @grain_max, align 4
  %2253 = add nsw i32 %2239, -1
  %2254 = zext i32 %2253 to i64
  %2255 = add nuw nsw i64 %2254, 1
  %2256 = icmp ult i64 %2255, 4
  br i1 %2256, label %2348, label %2257

2257:                                             ; preds = %2241
  %2258 = shl nsw i64 %2242, 2
  %2259 = getelementptr i8, i8* %158, i64 %2258
  %2260 = add nsw i32 %2239, -1
  %2261 = zext i32 %2260 to i64
  %2262 = shl nuw nsw i64 %2261, 2
  %2263 = add nsw i64 %2258, %2262
  %2264 = getelementptr i8, i8* %1347, i64 %2263
  %2265 = getelementptr i8, i8* %1349, i64 %2258
  %2266 = getelementptr i8, i8* %1351, i64 %2263
  %2267 = shl nuw nsw i32 %1626, 3
  %2268 = and i32 %2267, 120
  %2269 = zext i32 %2268 to i64
  %2270 = shl nuw nsw i64 %2249, 2
  %2271 = add nuw nsw i64 %2270, %2269
  %2272 = mul nuw nsw i32 %1630, 328
  %2273 = zext i32 %2272 to i64
  %2274 = add nsw i64 %2273, -2952
  %2275 = add nsw i64 %2271, %2274
  %2276 = getelementptr i8, i8* %1352, i64 %2275
  %2277 = add nsw i64 %2275, %2262
  %2278 = getelementptr i8, i8* %1353, i64 %2277
  %2279 = getelementptr i8, i8* %1354, i64 %2275
  %2280 = getelementptr i8, i8* %1355, i64 %2277
  %2281 = icmp ult i8* %2259, %2266
  %2282 = icmp ult i8* %2265, %2264
  %2283 = and i1 %2281, %2282
  %2284 = icmp ult i8* %2259, %2278
  %2285 = icmp ult i8* %2276, %2264
  %2286 = and i1 %2284, %2285
  %2287 = or i1 %2283, %2286
  %2288 = icmp ult i8* %2259, %2280
  %2289 = icmp ult i8* %2279, %2264
  %2290 = and i1 %2288, %2289
  %2291 = or i1 %2287, %2290
  %2292 = icmp ult i8* %2265, %2278
  %2293 = icmp ult i8* %2276, %2266
  %2294 = and i1 %2292, %2293
  %2295 = or i1 %2291, %2294
  %2296 = icmp ult i8* %2265, %2280
  %2297 = icmp ult i8* %2279, %2266
  %2298 = and i1 %2296, %2297
  %2299 = or i1 %2295, %2298
  br i1 %2299, label %2348, label %2300

2300:                                             ; preds = %2257
  %2301 = and i64 %2255, 8589934588
  %2302 = getelementptr i32, i32* %2243, i64 %2301
  %2303 = trunc i64 %2301 to i32
  %2304 = sub i32 %2239, %2303
  %2305 = getelementptr i32, i32* %2250, i64 %2301
  %2306 = insertelement <4 x i32> undef, i32 %2251, i32 0
  %2307 = shufflevector <4 x i32> %2306, <4 x i32> undef, <4 x i32> zeroinitializer
  %2308 = insertelement <4 x i32> undef, i32 %2252, i32 0
  %2309 = shufflevector <4 x i32> %2308, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %2310

2310:                                             ; preds = %2310, %2300
  %2311 = phi i64 [ 0, %2300 ], [ %2344, %2310 ]
  %2312 = getelementptr i32, i32* %2243, i64 %2311
  %2313 = getelementptr i32, i32* %2250, i64 %2311
  %2314 = bitcast i32* %2312 to <4 x i32>*
  %2315 = load <4 x i32>, <4 x i32>* %2314, align 4, !alias.scope !76, !noalias !79
  %2316 = mul nsw <4 x i32> %2315, <i32 27, i32 27, i32 27, i32 27>
  %2317 = bitcast i32* %2313 to <4 x i32>*
  %2318 = load <4 x i32>, <4 x i32>* %2317, align 4, !alias.scope !83
  %2319 = mul nsw <4 x i32> %2318, <i32 17, i32 17, i32 17, i32 17>
  %2320 = add <4 x i32> %2316, <i32 16, i32 16, i32 16, i32 16>
  %2321 = add <4 x i32> %2320, %2319
  %2322 = ashr <4 x i32> %2321, <i32 5, i32 5, i32 5, i32 5>
  %2323 = icmp slt <4 x i32> %2322, %2307
  %2324 = icmp sgt <4 x i32> %2322, %2309
  %2325 = select <4 x i1> %2324, <4 x i32> %2309, <4 x i32> %2322
  %2326 = select <4 x i1> %2323, <4 x i32> %2307, <4 x i32> %2325
  %2327 = bitcast i32* %2312 to <4 x i32>*
  store <4 x i32> %2326, <4 x i32>* %2327, align 4, !alias.scope !76, !noalias !79
  %2328 = getelementptr inbounds i32, i32* %2312, i64 %156
  %2329 = bitcast i32* %2328 to <4 x i32>*
  %2330 = load <4 x i32>, <4 x i32>* %2329, align 4, !alias.scope !84, !noalias !85
  %2331 = mul nsw <4 x i32> %2330, <i32 17, i32 17, i32 17, i32 17>
  %2332 = getelementptr inbounds i32, i32* %2313, i64 82
  %2333 = bitcast i32* %2332 to <4 x i32>*
  %2334 = load <4 x i32>, <4 x i32>* %2333, align 4, !alias.scope !86
  %2335 = mul nsw <4 x i32> %2334, <i32 27, i32 27, i32 27, i32 27>
  %2336 = add <4 x i32> %2331, <i32 16, i32 16, i32 16, i32 16>
  %2337 = add <4 x i32> %2336, %2335
  %2338 = ashr <4 x i32> %2337, <i32 5, i32 5, i32 5, i32 5>
  %2339 = icmp slt <4 x i32> %2338, %2307
  %2340 = icmp sgt <4 x i32> %2338, %2309
  %2341 = select <4 x i1> %2340, <4 x i32> %2309, <4 x i32> %2338
  %2342 = select <4 x i1> %2339, <4 x i32> %2307, <4 x i32> %2341
  %2343 = bitcast i32* %2328 to <4 x i32>*
  store <4 x i32> %2342, <4 x i32>* %2343, align 4, !alias.scope !84, !noalias !85
  %2344 = add i64 %2311, 4
  %2345 = icmp eq i64 %2344, %2301
  br i1 %2345, label %2346, label %2310, !llvm.loop !87

2346:                                             ; preds = %2310
  %2347 = icmp eq i64 %2255, %2301
  br i1 %2347, label %2384, label %2348

2348:                                             ; preds = %2346, %2257, %2241
  %2349 = phi i32* [ %2243, %2257 ], [ %2243, %2241 ], [ %2302, %2346 ]
  %2350 = phi i32 [ %2239, %2257 ], [ %2239, %2241 ], [ %2304, %2346 ]
  %2351 = phi i32* [ %2250, %2257 ], [ %2250, %2241 ], [ %2305, %2346 ]
  br label %2352

2352:                                             ; preds = %2348, %2352
  %2353 = phi i32* [ %2380, %2352 ], [ %2349, %2348 ]
  %2354 = phi i32 [ %2382, %2352 ], [ %2350, %2348 ]
  %2355 = phi i32* [ %2381, %2352 ], [ %2351, %2348 ]
  %2356 = load i32, i32* %2353, align 4
  %2357 = mul nsw i32 %2356, 27
  %2358 = load i32, i32* %2355, align 4
  %2359 = mul nsw i32 %2358, 17
  %2360 = add i32 %2357, 16
  %2361 = add i32 %2360, %2359
  %2362 = ashr i32 %2361, 5
  %2363 = icmp slt i32 %2362, %2251
  %2364 = icmp sgt i32 %2362, %2252
  %2365 = select i1 %2364, i32 %2252, i32 %2362
  %2366 = select i1 %2363, i32 %2251, i32 %2365
  store i32 %2366, i32* %2353, align 4
  %2367 = getelementptr inbounds i32, i32* %2353, i64 %156
  %2368 = load i32, i32* %2367, align 4
  %2369 = mul nsw i32 %2368, 17
  %2370 = getelementptr inbounds i32, i32* %2355, i64 82
  %2371 = load i32, i32* %2370, align 4
  %2372 = mul nsw i32 %2371, 27
  %2373 = add i32 %2369, 16
  %2374 = add i32 %2373, %2372
  %2375 = ashr i32 %2374, 5
  %2376 = icmp slt i32 %2375, %2251
  %2377 = icmp sgt i32 %2375, %2252
  %2378 = select i1 %2377, i32 %2252, i32 %2375
  %2379 = select i1 %2376, i32 %2251, i32 %2378
  store i32 %2379, i32* %2367, align 4
  %2380 = getelementptr inbounds i32, i32* %2353, i64 1
  %2381 = getelementptr inbounds i32, i32* %2355, i64 1
  %2382 = add nsw i32 %2354, -1
  %2383 = icmp eq i32 %2382, 0
  br i1 %2383, label %2384, label %2352, !llvm.loop !88

2384:                                             ; preds = %2352, %2346, %2229
  %2385 = shl i32 %2232, %1300
  %2386 = sext i32 %2385 to i64
  %2387 = getelementptr inbounds i32, i32* %165, i64 %2386
  %2388 = mul nsw i32 %1634, %29
  %2389 = sext i32 %2388 to i64
  %2390 = getelementptr inbounds i32, i32* %189, i64 %2389
  %2391 = sext i32 %1636 to i64
  %2392 = getelementptr inbounds i32, i32* %2390, i64 %2391
  %2393 = shl i32 %2234, %1300
  %2394 = sext i32 %2393 to i64
  %2395 = getelementptr inbounds i32, i32* %2392, i64 %2394
  %2396 = load i32, i32* @chroma_subblock_size_x, align 4
  %2397 = sub nsw i32 %2396, %2393
  %2398 = ashr i32 %2237, %10
  %2399 = icmp slt i32 %2397, %2398
  %2400 = select i1 %2399, i32 %2397, i32 %2398
  switch i32 %18, label %2693 [
    i32 1, label %2499
    i32 2, label %2401
  ]

2401:                                             ; preds = %2384
  %2402 = icmp eq i32 %2400, 0
  br i1 %2402, label %2990, label %2403

2403:                                             ; preds = %2401
  %2404 = load i32, i32* @grain_min, align 4
  %2405 = load i32, i32* @grain_max, align 4
  %2406 = add nsw i32 %2400, -1
  %2407 = zext i32 %2406 to i64
  %2408 = add nuw nsw i64 %2407, 1
  %2409 = icmp ult i64 %2408, 4
  br i1 %2409, label %2410, label %2414

2410:                                             ; preds = %2497, %2414, %2403
  %2411 = phi i32* [ %2387, %2414 ], [ %2387, %2403 ], [ %2453, %2497 ]
  %2412 = phi i32 [ %2400, %2414 ], [ %2400, %2403 ], [ %2455, %2497 ]
  %2413 = phi i32* [ %2395, %2414 ], [ %2395, %2403 ], [ %2456, %2497 ]
  br label %2661

2414:                                             ; preds = %2403
  %2415 = shl nsw i64 %2386, 2
  %2416 = getelementptr i8, i8* %164, i64 %2415
  %2417 = add nsw i32 %2400, -1
  %2418 = zext i32 %2417 to i64
  %2419 = shl nuw nsw i64 %2418, 2
  %2420 = add nsw i64 %2415, %2419
  %2421 = getelementptr i8, i8* %1337, i64 %2420
  %2422 = getelementptr i8, i8* %1339, i64 %2415
  %2423 = getelementptr i8, i8* %1341, i64 %2420
  %2424 = add nsw i64 %2394, %2389
  %2425 = add nsw i64 %2424, %2391
  %2426 = shl nsw i64 %2425, 2
  %2427 = getelementptr i8, i8* %188, i64 %2426
  %2428 = add nsw i64 %2426, %2419
  %2429 = getelementptr i8, i8* %1342, i64 %2428
  %2430 = getelementptr i8, i8* %1344, i64 %2426
  %2431 = getelementptr i8, i8* %1346, i64 %2428
  %2432 = icmp ult i8* %2416, %2423
  %2433 = icmp ult i8* %2422, %2421
  %2434 = and i1 %2432, %2433
  %2435 = icmp ult i8* %2416, %2429
  %2436 = icmp ult i8* %2427, %2421
  %2437 = and i1 %2435, %2436
  %2438 = or i1 %2434, %2437
  %2439 = icmp ult i8* %2416, %2431
  %2440 = icmp ult i8* %2430, %2421
  %2441 = and i1 %2439, %2440
  %2442 = or i1 %2438, %2441
  %2443 = icmp ult i8* %2422, %2429
  %2444 = icmp ult i8* %2427, %2423
  %2445 = and i1 %2443, %2444
  %2446 = or i1 %2442, %2445
  %2447 = icmp ult i8* %2422, %2431
  %2448 = icmp ult i8* %2430, %2423
  %2449 = and i1 %2447, %2448
  %2450 = or i1 %2446, %2449
  br i1 %2450, label %2410, label %2451

2451:                                             ; preds = %2414
  %2452 = and i64 %2408, 8589934588
  %2453 = getelementptr i32, i32* %2387, i64 %2452
  %2454 = trunc i64 %2452 to i32
  %2455 = sub i32 %2400, %2454
  %2456 = getelementptr i32, i32* %2395, i64 %2452
  %2457 = insertelement <4 x i32> undef, i32 %2404, i32 0
  %2458 = shufflevector <4 x i32> %2457, <4 x i32> undef, <4 x i32> zeroinitializer
  %2459 = insertelement <4 x i32> undef, i32 %2405, i32 0
  %2460 = shufflevector <4 x i32> %2459, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %2461

2461:                                             ; preds = %2461, %2451
  %2462 = phi i64 [ 0, %2451 ], [ %2495, %2461 ]
  %2463 = getelementptr i32, i32* %2387, i64 %2462
  %2464 = getelementptr i32, i32* %2395, i64 %2462
  %2465 = bitcast i32* %2463 to <4 x i32>*
  %2466 = load <4 x i32>, <4 x i32>* %2465, align 4, !alias.scope !89, !noalias !92
  %2467 = mul nsw <4 x i32> %2466, <i32 27, i32 27, i32 27, i32 27>
  %2468 = bitcast i32* %2464 to <4 x i32>*
  %2469 = load <4 x i32>, <4 x i32>* %2468, align 4, !alias.scope !96
  %2470 = mul nsw <4 x i32> %2469, <i32 17, i32 17, i32 17, i32 17>
  %2471 = add <4 x i32> %2467, <i32 16, i32 16, i32 16, i32 16>
  %2472 = add <4 x i32> %2471, %2470
  %2473 = ashr <4 x i32> %2472, <i32 5, i32 5, i32 5, i32 5>
  %2474 = icmp slt <4 x i32> %2473, %2458
  %2475 = icmp sgt <4 x i32> %2473, %2460
  %2476 = select <4 x i1> %2475, <4 x i32> %2460, <4 x i32> %2473
  %2477 = select <4 x i1> %2474, <4 x i32> %2458, <4 x i32> %2476
  %2478 = bitcast i32* %2463 to <4 x i32>*
  store <4 x i32> %2477, <4 x i32>* %2478, align 4, !alias.scope !89, !noalias !92
  %2479 = getelementptr inbounds i32, i32* %2463, i64 %160
  %2480 = bitcast i32* %2479 to <4 x i32>*
  %2481 = load <4 x i32>, <4 x i32>* %2480, align 4, !alias.scope !97, !noalias !98
  %2482 = mul nsw <4 x i32> %2481, <i32 17, i32 17, i32 17, i32 17>
  %2483 = getelementptr inbounds i32, i32* %2464, i64 %1305
  %2484 = bitcast i32* %2483 to <4 x i32>*
  %2485 = load <4 x i32>, <4 x i32>* %2484, align 4, !alias.scope !99
  %2486 = mul nsw <4 x i32> %2485, <i32 27, i32 27, i32 27, i32 27>
  %2487 = add <4 x i32> %2482, <i32 16, i32 16, i32 16, i32 16>
  %2488 = add <4 x i32> %2487, %2486
  %2489 = ashr <4 x i32> %2488, <i32 5, i32 5, i32 5, i32 5>
  %2490 = icmp slt <4 x i32> %2489, %2458
  %2491 = icmp sgt <4 x i32> %2489, %2460
  %2492 = select <4 x i1> %2491, <4 x i32> %2460, <4 x i32> %2489
  %2493 = select <4 x i1> %2490, <4 x i32> %2458, <4 x i32> %2492
  %2494 = bitcast i32* %2479 to <4 x i32>*
  store <4 x i32> %2493, <4 x i32>* %2494, align 4, !alias.scope !97, !noalias !98
  %2495 = add i64 %2462, 4
  %2496 = icmp eq i64 %2495, %2452
  br i1 %2496, label %2497, label %2461, !llvm.loop !100

2497:                                             ; preds = %2461
  %2498 = icmp eq i64 %2408, %2452
  br i1 %2498, label %2693, label %2410

2499:                                             ; preds = %2384
  %2500 = icmp eq i32 %2400, 0
  br i1 %2500, label %2990, label %2501

2501:                                             ; preds = %2499
  %2502 = load i32, i32* @grain_min, align 4
  %2503 = load i32, i32* @grain_max, align 4
  %2504 = add nsw i32 %2400, -1
  %2505 = zext i32 %2504 to i64
  %2506 = add nuw nsw i64 %2505, 1
  %2507 = icmp ult i64 %2506, 4
  br i1 %2507, label %2603, label %2508

2508:                                             ; preds = %2501
  %2509 = shl nsw i64 %2386, 2
  %2510 = getelementptr i8, i8* %164, i64 %2509
  %2511 = add nsw i32 %2400, -1
  %2512 = zext i32 %2511 to i64
  %2513 = shl nuw nsw i64 %2512, 2
  %2514 = add nsw i64 %2509, %2513
  %2515 = getelementptr i8, i8* %1335, i64 %2514
  %2516 = add nsw i64 %2394, %2389
  %2517 = add nsw i64 %2516, %2391
  %2518 = shl nsw i64 %2517, 2
  %2519 = getelementptr i8, i8* %188, i64 %2518
  %2520 = add nsw i64 %2518, %2513
  %2521 = getelementptr i8, i8* %1336, i64 %2520
  %2522 = icmp ult i8* %2510, %2521
  %2523 = icmp ult i8* %2519, %2515
  %2524 = and i1 %2522, %2523
  br i1 %2524, label %2603, label %2525

2525:                                             ; preds = %2508
  %2526 = and i64 %2506, 8589934588
  %2527 = getelementptr i32, i32* %2387, i64 %2526
  %2528 = trunc i64 %2526 to i32
  %2529 = sub i32 %2400, %2528
  %2530 = getelementptr i32, i32* %2395, i64 %2526
  %2531 = insertelement <4 x i32> undef, i32 %2502, i32 0
  %2532 = shufflevector <4 x i32> %2531, <4 x i32> undef, <4 x i32> zeroinitializer
  %2533 = insertelement <4 x i32> undef, i32 %2503, i32 0
  %2534 = shufflevector <4 x i32> %2533, <4 x i32> undef, <4 x i32> zeroinitializer
  %2535 = add nsw i64 %2526, -4
  %2536 = lshr exact i64 %2535, 2
  %2537 = add nuw nsw i64 %2536, 1
  %2538 = and i64 %2537, 1
  %2539 = icmp eq i64 %2535, 0
  br i1 %2539, label %2581, label %2540

2540:                                             ; preds = %2525
  %2541 = sub nuw nsw i64 %2537, %2538
  br label %2542

2542:                                             ; preds = %2542, %2540
  %2543 = phi i64 [ 0, %2540 ], [ %2578, %2542 ]
  %2544 = phi i64 [ %2541, %2540 ], [ %2579, %2542 ]
  %2545 = getelementptr i32, i32* %2387, i64 %2543
  %2546 = getelementptr i32, i32* %2395, i64 %2543
  %2547 = bitcast i32* %2545 to <4 x i32>*
  %2548 = load <4 x i32>, <4 x i32>* %2547, align 4, !alias.scope !101, !noalias !104
  %2549 = mul nsw <4 x i32> %2548, <i32 23, i32 23, i32 23, i32 23>
  %2550 = bitcast i32* %2546 to <4 x i32>*
  %2551 = load <4 x i32>, <4 x i32>* %2550, align 4, !alias.scope !104
  %2552 = mul nsw <4 x i32> %2551, <i32 22, i32 22, i32 22, i32 22>
  %2553 = add <4 x i32> %2549, <i32 16, i32 16, i32 16, i32 16>
  %2554 = add <4 x i32> %2553, %2552
  %2555 = ashr <4 x i32> %2554, <i32 5, i32 5, i32 5, i32 5>
  %2556 = icmp slt <4 x i32> %2555, %2532
  %2557 = icmp sgt <4 x i32> %2555, %2534
  %2558 = select <4 x i1> %2557, <4 x i32> %2534, <4 x i32> %2555
  %2559 = select <4 x i1> %2556, <4 x i32> %2532, <4 x i32> %2558
  %2560 = bitcast i32* %2545 to <4 x i32>*
  store <4 x i32> %2559, <4 x i32>* %2560, align 4, !alias.scope !101, !noalias !104
  %2561 = or i64 %2543, 4
  %2562 = getelementptr i32, i32* %2387, i64 %2561
  %2563 = getelementptr i32, i32* %2395, i64 %2561
  %2564 = bitcast i32* %2562 to <4 x i32>*
  %2565 = load <4 x i32>, <4 x i32>* %2564, align 4, !alias.scope !101, !noalias !104
  %2566 = mul nsw <4 x i32> %2565, <i32 23, i32 23, i32 23, i32 23>
  %2567 = bitcast i32* %2563 to <4 x i32>*
  %2568 = load <4 x i32>, <4 x i32>* %2567, align 4, !alias.scope !104
  %2569 = mul nsw <4 x i32> %2568, <i32 22, i32 22, i32 22, i32 22>
  %2570 = add <4 x i32> %2566, <i32 16, i32 16, i32 16, i32 16>
  %2571 = add <4 x i32> %2570, %2569
  %2572 = ashr <4 x i32> %2571, <i32 5, i32 5, i32 5, i32 5>
  %2573 = icmp slt <4 x i32> %2572, %2532
  %2574 = icmp sgt <4 x i32> %2572, %2534
  %2575 = select <4 x i1> %2574, <4 x i32> %2534, <4 x i32> %2572
  %2576 = select <4 x i1> %2573, <4 x i32> %2532, <4 x i32> %2575
  %2577 = bitcast i32* %2562 to <4 x i32>*
  store <4 x i32> %2576, <4 x i32>* %2577, align 4, !alias.scope !101, !noalias !104
  %2578 = add i64 %2543, 8
  %2579 = add i64 %2544, -2
  %2580 = icmp eq i64 %2579, 0
  br i1 %2580, label %2581, label %2542, !llvm.loop !106

2581:                                             ; preds = %2542, %2525
  %2582 = phi i64 [ 0, %2525 ], [ %2578, %2542 ]
  %2583 = icmp eq i64 %2538, 0
  br i1 %2583, label %2601, label %2584

2584:                                             ; preds = %2581
  %2585 = getelementptr i32, i32* %2387, i64 %2582
  %2586 = getelementptr i32, i32* %2395, i64 %2582
  %2587 = bitcast i32* %2585 to <4 x i32>*
  %2588 = load <4 x i32>, <4 x i32>* %2587, align 4, !alias.scope !101, !noalias !104
  %2589 = mul nsw <4 x i32> %2588, <i32 23, i32 23, i32 23, i32 23>
  %2590 = bitcast i32* %2586 to <4 x i32>*
  %2591 = load <4 x i32>, <4 x i32>* %2590, align 4, !alias.scope !104
  %2592 = mul nsw <4 x i32> %2591, <i32 22, i32 22, i32 22, i32 22>
  %2593 = add <4 x i32> %2589, <i32 16, i32 16, i32 16, i32 16>
  %2594 = add <4 x i32> %2593, %2592
  %2595 = ashr <4 x i32> %2594, <i32 5, i32 5, i32 5, i32 5>
  %2596 = icmp slt <4 x i32> %2595, %2532
  %2597 = icmp sgt <4 x i32> %2595, %2534
  %2598 = select <4 x i1> %2597, <4 x i32> %2534, <4 x i32> %2595
  %2599 = select <4 x i1> %2596, <4 x i32> %2532, <4 x i32> %2598
  %2600 = bitcast i32* %2585 to <4 x i32>*
  store <4 x i32> %2599, <4 x i32>* %2600, align 4, !alias.scope !101, !noalias !104
  br label %2601

2601:                                             ; preds = %2581, %2584
  %2602 = icmp eq i64 %2506, %2526
  br i1 %2602, label %2693, label %2603

2603:                                             ; preds = %2601, %2508, %2501
  %2604 = phi i32* [ %2387, %2508 ], [ %2387, %2501 ], [ %2527, %2601 ]
  %2605 = phi i32 [ %2400, %2508 ], [ %2400, %2501 ], [ %2529, %2601 ]
  %2606 = phi i32* [ %2395, %2508 ], [ %2395, %2501 ], [ %2530, %2601 ]
  %2607 = and i32 %2605, 1
  %2608 = icmp eq i32 %2607, 0
  br i1 %2608, label %2624, label %2609

2609:                                             ; preds = %2603
  %2610 = load i32, i32* %2604, align 4
  %2611 = mul nsw i32 %2610, 23
  %2612 = load i32, i32* %2606, align 4
  %2613 = mul nsw i32 %2612, 22
  %2614 = add i32 %2611, 16
  %2615 = add i32 %2614, %2613
  %2616 = ashr i32 %2615, 5
  %2617 = icmp slt i32 %2616, %2502
  %2618 = icmp sgt i32 %2616, %2503
  %2619 = select i1 %2618, i32 %2503, i32 %2616
  %2620 = select i1 %2617, i32 %2502, i32 %2619
  store i32 %2620, i32* %2604, align 4
  %2621 = getelementptr inbounds i32, i32* %2604, i64 1
  %2622 = getelementptr inbounds i32, i32* %2606, i64 1
  %2623 = add nsw i32 %2605, -1
  br label %2624

2624:                                             ; preds = %2609, %2603
  %2625 = phi i32* [ %2621, %2609 ], [ %2604, %2603 ]
  %2626 = phi i32 [ %2623, %2609 ], [ %2605, %2603 ]
  %2627 = phi i32* [ %2622, %2609 ], [ %2606, %2603 ]
  %2628 = icmp eq i32 %2605, 1
  br i1 %2628, label %2693, label %2629

2629:                                             ; preds = %2624, %2629
  %2630 = phi i32* [ %2657, %2629 ], [ %2625, %2624 ]
  %2631 = phi i32 [ %2659, %2629 ], [ %2626, %2624 ]
  %2632 = phi i32* [ %2658, %2629 ], [ %2627, %2624 ]
  %2633 = load i32, i32* %2630, align 4
  %2634 = mul nsw i32 %2633, 23
  %2635 = load i32, i32* %2632, align 4
  %2636 = mul nsw i32 %2635, 22
  %2637 = add i32 %2634, 16
  %2638 = add i32 %2637, %2636
  %2639 = ashr i32 %2638, 5
  %2640 = icmp slt i32 %2639, %2502
  %2641 = icmp sgt i32 %2639, %2503
  %2642 = select i1 %2641, i32 %2503, i32 %2639
  %2643 = select i1 %2640, i32 %2502, i32 %2642
  store i32 %2643, i32* %2630, align 4
  %2644 = getelementptr inbounds i32, i32* %2630, i64 1
  %2645 = getelementptr inbounds i32, i32* %2632, i64 1
  %2646 = load i32, i32* %2644, align 4
  %2647 = mul nsw i32 %2646, 23
  %2648 = load i32, i32* %2645, align 4
  %2649 = mul nsw i32 %2648, 22
  %2650 = add i32 %2647, 16
  %2651 = add i32 %2650, %2649
  %2652 = ashr i32 %2651, 5
  %2653 = icmp slt i32 %2652, %2502
  %2654 = icmp sgt i32 %2652, %2503
  %2655 = select i1 %2654, i32 %2503, i32 %2652
  %2656 = select i1 %2653, i32 %2502, i32 %2655
  store i32 %2656, i32* %2644, align 4
  %2657 = getelementptr inbounds i32, i32* %2630, i64 2
  %2658 = getelementptr inbounds i32, i32* %2632, i64 2
  %2659 = add nsw i32 %2631, -2
  %2660 = icmp eq i32 %2659, 0
  br i1 %2660, label %2693, label %2629, !llvm.loop !107

2661:                                             ; preds = %2410, %2661
  %2662 = phi i32* [ %2689, %2661 ], [ %2411, %2410 ]
  %2663 = phi i32 [ %2691, %2661 ], [ %2412, %2410 ]
  %2664 = phi i32* [ %2690, %2661 ], [ %2413, %2410 ]
  %2665 = load i32, i32* %2662, align 4
  %2666 = mul nsw i32 %2665, 27
  %2667 = load i32, i32* %2664, align 4
  %2668 = mul nsw i32 %2667, 17
  %2669 = add i32 %2666, 16
  %2670 = add i32 %2669, %2668
  %2671 = ashr i32 %2670, 5
  %2672 = icmp slt i32 %2671, %2404
  %2673 = icmp sgt i32 %2671, %2405
  %2674 = select i1 %2673, i32 %2405, i32 %2671
  %2675 = select i1 %2672, i32 %2404, i32 %2674
  store i32 %2675, i32* %2662, align 4
  %2676 = getelementptr inbounds i32, i32* %2662, i64 %160
  %2677 = load i32, i32* %2676, align 4
  %2678 = mul nsw i32 %2677, 17
  %2679 = getelementptr inbounds i32, i32* %2664, i64 %1305
  %2680 = load i32, i32* %2679, align 4
  %2681 = mul nsw i32 %2680, 27
  %2682 = add i32 %2678, 16
  %2683 = add i32 %2682, %2681
  %2684 = ashr i32 %2683, 5
  %2685 = icmp slt i32 %2684, %2404
  %2686 = icmp sgt i32 %2684, %2405
  %2687 = select i1 %2686, i32 %2405, i32 %2684
  %2688 = select i1 %2685, i32 %2404, i32 %2687
  store i32 %2688, i32* %2676, align 4
  %2689 = getelementptr inbounds i32, i32* %2662, i64 1
  %2690 = getelementptr inbounds i32, i32* %2664, i64 1
  %2691 = add nsw i32 %2663, -1
  %2692 = icmp eq i32 %2691, 0
  br i1 %2692, label %2693, label %2661, !llvm.loop !108

2693:                                             ; preds = %2661, %2624, %2629, %2497, %2601, %2384
  %2694 = getelementptr inbounds i32, i32* %167, i64 %2386
  %2695 = getelementptr inbounds i32, i32* %191, i64 %2389
  %2696 = getelementptr inbounds i32, i32* %2695, i64 %2391
  %2697 = getelementptr inbounds i32, i32* %2696, i64 %2394
  switch i32 %18, label %2990 [
    i32 1, label %2796
    i32 2, label %2698
  ]

2698:                                             ; preds = %2693
  %2699 = icmp eq i32 %2400, 0
  br i1 %2699, label %2990, label %2700

2700:                                             ; preds = %2698
  %2701 = load i32, i32* @grain_min, align 4
  %2702 = load i32, i32* @grain_max, align 4
  %2703 = add nsw i32 %2400, -1
  %2704 = zext i32 %2703 to i64
  %2705 = add nuw nsw i64 %2704, 1
  %2706 = icmp ult i64 %2705, 4
  br i1 %2706, label %2707, label %2711

2707:                                             ; preds = %2794, %2711, %2700
  %2708 = phi i32* [ %2694, %2711 ], [ %2694, %2700 ], [ %2750, %2794 ]
  %2709 = phi i32 [ %2400, %2711 ], [ %2400, %2700 ], [ %2752, %2794 ]
  %2710 = phi i32* [ %2697, %2711 ], [ %2697, %2700 ], [ %2753, %2794 ]
  br label %2958

2711:                                             ; preds = %2700
  %2712 = shl nsw i64 %2386, 2
  %2713 = getelementptr i8, i8* %166, i64 %2712
  %2714 = add nsw i32 %2400, -1
  %2715 = zext i32 %2714 to i64
  %2716 = shl nuw nsw i64 %2715, 2
  %2717 = add nsw i64 %2712, %2716
  %2718 = getelementptr i8, i8* %1325, i64 %2717
  %2719 = getelementptr i8, i8* %1327, i64 %2712
  %2720 = getelementptr i8, i8* %1329, i64 %2717
  %2721 = add nsw i64 %2394, %2389
  %2722 = add nsw i64 %2721, %2391
  %2723 = shl nsw i64 %2722, 2
  %2724 = getelementptr i8, i8* %190, i64 %2723
  %2725 = add nsw i64 %2723, %2716
  %2726 = getelementptr i8, i8* %1330, i64 %2725
  %2727 = getelementptr i8, i8* %1332, i64 %2723
  %2728 = getelementptr i8, i8* %1334, i64 %2725
  %2729 = icmp ult i8* %2713, %2720
  %2730 = icmp ult i8* %2719, %2718
  %2731 = and i1 %2729, %2730
  %2732 = icmp ult i8* %2713, %2726
  %2733 = icmp ult i8* %2724, %2718
  %2734 = and i1 %2732, %2733
  %2735 = or i1 %2731, %2734
  %2736 = icmp ult i8* %2713, %2728
  %2737 = icmp ult i8* %2727, %2718
  %2738 = and i1 %2736, %2737
  %2739 = or i1 %2735, %2738
  %2740 = icmp ult i8* %2719, %2726
  %2741 = icmp ult i8* %2724, %2720
  %2742 = and i1 %2740, %2741
  %2743 = or i1 %2739, %2742
  %2744 = icmp ult i8* %2719, %2728
  %2745 = icmp ult i8* %2727, %2720
  %2746 = and i1 %2744, %2745
  %2747 = or i1 %2743, %2746
  br i1 %2747, label %2707, label %2748

2748:                                             ; preds = %2711
  %2749 = and i64 %2705, 8589934588
  %2750 = getelementptr i32, i32* %2694, i64 %2749
  %2751 = trunc i64 %2749 to i32
  %2752 = sub i32 %2400, %2751
  %2753 = getelementptr i32, i32* %2697, i64 %2749
  %2754 = insertelement <4 x i32> undef, i32 %2701, i32 0
  %2755 = shufflevector <4 x i32> %2754, <4 x i32> undef, <4 x i32> zeroinitializer
  %2756 = insertelement <4 x i32> undef, i32 %2702, i32 0
  %2757 = shufflevector <4 x i32> %2756, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %2758

2758:                                             ; preds = %2758, %2748
  %2759 = phi i64 [ 0, %2748 ], [ %2792, %2758 ]
  %2760 = getelementptr i32, i32* %2694, i64 %2759
  %2761 = getelementptr i32, i32* %2697, i64 %2759
  %2762 = bitcast i32* %2760 to <4 x i32>*
  %2763 = load <4 x i32>, <4 x i32>* %2762, align 4, !alias.scope !109, !noalias !112
  %2764 = mul nsw <4 x i32> %2763, <i32 27, i32 27, i32 27, i32 27>
  %2765 = bitcast i32* %2761 to <4 x i32>*
  %2766 = load <4 x i32>, <4 x i32>* %2765, align 4, !alias.scope !116
  %2767 = mul nsw <4 x i32> %2766, <i32 17, i32 17, i32 17, i32 17>
  %2768 = add <4 x i32> %2764, <i32 16, i32 16, i32 16, i32 16>
  %2769 = add <4 x i32> %2768, %2767
  %2770 = ashr <4 x i32> %2769, <i32 5, i32 5, i32 5, i32 5>
  %2771 = icmp slt <4 x i32> %2770, %2755
  %2772 = icmp sgt <4 x i32> %2770, %2757
  %2773 = select <4 x i1> %2772, <4 x i32> %2757, <4 x i32> %2770
  %2774 = select <4 x i1> %2771, <4 x i32> %2755, <4 x i32> %2773
  %2775 = bitcast i32* %2760 to <4 x i32>*
  store <4 x i32> %2774, <4 x i32>* %2775, align 4, !alias.scope !109, !noalias !112
  %2776 = getelementptr inbounds i32, i32* %2760, i64 %160
  %2777 = bitcast i32* %2776 to <4 x i32>*
  %2778 = load <4 x i32>, <4 x i32>* %2777, align 4, !alias.scope !117, !noalias !118
  %2779 = mul nsw <4 x i32> %2778, <i32 17, i32 17, i32 17, i32 17>
  %2780 = getelementptr inbounds i32, i32* %2761, i64 %1305
  %2781 = bitcast i32* %2780 to <4 x i32>*
  %2782 = load <4 x i32>, <4 x i32>* %2781, align 4, !alias.scope !119
  %2783 = mul nsw <4 x i32> %2782, <i32 27, i32 27, i32 27, i32 27>
  %2784 = add <4 x i32> %2779, <i32 16, i32 16, i32 16, i32 16>
  %2785 = add <4 x i32> %2784, %2783
  %2786 = ashr <4 x i32> %2785, <i32 5, i32 5, i32 5, i32 5>
  %2787 = icmp slt <4 x i32> %2786, %2755
  %2788 = icmp sgt <4 x i32> %2786, %2757
  %2789 = select <4 x i1> %2788, <4 x i32> %2757, <4 x i32> %2786
  %2790 = select <4 x i1> %2787, <4 x i32> %2755, <4 x i32> %2789
  %2791 = bitcast i32* %2776 to <4 x i32>*
  store <4 x i32> %2790, <4 x i32>* %2791, align 4, !alias.scope !117, !noalias !118
  %2792 = add i64 %2759, 4
  %2793 = icmp eq i64 %2792, %2749
  br i1 %2793, label %2794, label %2758, !llvm.loop !120

2794:                                             ; preds = %2758
  %2795 = icmp eq i64 %2705, %2749
  br i1 %2795, label %2990, label %2707

2796:                                             ; preds = %2693
  %2797 = icmp eq i32 %2400, 0
  br i1 %2797, label %2990, label %2798

2798:                                             ; preds = %2796
  %2799 = load i32, i32* @grain_min, align 4
  %2800 = load i32, i32* @grain_max, align 4
  %2801 = add nsw i32 %2400, -1
  %2802 = zext i32 %2801 to i64
  %2803 = add nuw nsw i64 %2802, 1
  %2804 = icmp ult i64 %2803, 4
  br i1 %2804, label %2900, label %2805

2805:                                             ; preds = %2798
  %2806 = shl nsw i64 %2386, 2
  %2807 = getelementptr i8, i8* %166, i64 %2806
  %2808 = add nsw i32 %2400, -1
  %2809 = zext i32 %2808 to i64
  %2810 = shl nuw nsw i64 %2809, 2
  %2811 = add nsw i64 %2806, %2810
  %2812 = getelementptr i8, i8* %1323, i64 %2811
  %2813 = add nsw i64 %2394, %2389
  %2814 = add nsw i64 %2813, %2391
  %2815 = shl nsw i64 %2814, 2
  %2816 = getelementptr i8, i8* %190, i64 %2815
  %2817 = add nsw i64 %2815, %2810
  %2818 = getelementptr i8, i8* %1324, i64 %2817
  %2819 = icmp ult i8* %2807, %2818
  %2820 = icmp ult i8* %2816, %2812
  %2821 = and i1 %2819, %2820
  br i1 %2821, label %2900, label %2822

2822:                                             ; preds = %2805
  %2823 = and i64 %2803, 8589934588
  %2824 = getelementptr i32, i32* %2694, i64 %2823
  %2825 = trunc i64 %2823 to i32
  %2826 = sub i32 %2400, %2825
  %2827 = getelementptr i32, i32* %2697, i64 %2823
  %2828 = insertelement <4 x i32> undef, i32 %2799, i32 0
  %2829 = shufflevector <4 x i32> %2828, <4 x i32> undef, <4 x i32> zeroinitializer
  %2830 = insertelement <4 x i32> undef, i32 %2800, i32 0
  %2831 = shufflevector <4 x i32> %2830, <4 x i32> undef, <4 x i32> zeroinitializer
  %2832 = add nsw i64 %2823, -4
  %2833 = lshr exact i64 %2832, 2
  %2834 = add nuw nsw i64 %2833, 1
  %2835 = and i64 %2834, 1
  %2836 = icmp eq i64 %2832, 0
  br i1 %2836, label %2878, label %2837

2837:                                             ; preds = %2822
  %2838 = sub nuw nsw i64 %2834, %2835
  br label %2839

2839:                                             ; preds = %2839, %2837
  %2840 = phi i64 [ 0, %2837 ], [ %2875, %2839 ]
  %2841 = phi i64 [ %2838, %2837 ], [ %2876, %2839 ]
  %2842 = getelementptr i32, i32* %2694, i64 %2840
  %2843 = getelementptr i32, i32* %2697, i64 %2840
  %2844 = bitcast i32* %2842 to <4 x i32>*
  %2845 = load <4 x i32>, <4 x i32>* %2844, align 4, !alias.scope !121, !noalias !124
  %2846 = mul nsw <4 x i32> %2845, <i32 23, i32 23, i32 23, i32 23>
  %2847 = bitcast i32* %2843 to <4 x i32>*
  %2848 = load <4 x i32>, <4 x i32>* %2847, align 4, !alias.scope !124
  %2849 = mul nsw <4 x i32> %2848, <i32 22, i32 22, i32 22, i32 22>
  %2850 = add <4 x i32> %2846, <i32 16, i32 16, i32 16, i32 16>
  %2851 = add <4 x i32> %2850, %2849
  %2852 = ashr <4 x i32> %2851, <i32 5, i32 5, i32 5, i32 5>
  %2853 = icmp slt <4 x i32> %2852, %2829
  %2854 = icmp sgt <4 x i32> %2852, %2831
  %2855 = select <4 x i1> %2854, <4 x i32> %2831, <4 x i32> %2852
  %2856 = select <4 x i1> %2853, <4 x i32> %2829, <4 x i32> %2855
  %2857 = bitcast i32* %2842 to <4 x i32>*
  store <4 x i32> %2856, <4 x i32>* %2857, align 4, !alias.scope !121, !noalias !124
  %2858 = or i64 %2840, 4
  %2859 = getelementptr i32, i32* %2694, i64 %2858
  %2860 = getelementptr i32, i32* %2697, i64 %2858
  %2861 = bitcast i32* %2859 to <4 x i32>*
  %2862 = load <4 x i32>, <4 x i32>* %2861, align 4, !alias.scope !121, !noalias !124
  %2863 = mul nsw <4 x i32> %2862, <i32 23, i32 23, i32 23, i32 23>
  %2864 = bitcast i32* %2860 to <4 x i32>*
  %2865 = load <4 x i32>, <4 x i32>* %2864, align 4, !alias.scope !124
  %2866 = mul nsw <4 x i32> %2865, <i32 22, i32 22, i32 22, i32 22>
  %2867 = add <4 x i32> %2863, <i32 16, i32 16, i32 16, i32 16>
  %2868 = add <4 x i32> %2867, %2866
  %2869 = ashr <4 x i32> %2868, <i32 5, i32 5, i32 5, i32 5>
  %2870 = icmp slt <4 x i32> %2869, %2829
  %2871 = icmp sgt <4 x i32> %2869, %2831
  %2872 = select <4 x i1> %2871, <4 x i32> %2831, <4 x i32> %2869
  %2873 = select <4 x i1> %2870, <4 x i32> %2829, <4 x i32> %2872
  %2874 = bitcast i32* %2859 to <4 x i32>*
  store <4 x i32> %2873, <4 x i32>* %2874, align 4, !alias.scope !121, !noalias !124
  %2875 = add i64 %2840, 8
  %2876 = add i64 %2841, -2
  %2877 = icmp eq i64 %2876, 0
  br i1 %2877, label %2878, label %2839, !llvm.loop !126

2878:                                             ; preds = %2839, %2822
  %2879 = phi i64 [ 0, %2822 ], [ %2875, %2839 ]
  %2880 = icmp eq i64 %2835, 0
  br i1 %2880, label %2898, label %2881

2881:                                             ; preds = %2878
  %2882 = getelementptr i32, i32* %2694, i64 %2879
  %2883 = getelementptr i32, i32* %2697, i64 %2879
  %2884 = bitcast i32* %2882 to <4 x i32>*
  %2885 = load <4 x i32>, <4 x i32>* %2884, align 4, !alias.scope !121, !noalias !124
  %2886 = mul nsw <4 x i32> %2885, <i32 23, i32 23, i32 23, i32 23>
  %2887 = bitcast i32* %2883 to <4 x i32>*
  %2888 = load <4 x i32>, <4 x i32>* %2887, align 4, !alias.scope !124
  %2889 = mul nsw <4 x i32> %2888, <i32 22, i32 22, i32 22, i32 22>
  %2890 = add <4 x i32> %2886, <i32 16, i32 16, i32 16, i32 16>
  %2891 = add <4 x i32> %2890, %2889
  %2892 = ashr <4 x i32> %2891, <i32 5, i32 5, i32 5, i32 5>
  %2893 = icmp slt <4 x i32> %2892, %2829
  %2894 = icmp sgt <4 x i32> %2892, %2831
  %2895 = select <4 x i1> %2894, <4 x i32> %2831, <4 x i32> %2892
  %2896 = select <4 x i1> %2893, <4 x i32> %2829, <4 x i32> %2895
  %2897 = bitcast i32* %2882 to <4 x i32>*
  store <4 x i32> %2896, <4 x i32>* %2897, align 4, !alias.scope !121, !noalias !124
  br label %2898

2898:                                             ; preds = %2878, %2881
  %2899 = icmp eq i64 %2803, %2823
  br i1 %2899, label %2990, label %2900

2900:                                             ; preds = %2898, %2805, %2798
  %2901 = phi i32* [ %2694, %2805 ], [ %2694, %2798 ], [ %2824, %2898 ]
  %2902 = phi i32 [ %2400, %2805 ], [ %2400, %2798 ], [ %2826, %2898 ]
  %2903 = phi i32* [ %2697, %2805 ], [ %2697, %2798 ], [ %2827, %2898 ]
  %2904 = and i32 %2902, 1
  %2905 = icmp eq i32 %2904, 0
  br i1 %2905, label %2921, label %2906

2906:                                             ; preds = %2900
  %2907 = load i32, i32* %2901, align 4
  %2908 = mul nsw i32 %2907, 23
  %2909 = load i32, i32* %2903, align 4
  %2910 = mul nsw i32 %2909, 22
  %2911 = add i32 %2908, 16
  %2912 = add i32 %2911, %2910
  %2913 = ashr i32 %2912, 5
  %2914 = icmp slt i32 %2913, %2799
  %2915 = icmp sgt i32 %2913, %2800
  %2916 = select i1 %2915, i32 %2800, i32 %2913
  %2917 = select i1 %2914, i32 %2799, i32 %2916
  store i32 %2917, i32* %2901, align 4
  %2918 = getelementptr inbounds i32, i32* %2901, i64 1
  %2919 = getelementptr inbounds i32, i32* %2903, i64 1
  %2920 = add nsw i32 %2902, -1
  br label %2921

2921:                                             ; preds = %2906, %2900
  %2922 = phi i32* [ %2918, %2906 ], [ %2901, %2900 ]
  %2923 = phi i32 [ %2920, %2906 ], [ %2902, %2900 ]
  %2924 = phi i32* [ %2919, %2906 ], [ %2903, %2900 ]
  %2925 = icmp eq i32 %2902, 1
  br i1 %2925, label %2990, label %2926

2926:                                             ; preds = %2921, %2926
  %2927 = phi i32* [ %2954, %2926 ], [ %2922, %2921 ]
  %2928 = phi i32 [ %2956, %2926 ], [ %2923, %2921 ]
  %2929 = phi i32* [ %2955, %2926 ], [ %2924, %2921 ]
  %2930 = load i32, i32* %2927, align 4
  %2931 = mul nsw i32 %2930, 23
  %2932 = load i32, i32* %2929, align 4
  %2933 = mul nsw i32 %2932, 22
  %2934 = add i32 %2931, 16
  %2935 = add i32 %2934, %2933
  %2936 = ashr i32 %2935, 5
  %2937 = icmp slt i32 %2936, %2799
  %2938 = icmp sgt i32 %2936, %2800
  %2939 = select i1 %2938, i32 %2800, i32 %2936
  %2940 = select i1 %2937, i32 %2799, i32 %2939
  store i32 %2940, i32* %2927, align 4
  %2941 = getelementptr inbounds i32, i32* %2927, i64 1
  %2942 = getelementptr inbounds i32, i32* %2929, i64 1
  %2943 = load i32, i32* %2941, align 4
  %2944 = mul nsw i32 %2943, 23
  %2945 = load i32, i32* %2942, align 4
  %2946 = mul nsw i32 %2945, 22
  %2947 = add i32 %2944, 16
  %2948 = add i32 %2947, %2946
  %2949 = ashr i32 %2948, 5
  %2950 = icmp slt i32 %2949, %2799
  %2951 = icmp sgt i32 %2949, %2800
  %2952 = select i1 %2951, i32 %2800, i32 %2949
  %2953 = select i1 %2950, i32 %2799, i32 %2952
  store i32 %2953, i32* %2941, align 4
  %2954 = getelementptr inbounds i32, i32* %2927, i64 2
  %2955 = getelementptr inbounds i32, i32* %2929, i64 2
  %2956 = add nsw i32 %2928, -2
  %2957 = icmp eq i32 %2956, 0
  br i1 %2957, label %2990, label %2926, !llvm.loop !127

2958:                                             ; preds = %2707, %2958
  %2959 = phi i32* [ %2986, %2958 ], [ %2708, %2707 ]
  %2960 = phi i32 [ %2988, %2958 ], [ %2709, %2707 ]
  %2961 = phi i32* [ %2987, %2958 ], [ %2710, %2707 ]
  %2962 = load i32, i32* %2959, align 4
  %2963 = mul nsw i32 %2962, 27
  %2964 = load i32, i32* %2961, align 4
  %2965 = mul nsw i32 %2964, 17
  %2966 = add i32 %2963, 16
  %2967 = add i32 %2966, %2965
  %2968 = ashr i32 %2967, 5
  %2969 = icmp slt i32 %2968, %2701
  %2970 = icmp sgt i32 %2968, %2702
  %2971 = select i1 %2970, i32 %2702, i32 %2968
  %2972 = select i1 %2969, i32 %2701, i32 %2971
  store i32 %2972, i32* %2959, align 4
  %2973 = getelementptr inbounds i32, i32* %2959, i64 %160
  %2974 = load i32, i32* %2973, align 4
  %2975 = mul nsw i32 %2974, 17
  %2976 = getelementptr inbounds i32, i32* %2961, i64 %1305
  %2977 = load i32, i32* %2976, align 4
  %2978 = mul nsw i32 %2977, 27
  %2979 = add i32 %2975, 16
  %2980 = add i32 %2979, %2978
  %2981 = ashr i32 %2980, 5
  %2982 = icmp slt i32 %2981, %2701
  %2983 = icmp sgt i32 %2981, %2702
  %2984 = select i1 %2983, i32 %2702, i32 %2981
  %2985 = select i1 %2982, i32 %2701, i32 %2984
  store i32 %2985, i32* %2973, align 4
  %2986 = getelementptr inbounds i32, i32* %2959, i64 1
  %2987 = getelementptr inbounds i32, i32* %2961, i64 1
  %2988 = add nsw i32 %2960, -1
  %2989 = icmp eq i32 %2988, 0
  br i1 %2989, label %2990, label %2958, !llvm.loop !128

2990:                                             ; preds = %2958, %2921, %2926, %2794, %2898, %2499, %2401, %2693, %2698, %2796
  %2991 = shl nuw i64 %1590, 1
  br i1 %1295, label %3007, label %2992

2992:                                             ; preds = %2990
  %2993 = getelementptr inbounds i16, i16* %1546, i64 %2991
  %2994 = trunc i64 %1590 to i32
  %2995 = shl i32 %2994, %1300
  %2996 = sext i32 %2995 to i64
  %2997 = getelementptr inbounds i16, i16* %1550, i64 %2996
  %2998 = getelementptr inbounds i16, i16* %1551, i64 %2996
  %2999 = getelementptr inbounds i32, i32* %159, i64 %2991
  %3000 = getelementptr inbounds i32, i32* %165, i64 %2996
  %3001 = getelementptr inbounds i32, i32* %167, i64 %2996
  %3002 = sub nsw i64 %1310, %1590
  %3003 = icmp slt i64 %3002, 16
  %3004 = select i1 %3003, i64 %3002, i64 16
  %3005 = trunc i64 %3004 to i32
  tail call fastcc void @add_noise_to_block_hbd(%struct.aom_film_grain_t* %0, i16* %2993, i16* %2997, i16* %2998, i32 %6, i32 %7, i32* %2999, i32* %3000, i32* %3001, i32 %6, i32 %7, i32 1, i32 %3005, i32 %33, i32 %9, i32 %10, i32 %11)
  %3006 = zext i1 %1638 to i32
  br label %3027

3007:                                             ; preds = %2990
  %3008 = getelementptr inbounds i8, i8* %1553, i64 %2991
  %3009 = trunc i64 %1590 to i32
  %3010 = shl i32 %3009, %1300
  %3011 = sext i32 %3010 to i64
  %3012 = getelementptr inbounds i8, i8* %1554, i64 %3011
  %3013 = getelementptr inbounds i8, i8* %1555, i64 %3011
  %3014 = getelementptr inbounds i32, i32* %159, i64 %2991
  %3015 = getelementptr inbounds i32, i32* %165, i64 %3011
  %3016 = getelementptr inbounds i32, i32* %167, i64 %3011
  %3017 = sub nsw i64 %1310, %1590
  %3018 = icmp slt i64 %3017, 16
  %3019 = select i1 %3018, i64 %3017, i64 16
  %3020 = trunc i64 %3019 to i32
  tail call fastcc void @add_noise_to_block(%struct.aom_film_grain_t* %0, i8* %3008, i8* %3012, i8* %3013, i32 %6, i32 %7, i32* %3014, i32* %3015, i32* %3016, i32 %6, i32 %7, i32 1, i32 %3020, i32 %33, i32 %9, i32 %10, i32 %11)
  %3021 = zext i1 %1638 to i32
  br label %3064

3022:                                             ; preds = %1711
  %3023 = zext i1 %1638 to i32
  %3024 = trunc i64 %1590 to i32
  %3025 = sext i32 %1636 to i64
  %3026 = sub nsw i64 %1310, %1590
  br i1 %1295, label %3064, label %3027

3027:                                             ; preds = %3022, %2992
  %3028 = phi i64 [ %3002, %2992 ], [ %3026, %3022 ]
  %3029 = phi i64 [ %2391, %2992 ], [ %3025, %3022 ]
  %3030 = phi i32 [ %2994, %2992 ], [ %3024, %3022 ]
  %3031 = phi i32 [ %3006, %2992 ], [ %3023, %3022 ]
  %3032 = or i32 %3031, %3030
  %3033 = shl nuw i32 %3032, 1
  %3034 = sext i32 %3033 to i64
  %3035 = getelementptr inbounds i16, i16* %1559, i64 %3034
  %3036 = shl i32 %3032, %1300
  %3037 = sext i32 %3036 to i64
  %3038 = getelementptr inbounds i16, i16* %1563, i64 %3037
  %3039 = getelementptr inbounds i16, i16* %1564, i64 %3037
  %3040 = add nuw nsw i32 %1565, %1630
  %3041 = mul nuw nsw i32 %3040, 82
  %3042 = zext i32 %3041 to i64
  %3043 = getelementptr inbounds i32, i32* %185, i64 %3042
  %3044 = zext i32 %1632 to i64
  %3045 = getelementptr inbounds i32, i32* %3043, i64 %3044
  %3046 = shl nuw nsw i32 %3031, 1
  %3047 = zext i32 %3046 to i64
  %3048 = getelementptr inbounds i32, i32* %3045, i64 %3047
  %3049 = add nsw i32 %1566, %1634
  %3050 = mul nsw i32 %3049, %29
  %3051 = sext i32 %3050 to i64
  %3052 = getelementptr inbounds i32, i32* %189, i64 %3051
  %3053 = getelementptr inbounds i32, i32* %3052, i64 %3029
  %3054 = shl i32 %3031, %1300
  %3055 = sext i32 %3054 to i64
  %3056 = getelementptr inbounds i32, i32* %3053, i64 %3055
  %3057 = getelementptr inbounds i32, i32* %191, i64 %3051
  %3058 = getelementptr inbounds i32, i32* %3057, i64 %3029
  %3059 = getelementptr inbounds i32, i32* %3058, i64 %3055
  %3060 = icmp slt i64 %3028, 16
  %3061 = select i1 %3060, i64 %3028, i64 16
  %3062 = trunc i64 %3061 to i32
  %3063 = sub nsw i32 %3062, %3031
  tail call fastcc void @add_noise_to_block_hbd(%struct.aom_film_grain_t* %0, i16* %3035, i16* %3038, i16* %3039, i32 %6, i32 %7, i32* %3048, i32* %3056, i32* %3059, i32 82, i32 %29, i32 %1567, i32 %3063, i32 %33, i32 %9, i32 %10, i32 %11)
  br label %3101

3064:                                             ; preds = %3022, %3007
  %3065 = phi i64 [ %3017, %3007 ], [ %3026, %3022 ]
  %3066 = phi i64 [ %2391, %3007 ], [ %3025, %3022 ]
  %3067 = phi i32 [ %3009, %3007 ], [ %3024, %3022 ]
  %3068 = phi i32 [ %3021, %3007 ], [ %3023, %3022 ]
  %3069 = or i32 %3068, %3067
  %3070 = shl nuw i32 %3069, 1
  %3071 = sext i32 %3070 to i64
  %3072 = getelementptr inbounds i8, i8* %1571, i64 %3071
  %3073 = shl i32 %3069, %1300
  %3074 = sext i32 %3073 to i64
  %3075 = getelementptr inbounds i8, i8* %1575, i64 %3074
  %3076 = getelementptr inbounds i8, i8* %1576, i64 %3074
  %3077 = add nuw nsw i32 %1577, %1630
  %3078 = mul nuw nsw i32 %3077, 82
  %3079 = zext i32 %3078 to i64
  %3080 = getelementptr inbounds i32, i32* %185, i64 %3079
  %3081 = zext i32 %1632 to i64
  %3082 = getelementptr inbounds i32, i32* %3080, i64 %3081
  %3083 = shl nuw nsw i32 %3068, 1
  %3084 = zext i32 %3083 to i64
  %3085 = getelementptr inbounds i32, i32* %3082, i64 %3084
  %3086 = add nsw i32 %1578, %1634
  %3087 = mul nsw i32 %3086, %29
  %3088 = sext i32 %3087 to i64
  %3089 = getelementptr inbounds i32, i32* %189, i64 %3088
  %3090 = getelementptr inbounds i32, i32* %3089, i64 %3066
  %3091 = shl i32 %3068, %1300
  %3092 = sext i32 %3091 to i64
  %3093 = getelementptr inbounds i32, i32* %3090, i64 %3092
  %3094 = getelementptr inbounds i32, i32* %191, i64 %3088
  %3095 = getelementptr inbounds i32, i32* %3094, i64 %3066
  %3096 = getelementptr inbounds i32, i32* %3095, i64 %3092
  %3097 = icmp slt i64 %3065, 16
  %3098 = select i1 %3097, i64 %3065, i64 16
  %3099 = trunc i64 %3098 to i32
  %3100 = sub nsw i32 %3099, %3068
  tail call fastcc void @add_noise_to_block(%struct.aom_film_grain_t* %0, i8* %3072, i8* %3075, i8* %3076, i32 %6, i32 %7, i32* %3085, i32* %3093, i32* %3096, i32 82, i32 %29, i32 %1579, i32 %3100, i32 %33, i32 %9, i32 %10, i32 %11)
  br label %3101

3101:                                             ; preds = %3064, %3027
  br i1 %1294, label %3102, label %3471

3102:                                             ; preds = %3101
  br i1 %1637, label %3105, label %3103

3103:                                             ; preds = %3102
  %3104 = load i32, i32* @chroma_subblock_size_y, align 4
  br label %3201

3105:                                             ; preds = %3102
  %3106 = shl nuw i64 %1590, 1
  %3107 = getelementptr inbounds i32, i32* %159, i64 %3106
  %3108 = bitcast i32* %3107 to i64*
  %3109 = load i64, i64* %1320, align 4
  store i64 %3109, i64* %3108, align 4
  %3110 = getelementptr inbounds i32, i32* %3107, i64 %156
  %3111 = bitcast i32* %3110 to i64*
  %3112 = load i64, i64* %1322, align 4
  store i64 %3112, i64* %3111, align 4
  %3113 = load i32, i32* @chroma_subblock_size_y, align 4
  %3114 = shl i32 %3113, %1300
  %3115 = sext i32 %3114 to i64
  %3116 = trunc i64 %1590 to i32
  %3117 = shl i32 %3116, %1300
  %3118 = sext i32 %3117 to i64
  br i1 %1307, label %3201, label %3119

3119:                                             ; preds = %3105
  %3120 = getelementptr inbounds i32, i32* %165, i64 %3118
  %3121 = getelementptr inbounds i32, i32* %177, i64 %3115
  br i1 %1446, label %3134, label %3122

3122:                                             ; preds = %3119, %3122
  %3123 = phi i32 [ %3131, %3122 ], [ %18, %3119 ]
  %3124 = phi i32* [ %3129, %3122 ], [ %3121, %3119 ]
  %3125 = phi i32* [ %3130, %3122 ], [ %3120, %3119 ]
  %3126 = phi i32 [ %3132, %3122 ], [ %1445, %3119 ]
  %3127 = bitcast i32* %3125 to i8*
  %3128 = bitcast i32* %3124 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3127, i8* align 4 %3128, i64 %174, i1 false) #6
  %3129 = getelementptr inbounds i32, i32* %3124, i64 %173
  %3130 = getelementptr inbounds i32, i32* %3125, i64 %160
  %3131 = add nsw i32 %3123, -1
  %3132 = add i32 %3126, -1
  %3133 = icmp eq i32 %3132, 0
  br i1 %3133, label %3134, label %3122, !llvm.loop !129

3134:                                             ; preds = %3122, %3119
  %3135 = phi i32 [ %18, %3119 ], [ %3131, %3122 ]
  %3136 = phi i32* [ %3121, %3119 ], [ %3129, %3122 ]
  %3137 = phi i32* [ %3120, %3119 ], [ %3130, %3122 ]
  br i1 %1447, label %3160, label %3138

3138:                                             ; preds = %3134, %3138
  %3139 = phi i32 [ %3158, %3138 ], [ %3135, %3134 ]
  %3140 = phi i32* [ %3156, %3138 ], [ %3136, %3134 ]
  %3141 = phi i32* [ %3157, %3138 ], [ %3137, %3134 ]
  %3142 = bitcast i32* %3141 to i8*
  %3143 = bitcast i32* %3140 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3142, i8* align 4 %3143, i64 %174, i1 false) #6
  %3144 = getelementptr inbounds i32, i32* %3140, i64 %173
  %3145 = getelementptr inbounds i32, i32* %3141, i64 %160
  %3146 = bitcast i32* %3145 to i8*
  %3147 = bitcast i32* %3144 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3146, i8* align 4 %3147, i64 %174, i1 false) #6
  %3148 = getelementptr inbounds i32, i32* %3144, i64 %173
  %3149 = getelementptr inbounds i32, i32* %3145, i64 %160
  %3150 = bitcast i32* %3149 to i8*
  %3151 = bitcast i32* %3148 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3150, i8* align 4 %3151, i64 %174, i1 false) #6
  %3152 = getelementptr inbounds i32, i32* %3148, i64 %173
  %3153 = getelementptr inbounds i32, i32* %3149, i64 %160
  %3154 = bitcast i32* %3153 to i8*
  %3155 = bitcast i32* %3152 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3154, i8* align 4 %3155, i64 %174, i1 false) #6
  %3156 = getelementptr inbounds i32, i32* %3152, i64 %173
  %3157 = getelementptr inbounds i32, i32* %3153, i64 %160
  %3158 = add nsw i32 %3139, -4
  %3159 = icmp eq i32 %3158, 0
  br i1 %3159, label %3160, label %3138

3160:                                             ; preds = %3138, %3134
  %3161 = getelementptr inbounds i32, i32* %167, i64 %3118
  %3162 = getelementptr inbounds i32, i32* %183, i64 %3115
  br i1 %1449, label %3175, label %3163

3163:                                             ; preds = %3160, %3163
  %3164 = phi i32 [ %3172, %3163 ], [ %18, %3160 ]
  %3165 = phi i32* [ %3170, %3163 ], [ %3162, %3160 ]
  %3166 = phi i32* [ %3171, %3163 ], [ %3161, %3160 ]
  %3167 = phi i32 [ %3173, %3163 ], [ %1448, %3160 ]
  %3168 = bitcast i32* %3166 to i8*
  %3169 = bitcast i32* %3165 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3168, i8* align 4 %3169, i64 %174, i1 false) #6
  %3170 = getelementptr inbounds i32, i32* %3165, i64 %173
  %3171 = getelementptr inbounds i32, i32* %3166, i64 %160
  %3172 = add nsw i32 %3164, -1
  %3173 = add i32 %3167, -1
  %3174 = icmp eq i32 %3173, 0
  br i1 %3174, label %3175, label %3163, !llvm.loop !130

3175:                                             ; preds = %3163, %3160
  %3176 = phi i32 [ %18, %3160 ], [ %3172, %3163 ]
  %3177 = phi i32* [ %3162, %3160 ], [ %3170, %3163 ]
  %3178 = phi i32* [ %3161, %3160 ], [ %3171, %3163 ]
  br i1 %1450, label %3201, label %3179

3179:                                             ; preds = %3175, %3179
  %3180 = phi i32 [ %3199, %3179 ], [ %3176, %3175 ]
  %3181 = phi i32* [ %3197, %3179 ], [ %3177, %3175 ]
  %3182 = phi i32* [ %3198, %3179 ], [ %3178, %3175 ]
  %3183 = bitcast i32* %3182 to i8*
  %3184 = bitcast i32* %3181 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3183, i8* align 4 %3184, i64 %174, i1 false) #6
  %3185 = getelementptr inbounds i32, i32* %3181, i64 %173
  %3186 = getelementptr inbounds i32, i32* %3182, i64 %160
  %3187 = bitcast i32* %3186 to i8*
  %3188 = bitcast i32* %3185 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3187, i8* align 4 %3188, i64 %174, i1 false) #6
  %3189 = getelementptr inbounds i32, i32* %3185, i64 %173
  %3190 = getelementptr inbounds i32, i32* %3186, i64 %160
  %3191 = bitcast i32* %3190 to i8*
  %3192 = bitcast i32* %3189 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3191, i8* align 4 %3192, i64 %174, i1 false) #6
  %3193 = getelementptr inbounds i32, i32* %3189, i64 %173
  %3194 = getelementptr inbounds i32, i32* %3190, i64 %160
  %3195 = bitcast i32* %3194 to i8*
  %3196 = bitcast i32* %3193 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3195, i8* align 4 %3196, i64 %174, i1 false) #6
  %3197 = getelementptr inbounds i32, i32* %3193, i64 %173
  %3198 = getelementptr inbounds i32, i32* %3194, i64 %160
  %3199 = add nsw i32 %3180, -4
  %3200 = icmp eq i32 %3199, 0
  br i1 %3200, label %3201, label %3179

3201:                                             ; preds = %3175, %3179, %3103, %3105
  %3202 = phi i64 [ 0, %3103 ], [ %3106, %3105 ], [ %3106, %3179 ], [ %3106, %3175 ]
  %3203 = phi i32 [ %3104, %3103 ], [ %3113, %3105 ], [ %3113, %3179 ], [ %3113, %3175 ]
  %3204 = mul nuw nsw i32 %1628, 164
  %3205 = add nuw nsw i32 %3204, 3362
  %3206 = zext i32 %3205 to i64
  %3207 = getelementptr inbounds i32, i32* %185, i64 %3206
  %3208 = zext i32 %1632 to i64
  %3209 = getelementptr inbounds i32, i32* %3207, i64 %3208
  %3210 = select i1 %1637, i32 2, i32 0
  %3211 = zext i32 %3210 to i64
  %3212 = getelementptr inbounds i32, i32* %3209, i64 %3211
  %3213 = trunc i64 %1590 to i32
  %3214 = or i32 %3213, 1
  %3215 = select i1 %1637, i32 %3214, i32 0
  %3216 = shl nuw i32 %3215, 1
  %3217 = sext i32 %3216 to i64
  %3218 = getelementptr inbounds i32, i32* %159, i64 %3217
  %3219 = sub nsw i64 %1311, %3202
  %3220 = trunc i64 %3219 to i32
  %3221 = icmp slt i64 %3219, 32
  %3222 = select i1 %3221, i64 %3219, i64 32
  %3223 = trunc i64 %3222 to i32
  %3224 = sub nsw i32 %3223, %3210
  %3225 = sext i32 %3224 to i64
  %3226 = shl nsw i64 %3225, 2
  %3227 = bitcast i32* %3218 to i8*
  %3228 = bitcast i32* %3212 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3227, i8* align 4 %3228, i64 %3226, i1 false) #6
  %3229 = getelementptr inbounds i32, i32* %3212, i64 82
  %3230 = getelementptr inbounds i32, i32* %3218, i64 %156
  %3231 = bitcast i32* %3230 to i8*
  %3232 = bitcast i32* %3229 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3231, i8* align 4 %3232, i64 %3226, i1 false) #6
  %3233 = add nsw i32 %3203, %1634
  %3234 = mul nsw i32 %3233, %29
  %3235 = sext i32 %3234 to i64
  %3236 = sext i32 %1636 to i64
  %3237 = select i1 %1637, i32 %23, i32 0
  %3238 = sext i32 %3237 to i64
  %3239 = shl i32 %3215, %1300
  %3240 = sext i32 %3239 to i64
  %3241 = load i32, i32* @chroma_subblock_size_x, align 4
  %3242 = ashr i32 %3220, %10
  br i1 %1307, label %3334, label %3243

3243:                                             ; preds = %3201
  %3244 = icmp slt i32 %3241, %3242
  %3245 = select i1 %3244, i32 %3241, i32 %3242
  %3246 = sub nsw i32 %3245, %3237
  %3247 = getelementptr inbounds i32, i32* %165, i64 %3240
  %3248 = getelementptr inbounds i32, i32* %189, i64 %3235
  %3249 = getelementptr inbounds i32, i32* %3248, i64 %3236
  %3250 = getelementptr inbounds i32, i32* %3249, i64 %3238
  %3251 = sext i32 %3246 to i64
  %3252 = shl nsw i64 %3251, 2
  br i1 %1452, label %3265, label %3253

3253:                                             ; preds = %3243, %3253
  %3254 = phi i32 [ %3262, %3253 ], [ %18, %3243 ]
  %3255 = phi i32* [ %3260, %3253 ], [ %3250, %3243 ]
  %3256 = phi i32* [ %3261, %3253 ], [ %3247, %3243 ]
  %3257 = phi i32 [ %3263, %3253 ], [ %1451, %3243 ]
  %3258 = bitcast i32* %3256 to i8*
  %3259 = bitcast i32* %3255 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3258, i8* align 4 %3259, i64 %3252, i1 false) #6
  %3260 = getelementptr inbounds i32, i32* %3255, i64 %1305
  %3261 = getelementptr inbounds i32, i32* %3256, i64 %160
  %3262 = add nsw i32 %3254, -1
  %3263 = add i32 %3257, -1
  %3264 = icmp eq i32 %3263, 0
  br i1 %3264, label %3265, label %3253, !llvm.loop !131

3265:                                             ; preds = %3253, %3243
  %3266 = phi i32 [ %18, %3243 ], [ %3262, %3253 ]
  %3267 = phi i32* [ %3250, %3243 ], [ %3260, %3253 ]
  %3268 = phi i32* [ %3247, %3243 ], [ %3261, %3253 ]
  br i1 %1453, label %3291, label %3269

3269:                                             ; preds = %3265, %3269
  %3270 = phi i32 [ %3289, %3269 ], [ %3266, %3265 ]
  %3271 = phi i32* [ %3287, %3269 ], [ %3267, %3265 ]
  %3272 = phi i32* [ %3288, %3269 ], [ %3268, %3265 ]
  %3273 = bitcast i32* %3272 to i8*
  %3274 = bitcast i32* %3271 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3273, i8* align 4 %3274, i64 %3252, i1 false) #6
  %3275 = getelementptr inbounds i32, i32* %3271, i64 %1305
  %3276 = getelementptr inbounds i32, i32* %3272, i64 %160
  %3277 = bitcast i32* %3276 to i8*
  %3278 = bitcast i32* %3275 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3277, i8* align 4 %3278, i64 %3252, i1 false) #6
  %3279 = getelementptr inbounds i32, i32* %3275, i64 %1305
  %3280 = getelementptr inbounds i32, i32* %3276, i64 %160
  %3281 = bitcast i32* %3280 to i8*
  %3282 = bitcast i32* %3279 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3281, i8* align 4 %3282, i64 %3252, i1 false) #6
  %3283 = getelementptr inbounds i32, i32* %3279, i64 %1305
  %3284 = getelementptr inbounds i32, i32* %3280, i64 %160
  %3285 = bitcast i32* %3284 to i8*
  %3286 = bitcast i32* %3283 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3285, i8* align 4 %3286, i64 %3252, i1 false) #6
  %3287 = getelementptr inbounds i32, i32* %3283, i64 %1305
  %3288 = getelementptr inbounds i32, i32* %3284, i64 %160
  %3289 = add nsw i32 %3270, -4
  %3290 = icmp eq i32 %3289, 0
  br i1 %3290, label %3291, label %3269

3291:                                             ; preds = %3269, %3265
  %3292 = getelementptr inbounds i32, i32* %167, i64 %3240
  %3293 = getelementptr inbounds i32, i32* %191, i64 %3235
  %3294 = getelementptr inbounds i32, i32* %3293, i64 %3236
  %3295 = getelementptr inbounds i32, i32* %3294, i64 %3238
  br i1 %1455, label %3308, label %3296

3296:                                             ; preds = %3291, %3296
  %3297 = phi i32 [ %3305, %3296 ], [ %18, %3291 ]
  %3298 = phi i32* [ %3303, %3296 ], [ %3295, %3291 ]
  %3299 = phi i32* [ %3304, %3296 ], [ %3292, %3291 ]
  %3300 = phi i32 [ %3306, %3296 ], [ %1454, %3291 ]
  %3301 = bitcast i32* %3299 to i8*
  %3302 = bitcast i32* %3298 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3301, i8* align 4 %3302, i64 %3252, i1 false) #6
  %3303 = getelementptr inbounds i32, i32* %3298, i64 %1305
  %3304 = getelementptr inbounds i32, i32* %3299, i64 %160
  %3305 = add nsw i32 %3297, -1
  %3306 = add i32 %3300, -1
  %3307 = icmp eq i32 %3306, 0
  br i1 %3307, label %3308, label %3296, !llvm.loop !132

3308:                                             ; preds = %3296, %3291
  %3309 = phi i32 [ %18, %3291 ], [ %3305, %3296 ]
  %3310 = phi i32* [ %3295, %3291 ], [ %3303, %3296 ]
  %3311 = phi i32* [ %3292, %3291 ], [ %3304, %3296 ]
  br i1 %1456, label %3334, label %3312

3312:                                             ; preds = %3308, %3312
  %3313 = phi i32 [ %3332, %3312 ], [ %3309, %3308 ]
  %3314 = phi i32* [ %3330, %3312 ], [ %3310, %3308 ]
  %3315 = phi i32* [ %3331, %3312 ], [ %3311, %3308 ]
  %3316 = bitcast i32* %3315 to i8*
  %3317 = bitcast i32* %3314 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3316, i8* align 4 %3317, i64 %3252, i1 false) #6
  %3318 = getelementptr inbounds i32, i32* %3314, i64 %1305
  %3319 = getelementptr inbounds i32, i32* %3315, i64 %160
  %3320 = bitcast i32* %3319 to i8*
  %3321 = bitcast i32* %3318 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3320, i8* align 4 %3321, i64 %3252, i1 false) #6
  %3322 = getelementptr inbounds i32, i32* %3318, i64 %1305
  %3323 = getelementptr inbounds i32, i32* %3319, i64 %160
  %3324 = bitcast i32* %3323 to i8*
  %3325 = bitcast i32* %3322 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3324, i8* align 4 %3325, i64 %3252, i1 false) #6
  %3326 = getelementptr inbounds i32, i32* %3322, i64 %1305
  %3327 = getelementptr inbounds i32, i32* %3323, i64 %160
  %3328 = bitcast i32* %3327 to i8*
  %3329 = bitcast i32* %3326 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3328, i8* align 4 %3329, i64 %3252, i1 false) #6
  %3330 = getelementptr inbounds i32, i32* %3326, i64 %1305
  %3331 = getelementptr inbounds i32, i32* %3327, i64 %160
  %3332 = add nsw i32 %3313, -4
  %3333 = icmp eq i32 %3332, 0
  br i1 %3333, label %3334, label %3312

3334:                                             ; preds = %3308, %3312, %3201
  br i1 %1514, label %3403, label %3335

3335:                                             ; preds = %3334
  %3336 = mul nuw nsw i32 %1630, 82
  %3337 = zext i32 %3336 to i64
  %3338 = getelementptr inbounds i32, i32* %1309, i64 %3337
  %3339 = getelementptr inbounds i32, i32* %3338, i64 %3208
  br i1 %1581, label %3353, label %3340

3340:                                             ; preds = %3335, %3340
  %3341 = phi i32 [ %3350, %3340 ], [ %1513, %3335 ]
  %3342 = phi i32* [ %3348, %3340 ], [ %3339, %3335 ]
  %3343 = phi i32* [ %3349, %3340 ], [ %169, %3335 ]
  %3344 = phi i32 [ %3351, %3340 ], [ %1580, %3335 ]
  %3345 = bitcast i32* %3342 to i64*
  %3346 = bitcast i32* %3343 to i64*
  %3347 = load i64, i64* %3345, align 4
  store i64 %3347, i64* %3346, align 4
  %3348 = getelementptr inbounds i32, i32* %3342, i64 82
  %3349 = getelementptr inbounds i32, i32* %3343, i64 2
  %3350 = add nsw i32 %3341, -1
  %3351 = add i32 %3344, -1
  %3352 = icmp eq i32 %3351, 0
  br i1 %3352, label %3353, label %3340, !llvm.loop !133

3353:                                             ; preds = %3340, %3335
  %3354 = phi i32 [ %1513, %3335 ], [ %3350, %3340 ]
  %3355 = phi i32* [ %3339, %3335 ], [ %3348, %3340 ]
  %3356 = phi i32* [ %169, %3335 ], [ %3349, %3340 ]
  br i1 %1582, label %3403, label %3357

3357:                                             ; preds = %3353, %3357
  %3358 = phi i32 [ %3401, %3357 ], [ %3354, %3353 ]
  %3359 = phi i32* [ %3399, %3357 ], [ %3355, %3353 ]
  %3360 = phi i32* [ %3400, %3357 ], [ %3356, %3353 ]
  %3361 = bitcast i32* %3359 to i64*
  %3362 = bitcast i32* %3360 to i64*
  %3363 = load i64, i64* %3361, align 4
  store i64 %3363, i64* %3362, align 4
  %3364 = getelementptr inbounds i32, i32* %3359, i64 82
  %3365 = getelementptr inbounds i32, i32* %3360, i64 2
  %3366 = bitcast i32* %3364 to i64*
  %3367 = bitcast i32* %3365 to i64*
  %3368 = load i64, i64* %3366, align 4
  store i64 %3368, i64* %3367, align 4
  %3369 = getelementptr inbounds i32, i32* %3359, i64 164
  %3370 = getelementptr inbounds i32, i32* %3360, i64 4
  %3371 = bitcast i32* %3369 to i64*
  %3372 = bitcast i32* %3370 to i64*
  %3373 = load i64, i64* %3371, align 4
  store i64 %3373, i64* %3372, align 4
  %3374 = getelementptr inbounds i32, i32* %3359, i64 246
  %3375 = getelementptr inbounds i32, i32* %3360, i64 6
  %3376 = bitcast i32* %3374 to i64*
  %3377 = bitcast i32* %3375 to i64*
  %3378 = load i64, i64* %3376, align 4
  store i64 %3378, i64* %3377, align 4
  %3379 = getelementptr inbounds i32, i32* %3359, i64 328
  %3380 = getelementptr inbounds i32, i32* %3360, i64 8
  %3381 = bitcast i32* %3379 to i64*
  %3382 = bitcast i32* %3380 to i64*
  %3383 = load i64, i64* %3381, align 4
  store i64 %3383, i64* %3382, align 4
  %3384 = getelementptr inbounds i32, i32* %3359, i64 410
  %3385 = getelementptr inbounds i32, i32* %3360, i64 10
  %3386 = bitcast i32* %3384 to i64*
  %3387 = bitcast i32* %3385 to i64*
  %3388 = load i64, i64* %3386, align 4
  store i64 %3388, i64* %3387, align 4
  %3389 = getelementptr inbounds i32, i32* %3359, i64 492
  %3390 = getelementptr inbounds i32, i32* %3360, i64 12
  %3391 = bitcast i32* %3389 to i64*
  %3392 = bitcast i32* %3390 to i64*
  %3393 = load i64, i64* %3391, align 4
  store i64 %3393, i64* %3392, align 4
  %3394 = getelementptr inbounds i32, i32* %3359, i64 574
  %3395 = getelementptr inbounds i32, i32* %3360, i64 14
  %3396 = bitcast i32* %3394 to i64*
  %3397 = bitcast i32* %3395 to i64*
  %3398 = load i64, i64* %3396, align 4
  store i64 %3398, i64* %3397, align 4
  %3399 = getelementptr inbounds i32, i32* %3359, i64 656
  %3400 = getelementptr inbounds i32, i32* %3360, i64 16
  %3401 = add nsw i32 %3358, -8
  %3402 = icmp eq i32 %3401, 0
  br i1 %3402, label %3403, label %3357

3403:                                             ; preds = %3353, %3357, %3334
  %3404 = mul nsw i32 %1634, %29
  %3405 = sext i32 %3404 to i64
  %3406 = sext i32 %3241 to i64
  %3407 = add nsw i32 %3203, %18
  %3408 = icmp slt i32 %3407, %1515
  %3409 = select i1 %3408, i32 %3407, i32 %1515
  %3410 = icmp eq i32 %3409, 0
  br i1 %3410, label %3471, label %3411

3411:                                             ; preds = %3403
  %3412 = getelementptr inbounds i32, i32* %189, i64 %3405
  %3413 = getelementptr inbounds i32, i32* %3412, i64 %3236
  %3414 = getelementptr inbounds i32, i32* %3413, i64 %3406
  %3415 = add nsw i32 %3409, -1
  %3416 = and i32 %3409, 3
  %3417 = icmp eq i32 %3416, 0
  br i1 %3417, label %3430, label %3418

3418:                                             ; preds = %3411, %3418
  %3419 = phi i32 [ %3427, %3418 ], [ %3409, %3411 ]
  %3420 = phi i32* [ %3425, %3418 ], [ %3414, %3411 ]
  %3421 = phi i32* [ %3426, %3418 ], [ %177, %3411 ]
  %3422 = phi i32 [ %3428, %3418 ], [ %3416, %3411 ]
  %3423 = bitcast i32* %3421 to i8*
  %3424 = bitcast i32* %3420 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3423, i8* align 4 %3424, i64 %174, i1 false) #6
  %3425 = getelementptr inbounds i32, i32* %3420, i64 %1305
  %3426 = getelementptr inbounds i32, i32* %3421, i64 %173
  %3427 = add nsw i32 %3419, -1
  %3428 = add i32 %3422, -1
  %3429 = icmp eq i32 %3428, 0
  br i1 %3429, label %3430, label %3418, !llvm.loop !134

3430:                                             ; preds = %3418, %3411
  %3431 = phi i32 [ %3409, %3411 ], [ %3427, %3418 ]
  %3432 = phi i32* [ %3414, %3411 ], [ %3425, %3418 ]
  %3433 = phi i32* [ %177, %3411 ], [ %3426, %3418 ]
  %3434 = icmp ult i32 %3415, 3
  br i1 %3434, label %3457, label %3435

3435:                                             ; preds = %3430, %3435
  %3436 = phi i32 [ %3455, %3435 ], [ %3431, %3430 ]
  %3437 = phi i32* [ %3453, %3435 ], [ %3432, %3430 ]
  %3438 = phi i32* [ %3454, %3435 ], [ %3433, %3430 ]
  %3439 = bitcast i32* %3438 to i8*
  %3440 = bitcast i32* %3437 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3439, i8* align 4 %3440, i64 %174, i1 false) #6
  %3441 = getelementptr inbounds i32, i32* %3437, i64 %1305
  %3442 = getelementptr inbounds i32, i32* %3438, i64 %173
  %3443 = bitcast i32* %3442 to i8*
  %3444 = bitcast i32* %3441 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3443, i8* align 4 %3444, i64 %174, i1 false) #6
  %3445 = getelementptr inbounds i32, i32* %3441, i64 %1305
  %3446 = getelementptr inbounds i32, i32* %3442, i64 %173
  %3447 = bitcast i32* %3446 to i8*
  %3448 = bitcast i32* %3445 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3447, i8* align 4 %3448, i64 %174, i1 false) #6
  %3449 = getelementptr inbounds i32, i32* %3445, i64 %1305
  %3450 = getelementptr inbounds i32, i32* %3446, i64 %173
  %3451 = bitcast i32* %3450 to i8*
  %3452 = bitcast i32* %3449 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3451, i8* align 4 %3452, i64 %174, i1 false) #6
  %3453 = getelementptr inbounds i32, i32* %3449, i64 %1305
  %3454 = getelementptr inbounds i32, i32* %3450, i64 %173
  %3455 = add nsw i32 %3436, -4
  %3456 = icmp eq i32 %3455, 0
  br i1 %3456, label %3457, label %3435

3457:                                             ; preds = %3435, %3430
  %3458 = getelementptr inbounds i32, i32* %191, i64 %3405
  %3459 = getelementptr inbounds i32, i32* %3458, i64 %3236
  %3460 = getelementptr inbounds i32, i32* %3459, i64 %3406
  br label %3461

3461:                                             ; preds = %3461, %3457
  %3462 = phi i32 [ %3409, %3457 ], [ %3469, %3461 ]
  %3463 = phi i32* [ %3460, %3457 ], [ %3467, %3461 ]
  %3464 = phi i32* [ %183, %3457 ], [ %3468, %3461 ]
  %3465 = bitcast i32* %3464 to i8*
  %3466 = bitcast i32* %3463 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3465, i8* align 4 %3466, i64 %174, i1 false) #6
  %3467 = getelementptr inbounds i32, i32* %3463, i64 %1305
  %3468 = getelementptr inbounds i32, i32* %3464, i64 %173
  %3469 = add nsw i32 %3462, -1
  %3470 = icmp eq i32 %3469, 0
  br i1 %3470, label %3471, label %3461

3471:                                             ; preds = %3461, %3403, %3101
  %3472 = add nuw nsw i64 %1590, 16
  %3473 = icmp slt i64 %3472, %1310
  br i1 %3473, label %3474, label %1583

3474:                                             ; preds = %3471
  %3475 = load i16, i16* @random_register, align 2
  %3476 = add i64 %1588, 1
  br label %1587

3477:                                             ; preds = %665, %1487
  %3478 = phi i32 [ 0, %1487 ], [ -1, %665 ]
  ret i32 %3478
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @ver_boundary_overlap(i32* nocapture readonly, i32, i32* nocapture readonly, i32, i32* nocapture, i32, i32, i32) unnamed_addr #2 {
  switch i32 %6, label %119 [
    i32 1, label %17
    i32 2, label %9
  ]

9:                                                ; preds = %8
  %10 = icmp eq i32 %7, 0
  br i1 %10, label %119, label %11

11:                                               ; preds = %9
  %12 = load i32, i32* @grain_min, align 4
  %13 = load i32, i32* @grain_max, align 4
  %14 = sext i32 %1 to i64
  %15 = sext i32 %3 to i64
  %16 = sext i32 %5 to i64
  br label %84

17:                                               ; preds = %8
  %18 = icmp eq i32 %7, 0
  br i1 %18, label %119, label %19

19:                                               ; preds = %17
  %20 = load i32, i32* @grain_min, align 4
  %21 = load i32, i32* @grain_max, align 4
  %22 = sext i32 %1 to i64
  %23 = sext i32 %3 to i64
  %24 = sext i32 %5 to i64
  %25 = and i32 %7, 1
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %43, label %27

27:                                               ; preds = %19
  %28 = load i32, i32* %0, align 4
  %29 = mul nsw i32 %28, 23
  %30 = load i32, i32* %2, align 4
  %31 = mul nsw i32 %30, 22
  %32 = add i32 %29, 16
  %33 = add i32 %32, %31
  %34 = ashr i32 %33, 5
  %35 = icmp slt i32 %34, %20
  %36 = icmp sgt i32 %34, %21
  %37 = select i1 %36, i32 %21, i32 %34
  %38 = select i1 %35, i32 %20, i32 %37
  store i32 %38, i32* %4, align 4
  %39 = getelementptr inbounds i32, i32* %0, i64 %22
  %40 = getelementptr inbounds i32, i32* %2, i64 %23
  %41 = getelementptr inbounds i32, i32* %4, i64 %24
  %42 = add nsw i32 %7, -1
  br label %43

43:                                               ; preds = %19, %27
  %44 = phi i32 [ %7, %19 ], [ %42, %27 ]
  %45 = phi i32* [ %0, %19 ], [ %39, %27 ]
  %46 = phi i32* [ %2, %19 ], [ %40, %27 ]
  %47 = phi i32* [ %4, %19 ], [ %41, %27 ]
  %48 = icmp eq i32 %7, 1
  br i1 %48, label %119, label %49

49:                                               ; preds = %43, %49
  %50 = phi i32 [ %82, %49 ], [ %44, %43 ]
  %51 = phi i32* [ %79, %49 ], [ %45, %43 ]
  %52 = phi i32* [ %80, %49 ], [ %46, %43 ]
  %53 = phi i32* [ %81, %49 ], [ %47, %43 ]
  %54 = load i32, i32* %51, align 4
  %55 = mul nsw i32 %54, 23
  %56 = load i32, i32* %52, align 4
  %57 = mul nsw i32 %56, 22
  %58 = add i32 %55, 16
  %59 = add i32 %58, %57
  %60 = ashr i32 %59, 5
  %61 = icmp slt i32 %60, %20
  %62 = icmp sgt i32 %60, %21
  %63 = select i1 %62, i32 %21, i32 %60
  %64 = select i1 %61, i32 %20, i32 %63
  store i32 %64, i32* %53, align 4
  %65 = getelementptr inbounds i32, i32* %51, i64 %22
  %66 = getelementptr inbounds i32, i32* %52, i64 %23
  %67 = getelementptr inbounds i32, i32* %53, i64 %24
  %68 = load i32, i32* %65, align 4
  %69 = mul nsw i32 %68, 23
  %70 = load i32, i32* %66, align 4
  %71 = mul nsw i32 %70, 22
  %72 = add i32 %69, 16
  %73 = add i32 %72, %71
  %74 = ashr i32 %73, 5
  %75 = icmp slt i32 %74, %20
  %76 = icmp sgt i32 %74, %21
  %77 = select i1 %76, i32 %21, i32 %74
  %78 = select i1 %75, i32 %20, i32 %77
  store i32 %78, i32* %67, align 4
  %79 = getelementptr inbounds i32, i32* %65, i64 %22
  %80 = getelementptr inbounds i32, i32* %66, i64 %23
  %81 = getelementptr inbounds i32, i32* %67, i64 %24
  %82 = add nsw i32 %50, -2
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %119, label %49

84:                                               ; preds = %11, %84
  %85 = phi i32 [ %7, %11 ], [ %117, %84 ]
  %86 = phi i32* [ %0, %11 ], [ %114, %84 ]
  %87 = phi i32* [ %2, %11 ], [ %115, %84 ]
  %88 = phi i32* [ %4, %11 ], [ %116, %84 ]
  %89 = load i32, i32* %86, align 4
  %90 = mul nsw i32 %89, 27
  %91 = load i32, i32* %87, align 4
  %92 = mul nsw i32 %91, 17
  %93 = add i32 %90, 16
  %94 = add i32 %93, %92
  %95 = ashr i32 %94, 5
  %96 = icmp slt i32 %95, %12
  %97 = icmp sgt i32 %95, %13
  %98 = select i1 %97, i32 %13, i32 %95
  %99 = select i1 %96, i32 %12, i32 %98
  store i32 %99, i32* %88, align 4
  %100 = getelementptr inbounds i32, i32* %86, i64 1
  %101 = load i32, i32* %100, align 4
  %102 = mul nsw i32 %101, 17
  %103 = getelementptr inbounds i32, i32* %87, i64 1
  %104 = load i32, i32* %103, align 4
  %105 = mul nsw i32 %104, 27
  %106 = add i32 %102, 16
  %107 = add i32 %106, %105
  %108 = ashr i32 %107, 5
  %109 = icmp slt i32 %108, %12
  %110 = icmp sgt i32 %108, %13
  %111 = select i1 %110, i32 %13, i32 %108
  %112 = select i1 %109, i32 %12, i32 %111
  %113 = getelementptr inbounds i32, i32* %88, i64 1
  store i32 %112, i32* %113, align 4
  %114 = getelementptr inbounds i32, i32* %86, i64 %14
  %115 = getelementptr inbounds i32, i32* %87, i64 %15
  %116 = getelementptr inbounds i32, i32* %88, i64 %16
  %117 = add nsw i32 %85, -1
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %84

119:                                              ; preds = %84, %43, %49, %9, %17, %8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @add_noise_to_block_hbd(%struct.aom_film_grain_t* nocapture readonly, i16* nocapture, i16* nocapture, i16* nocapture, i32, i32, i32* nocapture readonly, i32* nocapture readonly, i32* nocapture readonly, i32, i32, i32, i32, i32, i32, i32, i32) unnamed_addr #2 {
  %18 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 14
  %19 = load i32, i32* %18, align 4
  %20 = add nsw i32 %19, -128
  %21 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 15
  %22 = load i32, i32* %21, align 4
  %23 = add nsw i32 %22, -128
  %24 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 16
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %13, -8
  %27 = shl i32 %25, %26
  %28 = shl i32 1, %13
  %29 = sub nsw i32 %27, %28
  %30 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 17
  %31 = load i32, i32* %30, align 4
  %32 = add nsw i32 %31, -128
  %33 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 18
  %34 = load i32, i32* %33, align 4
  %35 = add nsw i32 %34, -128
  %36 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 19
  %37 = load i32, i32* %36, align 4
  %38 = shl i32 %37, %26
  %39 = sub nsw i32 %38, %28
  %40 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 8
  %41 = load i32, i32* %40, align 4
  %42 = add nsw i32 %41, -1
  %43 = shl i32 1, %42
  %44 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 3
  %45 = load i32, i32* %44, align 4
  %46 = icmp sgt i32 %45, 0
  %47 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 5
  %48 = load i32, i32* %47, align 4
  %49 = icmp sgt i32 %48, 0
  br i1 %49, label %54, label %50

50:                                               ; preds = %17
  %51 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 23
  %52 = load i32, i32* %51, align 4
  %53 = icmp ne i32 %52, 0
  br label %54

54:                                               ; preds = %50, %17
  %55 = phi i1 [ true, %17 ], [ %53, %50 ]
  %56 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 7
  %57 = load i32, i32* %56, align 4
  %58 = icmp sgt i32 %57, 0
  %59 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 23
  %60 = load i32, i32* %59, align 4
  %61 = icmp ne i32 %60, 0
  %62 = or i1 %58, %61
  %63 = icmp eq i32 %60, 0
  %64 = select i1 %63, i32 %20, i32 0
  %65 = select i1 %63, i32 %23, i32 64
  %66 = select i1 %63, i32 %29, i32 0
  %67 = select i1 %63, i32 %32, i32 0
  %68 = select i1 %63, i32 %35, i32 64
  %69 = select i1 %63, i32 %39, i32 0
  %70 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 21
  %71 = load i32, i32* %70, align 4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %79, label %73

73:                                               ; preds = %54
  %74 = shl i32 16, %26
  %75 = shl i32 235, %26
  %76 = icmp eq i32 %16, 0
  %77 = shl i32 240, %26
  %78 = select i1 %76, i32 %77, i32 %75
  br label %82

79:                                               ; preds = %54
  %80 = shl i32 256, %26
  %81 = add nsw i32 %80, -1
  br label %82

82:                                               ; preds = %73, %79
  %83 = phi i32 [ 0, %79 ], [ %74, %73 ]
  %84 = phi i32 [ %81, %79 ], [ %75, %73 ]
  %85 = phi i32 [ %81, %79 ], [ %78, %73 ]
  %86 = sub nsw i32 1, %14
  %87 = shl i32 %11, %86
  %88 = icmp sgt i32 %87, 0
  br i1 %88, label %89, label %114

89:                                               ; preds = %82
  %90 = sub nsw i32 1, %15
  %91 = shl i32 %12, %90
  %92 = icmp sgt i32 %91, 0
  %93 = icmp eq i32 %15, 0
  %94 = shl i32 256, %26
  %95 = add nsw i32 %94, -1
  %96 = icmp eq i32 %26, 0
  %97 = shl nsw i32 -1, %26
  %98 = xor i32 %97, -1
  %99 = add nsw i32 %13, -9
  %100 = shl i32 1, %99
  %101 = sext i32 %10 to i64
  %102 = sext i32 %5 to i64
  %103 = zext i32 %87 to i64
  %104 = zext i32 %91 to i64
  br label %105

105:                                              ; preds = %130, %89
  %106 = phi i64 [ 0, %89 ], [ %131, %130 ]
  br i1 %92, label %107, label %130

107:                                              ; preds = %105
  %108 = trunc i64 %106 to i32
  %109 = shl i32 %108, %14
  %110 = mul nsw i32 %109, %4
  %111 = mul nsw i64 %106, %102
  %112 = mul nsw i64 %106, %101
  %113 = sext i32 %110 to i64
  br label %133

114:                                              ; preds = %130, %82
  br i1 %46, label %115, label %302

115:                                              ; preds = %114
  %116 = shl i32 %11, 1
  %117 = icmp sgt i32 %116, 0
  br i1 %117, label %118, label %302

118:                                              ; preds = %115
  %119 = shl i32 %12, 1
  %120 = icmp sgt i32 %119, 0
  %121 = icmp eq i32 %26, 0
  %122 = shl nsw i32 -1, %26
  %123 = xor i32 %122, 65535
  %124 = add nsw i32 %13, -9
  %125 = shl i32 1, %124
  %126 = sext i32 %9 to i64
  %127 = sext i32 %4 to i64
  %128 = zext i32 %116 to i64
  %129 = zext i32 %119 to i64
  br label %254

130:                                              ; preds = %251, %105
  %131 = add nuw nsw i64 %106, 1
  %132 = icmp eq i64 %131, %103
  br i1 %132, label %114, label %105

133:                                              ; preds = %251, %107
  %134 = phi i64 [ 0, %107 ], [ %252, %251 ]
  br i1 %93, label %151, label %135

135:                                              ; preds = %133
  %136 = trunc i64 %134 to i32
  %137 = shl i32 %136, %15
  %138 = add nsw i32 %137, %110
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i16, i16* %1, i64 %139
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = add nsw i32 %138, 1
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds i16, i16* %1, i64 %144
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = add nuw nsw i32 %142, 1
  %149 = add nuw nsw i32 %148, %147
  %150 = lshr i32 %149, 1
  br label %156

151:                                              ; preds = %133
  %152 = add nsw i64 %134, %113
  %153 = getelementptr inbounds i16, i16* %1, i64 %152
  %154 = load i16, i16* %153, align 2
  %155 = zext i16 %154 to i32
  br label %156

156:                                              ; preds = %151, %135
  %157 = phi i32 [ %150, %135 ], [ %155, %151 ]
  br i1 %55, label %158, label %204

158:                                              ; preds = %156
  %159 = add nsw i64 %134, %111
  %160 = getelementptr inbounds i16, i16* %2, i64 %159
  %161 = load i16, i16* %160, align 2
  %162 = zext i16 %161 to i32
  %163 = mul nsw i32 %157, %65
  %164 = mul nsw i32 %64, %162
  %165 = add nsw i32 %164, %163
  %166 = ashr i32 %165, 6
  %167 = add nsw i32 %166, %66
  %168 = icmp slt i32 %167, 0
  %169 = icmp sgt i32 %167, %95
  %170 = select i1 %169, i32 %95, i32 %167
  %171 = select i1 %168, i32 0, i32 %170
  %172 = ashr i32 %171, %26
  %173 = icmp eq i32 %172, 255
  %174 = or i1 %96, %173
  %175 = sext i32 %172 to i64
  %176 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cb, i64 0, i64 %175
  %177 = load i32, i32* %176, align 4
  br i1 %174, label %189, label %178

178:                                              ; preds = %158
  %179 = add nsw i32 %172, 1
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cb, i64 0, i64 %180
  %182 = load i32, i32* %181, align 4
  %183 = sub nsw i32 %182, %177
  %184 = and i32 %171, %98
  %185 = mul nsw i32 %183, %184
  %186 = add nsw i32 %185, %100
  %187 = ashr i32 %186, %26
  %188 = add nsw i32 %187, %177
  br label %189

189:                                              ; preds = %158, %178
  %190 = phi i32 [ %188, %178 ], [ %177, %158 ]
  %191 = add nsw i64 %134, %112
  %192 = getelementptr inbounds i32, i32* %7, i64 %191
  %193 = load i32, i32* %192, align 4
  %194 = mul nsw i32 %193, %190
  %195 = add nsw i32 %194, %43
  %196 = load i32, i32* %40, align 4
  %197 = ashr i32 %195, %196
  %198 = add nsw i32 %197, %162
  %199 = icmp slt i32 %198, %83
  %200 = icmp sgt i32 %198, %85
  %201 = select i1 %200, i32 %85, i32 %198
  %202 = select i1 %199, i32 %83, i32 %201
  %203 = trunc i32 %202 to i16
  store i16 %203, i16* %160, align 2
  br label %204

204:                                              ; preds = %189, %156
  br i1 %62, label %205, label %251

205:                                              ; preds = %204
  %206 = add nsw i64 %134, %111
  %207 = getelementptr inbounds i16, i16* %3, i64 %206
  %208 = load i16, i16* %207, align 2
  %209 = zext i16 %208 to i32
  %210 = mul nsw i32 %157, %68
  %211 = mul nsw i32 %67, %209
  %212 = add nsw i32 %211, %210
  %213 = ashr i32 %212, 6
  %214 = add nsw i32 %213, %69
  %215 = icmp slt i32 %214, 0
  %216 = icmp sgt i32 %214, %95
  %217 = select i1 %216, i32 %95, i32 %214
  %218 = select i1 %215, i32 0, i32 %217
  %219 = ashr i32 %218, %26
  %220 = icmp eq i32 %219, 255
  %221 = or i1 %96, %220
  %222 = sext i32 %219 to i64
  %223 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cr, i64 0, i64 %222
  %224 = load i32, i32* %223, align 4
  br i1 %221, label %236, label %225

225:                                              ; preds = %205
  %226 = add nsw i32 %219, 1
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cr, i64 0, i64 %227
  %229 = load i32, i32* %228, align 4
  %230 = sub nsw i32 %229, %224
  %231 = and i32 %218, %98
  %232 = mul nsw i32 %230, %231
  %233 = add nsw i32 %232, %100
  %234 = ashr i32 %233, %26
  %235 = add nsw i32 %234, %224
  br label %236

236:                                              ; preds = %205, %225
  %237 = phi i32 [ %235, %225 ], [ %224, %205 ]
  %238 = add nsw i64 %134, %112
  %239 = getelementptr inbounds i32, i32* %8, i64 %238
  %240 = load i32, i32* %239, align 4
  %241 = mul nsw i32 %240, %237
  %242 = add nsw i32 %241, %43
  %243 = load i32, i32* %40, align 4
  %244 = ashr i32 %242, %243
  %245 = add nsw i32 %244, %209
  %246 = icmp slt i32 %245, %83
  %247 = icmp sgt i32 %245, %85
  %248 = select i1 %247, i32 %85, i32 %245
  %249 = select i1 %246, i32 %83, i32 %248
  %250 = trunc i32 %249 to i16
  store i16 %250, i16* %207, align 2
  br label %251

251:                                              ; preds = %236, %204
  %252 = add nuw nsw i64 %134, 1
  %253 = icmp eq i64 %252, %104
  br i1 %253, label %130, label %133

254:                                              ; preds = %259, %118
  %255 = phi i64 [ 0, %118 ], [ %260, %259 ]
  br i1 %120, label %256, label %259

256:                                              ; preds = %254
  %257 = mul nsw i64 %255, %127
  %258 = mul nsw i64 %255, %126
  br label %262

259:                                              ; preds = %285, %254
  %260 = add nuw nsw i64 %255, 1
  %261 = icmp eq i64 %260, %128
  br i1 %261, label %302, label %254

262:                                              ; preds = %285, %256
  %263 = phi i64 [ 0, %256 ], [ %300, %285 ]
  %264 = add nsw i64 %263, %257
  %265 = getelementptr inbounds i16, i16* %1, i64 %264
  %266 = load i16, i16* %265, align 2
  %267 = zext i16 %266 to i32
  %268 = lshr i32 %267, %26
  %269 = icmp eq i32 %268, 255
  %270 = or i1 %121, %269
  %271 = sext i32 %268 to i64
  %272 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_y, i64 0, i64 %271
  %273 = load i32, i32* %272, align 4
  br i1 %270, label %285, label %274

274:                                              ; preds = %262
  %275 = add nuw nsw i32 %268, 1
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_y, i64 0, i64 %276
  %278 = load i32, i32* %277, align 4
  %279 = sub nsw i32 %278, %273
  %280 = and i32 %123, %267
  %281 = mul nsw i32 %279, %280
  %282 = add nsw i32 %281, %125
  %283 = ashr i32 %282, %26
  %284 = add nsw i32 %283, %273
  br label %285

285:                                              ; preds = %262, %274
  %286 = phi i32 [ %284, %274 ], [ %273, %262 ]
  %287 = add nsw i64 %263, %258
  %288 = getelementptr inbounds i32, i32* %6, i64 %287
  %289 = load i32, i32* %288, align 4
  %290 = mul nsw i32 %289, %286
  %291 = add nsw i32 %290, %43
  %292 = load i32, i32* %40, align 4
  %293 = ashr i32 %291, %292
  %294 = add nsw i32 %293, %267
  %295 = icmp slt i32 %294, %83
  %296 = icmp sgt i32 %294, %84
  %297 = select i1 %296, i32 %84, i32 %294
  %298 = select i1 %295, i32 %83, i32 %297
  %299 = trunc i32 %298 to i16
  store i16 %299, i16* %265, align 2
  %300 = add nuw nsw i64 %263, 1
  %301 = icmp eq i64 %300, %129
  br i1 %301, label %259, label %262

302:                                              ; preds = %259, %115, %114
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @add_noise_to_block(%struct.aom_film_grain_t* nocapture readonly, i8* nocapture, i8* nocapture, i8* nocapture, i32, i32, i32* nocapture readonly, i32* nocapture readonly, i32* nocapture readonly, i32, i32, i32, i32, i32, i32, i32, i32) unnamed_addr #2 {
  %18 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 14
  %19 = load i32, i32* %18, align 4
  %20 = add nsw i32 %19, -128
  %21 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 15
  %22 = load i32, i32* %21, align 4
  %23 = add nsw i32 %22, -128
  %24 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 16
  %25 = load i32, i32* %24, align 4
  %26 = add nsw i32 %25, -256
  %27 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 17
  %28 = load i32, i32* %27, align 4
  %29 = add nsw i32 %28, -128
  %30 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 18
  %31 = load i32, i32* %30, align 4
  %32 = add nsw i32 %31, -128
  %33 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 19
  %34 = load i32, i32* %33, align 4
  %35 = add nsw i32 %34, -256
  %36 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 8
  %37 = load i32, i32* %36, align 4
  %38 = add nsw i32 %37, -1
  %39 = shl i32 1, %38
  %40 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 3
  %41 = load i32, i32* %40, align 4
  %42 = icmp sgt i32 %41, 0
  %43 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 5
  %44 = load i32, i32* %43, align 4
  %45 = icmp sgt i32 %44, 0
  br i1 %45, label %50, label %46

46:                                               ; preds = %17
  %47 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 23
  %48 = load i32, i32* %47, align 4
  %49 = icmp ne i32 %48, 0
  br label %50

50:                                               ; preds = %46, %17
  %51 = phi i1 [ true, %17 ], [ %49, %46 ]
  %52 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 7
  %53 = load i32, i32* %52, align 4
  %54 = icmp sgt i32 %53, 0
  %55 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 23
  %56 = load i32, i32* %55, align 4
  %57 = icmp ne i32 %56, 0
  %58 = or i1 %54, %57
  %59 = icmp eq i32 %56, 0
  %60 = select i1 %59, i32 %20, i32 0
  %61 = select i1 %59, i32 %23, i32 64
  %62 = select i1 %59, i32 %26, i32 0
  %63 = select i1 %59, i32 %29, i32 0
  %64 = select i1 %59, i32 %32, i32 64
  %65 = select i1 %59, i32 %35, i32 0
  %66 = getelementptr inbounds %struct.aom_film_grain_t, %struct.aom_film_grain_t* %0, i64 0, i32 21
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, 0
  %69 = icmp eq i32 %16, 0
  %70 = select i1 %69, i32 240, i32 235
  %71 = select i1 %68, i32 0, i32 16
  %72 = select i1 %68, i32 255, i32 235
  %73 = select i1 %68, i32 255, i32 %70
  %74 = sub nsw i32 1, %14
  %75 = shl i32 %11, %74
  %76 = icmp sgt i32 %75, 0
  br i1 %76, label %77, label %98

77:                                               ; preds = %50
  %78 = sub nsw i32 1, %15
  %79 = shl i32 %12, %78
  %80 = icmp sgt i32 %79, 0
  %81 = icmp eq i32 %15, 0
  %82 = add nsw i32 %13, -8
  %83 = shl i32 256, %82
  %84 = add nsw i32 %83, -1
  %85 = sext i32 %10 to i64
  %86 = sext i32 %5 to i64
  %87 = zext i32 %75 to i64
  %88 = zext i32 %79 to i64
  br label %89

89:                                               ; preds = %109, %77
  %90 = phi i64 [ 0, %77 ], [ %110, %109 ]
  br i1 %80, label %91, label %109

91:                                               ; preds = %89
  %92 = trunc i64 %90 to i32
  %93 = shl i32 %92, %14
  %94 = mul nsw i32 %93, %4
  %95 = mul nsw i64 %90, %86
  %96 = mul nsw i64 %90, %85
  %97 = sext i32 %94 to i64
  br label %112

98:                                               ; preds = %109, %50
  br i1 %42, label %99, label %233

99:                                               ; preds = %98
  %100 = shl i32 %11, 1
  %101 = icmp sgt i32 %100, 0
  br i1 %101, label %102, label %233

102:                                              ; preds = %99
  %103 = shl i32 %12, 1
  %104 = icmp sgt i32 %103, 0
  %105 = sext i32 %9 to i64
  %106 = sext i32 %4 to i64
  %107 = zext i32 %100 to i64
  %108 = zext i32 %103 to i64
  br label %201

109:                                              ; preds = %198, %89
  %110 = add nuw nsw i64 %90, 1
  %111 = icmp eq i64 %110, %87
  br i1 %111, label %98, label %89

112:                                              ; preds = %198, %91
  %113 = phi i64 [ 0, %91 ], [ %199, %198 ]
  br i1 %81, label %130, label %114

114:                                              ; preds = %112
  %115 = trunc i64 %113 to i32
  %116 = shl i32 %115, %15
  %117 = add nsw i32 %116, %94
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i8, i8* %1, i64 %118
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = add nsw i32 %117, 1
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %1, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = add nuw nsw i32 %121, 1
  %128 = add nuw nsw i32 %127, %126
  %129 = lshr i32 %128, 1
  br label %135

130:                                              ; preds = %112
  %131 = add nsw i64 %113, %97
  %132 = getelementptr inbounds i8, i8* %1, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  br label %135

135:                                              ; preds = %130, %114
  %136 = phi i32 [ %129, %114 ], [ %134, %130 ]
  br i1 %51, label %137, label %167

137:                                              ; preds = %135
  %138 = add nsw i64 %113, %95
  %139 = getelementptr inbounds i8, i8* %2, i64 %138
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i32
  %142 = mul nsw i32 %136, %61
  %143 = mul nsw i32 %60, %141
  %144 = add nsw i32 %143, %142
  %145 = ashr i32 %144, 6
  %146 = add nsw i32 %145, %62
  %147 = icmp slt i32 %146, 0
  %148 = icmp sgt i32 %146, %84
  %149 = select i1 %148, i32 %84, i32 %146
  %150 = select i1 %147, i32 0, i32 %149
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cb, i64 0, i64 %151
  %153 = load i32, i32* %152, align 4
  %154 = add nsw i64 %113, %96
  %155 = getelementptr inbounds i32, i32* %7, i64 %154
  %156 = load i32, i32* %155, align 4
  %157 = mul nsw i32 %156, %153
  %158 = add nsw i32 %157, %39
  %159 = load i32, i32* %36, align 4
  %160 = ashr i32 %158, %159
  %161 = add nsw i32 %160, %141
  %162 = icmp slt i32 %161, %71
  %163 = icmp sgt i32 %161, %73
  %164 = select i1 %163, i32 %73, i32 %161
  %165 = select i1 %162, i32 %71, i32 %164
  %166 = trunc i32 %165 to i8
  store i8 %166, i8* %139, align 1
  br label %167

167:                                              ; preds = %137, %135
  br i1 %58, label %168, label %198

168:                                              ; preds = %167
  %169 = add nsw i64 %113, %95
  %170 = getelementptr inbounds i8, i8* %3, i64 %169
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i32
  %173 = mul nsw i32 %136, %64
  %174 = mul nsw i32 %63, %172
  %175 = add nsw i32 %174, %173
  %176 = ashr i32 %175, 6
  %177 = add nsw i32 %176, %65
  %178 = icmp slt i32 %177, 0
  %179 = icmp sgt i32 %177, %84
  %180 = select i1 %179, i32 %84, i32 %177
  %181 = select i1 %178, i32 0, i32 %180
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_cr, i64 0, i64 %182
  %184 = load i32, i32* %183, align 4
  %185 = add nsw i64 %113, %96
  %186 = getelementptr inbounds i32, i32* %8, i64 %185
  %187 = load i32, i32* %186, align 4
  %188 = mul nsw i32 %187, %184
  %189 = add nsw i32 %188, %39
  %190 = load i32, i32* %36, align 4
  %191 = ashr i32 %189, %190
  %192 = add nsw i32 %191, %172
  %193 = icmp slt i32 %192, %71
  %194 = icmp sgt i32 %192, %73
  %195 = select i1 %194, i32 %73, i32 %192
  %196 = select i1 %193, i32 %71, i32 %195
  %197 = trunc i32 %196 to i8
  store i8 %197, i8* %170, align 1
  br label %198

198:                                              ; preds = %168, %167
  %199 = add nuw nsw i64 %113, 1
  %200 = icmp eq i64 %199, %88
  br i1 %200, label %109, label %112

201:                                              ; preds = %206, %102
  %202 = phi i64 [ 0, %102 ], [ %207, %206 ]
  br i1 %104, label %203, label %206

203:                                              ; preds = %201
  %204 = mul nsw i64 %202, %106
  %205 = mul nsw i64 %202, %105
  br label %209

206:                                              ; preds = %209, %201
  %207 = add nuw nsw i64 %202, 1
  %208 = icmp eq i64 %207, %107
  br i1 %208, label %233, label %201

209:                                              ; preds = %209, %203
  %210 = phi i64 [ 0, %203 ], [ %231, %209 ]
  %211 = add nsw i64 %210, %204
  %212 = getelementptr inbounds i8, i8* %1, i64 %211
  %213 = load i8, i8* %212, align 1
  %214 = zext i8 %213 to i32
  %215 = zext i8 %213 to i64
  %216 = getelementptr inbounds [256 x i32], [256 x i32]* @scaling_lut_y, i64 0, i64 %215
  %217 = load i32, i32* %216, align 4
  %218 = add nsw i64 %210, %205
  %219 = getelementptr inbounds i32, i32* %6, i64 %218
  %220 = load i32, i32* %219, align 4
  %221 = mul nsw i32 %220, %217
  %222 = add nsw i32 %221, %39
  %223 = load i32, i32* %36, align 4
  %224 = ashr i32 %222, %223
  %225 = add nsw i32 %224, %214
  %226 = icmp slt i32 %225, %71
  %227 = icmp sgt i32 %225, %72
  %228 = select i1 %227, i32 %72, i32 %225
  %229 = select i1 %226, i32 %71, i32 %228
  %230 = trunc i32 %229 to i8
  store i8 %230, i8* %212, align 1
  %231 = add nuw nsw i64 %210, 1
  %232 = icmp eq i64 %231, %108
  br i1 %232, label %206, label %209

233:                                              ; preds = %206, %99, %98
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i8* @aom_malloc(i64) local_unnamed_addr #3

declare void @aom_free(i8*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind }
attributes #5 = { cold }
attributes #6 = { nounwind }
attributes #7 = { cold nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11, !9}
!11 = !{!"llvm.loop.unroll.runtime.disable"}
!12 = distinct !{!12, !3}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !9}
!19 = distinct !{!19, !9}
!20 = distinct !{!20, !3}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !9}
!27 = distinct !{!27, !9}
!28 = distinct !{!28, !3}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !9}
!35 = distinct !{!35, !9}
!36 = !{!37}
!37 = distinct !{!37, !38}
!38 = distinct !{!38, !"LVerDomain"}
!39 = !{!40, !41, !42}
!40 = distinct !{!40, !38}
!41 = distinct !{!41, !38}
!42 = distinct !{!42, !38}
!43 = !{!41}
!44 = !{!40}
!45 = !{!41, !42}
!46 = !{!42}
!47 = distinct !{!47, !9}
!48 = !{!49}
!49 = distinct !{!49, !50}
!50 = distinct !{!50, !"LVerDomain"}
!51 = !{!52}
!52 = distinct !{!52, !50}
!53 = distinct !{!53, !9}
!54 = distinct !{!54, !9}
!55 = distinct !{!55, !9}
!56 = !{!57}
!57 = distinct !{!57, !58}
!58 = distinct !{!58, !"LVerDomain"}
!59 = !{!60, !61, !62}
!60 = distinct !{!60, !58}
!61 = distinct !{!61, !58}
!62 = distinct !{!62, !58}
!63 = !{!61}
!64 = !{!60}
!65 = !{!61, !62}
!66 = !{!62}
!67 = distinct !{!67, !9}
!68 = !{!69}
!69 = distinct !{!69, !70}
!70 = distinct !{!70, !"LVerDomain"}
!71 = !{!72}
!72 = distinct !{!72, !70}
!73 = distinct !{!73, !9}
!74 = distinct !{!74, !9}
!75 = distinct !{!75, !9}
!76 = !{!77}
!77 = distinct !{!77, !78}
!78 = distinct !{!78, !"LVerDomain"}
!79 = !{!80, !81, !82}
!80 = distinct !{!80, !78}
!81 = distinct !{!81, !78}
!82 = distinct !{!82, !78}
!83 = !{!81}
!84 = !{!80}
!85 = !{!81, !82}
!86 = !{!82}
!87 = distinct !{!87, !9}
!88 = distinct !{!88, !9}
!89 = !{!90}
!90 = distinct !{!90, !91}
!91 = distinct !{!91, !"LVerDomain"}
!92 = !{!93, !94, !95}
!93 = distinct !{!93, !91}
!94 = distinct !{!94, !91}
!95 = distinct !{!95, !91}
!96 = !{!94}
!97 = !{!93}
!98 = !{!94, !95}
!99 = !{!95}
!100 = distinct !{!100, !9}
!101 = !{!102}
!102 = distinct !{!102, !103}
!103 = distinct !{!103, !"LVerDomain"}
!104 = !{!105}
!105 = distinct !{!105, !103}
!106 = distinct !{!106, !9}
!107 = distinct !{!107, !9}
!108 = distinct !{!108, !9}
!109 = !{!110}
!110 = distinct !{!110, !111}
!111 = distinct !{!111, !"LVerDomain"}
!112 = !{!113, !114, !115}
!113 = distinct !{!113, !111}
!114 = distinct !{!114, !111}
!115 = distinct !{!115, !111}
!116 = !{!114}
!117 = !{!113}
!118 = !{!114, !115}
!119 = !{!115}
!120 = distinct !{!120, !9}
!121 = !{!122}
!122 = distinct !{!122, !123}
!123 = distinct !{!123, !"LVerDomain"}
!124 = !{!125}
!125 = distinct !{!125, !123}
!126 = distinct !{!126, !9}
!127 = distinct !{!127, !9}
!128 = distinct !{!128, !9}
!129 = distinct !{!129, !3}
!130 = distinct !{!130, !3}
!131 = distinct !{!131, !3}
!132 = distinct !{!132, !3}
!133 = distinct !{!133, !3}
!134 = distinct !{!134, !3}
