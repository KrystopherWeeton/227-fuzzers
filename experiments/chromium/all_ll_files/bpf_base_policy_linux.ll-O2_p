; ModuleID = '../../sandbox/policy/linux/bpf_base_policy_linux.cc'
source_filename = "../../sandbox/policy/linux/bpf_base_policy_linux.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.sandbox::policy::BPFBasePolicy" = type { %"class.sandbox::bpf_dsl::Policy", %"class.std::__1::unique_ptr" }
%"class.sandbox::bpf_dsl::Policy" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sandbox::BaselinePolicy"* }
%"class.sandbox::BaselinePolicy" = type { %"class.sandbox::bpf_dsl::Policy", i32, i32 }
%"class.sandbox::bpf_dsl::internal::ResultExprImpl" = type opaque
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }

@_ZTVN7sandbox6policy13BPFBasePolicyE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sandbox::policy::BPFBasePolicy"*)* @_ZN7sandbox6policy13BPFBasePolicyD2Ev to i8*), i8* bitcast (void (%"class.sandbox::policy::BPFBasePolicy"*)* @_ZN7sandbox6policy13BPFBasePolicyD0Ev to i8*), i8* bitcast ({ %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } (%"class.sandbox::policy::BPFBasePolicy"*, i32)* @_ZNK7sandbox6policy13BPFBasePolicy15EvaluateSyscallEi to i8*), i8* bitcast ({ %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } (%"class.sandbox::policy::BPFBasePolicy"*)* @_ZNK7sandbox6policy13BPFBasePolicy14InvalidSyscallEv to i8*)] }, align 8

@_ZN7sandbox6policy13BPFBasePolicyC1Ev = hidden unnamed_addr alias void (%"class.sandbox::policy::BPFBasePolicy"*), void (%"class.sandbox::policy::BPFBasePolicy"*)* @_ZN7sandbox6policy13BPFBasePolicyC2Ev
@_ZN7sandbox6policy13BPFBasePolicyD1Ev = hidden unnamed_addr alias void (%"class.sandbox::policy::BPFBasePolicy"*), void (%"class.sandbox::policy::BPFBasePolicy"*)* @_ZN7sandbox6policy13BPFBasePolicyD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7sandbox6policy13BPFBasePolicyC2Ev(%"class.sandbox::policy::BPFBasePolicy"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sandbox::policy::BPFBasePolicy", %"class.sandbox::policy::BPFBasePolicy"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN7sandbox6policy13BPFBasePolicyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sandbox::policy::BPFBasePolicy", %"class.sandbox::policy::BPFBasePolicy"* %0, i64 0, i32 1
  %4 = tail call i8* @_Znwm(i64 16) #5
  %5 = bitcast i8* %4 to %"class.sandbox::BaselinePolicy"*
  tail call void @_ZN7sandbox14BaselinePolicyC1Ei(%"class.sandbox::BaselinePolicy"* nonnull %5, i32 1) #6
  %6 = ptrtoint i8* %4 to i64
  %7 = bitcast %"class.std::__1::unique_ptr"* %3 to i64*
  store i64 %6, i64* %7, align 8
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

declare void @_ZN7sandbox14BaselinePolicyC1Ei(%"class.sandbox::BaselinePolicy"*, i32) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7sandbox6policy13BPFBasePolicyD2Ev(%"class.sandbox::policy::BPFBasePolicy"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sandbox::policy::BPFBasePolicy", %"class.sandbox::policy::BPFBasePolicy"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN7sandbox6policy13BPFBasePolicyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sandbox::policy::BPFBasePolicy", %"class.sandbox::policy::BPFBasePolicy"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.sandbox::BaselinePolicy"*, %"class.sandbox::BaselinePolicy"** %3, align 8
  store %"class.sandbox::BaselinePolicy"* null, %"class.sandbox::BaselinePolicy"** %3, align 8
  %5 = icmp eq %"class.sandbox::BaselinePolicy"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.sandbox::BaselinePolicy"* %4 to void (%"class.sandbox::BaselinePolicy"*)***
  %8 = load void (%"class.sandbox::BaselinePolicy"*)**, void (%"class.sandbox::BaselinePolicy"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.sandbox::BaselinePolicy"*)*, void (%"class.sandbox::BaselinePolicy"*)** %8, i64 1
  %10 = load void (%"class.sandbox::BaselinePolicy"*)*, void (%"class.sandbox::BaselinePolicy"*)** %9, align 8
  tail call void %10(%"class.sandbox::BaselinePolicy"* nonnull %4) #6
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7sandbox6policy13BPFBasePolicyD0Ev(%"class.sandbox::policy::BPFBasePolicy"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sandbox::policy::BPFBasePolicy", %"class.sandbox::policy::BPFBasePolicy"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN7sandbox6policy13BPFBasePolicyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.sandbox::policy::BPFBasePolicy", %"class.sandbox::policy::BPFBasePolicy"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"class.sandbox::BaselinePolicy"*, %"class.sandbox::BaselinePolicy"** %3, align 8
  store %"class.sandbox::BaselinePolicy"* null, %"class.sandbox::BaselinePolicy"** %3, align 8
  %5 = icmp eq %"class.sandbox::BaselinePolicy"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.sandbox::BaselinePolicy"* %4 to void (%"class.sandbox::BaselinePolicy"*)***
  %8 = load void (%"class.sandbox::BaselinePolicy"*)**, void (%"class.sandbox::BaselinePolicy"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.sandbox::BaselinePolicy"*)*, void (%"class.sandbox::BaselinePolicy"*)** %8, i64 1
  %10 = load void (%"class.sandbox::BaselinePolicy"*)*, void (%"class.sandbox::BaselinePolicy"*)** %9, align 8
  tail call void %10(%"class.sandbox::BaselinePolicy"* nonnull %4) #6
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.sandbox::policy::BPFBasePolicy"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #5
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZNK7sandbox6policy13BPFBasePolicy15EvaluateSyscallEi(%"class.sandbox::policy::BPFBasePolicy"* nocapture readonly, i32) unnamed_addr #0 align 2 {
  %3 = icmp eq i32 %1, 273
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = tail call { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZN7sandbox7bpf_dsl5AllowEv() #6
  br label %14

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.sandbox::policy::BPFBasePolicy", %"class.sandbox::policy::BPFBasePolicy"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %8 = load %"class.sandbox::BaselinePolicy"*, %"class.sandbox::BaselinePolicy"** %7, align 8
  %9 = bitcast %"class.sandbox::BaselinePolicy"* %8 to { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } (%"class.sandbox::BaselinePolicy"*, i32)***
  %10 = load { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } (%"class.sandbox::BaselinePolicy"*, i32)**, { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } (%"class.sandbox::BaselinePolicy"*, i32)*** %9, align 8
  %11 = getelementptr inbounds { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } (%"class.sandbox::BaselinePolicy"*, i32)*, { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } (%"class.sandbox::BaselinePolicy"*, i32)** %10, i64 2
  %12 = load { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } (%"class.sandbox::BaselinePolicy"*, i32)*, { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } (%"class.sandbox::BaselinePolicy"*, i32)** %11, align 8
  %13 = tail call { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } %12(%"class.sandbox::BaselinePolicy"* %8, i32 %1) #6
  br label %14

14:                                               ; preds = %6, %4
  %15 = phi { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } [ %13, %6 ], [ %5, %4 ]
  ret { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } %15
}

declare { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZN7sandbox7bpf_dsl5AllowEv() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } @_ZNK7sandbox6policy13BPFBasePolicy14InvalidSyscallEv(%"class.sandbox::policy::BPFBasePolicy"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.sandbox::policy::BPFBasePolicy", %"class.sandbox::policy::BPFBasePolicy"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"class.sandbox::BaselinePolicy"*, %"class.sandbox::BaselinePolicy"** %2, align 8
  %4 = bitcast %"class.sandbox::BaselinePolicy"* %3 to { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } (%"class.sandbox::BaselinePolicy"*)***
  %5 = load { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } (%"class.sandbox::BaselinePolicy"*)**, { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } (%"class.sandbox::BaselinePolicy"*)*** %4, align 8
  %6 = getelementptr inbounds { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } (%"class.sandbox::BaselinePolicy"*)*, { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } (%"class.sandbox::BaselinePolicy"*)** %5, i64 3
  %7 = load { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } (%"class.sandbox::BaselinePolicy"*)*, { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } (%"class.sandbox::BaselinePolicy"*)** %6, align 8
  %8 = tail call { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } %7(%"class.sandbox::BaselinePolicy"* %3) #6
  ret { %"class.sandbox::bpf_dsl::internal::ResultExprImpl"*, %"class.std::__1::__shared_weak_count"* } %8
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN7sandbox6policy13BPFBasePolicy16GetFSDeniedErrnoEv() local_unnamed_addr #4 align 2 {
  ret i32 1
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { builtin nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
