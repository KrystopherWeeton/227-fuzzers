; ModuleID = '../../third_party/blink/renderer/core/css/invalidation/invalidation_set.cc'
source_filename = "../../third_party/blink/renderer/core/css/invalidation/invalidation_set.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::trace_event::TraceCategory" = type { i8, i32, i8* }
%"class.blink::InvalidationSet" = type <{ %"class.WTF::RefCounted", [4 x i8], %"union.blink::InvalidationSet::Backing", %"union.blink::InvalidationSet::Backing.1", %"union.blink::InvalidationSet::Backing.2", %"union.blink::InvalidationSet::Backing.3", %"class.blink::InvalidationFlags", %"class.blink::InvalidationSet::BackingFlags", i8, [5 x i8] }>
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"union.blink::InvalidationSet::Backing" = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"union.blink::InvalidationSet::Backing.1" = type { %"class.WTF::StringImpl"* }
%"union.blink::InvalidationSet::Backing.2" = type { %"class.WTF::StringImpl"* }
%"union.blink::InvalidationSet::Backing.3" = type { %"class.WTF::StringImpl"* }
%"class.blink::InvalidationFlags" = type { i8 }
%"class.blink::InvalidationSet::BackingFlags" = type { i8 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.blink::SiblingInvalidationSet" = type { %"class.blink::InvalidationSet.base", i32, %class.scoped_refptr.4, %class.scoped_refptr.4 }
%"class.blink::InvalidationSet.base" = type <{ %"class.WTF::RefCounted", [4 x i8], %"union.blink::InvalidationSet::Backing", %"union.blink::InvalidationSet::Backing.1", %"union.blink::InvalidationSet::Backing.2", %"union.blink::InvalidationSet::Backing.3", %"class.blink::InvalidationFlags", %"class.blink::InvalidationSet::BackingFlags", i8 }>
%class.scoped_refptr.4 = type { %"class.blink::DescendantInvalidationSet"* }
%"class.blink::DescendantInvalidationSet" = type { %"class.blink::InvalidationSet.base", [5 x i8] }
%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range" = type { %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator" }
%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator" = type { i32, %"class.WTF::AtomicString", %"struct.WTF::HashTableConstIteratorAdapter" }
%"struct.WTF::HashTableConstIteratorAdapter" = type { %"class.WTF::HashTableConstIterator" }
%"class.WTF::HashTableConstIterator" = type { %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"* }
%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range" = type { %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator" }
%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator" = type { i32, %"class.WTF::AtomicString", %"struct.WTF::HashTableConstIteratorAdapter" }
%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range" = type { %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator" }
%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator" = type { i32, %"class.WTF::AtomicString", %"struct.WTF::HashTableConstIteratorAdapter" }
%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range" = type { %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator" }
%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator" = type { i32, %"class.WTF::AtomicString", %"struct.WTF::HashTableConstIteratorAdapter" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"class.WTF::AtomicString"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Element" = type { %"class.blink::ContainerNode", %"class.blink::Animatable", %"class.blink::QualifiedName", %"class.blink::Member.14" }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member", %"class.blink::Member" }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member", %"class.blink::Member.5", %"class.blink::Member", %"class.blink::Member", %"class.blink::Member.7" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::Member.5" = type { %"class.blink::MemberBase.6" }
%"class.blink::MemberBase.6" = type { %"class.blink::TreeScope"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.29", %"class.blink::Member.31", %"class.blink::Member.5", %"class.blink::Member.33", %"class.blink::Member.33", %"class.blink::Member.53", %"class.blink::Member.55", %"class.blink::Member.57", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.62", %"class.blink::HeapVector.64" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.29" = type { %"class.blink::MemberBase.30" }
%"class.blink::MemberBase.30" = type { %"class.blink::ContainerNode"* }
%"class.blink::Member.31" = type { %"class.blink::MemberBase.32" }
%"class.blink::MemberBase.32" = type { %"class.blink::Document"* }
%"class.blink::Document" = type { %"class.blink::ContainerNode", %"class.blink::TreeScope", %"class.blink::UseCounter", %"class.blink::Supplementable", i32, %"class.blink::DocumentLifecycle", i8, i8, %"class.WTF::Vector.121", %"class.WTF::Vector.121", i8, i32, %"class.blink::Member.132", %"class.blink::Member.134", %"class.blink::Member.136", %"class.blink::Member.138", %"class.blink::Member.140", %"class.blink::Member.142", i8, %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.std::__1::unique_ptr.150", %"class.blink::KURL", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member.156", %"class.blink::Member.158", %"class.blink::Member.70", i32, i32, i32, i8, %"class.blink::TaskHandle", %"class.blink::TaskHandle", %"class.WTF::Vector.161", i8, i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapVector", %"class.blink::Member.45", %"class.blink::Member.371", %"class.blink::Member.45", %"class.blink::Member.45", %"class.blink::Member.45", %"class.blink::UserActionElementSet", %"class.blink::Member.380", double, double, i64, i64, %"class.blink::HeapHashSet.382", %"class.blink::HeapHashSet.389", i16, i8, %"class.blink::Member.396", %"class.blink::Member.398", %"class.blink::Member.400", %"class.blink::Member.402", %"class.blink::TextLinkColors", %"class.blink::Member.404", i8, [7 x i8], %"class.blink::HeapHashMap.406", i32, i32, i8, i8, i8, i32, i32, i32, i8, %"class.WTF::String", %"class.WTF::String", %"class.blink::Member.45", %"class.WTF::Vector.413", %"class.blink::Member.418", %"class.blink::Member.420", i8, %"class.blink::Member.45", i8, i32, i8, %"class.base::ElapsedTimer", %"class.blink::Member.422", %"class.blink::HeapVector.424", %"class.std::__1::unique_ptr.432", %"class.WTF::String", %"class.WTF::String", i8, %"class.WTF::AtomicString", %"class.blink::DocumentEncodingData", i8, i8, [6 x i8], %"class.blink::HeapHashSet.438", %"class.blink::LiveNodeListRegistry", %"class.blink::Member.451", %"class.WTF::Vector.453", i8, i8, %"class.std::__1::unique_ptr.458", %"class.blink::NthIndexCache"*, i8, i8, i8, i8, i8, i8, %"class.blink::LayoutView"*, %"class.blink::HeapVector", %"class.blink::HeapVector.464", i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapTaskRunnerTimer", %"class.blink::DocumentTiming", %"class.blink::Member.472", i8, i32, %"class.blink::Member.474", %"class.blink::Member.476", %"class.blink::Member.478", %"class.blink::HeapTaskRunnerTimer", %"class.blink::Member.480", %"class.WTF::HashMap.482", %"class.blink::Member.487", %"class.blink::Member.489", %"class.blink::Member.491", %"class.blink::Member.493", %"class.blink::Member.31", %"class.blink::Member.31", %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapHashSet.495", i8, i32, %"class.blink::Member.502", %"class.blink::Member.504", i32, %"class.blink::Member.506", %"class.blink::Member.508", %"class.blink::Member.510", %"class.std::__1::unique_ptr.512", i64, %"class.std::__1::unique_ptr.518", i32, i32, %"class.blink::Member.524", %"class.blink::Member.526", %"class.blink::Member.528", i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, %"class.blink::Member.530", %"class.WTF::Vector.532", %"class.WTF::AtomicString", %"class.blink::HeapHashMap.537", %"class.blink::Member.544", %"class.std::__1::unique_ptr.546", %"class.blink::Member.552", i8, i8, %"class.WTF::String", %"class.blink::Member.554", i8, [7 x i8], %"class.blink::HeapHashMap.556", %"class.blink::HeapObserverSet", %"class.blink::Member.570", i8, i8, i8, i8, i8, i8, i8, %"class.blink::Member.572", i32, i8, i8, %"class.blink::WeakMember.574", %"class.blink::Member.575" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.114" }
%"class.blink::HeapHashMap.114" = type { %"class.WTF::HashMap.117" }
%"class.WTF::HashMap.117" = type { %"class.WTF::HashTable.118" }
%"class.WTF::HashTable.118" = type <{ %"struct.WTF::KeyValuePair.120"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.120" = type opaque
%"class.blink::DocumentLifecycle" = type <{ i32, i32, i32, i8, i8, [2 x i8] }>
%"class.WTF::Vector.121" = type { %"class.WTF::VectorBuffer.122" }
%"class.WTF::VectorBuffer.122" = type { %"class.WTF::VectorBufferBase.123" }
%"class.WTF::VectorBufferBase.123" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.124 }
%class.scoped_refptr.124 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.125" }
%"struct.std::__1::atomic.125" = type { %"struct.std::__1::__atomic_base.126" }
%"struct.std::__1::__atomic_base.126" = type { %"struct.std::__1::__atomic_base.127" }
%"struct.std::__1::__atomic_base.127" = type { %"struct.std::__1::__cxx_atomic_impl.128" }
%"struct.std::__1::__cxx_atomic_impl.128" = type { %"struct.std::__1::__cxx_atomic_base_impl.129" }
%"struct.std::__1::__cxx_atomic_base_impl.129" = type { i32 }
%"class.blink::Member.132" = type { %"class.blink::MemberBase.133" }
%"class.blink::MemberBase.133" = type { %"class.blink::LocalDOMWindow"* }
%"class.blink::LocalDOMWindow" = type opaque
%"class.blink::Member.134" = type { %"class.blink::MemberBase.135" }
%"class.blink::MemberBase.135" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable.593", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.634", i32, i8, [3 x i8], %"class.blink::HeapVector.636", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.644", %"class.blink::Member.646", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.655", %"class.blink::Member.661", %"class.blink::Member.663", i8, [7 x i8] }>
%"class.blink::Supplementable.593" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.594" }
%"class.blink::HeapHashMap.594" = type { %"class.WTF::HashMap.597" }
%"class.WTF::HashMap.597" = type { %"class.WTF::HashTable.598" }
%"class.WTF::HashTable.598" = type <{ %"struct.WTF::KeyValuePair.600"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.600" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.609" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet.601" }
%"class.blink::HeapObserverSet.601" = type { i32, [4 x i8], %"class.blink::HeapHashSet.602" }
%"class.blink::HeapHashSet.602" = type { %"class.WTF::HashSet.605" }
%"class.WTF::HashSet.605" = type { %"class.WTF::HashTable.606" }
%"class.WTF::HashTable.606" = type <{ %"class.blink::WeakMember.608"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.608" = type opaque
%"class.blink::Supplementable.609" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.610" }
%"class.blink::HeapHashMap.610" = type { %"class.WTF::HashMap.613" }
%"class.WTF::HashMap.613" = type { %"class.WTF::HashTable.614" }
%"class.WTF::HashTable.614" = type <{ %"struct.WTF::KeyValuePair.616"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.616" = type { i8*, %"class.blink::Member.698" }
%"class.blink::Member.698" = type { %"class.blink::MemberBase.699" }
%"class.blink::MemberBase.699" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.700" }
%"class.blink::Member.700" = type { %"class.blink::MemberBase.701" }
%"class.blink::MemberBase.701" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.v8::Isolate" = type { i8 }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr.617, %"class.std::__1::unique_ptr.618", %"class.std::__1::unique_ptr.618", %"class.std::__1::unique_ptr.624", %"class.std::__1::unique_ptr.624", %"class.blink::Member.134", i32, [4 x i8], %"class.WTF::HashSet.630", i32, i32 }
%class.scoped_refptr.617 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type opaque
%"class.std::__1::unique_ptr.618" = type { %"class.std::__1::__compressed_pair.619" }
%"class.std::__1::__compressed_pair.619" = type { %"struct.std::__1::__compressed_pair_elem.620" }
%"struct.std::__1::__compressed_pair_elem.620" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type opaque
%"class.std::__1::unique_ptr.624" = type { %"class.std::__1::__compressed_pair.625" }
%"class.std::__1::__compressed_pair.625" = type { %"struct.std::__1::__compressed_pair_elem.626" }
%"struct.std::__1::__compressed_pair_elem.626" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.WTF::HashSet.630" = type { %"class.WTF::HashTable.631" }
%"class.WTF::HashTable.631" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.634" = type { %"class.blink::MemberBase.635" }
%"class.blink::MemberBase.635" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector.636" = type { %"class.WTF::Vector.639" }
%"class.WTF::Vector.639" = type { %"class.WTF::VectorBuffer.640" }
%"class.WTF::VectorBuffer.640" = type { %"class.WTF::VectorBufferBase.641" }
%"class.WTF::VectorBufferBase.641" = type { %"class.blink::Member.642"*, i32, i32 }
%"class.blink::Member.642" = type opaque
%"class.blink::Member.644" = type { %"class.blink::MemberBase.645" }
%"class.blink::MemberBase.645" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.646" = type { %"class.blink::MemberBase.647" }
%"class.blink::MemberBase.647" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.648", i32, i32 }
%"class.blink::HeapHashMap.648" = type { %"class.WTF::HashMap.651" }
%"class.WTF::HashMap.651" = type { %"class.WTF::HashTable.652" }
%"class.WTF::HashTable.652" = type <{ %"struct.WTF::KeyValuePair.654"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.654" = type opaque
%"class.std::__1::unique_ptr.655" = type { %"class.std::__1::__compressed_pair.656" }
%"class.std::__1::__compressed_pair.656" = type { %"struct.std::__1::__compressed_pair_elem.657" }
%"struct.std::__1::__compressed_pair_elem.657" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.661" = type { %"class.blink::MemberBase.662" }
%"class.blink::MemberBase.662" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.663" = type { %"class.blink::MemberBase.664" }
%"class.blink::MemberBase.664" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.blink::Member.136" = type { %"class.blink::MemberBase.137" }
%"class.blink::MemberBase.137" = type { %"class.blink::ResourceFetcher"* }
%"class.blink::ResourceFetcher" = type opaque
%"class.blink::Member.138" = type { %"class.blink::MemberBase.139" }
%"class.blink::MemberBase.139" = type { %"class.blink::DocumentParser"* }
%"class.blink::DocumentParser" = type opaque
%"class.blink::Member.140" = type { %"class.blink::MemberBase.141" }
%"class.blink::MemberBase.141" = type { %"class.blink::ContextFeatures"* }
%"class.blink::ContextFeatures" = type opaque
%"class.blink::Member.142" = type { %"class.blink::MemberBase.143" }
%"class.blink::MemberBase.143" = type { %"class.blink::HttpRefreshScheduler"* }
%"class.blink::HttpRefreshScheduler" = type opaque
%"class.std::__1::unique_ptr.150" = type { %"class.std::__1::__compressed_pair.151" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"class.blink::OriginAccessEntry"* }
%"class.blink::OriginAccessEntry" = type opaque
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr.144" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"class.blink::KURL"* }
%"class.blink::Member.156" = type { %"class.blink::MemberBase.157" }
%"class.blink::MemberBase.157" = type { %"class.blink::DocumentType"* }
%"class.blink::DocumentType" = type opaque
%"class.blink::Member.158" = type { %"class.blink::MemberBase.159" }
%"class.blink::MemberBase.159" = type { %"class.blink::DOMImplementation"* }
%"class.blink::DOMImplementation" = type opaque
%"class.blink::Member.70" = type { %"class.blink::MemberBase.71" }
%"class.blink::MemberBase.71" = type { %"class.blink::CSSStyleSheet"* }
%"class.blink::CSSStyleSheet" = type { %"class.blink::StyleSheet", %"class.blink::Member.72", i8, i8, i8, i8, i8, %"class.WTF::String", %class.scoped_refptr.74, %"class.WTF::Vector.88", %"class.WTF::Vector.88", %"class.blink::Member", %"class.blink::Member.93", %"class.blink::HeapHashSet", %"class.blink::Member.31", %"class.WTF::HashSet", %"class.WTF::TextPosition", %"class.blink::Member.102", %"class.blink::HeapVector.104", %"class.blink::Member.111" }
%"class.blink::StyleSheet" = type { %"class.blink::ScriptWrappable" }
%"class.blink::Member.72" = type { %"class.blink::MemberBase.73" }
%"class.blink::MemberBase.73" = type { %"class.blink::StyleSheetContents"* }
%"class.blink::StyleSheetContents" = type opaque
%class.scoped_refptr.74 = type { %"class.blink::MediaQuerySet"* }
%"class.blink::MediaQuerySet" = type { %"class.WTF::RefCounted.75", %"class.WTF::Vector.77" }
%"class.WTF::RefCounted.75" = type { %"class.base::RefCounted.76" }
%"class.base::RefCounted.76" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.77" = type { %"class.WTF::VectorBuffer.78" }
%"class.WTF::VectorBuffer.78" = type { %"class.WTF::VectorBufferBase.79" }
%"class.WTF::VectorBufferBase.79" = type { %"class.std::__1::unique_ptr"*, i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::MediaQuery"* }
%"class.blink::MediaQuery" = type { i32, %"class.WTF::String", %"class.WTF::Vector.80", %"class.WTF::String" }
%"class.WTF::Vector.80" = type { %"class.WTF::VectorBuffer.81" }
%"class.WTF::VectorBuffer.81" = type { %"class.WTF::VectorBufferBase.82" }
%"class.WTF::VectorBufferBase.82" = type { %"class.blink::MediaQueryExp"*, i32, i32 }
%"class.blink::MediaQueryExp" = type { %"class.WTF::String", %"struct.blink::MediaQueryExpValue" }
%"struct.blink::MediaQueryExpValue" = type <{ i32, [4 x i8], double, i32, i32, i32, i8, i8, i8, i8 }>
%"class.WTF::Vector.88" = type { %"class.WTF::VectorBuffer.89" }
%"class.WTF::VectorBuffer.89" = type { %"class.WTF::VectorBufferBase.90" }
%"class.WTF::VectorBufferBase.90" = type { %"class.blink::MediaQueryResult"*, i32, i32 }
%"class.blink::MediaQueryResult" = type <{ %"class.blink::MediaQueryExp", i8, [7 x i8] }>
%"class.blink::Member.93" = type { %"class.blink::MemberBase.94" }
%"class.blink::MemberBase.94" = type { %"class.blink::CSSRule"* }
%"class.blink::CSSRule" = type { %"class.blink::ScriptWrappable", i8, %"class.blink::Member.95" }
%"class.blink::Member.95" = type { %"class.blink::MemberBase.96" }
%"class.blink::MemberBase.96" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet.99" }
%"class.WTF::HashSet.99" = type { %"class.WTF::HashTable.100" }
%"class.WTF::HashTable.100" = type <{ %"class.blink::WeakMember"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.6" }
%"class.WTF::TextPosition" = type { %"class.WTF::OrdinalNumber", %"class.WTF::OrdinalNumber" }
%"class.WTF::OrdinalNumber" = type { i32 }
%"class.blink::Member.102" = type { %"class.blink::MemberBase.103" }
%"class.blink::MemberBase.103" = type { %"class.blink::MediaList"* }
%"class.blink::MediaList" = type { %"class.blink::ScriptWrappable", %class.scoped_refptr.74, %"class.blink::Member.70", %"class.blink::Member.93" }
%"class.blink::HeapVector.104" = type { %"class.WTF::Vector.107" }
%"class.WTF::Vector.107" = type { %"class.WTF::VectorBuffer.108" }
%"class.WTF::VectorBuffer.108" = type { %"class.WTF::VectorBufferBase.109" }
%"class.WTF::VectorBufferBase.109" = type { %"class.blink::Member.93"*, i32, i32 }
%"class.blink::Member.111" = type { %"class.blink::MemberBase.112" }
%"class.blink::MemberBase.112" = type { %"class.blink::CSSRuleList"* }
%"class.blink::CSSRuleList" = type { %"class.blink::ScriptWrappable" }
%"class.blink::TaskHandle" = type { %class.scoped_refptr.160 }
%class.scoped_refptr.160 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.WTF::Vector.161" = type { %"class.WTF::VectorBuffer.162" }
%"class.WTF::VectorBuffer.162" = type { %"class.WTF::VectorBufferBase.163" }
%"class.WTF::VectorBufferBase.163" = type { %"struct.blink::Document::PendingJavascriptUrl"*, i32, i32 }
%"struct.blink::Document::PendingJavascriptUrl" = type { %"class.blink::KURL", %class.scoped_refptr.164 }
%class.scoped_refptr.164 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.165", i32, i32, %"class.blink::Persistent" }
%"class.WTF::RefCounted.165" = type { %"class.base::RefCounted.166" }
%"class.base::RefCounted.166" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap.169" }
%"class.blink::HeapHashMap.169" = type { %"class.WTF::HashMap.172" }
%"class.WTF::HashMap.172" = type { %"class.WTF::HashTable.173" }
%"class.WTF::HashTable.173" = type <{ %"struct.WTF::KeyValuePair.175"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.175" = type { %"class.blink::WeakMember.176", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember.176" = type { %"class.blink::MemberBase.177" }
%"class.blink::MemberBase.177" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.178", i32, [4 x i8], %"class.std::__1::unique_ptr.314", %"class.std::__1::unique_ptr.314", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.324", %"class.std::__1::unique_ptr.330", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.342", %"class.std::__1::unique_ptr.348", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.355", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.181", %"class.std::__1::unique_ptr.187", %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.199", %"class.std::__1::unique_ptr.205", %"class.std::__1::unique_ptr.211", %"class.std::__1::unique_ptr.222", %"class.std::__1::unique_ptr.229", %"class.std::__1::unique_ptr.229", %"class.std::__1::unique_ptr.236", %"class.std::__1::unique_ptr.243", %"class.std::__1::unique_ptr.250", %"class.std::__1::unique_ptr.250", %"class.std::__1::unique_ptr.257", %"class.std::__1::unique_ptr.264", %"class.std::__1::unique_ptr.271", %"class.std::__1::unique_ptr.294", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.181" = type { %"class.std::__1::__compressed_pair.182" }
%"class.std::__1::__compressed_pair.182" = type { %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.183" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.187" = type { %"class.std::__1::__compressed_pair.188" }
%"class.std::__1::__compressed_pair.188" = type { %"struct.std::__1::__compressed_pair_elem.189" }
%"struct.std::__1::__compressed_pair_elem.189" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.193" = type { %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.199" = type { %"class.std::__1::__compressed_pair.200" }
%"class.std::__1::__compressed_pair.200" = type { %"struct.std::__1::__compressed_pair_elem.201" }
%"struct.std::__1::__compressed_pair_elem.201" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.205" = type { %"class.std::__1::__compressed_pair.206" }
%"class.std::__1::__compressed_pair.206" = type { %"struct.std::__1::__compressed_pair_elem.207" }
%"struct.std::__1::__compressed_pair_elem.207" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.211" = type { %"class.std::__1::__compressed_pair.212" }
%"class.std::__1::__compressed_pair.212" = type { %"struct.std::__1::__compressed_pair_elem.213" }
%"struct.std::__1::__compressed_pair_elem.213" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.214" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.214" = type { %"struct.std::__1::__atomic_base.215" }
%"struct.std::__1::__atomic_base.215" = type { %"struct.std::__1::__atomic_base.216" }
%"struct.std::__1::__atomic_base.216" = type { %"struct.std::__1::__cxx_atomic_impl.217" }
%"struct.std::__1::__cxx_atomic_impl.217" = type { %"struct.std::__1::__cxx_atomic_base_impl.218" }
%"struct.std::__1::__cxx_atomic_base_impl.218" = type { i64 }
%"class.std::__1::unique_ptr.222" = type { %"class.std::__1::__compressed_pair.223" }
%"class.std::__1::__compressed_pair.223" = type { %"struct.std::__1::__compressed_pair_elem.224" }
%"struct.std::__1::__compressed_pair_elem.224" = type { %"class.blink::Worklist.225"* }
%"class.blink::Worklist.225" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.214" }
%"class.std::__1::unique_ptr.229" = type { %"class.std::__1::__compressed_pair.230" }
%"class.std::__1::__compressed_pair.230" = type { %"struct.std::__1::__compressed_pair_elem.231" }
%"struct.std::__1::__compressed_pair_elem.231" = type { %"class.blink::Worklist.232"* }
%"class.blink::Worklist.232" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.214" }
%"class.std::__1::unique_ptr.236" = type { %"class.std::__1::__compressed_pair.237" }
%"class.std::__1::__compressed_pair.237" = type { %"struct.std::__1::__compressed_pair_elem.238" }
%"struct.std::__1::__compressed_pair_elem.238" = type { %"class.blink::Worklist.239"* }
%"class.blink::Worklist.239" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.214" }
%"class.std::__1::unique_ptr.243" = type { %"class.std::__1::__compressed_pair.244" }
%"class.std::__1::__compressed_pair.244" = type { %"struct.std::__1::__compressed_pair_elem.245" }
%"struct.std::__1::__compressed_pair_elem.245" = type { %"class.blink::Worklist.246"* }
%"class.blink::Worklist.246" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.214" }
%"class.std::__1::unique_ptr.250" = type { %"class.std::__1::__compressed_pair.251" }
%"class.std::__1::__compressed_pair.251" = type { %"struct.std::__1::__compressed_pair_elem.252" }
%"struct.std::__1::__compressed_pair_elem.252" = type { %"class.blink::Worklist.253"* }
%"class.blink::Worklist.253" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.214" }
%"class.std::__1::unique_ptr.257" = type { %"class.std::__1::__compressed_pair.258" }
%"class.std::__1::__compressed_pair.258" = type { %"struct.std::__1::__compressed_pair_elem.259" }
%"struct.std::__1::__compressed_pair_elem.259" = type { %"class.blink::Worklist.260"* }
%"class.blink::Worklist.260" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.214" }
%"class.std::__1::unique_ptr.264" = type { %"class.std::__1::__compressed_pair.265" }
%"class.std::__1::__compressed_pair.265" = type { %"struct.std::__1::__compressed_pair_elem.266" }
%"struct.std::__1::__compressed_pair_elem.266" = type { %"class.blink::Worklist.267"* }
%"class.blink::Worklist.267" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.214" }
%"class.std::__1::unique_ptr.271" = type { %"class.std::__1::__compressed_pair.272" }
%"class.std::__1::__compressed_pair.272" = type { %"struct.std::__1::__compressed_pair_elem.273" }
%"struct.std::__1::__compressed_pair_elem.273" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.274", %"class.std::__1::__compressed_pair.281", %"class.std::__1::__compressed_pair.286", %"class.std::__1::__compressed_pair.288", [4 x i8] }>
%"class.std::__1::unique_ptr.274" = type { %"class.std::__1::__compressed_pair.275" }
%"class.std::__1::__compressed_pair.275" = type { %"struct.std::__1::__compressed_pair_elem.276", %"struct.std::__1::__compressed_pair_elem.277" }
%"struct.std::__1::__compressed_pair_elem.276" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.277" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.278" }
%"class.std::__1::__compressed_pair.278" = type { %"struct.std::__1::__compressed_pair_elem.279" }
%"struct.std::__1::__compressed_pair_elem.279" = type { i64 }
%"class.std::__1::__compressed_pair.281" = type { %"struct.std::__1::__compressed_pair_elem.282" }
%"struct.std::__1::__compressed_pair_elem.282" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.286" = type { %"struct.std::__1::__compressed_pair_elem.279" }
%"class.std::__1::__compressed_pair.288" = type { %"struct.std::__1::__compressed_pair_elem.289" }
%"struct.std::__1::__compressed_pair_elem.289" = type { float }
%"class.std::__1::unique_ptr.294" = type { %"class.std::__1::__compressed_pair.295" }
%"class.std::__1::__compressed_pair.295" = type { %"struct.std::__1::__compressed_pair_elem.296" }
%"struct.std::__1::__compressed_pair_elem.296" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.297", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.297" = type { %"class.std::__1::__compressed_pair.298" }
%"class.std::__1::__compressed_pair.298" = type { %"struct.std::__1::__compressed_pair_elem.299" }
%"struct.std::__1::__compressed_pair_elem.299" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.306" }
%"class.WTF::Vector.306" = type { %"class.WTF::VectorBuffer.307" }
%"class.WTF::VectorBuffer.307" = type { %"class.WTF::VectorBufferBase.308" }
%"class.WTF::VectorBufferBase.308" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.314" = type { %"class.std::__1::__compressed_pair.315" }
%"class.std::__1::__compressed_pair.315" = type { %"struct.std::__1::__compressed_pair_elem.316" }
%"struct.std::__1::__compressed_pair_elem.316" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.322" }
%"class.WTF::VectorBuffer.322" = type { %"class.WTF::VectorBufferBase.323" }
%"class.WTF::VectorBufferBase.323" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.324" = type { %"class.std::__1::__compressed_pair.325" }
%"class.std::__1::__compressed_pair.325" = type { %"struct.std::__1::__compressed_pair_elem.326" }
%"struct.std::__1::__compressed_pair_elem.326" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.330" = type { %"class.std::__1::__compressed_pair.331" }
%"class.std::__1::__compressed_pair.331" = type { %"struct.std::__1::__compressed_pair_elem.332" }
%"struct.std::__1::__compressed_pair_elem.332" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.336" }
%"class.std::__1::unique_ptr.336" = type { %"class.std::__1::__compressed_pair.337" }
%"class.std::__1::__compressed_pair.337" = type { %"struct.std::__1::__compressed_pair_elem.338" }
%"struct.std::__1::__compressed_pair_elem.338" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.225"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.232"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.239"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.246"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.253"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.588" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.588" = type { %"struct.std::__1::__compressed_pair_elem.589" }
%"struct.std::__1::__compressed_pair_elem.589" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.342" = type { %"class.std::__1::__compressed_pair.343" }
%"class.std::__1::__compressed_pair.343" = type { %"struct.std::__1::__compressed_pair_elem.344" }
%"struct.std::__1::__compressed_pair_elem.344" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.348" = type { %"class.std::__1::__compressed_pair.349" }
%"class.std::__1::__compressed_pair.349" = type { %"struct.std::__1::__compressed_pair_elem.350" }
%"struct.std::__1::__compressed_pair_elem.350" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.354 }
%class.scoped_refptr.354 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.355" = type { %"struct.std::__1::__atomic_base.356" }
%"struct.std::__1::__atomic_base.356" = type { %"struct.std::__1::__cxx_atomic_impl.357" }
%"struct.std::__1::__cxx_atomic_impl.357" = type { %"struct.std::__1::__cxx_atomic_base_impl.358" }
%"struct.std::__1::__cxx_atomic_base_impl.358" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.blink::Member.371" = type { %"class.blink::MemberBase.372" }
%"class.blink::MemberBase.372" = type { %"class.blink::Range"* }
%"class.blink::Range" = type opaque
%"class.blink::UserActionElementSet" = type { %"class.blink::HeapHashMap.373" }
%"class.blink::HeapHashMap.373" = type { %"class.WTF::HashMap.376" }
%"class.WTF::HashMap.376" = type { %"class.WTF::HashTable.377" }
%"class.WTF::HashTable.377" = type <{ %"struct.WTF::KeyValuePair.379"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.379" = type opaque
%"class.blink::Member.380" = type { %"class.blink::MemberBase.381" }
%"class.blink::MemberBase.381" = type { %"class.blink::RootScrollerController"* }
%"class.blink::RootScrollerController" = type opaque
%"class.blink::HeapHashSet.382" = type { %"class.WTF::HashSet.385" }
%"class.WTF::HashSet.385" = type { %"class.WTF::HashTable.386" }
%"class.WTF::HashTable.386" = type <{ %"class.blink::WeakMember.388"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.388" = type opaque
%"class.blink::HeapHashSet.389" = type { %"class.WTF::HashSet.392" }
%"class.WTF::HashSet.392" = type { %"class.WTF::HashTable.393" }
%"class.WTF::HashTable.393" = type <{ %"class.blink::WeakMember.395"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.395" = type opaque
%"class.blink::Member.396" = type { %"class.blink::MemberBase.397" }
%"class.blink::MemberBase.397" = type { %"class.blink::ElementIntersectionObserverData"* }
%"class.blink::ElementIntersectionObserverData" = type opaque
%"class.blink::Member.398" = type { %"class.blink::MemberBase.399" }
%"class.blink::MemberBase.399" = type { %"class.blink::StyleEngine"* }
%"class.blink::StyleEngine" = type opaque
%"class.blink::Member.400" = type { %"class.blink::MemberBase.401" }
%"class.blink::MemberBase.401" = type { %"class.blink::StyleSheetList"* }
%"class.blink::StyleSheetList" = type opaque
%"class.blink::Member.402" = type { %"class.blink::MemberBase.403" }
%"class.blink::MemberBase.403" = type { %"class.blink::FormController"* }
%"class.blink::FormController" = type opaque
%"class.blink::TextLinkColors" = type { %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i8, i8, i8, i8 }
%"class.blink::Color" = type { i32 }
%"class.blink::Member.404" = type { %"class.blink::MemberBase.405" }
%"class.blink::MemberBase.405" = type { %"class.blink::VisitedLinkState"* }
%"class.blink::VisitedLinkState" = type opaque
%"class.blink::HeapHashMap.406" = type { %"class.WTF::HashMap.409" }
%"class.WTF::HashMap.409" = type { %"class.WTF::HashTable.410" }
%"class.WTF::HashTable.410" = type <{ %"struct.WTF::KeyValuePair.412"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.412" = type opaque
%"class.WTF::Vector.413" = type { %"class.WTF::VectorBuffer.414" }
%"class.WTF::VectorBuffer.414" = type { %"class.WTF::VectorBufferBase.415" }
%"class.WTF::VectorBufferBase.415" = type { %"class.blink::AXContext"**, i32, i32 }
%"class.blink::AXContext" = type opaque
%"class.blink::Member.418" = type { %"class.blink::MemberBase.419" }
%"class.blink::MemberBase.419" = type { %"class.blink::AXObjectCache"* }
%"class.blink::AXObjectCache" = type opaque
%"class.blink::Member.420" = type { %"class.blink::MemberBase.421" }
%"class.blink::MemberBase.421" = type { %"class.blink::DocumentMarkerController"* }
%"class.blink::DocumentMarkerController" = type opaque
%"class.blink::Member.45" = type { %"class.blink::MemberBase.46" }
%"class.blink::MemberBase.46" = type { %"class.blink::Element"* }
%"class.base::ElapsedTimer" = type { %"class.base::TimeTicks" }
%"class.blink::Member.422" = type { %"class.blink::MemberBase.423" }
%"class.blink::MemberBase.423" = type { %"class.blink::ScriptRunner"* }
%"class.blink::ScriptRunner" = type opaque
%"class.blink::HeapVector.424" = type { %"class.WTF::Vector.427" }
%"class.WTF::Vector.427" = type { %"class.WTF::VectorBuffer.428" }
%"class.WTF::VectorBuffer.428" = type { %"class.WTF::VectorBufferBase.429" }
%"class.WTF::VectorBufferBase.429" = type { %"class.blink::Member.430"*, i32, i32 }
%"class.blink::Member.430" = type opaque
%"class.std::__1::unique_ptr.432" = type { %"class.std::__1::__compressed_pair.433" }
%"class.std::__1::__compressed_pair.433" = type { %"struct.std::__1::__compressed_pair_elem.434" }
%"struct.std::__1::__compressed_pair_elem.434" = type { %"class.blink::TransformSource"* }
%"class.blink::TransformSource" = type opaque
%"class.blink::DocumentEncodingData" = type <{ %"class.WTF::TextEncoding", i8, i8, [6 x i8] }>
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::HeapHashSet.438" = type { %"class.WTF::HashSet.441" }
%"class.WTF::HashSet.441" = type { %"class.WTF::HashTable.442" }
%"class.WTF::HashTable.442" = type <{ %"class.blink::WeakMember.444"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.444" = type opaque
%"class.blink::LiveNodeListRegistry" = type <{ %"class.WTF::Vector.445", i32, [4 x i8] }>
%"class.WTF::Vector.445" = type { %"class.WTF::VectorBuffer.446" }
%"class.WTF::VectorBuffer.446" = type { %"class.WTF::VectorBufferBase.447" }
%"class.WTF::VectorBufferBase.447" = type { %"struct.std::__1::pair.448"*, i32, i32 }
%"struct.std::__1::pair.448" = type opaque
%"class.blink::Member.451" = type { %"class.blink::MemberBase.452" }
%"class.blink::MemberBase.452" = type { %"class.blink::SVGDocumentExtensions"* }
%"class.blink::SVGDocumentExtensions" = type opaque
%"class.WTF::Vector.453" = type { %"class.WTF::VectorBuffer.454" }
%"class.WTF::VectorBuffer.454" = type { %"class.WTF::VectorBufferBase.455" }
%"class.WTF::VectorBufferBase.455" = type { %"struct.blink::AnnotatedRegionValue"*, i32, i32 }
%"struct.blink::AnnotatedRegionValue" = type opaque
%"class.std::__1::unique_ptr.458" = type { %"class.std::__1::__compressed_pair.459" }
%"class.std::__1::__compressed_pair.459" = type { %"struct.std::__1::__compressed_pair_elem.460" }
%"struct.std::__1::__compressed_pair_elem.460" = type { %"class.blink::SelectorQueryCache"* }
%"class.blink::SelectorQueryCache" = type opaque
%"class.blink::NthIndexCache" = type opaque
%"class.blink::LayoutView" = type opaque
%"class.blink::HeapVector" = type { %"class.WTF::Vector.49" }
%"class.WTF::Vector.49" = type { %"class.WTF::VectorBuffer.50" }
%"class.WTF::VectorBuffer.50" = type { %"class.WTF::VectorBufferBase.51" }
%"class.WTF::VectorBufferBase.51" = type { %"class.blink::Member.45"*, i32, i32 }
%"class.blink::HeapVector.464" = type { %"class.WTF::Vector.467" }
%"class.WTF::Vector.467" = type { %"class.WTF::VectorBuffer.468" }
%"class.WTF::VectorBuffer.468" = type { %"class.WTF::VectorBufferBase.469" }
%"class.WTF::VectorBufferBase.469" = type { %"class.blink::Member.470"*, i32, i32 }
%"class.blink::Member.470" = type opaque
%"class.blink::DocumentTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.blink::Member.31" }
%"class.blink::Member.472" = type { %"class.blink::MemberBase.473" }
%"class.blink::MemberBase.473" = type { %"class.blink::MediaQueryMatcher"* }
%"class.blink::MediaQueryMatcher" = type opaque
%"class.blink::Member.474" = type { %"class.blink::MemberBase.475" }
%"class.blink::MemberBase.475" = type { %"class.blink::ScriptedAnimationController"* }
%"class.blink::ScriptedAnimationController" = type opaque
%"class.blink::Member.476" = type { %"class.blink::MemberBase.477" }
%"class.blink::MemberBase.477" = type { %"class.blink::ScriptedIdleTaskController"* }
%"class.blink::ScriptedIdleTaskController" = type opaque
%"class.blink::Member.478" = type { %"class.blink::MemberBase.479" }
%"class.blink::MemberBase.479" = type { %"class.blink::TextAutosizer"* }
%"class.blink::TextAutosizer" = type opaque
%"class.blink::Member.480" = type { %"class.blink::MemberBase.481" }
%"class.blink::MemberBase.481" = type { %"class.blink::ElementDataCache"* }
%"class.blink::ElementDataCache" = type opaque
%"class.WTF::HashMap.482" = type { %"class.WTF::HashTable.483" }
%"class.WTF::HashTable.483" = type <{ %"struct.WTF::KeyValuePair.486"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.486" = type opaque
%"class.blink::Member.487" = type { %"class.blink::MemberBase.488" }
%"class.blink::MemberBase.488" = type { %"class.blink::DocumentAnimations"* }
%"class.blink::DocumentAnimations" = type opaque
%"class.blink::Member.489" = type { %"class.blink::MemberBase.490" }
%"class.blink::MemberBase.490" = type { %"class.blink::DocumentTimeline"* }
%"class.blink::DocumentTimeline" = type opaque
%"class.blink::Member.491" = type { %"class.blink::MemberBase.492" }
%"class.blink::MemberBase.492" = type { %"class.blink::PendingAnimations"* }
%"class.blink::PendingAnimations" = type opaque
%"class.blink::Member.493" = type { %"class.blink::MemberBase.494" }
%"class.blink::MemberBase.494" = type { %"class.blink::WorkletAnimationController"* }
%"class.blink::WorkletAnimationController" = type opaque
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.370", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.361, %"class.base::WeakPtrFactory" }
%"class.base::TimeDelta" = type { i64 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%class.scoped_refptr.361 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.362" }>
%"class.base::RefCountedThreadSafe.362" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.363 }
%class.scoped_refptr.363 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.364", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.364" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.365" }
%"struct.std::__1::atomic.365" = type { %"struct.std::__1::__atomic_base.366" }
%"struct.std::__1::__atomic_base.366" = type { %"struct.std::__1::__atomic_base.367" }
%"struct.std::__1::__atomic_base.367" = type { %"struct.std::__1::__cxx_atomic_impl.368" }
%"struct.std::__1::__cxx_atomic_impl.368" = type { %"struct.std::__1::__cxx_atomic_base_impl.369" }
%"struct.std::__1::__cxx_atomic_base_impl.369" = type { i8 }
%"class.blink::WeakMember.370" = type { %"class.blink::MemberBase.32" }
%"class.blink::HeapHashSet.495" = type { %"class.WTF::HashSet.498" }
%"class.WTF::HashSet.498" = type { %"class.WTF::HashTable.499" }
%"class.WTF::HashTable.499" = type <{ %"class.blink::Member.501"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.501" = type opaque
%"class.blink::Member.502" = type { %"class.blink::MemberBase.503" }
%"class.blink::MemberBase.503" = type { %"class.blink::CanvasFontCache"* }
%"class.blink::CanvasFontCache" = type opaque
%"class.blink::Member.504" = type { %"class.blink::MemberBase.505" }
%"class.blink::MemberBase.505" = type { %"class.blink::IntersectionObserverController"* }
%"class.blink::IntersectionObserverController" = type opaque
%"class.blink::Member.506" = type { %"class.blink::MemberBase.507" }
%"class.blink::MemberBase.507" = type { %"class.blink::SnapCoordinator"* }
%"class.blink::SnapCoordinator" = type opaque
%"class.blink::Member.508" = type { %"class.blink::MemberBase.509" }
%"class.blink::MemberBase.509" = type { %"class.blink::PropertyRegistry"* }
%"class.blink::PropertyRegistry" = type opaque
%"class.blink::Member.510" = type { %"class.blink::MemberBase.511" }
%"class.blink::MemberBase.511" = type { %"class.blink::Document::NetworkStateObserver"* }
%"class.blink::Document::NetworkStateObserver" = type opaque
%"class.std::__1::unique_ptr.512" = type { %"class.std::__1::__compressed_pair.513" }
%"class.std::__1::__compressed_pair.513" = type { %"struct.std::__1::__compressed_pair_elem.514" }
%"struct.std::__1::__compressed_pair_elem.514" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type opaque
%"class.std::__1::unique_ptr.518" = type { %"class.std::__1::__compressed_pair.519" }
%"class.std::__1::__compressed_pair.519" = type { %"struct.std::__1::__compressed_pair_elem.520" }
%"struct.std::__1::__compressed_pair_elem.520" = type { %"class.blink::FontMatchingMetrics"* }
%"class.blink::FontMatchingMetrics" = type opaque
%"class.blink::Member.524" = type { %"class.blink::MemberBase.525" }
%"class.blink::MemberBase.525" = type { %"class.blink::DOMFeaturePolicy"* }
%"class.blink::DOMFeaturePolicy" = type opaque
%"class.blink::Member.526" = type { %"class.blink::MemberBase.527" }
%"class.blink::MemberBase.527" = type { %"class.blink::SlotAssignmentEngine"* }
%"class.blink::SlotAssignmentEngine" = type opaque
%"class.blink::Member.528" = type { %"class.blink::MemberBase.529" }
%"class.blink::MemberBase.529" = type { %"class.blink::ViewportData"* }
%"class.blink::ViewportData" = type opaque
%"class.blink::Member.530" = type { %"class.blink::MemberBase.531" }
%"class.blink::MemberBase.531" = type { %"class.blink::LazyLoadImageObserver"* }
%"class.blink::LazyLoadImageObserver" = type opaque
%"class.WTF::Vector.532" = type { %"class.WTF::VectorBuffer.533" }
%"class.WTF::VectorBuffer.533" = type { %"class.WTF::VectorBufferBase.534" }
%"class.WTF::VectorBufferBase.534" = type { i8*, i32, i32 }
%"class.blink::HeapHashMap.537" = type { %"class.WTF::HashMap.540" }
%"class.WTF::HashMap.540" = type { %"class.WTF::HashTable.541" }
%"class.WTF::HashTable.541" = type <{ %"struct.WTF::KeyValuePair.543"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.543" = type opaque
%"class.blink::Member.544" = type { %"class.blink::MemberBase.545" }
%"class.blink::MemberBase.545" = type { %"class.blink::BeforeUnloadEventListener"* }
%"class.blink::BeforeUnloadEventListener" = type opaque
%"class.std::__1::unique_ptr.546" = type { %"class.std::__1::__compressed_pair.547" }
%"class.std::__1::__compressed_pair.547" = type { %"struct.std::__1::__compressed_pair_elem.548" }
%"struct.std::__1::__compressed_pair_elem.548" = type { %"class.blink::DocumentResourceCoordinator"* }
%"class.blink::DocumentResourceCoordinator" = type opaque
%"class.blink::Member.552" = type { %"class.blink::MemberBase.553" }
%"class.blink::MemberBase.553" = type { %"class.blink::CookieJar"* }
%"class.blink::CookieJar" = type opaque
%"class.blink::Member.554" = type { %"class.blink::MemberBase.555" }
%"class.blink::MemberBase.555" = type { %"class.blink::FragmentDirective"* }
%"class.blink::FragmentDirective" = type { %"class.blink::ScriptWrappable" }
%"class.blink::HeapHashMap.556" = type { %"class.WTF::HashMap.559" }
%"class.WTF::HashMap.559" = type { %"class.WTF::HashTable.560" }
%"class.WTF::HashTable.560" = type <{ %"struct.WTF::KeyValuePair.562"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.562" = type opaque
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet.563" }
%"class.blink::HeapHashSet.563" = type { %"class.WTF::HashSet.566" }
%"class.WTF::HashSet.566" = type { %"class.WTF::HashTable.567" }
%"class.WTF::HashTable.567" = type <{ %"class.blink::WeakMember.569"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.569" = type opaque
%"class.blink::Member.570" = type { %"class.blink::MemberBase.571" }
%"class.blink::MemberBase.571" = type { %"class.blink::DisplayLockDocumentState"* }
%"class.blink::DisplayLockDocumentState" = type opaque
%"class.blink::Member.572" = type { %"class.blink::MemberBase.573" }
%"class.blink::MemberBase.573" = type { %"class.blink::FontPreloadManager"* }
%"class.blink::FontPreloadManager" = type <{ %"class.blink::Member.31", %"class.blink::HeapHashSet.579", i32, [4 x i8], %"class.blink::HeapTaskRunnerTimer.586", %"class.base::TimeDelta", i32, [4 x i8] }>
%"class.blink::HeapHashSet.579" = type { %"class.WTF::HashSet.582" }
%"class.WTF::HashSet.582" = type { %"class.WTF::HashTable.583" }
%"class.WTF::HashTable.583" = type <{ %"class.blink::Member.585"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.585" = type opaque
%"class.blink::HeapTaskRunnerTimer.586" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.587", { i64, i64 } }
%"class.blink::WeakMember.587" = type { %"class.blink::MemberBase.573" }
%"class.blink::WeakMember.574" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::Node"* }
%"class.blink::Member.575" = type { %"class.blink::MemberBase.576" }
%"class.blink::MemberBase.576" = type { %"class.blink::DocumentData"* }
%"class.blink::DocumentData" = type opaque
%"class.blink::Member.33" = type { %"class.blink::MemberBase.34" }
%"class.blink::MemberBase.34" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable.39" }
%"class.WTF::HashTable.39" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::AtomicString", %"class.blink::Member.41" }
%"class.blink::Member.41" = type { %"class.blink::MemberBase.42" }
%"class.blink::MemberBase.42" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.45", i32, %"class.blink::HeapVector" }
%"class.blink::Member.53" = type { %"class.blink::MemberBase.54" }
%"class.blink::MemberBase.54" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.55" = type { %"class.blink::MemberBase.56" }
%"class.blink::MemberBase.56" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.57" = type { %"class.blink::MemberBase.58" }
%"class.blink::MemberBase.58" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.59" }
%"class.blink::Member.59" = type { %"class.blink::MemberBase.60" }
%"class.blink::MemberBase.60" = type { %"class.blink::HeapHashMap.61"* }
%"class.blink::HeapHashMap.61" = type opaque
%"class.blink::Member.62" = type { %"class.blink::MemberBase.63" }
%"class.blink::MemberBase.63" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.64" = type { %"class.WTF::Vector.67" }
%"class.WTF::Vector.67" = type { %"class.WTF::VectorBuffer.68" }
%"class.WTF::VectorBuffer.68" = type { %"class.WTF::VectorBufferBase.69" }
%"class.WTF::VectorBufferBase.69" = type { %"class.blink::Member.70"*, i32, i32 }
%"class.blink::Member.7" = type { %"class.blink::MemberBase.8" }
%"class.blink::MemberBase.8" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::Animatable" = type { i32 (...)** }
%"class.blink::QualifiedName" = type { %class.scoped_refptr.11 }
%class.scoped_refptr.11 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted.12", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted.12" = type { %"class.base::RefCounted.13" }
%"class.base::RefCounted.13" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Member.14" = type { %"class.blink::MemberBase.15" }
%"class.blink::MemberBase.15" = type { %"class.blink::ElementData"* }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField.18", %"class.blink::Member.20", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField.18" = type { %"class.WTF::SingleThreadedBitField.19" }
%"class.WTF::SingleThreadedBitField.19" = type { i32 }
%"class.blink::Member.20" = type { %"class.blink::MemberBase.21" }
%"class.blink::MemberBase.21" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type { i32 }
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr.24 }
%class.scoped_refptr.24 = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted.25", %"class.WTF::AtomicString", %"class.WTF::Vector" }
%"class.WTF::RefCounted.25" = type { %"class.base::RefCounted.26" }
%"class.base::RefCounted.26" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [32 x i8] }
%"class.WTF::VectorBufferBase" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.perfetto::TracedValue" = type <{ %"class.perfetto::protos::pbzero::DebugAnnotation"*, %"class.perfetto::internal::CheckedScope", [7 x i8] }>
%"class.perfetto::protos::pbzero::DebugAnnotation" = type { %"class.protozero::Message.base", [7 x i8] }
%"class.protozero::Message.base" = type <{ %"class.protozero::ScatteredStreamWriter"*, %"class.protozero::MessageArena"*, %"class.protozero::Message"*, i8*, i32, i32, i8 }>
%"class.protozero::ScatteredStreamWriter" = type { %"class.protozero::ScatteredStreamWriter::Delegate"*, %"struct.protozero::ContiguousMemoryRange", i8*, i64 }
%"class.protozero::ScatteredStreamWriter::Delegate" = type { i32 (...)** }
%"struct.protozero::ContiguousMemoryRange" = type { i8*, i8* }
%"class.protozero::MessageArena" = type { %"class.std::__1::list" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.679" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.679" = type { %"struct.std::__1::__compressed_pair_elem.279" }
%"class.protozero::Message" = type <{ %"class.protozero::ScatteredStreamWriter"*, %"class.protozero::MessageArena"*, %"class.protozero::Message"*, i8*, i32, i32, i8, [7 x i8] }>
%"class.perfetto::internal::CheckedScope" = type { i8 }
%"class.base::trace_event::TraceArguments" = type { i8, [2 x i8], [2 x i8*], [2 x %"union.base::trace_event::TraceValue"] }
%"union.base::trace_event::TraceValue" = type { i64 }
%"class.protozero::ScatteredHeapBuffer" = type { %"class.protozero::ScatteredStreamWriter::Delegate", i64, i64, %"class.protozero::ScatteredStreamWriter"*, %"class.std::__1::vector.720", %"class.protozero::ScatteredHeapBuffer::Slice" }
%"class.std::__1::vector.720" = type { %"class.std::__1::__vector_base.721" }
%"class.std::__1::__vector_base.721" = type { %"class.protozero::ScatteredHeapBuffer::Slice"*, %"class.protozero::ScatteredHeapBuffer::Slice"*, %"class.std::__1::__compressed_pair.728" }
%"class.std::__1::__compressed_pair.728" = type { %"struct.std::__1::__compressed_pair_elem.729" }
%"struct.std::__1::__compressed_pair_elem.729" = type { %"class.protozero::ScatteredHeapBuffer::Slice"* }
%"class.protozero::ScatteredHeapBuffer::Slice" = type { %"class.std::__1::unique_ptr.722", i64, i64 }
%"class.std::__1::unique_ptr.722" = type { %"class.std::__1::__compressed_pair.723" }
%"class.std::__1::__compressed_pair.723" = type { %"struct.std::__1::__compressed_pair_elem.724" }
%"struct.std::__1::__compressed_pair_elem.724" = type { i8* }
%"struct.std::__1::__list_node" = type { %"struct.std::__1::__list_node_base", %"struct.protozero::MessageArena::Block" }
%"struct.protozero::MessageArena::Block" = type { [16 x %"struct.std::__1::aligned_storage<48, 8>::type"], i32, [4 x i8] }
%"struct.std::__1::aligned_storage<48, 8>::type" = type { [48 x i8] }
%"class.base::trace_event::ConvertableToTraceFormat" = type { i32 (...)** }
%"class.protozero::HeapBuffered" = type { %"class.protozero::ScatteredHeapBuffer", %"class.protozero::ScatteredStreamWriter", %"class.protozero::RootMessage" }
%"class.protozero::RootMessage" = type { %"class.perfetto::protos::pbzero::DebugAnnotation.base", %"class.protozero::MessageArena" }
%"class.perfetto::protos::pbzero::DebugAnnotation.base" = type { %"class.protozero::Message.base" }
%"class.blink::UniqueElementData" = type { %"class.blink::ElementData", %"class.blink::Member.20", %"class.WTF::Vector.702" }
%"class.WTF::Vector.702" = type { %"class.WTF::VectorBuffer.703" }
%"class.WTF::VectorBuffer.703" = type { %"class.WTF::VectorBufferBase.704", [64 x i8] }
%"class.WTF::VectorBufferBase.704" = type { %"class.blink::Attribute"*, i32, i32 }
%"class.blink::Attribute" = type { %"class.blink::QualifiedName", %"class.WTF::AtomicString" }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.670" }
%"class.std::__1::__compressed_pair.670" = type { %"struct.std::__1::__compressed_pair_elem.671" }
%"struct.std::__1::__compressed_pair_elem.671" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.perfetto::TracedDictionary" = type <{ %"class.protozero::Message"*, i32, %"class.perfetto::internal::CheckedScope", [3 x i8] }>
%"class.WTF::IntegerToStringConverter" = type <{ [12 x i8], [4 x i8], i8*, i32, [4 x i8] }>
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon.685, i32, i8, i8, [2 x i8] }>
%union.anon.685 = type { %"class.WTF::Vector.686" }
%"class.WTF::Vector.686" = type { %"class.WTF::VectorBuffer.687" }
%"class.WTF::VectorBuffer.687" = type { %"class.WTF::VectorBufferBase.688", [16 x i8] }
%"class.WTF::VectorBufferBase.688" = type { i8*, i32, i32 }
%"class.WTF::Vector.712" = type { %"class.WTF::VectorBuffer.713" }
%"class.WTF::VectorBuffer.713" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.perfetto::TracedArray" = type <{ %"class.perfetto::protos::pbzero::DebugAnnotation"*, %"class.perfetto::internal::CheckedScope", [7 x i8] }>
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>

$_ZN5blink15InvalidationSetD2Ev = comdat any

$_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5ClearERNS0_12BackingFlagsE = comdat any

$_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5ClearERNS0_12BackingFlagsE = comdat any

$_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5ClearERNS0_12BackingFlagsE = comdat any

$_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5ClearERNS0_12BackingFlagsE = comdat any

$_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE3AddERNS0_12BackingFlagsERKN3WTF12AtomicStringE = comdat any

$_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE3AddERNS0_12BackingFlagsERKN3WTF12AtomicStringE = comdat any

$_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE3AddERNS0_12BackingFlagsERKN3WTF12AtomicStringE = comdat any

$_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE3AddERNS0_12BackingFlagsERKN3WTF12AtomicStringE = comdat any

$_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE = comdat any

$_ZN3WTF13StringBuilder6AppendERKS0_ = comdat any

$_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE8ContainsERKNS0_12BackingFlagsERKN3WTF12AtomicStringE = comdat any

$_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE8ContainsERKNS0_12BackingFlagsERKN3WTF12AtomicStringE = comdat any

$_ZZN7logging15CheckOpValueStrIPKN5blink15InvalidationSetEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS5_14remove_pointerIS7_E4typeEEE5valueEPcE4typeES9_ENUlRNS5_13basic_ostreamIcNS5_11char_traitsIcEEEEPKvE_8__invokeESK_SM_ = comdat any

$_ZZN7logging15CheckOpValueStrIPN5blink15InvalidationSetEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS4_14remove_pointerIS6_E4typeEEE5valueEPcE4typeES8_ENUlRNS4_13basic_ostreamIcNS4_11char_traitsIcEEEEPKvE_8__invokeESJ_SL_ = comdat any

$_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5ItemsERKNS0_12BackingFlagsE = comdat any

$_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5RangeC2ENS3_8IteratorES5_ = comdat any

$_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5ItemsERKNS0_12BackingFlagsE = comdat any

$_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5RangeC2ENS3_8IteratorES5_ = comdat any

$_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5ItemsERKNS0_12BackingFlagsE = comdat any

$_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5RangeC2ENS3_8IteratorES5_ = comdat any

$_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5ItemsERKNS0_12BackingFlagsE = comdat any

$_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5RangeC2ENS3_8IteratorES5_ = comdat any

$_ZN3WTF6VectorINS_12AtomicStringELj4ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF23CodeUnitCompareLessThanERKNS_6StringES2_ = comdat any

$_ZN3WTF6VectorINS_12AtomicStringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeINS_12AtomicStringEEEmm = comdat any

$_ZNSt3__16__sortIRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEvT0_SA_T_ = comdat any

$_ZNSt3__17__sort3IRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEjT0_SA_SA_T_ = comdat any

$_ZNSt3__17__sort4IRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEjT0_SA_SA_SA_T_ = comdat any

$_ZNSt3__17__sort5IRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEjT0_SA_SA_SA_SA_T_ = comdat any

$_ZNSt3__118__insertion_sort_3IRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEvT0_SA_T_ = comdat any

$_ZNSt3__127__insertion_sort_incompleteIRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEbT0_SA_T_ = comdat any

$_ZNSt3__14listIN9protozero12MessageArena5BlockENS_9allocatorIS3_EEE6resizeEm = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_ = comdat any

$_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_RS1_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_ = comdat any

$_ZN8perfetto8internal9WriteImplIN5blink15InvalidationSet7BackingILNS3_11BackingTypeE1EE5RangeEEENS_26check_traced_value_supportIDTdeclsr3stdE5beginclsr3stdE7declvalIRT_EEEEvvE4typeENS_4base12priority_tagILm1EEENS_11TracedValueEOS9_ = comdat any

$_ZN8perfetto8internal9WriteImplIN5blink15InvalidationSet7BackingILNS3_11BackingTypeE0EE5RangeEEENS_26check_traced_value_supportIDTdeclsr3stdE5beginclsr3stdE7declvalIRT_EEEEvvE4typeENS_4base12priority_tagILm1EEENS_11TracedValueEOS9_ = comdat any

$_ZN8perfetto8internal9WriteImplIN5blink15InvalidationSet7BackingILNS3_11BackingTypeE2EE5RangeEEENS_26check_traced_value_supportIDTdeclsr3stdE5beginclsr3stdE7declvalIRT_EEEEvvE4typeENS_4base12priority_tagILm1EEENS_11TracedValueEOS9_ = comdat any

$_ZN8perfetto8internal9WriteImplIN5blink15InvalidationSet7BackingILNS3_11BackingTypeE3EE5RangeEEENS_26check_traced_value_supportIDTdeclsr3stdE5beginclsr3stdE7declvalIRT_EEEEvvE4typeENS_4base12priority_tagILm1EEENS_11TracedValueEOS9_ = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

@.str = private unnamed_addr constant [59 x i8] c"disabled-by-default-devtools.timeline.invalidationTracking\00", align 1
@_ZN5blinkL17g_tracing_enabledE = internal unnamed_addr global i8* null, align 8
@_ZN4base11trace_event16CategoryRegistry11categories_E = external global [300 x %"struct.base::trace_event::TraceCategory"], align 16
@.str.1 = private unnamed_addr constant [37 x i8] c"StyleInvalidatorInvalidationTracking\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"data\00", align 1
@.str.3 = private unnamed_addr constant [75 x i8] c"../../third_party/blink/renderer/core/css/invalidation/invalidation_set.cc\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"is_alive_\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"other.is_alive_\00", align 1
@.str.6 = private unnamed_addr constant [29 x i8] c"GetType() == other.GetType()\00", align 1
@.str.7 = private unnamed_addr constant [15 x i8] c"&other != this\00", align 1
@.str.14 = private unnamed_addr constant [22 x i8] c"!class_name.IsEmpty()\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"!id.IsEmpty()\00", align 1
@.str.16 = private unnamed_addr constant [20 x i8] c"!tag_name.IsEmpty()\00", align 1
@.str.17 = private unnamed_addr constant [21 x i8] c"!attribute.IsEmpty()\00", align 1
@_ZZN5blink15InvalidationSet19SelfInvalidationSetEvE10singleton_ = internal unnamed_addr global %"class.blink::InvalidationSet"* null, align 8
@_ZGVZN5blink15InvalidationSet19SelfInvalidationSetEvE10singleton_ = internal global i64 0, align 8
@_ZZN5blink15InvalidationSet19PartInvalidationSetEvE10singleton_ = internal unnamed_addr global %"class.blink::InvalidationSet"* null, align 8
@_ZGVZN5blink15InvalidationSet19PartInvalidationSetEvE10singleton_ = internal global i64 0, align 8
@.str.18 = private unnamed_addr constant [3 x i8] c"id\00", align 1
@.str.19 = private unnamed_addr constant [29 x i8] c"allDescendantsMightBeInvalid\00", align 1
@.str.20 = private unnamed_addr constant [20 x i8] c"customPseudoInvalid\00", align 1
@.str.21 = private unnamed_addr constant [21 x i8] c"treeBoundaryCrossing\00", align 1
@.str.22 = private unnamed_addr constant [23 x i8] c"insertionPointCrossing\00", align 1
@.str.23 = private unnamed_addr constant [19 x i8] c"invalidatesSlotted\00", align 1
@.str.24 = private unnamed_addr constant [17 x i8] c"invalidatesParts\00", align 1
@.str.25 = private unnamed_addr constant [4 x i8] c"ids\00", align 1
@.str.26 = private unnamed_addr constant [8 x i8] c"classes\00", align 1
@.str.27 = private unnamed_addr constant [9 x i8] c"tagNames\00", align 1
@.str.28 = private unnamed_addr constant [11 x i8] c"attributes\00", align 1
@.str.29 = private unnamed_addr constant [2 x i8] c"#\00", align 1
@.str.30 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.31 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.32 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.33 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.34 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@.str.35 = private unnamed_addr constant [2 x i8] c"$\00", align 1
@.str.36 = private unnamed_addr constant [2 x i8] c"W\00", align 1
@.str.37 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.38 = private unnamed_addr constant [2 x i8] c"T\00", align 1
@.str.39 = private unnamed_addr constant [2 x i8] c"I\00", align 1
@.str.40 = private unnamed_addr constant [2 x i8] c"S\00", align 1
@.str.41 = private unnamed_addr constant [2 x i8] c"P\00", align 1
@.str.42 = private unnamed_addr constant [2 x i8] c"{\00", align 1
@.str.43 = private unnamed_addr constant [3 x i8] c" }\00", align 1
@_ZN3WTF11g_null_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@.str.44 = private unnamed_addr constant [74 x i8] c"../../third_party/blink/renderer/core/css/invalidation/invalidation_set.h\00", align 1
@.str.45 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.46 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.48 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.49 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv = private unnamed_addr constant [65 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::AtomicString]\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZN3WTF12g_empty_atomE = external local_unnamed_addr constant %"class.WTF::AtomicString"*, align 8
@.str.50 = private unnamed_addr constant [2 x i8] c"~\00", align 1
@_ZN5blink44inspector_style_invalidator_invalidate_event30kInvalidationSetMatchedTagNameE = external constant [0 x i8], align 1
@_ZN5blink44inspector_style_invalidator_invalidate_event25kInvalidationSetMatchedIdE = external constant [0 x i8], align 1
@_ZN5blink44inspector_style_invalidator_invalidate_event28kInvalidationSetMatchedClassE = external constant [0 x i8], align 1
@_ZN5blink44inspector_style_invalidator_invalidate_event32kInvalidationSetMatchedAttributeE = external constant [0 x i8], align 1
@_ZN5blink44inspector_style_invalidator_invalidate_event27kInvalidationSetMatchedPartE = external constant [0 x i8], align 1
@.str.52 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.53 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_7HashSetINS_12AtomicStringENS_16AtomicStringHashENS_10HashTraitsIS2_EENS_18PartitionAllocatorEEEEEPKcv = private unnamed_addr constant [163 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::HashSet<WTF::AtomicString, WTF::AtomicStringHash, WTF::HashTraits<WTF::AtomicString>, WTF::PartitionAllocator>]\00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

@_ZN5blink15InvalidationSetC1ENS_16InvalidationTypeE = hidden unnamed_addr alias void (%"class.blink::InvalidationSet"*, i32), void (%"class.blink::InvalidationSet"*, i32)* @_ZN5blink15InvalidationSetC2ENS_16InvalidationTypeE
@_ZN5blink22SiblingInvalidationSetC1E13scoped_refptrINS_25DescendantInvalidationSetEE = hidden unnamed_addr alias void (%"class.blink::SiblingInvalidationSet"*, %"class.blink::DescendantInvalidationSet"*), void (%"class.blink::SiblingInvalidationSet"*, %"class.blink::DescendantInvalidationSet"*)* @_ZN5blink22SiblingInvalidationSetC2E13scoped_refptrINS_25DescendantInvalidationSetEE
@_ZN5blink22SiblingInvalidationSetC1Ev = hidden unnamed_addr alias void (%"class.blink::SiblingInvalidationSet"*), void (%"class.blink::SiblingInvalidationSet"*)* @_ZN5blink22SiblingInvalidationSetC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink22InvalidationSetDeleter8DestructEPKNS_15InvalidationSetE(%"class.blink::InvalidationSet"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZNK5blink15InvalidationSet7DestroyEv(%"class.blink::InvalidationSet"* %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink15InvalidationSet7DestroyEv(%"class.blink::InvalidationSet"*) local_unnamed_addr #0 align 2 {
  %2 = icmp eq %"class.blink::InvalidationSet"* %0, null
  br i1 %2, label %34, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 8
  %5 = load i8, i8* %4, align 2
  %6 = and i8 %5, 3
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %32, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 1, i32 2
  %10 = bitcast %"union.blink::InvalidationSet::Backing"* %9 to %"class.blink::DescendantInvalidationSet"**
  %11 = load %"class.blink::DescendantInvalidationSet"*, %"class.blink::DescendantInvalidationSet"** %10, align 8
  %12 = icmp eq %"class.blink::DescendantInvalidationSet"* %11, null
  br i1 %12, label %20, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.blink::DescendantInvalidationSet", %"class.blink::DescendantInvalidationSet"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %14) #14
  %15 = getelementptr inbounds %"class.blink::DescendantInvalidationSet", %"class.blink::DescendantInvalidationSet"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %13
  %19 = bitcast %"class.blink::DescendantInvalidationSet"* %11 to %"class.blink::InvalidationSet"*
  tail call void @_ZNK5blink15InvalidationSet7DestroyEv(%"class.blink::InvalidationSet"* nonnull %19) #14
  br label %20

20:                                               ; preds = %18, %13, %8
  %21 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 1
  %22 = bitcast %"class.blink::InvalidationSet"* %21 to %"class.blink::DescendantInvalidationSet"**
  %23 = load %"class.blink::DescendantInvalidationSet"*, %"class.blink::DescendantInvalidationSet"** %22, align 8
  %24 = icmp eq %"class.blink::DescendantInvalidationSet"* %23, null
  br i1 %24, label %32, label %25

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.blink::DescendantInvalidationSet", %"class.blink::DescendantInvalidationSet"* %23, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %26) #14
  %27 = getelementptr inbounds %"class.blink::DescendantInvalidationSet", %"class.blink::DescendantInvalidationSet"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %25
  %31 = bitcast %"class.blink::DescendantInvalidationSet"* %23 to %"class.blink::InvalidationSet"*
  tail call void @_ZNK5blink15InvalidationSet7DestroyEv(%"class.blink::InvalidationSet"* nonnull %31) #14
  br label %32

32:                                               ; preds = %20, %25, %30, %3
  tail call void @_ZN5blink15InvalidationSetD2Ev(%"class.blink::InvalidationSet"* nonnull %0) #14
  %33 = bitcast %"class.blink::InvalidationSet"* %0 to i8*
  tail call void @free(i8* %33) #14
  br label %34

34:                                               ; preds = %32, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink15InvalidationSeteqERKS0_(%"class.blink::InvalidationSet"*, %"class.blink::InvalidationSet"* dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", align 8
  %4 = alloca i64, align 8
  %5 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", align 8
  %6 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", align 8
  %7 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", align 8
  %8 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", align 8
  %9 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", align 8
  %10 = alloca i64, align 8
  %11 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 8
  %12 = load i8, i8* %11, align 2
  %13 = and i8 %12, 3
  %14 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %1, i64 0, i32 8
  %15 = load i8, i8* %14, align 2
  %16 = and i8 %15, 3
  %17 = icmp eq i8 %13, %16
  br i1 %17, label %18, label %1134

18:                                               ; preds = %2
  %19 = icmp eq i8 %13, 1
  br i1 %19, label %20, label %60

20:                                               ; preds = %18
  %21 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 9, i64 1
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %1, i64 0, i32 9, i64 1
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %23, %26
  br i1 %27, label %28, label %1134

28:                                               ; preds = %20
  %29 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 1, i32 2
  %30 = bitcast %"union.blink::InvalidationSet::Backing"* %29 to %"class.blink::DescendantInvalidationSet"**
  %31 = load %"class.blink::DescendantInvalidationSet"*, %"class.blink::DescendantInvalidationSet"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %1, i64 1, i32 2
  %33 = bitcast %"union.blink::InvalidationSet::Backing"* %32 to %"class.blink::DescendantInvalidationSet"**
  %34 = load %"class.blink::DescendantInvalidationSet"*, %"class.blink::DescendantInvalidationSet"** %33, align 8
  %35 = icmp eq %"class.blink::DescendantInvalidationSet"* %31, %34
  br i1 %35, label %44, label %36

36:                                               ; preds = %28
  %37 = icmp ne %"class.blink::DescendantInvalidationSet"* %31, null
  %38 = icmp ne %"class.blink::DescendantInvalidationSet"* %34, null
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %1134

40:                                               ; preds = %36
  %41 = bitcast %"class.blink::DescendantInvalidationSet"* %31 to %"class.blink::InvalidationSet"*
  %42 = bitcast %"class.blink::DescendantInvalidationSet"* %34 to %"class.blink::InvalidationSet"*
  %43 = tail call zeroext i1 @_ZNK5blink15InvalidationSeteqERKS0_(%"class.blink::InvalidationSet"* nonnull %41, %"class.blink::InvalidationSet"* nonnull dereferenceable(48) %42) #14
  br i1 %43, label %44, label %1134

44:                                               ; preds = %28, %40
  %45 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 1
  %46 = bitcast %"class.blink::InvalidationSet"* %45 to %"class.blink::DescendantInvalidationSet"**
  %47 = load %"class.blink::DescendantInvalidationSet"*, %"class.blink::DescendantInvalidationSet"** %46, align 8
  %48 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %1, i64 1
  %49 = bitcast %"class.blink::InvalidationSet"* %48 to %"class.blink::DescendantInvalidationSet"**
  %50 = load %"class.blink::DescendantInvalidationSet"*, %"class.blink::DescendantInvalidationSet"** %49, align 8
  %51 = icmp eq %"class.blink::DescendantInvalidationSet"* %47, %50
  br i1 %51, label %60, label %52

52:                                               ; preds = %44
  %53 = icmp ne %"class.blink::DescendantInvalidationSet"* %47, null
  %54 = icmp ne %"class.blink::DescendantInvalidationSet"* %50, null
  %55 = and i1 %53, %54
  br i1 %55, label %56, label %1134

56:                                               ; preds = %52
  %57 = bitcast %"class.blink::DescendantInvalidationSet"* %47 to %"class.blink::InvalidationSet"*
  %58 = bitcast %"class.blink::DescendantInvalidationSet"* %50 to %"class.blink::InvalidationSet"*
  %59 = tail call zeroext i1 @_ZNK5blink15InvalidationSeteqERKS0_(%"class.blink::InvalidationSet"* nonnull %57, %"class.blink::InvalidationSet"* nonnull dereferenceable(48) %58) #14
  br i1 %59, label %60, label %1134

60:                                               ; preds = %44, %56, %18
  %61 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 6
  %62 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %1, i64 0, i32 6
  %63 = tail call zeroext i1 @_ZNK5blink17InvalidationFlagseqERKS0_(%"class.blink::InvalidationFlags"* %61, %"class.blink::InvalidationFlags"* dereferenceable(1) %62) #14
  br i1 %63, label %64, label %1134

64:                                               ; preds = %60
  %65 = load i8, i8* %11, align 2
  %66 = load i8, i8* %14, align 2
  %67 = xor i8 %66, %65
  %68 = and i8 %67, 4
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %70, label %1134

70:                                               ; preds = %64
  %71 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7
  %72 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 2
  %73 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %1, i64 0, i32 7
  %74 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %1, i64 0, i32 2
  %75 = getelementptr inbounds %"class.blink::InvalidationSet::BackingFlags", %"class.blink::InvalidationSet::BackingFlags"* %71, i64 0, i32 0
  %76 = load i8, i8* %75, align 1
  %77 = and i8 %76, 1
  %78 = icmp eq i8 %77, 0
  br i1 %78, label %83, label %79

79:                                               ; preds = %70
  %80 = bitcast %"union.blink::InvalidationSet::Backing"* %72 to %"class.WTF::HashSet"**
  %81 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %80, align 8
  %82 = icmp eq %"class.WTF::HashSet"* %81, null
  br i1 %82, label %92, label %88

83:                                               ; preds = %70
  %84 = getelementptr inbounds %"union.blink::InvalidationSet::Backing", %"union.blink::InvalidationSet::Backing"* %72, i64 0, i32 0
  %85 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %84, align 8
  %86 = icmp ne %"class.WTF::StringImpl"* %85, null
  %87 = zext i1 %86 to i64
  br label %92

88:                                               ; preds = %79
  %89 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %81, i64 0, i32 0, i32 2
  %90 = load i32, i32* %89, align 4
  %91 = zext i32 %90 to i64
  br label %92

92:                                               ; preds = %88, %83, %79
  %93 = phi i64 [ %91, %88 ], [ %87, %83 ], [ 0, %79 ]
  %94 = getelementptr inbounds %"class.blink::InvalidationSet::BackingFlags", %"class.blink::InvalidationSet::BackingFlags"* %73, i64 0, i32 0
  %95 = load i8, i8* %94, align 1
  %96 = and i8 %95, 1
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %102, label %98

98:                                               ; preds = %92
  %99 = bitcast %"union.blink::InvalidationSet::Backing"* %74 to %"class.WTF::HashSet"**
  %100 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %99, align 8
  %101 = icmp eq %"class.WTF::HashSet"* %100, null
  br i1 %101, label %111, label %107

102:                                              ; preds = %92
  %103 = getelementptr inbounds %"union.blink::InvalidationSet::Backing", %"union.blink::InvalidationSet::Backing"* %74, i64 0, i32 0
  %104 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %103, align 8
  %105 = icmp ne %"class.WTF::StringImpl"* %104, null
  %106 = zext i1 %105 to i64
  br label %111

107:                                              ; preds = %98
  %108 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %100, i64 0, i32 0, i32 2
  %109 = load i32, i32* %108, align 4
  %110 = zext i32 %109 to i64
  br label %111

111:                                              ; preds = %107, %102, %98
  %112 = phi i64 [ %110, %107 ], [ %106, %102 ], [ 0, %98 ]
  %113 = icmp eq i64 %93, %112
  br i1 %113, label %114, label %1134

114:                                              ; preds = %111
  %115 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %115) #14
  call void @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5ItemsERKNS0_12BackingFlagsE(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* nonnull sret %3, %"union.blink::InvalidationSet::Backing"* %72, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %71) #14
  %116 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %116)
  %117 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %3, i64 0, i32 0, i32 0
  %118 = load i32, i32* %117, align 8, !noalias !2
  %119 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %3, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %120 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %119, align 8, !noalias !2
  %121 = ptrtoint %"class.WTF::StringImpl"* %120 to i64
  store i64 %121, i64* %4, align 8, !alias.scope !2
  %122 = icmp eq %"class.WTF::StringImpl"* %120, null
  br i1 %122, label %140, label %123

123:                                              ; preds = %114
  %124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %120, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %125 = load atomic i32, i32* %124 monotonic, align 4, !noalias !2
  %126 = and i32 %125, 2
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %140

128:                                              ; preds = %123
  %129 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %120, i64 0, i32 0
  %130 = load i32, i32* %129, align 4, !noalias !2
  %131 = zext i32 %130 to i33
  %132 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %131, i33 1) #14
  %133 = extractvalue { i33, i1 } %132, 1
  %134 = extractvalue { i33, i1 } %132, 0
  %135 = icmp slt i33 %134, 0
  %136 = or i1 %133, %135
  br i1 %136, label %137, label %138, !prof !5

137:                                              ; preds = %128
  call void @llvm.trap() #14, !noalias !2
  unreachable

138:                                              ; preds = %128
  %139 = trunc i33 %134 to i32
  store i32 %139, i32* %129, align 4, !noalias !2
  br label %140

140:                                              ; preds = %138, %123, %114
  %141 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %142 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %141, align 8
  %143 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %3, i64 0, i32 0, i32 2, i32 0, i32 1
  %144 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %143, align 8
  %145 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %3, i64 0, i32 1, i32 0
  %146 = load i32, i32* %145, align 8, !noalias !6
  %147 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %3, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %148 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %147, align 8, !noalias !6
  %149 = icmp eq %"class.WTF::StringImpl"* %148, null
  br i1 %149, label %167, label %150

150:                                              ; preds = %140
  %151 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %148, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %152 = load atomic i32, i32* %151 monotonic, align 4, !noalias !6
  %153 = and i32 %152, 2
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %167

155:                                              ; preds = %150
  %156 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %148, i64 0, i32 0
  %157 = load i32, i32* %156, align 4, !noalias !6
  %158 = zext i32 %157 to i33
  %159 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %158, i33 1) #14
  %160 = extractvalue { i33, i1 } %159, 1
  %161 = extractvalue { i33, i1 } %159, 0
  %162 = icmp slt i33 %161, 0
  %163 = or i1 %160, %162
  br i1 %163, label %164, label %165, !prof !5

164:                                              ; preds = %155
  call void @llvm.trap() #14, !noalias !6
  unreachable

165:                                              ; preds = %155
  %166 = trunc i33 %161 to i32
  store i32 %166, i32* %156, align 4, !noalias !6
  br label %167

167:                                              ; preds = %165, %150, %140
  %168 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %3, i64 0, i32 1, i32 2, i32 0, i32 0
  %169 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %168, align 8
  %170 = icmp eq i32 %118, %146
  %171 = icmp eq i32 %118, 0
  %172 = bitcast %"union.blink::InvalidationSet::Backing"* %74 to %"class.WTF::HashSet"**
  %173 = getelementptr inbounds %"union.blink::InvalidationSet::Backing", %"union.blink::InvalidationSet::Backing"* %74, i64 0, i32 0
  %174 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %175 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %174, i64 0, i32 0, i32 0, i32 0
  %176 = bitcast i64* %4 to %"class.WTF::AtomicString"*
  br label %177

177:                                              ; preds = %278, %167
  %178 = phi %"class.WTF::StringImpl"* [ %120, %167 ], [ %256, %278 ]
  %179 = phi %"class.WTF::AtomicString"* [ %142, %167 ], [ %182, %278 ]
  %180 = icmp eq %"class.WTF::StringImpl"* %178, %148
  br label %181

181:                                              ; preds = %295, %177
  %182 = phi %"class.WTF::AtomicString"* [ %179, %177 ], [ %296, %295 ]
  br i1 %170, label %183, label %186

183:                                              ; preds = %181
  %184 = icmp eq %"class.WTF::AtomicString"* %182, %169
  %185 = select i1 %171, i1 %180, i1 %184
  br i1 %185, label %304, label %186

186:                                              ; preds = %183, %181
  %187 = select i1 %171, %"class.WTF::AtomicString"* %176, %"class.WTF::AtomicString"* %182
  %188 = load i8, i8* %94, align 1
  %189 = and i8 %188, 1
  %190 = icmp eq i8 %189, 0
  br i1 %190, label %247, label %191

191:                                              ; preds = %186
  %192 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %172, align 8
  %193 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %192, i64 0, i32 0, i32 0
  %194 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %193, align 8
  %195 = icmp eq %"class.WTF::AtomicString"* %194, null
  br i1 %195, label %304, label %196

196:                                              ; preds = %191
  %197 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %192, i64 0, i32 0, i32 1
  %198 = load i32, i32* %197, align 8
  %199 = add i32 %198, -1
  %200 = zext i32 %199 to i64
  %201 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %187, i64 0, i32 0, i32 0, i32 0
  %202 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %201, align 8
  %203 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %202, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %204 = load atomic i32, i32* %203 monotonic, align 4
  %205 = lshr i32 %204, 8
  %206 = and i32 %205, %199
  %207 = zext i32 %206 to i64
  %208 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %194, i64 %207
  %209 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %208, i64 0, i32 0, i32 0, i32 0
  %210 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %209, align 8
  %211 = icmp eq %"class.WTF::StringImpl"* %210, null
  br i1 %211, label %304, label %212

212:                                              ; preds = %196
  %213 = xor i32 %205, -1
  %214 = lshr i32 %204, 31
  %215 = add nsw i32 %214, %213
  %216 = shl i32 %215, 12
  %217 = xor i32 %216, %215
  %218 = lshr i32 %217, 7
  %219 = xor i32 %218, %217
  %220 = shl i32 %219, 2
  %221 = xor i32 %220, %219
  %222 = lshr i32 %221, 20
  %223 = xor i32 %222, %221
  %224 = or i32 %223, 1
  %225 = zext i32 %224 to i64
  br label %226

226:                                              ; preds = %236, %212
  %227 = phi %"class.WTF::StringImpl"* [ %210, %212 ], [ %243, %236 ]
  %228 = phi %"class.WTF::AtomicString"* [ %208, %212 ], [ %241, %236 ]
  %229 = phi i64 [ %207, %212 ], [ %240, %236 ]
  %230 = phi i64 [ 0, %212 ], [ %238, %236 ]
  %231 = bitcast %"class.WTF::AtomicString"* %228 to i8**
  %232 = load i8*, i8** %231, align 8
  %233 = icmp ne i8* %232, inttoptr (i64 -1 to i8*)
  %234 = icmp eq %"class.WTF::StringImpl"* %227, %202
  %235 = and i1 %234, %233
  br i1 %235, label %245, label %236

236:                                              ; preds = %226
  %237 = icmp eq i64 %230, 0
  %238 = select i1 %237, i64 %225, i64 %230
  %239 = add i64 %238, %229
  %240 = and i64 %239, %200
  %241 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %194, i64 %240
  %242 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %241, i64 0, i32 0, i32 0, i32 0
  %243 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %242, align 8
  %244 = icmp eq %"class.WTF::StringImpl"* %243, null
  br i1 %244, label %304, label %226

245:                                              ; preds = %226
  %246 = icmp eq %"class.WTF::AtomicString"* %228, null
  br i1 %246, label %304, label %254

247:                                              ; preds = %186
  %248 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %173, align 8
  %249 = icmp eq %"class.WTF::StringImpl"* %248, null
  br i1 %249, label %304, label %250

250:                                              ; preds = %247
  %251 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %187, i64 0, i32 0, i32 0, i32 0
  %252 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %251, align 8
  %253 = call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %252, %"class.WTF::StringImpl"* nonnull %248) #14
  br i1 %253, label %254, label %304

254:                                              ; preds = %250, %245
  br i1 %171, label %255, label %292

255:                                              ; preds = %254
  %256 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %175, align 8
  %257 = icmp eq %"class.WTF::StringImpl"* %256, null
  br i1 %257, label %275, label %258

258:                                              ; preds = %255
  %259 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %256, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %260 = load atomic i32, i32* %259 monotonic, align 4
  %261 = and i32 %260, 2
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %263, label %275

263:                                              ; preds = %258
  %264 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %256, i64 0, i32 0
  %265 = load i32, i32* %264, align 4
  %266 = zext i32 %265 to i33
  %267 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %266, i33 1) #14
  %268 = extractvalue { i33, i1 } %267, 1
  %269 = extractvalue { i33, i1 } %267, 0
  %270 = icmp slt i33 %269, 0
  %271 = or i1 %268, %270
  br i1 %271, label %272, label %273, !prof !5

272:                                              ; preds = %263
  call void @llvm.trap() #14
  unreachable

273:                                              ; preds = %263
  %274 = trunc i33 %269 to i32
  store i32 %274, i32* %264, align 4
  br label %275

275:                                              ; preds = %273, %258, %255
  %276 = ptrtoint %"class.WTF::StringImpl"* %256 to i64
  store i64 %276, i64* %4, align 8
  %277 = icmp eq %"class.WTF::StringImpl"* %178, null
  br i1 %277, label %278, label %279

278:                                              ; preds = %275, %291, %288
  br label %177

279:                                              ; preds = %275
  %280 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %178, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %281 = load atomic i32, i32* %280 monotonic, align 4
  %282 = and i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %178, i64 0, i32 0
  %285 = load i32, i32* %284, align 4
  br i1 %283, label %286, label %288

286:                                              ; preds = %279
  %287 = add i32 %285, -1
  store i32 %287, i32* %284, align 4
  br label %288

288:                                              ; preds = %286, %279
  %289 = phi i32 [ %287, %286 ], [ %285, %279 ]
  %290 = icmp eq i32 %289, 0
  br i1 %290, label %291, label %278

291:                                              ; preds = %288
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %178) #14
  br label %278

292:                                              ; preds = %254
  %293 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %182, i64 1
  %294 = icmp eq %"class.WTF::AtomicString"* %293, %144
  br i1 %294, label %295, label %297

295:                                              ; preds = %297, %301, %292
  %296 = phi %"class.WTF::AtomicString"* [ %144, %292 ], [ %144, %301 ], [ %298, %297 ]
  br label %181

297:                                              ; preds = %292, %301
  %298 = phi %"class.WTF::AtomicString"* [ %302, %301 ], [ %293, %292 ]
  %299 = bitcast %"class.WTF::AtomicString"* %298 to i64*
  %300 = load i64, i64* %299, align 8
  switch i64 %300, label %295 [
    i64 -1, label %301
    i64 0, label %301
  ]

301:                                              ; preds = %297, %297
  %302 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %298, i64 1
  %303 = icmp eq %"class.WTF::AtomicString"* %302, %144
  br i1 %303, label %295, label %297

304:                                              ; preds = %250, %247, %245, %196, %191, %183, %236
  %305 = phi i32 [ 1, %236 ], [ 2, %183 ], [ 1, %250 ], [ 1, %245 ], [ 1, %247 ], [ 1, %191 ], [ 1, %196 ]
  br i1 %149, label %319, label %306

306:                                              ; preds = %304
  %307 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %148, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %308 = load atomic i32, i32* %307 monotonic, align 4
  %309 = and i32 %308, 2
  %310 = icmp eq i32 %309, 0
  %311 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %148, i64 0, i32 0
  %312 = load i32, i32* %311, align 4
  br i1 %310, label %313, label %315

313:                                              ; preds = %306
  %314 = add i32 %312, -1
  store i32 %314, i32* %311, align 4
  br label %315

315:                                              ; preds = %313, %306
  %316 = phi i32 [ %314, %313 ], [ %312, %306 ]
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %318, label %319

318:                                              ; preds = %315
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %148) #14
  br label %319

319:                                              ; preds = %318, %315, %304
  %320 = icmp eq %"class.WTF::StringImpl"* %178, null
  br i1 %320, label %334, label %321

321:                                              ; preds = %319
  %322 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %178, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %323 = load atomic i32, i32* %322 monotonic, align 4
  %324 = and i32 %323, 2
  %325 = icmp eq i32 %324, 0
  %326 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %178, i64 0, i32 0
  %327 = load i32, i32* %326, align 4
  br i1 %325, label %328, label %330

328:                                              ; preds = %321
  %329 = add i32 %327, -1
  store i32 %329, i32* %326, align 4
  br label %330

330:                                              ; preds = %328, %321
  %331 = phi i32 [ %329, %328 ], [ %327, %321 ]
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %333, label %334

333:                                              ; preds = %330
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %178) #14
  br label %334

334:                                              ; preds = %333, %330, %319
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %116)
  %335 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %147, align 8
  %336 = icmp eq %"class.WTF::StringImpl"* %335, null
  br i1 %336, label %350, label %337

337:                                              ; preds = %334
  %338 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %335, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %339 = load atomic i32, i32* %338 monotonic, align 4
  %340 = and i32 %339, 2
  %341 = icmp eq i32 %340, 0
  %342 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %335, i64 0, i32 0
  %343 = load i32, i32* %342, align 4
  br i1 %341, label %344, label %346

344:                                              ; preds = %337
  %345 = add i32 %343, -1
  store i32 %345, i32* %342, align 4
  br label %346

346:                                              ; preds = %344, %337
  %347 = phi i32 [ %345, %344 ], [ %343, %337 ]
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %349, label %350

349:                                              ; preds = %346
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %335) #14
  br label %350

350:                                              ; preds = %349, %346, %334
  %351 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %119, align 8
  %352 = icmp eq %"class.WTF::StringImpl"* %351, null
  br i1 %352, label %366, label %353

353:                                              ; preds = %350
  %354 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %351, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %355 = load atomic i32, i32* %354 monotonic, align 4
  %356 = and i32 %355, 2
  %357 = icmp eq i32 %356, 0
  %358 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %351, i64 0, i32 0
  %359 = load i32, i32* %358, align 4
  br i1 %357, label %360, label %362

360:                                              ; preds = %353
  %361 = add i32 %359, -1
  store i32 %361, i32* %358, align 4
  br label %362

362:                                              ; preds = %360, %353
  %363 = phi i32 [ %361, %360 ], [ %359, %353 ]
  %364 = icmp eq i32 %363, 0
  br i1 %364, label %365, label %366

365:                                              ; preds = %362
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %351) #14
  br label %366

366:                                              ; preds = %350, %362, %365
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %115) #14
  %367 = icmp eq i32 %305, 2
  br i1 %367, label %368, label %1134

368:                                              ; preds = %366
  %369 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 3
  %370 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %1, i64 0, i32 3
  %371 = load i8, i8* %75, align 1
  %372 = and i8 %371, 2
  %373 = icmp eq i8 %372, 0
  br i1 %373, label %378, label %374

374:                                              ; preds = %368
  %375 = bitcast %"union.blink::InvalidationSet::Backing.1"* %369 to %"class.WTF::HashSet"**
  %376 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %375, align 8
  %377 = icmp eq %"class.WTF::HashSet"* %376, null
  br i1 %377, label %387, label %383

378:                                              ; preds = %368
  %379 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.1", %"union.blink::InvalidationSet::Backing.1"* %369, i64 0, i32 0
  %380 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %379, align 8
  %381 = icmp ne %"class.WTF::StringImpl"* %380, null
  %382 = zext i1 %381 to i64
  br label %387

383:                                              ; preds = %374
  %384 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %376, i64 0, i32 0, i32 2
  %385 = load i32, i32* %384, align 4
  %386 = zext i32 %385 to i64
  br label %387

387:                                              ; preds = %383, %378, %374
  %388 = phi i64 [ %386, %383 ], [ %382, %378 ], [ 0, %374 ]
  %389 = load i8, i8* %94, align 1
  %390 = and i8 %389, 2
  %391 = icmp eq i8 %390, 0
  br i1 %391, label %396, label %392

392:                                              ; preds = %387
  %393 = bitcast %"union.blink::InvalidationSet::Backing.1"* %370 to %"class.WTF::HashSet"**
  %394 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %393, align 8
  %395 = icmp eq %"class.WTF::HashSet"* %394, null
  br i1 %395, label %405, label %401

396:                                              ; preds = %387
  %397 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.1", %"union.blink::InvalidationSet::Backing.1"* %370, i64 0, i32 0
  %398 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %397, align 8
  %399 = icmp ne %"class.WTF::StringImpl"* %398, null
  %400 = zext i1 %399 to i64
  br label %405

401:                                              ; preds = %392
  %402 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %394, i64 0, i32 0, i32 2
  %403 = load i32, i32* %402, align 4
  %404 = zext i32 %403 to i64
  br label %405

405:                                              ; preds = %401, %396, %392
  %406 = phi i64 [ %404, %401 ], [ %400, %396 ], [ 0, %392 ]
  %407 = icmp eq i64 %388, %406
  br i1 %407, label %408, label %1134

408:                                              ; preds = %405
  %409 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %409) #14
  call void @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5ItemsERKNS0_12BackingFlagsE(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* nonnull sret %5, %"union.blink::InvalidationSet::Backing.1"* %369, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %71) #14
  %410 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %410) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %410, i8 -86, i64 32, i1 false) #14
  %411 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %6, i64 0, i32 0
  %412 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %5, i64 0, i32 0, i32 0
  %413 = load i32, i32* %412, align 8, !noalias !9
  store i32 %413, i32* %411, align 8, !alias.scope !9
  %414 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %5, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %415 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %414, align 8, !noalias !9
  %416 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %6, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %415, %"class.WTF::StringImpl"** %416, align 8, !alias.scope !9
  %417 = icmp eq %"class.WTF::StringImpl"* %415, null
  br i1 %417, label %435, label %418

418:                                              ; preds = %408
  %419 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %415, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %420 = load atomic i32, i32* %419 monotonic, align 4, !noalias !9
  %421 = and i32 %420, 2
  %422 = icmp eq i32 %421, 0
  br i1 %422, label %423, label %435

423:                                              ; preds = %418
  %424 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %415, i64 0, i32 0
  %425 = load i32, i32* %424, align 4, !noalias !9
  %426 = zext i32 %425 to i33
  %427 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %426, i33 1) #14
  %428 = extractvalue { i33, i1 } %427, 1
  %429 = extractvalue { i33, i1 } %427, 0
  %430 = icmp slt i33 %429, 0
  %431 = or i1 %428, %430
  br i1 %431, label %432, label %433, !prof !5

432:                                              ; preds = %423
  call void @llvm.trap() #14, !noalias !9
  unreachable

433:                                              ; preds = %423
  %434 = trunc i33 %429 to i32
  store i32 %434, i32* %424, align 4, !noalias !9
  br label %435

435:                                              ; preds = %433, %418, %408
  %436 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %6, i64 0, i32 2
  %437 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %5, i64 0, i32 0, i32 2
  %438 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %436 to i8*
  %439 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %437 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %438, i8* align 8 %439, i64 16, i1 false) #14
  %440 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %5, i64 0, i32 1, i32 0
  %441 = load i32, i32* %440, align 8, !noalias !12
  %442 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %5, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %443 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %442, align 8, !noalias !12
  %444 = icmp eq %"class.WTF::StringImpl"* %443, null
  br i1 %444, label %462, label %445

445:                                              ; preds = %435
  %446 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %443, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %447 = load atomic i32, i32* %446 monotonic, align 4, !noalias !12
  %448 = and i32 %447, 2
  %449 = icmp eq i32 %448, 0
  br i1 %449, label %450, label %462

450:                                              ; preds = %445
  %451 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %443, i64 0, i32 0
  %452 = load i32, i32* %451, align 4, !noalias !12
  %453 = zext i32 %452 to i33
  %454 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %453, i33 1) #14
  %455 = extractvalue { i33, i1 } %454, 1
  %456 = extractvalue { i33, i1 } %454, 0
  %457 = icmp slt i33 %456, 0
  %458 = or i1 %455, %457
  br i1 %458, label %459, label %460, !prof !5

459:                                              ; preds = %450
  call void @llvm.trap() #14, !noalias !12
  unreachable

460:                                              ; preds = %450
  %461 = trunc i33 %456 to i32
  store i32 %461, i32* %451, align 4, !noalias !12
  br label %462

462:                                              ; preds = %460, %445, %435
  %463 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %5, i64 0, i32 1, i32 2, i32 0, i32 0
  %464 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %463, align 8
  %465 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %6, i64 0, i32 2, i32 0, i32 0
  %466 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %6, i64 0, i32 1
  %467 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %6, i64 0, i32 2, i32 0, i32 1
  %468 = bitcast %"class.WTF::AtomicString"* %466 to i64*
  %469 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %466, i64 0, i32 0, i32 0, i32 0
  %470 = icmp eq i32 %441, 0
  br label %471

471:                                              ; preds = %532, %462
  %472 = load i32, i32* %411, align 8
  %473 = icmp eq i32 %472, %441
  br i1 %473, label %476, label %474

474:                                              ; preds = %471
  %475 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %465, align 8
  br label %482

476:                                              ; preds = %471
  %477 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %416, align 8
  %478 = icmp eq %"class.WTF::StringImpl"* %477, %443
  %479 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %465, align 8
  %480 = icmp eq %"class.WTF::AtomicString"* %479, %464
  %481 = select i1 %470, i1 %478, i1 %480
  br i1 %481, label %540, label %482

482:                                              ; preds = %476, %474
  %483 = phi %"class.WTF::AtomicString"* [ %475, %474 ], [ %479, %476 ]
  %484 = icmp eq i32 %472, 0
  %485 = select i1 %484, %"class.WTF::AtomicString"* %466, %"class.WTF::AtomicString"* %483
  %486 = call zeroext i1 @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE8ContainsERKNS0_12BackingFlagsERKN3WTF12AtomicStringE(%"union.blink::InvalidationSet::Backing.1"* %370, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %73, %"class.WTF::AtomicString"* dereferenceable(8) %485) #14
  br i1 %486, label %487, label %540

487:                                              ; preds = %482
  %488 = load i32, i32* %411, align 8
  %489 = icmp eq i32 %488, 0
  br i1 %489, label %490, label %527

490:                                              ; preds = %487
  %491 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %175, align 8
  %492 = icmp eq %"class.WTF::StringImpl"* %491, null
  br i1 %492, label %510, label %493

493:                                              ; preds = %490
  %494 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %491, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %495 = load atomic i32, i32* %494 monotonic, align 4
  %496 = and i32 %495, 2
  %497 = icmp eq i32 %496, 0
  br i1 %497, label %498, label %510

498:                                              ; preds = %493
  %499 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %491, i64 0, i32 0
  %500 = load i32, i32* %499, align 4
  %501 = zext i32 %500 to i33
  %502 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %501, i33 1) #14
  %503 = extractvalue { i33, i1 } %502, 1
  %504 = extractvalue { i33, i1 } %502, 0
  %505 = icmp slt i33 %504, 0
  %506 = or i1 %503, %505
  br i1 %506, label %507, label %508, !prof !5

507:                                              ; preds = %498
  call void @llvm.trap() #14
  unreachable

508:                                              ; preds = %498
  %509 = trunc i33 %504 to i32
  store i32 %509, i32* %499, align 4
  br label %510

510:                                              ; preds = %508, %493, %490
  %511 = ptrtoint %"class.WTF::StringImpl"* %491 to i64
  %512 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %469, align 8
  store i64 %511, i64* %468, align 8
  %513 = icmp eq %"class.WTF::StringImpl"* %512, null
  br i1 %513, label %532, label %514

514:                                              ; preds = %510
  %515 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %512, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %516 = load atomic i32, i32* %515 monotonic, align 4
  %517 = and i32 %516, 2
  %518 = icmp eq i32 %517, 0
  %519 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %512, i64 0, i32 0
  %520 = load i32, i32* %519, align 4
  br i1 %518, label %521, label %523

521:                                              ; preds = %514
  %522 = add i32 %520, -1
  store i32 %522, i32* %519, align 4
  br label %523

523:                                              ; preds = %521, %514
  %524 = phi i32 [ %522, %521 ], [ %520, %514 ]
  %525 = icmp eq i32 %524, 0
  br i1 %525, label %526, label %532

526:                                              ; preds = %523
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %512) #14
  br label %532

527:                                              ; preds = %487
  %528 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %465, align 8
  %529 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %528, i64 1
  store %"class.WTF::AtomicString"* %529, %"class.WTF::AtomicString"** %465, align 8
  %530 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %467, align 8
  %531 = icmp eq %"class.WTF::AtomicString"* %529, %530
  br i1 %531, label %532, label %533

532:                                              ; preds = %533, %537, %527, %526, %523, %510
  br label %471

533:                                              ; preds = %527, %537
  %534 = phi %"class.WTF::AtomicString"* [ %538, %537 ], [ %529, %527 ]
  %535 = bitcast %"class.WTF::AtomicString"* %534 to i64*
  %536 = load i64, i64* %535, align 8
  switch i64 %536, label %532 [
    i64 -1, label %537
    i64 0, label %537
  ]

537:                                              ; preds = %533, %533
  %538 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %534, i64 1
  store %"class.WTF::AtomicString"* %538, %"class.WTF::AtomicString"** %465, align 8
  %539 = icmp eq %"class.WTF::AtomicString"* %538, %530
  br i1 %539, label %532, label %533

540:                                              ; preds = %482, %476
  %541 = phi i32 [ 1, %482 ], [ 2, %476 ]
  br i1 %444, label %555, label %542

542:                                              ; preds = %540
  %543 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %443, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %544 = load atomic i32, i32* %543 monotonic, align 4
  %545 = and i32 %544, 2
  %546 = icmp eq i32 %545, 0
  %547 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %443, i64 0, i32 0
  %548 = load i32, i32* %547, align 4
  br i1 %546, label %549, label %551

549:                                              ; preds = %542
  %550 = add i32 %548, -1
  store i32 %550, i32* %547, align 4
  br label %551

551:                                              ; preds = %549, %542
  %552 = phi i32 [ %550, %549 ], [ %548, %542 ]
  %553 = icmp eq i32 %552, 0
  br i1 %553, label %554, label %555

554:                                              ; preds = %551
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %443) #14
  br label %555

555:                                              ; preds = %554, %551, %540
  %556 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %416, align 8
  %557 = icmp eq %"class.WTF::StringImpl"* %556, null
  br i1 %557, label %571, label %558

558:                                              ; preds = %555
  %559 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %556, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %560 = load atomic i32, i32* %559 monotonic, align 4
  %561 = and i32 %560, 2
  %562 = icmp eq i32 %561, 0
  %563 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %556, i64 0, i32 0
  %564 = load i32, i32* %563, align 4
  br i1 %562, label %565, label %567

565:                                              ; preds = %558
  %566 = add i32 %564, -1
  store i32 %566, i32* %563, align 4
  br label %567

567:                                              ; preds = %565, %558
  %568 = phi i32 [ %566, %565 ], [ %564, %558 ]
  %569 = icmp eq i32 %568, 0
  br i1 %569, label %570, label %571

570:                                              ; preds = %567
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %556) #14
  br label %571

571:                                              ; preds = %570, %567, %555
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %410) #14
  %572 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %442, align 8
  %573 = icmp eq %"class.WTF::StringImpl"* %572, null
  br i1 %573, label %587, label %574

574:                                              ; preds = %571
  %575 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %572, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %576 = load atomic i32, i32* %575 monotonic, align 4
  %577 = and i32 %576, 2
  %578 = icmp eq i32 %577, 0
  %579 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %572, i64 0, i32 0
  %580 = load i32, i32* %579, align 4
  br i1 %578, label %581, label %583

581:                                              ; preds = %574
  %582 = add i32 %580, -1
  store i32 %582, i32* %579, align 4
  br label %583

583:                                              ; preds = %581, %574
  %584 = phi i32 [ %582, %581 ], [ %580, %574 ]
  %585 = icmp eq i32 %584, 0
  br i1 %585, label %586, label %587

586:                                              ; preds = %583
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %572) #14
  br label %587

587:                                              ; preds = %586, %583, %571
  %588 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %414, align 8
  %589 = icmp eq %"class.WTF::StringImpl"* %588, null
  br i1 %589, label %603, label %590

590:                                              ; preds = %587
  %591 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %588, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %592 = load atomic i32, i32* %591 monotonic, align 4
  %593 = and i32 %592, 2
  %594 = icmp eq i32 %593, 0
  %595 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %588, i64 0, i32 0
  %596 = load i32, i32* %595, align 4
  br i1 %594, label %597, label %599

597:                                              ; preds = %590
  %598 = add i32 %596, -1
  store i32 %598, i32* %595, align 4
  br label %599

599:                                              ; preds = %597, %590
  %600 = phi i32 [ %598, %597 ], [ %596, %590 ]
  %601 = icmp eq i32 %600, 0
  br i1 %601, label %602, label %603

602:                                              ; preds = %599
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %588) #14
  br label %603

603:                                              ; preds = %587, %599, %602
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %409) #14
  %604 = icmp eq i32 %541, 2
  br i1 %604, label %605, label %1134

605:                                              ; preds = %603
  %606 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 4
  %607 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %1, i64 0, i32 4
  %608 = load i8, i8* %75, align 1
  %609 = and i8 %608, 4
  %610 = icmp eq i8 %609, 0
  br i1 %610, label %615, label %611

611:                                              ; preds = %605
  %612 = bitcast %"union.blink::InvalidationSet::Backing.2"* %606 to %"class.WTF::HashSet"**
  %613 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %612, align 8
  %614 = icmp eq %"class.WTF::HashSet"* %613, null
  br i1 %614, label %624, label %620

615:                                              ; preds = %605
  %616 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.2", %"union.blink::InvalidationSet::Backing.2"* %606, i64 0, i32 0
  %617 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %616, align 8
  %618 = icmp ne %"class.WTF::StringImpl"* %617, null
  %619 = zext i1 %618 to i64
  br label %624

620:                                              ; preds = %611
  %621 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %613, i64 0, i32 0, i32 2
  %622 = load i32, i32* %621, align 4
  %623 = zext i32 %622 to i64
  br label %624

624:                                              ; preds = %620, %615, %611
  %625 = phi i64 [ %623, %620 ], [ %619, %615 ], [ 0, %611 ]
  %626 = load i8, i8* %94, align 1
  %627 = and i8 %626, 4
  %628 = icmp eq i8 %627, 0
  br i1 %628, label %633, label %629

629:                                              ; preds = %624
  %630 = bitcast %"union.blink::InvalidationSet::Backing.2"* %607 to %"class.WTF::HashSet"**
  %631 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %630, align 8
  %632 = icmp eq %"class.WTF::HashSet"* %631, null
  br i1 %632, label %642, label %638

633:                                              ; preds = %624
  %634 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.2", %"union.blink::InvalidationSet::Backing.2"* %607, i64 0, i32 0
  %635 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %634, align 8
  %636 = icmp ne %"class.WTF::StringImpl"* %635, null
  %637 = zext i1 %636 to i64
  br label %642

638:                                              ; preds = %629
  %639 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %631, i64 0, i32 0, i32 2
  %640 = load i32, i32* %639, align 4
  %641 = zext i32 %640 to i64
  br label %642

642:                                              ; preds = %638, %633, %629
  %643 = phi i64 [ %641, %638 ], [ %637, %633 ], [ 0, %629 ]
  %644 = icmp eq i64 %625, %643
  br i1 %644, label %645, label %1134

645:                                              ; preds = %642
  %646 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %646) #14
  call void @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5ItemsERKNS0_12BackingFlagsE(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* nonnull sret %7, %"union.blink::InvalidationSet::Backing.2"* %606, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %71) #14
  %647 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %647) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %647, i8 -86, i64 32, i1 false) #14
  %648 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %8, i64 0, i32 0
  %649 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %7, i64 0, i32 0, i32 0
  %650 = load i32, i32* %649, align 8, !noalias !15
  store i32 %650, i32* %648, align 8, !alias.scope !15
  %651 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %7, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %652 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %651, align 8, !noalias !15
  %653 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %8, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %652, %"class.WTF::StringImpl"** %653, align 8, !alias.scope !15
  %654 = icmp eq %"class.WTF::StringImpl"* %652, null
  br i1 %654, label %672, label %655

655:                                              ; preds = %645
  %656 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %652, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %657 = load atomic i32, i32* %656 monotonic, align 4, !noalias !15
  %658 = and i32 %657, 2
  %659 = icmp eq i32 %658, 0
  br i1 %659, label %660, label %672

660:                                              ; preds = %655
  %661 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %652, i64 0, i32 0
  %662 = load i32, i32* %661, align 4, !noalias !15
  %663 = zext i32 %662 to i33
  %664 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %663, i33 1) #14
  %665 = extractvalue { i33, i1 } %664, 1
  %666 = extractvalue { i33, i1 } %664, 0
  %667 = icmp slt i33 %666, 0
  %668 = or i1 %665, %667
  br i1 %668, label %669, label %670, !prof !5

669:                                              ; preds = %660
  call void @llvm.trap() #14, !noalias !15
  unreachable

670:                                              ; preds = %660
  %671 = trunc i33 %666 to i32
  store i32 %671, i32* %661, align 4, !noalias !15
  br label %672

672:                                              ; preds = %670, %655, %645
  %673 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %8, i64 0, i32 2
  %674 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %7, i64 0, i32 0, i32 2
  %675 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %673 to i8*
  %676 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %674 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %675, i8* align 8 %676, i64 16, i1 false) #14
  %677 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %7, i64 0, i32 1, i32 0
  %678 = load i32, i32* %677, align 8, !noalias !18
  %679 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %7, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %680 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %679, align 8, !noalias !18
  %681 = icmp eq %"class.WTF::StringImpl"* %680, null
  br i1 %681, label %699, label %682

682:                                              ; preds = %672
  %683 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %680, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %684 = load atomic i32, i32* %683 monotonic, align 4, !noalias !18
  %685 = and i32 %684, 2
  %686 = icmp eq i32 %685, 0
  br i1 %686, label %687, label %699

687:                                              ; preds = %682
  %688 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %680, i64 0, i32 0
  %689 = load i32, i32* %688, align 4, !noalias !18
  %690 = zext i32 %689 to i33
  %691 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %690, i33 1) #14
  %692 = extractvalue { i33, i1 } %691, 1
  %693 = extractvalue { i33, i1 } %691, 0
  %694 = icmp slt i33 %693, 0
  %695 = or i1 %692, %694
  br i1 %695, label %696, label %697, !prof !5

696:                                              ; preds = %687
  call void @llvm.trap() #14, !noalias !18
  unreachable

697:                                              ; preds = %687
  %698 = trunc i33 %693 to i32
  store i32 %698, i32* %688, align 4, !noalias !18
  br label %699

699:                                              ; preds = %697, %682, %672
  %700 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %7, i64 0, i32 1, i32 2, i32 0, i32 0
  %701 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %700, align 8
  %702 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %8, i64 0, i32 2, i32 0, i32 0
  %703 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %8, i64 0, i32 1
  %704 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %8, i64 0, i32 2, i32 0, i32 1
  %705 = bitcast %"class.WTF::AtomicString"* %703 to i64*
  %706 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %703, i64 0, i32 0, i32 0, i32 0
  %707 = icmp eq i32 %678, 0
  br label %708

708:                                              ; preds = %769, %699
  %709 = load i32, i32* %648, align 8
  %710 = icmp eq i32 %709, %678
  br i1 %710, label %713, label %711

711:                                              ; preds = %708
  %712 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %702, align 8
  br label %719

713:                                              ; preds = %708
  %714 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %653, align 8
  %715 = icmp eq %"class.WTF::StringImpl"* %714, %680
  %716 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %702, align 8
  %717 = icmp eq %"class.WTF::AtomicString"* %716, %701
  %718 = select i1 %707, i1 %715, i1 %717
  br i1 %718, label %777, label %719

719:                                              ; preds = %713, %711
  %720 = phi %"class.WTF::AtomicString"* [ %712, %711 ], [ %716, %713 ]
  %721 = icmp eq i32 %709, 0
  %722 = select i1 %721, %"class.WTF::AtomicString"* %703, %"class.WTF::AtomicString"* %720
  %723 = call zeroext i1 @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE8ContainsERKNS0_12BackingFlagsERKN3WTF12AtomicStringE(%"union.blink::InvalidationSet::Backing.2"* %607, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %73, %"class.WTF::AtomicString"* dereferenceable(8) %722) #14
  br i1 %723, label %724, label %777

724:                                              ; preds = %719
  %725 = load i32, i32* %648, align 8
  %726 = icmp eq i32 %725, 0
  br i1 %726, label %727, label %764

727:                                              ; preds = %724
  %728 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %175, align 8
  %729 = icmp eq %"class.WTF::StringImpl"* %728, null
  br i1 %729, label %747, label %730

730:                                              ; preds = %727
  %731 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %728, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %732 = load atomic i32, i32* %731 monotonic, align 4
  %733 = and i32 %732, 2
  %734 = icmp eq i32 %733, 0
  br i1 %734, label %735, label %747

735:                                              ; preds = %730
  %736 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %728, i64 0, i32 0
  %737 = load i32, i32* %736, align 4
  %738 = zext i32 %737 to i33
  %739 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %738, i33 1) #14
  %740 = extractvalue { i33, i1 } %739, 1
  %741 = extractvalue { i33, i1 } %739, 0
  %742 = icmp slt i33 %741, 0
  %743 = or i1 %740, %742
  br i1 %743, label %744, label %745, !prof !5

744:                                              ; preds = %735
  call void @llvm.trap() #14
  unreachable

745:                                              ; preds = %735
  %746 = trunc i33 %741 to i32
  store i32 %746, i32* %736, align 4
  br label %747

747:                                              ; preds = %745, %730, %727
  %748 = ptrtoint %"class.WTF::StringImpl"* %728 to i64
  %749 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %706, align 8
  store i64 %748, i64* %705, align 8
  %750 = icmp eq %"class.WTF::StringImpl"* %749, null
  br i1 %750, label %769, label %751

751:                                              ; preds = %747
  %752 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %749, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %753 = load atomic i32, i32* %752 monotonic, align 4
  %754 = and i32 %753, 2
  %755 = icmp eq i32 %754, 0
  %756 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %749, i64 0, i32 0
  %757 = load i32, i32* %756, align 4
  br i1 %755, label %758, label %760

758:                                              ; preds = %751
  %759 = add i32 %757, -1
  store i32 %759, i32* %756, align 4
  br label %760

760:                                              ; preds = %758, %751
  %761 = phi i32 [ %759, %758 ], [ %757, %751 ]
  %762 = icmp eq i32 %761, 0
  br i1 %762, label %763, label %769

763:                                              ; preds = %760
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %749) #14
  br label %769

764:                                              ; preds = %724
  %765 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %702, align 8
  %766 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %765, i64 1
  store %"class.WTF::AtomicString"* %766, %"class.WTF::AtomicString"** %702, align 8
  %767 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %704, align 8
  %768 = icmp eq %"class.WTF::AtomicString"* %766, %767
  br i1 %768, label %769, label %770

769:                                              ; preds = %770, %774, %764, %763, %760, %747
  br label %708

770:                                              ; preds = %764, %774
  %771 = phi %"class.WTF::AtomicString"* [ %775, %774 ], [ %766, %764 ]
  %772 = bitcast %"class.WTF::AtomicString"* %771 to i64*
  %773 = load i64, i64* %772, align 8
  switch i64 %773, label %769 [
    i64 -1, label %774
    i64 0, label %774
  ]

774:                                              ; preds = %770, %770
  %775 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %771, i64 1
  store %"class.WTF::AtomicString"* %775, %"class.WTF::AtomicString"** %702, align 8
  %776 = icmp eq %"class.WTF::AtomicString"* %775, %767
  br i1 %776, label %769, label %770

777:                                              ; preds = %719, %713
  %778 = phi i32 [ 1, %719 ], [ 2, %713 ]
  br i1 %681, label %792, label %779

779:                                              ; preds = %777
  %780 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %680, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %781 = load atomic i32, i32* %780 monotonic, align 4
  %782 = and i32 %781, 2
  %783 = icmp eq i32 %782, 0
  %784 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %680, i64 0, i32 0
  %785 = load i32, i32* %784, align 4
  br i1 %783, label %786, label %788

786:                                              ; preds = %779
  %787 = add i32 %785, -1
  store i32 %787, i32* %784, align 4
  br label %788

788:                                              ; preds = %786, %779
  %789 = phi i32 [ %787, %786 ], [ %785, %779 ]
  %790 = icmp eq i32 %789, 0
  br i1 %790, label %791, label %792

791:                                              ; preds = %788
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %680) #14
  br label %792

792:                                              ; preds = %791, %788, %777
  %793 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %653, align 8
  %794 = icmp eq %"class.WTF::StringImpl"* %793, null
  br i1 %794, label %808, label %795

795:                                              ; preds = %792
  %796 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %793, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %797 = load atomic i32, i32* %796 monotonic, align 4
  %798 = and i32 %797, 2
  %799 = icmp eq i32 %798, 0
  %800 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %793, i64 0, i32 0
  %801 = load i32, i32* %800, align 4
  br i1 %799, label %802, label %804

802:                                              ; preds = %795
  %803 = add i32 %801, -1
  store i32 %803, i32* %800, align 4
  br label %804

804:                                              ; preds = %802, %795
  %805 = phi i32 [ %803, %802 ], [ %801, %795 ]
  %806 = icmp eq i32 %805, 0
  br i1 %806, label %807, label %808

807:                                              ; preds = %804
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %793) #14
  br label %808

808:                                              ; preds = %807, %804, %792
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %647) #14
  %809 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %679, align 8
  %810 = icmp eq %"class.WTF::StringImpl"* %809, null
  br i1 %810, label %824, label %811

811:                                              ; preds = %808
  %812 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %809, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %813 = load atomic i32, i32* %812 monotonic, align 4
  %814 = and i32 %813, 2
  %815 = icmp eq i32 %814, 0
  %816 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %809, i64 0, i32 0
  %817 = load i32, i32* %816, align 4
  br i1 %815, label %818, label %820

818:                                              ; preds = %811
  %819 = add i32 %817, -1
  store i32 %819, i32* %816, align 4
  br label %820

820:                                              ; preds = %818, %811
  %821 = phi i32 [ %819, %818 ], [ %817, %811 ]
  %822 = icmp eq i32 %821, 0
  br i1 %822, label %823, label %824

823:                                              ; preds = %820
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %809) #14
  br label %824

824:                                              ; preds = %823, %820, %808
  %825 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %651, align 8
  %826 = icmp eq %"class.WTF::StringImpl"* %825, null
  br i1 %826, label %840, label %827

827:                                              ; preds = %824
  %828 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %825, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %829 = load atomic i32, i32* %828 monotonic, align 4
  %830 = and i32 %829, 2
  %831 = icmp eq i32 %830, 0
  %832 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %825, i64 0, i32 0
  %833 = load i32, i32* %832, align 4
  br i1 %831, label %834, label %836

834:                                              ; preds = %827
  %835 = add i32 %833, -1
  store i32 %835, i32* %832, align 4
  br label %836

836:                                              ; preds = %834, %827
  %837 = phi i32 [ %835, %834 ], [ %833, %827 ]
  %838 = icmp eq i32 %837, 0
  br i1 %838, label %839, label %840

839:                                              ; preds = %836
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %825) #14
  br label %840

840:                                              ; preds = %824, %836, %839
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %646) #14
  %841 = icmp eq i32 %778, 2
  br i1 %841, label %842, label %1134

842:                                              ; preds = %840
  %843 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 5
  %844 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %1, i64 0, i32 5
  %845 = load i8, i8* %75, align 1
  %846 = and i8 %845, 8
  %847 = icmp eq i8 %846, 0
  br i1 %847, label %852, label %848

848:                                              ; preds = %842
  %849 = bitcast %"union.blink::InvalidationSet::Backing.3"* %843 to %"class.WTF::HashSet"**
  %850 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %849, align 8
  %851 = icmp eq %"class.WTF::HashSet"* %850, null
  br i1 %851, label %861, label %857

852:                                              ; preds = %842
  %853 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.3", %"union.blink::InvalidationSet::Backing.3"* %843, i64 0, i32 0
  %854 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %853, align 8
  %855 = icmp ne %"class.WTF::StringImpl"* %854, null
  %856 = zext i1 %855 to i64
  br label %861

857:                                              ; preds = %848
  %858 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %850, i64 0, i32 0, i32 2
  %859 = load i32, i32* %858, align 4
  %860 = zext i32 %859 to i64
  br label %861

861:                                              ; preds = %857, %852, %848
  %862 = phi i64 [ %860, %857 ], [ %856, %852 ], [ 0, %848 ]
  %863 = load i8, i8* %94, align 1
  %864 = and i8 %863, 8
  %865 = icmp eq i8 %864, 0
  br i1 %865, label %870, label %866

866:                                              ; preds = %861
  %867 = bitcast %"union.blink::InvalidationSet::Backing.3"* %844 to %"class.WTF::HashSet"**
  %868 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %867, align 8
  %869 = icmp eq %"class.WTF::HashSet"* %868, null
  br i1 %869, label %879, label %875

870:                                              ; preds = %861
  %871 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.3", %"union.blink::InvalidationSet::Backing.3"* %844, i64 0, i32 0
  %872 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %871, align 8
  %873 = icmp ne %"class.WTF::StringImpl"* %872, null
  %874 = zext i1 %873 to i64
  br label %879

875:                                              ; preds = %866
  %876 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %868, i64 0, i32 0, i32 2
  %877 = load i32, i32* %876, align 4
  %878 = zext i32 %877 to i64
  br label %879

879:                                              ; preds = %875, %870, %866
  %880 = phi i64 [ %878, %875 ], [ %874, %870 ], [ 0, %866 ]
  %881 = icmp eq i64 %862, %880
  br i1 %881, label %882, label %1134

882:                                              ; preds = %879
  %883 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %883) #14
  call void @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5ItemsERKNS0_12BackingFlagsE(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* nonnull sret %9, %"union.blink::InvalidationSet::Backing.3"* %843, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %71) #14
  %884 = bitcast i64* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %884)
  %885 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %9, i64 0, i32 0, i32 0
  %886 = load i32, i32* %885, align 8, !noalias !21
  %887 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %9, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %888 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %887, align 8, !noalias !21
  %889 = ptrtoint %"class.WTF::StringImpl"* %888 to i64
  store i64 %889, i64* %10, align 8, !alias.scope !21
  %890 = icmp eq %"class.WTF::StringImpl"* %888, null
  br i1 %890, label %908, label %891

891:                                              ; preds = %882
  %892 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %888, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %893 = load atomic i32, i32* %892 monotonic, align 4, !noalias !21
  %894 = and i32 %893, 2
  %895 = icmp eq i32 %894, 0
  br i1 %895, label %896, label %908

896:                                              ; preds = %891
  %897 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %888, i64 0, i32 0
  %898 = load i32, i32* %897, align 4, !noalias !21
  %899 = zext i32 %898 to i33
  %900 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %899, i33 1) #14
  %901 = extractvalue { i33, i1 } %900, 1
  %902 = extractvalue { i33, i1 } %900, 0
  %903 = icmp slt i33 %902, 0
  %904 = or i1 %901, %903
  br i1 %904, label %905, label %906, !prof !5

905:                                              ; preds = %896
  call void @llvm.trap() #14, !noalias !21
  unreachable

906:                                              ; preds = %896
  %907 = trunc i33 %902 to i32
  store i32 %907, i32* %897, align 4, !noalias !21
  br label %908

908:                                              ; preds = %906, %891, %882
  %909 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  %910 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %909, align 8
  %911 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %9, i64 0, i32 0, i32 2, i32 0, i32 1
  %912 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %911, align 8
  %913 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %9, i64 0, i32 1, i32 0
  %914 = load i32, i32* %913, align 8, !noalias !24
  %915 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %9, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %916 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %915, align 8, !noalias !24
  %917 = icmp eq %"class.WTF::StringImpl"* %916, null
  br i1 %917, label %935, label %918

918:                                              ; preds = %908
  %919 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %916, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %920 = load atomic i32, i32* %919 monotonic, align 4, !noalias !24
  %921 = and i32 %920, 2
  %922 = icmp eq i32 %921, 0
  br i1 %922, label %923, label %935

923:                                              ; preds = %918
  %924 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %916, i64 0, i32 0
  %925 = load i32, i32* %924, align 4, !noalias !24
  %926 = zext i32 %925 to i33
  %927 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %926, i33 1) #14
  %928 = extractvalue { i33, i1 } %927, 1
  %929 = extractvalue { i33, i1 } %927, 0
  %930 = icmp slt i33 %929, 0
  %931 = or i1 %928, %930
  br i1 %931, label %932, label %933, !prof !5

932:                                              ; preds = %923
  call void @llvm.trap() #14, !noalias !24
  unreachable

933:                                              ; preds = %923
  %934 = trunc i33 %929 to i32
  store i32 %934, i32* %924, align 4, !noalias !24
  br label %935

935:                                              ; preds = %933, %918, %908
  %936 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %9, i64 0, i32 1, i32 2, i32 0, i32 0
  %937 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %936, align 8
  %938 = icmp eq i32 %886, %914
  %939 = icmp eq i32 %886, 0
  %940 = bitcast %"union.blink::InvalidationSet::Backing.3"* %844 to %"class.WTF::HashSet"**
  %941 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.3", %"union.blink::InvalidationSet::Backing.3"* %844, i64 0, i32 0
  %942 = bitcast i64* %10 to %"class.WTF::AtomicString"*
  br label %943

943:                                              ; preds = %1044, %935
  %944 = phi %"class.WTF::StringImpl"* [ %888, %935 ], [ %1022, %1044 ]
  %945 = phi %"class.WTF::AtomicString"* [ %910, %935 ], [ %948, %1044 ]
  %946 = icmp eq %"class.WTF::StringImpl"* %944, %916
  br label %947

947:                                              ; preds = %1061, %943
  %948 = phi %"class.WTF::AtomicString"* [ %945, %943 ], [ %1062, %1061 ]
  br i1 %938, label %949, label %952

949:                                              ; preds = %947
  %950 = icmp eq %"class.WTF::AtomicString"* %948, %937
  %951 = select i1 %939, i1 %946, i1 %950
  br i1 %951, label %1070, label %952

952:                                              ; preds = %949, %947
  %953 = select i1 %939, %"class.WTF::AtomicString"* %942, %"class.WTF::AtomicString"* %948
  %954 = load i8, i8* %94, align 1
  %955 = and i8 %954, 8
  %956 = icmp eq i8 %955, 0
  br i1 %956, label %1013, label %957

957:                                              ; preds = %952
  %958 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %940, align 8
  %959 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %958, i64 0, i32 0, i32 0
  %960 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %959, align 8
  %961 = icmp eq %"class.WTF::AtomicString"* %960, null
  br i1 %961, label %1070, label %962

962:                                              ; preds = %957
  %963 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %958, i64 0, i32 0, i32 1
  %964 = load i32, i32* %963, align 8
  %965 = add i32 %964, -1
  %966 = zext i32 %965 to i64
  %967 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %953, i64 0, i32 0, i32 0, i32 0
  %968 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %967, align 8
  %969 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %968, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %970 = load atomic i32, i32* %969 monotonic, align 4
  %971 = lshr i32 %970, 8
  %972 = and i32 %971, %965
  %973 = zext i32 %972 to i64
  %974 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %960, i64 %973
  %975 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %974, i64 0, i32 0, i32 0, i32 0
  %976 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %975, align 8
  %977 = icmp eq %"class.WTF::StringImpl"* %976, null
  br i1 %977, label %1070, label %978

978:                                              ; preds = %962
  %979 = xor i32 %971, -1
  %980 = lshr i32 %970, 31
  %981 = add nsw i32 %980, %979
  %982 = shl i32 %981, 12
  %983 = xor i32 %982, %981
  %984 = lshr i32 %983, 7
  %985 = xor i32 %984, %983
  %986 = shl i32 %985, 2
  %987 = xor i32 %986, %985
  %988 = lshr i32 %987, 20
  %989 = xor i32 %988, %987
  %990 = or i32 %989, 1
  %991 = zext i32 %990 to i64
  br label %992

992:                                              ; preds = %1002, %978
  %993 = phi %"class.WTF::StringImpl"* [ %976, %978 ], [ %1009, %1002 ]
  %994 = phi %"class.WTF::AtomicString"* [ %974, %978 ], [ %1007, %1002 ]
  %995 = phi i64 [ %973, %978 ], [ %1006, %1002 ]
  %996 = phi i64 [ 0, %978 ], [ %1004, %1002 ]
  %997 = bitcast %"class.WTF::AtomicString"* %994 to i8**
  %998 = load i8*, i8** %997, align 8
  %999 = icmp ne i8* %998, inttoptr (i64 -1 to i8*)
  %1000 = icmp eq %"class.WTF::StringImpl"* %993, %968
  %1001 = and i1 %1000, %999
  br i1 %1001, label %1011, label %1002

1002:                                             ; preds = %992
  %1003 = icmp eq i64 %996, 0
  %1004 = select i1 %1003, i64 %991, i64 %996
  %1005 = add i64 %1004, %995
  %1006 = and i64 %1005, %966
  %1007 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %960, i64 %1006
  %1008 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1007, i64 0, i32 0, i32 0, i32 0
  %1009 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1008, align 8
  %1010 = icmp eq %"class.WTF::StringImpl"* %1009, null
  br i1 %1010, label %1070, label %992

1011:                                             ; preds = %992
  %1012 = icmp eq %"class.WTF::AtomicString"* %994, null
  br i1 %1012, label %1070, label %1020

1013:                                             ; preds = %952
  %1014 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %941, align 8
  %1015 = icmp eq %"class.WTF::StringImpl"* %1014, null
  br i1 %1015, label %1070, label %1016

1016:                                             ; preds = %1013
  %1017 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %953, i64 0, i32 0, i32 0, i32 0
  %1018 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1017, align 8
  %1019 = call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %1018, %"class.WTF::StringImpl"* nonnull %1014) #14
  br i1 %1019, label %1020, label %1070

1020:                                             ; preds = %1016, %1011
  br i1 %939, label %1021, label %1058

1021:                                             ; preds = %1020
  %1022 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %175, align 8
  %1023 = icmp eq %"class.WTF::StringImpl"* %1022, null
  br i1 %1023, label %1041, label %1024

1024:                                             ; preds = %1021
  %1025 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1022, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1026 = load atomic i32, i32* %1025 monotonic, align 4
  %1027 = and i32 %1026, 2
  %1028 = icmp eq i32 %1027, 0
  br i1 %1028, label %1029, label %1041

1029:                                             ; preds = %1024
  %1030 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1022, i64 0, i32 0
  %1031 = load i32, i32* %1030, align 4
  %1032 = zext i32 %1031 to i33
  %1033 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1032, i33 1) #14
  %1034 = extractvalue { i33, i1 } %1033, 1
  %1035 = extractvalue { i33, i1 } %1033, 0
  %1036 = icmp slt i33 %1035, 0
  %1037 = or i1 %1034, %1036
  br i1 %1037, label %1038, label %1039, !prof !5

1038:                                             ; preds = %1029
  call void @llvm.trap() #14
  unreachable

1039:                                             ; preds = %1029
  %1040 = trunc i33 %1035 to i32
  store i32 %1040, i32* %1030, align 4
  br label %1041

1041:                                             ; preds = %1039, %1024, %1021
  %1042 = ptrtoint %"class.WTF::StringImpl"* %1022 to i64
  store i64 %1042, i64* %10, align 8
  %1043 = icmp eq %"class.WTF::StringImpl"* %944, null
  br i1 %1043, label %1044, label %1045

1044:                                             ; preds = %1041, %1057, %1054
  br label %943

1045:                                             ; preds = %1041
  %1046 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %944, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1047 = load atomic i32, i32* %1046 monotonic, align 4
  %1048 = and i32 %1047, 2
  %1049 = icmp eq i32 %1048, 0
  %1050 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %944, i64 0, i32 0
  %1051 = load i32, i32* %1050, align 4
  br i1 %1049, label %1052, label %1054

1052:                                             ; preds = %1045
  %1053 = add i32 %1051, -1
  store i32 %1053, i32* %1050, align 4
  br label %1054

1054:                                             ; preds = %1052, %1045
  %1055 = phi i32 [ %1053, %1052 ], [ %1051, %1045 ]
  %1056 = icmp eq i32 %1055, 0
  br i1 %1056, label %1057, label %1044

1057:                                             ; preds = %1054
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %944) #14
  br label %1044

1058:                                             ; preds = %1020
  %1059 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %948, i64 1
  %1060 = icmp eq %"class.WTF::AtomicString"* %1059, %912
  br i1 %1060, label %1061, label %1063

1061:                                             ; preds = %1063, %1067, %1058
  %1062 = phi %"class.WTF::AtomicString"* [ %912, %1058 ], [ %912, %1067 ], [ %1064, %1063 ]
  br label %947

1063:                                             ; preds = %1058, %1067
  %1064 = phi %"class.WTF::AtomicString"* [ %1068, %1067 ], [ %1059, %1058 ]
  %1065 = bitcast %"class.WTF::AtomicString"* %1064 to i64*
  %1066 = load i64, i64* %1065, align 8
  switch i64 %1066, label %1061 [
    i64 -1, label %1067
    i64 0, label %1067
  ]

1067:                                             ; preds = %1063, %1063
  %1068 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1064, i64 1
  %1069 = icmp eq %"class.WTF::AtomicString"* %1068, %912
  br i1 %1069, label %1061, label %1063

1070:                                             ; preds = %1016, %1013, %1011, %962, %957, %949, %1002
  %1071 = phi i32 [ 1, %1002 ], [ 2, %949 ], [ 1, %1016 ], [ 1, %1011 ], [ 1, %1013 ], [ 1, %957 ], [ 1, %962 ]
  br i1 %917, label %1085, label %1072

1072:                                             ; preds = %1070
  %1073 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %916, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1074 = load atomic i32, i32* %1073 monotonic, align 4
  %1075 = and i32 %1074, 2
  %1076 = icmp eq i32 %1075, 0
  %1077 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %916, i64 0, i32 0
  %1078 = load i32, i32* %1077, align 4
  br i1 %1076, label %1079, label %1081

1079:                                             ; preds = %1072
  %1080 = add i32 %1078, -1
  store i32 %1080, i32* %1077, align 4
  br label %1081

1081:                                             ; preds = %1079, %1072
  %1082 = phi i32 [ %1080, %1079 ], [ %1078, %1072 ]
  %1083 = icmp eq i32 %1082, 0
  br i1 %1083, label %1084, label %1085

1084:                                             ; preds = %1081
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %916) #14
  br label %1085

1085:                                             ; preds = %1084, %1081, %1070
  %1086 = icmp eq %"class.WTF::StringImpl"* %944, null
  br i1 %1086, label %1100, label %1087

1087:                                             ; preds = %1085
  %1088 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %944, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1089 = load atomic i32, i32* %1088 monotonic, align 4
  %1090 = and i32 %1089, 2
  %1091 = icmp eq i32 %1090, 0
  %1092 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %944, i64 0, i32 0
  %1093 = load i32, i32* %1092, align 4
  br i1 %1091, label %1094, label %1096

1094:                                             ; preds = %1087
  %1095 = add i32 %1093, -1
  store i32 %1095, i32* %1092, align 4
  br label %1096

1096:                                             ; preds = %1094, %1087
  %1097 = phi i32 [ %1095, %1094 ], [ %1093, %1087 ]
  %1098 = icmp eq i32 %1097, 0
  br i1 %1098, label %1099, label %1100

1099:                                             ; preds = %1096
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %944) #14
  br label %1100

1100:                                             ; preds = %1099, %1096, %1085
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %884)
  %1101 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %915, align 8
  %1102 = icmp eq %"class.WTF::StringImpl"* %1101, null
  br i1 %1102, label %1116, label %1103

1103:                                             ; preds = %1100
  %1104 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1101, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1105 = load atomic i32, i32* %1104 monotonic, align 4
  %1106 = and i32 %1105, 2
  %1107 = icmp eq i32 %1106, 0
  %1108 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1101, i64 0, i32 0
  %1109 = load i32, i32* %1108, align 4
  br i1 %1107, label %1110, label %1112

1110:                                             ; preds = %1103
  %1111 = add i32 %1109, -1
  store i32 %1111, i32* %1108, align 4
  br label %1112

1112:                                             ; preds = %1110, %1103
  %1113 = phi i32 [ %1111, %1110 ], [ %1109, %1103 ]
  %1114 = icmp eq i32 %1113, 0
  br i1 %1114, label %1115, label %1116

1115:                                             ; preds = %1112
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1101) #14
  br label %1116

1116:                                             ; preds = %1115, %1112, %1100
  %1117 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %887, align 8
  %1118 = icmp eq %"class.WTF::StringImpl"* %1117, null
  br i1 %1118, label %1132, label %1119

1119:                                             ; preds = %1116
  %1120 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1117, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1121 = load atomic i32, i32* %1120 monotonic, align 4
  %1122 = and i32 %1121, 2
  %1123 = icmp eq i32 %1122, 0
  %1124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1117, i64 0, i32 0
  %1125 = load i32, i32* %1124, align 4
  br i1 %1123, label %1126, label %1128

1126:                                             ; preds = %1119
  %1127 = add i32 %1125, -1
  store i32 %1127, i32* %1124, align 4
  br label %1128

1128:                                             ; preds = %1126, %1119
  %1129 = phi i32 [ %1127, %1126 ], [ %1125, %1119 ]
  %1130 = icmp eq i32 %1129, 0
  br i1 %1130, label %1131, label %1132

1131:                                             ; preds = %1128
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1117) #14
  br label %1132

1132:                                             ; preds = %1131, %1128, %1116
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %883) #14
  %1133 = icmp eq i32 %1071, 2
  br label %1134

1134:                                             ; preds = %60, %642, %405, %111, %52, %36, %1132, %879, %366, %603, %840, %64, %20, %56, %40, %2
  %1135 = phi i1 [ false, %2 ], [ false, %40 ], [ false, %56 ], [ false, %20 ], [ false, %60 ], [ false, %64 ], [ false, %840 ], [ false, %603 ], [ false, %366 ], [ %1133, %1132 ], [ false, %879 ], [ false, %36 ], [ false, %52 ], [ false, %111 ], [ false, %405 ], [ false, %642 ]
  ret i1 %1135
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15InvalidationSet16CacheTracingFlagEv() local_unnamed_addr #0 align 2 {
  %1 = tail call i8* @_ZN4base11trace_event8TraceLog23GetCategoryGroupEnabledEPKc(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0)) #14
  store i8* %1, i8** @_ZN5blinkL17g_tracing_enabledE, align 8
  ret void
}

declare i8* @_ZN4base11trace_event8TraceLog23GetCategoryGroupEnabledEPKc(i8*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink15InvalidationSetC2ENS_16InvalidationTypeE(%"class.blink::InvalidationSet"* nocapture, i32) unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %3, align 4
  %4 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 2, i32 0
  %5 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 6, i32 0
  %6 = bitcast %"class.WTF::StringImpl"** %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 32, i1 false)
  %7 = load i8, i8* %5, align 1
  %8 = and i8 %7, -64
  store i8 %8, i8* %5, align 1
  %9 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7, i32 0
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 8
  %11 = trunc i32 %1 to i8
  %12 = load i8, i8* %10, align 2
  %13 = and i8 %11, 3
  %14 = and i8 %12, -16
  %15 = or i8 %13, %14
  %16 = or i8 %15, 8
  store i8 %16, i8* %10, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink15InvalidationSet18InvalidatesElementERNS_7ElementE(%"class.blink::InvalidationSet"*, %"class.blink::Element"* dereferenceable(104)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.perfetto::TracedValue", align 8
  %4 = alloca %"class.WTF::String", align 8
  %5 = alloca %"class.perfetto::TracedValue", align 8
  %6 = alloca %"class.base::trace_event::TraceArguments", align 8
  %7 = alloca %"class.base::TimeTicks", align 8
  %8 = alloca %"class.perfetto::TracedValue", align 8
  %9 = alloca %"class.WTF::String", align 8
  %10 = alloca %"class.perfetto::TracedValue", align 8
  %11 = alloca %"class.base::trace_event::TraceArguments", align 8
  %12 = alloca %"class.base::TimeTicks", align 8
  %13 = alloca %"class.perfetto::TracedValue", align 8
  %14 = alloca %"class.perfetto::TracedValue", align 8
  %15 = alloca %"class.base::trace_event::TraceArguments", align 8
  %16 = alloca %"class.base::TimeTicks", align 8
  %17 = alloca %"class.perfetto::TracedValue", align 8
  %18 = alloca %"class.WTF::AtomicString", align 8
  %19 = alloca %"class.perfetto::TracedValue", align 8
  %20 = alloca %"class.base::trace_event::TraceArguments", align 8
  %21 = alloca %"class.base::TimeTicks", align 8
  %22 = alloca %"class.perfetto::TracedValue", align 8
  %23 = alloca %"class.WTF::String", align 8
  %24 = alloca %"class.perfetto::TracedValue", align 8
  %25 = alloca %"class.base::trace_event::TraceArguments", align 8
  %26 = alloca %"class.base::TimeTicks", align 8
  %27 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 6, i32 0
  %28 = load i8, i8* %27, align 1
  %29 = and i8 %28, 2
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %31, label %686

31:                                               ; preds = %2
  %32 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7, i32 0
  %33 = load i8, i8* %32, align 1
  %34 = and i8 %33, 4
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %36, label %40

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 4, i32 0
  %38 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %37, align 8
  %39 = icmp eq %"class.WTF::StringImpl"* %38, null
  br i1 %39, label %219, label %40

40:                                               ; preds = %36, %31
  %41 = tail call %"class.WTF::StringImpl"* @_ZNK5blink7Element28LocalNameForSelectorMatchingEv(%"class.blink::Element"* %1) #14
  %42 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 4
  %43 = load i8, i8* %32, align 1
  %44 = and i8 %43, 4
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %102, label %46

46:                                               ; preds = %40
  %47 = bitcast %"union.blink::InvalidationSet::Backing.2"* %42 to %"class.WTF::HashSet"**
  %48 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %47, align 8
  %49 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %48, i64 0, i32 0, i32 0
  %50 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %49, align 8
  %51 = icmp eq %"class.WTF::AtomicString"* %50, null
  br i1 %51, label %99, label %52

52:                                               ; preds = %46
  %53 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %48, i64 0, i32 0, i32 1
  %54 = load i32, i32* %53, align 8
  %55 = add i32 %54, -1
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load atomic i32, i32* %57 monotonic, align 4
  %59 = lshr i32 %58, 8
  %60 = and i32 %59, %55
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %50, i64 %61
  %63 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %63, align 8
  %65 = icmp eq %"class.WTF::StringImpl"* %64, null
  br i1 %65, label %99, label %66

66:                                               ; preds = %52
  %67 = xor i32 %59, -1
  %68 = lshr i32 %58, 31
  %69 = add nsw i32 %68, %67
  %70 = shl i32 %69, 12
  %71 = xor i32 %70, %69
  %72 = lshr i32 %71, 7
  %73 = xor i32 %72, %71
  %74 = shl i32 %73, 2
  %75 = xor i32 %74, %73
  %76 = lshr i32 %75, 20
  %77 = xor i32 %76, %75
  %78 = or i32 %77, 1
  %79 = zext i32 %78 to i64
  br label %80

80:                                               ; preds = %90, %66
  %81 = phi %"class.WTF::StringImpl"* [ %64, %66 ], [ %97, %90 ]
  %82 = phi %"class.WTF::AtomicString"* [ %62, %66 ], [ %95, %90 ]
  %83 = phi i64 [ %61, %66 ], [ %94, %90 ]
  %84 = phi i64 [ 0, %66 ], [ %92, %90 ]
  %85 = bitcast %"class.WTF::AtomicString"* %82 to i8**
  %86 = load i8*, i8** %85, align 8
  %87 = icmp ne i8* %86, inttoptr (i64 -1 to i8*)
  %88 = icmp eq %"class.WTF::StringImpl"* %81, %41
  %89 = and i1 %88, %87
  br i1 %89, label %99, label %90

90:                                               ; preds = %80
  %91 = icmp eq i64 %84, 0
  %92 = select i1 %91, i64 %79, i64 %84
  %93 = add i64 %92, %83
  %94 = and i64 %93, %56
  %95 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %50, i64 %94
  %96 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %95, i64 0, i32 0, i32 0, i32 0
  %97 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %96, align 8
  %98 = icmp eq %"class.WTF::StringImpl"* %97, null
  br i1 %98, label %99, label %80

99:                                               ; preds = %90, %80, %52, %46
  %100 = phi %"class.WTF::AtomicString"* [ null, %46 ], [ null, %52 ], [ %82, %80 ], [ null, %90 ]
  %101 = icmp ne %"class.WTF::AtomicString"* %100, null
  br label %108

102:                                              ; preds = %40
  %103 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.2", %"union.blink::InvalidationSet::Backing.2"* %42, i64 0, i32 0
  %104 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %103, align 8
  %105 = icmp eq %"class.WTF::StringImpl"* %104, null
  br i1 %105, label %108, label %106

106:                                              ; preds = %102
  %107 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %41, %"class.WTF::StringImpl"* nonnull %104) #14
  br label %108

108:                                              ; preds = %99, %102, %106
  %109 = phi i1 [ false, %102 ], [ %107, %106 ], [ %101, %99 ]
  %110 = icmp eq %"class.WTF::StringImpl"* %41, null
  br i1 %110, label %124, label %111

111:                                              ; preds = %108
  %112 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %113 = load atomic i32, i32* %112 monotonic, align 4
  %114 = and i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %41, i64 0, i32 0
  %117 = load i32, i32* %116, align 4
  br i1 %115, label %118, label %120

118:                                              ; preds = %111
  %119 = add i32 %117, -1
  store i32 %119, i32* %116, align 4
  br label %120

120:                                              ; preds = %118, %111
  %121 = phi i32 [ %119, %118 ], [ %117, %111 ]
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %124

123:                                              ; preds = %120
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %41) #14
  br i1 %109, label %125, label %219

124:                                              ; preds = %120, %108
  br i1 %109, label %125, label %219

125:                                              ; preds = %123, %124
  %126 = load i8*, i8** @_ZN5blinkL17g_tracing_enabledE, align 8
  %127 = load i8, i8* %126, align 1
  %128 = icmp eq i8 %127, 0
  br i1 %128, label %686, label %129, !prof !27

129:                                              ; preds = %125
  %130 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 171, i32 0), align 16
  %131 = and i8 %130, 25
  %132 = icmp eq i8 %131, 0
  br i1 %132, label %686, label %133, !prof !27

133:                                              ; preds = %129
  %134 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #14
  %135 = bitcast %"class.base::TimeTicks"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %135) #14
  %136 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %21, i64 0, i32 0, i32 0
  %137 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #14
  store i64 %137, i64* %136, align 8
  %138 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %20, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %138) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %138, i8 -86, i64 40, i1 false) #14
  store i8 1, i8* %138, align 8
  %139 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %20, i64 0, i32 1, i64 0
  store i8 9, i8* %139, align 1
  %140 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %20, i64 0, i32 2, i64 0
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i8** %140, align 8
  %141 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %20, i64 0, i32 3, i64 0
  %142 = bitcast %"class.perfetto::TracedValue"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %142) #14
  %143 = tail call i8* @_Znwm(i64 192) #15
  %144 = bitcast i8* %143 to %"class.protozero::ScatteredHeapBuffer"*
  tail call void @_ZN9protozero19ScatteredHeapBufferC1Emm(%"class.protozero::ScatteredHeapBuffer"* nonnull %144, i64 4096, i64 4096) #14
  %145 = getelementptr inbounds i8, i8* %143, i64 80
  %146 = bitcast i8* %145 to %"class.protozero::ScatteredStreamWriter"*
  %147 = bitcast i8* %143 to %"class.protozero::ScatteredStreamWriter::Delegate"*
  tail call void @_ZN9protozero21ScatteredStreamWriterC1EPNS0_8DelegateE(%"class.protozero::ScatteredStreamWriter"* %146, %"class.protozero::ScatteredStreamWriter::Delegate"* nonnull %147) #14
  %148 = getelementptr inbounds i8, i8* %143, i64 120
  %149 = getelementptr inbounds i8, i8* %143, i64 168
  %150 = bitcast i8* %149 to %"class.protozero::MessageArena"*
  tail call void @_ZN9protozero12MessageArenaC1Ev(%"class.protozero::MessageArena"* %150) #14
  %151 = bitcast i8* %148 to %"class.protozero::Message"*
  tail call void @_ZN9protozero7Message5ResetEPNS_21ScatteredStreamWriterEPNS_12MessageArenaE(%"class.protozero::Message"* %151, %"class.protozero::ScatteredStreamWriter"* null, %"class.protozero::MessageArena"* %150) #14
  %152 = getelementptr inbounds i8, i8* %143, i64 24
  %153 = bitcast i8* %152 to i8**
  store i8* %145, i8** %153, align 8
  %154 = bitcast i8* %149 to %"class.std::__1::list"*
  tail call void @_ZNSt3__14listIN9protozero12MessageArena5BlockENS_9allocatorIS3_EEE6resizeEm(%"class.std::__1::list"* %154, i64 1) #14
  %155 = bitcast i8* %149 to %"struct.std::__1::__list_node"**
  %156 = load %"struct.std::__1::__list_node"*, %"struct.std::__1::__list_node"** %155, align 8
  %157 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %156, i64 0, i32 1, i32 1
  store i32 0, i32* %157, align 8
  tail call void @_ZN9protozero7Message5ResetEPNS_21ScatteredStreamWriterEPNS_12MessageArenaE(%"class.protozero::Message"* %151, %"class.protozero::ScatteredStreamWriter"* %146, %"class.protozero::MessageArena"* %150) #14
  %158 = bitcast %"union.base::trace_event::TraceValue"* %141 to i8**
  store i8* %143, i8** %158, align 8
  %159 = bitcast i8* %148 to %"class.perfetto::protos::pbzero::DebugAnnotation"*
  call void @_ZN8perfetto8internal26CreateTracedValueFromProtoEPNS_6protos6pbzero15DebugAnnotationE(%"class.perfetto::TracedValue"* nonnull sret %19, %"class.perfetto::protos::pbzero::DebugAnnotation"* %159) #14
  %160 = bitcast %"class.perfetto::TracedValue"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %160) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %160, i8* nonnull align 8 %142, i64 16, i1 false) #14
  %161 = bitcast %"class.WTF::AtomicString"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %161) #14
  %162 = call %"class.WTF::StringImpl"* @_ZNK5blink7Element28LocalNameForSelectorMatchingEv(%"class.blink::Element"* %1) #14
  %163 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %18, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %162, %"class.WTF::StringImpl"** %163, align 8
  %164 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %18, i64 0, i32 0
  call void @_ZN5blink44inspector_style_invalidator_invalidate_event12SelectorPartEN8perfetto11TracedValueERNS_7ElementEPKcRKNS_15InvalidationSetERKN3WTF6StringE(%"class.perfetto::TracedValue"* nonnull %17, %"class.blink::Element"* dereferenceable(104) %1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink44inspector_style_invalidator_invalidate_event30kInvalidationSetMatchedTagNameE, i64 0, i64 0), %"class.blink::InvalidationSet"* dereferenceable(48) %0, %"class.WTF::String"* nonnull dereferenceable(8) %164) #14
  %165 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %163, align 8
  %166 = icmp eq %"class.WTF::StringImpl"* %165, null
  br i1 %166, label %180, label %167

167:                                              ; preds = %133
  %168 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %165, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %169 = load atomic i32, i32* %168 monotonic, align 4
  %170 = and i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %165, i64 0, i32 0
  %173 = load i32, i32* %172, align 4
  br i1 %171, label %174, label %176

174:                                              ; preds = %167
  %175 = add i32 %173, -1
  store i32 %175, i32* %172, align 4
  br label %176

176:                                              ; preds = %174, %167
  %177 = phi i32 [ %175, %174 ], [ %173, %167 ]
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %179, label %180

179:                                              ; preds = %176
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %165) #14
  br label %180

180:                                              ; preds = %179, %176, %133
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %161) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %160) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %142) #14
  %181 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 73, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 171, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i8* null, i64 0, i64 0, i32 %134, %"class.base::TimeTicks"* nonnull dereferenceable(8) %21, %"class.base::trace_event::TraceArguments"* nonnull %20, i32 8) #14
  %182 = load i8, i8* %138, align 8
  %183 = icmp eq i8 %182, 0
  br i1 %183, label %218, label %184

184:                                              ; preds = %180, %213
  %185 = phi i64 [ %214, %213 ], [ 0, %180 ]
  %186 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %20, i64 0, i32 1, i64 %185
  %187 = load i8, i8* %186, align 1
  %188 = icmp eq i8 %187, 8
  br i1 %188, label %189, label %200

189:                                              ; preds = %184
  %190 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %20, i64 0, i32 3, i64 %185
  %191 = bitcast %"union.base::trace_event::TraceValue"* %190 to %"class.base::trace_event::ConvertableToTraceFormat"**
  %192 = load %"class.base::trace_event::ConvertableToTraceFormat"*, %"class.base::trace_event::ConvertableToTraceFormat"** %191, align 8
  %193 = icmp eq %"class.base::trace_event::ConvertableToTraceFormat"* %192, null
  br i1 %193, label %213, label %194

194:                                              ; preds = %189
  %195 = bitcast %"class.base::trace_event::ConvertableToTraceFormat"* %192 to void (%"class.base::trace_event::ConvertableToTraceFormat"*)***
  %196 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)**, void (%"class.base::trace_event::ConvertableToTraceFormat"*)*** %195, align 8
  %197 = getelementptr inbounds void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %196, i64 1
  %198 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %197, align 8
  call void %198(%"class.base::trace_event::ConvertableToTraceFormat"* nonnull %192) #14
  %199 = load i8, i8* %186, align 1
  br label %200

200:                                              ; preds = %194, %184
  %201 = phi i8 [ %187, %184 ], [ %199, %194 ]
  %202 = icmp eq i8 %201, 9
  br i1 %202, label %203, label %213

203:                                              ; preds = %200
  %204 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %20, i64 0, i32 3, i64 %185
  %205 = bitcast %"union.base::trace_event::TraceValue"* %204 to %"class.protozero::HeapBuffered"**
  %206 = load %"class.protozero::HeapBuffered"*, %"class.protozero::HeapBuffered"** %205, align 8
  %207 = icmp eq %"class.protozero::HeapBuffered"* %206, null
  br i1 %207, label %213, label %208

208:                                              ; preds = %203
  %209 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %206, i64 0, i32 2, i32 1
  call void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"* %209) #14
  %210 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %206, i64 0, i32 1
  call void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"* %210) #14
  %211 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %206, i64 0, i32 0
  call void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"* %211) #14
  %212 = bitcast %"class.protozero::HeapBuffered"* %206 to i8*
  call void @_ZdlPv(i8* %212) #15
  br label %213

213:                                              ; preds = %208, %203, %200, %189
  %214 = add nuw nsw i64 %185, 1
  %215 = load i8, i8* %138, align 8
  %216 = zext i8 %215 to i64
  %217 = icmp ult i64 %214, %216
  br i1 %217, label %184, label %218

218:                                              ; preds = %213, %180
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %138) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %135) #14
  br label %686

219:                                              ; preds = %36, %123, %124
  %220 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %1, i64 0, i32 3, i32 0, i32 0
  %221 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %220, align 8
  %222 = icmp eq %"class.blink::ElementData"* %221, null
  br i1 %222, label %588, label %223

223:                                              ; preds = %219
  %224 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %221, i64 0, i32 3, i32 0, i32 0, i32 0
  %225 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %224, align 8
  %226 = icmp eq %"class.WTF::StringImpl"* %225, null
  br i1 %226, label %319, label %227

227:                                              ; preds = %223
  %228 = load i8, i8* %32, align 1
  %229 = and i8 %228, 2
  %230 = icmp eq i8 %229, 0
  br i1 %230, label %231, label %235

231:                                              ; preds = %227
  %232 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 3, i32 0
  %233 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %232, align 8
  %234 = icmp eq %"class.WTF::StringImpl"* %233, null
  br i1 %234, label %319, label %235

235:                                              ; preds = %231, %227
  %236 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %221, i64 0, i32 3
  %237 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 3
  %238 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7
  %239 = tail call zeroext i1 @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE8ContainsERKNS0_12BackingFlagsERKN3WTF12AtomicStringE(%"union.blink::InvalidationSet::Backing.1"* %237, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %238, %"class.WTF::AtomicString"* dereferenceable(8) %236) #14
  br i1 %239, label %240, label %316

240:                                              ; preds = %235
  %241 = load i8*, i8** @_ZN5blinkL17g_tracing_enabledE, align 8
  %242 = load i8, i8* %241, align 1
  %243 = icmp eq i8 %242, 0
  br i1 %243, label %686, label %244, !prof !27

244:                                              ; preds = %240
  %245 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 171, i32 0), align 16
  %246 = and i8 %245, 25
  %247 = icmp eq i8 %246, 0
  br i1 %247, label %686, label %248, !prof !27

248:                                              ; preds = %244
  %249 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #14
  %250 = bitcast %"class.base::TimeTicks"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %250) #14
  %251 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %16, i64 0, i32 0, i32 0
  %252 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #14
  store i64 %252, i64* %251, align 8
  %253 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %15, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %253) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %253, i8 -86, i64 40, i1 false) #14
  store i8 1, i8* %253, align 8
  %254 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %15, i64 0, i32 1, i64 0
  store i8 9, i8* %254, align 1
  %255 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %15, i64 0, i32 2, i64 0
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i8** %255, align 8
  %256 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %15, i64 0, i32 3, i64 0
  %257 = bitcast %"class.perfetto::TracedValue"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %257) #14
  %258 = tail call i8* @_Znwm(i64 192) #15
  %259 = bitcast i8* %258 to %"class.protozero::ScatteredHeapBuffer"*
  tail call void @_ZN9protozero19ScatteredHeapBufferC1Emm(%"class.protozero::ScatteredHeapBuffer"* nonnull %259, i64 4096, i64 4096) #14
  %260 = getelementptr inbounds i8, i8* %258, i64 80
  %261 = bitcast i8* %260 to %"class.protozero::ScatteredStreamWriter"*
  %262 = bitcast i8* %258 to %"class.protozero::ScatteredStreamWriter::Delegate"*
  tail call void @_ZN9protozero21ScatteredStreamWriterC1EPNS0_8DelegateE(%"class.protozero::ScatteredStreamWriter"* %261, %"class.protozero::ScatteredStreamWriter::Delegate"* nonnull %262) #14
  %263 = getelementptr inbounds i8, i8* %258, i64 120
  %264 = getelementptr inbounds i8, i8* %258, i64 168
  %265 = bitcast i8* %264 to %"class.protozero::MessageArena"*
  tail call void @_ZN9protozero12MessageArenaC1Ev(%"class.protozero::MessageArena"* %265) #14
  %266 = bitcast i8* %263 to %"class.protozero::Message"*
  tail call void @_ZN9protozero7Message5ResetEPNS_21ScatteredStreamWriterEPNS_12MessageArenaE(%"class.protozero::Message"* %266, %"class.protozero::ScatteredStreamWriter"* null, %"class.protozero::MessageArena"* %265) #14
  %267 = getelementptr inbounds i8, i8* %258, i64 24
  %268 = bitcast i8* %267 to i8**
  store i8* %260, i8** %268, align 8
  %269 = bitcast i8* %264 to %"class.std::__1::list"*
  tail call void @_ZNSt3__14listIN9protozero12MessageArena5BlockENS_9allocatorIS3_EEE6resizeEm(%"class.std::__1::list"* %269, i64 1) #14
  %270 = bitcast i8* %264 to %"struct.std::__1::__list_node"**
  %271 = load %"struct.std::__1::__list_node"*, %"struct.std::__1::__list_node"** %270, align 8
  %272 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %271, i64 0, i32 1, i32 1
  store i32 0, i32* %272, align 8
  tail call void @_ZN9protozero7Message5ResetEPNS_21ScatteredStreamWriterEPNS_12MessageArenaE(%"class.protozero::Message"* %266, %"class.protozero::ScatteredStreamWriter"* %261, %"class.protozero::MessageArena"* %265) #14
  %273 = bitcast %"union.base::trace_event::TraceValue"* %256 to i8**
  store i8* %258, i8** %273, align 8
  %274 = bitcast i8* %263 to %"class.perfetto::protos::pbzero::DebugAnnotation"*
  call void @_ZN8perfetto8internal26CreateTracedValueFromProtoEPNS_6protos6pbzero15DebugAnnotationE(%"class.perfetto::TracedValue"* nonnull sret %14, %"class.perfetto::protos::pbzero::DebugAnnotation"* %274) #14
  %275 = bitcast %"class.perfetto::TracedValue"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %275) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %275, i8* nonnull align 8 %257, i64 16, i1 false) #14
  %276 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %220, align 8
  %277 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %276, i64 0, i32 3, i32 0
  call void @_ZN5blink44inspector_style_invalidator_invalidate_event12SelectorPartEN8perfetto11TracedValueERNS_7ElementEPKcRKNS_15InvalidationSetERKN3WTF6StringE(%"class.perfetto::TracedValue"* nonnull %13, %"class.blink::Element"* dereferenceable(104) %1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink44inspector_style_invalidator_invalidate_event25kInvalidationSetMatchedIdE, i64 0, i64 0), %"class.blink::InvalidationSet"* dereferenceable(48) %0, %"class.WTF::String"* dereferenceable(8) %277) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %275) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %257) #14
  %278 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 73, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 171, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i8* null, i64 0, i64 0, i32 %249, %"class.base::TimeTicks"* nonnull dereferenceable(8) %16, %"class.base::trace_event::TraceArguments"* nonnull %15, i32 8) #14
  %279 = load i8, i8* %253, align 8
  %280 = icmp eq i8 %279, 0
  br i1 %280, label %315, label %281

281:                                              ; preds = %248, %310
  %282 = phi i64 [ %311, %310 ], [ 0, %248 ]
  %283 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %15, i64 0, i32 1, i64 %282
  %284 = load i8, i8* %283, align 1
  %285 = icmp eq i8 %284, 8
  br i1 %285, label %286, label %297

286:                                              ; preds = %281
  %287 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %15, i64 0, i32 3, i64 %282
  %288 = bitcast %"union.base::trace_event::TraceValue"* %287 to %"class.base::trace_event::ConvertableToTraceFormat"**
  %289 = load %"class.base::trace_event::ConvertableToTraceFormat"*, %"class.base::trace_event::ConvertableToTraceFormat"** %288, align 8
  %290 = icmp eq %"class.base::trace_event::ConvertableToTraceFormat"* %289, null
  br i1 %290, label %310, label %291

291:                                              ; preds = %286
  %292 = bitcast %"class.base::trace_event::ConvertableToTraceFormat"* %289 to void (%"class.base::trace_event::ConvertableToTraceFormat"*)***
  %293 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)**, void (%"class.base::trace_event::ConvertableToTraceFormat"*)*** %292, align 8
  %294 = getelementptr inbounds void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %293, i64 1
  %295 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %294, align 8
  call void %295(%"class.base::trace_event::ConvertableToTraceFormat"* nonnull %289) #14
  %296 = load i8, i8* %283, align 1
  br label %297

297:                                              ; preds = %291, %281
  %298 = phi i8 [ %284, %281 ], [ %296, %291 ]
  %299 = icmp eq i8 %298, 9
  br i1 %299, label %300, label %310

300:                                              ; preds = %297
  %301 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %15, i64 0, i32 3, i64 %282
  %302 = bitcast %"union.base::trace_event::TraceValue"* %301 to %"class.protozero::HeapBuffered"**
  %303 = load %"class.protozero::HeapBuffered"*, %"class.protozero::HeapBuffered"** %302, align 8
  %304 = icmp eq %"class.protozero::HeapBuffered"* %303, null
  br i1 %304, label %310, label %305

305:                                              ; preds = %300
  %306 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %303, i64 0, i32 2, i32 1
  call void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"* %306) #14
  %307 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %303, i64 0, i32 1
  call void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"* %307) #14
  %308 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %303, i64 0, i32 0
  call void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"* %308) #14
  %309 = bitcast %"class.protozero::HeapBuffered"* %303 to i8*
  call void @_ZdlPv(i8* %309) #15
  br label %310

310:                                              ; preds = %305, %300, %297, %286
  %311 = add nuw nsw i64 %282, 1
  %312 = load i8, i8* %253, align 8
  %313 = zext i8 %312 to i64
  %314 = icmp ult i64 %311, %313
  br i1 %314, label %281, label %315

315:                                              ; preds = %310, %248
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %253) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %250) #14
  br label %686

316:                                              ; preds = %235
  %317 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %220, align 8
  %318 = icmp eq %"class.blink::ElementData"* %317, null
  br i1 %318, label %588, label %319

319:                                              ; preds = %223, %231, %316
  %320 = phi %"class.blink::ElementData"* [ %317, %316 ], [ %221, %231 ], [ %221, %223 ]
  %321 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %320, i64 0, i32 2, i32 0, i32 0
  %322 = load %"class.blink::SpaceSplitString::Data"*, %"class.blink::SpaceSplitString::Data"** %321, align 8
  %323 = icmp eq %"class.blink::SpaceSplitString::Data"* %322, null
  br i1 %323, label %447, label %324

324:                                              ; preds = %319
  %325 = load i8, i8* %32, align 1
  %326 = and i8 %325, 1
  %327 = icmp eq i8 %326, 0
  br i1 %327, label %328, label %332

328:                                              ; preds = %324
  %329 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 2, i32 0
  %330 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %329, align 8
  %331 = icmp eq %"class.WTF::StringImpl"* %330, null
  br i1 %331, label %447, label %332

332:                                              ; preds = %328, %324
  %333 = tail call %"class.WTF::StringImpl"* @_ZNK5blink15InvalidationSet12FindAnyClassERNS_7ElementE(%"class.blink::InvalidationSet"* %0, %"class.blink::Element"* dereferenceable(104) %1)
  %334 = icmp eq %"class.WTF::StringImpl"* %333, null
  br i1 %334, label %444, label %335

335:                                              ; preds = %332
  %336 = load i8*, i8** @_ZN5blinkL17g_tracing_enabledE, align 8
  %337 = load i8, i8* %336, align 1
  %338 = icmp eq i8 %337, 0
  br i1 %338, label %686, label %339, !prof !27

339:                                              ; preds = %335
  %340 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 171, i32 0), align 16
  %341 = and i8 %340, 25
  %342 = icmp eq i8 %341, 0
  br i1 %342, label %686, label %343, !prof !27

343:                                              ; preds = %339
  %344 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #14
  %345 = bitcast %"class.base::TimeTicks"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %345) #14
  %346 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %12, i64 0, i32 0, i32 0
  %347 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #14
  store i64 %347, i64* %346, align 8
  %348 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %11, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %348) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %348, i8 -86, i64 40, i1 false) #14
  store i8 1, i8* %348, align 8
  %349 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %11, i64 0, i32 1, i64 0
  store i8 9, i8* %349, align 1
  %350 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %11, i64 0, i32 2, i64 0
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i8** %350, align 8
  %351 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %11, i64 0, i32 3, i64 0
  %352 = bitcast %"class.perfetto::TracedValue"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %352) #14
  %353 = tail call i8* @_Znwm(i64 192) #15
  %354 = bitcast i8* %353 to %"class.protozero::ScatteredHeapBuffer"*
  tail call void @_ZN9protozero19ScatteredHeapBufferC1Emm(%"class.protozero::ScatteredHeapBuffer"* nonnull %354, i64 4096, i64 4096) #14
  %355 = getelementptr inbounds i8, i8* %353, i64 80
  %356 = bitcast i8* %355 to %"class.protozero::ScatteredStreamWriter"*
  %357 = bitcast i8* %353 to %"class.protozero::ScatteredStreamWriter::Delegate"*
  tail call void @_ZN9protozero21ScatteredStreamWriterC1EPNS0_8DelegateE(%"class.protozero::ScatteredStreamWriter"* %356, %"class.protozero::ScatteredStreamWriter::Delegate"* nonnull %357) #14
  %358 = getelementptr inbounds i8, i8* %353, i64 120
  %359 = getelementptr inbounds i8, i8* %353, i64 168
  %360 = bitcast i8* %359 to %"class.protozero::MessageArena"*
  tail call void @_ZN9protozero12MessageArenaC1Ev(%"class.protozero::MessageArena"* %360) #14
  %361 = bitcast i8* %358 to %"class.protozero::Message"*
  tail call void @_ZN9protozero7Message5ResetEPNS_21ScatteredStreamWriterEPNS_12MessageArenaE(%"class.protozero::Message"* %361, %"class.protozero::ScatteredStreamWriter"* null, %"class.protozero::MessageArena"* %360) #14
  %362 = getelementptr inbounds i8, i8* %353, i64 24
  %363 = bitcast i8* %362 to i8**
  store i8* %355, i8** %363, align 8
  %364 = bitcast i8* %359 to %"class.std::__1::list"*
  tail call void @_ZNSt3__14listIN9protozero12MessageArena5BlockENS_9allocatorIS3_EEE6resizeEm(%"class.std::__1::list"* %364, i64 1) #14
  %365 = bitcast i8* %359 to %"struct.std::__1::__list_node"**
  %366 = load %"struct.std::__1::__list_node"*, %"struct.std::__1::__list_node"** %365, align 8
  %367 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %366, i64 0, i32 1, i32 1
  store i32 0, i32* %367, align 8
  tail call void @_ZN9protozero7Message5ResetEPNS_21ScatteredStreamWriterEPNS_12MessageArenaE(%"class.protozero::Message"* %361, %"class.protozero::ScatteredStreamWriter"* %356, %"class.protozero::MessageArena"* %360) #14
  %368 = bitcast %"union.base::trace_event::TraceValue"* %351 to i8**
  store i8* %353, i8** %368, align 8
  %369 = bitcast i8* %358 to %"class.perfetto::protos::pbzero::DebugAnnotation"*
  call void @_ZN8perfetto8internal26CreateTracedValueFromProtoEPNS_6protos6pbzero15DebugAnnotationE(%"class.perfetto::TracedValue"* nonnull sret %10, %"class.perfetto::protos::pbzero::DebugAnnotation"* %369) #14
  %370 = bitcast %"class.perfetto::TracedValue"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %370) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %370, i8* nonnull align 8 %352, i64 16, i1 false) #14
  %371 = bitcast %"class.WTF::String"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %371) #14
  %372 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %9, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %333, %"class.WTF::StringImpl"** %372, align 8
  %373 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %333, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %374 = load atomic i32, i32* %373 monotonic, align 4
  %375 = and i32 %374, 2
  %376 = icmp eq i32 %375, 0
  br i1 %376, label %377, label %389

377:                                              ; preds = %343
  %378 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %333, i64 0, i32 0
  %379 = load i32, i32* %378, align 4
  %380 = zext i32 %379 to i33
  %381 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %380, i33 1) #14
  %382 = extractvalue { i33, i1 } %381, 1
  %383 = extractvalue { i33, i1 } %381, 0
  %384 = icmp slt i33 %383, 0
  %385 = or i1 %382, %384
  br i1 %385, label %386, label %387, !prof !5

386:                                              ; preds = %377
  call void @llvm.trap() #14
  unreachable

387:                                              ; preds = %377
  %388 = trunc i33 %383 to i32
  store i32 %388, i32* %378, align 4
  br label %389

389:                                              ; preds = %387, %343
  call void @_ZN5blink44inspector_style_invalidator_invalidate_event12SelectorPartEN8perfetto11TracedValueERNS_7ElementEPKcRKNS_15InvalidationSetERKN3WTF6StringE(%"class.perfetto::TracedValue"* nonnull %8, %"class.blink::Element"* dereferenceable(104) %1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink44inspector_style_invalidator_invalidate_event28kInvalidationSetMatchedClassE, i64 0, i64 0), %"class.blink::InvalidationSet"* dereferenceable(48) %0, %"class.WTF::String"* nonnull dereferenceable(8) %9) #14
  %390 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %372, align 8
  %391 = icmp eq %"class.WTF::StringImpl"* %390, null
  br i1 %391, label %405, label %392

392:                                              ; preds = %389
  %393 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %390, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %394 = load atomic i32, i32* %393 monotonic, align 4
  %395 = and i32 %394, 2
  %396 = icmp eq i32 %395, 0
  %397 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %390, i64 0, i32 0
  %398 = load i32, i32* %397, align 4
  br i1 %396, label %399, label %401

399:                                              ; preds = %392
  %400 = add i32 %398, -1
  store i32 %400, i32* %397, align 4
  br label %401

401:                                              ; preds = %399, %392
  %402 = phi i32 [ %400, %399 ], [ %398, %392 ]
  %403 = icmp eq i32 %402, 0
  br i1 %403, label %404, label %405

404:                                              ; preds = %401
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %390) #14
  br label %405

405:                                              ; preds = %404, %401, %389
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %371) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %370) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %352) #14
  %406 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 73, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 171, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i8* null, i64 0, i64 0, i32 %344, %"class.base::TimeTicks"* nonnull dereferenceable(8) %12, %"class.base::trace_event::TraceArguments"* nonnull %11, i32 8) #14
  %407 = load i8, i8* %348, align 8
  %408 = icmp eq i8 %407, 0
  br i1 %408, label %443, label %409

409:                                              ; preds = %405, %438
  %410 = phi i64 [ %439, %438 ], [ 0, %405 ]
  %411 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %11, i64 0, i32 1, i64 %410
  %412 = load i8, i8* %411, align 1
  %413 = icmp eq i8 %412, 8
  br i1 %413, label %414, label %425

414:                                              ; preds = %409
  %415 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %11, i64 0, i32 3, i64 %410
  %416 = bitcast %"union.base::trace_event::TraceValue"* %415 to %"class.base::trace_event::ConvertableToTraceFormat"**
  %417 = load %"class.base::trace_event::ConvertableToTraceFormat"*, %"class.base::trace_event::ConvertableToTraceFormat"** %416, align 8
  %418 = icmp eq %"class.base::trace_event::ConvertableToTraceFormat"* %417, null
  br i1 %418, label %438, label %419

419:                                              ; preds = %414
  %420 = bitcast %"class.base::trace_event::ConvertableToTraceFormat"* %417 to void (%"class.base::trace_event::ConvertableToTraceFormat"*)***
  %421 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)**, void (%"class.base::trace_event::ConvertableToTraceFormat"*)*** %420, align 8
  %422 = getelementptr inbounds void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %421, i64 1
  %423 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %422, align 8
  call void %423(%"class.base::trace_event::ConvertableToTraceFormat"* nonnull %417) #14
  %424 = load i8, i8* %411, align 1
  br label %425

425:                                              ; preds = %419, %409
  %426 = phi i8 [ %412, %409 ], [ %424, %419 ]
  %427 = icmp eq i8 %426, 9
  br i1 %427, label %428, label %438

428:                                              ; preds = %425
  %429 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %11, i64 0, i32 3, i64 %410
  %430 = bitcast %"union.base::trace_event::TraceValue"* %429 to %"class.protozero::HeapBuffered"**
  %431 = load %"class.protozero::HeapBuffered"*, %"class.protozero::HeapBuffered"** %430, align 8
  %432 = icmp eq %"class.protozero::HeapBuffered"* %431, null
  br i1 %432, label %438, label %433

433:                                              ; preds = %428
  %434 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %431, i64 0, i32 2, i32 1
  call void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"* %434) #14
  %435 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %431, i64 0, i32 1
  call void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"* %435) #14
  %436 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %431, i64 0, i32 0
  call void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"* %436) #14
  %437 = bitcast %"class.protozero::HeapBuffered"* %431 to i8*
  call void @_ZdlPv(i8* %437) #15
  br label %438

438:                                              ; preds = %433, %428, %425, %414
  %439 = add nuw nsw i64 %410, 1
  %440 = load i8, i8* %348, align 8
  %441 = zext i8 %440 to i64
  %442 = icmp ult i64 %439, %441
  br i1 %442, label %409, label %443

443:                                              ; preds = %438, %405
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %348) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %345) #14
  br label %686

444:                                              ; preds = %332
  %445 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %220, align 8
  %446 = icmp eq %"class.blink::ElementData"* %445, null
  br i1 %446, label %588, label %447

447:                                              ; preds = %319, %328, %444
  tail call void @_ZNK5blink7Element24SynchronizeAllAttributesEv(%"class.blink::Element"* %1) #14
  %448 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %220, align 8
  %449 = icmp eq %"class.blink::ElementData"* %448, null
  br i1 %449, label %450, label %452

450:                                              ; preds = %447
  %451 = load i32, i32* null, align 536870912
  br label %461

452:                                              ; preds = %447
  %453 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %448, i64 0, i32 0, i32 0, i32 0
  %454 = load i32, i32* %453, align 4
  %455 = and i32 %454, 1
  %456 = icmp eq i32 %455, 0
  br i1 %456, label %461, label %457

457:                                              ; preds = %452
  %458 = bitcast %"class.blink::ElementData"* %448 to %"class.blink::UniqueElementData"*
  %459 = getelementptr inbounds %"class.blink::UniqueElementData", %"class.blink::UniqueElementData"* %458, i64 0, i32 2, i32 0, i32 0, i32 2
  %460 = load i32, i32* %459, align 4
  br label %465

461:                                              ; preds = %452, %450
  %462 = phi i32 [ %451, %450 ], [ %454, %452 ]
  %463 = lshr i32 %462, 1
  %464 = and i32 %463, 268435455
  br label %465

465:                                              ; preds = %457, %461
  %466 = phi i32 [ %464, %461 ], [ %460, %457 ]
  %467 = icmp eq i32 %466, 0
  br i1 %467, label %588, label %468

468:                                              ; preds = %465
  %469 = load i8, i8* %32, align 1
  %470 = and i8 %469, 8
  %471 = icmp eq i8 %470, 0
  br i1 %471, label %472, label %476

472:                                              ; preds = %468
  %473 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 5, i32 0
  %474 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %473, align 8
  %475 = icmp eq %"class.WTF::StringImpl"* %474, null
  br i1 %475, label %588, label %476

476:                                              ; preds = %472, %468
  %477 = tail call %"class.WTF::StringImpl"* @_ZNK5blink15InvalidationSet16FindAnyAttributeERNS_7ElementE(%"class.blink::InvalidationSet"* %0, %"class.blink::Element"* dereferenceable(104) %1)
  %478 = icmp eq %"class.WTF::StringImpl"* %477, null
  br i1 %478, label %588, label %479

479:                                              ; preds = %476
  %480 = load i8*, i8** @_ZN5blinkL17g_tracing_enabledE, align 8
  %481 = load i8, i8* %480, align 1
  %482 = icmp eq i8 %481, 0
  br i1 %482, label %686, label %483, !prof !27

483:                                              ; preds = %479
  %484 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 171, i32 0), align 16
  %485 = and i8 %484, 25
  %486 = icmp eq i8 %485, 0
  br i1 %486, label %686, label %487, !prof !27

487:                                              ; preds = %483
  %488 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #14
  %489 = bitcast %"class.base::TimeTicks"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %489) #14
  %490 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %7, i64 0, i32 0, i32 0
  %491 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #14
  store i64 %491, i64* %490, align 8
  %492 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %492) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %492, i8 -86, i64 40, i1 false) #14
  store i8 1, i8* %492, align 8
  %493 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %6, i64 0, i32 1, i64 0
  store i8 9, i8* %493, align 1
  %494 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %6, i64 0, i32 2, i64 0
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i8** %494, align 8
  %495 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %6, i64 0, i32 3, i64 0
  %496 = bitcast %"class.perfetto::TracedValue"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %496) #14
  %497 = tail call i8* @_Znwm(i64 192) #15
  %498 = bitcast i8* %497 to %"class.protozero::ScatteredHeapBuffer"*
  tail call void @_ZN9protozero19ScatteredHeapBufferC1Emm(%"class.protozero::ScatteredHeapBuffer"* nonnull %498, i64 4096, i64 4096) #14
  %499 = getelementptr inbounds i8, i8* %497, i64 80
  %500 = bitcast i8* %499 to %"class.protozero::ScatteredStreamWriter"*
  %501 = bitcast i8* %497 to %"class.protozero::ScatteredStreamWriter::Delegate"*
  tail call void @_ZN9protozero21ScatteredStreamWriterC1EPNS0_8DelegateE(%"class.protozero::ScatteredStreamWriter"* %500, %"class.protozero::ScatteredStreamWriter::Delegate"* nonnull %501) #14
  %502 = getelementptr inbounds i8, i8* %497, i64 120
  %503 = getelementptr inbounds i8, i8* %497, i64 168
  %504 = bitcast i8* %503 to %"class.protozero::MessageArena"*
  tail call void @_ZN9protozero12MessageArenaC1Ev(%"class.protozero::MessageArena"* %504) #14
  %505 = bitcast i8* %502 to %"class.protozero::Message"*
  tail call void @_ZN9protozero7Message5ResetEPNS_21ScatteredStreamWriterEPNS_12MessageArenaE(%"class.protozero::Message"* %505, %"class.protozero::ScatteredStreamWriter"* null, %"class.protozero::MessageArena"* %504) #14
  %506 = getelementptr inbounds i8, i8* %497, i64 24
  %507 = bitcast i8* %506 to i8**
  store i8* %499, i8** %507, align 8
  %508 = bitcast i8* %503 to %"class.std::__1::list"*
  tail call void @_ZNSt3__14listIN9protozero12MessageArena5BlockENS_9allocatorIS3_EEE6resizeEm(%"class.std::__1::list"* %508, i64 1) #14
  %509 = bitcast i8* %503 to %"struct.std::__1::__list_node"**
  %510 = load %"struct.std::__1::__list_node"*, %"struct.std::__1::__list_node"** %509, align 8
  %511 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %510, i64 0, i32 1, i32 1
  store i32 0, i32* %511, align 8
  tail call void @_ZN9protozero7Message5ResetEPNS_21ScatteredStreamWriterEPNS_12MessageArenaE(%"class.protozero::Message"* %505, %"class.protozero::ScatteredStreamWriter"* %500, %"class.protozero::MessageArena"* %504) #14
  %512 = bitcast %"union.base::trace_event::TraceValue"* %495 to i8**
  store i8* %497, i8** %512, align 8
  %513 = bitcast i8* %502 to %"class.perfetto::protos::pbzero::DebugAnnotation"*
  call void @_ZN8perfetto8internal26CreateTracedValueFromProtoEPNS_6protos6pbzero15DebugAnnotationE(%"class.perfetto::TracedValue"* nonnull sret %5, %"class.perfetto::protos::pbzero::DebugAnnotation"* %513) #14
  %514 = bitcast %"class.perfetto::TracedValue"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %514) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %514, i8* nonnull align 8 %496, i64 16, i1 false) #14
  %515 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %515) #14
  %516 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %477, %"class.WTF::StringImpl"** %516, align 8
  %517 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %477, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %518 = load atomic i32, i32* %517 monotonic, align 4
  %519 = and i32 %518, 2
  %520 = icmp eq i32 %519, 0
  br i1 %520, label %521, label %533

521:                                              ; preds = %487
  %522 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %477, i64 0, i32 0
  %523 = load i32, i32* %522, align 4
  %524 = zext i32 %523 to i33
  %525 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %524, i33 1) #14
  %526 = extractvalue { i33, i1 } %525, 1
  %527 = extractvalue { i33, i1 } %525, 0
  %528 = icmp slt i33 %527, 0
  %529 = or i1 %526, %528
  br i1 %529, label %530, label %531, !prof !5

530:                                              ; preds = %521
  call void @llvm.trap() #14
  unreachable

531:                                              ; preds = %521
  %532 = trunc i33 %527 to i32
  store i32 %532, i32* %522, align 4
  br label %533

533:                                              ; preds = %531, %487
  call void @_ZN5blink44inspector_style_invalidator_invalidate_event12SelectorPartEN8perfetto11TracedValueERNS_7ElementEPKcRKNS_15InvalidationSetERKN3WTF6StringE(%"class.perfetto::TracedValue"* nonnull %3, %"class.blink::Element"* dereferenceable(104) %1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink44inspector_style_invalidator_invalidate_event32kInvalidationSetMatchedAttributeE, i64 0, i64 0), %"class.blink::InvalidationSet"* dereferenceable(48) %0, %"class.WTF::String"* nonnull dereferenceable(8) %4) #14
  %534 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %516, align 8
  %535 = icmp eq %"class.WTF::StringImpl"* %534, null
  br i1 %535, label %549, label %536

536:                                              ; preds = %533
  %537 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %534, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %538 = load atomic i32, i32* %537 monotonic, align 4
  %539 = and i32 %538, 2
  %540 = icmp eq i32 %539, 0
  %541 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %534, i64 0, i32 0
  %542 = load i32, i32* %541, align 4
  br i1 %540, label %543, label %545

543:                                              ; preds = %536
  %544 = add i32 %542, -1
  store i32 %544, i32* %541, align 4
  br label %545

545:                                              ; preds = %543, %536
  %546 = phi i32 [ %544, %543 ], [ %542, %536 ]
  %547 = icmp eq i32 %546, 0
  br i1 %547, label %548, label %549

548:                                              ; preds = %545
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %534) #14
  br label %549

549:                                              ; preds = %548, %545, %533
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %515) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %514) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %496) #14
  %550 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 73, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 171, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i8* null, i64 0, i64 0, i32 %488, %"class.base::TimeTicks"* nonnull dereferenceable(8) %7, %"class.base::trace_event::TraceArguments"* nonnull %6, i32 8) #14
  %551 = load i8, i8* %492, align 8
  %552 = icmp eq i8 %551, 0
  br i1 %552, label %587, label %553

553:                                              ; preds = %549, %582
  %554 = phi i64 [ %583, %582 ], [ 0, %549 ]
  %555 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %6, i64 0, i32 1, i64 %554
  %556 = load i8, i8* %555, align 1
  %557 = icmp eq i8 %556, 8
  br i1 %557, label %558, label %569

558:                                              ; preds = %553
  %559 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %6, i64 0, i32 3, i64 %554
  %560 = bitcast %"union.base::trace_event::TraceValue"* %559 to %"class.base::trace_event::ConvertableToTraceFormat"**
  %561 = load %"class.base::trace_event::ConvertableToTraceFormat"*, %"class.base::trace_event::ConvertableToTraceFormat"** %560, align 8
  %562 = icmp eq %"class.base::trace_event::ConvertableToTraceFormat"* %561, null
  br i1 %562, label %582, label %563

563:                                              ; preds = %558
  %564 = bitcast %"class.base::trace_event::ConvertableToTraceFormat"* %561 to void (%"class.base::trace_event::ConvertableToTraceFormat"*)***
  %565 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)**, void (%"class.base::trace_event::ConvertableToTraceFormat"*)*** %564, align 8
  %566 = getelementptr inbounds void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %565, i64 1
  %567 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %566, align 8
  call void %567(%"class.base::trace_event::ConvertableToTraceFormat"* nonnull %561) #14
  %568 = load i8, i8* %555, align 1
  br label %569

569:                                              ; preds = %563, %553
  %570 = phi i8 [ %556, %553 ], [ %568, %563 ]
  %571 = icmp eq i8 %570, 9
  br i1 %571, label %572, label %582

572:                                              ; preds = %569
  %573 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %6, i64 0, i32 3, i64 %554
  %574 = bitcast %"union.base::trace_event::TraceValue"* %573 to %"class.protozero::HeapBuffered"**
  %575 = load %"class.protozero::HeapBuffered"*, %"class.protozero::HeapBuffered"** %574, align 8
  %576 = icmp eq %"class.protozero::HeapBuffered"* %575, null
  br i1 %576, label %582, label %577

577:                                              ; preds = %572
  %578 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %575, i64 0, i32 2, i32 1
  call void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"* %578) #14
  %579 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %575, i64 0, i32 1
  call void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"* %579) #14
  %580 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %575, i64 0, i32 0
  call void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"* %580) #14
  %581 = bitcast %"class.protozero::HeapBuffered"* %575 to i8*
  call void @_ZdlPv(i8* %581) #15
  br label %582

582:                                              ; preds = %577, %572, %569, %558
  %583 = add nuw nsw i64 %554, 1
  %584 = load i8, i8* %492, align 8
  %585 = zext i8 %584 to i64
  %586 = icmp ult i64 %583, %585
  br i1 %586, label %553, label %587

587:                                              ; preds = %582, %549
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %492) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %489) #14
  br label %686

588:                                              ; preds = %472, %465, %316, %219, %444, %476
  %589 = tail call zeroext i1 @_ZNK5blink7Element7HasPartEv(%"class.blink::Element"* %1) #14
  br i1 %589, label %590, label %686

590:                                              ; preds = %588
  %591 = load i8, i8* %27, align 1
  %592 = and i8 %591, 32
  %593 = icmp eq i8 %592, 0
  br i1 %593, label %686, label %594

594:                                              ; preds = %590
  %595 = load i8*, i8** @_ZN5blinkL17g_tracing_enabledE, align 8
  %596 = load i8, i8* %595, align 1
  %597 = icmp eq i8 %596, 0
  br i1 %597, label %686, label %598, !prof !27

598:                                              ; preds = %594
  %599 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 171, i32 0), align 16
  %600 = and i8 %599, 25
  %601 = icmp eq i8 %600, 0
  br i1 %601, label %686, label %602, !prof !27

602:                                              ; preds = %598
  %603 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #14
  %604 = bitcast %"class.base::TimeTicks"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %604) #14
  %605 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %26, i64 0, i32 0, i32 0
  %606 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #14
  store i64 %606, i64* %605, align 8
  %607 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %25, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %607) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %607, i8 -86, i64 40, i1 false) #14
  store i8 1, i8* %607, align 8
  %608 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %25, i64 0, i32 1, i64 0
  store i8 9, i8* %608, align 1
  %609 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %25, i64 0, i32 2, i64 0
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i8** %609, align 8
  %610 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %25, i64 0, i32 3, i64 0
  %611 = bitcast %"class.perfetto::TracedValue"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %611) #14
  %612 = tail call i8* @_Znwm(i64 192) #15
  %613 = bitcast i8* %612 to %"class.protozero::ScatteredHeapBuffer"*
  tail call void @_ZN9protozero19ScatteredHeapBufferC1Emm(%"class.protozero::ScatteredHeapBuffer"* nonnull %613, i64 4096, i64 4096) #14
  %614 = getelementptr inbounds i8, i8* %612, i64 80
  %615 = bitcast i8* %614 to %"class.protozero::ScatteredStreamWriter"*
  %616 = bitcast i8* %612 to %"class.protozero::ScatteredStreamWriter::Delegate"*
  tail call void @_ZN9protozero21ScatteredStreamWriterC1EPNS0_8DelegateE(%"class.protozero::ScatteredStreamWriter"* %615, %"class.protozero::ScatteredStreamWriter::Delegate"* nonnull %616) #14
  %617 = getelementptr inbounds i8, i8* %612, i64 120
  %618 = getelementptr inbounds i8, i8* %612, i64 168
  %619 = bitcast i8* %618 to %"class.protozero::MessageArena"*
  tail call void @_ZN9protozero12MessageArenaC1Ev(%"class.protozero::MessageArena"* %619) #14
  %620 = bitcast i8* %617 to %"class.protozero::Message"*
  tail call void @_ZN9protozero7Message5ResetEPNS_21ScatteredStreamWriterEPNS_12MessageArenaE(%"class.protozero::Message"* %620, %"class.protozero::ScatteredStreamWriter"* null, %"class.protozero::MessageArena"* %619) #14
  %621 = getelementptr inbounds i8, i8* %612, i64 24
  %622 = bitcast i8* %621 to i8**
  store i8* %614, i8** %622, align 8
  %623 = bitcast i8* %618 to %"class.std::__1::list"*
  tail call void @_ZNSt3__14listIN9protozero12MessageArena5BlockENS_9allocatorIS3_EEE6resizeEm(%"class.std::__1::list"* %623, i64 1) #14
  %624 = bitcast i8* %618 to %"struct.std::__1::__list_node"**
  %625 = load %"struct.std::__1::__list_node"*, %"struct.std::__1::__list_node"** %624, align 8
  %626 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %625, i64 0, i32 1, i32 1
  store i32 0, i32* %626, align 8
  tail call void @_ZN9protozero7Message5ResetEPNS_21ScatteredStreamWriterEPNS_12MessageArenaE(%"class.protozero::Message"* %620, %"class.protozero::ScatteredStreamWriter"* %615, %"class.protozero::MessageArena"* %619) #14
  %627 = bitcast %"union.base::trace_event::TraceValue"* %610 to i8**
  store i8* %612, i8** %627, align 8
  %628 = bitcast i8* %617 to %"class.perfetto::protos::pbzero::DebugAnnotation"*
  call void @_ZN8perfetto8internal26CreateTracedValueFromProtoEPNS_6protos6pbzero15DebugAnnotationE(%"class.perfetto::TracedValue"* nonnull sret %24, %"class.perfetto::protos::pbzero::DebugAnnotation"* %628) #14
  %629 = bitcast %"class.perfetto::TracedValue"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %629) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %629, i8* nonnull align 8 %611, i64 16, i1 false) #14
  %630 = bitcast %"class.WTF::String"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %630) #14
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %23, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.30, i64 0, i64 0), i64 0) #14
  call void @_ZN5blink44inspector_style_invalidator_invalidate_event12SelectorPartEN8perfetto11TracedValueERNS_7ElementEPKcRKNS_15InvalidationSetERKN3WTF6StringE(%"class.perfetto::TracedValue"* nonnull %22, %"class.blink::Element"* dereferenceable(104) %1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink44inspector_style_invalidator_invalidate_event27kInvalidationSetMatchedPartE, i64 0, i64 0), %"class.blink::InvalidationSet"* dereferenceable(48) %0, %"class.WTF::String"* nonnull dereferenceable(8) %23) #14
  %631 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %23, i64 0, i32 0, i32 0
  %632 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %631, align 8
  %633 = icmp eq %"class.WTF::StringImpl"* %632, null
  br i1 %633, label %647, label %634

634:                                              ; preds = %602
  %635 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %632, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %636 = load atomic i32, i32* %635 monotonic, align 4
  %637 = and i32 %636, 2
  %638 = icmp eq i32 %637, 0
  %639 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %632, i64 0, i32 0
  %640 = load i32, i32* %639, align 4
  br i1 %638, label %641, label %643

641:                                              ; preds = %634
  %642 = add i32 %640, -1
  store i32 %642, i32* %639, align 4
  br label %643

643:                                              ; preds = %641, %634
  %644 = phi i32 [ %642, %641 ], [ %640, %634 ]
  %645 = icmp eq i32 %644, 0
  br i1 %645, label %646, label %647

646:                                              ; preds = %643
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %632) #14
  br label %647

647:                                              ; preds = %646, %643, %602
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %630) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %629) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %611) #14
  %648 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 73, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 171, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i8* null, i64 0, i64 0, i32 %603, %"class.base::TimeTicks"* nonnull dereferenceable(8) %26, %"class.base::trace_event::TraceArguments"* nonnull %25, i32 8) #14
  %649 = load i8, i8* %607, align 8
  %650 = icmp eq i8 %649, 0
  br i1 %650, label %685, label %651

651:                                              ; preds = %647, %680
  %652 = phi i64 [ %681, %680 ], [ 0, %647 ]
  %653 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %25, i64 0, i32 1, i64 %652
  %654 = load i8, i8* %653, align 1
  %655 = icmp eq i8 %654, 8
  br i1 %655, label %656, label %667

656:                                              ; preds = %651
  %657 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %25, i64 0, i32 3, i64 %652
  %658 = bitcast %"union.base::trace_event::TraceValue"* %657 to %"class.base::trace_event::ConvertableToTraceFormat"**
  %659 = load %"class.base::trace_event::ConvertableToTraceFormat"*, %"class.base::trace_event::ConvertableToTraceFormat"** %658, align 8
  %660 = icmp eq %"class.base::trace_event::ConvertableToTraceFormat"* %659, null
  br i1 %660, label %680, label %661

661:                                              ; preds = %656
  %662 = bitcast %"class.base::trace_event::ConvertableToTraceFormat"* %659 to void (%"class.base::trace_event::ConvertableToTraceFormat"*)***
  %663 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)**, void (%"class.base::trace_event::ConvertableToTraceFormat"*)*** %662, align 8
  %664 = getelementptr inbounds void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %663, i64 1
  %665 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %664, align 8
  call void %665(%"class.base::trace_event::ConvertableToTraceFormat"* nonnull %659) #14
  %666 = load i8, i8* %653, align 1
  br label %667

667:                                              ; preds = %661, %651
  %668 = phi i8 [ %654, %651 ], [ %666, %661 ]
  %669 = icmp eq i8 %668, 9
  br i1 %669, label %670, label %680

670:                                              ; preds = %667
  %671 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %25, i64 0, i32 3, i64 %652
  %672 = bitcast %"union.base::trace_event::TraceValue"* %671 to %"class.protozero::HeapBuffered"**
  %673 = load %"class.protozero::HeapBuffered"*, %"class.protozero::HeapBuffered"** %672, align 8
  %674 = icmp eq %"class.protozero::HeapBuffered"* %673, null
  br i1 %674, label %680, label %675

675:                                              ; preds = %670
  %676 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %673, i64 0, i32 2, i32 1
  call void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"* %676) #14
  %677 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %673, i64 0, i32 1
  call void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"* %677) #14
  %678 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %673, i64 0, i32 0
  call void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"* %678) #14
  %679 = bitcast %"class.protozero::HeapBuffered"* %673 to i8*
  call void @_ZdlPv(i8* %679) #15
  br label %680

680:                                              ; preds = %675, %670, %667, %656
  %681 = add nuw nsw i64 %652, 1
  %682 = load i8, i8* %607, align 8
  %683 = zext i8 %682 to i64
  %684 = icmp ult i64 %681, %683
  br i1 %684, label %651, label %685

685:                                              ; preds = %680, %647
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %607) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %604) #14
  br label %686

686:                                              ; preds = %590, %2, %479, %483, %335, %339, %588, %594, %598, %685, %587, %443, %240, %244, %315, %125, %129, %218
  %687 = phi i1 [ true, %2 ], [ true, %218 ], [ true, %129 ], [ true, %125 ], [ true, %315 ], [ true, %244 ], [ true, %240 ], [ true, %443 ], [ true, %587 ], [ true, %685 ], [ true, %598 ], [ true, %594 ], [ false, %590 ], [ false, %588 ], [ true, %339 ], [ true, %335 ], [ true, %483 ], [ true, %479 ]
  ret i1 %687
}

declare %"class.WTF::StringImpl"* @_ZNK5blink7Element28LocalNameForSelectorMatchingEv(%"class.blink::Element"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink15InvalidationSet12FindAnyClassERNS_7ElementE(%"class.blink::InvalidationSet"* nocapture readonly, %"class.blink::Element"* nocapture readonly dereferenceable(104)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %1, i64 0, i32 3, i32 0, i32 0
  %4 = load %"class.blink::ElementData"*, %"class.blink::ElementData"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::ElementData", %"class.blink::ElementData"* %4, i64 0, i32 2, i32 0, i32 0
  %6 = load %"class.blink::SpaceSplitString::Data"*, %"class.blink::SpaceSplitString::Data"** %5, align 8
  %7 = icmp eq %"class.blink::SpaceSplitString::Data"* %6, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %6, i64 0, i32 2, i32 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  br label %11

11:                                               ; preds = %2, %8
  %12 = phi i32 [ %10, %8 ], [ 0, %2 ]
  %13 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 2
  %14 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7, i32 0
  %15 = load i8, i8* %14, align 1
  %16 = and i8 %15, 1
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %18, label %45

18:                                               ; preds = %11
  %19 = getelementptr inbounds %"union.blink::InvalidationSet::Backing", %"union.blink::InvalidationSet::Backing"* %13, i64 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = icmp ne %"class.WTF::StringImpl"* %20, null
  %22 = icmp ne i32 %12, 0
  %23 = and i1 %21, %22
  br i1 %23, label %24, label %127

24:                                               ; preds = %18
  %25 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %6, i64 0, i32 2
  %26 = tail call dereferenceable(8) %"class.WTF::AtomicString"* @_ZN3WTF6VectorINS_12AtomicStringELj4ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %25, i32 0) #14
  %27 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %26, i64 0, i32 0, i32 0, i32 0
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  %29 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* nonnull %20, %"class.WTF::StringImpl"* %28) #14
  br i1 %29, label %127, label %30

30:                                               ; preds = %24, %33
  %31 = phi i32 [ %40, %33 ], [ 1, %24 ]
  %32 = icmp eq i32 %31, %12
  br i1 %32, label %41, label %33

33:                                               ; preds = %30
  %34 = load %"class.blink::SpaceSplitString::Data"*, %"class.blink::SpaceSplitString::Data"** %5, align 8
  %35 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %34, i64 0, i32 2
  %36 = tail call dereferenceable(8) %"class.WTF::AtomicString"* @_ZN3WTF6VectorINS_12AtomicStringELj4ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %35, i32 %31) #14
  %37 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %36, i64 0, i32 0, i32 0, i32 0
  %38 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %37, align 8
  %39 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* nonnull %20, %"class.WTF::StringImpl"* %38) #14
  %40 = add nuw i32 %31, 1
  br i1 %39, label %127, label %30

41:                                               ; preds = %30
  %42 = load i8, i8* %14, align 1
  %43 = and i8 %42, 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %127, label %45

45:                                               ; preds = %11, %41
  %46 = bitcast %"union.blink::InvalidationSet::Backing"* %13 to %"class.WTF::HashSet"**
  %47 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %46, align 8
  %48 = icmp ne %"class.WTF::HashSet"* %47, null
  %49 = icmp ne i32 %12, 0
  %50 = and i1 %48, %49
  br i1 %50, label %51, label %127

51:                                               ; preds = %45
  %52 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %47, i64 0, i32 0, i32 0
  %53 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %47, i64 0, i32 0, i32 1
  br label %56

54:                                               ; preds = %118
  %55 = icmp eq i32 %123, %12
  br i1 %55, label %127, label %56

56:                                               ; preds = %54, %51
  %57 = phi i32 [ 0, %51 ], [ %123, %54 ]
  %58 = load %"class.blink::SpaceSplitString::Data"*, %"class.blink::SpaceSplitString::Data"** %5, align 8
  %59 = getelementptr inbounds %"class.blink::SpaceSplitString::Data", %"class.blink::SpaceSplitString::Data"* %58, i64 0, i32 2
  %60 = tail call dereferenceable(8) %"class.WTF::AtomicString"* @_ZN3WTF6VectorINS_12AtomicStringELj4ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %59, i32 %57) #14
  %61 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %52, align 8
  %62 = icmp eq %"class.WTF::AtomicString"* %61, null
  %63 = load i32, i32* %53, align 8
  br i1 %62, label %115, label %64

64:                                               ; preds = %56
  %65 = add i32 %63, -1
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %60, i64 0, i32 0, i32 0, i32 0
  %68 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %67, align 8
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %68, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = lshr i32 %70, 8
  %72 = and i32 %71, %65
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %61, i64 %73
  %75 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %74, i64 0, i32 0, i32 0, i32 0
  %76 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %75, align 8
  %77 = icmp eq %"class.WTF::StringImpl"* %76, null
  br i1 %77, label %115, label %78

78:                                               ; preds = %64
  %79 = xor i32 %71, -1
  %80 = lshr i32 %70, 31
  %81 = add nsw i32 %80, %79
  %82 = shl i32 %81, 12
  %83 = xor i32 %82, %81
  %84 = lshr i32 %83, 7
  %85 = xor i32 %84, %83
  %86 = shl i32 %85, 2
  %87 = xor i32 %86, %85
  %88 = lshr i32 %87, 20
  %89 = xor i32 %88, %87
  %90 = or i32 %89, 1
  %91 = zext i32 %90 to i64
  br label %92

92:                                               ; preds = %102, %78
  %93 = phi %"class.WTF::StringImpl"* [ %76, %78 ], [ %109, %102 ]
  %94 = phi %"class.WTF::AtomicString"* [ %74, %78 ], [ %107, %102 ]
  %95 = phi i64 [ %73, %78 ], [ %106, %102 ]
  %96 = phi i64 [ 0, %78 ], [ %104, %102 ]
  %97 = bitcast %"class.WTF::AtomicString"* %94 to i8**
  %98 = load i8*, i8** %97, align 8
  %99 = icmp ne i8* %98, inttoptr (i64 -1 to i8*)
  %100 = icmp eq %"class.WTF::StringImpl"* %93, %68
  %101 = and i1 %100, %99
  br i1 %101, label %111, label %102

102:                                              ; preds = %92
  %103 = icmp eq i64 %96, 0
  %104 = select i1 %103, i64 %91, i64 %96
  %105 = add i64 %104, %95
  %106 = and i64 %105, %66
  %107 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %61, i64 %106
  %108 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %107, i64 0, i32 0, i32 0, i32 0
  %109 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %108, align 8
  %110 = icmp eq %"class.WTF::StringImpl"* %109, null
  br i1 %110, label %115, label %92

111:                                              ; preds = %92
  %112 = icmp eq %"class.WTF::AtomicString"* %94, null
  br i1 %112, label %115, label %113

113:                                              ; preds = %111
  %114 = zext i32 %63 to i64
  br label %118

115:                                              ; preds = %102, %111, %64, %56
  %116 = zext i32 %63 to i64
  %117 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %61, i64 %116
  br label %118

118:                                              ; preds = %113, %115
  %119 = phi i64 [ %114, %113 ], [ %116, %115 ]
  %120 = phi %"class.WTF::AtomicString"* [ %94, %113 ], [ %117, %115 ]
  %121 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %61, i64 %119
  %122 = icmp eq %"class.WTF::AtomicString"* %120, %121
  %123 = add nuw i32 %57, 1
  br i1 %122, label %54, label %124

124:                                              ; preds = %118
  %125 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %120, i64 0, i32 0, i32 0, i32 0
  %126 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %125, align 8
  br label %127

127:                                              ; preds = %33, %54, %24, %18, %45, %41, %124
  %128 = phi %"class.WTF::StringImpl"* [ %126, %124 ], [ null, %45 ], [ null, %41 ], [ null, %18 ], [ %20, %24 ], [ null, %54 ], [ %20, %33 ]
  ret %"class.WTF::StringImpl"* %128
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink15InvalidationSet16FindAnyAttributeERNS_7ElementE(%"class.blink::InvalidationSet"* nocapture readonly, %"class.blink::Element"* dereferenceable(104)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::AtomicString", align 8
  %4 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 5
  %5 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = and i8 %6, 8
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %63

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.3", %"union.blink::InvalidationSet::Backing.3"* %4, i64 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %107, label %13

13:                                               ; preds = %9
  %14 = bitcast %"class.WTF::AtomicString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #14
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 acquire, align 4
  %17 = and i32 %16, 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %35, label %19

19:                                               ; preds = %13
  %20 = load atomic i32, i32* %15 monotonic, align 4
  %21 = and i32 %20, 2
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %37

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i33
  %27 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %26, i33 1) #14
  %28 = extractvalue { i33, i1 } %27, 1
  %29 = extractvalue { i33, i1 } %27, 0
  %30 = icmp slt i33 %29, 0
  %31 = or i1 %28, %30
  br i1 %31, label %32, label %33, !prof !5

32:                                               ; preds = %23
  tail call void @llvm.trap() #14
  unreachable

33:                                               ; preds = %23
  %34 = trunc i33 %29 to i32
  store i32 %34, i32* %24, align 4
  br label %37

35:                                               ; preds = %13
  %36 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %11) #14
  br label %37

37:                                               ; preds = %19, %33, %35
  %38 = phi %"class.WTF::StringImpl"* [ %36, %35 ], [ %11, %19 ], [ %11, %33 ]
  %39 = ptrtoint %"class.WTF::StringImpl"* %38 to i64
  %40 = bitcast %"class.WTF::AtomicString"* %3 to i64*
  store i64 %39, i64* %40, align 8
  %41 = call zeroext i1 @_ZNK5blink7Element29HasAttributeIgnoringNamespaceERKN3WTF12AtomicStringE(%"class.blink::Element"* %1, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %3) #14
  %42 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %3, i64 0, i32 0, i32 0, i32 0
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %42, align 8
  %44 = icmp eq %"class.WTF::StringImpl"* %43, null
  br i1 %44, label %58, label %45

45:                                               ; preds = %37
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load atomic i32, i32* %46 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %43, i64 0, i32 0
  %51 = load i32, i32* %50, align 4
  br i1 %49, label %52, label %54

52:                                               ; preds = %45
  %53 = add i32 %51, -1
  store i32 %53, i32* %50, align 4
  br label %54

54:                                               ; preds = %52, %45
  %55 = phi i32 [ %53, %52 ], [ %51, %45 ]
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %54
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %43) #14
  br label %58

58:                                               ; preds = %37, %54, %57
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #14
  br i1 %41, label %107, label %59

59:                                               ; preds = %58
  %60 = load i8, i8* %5, align 1
  %61 = and i8 %60, 8
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %107, label %63

63:                                               ; preds = %2, %59
  %64 = bitcast %"union.blink::InvalidationSet::Backing.3"* %4 to %"class.WTF::HashSet"**
  %65 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %64, align 8
  %66 = icmp eq %"class.WTF::HashSet"* %65, null
  br i1 %66, label %107, label %67

67:                                               ; preds = %63
  %68 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %65, i64 0, i32 0, i32 2
  %69 = load i32, i32* %68, align 4
  %70 = icmp eq i32 %69, 0
  %71 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %65, i64 0, i32 0, i32 0
  %72 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %71, align 8
  %73 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %65, i64 0, i32 0, i32 1
  %74 = load i32, i32* %73, align 8
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %72, i64 %75
  br i1 %70, label %107, label %77

77:                                               ; preds = %67
  %78 = icmp eq i32 %74, 0
  br i1 %78, label %86, label %79

79:                                               ; preds = %77, %83
  %80 = phi %"class.WTF::AtomicString"* [ %84, %83 ], [ %72, %77 ]
  %81 = bitcast %"class.WTF::AtomicString"* %80 to i64*
  %82 = load i64, i64* %81, align 8
  switch i64 %82, label %86 [
    i64 -1, label %83
    i64 0, label %83
  ]

83:                                               ; preds = %79, %79
  %84 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %80, i64 1
  %85 = icmp eq %"class.WTF::AtomicString"* %84, %76
  br i1 %85, label %107, label %79

86:                                               ; preds = %79, %77
  %87 = phi %"class.WTF::AtomicString"* [ %72, %77 ], [ %80, %79 ]
  %88 = icmp eq %"class.WTF::AtomicString"* %87, %76
  br i1 %88, label %107, label %89

89:                                               ; preds = %86, %102
  %90 = phi %"class.WTF::AtomicString"* [ %96, %102 ], [ %87, %86 ]
  %91 = call zeroext i1 @_ZNK5blink7Element29HasAttributeIgnoringNamespaceERKN3WTF12AtomicStringE(%"class.blink::Element"* %1, %"class.WTF::AtomicString"* dereferenceable(8) %90) #14
  br i1 %91, label %104, label %92

92:                                               ; preds = %89
  %93 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %90, i64 1
  %94 = icmp eq %"class.WTF::AtomicString"* %93, %76
  br i1 %94, label %107, label %95

95:                                               ; preds = %92, %99
  %96 = phi %"class.WTF::AtomicString"* [ %100, %99 ], [ %93, %92 ]
  %97 = bitcast %"class.WTF::AtomicString"* %96 to i64*
  %98 = load i64, i64* %97, align 8
  switch i64 %98, label %102 [
    i64 -1, label %99
    i64 0, label %99
  ]

99:                                               ; preds = %95, %95
  %100 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %96, i64 1
  %101 = icmp eq %"class.WTF::AtomicString"* %100, %76
  br i1 %101, label %107, label %95

102:                                              ; preds = %95
  %103 = icmp eq %"class.WTF::AtomicString"* %96, %76
  br i1 %103, label %107, label %89

104:                                              ; preds = %89
  %105 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %90, i64 0, i32 0, i32 0, i32 0
  %106 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %105, align 8
  br label %107

107:                                              ; preds = %83, %92, %102, %99, %67, %9, %86, %58, %59, %63, %104
  %108 = phi %"class.WTF::StringImpl"* [ %106, %104 ], [ null, %63 ], [ null, %59 ], [ %11, %58 ], [ null, %86 ], [ null, %9 ], [ null, %67 ], [ null, %99 ], [ null, %102 ], [ null, %92 ], [ null, %83 ]
  ret %"class.WTF::StringImpl"* %108
}

declare zeroext i1 @_ZNK5blink7Element7HasPartEv(%"class.blink::Element"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink15InvalidationSet18InvalidatesTagNameERNS_7ElementE(%"class.blink::InvalidationSet"*, %"class.blink::Element"* dereferenceable(104)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.perfetto::TracedValue", align 8
  %4 = alloca %"class.WTF::AtomicString", align 8
  %5 = alloca %"class.perfetto::TracedValue", align 8
  %6 = alloca %"class.base::trace_event::TraceArguments", align 8
  %7 = alloca %"class.base::TimeTicks", align 8
  %8 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7, i32 0
  %9 = load i8, i8* %8, align 1
  %10 = and i8 %9, 4
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %16

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 4, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %15 = icmp eq %"class.WTF::StringImpl"* %14, null
  br i1 %15, label %195, label %16

16:                                               ; preds = %12, %2
  %17 = tail call %"class.WTF::StringImpl"* @_ZNK5blink7Element28LocalNameForSelectorMatchingEv(%"class.blink::Element"* %1) #14
  %18 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 4
  %19 = load i8, i8* %8, align 1
  %20 = and i8 %19, 4
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %78, label %22

22:                                               ; preds = %16
  %23 = bitcast %"union.blink::InvalidationSet::Backing.2"* %18 to %"class.WTF::HashSet"**
  %24 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %23, align 8
  %25 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %24, i64 0, i32 0, i32 0
  %26 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %25, align 8
  %27 = icmp eq %"class.WTF::AtomicString"* %26, null
  br i1 %27, label %75, label %28

28:                                               ; preds = %22
  %29 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %24, i64 0, i32 0, i32 1
  %30 = load i32, i32* %29, align 8
  %31 = add i32 %30, -1
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = lshr i32 %34, 8
  %36 = and i32 %35, %31
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %26, i64 %37
  %39 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %38, i64 0, i32 0, i32 0, i32 0
  %40 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  %41 = icmp eq %"class.WTF::StringImpl"* %40, null
  br i1 %41, label %75, label %42

42:                                               ; preds = %28
  %43 = xor i32 %35, -1
  %44 = lshr i32 %34, 31
  %45 = add nsw i32 %44, %43
  %46 = shl i32 %45, 12
  %47 = xor i32 %46, %45
  %48 = lshr i32 %47, 7
  %49 = xor i32 %48, %47
  %50 = shl i32 %49, 2
  %51 = xor i32 %50, %49
  %52 = lshr i32 %51, 20
  %53 = xor i32 %52, %51
  %54 = or i32 %53, 1
  %55 = zext i32 %54 to i64
  br label %56

56:                                               ; preds = %66, %42
  %57 = phi %"class.WTF::StringImpl"* [ %40, %42 ], [ %73, %66 ]
  %58 = phi %"class.WTF::AtomicString"* [ %38, %42 ], [ %71, %66 ]
  %59 = phi i64 [ %37, %42 ], [ %70, %66 ]
  %60 = phi i64 [ 0, %42 ], [ %68, %66 ]
  %61 = bitcast %"class.WTF::AtomicString"* %58 to i8**
  %62 = load i8*, i8** %61, align 8
  %63 = icmp ne i8* %62, inttoptr (i64 -1 to i8*)
  %64 = icmp eq %"class.WTF::StringImpl"* %57, %17
  %65 = and i1 %64, %63
  br i1 %65, label %75, label %66

66:                                               ; preds = %56
  %67 = icmp eq i64 %60, 0
  %68 = select i1 %67, i64 %55, i64 %60
  %69 = add i64 %68, %59
  %70 = and i64 %69, %32
  %71 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %26, i64 %70
  %72 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %71, i64 0, i32 0, i32 0, i32 0
  %73 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %72, align 8
  %74 = icmp eq %"class.WTF::StringImpl"* %73, null
  br i1 %74, label %75, label %56

75:                                               ; preds = %66, %56, %28, %22
  %76 = phi %"class.WTF::AtomicString"* [ null, %22 ], [ null, %28 ], [ %58, %56 ], [ null, %66 ]
  %77 = icmp ne %"class.WTF::AtomicString"* %76, null
  br label %84

78:                                               ; preds = %16
  %79 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.2", %"union.blink::InvalidationSet::Backing.2"* %18, i64 0, i32 0
  %80 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %79, align 8
  %81 = icmp eq %"class.WTF::StringImpl"* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %78
  %83 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %17, %"class.WTF::StringImpl"* nonnull %80) #14
  br label %84

84:                                               ; preds = %75, %78, %82
  %85 = phi i1 [ false, %78 ], [ %83, %82 ], [ %77, %75 ]
  %86 = icmp eq %"class.WTF::StringImpl"* %17, null
  br i1 %86, label %100, label %87

87:                                               ; preds = %84
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = load atomic i32, i32* %88 monotonic, align 4
  %90 = and i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 0
  %93 = load i32, i32* %92, align 4
  br i1 %91, label %94, label %96

94:                                               ; preds = %87
  %95 = add i32 %93, -1
  store i32 %95, i32* %92, align 4
  br label %96

96:                                               ; preds = %94, %87
  %97 = phi i32 [ %95, %94 ], [ %93, %87 ]
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %100

99:                                               ; preds = %96
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %17) #14
  br i1 %85, label %101, label %195

100:                                              ; preds = %96, %84
  br i1 %85, label %101, label %195

101:                                              ; preds = %99, %100
  %102 = load i8*, i8** @_ZN5blinkL17g_tracing_enabledE, align 8
  %103 = load i8, i8* %102, align 1
  %104 = icmp eq i8 %103, 0
  br i1 %104, label %195, label %105, !prof !27

105:                                              ; preds = %101
  %106 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 171, i32 0), align 16
  %107 = and i8 %106, 25
  %108 = icmp eq i8 %107, 0
  br i1 %108, label %195, label %109, !prof !27

109:                                              ; preds = %105
  %110 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #14
  %111 = bitcast %"class.base::TimeTicks"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %111) #14
  %112 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %7, i64 0, i32 0, i32 0
  %113 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #14
  store i64 %113, i64* %112, align 8
  %114 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %6, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %114) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %114, i8 -86, i64 40, i1 false) #14
  store i8 1, i8* %114, align 8
  %115 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %6, i64 0, i32 1, i64 0
  store i8 9, i8* %115, align 1
  %116 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %6, i64 0, i32 2, i64 0
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i8** %116, align 8
  %117 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %6, i64 0, i32 3, i64 0
  %118 = bitcast %"class.perfetto::TracedValue"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %118) #14
  %119 = tail call i8* @_Znwm(i64 192) #15
  %120 = bitcast i8* %119 to %"class.protozero::ScatteredHeapBuffer"*
  tail call void @_ZN9protozero19ScatteredHeapBufferC1Emm(%"class.protozero::ScatteredHeapBuffer"* nonnull %120, i64 4096, i64 4096) #14
  %121 = getelementptr inbounds i8, i8* %119, i64 80
  %122 = bitcast i8* %121 to %"class.protozero::ScatteredStreamWriter"*
  %123 = bitcast i8* %119 to %"class.protozero::ScatteredStreamWriter::Delegate"*
  tail call void @_ZN9protozero21ScatteredStreamWriterC1EPNS0_8DelegateE(%"class.protozero::ScatteredStreamWriter"* %122, %"class.protozero::ScatteredStreamWriter::Delegate"* nonnull %123) #14
  %124 = getelementptr inbounds i8, i8* %119, i64 120
  %125 = getelementptr inbounds i8, i8* %119, i64 168
  %126 = bitcast i8* %125 to %"class.protozero::MessageArena"*
  tail call void @_ZN9protozero12MessageArenaC1Ev(%"class.protozero::MessageArena"* %126) #14
  %127 = bitcast i8* %124 to %"class.protozero::Message"*
  tail call void @_ZN9protozero7Message5ResetEPNS_21ScatteredStreamWriterEPNS_12MessageArenaE(%"class.protozero::Message"* %127, %"class.protozero::ScatteredStreamWriter"* null, %"class.protozero::MessageArena"* %126) #14
  %128 = getelementptr inbounds i8, i8* %119, i64 24
  %129 = bitcast i8* %128 to i8**
  store i8* %121, i8** %129, align 8
  %130 = bitcast i8* %125 to %"class.std::__1::list"*
  tail call void @_ZNSt3__14listIN9protozero12MessageArena5BlockENS_9allocatorIS3_EEE6resizeEm(%"class.std::__1::list"* %130, i64 1) #14
  %131 = bitcast i8* %125 to %"struct.std::__1::__list_node"**
  %132 = load %"struct.std::__1::__list_node"*, %"struct.std::__1::__list_node"** %131, align 8
  %133 = getelementptr inbounds %"struct.std::__1::__list_node", %"struct.std::__1::__list_node"* %132, i64 0, i32 1, i32 1
  store i32 0, i32* %133, align 8
  tail call void @_ZN9protozero7Message5ResetEPNS_21ScatteredStreamWriterEPNS_12MessageArenaE(%"class.protozero::Message"* %127, %"class.protozero::ScatteredStreamWriter"* %122, %"class.protozero::MessageArena"* %126) #14
  %134 = bitcast %"union.base::trace_event::TraceValue"* %117 to i8**
  store i8* %119, i8** %134, align 8
  %135 = bitcast i8* %124 to %"class.perfetto::protos::pbzero::DebugAnnotation"*
  call void @_ZN8perfetto8internal26CreateTracedValueFromProtoEPNS_6protos6pbzero15DebugAnnotationE(%"class.perfetto::TracedValue"* nonnull sret %5, %"class.perfetto::protos::pbzero::DebugAnnotation"* %135) #14
  %136 = bitcast %"class.perfetto::TracedValue"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %136) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %136, i8* nonnull align 8 %118, i64 16, i1 false) #14
  %137 = bitcast %"class.WTF::AtomicString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %137) #14
  %138 = call %"class.WTF::StringImpl"* @_ZNK5blink7Element28LocalNameForSelectorMatchingEv(%"class.blink::Element"* %1) #14
  %139 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %138, %"class.WTF::StringImpl"** %139, align 8
  %140 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0
  call void @_ZN5blink44inspector_style_invalidator_invalidate_event12SelectorPartEN8perfetto11TracedValueERNS_7ElementEPKcRKNS_15InvalidationSetERKN3WTF6StringE(%"class.perfetto::TracedValue"* nonnull %3, %"class.blink::Element"* dereferenceable(104) %1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink44inspector_style_invalidator_invalidate_event30kInvalidationSetMatchedTagNameE, i64 0, i64 0), %"class.blink::InvalidationSet"* dereferenceable(48) %0, %"class.WTF::String"* nonnull dereferenceable(8) %140) #14
  %141 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %139, align 8
  %142 = icmp eq %"class.WTF::StringImpl"* %141, null
  br i1 %142, label %156, label %143

143:                                              ; preds = %109
  %144 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %141, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %145 = load atomic i32, i32* %144 monotonic, align 4
  %146 = and i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %141, i64 0, i32 0
  %149 = load i32, i32* %148, align 4
  br i1 %147, label %150, label %152

150:                                              ; preds = %143
  %151 = add i32 %149, -1
  store i32 %151, i32* %148, align 4
  br label %152

152:                                              ; preds = %150, %143
  %153 = phi i32 [ %151, %150 ], [ %149, %143 ]
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %156

155:                                              ; preds = %152
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %141) #14
  br label %156

156:                                              ; preds = %155, %152, %109
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %137) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %136) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %118) #14
  %157 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 73, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 171, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i8* null, i64 0, i64 0, i32 %110, %"class.base::TimeTicks"* nonnull dereferenceable(8) %7, %"class.base::trace_event::TraceArguments"* nonnull %6, i32 8) #14
  %158 = load i8, i8* %114, align 8
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %194, label %160

160:                                              ; preds = %156, %189
  %161 = phi i64 [ %190, %189 ], [ 0, %156 ]
  %162 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %6, i64 0, i32 1, i64 %161
  %163 = load i8, i8* %162, align 1
  %164 = icmp eq i8 %163, 8
  br i1 %164, label %165, label %176

165:                                              ; preds = %160
  %166 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %6, i64 0, i32 3, i64 %161
  %167 = bitcast %"union.base::trace_event::TraceValue"* %166 to %"class.base::trace_event::ConvertableToTraceFormat"**
  %168 = load %"class.base::trace_event::ConvertableToTraceFormat"*, %"class.base::trace_event::ConvertableToTraceFormat"** %167, align 8
  %169 = icmp eq %"class.base::trace_event::ConvertableToTraceFormat"* %168, null
  br i1 %169, label %189, label %170

170:                                              ; preds = %165
  %171 = bitcast %"class.base::trace_event::ConvertableToTraceFormat"* %168 to void (%"class.base::trace_event::ConvertableToTraceFormat"*)***
  %172 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)**, void (%"class.base::trace_event::ConvertableToTraceFormat"*)*** %171, align 8
  %173 = getelementptr inbounds void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %172, i64 1
  %174 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %173, align 8
  call void %174(%"class.base::trace_event::ConvertableToTraceFormat"* nonnull %168) #14
  %175 = load i8, i8* %162, align 1
  br label %176

176:                                              ; preds = %170, %160
  %177 = phi i8 [ %163, %160 ], [ %175, %170 ]
  %178 = icmp eq i8 %177, 9
  br i1 %178, label %179, label %189

179:                                              ; preds = %176
  %180 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %6, i64 0, i32 3, i64 %161
  %181 = bitcast %"union.base::trace_event::TraceValue"* %180 to %"class.protozero::HeapBuffered"**
  %182 = load %"class.protozero::HeapBuffered"*, %"class.protozero::HeapBuffered"** %181, align 8
  %183 = icmp eq %"class.protozero::HeapBuffered"* %182, null
  br i1 %183, label %189, label %184

184:                                              ; preds = %179
  %185 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %182, i64 0, i32 2, i32 1
  call void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"* %185) #14
  %186 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %182, i64 0, i32 1
  call void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"* %186) #14
  %187 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %182, i64 0, i32 0
  call void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"* %187) #14
  %188 = bitcast %"class.protozero::HeapBuffered"* %182 to i8*
  call void @_ZdlPv(i8* %188) #15
  br label %189

189:                                              ; preds = %184, %179, %176, %165
  %190 = add nuw nsw i64 %161, 1
  %191 = load i8, i8* %114, align 8
  %192 = zext i8 %191 to i64
  %193 = icmp ult i64 %190, %192
  br i1 %193, label %160, label %194

194:                                              ; preds = %189, %156
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %114) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %111) #14
  br label %195

195:                                              ; preds = %12, %99, %100, %101, %105, %194
  %196 = phi i1 [ true, %194 ], [ true, %105 ], [ true, %101 ], [ false, %100 ], [ false, %99 ], [ false, %12 ]
  ret i1 %196
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15InvalidationSet7CombineERKS0_(%"class.blink::InvalidationSet"*, %"class.blink::InvalidationSet"* dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckOpResult", align 8
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = alloca %"class.logging::CheckError", align 8
  %11 = alloca %"class.logging::CheckOpResult", align 8
  %12 = alloca %"class.logging::CheckError", align 8
  %13 = alloca %"class.logging::CheckOpResult", align 8
  %14 = alloca %"class.blink::InvalidationSet"*, align 8
  %15 = alloca %"class.blink::InvalidationSet"*, align 8
  %16 = alloca %"class.logging::CheckError", align 8
  %17 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", align 8
  %18 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", align 8
  %19 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", align 8
  %20 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", align 8
  %21 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", align 8
  %22 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", align 8
  %23 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", align 8
  %24 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", align 8
  %25 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 8
  %26 = load i8, i8* %25, align 2
  %27 = and i8 %26, 8
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %2
  %30 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.3, i64 0, i64 0), i32 172, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0)) #14
  %31 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #14
  br label %32

32:                                               ; preds = %2, %29
  %33 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %1, i64 0, i32 8
  %34 = load i8, i8* %33, align 2
  %35 = and i8 %34, 8
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %41

37:                                               ; preds = %32
  %38 = bitcast %"class.logging::CheckError"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %10, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.3, i64 0, i64 0), i32 173, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5, i64 0, i64 0)) #14
  %39 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %10) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %10) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #14
  %40 = load i8, i8* %33, align 2
  br label %41

41:                                               ; preds = %32, %37
  %42 = phi i8 [ %34, %32 ], [ %40, %37 ]
  %43 = bitcast %"class.logging::CheckOpResult"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43) #14
  %44 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %11, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %44, align 8
  %45 = load i8, i8* %25, align 2
  %46 = and i8 %45, 3
  %47 = and i8 %42, 3
  %48 = bitcast %"class.logging::CheckOpResult"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48)
  %49 = icmp eq i8 %46, %47
  br i1 %49, label %50, label %51

50:                                               ; preds = %41
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48)
  store i8* null, i8** %44, align 8
  br label %62

51:                                               ; preds = %41
  %52 = zext i8 %46 to i32
  %53 = zext i8 %47 to i32
  %54 = call i8* @_ZN7logging15CheckOpValueStrEi(i32 %52) #14
  %55 = call i8* @_ZN7logging15CheckOpValueStrEi(i32 %53) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %8, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i64 0, i64 0), i8* %54, i8* %55) #14
  %56 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %8, i64 0, i32 0
  %57 = load i8*, i8** %56, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48)
  store i8* %57, i8** %44, align 8
  %58 = icmp eq i8* %57, null
  br i1 %58, label %62, label %59

59:                                               ; preds = %51
  %60 = bitcast %"class.logging::CheckError"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %60) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %12, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.3, i64 0, i64 0), i32 174, %"class.logging::CheckOpResult"* nonnull %11) #14
  %61 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %12) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %12) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %60) #14
  br label %62

62:                                               ; preds = %50, %51, %59
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43) #14
  %63 = call %"class.blink::InvalidationSet"* @_ZN5blink15InvalidationSet19SelfInvalidationSetEv() #14
  %64 = icmp eq %"class.blink::InvalidationSet"* %63, %0
  br i1 %64, label %1062, label %65

65:                                               ; preds = %62
  %66 = bitcast %"class.logging::CheckOpResult"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %66) #14
  %67 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %13, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %67, align 8
  %68 = bitcast %"class.blink::InvalidationSet"** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %68) #14
  store %"class.blink::InvalidationSet"* %1, %"class.blink::InvalidationSet"** %14, align 8
  %69 = bitcast %"class.blink::InvalidationSet"** %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #14
  store %"class.blink::InvalidationSet"* %0, %"class.blink::InvalidationSet"** %15, align 8
  %70 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %70)
  %71 = icmp eq %"class.blink::InvalidationSet"* %1, %0
  br i1 %71, label %74, label %72

72:                                               ; preds = %65
  %73 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* null, i8** %73, align 8
  br label %79

74:                                               ; preds = %65
  %75 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %68, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIPKN5blink15InvalidationSetEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS5_14remove_pointerIS7_E4typeEEE5valueEPcE4typeES9_ENUlRNS5_13basic_ostreamIcNS5_11char_traitsIcEEEEPKvE_8__invokeESK_SM_) #14
  %76 = call i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8* nonnull %69, void (%"class.std::__1::basic_ostream"*, i8*)* nonnull @_ZZN7logging15CheckOpValueStrIPN5blink15InvalidationSetEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS4_14remove_pointerIS6_E4typeEEE5valueEPcE4typeES8_ENUlRNS4_13basic_ostreamIcNS4_11char_traitsIcEEEEPKvE_8__invokeESJ_SL_) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %7, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0), i8* %75, i8* %76) #14
  %77 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  %78 = load i8*, i8** %77, align 8
  br label %79

79:                                               ; preds = %72, %74
  %80 = phi i8* [ %78, %74 ], [ null, %72 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %70)
  store i8* %80, i8** %67, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %68) #14
  %81 = icmp eq i8* %80, null
  br i1 %81, label %85, label %82

82:                                               ; preds = %79
  %83 = bitcast %"class.logging::CheckError"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %83) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %16, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.3, i64 0, i64 0), i32 186, %"class.logging::CheckOpResult"* nonnull %13) #14
  %84 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %16) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %16) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %83) #14
  br label %85

85:                                               ; preds = %79, %82
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66) #14
  %86 = icmp eq %"class.blink::InvalidationSet"* %0, null
  br i1 %86, label %149, label %87

87:                                               ; preds = %85
  %88 = load i8, i8* %25, align 2
  %89 = and i8 %88, 3
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %149, label %91

91:                                               ; preds = %87
  %92 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %1, i64 0, i32 9, i64 1
  %93 = bitcast i8* %92 to i32*
  %94 = load i32, i32* %93, align 4
  %95 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 9, i64 1
  %96 = bitcast i8* %95 to i32*
  %97 = load i32, i32* %96, align 4
  %98 = icmp ugt i32 %97, %94
  %99 = select i1 %98, i32 %97, i32 %94
  store i32 %99, i32* %96, align 4
  %100 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %1, i64 1
  %101 = bitcast %"class.blink::InvalidationSet"* %100 to %"class.blink::DescendantInvalidationSet"**
  %102 = load %"class.blink::DescendantInvalidationSet"*, %"class.blink::DescendantInvalidationSet"** %101, align 8
  %103 = icmp eq %"class.blink::DescendantInvalidationSet"* %102, null
  br i1 %103, label %124, label %104

104:                                              ; preds = %91
  %105 = bitcast %"class.blink::DescendantInvalidationSet"* %102 to %"class.blink::InvalidationSet"*
  %106 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 1
  %107 = bitcast %"class.blink::InvalidationSet"* %106 to %"class.blink::DescendantInvalidationSet"**
  %108 = load %"class.blink::DescendantInvalidationSet"*, %"class.blink::DescendantInvalidationSet"** %107, align 8
  %109 = icmp eq %"class.blink::DescendantInvalidationSet"* %108, null
  br i1 %109, label %110, label %120

110:                                              ; preds = %104
  %111 = call noalias i8* @malloc(i64 48) #14
  %112 = bitcast i8* %111 to i32*
  store i32 1, i32* %112, align 4
  %113 = getelementptr inbounds i8, i8* %111, i64 8
  %114 = getelementptr inbounds i8, i8* %111, i64 42
  call void @llvm.memset.p0i8.i64(i8* align 8 %113, i8 0, i64 34, i1 false) #14
  store i8 8, i8* %114, align 2
  %115 = ptrtoint i8* %111 to i64
  %116 = bitcast %"class.blink::InvalidationSet"* %106 to i64*
  store i64 %115, i64* %116, align 8
  %117 = bitcast i8* %111 to %"class.blink::DescendantInvalidationSet"*
  %118 = bitcast %"class.blink::InvalidationSet"* %100 to %"class.blink::InvalidationSet"**
  %119 = load %"class.blink::InvalidationSet"*, %"class.blink::InvalidationSet"** %118, align 8
  br label %120

120:                                              ; preds = %104, %110
  %121 = phi %"class.blink::InvalidationSet"* [ %119, %110 ], [ %105, %104 ]
  %122 = phi %"class.blink::DescendantInvalidationSet"* [ %117, %110 ], [ %108, %104 ]
  %123 = bitcast %"class.blink::DescendantInvalidationSet"* %122 to %"class.blink::InvalidationSet"*
  call void @_ZN5blink15InvalidationSet7CombineERKS0_(%"class.blink::InvalidationSet"* %123, %"class.blink::InvalidationSet"* dereferenceable(48) %121)
  br label %124

124:                                              ; preds = %91, %120
  %125 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %1, i64 1, i32 2
  %126 = bitcast %"union.blink::InvalidationSet::Backing"* %125 to %"class.blink::DescendantInvalidationSet"**
  %127 = load %"class.blink::DescendantInvalidationSet"*, %"class.blink::DescendantInvalidationSet"** %126, align 8
  %128 = icmp eq %"class.blink::DescendantInvalidationSet"* %127, null
  br i1 %128, label %149, label %129

129:                                              ; preds = %124
  %130 = bitcast %"class.blink::DescendantInvalidationSet"* %127 to %"class.blink::InvalidationSet"*
  %131 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 1, i32 2
  %132 = bitcast %"union.blink::InvalidationSet::Backing"* %131 to %"class.blink::DescendantInvalidationSet"**
  %133 = load %"class.blink::DescendantInvalidationSet"*, %"class.blink::DescendantInvalidationSet"** %132, align 8
  %134 = icmp eq %"class.blink::DescendantInvalidationSet"* %133, null
  br i1 %134, label %135, label %145

135:                                              ; preds = %129
  %136 = call noalias i8* @malloc(i64 48) #14
  %137 = bitcast i8* %136 to i32*
  store i32 1, i32* %137, align 4
  %138 = getelementptr inbounds i8, i8* %136, i64 8
  %139 = getelementptr inbounds i8, i8* %136, i64 42
  call void @llvm.memset.p0i8.i64(i8* align 8 %138, i8 0, i64 34, i1 false) #14
  store i8 8, i8* %139, align 2
  %140 = ptrtoint i8* %136 to i64
  %141 = bitcast %"union.blink::InvalidationSet::Backing"* %131 to i64*
  store i64 %140, i64* %141, align 8
  %142 = bitcast i8* %136 to %"class.blink::DescendantInvalidationSet"*
  %143 = bitcast %"union.blink::InvalidationSet::Backing"* %125 to %"class.blink::InvalidationSet"**
  %144 = load %"class.blink::InvalidationSet"*, %"class.blink::InvalidationSet"** %143, align 8
  br label %145

145:                                              ; preds = %129, %135
  %146 = phi %"class.blink::InvalidationSet"* [ %144, %135 ], [ %130, %129 ]
  %147 = phi %"class.blink::DescendantInvalidationSet"* [ %142, %135 ], [ %133, %129 ]
  %148 = bitcast %"class.blink::DescendantInvalidationSet"* %147 to %"class.blink::InvalidationSet"*
  call void @_ZN5blink15InvalidationSet7CombineERKS0_(%"class.blink::InvalidationSet"* %148, %"class.blink::InvalidationSet"* dereferenceable(48) %146)
  br label %149

149:                                              ; preds = %87, %85, %145, %124
  %150 = load i8, i8* %33, align 2
  %151 = and i8 %150, 4
  %152 = icmp eq i8 %151, 0
  br i1 %152, label %158, label %153

153:                                              ; preds = %149
  %154 = load i8, i8* %25, align 2
  %155 = or i8 %154, 4
  store i8 %155, i8* %25, align 2
  %156 = call %"class.blink::InvalidationSet"* @_ZN5blink15InvalidationSet19SelfInvalidationSetEv() #14
  %157 = icmp eq %"class.blink::InvalidationSet"* %156, %1
  br i1 %157, label %1062, label %158

158:                                              ; preds = %149, %153
  %159 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 6, i32 0
  %160 = load i8, i8* %159, align 1
  %161 = and i8 %160, 2
  %162 = icmp eq i8 %161, 0
  br i1 %162, label %163, label %1062

163:                                              ; preds = %158
  %164 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %1, i64 0, i32 6, i32 0
  %165 = load i8, i8* %164, align 1
  %166 = and i8 %165, 2
  %167 = icmp eq i8 %166, 0
  br i1 %167, label %176, label %168

168:                                              ; preds = %163
  %169 = and i8 %160, -64
  %170 = or i8 %169, 2
  store i8 %170, i8* %159, align 1
  %171 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 2
  %172 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7
  call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5ClearERNS0_12BackingFlagsE(%"union.blink::InvalidationSet::Backing"* %171, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %172) #14
  %173 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 3
  call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5ClearERNS0_12BackingFlagsE(%"union.blink::InvalidationSet::Backing.1"* %173, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %172) #14
  %174 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 4
  call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5ClearERNS0_12BackingFlagsE(%"union.blink::InvalidationSet::Backing.2"* %174, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %172) #14
  %175 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 5
  call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5ClearERNS0_12BackingFlagsE(%"union.blink::InvalidationSet::Backing.3"* %175, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %172) #14
  br label %1062

176:                                              ; preds = %163
  %177 = and i8 %165, 1
  %178 = icmp eq i8 %177, 0
  br i1 %178, label %182, label %179

179:                                              ; preds = %176
  %180 = or i8 %160, 1
  store i8 %180, i8* %159, align 1
  %181 = load i8, i8* %164, align 1
  br label %182

182:                                              ; preds = %176, %179
  %183 = phi i8 [ %160, %176 ], [ %180, %179 ]
  %184 = phi i8 [ %165, %176 ], [ %181, %179 ]
  %185 = and i8 %184, 4
  %186 = icmp eq i8 %185, 0
  br i1 %186, label %190, label %187

187:                                              ; preds = %182
  %188 = or i8 %183, 4
  store i8 %188, i8* %159, align 1
  %189 = load i8, i8* %164, align 1
  br label %190

190:                                              ; preds = %182, %187
  %191 = phi i8 [ %183, %182 ], [ %188, %187 ]
  %192 = phi i8 [ %184, %182 ], [ %189, %187 ]
  %193 = and i8 %192, 8
  %194 = icmp eq i8 %193, 0
  br i1 %194, label %198, label %195

195:                                              ; preds = %190
  %196 = or i8 %191, 8
  store i8 %196, i8* %159, align 1
  %197 = load i8, i8* %164, align 1
  br label %198

198:                                              ; preds = %190, %195
  %199 = phi i8 [ %191, %190 ], [ %196, %195 ]
  %200 = phi i8 [ %192, %190 ], [ %197, %195 ]
  %201 = and i8 %200, 16
  %202 = icmp eq i8 %201, 0
  br i1 %202, label %206, label %203

203:                                              ; preds = %198
  %204 = or i8 %199, 16
  store i8 %204, i8* %159, align 1
  %205 = load i8, i8* %164, align 1
  br label %206

206:                                              ; preds = %198, %203
  %207 = phi i8 [ %199, %198 ], [ %204, %203 ]
  %208 = phi i8 [ %200, %198 ], [ %205, %203 ]
  %209 = and i8 %208, 32
  %210 = icmp eq i8 %209, 0
  br i1 %210, label %213, label %211

211:                                              ; preds = %206
  %212 = or i8 %207, 32
  store i8 %212, i8* %159, align 1
  br label %213

213:                                              ; preds = %206, %211
  %214 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %214) #14
  %215 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %1, i64 0, i32 2
  %216 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %1, i64 0, i32 7
  call void @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5ItemsERKNS0_12BackingFlagsE(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* nonnull sret %17, %"union.blink::InvalidationSet::Backing"* %215, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %216) #14
  %217 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %217) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %217, i8 -86, i64 32, i1 false)
  %218 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %18, i64 0, i32 0
  %219 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %17, i64 0, i32 0, i32 0
  %220 = load i32, i32* %219, align 8, !noalias !28
  store i32 %220, i32* %218, align 8, !alias.scope !28
  %221 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %17, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %222 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %221, align 8, !noalias !28
  %223 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %18, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %222, %"class.WTF::StringImpl"** %223, align 8, !alias.scope !28
  %224 = icmp eq %"class.WTF::StringImpl"* %222, null
  br i1 %224, label %242, label %225

225:                                              ; preds = %213
  %226 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %222, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %227 = load atomic i32, i32* %226 monotonic, align 4, !noalias !28
  %228 = and i32 %227, 2
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %230, label %242

230:                                              ; preds = %225
  %231 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %222, i64 0, i32 0
  %232 = load i32, i32* %231, align 4, !noalias !28
  %233 = zext i32 %232 to i33
  %234 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %233, i33 1) #14
  %235 = extractvalue { i33, i1 } %234, 1
  %236 = extractvalue { i33, i1 } %234, 0
  %237 = icmp slt i33 %236, 0
  %238 = or i1 %235, %237
  br i1 %238, label %239, label %240, !prof !5

239:                                              ; preds = %230
  call void @llvm.trap() #14, !noalias !28
  unreachable

240:                                              ; preds = %230
  %241 = trunc i33 %236 to i32
  store i32 %241, i32* %231, align 4, !noalias !28
  br label %242

242:                                              ; preds = %213, %225, %240
  %243 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %18, i64 0, i32 2
  %244 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %17, i64 0, i32 0, i32 2
  %245 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %243 to i8*
  %246 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %244 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %245, i8* align 8 %246, i64 16, i1 false) #14
  %247 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %17, i64 0, i32 1, i32 0
  %248 = load i32, i32* %247, align 8, !noalias !31
  %249 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %17, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %250 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %249, align 8, !noalias !31
  %251 = icmp eq %"class.WTF::StringImpl"* %250, null
  br i1 %251, label %269, label %252

252:                                              ; preds = %242
  %253 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %250, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %254 = load atomic i32, i32* %253 monotonic, align 4, !noalias !31
  %255 = and i32 %254, 2
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %257, label %269

257:                                              ; preds = %252
  %258 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %250, i64 0, i32 0
  %259 = load i32, i32* %258, align 4, !noalias !31
  %260 = zext i32 %259 to i33
  %261 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %260, i33 1) #14
  %262 = extractvalue { i33, i1 } %261, 1
  %263 = extractvalue { i33, i1 } %261, 0
  %264 = icmp slt i33 %263, 0
  %265 = or i1 %262, %264
  br i1 %265, label %266, label %267, !prof !5

266:                                              ; preds = %257
  call void @llvm.trap() #14, !noalias !31
  unreachable

267:                                              ; preds = %257
  %268 = trunc i33 %263 to i32
  store i32 %268, i32* %258, align 4, !noalias !31
  br label %269

269:                                              ; preds = %242, %252, %267
  %270 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %17, i64 0, i32 1, i32 2, i32 0, i32 0
  %271 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %270, align 8
  %272 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %18, i64 0, i32 2, i32 0, i32 0
  %273 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %18, i64 0, i32 1
  %274 = bitcast %"class.logging::CheckError"* %3 to i8*
  %275 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 2
  %276 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7
  %277 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %18, i64 0, i32 2, i32 0, i32 1
  %278 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %279 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %278, i64 0, i32 0, i32 0, i32 0
  %280 = bitcast %"class.WTF::AtomicString"* %273 to i64*
  %281 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %273, i64 0, i32 0, i32 0, i32 0
  %282 = icmp eq i32 %248, 0
  br label %283

283:                                              ; preds = %468, %269
  %284 = load i32, i32* %218, align 8
  %285 = icmp eq i32 %284, %248
  br i1 %285, label %288, label %286

286:                                              ; preds = %283
  %287 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %272, align 8
  br label %422

288:                                              ; preds = %283
  %289 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %223, align 8
  %290 = icmp eq %"class.WTF::StringImpl"* %289, %250
  %291 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %272, align 8
  %292 = icmp eq %"class.WTF::AtomicString"* %291, %271
  %293 = select i1 %282, i1 %290, i1 %292
  br i1 %293, label %294, label %422

294:                                              ; preds = %288
  br i1 %251, label %308, label %295

295:                                              ; preds = %294
  %296 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %250, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %297 = load atomic i32, i32* %296 monotonic, align 4
  %298 = and i32 %297, 2
  %299 = icmp eq i32 %298, 0
  %300 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %250, i64 0, i32 0
  %301 = load i32, i32* %300, align 4
  br i1 %299, label %302, label %304

302:                                              ; preds = %295
  %303 = add i32 %301, -1
  store i32 %303, i32* %300, align 4
  br label %304

304:                                              ; preds = %302, %295
  %305 = phi i32 [ %303, %302 ], [ %301, %295 ]
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %307, label %308

307:                                              ; preds = %304
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %250) #14
  br label %308

308:                                              ; preds = %294, %304, %307
  %309 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %223, align 8
  %310 = icmp eq %"class.WTF::StringImpl"* %309, null
  br i1 %310, label %324, label %311

311:                                              ; preds = %308
  %312 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %309, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %313 = load atomic i32, i32* %312 monotonic, align 4
  %314 = and i32 %313, 2
  %315 = icmp eq i32 %314, 0
  %316 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %309, i64 0, i32 0
  %317 = load i32, i32* %316, align 4
  br i1 %315, label %318, label %320

318:                                              ; preds = %311
  %319 = add i32 %317, -1
  store i32 %319, i32* %316, align 4
  br label %320

320:                                              ; preds = %318, %311
  %321 = phi i32 [ %319, %318 ], [ %317, %311 ]
  %322 = icmp eq i32 %321, 0
  br i1 %322, label %323, label %324

323:                                              ; preds = %320
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %309) #14
  br label %324

324:                                              ; preds = %308, %320, %323
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %217) #14
  %325 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %249, align 8
  %326 = icmp eq %"class.WTF::StringImpl"* %325, null
  br i1 %326, label %340, label %327

327:                                              ; preds = %324
  %328 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %325, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %329 = load atomic i32, i32* %328 monotonic, align 4
  %330 = and i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %325, i64 0, i32 0
  %333 = load i32, i32* %332, align 4
  br i1 %331, label %334, label %336

334:                                              ; preds = %327
  %335 = add i32 %333, -1
  store i32 %335, i32* %332, align 4
  br label %336

336:                                              ; preds = %334, %327
  %337 = phi i32 [ %335, %334 ], [ %333, %327 ]
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %339, label %340

339:                                              ; preds = %336
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %325) #14
  br label %340

340:                                              ; preds = %339, %336, %324
  %341 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %221, align 8
  %342 = icmp eq %"class.WTF::StringImpl"* %341, null
  br i1 %342, label %356, label %343

343:                                              ; preds = %340
  %344 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %341, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %345 = load atomic i32, i32* %344 monotonic, align 4
  %346 = and i32 %345, 2
  %347 = icmp eq i32 %346, 0
  %348 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %341, i64 0, i32 0
  %349 = load i32, i32* %348, align 4
  br i1 %347, label %350, label %352

350:                                              ; preds = %343
  %351 = add i32 %349, -1
  store i32 %351, i32* %348, align 4
  br label %352

352:                                              ; preds = %350, %343
  %353 = phi i32 [ %351, %350 ], [ %349, %343 ]
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %355, label %356

355:                                              ; preds = %352
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %341) #14
  br label %356

356:                                              ; preds = %340, %352, %355
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %214) #14
  %357 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %357) #14
  %358 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %1, i64 0, i32 3
  call void @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5ItemsERKNS0_12BackingFlagsE(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* nonnull sret %19, %"union.blink::InvalidationSet::Backing.1"* %358, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %216) #14
  %359 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %359) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %359, i8 -86, i64 32, i1 false)
  %360 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %20, i64 0, i32 0
  %361 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %19, i64 0, i32 0, i32 0
  %362 = load i32, i32* %361, align 8, !noalias !34
  store i32 %362, i32* %360, align 8, !alias.scope !34
  %363 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %19, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %364 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %363, align 8, !noalias !34
  %365 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %20, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %364, %"class.WTF::StringImpl"** %365, align 8, !alias.scope !34
  %366 = icmp eq %"class.WTF::StringImpl"* %364, null
  br i1 %366, label %384, label %367

367:                                              ; preds = %356
  %368 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %364, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %369 = load atomic i32, i32* %368 monotonic, align 4, !noalias !34
  %370 = and i32 %369, 2
  %371 = icmp eq i32 %370, 0
  br i1 %371, label %372, label %384

372:                                              ; preds = %367
  %373 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %364, i64 0, i32 0
  %374 = load i32, i32* %373, align 4, !noalias !34
  %375 = zext i32 %374 to i33
  %376 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %375, i33 1) #14
  %377 = extractvalue { i33, i1 } %376, 1
  %378 = extractvalue { i33, i1 } %376, 0
  %379 = icmp slt i33 %378, 0
  %380 = or i1 %377, %379
  br i1 %380, label %381, label %382, !prof !5

381:                                              ; preds = %372
  call void @llvm.trap() #14, !noalias !34
  unreachable

382:                                              ; preds = %372
  %383 = trunc i33 %378 to i32
  store i32 %383, i32* %373, align 4, !noalias !34
  br label %384

384:                                              ; preds = %356, %367, %382
  %385 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %20, i64 0, i32 2
  %386 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %19, i64 0, i32 0, i32 2
  %387 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %385 to i8*
  %388 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %386 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %387, i8* align 8 %388, i64 16, i1 false) #14
  %389 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %19, i64 0, i32 1, i32 0
  %390 = load i32, i32* %389, align 8, !noalias !37
  %391 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %19, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %392 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %391, align 8, !noalias !37
  %393 = icmp eq %"class.WTF::StringImpl"* %392, null
  br i1 %393, label %411, label %394

394:                                              ; preds = %384
  %395 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %392, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %396 = load atomic i32, i32* %395 monotonic, align 4, !noalias !37
  %397 = and i32 %396, 2
  %398 = icmp eq i32 %397, 0
  br i1 %398, label %399, label %411

399:                                              ; preds = %394
  %400 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %392, i64 0, i32 0
  %401 = load i32, i32* %400, align 4, !noalias !37
  %402 = zext i32 %401 to i33
  %403 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %402, i33 1) #14
  %404 = extractvalue { i33, i1 } %403, 1
  %405 = extractvalue { i33, i1 } %403, 0
  %406 = icmp slt i33 %405, 0
  %407 = or i1 %404, %406
  br i1 %407, label %408, label %409, !prof !5

408:                                              ; preds = %399
  call void @llvm.trap() #14, !noalias !37
  unreachable

409:                                              ; preds = %399
  %410 = trunc i33 %405 to i32
  store i32 %410, i32* %400, align 4, !noalias !37
  br label %411

411:                                              ; preds = %384, %394, %409
  %412 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %19, i64 0, i32 1, i32 2, i32 0, i32 0
  %413 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %412, align 8
  %414 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %20, i64 0, i32 2, i32 0, i32 0
  %415 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %20, i64 0, i32 1
  %416 = bitcast %"class.logging::CheckError"* %4 to i8*
  %417 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 3
  %418 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %20, i64 0, i32 2, i32 0, i32 1
  %419 = bitcast %"class.WTF::AtomicString"* %415 to i64*
  %420 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %415, i64 0, i32 0, i32 0, i32 0
  %421 = icmp eq i32 %390, 0
  br label %494

422:                                              ; preds = %286, %288
  %423 = phi %"class.WTF::AtomicString"* [ %287, %286 ], [ %291, %288 ]
  %424 = icmp eq i32 %284, 0
  %425 = select i1 %424, %"class.WTF::AtomicString"* %273, %"class.WTF::AtomicString"* %423
  %426 = load i8, i8* %159, align 1
  %427 = and i8 %426, 2
  %428 = icmp eq i8 %427, 0
  br i1 %428, label %429, label %441

429:                                              ; preds = %422
  %430 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %425, i64 0, i32 0, i32 0, i32 0
  %431 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %430, align 8
  %432 = icmp eq %"class.WTF::StringImpl"* %431, null
  br i1 %432, label %437, label %433

433:                                              ; preds = %429
  %434 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %431, i64 0, i32 1
  %435 = load i32, i32* %434, align 4
  %436 = icmp eq i32 %435, 0
  br i1 %436, label %437, label %439

437:                                              ; preds = %433, %429
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %274) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.3, i64 0, i64 0), i32 303, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.14, i64 0, i64 0)) #14
  %438 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %274) #14
  br label %439

439:                                              ; preds = %437, %433
  call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE3AddERNS0_12BackingFlagsERKN3WTF12AtomicStringE(%"union.blink::InvalidationSet::Backing"* %275, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %276, %"class.WTF::AtomicString"* dereferenceable(8) %425) #14
  %440 = load i32, i32* %218, align 8
  br label %441

441:                                              ; preds = %422, %439
  %442 = phi i32 [ %284, %422 ], [ %440, %439 ]
  %443 = icmp eq i32 %442, 0
  br i1 %443, label %444, label %482

444:                                              ; preds = %441
  %445 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %279, align 8
  %446 = icmp eq %"class.WTF::StringImpl"* %445, null
  br i1 %446, label %464, label %447

447:                                              ; preds = %444
  %448 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %445, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %449 = load atomic i32, i32* %448 monotonic, align 4
  %450 = and i32 %449, 2
  %451 = icmp eq i32 %450, 0
  br i1 %451, label %452, label %464

452:                                              ; preds = %447
  %453 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %445, i64 0, i32 0
  %454 = load i32, i32* %453, align 4
  %455 = zext i32 %454 to i33
  %456 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %455, i33 1) #14
  %457 = extractvalue { i33, i1 } %456, 1
  %458 = extractvalue { i33, i1 } %456, 0
  %459 = icmp slt i33 %458, 0
  %460 = or i1 %457, %459
  br i1 %460, label %461, label %462, !prof !5

461:                                              ; preds = %452
  call void @llvm.trap() #14
  unreachable

462:                                              ; preds = %452
  %463 = trunc i33 %458 to i32
  store i32 %463, i32* %453, align 4
  br label %464

464:                                              ; preds = %462, %447, %444
  %465 = ptrtoint %"class.WTF::StringImpl"* %445 to i64
  %466 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %281, align 8
  store i64 %465, i64* %280, align 8
  %467 = icmp eq %"class.WTF::StringImpl"* %466, null
  br i1 %467, label %468, label %469

468:                                              ; preds = %491, %487, %464, %478, %481, %482
  br label %283

469:                                              ; preds = %464
  %470 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %466, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %471 = load atomic i32, i32* %470 monotonic, align 4
  %472 = and i32 %471, 2
  %473 = icmp eq i32 %472, 0
  %474 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %466, i64 0, i32 0
  %475 = load i32, i32* %474, align 4
  br i1 %473, label %476, label %478

476:                                              ; preds = %469
  %477 = add i32 %475, -1
  store i32 %477, i32* %474, align 4
  br label %478

478:                                              ; preds = %476, %469
  %479 = phi i32 [ %477, %476 ], [ %475, %469 ]
  %480 = icmp eq i32 %479, 0
  br i1 %480, label %481, label %468

481:                                              ; preds = %478
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %466) #14
  br label %468

482:                                              ; preds = %441
  %483 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %272, align 8
  %484 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %483, i64 1
  store %"class.WTF::AtomicString"* %484, %"class.WTF::AtomicString"** %272, align 8
  %485 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %277, align 8
  %486 = icmp eq %"class.WTF::AtomicString"* %484, %485
  br i1 %486, label %468, label %487

487:                                              ; preds = %482, %491
  %488 = phi %"class.WTF::AtomicString"* [ %492, %491 ], [ %484, %482 ]
  %489 = bitcast %"class.WTF::AtomicString"* %488 to i64*
  %490 = load i64, i64* %489, align 8
  switch i64 %490, label %468 [
    i64 -1, label %491
    i64 0, label %491
  ]

491:                                              ; preds = %487, %487
  %492 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %488, i64 1
  store %"class.WTF::AtomicString"* %492, %"class.WTF::AtomicString"** %272, align 8
  %493 = icmp eq %"class.WTF::AtomicString"* %492, %485
  br i1 %493, label %468, label %487

494:                                              ; preds = %679, %411
  %495 = load i32, i32* %360, align 8
  %496 = icmp eq i32 %495, %390
  br i1 %496, label %499, label %497

497:                                              ; preds = %494
  %498 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %414, align 8
  br label %633

499:                                              ; preds = %494
  %500 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %365, align 8
  %501 = icmp eq %"class.WTF::StringImpl"* %500, %392
  %502 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %414, align 8
  %503 = icmp eq %"class.WTF::AtomicString"* %502, %413
  %504 = select i1 %421, i1 %501, i1 %503
  br i1 %504, label %505, label %633

505:                                              ; preds = %499
  br i1 %393, label %519, label %506

506:                                              ; preds = %505
  %507 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %392, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %508 = load atomic i32, i32* %507 monotonic, align 4
  %509 = and i32 %508, 2
  %510 = icmp eq i32 %509, 0
  %511 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %392, i64 0, i32 0
  %512 = load i32, i32* %511, align 4
  br i1 %510, label %513, label %515

513:                                              ; preds = %506
  %514 = add i32 %512, -1
  store i32 %514, i32* %511, align 4
  br label %515

515:                                              ; preds = %513, %506
  %516 = phi i32 [ %514, %513 ], [ %512, %506 ]
  %517 = icmp eq i32 %516, 0
  br i1 %517, label %518, label %519

518:                                              ; preds = %515
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %392) #14
  br label %519

519:                                              ; preds = %505, %515, %518
  %520 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %365, align 8
  %521 = icmp eq %"class.WTF::StringImpl"* %520, null
  br i1 %521, label %535, label %522

522:                                              ; preds = %519
  %523 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %520, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %524 = load atomic i32, i32* %523 monotonic, align 4
  %525 = and i32 %524, 2
  %526 = icmp eq i32 %525, 0
  %527 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %520, i64 0, i32 0
  %528 = load i32, i32* %527, align 4
  br i1 %526, label %529, label %531

529:                                              ; preds = %522
  %530 = add i32 %528, -1
  store i32 %530, i32* %527, align 4
  br label %531

531:                                              ; preds = %529, %522
  %532 = phi i32 [ %530, %529 ], [ %528, %522 ]
  %533 = icmp eq i32 %532, 0
  br i1 %533, label %534, label %535

534:                                              ; preds = %531
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %520) #14
  br label %535

535:                                              ; preds = %519, %531, %534
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %359) #14
  %536 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %391, align 8
  %537 = icmp eq %"class.WTF::StringImpl"* %536, null
  br i1 %537, label %551, label %538

538:                                              ; preds = %535
  %539 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %536, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %540 = load atomic i32, i32* %539 monotonic, align 4
  %541 = and i32 %540, 2
  %542 = icmp eq i32 %541, 0
  %543 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %536, i64 0, i32 0
  %544 = load i32, i32* %543, align 4
  br i1 %542, label %545, label %547

545:                                              ; preds = %538
  %546 = add i32 %544, -1
  store i32 %546, i32* %543, align 4
  br label %547

547:                                              ; preds = %545, %538
  %548 = phi i32 [ %546, %545 ], [ %544, %538 ]
  %549 = icmp eq i32 %548, 0
  br i1 %549, label %550, label %551

550:                                              ; preds = %547
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %536) #14
  br label %551

551:                                              ; preds = %550, %547, %535
  %552 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %363, align 8
  %553 = icmp eq %"class.WTF::StringImpl"* %552, null
  br i1 %553, label %567, label %554

554:                                              ; preds = %551
  %555 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %552, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %556 = load atomic i32, i32* %555 monotonic, align 4
  %557 = and i32 %556, 2
  %558 = icmp eq i32 %557, 0
  %559 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %552, i64 0, i32 0
  %560 = load i32, i32* %559, align 4
  br i1 %558, label %561, label %563

561:                                              ; preds = %554
  %562 = add i32 %560, -1
  store i32 %562, i32* %559, align 4
  br label %563

563:                                              ; preds = %561, %554
  %564 = phi i32 [ %562, %561 ], [ %560, %554 ]
  %565 = icmp eq i32 %564, 0
  br i1 %565, label %566, label %567

566:                                              ; preds = %563
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %552) #14
  br label %567

567:                                              ; preds = %551, %563, %566
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %357) #14
  %568 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %568) #14
  %569 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %1, i64 0, i32 4
  call void @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5ItemsERKNS0_12BackingFlagsE(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* nonnull sret %21, %"union.blink::InvalidationSet::Backing.2"* %569, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %216) #14
  %570 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %570) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %570, i8 -86, i64 32, i1 false)
  %571 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %22, i64 0, i32 0
  %572 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %21, i64 0, i32 0, i32 0
  %573 = load i32, i32* %572, align 8, !noalias !40
  store i32 %573, i32* %571, align 8, !alias.scope !40
  %574 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %21, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %575 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %574, align 8, !noalias !40
  %576 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %22, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %575, %"class.WTF::StringImpl"** %576, align 8, !alias.scope !40
  %577 = icmp eq %"class.WTF::StringImpl"* %575, null
  br i1 %577, label %595, label %578

578:                                              ; preds = %567
  %579 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %575, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %580 = load atomic i32, i32* %579 monotonic, align 4, !noalias !40
  %581 = and i32 %580, 2
  %582 = icmp eq i32 %581, 0
  br i1 %582, label %583, label %595

583:                                              ; preds = %578
  %584 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %575, i64 0, i32 0
  %585 = load i32, i32* %584, align 4, !noalias !40
  %586 = zext i32 %585 to i33
  %587 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %586, i33 1) #14
  %588 = extractvalue { i33, i1 } %587, 1
  %589 = extractvalue { i33, i1 } %587, 0
  %590 = icmp slt i33 %589, 0
  %591 = or i1 %588, %590
  br i1 %591, label %592, label %593, !prof !5

592:                                              ; preds = %583
  call void @llvm.trap() #14, !noalias !40
  unreachable

593:                                              ; preds = %583
  %594 = trunc i33 %589 to i32
  store i32 %594, i32* %584, align 4, !noalias !40
  br label %595

595:                                              ; preds = %567, %578, %593
  %596 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %22, i64 0, i32 2
  %597 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %21, i64 0, i32 0, i32 2
  %598 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %596 to i8*
  %599 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %597 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %598, i8* align 8 %599, i64 16, i1 false) #14
  %600 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %21, i64 0, i32 1, i32 0
  %601 = load i32, i32* %600, align 8, !noalias !43
  %602 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %21, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %603 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %602, align 8, !noalias !43
  %604 = icmp eq %"class.WTF::StringImpl"* %603, null
  br i1 %604, label %622, label %605

605:                                              ; preds = %595
  %606 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %603, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %607 = load atomic i32, i32* %606 monotonic, align 4, !noalias !43
  %608 = and i32 %607, 2
  %609 = icmp eq i32 %608, 0
  br i1 %609, label %610, label %622

610:                                              ; preds = %605
  %611 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %603, i64 0, i32 0
  %612 = load i32, i32* %611, align 4, !noalias !43
  %613 = zext i32 %612 to i33
  %614 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %613, i33 1) #14
  %615 = extractvalue { i33, i1 } %614, 1
  %616 = extractvalue { i33, i1 } %614, 0
  %617 = icmp slt i33 %616, 0
  %618 = or i1 %615, %617
  br i1 %618, label %619, label %620, !prof !5

619:                                              ; preds = %610
  call void @llvm.trap() #14, !noalias !43
  unreachable

620:                                              ; preds = %610
  %621 = trunc i33 %616 to i32
  store i32 %621, i32* %611, align 4, !noalias !43
  br label %622

622:                                              ; preds = %595, %605, %620
  %623 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %21, i64 0, i32 1, i32 2, i32 0, i32 0
  %624 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %623, align 8
  %625 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %22, i64 0, i32 2, i32 0, i32 0
  %626 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %22, i64 0, i32 1
  %627 = bitcast %"class.logging::CheckError"* %6 to i8*
  %628 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 4
  %629 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %22, i64 0, i32 2, i32 0, i32 1
  %630 = bitcast %"class.WTF::AtomicString"* %626 to i64*
  %631 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %626, i64 0, i32 0, i32 0, i32 0
  %632 = icmp eq i32 %601, 0
  br label %705

633:                                              ; preds = %497, %499
  %634 = phi %"class.WTF::AtomicString"* [ %498, %497 ], [ %502, %499 ]
  %635 = icmp eq i32 %495, 0
  %636 = select i1 %635, %"class.WTF::AtomicString"* %415, %"class.WTF::AtomicString"* %634
  %637 = load i8, i8* %159, align 1
  %638 = and i8 %637, 2
  %639 = icmp eq i8 %638, 0
  br i1 %639, label %640, label %652

640:                                              ; preds = %633
  %641 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %636, i64 0, i32 0, i32 0, i32 0
  %642 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %641, align 8
  %643 = icmp eq %"class.WTF::StringImpl"* %642, null
  br i1 %643, label %648, label %644

644:                                              ; preds = %640
  %645 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %642, i64 0, i32 1
  %646 = load i32, i32* %645, align 4
  %647 = icmp eq i32 %646, 0
  br i1 %647, label %648, label %650

648:                                              ; preds = %644, %640
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %416) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.3, i64 0, i64 0), i32 310, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i64 0, i64 0)) #14
  %649 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %416) #14
  br label %650

650:                                              ; preds = %648, %644
  call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE3AddERNS0_12BackingFlagsERKN3WTF12AtomicStringE(%"union.blink::InvalidationSet::Backing.1"* %417, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %276, %"class.WTF::AtomicString"* dereferenceable(8) %636) #14
  %651 = load i32, i32* %360, align 8
  br label %652

652:                                              ; preds = %633, %650
  %653 = phi i32 [ %495, %633 ], [ %651, %650 ]
  %654 = icmp eq i32 %653, 0
  br i1 %654, label %655, label %693

655:                                              ; preds = %652
  %656 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %279, align 8
  %657 = icmp eq %"class.WTF::StringImpl"* %656, null
  br i1 %657, label %675, label %658

658:                                              ; preds = %655
  %659 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %656, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %660 = load atomic i32, i32* %659 monotonic, align 4
  %661 = and i32 %660, 2
  %662 = icmp eq i32 %661, 0
  br i1 %662, label %663, label %675

663:                                              ; preds = %658
  %664 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %656, i64 0, i32 0
  %665 = load i32, i32* %664, align 4
  %666 = zext i32 %665 to i33
  %667 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %666, i33 1) #14
  %668 = extractvalue { i33, i1 } %667, 1
  %669 = extractvalue { i33, i1 } %667, 0
  %670 = icmp slt i33 %669, 0
  %671 = or i1 %668, %670
  br i1 %671, label %672, label %673, !prof !5

672:                                              ; preds = %663
  call void @llvm.trap() #14
  unreachable

673:                                              ; preds = %663
  %674 = trunc i33 %669 to i32
  store i32 %674, i32* %664, align 4
  br label %675

675:                                              ; preds = %673, %658, %655
  %676 = ptrtoint %"class.WTF::StringImpl"* %656 to i64
  %677 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %420, align 8
  store i64 %676, i64* %419, align 8
  %678 = icmp eq %"class.WTF::StringImpl"* %677, null
  br i1 %678, label %679, label %680

679:                                              ; preds = %702, %698, %675, %689, %692, %693
  br label %494

680:                                              ; preds = %675
  %681 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %677, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %682 = load atomic i32, i32* %681 monotonic, align 4
  %683 = and i32 %682, 2
  %684 = icmp eq i32 %683, 0
  %685 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %677, i64 0, i32 0
  %686 = load i32, i32* %685, align 4
  br i1 %684, label %687, label %689

687:                                              ; preds = %680
  %688 = add i32 %686, -1
  store i32 %688, i32* %685, align 4
  br label %689

689:                                              ; preds = %687, %680
  %690 = phi i32 [ %688, %687 ], [ %686, %680 ]
  %691 = icmp eq i32 %690, 0
  br i1 %691, label %692, label %679

692:                                              ; preds = %689
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %677) #14
  br label %679

693:                                              ; preds = %652
  %694 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %414, align 8
  %695 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %694, i64 1
  store %"class.WTF::AtomicString"* %695, %"class.WTF::AtomicString"** %414, align 8
  %696 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %418, align 8
  %697 = icmp eq %"class.WTF::AtomicString"* %695, %696
  br i1 %697, label %679, label %698

698:                                              ; preds = %693, %702
  %699 = phi %"class.WTF::AtomicString"* [ %703, %702 ], [ %695, %693 ]
  %700 = bitcast %"class.WTF::AtomicString"* %699 to i64*
  %701 = load i64, i64* %700, align 8
  switch i64 %701, label %679 [
    i64 -1, label %702
    i64 0, label %702
  ]

702:                                              ; preds = %698, %698
  %703 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %699, i64 1
  store %"class.WTF::AtomicString"* %703, %"class.WTF::AtomicString"** %414, align 8
  %704 = icmp eq %"class.WTF::AtomicString"* %703, %696
  br i1 %704, label %679, label %698

705:                                              ; preds = %890, %622
  %706 = load i32, i32* %571, align 8
  %707 = icmp eq i32 %706, %601
  br i1 %707, label %710, label %708

708:                                              ; preds = %705
  %709 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %625, align 8
  br label %844

710:                                              ; preds = %705
  %711 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %576, align 8
  %712 = icmp eq %"class.WTF::StringImpl"* %711, %603
  %713 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %625, align 8
  %714 = icmp eq %"class.WTF::AtomicString"* %713, %624
  %715 = select i1 %632, i1 %712, i1 %714
  br i1 %715, label %716, label %844

716:                                              ; preds = %710
  br i1 %604, label %730, label %717

717:                                              ; preds = %716
  %718 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %603, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %719 = load atomic i32, i32* %718 monotonic, align 4
  %720 = and i32 %719, 2
  %721 = icmp eq i32 %720, 0
  %722 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %603, i64 0, i32 0
  %723 = load i32, i32* %722, align 4
  br i1 %721, label %724, label %726

724:                                              ; preds = %717
  %725 = add i32 %723, -1
  store i32 %725, i32* %722, align 4
  br label %726

726:                                              ; preds = %724, %717
  %727 = phi i32 [ %725, %724 ], [ %723, %717 ]
  %728 = icmp eq i32 %727, 0
  br i1 %728, label %729, label %730

729:                                              ; preds = %726
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %603) #14
  br label %730

730:                                              ; preds = %716, %726, %729
  %731 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %576, align 8
  %732 = icmp eq %"class.WTF::StringImpl"* %731, null
  br i1 %732, label %746, label %733

733:                                              ; preds = %730
  %734 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %731, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %735 = load atomic i32, i32* %734 monotonic, align 4
  %736 = and i32 %735, 2
  %737 = icmp eq i32 %736, 0
  %738 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %731, i64 0, i32 0
  %739 = load i32, i32* %738, align 4
  br i1 %737, label %740, label %742

740:                                              ; preds = %733
  %741 = add i32 %739, -1
  store i32 %741, i32* %738, align 4
  br label %742

742:                                              ; preds = %740, %733
  %743 = phi i32 [ %741, %740 ], [ %739, %733 ]
  %744 = icmp eq i32 %743, 0
  br i1 %744, label %745, label %746

745:                                              ; preds = %742
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %731) #14
  br label %746

746:                                              ; preds = %730, %742, %745
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %570) #14
  %747 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %602, align 8
  %748 = icmp eq %"class.WTF::StringImpl"* %747, null
  br i1 %748, label %762, label %749

749:                                              ; preds = %746
  %750 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %747, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %751 = load atomic i32, i32* %750 monotonic, align 4
  %752 = and i32 %751, 2
  %753 = icmp eq i32 %752, 0
  %754 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %747, i64 0, i32 0
  %755 = load i32, i32* %754, align 4
  br i1 %753, label %756, label %758

756:                                              ; preds = %749
  %757 = add i32 %755, -1
  store i32 %757, i32* %754, align 4
  br label %758

758:                                              ; preds = %756, %749
  %759 = phi i32 [ %757, %756 ], [ %755, %749 ]
  %760 = icmp eq i32 %759, 0
  br i1 %760, label %761, label %762

761:                                              ; preds = %758
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %747) #14
  br label %762

762:                                              ; preds = %761, %758, %746
  %763 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %574, align 8
  %764 = icmp eq %"class.WTF::StringImpl"* %763, null
  br i1 %764, label %778, label %765

765:                                              ; preds = %762
  %766 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %763, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %767 = load atomic i32, i32* %766 monotonic, align 4
  %768 = and i32 %767, 2
  %769 = icmp eq i32 %768, 0
  %770 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %763, i64 0, i32 0
  %771 = load i32, i32* %770, align 4
  br i1 %769, label %772, label %774

772:                                              ; preds = %765
  %773 = add i32 %771, -1
  store i32 %773, i32* %770, align 4
  br label %774

774:                                              ; preds = %772, %765
  %775 = phi i32 [ %773, %772 ], [ %771, %765 ]
  %776 = icmp eq i32 %775, 0
  br i1 %776, label %777, label %778

777:                                              ; preds = %774
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %763) #14
  br label %778

778:                                              ; preds = %762, %774, %777
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %568) #14
  %779 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %779) #14
  %780 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %1, i64 0, i32 5
  call void @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5ItemsERKNS0_12BackingFlagsE(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* nonnull sret %23, %"union.blink::InvalidationSet::Backing.3"* %780, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %216) #14
  %781 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %781) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %781, i8 -86, i64 32, i1 false)
  %782 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %24, i64 0, i32 0
  %783 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %23, i64 0, i32 0, i32 0
  %784 = load i32, i32* %783, align 8, !noalias !46
  store i32 %784, i32* %782, align 8, !alias.scope !46
  %785 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %23, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %786 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %785, align 8, !noalias !46
  %787 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %24, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %786, %"class.WTF::StringImpl"** %787, align 8, !alias.scope !46
  %788 = icmp eq %"class.WTF::StringImpl"* %786, null
  br i1 %788, label %806, label %789

789:                                              ; preds = %778
  %790 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %786, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %791 = load atomic i32, i32* %790 monotonic, align 4, !noalias !46
  %792 = and i32 %791, 2
  %793 = icmp eq i32 %792, 0
  br i1 %793, label %794, label %806

794:                                              ; preds = %789
  %795 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %786, i64 0, i32 0
  %796 = load i32, i32* %795, align 4, !noalias !46
  %797 = zext i32 %796 to i33
  %798 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %797, i33 1) #14
  %799 = extractvalue { i33, i1 } %798, 1
  %800 = extractvalue { i33, i1 } %798, 0
  %801 = icmp slt i33 %800, 0
  %802 = or i1 %799, %801
  br i1 %802, label %803, label %804, !prof !5

803:                                              ; preds = %794
  call void @llvm.trap() #14, !noalias !46
  unreachable

804:                                              ; preds = %794
  %805 = trunc i33 %800 to i32
  store i32 %805, i32* %795, align 4, !noalias !46
  br label %806

806:                                              ; preds = %778, %789, %804
  %807 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %24, i64 0, i32 2
  %808 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %23, i64 0, i32 0, i32 2
  %809 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %807 to i8*
  %810 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %808 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %809, i8* align 8 %810, i64 16, i1 false) #14
  %811 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %23, i64 0, i32 1, i32 0
  %812 = load i32, i32* %811, align 8, !noalias !49
  %813 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %23, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %814 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %813, align 8, !noalias !49
  %815 = icmp eq %"class.WTF::StringImpl"* %814, null
  br i1 %815, label %833, label %816

816:                                              ; preds = %806
  %817 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %814, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %818 = load atomic i32, i32* %817 monotonic, align 4, !noalias !49
  %819 = and i32 %818, 2
  %820 = icmp eq i32 %819, 0
  br i1 %820, label %821, label %833

821:                                              ; preds = %816
  %822 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %814, i64 0, i32 0
  %823 = load i32, i32* %822, align 4, !noalias !49
  %824 = zext i32 %823 to i33
  %825 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %824, i33 1) #14
  %826 = extractvalue { i33, i1 } %825, 1
  %827 = extractvalue { i33, i1 } %825, 0
  %828 = icmp slt i33 %827, 0
  %829 = or i1 %826, %828
  br i1 %829, label %830, label %831, !prof !5

830:                                              ; preds = %821
  call void @llvm.trap() #14, !noalias !49
  unreachable

831:                                              ; preds = %821
  %832 = trunc i33 %827 to i32
  store i32 %832, i32* %822, align 4, !noalias !49
  br label %833

833:                                              ; preds = %806, %816, %831
  %834 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %23, i64 0, i32 1, i32 2, i32 0, i32 0
  %835 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %834, align 8
  %836 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %24, i64 0, i32 2, i32 0, i32 0
  %837 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %24, i64 0, i32 1
  %838 = bitcast %"class.logging::CheckError"* %5 to i8*
  %839 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 5
  %840 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %24, i64 0, i32 2, i32 0, i32 1
  %841 = bitcast %"class.WTF::AtomicString"* %837 to i64*
  %842 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %837, i64 0, i32 0, i32 0, i32 0
  %843 = icmp eq i32 %812, 0
  br label %916

844:                                              ; preds = %708, %710
  %845 = phi %"class.WTF::AtomicString"* [ %709, %708 ], [ %713, %710 ]
  %846 = icmp eq i32 %706, 0
  %847 = select i1 %846, %"class.WTF::AtomicString"* %626, %"class.WTF::AtomicString"* %845
  %848 = load i8, i8* %159, align 1
  %849 = and i8 %848, 2
  %850 = icmp eq i8 %849, 0
  br i1 %850, label %851, label %863

851:                                              ; preds = %844
  %852 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %847, i64 0, i32 0, i32 0, i32 0
  %853 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %852, align 8
  %854 = icmp eq %"class.WTF::StringImpl"* %853, null
  br i1 %854, label %859, label %855

855:                                              ; preds = %851
  %856 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %853, i64 0, i32 1
  %857 = load i32, i32* %856, align 4
  %858 = icmp eq i32 %857, 0
  br i1 %858, label %859, label %861

859:                                              ; preds = %855, %851
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %627) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.3, i64 0, i64 0), i32 317, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16, i64 0, i64 0)) #14
  %860 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %627) #14
  br label %861

861:                                              ; preds = %859, %855
  call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE3AddERNS0_12BackingFlagsERKN3WTF12AtomicStringE(%"union.blink::InvalidationSet::Backing.2"* %628, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %276, %"class.WTF::AtomicString"* dereferenceable(8) %847) #14
  %862 = load i32, i32* %571, align 8
  br label %863

863:                                              ; preds = %844, %861
  %864 = phi i32 [ %706, %844 ], [ %862, %861 ]
  %865 = icmp eq i32 %864, 0
  br i1 %865, label %866, label %904

866:                                              ; preds = %863
  %867 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %279, align 8
  %868 = icmp eq %"class.WTF::StringImpl"* %867, null
  br i1 %868, label %886, label %869

869:                                              ; preds = %866
  %870 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %867, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %871 = load atomic i32, i32* %870 monotonic, align 4
  %872 = and i32 %871, 2
  %873 = icmp eq i32 %872, 0
  br i1 %873, label %874, label %886

874:                                              ; preds = %869
  %875 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %867, i64 0, i32 0
  %876 = load i32, i32* %875, align 4
  %877 = zext i32 %876 to i33
  %878 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %877, i33 1) #14
  %879 = extractvalue { i33, i1 } %878, 1
  %880 = extractvalue { i33, i1 } %878, 0
  %881 = icmp slt i33 %880, 0
  %882 = or i1 %879, %881
  br i1 %882, label %883, label %884, !prof !5

883:                                              ; preds = %874
  call void @llvm.trap() #14
  unreachable

884:                                              ; preds = %874
  %885 = trunc i33 %880 to i32
  store i32 %885, i32* %875, align 4
  br label %886

886:                                              ; preds = %884, %869, %866
  %887 = ptrtoint %"class.WTF::StringImpl"* %867 to i64
  %888 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %631, align 8
  store i64 %887, i64* %630, align 8
  %889 = icmp eq %"class.WTF::StringImpl"* %888, null
  br i1 %889, label %890, label %891

890:                                              ; preds = %913, %909, %886, %900, %903, %904
  br label %705

891:                                              ; preds = %886
  %892 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %888, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %893 = load atomic i32, i32* %892 monotonic, align 4
  %894 = and i32 %893, 2
  %895 = icmp eq i32 %894, 0
  %896 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %888, i64 0, i32 0
  %897 = load i32, i32* %896, align 4
  br i1 %895, label %898, label %900

898:                                              ; preds = %891
  %899 = add i32 %897, -1
  store i32 %899, i32* %896, align 4
  br label %900

900:                                              ; preds = %898, %891
  %901 = phi i32 [ %899, %898 ], [ %897, %891 ]
  %902 = icmp eq i32 %901, 0
  br i1 %902, label %903, label %890

903:                                              ; preds = %900
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %888) #14
  br label %890

904:                                              ; preds = %863
  %905 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %625, align 8
  %906 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %905, i64 1
  store %"class.WTF::AtomicString"* %906, %"class.WTF::AtomicString"** %625, align 8
  %907 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %629, align 8
  %908 = icmp eq %"class.WTF::AtomicString"* %906, %907
  br i1 %908, label %890, label %909

909:                                              ; preds = %904, %913
  %910 = phi %"class.WTF::AtomicString"* [ %914, %913 ], [ %906, %904 ]
  %911 = bitcast %"class.WTF::AtomicString"* %910 to i64*
  %912 = load i64, i64* %911, align 8
  switch i64 %912, label %890 [
    i64 -1, label %913
    i64 0, label %913
  ]

913:                                              ; preds = %909, %909
  %914 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %910, i64 1
  store %"class.WTF::AtomicString"* %914, %"class.WTF::AtomicString"** %625, align 8
  %915 = icmp eq %"class.WTF::AtomicString"* %914, %907
  br i1 %915, label %890, label %909

916:                                              ; preds = %1036, %833
  %917 = load i32, i32* %782, align 8
  %918 = icmp eq i32 %917, %812
  br i1 %918, label %921, label %919

919:                                              ; preds = %916
  %920 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %836, align 8
  br label %990

921:                                              ; preds = %916
  %922 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %787, align 8
  %923 = icmp eq %"class.WTF::StringImpl"* %922, %814
  %924 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %836, align 8
  %925 = icmp eq %"class.WTF::AtomicString"* %924, %835
  %926 = select i1 %843, i1 %923, i1 %925
  br i1 %926, label %927, label %990

927:                                              ; preds = %921
  br i1 %815, label %941, label %928

928:                                              ; preds = %927
  %929 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %814, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %930 = load atomic i32, i32* %929 monotonic, align 4
  %931 = and i32 %930, 2
  %932 = icmp eq i32 %931, 0
  %933 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %814, i64 0, i32 0
  %934 = load i32, i32* %933, align 4
  br i1 %932, label %935, label %937

935:                                              ; preds = %928
  %936 = add i32 %934, -1
  store i32 %936, i32* %933, align 4
  br label %937

937:                                              ; preds = %935, %928
  %938 = phi i32 [ %936, %935 ], [ %934, %928 ]
  %939 = icmp eq i32 %938, 0
  br i1 %939, label %940, label %941

940:                                              ; preds = %937
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %814) #14
  br label %941

941:                                              ; preds = %927, %937, %940
  %942 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %787, align 8
  %943 = icmp eq %"class.WTF::StringImpl"* %942, null
  br i1 %943, label %957, label %944

944:                                              ; preds = %941
  %945 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %942, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %946 = load atomic i32, i32* %945 monotonic, align 4
  %947 = and i32 %946, 2
  %948 = icmp eq i32 %947, 0
  %949 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %942, i64 0, i32 0
  %950 = load i32, i32* %949, align 4
  br i1 %948, label %951, label %953

951:                                              ; preds = %944
  %952 = add i32 %950, -1
  store i32 %952, i32* %949, align 4
  br label %953

953:                                              ; preds = %951, %944
  %954 = phi i32 [ %952, %951 ], [ %950, %944 ]
  %955 = icmp eq i32 %954, 0
  br i1 %955, label %956, label %957

956:                                              ; preds = %953
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %942) #14
  br label %957

957:                                              ; preds = %941, %953, %956
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %781) #14
  %958 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %813, align 8
  %959 = icmp eq %"class.WTF::StringImpl"* %958, null
  br i1 %959, label %973, label %960

960:                                              ; preds = %957
  %961 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %958, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %962 = load atomic i32, i32* %961 monotonic, align 4
  %963 = and i32 %962, 2
  %964 = icmp eq i32 %963, 0
  %965 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %958, i64 0, i32 0
  %966 = load i32, i32* %965, align 4
  br i1 %964, label %967, label %969

967:                                              ; preds = %960
  %968 = add i32 %966, -1
  store i32 %968, i32* %965, align 4
  br label %969

969:                                              ; preds = %967, %960
  %970 = phi i32 [ %968, %967 ], [ %966, %960 ]
  %971 = icmp eq i32 %970, 0
  br i1 %971, label %972, label %973

972:                                              ; preds = %969
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %958) #14
  br label %973

973:                                              ; preds = %972, %969, %957
  %974 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %785, align 8
  %975 = icmp eq %"class.WTF::StringImpl"* %974, null
  br i1 %975, label %989, label %976

976:                                              ; preds = %973
  %977 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %974, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %978 = load atomic i32, i32* %977 monotonic, align 4
  %979 = and i32 %978, 2
  %980 = icmp eq i32 %979, 0
  %981 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %974, i64 0, i32 0
  %982 = load i32, i32* %981, align 4
  br i1 %980, label %983, label %985

983:                                              ; preds = %976
  %984 = add i32 %982, -1
  store i32 %984, i32* %981, align 4
  br label %985

985:                                              ; preds = %983, %976
  %986 = phi i32 [ %984, %983 ], [ %982, %976 ]
  %987 = icmp eq i32 %986, 0
  br i1 %987, label %988, label %989

988:                                              ; preds = %985
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %974) #14
  br label %989

989:                                              ; preds = %973, %985, %988
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %779) #14
  br label %1062

990:                                              ; preds = %919, %921
  %991 = phi %"class.WTF::AtomicString"* [ %920, %919 ], [ %924, %921 ]
  %992 = icmp eq i32 %917, 0
  %993 = select i1 %992, %"class.WTF::AtomicString"* %837, %"class.WTF::AtomicString"* %991
  %994 = load i8, i8* %159, align 1
  %995 = and i8 %994, 2
  %996 = icmp eq i8 %995, 0
  br i1 %996, label %997, label %1009

997:                                              ; preds = %990
  %998 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %993, i64 0, i32 0, i32 0, i32 0
  %999 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %998, align 8
  %1000 = icmp eq %"class.WTF::StringImpl"* %999, null
  br i1 %1000, label %1005, label %1001

1001:                                             ; preds = %997
  %1002 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %999, i64 0, i32 1
  %1003 = load i32, i32* %1002, align 4
  %1004 = icmp eq i32 %1003, 0
  br i1 %1004, label %1005, label %1007

1005:                                             ; preds = %1001, %997
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %838) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.3, i64 0, i64 0), i32 324, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17, i64 0, i64 0)) #14
  %1006 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %838) #14
  br label %1007

1007:                                             ; preds = %1005, %1001
  call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE3AddERNS0_12BackingFlagsERKN3WTF12AtomicStringE(%"union.blink::InvalidationSet::Backing.3"* %839, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %276, %"class.WTF::AtomicString"* dereferenceable(8) %993) #14
  %1008 = load i32, i32* %782, align 8
  br label %1009

1009:                                             ; preds = %990, %1007
  %1010 = phi i32 [ %917, %990 ], [ %1008, %1007 ]
  %1011 = icmp eq i32 %1010, 0
  br i1 %1011, label %1012, label %1050

1012:                                             ; preds = %1009
  %1013 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %279, align 8
  %1014 = icmp eq %"class.WTF::StringImpl"* %1013, null
  br i1 %1014, label %1032, label %1015

1015:                                             ; preds = %1012
  %1016 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1013, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1017 = load atomic i32, i32* %1016 monotonic, align 4
  %1018 = and i32 %1017, 2
  %1019 = icmp eq i32 %1018, 0
  br i1 %1019, label %1020, label %1032

1020:                                             ; preds = %1015
  %1021 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1013, i64 0, i32 0
  %1022 = load i32, i32* %1021, align 4
  %1023 = zext i32 %1022 to i33
  %1024 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1023, i33 1) #14
  %1025 = extractvalue { i33, i1 } %1024, 1
  %1026 = extractvalue { i33, i1 } %1024, 0
  %1027 = icmp slt i33 %1026, 0
  %1028 = or i1 %1025, %1027
  br i1 %1028, label %1029, label %1030, !prof !5

1029:                                             ; preds = %1020
  call void @llvm.trap() #14
  unreachable

1030:                                             ; preds = %1020
  %1031 = trunc i33 %1026 to i32
  store i32 %1031, i32* %1021, align 4
  br label %1032

1032:                                             ; preds = %1030, %1015, %1012
  %1033 = ptrtoint %"class.WTF::StringImpl"* %1013 to i64
  %1034 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %842, align 8
  store i64 %1033, i64* %841, align 8
  %1035 = icmp eq %"class.WTF::StringImpl"* %1034, null
  br i1 %1035, label %1036, label %1037

1036:                                             ; preds = %1059, %1055, %1032, %1046, %1049, %1050
  br label %916

1037:                                             ; preds = %1032
  %1038 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1034, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1039 = load atomic i32, i32* %1038 monotonic, align 4
  %1040 = and i32 %1039, 2
  %1041 = icmp eq i32 %1040, 0
  %1042 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1034, i64 0, i32 0
  %1043 = load i32, i32* %1042, align 4
  br i1 %1041, label %1044, label %1046

1044:                                             ; preds = %1037
  %1045 = add i32 %1043, -1
  store i32 %1045, i32* %1042, align 4
  br label %1046

1046:                                             ; preds = %1044, %1037
  %1047 = phi i32 [ %1045, %1044 ], [ %1043, %1037 ]
  %1048 = icmp eq i32 %1047, 0
  br i1 %1048, label %1049, label %1036

1049:                                             ; preds = %1046
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1034) #14
  br label %1036

1050:                                             ; preds = %1009
  %1051 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %836, align 8
  %1052 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1051, i64 1
  store %"class.WTF::AtomicString"* %1052, %"class.WTF::AtomicString"** %836, align 8
  %1053 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %840, align 8
  %1054 = icmp eq %"class.WTF::AtomicString"* %1052, %1053
  br i1 %1054, label %1036, label %1055

1055:                                             ; preds = %1050, %1059
  %1056 = phi %"class.WTF::AtomicString"* [ %1060, %1059 ], [ %1052, %1050 ]
  %1057 = bitcast %"class.WTF::AtomicString"* %1056 to i64*
  %1058 = load i64, i64* %1057, align 8
  switch i64 %1058, label %1036 [
    i64 -1, label %1059
    i64 0, label %1059
  ]

1059:                                             ; preds = %1055, %1055
  %1060 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1056, i64 1
  store %"class.WTF::AtomicString"* %1060, %"class.WTF::AtomicString"** %836, align 8
  %1061 = icmp eq %"class.WTF::AtomicString"* %1060, %1053
  br i1 %1061, label %1036, label %1055

1062:                                             ; preds = %158, %153, %62, %168, %989
  ret void
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(48) %"class.blink::DescendantInvalidationSet"* @_ZN5blink22SiblingInvalidationSet24EnsureSiblingDescendantsEv(%"class.blink::SiblingInvalidationSet"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SiblingInvalidationSet", %"class.blink::SiblingInvalidationSet"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %class.scoped_refptr.4, %class.scoped_refptr.4* %2, i64 0, i32 0
  %4 = load %"class.blink::DescendantInvalidationSet"*, %"class.blink::DescendantInvalidationSet"** %3, align 8
  %5 = icmp eq %"class.blink::DescendantInvalidationSet"* %4, null
  br i1 %5, label %6, label %14

6:                                                ; preds = %1
  %7 = tail call noalias i8* @malloc(i64 48) #14
  %8 = bitcast i8* %7 to i32*
  store i32 1, i32* %8, align 4
  %9 = getelementptr inbounds i8, i8* %7, i64 8
  %10 = getelementptr inbounds i8, i8* %7, i64 42
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 34, i1 false) #14
  store i8 8, i8* %10, align 2
  %11 = ptrtoint i8* %7 to i64
  %12 = bitcast %class.scoped_refptr.4* %2 to i64*
  store i64 %11, i64* %12, align 8
  %13 = bitcast i8* %7 to %"class.blink::DescendantInvalidationSet"*
  br label %14

14:                                               ; preds = %1, %6
  %15 = phi %"class.blink::DescendantInvalidationSet"* [ %4, %1 ], [ %13, %6 ]
  ret %"class.blink::DescendantInvalidationSet"* %15
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(48) %"class.blink::DescendantInvalidationSet"* @_ZN5blink22SiblingInvalidationSet17EnsureDescendantsEv(%"class.blink::SiblingInvalidationSet"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SiblingInvalidationSet", %"class.blink::SiblingInvalidationSet"* %0, i64 0, i32 3
  %3 = getelementptr inbounds %class.scoped_refptr.4, %class.scoped_refptr.4* %2, i64 0, i32 0
  %4 = load %"class.blink::DescendantInvalidationSet"*, %"class.blink::DescendantInvalidationSet"** %3, align 8
  %5 = icmp eq %"class.blink::DescendantInvalidationSet"* %4, null
  br i1 %5, label %6, label %14

6:                                                ; preds = %1
  %7 = tail call noalias i8* @malloc(i64 48) #14
  %8 = bitcast i8* %7 to i32*
  store i32 1, i32* %8, align 4
  %9 = getelementptr inbounds i8, i8* %7, i64 8
  %10 = getelementptr inbounds i8, i8* %7, i64 42
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 34, i1 false) #14
  store i8 8, i8* %10, align 2
  %11 = ptrtoint i8* %7 to i64
  %12 = bitcast %class.scoped_refptr.4* %2 to i64*
  store i64 %11, i64* %12, align 8
  %13 = bitcast i8* %7 to %"class.blink::DescendantInvalidationSet"*
  br label %14

14:                                               ; preds = %1, %6
  %15 = phi %"class.blink::DescendantInvalidationSet"* [ %4, %1 ], [ %13, %6 ]
  ret %"class.blink::DescendantInvalidationSet"* %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15InvalidationSet22SetWholeSubtreeInvalidEv(%"class.blink::InvalidationSet"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 6, i32 0
  %3 = load i8, i8* %2, align 1
  %4 = and i8 %3, 2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %14

6:                                                ; preds = %1
  %7 = and i8 %3, -64
  %8 = or i8 %7, 2
  store i8 %8, i8* %2, align 1
  %9 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7
  tail call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5ClearERNS0_12BackingFlagsE(%"union.blink::InvalidationSet::Backing"* %9, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %10) #14
  %11 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 3
  tail call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5ClearERNS0_12BackingFlagsE(%"union.blink::InvalidationSet::Backing.1"* %11, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %10) #14
  %12 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 4
  tail call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5ClearERNS0_12BackingFlagsE(%"union.blink::InvalidationSet::Backing.2"* %12, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %10) #14
  %13 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 5
  tail call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5ClearERNS0_12BackingFlagsE(%"union.blink::InvalidationSet::Backing.3"* %13, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %10) #14
  br label %14

14:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15InvalidationSet8AddClassERKN3WTF12AtomicStringE(%"class.blink::InvalidationSet"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 6, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = and i8 %5, 2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %22

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %16, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %8, %12
  %17 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.3, i64 0, i64 0), i32 303, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.14, i64 0, i64 0)) #14
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #14
  br label %19

19:                                               ; preds = %12, %16
  %20 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 2
  %21 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7
  call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE3AddERNS0_12BackingFlagsERKN3WTF12AtomicStringE(%"union.blink::InvalidationSet::Backing"* %20, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %21, %"class.WTF::AtomicString"* dereferenceable(8) %1)
  br label %22

22:                                               ; preds = %2, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15InvalidationSet5AddIdERKN3WTF12AtomicStringE(%"class.blink::InvalidationSet"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 6, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = and i8 %5, 2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %22

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %16, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %8, %12
  %17 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.3, i64 0, i64 0), i32 310, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i64 0, i64 0)) #14
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #14
  br label %19

19:                                               ; preds = %12, %16
  %20 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 3
  %21 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7
  call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE3AddERNS0_12BackingFlagsERKN3WTF12AtomicStringE(%"union.blink::InvalidationSet::Backing.1"* %20, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %21, %"class.WTF::AtomicString"* dereferenceable(8) %1)
  br label %22

22:                                               ; preds = %2, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15InvalidationSet10AddTagNameERKN3WTF12AtomicStringE(%"class.blink::InvalidationSet"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 6, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = and i8 %5, 2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %22

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %16, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %8, %12
  %17 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.3, i64 0, i64 0), i32 317, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16, i64 0, i64 0)) #14
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #14
  br label %19

19:                                               ; preds = %12, %16
  %20 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 4
  %21 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7
  call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE3AddERNS0_12BackingFlagsERKN3WTF12AtomicStringE(%"union.blink::InvalidationSet::Backing.2"* %20, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %21, %"class.WTF::AtomicString"* dereferenceable(8) %1)
  br label %22

22:                                               ; preds = %2, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15InvalidationSet12AddAttributeERKN3WTF12AtomicStringE(%"class.blink::InvalidationSet"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 6, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = and i8 %5, 2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %22

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %16, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %8, %12
  %17 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.3, i64 0, i64 0), i32 324, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17, i64 0, i64 0)) #14
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #14
  br label %19

19:                                               ; preds = %12, %16
  %20 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 5
  %21 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7
  call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE3AddERNS0_12BackingFlagsERKN3WTF12AtomicStringE(%"union.blink::InvalidationSet::Backing.3"* %20, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %21, %"class.WTF::AtomicString"* dereferenceable(8) %1)
  br label %22

22:                                               ; preds = %2, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15InvalidationSetD2Ev(%"class.blink::InvalidationSet"*) unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 8
  %4 = load i8, i8* %3, align 2
  %5 = and i8 %4, 8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %11

7:                                                ; preds = %1
  %8 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #14
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.44, i64 0, i64 0), i32 364, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0)) #14
  %9 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #14
  %10 = load i8, i8* %3, align 2
  br label %11

11:                                               ; preds = %1, %7
  %12 = phi i8 [ %4, %1 ], [ %10, %7 ]
  %13 = and i8 %12, -9
  store i8 %13, i8* %3, align 2
  %14 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 2
  %15 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7
  call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5ClearERNS0_12BackingFlagsE(%"union.blink::InvalidationSet::Backing"* %14, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %15) #14
  %16 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 3
  call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5ClearERNS0_12BackingFlagsE(%"union.blink::InvalidationSet::Backing.1"* %16, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %15) #14
  %17 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 4
  call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5ClearERNS0_12BackingFlagsE(%"union.blink::InvalidationSet::Backing.2"* %17, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %15) #14
  %18 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 5
  call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5ClearERNS0_12BackingFlagsE(%"union.blink::InvalidationSet::Backing.3"* %18, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %15) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink15InvalidationSet16ClearAllBackingsEv(%"class.blink::InvalidationSet"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7
  tail call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5ClearERNS0_12BackingFlagsE(%"union.blink::InvalidationSet::Backing"* %2, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %3)
  %4 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 3
  tail call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5ClearERNS0_12BackingFlagsE(%"union.blink::InvalidationSet::Backing.1"* %4, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %3)
  %5 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 4
  tail call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5ClearERNS0_12BackingFlagsE(%"union.blink::InvalidationSet::Backing.2"* %5, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %3)
  %6 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 5
  tail call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5ClearERNS0_12BackingFlagsE(%"union.blink::InvalidationSet::Backing.3"* %6, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5ClearERNS0_12BackingFlagsE(%"union.blink::InvalidationSet::Backing"*, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::InvalidationSet::BackingFlags", %"class.blink::InvalidationSet::BackingFlags"* %1, i64 0, i32 0
  %4 = load i8, i8* %3, align 1
  %5 = and i8 %4, 1
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %50, label %7

7:                                                ; preds = %2
  %8 = bitcast %"union.blink::InvalidationSet::Backing"* %0 to %"class.WTF::HashSet"**
  %9 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %8, align 8
  %10 = icmp eq %"class.WTF::HashSet"* %9, null
  br i1 %10, label %68, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %9, i64 0, i32 0, i32 0
  %13 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %12, align 8
  %14 = icmp eq %"class.WTF::AtomicString"* %13, null
  br i1 %14, label %47, label %15, !prof !27

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %9, i64 0, i32 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %45, label %19

19:                                               ; preds = %15
  %20 = zext i32 %17 to i64
  br label %21

21:                                               ; preds = %42, %19
  %22 = phi i64 [ 0, %19 ], [ %43, %42 ]
  %23 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %13, i64 %22
  %24 = bitcast %"class.WTF::AtomicString"* %23 to i8**
  %25 = load i8*, i8** %24, align 8
  %26 = bitcast i8* %25 to %"class.WTF::StringImpl"*
  %27 = ptrtoint i8* %25 to i64
  switch i64 %27, label %28 [
    i64 -1, label %42
    i64 0, label %42
  ]

28:                                               ; preds = %21
  %29 = getelementptr inbounds i8, i8* %25, i64 8
  %30 = bitcast i8* %29 to i32*
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = bitcast i8* %25 to i32*
  %35 = load i32, i32* %34, align 4
  br i1 %33, label %36, label %38

36:                                               ; preds = %28
  %37 = add i32 %35, -1
  store i32 %37, i32* %34, align 4
  br label %38

38:                                               ; preds = %36, %28
  %39 = phi i32 [ %37, %36 ], [ %35, %28 ]
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %26) #14
  br label %42

42:                                               ; preds = %41, %38, %21, %21
  %43 = add nuw nsw i64 %22, 1
  %44 = icmp eq i64 %43, %20
  br i1 %44, label %45, label %21

45:                                               ; preds = %42, %15
  %46 = bitcast %"class.WTF::AtomicString"* %13 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %46) #14
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %12, align 8
  br label %47

47:                                               ; preds = %11, %45
  %48 = bitcast %"class.WTF::HashSet"* %9 to i8*
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %48) #14
  %49 = getelementptr inbounds %"union.blink::InvalidationSet::Backing", %"union.blink::InvalidationSet::Backing"* %0, i64 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %49, align 8
  br label %68

50:                                               ; preds = %2
  %51 = getelementptr inbounds %"union.blink::InvalidationSet::Backing", %"union.blink::InvalidationSet::Backing"* %0, i64 0, i32 0
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %68, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  br i1 %58, label %61, label %63

61:                                               ; preds = %54
  %62 = add i32 %60, -1
  store i32 %62, i32* %59, align 4
  br label %63

63:                                               ; preds = %61, %54
  %64 = phi i32 [ %62, %61 ], [ %60, %54 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %52) #14
  br label %67

67:                                               ; preds = %63, %66
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %51, align 8
  br label %68

68:                                               ; preds = %7, %50, %67, %47
  %69 = load i8, i8* %3, align 1
  %70 = and i8 %69, -2
  store i8 %70, i8* %3, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5ClearERNS0_12BackingFlagsE(%"union.blink::InvalidationSet::Backing.1"*, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::InvalidationSet::BackingFlags", %"class.blink::InvalidationSet::BackingFlags"* %1, i64 0, i32 0
  %4 = load i8, i8* %3, align 1
  %5 = and i8 %4, 2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %50, label %7

7:                                                ; preds = %2
  %8 = bitcast %"union.blink::InvalidationSet::Backing.1"* %0 to %"class.WTF::HashSet"**
  %9 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %8, align 8
  %10 = icmp eq %"class.WTF::HashSet"* %9, null
  br i1 %10, label %68, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %9, i64 0, i32 0, i32 0
  %13 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %12, align 8
  %14 = icmp eq %"class.WTF::AtomicString"* %13, null
  br i1 %14, label %47, label %15, !prof !27

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %9, i64 0, i32 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %45, label %19

19:                                               ; preds = %15
  %20 = zext i32 %17 to i64
  br label %21

21:                                               ; preds = %42, %19
  %22 = phi i64 [ 0, %19 ], [ %43, %42 ]
  %23 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %13, i64 %22
  %24 = bitcast %"class.WTF::AtomicString"* %23 to i8**
  %25 = load i8*, i8** %24, align 8
  %26 = bitcast i8* %25 to %"class.WTF::StringImpl"*
  %27 = ptrtoint i8* %25 to i64
  switch i64 %27, label %28 [
    i64 -1, label %42
    i64 0, label %42
  ]

28:                                               ; preds = %21
  %29 = getelementptr inbounds i8, i8* %25, i64 8
  %30 = bitcast i8* %29 to i32*
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = bitcast i8* %25 to i32*
  %35 = load i32, i32* %34, align 4
  br i1 %33, label %36, label %38

36:                                               ; preds = %28
  %37 = add i32 %35, -1
  store i32 %37, i32* %34, align 4
  br label %38

38:                                               ; preds = %36, %28
  %39 = phi i32 [ %37, %36 ], [ %35, %28 ]
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %26) #14
  br label %42

42:                                               ; preds = %41, %38, %21, %21
  %43 = add nuw nsw i64 %22, 1
  %44 = icmp eq i64 %43, %20
  br i1 %44, label %45, label %21

45:                                               ; preds = %42, %15
  %46 = bitcast %"class.WTF::AtomicString"* %13 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %46) #14
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %12, align 8
  br label %47

47:                                               ; preds = %11, %45
  %48 = bitcast %"class.WTF::HashSet"* %9 to i8*
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %48) #14
  %49 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.1", %"union.blink::InvalidationSet::Backing.1"* %0, i64 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %49, align 8
  br label %68

50:                                               ; preds = %2
  %51 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.1", %"union.blink::InvalidationSet::Backing.1"* %0, i64 0, i32 0
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %68, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  br i1 %58, label %61, label %63

61:                                               ; preds = %54
  %62 = add i32 %60, -1
  store i32 %62, i32* %59, align 4
  br label %63

63:                                               ; preds = %61, %54
  %64 = phi i32 [ %62, %61 ], [ %60, %54 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %52) #14
  br label %67

67:                                               ; preds = %63, %66
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %51, align 8
  br label %68

68:                                               ; preds = %7, %50, %67, %47
  %69 = load i8, i8* %3, align 1
  %70 = and i8 %69, -3
  store i8 %70, i8* %3, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5ClearERNS0_12BackingFlagsE(%"union.blink::InvalidationSet::Backing.2"*, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::InvalidationSet::BackingFlags", %"class.blink::InvalidationSet::BackingFlags"* %1, i64 0, i32 0
  %4 = load i8, i8* %3, align 1
  %5 = and i8 %4, 4
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %50, label %7

7:                                                ; preds = %2
  %8 = bitcast %"union.blink::InvalidationSet::Backing.2"* %0 to %"class.WTF::HashSet"**
  %9 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %8, align 8
  %10 = icmp eq %"class.WTF::HashSet"* %9, null
  br i1 %10, label %68, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %9, i64 0, i32 0, i32 0
  %13 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %12, align 8
  %14 = icmp eq %"class.WTF::AtomicString"* %13, null
  br i1 %14, label %47, label %15, !prof !27

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %9, i64 0, i32 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %45, label %19

19:                                               ; preds = %15
  %20 = zext i32 %17 to i64
  br label %21

21:                                               ; preds = %42, %19
  %22 = phi i64 [ 0, %19 ], [ %43, %42 ]
  %23 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %13, i64 %22
  %24 = bitcast %"class.WTF::AtomicString"* %23 to i8**
  %25 = load i8*, i8** %24, align 8
  %26 = bitcast i8* %25 to %"class.WTF::StringImpl"*
  %27 = ptrtoint i8* %25 to i64
  switch i64 %27, label %28 [
    i64 -1, label %42
    i64 0, label %42
  ]

28:                                               ; preds = %21
  %29 = getelementptr inbounds i8, i8* %25, i64 8
  %30 = bitcast i8* %29 to i32*
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = bitcast i8* %25 to i32*
  %35 = load i32, i32* %34, align 4
  br i1 %33, label %36, label %38

36:                                               ; preds = %28
  %37 = add i32 %35, -1
  store i32 %37, i32* %34, align 4
  br label %38

38:                                               ; preds = %36, %28
  %39 = phi i32 [ %37, %36 ], [ %35, %28 ]
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %26) #14
  br label %42

42:                                               ; preds = %41, %38, %21, %21
  %43 = add nuw nsw i64 %22, 1
  %44 = icmp eq i64 %43, %20
  br i1 %44, label %45, label %21

45:                                               ; preds = %42, %15
  %46 = bitcast %"class.WTF::AtomicString"* %13 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %46) #14
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %12, align 8
  br label %47

47:                                               ; preds = %11, %45
  %48 = bitcast %"class.WTF::HashSet"* %9 to i8*
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %48) #14
  %49 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.2", %"union.blink::InvalidationSet::Backing.2"* %0, i64 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %49, align 8
  br label %68

50:                                               ; preds = %2
  %51 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.2", %"union.blink::InvalidationSet::Backing.2"* %0, i64 0, i32 0
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %68, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  br i1 %58, label %61, label %63

61:                                               ; preds = %54
  %62 = add i32 %60, -1
  store i32 %62, i32* %59, align 4
  br label %63

63:                                               ; preds = %61, %54
  %64 = phi i32 [ %62, %61 ], [ %60, %54 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %52) #14
  br label %67

67:                                               ; preds = %63, %66
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %51, align 8
  br label %68

68:                                               ; preds = %7, %50, %67, %47
  %69 = load i8, i8* %3, align 1
  %70 = and i8 %69, -5
  store i8 %70, i8* %3, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5ClearERNS0_12BackingFlagsE(%"union.blink::InvalidationSet::Backing.3"*, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.blink::InvalidationSet::BackingFlags", %"class.blink::InvalidationSet::BackingFlags"* %1, i64 0, i32 0
  %4 = load i8, i8* %3, align 1
  %5 = and i8 %4, 8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %50, label %7

7:                                                ; preds = %2
  %8 = bitcast %"union.blink::InvalidationSet::Backing.3"* %0 to %"class.WTF::HashSet"**
  %9 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %8, align 8
  %10 = icmp eq %"class.WTF::HashSet"* %9, null
  br i1 %10, label %68, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %9, i64 0, i32 0, i32 0
  %13 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %12, align 8
  %14 = icmp eq %"class.WTF::AtomicString"* %13, null
  br i1 %14, label %47, label %15, !prof !27

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %9, i64 0, i32 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %45, label %19

19:                                               ; preds = %15
  %20 = zext i32 %17 to i64
  br label %21

21:                                               ; preds = %42, %19
  %22 = phi i64 [ 0, %19 ], [ %43, %42 ]
  %23 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %13, i64 %22
  %24 = bitcast %"class.WTF::AtomicString"* %23 to i8**
  %25 = load i8*, i8** %24, align 8
  %26 = bitcast i8* %25 to %"class.WTF::StringImpl"*
  %27 = ptrtoint i8* %25 to i64
  switch i64 %27, label %28 [
    i64 -1, label %42
    i64 0, label %42
  ]

28:                                               ; preds = %21
  %29 = getelementptr inbounds i8, i8* %25, i64 8
  %30 = bitcast i8* %29 to i32*
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = bitcast i8* %25 to i32*
  %35 = load i32, i32* %34, align 4
  br i1 %33, label %36, label %38

36:                                               ; preds = %28
  %37 = add i32 %35, -1
  store i32 %37, i32* %34, align 4
  br label %38

38:                                               ; preds = %36, %28
  %39 = phi i32 [ %37, %36 ], [ %35, %28 ]
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %26) #14
  br label %42

42:                                               ; preds = %41, %38, %21, %21
  %43 = add nuw nsw i64 %22, 1
  %44 = icmp eq i64 %43, %20
  br i1 %44, label %45, label %21

45:                                               ; preds = %42, %15
  %46 = bitcast %"class.WTF::AtomicString"* %13 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %46) #14
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %12, align 8
  br label %47

47:                                               ; preds = %11, %45
  %48 = bitcast %"class.WTF::HashSet"* %9 to i8*
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %48) #14
  %49 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.3", %"union.blink::InvalidationSet::Backing.3"* %0, i64 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %49, align 8
  br label %68

50:                                               ; preds = %2
  %51 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.3", %"union.blink::InvalidationSet::Backing.3"* %0, i64 0, i32 0
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %68, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  br i1 %58, label %61, label %63

61:                                               ; preds = %54
  %62 = add i32 %60, -1
  store i32 %62, i32* %59, align 4
  br label %63

63:                                               ; preds = %61, %54
  %64 = phi i32 [ %62, %61 ], [ %60, %54 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %52) #14
  br label %67

67:                                               ; preds = %63, %66
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %51, align 8
  br label %68

68:                                               ; preds = %7, %50, %67, %47
  %69 = load i8, i8* %3, align 1
  %70 = and i8 %69, -9
  store i8 %70, i8* %3, align 1
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink15InvalidationSet16HasEmptyBackingsEv(%"class.blink::InvalidationSet"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7, i32 0
  %3 = load i8, i8* %2, align 1
  %4 = and i8 %3, 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %31

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 2, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  %10 = and i8 %3, 2
  %11 = icmp eq i8 %10, 0
  %12 = and i1 %11, %9
  br i1 %12, label %13, label %31

13:                                               ; preds = %6
  %14 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 3, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  %17 = and i8 %3, 4
  %18 = icmp eq i8 %17, 0
  %19 = and i1 %18, %16
  br i1 %19, label %20, label %31

20:                                               ; preds = %13
  %21 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 4, i32 0
  %22 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %21, align 8
  %23 = icmp eq %"class.WTF::StringImpl"* %22, null
  %24 = and i8 %3, 8
  %25 = icmp eq i8 %24, 0
  %26 = and i1 %25, %23
  br i1 %26, label %27, label %31

27:                                               ; preds = %20
  %28 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 5, i32 0
  %29 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %28, align 8
  %30 = icmp eq %"class.WTF::StringImpl"* %29, null
  br label %31

31:                                               ; preds = %1, %27, %20, %13, %6
  %32 = phi i1 [ false, %20 ], [ false, %13 ], [ false, %6 ], [ %30, %27 ], [ false, %1 ]
  ret i1 %32
}

declare zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK5blink7Element29HasAttributeIgnoringNamespaceERKN3WTF12AtomicStringE(%"class.blink::Element"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE3AddERNS0_12BackingFlagsERKN3WTF12AtomicStringE(%"union.blink::InvalidationSet::Backing"*, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.WTF::AtomicString", align 8
  %5 = getelementptr inbounds %"class.blink::InvalidationSet::BackingFlags", %"class.blink::InvalidationSet::BackingFlags"* %1, i64 0, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = and i8 %6, 1
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %3
  %10 = bitcast %"union.blink::InvalidationSet::Backing"* %0 to %"class.WTF::HashSet"**
  %11 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %11, i64 0, i32 0
  %13 = tail call { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %12, %"class.WTF::AtomicString"* dereferenceable(8) %2, %"class.WTF::AtomicString"* dereferenceable(8) %2) #14
  br label %111

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"union.blink::InvalidationSet::Backing", %"union.blink::InvalidationSet::Backing"* %0, i64 0, i32 0
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %17 = icmp eq %"class.WTF::StringImpl"* %16, null
  %18 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  br i1 %17, label %94, label %20

20:                                               ; preds = %14
  %21 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* nonnull %16, %"class.WTF::StringImpl"* %19) #14
  br i1 %21, label %111, label %22

22:                                               ; preds = %20
  %23 = bitcast %"class.WTF::AtomicString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #14
  %24 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %24, align 8
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %50, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 acquire, align 4
  %30 = and i32 %29, 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %48, label %32

32:                                               ; preds = %27
  %33 = load atomic i32, i32* %28 monotonic, align 4
  %34 = and i32 %33, 2
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %50

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i33
  %40 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %39, i33 1) #14
  %41 = extractvalue { i33, i1 } %40, 1
  %42 = extractvalue { i33, i1 } %40, 0
  %43 = icmp slt i33 %42, 0
  %44 = or i1 %41, %43
  br i1 %44, label %45, label %46, !prof !5

45:                                               ; preds = %36
  tail call void @llvm.trap() #14
  unreachable

46:                                               ; preds = %36
  %47 = trunc i33 %42 to i32
  store i32 %47, i32* %37, align 4
  br label %50

48:                                               ; preds = %27
  %49 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %25) #14
  br label %50

50:                                               ; preds = %22, %32, %46, %48
  %51 = phi %"class.WTF::StringImpl"* [ %49, %48 ], [ %25, %32 ], [ %25, %46 ], [ null, %22 ]
  %52 = ptrtoint %"class.WTF::StringImpl"* %51 to i64
  %53 = bitcast %"class.WTF::AtomicString"* %4 to i64*
  store i64 %52, i64* %53, align 8
  %54 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  br i1 %58, label %61, label %63

61:                                               ; preds = %50
  %62 = add i32 %60, -1
  store i32 %62, i32* %59, align 4
  br label %63

63:                                               ; preds = %61, %50
  %64 = phi i32 [ %62, %61 ], [ %60, %50 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* %54) #14
  br label %67

67:                                               ; preds = %63, %66
  %68 = tail call i8* @_ZN3WTF10Partitions10FastMallocEmPKc(i64 24, i8* getelementptr inbounds ([163 x i8], [163 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_7HashSetINS_12AtomicStringENS_16AtomicStringHashENS_10HashTraitsIS2_EENS_18PartitionAllocatorEEEEEPKcv, i64 0, i64 0)) #14
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %68, i8 0, i64 20, i1 false) #14
  %69 = bitcast %"union.blink::InvalidationSet::Backing"* %0 to %"class.WTF::HashSet"**
  %70 = bitcast %"union.blink::InvalidationSet::Backing"* %0 to i8**
  store i8* %68, i8** %70, align 8
  %71 = bitcast i8* %68 to %"class.WTF::HashTable"*
  %72 = call { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_RS1_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %71, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %4, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %4) #14
  %73 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %69, align 8
  %74 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %73, i64 0, i32 0
  %75 = call { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %74, %"class.WTF::AtomicString"* dereferenceable(8) %2, %"class.WTF::AtomicString"* dereferenceable(8) %2) #14
  %76 = load i8, i8* %5, align 1
  %77 = or i8 %76, 1
  store i8 %77, i8* %5, align 1
  %78 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %79 = icmp eq %"class.WTF::StringImpl"* %78, null
  br i1 %79, label %93, label %80

80:                                               ; preds = %67
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load atomic i32, i32* %81 monotonic, align 4
  %83 = and i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %86 = load i32, i32* %85, align 4
  br i1 %84, label %87, label %89

87:                                               ; preds = %80
  %88 = add i32 %86, -1
  store i32 %88, i32* %85, align 4
  br label %89

89:                                               ; preds = %87, %80
  %90 = phi i32 [ %88, %87 ], [ %86, %80 ]
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %78) #14
  br label %93

93:                                               ; preds = %67, %89, %92
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #14
  br label %111

94:                                               ; preds = %14
  store %"class.WTF::StringImpl"* %19, %"class.WTF::StringImpl"** %15, align 8
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %96 = load atomic i32, i32* %95 monotonic, align 4
  %97 = and i32 %96, 2
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %111

99:                                               ; preds = %94
  %100 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 0
  %101 = load i32, i32* %100, align 4
  %102 = zext i32 %101 to i33
  %103 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %102, i33 1) #14
  %104 = extractvalue { i33, i1 } %103, 1
  %105 = extractvalue { i33, i1 } %103, 0
  %106 = icmp slt i33 %105, 0
  %107 = or i1 %104, %106
  br i1 %107, label %108, label %109, !prof !5

108:                                              ; preds = %99
  tail call void @llvm.trap() #14
  unreachable

109:                                              ; preds = %99
  %110 = trunc i33 %105 to i32
  store i32 %110, i32* %100, align 4
  br label %111

111:                                              ; preds = %109, %94, %93, %20, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE3AddERNS0_12BackingFlagsERKN3WTF12AtomicStringE(%"union.blink::InvalidationSet::Backing.1"*, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.WTF::AtomicString", align 8
  %5 = getelementptr inbounds %"class.blink::InvalidationSet::BackingFlags", %"class.blink::InvalidationSet::BackingFlags"* %1, i64 0, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = and i8 %6, 2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %3
  %10 = bitcast %"union.blink::InvalidationSet::Backing.1"* %0 to %"class.WTF::HashSet"**
  %11 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %11, i64 0, i32 0
  %13 = tail call { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %12, %"class.WTF::AtomicString"* dereferenceable(8) %2, %"class.WTF::AtomicString"* dereferenceable(8) %2) #14
  br label %111

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.1", %"union.blink::InvalidationSet::Backing.1"* %0, i64 0, i32 0
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %17 = icmp eq %"class.WTF::StringImpl"* %16, null
  %18 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  br i1 %17, label %94, label %20

20:                                               ; preds = %14
  %21 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* nonnull %16, %"class.WTF::StringImpl"* %19) #14
  br i1 %21, label %111, label %22

22:                                               ; preds = %20
  %23 = bitcast %"class.WTF::AtomicString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #14
  %24 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %24, align 8
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %50, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 acquire, align 4
  %30 = and i32 %29, 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %48, label %32

32:                                               ; preds = %27
  %33 = load atomic i32, i32* %28 monotonic, align 4
  %34 = and i32 %33, 2
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %50

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i33
  %40 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %39, i33 1) #14
  %41 = extractvalue { i33, i1 } %40, 1
  %42 = extractvalue { i33, i1 } %40, 0
  %43 = icmp slt i33 %42, 0
  %44 = or i1 %41, %43
  br i1 %44, label %45, label %46, !prof !5

45:                                               ; preds = %36
  tail call void @llvm.trap() #14
  unreachable

46:                                               ; preds = %36
  %47 = trunc i33 %42 to i32
  store i32 %47, i32* %37, align 4
  br label %50

48:                                               ; preds = %27
  %49 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %25) #14
  br label %50

50:                                               ; preds = %22, %32, %46, %48
  %51 = phi %"class.WTF::StringImpl"* [ %49, %48 ], [ %25, %32 ], [ %25, %46 ], [ null, %22 ]
  %52 = ptrtoint %"class.WTF::StringImpl"* %51 to i64
  %53 = bitcast %"class.WTF::AtomicString"* %4 to i64*
  store i64 %52, i64* %53, align 8
  %54 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  br i1 %58, label %61, label %63

61:                                               ; preds = %50
  %62 = add i32 %60, -1
  store i32 %62, i32* %59, align 4
  br label %63

63:                                               ; preds = %61, %50
  %64 = phi i32 [ %62, %61 ], [ %60, %50 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* %54) #14
  br label %67

67:                                               ; preds = %63, %66
  %68 = tail call i8* @_ZN3WTF10Partitions10FastMallocEmPKc(i64 24, i8* getelementptr inbounds ([163 x i8], [163 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_7HashSetINS_12AtomicStringENS_16AtomicStringHashENS_10HashTraitsIS2_EENS_18PartitionAllocatorEEEEEPKcv, i64 0, i64 0)) #14
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %68, i8 0, i64 20, i1 false) #14
  %69 = bitcast %"union.blink::InvalidationSet::Backing.1"* %0 to %"class.WTF::HashSet"**
  %70 = bitcast %"union.blink::InvalidationSet::Backing.1"* %0 to i8**
  store i8* %68, i8** %70, align 8
  %71 = bitcast i8* %68 to %"class.WTF::HashTable"*
  %72 = call { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_RS1_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %71, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %4, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %4) #14
  %73 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %69, align 8
  %74 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %73, i64 0, i32 0
  %75 = call { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %74, %"class.WTF::AtomicString"* dereferenceable(8) %2, %"class.WTF::AtomicString"* dereferenceable(8) %2) #14
  %76 = load i8, i8* %5, align 1
  %77 = or i8 %76, 2
  store i8 %77, i8* %5, align 1
  %78 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %79 = icmp eq %"class.WTF::StringImpl"* %78, null
  br i1 %79, label %93, label %80

80:                                               ; preds = %67
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load atomic i32, i32* %81 monotonic, align 4
  %83 = and i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %86 = load i32, i32* %85, align 4
  br i1 %84, label %87, label %89

87:                                               ; preds = %80
  %88 = add i32 %86, -1
  store i32 %88, i32* %85, align 4
  br label %89

89:                                               ; preds = %87, %80
  %90 = phi i32 [ %88, %87 ], [ %86, %80 ]
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %78) #14
  br label %93

93:                                               ; preds = %67, %89, %92
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #14
  br label %111

94:                                               ; preds = %14
  store %"class.WTF::StringImpl"* %19, %"class.WTF::StringImpl"** %15, align 8
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %96 = load atomic i32, i32* %95 monotonic, align 4
  %97 = and i32 %96, 2
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %111

99:                                               ; preds = %94
  %100 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 0
  %101 = load i32, i32* %100, align 4
  %102 = zext i32 %101 to i33
  %103 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %102, i33 1) #14
  %104 = extractvalue { i33, i1 } %103, 1
  %105 = extractvalue { i33, i1 } %103, 0
  %106 = icmp slt i33 %105, 0
  %107 = or i1 %104, %106
  br i1 %107, label %108, label %109, !prof !5

108:                                              ; preds = %99
  tail call void @llvm.trap() #14
  unreachable

109:                                              ; preds = %99
  %110 = trunc i33 %105 to i32
  store i32 %110, i32* %100, align 4
  br label %111

111:                                              ; preds = %109, %94, %93, %20, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE3AddERNS0_12BackingFlagsERKN3WTF12AtomicStringE(%"union.blink::InvalidationSet::Backing.2"*, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.WTF::AtomicString", align 8
  %5 = getelementptr inbounds %"class.blink::InvalidationSet::BackingFlags", %"class.blink::InvalidationSet::BackingFlags"* %1, i64 0, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = and i8 %6, 4
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %3
  %10 = bitcast %"union.blink::InvalidationSet::Backing.2"* %0 to %"class.WTF::HashSet"**
  %11 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %11, i64 0, i32 0
  %13 = tail call { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %12, %"class.WTF::AtomicString"* dereferenceable(8) %2, %"class.WTF::AtomicString"* dereferenceable(8) %2) #14
  br label %111

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.2", %"union.blink::InvalidationSet::Backing.2"* %0, i64 0, i32 0
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %17 = icmp eq %"class.WTF::StringImpl"* %16, null
  %18 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  br i1 %17, label %94, label %20

20:                                               ; preds = %14
  %21 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* nonnull %16, %"class.WTF::StringImpl"* %19) #14
  br i1 %21, label %111, label %22

22:                                               ; preds = %20
  %23 = bitcast %"class.WTF::AtomicString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #14
  %24 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %24, align 8
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %50, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 acquire, align 4
  %30 = and i32 %29, 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %48, label %32

32:                                               ; preds = %27
  %33 = load atomic i32, i32* %28 monotonic, align 4
  %34 = and i32 %33, 2
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %50

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i33
  %40 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %39, i33 1) #14
  %41 = extractvalue { i33, i1 } %40, 1
  %42 = extractvalue { i33, i1 } %40, 0
  %43 = icmp slt i33 %42, 0
  %44 = or i1 %41, %43
  br i1 %44, label %45, label %46, !prof !5

45:                                               ; preds = %36
  tail call void @llvm.trap() #14
  unreachable

46:                                               ; preds = %36
  %47 = trunc i33 %42 to i32
  store i32 %47, i32* %37, align 4
  br label %50

48:                                               ; preds = %27
  %49 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %25) #14
  br label %50

50:                                               ; preds = %22, %32, %46, %48
  %51 = phi %"class.WTF::StringImpl"* [ %49, %48 ], [ %25, %32 ], [ %25, %46 ], [ null, %22 ]
  %52 = ptrtoint %"class.WTF::StringImpl"* %51 to i64
  %53 = bitcast %"class.WTF::AtomicString"* %4 to i64*
  store i64 %52, i64* %53, align 8
  %54 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  br i1 %58, label %61, label %63

61:                                               ; preds = %50
  %62 = add i32 %60, -1
  store i32 %62, i32* %59, align 4
  br label %63

63:                                               ; preds = %61, %50
  %64 = phi i32 [ %62, %61 ], [ %60, %50 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* %54) #14
  br label %67

67:                                               ; preds = %63, %66
  %68 = tail call i8* @_ZN3WTF10Partitions10FastMallocEmPKc(i64 24, i8* getelementptr inbounds ([163 x i8], [163 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_7HashSetINS_12AtomicStringENS_16AtomicStringHashENS_10HashTraitsIS2_EENS_18PartitionAllocatorEEEEEPKcv, i64 0, i64 0)) #14
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %68, i8 0, i64 20, i1 false) #14
  %69 = bitcast %"union.blink::InvalidationSet::Backing.2"* %0 to %"class.WTF::HashSet"**
  %70 = bitcast %"union.blink::InvalidationSet::Backing.2"* %0 to i8**
  store i8* %68, i8** %70, align 8
  %71 = bitcast i8* %68 to %"class.WTF::HashTable"*
  %72 = call { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_RS1_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %71, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %4, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %4) #14
  %73 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %69, align 8
  %74 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %73, i64 0, i32 0
  %75 = call { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %74, %"class.WTF::AtomicString"* dereferenceable(8) %2, %"class.WTF::AtomicString"* dereferenceable(8) %2) #14
  %76 = load i8, i8* %5, align 1
  %77 = or i8 %76, 4
  store i8 %77, i8* %5, align 1
  %78 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %79 = icmp eq %"class.WTF::StringImpl"* %78, null
  br i1 %79, label %93, label %80

80:                                               ; preds = %67
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load atomic i32, i32* %81 monotonic, align 4
  %83 = and i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %86 = load i32, i32* %85, align 4
  br i1 %84, label %87, label %89

87:                                               ; preds = %80
  %88 = add i32 %86, -1
  store i32 %88, i32* %85, align 4
  br label %89

89:                                               ; preds = %87, %80
  %90 = phi i32 [ %88, %87 ], [ %86, %80 ]
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %78) #14
  br label %93

93:                                               ; preds = %67, %89, %92
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #14
  br label %111

94:                                               ; preds = %14
  store %"class.WTF::StringImpl"* %19, %"class.WTF::StringImpl"** %15, align 8
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %96 = load atomic i32, i32* %95 monotonic, align 4
  %97 = and i32 %96, 2
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %111

99:                                               ; preds = %94
  %100 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 0
  %101 = load i32, i32* %100, align 4
  %102 = zext i32 %101 to i33
  %103 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %102, i33 1) #14
  %104 = extractvalue { i33, i1 } %103, 1
  %105 = extractvalue { i33, i1 } %103, 0
  %106 = icmp slt i33 %105, 0
  %107 = or i1 %104, %106
  br i1 %107, label %108, label %109, !prof !5

108:                                              ; preds = %99
  tail call void @llvm.trap() #14
  unreachable

109:                                              ; preds = %99
  %110 = trunc i33 %105 to i32
  store i32 %110, i32* %100, align 4
  br label %111

111:                                              ; preds = %109, %94, %93, %20, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE3AddERNS0_12BackingFlagsERKN3WTF12AtomicStringE(%"union.blink::InvalidationSet::Backing.3"*, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.WTF::AtomicString", align 8
  %5 = getelementptr inbounds %"class.blink::InvalidationSet::BackingFlags", %"class.blink::InvalidationSet::BackingFlags"* %1, i64 0, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = and i8 %6, 8
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %3
  %10 = bitcast %"union.blink::InvalidationSet::Backing.3"* %0 to %"class.WTF::HashSet"**
  %11 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %11, i64 0, i32 0
  %13 = tail call { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %12, %"class.WTF::AtomicString"* dereferenceable(8) %2, %"class.WTF::AtomicString"* dereferenceable(8) %2) #14
  br label %111

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.3", %"union.blink::InvalidationSet::Backing.3"* %0, i64 0, i32 0
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %17 = icmp eq %"class.WTF::StringImpl"* %16, null
  %18 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  br i1 %17, label %94, label %20

20:                                               ; preds = %14
  %21 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* nonnull %16, %"class.WTF::StringImpl"* %19) #14
  br i1 %21, label %111, label %22

22:                                               ; preds = %20
  %23 = bitcast %"class.WTF::AtomicString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #14
  %24 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %24, align 8
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %50, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 acquire, align 4
  %30 = and i32 %29, 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %48, label %32

32:                                               ; preds = %27
  %33 = load atomic i32, i32* %28 monotonic, align 4
  %34 = and i32 %33, 2
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %50

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %25, i64 0, i32 0
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i33
  %40 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %39, i33 1) #14
  %41 = extractvalue { i33, i1 } %40, 1
  %42 = extractvalue { i33, i1 } %40, 0
  %43 = icmp slt i33 %42, 0
  %44 = or i1 %41, %43
  br i1 %44, label %45, label %46, !prof !5

45:                                               ; preds = %36
  tail call void @llvm.trap() #14
  unreachable

46:                                               ; preds = %36
  %47 = trunc i33 %42 to i32
  store i32 %47, i32* %37, align 4
  br label %50

48:                                               ; preds = %27
  %49 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %25) #14
  br label %50

50:                                               ; preds = %22, %32, %46, %48
  %51 = phi %"class.WTF::StringImpl"* [ %49, %48 ], [ %25, %32 ], [ %25, %46 ], [ null, %22 ]
  %52 = ptrtoint %"class.WTF::StringImpl"* %51 to i64
  %53 = bitcast %"class.WTF::AtomicString"* %4 to i64*
  store i64 %52, i64* %53, align 8
  %54 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  br i1 %58, label %61, label %63

61:                                               ; preds = %50
  %62 = add i32 %60, -1
  store i32 %62, i32* %59, align 4
  br label %63

63:                                               ; preds = %61, %50
  %64 = phi i32 [ %62, %61 ], [ %60, %50 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* %54) #14
  br label %67

67:                                               ; preds = %63, %66
  %68 = tail call i8* @_ZN3WTF10Partitions10FastMallocEmPKc(i64 24, i8* getelementptr inbounds ([163 x i8], [163 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_7HashSetINS_12AtomicStringENS_16AtomicStringHashENS_10HashTraitsIS2_EENS_18PartitionAllocatorEEEEEPKcv, i64 0, i64 0)) #14
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %68, i8 0, i64 20, i1 false) #14
  %69 = bitcast %"union.blink::InvalidationSet::Backing.3"* %0 to %"class.WTF::HashSet"**
  %70 = bitcast %"union.blink::InvalidationSet::Backing.3"* %0 to i8**
  store i8* %68, i8** %70, align 8
  %71 = bitcast i8* %68 to %"class.WTF::HashTable"*
  %72 = call { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_RS1_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %71, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %4, %"class.WTF::AtomicString"* nonnull dereferenceable(8) %4) #14
  %73 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %69, align 8
  %74 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %73, i64 0, i32 0
  %75 = call { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"* %74, %"class.WTF::AtomicString"* dereferenceable(8) %2, %"class.WTF::AtomicString"* dereferenceable(8) %2) #14
  %76 = load i8, i8* %5, align 1
  %77 = or i8 %76, 8
  store i8 %77, i8* %5, align 1
  %78 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %79 = icmp eq %"class.WTF::StringImpl"* %78, null
  br i1 %79, label %93, label %80

80:                                               ; preds = %67
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load atomic i32, i32* %81 monotonic, align 4
  %83 = and i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %86 = load i32, i32* %85, align 4
  br i1 %84, label %87, label %89

87:                                               ; preds = %80
  %88 = add i32 %86, -1
  store i32 %88, i32* %85, align 4
  br label %89

89:                                               ; preds = %87, %80
  %90 = phi i32 [ %88, %87 ], [ %86, %80 ]
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %78) #14
  br label %93

93:                                               ; preds = %67, %89, %92
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #14
  br label %111

94:                                               ; preds = %14
  store %"class.WTF::StringImpl"* %19, %"class.WTF::StringImpl"** %15, align 8
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %96 = load atomic i32, i32* %95 monotonic, align 4
  %97 = and i32 %96, 2
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %111

99:                                               ; preds = %94
  %100 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 0
  %101 = load i32, i32* %100, align 4
  %102 = zext i32 %101 to i33
  %103 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %102, i33 1) #14
  %104 = extractvalue { i33, i1 } %103, 1
  %105 = extractvalue { i33, i1 } %103, 0
  %106 = icmp slt i33 %105, 0
  %107 = or i1 %104, %106
  br i1 %107, label %108, label %109, !prof !5

108:                                              ; preds = %99
  tail call void @llvm.trap() #14
  unreachable

109:                                              ; preds = %99
  %110 = trunc i33 %105 to i32
  store i32 %110, i32* %100, align 4
  br label %111

111:                                              ; preds = %109, %94, %93, %20, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::InvalidationSet"* @_ZN5blink15InvalidationSet19SelfInvalidationSetEv() local_unnamed_addr #0 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink15InvalidationSet19SelfInvalidationSetEvE10singleton_ to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %19, !prof !52

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink15InvalidationSet19SelfInvalidationSetEvE10singleton_) #14
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %19, label %6

6:                                                ; preds = %3
  %7 = tail call noalias i8* @malloc(i64 48) #14
  %8 = bitcast i8* %7 to i32*
  store i32 1, i32* %8, align 4
  %9 = getelementptr inbounds i8, i8* %7, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 34, i1 false) #14
  %10 = getelementptr inbounds i8, i8* %7, i64 42
  store i8 12, i8* %10, align 2
  %11 = bitcast i8* %7 to %"class.blink::InvalidationSet"*
  %12 = icmp eq i8* %7, null
  br i1 %12, label %18, label %13

13:                                               ; preds = %6
  %14 = bitcast i8* %7 to %"class.base::subtle::RefCountedBase"*
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* nonnull %14) #14
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* nonnull %14) #14
  %15 = load i32, i32* %8, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  tail call void @_ZNK5blink15InvalidationSet7DestroyEv(%"class.blink::InvalidationSet"* nonnull %11) #14
  br label %18

18:                                               ; preds = %17, %13, %6
  store i8* %7, i8** bitcast (%"class.blink::InvalidationSet"** @_ZZN5blink15InvalidationSet19SelfInvalidationSetEvE10singleton_ to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink15InvalidationSet19SelfInvalidationSetEvE10singleton_) #14
  br label %19

19:                                               ; preds = %3, %18, %0
  %20 = load %"class.blink::InvalidationSet"*, %"class.blink::InvalidationSet"** @_ZZN5blink15InvalidationSet19SelfInvalidationSetEvE10singleton_, align 8
  ret %"class.blink::InvalidationSet"* %20
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::InvalidationSet"* @_ZN5blink15InvalidationSet19PartInvalidationSetEv() local_unnamed_addr #0 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink15InvalidationSet19PartInvalidationSetEvE10singleton_ to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %20, !prof !52

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink15InvalidationSet19PartInvalidationSetEvE10singleton_) #14
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %20, label %6

6:                                                ; preds = %3
  %7 = tail call noalias i8* @malloc(i64 48) #14
  %8 = bitcast i8* %7 to i32*
  store i32 1, i32* %8, align 4
  %9 = getelementptr inbounds i8, i8* %7, i64 8
  %10 = getelementptr inbounds i8, i8* %7, i64 42
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 34, i1 false) #14
  store i8 8, i8* %10, align 2
  %11 = getelementptr inbounds i8, i8* %7, i64 40
  store i8 36, i8* %11, align 1
  %12 = bitcast i8* %7 to %"class.blink::InvalidationSet"*
  %13 = icmp eq i8* %7, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %6
  %15 = bitcast i8* %7 to %"class.base::subtle::RefCountedBase"*
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* nonnull %15) #14
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* nonnull %15) #14
  %16 = load i32, i32* %8, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %14
  tail call void @_ZNK5blink15InvalidationSet7DestroyEv(%"class.blink::InvalidationSet"* nonnull %12) #14
  br label %19

19:                                               ; preds = %18, %14, %6
  store i8* %7, i8** bitcast (%"class.blink::InvalidationSet"** @_ZZN5blink15InvalidationSet19PartInvalidationSetEvE10singleton_ to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink15InvalidationSet19PartInvalidationSetEvE10singleton_) #14
  br label %20

20:                                               ; preds = %3, %19, %0
  %21 = load %"class.blink::InvalidationSet"*, %"class.blink::InvalidationSet"** @_ZZN5blink15InvalidationSet19PartInvalidationSetEvE10singleton_, align 8
  ret %"class.blink::InvalidationSet"* %21
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink15InvalidationSet14WriteIntoTraceEN8perfetto11TracedValueE(%"class.blink::InvalidationSet"*, %"class.perfetto::TracedValue"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.perfetto::TracedValue", align 8
  %4 = alloca %"class.perfetto::TracedValue", align 8
  %5 = alloca %"class.perfetto::TracedValue", align 8
  %6 = alloca %"class.perfetto::TracedValue", align 8
  %7 = alloca %"class.perfetto::TracedValue", align 8
  %8 = alloca %"class.perfetto::TracedValue", align 8
  %9 = alloca %"class.perfetto::TracedValue", align 8
  %10 = alloca %"class.perfetto::TracedValue", align 8
  %11 = alloca %"class.perfetto::TracedValue", align 8
  %12 = alloca %"class.perfetto::TracedValue", align 8
  %13 = alloca %"class.perfetto::TracedValue", align 8
  %14 = alloca %"class.perfetto::TracedValue", align 8
  %15 = alloca %"class.perfetto::TracedValue", align 8
  %16 = alloca %"class.perfetto::TracedValue", align 8
  %17 = alloca %"class.perfetto::TracedValue", align 8
  %18 = alloca %"class.perfetto::TracedValue", align 8
  %19 = alloca %"class.perfetto::TracedValue", align 8
  %20 = alloca %"class.perfetto::TracedValue", align 8
  %21 = alloca %"class.perfetto::TracedValue", align 8
  %22 = alloca %"class.perfetto::TracedValue", align 8
  %23 = alloca %"class.perfetto::TracedValue", align 8
  %24 = alloca %"class.perfetto::TracedValue", align 8
  %25 = alloca %"class.perfetto::TracedDictionary", align 8
  %26 = alloca %"class.WTF::String", align 8
  %27 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", align 8
  %28 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", align 8
  %29 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", align 8
  %30 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", align 8
  %31 = bitcast %"class.perfetto::TracedDictionary"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %31) #14
  %32 = bitcast %"class.perfetto::TracedDictionary"* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 -86, i64 16, i1 false)
  call void @_ZNO8perfetto11TracedValue15WriteDictionaryEv(%"class.perfetto::TracedDictionary"* nonnull sret %25, %"class.perfetto::TracedValue"* %1) #14
  %33 = bitcast %"class.WTF::String"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #14
  %34 = call %"class.WTF::StringImpl"* @_ZN5blink35DescendantInvalidationSetToIdStringERKNS_15InvalidationSetE(%"class.blink::InvalidationSet"* dereferenceable(48) %0) #14
  %35 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %26, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %34, %"class.WTF::StringImpl"** %35, align 8
  %36 = bitcast %"class.perfetto::TracedValue"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %36)
  call void @_ZN8perfetto16TracedDictionary7AddItemENS_12StaticStringE(%"class.perfetto::TracedValue"* nonnull sret %24, %"class.perfetto::TracedDictionary"* nonnull %25, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i64 0, i64 0)) #14
  %37 = bitcast %"class.perfetto::TracedValue"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %37, i8* nonnull align 8 %36, i64 16, i1 false) #14
  call void @_ZNK3WTF6String14WriteIntoTraceEN8perfetto11TracedValueE(%"class.WTF::String"* nonnull %26, %"class.perfetto::TracedValue"* nonnull %23) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %36)
  %38 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %35, align 8
  %39 = icmp eq %"class.WTF::StringImpl"* %38, null
  br i1 %39, label %53, label %40

40:                                               ; preds = %2
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load atomic i32, i32* %41 monotonic, align 4
  %43 = and i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  br i1 %44, label %47, label %49

47:                                               ; preds = %40
  %48 = add i32 %46, -1
  store i32 %48, i32* %45, align 4
  br label %49

49:                                               ; preds = %47, %40
  %50 = phi i32 [ %48, %47 ], [ %46, %40 ]
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %53

52:                                               ; preds = %49
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %38) #14
  br label %53

53:                                               ; preds = %2, %49, %52
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #14
  %54 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 6, i32 0
  %55 = load i8, i8* %54, align 1
  %56 = and i8 %55, 2
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %62, label %58

58:                                               ; preds = %53
  %59 = bitcast %"class.perfetto::TracedValue"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %59)
  call void @_ZN8perfetto16TracedDictionary7AddItemENS_12StaticStringE(%"class.perfetto::TracedValue"* nonnull sret %20, %"class.perfetto::TracedDictionary"* nonnull %25, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.19, i64 0, i64 0)) #14
  %60 = bitcast %"class.perfetto::TracedValue"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %60) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %60, i8* nonnull align 8 %59, i64 16, i1 false) #14
  call void @_ZNO8perfetto11TracedValue12WriteBooleanEb(%"class.perfetto::TracedValue"* nonnull %19, i1 zeroext true) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %60) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %59)
  %61 = load i8, i8* %54, align 1
  br label %62

62:                                               ; preds = %53, %58
  %63 = phi i8 [ %55, %53 ], [ %61, %58 ]
  %64 = and i8 %63, 1
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %70, label %66

66:                                               ; preds = %62
  %67 = bitcast %"class.perfetto::TracedValue"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %67)
  call void @_ZN8perfetto16TracedDictionary7AddItemENS_12StaticStringE(%"class.perfetto::TracedValue"* nonnull sret %18, %"class.perfetto::TracedDictionary"* nonnull %25, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.20, i64 0, i64 0)) #14
  %68 = bitcast %"class.perfetto::TracedValue"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %68) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %68, i8* nonnull align 8 %67, i64 16, i1 false) #14
  call void @_ZNO8perfetto11TracedValue12WriteBooleanEb(%"class.perfetto::TracedValue"* nonnull %17, i1 zeroext true) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %68) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %67)
  %69 = load i8, i8* %54, align 1
  br label %70

70:                                               ; preds = %62, %66
  %71 = phi i8 [ %63, %62 ], [ %69, %66 ]
  %72 = and i8 %71, 4
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %78, label %74

74:                                               ; preds = %70
  %75 = bitcast %"class.perfetto::TracedValue"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %75)
  call void @_ZN8perfetto16TracedDictionary7AddItemENS_12StaticStringE(%"class.perfetto::TracedValue"* nonnull sret %16, %"class.perfetto::TracedDictionary"* nonnull %25, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.21, i64 0, i64 0)) #14
  %76 = bitcast %"class.perfetto::TracedValue"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %76) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %76, i8* nonnull align 8 %75, i64 16, i1 false) #14
  call void @_ZNO8perfetto11TracedValue12WriteBooleanEb(%"class.perfetto::TracedValue"* nonnull %15, i1 zeroext true) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %76) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %75)
  %77 = load i8, i8* %54, align 1
  br label %78

78:                                               ; preds = %70, %74
  %79 = phi i8 [ %71, %70 ], [ %77, %74 ]
  %80 = and i8 %79, 8
  %81 = icmp eq i8 %80, 0
  br i1 %81, label %86, label %82

82:                                               ; preds = %78
  %83 = bitcast %"class.perfetto::TracedValue"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %83)
  call void @_ZN8perfetto16TracedDictionary7AddItemENS_12StaticStringE(%"class.perfetto::TracedValue"* nonnull sret %14, %"class.perfetto::TracedDictionary"* nonnull %25, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.22, i64 0, i64 0)) #14
  %84 = bitcast %"class.perfetto::TracedValue"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %84) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %84, i8* nonnull align 8 %83, i64 16, i1 false) #14
  call void @_ZNO8perfetto11TracedValue12WriteBooleanEb(%"class.perfetto::TracedValue"* nonnull %13, i1 zeroext true) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %84) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %83)
  %85 = load i8, i8* %54, align 1
  br label %86

86:                                               ; preds = %78, %82
  %87 = phi i8 [ %79, %78 ], [ %85, %82 ]
  %88 = and i8 %87, 16
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %94, label %90

90:                                               ; preds = %86
  %91 = bitcast %"class.perfetto::TracedValue"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %91)
  call void @_ZN8perfetto16TracedDictionary7AddItemENS_12StaticStringE(%"class.perfetto::TracedValue"* nonnull sret %12, %"class.perfetto::TracedDictionary"* nonnull %25, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.23, i64 0, i64 0)) #14
  %92 = bitcast %"class.perfetto::TracedValue"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %92) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %92, i8* nonnull align 8 %91, i64 16, i1 false) #14
  call void @_ZNO8perfetto11TracedValue12WriteBooleanEb(%"class.perfetto::TracedValue"* nonnull %11, i1 zeroext true) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %92) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %91)
  %93 = load i8, i8* %54, align 1
  br label %94

94:                                               ; preds = %86, %90
  %95 = phi i8 [ %87, %86 ], [ %93, %90 ]
  %96 = and i8 %95, 32
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %101, label %98

98:                                               ; preds = %94
  %99 = bitcast %"class.perfetto::TracedValue"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %99)
  call void @_ZN8perfetto16TracedDictionary7AddItemENS_12StaticStringE(%"class.perfetto::TracedValue"* nonnull sret %8, %"class.perfetto::TracedDictionary"* nonnull %25, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.24, i64 0, i64 0)) #14
  %100 = bitcast %"class.perfetto::TracedValue"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %100) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %100, i8* nonnull align 8 %99, i64 16, i1 false) #14
  call void @_ZNO8perfetto11TracedValue12WriteBooleanEb(%"class.perfetto::TracedValue"* nonnull %7, i1 zeroext true) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %100) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %99)
  br label %101

101:                                              ; preds = %94, %98
  %102 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7, i32 0
  %103 = load i8, i8* %102, align 1
  %104 = and i8 %103, 2
  %105 = icmp eq i8 %104, 0
  br i1 %105, label %106, label %110

106:                                              ; preds = %101
  %107 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 3, i32 0
  %108 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %107, align 8
  %109 = icmp eq %"class.WTF::StringImpl"* %108, null
  br i1 %109, label %151, label %110

110:                                              ; preds = %106, %101
  %111 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %111) #14
  %112 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 3
  %113 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7
  call void @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5ItemsERKNS0_12BackingFlagsE(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* nonnull sret %27, %"union.blink::InvalidationSet::Backing.1"* %112, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %113) #14
  %114 = bitcast %"class.perfetto::TracedValue"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %114)
  call void @_ZN8perfetto16TracedDictionary7AddItemENS_12StaticStringE(%"class.perfetto::TracedValue"* nonnull sret %6, %"class.perfetto::TracedDictionary"* nonnull %25, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i64 0, i64 0)) #14
  %115 = bitcast %"class.perfetto::TracedValue"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %115) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %115, i8* nonnull align 8 %114, i64 16, i1 false) #14
  call void @_ZN8perfetto8internal9WriteImplIN5blink15InvalidationSet7BackingILNS3_11BackingTypeE1EE5RangeEEENS_26check_traced_value_supportIDTdeclsr3stdE5beginclsr3stdE7declvalIRT_EEEEvvE4typeENS_4base12priority_tagILm1EEENS_11TracedValueEOS9_(%"class.perfetto::TracedValue"* nonnull %5, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* nonnull dereferenceable(64) %27) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %115) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %114)
  %116 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %27, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %117 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %116, align 8
  %118 = icmp eq %"class.WTF::StringImpl"* %117, null
  br i1 %118, label %132, label %119

119:                                              ; preds = %110
  %120 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %117, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %121 = load atomic i32, i32* %120 monotonic, align 4
  %122 = and i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %117, i64 0, i32 0
  %125 = load i32, i32* %124, align 4
  br i1 %123, label %126, label %128

126:                                              ; preds = %119
  %127 = add i32 %125, -1
  store i32 %127, i32* %124, align 4
  br label %128

128:                                              ; preds = %126, %119
  %129 = phi i32 [ %127, %126 ], [ %125, %119 ]
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %132

131:                                              ; preds = %128
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %117) #14
  br label %132

132:                                              ; preds = %131, %128, %110
  %133 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %27, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %134 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %133, align 8
  %135 = icmp eq %"class.WTF::StringImpl"* %134, null
  br i1 %135, label %149, label %136

136:                                              ; preds = %132
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %134, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %138 = load atomic i32, i32* %137 monotonic, align 4
  %139 = and i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %134, i64 0, i32 0
  %142 = load i32, i32* %141, align 4
  br i1 %140, label %143, label %145

143:                                              ; preds = %136
  %144 = add i32 %142, -1
  store i32 %144, i32* %141, align 4
  br label %145

145:                                              ; preds = %143, %136
  %146 = phi i32 [ %144, %143 ], [ %142, %136 ]
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %149

148:                                              ; preds = %145
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %134) #14
  br label %149

149:                                              ; preds = %132, %145, %148
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %111) #14
  %150 = load i8, i8* %102, align 1
  br label %151

151:                                              ; preds = %106, %149
  %152 = phi i8 [ %103, %106 ], [ %150, %149 ]
  %153 = and i8 %152, 1
  %154 = icmp eq i8 %153, 0
  br i1 %154, label %155, label %159

155:                                              ; preds = %151
  %156 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 2, i32 0
  %157 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %156, align 8
  %158 = icmp eq %"class.WTF::StringImpl"* %157, null
  br i1 %158, label %200, label %159

159:                                              ; preds = %155, %151
  %160 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %160) #14
  %161 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 2
  %162 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7
  call void @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5ItemsERKNS0_12BackingFlagsE(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* nonnull sret %28, %"union.blink::InvalidationSet::Backing"* %161, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %162) #14
  %163 = bitcast %"class.perfetto::TracedValue"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %163)
  call void @_ZN8perfetto16TracedDictionary7AddItemENS_12StaticStringE(%"class.perfetto::TracedValue"* nonnull sret %4, %"class.perfetto::TracedDictionary"* nonnull %25, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.26, i64 0, i64 0)) #14
  %164 = bitcast %"class.perfetto::TracedValue"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %164) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %164, i8* nonnull align 8 %163, i64 16, i1 false) #14
  call void @_ZN8perfetto8internal9WriteImplIN5blink15InvalidationSet7BackingILNS3_11BackingTypeE0EE5RangeEEENS_26check_traced_value_supportIDTdeclsr3stdE5beginclsr3stdE7declvalIRT_EEEEvvE4typeENS_4base12priority_tagILm1EEENS_11TracedValueEOS9_(%"class.perfetto::TracedValue"* nonnull %3, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* nonnull dereferenceable(64) %28) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %164) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %163)
  %165 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %28, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %166 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %165, align 8
  %167 = icmp eq %"class.WTF::StringImpl"* %166, null
  br i1 %167, label %181, label %168

168:                                              ; preds = %159
  %169 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %166, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %170 = load atomic i32, i32* %169 monotonic, align 4
  %171 = and i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %166, i64 0, i32 0
  %174 = load i32, i32* %173, align 4
  br i1 %172, label %175, label %177

175:                                              ; preds = %168
  %176 = add i32 %174, -1
  store i32 %176, i32* %173, align 4
  br label %177

177:                                              ; preds = %175, %168
  %178 = phi i32 [ %176, %175 ], [ %174, %168 ]
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %180, label %181

180:                                              ; preds = %177
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %166) #14
  br label %181

181:                                              ; preds = %180, %177, %159
  %182 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %28, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %183 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %182, align 8
  %184 = icmp eq %"class.WTF::StringImpl"* %183, null
  br i1 %184, label %198, label %185

185:                                              ; preds = %181
  %186 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %183, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %187 = load atomic i32, i32* %186 monotonic, align 4
  %188 = and i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %183, i64 0, i32 0
  %191 = load i32, i32* %190, align 4
  br i1 %189, label %192, label %194

192:                                              ; preds = %185
  %193 = add i32 %191, -1
  store i32 %193, i32* %190, align 4
  br label %194

194:                                              ; preds = %192, %185
  %195 = phi i32 [ %193, %192 ], [ %191, %185 ]
  %196 = icmp eq i32 %195, 0
  br i1 %196, label %197, label %198

197:                                              ; preds = %194
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %183) #14
  br label %198

198:                                              ; preds = %181, %194, %197
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %160) #14
  %199 = load i8, i8* %102, align 1
  br label %200

200:                                              ; preds = %155, %198
  %201 = phi i8 [ %152, %155 ], [ %199, %198 ]
  %202 = and i8 %201, 4
  %203 = icmp eq i8 %202, 0
  br i1 %203, label %204, label %208

204:                                              ; preds = %200
  %205 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 4, i32 0
  %206 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %205, align 8
  %207 = icmp eq %"class.WTF::StringImpl"* %206, null
  br i1 %207, label %249, label %208

208:                                              ; preds = %204, %200
  %209 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %209) #14
  %210 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 4
  %211 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7
  call void @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5ItemsERKNS0_12BackingFlagsE(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* nonnull sret %29, %"union.blink::InvalidationSet::Backing.2"* %210, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %211) #14
  %212 = bitcast %"class.perfetto::TracedValue"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %212)
  call void @_ZN8perfetto16TracedDictionary7AddItemENS_12StaticStringE(%"class.perfetto::TracedValue"* nonnull sret %10, %"class.perfetto::TracedDictionary"* nonnull %25, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.27, i64 0, i64 0)) #14
  %213 = bitcast %"class.perfetto::TracedValue"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %213) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %213, i8* nonnull align 8 %212, i64 16, i1 false) #14
  call void @_ZN8perfetto8internal9WriteImplIN5blink15InvalidationSet7BackingILNS3_11BackingTypeE2EE5RangeEEENS_26check_traced_value_supportIDTdeclsr3stdE5beginclsr3stdE7declvalIRT_EEEEvvE4typeENS_4base12priority_tagILm1EEENS_11TracedValueEOS9_(%"class.perfetto::TracedValue"* nonnull %9, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* nonnull dereferenceable(64) %29) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %213) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %212)
  %214 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %29, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %215 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %214, align 8
  %216 = icmp eq %"class.WTF::StringImpl"* %215, null
  br i1 %216, label %230, label %217

217:                                              ; preds = %208
  %218 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %215, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %219 = load atomic i32, i32* %218 monotonic, align 4
  %220 = and i32 %219, 2
  %221 = icmp eq i32 %220, 0
  %222 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %215, i64 0, i32 0
  %223 = load i32, i32* %222, align 4
  br i1 %221, label %224, label %226

224:                                              ; preds = %217
  %225 = add i32 %223, -1
  store i32 %225, i32* %222, align 4
  br label %226

226:                                              ; preds = %224, %217
  %227 = phi i32 [ %225, %224 ], [ %223, %217 ]
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %229, label %230

229:                                              ; preds = %226
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %215) #14
  br label %230

230:                                              ; preds = %229, %226, %208
  %231 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %29, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %232 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %231, align 8
  %233 = icmp eq %"class.WTF::StringImpl"* %232, null
  br i1 %233, label %247, label %234

234:                                              ; preds = %230
  %235 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %232, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %236 = load atomic i32, i32* %235 monotonic, align 4
  %237 = and i32 %236, 2
  %238 = icmp eq i32 %237, 0
  %239 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %232, i64 0, i32 0
  %240 = load i32, i32* %239, align 4
  br i1 %238, label %241, label %243

241:                                              ; preds = %234
  %242 = add i32 %240, -1
  store i32 %242, i32* %239, align 4
  br label %243

243:                                              ; preds = %241, %234
  %244 = phi i32 [ %242, %241 ], [ %240, %234 ]
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %246, label %247

246:                                              ; preds = %243
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %232) #14
  br label %247

247:                                              ; preds = %230, %243, %246
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %209) #14
  %248 = load i8, i8* %102, align 1
  br label %249

249:                                              ; preds = %204, %247
  %250 = phi i8 [ %201, %204 ], [ %248, %247 ]
  %251 = and i8 %250, 8
  %252 = icmp eq i8 %251, 0
  br i1 %252, label %253, label %257

253:                                              ; preds = %249
  %254 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 5, i32 0
  %255 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %254, align 8
  %256 = icmp eq %"class.WTF::StringImpl"* %255, null
  br i1 %256, label %297, label %257

257:                                              ; preds = %253, %249
  %258 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %258) #14
  %259 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 5
  %260 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7
  call void @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5ItemsERKNS0_12BackingFlagsE(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* nonnull sret %30, %"union.blink::InvalidationSet::Backing.3"* %259, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %260) #14
  %261 = bitcast %"class.perfetto::TracedValue"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %261)
  call void @_ZN8perfetto16TracedDictionary7AddItemENS_12StaticStringE(%"class.perfetto::TracedValue"* nonnull sret %22, %"class.perfetto::TracedDictionary"* nonnull %25, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i64 0, i64 0)) #14
  %262 = bitcast %"class.perfetto::TracedValue"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %262) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %262, i8* nonnull align 8 %261, i64 16, i1 false) #14
  call void @_ZN8perfetto8internal9WriteImplIN5blink15InvalidationSet7BackingILNS3_11BackingTypeE3EE5RangeEEENS_26check_traced_value_supportIDTdeclsr3stdE5beginclsr3stdE7declvalIRT_EEEEvvE4typeENS_4base12priority_tagILm1EEENS_11TracedValueEOS9_(%"class.perfetto::TracedValue"* nonnull %21, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* nonnull dereferenceable(64) %30) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %262) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %261)
  %263 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %30, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %264 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %263, align 8
  %265 = icmp eq %"class.WTF::StringImpl"* %264, null
  br i1 %265, label %279, label %266

266:                                              ; preds = %257
  %267 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %264, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %268 = load atomic i32, i32* %267 monotonic, align 4
  %269 = and i32 %268, 2
  %270 = icmp eq i32 %269, 0
  %271 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %264, i64 0, i32 0
  %272 = load i32, i32* %271, align 4
  br i1 %270, label %273, label %275

273:                                              ; preds = %266
  %274 = add i32 %272, -1
  store i32 %274, i32* %271, align 4
  br label %275

275:                                              ; preds = %273, %266
  %276 = phi i32 [ %274, %273 ], [ %272, %266 ]
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %278, label %279

278:                                              ; preds = %275
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %264) #14
  br label %279

279:                                              ; preds = %278, %275, %257
  %280 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %30, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %281 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %280, align 8
  %282 = icmp eq %"class.WTF::StringImpl"* %281, null
  br i1 %282, label %296, label %283

283:                                              ; preds = %279
  %284 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %281, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %285 = load atomic i32, i32* %284 monotonic, align 4
  %286 = and i32 %285, 2
  %287 = icmp eq i32 %286, 0
  %288 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %281, i64 0, i32 0
  %289 = load i32, i32* %288, align 4
  br i1 %287, label %290, label %292

290:                                              ; preds = %283
  %291 = add i32 %289, -1
  store i32 %291, i32* %288, align 4
  br label %292

292:                                              ; preds = %290, %283
  %293 = phi i32 [ %291, %290 ], [ %289, %283 ]
  %294 = icmp eq i32 %293, 0
  br i1 %294, label %295, label %296

295:                                              ; preds = %292
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %281) #14
  br label %296

296:                                              ; preds = %279, %292, %295
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %258) #14
  br label %297

297:                                              ; preds = %253, %296
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %31) #14
  ret void
}

declare void @_ZNO8perfetto11TracedValue15WriteDictionaryEv(%"class.perfetto::TracedDictionary"* sret, %"class.perfetto::TracedValue"*) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN5blink35DescendantInvalidationSetToIdStringERKNS_15InvalidationSetE(%"class.blink::InvalidationSet"* dereferenceable(48)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink15InvalidationSet8ToStringEv(%"class.blink::InvalidationSet"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, align 8
  %5 = alloca %"class.WTF::StringBuilder", align 8
  %6 = alloca %"class.WTF::Vector.712", align 8
  %7 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = alloca %"class.WTF::StringView", align 8
  %12 = alloca %"class.WTF::HashTableConstIterator", align 8
  %13 = alloca i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, align 8
  %14 = alloca %"class.WTF::StringBuilder", align 8
  %15 = alloca %"class.WTF::Vector.712", align 8
  %16 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", align 8
  %17 = alloca %"class.WTF::StringView", align 8
  %18 = alloca %"class.WTF::StringView", align 8
  %19 = alloca %"class.WTF::StringView", align 8
  %20 = alloca %"class.WTF::StringView", align 8
  %21 = alloca %"class.WTF::HashTableConstIterator", align 8
  %22 = alloca i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, align 8
  %23 = alloca %"class.WTF::StringBuilder", align 8
  %24 = alloca %"class.WTF::Vector.712", align 8
  %25 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", align 8
  %26 = alloca %"class.WTF::StringView", align 8
  %27 = alloca %"class.WTF::StringView", align 8
  %28 = alloca %"class.WTF::StringView", align 8
  %29 = alloca %"class.WTF::StringView", align 8
  %30 = alloca %"class.WTF::HashTableConstIterator", align 8
  %31 = alloca i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, align 8
  %32 = alloca %"class.WTF::StringBuilder", align 8
  %33 = alloca %"class.WTF::Vector.712", align 8
  %34 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", align 8
  %35 = alloca %"class.WTF::StringView", align 8
  %36 = alloca %"class.WTF::StringView", align 8
  %37 = alloca %"class.WTF::StringView", align 8
  %38 = alloca %"class.WTF::StringView", align 8
  %39 = alloca %"class.WTF::HashTableConstIterator", align 8
  %40 = alloca %"class.WTF::StringBuilder", align 8
  %41 = alloca %"class.WTF::StringView", align 8
  %42 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", align 8
  %43 = alloca %"class.WTF::StringView", align 8
  %44 = alloca %"class.WTF::StringView", align 8
  %45 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", align 8
  %46 = alloca %"class.WTF::StringView", align 8
  %47 = alloca %"class.WTF::StringView", align 8
  %48 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", align 8
  %49 = alloca %"class.WTF::StringView", align 8
  %50 = alloca %"class.WTF::StringView", align 8
  %51 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", align 8
  %52 = alloca %"class.WTF::StringBuilder", align 8
  %53 = alloca %"class.WTF::StringView", align 8
  %54 = alloca %"class.WTF::StringView", align 8
  %55 = alloca %"class.WTF::StringView", align 8
  %56 = alloca %"class.WTF::StringView", align 8
  %57 = alloca %"class.WTF::StringView", align 8
  %58 = alloca %"class.WTF::StringView", align 8
  %59 = alloca %"class.WTF::StringView", align 8
  %60 = alloca %"class.WTF::StringView", align 8
  %61 = alloca %"class.WTF::StringBuilder", align 8
  %62 = alloca %"class.WTF::StringView", align 8
  %63 = alloca %"class.WTF::StringView", align 8
  %64 = alloca %"class.WTF::StringView", align 8
  %65 = alloca %"class.WTF::StringView", align 8
  %66 = bitcast %"class.WTF::StringBuilder"* %40 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %66) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %66, i8 -86, i64 48, i1 false)
  %67 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %40, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %67, align 8
  %68 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %40, i64 0, i32 1
  %69 = bitcast %union.anon.685* %68 to i8*
  store i8 0, i8* %69, align 8
  %70 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %40, i64 0, i32 2
  store i32 0, i32* %70, align 8
  %71 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %40, i64 0, i32 3
  store i8 1, i8* %71, align 4
  %72 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %40, i64 0, i32 4
  store i8 0, i8* %72, align 1
  %73 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7, i32 0
  %74 = load i8, i8* %73, align 1
  %75 = and i8 %74, 2
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %77, label %81

77:                                               ; preds = %1
  %78 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 3, i32 0
  %79 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %78, align 8
  %80 = icmp eq %"class.WTF::StringImpl"* %79, null
  br i1 %80, label %451, label %81

81:                                               ; preds = %77, %1
  %82 = bitcast %"class.WTF::StringView"* %41 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %82) #14
  %83 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 3
  %84 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7
  call void @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5ItemsERKNS0_12BackingFlagsE(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* nonnull sret %42, %"union.blink::InvalidationSet::Backing.1"* %83, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %84) #14
  %85 = bitcast %"class.WTF::HashTableConstIterator"* %39 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %85)
  %86 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %42, i64 0, i32 0, i32 0
  %87 = load i32, i32* %86, align 8
  %88 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %42, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %89 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %88, align 8
  %90 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %42, i64 0, i32 0, i32 2
  %91 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %90 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %85, i8* align 8 %91, i64 16, i1 false)
  %92 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %42, i64 0, i32 1, i32 0
  %93 = load i32, i32* %92, align 8
  %94 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %42, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %95 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %94, align 8
  %96 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %42, i64 0, i32 1, i32 2, i32 0, i32 0
  %97 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %96, align 8
  %98 = bitcast %"class.WTF::StringBuilder"* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %98) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %98, i8 -86, i64 48, i1 false) #14
  %99 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %32, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %99, align 8
  %100 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %32, i64 0, i32 1
  %101 = bitcast %union.anon.685* %100 to i8*
  store i8 0, i8* %101, align 8
  %102 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %32, i64 0, i32 2
  store i32 0, i32* %102, align 8
  %103 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %32, i64 0, i32 3
  store i8 1, i8* %103, align 4
  %104 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %32, i64 0, i32 4
  store i8 0, i8* %104, align 1
  %105 = bitcast %"class.WTF::Vector.712"* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %105) #14
  %106 = getelementptr inbounds %"class.WTF::Vector.712", %"class.WTF::Vector.712"* %33, i64 0, i32 0, i32 0, i32 0
  %107 = getelementptr inbounds %"class.WTF::Vector.712", %"class.WTF::Vector.712"* %33, i64 0, i32 0, i32 0, i32 1
  %108 = getelementptr inbounds %"class.WTF::Vector.712", %"class.WTF::Vector.712"* %33, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %105, i8 0, i64 16, i1 false) #14
  %109 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %109) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %109, i8 -86, i64 32, i1 false) #14
  %110 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %34, i64 0, i32 0
  store i32 %87, i32* %110, align 8, !alias.scope !53
  %111 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %34, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %89, %"class.WTF::StringImpl"** %111, align 8, !alias.scope !53
  %112 = icmp eq %"class.WTF::StringImpl"* %89, null
  br i1 %112, label %130, label %113

113:                                              ; preds = %81
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %115 = load atomic i32, i32* %114 monotonic, align 4, !noalias !53
  %116 = and i32 %115, 2
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %130

118:                                              ; preds = %113
  %119 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 0, i32 0
  %120 = load i32, i32* %119, align 4, !noalias !53
  %121 = zext i32 %120 to i33
  %122 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %121, i33 1) #14
  %123 = extractvalue { i33, i1 } %122, 1
  %124 = extractvalue { i33, i1 } %122, 0
  %125 = icmp slt i33 %124, 0
  %126 = or i1 %123, %125
  br i1 %126, label %127, label %128, !prof !5

127:                                              ; preds = %118
  call void @llvm.trap() #14, !noalias !53
  unreachable

128:                                              ; preds = %118
  %129 = trunc i33 %124 to i32
  store i32 %129, i32* %119, align 4, !noalias !53
  br label %130

130:                                              ; preds = %128, %113, %81
  %131 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %34, i64 0, i32 2
  %132 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %131 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %132, i8* nonnull align 8 %85, i64 16, i1 false)
  %133 = icmp eq %"class.WTF::StringImpl"* %95, null
  br i1 %133, label %151, label %134

134:                                              ; preds = %130
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %136 = load atomic i32, i32* %135 monotonic, align 4, !noalias !56
  %137 = and i32 %136, 2
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %151

139:                                              ; preds = %134
  %140 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 0
  %141 = load i32, i32* %140, align 4, !noalias !56
  %142 = zext i32 %141 to i33
  %143 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %142, i33 1) #14
  %144 = extractvalue { i33, i1 } %143, 1
  %145 = extractvalue { i33, i1 } %143, 0
  %146 = icmp slt i33 %145, 0
  %147 = or i1 %144, %146
  br i1 %147, label %148, label %149, !prof !5

148:                                              ; preds = %139
  call void @llvm.trap() #14, !noalias !56
  unreachable

149:                                              ; preds = %139
  %150 = trunc i33 %145 to i32
  store i32 %150, i32* %140, align 4, !noalias !56
  br label %151

151:                                              ; preds = %149, %134, %130
  %152 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %34, i64 0, i32 2, i32 0, i32 0
  %153 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %34, i64 0, i32 1
  %154 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %34, i64 0, i32 2, i32 0, i32 1
  %155 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %156 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %155, i64 0, i32 0, i32 0, i32 0
  %157 = bitcast %"class.WTF::AtomicString"* %153 to i64*
  %158 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %153, i64 0, i32 0, i32 0, i32 0
  %159 = icmp eq i32 %93, 0
  br label %160

160:                                              ; preds = %311, %151
  %161 = load i32, i32* %110, align 8
  %162 = icmp eq i32 %161, %93
  br i1 %162, label %165, label %163

163:                                              ; preds = %160
  %164 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %152, align 8
  br label %231

165:                                              ; preds = %160
  %166 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %111, align 8
  %167 = icmp eq %"class.WTF::StringImpl"* %166, %95
  %168 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %152, align 8
  %169 = icmp eq %"class.WTF::AtomicString"* %168, %97
  %170 = select i1 %159, i1 %167, i1 %169
  br i1 %170, label %171, label %231

171:                                              ; preds = %165
  br i1 %133, label %185, label %172

172:                                              ; preds = %171
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %174 = load atomic i32, i32* %173 monotonic, align 4
  %175 = and i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 0
  %178 = load i32, i32* %177, align 4
  br i1 %176, label %179, label %181

179:                                              ; preds = %172
  %180 = add i32 %178, -1
  store i32 %180, i32* %177, align 4
  br label %181

181:                                              ; preds = %179, %172
  %182 = phi i32 [ %180, %179 ], [ %178, %172 ]
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %185

184:                                              ; preds = %181
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %95) #14
  br label %185

185:                                              ; preds = %184, %181, %171
  %186 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %111, align 8
  %187 = icmp eq %"class.WTF::StringImpl"* %186, null
  br i1 %187, label %201, label %188

188:                                              ; preds = %185
  %189 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %186, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %190 = load atomic i32, i32* %189 monotonic, align 4
  %191 = and i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %186, i64 0, i32 0
  %194 = load i32, i32* %193, align 4
  br i1 %192, label %195, label %197

195:                                              ; preds = %188
  %196 = add i32 %194, -1
  store i32 %196, i32* %193, align 4
  br label %197

197:                                              ; preds = %195, %188
  %198 = phi i32 [ %196, %195 ], [ %194, %188 ]
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %200, label %201

200:                                              ; preds = %197
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %186) #14
  br label %201

201:                                              ; preds = %200, %197, %185
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %109) #14
  %202 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %106, align 8
  %203 = load i32, i32* %108, align 4
  %204 = zext i32 %203 to i64
  %205 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %202, i64 %204
  %206 = bitcast i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %206) #14
  store i1 (%"class.WTF::String"*, %"class.WTF::String"*)* @_ZN3WTF23CodeUnitCompareLessThanERKNS_6StringES2_, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %31, align 8
  call void @_ZNSt3__16__sortIRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEvT0_SA_T_(%"class.WTF::AtomicString"* %202, %"class.WTF::AtomicString"* %205, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** nonnull dereferenceable(8) %31) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %206) #14
  %207 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %106, align 8
  %208 = load i32, i32* %108, align 4
  %209 = zext i32 %208 to i64
  %210 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %207, i64 %209
  %211 = icmp eq i32 %208, 0
  br i1 %211, label %319, label %212

212:                                              ; preds = %201
  %213 = bitcast %"class.WTF::StringView"* %35 to i8*
  %214 = bitcast %"class.WTF::StringView"* %35 to i64*
  %215 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %35, i64 0, i32 1
  %216 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %35, i64 0, i32 2
  %217 = bitcast %"class.WTF::StringView"* %36 to i8*
  %218 = bitcast %"class.WTF::StringView"* %36 to i64*
  %219 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %36, i64 0, i32 1
  %220 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %36, i64 0, i32 2
  %221 = bitcast %"class.WTF::StringView"* %37 to i8*
  %222 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %37, i64 0, i32 0
  %223 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %37, i64 0, i32 1
  %224 = bitcast i8** %223 to %"class.WTF::StringImpl"**
  %225 = bitcast %"class.WTF::StringView"* %37 to i64*
  %226 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %37, i64 0, i32 2
  %227 = bitcast %"class.WTF::StringView"* %38 to i8*
  %228 = bitcast %"class.WTF::StringView"* %38 to i64*
  %229 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %38, i64 0, i32 1
  %230 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %38, i64 0, i32 2
  br label %400

231:                                              ; preds = %165, %163
  %232 = phi %"class.WTF::AtomicString"* [ %164, %163 ], [ %168, %165 ]
  %233 = icmp eq i32 %161, 0
  %234 = select i1 %233, %"class.WTF::AtomicString"* %153, %"class.WTF::AtomicString"* %232
  %235 = load i32, i32* %108, align 4
  %236 = load i32, i32* %107, align 8
  %237 = icmp eq i32 %235, %236
  br i1 %237, label %265, label %238, !prof !5

238:                                              ; preds = %231
  %239 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %106, align 8
  %240 = zext i32 %235 to i64
  %241 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %234, i64 0, i32 0, i32 0, i32 0
  %242 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %241, align 8
  %243 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %239, i64 %240, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %242, %"class.WTF::StringImpl"** %243, align 8
  %244 = icmp eq %"class.WTF::StringImpl"* %242, null
  br i1 %244, label %262, label %245

245:                                              ; preds = %238
  %246 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %242, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %247 = load atomic i32, i32* %246 monotonic, align 4
  %248 = and i32 %247, 2
  %249 = icmp eq i32 %248, 0
  br i1 %249, label %250, label %262

250:                                              ; preds = %245
  %251 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %242, i64 0, i32 0
  %252 = load i32, i32* %251, align 4
  %253 = zext i32 %252 to i33
  %254 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %253, i33 1) #14
  %255 = extractvalue { i33, i1 } %254, 1
  %256 = extractvalue { i33, i1 } %254, 0
  %257 = icmp slt i33 %256, 0
  %258 = or i1 %255, %257
  br i1 %258, label %259, label %260, !prof !5

259:                                              ; preds = %250
  call void @llvm.trap() #14
  unreachable

260:                                              ; preds = %250
  %261 = trunc i33 %256 to i32
  store i32 %261, i32* %251, align 4
  br label %262

262:                                              ; preds = %260, %245, %238
  %263 = load i32, i32* %108, align 4
  %264 = add i32 %263, 1
  store i32 %264, i32* %108, align 4
  br label %266

265:                                              ; preds = %231
  call void @_ZN3WTF6VectorINS_12AtomicStringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.712"* nonnull %33, %"class.WTF::AtomicString"* dereferenceable(8) %234) #14
  br label %266

266:                                              ; preds = %265, %262
  %267 = load i32, i32* %110, align 8
  %268 = icmp eq i32 %267, 0
  br i1 %268, label %269, label %306

269:                                              ; preds = %266
  %270 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %156, align 8
  %271 = icmp eq %"class.WTF::StringImpl"* %270, null
  br i1 %271, label %289, label %272

272:                                              ; preds = %269
  %273 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %270, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %274 = load atomic i32, i32* %273 monotonic, align 4
  %275 = and i32 %274, 2
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %277, label %289

277:                                              ; preds = %272
  %278 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %270, i64 0, i32 0
  %279 = load i32, i32* %278, align 4
  %280 = zext i32 %279 to i33
  %281 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %280, i33 1) #14
  %282 = extractvalue { i33, i1 } %281, 1
  %283 = extractvalue { i33, i1 } %281, 0
  %284 = icmp slt i33 %283, 0
  %285 = or i1 %282, %284
  br i1 %285, label %286, label %287, !prof !5

286:                                              ; preds = %277
  call void @llvm.trap() #14
  unreachable

287:                                              ; preds = %277
  %288 = trunc i33 %283 to i32
  store i32 %288, i32* %278, align 4
  br label %289

289:                                              ; preds = %287, %272, %269
  %290 = ptrtoint %"class.WTF::StringImpl"* %270 to i64
  %291 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %158, align 8
  store i64 %290, i64* %157, align 8
  %292 = icmp eq %"class.WTF::StringImpl"* %291, null
  br i1 %292, label %311, label %293

293:                                              ; preds = %289
  %294 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %291, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %295 = load atomic i32, i32* %294 monotonic, align 4
  %296 = and i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %291, i64 0, i32 0
  %299 = load i32, i32* %298, align 4
  br i1 %297, label %300, label %302

300:                                              ; preds = %293
  %301 = add i32 %299, -1
  store i32 %301, i32* %298, align 4
  br label %302

302:                                              ; preds = %300, %293
  %303 = phi i32 [ %301, %300 ], [ %299, %293 ]
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %305, label %311

305:                                              ; preds = %302
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %291) #14
  br label %311

306:                                              ; preds = %266
  %307 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %152, align 8
  %308 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %307, i64 1
  store %"class.WTF::AtomicString"* %308, %"class.WTF::AtomicString"** %152, align 8
  %309 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %154, align 8
  %310 = icmp eq %"class.WTF::AtomicString"* %308, %309
  br i1 %310, label %311, label %312

311:                                              ; preds = %312, %316, %306, %305, %302, %289
  br label %160

312:                                              ; preds = %306, %316
  %313 = phi %"class.WTF::AtomicString"* [ %317, %316 ], [ %308, %306 ]
  %314 = bitcast %"class.WTF::AtomicString"* %313 to i64*
  %315 = load i64, i64* %314, align 8
  switch i64 %315, label %311 [
    i64 -1, label %316
    i64 0, label %316
  ]

316:                                              ; preds = %312, %312
  %317 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %313, i64 1
  store %"class.WTF::AtomicString"* %317, %"class.WTF::AtomicString"** %152, align 8
  %318 = icmp eq %"class.WTF::AtomicString"* %317, %309
  br i1 %318, label %311, label %312

319:                                              ; preds = %417, %201
  %320 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %32) #14
  %321 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %106, align 8
  %322 = icmp eq %"class.WTF::AtomicString"* %321, null
  br i1 %322, label %356, label %323, !prof !27

323:                                              ; preds = %319
  %324 = bitcast %"class.WTF::AtomicString"* %321 to i8*
  %325 = load i32, i32* %108, align 4
  %326 = icmp eq i32 %325, 0
  br i1 %326, label %354, label %327, !prof !5

327:                                              ; preds = %323
  %328 = zext i32 %325 to i64
  %329 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %321, i64 %328
  br label %330

330:                                              ; preds = %348, %327
  %331 = phi %"class.WTF::AtomicString"* [ %349, %348 ], [ %321, %327 ]
  %332 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %331, i64 0, i32 0, i32 0, i32 0
  %333 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %332, align 8
  %334 = icmp eq %"class.WTF::StringImpl"* %333, null
  br i1 %334, label %348, label %335

335:                                              ; preds = %330
  %336 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %333, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %337 = load atomic i32, i32* %336 monotonic, align 4
  %338 = and i32 %337, 2
  %339 = icmp eq i32 %338, 0
  %340 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %333, i64 0, i32 0
  %341 = load i32, i32* %340, align 4
  br i1 %339, label %342, label %344

342:                                              ; preds = %335
  %343 = add i32 %341, -1
  store i32 %343, i32* %340, align 4
  br label %344

344:                                              ; preds = %342, %335
  %345 = phi i32 [ %343, %342 ], [ %341, %335 ]
  %346 = icmp eq i32 %345, 0
  br i1 %346, label %347, label %348

347:                                              ; preds = %344
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %333) #14
  br label %348

348:                                              ; preds = %347, %344, %330
  %349 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %331, i64 1
  %350 = icmp eq %"class.WTF::AtomicString"* %349, %329
  br i1 %350, label %351, label %330

351:                                              ; preds = %348
  store i32 0, i32* %108, align 4
  %352 = bitcast %"class.WTF::Vector.712"* %33 to i8**
  %353 = load i8*, i8** %352, align 8
  br label %354

354:                                              ; preds = %351, %323
  %355 = phi i8* [ %353, %351 ], [ %324, %323 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %355) #14
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %106, align 8
  br label %356

356:                                              ; preds = %354, %319
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %105) #14
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %32) #14
  %357 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %99, align 8
  %358 = icmp eq %"class.WTF::StringImpl"* %357, null
  br i1 %358, label %372, label %359

359:                                              ; preds = %356
  %360 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %357, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %361 = load atomic i32, i32* %360 monotonic, align 4
  %362 = and i32 %361, 2
  %363 = icmp eq i32 %362, 0
  %364 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %357, i64 0, i32 0
  %365 = load i32, i32* %364, align 4
  br i1 %363, label %366, label %368

366:                                              ; preds = %359
  %367 = add i32 %365, -1
  store i32 %367, i32* %364, align 4
  br label %368

368:                                              ; preds = %366, %359
  %369 = phi i32 [ %367, %366 ], [ %365, %359 ]
  %370 = icmp eq i32 %369, 0
  br i1 %370, label %371, label %372

371:                                              ; preds = %368
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %357) #14
  br label %372

372:                                              ; preds = %371, %368, %356
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %98) #14
  br i1 %133, label %386, label %373

373:                                              ; preds = %372
  %374 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %375 = load atomic i32, i32* %374 monotonic, align 4
  %376 = and i32 %375, 2
  %377 = icmp eq i32 %376, 0
  %378 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 0
  %379 = load i32, i32* %378, align 4
  br i1 %377, label %380, label %382

380:                                              ; preds = %373
  %381 = add i32 %379, -1
  store i32 %381, i32* %378, align 4
  br label %382

382:                                              ; preds = %380, %373
  %383 = phi i32 [ %381, %380 ], [ %379, %373 ]
  %384 = icmp eq i32 %383, 0
  br i1 %384, label %385, label %386

385:                                              ; preds = %382
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %95) #14
  br label %386

386:                                              ; preds = %385, %382, %372
  br i1 %112, label %422, label %387

387:                                              ; preds = %386
  %388 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %389 = load atomic i32, i32* %388 monotonic, align 4
  %390 = and i32 %389, 2
  %391 = icmp eq i32 %390, 0
  %392 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 0, i32 0
  %393 = load i32, i32* %392, align 4
  br i1 %391, label %394, label %396

394:                                              ; preds = %387
  %395 = add i32 %393, -1
  store i32 %395, i32* %392, align 4
  br label %396

396:                                              ; preds = %394, %387
  %397 = phi i32 [ %395, %394 ], [ %393, %387 ]
  %398 = icmp eq i32 %397, 0
  br i1 %398, label %399, label %422

399:                                              ; preds = %396
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %89) #14
  br label %422

400:                                              ; preds = %417, %212
  %401 = phi %"class.WTF::AtomicString"* [ %207, %212 ], [ %420, %417 ]
  %402 = load i32, i32* %102, align 8
  %403 = icmp eq i32 %402, 0
  br i1 %403, label %406, label %404

404:                                              ; preds = %400
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %213) #14
  %405 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %405, i64* %214, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i64 0, i64 0), i8** %215, align 8
  store i32 1, i32* %216, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %32, %"class.WTF::StringView"* nonnull dereferenceable(24) %35) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %213) #14
  br label %406

406:                                              ; preds = %404, %400
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %217) #14
  %407 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %407, i64* %218, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.29, i64 0, i64 0), i8** %219, align 8
  store i32 1, i32* %220, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %32, %"class.WTF::StringView"* nonnull dereferenceable(24) %36) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %217) #14
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %221) #14
  %408 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %401, i64 0, i32 0, i32 0, i32 0
  %409 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %408, align 8
  %410 = icmp eq %"class.WTF::StringImpl"* %409, null
  br i1 %410, label %411, label %413

411:                                              ; preds = %406
  store i8* null, i8** %223, align 8
  %412 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %412, i64* %225, align 8
  br label %417

413:                                              ; preds = %406
  store %"class.WTF::StringImpl"* %409, %"class.WTF::StringImpl"** %222, align 8
  %414 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %409, i64 0, i32 1
  %415 = load i32, i32* %414, align 4
  %416 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %409, i64 1
  store %"class.WTF::StringImpl"* %416, %"class.WTF::StringImpl"** %224, align 8
  br label %417

417:                                              ; preds = %413, %411
  %418 = phi i32 [ %415, %413 ], [ 0, %411 ]
  store i32 %418, i32* %226, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %32, %"class.WTF::StringView"* nonnull dereferenceable(24) %37) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %221) #14
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %227) #14
  %419 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %419, i64* %228, align 8
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.30, i64 0, i64 0), i8** %229, align 8
  store i32 0, i32* %230, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %32, %"class.WTF::StringView"* nonnull dereferenceable(24) %38) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %227) #14
  %420 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %401, i64 1
  %421 = icmp eq %"class.WTF::AtomicString"* %420, %210
  br i1 %421, label %319, label %400

422:                                              ; preds = %386, %396, %399
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %85)
  %423 = icmp eq %"class.WTF::StringImpl"* %320, null
  br i1 %423, label %424, label %429

424:                                              ; preds = %422
  %425 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %41, i64 0, i32 1
  store i8* null, i8** %425, align 8
  %426 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %427 = bitcast %"class.WTF::StringView"* %41 to i64*
  store i64 %426, i64* %427, align 8
  %428 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %41, i64 0, i32 2
  store i32 0, i32* %428, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %40, %"class.WTF::StringView"* nonnull dereferenceable(24) %41)
  br label %449

429:                                              ; preds = %422
  %430 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %41, i64 0, i32 0
  store %"class.WTF::StringImpl"* %320, %"class.WTF::StringImpl"** %430, align 8
  %431 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %320, i64 0, i32 1
  %432 = load i32, i32* %431, align 4
  %433 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %320, i64 1
  %434 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %41, i64 0, i32 1
  %435 = bitcast i8** %434 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %433, %"class.WTF::StringImpl"** %435, align 8
  %436 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %41, i64 0, i32 2
  store i32 %432, i32* %436, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %40, %"class.WTF::StringView"* nonnull dereferenceable(24) %41)
  %437 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %320, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %438 = load atomic i32, i32* %437 monotonic, align 4
  %439 = and i32 %438, 2
  %440 = icmp eq i32 %439, 0
  %441 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %320, i64 0, i32 0
  %442 = load i32, i32* %441, align 4
  br i1 %440, label %443, label %445

443:                                              ; preds = %429
  %444 = add i32 %442, -1
  store i32 %444, i32* %441, align 4
  br label %445

445:                                              ; preds = %443, %429
  %446 = phi i32 [ %444, %443 ], [ %442, %429 ]
  %447 = icmp eq i32 %446, 0
  br i1 %447, label %448, label %449

448:                                              ; preds = %445
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %320) #14
  br label %449

449:                                              ; preds = %424, %445, %448
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %82) #14
  %450 = load i8, i8* %73, align 1
  br label %451

451:                                              ; preds = %77, %449
  %452 = phi i8 [ %74, %77 ], [ %450, %449 ]
  %453 = and i8 %452, 1
  %454 = icmp eq i8 %453, 0
  br i1 %454, label %455, label %459

455:                                              ; preds = %451
  %456 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 2, i32 0
  %457 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %456, align 8
  %458 = icmp eq %"class.WTF::StringImpl"* %457, null
  br i1 %458, label %839, label %459

459:                                              ; preds = %455, %451
  %460 = bitcast %"class.WTF::StringView"* %43 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %460) #14
  %461 = load i32, i32* %70, align 8
  %462 = icmp eq i32 %461, 0
  %463 = xor i1 %462, true
  %464 = select i1 %462, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i64 0, i64 0)
  %465 = zext i1 %463 to i32
  %466 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %467 = bitcast %"class.WTF::StringView"* %43 to i64*
  store i64 %466, i64* %467, align 8
  %468 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %43, i64 0, i32 1
  store i8* %464, i8** %468, align 8
  %469 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %43, i64 0, i32 2
  store i32 %465, i32* %469, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %40, %"class.WTF::StringView"* nonnull dereferenceable(24) %43)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %460) #14
  %470 = bitcast %"class.WTF::StringView"* %44 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %470) #14
  %471 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 2
  %472 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7
  call void @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5ItemsERKNS0_12BackingFlagsE(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* nonnull sret %45, %"union.blink::InvalidationSet::Backing"* %471, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %472) #14
  %473 = bitcast %"class.WTF::HashTableConstIterator"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %473)
  %474 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %45, i64 0, i32 0, i32 0
  %475 = load i32, i32* %474, align 8
  %476 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %45, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %477 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %476, align 8
  %478 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %45, i64 0, i32 0, i32 2
  %479 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %478 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %473, i8* align 8 %479, i64 16, i1 false)
  %480 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %45, i64 0, i32 1, i32 0
  %481 = load i32, i32* %480, align 8
  %482 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %45, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %483 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %482, align 8
  %484 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %45, i64 0, i32 1, i32 2, i32 0, i32 0
  %485 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %484, align 8
  %486 = bitcast %"class.WTF::StringBuilder"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %486) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %486, i8 -86, i64 48, i1 false) #14
  %487 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %23, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %487, align 8
  %488 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %23, i64 0, i32 1
  %489 = bitcast %union.anon.685* %488 to i8*
  store i8 0, i8* %489, align 8
  %490 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %23, i64 0, i32 2
  store i32 0, i32* %490, align 8
  %491 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %23, i64 0, i32 3
  store i8 1, i8* %491, align 4
  %492 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %23, i64 0, i32 4
  store i8 0, i8* %492, align 1
  %493 = bitcast %"class.WTF::Vector.712"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %493) #14
  %494 = getelementptr inbounds %"class.WTF::Vector.712", %"class.WTF::Vector.712"* %24, i64 0, i32 0, i32 0, i32 0
  %495 = getelementptr inbounds %"class.WTF::Vector.712", %"class.WTF::Vector.712"* %24, i64 0, i32 0, i32 0, i32 1
  %496 = getelementptr inbounds %"class.WTF::Vector.712", %"class.WTF::Vector.712"* %24, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %493, i8 0, i64 16, i1 false) #14
  %497 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %497) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %497, i8 -86, i64 32, i1 false) #14
  %498 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %25, i64 0, i32 0
  store i32 %475, i32* %498, align 8, !alias.scope !59
  %499 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %25, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %477, %"class.WTF::StringImpl"** %499, align 8, !alias.scope !59
  %500 = icmp eq %"class.WTF::StringImpl"* %477, null
  br i1 %500, label %518, label %501

501:                                              ; preds = %459
  %502 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %477, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %503 = load atomic i32, i32* %502 monotonic, align 4, !noalias !59
  %504 = and i32 %503, 2
  %505 = icmp eq i32 %504, 0
  br i1 %505, label %506, label %518

506:                                              ; preds = %501
  %507 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %477, i64 0, i32 0
  %508 = load i32, i32* %507, align 4, !noalias !59
  %509 = zext i32 %508 to i33
  %510 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %509, i33 1) #14
  %511 = extractvalue { i33, i1 } %510, 1
  %512 = extractvalue { i33, i1 } %510, 0
  %513 = icmp slt i33 %512, 0
  %514 = or i1 %511, %513
  br i1 %514, label %515, label %516, !prof !5

515:                                              ; preds = %506
  call void @llvm.trap() #14, !noalias !59
  unreachable

516:                                              ; preds = %506
  %517 = trunc i33 %512 to i32
  store i32 %517, i32* %507, align 4, !noalias !59
  br label %518

518:                                              ; preds = %516, %501, %459
  %519 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %25, i64 0, i32 2
  %520 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %519 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %520, i8* nonnull align 8 %473, i64 16, i1 false)
  %521 = icmp eq %"class.WTF::StringImpl"* %483, null
  br i1 %521, label %539, label %522

522:                                              ; preds = %518
  %523 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %483, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %524 = load atomic i32, i32* %523 monotonic, align 4, !noalias !62
  %525 = and i32 %524, 2
  %526 = icmp eq i32 %525, 0
  br i1 %526, label %527, label %539

527:                                              ; preds = %522
  %528 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %483, i64 0, i32 0
  %529 = load i32, i32* %528, align 4, !noalias !62
  %530 = zext i32 %529 to i33
  %531 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %530, i33 1) #14
  %532 = extractvalue { i33, i1 } %531, 1
  %533 = extractvalue { i33, i1 } %531, 0
  %534 = icmp slt i33 %533, 0
  %535 = or i1 %532, %534
  br i1 %535, label %536, label %537, !prof !5

536:                                              ; preds = %527
  call void @llvm.trap() #14, !noalias !62
  unreachable

537:                                              ; preds = %527
  %538 = trunc i33 %533 to i32
  store i32 %538, i32* %528, align 4, !noalias !62
  br label %539

539:                                              ; preds = %537, %522, %518
  %540 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %25, i64 0, i32 2, i32 0, i32 0
  %541 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %25, i64 0, i32 1
  %542 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %25, i64 0, i32 2, i32 0, i32 1
  %543 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %544 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %543, i64 0, i32 0, i32 0, i32 0
  %545 = bitcast %"class.WTF::AtomicString"* %541 to i64*
  %546 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %541, i64 0, i32 0, i32 0, i32 0
  %547 = icmp eq i32 %481, 0
  br label %548

548:                                              ; preds = %699, %539
  %549 = load i32, i32* %498, align 8
  %550 = icmp eq i32 %549, %481
  br i1 %550, label %553, label %551

551:                                              ; preds = %548
  %552 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %540, align 8
  br label %619

553:                                              ; preds = %548
  %554 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %499, align 8
  %555 = icmp eq %"class.WTF::StringImpl"* %554, %483
  %556 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %540, align 8
  %557 = icmp eq %"class.WTF::AtomicString"* %556, %485
  %558 = select i1 %547, i1 %555, i1 %557
  br i1 %558, label %559, label %619

559:                                              ; preds = %553
  br i1 %521, label %573, label %560

560:                                              ; preds = %559
  %561 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %483, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %562 = load atomic i32, i32* %561 monotonic, align 4
  %563 = and i32 %562, 2
  %564 = icmp eq i32 %563, 0
  %565 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %483, i64 0, i32 0
  %566 = load i32, i32* %565, align 4
  br i1 %564, label %567, label %569

567:                                              ; preds = %560
  %568 = add i32 %566, -1
  store i32 %568, i32* %565, align 4
  br label %569

569:                                              ; preds = %567, %560
  %570 = phi i32 [ %568, %567 ], [ %566, %560 ]
  %571 = icmp eq i32 %570, 0
  br i1 %571, label %572, label %573

572:                                              ; preds = %569
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %483) #14
  br label %573

573:                                              ; preds = %572, %569, %559
  %574 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %499, align 8
  %575 = icmp eq %"class.WTF::StringImpl"* %574, null
  br i1 %575, label %589, label %576

576:                                              ; preds = %573
  %577 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %574, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %578 = load atomic i32, i32* %577 monotonic, align 4
  %579 = and i32 %578, 2
  %580 = icmp eq i32 %579, 0
  %581 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %574, i64 0, i32 0
  %582 = load i32, i32* %581, align 4
  br i1 %580, label %583, label %585

583:                                              ; preds = %576
  %584 = add i32 %582, -1
  store i32 %584, i32* %581, align 4
  br label %585

585:                                              ; preds = %583, %576
  %586 = phi i32 [ %584, %583 ], [ %582, %576 ]
  %587 = icmp eq i32 %586, 0
  br i1 %587, label %588, label %589

588:                                              ; preds = %585
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %574) #14
  br label %589

589:                                              ; preds = %588, %585, %573
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %497) #14
  %590 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %494, align 8
  %591 = load i32, i32* %496, align 4
  %592 = zext i32 %591 to i64
  %593 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %590, i64 %592
  %594 = bitcast i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %594) #14
  store i1 (%"class.WTF::String"*, %"class.WTF::String"*)* @_ZN3WTF23CodeUnitCompareLessThanERKNS_6StringES2_, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %22, align 8
  call void @_ZNSt3__16__sortIRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEvT0_SA_T_(%"class.WTF::AtomicString"* %590, %"class.WTF::AtomicString"* %593, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** nonnull dereferenceable(8) %22) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %594) #14
  %595 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %494, align 8
  %596 = load i32, i32* %496, align 4
  %597 = zext i32 %596 to i64
  %598 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %595, i64 %597
  %599 = icmp eq i32 %596, 0
  br i1 %599, label %707, label %600

600:                                              ; preds = %589
  %601 = bitcast %"class.WTF::StringView"* %26 to i8*
  %602 = bitcast %"class.WTF::StringView"* %26 to i64*
  %603 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %26, i64 0, i32 1
  %604 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %26, i64 0, i32 2
  %605 = bitcast %"class.WTF::StringView"* %27 to i8*
  %606 = bitcast %"class.WTF::StringView"* %27 to i64*
  %607 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %27, i64 0, i32 1
  %608 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %27, i64 0, i32 2
  %609 = bitcast %"class.WTF::StringView"* %28 to i8*
  %610 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %28, i64 0, i32 0
  %611 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %28, i64 0, i32 1
  %612 = bitcast i8** %611 to %"class.WTF::StringImpl"**
  %613 = bitcast %"class.WTF::StringView"* %28 to i64*
  %614 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %28, i64 0, i32 2
  %615 = bitcast %"class.WTF::StringView"* %29 to i8*
  %616 = bitcast %"class.WTF::StringView"* %29 to i64*
  %617 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %29, i64 0, i32 1
  %618 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %29, i64 0, i32 2
  br label %788

619:                                              ; preds = %553, %551
  %620 = phi %"class.WTF::AtomicString"* [ %552, %551 ], [ %556, %553 ]
  %621 = icmp eq i32 %549, 0
  %622 = select i1 %621, %"class.WTF::AtomicString"* %541, %"class.WTF::AtomicString"* %620
  %623 = load i32, i32* %496, align 4
  %624 = load i32, i32* %495, align 8
  %625 = icmp eq i32 %623, %624
  br i1 %625, label %653, label %626, !prof !5

626:                                              ; preds = %619
  %627 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %494, align 8
  %628 = zext i32 %623 to i64
  %629 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %622, i64 0, i32 0, i32 0, i32 0
  %630 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %629, align 8
  %631 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %627, i64 %628, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %630, %"class.WTF::StringImpl"** %631, align 8
  %632 = icmp eq %"class.WTF::StringImpl"* %630, null
  br i1 %632, label %650, label %633

633:                                              ; preds = %626
  %634 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %630, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %635 = load atomic i32, i32* %634 monotonic, align 4
  %636 = and i32 %635, 2
  %637 = icmp eq i32 %636, 0
  br i1 %637, label %638, label %650

638:                                              ; preds = %633
  %639 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %630, i64 0, i32 0
  %640 = load i32, i32* %639, align 4
  %641 = zext i32 %640 to i33
  %642 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %641, i33 1) #14
  %643 = extractvalue { i33, i1 } %642, 1
  %644 = extractvalue { i33, i1 } %642, 0
  %645 = icmp slt i33 %644, 0
  %646 = or i1 %643, %645
  br i1 %646, label %647, label %648, !prof !5

647:                                              ; preds = %638
  call void @llvm.trap() #14
  unreachable

648:                                              ; preds = %638
  %649 = trunc i33 %644 to i32
  store i32 %649, i32* %639, align 4
  br label %650

650:                                              ; preds = %648, %633, %626
  %651 = load i32, i32* %496, align 4
  %652 = add i32 %651, 1
  store i32 %652, i32* %496, align 4
  br label %654

653:                                              ; preds = %619
  call void @_ZN3WTF6VectorINS_12AtomicStringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.712"* nonnull %24, %"class.WTF::AtomicString"* dereferenceable(8) %622) #14
  br label %654

654:                                              ; preds = %653, %650
  %655 = load i32, i32* %498, align 8
  %656 = icmp eq i32 %655, 0
  br i1 %656, label %657, label %694

657:                                              ; preds = %654
  %658 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %544, align 8
  %659 = icmp eq %"class.WTF::StringImpl"* %658, null
  br i1 %659, label %677, label %660

660:                                              ; preds = %657
  %661 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %658, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %662 = load atomic i32, i32* %661 monotonic, align 4
  %663 = and i32 %662, 2
  %664 = icmp eq i32 %663, 0
  br i1 %664, label %665, label %677

665:                                              ; preds = %660
  %666 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %658, i64 0, i32 0
  %667 = load i32, i32* %666, align 4
  %668 = zext i32 %667 to i33
  %669 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %668, i33 1) #14
  %670 = extractvalue { i33, i1 } %669, 1
  %671 = extractvalue { i33, i1 } %669, 0
  %672 = icmp slt i33 %671, 0
  %673 = or i1 %670, %672
  br i1 %673, label %674, label %675, !prof !5

674:                                              ; preds = %665
  call void @llvm.trap() #14
  unreachable

675:                                              ; preds = %665
  %676 = trunc i33 %671 to i32
  store i32 %676, i32* %666, align 4
  br label %677

677:                                              ; preds = %675, %660, %657
  %678 = ptrtoint %"class.WTF::StringImpl"* %658 to i64
  %679 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %546, align 8
  store i64 %678, i64* %545, align 8
  %680 = icmp eq %"class.WTF::StringImpl"* %679, null
  br i1 %680, label %699, label %681

681:                                              ; preds = %677
  %682 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %679, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %683 = load atomic i32, i32* %682 monotonic, align 4
  %684 = and i32 %683, 2
  %685 = icmp eq i32 %684, 0
  %686 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %679, i64 0, i32 0
  %687 = load i32, i32* %686, align 4
  br i1 %685, label %688, label %690

688:                                              ; preds = %681
  %689 = add i32 %687, -1
  store i32 %689, i32* %686, align 4
  br label %690

690:                                              ; preds = %688, %681
  %691 = phi i32 [ %689, %688 ], [ %687, %681 ]
  %692 = icmp eq i32 %691, 0
  br i1 %692, label %693, label %699

693:                                              ; preds = %690
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %679) #14
  br label %699

694:                                              ; preds = %654
  %695 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %540, align 8
  %696 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %695, i64 1
  store %"class.WTF::AtomicString"* %696, %"class.WTF::AtomicString"** %540, align 8
  %697 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %542, align 8
  %698 = icmp eq %"class.WTF::AtomicString"* %696, %697
  br i1 %698, label %699, label %700

699:                                              ; preds = %700, %704, %694, %693, %690, %677
  br label %548

700:                                              ; preds = %694, %704
  %701 = phi %"class.WTF::AtomicString"* [ %705, %704 ], [ %696, %694 ]
  %702 = bitcast %"class.WTF::AtomicString"* %701 to i64*
  %703 = load i64, i64* %702, align 8
  switch i64 %703, label %699 [
    i64 -1, label %704
    i64 0, label %704
  ]

704:                                              ; preds = %700, %700
  %705 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %701, i64 1
  store %"class.WTF::AtomicString"* %705, %"class.WTF::AtomicString"** %540, align 8
  %706 = icmp eq %"class.WTF::AtomicString"* %705, %697
  br i1 %706, label %699, label %700

707:                                              ; preds = %805, %589
  %708 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %23) #14
  %709 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %494, align 8
  %710 = icmp eq %"class.WTF::AtomicString"* %709, null
  br i1 %710, label %744, label %711, !prof !27

711:                                              ; preds = %707
  %712 = bitcast %"class.WTF::AtomicString"* %709 to i8*
  %713 = load i32, i32* %496, align 4
  %714 = icmp eq i32 %713, 0
  br i1 %714, label %742, label %715, !prof !5

715:                                              ; preds = %711
  %716 = zext i32 %713 to i64
  %717 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %709, i64 %716
  br label %718

718:                                              ; preds = %736, %715
  %719 = phi %"class.WTF::AtomicString"* [ %737, %736 ], [ %709, %715 ]
  %720 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %719, i64 0, i32 0, i32 0, i32 0
  %721 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %720, align 8
  %722 = icmp eq %"class.WTF::StringImpl"* %721, null
  br i1 %722, label %736, label %723

723:                                              ; preds = %718
  %724 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %721, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %725 = load atomic i32, i32* %724 monotonic, align 4
  %726 = and i32 %725, 2
  %727 = icmp eq i32 %726, 0
  %728 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %721, i64 0, i32 0
  %729 = load i32, i32* %728, align 4
  br i1 %727, label %730, label %732

730:                                              ; preds = %723
  %731 = add i32 %729, -1
  store i32 %731, i32* %728, align 4
  br label %732

732:                                              ; preds = %730, %723
  %733 = phi i32 [ %731, %730 ], [ %729, %723 ]
  %734 = icmp eq i32 %733, 0
  br i1 %734, label %735, label %736

735:                                              ; preds = %732
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %721) #14
  br label %736

736:                                              ; preds = %735, %732, %718
  %737 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %719, i64 1
  %738 = icmp eq %"class.WTF::AtomicString"* %737, %717
  br i1 %738, label %739, label %718

739:                                              ; preds = %736
  store i32 0, i32* %496, align 4
  %740 = bitcast %"class.WTF::Vector.712"* %24 to i8**
  %741 = load i8*, i8** %740, align 8
  br label %742

742:                                              ; preds = %739, %711
  %743 = phi i8* [ %741, %739 ], [ %712, %711 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %743) #14
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %494, align 8
  br label %744

744:                                              ; preds = %742, %707
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %493) #14
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %23) #14
  %745 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %487, align 8
  %746 = icmp eq %"class.WTF::StringImpl"* %745, null
  br i1 %746, label %760, label %747

747:                                              ; preds = %744
  %748 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %745, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %749 = load atomic i32, i32* %748 monotonic, align 4
  %750 = and i32 %749, 2
  %751 = icmp eq i32 %750, 0
  %752 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %745, i64 0, i32 0
  %753 = load i32, i32* %752, align 4
  br i1 %751, label %754, label %756

754:                                              ; preds = %747
  %755 = add i32 %753, -1
  store i32 %755, i32* %752, align 4
  br label %756

756:                                              ; preds = %754, %747
  %757 = phi i32 [ %755, %754 ], [ %753, %747 ]
  %758 = icmp eq i32 %757, 0
  br i1 %758, label %759, label %760

759:                                              ; preds = %756
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %745) #14
  br label %760

760:                                              ; preds = %759, %756, %744
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %486) #14
  br i1 %521, label %774, label %761

761:                                              ; preds = %760
  %762 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %483, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %763 = load atomic i32, i32* %762 monotonic, align 4
  %764 = and i32 %763, 2
  %765 = icmp eq i32 %764, 0
  %766 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %483, i64 0, i32 0
  %767 = load i32, i32* %766, align 4
  br i1 %765, label %768, label %770

768:                                              ; preds = %761
  %769 = add i32 %767, -1
  store i32 %769, i32* %766, align 4
  br label %770

770:                                              ; preds = %768, %761
  %771 = phi i32 [ %769, %768 ], [ %767, %761 ]
  %772 = icmp eq i32 %771, 0
  br i1 %772, label %773, label %774

773:                                              ; preds = %770
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %483) #14
  br label %774

774:                                              ; preds = %773, %770, %760
  br i1 %500, label %810, label %775

775:                                              ; preds = %774
  %776 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %477, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %777 = load atomic i32, i32* %776 monotonic, align 4
  %778 = and i32 %777, 2
  %779 = icmp eq i32 %778, 0
  %780 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %477, i64 0, i32 0
  %781 = load i32, i32* %780, align 4
  br i1 %779, label %782, label %784

782:                                              ; preds = %775
  %783 = add i32 %781, -1
  store i32 %783, i32* %780, align 4
  br label %784

784:                                              ; preds = %782, %775
  %785 = phi i32 [ %783, %782 ], [ %781, %775 ]
  %786 = icmp eq i32 %785, 0
  br i1 %786, label %787, label %810

787:                                              ; preds = %784
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %477) #14
  br label %810

788:                                              ; preds = %805, %600
  %789 = phi %"class.WTF::AtomicString"* [ %595, %600 ], [ %808, %805 ]
  %790 = load i32, i32* %490, align 8
  %791 = icmp eq i32 %790, 0
  br i1 %791, label %794, label %792

792:                                              ; preds = %788
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %601) #14
  %793 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %793, i64* %602, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i64 0, i64 0), i8** %603, align 8
  store i32 1, i32* %604, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %23, %"class.WTF::StringView"* nonnull dereferenceable(24) %26) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %601) #14
  br label %794

794:                                              ; preds = %792, %788
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %605) #14
  %795 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %795, i64* %606, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0), i8** %607, align 8
  store i32 1, i32* %608, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %23, %"class.WTF::StringView"* nonnull dereferenceable(24) %27) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %605) #14
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %609) #14
  %796 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %789, i64 0, i32 0, i32 0, i32 0
  %797 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %796, align 8
  %798 = icmp eq %"class.WTF::StringImpl"* %797, null
  br i1 %798, label %799, label %801

799:                                              ; preds = %794
  store i8* null, i8** %611, align 8
  %800 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %800, i64* %613, align 8
  br label %805

801:                                              ; preds = %794
  store %"class.WTF::StringImpl"* %797, %"class.WTF::StringImpl"** %610, align 8
  %802 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %797, i64 0, i32 1
  %803 = load i32, i32* %802, align 4
  %804 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %797, i64 1
  store %"class.WTF::StringImpl"* %804, %"class.WTF::StringImpl"** %612, align 8
  br label %805

805:                                              ; preds = %801, %799
  %806 = phi i32 [ %803, %801 ], [ 0, %799 ]
  store i32 %806, i32* %614, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %23, %"class.WTF::StringView"* nonnull dereferenceable(24) %28) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %609) #14
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %615) #14
  %807 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %807, i64* %616, align 8
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.30, i64 0, i64 0), i8** %617, align 8
  store i32 0, i32* %618, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %23, %"class.WTF::StringView"* nonnull dereferenceable(24) %29) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %615) #14
  %808 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %789, i64 1
  %809 = icmp eq %"class.WTF::AtomicString"* %808, %598
  br i1 %809, label %707, label %788

810:                                              ; preds = %774, %784, %787
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %473)
  %811 = icmp eq %"class.WTF::StringImpl"* %708, null
  br i1 %811, label %812, label %817

812:                                              ; preds = %810
  %813 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %44, i64 0, i32 1
  store i8* null, i8** %813, align 8
  %814 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %815 = bitcast %"class.WTF::StringView"* %44 to i64*
  store i64 %814, i64* %815, align 8
  %816 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %44, i64 0, i32 2
  store i32 0, i32* %816, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %40, %"class.WTF::StringView"* nonnull dereferenceable(24) %44)
  br label %837

817:                                              ; preds = %810
  %818 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %44, i64 0, i32 0
  store %"class.WTF::StringImpl"* %708, %"class.WTF::StringImpl"** %818, align 8
  %819 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %708, i64 0, i32 1
  %820 = load i32, i32* %819, align 4
  %821 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %708, i64 1
  %822 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %44, i64 0, i32 1
  %823 = bitcast i8** %822 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %821, %"class.WTF::StringImpl"** %823, align 8
  %824 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %44, i64 0, i32 2
  store i32 %820, i32* %824, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %40, %"class.WTF::StringView"* nonnull dereferenceable(24) %44)
  %825 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %708, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %826 = load atomic i32, i32* %825 monotonic, align 4
  %827 = and i32 %826, 2
  %828 = icmp eq i32 %827, 0
  %829 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %708, i64 0, i32 0
  %830 = load i32, i32* %829, align 4
  br i1 %828, label %831, label %833

831:                                              ; preds = %817
  %832 = add i32 %830, -1
  store i32 %832, i32* %829, align 4
  br label %833

833:                                              ; preds = %831, %817
  %834 = phi i32 [ %832, %831 ], [ %830, %817 ]
  %835 = icmp eq i32 %834, 0
  br i1 %835, label %836, label %837

836:                                              ; preds = %833
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %708) #14
  br label %837

837:                                              ; preds = %812, %833, %836
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %470) #14
  %838 = load i8, i8* %73, align 1
  br label %839

839:                                              ; preds = %455, %837
  %840 = phi i8 [ %452, %455 ], [ %838, %837 ]
  %841 = and i8 %840, 4
  %842 = icmp eq i8 %841, 0
  br i1 %842, label %843, label %847

843:                                              ; preds = %839
  %844 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 4, i32 0
  %845 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %844, align 8
  %846 = icmp eq %"class.WTF::StringImpl"* %845, null
  br i1 %846, label %1227, label %847

847:                                              ; preds = %843, %839
  %848 = bitcast %"class.WTF::StringView"* %46 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %848) #14
  %849 = load i32, i32* %70, align 8
  %850 = icmp eq i32 %849, 0
  %851 = xor i1 %850, true
  %852 = select i1 %850, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i64 0, i64 0)
  %853 = zext i1 %851 to i32
  %854 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %855 = bitcast %"class.WTF::StringView"* %46 to i64*
  store i64 %854, i64* %855, align 8
  %856 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %46, i64 0, i32 1
  store i8* %852, i8** %856, align 8
  %857 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %46, i64 0, i32 2
  store i32 %853, i32* %857, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %40, %"class.WTF::StringView"* nonnull dereferenceable(24) %46)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %848) #14
  %858 = bitcast %"class.WTF::StringView"* %47 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %858) #14
  %859 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 4
  %860 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7
  call void @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5ItemsERKNS0_12BackingFlagsE(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* nonnull sret %48, %"union.blink::InvalidationSet::Backing.2"* %859, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %860) #14
  %861 = bitcast %"class.WTF::HashTableConstIterator"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %861)
  %862 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %48, i64 0, i32 0, i32 0
  %863 = load i32, i32* %862, align 8
  %864 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %48, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %865 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %864, align 8
  %866 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %48, i64 0, i32 0, i32 2
  %867 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %866 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %861, i8* align 8 %867, i64 16, i1 false)
  %868 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %48, i64 0, i32 1, i32 0
  %869 = load i32, i32* %868, align 8
  %870 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %48, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %871 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %870, align 8
  %872 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %48, i64 0, i32 1, i32 2, i32 0, i32 0
  %873 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %872, align 8
  %874 = bitcast %"class.WTF::StringBuilder"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %874) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %874, i8 -86, i64 48, i1 false) #14
  %875 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %14, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %875, align 8
  %876 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %14, i64 0, i32 1
  %877 = bitcast %union.anon.685* %876 to i8*
  store i8 0, i8* %877, align 8
  %878 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %14, i64 0, i32 2
  store i32 0, i32* %878, align 8
  %879 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %14, i64 0, i32 3
  store i8 1, i8* %879, align 4
  %880 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %14, i64 0, i32 4
  store i8 0, i8* %880, align 1
  %881 = bitcast %"class.WTF::Vector.712"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %881) #14
  %882 = getelementptr inbounds %"class.WTF::Vector.712", %"class.WTF::Vector.712"* %15, i64 0, i32 0, i32 0, i32 0
  %883 = getelementptr inbounds %"class.WTF::Vector.712", %"class.WTF::Vector.712"* %15, i64 0, i32 0, i32 0, i32 1
  %884 = getelementptr inbounds %"class.WTF::Vector.712", %"class.WTF::Vector.712"* %15, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %881, i8 0, i64 16, i1 false) #14
  %885 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %885) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %885, i8 -86, i64 32, i1 false) #14
  %886 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %16, i64 0, i32 0
  store i32 %863, i32* %886, align 8, !alias.scope !65
  %887 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %16, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %865, %"class.WTF::StringImpl"** %887, align 8, !alias.scope !65
  %888 = icmp eq %"class.WTF::StringImpl"* %865, null
  br i1 %888, label %906, label %889

889:                                              ; preds = %847
  %890 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %865, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %891 = load atomic i32, i32* %890 monotonic, align 4, !noalias !65
  %892 = and i32 %891, 2
  %893 = icmp eq i32 %892, 0
  br i1 %893, label %894, label %906

894:                                              ; preds = %889
  %895 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %865, i64 0, i32 0
  %896 = load i32, i32* %895, align 4, !noalias !65
  %897 = zext i32 %896 to i33
  %898 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %897, i33 1) #14
  %899 = extractvalue { i33, i1 } %898, 1
  %900 = extractvalue { i33, i1 } %898, 0
  %901 = icmp slt i33 %900, 0
  %902 = or i1 %899, %901
  br i1 %902, label %903, label %904, !prof !5

903:                                              ; preds = %894
  call void @llvm.trap() #14, !noalias !65
  unreachable

904:                                              ; preds = %894
  %905 = trunc i33 %900 to i32
  store i32 %905, i32* %895, align 4, !noalias !65
  br label %906

906:                                              ; preds = %904, %889, %847
  %907 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %16, i64 0, i32 2
  %908 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %907 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %908, i8* nonnull align 8 %861, i64 16, i1 false)
  %909 = icmp eq %"class.WTF::StringImpl"* %871, null
  br i1 %909, label %927, label %910

910:                                              ; preds = %906
  %911 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %871, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %912 = load atomic i32, i32* %911 monotonic, align 4, !noalias !68
  %913 = and i32 %912, 2
  %914 = icmp eq i32 %913, 0
  br i1 %914, label %915, label %927

915:                                              ; preds = %910
  %916 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %871, i64 0, i32 0
  %917 = load i32, i32* %916, align 4, !noalias !68
  %918 = zext i32 %917 to i33
  %919 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %918, i33 1) #14
  %920 = extractvalue { i33, i1 } %919, 1
  %921 = extractvalue { i33, i1 } %919, 0
  %922 = icmp slt i33 %921, 0
  %923 = or i1 %920, %922
  br i1 %923, label %924, label %925, !prof !5

924:                                              ; preds = %915
  call void @llvm.trap() #14, !noalias !68
  unreachable

925:                                              ; preds = %915
  %926 = trunc i33 %921 to i32
  store i32 %926, i32* %916, align 4, !noalias !68
  br label %927

927:                                              ; preds = %925, %910, %906
  %928 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %16, i64 0, i32 2, i32 0, i32 0
  %929 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %16, i64 0, i32 1
  %930 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %16, i64 0, i32 2, i32 0, i32 1
  %931 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %932 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %931, i64 0, i32 0, i32 0, i32 0
  %933 = bitcast %"class.WTF::AtomicString"* %929 to i64*
  %934 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %929, i64 0, i32 0, i32 0, i32 0
  %935 = icmp eq i32 %869, 0
  br label %936

936:                                              ; preds = %1087, %927
  %937 = load i32, i32* %886, align 8
  %938 = icmp eq i32 %937, %869
  br i1 %938, label %941, label %939

939:                                              ; preds = %936
  %940 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %928, align 8
  br label %1007

941:                                              ; preds = %936
  %942 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %887, align 8
  %943 = icmp eq %"class.WTF::StringImpl"* %942, %871
  %944 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %928, align 8
  %945 = icmp eq %"class.WTF::AtomicString"* %944, %873
  %946 = select i1 %935, i1 %943, i1 %945
  br i1 %946, label %947, label %1007

947:                                              ; preds = %941
  br i1 %909, label %961, label %948

948:                                              ; preds = %947
  %949 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %871, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %950 = load atomic i32, i32* %949 monotonic, align 4
  %951 = and i32 %950, 2
  %952 = icmp eq i32 %951, 0
  %953 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %871, i64 0, i32 0
  %954 = load i32, i32* %953, align 4
  br i1 %952, label %955, label %957

955:                                              ; preds = %948
  %956 = add i32 %954, -1
  store i32 %956, i32* %953, align 4
  br label %957

957:                                              ; preds = %955, %948
  %958 = phi i32 [ %956, %955 ], [ %954, %948 ]
  %959 = icmp eq i32 %958, 0
  br i1 %959, label %960, label %961

960:                                              ; preds = %957
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %871) #14
  br label %961

961:                                              ; preds = %960, %957, %947
  %962 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %887, align 8
  %963 = icmp eq %"class.WTF::StringImpl"* %962, null
  br i1 %963, label %977, label %964

964:                                              ; preds = %961
  %965 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %962, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %966 = load atomic i32, i32* %965 monotonic, align 4
  %967 = and i32 %966, 2
  %968 = icmp eq i32 %967, 0
  %969 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %962, i64 0, i32 0
  %970 = load i32, i32* %969, align 4
  br i1 %968, label %971, label %973

971:                                              ; preds = %964
  %972 = add i32 %970, -1
  store i32 %972, i32* %969, align 4
  br label %973

973:                                              ; preds = %971, %964
  %974 = phi i32 [ %972, %971 ], [ %970, %964 ]
  %975 = icmp eq i32 %974, 0
  br i1 %975, label %976, label %977

976:                                              ; preds = %973
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %962) #14
  br label %977

977:                                              ; preds = %976, %973, %961
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %885) #14
  %978 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %882, align 8
  %979 = load i32, i32* %884, align 4
  %980 = zext i32 %979 to i64
  %981 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %978, i64 %980
  %982 = bitcast i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %982) #14
  store i1 (%"class.WTF::String"*, %"class.WTF::String"*)* @_ZN3WTF23CodeUnitCompareLessThanERKNS_6StringES2_, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %13, align 8
  call void @_ZNSt3__16__sortIRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEvT0_SA_T_(%"class.WTF::AtomicString"* %978, %"class.WTF::AtomicString"* %981, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** nonnull dereferenceable(8) %13) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %982) #14
  %983 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %882, align 8
  %984 = load i32, i32* %884, align 4
  %985 = zext i32 %984 to i64
  %986 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %983, i64 %985
  %987 = icmp eq i32 %984, 0
  br i1 %987, label %1095, label %988

988:                                              ; preds = %977
  %989 = bitcast %"class.WTF::StringView"* %17 to i8*
  %990 = bitcast %"class.WTF::StringView"* %17 to i64*
  %991 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %17, i64 0, i32 1
  %992 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %17, i64 0, i32 2
  %993 = bitcast %"class.WTF::StringView"* %18 to i8*
  %994 = bitcast %"class.WTF::StringView"* %18 to i64*
  %995 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %18, i64 0, i32 1
  %996 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %18, i64 0, i32 2
  %997 = bitcast %"class.WTF::StringView"* %19 to i8*
  %998 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %19, i64 0, i32 0
  %999 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %19, i64 0, i32 1
  %1000 = bitcast i8** %999 to %"class.WTF::StringImpl"**
  %1001 = bitcast %"class.WTF::StringView"* %19 to i64*
  %1002 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %19, i64 0, i32 2
  %1003 = bitcast %"class.WTF::StringView"* %20 to i8*
  %1004 = bitcast %"class.WTF::StringView"* %20 to i64*
  %1005 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %20, i64 0, i32 1
  %1006 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %20, i64 0, i32 2
  br label %1176

1007:                                             ; preds = %941, %939
  %1008 = phi %"class.WTF::AtomicString"* [ %940, %939 ], [ %944, %941 ]
  %1009 = icmp eq i32 %937, 0
  %1010 = select i1 %1009, %"class.WTF::AtomicString"* %929, %"class.WTF::AtomicString"* %1008
  %1011 = load i32, i32* %884, align 4
  %1012 = load i32, i32* %883, align 8
  %1013 = icmp eq i32 %1011, %1012
  br i1 %1013, label %1041, label %1014, !prof !5

1014:                                             ; preds = %1007
  %1015 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %882, align 8
  %1016 = zext i32 %1011 to i64
  %1017 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1010, i64 0, i32 0, i32 0, i32 0
  %1018 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1017, align 8
  %1019 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1015, i64 %1016, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %1018, %"class.WTF::StringImpl"** %1019, align 8
  %1020 = icmp eq %"class.WTF::StringImpl"* %1018, null
  br i1 %1020, label %1038, label %1021

1021:                                             ; preds = %1014
  %1022 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1018, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1023 = load atomic i32, i32* %1022 monotonic, align 4
  %1024 = and i32 %1023, 2
  %1025 = icmp eq i32 %1024, 0
  br i1 %1025, label %1026, label %1038

1026:                                             ; preds = %1021
  %1027 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1018, i64 0, i32 0
  %1028 = load i32, i32* %1027, align 4
  %1029 = zext i32 %1028 to i33
  %1030 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1029, i33 1) #14
  %1031 = extractvalue { i33, i1 } %1030, 1
  %1032 = extractvalue { i33, i1 } %1030, 0
  %1033 = icmp slt i33 %1032, 0
  %1034 = or i1 %1031, %1033
  br i1 %1034, label %1035, label %1036, !prof !5

1035:                                             ; preds = %1026
  call void @llvm.trap() #14
  unreachable

1036:                                             ; preds = %1026
  %1037 = trunc i33 %1032 to i32
  store i32 %1037, i32* %1027, align 4
  br label %1038

1038:                                             ; preds = %1036, %1021, %1014
  %1039 = load i32, i32* %884, align 4
  %1040 = add i32 %1039, 1
  store i32 %1040, i32* %884, align 4
  br label %1042

1041:                                             ; preds = %1007
  call void @_ZN3WTF6VectorINS_12AtomicStringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.712"* nonnull %15, %"class.WTF::AtomicString"* dereferenceable(8) %1010) #14
  br label %1042

1042:                                             ; preds = %1041, %1038
  %1043 = load i32, i32* %886, align 8
  %1044 = icmp eq i32 %1043, 0
  br i1 %1044, label %1045, label %1082

1045:                                             ; preds = %1042
  %1046 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %932, align 8
  %1047 = icmp eq %"class.WTF::StringImpl"* %1046, null
  br i1 %1047, label %1065, label %1048

1048:                                             ; preds = %1045
  %1049 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1046, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1050 = load atomic i32, i32* %1049 monotonic, align 4
  %1051 = and i32 %1050, 2
  %1052 = icmp eq i32 %1051, 0
  br i1 %1052, label %1053, label %1065

1053:                                             ; preds = %1048
  %1054 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1046, i64 0, i32 0
  %1055 = load i32, i32* %1054, align 4
  %1056 = zext i32 %1055 to i33
  %1057 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1056, i33 1) #14
  %1058 = extractvalue { i33, i1 } %1057, 1
  %1059 = extractvalue { i33, i1 } %1057, 0
  %1060 = icmp slt i33 %1059, 0
  %1061 = or i1 %1058, %1060
  br i1 %1061, label %1062, label %1063, !prof !5

1062:                                             ; preds = %1053
  call void @llvm.trap() #14
  unreachable

1063:                                             ; preds = %1053
  %1064 = trunc i33 %1059 to i32
  store i32 %1064, i32* %1054, align 4
  br label %1065

1065:                                             ; preds = %1063, %1048, %1045
  %1066 = ptrtoint %"class.WTF::StringImpl"* %1046 to i64
  %1067 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %934, align 8
  store i64 %1066, i64* %933, align 8
  %1068 = icmp eq %"class.WTF::StringImpl"* %1067, null
  br i1 %1068, label %1087, label %1069

1069:                                             ; preds = %1065
  %1070 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1067, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1071 = load atomic i32, i32* %1070 monotonic, align 4
  %1072 = and i32 %1071, 2
  %1073 = icmp eq i32 %1072, 0
  %1074 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1067, i64 0, i32 0
  %1075 = load i32, i32* %1074, align 4
  br i1 %1073, label %1076, label %1078

1076:                                             ; preds = %1069
  %1077 = add i32 %1075, -1
  store i32 %1077, i32* %1074, align 4
  br label %1078

1078:                                             ; preds = %1076, %1069
  %1079 = phi i32 [ %1077, %1076 ], [ %1075, %1069 ]
  %1080 = icmp eq i32 %1079, 0
  br i1 %1080, label %1081, label %1087

1081:                                             ; preds = %1078
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1067) #14
  br label %1087

1082:                                             ; preds = %1042
  %1083 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %928, align 8
  %1084 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1083, i64 1
  store %"class.WTF::AtomicString"* %1084, %"class.WTF::AtomicString"** %928, align 8
  %1085 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %930, align 8
  %1086 = icmp eq %"class.WTF::AtomicString"* %1084, %1085
  br i1 %1086, label %1087, label %1088

1087:                                             ; preds = %1088, %1092, %1082, %1081, %1078, %1065
  br label %936

1088:                                             ; preds = %1082, %1092
  %1089 = phi %"class.WTF::AtomicString"* [ %1093, %1092 ], [ %1084, %1082 ]
  %1090 = bitcast %"class.WTF::AtomicString"* %1089 to i64*
  %1091 = load i64, i64* %1090, align 8
  switch i64 %1091, label %1087 [
    i64 -1, label %1092
    i64 0, label %1092
  ]

1092:                                             ; preds = %1088, %1088
  %1093 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1089, i64 1
  store %"class.WTF::AtomicString"* %1093, %"class.WTF::AtomicString"** %928, align 8
  %1094 = icmp eq %"class.WTF::AtomicString"* %1093, %1085
  br i1 %1094, label %1087, label %1088

1095:                                             ; preds = %1193, %977
  %1096 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %14) #14
  %1097 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %882, align 8
  %1098 = icmp eq %"class.WTF::AtomicString"* %1097, null
  br i1 %1098, label %1132, label %1099, !prof !27

1099:                                             ; preds = %1095
  %1100 = bitcast %"class.WTF::AtomicString"* %1097 to i8*
  %1101 = load i32, i32* %884, align 4
  %1102 = icmp eq i32 %1101, 0
  br i1 %1102, label %1130, label %1103, !prof !5

1103:                                             ; preds = %1099
  %1104 = zext i32 %1101 to i64
  %1105 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1097, i64 %1104
  br label %1106

1106:                                             ; preds = %1124, %1103
  %1107 = phi %"class.WTF::AtomicString"* [ %1125, %1124 ], [ %1097, %1103 ]
  %1108 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1107, i64 0, i32 0, i32 0, i32 0
  %1109 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1108, align 8
  %1110 = icmp eq %"class.WTF::StringImpl"* %1109, null
  br i1 %1110, label %1124, label %1111

1111:                                             ; preds = %1106
  %1112 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1109, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1113 = load atomic i32, i32* %1112 monotonic, align 4
  %1114 = and i32 %1113, 2
  %1115 = icmp eq i32 %1114, 0
  %1116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1109, i64 0, i32 0
  %1117 = load i32, i32* %1116, align 4
  br i1 %1115, label %1118, label %1120

1118:                                             ; preds = %1111
  %1119 = add i32 %1117, -1
  store i32 %1119, i32* %1116, align 4
  br label %1120

1120:                                             ; preds = %1118, %1111
  %1121 = phi i32 [ %1119, %1118 ], [ %1117, %1111 ]
  %1122 = icmp eq i32 %1121, 0
  br i1 %1122, label %1123, label %1124

1123:                                             ; preds = %1120
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1109) #14
  br label %1124

1124:                                             ; preds = %1123, %1120, %1106
  %1125 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1107, i64 1
  %1126 = icmp eq %"class.WTF::AtomicString"* %1125, %1105
  br i1 %1126, label %1127, label %1106

1127:                                             ; preds = %1124
  store i32 0, i32* %884, align 4
  %1128 = bitcast %"class.WTF::Vector.712"* %15 to i8**
  %1129 = load i8*, i8** %1128, align 8
  br label %1130

1130:                                             ; preds = %1127, %1099
  %1131 = phi i8* [ %1129, %1127 ], [ %1100, %1099 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %1131) #14
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %882, align 8
  br label %1132

1132:                                             ; preds = %1130, %1095
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %881) #14
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %14) #14
  %1133 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %875, align 8
  %1134 = icmp eq %"class.WTF::StringImpl"* %1133, null
  br i1 %1134, label %1148, label %1135

1135:                                             ; preds = %1132
  %1136 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1133, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1137 = load atomic i32, i32* %1136 monotonic, align 4
  %1138 = and i32 %1137, 2
  %1139 = icmp eq i32 %1138, 0
  %1140 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1133, i64 0, i32 0
  %1141 = load i32, i32* %1140, align 4
  br i1 %1139, label %1142, label %1144

1142:                                             ; preds = %1135
  %1143 = add i32 %1141, -1
  store i32 %1143, i32* %1140, align 4
  br label %1144

1144:                                             ; preds = %1142, %1135
  %1145 = phi i32 [ %1143, %1142 ], [ %1141, %1135 ]
  %1146 = icmp eq i32 %1145, 0
  br i1 %1146, label %1147, label %1148

1147:                                             ; preds = %1144
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1133) #14
  br label %1148

1148:                                             ; preds = %1147, %1144, %1132
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %874) #14
  br i1 %909, label %1162, label %1149

1149:                                             ; preds = %1148
  %1150 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %871, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1151 = load atomic i32, i32* %1150 monotonic, align 4
  %1152 = and i32 %1151, 2
  %1153 = icmp eq i32 %1152, 0
  %1154 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %871, i64 0, i32 0
  %1155 = load i32, i32* %1154, align 4
  br i1 %1153, label %1156, label %1158

1156:                                             ; preds = %1149
  %1157 = add i32 %1155, -1
  store i32 %1157, i32* %1154, align 4
  br label %1158

1158:                                             ; preds = %1156, %1149
  %1159 = phi i32 [ %1157, %1156 ], [ %1155, %1149 ]
  %1160 = icmp eq i32 %1159, 0
  br i1 %1160, label %1161, label %1162

1161:                                             ; preds = %1158
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %871) #14
  br label %1162

1162:                                             ; preds = %1161, %1158, %1148
  br i1 %888, label %1198, label %1163

1163:                                             ; preds = %1162
  %1164 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %865, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1165 = load atomic i32, i32* %1164 monotonic, align 4
  %1166 = and i32 %1165, 2
  %1167 = icmp eq i32 %1166, 0
  %1168 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %865, i64 0, i32 0
  %1169 = load i32, i32* %1168, align 4
  br i1 %1167, label %1170, label %1172

1170:                                             ; preds = %1163
  %1171 = add i32 %1169, -1
  store i32 %1171, i32* %1168, align 4
  br label %1172

1172:                                             ; preds = %1170, %1163
  %1173 = phi i32 [ %1171, %1170 ], [ %1169, %1163 ]
  %1174 = icmp eq i32 %1173, 0
  br i1 %1174, label %1175, label %1198

1175:                                             ; preds = %1172
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %865) #14
  br label %1198

1176:                                             ; preds = %1193, %988
  %1177 = phi %"class.WTF::AtomicString"* [ %983, %988 ], [ %1196, %1193 ]
  %1178 = load i32, i32* %878, align 8
  %1179 = icmp eq i32 %1178, 0
  br i1 %1179, label %1182, label %1180

1180:                                             ; preds = %1176
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %989) #14
  %1181 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %1181, i64* %990, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i64 0, i64 0), i8** %991, align 8
  store i32 1, i32* %992, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %14, %"class.WTF::StringView"* nonnull dereferenceable(24) %17) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %989) #14
  br label %1182

1182:                                             ; preds = %1180, %1176
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %993) #14
  %1183 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %1183, i64* %994, align 8
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.30, i64 0, i64 0), i8** %995, align 8
  store i32 0, i32* %996, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %14, %"class.WTF::StringView"* nonnull dereferenceable(24) %18) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %993) #14
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %997) #14
  %1184 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1177, i64 0, i32 0, i32 0, i32 0
  %1185 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1184, align 8
  %1186 = icmp eq %"class.WTF::StringImpl"* %1185, null
  br i1 %1186, label %1187, label %1189

1187:                                             ; preds = %1182
  store i8* null, i8** %999, align 8
  %1188 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %1188, i64* %1001, align 8
  br label %1193

1189:                                             ; preds = %1182
  store %"class.WTF::StringImpl"* %1185, %"class.WTF::StringImpl"** %998, align 8
  %1190 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1185, i64 0, i32 1
  %1191 = load i32, i32* %1190, align 4
  %1192 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1185, i64 1
  store %"class.WTF::StringImpl"* %1192, %"class.WTF::StringImpl"** %1000, align 8
  br label %1193

1193:                                             ; preds = %1189, %1187
  %1194 = phi i32 [ %1191, %1189 ], [ 0, %1187 ]
  store i32 %1194, i32* %1002, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %14, %"class.WTF::StringView"* nonnull dereferenceable(24) %19) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %997) #14
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1003) #14
  %1195 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %1195, i64* %1004, align 8
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.30, i64 0, i64 0), i8** %1005, align 8
  store i32 0, i32* %1006, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %14, %"class.WTF::StringView"* nonnull dereferenceable(24) %20) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1003) #14
  %1196 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1177, i64 1
  %1197 = icmp eq %"class.WTF::AtomicString"* %1196, %986
  br i1 %1197, label %1095, label %1176

1198:                                             ; preds = %1162, %1172, %1175
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %861)
  %1199 = icmp eq %"class.WTF::StringImpl"* %1096, null
  br i1 %1199, label %1200, label %1205

1200:                                             ; preds = %1198
  %1201 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %47, i64 0, i32 1
  store i8* null, i8** %1201, align 8
  %1202 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %1203 = bitcast %"class.WTF::StringView"* %47 to i64*
  store i64 %1202, i64* %1203, align 8
  %1204 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %47, i64 0, i32 2
  store i32 0, i32* %1204, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %40, %"class.WTF::StringView"* nonnull dereferenceable(24) %47)
  br label %1225

1205:                                             ; preds = %1198
  %1206 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %47, i64 0, i32 0
  store %"class.WTF::StringImpl"* %1096, %"class.WTF::StringImpl"** %1206, align 8
  %1207 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1096, i64 0, i32 1
  %1208 = load i32, i32* %1207, align 4
  %1209 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1096, i64 1
  %1210 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %47, i64 0, i32 1
  %1211 = bitcast i8** %1210 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %1209, %"class.WTF::StringImpl"** %1211, align 8
  %1212 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %47, i64 0, i32 2
  store i32 %1208, i32* %1212, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %40, %"class.WTF::StringView"* nonnull dereferenceable(24) %47)
  %1213 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1096, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1214 = load atomic i32, i32* %1213 monotonic, align 4
  %1215 = and i32 %1214, 2
  %1216 = icmp eq i32 %1215, 0
  %1217 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1096, i64 0, i32 0
  %1218 = load i32, i32* %1217, align 4
  br i1 %1216, label %1219, label %1221

1219:                                             ; preds = %1205
  %1220 = add i32 %1218, -1
  store i32 %1220, i32* %1217, align 4
  br label %1221

1221:                                             ; preds = %1219, %1205
  %1222 = phi i32 [ %1220, %1219 ], [ %1218, %1205 ]
  %1223 = icmp eq i32 %1222, 0
  br i1 %1223, label %1224, label %1225

1224:                                             ; preds = %1221
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1096) #14
  br label %1225

1225:                                             ; preds = %1200, %1221, %1224
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %858) #14
  %1226 = load i8, i8* %73, align 1
  br label %1227

1227:                                             ; preds = %843, %1225
  %1228 = phi i8 [ %840, %843 ], [ %1226, %1225 ]
  %1229 = and i8 %1228, 8
  %1230 = icmp eq i8 %1229, 0
  br i1 %1230, label %1231, label %1235

1231:                                             ; preds = %1227
  %1232 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 5, i32 0
  %1233 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1232, align 8
  %1234 = icmp eq %"class.WTF::StringImpl"* %1233, null
  br i1 %1234, label %1614, label %1235

1235:                                             ; preds = %1231, %1227
  %1236 = bitcast %"class.WTF::StringView"* %49 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1236) #14
  %1237 = load i32, i32* %70, align 8
  %1238 = icmp eq i32 %1237, 0
  %1239 = xor i1 %1238, true
  %1240 = select i1 %1238, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i64 0, i64 0)
  %1241 = zext i1 %1239 to i32
  %1242 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %1243 = bitcast %"class.WTF::StringView"* %49 to i64*
  store i64 %1242, i64* %1243, align 8
  %1244 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %49, i64 0, i32 1
  store i8* %1240, i8** %1244, align 8
  %1245 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %49, i64 0, i32 2
  store i32 %1241, i32* %1245, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %40, %"class.WTF::StringView"* nonnull dereferenceable(24) %49)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1236) #14
  %1246 = bitcast %"class.WTF::StringView"* %50 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1246) #14
  %1247 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 5
  %1248 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 7
  call void @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5ItemsERKNS0_12BackingFlagsE(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* nonnull sret %51, %"union.blink::InvalidationSet::Backing.3"* %1247, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1) %1248) #14
  %1249 = bitcast %"class.WTF::HashTableConstIterator"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1249)
  %1250 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %51, i64 0, i32 0, i32 0
  %1251 = load i32, i32* %1250, align 8
  %1252 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %51, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %1253 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1252, align 8
  %1254 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %51, i64 0, i32 0, i32 2
  %1255 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %1254 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1249, i8* align 8 %1255, i64 16, i1 false)
  %1256 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %51, i64 0, i32 1, i32 0
  %1257 = load i32, i32* %1256, align 8
  %1258 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %51, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %1259 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1258, align 8
  %1260 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %51, i64 0, i32 1, i32 2, i32 0, i32 0
  %1261 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %1260, align 8
  %1262 = bitcast %"class.WTF::StringBuilder"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %1262) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1262, i8 -86, i64 48, i1 false) #14
  %1263 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %5, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1263, align 8
  %1264 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %5, i64 0, i32 1
  %1265 = bitcast %union.anon.685* %1264 to i8*
  store i8 0, i8* %1265, align 8
  %1266 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %5, i64 0, i32 2
  store i32 0, i32* %1266, align 8
  %1267 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %5, i64 0, i32 3
  store i8 1, i8* %1267, align 4
  %1268 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %5, i64 0, i32 4
  store i8 0, i8* %1268, align 1
  %1269 = bitcast %"class.WTF::Vector.712"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1269) #14
  %1270 = getelementptr inbounds %"class.WTF::Vector.712", %"class.WTF::Vector.712"* %6, i64 0, i32 0, i32 0, i32 0
  %1271 = getelementptr inbounds %"class.WTF::Vector.712", %"class.WTF::Vector.712"* %6, i64 0, i32 0, i32 0, i32 1
  %1272 = getelementptr inbounds %"class.WTF::Vector.712", %"class.WTF::Vector.712"* %6, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1269, i8 0, i64 16, i1 false) #14
  %1273 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1273) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1273, i8 -86, i64 32, i1 false) #14
  %1274 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %7, i64 0, i32 0
  store i32 %1251, i32* %1274, align 8, !alias.scope !71
  %1275 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %7, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %1253, %"class.WTF::StringImpl"** %1275, align 8, !alias.scope !71
  %1276 = icmp eq %"class.WTF::StringImpl"* %1253, null
  br i1 %1276, label %1294, label %1277

1277:                                             ; preds = %1235
  %1278 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1253, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1279 = load atomic i32, i32* %1278 monotonic, align 4, !noalias !71
  %1280 = and i32 %1279, 2
  %1281 = icmp eq i32 %1280, 0
  br i1 %1281, label %1282, label %1294

1282:                                             ; preds = %1277
  %1283 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1253, i64 0, i32 0
  %1284 = load i32, i32* %1283, align 4, !noalias !71
  %1285 = zext i32 %1284 to i33
  %1286 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1285, i33 1) #14
  %1287 = extractvalue { i33, i1 } %1286, 1
  %1288 = extractvalue { i33, i1 } %1286, 0
  %1289 = icmp slt i33 %1288, 0
  %1290 = or i1 %1287, %1289
  br i1 %1290, label %1291, label %1292, !prof !5

1291:                                             ; preds = %1282
  call void @llvm.trap() #14, !noalias !71
  unreachable

1292:                                             ; preds = %1282
  %1293 = trunc i33 %1288 to i32
  store i32 %1293, i32* %1283, align 4, !noalias !71
  br label %1294

1294:                                             ; preds = %1292, %1277, %1235
  %1295 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %7, i64 0, i32 2
  %1296 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %1295 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1296, i8* nonnull align 8 %1249, i64 16, i1 false)
  %1297 = icmp eq %"class.WTF::StringImpl"* %1259, null
  br i1 %1297, label %1315, label %1298

1298:                                             ; preds = %1294
  %1299 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1259, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1300 = load atomic i32, i32* %1299 monotonic, align 4, !noalias !74
  %1301 = and i32 %1300, 2
  %1302 = icmp eq i32 %1301, 0
  br i1 %1302, label %1303, label %1315

1303:                                             ; preds = %1298
  %1304 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1259, i64 0, i32 0
  %1305 = load i32, i32* %1304, align 4, !noalias !74
  %1306 = zext i32 %1305 to i33
  %1307 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1306, i33 1) #14
  %1308 = extractvalue { i33, i1 } %1307, 1
  %1309 = extractvalue { i33, i1 } %1307, 0
  %1310 = icmp slt i33 %1309, 0
  %1311 = or i1 %1308, %1310
  br i1 %1311, label %1312, label %1313, !prof !5

1312:                                             ; preds = %1303
  call void @llvm.trap() #14, !noalias !74
  unreachable

1313:                                             ; preds = %1303
  %1314 = trunc i33 %1309 to i32
  store i32 %1314, i32* %1304, align 4, !noalias !74
  br label %1315

1315:                                             ; preds = %1313, %1298, %1294
  %1316 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %7, i64 0, i32 2, i32 0, i32 0
  %1317 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %7, i64 0, i32 1
  %1318 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %7, i64 0, i32 2, i32 0, i32 1
  %1319 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %1320 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1319, i64 0, i32 0, i32 0, i32 0
  %1321 = bitcast %"class.WTF::AtomicString"* %1317 to i64*
  %1322 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1317, i64 0, i32 0, i32 0, i32 0
  %1323 = icmp eq i32 %1257, 0
  br label %1324

1324:                                             ; preds = %1475, %1315
  %1325 = load i32, i32* %1274, align 8
  %1326 = icmp eq i32 %1325, %1257
  br i1 %1326, label %1329, label %1327

1327:                                             ; preds = %1324
  %1328 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %1316, align 8
  br label %1395

1329:                                             ; preds = %1324
  %1330 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1275, align 8
  %1331 = icmp eq %"class.WTF::StringImpl"* %1330, %1259
  %1332 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %1316, align 8
  %1333 = icmp eq %"class.WTF::AtomicString"* %1332, %1261
  %1334 = select i1 %1323, i1 %1331, i1 %1333
  br i1 %1334, label %1335, label %1395

1335:                                             ; preds = %1329
  br i1 %1297, label %1349, label %1336

1336:                                             ; preds = %1335
  %1337 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1259, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1338 = load atomic i32, i32* %1337 monotonic, align 4
  %1339 = and i32 %1338, 2
  %1340 = icmp eq i32 %1339, 0
  %1341 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1259, i64 0, i32 0
  %1342 = load i32, i32* %1341, align 4
  br i1 %1340, label %1343, label %1345

1343:                                             ; preds = %1336
  %1344 = add i32 %1342, -1
  store i32 %1344, i32* %1341, align 4
  br label %1345

1345:                                             ; preds = %1343, %1336
  %1346 = phi i32 [ %1344, %1343 ], [ %1342, %1336 ]
  %1347 = icmp eq i32 %1346, 0
  br i1 %1347, label %1348, label %1349

1348:                                             ; preds = %1345
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1259) #14
  br label %1349

1349:                                             ; preds = %1348, %1345, %1335
  %1350 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1275, align 8
  %1351 = icmp eq %"class.WTF::StringImpl"* %1350, null
  br i1 %1351, label %1365, label %1352

1352:                                             ; preds = %1349
  %1353 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1350, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1354 = load atomic i32, i32* %1353 monotonic, align 4
  %1355 = and i32 %1354, 2
  %1356 = icmp eq i32 %1355, 0
  %1357 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1350, i64 0, i32 0
  %1358 = load i32, i32* %1357, align 4
  br i1 %1356, label %1359, label %1361

1359:                                             ; preds = %1352
  %1360 = add i32 %1358, -1
  store i32 %1360, i32* %1357, align 4
  br label %1361

1361:                                             ; preds = %1359, %1352
  %1362 = phi i32 [ %1360, %1359 ], [ %1358, %1352 ]
  %1363 = icmp eq i32 %1362, 0
  br i1 %1363, label %1364, label %1365

1364:                                             ; preds = %1361
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1350) #14
  br label %1365

1365:                                             ; preds = %1364, %1361, %1349
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1273) #14
  %1366 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %1270, align 8
  %1367 = load i32, i32* %1272, align 4
  %1368 = zext i32 %1367 to i64
  %1369 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1366, i64 %1368
  %1370 = bitcast i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1370) #14
  store i1 (%"class.WTF::String"*, %"class.WTF::String"*)* @_ZN3WTF23CodeUnitCompareLessThanERKNS_6StringES2_, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %4, align 8
  call void @_ZNSt3__16__sortIRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEvT0_SA_T_(%"class.WTF::AtomicString"* %1366, %"class.WTF::AtomicString"* %1369, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** nonnull dereferenceable(8) %4) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1370) #14
  %1371 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %1270, align 8
  %1372 = load i32, i32* %1272, align 4
  %1373 = zext i32 %1372 to i64
  %1374 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1371, i64 %1373
  %1375 = icmp eq i32 %1372, 0
  br i1 %1375, label %1483, label %1376

1376:                                             ; preds = %1365
  %1377 = bitcast %"class.WTF::StringView"* %8 to i8*
  %1378 = bitcast %"class.WTF::StringView"* %8 to i64*
  %1379 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  %1380 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  %1381 = bitcast %"class.WTF::StringView"* %9 to i8*
  %1382 = bitcast %"class.WTF::StringView"* %9 to i64*
  %1383 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  %1384 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  %1385 = bitcast %"class.WTF::StringView"* %10 to i8*
  %1386 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 0
  %1387 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  %1388 = bitcast i8** %1387 to %"class.WTF::StringImpl"**
  %1389 = bitcast %"class.WTF::StringView"* %10 to i64*
  %1390 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  %1391 = bitcast %"class.WTF::StringView"* %11 to i8*
  %1392 = bitcast %"class.WTF::StringView"* %11 to i64*
  %1393 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  %1394 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 2
  br label %1564

1395:                                             ; preds = %1329, %1327
  %1396 = phi %"class.WTF::AtomicString"* [ %1328, %1327 ], [ %1332, %1329 ]
  %1397 = icmp eq i32 %1325, 0
  %1398 = select i1 %1397, %"class.WTF::AtomicString"* %1317, %"class.WTF::AtomicString"* %1396
  %1399 = load i32, i32* %1272, align 4
  %1400 = load i32, i32* %1271, align 8
  %1401 = icmp eq i32 %1399, %1400
  br i1 %1401, label %1429, label %1402, !prof !5

1402:                                             ; preds = %1395
  %1403 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %1270, align 8
  %1404 = zext i32 %1399 to i64
  %1405 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1398, i64 0, i32 0, i32 0, i32 0
  %1406 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1405, align 8
  %1407 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1403, i64 %1404, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %1406, %"class.WTF::StringImpl"** %1407, align 8
  %1408 = icmp eq %"class.WTF::StringImpl"* %1406, null
  br i1 %1408, label %1426, label %1409

1409:                                             ; preds = %1402
  %1410 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1406, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1411 = load atomic i32, i32* %1410 monotonic, align 4
  %1412 = and i32 %1411, 2
  %1413 = icmp eq i32 %1412, 0
  br i1 %1413, label %1414, label %1426

1414:                                             ; preds = %1409
  %1415 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1406, i64 0, i32 0
  %1416 = load i32, i32* %1415, align 4
  %1417 = zext i32 %1416 to i33
  %1418 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1417, i33 1) #14
  %1419 = extractvalue { i33, i1 } %1418, 1
  %1420 = extractvalue { i33, i1 } %1418, 0
  %1421 = icmp slt i33 %1420, 0
  %1422 = or i1 %1419, %1421
  br i1 %1422, label %1423, label %1424, !prof !5

1423:                                             ; preds = %1414
  call void @llvm.trap() #14
  unreachable

1424:                                             ; preds = %1414
  %1425 = trunc i33 %1420 to i32
  store i32 %1425, i32* %1415, align 4
  br label %1426

1426:                                             ; preds = %1424, %1409, %1402
  %1427 = load i32, i32* %1272, align 4
  %1428 = add i32 %1427, 1
  store i32 %1428, i32* %1272, align 4
  br label %1430

1429:                                             ; preds = %1395
  call void @_ZN3WTF6VectorINS_12AtomicStringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.712"* nonnull %6, %"class.WTF::AtomicString"* dereferenceable(8) %1398) #14
  br label %1430

1430:                                             ; preds = %1429, %1426
  %1431 = load i32, i32* %1274, align 8
  %1432 = icmp eq i32 %1431, 0
  br i1 %1432, label %1433, label %1470

1433:                                             ; preds = %1430
  %1434 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1320, align 8
  %1435 = icmp eq %"class.WTF::StringImpl"* %1434, null
  br i1 %1435, label %1453, label %1436

1436:                                             ; preds = %1433
  %1437 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1434, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1438 = load atomic i32, i32* %1437 monotonic, align 4
  %1439 = and i32 %1438, 2
  %1440 = icmp eq i32 %1439, 0
  br i1 %1440, label %1441, label %1453

1441:                                             ; preds = %1436
  %1442 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1434, i64 0, i32 0
  %1443 = load i32, i32* %1442, align 4
  %1444 = zext i32 %1443 to i33
  %1445 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1444, i33 1) #14
  %1446 = extractvalue { i33, i1 } %1445, 1
  %1447 = extractvalue { i33, i1 } %1445, 0
  %1448 = icmp slt i33 %1447, 0
  %1449 = or i1 %1446, %1448
  br i1 %1449, label %1450, label %1451, !prof !5

1450:                                             ; preds = %1441
  call void @llvm.trap() #14
  unreachable

1451:                                             ; preds = %1441
  %1452 = trunc i33 %1447 to i32
  store i32 %1452, i32* %1442, align 4
  br label %1453

1453:                                             ; preds = %1451, %1436, %1433
  %1454 = ptrtoint %"class.WTF::StringImpl"* %1434 to i64
  %1455 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1322, align 8
  store i64 %1454, i64* %1321, align 8
  %1456 = icmp eq %"class.WTF::StringImpl"* %1455, null
  br i1 %1456, label %1475, label %1457

1457:                                             ; preds = %1453
  %1458 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1455, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1459 = load atomic i32, i32* %1458 monotonic, align 4
  %1460 = and i32 %1459, 2
  %1461 = icmp eq i32 %1460, 0
  %1462 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1455, i64 0, i32 0
  %1463 = load i32, i32* %1462, align 4
  br i1 %1461, label %1464, label %1466

1464:                                             ; preds = %1457
  %1465 = add i32 %1463, -1
  store i32 %1465, i32* %1462, align 4
  br label %1466

1466:                                             ; preds = %1464, %1457
  %1467 = phi i32 [ %1465, %1464 ], [ %1463, %1457 ]
  %1468 = icmp eq i32 %1467, 0
  br i1 %1468, label %1469, label %1475

1469:                                             ; preds = %1466
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1455) #14
  br label %1475

1470:                                             ; preds = %1430
  %1471 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %1316, align 8
  %1472 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1471, i64 1
  store %"class.WTF::AtomicString"* %1472, %"class.WTF::AtomicString"** %1316, align 8
  %1473 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %1318, align 8
  %1474 = icmp eq %"class.WTF::AtomicString"* %1472, %1473
  br i1 %1474, label %1475, label %1476

1475:                                             ; preds = %1476, %1480, %1470, %1469, %1466, %1453
  br label %1324

1476:                                             ; preds = %1470, %1480
  %1477 = phi %"class.WTF::AtomicString"* [ %1481, %1480 ], [ %1472, %1470 ]
  %1478 = bitcast %"class.WTF::AtomicString"* %1477 to i64*
  %1479 = load i64, i64* %1478, align 8
  switch i64 %1479, label %1475 [
    i64 -1, label %1480
    i64 0, label %1480
  ]

1480:                                             ; preds = %1476, %1476
  %1481 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1477, i64 1
  store %"class.WTF::AtomicString"* %1481, %"class.WTF::AtomicString"** %1316, align 8
  %1482 = icmp eq %"class.WTF::AtomicString"* %1481, %1473
  br i1 %1482, label %1475, label %1476

1483:                                             ; preds = %1581, %1365
  %1484 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %5) #14
  %1485 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %1270, align 8
  %1486 = icmp eq %"class.WTF::AtomicString"* %1485, null
  br i1 %1486, label %1520, label %1487, !prof !27

1487:                                             ; preds = %1483
  %1488 = bitcast %"class.WTF::AtomicString"* %1485 to i8*
  %1489 = load i32, i32* %1272, align 4
  %1490 = icmp eq i32 %1489, 0
  br i1 %1490, label %1518, label %1491, !prof !5

1491:                                             ; preds = %1487
  %1492 = zext i32 %1489 to i64
  %1493 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1485, i64 %1492
  br label %1494

1494:                                             ; preds = %1512, %1491
  %1495 = phi %"class.WTF::AtomicString"* [ %1513, %1512 ], [ %1485, %1491 ]
  %1496 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1495, i64 0, i32 0, i32 0, i32 0
  %1497 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1496, align 8
  %1498 = icmp eq %"class.WTF::StringImpl"* %1497, null
  br i1 %1498, label %1512, label %1499

1499:                                             ; preds = %1494
  %1500 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1497, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1501 = load atomic i32, i32* %1500 monotonic, align 4
  %1502 = and i32 %1501, 2
  %1503 = icmp eq i32 %1502, 0
  %1504 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1497, i64 0, i32 0
  %1505 = load i32, i32* %1504, align 4
  br i1 %1503, label %1506, label %1508

1506:                                             ; preds = %1499
  %1507 = add i32 %1505, -1
  store i32 %1507, i32* %1504, align 4
  br label %1508

1508:                                             ; preds = %1506, %1499
  %1509 = phi i32 [ %1507, %1506 ], [ %1505, %1499 ]
  %1510 = icmp eq i32 %1509, 0
  br i1 %1510, label %1511, label %1512

1511:                                             ; preds = %1508
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1497) #14
  br label %1512

1512:                                             ; preds = %1511, %1508, %1494
  %1513 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1495, i64 1
  %1514 = icmp eq %"class.WTF::AtomicString"* %1513, %1493
  br i1 %1514, label %1515, label %1494

1515:                                             ; preds = %1512
  store i32 0, i32* %1272, align 4
  %1516 = bitcast %"class.WTF::Vector.712"* %6 to i8**
  %1517 = load i8*, i8** %1516, align 8
  br label %1518

1518:                                             ; preds = %1515, %1487
  %1519 = phi i8* [ %1517, %1515 ], [ %1488, %1487 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %1519) #14
  store %"class.WTF::AtomicString"* null, %"class.WTF::AtomicString"** %1270, align 8
  br label %1520

1520:                                             ; preds = %1518, %1483
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1269) #14
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %5) #14
  %1521 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1263, align 8
  %1522 = icmp eq %"class.WTF::StringImpl"* %1521, null
  br i1 %1522, label %1536, label %1523

1523:                                             ; preds = %1520
  %1524 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1521, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1525 = load atomic i32, i32* %1524 monotonic, align 4
  %1526 = and i32 %1525, 2
  %1527 = icmp eq i32 %1526, 0
  %1528 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1521, i64 0, i32 0
  %1529 = load i32, i32* %1528, align 4
  br i1 %1527, label %1530, label %1532

1530:                                             ; preds = %1523
  %1531 = add i32 %1529, -1
  store i32 %1531, i32* %1528, align 4
  br label %1532

1532:                                             ; preds = %1530, %1523
  %1533 = phi i32 [ %1531, %1530 ], [ %1529, %1523 ]
  %1534 = icmp eq i32 %1533, 0
  br i1 %1534, label %1535, label %1536

1535:                                             ; preds = %1532
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1521) #14
  br label %1536

1536:                                             ; preds = %1535, %1532, %1520
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %1262) #14
  br i1 %1297, label %1550, label %1537

1537:                                             ; preds = %1536
  %1538 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1259, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1539 = load atomic i32, i32* %1538 monotonic, align 4
  %1540 = and i32 %1539, 2
  %1541 = icmp eq i32 %1540, 0
  %1542 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1259, i64 0, i32 0
  %1543 = load i32, i32* %1542, align 4
  br i1 %1541, label %1544, label %1546

1544:                                             ; preds = %1537
  %1545 = add i32 %1543, -1
  store i32 %1545, i32* %1542, align 4
  br label %1546

1546:                                             ; preds = %1544, %1537
  %1547 = phi i32 [ %1545, %1544 ], [ %1543, %1537 ]
  %1548 = icmp eq i32 %1547, 0
  br i1 %1548, label %1549, label %1550

1549:                                             ; preds = %1546
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1259) #14
  br label %1550

1550:                                             ; preds = %1549, %1546, %1536
  br i1 %1276, label %1586, label %1551

1551:                                             ; preds = %1550
  %1552 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1253, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1553 = load atomic i32, i32* %1552 monotonic, align 4
  %1554 = and i32 %1553, 2
  %1555 = icmp eq i32 %1554, 0
  %1556 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1253, i64 0, i32 0
  %1557 = load i32, i32* %1556, align 4
  br i1 %1555, label %1558, label %1560

1558:                                             ; preds = %1551
  %1559 = add i32 %1557, -1
  store i32 %1559, i32* %1556, align 4
  br label %1560

1560:                                             ; preds = %1558, %1551
  %1561 = phi i32 [ %1559, %1558 ], [ %1557, %1551 ]
  %1562 = icmp eq i32 %1561, 0
  br i1 %1562, label %1563, label %1586

1563:                                             ; preds = %1560
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1253) #14
  br label %1586

1564:                                             ; preds = %1581, %1376
  %1565 = phi %"class.WTF::AtomicString"* [ %1371, %1376 ], [ %1584, %1581 ]
  %1566 = load i32, i32* %1266, align 8
  %1567 = icmp eq i32 %1566, 0
  br i1 %1567, label %1570, label %1568

1568:                                             ; preds = %1564
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1377) #14
  %1569 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %1569, i64* %1378, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i64 0, i64 0), i8** %1379, align 8
  store i32 1, i32* %1380, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %5, %"class.WTF::StringView"* nonnull dereferenceable(24) %8) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1377) #14
  br label %1570

1570:                                             ; preds = %1568, %1564
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1381) #14
  %1571 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %1571, i64* %1382, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i64 0, i64 0), i8** %1383, align 8
  store i32 1, i32* %1384, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %5, %"class.WTF::StringView"* nonnull dereferenceable(24) %9) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1381) #14
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1385) #14
  %1572 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1565, i64 0, i32 0, i32 0, i32 0
  %1573 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1572, align 8
  %1574 = icmp eq %"class.WTF::StringImpl"* %1573, null
  br i1 %1574, label %1575, label %1577

1575:                                             ; preds = %1570
  store i8* null, i8** %1387, align 8
  %1576 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %1576, i64* %1389, align 8
  br label %1581

1577:                                             ; preds = %1570
  store %"class.WTF::StringImpl"* %1573, %"class.WTF::StringImpl"** %1386, align 8
  %1578 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1573, i64 0, i32 1
  %1579 = load i32, i32* %1578, align 4
  %1580 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1573, i64 1
  store %"class.WTF::StringImpl"* %1580, %"class.WTF::StringImpl"** %1388, align 8
  br label %1581

1581:                                             ; preds = %1577, %1575
  %1582 = phi i32 [ %1579, %1577 ], [ 0, %1575 ]
  store i32 %1582, i32* %1390, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %5, %"class.WTF::StringView"* nonnull dereferenceable(24) %10) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1385) #14
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1391) #14
  %1583 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  store i64 %1583, i64* %1392, align 8
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i64 0, i64 0), i8** %1393, align 8
  store i32 1, i32* %1394, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %5, %"class.WTF::StringView"* nonnull dereferenceable(24) %11) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1391) #14
  %1584 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1565, i64 1
  %1585 = icmp eq %"class.WTF::AtomicString"* %1584, %1374
  br i1 %1585, label %1483, label %1564

1586:                                             ; preds = %1550, %1560, %1563
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1249)
  %1587 = icmp eq %"class.WTF::StringImpl"* %1484, null
  br i1 %1587, label %1588, label %1593

1588:                                             ; preds = %1586
  %1589 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %50, i64 0, i32 1
  store i8* null, i8** %1589, align 8
  %1590 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %1591 = bitcast %"class.WTF::StringView"* %50 to i64*
  store i64 %1590, i64* %1591, align 8
  %1592 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %50, i64 0, i32 2
  store i32 0, i32* %1592, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %40, %"class.WTF::StringView"* nonnull dereferenceable(24) %50)
  br label %1613

1593:                                             ; preds = %1586
  %1594 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %50, i64 0, i32 0
  store %"class.WTF::StringImpl"* %1484, %"class.WTF::StringImpl"** %1594, align 8
  %1595 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1484, i64 0, i32 1
  %1596 = load i32, i32* %1595, align 4
  %1597 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1484, i64 1
  %1598 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %50, i64 0, i32 1
  %1599 = bitcast i8** %1598 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %1597, %"class.WTF::StringImpl"** %1599, align 8
  %1600 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %50, i64 0, i32 2
  store i32 %1596, i32* %1600, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %40, %"class.WTF::StringView"* nonnull dereferenceable(24) %50)
  %1601 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1484, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1602 = load atomic i32, i32* %1601 monotonic, align 4
  %1603 = and i32 %1602, 2
  %1604 = icmp eq i32 %1603, 0
  %1605 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1484, i64 0, i32 0
  %1606 = load i32, i32* %1605, align 4
  br i1 %1604, label %1607, label %1609

1607:                                             ; preds = %1593
  %1608 = add i32 %1606, -1
  store i32 %1608, i32* %1605, align 4
  br label %1609

1609:                                             ; preds = %1607, %1593
  %1610 = phi i32 [ %1608, %1607 ], [ %1606, %1593 ]
  %1611 = icmp eq i32 %1610, 0
  br i1 %1611, label %1612, label %1613

1612:                                             ; preds = %1609
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1484) #14
  br label %1613

1613:                                             ; preds = %1588, %1609, %1612
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1246) #14
  br label %1614

1614:                                             ; preds = %1231, %1613
  %1615 = bitcast %"class.WTF::StringBuilder"* %52 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %1615) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1615, i8 -86, i64 48, i1 false)
  %1616 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %52, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1616, align 8
  %1617 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %52, i64 0, i32 1
  %1618 = bitcast %union.anon.685* %1617 to i8*
  store i8 0, i8* %1618, align 8
  %1619 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %52, i64 0, i32 2
  store i32 0, i32* %1619, align 8
  %1620 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %52, i64 0, i32 3
  store i8 1, i8* %1620, align 4
  %1621 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %52, i64 0, i32 4
  store i8 0, i8* %1621, align 1
  %1622 = bitcast %"class.WTF::StringView"* %53 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1622) #14
  %1623 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 8
  %1624 = load i8, i8* %1623, align 2
  %1625 = and i8 %1624, 4
  %1626 = icmp eq i8 %1625, 0
  %1627 = xor i1 %1626, true
  %1628 = select i1 %1626, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.35, i64 0, i64 0)
  %1629 = zext i1 %1627 to i32
  %1630 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %1631 = bitcast %"class.WTF::StringView"* %53 to i64*
  store i64 %1630, i64* %1631, align 8
  %1632 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %53, i64 0, i32 1
  store i8* %1628, i8** %1632, align 8
  %1633 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %53, i64 0, i32 2
  store i32 %1629, i32* %1633, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %52, %"class.WTF::StringView"* nonnull dereferenceable(24) %53)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1622) #14
  %1634 = bitcast %"class.WTF::StringView"* %54 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1634) #14
  %1635 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 6, i32 0
  %1636 = load i8, i8* %1635, align 1
  %1637 = and i8 %1636, 2
  %1638 = icmp eq i8 %1637, 0
  %1639 = xor i1 %1638, true
  %1640 = select i1 %1638, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)
  %1641 = zext i1 %1639 to i32
  %1642 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %1643 = bitcast %"class.WTF::StringView"* %54 to i64*
  store i64 %1642, i64* %1643, align 8
  %1644 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %54, i64 0, i32 1
  store i8* %1640, i8** %1644, align 8
  %1645 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %54, i64 0, i32 2
  store i32 %1641, i32* %1645, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %52, %"class.WTF::StringView"* nonnull dereferenceable(24) %54)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1634) #14
  %1646 = bitcast %"class.WTF::StringView"* %55 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1646) #14
  %1647 = load i8, i8* %1635, align 1
  %1648 = and i8 %1647, 1
  %1649 = icmp eq i8 %1648, 0
  %1650 = xor i1 %1649, true
  %1651 = select i1 %1649, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.37, i64 0, i64 0)
  %1652 = zext i1 %1650 to i32
  %1653 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %1654 = bitcast %"class.WTF::StringView"* %55 to i64*
  store i64 %1653, i64* %1654, align 8
  %1655 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %55, i64 0, i32 1
  store i8* %1651, i8** %1655, align 8
  %1656 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %55, i64 0, i32 2
  store i32 %1652, i32* %1656, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %52, %"class.WTF::StringView"* nonnull dereferenceable(24) %55)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1646) #14
  %1657 = bitcast %"class.WTF::StringView"* %56 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1657) #14
  %1658 = load i8, i8* %1635, align 1
  %1659 = and i8 %1658, 4
  %1660 = icmp eq i8 %1659, 0
  %1661 = xor i1 %1660, true
  %1662 = select i1 %1660, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0)
  %1663 = zext i1 %1661 to i32
  %1664 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %1665 = bitcast %"class.WTF::StringView"* %56 to i64*
  store i64 %1664, i64* %1665, align 8
  %1666 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %56, i64 0, i32 1
  store i8* %1662, i8** %1666, align 8
  %1667 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %56, i64 0, i32 2
  store i32 %1663, i32* %1667, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %52, %"class.WTF::StringView"* nonnull dereferenceable(24) %56)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1657) #14
  %1668 = bitcast %"class.WTF::StringView"* %57 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1668) #14
  %1669 = load i8, i8* %1635, align 1
  %1670 = and i8 %1669, 8
  %1671 = icmp eq i8 %1670, 0
  %1672 = xor i1 %1671, true
  %1673 = select i1 %1671, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.39, i64 0, i64 0)
  %1674 = zext i1 %1672 to i32
  %1675 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %1676 = bitcast %"class.WTF::StringView"* %57 to i64*
  store i64 %1675, i64* %1676, align 8
  %1677 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %57, i64 0, i32 1
  store i8* %1673, i8** %1677, align 8
  %1678 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %57, i64 0, i32 2
  store i32 %1674, i32* %1678, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %52, %"class.WTF::StringView"* nonnull dereferenceable(24) %57)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1668) #14
  %1679 = bitcast %"class.WTF::StringView"* %58 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1679) #14
  %1680 = load i8, i8* %1635, align 1
  %1681 = and i8 %1680, 16
  %1682 = icmp eq i8 %1681, 0
  %1683 = xor i1 %1682, true
  %1684 = select i1 %1682, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.40, i64 0, i64 0)
  %1685 = zext i1 %1683 to i32
  %1686 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %1687 = bitcast %"class.WTF::StringView"* %58 to i64*
  store i64 %1686, i64* %1687, align 8
  %1688 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %58, i64 0, i32 1
  store i8* %1684, i8** %1688, align 8
  %1689 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %58, i64 0, i32 2
  store i32 %1685, i32* %1689, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %52, %"class.WTF::StringView"* nonnull dereferenceable(24) %58)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1679) #14
  %1690 = bitcast %"class.WTF::StringView"* %59 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1690) #14
  %1691 = load i8, i8* %1635, align 1
  %1692 = and i8 %1691, 32
  %1693 = icmp eq i8 %1692, 0
  %1694 = xor i1 %1693, true
  %1695 = select i1 %1693, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.41, i64 0, i64 0)
  %1696 = zext i1 %1694 to i32
  %1697 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %1698 = bitcast %"class.WTF::StringView"* %59 to i64*
  store i64 %1697, i64* %1698, align 8
  %1699 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %59, i64 0, i32 1
  store i8* %1695, i8** %1699, align 8
  %1700 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %59, i64 0, i32 2
  store i32 %1696, i32* %1700, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %52, %"class.WTF::StringView"* nonnull dereferenceable(24) %59)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1690) #14
  %1701 = bitcast %"class.WTF::StringView"* %60 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1701) #14
  %1702 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1702)
  %1703 = icmp eq %"class.blink::InvalidationSet"* %0, null
  br i1 %1703, label %1708, label %1704

1704:                                             ; preds = %1614
  %1705 = load i8, i8* %1623, align 2
  %1706 = and i8 %1705, 3
  %1707 = icmp eq i8 %1706, 0
  br i1 %1707, label %1708, label %1731

1708:                                             ; preds = %1704, %1614
  %1709 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_empty_atomE, align 8
  %1710 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1709, i64 0, i32 0, i32 0, i32 0
  %1711 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1710, align 8
  %1712 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %1711, %"class.WTF::StringImpl"** %1712, align 8
  %1713 = icmp eq %"class.WTF::StringImpl"* %1711, null
  br i1 %1713, label %1816, label %1714

1714:                                             ; preds = %1708
  %1715 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1711, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1716 = load atomic i32, i32* %1715 monotonic, align 4
  %1717 = and i32 %1716, 2
  %1718 = icmp eq i32 %1717, 0
  br i1 %1718, label %1719, label %1816

1719:                                             ; preds = %1714
  %1720 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1711, i64 0, i32 0
  %1721 = load i32, i32* %1720, align 4
  %1722 = zext i32 %1721 to i33
  %1723 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1722, i33 1) #14
  %1724 = extractvalue { i33, i1 } %1723, 1
  %1725 = extractvalue { i33, i1 } %1723, 0
  %1726 = icmp slt i33 %1725, 0
  %1727 = or i1 %1724, %1726
  br i1 %1727, label %1728, label %1729, !prof !5

1728:                                             ; preds = %1719
  call void @llvm.trap() #14
  unreachable

1729:                                             ; preds = %1719
  %1730 = trunc i33 %1725 to i32
  store i32 %1730, i32* %1720, align 4
  br label %1816

1731:                                             ; preds = %1704
  %1732 = getelementptr inbounds %"class.blink::InvalidationSet", %"class.blink::InvalidationSet"* %0, i64 0, i32 9, i64 1
  %1733 = bitcast i8* %1732 to i32*
  %1734 = load i32, i32* %1733, align 4
  switch i32 %1734, label %1736 [
    i32 -1, label %1735
    i32 1, label %1793
  ]

1735:                                             ; preds = %1731
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.50, i64 0, i64 0), i64 1) #14
  br label %1816

1736:                                             ; preds = %1731
  %1737 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1737) #14
  %1738 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 11
  %1739 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 2
  %1740 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 3
  %1741 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1737, i8 -86, i64 32, i1 false) #14
  store i8* %1738, i8** %1739, align 8
  %1742 = urem i32 %1734, 10
  %1743 = udiv i32 %1734, 10
  %1744 = trunc i32 %1742 to i8
  %1745 = or i8 %1744, 48
  store i8 %1745, i8* %1738, align 1
  %1746 = icmp ugt i32 %1734, 9
  br i1 %1746, label %1747, label %1771

1747:                                             ; preds = %1736
  %1748 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 10
  store i8* %1748, i8** %1739, align 8
  %1749 = urem i32 %1743, 10
  %1750 = trunc i32 %1749 to i8
  %1751 = or i8 %1750, 48
  store i8 %1751, i8* %1748, align 2
  %1752 = icmp ugt i32 %1734, 99
  br i1 %1752, label %1753, label %1769

1753:                                             ; preds = %1747
  %1754 = udiv i32 %1734, 100
  %1755 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 9
  store i8* %1755, i8** %1739, align 8
  %1756 = urem i32 %1754, 10
  %1757 = trunc i32 %1756 to i8
  %1758 = or i8 %1757, 48
  store i8 %1758, i8* %1755, align 1
  %1759 = icmp ugt i32 %1734, 999
  br i1 %1759, label %1760, label %1767

1760:                                             ; preds = %1753
  %1761 = udiv i32 %1734, 1000
  %1762 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 8
  store i8* %1762, i8** %1739, align 8
  %1763 = urem i32 %1761, 10
  %1764 = trunc i32 %1763 to i8
  %1765 = or i8 %1764, 48
  store i8 %1765, i8* %1762, align 8
  %1766 = icmp ugt i32 %1734, 9999
  br i1 %1766, label %1773, label %1782

1767:                                             ; preds = %1753
  %1768 = ptrtoint i8* %1755 to i64
  br label %1785

1769:                                             ; preds = %1747
  %1770 = ptrtoint i8* %1748 to i64
  br label %1785

1771:                                             ; preds = %1736
  %1772 = ptrtoint i8* %1738 to i64
  br label %1785

1773:                                             ; preds = %1760, %1773
  %1774 = phi i32 [ %1776, %1773 ], [ %1761, %1760 ]
  %1775 = load i8*, i8** %1739, align 8
  %1776 = udiv i32 %1774, 10
  %1777 = getelementptr inbounds i8, i8* %1775, i64 -1
  store i8* %1777, i8** %1739, align 8
  %1778 = urem i32 %1776, 10
  %1779 = trunc i32 %1778 to i8
  %1780 = or i8 %1779, 48
  store i8 %1780, i8* %1777, align 1
  %1781 = icmp ugt i32 %1774, 99
  br i1 %1781, label %1773, label %1782

1782:                                             ; preds = %1773, %1760
  %1783 = bitcast i8** %1739 to i64*
  %1784 = load i64, i64* %1783, align 8
  br label %1785

1785:                                             ; preds = %1782, %1767, %1771, %1769
  %1786 = phi i64 [ %1772, %1771 ], [ %1770, %1769 ], [ %1784, %1782 ], [ %1768, %1767 ]
  %1787 = ptrtoint i8* %1741 to i64
  %1788 = sub i64 %1787, %1786
  %1789 = trunc i64 %1788 to i32
  store i32 %1789, i32* %1740, align 8
  %1790 = inttoptr i64 %1786 to i8*
  %1791 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %1790, i32 %1789) #14
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1737) #14
  %1792 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %1791, %"class.WTF::StringImpl"** %1792, align 8
  br label %1816

1793:                                             ; preds = %1731
  %1794 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF12g_empty_atomE, align 8
  %1795 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1794, i64 0, i32 0, i32 0, i32 0
  %1796 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1795, align 8
  %1797 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %1796, %"class.WTF::StringImpl"** %1797, align 8
  %1798 = icmp eq %"class.WTF::StringImpl"* %1796, null
  br i1 %1798, label %1816, label %1799

1799:                                             ; preds = %1793
  %1800 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1796, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1801 = load atomic i32, i32* %1800 monotonic, align 4
  %1802 = and i32 %1801, 2
  %1803 = icmp eq i32 %1802, 0
  br i1 %1803, label %1804, label %1816

1804:                                             ; preds = %1799
  %1805 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1796, i64 0, i32 0
  %1806 = load i32, i32* %1805, align 4
  %1807 = zext i32 %1806 to i33
  %1808 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1807, i33 1) #14
  %1809 = extractvalue { i33, i1 } %1808, 1
  %1810 = extractvalue { i33, i1 } %1808, 0
  %1811 = icmp slt i33 %1810, 0
  %1812 = or i1 %1809, %1811
  br i1 %1812, label %1813, label %1814, !prof !5

1813:                                             ; preds = %1804
  call void @llvm.trap() #14
  unreachable

1814:                                             ; preds = %1804
  %1815 = trunc i33 %1810 to i32
  store i32 %1815, i32* %1805, align 4
  br label %1816

1816:                                             ; preds = %1708, %1714, %1729, %1735, %1785, %1793, %1799, %1814
  %1817 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %1818 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1817, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1702)
  %1819 = icmp eq %"class.WTF::StringImpl"* %1818, null
  br i1 %1819, label %1820, label %1825

1820:                                             ; preds = %1816
  %1821 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %60, i64 0, i32 1
  store i8* null, i8** %1821, align 8
  %1822 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %1823 = bitcast %"class.WTF::StringView"* %60 to i64*
  store i64 %1822, i64* %1823, align 8
  %1824 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %60, i64 0, i32 2
  store i32 0, i32* %1824, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %52, %"class.WTF::StringView"* nonnull dereferenceable(24) %60)
  br label %1845

1825:                                             ; preds = %1816
  %1826 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %60, i64 0, i32 0
  store %"class.WTF::StringImpl"* %1818, %"class.WTF::StringImpl"** %1826, align 8
  %1827 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1818, i64 0, i32 1
  %1828 = load i32, i32* %1827, align 4
  %1829 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1818, i64 1
  %1830 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %60, i64 0, i32 1
  %1831 = bitcast i8** %1830 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %1829, %"class.WTF::StringImpl"** %1831, align 8
  %1832 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %60, i64 0, i32 2
  store i32 %1828, i32* %1832, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %52, %"class.WTF::StringView"* nonnull dereferenceable(24) %60)
  %1833 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1818, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1834 = load atomic i32, i32* %1833 monotonic, align 4
  %1835 = and i32 %1834, 2
  %1836 = icmp eq i32 %1835, 0
  %1837 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1818, i64 0, i32 0
  %1838 = load i32, i32* %1837, align 4
  br i1 %1836, label %1839, label %1841

1839:                                             ; preds = %1825
  %1840 = add i32 %1838, -1
  store i32 %1840, i32* %1837, align 4
  br label %1841

1841:                                             ; preds = %1839, %1825
  %1842 = phi i32 [ %1840, %1839 ], [ %1838, %1825 ]
  %1843 = icmp eq i32 %1842, 0
  br i1 %1843, label %1844, label %1845

1844:                                             ; preds = %1841
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1818) #14
  br label %1845

1845:                                             ; preds = %1820, %1841, %1844
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1701) #14
  %1846 = bitcast %"class.WTF::StringBuilder"* %61 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %1846) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1846, i8 -86, i64 48, i1 false)
  %1847 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %61, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1847, align 8
  %1848 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %61, i64 0, i32 1
  %1849 = bitcast %union.anon.685* %1848 to i8*
  store i8 0, i8* %1849, align 8
  %1850 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %61, i64 0, i32 2
  store i32 0, i32* %1850, align 8
  %1851 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %61, i64 0, i32 3
  store i8 1, i8* %1851, align 4
  %1852 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %61, i64 0, i32 4
  store i8 0, i8* %1852, align 1
  %1853 = bitcast %"class.WTF::StringView"* %62 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1853) #14
  %1854 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %1855 = bitcast %"class.WTF::StringView"* %62 to i64*
  store i64 %1854, i64* %1855, align 8
  %1856 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %62, i64 0, i32 1
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.42, i64 0, i64 0), i8** %1856, align 8
  %1857 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %62, i64 0, i32 2
  store i32 1, i32* %1857, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %61, %"class.WTF::StringView"* nonnull dereferenceable(24) %62)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1853) #14
  %1858 = load i32, i32* %70, align 8
  %1859 = icmp eq i32 %1858, 0
  br i1 %1859, label %1866, label %1860

1860:                                             ; preds = %1845
  %1861 = bitcast %"class.WTF::StringView"* %63 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1861) #14
  %1862 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %1863 = bitcast %"class.WTF::StringView"* %63 to i64*
  store i64 %1862, i64* %1863, align 8
  %1864 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %63, i64 0, i32 1
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i64 0, i64 0), i8** %1864, align 8
  %1865 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %63, i64 0, i32 2
  store i32 1, i32* %1865, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %61, %"class.WTF::StringView"* nonnull dereferenceable(24) %63)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1861) #14
  call void @_ZN3WTF13StringBuilder6AppendERKS0_(%"class.WTF::StringBuilder"* nonnull %61, %"class.WTF::StringBuilder"* nonnull dereferenceable(48) %40)
  br label %1866

1866:                                             ; preds = %1860, %1845
  %1867 = load i32, i32* %1619, align 8
  %1868 = icmp eq i32 %1867, 0
  br i1 %1868, label %1875, label %1869

1869:                                             ; preds = %1866
  %1870 = bitcast %"class.WTF::StringView"* %64 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1870) #14
  %1871 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %1872 = bitcast %"class.WTF::StringView"* %64 to i64*
  store i64 %1871, i64* %1872, align 8
  %1873 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %64, i64 0, i32 1
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i64 0, i64 0), i8** %1873, align 8
  %1874 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %64, i64 0, i32 2
  store i32 1, i32* %1874, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %61, %"class.WTF::StringView"* nonnull dereferenceable(24) %64)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1870) #14
  call void @_ZN3WTF13StringBuilder6AppendERKS0_(%"class.WTF::StringBuilder"* nonnull %61, %"class.WTF::StringBuilder"* nonnull dereferenceable(48) %52)
  br label %1875

1875:                                             ; preds = %1869, %1866
  %1876 = bitcast %"class.WTF::StringView"* %65 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1876) #14
  %1877 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %1878 = bitcast %"class.WTF::StringView"* %65 to i64*
  store i64 %1877, i64* %1878, align 8
  %1879 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %65, i64 0, i32 1
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.43, i64 0, i64 0), i8** %1879, align 8
  %1880 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %65, i64 0, i32 2
  store i32 2, i32* %1880, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %61, %"class.WTF::StringView"* nonnull dereferenceable(24) %65)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1876) #14
  %1881 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %61) #14
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %61) #14
  %1882 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1847, align 8
  %1883 = icmp eq %"class.WTF::StringImpl"* %1882, null
  br i1 %1883, label %1897, label %1884

1884:                                             ; preds = %1875
  %1885 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1882, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1886 = load atomic i32, i32* %1885 monotonic, align 4
  %1887 = and i32 %1886, 2
  %1888 = icmp eq i32 %1887, 0
  %1889 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1882, i64 0, i32 0
  %1890 = load i32, i32* %1889, align 4
  br i1 %1888, label %1891, label %1893

1891:                                             ; preds = %1884
  %1892 = add i32 %1890, -1
  store i32 %1892, i32* %1889, align 4
  br label %1893

1893:                                             ; preds = %1891, %1884
  %1894 = phi i32 [ %1892, %1891 ], [ %1890, %1884 ]
  %1895 = icmp eq i32 %1894, 0
  br i1 %1895, label %1896, label %1897

1896:                                             ; preds = %1893
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1882) #14
  br label %1897

1897:                                             ; preds = %1875, %1893, %1896
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %1846) #14
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %52) #14
  %1898 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1616, align 8
  %1899 = icmp eq %"class.WTF::StringImpl"* %1898, null
  br i1 %1899, label %1913, label %1900

1900:                                             ; preds = %1897
  %1901 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1898, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1902 = load atomic i32, i32* %1901 monotonic, align 4
  %1903 = and i32 %1902, 2
  %1904 = icmp eq i32 %1903, 0
  %1905 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1898, i64 0, i32 0
  %1906 = load i32, i32* %1905, align 4
  br i1 %1904, label %1907, label %1909

1907:                                             ; preds = %1900
  %1908 = add i32 %1906, -1
  store i32 %1908, i32* %1905, align 4
  br label %1909

1909:                                             ; preds = %1907, %1900
  %1910 = phi i32 [ %1908, %1907 ], [ %1906, %1900 ]
  %1911 = icmp eq i32 %1910, 0
  br i1 %1911, label %1912, label %1913

1912:                                             ; preds = %1909
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1898) #14
  br label %1913

1913:                                             ; preds = %1897, %1909, %1912
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %1615) #14
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %40) #14
  %1914 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %67, align 8
  %1915 = icmp eq %"class.WTF::StringImpl"* %1914, null
  br i1 %1915, label %1929, label %1916

1916:                                             ; preds = %1913
  %1917 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1914, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1918 = load atomic i32, i32* %1917 monotonic, align 4
  %1919 = and i32 %1918, 2
  %1920 = icmp eq i32 %1919, 0
  %1921 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1914, i64 0, i32 0
  %1922 = load i32, i32* %1921, align 4
  br i1 %1920, label %1923, label %1925

1923:                                             ; preds = %1916
  %1924 = add i32 %1922, -1
  store i32 %1924, i32* %1921, align 4
  br label %1925

1925:                                             ; preds = %1923, %1916
  %1926 = phi i32 [ %1924, %1923 ], [ %1922, %1916 ]
  %1927 = icmp eq i32 %1926, 0
  br i1 %1927, label %1928, label %1929

1928:                                             ; preds = %1925
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1914) #14
  br label %1929

1929:                                             ; preds = %1913, %1925, %1928
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %66) #14
  ret %"class.WTF::StringImpl"* %1881
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %81, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 1
  %10 = bitcast %"class.WTF::StringImpl"* %9 to i8*
  %11 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, %10
  %14 = bitcast i8* %12 to i16*
  br i1 %13, label %15, label %20

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %4, %17
  %19 = select i1 %18, %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"* null
  br label %20

20:                                               ; preds = %6, %15
  %21 = phi %"class.WTF::StringImpl"* [ %19, %15 ], [ null, %6 ]
  %22 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %74

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %27 = load i8, i8* %26, align 1, !range !77
  %28 = icmp eq i8 %27, 0
  %29 = icmp ne %"class.WTF::StringImpl"* %21, null
  %30 = and i1 %29, %28
  br i1 %30, label %31, label %74

31:                                               ; preds = %25
  %32 = ptrtoint %"class.WTF::StringImpl"* %21 to i64
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 2
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %49

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = zext i32 %39 to i33
  %41 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %40, i33 1) #14
  %42 = extractvalue { i33, i1 } %41, 1
  %43 = extractvalue { i33, i1 } %41, 0
  %44 = icmp slt i33 %43, 0
  %45 = or i1 %42, %44
  br i1 %45, label %46, label %47, !prof !5

46:                                               ; preds = %37
  tail call void @llvm.trap() #14
  unreachable

47:                                               ; preds = %37
  %48 = trunc i33 %43 to i32
  store i32 %48, i32* %38, align 4
  br label %49

49:                                               ; preds = %31, %47
  %50 = bitcast %"class.WTF::StringBuilder"* %0 to i64*
  %51 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 0, i32 0, i32 0
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  store i64 %32, i64* %50, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %67, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  br i1 %58, label %61, label %63

61:                                               ; preds = %54
  %62 = add i32 %60, -1
  store i32 %62, i32* %59, align 4
  br label %63

63:                                               ; preds = %61, %54
  %64 = phi i32 [ %62, %61 ], [ %60, %54 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %52) #14
  br label %67

67:                                               ; preds = %66, %63, %49
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 1
  %69 = load i32, i32* %68, align 4
  store i32 %69, i32* %22, align 8
  %70 = load atomic i32, i32* %33 monotonic, align 4
  %71 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %72 = trunc i32 %70 to i8
  %73 = and i8 %72, 1
  store i8 %73, i8* %71, align 4
  br label %81

74:                                               ; preds = %20, %25
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = and i32 %76, 1
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %80, label %79

79:                                               ; preds = %74
  tail call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* %0, i8* %12, i32 %4) #14
  br label %81

80:                                               ; preds = %74
  tail call void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"* %0, i16* %14, i32 %4) #14
  br label %81

81:                                               ; preds = %67, %80, %79, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendERKS0_(%"class.WTF::StringBuilder"*, %"class.WTF::StringBuilder"* dereferenceable(48)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %94, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %68

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %12 = load i8, i8* %11, align 1, !range !77
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %68

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %1, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %17 = icmp eq %"class.WTF::StringImpl"* %16, null
  br i1 %17, label %68, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load atomic i32, i32* %19 monotonic, align 4
  %21 = and i32 %20, 2
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %35

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i33
  %27 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %26, i33 1) #14
  %28 = extractvalue { i33, i1 } %27, 1
  %29 = extractvalue { i33, i1 } %27, 0
  %30 = icmp slt i33 %29, 0
  %31 = or i1 %28, %30
  br i1 %31, label %32, label %33, !prof !5

32:                                               ; preds = %23
  tail call void @llvm.trap() #14
  unreachable

33:                                               ; preds = %23
  %34 = trunc i33 %29 to i32
  store i32 %34, i32* %24, align 4
  br label %35

35:                                               ; preds = %33, %18
  %36 = ptrtoint %"class.WTF::StringImpl"* %16 to i64
  %37 = bitcast %"class.WTF::StringBuilder"* %0 to i64*
  %38 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 0, i32 0, i32 0
  %39 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %38, align 8
  store i64 %36, i64* %37, align 8
  %40 = icmp eq %"class.WTF::StringImpl"* %39, null
  br i1 %40, label %54, label %41

41:                                               ; preds = %35
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load atomic i32, i32* %42 monotonic, align 4
  %44 = and i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %39, i64 0, i32 0
  %47 = load i32, i32* %46, align 4
  br i1 %45, label %48, label %50

48:                                               ; preds = %41
  %49 = add i32 %47, -1
  store i32 %49, i32* %46, align 4
  br label %50

50:                                               ; preds = %48, %41
  %51 = phi i32 [ %49, %48 ], [ %47, %41 ]
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %54

53:                                               ; preds = %50
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %39) #14
  br label %54

54:                                               ; preds = %35, %50, %53
  %55 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %56 = icmp eq %"class.WTF::StringImpl"* %55, null
  br i1 %56, label %60, label %57

57:                                               ; preds = %54
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %55, i64 0, i32 1
  %59 = load i32, i32* %58, align 4
  br label %60

60:                                               ; preds = %54, %57
  %61 = phi i32 [ %59, %57 ], [ 0, %54 ]
  store i32 %61, i32* %7, align 8
  %62 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %66 = trunc i32 %64 to i8
  %67 = and i8 %66, 1
  store i8 %67, i8* %65, align 4
  br label %94

68:                                               ; preds = %10, %6, %14
  %69 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %1, i64 0, i32 3
  %70 = load i8, i8* %69, align 4, !range !77
  %71 = icmp eq i8 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %1, i64 0, i32 0, i32 0, i32 0
  %73 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %72, align 8
  %74 = icmp eq %"class.WTF::StringImpl"* %73, null
  br i1 %71, label %84, label %75

75:                                               ; preds = %68
  br i1 %74, label %79, label %76

76:                                               ; preds = %75
  %77 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 1
  %78 = bitcast %"class.WTF::StringImpl"* %77 to i8*
  br label %82

79:                                               ; preds = %75
  %80 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %81 = load i8*, i8** %80, align 8
  br label %82

82:                                               ; preds = %76, %79
  %83 = phi i8* [ %81, %79 ], [ %78, %76 ]
  tail call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* %0, i8* %83, i32 %4) #14
  br label %94

84:                                               ; preds = %68
  br i1 %74, label %88, label %85

85:                                               ; preds = %84
  %86 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %73, i64 1
  %87 = bitcast %"class.WTF::StringImpl"* %86 to i16*
  br label %92

88:                                               ; preds = %84
  %89 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %1, i64 0, i32 1
  %90 = bitcast %union.anon.685* %89 to i16**
  %91 = load i16*, i16** %90, align 8
  br label %92

92:                                               ; preds = %85, %88
  %93 = phi i16* [ %91, %88 ], [ %87, %85 ]
  tail call void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"* %0, i16* %93, i32 %4) #14
  br label %94

94:                                               ; preds = %2, %60, %92, %82
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink22SiblingInvalidationSetC2E13scoped_refptrINS_25DescendantInvalidationSetEE(%"class.blink::SiblingInvalidationSet"* nocapture, %"class.blink::DescendantInvalidationSet"*) unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.blink::DescendantInvalidationSet"* %1 to i64
  %4 = getelementptr inbounds %"class.blink::SiblingInvalidationSet", %"class.blink::SiblingInvalidationSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %4, align 4
  %5 = getelementptr inbounds %"class.blink::SiblingInvalidationSet", %"class.blink::SiblingInvalidationSet"* %0, i64 0, i32 0, i32 2, i32 0
  %6 = getelementptr inbounds %"class.blink::SiblingInvalidationSet", %"class.blink::SiblingInvalidationSet"* %0, i64 0, i32 0, i32 6, i32 0
  %7 = bitcast %"class.WTF::StringImpl"** %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 32, i1 false) #14
  %8 = load i8, i8* %6, align 1
  %9 = and i8 %8, -64
  store i8 %9, i8* %6, align 1
  %10 = getelementptr inbounds %"class.blink::SiblingInvalidationSet", %"class.blink::SiblingInvalidationSet"* %0, i64 0, i32 0, i32 7, i32 0
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %"class.blink::SiblingInvalidationSet", %"class.blink::SiblingInvalidationSet"* %0, i64 0, i32 0, i32 8
  %12 = load i8, i8* %11, align 2
  %13 = and i8 %12, -16
  %14 = or i8 %13, 9
  store i8 %14, i8* %11, align 2
  %15 = getelementptr inbounds %"class.blink::SiblingInvalidationSet", %"class.blink::SiblingInvalidationSet"* %0, i64 0, i32 1
  store i32 1, i32* %15, align 4
  %16 = getelementptr inbounds %"class.blink::SiblingInvalidationSet", %"class.blink::SiblingInvalidationSet"* %0, i64 0, i32 2, i32 0
  store %"class.blink::DescendantInvalidationSet"* null, %"class.blink::DescendantInvalidationSet"** %16, align 8
  %17 = getelementptr inbounds %"class.blink::SiblingInvalidationSet", %"class.blink::SiblingInvalidationSet"* %0, i64 0, i32 3
  %18 = bitcast %class.scoped_refptr.4* %17 to i64*
  store i64 %3, i64* %18, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink22SiblingInvalidationSetC2Ev(%"class.blink::SiblingInvalidationSet"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SiblingInvalidationSet", %"class.blink::SiblingInvalidationSet"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %2, align 4
  %3 = getelementptr inbounds %"class.blink::SiblingInvalidationSet", %"class.blink::SiblingInvalidationSet"* %0, i64 0, i32 0, i32 2, i32 0
  %4 = getelementptr inbounds %"class.blink::SiblingInvalidationSet", %"class.blink::SiblingInvalidationSet"* %0, i64 0, i32 0, i32 6, i32 0
  %5 = bitcast %"class.WTF::StringImpl"** %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 32, i1 false) #14
  %6 = load i8, i8* %4, align 1
  %7 = and i8 %6, -64
  store i8 %7, i8* %4, align 1
  %8 = getelementptr inbounds %"class.blink::SiblingInvalidationSet", %"class.blink::SiblingInvalidationSet"* %0, i64 0, i32 0, i32 7, i32 0
  store i8 0, i8* %8, align 1
  %9 = getelementptr inbounds %"class.blink::SiblingInvalidationSet", %"class.blink::SiblingInvalidationSet"* %0, i64 0, i32 0, i32 8
  %10 = load i8, i8* %9, align 2
  %11 = and i8 %10, -16
  %12 = or i8 %11, 10
  store i8 %12, i8* %9, align 2
  %13 = getelementptr inbounds %"class.blink::SiblingInvalidationSet", %"class.blink::SiblingInvalidationSet"* %0, i64 0, i32 1
  store i32 -1, i32* %13, align 4
  %14 = getelementptr inbounds %"class.blink::SiblingInvalidationSet", %"class.blink::SiblingInvalidationSet"* %0, i64 0, i32 2, i32 0
  %15 = bitcast %"class.blink::DescendantInvalidationSet"** %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN5blinklsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEERKNS_15InvalidationSetE(%"class.std::__1::basic_ostream"* dereferenceable(160), %"class.blink::InvalidationSet"* dereferenceable(48)) local_unnamed_addr #0 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.WTF::String", align 8
  %5 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #14
  %6 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #14
  %7 = tail call %"class.WTF::StringImpl"* @_ZNK5blink15InvalidationSet8ToStringEv(%"class.blink::InvalidationSet"* %1)
  %8 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %7, %"class.WTF::StringImpl"** %8, align 8
  call void @_ZNK3WTF6String4Utf8ENS_18UTF8ConversionModeE(%"class.std::__1::basic_string"* nonnull sret %3, %"class.WTF::String"* nonnull %4, i32 0) #14
  %9 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = zext i8 %11 to i64
  %18 = select i1 %12, i8* %14, i8* %5
  %19 = select i1 %12, i64 %16, i64 %17
  %20 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* %18, i64 %19) #14
  %21 = load i8, i8* %10, align 1
  %22 = icmp slt i8 %21, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %2
  %24 = load i8*, i8** %13, align 8
  call void @_ZdlPv(i8* %24) #15
  br label %25

25:                                               ; preds = %2, %23
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %26, null
  br i1 %27, label %41, label %28

28:                                               ; preds = %25
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  br i1 %32, label %35, label %37

35:                                               ; preds = %28
  %36 = add i32 %34, -1
  store i32 %36, i32* %33, align 4
  br label %37

37:                                               ; preds = %35, %28
  %38 = phi i32 [ %36, %35 ], [ %34, %28 ]
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %37
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %26) #14
  br label %41

41:                                               ; preds = %25, %37, %40
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #14
  ret %"class.std::__1::basic_ostream"* %20
}

declare void @_ZNK3WTF6String4Utf8ENS_18UTF8ConversionModeE(%"class.std::__1::basic_string"* sret, %"class.WTF::String"*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZNK5blink17InvalidationFlagseqERKS0_(%"class.blink::InvalidationFlags"*, %"class.blink::InvalidationFlags"* dereferenceable(1)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE8ContainsERKNS0_12BackingFlagsERKN3WTF12AtomicStringE(%"union.blink::InvalidationSet::Backing.2"*, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.blink::InvalidationSet::BackingFlags", %"class.blink::InvalidationSet::BackingFlags"* %1, i64 0, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = and i8 %5, 4
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %66, label %8

8:                                                ; preds = %3
  %9 = bitcast %"union.blink::InvalidationSet::Backing.2"* %0 to %"class.WTF::HashSet"**
  %10 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %9, align 8
  %11 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %10, i64 0, i32 0, i32 0
  %12 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %11, align 8
  %13 = icmp eq %"class.WTF::AtomicString"* %12, null
  br i1 %13, label %63, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %10, i64 0, i32 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = add i32 %16, -1
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = lshr i32 %22, 8
  %24 = and i32 %23, %17
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %12, i64 %25
  %27 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %26, i64 0, i32 0, i32 0, i32 0
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %28, null
  br i1 %29, label %63, label %30

30:                                               ; preds = %14
  %31 = xor i32 %23, -1
  %32 = lshr i32 %22, 31
  %33 = add nsw i32 %32, %31
  %34 = shl i32 %33, 12
  %35 = xor i32 %34, %33
  %36 = lshr i32 %35, 7
  %37 = xor i32 %36, %35
  %38 = shl i32 %37, 2
  %39 = xor i32 %38, %37
  %40 = lshr i32 %39, 20
  %41 = xor i32 %40, %39
  %42 = or i32 %41, 1
  %43 = zext i32 %42 to i64
  br label %44

44:                                               ; preds = %54, %30
  %45 = phi %"class.WTF::StringImpl"* [ %28, %30 ], [ %61, %54 ]
  %46 = phi %"class.WTF::AtomicString"* [ %26, %30 ], [ %59, %54 ]
  %47 = phi i64 [ %25, %30 ], [ %58, %54 ]
  %48 = phi i64 [ 0, %30 ], [ %56, %54 ]
  %49 = bitcast %"class.WTF::AtomicString"* %46 to i8**
  %50 = load i8*, i8** %49, align 8
  %51 = icmp ne i8* %50, inttoptr (i64 -1 to i8*)
  %52 = icmp eq %"class.WTF::StringImpl"* %45, %20
  %53 = and i1 %52, %51
  br i1 %53, label %63, label %54

54:                                               ; preds = %44
  %55 = icmp eq i64 %48, 0
  %56 = select i1 %55, i64 %43, i64 %48
  %57 = add i64 %56, %47
  %58 = and i64 %57, %18
  %59 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %12, i64 %58
  %60 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %59, i64 0, i32 0, i32 0, i32 0
  %61 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %60, align 8
  %62 = icmp eq %"class.WTF::StringImpl"* %61, null
  br i1 %62, label %63, label %44

63:                                               ; preds = %44, %54, %8, %14
  %64 = phi %"class.WTF::AtomicString"* [ null, %8 ], [ null, %14 ], [ null, %54 ], [ %46, %44 ]
  %65 = icmp ne %"class.WTF::AtomicString"* %64, null
  br label %74

66:                                               ; preds = %3
  %67 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.2", %"union.blink::InvalidationSet::Backing.2"* %0, i64 0, i32 0
  %68 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %67, align 8
  %69 = icmp eq %"class.WTF::StringImpl"* %68, null
  br i1 %69, label %74, label %70

70:                                               ; preds = %66
  %71 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %72 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %71, align 8
  %73 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %72, %"class.WTF::StringImpl"* nonnull %68) #14
  br label %74

74:                                               ; preds = %66, %70, %63
  %75 = phi i1 [ %65, %63 ], [ %73, %70 ], [ false, %66 ]
  ret i1 %75
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE8ContainsERKNS0_12BackingFlagsERKN3WTF12AtomicStringE(%"union.blink::InvalidationSet::Backing.1"*, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.blink::InvalidationSet::BackingFlags", %"class.blink::InvalidationSet::BackingFlags"* %1, i64 0, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = and i8 %5, 2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %66, label %8

8:                                                ; preds = %3
  %9 = bitcast %"union.blink::InvalidationSet::Backing.1"* %0 to %"class.WTF::HashSet"**
  %10 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %9, align 8
  %11 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %10, i64 0, i32 0, i32 0
  %12 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %11, align 8
  %13 = icmp eq %"class.WTF::AtomicString"* %12, null
  br i1 %13, label %63, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %10, i64 0, i32 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = add i32 %16, -1
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = lshr i32 %22, 8
  %24 = and i32 %23, %17
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %12, i64 %25
  %27 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %26, i64 0, i32 0, i32 0, i32 0
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  %29 = icmp eq %"class.WTF::StringImpl"* %28, null
  br i1 %29, label %63, label %30

30:                                               ; preds = %14
  %31 = xor i32 %23, -1
  %32 = lshr i32 %22, 31
  %33 = add nsw i32 %32, %31
  %34 = shl i32 %33, 12
  %35 = xor i32 %34, %33
  %36 = lshr i32 %35, 7
  %37 = xor i32 %36, %35
  %38 = shl i32 %37, 2
  %39 = xor i32 %38, %37
  %40 = lshr i32 %39, 20
  %41 = xor i32 %40, %39
  %42 = or i32 %41, 1
  %43 = zext i32 %42 to i64
  br label %44

44:                                               ; preds = %54, %30
  %45 = phi %"class.WTF::StringImpl"* [ %28, %30 ], [ %61, %54 ]
  %46 = phi %"class.WTF::AtomicString"* [ %26, %30 ], [ %59, %54 ]
  %47 = phi i64 [ %25, %30 ], [ %58, %54 ]
  %48 = phi i64 [ 0, %30 ], [ %56, %54 ]
  %49 = bitcast %"class.WTF::AtomicString"* %46 to i8**
  %50 = load i8*, i8** %49, align 8
  %51 = icmp ne i8* %50, inttoptr (i64 -1 to i8*)
  %52 = icmp eq %"class.WTF::StringImpl"* %45, %20
  %53 = and i1 %52, %51
  br i1 %53, label %63, label %54

54:                                               ; preds = %44
  %55 = icmp eq i64 %48, 0
  %56 = select i1 %55, i64 %43, i64 %48
  %57 = add i64 %56, %47
  %58 = and i64 %57, %18
  %59 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %12, i64 %58
  %60 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %59, i64 0, i32 0, i32 0, i32 0
  %61 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %60, align 8
  %62 = icmp eq %"class.WTF::StringImpl"* %61, null
  br i1 %62, label %63, label %44

63:                                               ; preds = %44, %54, %8, %14
  %64 = phi %"class.WTF::AtomicString"* [ null, %8 ], [ null, %14 ], [ null, %54 ], [ %46, %44 ]
  %65 = icmp ne %"class.WTF::AtomicString"* %64, null
  br label %74

66:                                               ; preds = %3
  %67 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.1", %"union.blink::InvalidationSet::Backing.1"* %0, i64 0, i32 0
  %68 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %67, align 8
  %69 = icmp eq %"class.WTF::StringImpl"* %68, null
  br i1 %69, label %74, label %70

70:                                               ; preds = %66
  %71 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %72 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %71, align 8
  %73 = tail call zeroext i1 @_ZN3WTF5EqualEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %72, %"class.WTF::StringImpl"* nonnull %68) #14
  br label %74

74:                                               ; preds = %66, %70, %63
  %75 = phi i1 [ %65, %63 ], [ %73, %70 ], [ false, %66 ]
  ret i1 %75
}

declare void @_ZNK5blink7Element24SynchronizeAllAttributesEv(%"class.blink::Element"*) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEi(i32) local_unnamed_addr #2

declare i8* @_ZN7logging14StreamValToStrEPKvPFvRNSt3__113basic_ostreamIcNS2_11char_traitsIcEEEES1_E(i8*, void (%"class.std::__1::basic_ostream"*, i8*)*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZZN7logging15CheckOpValueStrIPKN5blink15InvalidationSetEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS5_14remove_pointerIS7_E4typeEEE5valueEPcE4typeES9_ENUlRNS5_13basic_ostreamIcNS5_11char_traitsIcEEEEPKvE_8__invokeESK_SM_(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*) #7 comdat align 2 {
  %3 = bitcast i8* %1 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPKv(%"class.std::__1::basic_ostream"* %0, i8* %4) #14
  ret void
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPKv(%"class.std::__1::basic_ostream"*, i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZZN7logging15CheckOpValueStrIPN5blink15InvalidationSetEEENSt3__19enable_ifIXaasr4base8internal23SupportsOstreamOperatorIRKT_EE5valuentsr3std11is_functionINS4_14remove_pointerIS6_E4typeEEE5valueEPcE4typeES8_ENUlRNS4_13basic_ostreamIcNS4_11char_traitsIcEEEEPKvE_8__invokeESJ_SL_(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*) #7 comdat align 2 {
  %3 = bitcast i8* %1 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPKv(%"class.std::__1::basic_ostream"* %0, i8* %4) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5ItemsERKNS0_12BackingFlagsE(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* noalias sret, %"union.blink::InvalidationSet::Backing"*, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", align 8
  %5 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", align 8
  %6 = getelementptr inbounds %"class.blink::InvalidationSet::BackingFlags", %"class.blink::InvalidationSet::BackingFlags"* %2, i64 0, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = and i8 %7, 1
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %31, label %10

10:                                               ; preds = %3
  %11 = bitcast %"union.blink::InvalidationSet::Backing"* %1 to %"class.WTF::HashSet"**
  %12 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %11, align 8
  %13 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %12, i64 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %12, i64 0, i32 0, i32 0
  %17 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %12, i64 0, i32 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %17, i64 %20
  br i1 %15, label %58, label %22

22:                                               ; preds = %10
  %23 = icmp eq i32 %19, 0
  br i1 %23, label %58, label %24

24:                                               ; preds = %22, %28
  %25 = phi %"class.WTF::AtomicString"* [ %29, %28 ], [ %17, %22 ]
  %26 = bitcast %"class.WTF::AtomicString"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  switch i64 %27, label %58 [
    i64 -1, label %28
    i64 0, label %28
  ]

28:                                               ; preds = %24, %24
  %29 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %25, i64 1
  %30 = icmp eq %"class.WTF::AtomicString"* %29, %21
  br i1 %30, label %58, label %24

31:                                               ; preds = %3
  %32 = getelementptr inbounds %"union.blink::InvalidationSet::Backing", %"union.blink::InvalidationSet::Backing"* %1, i64 0, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, null
  br i1 %34, label %58, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 acquire, align 4
  %38 = and i32 %37, 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %56, label %40

40:                                               ; preds = %35
  %41 = load atomic i32, i32* %36 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %58

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = zext i32 %46 to i33
  %48 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %47, i33 1) #14
  %49 = extractvalue { i33, i1 } %48, 1
  %50 = extractvalue { i33, i1 } %48, 0
  %51 = icmp slt i33 %50, 0
  %52 = or i1 %49, %51
  br i1 %52, label %53, label %54, !prof !5

53:                                               ; preds = %44
  tail call void @llvm.trap() #14
  unreachable

54:                                               ; preds = %44
  %55 = trunc i33 %50 to i32
  store i32 %55, i32* %45, align 4
  br label %58

56:                                               ; preds = %35
  %57 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %33) #14
  br label %58

58:                                               ; preds = %28, %24, %56, %54, %40, %31, %22, %10
  %59 = phi %"class.WTF::StringImpl"* [ null, %10 ], [ null, %22 ], [ %57, %56 ], [ %33, %40 ], [ %33, %54 ], [ null, %31 ], [ null, %24 ], [ null, %28 ]
  %60 = phi %"class.WTF::AtomicString"* [ %21, %10 ], [ %17, %22 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %56 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %40 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %54 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %31 ], [ %21, %28 ], [ %25, %24 ]
  %61 = phi i32 [ 1, %10 ], [ 1, %22 ], [ 0, %56 ], [ 0, %40 ], [ 0, %54 ], [ 0, %31 ], [ 1, %24 ], [ 1, %28 ]
  %62 = phi %"class.WTF::AtomicString"* [ %21, %10 ], [ %21, %22 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %56 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %40 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %54 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %31 ], [ %21, %24 ], [ %21, %28 ]
  %63 = load i8, i8* %6, align 1
  %64 = and i8 %63, 1
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %75, label %66

66:                                               ; preds = %58
  %67 = bitcast %"union.blink::InvalidationSet::Backing"* %1 to %"class.WTF::HashSet"**
  %68 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %67, align 8
  %69 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %68, i64 0, i32 0, i32 0
  %70 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %69, align 8
  %71 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %68, i64 0, i32 0, i32 1
  %72 = load i32, i32* %71, align 8
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %70, i64 %73
  br label %103

75:                                               ; preds = %58
  %76 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %77 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %76, i64 0, i32 0, i32 0, i32 0
  %78 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %77, align 8
  %79 = icmp eq %"class.WTF::StringImpl"* %78, null
  br i1 %79, label %103, label %80

80:                                               ; preds = %75
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load atomic i32, i32* %81 acquire, align 4
  %83 = and i32 %82, 4
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %101, label %85

85:                                               ; preds = %80
  %86 = load atomic i32, i32* %81 monotonic, align 4
  %87 = and i32 %86, 2
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %103

89:                                               ; preds = %85
  %90 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %91 = load i32, i32* %90, align 4
  %92 = zext i32 %91 to i33
  %93 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %92, i33 1) #14
  %94 = extractvalue { i33, i1 } %93, 1
  %95 = extractvalue { i33, i1 } %93, 0
  %96 = icmp slt i33 %95, 0
  %97 = or i1 %94, %96
  br i1 %97, label %98, label %99, !prof !5

98:                                               ; preds = %89
  tail call void @llvm.trap() #14
  unreachable

99:                                               ; preds = %89
  %100 = trunc i33 %95 to i32
  store i32 %100, i32* %90, align 4
  br label %103

101:                                              ; preds = %80
  %102 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %78) #14
  br label %103

103:                                              ; preds = %101, %99, %85, %75, %66
  %104 = phi %"class.WTF::AtomicString"* [ %74, %66 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %75 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %85 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %99 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %101 ]
  %105 = phi %"class.WTF::StringImpl"* [ null, %66 ], [ null, %75 ], [ %78, %85 ], [ %78, %99 ], [ %102, %101 ]
  %106 = phi i32 [ 1, %66 ], [ 0, %75 ], [ 0, %85 ], [ 0, %99 ], [ 0, %101 ]
  %107 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %4, i64 0, i32 0
  store i32 %61, i32* %107, align 8
  %108 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %4, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %59, %"class.WTF::StringImpl"** %108, align 8
  %109 = icmp eq %"class.WTF::StringImpl"* %59, null
  br i1 %109, label %127, label %110

110:                                              ; preds = %103
  %111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %112 = load atomic i32, i32* %111 monotonic, align 4
  %113 = and i32 %112, 2
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %127

115:                                              ; preds = %110
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %117 = load i32, i32* %116, align 4
  %118 = zext i32 %117 to i33
  %119 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %118, i33 1) #14
  %120 = extractvalue { i33, i1 } %119, 1
  %121 = extractvalue { i33, i1 } %119, 0
  %122 = icmp slt i33 %121, 0
  %123 = or i1 %120, %122
  br i1 %123, label %124, label %125, !prof !5

124:                                              ; preds = %115
  tail call void @llvm.trap() #14
  unreachable

125:                                              ; preds = %115
  %126 = trunc i33 %121 to i32
  store i32 %126, i32* %116, align 4
  br label %127

127:                                              ; preds = %103, %110, %125
  %128 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %4, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::AtomicString"* %60, %"class.WTF::AtomicString"** %128, align 8
  %129 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %4, i64 0, i32 2, i32 0, i32 1
  store %"class.WTF::AtomicString"* %62, %"class.WTF::AtomicString"** %129, align 8
  %130 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %5, i64 0, i32 0
  store i32 %106, i32* %130, align 8
  %131 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %5, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %105, %"class.WTF::StringImpl"** %131, align 8
  %132 = icmp eq %"class.WTF::StringImpl"* %105, null
  br i1 %132, label %164, label %133

133:                                              ; preds = %127
  %134 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = load atomic i32, i32* %134 monotonic, align 4
  %136 = and i32 %135, 2
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %150

138:                                              ; preds = %133
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 0
  %140 = load i32, i32* %139, align 4
  %141 = zext i32 %140 to i33
  %142 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %141, i33 1) #14
  %143 = extractvalue { i33, i1 } %142, 1
  %144 = extractvalue { i33, i1 } %142, 0
  %145 = icmp slt i33 %144, 0
  %146 = or i1 %143, %145
  br i1 %146, label %147, label %148, !prof !5

147:                                              ; preds = %138
  tail call void @llvm.trap() #14
  unreachable

148:                                              ; preds = %138
  %149 = trunc i33 %144 to i32
  store i32 %149, i32* %139, align 4
  br label %150

150:                                              ; preds = %148, %133
  %151 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %5, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::AtomicString"* %104, %"class.WTF::AtomicString"** %151, align 8
  %152 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %5, i64 0, i32 2, i32 0, i32 1
  store %"class.WTF::AtomicString"* %104, %"class.WTF::AtomicString"** %152, align 8
  tail call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5RangeC2ENS3_8IteratorES5_(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %0, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* nonnull byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator") align 8 %4, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* nonnull byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator") align 8 %5)
  %153 = load atomic i32, i32* %134 monotonic, align 4
  %154 = and i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 0
  %157 = load i32, i32* %156, align 4
  br i1 %155, label %158, label %160

158:                                              ; preds = %150
  %159 = add i32 %157, -1
  store i32 %159, i32* %156, align 4
  br label %160

160:                                              ; preds = %158, %150
  %161 = phi i32 [ %159, %158 ], [ %157, %150 ]
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %167

163:                                              ; preds = %160
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %105) #14
  br label %167

164:                                              ; preds = %127
  %165 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %5, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::AtomicString"* %104, %"class.WTF::AtomicString"** %165, align 8
  %166 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %5, i64 0, i32 2, i32 0, i32 1
  store %"class.WTF::AtomicString"* %104, %"class.WTF::AtomicString"** %166, align 8
  tail call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5RangeC2ENS3_8IteratorES5_(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %0, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* nonnull byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator") align 8 %4, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* nonnull byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator") align 8 %5)
  br label %167

167:                                              ; preds = %164, %160, %163
  br i1 %109, label %181, label %168

168:                                              ; preds = %167
  %169 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %170 = load atomic i32, i32* %169 monotonic, align 4
  %171 = and i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %174 = load i32, i32* %173, align 4
  br i1 %172, label %175, label %177

175:                                              ; preds = %168
  %176 = add i32 %174, -1
  store i32 %176, i32* %173, align 4
  br label %177

177:                                              ; preds = %175, %168
  %178 = phi i32 [ %176, %175 ], [ %174, %168 ]
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %180, label %181

180:                                              ; preds = %177
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %59) #14
  br label %181

181:                                              ; preds = %167, %177, %180
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5RangeC2ENS3_8IteratorES5_(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"*, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator") align 8, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator") align 8) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %0, i64 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  store i32 %6, i32* %4, align 8
  %7 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"** %9, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %10, label %28, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %28

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i33
  %20 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %19, i33 1) #14
  %21 = extractvalue { i33, i1 } %20, 1
  %22 = extractvalue { i33, i1 } %20, 0
  %23 = icmp slt i33 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %26, !prof !5

25:                                               ; preds = %16
  tail call void @llvm.trap() #14
  unreachable

26:                                               ; preds = %16
  %27 = trunc i33 %22 to i32
  store i32 %27, i32* %17, align 4
  br label %28

28:                                               ; preds = %3, %11, %26
  %29 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %0, i64 0, i32 0, i32 2
  %30 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %1, i64 0, i32 2
  %31 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %29 to i8*
  %32 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 16, i1 false) #14
  %33 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %0, i64 0, i32 1, i32 0
  %34 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %2, i64 0, i32 0
  %35 = load i32, i32* %34, align 8
  store i32 %35, i32* %33, align 8
  %36 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %2, i64 0, i32 1, i32 0, i32 0, i32 0
  %37 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %36, align 8
  %38 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %0, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %37, %"class.WTF::StringImpl"** %38, align 8
  %39 = icmp eq %"class.WTF::StringImpl"* %37, null
  br i1 %39, label %57, label %40

40:                                               ; preds = %28
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load atomic i32, i32* %41 monotonic, align 4
  %43 = and i32 %42, 2
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %62

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = zext i32 %47 to i33
  %49 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %48, i33 1) #14
  %50 = extractvalue { i33, i1 } %49, 1
  %51 = extractvalue { i33, i1 } %49, 0
  %52 = icmp slt i33 %51, 0
  %53 = or i1 %50, %52
  br i1 %53, label %54, label %55, !prof !5

54:                                               ; preds = %45
  tail call void @llvm.trap() #14
  unreachable

55:                                               ; preds = %45
  %56 = trunc i33 %51 to i32
  store i32 %56, i32* %46, align 4
  br label %62

57:                                               ; preds = %28
  %58 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %0, i64 0, i32 1, i32 2
  %59 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %2, i64 0, i32 2
  %60 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %58 to i8*
  %61 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 16, i1 false) #14
  br label %78

62:                                               ; preds = %40, %55
  %63 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %0, i64 0, i32 1, i32 2
  %64 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %2, i64 0, i32 2
  %65 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %63 to i8*
  %66 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %64 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 16, i1 false) #14
  %67 = load atomic i32, i32* %41 monotonic, align 4
  %68 = and i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 0
  %71 = load i32, i32* %70, align 4
  br i1 %69, label %72, label %74

72:                                               ; preds = %62
  %73 = add i32 %71, -1
  store i32 %73, i32* %70, align 4
  br label %74

74:                                               ; preds = %72, %62
  %75 = phi i32 [ %73, %72 ], [ %71, %62 ]
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %78

77:                                               ; preds = %74
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %37) #14
  br label %78

78:                                               ; preds = %57, %74, %77
  br i1 %10, label %92, label %79

79:                                               ; preds = %78
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load atomic i32, i32* %80 monotonic, align 4
  %82 = and i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %85 = load i32, i32* %84, align 4
  br i1 %83, label %86, label %88

86:                                               ; preds = %79
  %87 = add i32 %85, -1
  store i32 %87, i32* %84, align 4
  br label %88

88:                                               ; preds = %86, %79
  %89 = phi i32 [ %87, %86 ], [ %85, %79 ]
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %92

91:                                               ; preds = %88
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #14
  br label %92

92:                                               ; preds = %78, %88, %91
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #8

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5ItemsERKNS0_12BackingFlagsE(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* noalias sret, %"union.blink::InvalidationSet::Backing.1"*, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", align 8
  %5 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", align 8
  %6 = getelementptr inbounds %"class.blink::InvalidationSet::BackingFlags", %"class.blink::InvalidationSet::BackingFlags"* %2, i64 0, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = and i8 %7, 2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %31, label %10

10:                                               ; preds = %3
  %11 = bitcast %"union.blink::InvalidationSet::Backing.1"* %1 to %"class.WTF::HashSet"**
  %12 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %11, align 8
  %13 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %12, i64 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %12, i64 0, i32 0, i32 0
  %17 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %12, i64 0, i32 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %17, i64 %20
  br i1 %15, label %58, label %22

22:                                               ; preds = %10
  %23 = icmp eq i32 %19, 0
  br i1 %23, label %58, label %24

24:                                               ; preds = %22, %28
  %25 = phi %"class.WTF::AtomicString"* [ %29, %28 ], [ %17, %22 ]
  %26 = bitcast %"class.WTF::AtomicString"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  switch i64 %27, label %58 [
    i64 -1, label %28
    i64 0, label %28
  ]

28:                                               ; preds = %24, %24
  %29 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %25, i64 1
  %30 = icmp eq %"class.WTF::AtomicString"* %29, %21
  br i1 %30, label %58, label %24

31:                                               ; preds = %3
  %32 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.1", %"union.blink::InvalidationSet::Backing.1"* %1, i64 0, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, null
  br i1 %34, label %58, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 acquire, align 4
  %38 = and i32 %37, 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %56, label %40

40:                                               ; preds = %35
  %41 = load atomic i32, i32* %36 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %58

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = zext i32 %46 to i33
  %48 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %47, i33 1) #14
  %49 = extractvalue { i33, i1 } %48, 1
  %50 = extractvalue { i33, i1 } %48, 0
  %51 = icmp slt i33 %50, 0
  %52 = or i1 %49, %51
  br i1 %52, label %53, label %54, !prof !5

53:                                               ; preds = %44
  tail call void @llvm.trap() #14
  unreachable

54:                                               ; preds = %44
  %55 = trunc i33 %50 to i32
  store i32 %55, i32* %45, align 4
  br label %58

56:                                               ; preds = %35
  %57 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %33) #14
  br label %58

58:                                               ; preds = %28, %24, %56, %54, %40, %31, %22, %10
  %59 = phi %"class.WTF::StringImpl"* [ null, %10 ], [ null, %22 ], [ %57, %56 ], [ %33, %40 ], [ %33, %54 ], [ null, %31 ], [ null, %24 ], [ null, %28 ]
  %60 = phi %"class.WTF::AtomicString"* [ %21, %10 ], [ %17, %22 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %56 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %40 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %54 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %31 ], [ %21, %28 ], [ %25, %24 ]
  %61 = phi i32 [ 1, %10 ], [ 1, %22 ], [ 0, %56 ], [ 0, %40 ], [ 0, %54 ], [ 0, %31 ], [ 1, %24 ], [ 1, %28 ]
  %62 = phi %"class.WTF::AtomicString"* [ %21, %10 ], [ %21, %22 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %56 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %40 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %54 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %31 ], [ %21, %24 ], [ %21, %28 ]
  %63 = load i8, i8* %6, align 1
  %64 = and i8 %63, 2
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %75, label %66

66:                                               ; preds = %58
  %67 = bitcast %"union.blink::InvalidationSet::Backing.1"* %1 to %"class.WTF::HashSet"**
  %68 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %67, align 8
  %69 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %68, i64 0, i32 0, i32 0
  %70 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %69, align 8
  %71 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %68, i64 0, i32 0, i32 1
  %72 = load i32, i32* %71, align 8
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %70, i64 %73
  br label %103

75:                                               ; preds = %58
  %76 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %77 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %76, i64 0, i32 0, i32 0, i32 0
  %78 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %77, align 8
  %79 = icmp eq %"class.WTF::StringImpl"* %78, null
  br i1 %79, label %103, label %80

80:                                               ; preds = %75
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load atomic i32, i32* %81 acquire, align 4
  %83 = and i32 %82, 4
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %101, label %85

85:                                               ; preds = %80
  %86 = load atomic i32, i32* %81 monotonic, align 4
  %87 = and i32 %86, 2
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %103

89:                                               ; preds = %85
  %90 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %91 = load i32, i32* %90, align 4
  %92 = zext i32 %91 to i33
  %93 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %92, i33 1) #14
  %94 = extractvalue { i33, i1 } %93, 1
  %95 = extractvalue { i33, i1 } %93, 0
  %96 = icmp slt i33 %95, 0
  %97 = or i1 %94, %96
  br i1 %97, label %98, label %99, !prof !5

98:                                               ; preds = %89
  tail call void @llvm.trap() #14
  unreachable

99:                                               ; preds = %89
  %100 = trunc i33 %95 to i32
  store i32 %100, i32* %90, align 4
  br label %103

101:                                              ; preds = %80
  %102 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %78) #14
  br label %103

103:                                              ; preds = %101, %99, %85, %75, %66
  %104 = phi %"class.WTF::AtomicString"* [ %74, %66 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %75 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %85 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %99 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %101 ]
  %105 = phi %"class.WTF::StringImpl"* [ null, %66 ], [ null, %75 ], [ %78, %85 ], [ %78, %99 ], [ %102, %101 ]
  %106 = phi i32 [ 1, %66 ], [ 0, %75 ], [ 0, %85 ], [ 0, %99 ], [ 0, %101 ]
  %107 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %4, i64 0, i32 0
  store i32 %61, i32* %107, align 8
  %108 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %4, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %59, %"class.WTF::StringImpl"** %108, align 8
  %109 = icmp eq %"class.WTF::StringImpl"* %59, null
  br i1 %109, label %127, label %110

110:                                              ; preds = %103
  %111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %112 = load atomic i32, i32* %111 monotonic, align 4
  %113 = and i32 %112, 2
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %127

115:                                              ; preds = %110
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %117 = load i32, i32* %116, align 4
  %118 = zext i32 %117 to i33
  %119 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %118, i33 1) #14
  %120 = extractvalue { i33, i1 } %119, 1
  %121 = extractvalue { i33, i1 } %119, 0
  %122 = icmp slt i33 %121, 0
  %123 = or i1 %120, %122
  br i1 %123, label %124, label %125, !prof !5

124:                                              ; preds = %115
  tail call void @llvm.trap() #14
  unreachable

125:                                              ; preds = %115
  %126 = trunc i33 %121 to i32
  store i32 %126, i32* %116, align 4
  br label %127

127:                                              ; preds = %103, %110, %125
  %128 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %4, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::AtomicString"* %60, %"class.WTF::AtomicString"** %128, align 8
  %129 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %4, i64 0, i32 2, i32 0, i32 1
  store %"class.WTF::AtomicString"* %62, %"class.WTF::AtomicString"** %129, align 8
  %130 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %5, i64 0, i32 0
  store i32 %106, i32* %130, align 8
  %131 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %5, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %105, %"class.WTF::StringImpl"** %131, align 8
  %132 = icmp eq %"class.WTF::StringImpl"* %105, null
  br i1 %132, label %164, label %133

133:                                              ; preds = %127
  %134 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = load atomic i32, i32* %134 monotonic, align 4
  %136 = and i32 %135, 2
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %150

138:                                              ; preds = %133
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 0
  %140 = load i32, i32* %139, align 4
  %141 = zext i32 %140 to i33
  %142 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %141, i33 1) #14
  %143 = extractvalue { i33, i1 } %142, 1
  %144 = extractvalue { i33, i1 } %142, 0
  %145 = icmp slt i33 %144, 0
  %146 = or i1 %143, %145
  br i1 %146, label %147, label %148, !prof !5

147:                                              ; preds = %138
  tail call void @llvm.trap() #14
  unreachable

148:                                              ; preds = %138
  %149 = trunc i33 %144 to i32
  store i32 %149, i32* %139, align 4
  br label %150

150:                                              ; preds = %148, %133
  %151 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %5, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::AtomicString"* %104, %"class.WTF::AtomicString"** %151, align 8
  %152 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %5, i64 0, i32 2, i32 0, i32 1
  store %"class.WTF::AtomicString"* %104, %"class.WTF::AtomicString"** %152, align 8
  tail call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5RangeC2ENS3_8IteratorES5_(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %0, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* nonnull byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator") align 8 %4, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* nonnull byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator") align 8 %5)
  %153 = load atomic i32, i32* %134 monotonic, align 4
  %154 = and i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 0
  %157 = load i32, i32* %156, align 4
  br i1 %155, label %158, label %160

158:                                              ; preds = %150
  %159 = add i32 %157, -1
  store i32 %159, i32* %156, align 4
  br label %160

160:                                              ; preds = %158, %150
  %161 = phi i32 [ %159, %158 ], [ %157, %150 ]
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %167

163:                                              ; preds = %160
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %105) #14
  br label %167

164:                                              ; preds = %127
  %165 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %5, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::AtomicString"* %104, %"class.WTF::AtomicString"** %165, align 8
  %166 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %5, i64 0, i32 2, i32 0, i32 1
  store %"class.WTF::AtomicString"* %104, %"class.WTF::AtomicString"** %166, align 8
  tail call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5RangeC2ENS3_8IteratorES5_(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %0, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* nonnull byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator") align 8 %4, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* nonnull byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator") align 8 %5)
  br label %167

167:                                              ; preds = %164, %160, %163
  br i1 %109, label %181, label %168

168:                                              ; preds = %167
  %169 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %170 = load atomic i32, i32* %169 monotonic, align 4
  %171 = and i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %174 = load i32, i32* %173, align 4
  br i1 %172, label %175, label %177

175:                                              ; preds = %168
  %176 = add i32 %174, -1
  store i32 %176, i32* %173, align 4
  br label %177

177:                                              ; preds = %175, %168
  %178 = phi i32 [ %176, %175 ], [ %174, %168 ]
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %180, label %181

180:                                              ; preds = %177
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %59) #14
  br label %181

181:                                              ; preds = %167, %177, %180
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5RangeC2ENS3_8IteratorES5_(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"*, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator") align 8, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator") align 8) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %0, i64 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  store i32 %6, i32* %4, align 8
  %7 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"** %9, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %10, label %28, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %28

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i33
  %20 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %19, i33 1) #14
  %21 = extractvalue { i33, i1 } %20, 1
  %22 = extractvalue { i33, i1 } %20, 0
  %23 = icmp slt i33 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %26, !prof !5

25:                                               ; preds = %16
  tail call void @llvm.trap() #14
  unreachable

26:                                               ; preds = %16
  %27 = trunc i33 %22 to i32
  store i32 %27, i32* %17, align 4
  br label %28

28:                                               ; preds = %3, %11, %26
  %29 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %0, i64 0, i32 0, i32 2
  %30 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %1, i64 0, i32 2
  %31 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %29 to i8*
  %32 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 16, i1 false) #14
  %33 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %0, i64 0, i32 1, i32 0
  %34 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %2, i64 0, i32 0
  %35 = load i32, i32* %34, align 8
  store i32 %35, i32* %33, align 8
  %36 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %2, i64 0, i32 1, i32 0, i32 0, i32 0
  %37 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %36, align 8
  %38 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %0, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %37, %"class.WTF::StringImpl"** %38, align 8
  %39 = icmp eq %"class.WTF::StringImpl"* %37, null
  br i1 %39, label %57, label %40

40:                                               ; preds = %28
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load atomic i32, i32* %41 monotonic, align 4
  %43 = and i32 %42, 2
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %62

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = zext i32 %47 to i33
  %49 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %48, i33 1) #14
  %50 = extractvalue { i33, i1 } %49, 1
  %51 = extractvalue { i33, i1 } %49, 0
  %52 = icmp slt i33 %51, 0
  %53 = or i1 %50, %52
  br i1 %53, label %54, label %55, !prof !5

54:                                               ; preds = %45
  tail call void @llvm.trap() #14
  unreachable

55:                                               ; preds = %45
  %56 = trunc i33 %51 to i32
  store i32 %56, i32* %46, align 4
  br label %62

57:                                               ; preds = %28
  %58 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %0, i64 0, i32 1, i32 2
  %59 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %2, i64 0, i32 2
  %60 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %58 to i8*
  %61 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 16, i1 false) #14
  br label %78

62:                                               ; preds = %40, %55
  %63 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %0, i64 0, i32 1, i32 2
  %64 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %2, i64 0, i32 2
  %65 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %63 to i8*
  %66 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %64 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 16, i1 false) #14
  %67 = load atomic i32, i32* %41 monotonic, align 4
  %68 = and i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 0
  %71 = load i32, i32* %70, align 4
  br i1 %69, label %72, label %74

72:                                               ; preds = %62
  %73 = add i32 %71, -1
  store i32 %73, i32* %70, align 4
  br label %74

74:                                               ; preds = %72, %62
  %75 = phi i32 [ %73, %72 ], [ %71, %62 ]
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %78

77:                                               ; preds = %74
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %37) #14
  br label %78

78:                                               ; preds = %57, %74, %77
  br i1 %10, label %92, label %79

79:                                               ; preds = %78
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load atomic i32, i32* %80 monotonic, align 4
  %82 = and i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %85 = load i32, i32* %84, align 4
  br i1 %83, label %86, label %88

86:                                               ; preds = %79
  %87 = add i32 %85, -1
  store i32 %87, i32* %84, align 4
  br label %88

88:                                               ; preds = %86, %79
  %89 = phi i32 [ %87, %86 ], [ %85, %79 ]
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %92

91:                                               ; preds = %88
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #14
  br label %92

92:                                               ; preds = %78, %88, %91
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5ItemsERKNS0_12BackingFlagsE(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* noalias sret, %"union.blink::InvalidationSet::Backing.2"*, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", align 8
  %5 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", align 8
  %6 = getelementptr inbounds %"class.blink::InvalidationSet::BackingFlags", %"class.blink::InvalidationSet::BackingFlags"* %2, i64 0, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = and i8 %7, 4
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %31, label %10

10:                                               ; preds = %3
  %11 = bitcast %"union.blink::InvalidationSet::Backing.2"* %1 to %"class.WTF::HashSet"**
  %12 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %11, align 8
  %13 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %12, i64 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %12, i64 0, i32 0, i32 0
  %17 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %12, i64 0, i32 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %17, i64 %20
  br i1 %15, label %58, label %22

22:                                               ; preds = %10
  %23 = icmp eq i32 %19, 0
  br i1 %23, label %58, label %24

24:                                               ; preds = %22, %28
  %25 = phi %"class.WTF::AtomicString"* [ %29, %28 ], [ %17, %22 ]
  %26 = bitcast %"class.WTF::AtomicString"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  switch i64 %27, label %58 [
    i64 -1, label %28
    i64 0, label %28
  ]

28:                                               ; preds = %24, %24
  %29 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %25, i64 1
  %30 = icmp eq %"class.WTF::AtomicString"* %29, %21
  br i1 %30, label %58, label %24

31:                                               ; preds = %3
  %32 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.2", %"union.blink::InvalidationSet::Backing.2"* %1, i64 0, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, null
  br i1 %34, label %58, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 acquire, align 4
  %38 = and i32 %37, 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %56, label %40

40:                                               ; preds = %35
  %41 = load atomic i32, i32* %36 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %58

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = zext i32 %46 to i33
  %48 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %47, i33 1) #14
  %49 = extractvalue { i33, i1 } %48, 1
  %50 = extractvalue { i33, i1 } %48, 0
  %51 = icmp slt i33 %50, 0
  %52 = or i1 %49, %51
  br i1 %52, label %53, label %54, !prof !5

53:                                               ; preds = %44
  tail call void @llvm.trap() #14
  unreachable

54:                                               ; preds = %44
  %55 = trunc i33 %50 to i32
  store i32 %55, i32* %45, align 4
  br label %58

56:                                               ; preds = %35
  %57 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %33) #14
  br label %58

58:                                               ; preds = %28, %24, %56, %54, %40, %31, %22, %10
  %59 = phi %"class.WTF::StringImpl"* [ null, %10 ], [ null, %22 ], [ %57, %56 ], [ %33, %40 ], [ %33, %54 ], [ null, %31 ], [ null, %24 ], [ null, %28 ]
  %60 = phi %"class.WTF::AtomicString"* [ %21, %10 ], [ %17, %22 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %56 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %40 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %54 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %31 ], [ %21, %28 ], [ %25, %24 ]
  %61 = phi i32 [ 1, %10 ], [ 1, %22 ], [ 0, %56 ], [ 0, %40 ], [ 0, %54 ], [ 0, %31 ], [ 1, %24 ], [ 1, %28 ]
  %62 = phi %"class.WTF::AtomicString"* [ %21, %10 ], [ %21, %22 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %56 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %40 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %54 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %31 ], [ %21, %24 ], [ %21, %28 ]
  %63 = load i8, i8* %6, align 1
  %64 = and i8 %63, 4
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %75, label %66

66:                                               ; preds = %58
  %67 = bitcast %"union.blink::InvalidationSet::Backing.2"* %1 to %"class.WTF::HashSet"**
  %68 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %67, align 8
  %69 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %68, i64 0, i32 0, i32 0
  %70 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %69, align 8
  %71 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %68, i64 0, i32 0, i32 1
  %72 = load i32, i32* %71, align 8
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %70, i64 %73
  br label %103

75:                                               ; preds = %58
  %76 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %77 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %76, i64 0, i32 0, i32 0, i32 0
  %78 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %77, align 8
  %79 = icmp eq %"class.WTF::StringImpl"* %78, null
  br i1 %79, label %103, label %80

80:                                               ; preds = %75
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load atomic i32, i32* %81 acquire, align 4
  %83 = and i32 %82, 4
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %101, label %85

85:                                               ; preds = %80
  %86 = load atomic i32, i32* %81 monotonic, align 4
  %87 = and i32 %86, 2
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %103

89:                                               ; preds = %85
  %90 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %91 = load i32, i32* %90, align 4
  %92 = zext i32 %91 to i33
  %93 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %92, i33 1) #14
  %94 = extractvalue { i33, i1 } %93, 1
  %95 = extractvalue { i33, i1 } %93, 0
  %96 = icmp slt i33 %95, 0
  %97 = or i1 %94, %96
  br i1 %97, label %98, label %99, !prof !5

98:                                               ; preds = %89
  tail call void @llvm.trap() #14
  unreachable

99:                                               ; preds = %89
  %100 = trunc i33 %95 to i32
  store i32 %100, i32* %90, align 4
  br label %103

101:                                              ; preds = %80
  %102 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %78) #14
  br label %103

103:                                              ; preds = %101, %99, %85, %75, %66
  %104 = phi %"class.WTF::AtomicString"* [ %74, %66 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %75 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %85 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %99 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %101 ]
  %105 = phi %"class.WTF::StringImpl"* [ null, %66 ], [ null, %75 ], [ %78, %85 ], [ %78, %99 ], [ %102, %101 ]
  %106 = phi i32 [ 1, %66 ], [ 0, %75 ], [ 0, %85 ], [ 0, %99 ], [ 0, %101 ]
  %107 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %4, i64 0, i32 0
  store i32 %61, i32* %107, align 8
  %108 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %4, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %59, %"class.WTF::StringImpl"** %108, align 8
  %109 = icmp eq %"class.WTF::StringImpl"* %59, null
  br i1 %109, label %127, label %110

110:                                              ; preds = %103
  %111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %112 = load atomic i32, i32* %111 monotonic, align 4
  %113 = and i32 %112, 2
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %127

115:                                              ; preds = %110
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %117 = load i32, i32* %116, align 4
  %118 = zext i32 %117 to i33
  %119 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %118, i33 1) #14
  %120 = extractvalue { i33, i1 } %119, 1
  %121 = extractvalue { i33, i1 } %119, 0
  %122 = icmp slt i33 %121, 0
  %123 = or i1 %120, %122
  br i1 %123, label %124, label %125, !prof !5

124:                                              ; preds = %115
  tail call void @llvm.trap() #14
  unreachable

125:                                              ; preds = %115
  %126 = trunc i33 %121 to i32
  store i32 %126, i32* %116, align 4
  br label %127

127:                                              ; preds = %103, %110, %125
  %128 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %4, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::AtomicString"* %60, %"class.WTF::AtomicString"** %128, align 8
  %129 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %4, i64 0, i32 2, i32 0, i32 1
  store %"class.WTF::AtomicString"* %62, %"class.WTF::AtomicString"** %129, align 8
  %130 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %5, i64 0, i32 0
  store i32 %106, i32* %130, align 8
  %131 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %5, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %105, %"class.WTF::StringImpl"** %131, align 8
  %132 = icmp eq %"class.WTF::StringImpl"* %105, null
  br i1 %132, label %164, label %133

133:                                              ; preds = %127
  %134 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = load atomic i32, i32* %134 monotonic, align 4
  %136 = and i32 %135, 2
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %150

138:                                              ; preds = %133
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 0
  %140 = load i32, i32* %139, align 4
  %141 = zext i32 %140 to i33
  %142 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %141, i33 1) #14
  %143 = extractvalue { i33, i1 } %142, 1
  %144 = extractvalue { i33, i1 } %142, 0
  %145 = icmp slt i33 %144, 0
  %146 = or i1 %143, %145
  br i1 %146, label %147, label %148, !prof !5

147:                                              ; preds = %138
  tail call void @llvm.trap() #14
  unreachable

148:                                              ; preds = %138
  %149 = trunc i33 %144 to i32
  store i32 %149, i32* %139, align 4
  br label %150

150:                                              ; preds = %148, %133
  %151 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %5, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::AtomicString"* %104, %"class.WTF::AtomicString"** %151, align 8
  %152 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %5, i64 0, i32 2, i32 0, i32 1
  store %"class.WTF::AtomicString"* %104, %"class.WTF::AtomicString"** %152, align 8
  tail call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5RangeC2ENS3_8IteratorES5_(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %0, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* nonnull byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator") align 8 %4, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* nonnull byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator") align 8 %5)
  %153 = load atomic i32, i32* %134 monotonic, align 4
  %154 = and i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 0
  %157 = load i32, i32* %156, align 4
  br i1 %155, label %158, label %160

158:                                              ; preds = %150
  %159 = add i32 %157, -1
  store i32 %159, i32* %156, align 4
  br label %160

160:                                              ; preds = %158, %150
  %161 = phi i32 [ %159, %158 ], [ %157, %150 ]
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %167

163:                                              ; preds = %160
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %105) #14
  br label %167

164:                                              ; preds = %127
  %165 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %5, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::AtomicString"* %104, %"class.WTF::AtomicString"** %165, align 8
  %166 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %5, i64 0, i32 2, i32 0, i32 1
  store %"class.WTF::AtomicString"* %104, %"class.WTF::AtomicString"** %166, align 8
  tail call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5RangeC2ENS3_8IteratorES5_(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %0, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* nonnull byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator") align 8 %4, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* nonnull byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator") align 8 %5)
  br label %167

167:                                              ; preds = %164, %160, %163
  br i1 %109, label %181, label %168

168:                                              ; preds = %167
  %169 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %170 = load atomic i32, i32* %169 monotonic, align 4
  %171 = and i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %174 = load i32, i32* %173, align 4
  br i1 %172, label %175, label %177

175:                                              ; preds = %168
  %176 = add i32 %174, -1
  store i32 %176, i32* %173, align 4
  br label %177

177:                                              ; preds = %175, %168
  %178 = phi i32 [ %176, %175 ], [ %174, %168 ]
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %180, label %181

180:                                              ; preds = %177
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %59) #14
  br label %181

181:                                              ; preds = %167, %177, %180
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5RangeC2ENS3_8IteratorES5_(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"*, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator") align 8, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator") align 8) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %0, i64 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  store i32 %6, i32* %4, align 8
  %7 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"** %9, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %10, label %28, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %28

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i33
  %20 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %19, i33 1) #14
  %21 = extractvalue { i33, i1 } %20, 1
  %22 = extractvalue { i33, i1 } %20, 0
  %23 = icmp slt i33 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %26, !prof !5

25:                                               ; preds = %16
  tail call void @llvm.trap() #14
  unreachable

26:                                               ; preds = %16
  %27 = trunc i33 %22 to i32
  store i32 %27, i32* %17, align 4
  br label %28

28:                                               ; preds = %3, %11, %26
  %29 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %0, i64 0, i32 0, i32 2
  %30 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %1, i64 0, i32 2
  %31 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %29 to i8*
  %32 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 16, i1 false) #14
  %33 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %0, i64 0, i32 1, i32 0
  %34 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %2, i64 0, i32 0
  %35 = load i32, i32* %34, align 8
  store i32 %35, i32* %33, align 8
  %36 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %2, i64 0, i32 1, i32 0, i32 0, i32 0
  %37 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %36, align 8
  %38 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %0, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %37, %"class.WTF::StringImpl"** %38, align 8
  %39 = icmp eq %"class.WTF::StringImpl"* %37, null
  br i1 %39, label %57, label %40

40:                                               ; preds = %28
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load atomic i32, i32* %41 monotonic, align 4
  %43 = and i32 %42, 2
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %62

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = zext i32 %47 to i33
  %49 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %48, i33 1) #14
  %50 = extractvalue { i33, i1 } %49, 1
  %51 = extractvalue { i33, i1 } %49, 0
  %52 = icmp slt i33 %51, 0
  %53 = or i1 %50, %52
  br i1 %53, label %54, label %55, !prof !5

54:                                               ; preds = %45
  tail call void @llvm.trap() #14
  unreachable

55:                                               ; preds = %45
  %56 = trunc i33 %51 to i32
  store i32 %56, i32* %46, align 4
  br label %62

57:                                               ; preds = %28
  %58 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %0, i64 0, i32 1, i32 2
  %59 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %2, i64 0, i32 2
  %60 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %58 to i8*
  %61 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 16, i1 false) #14
  br label %78

62:                                               ; preds = %40, %55
  %63 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %0, i64 0, i32 1, i32 2
  %64 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %2, i64 0, i32 2
  %65 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %63 to i8*
  %66 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %64 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 16, i1 false) #14
  %67 = load atomic i32, i32* %41 monotonic, align 4
  %68 = and i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 0
  %71 = load i32, i32* %70, align 4
  br i1 %69, label %72, label %74

72:                                               ; preds = %62
  %73 = add i32 %71, -1
  store i32 %73, i32* %70, align 4
  br label %74

74:                                               ; preds = %72, %62
  %75 = phi i32 [ %73, %72 ], [ %71, %62 ]
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %78

77:                                               ; preds = %74
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %37) #14
  br label %78

78:                                               ; preds = %57, %74, %77
  br i1 %10, label %92, label %79

79:                                               ; preds = %78
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load atomic i32, i32* %80 monotonic, align 4
  %82 = and i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %85 = load i32, i32* %84, align 4
  br i1 %83, label %86, label %88

86:                                               ; preds = %79
  %87 = add i32 %85, -1
  store i32 %87, i32* %84, align 4
  br label %88

88:                                               ; preds = %86, %79
  %89 = phi i32 [ %87, %86 ], [ %85, %79 ]
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %92

91:                                               ; preds = %88
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #14
  br label %92

92:                                               ; preds = %78, %88, %91
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5ItemsERKNS0_12BackingFlagsE(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* noalias sret, %"union.blink::InvalidationSet::Backing.3"*, %"class.blink::InvalidationSet::BackingFlags"* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", align 8
  %5 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", align 8
  %6 = getelementptr inbounds %"class.blink::InvalidationSet::BackingFlags", %"class.blink::InvalidationSet::BackingFlags"* %2, i64 0, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = and i8 %7, 8
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %31, label %10

10:                                               ; preds = %3
  %11 = bitcast %"union.blink::InvalidationSet::Backing.3"* %1 to %"class.WTF::HashSet"**
  %12 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %11, align 8
  %13 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %12, i64 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, 0
  %16 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %12, i64 0, i32 0, i32 0
  %17 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %12, i64 0, i32 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %17, i64 %20
  br i1 %15, label %58, label %22

22:                                               ; preds = %10
  %23 = icmp eq i32 %19, 0
  br i1 %23, label %58, label %24

24:                                               ; preds = %22, %28
  %25 = phi %"class.WTF::AtomicString"* [ %29, %28 ], [ %17, %22 ]
  %26 = bitcast %"class.WTF::AtomicString"* %25 to i64*
  %27 = load i64, i64* %26, align 8
  switch i64 %27, label %58 [
    i64 -1, label %28
    i64 0, label %28
  ]

28:                                               ; preds = %24, %24
  %29 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %25, i64 1
  %30 = icmp eq %"class.WTF::AtomicString"* %29, %21
  br i1 %30, label %58, label %24

31:                                               ; preds = %3
  %32 = getelementptr inbounds %"union.blink::InvalidationSet::Backing.3", %"union.blink::InvalidationSet::Backing.3"* %1, i64 0, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, null
  br i1 %34, label %58, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 acquire, align 4
  %38 = and i32 %37, 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %56, label %40

40:                                               ; preds = %35
  %41 = load atomic i32, i32* %36 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %58

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  %47 = zext i32 %46 to i33
  %48 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %47, i33 1) #14
  %49 = extractvalue { i33, i1 } %48, 1
  %50 = extractvalue { i33, i1 } %48, 0
  %51 = icmp slt i33 %50, 0
  %52 = or i1 %49, %51
  br i1 %52, label %53, label %54, !prof !5

53:                                               ; preds = %44
  tail call void @llvm.trap() #14
  unreachable

54:                                               ; preds = %44
  %55 = trunc i33 %50 to i32
  store i32 %55, i32* %45, align 4
  br label %58

56:                                               ; preds = %35
  %57 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %33) #14
  br label %58

58:                                               ; preds = %28, %24, %56, %54, %40, %31, %22, %10
  %59 = phi %"class.WTF::StringImpl"* [ null, %10 ], [ null, %22 ], [ %57, %56 ], [ %33, %40 ], [ %33, %54 ], [ null, %31 ], [ null, %24 ], [ null, %28 ]
  %60 = phi %"class.WTF::AtomicString"* [ %21, %10 ], [ %17, %22 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %56 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %40 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %54 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %31 ], [ %21, %28 ], [ %25, %24 ]
  %61 = phi i32 [ 1, %10 ], [ 1, %22 ], [ 0, %56 ], [ 0, %40 ], [ 0, %54 ], [ 0, %31 ], [ 1, %24 ], [ 1, %28 ]
  %62 = phi %"class.WTF::AtomicString"* [ %21, %10 ], [ %21, %22 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %56 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %40 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %54 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %31 ], [ %21, %24 ], [ %21, %28 ]
  %63 = load i8, i8* %6, align 1
  %64 = and i8 %63, 8
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %75, label %66

66:                                               ; preds = %58
  %67 = bitcast %"union.blink::InvalidationSet::Backing.3"* %1 to %"class.WTF::HashSet"**
  %68 = load %"class.WTF::HashSet"*, %"class.WTF::HashSet"** %67, align 8
  %69 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %68, i64 0, i32 0, i32 0
  %70 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %69, align 8
  %71 = getelementptr inbounds %"class.WTF::HashSet", %"class.WTF::HashSet"* %68, i64 0, i32 0, i32 1
  %72 = load i32, i32* %71, align 8
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %70, i64 %73
  br label %103

75:                                               ; preds = %58
  %76 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %77 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %76, i64 0, i32 0, i32 0, i32 0
  %78 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %77, align 8
  %79 = icmp eq %"class.WTF::StringImpl"* %78, null
  br i1 %79, label %103, label %80

80:                                               ; preds = %75
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load atomic i32, i32* %81 acquire, align 4
  %83 = and i32 %82, 4
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %101, label %85

85:                                               ; preds = %80
  %86 = load atomic i32, i32* %81 monotonic, align 4
  %87 = and i32 %86, 2
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %103

89:                                               ; preds = %85
  %90 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %91 = load i32, i32* %90, align 4
  %92 = zext i32 %91 to i33
  %93 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %92, i33 1) #14
  %94 = extractvalue { i33, i1 } %93, 1
  %95 = extractvalue { i33, i1 } %93, 0
  %96 = icmp slt i33 %95, 0
  %97 = or i1 %94, %96
  br i1 %97, label %98, label %99, !prof !5

98:                                               ; preds = %89
  tail call void @llvm.trap() #14
  unreachable

99:                                               ; preds = %89
  %100 = trunc i33 %95 to i32
  store i32 %100, i32* %90, align 4
  br label %103

101:                                              ; preds = %80
  %102 = tail call %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"* nonnull %78) #14
  br label %103

103:                                              ; preds = %101, %99, %85, %75, %66
  %104 = phi %"class.WTF::AtomicString"* [ %74, %66 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %75 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %85 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %99 ], [ inttoptr (i64 -6148914691236517206 to %"class.WTF::AtomicString"*), %101 ]
  %105 = phi %"class.WTF::StringImpl"* [ null, %66 ], [ null, %75 ], [ %78, %85 ], [ %78, %99 ], [ %102, %101 ]
  %106 = phi i32 [ 1, %66 ], [ 0, %75 ], [ 0, %85 ], [ 0, %99 ], [ 0, %101 ]
  %107 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %4, i64 0, i32 0
  store i32 %61, i32* %107, align 8
  %108 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %4, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %59, %"class.WTF::StringImpl"** %108, align 8
  %109 = icmp eq %"class.WTF::StringImpl"* %59, null
  br i1 %109, label %127, label %110

110:                                              ; preds = %103
  %111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %112 = load atomic i32, i32* %111 monotonic, align 4
  %113 = and i32 %112, 2
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %127

115:                                              ; preds = %110
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %117 = load i32, i32* %116, align 4
  %118 = zext i32 %117 to i33
  %119 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %118, i33 1) #14
  %120 = extractvalue { i33, i1 } %119, 1
  %121 = extractvalue { i33, i1 } %119, 0
  %122 = icmp slt i33 %121, 0
  %123 = or i1 %120, %122
  br i1 %123, label %124, label %125, !prof !5

124:                                              ; preds = %115
  tail call void @llvm.trap() #14
  unreachable

125:                                              ; preds = %115
  %126 = trunc i33 %121 to i32
  store i32 %126, i32* %116, align 4
  br label %127

127:                                              ; preds = %103, %110, %125
  %128 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %4, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::AtomicString"* %60, %"class.WTF::AtomicString"** %128, align 8
  %129 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %4, i64 0, i32 2, i32 0, i32 1
  store %"class.WTF::AtomicString"* %62, %"class.WTF::AtomicString"** %129, align 8
  %130 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %5, i64 0, i32 0
  store i32 %106, i32* %130, align 8
  %131 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %5, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %105, %"class.WTF::StringImpl"** %131, align 8
  %132 = icmp eq %"class.WTF::StringImpl"* %105, null
  br i1 %132, label %164, label %133

133:                                              ; preds = %127
  %134 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = load atomic i32, i32* %134 monotonic, align 4
  %136 = and i32 %135, 2
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %150

138:                                              ; preds = %133
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 0
  %140 = load i32, i32* %139, align 4
  %141 = zext i32 %140 to i33
  %142 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %141, i33 1) #14
  %143 = extractvalue { i33, i1 } %142, 1
  %144 = extractvalue { i33, i1 } %142, 0
  %145 = icmp slt i33 %144, 0
  %146 = or i1 %143, %145
  br i1 %146, label %147, label %148, !prof !5

147:                                              ; preds = %138
  tail call void @llvm.trap() #14
  unreachable

148:                                              ; preds = %138
  %149 = trunc i33 %144 to i32
  store i32 %149, i32* %139, align 4
  br label %150

150:                                              ; preds = %148, %133
  %151 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %5, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::AtomicString"* %104, %"class.WTF::AtomicString"** %151, align 8
  %152 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %5, i64 0, i32 2, i32 0, i32 1
  store %"class.WTF::AtomicString"* %104, %"class.WTF::AtomicString"** %152, align 8
  tail call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5RangeC2ENS3_8IteratorES5_(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %0, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* nonnull byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator") align 8 %4, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* nonnull byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator") align 8 %5)
  %153 = load atomic i32, i32* %134 monotonic, align 4
  %154 = and i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 0
  %157 = load i32, i32* %156, align 4
  br i1 %155, label %158, label %160

158:                                              ; preds = %150
  %159 = add i32 %157, -1
  store i32 %159, i32* %156, align 4
  br label %160

160:                                              ; preds = %158, %150
  %161 = phi i32 [ %159, %158 ], [ %157, %150 ]
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %167

163:                                              ; preds = %160
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %105) #14
  br label %167

164:                                              ; preds = %127
  %165 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %5, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::AtomicString"* %104, %"class.WTF::AtomicString"** %165, align 8
  %166 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %5, i64 0, i32 2, i32 0, i32 1
  store %"class.WTF::AtomicString"* %104, %"class.WTF::AtomicString"** %166, align 8
  tail call void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5RangeC2ENS3_8IteratorES5_(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %0, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* nonnull byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator") align 8 %4, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* nonnull byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator") align 8 %5)
  br label %167

167:                                              ; preds = %164, %160, %163
  br i1 %109, label %181, label %168

168:                                              ; preds = %167
  %169 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %170 = load atomic i32, i32* %169 monotonic, align 4
  %171 = and i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %174 = load i32, i32* %173, align 4
  br i1 %172, label %175, label %177

175:                                              ; preds = %168
  %176 = add i32 %174, -1
  store i32 %176, i32* %173, align 4
  br label %177

177:                                              ; preds = %175, %168
  %178 = phi i32 [ %176, %175 ], [ %174, %168 ]
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %180, label %181

180:                                              ; preds = %177
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %59) #14
  br label %181

181:                                              ; preds = %167, %177, %180
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5RangeC2ENS3_8IteratorES5_(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"*, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator") align 8, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* byval(%"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator") align 8) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %0, i64 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  store i32 %6, i32* %4, align 8
  %7 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"** %9, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %10, label %28, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %28

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i33
  %20 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %19, i33 1) #14
  %21 = extractvalue { i33, i1 } %20, 1
  %22 = extractvalue { i33, i1 } %20, 0
  %23 = icmp slt i33 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %26, !prof !5

25:                                               ; preds = %16
  tail call void @llvm.trap() #14
  unreachable

26:                                               ; preds = %16
  %27 = trunc i33 %22 to i32
  store i32 %27, i32* %17, align 4
  br label %28

28:                                               ; preds = %3, %11, %26
  %29 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %0, i64 0, i32 0, i32 2
  %30 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %1, i64 0, i32 2
  %31 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %29 to i8*
  %32 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 16, i1 false) #14
  %33 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %0, i64 0, i32 1, i32 0
  %34 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %2, i64 0, i32 0
  %35 = load i32, i32* %34, align 8
  store i32 %35, i32* %33, align 8
  %36 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %2, i64 0, i32 1, i32 0, i32 0, i32 0
  %37 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %36, align 8
  %38 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %0, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %37, %"class.WTF::StringImpl"** %38, align 8
  %39 = icmp eq %"class.WTF::StringImpl"* %37, null
  br i1 %39, label %57, label %40

40:                                               ; preds = %28
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load atomic i32, i32* %41 monotonic, align 4
  %43 = and i32 %42, 2
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %62

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = zext i32 %47 to i33
  %49 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %48, i33 1) #14
  %50 = extractvalue { i33, i1 } %49, 1
  %51 = extractvalue { i33, i1 } %49, 0
  %52 = icmp slt i33 %51, 0
  %53 = or i1 %50, %52
  br i1 %53, label %54, label %55, !prof !5

54:                                               ; preds = %45
  tail call void @llvm.trap() #14
  unreachable

55:                                               ; preds = %45
  %56 = trunc i33 %51 to i32
  store i32 %56, i32* %46, align 4
  br label %62

57:                                               ; preds = %28
  %58 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %0, i64 0, i32 1, i32 2
  %59 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %2, i64 0, i32 2
  %60 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %58 to i8*
  %61 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 16, i1 false) #14
  br label %78

62:                                               ; preds = %40, %55
  %63 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %0, i64 0, i32 1, i32 2
  %64 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %2, i64 0, i32 2
  %65 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %63 to i8*
  %66 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %64 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 16, i1 false) #14
  %67 = load atomic i32, i32* %41 monotonic, align 4
  %68 = and i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 0
  %71 = load i32, i32* %70, align 4
  br i1 %69, label %72, label %74

72:                                               ; preds = %62
  %73 = add i32 %71, -1
  store i32 %73, i32* %70, align 4
  br label %74

74:                                               ; preds = %72, %62
  %75 = phi i32 [ %73, %72 ], [ %71, %62 ]
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %78

77:                                               ; preds = %74
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %37) #14
  br label %78

78:                                               ; preds = %57, %74, %77
  br i1 %10, label %92, label %79

79:                                               ; preds = %78
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load atomic i32, i32* %80 monotonic, align 4
  %82 = and i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 0
  %85 = load i32, i32* %84, align 4
  br i1 %83, label %86, label %88

86:                                               ; preds = %79
  %87 = add i32 %85, -1
  store i32 %87, i32* %84, align 4
  br label %88

88:                                               ; preds = %86, %79
  %89 = phi i32 [ %87, %86 ], [ %85, %79 ]
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %92

91:                                               ; preds = %88
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %8) #14
  br label %92

92:                                               ; preds = %78, %88, %91
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.WTF::AtomicString"* @_ZN3WTF6VectorINS_12AtomicStringELj4ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #14
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #14
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.45, i64 0, i64 0), i8* %14, i8* %15) #14
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.46, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #14
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #14
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #14
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %24, i64 %25
  ret %"class.WTF::AtomicString"* %26
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN3WTF12AtomicString11AddSlowCaseEPNS_10StringImplE(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #2

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #2

declare void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"*, i8*, i32) local_unnamed_addr #2

declare void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"*, i16*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN3WTF23CodeUnitCompareLessThanERKNS_6StringES2_(%"class.WTF::String"* dereferenceable(8), %"class.WTF::String"* dereferenceable(8)) #7 comdat {
  %3 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %4, null
  %8 = icmp ne %"class.WTF::StringImpl"* %6, null
  br i1 %7, label %9, label %15

9:                                                ; preds = %2
  br i1 %8, label %10, label %168

10:                                               ; preds = %9
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp ne i32 %12, 0
  %14 = sext i1 %13 to i32
  br label %168

15:                                               ; preds = %2
  br i1 %8, label %21, label %16

16:                                               ; preds = %15
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = icmp ne i32 %18, 0
  %20 = zext i1 %19 to i32
  br label %168

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 1
  %25 = icmp eq i32 %24, 0
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load atomic i32, i32* %26 monotonic, align 4
  %28 = and i32 %27, 1
  %29 = icmp ne i32 %28, 0
  br i1 %25, label %94, label %30

30:                                               ; preds = %21
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp ult i32 %32, %34
  %36 = select i1 %35, i32 %32, i32 %34
  %37 = icmp eq i32 %36, 0
  br i1 %29, label %38, label %64

38:                                               ; preds = %30
  br i1 %37, label %59, label %39

39:                                               ; preds = %38
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  %41 = bitcast %"class.WTF::StringImpl"* %40 to i8*
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 1
  %43 = bitcast %"class.WTF::StringImpl"* %42 to i8*
  br label %44

44:                                               ; preds = %51, %39
  %45 = phi i32 [ %54, %51 ], [ 0, %39 ]
  %46 = phi i8* [ %53, %51 ], [ %41, %39 ]
  %47 = phi i8* [ %52, %51 ], [ %43, %39 ]
  %48 = load i8, i8* %47, align 1
  %49 = load i8, i8* %46, align 1
  %50 = icmp eq i8 %48, %49
  br i1 %50, label %51, label %56

51:                                               ; preds = %44
  %52 = getelementptr inbounds i8, i8* %47, i64 1
  %53 = getelementptr inbounds i8, i8* %46, i64 1
  %54 = add nuw i32 %45, 1
  %55 = icmp ult i32 %54, %36
  br i1 %55, label %44, label %59

56:                                               ; preds = %44
  %57 = icmp ugt i8 %48, %49
  %58 = select i1 %57, i32 1, i32 -1
  br label %168

59:                                               ; preds = %51, %38
  %60 = icmp eq i32 %32, %34
  br i1 %60, label %168, label %61

61:                                               ; preds = %59
  %62 = icmp ugt i32 %32, %34
  %63 = select i1 %62, i32 1, i32 -1
  br label %168

64:                                               ; preds = %30
  br i1 %37, label %89, label %65

65:                                               ; preds = %64
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  %67 = bitcast %"class.WTF::StringImpl"* %66 to i16*
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 1
  %69 = bitcast %"class.WTF::StringImpl"* %68 to i8*
  br label %70

70:                                               ; preds = %79, %65
  %71 = phi i32 [ %82, %79 ], [ 0, %65 ]
  %72 = phi i16* [ %81, %79 ], [ %67, %65 ]
  %73 = phi i8* [ %80, %79 ], [ %69, %65 ]
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  %76 = load i16, i16* %72, align 2
  %77 = zext i16 %76 to i32
  %78 = icmp eq i32 %75, %77
  br i1 %78, label %79, label %84

79:                                               ; preds = %70
  %80 = getelementptr inbounds i8, i8* %73, i64 1
  %81 = getelementptr inbounds i16, i16* %72, i64 1
  %82 = add nuw i32 %71, 1
  %83 = icmp ult i32 %82, %36
  br i1 %83, label %70, label %89

84:                                               ; preds = %70
  %85 = zext i8 %74 to i32
  %86 = zext i16 %76 to i32
  %87 = icmp ugt i32 %85, %86
  %88 = select i1 %87, i32 1, i32 -1
  br label %168

89:                                               ; preds = %79, %64
  %90 = icmp eq i32 %32, %34
  br i1 %90, label %168, label %91

91:                                               ; preds = %89
  %92 = icmp ugt i32 %32, %34
  %93 = select i1 %92, i32 1, i32 -1
  br label %168

94:                                               ; preds = %21
  br i1 %29, label %95, label %135

95:                                               ; preds = %94
  %96 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %97 = load i32, i32* %96, align 4
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 1
  %99 = load i32, i32* %98, align 4
  %100 = icmp ult i32 %97, %99
  %101 = select i1 %100, i32 %97, i32 %99
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %127, label %103

103:                                              ; preds = %95
  %104 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 1
  %105 = bitcast %"class.WTF::StringImpl"* %104 to i16*
  %106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  %107 = bitcast %"class.WTF::StringImpl"* %106 to i8*
  br label %108

108:                                              ; preds = %117, %103
  %109 = phi i32 [ %120, %117 ], [ 0, %103 ]
  %110 = phi i16* [ %119, %117 ], [ %105, %103 ]
  %111 = phi i8* [ %118, %117 ], [ %107, %103 ]
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = load i16, i16* %110, align 2
  %115 = zext i16 %114 to i32
  %116 = icmp eq i32 %113, %115
  br i1 %116, label %117, label %122

117:                                              ; preds = %108
  %118 = getelementptr inbounds i8, i8* %111, i64 1
  %119 = getelementptr inbounds i16, i16* %110, i64 1
  %120 = add nuw i32 %109, 1
  %121 = icmp ult i32 %120, %101
  br i1 %121, label %108, label %127

122:                                              ; preds = %108
  %123 = zext i8 %112 to i32
  %124 = zext i16 %114 to i32
  %125 = icmp ugt i32 %123, %124
  %126 = select i1 %125, i32 1, i32 -1
  br label %132

127:                                              ; preds = %117, %95
  %128 = icmp eq i32 %97, %99
  br i1 %128, label %132, label %129

129:                                              ; preds = %127
  %130 = icmp ugt i32 %97, %99
  %131 = select i1 %130, i32 1, i32 -1
  br label %132

132:                                              ; preds = %129, %127, %122
  %133 = phi i32 [ %126, %122 ], [ %131, %129 ], [ 0, %127 ]
  %134 = sub nsw i32 0, %133
  br label %168

135:                                              ; preds = %94
  %136 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 1
  %137 = load i32, i32* %136, align 4
  %138 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %139 = load i32, i32* %138, align 4
  %140 = icmp ult i32 %137, %139
  %141 = select i1 %140, i32 %137, i32 %139
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %163, label %143

143:                                              ; preds = %135
  %144 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  %145 = bitcast %"class.WTF::StringImpl"* %144 to i16*
  %146 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 1
  %147 = bitcast %"class.WTF::StringImpl"* %146 to i16*
  br label %148

148:                                              ; preds = %155, %143
  %149 = phi i32 [ %158, %155 ], [ 0, %143 ]
  %150 = phi i16* [ %157, %155 ], [ %145, %143 ]
  %151 = phi i16* [ %156, %155 ], [ %147, %143 ]
  %152 = load i16, i16* %151, align 2
  %153 = load i16, i16* %150, align 2
  %154 = icmp eq i16 %152, %153
  br i1 %154, label %155, label %160

155:                                              ; preds = %148
  %156 = getelementptr inbounds i16, i16* %151, i64 1
  %157 = getelementptr inbounds i16, i16* %150, i64 1
  %158 = add nuw i32 %149, 1
  %159 = icmp ult i32 %158, %141
  br i1 %159, label %148, label %163

160:                                              ; preds = %148
  %161 = icmp ugt i16 %152, %153
  %162 = select i1 %161, i32 1, i32 -1
  br label %168

163:                                              ; preds = %155, %135
  %164 = icmp eq i32 %137, %139
  br i1 %164, label %168, label %165

165:                                              ; preds = %163
  %166 = icmp ugt i32 %137, %139
  %167 = select i1 %166, i32 1, i32 -1
  br label %168

168:                                              ; preds = %9, %10, %16, %56, %59, %61, %84, %89, %91, %132, %160, %163, %165
  %169 = phi i32 [ %20, %16 ], [ 0, %9 ], [ %14, %10 ], [ %134, %132 ], [ %58, %56 ], [ %63, %61 ], [ 0, %59 ], [ %88, %84 ], [ %93, %91 ], [ 0, %89 ], [ %162, %160 ], [ %167, %165 ], [ 0, %163 ]
  %170 = icmp slt i32 %169, 0
  ret i1 %170
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorINS_12AtomicStringELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIRKS1_EEvOT_(%"class.WTF::Vector.712"*, %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.712", %"class.WTF::Vector.712"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.712", %"class.WTF::Vector.712"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %6, align 8
  %8 = icmp ugt %"class.WTF::AtomicString"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %7, i64 %10
  %12 = icmp ugt %"class.WTF::AtomicString"* %11, %1
  br i1 %12, label %54, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector.712", %"class.WTF::Vector.712"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %99, !prof !27

24:                                               ; preds = %13
  %25 = icmp eq %"class.WTF::AtomicString"* %7, null
  %26 = zext i32 %22 to i64
  %27 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_12AtomicStringEEEmm(i64 %26) #14
  %28 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %27, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv, i64 0, i64 0)) #14
  br i1 %25, label %29, label %35

29:                                               ; preds = %24
  %30 = ptrtoint i8* %28 to i64
  %31 = bitcast %"class.WTF::Vector.712"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %27, 3
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %28 to %"class.WTF::AtomicString"*
  br label %99

35:                                               ; preds = %24
  %36 = lshr i64 %27, 3
  %37 = ptrtoint i8* %28 to i64
  %38 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %6, align 8
  %39 = icmp ne i8* %28, null
  %40 = icmp ne %"class.WTF::AtomicString"* %38, null
  %41 = and i1 %39, %40
  %42 = bitcast %"class.WTF::AtomicString"* %38 to i8*
  br i1 %41, label %43, label %49, !prof !27

43:                                               ; preds = %35
  %44 = load i32, i32* %3, align 4
  %45 = zext i32 %44 to i64
  %46 = shl nuw nsw i64 %45, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* nonnull align 8 %42, i64 %46, i1 false) #14
  %47 = bitcast %"class.WTF::Vector.712"* %0 to i8**
  %48 = load i8*, i8** %47, align 8
  br label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %48, %43 ], [ %42, %35 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %50) #14
  %51 = bitcast %"class.WTF::Vector.712"* %0 to i64*
  store atomic i64 %37, i64* %51 monotonic, align 8
  %52 = trunc i64 %36 to i32
  store i32 %52, i32* %14, align 8
  %53 = bitcast i8* %28 to %"class.WTF::AtomicString"*
  br label %99

54:                                               ; preds = %9
  %55 = ptrtoint %"class.WTF::AtomicString"* %1 to i64
  %56 = ptrtoint %"class.WTF::AtomicString"* %7 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = getelementptr inbounds %"class.WTF::Vector.712", %"class.WTF::Vector.712"* %0, i64 0, i32 0, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  %61 = lshr i32 %60, 2
  %62 = add i32 %60, 1
  %63 = add i32 %62, %61
  %64 = icmp ugt i32 %63, 4
  %65 = select i1 %64, i32 %63, i32 4
  %66 = icmp ugt i32 %65, %5
  %67 = select i1 %66, i32 %65, i32 %5
  %68 = icmp ult i32 %60, %67
  br i1 %68, label %69, label %96, !prof !27

69:                                               ; preds = %54
  %70 = icmp eq %"class.WTF::AtomicString"* %7, null
  %71 = zext i32 %67 to i64
  %72 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_12AtomicStringEEEmm(i64 %71) #14
  %73 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %72, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv, i64 0, i64 0)) #14
  %74 = ptrtoint i8* %73 to i64
  br i1 %70, label %75, label %77

75:                                               ; preds = %69
  %76 = bitcast %"class.WTF::Vector.712"* %0 to i64*
  store atomic i64 %74, i64* %76 monotonic, align 8
  br label %92

77:                                               ; preds = %69
  %78 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %6, align 8
  %79 = icmp ne i8* %73, null
  %80 = icmp ne %"class.WTF::AtomicString"* %78, null
  %81 = and i1 %79, %80
  %82 = bitcast %"class.WTF::AtomicString"* %78 to i8*
  br i1 %81, label %83, label %89, !prof !27

83:                                               ; preds = %77
  %84 = load i32, i32* %3, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %73, i8* nonnull align 8 %82, i64 %86, i1 false) #14
  %87 = bitcast %"class.WTF::Vector.712"* %0 to i8**
  %88 = load i8*, i8** %87, align 8
  br label %89

89:                                               ; preds = %83, %77
  %90 = phi i8* [ %88, %83 ], [ %82, %77 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %90) #14
  %91 = bitcast %"class.WTF::Vector.712"* %0 to i64*
  store atomic i64 %74, i64* %91 monotonic, align 8
  br label %92

92:                                               ; preds = %89, %75
  %93 = lshr i64 %72, 3
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %59, align 8
  %95 = bitcast i8* %73 to %"class.WTF::AtomicString"*
  br label %96

96:                                               ; preds = %92, %54
  %97 = phi %"class.WTF::AtomicString"* [ %7, %54 ], [ %95, %92 ]
  %98 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %97, i64 %58
  br label %99

99:                                               ; preds = %49, %29, %13, %96
  %100 = phi %"class.WTF::AtomicString"* [ %97, %96 ], [ %7, %13 ], [ %34, %29 ], [ %53, %49 ]
  %101 = phi %"class.WTF::AtomicString"* [ %98, %96 ], [ %1, %13 ], [ %1, %29 ], [ %1, %49 ]
  %102 = load i32, i32* %3, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %101, i64 0, i32 0, i32 0, i32 0
  %105 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %104, align 8
  %106 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %100, i64 %103, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %105, %"class.WTF::StringImpl"** %106, align 8
  %107 = icmp eq %"class.WTF::StringImpl"* %105, null
  br i1 %107, label %125, label %108

108:                                              ; preds = %99
  %109 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %110 = load atomic i32, i32* %109 monotonic, align 4
  %111 = and i32 %110, 2
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %125

113:                                              ; preds = %108
  %114 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 0
  %115 = load i32, i32* %114, align 4
  %116 = zext i32 %115 to i33
  %117 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %116, i33 1) #14
  %118 = extractvalue { i33, i1 } %117, 1
  %119 = extractvalue { i33, i1 } %117, 0
  %120 = icmp slt i33 %119, 0
  %121 = or i1 %118, %120
  br i1 %121, label %122, label %123, !prof !5

122:                                              ; preds = %113
  tail call void @llvm.trap() #14
  unreachable

123:                                              ; preds = %113
  %124 = trunc i33 %119 to i32
  store i32 %124, i32* %114, align 4
  br label %125

125:                                              ; preds = %99, %108, %123
  %126 = load i32, i32* %3, align 4
  %127 = add i32 %126, 1
  store i32 %127, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeINS_12AtomicStringEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #14
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #14
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.48, i64 0, i64 0), i8* %11, i8* %12) #14
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.49, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #14
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #14
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #14
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #14
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__sortIRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEvT0_SA_T_(%"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  br label %4

4:                                                ; preds = %384, %3
  %5 = phi %"class.WTF::AtomicString"* [ %1, %3 ], [ %329, %384 ]
  %6 = phi %"class.WTF::AtomicString"* [ %0, %3 ], [ %16, %384 ]
  %7 = ptrtoint %"class.WTF::AtomicString"* %5 to i64
  %8 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %5, i64 -1
  %9 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %8, i64 0, i32 0
  %10 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %8, i64 0, i32 0, i32 0, i32 0
  %11 = bitcast %"class.WTF::AtomicString"* %8 to i64*
  %12 = ptrtoint %"class.WTF::AtomicString"* %5 to i64
  br label %13

13:                                               ; preds = %393, %4
  %14 = phi %"class.WTF::AtomicString"* [ %6, %4 ], [ %394, %393 ]
  br label %15

15:                                               ; preds = %173, %13
  %16 = phi %"class.WTF::AtomicString"* [ %14, %13 ], [ %162, %173 ]
  %17 = ptrtoint %"class.WTF::AtomicString"* %16 to i64
  %18 = sub i64 %7, %17
  %19 = ashr exact i64 %18, 3
  switch i64 %19, label %79 [
    i64 0, label %397
    i64 1, label %397
    i64 2, label %20
    i64 3, label %64
    i64 4, label %68
    i64 5, label %73
  ]

20:                                               ; preds = %15
  %21 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %22 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %5, i64 -1
  %23 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %22, i64 0, i32 0
  %24 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 0, i32 0
  %25 = tail call zeroext i1 %21(%"class.WTF::String"* dereferenceable(8) %23, %"class.WTF::String"* dereferenceable(8) %24) #14
  br i1 %25, label %26, label %397

26:                                               ; preds = %20
  %27 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 0, i32 0, i32 0, i32 0
  %28 = bitcast %"class.WTF::AtomicString"* %16 to i64*
  %29 = load i64, i64* %28, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %27, align 8
  %30 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %22, i64 0, i32 0, i32 0, i32 0
  %31 = bitcast %"class.WTF::AtomicString"* %22 to i64*
  %32 = load i64, i64* %31, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %30, align 8
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  store i64 %32, i64* %28, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, null
  br i1 %34, label %48, label %35

35:                                               ; preds = %26
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 0
  %41 = load i32, i32* %40, align 4
  br i1 %39, label %42, label %44

42:                                               ; preds = %35
  %43 = add i32 %41, -1
  store i32 %43, i32* %40, align 4
  br label %44

44:                                               ; preds = %42, %35
  %45 = phi i32 [ %43, %42 ], [ %41, %35 ]
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %44
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %33) #14
  br label %48

48:                                               ; preds = %47, %44, %26
  %49 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %30, align 8
  store i64 %29, i64* %31, align 8
  %50 = icmp eq %"class.WTF::StringImpl"* %49, null
  br i1 %50, label %397, label %51

51:                                               ; preds = %48
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %49, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load atomic i32, i32* %52 monotonic, align 4
  %54 = and i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %49, i64 0, i32 0
  %57 = load i32, i32* %56, align 4
  br i1 %55, label %58, label %60

58:                                               ; preds = %51
  %59 = add i32 %57, -1
  store i32 %59, i32* %56, align 4
  br label %60

60:                                               ; preds = %58, %51
  %61 = phi i32 [ %59, %58 ], [ %57, %51 ]
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %397

63:                                               ; preds = %60
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %49) #14
  br label %397

64:                                               ; preds = %15
  %65 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 1
  %66 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %5, i64 -1
  %67 = tail call i32 @_ZNSt3__17__sort3IRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEjT0_SA_SA_T_(%"class.WTF::AtomicString"* %16, %"class.WTF::AtomicString"* %65, %"class.WTF::AtomicString"* %66, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  br label %397

68:                                               ; preds = %15
  %69 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 1
  %70 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 2
  %71 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %5, i64 -1
  %72 = tail call i32 @_ZNSt3__17__sort4IRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEjT0_SA_SA_SA_T_(%"class.WTF::AtomicString"* %16, %"class.WTF::AtomicString"* %69, %"class.WTF::AtomicString"* %70, %"class.WTF::AtomicString"* %71, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  br label %397

73:                                               ; preds = %15
  %74 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 1
  %75 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 2
  %76 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 3
  %77 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %5, i64 -1
  %78 = tail call i32 @_ZNSt3__17__sort5IRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEjT0_SA_SA_SA_SA_T_(%"class.WTF::AtomicString"* %16, %"class.WTF::AtomicString"* %74, %"class.WTF::AtomicString"* %75, %"class.WTF::AtomicString"* %76, %"class.WTF::AtomicString"* %77, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  br label %397

79:                                               ; preds = %15
  %80 = icmp slt i64 %18, 56
  br i1 %80, label %81, label %82

81:                                               ; preds = %79
  tail call void @_ZNSt3__118__insertion_sort_3IRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEvT0_SA_T_(%"class.WTF::AtomicString"* %16, %"class.WTF::AtomicString"* %5, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  br label %397

82:                                               ; preds = %79
  %83 = icmp sgt i64 %18, 7992
  %84 = sdiv i64 %19, 2
  %85 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 %84
  br i1 %83, label %86, label %91

86:                                               ; preds = %82
  %87 = sdiv i64 %19, 4
  %88 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 %87
  %89 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %85, i64 %87
  %90 = tail call i32 @_ZNSt3__17__sort5IRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEjT0_SA_SA_SA_SA_T_(%"class.WTF::AtomicString"* %16, %"class.WTF::AtomicString"* %88, %"class.WTF::AtomicString"* %85, %"class.WTF::AtomicString"* %89, %"class.WTF::AtomicString"* %8, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  br label %93

91:                                               ; preds = %82
  %92 = tail call i32 @_ZNSt3__17__sort3IRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEjT0_SA_SA_T_(%"class.WTF::AtomicString"* %16, %"class.WTF::AtomicString"* %85, %"class.WTF::AtomicString"* %8, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  br label %93

93:                                               ; preds = %91, %86
  %94 = phi i32 [ %90, %86 ], [ %92, %91 ]
  %95 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %96 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 0, i32 0
  %97 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %85, i64 0, i32 0
  %98 = tail call zeroext i1 %95(%"class.WTF::String"* dereferenceable(8) %96, %"class.WTF::String"* dereferenceable(8) %97) #14
  br i1 %98, label %258, label %99

99:                                               ; preds = %93, %214
  %100 = phi %"class.WTF::AtomicString"* [ %101, %214 ], [ %8, %93 ]
  %101 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %100, i64 -1
  %102 = icmp eq %"class.WTF::AtomicString"* %16, %101
  br i1 %102, label %103, label %214

103:                                              ; preds = %99
  %104 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 1
  %105 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %106 = tail call zeroext i1 %105(%"class.WTF::String"* dereferenceable(8) %96, %"class.WTF::String"* dereferenceable(8) %9) #14
  br i1 %106, label %155, label %107

107:                                              ; preds = %103
  %108 = icmp eq %"class.WTF::AtomicString"* %104, %8
  br i1 %108, label %397, label %109

109:                                              ; preds = %107, %152
  %110 = phi %"class.WTF::AtomicString"* [ %153, %152 ], [ %104, %107 ]
  %111 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %112 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %110, i64 0, i32 0
  %113 = tail call zeroext i1 %111(%"class.WTF::String"* dereferenceable(8) %96, %"class.WTF::String"* dereferenceable(8) %112) #14
  br i1 %113, label %114, label %152

114:                                              ; preds = %109
  %115 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %110, i64 0, i32 0, i32 0, i32 0
  %116 = bitcast %"class.WTF::AtomicString"* %110 to i64*
  %117 = load i64, i64* %116, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %115, align 8
  %118 = load i64, i64* %11, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %10, align 8
  %119 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %115, align 8
  store i64 %118, i64* %116, align 8
  %120 = icmp eq %"class.WTF::StringImpl"* %119, null
  br i1 %120, label %134, label %121

121:                                              ; preds = %114
  %122 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %119, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %123 = load atomic i32, i32* %122 monotonic, align 4
  %124 = and i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %119, i64 0, i32 0
  %127 = load i32, i32* %126, align 4
  br i1 %125, label %128, label %130

128:                                              ; preds = %121
  %129 = add i32 %127, -1
  store i32 %129, i32* %126, align 4
  br label %130

130:                                              ; preds = %128, %121
  %131 = phi i32 [ %129, %128 ], [ %127, %121 ]
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %133, label %134

133:                                              ; preds = %130
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %119) #14
  br label %134

134:                                              ; preds = %133, %130, %114
  %135 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  store i64 %117, i64* %11, align 8
  %136 = icmp eq %"class.WTF::StringImpl"* %135, null
  br i1 %136, label %150, label %137

137:                                              ; preds = %134
  %138 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %135, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %139 = load atomic i32, i32* %138 monotonic, align 4
  %140 = and i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %135, i64 0, i32 0
  %143 = load i32, i32* %142, align 4
  br i1 %141, label %144, label %146

144:                                              ; preds = %137
  %145 = add i32 %143, -1
  store i32 %145, i32* %142, align 4
  br label %146

146:                                              ; preds = %144, %137
  %147 = phi i32 [ %145, %144 ], [ %143, %137 ]
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %149, label %150

149:                                              ; preds = %146
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %135) #14
  br label %150

150:                                              ; preds = %134, %146, %149
  %151 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %110, i64 1
  br label %155

152:                                              ; preds = %109
  %153 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %110, i64 1
  %154 = icmp eq %"class.WTF::AtomicString"* %153, %8
  br i1 %154, label %397, label %109

155:                                              ; preds = %150, %103
  %156 = phi %"class.WTF::AtomicString"* [ %104, %103 ], [ %151, %150 ]
  %157 = icmp eq %"class.WTF::AtomicString"* %156, %8
  br i1 %157, label %397, label %158

158:                                              ; preds = %155, %200
  %159 = phi %"class.WTF::AtomicString"* [ %166, %200 ], [ %156, %155 ]
  %160 = phi %"class.WTF::AtomicString"* [ %170, %200 ], [ %8, %155 ]
  br label %161

161:                                              ; preds = %161, %158
  %162 = phi %"class.WTF::AtomicString"* [ %159, %158 ], [ %166, %161 ]
  %163 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %164 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %162, i64 0, i32 0
  %165 = tail call zeroext i1 %163(%"class.WTF::String"* dereferenceable(8) %96, %"class.WTF::String"* dereferenceable(8) %164) #14
  %166 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %162, i64 1
  br i1 %165, label %167, label %161

167:                                              ; preds = %161, %167
  %168 = phi %"class.WTF::AtomicString"* [ %170, %167 ], [ %160, %161 ]
  %169 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %170 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %168, i64 -1
  %171 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %170, i64 0, i32 0
  %172 = tail call zeroext i1 %169(%"class.WTF::String"* dereferenceable(8) %96, %"class.WTF::String"* dereferenceable(8) %171) #14
  br i1 %172, label %167, label %173

173:                                              ; preds = %167
  %174 = icmp ult %"class.WTF::AtomicString"* %162, %170
  br i1 %174, label %175, label %15

175:                                              ; preds = %173
  %176 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %162, i64 0, i32 0, i32 0, i32 0
  %177 = bitcast %"class.WTF::AtomicString"* %162 to i64*
  %178 = load i64, i64* %177, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %176, align 8
  %179 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %170, i64 0, i32 0, i32 0, i32 0
  %180 = bitcast %"class.WTF::AtomicString"* %170 to i64*
  %181 = load i64, i64* %180, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %179, align 8
  %182 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %176, align 8
  store i64 %181, i64* %177, align 8
  %183 = icmp eq %"class.WTF::StringImpl"* %182, null
  br i1 %183, label %197, label %184

184:                                              ; preds = %175
  %185 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %182, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %186 = load atomic i32, i32* %185 monotonic, align 4
  %187 = and i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %182, i64 0, i32 0
  %190 = load i32, i32* %189, align 4
  br i1 %188, label %191, label %193

191:                                              ; preds = %184
  %192 = add i32 %190, -1
  store i32 %192, i32* %189, align 4
  br label %193

193:                                              ; preds = %191, %184
  %194 = phi i32 [ %192, %191 ], [ %190, %184 ]
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %197

196:                                              ; preds = %193
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %182) #14
  br label %197

197:                                              ; preds = %196, %193, %175
  %198 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %179, align 8
  store i64 %178, i64* %180, align 8
  %199 = icmp eq %"class.WTF::StringImpl"* %198, null
  br i1 %199, label %200, label %201

200:                                              ; preds = %197, %210, %213
  br label %158

201:                                              ; preds = %197
  %202 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %198, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %203 = load atomic i32, i32* %202 monotonic, align 4
  %204 = and i32 %203, 2
  %205 = icmp eq i32 %204, 0
  %206 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %198, i64 0, i32 0
  %207 = load i32, i32* %206, align 4
  br i1 %205, label %208, label %210

208:                                              ; preds = %201
  %209 = add i32 %207, -1
  store i32 %209, i32* %206, align 4
  br label %210

210:                                              ; preds = %208, %201
  %211 = phi i32 [ %209, %208 ], [ %207, %201 ]
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %213, label %200

213:                                              ; preds = %210
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %198) #14
  br label %200

214:                                              ; preds = %99
  %215 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %216 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %101, i64 0, i32 0
  %217 = tail call zeroext i1 %215(%"class.WTF::String"* dereferenceable(8) %216, %"class.WTF::String"* dereferenceable(8) %97) #14
  br i1 %217, label %218, label %99

218:                                              ; preds = %214
  %219 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 0, i32 0, i32 0, i32 0
  %220 = bitcast %"class.WTF::AtomicString"* %16 to i64*
  %221 = load i64, i64* %220, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %219, align 8
  %222 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %101, i64 0, i32 0, i32 0, i32 0
  %223 = bitcast %"class.WTF::AtomicString"* %101 to i64*
  %224 = load i64, i64* %223, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %222, align 8
  %225 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %219, align 8
  store i64 %224, i64* %220, align 8
  %226 = icmp eq %"class.WTF::StringImpl"* %225, null
  br i1 %226, label %240, label %227

227:                                              ; preds = %218
  %228 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %225, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %229 = load atomic i32, i32* %228 monotonic, align 4
  %230 = and i32 %229, 2
  %231 = icmp eq i32 %230, 0
  %232 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %225, i64 0, i32 0
  %233 = load i32, i32* %232, align 4
  br i1 %231, label %234, label %236

234:                                              ; preds = %227
  %235 = add i32 %233, -1
  store i32 %235, i32* %232, align 4
  br label %236

236:                                              ; preds = %234, %227
  %237 = phi i32 [ %235, %234 ], [ %233, %227 ]
  %238 = icmp eq i32 %237, 0
  br i1 %238, label %239, label %240

239:                                              ; preds = %236
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %225) #14
  br label %240

240:                                              ; preds = %239, %236, %218
  %241 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %222, align 8
  store i64 %221, i64* %223, align 8
  %242 = icmp eq %"class.WTF::StringImpl"* %241, null
  br i1 %242, label %256, label %243

243:                                              ; preds = %240
  %244 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %241, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %245 = load atomic i32, i32* %244 monotonic, align 4
  %246 = and i32 %245, 2
  %247 = icmp eq i32 %246, 0
  %248 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %241, i64 0, i32 0
  %249 = load i32, i32* %248, align 4
  br i1 %247, label %250, label %252

250:                                              ; preds = %243
  %251 = add i32 %249, -1
  store i32 %251, i32* %248, align 4
  br label %252

252:                                              ; preds = %250, %243
  %253 = phi i32 [ %251, %250 ], [ %249, %243 ]
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %255, label %256

255:                                              ; preds = %252
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %241) #14
  br label %256

256:                                              ; preds = %240, %252, %255
  %257 = add i32 %94, 1
  br label %258

258:                                              ; preds = %93, %256
  %259 = phi i32 [ %257, %256 ], [ %94, %93 ]
  %260 = phi %"class.WTF::AtomicString"* [ %101, %256 ], [ %8, %93 ]
  %261 = ptrtoint %"class.WTF::AtomicString"* %16 to i64
  %262 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %16, i64 1
  %263 = icmp ult %"class.WTF::AtomicString"* %262, %260
  br i1 %263, label %264, label %326

264:                                              ; preds = %258, %322
  %265 = phi %"class.WTF::AtomicString"* [ %325, %322 ], [ %85, %258 ]
  %266 = phi i32 [ %323, %322 ], [ %259, %258 ]
  %267 = phi %"class.WTF::AtomicString"* [ %275, %322 ], [ %262, %258 ]
  %268 = phi %"class.WTF::AtomicString"* [ %279, %322 ], [ %260, %258 ]
  %269 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %265, i64 0, i32 0
  br label %270

270:                                              ; preds = %270, %264
  %271 = phi %"class.WTF::AtomicString"* [ %267, %264 ], [ %275, %270 ]
  %272 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %273 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %271, i64 0, i32 0
  %274 = tail call zeroext i1 %272(%"class.WTF::String"* dereferenceable(8) %273, %"class.WTF::String"* dereferenceable(8) %269) #14
  %275 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %271, i64 1
  br i1 %274, label %270, label %276

276:                                              ; preds = %270, %276
  %277 = phi %"class.WTF::AtomicString"* [ %279, %276 ], [ %268, %270 ]
  %278 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %279 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %277, i64 -1
  %280 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %279, i64 0, i32 0
  %281 = tail call zeroext i1 %278(%"class.WTF::String"* dereferenceable(8) %280, %"class.WTF::String"* dereferenceable(8) %269) #14
  br i1 %281, label %282, label %276

282:                                              ; preds = %276
  %283 = icmp ugt %"class.WTF::AtomicString"* %271, %279
  br i1 %283, label %326, label %284

284:                                              ; preds = %282
  %285 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %271, i64 0, i32 0, i32 0, i32 0
  %286 = bitcast %"class.WTF::AtomicString"* %271 to i64*
  %287 = load i64, i64* %286, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %285, align 8
  %288 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %279, i64 0, i32 0, i32 0, i32 0
  %289 = bitcast %"class.WTF::AtomicString"* %279 to i64*
  %290 = load i64, i64* %289, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %288, align 8
  %291 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %285, align 8
  store i64 %290, i64* %286, align 8
  %292 = icmp eq %"class.WTF::StringImpl"* %291, null
  br i1 %292, label %306, label %293

293:                                              ; preds = %284
  %294 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %291, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %295 = load atomic i32, i32* %294 monotonic, align 4
  %296 = and i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %291, i64 0, i32 0
  %299 = load i32, i32* %298, align 4
  br i1 %297, label %300, label %302

300:                                              ; preds = %293
  %301 = add i32 %299, -1
  store i32 %301, i32* %298, align 4
  br label %302

302:                                              ; preds = %300, %293
  %303 = phi i32 [ %301, %300 ], [ %299, %293 ]
  %304 = icmp eq i32 %303, 0
  br i1 %304, label %305, label %306

305:                                              ; preds = %302
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %291) #14
  br label %306

306:                                              ; preds = %305, %302, %284
  %307 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %288, align 8
  store i64 %287, i64* %289, align 8
  %308 = icmp eq %"class.WTF::StringImpl"* %307, null
  br i1 %308, label %322, label %309

309:                                              ; preds = %306
  %310 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %307, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %311 = load atomic i32, i32* %310 monotonic, align 4
  %312 = and i32 %311, 2
  %313 = icmp eq i32 %312, 0
  %314 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %307, i64 0, i32 0
  %315 = load i32, i32* %314, align 4
  br i1 %313, label %316, label %318

316:                                              ; preds = %309
  %317 = add i32 %315, -1
  store i32 %317, i32* %314, align 4
  br label %318

318:                                              ; preds = %316, %309
  %319 = phi i32 [ %317, %316 ], [ %315, %309 ]
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %321, label %322

321:                                              ; preds = %318
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %307) #14
  br label %322

322:                                              ; preds = %306, %318, %321
  %323 = add i32 %266, 1
  %324 = icmp eq %"class.WTF::AtomicString"* %265, %271
  %325 = select i1 %324, %"class.WTF::AtomicString"* %279, %"class.WTF::AtomicString"* %265
  br label %264

326:                                              ; preds = %282, %258
  %327 = phi %"class.WTF::AtomicString"* [ %85, %258 ], [ %265, %282 ]
  %328 = phi i32 [ %259, %258 ], [ %266, %282 ]
  %329 = phi %"class.WTF::AtomicString"* [ %262, %258 ], [ %271, %282 ]
  %330 = icmp eq %"class.WTF::AtomicString"* %329, %327
  br i1 %330, label %376, label %331

331:                                              ; preds = %326
  %332 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %333 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %327, i64 0, i32 0
  %334 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %329, i64 0, i32 0
  %335 = tail call zeroext i1 %332(%"class.WTF::String"* dereferenceable(8) %333, %"class.WTF::String"* dereferenceable(8) %334) #14
  br i1 %335, label %336, label %376

336:                                              ; preds = %331
  %337 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %329, i64 0, i32 0, i32 0, i32 0
  %338 = bitcast %"class.WTF::AtomicString"* %329 to i64*
  %339 = load i64, i64* %338, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %337, align 8
  %340 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %327, i64 0, i32 0, i32 0, i32 0
  %341 = bitcast %"class.WTF::AtomicString"* %327 to i64*
  %342 = load i64, i64* %341, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %340, align 8
  %343 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %337, align 8
  store i64 %342, i64* %338, align 8
  %344 = icmp eq %"class.WTF::StringImpl"* %343, null
  br i1 %344, label %358, label %345

345:                                              ; preds = %336
  %346 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %343, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %347 = load atomic i32, i32* %346 monotonic, align 4
  %348 = and i32 %347, 2
  %349 = icmp eq i32 %348, 0
  %350 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %343, i64 0, i32 0
  %351 = load i32, i32* %350, align 4
  br i1 %349, label %352, label %354

352:                                              ; preds = %345
  %353 = add i32 %351, -1
  store i32 %353, i32* %350, align 4
  br label %354

354:                                              ; preds = %352, %345
  %355 = phi i32 [ %353, %352 ], [ %351, %345 ]
  %356 = icmp eq i32 %355, 0
  br i1 %356, label %357, label %358

357:                                              ; preds = %354
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %343) #14
  br label %358

358:                                              ; preds = %357, %354, %336
  %359 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %340, align 8
  store i64 %339, i64* %341, align 8
  %360 = icmp eq %"class.WTF::StringImpl"* %359, null
  br i1 %360, label %374, label %361

361:                                              ; preds = %358
  %362 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %359, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %363 = load atomic i32, i32* %362 monotonic, align 4
  %364 = and i32 %363, 2
  %365 = icmp eq i32 %364, 0
  %366 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %359, i64 0, i32 0
  %367 = load i32, i32* %366, align 4
  br i1 %365, label %368, label %370

368:                                              ; preds = %361
  %369 = add i32 %367, -1
  store i32 %369, i32* %366, align 4
  br label %370

370:                                              ; preds = %368, %361
  %371 = phi i32 [ %369, %368 ], [ %367, %361 ]
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %373, label %374

373:                                              ; preds = %370
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %359) #14
  br label %374

374:                                              ; preds = %358, %370, %373
  %375 = add i32 %328, 1
  br label %376

376:                                              ; preds = %326, %374, %331
  %377 = phi i32 [ %375, %374 ], [ %328, %331 ], [ %328, %326 ]
  %378 = icmp eq i32 %377, 0
  br i1 %378, label %379, label %386

379:                                              ; preds = %376
  %380 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEbT0_SA_T_(%"class.WTF::AtomicString"* %16, %"class.WTF::AtomicString"* %329, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  %381 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %329, i64 1
  %382 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEbT0_SA_T_(%"class.WTF::AtomicString"* %381, %"class.WTF::AtomicString"* %5, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  br i1 %382, label %383, label %385

383:                                              ; preds = %379
  br i1 %380, label %397, label %384

384:                                              ; preds = %383, %395
  br label %4

385:                                              ; preds = %379
  br i1 %380, label %393, label %386

386:                                              ; preds = %385, %376
  %387 = ptrtoint %"class.WTF::AtomicString"* %329 to i64
  %388 = sub i64 %387, %261
  %389 = sub i64 %12, %387
  %390 = icmp slt i64 %388, %389
  br i1 %390, label %391, label %395

391:                                              ; preds = %386
  tail call void @_ZNSt3__16__sortIRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEvT0_SA_T_(%"class.WTF::AtomicString"* %16, %"class.WTF::AtomicString"* %329, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  %392 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %329, i64 1
  br label %393

393:                                              ; preds = %391, %385
  %394 = phi %"class.WTF::AtomicString"* [ %381, %385 ], [ %392, %391 ]
  br label %13

395:                                              ; preds = %386
  %396 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %329, i64 1
  tail call void @_ZNSt3__16__sortIRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEvT0_SA_T_(%"class.WTF::AtomicString"* %396, %"class.WTF::AtomicString"* %5, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  br label %384

397:                                              ; preds = %383, %155, %15, %15, %107, %152, %63, %60, %48, %20, %64, %68, %73, %81
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort3IRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEjT0_SA_SA_T_(%"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %5 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %3, align 8
  %6 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0
  %7 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 0, i32 0
  %8 = tail call zeroext i1 %5(%"class.WTF::String"* dereferenceable(8) %6, %"class.WTF::String"* dereferenceable(8) %7) #14
  %9 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %3, align 8
  %10 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0
  %11 = tail call zeroext i1 %9(%"class.WTF::String"* dereferenceable(8) %10, %"class.WTF::String"* dereferenceable(8) %6) #14
  br i1 %8, label %90, label %12

12:                                               ; preds = %4
  br i1 %11, label %13, label %203

13:                                               ; preds = %12
  %14 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.WTF::AtomicString"* %1 to i64*
  %16 = load i64, i64* %15, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %14, align 8
  %17 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %18 = bitcast %"class.WTF::AtomicString"* %2 to i64*
  %19 = load i64, i64* %18, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %17, align 8
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  store i64 %19, i64* %15, align 8
  %21 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %13
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = and i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  br i1 %26, label %29, label %31

29:                                               ; preds = %22
  %30 = add i32 %28, -1
  store i32 %30, i32* %27, align 4
  br label %31

31:                                               ; preds = %29, %22
  %32 = phi i32 [ %30, %29 ], [ %28, %22 ]
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %20) #14
  br label %35

35:                                               ; preds = %34, %31, %13
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  store i64 %16, i64* %18, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %36, null
  br i1 %37, label %51, label %38

38:                                               ; preds = %35
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 0
  %44 = load i32, i32* %43, align 4
  br i1 %42, label %45, label %47

45:                                               ; preds = %38
  %46 = add i32 %44, -1
  store i32 %46, i32* %43, align 4
  br label %47

47:                                               ; preds = %45, %38
  %48 = phi i32 [ %46, %45 ], [ %44, %38 ]
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %47
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %36) #14
  br label %51

51:                                               ; preds = %35, %47, %50
  %52 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %3, align 8
  %53 = tail call zeroext i1 %52(%"class.WTF::String"* dereferenceable(8) %6, %"class.WTF::String"* dereferenceable(8) %7) #14
  br i1 %53, label %54, label %203

54:                                               ; preds = %51
  %55 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 0, i32 0, i32 0, i32 0
  %56 = bitcast %"class.WTF::AtomicString"* %0 to i64*
  %57 = load i64, i64* %56, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %55, align 8
  %58 = load i64, i64* %15, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %14, align 8
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %55, align 8
  store i64 %58, i64* %56, align 8
  %60 = icmp eq %"class.WTF::StringImpl"* %59, null
  br i1 %60, label %74, label %61

61:                                               ; preds = %54
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = load atomic i32, i32* %62 monotonic, align 4
  %64 = and i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %67 = load i32, i32* %66, align 4
  br i1 %65, label %68, label %70

68:                                               ; preds = %61
  %69 = add i32 %67, -1
  store i32 %69, i32* %66, align 4
  br label %70

70:                                               ; preds = %68, %61
  %71 = phi i32 [ %69, %68 ], [ %67, %61 ]
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %74

73:                                               ; preds = %70
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %59) #14
  br label %74

74:                                               ; preds = %73, %70, %54
  %75 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  store i64 %57, i64* %15, align 8
  %76 = icmp eq %"class.WTF::StringImpl"* %75, null
  br i1 %76, label %203, label %77

77:                                               ; preds = %74
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = load atomic i32, i32* %78 monotonic, align 4
  %80 = and i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 0
  %83 = load i32, i32* %82, align 4
  br i1 %81, label %84, label %86

84:                                               ; preds = %77
  %85 = add i32 %83, -1
  store i32 %85, i32* %82, align 4
  br label %86

86:                                               ; preds = %84, %77
  %87 = phi i32 [ %85, %84 ], [ %83, %77 ]
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %203

89:                                               ; preds = %86
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %75) #14
  br label %203

90:                                               ; preds = %4
  %91 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 0, i32 0, i32 0, i32 0
  %92 = bitcast %"class.WTF::AtomicString"* %0 to i64*
  %93 = load i64, i64* %92, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %91, align 8
  br i1 %11, label %94, label %129

94:                                               ; preds = %90
  %95 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %96 = bitcast %"class.WTF::AtomicString"* %2 to i64*
  %97 = load i64, i64* %96, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %95, align 8
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %91, align 8
  store i64 %97, i64* %92, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %113, label %100

100:                                              ; preds = %94
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  br i1 %104, label %107, label %109

107:                                              ; preds = %100
  %108 = add i32 %106, -1
  store i32 %108, i32* %105, align 4
  br label %109

109:                                              ; preds = %107, %100
  %110 = phi i32 [ %108, %107 ], [ %106, %100 ]
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %98) #14
  br label %113

113:                                              ; preds = %112, %109, %94
  %114 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %95, align 8
  store i64 %93, i64* %96, align 8
  %115 = icmp eq %"class.WTF::StringImpl"* %114, null
  br i1 %115, label %203, label %116

116:                                              ; preds = %113
  %117 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %114, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %118 = load atomic i32, i32* %117 monotonic, align 4
  %119 = and i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %114, i64 0, i32 0
  %122 = load i32, i32* %121, align 4
  br i1 %120, label %123, label %125

123:                                              ; preds = %116
  %124 = add i32 %122, -1
  store i32 %124, i32* %121, align 4
  br label %125

125:                                              ; preds = %123, %116
  %126 = phi i32 [ %124, %123 ], [ %122, %116 ]
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %203

128:                                              ; preds = %125
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %114) #14
  br label %203

129:                                              ; preds = %90
  %130 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %131 = bitcast %"class.WTF::AtomicString"* %1 to i64*
  %132 = load i64, i64* %131, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %130, align 8
  %133 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %91, align 8
  store i64 %132, i64* %92, align 8
  %134 = icmp eq %"class.WTF::StringImpl"* %133, null
  br i1 %134, label %148, label %135

135:                                              ; preds = %129
  %136 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %133, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %137 = load atomic i32, i32* %136 monotonic, align 4
  %138 = and i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %133, i64 0, i32 0
  %141 = load i32, i32* %140, align 4
  br i1 %139, label %142, label %144

142:                                              ; preds = %135
  %143 = add i32 %141, -1
  store i32 %143, i32* %140, align 4
  br label %144

144:                                              ; preds = %142, %135
  %145 = phi i32 [ %143, %142 ], [ %141, %135 ]
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %148

147:                                              ; preds = %144
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %133) #14
  br label %148

148:                                              ; preds = %147, %144, %129
  %149 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %130, align 8
  store i64 %93, i64* %131, align 8
  %150 = icmp eq %"class.WTF::StringImpl"* %149, null
  br i1 %150, label %164, label %151

151:                                              ; preds = %148
  %152 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %149, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %153 = load atomic i32, i32* %152 monotonic, align 4
  %154 = and i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %149, i64 0, i32 0
  %157 = load i32, i32* %156, align 4
  br i1 %155, label %158, label %160

158:                                              ; preds = %151
  %159 = add i32 %157, -1
  store i32 %159, i32* %156, align 4
  br label %160

160:                                              ; preds = %158, %151
  %161 = phi i32 [ %159, %158 ], [ %157, %151 ]
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %164

163:                                              ; preds = %160
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %149) #14
  br label %164

164:                                              ; preds = %148, %160, %163
  %165 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %3, align 8
  %166 = tail call zeroext i1 %165(%"class.WTF::String"* dereferenceable(8) %10, %"class.WTF::String"* dereferenceable(8) %6) #14
  br i1 %166, label %167, label %203

167:                                              ; preds = %164
  %168 = load i64, i64* %131, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %130, align 8
  %169 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %170 = bitcast %"class.WTF::AtomicString"* %2 to i64*
  %171 = load i64, i64* %170, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %169, align 8
  %172 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %130, align 8
  store i64 %171, i64* %131, align 8
  %173 = icmp eq %"class.WTF::StringImpl"* %172, null
  br i1 %173, label %187, label %174

174:                                              ; preds = %167
  %175 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %172, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %176 = load atomic i32, i32* %175 monotonic, align 4
  %177 = and i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %172, i64 0, i32 0
  %180 = load i32, i32* %179, align 4
  br i1 %178, label %181, label %183

181:                                              ; preds = %174
  %182 = add i32 %180, -1
  store i32 %182, i32* %179, align 4
  br label %183

183:                                              ; preds = %181, %174
  %184 = phi i32 [ %182, %181 ], [ %180, %174 ]
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %186, label %187

186:                                              ; preds = %183
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %172) #14
  br label %187

187:                                              ; preds = %186, %183, %167
  %188 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %169, align 8
  store i64 %168, i64* %170, align 8
  %189 = icmp eq %"class.WTF::StringImpl"* %188, null
  br i1 %189, label %203, label %190

190:                                              ; preds = %187
  %191 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %188, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %192 = load atomic i32, i32* %191 monotonic, align 4
  %193 = and i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %188, i64 0, i32 0
  %196 = load i32, i32* %195, align 4
  br i1 %194, label %197, label %199

197:                                              ; preds = %190
  %198 = add i32 %196, -1
  store i32 %198, i32* %195, align 4
  br label %199

199:                                              ; preds = %197, %190
  %200 = phi i32 [ %198, %197 ], [ %196, %190 ]
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %202, label %203

202:                                              ; preds = %199
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %188) #14
  br label %203

203:                                              ; preds = %202, %199, %187, %128, %125, %113, %89, %86, %74, %164, %51, %12
  %204 = phi i32 [ 0, %12 ], [ 1, %51 ], [ 1, %164 ], [ 2, %74 ], [ 2, %86 ], [ 2, %89 ], [ 1, %113 ], [ 1, %125 ], [ 1, %128 ], [ 2, %187 ], [ 2, %199 ], [ 2, %202 ]
  ret i32 %204
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort4IRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEjT0_SA_SA_SA_T_(%"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %6 = tail call i32 @_ZNSt3__17__sort3IRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEjT0_SA_SA_T_(%"class.WTF::AtomicString"* %0, %"class.WTF::AtomicString"* %1, %"class.WTF::AtomicString"* %2, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %4)
  %7 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %4, align 8
  %8 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %3, i64 0, i32 0
  %9 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0
  %10 = tail call zeroext i1 %7(%"class.WTF::String"* dereferenceable(8) %8, %"class.WTF::String"* dereferenceable(8) %9) #14
  br i1 %10, label %11, label %133

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %13 = bitcast %"class.WTF::AtomicString"* %2 to i64*
  %14 = load i64, i64* %13, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %12, align 8
  %15 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %3, i64 0, i32 0, i32 0, i32 0
  %16 = bitcast %"class.WTF::AtomicString"* %3 to i64*
  %17 = load i64, i64* %16, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %15, align 8
  %18 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  store i64 %17, i64* %13, align 8
  %19 = icmp eq %"class.WTF::StringImpl"* %18, null
  br i1 %19, label %33, label %20

20:                                               ; preds = %11
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 0
  %26 = load i32, i32* %25, align 4
  br i1 %24, label %27, label %29

27:                                               ; preds = %20
  %28 = add i32 %26, -1
  store i32 %28, i32* %25, align 4
  br label %29

29:                                               ; preds = %27, %20
  %30 = phi i32 [ %28, %27 ], [ %26, %20 ]
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %29
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %18) #14
  br label %33

33:                                               ; preds = %32, %29, %11
  %34 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  store i64 %14, i64* %16, align 8
  %35 = icmp eq %"class.WTF::StringImpl"* %34, null
  br i1 %35, label %49, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load atomic i32, i32* %37 monotonic, align 4
  %39 = and i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %34, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  br i1 %40, label %43, label %45

43:                                               ; preds = %36
  %44 = add i32 %42, -1
  store i32 %44, i32* %41, align 4
  br label %45

45:                                               ; preds = %43, %36
  %46 = phi i32 [ %44, %43 ], [ %42, %36 ]
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %45
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %34) #14
  br label %49

49:                                               ; preds = %33, %45, %48
  %50 = add i32 %6, 1
  %51 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %4, align 8
  %52 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0
  %53 = tail call zeroext i1 %51(%"class.WTF::String"* dereferenceable(8) %9, %"class.WTF::String"* dereferenceable(8) %52) #14
  br i1 %53, label %54, label %133

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %56 = bitcast %"class.WTF::AtomicString"* %1 to i64*
  %57 = load i64, i64* %56, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %55, align 8
  %58 = load i64, i64* %13, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %12, align 8
  %59 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %55, align 8
  store i64 %58, i64* %56, align 8
  %60 = icmp eq %"class.WTF::StringImpl"* %59, null
  br i1 %60, label %74, label %61

61:                                               ; preds = %54
  %62 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = load atomic i32, i32* %62 monotonic, align 4
  %64 = and i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %67 = load i32, i32* %66, align 4
  br i1 %65, label %68, label %70

68:                                               ; preds = %61
  %69 = add i32 %67, -1
  store i32 %69, i32* %66, align 4
  br label %70

70:                                               ; preds = %68, %61
  %71 = phi i32 [ %69, %68 ], [ %67, %61 ]
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %74

73:                                               ; preds = %70
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %59) #14
  br label %74

74:                                               ; preds = %73, %70, %54
  %75 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  store i64 %57, i64* %13, align 8
  %76 = icmp eq %"class.WTF::StringImpl"* %75, null
  br i1 %76, label %90, label %77

77:                                               ; preds = %74
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = load atomic i32, i32* %78 monotonic, align 4
  %80 = and i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 0
  %83 = load i32, i32* %82, align 4
  br i1 %81, label %84, label %86

84:                                               ; preds = %77
  %85 = add i32 %83, -1
  store i32 %85, i32* %82, align 4
  br label %86

86:                                               ; preds = %84, %77
  %87 = phi i32 [ %85, %84 ], [ %83, %77 ]
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %90

89:                                               ; preds = %86
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %75) #14
  br label %90

90:                                               ; preds = %74, %86, %89
  %91 = add i32 %6, 2
  %92 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %4, align 8
  %93 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 0, i32 0
  %94 = tail call zeroext i1 %92(%"class.WTF::String"* dereferenceable(8) %52, %"class.WTF::String"* dereferenceable(8) %93) #14
  br i1 %94, label %95, label %133

95:                                               ; preds = %90
  %96 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 0, i32 0, i32 0, i32 0
  %97 = bitcast %"class.WTF::AtomicString"* %0 to i64*
  %98 = load i64, i64* %97, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %96, align 8
  %99 = load i64, i64* %56, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %55, align 8
  %100 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %96, align 8
  store i64 %99, i64* %97, align 8
  %101 = icmp eq %"class.WTF::StringImpl"* %100, null
  br i1 %101, label %115, label %102

102:                                              ; preds = %95
  %103 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %104 = load atomic i32, i32* %103 monotonic, align 4
  %105 = and i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 0
  %108 = load i32, i32* %107, align 4
  br i1 %106, label %109, label %111

109:                                              ; preds = %102
  %110 = add i32 %108, -1
  store i32 %110, i32* %107, align 4
  br label %111

111:                                              ; preds = %109, %102
  %112 = phi i32 [ %110, %109 ], [ %108, %102 ]
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %115

114:                                              ; preds = %111
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %100) #14
  br label %115

115:                                              ; preds = %114, %111, %95
  %116 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %55, align 8
  store i64 %98, i64* %56, align 8
  %117 = icmp eq %"class.WTF::StringImpl"* %116, null
  br i1 %117, label %131, label %118

118:                                              ; preds = %115
  %119 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %116, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %120 = load atomic i32, i32* %119 monotonic, align 4
  %121 = and i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %116, i64 0, i32 0
  %124 = load i32, i32* %123, align 4
  br i1 %122, label %125, label %127

125:                                              ; preds = %118
  %126 = add i32 %124, -1
  store i32 %126, i32* %123, align 4
  br label %127

127:                                              ; preds = %125, %118
  %128 = phi i32 [ %126, %125 ], [ %124, %118 ]
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %131

130:                                              ; preds = %127
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %116) #14
  br label %131

131:                                              ; preds = %115, %127, %130
  %132 = add i32 %6, 3
  br label %133

133:                                              ; preds = %49, %131, %90, %5
  %134 = phi i32 [ %132, %131 ], [ %91, %90 ], [ %50, %49 ], [ %6, %5 ]
  ret i32 %134
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort5IRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEjT0_SA_SA_SA_SA_T_(%"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %7 = tail call i32 @_ZNSt3__17__sort4IRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEjT0_SA_SA_SA_T_(%"class.WTF::AtomicString"* %0, %"class.WTF::AtomicString"* %1, %"class.WTF::AtomicString"* %2, %"class.WTF::AtomicString"* %3, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %5)
  %8 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %5, align 8
  %9 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0
  %10 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %3, i64 0, i32 0
  %11 = tail call zeroext i1 %8(%"class.WTF::String"* dereferenceable(8) %9, %"class.WTF::String"* dereferenceable(8) %10) #14
  br i1 %11, label %12, label %175

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %3, i64 0, i32 0, i32 0, i32 0
  %14 = bitcast %"class.WTF::AtomicString"* %3 to i64*
  %15 = load i64, i64* %14, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %13, align 8
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0, i32 0, i32 0
  %17 = bitcast %"class.WTF::AtomicString"* %4 to i64*
  %18 = load i64, i64* %17, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %16, align 8
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  store i64 %18, i64* %14, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %34, label %21

21:                                               ; preds = %12
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %23 = load atomic i32, i32* %22 monotonic, align 4
  %24 = and i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  br i1 %25, label %28, label %30

28:                                               ; preds = %21
  %29 = add i32 %27, -1
  store i32 %29, i32* %26, align 4
  br label %30

30:                                               ; preds = %28, %21
  %31 = phi i32 [ %29, %28 ], [ %27, %21 ]
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %30
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %19) #14
  br label %34

34:                                               ; preds = %33, %30, %12
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  store i64 %15, i64* %17, align 8
  %36 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %36, label %50, label %37

37:                                               ; preds = %34
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load atomic i32, i32* %38 monotonic, align 4
  %40 = and i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %43 = load i32, i32* %42, align 4
  br i1 %41, label %44, label %46

44:                                               ; preds = %37
  %45 = add i32 %43, -1
  store i32 %45, i32* %42, align 4
  br label %46

46:                                               ; preds = %44, %37
  %47 = phi i32 [ %45, %44 ], [ %43, %37 ]
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %50

49:                                               ; preds = %46
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %35) #14
  br label %50

50:                                               ; preds = %34, %46, %49
  %51 = add i32 %7, 1
  %52 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %5, align 8
  %53 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0
  %54 = tail call zeroext i1 %52(%"class.WTF::String"* dereferenceable(8) %10, %"class.WTF::String"* dereferenceable(8) %53) #14
  br i1 %54, label %55, label %175

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %57 = bitcast %"class.WTF::AtomicString"* %2 to i64*
  %58 = load i64, i64* %57, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %56, align 8
  %59 = load i64, i64* %14, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %13, align 8
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %56, align 8
  store i64 %59, i64* %57, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %75, label %62

62:                                               ; preds = %55
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = and i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %68 = load i32, i32* %67, align 4
  br i1 %66, label %69, label %71

69:                                               ; preds = %62
  %70 = add i32 %68, -1
  store i32 %70, i32* %67, align 4
  br label %71

71:                                               ; preds = %69, %62
  %72 = phi i32 [ %70, %69 ], [ %68, %62 ]
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %71
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %60) #14
  br label %75

75:                                               ; preds = %74, %71, %55
  %76 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  store i64 %58, i64* %14, align 8
  %77 = icmp eq %"class.WTF::StringImpl"* %76, null
  br i1 %77, label %91, label %78

78:                                               ; preds = %75
  %79 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %76, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = load atomic i32, i32* %79 monotonic, align 4
  %81 = and i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %76, i64 0, i32 0
  %84 = load i32, i32* %83, align 4
  br i1 %82, label %85, label %87

85:                                               ; preds = %78
  %86 = add i32 %84, -1
  store i32 %86, i32* %83, align 4
  br label %87

87:                                               ; preds = %85, %78
  %88 = phi i32 [ %86, %85 ], [ %84, %78 ]
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %91

90:                                               ; preds = %87
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %76) #14
  br label %91

91:                                               ; preds = %75, %87, %90
  %92 = add i32 %7, 2
  %93 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %5, align 8
  %94 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0
  %95 = tail call zeroext i1 %93(%"class.WTF::String"* dereferenceable(8) %53, %"class.WTF::String"* dereferenceable(8) %94) #14
  br i1 %95, label %96, label %175

96:                                               ; preds = %91
  %97 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %98 = bitcast %"class.WTF::AtomicString"* %1 to i64*
  %99 = load i64, i64* %98, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %97, align 8
  %100 = load i64, i64* %57, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %56, align 8
  %101 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  store i64 %100, i64* %98, align 8
  %102 = icmp eq %"class.WTF::StringImpl"* %101, null
  br i1 %102, label %116, label %103

103:                                              ; preds = %96
  %104 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %101, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %105 = load atomic i32, i32* %104 monotonic, align 4
  %106 = and i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %101, i64 0, i32 0
  %109 = load i32, i32* %108, align 4
  br i1 %107, label %110, label %112

110:                                              ; preds = %103
  %111 = add i32 %109, -1
  store i32 %111, i32* %108, align 4
  br label %112

112:                                              ; preds = %110, %103
  %113 = phi i32 [ %111, %110 ], [ %109, %103 ]
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %116

115:                                              ; preds = %112
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %101) #14
  br label %116

116:                                              ; preds = %115, %112, %96
  %117 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %56, align 8
  store i64 %99, i64* %57, align 8
  %118 = icmp eq %"class.WTF::StringImpl"* %117, null
  br i1 %118, label %132, label %119

119:                                              ; preds = %116
  %120 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %117, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %121 = load atomic i32, i32* %120 monotonic, align 4
  %122 = and i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %117, i64 0, i32 0
  %125 = load i32, i32* %124, align 4
  br i1 %123, label %126, label %128

126:                                              ; preds = %119
  %127 = add i32 %125, -1
  store i32 %127, i32* %124, align 4
  br label %128

128:                                              ; preds = %126, %119
  %129 = phi i32 [ %127, %126 ], [ %125, %119 ]
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %132

131:                                              ; preds = %128
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %117) #14
  br label %132

132:                                              ; preds = %116, %128, %131
  %133 = add i32 %7, 3
  %134 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %5, align 8
  %135 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 0, i32 0
  %136 = tail call zeroext i1 %134(%"class.WTF::String"* dereferenceable(8) %94, %"class.WTF::String"* dereferenceable(8) %135) #14
  br i1 %136, label %137, label %175

137:                                              ; preds = %132
  %138 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 0, i32 0, i32 0, i32 0
  %139 = bitcast %"class.WTF::AtomicString"* %0 to i64*
  %140 = load i64, i64* %139, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %138, align 8
  %141 = load i64, i64* %98, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %97, align 8
  %142 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %138, align 8
  store i64 %141, i64* %139, align 8
  %143 = icmp eq %"class.WTF::StringImpl"* %142, null
  br i1 %143, label %157, label %144

144:                                              ; preds = %137
  %145 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %142, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %146 = load atomic i32, i32* %145 monotonic, align 4
  %147 = and i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %142, i64 0, i32 0
  %150 = load i32, i32* %149, align 4
  br i1 %148, label %151, label %153

151:                                              ; preds = %144
  %152 = add i32 %150, -1
  store i32 %152, i32* %149, align 4
  br label %153

153:                                              ; preds = %151, %144
  %154 = phi i32 [ %152, %151 ], [ %150, %144 ]
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %157

156:                                              ; preds = %153
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %142) #14
  br label %157

157:                                              ; preds = %156, %153, %137
  %158 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  store i64 %140, i64* %98, align 8
  %159 = icmp eq %"class.WTF::StringImpl"* %158, null
  br i1 %159, label %173, label %160

160:                                              ; preds = %157
  %161 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %158, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %162 = load atomic i32, i32* %161 monotonic, align 4
  %163 = and i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %158, i64 0, i32 0
  %166 = load i32, i32* %165, align 4
  br i1 %164, label %167, label %169

167:                                              ; preds = %160
  %168 = add i32 %166, -1
  store i32 %168, i32* %165, align 4
  br label %169

169:                                              ; preds = %167, %160
  %170 = phi i32 [ %168, %167 ], [ %166, %160 ]
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %173

172:                                              ; preds = %169
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %158) #14
  br label %173

173:                                              ; preds = %157, %169, %172
  %174 = add i32 %7, 4
  br label %175

175:                                              ; preds = %50, %132, %173, %91, %6
  %176 = phi i32 [ %174, %173 ], [ %133, %132 ], [ %92, %91 ], [ %51, %50 ], [ %7, %6 ]
  ret i32 %176
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__118__insertion_sort_3IRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEvT0_SA_T_(%"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.WTF::AtomicString", align 8
  %5 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 2
  %6 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 1
  %7 = tail call i32 @_ZNSt3__17__sort3IRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEjT0_SA_SA_T_(%"class.WTF::AtomicString"* %0, %"class.WTF::AtomicString"* %6, %"class.WTF::AtomicString"* %5, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  %8 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 3
  %9 = icmp eq %"class.WTF::AtomicString"* %8, %1
  br i1 %9, label %15, label %10

10:                                               ; preds = %3
  %11 = bitcast %"class.WTF::AtomicString"* %4 to i8*
  %12 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0, i32 0, i32 0
  %13 = bitcast %"class.WTF::AtomicString"* %4 to i64*
  %14 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0
  br label %16

15:                                               ; preds = %94, %3
  ret void

16:                                               ; preds = %10, %94
  %17 = phi %"class.WTF::AtomicString"* [ %8, %10 ], [ %95, %94 ]
  %18 = phi %"class.WTF::AtomicString"* [ %5, %10 ], [ %17, %94 ]
  %19 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %20 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %17, i64 0, i32 0
  %21 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %18, i64 0, i32 0
  %22 = call zeroext i1 %19(%"class.WTF::String"* dereferenceable(8) %20, %"class.WTF::String"* dereferenceable(8) %21) #14
  br i1 %22, label %23, label %94

23:                                               ; preds = %16
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #14
  %24 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %17, i64 0, i32 0, i32 0, i32 0
  %25 = bitcast %"class.WTF::AtomicString"* %17 to i64*
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* %13, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %24, align 8
  br label %27

27:                                               ; preds = %52, %23
  %28 = phi %"class.WTF::AtomicString"* [ %17, %23 ], [ %29, %52 ]
  %29 = phi %"class.WTF::AtomicString"* [ %18, %23 ], [ %54, %52 ]
  %30 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %29, i64 0, i32 0, i32 0, i32 0
  %31 = bitcast %"class.WTF::AtomicString"* %29 to i64*
  %32 = load i64, i64* %31, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %30, align 8
  %33 = bitcast %"class.WTF::AtomicString"* %28 to i64*
  %34 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %28, i64 0, i32 0, i32 0, i32 0
  %35 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %34, align 8
  store i64 %32, i64* %33, align 8
  %36 = icmp eq %"class.WTF::StringImpl"* %35, null
  br i1 %36, label %50, label %37

37:                                               ; preds = %27
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load atomic i32, i32* %38 monotonic, align 4
  %40 = and i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %35, i64 0, i32 0
  %43 = load i32, i32* %42, align 4
  br i1 %41, label %44, label %46

44:                                               ; preds = %37
  %45 = add i32 %43, -1
  store i32 %45, i32* %42, align 4
  br label %46

46:                                               ; preds = %44, %37
  %47 = phi i32 [ %45, %44 ], [ %43, %37 ]
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %50

49:                                               ; preds = %46
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %35) #14
  br label %50

50:                                               ; preds = %27, %46, %49
  %51 = icmp eq %"class.WTF::AtomicString"* %29, %0
  br i1 %51, label %57, label %52

52:                                               ; preds = %50
  %53 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %54 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %29, i64 -1
  %55 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %54, i64 0, i32 0
  %56 = call zeroext i1 %53(%"class.WTF::String"* nonnull dereferenceable(8) %14, %"class.WTF::String"* dereferenceable(8) %55) #14
  br i1 %56, label %27, label %57

57:                                               ; preds = %50, %52
  %58 = phi %"class.WTF::AtomicString"* [ %29, %52 ], [ %0, %50 ]
  %59 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %58, i64 0, i32 0, i32 0, i32 0
  %60 = bitcast %"class.WTF::AtomicString"* %58 to i64*
  %61 = load i64, i64* %13, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %12, align 8
  %62 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  store i64 %61, i64* %60, align 8
  %63 = icmp eq %"class.WTF::StringImpl"* %62, null
  br i1 %63, label %77, label %64

64:                                               ; preds = %57
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = load atomic i32, i32* %65 monotonic, align 4
  %67 = and i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  br i1 %68, label %71, label %73

71:                                               ; preds = %64
  %72 = add i32 %70, -1
  store i32 %72, i32* %69, align 4
  br label %73

73:                                               ; preds = %71, %64
  %74 = phi i32 [ %72, %71 ], [ %70, %64 ]
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %77

76:                                               ; preds = %73
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %62) #14
  br label %77

77:                                               ; preds = %57, %73, %76
  %78 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %79 = icmp eq %"class.WTF::StringImpl"* %78, null
  br i1 %79, label %93, label %80

80:                                               ; preds = %77
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load atomic i32, i32* %81 monotonic, align 4
  %83 = and i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %86 = load i32, i32* %85, align 4
  br i1 %84, label %87, label %89

87:                                               ; preds = %80
  %88 = add i32 %86, -1
  store i32 %88, i32* %85, align 4
  br label %89

89:                                               ; preds = %87, %80
  %90 = phi i32 [ %88, %87 ], [ %86, %80 ]
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %78) #14
  br label %93

93:                                               ; preds = %77, %89, %92
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #14
  br label %94

94:                                               ; preds = %93, %16
  %95 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %17, i64 1
  %96 = icmp eq %"class.WTF::AtomicString"* %95, %1
  br i1 %96, label %15, label %16
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEbT0_SA_T_(%"class.WTF::AtomicString"*, %"class.WTF::AtomicString"*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.WTF::AtomicString", align 8
  %5 = ptrtoint %"class.WTF::AtomicString"* %1 to i64
  %6 = ptrtoint %"class.WTF::AtomicString"* %0 to i64
  %7 = sub i64 %5, %6
  %8 = ashr exact i64 %7, 3
  switch i64 %8, label %68 [
    i64 0, label %167
    i64 1, label %167
    i64 2, label %9
    i64 3, label %53
    i64 4, label %57
    i64 5, label %62
  ]

9:                                                ; preds = %3
  %10 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %11 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 -1
  %12 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %11, i64 0, i32 0
  %13 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 0, i32 0
  %14 = tail call zeroext i1 %10(%"class.WTF::String"* dereferenceable(8) %12, %"class.WTF::String"* dereferenceable(8) %13) #14
  br i1 %14, label %15, label %167

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 0, i32 0, i32 0, i32 0
  %17 = bitcast %"class.WTF::AtomicString"* %0 to i64*
  %18 = load i64, i64* %17, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %16, align 8
  %19 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %11, i64 0, i32 0, i32 0, i32 0
  %20 = bitcast %"class.WTF::AtomicString"* %11 to i64*
  %21 = load i64, i64* %20, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %19, align 8
  %22 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  store i64 %21, i64* %17, align 8
  %23 = icmp eq %"class.WTF::StringImpl"* %22, null
  br i1 %23, label %37, label %24

24:                                               ; preds = %15
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %22, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load atomic i32, i32* %25 monotonic, align 4
  %27 = and i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %22, i64 0, i32 0
  %30 = load i32, i32* %29, align 4
  br i1 %28, label %31, label %33

31:                                               ; preds = %24
  %32 = add i32 %30, -1
  store i32 %32, i32* %29, align 4
  br label %33

33:                                               ; preds = %31, %24
  %34 = phi i32 [ %32, %31 ], [ %30, %24 ]
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %33
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %22) #14
  br label %37

37:                                               ; preds = %36, %33, %15
  %38 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  store i64 %18, i64* %20, align 8
  %39 = icmp eq %"class.WTF::StringImpl"* %38, null
  br i1 %39, label %167, label %40

40:                                               ; preds = %37
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load atomic i32, i32* %41 monotonic, align 4
  %43 = and i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 0
  %46 = load i32, i32* %45, align 4
  br i1 %44, label %47, label %49

47:                                               ; preds = %40
  %48 = add i32 %46, -1
  store i32 %48, i32* %45, align 4
  br label %49

49:                                               ; preds = %47, %40
  %50 = phi i32 [ %48, %47 ], [ %46, %40 ]
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %167

52:                                               ; preds = %49
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %38) #14
  br label %167

53:                                               ; preds = %3
  %54 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 1
  %55 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 -1
  %56 = tail call i32 @_ZNSt3__17__sort3IRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEjT0_SA_SA_T_(%"class.WTF::AtomicString"* %0, %"class.WTF::AtomicString"* %54, %"class.WTF::AtomicString"* %55, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  br label %167

57:                                               ; preds = %3
  %58 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 1
  %59 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 2
  %60 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 -1
  %61 = tail call i32 @_ZNSt3__17__sort4IRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEjT0_SA_SA_SA_T_(%"class.WTF::AtomicString"* %0, %"class.WTF::AtomicString"* %58, %"class.WTF::AtomicString"* %59, %"class.WTF::AtomicString"* %60, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  br label %167

62:                                               ; preds = %3
  %63 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 1
  %64 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 2
  %65 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 3
  %66 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 -1
  %67 = tail call i32 @_ZNSt3__17__sort5IRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEjT0_SA_SA_SA_SA_T_(%"class.WTF::AtomicString"* %0, %"class.WTF::AtomicString"* %63, %"class.WTF::AtomicString"* %64, %"class.WTF::AtomicString"* %65, %"class.WTF::AtomicString"* %66, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  br label %167

68:                                               ; preds = %3
  %69 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 2
  %70 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 1
  %71 = tail call i32 @_ZNSt3__17__sort3IRPFbRKN3WTF6StringES4_EPNS1_12AtomicStringEEEjT0_SA_SA_T_(%"class.WTF::AtomicString"* %0, %"class.WTF::AtomicString"* %70, %"class.WTF::AtomicString"* %69, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** dereferenceable(8) %2)
  %72 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %0, i64 3
  %73 = icmp eq %"class.WTF::AtomicString"* %72, %1
  br i1 %73, label %167, label %74

74:                                               ; preds = %68
  %75 = bitcast %"class.WTF::AtomicString"* %4 to i8*
  %76 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0, i32 0, i32 0
  %77 = bitcast %"class.WTF::AtomicString"* %4 to i64*
  %78 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %4, i64 0, i32 0
  br label %79

79:                                               ; preds = %74, %160
  %80 = phi %"class.WTF::AtomicString"* [ %72, %74 ], [ %162, %160 ]
  %81 = phi i32 [ 0, %74 ], [ %161, %160 ]
  %82 = phi %"class.WTF::AtomicString"* [ %69, %74 ], [ %80, %160 ]
  %83 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %84 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %80, i64 0, i32 0
  %85 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %82, i64 0, i32 0
  %86 = call zeroext i1 %83(%"class.WTF::String"* dereferenceable(8) %84, %"class.WTF::String"* dereferenceable(8) %85) #14
  br i1 %86, label %87, label %160

87:                                               ; preds = %79
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %75) #14
  %88 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %80, i64 0, i32 0, i32 0, i32 0
  %89 = bitcast %"class.WTF::AtomicString"* %80 to i64*
  %90 = load i64, i64* %89, align 8
  store i64 %90, i64* %77, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %88, align 8
  br label %91

91:                                               ; preds = %116, %87
  %92 = phi %"class.WTF::AtomicString"* [ %80, %87 ], [ %93, %116 ]
  %93 = phi %"class.WTF::AtomicString"* [ %82, %87 ], [ %118, %116 ]
  %94 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %93, i64 0, i32 0, i32 0, i32 0
  %95 = bitcast %"class.WTF::AtomicString"* %93 to i64*
  %96 = load i64, i64* %95, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %94, align 8
  %97 = bitcast %"class.WTF::AtomicString"* %92 to i64*
  %98 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %92, i64 0, i32 0, i32 0, i32 0
  %99 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %98, align 8
  store i64 %96, i64* %97, align 8
  %100 = icmp eq %"class.WTF::StringImpl"* %99, null
  br i1 %100, label %114, label %101

101:                                              ; preds = %91
  %102 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %99, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %103 = load atomic i32, i32* %102 monotonic, align 4
  %104 = and i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %99, i64 0, i32 0
  %107 = load i32, i32* %106, align 4
  br i1 %105, label %108, label %110

108:                                              ; preds = %101
  %109 = add i32 %107, -1
  store i32 %109, i32* %106, align 4
  br label %110

110:                                              ; preds = %108, %101
  %111 = phi i32 [ %109, %108 ], [ %107, %101 ]
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %114

113:                                              ; preds = %110
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %99) #14
  br label %114

114:                                              ; preds = %91, %110, %113
  %115 = icmp eq %"class.WTF::AtomicString"* %93, %0
  br i1 %115, label %121, label %116

116:                                              ; preds = %114
  %117 = load i1 (%"class.WTF::String"*, %"class.WTF::String"*)*, i1 (%"class.WTF::String"*, %"class.WTF::String"*)** %2, align 8
  %118 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %93, i64 -1
  %119 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %118, i64 0, i32 0
  %120 = call zeroext i1 %117(%"class.WTF::String"* nonnull dereferenceable(8) %78, %"class.WTF::String"* dereferenceable(8) %119) #14
  br i1 %120, label %91, label %121

121:                                              ; preds = %114, %116
  %122 = phi %"class.WTF::AtomicString"* [ %93, %116 ], [ %0, %114 ]
  %123 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %122, i64 0, i32 0, i32 0, i32 0
  %124 = bitcast %"class.WTF::AtomicString"* %122 to i64*
  %125 = load i64, i64* %77, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %76, align 8
  %126 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %123, align 8
  store i64 %125, i64* %124, align 8
  %127 = icmp eq %"class.WTF::StringImpl"* %126, null
  br i1 %127, label %141, label %128

128:                                              ; preds = %121
  %129 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %126, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %130 = load atomic i32, i32* %129 monotonic, align 4
  %131 = and i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %126, i64 0, i32 0
  %134 = load i32, i32* %133, align 4
  br i1 %132, label %135, label %137

135:                                              ; preds = %128
  %136 = add i32 %134, -1
  store i32 %136, i32* %133, align 4
  br label %137

137:                                              ; preds = %135, %128
  %138 = phi i32 [ %136, %135 ], [ %134, %128 ]
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %141

140:                                              ; preds = %137
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %126) #14
  br label %141

141:                                              ; preds = %121, %137, %140
  %142 = add i32 %81, 1
  %143 = icmp eq i32 %142, 8
  %144 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %76, align 8
  %145 = icmp eq %"class.WTF::StringImpl"* %144, null
  br i1 %145, label %159, label %146

146:                                              ; preds = %141
  %147 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %148 = load atomic i32, i32* %147 monotonic, align 4
  %149 = and i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 0
  %152 = load i32, i32* %151, align 4
  br i1 %150, label %153, label %155

153:                                              ; preds = %146
  %154 = add i32 %152, -1
  store i32 %154, i32* %151, align 4
  br label %155

155:                                              ; preds = %153, %146
  %156 = phi i32 [ %154, %153 ], [ %152, %146 ]
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %159

158:                                              ; preds = %155
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %144) #14
  br label %159

159:                                              ; preds = %141, %155, %158
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %75) #14
  br i1 %143, label %164, label %160

160:                                              ; preds = %159, %79
  %161 = phi i32 [ %142, %159 ], [ %81, %79 ]
  %162 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %80, i64 1
  %163 = icmp eq %"class.WTF::AtomicString"* %162, %1
  br i1 %163, label %167, label %79

164:                                              ; preds = %159
  %165 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %80, i64 1
  %166 = icmp eq %"class.WTF::AtomicString"* %165, %1
  br label %167

167:                                              ; preds = %160, %164, %68, %52, %49, %37, %9, %3, %3, %62, %57, %53
  %168 = phi i1 [ true, %62 ], [ true, %57 ], [ true, %53 ], [ true, %3 ], [ true, %3 ], [ true, %9 ], [ true, %37 ], [ true, %49 ], [ true, %52 ], [ true, %68 ], [ %166, %164 ], [ true, %160 ]
  ret i1 %168
}

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8*, i32) local_unnamed_addr #2

declare void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #11

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #12

declare i32 @_ZN4base14PlatformThread9CurrentIdEv() local_unnamed_addr #2

declare i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() local_unnamed_addr #2

declare i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext, i8*, i8*, i8*, i64, i64, i32, %"class.base::TimeTicks"* dereferenceable(8), %"class.base::trace_event::TraceArguments"*, i32) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #13

declare void @_ZN8perfetto8internal26CreateTracedValueFromProtoEPNS_6protos6pbzero15DebugAnnotationE(%"class.perfetto::TracedValue"* sret, %"class.perfetto::protos::pbzero::DebugAnnotation"*) local_unnamed_addr #2

declare void @_ZN9protozero19ScatteredHeapBufferC1Emm(%"class.protozero::ScatteredHeapBuffer"*, i64, i64) unnamed_addr #2

declare void @_ZN9protozero21ScatteredStreamWriterC1EPNS0_8DelegateE(%"class.protozero::ScatteredStreamWriter"*, %"class.protozero::ScatteredStreamWriter::Delegate"*) unnamed_addr #2

declare void @_ZN9protozero12MessageArenaC1Ev(%"class.protozero::MessageArena"*) unnamed_addr #2

declare void @_ZN9protozero7Message5ResetEPNS_21ScatteredStreamWriterEPNS_12MessageArenaE(%"class.protozero::Message"*, %"class.protozero::ScatteredStreamWriter"*, %"class.protozero::MessageArena"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__14listIN9protozero12MessageArena5BlockENS_9allocatorIS3_EEE6resizeEm(%"class.std::__1::list"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp ugt i64 %4, %1
  br i1 %5, label %6, label %179

6:                                                ; preds = %2
  %7 = lshr i64 %4, 1
  %8 = icmp ult i64 %7, %1
  br i1 %8, label %97, label %9

9:                                                ; preds = %6
  %10 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %10, align 8
  %12 = icmp sgt i64 %1, -1
  br i1 %12, label %34, label %13

13:                                               ; preds = %9
  %14 = bitcast %"struct.std::__1::__list_node_base"* %11 to i64*
  %15 = sub i64 0, %1
  %16 = and i64 %15, 7
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %29, label %18

18:                                               ; preds = %13, %18
  %19 = phi i64* [ %24, %18 ], [ %14, %13 ]
  %20 = phi i64 [ %23, %18 ], [ %1, %13 ]
  %21 = phi i64 [ %25, %18 ], [ %16, %13 ]
  %22 = load i64, i64* %19, align 8
  %23 = add nsw i64 %20, 1
  %24 = inttoptr i64 %22 to i64*
  %25 = add i64 %21, -1
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %27, label %18, !llvm.loop !78

27:                                               ; preds = %18
  %28 = inttoptr i64 %22 to i64*
  br label %29

29:                                               ; preds = %13, %27
  %30 = phi i64 [ undef, %13 ], [ %22, %27 ]
  %31 = phi i64* [ %14, %13 ], [ %28, %27 ]
  %32 = phi i64 [ %1, %13 ], [ %23, %27 ]
  %33 = icmp ugt i64 %1, -8
  br i1 %33, label %152, label %82

34:                                               ; preds = %9
  %35 = ptrtoint %"struct.std::__1::__list_node_base"* %11 to i64
  %36 = icmp eq i64 %1, 0
  br i1 %36, label %152, label %37

37:                                               ; preds = %34
  %38 = add nsw i64 %1, -1
  %39 = and i64 %1, 7
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %54, label %41

41:                                               ; preds = %37, %41
  %42 = phi %"struct.std::__1::__list_node_base"* [ %49, %41 ], [ %11, %37 ]
  %43 = phi i64 [ %48, %41 ], [ %1, %37 ]
  %44 = phi i64 [ %50, %41 ], [ %39, %37 ]
  %45 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %42, i64 0, i32 1
  %46 = bitcast %"struct.std::__1::__list_node_base"** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = add nsw i64 %43, -1
  %49 = inttoptr i64 %47 to %"struct.std::__1::__list_node_base"*
  %50 = add i64 %44, -1
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %41, !llvm.loop !80

52:                                               ; preds = %41
  %53 = inttoptr i64 %47 to %"struct.std::__1::__list_node_base"*
  br label %54

54:                                               ; preds = %37, %52
  %55 = phi %"struct.std::__1::__list_node_base"* [ %11, %37 ], [ %53, %52 ]
  %56 = phi i64 [ %1, %37 ], [ %48, %52 ]
  %57 = phi i64 [ undef, %37 ], [ %47, %52 ]
  %58 = icmp ult i64 %38, 7
  br i1 %58, label %152, label %59

59:                                               ; preds = %54, %59
  %60 = phi %"struct.std::__1::__list_node_base"* [ %81, %59 ], [ %55, %54 ]
  %61 = phi i64 [ %79, %59 ], [ %56, %54 ]
  %62 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %60, i64 0, i32 1
  %63 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %62, align 8
  %64 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %63, i64 0, i32 1
  %65 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %64, align 8
  %66 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %65, i64 0, i32 1
  %67 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %66, align 8
  %68 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %67, i64 0, i32 1
  %69 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %68, align 8
  %70 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %69, i64 0, i32 1
  %71 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %70, align 8
  %72 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %71, i64 0, i32 1
  %73 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %72, align 8
  %74 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %73, i64 0, i32 1
  %75 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %74, align 8
  %76 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %75, i64 0, i32 1
  %77 = bitcast %"struct.std::__1::__list_node_base"** %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = add nsw i64 %61, -8
  %80 = icmp sgt i64 %79, 0
  %81 = inttoptr i64 %78 to %"struct.std::__1::__list_node_base"*
  br i1 %80, label %59, label %152

82:                                               ; preds = %29, %82
  %83 = phi i64* [ %96, %82 ], [ %31, %29 ]
  %84 = phi i64 [ %94, %82 ], [ %32, %29 ]
  %85 = bitcast i64* %83 to i64********
  %86 = load i64*******, i64******** %85, align 8
  %87 = load i64******, i64******* %86, align 8
  %88 = load i64*****, i64****** %87, align 8
  %89 = load i64****, i64***** %88, align 8
  %90 = load i64***, i64**** %89, align 8
  %91 = load i64**, i64*** %90, align 8
  %92 = load i64*, i64** %91, align 8
  %93 = load i64, i64* %92, align 8
  %94 = add nsw i64 %84, 8
  %95 = icmp eq i64 %94, 0
  %96 = inttoptr i64 %93 to i64*
  br i1 %95, label %152, label %82

97:                                               ; preds = %6
  %98 = sub i64 %4, %1
  %99 = sub nsw i64 0, %98
  %100 = icmp slt i64 %98, 1
  br i1 %100, label %123, label %101

101:                                              ; preds = %97
  %102 = bitcast %"class.std::__1::list"* %0 to i64*
  %103 = xor i64 %1, -1
  %104 = add i64 %4, %103
  %105 = and i64 %98, 7
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %118, label %107

107:                                              ; preds = %101, %107
  %108 = phi i64* [ %113, %107 ], [ %102, %101 ]
  %109 = phi i64 [ %112, %107 ], [ %99, %101 ]
  %110 = phi i64 [ %114, %107 ], [ %105, %101 ]
  %111 = load i64, i64* %108, align 8
  %112 = add nsw i64 %109, 1
  %113 = inttoptr i64 %111 to i64*
  %114 = add i64 %110, -1
  %115 = icmp eq i64 %114, 0
  br i1 %115, label %116, label %107, !llvm.loop !81

116:                                              ; preds = %107
  %117 = inttoptr i64 %111 to i64*
  br label %118

118:                                              ; preds = %101, %116
  %119 = phi i64 [ undef, %101 ], [ %111, %116 ]
  %120 = phi i64* [ %102, %101 ], [ %117, %116 ]
  %121 = phi i64 [ %99, %101 ], [ %112, %116 ]
  %122 = icmp ult i64 %104, 7
  br i1 %122, label %152, label %137

123:                                              ; preds = %97
  %124 = ptrtoint %"class.std::__1::list"* %0 to i64
  %125 = icmp eq i64 %98, 0
  br i1 %125, label %152, label %126

126:                                              ; preds = %123
  %127 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %0, i64 0, i32 0, i32 0
  br label %128

128:                                              ; preds = %128, %126
  %129 = phi %"struct.std::__1::__list_node_base"* [ %136, %128 ], [ %127, %126 ]
  %130 = phi i64 [ %134, %128 ], [ %99, %126 ]
  %131 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %129, i64 0, i32 1
  %132 = bitcast %"struct.std::__1::__list_node_base"** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = add nsw i64 %130, -1
  %135 = icmp sgt i64 %134, 0
  %136 = inttoptr i64 %133 to %"struct.std::__1::__list_node_base"*
  br i1 %135, label %128, label %152

137:                                              ; preds = %118, %137
  %138 = phi i64* [ %151, %137 ], [ %120, %118 ]
  %139 = phi i64 [ %149, %137 ], [ %121, %118 ]
  %140 = bitcast i64* %138 to i64********
  %141 = load i64*******, i64******** %140, align 8
  %142 = load i64******, i64******* %141, align 8
  %143 = load i64*****, i64****** %142, align 8
  %144 = load i64****, i64***** %143, align 8
  %145 = load i64***, i64**** %144, align 8
  %146 = load i64**, i64*** %145, align 8
  %147 = load i64*, i64** %146, align 8
  %148 = load i64, i64* %147, align 8
  %149 = add nsw i64 %139, 8
  %150 = icmp eq i64 %149, 0
  %151 = inttoptr i64 %148 to i64*
  br i1 %150, label %152, label %137

152:                                              ; preds = %29, %82, %54, %59, %118, %137, %128, %34, %123
  %153 = phi i64 [ %35, %34 ], [ %124, %123 ], [ %133, %128 ], [ %119, %118 ], [ %148, %137 ], [ %57, %54 ], [ %78, %59 ], [ %30, %29 ], [ %93, %82 ]
  %154 = inttoptr i64 %153 to %"struct.std::__1::__list_node_base"*
  %155 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %0, i64 0, i32 0, i32 0
  %156 = icmp eq %"struct.std::__1::__list_node_base"* %155, %154
  br i1 %156, label %218, label %157

157:                                              ; preds = %152
  %158 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %0, i64 0, i32 0, i32 0, i32 0
  %159 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %158, align 8
  %160 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %159, i64 0, i32 1
  %161 = bitcast %"struct.std::__1::__list_node_base"** %160 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %154, i64 0, i32 0
  %164 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %163, align 8
  %165 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %164, i64 0, i32 1
  %166 = bitcast %"struct.std::__1::__list_node_base"** %165 to i64*
  store i64 %162, i64* %166, align 8
  %167 = inttoptr i64 %153 to i64*
  %168 = load i64, i64* %167, align 8
  %169 = bitcast %"struct.std::__1::__list_node_base"** %160 to i64**
  %170 = load i64*, i64** %169, align 8
  store i64 %168, i64* %170, align 8
  br label %171

171:                                              ; preds = %171, %157
  %172 = phi %"struct.std::__1::__list_node_base"* [ %154, %157 ], [ %174, %171 ]
  %173 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %172, i64 0, i32 1
  %174 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %173, align 8
  %175 = load i64, i64* %3, align 8
  %176 = add i64 %175, -1
  store i64 %176, i64* %3, align 8
  %177 = bitcast %"struct.std::__1::__list_node_base"* %172 to i8*
  tail call void @_ZdlPv(i8* %177) #15
  %178 = icmp eq %"struct.std::__1::__list_node_base"* %174, %155
  br i1 %178, label %218, label %171

179:                                              ; preds = %2
  %180 = icmp ult i64 %4, %1
  br i1 %180, label %181, label %218

181:                                              ; preds = %179
  %182 = tail call i8* @_Znwm(i64 792) #15, !noalias !82
  %183 = bitcast i8* %182 to %"struct.std::__1::__list_node_base"**
  store %"struct.std::__1::__list_node_base"* null, %"struct.std::__1::__list_node_base"** %183, align 8, !noalias !82
  %184 = getelementptr inbounds i8, i8* %182, i64 784
  %185 = bitcast i8* %184 to i32*
  store i32 0, i32* %185, align 8
  %186 = ptrtoint i8* %182 to i64
  %187 = xor i64 %4, -1
  %188 = add i64 %187, %1
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %206, label %190

190:                                              ; preds = %181, %190
  %191 = phi i64 [ %200, %190 ], [ %188, %181 ]
  %192 = phi i64 [ %202, %190 ], [ %186, %181 ]
  %193 = tail call i8* @_Znwm(i64 792) #15
  %194 = getelementptr inbounds i8, i8* %193, i64 784
  %195 = bitcast i8* %194 to i32*
  store i32 0, i32* %195, align 8
  %196 = inttoptr i64 %192 to %"struct.std::__1::__list_node_base"*
  %197 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %196, i64 0, i32 1
  %198 = bitcast %"struct.std::__1::__list_node_base"** %197 to i8**
  store i8* %193, i8** %198, align 8
  %199 = bitcast i8* %193 to i64*
  store i64 %192, i64* %199, align 8
  %200 = add i64 %191, -1
  %201 = bitcast %"struct.std::__1::__list_node_base"** %197 to i64*
  %202 = load i64, i64* %201, align 8
  %203 = icmp eq i64 %200, 0
  br i1 %203, label %204, label %190

204:                                              ; preds = %190
  %205 = sub i64 %1, %4
  br label %206

206:                                              ; preds = %204, %181
  %207 = phi i64 [ %186, %181 ], [ %202, %204 ]
  %208 = phi i64 [ 1, %181 ], [ %205, %204 ]
  %209 = inttoptr i64 %207 to %"struct.std::__1::__list_node_base"*
  %210 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %0, i64 0, i32 0, i32 0
  %211 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %209, i64 0, i32 1
  store %"struct.std::__1::__list_node_base"* %210, %"struct.std::__1::__list_node_base"** %211, align 8
  %212 = getelementptr inbounds %"class.std::__1::list", %"class.std::__1::list"* %0, i64 0, i32 0, i32 0, i32 0
  %213 = load %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"** %212, align 8
  store %"struct.std::__1::__list_node_base"* %213, %"struct.std::__1::__list_node_base"** %183, align 8
  %214 = getelementptr inbounds %"struct.std::__1::__list_node_base", %"struct.std::__1::__list_node_base"* %213, i64 0, i32 1
  %215 = bitcast %"struct.std::__1::__list_node_base"** %214 to i8**
  store i8* %182, i8** %215, align 8
  store %"struct.std::__1::__list_node_base"* %209, %"struct.std::__1::__list_node_base"** %212, align 8
  %216 = load i64, i64* %3, align 8
  %217 = add i64 %216, %208
  store i64 %217, i64* %3, align 8
  br label %218

218:                                              ; preds = %171, %152, %179, %206
  ret void
}

declare void @_ZN5blink44inspector_style_invalidator_invalidate_event12SelectorPartEN8perfetto11TracedValueERNS_7ElementEPKcRKNS_15InvalidationSetERKN3WTF6StringE(%"class.perfetto::TracedValue"*, %"class.blink::Element"* dereferenceable(104), i8*, %"class.blink::InvalidationSet"* dereferenceable(48), %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"*) unnamed_addr #4

declare void @_ZN3WTF10Partitions8FastFreeEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_SC_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %4, align 8
  %6 = icmp eq %"class.WTF::AtomicString"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable"* %0, %"class.WTF::AtomicString"* null)
  %9 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"class.WTF::AtomicString"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = and i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %11, i64 %22
  %24 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %23, i64 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %72, label %27

27:                                               ; preds = %10
  %28 = xor i32 %20, -1
  %29 = lshr i32 %19, 31
  %30 = add nsw i32 %29, %28
  %31 = shl i32 %30, 12
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 7
  %34 = xor i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 20
  %38 = xor i32 %37, %36
  %39 = or i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %27, %52
  %42 = phi %"class.WTF::StringImpl"* [ %25, %27 ], [ %60, %52 ]
  %43 = phi %"class.WTF::AtomicString"* [ %23, %27 ], [ %58, %52 ]
  %44 = phi %"class.WTF::AtomicString"* [ null, %27 ], [ %53, %52 ]
  %45 = phi i64 [ %22, %27 ], [ %57, %52 ]
  %46 = phi i64 [ 0, %27 ], [ %55, %52 ]
  %47 = bitcast %"class.WTF::AtomicString"* %43 to i8**
  %48 = load i8*, i8** %47, align 8
  %49 = icmp eq i8* %48, inttoptr (i64 -1 to i8*)
  br i1 %49, label %52, label %50

50:                                               ; preds = %41
  %51 = icmp eq %"class.WTF::StringImpl"* %42, %17
  br i1 %51, label %125, label %52

52:                                               ; preds = %41, %50
  %53 = phi %"class.WTF::AtomicString"* [ %44, %50 ], [ %43, %41 ]
  %54 = icmp eq i64 %46, 0
  %55 = select i1 %54, i64 %40, i64 %46
  %56 = add i64 %55, %45
  %57 = and i64 %56, %15
  %58 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %11, i64 %57
  %59 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %58, i64 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %62, label %41

62:                                               ; preds = %52
  %63 = icmp eq %"class.WTF::AtomicString"* %53, null
  br i1 %63, label %72, label %64

64:                                               ; preds = %62
  %65 = bitcast %"class.WTF::AtomicString"* %53 to i64*
  store i64 0, i64* %65, align 8
  %66 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %67 = load i32, i32* %66, align 8
  %68 = add i32 %67, 2147483647
  %69 = and i32 %68, 2147483647
  %70 = and i32 %67, -2147483648
  %71 = or i32 %69, %70
  store i32 %71, i32* %66, align 8
  br label %72

72:                                               ; preds = %10, %62, %64
  %73 = phi %"class.WTF::AtomicString"* [ %53, %64 ], [ %58, %62 ], [ %23, %10 ]
  %74 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %75 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %74, align 8
  %76 = icmp eq %"class.WTF::StringImpl"* %75, null
  br i1 %76, label %94, label %77

77:                                               ; preds = %72
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = load atomic i32, i32* %78 monotonic, align 4
  %80 = and i32 %79, 2
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %94

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = zext i32 %84 to i33
  %86 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %85, i33 1) #14
  %87 = extractvalue { i33, i1 } %86, 1
  %88 = extractvalue { i33, i1 } %86, 0
  %89 = icmp slt i33 %88, 0
  %90 = or i1 %87, %89
  br i1 %90, label %91, label %92, !prof !5

91:                                               ; preds = %82
  tail call void @llvm.trap() #14
  unreachable

92:                                               ; preds = %82
  %93 = trunc i33 %88 to i32
  store i32 %93, i32* %83, align 4
  br label %94

94:                                               ; preds = %92, %77, %72
  %95 = ptrtoint %"class.WTF::StringImpl"* %75 to i64
  %96 = bitcast %"class.WTF::AtomicString"* %73 to i64*
  %97 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %73, i64 0, i32 0, i32 0, i32 0
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  store i64 %95, i64* %96, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %113, label %100

100:                                              ; preds = %94
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  br i1 %104, label %107, label %109

107:                                              ; preds = %100
  %108 = add i32 %106, -1
  store i32 %108, i32* %105, align 4
  br label %109

109:                                              ; preds = %107, %100
  %110 = phi i32 [ %108, %107 ], [ %106, %100 ]
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %98) #14
  br label %113

113:                                              ; preds = %94, %109, %112
  %114 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %115 = load i32, i32* %114, align 4
  %116 = add i32 %115, 1
  store i32 %116, i32* %114, align 4
  %117 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %118 = load i32, i32* %117, align 8
  %119 = add i32 %118, %116
  %120 = shl i32 %119, 1
  %121 = load i32, i32* %12, align 8
  %122 = icmp ult i32 %120, %121
  br i1 %122, label %125, label %123

123:                                              ; preds = %113
  %124 = tail call %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable"* %0, %"class.WTF::AtomicString"* %73)
  br label %125

125:                                              ; preds = %50, %113, %123
  %126 = phi i8 [ 1, %113 ], [ 1, %123 ], [ 0, %50 ]
  %127 = phi %"class.WTF::AtomicString"* [ %73, %113 ], [ %124, %123 ], [ %43, %50 ]
  %128 = insertvalue { %"class.WTF::AtomicString"*, i8 } undef, %"class.WTF::AtomicString"* %127, 0
  %129 = insertvalue { %"class.WTF::AtomicString"*, i8 } %128, i8 %126, 1
  ret { %"class.WTF::AtomicString"*, i8 } %129
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable"*, %"class.WTF::AtomicString"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #14
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #14
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #14
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.52, i64 0, i64 0), i8* %22, i8* %23) #14
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #14
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.53, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #14
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #14
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #14
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #14
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 3
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12AtomicStringEEEPKcv, i64 0, i64 0)) #14
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #14
  %36 = bitcast i8* %35 to %"class.WTF::AtomicString"*
  %37 = call %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_(%"class.WTF::HashTable"* %0, %"class.WTF::AtomicString"* %36, i32 %32, %"class.WTF::AtomicString"* %1) #14
  ret %"class.WTF::AtomicString"* %37
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE8RehashToEPS1_jS8_(%"class.WTF::HashTable"*, %"class.WTF::AtomicString"*, i32, %"class.WTF::AtomicString"*) local_unnamed_addr #0 comdat align 2 {
  %5 = ptrtoint %"class.WTF::AtomicString"* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %9, align 8
  %17 = ptrtoint %"class.WTF::AtomicString"* %16 to i64
  br label %61

18:                                               ; preds = %157
  %19 = bitcast %"class.WTF::HashTable"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %158, %18 ]
  %23 = phi %"class.WTF::AtomicString"* [ null, %10 ], [ %161, %18 ]
  %24 = phi i32 [ 0, %10 ], [ %159, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %25 = inttoptr i64 %22 to %"class.WTF::AtomicString"*
  %26 = icmp eq i64 %22, 0
  br i1 %26, label %57, label %27

27:                                               ; preds = %20
  %28 = icmp eq i32 %24, 0
  br i1 %28, label %55, label %29

29:                                               ; preds = %27
  %30 = zext i32 %24 to i64
  br label %31

31:                                               ; preds = %52, %29
  %32 = phi i64 [ 0, %29 ], [ %53, %52 ]
  %33 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %25, i64 %32
  %34 = bitcast %"class.WTF::AtomicString"* %33 to i8**
  %35 = load i8*, i8** %34, align 8
  %36 = bitcast i8* %35 to %"class.WTF::StringImpl"*
  %37 = ptrtoint i8* %35 to i64
  switch i64 %37, label %38 [
    i64 -1, label %52
    i64 0, label %52
  ]

38:                                               ; preds = %31
  %39 = getelementptr inbounds i8, i8* %35, i64 8
  %40 = bitcast i8* %39 to i32*
  %41 = load atomic i32, i32* %40 monotonic, align 4
  %42 = and i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = bitcast i8* %35 to i32*
  %45 = load i32, i32* %44, align 4
  br i1 %43, label %46, label %48

46:                                               ; preds = %38
  %47 = add i32 %45, -1
  store i32 %47, i32* %44, align 4
  br label %48

48:                                               ; preds = %46, %38
  %49 = phi i32 [ %47, %46 ], [ %45, %38 ]
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %48
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %36) #14
  br label %52

52:                                               ; preds = %51, %48, %31, %31
  %53 = add nuw nsw i64 %32, 1
  %54 = icmp eq i64 %53, %30
  br i1 %54, label %55, label %31

55:                                               ; preds = %52, %27
  %56 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %56) #14
  br label %57

57:                                               ; preds = %20, %55
  %58 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %59 = load i32, i32* %58, align 8
  %60 = and i32 %59, -2147483648
  store i32 %60, i32* %58, align 8
  ret %"class.WTF::AtomicString"* %23

61:                                               ; preds = %13, %157
  %62 = phi i64 [ %17, %13 ], [ %158, %157 ]
  %63 = phi i32 [ %7, %13 ], [ %159, %157 ]
  %64 = phi %"class.WTF::AtomicString"* [ %16, %13 ], [ %160, %157 ]
  %65 = phi %"class.WTF::AtomicString"* [ null, %13 ], [ %161, %157 ]
  %66 = phi i32 [ 0, %13 ], [ %162, %157 ]
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %64, i64 %67
  %69 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %68, i64 0, i32 0, i32 0, i32 0
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8
  %71 = ptrtoint %"class.WTF::StringImpl"* %70 to i64
  switch i64 %71, label %72 [
    i64 -1, label %157
    i64 0, label %157
  ]

72:                                               ; preds = %61
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %70, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = load atomic i32, i32* %73 monotonic, align 4
  %75 = lshr i32 %74, 8
  %76 = and i32 %75, %14
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 %77
  %79 = ptrtoint %"class.WTF::AtomicString"* %78 to i64
  %80 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %78, i64 0, i32 0, i32 0, i32 0
  %81 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %80, align 8
  %82 = icmp eq %"class.WTF::StringImpl"* %81, null
  br i1 %82, label %99, label %83

83:                                               ; preds = %72
  %84 = xor i32 %75, -1
  %85 = lshr i32 %74, 31
  %86 = add nsw i32 %85, %84
  %87 = shl i32 %86, 12
  %88 = xor i32 %87, %86
  %89 = lshr i32 %88, 7
  %90 = xor i32 %89, %88
  %91 = shl i32 %90, 2
  %92 = xor i32 %91, %90
  %93 = lshr i32 %92, 20
  %94 = xor i32 %93, %92
  %95 = or i32 %94, 1
  %96 = zext i32 %95 to i64
  br label %105

97:                                               ; preds = %117
  %98 = ptrtoint %"class.WTF::AtomicString"* %123 to i64
  br label %99

99:                                               ; preds = %97, %72
  %100 = phi i64 [ %79, %72 ], [ %98, %97 ]
  %101 = phi %"class.WTF::AtomicString"* [ null, %72 ], [ %118, %97 ]
  %102 = icmp eq %"class.WTF::AtomicString"* %101, null
  %103 = ptrtoint %"class.WTF::AtomicString"* %101 to i64
  %104 = select i1 %102, i64 %100, i64 %103
  br label %128

105:                                              ; preds = %117, %83
  %106 = phi %"class.WTF::AtomicString"* [ null, %83 ], [ %118, %117 ]
  %107 = phi %"class.WTF::StringImpl"* [ %81, %83 ], [ %126, %117 ]
  %108 = phi i64 [ %79, %83 ], [ %124, %117 ]
  %109 = phi %"class.WTF::AtomicString"* [ %78, %83 ], [ %123, %117 ]
  %110 = phi i64 [ %77, %83 ], [ %122, %117 ]
  %111 = phi i64 [ 0, %83 ], [ %120, %117 ]
  %112 = bitcast %"class.WTF::AtomicString"* %109 to i8**
  %113 = load i8*, i8** %112, align 8
  %114 = icmp eq i8* %113, inttoptr (i64 -1 to i8*)
  br i1 %114, label %117, label %115

115:                                              ; preds = %105
  %116 = icmp eq %"class.WTF::StringImpl"* %107, %70
  br i1 %116, label %128, label %117

117:                                              ; preds = %115, %105
  %118 = phi %"class.WTF::AtomicString"* [ %106, %115 ], [ %109, %105 ]
  %119 = icmp eq i64 %111, 0
  %120 = select i1 %119, i64 %96, i64 %111
  %121 = add i64 %120, %110
  %122 = and i64 %121, %15
  %123 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 %122
  %124 = ptrtoint %"class.WTF::AtomicString"* %123 to i64
  %125 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %123, i64 0, i32 0, i32 0, i32 0
  %126 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %125, align 8
  %127 = icmp eq %"class.WTF::StringImpl"* %126, null
  br i1 %127, label %97, label %105

128:                                              ; preds = %115, %99
  %129 = phi i64 [ %104, %99 ], [ %108, %115 ]
  %130 = inttoptr i64 %129 to %"class.WTF::AtomicString"*
  %131 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %130, i64 0, i32 0, i32 0, i32 0
  %132 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %131, align 8
  %133 = icmp eq %"class.WTF::StringImpl"* %132, null
  br i1 %133, label %147, label %134

134:                                              ; preds = %128
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %132, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %136 = load atomic i32, i32* %135 monotonic, align 4
  %137 = and i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %132, i64 0, i32 0
  %140 = load i32, i32* %139, align 4
  br i1 %138, label %141, label %143

141:                                              ; preds = %134
  %142 = add i32 %140, -1
  store i32 %142, i32* %139, align 4
  br label %143

143:                                              ; preds = %141, %134
  %144 = phi i32 [ %142, %141 ], [ %140, %134 ]
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %147

146:                                              ; preds = %143
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %132) #14
  br label %147

147:                                              ; preds = %128, %143, %146
  %148 = bitcast %"class.WTF::AtomicString"* %68 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = inttoptr i64 %129 to i64*
  store i64 %149, i64* %150, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %69, align 8
  %151 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %9, align 8
  %152 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %151, i64 %67
  %153 = icmp eq %"class.WTF::AtomicString"* %152, %3
  %154 = select i1 %153, %"class.WTF::AtomicString"* %130, %"class.WTF::AtomicString"* %65
  %155 = load i32, i32* %6, align 8
  %156 = ptrtoint %"class.WTF::AtomicString"* %151 to i64
  br label %157

157:                                              ; preds = %61, %61, %147
  %158 = phi i64 [ %62, %61 ], [ %156, %147 ], [ %62, %61 ]
  %159 = phi i32 [ %63, %61 ], [ %155, %147 ], [ %63, %61 ]
  %160 = phi %"class.WTF::AtomicString"* [ %64, %61 ], [ %151, %147 ], [ %64, %61 ]
  %161 = phi %"class.WTF::AtomicString"* [ %65, %61 ], [ %154, %147 ], [ %65, %61 ]
  %162 = add i32 %66, 1
  %163 = icmp eq i32 %162, %159
  br i1 %163, label %18, label %61
}

declare i8* @_ZN3WTF10Partitions10FastMallocEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"class.WTF::AtomicString"*, i8 } @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6insertINS_22IdentityHashTranslatorIS3_S5_S6_EERKS1_RS1_EENS_18HashTableAddResultIS7_S1_EEOT0_OT1_(%"class.WTF::HashTable"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %4, align 8
  %6 = icmp eq %"class.WTF::AtomicString"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable"* %0, %"class.WTF::AtomicString"* null)
  %9 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"class.WTF::AtomicString"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %1, i64 0, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4
  %20 = lshr i32 %19, 8
  %21 = and i32 %20, %14
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %11, i64 %22
  %24 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %23, i64 0, i32 0, i32 0, i32 0
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %24, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %72, label %27

27:                                               ; preds = %10
  %28 = xor i32 %20, -1
  %29 = lshr i32 %19, 31
  %30 = add nsw i32 %29, %28
  %31 = shl i32 %30, 12
  %32 = xor i32 %31, %30
  %33 = lshr i32 %32, 7
  %34 = xor i32 %33, %32
  %35 = shl i32 %34, 2
  %36 = xor i32 %35, %34
  %37 = lshr i32 %36, 20
  %38 = xor i32 %37, %36
  %39 = or i32 %38, 1
  %40 = zext i32 %39 to i64
  br label %41

41:                                               ; preds = %27, %52
  %42 = phi %"class.WTF::StringImpl"* [ %25, %27 ], [ %60, %52 ]
  %43 = phi %"class.WTF::AtomicString"* [ %23, %27 ], [ %58, %52 ]
  %44 = phi %"class.WTF::AtomicString"* [ null, %27 ], [ %53, %52 ]
  %45 = phi i64 [ %22, %27 ], [ %57, %52 ]
  %46 = phi i64 [ 0, %27 ], [ %55, %52 ]
  %47 = bitcast %"class.WTF::AtomicString"* %43 to i8**
  %48 = load i8*, i8** %47, align 8
  %49 = icmp eq i8* %48, inttoptr (i64 -1 to i8*)
  br i1 %49, label %52, label %50

50:                                               ; preds = %41
  %51 = icmp eq %"class.WTF::StringImpl"* %42, %17
  br i1 %51, label %125, label %52

52:                                               ; preds = %41, %50
  %53 = phi %"class.WTF::AtomicString"* [ %44, %50 ], [ %43, %41 ]
  %54 = icmp eq i64 %46, 0
  %55 = select i1 %54, i64 %40, i64 %46
  %56 = add i64 %55, %45
  %57 = and i64 %56, %15
  %58 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %11, i64 %57
  %59 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %58, i64 0, i32 0, i32 0, i32 0
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %59, align 8
  %61 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %61, label %62, label %41

62:                                               ; preds = %52
  %63 = icmp eq %"class.WTF::AtomicString"* %53, null
  br i1 %63, label %72, label %64

64:                                               ; preds = %62
  %65 = bitcast %"class.WTF::AtomicString"* %53 to i64*
  store i64 0, i64* %65, align 8
  %66 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %67 = load i32, i32* %66, align 8
  %68 = add i32 %67, 2147483647
  %69 = and i32 %68, 2147483647
  %70 = and i32 %67, -2147483648
  %71 = or i32 %69, %70
  store i32 %71, i32* %66, align 8
  br label %72

72:                                               ; preds = %10, %62, %64
  %73 = phi %"class.WTF::AtomicString"* [ %53, %64 ], [ %58, %62 ], [ %23, %10 ]
  %74 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 0, i32 0, i32 0, i32 0
  %75 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %74, align 8
  %76 = icmp eq %"class.WTF::StringImpl"* %75, null
  br i1 %76, label %94, label %77

77:                                               ; preds = %72
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = load atomic i32, i32* %78 monotonic, align 4
  %80 = and i32 %79, 2
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %94

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %75, i64 0, i32 0
  %84 = load i32, i32* %83, align 4
  %85 = zext i32 %84 to i33
  %86 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %85, i33 1) #14
  %87 = extractvalue { i33, i1 } %86, 1
  %88 = extractvalue { i33, i1 } %86, 0
  %89 = icmp slt i33 %88, 0
  %90 = or i1 %87, %89
  br i1 %90, label %91, label %92, !prof !5

91:                                               ; preds = %82
  tail call void @llvm.trap() #14
  unreachable

92:                                               ; preds = %82
  %93 = trunc i33 %88 to i32
  store i32 %93, i32* %83, align 4
  br label %94

94:                                               ; preds = %92, %77, %72
  %95 = ptrtoint %"class.WTF::StringImpl"* %75 to i64
  %96 = bitcast %"class.WTF::AtomicString"* %73 to i64*
  %97 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %73, i64 0, i32 0, i32 0, i32 0
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  store i64 %95, i64* %96, align 8
  %99 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %99, label %113, label %100

100:                                              ; preds = %94
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %106 = load i32, i32* %105, align 4
  br i1 %104, label %107, label %109

107:                                              ; preds = %100
  %108 = add i32 %106, -1
  store i32 %108, i32* %105, align 4
  br label %109

109:                                              ; preds = %107, %100
  %110 = phi i32 [ %108, %107 ], [ %106, %100 ]
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %98) #14
  br label %113

113:                                              ; preds = %94, %109, %112
  %114 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %115 = load i32, i32* %114, align 4
  %116 = add i32 %115, 1
  store i32 %116, i32* %114, align 4
  %117 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %118 = load i32, i32* %117, align 8
  %119 = add i32 %118, %116
  %120 = shl i32 %119, 1
  %121 = load i32, i32* %12, align 8
  %122 = icmp ult i32 %120, %121
  br i1 %122, label %125, label %123

123:                                              ; preds = %113
  %124 = tail call %"class.WTF::AtomicString"* @_ZN3WTF9HashTableINS_12AtomicStringES1_NS_17IdentityExtractorENS_16AtomicStringHashENS_10HashTraitsIS1_EES5_NS_18PartitionAllocatorEE6ExpandEPS1_(%"class.WTF::HashTable"* %0, %"class.WTF::AtomicString"* %73)
  br label %125

125:                                              ; preds = %50, %113, %123
  %126 = phi i8 [ 1, %113 ], [ 1, %123 ], [ 0, %50 ]
  %127 = phi %"class.WTF::AtomicString"* [ %73, %113 ], [ %124, %123 ], [ %43, %50 ]
  %128 = insertvalue { %"class.WTF::AtomicString"*, i8 } undef, %"class.WTF::AtomicString"* %127, 0
  %129 = insertvalue { %"class.WTF::AtomicString"*, i8 } %128, i8 %126, 1
  ret { %"class.WTF::AtomicString"*, i8 } %129
}

declare void @_ZN8perfetto16TracedDictionary7AddItemENS_12StaticStringE(%"class.perfetto::TracedValue"* sret, %"class.perfetto::TracedDictionary"*, i8*) local_unnamed_addr #2

declare void @_ZNK3WTF6String14WriteIntoTraceEN8perfetto11TracedValueE(%"class.WTF::String"*, %"class.perfetto::TracedValue"*) local_unnamed_addr #2

declare void @_ZNO8perfetto11TracedValue12WriteBooleanEb(%"class.perfetto::TracedValue"*, i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8perfetto8internal9WriteImplIN5blink15InvalidationSet7BackingILNS3_11BackingTypeE1EE5RangeEEENS_26check_traced_value_supportIDTdeclsr3stdE5beginclsr3stdE7declvalIRT_EEEEvvE4typeENS_4base12priority_tagILm1EEENS_11TracedValueEOS9_(%"class.perfetto::TracedValue"*, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* dereferenceable(64)) local_unnamed_addr #0 comdat {
  %3 = alloca %"class.perfetto::TracedValue", align 8
  %4 = alloca %"class.perfetto::TracedValue", align 8
  %5 = alloca %"class.perfetto::TracedArray", align 8
  %6 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", align 8
  %7 = bitcast %"class.perfetto::TracedArray"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #14
  %8 = bitcast %"class.perfetto::TracedArray"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  call void @_ZNO8perfetto11TracedValue10WriteArrayEv(%"class.perfetto::TracedArray"* nonnull sret %5, %"class.perfetto::TracedValue"* %0) #14
  %9 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 32, i1 false)
  %10 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %6, i64 0, i32 0
  %11 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %1, i64 0, i32 0, i32 0
  %12 = load i32, i32* %11, align 8, !noalias !85
  store i32 %12, i32* %10, align 8, !alias.scope !85
  %13 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8, !noalias !85
  %15 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %6, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %14, %"class.WTF::StringImpl"** %15, align 8, !alias.scope !85
  %16 = icmp eq %"class.WTF::StringImpl"* %14, null
  br i1 %16, label %34, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4, !noalias !85
  %20 = and i32 %19, 2
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %34

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 0
  %24 = load i32, i32* %23, align 4, !noalias !85
  %25 = zext i32 %24 to i33
  %26 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %25, i33 1) #14
  %27 = extractvalue { i33, i1 } %26, 1
  %28 = extractvalue { i33, i1 } %26, 0
  %29 = icmp slt i33 %28, 0
  %30 = or i1 %27, %29
  br i1 %30, label %31, label %32, !prof !5

31:                                               ; preds = %22
  call void @llvm.trap() #14, !noalias !85
  unreachable

32:                                               ; preds = %22
  %33 = trunc i33 %28 to i32
  store i32 %33, i32* %23, align 4, !noalias !85
  br label %34

34:                                               ; preds = %2, %17, %32
  %35 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %6, i64 0, i32 2
  %36 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %1, i64 0, i32 0, i32 2
  %37 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %35 to i8*
  %38 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 16, i1 false) #14
  %39 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %1, i64 0, i32 1, i32 0
  %40 = load i32, i32* %39, align 8, !noalias !88
  %41 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %1, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8, !noalias !88
  %43 = icmp eq %"class.WTF::StringImpl"* %42, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4, !noalias !88
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %51 = load i32, i32* %50, align 4, !noalias !88
  %52 = zext i32 %51 to i33
  %53 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #14
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !5

58:                                               ; preds = %49
  call void @llvm.trap() #14, !noalias !88
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4, !noalias !88
  br label %61

61:                                               ; preds = %34, %44, %59
  %62 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Range"* %1, i64 0, i32 1, i32 2, i32 0, i32 0
  %63 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %62, align 8
  %64 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %6, i64 0, i32 2, i32 0, i32 0
  %65 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %6, i64 0, i32 1
  %66 = bitcast %"class.perfetto::TracedValue"* %4 to i8*
  %67 = bitcast %"class.perfetto::TracedValue"* %3 to i8*
  %68 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kIds>::Iterator"* %6, i64 0, i32 2, i32 0, i32 1
  %69 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %70 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %69, i64 0, i32 0, i32 0, i32 0
  %71 = bitcast %"class.WTF::AtomicString"* %65 to i64*
  %72 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %65, i64 0, i32 0, i32 0, i32 0
  %73 = icmp eq i32 %40, 0
  br label %74

74:                                               ; preds = %146, %61
  %75 = load i32, i32* %10, align 8
  %76 = icmp eq i32 %75, %40
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %64, align 8
  br label %116

79:                                               ; preds = %74
  %80 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %81 = icmp eq %"class.WTF::StringImpl"* %80, %42
  %82 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %64, align 8
  %83 = icmp eq %"class.WTF::AtomicString"* %82, %63
  %84 = select i1 %73, i1 %81, i1 %83
  br i1 %84, label %85, label %116

85:                                               ; preds = %79
  br i1 %43, label %99, label %86

86:                                               ; preds = %85
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = and i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %92 = load i32, i32* %91, align 4
  br i1 %90, label %93, label %95

93:                                               ; preds = %86
  %94 = add i32 %92, -1
  store i32 %94, i32* %91, align 4
  br label %95

95:                                               ; preds = %93, %86
  %96 = phi i32 [ %94, %93 ], [ %92, %86 ]
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %95
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %42) #14
  br label %99

99:                                               ; preds = %85, %95, %98
  %100 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %101 = icmp eq %"class.WTF::StringImpl"* %100, null
  br i1 %101, label %115, label %102

102:                                              ; preds = %99
  %103 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %104 = load atomic i32, i32* %103 monotonic, align 4
  %105 = and i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 0
  %108 = load i32, i32* %107, align 4
  br i1 %106, label %109, label %111

109:                                              ; preds = %102
  %110 = add i32 %108, -1
  store i32 %110, i32* %107, align 4
  br label %111

111:                                              ; preds = %109, %102
  %112 = phi i32 [ %110, %109 ], [ %108, %102 ]
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %115

114:                                              ; preds = %111
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %100) #14
  br label %115

115:                                              ; preds = %99, %111, %114
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #14
  ret void

116:                                              ; preds = %77, %79
  %117 = phi %"class.WTF::AtomicString"* [ %78, %77 ], [ %82, %79 ]
  %118 = icmp eq i32 %75, 0
  %119 = select i1 %118, %"class.WTF::AtomicString"* %65, %"class.WTF::AtomicString"* %117
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %66)
  call void @_ZN8perfetto11TracedArray10AppendItemEv(%"class.perfetto::TracedValue"* nonnull sret %4, %"class.perfetto::TracedArray"* nonnull %5) #14
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %67) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %67, i8* nonnull align 8 %66, i64 16, i1 false) #14
  call void @_ZNK3WTF12AtomicString14WriteIntoTraceEN8perfetto11TracedValueE(%"class.WTF::AtomicString"* %119, %"class.perfetto::TracedValue"* nonnull %3) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %67) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %66)
  %120 = load i32, i32* %10, align 8
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %160

122:                                              ; preds = %116
  %123 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %70, align 8
  %124 = icmp eq %"class.WTF::StringImpl"* %123, null
  br i1 %124, label %142, label %125

125:                                              ; preds = %122
  %126 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %127 = load atomic i32, i32* %126 monotonic, align 4
  %128 = and i32 %127, 2
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %142

130:                                              ; preds = %125
  %131 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 0
  %132 = load i32, i32* %131, align 4
  %133 = zext i32 %132 to i33
  %134 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %133, i33 1) #14
  %135 = extractvalue { i33, i1 } %134, 1
  %136 = extractvalue { i33, i1 } %134, 0
  %137 = icmp slt i33 %136, 0
  %138 = or i1 %135, %137
  br i1 %138, label %139, label %140, !prof !5

139:                                              ; preds = %130
  call void @llvm.trap() #14
  unreachable

140:                                              ; preds = %130
  %141 = trunc i33 %136 to i32
  store i32 %141, i32* %131, align 4
  br label %142

142:                                              ; preds = %140, %125, %122
  %143 = ptrtoint %"class.WTF::StringImpl"* %123 to i64
  %144 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %72, align 8
  store i64 %143, i64* %71, align 8
  %145 = icmp eq %"class.WTF::StringImpl"* %144, null
  br i1 %145, label %146, label %147

146:                                              ; preds = %169, %165, %142, %156, %159, %160
  br label %74

147:                                              ; preds = %142
  %148 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %149 = load atomic i32, i32* %148 monotonic, align 4
  %150 = and i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 0
  %153 = load i32, i32* %152, align 4
  br i1 %151, label %154, label %156

154:                                              ; preds = %147
  %155 = add i32 %153, -1
  store i32 %155, i32* %152, align 4
  br label %156

156:                                              ; preds = %154, %147
  %157 = phi i32 [ %155, %154 ], [ %153, %147 ]
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %146

159:                                              ; preds = %156
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %144) #14
  br label %146

160:                                              ; preds = %116
  %161 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %64, align 8
  %162 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %161, i64 1
  store %"class.WTF::AtomicString"* %162, %"class.WTF::AtomicString"** %64, align 8
  %163 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %68, align 8
  %164 = icmp eq %"class.WTF::AtomicString"* %162, %163
  br i1 %164, label %146, label %165

165:                                              ; preds = %160, %169
  %166 = phi %"class.WTF::AtomicString"* [ %170, %169 ], [ %162, %160 ]
  %167 = bitcast %"class.WTF::AtomicString"* %166 to i64*
  %168 = load i64, i64* %167, align 8
  switch i64 %168, label %146 [
    i64 -1, label %169
    i64 0, label %169
  ]

169:                                              ; preds = %165, %165
  %170 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %166, i64 1
  store %"class.WTF::AtomicString"* %170, %"class.WTF::AtomicString"** %64, align 8
  %171 = icmp eq %"class.WTF::AtomicString"* %170, %163
  br i1 %171, label %146, label %165
}

declare void @_ZNO8perfetto11TracedValue10WriteArrayEv(%"class.perfetto::TracedArray"* sret, %"class.perfetto::TracedValue"*) local_unnamed_addr #2

declare void @_ZN8perfetto11TracedArray10AppendItemEv(%"class.perfetto::TracedValue"* sret, %"class.perfetto::TracedArray"*) local_unnamed_addr #2

declare void @_ZNK3WTF12AtomicString14WriteIntoTraceEN8perfetto11TracedValueE(%"class.WTF::AtomicString"*, %"class.perfetto::TracedValue"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8perfetto8internal9WriteImplIN5blink15InvalidationSet7BackingILNS3_11BackingTypeE0EE5RangeEEENS_26check_traced_value_supportIDTdeclsr3stdE5beginclsr3stdE7declvalIRT_EEEEvvE4typeENS_4base12priority_tagILm1EEENS_11TracedValueEOS9_(%"class.perfetto::TracedValue"*, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* dereferenceable(64)) local_unnamed_addr #0 comdat {
  %3 = alloca %"class.perfetto::TracedValue", align 8
  %4 = alloca %"class.perfetto::TracedValue", align 8
  %5 = alloca %"class.perfetto::TracedArray", align 8
  %6 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", align 8
  %7 = bitcast %"class.perfetto::TracedArray"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #14
  %8 = bitcast %"class.perfetto::TracedArray"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  call void @_ZNO8perfetto11TracedValue10WriteArrayEv(%"class.perfetto::TracedArray"* nonnull sret %5, %"class.perfetto::TracedValue"* %0) #14
  %9 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 32, i1 false)
  %10 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %6, i64 0, i32 0
  %11 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %1, i64 0, i32 0, i32 0
  %12 = load i32, i32* %11, align 8, !noalias !91
  store i32 %12, i32* %10, align 8, !alias.scope !91
  %13 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8, !noalias !91
  %15 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %6, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %14, %"class.WTF::StringImpl"** %15, align 8, !alias.scope !91
  %16 = icmp eq %"class.WTF::StringImpl"* %14, null
  br i1 %16, label %34, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4, !noalias !91
  %20 = and i32 %19, 2
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %34

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 0
  %24 = load i32, i32* %23, align 4, !noalias !91
  %25 = zext i32 %24 to i33
  %26 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %25, i33 1) #14
  %27 = extractvalue { i33, i1 } %26, 1
  %28 = extractvalue { i33, i1 } %26, 0
  %29 = icmp slt i33 %28, 0
  %30 = or i1 %27, %29
  br i1 %30, label %31, label %32, !prof !5

31:                                               ; preds = %22
  call void @llvm.trap() #14, !noalias !91
  unreachable

32:                                               ; preds = %22
  %33 = trunc i33 %28 to i32
  store i32 %33, i32* %23, align 4, !noalias !91
  br label %34

34:                                               ; preds = %2, %17, %32
  %35 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %6, i64 0, i32 2
  %36 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %1, i64 0, i32 0, i32 2
  %37 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %35 to i8*
  %38 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 16, i1 false) #14
  %39 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %1, i64 0, i32 1, i32 0
  %40 = load i32, i32* %39, align 8, !noalias !94
  %41 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %1, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8, !noalias !94
  %43 = icmp eq %"class.WTF::StringImpl"* %42, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4, !noalias !94
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %51 = load i32, i32* %50, align 4, !noalias !94
  %52 = zext i32 %51 to i33
  %53 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #14
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !5

58:                                               ; preds = %49
  call void @llvm.trap() #14, !noalias !94
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4, !noalias !94
  br label %61

61:                                               ; preds = %34, %44, %59
  %62 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Range"* %1, i64 0, i32 1, i32 2, i32 0, i32 0
  %63 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %62, align 8
  %64 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %6, i64 0, i32 2, i32 0, i32 0
  %65 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %6, i64 0, i32 1
  %66 = bitcast %"class.perfetto::TracedValue"* %4 to i8*
  %67 = bitcast %"class.perfetto::TracedValue"* %3 to i8*
  %68 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kClasses>::Iterator"* %6, i64 0, i32 2, i32 0, i32 1
  %69 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %70 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %69, i64 0, i32 0, i32 0, i32 0
  %71 = bitcast %"class.WTF::AtomicString"* %65 to i64*
  %72 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %65, i64 0, i32 0, i32 0, i32 0
  %73 = icmp eq i32 %40, 0
  br label %74

74:                                               ; preds = %146, %61
  %75 = load i32, i32* %10, align 8
  %76 = icmp eq i32 %75, %40
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %64, align 8
  br label %116

79:                                               ; preds = %74
  %80 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %81 = icmp eq %"class.WTF::StringImpl"* %80, %42
  %82 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %64, align 8
  %83 = icmp eq %"class.WTF::AtomicString"* %82, %63
  %84 = select i1 %73, i1 %81, i1 %83
  br i1 %84, label %85, label %116

85:                                               ; preds = %79
  br i1 %43, label %99, label %86

86:                                               ; preds = %85
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = and i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %92 = load i32, i32* %91, align 4
  br i1 %90, label %93, label %95

93:                                               ; preds = %86
  %94 = add i32 %92, -1
  store i32 %94, i32* %91, align 4
  br label %95

95:                                               ; preds = %93, %86
  %96 = phi i32 [ %94, %93 ], [ %92, %86 ]
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %95
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %42) #14
  br label %99

99:                                               ; preds = %85, %95, %98
  %100 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %101 = icmp eq %"class.WTF::StringImpl"* %100, null
  br i1 %101, label %115, label %102

102:                                              ; preds = %99
  %103 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %104 = load atomic i32, i32* %103 monotonic, align 4
  %105 = and i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 0
  %108 = load i32, i32* %107, align 4
  br i1 %106, label %109, label %111

109:                                              ; preds = %102
  %110 = add i32 %108, -1
  store i32 %110, i32* %107, align 4
  br label %111

111:                                              ; preds = %109, %102
  %112 = phi i32 [ %110, %109 ], [ %108, %102 ]
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %115

114:                                              ; preds = %111
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %100) #14
  br label %115

115:                                              ; preds = %99, %111, %114
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #14
  ret void

116:                                              ; preds = %77, %79
  %117 = phi %"class.WTF::AtomicString"* [ %78, %77 ], [ %82, %79 ]
  %118 = icmp eq i32 %75, 0
  %119 = select i1 %118, %"class.WTF::AtomicString"* %65, %"class.WTF::AtomicString"* %117
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %66)
  call void @_ZN8perfetto11TracedArray10AppendItemEv(%"class.perfetto::TracedValue"* nonnull sret %4, %"class.perfetto::TracedArray"* nonnull %5) #14
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %67) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %67, i8* nonnull align 8 %66, i64 16, i1 false) #14
  call void @_ZNK3WTF12AtomicString14WriteIntoTraceEN8perfetto11TracedValueE(%"class.WTF::AtomicString"* %119, %"class.perfetto::TracedValue"* nonnull %3) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %67) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %66)
  %120 = load i32, i32* %10, align 8
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %160

122:                                              ; preds = %116
  %123 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %70, align 8
  %124 = icmp eq %"class.WTF::StringImpl"* %123, null
  br i1 %124, label %142, label %125

125:                                              ; preds = %122
  %126 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %127 = load atomic i32, i32* %126 monotonic, align 4
  %128 = and i32 %127, 2
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %142

130:                                              ; preds = %125
  %131 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 0
  %132 = load i32, i32* %131, align 4
  %133 = zext i32 %132 to i33
  %134 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %133, i33 1) #14
  %135 = extractvalue { i33, i1 } %134, 1
  %136 = extractvalue { i33, i1 } %134, 0
  %137 = icmp slt i33 %136, 0
  %138 = or i1 %135, %137
  br i1 %138, label %139, label %140, !prof !5

139:                                              ; preds = %130
  call void @llvm.trap() #14
  unreachable

140:                                              ; preds = %130
  %141 = trunc i33 %136 to i32
  store i32 %141, i32* %131, align 4
  br label %142

142:                                              ; preds = %140, %125, %122
  %143 = ptrtoint %"class.WTF::StringImpl"* %123 to i64
  %144 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %72, align 8
  store i64 %143, i64* %71, align 8
  %145 = icmp eq %"class.WTF::StringImpl"* %144, null
  br i1 %145, label %146, label %147

146:                                              ; preds = %169, %165, %142, %156, %159, %160
  br label %74

147:                                              ; preds = %142
  %148 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %149 = load atomic i32, i32* %148 monotonic, align 4
  %150 = and i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 0
  %153 = load i32, i32* %152, align 4
  br i1 %151, label %154, label %156

154:                                              ; preds = %147
  %155 = add i32 %153, -1
  store i32 %155, i32* %152, align 4
  br label %156

156:                                              ; preds = %154, %147
  %157 = phi i32 [ %155, %154 ], [ %153, %147 ]
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %146

159:                                              ; preds = %156
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %144) #14
  br label %146

160:                                              ; preds = %116
  %161 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %64, align 8
  %162 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %161, i64 1
  store %"class.WTF::AtomicString"* %162, %"class.WTF::AtomicString"** %64, align 8
  %163 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %68, align 8
  %164 = icmp eq %"class.WTF::AtomicString"* %162, %163
  br i1 %164, label %146, label %165

165:                                              ; preds = %160, %169
  %166 = phi %"class.WTF::AtomicString"* [ %170, %169 ], [ %162, %160 ]
  %167 = bitcast %"class.WTF::AtomicString"* %166 to i64*
  %168 = load i64, i64* %167, align 8
  switch i64 %168, label %146 [
    i64 -1, label %169
    i64 0, label %169
  ]

169:                                              ; preds = %165, %165
  %170 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %166, i64 1
  store %"class.WTF::AtomicString"* %170, %"class.WTF::AtomicString"** %64, align 8
  %171 = icmp eq %"class.WTF::AtomicString"* %170, %163
  br i1 %171, label %146, label %165
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8perfetto8internal9WriteImplIN5blink15InvalidationSet7BackingILNS3_11BackingTypeE2EE5RangeEEENS_26check_traced_value_supportIDTdeclsr3stdE5beginclsr3stdE7declvalIRT_EEEEvvE4typeENS_4base12priority_tagILm1EEENS_11TracedValueEOS9_(%"class.perfetto::TracedValue"*, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* dereferenceable(64)) local_unnamed_addr #0 comdat {
  %3 = alloca %"class.perfetto::TracedValue", align 8
  %4 = alloca %"class.perfetto::TracedValue", align 8
  %5 = alloca %"class.perfetto::TracedArray", align 8
  %6 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", align 8
  %7 = bitcast %"class.perfetto::TracedArray"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #14
  %8 = bitcast %"class.perfetto::TracedArray"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  call void @_ZNO8perfetto11TracedValue10WriteArrayEv(%"class.perfetto::TracedArray"* nonnull sret %5, %"class.perfetto::TracedValue"* %0) #14
  %9 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 32, i1 false)
  %10 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %6, i64 0, i32 0
  %11 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %1, i64 0, i32 0, i32 0
  %12 = load i32, i32* %11, align 8, !noalias !97
  store i32 %12, i32* %10, align 8, !alias.scope !97
  %13 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8, !noalias !97
  %15 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %6, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %14, %"class.WTF::StringImpl"** %15, align 8, !alias.scope !97
  %16 = icmp eq %"class.WTF::StringImpl"* %14, null
  br i1 %16, label %34, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4, !noalias !97
  %20 = and i32 %19, 2
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %34

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 0
  %24 = load i32, i32* %23, align 4, !noalias !97
  %25 = zext i32 %24 to i33
  %26 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %25, i33 1) #14
  %27 = extractvalue { i33, i1 } %26, 1
  %28 = extractvalue { i33, i1 } %26, 0
  %29 = icmp slt i33 %28, 0
  %30 = or i1 %27, %29
  br i1 %30, label %31, label %32, !prof !5

31:                                               ; preds = %22
  call void @llvm.trap() #14, !noalias !97
  unreachable

32:                                               ; preds = %22
  %33 = trunc i33 %28 to i32
  store i32 %33, i32* %23, align 4, !noalias !97
  br label %34

34:                                               ; preds = %2, %17, %32
  %35 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %6, i64 0, i32 2
  %36 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %1, i64 0, i32 0, i32 2
  %37 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %35 to i8*
  %38 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 16, i1 false) #14
  %39 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %1, i64 0, i32 1, i32 0
  %40 = load i32, i32* %39, align 8, !noalias !100
  %41 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %1, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8, !noalias !100
  %43 = icmp eq %"class.WTF::StringImpl"* %42, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4, !noalias !100
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %51 = load i32, i32* %50, align 4, !noalias !100
  %52 = zext i32 %51 to i33
  %53 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #14
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !5

58:                                               ; preds = %49
  call void @llvm.trap() #14, !noalias !100
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4, !noalias !100
  br label %61

61:                                               ; preds = %34, %44, %59
  %62 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Range"* %1, i64 0, i32 1, i32 2, i32 0, i32 0
  %63 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %62, align 8
  %64 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %6, i64 0, i32 2, i32 0, i32 0
  %65 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %6, i64 0, i32 1
  %66 = bitcast %"class.perfetto::TracedValue"* %4 to i8*
  %67 = bitcast %"class.perfetto::TracedValue"* %3 to i8*
  %68 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kTagNames>::Iterator"* %6, i64 0, i32 2, i32 0, i32 1
  %69 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %70 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %69, i64 0, i32 0, i32 0, i32 0
  %71 = bitcast %"class.WTF::AtomicString"* %65 to i64*
  %72 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %65, i64 0, i32 0, i32 0, i32 0
  %73 = icmp eq i32 %40, 0
  br label %74

74:                                               ; preds = %146, %61
  %75 = load i32, i32* %10, align 8
  %76 = icmp eq i32 %75, %40
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %64, align 8
  br label %116

79:                                               ; preds = %74
  %80 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %81 = icmp eq %"class.WTF::StringImpl"* %80, %42
  %82 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %64, align 8
  %83 = icmp eq %"class.WTF::AtomicString"* %82, %63
  %84 = select i1 %73, i1 %81, i1 %83
  br i1 %84, label %85, label %116

85:                                               ; preds = %79
  br i1 %43, label %99, label %86

86:                                               ; preds = %85
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = and i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %92 = load i32, i32* %91, align 4
  br i1 %90, label %93, label %95

93:                                               ; preds = %86
  %94 = add i32 %92, -1
  store i32 %94, i32* %91, align 4
  br label %95

95:                                               ; preds = %93, %86
  %96 = phi i32 [ %94, %93 ], [ %92, %86 ]
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %95
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %42) #14
  br label %99

99:                                               ; preds = %85, %95, %98
  %100 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %101 = icmp eq %"class.WTF::StringImpl"* %100, null
  br i1 %101, label %115, label %102

102:                                              ; preds = %99
  %103 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %104 = load atomic i32, i32* %103 monotonic, align 4
  %105 = and i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 0
  %108 = load i32, i32* %107, align 4
  br i1 %106, label %109, label %111

109:                                              ; preds = %102
  %110 = add i32 %108, -1
  store i32 %110, i32* %107, align 4
  br label %111

111:                                              ; preds = %109, %102
  %112 = phi i32 [ %110, %109 ], [ %108, %102 ]
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %115

114:                                              ; preds = %111
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %100) #14
  br label %115

115:                                              ; preds = %99, %111, %114
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #14
  ret void

116:                                              ; preds = %77, %79
  %117 = phi %"class.WTF::AtomicString"* [ %78, %77 ], [ %82, %79 ]
  %118 = icmp eq i32 %75, 0
  %119 = select i1 %118, %"class.WTF::AtomicString"* %65, %"class.WTF::AtomicString"* %117
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %66)
  call void @_ZN8perfetto11TracedArray10AppendItemEv(%"class.perfetto::TracedValue"* nonnull sret %4, %"class.perfetto::TracedArray"* nonnull %5) #14
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %67) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %67, i8* nonnull align 8 %66, i64 16, i1 false) #14
  call void @_ZNK3WTF12AtomicString14WriteIntoTraceEN8perfetto11TracedValueE(%"class.WTF::AtomicString"* %119, %"class.perfetto::TracedValue"* nonnull %3) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %67) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %66)
  %120 = load i32, i32* %10, align 8
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %160

122:                                              ; preds = %116
  %123 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %70, align 8
  %124 = icmp eq %"class.WTF::StringImpl"* %123, null
  br i1 %124, label %142, label %125

125:                                              ; preds = %122
  %126 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %127 = load atomic i32, i32* %126 monotonic, align 4
  %128 = and i32 %127, 2
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %142

130:                                              ; preds = %125
  %131 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 0
  %132 = load i32, i32* %131, align 4
  %133 = zext i32 %132 to i33
  %134 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %133, i33 1) #14
  %135 = extractvalue { i33, i1 } %134, 1
  %136 = extractvalue { i33, i1 } %134, 0
  %137 = icmp slt i33 %136, 0
  %138 = or i1 %135, %137
  br i1 %138, label %139, label %140, !prof !5

139:                                              ; preds = %130
  call void @llvm.trap() #14
  unreachable

140:                                              ; preds = %130
  %141 = trunc i33 %136 to i32
  store i32 %141, i32* %131, align 4
  br label %142

142:                                              ; preds = %140, %125, %122
  %143 = ptrtoint %"class.WTF::StringImpl"* %123 to i64
  %144 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %72, align 8
  store i64 %143, i64* %71, align 8
  %145 = icmp eq %"class.WTF::StringImpl"* %144, null
  br i1 %145, label %146, label %147

146:                                              ; preds = %169, %165, %142, %156, %159, %160
  br label %74

147:                                              ; preds = %142
  %148 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %149 = load atomic i32, i32* %148 monotonic, align 4
  %150 = and i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 0
  %153 = load i32, i32* %152, align 4
  br i1 %151, label %154, label %156

154:                                              ; preds = %147
  %155 = add i32 %153, -1
  store i32 %155, i32* %152, align 4
  br label %156

156:                                              ; preds = %154, %147
  %157 = phi i32 [ %155, %154 ], [ %153, %147 ]
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %146

159:                                              ; preds = %156
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %144) #14
  br label %146

160:                                              ; preds = %116
  %161 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %64, align 8
  %162 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %161, i64 1
  store %"class.WTF::AtomicString"* %162, %"class.WTF::AtomicString"** %64, align 8
  %163 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %68, align 8
  %164 = icmp eq %"class.WTF::AtomicString"* %162, %163
  br i1 %164, label %146, label %165

165:                                              ; preds = %160, %169
  %166 = phi %"class.WTF::AtomicString"* [ %170, %169 ], [ %162, %160 ]
  %167 = bitcast %"class.WTF::AtomicString"* %166 to i64*
  %168 = load i64, i64* %167, align 8
  switch i64 %168, label %146 [
    i64 -1, label %169
    i64 0, label %169
  ]

169:                                              ; preds = %165, %165
  %170 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %166, i64 1
  store %"class.WTF::AtomicString"* %170, %"class.WTF::AtomicString"** %64, align 8
  %171 = icmp eq %"class.WTF::AtomicString"* %170, %163
  br i1 %171, label %146, label %165
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8perfetto8internal9WriteImplIN5blink15InvalidationSet7BackingILNS3_11BackingTypeE3EE5RangeEEENS_26check_traced_value_supportIDTdeclsr3stdE5beginclsr3stdE7declvalIRT_EEEEvvE4typeENS_4base12priority_tagILm1EEENS_11TracedValueEOS9_(%"class.perfetto::TracedValue"*, %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* dereferenceable(64)) local_unnamed_addr #0 comdat {
  %3 = alloca %"class.perfetto::TracedValue", align 8
  %4 = alloca %"class.perfetto::TracedValue", align 8
  %5 = alloca %"class.perfetto::TracedArray", align 8
  %6 = alloca %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", align 8
  %7 = bitcast %"class.perfetto::TracedArray"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #14
  %8 = bitcast %"class.perfetto::TracedArray"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  call void @_ZNO8perfetto11TracedValue10WriteArrayEv(%"class.perfetto::TracedArray"* nonnull sret %5, %"class.perfetto::TracedValue"* %0) #14
  %9 = bitcast %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 32, i1 false)
  %10 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %6, i64 0, i32 0
  %11 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %1, i64 0, i32 0, i32 0
  %12 = load i32, i32* %11, align 8, !noalias !103
  store i32 %12, i32* %10, align 8, !alias.scope !103
  %13 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %14 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8, !noalias !103
  %15 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %6, i64 0, i32 1, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %14, %"class.WTF::StringImpl"** %15, align 8, !alias.scope !103
  %16 = icmp eq %"class.WTF::StringImpl"* %14, null
  br i1 %16, label %34, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load atomic i32, i32* %18 monotonic, align 4, !noalias !103
  %20 = and i32 %19, 2
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %34

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %14, i64 0, i32 0
  %24 = load i32, i32* %23, align 4, !noalias !103
  %25 = zext i32 %24 to i33
  %26 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %25, i33 1) #14
  %27 = extractvalue { i33, i1 } %26, 1
  %28 = extractvalue { i33, i1 } %26, 0
  %29 = icmp slt i33 %28, 0
  %30 = or i1 %27, %29
  br i1 %30, label %31, label %32, !prof !5

31:                                               ; preds = %22
  call void @llvm.trap() #14, !noalias !103
  unreachable

32:                                               ; preds = %22
  %33 = trunc i33 %28 to i32
  store i32 %33, i32* %23, align 4, !noalias !103
  br label %34

34:                                               ; preds = %2, %17, %32
  %35 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %6, i64 0, i32 2
  %36 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %1, i64 0, i32 0, i32 2
  %37 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %35 to i8*
  %38 = bitcast %"struct.WTF::HashTableConstIteratorAdapter"* %36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 16, i1 false) #14
  %39 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %1, i64 0, i32 1, i32 0
  %40 = load i32, i32* %39, align 8, !noalias !106
  %41 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %1, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8, !noalias !106
  %43 = icmp eq %"class.WTF::StringImpl"* %42, null
  br i1 %43, label %61, label %44

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load atomic i32, i32* %45 monotonic, align 4, !noalias !106
  %47 = and i32 %46, 2
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %51 = load i32, i32* %50, align 4, !noalias !106
  %52 = zext i32 %51 to i33
  %53 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %52, i33 1) #14
  %54 = extractvalue { i33, i1 } %53, 1
  %55 = extractvalue { i33, i1 } %53, 0
  %56 = icmp slt i33 %55, 0
  %57 = or i1 %54, %56
  br i1 %57, label %58, label %59, !prof !5

58:                                               ; preds = %49
  call void @llvm.trap() #14, !noalias !106
  unreachable

59:                                               ; preds = %49
  %60 = trunc i33 %55 to i32
  store i32 %60, i32* %50, align 4, !noalias !106
  br label %61

61:                                               ; preds = %34, %44, %59
  %62 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Range"* %1, i64 0, i32 1, i32 2, i32 0, i32 0
  %63 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %62, align 8
  %64 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %6, i64 0, i32 2, i32 0, i32 0
  %65 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %6, i64 0, i32 1
  %66 = bitcast %"class.perfetto::TracedValue"* %4 to i8*
  %67 = bitcast %"class.perfetto::TracedValue"* %3 to i8*
  %68 = getelementptr inbounds %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator", %"class.blink::InvalidationSet::Backing<blink::InvalidationSet::BackingType::kAttributes>::Iterator"* %6, i64 0, i32 2, i32 0, i32 1
  %69 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** @_ZN3WTF11g_null_atomE, align 8
  %70 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %69, i64 0, i32 0, i32 0, i32 0
  %71 = bitcast %"class.WTF::AtomicString"* %65 to i64*
  %72 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %65, i64 0, i32 0, i32 0, i32 0
  %73 = icmp eq i32 %40, 0
  br label %74

74:                                               ; preds = %146, %61
  %75 = load i32, i32* %10, align 8
  %76 = icmp eq i32 %75, %40
  br i1 %76, label %79, label %77

77:                                               ; preds = %74
  %78 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %64, align 8
  br label %116

79:                                               ; preds = %74
  %80 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %81 = icmp eq %"class.WTF::StringImpl"* %80, %42
  %82 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %64, align 8
  %83 = icmp eq %"class.WTF::AtomicString"* %82, %63
  %84 = select i1 %73, i1 %81, i1 %83
  br i1 %84, label %85, label %116

85:                                               ; preds = %79
  br i1 %43, label %99, label %86

86:                                               ; preds = %85
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = and i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %92 = load i32, i32* %91, align 4
  br i1 %90, label %93, label %95

93:                                               ; preds = %86
  %94 = add i32 %92, -1
  store i32 %94, i32* %91, align 4
  br label %95

95:                                               ; preds = %93, %86
  %96 = phi i32 [ %94, %93 ], [ %92, %86 ]
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %95
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %42) #14
  br label %99

99:                                               ; preds = %85, %95, %98
  %100 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  %101 = icmp eq %"class.WTF::StringImpl"* %100, null
  br i1 %101, label %115, label %102

102:                                              ; preds = %99
  %103 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %104 = load atomic i32, i32* %103 monotonic, align 4
  %105 = and i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %100, i64 0, i32 0
  %108 = load i32, i32* %107, align 4
  br i1 %106, label %109, label %111

109:                                              ; preds = %102
  %110 = add i32 %108, -1
  store i32 %110, i32* %107, align 4
  br label %111

111:                                              ; preds = %109, %102
  %112 = phi i32 [ %110, %109 ], [ %108, %102 ]
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %115

114:                                              ; preds = %111
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %100) #14
  br label %115

115:                                              ; preds = %99, %111, %114
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #14
  ret void

116:                                              ; preds = %77, %79
  %117 = phi %"class.WTF::AtomicString"* [ %78, %77 ], [ %82, %79 ]
  %118 = icmp eq i32 %75, 0
  %119 = select i1 %118, %"class.WTF::AtomicString"* %65, %"class.WTF::AtomicString"* %117
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %66)
  call void @_ZN8perfetto11TracedArray10AppendItemEv(%"class.perfetto::TracedValue"* nonnull sret %4, %"class.perfetto::TracedArray"* nonnull %5) #14
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %67) #14
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %67, i8* nonnull align 8 %66, i64 16, i1 false) #14
  call void @_ZNK3WTF12AtomicString14WriteIntoTraceEN8perfetto11TracedValueE(%"class.WTF::AtomicString"* %119, %"class.perfetto::TracedValue"* nonnull %3) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %67) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %66)
  %120 = load i32, i32* %10, align 8
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %160

122:                                              ; preds = %116
  %123 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %70, align 8
  %124 = icmp eq %"class.WTF::StringImpl"* %123, null
  br i1 %124, label %142, label %125

125:                                              ; preds = %122
  %126 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %127 = load atomic i32, i32* %126 monotonic, align 4
  %128 = and i32 %127, 2
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %142

130:                                              ; preds = %125
  %131 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %123, i64 0, i32 0
  %132 = load i32, i32* %131, align 4
  %133 = zext i32 %132 to i33
  %134 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %133, i33 1) #14
  %135 = extractvalue { i33, i1 } %134, 1
  %136 = extractvalue { i33, i1 } %134, 0
  %137 = icmp slt i33 %136, 0
  %138 = or i1 %135, %137
  br i1 %138, label %139, label %140, !prof !5

139:                                              ; preds = %130
  call void @llvm.trap() #14
  unreachable

140:                                              ; preds = %130
  %141 = trunc i33 %136 to i32
  store i32 %141, i32* %131, align 4
  br label %142

142:                                              ; preds = %140, %125, %122
  %143 = ptrtoint %"class.WTF::StringImpl"* %123 to i64
  %144 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %72, align 8
  store i64 %143, i64* %71, align 8
  %145 = icmp eq %"class.WTF::StringImpl"* %144, null
  br i1 %145, label %146, label %147

146:                                              ; preds = %169, %165, %142, %156, %159, %160
  br label %74

147:                                              ; preds = %142
  %148 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %149 = load atomic i32, i32* %148 monotonic, align 4
  %150 = and i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 0
  %153 = load i32, i32* %152, align 4
  br i1 %151, label %154, label %156

154:                                              ; preds = %147
  %155 = add i32 %153, -1
  store i32 %155, i32* %152, align 4
  br label %156

156:                                              ; preds = %154, %147
  %157 = phi i32 [ %155, %154 ], [ %153, %147 ]
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %146

159:                                              ; preds = %156
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %144) #14
  br label %146

160:                                              ; preds = %116
  %161 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %64, align 8
  %162 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %161, i64 1
  store %"class.WTF::AtomicString"* %162, %"class.WTF::AtomicString"** %64, align 8
  %163 = load %"class.WTF::AtomicString"*, %"class.WTF::AtomicString"** %68, align 8
  %164 = icmp eq %"class.WTF::AtomicString"* %162, %163
  br i1 %164, label %146, label %165

165:                                              ; preds = %160, %169
  %166 = phi %"class.WTF::AtomicString"* [ %170, %169 ], [ %162, %160 ]
  %167 = bitcast %"class.WTF::AtomicString"* %166 to i64*
  %168 = load i64, i64* %167, align 8
  switch i64 %168, label %146 [
    i64 -1, label %169
    i64 0, label %169
  ]

169:                                              ; preds = %165, %165
  %170 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %166, i64 1
  store %"class.WTF::AtomicString"* %170, %"class.WTF::AtomicString"** %64, align 8
  %171 = icmp eq %"class.WTF::AtomicString"* %170, %163
  br i1 %171, label %146, label %165
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #14
  %7 = load i8, i8* %6, align 8, !range !77
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #14
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #14
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #14
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #14
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #14
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #14
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #14
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #14
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #14
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #15
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #14
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #14
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #15
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #14
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #14
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #4

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #4

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind }
attributes #15 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5Range5beginEv: argument 0"}
!4 = distinct !{!4, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5Range5beginEv"}
!5 = !{!"branch_weights", i32 1, i32 2000}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5Range3endEv: argument 0"}
!8 = distinct !{!8, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5Range3endEv"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5Range5beginEv: argument 0"}
!11 = distinct !{!11, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5Range5beginEv"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5Range3endEv: argument 0"}
!14 = distinct !{!14, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5Range3endEv"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5Range5beginEv: argument 0"}
!17 = distinct !{!17, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5Range5beginEv"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5Range3endEv: argument 0"}
!20 = distinct !{!20, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5Range3endEv"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5Range5beginEv: argument 0"}
!23 = distinct !{!23, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5Range5beginEv"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5Range3endEv: argument 0"}
!26 = distinct !{!26, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5Range3endEv"}
!27 = !{!"branch_weights", i32 2000, i32 1}
!28 = !{!29}
!29 = distinct !{!29, !30, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5Range5beginEv: argument 0"}
!30 = distinct !{!30, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5Range5beginEv"}
!31 = !{!32}
!32 = distinct !{!32, !33, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5Range3endEv: argument 0"}
!33 = distinct !{!33, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5Range3endEv"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5Range5beginEv: argument 0"}
!36 = distinct !{!36, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5Range5beginEv"}
!37 = !{!38}
!38 = distinct !{!38, !39, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5Range3endEv: argument 0"}
!39 = distinct !{!39, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5Range3endEv"}
!40 = !{!41}
!41 = distinct !{!41, !42, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5Range5beginEv: argument 0"}
!42 = distinct !{!42, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5Range5beginEv"}
!43 = !{!44}
!44 = distinct !{!44, !45, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5Range3endEv: argument 0"}
!45 = distinct !{!45, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5Range3endEv"}
!46 = !{!47}
!47 = distinct !{!47, !48, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5Range5beginEv: argument 0"}
!48 = distinct !{!48, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5Range5beginEv"}
!49 = !{!50}
!50 = distinct !{!50, !51, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5Range3endEv: argument 0"}
!51 = distinct !{!51, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5Range3endEv"}
!52 = !{!"branch_weights", i32 1, i32 1048575}
!53 = !{!54}
!54 = distinct !{!54, !55, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5Range5beginEv: argument 0"}
!55 = distinct !{!55, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5Range5beginEv"}
!56 = !{!57}
!57 = distinct !{!57, !58, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5Range3endEv: argument 0"}
!58 = distinct !{!58, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5Range3endEv"}
!59 = !{!60}
!60 = distinct !{!60, !61, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5Range5beginEv: argument 0"}
!61 = distinct !{!61, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5Range5beginEv"}
!62 = !{!63}
!63 = distinct !{!63, !64, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5Range3endEv: argument 0"}
!64 = distinct !{!64, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5Range3endEv"}
!65 = !{!66}
!66 = distinct !{!66, !67, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5Range5beginEv: argument 0"}
!67 = distinct !{!67, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5Range5beginEv"}
!68 = !{!69}
!69 = distinct !{!69, !70, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5Range3endEv: argument 0"}
!70 = distinct !{!70, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5Range3endEv"}
!71 = !{!72}
!72 = distinct !{!72, !73, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5Range5beginEv: argument 0"}
!73 = distinct !{!73, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5Range5beginEv"}
!74 = !{!75}
!75 = distinct !{!75, !76, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5Range3endEv: argument 0"}
!76 = distinct !{!76, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5Range3endEv"}
!77 = !{i8 0, i8 2}
!78 = distinct !{!78, !79}
!79 = !{!"llvm.loop.unroll.disable"}
!80 = distinct !{!80, !79}
!81 = distinct !{!81, !79}
!82 = !{!83}
!83 = distinct !{!83, !84, !"_ZNSt3__14listIN9protozero12MessageArena5BlockENS_9allocatorIS3_EEE15__allocate_nodeERNS4_INS_11__list_nodeIS3_PvEEEE: argument 0"}
!84 = distinct !{!84, !"_ZNSt3__14listIN9protozero12MessageArena5BlockENS_9allocatorIS3_EEE15__allocate_nodeERNS4_INS_11__list_nodeIS3_PvEEEE"}
!85 = !{!86}
!86 = distinct !{!86, !87, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5Range5beginEv: argument 0"}
!87 = distinct !{!87, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5Range5beginEv"}
!88 = !{!89}
!89 = distinct !{!89, !90, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5Range3endEv: argument 0"}
!90 = distinct !{!90, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE1EE5Range3endEv"}
!91 = !{!92}
!92 = distinct !{!92, !93, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5Range5beginEv: argument 0"}
!93 = distinct !{!93, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5Range5beginEv"}
!94 = !{!95}
!95 = distinct !{!95, !96, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5Range3endEv: argument 0"}
!96 = distinct !{!96, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE0EE5Range3endEv"}
!97 = !{!98}
!98 = distinct !{!98, !99, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5Range5beginEv: argument 0"}
!99 = distinct !{!99, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5Range5beginEv"}
!100 = !{!101}
!101 = distinct !{!101, !102, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5Range3endEv: argument 0"}
!102 = distinct !{!102, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE2EE5Range3endEv"}
!103 = !{!104}
!104 = distinct !{!104, !105, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5Range5beginEv: argument 0"}
!105 = distinct !{!105, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5Range5beginEv"}
!106 = !{!107}
!107 = distinct !{!107, !108, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5Range3endEv: argument 0"}
!108 = distinct !{!108, !"_ZNK5blink15InvalidationSet7BackingILNS0_11BackingTypeE3EE5Range3endEv"}
