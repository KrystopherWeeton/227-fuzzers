; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_subexp.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_subexp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.vpx_writer = type { i32, i32, i32, i32, i8* }

@vp9_prob_cost = external local_unnamed_addr constant [256 x i16], align 16
@vp9_pareto8_full = external local_unnamed_addr constant [255 x [8 x i8]], align 16
@remap_prob.map_table = internal unnamed_addr constant [254 x i8] c"\14\15\16\17\18\19\00\1A\1B\1C\1D\1E\1F !\22#$%\01&'()*+,-./01\0223456789:;<=\03>?@ABCDEFGHI\04JKLMNOPQRSTU\05VWXYZ[\5C]^_`a\06bcdefghijklm\07nopqrstuvwxy\08z{|}~\7F\80\81\82\83\84\85\09\86\87\88\89\8A\8B\8C\8D\8E\8F\90\91\0A\92\93\94\95\96\97\98\99\9A\9B\9C\9D\0B\9E\9F\A0\A1\A2\A3\A4\A5\A6\A7\A8\A9\0C\AA\AB\AC\AD\AE\AF\B0\B1\B2\B3\B4\B5\0D\B6\B7\B8\B9\BA\BB\BC\BD\BE\BF\C0\C1\0E\C2\C3\C4\C5\C6\C7\C8\C9\CA\CB\CC\CD\0F\CE\CF\D0\D1\D2\D3\D4\D5\D6\D7\D8\D9\10\DA\DB\DC\DD\DE\DF\E0\E1\E2\E3\E4\E5\11\E6\E7\E8\E9\EA\EB\EC\ED\EE\EF\F0\F1\12\F2\F3\F4\F5\F6\F7\F8\F9\FA\FB\FC\FD\13", align 16
@update_bits = internal unnamed_addr constant [255 x i8] calign 16
@vpx_norm = external local_unnamed_addr constant [256 x i8], align 16

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_write_prob_diff_update(%struct.vpx_writer*, i8 zeroext, i8 zeroext) local_unnamed_addr #0 {
  %4 = zext i8 %1 to i32
  %5 = zext i8 %2 to i32
  %6 = add nsw i32 %5, -1
  %7 = icmp ult i8 %2, -127
  br i1 %7, label %8, label %21

8:                                                ; preds = %3
  %9 = shl nsw i32 %6, 1
  %10 = add nsw i32 %4, -1
  %11 = icmp slt i32 %9, %10
  br i1 %11, label %35, label %12

12:                                               ; preds = %8
  %13 = icmp ugt i8 %2, %1
  br i1 %13, label %17, label %14

14:                                               ; preds = %12
  %15 = sub nsw i32 %10, %6
  %16 = shl nsw i32 %15, 1
  br label %35

17:                                               ; preds = %12
  %18 = sub nsw i32 %6, %10
  %19 = shl nsw i32 %18, 1
  %20 = add nsw i32 %19, -1
  br label %35

21:                                               ; preds = %3
  %22 = xor i32 %4, 255
  %23 = xor i32 %5, 255
  %24 = shl nuw nsw i32 %23, 1
  %25 = icmp ult i32 %24, %22
  br i1 %25, label %35, label %26

26:                                               ; preds = %21
  %27 = icmp ult i32 %22, %23
  br i1 %27, label %31, label %28

28:                                               ; preds = %26
  %29 = sub nsw i32 %22, %23
  %30 = shl nsw i32 %29, 1
  br label %35

31:                                               ; preds = %26
  %32 = sub nsw i32 %23, %22
  %33 = shl nsw i32 %32, 1
  %34 = add nsw i32 %33, -1
  br label %35

35:                                               ; preds = %8, %14, %17, %21, %28, %31
  %36 = phi i32 [ %16, %14 ], [ %20, %17 ], [ %10, %8 ], [ %30, %28 ], [ %34, %31 ], [ %22, %21 ]
  %37 = add nsw i32 %36, -1
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [254 x i8], [254 x i8]* @remap_prob.map_table, i64 0, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = icmp ugt i8 %40, 15
  %43 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 2
  %44 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 1
  %45 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 0
  %46 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 3
  %47 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 4
  %48 = load i32, i32* %43, align 8
  %49 = load i32, i32* %44, align 4
  %50 = load i32, i32* %45, align 8
  %51 = shl i32 %49, 7
  %52 = add i32 %51, -128
  %53 = lshr i32 %52, 8
  %54 = add nuw nsw i32 %53, 1
  %55 = sub i32 %49, %54
  %56 = select i1 %42, i32 %55, i32 %54
  %57 = select i1 %42, i32 %54, i32 0
  %58 = add i32 %57, %50
  %59 = zext i32 %56 to i64
  %60 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = shl i32 %56, %62
  %64 = add nsw i32 %48, %62
  %65 = icmp sgt i32 %64, -1
  br i1 %65, label %66, label %109

66:                                               ; preds = %35
  %67 = sub i32 0, %48
  %68 = xor i32 %48, -1
  %69 = shl i32 %58, %68
  %70 = icmp slt i32 %69, 0
  br i1 %70, label %71, label %97

71:                                               ; preds = %66
  %72 = load i32, i32* %46, align 4
  %73 = add i32 %72, -1
  %74 = icmp sgt i32 %73, -1
  %75 = load i8*, i8** %47, align 8
  %76 = sext i32 %73 to i64
  %77 = getelementptr inbounds i8, i8* %75, i64 %76
  br i1 %74, label %78, label %93

78:                                               ; preds = %71, %85
  %79 = phi i8* [ %89, %85 ], [ %75, %71 ]
  %80 = phi i64 [ %92, %85 ], [ %76, %71 ]
  %81 = phi i8* [ %91, %85 ], [ %77, %71 ]
  %82 = load i8, i8* %81, align 1
  %83 = icmp eq i8 %82, -1
  %84 = getelementptr inbounds i8, i8* %79, i64 %80
  br i1 %83, label %85, label %93

85:                                               ; preds = %78
  store i8 0, i8* %84, align 1
  %86 = trunc i64 %80 to i32
  %87 = add i32 %86, -1
  %88 = icmp sgt i32 %87, -1
  %89 = load i8*, i8** %47, align 8
  %90 = sext i32 %87 to i64
  %91 = getelementptr inbounds i8, i8* %89, i64 %90
  %92 = add nsw i64 %80, -1
  br i1 %88, label %78, label %93

93:                                               ; preds = %85, %78, %71
  %94 = phi i8* [ %77, %71 ], [ %84, %78 ], [ %91, %85 ]
  %95 = load i8, i8* %94, align 1
  %96 = add i8 %95, 1
  store i8 %96, i8* %94, align 1
  br label %97

97:                                               ; preds = %93, %66
  %98 = add i32 %48, 24
  %99 = lshr i32 %58, %98
  %100 = trunc i32 %99 to i8
  %101 = load i8*, i8** %47, align 8
  %102 = load i32, i32* %46, align 4
  %103 = add i32 %102, 1
  store i32 %103, i32* %46, align 4
  %104 = zext i32 %102 to i64
  %105 = getelementptr inbounds i8, i8* %101, i64 %104
  store i8 %100, i8* %105, align 1
  %106 = shl i32 %58, %67
  %107 = and i32 %106, 16777215
  %108 = add nsw i32 %64, -8
  br label %109

109:                                              ; preds = %97, %35
  %110 = phi i32 [ %108, %97 ], [ %64, %35 ]
  %111 = phi i32 [ %107, %97 ], [ %58, %35 ]
  %112 = phi i32 [ %64, %97 ], [ %62, %35 ]
  %113 = shl i32 %111, %112
  store i32 %110, i32* %43, align 8
  store i32 %113, i32* %45, align 8
  store i32 %63, i32* %44, align 4
  br i1 %42, label %187, label %114

114:                                              ; preds = %109, %181
  %115 = phi i32 [ %185, %181 ], [ %113, %109 ]
  %116 = phi i32 [ %135, %181 ], [ %63, %109 ]
  %117 = phi i32 [ %182, %181 ], [ %110, %109 ]
  %118 = phi i32 [ %119, %181 ], [ 4, %109 ]
  %119 = add nsw i32 %118, -1
  %120 = shl i32 %116, 7
  %121 = add i32 %120, -128
  %122 = lshr i32 %121, 8
  %123 = add nuw nsw i32 %122, 1
  %124 = shl i32 1, %119
  %125 = and i32 %124, %41
  %126 = icmp eq i32 %125, 0
  %127 = sub i32 %116, %123
  %128 = select i1 %126, i32 %123, i32 %127
  %129 = select i1 %126, i32 0, i32 %123
  %130 = add i32 %129, %115
  %131 = zext i32 %128 to i64
  %132 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = shl i32 %128, %134
  %136 = add nsw i32 %117, %134
  %137 = icmp sgt i32 %136, -1
  br i1 %137, label %138, label %181

138:                                              ; preds = %114
  %139 = sub i32 0, %117
  %140 = xor i32 %117, -1
  %141 = shl i32 %130, %140
  %142 = icmp slt i32 %141, 0
  br i1 %142, label %143, label %169

143:                                              ; preds = %138
  %144 = load i32, i32* %46, align 4
  %145 = add i32 %144, -1
  %146 = icmp sgt i32 %145, -1
  %147 = load i8*, i8** %47, align 8
  %148 = sext i32 %145 to i64
  %149 = getelementptr inbounds i8, i8* %147, i64 %148
  br i1 %146, label %150, label %165

150:                                              ; preds = %143, %157
  %151 = phi i8* [ %161, %157 ], [ %147, %143 ]
  %152 = phi i64 [ %164, %157 ], [ %148, %143 ]
  %153 = phi i8* [ %163, %157 ], [ %149, %143 ]
  %154 = load i8, i8* %153, align 1
  %155 = icmp eq i8 %154, -1
  %156 = getelementptr inbounds i8, i8* %151, i64 %152
  br i1 %155, label %157, label %165

157:                                              ; preds = %150
  store i8 0, i8* %156, align 1
  %158 = trunc i64 %152 to i32
  %159 = add i32 %158, -1
  %160 = icmp sgt i32 %159, -1
  %161 = load i8*, i8** %47, align 8
  %162 = sext i32 %159 to i64
  %163 = getelementptr inbounds i8, i8* %161, i64 %162
  %164 = add nsw i64 %152, -1
  br i1 %160, label %150, label %165

165:                                              ; preds = %157, %150, %143
  %166 = phi i8* [ %149, %143 ], [ %163, %157 ], [ %156, %150 ]
  %167 = load i8, i8* %166, align 1
  %168 = add i8 %167, 1
  store i8 %168, i8* %166, align 1
  br label %169

169:                                              ; preds = %165, %138
  %170 = add i32 %117, 24
  %171 = lshr i32 %130, %170
  %172 = trunc i32 %171 to i8
  %173 = load i8*, i8** %47, align 8
  %174 = load i32, i32* %46, align 4
  %175 = add i32 %174, 1
  store i32 %175, i32* %46, align 4
  %176 = zext i32 %174 to i64
  %177 = getelementptr inbounds i8, i8* %173, i64 %176
  store i8 %172, i8* %177, align 1
  %178 = shl i32 %130, %139
  %179 = and i32 %178, 16777215
  %180 = add nsw i32 %136, -8
  br label %181

181:                                              ; preds = %169, %114
  %182 = phi i32 [ %180, %169 ], [ %136, %114 ]
  %183 = phi i32 [ %179, %169 ], [ %130, %114 ]
  %184 = phi i32 [ %136, %169 ], [ %134, %114 ]
  %185 = shl i32 %183, %184
  store i32 %182, i32* %43, align 8
  store i32 %185, i32* %45, align 8
  store i32 %135, i32* %44, align 4
  %186 = icmp eq i32 %119, 0
  br i1 %186, label %686, label %114

187:                                              ; preds = %109
  %188 = icmp ugt i8 %40, 31
  %189 = shl i32 %63, 7
  %190 = add i32 %189, -128
  %191 = lshr i32 %190, 8
  %192 = add nuw nsw i32 %191, 1
  %193 = sub i32 %63, %192
  %194 = select i1 %188, i32 %193, i32 %192
  %195 = select i1 %188, i32 %192, i32 0
  %196 = add i32 %113, %195
  %197 = zext i32 %194 to i64
  %198 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %197
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i32
  %201 = shl i32 %194, %200
  %202 = add nsw i32 %110, %200
  %203 = icmp sgt i32 %202, -1
  br i1 %203, label %204, label %247

204:                                              ; preds = %187
  %205 = sub i32 0, %110
  %206 = xor i32 %110, -1
  %207 = shl i32 %196, %206
  %208 = icmp slt i32 %207, 0
  br i1 %208, label %209, label %235

209:                                              ; preds = %204
  %210 = load i32, i32* %46, align 4
  %211 = add i32 %210, -1
  %212 = icmp sgt i32 %211, -1
  %213 = load i8*, i8** %47, align 8
  %214 = sext i32 %211 to i64
  %215 = getelementptr inbounds i8, i8* %213, i64 %214
  br i1 %212, label %216, label %231

216:                                              ; preds = %209, %223
  %217 = phi i8* [ %227, %223 ], [ %213, %209 ]
  %218 = phi i64 [ %230, %223 ], [ %214, %209 ]
  %219 = phi i8* [ %229, %223 ], [ %215, %209 ]
  %220 = load i8, i8* %219, align 1
  %221 = icmp eq i8 %220, -1
  %222 = getelementptr inbounds i8, i8* %217, i64 %218
  br i1 %221, label %223, label %231

223:                                              ; preds = %216
  store i8 0, i8* %222, align 1
  %224 = trunc i64 %218 to i32
  %225 = add i32 %224, -1
  %226 = icmp sgt i32 %225, -1
  %227 = load i8*, i8** %47, align 8
  %228 = sext i32 %225 to i64
  %229 = getelementptr inbounds i8, i8* %227, i64 %228
  %230 = add nsw i64 %218, -1
  br i1 %226, label %216, label %231

231:                                              ; preds = %223, %216, %209
  %232 = phi i8* [ %215, %209 ], [ %222, %216 ], [ %229, %223 ]
  %233 = load i8, i8* %232, align 1
  %234 = add i8 %233, 1
  store i8 %234, i8* %232, align 1
  br label %235

235:                                              ; preds = %231, %204
  %236 = add i32 %110, 24
  %237 = lshr i32 %196, %236
  %238 = trunc i32 %237 to i8
  %239 = load i8*, i8** %47, align 8
  %240 = load i32, i32* %46, align 4
  %241 = add i32 %240, 1
  store i32 %241, i32* %46, align 4
  %242 = zext i32 %240 to i64
  %243 = getelementptr inbounds i8, i8* %239, i64 %242
  store i8 %238, i8* %243, align 1
  %244 = shl i32 %196, %205
  %245 = and i32 %244, 16777215
  %246 = add nsw i32 %202, -8
  br label %247

247:                                              ; preds = %235, %187
  %248 = phi i32 [ %246, %235 ], [ %202, %187 ]
  %249 = phi i32 [ %245, %235 ], [ %196, %187 ]
  %250 = phi i32 [ %202, %235 ], [ %200, %187 ]
  %251 = shl i32 %249, %250
  store i32 %248, i32* %43, align 8
  store i32 %251, i32* %45, align 8
  store i32 %201, i32* %44, align 4
  br i1 %188, label %327, label %252

252:                                              ; preds = %247
  %253 = add nsw i32 %41, -16
  br label %254

254:                                              ; preds = %321, %252
  %255 = phi i32 [ %251, %252 ], [ %325, %321 ]
  %256 = phi i32 [ %201, %252 ], [ %275, %321 ]
  %257 = phi i32 [ %248, %252 ], [ %322, %321 ]
  %258 = phi i32 [ 4, %252 ], [ %259, %321 ]
  %259 = add nsw i32 %258, -1
  %260 = shl i32 %256, 7
  %261 = add i32 %260, -128
  %262 = lshr i32 %261, 8
  %263 = add nuw nsw i32 %262, 1
  %264 = shl i32 1, %259
  %265 = and i32 %264, %253
  %266 = icmp eq i32 %265, 0
  %267 = sub i32 %256, %263
  %268 = select i1 %266, i32 %263, i32 %267
  %269 = select i1 %266, i32 0, i32 %263
  %270 = add i32 %269, %255
  %271 = zext i32 %268 to i64
  %272 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %271
  %273 = load i8, i8* %272, align 1
  %274 = zext i8 %273 to i32
  %275 = shl i32 %268, %274
  %276 = add nsw i32 %257, %274
  %277 = icmp sgt i32 %276, -1
  br i1 %277, label %278, label %321

278:                                              ; preds = %254
  %279 = sub i32 0, %257
  %280 = xor i32 %257, -1
  %281 = shl i32 %270, %280
  %282 = icmp slt i32 %281, 0
  br i1 %282, label %283, label %309

283:                                              ; preds = %278
  %284 = load i32, i32* %46, align 4
  %285 = add i32 %284, -1
  %286 = icmp sgt i32 %285, -1
  %287 = load i8*, i8** %47, align 8
  %288 = sext i32 %285 to i64
  %289 = getelementptr inbounds i8, i8* %287, i64 %288
  br i1 %286, label %290, label %305

290:                                              ; preds = %283, %297
  %291 = phi i8* [ %301, %297 ], [ %287, %283 ]
  %292 = phi i64 [ %304, %297 ], [ %288, %283 ]
  %293 = phi i8* [ %303, %297 ], [ %289, %283 ]
  %294 = load i8, i8* %293, align 1
  %295 = icmp eq i8 %294, -1
  %296 = getelementptr inbounds i8, i8* %291, i64 %292
  br i1 %295, label %297, label %305

297:                                              ; preds = %290
  store i8 0, i8* %296, align 1
  %298 = trunc i64 %292 to i32
  %299 = add i32 %298, -1
  %300 = icmp sgt i32 %299, -1
  %301 = load i8*, i8** %47, align 8
  %302 = sext i32 %299 to i64
  %303 = getelementptr inbounds i8, i8* %301, i64 %302
  %304 = add nsw i64 %292, -1
  br i1 %300, label %290, label %305

305:                                              ; preds = %297, %290, %283
  %306 = phi i8* [ %289, %283 ], [ %303, %297 ], [ %296, %290 ]
  %307 = load i8, i8* %306, align 1
  %308 = add i8 %307, 1
  store i8 %308, i8* %306, align 1
  br label %309

309:                                              ; preds = %305, %278
  %310 = add i32 %257, 24
  %311 = lshr i32 %270, %310
  %312 = trunc i32 %311 to i8
  %313 = load i8*, i8** %47, align 8
  %314 = load i32, i32* %46, align 4
  %315 = add i32 %314, 1
  store i32 %315, i32* %46, align 4
  %316 = zext i32 %314 to i64
  %317 = getelementptr inbounds i8, i8* %313, i64 %316
  store i8 %312, i8* %317, align 1
  %318 = shl i32 %270, %279
  %319 = and i32 %318, 16777215
  %320 = add nsw i32 %276, -8
  br label %321

321:                                              ; preds = %309, %254
  %322 = phi i32 [ %320, %309 ], [ %276, %254 ]
  %323 = phi i32 [ %319, %309 ], [ %270, %254 ]
  %324 = phi i32 [ %276, %309 ], [ %274, %254 ]
  %325 = shl i32 %323, %324
  store i32 %322, i32* %43, align 8
  store i32 %325, i32* %45, align 8
  store i32 %275, i32* %44, align 4
  %326 = icmp eq i32 %259, 0
  br i1 %326, label %686, label %254

327:                                              ; preds = %247
  %328 = icmp ugt i8 %40, 63
  %329 = shl i32 %201, 7
  %330 = add i32 %329, -128
  %331 = lshr i32 %330, 8
  %332 = add nuw nsw i32 %331, 1
  %333 = sub i32 %201, %332
  %334 = select i1 %328, i32 %333, i32 %332
  %335 = select i1 %328, i32 %332, i32 0
  %336 = add i32 %251, %335
  %337 = zext i32 %334 to i64
  %338 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %337
  %339 = load i8, i8* %338, align 1
  %340 = zext i8 %339 to i32
  %341 = shl i32 %334, %340
  %342 = add nsw i32 %248, %340
  %343 = icmp sgt i32 %342, -1
  br i1 %343, label %344, label %387

344:                                              ; preds = %327
  %345 = sub i32 0, %248
  %346 = xor i32 %248, -1
  %347 = shl i32 %336, %346
  %348 = icmp slt i32 %347, 0
  br i1 %348, label %349, label %375

349:                                              ; preds = %344
  %350 = load i32, i32* %46, align 4
  %351 = add i32 %350, -1
  %352 = icmp sgt i32 %351, -1
  %353 = load i8*, i8** %47, align 8
  %354 = sext i32 %351 to i64
  %355 = getelementptr inbounds i8, i8* %353, i64 %354
  br i1 %352, label %356, label %371

356:                                              ; preds = %349, %363
  %357 = phi i8* [ %367, %363 ], [ %353, %349 ]
  %358 = phi i64 [ %370, %363 ], [ %354, %349 ]
  %359 = phi i8* [ %369, %363 ], [ %355, %349 ]
  %360 = load i8, i8* %359, align 1
  %361 = icmp eq i8 %360, -1
  %362 = getelementptr inbounds i8, i8* %357, i64 %358
  br i1 %361, label %363, label %371

363:                                              ; preds = %356
  store i8 0, i8* %362, align 1
  %364 = trunc i64 %358 to i32
  %365 = add i32 %364, -1
  %366 = icmp sgt i32 %365, -1
  %367 = load i8*, i8** %47, align 8
  %368 = sext i32 %365 to i64
  %369 = getelementptr inbounds i8, i8* %367, i64 %368
  %370 = add nsw i64 %358, -1
  br i1 %366, label %356, label %371

371:                                              ; preds = %363, %356, %349
  %372 = phi i8* [ %355, %349 ], [ %362, %356 ], [ %369, %363 ]
  %373 = load i8, i8* %372, align 1
  %374 = add i8 %373, 1
  store i8 %374, i8* %372, align 1
  br label %375

375:                                              ; preds = %371, %344
  %376 = add i32 %248, 24
  %377 = lshr i32 %336, %376
  %378 = trunc i32 %377 to i8
  %379 = load i8*, i8** %47, align 8
  %380 = load i32, i32* %46, align 4
  %381 = add i32 %380, 1
  store i32 %381, i32* %46, align 4
  %382 = zext i32 %380 to i64
  %383 = getelementptr inbounds i8, i8* %379, i64 %382
  store i8 %378, i8* %383, align 1
  %384 = shl i32 %336, %345
  %385 = and i32 %384, 16777215
  %386 = add nsw i32 %342, -8
  br label %387

387:                                              ; preds = %375, %327
  %388 = phi i32 [ %386, %375 ], [ %342, %327 ]
  %389 = phi i32 [ %385, %375 ], [ %336, %327 ]
  %390 = phi i32 [ %342, %375 ], [ %340, %327 ]
  %391 = shl i32 %389, %390
  store i32 %388, i32* %43, align 8
  store i32 %391, i32* %45, align 8
  store i32 %341, i32* %44, align 4
  br i1 %328, label %467, label %392

392:                                              ; preds = %387
  %393 = add nsw i32 %41, -32
  br label %394

394:                                              ; preds = %461, %392
  %395 = phi i32 [ %391, %392 ], [ %465, %461 ]
  %396 = phi i32 [ %341, %392 ], [ %415, %461 ]
  %397 = phi i32 [ %388, %392 ], [ %462, %461 ]
  %398 = phi i32 [ 5, %392 ], [ %399, %461 ]
  %399 = add nsw i32 %398, -1
  %400 = shl i32 %396, 7
  %401 = add i32 %400, -128
  %402 = lshr i32 %401, 8
  %403 = add nuw nsw i32 %402, 1
  %404 = shl i32 1, %399
  %405 = and i32 %404, %393
  %406 = icmp eq i32 %405, 0
  %407 = sub i32 %396, %403
  %408 = select i1 %406, i32 %403, i32 %407
  %409 = select i1 %406, i32 0, i32 %403
  %410 = add i32 %409, %395
  %411 = zext i32 %408 to i64
  %412 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %411
  %413 = load i8, i8* %412, align 1
  %414 = zext i8 %413 to i32
  %415 = shl i32 %408, %414
  %416 = add nsw i32 %397, %414
  %417 = icmp sgt i32 %416, -1
  br i1 %417, label %418, label %461

418:                                              ; preds = %394
  %419 = sub i32 0, %397
  %420 = xor i32 %397, -1
  %421 = shl i32 %410, %420
  %422 = icmp slt i32 %421, 0
  br i1 %422, label %423, label %449

423:                                              ; preds = %418
  %424 = load i32, i32* %46, align 4
  %425 = add i32 %424, -1
  %426 = icmp sgt i32 %425, -1
  %427 = load i8*, i8** %47, align 8
  %428 = sext i32 %425 to i64
  %429 = getelementptr inbounds i8, i8* %427, i64 %428
  br i1 %426, label %430, label %445

430:                                              ; preds = %423, %437
  %431 = phi i8* [ %441, %437 ], [ %427, %423 ]
  %432 = phi i64 [ %444, %437 ], [ %428, %423 ]
  %433 = phi i8* [ %443, %437 ], [ %429, %423 ]
  %434 = load i8, i8* %433, align 1
  %435 = icmp eq i8 %434, -1
  %436 = getelementptr inbounds i8, i8* %431, i64 %432
  br i1 %435, label %437, label %445

437:                                              ; preds = %430
  store i8 0, i8* %436, align 1
  %438 = trunc i64 %432 to i32
  %439 = add i32 %438, -1
  %440 = icmp sgt i32 %439, -1
  %441 = load i8*, i8** %47, align 8
  %442 = sext i32 %439 to i64
  %443 = getelementptr inbounds i8, i8* %441, i64 %442
  %444 = add nsw i64 %432, -1
  br i1 %440, label %430, label %445

445:                                              ; preds = %437, %430, %423
  %446 = phi i8* [ %429, %423 ], [ %443, %437 ], [ %436, %430 ]
  %447 = load i8, i8* %446, align 1
  %448 = add i8 %447, 1
  store i8 %448, i8* %446, align 1
  br label %449

449:                                              ; preds = %445, %418
  %450 = add i32 %397, 24
  %451 = lshr i32 %410, %450
  %452 = trunc i32 %451 to i8
  %453 = load i8*, i8** %47, align 8
  %454 = load i32, i32* %46, align 4
  %455 = add i32 %454, 1
  store i32 %455, i32* %46, align 4
  %456 = zext i32 %454 to i64
  %457 = getelementptr inbounds i8, i8* %453, i64 %456
  store i8 %452, i8* %457, align 1
  %458 = shl i32 %410, %419
  %459 = and i32 %458, 16777215
  %460 = add nsw i32 %416, -8
  br label %461

461:                                              ; preds = %449, %394
  %462 = phi i32 [ %460, %449 ], [ %416, %394 ]
  %463 = phi i32 [ %459, %449 ], [ %410, %394 ]
  %464 = phi i32 [ %416, %449 ], [ %414, %394 ]
  %465 = shl i32 %463, %464
  store i32 %462, i32* %43, align 8
  store i32 %465, i32* %45, align 8
  store i32 %415, i32* %44, align 4
  %466 = icmp eq i32 %399, 0
  br i1 %466, label %686, label %394

467:                                              ; preds = %387
  %468 = add nsw i32 %41, -64
  %469 = icmp slt i32 %468, 65
  br i1 %469, label %470, label %543

470:                                              ; preds = %467, %537
  %471 = phi i32 [ %541, %537 ], [ %391, %467 ]
  %472 = phi i32 [ %491, %537 ], [ %341, %467 ]
  %473 = phi i32 [ %538, %537 ], [ %388, %467 ]
  %474 = phi i32 [ %475, %537 ], [ 7, %467 ]
  %475 = add nsw i32 %474, -1
  %476 = shl i32 %472, 7
  %477 = add i32 %476, -128
  %478 = lshr i32 %477, 8
  %479 = add nuw nsw i32 %478, 1
  %480 = shl i32 1, %475
  %481 = and i32 %480, %468
  %482 = icmp eq i32 %481, 0
  %483 = sub i32 %472, %479
  %484 = select i1 %482, i32 %479, i32 %483
  %485 = select i1 %482, i32 0, i32 %479
  %486 = add i32 %485, %471
  %487 = zext i32 %484 to i64
  %488 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %487
  %489 = load i8, i8* %488, align 1
  %490 = zext i8 %489 to i32
  %491 = shl i32 %484, %490
  %492 = add nsw i32 %473, %490
  %493 = icmp sgt i32 %492, -1
  br i1 %493, label %494, label %537

494:                                              ; preds = %470
  %495 = sub i32 0, %473
  %496 = xor i32 %473, -1
  %497 = shl i32 %486, %496
  %498 = icmp slt i32 %497, 0
  br i1 %498, label %499, label %525

499:                                              ; preds = %494
  %500 = load i32, i32* %46, align 4
  %501 = add i32 %500, -1
  %502 = icmp sgt i32 %501, -1
  %503 = load i8*, i8** %47, align 8
  %504 = sext i32 %501 to i64
  %505 = getelementptr inbounds i8, i8* %503, i64 %504
  br i1 %502, label %506, label %521

506:                                              ; preds = %499, %513
  %507 = phi i8* [ %517, %513 ], [ %503, %499 ]
  %508 = phi i64 [ %520, %513 ], [ %504, %499 ]
  %509 = phi i8* [ %519, %513 ], [ %505, %499 ]
  %510 = load i8, i8* %509, align 1
  %511 = icmp eq i8 %510, -1
  %512 = getelementptr inbounds i8, i8* %507, i64 %508
  br i1 %511, label %513, label %521

513:                                              ; preds = %506
  store i8 0, i8* %512, align 1
  %514 = trunc i64 %508 to i32
  %515 = add i32 %514, -1
  %516 = icmp sgt i32 %515, -1
  %517 = load i8*, i8** %47, align 8
  %518 = sext i32 %515 to i64
  %519 = getelementptr inbounds i8, i8* %517, i64 %518
  %520 = add nsw i64 %508, -1
  br i1 %516, label %506, label %521

521:                                              ; preds = %513, %506, %499
  %522 = phi i8* [ %505, %499 ], [ %512, %506 ], [ %519, %513 ]
  %523 = load i8, i8* %522, align 1
  %524 = add i8 %523, 1
  store i8 %524, i8* %522, align 1
  br label %525

525:                                              ; preds = %521, %494
  %526 = add i32 %473, 24
  %527 = lshr i32 %486, %526
  %528 = trunc i32 %527 to i8
  %529 = load i8*, i8** %47, align 8
  %530 = load i32, i32* %46, align 4
  %531 = add i32 %530, 1
  store i32 %531, i32* %46, align 4
  %532 = zext i32 %530 to i64
  %533 = getelementptr inbounds i8, i8* %529, i64 %532
  store i8 %528, i8* %533, align 1
  %534 = shl i32 %486, %495
  %535 = and i32 %534, 16777215
  %536 = add nsw i32 %492, -8
  br label %537

537:                                              ; preds = %525, %470
  %538 = phi i32 [ %536, %525 ], [ %492, %470 ]
  %539 = phi i32 [ %535, %525 ], [ %486, %470 ]
  %540 = phi i32 [ %492, %525 ], [ %490, %470 ]
  %541 = shl i32 %539, %540
  store i32 %538, i32* %43, align 8
  store i32 %541, i32* %45, align 8
  store i32 %491, i32* %44, align 4
  %542 = icmp eq i32 %475, 0
  br i1 %542, label %686, label %470

543:                                              ; preds = %467
  %544 = add nsw i32 %41, -129
  %545 = ashr i32 %544, 1
  %546 = add nuw nsw i32 %545, 65
  br label %547

547:                                              ; preds = %614, %543
  %548 = phi i32 [ %391, %543 ], [ %618, %614 ]
  %549 = phi i32 [ %341, %543 ], [ %568, %614 ]
  %550 = phi i32 [ %388, %543 ], [ %615, %614 ]
  %551 = phi i32 [ 7, %543 ], [ %552, %614 ]
  %552 = add nsw i32 %551, -1
  %553 = shl i32 %549, 7
  %554 = add i32 %553, -128
  %555 = lshr i32 %554, 8
  %556 = add nuw nsw i32 %555, 1
  %557 = shl i32 1, %552
  %558 = and i32 %557, %546
  %559 = icmp eq i32 %558, 0
  %560 = sub i32 %549, %556
  %561 = select i1 %559, i32 %556, i32 %560
  %562 = select i1 %559, i32 0, i32 %556
  %563 = add i32 %562, %548
  %564 = zext i32 %561 to i64
  %565 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %564
  %566 = load i8, i8* %565, align 1
  %567 = zext i8 %566 to i32
  %568 = shl i32 %561, %567
  %569 = add nsw i32 %550, %567
  %570 = icmp sgt i32 %569, -1
  br i1 %570, label %571, label %614

571:                                              ; preds = %547
  %572 = sub i32 0, %550
  %573 = xor i32 %550, -1
  %574 = shl i32 %563, %573
  %575 = icmp slt i32 %574, 0
  br i1 %575, label %576, label %602

576:                                              ; preds = %571
  %577 = load i32, i32* %46, align 4
  %578 = add i32 %577, -1
  %579 = icmp sgt i32 %578, -1
  %580 = load i8*, i8** %47, align 8
  %581 = sext i32 %578 to i64
  %582 = getelementptr inbounds i8, i8* %580, i64 %581
  br i1 %579, label %583, label %598

583:                                              ; preds = %576, %590
  %584 = phi i8* [ %594, %590 ], [ %580, %576 ]
  %585 = phi i64 [ %597, %590 ], [ %581, %576 ]
  %586 = phi i8* [ %596, %590 ], [ %582, %576 ]
  %587 = load i8, i8* %586, align 1
  %588 = icmp eq i8 %587, -1
  %589 = getelementptr inbounds i8, i8* %584, i64 %585
  br i1 %588, label %590, label %598

590:                                              ; preds = %583
  store i8 0, i8* %589, align 1
  %591 = trunc i64 %585 to i32
  %592 = add i32 %591, -1
  %593 = icmp sgt i32 %592, -1
  %594 = load i8*, i8** %47, align 8
  %595 = sext i32 %592 to i64
  %596 = getelementptr inbounds i8, i8* %594, i64 %595
  %597 = add nsw i64 %585, -1
  br i1 %593, label %583, label %598

598:                                              ; preds = %590, %583, %576
  %599 = phi i8* [ %582, %576 ], [ %589, %583 ], [ %596, %590 ]
  %600 = load i8, i8* %599, align 1
  %601 = add i8 %600, 1
  store i8 %601, i8* %599, align 1
  br label %602

602:                                              ; preds = %598, %571
  %603 = add i32 %550, 24
  %604 = lshr i32 %563, %603
  %605 = trunc i32 %604 to i8
  %606 = load i8*, i8** %47, align 8
  %607 = load i32, i32* %46, align 4
  %608 = add i32 %607, 1
  store i32 %608, i32* %46, align 4
  %609 = zext i32 %607 to i64
  %610 = getelementptr inbounds i8, i8* %606, i64 %609
  store i8 %605, i8* %610, align 1
  %611 = shl i32 %563, %572
  %612 = and i32 %611, 16777215
  %613 = add nsw i32 %569, -8
  br label %614

614:                                              ; preds = %602, %547
  %615 = phi i32 [ %613, %602 ], [ %569, %547 ]
  %616 = phi i32 [ %612, %602 ], [ %563, %547 ]
  %617 = phi i32 [ %569, %602 ], [ %567, %547 ]
  %618 = shl i32 %616, %617
  store i32 %615, i32* %43, align 8
  store i32 %618, i32* %45, align 8
  store i32 %568, i32* %44, align 4
  %619 = icmp eq i32 %552, 0
  br i1 %619, label %620, label %547

620:                                              ; preds = %614
  %621 = and i32 %544, 1
  %622 = shl i32 %568, 7
  %623 = add i32 %622, -128
  %624 = lshr i32 %623, 8
  %625 = add nuw nsw i32 %624, 1
  %626 = icmp eq i32 %621, 0
  %627 = sub i32 %568, %625
  %628 = select i1 %626, i32 %625, i32 %627
  %629 = select i1 %626, i32 0, i32 %625
  %630 = add i32 %618, %629
  %631 = zext i32 %628 to i64
  %632 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %631
  %633 = load i8, i8* %632, align 1
  %634 = zext i8 %633 to i32
  %635 = shl i32 %628, %634
  %636 = add nsw i32 %615, %634
  %637 = icmp sgt i32 %636, -1
  br i1 %637, label %638, label %681

638:                                              ; preds = %620
  %639 = sub i32 0, %615
  %640 = xor i32 %615, -1
  %641 = shl i32 %630, %640
  %642 = icmp slt i32 %641, 0
  br i1 %642, label %643, label %669

643:                                              ; preds = %638
  %644 = load i32, i32* %46, align 4
  %645 = add i32 %644, -1
  %646 = icmp sgt i32 %645, -1
  %647 = load i8*, i8** %47, align 8
  %648 = sext i32 %645 to i64
  %649 = getelementptr inbounds i8, i8* %647, i64 %648
  br i1 %646, label %650, label %665

650:                                              ; preds = %643, %657
  %651 = phi i8* [ %661, %657 ], [ %647, %643 ]
  %652 = phi i64 [ %664, %657 ], [ %648, %643 ]
  %653 = phi i8* [ %663, %657 ], [ %649, %643 ]
  %654 = load i8, i8* %653, align 1
  %655 = icmp eq i8 %654, -1
  %656 = getelementptr inbounds i8, i8* %651, i64 %652
  br i1 %655, label %657, label %665

657:                                              ; preds = %650
  store i8 0, i8* %656, align 1
  %658 = trunc i64 %652 to i32
  %659 = add i32 %658, -1
  %660 = icmp sgt i32 %659, -1
  %661 = load i8*, i8** %47, align 8
  %662 = sext i32 %659 to i64
  %663 = getelementptr inbounds i8, i8* %661, i64 %662
  %664 = add nsw i64 %652, -1
  br i1 %660, label %650, label %665

665:                                              ; preds = %657, %650, %643
  %666 = phi i8* [ %649, %643 ], [ %656, %650 ], [ %663, %657 ]
  %667 = load i8, i8* %666, align 1
  %668 = add i8 %667, 1
  store i8 %668, i8* %666, align 1
  br label %669

669:                                              ; preds = %665, %638
  %670 = add i32 %615, 24
  %671 = lshr i32 %630, %670
  %672 = trunc i32 %671 to i8
  %673 = load i8*, i8** %47, align 8
  %674 = load i32, i32* %46, align 4
  %675 = add i32 %674, 1
  store i32 %675, i32* %46, align 4
  %676 = zext i32 %674 to i64
  %677 = getelementptr inbounds i8, i8* %673, i64 %676
  store i8 %672, i8* %677, align 1
  %678 = shl i32 %630, %639
  %679 = and i32 %678, 16777215
  %680 = add nsw i32 %636, -8
  br label %681

681:                                              ; preds = %669, %620
  %682 = phi i32 [ %680, %669 ], [ %636, %620 ]
  %683 = phi i32 [ %679, %669 ], [ %630, %620 ]
  %684 = phi i32 [ %636, %669 ], [ %634, %620 ]
  %685 = shl i32 %683, %684
  store i32 %682, i32* %43, align 8
  store i32 %685, i32* %45, align 8
  store i32 %635, i32* %44, align 4
  br label %686

686:                                              ; preds = %181, %321, %461, %537, %681
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @vp9_prob_diff_update_savings_search(i32* nocapture readonly, i8 zeroext, i8* nocapture, i8 zeroext) local_unnamed_addr #0 {
  %5 = load i32, i32* %0, align 4
  %6 = zext i8 %1 to i64
  %7 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %6
  %8 = load i16, i16* %7, align 2
  %9 = zext i16 %8 to i32
  %10 = mul i32 %5, %9
  %11 = getelementptr inbounds i32, i32* %0, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = sub nuw nsw i64 256, %6
  %14 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %13
  %15 = load i16, i16* %14, align 2
  %16 = zext i16 %15 to i32
  %17 = mul i32 %12, %16
  %18 = add i32 %17, %10
  %19 = load i8, i8* %2, align 1
  %20 = icmp ugt i8 %19, %1
  %21 = select i1 %20, i8 -1, i8 1
  %22 = zext i8 %3 to i64
  %23 = sub nuw nsw i64 256, %22
  %24 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %22
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = sub nsw i32 %26, %29
  %31 = add nsw i32 %30, 2560
  %32 = icmp sle i32 %18, %31
  %33 = icmp eq i8 %19, %1
  %34 = or i1 %32, %33
  br i1 %34, label %101, label %35

35:                                               ; preds = %4
  %36 = zext i8 %1 to i32
  %37 = add nsw i32 %36, -1
  %38 = icmp ult i8 %1, -127
  %39 = xor i32 %36, 255
  %40 = shl nuw nsw i32 %39, 1
  %41 = shl nsw i32 %37, 1
  %42 = sub i32 %18, %30
  br label %43

43:                                               ; preds = %35, %80
  %44 = phi i32 [ 0, %35 ], [ %98, %80 ]
  %45 = phi i8 [ %1, %35 ], [ %97, %80 ]
  %46 = phi i8 [ %19, %35 ], [ %99, %80 ]
  %47 = zext i8 %46 to i64
  %48 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %47
  %49 = load i16, i16* %48, align 2
  %50 = zext i16 %49 to i32
  %51 = sub nuw nsw i64 256, %47
  %52 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %51
  %53 = load i16, i16* %52, align 2
  %54 = zext i16 %53 to i32
  %55 = zext i8 %46 to i32
  br i1 %38, label %56, label %68

56:                                               ; preds = %43
  %57 = add nsw i32 %55, -1
  %58 = icmp slt i32 %41, %57
  br i1 %58, label %80, label %59

59:                                               ; preds = %56
  %60 = icmp ult i8 %46, %1
  br i1 %60, label %64, label %61

61:                                               ; preds = %59
  %62 = sub nsw i32 %57, %37
  %63 = shl nsw i32 %62, 1
  br label %80

64:                                               ; preds = %59
  %65 = sub nsw i32 %37, %57
  %66 = shl nsw i32 %65, 1
  %67 = add nsw i32 %66, -1
  br label %80

68:                                               ; preds = %43
  %69 = xor i32 %55, 255
  %70 = icmp ult i32 %40, %69
  br i1 %70, label %80, label %71

71:                                               ; preds = %68
  %72 = icmp ult i32 %69, %39
  br i1 %72, label %76, label %73

73:                                               ; preds = %71
  %74 = sub nsw i32 %69, %39
  %75 = shl nsw i32 %74, 1
  br label %80

76:                                               ; preds = %71
  %77 = sub nsw i32 %39, %69
  %78 = shl nsw i32 %77, 1
  %79 = add nsw i32 %78, -1
  br label %80

80:                                               ; preds = %56, %61, %64, %68, %73, %76
  %81 = phi i32 [ %63, %61 ], [ %67, %64 ], [ %57, %56 ], [ %75, %73 ], [ %79, %76 ], [ %69, %68 ]
  %82 = add nsw i32 %81, -1
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds [254 x i8], [254 x i8]* @remap_prob.map_table, i64 0, i64 %83
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i64
  %87 = getelementptr inbounds [255 x i8], [255 x i8]* @update_bits, i64 0, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = mul i32 %5, %50
  %91 = mul i32 %12, %54
  %92 = mul nsw i32 %89, -512
  %93 = add i32 %91, %90
  %94 = sub i32 %42, %93
  %95 = add i32 %94, %92
  %96 = icmp sgt i32 %95, %44
  %97 = select i1 %96, i8 %46, i8 %45
  %98 = select i1 %96, i32 %95, i32 %44
  %99 = add i8 %46, %21
  %100 = icmp eq i8 %99, %1
  br i1 %100, label %101, label %43

101:                                              ; preds = %80, %4
  %102 = phi i8 [ %1, %4 ], [ %97, %80 ]
  %103 = phi i32 [ 0, %4 ], [ %98, %80 ]
  store i8 %102, i8* %2, align 1
  ret i32 %103
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @vp9_prob_diff_update_savings_search_model(i32* nocapture readonly, i8 zeroext, i8* nocapture, i8 zeroext, i32) local_unnamed_addr #0 {
  %6 = load i8, i8* %2, align 1
  %7 = zext i8 %1 to i32
  %8 = icmp ugt i8 %6, %1
  %9 = zext i8 %3 to i64
  %10 = sub nuw nsw i64 256, %9
  %11 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %10
  %12 = load i16, i16* %11, align 2
  %13 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %9
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i32
  %16 = add nsw i32 %7, -1
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i32, i32* %0, i64 4
  %19 = load i32, i32* %18, align 4
  %20 = zext i8 %1 to i64
  %21 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %20
  %22 = load i16, i16* %21, align 2
  %23 = zext i16 %22 to i32
  %24 = mul i32 %19, %23
  %25 = getelementptr inbounds i32, i32* %0, i64 5
  %26 = load i32, i32* %25, align 4
  %27 = sub nuw nsw i64 256, %20
  %28 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %27
  %29 = load i16, i16* %28, align 2
  %30 = zext i16 %29 to i32
  %31 = mul i32 %26, %30
  %32 = add i32 %31, %24
  %33 = getelementptr inbounds i32, i32* %0, i64 6
  %34 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %17, i64 0
  %35 = load i8, i8* %34, align 8
  %36 = load i32, i32* %33, align 4
  %37 = zext i8 %35 to i64
  %38 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %37
  %39 = load i16, i16* %38, align 2
  %40 = zext i16 %39 to i32
  %41 = mul i32 %36, %40
  %42 = getelementptr inbounds i32, i32* %0, i64 7
  %43 = load i32, i32* %42, align 4
  %44 = sub nuw nsw i64 256, %37
  %45 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %44
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  %48 = mul i32 %43, %47
  %49 = add i32 %41, %32
  %50 = add i32 %49, %48
  %51 = getelementptr inbounds i32, i32* %0, i64 8
  %52 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %17, i64 1
  %53 = load i8, i8* %52, align 1
  %54 = load i32, i32* %51, align 4
  %55 = zext i8 %53 to i64
  %56 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %55
  %57 = load i16, i16* %56, align 2
  %58 = zext i16 %57 to i32
  %59 = mul i32 %54, %58
  %60 = getelementptr inbounds i32, i32* %0, i64 9
  %61 = load i32, i32* %60, align 4
  %62 = sub nuw nsw i64 256, %55
  %63 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %62
  %64 = load i16, i16* %63, align 2
  %65 = zext i16 %64 to i32
  %66 = mul i32 %61, %65
  %67 = add i32 %59, %50
  %68 = add i32 %67, %66
  %69 = getelementptr inbounds i32, i32* %0, i64 10
  %70 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %17, i64 2
  %71 = load i8, i8* %70, align 2
  %72 = load i32, i32* %69, align 4
  %73 = zext i8 %71 to i64
  %74 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %73
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i32
  %77 = mul i32 %72, %76
  %78 = getelementptr inbounds i32, i32* %0, i64 11
  %79 = load i32, i32* %78, align 4
  %80 = sub nuw nsw i64 256, %73
  %81 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %80
  %82 = load i16, i16* %81, align 2
  %83 = zext i16 %82 to i32
  %84 = mul i32 %79, %83
  %85 = add i32 %77, %68
  %86 = add i32 %85, %84
  %87 = getelementptr inbounds i32, i32* %0, i64 12
  %88 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %17, i64 3
  %89 = load i8, i8* %88, align 1
  %90 = load i32, i32* %87, align 4
  %91 = zext i8 %89 to i64
  %92 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %91
  %93 = load i16, i16* %92, align 2
  %94 = zext i16 %93 to i32
  %95 = mul i32 %90, %94
  %96 = getelementptr inbounds i32, i32* %0, i64 13
  %97 = load i32, i32* %96, align 4
  %98 = sub nuw nsw i64 256, %91
  %99 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %98
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = mul i32 %97, %101
  %103 = add i32 %95, %86
  %104 = add i32 %103, %102
  %105 = getelementptr inbounds i32, i32* %0, i64 14
  %106 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %17, i64 4
  %107 = load i8, i8* %106, align 4
  %108 = load i32, i32* %105, align 4
  %109 = zext i8 %107 to i64
  %110 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %109
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = mul i32 %108, %112
  %114 = getelementptr inbounds i32, i32* %0, i64 15
  %115 = load i32, i32* %114, align 4
  %116 = sub nuw nsw i64 256, %109
  %117 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %116
  %118 = load i16, i16* %117, align 2
  %119 = zext i16 %118 to i32
  %120 = mul i32 %115, %119
  %121 = add i32 %113, %104
  %122 = add i32 %121, %120
  %123 = getelementptr inbounds i32, i32* %0, i64 16
  %124 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %17, i64 5
  %125 = load i8, i8* %124, align 1
  %126 = load i32, i32* %123, align 4
  %127 = zext i8 %125 to i64
  %128 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %127
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = mul i32 %126, %130
  %132 = getelementptr inbounds i32, i32* %0, i64 17
  %133 = load i32, i32* %132, align 4
  %134 = sub nuw nsw i64 256, %127
  %135 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %134
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = mul i32 %133, %137
  %139 = add i32 %131, %122
  %140 = add i32 %139, %138
  %141 = getelementptr inbounds i32, i32* %0, i64 18
  %142 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %17, i64 6
  %143 = load i8, i8* %142, align 2
  %144 = load i32, i32* %141, align 4
  %145 = zext i8 %143 to i64
  %146 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %145
  %147 = load i16, i16* %146, align 2
  %148 = zext i16 %147 to i32
  %149 = mul i32 %144, %148
  %150 = getelementptr inbounds i32, i32* %0, i64 19
  %151 = load i32, i32* %150, align 4
  %152 = sub nuw nsw i64 256, %145
  %153 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %152
  %154 = load i16, i16* %153, align 2
  %155 = zext i16 %154 to i32
  %156 = mul i32 %151, %155
  %157 = add i32 %149, %140
  %158 = add i32 %157, %156
  %159 = getelementptr inbounds i32, i32* %0, i64 20
  %160 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %17, i64 7
  %161 = load i8, i8* %160, align 1
  %162 = load i32, i32* %159, align 4
  %163 = zext i8 %161 to i64
  %164 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %163
  %165 = load i16, i16* %164, align 2
  %166 = zext i16 %165 to i32
  %167 = mul i32 %162, %166
  %168 = getelementptr inbounds i32, i32* %0, i64 21
  %169 = load i32, i32* %168, align 4
  %170 = sub nuw nsw i64 256, %163
  %171 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %170
  %172 = load i16, i16* %171, align 2
  %173 = zext i16 %172 to i32
  %174 = mul i32 %169, %173
  %175 = add i32 %167, %158
  %176 = add i32 %175, %174
  %177 = select i1 %8, i32 -1, i32 1
  %178 = zext i16 %12 to i32
  %179 = sub nsw i32 %178, %15
  %180 = add nsw i32 %179, 2560
  %181 = icmp sgt i32 %176, %180
  br i1 %181, label %182, label %389

182:                                              ; preds = %5
  %183 = zext i8 %6 to i32
  %184 = sub nsw i32 %183, %7
  %185 = mul nsw i32 %184, %177
  %186 = icmp slt i32 %185, 0
  br i1 %186, label %187, label %389

187:                                              ; preds = %182
  %188 = icmp ult i8 %1, -127
  %189 = xor i32 %7, 255
  %190 = shl nuw nsw i32 %189, 1
  %191 = shl nsw i32 %16, 1
  %192 = zext i8 %6 to i64
  %193 = mul i32 %177, %4
  %194 = sext i32 %193 to i64
  %195 = zext i8 %1 to i64
  %196 = sext i32 %177 to i64
  br label %197

197:                                              ; preds = %187, %382
  %198 = phi i64 [ %192, %187 ], [ %385, %382 ]
  %199 = phi i8 [ %1, %187 ], [ %384, %382 ]
  %200 = phi i32 [ 0, %187 ], [ %383, %382 ]
  %201 = trunc i64 %198 to i32
  %202 = add i32 %201, -1
  %203 = icmp ugt i32 %202, 254
  br i1 %203, label %382, label %204

204:                                              ; preds = %197
  %205 = sext i32 %202 to i64
  %206 = and i32 %201, 255
  %207 = zext i32 %206 to i64
  %208 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %207
  %209 = load i16, i16* %208, align 2
  %210 = zext i16 %209 to i32
  %211 = mul i32 %19, %210
  %212 = sub nuw nsw i64 256, %207
  %213 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %212
  %214 = load i16, i16* %213, align 2
  %215 = zext i16 %214 to i32
  %216 = mul i32 %26, %215
  %217 = add i32 %216, %211
  %218 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %205, i64 0
  %219 = load i8, i8* %218, align 8
  %220 = load i32, i32* %33, align 4
  %221 = zext i8 %219 to i64
  %222 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %221
  %223 = load i16, i16* %222, align 2
  %224 = zext i16 %223 to i32
  %225 = mul i32 %220, %224
  %226 = load i32, i32* %42, align 4
  %227 = sub nuw nsw i64 256, %221
  %228 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %227
  %229 = load i16, i16* %228, align 2
  %230 = zext i16 %229 to i32
  %231 = mul i32 %226, %230
  %232 = add i32 %225, %217
  %233 = add i32 %232, %231
  %234 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %205, i64 1
  %235 = load i8, i8* %234, align 1
  %236 = load i32, i32* %51, align 4
  %237 = zext i8 %235 to i64
  %238 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %237
  %239 = load i16, i16* %238, align 2
  %240 = zext i16 %239 to i32
  %241 = mul i32 %236, %240
  %242 = load i32, i32* %60, align 4
  %243 = sub nuw nsw i64 256, %237
  %244 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %243
  %245 = load i16, i16* %244, align 2
  %246 = zext i16 %245 to i32
  %247 = mul i32 %242, %246
  %248 = add i32 %241, %233
  %249 = add i32 %248, %247
  %250 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %205, i64 2
  %251 = load i8, i8* %250, align 2
  %252 = load i32, i32* %69, align 4
  %253 = zext i8 %251 to i64
  %254 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %253
  %255 = load i16, i16* %254, align 2
  %256 = zext i16 %255 to i32
  %257 = mul i32 %252, %256
  %258 = load i32, i32* %78, align 4
  %259 = sub nuw nsw i64 256, %253
  %260 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %259
  %261 = load i16, i16* %260, align 2
  %262 = zext i16 %261 to i32
  %263 = mul i32 %258, %262
  %264 = add i32 %257, %249
  %265 = add i32 %264, %263
  %266 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %205, i64 3
  %267 = load i8, i8* %266, align 1
  %268 = zext i8 %267 to i64
  %269 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %268
  %270 = load i16, i16* %269, align 2
  %271 = zext i16 %270 to i32
  %272 = mul i32 %90, %271
  %273 = sub nuw nsw i64 256, %268
  %274 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %273
  %275 = load i16, i16* %274, align 2
  %276 = zext i16 %275 to i32
  %277 = mul i32 %97, %276
  %278 = add i32 %272, %265
  %279 = add i32 %278, %277
  %280 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %205, i64 4
  %281 = load i8, i8* %280, align 4
  %282 = zext i8 %281 to i64
  %283 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %282
  %284 = load i16, i16* %283, align 2
  %285 = zext i16 %284 to i32
  %286 = mul i32 %108, %285
  %287 = sub nuw nsw i64 256, %282
  %288 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %287
  %289 = load i16, i16* %288, align 2
  %290 = zext i16 %289 to i32
  %291 = mul i32 %115, %290
  %292 = add i32 %286, %279
  %293 = add i32 %292, %291
  %294 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %205, i64 5
  %295 = load i8, i8* %294, align 1
  %296 = zext i8 %295 to i64
  %297 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %296
  %298 = load i16, i16* %297, align 2
  %299 = zext i16 %298 to i32
  %300 = mul i32 %126, %299
  %301 = sub nuw nsw i64 256, %296
  %302 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %301
  %303 = load i16, i16* %302, align 2
  %304 = zext i16 %303 to i32
  %305 = mul i32 %133, %304
  %306 = add i32 %300, %293
  %307 = add i32 %306, %305
  %308 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %205, i64 6
  %309 = load i8, i8* %308, align 2
  %310 = load i32, i32* %141, align 4
  %311 = zext i8 %309 to i64
  %312 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %311
  %313 = load i16, i16* %312, align 2
  %314 = zext i16 %313 to i32
  %315 = mul i32 %310, %314
  %316 = load i32, i32* %150, align 4
  %317 = sub nuw nsw i64 256, %311
  %318 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %317
  %319 = load i16, i16* %318, align 2
  %320 = zext i16 %319 to i32
  %321 = mul i32 %316, %320
  %322 = add i32 %315, %307
  %323 = add i32 %322, %321
  %324 = getelementptr inbounds [255 x [8 x i8]], [255 x [8 x i8]]* @vp9_pareto8_full, i64 0, i64 %205, i64 7
  %325 = load i8, i8* %324, align 1
  %326 = load i32, i32* %159, align 4
  %327 = zext i8 %325 to i64
  %328 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %327
  %329 = load i16, i16* %328, align 2
  %330 = zext i16 %329 to i32
  %331 = mul i32 %326, %330
  %332 = load i32, i32* %168, align 4
  %333 = sub nuw nsw i64 256, %327
  %334 = getelementptr inbounds [256 x i16], [256 x i16]* @vp9_prob_cost, i64 0, i64 %333
  %335 = load i16, i16* %334, align 2
  %336 = zext i16 %335 to i32
  %337 = mul i32 %332, %336
  %338 = add i32 %331, %323
  %339 = add i32 %338, %337
  %340 = trunc i64 %198 to i8
  br i1 %188, label %341, label %353

341:                                              ; preds = %204
  %342 = add nsw i32 %206, -1
  %343 = icmp slt i32 %191, %342
  br i1 %343, label %365, label %344

344:                                              ; preds = %341
  %345 = icmp ult i8 %340, %1
  br i1 %345, label %349, label %346

346:                                              ; preds = %344
  %347 = sub nsw i32 %342, %16
  %348 = shl nsw i32 %347, 1
  br label %365

349:                                              ; preds = %344
  %350 = sub nsw i32 %16, %342
  %351 = shl nsw i32 %350, 1
  %352 = add nsw i32 %351, -1
  br label %365

353:                                              ; preds = %204
  %354 = xor i32 %206, 255
  %355 = icmp ult i32 %190, %354
  br i1 %355, label %365, label %356

356:                                              ; preds = %353
  %357 = icmp ult i32 %354, %189
  br i1 %357, label %361, label %358

358:                                              ; preds = %356
  %359 = sub nsw i32 %354, %189
  %360 = shl nsw i32 %359, 1
  br label %365

361:                                              ; preds = %356
  %362 = sub nsw i32 %189, %354
  %363 = shl nsw i32 %362, 1
  %364 = add nsw i32 %363, -1
  br label %365

365:                                              ; preds = %341, %346, %349, %353, %358, %361
  %366 = phi i32 [ %348, %346 ], [ %352, %349 ], [ %342, %341 ], [ %360, %358 ], [ %364, %361 ], [ %354, %353 ]
  %367 = add nsw i32 %366, -1
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds [254 x i8], [254 x i8]* @remap_prob.map_table, i64 0, i64 %368
  %370 = load i8, i8* %369, align 1
  %371 = zext i8 %370 to i64
  %372 = getelementptr inbounds [255 x i8], [255 x i8]* @update_bits, i64 0, i64 %371
  %373 = load i8, i8* %372, align 1
  %374 = zext i8 %373 to i32
  %375 = sub nsw i32 %176, %339
  %376 = mul nsw i32 %374, -512
  %377 = sub i32 %375, %179
  %378 = add i32 %377, %376
  %379 = icmp sgt i32 %378, %200
  %380 = select i1 %379, i32 %378, i32 %200
  %381 = select i1 %379, i8 %340, i8 %199
  br label %382

382:                                              ; preds = %365, %197
  %383 = phi i32 [ %200, %197 ], [ %380, %365 ]
  %384 = phi i8 [ %199, %197 ], [ %381, %365 ]
  %385 = add i64 %198, %194
  %386 = sub nsw i64 %385, %195
  %387 = mul nsw i64 %386, %196
  %388 = icmp slt i64 %387, 0
  br i1 %388, label %197, label %389

389:                                              ; preds = %382, %182, %5
  %390 = phi i32 [ 0, %5 ], [ 0, %182 ], [ %383, %382 ]
  %391 = phi i8 [ %1, %5 ], [ %1, %182 ], [ %384, %382 ]
  store i8 %391, i8* %2, align 1
  ret i32 %390
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_cond_prob_diff_update(%struct.vpx_writer*, i8* nocapture, i32* nocapture readonly) local_unnamed_addr #2 {
  %4 = alloca i8, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #3
  store i8 -86, i8* %4, align 1
  %5 = load i32, i32* %2, align 4
  %6 = getelementptr inbounds i32, i32* %2, i64 1
  %7 = load i32, i32* %6, align 4
  %8 = add i32 %7, %5
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %26, label %10

10:                                               ; preds = %3
  %11 = zext i32 %5 to i64
  %12 = shl nuw nsw i64 %11, 8
  %13 = lshr i32 %8, 1
  %14 = zext i32 %13 to i64
  %15 = add nuw nsw i64 %12, %14
  %16 = zext i32 %8 to i64
  %17 = udiv i64 %15, %16
  %18 = trunc i64 %17 to i32
  %19 = sub nsw i32 255, %18
  %20 = lshr i32 %19, 23
  %21 = or i32 %20, %18
  %22 = icmp eq i32 %18, 0
  %23 = zext i1 %22 to i32
  %24 = or i32 %21, %23
  %25 = trunc i32 %24 to i8
  br label %26

26:                                               ; preds = %3, %10
  %27 = phi i8 [ %25, %10 ], [ -128, %3 ]
  store i8 %27, i8* %4, align 1
  %28 = load i8, i8* %1, align 1
  %29 = call i32 @vp9_prob_diff_update_savings_search(i32* %2, i8 zeroext %28, i8* nonnull %4, i8 zeroext -4)
  %30 = icmp sgt i32 %29, 0
  %31 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 2
  %32 = load i32, i32* %31, align 8
  %33 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = mul i32 %34, 252
  %38 = add i32 %37, -252
  %39 = lshr i32 %38, 8
  %40 = add nuw nsw i32 %39, 1
  br i1 %30, label %41, label %105

41:                                               ; preds = %26
  %42 = sub i32 %34, %40
  %43 = add i32 %40, %36
  %44 = zext i32 %42 to i64
  %45 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = shl i32 %42, %47
  %49 = add nsw i32 %32, %47
  %50 = icmp sgt i32 %49, -1
  br i1 %50, label %51, label %98

51:                                               ; preds = %41
  %52 = sub i32 0, %32
  %53 = xor i32 %32, -1
  %54 = shl i32 %43, %53
  %55 = icmp slt i32 %54, 0
  br i1 %55, label %56, label %84

56:                                               ; preds = %51
  %57 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 3
  %58 = load i32, i32* %57, align 4
  %59 = add i32 %58, -1
  %60 = icmp sgt i32 %59, -1
  %61 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 4
  %62 = load i8*, i8** %61, align 8
  %63 = sext i32 %59 to i64
  %64 = getelementptr inbounds i8, i8* %62, i64 %63
  br i1 %60, label %65, label %80

65:                                               ; preds = %56, %72
  %66 = phi i8* [ %76, %72 ], [ %62, %56 ]
  %67 = phi i64 [ %79, %72 ], [ %63, %56 ]
  %68 = phi i8* [ %78, %72 ], [ %64, %56 ]
  %69 = load i8, i8* %68, align 1
  %70 = icmp eq i8 %69, -1
  %71 = getelementptr inbounds i8, i8* %66, i64 %67
  br i1 %70, label %72, label %80

72:                                               ; preds = %65
  store i8 0, i8* %71, align 1
  %73 = trunc i64 %67 to i32
  %74 = add i32 %73, -1
  %75 = icmp sgt i32 %74, -1
  %76 = load i8*, i8** %61, align 8
  %77 = sext i32 %74 to i64
  %78 = getelementptr inbounds i8, i8* %76, i64 %77
  %79 = add nsw i64 %67, -1
  br i1 %75, label %65, label %80

80:                                               ; preds = %72, %65, %56
  %81 = phi i8* [ %64, %56 ], [ %71, %65 ], [ %78, %72 ]
  %82 = load i8, i8* %81, align 1
  %83 = add i8 %82, 1
  store i8 %83, i8* %81, align 1
  br label %84

84:                                               ; preds = %80, %51
  %85 = add i32 %32, 24
  %86 = lshr i32 %43, %85
  %87 = trunc i32 %86 to i8
  %88 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 4
  %89 = load i8*, i8** %88, align 8
  %90 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 3
  %91 = load i32, i32* %90, align 4
  %92 = add i32 %91, 1
  store i32 %92, i32* %90, align 4
  %93 = zext i32 %91 to i64
  %94 = getelementptr inbounds i8, i8* %89, i64 %93
  store i8 %87, i8* %94, align 1
  %95 = shl i32 %43, %52
  %96 = and i32 %95, 16777215
  %97 = add nsw i32 %49, -8
  br label %98

98:                                               ; preds = %41, %84
  %99 = phi i32 [ %97, %84 ], [ %49, %41 ]
  %100 = phi i32 [ %96, %84 ], [ %43, %41 ]
  %101 = phi i32 [ %49, %84 ], [ %47, %41 ]
  %102 = shl i32 %100, %101
  store i32 %99, i32* %31, align 8
  store i32 %102, i32* %35, align 8
  store i32 %48, i32* %33, align 4
  %103 = load i8, i8* %4, align 1
  %104 = load i8, i8* %1, align 1
  tail call void @vp9_write_prob_diff_update(%struct.vpx_writer* %0, i8 zeroext %103, i8 zeroext %104)
  store i8 %103, i8* %1, align 1
  br label %165

105:                                              ; preds = %26
  %106 = zext i32 %40 to i64
  %107 = getelementptr inbounds [256 x i8], [256 x i8]* @vpx_norm, i64 0, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = shl i32 %40, %109
  %111 = add nsw i32 %32, %109
  %112 = icmp sgt i32 %111, -1
  br i1 %112, label %113, label %160

113:                                              ; preds = %105
  %114 = sub i32 0, %32
  %115 = xor i32 %32, -1
  %116 = shl i32 %36, %115
  %117 = icmp slt i32 %116, 0
  br i1 %117, label %118, label %146

118:                                              ; preds = %113
  %119 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 3
  %120 = load i32, i32* %119, align 4
  %121 = add i32 %120, -1
  %122 = icmp sgt i32 %121, -1
  %123 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 4
  %124 = load i8*, i8** %123, align 8
  %125 = sext i32 %121 to i64
  %126 = getelementptr inbounds i8, i8* %124, i64 %125
  br i1 %122, label %127, label %142

127:                                              ; preds = %118, %134
  %128 = phi i8* [ %138, %134 ], [ %124, %118 ]
  %129 = phi i64 [ %141, %134 ], [ %125, %118 ]
  %130 = phi i8* [ %140, %134 ], [ %126, %118 ]
  %131 = load i8, i8* %130, align 1
  %132 = icmp eq i8 %131, -1
  %133 = getelementptr inbounds i8, i8* %128, i64 %129
  br i1 %132, label %134, label %142

134:                                              ; preds = %127
  store i8 0, i8* %133, align 1
  %135 = trunc i64 %129 to i32
  %136 = add i32 %135, -1
  %137 = icmp sgt i32 %136, -1
  %138 = load i8*, i8** %123, align 8
  %139 = sext i32 %136 to i64
  %140 = getelementptr inbounds i8, i8* %138, i64 %139
  %141 = add nsw i64 %129, -1
  br i1 %137, label %127, label %142

142:                                              ; preds = %134, %127, %118
  %143 = phi i8* [ %126, %118 ], [ %133, %127 ], [ %140, %134 ]
  %144 = load i8, i8* %143, align 1
  %145 = add i8 %144, 1
  store i8 %145, i8* %143, align 1
  br label %146

146:                                              ; preds = %142, %113
  %147 = add i32 %32, 24
  %148 = lshr i32 %36, %147
  %149 = trunc i32 %148 to i8
  %150 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 4
  %151 = load i8*, i8** %150, align 8
  %152 = getelementptr inbounds %struct.vpx_writer, %struct.vpx_writer* %0, i64 0, i32 3
  %153 = load i32, i32* %152, align 4
  %154 = add i32 %153, 1
  store i32 %154, i32* %152, align 4
  %155 = zext i32 %153 to i64
  %156 = getelementptr inbounds i8, i8* %151, i64 %155
  store i8 %149, i8* %156, align 1
  %157 = shl i32 %36, %114
  %158 = and i32 %157, 16777215
  %159 = add nsw i32 %111, -8
  br label %160

160:                                              ; preds = %105, %146
  %161 = phi i32 [ %159, %146 ], [ %111, %105 ]
  %162 = phi i32 [ %158, %146 ], [ %36, %105 ]
  %163 = phi i32 [ %111, %146 ], [ %109, %105 ]
  %164 = shl i32 %162, %163
  store i32 %161, i32* %31, align 8
  store i32 %164, i32* %35, align 8
  store i32 %110, i32* %33, align 4
  br label %165

165:                                              ; preds = %160, %98
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #3
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
