; ModuleID = '../../third_party/skia/src/gpu/GrPaint.cpp'
source_filename = "../../third_party/skia/src/gpu/GrPaint.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.GrXPFactory = type { i32 (...)** }
%class.GrPaint = type <{ %class.GrXPFactory*, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr", i8, [3 x i8], %struct.SkRGBA4f, [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.GrFragmentProcessor* }
%class.GrFragmentProcessor = type <{ %class.GrProcessor, %class.SkSTArray, %class.GrFragmentProcessor*, i32, %"struct.SkSL::SampleUsage", [4 x i8] }>
%class.GrProcessor = type { i32 (...)**, i32, i32 }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray }
%class.SkAlignedSTStorage = type { [8 x i8] }
%class.SkTArray = type { %"class.std::__1::unique_ptr"*, i64 }
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>
%struct.SkRGBA4f = type { float, float, float, float }

@_ZZNK7GrPaint22isConstantBlendedColorEP8SkRGBA4fIL11SkAlphaType2EEE4kSrc = internal unnamed_addr global %class.GrXPFactory* null, align 8
@_ZGVZNK7GrPaint22isConstantBlendedColorEP8SkRGBA4fIL11SkAlphaType2EEE4kSrc = internal global i64 0, align 8
@_ZZNK7GrPaint22isConstantBlendedColorEP8SkRGBA4fIL11SkAlphaType2EEE6kClear = internal unnamed_addr global %class.GrXPFactory* null, align 8
@_ZGVZNK7GrPaint22isConstantBlendedColorEP8SkRGBA4fIL11SkAlphaType2EEE6kClear = internal global i64 0, align 8

@_ZN7GrPaintC1ERKS_ = hidden unnamed_addr alias void (%class.GrPaint*, %class.GrPaint*), void (%class.GrPaint*, %class.GrPaint*)* @_ZN7GrPaintC2ERKS_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7GrPaintC2ERKS_(%class.GrPaint* nocapture, %class.GrPaint* nocapture readonly dereferenceable(48)) unnamed_addr #0 align 2 {
  %3 = bitcast %class.GrPaint* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %class.GrPaint* %0 to i64*
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds %class.GrPaint, %class.GrPaint* %0, i64 0, i32 1
  %7 = getelementptr inbounds %class.GrPaint, %class.GrPaint* %0, i64 0, i32 2
  %8 = bitcast %"class.std::__1::unique_ptr"* %7 to i64*
  %9 = getelementptr inbounds %class.GrPaint, %class.GrPaint* %0, i64 0, i32 3
  %10 = getelementptr inbounds %class.GrPaint, %class.GrPaint* %1, i64 0, i32 3
  %11 = bitcast %"class.std::__1::unique_ptr"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 16, i1 false)
  %12 = load i8, i8* %10, align 8, !range !2
  store i8 %12, i8* %9, align 8
  %13 = getelementptr inbounds %class.GrPaint, %class.GrPaint* %0, i64 0, i32 5
  %14 = getelementptr inbounds %class.GrPaint, %class.GrPaint* %1, i64 0, i32 5
  %15 = bitcast %struct.SkRGBA4f* %13 to i8*
  %16 = bitcast %struct.SkRGBA4f* %14 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %15, i8* align 4 %16, i64 16, i1 false)
  %17 = getelementptr inbounds %class.GrPaint, %class.GrPaint* %1, i64 0, i32 1, i32 0, i32 0, i32 0
  %18 = load %class.GrFragmentProcessor*, %class.GrFragmentProcessor** %17, align 8
  %19 = icmp eq %class.GrFragmentProcessor* %18, null
  br i1 %19, label %36, label %20

20:                                               ; preds = %2
  %21 = bitcast %"class.std::__1::unique_ptr"* %6 to i64*
  %22 = bitcast %class.GrFragmentProcessor* %18 to %class.GrFragmentProcessor* (%class.GrFragmentProcessor*)***
  %23 = load %class.GrFragmentProcessor* (%class.GrFragmentProcessor*)**, %class.GrFragmentProcessor* (%class.GrFragmentProcessor*)*** %22, align 8
  %24 = getelementptr inbounds %class.GrFragmentProcessor* (%class.GrFragmentProcessor*)*, %class.GrFragmentProcessor* (%class.GrFragmentProcessor*)** %23, i64 3
  %25 = load %class.GrFragmentProcessor* (%class.GrFragmentProcessor*)*, %class.GrFragmentProcessor* (%class.GrFragmentProcessor*)** %24, align 8
  %26 = tail call %class.GrFragmentProcessor* %25(%class.GrFragmentProcessor* nonnull %18) #4
  %27 = ptrtoint %class.GrFragmentProcessor* %26 to i64
  %28 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %6, i64 0, i32 0, i32 0, i32 0
  %29 = load %class.GrFragmentProcessor*, %class.GrFragmentProcessor** %28, align 8
  store i64 %27, i64* %21, align 8
  %30 = icmp eq %class.GrFragmentProcessor* %29, null
  br i1 %30, label %36, label %31

31:                                               ; preds = %20
  %32 = bitcast %class.GrFragmentProcessor* %29 to void (%class.GrFragmentProcessor*)***
  %33 = load void (%class.GrFragmentProcessor*)**, void (%class.GrFragmentProcessor*)*** %32, align 8
  %34 = getelementptr inbounds void (%class.GrFragmentProcessor*)*, void (%class.GrFragmentProcessor*)** %33, i64 1
  %35 = load void (%class.GrFragmentProcessor*)*, void (%class.GrFragmentProcessor*)** %34, align 8
  tail call void %35(%class.GrFragmentProcessor* nonnull %29) #4
  br label %36

36:                                               ; preds = %2, %20, %31
  %37 = getelementptr inbounds %class.GrPaint, %class.GrPaint* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %38 = load %class.GrFragmentProcessor*, %class.GrFragmentProcessor** %37, align 8
  %39 = icmp eq %class.GrFragmentProcessor* %38, null
  br i1 %39, label %55, label %40

40:                                               ; preds = %36
  %41 = bitcast %class.GrFragmentProcessor* %38 to %class.GrFragmentProcessor* (%class.GrFragmentProcessor*)***
  %42 = load %class.GrFragmentProcessor* (%class.GrFragmentProcessor*)**, %class.GrFragmentProcessor* (%class.GrFragmentProcessor*)*** %41, align 8
  %43 = getelementptr inbounds %class.GrFragmentProcessor* (%class.GrFragmentProcessor*)*, %class.GrFragmentProcessor* (%class.GrFragmentProcessor*)** %42, i64 3
  %44 = load %class.GrFragmentProcessor* (%class.GrFragmentProcessor*)*, %class.GrFragmentProcessor* (%class.GrFragmentProcessor*)** %43, align 8
  %45 = tail call %class.GrFragmentProcessor* %44(%class.GrFragmentProcessor* nonnull %38) #4
  %46 = ptrtoint %class.GrFragmentProcessor* %45 to i64
  %47 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %7, i64 0, i32 0, i32 0, i32 0
  %48 = load %class.GrFragmentProcessor*, %class.GrFragmentProcessor** %47, align 8
  store i64 %46, i64* %8, align 8
  %49 = icmp eq %class.GrFragmentProcessor* %48, null
  br i1 %49, label %55, label %50

50:                                               ; preds = %40
  %51 = bitcast %class.GrFragmentProcessor* %48 to void (%class.GrFragmentProcessor*)***
  %52 = load void (%class.GrFragmentProcessor*)**, void (%class.GrFragmentProcessor*)*** %51, align 8
  %53 = getelementptr inbounds void (%class.GrFragmentProcessor*)*, void (%class.GrFragmentProcessor*)** %52, i64 1
  %54 = load void (%class.GrFragmentProcessor*)*, void (%class.GrFragmentProcessor*)** %53, align 8
  tail call void %54(%class.GrFragmentProcessor* nonnull %48) #4
  br label %55

55:                                               ; preds = %36, %40, %50
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7GrPaint22setPorterDuffXPFactoryE11SkBlendMode(%class.GrPaint* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = tail call %class.GrXPFactory* @_ZN21GrPorterDuffXPFactory3GetE11SkBlendMode(i32 %1) #4
  %4 = getelementptr inbounds %class.GrPaint, %class.GrPaint* %0, i64 0, i32 0
  store %class.GrXPFactory* %3, %class.GrXPFactory** %4, align 8
  %5 = icmp eq %class.GrXPFactory* %3, null
  %6 = zext i1 %5 to i8
  %7 = getelementptr inbounds %class.GrPaint, %class.GrPaint* %0, i64 0, i32 3
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = and i8 %8, %6
  store i8 %9, i8* %7, align 8
  ret void
}

declare %class.GrXPFactory* @_ZN21GrPorterDuffXPFactory3GetE11SkBlendMode(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7GrPaint25setCoverageSetOpXPFactoryEN8SkRegion2OpEb(%class.GrPaint* nocapture, i32, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = tail call %class.GrXPFactory* @_ZN24GrCoverageSetOpXPFactory3GetEN8SkRegion2OpEb(i32 %1, i1 zeroext %2) #4
  %5 = getelementptr inbounds %class.GrPaint, %class.GrPaint* %0, i64 0, i32 0
  store %class.GrXPFactory* %4, %class.GrXPFactory** %5, align 8
  %6 = icmp eq %class.GrXPFactory* %4, null
  %7 = zext i1 %6 to i8
  %8 = getelementptr inbounds %class.GrPaint, %class.GrPaint* %0, i64 0, i32 3
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = and i8 %9, %7
  store i8 %10, i8* %8, align 8
  ret void
}

declare %class.GrXPFactory* @_ZN24GrCoverageSetOpXPFactory3GetEN8SkRegion2OpEb(i32, i1 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK7GrPaint22isConstantBlendedColorEP8SkRGBA4fIL11SkAlphaType2EE(%class.GrPaint* nocapture readonly, %struct.SkRGBA4f* nocapture) local_unnamed_addr #0 align 2 {
  %3 = load atomic i8, i8* bitcast (i64* @_ZGVZNK7GrPaint22isConstantBlendedColorEP8SkRGBA4fIL11SkAlphaType2EEE4kSrc to i8*) acquire, align 8
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %10, !prof !3

5:                                                ; preds = %2
  %6 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZNK7GrPaint22isConstantBlendedColorEP8SkRGBA4fIL11SkAlphaType2EEE4kSrc) #4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %5
  %9 = tail call %class.GrXPFactory* @_ZN21GrPorterDuffXPFactory3GetE11SkBlendMode(i32 1) #4
  store %class.GrXPFactory* %9, %class.GrXPFactory** @_ZZNK7GrPaint22isConstantBlendedColorEP8SkRGBA4fIL11SkAlphaType2EEE4kSrc, align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZNK7GrPaint22isConstantBlendedColorEP8SkRGBA4fIL11SkAlphaType2EEE4kSrc) #4
  br label %10

10:                                               ; preds = %5, %8, %2
  %11 = load atomic i8, i8* bitcast (i64* @_ZGVZNK7GrPaint22isConstantBlendedColorEP8SkRGBA4fIL11SkAlphaType2EEE6kClear to i8*) acquire, align 8
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %18, !prof !3

13:                                               ; preds = %10
  %14 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZNK7GrPaint22isConstantBlendedColorEP8SkRGBA4fIL11SkAlphaType2EEE6kClear) #4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %13
  %17 = tail call %class.GrXPFactory* @_ZN21GrPorterDuffXPFactory3GetE11SkBlendMode(i32 0) #4
  store %class.GrXPFactory* %17, %class.GrXPFactory** @_ZZNK7GrPaint22isConstantBlendedColorEP8SkRGBA4fIL11SkAlphaType2EEE6kClear, align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZNK7GrPaint22isConstantBlendedColorEP8SkRGBA4fIL11SkAlphaType2EEE6kClear) #4
  br label %18

18:                                               ; preds = %13, %16, %10
  %19 = load %class.GrXPFactory*, %class.GrXPFactory** @_ZZNK7GrPaint22isConstantBlendedColorEP8SkRGBA4fIL11SkAlphaType2EEE6kClear, align 8
  %20 = getelementptr inbounds %class.GrPaint, %class.GrPaint* %0, i64 0, i32 0
  %21 = load %class.GrXPFactory*, %class.GrXPFactory** %20, align 8
  %22 = icmp eq %class.GrXPFactory* %19, %21
  br i1 %22, label %23, label %25

23:                                               ; preds = %18
  %24 = bitcast %struct.SkRGBA4f* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %24, i8 0, i64 16, i1 false)
  br label %42

25:                                               ; preds = %18
  %26 = getelementptr inbounds %class.GrPaint, %class.GrPaint* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %27 = load %class.GrFragmentProcessor*, %class.GrFragmentProcessor** %26, align 8
  %28 = icmp eq %class.GrFragmentProcessor* %27, null
  br i1 %28, label %29, label %42

29:                                               ; preds = %25
  %30 = load %class.GrXPFactory*, %class.GrXPFactory** @_ZZNK7GrPaint22isConstantBlendedColorEP8SkRGBA4fIL11SkAlphaType2EEE4kSrc, align 8
  %31 = icmp eq %class.GrXPFactory* %30, %21
  br i1 %31, label %38, label %32

32:                                               ; preds = %29
  %33 = icmp eq %class.GrXPFactory* %21, null
  br i1 %33, label %34, label %42

34:                                               ; preds = %32
  %35 = getelementptr inbounds %class.GrPaint, %class.GrPaint* %0, i64 0, i32 5, i32 3
  %36 = load float, float* %35, align 4
  %37 = fcmp oeq float %36, 1.000000e+00
  br i1 %37, label %38, label %42

38:                                               ; preds = %34, %29
  %39 = getelementptr inbounds %class.GrPaint, %class.GrPaint* %0, i64 0, i32 5
  %40 = bitcast %struct.SkRGBA4f* %1 to i8*
  %41 = bitcast %struct.SkRGBA4f* %39 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 16, i1 false)
  br label %42

42:                                               ; preds = %25, %34, %32, %38, %23
  %43 = phi i1 [ true, %23 ], [ true, %38 ], [ false, %25 ], [ false, %32 ], [ false, %34 ]
  ret i1 %43
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 1048575}
