; ModuleID = '../../third_party/pdfium/core/fpdfapi/render/cpdf_rendershading.cpp'
source_filename = "../../third_party/pdfium/core/fpdfapi/render/cpdf_rendershading.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CPDF_DeviceBuffer = type { %"class.fxcrt::UnownedPtr.197", %"class.fxcrt::UnownedPtr.198", %"class.fxcrt::UnownedPtr.199", %"class.fxcrt::RetainPtr", %struct.FX_RECT, %class.CFX_Matrix }
%"class.fxcrt::UnownedPtr.197" = type { %class.CFX_RenderDevice* }
%class.CFX_RenderDevice = type { i32 (...)**, %"class.fxcrt::RetainPtr", i32, i32, i32, i32, i8, %struct.FX_RECT, %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %class.RenderDeviceDriverIface* }
%class.RenderDeviceDriverIface = type { i32 (...)** }
%"class.fxcrt::UnownedPtr.198" = type { %class.CPDF_RenderContext* }
%class.CPDF_RenderContext = type opaque
%"class.fxcrt::UnownedPtr.199" = type { %class.CPDF_PageObject* }
%class.CPDF_PageObject = type { %class.CPDF_GraphicStates, %class.CFX_FloatRect, %class.CPDF_ContentMarks, i8, i32 }
%class.CPDF_GraphicStates = type { i32 (...)**, %class.CPDF_ClipPath, %class.CFX_GraphState, %class.CPDF_ColorState, %class.CPDF_TextState, %class.CPDF_GeneralState }
%class.CPDF_ClipPath = type { %"class.fxcrt::SharedCopyOnWrite" }
%"class.fxcrt::SharedCopyOnWrite" = type { %"class.fxcrt::RetainPtr.12" }
%"class.fxcrt::RetainPtr.12" = type { %"class.std::__1::unique_ptr.13" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.CPDF_ClipPath::PathData"* }
%"class.CPDF_ClipPath::PathData" = type { %"class.fxcrt::Retainable", %"class.std::__1::vector.16", %"class.std::__1::vector.21" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.18" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.std::__1::pair"* }
%"class.std::__1::vector.21" = type { %"class.std::__1::__vector_base.22" }
%"class.std::__1::__vector_base.22" = type { %"class.std::__1::unique_ptr.23"*, %"class.std::__1::unique_ptr.23"*, %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::unique_ptr.23" = type opaque
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.std::__1::unique_ptr.23"* }
%class.CFX_GraphState = type { %"class.fxcrt::SharedCopyOnWrite.31" }
%"class.fxcrt::SharedCopyOnWrite.31" = type { %"class.fxcrt::RetainPtr.32" }
%"class.fxcrt::RetainPtr.32" = type { %"class.std::__1::unique_ptr.33" }
%"class.std::__1::unique_ptr.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %class.CFX_RetainableGraphStateData* }
%class.CFX_RetainableGraphStateData = type { %"class.fxcrt::Retainable", %class.CFX_GraphStateData }
%class.CFX_GraphStateData = type { i8, i8, float, float, float, %"class.std::__1::vector.36" }
%"class.std::__1::vector.36" = type { %"class.std::__1::__vector_base.37" }
%"class.std::__1::__vector_base.37" = type { float*, float*, %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { float* }
%class.CPDF_ColorState = type { %"class.fxcrt::SharedCopyOnWrite.45" }
%"class.fxcrt::SharedCopyOnWrite.45" = type { %"class.fxcrt::RetainPtr.46" }
%"class.fxcrt::RetainPtr.46" = type { %"class.std::__1::unique_ptr.47" }
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.CPDF_ColorState::ColorData"* }
%"class.CPDF_ColorState::ColorData" = type { %"class.fxcrt::Retainable", i32, i32, %class.CPDF_Color, %class.CPDF_Color }
%class.CPDF_Color = type { %"class.std::__1::vector.36", %"class.std::__1::unique_ptr.50", %"class.fxcrt::RetainPtr.77" }
%"class.std::__1::unique_ptr.50" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %class.PatternValue* }
%class.PatternValue = type { %"class.fxcrt::RetainPtr.53", %"struct.std::__1::array" }
%"class.fxcrt::RetainPtr.53" = type { %"class.std::__1::unique_ptr.54" }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %class.CPDF_Pattern* }
%class.CPDF_Pattern = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.fxcrt::UnownedPtr.65", %"class.fxcrt::RetainPtr.66", %class.CFX_Matrix, %class.CFX_Matrix }
%"class.fxcrt::Observable" = type { %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.57", %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { i64 }
%"class.fxcrt::UnownedPtr.65" = type { %class.CPDF_Document* }
%class.CPDF_Document = type opaque
%"class.fxcrt::RetainPtr.66" = type { %"class.std::__1::unique_ptr.67" }
%"class.std::__1::unique_ptr.67" = type { %"class.std::__1::__compressed_pair.68" }
%"class.std::__1::__compressed_pair.68" = type { %"struct.std::__1::__compressed_pair_elem.69" }
%"struct.std::__1::__compressed_pair_elem.69" = type { %class.CPDF_Object* }
%class.CPDF_Object = type { %"class.fxcrt::Retainable", i32, i32 }
%"struct.std::__1::array" = type { [16 x float] }
%"class.fxcrt::RetainPtr.77" = type { %"class.std::__1::unique_ptr.78" }
%"class.std::__1::unique_ptr.78" = type { %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %class.CPDF_ColorSpace* }
%class.CPDF_ColorSpace = type <{ %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.fxcrt::UnownedPtr.81", %"class.fxcrt::RetainPtr.82", i32, i32, i32, [4 x i8] }>
%"class.fxcrt::UnownedPtr.81" = type { %class.CPDF_Document* }
%"class.fxcrt::RetainPtr.82" = type { %"class.std::__1::unique_ptr.83" }
%"class.std::__1::unique_ptr.83" = type { %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %class.CPDF_Array* }
%class.CPDF_Array = type <{ %class.CPDF_Object, %"class.std::__1::vector.86", %"class.fxcrt::WeakPtr", i32, [4 x i8] }>
%"class.std::__1::vector.86" = type { %"class.std::__1::__vector_base.87" }
%"class.std::__1::__vector_base.87" = type { %"class.fxcrt::RetainPtr.66"*, %"class.fxcrt::RetainPtr.66"*, %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"class.fxcrt::RetainPtr.66"* }
%"class.fxcrt::WeakPtr" = type { %"class.fxcrt::RetainPtr.93" }
%"class.fxcrt::RetainPtr.93" = type { %"class.std::__1::unique_ptr.94" }
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle"* }
%"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle" = type { i64, %"class.std::__1::unique_ptr.218" }
%"class.std::__1::unique_ptr.218" = type { %"class.std::__1::__compressed_pair.219" }
%"class.std::__1::__compressed_pair.219" = type { %"struct.std::__1::__compressed_pair_elem.220" }
%"struct.std::__1::__compressed_pair_elem.220" = type { %"class.fxcrt::StringPoolTemplate"* }
%"class.fxcrt::StringPoolTemplate" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.221", %"class.std::__1::__compressed_pair.229", %"class.std::__1::__compressed_pair.234", %"class.std::__1::__compressed_pair.236", [4 x i8] }>
%"class.std::__1::unique_ptr.221" = type { %"class.std::__1::__compressed_pair.222" }
%"class.std::__1::__compressed_pair.222" = type { %"struct.std::__1::__compressed_pair_elem.223", %"struct.std::__1::__compressed_pair_elem.224" }
%"struct.std::__1::__compressed_pair_elem.223" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.224" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.225" }
%"class.std::__1::__compressed_pair.225" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"class.std::__1::__compressed_pair.229" = type { %"struct.std::__1::__compressed_pair_elem.230" }
%"struct.std::__1::__compressed_pair_elem.230" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.234" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.237" = type { float }
%class.CPDF_TextState = type { %"class.fxcrt::SharedCopyOnWrite.105" }
%"class.fxcrt::SharedCopyOnWrite.105" = type { %"class.fxcrt::RetainPtr.106" }
%"class.fxcrt::RetainPtr.106" = type { %"class.std::__1::unique_ptr.107" }
%"class.std::__1::unique_ptr.107" = type { %"class.std::__1::__compressed_pair.108" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"class.CPDF_TextState::TextData"* }
%"class.CPDF_TextState::TextData" = type { %"class.fxcrt::Retainable", %"class.fxcrt::RetainPtr.110", %"class.fxcrt::UnownedPtr.81", float, float, float, i32, [4 x float], [4 x float] }
%"class.fxcrt::RetainPtr.110" = type { %"class.std::__1::unique_ptr.111" }
%"class.std::__1::unique_ptr.111" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %class.CPDF_Font* }
%class.CPDF_Font = type opaque
%class.CPDF_GeneralState = type { %"class.fxcrt::SharedCopyOnWrite.118" }
%"class.fxcrt::SharedCopyOnWrite.118" = type { %"class.fxcrt::RetainPtr.119" }
%"class.fxcrt::RetainPtr.119" = type { %"class.std::__1::unique_ptr.120" }
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"class.CPDF_GeneralState::StateData"* }
%"class.CPDF_GeneralState::StateData" = type { %"class.fxcrt::Retainable", %"class.fxcrt::ByteString", i32, %"class.fxcrt::RetainPtr.66", %class.CFX_Matrix, float, float, %"class.fxcrt::RetainPtr.129", %"class.fxcrt::RetainPtr.135", %class.CFX_Matrix, i32, i8, i8, i8, i8, i8, i32, %"class.fxcrt::RetainPtr.129", %"class.fxcrt::RetainPtr.129", %"class.fxcrt::RetainPtr.129", float, float }
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr.123" }
%"class.fxcrt::RetainPtr.123" = type { %"class.std::__1::unique_ptr.124" }
%"class.std::__1::unique_ptr.124" = type { %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%"class.fxcrt::RetainPtr.135" = type { %"class.std::__1::unique_ptr.136" }
%"class.std::__1::unique_ptr.136" = type { %"class.std::__1::__compressed_pair.137" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %class.CPDF_TransferFunc* }
%class.CPDF_TransferFunc = type opaque
%"class.fxcrt::RetainPtr.129" = type { %"class.std::__1::unique_ptr.130" }
%"class.std::__1::unique_ptr.130" = type { %"class.std::__1::__compressed_pair.131" }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.132" }
%"struct.std::__1::__compressed_pair_elem.132" = type { %class.CPDF_Object* }
%class.CFX_FloatRect = type { float, float, float, float }
%class.CPDF_ContentMarks = type { %"class.fxcrt::RetainPtr.143" }
%"class.fxcrt::RetainPtr.143" = type { %"class.std::__1::unique_ptr.144" }
%"class.std::__1::unique_ptr.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"class.CPDF_ContentMarks::MarkData"* }
%"class.CPDF_ContentMarks::MarkData" = type { %"class.fxcrt::Retainable", %"class.std::__1::vector.147" }
%"class.std::__1::vector.147" = type { %"class.std::__1::__vector_base.148" }
%"class.std::__1::__vector_base.148" = type { %"class.fxcrt::RetainPtr.149"*, %"class.fxcrt::RetainPtr.149"*, %"class.std::__1::__compressed_pair.150" }
%"class.fxcrt::RetainPtr.149" = type opaque
%"class.std::__1::__compressed_pair.150" = type { %"struct.std::__1::__compressed_pair_elem.151" }
%"struct.std::__1::__compressed_pair_elem.151" = type { %"class.fxcrt::RetainPtr.149"* }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFX_DIBitmap* }
%class.CFX_DIBitmap = type { %class.CFX_DIBBase, %"class.fxcrt::MaybeOwned" }
%class.CFX_DIBBase = type { %"class.fxcrt::Retainable", i16, i32, i32, i32, %"class.fxcrt::RetainPtr", %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { i32* }
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.8", %"class.fxcrt::UnownedPtr" }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { i8* }
%"class.fxcrt::UnownedPtr" = type { i8* }
%struct.FX_RECT = type { i32, i32, i32, i32 }
%class.CFX_Matrix = type { float, float, float, float, float, float }
%"class.std::__1::vector.157" = type { %"class.std::__1::__vector_base.158" }
%"class.std::__1::__vector_base.158" = type { %"class.std::__1::unique_ptr.159"*, %"class.std::__1::unique_ptr.159"*, %"class.std::__1::__compressed_pair.165" }
%"class.std::__1::unique_ptr.159" = type { %"class.std::__1::__compressed_pair.160" }
%"class.std::__1::__compressed_pair.160" = type { %"struct.std::__1::__compressed_pair_elem.161" }
%"struct.std::__1::__compressed_pair_elem.161" = type { %class.CPDF_Function* }
%class.CPDF_Function = type { i32 (...)**, i32, i32, i32, %"class.std::__1::vector.36", %"class.std::__1::vector.36" }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.166" }
%"struct.std::__1::__compressed_pair_elem.166" = type { %"class.std::__1::unique_ptr.159"* }
%"class.fxcrt::RetainPtr.244" = type { %"class.std::__1::unique_ptr.245" }
%"class.std::__1::unique_ptr.245" = type { %"class.std::__1::__compressed_pair.246" }
%"class.std::__1::__compressed_pair.246" = type { %"struct.std::__1::__compressed_pair_elem.247" }
%"struct.std::__1::__compressed_pair_elem.247" = type { %class.CPDF_Stream* }
%class.CPDF_Stream = type { %class.CPDF_Object, i8, i32, %"class.fxcrt::RetainPtr.200", %"class.std::__1::unique_ptr.8", %"class.fxcrt::RetainPtr.206" }
%"class.fxcrt::RetainPtr.200" = type { %"class.std::__1::unique_ptr.201" }
%"class.std::__1::unique_ptr.201" = type { %"class.std::__1::__compressed_pair.202" }
%"class.std::__1::__compressed_pair.202" = type { %"struct.std::__1::__compressed_pair_elem.203" }
%"struct.std::__1::__compressed_pair_elem.203" = type { %class.CPDF_Dictionary* }
%class.CPDF_Dictionary = type { %class.CPDF_Object, i32, %"class.fxcrt::WeakPtr", %"class.std::__1::map.185" }
%"class.std::__1::map.185" = type { %"class.std::__1::__tree.186" }
%"class.std::__1::__tree.186" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.187", %"class.std::__1::__compressed_pair.191" }
%"class.std::__1::__compressed_pair.187" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"class.std::__1::__compressed_pair.191" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"class.fxcrt::RetainPtr.206" = type { %"class.std::__1::unique_ptr.207" }
%"class.std::__1::unique_ptr.207" = type { %"class.std::__1::__compressed_pair.208" }
%"class.std::__1::__compressed_pair.208" = type { %"struct.std::__1::__compressed_pair_elem.209" }
%"struct.std::__1::__compressed_pair_elem.209" = type { %class.IFX_SeekableReadStream* }
%class.IFX_SeekableReadStream = type { %class.IFX_StreamWithSize, %"class.fxcrt::Retainable" }
%class.IFX_StreamWithSize = type { i32 (...)** }
%"class.fxcrt::RetainPtr.250" = type { %"class.std::__1::unique_ptr.251" }
%"class.std::__1::unique_ptr.251" = type { %"class.std::__1::__compressed_pair.252" }
%"class.std::__1::__compressed_pair.252" = type { %"struct.std::__1::__compressed_pair_elem.253" }
%"struct.std::__1::__compressed_pair_elem.253" = type { %class.CPDF_StreamAcc* }
%class.CPDF_StreamAcc = type opaque
%"class.std::__1::unique_ptr.256" = type { %"class.std::__1::__compressed_pair.257" }
%"class.std::__1::__compressed_pair.257" = type { %"struct.std::__1::__compressed_pair_elem.258" }
%"struct.std::__1::__compressed_pair_elem.258" = type { %class.CFX_BitStream* }
%class.CFX_BitStream = type { i32, i32, %"class.fxcrt::UnownedPtr.259" }
%"class.fxcrt::UnownedPtr.259" = type { i8* }
%class.CPDF_ShadingPattern = type { %class.CPDF_Pattern, i32, i8, %"class.fxcrt::RetainPtr.77", %"class.std::__1::vector.157" }
%class.CPDF_RenderOptions = type { i8, i8, %"struct.CPDF_RenderOptions::Options", %"struct.CPDF_RenderOptions::ColorScheme", %"class.fxcrt::RetainPtr.170" }
%"struct.CPDF_RenderOptions::Options" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"struct.CPDF_RenderOptions::ColorScheme" = type { i32, i32, i32, i32 }
%"class.fxcrt::RetainPtr.170" = type { %"class.std::__1::unique_ptr.171" }
%"class.std::__1::unique_ptr.171" = type { %"class.std::__1::__compressed_pair.172" }
%"class.std::__1::__compressed_pair.172" = type { %"struct.std::__1::__compressed_pair_elem.173" }
%"struct.std::__1::__compressed_pair_elem.173" = type { %class.CPDF_OCContext* }
%class.CPDF_OCContext = type { %"class.fxcrt::Retainable", %"class.fxcrt::UnownedPtr.65", i32, %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree.174" }
%"class.std::__1::__tree.174" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.175", %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%class.CPDF_MeshStream = type { i32, %"class.std::__1::vector.157"*, %"class.fxcrt::RetainPtr.244", %"class.fxcrt::RetainPtr.77", i32, i32, i32, i32, i32, i32, float, float, float, float, %"class.fxcrt::RetainPtr.250", %"class.std::__1::unique_ptr.256", [8 x float], [8 x float] }
%"class.std::__1::vector.265" = type { %"class.std::__1::__vector_base.266" }
%"class.std::__1::__vector_base.266" = type { %class.CPDF_MeshVertex*, %class.CPDF_MeshVertex*, %"class.std::__1::__compressed_pair.267" }
%class.CPDF_MeshVertex = type { %class.CFX_PTemplate, float, float, float }
%class.CFX_PTemplate = type { float, float }
%"class.std::__1::__compressed_pair.267" = type { %"struct.std::__1::__compressed_pair_elem.268" }
%"struct.std::__1::__compressed_pair_elem.268" = type { %class.CPDF_MeshVertex* }
%"struct.std::__1::array.243" = type { [256 x i32] }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.196", i64 }
%"class.fxcrt::UnownedPtr.196" = type { float* }
%class.CFX_DefaultRenderDevice = type { %class.CFX_RenderDevice }
%"struct.(anonymous namespace)::CPDF_PatchDrawer" = type { i32, %class.CFX_PathData, %class.CFX_RenderDevice*, i32, i32, [4 x %"struct.(anonymous namespace)::Coon_Color"] }
%class.CFX_PathData = type { %"class.std::__1::vector.272" }
%"class.std::__1::vector.272" = type { %"class.std::__1::__vector_base.273" }
%"class.std::__1::__vector_base.273" = type { %class.FX_PATHPOINT*, %class.FX_PATHPOINT*, %"class.std::__1::__compressed_pair.274" }
%class.FX_PATHPOINT = type <{ %class.CFX_PTemplate, i8, i8, [2 x i8] }>
%"class.std::__1::__compressed_pair.274" = type { %"struct.std::__1::__compressed_pair_elem.275" }
%"struct.std::__1::__compressed_pair_elem.275" = type { %class.FX_PATHPOINT* }
%"struct.(anonymous namespace)::Coon_Color" = type { [3 x i32] }
%"struct.(anonymous namespace)::Coon_Bezier" = type { %"struct.(anonymous namespace)::Coon_BezierCoeff", %"struct.(anonymous namespace)::Coon_BezierCoeff" }
%"struct.(anonymous namespace)::Coon_BezierCoeff" = type { float, float, float, float }
%"class.fxcrt::RetainPtr.212" = type { %"class.std::__1::unique_ptr.213" }
%"class.std::__1::unique_ptr.213" = type { %"class.std::__1::__compressed_pair.214" }
%"class.std::__1::__compressed_pair.214" = type { %"struct.std::__1::__compressed_pair_elem.215" }
%"struct.std::__1::__compressed_pair_elem.215" = type { %class.CFX_DIBBase* }
%"class.std::__1::__vector_base_common" = type { i8 }
%struct.CFX_FillRenderOptions = type { i8, i8 }

@.str = private unnamed_addr constant [11 x i8] c"Background\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"BBox\00", align 1
@__const._ZN18CPDF_RenderShading4DrawEP16CFX_RenderDeviceP18CPDF_RenderContextPK15CPDF_PageObjectPK19CPDF_ShadingPatternRK10CFX_MatrixRK7FX_RECTiRK18CPDF_RenderOptions.buffer = private unnamed_addr constant %class.CPDF_DeviceBuffer { %"class.fxcrt::UnownedPtr.197" { %class.CFX_RenderDevice* inttoptr (i64 -6148914691236517206 to %class.CFX_RenderDevice*) }, %"class.fxcrt::UnownedPtr.198" { %class.CPDF_RenderContext* inttoptr (i64 -6148914691236517206 to %class.CPDF_RenderContext*) }, %"class.fxcrt::UnownedPtr.199" { %class.CPDF_PageObject* inttoptr (i64 -6148914691236517206 to %class.CPDF_PageObject*) }, %"class.fxcrt::RetainPtr" { %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { %class.CFX_DIBitmap* inttoptr (i64 -6148914691236517206 to %class.CFX_DIBitmap*) } } } }, %struct.FX_RECT { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %class.CFX_Matrix { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 } }, align 8
@.str.2 = private unnamed_addr constant [7 x i8] c"Domain\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"Matrix\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"Coords\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"Extend\00", align 1
@.str.7 = private unnamed_addr constant [15 x i8] c"VerticesPerRow\00", align 1
@__const._ZN12_GLOBAL__N_119DrawCoonPatchMeshesE11ShadingTypeRKN5fxcrt9RetainPtrI12CFX_DIBitmapEERK10CFX_MatrixPK11CPDF_StreamRKNSt3__16vectorINSD_10unique_ptrI13CPDF_FunctionNSD_14default_deleteISG_EEEENSD_9allocatorISJ_EEEERKNS2_I15CPDF_ColorSpaceEEbi.stream = private unnamed_addr constant { i32, [4 x i8], %"class.std::__1::vector.157"*, %"class.fxcrt::RetainPtr.244", %"class.fxcrt::RetainPtr.77", i32, i32, i32, i32, i32, i32, float, float, float, float, %"class.fxcrt::RetainPtr.250", %"class.std::__1::unique_ptr.256", [8 x float], [8 x float] } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.std::__1::vector.157"* inttoptr (i64 -6148914691236517206 to %"class.std::__1::vector.157"*), %"class.fxcrt::RetainPtr.244" { %"class.std::__1::unique_ptr.245" { %"class.std::__1::__compressed_pair.246" { %"struct.std::__1::__compressed_pair_elem.247" { %class.CPDF_Stream* inttoptr (i64 -6148914691236517206 to %class.CPDF_Stream*) } } } }, %"class.fxcrt::RetainPtr.77" { %"class.std::__1::unique_ptr.78" { %"class.std::__1::__compressed_pair.79" { %"struct.std::__1::__compressed_pair_elem.80" { %class.CPDF_ColorSpace* inttoptr (i64 -6148914691236517206 to %class.CPDF_ColorSpace*) } } } }, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, %"class.fxcrt::RetainPtr.250" { %"class.std::__1::unique_ptr.251" { %"class.std::__1::__compressed_pair.252" { %"struct.std::__1::__compressed_pair_elem.253" { %class.CPDF_StreamAcc* inttoptr (i64 -6148914691236517206 to %class.CPDF_StreamAcc*) } } } }, %"class.std::__1::unique_ptr.256" { %"class.std::__1::__compressed_pair.257" { %"struct.std::__1::__compressed_pair_elem.258" { %class.CFX_BitStream* inttoptr (i64 -6148914691236517206 to %class.CFX_BitStream*) } } }, [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000], [8 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN18CPDF_RenderShading4DrawEP16CFX_RenderDeviceP18CPDF_RenderContextPK15CPDF_PageObjectPK19CPDF_ShadingPatternRK10CFX_MatrixRK7FX_RECTiRK18CPDF_RenderOptions(%class.CFX_RenderDevice*, %class.CPDF_RenderContext*, %class.CPDF_PageObject*, %class.CPDF_ShadingPattern*, %class.CFX_Matrix* dereferenceable(24), %struct.FX_RECT* nocapture readonly dereferenceable(16), i32, %class.CPDF_RenderOptions* nocapture readonly dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %9 = alloca %"class.fxcrt::ByteString", align 8
  %10 = alloca %class.CPDF_MeshStream, align 8
  %11 = alloca [2 x %"class.std::__1::vector.265"], align 16
  %12 = alloca %"class.std::__1::vector.265", align 8
  %13 = alloca %"class.std::__1::vector.265", align 8
  %14 = alloca %class.CPDF_MeshStream, align 8
  %15 = alloca [3 x %class.CPDF_MeshVertex], align 16
  %16 = alloca %class.CPDF_MeshVertex, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca %"class.fxcrt::ByteString", align 8
  %20 = alloca %"class.fxcrt::ByteString", align 8
  %21 = alloca %"class.fxcrt::ByteString", align 8
  %22 = alloca %"struct.std::__1::array.243", align 4
  %23 = alloca %class.CFX_Matrix, align 4
  %24 = alloca <2 x float>, align 8
  %25 = bitcast <2 x float>* %24 to %class.CFX_PTemplate*
  %26 = alloca %class.CFX_PTemplate, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca %"class.fxcrt::ByteString", align 8
  %30 = alloca %"class.fxcrt::ByteString", align 8
  %31 = alloca %"class.fxcrt::ByteString", align 8
  %32 = alloca %"struct.std::__1::array.243", align 4
  %33 = alloca %class.CFX_Matrix, align 4
  %34 = alloca <2 x float>, align 8
  %35 = bitcast <2 x float>* %34 to %class.CFX_PTemplate*
  %36 = alloca %class.CFX_PTemplate, align 4
  %37 = alloca %"class.fxcrt::ByteString", align 8
  %38 = alloca %class.CFX_Matrix, align 4
  %39 = alloca %"class.fxcrt::ByteString", align 8
  %40 = alloca %class.CFX_Matrix, align 16
  %41 = alloca %class.CFX_Matrix, align 4
  %42 = alloca %class.CFX_Matrix, align 8
  %43 = alloca %class.CFX_PTemplate, align 4
  %44 = alloca %class.CFX_PTemplate, align 4
  %45 = alloca [2 x float], align 4
  %46 = alloca i32, align 4
  %47 = alloca float, align 4
  %48 = alloca float, align 4
  %49 = alloca float, align 4
  %50 = alloca %"class.pdfium::span", align 8
  %51 = alloca %class.CFX_DefaultRenderDevice, align 8
  %52 = alloca %"class.fxcrt::RetainPtr", align 8
  %53 = alloca %class.CPDF_MeshStream, align 8
  %54 = alloca %"struct.(anonymous namespace)::CPDF_PatchDrawer", align 8
  %55 = alloca %class.CFX_PTemplate, align 4
  %56 = alloca [16 x %class.CFX_PTemplate], align 16
  %57 = alloca [4 x %class.CFX_PTemplate], align 16
  %58 = alloca [2 x %"struct.(anonymous namespace)::Coon_Color"], align 16
  %59 = alloca %class.CFX_PTemplate, align 4
  %60 = alloca %class.CFX_PTemplate, align 4
  %61 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %62 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %63 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %64 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %65 = alloca %"class.fxcrt::RetainPtr.77", align 8
  %66 = alloca %"class.fxcrt::ByteString", align 8
  %67 = alloca %"class.fxcrt::ByteString", align 8
  %68 = alloca %"class.std::__1::vector.36", align 8
  %69 = alloca float, align 4
  %70 = alloca float, align 4
  %71 = alloca float, align 4
  %72 = alloca %"class.pdfium::span", align 8
  %73 = alloca %struct.FX_RECT, align 4
  %74 = alloca %"class.fxcrt::ByteString", align 8
  %75 = alloca { i64, i64 }, align 8
  %76 = bitcast { i64, i64 }* %75 to %struct.FX_RECT*
  %77 = alloca { <2 x float>, <2 x float> }, align 8
  %78 = bitcast { <2 x float>, <2 x float> }* %77 to %class.CFX_FloatRect*
  %79 = alloca { <2 x float>, <2 x float> }, align 8
  %80 = bitcast { <2 x float>, <2 x float> }* %79 to %class.CFX_FloatRect*
  %81 = alloca %"class.fxcrt::ByteString", align 8
  %82 = alloca %class.CPDF_DeviceBuffer, align 8
  %83 = alloca %class.CFX_Matrix, align 16
  %84 = alloca %"class.fxcrt::RetainPtr", align 8
  %85 = alloca %"class.fxcrt::RetainPtr.212", align 8
  %86 = getelementptr inbounds %class.CPDF_ShadingPattern, %class.CPDF_ShadingPattern* %3, i64 0, i32 4
  %87 = tail call %class.CPDF_Object* @_ZNK19CPDF_ShadingPattern16GetShadingObjectEv(%class.CPDF_ShadingPattern* %3) #10
  %88 = bitcast %class.CPDF_Object* %87 to %class.CPDF_Dictionary* (%class.CPDF_Object*)***
  %89 = load %class.CPDF_Dictionary* (%class.CPDF_Object*)**, %class.CPDF_Dictionary* (%class.CPDF_Object*)*** %88, align 8
  %90 = getelementptr inbounds %class.CPDF_Dictionary* (%class.CPDF_Object*)*, %class.CPDF_Dictionary* (%class.CPDF_Object*)** %89, i64 12
  %91 = load %class.CPDF_Dictionary* (%class.CPDF_Object*)*, %class.CPDF_Dictionary* (%class.CPDF_Object*)** %90, align 8
  %92 = tail call %class.CPDF_Dictionary* %91(%class.CPDF_Object* %87) #10
  %93 = bitcast %"class.fxcrt::RetainPtr.77"* %65 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %93) #10
  %94 = getelementptr inbounds %"class.fxcrt::RetainPtr.77", %"class.fxcrt::RetainPtr.77"* %65, i64 0, i32 0, i32 0, i32 0, i32 0
  %95 = getelementptr inbounds %class.CPDF_ShadingPattern, %class.CPDF_ShadingPattern* %3, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %96 = load %class.CPDF_ColorSpace*, %class.CPDF_ColorSpace** %95, align 8, !noalias !2
  %97 = ptrtoint %class.CPDF_ColorSpace* %96 to i64
  %98 = bitcast %"class.fxcrt::RetainPtr.77"* %65 to i64*
  store i64 %97, i64* %98, align 8, !alias.scope !2
  %99 = icmp eq %class.CPDF_ColorSpace* %96, null
  br i1 %99, label %100, label %101

100:                                              ; preds = %8
  store %class.CPDF_ColorSpace* null, %class.CPDF_ColorSpace** %94, align 8
  br label %1716

101:                                              ; preds = %8
  %102 = getelementptr inbounds %class.CPDF_ColorSpace, %class.CPDF_ColorSpace* %96, i64 0, i32 0, i32 1
  %103 = load i64, i64* %102, align 8, !noalias !2
  %104 = add nsw i64 %103, 1
  store i64 %104, i64* %102, align 8, !noalias !2
  %105 = getelementptr inbounds %class.CPDF_ShadingPattern, %class.CPDF_ShadingPattern* %3, i64 0, i32 2
  %106 = load i8, i8* %105, align 4, !range !5
  %107 = icmp eq i8 %106, 0
  br i1 %107, label %108, label %173

108:                                              ; preds = %101
  %109 = bitcast %"class.fxcrt::ByteString"* %66 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %109) #10
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %66, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0)) #10
  %110 = call zeroext i1 @_ZNK15CPDF_Dictionary8KeyExistERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %92, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %66) #10
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %66) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %109) #10
  br i1 %110, label %111, label %173

111:                                              ; preds = %108
  %112 = bitcast %"class.fxcrt::ByteString"* %67 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %112) #10
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %67, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0)) #10
  %113 = call %class.CPDF_Array* @_ZNK15CPDF_Dictionary11GetArrayForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %92, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %67) #10
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %67) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %112) #10
  %114 = icmp eq %class.CPDF_Array* %113, null
  br i1 %114, label %173, label %115

115:                                              ; preds = %111
  %116 = getelementptr inbounds %class.CPDF_Array, %class.CPDF_Array* %113, i64 0, i32 1
  %117 = getelementptr inbounds %class.CPDF_Array, %class.CPDF_Array* %113, i64 0, i32 1, i32 0, i32 1
  %118 = bitcast %"class.fxcrt::RetainPtr.66"** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"class.std::__1::vector.86"* %116 to i64*
  %121 = load i64, i64* %120, align 8
  %122 = sub i64 %119, %121
  %123 = ashr exact i64 %122, 3
  %124 = load %class.CPDF_ColorSpace*, %class.CPDF_ColorSpace** %94, align 8
  %125 = call i32 @_ZNK15CPDF_ColorSpace15CountComponentsEv(%class.CPDF_ColorSpace* %124) #10
  %126 = zext i32 %125 to i64
  %127 = icmp ult i64 %123, %126
  br i1 %127, label %173, label %128

128:                                              ; preds = %115
  %129 = bitcast %"class.std::__1::vector.36"* %68 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %129) #10
  %130 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %68, i64 0, i32 0, i32 0
  %131 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %68, i64 0, i32 0, i32 1
  %132 = bitcast %"class.std::__1::vector.36"* %68 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %132, i8 -86, i64 24, i1 false)
  %133 = load %class.CPDF_ColorSpace*, %class.CPDF_ColorSpace** %94, align 8
  %134 = call i32 @_ZNK15CPDF_ColorSpace15CountComponentsEv(%class.CPDF_ColorSpace* %133) #10
  %135 = zext i32 %134 to i64
  call void @_Z25ReadArrayElementsToVectorPK10CPDF_Arraym(%"class.std::__1::vector.36"* nonnull sret %68, %class.CPDF_Array* nonnull %113, i64 %135) #10
  %136 = bitcast float* %69 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %136) #10
  store float 0.000000e+00, float* %69, align 4
  %137 = bitcast float* %70 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %137) #10
  store float 0.000000e+00, float* %70, align 4
  %138 = bitcast float* %71 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %138) #10
  store float 0.000000e+00, float* %71, align 4
  %139 = load %class.CPDF_ColorSpace*, %class.CPDF_ColorSpace** %94, align 8
  %140 = bitcast %"class.std::__1::vector.36"* %68 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = bitcast float** %131 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = sub i64 %143, %141
  %145 = ashr exact i64 %144, 2
  %146 = bitcast %"class.pdfium::span"* %72 to i64*
  store i64 %141, i64* %146, align 8
  %147 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %72, i64 0, i32 1
  store i64 %145, i64* %147, align 8
  %148 = bitcast %class.CPDF_ColorSpace* %139 to i1 (%class.CPDF_ColorSpace*, %"class.pdfium::span"*, float*, float*, float*)***
  %149 = load i1 (%class.CPDF_ColorSpace*, %"class.pdfium::span"*, float*, float*, float*)**, i1 (%class.CPDF_ColorSpace*, %"class.pdfium::span"*, float*, float*, float*)*** %148, align 8
  %150 = getelementptr inbounds i1 (%class.CPDF_ColorSpace*, %"class.pdfium::span"*, float*, float*, float*)*, i1 (%class.CPDF_ColorSpace*, %"class.pdfium::span"*, float*, float*, float*)** %149, i64 2
  %151 = load i1 (%class.CPDF_ColorSpace*, %"class.pdfium::span"*, float*, float*, float*)*, i1 (%class.CPDF_ColorSpace*, %"class.pdfium::span"*, float*, float*, float*)** %150, align 8
  %152 = call zeroext i1 %151(%class.CPDF_ColorSpace* %139, %"class.pdfium::span"* nonnull %72, float* nonnull %69, float* nonnull %70, float* nonnull %71) #10
  %153 = load float, float* %69, align 4
  %154 = fmul float %153, 2.550000e+02
  %155 = fptosi float %154 to i32
  %156 = load float, float* %70, align 4
  %157 = fmul float %156, 2.550000e+02
  %158 = fptosi float %157 to i32
  %159 = load float, float* %71, align 4
  %160 = fmul float %159, 2.550000e+02
  %161 = fptosi float %160 to i32
  %162 = shl i32 %155, 16
  %163 = shl i32 %158, 8
  %164 = or i32 %162, %163
  %165 = or i32 %164, %161
  %166 = or i32 %165, -16777216
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %138) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %137) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %136) #10
  %167 = load float*, float** %130, align 8
  %168 = icmp eq float* %167, null
  br i1 %168, label %172, label %169

169:                                              ; preds = %128
  %170 = ptrtoint float* %167 to i64
  store i64 %170, i64* %142, align 8
  %171 = bitcast float* %167 to i8*
  call void @_ZdlPv(i8* %171) #11
  br label %172

172:                                              ; preds = %128, %169
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %129) #10
  br label %173

173:                                              ; preds = %101, %172, %111, %115, %108
  %174 = phi i32 [ 0, %108 ], [ %166, %172 ], [ 0, %115 ], [ 0, %111 ], [ 0, %101 ]
  %175 = bitcast %struct.FX_RECT* %73 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %175) #10
  %176 = bitcast %struct.FX_RECT* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %175, i8* align 4 %176, i64 16, i1 false)
  %177 = bitcast %"class.fxcrt::ByteString"* %74 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %177) #10
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %74, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0)) #10
  %178 = call zeroext i1 @_ZNK15CPDF_Dictionary8KeyExistERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %92, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %74) #10
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %74) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %177) #10
  br i1 %178, label %179, label %199

179:                                              ; preds = %173
  %180 = bitcast { i64, i64 }* %75 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %180) #10
  %181 = bitcast { <2 x float>, <2 x float> }* %77 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %181) #10
  %182 = bitcast { <2 x float>, <2 x float> }* %79 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %182) #10
  %183 = bitcast %"class.fxcrt::ByteString"* %81 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %183) #10
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %81, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0)) #10
  %184 = call { <2 x float>, <2 x float> } @_ZNK15CPDF_Dictionary10GetRectForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %92, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %81) #10
  %185 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %79, i64 0, i32 0
  %186 = extractvalue { <2 x float>, <2 x float> } %184, 0
  store <2 x float> %186, <2 x float>* %185, align 8
  %187 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %79, i64 0, i32 1
  %188 = extractvalue { <2 x float>, <2 x float> } %184, 1
  store <2 x float> %188, <2 x float>* %187, align 8
  %189 = call { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix13TransformRectERK13CFX_FloatRect(%class.CFX_Matrix* %4, %class.CFX_FloatRect* nonnull dereferenceable(16) %80) #10
  %190 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %77, i64 0, i32 0
  %191 = extractvalue { <2 x float>, <2 x float> } %189, 0
  store <2 x float> %191, <2 x float>* %190, align 8
  %192 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %77, i64 0, i32 1
  %193 = extractvalue { <2 x float>, <2 x float> } %189, 1
  store <2 x float> %193, <2 x float>* %192, align 8
  %194 = call { i64, i64 } @_ZNK13CFX_FloatRect12GetOuterRectEv(%class.CFX_FloatRect* nonnull %78) #10
  %195 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %75, i64 0, i32 0
  %196 = extractvalue { i64, i64 } %194, 0
  store i64 %196, i64* %195, align 8
  %197 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %75, i64 0, i32 1
  %198 = extractvalue { i64, i64 } %194, 1
  store i64 %198, i64* %197, align 8
  call void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT* nonnull %73, %struct.FX_RECT* nonnull dereferenceable(16) %76) #10
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %81) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %183) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %182) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %181) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %180) #10
  br label %199

199:                                              ; preds = %179, %173
  %200 = getelementptr inbounds %class.CPDF_RenderOptions, %class.CPDF_RenderOptions* %7, i64 0, i32 0
  %201 = load i8, i8* %200, align 8
  %202 = icmp eq i8 %201, 2
  %203 = call i32 @_ZNK16CFX_RenderDevice13GetDeviceCapsEi(%class.CFX_RenderDevice* %0, i32 7) #10
  %204 = and i32 %203, 16384
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %214, label %206

206:                                              ; preds = %199
  %207 = getelementptr inbounds %class.CFX_RenderDevice, %class.CFX_RenderDevice* %0, i64 0, i32 8, i32 0, i32 0, i32 0
  %208 = load %class.RenderDeviceDriverIface*, %class.RenderDeviceDriverIface** %207, align 8
  %209 = bitcast %class.RenderDeviceDriverIface* %208 to i1 (%class.RenderDeviceDriverIface*, %class.CPDF_ShadingPattern*, %class.CFX_Matrix*, %struct.FX_RECT*, i32, i1)***
  %210 = load i1 (%class.RenderDeviceDriverIface*, %class.CPDF_ShadingPattern*, %class.CFX_Matrix*, %struct.FX_RECT*, i32, i1)**, i1 (%class.RenderDeviceDriverIface*, %class.CPDF_ShadingPattern*, %class.CFX_Matrix*, %struct.FX_RECT*, i32, i1)*** %209, align 8
  %211 = getelementptr inbounds i1 (%class.RenderDeviceDriverIface*, %class.CPDF_ShadingPattern*, %class.CFX_Matrix*, %struct.FX_RECT*, i32, i1)*, i1 (%class.RenderDeviceDriverIface*, %class.CPDF_ShadingPattern*, %class.CFX_Matrix*, %struct.FX_RECT*, i32, i1)** %210, i64 21
  %212 = load i1 (%class.RenderDeviceDriverIface*, %class.CPDF_ShadingPattern*, %class.CFX_Matrix*, %struct.FX_RECT*, i32, i1)*, i1 (%class.RenderDeviceDriverIface*, %class.CPDF_ShadingPattern*, %class.CFX_Matrix*, %struct.FX_RECT*, i32, i1)** %211, align 8
  %213 = call zeroext i1 %212(%class.RenderDeviceDriverIface* %208, %class.CPDF_ShadingPattern* %3, %class.CFX_Matrix* %4, %struct.FX_RECT* nonnull dereferenceable(16) %73, i32 %6, i1 zeroext %202) #10
  br i1 %213, label %1702, label %214

214:                                              ; preds = %199, %206
  %215 = bitcast %class.CPDF_DeviceBuffer* %82 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %215) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %215, i8* align 8 bitcast (%class.CPDF_DeviceBuffer* @__const._ZN18CPDF_RenderShading4DrawEP16CFX_RenderDeviceP18CPDF_RenderContextPK15CPDF_PageObjectPK19CPDF_ShadingPatternRK10CFX_MatrixRK7FX_RECTiRK18CPDF_RenderOptions.buffer to i8*), i64 72, i1 false)
  call void @_ZN17CPDF_DeviceBufferC1EP18CPDF_RenderContextP16CFX_RenderDeviceRK7FX_RECTPK15CPDF_PageObjecti(%class.CPDF_DeviceBuffer* nonnull %82, %class.CPDF_RenderContext* %1, %class.CFX_RenderDevice* %0, %struct.FX_RECT* nonnull dereferenceable(16) %73, %class.CPDF_PageObject* %2, i32 150) #10
  %216 = call zeroext i1 @_ZN17CPDF_DeviceBuffer10InitializeEv(%class.CPDF_DeviceBuffer* nonnull %82) #10
  br i1 %216, label %217, label %1701

217:                                              ; preds = %214
  %218 = bitcast %class.CFX_Matrix* %83 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %218) #10
  %219 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %83, i64 0, i32 4
  %220 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %83, i64 0, i32 5
  %221 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %4, i64 0, i32 0
  %222 = load float, float* %221, align 4, !noalias !6
  %223 = getelementptr inbounds %class.CPDF_DeviceBuffer, %class.CPDF_DeviceBuffer* %82, i64 0, i32 5, i32 0
  %224 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %4, i64 0, i32 1
  %225 = load float, float* %224, align 4, !noalias !6
  %226 = getelementptr inbounds %class.CPDF_DeviceBuffer, %class.CPDF_DeviceBuffer* %82, i64 0, i32 5, i32 2
  %227 = bitcast float* %223 to <2 x float>*
  %228 = load <2 x float>, <2 x float>* %227, align 8, !noalias !6
  %229 = shufflevector <2 x float> %228, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %230 = bitcast float* %226 to <2 x float>*
  %231 = load <2 x float>, <2 x float>* %230, align 8, !noalias !6
  %232 = shufflevector <2 x float> %231, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %233 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %4, i64 0, i32 2
  %234 = load float, float* %233, align 4, !noalias !6
  %235 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %4, i64 0, i32 3
  %236 = load float, float* %235, align 4, !noalias !6
  %237 = insertelement <4 x float> undef, float %222, i32 0
  %238 = shufflevector <4 x float> %237, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %239 = extractelement <2 x float> %228, i32 0
  %240 = extractelement <2 x float> %228, i32 1
  %241 = shufflevector <4 x float> %238, <4 x float> %229, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %242 = insertelement <4 x float> undef, float %239, i32 0
  %243 = insertelement <4 x float> %242, float %240, i32 1
  %244 = insertelement <4 x float> %243, float %234, i32 2
  %245 = insertelement <4 x float> %244, float %234, i32 3
  %246 = fmul <4 x float> %241, %245
  %247 = insertelement <4 x float> undef, float %225, i32 0
  %248 = shufflevector <4 x float> %247, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %249 = extractelement <2 x float> %231, i32 0
  %250 = extractelement <2 x float> %231, i32 1
  %251 = shufflevector <4 x float> %248, <4 x float> %232, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %252 = insertelement <4 x float> undef, float %249, i32 0
  %253 = insertelement <4 x float> %252, float %250, i32 1
  %254 = insertelement <4 x float> %253, float %236, i32 2
  %255 = insertelement <4 x float> %254, float %236, i32 3
  %256 = fmul <4 x float> %251, %255
  %257 = fadd <4 x float> %246, %256
  %258 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %4, i64 0, i32 4
  %259 = load float, float* %258, align 4, !noalias !6
  %260 = fmul float %239, %259
  %261 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %4, i64 0, i32 5
  %262 = load float, float* %261, align 4, !noalias !6
  %263 = fmul float %249, %262
  %264 = fadd float %260, %263
  %265 = getelementptr inbounds %class.CPDF_DeviceBuffer, %class.CPDF_DeviceBuffer* %82, i64 0, i32 5, i32 4
  %266 = load float, float* %265, align 8, !noalias !6
  %267 = fadd float %266, %264
  %268 = fmul float %240, %259
  %269 = fmul float %250, %262
  %270 = fadd float %268, %269
  %271 = getelementptr inbounds %class.CPDF_DeviceBuffer, %class.CPDF_DeviceBuffer* %82, i64 0, i32 5, i32 5
  %272 = load float, float* %271, align 4, !noalias !6
  %273 = fadd float %270, %272
  %274 = bitcast %class.CFX_Matrix* %83 to <4 x float>*
  store <4 x float> %257, <4 x float>* %274, align 16, !alias.scope !6
  store float %267, float* %219, align 16, !alias.scope !6
  store float %273, float* %220, align 4, !alias.scope !6
  %275 = bitcast %"class.fxcrt::RetainPtr"* %84 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %275) #10
  %276 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %84, i64 0, i32 0, i32 0, i32 0, i32 0
  %277 = getelementptr inbounds %class.CPDF_DeviceBuffer, %class.CPDF_DeviceBuffer* %82, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %278 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %277, align 8, !noalias !9
  %279 = ptrtoint %class.CFX_DIBitmap* %278 to i64
  %280 = bitcast %"class.fxcrt::RetainPtr"* %84 to i64*
  store i64 %279, i64* %280, align 8, !alias.scope !9
  %281 = icmp eq %class.CFX_DIBitmap* %278, null
  br i1 %281, label %286, label %282

282:                                              ; preds = %217
  %283 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %278, i64 0, i32 0, i32 0, i32 1
  %284 = load i64, i64* %283, align 8, !noalias !9
  %285 = add nsw i64 %284, 1
  store i64 %285, i64* %283, align 8, !noalias !9
  br label %286

286:                                              ; preds = %217, %282
  %287 = bitcast %class.CFX_DIBitmap* %278 to i8* (%class.CFX_DIBitmap*)***
  %288 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %287, align 8
  %289 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %288, i64 2
  %290 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %289, align 8
  %291 = call i8* %290(%class.CFX_DIBitmap* %278) #10
  %292 = icmp eq i8* %291, null
  br i1 %292, label %1686, label %293

293:                                              ; preds = %286
  %294 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %276, align 8
  call void @_ZN12CFX_DIBitmap5ClearEj(%class.CFX_DIBitmap* %294, i32 %174) #10
  %295 = getelementptr inbounds %class.CPDF_ShadingPattern, %class.CPDF_ShadingPattern* %3, i64 0, i32 1
  %296 = load i32, i32* %295, align 8
  switch i32 %296, label %1651 [
    i32 0, label %1686
    i32 8, label %1686
    i32 1, label %297
    i32 2, label %578
    i32 3, label %758
    i32 4, label %1023
    i32 5, label %1100
    i32 6, label %1270
    i32 7, label %1270
  ]

297:                                              ; preds = %293
  %298 = bitcast %"class.pdfium::span"* %50 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %298)
  %299 = getelementptr inbounds %"class.std::__1::vector.157", %"class.std::__1::vector.157"* %86, i64 0, i32 0, i32 0
  %300 = load %"class.std::__1::unique_ptr.159"*, %"class.std::__1::unique_ptr.159"** %299, align 8
  %301 = getelementptr inbounds %class.CPDF_ShadingPattern, %class.CPDF_ShadingPattern* %3, i64 0, i32 4, i32 0, i32 1
  %302 = load %"class.std::__1::unique_ptr.159"*, %"class.std::__1::unique_ptr.159"** %301, align 8
  %303 = icmp eq %"class.std::__1::unique_ptr.159"* %300, %302
  br i1 %303, label %577, label %304

304:                                              ; preds = %297
  %305 = ptrtoint %"class.std::__1::unique_ptr.159"* %300 to i64
  %306 = getelementptr %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.159"* %302, i64 -1, i32 0, i32 0, i32 0
  %307 = ptrtoint %class.CPDF_Function** %306 to i64
  %308 = sub i64 %307, %305
  %309 = lshr i64 %308, 3
  %310 = add nuw nsw i64 %309, 1
  %311 = and i64 %310, 1
  %312 = icmp eq i64 %309, 0
  br i1 %312, label %315, label %313

313:                                              ; preds = %304
  %314 = sub nuw nsw i64 %310, %311
  br label %342

315:                                              ; preds = %1727, %304
  %316 = phi i32 [ undef, %304 ], [ %1728, %1727 ]
  %317 = phi i8 [ undef, %304 ], [ %1729, %1727 ]
  %318 = phi %"class.std::__1::unique_ptr.159"* [ %300, %304 ], [ %1730, %1727 ]
  %319 = phi i8 [ 1, %304 ], [ %1729, %1727 ]
  %320 = phi i32 [ 0, %304 ], [ %1728, %1727 ]
  %321 = icmp eq i64 %311, 0
  br i1 %321, label %336, label %322

322:                                              ; preds = %315
  %323 = getelementptr inbounds %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.159"* %318, i64 0, i32 0, i32 0, i32 0
  %324 = load %class.CPDF_Function*, %class.CPDF_Function** %323, align 8
  %325 = icmp eq %class.CPDF_Function* %324, null
  br i1 %325, label %336, label %326

326:                                              ; preds = %322
  %327 = icmp eq i8 %319, 0
  br i1 %327, label %336, label %328

328:                                              ; preds = %326
  %329 = getelementptr inbounds %class.CPDF_Function, %class.CPDF_Function* %324, i64 0, i32 3
  %330 = load i32, i32* %329, align 8
  %331 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %320, i32 %330) #10
  %332 = extractvalue { i32, i1 } %331, 1
  %333 = extractvalue { i32, i1 } %331, 0
  %334 = xor i1 %332, true
  %335 = zext i1 %334 to i8
  br label %336

336:                                              ; preds = %328, %326, %322, %315
  %337 = phi i32 [ %316, %315 ], [ %320, %322 ], [ %333, %328 ], [ 0, %326 ]
  %338 = phi i8 [ %317, %315 ], [ %319, %322 ], [ %335, %328 ], [ 0, %326 ]
  %339 = icmp eq i8 %338, 0
  %340 = icmp eq i32 %337, 0
  %341 = or i1 %340, %339
  br i1 %341, label %577, label %366

342:                                              ; preds = %1727, %313
  %343 = phi %"class.std::__1::unique_ptr.159"* [ %300, %313 ], [ %1730, %1727 ]
  %344 = phi i8 [ 1, %313 ], [ %1729, %1727 ]
  %345 = phi i32 [ 0, %313 ], [ %1728, %1727 ]
  %346 = phi i64 [ %314, %313 ], [ %1731, %1727 ]
  %347 = getelementptr inbounds %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.159"* %343, i64 0, i32 0, i32 0, i32 0
  %348 = load %class.CPDF_Function*, %class.CPDF_Function** %347, align 8
  %349 = icmp eq %class.CPDF_Function* %348, null
  br i1 %349, label %360, label %350

350:                                              ; preds = %342
  %351 = icmp eq i8 %344, 0
  br i1 %351, label %360, label %352

352:                                              ; preds = %350
  %353 = getelementptr inbounds %class.CPDF_Function, %class.CPDF_Function* %348, i64 0, i32 3
  %354 = load i32, i32* %353, align 8
  %355 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %345, i32 %354) #10
  %356 = extractvalue { i32, i1 } %355, 1
  %357 = extractvalue { i32, i1 } %355, 0
  %358 = xor i1 %356, true
  %359 = zext i1 %358 to i8
  br label %360

360:                                              ; preds = %352, %350, %342
  %361 = phi i32 [ %345, %342 ], [ %357, %352 ], [ 0, %350 ]
  %362 = phi i8 [ %344, %342 ], [ %359, %352 ], [ 0, %350 ]
  %363 = getelementptr inbounds %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.159"* %343, i64 1, i32 0, i32 0, i32 0
  %364 = load %class.CPDF_Function*, %class.CPDF_Function** %363, align 8
  %365 = icmp eq %class.CPDF_Function* %364, null
  br i1 %365, label %1727, label %1717

366:                                              ; preds = %336
  %367 = load %class.CPDF_ColorSpace*, %class.CPDF_ColorSpace** %94, align 8
  %368 = call i32 @_ZNK15CPDF_ColorSpace15CountComponentsEv(%class.CPDF_ColorSpace* %367) #10
  %369 = icmp ult i32 %337, %368
  %370 = select i1 %369, i32 %368, i32 %337
  %371 = bitcast %"class.fxcrt::ByteString"* %37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %371) #10
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %37, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0)) #10
  %372 = call %class.CPDF_Array* @_ZNK15CPDF_Dictionary11GetArrayForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %92, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %37) #10
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %37) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %371) #10
  %373 = icmp eq %class.CPDF_Array* %372, null
  br i1 %373, label %379, label %374

374:                                              ; preds = %366
  %375 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %372, i64 0) #10
  %376 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %372, i64 1) #10
  %377 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %372, i64 2) #10
  %378 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %372, i64 3) #10
  br label %379

379:                                              ; preds = %374, %366
  %380 = phi float [ %375, %374 ], [ 0.000000e+00, %366 ]
  %381 = phi float [ %377, %374 ], [ 0.000000e+00, %366 ]
  %382 = phi float [ %376, %374 ], [ 1.000000e+00, %366 ]
  %383 = phi float [ %378, %374 ], [ 1.000000e+00, %366 ]
  %384 = bitcast %class.CFX_Matrix* %38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %384) #10
  %385 = bitcast %"class.fxcrt::ByteString"* %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %384, i8 -1, i64 24, i1 false) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %385) #10
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %39, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0)) #10
  call void @_ZNK15CPDF_Dictionary12GetMatrixForERKN5fxcrt10ByteStringE(%class.CFX_Matrix* nonnull sret %38, %class.CPDF_Dictionary* %92, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %39) #10
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %39) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %385) #10
  %386 = bitcast %class.CFX_Matrix* %40 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %386) #10
  %387 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %40, i64 0, i32 4
  %388 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %40, i64 0, i32 5
  %389 = bitcast %class.CFX_Matrix* %41 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %389) #10
  call void @_ZNK10CFX_Matrix10GetInverseEv(%class.CFX_Matrix* nonnull sret %41, %class.CFX_Matrix* nonnull %83) #10
  %390 = bitcast %class.CFX_Matrix* %42 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %390) #10
  call void @_ZNK10CFX_Matrix10GetInverseEv(%class.CFX_Matrix* nonnull sret %42, %class.CFX_Matrix* nonnull %38) #10
  %391 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %41, i64 0, i32 0
  %392 = load float, float* %391, align 4, !noalias !12
  %393 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %41, i64 0, i32 1
  %394 = load float, float* %393, align 4, !noalias !12
  %395 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %42, i64 0, i32 2
  %396 = bitcast %class.CFX_Matrix* %42 to <2 x float>*
  %397 = load <2 x float>, <2 x float>* %396, align 8, !noalias !12
  %398 = shufflevector <2 x float> %397, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %399 = bitcast float* %395 to <2 x float>*
  %400 = load <2 x float>, <2 x float>* %399, align 8, !noalias !12
  %401 = shufflevector <2 x float> %400, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %402 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %41, i64 0, i32 2
  %403 = load float, float* %402, align 4, !noalias !12
  %404 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %41, i64 0, i32 3
  %405 = load float, float* %404, align 4, !noalias !12
  %406 = insertelement <4 x float> undef, float %392, i32 0
  %407 = shufflevector <4 x float> %406, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %408 = extractelement <2 x float> %397, i32 0
  %409 = extractelement <2 x float> %397, i32 1
  %410 = shufflevector <4 x float> %407, <4 x float> %398, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %411 = insertelement <4 x float> undef, float %408, i32 0
  %412 = insertelement <4 x float> %411, float %409, i32 1
  %413 = insertelement <4 x float> %412, float %403, i32 2
  %414 = insertelement <4 x float> %413, float %403, i32 3
  %415 = fmul <4 x float> %410, %414
  %416 = insertelement <4 x float> undef, float %394, i32 0
  %417 = shufflevector <4 x float> %416, <4 x float> undef, <4 x i32> <i32 0, i32 0, i32 undef, i32 undef>
  %418 = extractelement <2 x float> %400, i32 0
  %419 = extractelement <2 x float> %400, i32 1
  %420 = shufflevector <4 x float> %417, <4 x float> %401, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %421 = insertelement <4 x float> undef, float %418, i32 0
  %422 = insertelement <4 x float> %421, float %419, i32 1
  %423 = insertelement <4 x float> %422, float %405, i32 2
  %424 = insertelement <4 x float> %423, float %405, i32 3
  %425 = fmul <4 x float> %420, %424
  %426 = fadd <4 x float> %415, %425
  %427 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %41, i64 0, i32 4
  %428 = load float, float* %427, align 4, !noalias !12
  %429 = fmul float %408, %428
  %430 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %41, i64 0, i32 5
  %431 = load float, float* %430, align 4, !noalias !12
  %432 = fmul float %418, %431
  %433 = fadd float %429, %432
  %434 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %42, i64 0, i32 4
  %435 = load float, float* %434, align 8, !noalias !12
  %436 = fadd float %435, %433
  %437 = fmul float %409, %428
  %438 = fmul float %419, %431
  %439 = fadd float %437, %438
  %440 = getelementptr inbounds %class.CFX_Matrix, %class.CFX_Matrix* %42, i64 0, i32 5
  %441 = load float, float* %440, align 4, !noalias !12
  %442 = fadd float %439, %441
  %443 = bitcast %class.CFX_Matrix* %40 to <4 x float>*
  store <4 x float> %426, <4 x float>* %443, align 16, !alias.scope !12
  store float %436, float* %387, align 16, !alias.scope !12
  store float %442, float* %388, align 4, !alias.scope !12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %390) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %389) #10
  %444 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %276, align 8
  %445 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %444, i64 0, i32 0, i32 2
  %446 = load i32, i32* %445, align 4
  %447 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %444, i64 0, i32 0, i32 3
  %448 = load i32, i32* %447, align 8
  %449 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %444, i64 0, i32 0, i32 4
  %450 = load i32, i32* %449, align 4
  %451 = zext i32 %370 to i64
  %452 = icmp eq i32 %370, 0
  br i1 %452, label %466, label %453

453:                                              ; preds = %379
  %454 = shl nuw nsw i64 %451, 2
  %455 = call i8* @_Znwm(i64 %454) #11
  %456 = bitcast i8* %455 to float*
  %457 = ptrtoint i8* %455 to i64
  %458 = getelementptr inbounds float, float* %456, i64 %451
  %459 = add nsw i64 %451, -1
  %460 = getelementptr float, float* %456, i64 %459
  %461 = ptrtoint float* %460 to i64
  %462 = sub i64 4, %457
  %463 = add i64 %462, %461
  %464 = and i64 %463, -4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %455, i8 0, i64 %464, i1 false) #10
  %465 = ptrtoint float* %458 to i64
  br label %466

466:                                              ; preds = %453, %379
  %467 = phi i64 [ 0, %379 ], [ %457, %453 ]
  %468 = phi i64 [ 0, %379 ], [ %465, %453 ]
  %469 = icmp sgt i32 %448, 0
  br i1 %469, label %470, label %494

470:                                              ; preds = %466
  %471 = icmp sgt i32 %446, 0
  %472 = bitcast %class.CFX_PTemplate* %43 to i8*
  %473 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %43, i64 0, i32 0
  %474 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %43, i64 0, i32 1
  %475 = bitcast %class.CFX_PTemplate* %44 to i8*
  %476 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %44, i64 0, i32 0
  %477 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %44, i64 0, i32 1
  %478 = bitcast [2 x float]* %45 to i8*
  %479 = getelementptr inbounds [2 x float], [2 x float]* %45, i64 0, i64 0
  %480 = getelementptr inbounds [2 x float], [2 x float]* %45, i64 0, i64 1
  %481 = bitcast i32* %46 to i8*
  %482 = inttoptr i64 %467 to float*
  %483 = bitcast float* %47 to i8*
  %484 = bitcast float* %48 to i8*
  %485 = bitcast float* %49 to i8*
  %486 = sub i64 %468, %467
  %487 = ashr exact i64 %486, 2
  %488 = bitcast %"class.pdfium::span"* %50 to i64*
  %489 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %50, i64 0, i32 1
  %490 = shl i32 %6, 24
  %491 = sext i32 %450 to i64
  %492 = zext i32 %448 to i64
  %493 = zext i32 %446 to i64
  br label %499

494:                                              ; preds = %513, %466
  %495 = icmp eq i64 %467, 0
  br i1 %495, label %498, label %496

496:                                              ; preds = %494
  %497 = inttoptr i64 %467 to i8*
  call void @_ZdlPv(i8* %497) #11
  br label %498

498:                                              ; preds = %496, %494
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %386) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %384) #10
  br label %577

499:                                              ; preds = %516, %470
  %500 = phi %class.CFX_DIBitmap* [ %444, %470 ], [ %517, %516 ]
  %501 = phi i64 [ 0, %470 ], [ %514, %516 ]
  %502 = bitcast %class.CFX_DIBitmap* %500 to i8* (%class.CFX_DIBitmap*)***
  %503 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %502, align 8
  %504 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %503, i64 2
  %505 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %504, align 8
  %506 = call i8* %505(%class.CFX_DIBitmap* %500) #10
  %507 = mul nsw i64 %501, %491
  %508 = getelementptr inbounds i8, i8* %506, i64 %507
  %509 = bitcast i8* %508 to i32*
  br i1 %471, label %510, label %513

510:                                              ; preds = %499
  %511 = trunc i64 %501 to i32
  %512 = sitofp i32 %511 to float
  br label %518

513:                                              ; preds = %574, %499
  %514 = add nuw nsw i64 %501, 1
  %515 = icmp eq i64 %514, %492
  br i1 %515, label %494, label %516

516:                                              ; preds = %513
  %517 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %276, align 8
  br label %499

518:                                              ; preds = %574, %510
  %519 = phi i64 [ 0, %510 ], [ %575, %574 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %472) #10
  store float 0xFFFFFFFFE0000000, float* %473, align 4
  store float 0xFFFFFFFFE0000000, float* %474, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %475) #10
  %520 = trunc i64 %519 to i32
  %521 = sitofp i32 %520 to float
  store float %521, float* %476, align 4
  store float %512, float* %477, align 4
  call void @_ZNK10CFX_Matrix9TransformERK13CFX_PTemplateIfE(%class.CFX_PTemplate* nonnull sret %43, %class.CFX_Matrix* nonnull %40, %class.CFX_PTemplate* nonnull dereferenceable(8) %44) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %475) #10
  %522 = load float, float* %473, align 4
  %523 = fcmp olt float %522, %380
  %524 = fcmp ogt float %522, %382
  %525 = or i1 %523, %524
  br i1 %525, label %574, label %526

526:                                              ; preds = %518
  %527 = load float, float* %474, align 4
  %528 = fcmp olt float %527, %381
  %529 = fcmp ogt float %527, %383
  %530 = or i1 %528, %529
  br i1 %530, label %574, label %531

531:                                              ; preds = %526
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %478) #10
  store float %522, float* %479, align 4
  store float %527, float* %480, align 4
  %532 = load %"class.std::__1::unique_ptr.159"*, %"class.std::__1::unique_ptr.159"** %299, align 8
  %533 = load %"class.std::__1::unique_ptr.159"*, %"class.std::__1::unique_ptr.159"** %301, align 8
  %534 = icmp eq %"class.std::__1::unique_ptr.159"* %532, %533
  br i1 %534, label %535, label %557

535:                                              ; preds = %570, %531
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %483) #10
  store float 0.000000e+00, float* %47, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %484) #10
  store float 0.000000e+00, float* %48, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %485) #10
  store float 0.000000e+00, float* %49, align 4
  %536 = load %class.CPDF_ColorSpace*, %class.CPDF_ColorSpace** %94, align 8
  store i64 %467, i64* %488, align 8
  store i64 %487, i64* %489, align 8
  %537 = bitcast %class.CPDF_ColorSpace* %536 to i1 (%class.CPDF_ColorSpace*, %"class.pdfium::span"*, float*, float*, float*)***
  %538 = load i1 (%class.CPDF_ColorSpace*, %"class.pdfium::span"*, float*, float*, float*)**, i1 (%class.CPDF_ColorSpace*, %"class.pdfium::span"*, float*, float*, float*)*** %537, align 8
  %539 = getelementptr inbounds i1 (%class.CPDF_ColorSpace*, %"class.pdfium::span"*, float*, float*, float*)*, i1 (%class.CPDF_ColorSpace*, %"class.pdfium::span"*, float*, float*, float*)** %538, i64 2
  %540 = load i1 (%class.CPDF_ColorSpace*, %"class.pdfium::span"*, float*, float*, float*)*, i1 (%class.CPDF_ColorSpace*, %"class.pdfium::span"*, float*, float*, float*)** %539, align 8
  %541 = call zeroext i1 %540(%class.CPDF_ColorSpace* %536, %"class.pdfium::span"* nonnull %50, float* nonnull %47, float* nonnull %48, float* nonnull %49) #10
  %542 = load float, float* %47, align 4
  %543 = fmul float %542, 2.550000e+02
  %544 = fptosi float %543 to i32
  %545 = load float, float* %48, align 4
  %546 = fmul float %545, 2.550000e+02
  %547 = fptosi float %546 to i32
  %548 = load float, float* %49, align 4
  %549 = fmul float %548, 2.550000e+02
  %550 = fptosi float %549 to i32
  %551 = shl i32 %544, 16
  %552 = or i32 %551, %490
  %553 = shl i32 %547, 8
  %554 = or i32 %552, %553
  %555 = or i32 %554, %550
  %556 = getelementptr inbounds i32, i32* %509, i64 %519
  store i32 %555, i32* %556, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %485) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %484) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %483) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %478) #10
  br label %574

557:                                              ; preds = %531, %570
  %558 = phi i32 [ %571, %570 ], [ 0, %531 ]
  %559 = phi %"class.std::__1::unique_ptr.159"* [ %572, %570 ], [ %532, %531 ]
  %560 = getelementptr inbounds %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.159"* %559, i64 0, i32 0, i32 0, i32 0
  %561 = load %class.CPDF_Function*, %class.CPDF_Function** %560, align 8
  %562 = icmp eq %class.CPDF_Function* %561, null
  br i1 %562, label %570, label %563

563:                                              ; preds = %557
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %481) #10
  store i32 -1431655766, i32* %46, align 4
  %564 = sext i32 %558 to i64
  %565 = getelementptr inbounds float, float* %482, i64 %564
  %566 = call zeroext i1 @_ZNK13CPDF_Function4CallEPKfjPfPi(%class.CPDF_Function* nonnull %561, float* nonnull %479, i32 2, float* %565, i32* nonnull %46) #10
  %567 = load i32, i32* %46, align 4
  %568 = select i1 %566, i32 %567, i32 0
  %569 = add nsw i32 %568, %558
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %481) #10
  br label %570

570:                                              ; preds = %563, %557
  %571 = phi i32 [ %569, %563 ], [ %558, %557 ]
  %572 = getelementptr inbounds %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.159"* %559, i64 1
  %573 = icmp eq %"class.std::__1::unique_ptr.159"* %572, %533
  br i1 %573, label %535, label %557

574:                                              ; preds = %535, %526, %518
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %472) #10
  %575 = add nuw nsw i64 %519, 1
  %576 = icmp eq i64 %575, %493
  br i1 %576, label %513, label %518

577:                                              ; preds = %297, %336, %498
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %298)
  br label %1651

578:                                              ; preds = %293
  %579 = getelementptr inbounds %"class.std::__1::vector.157", %"class.std::__1::vector.157"* %86, i64 0, i32 0, i32 0
  %580 = load %"class.std::__1::unique_ptr.159"*, %"class.std::__1::unique_ptr.159"** %579, align 8
  %581 = getelementptr inbounds %class.CPDF_ShadingPattern, %class.CPDF_ShadingPattern* %3, i64 0, i32 4, i32 0, i32 1
  %582 = load %"class.std::__1::unique_ptr.159"*, %"class.std::__1::unique_ptr.159"** %581, align 8
  %583 = icmp eq %"class.std::__1::unique_ptr.159"* %580, %582
  br i1 %583, label %1651, label %584

584:                                              ; preds = %578
  %585 = ptrtoint %"class.std::__1::unique_ptr.159"* %580 to i64
  %586 = getelementptr %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.159"* %582, i64 -1, i32 0, i32 0, i32 0
  %587 = ptrtoint %class.CPDF_Function** %586 to i64
  %588 = sub i64 %587, %585
  %589 = lshr i64 %588, 3
  %590 = add nuw nsw i64 %589, 1
  %591 = and i64 %590, 1
  %592 = icmp eq i64 %589, 0
  br i1 %592, label %595, label %593

593:                                              ; preds = %584
  %594 = sub nuw nsw i64 %590, %591
  br label %622

595:                                              ; preds = %1743, %584
  %596 = phi i32 [ undef, %584 ], [ %1744, %1743 ]
  %597 = phi i8 [ undef, %584 ], [ %1745, %1743 ]
  %598 = phi %"class.std::__1::unique_ptr.159"* [ %580, %584 ], [ %1746, %1743 ]
  %599 = phi i8 [ 1, %584 ], [ %1745, %1743 ]
  %600 = phi i32 [ 0, %584 ], [ %1744, %1743 ]
  %601 = icmp eq i64 %591, 0
  br i1 %601, label %616, label %602

602:                                              ; preds = %595
  %603 = getelementptr inbounds %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.159"* %598, i64 0, i32 0, i32 0, i32 0
  %604 = load %class.CPDF_Function*, %class.CPDF_Function** %603, align 8
  %605 = icmp eq %class.CPDF_Function* %604, null
  br i1 %605, label %616, label %606

606:                                              ; preds = %602
  %607 = icmp eq i8 %599, 0
  br i1 %607, label %616, label %608

608:                                              ; preds = %606
  %609 = getelementptr inbounds %class.CPDF_Function, %class.CPDF_Function* %604, i64 0, i32 3
  %610 = load i32, i32* %609, align 8
  %611 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %600, i32 %610) #10
  %612 = extractvalue { i32, i1 } %611, 1
  %613 = extractvalue { i32, i1 } %611, 0
  %614 = xor i1 %612, true
  %615 = zext i1 %614 to i8
  br label %616

616:                                              ; preds = %608, %606, %602, %595
  %617 = phi i32 [ %596, %595 ], [ %600, %602 ], [ %613, %608 ], [ 0, %606 ]
  %618 = phi i8 [ %597, %595 ], [ %599, %602 ], [ %615, %608 ], [ 0, %606 ]
  %619 = icmp eq i8 %618, 0
  %620 = icmp eq i32 %617, 0
  %621 = or i1 %620, %619
  br i1 %621, label %1651, label %646

622:                                              ; preds = %1743, %593
  %623 = phi %"class.std::__1::unique_ptr.159"* [ %580, %593 ], [ %1746, %1743 ]
  %624 = phi i8 [ 1, %593 ], [ %1745, %1743 ]
  %625 = phi i32 [ 0, %593 ], [ %1744, %1743 ]
  %626 = phi i64 [ %594, %593 ], [ %1747, %1743 ]
  %627 = getelementptr inbounds %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.159"* %623, i64 0, i32 0, i32 0, i32 0
  %628 = load %class.CPDF_Function*, %class.CPDF_Function** %627, align 8
  %629 = icmp eq %class.CPDF_Function* %628, null
  br i1 %629, label %640, label %630

630:                                              ; preds = %622
  %631 = icmp eq i8 %624, 0
  br i1 %631, label %640, label %632

632:                                              ; preds = %630
  %633 = getelementptr inbounds %class.CPDF_Function, %class.CPDF_Function* %628, i64 0, i32 3
  %634 = load i32, i32* %633, align 8
  %635 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %625, i32 %634) #10
  %636 = extractvalue { i32, i1 } %635, 1
  %637 = extractvalue { i32, i1 } %635, 0
  %638 = xor i1 %636, true
  %639 = zext i1 %638 to i8
  br label %640

640:                                              ; preds = %632, %630, %622
  %641 = phi i32 [ %625, %622 ], [ %637, %632 ], [ 0, %630 ]
  %642 = phi i8 [ %624, %622 ], [ %639, %632 ], [ 0, %630 ]
  %643 = getelementptr inbounds %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.159"* %623, i64 1, i32 0, i32 0, i32 0
  %644 = load %class.CPDF_Function*, %class.CPDF_Function** %643, align 8
  %645 = icmp eq %class.CPDF_Function* %644, null
  br i1 %645, label %1743, label %1733

646:                                              ; preds = %616
  %647 = load %class.CPDF_ColorSpace*, %class.CPDF_ColorSpace** %94, align 8
  %648 = call i32 @_ZNK15CPDF_ColorSpace15CountComponentsEv(%class.CPDF_ColorSpace* %647) #10
  %649 = icmp ult i32 %617, %648
  %650 = select i1 %649, i32 %648, i32 %617
  %651 = bitcast %"class.fxcrt::ByteString"* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %651) #10
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %29, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0)) #10
  %652 = call %class.CPDF_Array* @_ZNK15CPDF_Dictionary11GetArrayForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %92, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %29) #10
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %29) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %651) #10
  %653 = icmp eq %class.CPDF_Array* %652, null
  br i1 %653, label %1651, label %654

654:                                              ; preds = %646
  %655 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %652, i64 0) #10
  %656 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %652, i64 1) #10
  %657 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %652, i64 2) #10
  %658 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %652, i64 3) #10
  %659 = bitcast %"class.fxcrt::ByteString"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %659) #10
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %30, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0)) #10
  %660 = call %class.CPDF_Array* @_ZNK15CPDF_Dictionary11GetArrayForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %92, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %30) #10
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %30) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %659) #10
  %661 = icmp eq %class.CPDF_Array* %660, null
  br i1 %661, label %665, label %662

662:                                              ; preds = %654
  %663 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %660, i64 0) #10
  %664 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %660, i64 1) #10
  br label %665

665:                                              ; preds = %662, %654
  %666 = phi float [ %663, %662 ], [ 0.000000e+00, %654 ]
  %667 = phi float [ %664, %662 ], [ 1.000000e+00, %654 ]
  %668 = bitcast %"class.fxcrt::ByteString"* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %668) #10
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %31, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0)) #10
  %669 = call %class.CPDF_Array* @_ZNK15CPDF_Dictionary11GetArrayForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %92, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %31) #10
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %31) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %668) #10
  %670 = icmp eq %class.CPDF_Array* %669, null
  br i1 %670, label %674, label %671

671:                                              ; preds = %665
  %672 = call zeroext i1 @_ZNK10CPDF_Array12GetBooleanAtEmb(%class.CPDF_Array* nonnull %669, i64 0, i1 zeroext false) #10
  %673 = call zeroext i1 @_ZNK10CPDF_Array12GetBooleanAtEmb(%class.CPDF_Array* nonnull %669, i64 1, i1 zeroext false) #10
  br label %674

674:                                              ; preds = %671, %665
  %675 = phi i1 [ %672, %671 ], [ false, %665 ]
  %676 = phi i1 [ %673, %671 ], [ false, %665 ]
  %677 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %276, align 8
  %678 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %677, i64 0, i32 0, i32 2
  %679 = load i32, i32* %678, align 4
  %680 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %677, i64 0, i32 0, i32 3
  %681 = load i32, i32* %680, align 8
  %682 = insertelement <2 x float> undef, float %657, i32 0
  %683 = insertelement <2 x float> %682, float %658, i32 1
  %684 = insertelement <2 x float> undef, float %655, i32 0
  %685 = insertelement <2 x float> %684, float %656, i32 1
  %686 = fsub <2 x float> %683, %685
  %687 = extractelement <2 x float> %686, i32 0
  %688 = fmul float %687, %687
  %689 = extractelement <2 x float> %686, i32 1
  %690 = fmul float %689, %689
  %691 = fadd float %688, %690
  %692 = bitcast %"struct.std::__1::array.243"* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %692) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %692, i8 -86, i64 1024, i1 false) #10
  %693 = zext i32 %650 to i64
  call fastcc void @_ZN12_GLOBAL__N_115GetShadingStepsEffRKNSt3__16vectorINS0_10unique_ptrI13CPDF_FunctionNS0_14default_deleteIS3_EEEENS0_9allocatorIS6_EEEERKN5fxcrt9RetainPtrI15CPDF_ColorSpaceEEim(%"struct.std::__1::array.243"* nonnull sret %32, float %666, float %667, %"class.std::__1::vector.157"* dereferenceable(24) %86, %"class.fxcrt::RetainPtr.77"* nonnull dereferenceable(8) %65, i32 %6, i64 %693) #10
  %694 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %276, align 8
  %695 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %694, i64 0, i32 0, i32 4
  %696 = load i32, i32* %695, align 4
  %697 = bitcast %class.CFX_Matrix* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %697) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %697, i8 -1, i64 24, i1 false) #10
  call void @_ZNK10CFX_Matrix10GetInverseEv(%class.CFX_Matrix* nonnull sret %33, %class.CFX_Matrix* nonnull %83) #10
  %698 = icmp sgt i32 %681, 0
  br i1 %698, label %699, label %712

699:                                              ; preds = %674
  %700 = icmp sgt i32 %679, 0
  %701 = bitcast <2 x float>* %34 to i8*
  %702 = getelementptr inbounds <2 x float>, <2 x float>* %34, i64 0, i64 0
  %703 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %35, i64 0, i32 1
  %704 = bitcast %class.CFX_PTemplate* %36 to i8*
  %705 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %36, i64 0, i32 0
  %706 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %36, i64 0, i32 1
  %707 = sext i32 %696 to i64
  %708 = zext i32 %681 to i64
  %709 = zext i32 %679 to i64
  %710 = insertelement <2 x float> undef, float %655, i32 0
  %711 = insertelement <2 x float> %710, float %656, i32 1
  br label %713

712:                                              ; preds = %727, %674
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %697) #10
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %692) #10
  br label %1651

713:                                              ; preds = %727, %699
  %714 = phi i64 [ 0, %699 ], [ %728, %727 ]
  %715 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %276, align 8
  %716 = bitcast %class.CFX_DIBitmap* %715 to i8* (%class.CFX_DIBitmap*)***
  %717 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %716, align 8
  %718 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %717, i64 2
  %719 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %718, align 8
  %720 = call i8* %719(%class.CFX_DIBitmap* %715) #10
  %721 = mul nsw i64 %714, %707
  %722 = getelementptr inbounds i8, i8* %720, i64 %721
  %723 = bitcast i8* %722 to i32*
  br i1 %700, label %724, label %727

724:                                              ; preds = %713
  %725 = trunc i64 %714 to i32
  %726 = sitofp i32 %725 to float
  br label %730

727:                                              ; preds = %755, %713
  %728 = add nuw nsw i64 %714, 1
  %729 = icmp eq i64 %728, %708
  br i1 %729, label %712, label %713

730:                                              ; preds = %755, %724
  %731 = phi i64 [ 0, %724 ], [ %756, %755 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %701) #10
  store float 0xFFFFFFFFE0000000, float* %702, align 8
  store float 0xFFFFFFFFE0000000, float* %703, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %704) #10
  %732 = trunc i64 %731 to i32
  %733 = sitofp i32 %732 to float
  store float %733, float* %705, align 4
  store float %726, float* %706, align 4
  call void @_ZNK10CFX_Matrix9TransformERK13CFX_PTemplateIfE(%class.CFX_PTemplate* nonnull sret %35, %class.CFX_Matrix* nonnull %33, %class.CFX_PTemplate* nonnull dereferenceable(8) %36) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %704) #10
  %734 = load <2 x float>, <2 x float>* %34, align 8
  %735 = fsub <2 x float> %734, %711
  %736 = fmul <2 x float> %686, %735
  %737 = extractelement <2 x float> %736, i32 0
  %738 = extractelement <2 x float> %736, i32 1
  %739 = fadd float %737, %738
  %740 = fdiv float %739, %691
  %741 = fmul float %740, 2.550000e+02
  %742 = fptosi float %741 to i32
  %743 = icmp slt i32 %742, 0
  br i1 %743, label %744, label %745

744:                                              ; preds = %730
  br i1 %675, label %749, label %755

745:                                              ; preds = %730
  %746 = icmp slt i32 %742, 256
  %747 = or i1 %676, %746
  %748 = select i1 %746, i32 %742, i32 255
  br i1 %747, label %749, label %755

749:                                              ; preds = %745, %744
  %750 = phi i32 [ %748, %745 ], [ 0, %744 ]
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds %"struct.std::__1::array.243", %"struct.std::__1::array.243"* %32, i64 0, i32 0, i64 %751
  %753 = load i32, i32* %752, align 4
  %754 = getelementptr inbounds i32, i32* %723, i64 %731
  store i32 %753, i32* %754, align 4
  br label %755

755:                                              ; preds = %749, %745, %744
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %701) #10
  %756 = add nuw nsw i64 %731, 1
  %757 = icmp eq i64 %756, %709
  br i1 %757, label %727, label %730

758:                                              ; preds = %293
  %759 = getelementptr inbounds %"class.std::__1::vector.157", %"class.std::__1::vector.157"* %86, i64 0, i32 0, i32 0
  %760 = load %"class.std::__1::unique_ptr.159"*, %"class.std::__1::unique_ptr.159"** %759, align 8
  %761 = getelementptr inbounds %class.CPDF_ShadingPattern, %class.CPDF_ShadingPattern* %3, i64 0, i32 4, i32 0, i32 1
  %762 = load %"class.std::__1::unique_ptr.159"*, %"class.std::__1::unique_ptr.159"** %761, align 8
  %763 = icmp eq %"class.std::__1::unique_ptr.159"* %760, %762
  br i1 %763, label %1651, label %764

764:                                              ; preds = %758
  %765 = ptrtoint %"class.std::__1::unique_ptr.159"* %760 to i64
  %766 = getelementptr %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.159"* %762, i64 -1, i32 0, i32 0, i32 0
  %767 = ptrtoint %class.CPDF_Function** %766 to i64
  %768 = sub i64 %767, %765
  %769 = lshr i64 %768, 3
  %770 = add nuw nsw i64 %769, 1
  %771 = and i64 %770, 1
  %772 = icmp eq i64 %769, 0
  br i1 %772, label %775, label %773

773:                                              ; preds = %764
  %774 = sub nuw nsw i64 %770, %771
  br label %802

775:                                              ; preds = %1759, %764
  %776 = phi i32 [ undef, %764 ], [ %1760, %1759 ]
  %777 = phi i8 [ undef, %764 ], [ %1761, %1759 ]
  %778 = phi %"class.std::__1::unique_ptr.159"* [ %760, %764 ], [ %1762, %1759 ]
  %779 = phi i8 [ 1, %764 ], [ %1761, %1759 ]
  %780 = phi i32 [ 0, %764 ], [ %1760, %1759 ]
  %781 = icmp eq i64 %771, 0
  br i1 %781, label %796, label %782

782:                                              ; preds = %775
  %783 = getelementptr inbounds %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.159"* %778, i64 0, i32 0, i32 0, i32 0
  %784 = load %class.CPDF_Function*, %class.CPDF_Function** %783, align 8
  %785 = icmp eq %class.CPDF_Function* %784, null
  br i1 %785, label %796, label %786

786:                                              ; preds = %782
  %787 = icmp eq i8 %779, 0
  br i1 %787, label %796, label %788

788:                                              ; preds = %786
  %789 = getelementptr inbounds %class.CPDF_Function, %class.CPDF_Function* %784, i64 0, i32 3
  %790 = load i32, i32* %789, align 8
  %791 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %780, i32 %790) #10
  %792 = extractvalue { i32, i1 } %791, 1
  %793 = extractvalue { i32, i1 } %791, 0
  %794 = xor i1 %792, true
  %795 = zext i1 %794 to i8
  br label %796

796:                                              ; preds = %788, %786, %782, %775
  %797 = phi i32 [ %776, %775 ], [ %780, %782 ], [ %793, %788 ], [ 0, %786 ]
  %798 = phi i8 [ %777, %775 ], [ %779, %782 ], [ %795, %788 ], [ 0, %786 ]
  %799 = icmp eq i8 %798, 0
  %800 = icmp eq i32 %797, 0
  %801 = or i1 %800, %799
  br i1 %801, label %1651, label %826

802:                                              ; preds = %1759, %773
  %803 = phi %"class.std::__1::unique_ptr.159"* [ %760, %773 ], [ %1762, %1759 ]
  %804 = phi i8 [ 1, %773 ], [ %1761, %1759 ]
  %805 = phi i32 [ 0, %773 ], [ %1760, %1759 ]
  %806 = phi i64 [ %774, %773 ], [ %1763, %1759 ]
  %807 = getelementptr inbounds %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.159"* %803, i64 0, i32 0, i32 0, i32 0
  %808 = load %class.CPDF_Function*, %class.CPDF_Function** %807, align 8
  %809 = icmp eq %class.CPDF_Function* %808, null
  br i1 %809, label %820, label %810

810:                                              ; preds = %802
  %811 = icmp eq i8 %804, 0
  br i1 %811, label %820, label %812

812:                                              ; preds = %810
  %813 = getelementptr inbounds %class.CPDF_Function, %class.CPDF_Function* %808, i64 0, i32 3
  %814 = load i32, i32* %813, align 8
  %815 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %805, i32 %814) #10
  %816 = extractvalue { i32, i1 } %815, 1
  %817 = extractvalue { i32, i1 } %815, 0
  %818 = xor i1 %816, true
  %819 = zext i1 %818 to i8
  br label %820

820:                                              ; preds = %812, %810, %802
  %821 = phi i32 [ %805, %802 ], [ %817, %812 ], [ 0, %810 ]
  %822 = phi i8 [ %804, %802 ], [ %819, %812 ], [ 0, %810 ]
  %823 = getelementptr inbounds %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.159"* %803, i64 1, i32 0, i32 0, i32 0
  %824 = load %class.CPDF_Function*, %class.CPDF_Function** %823, align 8
  %825 = icmp eq %class.CPDF_Function* %824, null
  br i1 %825, label %1759, label %1749

826:                                              ; preds = %796
  %827 = load %class.CPDF_ColorSpace*, %class.CPDF_ColorSpace** %94, align 8
  %828 = call i32 @_ZNK15CPDF_ColorSpace15CountComponentsEv(%class.CPDF_ColorSpace* %827) #10
  %829 = icmp ult i32 %797, %828
  %830 = select i1 %829, i32 %828, i32 %797
  %831 = bitcast %"class.fxcrt::ByteString"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %831) #10
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %19, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0)) #10
  %832 = call %class.CPDF_Array* @_ZNK15CPDF_Dictionary11GetArrayForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %92, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %19) #10
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %19) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %831) #10
  %833 = icmp eq %class.CPDF_Array* %832, null
  br i1 %833, label %1651, label %834

834:                                              ; preds = %826
  %835 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %832, i64 0) #10
  %836 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %832, i64 1) #10
  %837 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %832, i64 2) #10
  %838 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %832, i64 3) #10
  %839 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %832, i64 4) #10
  %840 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %832, i64 5) #10
  %841 = bitcast %"class.fxcrt::ByteString"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %841) #10
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %20, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0)) #10
  %842 = call %class.CPDF_Array* @_ZNK15CPDF_Dictionary11GetArrayForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %92, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %20) #10
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %20) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %841) #10
  %843 = icmp eq %class.CPDF_Array* %842, null
  br i1 %843, label %847, label %844

844:                                              ; preds = %834
  %845 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %842, i64 0) #10
  %846 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %842, i64 1) #10
  br label %847

847:                                              ; preds = %844, %834
  %848 = phi float [ %845, %844 ], [ 0.000000e+00, %834 ]
  %849 = phi float [ %846, %844 ], [ 1.000000e+00, %834 ]
  %850 = bitcast %"class.fxcrt::ByteString"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %850) #10
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %21, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0)) #10
  %851 = call %class.CPDF_Array* @_ZNK15CPDF_Dictionary11GetArrayForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %92, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %21) #10
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %21) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %850) #10
  %852 = icmp eq %class.CPDF_Array* %851, null
  br i1 %852, label %856, label %853

853:                                              ; preds = %847
  %854 = call zeroext i1 @_ZNK10CPDF_Array12GetBooleanAtEmb(%class.CPDF_Array* nonnull %851, i64 0, i1 zeroext false) #10
  %855 = call zeroext i1 @_ZNK10CPDF_Array12GetBooleanAtEmb(%class.CPDF_Array* nonnull %851, i64 1, i1 zeroext false) #10
  br label %856

856:                                              ; preds = %853, %847
  %857 = phi i1 [ %854, %853 ], [ false, %847 ]
  %858 = phi i1 [ %855, %853 ], [ false, %847 ]
  %859 = bitcast %"struct.std::__1::array.243"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %859) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %859, i8 -86, i64 1024, i1 false) #10
  %860 = zext i32 %830 to i64
  call fastcc void @_ZN12_GLOBAL__N_115GetShadingStepsEffRKNSt3__16vectorINS0_10unique_ptrI13CPDF_FunctionNS0_14default_deleteIS3_EEEENS0_9allocatorIS6_EEEERKN5fxcrt9RetainPtrI15CPDF_ColorSpaceEEim(%"struct.std::__1::array.243"* nonnull sret %22, float %848, float %849, %"class.std::__1::vector.157"* dereferenceable(24) %86, %"class.fxcrt::RetainPtr.77"* nonnull dereferenceable(8) %65, i32 %6, i64 %860) #10
  %861 = insertelement <2 x float> undef, float %838, i32 0
  %862 = insertelement <2 x float> %861, float %839, i32 1
  %863 = insertelement <2 x float> undef, float %835, i32 0
  %864 = insertelement <2 x float> %863, float %836, i32 1
  %865 = fsub <2 x float> %862, %864
  %866 = fsub float %840, %837
  %867 = fmul <2 x float> %865, %865
  %868 = extractelement <2 x float> %867, i32 0
  %869 = extractelement <2 x float> %867, i32 1
  %870 = fadd float %868, %869
  %871 = fmul float %866, %866
  %872 = fsub float %870, %871
  %873 = fpext float %872 to double
  %874 = fcmp olt double %873, 1.000000e-04
  %875 = fcmp ogt double %873, -1.000000e-04
  %876 = and i1 %874, %875
  %877 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %276, align 8
  %878 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %877, i64 0, i32 0, i32 2
  %879 = load i32, i32* %878, align 4
  %880 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %877, i64 0, i32 0, i32 3
  %881 = load i32, i32* %880, align 8
  %882 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %877, i64 0, i32 0, i32 4
  %883 = load i32, i32* %882, align 4
  %884 = fcmp olt float %866, 0.000000e+00
  br i1 %884, label %885, label %891

885:                                              ; preds = %856
  %886 = call float @sqrtf(float %870) #10
  %887 = fptosi float %886 to i32
  %888 = sitofp i32 %887 to float
  %889 = fsub float -0.000000e+00, %866
  %890 = fcmp olt float %888, %889
  br label %891

891:                                              ; preds = %885, %856
  %892 = phi i1 [ false, %856 ], [ %890, %885 ]
  %893 = bitcast %class.CFX_Matrix* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %893) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %893, i8 -1, i64 24, i1 false) #10
  call void @_ZNK10CFX_Matrix10GetInverseEv(%class.CFX_Matrix* nonnull sret %23, %class.CFX_Matrix* nonnull %83) #10
  %894 = icmp sgt i32 %881, 0
  br i1 %894, label %895, label %918

895:                                              ; preds = %891
  %896 = icmp sgt i32 %879, 0
  %897 = bitcast <2 x float>* %24 to i8*
  %898 = getelementptr inbounds <2 x float>, <2 x float>* %24, i64 0, i64 0
  %899 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %25, i64 0, i32 1
  %900 = bitcast %class.CFX_PTemplate* %26 to i8*
  %901 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %26, i64 0, i32 0
  %902 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %26, i64 0, i32 1
  %903 = fmul float %837, %866
  %904 = fmul float %837, %837
  %905 = fmul float %872, 2.000000e+00
  %906 = fcmp ugt float %872, 0.000000e+00
  %907 = sext i32 %883 to i64
  %908 = zext i32 %881 to i64
  %909 = zext i32 %879 to i64
  %910 = bitcast i32* %27 to i8*
  %911 = bitcast i32* %27 to float*
  %912 = bitcast i32* %28 to i8*
  %913 = bitcast i32* %28 to float*
  %914 = insertelement <2 x float> undef, float %905, i32 0
  %915 = shufflevector <2 x float> %914, <2 x float> undef, <2 x i32> zeroinitializer
  %916 = insertelement <2 x float> undef, float %835, i32 0
  %917 = insertelement <2 x float> %916, float %836, i32 1
  br label %919

918:                                              ; preds = %933, %891
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %893) #10
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %859) #10
  br label %1651

919:                                              ; preds = %933, %895
  %920 = phi i64 [ 0, %895 ], [ %934, %933 ]
  %921 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %276, align 8
  %922 = bitcast %class.CFX_DIBitmap* %921 to i8* (%class.CFX_DIBitmap*)***
  %923 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %922, align 8
  %924 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %923, i64 2
  %925 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %924, align 8
  %926 = call i8* %925(%class.CFX_DIBitmap* %921) #10
  %927 = mul nsw i64 %920, %907
  %928 = getelementptr inbounds i8, i8* %926, i64 %927
  %929 = bitcast i8* %928 to i32*
  br i1 %896, label %930, label %933

930:                                              ; preds = %919
  %931 = trunc i64 %920 to i32
  %932 = sitofp i32 %931 to float
  br label %936

933:                                              ; preds = %1020, %919
  %934 = add nuw nsw i64 %920, 1
  %935 = icmp eq i64 %934, %908
  br i1 %935, label %918, label %919

936:                                              ; preds = %1020, %930
  %937 = phi i64 [ 0, %930 ], [ %1021, %1020 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %897) #10
  store float 0xFFFFFFFFE0000000, float* %898, align 8
  store float 0xFFFFFFFFE0000000, float* %899, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %900) #10
  %938 = trunc i64 %937 to i32
  %939 = sitofp i32 %938 to float
  store float %939, float* %901, align 4
  store float %932, float* %902, align 4
  call void @_ZNK10CFX_Matrix9TransformERK13CFX_PTemplateIfE(%class.CFX_PTemplate* nonnull sret %25, %class.CFX_Matrix* nonnull %23, %class.CFX_PTemplate* nonnull dereferenceable(8) %26) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %900) #10
  %940 = load <2 x float>, <2 x float>* %24, align 8
  %941 = fsub <2 x float> %940, %917
  %942 = fmul <2 x float> %865, %941
  %943 = extractelement <2 x float> %942, i32 0
  %944 = extractelement <2 x float> %942, i32 1
  %945 = fadd float %943, %944
  %946 = fadd float %903, %945
  %947 = fmul float %946, -2.000000e+00
  %948 = extractelement <2 x float> %941, i32 0
  %949 = fmul float %948, %948
  %950 = extractelement <2 x float> %941, i32 1
  %951 = fmul float %950, %950
  %952 = fadd float %949, %951
  %953 = fsub float %952, %904
  %954 = fpext float %947 to double
  %955 = fcmp olt double %954, 1.000000e-04
  %956 = fcmp ogt double %954, -1.000000e-04
  %957 = and i1 %955, %956
  br i1 %957, label %958, label %962

958:                                              ; preds = %936
  %959 = fsub float -0.000000e+00, %953
  %960 = fdiv float %959, %872
  %961 = call float @sqrtf(float %960) #10
  br label %1004

962:                                              ; preds = %936
  br i1 %876, label %963, label %966

963:                                              ; preds = %962
  %964 = fsub float -0.000000e+00, %953
  %965 = fdiv float %964, %947
  br label %1004

966:                                              ; preds = %962
  %967 = fmul float %947, %947
  %968 = fmul float %872, %953
  %969 = fmul float %968, 4.000000e+00
  %970 = fsub float %967, %969
  %971 = fcmp olt float %970, 0.000000e+00
  br i1 %971, label %1020, label %972

972:                                              ; preds = %966
  %973 = call float @sqrtf(float %970) #10
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %910)
  %974 = fsub float -0.000000e+00, %947
  %975 = insertelement <2 x float> undef, float %974, i32 0
  %976 = insertelement <2 x float> %975, float %973, i32 1
  %977 = insertelement <2 x float> undef, float %973, i32 0
  %978 = insertelement <2 x float> %977, float %947, i32 1
  %979 = fsub <2 x float> %976, %978
  %980 = fdiv <2 x float> %979, %915
  %981 = extractelement <2 x float> %980, i32 0
  store float %981, float* %911, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %912)
  %982 = extractelement <2 x float> %980, i32 1
  store float %982, float* %913, align 4
  br i1 %906, label %985, label %983

983:                                              ; preds = %972
  store float %982, float* %911, align 4
  store float %981, float* %913, align 4
  %984 = shufflevector <2 x float> %980, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  br label %985

985:                                              ; preds = %983, %972
  %986 = phi <2 x float> [ %980, %972 ], [ %984, %983 ]
  br i1 %892, label %987, label %992

987:                                              ; preds = %985
  %988 = extractelement <2 x float> %986, i32 0
  %989 = fcmp oge float %988, 0.000000e+00
  %990 = or i1 %857, %989
  %991 = select i1 %990, i32* %27, i32* %28
  br label %997

992:                                              ; preds = %985
  %993 = extractelement <2 x float> %986, i32 1
  %994 = fcmp ole float %993, 1.000000e+00
  %995 = or i1 %858, %994
  %996 = select i1 %995, i32* %28, i32* %27
  br label %997

997:                                              ; preds = %992, %987
  %998 = phi i32* [ %991, %987 ], [ %996, %992 ]
  %999 = bitcast i32* %998 to float*
  %1000 = load float, float* %999, align 4
  %1001 = fmul float %866, %1000
  %1002 = fadd float %837, %1001
  %1003 = fcmp olt float %1002, 0.000000e+00
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %912)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %910)
  br i1 %1003, label %1020, label %1004

1004:                                             ; preds = %997, %963, %958
  %1005 = phi float [ %961, %958 ], [ %965, %963 ], [ %1000, %997 ]
  %1006 = fmul float %1005, 2.550000e+02
  %1007 = fptosi float %1006 to i32
  %1008 = icmp slt i32 %1007, 0
  br i1 %1008, label %1009, label %1010

1009:                                             ; preds = %1004
  br i1 %857, label %1014, label %1020

1010:                                             ; preds = %1004
  %1011 = icmp slt i32 %1007, 256
  %1012 = or i1 %858, %1011
  %1013 = select i1 %1011, i32 %1007, i32 255
  br i1 %1012, label %1014, label %1020

1014:                                             ; preds = %1010, %1009
  %1015 = phi i32 [ %1013, %1010 ], [ 0, %1009 ]
  %1016 = sext i32 %1015 to i64
  %1017 = getelementptr inbounds %"struct.std::__1::array.243", %"struct.std::__1::array.243"* %22, i64 0, i32 0, i64 %1016
  %1018 = load i32, i32* %1017, align 4
  %1019 = getelementptr inbounds i32, i32* %929, i64 %937
  store i32 %1018, i32* %1019, align 4
  br label %1020

1020:                                             ; preds = %1014, %1010, %1009, %997, %966
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %897) #10
  %1021 = add nuw nsw i64 %937, 1
  %1022 = icmp eq i64 %1021, %909
  br i1 %1022, label %933, label %936

1023:                                             ; preds = %293
  %1024 = call %class.CPDF_Object* @_ZNK19CPDF_ShadingPattern16GetShadingObjectEv(%class.CPDF_ShadingPattern* %3) #10
  %1025 = icmp eq %class.CPDF_Object* %1024, null
  br i1 %1025, label %1651, label %1026

1026:                                             ; preds = %1023
  %1027 = bitcast %class.CPDF_Object* %1024 to %class.CPDF_Stream* (%class.CPDF_Object*)***
  %1028 = load %class.CPDF_Stream* (%class.CPDF_Object*)**, %class.CPDF_Stream* (%class.CPDF_Object*)*** %1027, align 8
  %1029 = getelementptr inbounds %class.CPDF_Stream* (%class.CPDF_Object*)*, %class.CPDF_Stream* (%class.CPDF_Object*)** %1028, i64 36
  %1030 = load %class.CPDF_Stream* (%class.CPDF_Object*)*, %class.CPDF_Stream* (%class.CPDF_Object*)** %1029, align 8
  %1031 = call %class.CPDF_Stream* %1030(%class.CPDF_Object* nonnull %1024) #10
  %1032 = icmp eq %class.CPDF_Stream* %1031, null
  br i1 %1032, label %1651, label %1033

1033:                                             ; preds = %1026
  %1034 = bitcast %class.CPDF_MeshStream* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %1034) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1034, i8* align 8 bitcast ({ i32, [4 x i8], %"class.std::__1::vector.157"*, %"class.fxcrt::RetainPtr.244", %"class.fxcrt::RetainPtr.77", i32, i32, i32, i32, i32, i32, float, float, float, float, %"class.fxcrt::RetainPtr.250", %"class.std::__1::unique_ptr.256", [8 x float], [8 x float] }* @__const._ZN12_GLOBAL__N_119DrawCoonPatchMeshesE11ShadingTypeRKN5fxcrt9RetainPtrI12CFX_DIBitmapEERK10CFX_MatrixPK11CPDF_StreamRKNSt3__16vectorINSD_10unique_ptrI13CPDF_FunctionNSD_14default_deleteISG_EEEENSD_9allocatorISJ_EEEERKNS2_I15CPDF_ColorSpaceEEbi.stream to i8*), i64 152, i1 false) #10
  call void @_ZN15CPDF_MeshStreamC1E11ShadingTypeRKNSt3__16vectorINS1_10unique_ptrI13CPDF_FunctionNS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEEPK11CPDF_StreamRKN5fxcrt9RetainPtrI15CPDF_ColorSpaceEE(%class.CPDF_MeshStream* nonnull %14, i32 4, %"class.std::__1::vector.157"* dereferenceable(24) %86, %class.CPDF_Stream* nonnull %1031, %"class.fxcrt::RetainPtr.77"* nonnull dereferenceable(8) %65) #10
  %1035 = call zeroext i1 @_ZN15CPDF_MeshStream4LoadEv(%class.CPDF_MeshStream* nonnull %14) #10
  br i1 %1035, label %1036, label %1099

1036:                                             ; preds = %1033
  %1037 = bitcast [3 x %class.CPDF_MeshVertex]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 60, i8* nonnull %1037) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1037, i8 -1, i64 60, i1 false) #10
  %1038 = getelementptr inbounds [3 x %class.CPDF_MeshVertex], [3 x %class.CPDF_MeshVertex]* %15, i64 0, i64 0
  call void @_ZN15CPDF_MeshVertexC1Ev(%class.CPDF_MeshVertex* nonnull %1038) #10
  %1039 = getelementptr inbounds [3 x %class.CPDF_MeshVertex], [3 x %class.CPDF_MeshVertex]* %15, i64 0, i64 1
  call void @_ZN15CPDF_MeshVertexC1Ev(%class.CPDF_MeshVertex* %1039) #10
  %1040 = getelementptr inbounds [3 x %class.CPDF_MeshVertex], [3 x %class.CPDF_MeshVertex]* %15, i64 0, i64 2
  call void @_ZN15CPDF_MeshVertexC1Ev(%class.CPDF_MeshVertex* %1040) #10
  %1041 = getelementptr inbounds %class.CPDF_MeshStream, %class.CPDF_MeshStream* %14, i64 0, i32 15, i32 0, i32 0, i32 0
  %1042 = load %class.CFX_BitStream*, %class.CFX_BitStream** %1041, align 8
  %1043 = getelementptr inbounds %class.CFX_BitStream, %class.CFX_BitStream* %1042, i64 0, i32 0
  %1044 = load i32, i32* %1043, align 8
  %1045 = getelementptr inbounds %class.CFX_BitStream, %class.CFX_BitStream* %1042, i64 0, i32 1
  %1046 = load i32, i32* %1045, align 4
  %1047 = icmp ult i32 %1044, %1046
  br i1 %1047, label %1048, label %1098

1048:                                             ; preds = %1036
  %1049 = bitcast %class.CPDF_MeshVertex* %16 to i8*
  %1050 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %16, i64 0, i32 0, i32 1
  %1051 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %16, i64 0, i32 1
  %1052 = bitcast i32* %17 to i8*
  %1053 = bitcast %class.CPDF_MeshVertex* %1039 to i32*
  %1054 = bitcast [3 x %class.CPDF_MeshVertex]* %15 to i32*
  %1055 = getelementptr inbounds [3 x %class.CPDF_MeshVertex], [3 x %class.CPDF_MeshVertex]* %15, i64 0, i64 1, i32 0, i32 1
  %1056 = bitcast float* %1055 to i32*
  %1057 = getelementptr inbounds [3 x %class.CPDF_MeshVertex], [3 x %class.CPDF_MeshVertex]* %15, i64 0, i64 0, i32 0, i32 1
  %1058 = bitcast float* %1057 to i32*
  %1059 = getelementptr inbounds [3 x %class.CPDF_MeshVertex], [3 x %class.CPDF_MeshVertex]* %15, i64 0, i64 0, i32 1
  %1060 = getelementptr inbounds [3 x %class.CPDF_MeshVertex], [3 x %class.CPDF_MeshVertex]* %15, i64 0, i64 1, i32 1
  %1061 = bitcast float* %1059 to i8*
  %1062 = bitcast float* %1060 to i8*
  %1063 = bitcast %class.CPDF_MeshVertex* %16 to i32*
  %1064 = bitcast float* %1050 to i32*
  %1065 = bitcast float* %1051 to i8*
  %1066 = bitcast i32* %18 to i8*
  %1067 = bitcast %class.CPDF_MeshVertex* %1040 to i32*
  %1068 = getelementptr inbounds [3 x %class.CPDF_MeshVertex], [3 x %class.CPDF_MeshVertex]* %15, i64 0, i64 2, i32 0, i32 1
  %1069 = bitcast float* %1068 to i32*
  %1070 = getelementptr inbounds [3 x %class.CPDF_MeshVertex], [3 x %class.CPDF_MeshVertex]* %15, i64 0, i64 2, i32 1
  %1071 = bitcast float* %1070 to i8*
  br label %1072

1072:                                             ; preds = %1090, %1048
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %1049) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %1049, i8 -1, i64 20, i1 false) #10
  call void @_ZN15CPDF_MeshVertexC1Ev(%class.CPDF_MeshVertex* nonnull %16) #10
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1052) #10
  store i32 -1431655766, i32* %17, align 4
  %1073 = call zeroext i1 @_ZN15CPDF_MeshStream10ReadVertexERK10CFX_MatrixP15CPDF_MeshVertexPj(%class.CPDF_MeshStream* nonnull %14, %class.CFX_Matrix* nonnull dereferenceable(24) %83, %class.CPDF_MeshVertex* nonnull %16, i32* nonnull %17) #10
  br i1 %1073, label %1074, label %1097

1074:                                             ; preds = %1072
  %1075 = load i32, i32* %17, align 4
  switch i32 %1075, label %1085 [
    i32 0, label %1076
    i32 1, label %1082
  ]

1076:                                             ; preds = %1074
  %1077 = load i32, i32* %1063, align 4
  store i32 %1077, i32* %1054, align 16
  %1078 = load i32, i32* %1064, align 4
  store i32 %1078, i32* %1058, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1061, i8* align 4 %1065, i64 12, i1 false) #10
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1066) #10
  store i32 -1431655766, i32* %18, align 4
  %1079 = call zeroext i1 @_ZN15CPDF_MeshStream10ReadVertexERK10CFX_MatrixP15CPDF_MeshVertexPj(%class.CPDF_MeshStream* nonnull %14, %class.CFX_Matrix* nonnull dereferenceable(24) %83, %class.CPDF_MeshVertex* %1039, i32* nonnull %18) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1066) #10
  br i1 %1079, label %1080, label %1097

1080:                                             ; preds = %1076
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1066) #10
  store i32 -1431655766, i32* %18, align 4
  %1081 = call zeroext i1 @_ZN15CPDF_MeshStream10ReadVertexERK10CFX_MatrixP15CPDF_MeshVertexPj(%class.CPDF_MeshStream* nonnull %14, %class.CFX_Matrix* nonnull dereferenceable(24) %83, %class.CPDF_MeshVertex* %1040, i32* nonnull %18) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1066) #10
  br i1 %1081, label %1090, label %1097

1082:                                             ; preds = %1074
  %1083 = load i32, i32* %1053, align 4
  store i32 %1083, i32* %1054, align 16
  %1084 = load i32, i32* %1056, align 4
  store i32 %1084, i32* %1058, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1061, i8* align 4 %1062, i64 12, i1 false) #10
  br label %1085

1085:                                             ; preds = %1082, %1074
  %1086 = load i32, i32* %1067, align 8
  store i32 %1086, i32* %1053, align 4
  %1087 = load i32, i32* %1069, align 4
  store i32 %1087, i32* %1056, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1062, i8* align 8 %1071, i64 12, i1 false) #10
  %1088 = load i32, i32* %1063, align 4
  store i32 %1088, i32* %1067, align 8
  %1089 = load i32, i32* %1064, align 4
  store i32 %1089, i32* %1069, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1071, i8* align 4 %1065, i64 12, i1 false) #10
  br label %1090

1090:                                             ; preds = %1085, %1080
  call fastcc void @_ZN12_GLOBAL__N_111DrawGouraudERKN5fxcrt9RetainPtrI12CFX_DIBitmapEEiP15CPDF_MeshVertex(%"class.fxcrt::RetainPtr"* nonnull dereferenceable(8) %84, i32 %6, %class.CPDF_MeshVertex* nonnull %1038) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1052) #10
  call void @_ZN15CPDF_MeshVertexD1Ev(%class.CPDF_MeshVertex* nonnull %16) #10
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %1049) #10
  %1091 = load %class.CFX_BitStream*, %class.CFX_BitStream** %1041, align 8
  %1092 = getelementptr inbounds %class.CFX_BitStream, %class.CFX_BitStream* %1091, i64 0, i32 0
  %1093 = load i32, i32* %1092, align 8
  %1094 = getelementptr inbounds %class.CFX_BitStream, %class.CFX_BitStream* %1091, i64 0, i32 1
  %1095 = load i32, i32* %1094, align 4
  %1096 = icmp ult i32 %1093, %1095
  br i1 %1096, label %1072, label %1098

1097:                                             ; preds = %1080, %1076, %1072
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1052) #10
  call void @_ZN15CPDF_MeshVertexD1Ev(%class.CPDF_MeshVertex* nonnull %16) #10
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %1049) #10
  br label %1098

1098:                                             ; preds = %1090, %1097, %1036
  call void @_ZN15CPDF_MeshVertexD1Ev(%class.CPDF_MeshVertex* %1040) #10
  call void @_ZN15CPDF_MeshVertexD1Ev(%class.CPDF_MeshVertex* %1039) #10
  call void @_ZN15CPDF_MeshVertexD1Ev(%class.CPDF_MeshVertex* nonnull %1038) #10
  call void @llvm.lifetime.end.p0i8(i64 60, i8* nonnull %1037) #10
  br label %1099

1099:                                             ; preds = %1033, %1098
  call void @_ZN15CPDF_MeshStreamD1Ev(%class.CPDF_MeshStream* nonnull %14) #10
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %1034) #10
  br label %1651

1100:                                             ; preds = %293
  %1101 = call %class.CPDF_Object* @_ZNK19CPDF_ShadingPattern16GetShadingObjectEv(%class.CPDF_ShadingPattern* %3) #10
  %1102 = icmp eq %class.CPDF_Object* %1101, null
  br i1 %1102, label %1651, label %1103

1103:                                             ; preds = %1100
  %1104 = bitcast %class.CPDF_Object* %1101 to %class.CPDF_Stream* (%class.CPDF_Object*)***
  %1105 = load %class.CPDF_Stream* (%class.CPDF_Object*)**, %class.CPDF_Stream* (%class.CPDF_Object*)*** %1104, align 8
  %1106 = getelementptr inbounds %class.CPDF_Stream* (%class.CPDF_Object*)*, %class.CPDF_Stream* (%class.CPDF_Object*)** %1105, i64 36
  %1107 = load %class.CPDF_Stream* (%class.CPDF_Object*)*, %class.CPDF_Stream* (%class.CPDF_Object*)** %1106, align 8
  %1108 = call %class.CPDF_Stream* %1107(%class.CPDF_Object* nonnull %1101) #10
  %1109 = icmp eq %class.CPDF_Stream* %1108, null
  br i1 %1109, label %1651, label %1110

1110:                                             ; preds = %1103
  %1111 = bitcast [2 x %"class.std::__1::vector.265"]* %11 to i8*
  %1112 = call %class.CPDF_Dictionary* @_ZNK11CPDF_Stream7GetDictEv(%class.CPDF_Stream* nonnull %1108) #10
  %1113 = bitcast %"class.fxcrt::ByteString"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1113) #10
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %9, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)) #10
  %1114 = call i32 @_ZNK15CPDF_Dictionary13GetIntegerForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %1112, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %9) #10
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1113) #10
  %1115 = icmp slt i32 %1114, 2
  br i1 %1115, label %1651, label %1116

1116:                                             ; preds = %1110
  %1117 = bitcast %class.CPDF_MeshStream* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %1117) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1117, i8* align 8 bitcast ({ i32, [4 x i8], %"class.std::__1::vector.157"*, %"class.fxcrt::RetainPtr.244", %"class.fxcrt::RetainPtr.77", i32, i32, i32, i32, i32, i32, float, float, float, float, %"class.fxcrt::RetainPtr.250", %"class.std::__1::unique_ptr.256", [8 x float], [8 x float] }* @__const._ZN12_GLOBAL__N_119DrawCoonPatchMeshesE11ShadingTypeRKN5fxcrt9RetainPtrI12CFX_DIBitmapEERK10CFX_MatrixPK11CPDF_StreamRKNSt3__16vectorINSD_10unique_ptrI13CPDF_FunctionNSD_14default_deleteISG_EEEENSD_9allocatorISJ_EEEERKNS2_I15CPDF_ColorSpaceEEbi.stream to i8*), i64 152, i1 false) #10
  call void @_ZN15CPDF_MeshStreamC1E11ShadingTypeRKNSt3__16vectorINS1_10unique_ptrI13CPDF_FunctionNS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEEPK11CPDF_StreamRKN5fxcrt9RetainPtrI15CPDF_ColorSpaceEE(%class.CPDF_MeshStream* nonnull %10, i32 5, %"class.std::__1::vector.157"* dereferenceable(24) %86, %class.CPDF_Stream* nonnull %1108, %"class.fxcrt::RetainPtr.77"* nonnull dereferenceable(8) %65) #10
  %1118 = call zeroext i1 @_ZN15CPDF_MeshStream4LoadEv(%class.CPDF_MeshStream* nonnull %10) #10
  br i1 %1118, label %1119, label %1260

1119:                                             ; preds = %1116
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %1111) #10
  %1120 = getelementptr inbounds [2 x %"class.std::__1::vector.265"], [2 x %"class.std::__1::vector.265"]* %11, i64 0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1111, i8 0, i64 48, i1 false) #10
  %1121 = bitcast %"class.std::__1::vector.265"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1121) #10
  call void @_ZN15CPDF_MeshStream13ReadVertexRowERK10CFX_Matrixi(%"class.std::__1::vector.265"* nonnull sret %12, %class.CPDF_MeshStream* nonnull %10, %class.CFX_Matrix* nonnull dereferenceable(24) %83, i32 %1114) #10
  %1122 = bitcast %"class.std::__1::vector.265"* %12 to i64*
  %1123 = load i64, i64* %1122, align 8
  %1124 = getelementptr inbounds %"class.std::__1::vector.265", %"class.std::__1::vector.265"* %12, i64 0, i32 0, i32 1
  %1125 = bitcast %class.CPDF_MeshVertex** %1124 to <2 x i64>*
  %1126 = load <2 x i64>, <2 x i64>* %1125, align 8
  %1127 = bitcast [2 x %"class.std::__1::vector.265"]* %11 to i64*
  store i64 %1123, i64* %1127, align 16
  %1128 = bitcast %class.CPDF_MeshVertex** %1120 to <2 x i64>*
  store <2 x i64> %1126, <2 x i64>* %1128, align 8
  %1129 = inttoptr i64 %1123 to %class.CPDF_MeshVertex*
  %1130 = extractelement <2 x i64> %1126, i32 0
  %1131 = inttoptr i64 %1130 to %class.CPDF_MeshVertex*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1121) #10
  %1132 = icmp eq %class.CPDF_MeshVertex* %1129, %1131
  br i1 %1132, label %1255, label %1133

1133:                                             ; preds = %1119
  %1134 = bitcast %"class.std::__1::vector.265"* %13 to i8*
  %1135 = bitcast %"class.std::__1::vector.265"* %13 to i64*
  %1136 = getelementptr inbounds %"class.std::__1::vector.265", %"class.std::__1::vector.265"* %13, i64 0, i32 0, i32 1
  %1137 = bitcast [3 x %class.CPDF_MeshVertex]* %15 to i8*
  %1138 = getelementptr inbounds [3 x %class.CPDF_MeshVertex], [3 x %class.CPDF_MeshVertex]* %15, i64 0, i64 0
  %1139 = bitcast [3 x %class.CPDF_MeshVertex]* %15 to i32*
  %1140 = getelementptr inbounds [3 x %class.CPDF_MeshVertex], [3 x %class.CPDF_MeshVertex]* %15, i64 0, i64 0, i32 0, i32 1
  %1141 = bitcast float* %1140 to i32*
  %1142 = getelementptr inbounds [3 x %class.CPDF_MeshVertex], [3 x %class.CPDF_MeshVertex]* %15, i64 0, i64 0, i32 1
  %1143 = bitcast float* %1142 to i8*
  %1144 = getelementptr inbounds [3 x %class.CPDF_MeshVertex], [3 x %class.CPDF_MeshVertex]* %15, i64 0, i64 1
  %1145 = bitcast %class.CPDF_MeshVertex* %1144 to i32*
  %1146 = getelementptr inbounds [3 x %class.CPDF_MeshVertex], [3 x %class.CPDF_MeshVertex]* %15, i64 0, i64 1, i32 0, i32 1
  %1147 = bitcast float* %1146 to i32*
  %1148 = getelementptr inbounds [3 x %class.CPDF_MeshVertex], [3 x %class.CPDF_MeshVertex]* %15, i64 0, i64 1, i32 1
  %1149 = bitcast float* %1148 to i8*
  %1150 = getelementptr inbounds [3 x %class.CPDF_MeshVertex], [3 x %class.CPDF_MeshVertex]* %15, i64 0, i64 2
  %1151 = bitcast %class.CPDF_MeshVertex* %1150 to i32*
  %1152 = getelementptr inbounds [3 x %class.CPDF_MeshVertex], [3 x %class.CPDF_MeshVertex]* %15, i64 0, i64 2, i32 0, i32 1
  %1153 = bitcast float* %1152 to i32*
  %1154 = getelementptr inbounds [3 x %class.CPDF_MeshVertex], [3 x %class.CPDF_MeshVertex]* %15, i64 0, i64 2, i32 1
  %1155 = bitcast float* %1154 to i8*
  %1156 = zext i32 %1114 to i64
  %1157 = bitcast %class.CPDF_MeshVertex** %1136 to <2 x i64>*
  br label %1158

1158:                                             ; preds = %1191, %1133
  %1159 = phi i32 [ %1160, %1191 ], [ 0, %1133 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1134) #10
  call void @_ZN15CPDF_MeshStream13ReadVertexRowERK10CFX_Matrixi(%"class.std::__1::vector.265"* nonnull sret %13, %class.CPDF_MeshStream* nonnull %10, %class.CFX_Matrix* nonnull dereferenceable(24) %83, i32 %1114) #10
  %1160 = sub nsw i32 1, %1159
  %1161 = sext i32 %1160 to i64
  %1162 = getelementptr inbounds [2 x %"class.std::__1::vector.265"], [2 x %"class.std::__1::vector.265"]* %11, i64 0, i64 %1161
  %1163 = getelementptr inbounds %"class.std::__1::vector.265", %"class.std::__1::vector.265"* %1162, i64 0, i32 0, i32 0
  %1164 = load %class.CPDF_MeshVertex*, %class.CPDF_MeshVertex** %1163, align 8
  %1165 = icmp eq %class.CPDF_MeshVertex* %1164, null
  %1166 = bitcast %class.CPDF_MeshVertex* %1164 to i8*
  br i1 %1165, label %1177, label %1167

1167:                                             ; preds = %1158
  %1168 = getelementptr inbounds [2 x %"class.std::__1::vector.265"], [2 x %"class.std::__1::vector.265"]* %11, i64 0, i64 %1161, i32 0, i32 1
  %1169 = load %class.CPDF_MeshVertex*, %class.CPDF_MeshVertex** %1168, align 8
  %1170 = icmp eq %class.CPDF_MeshVertex* %1169, %1164
  br i1 %1170, label %1175, label %1171

1171:                                             ; preds = %1167, %1171
  %1172 = phi %class.CPDF_MeshVertex* [ %1173, %1171 ], [ %1169, %1167 ]
  %1173 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %1172, i64 -1
  call void @_ZN15CPDF_MeshVertexD1Ev(%class.CPDF_MeshVertex* %1173) #10
  %1174 = icmp eq %class.CPDF_MeshVertex* %1173, %1164
  br i1 %1174, label %1175, label %1171

1175:                                             ; preds = %1171, %1167
  store %class.CPDF_MeshVertex* %1164, %class.CPDF_MeshVertex** %1168, align 8
  call void @_ZdlPv(i8* %1166) #11
  %1176 = bitcast %"class.std::__1::vector.265"* %1162 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1176, i8 0, i64 24, i1 false) #10
  br label %1177

1177:                                             ; preds = %1175, %1158
  %1178 = load i64, i64* %1135, align 8
  %1179 = bitcast %"class.std::__1::vector.265"* %1162 to i64*
  store i64 %1178, i64* %1179, align 8
  %1180 = getelementptr inbounds [2 x %"class.std::__1::vector.265"], [2 x %"class.std::__1::vector.265"]* %11, i64 0, i64 %1161, i32 0, i32 1
  %1181 = load <2 x i64>, <2 x i64>* %1157, align 8
  %1182 = bitcast %class.CPDF_MeshVertex** %1180 to <2 x i64>*
  store <2 x i64> %1181, <2 x i64>* %1182, align 8
  %1183 = inttoptr i64 %1178 to %class.CPDF_MeshVertex*
  %1184 = extractelement <2 x i64> %1181, i32 0
  %1185 = inttoptr i64 %1184 to %class.CPDF_MeshVertex*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1134) #10
  %1186 = icmp eq %class.CPDF_MeshVertex* %1183, %1185
  br i1 %1186, label %1241, label %1187

1187:                                             ; preds = %1177
  call void @llvm.lifetime.start.p0i8(i64 60, i8* nonnull %1137) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1137, i8 -1, i64 60, i1 false) #10
  call void @_ZN15CPDF_MeshVertexC1Ev(%class.CPDF_MeshVertex* nonnull %1138) #10
  call void @_ZN15CPDF_MeshVertexC1Ev(%class.CPDF_MeshVertex* %1144) #10
  call void @_ZN15CPDF_MeshVertexC1Ev(%class.CPDF_MeshVertex* %1150) #10
  %1188 = sext i32 %1159 to i64
  %1189 = getelementptr inbounds [2 x %"class.std::__1::vector.265"], [2 x %"class.std::__1::vector.265"]* %11, i64 0, i64 %1188, i32 0, i32 0
  %1190 = load %class.CPDF_MeshVertex*, %class.CPDF_MeshVertex** %1189, align 8
  br label %1192

1191:                                             ; preds = %1236
  call void @_ZN15CPDF_MeshVertexD1Ev(%class.CPDF_MeshVertex* %1150) #10
  call void @_ZN15CPDF_MeshVertexD1Ev(%class.CPDF_MeshVertex* %1144) #10
  call void @_ZN15CPDF_MeshVertexD1Ev(%class.CPDF_MeshVertex* nonnull %1138) #10
  call void @llvm.lifetime.end.p0i8(i64 60, i8* nonnull %1137) #10
  br label %1158

1192:                                             ; preds = %1236, %1187
  %1193 = phi i64 [ 1, %1187 ], [ %1239, %1236 ]
  %1194 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %1190, i64 %1193
  %1195 = icmp eq %class.CPDF_MeshVertex* %1138, %1194
  br i1 %1195, label %1202, label %1196

1196:                                             ; preds = %1192
  %1197 = bitcast %class.CPDF_MeshVertex* %1194 to i32*
  %1198 = load i32, i32* %1197, align 4
  store i32 %1198, i32* %1139, align 16
  %1199 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %1190, i64 %1193, i32 0, i32 1
  %1200 = bitcast float* %1199 to i32*
  %1201 = load i32, i32* %1200, align 4
  store i32 %1201, i32* %1141, align 4
  br label %1202

1202:                                             ; preds = %1196, %1192
  %1203 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %1190, i64 %1193, i32 1
  %1204 = bitcast float* %1203 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1143, i8* align 4 %1204, i64 12, i1 false) #10
  %1205 = add nsw i64 %1193, -1
  %1206 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %1183, i64 %1205
  %1207 = icmp eq %class.CPDF_MeshVertex* %1144, %1206
  br i1 %1207, label %1214, label %1208

1208:                                             ; preds = %1202
  %1209 = bitcast %class.CPDF_MeshVertex* %1206 to i32*
  %1210 = load i32, i32* %1209, align 4
  store i32 %1210, i32* %1145, align 4
  %1211 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %1183, i64 %1205, i32 0, i32 1
  %1212 = bitcast float* %1211 to i32*
  %1213 = load i32, i32* %1212, align 4
  store i32 %1213, i32* %1147, align 4
  br label %1214

1214:                                             ; preds = %1208, %1202
  %1215 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %1183, i64 %1205, i32 1
  %1216 = bitcast float* %1215 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1149, i8* align 4 %1216, i64 12, i1 false) #10
  %1217 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %1190, i64 %1205
  %1218 = icmp eq %class.CPDF_MeshVertex* %1150, %1217
  br i1 %1218, label %1225, label %1219

1219:                                             ; preds = %1214
  %1220 = bitcast %class.CPDF_MeshVertex* %1217 to i32*
  %1221 = load i32, i32* %1220, align 4
  store i32 %1221, i32* %1151, align 8
  %1222 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %1190, i64 %1205, i32 0, i32 1
  %1223 = bitcast float* %1222 to i32*
  %1224 = load i32, i32* %1223, align 4
  store i32 %1224, i32* %1153, align 4
  br label %1225

1225:                                             ; preds = %1219, %1214
  %1226 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %1190, i64 %1205, i32 1
  %1227 = bitcast float* %1226 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1155, i8* align 4 %1227, i64 12, i1 false) #10
  call fastcc void @_ZN12_GLOBAL__N_111DrawGouraudERKN5fxcrt9RetainPtrI12CFX_DIBitmapEEiP15CPDF_MeshVertex(%"class.fxcrt::RetainPtr"* nonnull dereferenceable(8) %84, i32 %6, %class.CPDF_MeshVertex* nonnull %1138) #10
  %1228 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %1183, i64 %1193
  %1229 = icmp eq %class.CPDF_MeshVertex* %1150, %1228
  br i1 %1229, label %1236, label %1230

1230:                                             ; preds = %1225
  %1231 = bitcast %class.CPDF_MeshVertex* %1228 to i32*
  %1232 = load i32, i32* %1231, align 4
  store i32 %1232, i32* %1151, align 8
  %1233 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %1183, i64 %1193, i32 0, i32 1
  %1234 = bitcast float* %1233 to i32*
  %1235 = load i32, i32* %1234, align 4
  store i32 %1235, i32* %1153, align 4
  br label %1236

1236:                                             ; preds = %1230, %1225
  %1237 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %1183, i64 %1193, i32 1
  %1238 = bitcast float* %1237 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1155, i8* align 4 %1238, i64 12, i1 false) #10
  call fastcc void @_ZN12_GLOBAL__N_111DrawGouraudERKN5fxcrt9RetainPtrI12CFX_DIBitmapEEiP15CPDF_MeshVertex(%"class.fxcrt::RetainPtr"* nonnull dereferenceable(8) %84, i32 %6, %class.CPDF_MeshVertex* nonnull %1138) #10
  %1239 = add nuw nsw i64 %1193, 1
  %1240 = icmp eq i64 %1239, %1156
  br i1 %1240, label %1191, label %1192

1241:                                             ; preds = %1177
  %1242 = getelementptr inbounds [2 x %"class.std::__1::vector.265"], [2 x %"class.std::__1::vector.265"]* %11, i64 0, i64 1, i32 0, i32 0
  %1243 = load %class.CPDF_MeshVertex*, %class.CPDF_MeshVertex** %1242, align 8
  %1244 = icmp eq %class.CPDF_MeshVertex* %1243, null
  br i1 %1244, label %1255, label %1245

1245:                                             ; preds = %1241
  %1246 = getelementptr inbounds [2 x %"class.std::__1::vector.265"], [2 x %"class.std::__1::vector.265"]* %11, i64 0, i64 1, i32 0, i32 1
  %1247 = load %class.CPDF_MeshVertex*, %class.CPDF_MeshVertex** %1246, align 8
  %1248 = icmp eq %class.CPDF_MeshVertex* %1247, %1243
  br i1 %1248, label %1253, label %1249

1249:                                             ; preds = %1245, %1249
  %1250 = phi %class.CPDF_MeshVertex* [ %1251, %1249 ], [ %1247, %1245 ]
  %1251 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %1250, i64 -1
  call void @_ZN15CPDF_MeshVertexD1Ev(%class.CPDF_MeshVertex* %1251) #10
  %1252 = icmp eq %class.CPDF_MeshVertex* %1251, %1243
  br i1 %1252, label %1253, label %1249

1253:                                             ; preds = %1249, %1245
  %1254 = bitcast %class.CPDF_MeshVertex* %1243 to i8*
  store %class.CPDF_MeshVertex* %1243, %class.CPDF_MeshVertex** %1246, align 8
  call void @_ZdlPv(i8* %1254) #11
  br label %1255

1255:                                             ; preds = %1253, %1241, %1119
  %1256 = getelementptr inbounds [2 x %"class.std::__1::vector.265"], [2 x %"class.std::__1::vector.265"]* %11, i64 0, i64 0, i32 0, i32 0
  %1257 = load %class.CPDF_MeshVertex*, %class.CPDF_MeshVertex** %1256, align 16
  %1258 = icmp eq %class.CPDF_MeshVertex* %1257, null
  %1259 = bitcast %class.CPDF_MeshVertex* %1257 to i8*
  br i1 %1258, label %1269, label %1261

1260:                                             ; preds = %1269, %1116
  call void @_ZN15CPDF_MeshStreamD1Ev(%class.CPDF_MeshStream* nonnull %10) #10
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %1117) #10
  br label %1651

1261:                                             ; preds = %1255
  %1262 = load %class.CPDF_MeshVertex*, %class.CPDF_MeshVertex** %1120, align 8
  %1263 = icmp eq %class.CPDF_MeshVertex* %1262, %1257
  br i1 %1263, label %1268, label %1264

1264:                                             ; preds = %1261, %1264
  %1265 = phi %class.CPDF_MeshVertex* [ %1266, %1264 ], [ %1262, %1261 ]
  %1266 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %1265, i64 -1
  call void @_ZN15CPDF_MeshVertexD1Ev(%class.CPDF_MeshVertex* %1266) #10
  %1267 = icmp eq %class.CPDF_MeshVertex* %1266, %1257
  br i1 %1267, label %1268, label %1264

1268:                                             ; preds = %1264, %1261
  store %class.CPDF_MeshVertex* %1257, %class.CPDF_MeshVertex** %1120, align 8
  call void @_ZdlPv(i8* %1259) #11
  br label %1269

1269:                                             ; preds = %1268, %1255
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %1111) #10
  br label %1260

1270:                                             ; preds = %293, %293
  %1271 = call %class.CPDF_Object* @_ZNK19CPDF_ShadingPattern16GetShadingObjectEv(%class.CPDF_ShadingPattern* %3) #10
  %1272 = icmp eq %class.CPDF_Object* %1271, null
  br i1 %1272, label %1651, label %1273

1273:                                             ; preds = %1270
  %1274 = bitcast %class.CPDF_Object* %1271 to %class.CPDF_Stream* (%class.CPDF_Object*)***
  %1275 = load %class.CPDF_Stream* (%class.CPDF_Object*)**, %class.CPDF_Stream* (%class.CPDF_Object*)*** %1274, align 8
  %1276 = getelementptr inbounds %class.CPDF_Stream* (%class.CPDF_Object*)*, %class.CPDF_Stream* (%class.CPDF_Object*)** %1275, i64 36
  %1277 = load %class.CPDF_Stream* (%class.CPDF_Object*)*, %class.CPDF_Stream* (%class.CPDF_Object*)** %1276, align 8
  %1278 = call %class.CPDF_Stream* %1277(%class.CPDF_Object* nonnull %1271) #10
  %1279 = icmp eq %class.CPDF_Stream* %1278, null
  br i1 %1279, label %1651, label %1280

1280:                                             ; preds = %1273
  %1281 = load i32, i32* %295, align 8
  %1282 = getelementptr inbounds %class.CPDF_RenderOptions, %class.CPDF_RenderOptions* %7, i64 0, i32 2, i32 6
  %1283 = load i8, i8* %1282, align 1, !range !5
  %1284 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %61 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1284)
  %1285 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %62 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1285)
  %1286 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %63 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1286)
  %1287 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %64 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1287)
  %1288 = bitcast [16 x %class.CFX_PTemplate]* %56 to i8*
  %1289 = bitcast [4 x %class.CFX_PTemplate]* %57 to i8*
  %1290 = bitcast [2 x %"struct.(anonymous namespace)::Coon_Color"]* %58 to i8*
  %1291 = bitcast %class.CFX_DefaultRenderDevice* %51 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %1291) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1291, i8 -86, i64 64, i1 false) #10
  call void @_ZN23CFX_DefaultRenderDeviceC1Ev(%class.CFX_DefaultRenderDevice* nonnull %51) #10
  %1292 = bitcast %"class.fxcrt::RetainPtr"* %52 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1292) #10
  %1293 = bitcast %"class.fxcrt::RetainPtr"* %52 to i64*
  store i64 0, i64* %1293, align 8
  %1294 = call zeroext i1 @_ZN23CFX_DefaultRenderDevice6AttachERKN5fxcrt9RetainPtrI12CFX_DIBitmapEEbS5_b(%class.CFX_DefaultRenderDevice* nonnull %51, %"class.fxcrt::RetainPtr"* nonnull dereferenceable(8) %84, i1 zeroext false, %"class.fxcrt::RetainPtr"* nonnull dereferenceable(8) %52, i1 zeroext false) #10
  %1295 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %52, i64 0, i32 0, i32 0, i32 0, i32 0
  %1296 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %1295, align 8
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %1295, align 8
  %1297 = icmp eq %class.CFX_DIBitmap* %1296, null
  br i1 %1297, label %1309, label %1298

1298:                                             ; preds = %1280
  %1299 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %1296, i64 0, i32 0, i32 0, i32 1
  %1300 = load i64, i64* %1299, align 8
  %1301 = add nsw i64 %1300, -1
  store i64 %1301, i64* %1299, align 8
  %1302 = icmp eq i64 %1301, 0
  br i1 %1302, label %1303, label %1309

1303:                                             ; preds = %1298
  %1304 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %1296, i64 0, i32 0, i32 0
  %1305 = bitcast %class.CFX_DIBitmap* %1296 to void (%"class.fxcrt::Retainable"*)***
  %1306 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %1305, align 8
  %1307 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %1306, i64 1
  %1308 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %1307, align 8
  call void %1308(%"class.fxcrt::Retainable"* nonnull %1304) #10
  br label %1309

1309:                                             ; preds = %1303, %1298, %1280
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1292) #10
  %1310 = bitcast %class.CPDF_MeshStream* %53 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %1310) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1310, i8* align 8 bitcast ({ i32, [4 x i8], %"class.std::__1::vector.157"*, %"class.fxcrt::RetainPtr.244", %"class.fxcrt::RetainPtr.77", i32, i32, i32, i32, i32, i32, float, float, float, float, %"class.fxcrt::RetainPtr.250", %"class.std::__1::unique_ptr.256", [8 x float], [8 x float] }* @__const._ZN12_GLOBAL__N_119DrawCoonPatchMeshesE11ShadingTypeRKN5fxcrt9RetainPtrI12CFX_DIBitmapEERK10CFX_MatrixPK11CPDF_StreamRKNSt3__16vectorINSD_10unique_ptrI13CPDF_FunctionNSD_14default_deleteISG_EEEENSD_9allocatorISJ_EEEERKNS2_I15CPDF_ColorSpaceEEbi.stream to i8*), i64 152, i1 false) #10
  call void @_ZN15CPDF_MeshStreamC1E11ShadingTypeRKNSt3__16vectorINS1_10unique_ptrI13CPDF_FunctionNS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEEPK11CPDF_StreamRKN5fxcrt9RetainPtrI15CPDF_ColorSpaceEE(%class.CPDF_MeshStream* nonnull %53, i32 %1281, %"class.std::__1::vector.157"* dereferenceable(24) %86, %class.CPDF_Stream* nonnull %1278, %"class.fxcrt::RetainPtr.77"* nonnull dereferenceable(8) %65) #10
  %1311 = call zeroext i1 @_ZN15CPDF_MeshStream4LoadEv(%class.CPDF_MeshStream* nonnull %53) #10
  br i1 %1311, label %1312, label %1650

1312:                                             ; preds = %1309
  %1313 = bitcast %"struct.(anonymous namespace)::CPDF_PatchDrawer"* %54 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %1313) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1313, i8 -86, i64 96, i1 false) #10
  %1314 = getelementptr inbounds %"struct.(anonymous namespace)::CPDF_PatchDrawer", %"struct.(anonymous namespace)::CPDF_PatchDrawer"* %54, i64 0, i32 1
  call void @_ZN12CFX_PathDataC1Ev(%class.CFX_PathData* %1314) #10
  %1315 = getelementptr inbounds %"struct.(anonymous namespace)::CPDF_PatchDrawer", %"struct.(anonymous namespace)::CPDF_PatchDrawer"* %54, i64 0, i32 5, i64 0
  %1316 = bitcast %"struct.(anonymous namespace)::Coon_Color"* %1315 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1316, i8 0, i64 48, i1 false) #10
  %1317 = getelementptr inbounds %"struct.(anonymous namespace)::CPDF_PatchDrawer", %"struct.(anonymous namespace)::CPDF_PatchDrawer"* %54, i64 0, i32 4
  store i32 %6, i32* %1317, align 4
  %1318 = getelementptr inbounds %class.CFX_DefaultRenderDevice, %class.CFX_DefaultRenderDevice* %51, i64 0, i32 0
  %1319 = getelementptr inbounds %"struct.(anonymous namespace)::CPDF_PatchDrawer", %"struct.(anonymous namespace)::CPDF_PatchDrawer"* %54, i64 0, i32 2
  store %class.CFX_RenderDevice* %1318, %class.CFX_RenderDevice** %1319, align 8
  %1320 = zext i8 %1283 to i32
  %1321 = getelementptr inbounds %"struct.(anonymous namespace)::CPDF_PatchDrawer", %"struct.(anonymous namespace)::CPDF_PatchDrawer"* %54, i64 0, i32 3
  store i32 %1320, i32* %1321, align 8
  %1322 = bitcast %class.CFX_PTemplate* %55 to i8*
  %1323 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %55, i64 0, i32 0
  %1324 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %55, i64 0, i32 1
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1322) #10
  store float 0.000000e+00, float* %1323, align 4
  store float 0.000000e+00, float* %1324, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %1314, %class.CFX_PTemplate* nonnull dereferenceable(8) %55, i8 zeroext 2) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1322) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1322) #10
  store float 0.000000e+00, float* %1323, align 4
  store float 0.000000e+00, float* %1324, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %1314, %class.CFX_PTemplate* nonnull dereferenceable(8) %55, i8 zeroext 1) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1322) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1322) #10
  store float 0.000000e+00, float* %1323, align 4
  store float 0.000000e+00, float* %1324, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %1314, %class.CFX_PTemplate* nonnull dereferenceable(8) %55, i8 zeroext 1) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1322) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1322) #10
  store float 0.000000e+00, float* %1323, align 4
  store float 0.000000e+00, float* %1324, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %1314, %class.CFX_PTemplate* nonnull dereferenceable(8) %55, i8 zeroext 1) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1322) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1322) #10
  store float 0.000000e+00, float* %1323, align 4
  store float 0.000000e+00, float* %1324, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %1314, %class.CFX_PTemplate* nonnull dereferenceable(8) %55, i8 zeroext 1) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1322) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1322) #10
  store float 0.000000e+00, float* %1323, align 4
  store float 0.000000e+00, float* %1324, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %1314, %class.CFX_PTemplate* nonnull dereferenceable(8) %55, i8 zeroext 1) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1322) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1322) #10
  store float 0.000000e+00, float* %1323, align 4
  store float 0.000000e+00, float* %1324, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %1314, %class.CFX_PTemplate* nonnull dereferenceable(8) %55, i8 zeroext 1) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1322) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1322) #10
  store float 0.000000e+00, float* %1323, align 4
  store float 0.000000e+00, float* %1324, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %1314, %class.CFX_PTemplate* nonnull dereferenceable(8) %55, i8 zeroext 1) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1322) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1322) #10
  store float 0.000000e+00, float* %1323, align 4
  store float 0.000000e+00, float* %1324, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %1314, %class.CFX_PTemplate* nonnull dereferenceable(8) %55, i8 zeroext 1) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1322) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1322) #10
  store float 0.000000e+00, float* %1323, align 4
  store float 0.000000e+00, float* %1324, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %1314, %class.CFX_PTemplate* nonnull dereferenceable(8) %55, i8 zeroext 1) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1322) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1322) #10
  store float 0.000000e+00, float* %1323, align 4
  store float 0.000000e+00, float* %1324, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %1314, %class.CFX_PTemplate* nonnull dereferenceable(8) %55, i8 zeroext 1) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1322) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1322) #10
  store float 0.000000e+00, float* %1323, align 4
  store float 0.000000e+00, float* %1324, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %1314, %class.CFX_PTemplate* nonnull dereferenceable(8) %55, i8 zeroext 1) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1322) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1322) #10
  store float 0.000000e+00, float* %1323, align 4
  store float 0.000000e+00, float* %1324, align 4
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %1314, %class.CFX_PTemplate* nonnull dereferenceable(8) %55, i8 zeroext 1) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1322) #10
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %1288) #10
  %1325 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1288, i8 0, i64 128, i1 false) #10
  %1326 = icmp eq i32 %1281, 7
  %1327 = select i1 %1326, i32 16, i32 12
  %1328 = getelementptr inbounds %class.CPDF_MeshStream, %class.CPDF_MeshStream* %53, i64 0, i32 15, i32 0, i32 0, i32 0
  %1329 = load %class.CFX_BitStream*, %class.CFX_BitStream** %1328, align 8
  %1330 = getelementptr inbounds %class.CFX_BitStream, %class.CFX_BitStream* %1329, i64 0, i32 0
  %1331 = load i32, i32* %1330, align 8
  %1332 = getelementptr inbounds %class.CFX_BitStream, %class.CFX_BitStream* %1329, i64 0, i32 1
  %1333 = load i32, i32* %1332, align 4
  %1334 = icmp ult i32 %1331, %1333
  br i1 %1334, label %1335, label %1610

1335:                                             ; preds = %1312
  %1336 = getelementptr inbounds [4 x %class.CFX_PTemplate], [4 x %class.CFX_PTemplate]* %57, i64 0, i64 0, i32 1
  %1337 = getelementptr inbounds [4 x %class.CFX_PTemplate], [4 x %class.CFX_PTemplate]* %57, i64 0, i64 1, i32 1
  %1338 = getelementptr inbounds [4 x %class.CFX_PTemplate], [4 x %class.CFX_PTemplate]* %57, i64 0, i64 2, i32 1
  %1339 = getelementptr inbounds [4 x %class.CFX_PTemplate], [4 x %class.CFX_PTemplate]* %57, i64 0, i64 3, i32 1
  %1340 = getelementptr inbounds [4 x %class.CFX_PTemplate], [4 x %class.CFX_PTemplate]* %57, i64 0, i64 0
  %1341 = getelementptr inbounds [2 x %"struct.(anonymous namespace)::Coon_Color"], [2 x %"struct.(anonymous namespace)::Coon_Color"]* %58, i64 0, i64 1
  %1342 = bitcast %"struct.(anonymous namespace)::Coon_Color"* %1341 to i8*
  %1343 = bitcast %class.CFX_PTemplate* %59 to i8*
  %1344 = bitcast %class.CFX_PTemplate* %60 to i8*
  %1345 = bitcast %class.CFX_PTemplate* %59 to i32*
  %1346 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %59, i64 0, i32 1
  %1347 = bitcast float* %1346 to i32*
  %1348 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 0, i32 0
  %1349 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 0, i32 1
  %1350 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 11, i32 0
  %1351 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 11, i32 1
  %1352 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 10, i32 0
  %1353 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 10, i32 1
  %1354 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 9, i32 0
  %1355 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 9, i32 1
  %1356 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 3, i32 0
  %1357 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 3, i32 1
  %1358 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 4, i32 0
  %1359 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 4, i32 1
  %1360 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 5, i32 0
  %1361 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 5, i32 1
  %1362 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 6, i32 0
  %1363 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 6, i32 1
  %1364 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 1, i32 0
  %1365 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 1, i32 1
  %1366 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 2, i32 0
  %1367 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 2, i32 1
  %1368 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 8, i32 0
  %1369 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 8, i32 1
  %1370 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 7, i32 0
  %1371 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 7, i32 1
  %1372 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %61, i64 0, i32 0, i32 0
  %1373 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %61, i64 0, i32 0, i32 1
  %1374 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %61, i64 0, i32 0, i32 2
  %1375 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %61, i64 0, i32 0, i32 3
  %1376 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %61, i64 0, i32 1, i32 0
  %1377 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %61, i64 0, i32 1, i32 1
  %1378 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %61, i64 0, i32 1, i32 2
  %1379 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %61, i64 0, i32 1, i32 3
  %1380 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %62, i64 0, i32 0, i32 0
  %1381 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %62, i64 0, i32 0, i32 1
  %1382 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %62, i64 0, i32 0, i32 2
  %1383 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %62, i64 0, i32 0, i32 3
  %1384 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %62, i64 0, i32 1, i32 0
  %1385 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %62, i64 0, i32 1, i32 1
  %1386 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %62, i64 0, i32 1, i32 2
  %1387 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %62, i64 0, i32 1, i32 3
  %1388 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %63, i64 0, i32 0, i32 0
  %1389 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %63, i64 0, i32 0, i32 1
  %1390 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %63, i64 0, i32 0, i32 2
  %1391 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %63, i64 0, i32 0, i32 3
  %1392 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %63, i64 0, i32 1, i32 0
  %1393 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %63, i64 0, i32 1, i32 1
  %1394 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %63, i64 0, i32 1, i32 2
  %1395 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %63, i64 0, i32 1, i32 3
  %1396 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %64, i64 0, i32 0, i32 0
  %1397 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %64, i64 0, i32 0, i32 1
  %1398 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %64, i64 0, i32 0, i32 2
  %1399 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %64, i64 0, i32 0, i32 3
  %1400 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %64, i64 0, i32 1, i32 0
  %1401 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %64, i64 0, i32 1, i32 1
  %1402 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %64, i64 0, i32 1, i32 2
  %1403 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %64, i64 0, i32 1, i32 3
  %1404 = zext i32 %1327 to i64
  %1405 = bitcast [4 x %class.CFX_PTemplate]* %57 to i32*
  %1406 = bitcast float* %1336 to i32*
  %1407 = getelementptr inbounds [4 x %class.CFX_PTemplate], [4 x %class.CFX_PTemplate]* %57, i64 0, i64 1
  %1408 = bitcast %class.CFX_PTemplate* %1407 to i32*
  %1409 = bitcast float* %1337 to i32*
  %1410 = getelementptr inbounds [4 x %class.CFX_PTemplate], [4 x %class.CFX_PTemplate]* %57, i64 0, i64 2
  %1411 = bitcast %class.CFX_PTemplate* %1410 to i32*
  %1412 = bitcast float* %1338 to i32*
  %1413 = getelementptr inbounds [4 x %class.CFX_PTemplate], [4 x %class.CFX_PTemplate]* %57, i64 0, i64 3
  %1414 = bitcast %class.CFX_PTemplate* %1413 to i32*
  %1415 = bitcast float* %1339 to i32*
  br label %1416

1416:                                             ; preds = %1603, %1335
  %1417 = call zeroext i1 @_ZNK15CPDF_MeshStream11CanReadFlagEv(%class.CPDF_MeshStream* nonnull %53) #10
  br i1 %1417, label %1418, label %1610

1418:                                             ; preds = %1416
  %1419 = call i32 @_ZN15CPDF_MeshStream8ReadFlagEv(%class.CPDF_MeshStream* nonnull %53) #10
  %1420 = icmp eq i32 %1419, 0
  br i1 %1420, label %1439, label %1421

1421:                                             ; preds = %1418
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1289) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1289, i8 0, i64 32, i1 false) #10
  %1422 = mul i32 %1419, 3
  %1423 = urem i32 %1422, 12
  %1424 = zext i32 %1423 to i64
  %1425 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 %1424
  %1426 = icmp eq %class.CFX_PTemplate* %1340, %1425
  br i1 %1426, label %1433, label %1427

1427:                                             ; preds = %1421
  %1428 = bitcast %class.CFX_PTemplate* %1425 to i32*
  %1429 = load i32, i32* %1428, align 8
  store i32 %1429, i32* %1405, align 16
  %1430 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 %1424, i32 1
  %1431 = bitcast float* %1430 to i32*
  %1432 = load i32, i32* %1431, align 4
  store i32 %1432, i32* %1406, align 4
  br label %1433

1433:                                             ; preds = %1427, %1421
  %1434 = add i32 %1422, 1
  %1435 = urem i32 %1434, 12
  %1436 = zext i32 %1435 to i64
  %1437 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 %1436
  %1438 = icmp eq %class.CFX_PTemplate* %1407, %1437
  br i1 %1438, label %1617, label %1611

1439:                                             ; preds = %1641, %1418
  %1440 = phi i64 [ 4, %1641 ], [ 0, %1418 ]
  %1441 = phi i64 [ 2, %1641 ], [ 0, %1418 ]
  br label %1442

1442:                                             ; preds = %1454, %1439
  %1443 = phi i64 [ %1440, %1439 ], [ %1455, %1454 ]
  %1444 = call zeroext i1 @_ZNK15CPDF_MeshStream13CanReadCoordsEv(%class.CPDF_MeshStream* nonnull %53) #10
  br i1 %1444, label %1445, label %1457

1445:                                             ; preds = %1442
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1343) #10
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1344) #10
  call void @_ZN15CPDF_MeshStream10ReadCoordsEv(%class.CFX_PTemplate* nonnull sret %60, %class.CPDF_MeshStream* nonnull %53) #10
  call void @_ZNK10CFX_Matrix9TransformERK13CFX_PTemplateIfE(%class.CFX_PTemplate* nonnull sret %59, %class.CFX_Matrix* nonnull %83, %class.CFX_PTemplate* nonnull dereferenceable(8) %60) #10
  %1446 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 %1443
  %1447 = icmp eq %class.CFX_PTemplate* %1446, %59
  br i1 %1447, label %1454, label %1448

1448:                                             ; preds = %1445
  %1449 = load i32, i32* %1345, align 4
  %1450 = bitcast %class.CFX_PTemplate* %1446 to i32*
  store i32 %1449, i32* %1450, align 8
  %1451 = load i32, i32* %1347, align 4
  %1452 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 %1443, i32 1
  %1453 = bitcast float* %1452 to i32*
  store i32 %1451, i32* %1453, align 4
  br label %1454

1454:                                             ; preds = %1448, %1445
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1344) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1343) #10
  %1455 = add nuw nsw i64 %1443, 1
  %1456 = icmp ult i64 %1455, %1404
  br i1 %1456, label %1442, label %1457

1457:                                             ; preds = %1454, %1442
  br label %1458

1458:                                             ; preds = %1457, %1461
  %1459 = phi i64 [ %1476, %1461 ], [ %1441, %1457 ]
  %1460 = call zeroext i1 @_ZNK15CPDF_MeshStream12CanReadColorEv(%class.CPDF_MeshStream* nonnull %53) #10
  br i1 %1460, label %1461, label %1478

1461:                                             ; preds = %1458
  %1462 = call { <2 x float>, float } @_ZN15CPDF_MeshStream9ReadColorEv(%class.CPDF_MeshStream* nonnull %53) #10
  %1463 = extractvalue { <2 x float>, float } %1462, 0
  %1464 = extractvalue { <2 x float>, float } %1462, 1
  %1465 = extractelement <2 x float> %1463, i32 0
  %1466 = extractelement <2 x float> %1463, i32 1
  %1467 = fmul float %1465, 2.550000e+02
  %1468 = fptosi float %1467 to i32
  %1469 = getelementptr inbounds %"struct.(anonymous namespace)::CPDF_PatchDrawer", %"struct.(anonymous namespace)::CPDF_PatchDrawer"* %54, i64 0, i32 5, i64 %1459, i32 0, i64 0
  store i32 %1468, i32* %1469, align 4
  %1470 = fmul float %1466, 2.550000e+02
  %1471 = fptosi float %1470 to i32
  %1472 = getelementptr inbounds %"struct.(anonymous namespace)::CPDF_PatchDrawer", %"struct.(anonymous namespace)::CPDF_PatchDrawer"* %54, i64 0, i32 5, i64 %1459, i32 0, i64 1
  store i32 %1471, i32* %1472, align 4
  %1473 = fmul float %1464, 2.550000e+02
  %1474 = fptosi float %1473 to i32
  %1475 = getelementptr inbounds %"struct.(anonymous namespace)::CPDF_PatchDrawer", %"struct.(anonymous namespace)::CPDF_PatchDrawer"* %54, i64 0, i32 5, i64 %1459, i32 0, i64 2
  store i32 %1474, i32* %1475, align 4
  %1476 = add nuw nsw i64 %1459, 1
  %1477 = icmp eq i64 %1476, 4
  br i1 %1477, label %1478, label %1458

1478:                                             ; preds = %1461, %1458
  %1479 = call { <2 x float>, <2 x float> } @_ZN13CFX_FloatRect7GetBBoxEPK13CFX_PTemplateIfEi(%class.CFX_PTemplate* nonnull %1325, i32 %1327) #10
  %1480 = extractvalue { <2 x float>, <2 x float> } %1479, 0
  %1481 = extractvalue { <2 x float>, <2 x float> } %1479, 1
  %1482 = extractelement <2 x float> %1481, i32 0
  %1483 = fcmp ugt float %1482, 0.000000e+00
  br i1 %1483, label %1484, label %1603

1484:                                             ; preds = %1478
  %1485 = extractelement <2 x float> %1480, i32 0
  %1486 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %276, align 8
  %1487 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %1486, i64 0, i32 0, i32 2
  %1488 = load i32, i32* %1487, align 4
  %1489 = sitofp i32 %1488 to float
  %1490 = fcmp ult float %1485, %1489
  %1491 = extractelement <2 x float> %1481, i32 1
  %1492 = fcmp ugt float %1491, 0.000000e+00
  %1493 = and i1 %1492, %1490
  br i1 %1493, label %1494, label %1603

1494:                                             ; preds = %1484
  %1495 = extractelement <2 x float> %1480, i32 1
  %1496 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %1486, i64 0, i32 0, i32 3
  %1497 = load i32, i32* %1496, align 8
  %1498 = sitofp i32 %1497 to float
  %1499 = fcmp ult float %1495, %1498
  br i1 %1499, label %1500, label %1603

1500:                                             ; preds = %1494
  %1501 = load float, float* %1348, align 16
  %1502 = load float, float* %1349, align 4
  %1503 = load float, float* %1350, align 8
  %1504 = load float, float* %1351, align 4
  %1505 = load float, float* %1352, align 16
  %1506 = load float, float* %1353, align 4
  %1507 = load float, float* %1354, align 8
  %1508 = load float, float* %1355, align 4
  %1509 = fmul float %1503, 3.000000e+00
  %1510 = fsub float %1509, %1501
  %1511 = fmul float %1505, 3.000000e+00
  %1512 = fsub float %1510, %1511
  %1513 = fadd float %1512, %1507
  %1514 = fmul float %1501, 3.000000e+00
  %1515 = fmul float %1503, 6.000000e+00
  %1516 = fsub float %1514, %1515
  %1517 = fadd float %1516, %1511
  %1518 = fsub float %1509, %1514
  %1519 = fmul float %1504, 3.000000e+00
  %1520 = fsub float %1519, %1502
  %1521 = fmul float %1506, 3.000000e+00
  %1522 = fsub float %1520, %1521
  %1523 = fadd float %1522, %1508
  %1524 = fmul float %1502, 3.000000e+00
  %1525 = fmul float %1504, 6.000000e+00
  %1526 = fsub float %1524, %1525
  %1527 = fadd float %1526, %1521
  %1528 = fsub float %1519, %1524
  %1529 = load float, float* %1356, align 8
  %1530 = load float, float* %1357, align 4
  %1531 = load float, float* %1358, align 16
  %1532 = load float, float* %1359, align 4
  %1533 = load float, float* %1360, align 8
  %1534 = load float, float* %1361, align 4
  %1535 = load float, float* %1362, align 16
  %1536 = load float, float* %1363, align 4
  %1537 = fmul float %1531, 3.000000e+00
  %1538 = fsub float %1537, %1529
  %1539 = fmul float %1533, 3.000000e+00
  %1540 = fsub float %1538, %1539
  %1541 = fadd float %1540, %1535
  %1542 = fmul float %1529, 3.000000e+00
  %1543 = fmul float %1531, 6.000000e+00
  %1544 = fsub float %1542, %1543
  %1545 = fadd float %1544, %1539
  %1546 = fsub float %1537, %1542
  %1547 = fmul float %1532, 3.000000e+00
  %1548 = fsub float %1547, %1530
  %1549 = fmul float %1534, 3.000000e+00
  %1550 = fsub float %1548, %1549
  %1551 = fadd float %1550, %1536
  %1552 = fmul float %1530, 3.000000e+00
  %1553 = fmul float %1532, 6.000000e+00
  %1554 = fsub float %1552, %1553
  %1555 = fadd float %1554, %1549
  %1556 = fsub float %1547, %1552
  %1557 = load float, float* %1364, align 8
  %1558 = load float, float* %1365, align 4
  %1559 = load float, float* %1366, align 16
  %1560 = load float, float* %1367, align 4
  %1561 = fmul float %1557, 3.000000e+00
  %1562 = fsub float %1561, %1501
  %1563 = fmul float %1559, 3.000000e+00
  %1564 = fsub float %1562, %1563
  %1565 = fadd float %1529, %1564
  %1566 = fmul float %1557, 6.000000e+00
  %1567 = fsub float %1514, %1566
  %1568 = fadd float %1567, %1563
  %1569 = fsub float %1561, %1514
  %1570 = fmul float %1558, 3.000000e+00
  %1571 = fsub float %1570, %1502
  %1572 = fmul float %1560, 3.000000e+00
  %1573 = fsub float %1571, %1572
  %1574 = fadd float %1530, %1573
  %1575 = fmul float %1558, 6.000000e+00
  %1576 = fsub float %1524, %1575
  %1577 = fadd float %1576, %1572
  %1578 = fsub float %1570, %1524
  %1579 = load float, float* %1368, align 16
  %1580 = load float, float* %1369, align 4
  %1581 = load float, float* %1370, align 8
  %1582 = load float, float* %1371, align 4
  %1583 = fmul float %1579, 3.000000e+00
  %1584 = fsub float %1583, %1507
  %1585 = fmul float %1581, 3.000000e+00
  %1586 = fsub float %1584, %1585
  %1587 = fadd float %1535, %1586
  %1588 = fmul float %1507, 3.000000e+00
  %1589 = fmul float %1579, 6.000000e+00
  %1590 = fsub float %1588, %1589
  %1591 = fadd float %1590, %1585
  %1592 = fsub float %1583, %1588
  %1593 = fmul float %1580, 3.000000e+00
  %1594 = fsub float %1593, %1508
  %1595 = fmul float %1582, 3.000000e+00
  %1596 = fsub float %1594, %1595
  %1597 = fadd float %1536, %1596
  %1598 = fmul float %1508, 3.000000e+00
  %1599 = fmul float %1580, 6.000000e+00
  %1600 = fsub float %1598, %1599
  %1601 = fadd float %1600, %1595
  %1602 = fsub float %1593, %1598
  store float %1513, float* %1372, align 8
  store float %1517, float* %1373, align 4
  store float %1518, float* %1374, align 8
  store float %1501, float* %1375, align 4
  store float %1523, float* %1376, align 8
  store float %1527, float* %1377, align 4
  store float %1528, float* %1378, align 8
  store float %1502, float* %1379, align 4
  store float %1541, float* %1380, align 8
  store float %1545, float* %1381, align 4
  store float %1546, float* %1382, align 8
  store float %1529, float* %1383, align 4
  store float %1551, float* %1384, align 8
  store float %1555, float* %1385, align 4
  store float %1556, float* %1386, align 8
  store float %1530, float* %1387, align 4
  store float %1565, float* %1388, align 8
  store float %1568, float* %1389, align 4
  store float %1569, float* %1390, align 8
  store float %1501, float* %1391, align 4
  store float %1574, float* %1392, align 8
  store float %1577, float* %1393, align 4
  store float %1578, float* %1394, align 8
  store float %1502, float* %1395, align 4
  store float %1587, float* %1396, align 8
  store float %1591, float* %1397, align 4
  store float %1592, float* %1398, align 8
  store float %1507, float* %1399, align 4
  store float %1597, float* %1400, align 8
  store float %1601, float* %1401, align 4
  store float %1602, float* %1402, align 8
  store float %1508, float* %1403, align 4
  call fastcc void @_ZN12_GLOBAL__N_116CPDF_PatchDrawer4DrawEiiiiNS_11Coon_BezierES1_S1_S1_(%"struct.(anonymous namespace)::CPDF_PatchDrawer"* nonnull %54, i32 1, i32 1, i32 0, i32 0, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %61, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %62, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %63, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %64) #10
  br label %1603

1603:                                             ; preds = %1500, %1494, %1484, %1478
  %1604 = load %class.CFX_BitStream*, %class.CFX_BitStream** %1328, align 8
  %1605 = getelementptr inbounds %class.CFX_BitStream, %class.CFX_BitStream* %1604, i64 0, i32 0
  %1606 = load i32, i32* %1605, align 8
  %1607 = getelementptr inbounds %class.CFX_BitStream, %class.CFX_BitStream* %1604, i64 0, i32 1
  %1608 = load i32, i32* %1607, align 4
  %1609 = icmp ult i32 %1606, %1608
  br i1 %1609, label %1416, label %1610

1610:                                             ; preds = %1603, %1416, %1312
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %1288) #10
  call void @_ZN12CFX_PathDataD1Ev(%class.CFX_PathData* %1314) #10
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %1313) #10
  br label %1650

1611:                                             ; preds = %1433
  %1612 = bitcast %class.CFX_PTemplate* %1437 to i32*
  %1613 = load i32, i32* %1612, align 8
  store i32 %1613, i32* %1408, align 8
  %1614 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 %1436, i32 1
  %1615 = bitcast float* %1614 to i32*
  %1616 = load i32, i32* %1615, align 4
  store i32 %1616, i32* %1409, align 4
  br label %1617

1617:                                             ; preds = %1611, %1433
  %1618 = add i32 %1422, 2
  %1619 = urem i32 %1618, 12
  %1620 = zext i32 %1619 to i64
  %1621 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 %1620
  %1622 = icmp eq %class.CFX_PTemplate* %1410, %1621
  br i1 %1622, label %1629, label %1623

1623:                                             ; preds = %1617
  %1624 = bitcast %class.CFX_PTemplate* %1621 to i32*
  %1625 = load i32, i32* %1624, align 8
  store i32 %1625, i32* %1411, align 16
  %1626 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 %1620, i32 1
  %1627 = bitcast float* %1626 to i32*
  %1628 = load i32, i32* %1627, align 4
  store i32 %1628, i32* %1412, align 4
  br label %1629

1629:                                             ; preds = %1623, %1617
  %1630 = add i32 %1422, 3
  %1631 = urem i32 %1630, 12
  %1632 = zext i32 %1631 to i64
  %1633 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 %1632
  %1634 = icmp eq %class.CFX_PTemplate* %1413, %1633
  br i1 %1634, label %1641, label %1635

1635:                                             ; preds = %1629
  %1636 = bitcast %class.CFX_PTemplate* %1633 to i32*
  %1637 = load i32, i32* %1636, align 8
  store i32 %1637, i32* %1414, align 8
  %1638 = getelementptr inbounds [16 x %class.CFX_PTemplate], [16 x %class.CFX_PTemplate]* %56, i64 0, i64 %1632, i32 1
  %1639 = bitcast float* %1638 to i32*
  %1640 = load i32, i32* %1639, align 4
  store i32 %1640, i32* %1415, align 4
  br label %1641

1641:                                             ; preds = %1635, %1629
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %1288, i8* nonnull align 16 %1289, i64 32, i1 false) #10
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1290)
  %1642 = zext i32 %1419 to i64
  %1643 = getelementptr inbounds %"struct.(anonymous namespace)::CPDF_PatchDrawer", %"struct.(anonymous namespace)::CPDF_PatchDrawer"* %54, i64 0, i32 5, i64 %1642
  %1644 = bitcast %"struct.(anonymous namespace)::Coon_Color"* %1643 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %1290, i8* align 4 %1644, i64 12, i1 false) #10
  %1645 = add i32 %1419, 1
  %1646 = and i32 %1645, 3
  %1647 = zext i32 %1646 to i64
  %1648 = getelementptr inbounds %"struct.(anonymous namespace)::CPDF_PatchDrawer", %"struct.(anonymous namespace)::CPDF_PatchDrawer"* %54, i64 0, i32 5, i64 %1647
  %1649 = bitcast %"struct.(anonymous namespace)::Coon_Color"* %1648 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1342, i8* align 4 %1649, i64 12, i1 false) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1316, i8* nonnull align 16 %1290, i64 24, i1 false) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1290)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1289) #10
  br label %1439

1650:                                             ; preds = %1309, %1610
  call void @_ZN15CPDF_MeshStreamD1Ev(%class.CPDF_MeshStream* nonnull %53) #10
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %1310) #10
  call void @_ZN23CFX_DefaultRenderDeviceD1Ev(%class.CFX_DefaultRenderDevice* nonnull %51) #10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %1291) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1284)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1285)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1286)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1287)
  br label %1651

1651:                                             ; preds = %1270, %1100, %1023, %1260, %1110, %918, %826, %796, %758, %712, %646, %616, %578, %1650, %1273, %1103, %1099, %1026, %293, %577
  br i1 %202, label %1652, label %1679

1652:                                             ; preds = %1651
  %1653 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %276, align 8
  %1654 = bitcast %"class.fxcrt::RetainPtr.212"* %85 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1654) #10
  %1655 = ptrtoint %class.CFX_DIBitmap* %1653 to i64
  %1656 = bitcast %"class.fxcrt::RetainPtr.212"* %85 to i64*
  store i64 %1655, i64* %1656, align 8
  %1657 = icmp eq %class.CFX_DIBitmap* %1653, null
  br i1 %1657, label %1662, label %1658

1658:                                             ; preds = %1652
  %1659 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %1653, i64 0, i32 0, i32 0, i32 1
  %1660 = load i64, i64* %1659, align 8
  %1661 = add nsw i64 %1660, 1
  store i64 %1661, i64* %1659, align 8
  br label %1662

1662:                                             ; preds = %1652, %1658
  %1663 = call zeroext i1 @_ZN12CFX_DIBitmap16SetRedFromBitmapERKN5fxcrt9RetainPtrI11CFX_DIBBaseEE(%class.CFX_DIBitmap* %1653, %"class.fxcrt::RetainPtr.212"* nonnull dereferenceable(8) %85) #10
  %1664 = getelementptr inbounds %"class.fxcrt::RetainPtr.212", %"class.fxcrt::RetainPtr.212"* %85, i64 0, i32 0, i32 0, i32 0, i32 0
  %1665 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %1664, align 8
  store %class.CFX_DIBBase* null, %class.CFX_DIBBase** %1664, align 8
  %1666 = icmp eq %class.CFX_DIBBase* %1665, null
  br i1 %1666, label %1678, label %1667

1667:                                             ; preds = %1662
  %1668 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1665, i64 0, i32 0, i32 1
  %1669 = load i64, i64* %1668, align 8
  %1670 = add nsw i64 %1669, -1
  store i64 %1670, i64* %1668, align 8
  %1671 = icmp eq i64 %1670, 0
  br i1 %1671, label %1672, label %1678

1672:                                             ; preds = %1667
  %1673 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1665, i64 0, i32 0
  %1674 = bitcast %class.CFX_DIBBase* %1665 to void (%"class.fxcrt::Retainable"*)***
  %1675 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %1674, align 8
  %1676 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %1675, i64 1
  %1677 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %1676, align 8
  call void %1677(%"class.fxcrt::Retainable"* nonnull %1673) #10
  br label %1678

1678:                                             ; preds = %1662, %1667, %1672
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1654) #10
  br label %1679

1679:                                             ; preds = %1678, %1651
  %1680 = load i8, i8* %200, align 8
  %1681 = icmp eq i8 %1680, 1
  br i1 %1681, label %1682, label %1685

1682:                                             ; preds = %1679
  %1683 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %276, align 8
  %1684 = call zeroext i1 @_ZN12CFX_DIBitmap17ConvertColorScaleEjj(%class.CFX_DIBitmap* %1683, i32 0, i32 16777215) #10
  br label %1685

1685:                                             ; preds = %1682, %1679
  call void @_ZN17CPDF_DeviceBuffer14OutputToDeviceEv(%class.CPDF_DeviceBuffer* nonnull %82) #10
  br label %1686

1686:                                             ; preds = %293, %293, %286, %1685
  %1687 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %276, align 8
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %276, align 8
  %1688 = icmp eq %class.CFX_DIBitmap* %1687, null
  br i1 %1688, label %1700, label %1689

1689:                                             ; preds = %1686
  %1690 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %1687, i64 0, i32 0, i32 0, i32 1
  %1691 = load i64, i64* %1690, align 8
  %1692 = add nsw i64 %1691, -1
  store i64 %1692, i64* %1690, align 8
  %1693 = icmp eq i64 %1692, 0
  br i1 %1693, label %1694, label %1700

1694:                                             ; preds = %1689
  %1695 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %1687, i64 0, i32 0, i32 0
  %1696 = bitcast %class.CFX_DIBitmap* %1687 to void (%"class.fxcrt::Retainable"*)***
  %1697 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %1696, align 8
  %1698 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %1697, i64 1
  %1699 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %1698, align 8
  call void %1699(%"class.fxcrt::Retainable"* nonnull %1695) #10
  br label %1700

1700:                                             ; preds = %1686, %1689, %1694
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %275) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %218) #10
  br label %1701

1701:                                             ; preds = %214, %1700
  call void @_ZN17CPDF_DeviceBufferD1Ev(%class.CPDF_DeviceBuffer* nonnull %82) #10
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %215) #10
  br label %1702

1702:                                             ; preds = %1701, %206
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %175) #10
  %1703 = load %class.CPDF_ColorSpace*, %class.CPDF_ColorSpace** %94, align 8
  store %class.CPDF_ColorSpace* null, %class.CPDF_ColorSpace** %94, align 8
  %1704 = icmp eq %class.CPDF_ColorSpace* %1703, null
  br i1 %1704, label %1716, label %1705

1705:                                             ; preds = %1702
  %1706 = getelementptr inbounds %class.CPDF_ColorSpace, %class.CPDF_ColorSpace* %1703, i64 0, i32 0, i32 1
  %1707 = load i64, i64* %1706, align 8
  %1708 = add nsw i64 %1707, -1
  store i64 %1708, i64* %1706, align 8
  %1709 = icmp eq i64 %1708, 0
  br i1 %1709, label %1710, label %1716

1710:                                             ; preds = %1705
  %1711 = getelementptr inbounds %class.CPDF_ColorSpace, %class.CPDF_ColorSpace* %1703, i64 0, i32 0
  %1712 = bitcast %class.CPDF_ColorSpace* %1703 to void (%"class.fxcrt::Retainable"*)***
  %1713 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %1712, align 8
  %1714 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %1713, i64 1
  %1715 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %1714, align 8
  call void %1715(%"class.fxcrt::Retainable"* nonnull %1711) #10
  br label %1716

1716:                                             ; preds = %100, %1702, %1705, %1710
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %93) #10
  ret void

1717:                                             ; preds = %360
  %1718 = icmp eq i8 %362, 0
  br i1 %1718, label %1727, label %1719

1719:                                             ; preds = %1717
  %1720 = getelementptr inbounds %class.CPDF_Function, %class.CPDF_Function* %364, i64 0, i32 3
  %1721 = load i32, i32* %1720, align 8
  %1722 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %361, i32 %1721) #10
  %1723 = extractvalue { i32, i1 } %1722, 1
  %1724 = extractvalue { i32, i1 } %1722, 0
  %1725 = xor i1 %1723, true
  %1726 = zext i1 %1725 to i8
  br label %1727

1727:                                             ; preds = %1719, %1717, %360
  %1728 = phi i32 [ %361, %360 ], [ %1724, %1719 ], [ 0, %1717 ]
  %1729 = phi i8 [ %362, %360 ], [ %1726, %1719 ], [ 0, %1717 ]
  %1730 = getelementptr inbounds %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.159"* %343, i64 2
  %1731 = add i64 %346, -2
  %1732 = icmp eq i64 %1731, 0
  br i1 %1732, label %315, label %342

1733:                                             ; preds = %640
  %1734 = icmp eq i8 %642, 0
  br i1 %1734, label %1743, label %1735

1735:                                             ; preds = %1733
  %1736 = getelementptr inbounds %class.CPDF_Function, %class.CPDF_Function* %644, i64 0, i32 3
  %1737 = load i32, i32* %1736, align 8
  %1738 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %641, i32 %1737) #10
  %1739 = extractvalue { i32, i1 } %1738, 1
  %1740 = extractvalue { i32, i1 } %1738, 0
  %1741 = xor i1 %1739, true
  %1742 = zext i1 %1741 to i8
  br label %1743

1743:                                             ; preds = %1735, %1733, %640
  %1744 = phi i32 [ %641, %640 ], [ %1740, %1735 ], [ 0, %1733 ]
  %1745 = phi i8 [ %642, %640 ], [ %1742, %1735 ], [ 0, %1733 ]
  %1746 = getelementptr inbounds %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.159"* %623, i64 2
  %1747 = add i64 %626, -2
  %1748 = icmp eq i64 %1747, 0
  br i1 %1748, label %595, label %622

1749:                                             ; preds = %820
  %1750 = icmp eq i8 %822, 0
  br i1 %1750, label %1759, label %1751

1751:                                             ; preds = %1749
  %1752 = getelementptr inbounds %class.CPDF_Function, %class.CPDF_Function* %824, i64 0, i32 3
  %1753 = load i32, i32* %1752, align 8
  %1754 = call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %821, i32 %1753) #10
  %1755 = extractvalue { i32, i1 } %1754, 1
  %1756 = extractvalue { i32, i1 } %1754, 0
  %1757 = xor i1 %1755, true
  %1758 = zext i1 %1757 to i8
  br label %1759

1759:                                             ; preds = %1751, %1749, %820
  %1760 = phi i32 [ %821, %820 ], [ %1756, %1751 ], [ 0, %1749 ]
  %1761 = phi i8 [ %822, %820 ], [ %1758, %1751 ], [ 0, %1749 ]
  %1762 = getelementptr inbounds %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.159"* %803, i64 2
  %1763 = add i64 %806, -2
  %1764 = icmp eq i64 %1763, 0
  br i1 %1764, label %775, label %802
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %class.CPDF_Object* @_ZNK19CPDF_ShadingPattern16GetShadingObjectEv(%class.CPDF_ShadingPattern*) local_unnamed_addr #2

declare zeroext i1 @_ZNK15CPDF_Dictionary8KeyExistERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"*, i8*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare %class.CPDF_Array* @_ZNK15CPDF_Dictionary11GetArrayForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #2

declare i32 @_ZNK15CPDF_ColorSpace15CountComponentsEv(%class.CPDF_ColorSpace*) local_unnamed_addr #2

declare void @_Z25ReadArrayElementsToVectorPK10CPDF_Arraym(%"class.std::__1::vector.36"* sret, %class.CPDF_Array*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT*, %struct.FX_RECT* dereferenceable(16)) local_unnamed_addr #2

declare { <2 x float>, <2 x float> } @_ZNK10CFX_Matrix13TransformRectERK13CFX_FloatRect(%class.CFX_Matrix*, %class.CFX_FloatRect* dereferenceable(16)) local_unnamed_addr #2

declare { <2 x float>, <2 x float> } @_ZNK15CPDF_Dictionary10GetRectForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #2

declare { i64, i64 } @_ZNK13CFX_FloatRect12GetOuterRectEv(%class.CFX_FloatRect*) local_unnamed_addr #2

declare i32 @_ZNK16CFX_RenderDevice13GetDeviceCapsEi(%class.CFX_RenderDevice*, i32) local_unnamed_addr #2

declare void @_ZN17CPDF_DeviceBufferC1EP18CPDF_RenderContextP16CFX_RenderDeviceRK7FX_RECTPK15CPDF_PageObjecti(%class.CPDF_DeviceBuffer*, %class.CPDF_RenderContext*, %class.CFX_RenderDevice*, %struct.FX_RECT* dereferenceable(16), %class.CPDF_PageObject*, i32) unnamed_addr #2

declare zeroext i1 @_ZN17CPDF_DeviceBuffer10InitializeEv(%class.CPDF_DeviceBuffer*) local_unnamed_addr #2

declare void @_ZN12CFX_DIBitmap5ClearEj(%class.CFX_DIBitmap*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZN12CFX_DIBitmap16SetRedFromBitmapERKN5fxcrt9RetainPtrI11CFX_DIBBaseEE(%class.CFX_DIBitmap*, %"class.fxcrt::RetainPtr.212"* dereferenceable(8)) local_unnamed_addr #2

declare zeroext i1 @_ZN12CFX_DIBitmap17ConvertColorScaleEjj(%class.CFX_DIBitmap*, i32, i32) local_unnamed_addr #2

declare void @_ZN17CPDF_DeviceBuffer14OutputToDeviceEv(%class.CPDF_DeviceBuffer*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN17CPDF_DeviceBufferD1Ev(%class.CPDF_DeviceBuffer*) unnamed_addr #3

declare float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array*, i64) local_unnamed_addr #2

declare void @_ZNK15CPDF_Dictionary12GetMatrixForERKN5fxcrt10ByteStringE(%class.CFX_Matrix* sret, %class.CPDF_Dictionary*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZNK10CFX_Matrix10GetInverseEv(%class.CFX_Matrix* sret, %class.CFX_Matrix*) local_unnamed_addr #2

declare void @_ZNK10CFX_Matrix9TransformERK13CFX_PTemplateIfE(%class.CFX_PTemplate* sret, %class.CFX_Matrix*, %class.CFX_PTemplate* dereferenceable(8)) local_unnamed_addr #2

declare zeroext i1 @_ZNK13CPDF_Function4CallEPKfjPfPi(%class.CPDF_Function*, float*, i32, float*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32) #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

declare zeroext i1 @_ZNK10CPDF_Array12GetBooleanAtEmb(%class.CPDF_Array*, i64, i1 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_115GetShadingStepsEffRKNSt3__16vectorINS0_10unique_ptrI13CPDF_FunctionNS0_14default_deleteIS3_EEEENS0_9allocatorIS6_EEEERKN5fxcrt9RetainPtrI15CPDF_ColorSpaceEEim(%"struct.std::__1::array.243"* noalias nocapture sret, float, float, %"class.std::__1::vector.157"* nocapture readonly dereferenceable(24), %"class.fxcrt::RetainPtr.77"* nocapture readonly dereferenceable(8), i32, i64) unnamed_addr #0 {
  %8 = alloca %"class.std::__1::vector.36", align 8
  %9 = alloca float, align 4
  %10 = alloca i32, align 4
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca %"class.pdfium::span", align 8
  %15 = bitcast %"struct.std::__1::array.243"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %15, i8 -86, i64 1024, i1 false)
  %16 = bitcast %"class.std::__1::vector.36"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %8, i64 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %8, i64 0, i32 0, i32 1
  %19 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 24, i1 false) #10
  %20 = icmp eq i64 %6, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %7
  %22 = bitcast float** %18 to i64*
  br label %42

23:                                               ; preds = %7
  %24 = icmp ugt i64 %6, 4611686018427387903
  br i1 %24, label %25, label %27

25:                                               ; preds = %23
  %26 = bitcast %"class.std::__1::vector.36"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %26) #12
  unreachable

27:                                               ; preds = %23
  %28 = shl i64 %6, 2
  %29 = tail call i8* @_Znwm(i64 %28) #11
  %30 = bitcast i8* %29 to float*
  %31 = bitcast %"class.std::__1::vector.36"* %8 to i8**
  store i8* %29, i8** %31, align 8
  %32 = getelementptr inbounds float, float* %30, i64 %6
  store float* %32, float** %19, align 8
  %33 = bitcast float** %18 to i64*
  %34 = ptrtoint i8* %29 to i64
  %35 = add nsw i64 %6, -1
  %36 = getelementptr float, float* %30, i64 %35
  %37 = ptrtoint float* %36 to i64
  %38 = sub i64 4, %34
  %39 = add i64 %38, %37
  %40 = and i64 %39, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %29, i8 0, i64 %40, i1 false) #10
  %41 = ptrtoint float* %32 to i64
  store i64 %41, i64* %33, align 8
  br label %42

42:                                               ; preds = %21, %27
  %43 = phi i64* [ %22, %21 ], [ %33, %27 ]
  %44 = fsub float %2, %1
  %45 = bitcast float* %9 to i8*
  %46 = getelementptr inbounds %"class.std::__1::vector.157", %"class.std::__1::vector.157"* %3, i64 0, i32 0, i32 0
  %47 = getelementptr inbounds %"class.std::__1::vector.157", %"class.std::__1::vector.157"* %3, i64 0, i32 0, i32 1
  %48 = bitcast i32* %10 to i8*
  %49 = bitcast float* %11 to i8*
  %50 = bitcast float* %12 to i8*
  %51 = bitcast float* %13 to i8*
  %52 = getelementptr inbounds %"class.fxcrt::RetainPtr.77", %"class.fxcrt::RetainPtr.77"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %53 = bitcast %"class.std::__1::vector.36"* %8 to i64*
  %54 = bitcast %"class.pdfium::span"* %14 to i64*
  %55 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %14, i64 0, i32 1
  %56 = shl i32 %5, 24
  br label %64

57:                                               ; preds = %74
  %58 = load float*, float** %17, align 8
  %59 = icmp eq float* %58, null
  br i1 %59, label %63, label %60

60:                                               ; preds = %57
  %61 = ptrtoint float* %58 to i64
  store i64 %61, i64* %43, align 8
  %62 = bitcast float* %58 to i8*
  call void @_ZdlPv(i8* %62) #11
  br label %63

63:                                               ; preds = %57, %60
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #10
  ret void

64:                                               ; preds = %74, %42
  %65 = phi i64 [ 0, %42 ], [ %100, %74 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %45) #10
  %66 = trunc i64 %65 to i32
  %67 = sitofp i32 %66 to float
  %68 = fmul float %44, %67
  %69 = fmul float %68, 3.906250e-03
  %70 = fadd float %69, %1
  store float %70, float* %9, align 4
  %71 = load %"class.std::__1::unique_ptr.159"*, %"class.std::__1::unique_ptr.159"** %46, align 8
  %72 = load %"class.std::__1::unique_ptr.159"*, %"class.std::__1::unique_ptr.159"** %47, align 8
  %73 = icmp eq %"class.std::__1::unique_ptr.159"* %71, %72
  br i1 %73, label %74, label %102

74:                                               ; preds = %116, %64
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %49) #10
  store float 0.000000e+00, float* %11, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %50) #10
  store float 0.000000e+00, float* %12, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %51) #10
  store float 0.000000e+00, float* %13, align 4
  %75 = load %class.CPDF_ColorSpace*, %class.CPDF_ColorSpace** %52, align 8
  %76 = load i64, i64* %53, align 8
  %77 = load i64, i64* %43, align 8
  %78 = sub i64 %77, %76
  %79 = ashr exact i64 %78, 2
  store i64 %76, i64* %54, align 8
  store i64 %79, i64* %55, align 8
  %80 = bitcast %class.CPDF_ColorSpace* %75 to i1 (%class.CPDF_ColorSpace*, %"class.pdfium::span"*, float*, float*, float*)***
  %81 = load i1 (%class.CPDF_ColorSpace*, %"class.pdfium::span"*, float*, float*, float*)**, i1 (%class.CPDF_ColorSpace*, %"class.pdfium::span"*, float*, float*, float*)*** %80, align 8
  %82 = getelementptr inbounds i1 (%class.CPDF_ColorSpace*, %"class.pdfium::span"*, float*, float*, float*)*, i1 (%class.CPDF_ColorSpace*, %"class.pdfium::span"*, float*, float*, float*)** %81, i64 2
  %83 = load i1 (%class.CPDF_ColorSpace*, %"class.pdfium::span"*, float*, float*, float*)*, i1 (%class.CPDF_ColorSpace*, %"class.pdfium::span"*, float*, float*, float*)** %82, align 8
  %84 = call zeroext i1 %83(%class.CPDF_ColorSpace* %75, %"class.pdfium::span"* nonnull %14, float* nonnull %11, float* nonnull %12, float* nonnull %13) #10
  %85 = load float, float* %11, align 4
  %86 = fmul float %85, 2.550000e+02
  %87 = call i32 @FXSYS_roundf(float %86) #10
  %88 = load float, float* %12, align 4
  %89 = fmul float %88, 2.550000e+02
  %90 = call i32 @FXSYS_roundf(float %89) #10
  %91 = load float, float* %13, align 4
  %92 = fmul float %91, 2.550000e+02
  %93 = call i32 @FXSYS_roundf(float %92) #10
  %94 = shl i32 %87, 16
  %95 = or i32 %94, %56
  %96 = shl i32 %90, 8
  %97 = or i32 %95, %96
  %98 = or i32 %97, %93
  %99 = getelementptr inbounds %"struct.std::__1::array.243", %"struct.std::__1::array.243"* %0, i64 0, i32 0, i64 %65
  store i32 %98, i32* %99, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %51) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %50) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #10
  %100 = add nuw nsw i64 %65, 1
  %101 = icmp eq i64 %100, 256
  br i1 %101, label %57, label %64

102:                                              ; preds = %64, %116
  %103 = phi i32 [ %117, %116 ], [ 0, %64 ]
  %104 = phi %"class.std::__1::unique_ptr.159"* [ %118, %116 ], [ %71, %64 ]
  %105 = getelementptr inbounds %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.159"* %104, i64 0, i32 0, i32 0, i32 0
  %106 = load %class.CPDF_Function*, %class.CPDF_Function** %105, align 8
  %107 = icmp eq %class.CPDF_Function* %106, null
  br i1 %107, label %116, label %108

108:                                              ; preds = %102
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %48) #10
  store i32 0, i32* %10, align 4
  %109 = sext i32 %103 to i64
  %110 = load float*, float** %17, align 8
  %111 = getelementptr inbounds float, float* %110, i64 %109
  %112 = call zeroext i1 @_ZNK13CPDF_Function4CallEPKfjPfPi(%class.CPDF_Function* nonnull %106, float* nonnull %9, i32 1, float* %111, i32* nonnull %10) #10
  %113 = load i32, i32* %10, align 4
  %114 = select i1 %112, i32 %113, i32 0
  %115 = add nsw i32 %114, %103
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %48) #10
  br label %116

116:                                              ; preds = %102, %108
  %117 = phi i32 [ %115, %108 ], [ %103, %102 ]
  %118 = getelementptr inbounds %"class.std::__1::unique_ptr.159", %"class.std::__1::unique_ptr.159"* %104, i64 1
  %119 = icmp eq %"class.std::__1::unique_ptr.159"* %118, %72
  br i1 %119, label %74, label %102
}

declare i32 @FXSYS_roundf(float) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #7

declare void @_ZN15CPDF_MeshStreamC1E11ShadingTypeRKNSt3__16vectorINS1_10unique_ptrI13CPDF_FunctionNS1_14default_deleteIS4_EEEENS1_9allocatorIS7_EEEEPK11CPDF_StreamRKN5fxcrt9RetainPtrI15CPDF_ColorSpaceEE(%class.CPDF_MeshStream*, i32, %"class.std::__1::vector.157"* dereferenceable(24), %class.CPDF_Stream*, %"class.fxcrt::RetainPtr.77"* dereferenceable(8)) unnamed_addr #2

declare zeroext i1 @_ZN15CPDF_MeshStream4LoadEv(%class.CPDF_MeshStream*) local_unnamed_addr #2

declare void @_ZN15CPDF_MeshVertexC1Ev(%class.CPDF_MeshVertex*) unnamed_addr #2

declare zeroext i1 @_ZN15CPDF_MeshStream10ReadVertexERK10CFX_MatrixP15CPDF_MeshVertexPj(%class.CPDF_MeshStream*, %class.CFX_Matrix* dereferenceable(24), %class.CPDF_MeshVertex*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_111DrawGouraudERKN5fxcrt9RetainPtrI12CFX_DIBitmapEEiP15CPDF_MeshVertex(%"class.fxcrt::RetainPtr"* nocapture readonly dereferenceable(8), i32, %class.CPDF_MeshVertex* nocapture readonly) unnamed_addr #0 {
  %4 = alloca [3 x float], align 4
  %5 = alloca [3 x float], align 4
  %6 = alloca [3 x float], align 4
  %7 = alloca [3 x float], align 4
  %8 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %2, i64 0, i32 0, i32 1
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %2, i64 1, i32 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = fcmp olt float %11, %9
  %13 = select i1 %12, float %11, float %9
  %14 = fcmp olt float %9, %11
  %15 = select i1 %14, float %11, float %9
  %16 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %2, i64 2, i32 0, i32 1
  %17 = load float, float* %16, align 4
  %18 = fcmp olt float %17, %13
  %19 = select i1 %18, float %17, float %13
  %20 = fcmp olt float %15, %17
  %21 = select i1 %20, float %17, float %15
  %22 = fcmp oeq float %19, %21
  br i1 %22, label %225, label %23

23:                                               ; preds = %3
  %24 = tail call float @llvm.floor.f32(float %19)
  %25 = fptosi float %24 to i32
  %26 = icmp sgt i32 %25, 0
  %27 = select i1 %26, i32 %25, i32 0
  %28 = tail call float @llvm.ceil.f32(float %21)
  %29 = fptosi float %28 to i32
  %30 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %31 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %30, align 8
  %32 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %31, i64 0, i32 0, i32 3
  %33 = load i32, i32* %32, align 8
  %34 = icmp sgt i32 %33, %29
  %35 = add nsw i32 %33, -1
  %36 = select i1 %34, i32 %29, i32 %35
  %37 = icmp sgt i32 %27, %36
  br i1 %37, label %225, label %38

38:                                               ; preds = %23
  %39 = bitcast [3 x float]* %4 to i8*
  %40 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 0, i64 0
  %41 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 0, i64 1
  %42 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 0, i64 2
  %43 = bitcast [3 x float]* %5 to i8*
  %44 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 0, i64 0
  %45 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 0, i64 1
  %46 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 0, i64 2
  %47 = bitcast [3 x float]* %6 to i8*
  %48 = getelementptr inbounds [3 x float], [3 x float]* %6, i64 0, i64 0
  %49 = getelementptr inbounds [3 x float], [3 x float]* %6, i64 0, i64 1
  %50 = getelementptr inbounds [3 x float], [3 x float]* %6, i64 0, i64 2
  %51 = bitcast [3 x float]* %7 to i8*
  %52 = getelementptr inbounds [3 x float], [3 x float]* %7, i64 0, i64 0
  %53 = getelementptr inbounds [3 x float], [3 x float]* %7, i64 0, i64 1
  %54 = getelementptr inbounds [3 x float], [3 x float]* %7, i64 0, i64 2
  %55 = shl i32 %1, 24
  br label %56

56:                                               ; preds = %222, %38
  %57 = phi i32 [ %27, %38 ], [ %223, %222 ]
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %39) #10
  store float 0xFFFFFFFFE0000000, float* %40, align 4
  store float 0xFFFFFFFFE0000000, float* %41, align 4
  store float 0xFFFFFFFFE0000000, float* %42, align 4
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %43) #10
  store float 0xFFFFFFFFE0000000, float* %44, align 4
  store float 0xFFFFFFFFE0000000, float* %45, align 4
  store float 0xFFFFFFFFE0000000, float* %46, align 4
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %47) #10
  store float 0xFFFFFFFFE0000000, float* %48, align 4
  store float 0xFFFFFFFFE0000000, float* %49, align 4
  store float 0xFFFFFFFFE0000000, float* %50, align 4
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %51) #10
  store float 0xFFFFFFFFE0000000, float* %52, align 4
  store float 0xFFFFFFFFE0000000, float* %53, align 4
  store float 0xFFFFFFFFE0000000, float* %54, align 4
  %58 = sitofp i32 %57 to float
  br label %61

59:                                               ; preds = %122
  %60 = icmp eq i32 %123, 2
  br i1 %60, label %125, label %222

61:                                               ; preds = %122, %56
  %62 = phi i64 [ 0, %56 ], [ %64, %122 ]
  %63 = phi i32 [ 0, %56 ], [ %123, %122 ]
  %64 = add nuw nsw i64 %62, 1
  %65 = trunc i64 %64 to i8
  %66 = urem i8 %65, 3
  %67 = zext i8 %66 to i64
  %68 = sext i32 %63 to i64
  %69 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 0, i64 %68
  %70 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %2, i64 %62, i32 0, i32 1
  %71 = load float, float* %70, align 4
  %72 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %2, i64 %67, i32 0, i32 1
  %73 = load float, float* %72, align 4
  %74 = fcmp oeq float %71, %73
  br i1 %74, label %122, label %75

75:                                               ; preds = %61
  %76 = fcmp olt float %71, %73
  br i1 %76, label %77, label %81

77:                                               ; preds = %75
  %78 = fcmp ogt float %71, %58
  %79 = fcmp olt float %73, %58
  %80 = or i1 %78, %79
  br i1 %80, label %122, label %85

81:                                               ; preds = %75
  %82 = fcmp ogt float %73, %58
  %83 = fcmp olt float %71, %58
  %84 = or i1 %83, %82
  br i1 %84, label %122, label %85

85:                                               ; preds = %81, %77
  %86 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %2, i64 %62, i32 0, i32 0
  %87 = load float, float* %86, align 4
  %88 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %2, i64 %67, i32 0, i32 0
  %89 = load float, float* %88, align 4
  %90 = fsub float %89, %87
  %91 = fsub float %58, %71
  %92 = fmul float %91, %90
  %93 = fsub float %73, %71
  %94 = fdiv float %92, %93
  %95 = fadd float %87, %94
  store float %95, float* %69, align 4
  %96 = fdiv float %91, %93
  %97 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %2, i64 %62, i32 1
  %98 = load float, float* %97, align 4
  %99 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %2, i64 %67, i32 1
  %100 = load float, float* %99, align 4
  %101 = fsub float %100, %98
  %102 = fmul float %96, %101
  %103 = fadd float %98, %102
  %104 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 0, i64 %68
  store float %103, float* %104, align 4
  %105 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %2, i64 %62, i32 2
  %106 = load float, float* %105, align 4
  %107 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %2, i64 %67, i32 2
  %108 = load float, float* %107, align 4
  %109 = fsub float %108, %106
  %110 = fmul float %96, %109
  %111 = fadd float %106, %110
  %112 = getelementptr inbounds [3 x float], [3 x float]* %6, i64 0, i64 %68
  store float %111, float* %112, align 4
  %113 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %2, i64 %62, i32 3
  %114 = load float, float* %113, align 4
  %115 = getelementptr inbounds %class.CPDF_MeshVertex, %class.CPDF_MeshVertex* %2, i64 %67, i32 3
  %116 = load float, float* %115, align 4
  %117 = fsub float %116, %114
  %118 = fmul float %96, %117
  %119 = fadd float %114, %118
  %120 = getelementptr inbounds [3 x float], [3 x float]* %7, i64 0, i64 %68
  store float %119, float* %120, align 4
  %121 = add nsw i32 %63, 1
  br label %122

122:                                              ; preds = %81, %77, %61, %85
  %123 = phi i32 [ %121, %85 ], [ %63, %61 ], [ %63, %77 ], [ %63, %81 ]
  %124 = icmp eq i64 %64, 3
  br i1 %124, label %59, label %61

125:                                              ; preds = %59
  %126 = load float, float* %40, align 4
  %127 = load float, float* %41, align 4
  %128 = fcmp olt float %126, %127
  %129 = select i1 %128, float %126, float %127
  %130 = select i1 %128, float %127, float %126
  %131 = xor i1 %128, true
  %132 = zext i1 %131 to i64
  %133 = zext i1 %128 to i64
  %134 = tail call float @llvm.floor.f32(float %129)
  %135 = tail call float @llvm.ceil.f32(float %130)
  %136 = fptosi float %134 to i32
  %137 = fptosi float %135 to i32
  %138 = icmp sgt i32 %136, 0
  %139 = select i1 %138, i32 %136, i32 0
  %140 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %30, align 8
  %141 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %140, i64 0, i32 0, i32 2
  %142 = load i32, i32* %141, align 4
  %143 = icmp slt i32 %142, %137
  %144 = select i1 %143, i32 %142, i32 %137
  %145 = bitcast %class.CFX_DIBitmap* %140 to i8* (%class.CFX_DIBitmap*)***
  %146 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %145, align 8
  %147 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %146, i64 2
  %148 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %147, align 8
  %149 = tail call i8* %148(%class.CFX_DIBitmap* %140) #10
  %150 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 0, i64 %133
  %151 = load float, float* %150, align 4
  %152 = getelementptr inbounds [3 x float], [3 x float]* %5, i64 0, i64 %132
  %153 = load float, float* %152, align 4
  %154 = fsub float %151, %153
  %155 = sub nsw i32 %137, %136
  %156 = sitofp i32 %155 to float
  %157 = fdiv float %154, %156
  %158 = getelementptr inbounds [3 x float], [3 x float]* %6, i64 0, i64 %133
  %159 = load float, float* %158, align 4
  %160 = getelementptr inbounds [3 x float], [3 x float]* %6, i64 0, i64 %132
  %161 = load float, float* %160, align 4
  %162 = fsub float %159, %161
  %163 = fdiv float %162, %156
  %164 = getelementptr inbounds [3 x float], [3 x float]* %7, i64 0, i64 %133
  %165 = load float, float* %164, align 4
  %166 = getelementptr inbounds [3 x float], [3 x float]* %7, i64 0, i64 %132
  %167 = load float, float* %166, align 4
  %168 = fsub float %165, %167
  %169 = fdiv float %168, %156
  %170 = sub nsw i32 %139, %136
  %171 = sitofp i32 %170 to float
  %172 = icmp slt i32 %139, %144
  br i1 %172, label %173, label %222

173:                                              ; preds = %125
  %174 = fmul float %169, %171
  %175 = fadd float %167, %174
  %176 = fmul float %163, %171
  %177 = fadd float %161, %176
  %178 = fmul float %157, %171
  %179 = fadd float %153, %178
  %180 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %30, align 8
  %181 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %180, i64 0, i32 0, i32 4
  %182 = load i32, i32* %181, align 4
  %183 = mul i32 %182, %57
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds i8, i8* %149, i64 %184
  %186 = shl nsw i32 %139, 2
  %187 = zext i32 %186 to i64
  %188 = getelementptr inbounds i8, i8* %185, i64 %187
  br label %189

189:                                              ; preds = %173, %189
  %190 = phi i32 [ %220, %189 ], [ %139, %173 ]
  %191 = phi float [ %197, %189 ], [ %175, %173 ]
  %192 = phi float [ %196, %189 ], [ %177, %173 ]
  %193 = phi float [ %195, %189 ], [ %179, %173 ]
  %194 = phi i8* [ %219, %189 ], [ %188, %173 ]
  %195 = fadd float %157, %193
  %196 = fadd float %163, %192
  %197 = fadd float %169, %191
  %198 = fmul float %195, 2.550000e+02
  %199 = fptosi float %198 to i32
  %200 = fmul float %196, 2.550000e+02
  %201 = fptosi float %200 to i32
  %202 = fmul float %197, 2.550000e+02
  %203 = fptosi float %202 to i32
  %204 = shl i32 %199, 16
  %205 = or i32 %204, %55
  %206 = shl i32 %201, 8
  %207 = or i32 %205, %206
  %208 = or i32 %207, %203
  %209 = trunc i32 %203 to i8
  store i8 %209, i8* %194, align 1
  %210 = lshr i32 %208, 8
  %211 = trunc i32 %210 to i8
  %212 = getelementptr inbounds i8, i8* %194, i64 1
  store i8 %211, i8* %212, align 1
  %213 = lshr i32 %208, 16
  %214 = trunc i32 %213 to i8
  %215 = getelementptr inbounds i8, i8* %194, i64 2
  store i8 %214, i8* %215, align 1
  %216 = lshr i32 %208, 24
  %217 = trunc i32 %216 to i8
  %218 = getelementptr inbounds i8, i8* %194, i64 3
  store i8 %217, i8* %218, align 1
  %219 = getelementptr inbounds i8, i8* %194, i64 4
  %220 = add nuw nsw i32 %190, 1
  %221 = icmp slt i32 %220, %144
  br i1 %221, label %189, label %222

222:                                              ; preds = %189, %125, %59
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %51) #10
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %47) #10
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %43) #10
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %39) #10
  %223 = add nuw nsw i32 %57, 1
  %224 = icmp slt i32 %57, %36
  br i1 %224, label %56, label %225

225:                                              ; preds = %222, %23, %3
  ret void
}

; Function Attrs: nounwind
declare void @_ZN15CPDF_MeshVertexD1Ev(%class.CPDF_MeshVertex*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN15CPDF_MeshStreamD1Ev(%class.CPDF_MeshStream*) unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #4

declare %class.CPDF_Dictionary* @_ZNK11CPDF_Stream7GetDictEv(%class.CPDF_Stream*) unnamed_addr #2

declare i32 @_ZNK15CPDF_Dictionary13GetIntegerForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZN15CPDF_MeshStream13ReadVertexRowERK10CFX_Matrixi(%"class.std::__1::vector.265"* sret, %class.CPDF_MeshStream*, %class.CFX_Matrix* dereferenceable(24), i32) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

declare void @_ZN23CFX_DefaultRenderDeviceC1Ev(%class.CFX_DefaultRenderDevice*) unnamed_addr #2

declare zeroext i1 @_ZN23CFX_DefaultRenderDevice6AttachERKN5fxcrt9RetainPtrI12CFX_DIBitmapEEbS5_b(%class.CFX_DefaultRenderDevice*, %"class.fxcrt::RetainPtr"* dereferenceable(8), i1 zeroext, %"class.fxcrt::RetainPtr"* dereferenceable(8), i1 zeroext) local_unnamed_addr #2

declare void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData*, %class.CFX_PTemplate* dereferenceable(8), i8 zeroext) local_unnamed_addr #2

declare zeroext i1 @_ZNK15CPDF_MeshStream11CanReadFlagEv(%class.CPDF_MeshStream*) local_unnamed_addr #2

declare i32 @_ZN15CPDF_MeshStream8ReadFlagEv(%class.CPDF_MeshStream*) local_unnamed_addr #2

declare zeroext i1 @_ZNK15CPDF_MeshStream13CanReadCoordsEv(%class.CPDF_MeshStream*) local_unnamed_addr #2

declare void @_ZN15CPDF_MeshStream10ReadCoordsEv(%class.CFX_PTemplate* sret, %class.CPDF_MeshStream*) local_unnamed_addr #2

declare zeroext i1 @_ZNK15CPDF_MeshStream12CanReadColorEv(%class.CPDF_MeshStream*) local_unnamed_addr #2

declare { <2 x float>, float } @_ZN15CPDF_MeshStream9ReadColorEv(%class.CPDF_MeshStream*) local_unnamed_addr #2

declare { <2 x float>, <2 x float> } @_ZN13CFX_FloatRect7GetBBoxEPK13CFX_PTemplateIfEi(%class.CFX_PTemplate*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_116CPDF_PatchDrawer4DrawEiiiiNS_11Coon_BezierES1_S1_S1_(%"struct.(anonymous namespace)::CPDF_PatchDrawer"*, i32, i32, i32, i32, %"struct.(anonymous namespace)::Coon_Bezier"* readonly byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8, %"struct.(anonymous namespace)::Coon_Bezier"* readonly byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8, %"struct.(anonymous namespace)::Coon_Bezier"* readonly byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8, %"struct.(anonymous namespace)::Coon_Bezier"* readonly byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8) unnamed_addr #0 align 2 {
  %10 = alloca [4 x %"struct.(anonymous namespace)::Coon_Color"], align 16
  %11 = bitcast [4 x %"struct.(anonymous namespace)::Coon_Color"]* %10 to i8*
  %12 = alloca i16, align 2
  %13 = bitcast i16* %12 to %struct.CFX_FillRenderOptions*
  %14 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %15 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %16 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %17 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %18 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %19 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %20 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %21 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %22 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %23 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %24 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %25 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %26 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 4
  %27 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 4
  %28 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %29 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %30 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %31 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %32 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %33 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %34 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %35 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %36 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %37 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %38 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %39 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %40 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %41 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %42 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %43 = alloca %"struct.(anonymous namespace)::Coon_Bezier", align 8
  %44 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %5, i64 0, i32 0, i32 0
  %45 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %5, i64 0, i32 0, i32 1
  %46 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %5 to <2 x float>*
  %47 = load <2 x float>, <2 x float>* %46, align 8
  %48 = extractelement <2 x float> %47, i32 0
  %49 = extractelement <2 x float> %47, i32 1
  %50 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %5, i64 0, i32 0, i32 2
  %51 = load float, float* %50, align 8
  %52 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %5, i64 0, i32 1, i32 0
  %53 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %5, i64 0, i32 1, i32 1
  %54 = bitcast float* %52 to <2 x float>*
  %55 = load <2 x float>, <2 x float>* %54, align 8
  %56 = extractelement <2 x float> %55, i32 0
  %57 = extractelement <2 x float> %55, i32 1
  %58 = shufflevector <2 x float> %47, <2 x float> %55, <2 x i32> <i32 0, i32 2>
  %59 = shufflevector <2 x float> %47, <2 x float> %55, <2 x i32> <i32 1, i32 3>
  %60 = fadd <2 x float> %58, %59
  %61 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %5, i64 0, i32 1, i32 2
  %62 = load float, float* %61, align 8
  %63 = insertelement <2 x float> undef, float %51, i32 0
  %64 = insertelement <2 x float> %63, float %62, i32 1
  %65 = fadd <2 x float> %60, %64
  %66 = fcmp olt <2 x float> %65, zeroinitializer
  %67 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %65
  %68 = select <2 x i1> %66, <2 x float> %67, <2 x float> %65
  %69 = extractelement <2 x float> %68, i32 0
  %70 = extractelement <2 x float> %68, i32 1
  %71 = fadd float %69, %70
  %72 = fcmp olt float %71, 2.000000e+00
  br i1 %72, label %73, label %157

73:                                               ; preds = %9
  %74 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 0, i32 0
  %75 = load float, float* %74, align 8
  %76 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 0, i32 1
  %77 = load float, float* %76, align 4
  %78 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 0, i32 2
  %79 = load float, float* %78, align 8
  %80 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 1, i32 0
  %81 = load float, float* %80, align 8
  %82 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 1, i32 1
  %83 = load float, float* %82, align 4
  %84 = insertelement <2 x float> undef, float %75, i32 0
  %85 = insertelement <2 x float> %84, float %81, i32 1
  %86 = insertelement <2 x float> undef, float %77, i32 0
  %87 = insertelement <2 x float> %86, float %83, i32 1
  %88 = fadd <2 x float> %85, %87
  %89 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 1, i32 2
  %90 = load float, float* %89, align 8
  %91 = insertelement <2 x float> undef, float %79, i32 0
  %92 = insertelement <2 x float> %91, float %90, i32 1
  %93 = fadd <2 x float> %88, %92
  %94 = fcmp olt <2 x float> %93, zeroinitializer
  %95 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %93
  %96 = select <2 x i1> %94, <2 x float> %95, <2 x float> %93
  %97 = extractelement <2 x float> %96, i32 0
  %98 = extractelement <2 x float> %96, i32 1
  %99 = fadd float %97, %98
  %100 = fcmp olt float %99, 2.000000e+00
  br i1 %100, label %101, label %157

101:                                              ; preds = %73
  %102 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 0, i32 0
  %103 = load float, float* %102, align 8
  %104 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 0, i32 1
  %105 = load float, float* %104, align 4
  %106 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 0, i32 2
  %107 = load float, float* %106, align 8
  %108 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 1, i32 0
  %109 = load float, float* %108, align 8
  %110 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 1, i32 1
  %111 = load float, float* %110, align 4
  %112 = insertelement <2 x float> undef, float %103, i32 0
  %113 = insertelement <2 x float> %112, float %109, i32 1
  %114 = insertelement <2 x float> undef, float %105, i32 0
  %115 = insertelement <2 x float> %114, float %111, i32 1
  %116 = fadd <2 x float> %113, %115
  %117 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 1, i32 2
  %118 = load float, float* %117, align 8
  %119 = insertelement <2 x float> undef, float %107, i32 0
  %120 = insertelement <2 x float> %119, float %118, i32 1
  %121 = fadd <2 x float> %116, %120
  %122 = fcmp olt <2 x float> %121, zeroinitializer
  %123 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %121
  %124 = select <2 x i1> %122, <2 x float> %123, <2 x float> %121
  %125 = extractelement <2 x float> %124, i32 0
  %126 = extractelement <2 x float> %124, i32 1
  %127 = fadd float %125, %126
  %128 = fcmp olt float %127, 2.000000e+00
  br i1 %128, label %129, label %157

129:                                              ; preds = %101
  %130 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 0, i32 0
  %131 = load float, float* %130, align 8
  %132 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 0, i32 1
  %133 = load float, float* %132, align 4
  %134 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 0, i32 2
  %135 = load float, float* %134, align 8
  %136 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 1, i32 0
  %137 = load float, float* %136, align 8
  %138 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 1, i32 1
  %139 = load float, float* %138, align 4
  %140 = insertelement <2 x float> undef, float %131, i32 0
  %141 = insertelement <2 x float> %140, float %137, i32 1
  %142 = insertelement <2 x float> undef, float %133, i32 0
  %143 = insertelement <2 x float> %142, float %139, i32 1
  %144 = fadd <2 x float> %141, %143
  %145 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 1, i32 2
  %146 = load float, float* %145, align 8
  %147 = insertelement <2 x float> undef, float %135, i32 0
  %148 = insertelement <2 x float> %147, float %146, i32 1
  %149 = fadd <2 x float> %144, %148
  %150 = fcmp olt <2 x float> %149, zeroinitializer
  %151 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %149
  %152 = select <2 x i1> %150, <2 x float> %151, <2 x float> %149
  %153 = extractelement <2 x float> %152, i32 0
  %154 = extractelement <2 x float> %152, i32 1
  %155 = fadd float %153, %154
  %156 = fcmp olt float %155, 2.000000e+00
  br label %157

157:                                              ; preds = %129, %101, %73, %9
  %158 = phi i1 [ false, %101 ], [ false, %73 ], [ false, %9 ], [ %156, %129 ]
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %11) #10
  %159 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::Coon_Color"], [4 x %"struct.(anonymous namespace)::Coon_Color"]* %10, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 0, i64 48, i1 false)
  %160 = getelementptr inbounds %"struct.(anonymous namespace)::CPDF_PatchDrawer", %"struct.(anonymous namespace)::CPDF_PatchDrawer"* %0, i64 0, i32 5, i64 0
  %161 = call fastcc zeroext i1 @_ZN12_GLOBAL__N_110Coon_Color10BiInterpolEPS0_iiii(%"struct.(anonymous namespace)::Coon_Color"* nonnull %159, %"struct.(anonymous namespace)::Coon_Color"* %160, i32 %3, i32 %4, i32 %1, i32 %2)
  br i1 %161, label %162, label %1289

162:                                              ; preds = %157
  br i1 %158, label %270, label %163

163:                                              ; preds = %162
  %164 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::Coon_Color"], [4 x %"struct.(anonymous namespace)::Coon_Color"]* %10, i64 0, i64 1
  %165 = add nsw i32 %4, 1
  %166 = call fastcc zeroext i1 @_ZN12_GLOBAL__N_110Coon_Color10BiInterpolEPS0_iiii(%"struct.(anonymous namespace)::Coon_Color"* %164, %"struct.(anonymous namespace)::Coon_Color"* %160, i32 %3, i32 %165, i32 %1, i32 %2)
  br i1 %166, label %167, label %1289

167:                                              ; preds = %163
  %168 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::Coon_Color"], [4 x %"struct.(anonymous namespace)::Coon_Color"]* %10, i64 0, i64 2
  %169 = add nsw i32 %3, 1
  %170 = call fastcc zeroext i1 @_ZN12_GLOBAL__N_110Coon_Color10BiInterpolEPS0_iiii(%"struct.(anonymous namespace)::Coon_Color"* %168, %"struct.(anonymous namespace)::Coon_Color"* %160, i32 %169, i32 %165, i32 %1, i32 %2)
  br i1 %170, label %171, label %1289

171:                                              ; preds = %167
  %172 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::Coon_Color"], [4 x %"struct.(anonymous namespace)::Coon_Color"]* %10, i64 0, i64 3
  %173 = call fastcc zeroext i1 @_ZN12_GLOBAL__N_110Coon_Color10BiInterpolEPS0_iiii(%"struct.(anonymous namespace)::Coon_Color"* %172, %"struct.(anonymous namespace)::Coon_Color"* %160, i32 %169, i32 %4, i32 %1, i32 %2)
  br i1 %173, label %174, label %1289

174:                                              ; preds = %171
  %175 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Color", %"struct.(anonymous namespace)::Coon_Color"* %172, i64 0, i32 0, i64 0
  %176 = load i32, i32* %175, align 4
  %177 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::Coon_Color"], [4 x %"struct.(anonymous namespace)::Coon_Color"]* %10, i64 0, i64 0, i32 0, i64 0
  %178 = load i32, i32* %177, align 16
  %179 = sub nsw i32 %176, %178
  %180 = icmp slt i32 %179, 0
  %181 = sub nsw i32 0, %179
  %182 = select i1 %180, i32 %181, i32 %179
  %183 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::Coon_Color"], [4 x %"struct.(anonymous namespace)::Coon_Color"]* %10, i64 0, i64 3, i32 0, i64 1
  %184 = load i32, i32* %183, align 4
  %185 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::Coon_Color"], [4 x %"struct.(anonymous namespace)::Coon_Color"]* %10, i64 0, i64 0, i32 0, i64 1
  %186 = load i32, i32* %185, align 4
  %187 = sub nsw i32 %184, %186
  %188 = icmp slt i32 %187, 0
  %189 = sub nsw i32 0, %187
  %190 = select i1 %188, i32 %189, i32 %187
  %191 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::Coon_Color"], [4 x %"struct.(anonymous namespace)::Coon_Color"]* %10, i64 0, i64 3, i32 0, i64 2
  %192 = load i32, i32* %191, align 4
  %193 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::Coon_Color"], [4 x %"struct.(anonymous namespace)::Coon_Color"]* %10, i64 0, i64 0, i32 0, i64 2
  %194 = load i32, i32* %193, align 8
  %195 = sub nsw i32 %192, %194
  %196 = icmp slt i32 %195, 0
  %197 = sub nsw i32 0, %195
  %198 = select i1 %196, i32 %197, i32 %195
  %199 = icmp slt i32 %182, %190
  %200 = select i1 %199, i32 %190, i32 %182
  %201 = icmp slt i32 %200, %198
  %202 = select i1 %201, i32 %198, i32 %200
  %203 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Color", %"struct.(anonymous namespace)::Coon_Color"* %164, i64 0, i32 0, i64 0
  %204 = load i32, i32* %203, align 4
  %205 = sub nsw i32 %204, %178
  %206 = icmp slt i32 %205, 0
  %207 = sub nsw i32 0, %205
  %208 = select i1 %206, i32 %207, i32 %205
  %209 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::Coon_Color"], [4 x %"struct.(anonymous namespace)::Coon_Color"]* %10, i64 0, i64 1, i32 0, i64 1
  %210 = load i32, i32* %209, align 4
  %211 = sub nsw i32 %210, %186
  %212 = icmp slt i32 %211, 0
  %213 = sub nsw i32 0, %211
  %214 = select i1 %212, i32 %213, i32 %211
  %215 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::Coon_Color"], [4 x %"struct.(anonymous namespace)::Coon_Color"]* %10, i64 0, i64 1, i32 0, i64 2
  %216 = load i32, i32* %215, align 4
  %217 = sub nsw i32 %216, %194
  %218 = icmp slt i32 %217, 0
  %219 = sub nsw i32 0, %217
  %220 = select i1 %218, i32 %219, i32 %217
  %221 = icmp slt i32 %208, %214
  %222 = select i1 %221, i32 %214, i32 %208
  %223 = icmp slt i32 %222, %220
  %224 = select i1 %223, i32 %220, i32 %222
  %225 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Color", %"struct.(anonymous namespace)::Coon_Color"* %168, i64 0, i32 0, i64 0
  %226 = load i32, i32* %225, align 8
  %227 = sub nsw i32 %204, %226
  %228 = icmp slt i32 %227, 0
  %229 = sub nsw i32 0, %227
  %230 = select i1 %228, i32 %229, i32 %227
  %231 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::Coon_Color"], [4 x %"struct.(anonymous namespace)::Coon_Color"]* %10, i64 0, i64 2, i32 0, i64 1
  %232 = load i32, i32* %231, align 4
  %233 = sub nsw i32 %210, %232
  %234 = icmp slt i32 %233, 0
  %235 = sub nsw i32 0, %233
  %236 = select i1 %234, i32 %235, i32 %233
  %237 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::Coon_Color"], [4 x %"struct.(anonymous namespace)::Coon_Color"]* %10, i64 0, i64 2, i32 0, i64 2
  %238 = load i32, i32* %237, align 8
  %239 = sub nsw i32 %216, %238
  %240 = icmp slt i32 %239, 0
  %241 = sub nsw i32 0, %239
  %242 = select i1 %240, i32 %241, i32 %239
  %243 = icmp slt i32 %230, %236
  %244 = select i1 %243, i32 %236, i32 %230
  %245 = icmp slt i32 %244, %242
  %246 = select i1 %245, i32 %242, i32 %244
  %247 = sub nsw i32 %226, %176
  %248 = icmp slt i32 %247, 0
  %249 = sub nsw i32 0, %247
  %250 = select i1 %248, i32 %249, i32 %247
  %251 = sub nsw i32 %232, %184
  %252 = icmp slt i32 %251, 0
  %253 = sub nsw i32 0, %251
  %254 = select i1 %252, i32 %253, i32 %251
  %255 = sub nsw i32 %238, %192
  %256 = icmp slt i32 %255, 0
  %257 = sub nsw i32 0, %255
  %258 = select i1 %256, i32 %257, i32 %255
  %259 = icmp slt i32 %250, %254
  %260 = select i1 %259, i32 %254, i32 %250
  %261 = icmp slt i32 %260, %258
  %262 = select i1 %261, i32 %258, i32 %260
  %263 = icmp slt i32 %202, 4
  %264 = icmp slt i32 %224, 4
  %265 = and i1 %263, %264
  %266 = icmp slt i32 %246, 4
  %267 = and i1 %265, %266
  %268 = icmp slt i32 %262, 4
  %269 = and i1 %268, %267
  br i1 %269, label %270, label %491

270:                                              ; preds = %162, %174
  %271 = getelementptr inbounds %"struct.(anonymous namespace)::CPDF_PatchDrawer", %"struct.(anonymous namespace)::CPDF_PatchDrawer"* %0, i64 0, i32 1
  %272 = bitcast %class.CFX_PathData* %271 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = getelementptr inbounds %"struct.(anonymous namespace)::CPDF_PatchDrawer", %"struct.(anonymous namespace)::CPDF_PatchDrawer"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %275 = bitcast %class.FX_PATHPOINT** %274 to i64*
  %276 = load i64, i64* %275, align 8
  %277 = sub i64 %276, %273
  %278 = sdiv exact i64 %277, 12
  %279 = icmp ult i64 %278, 4
  br i1 %279, label %280, label %281, !prof !15

280:                                              ; preds = %270
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !noalias !16, !srcloc !19
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !noalias !16, !srcloc !20
  unreachable

281:                                              ; preds = %270
  %282 = inttoptr i64 %273 to %class.FX_PATHPOINT*
  %283 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %5, i64 0, i32 0, i32 3
  %284 = load float, float* %283, align 4
  %285 = fdiv float %51, 3.000000e+00
  %286 = fadd float %284, %285
  %287 = fdiv float %49, 3.000000e+00
  %288 = fsub float %287, %284
  %289 = fmul float %286, 2.000000e+00
  %290 = fadd float %289, %288
  %291 = fadd float %284, %48
  %292 = fmul float %286, 3.000000e+00
  %293 = fsub float %291, %292
  %294 = fmul float %290, 3.000000e+00
  %295 = fadd float %293, %294
  %296 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %5, i64 0, i32 1, i32 3
  %297 = load float, float* %296, align 4
  %298 = fdiv float %62, 3.000000e+00
  %299 = fadd float %297, %298
  %300 = fdiv float %57, 3.000000e+00
  %301 = fsub float %300, %297
  %302 = fmul float %299, 2.000000e+00
  %303 = fadd float %302, %301
  %304 = fadd float %297, %56
  %305 = fmul float %299, 3.000000e+00
  %306 = fsub float %304, %305
  %307 = fmul float %303, 3.000000e+00
  %308 = fadd float %306, %307
  %309 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 0, i32 0, i32 0
  store float %284, float* %309, align 4
  %310 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 0, i32 0, i32 1
  store float %297, float* %310, align 4
  %311 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 1, i32 0, i32 0
  store float %286, float* %311, align 4
  %312 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 1, i32 0, i32 1
  store float %299, float* %312, align 4
  %313 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 2, i32 0, i32 0
  store float %290, float* %313, align 4
  %314 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 2, i32 0, i32 1
  store float %303, float* %314, align 4
  %315 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 3, i32 0, i32 0
  store float %295, float* %315, align 4
  %316 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 3, i32 0, i32 1
  store float %308, float* %316, align 4
  %317 = add nsw i64 %278, -3
  %318 = icmp ult i64 %317, 4
  br i1 %318, label %319, label %320, !prof !15

319:                                              ; preds = %281
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !noalias !21, !srcloc !19
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !noalias !21, !srcloc !20
  unreachable

320:                                              ; preds = %281
  %321 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 0, i32 3
  %322 = load float, float* %321, align 4
  %323 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 0, i32 2
  %324 = load float, float* %323, align 8
  %325 = fdiv float %324, 3.000000e+00
  %326 = fadd float %322, %325
  %327 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 0, i32 1
  %328 = load float, float* %327, align 4
  %329 = fdiv float %328, 3.000000e+00
  %330 = fsub float %329, %322
  %331 = fmul float %326, 2.000000e+00
  %332 = fadd float %331, %330
  %333 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 0, i32 0
  %334 = load float, float* %333, align 8
  %335 = fadd float %322, %334
  %336 = fmul float %326, 3.000000e+00
  %337 = fsub float %335, %336
  %338 = fmul float %332, 3.000000e+00
  %339 = fadd float %337, %338
  %340 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 1, i32 3
  %341 = load float, float* %340, align 4
  %342 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 1, i32 2
  %343 = load float, float* %342, align 8
  %344 = fdiv float %343, 3.000000e+00
  %345 = fadd float %341, %344
  %346 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 1, i32 1
  %347 = load float, float* %346, align 4
  %348 = fdiv float %347, 3.000000e+00
  %349 = fsub float %348, %341
  %350 = fmul float %345, 2.000000e+00
  %351 = fadd float %350, %349
  %352 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 1, i32 0
  %353 = load float, float* %352, align 8
  %354 = fadd float %341, %353
  %355 = fmul float %345, 3.000000e+00
  %356 = fsub float %354, %355
  %357 = fmul float %351, 3.000000e+00
  %358 = fadd float %356, %357
  store float %322, float* %315, align 4
  store float %341, float* %316, align 4
  %359 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 4, i32 0, i32 0
  store float %326, float* %359, align 4
  %360 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 4, i32 0, i32 1
  store float %345, float* %360, align 4
  %361 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 5, i32 0, i32 0
  store float %332, float* %361, align 4
  %362 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 5, i32 0, i32 1
  store float %351, float* %362, align 4
  %363 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 6, i32 0, i32 0
  store float %339, float* %363, align 4
  %364 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 6, i32 0, i32 1
  store float %358, float* %364, align 4
  %365 = icmp ult i64 %278, 6
  br i1 %365, label %366, label %367, !prof !15

366:                                              ; preds = %320
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !noalias !24, !srcloc !27
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !noalias !24, !srcloc !28
  unreachable

367:                                              ; preds = %320
  %368 = add nsw i64 %278, -6
  %369 = icmp ult i64 %368, 4
  br i1 %369, label %370, label %371, !prof !15

370:                                              ; preds = %367
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !noalias !24, !srcloc !19
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !noalias !24, !srcloc !20
  unreachable

371:                                              ; preds = %367
  %372 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 0, i32 3
  %373 = load float, float* %372, align 4
  %374 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 0, i32 2
  %375 = load float, float* %374, align 8
  %376 = fdiv float %375, 3.000000e+00
  %377 = fadd float %373, %376
  %378 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 0, i32 1
  %379 = load float, float* %378, align 4
  %380 = fdiv float %379, 3.000000e+00
  %381 = fsub float %380, %373
  %382 = fmul float %377, 2.000000e+00
  %383 = fadd float %382, %381
  %384 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 1, i32 3
  %385 = load float, float* %384, align 4
  %386 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 1, i32 2
  %387 = load float, float* %386, align 8
  %388 = fdiv float %387, 3.000000e+00
  %389 = fadd float %385, %388
  %390 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 1, i32 1
  %391 = load float, float* %390, align 4
  %392 = fdiv float %391, 3.000000e+00
  %393 = fsub float %392, %385
  %394 = fmul float %389, 2.000000e+00
  %395 = fadd float %394, %393
  %396 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 1, i32 0
  %397 = load float, float* %396, align 8
  %398 = fadd float %385, %397
  %399 = fmul float %389, 3.000000e+00
  %400 = fsub float %398, %399
  %401 = fmul float %395, 3.000000e+00
  %402 = fadd float %400, %401
  %403 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 0, i32 0
  %404 = load float, float* %403, align 8
  %405 = fadd float %373, %404
  %406 = fmul float %377, 3.000000e+00
  %407 = fsub float %405, %406
  %408 = fmul float %383, 3.000000e+00
  %409 = fadd float %408, %407
  store float %409, float* %363, align 4
  store float %402, float* %364, align 4
  %410 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 7, i32 0, i32 0
  store float %383, float* %410, align 4
  %411 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 7, i32 0, i32 1
  store float %395, float* %411, align 4
  %412 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 8, i32 0, i32 0
  store float %377, float* %412, align 4
  %413 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 8, i32 0, i32 1
  store float %389, float* %413, align 4
  %414 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 9, i32 0, i32 0
  store float %373, float* %414, align 4
  %415 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 9, i32 0, i32 1
  store float %385, float* %415, align 4
  %416 = icmp ult i64 %278, 9
  br i1 %416, label %417, label %418, !prof !15

417:                                              ; preds = %371
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !noalias !29, !srcloc !27
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !noalias !29, !srcloc !28
  unreachable

418:                                              ; preds = %371
  %419 = add nsw i64 %278, -9
  %420 = icmp ult i64 %419, 4
  br i1 %420, label %421, label %422, !prof !15

421:                                              ; preds = %418
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #10, !noalias !29, !srcloc !19
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #10, !noalias !29, !srcloc !20
  unreachable

422:                                              ; preds = %418
  %423 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 0, i32 3
  %424 = load float, float* %423, align 4
  %425 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 0, i32 2
  %426 = load float, float* %425, align 8
  %427 = fdiv float %426, 3.000000e+00
  %428 = fadd float %424, %427
  %429 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 0, i32 1
  %430 = load float, float* %429, align 4
  %431 = fdiv float %430, 3.000000e+00
  %432 = fsub float %431, %424
  %433 = fmul float %428, 2.000000e+00
  %434 = fadd float %433, %432
  %435 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 1, i32 3
  %436 = load float, float* %435, align 4
  %437 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 1, i32 2
  %438 = load float, float* %437, align 8
  %439 = fdiv float %438, 3.000000e+00
  %440 = fadd float %436, %439
  %441 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 1, i32 1
  %442 = load float, float* %441, align 4
  %443 = fdiv float %442, 3.000000e+00
  %444 = fsub float %443, %436
  %445 = fmul float %440, 2.000000e+00
  %446 = fadd float %445, %444
  %447 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 1, i32 0
  %448 = load float, float* %447, align 8
  %449 = fadd float %436, %448
  %450 = fmul float %440, 3.000000e+00
  %451 = fsub float %449, %450
  %452 = fmul float %446, 3.000000e+00
  %453 = fadd float %451, %452
  %454 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 0, i32 0
  %455 = load float, float* %454, align 8
  %456 = fadd float %424, %455
  %457 = fmul float %428, 3.000000e+00
  %458 = fsub float %456, %457
  %459 = fmul float %434, 3.000000e+00
  %460 = fadd float %459, %458
  store float %460, float* %414, align 4
  store float %453, float* %415, align 4
  %461 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 10, i32 0, i32 0
  store float %434, float* %461, align 4
  %462 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 10, i32 0, i32 1
  store float %446, float* %462, align 4
  %463 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 11, i32 0, i32 0
  store float %428, float* %463, align 4
  %464 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 11, i32 0, i32 1
  store float %440, float* %464, align 4
  %465 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 12, i32 0, i32 0
  store float %424, float* %465, align 4
  %466 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %282, i64 12, i32 0, i32 1
  store float %436, float* %466, align 4
  %467 = bitcast i16* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %467) #10
  store i16 1026, i16* %12, align 2
  %468 = getelementptr inbounds %"struct.(anonymous namespace)::CPDF_PatchDrawer", %"struct.(anonymous namespace)::CPDF_PatchDrawer"* %0, i64 0, i32 3
  %469 = load i32, i32* %468, align 8
  %470 = icmp eq i32 %469, 0
  br i1 %470, label %473, label %471

471:                                              ; preds = %422
  %472 = getelementptr inbounds %struct.CFX_FillRenderOptions, %struct.CFX_FillRenderOptions* %13, i64 0, i32 1
  store i8 6, i8* %472, align 1
  br label %473

473:                                              ; preds = %422, %471
  %474 = getelementptr inbounds %"struct.(anonymous namespace)::CPDF_PatchDrawer", %"struct.(anonymous namespace)::CPDF_PatchDrawer"* %0, i64 0, i32 2
  %475 = load %class.CFX_RenderDevice*, %class.CFX_RenderDevice** %474, align 8
  %476 = getelementptr inbounds %"struct.(anonymous namespace)::CPDF_PatchDrawer", %"struct.(anonymous namespace)::CPDF_PatchDrawer"* %0, i64 0, i32 4
  %477 = load i32, i32* %476, align 4
  %478 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::Coon_Color"], [4 x %"struct.(anonymous namespace)::Coon_Color"]* %10, i64 0, i64 0, i32 0, i64 0
  %479 = load i32, i32* %478, align 16
  %480 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::Coon_Color"], [4 x %"struct.(anonymous namespace)::Coon_Color"]* %10, i64 0, i64 0, i32 0, i64 1
  %481 = load i32, i32* %480, align 4
  %482 = getelementptr inbounds [4 x %"struct.(anonymous namespace)::Coon_Color"], [4 x %"struct.(anonymous namespace)::Coon_Color"]* %10, i64 0, i64 0, i32 0, i64 2
  %483 = load i32, i32* %482, align 8
  %484 = shl i32 %477, 24
  %485 = shl i32 %479, 16
  %486 = or i32 %485, %484
  %487 = shl i32 %481, 8
  %488 = or i32 %486, %487
  %489 = or i32 %488, %483
  %490 = call zeroext i1 @_ZN16CFX_RenderDevice8DrawPathEPK12CFX_PathDataPK10CFX_MatrixPK18CFX_GraphStateDatajjRK21CFX_FillRenderOptions(%class.CFX_RenderDevice* %475, %class.CFX_PathData* %271, %class.CFX_Matrix* null, %class.CFX_GraphStateData* null, i32 %489, i32 0, %struct.CFX_FillRenderOptions* nonnull dereferenceable(2) %13) #10
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %467) #10
  br label %1289

491:                                              ; preds = %174
  %492 = and i1 %263, %266
  br i1 %492, label %493, label %658

493:                                              ; preds = %491
  %494 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %494) #10
  %495 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %495, i8 -1, i64 32, i1 false)
  call fastcc void @_ZN12_GLOBAL__N_111Coon_Bezier14BezierInterpolERS0_S1_S1_S1_(%"struct.(anonymous namespace)::Coon_Bezier"* nonnull %14, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull dereferenceable(32) %7, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull dereferenceable(32) %8, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull dereferenceable(32) %5, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull dereferenceable(32) %6)
  %496 = shl nsw i32 %2, 1
  %497 = shl nsw i32 %4, 1
  %498 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %15, i64 0, i32 0, i32 2
  %499 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %15, i64 0, i32 1, i32 2
  %500 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 0, i32 0
  %501 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 0, i32 1
  %502 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %7 to <2 x float>*
  %503 = load <2 x float>, <2 x float>* %502, align 8, !noalias !32
  %504 = fmul <2 x float> %503, <float 1.250000e-01, float 2.500000e-01>
  %505 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 0, i32 2
  %506 = load float, float* %505, align 8, !noalias !32
  %507 = fmul float %506, 5.000000e-01
  %508 = insertelement <2 x float> undef, float %507, i32 0
  %509 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 0, i32 3
  %510 = load float, float* %509, align 4, !noalias !32
  %511 = insertelement <2 x float> %508, float %510, i32 1
  %512 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %15 to <2 x float>*
  store <2 x float> %504, <2 x float>* %512, align 8, !alias.scope !32
  %513 = bitcast float* %498 to <2 x float>*
  store <2 x float> %511, <2 x float>* %513, align 8, !alias.scope !32
  %514 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 1, i32 0
  %515 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 1, i32 1
  %516 = bitcast float* %514 to <2 x float>*
  %517 = load <2 x float>, <2 x float>* %516, align 8, !noalias !32
  %518 = fmul <2 x float> %517, <float 1.250000e-01, float 2.500000e-01>
  %519 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 1, i32 2
  %520 = load float, float* %519, align 8, !noalias !32
  %521 = fmul float %520, 5.000000e-01
  %522 = insertelement <2 x float> undef, float %521, i32 0
  %523 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 1, i32 3
  %524 = load float, float* %523, align 4, !noalias !32
  %525 = insertelement <2 x float> %522, float %524, i32 1
  %526 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %15, i64 0, i32 1
  %527 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %526 to <2 x float>*
  store <2 x float> %518, <2 x float>* %527, align 8, !alias.scope !32
  %528 = bitcast float* %499 to <2 x float>*
  store <2 x float> %525, <2 x float>* %528, align 8, !alias.scope !32
  %529 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %16, i64 0, i32 0, i32 2
  %530 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %16, i64 0, i32 1, i32 2
  %531 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 0, i32 0
  %532 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 0, i32 1
  %533 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %8 to <2 x float>*
  %534 = load <2 x float>, <2 x float>* %533, align 8, !noalias !35
  %535 = fmul <2 x float> %534, <float 1.250000e-01, float 2.500000e-01>
  %536 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 0, i32 2
  %537 = load float, float* %536, align 8, !noalias !35
  %538 = fmul float %537, 5.000000e-01
  %539 = insertelement <2 x float> undef, float %538, i32 0
  %540 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 0, i32 3
  %541 = load float, float* %540, align 4, !noalias !35
  %542 = insertelement <2 x float> %539, float %541, i32 1
  %543 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %16 to <2 x float>*
  store <2 x float> %535, <2 x float>* %543, align 8, !alias.scope !35
  %544 = bitcast float* %529 to <2 x float>*
  store <2 x float> %542, <2 x float>* %544, align 8, !alias.scope !35
  %545 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 1, i32 0
  %546 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 1, i32 1
  %547 = bitcast float* %545 to <2 x float>*
  %548 = load <2 x float>, <2 x float>* %547, align 8, !noalias !35
  %549 = fmul <2 x float> %548, <float 1.250000e-01, float 2.500000e-01>
  %550 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 1, i32 2
  %551 = load float, float* %550, align 8, !noalias !35
  %552 = fmul float %551, 5.000000e-01
  %553 = insertelement <2 x float> undef, float %552, i32 0
  %554 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 1, i32 3
  %555 = load float, float* %554, align 4, !noalias !35
  %556 = insertelement <2 x float> %553, float %555, i32 1
  %557 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %16, i64 0, i32 1
  %558 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %557 to <2 x float>*
  store <2 x float> %549, <2 x float>* %558, align 8, !alias.scope !35
  %559 = bitcast float* %530 to <2 x float>*
  store <2 x float> %556, <2 x float>* %559, align 8, !alias.scope !35
  call fastcc void @_ZN12_GLOBAL__N_116CPDF_PatchDrawer4DrawEiiiiNS_11Coon_BezierES1_S1_S1_(%"struct.(anonymous namespace)::CPDF_PatchDrawer"* %0, i32 %1, i32 %496, i32 %3, i32 %497, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %5, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %14, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %15, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %16)
  %560 = or i32 %497, 1
  %561 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %561, i8* nonnull align 8 %494, i64 32, i1 false)
  %562 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %18 to i8*
  %563 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %562, i8* nonnull align 8 %563, i64 32, i1 false)
  %564 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %19, i64 0, i32 0, i32 2
  %565 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %19, i64 0, i32 1, i32 2
  %566 = load float, float* %500, align 8, !noalias !38
  %567 = fmul float %566, 1.250000e-01
  %568 = insertelement <2 x float> undef, float %567, i32 0
  %569 = fmul float %566, 3.000000e+00
  %570 = fmul float %569, 1.250000e-01
  %571 = load float, float* %501, align 4, !noalias !38
  %572 = fmul float %571, 2.500000e-01
  %573 = fadd float %570, %572
  %574 = insertelement <2 x float> %568, float %573, i32 1
  %575 = fmul float %571, 5.000000e-01
  %576 = fadd float %570, %575
  %577 = load float, float* %505, align 8, !noalias !38
  %578 = fmul float %577, 5.000000e-01
  %579 = fadd float %576, %578
  %580 = insertelement <2 x float> undef, float %579, i32 0
  %581 = fadd float %567, %572
  %582 = fadd float %581, %578
  %583 = load float, float* %509, align 4, !noalias !38
  %584 = fadd float %583, %582
  %585 = insertelement <2 x float> %580, float %584, i32 1
  %586 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %19 to <2 x float>*
  store <2 x float> %574, <2 x float>* %586, align 8, !alias.scope !38
  %587 = bitcast float* %564 to <2 x float>*
  store <2 x float> %585, <2 x float>* %587, align 8, !alias.scope !38
  %588 = load float, float* %514, align 8, !noalias !38
  %589 = fmul float %588, 1.250000e-01
  %590 = insertelement <2 x float> undef, float %589, i32 0
  %591 = fmul float %588, 3.000000e+00
  %592 = fmul float %591, 1.250000e-01
  %593 = load float, float* %515, align 4, !noalias !38
  %594 = fmul float %593, 2.500000e-01
  %595 = fadd float %592, %594
  %596 = insertelement <2 x float> %590, float %595, i32 1
  %597 = fmul float %593, 5.000000e-01
  %598 = fadd float %592, %597
  %599 = load float, float* %519, align 8, !noalias !38
  %600 = fmul float %599, 5.000000e-01
  %601 = fadd float %598, %600
  %602 = insertelement <2 x float> undef, float %601, i32 0
  %603 = fadd float %589, %594
  %604 = fadd float %603, %600
  %605 = load float, float* %523, align 4, !noalias !38
  %606 = fadd float %605, %604
  %607 = insertelement <2 x float> %602, float %606, i32 1
  %608 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %19, i64 0, i32 1
  %609 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %608 to <2 x float>*
  store <2 x float> %596, <2 x float>* %609, align 8, !alias.scope !38
  %610 = bitcast float* %565 to <2 x float>*
  store <2 x float> %607, <2 x float>* %610, align 8, !alias.scope !38
  %611 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %20, i64 0, i32 0, i32 2
  %612 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %20, i64 0, i32 1, i32 2
  %613 = load float, float* %531, align 8, !noalias !41
  %614 = fmul float %613, 1.250000e-01
  %615 = insertelement <2 x float> undef, float %614, i32 0
  %616 = fmul float %613, 3.000000e+00
  %617 = fmul float %616, 1.250000e-01
  %618 = load float, float* %532, align 4, !noalias !41
  %619 = fmul float %618, 2.500000e-01
  %620 = fadd float %617, %619
  %621 = insertelement <2 x float> %615, float %620, i32 1
  %622 = fmul float %618, 5.000000e-01
  %623 = fadd float %617, %622
  %624 = load float, float* %536, align 8, !noalias !41
  %625 = fmul float %624, 5.000000e-01
  %626 = fadd float %623, %625
  %627 = insertelement <2 x float> undef, float %626, i32 0
  %628 = fadd float %614, %619
  %629 = fadd float %628, %625
  %630 = load float, float* %540, align 4, !noalias !41
  %631 = fadd float %630, %629
  %632 = insertelement <2 x float> %627, float %631, i32 1
  %633 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %20 to <2 x float>*
  store <2 x float> %621, <2 x float>* %633, align 8, !alias.scope !41
  %634 = bitcast float* %611 to <2 x float>*
  store <2 x float> %632, <2 x float>* %634, align 8, !alias.scope !41
  %635 = load float, float* %545, align 8, !noalias !41
  %636 = fmul float %635, 1.250000e-01
  %637 = insertelement <2 x float> undef, float %636, i32 0
  %638 = fmul float %635, 3.000000e+00
  %639 = fmul float %638, 1.250000e-01
  %640 = load float, float* %546, align 4, !noalias !41
  %641 = fmul float %640, 2.500000e-01
  %642 = fadd float %639, %641
  %643 = insertelement <2 x float> %637, float %642, i32 1
  %644 = fmul float %640, 5.000000e-01
  %645 = fadd float %639, %644
  %646 = load float, float* %550, align 8, !noalias !41
  %647 = fmul float %646, 5.000000e-01
  %648 = fadd float %645, %647
  %649 = insertelement <2 x float> undef, float %648, i32 0
  %650 = fadd float %636, %641
  %651 = fadd float %650, %647
  %652 = load float, float* %554, align 4, !noalias !41
  %653 = fadd float %652, %651
  %654 = insertelement <2 x float> %649, float %653, i32 1
  %655 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %20, i64 0, i32 1
  %656 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %655 to <2 x float>*
  store <2 x float> %643, <2 x float>* %656, align 8, !alias.scope !41
  %657 = bitcast float* %612 to <2 x float>*
  store <2 x float> %654, <2 x float>* %657, align 8, !alias.scope !41
  call fastcc void @_ZN12_GLOBAL__N_116CPDF_PatchDrawer4DrawEiiiiNS_11Coon_BezierES1_S1_S1_(%"struct.(anonymous namespace)::CPDF_PatchDrawer"* %0, i32 %1, i32 %496, i32 %3, i32 %560, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %17, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %18, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %19, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %20)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %494) #10
  br label %1289

658:                                              ; preds = %491
  %659 = and i1 %264, %268
  br i1 %659, label %660, label %808

660:                                              ; preds = %658
  %661 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %661) #10
  %662 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %662, i8 -1, i64 32, i1 false)
  call fastcc void @_ZN12_GLOBAL__N_111Coon_Bezier14BezierInterpolERS0_S1_S1_S1_(%"struct.(anonymous namespace)::Coon_Bezier"* nonnull %21, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull dereferenceable(32) %5, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull dereferenceable(32) %6, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull dereferenceable(32) %7, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull dereferenceable(32) %8)
  %663 = shl nsw i32 %1, 1
  %664 = shl nsw i32 %3, 1
  %665 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %22, i64 0, i32 0, i32 2
  %666 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %22, i64 0, i32 1, i32 2
  %667 = fmul <2 x float> %47, <float 1.250000e-01, float 2.500000e-01>
  %668 = fmul float %51, 5.000000e-01
  %669 = insertelement <2 x float> undef, float %668, i32 0
  %670 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %5, i64 0, i32 0, i32 3
  %671 = load float, float* %670, align 4, !noalias !44
  %672 = insertelement <2 x float> %669, float %671, i32 1
  %673 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %22 to <2 x float>*
  store <2 x float> %667, <2 x float>* %673, align 8, !alias.scope !45
  %674 = bitcast float* %665 to <2 x float>*
  store <2 x float> %672, <2 x float>* %674, align 8, !alias.scope !45
  %675 = fmul <2 x float> %55, <float 1.250000e-01, float 2.500000e-01>
  %676 = fmul float %62, 5.000000e-01
  %677 = insertelement <2 x float> undef, float %676, i32 0
  %678 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %5, i64 0, i32 1, i32 3
  %679 = load float, float* %678, align 4, !noalias !44
  %680 = insertelement <2 x float> %677, float %679, i32 1
  %681 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %22, i64 0, i32 1
  %682 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %681 to <2 x float>*
  store <2 x float> %675, <2 x float>* %682, align 8, !alias.scope !45
  %683 = bitcast float* %666 to <2 x float>*
  store <2 x float> %680, <2 x float>* %683, align 8, !alias.scope !45
  %684 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %23, i64 0, i32 0, i32 2
  %685 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %23, i64 0, i32 1, i32 2
  %686 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 0, i32 0
  %687 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 0, i32 1
  %688 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %6 to <2 x float>*
  %689 = load <2 x float>, <2 x float>* %688, align 8, !noalias !48
  %690 = fmul <2 x float> %689, <float 1.250000e-01, float 2.500000e-01>
  %691 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 0, i32 2
  %692 = load float, float* %691, align 8, !noalias !48
  %693 = fmul float %692, 5.000000e-01
  %694 = insertelement <2 x float> undef, float %693, i32 0
  %695 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 0, i32 3
  %696 = load float, float* %695, align 4, !noalias !48
  %697 = insertelement <2 x float> %694, float %696, i32 1
  %698 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %23 to <2 x float>*
  store <2 x float> %690, <2 x float>* %698, align 8, !alias.scope !48
  %699 = bitcast float* %684 to <2 x float>*
  store <2 x float> %697, <2 x float>* %699, align 8, !alias.scope !48
  %700 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 1, i32 0
  %701 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 1, i32 1
  %702 = bitcast float* %700 to <2 x float>*
  %703 = load <2 x float>, <2 x float>* %702, align 8, !noalias !48
  %704 = fmul <2 x float> %703, <float 1.250000e-01, float 2.500000e-01>
  %705 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 1, i32 2
  %706 = load float, float* %705, align 8, !noalias !48
  %707 = fmul float %706, 5.000000e-01
  %708 = insertelement <2 x float> undef, float %707, i32 0
  %709 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 1, i32 3
  %710 = load float, float* %709, align 4, !noalias !48
  %711 = insertelement <2 x float> %708, float %710, i32 1
  %712 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %23, i64 0, i32 1
  %713 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %712 to <2 x float>*
  store <2 x float> %704, <2 x float>* %713, align 8, !alias.scope !48
  %714 = bitcast float* %685 to <2 x float>*
  store <2 x float> %711, <2 x float>* %714, align 8, !alias.scope !48
  call fastcc void @_ZN12_GLOBAL__N_116CPDF_PatchDrawer4DrawEiiiiNS_11Coon_BezierES1_S1_S1_(%"struct.(anonymous namespace)::CPDF_PatchDrawer"* %0, i32 %663, i32 %2, i32 %664, i32 %4, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %22, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %23, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %7, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %21)
  %715 = or i32 %664, 1
  %716 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %24, i64 0, i32 0, i32 2
  %717 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %24, i64 0, i32 1, i32 2
  %718 = load float, float* %44, align 8, !noalias !51
  %719 = fmul float %718, 1.250000e-01
  %720 = insertelement <2 x float> undef, float %719, i32 0
  %721 = fmul float %718, 3.000000e+00
  %722 = fmul float %721, 1.250000e-01
  %723 = load float, float* %45, align 4, !noalias !51
  %724 = fmul float %723, 2.500000e-01
  %725 = fadd float %722, %724
  %726 = insertelement <2 x float> %720, float %725, i32 1
  %727 = fmul float %723, 5.000000e-01
  %728 = fadd float %722, %727
  %729 = load float, float* %50, align 8, !noalias !51
  %730 = fmul float %729, 5.000000e-01
  %731 = fadd float %728, %730
  %732 = insertelement <2 x float> undef, float %731, i32 0
  %733 = fadd float %719, %724
  %734 = fadd float %733, %730
  %735 = fadd float %671, %734
  %736 = insertelement <2 x float> %732, float %735, i32 1
  %737 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %24 to <2 x float>*
  store <2 x float> %726, <2 x float>* %737, align 8, !alias.scope !51
  %738 = bitcast float* %716 to <2 x float>*
  store <2 x float> %736, <2 x float>* %738, align 8, !alias.scope !51
  %739 = load float, float* %52, align 8, !noalias !51
  %740 = fmul float %739, 1.250000e-01
  %741 = insertelement <2 x float> undef, float %740, i32 0
  %742 = fmul float %739, 3.000000e+00
  %743 = fmul float %742, 1.250000e-01
  %744 = load float, float* %53, align 4, !noalias !51
  %745 = fmul float %744, 2.500000e-01
  %746 = fadd float %743, %745
  %747 = insertelement <2 x float> %741, float %746, i32 1
  %748 = fmul float %744, 5.000000e-01
  %749 = fadd float %743, %748
  %750 = load float, float* %61, align 8, !noalias !51
  %751 = fmul float %750, 5.000000e-01
  %752 = fadd float %749, %751
  %753 = insertelement <2 x float> undef, float %752, i32 0
  %754 = fadd float %740, %745
  %755 = fadd float %754, %751
  %756 = fadd float %679, %755
  %757 = insertelement <2 x float> %753, float %756, i32 1
  %758 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %24, i64 0, i32 1
  %759 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %758 to <2 x float>*
  store <2 x float> %747, <2 x float>* %759, align 8, !alias.scope !51
  %760 = bitcast float* %717 to <2 x float>*
  store <2 x float> %757, <2 x float>* %760, align 8, !alias.scope !51
  %761 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %25, i64 0, i32 0, i32 2
  %762 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %25, i64 0, i32 1, i32 2
  %763 = load float, float* %686, align 8, !noalias !54
  %764 = fmul float %763, 1.250000e-01
  %765 = insertelement <2 x float> undef, float %764, i32 0
  %766 = fmul float %763, 3.000000e+00
  %767 = fmul float %766, 1.250000e-01
  %768 = load float, float* %687, align 4, !noalias !54
  %769 = fmul float %768, 2.500000e-01
  %770 = fadd float %767, %769
  %771 = insertelement <2 x float> %765, float %770, i32 1
  %772 = fmul float %768, 5.000000e-01
  %773 = fadd float %767, %772
  %774 = load float, float* %691, align 8, !noalias !54
  %775 = fmul float %774, 5.000000e-01
  %776 = fadd float %773, %775
  %777 = insertelement <2 x float> undef, float %776, i32 0
  %778 = fadd float %764, %769
  %779 = fadd float %778, %775
  %780 = load float, float* %695, align 4, !noalias !54
  %781 = fadd float %780, %779
  %782 = insertelement <2 x float> %777, float %781, i32 1
  %783 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %25 to <2 x float>*
  store <2 x float> %771, <2 x float>* %783, align 8, !alias.scope !54
  %784 = bitcast float* %761 to <2 x float>*
  store <2 x float> %782, <2 x float>* %784, align 8, !alias.scope !54
  %785 = load float, float* %700, align 8, !noalias !54
  %786 = fmul float %785, 1.250000e-01
  %787 = insertelement <2 x float> undef, float %786, i32 0
  %788 = fmul float %785, 3.000000e+00
  %789 = fmul float %788, 1.250000e-01
  %790 = load float, float* %701, align 4, !noalias !54
  %791 = fmul float %790, 2.500000e-01
  %792 = fadd float %789, %791
  %793 = insertelement <2 x float> %787, float %792, i32 1
  %794 = fmul float %790, 5.000000e-01
  %795 = fadd float %789, %794
  %796 = load float, float* %705, align 8, !noalias !54
  %797 = fmul float %796, 5.000000e-01
  %798 = fadd float %795, %797
  %799 = insertelement <2 x float> undef, float %798, i32 0
  %800 = fadd float %786, %791
  %801 = fadd float %800, %797
  %802 = load float, float* %709, align 4, !noalias !54
  %803 = fadd float %802, %801
  %804 = insertelement <2 x float> %799, float %803, i32 1
  %805 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %25, i64 0, i32 1
  %806 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %805 to <2 x float>*
  store <2 x float> %793, <2 x float>* %806, align 8, !alias.scope !54
  %807 = bitcast float* %762 to <2 x float>*
  store <2 x float> %804, <2 x float>* %807, align 8, !alias.scope !54
  call fastcc void @_ZN12_GLOBAL__N_116CPDF_PatchDrawer4DrawEiiiiNS_11Coon_BezierES1_S1_S1_(%"struct.(anonymous namespace)::CPDF_PatchDrawer"* %0, i32 %663, i32 %2, i32 %715, i32 %4, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %24, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %25, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %21, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %8)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %661) #10
  br label %1289

808:                                              ; preds = %658
  %809 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %809) #10
  %810 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %26, i64 0, i32 0, i32 0
  %811 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %26, i64 0, i32 0, i32 1
  %812 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %26, i64 0, i32 0, i32 2
  %813 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %26, i64 0, i32 0, i32 3
  %814 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %26, i64 0, i32 1, i32 0
  %815 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %26, i64 0, i32 1, i32 1
  %816 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %26, i64 0, i32 1, i32 2
  %817 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %26, i64 0, i32 1, i32 3
  %818 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %27 to i8*
  %819 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %819, i8 -1, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %818) #10
  %820 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %27, i64 0, i32 0, i32 0
  %821 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %27, i64 0, i32 0, i32 1
  %822 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %27, i64 0, i32 0, i32 2
  %823 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %27, i64 0, i32 0, i32 3
  %824 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %27, i64 0, i32 1, i32 0
  %825 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %27, i64 0, i32 1, i32 1
  %826 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %27, i64 0, i32 1, i32 2
  %827 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %27, i64 0, i32 1, i32 3
  %828 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %828, i8 -1, i64 32, i1 false)
  call fastcc void @_ZN12_GLOBAL__N_111Coon_Bezier14BezierInterpolERS0_S1_S1_S1_(%"struct.(anonymous namespace)::Coon_Bezier"* nonnull %26, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull dereferenceable(32) %7, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull dereferenceable(32) %8, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull dereferenceable(32) %5, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull dereferenceable(32) %6)
  call fastcc void @_ZN12_GLOBAL__N_111Coon_Bezier14BezierInterpolERS0_S1_S1_S1_(%"struct.(anonymous namespace)::Coon_Bezier"* nonnull %27, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull dereferenceable(32) %5, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull dereferenceable(32) %6, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull dereferenceable(32) %7, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull dereferenceable(32) %8)
  %829 = load float, float* %810, align 4, !noalias !57
  %830 = fmul float %829, 1.250000e-01
  %831 = insertelement <2 x float> undef, float %830, i32 0
  %832 = load float, float* %811, align 4, !noalias !57
  %833 = fmul float %832, 2.500000e-01
  %834 = insertelement <2 x float> %831, float %833, i32 1
  %835 = load float, float* %812, align 4, !noalias !57
  %836 = fmul float %835, 5.000000e-01
  %837 = insertelement <2 x float> undef, float %836, i32 0
  %838 = load float, float* %813, align 4, !noalias !57
  %839 = insertelement <2 x float> %837, float %838, i32 1
  %840 = load float, float* %814, align 4, !noalias !57
  %841 = fmul float %840, 1.250000e-01
  %842 = insertelement <2 x float> undef, float %841, i32 0
  %843 = load float, float* %815, align 4, !noalias !57
  %844 = fmul float %843, 2.500000e-01
  %845 = insertelement <2 x float> %842, float %844, i32 1
  %846 = load float, float* %816, align 4, !noalias !57
  %847 = fmul float %846, 5.000000e-01
  %848 = insertelement <2 x float> undef, float %847, i32 0
  %849 = load float, float* %817, align 4, !noalias !57
  %850 = insertelement <2 x float> %848, float %849, i32 1
  %851 = fmul float %829, 3.000000e+00
  %852 = fmul float %851, 1.250000e-01
  %853 = fadd float %852, %833
  %854 = insertelement <2 x float> %831, float %853, i32 1
  %855 = fmul float %832, 5.000000e-01
  %856 = fadd float %852, %855
  %857 = fadd float %856, %836
  %858 = insertelement <2 x float> undef, float %857, i32 0
  %859 = fadd float %830, %833
  %860 = fadd float %859, %836
  %861 = fadd float %838, %860
  %862 = insertelement <2 x float> %858, float %861, i32 1
  %863 = fmul float %840, 3.000000e+00
  %864 = fmul float %863, 1.250000e-01
  %865 = fadd float %864, %844
  %866 = insertelement <2 x float> %842, float %865, i32 1
  %867 = fmul float %843, 5.000000e-01
  %868 = fadd float %864, %867
  %869 = fadd float %868, %847
  %870 = insertelement <2 x float> undef, float %869, i32 0
  %871 = fadd float %841, %844
  %872 = fadd float %871, %847
  %873 = fadd float %849, %872
  %874 = insertelement <2 x float> %870, float %873, i32 1
  %875 = load float, float* %820, align 4, !noalias !60
  %876 = fmul float %875, 1.250000e-01
  %877 = insertelement <2 x float> undef, float %876, i32 0
  %878 = load float, float* %821, align 4, !noalias !60
  %879 = fmul float %878, 2.500000e-01
  %880 = insertelement <2 x float> %877, float %879, i32 1
  %881 = load float, float* %822, align 4, !noalias !60
  %882 = fmul float %881, 5.000000e-01
  %883 = insertelement <2 x float> undef, float %882, i32 0
  %884 = load float, float* %823, align 4, !noalias !60
  %885 = insertelement <2 x float> %883, float %884, i32 1
  %886 = load float, float* %824, align 4, !noalias !60
  %887 = fmul float %886, 1.250000e-01
  %888 = insertelement <2 x float> undef, float %887, i32 0
  %889 = load float, float* %825, align 4, !noalias !60
  %890 = fmul float %889, 2.500000e-01
  %891 = insertelement <2 x float> %888, float %890, i32 1
  %892 = load float, float* %826, align 4, !noalias !60
  %893 = fmul float %892, 5.000000e-01
  %894 = insertelement <2 x float> undef, float %893, i32 0
  %895 = load float, float* %827, align 4, !noalias !60
  %896 = insertelement <2 x float> %894, float %895, i32 1
  %897 = fmul float %875, 3.000000e+00
  %898 = fmul float %897, 1.250000e-01
  %899 = fadd float %898, %879
  %900 = insertelement <2 x float> %877, float %899, i32 1
  %901 = fmul float %878, 5.000000e-01
  %902 = fadd float %898, %901
  %903 = fadd float %902, %882
  %904 = insertelement <2 x float> undef, float %903, i32 0
  %905 = fadd float %876, %879
  %906 = fadd float %905, %882
  %907 = fadd float %884, %906
  %908 = insertelement <2 x float> %904, float %907, i32 1
  %909 = fmul float %886, 3.000000e+00
  %910 = fmul float %909, 1.250000e-01
  %911 = fadd float %910, %890
  %912 = insertelement <2 x float> %888, float %911, i32 1
  %913 = fmul float %889, 5.000000e-01
  %914 = fadd float %910, %913
  %915 = fadd float %914, %893
  %916 = insertelement <2 x float> undef, float %915, i32 0
  %917 = fadd float %887, %890
  %918 = fadd float %917, %893
  %919 = fadd float %895, %918
  %920 = insertelement <2 x float> %916, float %919, i32 1
  %921 = shl nsw i32 %1, 1
  %922 = shl nsw i32 %2, 1
  %923 = shl nsw i32 %3, 1
  %924 = shl nsw i32 %4, 1
  %925 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %28, i64 0, i32 0, i32 2
  %926 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %28, i64 0, i32 1, i32 2
  %927 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %5 to <2 x float>*
  %928 = load <2 x float>, <2 x float>* %927, align 8, !noalias !63
  %929 = fmul <2 x float> %928, <float 1.250000e-01, float 2.500000e-01>
  %930 = load float, float* %50, align 8, !noalias !63
  %931 = fmul float %930, 5.000000e-01
  %932 = insertelement <2 x float> undef, float %931, i32 0
  %933 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %5, i64 0, i32 0, i32 3
  %934 = load float, float* %933, align 4, !noalias !63
  %935 = insertelement <2 x float> %932, float %934, i32 1
  %936 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %28 to <2 x float>*
  store <2 x float> %929, <2 x float>* %936, align 8, !alias.scope !63
  %937 = bitcast float* %925 to <2 x float>*
  store <2 x float> %935, <2 x float>* %937, align 8, !alias.scope !63
  %938 = bitcast float* %52 to <2 x float>*
  %939 = load <2 x float>, <2 x float>* %938, align 8, !noalias !63
  %940 = fmul <2 x float> %939, <float 1.250000e-01, float 2.500000e-01>
  %941 = load float, float* %61, align 8, !noalias !63
  %942 = fmul float %941, 5.000000e-01
  %943 = insertelement <2 x float> undef, float %942, i32 0
  %944 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %5, i64 0, i32 1, i32 3
  %945 = load float, float* %944, align 4, !noalias !63
  %946 = insertelement <2 x float> %943, float %945, i32 1
  %947 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %28, i64 0, i32 1
  %948 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %947 to <2 x float>*
  store <2 x float> %940, <2 x float>* %948, align 8, !alias.scope !63
  %949 = bitcast float* %926 to <2 x float>*
  store <2 x float> %946, <2 x float>* %949, align 8, !alias.scope !63
  %950 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %29 to <2 x float>*
  store <2 x float> %834, <2 x float>* %950, align 8
  %951 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %29, i64 0, i32 0, i32 2
  %952 = bitcast float* %951 to <2 x float>*
  store <2 x float> %839, <2 x float>* %952, align 8
  %953 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %29, i64 0, i32 1
  %954 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %953 to <2 x float>*
  store <2 x float> %845, <2 x float>* %954, align 8
  %955 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %29, i64 0, i32 1, i32 2
  %956 = bitcast float* %955 to <2 x float>*
  store <2 x float> %850, <2 x float>* %956, align 8
  %957 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %30, i64 0, i32 0, i32 2
  %958 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %30, i64 0, i32 1, i32 2
  %959 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 0, i32 0
  %960 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 0, i32 1
  %961 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %7 to <2 x float>*
  %962 = load <2 x float>, <2 x float>* %961, align 8, !noalias !66
  %963 = fmul <2 x float> %962, <float 1.250000e-01, float 2.500000e-01>
  %964 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 0, i32 2
  %965 = load float, float* %964, align 8, !noalias !66
  %966 = fmul float %965, 5.000000e-01
  %967 = insertelement <2 x float> undef, float %966, i32 0
  %968 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 0, i32 3
  %969 = load float, float* %968, align 4, !noalias !66
  %970 = insertelement <2 x float> %967, float %969, i32 1
  %971 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %30 to <2 x float>*
  store <2 x float> %963, <2 x float>* %971, align 8, !alias.scope !66
  %972 = bitcast float* %957 to <2 x float>*
  store <2 x float> %970, <2 x float>* %972, align 8, !alias.scope !66
  %973 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 1, i32 0
  %974 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 1, i32 1
  %975 = bitcast float* %973 to <2 x float>*
  %976 = load <2 x float>, <2 x float>* %975, align 8, !noalias !66
  %977 = fmul <2 x float> %976, <float 1.250000e-01, float 2.500000e-01>
  %978 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 1, i32 2
  %979 = load float, float* %978, align 8, !noalias !66
  %980 = fmul float %979, 5.000000e-01
  %981 = insertelement <2 x float> undef, float %980, i32 0
  %982 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %7, i64 0, i32 1, i32 3
  %983 = load float, float* %982, align 4, !noalias !66
  %984 = insertelement <2 x float> %981, float %983, i32 1
  %985 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %30, i64 0, i32 1
  %986 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %985 to <2 x float>*
  store <2 x float> %977, <2 x float>* %986, align 8, !alias.scope !66
  %987 = bitcast float* %958 to <2 x float>*
  store <2 x float> %984, <2 x float>* %987, align 8, !alias.scope !66
  %988 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %31 to <2 x float>*
  store <2 x float> %880, <2 x float>* %988, align 8
  %989 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %31, i64 0, i32 0, i32 2
  %990 = bitcast float* %989 to <2 x float>*
  store <2 x float> %885, <2 x float>* %990, align 8
  %991 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %31, i64 0, i32 1
  %992 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %991 to <2 x float>*
  store <2 x float> %891, <2 x float>* %992, align 8
  %993 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %31, i64 0, i32 1, i32 2
  %994 = bitcast float* %993 to <2 x float>*
  store <2 x float> %896, <2 x float>* %994, align 8
  call fastcc void @_ZN12_GLOBAL__N_116CPDF_PatchDrawer4DrawEiiiiNS_11Coon_BezierES1_S1_S1_(%"struct.(anonymous namespace)::CPDF_PatchDrawer"* %0, i32 %921, i32 %922, i32 %923, i32 %924, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %28, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %29, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %30, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %31)
  %995 = or i32 %924, 1
  %996 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %32 to <2 x float>*
  store <2 x float> %834, <2 x float>* %996, align 8
  %997 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %32, i64 0, i32 0, i32 2
  %998 = bitcast float* %997 to <2 x float>*
  store <2 x float> %839, <2 x float>* %998, align 8
  %999 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %32, i64 0, i32 1
  %1000 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %999 to <2 x float>*
  store <2 x float> %845, <2 x float>* %1000, align 8
  %1001 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %32, i64 0, i32 1, i32 2
  %1002 = bitcast float* %1001 to <2 x float>*
  store <2 x float> %850, <2 x float>* %1002, align 8
  %1003 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %33, i64 0, i32 0, i32 2
  %1004 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %33, i64 0, i32 1, i32 2
  %1005 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 0, i32 0
  %1006 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 0, i32 1
  %1007 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %6 to <2 x float>*
  %1008 = load <2 x float>, <2 x float>* %1007, align 8, !noalias !69
  %1009 = fmul <2 x float> %1008, <float 1.250000e-01, float 2.500000e-01>
  %1010 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 0, i32 2
  %1011 = load float, float* %1010, align 8, !noalias !69
  %1012 = fmul float %1011, 5.000000e-01
  %1013 = insertelement <2 x float> undef, float %1012, i32 0
  %1014 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 0, i32 3
  %1015 = load float, float* %1014, align 4, !noalias !69
  %1016 = insertelement <2 x float> %1013, float %1015, i32 1
  %1017 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %33 to <2 x float>*
  store <2 x float> %1009, <2 x float>* %1017, align 8, !alias.scope !69
  %1018 = bitcast float* %1003 to <2 x float>*
  store <2 x float> %1016, <2 x float>* %1018, align 8, !alias.scope !69
  %1019 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 1, i32 0
  %1020 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 1, i32 1
  %1021 = bitcast float* %1019 to <2 x float>*
  %1022 = load <2 x float>, <2 x float>* %1021, align 8, !noalias !69
  %1023 = fmul <2 x float> %1022, <float 1.250000e-01, float 2.500000e-01>
  %1024 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 1, i32 2
  %1025 = load float, float* %1024, align 8, !noalias !69
  %1026 = fmul float %1025, 5.000000e-01
  %1027 = insertelement <2 x float> undef, float %1026, i32 0
  %1028 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %6, i64 0, i32 1, i32 3
  %1029 = load float, float* %1028, align 4, !noalias !69
  %1030 = insertelement <2 x float> %1027, float %1029, i32 1
  %1031 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %33, i64 0, i32 1
  %1032 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %1031 to <2 x float>*
  store <2 x float> %1023, <2 x float>* %1032, align 8, !alias.scope !69
  %1033 = bitcast float* %1004 to <2 x float>*
  store <2 x float> %1030, <2 x float>* %1033, align 8, !alias.scope !69
  %1034 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %34, i64 0, i32 0, i32 2
  %1035 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %34, i64 0, i32 1, i32 2
  %1036 = load float, float* %959, align 8, !noalias !72
  %1037 = fmul float %1036, 1.250000e-01
  %1038 = insertelement <2 x float> undef, float %1037, i32 0
  %1039 = fmul float %1036, 3.000000e+00
  %1040 = fmul float %1039, 1.250000e-01
  %1041 = load float, float* %960, align 4, !noalias !72
  %1042 = fmul float %1041, 2.500000e-01
  %1043 = fadd float %1040, %1042
  %1044 = insertelement <2 x float> %1038, float %1043, i32 1
  %1045 = fmul float %1041, 5.000000e-01
  %1046 = fadd float %1040, %1045
  %1047 = load float, float* %964, align 8, !noalias !72
  %1048 = fmul float %1047, 5.000000e-01
  %1049 = fadd float %1046, %1048
  %1050 = insertelement <2 x float> undef, float %1049, i32 0
  %1051 = fadd float %1037, %1042
  %1052 = fadd float %1051, %1048
  %1053 = load float, float* %968, align 4, !noalias !72
  %1054 = fadd float %1053, %1052
  %1055 = insertelement <2 x float> %1050, float %1054, i32 1
  %1056 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %34 to <2 x float>*
  store <2 x float> %1044, <2 x float>* %1056, align 8, !alias.scope !72
  %1057 = bitcast float* %1034 to <2 x float>*
  store <2 x float> %1055, <2 x float>* %1057, align 8, !alias.scope !72
  %1058 = load float, float* %973, align 8, !noalias !72
  %1059 = fmul float %1058, 1.250000e-01
  %1060 = insertelement <2 x float> undef, float %1059, i32 0
  %1061 = fmul float %1058, 3.000000e+00
  %1062 = fmul float %1061, 1.250000e-01
  %1063 = load float, float* %974, align 4, !noalias !72
  %1064 = fmul float %1063, 2.500000e-01
  %1065 = fadd float %1062, %1064
  %1066 = insertelement <2 x float> %1060, float %1065, i32 1
  %1067 = fmul float %1063, 5.000000e-01
  %1068 = fadd float %1062, %1067
  %1069 = load float, float* %978, align 8, !noalias !72
  %1070 = fmul float %1069, 5.000000e-01
  %1071 = fadd float %1068, %1070
  %1072 = insertelement <2 x float> undef, float %1071, i32 0
  %1073 = fadd float %1059, %1064
  %1074 = fadd float %1073, %1070
  %1075 = load float, float* %982, align 4, !noalias !72
  %1076 = fadd float %1075, %1074
  %1077 = insertelement <2 x float> %1072, float %1076, i32 1
  %1078 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %34, i64 0, i32 1
  %1079 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %1078 to <2 x float>*
  store <2 x float> %1066, <2 x float>* %1079, align 8, !alias.scope !72
  %1080 = bitcast float* %1035 to <2 x float>*
  store <2 x float> %1077, <2 x float>* %1080, align 8, !alias.scope !72
  %1081 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %35 to <2 x float>*
  store <2 x float> %900, <2 x float>* %1081, align 8
  %1082 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %35, i64 0, i32 0, i32 2
  %1083 = bitcast float* %1082 to <2 x float>*
  store <2 x float> %908, <2 x float>* %1083, align 8
  %1084 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %35, i64 0, i32 1
  %1085 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %1084 to <2 x float>*
  store <2 x float> %912, <2 x float>* %1085, align 8
  %1086 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %35, i64 0, i32 1, i32 2
  %1087 = bitcast float* %1086 to <2 x float>*
  store <2 x float> %920, <2 x float>* %1087, align 8
  call fastcc void @_ZN12_GLOBAL__N_116CPDF_PatchDrawer4DrawEiiiiNS_11Coon_BezierES1_S1_S1_(%"struct.(anonymous namespace)::CPDF_PatchDrawer"* %0, i32 %921, i32 %922, i32 %923, i32 %995, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %32, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %33, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %34, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %35)
  %1088 = or i32 %923, 1
  %1089 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %36, i64 0, i32 0, i32 2
  %1090 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %36, i64 0, i32 1, i32 2
  %1091 = load float, float* %44, align 8, !noalias !75
  %1092 = fmul float %1091, 1.250000e-01
  %1093 = insertelement <2 x float> undef, float %1092, i32 0
  %1094 = fmul float %1091, 3.000000e+00
  %1095 = fmul float %1094, 1.250000e-01
  %1096 = load float, float* %45, align 4, !noalias !75
  %1097 = fmul float %1096, 2.500000e-01
  %1098 = fadd float %1095, %1097
  %1099 = insertelement <2 x float> %1093, float %1098, i32 1
  %1100 = fmul float %1096, 5.000000e-01
  %1101 = fadd float %1095, %1100
  %1102 = load float, float* %50, align 8, !noalias !75
  %1103 = fmul float %1102, 5.000000e-01
  %1104 = fadd float %1101, %1103
  %1105 = insertelement <2 x float> undef, float %1104, i32 0
  %1106 = fadd float %1092, %1097
  %1107 = fadd float %1106, %1103
  %1108 = load float, float* %933, align 4, !noalias !75
  %1109 = fadd float %1108, %1107
  %1110 = insertelement <2 x float> %1105, float %1109, i32 1
  %1111 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %36 to <2 x float>*
  store <2 x float> %1099, <2 x float>* %1111, align 8, !alias.scope !75
  %1112 = bitcast float* %1089 to <2 x float>*
  store <2 x float> %1110, <2 x float>* %1112, align 8, !alias.scope !75
  %1113 = load float, float* %52, align 8, !noalias !75
  %1114 = fmul float %1113, 1.250000e-01
  %1115 = insertelement <2 x float> undef, float %1114, i32 0
  %1116 = fmul float %1113, 3.000000e+00
  %1117 = fmul float %1116, 1.250000e-01
  %1118 = load float, float* %53, align 4, !noalias !75
  %1119 = fmul float %1118, 2.500000e-01
  %1120 = fadd float %1117, %1119
  %1121 = insertelement <2 x float> %1115, float %1120, i32 1
  %1122 = fmul float %1118, 5.000000e-01
  %1123 = fadd float %1117, %1122
  %1124 = load float, float* %61, align 8, !noalias !75
  %1125 = fmul float %1124, 5.000000e-01
  %1126 = fadd float %1123, %1125
  %1127 = insertelement <2 x float> undef, float %1126, i32 0
  %1128 = fadd float %1114, %1119
  %1129 = fadd float %1128, %1125
  %1130 = load float, float* %944, align 4, !noalias !75
  %1131 = fadd float %1130, %1129
  %1132 = insertelement <2 x float> %1127, float %1131, i32 1
  %1133 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %36, i64 0, i32 1
  %1134 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %1133 to <2 x float>*
  store <2 x float> %1121, <2 x float>* %1134, align 8, !alias.scope !75
  %1135 = bitcast float* %1090 to <2 x float>*
  store <2 x float> %1132, <2 x float>* %1135, align 8, !alias.scope !75
  %1136 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %37 to <2 x float>*
  store <2 x float> %854, <2 x float>* %1136, align 8
  %1137 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %37, i64 0, i32 0, i32 2
  %1138 = bitcast float* %1137 to <2 x float>*
  store <2 x float> %862, <2 x float>* %1138, align 8
  %1139 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %37, i64 0, i32 1
  %1140 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %1139 to <2 x float>*
  store <2 x float> %866, <2 x float>* %1140, align 8
  %1141 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %37, i64 0, i32 1, i32 2
  %1142 = bitcast float* %1141 to <2 x float>*
  store <2 x float> %874, <2 x float>* %1142, align 8
  %1143 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %38 to <2 x float>*
  store <2 x float> %880, <2 x float>* %1143, align 8
  %1144 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %38, i64 0, i32 0, i32 2
  %1145 = bitcast float* %1144 to <2 x float>*
  store <2 x float> %885, <2 x float>* %1145, align 8
  %1146 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %38, i64 0, i32 1
  %1147 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %1146 to <2 x float>*
  store <2 x float> %891, <2 x float>* %1147, align 8
  %1148 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %38, i64 0, i32 1, i32 2
  %1149 = bitcast float* %1148 to <2 x float>*
  store <2 x float> %896, <2 x float>* %1149, align 8
  %1150 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %39, i64 0, i32 0, i32 2
  %1151 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %39, i64 0, i32 1, i32 2
  %1152 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 0, i32 0
  %1153 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 0, i32 1
  %1154 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %8 to <2 x float>*
  %1155 = load <2 x float>, <2 x float>* %1154, align 8, !noalias !78
  %1156 = fmul <2 x float> %1155, <float 1.250000e-01, float 2.500000e-01>
  %1157 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 0, i32 2
  %1158 = load float, float* %1157, align 8, !noalias !78
  %1159 = fmul float %1158, 5.000000e-01
  %1160 = insertelement <2 x float> undef, float %1159, i32 0
  %1161 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 0, i32 3
  %1162 = load float, float* %1161, align 4, !noalias !78
  %1163 = insertelement <2 x float> %1160, float %1162, i32 1
  %1164 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %39 to <2 x float>*
  store <2 x float> %1156, <2 x float>* %1164, align 8, !alias.scope !78
  %1165 = bitcast float* %1150 to <2 x float>*
  store <2 x float> %1163, <2 x float>* %1165, align 8, !alias.scope !78
  %1166 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 1, i32 0
  %1167 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 1, i32 1
  %1168 = bitcast float* %1166 to <2 x float>*
  %1169 = load <2 x float>, <2 x float>* %1168, align 8, !noalias !78
  %1170 = fmul <2 x float> %1169, <float 1.250000e-01, float 2.500000e-01>
  %1171 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 1, i32 2
  %1172 = load float, float* %1171, align 8, !noalias !78
  %1173 = fmul float %1172, 5.000000e-01
  %1174 = insertelement <2 x float> undef, float %1173, i32 0
  %1175 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %8, i64 0, i32 1, i32 3
  %1176 = load float, float* %1175, align 4, !noalias !78
  %1177 = insertelement <2 x float> %1174, float %1176, i32 1
  %1178 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %39, i64 0, i32 1
  %1179 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %1178 to <2 x float>*
  store <2 x float> %1170, <2 x float>* %1179, align 8, !alias.scope !78
  %1180 = bitcast float* %1151 to <2 x float>*
  store <2 x float> %1177, <2 x float>* %1180, align 8, !alias.scope !78
  call fastcc void @_ZN12_GLOBAL__N_116CPDF_PatchDrawer4DrawEiiiiNS_11Coon_BezierES1_S1_S1_(%"struct.(anonymous namespace)::CPDF_PatchDrawer"* %0, i32 %921, i32 %922, i32 %1088, i32 %924, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %36, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %37, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %38, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %39)
  %1181 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %40 to <2 x float>*
  store <2 x float> %854, <2 x float>* %1181, align 8
  %1182 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %40, i64 0, i32 0, i32 2
  %1183 = bitcast float* %1182 to <2 x float>*
  store <2 x float> %862, <2 x float>* %1183, align 8
  %1184 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %40, i64 0, i32 1
  %1185 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %1184 to <2 x float>*
  store <2 x float> %866, <2 x float>* %1185, align 8
  %1186 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %40, i64 0, i32 1, i32 2
  %1187 = bitcast float* %1186 to <2 x float>*
  store <2 x float> %874, <2 x float>* %1187, align 8
  %1188 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %41, i64 0, i32 0, i32 2
  %1189 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %41, i64 0, i32 1, i32 2
  %1190 = load float, float* %1005, align 8, !noalias !81
  %1191 = fmul float %1190, 1.250000e-01
  %1192 = insertelement <2 x float> undef, float %1191, i32 0
  %1193 = fmul float %1190, 3.000000e+00
  %1194 = fmul float %1193, 1.250000e-01
  %1195 = load float, float* %1006, align 4, !noalias !81
  %1196 = fmul float %1195, 2.500000e-01
  %1197 = fadd float %1194, %1196
  %1198 = insertelement <2 x float> %1192, float %1197, i32 1
  %1199 = fmul float %1195, 5.000000e-01
  %1200 = fadd float %1194, %1199
  %1201 = load float, float* %1010, align 8, !noalias !81
  %1202 = fmul float %1201, 5.000000e-01
  %1203 = fadd float %1200, %1202
  %1204 = insertelement <2 x float> undef, float %1203, i32 0
  %1205 = fadd float %1191, %1196
  %1206 = fadd float %1205, %1202
  %1207 = load float, float* %1014, align 4, !noalias !81
  %1208 = fadd float %1207, %1206
  %1209 = insertelement <2 x float> %1204, float %1208, i32 1
  %1210 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %41 to <2 x float>*
  store <2 x float> %1198, <2 x float>* %1210, align 8, !alias.scope !81
  %1211 = bitcast float* %1188 to <2 x float>*
  store <2 x float> %1209, <2 x float>* %1211, align 8, !alias.scope !81
  %1212 = load float, float* %1019, align 8, !noalias !81
  %1213 = fmul float %1212, 1.250000e-01
  %1214 = insertelement <2 x float> undef, float %1213, i32 0
  %1215 = fmul float %1212, 3.000000e+00
  %1216 = fmul float %1215, 1.250000e-01
  %1217 = load float, float* %1020, align 4, !noalias !81
  %1218 = fmul float %1217, 2.500000e-01
  %1219 = fadd float %1216, %1218
  %1220 = insertelement <2 x float> %1214, float %1219, i32 1
  %1221 = fmul float %1217, 5.000000e-01
  %1222 = fadd float %1216, %1221
  %1223 = load float, float* %1024, align 8, !noalias !81
  %1224 = fmul float %1223, 5.000000e-01
  %1225 = fadd float %1222, %1224
  %1226 = insertelement <2 x float> undef, float %1225, i32 0
  %1227 = fadd float %1213, %1218
  %1228 = fadd float %1227, %1224
  %1229 = load float, float* %1028, align 4, !noalias !81
  %1230 = fadd float %1229, %1228
  %1231 = insertelement <2 x float> %1226, float %1230, i32 1
  %1232 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %41, i64 0, i32 1
  %1233 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %1232 to <2 x float>*
  store <2 x float> %1220, <2 x float>* %1233, align 8, !alias.scope !81
  %1234 = bitcast float* %1189 to <2 x float>*
  store <2 x float> %1231, <2 x float>* %1234, align 8, !alias.scope !81
  %1235 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %42 to <2 x float>*
  store <2 x float> %900, <2 x float>* %1235, align 8
  %1236 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %42, i64 0, i32 0, i32 2
  %1237 = bitcast float* %1236 to <2 x float>*
  store <2 x float> %908, <2 x float>* %1237, align 8
  %1238 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %42, i64 0, i32 1
  %1239 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %1238 to <2 x float>*
  store <2 x float> %912, <2 x float>* %1239, align 8
  %1240 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %42, i64 0, i32 1, i32 2
  %1241 = bitcast float* %1240 to <2 x float>*
  store <2 x float> %920, <2 x float>* %1241, align 8
  %1242 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %43, i64 0, i32 0, i32 2
  %1243 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %43, i64 0, i32 1, i32 2
  %1244 = load float, float* %1152, align 8, !noalias !84
  %1245 = fmul float %1244, 1.250000e-01
  %1246 = insertelement <2 x float> undef, float %1245, i32 0
  %1247 = fmul float %1244, 3.000000e+00
  %1248 = fmul float %1247, 1.250000e-01
  %1249 = load float, float* %1153, align 4, !noalias !84
  %1250 = fmul float %1249, 2.500000e-01
  %1251 = fadd float %1248, %1250
  %1252 = insertelement <2 x float> %1246, float %1251, i32 1
  %1253 = fmul float %1249, 5.000000e-01
  %1254 = fadd float %1248, %1253
  %1255 = load float, float* %1157, align 8, !noalias !84
  %1256 = fmul float %1255, 5.000000e-01
  %1257 = fadd float %1254, %1256
  %1258 = insertelement <2 x float> undef, float %1257, i32 0
  %1259 = fadd float %1245, %1250
  %1260 = fadd float %1259, %1256
  %1261 = load float, float* %1161, align 4, !noalias !84
  %1262 = fadd float %1261, %1260
  %1263 = insertelement <2 x float> %1258, float %1262, i32 1
  %1264 = bitcast %"struct.(anonymous namespace)::Coon_Bezier"* %43 to <2 x float>*
  store <2 x float> %1252, <2 x float>* %1264, align 8, !alias.scope !84
  %1265 = bitcast float* %1242 to <2 x float>*
  store <2 x float> %1263, <2 x float>* %1265, align 8, !alias.scope !84
  %1266 = load float, float* %1166, align 8, !noalias !84
  %1267 = fmul float %1266, 1.250000e-01
  %1268 = insertelement <2 x float> undef, float %1267, i32 0
  %1269 = fmul float %1266, 3.000000e+00
  %1270 = fmul float %1269, 1.250000e-01
  %1271 = load float, float* %1167, align 4, !noalias !84
  %1272 = fmul float %1271, 2.500000e-01
  %1273 = fadd float %1270, %1272
  %1274 = insertelement <2 x float> %1268, float %1273, i32 1
  %1275 = fmul float %1271, 5.000000e-01
  %1276 = fadd float %1270, %1275
  %1277 = load float, float* %1171, align 8, !noalias !84
  %1278 = fmul float %1277, 5.000000e-01
  %1279 = fadd float %1276, %1278
  %1280 = insertelement <2 x float> undef, float %1279, i32 0
  %1281 = fadd float %1267, %1272
  %1282 = fadd float %1281, %1278
  %1283 = load float, float* %1175, align 4, !noalias !84
  %1284 = fadd float %1283, %1282
  %1285 = insertelement <2 x float> %1280, float %1284, i32 1
  %1286 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %43, i64 0, i32 1
  %1287 = bitcast %"struct.(anonymous namespace)::Coon_BezierCoeff"* %1286 to <2 x float>*
  store <2 x float> %1274, <2 x float>* %1287, align 8, !alias.scope !84
  %1288 = bitcast float* %1243 to <2 x float>*
  store <2 x float> %1285, <2 x float>* %1288, align 8, !alias.scope !84
  call fastcc void @_ZN12_GLOBAL__N_116CPDF_PatchDrawer4DrawEiiiiNS_11Coon_BezierES1_S1_S1_(%"struct.(anonymous namespace)::CPDF_PatchDrawer"* %0, i32 %921, i32 %922, i32 %1088, i32 %995, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %40, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %41, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %42, %"struct.(anonymous namespace)::Coon_Bezier"* nonnull byval(%"struct.(anonymous namespace)::Coon_Bezier") align 8 %43)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %818) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %809) #10
  br label %1289

1289:                                             ; preds = %473, %660, %808, %493, %171, %167, %163, %157
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %11) #10
  ret void
}

; Function Attrs: nounwind
declare void @_ZN23CFX_DefaultRenderDeviceD1Ev(%class.CFX_DefaultRenderDevice*) unnamed_addr #3

declare void @_ZN12CFX_PathDataC1Ev(%class.CFX_PathData*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN12_GLOBAL__N_110Coon_Color10BiInterpolEPS0_iiii(%"struct.(anonymous namespace)::Coon_Color"* nocapture, %"struct.(anonymous namespace)::Coon_Color"* nocapture readonly, i32, i32, i32, i32) unnamed_addr #0 align 2 {
  %7 = icmp eq i32 %4, 0
  %8 = icmp eq i32 %4, -1
  %9 = icmp eq i32 %5, 0
  %10 = icmp eq i32 %5, -1
  br label %13

11:                                               ; preds = %81
  %12 = icmp eq i8 %82, 0
  ret i1 %12

13:                                               ; preds = %81, %6
  %14 = phi i64 [ 0, %6 ], [ %85, %81 ]
  %15 = phi i8 [ 0, %6 ], [ %82, %81 ]
  %16 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Color", %"struct.(anonymous namespace)::Coon_Color"* %1, i64 0, i32 0, i64 %14
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Color", %"struct.(anonymous namespace)::Coon_Color"* %1, i64 1, i32 0, i64 %14
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Color", %"struct.(anonymous namespace)::Coon_Color"* %1, i64 2, i32 0, i64 %14
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Color", %"struct.(anonymous namespace)::Coon_Color"* %1, i64 3, i32 0, i64 %14
  %23 = load i32, i32* %22, align 4
  %24 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %23, i32 %17) #10
  %25 = extractvalue { i32, i1 } %24, 1
  br i1 %25, label %40, label %26

26:                                               ; preds = %13
  %27 = extractvalue { i32, i1 } %24, 0
  %28 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %27, i32 %2) #10
  %29 = extractvalue { i32, i1 } %28, 1
  %30 = extractvalue { i32, i1 } %28, 0
  %31 = or i1 %7, %29
  %32 = icmp eq i32 %30, -2147483648
  %33 = and i1 %8, %32
  %34 = or i1 %31, %33
  br i1 %34, label %40, label %35, !prof !87

35:                                               ; preds = %26
  %36 = sdiv i32 %30, %4
  %37 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %36, i32 %17) #10
  %38 = extractvalue { i32, i1 } %37, 1
  %39 = extractvalue { i32, i1 } %37, 0
  br i1 %38, label %40, label %41

40:                                               ; preds = %35, %26, %13
  br label %41

41:                                               ; preds = %40, %35
  %42 = phi i8 [ 1, %40 ], [ %15, %35 ]
  %43 = phi i32 [ 0, %40 ], [ %39, %35 ]
  %44 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %21, i32 %19) #10
  %45 = extractvalue { i32, i1 } %44, 1
  br i1 %45, label %60, label %46

46:                                               ; preds = %41
  %47 = extractvalue { i32, i1 } %44, 0
  %48 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %47, i32 %2) #10
  %49 = extractvalue { i32, i1 } %48, 1
  %50 = extractvalue { i32, i1 } %48, 0
  %51 = or i1 %7, %49
  %52 = icmp eq i32 %50, -2147483648
  %53 = and i1 %8, %52
  %54 = or i1 %51, %53
  br i1 %54, label %60, label %55, !prof !87

55:                                               ; preds = %46
  %56 = sdiv i32 %50, %4
  %57 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %56, i32 %19) #10
  %58 = extractvalue { i32, i1 } %57, 1
  %59 = extractvalue { i32, i1 } %57, 0
  br i1 %58, label %60, label %61

60:                                               ; preds = %55, %46, %41
  br label %61

61:                                               ; preds = %60, %55
  %62 = phi i8 [ 1, %60 ], [ %42, %55 ]
  %63 = phi i32 [ 0, %60 ], [ %59, %55 ]
  %64 = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %63, i32 %43) #10
  %65 = extractvalue { i32, i1 } %64, 1
  br i1 %65, label %80, label %66

66:                                               ; preds = %61
  %67 = extractvalue { i32, i1 } %64, 0
  %68 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %67, i32 %3) #10
  %69 = extractvalue { i32, i1 } %68, 1
  %70 = extractvalue { i32, i1 } %68, 0
  %71 = or i1 %9, %69
  %72 = icmp eq i32 %70, -2147483648
  %73 = and i1 %10, %72
  %74 = or i1 %71, %73
  br i1 %74, label %80, label %75, !prof !87

75:                                               ; preds = %66
  %76 = sdiv i32 %70, %5
  %77 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %76, i32 %43) #10
  %78 = extractvalue { i32, i1 } %77, 1
  %79 = extractvalue { i32, i1 } %77, 0
  br i1 %78, label %80, label %81

80:                                               ; preds = %75, %66, %61
  br label %81

81:                                               ; preds = %75, %80
  %82 = phi i8 [ 1, %80 ], [ %62, %75 ]
  %83 = phi i32 [ 0, %80 ], [ %79, %75 ]
  %84 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Color", %"struct.(anonymous namespace)::Coon_Color"* %0, i64 0, i32 0, i64 %14
  store i32 %83, i32* %84, align 4
  %85 = add nuw nsw i64 %14, 1
  %86 = icmp eq i64 %85, 3
  br i1 %86, label %11, label %13
}

declare zeroext i1 @_ZN16CFX_RenderDevice8DrawPathEPK12CFX_PathDataPK10CFX_MatrixPK18CFX_GraphStateDatajjRK21CFX_FillRenderOptions(%class.CFX_RenderDevice*, %class.CFX_PathData*, %class.CFX_Matrix*, %class.CFX_GraphStateData*, i32, i32, %struct.CFX_FillRenderOptions* dereferenceable(2)) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_111Coon_Bezier14BezierInterpolERS0_S1_S1_S1_(%"struct.(anonymous namespace)::Coon_Bezier"* nocapture, %"struct.(anonymous namespace)::Coon_Bezier"* nocapture readonly dereferenceable(32), %"struct.(anonymous namespace)::Coon_Bezier"* nocapture readonly dereferenceable(32), %"struct.(anonymous namespace)::Coon_Bezier"* nocapture readonly dereferenceable(32), %"struct.(anonymous namespace)::Coon_Bezier"* nocapture readonly dereferenceable(32)) unnamed_addr #9 align 2 {
  %6 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %3, i64 0, i32 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %4, i64 0, i32 0, i32 0
  %9 = load float, float* %8, align 4
  %10 = fadd float %7, %9
  %11 = fmul float %10, 5.000000e-01
  %12 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %0, i64 0, i32 0, i32 0
  store float %11, float* %12, align 4
  %13 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %3, i64 0, i32 0, i32 1
  %14 = load float, float* %13, align 4
  %15 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %4, i64 0, i32 0, i32 1
  %16 = load float, float* %15, align 4
  %17 = fadd float %14, %16
  %18 = fmul float %17, 5.000000e-01
  %19 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %0, i64 0, i32 0, i32 1
  store float %18, float* %19, align 4
  %20 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %3, i64 0, i32 0, i32 2
  %21 = load float, float* %20, align 4
  %22 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %4, i64 0, i32 0, i32 2
  %23 = load float, float* %22, align 4
  %24 = fadd float %21, %23
  %25 = fmul float %24, 5.000000e-01
  %26 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %1, i64 0, i32 0, i32 0
  %27 = load float, float* %26, align 4
  %28 = fmul float %27, 1.250000e-01
  %29 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %1, i64 0, i32 0, i32 1
  %30 = load float, float* %29, align 4
  %31 = fmul float %30, 2.500000e-01
  %32 = fadd float %28, %31
  %33 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %1, i64 0, i32 0, i32 2
  %34 = load float, float* %33, align 4
  %35 = fmul float %34, 5.000000e-01
  %36 = fadd float %32, %35
  %37 = fsub float %25, %36
  %38 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %2, i64 0, i32 0, i32 0
  %39 = load float, float* %38, align 4
  %40 = fmul float %39, 1.250000e-01
  %41 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %2, i64 0, i32 0, i32 1
  %42 = load float, float* %41, align 4
  %43 = fmul float %42, 2.500000e-01
  %44 = fadd float %40, %43
  %45 = fadd float %37, %44
  %46 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %1, i64 0, i32 0, i32 3
  %47 = load float, float* %46, align 4
  %48 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %4, i64 0, i32 0, i32 3
  %49 = load float, float* %48, align 4
  %50 = fsub float %49, %47
  %51 = fmul float %50, 5.000000e-01
  %52 = fadd float %45, %51
  %53 = fadd float %39, %42
  %54 = fmul float %53, 5.000000e-01
  %55 = fsub float %52, %54
  %56 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %0, i64 0, i32 0, i32 2
  store float %55, float* %56, align 4
  %57 = load float, float* %26, align 4
  %58 = fmul float %57, 1.250000e-01
  %59 = load float, float* %29, align 4
  %60 = fmul float %59, 2.500000e-01
  %61 = fadd float %58, %60
  %62 = load float, float* %33, align 4
  %63 = fmul float %62, 5.000000e-01
  %64 = fadd float %61, %63
  %65 = load float, float* %46, align 4
  %66 = fadd float %65, %64
  %67 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %0, i64 0, i32 0, i32 3
  store float %66, float* %67, align 4
  %68 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %3, i64 0, i32 1, i32 0
  %69 = load float, float* %68, align 4
  %70 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %4, i64 0, i32 1, i32 0
  %71 = load float, float* %70, align 4
  %72 = fadd float %69, %71
  %73 = fmul float %72, 5.000000e-01
  %74 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %0, i64 0, i32 1, i32 0
  store float %73, float* %74, align 4
  %75 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %3, i64 0, i32 1, i32 1
  %76 = load float, float* %75, align 4
  %77 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %4, i64 0, i32 1, i32 1
  %78 = load float, float* %77, align 4
  %79 = fadd float %76, %78
  %80 = fmul float %79, 5.000000e-01
  %81 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %0, i64 0, i32 1, i32 1
  store float %80, float* %81, align 4
  %82 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %3, i64 0, i32 1, i32 2
  %83 = load float, float* %82, align 4
  %84 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %4, i64 0, i32 1, i32 2
  %85 = load float, float* %84, align 4
  %86 = fadd float %83, %85
  %87 = fmul float %86, 5.000000e-01
  %88 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %1, i64 0, i32 1, i32 0
  %89 = load float, float* %88, align 4
  %90 = fmul float %89, 1.250000e-01
  %91 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %1, i64 0, i32 1, i32 1
  %92 = load float, float* %91, align 4
  %93 = fmul float %92, 2.500000e-01
  %94 = fadd float %90, %93
  %95 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %1, i64 0, i32 1, i32 2
  %96 = load float, float* %95, align 4
  %97 = fmul float %96, 5.000000e-01
  %98 = fadd float %94, %97
  %99 = fsub float %87, %98
  %100 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %2, i64 0, i32 1, i32 0
  %101 = load float, float* %100, align 4
  %102 = fmul float %101, 1.250000e-01
  %103 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %2, i64 0, i32 1, i32 1
  %104 = load float, float* %103, align 4
  %105 = fmul float %104, 2.500000e-01
  %106 = fadd float %102, %105
  %107 = fadd float %99, %106
  %108 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %1, i64 0, i32 1, i32 3
  %109 = load float, float* %108, align 4
  %110 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %4, i64 0, i32 1, i32 3
  %111 = load float, float* %110, align 4
  %112 = fsub float %111, %109
  %113 = fmul float %112, 5.000000e-01
  %114 = fadd float %107, %113
  %115 = fadd float %101, %104
  %116 = fmul float %115, 5.000000e-01
  %117 = fsub float %114, %116
  %118 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %0, i64 0, i32 1, i32 2
  store float %117, float* %118, align 4
  %119 = load float, float* %88, align 4
  %120 = fmul float %119, 1.250000e-01
  %121 = load float, float* %91, align 4
  %122 = fmul float %121, 2.500000e-01
  %123 = fadd float %120, %122
  %124 = load float, float* %95, align 4
  %125 = fmul float %124, 5.000000e-01
  %126 = fadd float %123, %125
  %127 = load float, float* %108, align 4
  %128 = fadd float %127, %126
  %129 = getelementptr inbounds %"struct.(anonymous namespace)::Coon_Bezier", %"struct.(anonymous namespace)::Coon_Bezier"* %0, i64 0, i32 1, i32 3
  store float %128, float* %129, align 4
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #4

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.smul.with.overflow.i32(i32, i32) #4

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #4

; Function Attrs: nounwind
declare void @_ZN12CFX_PathDataD1Ev(%class.CFX_PathData*) unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK19CPDF_ShadingPattern5GetCSEv: argument 0"}
!4 = distinct !{!4, !"_ZNK19CPDF_ShadingPattern5GetCSEv"}
!5 = !{i8 0, i8 2}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNK10CFX_MatrixmlERKS_: argument 0"}
!8 = distinct !{!8, !"_ZNK10CFX_MatrixmlERKS_"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZNK17CPDF_DeviceBuffer9GetBitmapEv: argument 0"}
!11 = distinct !{!11, !"_ZNK17CPDF_DeviceBuffer9GetBitmapEv"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZNK10CFX_MatrixmlERKS_: argument 0"}
!14 = distinct !{!14, !"_ZNK10CFX_MatrixmlERKS_"}
!15 = !{!"branch_weights", i32 1, i32 2000}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZNK6pdfium4spanI12FX_PATHPOINTE7subspanEmm: argument 0"}
!18 = distinct !{!18, !"_ZNK6pdfium4spanI12FX_PATHPOINTE7subspanEmm"}
!19 = !{i32 -2143453949}
!20 = !{i32 -2143453928}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_ZNK6pdfium4spanI12FX_PATHPOINTE7subspanEmm: argument 0"}
!23 = distinct !{!23, !"_ZNK6pdfium4spanI12FX_PATHPOINTE7subspanEmm"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_ZNK6pdfium4spanI12FX_PATHPOINTE7subspanEmm: argument 0"}
!26 = distinct !{!26, !"_ZNK6pdfium4spanI12FX_PATHPOINTE7subspanEmm"}
!27 = !{i32 -2143454536}
!28 = !{i32 -2143454515}
!29 = !{!30}
!30 = distinct !{!30, !31, !"_ZNK6pdfium4spanI12FX_PATHPOINTE7subspanEmm: argument 0"}
!31 = distinct !{!31, !"_ZNK6pdfium4spanI12FX_PATHPOINTE7subspanEmm"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"_ZN12_GLOBAL__N_111Coon_Bezier10first_halfEv: argument 0"}
!34 = distinct !{!34, !"_ZN12_GLOBAL__N_111Coon_Bezier10first_halfEv"}
!35 = !{!36}
!36 = distinct !{!36, !37, !"_ZN12_GLOBAL__N_111Coon_Bezier10first_halfEv: argument 0"}
!37 = distinct !{!37, !"_ZN12_GLOBAL__N_111Coon_Bezier10first_halfEv"}
!38 = !{!39}
!39 = distinct !{!39, !40, !"_ZN12_GLOBAL__N_111Coon_Bezier11second_halfEv: argument 0"}
!40 = distinct !{!40, !"_ZN12_GLOBAL__N_111Coon_Bezier11second_halfEv"}
!41 = !{!42}
!42 = distinct !{!42, !43, !"_ZN12_GLOBAL__N_111Coon_Bezier11second_halfEv: argument 0"}
!43 = distinct !{!43, !"_ZN12_GLOBAL__N_111Coon_Bezier11second_halfEv"}
!44 = !{}
!45 = !{!46}
!46 = distinct !{!46, !47, !"_ZN12_GLOBAL__N_111Coon_Bezier10first_halfEv: argument 0"}
!47 = distinct !{!47, !"_ZN12_GLOBAL__N_111Coon_Bezier10first_halfEv"}
!48 = !{!49}
!49 = distinct !{!49, !50, !"_ZN12_GLOBAL__N_111Coon_Bezier10first_halfEv: argument 0"}
!50 = distinct !{!50, !"_ZN12_GLOBAL__N_111Coon_Bezier10first_halfEv"}
!51 = !{!52}
!52 = distinct !{!52, !53, !"_ZN12_GLOBAL__N_111Coon_Bezier11second_halfEv: argument 0"}
!53 = distinct !{!53, !"_ZN12_GLOBAL__N_111Coon_Bezier11second_halfEv"}
!54 = !{!55}
!55 = distinct !{!55, !56, !"_ZN12_GLOBAL__N_111Coon_Bezier11second_halfEv: argument 0"}
!56 = distinct !{!56, !"_ZN12_GLOBAL__N_111Coon_Bezier11second_halfEv"}
!57 = !{!58}
!58 = distinct !{!58, !59, !"_ZN12_GLOBAL__N_111Coon_Bezier10first_halfEv: argument 0"}
!59 = distinct !{!59, !"_ZN12_GLOBAL__N_111Coon_Bezier10first_halfEv"}
!60 = !{!61}
!61 = distinct !{!61, !62, !"_ZN12_GLOBAL__N_111Coon_Bezier10first_halfEv: argument 0"}
!62 = distinct !{!62, !"_ZN12_GLOBAL__N_111Coon_Bezier10first_halfEv"}
!63 = !{!64}
!64 = distinct !{!64, !65, !"_ZN12_GLOBAL__N_111Coon_Bezier10first_halfEv: argument 0"}
!65 = distinct !{!65, !"_ZN12_GLOBAL__N_111Coon_Bezier10first_halfEv"}
!66 = !{!67}
!67 = distinct !{!67, !68, !"_ZN12_GLOBAL__N_111Coon_Bezier10first_halfEv: argument 0"}
!68 = distinct !{!68, !"_ZN12_GLOBAL__N_111Coon_Bezier10first_halfEv"}
!69 = !{!70}
!70 = distinct !{!70, !71, !"_ZN12_GLOBAL__N_111Coon_Bezier10first_halfEv: argument 0"}
!71 = distinct !{!71, !"_ZN12_GLOBAL__N_111Coon_Bezier10first_halfEv"}
!72 = !{!73}
!73 = distinct !{!73, !74, !"_ZN12_GLOBAL__N_111Coon_Bezier11second_halfEv: argument 0"}
!74 = distinct !{!74, !"_ZN12_GLOBAL__N_111Coon_Bezier11second_halfEv"}
!75 = !{!76}
!76 = distinct !{!76, !77, !"_ZN12_GLOBAL__N_111Coon_Bezier11second_halfEv: argument 0"}
!77 = distinct !{!77, !"_ZN12_GLOBAL__N_111Coon_Bezier11second_halfEv"}
!78 = !{!79}
!79 = distinct !{!79, !80, !"_ZN12_GLOBAL__N_111Coon_Bezier10first_halfEv: argument 0"}
!80 = distinct !{!80, !"_ZN12_GLOBAL__N_111Coon_Bezier10first_halfEv"}
!81 = !{!82}
!82 = distinct !{!82, !83, !"_ZN12_GLOBAL__N_111Coon_Bezier11second_halfEv: argument 0"}
!83 = distinct !{!83, !"_ZN12_GLOBAL__N_111Coon_Bezier11second_halfEv"}
!84 = !{!85}
!85 = distinct !{!85, !86, !"_ZN12_GLOBAL__N_111Coon_Bezier11second_halfEv: argument 0"}
!86 = distinct !{!86, !"_ZN12_GLOBAL__N_111Coon_Bezier11second_halfEv"}
!87 = !{!"branch_weights", i32 4008002, i32 4000000}
