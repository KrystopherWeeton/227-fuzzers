; ModuleID = '../../third_party/skia/src/pathops/SkReduceOrder.cpp'
source_filename = "../../third_party/skia/src/pathops/SkReduceOrder.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%union.SkReduceOrder = type { %struct.SkDCubic }
%struct.SkDCubic = type { [4 x %struct.SkDPoint] }
%struct.SkDPoint = type { double, double }
%struct.SkDLine = type { [2 x %struct.SkDPoint] }
%struct.SkDQuad = type { [3 x %struct.SkDPoint] }
%struct.SkPoint = type { float, float }
%struct.SkConic = type { [3 x %struct.SkPoint], float }

$_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_ = comdat any

$_ZNK8SkDPoint18approximatelyEqualERKS_ = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN13SkReduceOrder6reduceERK7SkDLine(%union.SkReduceOrder* nocapture, %struct.SkDLine* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = bitcast %union.SkReduceOrder* %0 to i8*
  %4 = bitcast %struct.SkDLine* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 16, i1 false)
  %5 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 1, i32 0
  %8 = load double, double* %7, align 8
  %9 = fcmp une double %6, %8
  br i1 %9, label %10, label %15

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 1
  %12 = getelementptr inbounds %union.SkReduceOrder, %union.SkReduceOrder* %0, i64 0, i32 0, i32 0, i64 1
  %13 = bitcast %struct.SkDPoint* %12 to i8*
  %14 = bitcast %struct.SkDPoint* %11 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 16, i1 false)
  br label %26

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 0, i32 1
  %17 = load double, double* %16, align 8
  %18 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 1, i32 1
  %19 = load double, double* %18, align 8
  %20 = fcmp une double %17, %19
  %21 = zext i1 %20 to i64
  %22 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %1, i64 0, i32 0, i64 %21
  %23 = getelementptr inbounds %union.SkReduceOrder, %union.SkReduceOrder* %0, i64 0, i32 0, i32 0, i64 1
  %24 = bitcast %struct.SkDPoint* %23 to i8*
  %25 = bitcast %struct.SkDPoint* %22 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 16, i1 false)
  br i1 %20, label %26, label %27

26:                                               ; preds = %10, %15
  br label %27

27:                                               ; preds = %15, %26
  %28 = phi i32 [ 2, %26 ], [ 1, %15 ]
  ret i32 %28
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN13SkReduceOrder6reduceERK7SkDQuad(%union.SkReduceOrder*, %struct.SkDQuad* dereferenceable(48)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 1, i32 0
  %6 = load double, double* %5, align 8
  %7 = fcmp ogt double %4, %6
  %8 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 0, i32 1
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 1, i32 1
  %11 = load double, double* %10, align 8
  %12 = fcmp ogt double %9, %11
  %13 = zext i1 %7 to i64
  %14 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 %13, i32 0
  %15 = load double, double* %14, align 8
  %16 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 2, i32 0
  %17 = load double, double* %16, align 8
  %18 = fcmp ogt double %15, %17
  %19 = zext i1 %12 to i64
  %20 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 %19, i32 1
  %21 = load double, double* %20, align 8
  %22 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 2, i32 1
  %23 = load double, double* %22, align 8
  %24 = fcmp ogt double %21, %23
  %25 = zext i1 %7 to i64
  %26 = select i1 %18, i64 2, i64 %25
  %27 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 %26, i32 0
  %28 = zext i1 %12 to i64
  %29 = select i1 %24, i64 2, i64 %28
  %30 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 %29, i32 1
  %31 = load double, double* %27, align 8
  %32 = fptrunc double %4 to float
  %33 = fptrunc double %31 to float
  %34 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %32, float %33) #6
  %35 = zext i1 %34 to i32
  %36 = load double, double* %8, align 8
  %37 = load double, double* %30, align 8
  %38 = fptrunc double %36 to float
  %39 = fptrunc double %37 to float
  %40 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %38, float %39) #6
  %41 = zext i1 %40 to i32
  %42 = load double, double* %5, align 8
  %43 = load double, double* %27, align 8
  %44 = fptrunc double %42 to float
  %45 = fptrunc double %43 to float
  %46 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %44, float %45) #6
  %47 = select i1 %46, i32 2, i32 0
  %48 = or i32 %47, %35
  %49 = load double, double* %10, align 8
  %50 = load double, double* %30, align 8
  %51 = fptrunc double %49 to float
  %52 = fptrunc double %50 to float
  %53 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %51, float %52) #6
  %54 = select i1 %53, i32 2, i32 0
  %55 = or i32 %54, %41
  %56 = load double, double* %16, align 8
  %57 = load double, double* %27, align 8
  %58 = fptrunc double %56 to float
  %59 = fptrunc double %57 to float
  %60 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %58, float %59) #6
  %61 = select i1 %60, i32 4, i32 0
  %62 = or i32 %61, %48
  %63 = load double, double* %22, align 8
  %64 = load double, double* %30, align 8
  %65 = fptrunc double %63 to float
  %66 = fptrunc double %64 to float
  %67 = tail call zeroext i1 @_Z15AlmostEqualUlpsff(float %65, float %66) #6
  %68 = select i1 %67, i32 4, i32 0
  %69 = or i32 %68, %55
  %70 = and i32 %62, 5
  %71 = and i32 %70, %69
  %72 = icmp eq i32 %71, 5
  br i1 %72, label %73, label %78

73:                                               ; preds = %2
  %74 = getelementptr inbounds %union.SkReduceOrder, %union.SkReduceOrder* %0, i64 0, i32 0, i32 0, i64 1
  %75 = bitcast %struct.SkDPoint* %74 to i8*
  %76 = bitcast %struct.SkDQuad* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 16, i1 false) #6
  %77 = bitcast %union.SkReduceOrder* %0 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %76, i64 16, i1 false) #6
  br label %117

78:                                               ; preds = %2
  %79 = icmp eq i32 %62, 7
  br i1 %79, label %80, label %90

80:                                               ; preds = %78
  %81 = getelementptr inbounds %union.SkReduceOrder, %union.SkReduceOrder* %0, i64 0, i32 0, i32 0, i64 0
  %82 = bitcast %union.SkReduceOrder* %0 to i8*
  %83 = bitcast %struct.SkDQuad* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64 16, i1 false) #6
  %84 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 2
  %85 = getelementptr inbounds %union.SkReduceOrder, %union.SkReduceOrder* %0, i64 0, i32 0, i32 0, i64 1
  %86 = bitcast %struct.SkDPoint* %85 to i8*
  %87 = bitcast %struct.SkDPoint* %84 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %86, i8* align 8 %87, i64 16, i1 false) #6
  %88 = tail call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %81, %struct.SkDPoint* dereferenceable(16) %85) #6
  %89 = select i1 %88, i32 1, i32 2
  br label %117

90:                                               ; preds = %78
  %91 = icmp eq i32 %69, 7
  br i1 %91, label %92, label %102

92:                                               ; preds = %90
  %93 = getelementptr inbounds %union.SkReduceOrder, %union.SkReduceOrder* %0, i64 0, i32 0, i32 0, i64 0
  %94 = bitcast %union.SkReduceOrder* %0 to i8*
  %95 = bitcast %struct.SkDQuad* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 16, i1 false) #6
  %96 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 2
  %97 = getelementptr inbounds %union.SkReduceOrder, %union.SkReduceOrder* %0, i64 0, i32 0, i32 0, i64 1
  %98 = bitcast %struct.SkDPoint* %97 to i8*
  %99 = bitcast %struct.SkDPoint* %96 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 %99, i64 16, i1 false) #6
  %100 = tail call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %93, %struct.SkDPoint* dereferenceable(16) %97) #6
  %101 = select i1 %100, i32 1, i32 2
  br label %117

102:                                              ; preds = %90
  %103 = tail call zeroext i1 @_ZNK7SkDQuad8isLinearEii(%struct.SkDQuad* %1, i32 0, i32 2) #6
  br i1 %103, label %104, label %114

104:                                              ; preds = %102
  %105 = getelementptr inbounds %union.SkReduceOrder, %union.SkReduceOrder* %0, i64 0, i32 0, i32 0, i64 0
  %106 = bitcast %union.SkReduceOrder* %0 to i8*
  %107 = bitcast %struct.SkDQuad* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %107, i64 16, i1 false) #6
  %108 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %1, i64 0, i32 0, i64 2
  %109 = getelementptr inbounds %union.SkReduceOrder, %union.SkReduceOrder* %0, i64 0, i32 0, i32 0, i64 1
  %110 = bitcast %struct.SkDPoint* %109 to i8*
  %111 = bitcast %struct.SkDPoint* %108 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %110, i8* align 8 %111, i64 16, i1 false) #6
  %112 = tail call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %105, %struct.SkDPoint* dereferenceable(16) %109) #6
  %113 = select i1 %112, i32 1, i32 2
  br label %117

114:                                              ; preds = %102
  %115 = bitcast %union.SkReduceOrder* %0 to i8*
  %116 = bitcast %struct.SkDQuad* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %115, i8* align 8 %116, i64 48, i1 false)
  br label %117

117:                                              ; preds = %104, %114, %92, %80, %73
  %118 = phi i32 [ 1, %73 ], [ %89, %80 ], [ %101, %92 ], [ 3, %114 ], [ %113, %104 ]
  ret i32 %118
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN13SkReduceOrder6reduceERK8SkDCubicNS_10QuadraticsE(%union.SkReduceOrder*, %struct.SkDCubic* dereferenceable(64), i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 0, i32 0
  %5 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 1, i32 0
  %6 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 1, i32 1
  %7 = bitcast double* %5 to <2 x double>*
  %8 = load <2 x double>, <2 x double>* %7, align 8
  %9 = extractelement <2 x double> %8, i32 0
  %10 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 0, i32 1
  %11 = bitcast %struct.SkDCubic* %1 to <2 x double>*
  %12 = load <2 x double>, <2 x double>* %11, align 8
  %13 = extractelement <2 x double> %12, i32 0
  %14 = fcmp ogt double %13, %9
  %15 = zext i1 %14 to i32
  %16 = extractelement <2 x double> %8, i32 1
  %17 = extractelement <2 x double> %12, i32 1
  %18 = fcmp ogt double %17, %16
  %19 = zext i1 %18 to i32
  %20 = zext i1 %14 to i64
  %21 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 %20, i32 0
  %22 = load double, double* %21, align 8
  %23 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 2, i32 0
  %24 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 2, i32 1
  %25 = bitcast double* %23 to <2 x double>*
  %26 = load <2 x double>, <2 x double>* %25, align 8
  %27 = extractelement <2 x double> %26, i32 0
  %28 = fcmp ogt double %22, %27
  %29 = select i1 %28, i32 2, i32 %15
  %30 = zext i1 %18 to i64
  %31 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 %30, i32 1
  %32 = load double, double* %31, align 8
  %33 = extractelement <2 x double> %26, i32 1
  %34 = fcmp ogt double %32, %33
  %35 = select i1 %34, i32 2, i32 %19
  %36 = zext i32 %29 to i64
  %37 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 %36, i32 0
  %38 = load double, double* %37, align 8
  %39 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 3, i32 0
  %40 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 3, i32 1
  %41 = bitcast double* %39 to <2 x double>*
  %42 = load <2 x double>, <2 x double>* %41, align 8
  %43 = extractelement <2 x double> %42, i32 0
  %44 = fcmp ogt double %38, %43
  %45 = zext i32 %35 to i64
  %46 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 %45, i32 1
  %47 = load double, double* %46, align 8
  %48 = extractelement <2 x double> %42, i32 1
  %49 = fcmp ogt double %47, %48
  %50 = zext i32 %29 to i64
  %51 = select i1 %44, i64 3, i64 %50
  %52 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 %51, i32 0
  %53 = load double, double* %52, align 8
  %54 = tail call double @llvm.fabs.f64(double %53)
  %55 = zext i32 %35 to i64
  %56 = select i1 %49, i64 3, i64 %55
  %57 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 %56, i32 1
  %58 = load double, double* %57, align 8
  %59 = tail call double @llvm.fabs.f64(double %58)
  %60 = fcmp olt double %54, %59
  %61 = select i1 %60, double %59, double %54
  %62 = tail call double @llvm.fabs.f64(double %13)
  %63 = tail call double @llvm.fabs.f64(double %17)
  %64 = fcmp olt double %63, %61
  %65 = select i1 %64, double %61, double %63
  %66 = fcmp olt double %62, %65
  %67 = select i1 %66, double %65, double %62
  %68 = fcmp oeq double %67, 0.000000e+00
  br i1 %68, label %81, label %69

69:                                               ; preds = %3
  %70 = fdiv double 1.000000e+00, %67
  %71 = insertelement <2 x double> undef, double %70, i32 0
  %72 = shufflevector <2 x double> %71, <2 x double> undef, <2 x i32> zeroinitializer
  %73 = fmul <2 x double> %12, %72
  %74 = insertelement <2 x double> undef, double %53, i32 0
  %75 = insertelement <2 x double> %74, double %58, i32 1
  %76 = fmul <2 x double> %75, %72
  %77 = fsub <2 x double> %73, %76
  %78 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %77)
  %79 = fcmp olt <2 x double> %78, <double 0x3E70000000000000, double 0x3E70000000000000>
  %80 = zext <2 x i1> %79 to <2 x i32>
  br label %81

81:                                               ; preds = %3, %69
  %82 = phi <2 x i32> [ %80, %69 ], [ <i32 1, i32 1>, %3 ]
  %83 = tail call double @llvm.fabs.f64(double %9)
  %84 = tail call double @llvm.fabs.f64(double %16)
  %85 = fcmp olt double %84, %61
  %86 = select i1 %85, double %61, double %84
  %87 = fcmp olt double %83, %86
  %88 = select i1 %87, double %86, double %83
  %89 = fcmp oeq double %88, 0.000000e+00
  br i1 %89, label %204, label %192

90:                                               ; preds = %256
  br i1 %263, label %91, label %96

91:                                               ; preds = %90
  %92 = getelementptr inbounds %union.SkReduceOrder, %union.SkReduceOrder* %0, i64 0, i32 0, i32 0, i64 1
  %93 = bitcast %struct.SkDPoint* %92 to i8*
  %94 = bitcast %struct.SkDCubic* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %93, i8* align 8 %94, i64 16, i1 false) #6
  %95 = bitcast %union.SkReduceOrder* %0 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %95, i8* align 8 %94, i64 16, i1 false) #6
  br label %190

96:                                               ; preds = %90
  %97 = getelementptr inbounds %union.SkReduceOrder, %union.SkReduceOrder* %0, i64 0, i32 0, i32 0, i64 0
  %98 = bitcast %union.SkReduceOrder* %0 to i8*
  %99 = bitcast %struct.SkDCubic* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 %99, i64 16, i1 false) #6
  %100 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 3
  %101 = getelementptr inbounds %union.SkReduceOrder, %union.SkReduceOrder* %0, i64 0, i32 0, i32 0, i64 1
  %102 = bitcast %struct.SkDPoint* %101 to i8*
  %103 = bitcast %struct.SkDPoint* %100 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %102, i8* align 8 %103, i64 16, i1 false) #6
  %104 = tail call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %97, %struct.SkDPoint* dereferenceable(16) %101) #6
  %105 = select i1 %104, i32 1, i32 2
  br label %190

106:                                              ; preds = %256
  br i1 %263, label %107, label %117

107:                                              ; preds = %106
  %108 = getelementptr inbounds %union.SkReduceOrder, %union.SkReduceOrder* %0, i64 0, i32 0, i32 0, i64 0
  %109 = bitcast %union.SkReduceOrder* %0 to i8*
  %110 = bitcast %struct.SkDCubic* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %109, i8* align 8 %110, i64 16, i1 false) #6
  %111 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 3
  %112 = getelementptr inbounds %union.SkReduceOrder, %union.SkReduceOrder* %0, i64 0, i32 0, i32 0, i64 1
  %113 = bitcast %struct.SkDPoint* %112 to i8*
  %114 = bitcast %struct.SkDPoint* %111 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %113, i8* align 8 %114, i64 16, i1 false) #6
  %115 = tail call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %108, %struct.SkDPoint* dereferenceable(16) %112) #6
  %116 = select i1 %115, i32 1, i32 2
  br label %190

117:                                              ; preds = %106
  %118 = tail call zeroext i1 @_ZNK8SkDCubic8isLinearEii(%struct.SkDCubic* %1, i32 0, i32 3) #6
  br i1 %118, label %119, label %129

119:                                              ; preds = %117
  %120 = getelementptr inbounds %union.SkReduceOrder, %union.SkReduceOrder* %0, i64 0, i32 0, i32 0, i64 0
  %121 = bitcast %union.SkReduceOrder* %0 to i8*
  %122 = bitcast %struct.SkDCubic* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %121, i8* align 8 %122, i64 16, i1 false) #6
  %123 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 3
  %124 = getelementptr inbounds %union.SkReduceOrder, %union.SkReduceOrder* %0, i64 0, i32 0, i32 0, i64 1
  %125 = bitcast %struct.SkDPoint* %124 to i8*
  %126 = bitcast %struct.SkDPoint* %123 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %125, i8* align 8 %126, i64 16, i1 false) #6
  %127 = tail call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* %120, %struct.SkDPoint* dereferenceable(16) %124) #6
  %128 = select i1 %127, i32 1, i32 2
  br label %190

129:                                              ; preds = %117
  %130 = icmp eq i32 %2, 1
  br i1 %130, label %131, label %187

131:                                              ; preds = %129
  %132 = load double, double* %5, align 8
  %133 = load double, double* %4, align 8
  %134 = fsub double %132, %133
  %135 = load double, double* %23, align 8
  %136 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %1, i64 0, i32 0, i64 3
  %137 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %136, i64 0, i32 0
  %138 = load double, double* %137, align 8
  %139 = fsub double %135, %138
  %140 = fmul double %134, 3.000000e+00
  %141 = fmul double %140, 5.000000e-01
  %142 = fadd double %133, %141
  %143 = fsub double %142, %138
  %144 = fmul double %139, 3.000000e+00
  %145 = fmul double %144, 5.000000e-01
  %146 = tail call double @llvm.fabs.f64(double %143) #6
  %147 = fcmp olt double %146, 0x3E80000000000000
  br i1 %147, label %148, label %152

148:                                              ; preds = %131
  %149 = fsub double %143, %145
  %150 = tail call double @llvm.fabs.f64(double %149) #6
  %151 = fcmp olt double %150, 0x3E80000000000000
  br i1 %151, label %156, label %187

152:                                              ; preds = %131
  %153 = fptrunc double %143 to float
  %154 = fptrunc double %145 to float
  %155 = tail call zeroext i1 @_Z19AlmostEqualUlps_Pinff(float %153, float %154) #6
  br i1 %155, label %156, label %187

156:                                              ; preds = %152, %148
  %157 = load double, double* %6, align 8
  %158 = load double, double* %10, align 8
  %159 = fsub double %157, %158
  %160 = load double, double* %24, align 8
  %161 = load double, double* %40, align 8
  %162 = fsub double %160, %161
  %163 = fmul double %159, 3.000000e+00
  %164 = fmul double %163, 5.000000e-01
  %165 = fadd double %158, %164
  %166 = fsub double %165, %161
  %167 = fmul double %162, 3.000000e+00
  %168 = fmul double %167, 5.000000e-01
  %169 = tail call double @llvm.fabs.f64(double %166) #6
  %170 = fcmp olt double %169, 0x3E80000000000000
  br i1 %170, label %171, label %175

171:                                              ; preds = %156
  %172 = fsub double %166, %168
  %173 = tail call double @llvm.fabs.f64(double %172) #6
  %174 = fcmp olt double %173, 0x3E80000000000000
  br i1 %174, label %179, label %187

175:                                              ; preds = %156
  %176 = fptrunc double %166 to float
  %177 = fptrunc double %168 to float
  %178 = tail call zeroext i1 @_Z19AlmostEqualUlps_Pinff(float %176, float %177) #6
  br i1 %178, label %179, label %187

179:                                              ; preds = %171, %175
  %180 = bitcast %union.SkReduceOrder* %0 to i8*
  %181 = bitcast %struct.SkDCubic* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %180, i8* align 8 %181, i64 16, i1 false) #6
  %182 = getelementptr inbounds %union.SkReduceOrder, %union.SkReduceOrder* %0, i64 0, i32 0, i32 0, i64 1, i32 0
  store double %142, double* %182, align 8
  %183 = getelementptr inbounds %union.SkReduceOrder, %union.SkReduceOrder* %0, i64 0, i32 0, i32 0, i64 1, i32 1
  store double %165, double* %183, align 8
  %184 = getelementptr inbounds %union.SkReduceOrder, %union.SkReduceOrder* %0, i64 0, i32 0, i32 0, i64 2
  %185 = bitcast %struct.SkDPoint* %184 to i8*
  %186 = bitcast %struct.SkDPoint* %136 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %185, i8* align 8 %186, i64 16, i1 false) #6
  br label %190

187:                                              ; preds = %171, %175, %148, %152, %129
  %188 = bitcast %union.SkReduceOrder* %0 to i8*
  %189 = bitcast %struct.SkDCubic* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %188, i8* align 8 %189, i64 64, i1 false)
  br label %190

190:                                              ; preds = %119, %179, %187, %107, %96, %91
  %191 = phi i32 [ 1, %91 ], [ %105, %96 ], [ %116, %107 ], [ 4, %187 ], [ %128, %119 ], [ 3, %179 ]
  ret i32 %191

192:                                              ; preds = %81
  %193 = fdiv double 1.000000e+00, %88
  %194 = insertelement <2 x double> undef, double %193, i32 0
  %195 = shufflevector <2 x double> %194, <2 x double> undef, <2 x i32> zeroinitializer
  %196 = fmul <2 x double> %8, %195
  %197 = insertelement <2 x double> undef, double %53, i32 0
  %198 = insertelement <2 x double> %197, double %58, i32 1
  %199 = fmul <2 x double> %198, %195
  %200 = fsub <2 x double> %196, %199
  %201 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %200)
  %202 = fcmp olt <2 x double> %201, <double 0x3E70000000000000, double 0x3E70000000000000>
  %203 = select <2 x i1> %202, <2 x i32> <i32 2, i32 2>, <2 x i32> zeroinitializer
  br label %204

204:                                              ; preds = %81, %192
  %205 = phi <2 x i32> [ %203, %192 ], [ <i32 2, i32 2>, %81 ]
  %206 = extractelement <2 x i32> %205, i32 1
  %207 = extractelement <2 x i32> %82, i32 1
  %208 = or i32 %206, %207
  %209 = extractelement <2 x i32> %205, i32 0
  %210 = extractelement <2 x i32> %82, i32 0
  %211 = or i32 %209, %210
  %212 = tail call double @llvm.fabs.f64(double %27)
  %213 = tail call double @llvm.fabs.f64(double %33)
  %214 = fcmp olt double %213, %61
  %215 = select i1 %214, double %61, double %213
  %216 = fcmp olt double %212, %215
  %217 = select i1 %216, double %215, double %212
  %218 = fcmp oeq double %217, 0.000000e+00
  br i1 %218, label %231, label %219

219:                                              ; preds = %204
  %220 = fdiv double 1.000000e+00, %217
  %221 = insertelement <2 x double> undef, double %220, i32 0
  %222 = shufflevector <2 x double> %221, <2 x double> undef, <2 x i32> zeroinitializer
  %223 = fmul <2 x double> %26, %222
  %224 = insertelement <2 x double> undef, double %53, i32 0
  %225 = insertelement <2 x double> %224, double %58, i32 1
  %226 = fmul <2 x double> %225, %222
  %227 = fsub <2 x double> %223, %226
  %228 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %227)
  %229 = fcmp olt <2 x double> %228, <double 0x3E70000000000000, double 0x3E70000000000000>
  %230 = select <2 x i1> %229, <2 x i32> <i32 4, i32 4>, <2 x i32> zeroinitializer
  br label %231

231:                                              ; preds = %204, %219
  %232 = phi <2 x i32> [ %230, %219 ], [ <i32 4, i32 4>, %204 ]
  %233 = extractelement <2 x i32> %232, i32 1
  %234 = or i32 %233, %208
  %235 = extractelement <2 x i32> %232, i32 0
  %236 = or i32 %235, %211
  %237 = tail call double @llvm.fabs.f64(double %43)
  %238 = tail call double @llvm.fabs.f64(double %48)
  %239 = fcmp olt double %238, %61
  %240 = select i1 %239, double %61, double %238
  %241 = fcmp olt double %237, %240
  %242 = select i1 %241, double %240, double %237
  %243 = fcmp oeq double %242, 0.000000e+00
  br i1 %243, label %256, label %244

244:                                              ; preds = %231
  %245 = fdiv double 1.000000e+00, %242
  %246 = insertelement <2 x double> undef, double %245, i32 0
  %247 = shufflevector <2 x double> %246, <2 x double> undef, <2 x i32> zeroinitializer
  %248 = fmul <2 x double> %42, %247
  %249 = insertelement <2 x double> undef, double %53, i32 0
  %250 = insertelement <2 x double> %249, double %58, i32 1
  %251 = fmul <2 x double> %250, %247
  %252 = fsub <2 x double> %248, %251
  %253 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %252)
  %254 = fcmp olt <2 x double> %253, <double 0x3E70000000000000, double 0x3E70000000000000>
  %255 = select <2 x i1> %254, <2 x i32> <i32 8, i32 8>, <2 x i32> zeroinitializer
  br label %256

256:                                              ; preds = %231, %244
  %257 = phi <2 x i32> [ %255, %244 ], [ <i32 8, i32 8>, %231 ]
  %258 = extractelement <2 x i32> %257, i32 1
  %259 = or i32 %258, %234
  %260 = extractelement <2 x i32> %257, i32 0
  %261 = or i32 %260, %236
  %262 = icmp eq i32 %261, 15
  %263 = icmp eq i32 %259, 15
  br i1 %262, label %90, label %106
}

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN13SkReduceOrder4QuadEPK7SkPointPS0_(%struct.SkPoint* nocapture readonly, %struct.SkPoint* nocapture) local_unnamed_addr #3 align 2 {
  %3 = alloca %struct.SkDQuad, align 16
  %4 = alloca %union.SkReduceOrder, align 16
  %5 = bitcast %struct.SkDQuad* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %5) #6
  %6 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %3, i64 0, i32 0, i64 1, i32 0
  %7 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %3, i64 0, i32 0, i64 2, i32 0
  %8 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fpext <2 x float> %9 to <2 x double>
  %11 = bitcast %struct.SkDQuad* %3 to <2 x double>*
  store <2 x double> %10, <2 x double>* %11, align 16
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %13 = bitcast float* %12 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = bitcast double* %6 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 16
  %17 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %18 = bitcast float* %17 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %7 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = bitcast %union.SkReduceOrder* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %22) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -1, i64 64, i1 false)
  %23 = call i32 @_ZN13SkReduceOrder6reduceERK7SkDQuad(%union.SkReduceOrder* nonnull %4, %struct.SkDQuad* nonnull dereferenceable(48) %3)
  %24 = icmp eq i32 %23, 2
  br i1 %24, label %25, label %36

25:                                               ; preds = %2
  %26 = bitcast %union.SkReduceOrder* %4 to <2 x double>*
  %27 = load <2 x double>, <2 x double>* %26, align 16
  %28 = fptrunc <2 x double> %27 to <2 x float>
  %29 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %30 = bitcast %struct.SkPoint* %1 to <2 x float>*
  store <2 x float> %28, <2 x float>* %30, align 4
  %31 = getelementptr inbounds %union.SkReduceOrder, %union.SkReduceOrder* %4, i64 0, i32 0, i32 0, i64 1, i32 0
  %32 = bitcast double* %31 to <2 x double>*
  %33 = load <2 x double>, <2 x double>* %32, align 16
  %34 = fptrunc <2 x double> %33 to <2 x float>
  %35 = bitcast %struct.SkPoint* %29 to <2 x float>*
  store <2 x float> %34, <2 x float>* %35, align 4
  br label %36

36:                                               ; preds = %25, %2
  %37 = add nsw i32 %23, -1
  %38 = shl i32 1, %37
  %39 = ashr i32 %38, 1
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %22) #6
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %5) #6
  ret i32 %39
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN13SkReduceOrder5ConicERK7SkConicP7SkPoint(%struct.SkConic* nocapture readonly dereferenceable(28), %struct.SkPoint* nocapture) local_unnamed_addr #3 align 2 {
  %3 = alloca %struct.SkDQuad, align 16
  %4 = alloca %union.SkReduceOrder, align 16
  %5 = bitcast %struct.SkDQuad* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %5) #6
  %6 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %3, i64 0, i32 0, i64 1, i32 0
  %7 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %3, i64 0, i32 0, i64 2, i32 0
  %8 = bitcast %struct.SkConic* %0 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = fpext <2 x float> %9 to <2 x double>
  %11 = bitcast %struct.SkDQuad* %3 to <2 x double>*
  store <2 x double> %10, <2 x double>* %11, align 16
  %12 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 1, i32 0
  %13 = bitcast float* %12 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fpext <2 x float> %14 to <2 x double>
  %16 = bitcast double* %6 to <2 x double>*
  store <2 x double> %15, <2 x double>* %16, align 16
  %17 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 0, i64 2, i32 0
  %18 = bitcast float* %17 to <2 x float>*
  %19 = load <2 x float>, <2 x float>* %18, align 4
  %20 = fpext <2 x float> %19 to <2 x double>
  %21 = bitcast double* %7 to <2 x double>*
  store <2 x double> %20, <2 x double>* %21, align 16
  %22 = bitcast %union.SkReduceOrder* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %22) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -1, i64 64, i1 false) #6
  %23 = call i32 @_ZN13SkReduceOrder6reduceERK7SkDQuad(%union.SkReduceOrder* nonnull %4, %struct.SkDQuad* nonnull dereferenceable(48) %3) #6
  %24 = icmp eq i32 %23, 2
  br i1 %24, label %25, label %36

25:                                               ; preds = %2
  %26 = bitcast %union.SkReduceOrder* %4 to <2 x double>*
  %27 = load <2 x double>, <2 x double>* %26, align 16
  %28 = fptrunc <2 x double> %27 to <2 x float>
  %29 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 1
  %30 = bitcast %struct.SkPoint* %1 to <2 x float>*
  store <2 x float> %28, <2 x float>* %30, align 4
  %31 = getelementptr inbounds %union.SkReduceOrder, %union.SkReduceOrder* %4, i64 0, i32 0, i32 0, i64 1, i32 0
  %32 = bitcast double* %31 to <2 x double>*
  %33 = load <2 x double>, <2 x double>* %32, align 16
  %34 = fptrunc <2 x double> %33 to <2 x float>
  %35 = bitcast %struct.SkPoint* %29 to <2 x float>*
  store <2 x float> %34, <2 x float>* %35, align 4
  br label %36

36:                                               ; preds = %2, %25
  %37 = add nsw i32 %23, -1
  %38 = shl i32 1, %37
  %39 = ashr i32 %38, 1
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %22) #6
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %5) #6
  %40 = icmp sgt i32 %38, 3
  br i1 %40, label %41, label %45

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.SkConic, %struct.SkConic* %0, i64 0, i32 1
  %43 = load float, float* %42, align 4
  %44 = fcmp oeq float %43, 1.000000e+00
  br i1 %44, label %48, label %45

45:                                               ; preds = %41, %36
  %46 = icmp eq i32 %39, 2
  %47 = select i1 %46, i32 3, i32 %39
  br label %48

48:                                               ; preds = %41, %45
  %49 = phi i32 [ %47, %45 ], [ 2, %41 ]
  ret i32 %49
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN13SkReduceOrder5CubicEPK7SkPointPS0_(%struct.SkPoint*, %struct.SkPoint* nocapture) local_unnamed_addr #3 align 2 {
  %3 = alloca %struct.SkDCubic, align 16
  %4 = alloca %union.SkReduceOrder, align 8
  %5 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %6 = tail call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8) %0, %struct.SkPoint* dereferenceable(8) %5)
  br i1 %6, label %7, label %17

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2
  %9 = tail call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8) %0, %struct.SkPoint* dereferenceable(8) %8)
  br i1 %9, label %10, label %17

10:                                               ; preds = %7
  %11 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3
  %12 = tail call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8) %0, %struct.SkPoint* dereferenceable(8) %11)
  br i1 %12, label %13, label %17

13:                                               ; preds = %10
  %14 = bitcast %struct.SkPoint* %0 to i64*
  %15 = bitcast %struct.SkPoint* %1 to i64*
  %16 = load i64, i64* %14, align 4
  store i64 %16, i64* %15, align 4
  br label %110

17:                                               ; preds = %10, %7, %2
  %18 = bitcast %struct.SkDCubic* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %18) #6
  %19 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %20 = load <2 x float>, <2 x float>* %19, align 4
  %21 = fpext <2 x float> %20 to <2 x double>
  %22 = bitcast %struct.SkDCubic* %3 to <2 x double>*
  store <2 x double> %21, <2 x double>* %22, align 16
  %23 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %24 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 1, i32 0
  %25 = bitcast float* %23 to <2 x float>*
  %26 = load <2 x float>, <2 x float>* %25, align 4
  %27 = fpext <2 x float> %26 to <2 x double>
  %28 = bitcast double* %24 to <2 x double>*
  store <2 x double> %27, <2 x double>* %28, align 16
  %29 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 2, i32 0
  %30 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 2, i32 0
  %31 = bitcast float* %29 to <2 x float>*
  %32 = load <2 x float>, <2 x float>* %31, align 4
  %33 = fpext <2 x float> %32 to <2 x double>
  %34 = bitcast double* %30 to <2 x double>*
  store <2 x double> %33, <2 x double>* %34, align 16
  %35 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 3, i32 0
  %36 = getelementptr inbounds %struct.SkDCubic, %struct.SkDCubic* %3, i64 0, i32 0, i64 3, i32 0
  %37 = bitcast float* %35 to <2 x float>*
  %38 = load <2 x float>, <2 x float>* %37, align 4
  %39 = fpext <2 x float> %38 to <2 x double>
  %40 = bitcast double* %36 to <2 x double>*
  store <2 x double> %39, <2 x double>* %40, align 16
  %41 = bitcast %union.SkReduceOrder* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %41) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %41, i8 -1, i64 64, i1 false)
  %42 = call i32 @_ZN13SkReduceOrder6reduceERK8SkDCubicNS_10QuadraticsE(%union.SkReduceOrder* nonnull %4, %struct.SkDCubic* nonnull dereferenceable(64) %3, i32 1)
  %43 = or i32 %42, 1
  %44 = icmp eq i32 %43, 3
  %45 = icmp sgt i32 %42, 0
  %46 = and i1 %44, %45
  br i1 %46, label %47, label %106

47:                                               ; preds = %17
  %48 = bitcast %union.SkReduceOrder* %4 to %struct.SkDQuad*
  %49 = zext i32 %42 to i64
  %50 = add nsw i64 %49, -1
  %51 = and i64 %49, 3
  %52 = icmp ult i64 %50, 3
  br i1 %52, label %89, label %53

53:                                               ; preds = %47
  %54 = sub nsw i64 %49, %51
  br label %55

55:                                               ; preds = %55, %53
  %56 = phi i64 [ 0, %53 ], [ %86, %55 ]
  %57 = phi %struct.SkPoint* [ %1, %53 ], [ %84, %55 ]
  %58 = phi i64 [ %54, %53 ], [ %87, %55 ]
  %59 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %48, i64 0, i32 0, i64 %56, i32 0
  %60 = bitcast double* %59 to <2 x double>*
  %61 = load <2 x double>, <2 x double>* %60, align 8
  %62 = fptrunc <2 x double> %61 to <2 x float>
  %63 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %57, i64 1
  %64 = bitcast %struct.SkPoint* %57 to <2 x float>*
  store <2 x float> %62, <2 x float>* %64, align 4
  %65 = or i64 %56, 1
  %66 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %48, i64 0, i32 0, i64 %65, i32 0
  %67 = bitcast double* %66 to <2 x double>*
  %68 = load <2 x double>, <2 x double>* %67, align 8
  %69 = fptrunc <2 x double> %68 to <2 x float>
  %70 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %57, i64 2
  %71 = bitcast %struct.SkPoint* %63 to <2 x float>*
  store <2 x float> %69, <2 x float>* %71, align 4
  %72 = or i64 %56, 2
  %73 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %48, i64 0, i32 0, i64 %72, i32 0
  %74 = bitcast double* %73 to <2 x double>*
  %75 = load <2 x double>, <2 x double>* %74, align 8
  %76 = fptrunc <2 x double> %75 to <2 x float>
  %77 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %57, i64 3
  %78 = bitcast %struct.SkPoint* %70 to <2 x float>*
  store <2 x float> %76, <2 x float>* %78, align 4
  %79 = or i64 %56, 3
  %80 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %48, i64 0, i32 0, i64 %79, i32 0
  %81 = bitcast double* %80 to <2 x double>*
  %82 = load <2 x double>, <2 x double>* %81, align 8
  %83 = fptrunc <2 x double> %82 to <2 x float>
  %84 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %57, i64 4
  %85 = bitcast %struct.SkPoint* %77 to <2 x float>*
  store <2 x float> %83, <2 x float>* %85, align 4
  %86 = add nuw nsw i64 %56, 4
  %87 = add i64 %58, -4
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %55

89:                                               ; preds = %55, %47
  %90 = phi i64 [ 0, %47 ], [ %86, %55 ]
  %91 = phi %struct.SkPoint* [ %1, %47 ], [ %84, %55 ]
  %92 = icmp eq i64 %51, 0
  br i1 %92, label %106, label %93

93:                                               ; preds = %89, %93
  %94 = phi i64 [ %103, %93 ], [ %90, %89 ]
  %95 = phi %struct.SkPoint* [ %101, %93 ], [ %91, %89 ]
  %96 = phi i64 [ %104, %93 ], [ %51, %89 ]
  %97 = getelementptr inbounds %struct.SkDQuad, %struct.SkDQuad* %48, i64 0, i32 0, i64 %94, i32 0
  %98 = bitcast double* %97 to <2 x double>*
  %99 = load <2 x double>, <2 x double>* %98, align 8
  %100 = fptrunc <2 x double> %99 to <2 x float>
  %101 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %95, i64 1
  %102 = bitcast %struct.SkPoint* %95 to <2 x float>*
  store <2 x float> %100, <2 x float>* %102, align 4
  %103 = add nuw nsw i64 %94, 1
  %104 = add i64 %96, -1
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %106, label %93, !llvm.loop !2

106:                                              ; preds = %89, %93, %17
  %107 = add nsw i32 %42, -1
  %108 = shl i32 1, %107
  %109 = ashr i32 %108, 1
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %41) #6
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %18) #6
  br label %110

110:                                              ; preds = %106, %13
  %111 = phi i32 [ 0, %13 ], [ %109, %106 ]
  ret i32 %111
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = fpext float %4 to double
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = fpext float %7 to double
  %9 = fsub double %5, %8
  %10 = tail call double @llvm.fabs.f64(double %9) #6
  %11 = fcmp olt double %10, 0x3E80000000000000
  br i1 %11, label %12, label %22

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %14 = load float, float* %13, align 4
  %15 = fpext float %14 to double
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %17 = load float, float* %16, align 4
  %18 = fpext float %17 to double
  %19 = fsub double %15, %18
  %20 = tail call double @llvm.fabs.f64(double %19) #6
  %21 = fcmp olt double %20, 0x3E80000000000000
  br i1 %21, label %71, label %22

22:                                               ; preds = %12, %2
  %23 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %4, float %7) #6
  br i1 %23, label %24, label %71

24:                                               ; preds = %22
  %25 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %28 = load float, float* %27, align 4
  %29 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %26, float %28) #6
  br i1 %29, label %30, label %71

30:                                               ; preds = %24
  %31 = load float, float* %3, align 4
  %32 = fpext float %31 to double
  %33 = load float, float* %25, align 4
  %34 = fpext float %33 to double
  %35 = load float, float* %6, align 4
  %36 = fpext float %35 to double
  %37 = load float, float* %27, align 4
  %38 = fpext float %37 to double
  %39 = fsub double %32, %36
  %40 = fsub double %34, %38
  %41 = fmul double %39, %39
  %42 = fmul double %40, %40
  %43 = fadd double %41, %42
  %44 = tail call double @sqrt(double %43) #6
  %45 = load float, float* %6, align 4
  %46 = load float, float* %3, align 4
  %47 = fcmp olt float %45, %46
  %48 = load float, float* %25, align 4
  %49 = select i1 %47, float %45, float %46
  %50 = fcmp olt float %48, %49
  %51 = load float, float* %27, align 4
  %52 = select i1 %50, float %48, float %49
  %53 = fcmp olt float %51, %52
  %54 = select i1 %53, float %51, float %52
  %55 = fcmp olt float %46, %45
  %56 = load float, float* %6, align 4
  %57 = load float, float* %3, align 4
  %58 = select i1 %55, float %56, float %57
  %59 = fcmp olt float %58, %48
  %60 = load float, float* %25, align 4
  %61 = select i1 %59, float %60, float %58
  %62 = fcmp olt float %61, %51
  %63 = load float, float* %27, align 4
  %64 = select i1 %62, float %63, float %61
  %65 = fsub float -0.000000e+00, %54
  %66 = fcmp olt float %64, %65
  %67 = select i1 %66, float %65, float %64
  %68 = fpext float %67 to double
  %69 = fadd double %44, %68
  %70 = tail call zeroext i1 @_Z16AlmostDequalUlpsdd(double %68, double %69) #6
  br label %71

71:                                               ; preds = %22, %24, %12, %30
  %72 = phi i1 [ %70, %30 ], [ true, %12 ], [ false, %24 ], [ false, %22 ]
  ret i1 %72
}

declare zeroext i1 @_Z15AlmostEqualUlpsff(float, float) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint*, %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = fsub double %4, %6
  %8 = tail call double @llvm.fabs.f64(double %7) #6
  %9 = fcmp olt double %8, 0x3E80000000000000
  br i1 %9, label %10, label %18

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %12 = load double, double* %11, align 8
  %13 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %14 = load double, double* %13, align 8
  %15 = fsub double %12, %14
  %16 = tail call double @llvm.fabs.f64(double %15) #6
  %17 = fcmp olt double %16, 0x3E80000000000000
  br i1 %17, label %68, label %18

18:                                               ; preds = %10, %2
  %19 = fptrunc double %4 to float
  %20 = fptrunc double %6 to float
  %21 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %19, float %20) #6
  br i1 %21, label %22, label %68

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %24 = load double, double* %23, align 8
  %25 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %26 = load double, double* %25, align 8
  %27 = fptrunc double %24 to float
  %28 = fptrunc double %26 to float
  %29 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %27, float %28) #6
  br i1 %29, label %30, label %68

30:                                               ; preds = %22
  %31 = load double, double* %3, align 8
  %32 = load double, double* %5, align 8
  %33 = fsub double %31, %32
  %34 = load double, double* %23, align 8
  %35 = load double, double* %25, align 8
  %36 = fsub double %34, %35
  %37 = fmul double %33, %33
  %38 = fmul double %36, %36
  %39 = fadd double %37, %38
  %40 = tail call double @sqrt(double %39) #6
  %41 = load double, double* %5, align 8
  %42 = load double, double* %3, align 8
  %43 = fcmp olt double %41, %42
  %44 = load double, double* %23, align 8
  %45 = select i1 %43, double %41, double %42
  %46 = fcmp olt double %44, %45
  %47 = load double, double* %25, align 8
  %48 = select i1 %46, double %44, double %45
  %49 = fcmp olt double %47, %48
  %50 = select i1 %49, double %47, double %48
  %51 = fcmp olt double %42, %41
  %52 = load double, double* %5, align 8
  %53 = load double, double* %3, align 8
  %54 = select i1 %51, double %52, double %53
  %55 = fcmp olt double %54, %44
  %56 = load double, double* %23, align 8
  %57 = select i1 %55, double %56, double %54
  %58 = fcmp olt double %57, %47
  %59 = load double, double* %25, align 8
  %60 = select i1 %58, double %59, double %57
  %61 = fsub double -0.000000e+00, %50
  %62 = fcmp olt double %60, %61
  %63 = select i1 %62, double %61, double %60
  %64 = fadd double %40, %63
  %65 = fptrunc double %63 to float
  %66 = fptrunc double %64 to float
  %67 = tail call zeroext i1 @_Z16AlmostPequalUlpsff(float %65, float %66) #6
  br label %68

68:                                               ; preds = %18, %22, %10, %30
  %69 = phi i1 [ %67, %30 ], [ true, %10 ], [ false, %22 ], [ false, %18 ]
  ret i1 %69
}

declare zeroext i1 @_Z16RoughlyEqualUlpsff(float, float) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #5

declare zeroext i1 @_Z16AlmostPequalUlpsff(float, float) local_unnamed_addr #4

declare zeroext i1 @_ZNK7SkDQuad8isLinearEii(%struct.SkDQuad*, i32, i32) local_unnamed_addr #4

declare zeroext i1 @_ZNK8SkDCubic8isLinearEii(%struct.SkDCubic*, i32, i32) local_unnamed_addr #4

declare zeroext i1 @_Z19AlmostEqualUlps_Pinff(float, float) local_unnamed_addr #4

declare zeroext i1 @_Z16AlmostDequalUlpsdd(double, double) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.fabs.v2f64(<2 x double>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
