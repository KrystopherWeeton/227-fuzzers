; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/round.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/round.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteRegistration = type { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, {}*, {}*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%"class.tflite::RuntimeShape" = type { i32, %union.anon }
%union.anon = type { i32*, [16 x i8] }

@.str = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%d != %d)\00", align 1
@.str.3 = private unnamed_addr constant [62 x i8] c"../../third_party/tflite/src/tensorflow/lite/kernels/round.cc\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"NumInputs(node)\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"NumOutputs(node)\00", align 1
@.str.7 = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%s != %s)\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"input->type\00", align 1
@.str.9 = private unnamed_addr constant [15 x i8] c"kTfLiteFloat32\00", align 1
@_ZZN6tflite3ops7builtin14Register_ROUNDEvE1r = internal global { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 } { i8* (%struct.TfLiteContext*, i8*, i64)* null, void (%struct.TfLiteContext*, i8*)* null, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin5round7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin5round4EvalEP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin5round7PrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %4 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %5 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %10 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %9, align 8
  %11 = sext i32 %6 to i64
  %12 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %10, i64 %11
  br label %13

13:                                               ; preds = %2, %8
  %14 = phi %struct.TfLiteTensor* [ %12, %8 ], [ null, %2 ]
  %15 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %16 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %15, align 8
  %17 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %16, i64 0, i32 1, i64 0
  %18 = load i32, i32* %17, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %25, label %20

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %22 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %21, align 8
  %23 = sext i32 %18 to i64
  %24 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %22, i64 %23
  br label %25

25:                                               ; preds = %13, %20
  %26 = phi %struct.TfLiteTensor* [ %24, %20 ], [ null, %13 ]
  %27 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 1
  br i1 %29, label %33, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %32 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %31, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %32(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i64 0, i64 0), i32 35, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %28, i32 1) #7
  br label %57

33:                                               ; preds = %25
  %34 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %16, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = icmp eq i32 %35, 1
  br i1 %36, label %40, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %39 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %38, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %39(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i64 0, i64 0), i32 36, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %35, i32 1) #7
  br label %57

40:                                               ; preds = %33
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %14, i64 0, i32 0
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i32 %42, 1
  br i1 %43, label %49, label %44

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %46 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %45, align 8
  %47 = tail call i8* @TfLiteTypeGetName(i32 %42) #7
  %48 = tail call i8* @TfLiteTypeGetName(i32 1) #7
  tail call void (%struct.TfLiteContext*, i8*, ...) %46(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i64 0, i64 0), i32 37, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i8* %47, i8* %48) #7
  br label %57

49:                                               ; preds = %40
  %50 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 0, i32 0
  store i32 1, i32* %50, align 8
  %51 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %14, i64 0, i32 2
  %52 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %51, align 8
  %53 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray* %52) #7
  %54 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %55 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %54, align 8
  %56 = tail call i32 %55(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %26, %struct.TfLiteIntArray* %53) #7
  br label %57

57:                                               ; preds = %49, %44, %37, %30
  %58 = phi i32 [ 1, %30 ], [ 1, %37 ], [ 1, %44 ], [ %56, %49 ]
  ret i32 %58
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @TfLiteTypeGetName(i32) local_unnamed_addr #2

declare %struct.TfLiteIntArray* @TfLiteIntArrayCopy(%struct.TfLiteIntArray*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin5round4EvalEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext* nocapture readonly, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %6 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %5, align 8
  %7 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %6, i64 0, i32 1, i64 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %15, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %12 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %11, align 8
  %13 = sext i32 %8 to i64
  %14 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %12, i64 %13
  br label %15

15:                                               ; preds = %2, %10
  %16 = phi %struct.TfLiteTensor* [ %14, %10 ], [ null, %2 ]
  %17 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %18 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %17, align 8
  %19 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %18, i64 0, i32 1, i64 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %15
  %23 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %24 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %23, align 8
  %25 = sext i32 %20 to i64
  %26 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %24, i64 %25
  br label %27

27:                                               ; preds = %15, %22
  %28 = phi %struct.TfLiteTensor* [ %26, %22 ], [ null, %15 ]
  %29 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %29) #7
  %30 = icmp eq %struct.TfLiteTensor* %16, null
  br i1 %30, label %31, label %33

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %32, align 8, !alias.scope !2
  br label %62

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 2
  %35 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %34, align 8, !noalias !2
  %36 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %35, i64 0, i32 0
  %37 = load i32, i32* %36, align 4, !noalias !2
  %38 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %35, i64 0, i32 1, i64 0
  %39 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %37, i32* %39, align 8, !alias.scope !2
  %40 = icmp sgt i32 %37, 5
  br i1 %40, label %41, label %48

41:                                               ; preds = %33
  %42 = sext i32 %37 to i64
  %43 = shl nsw i64 %42, 2
  %44 = tail call i8* @_Znam(i64 %43) #8, !noalias !2
  %45 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %46 = bitcast i32** %45 to i8**
  store i8* %44, i8** %46, align 8, !alias.scope !2
  %47 = bitcast i8* %44 to i32*
  br label %53

48:                                               ; preds = %33
  %49 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %50 = bitcast %union.anon* %49 to i32*
  %51 = sext i32 %37 to i64
  %52 = shl nsw i64 %51, 2
  br label %53

53:                                               ; preds = %48, %41
  %54 = phi i64 [ %43, %41 ], [ %52, %48 ]
  %55 = phi i32* [ %47, %41 ], [ %50, %48 ]
  %56 = bitcast i32* %55 to i8*
  %57 = bitcast i32* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %56, i8* align 4 %57, i64 %54, i1 false) #7
  %58 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %16, i64 0, i32 1
  %59 = bitcast %union.TfLitePtrUnion* %58 to float**
  %60 = load float*, float** %59, align 8
  %61 = bitcast float* %60 to i8*
  br label %62

62:                                               ; preds = %31, %53
  %63 = phi i32 [ %37, %53 ], [ 0, %31 ]
  %64 = phi i8* [ %61, %53 ], [ null, %31 ]
  %65 = phi float* [ %60, %53 ], [ null, %31 ]
  %66 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %66) #7
  %67 = icmp eq %struct.TfLiteTensor* %28, null
  br i1 %67, label %68, label %70

68:                                               ; preds = %62
  %69 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %69, align 8, !alias.scope !5
  br label %99

70:                                               ; preds = %62
  %71 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 2
  %72 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %71, align 8, !noalias !5
  %73 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %72, i64 0, i32 0
  %74 = load i32, i32* %73, align 4, !noalias !5
  %75 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %72, i64 0, i32 1, i64 0
  %76 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %74, i32* %76, align 8, !alias.scope !5
  %77 = icmp sgt i32 %74, 5
  br i1 %77, label %78, label %85

78:                                               ; preds = %70
  %79 = sext i32 %74 to i64
  %80 = shl nsw i64 %79, 2
  %81 = tail call i8* @_Znam(i64 %80) #8, !noalias !5
  %82 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %83 = bitcast i32** %82 to i8**
  store i8* %81, i8** %83, align 8, !alias.scope !5
  %84 = bitcast i8* %81 to i32*
  br label %90

85:                                               ; preds = %70
  %86 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %87 = bitcast %union.anon* %86 to i32*
  %88 = sext i32 %74 to i64
  %89 = shl nsw i64 %88, 2
  br label %90

90:                                               ; preds = %85, %78
  %91 = phi i64 [ %80, %78 ], [ %89, %85 ]
  %92 = phi i32* [ %84, %78 ], [ %87, %85 ]
  %93 = bitcast i32* %92 to i8*
  %94 = bitcast i32* %75 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %93, i8* align 4 %94, i64 %91, i1 false) #7
  %95 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %28, i64 0, i32 1
  %96 = bitcast %union.TfLitePtrUnion* %95 to float**
  %97 = load float*, float** %96, align 8
  %98 = bitcast float* %97 to i8*
  br label %99

99:                                               ; preds = %68, %90
  %100 = phi i32 [ %74, %90 ], [ 0, %68 ]
  %101 = phi i8* [ %98, %90 ], [ null, %68 ]
  %102 = phi float* [ %97, %90 ], [ null, %68 ]
  %103 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %104 = icmp sgt i32 %63, 5
  br i1 %104, label %105, label %108

105:                                              ; preds = %99
  %106 = getelementptr inbounds %union.anon, %union.anon* %103, i64 0, i32 0
  %107 = load i32*, i32** %106, align 8
  br label %111

108:                                              ; preds = %99
  %109 = bitcast %union.anon* %103 to i32*
  %110 = icmp sgt i32 %63, 0
  br i1 %110, label %111, label %214

111:                                              ; preds = %108, %105
  %112 = phi i32* [ %107, %105 ], [ %109, %108 ]
  %113 = zext i32 %63 to i64
  %114 = icmp ult i32 %63, 8
  br i1 %114, label %200, label %115

115:                                              ; preds = %111
  %116 = and i64 %113, 4294967288
  %117 = add nsw i64 %116, -8
  %118 = lshr exact i64 %117, 3
  %119 = add nuw nsw i64 %118, 1
  %120 = and i64 %119, 3
  %121 = icmp ult i64 %117, 24
  br i1 %121, label %167, label %122

122:                                              ; preds = %115
  %123 = sub nsw i64 %119, %120
  br label %124

124:                                              ; preds = %124, %122
  %125 = phi i64 [ 0, %122 ], [ %164, %124 ]
  %126 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %122 ], [ %162, %124 ]
  %127 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %122 ], [ %163, %124 ]
  %128 = phi i64 [ %123, %122 ], [ %165, %124 ]
  %129 = getelementptr inbounds i32, i32* %112, i64 %125
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 4
  %132 = getelementptr inbounds i32, i32* %129, i64 4
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 4
  %135 = mul nsw <4 x i32> %131, %126
  %136 = mul nsw <4 x i32> %134, %127
  %137 = or i64 %125, 8
  %138 = getelementptr inbounds i32, i32* %112, i64 %137
  %139 = bitcast i32* %138 to <4 x i32>*
  %140 = load <4 x i32>, <4 x i32>* %139, align 4
  %141 = getelementptr inbounds i32, i32* %138, i64 4
  %142 = bitcast i32* %141 to <4 x i32>*
  %143 = load <4 x i32>, <4 x i32>* %142, align 4
  %144 = mul nsw <4 x i32> %140, %135
  %145 = mul nsw <4 x i32> %143, %136
  %146 = or i64 %125, 16
  %147 = getelementptr inbounds i32, i32* %112, i64 %146
  %148 = bitcast i32* %147 to <4 x i32>*
  %149 = load <4 x i32>, <4 x i32>* %148, align 4
  %150 = getelementptr inbounds i32, i32* %147, i64 4
  %151 = bitcast i32* %150 to <4 x i32>*
  %152 = load <4 x i32>, <4 x i32>* %151, align 4
  %153 = mul nsw <4 x i32> %149, %144
  %154 = mul nsw <4 x i32> %152, %145
  %155 = or i64 %125, 24
  %156 = getelementptr inbounds i32, i32* %112, i64 %155
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 4
  %159 = getelementptr inbounds i32, i32* %156, i64 4
  %160 = bitcast i32* %159 to <4 x i32>*
  %161 = load <4 x i32>, <4 x i32>* %160, align 4
  %162 = mul nsw <4 x i32> %158, %153
  %163 = mul nsw <4 x i32> %161, %154
  %164 = add i64 %125, 32
  %165 = add i64 %128, -4
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %167, label %124, !llvm.loop !8

167:                                              ; preds = %124, %115
  %168 = phi <4 x i32> [ undef, %115 ], [ %162, %124 ]
  %169 = phi <4 x i32> [ undef, %115 ], [ %163, %124 ]
  %170 = phi i64 [ 0, %115 ], [ %164, %124 ]
  %171 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %115 ], [ %162, %124 ]
  %172 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %115 ], [ %163, %124 ]
  %173 = icmp eq i64 %120, 0
  br i1 %173, label %190, label %174

174:                                              ; preds = %167, %174
  %175 = phi i64 [ %187, %174 ], [ %170, %167 ]
  %176 = phi <4 x i32> [ %185, %174 ], [ %171, %167 ]
  %177 = phi <4 x i32> [ %186, %174 ], [ %172, %167 ]
  %178 = phi i64 [ %188, %174 ], [ %120, %167 ]
  %179 = getelementptr inbounds i32, i32* %112, i64 %175
  %180 = bitcast i32* %179 to <4 x i32>*
  %181 = load <4 x i32>, <4 x i32>* %180, align 4
  %182 = getelementptr inbounds i32, i32* %179, i64 4
  %183 = bitcast i32* %182 to <4 x i32>*
  %184 = load <4 x i32>, <4 x i32>* %183, align 4
  %185 = mul nsw <4 x i32> %181, %176
  %186 = mul nsw <4 x i32> %184, %177
  %187 = add i64 %175, 8
  %188 = add i64 %178, -1
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %190, label %174, !llvm.loop !10

190:                                              ; preds = %174, %167
  %191 = phi <4 x i32> [ %168, %167 ], [ %185, %174 ]
  %192 = phi <4 x i32> [ %169, %167 ], [ %186, %174 ]
  %193 = mul <4 x i32> %192, %191
  %194 = shufflevector <4 x i32> %193, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %195 = mul <4 x i32> %193, %194
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %197 = mul <4 x i32> %195, %196
  %198 = extractelement <4 x i32> %197, i32 0
  %199 = icmp eq i64 %116, %113
  br i1 %199, label %211, label %200

200:                                              ; preds = %190, %111
  %201 = phi i64 [ 0, %111 ], [ %116, %190 ]
  %202 = phi i32 [ 1, %111 ], [ %198, %190 ]
  br label %203

203:                                              ; preds = %200, %203
  %204 = phi i64 [ %209, %203 ], [ %201, %200 ]
  %205 = phi i32 [ %208, %203 ], [ %202, %200 ]
  %206 = getelementptr inbounds i32, i32* %112, i64 %204
  %207 = load i32, i32* %206, align 4
  %208 = mul nsw i32 %207, %205
  %209 = add nuw nsw i64 %204, 1
  %210 = icmp eq i64 %209, %113
  br i1 %210, label %211, label %203, !llvm.loop !12

211:                                              ; preds = %203, %190
  %212 = phi i32 [ %198, %190 ], [ %208, %203 ]
  %213 = icmp sgt i32 %212, 0
  br i1 %213, label %214, label %274

214:                                              ; preds = %211, %108
  %215 = phi i32 [ %212, %211 ], [ 1, %108 ]
  %216 = zext i32 %215 to i64
  %217 = icmp ult i32 %215, 4
  br i1 %217, label %252, label %218

218:                                              ; preds = %214
  %219 = getelementptr float, float* %102, i64 %216
  %220 = bitcast float* %219 to i8*
  %221 = getelementptr float, float* %65, i64 %216
  %222 = bitcast float* %221 to i8*
  %223 = icmp ult i8* %101, %222
  %224 = icmp ult i8* %64, %220
  %225 = and i1 %223, %224
  br i1 %225, label %252, label %226

226:                                              ; preds = %218
  %227 = and i64 %216, 4294967292
  br label %228

228:                                              ; preds = %228, %226
  %229 = phi i64 [ 0, %226 ], [ %248, %228 ]
  %230 = getelementptr inbounds float, float* %65, i64 %229
  %231 = bitcast float* %230 to <4 x float>*
  %232 = load <4 x float>, <4 x float>* %231, align 4, !alias.scope !14
  %233 = call <4 x float> @llvm.floor.v4f32(<4 x float> %232)
  %234 = fsub <4 x float> %232, %233
  %235 = fcmp olt <4 x float> %234, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %236 = fcmp oeq <4 x float> %234, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %237 = fptosi <4 x float> %233 to <4 x i32>
  %238 = and <4 x i32> %237, <i32 1, i32 1, i32 1, i32 1>
  %239 = icmp eq <4 x i32> %238, zeroinitializer
  %240 = fadd <4 x float> %233, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %241 = xor <4 x i1> %235, <i1 true, i1 true, i1 true, i1 true>
  %242 = and <4 x i1> %236, %241
  %243 = and <4 x i1> %239, %242
  %244 = or <4 x i1> %235, %243
  %245 = select <4 x i1> %244, <4 x float> %233, <4 x float> %240
  %246 = getelementptr inbounds float, float* %102, i64 %229
  %247 = bitcast float* %246 to <4 x float>*
  store <4 x float> %245, <4 x float>* %247, align 4, !alias.scope !17, !noalias !14
  %248 = add i64 %229, 4
  %249 = icmp eq i64 %248, %227
  br i1 %249, label %250, label %228, !llvm.loop !19

250:                                              ; preds = %228
  %251 = icmp eq i64 %227, %216
  br i1 %251, label %274, label %252

252:                                              ; preds = %250, %218, %214
  %253 = phi i64 [ 0, %218 ], [ 0, %214 ], [ %227, %250 ]
  br label %254

254:                                              ; preds = %252, %269
  %255 = phi i64 [ %272, %269 ], [ %253, %252 ]
  %256 = getelementptr inbounds float, float* %65, i64 %255
  %257 = load float, float* %256, align 4
  %258 = tail call float @llvm.floor.f32(float %257) #7
  %259 = fsub float %257, %258
  %260 = fcmp olt float %259, 5.000000e-01
  br i1 %260, label %269, label %261

261:                                              ; preds = %254
  %262 = fcmp oeq float %259, 5.000000e-01
  br i1 %262, label %263, label %267

263:                                              ; preds = %261
  %264 = fptosi float %258 to i32
  %265 = and i32 %264, 1
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %269, label %267

267:                                              ; preds = %263, %261
  %268 = fadd float %258, 1.000000e+00
  br label %269

269:                                              ; preds = %267, %263, %254
  %270 = phi float [ %268, %267 ], [ %258, %263 ], [ %258, %254 ]
  %271 = getelementptr inbounds float, float* %102, i64 %255
  store float %270, float* %271, align 4
  %272 = add nuw nsw i64 %255, 1
  %273 = icmp eq i64 %272, %216
  br i1 %273, label %274, label %254, !llvm.loop !20

274:                                              ; preds = %269, %250, %211
  %275 = icmp sgt i32 %100, 5
  br i1 %275, label %276, label %282

276:                                              ; preds = %274
  %277 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %278 = load i32*, i32** %277, align 8
  %279 = icmp eq i32* %278, null
  br i1 %279, label %282, label %280

280:                                              ; preds = %276
  %281 = bitcast i32* %278 to i8*
  tail call void @_ZdaPv(i8* %281) #8
  br label %282

282:                                              ; preds = %274, %276, %280
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %66) #7
  br i1 %104, label %283, label %289

283:                                              ; preds = %282
  %284 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %285 = load i32*, i32** %284, align 8
  %286 = icmp eq i32* %285, null
  br i1 %286, label %289, label %287

287:                                              ; preds = %283
  %288 = bitcast i32* %285 to i8*
  tail call void @_ZdaPv(i8* %288) #8
  br label %289

289:                                              ; preds = %282, %283, %287
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %29) #7
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin14Register_ROUNDEv() local_unnamed_addr #3 {
  ret %struct.TfLiteRegistration* bitcast ({ i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }* @_ZZN6tflite3ops7builtin14Register_ROUNDEvE1r to %struct.TfLiteRegistration*)
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.floor.v4f32(<4 x float>) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!4 = distinct !{!4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!7 = distinct !{!7, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !13, !9}
!13 = !{!"llvm.loop.unroll.runtime.disable"}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !9}
!20 = distinct !{!20, !9}
