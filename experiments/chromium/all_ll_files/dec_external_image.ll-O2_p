; ModuleID = '../../third_party/libjxl/src/lib/jxl/dec_external_image.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/dec_external_image.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.hwy::float16_t" = type { i16 }
%"struct.hwy::ChosenTarget" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.195" }
%"struct.std::__1::__atomic_base.195" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.jxl::ImageBundle" = type { %"class.std::__1::unique_ptr", i32, [4 x i8], %"struct.jxl::YCbCrChromaSubsampling", %"struct.jxl::FrameOrigin", i32, i8, i8, %"class.std::__1::basic_string", %"struct.jxl::ImageMetadata"*, %"class.jxl::Image3", %"struct.jxl::ColorEncoding", %"class.std::__1::vector.128", i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.jxl::jpeg::JPEGData"* }
%"struct.jxl::jpeg::JPEGData" = type { %"class.jxl::Fields", i32, i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.53", %"class.std::__1::vector", %"class.std::__1::vector.60", %"class.std::__1::vector.67", %"class.std::__1::vector.76", %"class.std::__1::vector.90", %"class.std::__1::vector.43", %"class.std::__1::vector", %"class.std::__1::vector.43", i32, i8, %"class.std::__1::vector.43" }
%"class.jxl::Fields" = type { i32 (...)** }
%"class.std::__1::vector.53" = type { %"class.std::__1::__vector_base.54" }
%"class.std::__1::__vector_base.54" = type { i32*, i32*, %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { i32* }
%"class.std::__1::vector.60" = type { %"class.std::__1::__vector_base.61" }
%"class.std::__1::__vector_base.61" = type { %"struct.jxl::jpeg::JPEGQuantTable"*, %"struct.jxl::jpeg::JPEGQuantTable"*, %"class.std::__1::__compressed_pair.62" }
%"struct.jxl::jpeg::JPEGQuantTable" = type <{ %"struct.std::__1::array", i32, i32, i8, [3 x i8] }>
%"struct.std::__1::array" = type { [64 x i32] }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"struct.jxl::jpeg::JPEGQuantTable"* }
%"class.std::__1::vector.67" = type { %"class.std::__1::__vector_base.68" }
%"class.std::__1::__vector_base.68" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"struct.jxl::jpeg::JPEGHuffmanCode"*, %"class.std::__1::__compressed_pair.71" }
%"struct.jxl::jpeg::JPEGHuffmanCode" = type <{ %"struct.std::__1::array.69", %"struct.std::__1::array.70", i32, i8, [3 x i8] }>
%"struct.std::__1::array.69" = type { [17 x i32] }
%"struct.std::__1::array.70" = type { [257 x i32] }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"struct.jxl::jpeg::JPEGHuffmanCode"* }
%"class.std::__1::vector.76" = type { %"class.std::__1::__vector_base.77" }
%"class.std::__1::__vector_base.77" = type { %"struct.jxl::jpeg::JPEGComponent"*, %"struct.jxl::jpeg::JPEGComponent"*, %"class.std::__1::__compressed_pair.85" }
%"struct.jxl::jpeg::JPEGComponent" = type { i32, i32, i32, i32, i32, i32, %"class.std::__1::vector.78" }
%"class.std::__1::vector.78" = type { %"class.std::__1::__vector_base.79" }
%"class.std::__1::__vector_base.79" = type { i16*, i16*, %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { i16* }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"struct.jxl::jpeg::JPEGComponent"* }
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { %"struct.jxl::jpeg::JPEGScanInfo"*, %"struct.jxl::jpeg::JPEGScanInfo"*, %"class.std::__1::__compressed_pair.107" }
%"struct.jxl::jpeg::JPEGScanInfo" = type { i32, i32, i32, i32, i32, %"struct.std::__1::array.92", i32, %"class.std::__1::vector.93", %"class.std::__1::vector.100" }
%"struct.std::__1::array.92" = type { [4 x %"struct.jxl::jpeg::JPEGComponentScanInfo"] }
%"struct.jxl::jpeg::JPEGComponentScanInfo" = type { i32, i32, i32 }
%"class.std::__1::vector.93" = type { %"class.std::__1::__vector_base.94" }
%"class.std::__1::__vector_base.94" = type { i32*, i32*, %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { i32* }
%"class.std::__1::vector.100" = type { %"class.std::__1::__vector_base.101" }
%"class.std::__1::__vector_base.101" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"*, %"class.std::__1::__compressed_pair.102" }
%"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo" = type { i32, i32 }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"struct.jxl::jpeg::JPEGScanInfo::ExtraZeroRunInfo"* }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"struct.jxl::jpeg::JPEGScanInfo"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"*, %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.std::__1::vector.43"* }
%"class.std::__1::vector.43" = type { %"class.std::__1::__vector_base.44" }
%"class.std::__1::__vector_base.44" = type { i8*, i8*, %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { i8* }
%"struct.jxl::YCbCrChromaSubsampling" = type <{ %"class.jxl::Fields", [3 x i32], i8, i8, [2 x i8] }>
%"struct.jxl::FrameOrigin" = type { i32, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.jxl::ImageMetadata" = type <{ %"class.jxl::Fields", i8, [7 x i8], %"struct.jxl::BitDepth", i8, i8, [6 x i8], %"struct.jxl::ColorEncoding", i32, i8, i8, i8, i8, %"class.jxl::SizeHeader", %"struct.jxl::ToneMapping", i32, [4 x i8], %"class.std::__1::vector.121", %"struct.jxl::CustomTransformData", %"class.jxl::PreviewHeader", %"struct.jxl::AnimationHeader", i64, i8, [7 x i8] }>
%"struct.jxl::BitDepth" = type <{ %"class.jxl::Fields", i8, [3 x i8], i32, i32, [4 x i8] }>
%"class.jxl::SizeHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::ToneMapping" = type <{ %"class.jxl::Fields", i8, [3 x i8], float, float, i8, [3 x i8], float, [4 x i8] }>
%"class.std::__1::vector.121" = type { %"class.std::__1::__vector_base.122" }
%"class.std::__1::__vector_base.122" = type { %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"*, %"class.std::__1::__compressed_pair.123" }
%"struct.jxl::ExtraChannelInfo" = type { %"class.jxl::Fields", i8, i32, %"struct.jxl::BitDepth", i32, %"class.std::__1::basic_string", i8, [4 x float], i32 }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"struct.jxl::ExtraChannelInfo"* }
%"struct.jxl::CustomTransformData" = type <{ %"class.jxl::Fields", i8, i8, [6 x i8], %"struct.jxl::OpsinInverseMatrix", i32, [15 x float], [55 x float], [210 x float], [4 x i8] }>
%"struct.jxl::OpsinInverseMatrix" = type <{ %"class.jxl::Fields", i8, [3 x i8], [9 x float], [3 x float], [4 x float], [4 x i8] }>
%"class.jxl::PreviewHeader" = type { %"class.jxl::Fields", i8, i32, i32, i32, i32, i32 }
%"struct.jxl::AnimationHeader" = type <{ %"class.jxl::Fields", i32, i32, i32, i8, [3 x i8] }>
%"class.jxl::Image3" = type { [3 x %"class.jxl::Plane"] }
%"class.jxl::Plane" = type { %"struct.jxl::PlaneBase" }
%"struct.jxl::PlaneBase" = type { i32, i32, i32, i32, i64, %"class.std::__1::unique_ptr.118" }
%"class.std::__1::unique_ptr.118" = type { %"class.std::__1::__compressed_pair.119" }
%"class.std::__1::__compressed_pair.119" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.jxl::ColorEncoding" = type { %"class.jxl::Fields", i8, i32, i32, %"struct.jxl::CustomTransferFunction", i32, i8, i8, %"class.jxl::PaddedBytes", i32, %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy", %"struct.jxl::Customxy" }
%"struct.jxl::CustomTransferFunction" = type { %"class.jxl::Fields", i32, i8, i32, i32 }
%"class.jxl::PaddedBytes" = type { i64, i64, %"class.std::__1::unique_ptr.118" }
%"struct.jxl::Customxy" = type { %"class.jxl::Fields", i32, i32 }
%"class.std::__1::vector.128" = type { %"class.std::__1::__vector_base.129" }
%"class.std::__1::__vector_base.129" = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.131" }
%"struct.std::__1::__compressed_pair_elem.131" = type { %"class.jxl::Plane"* }
%"class.jxl::ThreadPool" = type { i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i8* }
%"class.jxl::ThreadPool::RunCallState.189" = type { %class.anon.136*, %class.anon.137* }
%class.anon.136 = type { %"class.jxl::Plane.135"*, i64*, i64*, %class.anon* }
%"class.jxl::Plane.135" = type { %"struct.jxl::PlaneBase" }
%class.anon = type { void (i8*, i64, i64, i64, i8*)**, %"class.std::__1::vector"*, i64* }
%class.anon.137 = type { i64*, %"class.jxl::Image3"**, i8*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"**, %"class.jxl::Plane"*, i64*, %"class.jxl::Plane.135"*, i64*, void (i8*, i64, i64, i64, i8*)**, %"class.std::__1::vector"*, i8**, i64*, i8*, i8** }
%"class.jxl::ThreadPool::RunCallState.196" = type { %class.anon.138*, %class.anon.139* }
%class.anon.138 = type { %class.anon* }
%class.anon.139 = type { void (i8*, i64, i64, i64, i8*)**, %"class.std::__1::vector"*, i8**, i64*, i64*, %"class.jxl::Image3"**, i8*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"**, %"class.jxl::Plane"*, i64*, i8*, i64*, i8** }
%"class.jxl::ThreadPool::RunCallState.197" = type { %class.anon.141*, %class.anon.142* }
%class.anon.141 = type { %"class.jxl::Plane.140"*, i64*, i64*, %class.anon* }
%"class.jxl::Plane.140" = type { %"struct.jxl::PlaneBase" }
%class.anon.142 = type { void (i8*, i64, i64, i64, i8*)**, %"class.std::__1::vector"*, i8**, i64*, i64*, %"class.jxl::Image3"**, i8*, %"class.jxl::ImageBundle"*, %"class.jxl::Plane"**, %"class.jxl::Plane"*, i64*, %"class.jxl::Plane.140"*, i64*, float*, i64*, i8*, i8** }
%"class.jxl::ThreadPool::RunCallState.187" = type { i32 (i64)*, %class.anon.181* }
%class.anon.181 = type { %"class.jxl::Plane"*, i64*, %"class.jxl::Plane"*, i64* }
%"class.jxl::ThreadPool::RunCallState.186" = type { i32 (i64)*, %class.anon.180* }
%class.anon.180 = type { %"class.jxl::Plane"*, i64*, %"class.jxl::Plane"*, i64* }
%"class.jxl::ThreadPool::RunCallState.185" = type { i32 (i64)*, %class.anon.179* }
%class.anon.179 = type { %"class.jxl::Plane"*, i64*, %"class.jxl::Plane"* }
%"class.jxl::ThreadPool::RunCallState.184" = type { i32 (i64)*, %class.anon.178* }
%class.anon.178 = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, i64*, i64* }
%"class.jxl::ThreadPool::RunCallState.183" = type { i32 (i64)*, %class.anon.177* }
%class.anon.177 = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, i64*, i64* }
%"class.jxl::ThreadPool::RunCallState" = type { i32 (i64)*, %class.anon.176* }
%class.anon.176 = type { %"class.jxl::Plane"*, %"class.jxl::Plane"*, i64* }
%"class.jxl::ThreadPool::RunCallState.188" = type { i32 (i64)*, %class.anon.182* }
%class.anon.182 = type { %"class.jxl::Plane"*, i64*, %"class.jxl::Plane"* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN3jxl10ThreadPool14ReturnTrueInitEm = comdat any

$_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

@.str.1 = private unnamed_addr constant [59 x i8] c"../../third_party/libjxl/src/lib/jxl/dec_external_image.cc\00", align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"ConvertF16\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"ConvertFloat\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"ConvertUint\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"UndoOrientation\00", align 1
@.str.10 = private unnamed_addr constant [23 x i8] c"%s:%d: JXL_ASSERT: %s\0A\00", align 1
@.str.14 = private unnamed_addr constant [18 x i8] c"c == num_channels\00", align 1
@_ZN3jxlL30FloatToF16HighwayDispatchTableE = internal unnamed_addr constant [12 x void (float*, %"struct.hwy::float16_t"*, i64)*] [void (float*, %"struct.hwy::float16_t"*, i64)* @_ZN3hwy13FunctionCacheIvJPKfPNS_9float16_tEmEE13ChooseAndCallIXadL_ZN3jxlL30FloatToF16HighwayDispatchTableEEEEEvS2_S4_m, void (float*, %"struct.hwy::float16_t"*, i64)* null, void (float*, %"struct.hwy::float16_t"*, i64)* null, void (float*, %"struct.hwy::float16_t"*, i64)* null, void (float*, %"struct.hwy::float16_t"*, i64)* @_ZN3jxl6N_AVX310FloatToF16EPKfPN3hwy9float16_tEm, void (float*, %"struct.hwy::float16_t"*, i64)* @_ZN3jxl6N_AVX210FloatToF16EPKfPN3hwy9float16_tEm, void (float*, %"struct.hwy::float16_t"*, i64)* null, void (float*, %"struct.hwy::float16_t"*, i64)* @_ZN3jxl6N_SSE410FloatToF16EPKfPN3hwy9float16_tEm, void (float*, %"struct.hwy::float16_t"*, i64)* null, void (float*, %"struct.hwy::float16_t"*, i64)* null, void (float*, %"struct.hwy::float16_t"*, i64)* null, void (float*, %"struct.hwy::float16_t"*, i64)* @_ZN3jxl8N_SCALAR10FloatToF16EPKfPN3hwy9float16_tEm], align 16
@_ZN3hwy13chosen_targetE = external global %"struct.hwy::ChosenTarget", align 4
@_ZN3jxlL30FloatToU32HighwayDispatchTableE = internal unnamed_addr constant [12 x void (float*, i32*, i64, float, i64)*] [void (float*, i32*, i64, float, i64)* @_ZN3hwy13FunctionCacheIvJPKfPjmfmEE13ChooseAndCallIXadL_ZN3jxlL30FloatToU32HighwayDispatchTableEEEEEvS2_S3_mfm, void (float*, i32*, i64, float, i64)* null, void (float*, i32*, i64, float, i64)* null, void (float*, i32*, i64, float, i64)* null, void (float*, i32*, i64, float, i64)* @_ZN3jxl6N_AVX310FloatToU32EPKfPjmfm, void (float*, i32*, i64, float, i64)* @_ZN3jxl6N_AVX210FloatToU32EPKfPjmfm, void (float*, i32*, i64, float, i64)* null, void (float*, i32*, i64, float, i64)* @_ZN3jxl6N_SSE410FloatToU32EPKfPjmfm, void (float*, i32*, i64, float, i64)* null, void (float*, i32*, i64, float, i64)* null, void (float*, i32*, i64, float, i64)* null, void (float*, i32*, i64, float, i64)* @_ZN3jxl8N_SCALAR10FloatToU32EPKfPjmfm], align 16

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE410FloatToU32EPKfPjmfm(float* nocapture readonly, i32* nocapture, i64, float, i64) #0 {
  %6 = icmp eq i64 %4, 32
  %7 = select i1 %6, i64 0, i64 %2
  %8 = insertelement <4 x float> undef, float %3, i32 0
  %9 = shufflevector <4 x float> %8, <4 x float> undef, <4 x i32> zeroinitializer
  %10 = icmp eq i64 %7, 0
  br i1 %10, label %11, label %120

11:                                               ; preds = %120, %5
  %12 = icmp ult i64 %7, %2
  br i1 %12, label %13, label %138

13:                                               ; preds = %11
  %14 = sub i64 %2, %7
  %15 = icmp ult i64 %14, 4
  br i1 %15, label %16, label %40

16:                                               ; preds = %118, %40, %13
  %17 = phi i64 [ %7, %40 ], [ %7, %13 ], [ %52, %118 ]
  %18 = sub i64 %2, %17
  %19 = xor i64 %17, -1
  %20 = and i64 %18, 1
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %36, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds float, float* %0, i64 %17
  %24 = load float, float* %23, align 4
  %25 = fcmp ult float %24, 0.000000e+00
  br i1 %25, label %30, label %26

26:                                               ; preds = %22
  %27 = fcmp ogt float %24, 1.000000e+00
  br i1 %27, label %30, label %28

28:                                               ; preds = %26
  %29 = fmul float %24, %3
  br label %30

30:                                               ; preds = %28, %26, %22
  %31 = phi float [ %29, %28 ], [ 0.000000e+00, %22 ], [ %3, %26 ]
  %32 = fadd float %31, 5.000000e-01
  %33 = fptoui float %32 to i32
  %34 = getelementptr inbounds i32, i32* %1, i64 %17
  store i32 %33, i32* %34, align 4
  %35 = add nuw i64 %17, 1
  br label %36

36:                                               ; preds = %16, %30
  %37 = phi i64 [ %17, %16 ], [ %35, %30 ]
  %38 = sub i64 0, %2
  %39 = icmp eq i64 %19, %38
  br i1 %39, label %138, label %139

40:                                               ; preds = %13
  %41 = getelementptr i32, i32* %1, i64 %7
  %42 = getelementptr i32, i32* %1, i64 %2
  %43 = getelementptr float, float* %0, i64 %7
  %44 = getelementptr float, float* %0, i64 %2
  %45 = bitcast float* %44 to i32*
  %46 = icmp ult i32* %41, %45
  %47 = bitcast i32* %42 to float*
  %48 = icmp ult float* %43, %47
  %49 = and i1 %46, %48
  br i1 %49, label %16, label %50

50:                                               ; preds = %40
  %51 = and i64 %14, -4
  %52 = add i64 %7, %51
  %53 = insertelement <4 x float> undef, float %3, i32 0
  %54 = shufflevector <4 x float> %53, <4 x float> undef, <4 x i32> zeroinitializer
  %55 = add i64 %51, -4
  %56 = lshr exact i64 %55, 2
  %57 = add nuw nsw i64 %56, 1
  %58 = and i64 %57, 1
  %59 = icmp eq i64 %55, 0
  br i1 %59, label %99, label %60

60:                                               ; preds = %50
  %61 = sub nuw nsw i64 %57, %58
  br label %62

62:                                               ; preds = %62, %60
  %63 = phi i64 [ 0, %60 ], [ %96, %62 ]
  %64 = phi i64 [ %61, %60 ], [ %97, %62 ]
  %65 = add i64 %7, %63
  %66 = getelementptr inbounds float, float* %0, i64 %65
  %67 = bitcast float* %66 to <4 x float>*
  %68 = load <4 x float>, <4 x float>* %67, align 4, !alias.scope !2
  %69 = fcmp ult <4 x float> %68, zeroinitializer
  %70 = fcmp ogt <4 x float> %68, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %71 = fmul <4 x float> %68, %54
  %72 = xor <4 x i1> %69, <i1 true, i1 true, i1 true, i1 true>
  %73 = and <4 x i1> %70, %72
  %74 = select <4 x i1> %69, <4 x float> zeroinitializer, <4 x float> %71
  %75 = select <4 x i1> %73, <4 x float> %54, <4 x float> %74
  %76 = fadd <4 x float> %75, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %77 = fptoui <4 x float> %76 to <4 x i32>
  %78 = getelementptr inbounds i32, i32* %1, i64 %65
  %79 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %77, <4 x i32>* %79, align 4, !alias.scope !5, !noalias !2
  %80 = or i64 %63, 4
  %81 = add i64 %7, %80
  %82 = getelementptr inbounds float, float* %0, i64 %81
  %83 = bitcast float* %82 to <4 x float>*
  %84 = load <4 x float>, <4 x float>* %83, align 4, !alias.scope !2
  %85 = fcmp ult <4 x float> %84, zeroinitializer
  %86 = fcmp ogt <4 x float> %84, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %87 = fmul <4 x float> %84, %54
  %88 = xor <4 x i1> %85, <i1 true, i1 true, i1 true, i1 true>
  %89 = and <4 x i1> %86, %88
  %90 = select <4 x i1> %85, <4 x float> zeroinitializer, <4 x float> %87
  %91 = select <4 x i1> %89, <4 x float> %54, <4 x float> %90
  %92 = fadd <4 x float> %91, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %93 = fptoui <4 x float> %92 to <4 x i32>
  %94 = getelementptr inbounds i32, i32* %1, i64 %81
  %95 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %95, align 4, !alias.scope !5, !noalias !2
  %96 = add i64 %63, 8
  %97 = add i64 %64, -2
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %62, !llvm.loop !7

99:                                               ; preds = %62, %50
  %100 = phi i64 [ 0, %50 ], [ %96, %62 ]
  %101 = icmp eq i64 %58, 0
  br i1 %101, label %118, label %102

102:                                              ; preds = %99
  %103 = add i64 %7, %100
  %104 = getelementptr inbounds float, float* %0, i64 %103
  %105 = bitcast float* %104 to <4 x float>*
  %106 = load <4 x float>, <4 x float>* %105, align 4, !alias.scope !2
  %107 = fcmp ult <4 x float> %106, zeroinitializer
  %108 = fcmp ogt <4 x float> %106, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %109 = fmul <4 x float> %106, %54
  %110 = xor <4 x i1> %107, <i1 true, i1 true, i1 true, i1 true>
  %111 = and <4 x i1> %108, %110
  %112 = select <4 x i1> %107, <4 x float> zeroinitializer, <4 x float> %109
  %113 = select <4 x i1> %111, <4 x float> %54, <4 x float> %112
  %114 = fadd <4 x float> %113, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %115 = fptoui <4 x float> %114 to <4 x i32>
  %116 = getelementptr inbounds i32, i32* %1, i64 %103
  %117 = bitcast i32* %116 to <4 x i32>*
  store <4 x i32> %115, <4 x i32>* %117, align 4, !alias.scope !5, !noalias !2
  br label %118

118:                                              ; preds = %99, %102
  %119 = icmp eq i64 %14, %51
  br i1 %119, label %138, label %16

120:                                              ; preds = %5, %120
  %121 = phi i64 [ %136, %120 ], [ 0, %5 ]
  %122 = getelementptr inbounds float, float* %0, i64 %121
  %123 = bitcast float* %122 to <4 x float>*
  %124 = load <4 x float>, <4 x float>* %123, align 16, !alias.scope !9
  %125 = tail call <4 x float> @llvm.x86.sse.max.ps(<4 x float> zeroinitializer, <4 x float> %124) #12
  %126 = tail call <4 x float> @llvm.x86.sse.min.ps(<4 x float> %125, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #12
  %127 = fmul <4 x float> %9, %126
  %128 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %127) #12
  %129 = bitcast <4 x float> %127 to <4 x i32>
  %130 = xor <4 x i32> %129, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %131 = and <4 x i32> %130, %128
  %132 = ashr <4 x i32> %131, <i32 31, i32 31, i32 31, i32 31>
  %133 = xor <4 x i32> %132, %128
  %134 = getelementptr inbounds i32, i32* %1, i64 %121
  %135 = bitcast i32* %134 to <4 x i32>*
  store <4 x i32> %133, <4 x i32>* %135, align 16, !alias.scope !12
  %136 = add i64 %121, 4
  %137 = icmp ult i64 %136, %7
  br i1 %137, label %120, label %11

138:                                              ; preds = %36, %161, %118, %11
  ret void

139:                                              ; preds = %36, %161
  %140 = phi i64 [ %166, %161 ], [ %37, %36 ]
  %141 = getelementptr inbounds float, float* %0, i64 %140
  %142 = load float, float* %141, align 4
  %143 = fcmp ult float %142, 0.000000e+00
  br i1 %143, label %148, label %144

144:                                              ; preds = %139
  %145 = fcmp ogt float %142, 1.000000e+00
  br i1 %145, label %148, label %146

146:                                              ; preds = %144
  %147 = fmul float %142, %3
  br label %148

148:                                              ; preds = %144, %139, %146
  %149 = phi float [ %147, %146 ], [ 0.000000e+00, %139 ], [ %3, %144 ]
  %150 = fadd float %149, 5.000000e-01
  %151 = fptoui float %150 to i32
  %152 = getelementptr inbounds i32, i32* %1, i64 %140
  store i32 %151, i32* %152, align 4
  %153 = add nuw i64 %140, 1
  %154 = getelementptr inbounds float, float* %0, i64 %153
  %155 = load float, float* %154, align 4
  %156 = fcmp ult float %155, 0.000000e+00
  br i1 %156, label %161, label %157

157:                                              ; preds = %148
  %158 = fcmp ogt float %155, 1.000000e+00
  br i1 %158, label %161, label %159

159:                                              ; preds = %157
  %160 = fmul float %155, %3
  br label %161

161:                                              ; preds = %159, %157, %148
  %162 = phi float [ %160, %159 ], [ 0.000000e+00, %148 ], [ %3, %157 ]
  %163 = fadd float %162, 5.000000e-01
  %164 = fptoui float %163 to i32
  %165 = getelementptr inbounds i32, i32* %1, i64 %153
  store i32 %164, i32* %165, align 4
  %166 = add nuw i64 %140, 2
  %167 = icmp eq i64 %166, %2
  br i1 %167, label %138, label %139, !llvm.loop !15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE410FloatToF16EPKfPN3hwy9float16_tEm(float* nocapture readonly, %"struct.hwy::float16_t"* nocapture, i64) #0 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %65, label %5

5:                                                ; preds = %3, %5
  %6 = phi i64 [ %63, %5 ], [ 0, %3 ]
  %7 = getelementptr inbounds float, float* %0, i64 %6
  %8 = bitcast float* %7 to <4 x float>*
  %9 = load <4 x float>, <4 x float>* %8, align 16, !alias.scope !16
  %10 = bitcast <4 x float> %9 to <2 x i64>
  %11 = bitcast <4 x float> %9 to <4 x i32>
  %12 = lshr <4 x i32> %11, <i32 31, i32 31, i32 31, i32 31>
  %13 = lshr <4 x i32> %11, <i32 23, i32 23, i32 23, i32 23>
  %14 = and <4 x i32> %13, <i32 255, i32 255, i32 255, i32 255>
  %15 = icmp ult <4 x i32> %14, <i32 142, i32 142, i32 142, i32 142>
  %16 = select <4 x i1> %15, <4 x i32> %14, <4 x i32> <i32 142, i32 142, i32 142, i32 142>
  %17 = add nsw <4 x i32> %16, <i32 -127, i32 -127, i32 -127, i32 -127>
  %18 = icmp sgt <4 x i32> %17, <i32 -25, i32 -25, i32 -25, i32 -25>
  %19 = icmp slt <4 x i32> %17, <i32 -14, i32 -14, i32 -14, i32 -14>
  %20 = shl nuw nsw <4 x i32> %16, <i32 23, i32 23, i32 23, i32 23>
  %21 = add nuw <4 x i32> %20, <i32 201326592, i32 201326592, i32 201326592, i32 201326592>
  %22 = bitcast <4 x i32> %21 to <4 x float>
  %23 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %22) #12
  %24 = sub nsw <4 x i32> <i32 126, i32 126, i32 126, i32 126>, %16
  %25 = and <4 x i32> %11, <i32 8388607, i32 8388607, i32 8388607, i32 8388607>
  %26 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 0>
  %27 = bitcast <4 x i32> %26 to <2 x i64>
  %28 = shl <4 x i32> %24, <i32 23, i32 23, i32 23, i32 23>
  %29 = sub <4 x i32> <i32 1333788672, i32 1333788672, i32 1333788672, i32 1333788672>, %28
  %30 = bitcast <4 x i32> %29 to <4 x float>
  %31 = tail call <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float> %30) #12
  %32 = bitcast <4 x i32> %31 to <2 x i64>
  %33 = and <2 x i64> %10, <i64 8388607, i64 8388607>
  %34 = and <2 x i64> %32, <i64 4294967295, i64 4294967295>
  %35 = mul nuw nsw <2 x i64> %34, %33
  %36 = lshr <2 x i64> %35, <i64 32, i64 32>
  %37 = shufflevector <4 x i32> %31, <4 x i32> undef, <4 x i32> <i32 1, i32 0, i32 3, i32 0>
  %38 = bitcast <4 x i32> %37 to <2 x i64>
  %39 = and <2 x i64> %27, <i64 4294967295, i64 4294967295>
  %40 = and <2 x i64> %38, <i64 4294967295, i64 4294967295>
  %41 = mul nuw <2 x i64> %40, %39
  %42 = bitcast <2 x i64> %41 to <8 x i16>
  %43 = bitcast <2 x i64> %36 to <8 x i16>
  %44 = shufflevector <8 x i16> %43, <8 x i16> %42, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 4, i32 5, i32 14, i32 15>
  %45 = icmp eq <4 x i32> %24, zeroinitializer
  %46 = bitcast <8 x i16> %44 to <4 x i32>
  %47 = select <4 x i1> %45, <4 x i32> %25, <4 x i32> %46
  %48 = add <4 x i32> %47, %23
  %49 = lshr <4 x i32> %25, <i32 13, i32 13, i32 13, i32 13>
  %50 = select <4 x i1> %19, <4 x i32> %48, <4 x i32> %49
  %51 = shl nuw nsw <4 x i32> %12, <i32 15, i32 15, i32 15, i32 15>
  %52 = shl nuw nsw <4 x i32> %16, <i32 10, i32 10, i32 10, i32 10>
  %53 = add nsw <4 x i32> %52, <i32 -114688, i32 -114688, i32 -114688, i32 -114688>
  %54 = select <4 x i1> %19, <4 x i32> zeroinitializer, <4 x i32> %53
  %55 = or <4 x i32> %54, %51
  %56 = or <4 x i32> %55, %50
  %57 = select <4 x i1> %18, <4 x i32> %56, <4 x i32> zeroinitializer
  %58 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %57, <4 x i32> undef) #12
  %59 = bitcast <8 x i16> %58 to <2 x i64>
  %60 = getelementptr inbounds %"struct.hwy::float16_t", %"struct.hwy::float16_t"* %1, i64 %6
  %61 = extractelement <2 x i64> %59, i32 0
  %62 = bitcast %"struct.hwy::float16_t"* %60 to i64*
  store i64 %61, i64* %62, align 1, !alias.scope !19
  %63 = add i64 %6, 4
  %64 = icmp ult i64 %63, %2
  br i1 %64, label %5, label %65

65:                                               ; preds = %5, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX210FloatToU32EPKfPjmfm(float* nocapture readonly, i32* nocapture, i64, float, i64) #2 {
  %6 = icmp eq i64 %4, 32
  %7 = select i1 %6, i64 0, i64 %2
  %8 = insertelement <8 x float> undef, float %3, i32 0
  %9 = shufflevector <8 x float> %8, <8 x float> undef, <8 x i32> zeroinitializer
  %10 = icmp eq i64 %7, 0
  br i1 %10, label %11, label %120

11:                                               ; preds = %120, %5
  %12 = icmp ult i64 %7, %2
  br i1 %12, label %13, label %138

13:                                               ; preds = %11
  %14 = sub i64 %2, %7
  %15 = icmp ult i64 %14, 8
  br i1 %15, label %16, label %40

16:                                               ; preds = %118, %40, %13
  %17 = phi i64 [ %7, %40 ], [ %7, %13 ], [ %52, %118 ]
  %18 = sub i64 %2, %17
  %19 = xor i64 %17, -1
  %20 = and i64 %18, 1
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %36, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds float, float* %0, i64 %17
  %24 = load float, float* %23, align 4
  %25 = fcmp ult float %24, 0.000000e+00
  br i1 %25, label %30, label %26

26:                                               ; preds = %22
  %27 = fcmp ogt float %24, 1.000000e+00
  br i1 %27, label %30, label %28

28:                                               ; preds = %26
  %29 = fmul float %24, %3
  br label %30

30:                                               ; preds = %28, %26, %22
  %31 = phi float [ %29, %28 ], [ 0.000000e+00, %22 ], [ %3, %26 ]
  %32 = fadd float %31, 5.000000e-01
  %33 = fptoui float %32 to i32
  %34 = getelementptr inbounds i32, i32* %1, i64 %17
  store i32 %33, i32* %34, align 4
  %35 = add nuw i64 %17, 1
  br label %36

36:                                               ; preds = %16, %30
  %37 = phi i64 [ %17, %16 ], [ %35, %30 ]
  %38 = sub i64 0, %2
  %39 = icmp eq i64 %19, %38
  br i1 %39, label %138, label %139

40:                                               ; preds = %13
  %41 = getelementptr i32, i32* %1, i64 %7
  %42 = getelementptr i32, i32* %1, i64 %2
  %43 = getelementptr float, float* %0, i64 %7
  %44 = getelementptr float, float* %0, i64 %2
  %45 = bitcast float* %44 to i32*
  %46 = icmp ult i32* %41, %45
  %47 = bitcast i32* %42 to float*
  %48 = icmp ult float* %43, %47
  %49 = and i1 %46, %48
  br i1 %49, label %16, label %50

50:                                               ; preds = %40
  %51 = and i64 %14, -8
  %52 = add i64 %7, %51
  %53 = insertelement <8 x float> undef, float %3, i32 0
  %54 = shufflevector <8 x float> %53, <8 x float> undef, <8 x i32> zeroinitializer
  %55 = add i64 %51, -8
  %56 = lshr exact i64 %55, 3
  %57 = add nuw nsw i64 %56, 1
  %58 = and i64 %57, 1
  %59 = icmp eq i64 %55, 0
  br i1 %59, label %99, label %60

60:                                               ; preds = %50
  %61 = sub nuw nsw i64 %57, %58
  br label %62

62:                                               ; preds = %62, %60
  %63 = phi i64 [ 0, %60 ], [ %96, %62 ]
  %64 = phi i64 [ %61, %60 ], [ %97, %62 ]
  %65 = add i64 %7, %63
  %66 = getelementptr inbounds float, float* %0, i64 %65
  %67 = bitcast float* %66 to <8 x float>*
  %68 = load <8 x float>, <8 x float>* %67, align 4, !alias.scope !22
  %69 = fcmp ult <8 x float> %68, zeroinitializer
  %70 = fcmp ogt <8 x float> %68, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %71 = fmul <8 x float> %68, %54
  %72 = xor <8 x i1> %69, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %73 = and <8 x i1> %70, %72
  %74 = select <8 x i1> %69, <8 x float> zeroinitializer, <8 x float> %71
  %75 = select <8 x i1> %73, <8 x float> %54, <8 x float> %74
  %76 = fadd <8 x float> %75, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %77 = fptoui <8 x float> %76 to <8 x i32>
  %78 = getelementptr inbounds i32, i32* %1, i64 %65
  %79 = bitcast i32* %78 to <8 x i32>*
  store <8 x i32> %77, <8 x i32>* %79, align 4, !alias.scope !25, !noalias !22
  %80 = or i64 %63, 8
  %81 = add i64 %7, %80
  %82 = getelementptr inbounds float, float* %0, i64 %81
  %83 = bitcast float* %82 to <8 x float>*
  %84 = load <8 x float>, <8 x float>* %83, align 4, !alias.scope !22
  %85 = fcmp ult <8 x float> %84, zeroinitializer
  %86 = fcmp ogt <8 x float> %84, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %87 = fmul <8 x float> %84, %54
  %88 = xor <8 x i1> %85, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %89 = and <8 x i1> %86, %88
  %90 = select <8 x i1> %85, <8 x float> zeroinitializer, <8 x float> %87
  %91 = select <8 x i1> %89, <8 x float> %54, <8 x float> %90
  %92 = fadd <8 x float> %91, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %93 = fptoui <8 x float> %92 to <8 x i32>
  %94 = getelementptr inbounds i32, i32* %1, i64 %81
  %95 = bitcast i32* %94 to <8 x i32>*
  store <8 x i32> %93, <8 x i32>* %95, align 4, !alias.scope !25, !noalias !22
  %96 = add i64 %63, 16
  %97 = add i64 %64, -2
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %62, !llvm.loop !27

99:                                               ; preds = %62, %50
  %100 = phi i64 [ 0, %50 ], [ %96, %62 ]
  %101 = icmp eq i64 %58, 0
  br i1 %101, label %118, label %102

102:                                              ; preds = %99
  %103 = add i64 %7, %100
  %104 = getelementptr inbounds float, float* %0, i64 %103
  %105 = bitcast float* %104 to <8 x float>*
  %106 = load <8 x float>, <8 x float>* %105, align 4, !alias.scope !22
  %107 = fcmp ult <8 x float> %106, zeroinitializer
  %108 = fcmp ogt <8 x float> %106, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %109 = fmul <8 x float> %106, %54
  %110 = xor <8 x i1> %107, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %111 = and <8 x i1> %108, %110
  %112 = select <8 x i1> %107, <8 x float> zeroinitializer, <8 x float> %109
  %113 = select <8 x i1> %111, <8 x float> %54, <8 x float> %112
  %114 = fadd <8 x float> %113, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %115 = fptoui <8 x float> %114 to <8 x i32>
  %116 = getelementptr inbounds i32, i32* %1, i64 %103
  %117 = bitcast i32* %116 to <8 x i32>*
  store <8 x i32> %115, <8 x i32>* %117, align 4, !alias.scope !25, !noalias !22
  br label %118

118:                                              ; preds = %99, %102
  %119 = icmp eq i64 %14, %51
  br i1 %119, label %138, label %16

120:                                              ; preds = %5, %120
  %121 = phi i64 [ %136, %120 ], [ 0, %5 ]
  %122 = getelementptr inbounds float, float* %0, i64 %121
  %123 = bitcast float* %122 to <8 x float>*
  %124 = load <8 x float>, <8 x float>* %123, align 32, !alias.scope !28, !noalias !31
  %125 = tail call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> zeroinitializer, <8 x float> %124) #12
  %126 = tail call <8 x float> @llvm.x86.avx.min.ps.256(<8 x float> %125, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>) #12
  %127 = fmul <8 x float> %9, %126
  %128 = tail call <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float> %127) #12
  %129 = bitcast <8 x float> %127 to <8 x i32>
  %130 = xor <8 x i32> %129, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %131 = and <8 x i32> %130, %128
  %132 = ashr <8 x i32> %131, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %133 = xor <8 x i32> %132, %128
  %134 = getelementptr inbounds i32, i32* %1, i64 %121
  %135 = bitcast i32* %134 to <8 x i32>*
  store <8 x i32> %133, <8 x i32>* %135, align 32, !alias.scope !33
  %136 = add i64 %121, 8
  %137 = icmp ult i64 %136, %7
  br i1 %137, label %120, label %11

138:                                              ; preds = %36, %161, %118, %11
  ret void

139:                                              ; preds = %36, %161
  %140 = phi i64 [ %166, %161 ], [ %37, %36 ]
  %141 = getelementptr inbounds float, float* %0, i64 %140
  %142 = load float, float* %141, align 4
  %143 = fcmp ult float %142, 0.000000e+00
  br i1 %143, label %148, label %144

144:                                              ; preds = %139
  %145 = fcmp ogt float %142, 1.000000e+00
  br i1 %145, label %148, label %146

146:                                              ; preds = %144
  %147 = fmul float %142, %3
  br label %148

148:                                              ; preds = %144, %139, %146
  %149 = phi float [ %147, %146 ], [ 0.000000e+00, %139 ], [ %3, %144 ]
  %150 = fadd float %149, 5.000000e-01
  %151 = fptoui float %150 to i32
  %152 = getelementptr inbounds i32, i32* %1, i64 %140
  store i32 %151, i32* %152, align 4
  %153 = add nuw i64 %140, 1
  %154 = getelementptr inbounds float, float* %0, i64 %153
  %155 = load float, float* %154, align 4
  %156 = fcmp ult float %155, 0.000000e+00
  br i1 %156, label %161, label %157

157:                                              ; preds = %148
  %158 = fcmp ogt float %155, 1.000000e+00
  br i1 %158, label %161, label %159

159:                                              ; preds = %157
  %160 = fmul float %155, %3
  br label %161

161:                                              ; preds = %159, %157, %148
  %162 = phi float [ %160, %159 ], [ 0.000000e+00, %148 ], [ %3, %157 ]
  %163 = fadd float %162, 5.000000e-01
  %164 = fptoui float %163 to i32
  %165 = getelementptr inbounds i32, i32* %1, i64 %153
  store i32 %164, i32* %165, align 4
  %166 = add nuw i64 %140, 2
  %167 = icmp eq i64 %166, %2
  br i1 %167, label %138, label %139, !llvm.loop !36
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX210FloatToF16EPKfPN3hwy9float16_tEm(float* nocapture readonly, %"struct.hwy::float16_t"* nocapture, i64) #2 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %15, label %5

5:                                                ; preds = %3, %5
  %6 = phi i64 [ %13, %5 ], [ 0, %3 ]
  %7 = getelementptr inbounds float, float* %0, i64 %6
  %8 = bitcast float* %7 to <8 x float>*
  %9 = load <8 x float>, <8 x float>* %8, align 32, !alias.scope !37, !noalias !40
  %10 = tail call <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float> %9, i32 8) #12
  %11 = getelementptr inbounds %"struct.hwy::float16_t", %"struct.hwy::float16_t"* %1, i64 %6
  %12 = bitcast %"struct.hwy::float16_t"* %11 to <8 x i16>*
  store <8 x i16> %10, <8 x i16>* %12, align 16, !alias.scope !42
  %13 = add i64 %6, 8
  %14 = icmp ult i64 %13, %2
  br i1 %14, label %5, label %15

15:                                               ; preds = %5, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX310FloatToU32EPKfPjmfm(float* nocapture readonly, i32* nocapture, i64, float, i64) #3 {
  %6 = icmp eq i64 %4, 32
  %7 = select i1 %6, i64 0, i64 %2
  %8 = insertelement <16 x float> undef, float %3, i32 0
  %9 = shufflevector <16 x float> %8, <16 x float> undef, <16 x i32> zeroinitializer
  %10 = icmp eq i64 %7, 0
  br i1 %10, label %11, label %124

11:                                               ; preds = %124, %5
  %12 = icmp ult i64 %7, %2
  br i1 %12, label %13, label %142

13:                                               ; preds = %11
  %14 = sub i64 %2, %7
  %15 = icmp ult i64 %14, 64
  br i1 %15, label %16, label %40

16:                                               ; preds = %122, %40, %13
  %17 = phi i64 [ %7, %40 ], [ %7, %13 ], [ %52, %122 ]
  %18 = sub i64 %2, %17
  %19 = xor i64 %17, -1
  %20 = and i64 %18, 1
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %36, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds float, float* %0, i64 %17
  %24 = load float, float* %23, align 4
  %25 = fcmp ult float %24, 0.000000e+00
  br i1 %25, label %30, label %26

26:                                               ; preds = %22
  %27 = fcmp ogt float %24, 1.000000e+00
  br i1 %27, label %30, label %28

28:                                               ; preds = %26
  %29 = fmul float %24, %3
  br label %30

30:                                               ; preds = %28, %26, %22
  %31 = phi float [ %29, %28 ], [ 0.000000e+00, %22 ], [ %3, %26 ]
  %32 = fadd float %31, 5.000000e-01
  %33 = fptoui float %32 to i32
  %34 = getelementptr inbounds i32, i32* %1, i64 %17
  store i32 %33, i32* %34, align 4
  %35 = add nuw i64 %17, 1
  br label %36

36:                                               ; preds = %16, %30
  %37 = phi i64 [ %17, %16 ], [ %35, %30 ]
  %38 = sub i64 0, %2
  %39 = icmp eq i64 %19, %38
  br i1 %39, label %142, label %143

40:                                               ; preds = %13
  %41 = getelementptr i32, i32* %1, i64 %7
  %42 = getelementptr i32, i32* %1, i64 %2
  %43 = getelementptr float, float* %0, i64 %7
  %44 = getelementptr float, float* %0, i64 %2
  %45 = bitcast float* %44 to i32*
  %46 = icmp ult i32* %41, %45
  %47 = bitcast i32* %42 to float*
  %48 = icmp ult float* %43, %47
  %49 = and i1 %46, %48
  br i1 %49, label %16, label %50

50:                                               ; preds = %40
  %51 = and i64 %14, -64
  %52 = add i64 %7, %51
  %53 = insertelement <16 x float> undef, float %3, i32 0
  %54 = shufflevector <16 x float> %53, <16 x float> undef, <16 x i32> zeroinitializer
  %55 = insertelement <16 x float> undef, float %3, i32 0
  %56 = shufflevector <16 x float> %55, <16 x float> undef, <16 x i32> zeroinitializer
  %57 = insertelement <16 x float> undef, float %3, i32 0
  %58 = shufflevector <16 x float> %57, <16 x float> undef, <16 x i32> zeroinitializer
  %59 = insertelement <16 x float> undef, float %3, i32 0
  %60 = shufflevector <16 x float> %59, <16 x float> undef, <16 x i32> zeroinitializer
  br label %61

61:                                               ; preds = %61, %50
  %62 = phi i64 [ 0, %50 ], [ %120, %61 ]
  %63 = add i64 %7, %62
  %64 = getelementptr inbounds float, float* %0, i64 %63
  %65 = bitcast float* %64 to <16 x float>*
  %66 = load <16 x float>, <16 x float>* %65, align 4, !alias.scope !45
  %67 = getelementptr inbounds float, float* %64, i64 16
  %68 = bitcast float* %67 to <16 x float>*
  %69 = load <16 x float>, <16 x float>* %68, align 4, !alias.scope !45
  %70 = getelementptr inbounds float, float* %64, i64 32
  %71 = bitcast float* %70 to <16 x float>*
  %72 = load <16 x float>, <16 x float>* %71, align 4, !alias.scope !45
  %73 = getelementptr inbounds float, float* %64, i64 48
  %74 = bitcast float* %73 to <16 x float>*
  %75 = load <16 x float>, <16 x float>* %74, align 4, !alias.scope !45
  %76 = fcmp ult <16 x float> %66, zeroinitializer
  %77 = fcmp ult <16 x float> %69, zeroinitializer
  %78 = fcmp ult <16 x float> %72, zeroinitializer
  %79 = fcmp ult <16 x float> %75, zeroinitializer
  %80 = fcmp ogt <16 x float> %66, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %81 = fcmp ogt <16 x float> %69, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %82 = fcmp ogt <16 x float> %72, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %83 = fcmp ogt <16 x float> %75, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %84 = fmul <16 x float> %66, %54
  %85 = fmul <16 x float> %69, %56
  %86 = fmul <16 x float> %72, %58
  %87 = fmul <16 x float> %75, %60
  %88 = xor <16 x i1> %76, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %89 = xor <16 x i1> %77, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %90 = xor <16 x i1> %78, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %91 = xor <16 x i1> %79, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %92 = and <16 x i1> %80, %88
  %93 = and <16 x i1> %81, %89
  %94 = and <16 x i1> %82, %90
  %95 = and <16 x i1> %83, %91
  %96 = select <16 x i1> %76, <16 x float> zeroinitializer, <16 x float> %84
  %97 = select <16 x i1> %77, <16 x float> zeroinitializer, <16 x float> %85
  %98 = select <16 x i1> %78, <16 x float> zeroinitializer, <16 x float> %86
  %99 = select <16 x i1> %79, <16 x float> zeroinitializer, <16 x float> %87
  %100 = select <16 x i1> %92, <16 x float> %54, <16 x float> %96
  %101 = select <16 x i1> %93, <16 x float> %56, <16 x float> %97
  %102 = select <16 x i1> %94, <16 x float> %58, <16 x float> %98
  %103 = select <16 x i1> %95, <16 x float> %60, <16 x float> %99
  %104 = fadd <16 x float> %100, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %105 = fadd <16 x float> %101, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %106 = fadd <16 x float> %102, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %107 = fadd <16 x float> %103, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %108 = fptoui <16 x float> %104 to <16 x i32>
  %109 = fptoui <16 x float> %105 to <16 x i32>
  %110 = fptoui <16 x float> %106 to <16 x i32>
  %111 = fptoui <16 x float> %107 to <16 x i32>
  %112 = getelementptr inbounds i32, i32* %1, i64 %63
  %113 = bitcast i32* %112 to <16 x i32>*
  store <16 x i32> %108, <16 x i32>* %113, align 4, !alias.scope !48, !noalias !45
  %114 = getelementptr inbounds i32, i32* %112, i64 16
  %115 = bitcast i32* %114 to <16 x i32>*
  store <16 x i32> %109, <16 x i32>* %115, align 4, !alias.scope !48, !noalias !45
  %116 = getelementptr inbounds i32, i32* %112, i64 32
  %117 = bitcast i32* %116 to <16 x i32>*
  store <16 x i32> %110, <16 x i32>* %117, align 4, !alias.scope !48, !noalias !45
  %118 = getelementptr inbounds i32, i32* %112, i64 48
  %119 = bitcast i32* %118 to <16 x i32>*
  store <16 x i32> %111, <16 x i32>* %119, align 4, !alias.scope !48, !noalias !45
  %120 = add i64 %62, 64
  %121 = icmp eq i64 %120, %51
  br i1 %121, label %122, label %61, !llvm.loop !50

122:                                              ; preds = %61
  %123 = icmp eq i64 %14, %51
  br i1 %123, label %142, label %16

124:                                              ; preds = %5, %124
  %125 = phi i64 [ %140, %124 ], [ 0, %5 ]
  %126 = getelementptr inbounds float, float* %0, i64 %125
  %127 = bitcast float* %126 to <16 x float>*
  %128 = load <16 x float>, <16 x float>* %127, align 64, !alias.scope !51, !noalias !54
  %129 = tail call <16 x float> @llvm.x86.avx512.max.ps.512(<16 x float> zeroinitializer, <16 x float> %128, i32 4) #12
  %130 = tail call <16 x float> @llvm.x86.avx512.min.ps.512(<16 x float> %129, <16 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, i32 4) #12
  %131 = fmul <16 x float> %9, %130
  %132 = tail call <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float> %131, <16 x i32> zeroinitializer, i16 -1, i32 4) #12
  %133 = bitcast <16 x float> %131 to <16 x i32>
  %134 = xor <16 x i32> %133, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %135 = and <16 x i32> %134, %132
  %136 = ashr <16 x i32> %135, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %137 = xor <16 x i32> %136, %132
  %138 = getelementptr inbounds i32, i32* %1, i64 %125
  %139 = bitcast i32* %138 to <16 x i32>*
  store <16 x i32> %137, <16 x i32>* %139, align 64, !alias.scope !56
  %140 = add i64 %125, 16
  %141 = icmp ult i64 %140, %7
  br i1 %141, label %124, label %11

142:                                              ; preds = %36, %165, %122, %11
  ret void

143:                                              ; preds = %36, %165
  %144 = phi i64 [ %170, %165 ], [ %37, %36 ]
  %145 = getelementptr inbounds float, float* %0, i64 %144
  %146 = load float, float* %145, align 4
  %147 = fcmp ult float %146, 0.000000e+00
  br i1 %147, label %152, label %148

148:                                              ; preds = %143
  %149 = fcmp ogt float %146, 1.000000e+00
  br i1 %149, label %152, label %150

150:                                              ; preds = %148
  %151 = fmul float %146, %3
  br label %152

152:                                              ; preds = %148, %143, %150
  %153 = phi float [ %151, %150 ], [ 0.000000e+00, %143 ], [ %3, %148 ]
  %154 = fadd float %153, 5.000000e-01
  %155 = fptoui float %154 to i32
  %156 = getelementptr inbounds i32, i32* %1, i64 %144
  store i32 %155, i32* %156, align 4
  %157 = add nuw i64 %144, 1
  %158 = getelementptr inbounds float, float* %0, i64 %157
  %159 = load float, float* %158, align 4
  %160 = fcmp ult float %159, 0.000000e+00
  br i1 %160, label %165, label %161

161:                                              ; preds = %152
  %162 = fcmp ogt float %159, 1.000000e+00
  br i1 %162, label %165, label %163

163:                                              ; preds = %161
  %164 = fmul float %159, %3
  br label %165

165:                                              ; preds = %163, %161, %152
  %166 = phi float [ %164, %163 ], [ 0.000000e+00, %152 ], [ %3, %161 ]
  %167 = fadd float %166, 5.000000e-01
  %168 = fptoui float %167 to i32
  %169 = getelementptr inbounds i32, i32* %1, i64 %157
  store i32 %168, i32* %169, align 4
  %170 = add nuw i64 %144, 2
  %171 = icmp eq i64 %170, %2
  br i1 %171, label %142, label %143, !llvm.loop !59
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX310FloatToF16EPKfPN3hwy9float16_tEm(float* nocapture readonly, %"struct.hwy::float16_t"* nocapture, i64) #3 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %15, label %5

5:                                                ; preds = %3, %5
  %6 = phi i64 [ %13, %5 ], [ 0, %3 ]
  %7 = getelementptr inbounds float, float* %0, i64 %6
  %8 = bitcast float* %7 to <16 x float>*
  %9 = load <16 x float>, <16 x float>* %8, align 64, !alias.scope !60, !noalias !63
  %10 = tail call <16 x i16> @llvm.x86.avx512.mask.vcvtps2ph.512(<16 x float> %9, i32 8, <16 x i16> zeroinitializer, i16 -1) #12
  %11 = getelementptr inbounds %"struct.hwy::float16_t", %"struct.hwy::float16_t"* %1, i64 %6
  %12 = bitcast %"struct.hwy::float16_t"* %11 to <16 x i16>*
  store <16 x i16> %10, <16 x i16>* %12, align 32, !alias.scope !65
  %13 = add i64 %6, 16
  %14 = icmp ult i64 %13, %2
  br i1 %14, label %5, label %15

15:                                               ; preds = %5, %3
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR10FloatToU32EPKfPjmfm(float* nocapture readonly, i32* nocapture, i64, float, i64) #4 {
  %6 = icmp eq i64 %4, 32
  %7 = select i1 %6, i64 0, i64 %2
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %81, label %9

9:                                                ; preds = %5
  %10 = icmp ult i64 %7, 4
  br i1 %10, label %11, label %13

11:                                               ; preds = %79, %13, %9
  %12 = phi i64 [ 0, %13 ], [ 0, %9 ], [ %22, %79 ]
  br label %190

13:                                               ; preds = %9
  %14 = getelementptr i32, i32* %1, i64 %7
  %15 = getelementptr float, float* %0, i64 %7
  %16 = bitcast float* %15 to i32*
  %17 = icmp ugt i32* %16, %1
  %18 = bitcast i32* %14 to float*
  %19 = icmp ugt float* %18, %0
  %20 = and i1 %17, %19
  br i1 %20, label %11, label %21

21:                                               ; preds = %13
  %22 = and i64 %7, -4
  %23 = insertelement <4 x float> undef, float %3, i32 0
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> zeroinitializer
  br label %25

25:                                               ; preds = %25, %21
  %26 = phi i64 [ 0, %21 ], [ %77, %25 ]
  %27 = getelementptr inbounds float, float* %0, i64 %26
  %28 = bitcast float* %27 to <4 x float>*
  %29 = load <4 x float>, <4 x float>* %28, align 4, !alias.scope !68
  %30 = fcmp ult <4 x float> %29, zeroinitializer
  %31 = fcmp uno <4 x float> %29, zeroinitializer
  %32 = xor <4 x i1> %30, <i1 true, i1 true, i1 true, i1 true>
  %33 = select <4 x i1> %30, <4 x float> zeroinitializer, <4 x float> %29
  %34 = fcmp olt <4 x float> %33, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %35 = select <4 x i1> %34, <4 x float> %33, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %36 = and <4 x i1> %31, %32
  %37 = select <4 x i1> %36, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> %35
  %38 = fmul <4 x float> %37, %24
  %39 = call <4 x float> @llvm.fabs.v4f32(<4 x float> %38)
  %40 = bitcast <4 x float> %38 to <4 x i32>
  %41 = icmp slt <4 x i32> %40, zeroinitializer
  %42 = fcmp olt <4 x float> %39, <float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000, float 0x4160000000000000>
  %43 = fcmp ugt <4 x float> %39, <float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000, float 0x41E0000000000000>
  %44 = fptosi <4 x float> %38 to <4 x i32>
  %45 = select <4 x i1> %41, <4 x i32> <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>, <4 x i32> <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %46 = fcmp olt <4 x float> %38, zeroinitializer
  %47 = select <4 x i1> %46, <4 x float> <float -5.000000e-01, float -5.000000e-01, float -5.000000e-01, float -5.000000e-01>, <4 x float> <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %48 = fadd <4 x float> %38, %47
  %49 = fptosi <4 x float> %48 to <4 x i32>
  %50 = icmp eq <4 x i32> %49, zeroinitializer
  %51 = and <4 x i32> %49, <i32 1, i32 1, i32 1, i32 1>
  %52 = icmp eq <4 x i32> %51, zeroinitializer
  %53 = sitofp <4 x i32> %49 to <4 x float>
  %54 = fsub <4 x float> %53, %38
  %55 = call <4 x float> @llvm.fabs.v4f32(<4 x float> %54)
  %56 = fcmp une <4 x float> %55, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %57 = select <4 x i1> %41, <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, <4 x i32> <i32 1, i32 1, i32 1, i32 1>
  %58 = sub nsw <4 x i32> %49, %57
  %59 = xor <4 x i1> %50, <i1 true, i1 true, i1 true, i1 true>
  %60 = and <4 x i1> %42, %59
  %61 = xor <4 x i1> %52, <i1 true, i1 true, i1 true, i1 true>
  %62 = and <4 x i1> %60, %61
  %63 = xor <4 x i1> %42, <i1 true, i1 true, i1 true, i1 true>
  %64 = and <4 x i1> %43, %63
  %65 = xor <4 x i1> %43, <i1 true, i1 true, i1 true, i1 true>
  %66 = and <4 x i1> %65, %63
  %67 = and <4 x i1> %50, %42
  %68 = and <4 x i1> %52, %60
  %69 = and <4 x i1> %56, %62
  %70 = select <4 x i1> %64, <4 x i32> %45, <4 x i32> %58
  %71 = select <4 x i1> %66, <4 x i32> %44, <4 x i32> %70
  %72 = select <4 x i1> %67, <4 x i32> zeroinitializer, <4 x i32> %71
  %73 = or <4 x i1> %69, %68
  %74 = select <4 x i1> %73, <4 x i32> %49, <4 x i32> %72
  %75 = getelementptr inbounds i32, i32* %1, i64 %26
  %76 = bitcast i32* %75 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %76, align 4, !alias.scope !73, !noalias !77
  %77 = add i64 %26, 4
  %78 = icmp eq i64 %77, %22
  br i1 %78, label %79, label %25, !llvm.loop !78

79:                                               ; preds = %25
  %80 = icmp eq i64 %7, %22
  br i1 %80, label %81, label %11

81:                                               ; preds = %231, %79, %5
  %82 = icmp ult i64 %7, %2
  br i1 %82, label %83, label %236

83:                                               ; preds = %81
  %84 = sub i64 %2, %7
  %85 = icmp ult i64 %84, 4
  br i1 %85, label %86, label %110

86:                                               ; preds = %188, %110, %83
  %87 = phi i64 [ %7, %110 ], [ %7, %83 ], [ %122, %188 ]
  %88 = sub i64 %2, %87
  %89 = xor i64 %87, -1
  %90 = and i64 %88, 1
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %106, label %92

92:                                               ; preds = %86
  %93 = getelementptr inbounds float, float* %0, i64 %87
  %94 = load float, float* %93, align 4
  %95 = fcmp ult float %94, 0.000000e+00
  br i1 %95, label %100, label %96

96:                                               ; preds = %92
  %97 = fcmp ogt float %94, 1.000000e+00
  br i1 %97, label %100, label %98

98:                                               ; preds = %96
  %99 = fmul float %94, %3
  br label %100

100:                                              ; preds = %98, %96, %92
  %101 = phi float [ %99, %98 ], [ 0.000000e+00, %92 ], [ %3, %96 ]
  %102 = fadd float %101, 5.000000e-01
  %103 = fptoui float %102 to i32
  %104 = getelementptr inbounds i32, i32* %1, i64 %87
  store i32 %103, i32* %104, align 4
  %105 = add nuw i64 %87, 1
  br label %106

106:                                              ; preds = %86, %100
  %107 = phi i64 [ %87, %86 ], [ %105, %100 ]
  %108 = sub i64 0, %2
  %109 = icmp eq i64 %89, %108
  br i1 %109, label %236, label %237

110:                                              ; preds = %83
  %111 = getelementptr i32, i32* %1, i64 %7
  %112 = getelementptr i32, i32* %1, i64 %2
  %113 = getelementptr float, float* %0, i64 %7
  %114 = getelementptr float, float* %0, i64 %2
  %115 = bitcast float* %114 to i32*
  %116 = icmp ult i32* %111, %115
  %117 = bitcast i32* %112 to float*
  %118 = icmp ult float* %113, %117
  %119 = and i1 %116, %118
  br i1 %119, label %86, label %120

120:                                              ; preds = %110
  %121 = and i64 %84, -4
  %122 = add i64 %7, %121
  %123 = insertelement <4 x float> undef, float %3, i32 0
  %124 = shufflevector <4 x float> %123, <4 x float> undef, <4 x i32> zeroinitializer
  %125 = add i64 %121, -4
  %126 = lshr exact i64 %125, 2
  %127 = add nuw nsw i64 %126, 1
  %128 = and i64 %127, 1
  %129 = icmp eq i64 %125, 0
  br i1 %129, label %169, label %130

130:                                              ; preds = %120
  %131 = sub nuw nsw i64 %127, %128
  br label %132

132:                                              ; preds = %132, %130
  %133 = phi i64 [ 0, %130 ], [ %166, %132 ]
  %134 = phi i64 [ %131, %130 ], [ %167, %132 ]
  %135 = add i64 %7, %133
  %136 = getelementptr inbounds float, float* %0, i64 %135
  %137 = bitcast float* %136 to <4 x float>*
  %138 = load <4 x float>, <4 x float>* %137, align 4, !alias.scope !79
  %139 = fcmp ult <4 x float> %138, zeroinitializer
  %140 = fcmp ogt <4 x float> %138, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %141 = fmul <4 x float> %138, %124
  %142 = xor <4 x i1> %139, <i1 true, i1 true, i1 true, i1 true>
  %143 = and <4 x i1> %140, %142
  %144 = select <4 x i1> %139, <4 x float> zeroinitializer, <4 x float> %141
  %145 = select <4 x i1> %143, <4 x float> %124, <4 x float> %144
  %146 = fadd <4 x float> %145, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %147 = fptoui <4 x float> %146 to <4 x i32>
  %148 = getelementptr inbounds i32, i32* %1, i64 %135
  %149 = bitcast i32* %148 to <4 x i32>*
  store <4 x i32> %147, <4 x i32>* %149, align 4, !alias.scope !82, !noalias !79
  %150 = or i64 %133, 4
  %151 = add i64 %7, %150
  %152 = getelementptr inbounds float, float* %0, i64 %151
  %153 = bitcast float* %152 to <4 x float>*
  %154 = load <4 x float>, <4 x float>* %153, align 4, !alias.scope !79
  %155 = fcmp ult <4 x float> %154, zeroinitializer
  %156 = fcmp ogt <4 x float> %154, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %157 = fmul <4 x float> %154, %124
  %158 = xor <4 x i1> %155, <i1 true, i1 true, i1 true, i1 true>
  %159 = and <4 x i1> %156, %158
  %160 = select <4 x i1> %155, <4 x float> zeroinitializer, <4 x float> %157
  %161 = select <4 x i1> %159, <4 x float> %124, <4 x float> %160
  %162 = fadd <4 x float> %161, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %163 = fptoui <4 x float> %162 to <4 x i32>
  %164 = getelementptr inbounds i32, i32* %1, i64 %151
  %165 = bitcast i32* %164 to <4 x i32>*
  store <4 x i32> %163, <4 x i32>* %165, align 4, !alias.scope !82, !noalias !79
  %166 = add i64 %133, 8
  %167 = add i64 %134, -2
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %169, label %132, !llvm.loop !84

169:                                              ; preds = %132, %120
  %170 = phi i64 [ 0, %120 ], [ %166, %132 ]
  %171 = icmp eq i64 %128, 0
  br i1 %171, label %188, label %172

172:                                              ; preds = %169
  %173 = add i64 %7, %170
  %174 = getelementptr inbounds float, float* %0, i64 %173
  %175 = bitcast float* %174 to <4 x float>*
  %176 = load <4 x float>, <4 x float>* %175, align 4, !alias.scope !79
  %177 = fcmp ult <4 x float> %176, zeroinitializer
  %178 = fcmp ogt <4 x float> %176, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %179 = fmul <4 x float> %176, %124
  %180 = xor <4 x i1> %177, <i1 true, i1 true, i1 true, i1 true>
  %181 = and <4 x i1> %178, %180
  %182 = select <4 x i1> %177, <4 x float> zeroinitializer, <4 x float> %179
  %183 = select <4 x i1> %181, <4 x float> %124, <4 x float> %182
  %184 = fadd <4 x float> %183, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %185 = fptoui <4 x float> %184 to <4 x i32>
  %186 = getelementptr inbounds i32, i32* %1, i64 %173
  %187 = bitcast i32* %186 to <4 x i32>*
  store <4 x i32> %185, <4 x i32>* %187, align 4, !alias.scope !82, !noalias !79
  br label %188

188:                                              ; preds = %169, %172
  %189 = icmp eq i64 %84, %121
  br i1 %189, label %236, label %86

190:                                              ; preds = %11, %231
  %191 = phi i64 [ %234, %231 ], [ %12, %11 ]
  %192 = getelementptr inbounds float, float* %0, i64 %191
  %193 = load float, float* %192, align 4, !alias.scope !85
  %194 = fcmp ult float %193, 0.000000e+00
  br i1 %194, label %197, label %195

195:                                              ; preds = %190
  %196 = fcmp uno float %193, 0.000000e+00
  br i1 %196, label %201, label %197

197:                                              ; preds = %190, %195
  %198 = phi float [ %193, %195 ], [ 0.000000e+00, %190 ]
  %199 = fcmp olt float %198, 1.000000e+00
  %200 = select i1 %199, float %198, float 1.000000e+00
  br label %201

201:                                              ; preds = %195, %197
  %202 = phi float [ %200, %197 ], [ 1.000000e+00, %195 ]
  %203 = fmul float %202, %3
  %204 = tail call float @llvm.fabs.f32(float %203) #12
  %205 = bitcast float %203 to i32
  %206 = icmp slt i32 %205, 0
  %207 = fcmp olt float %204, 0x4160000000000000
  br i1 %207, label %214, label %208

208:                                              ; preds = %201
  %209 = fcmp ugt float %204, 0x41E0000000000000
  br i1 %209, label %210, label %212

210:                                              ; preds = %208
  %211 = select i1 %206, i32 -2147483648, i32 2147483647
  br label %231

212:                                              ; preds = %208
  %213 = fptosi float %203 to i32
  br label %231

214:                                              ; preds = %201
  %215 = fcmp olt float %203, 0.000000e+00
  %216 = select i1 %215, float -5.000000e-01, float 5.000000e-01
  %217 = fadd float %203, %216
  %218 = fptosi float %217 to i32
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %231, label %220

220:                                              ; preds = %214
  %221 = and i32 %218, 1
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %231, label %223

223:                                              ; preds = %220
  %224 = sitofp i32 %218 to float
  %225 = fsub float %224, %203
  %226 = tail call float @llvm.fabs.f32(float %225) #12
  %227 = fcmp oeq float %226, 5.000000e-01
  br i1 %227, label %228, label %231

228:                                              ; preds = %223
  %229 = select i1 %206, i32 -1, i32 1
  %230 = sub nsw i32 %218, %229
  br label %231

231:                                              ; preds = %210, %212, %214, %220, %223, %228
  %232 = phi i32 [ %230, %228 ], [ %211, %210 ], [ %213, %212 ], [ 0, %214 ], [ %218, %220 ], [ %218, %223 ]
  %233 = getelementptr inbounds i32, i32* %1, i64 %191
  store i32 %232, i32* %233, align 4, !alias.scope !86
  %234 = add nuw i64 %191, 1
  %235 = icmp eq i64 %234, %7
  br i1 %235, label %81, label %190, !llvm.loop !87

236:                                              ; preds = %106, %259, %188, %81
  ret void

237:                                              ; preds = %106, %259
  %238 = phi i64 [ %264, %259 ], [ %107, %106 ]
  %239 = getelementptr inbounds float, float* %0, i64 %238
  %240 = load float, float* %239, align 4
  %241 = fcmp ult float %240, 0.000000e+00
  br i1 %241, label %246, label %242

242:                                              ; preds = %237
  %243 = fcmp ogt float %240, 1.000000e+00
  br i1 %243, label %246, label %244

244:                                              ; preds = %242
  %245 = fmul float %240, %3
  br label %246

246:                                              ; preds = %242, %237, %244
  %247 = phi float [ %245, %244 ], [ 0.000000e+00, %237 ], [ %3, %242 ]
  %248 = fadd float %247, 5.000000e-01
  %249 = fptoui float %248 to i32
  %250 = getelementptr inbounds i32, i32* %1, i64 %238
  store i32 %249, i32* %250, align 4
  %251 = add nuw i64 %238, 1
  %252 = getelementptr inbounds float, float* %0, i64 %251
  %253 = load float, float* %252, align 4
  %254 = fcmp ult float %253, 0.000000e+00
  br i1 %254, label %259, label %255

255:                                              ; preds = %246
  %256 = fcmp ogt float %253, 1.000000e+00
  br i1 %256, label %259, label %257

257:                                              ; preds = %255
  %258 = fmul float %253, %3
  br label %259

259:                                              ; preds = %257, %255, %246
  %260 = phi float [ %258, %257 ], [ 0.000000e+00, %246 ], [ %3, %255 ]
  %261 = fadd float %260, 5.000000e-01
  %262 = fptoui float %261 to i32
  %263 = getelementptr inbounds i32, i32* %1, i64 %251
  store i32 %262, i32* %263, align 4
  %264 = add nuw i64 %238, 2
  %265 = icmp eq i64 %264, %2
  br i1 %265, label %236, label %237, !llvm.loop !88
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR10FloatToF16EPKfPN3hwy9float16_tEm(float* nocapture readonly, %"struct.hwy::float16_t"* nocapture, i64) #5 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %42, label %5

5:                                                ; preds = %3, %37
  %6 = phi i64 [ %40, %37 ], [ 0, %3 ]
  %7 = getelementptr inbounds float, float* %0, i64 %6
  %8 = bitcast float* %7 to i32*
  %9 = load i32, i32* %8, align 4, !alias.scope !89
  %10 = lshr i32 %9, 31
  %11 = lshr i32 %9, 23
  %12 = and i32 %11, 255
  %13 = and i32 %9, 8388607
  %14 = icmp ult i32 %12, 142
  %15 = select i1 %14, i32 %12, i32 142
  %16 = add nsw i32 %15, -127
  %17 = icmp slt i32 %16, -24
  br i1 %17, label %37, label %18

18:                                               ; preds = %5
  %19 = icmp slt i32 %16, -14
  br i1 %19, label %20, label %26

20:                                               ; preds = %18
  %21 = add nsw i32 %15, -103
  %22 = shl i32 1, %21
  %23 = sub nuw nsw i32 126, %15
  %24 = lshr i32 %13, %23
  %25 = add nuw nsw i32 %22, %24
  br label %30

26:                                               ; preds = %18
  %27 = lshr i32 %13, 13
  %28 = shl nuw nsw i32 %15, 10
  %29 = add nsw i32 %28, -114688
  br label %30

30:                                               ; preds = %26, %20
  %31 = phi i32 [ 0, %20 ], [ %29, %26 ]
  %32 = phi i32 [ %25, %20 ], [ %27, %26 ]
  %33 = shl nuw nsw i32 %10, 15
  %34 = or i32 %31, %33
  %35 = or i32 %34, %32
  %36 = trunc i32 %35 to i16
  br label %37

37:                                               ; preds = %5, %30
  %38 = phi i16 [ %36, %30 ], [ 0, %5 ]
  %39 = getelementptr inbounds %"struct.hwy::float16_t", %"struct.hwy::float16_t"* %1, i64 %6, i32 0
  store i16 %38, i16* %39, align 1, !alias.scope !92
  %40 = add nuw i64 %6, 1
  %41 = icmp eq i64 %40, %2
  br i1 %41, label %42, label %5

42:                                               ; preds = %37, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl17ConvertToExternalERKNS_11ImageBundleEmbm13JxlEndiannessmPNS_10ThreadPoolEPvmPFvS6_mmmPKvES6_NS_11OrientationE(%"class.jxl::ImageBundle"* dereferenceable(368), i64, i1 zeroext, i64, i32, i64, %"class.jxl::ThreadPool"* readonly, i8*, i64, void (i8*, i64, i64, i64, i8*)*, i8*, i32) local_unnamed_addr #6 {
  %13 = alloca %"class.jxl::ThreadPool::RunCallState.189", align 8
  %14 = alloca %"class.jxl::ThreadPool::RunCallState.189", align 8
  %15 = alloca double, align 8
  %16 = alloca %"class.jxl::ThreadPool", align 8
  %17 = alloca %"class.jxl::ThreadPool::RunCallState.196", align 8
  %18 = alloca %"class.jxl::ThreadPool::RunCallState.196", align 8
  %19 = alloca double, align 8
  %20 = alloca %"class.jxl::ThreadPool", align 8
  %21 = alloca %"class.jxl::ThreadPool::RunCallState.197", align 8
  %22 = alloca %"class.jxl::ThreadPool::RunCallState.197", align 8
  %23 = alloca double, align 8
  %24 = alloca %"class.jxl::ThreadPool", align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i8*, align 8
  %29 = alloca void (i8*, i64, i64, i64, i8*)*, align 8
  %30 = alloca i8*, align 8
  %31 = alloca i64, align 8
  %32 = alloca i8, align 1
  %33 = alloca i64, align 8
  %34 = alloca %"class.jxl::Image3"*, align 8
  %35 = alloca %"class.jxl::Image3", align 8
  %36 = alloca %"class.jxl::Plane"*, align 8
  %37 = alloca %"class.jxl::Plane", align 8
  %38 = alloca %"class.std::__1::vector", align 8
  %39 = alloca %class.anon, align 8
  %40 = alloca %"class.jxl::Image3", align 8
  %41 = alloca i8, align 1
  %42 = alloca %"class.jxl::Plane", align 8
  %43 = alloca %"class.jxl::Plane", align 8
  %44 = alloca i8, align 1
  %45 = alloca %"class.jxl::Plane.135", align 8
  %46 = alloca %class.anon.136, align 8
  %47 = alloca %class.anon.137, align 8
  %48 = alloca %class.anon.138, align 8
  %49 = alloca %class.anon.139, align 8
  %50 = alloca float, align 4
  %51 = alloca %"class.jxl::Plane.140", align 8
  %52 = alloca %class.anon.141, align 8
  %53 = alloca %class.anon.142, align 8
  store i64 %1, i64* %25, align 8
  store i64 %3, i64* %26, align 8
  store i64 %5, i64* %27, align 8
  store i8* %7, i8** %28, align 8
  store void (i8*, i64, i64, i64, i8*)* %9, void (i8*, i64, i64, i64, i8*)** %29, align 8
  store i8* %10, i8** %30, align 8
  %54 = add i64 %1, -1
  %55 = icmp ugt i64 %54, 31
  br i1 %55, label %528, label %56

56:                                               ; preds = %12
  %57 = icmp eq i8* %7, null
  %58 = icmp ne void (i8*, i64, i64, i64, i8*)* %9, null
  %59 = xor i1 %57, %58
  %60 = icmp eq i64 %1, 1
  %61 = or i1 %60, %59
  br i1 %61, label %528, label %62

62:                                               ; preds = %56
  %63 = bitcast i64* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %63) #12
  store i64 -6148914691236517206, i64* %31, align 8
  %64 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %65 = load %"struct.jxl::jpeg::JPEGData"*, %"struct.jxl::jpeg::JPEGData"** %64, align 8
  %66 = icmp eq %"struct.jxl::jpeg::JPEGData"* %65, null
  br i1 %66, label %67, label %80

67:                                               ; preds = %62
  %68 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 0
  %69 = load i32, i32* %68, align 8
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %87

71:                                               ; preds = %67
  %72 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %73 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %72, align 8
  %74 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %75 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %74, align 8
  %76 = icmp eq %"class.jxl::Plane"* %73, %75
  br i1 %76, label %87, label %77

77:                                               ; preds = %71
  %78 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %73, i64 0, i32 0, i32 0
  %79 = load i32, i32* %78, align 8
  br label %87

80:                                               ; preds = %62
  %81 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %65, i64 0, i32 1
  %82 = load i32, i32* %81, align 8
  %83 = sext i32 %82 to i64
  store i64 %83, i64* %31, align 8
  %84 = getelementptr inbounds %"struct.jxl::jpeg::JPEGData", %"struct.jxl::jpeg::JPEGData"* %65, i64 0, i32 2
  %85 = load i32, i32* %84, align 4
  %86 = sext i32 %85 to i64
  br label %104

87:                                               ; preds = %67, %71, %77
  %88 = phi i32 [ %69, %67 ], [ 0, %71 ], [ %79, %77 ]
  %89 = zext i32 %88 to i64
  store i64 %89, i64* %31, align 8
  %90 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10, i32 0, i64 0, i32 0, i32 1
  %91 = load i32, i32* %90, align 4
  %92 = zext i32 %91 to i64
  %93 = icmp eq i32 %91, 0
  br i1 %93, label %94, label %104

94:                                               ; preds = %87
  %95 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 0
  %96 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %95, align 8
  %97 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 12, i32 0, i32 1
  %98 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %97, align 8
  %99 = icmp eq %"class.jxl::Plane"* %96, %98
  br i1 %99, label %104, label %100

100:                                              ; preds = %94
  %101 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %96, i64 0, i32 0, i32 1
  %102 = load i32, i32* %101, align 4
  %103 = zext i32 %102 to i64
  br label %104

104:                                              ; preds = %80, %87, %94, %100
  %105 = phi i64 [ %83, %80 ], [ %89, %100 ], [ %89, %94 ], [ %89, %87 ]
  %106 = phi i64 [ %86, %80 ], [ %103, %100 ], [ 0, %94 ], [ %92, %87 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %32) #12
  %107 = icmp eq i64 %3, 2
  %108 = icmp eq i64 %3, 4
  %109 = or i1 %107, %108
  %110 = zext i1 %109 to i8
  store i8 %110, i8* %32, align 1
  %111 = bitcast i64* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %111) #12
  %112 = icmp ult i64 %3, 3
  %113 = select i1 %112, i64 1, i64 3
  store i64 %113, i64* %33, align 8
  %114 = add nuw nsw i64 %1, 7
  %115 = lshr i64 %114, 3
  %116 = and i64 %115, 31
  %117 = mul i64 %116, %3
  %118 = bitcast %"class.jxl::Image3"** %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %118) #12
  %119 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 10
  store %"class.jxl::Image3"* %119, %"class.jxl::Image3"** %34, align 8
  %120 = bitcast %"class.jxl::Image3"* %35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %120) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %120, i8 0, i64 96, i1 false) #12
  %121 = bitcast %"class.jxl::Plane"** %36 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %121) #12
  store %"class.jxl::Plane"* inttoptr (i64 -6148914691236517206 to %"class.jxl::Plane"*), %"class.jxl::Plane"** %36, align 8
  %122 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %0, i64 0, i32 9
  %123 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %122, align 8
  %124 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %123, i64 0, i32 17, i32 0, i32 0
  %125 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %124, align 8
  %126 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %123, i64 0, i32 17, i32 0, i32 1
  %127 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %126, align 8
  %128 = icmp eq %"struct.jxl::ExtraChannelInfo"* %125, %127
  br i1 %128, label %141, label %131

129:                                              ; preds = %131
  %130 = icmp eq %"struct.jxl::ExtraChannelInfo"* %136, %127
  br i1 %130, label %141, label %131

131:                                              ; preds = %104, %129
  %132 = phi %"struct.jxl::ExtraChannelInfo"* [ %136, %129 ], [ %125, %104 ]
  %133 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %132, i64 0, i32 2
  %134 = load i32, i32* %133, align 4
  %135 = icmp eq i32 %134, 0
  %136 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %132, i64 1
  br i1 %135, label %137, label %129

137:                                              ; preds = %131
  %138 = icmp eq %"struct.jxl::ExtraChannelInfo"* %132, null
  br i1 %138, label %141, label %139

139:                                              ; preds = %137
  %140 = tail call dereferenceable(32) %"class.jxl::Plane"* @_ZNK3jxl11ImageBundle5alphaEv(%"class.jxl::ImageBundle"* %0) #12
  br label %141

141:                                              ; preds = %129, %137, %104, %139
  %142 = phi %"class.jxl::Plane"* [ %140, %139 ], [ null, %137 ], [ null, %104 ], [ null, %129 ]
  store %"class.jxl::Plane"* %142, %"class.jxl::Plane"** %36, align 8
  %143 = bitcast %"class.jxl::Plane"* %37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %143) #12
  %144 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %143, i8 0, i64 32, i1 false) #12
  %145 = bitcast %"class.std::__1::vector"* %38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %145) #12
  %146 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %38, i64 0, i32 0, i32 0
  %147 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %38, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %145, i8 0, i64 24, i1 false) #12
  %148 = bitcast %class.anon* %39 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %148) #12
  %149 = getelementptr inbounds %class.anon, %class.anon* %39, i64 0, i32 0
  %150 = getelementptr inbounds %class.anon, %class.anon* %39, i64 0, i32 1
  %151 = getelementptr inbounds %class.anon, %class.anon* %39, i64 0, i32 2
  store void (i8*, i64, i64, i64, i8*)** %29, void (i8*, i64, i64, i64, i8*)*** %149, align 8
  store %"class.std::__1::vector"* %38, %"class.std::__1::vector"** %150, align 8
  store i64* %27, i64** %151, align 8
  %152 = icmp eq i32 %11, 1
  br i1 %152, label %218, label %153

153:                                              ; preds = %141
  %154 = bitcast %"class.jxl::Image3"* %40 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %154) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %154, i8 0, i64 96, i1 false) #12
  %155 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %119, i64 0, i32 0, i64 0
  %156 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %40, i64 0, i32 0, i64 0
  call fastcc void @_ZN3jxl12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS5_PNS_10ThreadPoolE(i32 %11, %"class.jxl::Plane"* dereferenceable(32) %155, %"class.jxl::Plane"* dereferenceable(32) %156, %"class.jxl::ThreadPool"* %6)
  %157 = load i64, i64* %33, align 8
  %158 = icmp ugt i64 %157, 1
  br i1 %158, label %182, label %159

159:                                              ; preds = %182, %153
  %160 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %35, i64 0, i32 0, i64 0, i32 0
  %161 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %40, i64 0, i32 0, i64 0, i32 0
  call void @_ZN3jxl9PlaneBase4SwapERS0_(%"struct.jxl::PlaneBase"* nonnull %160, %"struct.jxl::PlaneBase"* nonnull dereferenceable(32) %161) #12
  %162 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %35, i64 0, i32 0, i64 1, i32 0
  %163 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %40, i64 0, i32 0, i64 1, i32 0
  call void @_ZN3jxl9PlaneBase4SwapERS0_(%"struct.jxl::PlaneBase"* %162, %"struct.jxl::PlaneBase"* dereferenceable(32) %163) #12
  %164 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %35, i64 0, i32 0, i64 2, i32 0
  %165 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %40, i64 0, i32 0, i64 2, i32 0
  call void @_ZN3jxl9PlaneBase4SwapERS0_(%"struct.jxl::PlaneBase"* %164, %"struct.jxl::PlaneBase"* dereferenceable(32) %165) #12
  store %"class.jxl::Image3"* %35, %"class.jxl::Image3"** %34, align 8
  %166 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %122, align 8
  %167 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %166, i64 0, i32 17, i32 0, i32 0
  %168 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %167, align 8
  %169 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %166, i64 0, i32 17, i32 0, i32 1
  %170 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %169, align 8
  %171 = icmp eq %"struct.jxl::ExtraChannelInfo"* %168, %170
  br i1 %171, label %193, label %174

172:                                              ; preds = %174
  %173 = icmp eq %"struct.jxl::ExtraChannelInfo"* %179, %170
  br i1 %173, label %193, label %174

174:                                              ; preds = %159, %172
  %175 = phi %"struct.jxl::ExtraChannelInfo"* [ %179, %172 ], [ %168, %159 ]
  %176 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %175, i64 0, i32 2
  %177 = load i32, i32* %176, align 4
  %178 = icmp eq i32 %177, 0
  %179 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %175, i64 1
  br i1 %178, label %180, label %172

180:                                              ; preds = %174
  %181 = icmp eq %"struct.jxl::ExtraChannelInfo"* %175, null
  br i1 %181, label %193, label %190

182:                                              ; preds = %153, %182
  %183 = phi i64 [ %187, %182 ], [ 1, %153 ]
  %184 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %34, align 8
  %185 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %184, i64 0, i32 0, i64 %183
  %186 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %40, i64 0, i32 0, i64 %183
  call fastcc void @_ZN3jxl12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS5_PNS_10ThreadPoolE(i32 %11, %"class.jxl::Plane"* dereferenceable(32) %185, %"class.jxl::Plane"* dereferenceable(32) %186, %"class.jxl::ThreadPool"* %6)
  %187 = add nuw i64 %183, 1
  %188 = load i64, i64* %33, align 8
  %189 = icmp ult i64 %187, %188
  br i1 %189, label %182, label %159

190:                                              ; preds = %180
  %191 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %36, align 8
  call fastcc void @_ZN3jxl12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS5_PNS_10ThreadPoolE(i32 %11, %"class.jxl::Plane"* dereferenceable(32) %191, %"class.jxl::Plane"* nonnull dereferenceable(32) %37, %"class.jxl::ThreadPool"* %6)
  store %"class.jxl::Plane"* %37, %"class.jxl::Plane"** %36, align 8
  %192 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %34, align 8
  br label %193

193:                                              ; preds = %172, %180, %159, %190
  %194 = phi %"class.jxl::Image3"* [ %35, %180 ], [ %35, %159 ], [ %192, %190 ], [ %35, %172 ]
  %195 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %194, i64 0, i32 0, i64 0, i32 0, i32 0
  %196 = load i32, i32* %195, align 8
  %197 = zext i32 %196 to i64
  store i64 %197, i64* %31, align 8
  %198 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %194, i64 0, i32 0, i64 0, i32 0, i32 1
  %199 = load i32, i32* %198, align 4
  %200 = zext i32 %199 to i64
  %201 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %40, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %202 = load i8*, i8** %201, align 8
  store i8* null, i8** %201, align 8
  %203 = icmp eq i8* %202, null
  br i1 %203, label %205, label %204

204:                                              ; preds = %193
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %202) #12
  br label %205

205:                                              ; preds = %204, %193
  %206 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %40, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %207 = load i8*, i8** %206, align 8
  store i8* null, i8** %206, align 8
  %208 = icmp eq i8* %207, null
  br i1 %208, label %210, label %209

209:                                              ; preds = %205
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %207) #12
  br label %210

210:                                              ; preds = %209, %205
  %211 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %40, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %212 = load i8*, i8** %211, align 8
  store i8* null, i8** %211, align 8
  %213 = icmp eq i8* %212, null
  br i1 %213, label %215, label %214

214:                                              ; preds = %210
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %212) #12
  br label %215

215:                                              ; preds = %210, %214
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %154) #12
  %216 = load i64, i64* %27, align 8
  %217 = load i64, i64* %31, align 8
  br label %218

218:                                              ; preds = %141, %215
  %219 = phi i64 [ %217, %215 ], [ %105, %141 ]
  %220 = phi i64 [ %216, %215 ], [ %5, %141 ]
  %221 = phi i64 [ %200, %215 ], [ %106, %141 ]
  %222 = mul i64 %117, %219
  %223 = icmp ult i64 %220, %222
  br i1 %223, label %483, label %224

224:                                              ; preds = %218
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %41) #12
  %225 = icmp ult i32 %4, 2
  %226 = zext i1 %225 to i8
  store i8 %226, i8* %41, align 1
  %227 = bitcast %"class.jxl::Plane"* %42 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %227) #12
  %228 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %42, i64 0, i32 0, i32 0
  %229 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %42, i64 0, i32 0, i32 1
  %230 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %42, i64 0, i32 0, i32 4
  %231 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %42, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %227, i8 0, i64 32, i1 false) #12
  %232 = load i8, i8* %32, align 1, !range !95
  %233 = icmp eq i8 %232, 0
  br i1 %233, label %304, label %234

234:                                              ; preds = %224
  %235 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %122, align 8
  %236 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %235, i64 0, i32 17, i32 0, i32 0
  %237 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %236, align 8
  %238 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %235, i64 0, i32 17, i32 0, i32 1
  %239 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %238, align 8
  %240 = icmp eq %"struct.jxl::ExtraChannelInfo"* %237, %239
  br i1 %240, label %251, label %243

241:                                              ; preds = %243
  %242 = icmp eq %"struct.jxl::ExtraChannelInfo"* %248, %239
  br i1 %242, label %251, label %243

243:                                              ; preds = %234, %241
  %244 = phi %"struct.jxl::ExtraChannelInfo"* [ %248, %241 ], [ %237, %234 ]
  %245 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %244, i64 0, i32 2
  %246 = load i32, i32* %245, align 4
  %247 = icmp eq i32 %246, 0
  %248 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %244, i64 1
  br i1 %247, label %249, label %241

249:                                              ; preds = %243
  %250 = icmp eq %"struct.jxl::ExtraChannelInfo"* %244, null
  br i1 %250, label %251, label %304

251:                                              ; preds = %241, %249, %234
  %252 = bitcast %"class.jxl::Plane"* %43 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %252) #12
  %253 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %43, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %253, i64 %219, i64 1, i64 4) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %227, i8* nonnull align 8 %252, i64 24, i1 false) #12
  %254 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %42, i64 0, i32 0, i32 5
  %255 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %43, i64 0, i32 0, i32 5
  %256 = getelementptr inbounds %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.118"* %255, i64 0, i32 0, i32 0, i32 0
  %257 = bitcast %"class.std::__1::unique_ptr.118"* %255 to i64*
  %258 = load i64, i64* %257, align 8
  store i8* null, i8** %256, align 8
  %259 = getelementptr inbounds %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.118"* %254, i64 0, i32 0, i32 0, i32 0
  %260 = load i8*, i8** %259, align 8
  %261 = bitcast %"class.std::__1::unique_ptr.118"* %254 to i64*
  store i64 %258, i64* %261, align 8
  %262 = icmp eq i8* %260, null
  br i1 %262, label %263, label %265

263:                                              ; preds = %251
  %264 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %43, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %264, align 8
  br label %271

265:                                              ; preds = %251
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %260) #12
  %266 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %43, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %267 = load i8*, i8** %266, align 8
  %268 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %43, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %268, align 8
  %269 = icmp eq i8* %267, null
  br i1 %269, label %271, label %270

270:                                              ; preds = %265
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %267) #12
  br label %271

271:                                              ; preds = %263, %265, %270
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %252) #12
  %272 = load i32, i32* %229, align 4
  %273 = icmp eq i32 %272, 0
  br i1 %273, label %304, label %274

274:                                              ; preds = %271
  %275 = load i32, i32* %228, align 8
  br label %276

276:                                              ; preds = %291, %274
  %277 = phi i32 [ %272, %274 ], [ %292, %291 ]
  %278 = phi i32 [ %275, %274 ], [ %293, %291 ]
  %279 = phi i64 [ 0, %274 ], [ %294, %291 ]
  %280 = load i8*, i8** %231, align 8
  %281 = load i64, i64* %230, align 8
  %282 = mul i64 %281, %279
  %283 = getelementptr inbounds i8, i8* %280, i64 %282
  %284 = ptrtoint i8* %283 to i64
  %285 = and i64 %284, 63
  %286 = icmp eq i64 %285, 0
  call void @llvm.assume(i1 %286) #12
  %287 = bitcast i8* %283 to float*
  %288 = icmp eq i32 %278, 0
  br i1 %288, label %291, label %297

289:                                              ; preds = %297
  %290 = load i32, i32* %229, align 4
  br label %291

291:                                              ; preds = %289, %276
  %292 = phi i32 [ %290, %289 ], [ %277, %276 ]
  %293 = phi i32 [ %301, %289 ], [ 0, %276 ]
  %294 = add nuw nsw i64 %279, 1
  %295 = zext i32 %292 to i64
  %296 = icmp ult i64 %294, %295
  br i1 %296, label %276, label %304

297:                                              ; preds = %276, %297
  %298 = phi i64 [ %300, %297 ], [ 0, %276 ]
  %299 = getelementptr inbounds float, float* %287, i64 %298
  store float 1.000000e+00, float* %299, align 4
  %300 = add nuw nsw i64 %298, 1
  %301 = load i32, i32* %228, align 8
  %302 = zext i32 %301 to i64
  %303 = icmp ult i64 %300, %302
  br i1 %303, label %297, label %289

304:                                              ; preds = %291, %249, %271, %224
  br i1 %2, label %305, label %413

305:                                              ; preds = %304
  %306 = load i64, i64* %25, align 8
  switch i64 %306, label %477 [
    i64 16, label %307
    i64 32, label %366
  ]

307:                                              ; preds = %305
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %44) #12
  %308 = load i8, i8* %41, align 1, !range !95
  %309 = xor i8 %308, 1
  store i8 %309, i8* %44, align 1
  %310 = bitcast %"class.jxl::Plane.135"* %45 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %310) #12
  %311 = getelementptr inbounds %"class.jxl::Plane.135", %"class.jxl::Plane.135"* %45, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %310, i8 0, i64 32, i1 false) #12
  %312 = trunc i64 %221 to i32
  %313 = bitcast %class.anon.136* %46 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %313) #12
  %314 = getelementptr inbounds %class.anon.136, %class.anon.136* %46, i64 0, i32 0
  store %"class.jxl::Plane.135"* %45, %"class.jxl::Plane.135"** %314, align 8
  %315 = getelementptr inbounds %class.anon.136, %class.anon.136* %46, i64 0, i32 1
  store i64* %31, i64** %315, align 8
  %316 = getelementptr inbounds %class.anon.136, %class.anon.136* %46, i64 0, i32 2
  store i64* %26, i64** %316, align 8
  %317 = getelementptr inbounds %class.anon.136, %class.anon.136* %46, i64 0, i32 3
  store %class.anon* %39, %class.anon** %317, align 8
  %318 = bitcast %class.anon.137* %47 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %318) #12
  %319 = getelementptr inbounds %class.anon.137, %class.anon.137* %47, i64 0, i32 0
  store i64* %33, i64** %319, align 8
  %320 = getelementptr inbounds %class.anon.137, %class.anon.137* %47, i64 0, i32 1
  store %"class.jxl::Image3"** %34, %"class.jxl::Image3"*** %320, align 8
  %321 = getelementptr inbounds %class.anon.137, %class.anon.137* %47, i64 0, i32 2
  store i8* %32, i8** %321, align 8
  %322 = getelementptr inbounds %class.anon.137, %class.anon.137* %47, i64 0, i32 3
  store %"class.jxl::ImageBundle"* %0, %"class.jxl::ImageBundle"** %322, align 8
  %323 = getelementptr inbounds %class.anon.137, %class.anon.137* %47, i64 0, i32 4
  store %"class.jxl::Plane"** %36, %"class.jxl::Plane"*** %323, align 8
  %324 = getelementptr inbounds %class.anon.137, %class.anon.137* %47, i64 0, i32 5
  store %"class.jxl::Plane"* %42, %"class.jxl::Plane"** %324, align 8
  %325 = getelementptr inbounds %class.anon.137, %class.anon.137* %47, i64 0, i32 6
  store i64* %26, i64** %325, align 8
  %326 = getelementptr inbounds %class.anon.137, %class.anon.137* %47, i64 0, i32 7
  store %"class.jxl::Plane.135"* %45, %"class.jxl::Plane.135"** %326, align 8
  %327 = getelementptr inbounds %class.anon.137, %class.anon.137* %47, i64 0, i32 8
  store i64* %31, i64** %327, align 8
  %328 = getelementptr inbounds %class.anon.137, %class.anon.137* %47, i64 0, i32 9
  store void (i8*, i64, i64, i64, i8*)** %29, void (i8*, i64, i64, i64, i8*)*** %328, align 8
  %329 = getelementptr inbounds %class.anon.137, %class.anon.137* %47, i64 0, i32 10
  store %"class.std::__1::vector"* %38, %"class.std::__1::vector"** %329, align 8
  %330 = getelementptr inbounds %class.anon.137, %class.anon.137* %47, i64 0, i32 11
  store i8** %28, i8*** %330, align 8
  %331 = getelementptr inbounds %class.anon.137, %class.anon.137* %47, i64 0, i32 12
  store i64* %27, i64** %331, align 8
  %332 = getelementptr inbounds %class.anon.137, %class.anon.137* %47, i64 0, i32 13
  store i8* %44, i8** %332, align 8
  %333 = getelementptr inbounds %class.anon.137, %class.anon.137* %47, i64 0, i32 14
  store i8** %30, i8*** %333, align 8
  %334 = bitcast double* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %334) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %15, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), double* nonnull %15) #12
  %335 = icmp eq %"class.jxl::ThreadPool"* %6, null
  br i1 %335, label %336, label %347

336:                                              ; preds = %307
  %337 = bitcast %"class.jxl::ThreadPool"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %337) #12
  %338 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %16, i64 0, i32 0
  %339 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %16, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %338, align 8
  %340 = bitcast i8** %339 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %16, %"class.jxl::ThreadPool"** %340, align 8
  %341 = icmp eq i32 %312, 0
  br i1 %341, label %358, label %342

342:                                              ; preds = %336
  %343 = bitcast %"class.jxl::ThreadPool::RunCallState.189"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %343) #12
  %344 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.189", %"class.jxl::ThreadPool::RunCallState.189"* %13, i64 0, i32 0
  %345 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.189", %"class.jxl::ThreadPool::RunCallState.189"* %13, i64 0, i32 1
  store %class.anon.136* %46, %class.anon.136** %344, align 8
  store %class.anon.137* %47, %class.anon.137** %345, align 8
  %346 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %337, i8* nonnull %343, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_17ConvertToExternalERKNS_11ImageBundleEmbm13JxlEndiannessmPS0_PvmPFvS7_mmmPKvES7_NS_11OrientationEE3$_0ZNS_17ConvertToExternalES4_mbmS5_mS6_S7_mSB_S7_SC_E3$_1E12CallInitFuncES7_m", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_17ConvertToExternalERKNS_11ImageBundleEmbm13JxlEndiannessmPS0_PvmPFvS7_mmmPKvES7_NS_11OrientationEE3$_0ZNS_17ConvertToExternalES4_mbmS5_mS6_S7_mSB_S7_SC_E3$_1E12CallDataFuncES7_jm", i32 0, i32 %312) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #12
  br label %358

347:                                              ; preds = %307
  %348 = icmp eq i32 %312, 0
  br i1 %348, label %360, label %349

349:                                              ; preds = %347
  %350 = bitcast %"class.jxl::ThreadPool::RunCallState.189"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %350) #12
  %351 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.189", %"class.jxl::ThreadPool::RunCallState.189"* %14, i64 0, i32 0
  %352 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.189", %"class.jxl::ThreadPool::RunCallState.189"* %14, i64 0, i32 1
  store %class.anon.136* %46, %class.anon.136** %351, align 8
  store %class.anon.137* %47, %class.anon.137** %352, align 8
  %353 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %6, i64 0, i32 0
  %354 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %353, align 8
  %355 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %6, i64 0, i32 1
  %356 = load i8*, i8** %355, align 8
  %357 = call i32 %354(i8* %356, i8* nonnull %350, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_17ConvertToExternalERKNS_11ImageBundleEmbm13JxlEndiannessmPS0_PvmPFvS7_mmmPKvES7_NS_11OrientationEE3$_0ZNS_17ConvertToExternalES4_mbmS5_mS6_S7_mSB_S7_SC_E3$_1E12CallInitFuncES7_m", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_17ConvertToExternalERKNS_11ImageBundleEmbm13JxlEndiannessmPS0_PvmPFvS7_mmmPKvES7_NS_11OrientationEE3$_0ZNS_17ConvertToExternalES4_mbmS5_mS6_S7_mSB_S7_SC_E3$_1E12CallDataFuncES7_jm", i32 0, i32 %312) #12
  br label %358

358:                                              ; preds = %336, %342, %349
  %359 = phi i8* [ %350, %349 ], [ %337, %342 ], [ %337, %336 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %359) #12
  br label %360

360:                                              ; preds = %358, %347
  %361 = load double, double* %15, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), double %361) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %334) #12
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %318) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %313) #12
  %362 = load i8*, i8** %311, align 8
  store i8* null, i8** %311, align 8
  %363 = icmp eq i8* %362, null
  br i1 %363, label %365, label %364

364:                                              ; preds = %360
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %362) #12
  br label %365

365:                                              ; preds = %360, %364
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %310) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %44) #12
  br label %477

366:                                              ; preds = %305
  %367 = trunc i64 %221 to i32
  %368 = bitcast %class.anon.138* %48 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %368) #12
  %369 = getelementptr inbounds %class.anon.138, %class.anon.138* %48, i64 0, i32 0
  store %class.anon* %39, %class.anon** %369, align 8
  %370 = bitcast %class.anon.139* %49 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %370) #12
  %371 = getelementptr inbounds %class.anon.139, %class.anon.139* %49, i64 0, i32 0
  store void (i8*, i64, i64, i64, i8*)** %29, void (i8*, i64, i64, i64, i8*)*** %371, align 8
  %372 = getelementptr inbounds %class.anon.139, %class.anon.139* %49, i64 0, i32 1
  store %"class.std::__1::vector"* %38, %"class.std::__1::vector"** %372, align 8
  %373 = getelementptr inbounds %class.anon.139, %class.anon.139* %49, i64 0, i32 2
  store i8** %28, i8*** %373, align 8
  %374 = getelementptr inbounds %class.anon.139, %class.anon.139* %49, i64 0, i32 3
  store i64* %27, i64** %374, align 8
  %375 = getelementptr inbounds %class.anon.139, %class.anon.139* %49, i64 0, i32 4
  store i64* %33, i64** %375, align 8
  %376 = getelementptr inbounds %class.anon.139, %class.anon.139* %49, i64 0, i32 5
  store %"class.jxl::Image3"** %34, %"class.jxl::Image3"*** %376, align 8
  %377 = getelementptr inbounds %class.anon.139, %class.anon.139* %49, i64 0, i32 6
  store i8* %32, i8** %377, align 8
  %378 = getelementptr inbounds %class.anon.139, %class.anon.139* %49, i64 0, i32 7
  store %"class.jxl::ImageBundle"* %0, %"class.jxl::ImageBundle"** %378, align 8
  %379 = getelementptr inbounds %class.anon.139, %class.anon.139* %49, i64 0, i32 8
  store %"class.jxl::Plane"** %36, %"class.jxl::Plane"*** %379, align 8
  %380 = getelementptr inbounds %class.anon.139, %class.anon.139* %49, i64 0, i32 9
  store %"class.jxl::Plane"* %42, %"class.jxl::Plane"** %380, align 8
  %381 = getelementptr inbounds %class.anon.139, %class.anon.139* %49, i64 0, i32 10
  store i64* %26, i64** %381, align 8
  %382 = getelementptr inbounds %class.anon.139, %class.anon.139* %49, i64 0, i32 11
  store i8* %41, i8** %382, align 8
  %383 = getelementptr inbounds %class.anon.139, %class.anon.139* %49, i64 0, i32 12
  store i64* %31, i64** %383, align 8
  %384 = getelementptr inbounds %class.anon.139, %class.anon.139* %49, i64 0, i32 13
  store i8** %30, i8*** %384, align 8
  %385 = bitcast double* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %385) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %19, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0), double* nonnull %19) #12
  %386 = icmp eq %"class.jxl::ThreadPool"* %6, null
  br i1 %386, label %387, label %398

387:                                              ; preds = %366
  %388 = bitcast %"class.jxl::ThreadPool"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %388) #12
  %389 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %20, i64 0, i32 0
  %390 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %20, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %389, align 8
  %391 = bitcast i8** %390 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %20, %"class.jxl::ThreadPool"** %391, align 8
  %392 = icmp eq i32 %367, 0
  br i1 %392, label %409, label %393

393:                                              ; preds = %387
  %394 = bitcast %"class.jxl::ThreadPool::RunCallState.196"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %394) #12
  %395 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.196", %"class.jxl::ThreadPool::RunCallState.196"* %17, i64 0, i32 0
  %396 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.196", %"class.jxl::ThreadPool::RunCallState.196"* %17, i64 0, i32 1
  store %class.anon.138* %48, %class.anon.138** %395, align 8
  store %class.anon.139* %49, %class.anon.139** %396, align 8
  %397 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %388, i8* nonnull %394, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_17ConvertToExternalERKNS_11ImageBundleEmbm13JxlEndiannessmPS0_PvmPFvS7_mmmPKvES7_NS_11OrientationEE3$_2ZNS_17ConvertToExternalES4_mbmS5_mS6_S7_mSB_S7_SC_E3$_3E12CallInitFuncES7_m", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_17ConvertToExternalERKNS_11ImageBundleEmbm13JxlEndiannessmPS0_PvmPFvS7_mmmPKvES7_NS_11OrientationEE3$_2ZNS_17ConvertToExternalES4_mbmS5_mS6_S7_mSB_S7_SC_E3$_3E12CallDataFuncES7_jm", i32 0, i32 %367) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %394) #12
  br label %409

398:                                              ; preds = %366
  %399 = icmp eq i32 %367, 0
  br i1 %399, label %411, label %400

400:                                              ; preds = %398
  %401 = bitcast %"class.jxl::ThreadPool::RunCallState.196"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %401) #12
  %402 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.196", %"class.jxl::ThreadPool::RunCallState.196"* %18, i64 0, i32 0
  %403 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.196", %"class.jxl::ThreadPool::RunCallState.196"* %18, i64 0, i32 1
  store %class.anon.138* %48, %class.anon.138** %402, align 8
  store %class.anon.139* %49, %class.anon.139** %403, align 8
  %404 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %6, i64 0, i32 0
  %405 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %404, align 8
  %406 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %6, i64 0, i32 1
  %407 = load i8*, i8** %406, align 8
  %408 = call i32 %405(i8* %407, i8* nonnull %401, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_17ConvertToExternalERKNS_11ImageBundleEmbm13JxlEndiannessmPS0_PvmPFvS7_mmmPKvES7_NS_11OrientationEE3$_2ZNS_17ConvertToExternalES4_mbmS5_mS6_S7_mSB_S7_SC_E3$_3E12CallInitFuncES7_m", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_17ConvertToExternalERKNS_11ImageBundleEmbm13JxlEndiannessmPS0_PvmPFvS7_mmmPKvES7_NS_11OrientationEE3$_2ZNS_17ConvertToExternalES4_mbmS5_mS6_S7_mSB_S7_SC_E3$_3E12CallDataFuncES7_jm", i32 0, i32 %367) #12
  br label %409

409:                                              ; preds = %387, %393, %400
  %410 = phi i8* [ %401, %400 ], [ %388, %393 ], [ %388, %387 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %410) #12
  br label %411

411:                                              ; preds = %409, %398
  %412 = load double, double* %19, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0), double %412) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %385) #12
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %370) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %368) #12
  br label %477

413:                                              ; preds = %304
  %414 = bitcast float* %50 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %414) #12
  %415 = load i64, i64* %25, align 8
  %416 = shl nsw i64 -1, %415
  %417 = xor i64 %416, -1
  %418 = uitofp i64 %417 to float
  store float %418, float* %50, align 4
  %419 = bitcast %"class.jxl::Plane.140"* %51 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %419) #12
  %420 = getelementptr inbounds %"class.jxl::Plane.140", %"class.jxl::Plane.140"* %51, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %419, i8 0, i64 32, i1 false) #12
  %421 = trunc i64 %221 to i32
  %422 = bitcast %class.anon.141* %52 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %422) #12
  %423 = getelementptr inbounds %class.anon.141, %class.anon.141* %52, i64 0, i32 0
  store %"class.jxl::Plane.140"* %51, %"class.jxl::Plane.140"** %423, align 8
  %424 = getelementptr inbounds %class.anon.141, %class.anon.141* %52, i64 0, i32 1
  store i64* %31, i64** %424, align 8
  %425 = getelementptr inbounds %class.anon.141, %class.anon.141* %52, i64 0, i32 2
  store i64* %26, i64** %425, align 8
  %426 = getelementptr inbounds %class.anon.141, %class.anon.141* %52, i64 0, i32 3
  store %class.anon* %39, %class.anon** %426, align 8
  %427 = bitcast %class.anon.142* %53 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %427) #12
  %428 = getelementptr inbounds %class.anon.142, %class.anon.142* %53, i64 0, i32 0
  store void (i8*, i64, i64, i64, i8*)** %29, void (i8*, i64, i64, i64, i8*)*** %428, align 8
  %429 = getelementptr inbounds %class.anon.142, %class.anon.142* %53, i64 0, i32 1
  store %"class.std::__1::vector"* %38, %"class.std::__1::vector"** %429, align 8
  %430 = getelementptr inbounds %class.anon.142, %class.anon.142* %53, i64 0, i32 2
  store i8** %28, i8*** %430, align 8
  %431 = getelementptr inbounds %class.anon.142, %class.anon.142* %53, i64 0, i32 3
  store i64* %27, i64** %431, align 8
  %432 = getelementptr inbounds %class.anon.142, %class.anon.142* %53, i64 0, i32 4
  store i64* %33, i64** %432, align 8
  %433 = getelementptr inbounds %class.anon.142, %class.anon.142* %53, i64 0, i32 5
  store %"class.jxl::Image3"** %34, %"class.jxl::Image3"*** %433, align 8
  %434 = getelementptr inbounds %class.anon.142, %class.anon.142* %53, i64 0, i32 6
  store i8* %32, i8** %434, align 8
  %435 = getelementptr inbounds %class.anon.142, %class.anon.142* %53, i64 0, i32 7
  store %"class.jxl::ImageBundle"* %0, %"class.jxl::ImageBundle"** %435, align 8
  %436 = getelementptr inbounds %class.anon.142, %class.anon.142* %53, i64 0, i32 8
  store %"class.jxl::Plane"** %36, %"class.jxl::Plane"*** %436, align 8
  %437 = getelementptr inbounds %class.anon.142, %class.anon.142* %53, i64 0, i32 9
  store %"class.jxl::Plane"* %42, %"class.jxl::Plane"** %437, align 8
  %438 = getelementptr inbounds %class.anon.142, %class.anon.142* %53, i64 0, i32 10
  store i64* %26, i64** %438, align 8
  %439 = getelementptr inbounds %class.anon.142, %class.anon.142* %53, i64 0, i32 11
  store %"class.jxl::Plane.140"* %51, %"class.jxl::Plane.140"** %439, align 8
  %440 = getelementptr inbounds %class.anon.142, %class.anon.142* %53, i64 0, i32 12
  store i64* %31, i64** %440, align 8
  %441 = getelementptr inbounds %class.anon.142, %class.anon.142* %53, i64 0, i32 13
  store float* %50, float** %441, align 8
  %442 = getelementptr inbounds %class.anon.142, %class.anon.142* %53, i64 0, i32 14
  store i64* %25, i64** %442, align 8
  %443 = getelementptr inbounds %class.anon.142, %class.anon.142* %53, i64 0, i32 15
  store i8* %41, i8** %443, align 8
  %444 = getelementptr inbounds %class.anon.142, %class.anon.142* %53, i64 0, i32 16
  store i8** %30, i8*** %444, align 8
  %445 = bitcast double* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %445) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %23, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), double* nonnull %23) #12
  %446 = icmp eq %"class.jxl::ThreadPool"* %6, null
  br i1 %446, label %447, label %458

447:                                              ; preds = %413
  %448 = bitcast %"class.jxl::ThreadPool"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %448) #12
  %449 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %24, i64 0, i32 0
  %450 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %24, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %449, align 8
  %451 = bitcast i8** %450 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %24, %"class.jxl::ThreadPool"** %451, align 8
  %452 = icmp eq i32 %421, 0
  br i1 %452, label %469, label %453

453:                                              ; preds = %447
  %454 = bitcast %"class.jxl::ThreadPool::RunCallState.197"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %454) #12
  %455 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.197", %"class.jxl::ThreadPool::RunCallState.197"* %21, i64 0, i32 0
  %456 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.197", %"class.jxl::ThreadPool::RunCallState.197"* %21, i64 0, i32 1
  store %class.anon.141* %52, %class.anon.141** %455, align 8
  store %class.anon.142* %53, %class.anon.142** %456, align 8
  %457 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %448, i8* nonnull %454, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_17ConvertToExternalERKNS_11ImageBundleEmbm13JxlEndiannessmPS0_PvmPFvS7_mmmPKvES7_NS_11OrientationEE3$_4ZNS_17ConvertToExternalES4_mbmS5_mS6_S7_mSB_S7_SC_E3$_5E12CallInitFuncES7_m", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_17ConvertToExternalERKNS_11ImageBundleEmbm13JxlEndiannessmPS0_PvmPFvS7_mmmPKvES7_NS_11OrientationEE3$_4ZNS_17ConvertToExternalES4_mbmS5_mS6_S7_mSB_S7_SC_E3$_5E12CallDataFuncES7_jm", i32 0, i32 %421) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %454) #12
  br label %469

458:                                              ; preds = %413
  %459 = icmp eq i32 %421, 0
  br i1 %459, label %471, label %460

460:                                              ; preds = %458
  %461 = bitcast %"class.jxl::ThreadPool::RunCallState.197"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %461) #12
  %462 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.197", %"class.jxl::ThreadPool::RunCallState.197"* %22, i64 0, i32 0
  %463 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.197", %"class.jxl::ThreadPool::RunCallState.197"* %22, i64 0, i32 1
  store %class.anon.141* %52, %class.anon.141** %462, align 8
  store %class.anon.142* %53, %class.anon.142** %463, align 8
  %464 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %6, i64 0, i32 0
  %465 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %464, align 8
  %466 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %6, i64 0, i32 1
  %467 = load i8*, i8** %466, align 8
  %468 = call i32 %465(i8* %467, i8* nonnull %461, i32 (i8*, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_17ConvertToExternalERKNS_11ImageBundleEmbm13JxlEndiannessmPS0_PvmPFvS7_mmmPKvES7_NS_11OrientationEE3$_4ZNS_17ConvertToExternalES4_mbmS5_mS6_S7_mSB_S7_SC_E3$_5E12CallInitFuncES7_m", void (i8*, i32, i64)* nonnull @"_ZN3jxl10ThreadPool12RunCallStateIZNS_17ConvertToExternalERKNS_11ImageBundleEmbm13JxlEndiannessmPS0_PvmPFvS7_mmmPKvES7_NS_11OrientationEE3$_4ZNS_17ConvertToExternalES4_mbmS5_mS6_S7_mSB_S7_SC_E3$_5E12CallDataFuncES7_jm", i32 0, i32 %421) #12
  br label %469

469:                                              ; preds = %447, %453, %460
  %470 = phi i8* [ %461, %460 ], [ %448, %453 ], [ %448, %447 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %470) #12
  br label %471

471:                                              ; preds = %469, %458
  %472 = load double, double* %23, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), double %472) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %445) #12
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %427) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %422) #12
  %473 = load i8*, i8** %420, align 8
  store i8* null, i8** %420, align 8
  %474 = icmp eq i8* %473, null
  br i1 %474, label %476, label %475

475:                                              ; preds = %471
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %473) #12
  br label %476

476:                                              ; preds = %471, %475
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %419) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %414) #12
  br label %477

477:                                              ; preds = %476, %411, %365, %305
  %478 = phi i32 [ 1, %305 ], [ 0, %365 ], [ 0, %411 ], [ 0, %476 ]
  %479 = load i8*, i8** %231, align 8
  store i8* null, i8** %231, align 8
  %480 = icmp eq i8* %479, null
  br i1 %480, label %482, label %481

481:                                              ; preds = %477
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %479) #12
  br label %482

482:                                              ; preds = %477, %481
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %227) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %41) #12
  br label %483

483:                                              ; preds = %218, %482
  %484 = phi i32 [ %478, %482 ], [ 1, %218 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %148) #12
  %485 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %146, align 8
  %486 = icmp eq %"class.std::__1::vector.43"* %485, null
  br i1 %486, label %508, label %487

487:                                              ; preds = %483
  %488 = bitcast %"class.std::__1::vector.43"* %485 to i8*
  %489 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %147, align 8
  %490 = icmp eq %"class.std::__1::vector.43"* %489, %485
  br i1 %490, label %506, label %491

491:                                              ; preds = %487, %501
  %492 = phi %"class.std::__1::vector.43"* [ %493, %501 ], [ %489, %487 ]
  %493 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %492, i64 -1
  %494 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %493, i64 0, i32 0, i32 0
  %495 = load i8*, i8** %494, align 8
  %496 = icmp eq i8* %495, null
  br i1 %496, label %501, label %497

497:                                              ; preds = %491
  %498 = ptrtoint i8* %495 to i64
  %499 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %492, i64 -1, i32 0, i32 1
  %500 = bitcast i8** %499 to i64*
  store i64 %498, i64* %500, align 8
  call void @_ZdlPv(i8* nonnull %495) #14
  br label %501

501:                                              ; preds = %497, %491
  %502 = icmp eq %"class.std::__1::vector.43"* %493, %485
  br i1 %502, label %503, label %491

503:                                              ; preds = %501
  %504 = bitcast %"class.std::__1::vector"* %38 to i8**
  %505 = load i8*, i8** %504, align 8
  br label %506

506:                                              ; preds = %503, %487
  %507 = phi i8* [ %505, %503 ], [ %488, %487 ]
  store %"class.std::__1::vector.43"* %485, %"class.std::__1::vector.43"** %147, align 8
  call void @_ZdlPv(i8* %507) #14
  br label %508

508:                                              ; preds = %483, %506
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %145) #12
  %509 = load i8*, i8** %144, align 8
  store i8* null, i8** %144, align 8
  %510 = icmp eq i8* %509, null
  br i1 %510, label %512, label %511

511:                                              ; preds = %508
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %509) #12
  br label %512

512:                                              ; preds = %508, %511
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %143) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %121) #12
  %513 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %35, i64 0, i32 0, i64 2, i32 0, i32 5, i32 0, i32 0, i32 0
  %514 = load i8*, i8** %513, align 8
  store i8* null, i8** %513, align 8
  %515 = icmp eq i8* %514, null
  br i1 %515, label %517, label %516

516:                                              ; preds = %512
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %514) #12
  br label %517

517:                                              ; preds = %516, %512
  %518 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %35, i64 0, i32 0, i64 1, i32 0, i32 5, i32 0, i32 0, i32 0
  %519 = load i8*, i8** %518, align 8
  store i8* null, i8** %518, align 8
  %520 = icmp eq i8* %519, null
  br i1 %520, label %522, label %521

521:                                              ; preds = %517
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %519) #12
  br label %522

522:                                              ; preds = %521, %517
  %523 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %35, i64 0, i32 0, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %524 = load i8*, i8** %523, align 8
  store i8* null, i8** %523, align 8
  %525 = icmp eq i8* %524, null
  br i1 %525, label %527, label %526

526:                                              ; preds = %522
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %524) #12
  br label %527

527:                                              ; preds = %522, %526
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %120) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %118) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %111) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %32) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %63) #12
  br label %528

528:                                              ; preds = %56, %12, %527
  %529 = phi i32 [ %484, %527 ], [ 1, %12 ], [ 1, %56 ]
  ret i32 %529
}

declare dereferenceable(32) %"class.jxl::Plane"* @_ZNK3jxl11ImageBundle5alphaEv(%"class.jxl::ImageBundle"*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN3jxl12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS5_PNS_10ThreadPoolE(i32, %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::Plane"* dereferenceable(32), %"class.jxl::ThreadPool"* readonly) unnamed_addr #6 {
  %5 = alloca %"class.jxl::ThreadPool::RunCallState.187", align 8
  %6 = alloca %"class.jxl::ThreadPool::RunCallState.187", align 8
  %7 = alloca double, align 8
  %8 = alloca %"class.jxl::ThreadPool", align 8
  %9 = alloca %"class.jxl::ThreadPool::RunCallState.186", align 8
  %10 = alloca %"class.jxl::ThreadPool::RunCallState.186", align 8
  %11 = alloca double, align 8
  %12 = alloca %"class.jxl::ThreadPool", align 8
  %13 = alloca %"class.jxl::ThreadPool::RunCallState.185", align 8
  %14 = alloca %"class.jxl::ThreadPool::RunCallState.185", align 8
  %15 = alloca double, align 8
  %16 = alloca %"class.jxl::ThreadPool", align 8
  %17 = alloca %"class.jxl::ThreadPool::RunCallState.184", align 8
  %18 = alloca %"class.jxl::ThreadPool::RunCallState.184", align 8
  %19 = alloca double, align 8
  %20 = alloca %"class.jxl::ThreadPool", align 8
  %21 = alloca %"class.jxl::ThreadPool::RunCallState.183", align 8
  %22 = alloca %"class.jxl::ThreadPool::RunCallState.183", align 8
  %23 = alloca double, align 8
  %24 = alloca %"class.jxl::ThreadPool", align 8
  %25 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %26 = alloca %"class.jxl::ThreadPool::RunCallState", align 8
  %27 = alloca double, align 8
  %28 = alloca %"class.jxl::ThreadPool", align 8
  %29 = alloca %"class.jxl::ThreadPool::RunCallState.188", align 8
  %30 = alloca %"class.jxl::ThreadPool::RunCallState.188", align 8
  %31 = alloca double, align 8
  %32 = alloca %"class.jxl::ThreadPool", align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca %"class.jxl::Plane", align 8
  %36 = alloca %class.anon.176, align 8
  %37 = alloca %"class.jxl::Plane", align 8
  %38 = alloca %class.anon.177, align 8
  %39 = alloca %"class.jxl::Plane", align 8
  %40 = alloca %class.anon.178, align 8
  %41 = alloca %"class.jxl::Plane", align 8
  %42 = alloca %class.anon.179, align 8
  %43 = alloca %"class.jxl::Plane", align 8
  %44 = alloca %class.anon.180, align 8
  %45 = alloca %"class.jxl::Plane", align 8
  %46 = alloca %class.anon.181, align 8
  %47 = alloca %"class.jxl::Plane", align 8
  %48 = alloca %class.anon.182, align 8
  %49 = bitcast i64* %33 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #12
  %50 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 0
  %51 = load i32, i32* %50, align 8
  %52 = zext i32 %51 to i64
  store i64 %52, i64* %33, align 8
  %53 = bitcast i64* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %53) #12
  %54 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %1, i64 0, i32 0, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = zext i32 %55 to i64
  store i64 %56, i64* %34, align 8
  switch i32 %0, label %453 [
    i32 2, label %57
    i32 3, label %113
    i32 4, label %170
    i32 5, label %227
    i32 6, label %283
    i32 7, label %340
    i32 8, label %397
  ]

57:                                               ; preds = %4
  %58 = bitcast %"class.jxl::Plane"* %35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %58) #12
  %59 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %35, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %59, i64 %52, i64 %56, i64 4) #12
  %60 = bitcast %"class.jxl::Plane"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* nonnull align 8 %58, i64 24, i1 false) #12
  %61 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 5
  %62 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %35, i64 0, i32 0, i32 5
  %63 = getelementptr inbounds %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.118"* %62, i64 0, i32 0, i32 0, i32 0
  %64 = bitcast %"class.std::__1::unique_ptr.118"* %62 to i64*
  %65 = load i64, i64* %64, align 8
  store i8* null, i8** %63, align 8
  %66 = getelementptr inbounds %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.118"* %61, i64 0, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = bitcast %"class.std::__1::unique_ptr.118"* %61 to i64*
  store i64 %65, i64* %68, align 8
  %69 = icmp eq i8* %67, null
  br i1 %69, label %70, label %72

70:                                               ; preds = %57
  %71 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %35, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %71, align 8
  br label %78

72:                                               ; preds = %57
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %67) #12
  %73 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %35, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %74 = load i8*, i8** %73, align 8
  %75 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %35, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %75, align 8
  %76 = icmp eq i8* %74, null
  br i1 %76, label %78, label %77

77:                                               ; preds = %72
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %74) #12
  br label %78

78:                                               ; preds = %70, %72, %77
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %58) #12
  %79 = load i64, i64* %34, align 8
  %80 = trunc i64 %79 to i32
  %81 = bitcast %class.anon.176* %36 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %81) #12
  %82 = getelementptr inbounds %class.anon.176, %class.anon.176* %36, i64 0, i32 0
  store %"class.jxl::Plane"* %1, %"class.jxl::Plane"** %82, align 8
  %83 = getelementptr inbounds %class.anon.176, %class.anon.176* %36, i64 0, i32 1
  store %"class.jxl::Plane"* %2, %"class.jxl::Plane"** %83, align 8
  %84 = getelementptr inbounds %class.anon.176, %class.anon.176* %36, i64 0, i32 2
  store i64* %33, i64** %84, align 8
  %85 = bitcast double* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %85) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %27, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), double* nonnull %27) #12
  %86 = icmp eq %"class.jxl::ThreadPool"* %3, null
  br i1 %86, label %87, label %98

87:                                               ; preds = %78
  %88 = bitcast %"class.jxl::ThreadPool"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %88) #12
  %89 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %28, i64 0, i32 0
  %90 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %28, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %89, align 8
  %91 = bitcast i8** %90 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %28, %"class.jxl::ThreadPool"** %91, align 8
  %92 = icmp eq i32 %80, 0
  br i1 %92, label %109, label %93

93:                                               ; preds = %87
  %94 = bitcast %"class.jxl::ThreadPool::RunCallState"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %94) #12
  %95 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %25, i64 0, i32 0
  %96 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %25, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %95, align 8
  store %class.anon.176* %36, %class.anon.176** %96, align 8
  %97 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %88, i8* nonnull %94, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE_E12CallDataFuncEPvjm, i32 0, i32 %80) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %94) #12
  br label %109

98:                                               ; preds = %78
  %99 = icmp eq i32 %80, 0
  br i1 %99, label %111, label %100

100:                                              ; preds = %98
  %101 = bitcast %"class.jxl::ThreadPool::RunCallState"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %101) #12
  %102 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %26, i64 0, i32 0
  %103 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState", %"class.jxl::ThreadPool::RunCallState"* %26, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %102, align 8
  store %class.anon.176* %36, %class.anon.176** %103, align 8
  %104 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 0
  %105 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %104, align 8
  %106 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 1
  %107 = load i8*, i8** %106, align 8
  %108 = call i32 %105(i8* %107, i8* nonnull %101, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE_E12CallDataFuncEPvjm, i32 0, i32 %80) #12
  br label %109

109:                                              ; preds = %87, %93, %100
  %110 = phi i8* [ %101, %100 ], [ %88, %93 ], [ %88, %87 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %110) #12
  br label %111

111:                                              ; preds = %109, %98
  %112 = load double, double* %27, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), double %112) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %85) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %81) #12
  br label %453

113:                                              ; preds = %4
  %114 = bitcast %"class.jxl::Plane"* %37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %114) #12
  %115 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %115, i64 %52, i64 %56, i64 4) #12
  %116 = bitcast %"class.jxl::Plane"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %116, i8* nonnull align 8 %114, i64 24, i1 false) #12
  %117 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 5
  %118 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 0, i32 0, i32 5
  %119 = getelementptr inbounds %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.118"* %118, i64 0, i32 0, i32 0, i32 0
  %120 = bitcast %"class.std::__1::unique_ptr.118"* %118 to i64*
  %121 = load i64, i64* %120, align 8
  store i8* null, i8** %119, align 8
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.118"* %117, i64 0, i32 0, i32 0, i32 0
  %123 = load i8*, i8** %122, align 8
  %124 = bitcast %"class.std::__1::unique_ptr.118"* %117 to i64*
  store i64 %121, i64* %124, align 8
  %125 = icmp eq i8* %123, null
  br i1 %125, label %126, label %128

126:                                              ; preds = %113
  %127 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %127, align 8
  br label %134

128:                                              ; preds = %113
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %123) #12
  %129 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %130 = load i8*, i8** %129, align 8
  %131 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %37, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %131, align 8
  %132 = icmp eq i8* %130, null
  br i1 %132, label %134, label %133

133:                                              ; preds = %128
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %130) #12
  br label %134

134:                                              ; preds = %126, %128, %133
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %114) #12
  %135 = load i64, i64* %34, align 8
  %136 = trunc i64 %135 to i32
  %137 = bitcast %class.anon.177* %38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %137) #12
  %138 = getelementptr inbounds %class.anon.177, %class.anon.177* %38, i64 0, i32 0
  store %"class.jxl::Plane"* %1, %"class.jxl::Plane"** %138, align 8
  %139 = getelementptr inbounds %class.anon.177, %class.anon.177* %38, i64 0, i32 1
  store %"class.jxl::Plane"* %2, %"class.jxl::Plane"** %139, align 8
  %140 = getelementptr inbounds %class.anon.177, %class.anon.177* %38, i64 0, i32 2
  store i64* %34, i64** %140, align 8
  %141 = getelementptr inbounds %class.anon.177, %class.anon.177* %38, i64 0, i32 3
  store i64* %33, i64** %141, align 8
  %142 = bitcast double* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %142) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %23, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), double* nonnull %23) #12
  %143 = icmp eq %"class.jxl::ThreadPool"* %3, null
  br i1 %143, label %144, label %155

144:                                              ; preds = %134
  %145 = bitcast %"class.jxl::ThreadPool"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %145) #12
  %146 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %24, i64 0, i32 0
  %147 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %24, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %146, align 8
  %148 = bitcast i8** %147 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %24, %"class.jxl::ThreadPool"** %148, align 8
  %149 = icmp eq i32 %136, 0
  br i1 %149, label %166, label %150

150:                                              ; preds = %144
  %151 = bitcast %"class.jxl::ThreadPool::RunCallState.183"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %151) #12
  %152 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.183", %"class.jxl::ThreadPool::RunCallState.183"* %21, i64 0, i32 0
  %153 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.183", %"class.jxl::ThreadPool::RunCallState.183"* %21, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %152, align 8
  store %class.anon.177* %38, %class.anon.177** %153, align 8
  %154 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %145, i8* nonnull %151, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE0_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE0_E12CallDataFuncEPvjm, i32 0, i32 %136) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %151) #12
  br label %166

155:                                              ; preds = %134
  %156 = icmp eq i32 %136, 0
  br i1 %156, label %168, label %157

157:                                              ; preds = %155
  %158 = bitcast %"class.jxl::ThreadPool::RunCallState.183"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %158) #12
  %159 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.183", %"class.jxl::ThreadPool::RunCallState.183"* %22, i64 0, i32 0
  %160 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.183", %"class.jxl::ThreadPool::RunCallState.183"* %22, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %159, align 8
  store %class.anon.177* %38, %class.anon.177** %160, align 8
  %161 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 0
  %162 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %161, align 8
  %163 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 1
  %164 = load i8*, i8** %163, align 8
  %165 = call i32 %162(i8* %164, i8* nonnull %158, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE0_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE0_E12CallDataFuncEPvjm, i32 0, i32 %136) #12
  br label %166

166:                                              ; preds = %144, %150, %157
  %167 = phi i8* [ %158, %157 ], [ %145, %150 ], [ %145, %144 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %167) #12
  br label %168

168:                                              ; preds = %166, %155
  %169 = load double, double* %23, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), double %169) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %142) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %137) #12
  br label %453

170:                                              ; preds = %4
  %171 = bitcast %"class.jxl::Plane"* %39 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %171) #12
  %172 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %39, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %172, i64 %52, i64 %56, i64 4) #12
  %173 = bitcast %"class.jxl::Plane"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %173, i8* nonnull align 8 %171, i64 24, i1 false) #12
  %174 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 5
  %175 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %39, i64 0, i32 0, i32 5
  %176 = getelementptr inbounds %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.118"* %175, i64 0, i32 0, i32 0, i32 0
  %177 = bitcast %"class.std::__1::unique_ptr.118"* %175 to i64*
  %178 = load i64, i64* %177, align 8
  store i8* null, i8** %176, align 8
  %179 = getelementptr inbounds %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.118"* %174, i64 0, i32 0, i32 0, i32 0
  %180 = load i8*, i8** %179, align 8
  %181 = bitcast %"class.std::__1::unique_ptr.118"* %174 to i64*
  store i64 %178, i64* %181, align 8
  %182 = icmp eq i8* %180, null
  br i1 %182, label %183, label %185

183:                                              ; preds = %170
  %184 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %39, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %184, align 8
  br label %191

185:                                              ; preds = %170
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %180) #12
  %186 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %39, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %187 = load i8*, i8** %186, align 8
  %188 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %39, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %188, align 8
  %189 = icmp eq i8* %187, null
  br i1 %189, label %191, label %190

190:                                              ; preds = %185
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %187) #12
  br label %191

191:                                              ; preds = %183, %185, %190
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %171) #12
  %192 = load i64, i64* %34, align 8
  %193 = trunc i64 %192 to i32
  %194 = bitcast %class.anon.178* %40 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %194) #12
  %195 = getelementptr inbounds %class.anon.178, %class.anon.178* %40, i64 0, i32 0
  store %"class.jxl::Plane"* %1, %"class.jxl::Plane"** %195, align 8
  %196 = getelementptr inbounds %class.anon.178, %class.anon.178* %40, i64 0, i32 1
  store %"class.jxl::Plane"* %2, %"class.jxl::Plane"** %196, align 8
  %197 = getelementptr inbounds %class.anon.178, %class.anon.178* %40, i64 0, i32 2
  store i64* %34, i64** %197, align 8
  %198 = getelementptr inbounds %class.anon.178, %class.anon.178* %40, i64 0, i32 3
  store i64* %33, i64** %198, align 8
  %199 = bitcast double* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %199) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %19, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), double* nonnull %19) #12
  %200 = icmp eq %"class.jxl::ThreadPool"* %3, null
  br i1 %200, label %201, label %212

201:                                              ; preds = %191
  %202 = bitcast %"class.jxl::ThreadPool"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %202) #12
  %203 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %20, i64 0, i32 0
  %204 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %20, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %203, align 8
  %205 = bitcast i8** %204 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %20, %"class.jxl::ThreadPool"** %205, align 8
  %206 = icmp eq i32 %193, 0
  br i1 %206, label %223, label %207

207:                                              ; preds = %201
  %208 = bitcast %"class.jxl::ThreadPool::RunCallState.184"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %208) #12
  %209 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.184", %"class.jxl::ThreadPool::RunCallState.184"* %17, i64 0, i32 0
  %210 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.184", %"class.jxl::ThreadPool::RunCallState.184"* %17, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %209, align 8
  store %class.anon.178* %40, %class.anon.178** %210, align 8
  %211 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %202, i8* nonnull %208, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE1_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE1_E12CallDataFuncEPvjm, i32 0, i32 %193) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %208) #12
  br label %223

212:                                              ; preds = %191
  %213 = icmp eq i32 %193, 0
  br i1 %213, label %225, label %214

214:                                              ; preds = %212
  %215 = bitcast %"class.jxl::ThreadPool::RunCallState.184"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %215) #12
  %216 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.184", %"class.jxl::ThreadPool::RunCallState.184"* %18, i64 0, i32 0
  %217 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.184", %"class.jxl::ThreadPool::RunCallState.184"* %18, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %216, align 8
  store %class.anon.178* %40, %class.anon.178** %217, align 8
  %218 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 0
  %219 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %218, align 8
  %220 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 1
  %221 = load i8*, i8** %220, align 8
  %222 = call i32 %219(i8* %221, i8* nonnull %215, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE1_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE1_E12CallDataFuncEPvjm, i32 0, i32 %193) #12
  br label %223

223:                                              ; preds = %201, %207, %214
  %224 = phi i8* [ %215, %214 ], [ %202, %207 ], [ %202, %201 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %224) #12
  br label %225

225:                                              ; preds = %223, %212
  %226 = load double, double* %19, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), double %226) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %199) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %194) #12
  br label %453

227:                                              ; preds = %4
  %228 = bitcast %"class.jxl::Plane"* %41 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %228) #12
  %229 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %41, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %229, i64 %56, i64 %52, i64 4) #12
  %230 = bitcast %"class.jxl::Plane"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %230, i8* nonnull align 8 %228, i64 24, i1 false) #12
  %231 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 5
  %232 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %41, i64 0, i32 0, i32 5
  %233 = getelementptr inbounds %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.118"* %232, i64 0, i32 0, i32 0, i32 0
  %234 = bitcast %"class.std::__1::unique_ptr.118"* %232 to i64*
  %235 = load i64, i64* %234, align 8
  store i8* null, i8** %233, align 8
  %236 = getelementptr inbounds %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.118"* %231, i64 0, i32 0, i32 0, i32 0
  %237 = load i8*, i8** %236, align 8
  %238 = bitcast %"class.std::__1::unique_ptr.118"* %231 to i64*
  store i64 %235, i64* %238, align 8
  %239 = icmp eq i8* %237, null
  br i1 %239, label %240, label %242

240:                                              ; preds = %227
  %241 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %41, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %241, align 8
  br label %248

242:                                              ; preds = %227
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %237) #12
  %243 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %41, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %244 = load i8*, i8** %243, align 8
  %245 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %41, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %245, align 8
  %246 = icmp eq i8* %244, null
  br i1 %246, label %248, label %247

247:                                              ; preds = %242
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %244) #12
  br label %248

248:                                              ; preds = %240, %242, %247
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %228) #12
  %249 = load i64, i64* %34, align 8
  %250 = trunc i64 %249 to i32
  %251 = bitcast %class.anon.179* %42 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %251) #12
  %252 = getelementptr inbounds %class.anon.179, %class.anon.179* %42, i64 0, i32 0
  store %"class.jxl::Plane"* %1, %"class.jxl::Plane"** %252, align 8
  %253 = getelementptr inbounds %class.anon.179, %class.anon.179* %42, i64 0, i32 1
  store i64* %33, i64** %253, align 8
  %254 = getelementptr inbounds %class.anon.179, %class.anon.179* %42, i64 0, i32 2
  store %"class.jxl::Plane"* %2, %"class.jxl::Plane"** %254, align 8
  %255 = bitcast double* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %255) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %15, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), double* nonnull %15) #12
  %256 = icmp eq %"class.jxl::ThreadPool"* %3, null
  br i1 %256, label %257, label %268

257:                                              ; preds = %248
  %258 = bitcast %"class.jxl::ThreadPool"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %258) #12
  %259 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %16, i64 0, i32 0
  %260 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %16, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %259, align 8
  %261 = bitcast i8** %260 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %16, %"class.jxl::ThreadPool"** %261, align 8
  %262 = icmp eq i32 %250, 0
  br i1 %262, label %279, label %263

263:                                              ; preds = %257
  %264 = bitcast %"class.jxl::ThreadPool::RunCallState.185"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %264) #12
  %265 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.185", %"class.jxl::ThreadPool::RunCallState.185"* %13, i64 0, i32 0
  %266 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.185", %"class.jxl::ThreadPool::RunCallState.185"* %13, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %265, align 8
  store %class.anon.179* %42, %class.anon.179** %266, align 8
  %267 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %258, i8* nonnull %264, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE2_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE2_E12CallDataFuncEPvjm, i32 0, i32 %250) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %264) #12
  br label %279

268:                                              ; preds = %248
  %269 = icmp eq i32 %250, 0
  br i1 %269, label %281, label %270

270:                                              ; preds = %268
  %271 = bitcast %"class.jxl::ThreadPool::RunCallState.185"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %271) #12
  %272 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.185", %"class.jxl::ThreadPool::RunCallState.185"* %14, i64 0, i32 0
  %273 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.185", %"class.jxl::ThreadPool::RunCallState.185"* %14, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %272, align 8
  store %class.anon.179* %42, %class.anon.179** %273, align 8
  %274 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 0
  %275 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %274, align 8
  %276 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 1
  %277 = load i8*, i8** %276, align 8
  %278 = call i32 %275(i8* %277, i8* nonnull %271, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE2_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE2_E12CallDataFuncEPvjm, i32 0, i32 %250) #12
  br label %279

279:                                              ; preds = %257, %263, %270
  %280 = phi i8* [ %271, %270 ], [ %258, %263 ], [ %258, %257 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %280) #12
  br label %281

281:                                              ; preds = %279, %268
  %282 = load double, double* %15, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), double %282) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %255) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %251) #12
  br label %453

283:                                              ; preds = %4
  %284 = bitcast %"class.jxl::Plane"* %43 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %284) #12
  %285 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %43, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %285, i64 %56, i64 %52, i64 4) #12
  %286 = bitcast %"class.jxl::Plane"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %286, i8* nonnull align 8 %284, i64 24, i1 false) #12
  %287 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 5
  %288 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %43, i64 0, i32 0, i32 5
  %289 = getelementptr inbounds %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.118"* %288, i64 0, i32 0, i32 0, i32 0
  %290 = bitcast %"class.std::__1::unique_ptr.118"* %288 to i64*
  %291 = load i64, i64* %290, align 8
  store i8* null, i8** %289, align 8
  %292 = getelementptr inbounds %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.118"* %287, i64 0, i32 0, i32 0, i32 0
  %293 = load i8*, i8** %292, align 8
  %294 = bitcast %"class.std::__1::unique_ptr.118"* %287 to i64*
  store i64 %291, i64* %294, align 8
  %295 = icmp eq i8* %293, null
  br i1 %295, label %296, label %298

296:                                              ; preds = %283
  %297 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %43, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %297, align 8
  br label %304

298:                                              ; preds = %283
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %293) #12
  %299 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %43, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %300 = load i8*, i8** %299, align 8
  %301 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %43, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %301, align 8
  %302 = icmp eq i8* %300, null
  br i1 %302, label %304, label %303

303:                                              ; preds = %298
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %300) #12
  br label %304

304:                                              ; preds = %296, %298, %303
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %284) #12
  %305 = load i64, i64* %34, align 8
  %306 = trunc i64 %305 to i32
  %307 = bitcast %class.anon.180* %44 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %307) #12
  %308 = getelementptr inbounds %class.anon.180, %class.anon.180* %44, i64 0, i32 0
  store %"class.jxl::Plane"* %1, %"class.jxl::Plane"** %308, align 8
  %309 = getelementptr inbounds %class.anon.180, %class.anon.180* %44, i64 0, i32 1
  store i64* %33, i64** %309, align 8
  %310 = getelementptr inbounds %class.anon.180, %class.anon.180* %44, i64 0, i32 2
  store %"class.jxl::Plane"* %2, %"class.jxl::Plane"** %310, align 8
  %311 = getelementptr inbounds %class.anon.180, %class.anon.180* %44, i64 0, i32 3
  store i64* %34, i64** %311, align 8
  %312 = bitcast double* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %312) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %11, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), double* nonnull %11) #12
  %313 = icmp eq %"class.jxl::ThreadPool"* %3, null
  br i1 %313, label %314, label %325

314:                                              ; preds = %304
  %315 = bitcast %"class.jxl::ThreadPool"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %315) #12
  %316 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %12, i64 0, i32 0
  %317 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %12, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %316, align 8
  %318 = bitcast i8** %317 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %12, %"class.jxl::ThreadPool"** %318, align 8
  %319 = icmp eq i32 %306, 0
  br i1 %319, label %336, label %320

320:                                              ; preds = %314
  %321 = bitcast %"class.jxl::ThreadPool::RunCallState.186"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %321) #12
  %322 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.186", %"class.jxl::ThreadPool::RunCallState.186"* %9, i64 0, i32 0
  %323 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.186", %"class.jxl::ThreadPool::RunCallState.186"* %9, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %322, align 8
  store %class.anon.180* %44, %class.anon.180** %323, align 8
  %324 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %315, i8* nonnull %321, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE3_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE3_E12CallDataFuncEPvjm, i32 0, i32 %306) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %321) #12
  br label %336

325:                                              ; preds = %304
  %326 = icmp eq i32 %306, 0
  br i1 %326, label %338, label %327

327:                                              ; preds = %325
  %328 = bitcast %"class.jxl::ThreadPool::RunCallState.186"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %328) #12
  %329 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.186", %"class.jxl::ThreadPool::RunCallState.186"* %10, i64 0, i32 0
  %330 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.186", %"class.jxl::ThreadPool::RunCallState.186"* %10, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %329, align 8
  store %class.anon.180* %44, %class.anon.180** %330, align 8
  %331 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 0
  %332 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %331, align 8
  %333 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 1
  %334 = load i8*, i8** %333, align 8
  %335 = call i32 %332(i8* %334, i8* nonnull %328, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE3_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE3_E12CallDataFuncEPvjm, i32 0, i32 %306) #12
  br label %336

336:                                              ; preds = %314, %320, %327
  %337 = phi i8* [ %328, %327 ], [ %315, %320 ], [ %315, %314 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %337) #12
  br label %338

338:                                              ; preds = %336, %325
  %339 = load double, double* %11, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), double %339) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %312) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %307) #12
  br label %453

340:                                              ; preds = %4
  %341 = bitcast %"class.jxl::Plane"* %45 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %341) #12
  %342 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %45, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %342, i64 %56, i64 %52, i64 4) #12
  %343 = bitcast %"class.jxl::Plane"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %343, i8* nonnull align 8 %341, i64 24, i1 false) #12
  %344 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 5
  %345 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %45, i64 0, i32 0, i32 5
  %346 = getelementptr inbounds %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.118"* %345, i64 0, i32 0, i32 0, i32 0
  %347 = bitcast %"class.std::__1::unique_ptr.118"* %345 to i64*
  %348 = load i64, i64* %347, align 8
  store i8* null, i8** %346, align 8
  %349 = getelementptr inbounds %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.118"* %344, i64 0, i32 0, i32 0, i32 0
  %350 = load i8*, i8** %349, align 8
  %351 = bitcast %"class.std::__1::unique_ptr.118"* %344 to i64*
  store i64 %348, i64* %351, align 8
  %352 = icmp eq i8* %350, null
  br i1 %352, label %353, label %355

353:                                              ; preds = %340
  %354 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %45, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %354, align 8
  br label %361

355:                                              ; preds = %340
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %350) #12
  %356 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %45, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %357 = load i8*, i8** %356, align 8
  %358 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %45, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %358, align 8
  %359 = icmp eq i8* %357, null
  br i1 %359, label %361, label %360

360:                                              ; preds = %355
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %357) #12
  br label %361

361:                                              ; preds = %353, %355, %360
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %341) #12
  %362 = load i64, i64* %34, align 8
  %363 = trunc i64 %362 to i32
  %364 = bitcast %class.anon.181* %46 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %364) #12
  %365 = getelementptr inbounds %class.anon.181, %class.anon.181* %46, i64 0, i32 0
  store %"class.jxl::Plane"* %1, %"class.jxl::Plane"** %365, align 8
  %366 = getelementptr inbounds %class.anon.181, %class.anon.181* %46, i64 0, i32 1
  store i64* %33, i64** %366, align 8
  %367 = getelementptr inbounds %class.anon.181, %class.anon.181* %46, i64 0, i32 2
  store %"class.jxl::Plane"* %2, %"class.jxl::Plane"** %367, align 8
  %368 = getelementptr inbounds %class.anon.181, %class.anon.181* %46, i64 0, i32 3
  store i64* %34, i64** %368, align 8
  %369 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %369) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %7, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), double* nonnull %7) #12
  %370 = icmp eq %"class.jxl::ThreadPool"* %3, null
  br i1 %370, label %371, label %382

371:                                              ; preds = %361
  %372 = bitcast %"class.jxl::ThreadPool"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %372) #12
  %373 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 0
  %374 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %8, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %373, align 8
  %375 = bitcast i8** %374 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %8, %"class.jxl::ThreadPool"** %375, align 8
  %376 = icmp eq i32 %363, 0
  br i1 %376, label %393, label %377

377:                                              ; preds = %371
  %378 = bitcast %"class.jxl::ThreadPool::RunCallState.187"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %378) #12
  %379 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.187", %"class.jxl::ThreadPool::RunCallState.187"* %5, i64 0, i32 0
  %380 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.187", %"class.jxl::ThreadPool::RunCallState.187"* %5, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %379, align 8
  store %class.anon.181* %46, %class.anon.181** %380, align 8
  %381 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %372, i8* nonnull %378, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE4_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE4_E12CallDataFuncEPvjm, i32 0, i32 %363) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %378) #12
  br label %393

382:                                              ; preds = %361
  %383 = icmp eq i32 %363, 0
  br i1 %383, label %395, label %384

384:                                              ; preds = %382
  %385 = bitcast %"class.jxl::ThreadPool::RunCallState.187"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %385) #12
  %386 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.187", %"class.jxl::ThreadPool::RunCallState.187"* %6, i64 0, i32 0
  %387 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.187", %"class.jxl::ThreadPool::RunCallState.187"* %6, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %386, align 8
  store %class.anon.181* %46, %class.anon.181** %387, align 8
  %388 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 0
  %389 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %388, align 8
  %390 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 1
  %391 = load i8*, i8** %390, align 8
  %392 = call i32 %389(i8* %391, i8* nonnull %385, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE4_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE4_E12CallDataFuncEPvjm, i32 0, i32 %363) #12
  br label %393

393:                                              ; preds = %371, %377, %384
  %394 = phi i8* [ %385, %384 ], [ %372, %377 ], [ %372, %371 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %394) #12
  br label %395

395:                                              ; preds = %393, %382
  %396 = load double, double* %7, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), double %396) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %369) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %364) #12
  br label %453

397:                                              ; preds = %4
  %398 = bitcast %"class.jxl::Plane"* %47 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %398) #12
  %399 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %47, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %399, i64 %56, i64 %52, i64 4) #12
  %400 = bitcast %"class.jxl::Plane"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %400, i8* nonnull align 8 %398, i64 24, i1 false) #12
  %401 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %2, i64 0, i32 0, i32 5
  %402 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %47, i64 0, i32 0, i32 5
  %403 = getelementptr inbounds %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.118"* %402, i64 0, i32 0, i32 0, i32 0
  %404 = bitcast %"class.std::__1::unique_ptr.118"* %402 to i64*
  %405 = load i64, i64* %404, align 8
  store i8* null, i8** %403, align 8
  %406 = getelementptr inbounds %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.118"* %401, i64 0, i32 0, i32 0, i32 0
  %407 = load i8*, i8** %406, align 8
  %408 = bitcast %"class.std::__1::unique_ptr.118"* %401 to i64*
  store i64 %405, i64* %408, align 8
  %409 = icmp eq i8* %407, null
  br i1 %409, label %410, label %412

410:                                              ; preds = %397
  %411 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %47, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %411, align 8
  br label %418

412:                                              ; preds = %397
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %407) #12
  %413 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %47, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %414 = load i8*, i8** %413, align 8
  %415 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %47, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  store i8* null, i8** %415, align 8
  %416 = icmp eq i8* %414, null
  br i1 %416, label %418, label %417

417:                                              ; preds = %412
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %414) #12
  br label %418

418:                                              ; preds = %410, %412, %417
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %398) #12
  %419 = load i64, i64* %34, align 8
  %420 = trunc i64 %419 to i32
  %421 = bitcast %class.anon.182* %48 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %421) #12
  %422 = getelementptr inbounds %class.anon.182, %class.anon.182* %48, i64 0, i32 0
  store %"class.jxl::Plane"* %1, %"class.jxl::Plane"** %422, align 8
  %423 = getelementptr inbounds %class.anon.182, %class.anon.182* %48, i64 0, i32 1
  store i64* %33, i64** %423, align 8
  %424 = getelementptr inbounds %class.anon.182, %class.anon.182* %48, i64 0, i32 2
  store %"class.jxl::Plane"* %2, %"class.jxl::Plane"** %424, align 8
  %425 = bitcast double* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %425) #12
  store double 0xFFFFFFFFFFFFFFFF, double* %31, align 8
  call void @_ZN3jxl13TraceRunBeginEPKcPd(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), double* nonnull %31) #12
  %426 = icmp eq %"class.jxl::ThreadPool"* %3, null
  br i1 %426, label %427, label %438

427:                                              ; preds = %418
  %428 = bitcast %"class.jxl::ThreadPool"* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %428) #12
  %429 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %32, i64 0, i32 0
  %430 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %32, i64 0, i32 1
  store i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)* @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %429, align 8
  %431 = bitcast i8** %430 to %"class.jxl::ThreadPool"**
  store %"class.jxl::ThreadPool"* %32, %"class.jxl::ThreadPool"** %431, align 8
  %432 = icmp eq i32 %420, 0
  br i1 %432, label %449, label %433

433:                                              ; preds = %427
  %434 = bitcast %"class.jxl::ThreadPool::RunCallState.188"* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %434) #12
  %435 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.188", %"class.jxl::ThreadPool::RunCallState.188"* %29, i64 0, i32 0
  %436 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.188", %"class.jxl::ThreadPool::RunCallState.188"* %29, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %435, align 8
  store %class.anon.182* %48, %class.anon.182** %436, align 8
  %437 = call i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8* nonnull %428, i8* nonnull %434, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE5_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE5_E12CallDataFuncEPvjm, i32 0, i32 %420) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %434) #12
  br label %449

438:                                              ; preds = %418
  %439 = icmp eq i32 %420, 0
  br i1 %439, label %451, label %440

440:                                              ; preds = %438
  %441 = bitcast %"class.jxl::ThreadPool::RunCallState.188"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %441) #12
  %442 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.188", %"class.jxl::ThreadPool::RunCallState.188"* %30, i64 0, i32 0
  %443 = getelementptr inbounds %"class.jxl::ThreadPool::RunCallState.188", %"class.jxl::ThreadPool::RunCallState.188"* %30, i64 0, i32 1
  store i32 (i64)* @_ZN3jxl10ThreadPool14ReturnTrueInitEm, i32 (i64)** %442, align 8
  store %class.anon.182* %48, %class.anon.182** %443, align 8
  %444 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 0
  %445 = load i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)*, i32 (i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32)** %444, align 8
  %446 = getelementptr inbounds %"class.jxl::ThreadPool", %"class.jxl::ThreadPool"* %3, i64 0, i32 1
  %447 = load i8*, i8** %446, align 8
  %448 = call i32 %445(i8* %447, i8* nonnull %441, i32 (i8*, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE5_E12CallInitFuncEPvm, void (i8*, i32, i64)* nonnull @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE5_E12CallDataFuncEPvjm, i32 0, i32 %420) #12
  br label %449

449:                                              ; preds = %427, %433, %440
  %450 = phi i8* [ %441, %440 ], [ %428, %433 ], [ %428, %427 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %450) #12
  br label %451

451:                                              ; preds = %449, %438
  %452 = load double, double* %31, align 8
  call void @_ZN3jxl11TraceRunEndEPKcd(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), double %452) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %425) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %421) #12
  br label %453

453:                                              ; preds = %4, %168, %281, %395, %451, %338, %225, %111
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %53) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #12
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx.cvt.ps2dq.256(<8 x float>) #8

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.vcvtps2ph.256(<8 x float>, i32 immarg) #8

; Function Attrs: nounwind readnone
declare <16 x i32> @llvm.x86.avx512.mask.cvtps2dq.512(<16 x float>, <16 x i32>, i16, i32 immarg) #8

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx512.mask.vcvtps2ph.512(<16 x float>, i32 immarg, <16 x i16>, i16) #8

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #9

declare void @_ZN3jxl12CacheAligned4FreeEPKv(i8*) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #10

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.min.ps(<4 x float>, <4 x float>) #8

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.x86.sse.max.ps(<4 x float>, <4 x float>) #8

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvtps2dq(<4 x float>) #8

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32>, <4 x i32>) #8

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.min.ps.256(<8 x float>, <8 x float>) #8

; Function Attrs: nounwind readnone
declare <8 x float> @llvm.x86.avx.max.ps.256(<8 x float>, <8 x float>) #8

; Function Attrs: nounwind readnone
declare <16 x float> @llvm.x86.avx512.min.ps.512(<16 x float>, <16 x float>, i32 immarg) #8

; Function Attrs: nounwind readnone
declare <16 x float> @llvm.x86.avx512.max.ps.512(<16 x float>, <16 x float>, i32 immarg) #8

declare void @_ZN3jxl13TraceRunBeginEPKcPd(i8*, double*) local_unnamed_addr #7

declare void @_ZN3jxl11TraceRunEndEPKcd(i8*, double) local_unnamed_addr #7

declare i32 @_ZN3jxl10ThreadPool22SequentialRunnerStaticEPvS1_PFiS1_mEPFvS1_jmEjj(i8*, i8*, i32 (i8*, i64)*, void (i8*, i32, i64)*, i32, i32) #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN3jxl10ThreadPool14ReturnTrueInitEm(i64) #6 comdat align 2 {
  ret i32 0
}

declare zeroext i1 @_ZN3jxl5DebugEPKcz(i8*, ...) local_unnamed_addr #7

; Function Attrs: noreturn
declare zeroext i1 @_ZN3jxl5AbortEv() local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE_E12CallInitFuncEPvm(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #12
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE_E12CallDataFuncEPvjm(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.176**
  %6 = load %class.anon.176*, %class.anon.176** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon.176, %class.anon.176* %6, i64 0, i32 0
  %9 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %8, align 8
  %10 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 4
  %13 = load i64, i64* %12, align 8
  %14 = mul i64 %13, %7
  %15 = getelementptr inbounds i8, i8* %11, i64 %14
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #12
  %19 = bitcast i8* %15 to float*
  %20 = getelementptr inbounds %class.anon.176, %class.anon.176* %6, i64 0, i32 1
  %21 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %20, align 8
  %22 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %21, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %21, i64 0, i32 0, i32 4
  %25 = load i64, i64* %24, align 8
  %26 = mul i64 %25, %7
  %27 = getelementptr inbounds i8, i8* %23, i64 %26
  %28 = ptrtoint i8* %27 to i64
  %29 = and i64 %28, 63
  %30 = icmp eq i64 %29, 0
  tail call void @llvm.assume(i1 %30) #12
  %31 = bitcast i8* %27 to float*
  %32 = getelementptr inbounds %class.anon.176, %class.anon.176* %6, i64 0, i32 2
  %33 = load i64*, i64** %32, align 8
  %34 = load i64, i64* %33, align 8
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %50, label %36

36:                                               ; preds = %3, %36
  %37 = phi i64 [ %48, %36 ], [ %34, %3 ]
  %38 = phi i64 [ %46, %36 ], [ 0, %3 ]
  %39 = getelementptr inbounds float, float* %19, i64 %38
  %40 = bitcast float* %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = xor i64 %38, -1
  %43 = add i64 %37, %42
  %44 = getelementptr inbounds float, float* %31, i64 %43
  %45 = bitcast float* %44 to i32*
  store i32 %41, i32* %45, align 4
  %46 = add nuw i64 %38, 1
  %47 = load i64*, i64** %32, align 8
  %48 = load i64, i64* %47, align 8
  %49 = icmp ugt i64 %48, %46
  br i1 %49, label %36, label %50

50:                                               ; preds = %36, %3
  ret void
}

; Function Attrs: nounwind
declare void @llvm.assume(i1) #12

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE0_E12CallInitFuncEPvm(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #12
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE0_E12CallDataFuncEPvjm(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.177**
  %6 = load %class.anon.177*, %class.anon.177** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon.177, %class.anon.177* %6, i64 0, i32 0
  %9 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %8, align 8
  %10 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 4
  %13 = load i64, i64* %12, align 8
  %14 = mul i64 %13, %7
  %15 = getelementptr inbounds i8, i8* %11, i64 %14
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #12
  %19 = bitcast i8* %15 to float*
  %20 = getelementptr inbounds %class.anon.177, %class.anon.177* %6, i64 0, i32 1
  %21 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %20, align 8
  %22 = getelementptr inbounds %class.anon.177, %class.anon.177* %6, i64 0, i32 2
  %23 = load i64*, i64** %22, align 8
  %24 = load i64, i64* %23, align 8
  %25 = xor i64 %7, -1
  %26 = add i64 %24, %25
  %27 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %21, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %21, i64 0, i32 0, i32 4
  %30 = load i64, i64* %29, align 8
  %31 = mul i64 %30, %26
  %32 = getelementptr inbounds i8, i8* %28, i64 %31
  %33 = ptrtoint i8* %32 to i64
  %34 = and i64 %33, 63
  %35 = icmp eq i64 %34, 0
  tail call void @llvm.assume(i1 %35) #12
  %36 = bitcast i8* %32 to float*
  %37 = getelementptr inbounds %class.anon.177, %class.anon.177* %6, i64 0, i32 3
  %38 = load i64*, i64** %37, align 8
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %55, label %41

41:                                               ; preds = %3, %41
  %42 = phi i64 [ %53, %41 ], [ %39, %3 ]
  %43 = phi i64 [ %51, %41 ], [ 0, %3 ]
  %44 = getelementptr inbounds float, float* %19, i64 %43
  %45 = bitcast float* %44 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = xor i64 %43, -1
  %48 = add i64 %42, %47
  %49 = getelementptr inbounds float, float* %36, i64 %48
  %50 = bitcast float* %49 to i32*
  store i32 %46, i32* %50, align 4
  %51 = add nuw i64 %43, 1
  %52 = load i64*, i64** %37, align 8
  %53 = load i64, i64* %52, align 8
  %54 = icmp ugt i64 %53, %51
  br i1 %54, label %41, label %55

55:                                               ; preds = %41, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE1_E12CallInitFuncEPvm(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #12
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE1_E12CallDataFuncEPvjm(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.178**
  %6 = load %class.anon.178*, %class.anon.178** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon.178, %class.anon.178* %6, i64 0, i32 0
  %9 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %8, align 8
  %10 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 4
  %13 = load i64, i64* %12, align 8
  %14 = mul i64 %13, %7
  %15 = getelementptr inbounds i8, i8* %11, i64 %14
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #12
  %19 = bitcast i8* %15 to float*
  %20 = getelementptr inbounds %class.anon.178, %class.anon.178* %6, i64 0, i32 1
  %21 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %20, align 8
  %22 = getelementptr inbounds %class.anon.178, %class.anon.178* %6, i64 0, i32 2
  %23 = load i64*, i64** %22, align 8
  %24 = load i64, i64* %23, align 8
  %25 = xor i64 %7, -1
  %26 = add i64 %24, %25
  %27 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %21, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %21, i64 0, i32 0, i32 4
  %30 = load i64, i64* %29, align 8
  %31 = mul i64 %30, %26
  %32 = getelementptr inbounds i8, i8* %28, i64 %31
  %33 = ptrtoint i8* %32 to i64
  %34 = and i64 %33, 63
  %35 = icmp eq i64 %34, 0
  tail call void @llvm.assume(i1 %35) #12
  %36 = bitcast i8* %32 to float*
  %37 = getelementptr inbounds %class.anon.178, %class.anon.178* %6, i64 0, i32 3
  %38 = load i64*, i64** %37, align 8
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %52, label %41

41:                                               ; preds = %3, %41
  %42 = phi i64 [ %48, %41 ], [ 0, %3 ]
  %43 = getelementptr inbounds float, float* %19, i64 %42
  %44 = bitcast float* %43 to i32*
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds float, float* %36, i64 %42
  %47 = bitcast float* %46 to i32*
  store i32 %45, i32* %47, align 4
  %48 = add nuw i64 %42, 1
  %49 = load i64*, i64** %37, align 8
  %50 = load i64, i64* %49, align 8
  %51 = icmp ult i64 %48, %50
  br i1 %51, label %41, label %52

52:                                               ; preds = %41, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE2_E12CallInitFuncEPvm(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #12
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE2_E12CallDataFuncEPvjm(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.179**
  %6 = load %class.anon.179*, %class.anon.179** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon.179, %class.anon.179* %6, i64 0, i32 0
  %9 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %8, align 8
  %10 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 4
  %13 = load i64, i64* %12, align 8
  %14 = mul i64 %13, %7
  %15 = getelementptr inbounds i8, i8* %11, i64 %14
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #12
  %19 = bitcast i8* %15 to float*
  %20 = getelementptr inbounds %class.anon.179, %class.anon.179* %6, i64 0, i32 1
  %21 = load i64*, i64** %20, align 8
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %48, label %24

24:                                               ; preds = %3
  %25 = getelementptr inbounds %class.anon.179, %class.anon.179* %6, i64 0, i32 2
  br label %26

26:                                               ; preds = %26, %24
  %27 = phi i64 [ 0, %24 ], [ %44, %26 ]
  %28 = getelementptr inbounds float, float* %19, i64 %27
  %29 = bitcast float* %28 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %25, align 8
  %32 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %31, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %31, i64 0, i32 0, i32 4
  %35 = load i64, i64* %34, align 8
  %36 = mul i64 %35, %27
  %37 = getelementptr inbounds i8, i8* %33, i64 %36
  %38 = ptrtoint i8* %37 to i64
  %39 = and i64 %38, 63
  %40 = icmp eq i64 %39, 0
  tail call void @llvm.assume(i1 %40) #12
  %41 = bitcast i8* %37 to float*
  %42 = getelementptr inbounds float, float* %41, i64 %7
  %43 = bitcast float* %42 to i32*
  store i32 %30, i32* %43, align 4
  %44 = add nuw i64 %27, 1
  %45 = load i64*, i64** %20, align 8
  %46 = load i64, i64* %45, align 8
  %47 = icmp ult i64 %44, %46
  br i1 %47, label %26, label %48

48:                                               ; preds = %26, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE3_E12CallInitFuncEPvm(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #12
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE3_E12CallDataFuncEPvjm(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.180**
  %6 = load %class.anon.180*, %class.anon.180** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon.180, %class.anon.180* %6, i64 0, i32 0
  %9 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %8, align 8
  %10 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 4
  %13 = load i64, i64* %12, align 8
  %14 = mul i64 %13, %7
  %15 = getelementptr inbounds i8, i8* %11, i64 %14
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #12
  %19 = bitcast i8* %15 to float*
  %20 = getelementptr inbounds %class.anon.180, %class.anon.180* %6, i64 0, i32 1
  %21 = load i64*, i64** %20, align 8
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %53, label %24

24:                                               ; preds = %3
  %25 = getelementptr inbounds %class.anon.180, %class.anon.180* %6, i64 0, i32 2
  %26 = getelementptr inbounds %class.anon.180, %class.anon.180* %6, i64 0, i32 3
  %27 = xor i64 %7, -1
  br label %28

28:                                               ; preds = %28, %24
  %29 = phi i64 [ 0, %24 ], [ %49, %28 ]
  %30 = getelementptr inbounds float, float* %19, i64 %29
  %31 = bitcast float* %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %25, align 8
  %34 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %33, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %33, i64 0, i32 0, i32 4
  %37 = load i64, i64* %36, align 8
  %38 = mul i64 %37, %29
  %39 = getelementptr inbounds i8, i8* %35, i64 %38
  %40 = ptrtoint i8* %39 to i64
  %41 = and i64 %40, 63
  %42 = icmp eq i64 %41, 0
  tail call void @llvm.assume(i1 %42) #12
  %43 = bitcast i8* %39 to float*
  %44 = load i64*, i64** %26, align 8
  %45 = load i64, i64* %44, align 8
  %46 = add i64 %45, %27
  %47 = getelementptr inbounds float, float* %43, i64 %46
  %48 = bitcast float* %47 to i32*
  store i32 %32, i32* %48, align 4
  %49 = add nuw i64 %29, 1
  %50 = load i64*, i64** %20, align 8
  %51 = load i64, i64* %50, align 8
  %52 = icmp ult i64 %49, %51
  br i1 %52, label %28, label %53

53:                                               ; preds = %28, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE4_E12CallInitFuncEPvm(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #12
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE4_E12CallDataFuncEPvjm(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.181**
  %6 = load %class.anon.181*, %class.anon.181** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon.181, %class.anon.181* %6, i64 0, i32 0
  %9 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %8, align 8
  %10 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 4
  %13 = load i64, i64* %12, align 8
  %14 = mul i64 %13, %7
  %15 = getelementptr inbounds i8, i8* %11, i64 %14
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #12
  %19 = bitcast i8* %15 to float*
  %20 = getelementptr inbounds %class.anon.181, %class.anon.181* %6, i64 0, i32 1
  %21 = load i64*, i64** %20, align 8
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %56, label %24

24:                                               ; preds = %3
  %25 = getelementptr inbounds %class.anon.181, %class.anon.181* %6, i64 0, i32 2
  %26 = getelementptr inbounds %class.anon.181, %class.anon.181* %6, i64 0, i32 3
  %27 = xor i64 %7, -1
  br label %28

28:                                               ; preds = %28, %24
  %29 = phi i64 [ %22, %24 ], [ %54, %28 ]
  %30 = phi i64 [ 0, %24 ], [ %52, %28 ]
  %31 = getelementptr inbounds float, float* %19, i64 %30
  %32 = bitcast float* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %25, align 8
  %35 = xor i64 %30, -1
  %36 = add i64 %29, %35
  %37 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %34, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %34, i64 0, i32 0, i32 4
  %40 = load i64, i64* %39, align 8
  %41 = mul i64 %40, %36
  %42 = getelementptr inbounds i8, i8* %38, i64 %41
  %43 = ptrtoint i8* %42 to i64
  %44 = and i64 %43, 63
  %45 = icmp eq i64 %44, 0
  tail call void @llvm.assume(i1 %45) #12
  %46 = bitcast i8* %42 to float*
  %47 = load i64*, i64** %26, align 8
  %48 = load i64, i64* %47, align 8
  %49 = add i64 %48, %27
  %50 = getelementptr inbounds float, float* %46, i64 %49
  %51 = bitcast float* %50 to i32*
  store i32 %33, i32* %51, align 4
  %52 = add nuw i64 %30, 1
  %53 = load i64*, i64** %20, align 8
  %54 = load i64, i64* %53, align 8
  %55 = icmp ugt i64 %54, %52
  br i1 %55, label %28, label %56

56:                                               ; preds = %28, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE5_E12CallInitFuncEPvm(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to i32 (i64)**
  %4 = load i32 (i64)*, i32 (i64)** %3, align 8
  %5 = tail call i32 %4(i64 %1) #12
  %6 = icmp ne i32 %5, 0
  %7 = sext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3jxl10ThreadPool12RunCallStateIFNS_6StatusEmEZNS_12_GLOBAL__N_115UndoOrientationIfEEvNS_11OrientationERKNS_5PlaneIT_EERS9_PS0_EUliiE5_E12CallDataFuncEPvjm(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = getelementptr inbounds i8, i8* %0, i64 8
  %5 = bitcast i8* %4 to %class.anon.182**
  %6 = load %class.anon.182*, %class.anon.182** %5, align 8
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds %class.anon.182, %class.anon.182* %6, i64 0, i32 0
  %9 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %8, align 8
  %10 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %9, i64 0, i32 0, i32 4
  %13 = load i64, i64* %12, align 8
  %14 = mul i64 %13, %7
  %15 = getelementptr inbounds i8, i8* %11, i64 %14
  %16 = ptrtoint i8* %15 to i64
  %17 = and i64 %16, 63
  %18 = icmp eq i64 %17, 0
  tail call void @llvm.assume(i1 %18) #12
  %19 = bitcast i8* %15 to float*
  %20 = getelementptr inbounds %class.anon.182, %class.anon.182* %6, i64 0, i32 1
  %21 = load i64*, i64** %20, align 8
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %51, label %24

24:                                               ; preds = %3
  %25 = getelementptr inbounds %class.anon.182, %class.anon.182* %6, i64 0, i32 2
  br label %26

26:                                               ; preds = %26, %24
  %27 = phi i64 [ %22, %24 ], [ %49, %26 ]
  %28 = phi i64 [ 0, %24 ], [ %47, %26 ]
  %29 = getelementptr inbounds float, float* %19, i64 %28
  %30 = bitcast float* %29 to i32*
  %31 = load i32, i32* %30, align 4
  %32 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %25, align 8
  %33 = xor i64 %28, -1
  %34 = add i64 %27, %33
  %35 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %32, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %32, i64 0, i32 0, i32 4
  %38 = load i64, i64* %37, align 8
  %39 = mul i64 %38, %34
  %40 = getelementptr inbounds i8, i8* %36, i64 %39
  %41 = ptrtoint i8* %40 to i64
  %42 = and i64 %41, 63
  %43 = icmp eq i64 %42, 0
  tail call void @llvm.assume(i1 %43) #12
  %44 = bitcast i8* %40 to float*
  %45 = getelementptr inbounds float, float* %44, i64 %7
  %46 = bitcast float* %45 to i32*
  store i32 %31, i32* %46, align 4
  %47 = add nuw i64 %28, 1
  %48 = load i64*, i64** %20, align 8
  %49 = load i64, i64* %48, align 8
  %50 = icmp ugt i64 %49, %47
  br i1 %50, label %26, label %51

51:                                               ; preds = %26, %3
  ret void
}

declare void @_ZN3jxl9PlaneBase4SwapERS0_(%"struct.jxl::PlaneBase"*, %"struct.jxl::PlaneBase"* dereferenceable(32)) local_unnamed_addr #7

declare void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"*, i64, i64, i64) unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIZNS_17ConvertToExternalERKNS_11ImageBundleEmbm13JxlEndiannessmPS0_PvmPFvS7_mmmPKvES7_NS_11OrientationEE3$_0ZNS_17ConvertToExternalES4_mbmS5_mS6_S7_mSB_S7_SC_E3$_1E12CallInitFuncES7_m"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = alloca %"class.jxl::Plane.135", align 8
  %4 = bitcast i8* %0 to %class.anon.136**
  %5 = load %class.anon.136*, %class.anon.136** %4, align 8
  %6 = bitcast %"class.jxl::Plane.135"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #12
  %7 = getelementptr inbounds %class.anon.136, %class.anon.136* %5, i64 0, i32 1
  %8 = load i64*, i64** %7, align 8
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %class.anon.136, %class.anon.136* %5, i64 0, i32 2
  %11 = load i64*, i64** %10, align 8
  %12 = load i64, i64* %11, align 8
  %13 = mul i64 %12, %1
  %14 = getelementptr inbounds %"class.jxl::Plane.135", %"class.jxl::Plane.135"* %3, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %14, i64 %9, i64 %13, i64 2) #12
  %15 = getelementptr inbounds %class.anon.136, %class.anon.136* %5, i64 0, i32 0
  %16 = load %"class.jxl::Plane.135"*, %"class.jxl::Plane.135"** %15, align 8
  %17 = bitcast %"class.jxl::Plane.135"* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* nonnull align 8 %6, i64 24, i1 false) #12
  %18 = getelementptr inbounds %"class.jxl::Plane.135", %"class.jxl::Plane.135"* %16, i64 0, i32 0, i32 5
  %19 = getelementptr inbounds %"class.jxl::Plane.135", %"class.jxl::Plane.135"* %3, i64 0, i32 0, i32 5
  %20 = getelementptr inbounds %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.118"* %19, i64 0, i32 0, i32 0, i32 0
  %21 = bitcast %"class.std::__1::unique_ptr.118"* %19 to i64*
  %22 = load i64, i64* %21, align 8
  store i8* null, i8** %20, align 8
  %23 = getelementptr inbounds %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.118"* %18, i64 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = bitcast %"class.std::__1::unique_ptr.118"* %18 to i64*
  store i64 %22, i64* %25, align 8
  %26 = icmp eq i8* %24, null
  br i1 %26, label %28, label %27

27:                                               ; preds = %2
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %24) #12
  br label %28

28:                                               ; preds = %27, %2
  %29 = getelementptr inbounds %"class.jxl::Plane.135", %"class.jxl::Plane.135"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  store i8* null, i8** %29, align 8
  %31 = icmp eq i8* %30, null
  br i1 %31, label %33, label %32

32:                                               ; preds = %28
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %30) #12
  br label %33

33:                                               ; preds = %32, %28
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #12
  %34 = getelementptr inbounds %class.anon.136, %class.anon.136* %5, i64 0, i32 3
  %35 = load %class.anon*, %class.anon** %34, align 8
  %36 = getelementptr inbounds %class.anon, %class.anon* %35, i64 0, i32 0
  %37 = load void (i8*, i64, i64, i64, i8*)**, void (i8*, i64, i64, i64, i8*)*** %36, align 8
  %38 = load void (i8*, i64, i64, i64, i8*)*, void (i8*, i64, i64, i64, i8*)** %37, align 8
  %39 = icmp eq void (i8*, i64, i64, i64, i8*)* %38, null
  br i1 %39, label %102, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds %class.anon, %class.anon* %35, i64 0, i32 1
  %42 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %41, align 8
  %43 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %42, i64 0, i32 0, i32 1
  %44 = bitcast %"class.std::__1::vector.43"** %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = bitcast %"class.std::__1::vector"* %42 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = sub i64 %45, %47
  %49 = sdiv exact i64 %48, 24
  %50 = icmp ult i64 %49, %1
  %51 = inttoptr i64 %47 to %"class.std::__1::vector.43"*
  %52 = inttoptr i64 %45 to %"class.std::__1::vector.43"*
  br i1 %50, label %53, label %55

53:                                               ; preds = %40
  %54 = sub i64 %1, %49
  call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector"* %42, i64 %54) #12
  br label %75

55:                                               ; preds = %40
  %56 = icmp ugt i64 %49, %1
  br i1 %56, label %57, label %73

57:                                               ; preds = %55
  %58 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %51, i64 %1
  %59 = icmp eq %"class.std::__1::vector.43"* %58, %52
  br i1 %59, label %72, label %60

60:                                               ; preds = %57, %70
  %61 = phi %"class.std::__1::vector.43"* [ %62, %70 ], [ %52, %57 ]
  %62 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %61, i64 -1
  %63 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %62, i64 0, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = icmp eq i8* %64, null
  br i1 %65, label %70, label %66

66:                                               ; preds = %60
  %67 = ptrtoint i8* %64 to i64
  %68 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %61, i64 -1, i32 0, i32 1
  %69 = bitcast i8** %68 to i64*
  store i64 %67, i64* %69, align 8
  call void @_ZdlPv(i8* nonnull %64) #14
  br label %70

70:                                               ; preds = %66, %60
  %71 = icmp eq %"class.std::__1::vector.43"* %62, %58
  br i1 %71, label %72, label %60

72:                                               ; preds = %70, %57
  store %"class.std::__1::vector.43"* %58, %"class.std::__1::vector.43"** %43, align 8
  br label %73

73:                                               ; preds = %72, %55
  %74 = icmp eq i64 %1, 0
  br i1 %74, label %102, label %75

75:                                               ; preds = %73, %53
  %76 = getelementptr inbounds %class.anon, %class.anon* %35, i64 0, i32 2
  br label %77

77:                                               ; preds = %99, %75
  %78 = phi i64 [ 0, %75 ], [ %100, %99 ]
  %79 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %41, align 8
  %80 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %79, i64 0, i32 0, i32 0
  %81 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %80, align 8
  %82 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %81, i64 %78
  %83 = load i64*, i64** %76, align 8
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %81, i64 %78, i32 0, i32 1
  %86 = bitcast i8** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = bitcast %"class.std::__1::vector.43"* %82 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = sub i64 %87, %89
  %91 = icmp ugt i64 %84, %90
  %92 = inttoptr i64 %89 to i8*
  br i1 %91, label %93, label %95

93:                                               ; preds = %77
  %94 = sub i64 %84, %90
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.43"* %82, i64 %94) #12
  br label %99

95:                                               ; preds = %77
  %96 = icmp ult i64 %84, %90
  br i1 %96, label %97, label %99

97:                                               ; preds = %95
  %98 = getelementptr inbounds i8, i8* %92, i64 %84
  store i8* %98, i8** %85, align 8
  br label %99

99:                                               ; preds = %97, %95, %93
  %100 = add nuw i64 %78, 1
  %101 = icmp eq i64 %100, %1
  br i1 %101, label %102, label %77

102:                                              ; preds = %99, %33, %73
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIZNS_17ConvertToExternalERKNS_11ImageBundleEmbm13JxlEndiannessmPS0_PvmPFvS7_mmmPKvES7_NS_11OrientationEE3$_0ZNS_17ConvertToExternalES4_mbmS5_mS6_S7_mSB_S7_SC_E3$_1E12CallDataFuncES7_jm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = alloca [4 x float*], align 16
  %5 = alloca [4 x %"struct.hwy::float16_t"*], align 16
  %6 = getelementptr inbounds i8, i8* %0, i64 8
  %7 = bitcast i8* %6 to %class.anon.137**
  %8 = load %class.anon.137*, %class.anon.137** %7, align 8
  %9 = sext i32 %1 to i64
  %10 = bitcast [4 x float*]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #12
  %11 = getelementptr inbounds %class.anon.137, %class.anon.137* %8, i64 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 32, i1 false) #12
  %12 = load i64*, i64** %11, align 8
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %100, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %class.anon.137, %class.anon.137* %8, i64 0, i32 1
  %17 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %16, align 8
  %18 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %17, align 8
  %19 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 0, i32 0, i64 0, i32 0, i32 4
  %20 = load i64, i64* %19, align 8
  %21 = mul i64 %20, %9
  %22 = add i64 %13, -1
  %23 = and i64 %13, 3
  %24 = icmp ult i64 %22, 3
  br i1 %24, label %80, label %25

25:                                               ; preds = %15
  %26 = sub i64 %13, %23
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 0, %25 ], [ %77, %27 ]
  %29 = phi i64 [ %26, %25 ], [ %78, %27 ]
  %30 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 0, i32 0, i64 %28, i32 0, i32 5, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = ptrtoint i8* %31 to i64
  %33 = and i64 %32, 63
  %34 = icmp eq i64 %33, 0
  tail call void @llvm.assume(i1 %34) #12
  %35 = getelementptr inbounds i8, i8* %31, i64 %21
  %36 = ptrtoint i8* %35 to i64
  %37 = and i64 %36, 63
  %38 = icmp eq i64 %37, 0
  tail call void @llvm.assume(i1 %38) #12
  %39 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %28
  %40 = bitcast float** %39 to i8**
  store i8* %35, i8** %40, align 16
  %41 = or i64 %28, 1
  %42 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 0, i32 0, i64 %41, i32 0, i32 5, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = ptrtoint i8* %43 to i64
  %45 = and i64 %44, 63
  %46 = icmp eq i64 %45, 0
  tail call void @llvm.assume(i1 %46) #12
  %47 = getelementptr inbounds i8, i8* %43, i64 %21
  %48 = ptrtoint i8* %47 to i64
  %49 = and i64 %48, 63
  %50 = icmp eq i64 %49, 0
  tail call void @llvm.assume(i1 %50) #12
  %51 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %41
  %52 = bitcast float** %51 to i8**
  store i8* %47, i8** %52, align 8
  %53 = or i64 %28, 2
  %54 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 0, i32 0, i64 %53, i32 0, i32 5, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = ptrtoint i8* %55 to i64
  %57 = and i64 %56, 63
  %58 = icmp eq i64 %57, 0
  tail call void @llvm.assume(i1 %58) #12
  %59 = getelementptr inbounds i8, i8* %55, i64 %21
  %60 = ptrtoint i8* %59 to i64
  %61 = and i64 %60, 63
  %62 = icmp eq i64 %61, 0
  tail call void @llvm.assume(i1 %62) #12
  %63 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %53
  %64 = bitcast float** %63 to i8**
  store i8* %59, i8** %64, align 16
  %65 = or i64 %28, 3
  %66 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 0, i32 0, i64 %65, i32 0, i32 5, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = ptrtoint i8* %67 to i64
  %69 = and i64 %68, 63
  %70 = icmp eq i64 %69, 0
  tail call void @llvm.assume(i1 %70) #12
  %71 = getelementptr inbounds i8, i8* %67, i64 %21
  %72 = ptrtoint i8* %71 to i64
  %73 = and i64 %72, 63
  %74 = icmp eq i64 %73, 0
  tail call void @llvm.assume(i1 %74) #12
  %75 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %65
  %76 = bitcast float** %75 to i8**
  store i8* %71, i8** %76, align 8
  %77 = add nuw i64 %28, 4
  %78 = add i64 %29, -4
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %80, label %27

80:                                               ; preds = %27, %15
  %81 = phi i64 [ 0, %15 ], [ %77, %27 ]
  %82 = icmp eq i64 %23, 0
  br i1 %82, label %100, label %83

83:                                               ; preds = %80, %83
  %84 = phi i64 [ %97, %83 ], [ %81, %80 ]
  %85 = phi i64 [ %98, %83 ], [ %23, %80 ]
  %86 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %18, i64 0, i32 0, i64 %84, i32 0, i32 5, i32 0, i32 0, i32 0
  %87 = load i8*, i8** %86, align 8
  %88 = ptrtoint i8* %87 to i64
  %89 = and i64 %88, 63
  %90 = icmp eq i64 %89, 0
  tail call void @llvm.assume(i1 %90) #12
  %91 = getelementptr inbounds i8, i8* %87, i64 %21
  %92 = ptrtoint i8* %91 to i64
  %93 = and i64 %92, 63
  %94 = icmp eq i64 %93, 0
  tail call void @llvm.assume(i1 %94) #12
  %95 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %84
  %96 = bitcast float** %95 to i8**
  store i8* %91, i8** %96, align 8
  %97 = add nuw i64 %84, 1
  %98 = add i64 %85, -1
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %83, !llvm.loop !96

100:                                              ; preds = %80, %83, %3
  %101 = getelementptr inbounds %class.anon.137, %class.anon.137* %8, i64 0, i32 2
  %102 = load i8*, i8** %101, align 8
  %103 = load i8, i8* %102, align 1, !range !95
  %104 = icmp eq i8 %103, 0
  br i1 %104, label %148, label %105

105:                                              ; preds = %100
  %106 = getelementptr inbounds %class.anon.137, %class.anon.137* %8, i64 0, i32 3
  %107 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %106, align 8
  %108 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %107, i64 0, i32 9
  %109 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %108, align 8
  %110 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %109, i64 0, i32 17, i32 0, i32 0
  %111 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %110, align 8
  %112 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %109, i64 0, i32 17, i32 0, i32 1
  %113 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %112, align 8
  %114 = icmp eq %"struct.jxl::ExtraChannelInfo"* %111, %113
  br i1 %114, label %135, label %117

115:                                              ; preds = %117
  %116 = icmp eq %"struct.jxl::ExtraChannelInfo"* %122, %113
  br i1 %116, label %135, label %117

117:                                              ; preds = %105, %115
  %118 = phi %"struct.jxl::ExtraChannelInfo"* [ %122, %115 ], [ %111, %105 ]
  %119 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %118, i64 0, i32 2
  %120 = load i32, i32* %119, align 4
  %121 = icmp eq i32 %120, 0
  %122 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %118, i64 1
  br i1 %121, label %123, label %115

123:                                              ; preds = %117
  %124 = icmp eq %"struct.jxl::ExtraChannelInfo"* %118, null
  br i1 %124, label %135, label %125

125:                                              ; preds = %123
  %126 = getelementptr inbounds %class.anon.137, %class.anon.137* %8, i64 0, i32 4
  %127 = load %"class.jxl::Plane"**, %"class.jxl::Plane"*** %126, align 8
  %128 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %127, align 8
  %129 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %128, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %130 = load i8*, i8** %129, align 8
  %131 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %128, i64 0, i32 0, i32 4
  %132 = load i64, i64* %131, align 8
  %133 = mul i64 %132, %9
  %134 = getelementptr inbounds i8, i8* %130, i64 %133
  br label %140

135:                                              ; preds = %115, %123, %105
  %136 = getelementptr inbounds %class.anon.137, %class.anon.137* %8, i64 0, i32 5
  %137 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %136, align 8
  %138 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %137, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %139 = load i8*, i8** %138, align 8
  br label %140

140:                                              ; preds = %135, %125
  %141 = phi i8* [ %139, %135 ], [ %134, %125 ]
  %142 = ptrtoint i8* %141 to i64
  %143 = and i64 %142, 63
  %144 = icmp eq i64 %143, 0
  tail call void @llvm.assume(i1 %144) #12
  %145 = add i64 %13, 1
  %146 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %13
  %147 = bitcast float** %146 to i8**
  store i8* %141, i8** %147, align 8
  br label %148

148:                                              ; preds = %140, %100
  %149 = phi i64 [ %145, %140 ], [ %13, %100 ]
  %150 = getelementptr inbounds %class.anon.137, %class.anon.137* %8, i64 0, i32 6
  %151 = load i64*, i64** %150, align 8
  %152 = load i64, i64* %151, align 8
  %153 = icmp eq i64 %149, %152
  br i1 %153, label %157, label %154

154:                                              ; preds = %148
  %155 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 354, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0)) #12
  %156 = tail call zeroext i1 @_ZN3jxl5AbortEv() #15
  unreachable

157:                                              ; preds = %148
  %158 = bitcast [4 x %"struct.hwy::float16_t"*]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %158) #12
  %159 = icmp eq i64 %149, 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %158, i8 -86, i64 32, i1 false) #12
  br i1 %159, label %165, label %160

160:                                              ; preds = %157
  %161 = getelementptr inbounds %class.anon.137, %class.anon.137* %8, i64 0, i32 7
  %162 = shl i64 %2, 32
  %163 = ashr exact i64 %162, 32
  %164 = getelementptr inbounds %class.anon.137, %class.anon.137* %8, i64 0, i32 8
  br label %170

165:                                              ; preds = %170, %157
  %166 = getelementptr inbounds %class.anon.137, %class.anon.137* %8, i64 0, i32 9
  %167 = load void (i8*, i64, i64, i64, i8*)**, void (i8*, i64, i64, i64, i8*)*** %166, align 8
  %168 = load void (i8*, i64, i64, i64, i8*)*, void (i8*, i64, i64, i64, i8*)** %167, align 8
  %169 = icmp eq void (i8*, i64, i64, i64, i8*)* %168, null
  br i1 %169, label %212, label %203

170:                                              ; preds = %200, %160
  %171 = phi i64 [ %149, %160 ], [ %202, %200 ]
  %172 = phi i64 [ 0, %160 ], [ %198, %200 ]
  %173 = load %"class.jxl::Plane.135"*, %"class.jxl::Plane.135"** %161, align 8
  %174 = mul i64 %171, %163
  %175 = add i64 %174, %172
  %176 = getelementptr inbounds %"class.jxl::Plane.135", %"class.jxl::Plane.135"* %173, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %177 = load i8*, i8** %176, align 8
  %178 = getelementptr inbounds %"class.jxl::Plane.135", %"class.jxl::Plane.135"* %173, i64 0, i32 0, i32 4
  %179 = load i64, i64* %178, align 8
  %180 = mul i64 %179, %175
  %181 = getelementptr inbounds i8, i8* %177, i64 %180
  %182 = ptrtoint i8* %181 to i64
  %183 = and i64 %182, 63
  %184 = icmp eq i64 %183, 0
  tail call void @llvm.assume(i1 %184) #12
  %185 = bitcast i8* %181 to %"struct.hwy::float16_t"*
  %186 = getelementptr inbounds [4 x %"struct.hwy::float16_t"*], [4 x %"struct.hwy::float16_t"*]* %5, i64 0, i64 %172
  %187 = bitcast %"struct.hwy::float16_t"** %186 to i8**
  store i8* %181, i8** %187, align 8
  %188 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %189 = and i32 %188, 2225
  %190 = tail call i32 @llvm.cttz.i32(i32 %189, i1 true) #12, !range !98
  %191 = zext i32 %190 to i64
  %192 = getelementptr inbounds [12 x void (float*, %"struct.hwy::float16_t"*, i64)*], [12 x void (float*, %"struct.hwy::float16_t"*, i64)*]* @_ZN3jxlL30FloatToF16HighwayDispatchTableE, i64 0, i64 %191
  %193 = load void (float*, %"struct.hwy::float16_t"*, i64)*, void (float*, %"struct.hwy::float16_t"*, i64)** %192, align 8
  %194 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %172
  %195 = load float*, float** %194, align 8
  %196 = load i64*, i64** %164, align 8
  %197 = load i64, i64* %196, align 8
  tail call void %193(float* %195, %"struct.hwy::float16_t"* %185, i64 %197) #12
  %198 = add nuw i64 %172, 1
  %199 = icmp eq i64 %198, %149
  br i1 %199, label %165, label %200

200:                                              ; preds = %170
  %201 = load i64*, i64** %150, align 8
  %202 = load i64, i64* %201, align 8
  br label %170

203:                                              ; preds = %165
  %204 = getelementptr inbounds %class.anon.137, %class.anon.137* %8, i64 0, i32 10
  %205 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %204, align 8
  %206 = shl i64 %2, 32
  %207 = ashr exact i64 %206, 32
  %208 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %205, i64 0, i32 0, i32 0
  %209 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %208, align 8
  %210 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %209, i64 %207, i32 0, i32 0
  %211 = load i8*, i8** %210, align 8
  br label %221

212:                                              ; preds = %165
  %213 = getelementptr inbounds %class.anon.137, %class.anon.137* %8, i64 0, i32 11
  %214 = load i8**, i8*** %213, align 8
  %215 = load i8*, i8** %214, align 8
  %216 = getelementptr inbounds %class.anon.137, %class.anon.137* %8, i64 0, i32 12
  %217 = load i64*, i64** %216, align 8
  %218 = load i64, i64* %217, align 8
  %219 = mul i64 %218, %9
  %220 = getelementptr inbounds i8, i8* %215, i64 %219
  br label %221

221:                                              ; preds = %212, %203
  %222 = phi i8* [ %211, %203 ], [ %220, %212 ]
  %223 = bitcast i8* %222 to %"struct.hwy::float16_t"*
  %224 = getelementptr inbounds %class.anon.137, %class.anon.137* %8, i64 0, i32 8
  %225 = load i64*, i64** %224, align 8
  %226 = load i64, i64* %225, align 8
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %237, label %228

228:                                              ; preds = %221
  %229 = and i64 %149, 1
  %230 = icmp eq i64 %149, 1
  %231 = sub i64 %149, %229
  %232 = icmp eq i64 %229, 0
  br label %233

233:                                              ; preds = %228, %258
  %234 = phi i64 [ %259, %258 ], [ %226, %228 ]
  %235 = phi i64 [ %260, %258 ], [ 0, %228 ]
  br i1 %159, label %258, label %236

236:                                              ; preds = %233
  br i1 %230, label %243, label %262

237:                                              ; preds = %258, %221
  %238 = phi i64 [ 0, %221 ], [ %259, %258 ]
  %239 = getelementptr inbounds %class.anon.137, %class.anon.137* %8, i64 0, i32 13
  %240 = load i8*, i8** %239, align 8
  %241 = load i8, i8* %240, align 1, !range !95
  %242 = icmp eq i8 %241, 0
  br i1 %242, label %327, label %287

243:                                              ; preds = %262, %236
  %244 = phi i64 [ 0, %236 ], [ %284, %262 ]
  br i1 %232, label %255, label %245

245:                                              ; preds = %243
  %246 = getelementptr inbounds [4 x %"struct.hwy::float16_t"*], [4 x %"struct.hwy::float16_t"*]* %5, i64 0, i64 %244
  %247 = load %"struct.hwy::float16_t"*, %"struct.hwy::float16_t"** %246, align 8
  %248 = load i64*, i64** %150, align 8
  %249 = load i64, i64* %248, align 8
  %250 = mul i64 %249, %235
  %251 = add i64 %250, %244
  %252 = getelementptr inbounds %"struct.hwy::float16_t", %"struct.hwy::float16_t"* %247, i64 %235, i32 0
  %253 = getelementptr inbounds %"struct.hwy::float16_t", %"struct.hwy::float16_t"* %223, i64 %251, i32 0
  %254 = load i16, i16* %252, align 1
  store i16 %254, i16* %253, align 1
  br label %255

255:                                              ; preds = %243, %245
  %256 = load i64*, i64** %224, align 8
  %257 = load i64, i64* %256, align 8
  br label %258

258:                                              ; preds = %255, %233
  %259 = phi i64 [ %257, %255 ], [ %234, %233 ]
  %260 = add nuw i64 %235, 1
  %261 = icmp ult i64 %260, %259
  br i1 %261, label %233, label %237

262:                                              ; preds = %236, %262
  %263 = phi i64 [ %284, %262 ], [ 0, %236 ]
  %264 = phi i64 [ %285, %262 ], [ %231, %236 ]
  %265 = getelementptr inbounds [4 x %"struct.hwy::float16_t"*], [4 x %"struct.hwy::float16_t"*]* %5, i64 0, i64 %263
  %266 = load %"struct.hwy::float16_t"*, %"struct.hwy::float16_t"** %265, align 16
  %267 = load i64*, i64** %150, align 8
  %268 = load i64, i64* %267, align 8
  %269 = mul i64 %268, %235
  %270 = add i64 %269, %263
  %271 = getelementptr inbounds %"struct.hwy::float16_t", %"struct.hwy::float16_t"* %266, i64 %235, i32 0
  %272 = getelementptr inbounds %"struct.hwy::float16_t", %"struct.hwy::float16_t"* %223, i64 %270, i32 0
  %273 = load i16, i16* %271, align 1
  store i16 %273, i16* %272, align 1
  %274 = or i64 %263, 1
  %275 = getelementptr inbounds [4 x %"struct.hwy::float16_t"*], [4 x %"struct.hwy::float16_t"*]* %5, i64 0, i64 %274
  %276 = load %"struct.hwy::float16_t"*, %"struct.hwy::float16_t"** %275, align 8
  %277 = load i64*, i64** %150, align 8
  %278 = load i64, i64* %277, align 8
  %279 = mul i64 %278, %235
  %280 = add i64 %279, %274
  %281 = getelementptr inbounds %"struct.hwy::float16_t", %"struct.hwy::float16_t"* %276, i64 %235, i32 0
  %282 = getelementptr inbounds %"struct.hwy::float16_t", %"struct.hwy::float16_t"* %223, i64 %280, i32 0
  %283 = load i16, i16* %281, align 1
  store i16 %283, i16* %282, align 1
  %284 = add nuw i64 %263, 2
  %285 = add i64 %264, -2
  %286 = icmp eq i64 %285, 0
  br i1 %286, label %243, label %262

287:                                              ; preds = %237
  %288 = load i64*, i64** %150, align 8
  %289 = load i64, i64* %288, align 8
  %290 = shl i64 %238, 1
  %291 = mul i64 %289, %290
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %327, label %293

293:                                              ; preds = %287
  %294 = add i64 %291, -1
  %295 = lshr i64 %294, 1
  %296 = add nuw i64 %295, 1
  %297 = and i64 %296, 1
  %298 = icmp eq i64 %295, 0
  br i1 %298, label %318, label %299

299:                                              ; preds = %293
  %300 = sub nuw i64 %296, %297
  br label %301

301:                                              ; preds = %301, %299
  %302 = phi i64 [ 0, %299 ], [ %315, %301 ]
  %303 = phi i64 [ %300, %299 ], [ %316, %301 ]
  %304 = getelementptr inbounds i8, i8* %222, i64 %302
  %305 = or i64 %302, 1
  %306 = getelementptr inbounds i8, i8* %222, i64 %305
  %307 = load i8, i8* %304, align 1
  %308 = load i8, i8* %306, align 1
  store i8 %308, i8* %304, align 1
  store i8 %307, i8* %306, align 1
  %309 = or i64 %302, 2
  %310 = getelementptr inbounds i8, i8* %222, i64 %309
  %311 = or i64 %302, 3
  %312 = getelementptr inbounds i8, i8* %222, i64 %311
  %313 = load i8, i8* %310, align 1
  %314 = load i8, i8* %312, align 1
  store i8 %314, i8* %310, align 1
  store i8 %313, i8* %312, align 1
  %315 = add nuw i64 %302, 4
  %316 = add i64 %303, -2
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %318, label %301

318:                                              ; preds = %301, %293
  %319 = phi i64 [ 0, %293 ], [ %315, %301 ]
  %320 = icmp eq i64 %297, 0
  br i1 %320, label %327, label %321

321:                                              ; preds = %318
  %322 = getelementptr inbounds i8, i8* %222, i64 %319
  %323 = or i64 %319, 1
  %324 = getelementptr inbounds i8, i8* %222, i64 %323
  %325 = load i8, i8* %322, align 1
  %326 = load i8, i8* %324, align 1
  store i8 %326, i8* %322, align 1
  store i8 %325, i8* %324, align 1
  br label %327

327:                                              ; preds = %321, %318, %287, %237
  %328 = load void (i8*, i64, i64, i64, i8*)**, void (i8*, i64, i64, i64, i8*)*** %166, align 8
  %329 = load void (i8*, i64, i64, i64, i8*)*, void (i8*, i64, i64, i64, i8*)** %328, align 8
  %330 = icmp eq void (i8*, i64, i64, i64, i8*)* %329, null
  br i1 %330, label %337, label %331

331:                                              ; preds = %327
  %332 = getelementptr inbounds %class.anon.137, %class.anon.137* %8, i64 0, i32 14
  %333 = load i8**, i8*** %332, align 8
  %334 = load i8*, i8** %333, align 8
  %335 = load i64*, i64** %224, align 8
  %336 = load i64, i64* %335, align 8
  tail call void %329(i8* %334, i64 0, i64 %9, i64 %336, i8* %222) #12
  br label %337

337:                                              ; preds = %327, %331
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %158) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.std::__1::vector.43"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.std::__1::vector.43"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 24
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.std::__1::vector.43"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %13, i64 %18, i32 0, i32 0
  %20 = bitcast i8** %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 24
  %25 = add i64 %23, 24
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %26, i1 false) #12
  %27 = ptrtoint %"class.std::__1::vector.43"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %123

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 24
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 768614336404564650
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #15
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 24
  %42 = icmp ult i64 %41, 384307168202282325
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 768614336404564650, %39 ]
  %50 = mul i64 %49, 24
  %51 = tail call i8* @_Znwm(i64 %50) #14
  %52 = bitcast i8* %51 to %"class.std::__1::vector.43"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"class.std::__1::vector.43"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %55, i64 %34
  %57 = ptrtoint %"class.std::__1::vector.43"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %55, i64 %54
  %59 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %56, i64 %1
  br label %60

60:                                               ; preds = %53, %60
  %61 = phi %"class.std::__1::vector.43"* [ %64, %60 ], [ %56, %53 ]
  %62 = phi i64 [ %65, %60 ], [ %57, %53 ]
  %63 = inttoptr i64 %62 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %63, i8 0, i64 24, i1 false) #12
  %64 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %61, i64 1
  %65 = ptrtoint %"class.std::__1::vector.43"* %64 to i64
  %66 = icmp eq %"class.std::__1::vector.43"* %59, %64
  br i1 %66, label %67, label %60

67:                                               ; preds = %60
  %68 = ptrtoint %"class.std::__1::vector.43"* %58 to i64
  %69 = ptrtoint %"class.std::__1::vector.43"* %59 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %71 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %70, align 8
  %72 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %6, align 8
  %73 = icmp eq %"class.std::__1::vector.43"* %72, %71
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = ptrtoint %"class.std::__1::vector.43"* %71 to i64
  br label %101

76:                                               ; preds = %67, %76
  %77 = phi %"class.std::__1::vector.43"* [ %79, %76 ], [ %56, %67 ]
  %78 = phi %"class.std::__1::vector.43"* [ %80, %76 ], [ %72, %67 ]
  %79 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %77, i64 -1
  %80 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %78, i64 -1
  %81 = bitcast %"class.std::__1::vector.43"* %79 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %81, i8 0, i64 24, i1 false) #12
  %82 = bitcast %"class.std::__1::vector.43"* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %"class.std::__1::vector.43"* %79 to i64*
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %78, i64 -1, i32 0, i32 1
  %86 = bitcast i8** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %77, i64 -1, i32 0, i32 1
  %89 = bitcast i8** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %78, i64 -1, i32 0, i32 2, i32 0, i32 0
  %91 = bitcast i8** %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %77, i64 -1, i32 0, i32 2, i32 0, i32 0
  %94 = bitcast i8** %93 to i64*
  store i64 %92, i64* %94, align 8
  %95 = bitcast %"class.std::__1::vector.43"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #12
  %96 = icmp eq %"class.std::__1::vector.43"* %80, %71
  br i1 %96, label %97, label %76

97:                                               ; preds = %76
  %98 = ptrtoint %"class.std::__1::vector.43"* %79 to i64
  %99 = load i64, i64* %31, align 8
  %100 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %6, align 8
  br label %101

101:                                              ; preds = %74, %97
  %102 = phi %"class.std::__1::vector.43"* [ %71, %74 ], [ %100, %97 ]
  %103 = phi i64 [ %57, %74 ], [ %98, %97 ]
  %104 = phi i64 [ %75, %74 ], [ %99, %97 ]
  store i64 %103, i64* %31, align 8
  store i64 %69, i64* %7, align 8
  store i64 %68, i64* %4, align 8
  %105 = inttoptr i64 %104 to %"class.std::__1::vector.43"*
  %106 = icmp eq %"class.std::__1::vector.43"* %102, %105
  br i1 %106, label %119, label %107

107:                                              ; preds = %101, %117
  %108 = phi %"class.std::__1::vector.43"* [ %109, %117 ], [ %102, %101 ]
  %109 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %108, i64 -1
  %110 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %109, i64 0, i32 0, i32 0
  %111 = load i8*, i8** %110, align 8
  %112 = icmp eq i8* %111, null
  br i1 %112, label %117, label %113

113:                                              ; preds = %107
  %114 = ptrtoint i8* %111 to i64
  %115 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %108, i64 -1, i32 0, i32 1
  %116 = bitcast i8** %115 to i64*
  store i64 %114, i64* %116, align 8
  tail call void @_ZdlPv(i8* nonnull %111) #14
  br label %117

117:                                              ; preds = %113, %107
  %118 = icmp eq %"class.std::__1::vector.43"* %109, %105
  br i1 %118, label %119, label %107

119:                                              ; preds = %117, %101
  %120 = icmp eq i64 %104, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %104 to i8*
  tail call void @_ZdlPv(i8* %122) #14
  br label %123

123:                                              ; preds = %121, %119, %28
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #13

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.43"*, i64) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #12
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector.43"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector.43"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #15
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #14
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #12
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #12
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #14
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIvJPKfPNS_9float16_tEmEE13ChooseAndCallIXadL_ZN3jxlL30FloatToF16HighwayDispatchTableEEEEEvS2_S4_m(float*, %"struct.hwy::float16_t"*, i64) #6 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #12
  %4 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %5 = and i32 %4, 2225
  %6 = tail call i32 @llvm.cttz.i32(i32 %5, i1 true) #12, !range !98
  %7 = zext i32 %6 to i64
  %8 = getelementptr inbounds [12 x void (float*, %"struct.hwy::float16_t"*, i64)*], [12 x void (float*, %"struct.hwy::float16_t"*, i64)*]* @_ZN3jxlL30FloatToF16HighwayDispatchTableE, i64 0, i64 %7
  %9 = load void (float*, %"struct.hwy::float16_t"*, i64)*, void (float*, %"struct.hwy::float16_t"*, i64)** %8, align 8
  tail call void %9(float* %0, %"struct.hwy::float16_t"* %1, i64 %2) #12
  ret void
}

declare void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"*) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #9

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIZNS_17ConvertToExternalERKNS_11ImageBundleEmbm13JxlEndiannessmPS0_PvmPFvS7_mmmPKvES7_NS_11OrientationEE3$_2ZNS_17ConvertToExternalES4_mbmS5_mS6_S7_mSB_S7_SC_E3$_3E12CallInitFuncES7_m"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = bitcast i8* %0 to %class.anon.138**
  %4 = load %class.anon.138*, %class.anon.138** %3, align 8
  %5 = getelementptr inbounds %class.anon.138, %class.anon.138* %4, i64 0, i32 0
  %6 = load %class.anon*, %class.anon** %5, align 8
  %7 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 0
  %8 = load void (i8*, i64, i64, i64, i8*)**, void (i8*, i64, i64, i64, i8*)*** %7, align 8
  %9 = load void (i8*, i64, i64, i64, i8*)*, void (i8*, i64, i64, i64, i8*)** %8, align 8
  %10 = icmp eq void (i8*, i64, i64, i64, i8*)* %9, null
  br i1 %10, label %73, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 1
  %13 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %12, align 8
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %13, i64 0, i32 0, i32 1
  %15 = bitcast %"class.std::__1::vector.43"** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.std::__1::vector"* %13 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = sdiv exact i64 %19, 24
  %21 = icmp ult i64 %20, %1
  %22 = inttoptr i64 %18 to %"class.std::__1::vector.43"*
  %23 = inttoptr i64 %16 to %"class.std::__1::vector.43"*
  br i1 %21, label %24, label %26

24:                                               ; preds = %11
  %25 = sub i64 %1, %20
  tail call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector"* %13, i64 %25) #12
  br label %46

26:                                               ; preds = %11
  %27 = icmp ugt i64 %20, %1
  br i1 %27, label %28, label %44

28:                                               ; preds = %26
  %29 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %22, i64 %1
  %30 = icmp eq %"class.std::__1::vector.43"* %29, %23
  br i1 %30, label %43, label %31

31:                                               ; preds = %28, %41
  %32 = phi %"class.std::__1::vector.43"* [ %33, %41 ], [ %23, %28 ]
  %33 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %32, i64 -1
  %34 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %33, i64 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = icmp eq i8* %35, null
  br i1 %36, label %41, label %37

37:                                               ; preds = %31
  %38 = ptrtoint i8* %35 to i64
  %39 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %32, i64 -1, i32 0, i32 1
  %40 = bitcast i8** %39 to i64*
  store i64 %38, i64* %40, align 8
  tail call void @_ZdlPv(i8* nonnull %35) #14
  br label %41

41:                                               ; preds = %37, %31
  %42 = icmp eq %"class.std::__1::vector.43"* %33, %29
  br i1 %42, label %43, label %31

43:                                               ; preds = %41, %28
  store %"class.std::__1::vector.43"* %29, %"class.std::__1::vector.43"** %14, align 8
  br label %44

44:                                               ; preds = %43, %26
  %45 = icmp eq i64 %1, 0
  br i1 %45, label %73, label %46

46:                                               ; preds = %44, %24
  %47 = getelementptr inbounds %class.anon, %class.anon* %6, i64 0, i32 2
  br label %48

48:                                               ; preds = %70, %46
  %49 = phi i64 [ 0, %46 ], [ %71, %70 ]
  %50 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %12, align 8
  %51 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %50, i64 0, i32 0, i32 0
  %52 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %51, align 8
  %53 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %52, i64 %49
  %54 = load i64*, i64** %47, align 8
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %52, i64 %49, i32 0, i32 1
  %57 = bitcast i8** %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = bitcast %"class.std::__1::vector.43"* %53 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = sub i64 %58, %60
  %62 = icmp ugt i64 %55, %61
  %63 = inttoptr i64 %60 to i8*
  br i1 %62, label %64, label %66

64:                                               ; preds = %48
  %65 = sub i64 %55, %61
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.43"* %53, i64 %65) #12
  br label %70

66:                                               ; preds = %48
  %67 = icmp ult i64 %55, %61
  br i1 %67, label %68, label %70

68:                                               ; preds = %66
  %69 = getelementptr inbounds i8, i8* %63, i64 %55
  store i8* %69, i8** %56, align 8
  br label %70

70:                                               ; preds = %68, %66, %64
  %71 = add nuw i64 %49, 1
  %72 = icmp eq i64 %71, %1
  br i1 %72, label %73, label %48

73:                                               ; preds = %70, %2, %44
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIZNS_17ConvertToExternalERKNS_11ImageBundleEmbm13JxlEndiannessmPS0_PvmPFvS7_mmmPKvES7_NS_11OrientationEE3$_2ZNS_17ConvertToExternalES4_mbmS5_mS6_S7_mSB_S7_SC_E3$_3E12CallDataFuncES7_jm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = alloca [4 x float*], align 16
  %5 = getelementptr inbounds i8, i8* %0, i64 8
  %6 = bitcast i8* %5 to %class.anon.139**
  %7 = load %class.anon.139*, %class.anon.139** %6, align 8
  %8 = sext i32 %1 to i64
  %9 = getelementptr inbounds %class.anon.139, %class.anon.139* %7, i64 0, i32 0
  %10 = load void (i8*, i64, i64, i64, i8*)**, void (i8*, i64, i64, i64, i8*)*** %9, align 8
  %11 = load void (i8*, i64, i64, i64, i8*)*, void (i8*, i64, i64, i64, i8*)** %10, align 8
  %12 = icmp eq void (i8*, i64, i64, i64, i8*)* %11, null
  br i1 %12, label %22, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %class.anon.139, %class.anon.139* %7, i64 0, i32 1
  %15 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %14, align 8
  %16 = shl i64 %2, 32
  %17 = ashr exact i64 %16, 32
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %15, i64 0, i32 0, i32 0
  %19 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %18, align 8
  %20 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %19, i64 %17, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  br label %31

22:                                               ; preds = %3
  %23 = getelementptr inbounds %class.anon.139, %class.anon.139* %7, i64 0, i32 2
  %24 = load i8**, i8*** %23, align 8
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds %class.anon.139, %class.anon.139* %7, i64 0, i32 3
  %27 = load i64*, i64** %26, align 8
  %28 = load i64, i64* %27, align 8
  %29 = mul i64 %28, %8
  %30 = getelementptr inbounds i8, i8* %25, i64 %29
  br label %31

31:                                               ; preds = %22, %13
  %32 = phi i8* [ %21, %13 ], [ %30, %22 ]
  %33 = bitcast [4 x float*]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %33) #12
  %34 = getelementptr inbounds %class.anon.139, %class.anon.139* %7, i64 0, i32 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %33, i8 -86, i64 32, i1 false) #12
  %35 = load i64*, i64** %34, align 8
  %36 = load i64, i64* %35, align 8
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %123, label %38

38:                                               ; preds = %31
  %39 = getelementptr inbounds %class.anon.139, %class.anon.139* %7, i64 0, i32 5
  %40 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %39, align 8
  %41 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %40, align 8
  %42 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 0, i32 0, i32 4
  %43 = load i64, i64* %42, align 8
  %44 = mul i64 %43, %8
  %45 = add i64 %36, -1
  %46 = and i64 %36, 3
  %47 = icmp ult i64 %45, 3
  br i1 %47, label %103, label %48

48:                                               ; preds = %38
  %49 = sub i64 %36, %46
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %100, %50 ]
  %52 = phi i64 [ %49, %48 ], [ %101, %50 ]
  %53 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 %51, i32 0, i32 5, i32 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = ptrtoint i8* %54 to i64
  %56 = and i64 %55, 63
  %57 = icmp eq i64 %56, 0
  tail call void @llvm.assume(i1 %57) #12
  %58 = getelementptr inbounds i8, i8* %54, i64 %44
  %59 = ptrtoint i8* %58 to i64
  %60 = and i64 %59, 63
  %61 = icmp eq i64 %60, 0
  tail call void @llvm.assume(i1 %61) #12
  %62 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %51
  %63 = bitcast float** %62 to i8**
  store i8* %58, i8** %63, align 16
  %64 = or i64 %51, 1
  %65 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 %64, i32 0, i32 5, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = ptrtoint i8* %66 to i64
  %68 = and i64 %67, 63
  %69 = icmp eq i64 %68, 0
  tail call void @llvm.assume(i1 %69) #12
  %70 = getelementptr inbounds i8, i8* %66, i64 %44
  %71 = ptrtoint i8* %70 to i64
  %72 = and i64 %71, 63
  %73 = icmp eq i64 %72, 0
  tail call void @llvm.assume(i1 %73) #12
  %74 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %64
  %75 = bitcast float** %74 to i8**
  store i8* %70, i8** %75, align 8
  %76 = or i64 %51, 2
  %77 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 %76, i32 0, i32 5, i32 0, i32 0, i32 0
  %78 = load i8*, i8** %77, align 8
  %79 = ptrtoint i8* %78 to i64
  %80 = and i64 %79, 63
  %81 = icmp eq i64 %80, 0
  tail call void @llvm.assume(i1 %81) #12
  %82 = getelementptr inbounds i8, i8* %78, i64 %44
  %83 = ptrtoint i8* %82 to i64
  %84 = and i64 %83, 63
  %85 = icmp eq i64 %84, 0
  tail call void @llvm.assume(i1 %85) #12
  %86 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %76
  %87 = bitcast float** %86 to i8**
  store i8* %82, i8** %87, align 16
  %88 = or i64 %51, 3
  %89 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 %88, i32 0, i32 5, i32 0, i32 0, i32 0
  %90 = load i8*, i8** %89, align 8
  %91 = ptrtoint i8* %90 to i64
  %92 = and i64 %91, 63
  %93 = icmp eq i64 %92, 0
  tail call void @llvm.assume(i1 %93) #12
  %94 = getelementptr inbounds i8, i8* %90, i64 %44
  %95 = ptrtoint i8* %94 to i64
  %96 = and i64 %95, 63
  %97 = icmp eq i64 %96, 0
  tail call void @llvm.assume(i1 %97) #12
  %98 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %88
  %99 = bitcast float** %98 to i8**
  store i8* %94, i8** %99, align 8
  %100 = add nuw i64 %51, 4
  %101 = add i64 %52, -4
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %50

103:                                              ; preds = %50, %38
  %104 = phi i64 [ 0, %38 ], [ %100, %50 ]
  %105 = icmp eq i64 %46, 0
  br i1 %105, label %123, label %106

106:                                              ; preds = %103, %106
  %107 = phi i64 [ %120, %106 ], [ %104, %103 ]
  %108 = phi i64 [ %121, %106 ], [ %46, %103 ]
  %109 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %41, i64 0, i32 0, i64 %107, i32 0, i32 5, i32 0, i32 0, i32 0
  %110 = load i8*, i8** %109, align 8
  %111 = ptrtoint i8* %110 to i64
  %112 = and i64 %111, 63
  %113 = icmp eq i64 %112, 0
  tail call void @llvm.assume(i1 %113) #12
  %114 = getelementptr inbounds i8, i8* %110, i64 %44
  %115 = ptrtoint i8* %114 to i64
  %116 = and i64 %115, 63
  %117 = icmp eq i64 %116, 0
  tail call void @llvm.assume(i1 %117) #12
  %118 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %107
  %119 = bitcast float** %118 to i8**
  store i8* %114, i8** %119, align 8
  %120 = add nuw i64 %107, 1
  %121 = add i64 %108, -1
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %106, !llvm.loop !99

123:                                              ; preds = %103, %106, %31
  %124 = getelementptr inbounds %class.anon.139, %class.anon.139* %7, i64 0, i32 6
  %125 = load i8*, i8** %124, align 8
  %126 = load i8, i8* %125, align 1, !range !95
  %127 = icmp eq i8 %126, 0
  br i1 %127, label %171, label %128

128:                                              ; preds = %123
  %129 = getelementptr inbounds %class.anon.139, %class.anon.139* %7, i64 0, i32 7
  %130 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %129, align 8
  %131 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %130, i64 0, i32 9
  %132 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %131, align 8
  %133 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %132, i64 0, i32 17, i32 0, i32 0
  %134 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %133, align 8
  %135 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %132, i64 0, i32 17, i32 0, i32 1
  %136 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %135, align 8
  %137 = icmp eq %"struct.jxl::ExtraChannelInfo"* %134, %136
  br i1 %137, label %158, label %140

138:                                              ; preds = %140
  %139 = icmp eq %"struct.jxl::ExtraChannelInfo"* %145, %136
  br i1 %139, label %158, label %140

140:                                              ; preds = %128, %138
  %141 = phi %"struct.jxl::ExtraChannelInfo"* [ %145, %138 ], [ %134, %128 ]
  %142 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %141, i64 0, i32 2
  %143 = load i32, i32* %142, align 4
  %144 = icmp eq i32 %143, 0
  %145 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %141, i64 1
  br i1 %144, label %146, label %138

146:                                              ; preds = %140
  %147 = icmp eq %"struct.jxl::ExtraChannelInfo"* %141, null
  br i1 %147, label %158, label %148

148:                                              ; preds = %146
  %149 = getelementptr inbounds %class.anon.139, %class.anon.139* %7, i64 0, i32 8
  %150 = load %"class.jxl::Plane"**, %"class.jxl::Plane"*** %149, align 8
  %151 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %150, align 8
  %152 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %151, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %153 = load i8*, i8** %152, align 8
  %154 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %151, i64 0, i32 0, i32 4
  %155 = load i64, i64* %154, align 8
  %156 = mul i64 %155, %8
  %157 = getelementptr inbounds i8, i8* %153, i64 %156
  br label %163

158:                                              ; preds = %138, %146, %128
  %159 = getelementptr inbounds %class.anon.139, %class.anon.139* %7, i64 0, i32 9
  %160 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %159, align 8
  %161 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %160, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %162 = load i8*, i8** %161, align 8
  br label %163

163:                                              ; preds = %158, %148
  %164 = phi i8* [ %162, %158 ], [ %157, %148 ]
  %165 = ptrtoint i8* %164 to i64
  %166 = and i64 %165, 63
  %167 = icmp eq i64 %166, 0
  tail call void @llvm.assume(i1 %167) #12
  %168 = add i64 %36, 1
  %169 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %36
  %170 = bitcast float** %169 to i8**
  store i8* %164, i8** %170, align 8
  br label %171

171:                                              ; preds = %163, %123
  %172 = phi i64 [ %168, %163 ], [ %36, %123 ]
  %173 = getelementptr inbounds %class.anon.139, %class.anon.139* %7, i64 0, i32 10
  %174 = load i64*, i64** %173, align 8
  %175 = load i64, i64* %174, align 8
  %176 = icmp eq i64 %172, %175
  br i1 %176, label %180, label %177

177:                                              ; preds = %171
  %178 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 405, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0)) #12
  %179 = tail call zeroext i1 @_ZN3jxl5AbortEv() #15
  unreachable

180:                                              ; preds = %171
  %181 = getelementptr inbounds %class.anon.139, %class.anon.139* %7, i64 0, i32 11
  %182 = load i8*, i8** %181, align 8
  %183 = load i8, i8* %182, align 1, !range !95
  %184 = icmp eq i8 %183, 0
  %185 = getelementptr inbounds %class.anon.139, %class.anon.139* %7, i64 0, i32 12
  %186 = load i64*, i64** %185, align 8
  %187 = load i64, i64* %186, align 8
  %188 = icmp eq i64 %187, 0
  br i1 %184, label %266, label %189

189:                                              ; preds = %180
  br i1 %188, label %320, label %190

190:                                              ; preds = %189
  %191 = icmp eq i64 %172, 0
  %192 = add i64 %172, -1
  %193 = and i64 %172, 3
  %194 = icmp ult i64 %192, 3
  %195 = sub i64 %172, %193
  %196 = icmp eq i64 %193, 0
  br label %197

197:                                              ; preds = %218, %190
  %198 = phi i64 [ 0, %190 ], [ %219, %218 ]
  br i1 %191, label %218, label %199

199:                                              ; preds = %197
  %200 = mul i64 %198, %172
  br i1 %194, label %201, label %221

201:                                              ; preds = %221, %199
  %202 = phi i64 [ 0, %199 ], [ %263, %221 ]
  br i1 %196, label %218, label %203

203:                                              ; preds = %201, %203
  %204 = phi i64 [ %215, %203 ], [ %202, %201 ]
  %205 = phi i64 [ %216, %203 ], [ %193, %201 ]
  %206 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %204
  %207 = load float*, float** %206, align 8, !noalias !100
  %208 = getelementptr inbounds float, float* %207, i64 %198
  %209 = bitcast float* %208 to i32*
  %210 = load i32, i32* %209, align 4, !noalias !100
  %211 = add i64 %204, %200
  %212 = shl i64 %211, 2
  %213 = getelementptr inbounds i8, i8* %32, i64 %212
  %214 = bitcast i8* %213 to i32*
  store i32 %210, i32* %214, align 1, !alias.scope !100
  %215 = add nuw i64 %204, 1
  %216 = add i64 %205, -1
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %218, label %203, !llvm.loop !103

218:                                              ; preds = %201, %203, %197
  %219 = add nuw i64 %198, 1
  %220 = icmp eq i64 %219, %187
  br i1 %220, label %320, label %197

221:                                              ; preds = %199, %221
  %222 = phi i64 [ %263, %221 ], [ 0, %199 ]
  %223 = phi i64 [ %264, %221 ], [ %195, %199 ]
  %224 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %222
  %225 = load float*, float** %224, align 16, !noalias !100
  %226 = getelementptr inbounds float, float* %225, i64 %198
  %227 = bitcast float* %226 to i32*
  %228 = load i32, i32* %227, align 4, !noalias !100
  %229 = add i64 %222, %200
  %230 = shl i64 %229, 2
  %231 = getelementptr inbounds i8, i8* %32, i64 %230
  %232 = bitcast i8* %231 to i32*
  store i32 %228, i32* %232, align 1, !alias.scope !100
  %233 = or i64 %222, 1
  %234 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %233
  %235 = load float*, float** %234, align 8, !noalias !100
  %236 = getelementptr inbounds float, float* %235, i64 %198
  %237 = bitcast float* %236 to i32*
  %238 = load i32, i32* %237, align 4, !noalias !100
  %239 = add i64 %233, %200
  %240 = shl i64 %239, 2
  %241 = getelementptr inbounds i8, i8* %32, i64 %240
  %242 = bitcast i8* %241 to i32*
  store i32 %238, i32* %242, align 1, !alias.scope !100
  %243 = or i64 %222, 2
  %244 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %243
  %245 = load float*, float** %244, align 16, !noalias !100
  %246 = getelementptr inbounds float, float* %245, i64 %198
  %247 = bitcast float* %246 to i32*
  %248 = load i32, i32* %247, align 4, !noalias !100
  %249 = add i64 %243, %200
  %250 = shl i64 %249, 2
  %251 = getelementptr inbounds i8, i8* %32, i64 %250
  %252 = bitcast i8* %251 to i32*
  store i32 %248, i32* %252, align 1, !alias.scope !100
  %253 = or i64 %222, 3
  %254 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %253
  %255 = load float*, float** %254, align 8, !noalias !100
  %256 = getelementptr inbounds float, float* %255, i64 %198
  %257 = bitcast float* %256 to i32*
  %258 = load i32, i32* %257, align 4, !noalias !100
  %259 = add i64 %253, %200
  %260 = shl i64 %259, 2
  %261 = getelementptr inbounds i8, i8* %32, i64 %260
  %262 = bitcast i8* %261 to i32*
  store i32 %258, i32* %262, align 1, !alias.scope !100
  %263 = add nuw i64 %222, 4
  %264 = add i64 %223, -4
  %265 = icmp eq i64 %264, 0
  br i1 %265, label %201, label %221

266:                                              ; preds = %180
  br i1 %188, label %320, label %267

267:                                              ; preds = %266
  %268 = icmp eq i64 %172, 0
  %269 = and i64 %172, 1
  %270 = icmp eq i64 %172, 1
  %271 = sub i64 %172, %269
  %272 = icmp eq i64 %269, 0
  br label %273

273:                                              ; preds = %290, %267
  %274 = phi i64 [ 0, %267 ], [ %291, %290 ]
  br i1 %268, label %290, label %275

275:                                              ; preds = %273
  %276 = mul i64 %274, %172
  br i1 %270, label %277, label %293

277:                                              ; preds = %293, %275
  %278 = phi i64 [ 0, %275 ], [ %317, %293 ]
  br i1 %272, label %290, label %279

279:                                              ; preds = %277
  %280 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %278
  %281 = load float*, float** %280, align 8, !noalias !104
  %282 = getelementptr inbounds float, float* %281, i64 %274
  %283 = bitcast float* %282 to i32*
  %284 = load i32, i32* %283, align 4, !noalias !104
  %285 = add i64 %278, %276
  %286 = shl i64 %285, 2
  %287 = getelementptr inbounds i8, i8* %32, i64 %286
  %288 = tail call i32 @llvm.bswap.i32(i32 %284) #12
  %289 = bitcast i8* %287 to i32*
  store i32 %288, i32* %289, align 1, !alias.scope !104
  br label %290

290:                                              ; preds = %279, %277, %273
  %291 = add nuw i64 %274, 1
  %292 = icmp eq i64 %291, %187
  br i1 %292, label %320, label %273

293:                                              ; preds = %275, %293
  %294 = phi i64 [ %317, %293 ], [ 0, %275 ]
  %295 = phi i64 [ %318, %293 ], [ %271, %275 ]
  %296 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %294
  %297 = load float*, float** %296, align 16, !noalias !104
  %298 = getelementptr inbounds float, float* %297, i64 %274
  %299 = bitcast float* %298 to i32*
  %300 = load i32, i32* %299, align 4, !noalias !104
  %301 = add i64 %294, %276
  %302 = shl i64 %301, 2
  %303 = getelementptr inbounds i8, i8* %32, i64 %302
  %304 = tail call i32 @llvm.bswap.i32(i32 %300) #12
  %305 = bitcast i8* %303 to i32*
  store i32 %304, i32* %305, align 1, !alias.scope !104
  %306 = or i64 %294, 1
  %307 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %306
  %308 = load float*, float** %307, align 8, !noalias !104
  %309 = getelementptr inbounds float, float* %308, i64 %274
  %310 = bitcast float* %309 to i32*
  %311 = load i32, i32* %310, align 4, !noalias !104
  %312 = add i64 %306, %276
  %313 = shl i64 %312, 2
  %314 = getelementptr inbounds i8, i8* %32, i64 %313
  %315 = tail call i32 @llvm.bswap.i32(i32 %311) #12
  %316 = bitcast i8* %314 to i32*
  store i32 %315, i32* %316, align 1, !alias.scope !104
  %317 = add nuw i64 %294, 2
  %318 = add i64 %295, -2
  %319 = icmp eq i64 %318, 0
  br i1 %319, label %277, label %293

320:                                              ; preds = %218, %290, %266, %189
  %321 = load void (i8*, i64, i64, i64, i8*)**, void (i8*, i64, i64, i64, i8*)*** %9, align 8
  %322 = load void (i8*, i64, i64, i64, i8*)*, void (i8*, i64, i64, i64, i8*)** %321, align 8
  %323 = icmp eq void (i8*, i64, i64, i64, i8*)* %322, null
  br i1 %323, label %330, label %324

324:                                              ; preds = %320
  %325 = getelementptr inbounds %class.anon.139, %class.anon.139* %7, i64 0, i32 13
  %326 = load i8**, i8*** %325, align 8
  %327 = load i8*, i8** %326, align 8
  %328 = load i64*, i64** %185, align 8
  %329 = load i64, i64* %328, align 8
  tail call void %322(i8* %327, i64 0, i64 %8, i64 %329, i8* %32) #12
  br label %330

330:                                              ; preds = %320, %324
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %33) #12
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #9

; Function Attrs: nounwind ssp uwtable
define internal i32 @"_ZN3jxl10ThreadPool12RunCallStateIZNS_17ConvertToExternalERKNS_11ImageBundleEmbm13JxlEndiannessmPS0_PvmPFvS7_mmmPKvES7_NS_11OrientationEE3$_4ZNS_17ConvertToExternalES4_mbmS5_mS6_S7_mSB_S7_SC_E3$_5E12CallInitFuncES7_m"(i8* nocapture readonly, i64) #6 align 2 {
  %3 = alloca %"class.jxl::Plane.140", align 8
  %4 = bitcast i8* %0 to %class.anon.141**
  %5 = load %class.anon.141*, %class.anon.141** %4, align 8
  %6 = bitcast %"class.jxl::Plane.140"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #12
  %7 = getelementptr inbounds %class.anon.141, %class.anon.141* %5, i64 0, i32 1
  %8 = load i64*, i64** %7, align 8
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %class.anon.141, %class.anon.141* %5, i64 0, i32 2
  %11 = load i64*, i64** %10, align 8
  %12 = load i64, i64* %11, align 8
  %13 = mul i64 %12, %1
  %14 = getelementptr inbounds %"class.jxl::Plane.140", %"class.jxl::Plane.140"* %3, i64 0, i32 0
  call void @_ZN3jxl9PlaneBaseC2Emmm(%"struct.jxl::PlaneBase"* nonnull %14, i64 %9, i64 %13, i64 4) #12
  %15 = getelementptr inbounds %class.anon.141, %class.anon.141* %5, i64 0, i32 0
  %16 = load %"class.jxl::Plane.140"*, %"class.jxl::Plane.140"** %15, align 8
  %17 = bitcast %"class.jxl::Plane.140"* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* nonnull align 8 %6, i64 24, i1 false) #12
  %18 = getelementptr inbounds %"class.jxl::Plane.140", %"class.jxl::Plane.140"* %16, i64 0, i32 0, i32 5
  %19 = getelementptr inbounds %"class.jxl::Plane.140", %"class.jxl::Plane.140"* %3, i64 0, i32 0, i32 5
  %20 = getelementptr inbounds %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.118"* %19, i64 0, i32 0, i32 0, i32 0
  %21 = bitcast %"class.std::__1::unique_ptr.118"* %19 to i64*
  %22 = load i64, i64* %21, align 8
  store i8* null, i8** %20, align 8
  %23 = getelementptr inbounds %"class.std::__1::unique_ptr.118", %"class.std::__1::unique_ptr.118"* %18, i64 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = bitcast %"class.std::__1::unique_ptr.118"* %18 to i64*
  store i64 %22, i64* %25, align 8
  %26 = icmp eq i8* %24, null
  br i1 %26, label %28, label %27

27:                                               ; preds = %2
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %24) #12
  br label %28

28:                                               ; preds = %27, %2
  %29 = getelementptr inbounds %"class.jxl::Plane.140", %"class.jxl::Plane.140"* %3, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  store i8* null, i8** %29, align 8
  %31 = icmp eq i8* %30, null
  br i1 %31, label %33, label %32

32:                                               ; preds = %28
  call void @_ZN3jxl12CacheAligned4FreeEPKv(i8* nonnull %30) #12
  br label %33

33:                                               ; preds = %32, %28
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #12
  %34 = getelementptr inbounds %class.anon.141, %class.anon.141* %5, i64 0, i32 3
  %35 = load %class.anon*, %class.anon** %34, align 8
  %36 = getelementptr inbounds %class.anon, %class.anon* %35, i64 0, i32 0
  %37 = load void (i8*, i64, i64, i64, i8*)**, void (i8*, i64, i64, i64, i8*)*** %36, align 8
  %38 = load void (i8*, i64, i64, i64, i8*)*, void (i8*, i64, i64, i64, i8*)** %37, align 8
  %39 = icmp eq void (i8*, i64, i64, i64, i8*)* %38, null
  br i1 %39, label %102, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds %class.anon, %class.anon* %35, i64 0, i32 1
  %42 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %41, align 8
  %43 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %42, i64 0, i32 0, i32 1
  %44 = bitcast %"class.std::__1::vector.43"** %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = bitcast %"class.std::__1::vector"* %42 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = sub i64 %45, %47
  %49 = sdiv exact i64 %48, 24
  %50 = icmp ult i64 %49, %1
  %51 = inttoptr i64 %47 to %"class.std::__1::vector.43"*
  %52 = inttoptr i64 %45 to %"class.std::__1::vector.43"*
  br i1 %50, label %53, label %55

53:                                               ; preds = %40
  %54 = sub i64 %1, %49
  call void @_ZNSt3__16vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8__appendEm(%"class.std::__1::vector"* %42, i64 %54) #12
  br label %75

55:                                               ; preds = %40
  %56 = icmp ugt i64 %49, %1
  br i1 %56, label %57, label %73

57:                                               ; preds = %55
  %58 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %51, i64 %1
  %59 = icmp eq %"class.std::__1::vector.43"* %58, %52
  br i1 %59, label %72, label %60

60:                                               ; preds = %57, %70
  %61 = phi %"class.std::__1::vector.43"* [ %62, %70 ], [ %52, %57 ]
  %62 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %61, i64 -1
  %63 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %62, i64 0, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = icmp eq i8* %64, null
  br i1 %65, label %70, label %66

66:                                               ; preds = %60
  %67 = ptrtoint i8* %64 to i64
  %68 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %61, i64 -1, i32 0, i32 1
  %69 = bitcast i8** %68 to i64*
  store i64 %67, i64* %69, align 8
  call void @_ZdlPv(i8* nonnull %64) #14
  br label %70

70:                                               ; preds = %66, %60
  %71 = icmp eq %"class.std::__1::vector.43"* %62, %58
  br i1 %71, label %72, label %60

72:                                               ; preds = %70, %57
  store %"class.std::__1::vector.43"* %58, %"class.std::__1::vector.43"** %43, align 8
  br label %73

73:                                               ; preds = %72, %55
  %74 = icmp eq i64 %1, 0
  br i1 %74, label %102, label %75

75:                                               ; preds = %73, %53
  %76 = getelementptr inbounds %class.anon, %class.anon* %35, i64 0, i32 2
  br label %77

77:                                               ; preds = %99, %75
  %78 = phi i64 [ 0, %75 ], [ %100, %99 ]
  %79 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %41, align 8
  %80 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %79, i64 0, i32 0, i32 0
  %81 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %80, align 8
  %82 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %81, i64 %78
  %83 = load i64*, i64** %76, align 8
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %81, i64 %78, i32 0, i32 1
  %86 = bitcast i8** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = bitcast %"class.std::__1::vector.43"* %82 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = sub i64 %87, %89
  %91 = icmp ugt i64 %84, %90
  %92 = inttoptr i64 %89 to i8*
  br i1 %91, label %93, label %95

93:                                               ; preds = %77
  %94 = sub i64 %84, %90
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector.43"* %82, i64 %94) #12
  br label %99

95:                                               ; preds = %77
  %96 = icmp ult i64 %84, %90
  br i1 %96, label %97, label %99

97:                                               ; preds = %95
  %98 = getelementptr inbounds i8, i8* %92, i64 %84
  store i8* %98, i8** %85, align 8
  br label %99

99:                                               ; preds = %97, %95, %93
  %100 = add nuw i64 %78, 1
  %101 = icmp eq i64 %100, %1
  br i1 %101, label %102, label %77

102:                                              ; preds = %99, %33, %73
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal void @"_ZN3jxl10ThreadPool12RunCallStateIZNS_17ConvertToExternalERKNS_11ImageBundleEmbm13JxlEndiannessmPS0_PvmPFvS7_mmmPKvES7_NS_11OrientationEE3$_4ZNS_17ConvertToExternalES4_mbmS5_mS6_S7_mSB_S7_SC_E3$_5E12CallDataFuncES7_jm"(i8* nocapture readonly, i32, i64) #6 align 2 {
  %4 = alloca [4 x float*], align 16
  %5 = alloca [4 x i32*], align 16
  %6 = getelementptr inbounds i8, i8* %0, i64 8
  %7 = bitcast i8* %6 to %class.anon.142**
  %8 = load %class.anon.142*, %class.anon.142** %7, align 8
  %9 = sext i32 %1 to i64
  %10 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 0
  %11 = load void (i8*, i64, i64, i64, i8*)**, void (i8*, i64, i64, i64, i8*)*** %10, align 8
  %12 = load void (i8*, i64, i64, i64, i8*)*, void (i8*, i64, i64, i64, i8*)** %11, align 8
  %13 = icmp eq void (i8*, i64, i64, i64, i8*)* %12, null
  br i1 %13, label %23, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 1
  %16 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %15, align 8
  %17 = shl i64 %2, 32
  %18 = ashr exact i64 %17, 32
  %19 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %16, i64 0, i32 0, i32 0
  %20 = load %"class.std::__1::vector.43"*, %"class.std::__1::vector.43"** %19, align 8
  %21 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %20, i64 %18, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  br label %32

23:                                               ; preds = %3
  %24 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 2
  %25 = load i8**, i8*** %24, align 8
  %26 = load i8*, i8** %25, align 8
  %27 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 3
  %28 = load i64*, i64** %27, align 8
  %29 = load i64, i64* %28, align 8
  %30 = mul i64 %29, %9
  %31 = getelementptr inbounds i8, i8* %26, i64 %30
  br label %32

32:                                               ; preds = %23, %14
  %33 = phi i8* [ %22, %14 ], [ %31, %23 ]
  %34 = bitcast [4 x float*]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %34) #12
  %35 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %34, i8 -86, i64 32, i1 false) #12
  %36 = load i64*, i64** %35, align 8
  %37 = load i64, i64* %36, align 8
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %124, label %39

39:                                               ; preds = %32
  %40 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 5
  %41 = load %"class.jxl::Image3"**, %"class.jxl::Image3"*** %40, align 8
  %42 = load %"class.jxl::Image3"*, %"class.jxl::Image3"** %41, align 8
  %43 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %42, i64 0, i32 0, i64 0, i32 0, i32 4
  %44 = load i64, i64* %43, align 8
  %45 = mul i64 %44, %9
  %46 = add i64 %37, -1
  %47 = and i64 %37, 3
  %48 = icmp ult i64 %46, 3
  br i1 %48, label %104, label %49

49:                                               ; preds = %39
  %50 = sub i64 %37, %47
  br label %51

51:                                               ; preds = %51, %49
  %52 = phi i64 [ 0, %49 ], [ %101, %51 ]
  %53 = phi i64 [ %50, %49 ], [ %102, %51 ]
  %54 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %42, i64 0, i32 0, i64 %52, i32 0, i32 5, i32 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = ptrtoint i8* %55 to i64
  %57 = and i64 %56, 63
  %58 = icmp eq i64 %57, 0
  tail call void @llvm.assume(i1 %58) #12
  %59 = getelementptr inbounds i8, i8* %55, i64 %45
  %60 = ptrtoint i8* %59 to i64
  %61 = and i64 %60, 63
  %62 = icmp eq i64 %61, 0
  tail call void @llvm.assume(i1 %62) #12
  %63 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %52
  %64 = bitcast float** %63 to i8**
  store i8* %59, i8** %64, align 16
  %65 = or i64 %52, 1
  %66 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %42, i64 0, i32 0, i64 %65, i32 0, i32 5, i32 0, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = ptrtoint i8* %67 to i64
  %69 = and i64 %68, 63
  %70 = icmp eq i64 %69, 0
  tail call void @llvm.assume(i1 %70) #12
  %71 = getelementptr inbounds i8, i8* %67, i64 %45
  %72 = ptrtoint i8* %71 to i64
  %73 = and i64 %72, 63
  %74 = icmp eq i64 %73, 0
  tail call void @llvm.assume(i1 %74) #12
  %75 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %65
  %76 = bitcast float** %75 to i8**
  store i8* %71, i8** %76, align 8
  %77 = or i64 %52, 2
  %78 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %42, i64 0, i32 0, i64 %77, i32 0, i32 5, i32 0, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = ptrtoint i8* %79 to i64
  %81 = and i64 %80, 63
  %82 = icmp eq i64 %81, 0
  tail call void @llvm.assume(i1 %82) #12
  %83 = getelementptr inbounds i8, i8* %79, i64 %45
  %84 = ptrtoint i8* %83 to i64
  %85 = and i64 %84, 63
  %86 = icmp eq i64 %85, 0
  tail call void @llvm.assume(i1 %86) #12
  %87 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %77
  %88 = bitcast float** %87 to i8**
  store i8* %83, i8** %88, align 16
  %89 = or i64 %52, 3
  %90 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %42, i64 0, i32 0, i64 %89, i32 0, i32 5, i32 0, i32 0, i32 0
  %91 = load i8*, i8** %90, align 8
  %92 = ptrtoint i8* %91 to i64
  %93 = and i64 %92, 63
  %94 = icmp eq i64 %93, 0
  tail call void @llvm.assume(i1 %94) #12
  %95 = getelementptr inbounds i8, i8* %91, i64 %45
  %96 = ptrtoint i8* %95 to i64
  %97 = and i64 %96, 63
  %98 = icmp eq i64 %97, 0
  tail call void @llvm.assume(i1 %98) #12
  %99 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %89
  %100 = bitcast float** %99 to i8**
  store i8* %95, i8** %100, align 8
  %101 = add nuw i64 %52, 4
  %102 = add i64 %53, -4
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %51

104:                                              ; preds = %51, %39
  %105 = phi i64 [ 0, %39 ], [ %101, %51 ]
  %106 = icmp eq i64 %47, 0
  br i1 %106, label %124, label %107

107:                                              ; preds = %104, %107
  %108 = phi i64 [ %121, %107 ], [ %105, %104 ]
  %109 = phi i64 [ %122, %107 ], [ %47, %104 ]
  %110 = getelementptr inbounds %"class.jxl::Image3", %"class.jxl::Image3"* %42, i64 0, i32 0, i64 %108, i32 0, i32 5, i32 0, i32 0, i32 0
  %111 = load i8*, i8** %110, align 8
  %112 = ptrtoint i8* %111 to i64
  %113 = and i64 %112, 63
  %114 = icmp eq i64 %113, 0
  tail call void @llvm.assume(i1 %114) #12
  %115 = getelementptr inbounds i8, i8* %111, i64 %45
  %116 = ptrtoint i8* %115 to i64
  %117 = and i64 %116, 63
  %118 = icmp eq i64 %117, 0
  tail call void @llvm.assume(i1 %118) #12
  %119 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %108
  %120 = bitcast float** %119 to i8**
  store i8* %115, i8** %120, align 8
  %121 = add nuw i64 %108, 1
  %122 = add i64 %109, -1
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %124, label %107, !llvm.loop !107

124:                                              ; preds = %104, %107, %32
  %125 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 6
  %126 = load i8*, i8** %125, align 8
  %127 = load i8, i8* %126, align 1, !range !95
  %128 = icmp eq i8 %127, 0
  br i1 %128, label %172, label %129

129:                                              ; preds = %124
  %130 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 7
  %131 = load %"class.jxl::ImageBundle"*, %"class.jxl::ImageBundle"** %130, align 8
  %132 = getelementptr inbounds %"class.jxl::ImageBundle", %"class.jxl::ImageBundle"* %131, i64 0, i32 9
  %133 = load %"struct.jxl::ImageMetadata"*, %"struct.jxl::ImageMetadata"** %132, align 8
  %134 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %133, i64 0, i32 17, i32 0, i32 0
  %135 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %134, align 8
  %136 = getelementptr inbounds %"struct.jxl::ImageMetadata", %"struct.jxl::ImageMetadata"* %133, i64 0, i32 17, i32 0, i32 1
  %137 = load %"struct.jxl::ExtraChannelInfo"*, %"struct.jxl::ExtraChannelInfo"** %136, align 8
  %138 = icmp eq %"struct.jxl::ExtraChannelInfo"* %135, %137
  br i1 %138, label %159, label %141

139:                                              ; preds = %141
  %140 = icmp eq %"struct.jxl::ExtraChannelInfo"* %146, %137
  br i1 %140, label %159, label %141

141:                                              ; preds = %129, %139
  %142 = phi %"struct.jxl::ExtraChannelInfo"* [ %146, %139 ], [ %135, %129 ]
  %143 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %142, i64 0, i32 2
  %144 = load i32, i32* %143, align 4
  %145 = icmp eq i32 %144, 0
  %146 = getelementptr inbounds %"struct.jxl::ExtraChannelInfo", %"struct.jxl::ExtraChannelInfo"* %142, i64 1
  br i1 %145, label %147, label %139

147:                                              ; preds = %141
  %148 = icmp eq %"struct.jxl::ExtraChannelInfo"* %142, null
  br i1 %148, label %159, label %149

149:                                              ; preds = %147
  %150 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 8
  %151 = load %"class.jxl::Plane"**, %"class.jxl::Plane"*** %150, align 8
  %152 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %151, align 8
  %153 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %152, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %154 = load i8*, i8** %153, align 8
  %155 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %152, i64 0, i32 0, i32 4
  %156 = load i64, i64* %155, align 8
  %157 = mul i64 %156, %9
  %158 = getelementptr inbounds i8, i8* %154, i64 %157
  br label %164

159:                                              ; preds = %139, %147, %129
  %160 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 9
  %161 = load %"class.jxl::Plane"*, %"class.jxl::Plane"** %160, align 8
  %162 = getelementptr inbounds %"class.jxl::Plane", %"class.jxl::Plane"* %161, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %163 = load i8*, i8** %162, align 8
  br label %164

164:                                              ; preds = %159, %149
  %165 = phi i8* [ %163, %159 ], [ %158, %149 ]
  %166 = ptrtoint i8* %165 to i64
  %167 = and i64 %166, 63
  %168 = icmp eq i64 %167, 0
  tail call void @llvm.assume(i1 %168) #12
  %169 = add i64 %37, 1
  %170 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %37
  %171 = bitcast float** %170 to i8**
  store i8* %165, i8** %171, align 8
  br label %172

172:                                              ; preds = %164, %124
  %173 = phi i64 [ %169, %164 ], [ %37, %124 ]
  %174 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 10
  %175 = load i64*, i64** %174, align 8
  %176 = load i64, i64* %175, align 8
  %177 = icmp eq i64 %173, %176
  br i1 %177, label %181, label %178

178:                                              ; preds = %172
  %179 = tail call zeroext i1 (i8*, ...) @_ZN3jxl5DebugEPKcz(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 445, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0)) #12
  %180 = tail call zeroext i1 @_ZN3jxl5AbortEv() #15
  unreachable

181:                                              ; preds = %172
  %182 = bitcast [4 x i32*]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %182) #12
  %183 = icmp eq i64 %173, 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %182, i8 -86, i64 32, i1 false) #12
  br i1 %183, label %191, label %184

184:                                              ; preds = %181
  %185 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 11
  %186 = shl i64 %2, 32
  %187 = ashr exact i64 %186, 32
  %188 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 12
  %189 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 13
  %190 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 14
  br label %196

191:                                              ; preds = %196, %181
  %192 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 14
  %193 = load i64*, i64** %192, align 8
  %194 = load i64, i64* %193, align 8
  %195 = icmp ult i64 %194, 9
  br i1 %195, label %233, label %303

196:                                              ; preds = %230, %184
  %197 = phi i64 [ %173, %184 ], [ %232, %230 ]
  %198 = phi i64 [ 0, %184 ], [ %228, %230 ]
  %199 = load %"class.jxl::Plane.140"*, %"class.jxl::Plane.140"** %185, align 8
  %200 = mul i64 %197, %187
  %201 = add i64 %200, %198
  %202 = getelementptr inbounds %"class.jxl::Plane.140", %"class.jxl::Plane.140"* %199, i64 0, i32 0, i32 5, i32 0, i32 0, i32 0
  %203 = load i8*, i8** %202, align 8
  %204 = getelementptr inbounds %"class.jxl::Plane.140", %"class.jxl::Plane.140"* %199, i64 0, i32 0, i32 4
  %205 = load i64, i64* %204, align 8
  %206 = mul i64 %205, %201
  %207 = getelementptr inbounds i8, i8* %203, i64 %206
  %208 = ptrtoint i8* %207 to i64
  %209 = and i64 %208, 63
  %210 = icmp eq i64 %209, 0
  tail call void @llvm.assume(i1 %210) #12
  %211 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %198
  %212 = bitcast i32** %211 to i8**
  store i8* %207, i8** %212, align 8
  %213 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %214 = and i32 %213, 2225
  %215 = tail call i32 @llvm.cttz.i32(i32 %214, i1 true) #12, !range !98
  %216 = zext i32 %215 to i64
  %217 = getelementptr inbounds [12 x void (float*, i32*, i64, float, i64)*], [12 x void (float*, i32*, i64, float, i64)*]* @_ZN3jxlL30FloatToU32HighwayDispatchTableE, i64 0, i64 %216
  %218 = load void (float*, i32*, i64, float, i64)*, void (float*, i32*, i64, float, i64)** %217, align 8
  %219 = getelementptr inbounds [4 x float*], [4 x float*]* %4, i64 0, i64 %198
  %220 = load float*, float** %219, align 8
  %221 = load i32*, i32** %211, align 8
  %222 = load i64*, i64** %188, align 8
  %223 = load i64, i64* %222, align 8
  %224 = load float*, float** %189, align 8
  %225 = load float, float* %224, align 4
  %226 = load i64*, i64** %190, align 8
  %227 = load i64, i64* %226, align 8
  tail call void %218(float* %220, i32* %221, i64 %223, float %225, i64 %227) #12
  %228 = add nuw i64 %198, 1
  %229 = icmp eq i64 %228, %173
  br i1 %229, label %191, label %230

230:                                              ; preds = %196
  %231 = load i64*, i64** %174, align 8
  %232 = load i64, i64* %231, align 8
  br label %196

233:                                              ; preds = %191
  %234 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 12
  %235 = load i64*, i64** %234, align 8
  %236 = load i64, i64* %235, align 8
  %237 = icmp eq i64 %236, 0
  br i1 %237, label %689, label %238

238:                                              ; preds = %233
  %239 = add i64 %173, -1
  %240 = and i64 %173, 3
  %241 = icmp ult i64 %239, 3
  %242 = sub i64 %173, %240
  %243 = icmp eq i64 %240, 0
  br label %244

244:                                              ; preds = %238, %263
  %245 = phi i64 [ %264, %263 ], [ 0, %238 ]
  br i1 %183, label %263, label %246

246:                                              ; preds = %244
  %247 = mul i64 %245, %173
  br i1 %241, label %248, label %266

248:                                              ; preds = %266, %246
  %249 = phi i64 [ 0, %246 ], [ %300, %266 ]
  br i1 %243, label %263, label %250

250:                                              ; preds = %248, %250
  %251 = phi i64 [ %260, %250 ], [ %249, %248 ]
  %252 = phi i64 [ %261, %250 ], [ %240, %248 ]
  %253 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %251
  %254 = load i32*, i32** %253, align 8, !noalias !108
  %255 = getelementptr inbounds i32, i32* %254, i64 %245
  %256 = load i32, i32* %255, align 4, !noalias !108
  %257 = add i64 %251, %247
  %258 = getelementptr inbounds i8, i8* %33, i64 %257
  %259 = trunc i32 %256 to i8
  store i8 %259, i8* %258, align 1, !alias.scope !108
  %260 = add nuw i64 %251, 1
  %261 = add i64 %252, -1
  %262 = icmp eq i64 %261, 0
  br i1 %262, label %263, label %250, !llvm.loop !111

263:                                              ; preds = %248, %250, %244
  %264 = add nuw i64 %245, 1
  %265 = icmp eq i64 %264, %236
  br i1 %265, label %689, label %244

266:                                              ; preds = %246, %266
  %267 = phi i64 [ %300, %266 ], [ 0, %246 ]
  %268 = phi i64 [ %301, %266 ], [ %242, %246 ]
  %269 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %267
  %270 = load i32*, i32** %269, align 16, !noalias !108
  %271 = getelementptr inbounds i32, i32* %270, i64 %245
  %272 = load i32, i32* %271, align 4, !noalias !108
  %273 = add i64 %267, %247
  %274 = getelementptr inbounds i8, i8* %33, i64 %273
  %275 = trunc i32 %272 to i8
  store i8 %275, i8* %274, align 1, !alias.scope !108
  %276 = or i64 %267, 1
  %277 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %276
  %278 = load i32*, i32** %277, align 8, !noalias !108
  %279 = getelementptr inbounds i32, i32* %278, i64 %245
  %280 = load i32, i32* %279, align 4, !noalias !108
  %281 = add i64 %276, %247
  %282 = getelementptr inbounds i8, i8* %33, i64 %281
  %283 = trunc i32 %280 to i8
  store i8 %283, i8* %282, align 1, !alias.scope !108
  %284 = or i64 %267, 2
  %285 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %284
  %286 = load i32*, i32** %285, align 16, !noalias !108
  %287 = getelementptr inbounds i32, i32* %286, i64 %245
  %288 = load i32, i32* %287, align 4, !noalias !108
  %289 = add i64 %284, %247
  %290 = getelementptr inbounds i8, i8* %33, i64 %289
  %291 = trunc i32 %288 to i8
  store i8 %291, i8* %290, align 1, !alias.scope !108
  %292 = or i64 %267, 3
  %293 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %292
  %294 = load i32*, i32** %293, align 8, !noalias !108
  %295 = getelementptr inbounds i32, i32* %294, i64 %245
  %296 = load i32, i32* %295, align 4, !noalias !108
  %297 = add i64 %292, %247
  %298 = getelementptr inbounds i8, i8* %33, i64 %297
  %299 = trunc i32 %296 to i8
  store i8 %299, i8* %298, align 1, !alias.scope !108
  %300 = add nuw i64 %267, 4
  %301 = add i64 %268, -4
  %302 = icmp eq i64 %301, 0
  br i1 %302, label %248, label %266

303:                                              ; preds = %191
  %304 = icmp ult i64 %194, 17
  br i1 %304, label %305, label %426

305:                                              ; preds = %303
  %306 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 15
  %307 = load i8*, i8** %306, align 8
  %308 = load i8, i8* %307, align 1, !range !95
  %309 = icmp eq i8 %308, 0
  %310 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 12
  %311 = load i64*, i64** %310, align 8
  %312 = load i64, i64* %311, align 8
  %313 = icmp eq i64 %312, 0
  br i1 %309, label %370, label %314

314:                                              ; preds = %305
  br i1 %313, label %689, label %315

315:                                              ; preds = %314
  %316 = and i64 %173, 1
  %317 = icmp eq i64 %173, 1
  %318 = sub i64 %173, %316
  %319 = icmp eq i64 %316, 0
  br label %320

320:                                              ; preds = %315, %338
  %321 = phi i64 [ %339, %338 ], [ 0, %315 ]
  br i1 %183, label %338, label %322

322:                                              ; preds = %320
  %323 = mul i64 %321, %173
  br i1 %317, label %324, label %341

324:                                              ; preds = %341, %322
  %325 = phi i64 [ 0, %322 ], [ %367, %341 ]
  br i1 %319, label %338, label %326

326:                                              ; preds = %324
  %327 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %325
  %328 = load i32*, i32** %327, align 8, !noalias !112
  %329 = getelementptr inbounds i32, i32* %328, i64 %321
  %330 = load i32, i32* %329, align 4, !noalias !112
  %331 = add i64 %325, %323
  %332 = shl i64 %331, 1
  %333 = getelementptr inbounds i8, i8* %33, i64 %332
  %334 = lshr i32 %330, 8
  %335 = trunc i32 %334 to i8
  %336 = getelementptr inbounds i8, i8* %333, i64 1
  store i8 %335, i8* %336, align 1, !alias.scope !112
  %337 = trunc i32 %330 to i8
  store i8 %337, i8* %333, align 1, !alias.scope !112
  br label %338

338:                                              ; preds = %326, %324, %320
  %339 = add nuw i64 %321, 1
  %340 = icmp eq i64 %339, %312
  br i1 %340, label %689, label %320

341:                                              ; preds = %322, %341
  %342 = phi i64 [ %367, %341 ], [ 0, %322 ]
  %343 = phi i64 [ %368, %341 ], [ %318, %322 ]
  %344 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %342
  %345 = load i32*, i32** %344, align 16, !noalias !112
  %346 = getelementptr inbounds i32, i32* %345, i64 %321
  %347 = load i32, i32* %346, align 4, !noalias !112
  %348 = add i64 %342, %323
  %349 = shl i64 %348, 1
  %350 = getelementptr inbounds i8, i8* %33, i64 %349
  %351 = lshr i32 %347, 8
  %352 = trunc i32 %351 to i8
  %353 = getelementptr inbounds i8, i8* %350, i64 1
  store i8 %352, i8* %353, align 1, !alias.scope !112
  %354 = trunc i32 %347 to i8
  store i8 %354, i8* %350, align 1, !alias.scope !112
  %355 = or i64 %342, 1
  %356 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %355
  %357 = load i32*, i32** %356, align 8, !noalias !112
  %358 = getelementptr inbounds i32, i32* %357, i64 %321
  %359 = load i32, i32* %358, align 4, !noalias !112
  %360 = add i64 %355, %323
  %361 = shl i64 %360, 1
  %362 = getelementptr inbounds i8, i8* %33, i64 %361
  %363 = lshr i32 %359, 8
  %364 = trunc i32 %363 to i8
  %365 = getelementptr inbounds i8, i8* %362, i64 1
  store i8 %364, i8* %365, align 1, !alias.scope !112
  %366 = trunc i32 %359 to i8
  store i8 %366, i8* %362, align 1, !alias.scope !112
  %367 = add nuw i64 %342, 2
  %368 = add i64 %343, -2
  %369 = icmp eq i64 %368, 0
  br i1 %369, label %324, label %341

370:                                              ; preds = %305
  br i1 %313, label %689, label %371

371:                                              ; preds = %370
  %372 = and i64 %173, 1
  %373 = icmp eq i64 %173, 1
  %374 = sub i64 %173, %372
  %375 = icmp eq i64 %372, 0
  br label %376

376:                                              ; preds = %371, %394
  %377 = phi i64 [ %395, %394 ], [ 0, %371 ]
  br i1 %183, label %394, label %378

378:                                              ; preds = %376
  %379 = mul i64 %377, %173
  br i1 %373, label %380, label %397

380:                                              ; preds = %397, %378
  %381 = phi i64 [ 0, %378 ], [ %423, %397 ]
  br i1 %375, label %394, label %382

382:                                              ; preds = %380
  %383 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %381
  %384 = load i32*, i32** %383, align 8, !noalias !115
  %385 = getelementptr inbounds i32, i32* %384, i64 %377
  %386 = load i32, i32* %385, align 4, !noalias !115
  %387 = add i64 %381, %379
  %388 = shl i64 %387, 1
  %389 = getelementptr inbounds i8, i8* %33, i64 %388
  %390 = lshr i32 %386, 8
  %391 = trunc i32 %390 to i8
  store i8 %391, i8* %389, align 1, !alias.scope !115
  %392 = trunc i32 %386 to i8
  %393 = getelementptr inbounds i8, i8* %389, i64 1
  store i8 %392, i8* %393, align 1, !alias.scope !115
  br label %394

394:                                              ; preds = %382, %380, %376
  %395 = add nuw i64 %377, 1
  %396 = icmp eq i64 %395, %312
  br i1 %396, label %689, label %376

397:                                              ; preds = %378, %397
  %398 = phi i64 [ %423, %397 ], [ 0, %378 ]
  %399 = phi i64 [ %424, %397 ], [ %374, %378 ]
  %400 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %398
  %401 = load i32*, i32** %400, align 16, !noalias !115
  %402 = getelementptr inbounds i32, i32* %401, i64 %377
  %403 = load i32, i32* %402, align 4, !noalias !115
  %404 = add i64 %398, %379
  %405 = shl i64 %404, 1
  %406 = getelementptr inbounds i8, i8* %33, i64 %405
  %407 = lshr i32 %403, 8
  %408 = trunc i32 %407 to i8
  store i8 %408, i8* %406, align 1, !alias.scope !115
  %409 = trunc i32 %403 to i8
  %410 = getelementptr inbounds i8, i8* %406, i64 1
  store i8 %409, i8* %410, align 1, !alias.scope !115
  %411 = or i64 %398, 1
  %412 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %411
  %413 = load i32*, i32** %412, align 8, !noalias !115
  %414 = getelementptr inbounds i32, i32* %413, i64 %377
  %415 = load i32, i32* %414, align 4, !noalias !115
  %416 = add i64 %411, %379
  %417 = shl i64 %416, 1
  %418 = getelementptr inbounds i8, i8* %33, i64 %417
  %419 = lshr i32 %415, 8
  %420 = trunc i32 %419 to i8
  store i8 %420, i8* %418, align 1, !alias.scope !115
  %421 = trunc i32 %415 to i8
  %422 = getelementptr inbounds i8, i8* %418, i64 1
  store i8 %421, i8* %422, align 1, !alias.scope !115
  %423 = add nuw i64 %398, 2
  %424 = add i64 %399, -2
  %425 = icmp eq i64 %424, 0
  br i1 %425, label %380, label %397

426:                                              ; preds = %303
  %427 = icmp ult i64 %194, 25
  %428 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 15
  %429 = load i8*, i8** %428, align 8
  %430 = load i8, i8* %429, align 1, !range !95
  %431 = icmp ne i8 %430, 0
  %432 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 12
  %433 = load i64*, i64** %432, align 8
  %434 = load i64, i64* %433, align 8
  %435 = icmp eq i64 %434, 0
  br i1 %427, label %436, label %567

436:                                              ; preds = %426
  br i1 %431, label %437, label %502

437:                                              ; preds = %436
  br i1 %435, label %689, label %438

438:                                              ; preds = %437
  %439 = and i64 %173, 1
  %440 = icmp eq i64 %173, 1
  %441 = sub i64 %173, %439
  %442 = icmp eq i64 %439, 0
  br label %443

443:                                              ; preds = %438, %464
  %444 = phi i64 [ %465, %464 ], [ 0, %438 ]
  br i1 %183, label %464, label %445

445:                                              ; preds = %443
  %446 = mul i64 %444, %173
  br i1 %440, label %447, label %467

447:                                              ; preds = %467, %445
  %448 = phi i64 [ 0, %445 ], [ %499, %467 ]
  br i1 %442, label %464, label %449

449:                                              ; preds = %447
  %450 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %448
  %451 = load i32*, i32** %450, align 8, !noalias !118
  %452 = getelementptr inbounds i32, i32* %451, i64 %444
  %453 = load i32, i32* %452, align 4, !noalias !118
  %454 = add i64 %448, %446
  %455 = mul i64 %454, 3
  %456 = getelementptr inbounds i8, i8* %33, i64 %455
  %457 = lshr i32 %453, 24
  %458 = trunc i32 %457 to i8
  %459 = getelementptr inbounds i8, i8* %456, i64 2
  store i8 %458, i8* %459, align 1, !alias.scope !118
  %460 = lshr i32 %453, 8
  %461 = trunc i32 %460 to i8
  %462 = getelementptr inbounds i8, i8* %456, i64 1
  store i8 %461, i8* %462, align 1, !alias.scope !118
  %463 = trunc i32 %453 to i8
  store i8 %463, i8* %456, align 1, !alias.scope !118
  br label %464

464:                                              ; preds = %449, %447, %443
  %465 = add nuw i64 %444, 1
  %466 = icmp eq i64 %465, %434
  br i1 %466, label %689, label %443

467:                                              ; preds = %445, %467
  %468 = phi i64 [ %499, %467 ], [ 0, %445 ]
  %469 = phi i64 [ %500, %467 ], [ %441, %445 ]
  %470 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %468
  %471 = load i32*, i32** %470, align 16, !noalias !118
  %472 = getelementptr inbounds i32, i32* %471, i64 %444
  %473 = load i32, i32* %472, align 4, !noalias !118
  %474 = add i64 %468, %446
  %475 = mul i64 %474, 3
  %476 = getelementptr inbounds i8, i8* %33, i64 %475
  %477 = lshr i32 %473, 24
  %478 = trunc i32 %477 to i8
  %479 = getelementptr inbounds i8, i8* %476, i64 2
  store i8 %478, i8* %479, align 1, !alias.scope !118
  %480 = lshr i32 %473, 8
  %481 = trunc i32 %480 to i8
  %482 = getelementptr inbounds i8, i8* %476, i64 1
  store i8 %481, i8* %482, align 1, !alias.scope !118
  %483 = trunc i32 %473 to i8
  store i8 %483, i8* %476, align 1, !alias.scope !118
  %484 = or i64 %468, 1
  %485 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %484
  %486 = load i32*, i32** %485, align 8, !noalias !118
  %487 = getelementptr inbounds i32, i32* %486, i64 %444
  %488 = load i32, i32* %487, align 4, !noalias !118
  %489 = add i64 %484, %446
  %490 = mul i64 %489, 3
  %491 = getelementptr inbounds i8, i8* %33, i64 %490
  %492 = lshr i32 %488, 24
  %493 = trunc i32 %492 to i8
  %494 = getelementptr inbounds i8, i8* %491, i64 2
  store i8 %493, i8* %494, align 1, !alias.scope !118
  %495 = lshr i32 %488, 8
  %496 = trunc i32 %495 to i8
  %497 = getelementptr inbounds i8, i8* %491, i64 1
  store i8 %496, i8* %497, align 1, !alias.scope !118
  %498 = trunc i32 %488 to i8
  store i8 %498, i8* %491, align 1, !alias.scope !118
  %499 = add nuw i64 %468, 2
  %500 = add i64 %469, -2
  %501 = icmp eq i64 %500, 0
  br i1 %501, label %447, label %467

502:                                              ; preds = %436
  br i1 %435, label %689, label %503

503:                                              ; preds = %502
  %504 = and i64 %173, 1
  %505 = icmp eq i64 %173, 1
  %506 = sub i64 %173, %504
  %507 = icmp eq i64 %504, 0
  br label %508

508:                                              ; preds = %503, %529
  %509 = phi i64 [ %530, %529 ], [ 0, %503 ]
  br i1 %183, label %529, label %510

510:                                              ; preds = %508
  %511 = mul i64 %509, %173
  br i1 %505, label %512, label %532

512:                                              ; preds = %532, %510
  %513 = phi i64 [ 0, %510 ], [ %564, %532 ]
  br i1 %507, label %529, label %514

514:                                              ; preds = %512
  %515 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %513
  %516 = load i32*, i32** %515, align 8, !noalias !121
  %517 = getelementptr inbounds i32, i32* %516, i64 %509
  %518 = load i32, i32* %517, align 4, !noalias !121
  %519 = add i64 %513, %511
  %520 = mul i64 %519, 3
  %521 = getelementptr inbounds i8, i8* %33, i64 %520
  %522 = lshr i32 %518, 16
  %523 = trunc i32 %522 to i8
  store i8 %523, i8* %521, align 1, !alias.scope !121
  %524 = lshr i32 %518, 8
  %525 = trunc i32 %524 to i8
  %526 = getelementptr inbounds i8, i8* %521, i64 1
  store i8 %525, i8* %526, align 1, !alias.scope !121
  %527 = trunc i32 %518 to i8
  %528 = getelementptr inbounds i8, i8* %521, i64 2
  store i8 %527, i8* %528, align 1, !alias.scope !121
  br label %529

529:                                              ; preds = %514, %512, %508
  %530 = add nuw i64 %509, 1
  %531 = icmp eq i64 %530, %434
  br i1 %531, label %689, label %508

532:                                              ; preds = %510, %532
  %533 = phi i64 [ %564, %532 ], [ 0, %510 ]
  %534 = phi i64 [ %565, %532 ], [ %506, %510 ]
  %535 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %533
  %536 = load i32*, i32** %535, align 16, !noalias !121
  %537 = getelementptr inbounds i32, i32* %536, i64 %509
  %538 = load i32, i32* %537, align 4, !noalias !121
  %539 = add i64 %533, %511
  %540 = mul i64 %539, 3
  %541 = getelementptr inbounds i8, i8* %33, i64 %540
  %542 = lshr i32 %538, 16
  %543 = trunc i32 %542 to i8
  store i8 %543, i8* %541, align 1, !alias.scope !121
  %544 = lshr i32 %538, 8
  %545 = trunc i32 %544 to i8
  %546 = getelementptr inbounds i8, i8* %541, i64 1
  store i8 %545, i8* %546, align 1, !alias.scope !121
  %547 = trunc i32 %538 to i8
  %548 = getelementptr inbounds i8, i8* %541, i64 2
  store i8 %547, i8* %548, align 1, !alias.scope !121
  %549 = or i64 %533, 1
  %550 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %549
  %551 = load i32*, i32** %550, align 8, !noalias !121
  %552 = getelementptr inbounds i32, i32* %551, i64 %509
  %553 = load i32, i32* %552, align 4, !noalias !121
  %554 = add i64 %549, %511
  %555 = mul i64 %554, 3
  %556 = getelementptr inbounds i8, i8* %33, i64 %555
  %557 = lshr i32 %553, 16
  %558 = trunc i32 %557 to i8
  store i8 %558, i8* %556, align 1, !alias.scope !121
  %559 = lshr i32 %553, 8
  %560 = trunc i32 %559 to i8
  %561 = getelementptr inbounds i8, i8* %556, i64 1
  store i8 %560, i8* %561, align 1, !alias.scope !121
  %562 = trunc i32 %553 to i8
  %563 = getelementptr inbounds i8, i8* %556, i64 2
  store i8 %562, i8* %563, align 1, !alias.scope !121
  %564 = add nuw i64 %533, 2
  %565 = add i64 %534, -2
  %566 = icmp eq i64 %565, 0
  br i1 %566, label %512, label %532

567:                                              ; preds = %426
  br i1 %431, label %568, label %639

568:                                              ; preds = %567
  br i1 %435, label %689, label %569

569:                                              ; preds = %568
  %570 = add i64 %173, -1
  %571 = and i64 %173, 3
  %572 = icmp ult i64 %570, 3
  %573 = sub i64 %173, %571
  %574 = icmp eq i64 %571, 0
  br label %575

575:                                              ; preds = %569, %595
  %576 = phi i64 [ %596, %595 ], [ 0, %569 ]
  br i1 %183, label %595, label %577

577:                                              ; preds = %575
  %578 = mul i64 %576, %173
  br i1 %572, label %579, label %598

579:                                              ; preds = %598, %577
  %580 = phi i64 [ 0, %577 ], [ %636, %598 ]
  br i1 %574, label %595, label %581

581:                                              ; preds = %579, %581
  %582 = phi i64 [ %592, %581 ], [ %580, %579 ]
  %583 = phi i64 [ %593, %581 ], [ %571, %579 ]
  %584 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %582
  %585 = load i32*, i32** %584, align 8, !noalias !124
  %586 = getelementptr inbounds i32, i32* %585, i64 %576
  %587 = load i32, i32* %586, align 4, !noalias !124
  %588 = add i64 %582, %578
  %589 = shl i64 %588, 2
  %590 = getelementptr inbounds i8, i8* %33, i64 %589
  %591 = bitcast i8* %590 to i32*
  store i32 %587, i32* %591, align 1, !alias.scope !124
  %592 = add nuw i64 %582, 1
  %593 = add i64 %583, -1
  %594 = icmp eq i64 %593, 0
  br i1 %594, label %595, label %581, !llvm.loop !127

595:                                              ; preds = %579, %581, %575
  %596 = add nuw i64 %576, 1
  %597 = icmp eq i64 %596, %434
  br i1 %597, label %689, label %575

598:                                              ; preds = %577, %598
  %599 = phi i64 [ %636, %598 ], [ 0, %577 ]
  %600 = phi i64 [ %637, %598 ], [ %573, %577 ]
  %601 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %599
  %602 = load i32*, i32** %601, align 16, !noalias !124
  %603 = getelementptr inbounds i32, i32* %602, i64 %576
  %604 = load i32, i32* %603, align 4, !noalias !124
  %605 = add i64 %599, %578
  %606 = shl i64 %605, 2
  %607 = getelementptr inbounds i8, i8* %33, i64 %606
  %608 = bitcast i8* %607 to i32*
  store i32 %604, i32* %608, align 1, !alias.scope !124
  %609 = or i64 %599, 1
  %610 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %609
  %611 = load i32*, i32** %610, align 8, !noalias !124
  %612 = getelementptr inbounds i32, i32* %611, i64 %576
  %613 = load i32, i32* %612, align 4, !noalias !124
  %614 = add i64 %609, %578
  %615 = shl i64 %614, 2
  %616 = getelementptr inbounds i8, i8* %33, i64 %615
  %617 = bitcast i8* %616 to i32*
  store i32 %613, i32* %617, align 1, !alias.scope !124
  %618 = or i64 %599, 2
  %619 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %618
  %620 = load i32*, i32** %619, align 16, !noalias !124
  %621 = getelementptr inbounds i32, i32* %620, i64 %576
  %622 = load i32, i32* %621, align 4, !noalias !124
  %623 = add i64 %618, %578
  %624 = shl i64 %623, 2
  %625 = getelementptr inbounds i8, i8* %33, i64 %624
  %626 = bitcast i8* %625 to i32*
  store i32 %622, i32* %626, align 1, !alias.scope !124
  %627 = or i64 %599, 3
  %628 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %627
  %629 = load i32*, i32** %628, align 8, !noalias !124
  %630 = getelementptr inbounds i32, i32* %629, i64 %576
  %631 = load i32, i32* %630, align 4, !noalias !124
  %632 = add i64 %627, %578
  %633 = shl i64 %632, 2
  %634 = getelementptr inbounds i8, i8* %33, i64 %633
  %635 = bitcast i8* %634 to i32*
  store i32 %631, i32* %635, align 1, !alias.scope !124
  %636 = add nuw i64 %599, 4
  %637 = add i64 %600, -4
  %638 = icmp eq i64 %637, 0
  br i1 %638, label %579, label %598

639:                                              ; preds = %567
  br i1 %435, label %689, label %640

640:                                              ; preds = %639
  %641 = and i64 %173, 1
  %642 = icmp eq i64 %173, 1
  %643 = sub i64 %173, %641
  %644 = icmp eq i64 %641, 0
  br label %645

645:                                              ; preds = %640, %661
  %646 = phi i64 [ %662, %661 ], [ 0, %640 ]
  br i1 %183, label %661, label %647

647:                                              ; preds = %645
  %648 = mul i64 %646, %173
  br i1 %642, label %649, label %664

649:                                              ; preds = %664, %647
  %650 = phi i64 [ 0, %647 ], [ %686, %664 ]
  br i1 %644, label %661, label %651

651:                                              ; preds = %649
  %652 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %650
  %653 = load i32*, i32** %652, align 8, !noalias !128
  %654 = getelementptr inbounds i32, i32* %653, i64 %646
  %655 = load i32, i32* %654, align 4, !noalias !128
  %656 = add i64 %650, %648
  %657 = shl i64 %656, 2
  %658 = getelementptr inbounds i8, i8* %33, i64 %657
  %659 = tail call i32 @llvm.bswap.i32(i32 %655) #12
  %660 = bitcast i8* %658 to i32*
  store i32 %659, i32* %660, align 1, !alias.scope !128
  br label %661

661:                                              ; preds = %651, %649, %645
  %662 = add nuw i64 %646, 1
  %663 = icmp eq i64 %662, %434
  br i1 %663, label %689, label %645

664:                                              ; preds = %647, %664
  %665 = phi i64 [ %686, %664 ], [ 0, %647 ]
  %666 = phi i64 [ %687, %664 ], [ %643, %647 ]
  %667 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %665
  %668 = load i32*, i32** %667, align 16, !noalias !128
  %669 = getelementptr inbounds i32, i32* %668, i64 %646
  %670 = load i32, i32* %669, align 4, !noalias !128
  %671 = add i64 %665, %648
  %672 = shl i64 %671, 2
  %673 = getelementptr inbounds i8, i8* %33, i64 %672
  %674 = tail call i32 @llvm.bswap.i32(i32 %670) #12
  %675 = bitcast i8* %673 to i32*
  store i32 %674, i32* %675, align 1, !alias.scope !128
  %676 = or i64 %665, 1
  %677 = getelementptr inbounds [4 x i32*], [4 x i32*]* %5, i64 0, i64 %676
  %678 = load i32*, i32** %677, align 8, !noalias !128
  %679 = getelementptr inbounds i32, i32* %678, i64 %646
  %680 = load i32, i32* %679, align 4, !noalias !128
  %681 = add i64 %676, %648
  %682 = shl i64 %681, 2
  %683 = getelementptr inbounds i8, i8* %33, i64 %682
  %684 = tail call i32 @llvm.bswap.i32(i32 %680) #12
  %685 = bitcast i8* %683 to i32*
  store i32 %684, i32* %685, align 1, !alias.scope !128
  %686 = add nuw i64 %665, 2
  %687 = add i64 %666, -2
  %688 = icmp eq i64 %687, 0
  br i1 %688, label %649, label %664

689:                                              ; preds = %661, %595, %529, %464, %338, %394, %263, %639, %568, %502, %437, %370, %314, %233
  %690 = load void (i8*, i64, i64, i64, i8*)**, void (i8*, i64, i64, i64, i8*)*** %10, align 8
  %691 = load void (i8*, i64, i64, i64, i8*)*, void (i8*, i64, i64, i64, i8*)** %690, align 8
  %692 = icmp eq void (i8*, i64, i64, i64, i8*)* %691, null
  br i1 %692, label %700, label %693

693:                                              ; preds = %689
  %694 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 16
  %695 = load i8**, i8*** %694, align 8
  %696 = load i8*, i8** %695, align 8
  %697 = getelementptr inbounds %class.anon.142, %class.anon.142* %8, i64 0, i32 12
  %698 = load i64*, i64** %697, align 8
  %699 = load i64, i64* %698, align 8
  tail call void %691(i8* %696, i64 0, i64 %9, i64 %699, i8* %33) #12
  br label %700

700:                                              ; preds = %689, %693
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %182) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %34) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIvJPKfPjmfmEE13ChooseAndCallIXadL_ZN3jxlL30FloatToU32HighwayDispatchTableEEEEEvS2_S3_mfm(float*, i32*, i64, float, i64) #6 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #12
  %6 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %7 = and i32 %6, 2225
  %8 = tail call i32 @llvm.cttz.i32(i32 %7, i1 true) #12, !range !98
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [12 x void (float*, i32*, i64, float, i64)*], [12 x void (float*, i32*, i64, float, i64)*]* @_ZN3jxlL30FloatToU32HighwayDispatchTableE, i64 0, i64 %9
  %11 = load void (float*, i32*, i64, float, i64)*, void (float*, i32*, i64, float, i64)** %10, align 8
  tail call void %11(float* %0, i32* %1, i64 %2, float %3, i64 %4) #12
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #9

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="512" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { builtin nounwind }
attributes #15 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!11 = distinct !{!11, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN3hwy6N_SSE4L5StoreIjEEvNS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPS3_: argument 0"}
!14 = distinct !{!14, !"_ZN3hwy6N_SSE4L5StoreIjEEvNS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPS3_"}
!15 = distinct !{!15, !8}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf: argument 0"}
!18 = distinct !{!18, !"_ZN3hwy6N_SSE4L4LoadENS0_4SimdIfLm4EEEPKf"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZN3hwy6N_SSE4L5StoreINS_9float16_tEEEvNS0_6Vec128IT_XdvLi8EstS4_EEENS0_4SimdIS4_XdvLi8EstS4_EEEPS4_: argument 0"}
!21 = distinct !{!21, !"_ZN3hwy6N_SSE4L5StoreINS_9float16_tEEEvNS0_6Vec128IT_XdvLi8EstS4_EEENS0_4SimdIS4_XdvLi8EstS4_EEEPS4_"}
!22 = !{!23}
!23 = distinct !{!23, !24}
!24 = distinct !{!24, !"LVerDomain"}
!25 = !{!26}
!26 = distinct !{!26, !24}
!27 = distinct !{!27, !8}
!28 = !{!29}
!29 = distinct !{!29, !30, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!30 = distinct !{!30, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!31 = !{!32}
!32 = distinct !{!32, !30, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"_ZN3hwy6N_AVX2L5StoreIjEEvNS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPS3_: argument 0"}
!35 = distinct !{!35, !"_ZN3hwy6N_AVX2L5StoreIjEEvNS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPS3_"}
!36 = distinct !{!36, !8}
!37 = !{!38}
!38 = distinct !{!38, !39, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 1"}
!39 = distinct !{!39, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf"}
!40 = !{!41}
!41 = distinct !{!41, !39, !"_ZN3hwy6N_AVX2L4LoadENS0_4SimdIfLm8EEEPKf: argument 0"}
!42 = !{!43}
!43 = distinct !{!43, !44, !"_ZN3hwy6N_AVX2L5StoreINS_9float16_tEEEvNS0_6Vec128IT_XdvLi16EstS4_EEENS0_4SimdIS4_XdvLi16EstS4_EEEPS4_: argument 0"}
!44 = distinct !{!44, !"_ZN3hwy6N_AVX2L5StoreINS_9float16_tEEEvNS0_6Vec128IT_XdvLi16EstS4_EEENS0_4SimdIS4_XdvLi16EstS4_EEEPS4_"}
!45 = !{!46}
!46 = distinct !{!46, !47}
!47 = distinct !{!47, !"LVerDomain"}
!48 = !{!49}
!49 = distinct !{!49, !47}
!50 = distinct !{!50, !8}
!51 = !{!52}
!52 = distinct !{!52, !53, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!53 = distinct !{!53, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!54 = !{!55}
!55 = distinct !{!55, !53, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!56 = !{!57}
!57 = distinct !{!57, !58, !"_ZN3hwy6N_AVX3L5StoreIjEEvNS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPS3_: argument 0"}
!58 = distinct !{!58, !"_ZN3hwy6N_AVX3L5StoreIjEEvNS0_6Vec512IT_EENS0_4SimdIS3_XdvLi64EstS3_EEEPS3_"}
!59 = distinct !{!59, !8}
!60 = !{!61}
!61 = distinct !{!61, !62, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 1"}
!62 = distinct !{!62, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf"}
!63 = !{!64}
!64 = distinct !{!64, !62, !"_ZN3hwy6N_AVX3L4LoadENS0_4SimdIfLm16EEEPKf: argument 0"}
!65 = !{!66}
!66 = distinct !{!66, !67, !"_ZN3hwy6N_AVX3L5StoreINS_9float16_tEEEvNS0_6Vec256IT_EENS0_4SimdIS4_XdvLi32EstS4_EEEPS4_: argument 0"}
!67 = distinct !{!67, !"_ZN3hwy6N_AVX3L5StoreINS_9float16_tEEEvNS0_6Vec256IT_EENS0_4SimdIS4_XdvLi32EstS4_EEEPS4_"}
!68 = !{!69, !71}
!69 = distinct !{!69, !70, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!70 = distinct !{!70, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!71 = distinct !{!71, !72}
!72 = distinct !{!72, !"LVerDomain"}
!73 = !{!74, !76}
!74 = distinct !{!74, !75, !"_ZN3hwy8N_SCALAR5StoreIjEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_: argument 0"}
!75 = distinct !{!75, !"_ZN3hwy8N_SCALAR5StoreIjEEvNS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPS3_"}
!76 = distinct !{!76, !72}
!77 = !{!71}
!78 = distinct !{!78, !8}
!79 = !{!80}
!80 = distinct !{!80, !81}
!81 = distinct !{!81, !"LVerDomain"}
!82 = !{!83}
!83 = distinct !{!83, !81}
!84 = distinct !{!84, !8}
!85 = !{!69}
!86 = !{!74}
!87 = distinct !{!87, !8}
!88 = distinct !{!88, !8}
!89 = !{!90}
!90 = distinct !{!90, !91, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!91 = distinct !{!91, !"_ZN3hwy8N_SCALAR4LoadIfEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!92 = !{!93}
!93 = distinct !{!93, !94, !"_ZN3hwy8N_SCALAR5StoreINS_9float16_tEEEvNS0_4Vec1IT_EENS0_4SimdIS4_Lm1EEEPS4_: argument 0"}
!94 = distinct !{!94, !"_ZN3hwy8N_SCALAR5StoreINS_9float16_tEEEvNS0_4Vec1IT_EENS0_4SimdIS4_Lm1EEEPS4_"}
!95 = !{i8 0, i8 2}
!96 = distinct !{!96, !97}
!97 = !{!"llvm.loop.unroll.disable"}
!98 = !{i32 0, i32 33}
!99 = distinct !{!99, !97}
!100 = !{!101}
!101 = distinct !{!101, !102, !"_ZN3jxl12_GLOBAL__N_113StoreFloatRowIXadL_ZNS0_12StoreLEFloatEfPhEEEEvPrPKfmmS2_: argument 0"}
!102 = distinct !{!102, !"_ZN3jxl12_GLOBAL__N_113StoreFloatRowIXadL_ZNS0_12StoreLEFloatEfPhEEEEvPrPKfmmS2_"}
!103 = distinct !{!103, !97}
!104 = !{!105}
!105 = distinct !{!105, !106, !"_ZN3jxl12_GLOBAL__N_113StoreFloatRowIXadL_ZNS0_12StoreBEFloatEfPhEEEEvPrPKfmmS2_: argument 0"}
!106 = distinct !{!106, !"_ZN3jxl12_GLOBAL__N_113StoreFloatRowIXadL_ZNS0_12StoreBEFloatEfPhEEEEvPrPKfmmS2_"}
!107 = distinct !{!107, !97}
!108 = !{!109}
!109 = distinct !{!109, !110, !"_ZN3jxl12_GLOBAL__N_112StoreUintRowIXadL_ZNS0_6Store8EjPhEEEEvPrPjmmmS2_: argument 0"}
!110 = distinct !{!110, !"_ZN3jxl12_GLOBAL__N_112StoreUintRowIXadL_ZNS0_6Store8EjPhEEEEvPrPjmmmS2_"}
!111 = distinct !{!111, !97}
!112 = !{!113}
!113 = distinct !{!113, !114, !"_ZN3jxl12_GLOBAL__N_112StoreUintRowIXadL_ZL9StoreLE16jPhEEEEvPrPjmmmS2_: argument 0"}
!114 = distinct !{!114, !"_ZN3jxl12_GLOBAL__N_112StoreUintRowIXadL_ZL9StoreLE16jPhEEEEvPrPjmmmS2_"}
!115 = !{!116}
!116 = distinct !{!116, !117, !"_ZN3jxl12_GLOBAL__N_112StoreUintRowIXadL_ZL9StoreBE16jPhEEEEvPrPjmmmS2_: argument 0"}
!117 = distinct !{!117, !"_ZN3jxl12_GLOBAL__N_112StoreUintRowIXadL_ZL9StoreBE16jPhEEEEvPrPjmmmS2_"}
!118 = !{!119}
!119 = distinct !{!119, !120, !"_ZN3jxl12_GLOBAL__N_112StoreUintRowIXadL_ZL9StoreLE24jPhEEEEvPrPjmmmS2_: argument 0"}
!120 = distinct !{!120, !"_ZN3jxl12_GLOBAL__N_112StoreUintRowIXadL_ZL9StoreLE24jPhEEEEvPrPjmmmS2_"}
!121 = !{!122}
!122 = distinct !{!122, !123, !"_ZN3jxl12_GLOBAL__N_112StoreUintRowIXadL_ZL9StoreBE24jPhEEEEvPrPjmmmS2_: argument 0"}
!123 = distinct !{!123, !"_ZN3jxl12_GLOBAL__N_112StoreUintRowIXadL_ZL9StoreBE24jPhEEEEvPrPjmmmS2_"}
!124 = !{!125}
!125 = distinct !{!125, !126, !"_ZN3jxl12_GLOBAL__N_112StoreUintRowIXadL_ZL9StoreLE32jPhEEEEvPrPjmmmS2_: argument 0"}
!126 = distinct !{!126, !"_ZN3jxl12_GLOBAL__N_112StoreUintRowIXadL_ZL9StoreLE32jPhEEEEvPrPjmmmS2_"}
!127 = distinct !{!127, !97}
!128 = !{!129}
!129 = distinct !{!129, !130, !"_ZN3jxl12_GLOBAL__N_112StoreUintRowIXadL_ZL9StoreBE32jPhEEEEvPrPjmmmS2_: argument 0"}
!130 = distinct !{!130, !"_ZN3jxl12_GLOBAL__N_112StoreUintRowIXadL_ZL9StoreBE32jPhEEEEvPrPjmmmS2_"}
