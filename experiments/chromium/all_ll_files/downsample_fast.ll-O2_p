; ModuleID = '../../third_party/webrtc/common_audio/signal_processing/downsample_fast.c'
source_filename = "../../third_party/webrtc/common_audio/signal_processing/downsample_fast.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @WebRtcSpl_DownsampleFastC(i16* nocapture readonly, i64, i16* nocapture, i64, i16* noalias nocapture readonly, i64, i32, i64) local_unnamed_addr #0 {
  %9 = sext i32 %6 to i64
  %10 = add i64 %3, -1
  %11 = mul i64 %10, %9
  %12 = add i64 %7, 1
  %13 = add i64 %12, %11
  %14 = icmp eq i64 %3, 0
  %15 = icmp eq i64 %5, 0
  %16 = or i1 %14, %15
  %17 = icmp ugt i64 %13, %1
  %18 = or i1 %16, %17
  br i1 %18, label %94, label %19

19:                                               ; preds = %8
  %20 = icmp ugt i64 %13, %7
  br i1 %20, label %21, label %94

21:                                               ; preds = %19
  %22 = icmp ult i64 %5, 8
  %23 = and i64 %5, -8
  %24 = icmp eq i64 %23, %5
  br label %25

25:                                               ; preds = %21, %83
  %26 = phi i64 [ %92, %83 ], [ %7, %21 ]
  %27 = phi i16* [ %91, %83 ], [ %2, %21 ]
  br i1 %22, label %66, label %28

28:                                               ; preds = %25, %28
  %29 = phi i64 [ %57, %28 ], [ 0, %25 ]
  %30 = phi <4 x i32> [ %55, %28 ], [ <i32 2048, i32 0, i32 0, i32 0>, %25 ]
  %31 = phi <4 x i32> [ %56, %28 ], [ zeroinitializer, %25 ]
  %32 = sub nsw i64 %26, %29
  %33 = getelementptr inbounds i16, i16* %0, i64 %32
  %34 = getelementptr inbounds i16, i16* %4, i64 %29
  %35 = bitcast i16* %34 to <4 x i16>*
  %36 = load <4 x i16>, <4 x i16>* %35, align 2
  %37 = getelementptr inbounds i16, i16* %34, i64 4
  %38 = bitcast i16* %37 to <4 x i16>*
  %39 = load <4 x i16>, <4 x i16>* %38, align 2
  %40 = sext <4 x i16> %36 to <4 x i32>
  %41 = sext <4 x i16> %39 to <4 x i32>
  %42 = getelementptr inbounds i16, i16* %33, i64 -3
  %43 = bitcast i16* %42 to <4 x i16>*
  %44 = load <4 x i16>, <4 x i16>* %43, align 2
  %45 = shufflevector <4 x i16> %44, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %46 = getelementptr inbounds i16, i16* %33, i64 -4
  %47 = getelementptr inbounds i16, i16* %46, i64 -3
  %48 = bitcast i16* %47 to <4 x i16>*
  %49 = load <4 x i16>, <4 x i16>* %48, align 2
  %50 = shufflevector <4 x i16> %49, <4 x i16> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %51 = sext <4 x i16> %45 to <4 x i32>
  %52 = sext <4 x i16> %50 to <4 x i32>
  %53 = mul nsw <4 x i32> %51, %40
  %54 = mul nsw <4 x i32> %52, %41
  %55 = add nsw <4 x i32> %53, %30
  %56 = add nsw <4 x i32> %54, %31
  %57 = add i64 %29, 8
  %58 = icmp eq i64 %57, %23
  br i1 %58, label %59, label %28, !llvm.loop !2

59:                                               ; preds = %28
  %60 = add <4 x i32> %56, %55
  %61 = shufflevector <4 x i32> %60, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %62 = add <4 x i32> %60, %61
  %63 = shufflevector <4 x i32> %62, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %64 = add <4 x i32> %62, %63
  %65 = extractelement <4 x i32> %64, i32 0
  br i1 %24, label %83, label %66

66:                                               ; preds = %59, %25
  %67 = phi i32 [ 2048, %25 ], [ %65, %59 ]
  %68 = phi i64 [ 0, %25 ], [ %23, %59 ]
  br label %69

69:                                               ; preds = %66, %69
  %70 = phi i32 [ %80, %69 ], [ %67, %66 ]
  %71 = phi i64 [ %81, %69 ], [ %68, %66 ]
  %72 = sub nsw i64 %26, %71
  %73 = getelementptr inbounds i16, i16* %0, i64 %72
  %74 = getelementptr inbounds i16, i16* %4, i64 %71
  %75 = load i16, i16* %74, align 2
  %76 = sext i16 %75 to i32
  %77 = load i16, i16* %73, align 2
  %78 = sext i16 %77 to i32
  %79 = mul nsw i32 %78, %76
  %80 = add nsw i32 %79, %70
  %81 = add nuw i64 %71, 1
  %82 = icmp eq i64 %81, %5
  br i1 %82, label %83, label %69, !llvm.loop !4

83:                                               ; preds = %69, %59
  %84 = phi i32 [ %65, %59 ], [ %80, %69 ]
  %85 = ashr i32 %84, 12
  %86 = icmp sgt i32 %84, 134217727
  %87 = icmp sgt i32 %85, -32768
  %88 = select i1 %87, i32 %85, i32 -32768
  %89 = trunc i32 %88 to i16
  %90 = select i1 %86, i16 32767, i16 %89
  %91 = getelementptr inbounds i16, i16* %27, i64 1
  store i16 %90, i16* %27, align 2
  %92 = add i64 %26, %9
  %93 = icmp ult i64 %92, %13
  br i1 %93, label %25, label %94

94:                                               ; preds = %83, %19, %8
  %95 = phi i32 [ -1, %8 ], [ 0, %19 ], [ 0, %83 ]
  ret i32 %95
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
