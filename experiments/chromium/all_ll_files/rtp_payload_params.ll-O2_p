; ModuleID = '../../third_party/webrtc/call/rtp_payload_params.cc'
source_filename = "../../third_party/webrtc/call/rtp_payload_params.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%union.anon.141 = type { %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo" }
%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo" = type { i64, i32, i32, %"class.absl::InlinedVector.90", %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.97", %"class.std::__1::bitset" }
%"class.absl::InlinedVector.90" = type { %"class.absl::inlined_vector_internal::Storage.91" }
%"class.absl::inlined_vector_internal::Storage.91" = type { %"class.absl::container_internal::CompressedTuple.92", %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data" }
%"class.absl::container_internal::CompressedTuple.92" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.93" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.93" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.0" = type { i64 }
%"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Allocated", [24 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Allocated" = type { i32*, i64 }
%"class.absl::InlinedVector.142" = type { %"class.absl::inlined_vector_internal::Storage.143" }
%"class.absl::inlined_vector_internal::Storage.143" = type { %"class.absl::container_internal::CompressedTuple.3", %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data" }
%"class.absl::container_internal::CompressedTuple.3" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.4" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.4" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" }
%"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Allocated", [24 x i8] }
%"struct.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Allocated" = type { i64*, i64 }
%"class.absl::InlinedVector.97" = type { %"class.absl::inlined_vector_internal::Storage.98" }
%"class.absl::inlined_vector_internal::Storage.98" = type { %"class.absl::container_internal::CompressedTuple.99", %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data" }
%"class.absl::container_internal::CompressedTuple.99" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.100" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.100" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" }
%"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Allocated" }
%"struct.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Allocated" = type { i32*, i64 }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { i64 }
%"struct.webrtc::VideoPlayoutDelay" = type { i32, i32 }
%union.anon.53 = type { %"struct.webrtc::HdrMetadata" }
%"struct.webrtc::HdrMetadata" = type { %"struct.webrtc::HdrMasteringMetadata", i32, i32 }
%"struct.webrtc::HdrMasteringMetadata" = type { %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", float, float }
%"struct.webrtc::HdrMasteringMetadata::Chromaticity" = type { float, float }
%union.anon.58 = type { i16 }
%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.webrtc::RtpPayloadParams" = type <{ %"class.webrtc::FrameDependenciesCalculator", %"class.webrtc::ChainDiffCalculator", %"struct.std::__1::array", %"class.std::__1::vector", %"struct.std::__1::array.15", %"struct.std::__1::array.19", %"class.absl::optional.20", [2 x i8], i32, %"struct.webrtc::RtpPayloadState", i8, i8, [6 x i8] }>
%"class.webrtc::FrameDependenciesCalculator" = type { %"class.absl::InlinedVector" }
%"class.absl::InlinedVector" = type { %"class.absl::inlined_vector_internal::Storage" }
%"class.absl::inlined_vector_internal::Storage" = type { %"class.absl::container_internal::CompressedTuple", %"union.absl::inlined_vector_internal::Storage<webrtc::FrameDependenciesCalculator::BufferUsage, 4, std::__1::allocator<webrtc::FrameDependenciesCalculator::BufferUsage> >::Data" }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" }
%"union.absl::inlined_vector_internal::Storage<webrtc::FrameDependenciesCalculator::BufferUsage, 4, std::__1::allocator<webrtc::FrameDependenciesCalculator::BufferUsage> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::FrameDependenciesCalculator::BufferUsage, 4, std::__1::allocator<webrtc::FrameDependenciesCalculator::BufferUsage> >::Allocated", [208 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::FrameDependenciesCalculator::BufferUsage, 4, std::__1::allocator<webrtc::FrameDependenciesCalculator::BufferUsage> >::Allocated" = type { %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"*, i64 }
%"struct.webrtc::FrameDependenciesCalculator::BufferUsage" = type { %"class.absl::optional", %"class.absl::InlinedVector.1" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i64 }
%"class.absl::InlinedVector.1" = type { %"class.absl::inlined_vector_internal::Storage.2" }
%"class.absl::inlined_vector_internal::Storage.2" = type { %"class.absl::container_internal::CompressedTuple.3", %"union.absl::inlined_vector_internal::Storage<long, 4, std::__1::allocator<long> >::Data" }
%"union.absl::inlined_vector_internal::Storage<long, 4, std::__1::allocator<long> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<long, 4, std::__1::allocator<long> >::Allocated", [16 x i8] }
%"struct.absl::inlined_vector_internal::Storage<long, 4, std::__1::allocator<long> >::Allocated" = type { i64*, i64 }
%"class.webrtc::ChainDiffCalculator" = type { %"class.absl::InlinedVector.8" }
%"class.absl::InlinedVector.8" = type { %"class.absl::inlined_vector_internal::Storage.9" }
%"class.absl::inlined_vector_internal::Storage.9" = type { %"class.absl::container_internal::CompressedTuple.10", %"union.absl::inlined_vector_internal::Storage<absl::optional<long>, 4, std::__1::allocator<absl::optional<long> > >::Data" }
%"class.absl::container_internal::CompressedTuple.10" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.11" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.11" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" }
%"union.absl::inlined_vector_internal::Storage<absl::optional<long>, 4, std::__1::allocator<absl::optional<long> > >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<absl::optional<long>, 4, std::__1::allocator<absl::optional<long> > >::Allocated", [48 x i8] }
%"struct.absl::inlined_vector_internal::Storage<absl::optional<long>, 4, std::__1::allocator<absl::optional<long> > >::Allocated" = type { %"class.absl::optional"*, i64 }
%"struct.std::__1::array" = type { [8 x %"struct.std::__1::array.15"] }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::array.15"*, %"struct.std::__1::array.15"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::array.15"* }
%"struct.std::__1::array.15" = type { [8 x i64] }
%"struct.std::__1::array.19" = type { [3 x i64] }
%"class.absl::optional.20" = type { %"class.absl::optional_internal::optional_data.21" }
%"class.absl::optional_internal::optional_data.21" = type { %"class.absl::optional_internal::optional_data_base.22" }
%"class.absl::optional_internal::optional_data_base.22" = type { %"class.absl::optional_internal::optional_data_dtor_base.23" }
%"class.absl::optional_internal::optional_data_dtor_base.23" = type { i8, %union.anon.24 }
%union.anon.24 = type { i8 }
%"struct.webrtc::RtpPayloadState" = type { i16, i8, i64 }
%"class.webrtc::WebRtcKeyValueConfig" = type { i32 (...)** }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.27 }
%union.anon.27 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.webrtc::Random" = type { i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.webrtc::RTPVideoHeader" = type { %"class.absl::optional.137", i32, i16, i16, i32, i8, i8, i8, i8, i8, i32, %"struct.webrtc::VideoPlayoutDelay", %"struct.webrtc::VideoSendTiming", %"class.absl::optional.44", %"class.absl::optional.54", %"class.absl::variant" }
%"class.absl::optional.137" = type { %"class.absl::optional_internal::optional_data.138" }
%"class.absl::optional_internal::optional_data.138" = type { %"class.absl::optional_internal::optional_data_base.139" }
%"class.absl::optional_internal::optional_data_base.139" = type { %"class.absl::optional_internal::optional_data_dtor_base.140" }
%"class.absl::optional_internal::optional_data_dtor_base.140" = type { i8, %union.anon.141 }
%"struct.webrtc::VideoSendTiming" = type { i16, i16, i16, i16, i16, i16, i8 }
%"class.absl::optional.44" = type { %"class.absl::optional_internal::optional_data.45" }
%"class.absl::optional_internal::optional_data.45" = type { %"class.absl::optional_internal::optional_data_base.46" }
%"class.absl::optional_internal::optional_data_base.46" = type { %"class.absl::optional_internal::optional_data_dtor_base.47" }
%"class.absl::optional_internal::optional_data_dtor_base.47" = type { i8, %union.anon.48 }
%union.anon.48 = type { %"class.webrtc::ColorSpace" }
%"class.webrtc::ColorSpace" = type { i8, i8, i8, i32, i32, i32, %"class.absl::optional.49" }
%"class.absl::optional.49" = type { %"class.absl::optional_internal::optional_data.50" }
%"class.absl::optional_internal::optional_data.50" = type { %"class.absl::optional_internal::optional_data_base.51" }
%"class.absl::optional_internal::optional_data_base.51" = type { %"class.absl::optional_internal::optional_data_dtor_base.52" }
%"class.absl::optional_internal::optional_data_dtor_base.52" = type { i8, %union.anon.53 }
%"class.absl::optional.54" = type { %"class.absl::optional_internal::optional_data.55" }
%"class.absl::optional_internal::optional_data.55" = type { %"class.absl::optional_internal::optional_data_base.56" }
%"class.absl::optional_internal::optional_data_base.56" = type { %"class.absl::optional_internal::optional_data_dtor_base.57" }
%"class.absl::optional_internal::optional_data_dtor_base.57" = type { i8, %union.anon.58 }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::Union", i64 }
%"union.absl::variant_internal::Union" = type { %"union.absl::variant_internal::Union.144" }
%"union.absl::variant_internal::Union.144" = type { %"union.absl::variant_internal::Union.145" }
%"union.absl::variant_internal::Union.145" = type { %"struct.webrtc::RTPVideoHeaderVP9" }
%"struct.webrtc::RTPVideoHeaderVP9" = type { i8, i8, i8, i8, i8, i8, i16, i16, i16, i8, i8, i8, i8, i8, i8, [3 x i8], [3 x i16], i64, i64, i8, [8 x i16], [8 x i16], %"struct.webrtc::GofInfoVP9", i8 }
%"struct.webrtc::GofInfoVP9" = type { i64, [255 x i8], [255 x i8], [255 x i8], [255 x [3 x i8]], i16 }
%"class.webrtc::EncodedImage" = type <{ i32, i32, i64, i64, i32, i32, i8, [3 x i8], i32, %"struct.webrtc::VideoPlayoutDelay", %"struct.webrtc::EncodedImage::Timing", %"class.rtc::scoped_refptr", i64, i32, %"class.absl::optional.31", [4 x i8], %"class.std::__1::map", %"class.absl::optional.44", %"class.absl::optional.54", [4 x i8], %"class.webrtc::RtpPacketInfos", i8, [7 x i8] }>
%"struct.webrtc::EncodedImage::Timing" = type { i8, i64, i64, i64, i64, i64, i64, i64, i64 }
%"class.rtc::scoped_refptr" = type { %"class.webrtc::EncodedImageBufferInterface"* }
%"class.webrtc::EncodedImageBufferInterface" = type { %"class.rtc::RefCountInterface" }
%"class.rtc::RefCountInterface" = type { i32 (...)** }
%"class.absl::optional.31" = type { %"class.absl::optional_internal::optional_data.32" }
%"class.absl::optional_internal::optional_data.32" = type { %"class.absl::optional_internal::optional_data_base.33" }
%"class.absl::optional_internal::optional_data_base.33" = type { %"class.absl::optional_internal::optional_data_dtor_base.34" }
%"class.absl::optional_internal::optional_data_dtor_base.34" = type { i8, %union.anon.35 }
%union.anon.35 = type { i32 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.36", %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { i64 }
%"class.webrtc::RtpPacketInfos" = type { %"class.rtc::scoped_refptr.59" }
%"class.rtc::scoped_refptr.59" = type { %"class.webrtc::RtpPacketInfos::Data"* }
%"class.webrtc::RtpPacketInfos::Data" = type { %"class.rtc::RefCountedBase.base", %"class.std::__1::vector.61" }
%"class.rtc::RefCountedBase.base" = type <{ i32 (...)**, %"class.webrtc::webrtc_impl::RefCounter" }>
%"class.webrtc::webrtc_impl::RefCounter" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.60" }
%"struct.std::__1::__atomic_base.60" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::vector.61" = type { %"class.std::__1::__vector_base.62" }
%"class.std::__1::__vector_base.62" = type { %"class.webrtc::RtpPacketInfo"*, %"class.webrtc::RtpPacketInfo"*, %"class.std::__1::__compressed_pair.80" }
%"class.webrtc::RtpPacketInfo" = type { i32, %"class.std::__1::vector.63", i32, %"class.absl::optional.70", %"class.absl::optional.75", %"class.absl::optional", %"class.webrtc::Timestamp" }
%"class.std::__1::vector.63" = type { %"class.std::__1::__vector_base.64" }
%"class.std::__1::__vector_base.64" = type { i32*, i32*, %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { i32* }
%"class.absl::optional.70" = type { %"class.absl::optional_internal::optional_data.71" }
%"class.absl::optional_internal::optional_data.71" = type { %"class.absl::optional_internal::optional_data_base.72" }
%"class.absl::optional_internal::optional_data_base.72" = type { %"class.absl::optional_internal::optional_data_dtor_base.73" }
%"class.absl::optional_internal::optional_data_dtor_base.73" = type { i8, %union.anon.74 }
%union.anon.74 = type { i8 }
%"class.absl::optional.75" = type { %"class.absl::optional_internal::optional_data.76" }
%"class.absl::optional_internal::optional_data.76" = type { %"class.absl::optional_internal::optional_data_base.77" }
%"class.absl::optional_internal::optional_data_base.77" = type { %"class.absl::optional_internal::optional_data_dtor_base.78" }
%"class.absl::optional_internal::optional_data_dtor_base.78" = type { i8, %union.anon.79 }
%union.anon.79 = type { %"struct.webrtc::AbsoluteCaptureTime" }
%"struct.webrtc::AbsoluteCaptureTime" = type { i64, %"class.absl::optional" }
%"class.webrtc::Timestamp" = type { %"class.webrtc::rtc_units_impl::UnitBase" }
%"class.webrtc::rtc_units_impl::UnitBase" = type { i64 }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.webrtc::RtpPacketInfo"* }
%"struct.webrtc::CodecSpecificInfo" = type { i32, %"union.webrtc::CodecSpecificInfoUnion", i8, %"class.absl::optional.85", %"class.absl::optional.116" }
%"union.webrtc::CodecSpecificInfoUnion" = type { %"struct.webrtc::CodecSpecificInfoVP9" }
%"struct.webrtc::CodecSpecificInfoVP9" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i64, i64, i8, [8 x i16], [8 x i16], %"struct.webrtc::GofInfoVP9", i8, [3 x i8], i8 }
%"class.absl::optional.85" = type { %"class.absl::optional_internal::optional_data.86" }
%"class.absl::optional_internal::optional_data.86" = type { %"class.absl::optional_internal::optional_data_base.87" }
%"class.absl::optional_internal::optional_data_base.87" = type { %"class.absl::optional_internal::optional_data_dtor_base.88" }
%"class.absl::optional_internal::optional_data_dtor_base.88" = type { i8, %union.anon.89 }
%union.anon.89 = type { %"struct.webrtc::GenericFrameInfo" }
%"struct.webrtc::GenericFrameInfo" = type { %"struct.webrtc::FrameDependencyTemplate", %"class.absl::InlinedVector.104", %"class.std::__1::vector.111", %"class.std::__1::bitset" }
%"struct.webrtc::FrameDependencyTemplate" = type { i32, i32, %"class.absl::InlinedVector.90", %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97" }
%"class.absl::InlinedVector.104" = type { %"class.absl::inlined_vector_internal::Storage.105" }
%"class.absl::inlined_vector_internal::Storage.105" = type { %"class.absl::container_internal::CompressedTuple.106", %"union.absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage, 8, std::__1::allocator<webrtc::CodecBufferUsage> >::Data" }
%"class.absl::container_internal::CompressedTuple.106" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.107" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.107" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" }
%"union.absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage, 8, std::__1::allocator<webrtc::CodecBufferUsage> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage, 8, std::__1::allocator<webrtc::CodecBufferUsage> >::Allocated", [48 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage, 8, std::__1::allocator<webrtc::CodecBufferUsage> >::Allocated" = type { %"struct.webrtc::CodecBufferUsage"*, i64 }
%"struct.webrtc::CodecBufferUsage" = type <{ i32, i8, i8, [2 x i8] }>
%"class.std::__1::vector.111" = type { i64*, i64, %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"class.absl::optional.116" = type { %"class.absl::optional_internal::optional_data.117" }
%"class.absl::optional_internal::optional_data.117" = type { %"class.absl::optional_internal::optional_data_base.118" }
%"class.absl::optional_internal::optional_data_base.118" = type { %"class.absl::optional_internal::optional_data_dtor_base.119" }
%"class.absl::optional_internal::optional_data_dtor_base.119" = type { i8, %union.anon.120 }
%union.anon.120 = type { %"struct.webrtc::FrameDependencyStructure" }
%"struct.webrtc::FrameDependencyStructure" = type { i32, i32, i32, %"class.absl::InlinedVector.121", %"class.absl::InlinedVector.123", %"class.std::__1::vector.130" }
%"class.absl::InlinedVector.121" = type { %"class.absl::inlined_vector_internal::Storage.122" }
%"class.absl::inlined_vector_internal::Storage.122" = type { %"class.absl::container_internal::CompressedTuple.99", %"union.absl::inlined_vector_internal::Storage<int, 10, std::__1::allocator<int> >::Data" }
%"union.absl::inlined_vector_internal::Storage<int, 10, std::__1::allocator<int> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<int, 10, std::__1::allocator<int> >::Allocated", [24 x i8] }
%"struct.absl::inlined_vector_internal::Storage<int, 10, std::__1::allocator<int> >::Allocated" = type { i32*, i64 }
%"class.absl::InlinedVector.123" = type { %"class.absl::inlined_vector_internal::Storage.124" }
%"class.absl::inlined_vector_internal::Storage.124" = type { %"class.absl::container_internal::CompressedTuple.125", %"union.absl::inlined_vector_internal::Storage<webrtc::RenderResolution, 4, std::__1::allocator<webrtc::RenderResolution> >::Data" }
%"class.absl::container_internal::CompressedTuple.125" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.126" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.126" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" }
%"union.absl::inlined_vector_internal::Storage<webrtc::RenderResolution, 4, std::__1::allocator<webrtc::RenderResolution> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::RenderResolution, 4, std::__1::allocator<webrtc::RenderResolution> >::Allocated", [16 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::RenderResolution, 4, std::__1::allocator<webrtc::RenderResolution> >::Allocated" = type { %"class.webrtc::RenderResolution"*, i64 }
%"class.webrtc::RenderResolution" = type { i32, i32 }
%"class.std::__1::vector.130" = type { %"class.std::__1::__vector_base.131" }
%"class.std::__1::__vector_base.131" = type { %"struct.webrtc::FrameDependencyTemplate"*, %"struct.webrtc::FrameDependencyTemplate"*, %"class.std::__1::__compressed_pair.132" }
%"class.std::__1::__compressed_pair.132" = type { %"struct.std::__1::__compressed_pair_elem.133" }
%"struct.std::__1::__compressed_pair_elem.133" = type { %"struct.webrtc::FrameDependencyTemplate"* }
%"struct.webrtc::RTPVideoHeaderVP8" = type { i8, i16, i16, i8, i8, i32, i32, i8 }
%"struct.webrtc::CodecSpecificInfoVP8" = type { i8, i8, i8, i8, i8, [3 x i64], i64, [3 x i64], i64 }
%"struct.webrtc::CodecSpecificInfoH264" = type { i32, i8, i8, i8 }
%"class.rtc::DiagnosticLogMessage" = type { i8*, i32, i32, i32, i32, i8*, i8, %"class.std::__1::basic_ostringstream" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>

$_ZNSt3__16vectorIN6webrtc23FrameDependencyTemplateENS_9allocatorIS2_EEE7reserveEm = comdat any

$_ZN4absl23inlined_vector_internal7StorageIN6webrtc27FrameDependenciesCalculator11BufferUsageELm4ENSt3__19allocatorIS4_EEE8InitFromERKS8_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageIlLm4ENSt3__19allocatorIlEEE8InitFromERKS5_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageINS_8optionalIlEELm4ENSt3__19allocatorIS3_EEE8InitFromERKS7_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageIN6webrtc27FrameDependenciesCalculator11BufferUsageELm4ENSt3__19allocatorIS4_EEE15DestroyContentsEv = comdat any

$_ZN4absl16variant_internal26TypedThrowBadVariantAccessIRN6webrtc17RTPVideoHeaderVP8EEET_v = comdat any

$_ZN4absl16variant_internal26TypedThrowBadVariantAccessIRN6webrtc17RTPVideoHeaderVP9EEET_v = comdat any

$_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE6AssignINS0_20IteratorValueAdapterIS6_PKS3_EEEEvT_m = comdat any

$_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE6AssignINS0_20IteratorValueAdapterIS4_PKlEEEEvT_m = comdat any

$_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE6AssignINS0_20IteratorValueAdapterIS4_PKiEEEEvT_m = comdat any

$_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15EmplaceBackSlowIJRKlEEERlDpOT_ = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15EmplaceBackSlowIJS3_EEERS3_DpOT_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15EmplaceBackSlowIJiEEERiDpOT_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE6AssignINS0_16CopyValueAdapterIS4_EEEEvT_m = comdat any

$_ZNSt3__16vectorIN6webrtc23FrameDependencyTemplateENS_9allocatorIS2_EEE22__construct_one_at_endIJRKS2_EEEvDpOT_ = comdat any

$_ZNSt3__16vectorIN6webrtc23FrameDependencyTemplateENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE8InitFromERKS7_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE8InitFromERKS5_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageIiLm10ENSt3__19allocatorIiEEE15EmplaceBackSlowIJRKiEEERiDpOT_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageIN6webrtc16RenderResolutionELm4ENSt3__19allocatorIS3_EEE15EmplaceBackSlowIJRKtSA_EEERS3_DpOT_ = comdat any

$_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15EmplaceBackSlowIJRKS3_EEERS3_DpOT_ = comdat any

$_ZNSt3__16vectorINS_5arrayIlLm8EEENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE6ResizeINS0_19DefaultValueAdapterIS4_EEEEvT_m = comdat any

@.str = private unnamed_addr constant [24 x i8] c"WebRTC-GenericPictureId\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"Enabled\00", align 1
@.str.2 = private unnamed_addr constant [31 x i8] c"WebRTC-Vp9DependencyDescriptor\00", align 1
@__const._ZN6webrtc16RtpPayloadParams17GetRtpVideoHeaderERKNS_12EncodedImageEPKNS_17CodecSpecificInfoEl.rtp_video_header = private unnamed_addr constant { { { { { i8, [7 x i8], %union.anon.141 } } } }, i32, i16, i16, i32, i8, i8, i8, i8, i8, [3 x i8], i32, %"struct.webrtc::VideoPlayoutDelay", { i16, i16, i16, i16, i16, i16, i8, [1 x i8] }, [2 x i8], { { { { i8, [3 x i8], { { i8, i8, i8, [1 x i8], i32, i32, i32, { { { { i8, [3 x i8], %union.anon.53 } } } } } } } } } }, { { { { i8, [1 x i8], %union.anon.58 } } } }, [4 x i8], { { { { { { i8, i8, i8, i8, i8, i8, i16, i16, i16, i8, i8, i8, i8, i8, i8, [3 x i8], [1 x i8], [3 x i16], [4 x i8], i64, i64, i8, [1 x i8], [8 x i16], [8 x i16], [6 x i8], { i64, [255 x i8], [255 x i8], [255 x i8], [255 x [3 x i8]], i16, [4 x i8] }, i8, [7 x i8] } } } }, i64 } } } { { { { { i8, [7 x i8], %union.anon.141 } } } } { { { { i8, [7 x i8], %union.anon.141 } } } { { { i8, [7 x i8], %union.anon.141 } } { { i8, [7 x i8], %union.anon.141 } { i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %union.anon.141 { %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo" { i64 -6148914691236517206, i32 -1431655766, i32 -1431655766, %"class.absl::InlinedVector.90" { %"class.absl::inlined_vector_internal::Storage.91" { %"class.absl::container_internal::CompressedTuple.92" { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.93" { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" { i64 -6148914691236517206 } } }, %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data" { %"struct.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Allocated" { i32* inttoptr (i64 -6148914691236517206 to i32*), i64 -6148914691236517206 }, [24 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA" } } }, %"class.absl::InlinedVector.142" { %"class.absl::inlined_vector_internal::Storage.143" { %"class.absl::container_internal::CompressedTuple.3" { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.4" { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" { i64 -6148914691236517206 } } }, %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data" { %"struct.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Allocated" { i64* inttoptr (i64 -6148914691236517206 to i64*), i64 -6148914691236517206 }, [24 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA\AA" } } }, %"class.absl::InlinedVector.97" { %"class.absl::inlined_vector_internal::Storage.98" { %"class.absl::container_internal::CompressedTuple.99" { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.100" { %"struct.absl::container_internal::internal_compressed_tuple::Storage.0" { i64 -6148914691236517206 } } }, %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data" { %"struct.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Allocated" { i32* inttoptr (i64 -6148914691236517206 to i32*), i64 -6148914691236517206 } } } }, %"class.std::__1::bitset" { %"class.std::__1::__bitset" { i64 -6148914691236517206 } } } } } } } }, i32 -1431655766, i16 -21846, i16 -21846, i32 -1431655766, i8 -86, i8 -86, i8 -86, i8 -86, i8 -86, [3 x i8] c"\AA\AA\AA", i32 -1431655766, %"struct.webrtc::VideoPlayoutDelay" { i32 -1431655766, i32 -1431655766 }, { i16, i16, i16, i16, i16, i16, i8, [1 x i8] } { i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i8 -86, [1 x i8] c"\AA" }, [2 x i8] c"\AA\AA", { { { { i8, [3 x i8], { { i8, i8, i8, [1 x i8], i32, i32, i32, { { { { i8, [3 x i8], %union.anon.53 } } } } } } } } } } { { { { i8, [3 x i8], { { i8, i8, i8, [1 x i8], i32, i32, i32, { { { { i8, [3 x i8], %union.anon.53 } } } } } } } } } { { { i8, [3 x i8], { { i8, i8, i8, [1 x i8], i32, i32, i32, { { { { i8, [3 x i8], %union.anon.53 } } } } } } } } { { i8, [3 x i8], { { i8, i8, i8, [1 x i8], i32, i32, i32, { { { { i8, [3 x i8], %union.anon.53 } } } } } } } { i8 -86, [3 x i8] c"\AA\AA\AA", { { i8, i8, i8, [1 x i8], i32, i32, i32, { { { { i8, [3 x i8], %union.anon.53 } } } } } } { { i8, i8, i8, [1 x i8], i32, i32, i32, { { { { i8, [3 x i8], %union.anon.53 } } } } } { i8 -86, i8 -86, i8 -86, [1 x i8] c"\AA", i32 -1431655766, i32 -1431655766, i32 -1431655766, { { { { i8, [3 x i8], %union.anon.53 } } } } { { { { i8, [3 x i8], %union.anon.53 } } } { { { i8, [3 x i8], %union.anon.53 } } { { i8, [3 x i8], %union.anon.53 } { i8 -86, [3 x i8] c"\AA\AA\AA", %union.anon.53 { %"struct.webrtc::HdrMetadata" { %"struct.webrtc::HdrMasteringMetadata" { %"struct.webrtc::HdrMasteringMetadata::Chromaticity" { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %"struct.webrtc::HdrMasteringMetadata::Chromaticity" { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %"struct.webrtc::HdrMasteringMetadata::Chromaticity" { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %"struct.webrtc::HdrMasteringMetadata::Chromaticity" { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, i32 -1431655766, i32 -1431655766 } } } } } } } } } } } }, { { { { i8, [1 x i8], %union.anon.58 } } } } { { { { i8, [1 x i8], %union.anon.58 } } } { { { i8, [1 x i8], %union.anon.58 } } { { i8, [1 x i8], %union.anon.58 } { i8 -86, [1 x i8] c"\AA", %union.anon.58 { i16 -21846 } } } } }, [4 x i8] c"\AA\AA\AA\AA", { { { { { { i8, i8, i8, i8, i8, i8, i16, i16, i16, i8, i8, i8, i8, i8, i8, [3 x i8], [1 x i8], [3 x i16], [4 x i8], i64, i64, i8, [1 x i8], [8 x i16], [8 x i16], [6 x i8], { i64, [255 x i8], [255 x i8], [255 x i8], [255 x [3 x i8]], i16, [4 x i8] }, i8, [7 x i8] } } } }, i64 } } { { { { { { i8, i8, i8, i8, i8, i8, i16, i16, i16, i8, i8, i8, i8, i8, i8, [3 x i8], [1 x i8], [3 x i16], [4 x i8], i64, i64, i8, [1 x i8], [8 x i16], [8 x i16], [6 x i8], { i64, [255 x i8], [255 x i8], [255 x i8], [255 x [3 x i8]], i16, [4 x i8] }, i8, [7 x i8] } } } }, i64 } { { { { { i8, i8, i8, i8, i8, i8, i16, i16, i16, i8, i8, i8, i8, i8, i8, [3 x i8], [1 x i8], [3 x i16], [4 x i8], i64, i64, i8, [1 x i8], [8 x i16], [8 x i16], [6 x i8], { i64, [255 x i8], [255 x i8], [255 x i8], [255 x [3 x i8]], i16, [4 x i8] }, i8, [7 x i8] } } } } { { { { i8, i8, i8, i8, i8, i8, i16, i16, i16, i8, i8, i8, i8, i8, i8, [3 x i8], [1 x i8], [3 x i16], [4 x i8], i64, i64, i8, [1 x i8], [8 x i16], [8 x i16], [6 x i8], { i64, [255 x i8], [255 x i8], [255 x i8], [255 x [3 x i8]], i16, [4 x i8] }, i8, [7 x i8] } } } { { { i8, i8, i8, i8, i8, i8, i16, i16, i16, i8, i8, i8, i8, i8, i8, [3 x i8], [1 x i8], [3 x i16], [4 x i8], i64, i64, i8, [1 x i8], [8 x i16], [8 x i16], [6 x i8], { i64, [255 x i8], [255 x i8], [255 x i8], [255 x [3 x i8]], i16, [4 x i8] }, i8, [7 x i8] } } { { i8, i8, i8, i8, i8, i8, i16, i16, i16, i8, i8, i8, i8, i8, i8, [3 x i8], [1 x i8], [3 x i16], [4 x i8], i64, i64, i8, [1 x i8], [8 x i16], [8 x i16], [6 x i8], { i64, [255 x i8], [255 x i8], [255 x i8], [255 x [3 x i8]], i16, [4 x i8] }, i8, [7 x i8] } { i8 -86, i8 -86, i8 -86, i8 -86, i8 -86, i8 -86, i16 -21846, i16 -21846, i16 -21846, i8 -86, i8 -86, i8 -86, i8 -86, i8 -86, i8 -86, [3 x i8] c"\AA\AA\AA", [1 x i8] c"\AA", [3 x i16] [i16 -21846, i16 -21846, i16 -21846], [4 x i8] c"\AA\AA\AA\AA", i64 -6148914691236517206, i64 -6148914691236517206, i8 -86, [1 x i8] c"\AA", [8 x i16] [i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846], [8 x i16] [i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846, i16 -21846], [6 x i8] c"\AA\AA\AA\AA\AA\AA", { i64, [255 x i8], [255 x i8], [255 x i8], [255 x [3 x i8]], i16, [4 x i8] } { i64 -6148914691236517206, [255 x i8] cx i8] cx i8] cx [3 x i8]] [[3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA", [3 x i8] c"\AA\AA\AA"], i16 -21846, [4 x i8] c"\AA\AA\AA\AA" }, i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA" } } } }, i64 -6148914691236517206 } } }, align 8
@.str.3 = private unnamed_addr constant [52 x i8] c"../../third_party/webrtc/call/rtp_payload_params.cc\00", align 1
@.str.4 = private unnamed_addr constant [84 x i8] c"Temporal and/or spatial index is too high to be used with generic frame descriptor.\00", align 1
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

@_ZN6webrtc16RtpPayloadParamsC1EjPKNS_15RtpPayloadStateERKNS_20WebRtcKeyValueConfigE = hidden unnamed_addr alias void (%"class.webrtc::RtpPayloadParams"*, i32, %"struct.webrtc::RtpPayloadState"*, %"class.webrtc::WebRtcKeyValueConfig"*), void (%"class.webrtc::RtpPayloadParams"*, i32, %"struct.webrtc::RtpPayloadState"*, %"class.webrtc::WebRtcKeyValueConfig"*)* @_ZN6webrtc16RtpPayloadParamsC2EjPKNS_15RtpPayloadStateERKNS_20WebRtcKeyValueConfigE
@_ZN6webrtc16RtpPayloadParamsC1ERKS0_ = hidden unnamed_addr alias void (%"class.webrtc::RtpPayloadParams"*, %"class.webrtc::RtpPayloadParams"*), void (%"class.webrtc::RtpPayloadParams"*, %"class.webrtc::RtpPayloadParams"*)* @_ZN6webrtc16RtpPayloadParamsC2ERKS0_
@_ZN6webrtc16RtpPayloadParamsD1Ev = hidden unnamed_addr alias void (%"class.webrtc::RtpPayloadParams"*), void (%"class.webrtc::RtpPayloadParams"*)* @_ZN6webrtc16RtpPayloadParamsD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16RtpPayloadParamsC2EjPKNS_15RtpPayloadStateERKNS_20WebRtcKeyValueConfigE(%"class.webrtc::RtpPayloadParams"*, i32, %"struct.webrtc::RtpPayloadState"* readonly, %"class.webrtc::WebRtcKeyValueConfig"* dereferenceable(8)) unnamed_addr #0 align 2 {
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.webrtc::Random", align 8
  %8 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %8, align 8
  %9 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %9, align 8
  %10 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 3
  %11 = bitcast %"class.std::__1::vector"* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 24, i1 false) #15
  %12 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 8
  store i32 %1, i32* %13, align 4
  %14 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 9, i32 0
  store i16 -1, i16* %14, align 8
  %15 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 9, i32 1
  store i8 0, i8* %15, align 2
  %16 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 9, i32 2
  store i64 0, i64* %16, align 8
  %17 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 10
  %18 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #15
  %19 = bitcast %"class.webrtc::WebRtcKeyValueConfig"* %3 to void (%"class.std::__1::basic_string"*, %"class.webrtc::WebRtcKeyValueConfig"*, i8*, i64)***
  %20 = load void (%"class.std::__1::basic_string"*, %"class.webrtc::WebRtcKeyValueConfig"*, i8*, i64)**, void (%"class.std::__1::basic_string"*, %"class.webrtc::WebRtcKeyValueConfig"*, i8*, i64)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.webrtc::WebRtcKeyValueConfig"*, i8*, i64)*, void (%"class.std::__1::basic_string"*, %"class.webrtc::WebRtcKeyValueConfig"*, i8*, i64)** %20, i64 2
  %22 = load void (%"class.std::__1::basic_string"*, %"class.webrtc::WebRtcKeyValueConfig"*, i8*, i64)*, void (%"class.std::__1::basic_string"*, %"class.webrtc::WebRtcKeyValueConfig"*, i8*, i64)** %21, align 8
  call void %22(%"class.std::__1::basic_string"* nonnull sret %5, %"class.webrtc::WebRtcKeyValueConfig"* %3, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0), i64 23) #15
  %23 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %24 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %23, i64 0, i32 1, i32 0
  %25 = load i8, i8* %24, align 1
  %26 = icmp slt i8 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %4
  %28 = zext i8 %25 to i64
  %29 = ptrtoint %"class.std::__1::basic_string"* %5 to i64
  br label %37

30:                                               ; preds = %4
  %31 = bitcast %"class.std::__1::basic_string"* %5 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = icmp sgt i64 %34, -1
  br i1 %35, label %37, label %36, !prof !2

36:                                               ; preds = %30
  call void @llvm.trap() #15
  unreachable

37:                                               ; preds = %30, %27
  %38 = phi i64 [ %32, %30 ], [ %29, %27 ]
  %39 = phi i64 [ %34, %30 ], [ %28, %27 ]
  %40 = icmp ult i64 %39, 7
  br i1 %40, label %46, label %41

41:                                               ; preds = %37
  %42 = inttoptr i64 %38 to i8*
  %43 = call i32 @bcmp(i8* %42, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i64 7) #15
  %44 = icmp eq i32 %43, 0
  %45 = zext i1 %44 to i8
  br label %46

46:                                               ; preds = %37, %41
  %47 = phi i8 [ 0, %37 ], [ %45, %41 ]
  br i1 %26, label %48, label %51

48:                                               ; preds = %46
  %49 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  call void @_ZdlPv(i8* %50) #16
  br label %51

51:                                               ; preds = %46, %48
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #15
  store i8 %47, i8* %17, align 8
  %52 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 11
  %53 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %53) #15
  %54 = load void (%"class.std::__1::basic_string"*, %"class.webrtc::WebRtcKeyValueConfig"*, i8*, i64)**, void (%"class.std::__1::basic_string"*, %"class.webrtc::WebRtcKeyValueConfig"*, i8*, i64)*** %19, align 8
  %55 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.webrtc::WebRtcKeyValueConfig"*, i8*, i64)*, void (%"class.std::__1::basic_string"*, %"class.webrtc::WebRtcKeyValueConfig"*, i8*, i64)** %54, i64 2
  %56 = load void (%"class.std::__1::basic_string"*, %"class.webrtc::WebRtcKeyValueConfig"*, i8*, i64)*, void (%"class.std::__1::basic_string"*, %"class.webrtc::WebRtcKeyValueConfig"*, i8*, i64)** %55, align 8
  call void %56(%"class.std::__1::basic_string"* nonnull sret %6, %"class.webrtc::WebRtcKeyValueConfig"* %3, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0), i64 30) #15
  %57 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %58 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %57, i64 0, i32 1, i32 0
  %59 = load i8, i8* %58, align 1
  %60 = icmp slt i8 %59, 0
  br i1 %60, label %64, label %61

61:                                               ; preds = %51
  %62 = zext i8 %59 to i64
  %63 = ptrtoint %"class.std::__1::basic_string"* %6 to i64
  br label %71

64:                                               ; preds = %51
  %65 = bitcast %"class.std::__1::basic_string"* %6 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = icmp sgt i64 %68, -1
  br i1 %69, label %71, label %70, !prof !2

70:                                               ; preds = %64
  call void @llvm.trap() #15
  unreachable

71:                                               ; preds = %64, %61
  %72 = phi i64 [ %66, %64 ], [ %63, %61 ]
  %73 = phi i64 [ %68, %64 ], [ %62, %61 ]
  %74 = icmp ult i64 %73, 7
  br i1 %74, label %80, label %75

75:                                               ; preds = %71
  %76 = inttoptr i64 %72 to i8*
  %77 = call i32 @bcmp(i8* %76, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i64 7) #15
  %78 = icmp eq i32 %77, 0
  %79 = zext i1 %78 to i8
  br label %80

80:                                               ; preds = %71, %75
  %81 = phi i8 [ 0, %71 ], [ %79, %75 ]
  br i1 %60, label %82, label %85

82:                                               ; preds = %80
  %83 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %84 = load i8*, i8** %83, align 8
  call void @_ZdlPv(i8* %84) #16
  br label %85

85:                                               ; preds = %80, %82
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %53) #15
  store i8 %81, i8* %52, align 1
  %86 = getelementptr %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 0
  %87 = bitcast %"struct.std::__1::array.15"* %86 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %87, i8 -1, i64 512, i1 false)
  %88 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 5, i32 0, i64 0
  %89 = bitcast %"class.webrtc::Random"* %7 to i8*
  %90 = bitcast i64* %88 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %90, i8 -1, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %89) #15
  %91 = getelementptr inbounds %"class.webrtc::Random", %"class.webrtc::Random"* %7, i64 0, i32 0
  store i64 -6148914691236517206, i64* %91, align 8
  %92 = call i64 @_ZN3rtc10TimeMicrosEv() #15
  call void @_ZN6webrtc6RandomC1Em(%"class.webrtc::Random"* nonnull %7, i64 %92) #15
  %93 = icmp eq %"struct.webrtc::RtpPayloadState"* %2, null
  br i1 %93, label %99, label %94

94:                                               ; preds = %85
  %95 = getelementptr inbounds %"struct.webrtc::RtpPayloadState", %"struct.webrtc::RtpPayloadState"* %2, i64 0, i32 0
  %96 = load i16, i16* %95, align 8
  store i16 %96, i16* %14, align 8
  %97 = getelementptr inbounds %"struct.webrtc::RtpPayloadState", %"struct.webrtc::RtpPayloadState"* %2, i64 0, i32 1
  %98 = load i8, i8* %97, align 2
  br label %118

99:                                               ; preds = %85
  %100 = load i64, i64* %91, align 8
  %101 = lshr i64 %100, 12
  %102 = xor i64 %101, %100
  %103 = shl i64 %102, 25
  %104 = xor i64 %103, %102
  %105 = lshr i64 %104, 27
  %106 = xor i64 %105, %104
  %107 = trunc i64 %106 to i16
  %108 = mul i16 %107, -8931
  %109 = and i16 %108, 32767
  store i16 %109, i16* %14, align 8
  %110 = lshr i64 %106, 12
  %111 = xor i64 %110, %106
  %112 = shl i64 %111, 25
  %113 = xor i64 %112, %111
  %114 = lshr i64 %113, 27
  %115 = xor i64 %114, %113
  store i64 %115, i64* %91, align 8
  %116 = trunc i64 %115 to i8
  %117 = mul i8 %116, 29
  br label %118

118:                                              ; preds = %99, %94
  %119 = phi i8 [ %98, %94 ], [ %117, %99 ]
  store i8 %119, i8* %15, align 2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %89) #15
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i64 @_ZN3rtc10TimeMicrosEv() local_unnamed_addr #2

declare void @_ZN6webrtc6RandomC1Em(%"class.webrtc::Random"*, i64) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16RtpPayloadParamsC2ERKS0_(%"class.webrtc::RtpPayloadParams"*, %"class.webrtc::RtpPayloadParams"* dereferenceable(960)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %3, align 8
  %4 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, 2
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %1, i64 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc27FrameDependenciesCalculator11BufferUsageELm4ENSt3__19allocatorIS4_EEE8InitFromERKS8_(%"class.absl::inlined_vector_internal::Storage"* %9, %"class.absl::inlined_vector_internal::Storage"* dereferenceable(232) %8) #15
  br label %10

10:                                               ; preds = %2, %7
  %11 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 1
  %12 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %1, i64 0, i32 1
  %13 = getelementptr inbounds %"class.webrtc::ChainDiffCalculator", %"class.webrtc::ChainDiffCalculator"* %12, i64 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.webrtc::ChainDiffCalculator", %"class.webrtc::ChainDiffCalculator"* %11, i64 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.webrtc::ChainDiffCalculator", %"class.webrtc::ChainDiffCalculator"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %15, align 8
  %16 = getelementptr inbounds %"class.webrtc::ChainDiffCalculator", %"class.webrtc::ChainDiffCalculator"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = icmp ult i64 %17, 2
  br i1 %18, label %28, label %19

19:                                               ; preds = %10
  %20 = and i64 %17, 1
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %22, label %27

22:                                               ; preds = %19
  store i64 %17, i64* %15, align 8
  %23 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %1, i64 0, i32 1, i32 0, i32 0, i32 1
  %24 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %25 = bitcast %"union.absl::inlined_vector_internal::Storage<absl::optional<long>, 4, std::__1::allocator<absl::optional<long> > >::Data"* %24 to i8*
  %26 = bitcast %"union.absl::inlined_vector_internal::Storage<absl::optional<long>, 4, std::__1::allocator<absl::optional<long> > >::Data"* %23 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 64, i1 false) #15
  br label %28

27:                                               ; preds = %19
  tail call void @_ZN4absl23inlined_vector_internal7StorageINS_8optionalIlEELm4ENSt3__19allocatorIS3_EEE8InitFromERKS7_(%"class.absl::inlined_vector_internal::Storage.9"* %14, %"class.absl::inlined_vector_internal::Storage.9"* dereferenceable(72) %13) #15
  br label %28

28:                                               ; preds = %10, %22, %27
  %29 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2
  %30 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %1, i64 0, i32 2
  %31 = bitcast %"struct.std::__1::array"* %29 to i8*
  %32 = bitcast %"struct.std::__1::array"* %30 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 512, i1 false)
  %33 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 3
  %34 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %1, i64 0, i32 3
  %35 = bitcast %"class.std::__1::vector"* %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 24, i1 false) #15
  %36 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %1, i64 0, i32 3, i32 0, i32 1
  %37 = bitcast %"struct.std::__1::array.15"** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"class.std::__1::vector"* %34 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = ashr exact i64 %41, 6
  %43 = icmp eq i64 %41, 0
  br i1 %43, label %71, label %44

44:                                               ; preds = %28
  %45 = icmp ugt i64 %42, 288230376151711743
  br i1 %45, label %46, label %48

46:                                               ; preds = %44
  %47 = bitcast %"class.std::__1::vector"* %33 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %47) #17
  unreachable

48:                                               ; preds = %44
  %49 = tail call i8* @_Znwm(i64 %41) #16
  %50 = bitcast i8* %49 to %"struct.std::__1::array.15"*
  %51 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 3, i32 0, i32 1
  %52 = bitcast %"struct.std::__1::array.15"** %51 to i8**
  store i8* %49, i8** %52, align 8
  %53 = bitcast %"class.std::__1::vector"* %33 to i8**
  store i8* %49, i8** %53, align 8
  %54 = getelementptr inbounds %"struct.std::__1::array.15", %"struct.std::__1::array.15"* %50, i64 %42
  %55 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0
  store %"struct.std::__1::array.15"* %54, %"struct.std::__1::array.15"** %55, align 8
  %56 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %34, i64 0, i32 0, i32 0
  %57 = load %"struct.std::__1::array.15"*, %"struct.std::__1::array.15"** %56, align 8
  %58 = load i64, i64* %37, align 8
  %59 = bitcast %"struct.std::__1::array.15"** %51 to i64*
  %60 = ptrtoint i8* %49 to i64
  %61 = ptrtoint %"struct.std::__1::array.15"* %57 to i64
  %62 = sub i64 %58, %61
  %63 = icmp sgt i64 %62, 0
  br i1 %63, label %64, label %69

64:                                               ; preds = %48
  %65 = lshr exact i64 %62, 6
  %66 = bitcast %"struct.std::__1::array.15"* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %49, i8* align 8 %66, i64 %62, i1 false) #15
  %67 = getelementptr inbounds %"struct.std::__1::array.15", %"struct.std::__1::array.15"* %50, i64 %65
  %68 = ptrtoint %"struct.std::__1::array.15"* %67 to i64
  br label %69

69:                                               ; preds = %64, %48
  %70 = phi i64 [ %68, %64 ], [ %60, %48 ]
  store i64 %70, i64* %59, align 8
  br label %71

71:                                               ; preds = %28, %69
  %72 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 4
  %73 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %1, i64 0, i32 4
  %74 = bitcast %"struct.std::__1::array.15"* %72 to i8*
  %75 = bitcast %"struct.std::__1::array.15"* %73 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 114, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16RtpPayloadParamsD2Ev(%"class.webrtc::RtpPayloadParams"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 3, i32 0, i32 0
  %3 = load %"struct.std::__1::array.15"*, %"struct.std::__1::array.15"** %2, align 8
  %4 = icmp eq %"struct.std::__1::array.15"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %"struct.std::__1::array.15"* %3 to i64
  %7 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 3, i32 0, i32 1
  %8 = bitcast %"struct.std::__1::array.15"** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %"struct.std::__1::array.15"* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #16
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = and i64 %12, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %19, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 1, i32 0, i32 0, i32 1, i32 0, i32 0
  %17 = load %"class.absl::optional"*, %"class.absl::optional"** %16, align 8
  %18 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %17, i64 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZdlPv(i8* %18) #16
  br label %19

19:                                               ; preds = %10, %15
  %20 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %25, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc27FrameDependenciesCalculator11BufferUsageELm4ENSt3__19allocatorIS4_EEE15DestroyContentsEv(%"class.absl::inlined_vector_internal::Storage"* %24) #15
  br label %25

25:                                               ; preds = %19, %23
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16RtpPayloadParams17GetRtpVideoHeaderERKNS_12EncodedImageEPKNS_17CodecSpecificInfoEl(%"struct.webrtc::RTPVideoHeader"* noalias sret, %"class.webrtc::RtpPayloadParams"*, %"class.webrtc::EncodedImage"* dereferenceable(272), %"struct.webrtc::CodecSpecificInfo"*, i64) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.absl::optional.44", align 4
  %7 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 getelementptr inbounds ({ { { { { i8, [7 x i8], %union.anon.141 } } } }, i32, i16, i16, i32, i8, i8, i8, i8, i8, [3 x i8], i32, %"struct.webrtc::VideoPlayoutDelay", { i16, i16, i16, i16, i16, i16, i8, [1 x i8] }, [2 x i8], { { { { i8, [3 x i8], { { i8, i8, i8, [1 x i8], i32, i32, i32, { { { { i8, [3 x i8], %union.anon.53 } } } } } } } } } }, { { { { i8, [1 x i8], %union.anon.58 } } } }, [4 x i8], { { { { { { i8, i8, i8, i8, i8, i8, i16, i16, i16, i8, i8, i8, i8, i8, i8, [3 x i8], [1 x i8], [3 x i16], [4 x i8], i64, i64, i8, [1 x i8], [8 x i16], [8 x i16], [6 x i8], { i64, [255 x i8], [255 x i8], [255 x i8], [255 x [3 x i8]], i16, [4 x i8] }, i8, [7 x i8] } } } }, i64 } } }, { { { { { i8, [7 x i8], %union.anon.141 } } } }, i32, i16, i16, i32, i8, i8, i8, i8, i8, [3 x i8], i32, %"struct.webrtc::VideoPlayoutDelay", { i16, i16, i16, i16, i16, i16, i8, [1 x i8] }, [2 x i8], { { { { i8, [3 x i8], { { i8, i8, i8, [1 x i8], i32, i32, i32, { { { { i8, [3 x i8], %union.anon.53 } } } } } } } } } }, { { { { i8, [1 x i8], %union.anon.58 } } } }, [4 x i8], { { { { { { i8, i8, i8, i8, i8, i8, i16, i16, i16, i8, i8, i8, i8, i8, i8, [3 x i8], [1 x i8], [3 x i16], [4 x i8], i64, i64, i8, [1 x i8], [8 x i16], [8 x i16], [6 x i8], { i64, [255 x i8], [255 x i8], [255 x i8], [255 x [3 x i8]], i16, [4 x i8] }, i8, [7 x i8] } } } }, i64 } } }* @__const._ZN6webrtc16RtpPayloadParams17GetRtpVideoHeaderERKNS_12EncodedImageEPKNS_17CodecSpecificInfoEl.rtp_video_header, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0), i64 1928, i1 false)
  tail call void @_ZN6webrtc14RTPVideoHeaderC1Ev(%"struct.webrtc::RTPVideoHeader"* %0) #15
  %8 = icmp ne %"struct.webrtc::CodecSpecificInfo"* %3, null
  br i1 %8, label %9, label %251

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.webrtc::EncodedImage", %"class.webrtc::EncodedImage"* %2, i64 0, i32 14
  %11 = bitcast %"class.absl::optional.31"* %10 to i64*
  %12 = load i64, i64* %11, align 4
  %13 = trunc i64 %12 to i8
  %14 = lshr i64 %12, 32
  %15 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 0
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 10
  store i32 %16, i32* %17, align 4
  %18 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 2
  %19 = load i8, i8* %18, align 8, !range !3
  %20 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 8
  store i8 %19, i8* %20, align 1
  switch i32 %16, label %251 [
    i32 1, label %21
    i32 2, label %51
    i32 4, label %234
    i32 5, label %246
    i32 0, label %246
  ]

21:                                               ; preds = %9
  %22 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15
  %23 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 1
  %24 = getelementptr inbounds %"class.absl::variant", %"class.absl::variant"* %22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = bitcast %"class.absl::variant"* %22 to %"struct.webrtc::RTPVideoHeaderVP8"*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 20, i1 false) #15
  store i64 1, i64* %23, align 8
  %26 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %27 = bitcast i8* %26 to i16*
  store i16 -1, i16* %27, align 2
  %28 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4
  %29 = bitcast i8* %28 to i16*
  store i16 -1, i16* %29, align 4
  %30 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6
  %31 = bitcast i16* %30 to i8*
  %32 = getelementptr inbounds %"struct.webrtc::RTPVideoHeaderVP8", %"struct.webrtc::RTPVideoHeaderVP8"* %25, i64 0, i32 4
  %33 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7
  %34 = bitcast i16* %33 to i32*
  %35 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 9
  %36 = bitcast i8* %35 to i32*
  store i32 0, i32* %36, align 4
  %37 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 13
  store i8 0, i8* %37, align 8
  %38 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 0
  %39 = load i8, i8* %38, align 8, !range !3
  store i8 %39, i8* %24, align 8
  %40 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 1
  %41 = load i8, i8* %40, align 1
  store i8 %41, i8* %31, align 2
  %42 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 2
  %43 = load i8, i8* %42, align 2, !range !3
  store i8 %43, i8* %32, align 1
  %44 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 3
  %45 = load i8, i8* %44, align 1
  %46 = sext i8 %45 to i32
  store i32 %46, i32* %34, align 8
  %47 = icmp eq i8 %13, 0
  %48 = trunc i64 %14 to i8
  %49 = select i1 %47, i8 0, i8 %48
  %50 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 9
  store i8 %49, i8* %50, align 8
  br label %251

51:                                               ; preds = %9
  %52 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 1
  %53 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 1640, i1 false) #15
  store i64 2, i64* %52, align 8
  %54 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 6, i1 false) #15
  store i16 -1, i16* %54, align 2
  %55 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7
  store i16 32767, i16* %55, align 8
  %56 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8
  store i16 -1, i16* %56, align 2
  %57 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 9
  %58 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 10
  %59 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 11
  %60 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 12
  %61 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 13
  %62 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 14
  store i8 0, i8* %62, align 1
  %63 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 17
  %64 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 23
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 1
  %66 = load i8, i8* %65, align 1, !range !3
  store i8 %66, i8* %53, align 8
  %67 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 2
  %68 = load i8, i8* %67, align 2, !range !3
  %69 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i8 %68, i8* %69, align 1
  %70 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 3
  %71 = load i8, i8* %70, align 1, !range !3
  %72 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4
  store i8 %71, i8* %72, align 4
  %73 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 4
  %74 = load i8, i8* %73, align 4, !range !3
  %75 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5
  store i8 %74, i8* %75, align 1
  %76 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 5
  %77 = load i8, i8* %76, align 1
  store i8 %77, i8* %57, align 4
  %78 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 6
  %79 = load i8, i8* %78, align 2, !range !3
  store i8 %79, i8* %59, align 2
  %80 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 7
  %81 = load i8, i8* %80, align 1, !range !3
  store i8 %81, i8* %60, align 1
  %82 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 8
  %83 = load i8, i8* %82, align 8
  store i8 %83, i8* %61, align 8
  %84 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 9
  %85 = bitcast i64* %84 to <2 x i64>*
  %86 = load <2 x i64>, <2 x i64>* %85, align 8
  %87 = bitcast i64* %63 to <2 x i64>*
  store <2 x i64> %86, <2 x i64>* %87, align 8
  %88 = extractelement <2 x i64> %86, i32 0
  %89 = icmp ugt i64 %88, 1
  %90 = icmp eq i8 %13, 0
  %91 = trunc i64 %14 to i8
  %92 = select i1 %90, i8 -1, i8 %91
  %93 = select i1 %89, i8 %92, i8 -1
  store i8 %93, i8* %58, align 1
  %94 = icmp eq i8 %71, 0
  br i1 %94, label %225, label %95

95:                                               ; preds = %51
  %96 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 11
  %97 = load i8, i8* %96, align 8, !range !3
  %98 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 19
  store i8 %97, i8* %98, align 8
  %99 = icmp ne i8 %97, 0
  %100 = icmp ne i64 %88, 0
  %101 = and i1 %100, %99
  br i1 %101, label %102, label %195

102:                                              ; preds = %95
  %103 = icmp ult i64 %88, 8
  br i1 %103, label %183, label %104

104:                                              ; preds = %102
  %105 = and i64 %88, -8
  %106 = add i64 %105, -8
  %107 = lshr exact i64 %106, 3
  %108 = add nuw nsw i64 %107, 1
  %109 = and i64 %108, 3
  %110 = icmp ult i64 %106, 24
  br i1 %110, label %162, label %111

111:                                              ; preds = %104
  %112 = sub nsw i64 %108, %109
  br label %113

113:                                              ; preds = %113, %111
  %114 = phi i64 [ 0, %111 ], [ %159, %113 ]
  %115 = phi i64 [ %112, %111 ], [ %160, %113 ]
  %116 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 12, i64 %114
  %117 = bitcast i16* %116 to <8 x i16>*
  %118 = load <8 x i16>, <8 x i16>* %117, align 2
  %119 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i64 %114
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %118, <8 x i16>* %120, align 2
  %121 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 13, i64 %114
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2
  %124 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 21, i64 %114
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %125, align 2
  %126 = or i64 %114, 8
  %127 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 12, i64 %126
  %128 = bitcast i16* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 2
  %130 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i64 %126
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %129, <8 x i16>* %131, align 2
  %132 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 13, i64 %126
  %133 = bitcast i16* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2
  %135 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 21, i64 %126
  %136 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %136, align 2
  %137 = or i64 %114, 16
  %138 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 12, i64 %137
  %139 = bitcast i16* %138 to <8 x i16>*
  %140 = load <8 x i16>, <8 x i16>* %139, align 2
  %141 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i64 %137
  %142 = bitcast i16* %141 to <8 x i16>*
  store <8 x i16> %140, <8 x i16>* %142, align 2
  %143 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 13, i64 %137
  %144 = bitcast i16* %143 to <8 x i16>*
  %145 = load <8 x i16>, <8 x i16>* %144, align 2
  %146 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 21, i64 %137
  %147 = bitcast i16* %146 to <8 x i16>*
  store <8 x i16> %145, <8 x i16>* %147, align 2
  %148 = or i64 %114, 24
  %149 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 12, i64 %148
  %150 = bitcast i16* %149 to <8 x i16>*
  %151 = load <8 x i16>, <8 x i16>* %150, align 2
  %152 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i64 %148
  %153 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %151, <8 x i16>* %153, align 2
  %154 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 13, i64 %148
  %155 = bitcast i16* %154 to <8 x i16>*
  %156 = load <8 x i16>, <8 x i16>* %155, align 2
  %157 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 21, i64 %148
  %158 = bitcast i16* %157 to <8 x i16>*
  store <8 x i16> %156, <8 x i16>* %158, align 2
  %159 = add i64 %114, 32
  %160 = add i64 %115, -4
  %161 = icmp eq i64 %160, 0
  br i1 %161, label %162, label %113, !llvm.loop !4

162:                                              ; preds = %113, %104
  %163 = phi i64 [ 0, %104 ], [ %159, %113 ]
  %164 = icmp eq i64 %109, 0
  br i1 %164, label %181, label %165

165:                                              ; preds = %162, %165
  %166 = phi i64 [ %178, %165 ], [ %163, %162 ]
  %167 = phi i64 [ %179, %165 ], [ %109, %162 ]
  %168 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 12, i64 %166
  %169 = bitcast i16* %168 to <8 x i16>*
  %170 = load <8 x i16>, <8 x i16>* %169, align 2
  %171 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i64 %166
  %172 = bitcast i16* %171 to <8 x i16>*
  store <8 x i16> %170, <8 x i16>* %172, align 2
  %173 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 13, i64 %166
  %174 = bitcast i16* %173 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2
  %176 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 21, i64 %166
  %177 = bitcast i16* %176 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %177, align 2
  %178 = add i64 %166, 8
  %179 = add i64 %167, -1
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %181, label %165, !llvm.loop !6

181:                                              ; preds = %165, %162
  %182 = icmp eq i64 %88, %105
  br i1 %182, label %195, label %183

183:                                              ; preds = %181, %102
  %184 = phi i64 [ 0, %102 ], [ %105, %181 ]
  br label %185

185:                                              ; preds = %183, %185
  %186 = phi i64 [ %193, %185 ], [ %184, %183 ]
  %187 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 12, i64 %186
  %188 = load i16, i16* %187, align 2
  %189 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i64 %186
  store i16 %188, i16* %189, align 2
  %190 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 13, i64 %186
  %191 = load i16, i16* %190, align 2
  %192 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 21, i64 %186
  store i16 %191, i16* %192, align 2
  %193 = add nuw i64 %186, 1
  %194 = icmp eq i64 %193, %88
  br i1 %194, label %195, label %185, !llvm.loop !8

195:                                              ; preds = %185, %181, %95
  %196 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 14, i32 0
  %197 = load i64, i64* %196, align 8
  %198 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 22, i32 0
  store i64 %197, i64* %198, align 8
  %199 = icmp eq i64 %197, 0
  br i1 %199, label %225, label %200

200:                                              ; preds = %195, %212
  %201 = phi i64 [ %213, %212 ], [ 0, %195 ]
  %202 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 14, i32 1, i64 %201
  %203 = load i8, i8* %202, align 1
  %204 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 22, i32 1, i64 %201
  store i8 %203, i8* %204, align 1
  %205 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 14, i32 2, i64 %201
  %206 = load i8, i8* %205, align 1, !range !3
  %207 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 22, i32 2, i64 %201
  store i8 %206, i8* %207, align 1
  %208 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 14, i32 3, i64 %201
  %209 = load i8, i8* %208, align 1
  %210 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 22, i32 3, i64 %201
  store i8 %209, i8* %210, align 1
  %211 = icmp eq i8 %209, 0
  br i1 %211, label %212, label %216

212:                                              ; preds = %216, %200
  %213 = add nuw i64 %201, 1
  %214 = load i64, i64* %198, align 8
  %215 = icmp ult i64 %213, %214
  br i1 %215, label %200, label %225

216:                                              ; preds = %200, %216
  %217 = phi i64 [ %221, %216 ], [ 0, %200 ]
  %218 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 14, i32 4, i64 %201, i64 %217
  %219 = load i8, i8* %218, align 1
  %220 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 22, i32 4, i64 %201, i64 %217
  store i8 %219, i8* %220, align 1
  %221 = add nuw nsw i64 %217, 1
  %222 = load i8, i8* %210, align 1
  %223 = zext i8 %222 to i64
  %224 = icmp ult i64 %221, %223
  br i1 %224, label %216, label %212

225:                                              ; preds = %212, %195, %51
  %226 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 15
  %227 = load i8, i8* %226, align 8
  store i8 %227, i8* %62, align 1
  %228 = icmp eq i8 %227, 0
  br i1 %228, label %233, label %229

229:                                              ; preds = %225
  %230 = zext i8 %227 to i64
  %231 = getelementptr %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 15, i64 0
  %232 = getelementptr %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 16, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %231, i8* align 1 %232, i64 %230, i1 false)
  br label %233

233:                                              ; preds = %229, %225
  store i8 %19, i8* %64, align 8
  br label %251

234:                                              ; preds = %9
  %235 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 1
  %236 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %236, i8 0, i64 144, i1 false) #15
  store i64 3, i64* %235, align 8
  %237 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1
  %238 = bitcast %"union.webrtc::CodecSpecificInfoUnion"* %237 to i32*
  %239 = load i32, i32* %238, align 8
  %240 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 22, i32 1, i64 40
  %241 = bitcast i8* %240 to i32*
  store i32 %239, i32* %241, align 8
  %242 = icmp eq i8 %13, 0
  %243 = trunc i64 %14 to i8
  %244 = select i1 %242, i8 0, i8 %243
  %245 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 9
  store i8 %244, i8* %245, align 8
  br label %251

246:                                              ; preds = %9, %9
  store i32 0, i32* %17, align 4
  %247 = icmp eq i8 %13, 0
  %248 = trunc i64 %14 to i8
  %249 = select i1 %247, i8 0, i8 %248
  %250 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 9
  store i8 %249, i8* %250, align 8
  br label %251

251:                                              ; preds = %246, %234, %233, %21, %9, %5
  %252 = getelementptr inbounds %"class.webrtc::EncodedImage", %"class.webrtc::EncodedImage"* %2, i64 0, i32 4
  %253 = load i32, i32* %252, align 8
  %254 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 1
  store i32 %253, i32* %254, align 8
  %255 = getelementptr inbounds %"class.webrtc::EncodedImage", %"class.webrtc::EncodedImage"* %2, i64 0, i32 5
  %256 = load i32, i32* %255, align 4
  %257 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 4
  store i32 %256, i32* %257, align 8
  %258 = getelementptr inbounds %"class.webrtc::EncodedImage", %"class.webrtc::EncodedImage"* %2, i64 0, i32 6
  %259 = load i8, i8* %258, align 8
  %260 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 5
  store i8 %259, i8* %260, align 4
  %261 = getelementptr inbounds %"class.webrtc::EncodedImage", %"class.webrtc::EncodedImage"* %2, i64 0, i32 9
  %262 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 11
  %263 = bitcast %"struct.webrtc::VideoPlayoutDelay"* %261 to i64*
  %264 = bitcast %"struct.webrtc::VideoPlayoutDelay"* %262 to i64*
  %265 = load i64, i64* %263, align 4
  store i64 %265, i64* %264, align 8
  %266 = getelementptr inbounds %"class.webrtc::EncodedImage", %"class.webrtc::EncodedImage"* %2, i64 0, i32 0
  %267 = load i32, i32* %266, align 8
  %268 = trunc i32 %267 to i16
  %269 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 2
  store i16 %268, i16* %269, align 4
  %270 = getelementptr inbounds %"class.webrtc::EncodedImage", %"class.webrtc::EncodedImage"* %2, i64 0, i32 1
  %271 = load i32, i32* %270, align 4
  %272 = trunc i32 %271 to i16
  %273 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 3
  store i16 %272, i16* %273, align 2
  %274 = getelementptr inbounds %"class.absl::optional.44", %"class.absl::optional.44"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %274) #15
  %275 = getelementptr inbounds %"class.webrtc::EncodedImage", %"class.webrtc::EncodedImage"* %2, i64 0, i32 17, i32 0, i32 0, i32 0, i32 0
  %276 = load i8, i8* %275, align 4, !range !3
  %277 = icmp eq i8 %276, 0
  %278 = getelementptr inbounds %"class.webrtc::EncodedImage", %"class.webrtc::EncodedImage"* %2, i64 0, i32 17, i32 0, i32 0, i32 0, i32 1, i32 0
  %279 = icmp eq %"class.webrtc::ColorSpace"* %278, null
  %280 = or i1 %279, %277
  br i1 %280, label %281, label %283

281:                                              ; preds = %251
  store i8 0, i8* %274, align 4
  %282 = getelementptr inbounds %"class.absl::optional.44", %"class.absl::optional.44"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 4 %282, i8 0, i64 68, i1 false) #15
  br label %297

283:                                              ; preds = %251
  store i8 1, i8* %274, align 4, !alias.scope !10
  %284 = getelementptr inbounds %"class.absl::optional.44", %"class.absl::optional.44"* %6, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  call void @_ZN6webrtc10ColorSpaceC1ERKS0_(%"class.webrtc::ColorSpace"* %284, %"class.webrtc::ColorSpace"* nonnull dereferenceable(68) %278) #15
  %285 = load i8, i8* %274, align 4
  %286 = icmp eq i8 %285, 0
  br i1 %286, label %297, label %287

287:                                              ; preds = %283
  %288 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  %289 = load i8, i8* %288, align 8, !range !3
  %290 = icmp eq i8 %289, 0
  br i1 %290, label %294, label %291

291:                                              ; preds = %287
  %292 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0
  %293 = call dereferenceable(68) %"class.webrtc::ColorSpace"* @_ZN6webrtc10ColorSpaceaSERKS0_(%"class.webrtc::ColorSpace"* %292, %"class.webrtc::ColorSpace"* dereferenceable(68) %284) #15
  br label %299

294:                                              ; preds = %287
  %295 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %296 = bitcast i8* %295 to %"class.webrtc::ColorSpace"*
  call void @_ZN6webrtc10ColorSpaceC1EOS0_(%"class.webrtc::ColorSpace"* %296, %"class.webrtc::ColorSpace"* dereferenceable(68) %284) #15
  store i8 1, i8* %288, align 8
  br label %299

297:                                              ; preds = %281, %283
  %298 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %298, align 8
  br label %299

299:                                              ; preds = %291, %294, %297
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %274) #15
  %300 = getelementptr inbounds %"class.webrtc::EncodedImage", %"class.webrtc::EncodedImage"* %2, i64 0, i32 18
  %301 = bitcast %"class.absl::optional.54"* %300 to i32*
  %302 = load i32, i32* %301, align 8
  %303 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 14
  %304 = bitcast %"class.absl::optional.54"* %303 to i32*
  store i32 %302, i32* %304, align 8
  %305 = getelementptr inbounds %"class.webrtc::EncodedImage", %"class.webrtc::EncodedImage"* %2, i64 0, i32 10, i32 0
  %306 = load i8, i8* %305, align 8
  switch i8 %306, label %307 [
    i8 -1, label %322
    i8 0, label %322
  ]

307:                                              ; preds = %299
  %308 = getelementptr inbounds %"class.webrtc::EncodedImage", %"class.webrtc::EncodedImage"* %2, i64 0, i32 3
  %309 = load i64, i64* %308, align 8
  %310 = getelementptr inbounds %"class.webrtc::EncodedImage", %"class.webrtc::EncodedImage"* %2, i64 0, i32 10, i32 1
  %311 = load i64, i64* %310, align 8
  %312 = call zeroext i16 @_ZN6webrtc15VideoSendTiming16GetDeltaCappedMsEll(i64 %309, i64 %311) #15
  %313 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 12, i32 0
  store i16 %312, i16* %313, align 8
  %314 = load i64, i64* %308, align 8
  %315 = getelementptr inbounds %"class.webrtc::EncodedImage", %"class.webrtc::EncodedImage"* %2, i64 0, i32 10, i32 2
  %316 = load i64, i64* %315, align 8
  %317 = call zeroext i16 @_ZN6webrtc15VideoSendTiming16GetDeltaCappedMsEll(i64 %314, i64 %316) #15
  %318 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 12, i32 1
  store i16 %317, i16* %318, align 2
  %319 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 12, i32 2
  %320 = bitcast i16* %319 to i64*
  store i64 0, i64* %320, align 4
  %321 = load i8, i8* %305, align 8
  br label %322

322:                                              ; preds = %299, %299, %307
  %323 = phi i8 [ %321, %307 ], [ -1, %299 ], [ -1, %299 ]
  %324 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %0, i64 0, i32 12, i32 6
  store i8 %323, i8* %324, align 4
  %325 = load i32, i32* %252, align 8
  %326 = icmp eq i32 %325, 3
  br i1 %8, label %327, label %335

327:                                              ; preds = %322
  %328 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 0
  %329 = load i32, i32* %328, align 8
  %330 = icmp eq i32 %329, 2
  br i1 %330, label %331, label %335

331:                                              ; preds = %327
  %332 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %3, i64 0, i32 1, i32 0, i32 0
  %333 = load i8, i8* %332, align 8, !range !3
  %334 = icmp ne i8 %333, 0
  br label %335

335:                                              ; preds = %322, %327, %331
  %336 = phi i1 [ %334, %331 ], [ true, %327 ], [ true, %322 ]
  call void @_ZN6webrtc16RtpPayloadParams16SetCodecSpecificEPNS_14RTPVideoHeaderEb(%"class.webrtc::RtpPayloadParams"* %1, %"struct.webrtc::RTPVideoHeader"* %0, i1 zeroext %336)
  call void @_ZN6webrtc16RtpPayloadParams10SetGenericEPKNS_17CodecSpecificInfoElbPNS_14RTPVideoHeaderE(%"class.webrtc::RtpPayloadParams"* %1, %"struct.webrtc::CodecSpecificInfo"* %3, i64 %4, i1 zeroext %326, %"struct.webrtc::RTPVideoHeader"* %0)
  ret void
}

declare void @_ZN6webrtc14RTPVideoHeaderC1Ev(%"struct.webrtc::RTPVideoHeader"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16RtpPayloadParams16SetCodecSpecificEPNS_14RTPVideoHeaderEb(%"class.webrtc::RtpPayloadParams"* nocapture, %"struct.webrtc::RTPVideoHeader"* nocapture, i1 zeroext) local_unnamed_addr #0 align 2 {
  br i1 %2, label %4, label %9

4:                                                ; preds = %3
  %5 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 9, i32 0
  %6 = load i16, i16* %5, align 8
  %7 = add i16 %6, 1
  %8 = and i16 %7, 32767
  store i16 %8, i16* %5, align 8
  br label %9

9:                                                ; preds = %4, %3
  %10 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 10
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %41

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 15, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %15, 1
  br i1 %16, label %19, label %17, !prof !2

17:                                               ; preds = %13
  %18 = tail call dereferenceable(20) %"struct.webrtc::RTPVideoHeaderVP8"* @_ZN4absl16variant_internal26TypedThrowBadVariantAccessIRN6webrtc17RTPVideoHeaderVP8EEET_v() #17
  unreachable

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 9, i32 0
  %21 = load i16, i16* %20, align 8
  %22 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %23 = bitcast i8* %22 to i16*
  store i16 %21, i16* %23, align 2
  %24 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6
  %25 = bitcast i16* %24 to i8*
  %26 = load i8, i8* %25, align 2
  switch i8 %26, label %27 [
    i8 -1, label %72
    i8 0, label %30
  ]

27:                                               ; preds = %19
  %28 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 9, i32 1
  %29 = load i8, i8* %28, align 2
  br label %35

30:                                               ; preds = %19
  %31 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 9, i32 1
  %32 = load i8, i8* %31, align 2
  %33 = add i8 %32, 1
  store i8 %33, i8* %31, align 2
  %34 = load i32, i32* %10, align 4
  br label %35

35:                                               ; preds = %27, %30
  %36 = phi i32 [ 1, %27 ], [ %34, %30 ]
  %37 = phi i8 [ %29, %27 ], [ %33, %30 ]
  %38 = zext i8 %37 to i16
  %39 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4
  %40 = bitcast i8* %39 to i16*
  store i16 %38, i16* %40, align 4
  br label %41

41:                                               ; preds = %35, %9
  %42 = phi i32 [ %11, %9 ], [ %36, %35 ]
  %43 = icmp eq i32 %42, 2
  br i1 %43, label %44, label %72

44:                                               ; preds = %41
  %45 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 15, i32 0, i32 1
  %46 = load i64, i64* %45, align 8
  %47 = icmp eq i64 %46, 2
  br i1 %47, label %50, label %48, !prof !2

48:                                               ; preds = %44
  %49 = tail call dereferenceable(1640) %"struct.webrtc::RTPVideoHeaderVP9"* @_ZN4absl16variant_internal26TypedThrowBadVariantAccessIRN6webrtc17RTPVideoHeaderVP9EEET_v() #17
  unreachable

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 9, i32 0
  %52 = load i16, i16* %51, align 8
  %53 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6
  store i16 %52, i16* %53, align 2
  %54 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 9
  %55 = load i8, i8* %54, align 4
  %56 = icmp eq i8 %55, -1
  br i1 %56, label %57, label %61

57:                                               ; preds = %50
  %58 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 10
  %59 = load i8, i8* %58, align 1
  %60 = icmp eq i8 %59, -1
  br i1 %60, label %72, label %61

61:                                               ; preds = %57, %50
  br i1 %2, label %62, label %67

62:                                               ; preds = %61
  switch i8 %55, label %67 [
    i8 0, label %63
    i8 -1, label %63
  ]

63:                                               ; preds = %62, %62
  %64 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 9, i32 1
  %65 = load i8, i8* %64, align 2
  %66 = add i8 %65, 1
  store i8 %66, i8* %64, align 2
  br label %67

67:                                               ; preds = %62, %63, %61
  %68 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 9, i32 1
  %69 = load i8, i8* %68, align 2
  %70 = zext i8 %69 to i16
  %71 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8
  store i16 %70, i16* %71, align 2
  br label %72

72:                                               ; preds = %19, %67, %57, %41
  %73 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 10
  %74 = load i8, i8* %73, align 8, !range !3
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %85, label %76

76:                                               ; preds = %72
  %77 = load i32, i32* %10, align 4
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %85

79:                                               ; preds = %76
  %80 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 9, i32 0
  %81 = load i16, i16* %80, align 8
  %82 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 15
  %83 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %1, i64 0, i32 15, i32 0, i32 1
  %84 = bitcast %"class.absl::variant"* %82 to i16*
  store i64 4, i64* %83, align 8
  store i16 %81, i16* %84, align 2
  br label %85

85:                                               ; preds = %72, %79, %76
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16RtpPayloadParams10SetGenericEPKNS_17CodecSpecificInfoElbPNS_14RTPVideoHeaderE(%"class.webrtc::RtpPayloadParams"*, %"struct.webrtc::CodecSpecificInfo"*, i64, i1 zeroext, %"struct.webrtc::RTPVideoHeader"*) local_unnamed_addr #0 align 2 {
  %6 = alloca i64, align 8
  %7 = alloca %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", align 8
  %8 = icmp ne %"struct.webrtc::CodecSpecificInfo"* %1, null
  br i1 %8, label %9, label %83

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %1, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %11 = load i8, i8* %10, align 8, !range !3
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %83, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %1, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1, i32 0
  %15 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %1, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = icmp ult i64 %16, 2
  br i1 %17, label %83, label %18

18:                                               ; preds = %13
  br i1 %3, label %21, label %19

19:                                               ; preds = %18
  %20 = bitcast %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %20) #15
  br label %28

21:                                               ; preds = %18
  %22 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 1
  %23 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %1, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2
  tail call void @_ZN6webrtc19ChainDiffCalculator5ResetERKNSt3__16vectorIbNS1_9allocatorIbEEEE(%"class.webrtc::ChainDiffCalculator"* %22, %"class.std::__1::vector.111"* dereferenceable(24) %23) #15
  %24 = load i8, i8* %10, align 8, !range !3
  %25 = bitcast %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %25) #15
  %26 = icmp eq i8 %24, 0
  br i1 %26, label %27, label %28, !prof !13

27:                                               ; preds = %21
  tail call void @llvm.trap() #15
  unreachable

28:                                               ; preds = %19, %21
  %29 = phi i8* [ %20, %19 ], [ %25, %21 ]
  call void @_ZN6webrtc16RtpPayloadParams30GenericDescriptorFromFrameInfoERKNS_16GenericFrameInfoEl(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* nonnull sret %7, %"class.webrtc::RtpPayloadParams"* %0, %"struct.webrtc::GenericFrameInfo"* dereferenceable(208) %14, i64 %2)
  %30 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load i8, i8* %30, align 8, !range !3
  %32 = icmp eq i8 %31, 0
  %33 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  br i1 %32, label %81, label %34

34:                                               ; preds = %28
  %35 = bitcast %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* nonnull align 8 %29, i64 16, i1 false) #15
  %36 = icmp eq %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7, %33
  br i1 %36, label %77, label %37, !prof !13

37:                                               ; preds = %34
  %38 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = and i64 %39, 1
  %41 = icmp eq i64 %40, 0
  %42 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %43 = load i32*, i32** %42, align 8
  %44 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7, i64 0, i32 3, i32 0, i32 1
  %45 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %44 to i32*
  %46 = select i1 %41, i32* %45, i32* %43
  %47 = lshr i64 %39, 1
  %48 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3, i32 0
  %49 = shl nuw i64 %47, 2
  %50 = ashr exact i64 %49, 2
  call void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE6AssignINS0_20IteratorValueAdapterIS6_PKS3_EEEEvT_m(%"class.absl::inlined_vector_internal::Storage.91"* %48, i32* %46, i64 %50) #15
  %51 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load i64, i64* %51, align 8
  %53 = and i64 %52, 1
  %54 = icmp eq i64 %53, 0
  %55 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %56 = load i64*, i64** %55, align 8
  %57 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7, i64 0, i32 4, i32 0, i32 1
  %58 = bitcast %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %57 to i64*
  %59 = select i1 %54, i64* %58, i64* %56
  %60 = lshr i64 %52, 1
  %61 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0
  %62 = shl nuw i64 %60, 3
  %63 = ashr exact i64 %62, 3
  call void @_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE6AssignINS0_20IteratorValueAdapterIS4_PKlEEEEvT_m(%"class.absl::inlined_vector_internal::Storage.143"* %61, i64* %59, i64 %63) #15
  %64 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load i64, i64* %64, align 8
  %66 = and i64 %65, 1
  %67 = icmp eq i64 %66, 0
  %68 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0
  %69 = load i32*, i32** %68, align 8
  %70 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7, i64 0, i32 5, i32 0, i32 1
  %71 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %70 to i32*
  %72 = select i1 %67, i32* %71, i32* %69
  %73 = lshr i64 %65, 1
  %74 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 5, i32 0
  %75 = shl nuw i64 %73, 2
  %76 = ashr exact i64 %75, 2
  call void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE6AssignINS0_20IteratorValueAdapterIS4_PKiEEEEvT_m(%"class.absl::inlined_vector_internal::Storage.98"* %74, i32* %72, i64 %76) #15
  br label %77

77:                                               ; preds = %34, %37
  %78 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7, i64 0, i32 6, i32 0, i32 0
  %79 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 6, i32 0, i32 0
  %80 = load i64, i64* %78, align 8
  store i64 %80, i64* %79, align 8
  br label %82

81:                                               ; preds = %28
  call void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoC1ERKS1_(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %33, %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* nonnull dereferenceable(144) %7) #15
  store i8 1, i8* %30, align 8
  br label %82

82:                                               ; preds = %77, %81
  call void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoD1Ev(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* nonnull %7) #15
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %29) #15
  br label %146

83:                                               ; preds = %9, %13, %5
  %84 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 10
  %85 = load i32, i32* %84, align 4
  switch i32 %85, label %146 [
    i32 0, label %86
    i32 1, label %132
    i32 2, label %136
    i32 4, label %142
  ]

86:                                               ; preds = %83
  %87 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %88 = load i8, i8* %87, align 8, !range !3
  %89 = icmp eq i8 %88, 0
  br i1 %89, label %92, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoD1Ev(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %91) #15
  store i8 0, i8* %87, align 8
  br label %92

92:                                               ; preds = %90, %86
  %93 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoC1Ev(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %93) #15
  store i8 1, i8* %87, align 8
  %94 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %93, i64 0, i32 0
  store i64 %2, i64* %94, align 8
  br i1 %3, label %95, label %98

95:                                               ; preds = %92
  %96 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 0, i32 0, i64 0
  %97 = bitcast i64* %96 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %97, i8 -1, i64 64, i1 false) #15
  br label %130

98:                                               ; preds = %92
  %99 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %99) #15
  %100 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 0, i32 0, i64 0
  %101 = load i64, i64* %100, align 8
  store i64 %101, i64* %6, align 8
  %102 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4
  %103 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %102, i64 0, i32 0
  %104 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %102, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %105 = load i64, i64* %104, align 8, !noalias !14
  %106 = and i64 %105, 1
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %114, label %108

108:                                              ; preds = %98
  %109 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %110 = bitcast i64** %109 to i64*
  %111 = load i64, i64* %110, align 8, !noalias !14
  %112 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1, i32 0, i32 1
  %113 = load i64, i64* %112, align 8, !noalias !14
  br label %117

114:                                              ; preds = %98
  %115 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1
  %116 = ptrtoint %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %115 to i64
  br label %117

117:                                              ; preds = %114, %108
  %118 = phi i64 [ %116, %114 ], [ %111, %108 ]
  %119 = phi i64 [ 5, %114 ], [ %113, %108 ]
  %120 = lshr i64 %105, 1
  %121 = icmp eq i64 %120, %119
  br i1 %121, label %127, label %122, !prof !13

122:                                              ; preds = %117
  %123 = inttoptr i64 %118 to i64*
  %124 = getelementptr inbounds i64, i64* %123, i64 %120
  store i64 %101, i64* %124, align 8
  %125 = load i64, i64* %104, align 8
  %126 = add i64 %125, 2
  store i64 %126, i64* %104, align 8
  br label %129

127:                                              ; preds = %117
  %128 = call dereferenceable(8) i64* @_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15EmplaceBackSlowIJRKlEEERlDpOT_(%"class.absl::inlined_vector_internal::Storage.143"* %103, i64* nonnull dereferenceable(8) %6) #15
  br label %129

129:                                              ; preds = %127, %122
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %99) #15
  br label %130

130:                                              ; preds = %95, %129
  %131 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 0, i32 0, i64 0
  store i64 %2, i64* %131, align 8
  br label %146

132:                                              ; preds = %83
  br i1 %8, label %133, label %146

133:                                              ; preds = %132
  %134 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %1, i64 0, i32 1
  %135 = bitcast %"union.webrtc::CodecSpecificInfoUnion"* %134 to %"struct.webrtc::CodecSpecificInfoVP8"*
  tail call void @_ZN6webrtc16RtpPayloadParams12Vp8ToGenericERKNS_20CodecSpecificInfoVP8ElbPNS_14RTPVideoHeaderE(%"class.webrtc::RtpPayloadParams"* %0, %"struct.webrtc::CodecSpecificInfoVP8"* dereferenceable(72) %135, i64 %2, i1 zeroext %3, %"struct.webrtc::RTPVideoHeader"* %4)
  br label %146

136:                                              ; preds = %83
  %137 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 11
  %138 = load i8, i8* %137, align 1, !range !3
  %139 = icmp ne i8 %138, 0
  %140 = and i1 %8, %139
  br i1 %140, label %141, label %146

141:                                              ; preds = %136
  tail call void @_ZN6webrtc16RtpPayloadParams12Vp9ToGenericERKNS_20CodecSpecificInfoVP9ElRNS_14RTPVideoHeaderE(%"class.webrtc::RtpPayloadParams"* %0, %"struct.webrtc::CodecSpecificInfoVP9"* dereferenceable(1624) undef, i64 %2, %"struct.webrtc::RTPVideoHeader"* dereferenceable(1928) %4)
  br label %146

142:                                              ; preds = %83
  br i1 %8, label %143, label %146

143:                                              ; preds = %142
  %144 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %1, i64 0, i32 1
  %145 = bitcast %"union.webrtc::CodecSpecificInfoUnion"* %144 to %"struct.webrtc::CodecSpecificInfoH264"*
  tail call void @_ZN6webrtc16RtpPayloadParams13H264ToGenericERKNS_21CodecSpecificInfoH264ElbPNS_14RTPVideoHeaderE(%"class.webrtc::RtpPayloadParams"* %0, %"struct.webrtc::CodecSpecificInfoH264"* dereferenceable(8) %145, i64 %2, i1 zeroext %3, %"struct.webrtc::RTPVideoHeader"* %4)
  br label %146

146:                                              ; preds = %142, %143, %136, %141, %132, %133, %82, %130, %83
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK6webrtc16RtpPayloadParams4ssrcEv(%"class.webrtc::RtpPayloadParams"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 8
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZNK6webrtc16RtpPayloadParams5stateEv(%"class.webrtc::RtpPayloadParams"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 9
  %3 = bitcast %"struct.webrtc::RtpPayloadState"* %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 9, i32 2
  %6 = load i64, i64* %5, align 8
  %7 = insertvalue { i64, i64 } undef, i64 %4, 0
  %8 = insertvalue { i64, i64 } %7, i64 %6, 1
  ret { i64, i64 } %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16RtpPayloadParams30GenericDescriptorFromFrameInfoERKNS_16GenericFrameInfoEl(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* noalias sret, %"class.webrtc::RtpPayloadParams"*, %"struct.webrtc::GenericFrameInfo"* dereferenceable(208), i64) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.absl::InlinedVector.142", align 8
  %6 = alloca %"class.absl::InlinedVector.97", align 8
  %7 = bitcast %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 144, i1 false)
  tail call void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoC1Ev(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0) #15
  %8 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 0
  store i64 %3, i64* %8, align 8
  %9 = bitcast %"class.absl::InlinedVector.142"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %9) #15
  %10 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %1, i64 0, i32 0
  %11 = getelementptr inbounds %"struct.webrtc::GenericFrameInfo", %"struct.webrtc::GenericFrameInfo"* %2, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = and i64 %12, 1
  %14 = icmp eq i64 %13, 0
  %15 = getelementptr inbounds %"struct.webrtc::GenericFrameInfo", %"struct.webrtc::GenericFrameInfo"* %2, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0
  %16 = load %"struct.webrtc::CodecBufferUsage"*, %"struct.webrtc::CodecBufferUsage"** %15, align 8
  %17 = getelementptr inbounds %"struct.webrtc::GenericFrameInfo", %"struct.webrtc::GenericFrameInfo"* %2, i64 0, i32 1, i32 0, i32 1
  %18 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage, 8, std::__1::allocator<webrtc::CodecBufferUsage> >::Data"* %17 to %"struct.webrtc::CodecBufferUsage"*
  %19 = select i1 %14, %"struct.webrtc::CodecBufferUsage"* %18, %"struct.webrtc::CodecBufferUsage"* %16
  %20 = lshr i64 %12, 1
  %21 = icmp eq i64 %20, 0
  %22 = select i1 %21, %"struct.webrtc::CodecBufferUsage"* null, %"struct.webrtc::CodecBufferUsage"* %19
  call void @_ZN6webrtc27FrameDependenciesCalculator16FromBuffersUsageElN3rtc9ArrayViewIKNS_16CodecBufferUsageELln4711EEE(%"class.absl::InlinedVector.142"* nonnull sret %5, %"class.webrtc::FrameDependenciesCalculator"* %10, i64 %3, %"struct.webrtc::CodecBufferUsage"* %22, i64 %20) #15
  %23 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 4
  %24 = icmp eq %"class.absl::InlinedVector.142"* %5, %23
  br i1 %24, label %41, label %25, !prof !13

25:                                               ; preds = %4
  %26 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load i64, i64* %26, align 8
  %28 = and i64 %27, 1
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %34, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %32 = bitcast i64** %31 to i8**
  %33 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %33) #16
  br label %34

34:                                               ; preds = %25, %30
  %35 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %26, align 8
  %37 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %5, i64 0, i32 0, i32 1
  %38 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 4, i32 0, i32 1
  %39 = bitcast %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %38 to i8*
  %40 = bitcast %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 40, i1 false) #15
  store i64 0, i64* %35, align 8
  br label %50

41:                                               ; preds = %4
  %42 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load i64, i64* %42, align 8
  %44 = and i64 %43, 1
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %50, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %5, i64 0, i32 0, i32 1, i32 0, i32 0
  %48 = bitcast i64** %47 to i8**
  %49 = load i8*, i8** %48, align 8
  call void @_ZdlPv(i8* %49) #16
  br label %50

50:                                               ; preds = %34, %41, %46
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %9) #15
  %51 = bitcast %"class.absl::InlinedVector.97"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %51) #15
  %52 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %1, i64 0, i32 1
  %53 = getelementptr inbounds %"struct.webrtc::GenericFrameInfo", %"struct.webrtc::GenericFrameInfo"* %2, i64 0, i32 2
  call void @_ZN6webrtc19ChainDiffCalculator4FromElRKNSt3__16vectorIbNS1_9allocatorIbEEEE(%"class.absl::InlinedVector.97"* nonnull sret %6, %"class.webrtc::ChainDiffCalculator"* %52, i64 %3, %"class.std::__1::vector.111"* dereferenceable(24) %53) #15
  %54 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 5
  %55 = icmp eq %"class.absl::InlinedVector.97"* %6, %54
  br i1 %55, label %72, label %56, !prof !13

56:                                               ; preds = %50
  %57 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %54, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = and i64 %58, 1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %65, label %61

61:                                               ; preds = %56
  %62 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 5, i32 0, i32 1, i32 0, i32 0
  %63 = bitcast i32** %62 to i8**
  %64 = load i8*, i8** %63, align 8
  call void @_ZdlPv(i8* %64) #16
  br label %65

65:                                               ; preds = %56, %61
  %66 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %57, align 8
  %68 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %6, i64 0, i32 0, i32 1
  %69 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 5, i32 0, i32 1
  %70 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %69 to i8*
  %71 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %68 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %70, i8* align 8 %71, i64 16, i1 false) #15
  store i64 0, i64* %66, align 8
  br label %81

72:                                               ; preds = %50
  %73 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = load i64, i64* %73, align 8
  %75 = and i64 %74, 1
  %76 = icmp eq i64 %75, 0
  br i1 %76, label %81, label %77

77:                                               ; preds = %72
  %78 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %6, i64 0, i32 0, i32 1, i32 0, i32 0
  %79 = bitcast i32** %78 to i8**
  %80 = load i8*, i8** %79, align 8
  call void @_ZdlPv(i8* %80) #16
  br label %81

81:                                               ; preds = %65, %72, %77
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %51) #15
  %82 = getelementptr inbounds %"struct.webrtc::GenericFrameInfo", %"struct.webrtc::GenericFrameInfo"* %2, i64 0, i32 0, i32 0
  %83 = load i32, i32* %82, align 8
  %84 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 1
  store i32 %83, i32* %84, align 8
  %85 = getelementptr inbounds %"struct.webrtc::GenericFrameInfo", %"struct.webrtc::GenericFrameInfo"* %2, i64 0, i32 0, i32 1
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 2
  store i32 %86, i32* %87, align 4
  %88 = getelementptr inbounds %"struct.webrtc::GenericFrameInfo", %"struct.webrtc::GenericFrameInfo"* %2, i64 0, i32 0, i32 2
  %89 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 3
  %90 = icmp eq %"class.absl::InlinedVector.90"* %88, %89
  br i1 %90, label %105, label %91, !prof !13

91:                                               ; preds = %81
  %92 = getelementptr inbounds %"class.absl::InlinedVector.90", %"class.absl::InlinedVector.90"* %88, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %93 = load i64, i64* %92, align 8
  %94 = and i64 %93, 1
  %95 = icmp eq i64 %94, 0
  %96 = getelementptr inbounds %"struct.webrtc::GenericFrameInfo", %"struct.webrtc::GenericFrameInfo"* %2, i64 0, i32 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %97 = load i32*, i32** %96, align 8
  %98 = getelementptr inbounds %"struct.webrtc::GenericFrameInfo", %"struct.webrtc::GenericFrameInfo"* %2, i64 0, i32 0, i32 2, i32 0, i32 1
  %99 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %98 to i32*
  %100 = select i1 %95, i32* %99, i32* %97
  %101 = lshr i64 %93, 1
  %102 = getelementptr inbounds %"class.absl::InlinedVector.90", %"class.absl::InlinedVector.90"* %89, i64 0, i32 0
  %103 = shl nuw i64 %101, 2
  %104 = ashr exact i64 %103, 2
  call void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE6AssignINS0_20IteratorValueAdapterIS6_PKS3_EEEEvT_m(%"class.absl::inlined_vector_internal::Storage.91"* %102, i32* %100, i64 %104) #15
  br label %105

105:                                              ; preds = %81, %91
  %106 = getelementptr inbounds %"struct.webrtc::GenericFrameInfo", %"struct.webrtc::GenericFrameInfo"* %2, i64 0, i32 3, i32 0, i32 0
  %107 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %0, i64 0, i32 6, i32 0, i32 0
  %108 = load i64, i64* %106, align 8
  store i64 %108, i64* %107, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoC1Ev(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"*) unnamed_addr #2

declare void @_ZN6webrtc27FrameDependenciesCalculator16FromBuffersUsageElN3rtc9ArrayViewIKNS_16CodecBufferUsageELln4711EEE(%"class.absl::InlinedVector.142"* sret, %"class.webrtc::FrameDependenciesCalculator"*, i64, %"struct.webrtc::CodecBufferUsage"*, i64) local_unnamed_addr #2

declare void @_ZN6webrtc19ChainDiffCalculator4FromElRKNSt3__16vectorIbNS1_9allocatorIbEEEE(%"class.absl::InlinedVector.97"* sret, %"class.webrtc::ChainDiffCalculator"*, i64, %"class.std::__1::vector.111"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoD1Ev(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"*) unnamed_addr #4

declare void @_ZN6webrtc19ChainDiffCalculator5ResetERKNSt3__16vectorIbNS1_9allocatorIbEEEE(%"class.webrtc::ChainDiffCalculator"*, %"class.std::__1::vector.111"* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16RtpPayloadParams16GenericToGenericElbPNS_14RTPVideoHeaderE(%"class.webrtc::RtpPayloadParams"* nocapture, i64, i1 zeroext, %"struct.webrtc::RTPVideoHeader"*) local_unnamed_addr #0 align 2 {
  %5 = alloca i64, align 8
  %6 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i8, i8* %6, align 8, !range !3
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %11, label %9

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoD1Ev(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %10) #15
  store i8 0, i8* %6, align 8
  br label %11

11:                                               ; preds = %4, %9
  %12 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoC1Ev(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %12) #15
  store i8 1, i8* %6, align 8
  %13 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %12, i64 0, i32 0
  store i64 %1, i64* %13, align 8
  br i1 %2, label %14, label %17

14:                                               ; preds = %11
  %15 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 0, i32 0, i64 0
  %16 = bitcast i64* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 -1, i64 64, i1 false)
  br label %49

17:                                               ; preds = %11
  %18 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #15
  %19 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 0, i32 0, i64 0
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %5, align 8
  %21 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4
  %22 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %21, i64 0, i32 0
  %23 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load i64, i64* %23, align 8, !noalias !17
  %25 = and i64 %24, 1
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %33, label %27

27:                                               ; preds = %17
  %28 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %29 = bitcast i64** %28 to i64*
  %30 = load i64, i64* %29, align 8, !noalias !17
  %31 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1, i32 0, i32 1
  %32 = load i64, i64* %31, align 8, !noalias !17
  br label %36

33:                                               ; preds = %17
  %34 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1
  %35 = ptrtoint %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %34 to i64
  br label %36

36:                                               ; preds = %33, %27
  %37 = phi i64 [ %35, %33 ], [ %30, %27 ]
  %38 = phi i64 [ 5, %33 ], [ %32, %27 ]
  %39 = lshr i64 %24, 1
  %40 = icmp eq i64 %39, %38
  br i1 %40, label %46, label %41, !prof !13

41:                                               ; preds = %36
  %42 = inttoptr i64 %37 to i64*
  %43 = getelementptr inbounds i64, i64* %42, i64 %39
  store i64 %20, i64* %43, align 8
  %44 = load i64, i64* %23, align 8
  %45 = add i64 %44, 2
  store i64 %45, i64* %23, align 8
  br label %48

46:                                               ; preds = %36
  %47 = call dereferenceable(8) i64* @_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15EmplaceBackSlowIJRKlEEERlDpOT_(%"class.absl::inlined_vector_internal::Storage.143"* %22, i64* nonnull dereferenceable(8) %5) #15
  br label %48

48:                                               ; preds = %41, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #15
  br label %49

49:                                               ; preds = %48, %14
  %50 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 0, i32 0, i64 0
  store i64 %1, i64* %50, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16RtpPayloadParams12Vp8ToGenericERKNS_20CodecSpecificInfoVP8ElbPNS_14RTPVideoHeaderE(%"class.webrtc::RtpPayloadParams"* nocapture, %"struct.webrtc::CodecSpecificInfoVP8"* nocapture readonly dereferenceable(72), i64, i1 zeroext, %"struct.webrtc::RTPVideoHeader"*) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.rtc::DiagnosticLogMessage", align 8
  %7 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 15, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 1
  br i1 %9, label %12, label %10, !prof !2

10:                                               ; preds = %5
  %11 = tail call dereferenceable(20) %"struct.webrtc::RTPVideoHeaderVP8"* @_ZN4absl16variant_internal26TypedThrowBadVariantAccessIRN6webrtc17RTPVideoHeaderVP8EEET_v() #17
  unreachable

12:                                               ; preds = %5
  %13 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 15
  %14 = bitcast %"class.absl::variant"* %13 to %"struct.webrtc::RTPVideoHeaderVP8"*
  %15 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6
  %16 = bitcast i16* %15 to i8*
  %17 = load i8, i8* %16, align 2
  %18 = icmp eq i8 %17, -1
  %19 = select i1 %18, i8 0, i8 %17
  %20 = zext i8 %19 to i32
  %21 = icmp ugt i8 %19, 7
  br i1 %21, label %22, label %27

22:                                               ; preds = %12
  %23 = bitcast %"class.rtc::DiagnosticLogMessage"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %23) #15
  call void @_ZN3rtc20DiagnosticLogMessageC1EPKciNS_15LoggingSeverityENS_15LogErrorContextEi(%"class.rtc::DiagnosticLogMessage"* nonnull %6, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.3, i64 0, i64 0), i32 388, i32 2, i32 0, i32 0) #15
  %24 = getelementptr inbounds %"class.rtc::DiagnosticLogMessage", %"class.rtc::DiagnosticLogMessage"* %6, i64 0, i32 7
  %25 = bitcast %"class.std::__1::basic_ostringstream"* %24 to %"class.std::__1::basic_ostream"*
  %26 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %25, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.4, i64 0, i64 0), i64 83) #15
  call void @_ZN3rtc20DiagnosticLogMessageD1Ev(%"class.rtc::DiagnosticLogMessage"* nonnull %6) #15
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %23) #15
  br label %46

27:                                               ; preds = %12
  %28 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load i8, i8* %28, align 8, !range !3
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %33, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoD1Ev(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %32) #15
  store i8 0, i8* %28, align 8
  br label %33

33:                                               ; preds = %27, %31
  %34 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoC1Ev(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %34) #15
  store i8 1, i8* %28, align 8
  %35 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %34, i64 0, i32 0
  store i64 %2, i64* %35, align 8
  %36 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  store i32 0, i32* %36, align 8
  %37 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2
  store i32 %20, i32* %37, align 4
  %38 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfoVP8", %"struct.webrtc::CodecSpecificInfoVP8"* %1, i64 0, i32 4
  %39 = load i8, i8* %38, align 4, !range !3
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %42, label %41

41:                                               ; preds = %33
  tail call void @_ZN6webrtc16RtpPayloadParams21SetDependenciesVp8NewERKNS_20CodecSpecificInfoVP8ElbbPNS_14RTPVideoHeader21GenericDescriptorInfoE(%"class.webrtc::RtpPayloadParams"* %0, %"struct.webrtc::CodecSpecificInfoVP8"* dereferenceable(72) %1, i64 %2, i1 zeroext %3, i1 zeroext undef, %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %34)
  br label %46

42:                                               ; preds = %33
  %43 = getelementptr inbounds %"struct.webrtc::RTPVideoHeaderVP8", %"struct.webrtc::RTPVideoHeaderVP8"* %14, i64 0, i32 4
  %44 = load i8, i8* %43, align 1, !range !3
  %45 = icmp ne i8 %44, 0
  tail call void @_ZN6webrtc16RtpPayloadParams28SetDependenciesVp8DeprecatedERKNS_20CodecSpecificInfoVP8ElbiibPNS_14RTPVideoHeader21GenericDescriptorInfoE(%"class.webrtc::RtpPayloadParams"* %0, %"struct.webrtc::CodecSpecificInfoVP8"* dereferenceable(72) undef, i64 %2, i1 zeroext %3, i32 0, i32 %20, i1 zeroext %45, %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %34)
  br label %46

46:                                               ; preds = %41, %42, %22
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16RtpPayloadParams12Vp9ToGenericERKNS_20CodecSpecificInfoVP9ElRNS_14RTPVideoHeaderE(%"class.webrtc::RtpPayloadParams"*, %"struct.webrtc::CodecSpecificInfoVP9"* nocapture readnone dereferenceable(1624), i64, %"struct.webrtc::RTPVideoHeader"* dereferenceable(1928)) local_unnamed_addr #0 align 2 {
  %5 = bitcast %"class.webrtc::RtpPayloadParams"* %0 to i8*
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 15, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 2
  br i1 %9, label %12, label %10, !prof !2

10:                                               ; preds = %4
  %11 = tail call dereferenceable(1640) %"struct.webrtc::RTPVideoHeaderVP9"* @_ZN4absl16variant_internal26TypedThrowBadVariantAccessIRN6webrtc17RTPVideoHeaderVP9EEET_v() #17
  unreachable

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 17
  %15 = load i64, i64* %14, align 8
  %16 = trunc i64 %15 to i32
  %17 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 10
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, -1
  %20 = select i1 %19, i8 0, i8 %18
  %21 = zext i8 %20 to i32
  %22 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 9
  %23 = load i8, i8* %22, align 4
  %24 = icmp eq i8 %23, -1
  %25 = select i1 %24, i8 0, i8 %23
  %26 = zext i8 %25 to i32
  %27 = icmp sge i32 %21, %16
  %28 = icmp ugt i8 %25, 3
  %29 = or i1 %27, %28
  %30 = icmp sgt i32 %16, 8
  %31 = or i1 %30, %29
  br i1 %31, label %525, label %32

32:                                               ; preds = %12
  %33 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load i8, i8* %33, align 8, !range !3
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoD1Ev(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %37) #15
  store i8 0, i8* %33, align 8
  br label %38

38:                                               ; preds = %32, %36
  %39 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoC1Ev(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %39) #15
  store i8 1, i8* %33, align 8
  %40 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %39, i64 0, i32 0
  store i64 %2, i64* %40, align 8
  %41 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  store i32 %21, i32* %41, align 8
  %42 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2
  store i32 %26, i32* %42, align 4
  %43 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3
  %44 = shl nsw i32 %16, 2
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %"class.absl::InlinedVector.90", %"class.absl::InlinedVector.90"* %43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load i64, i64* %46, align 8, !noalias !20
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %48, 0
  %50 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3, i32 0, i32 1
  %51 = ptrtoint %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %50 to i64
  %52 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %53 = bitcast i32** %52 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 3, i32 0, i32 1, i32 0, i32 1
  %56 = load i64, i64* %55, align 8
  %57 = select i1 %49, i64 %51, i64 %54
  %58 = select i1 %49, i64 10, i64 %56
  %59 = lshr i64 %47, 1
  %60 = icmp ult i64 %58, %45
  %61 = inttoptr i64 %54 to i8*
  br i1 %60, label %62, label %213, !prof !2

62:                                               ; preds = %38
  %63 = shl i64 %58, 1
  %64 = icmp ult i64 %63, %45
  %65 = select i1 %64, i64 %45, i64 %63
  %66 = icmp ugt i64 %65, 4611686018427387903
  br i1 %66, label %67, label %68

67:                                               ; preds = %62
  tail call void @abort() #17
  unreachable

68:                                               ; preds = %62
  %69 = shl i64 %65, 2
  %70 = tail call i8* @_Znwm(i64 %69) #16
  %71 = bitcast i8* %70 to i32*
  %72 = ptrtoint i8* %70 to i64
  %73 = icmp eq i64 %59, 0
  br i1 %73, label %207, label %74

74:                                               ; preds = %68
  %75 = inttoptr i64 %57 to i32*
  %76 = icmp ult i64 %47, 16
  br i1 %76, label %166, label %77

77:                                               ; preds = %74
  %78 = inttoptr i64 %57 to i8*
  %79 = shl i64 %59, 2
  %80 = getelementptr i8, i8* %70, i64 %79
  %81 = getelementptr i32, i32* %75, i64 %59
  %82 = bitcast i32* %81 to i8*
  %83 = icmp ult i8* %70, %82
  %84 = icmp ugt i8* %80, %78
  %85 = and i1 %83, %84
  br i1 %85, label %166, label %86

86:                                               ; preds = %77
  %87 = and i64 %59, 9223372036854775800
  %88 = getelementptr i32, i32* %75, i64 %87
  %89 = add nsw i64 %87, -8
  %90 = lshr exact i64 %89, 3
  %91 = add nuw nsw i64 %90, 1
  %92 = and i64 %91, 3
  %93 = icmp ult i64 %89, 24
  br i1 %93, label %145, label %94

94:                                               ; preds = %86
  %95 = sub nsw i64 %91, %92
  br label %96

96:                                               ; preds = %96, %94
  %97 = phi i64 [ 0, %94 ], [ %142, %96 ]
  %98 = phi i64 [ %95, %94 ], [ %143, %96 ]
  %99 = getelementptr i32, i32* %75, i64 %97
  %100 = getelementptr inbounds i32, i32* %71, i64 %97
  %101 = bitcast i32* %99 to <4 x i32>*
  %102 = load <4 x i32>, <4 x i32>* %101, align 4, !alias.scope !23
  %103 = getelementptr i32, i32* %99, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  %105 = load <4 x i32>, <4 x i32>* %104, align 4, !alias.scope !23
  %106 = bitcast i32* %100 to <4 x i32>*
  store <4 x i32> %102, <4 x i32>* %106, align 4, !alias.scope !26, !noalias !23
  %107 = getelementptr inbounds i32, i32* %100, i64 4
  %108 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> %105, <4 x i32>* %108, align 4, !alias.scope !26, !noalias !23
  %109 = or i64 %97, 8
  %110 = getelementptr i32, i32* %75, i64 %109
  %111 = getelementptr inbounds i32, i32* %71, i64 %109
  %112 = bitcast i32* %110 to <4 x i32>*
  %113 = load <4 x i32>, <4 x i32>* %112, align 4, !alias.scope !23
  %114 = getelementptr i32, i32* %110, i64 4
  %115 = bitcast i32* %114 to <4 x i32>*
  %116 = load <4 x i32>, <4 x i32>* %115, align 4, !alias.scope !23
  %117 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %113, <4 x i32>* %117, align 4, !alias.scope !26, !noalias !23
  %118 = getelementptr inbounds i32, i32* %111, i64 4
  %119 = bitcast i32* %118 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %119, align 4, !alias.scope !26, !noalias !23
  %120 = or i64 %97, 16
  %121 = getelementptr i32, i32* %75, i64 %120
  %122 = getelementptr inbounds i32, i32* %71, i64 %120
  %123 = bitcast i32* %121 to <4 x i32>*
  %124 = load <4 x i32>, <4 x i32>* %123, align 4, !alias.scope !23
  %125 = getelementptr i32, i32* %121, i64 4
  %126 = bitcast i32* %125 to <4 x i32>*
  %127 = load <4 x i32>, <4 x i32>* %126, align 4, !alias.scope !23
  %128 = bitcast i32* %122 to <4 x i32>*
  store <4 x i32> %124, <4 x i32>* %128, align 4, !alias.scope !26, !noalias !23
  %129 = getelementptr inbounds i32, i32* %122, i64 4
  %130 = bitcast i32* %129 to <4 x i32>*
  store <4 x i32> %127, <4 x i32>* %130, align 4, !alias.scope !26, !noalias !23
  %131 = or i64 %97, 24
  %132 = getelementptr i32, i32* %75, i64 %131
  %133 = getelementptr inbounds i32, i32* %71, i64 %131
  %134 = bitcast i32* %132 to <4 x i32>*
  %135 = load <4 x i32>, <4 x i32>* %134, align 4, !alias.scope !23
  %136 = getelementptr i32, i32* %132, i64 4
  %137 = bitcast i32* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 4, !alias.scope !23
  %139 = bitcast i32* %133 to <4 x i32>*
  store <4 x i32> %135, <4 x i32>* %139, align 4, !alias.scope !26, !noalias !23
  %140 = getelementptr inbounds i32, i32* %133, i64 4
  %141 = bitcast i32* %140 to <4 x i32>*
  store <4 x i32> %138, <4 x i32>* %141, align 4, !alias.scope !26, !noalias !23
  %142 = add i64 %97, 32
  %143 = add i64 %98, -4
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %96, !llvm.loop !28

145:                                              ; preds = %96, %86
  %146 = phi i64 [ 0, %86 ], [ %142, %96 ]
  %147 = icmp eq i64 %92, 0
  br i1 %147, label %164, label %148

148:                                              ; preds = %145, %148
  %149 = phi i64 [ %161, %148 ], [ %146, %145 ]
  %150 = phi i64 [ %162, %148 ], [ %92, %145 ]
  %151 = getelementptr i32, i32* %75, i64 %149
  %152 = getelementptr inbounds i32, i32* %71, i64 %149
  %153 = bitcast i32* %151 to <4 x i32>*
  %154 = load <4 x i32>, <4 x i32>* %153, align 4, !alias.scope !23
  %155 = getelementptr i32, i32* %151, i64 4
  %156 = bitcast i32* %155 to <4 x i32>*
  %157 = load <4 x i32>, <4 x i32>* %156, align 4, !alias.scope !23
  %158 = bitcast i32* %152 to <4 x i32>*
  store <4 x i32> %154, <4 x i32>* %158, align 4, !alias.scope !26, !noalias !23
  %159 = getelementptr inbounds i32, i32* %152, i64 4
  %160 = bitcast i32* %159 to <4 x i32>*
  store <4 x i32> %157, <4 x i32>* %160, align 4, !alias.scope !26, !noalias !23
  %161 = add i64 %149, 8
  %162 = add i64 %150, -1
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %164, label %148, !llvm.loop !29

164:                                              ; preds = %148, %145
  %165 = icmp eq i64 %59, %87
  br i1 %165, label %207, label %166

166:                                              ; preds = %164, %77, %74
  %167 = phi i32* [ %75, %77 ], [ %75, %74 ], [ %88, %164 ]
  %168 = phi i64 [ 0, %77 ], [ 0, %74 ], [ %87, %164 ]
  %169 = xor i64 %168, -1
  %170 = add nsw i64 %59, %169
  %171 = and i64 %59, 3
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %183, label %173

173:                                              ; preds = %166, %173
  %174 = phi i32* [ %179, %173 ], [ %167, %166 ]
  %175 = phi i64 [ %180, %173 ], [ %168, %166 ]
  %176 = phi i64 [ %181, %173 ], [ %171, %166 ]
  %177 = getelementptr inbounds i32, i32* %71, i64 %175
  %178 = load i32, i32* %174, align 4
  store i32 %178, i32* %177, align 4
  %179 = getelementptr inbounds i32, i32* %174, i64 1
  %180 = add nuw nsw i64 %175, 1
  %181 = add i64 %176, -1
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %183, label %173, !llvm.loop !30

183:                                              ; preds = %173, %166
  %184 = phi i32* [ %167, %166 ], [ %179, %173 ]
  %185 = phi i64 [ %168, %166 ], [ %180, %173 ]
  %186 = icmp ult i64 %170, 3
  br i1 %186, label %207, label %187

187:                                              ; preds = %183, %187
  %188 = phi i32* [ %204, %187 ], [ %184, %183 ]
  %189 = phi i64 [ %205, %187 ], [ %185, %183 ]
  %190 = getelementptr inbounds i32, i32* %71, i64 %189
  %191 = load i32, i32* %188, align 4
  store i32 %191, i32* %190, align 4
  %192 = getelementptr inbounds i32, i32* %188, i64 1
  %193 = add nuw nsw i64 %189, 1
  %194 = getelementptr inbounds i32, i32* %71, i64 %193
  %195 = load i32, i32* %192, align 4
  store i32 %195, i32* %194, align 4
  %196 = getelementptr inbounds i32, i32* %188, i64 2
  %197 = add nuw nsw i64 %189, 2
  %198 = getelementptr inbounds i32, i32* %71, i64 %197
  %199 = load i32, i32* %196, align 4
  store i32 %199, i32* %198, align 4
  %200 = getelementptr inbounds i32, i32* %188, i64 3
  %201 = add nuw nsw i64 %189, 3
  %202 = getelementptr inbounds i32, i32* %71, i64 %201
  %203 = load i32, i32* %200, align 4
  store i32 %203, i32* %202, align 4
  %204 = getelementptr inbounds i32, i32* %188, i64 4
  %205 = add nuw nsw i64 %189, 4
  %206 = icmp eq i64 %205, %59
  br i1 %206, label %207, label %187, !llvm.loop !31

207:                                              ; preds = %183, %187, %164, %68
  br i1 %49, label %210, label %208

208:                                              ; preds = %207
  tail call void @_ZdlPv(i8* %61) #16
  %209 = load i64, i64* %46, align 8
  br label %210

210:                                              ; preds = %208, %207
  %211 = phi i64 [ %209, %208 ], [ %47, %207 ]
  store i64 %72, i64* %53, align 8
  store i64 %65, i64* %55, align 8
  %212 = or i64 %211, 1
  store i64 %212, i64* %46, align 8
  br label %213

213:                                              ; preds = %38, %210
  %214 = icmp sgt i32 %16, 0
  br i1 %214, label %215, label %225

215:                                              ; preds = %213
  %216 = bitcast i32* %6 to i8*
  %217 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5
  %218 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 11
  %219 = getelementptr inbounds %"struct.webrtc::RTPVideoHeaderVP9", %"struct.webrtc::RTPVideoHeaderVP9"* %13, i64 0, i32 0
  %220 = getelementptr inbounds %"class.absl::InlinedVector.90", %"class.absl::InlinedVector.90"* %43, i64 0, i32 0
  br label %221

221:                                              ; preds = %232, %215
  %222 = phi i32 [ 0, %215 ], [ %233, %232 ]
  %223 = icmp ult i32 %222, %21
  %224 = icmp eq i32 %222, %21
  br label %235

225:                                              ; preds = %232, %213
  %226 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 3
  %227 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %226, i64 0, i32 0, i32 0
  %228 = load %"struct.std::__1::array.15"*, %"struct.std::__1::array.15"** %227, align 8
  %229 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 3, i32 0, i32 1
  %230 = load %"struct.std::__1::array.15"*, %"struct.std::__1::array.15"** %229, align 8
  %231 = icmp eq %"struct.std::__1::array.15"* %228, %230
  br i1 %231, label %278, label %290

232:                                              ; preds = %275
  %233 = add nuw nsw i32 %222, 1
  %234 = icmp eq i32 %233, %16
  br i1 %234, label %225, label %221

235:                                              ; preds = %275, %221
  %236 = phi i32 [ 0, %221 ], [ %276, %275 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %216) #15
  store i32 -1431655766, i32* %6, align 4
  %237 = icmp ult i32 %236, %26
  %238 = or i1 %223, %237
  br i1 %238, label %239, label %240

239:                                              ; preds = %235
  store i32 0, i32* %6, align 4
  br label %257

240:                                              ; preds = %235
  br i1 %224, label %245, label %241

241:                                              ; preds = %240
  %242 = load i8, i8* %217, align 1, !range !3
  %243 = icmp eq i8 %242, 0
  br i1 %243, label %252, label %244

244:                                              ; preds = %241
  store i32 0, i32* %6, align 4
  br label %257

245:                                              ; preds = %240
  %246 = icmp eq i32 %236, %26
  br i1 %246, label %247, label %248

247:                                              ; preds = %245
  store i32 2, i32* %6, align 4
  br label %257

248:                                              ; preds = %245
  %249 = load i8, i8* %218, align 2, !range !3
  %250 = icmp eq i8 %249, 0
  br i1 %250, label %252, label %251

251:                                              ; preds = %248
  store i32 2, i32* %6, align 4
  br label %257

252:                                              ; preds = %241, %248
  %253 = load i8, i8* %219, align 8, !range !3
  %254 = icmp eq i8 %253, 0
  br i1 %254, label %255, label %256

255:                                              ; preds = %252
  store i32 2, i32* %6, align 4
  br label %257

256:                                              ; preds = %252
  store i32 3, i32* %6, align 4
  br label %257

257:                                              ; preds = %244, %251, %256, %255, %247, %239
  %258 = phi i32 [ 0, %244 ], [ 2, %251 ], [ 3, %256 ], [ 2, %255 ], [ 2, %247 ], [ 0, %239 ]
  %259 = load i64, i64* %46, align 8, !noalias !32
  %260 = and i64 %259, 1
  %261 = icmp eq i64 %260, 0
  %262 = load i64, i64* %55, align 8
  %263 = select i1 %261, i64 10, i64 %262
  %264 = lshr i64 %259, 1
  %265 = icmp eq i64 %264, %263
  br i1 %265, label %273, label %266, !prof !13

266:                                              ; preds = %257
  %267 = load i64, i64* %53, align 8
  %268 = select i1 %261, i64 %51, i64 %267
  %269 = inttoptr i64 %268 to i32*
  %270 = getelementptr inbounds i32, i32* %269, i64 %264
  store i32 %258, i32* %270, align 4
  %271 = load i64, i64* %46, align 8
  %272 = add i64 %271, 2
  store i64 %272, i64* %46, align 8
  br label %275

273:                                              ; preds = %257
  %274 = call dereferenceable(4) i32* @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15EmplaceBackSlowIJRKS3_EEERS3_DpOT_(%"class.absl::inlined_vector_internal::Storage.91"* %220, i32* nonnull dereferenceable(4) %6) #15
  br label %275

275:                                              ; preds = %266, %273
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %216) #15
  %276 = add nuw nsw i32 %236, 1
  %277 = icmp eq i32 %276, 4
  br i1 %277, label %232, label %235

278:                                              ; preds = %225
  %279 = ptrtoint %"struct.std::__1::array.15"* %228 to i64
  %280 = ptrtoint %"struct.std::__1::array.15"* %230 to i64
  %281 = sub i64 %280, %279
  %282 = ashr exact i64 %281, 6
  %283 = icmp ult i64 %282, 128
  br i1 %283, label %284, label %286

284:                                              ; preds = %278
  %285 = sub nuw nsw i64 128, %282
  call void @_ZNSt3__16vectorINS_5arrayIlLm8EEENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector"* %226, i64 %285) #15
  br label %290

286:                                              ; preds = %278
  %287 = icmp eq i64 %281, 8192
  br i1 %287, label %290, label %288

288:                                              ; preds = %286
  %289 = getelementptr inbounds %"struct.std::__1::array.15", %"struct.std::__1::array.15"* %228, i64 128
  store %"struct.std::__1::array.15"* %289, %"struct.std::__1::array.15"** %229, align 8
  br label %290

290:                                              ; preds = %286, %288, %284, %225
  %291 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 12
  %292 = load i8, i8* %291, align 1, !range !3
  %293 = icmp ne i8 %292, 0
  %294 = icmp ne i8 %20, 0
  %295 = and i1 %294, %293
  br i1 %295, label %296, label %331

296:                                              ; preds = %290
  %297 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4
  %298 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6
  %299 = load i16, i16* %298, align 2
  %300 = sext i16 %299 to i32
  %301 = srem i32 %300, 128
  %302 = sext i32 %301 to i64
  %303 = load %"struct.std::__1::array.15"*, %"struct.std::__1::array.15"** %227, align 8
  %304 = add nsw i32 %21, -1
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds %"struct.std::__1::array.15", %"struct.std::__1::array.15"* %303, i64 %302, i32 0, i64 %305
  %307 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %297, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %308 = load i64, i64* %307, align 8, !noalias !35
  %309 = and i64 %308, 1
  %310 = icmp eq i64 %309, 0
  %311 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1, i32 0, i32 1
  %312 = load i64, i64* %311, align 8
  %313 = select i1 %310, i64 5, i64 %312
  %314 = lshr i64 %308, 1
  %315 = icmp eq i64 %314, %313
  br i1 %315, label %328, label %316, !prof !13

316:                                              ; preds = %296
  %317 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1
  %318 = ptrtoint %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %317 to i64
  %319 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %320 = bitcast i64** %319 to i64*
  %321 = load i64, i64* %320, align 8
  %322 = select i1 %310, i64 %318, i64 %321
  %323 = inttoptr i64 %322 to i64*
  %324 = getelementptr inbounds i64, i64* %323, i64 %314
  %325 = load i64, i64* %306, align 8
  store i64 %325, i64* %324, align 8
  %326 = load i64, i64* %307, align 8
  %327 = add i64 %326, 2
  store i64 %327, i64* %307, align 8
  br label %331

328:                                              ; preds = %296
  %329 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %297, i64 0, i32 0
  %330 = call dereferenceable(8) i64* @_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15EmplaceBackSlowIJRKlEEERlDpOT_(%"class.absl::inlined_vector_internal::Storage.143"* %329, i64* dereferenceable(8) %306) #15
  br label %331

331:                                              ; preds = %328, %316, %290
  %332 = getelementptr inbounds %"struct.webrtc::RTPVideoHeaderVP9", %"struct.webrtc::RTPVideoHeaderVP9"* %13, i64 0, i32 0
  %333 = load i8, i8* %332, align 8, !range !3
  %334 = icmp eq i8 %333, 0
  br i1 %334, label %383, label %335

335:                                              ; preds = %331
  %336 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 14
  %337 = load i8, i8* %336, align 1
  %338 = icmp eq i8 %337, 0
  br i1 %338, label %383, label %339

339:                                              ; preds = %335
  %340 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6
  %341 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4
  %342 = zext i8 %20 to i64
  %343 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %341, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %344 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1, i32 0, i32 1
  %345 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1
  %346 = ptrtoint %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %345 to i64
  %347 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %348 = bitcast i64** %347 to i64*
  %349 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %341, i64 0, i32 0
  br label %350

350:                                              ; preds = %339, %378
  %351 = phi i64 [ 0, %339 ], [ %379, %378 ]
  %352 = load i16, i16* %340, align 2
  %353 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 15, i64 %351
  %354 = load i8, i8* %353, align 1
  %355 = zext i8 %354 to i16
  %356 = sub i16 %352, %355
  %357 = and i16 %356, 127
  %358 = zext i16 %357 to i64
  %359 = load %"struct.std::__1::array.15"*, %"struct.std::__1::array.15"** %227, align 8
  %360 = getelementptr inbounds %"struct.std::__1::array.15", %"struct.std::__1::array.15"* %359, i64 %358, i32 0, i64 %342
  %361 = load i64, i64* %343, align 8, !noalias !38
  %362 = and i64 %361, 1
  %363 = icmp eq i64 %362, 0
  %364 = load i64, i64* %344, align 8
  %365 = select i1 %363, i64 5, i64 %364
  %366 = lshr i64 %361, 1
  %367 = icmp eq i64 %366, %365
  br i1 %367, label %376, label %368, !prof !13

368:                                              ; preds = %350
  %369 = load i64, i64* %348, align 8
  %370 = select i1 %363, i64 %346, i64 %369
  %371 = inttoptr i64 %370 to i64*
  %372 = getelementptr inbounds i64, i64* %371, i64 %366
  %373 = load i64, i64* %360, align 8
  store i64 %373, i64* %372, align 8
  %374 = load i64, i64* %343, align 8
  %375 = add i64 %374, 2
  store i64 %375, i64* %343, align 8
  br label %378

376:                                              ; preds = %350
  %377 = call dereferenceable(8) i64* @_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15EmplaceBackSlowIJRKlEEERlDpOT_(%"class.absl::inlined_vector_internal::Storage.143"* %349, i64* dereferenceable(8) %360) #15
  br label %378

378:                                              ; preds = %368, %376
  %379 = add nuw nsw i64 %351, 1
  %380 = load i8, i8* %336, align 1
  %381 = zext i8 %380 to i64
  %382 = icmp ult i64 %379, %381
  br i1 %382, label %350, label %383

383:                                              ; preds = %378, %335, %331
  %384 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6
  %385 = load i16, i16* %384, align 2
  %386 = sext i16 %385 to i32
  %387 = srem i32 %386, 128
  %388 = sext i32 %387 to i64
  %389 = load %"struct.std::__1::array.15"*, %"struct.std::__1::array.15"** %227, align 8
  %390 = zext i8 %20 to i64
  %391 = getelementptr inbounds %"struct.std::__1::array.15", %"struct.std::__1::array.15"* %389, i64 %388, i32 0, i64 %390
  store i64 %2, i64* %391, align 8
  %392 = load i8, i8* %332, align 8, !range !3
  %393 = load i8, i8* %291, align 1
  %394 = or i8 %393, %392
  %395 = icmp eq i8 %394, 0
  br i1 %395, label %396, label %405

396:                                              ; preds = %383
  %397 = shl nuw nsw i64 %390, 3
  %398 = add nuw nsw i64 %397, 840
  %399 = getelementptr i8, i8* %5, i64 %398
  %400 = xor i32 %21, -1
  %401 = add i32 %400, %16
  %402 = zext i32 %401 to i64
  %403 = shl nuw nsw i64 %402, 3
  %404 = add nuw nsw i64 %403, 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %399, i8 -1, i64 %404, i1 false)
  br label %405

405:                                              ; preds = %396, %383
  %406 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 5
  %407 = trunc i64 %15 to i32
  %408 = icmp slt i32 %407, 0
  br i1 %408, label %409, label %410, !prof !13

409:                                              ; preds = %405
  call void @llvm.trap() #15
  unreachable

410:                                              ; preds = %405
  %411 = and i64 %15, 4294967295
  %412 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %406, i64 0, i32 0
  call void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE6ResizeINS0_19DefaultValueAdapterIS4_EEEEvT_m(%"class.absl::inlined_vector_internal::Storage.98"* %412, i64 %411) #15
  br i1 %214, label %413, label %419

413:                                              ; preds = %410
  %414 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %406, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %415 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1, i32 0, i32 0
  %416 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 5, i32 0, i32 1
  %417 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %416 to i32*
  %418 = and i64 %15, 4294967295
  br label %421

419:                                              ; preds = %436, %410
  %420 = icmp eq i8 %25, 0
  br i1 %420, label %445, label %525

421:                                              ; preds = %436, %413
  %422 = phi i64 [ 0, %413 ], [ %443, %436 ]
  %423 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 4, i32 0, i64 %422
  %424 = load i64, i64* %423, align 8
  %425 = icmp eq i64 %424, -1
  %426 = load i64, i64* %414, align 8
  %427 = lshr i64 %426, 1
  %428 = icmp ugt i64 %427, %422
  br i1 %425, label %429, label %431

429:                                              ; preds = %421
  br i1 %428, label %436, label %430, !prof !2

430:                                              ; preds = %429
  call void @llvm.trap() #15
  unreachable

431:                                              ; preds = %421
  br i1 %428, label %433, label %432, !prof !2

432:                                              ; preds = %431
  call void @llvm.trap() #15
  unreachable

433:                                              ; preds = %431
  %434 = sub nsw i64 %2, %424
  %435 = trunc i64 %434 to i32
  br label %436

436:                                              ; preds = %429, %433
  %437 = phi i32 [ %435, %433 ], [ 0, %429 ]
  %438 = and i64 %426, 1
  %439 = icmp eq i64 %438, 0
  %440 = load i32*, i32** %415, align 8
  %441 = select i1 %439, i32* %417, i32* %440
  %442 = getelementptr inbounds i32, i32* %441, i64 %422
  store i32 %437, i32* %442, align 4
  %443 = add nuw nsw i64 %422, 1
  %444 = icmp eq i64 %443, %418
  br i1 %444, label %419, label %421

445:                                              ; preds = %419
  %446 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 4, i32 0, i64 %390
  store i64 %2, i64* %446, align 8
  %447 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %3, i64 0, i32 15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5
  %448 = load i8, i8* %447, align 1, !range !3
  %449 = icmp eq i8 %448, 0
  %450 = add nuw nsw i32 %21, 1
  %451 = icmp slt i32 %450, %16
  %452 = and i1 %449, %451
  br i1 %452, label %453, label %525

453:                                              ; preds = %445
  %454 = add nuw nsw i64 %390, 1
  %455 = and i64 %15, 4294967295
  %456 = xor i64 %390, -1
  %457 = add nsw i64 %455, %456
  %458 = icmp ult i64 %457, 4
  br i1 %458, label %518, label %459

459:                                              ; preds = %453
  %460 = and i64 %457, -4
  %461 = add nsw i64 %454, %460
  %462 = insertelement <2 x i64> undef, i64 %2, i32 0
  %463 = shufflevector <2 x i64> %462, <2 x i64> undef, <2 x i32> zeroinitializer
  %464 = insertelement <2 x i64> undef, i64 %2, i32 0
  %465 = shufflevector <2 x i64> %464, <2 x i64> undef, <2 x i32> zeroinitializer
  %466 = add nsw i64 %460, -4
  %467 = lshr exact i64 %466, 2
  %468 = add nuw nsw i64 %467, 1
  %469 = and i64 %468, 3
  %470 = icmp ult i64 %466, 12
  br i1 %470, label %502, label %471

471:                                              ; preds = %459
  %472 = sub nsw i64 %468, %469
  br label %473

473:                                              ; preds = %473, %471
  %474 = phi i64 [ 0, %471 ], [ %499, %473 ]
  %475 = phi i64 [ %472, %471 ], [ %500, %473 ]
  %476 = add i64 %454, %474
  %477 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 4, i32 0, i64 %476
  %478 = bitcast i64* %477 to <2 x i64>*
  store <2 x i64> %463, <2 x i64>* %478, align 8
  %479 = getelementptr inbounds i64, i64* %477, i64 2
  %480 = bitcast i64* %479 to <2 x i64>*
  store <2 x i64> %465, <2 x i64>* %480, align 8
  %481 = or i64 %474, 4
  %482 = add i64 %454, %481
  %483 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 4, i32 0, i64 %482
  %484 = bitcast i64* %483 to <2 x i64>*
  store <2 x i64> %463, <2 x i64>* %484, align 8
  %485 = getelementptr inbounds i64, i64* %483, i64 2
  %486 = bitcast i64* %485 to <2 x i64>*
  store <2 x i64> %465, <2 x i64>* %486, align 8
  %487 = or i64 %474, 8
  %488 = add i64 %454, %487
  %489 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 4, i32 0, i64 %488
  %490 = bitcast i64* %489 to <2 x i64>*
  store <2 x i64> %463, <2 x i64>* %490, align 8
  %491 = getelementptr inbounds i64, i64* %489, i64 2
  %492 = bitcast i64* %491 to <2 x i64>*
  store <2 x i64> %465, <2 x i64>* %492, align 8
  %493 = or i64 %474, 12
  %494 = add i64 %454, %493
  %495 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 4, i32 0, i64 %494
  %496 = bitcast i64* %495 to <2 x i64>*
  store <2 x i64> %463, <2 x i64>* %496, align 8
  %497 = getelementptr inbounds i64, i64* %495, i64 2
  %498 = bitcast i64* %497 to <2 x i64>*
  store <2 x i64> %465, <2 x i64>* %498, align 8
  %499 = add i64 %474, 16
  %500 = add i64 %475, -4
  %501 = icmp eq i64 %500, 0
  br i1 %501, label %502, label %473, !llvm.loop !41

502:                                              ; preds = %473, %459
  %503 = phi i64 [ 0, %459 ], [ %499, %473 ]
  %504 = icmp eq i64 %469, 0
  br i1 %504, label %516, label %505

505:                                              ; preds = %502, %505
  %506 = phi i64 [ %513, %505 ], [ %503, %502 ]
  %507 = phi i64 [ %514, %505 ], [ %469, %502 ]
  %508 = add i64 %454, %506
  %509 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 4, i32 0, i64 %508
  %510 = bitcast i64* %509 to <2 x i64>*
  store <2 x i64> %463, <2 x i64>* %510, align 8
  %511 = getelementptr inbounds i64, i64* %509, i64 2
  %512 = bitcast i64* %511 to <2 x i64>*
  store <2 x i64> %465, <2 x i64>* %512, align 8
  %513 = add i64 %506, 4
  %514 = add i64 %507, -1
  %515 = icmp eq i64 %514, 0
  br i1 %515, label %516, label %505, !llvm.loop !42

516:                                              ; preds = %505, %502
  %517 = icmp eq i64 %457, %460
  br i1 %517, label %525, label %518

518:                                              ; preds = %516, %453
  %519 = phi i64 [ %454, %453 ], [ %461, %516 ]
  br label %520

520:                                              ; preds = %518, %520
  %521 = phi i64 [ %523, %520 ], [ %519, %518 ]
  %522 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 4, i32 0, i64 %521
  store i64 %2, i64* %522, align 8
  %523 = add i64 %521, 1
  %524 = icmp eq i64 %523, %455
  br i1 %524, label %525, label %520, !llvm.loop !43

525:                                              ; preds = %520, %516, %419, %445, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16RtpPayloadParams13H264ToGenericERKNS_21CodecSpecificInfoH264ElbPNS_14RTPVideoHeaderE(%"class.webrtc::RtpPayloadParams"* nocapture, %"struct.webrtc::CodecSpecificInfoH264"* nocapture readonly dereferenceable(8), i64, i1 zeroext, %"struct.webrtc::RTPVideoHeader"*) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.rtc::DiagnosticLogMessage", align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfoH264", %"struct.webrtc::CodecSpecificInfoH264"* %1, i64 0, i32 1
  %10 = load i8, i8* %9, align 4
  %11 = icmp eq i8 %10, -1
  %12 = select i1 %11, i8 0, i8 %10
  %13 = zext i8 %12 to i32
  %14 = icmp ugt i8 %12, 7
  br i1 %14, label %15, label %20

15:                                               ; preds = %5
  %16 = bitcast %"class.rtc::DiagnosticLogMessage"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 304, i8* nonnull %16) #15
  call void @_ZN3rtc20DiagnosticLogMessageC1EPKciNS_15LoggingSeverityENS_15LogErrorContextEi(%"class.rtc::DiagnosticLogMessage"* nonnull %6, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.3, i64 0, i64 0), i32 331, i32 2, i32 0, i32 0) #15
  %17 = getelementptr inbounds %"class.rtc::DiagnosticLogMessage", %"class.rtc::DiagnosticLogMessage"* %6, i64 0, i32 7
  %18 = bitcast %"class.std::__1::basic_ostringstream"* %17 to %"class.std::__1::basic_ostream"*
  %19 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %18, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.4, i64 0, i64 0), i64 83) #15
  call void @_ZN3rtc20DiagnosticLogMessageD1Ev(%"class.rtc::DiagnosticLogMessage"* nonnull %6) #15
  call void @llvm.lifetime.end.p0i8(i64 304, i8* nonnull %16) #15
  br label %115

20:                                               ; preds = %5
  %21 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i8, i8* %21, align 8, !range !3
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoD1Ev(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %25) #15
  store i8 0, i8* %21, align 8
  br label %26

26:                                               ; preds = %20, %24
  %27 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  tail call void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoC1Ev(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %27) #15
  store i8 1, i8* %21, align 8
  %28 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %27, i64 0, i32 0
  store i64 %2, i64* %28, align 8
  %29 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 2
  store i32 %13, i32* %29, align 4
  br i1 %3, label %30, label %35

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 0, i32 0, i64 0
  %32 = zext i8 %12 to i64
  %33 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 0, i32 0, i64 %32
  %34 = bitcast i64* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 -1, i64 64, i1 false)
  store i64 %2, i64* %33, align 8
  br label %115

35:                                               ; preds = %26
  %36 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfoH264", %"struct.webrtc::CodecSpecificInfoH264"* %1, i64 0, i32 2
  %37 = load i8, i8* %36, align 1, !range !3
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %51

39:                                               ; preds = %35
  %40 = bitcast i64* %8 to i8*
  %41 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4
  %42 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %41, i64 0, i32 0
  %43 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %45 = bitcast i64** %44 to i64*
  %46 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1, i32 0, i32 1
  %47 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1
  %48 = ptrtoint %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %47 to i64
  %49 = add nuw nsw i32 %13, 1
  %50 = zext i32 %49 to i64
  br label %85

51:                                               ; preds = %35
  %52 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #15
  %53 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 0, i32 0, i64 0
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %7, align 8
  %55 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 0, i32 0, i64 1
  %56 = load i64, i64* %55, align 8
  %57 = icmp slt i64 %56, %54
  br i1 %57, label %80, label %81

58:                                               ; preds = %142
  %59 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %60 = bitcast i64** %59 to i64*
  %61 = load i64, i64* %60, align 8, !noalias !44
  %62 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1, i32 0, i32 1
  %63 = load i64, i64* %62, align 8, !noalias !44
  br label %67

64:                                               ; preds = %142
  %65 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4, i32 0, i32 1
  %66 = ptrtoint %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %65 to i64
  br label %67

67:                                               ; preds = %64, %58
  %68 = phi i64 [ %66, %64 ], [ %61, %58 ]
  %69 = phi i64 [ 5, %64 ], [ %63, %58 ]
  %70 = lshr i64 %146, 1
  %71 = icmp eq i64 %70, %69
  br i1 %71, label %77, label %72, !prof !13

72:                                               ; preds = %67
  %73 = inttoptr i64 %68 to i64*
  %74 = getelementptr inbounds i64, i64* %73, i64 %70
  store i64 %54, i64* %74, align 8
  %75 = load i64, i64* %145, align 8
  %76 = add i64 %75, 2
  store i64 %76, i64* %145, align 8
  br label %79

77:                                               ; preds = %67
  %78 = call dereferenceable(8) i64* @_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15EmplaceBackSlowIJRKlEEERlDpOT_(%"class.absl::inlined_vector_internal::Storage.143"* %144, i64* nonnull dereferenceable(8) %7) #15
  br label %79

79:                                               ; preds = %72, %77
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #15
  br label %112

80:                                               ; preds = %51
  store i64 -1, i64* %55, align 8
  br label %81

81:                                               ; preds = %51, %80
  %82 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 0, i32 0, i64 2
  %83 = load i64, i64* %82, align 8
  %84 = icmp slt i64 %83, %54
  br i1 %84, label %116, label %117

85:                                               ; preds = %109, %39
  %86 = phi i64 [ %110, %109 ], [ 0, %39 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #15
  %87 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 0, i32 0, i64 %86
  %88 = load i64, i64* %87, align 8
  store i64 %88, i64* %8, align 8
  %89 = icmp eq i64 %88, -1
  br i1 %89, label %109, label %90

90:                                               ; preds = %85
  %91 = load i64, i64* %43, align 8, !noalias !47
  %92 = and i64 %91, 1
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %97, label %94

94:                                               ; preds = %90
  %95 = load i64, i64* %45, align 8, !noalias !47
  %96 = load i64, i64* %46, align 8, !noalias !47
  br label %97

97:                                               ; preds = %90, %94
  %98 = phi i64 [ %95, %94 ], [ %48, %90 ]
  %99 = phi i64 [ %96, %94 ], [ 5, %90 ]
  %100 = lshr i64 %91, 1
  %101 = icmp eq i64 %100, %99
  br i1 %101, label %107, label %102, !prof !13

102:                                              ; preds = %97
  %103 = inttoptr i64 %98 to i64*
  %104 = getelementptr inbounds i64, i64* %103, i64 %100
  store i64 %88, i64* %104, align 8
  %105 = load i64, i64* %43, align 8
  %106 = add i64 %105, 2
  store i64 %106, i64* %43, align 8
  br label %109

107:                                              ; preds = %97
  %108 = call dereferenceable(8) i64* @_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15EmplaceBackSlowIJRKlEEERlDpOT_(%"class.absl::inlined_vector_internal::Storage.143"* %42, i64* nonnull dereferenceable(8) %8) #15
  br label %109

109:                                              ; preds = %107, %102, %85
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #15
  %110 = add nuw nsw i64 %86, 1
  %111 = icmp eq i64 %110, %50
  br i1 %111, label %112, label %85

112:                                              ; preds = %109, %79
  %113 = zext i8 %12 to i64
  %114 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 0, i32 0, i64 %113
  store i64 %2, i64* %114, align 8
  br label %115

115:                                              ; preds = %30, %112, %15
  ret void

116:                                              ; preds = %81
  store i64 -1, i64* %82, align 8
  br label %117

117:                                              ; preds = %116, %81
  %118 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 0, i32 0, i64 3
  %119 = load i64, i64* %118, align 8
  %120 = icmp slt i64 %119, %54
  br i1 %120, label %121, label %122

121:                                              ; preds = %117
  store i64 -1, i64* %118, align 8
  br label %122

122:                                              ; preds = %121, %117
  %123 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 0, i32 0, i64 4
  %124 = load i64, i64* %123, align 8
  %125 = icmp slt i64 %124, %54
  br i1 %125, label %126, label %127

126:                                              ; preds = %122
  store i64 -1, i64* %123, align 8
  br label %127

127:                                              ; preds = %126, %122
  %128 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 0, i32 0, i64 5
  %129 = load i64, i64* %128, align 8
  %130 = icmp slt i64 %129, %54
  br i1 %130, label %131, label %132

131:                                              ; preds = %127
  store i64 -1, i64* %128, align 8
  br label %132

132:                                              ; preds = %131, %127
  %133 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 0, i32 0, i64 6
  %134 = load i64, i64* %133, align 8
  %135 = icmp slt i64 %134, %54
  br i1 %135, label %136, label %137

136:                                              ; preds = %132
  store i64 -1, i64* %133, align 8
  br label %137

137:                                              ; preds = %136, %132
  %138 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 0, i32 0, i64 7
  %139 = load i64, i64* %138, align 8
  %140 = icmp slt i64 %139, %54
  br i1 %140, label %141, label %142

141:                                              ; preds = %137
  store i64 -1, i64* %138, align 8
  br label %142

142:                                              ; preds = %141, %137
  %143 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader", %"struct.webrtc::RTPVideoHeader"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 4
  %144 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %143, i64 0, i32 0
  %145 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %143, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %146 = load i64, i64* %145, align 8, !noalias !44
  %147 = and i64 %146, 1
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %64, label %58
}

declare void @_ZN3rtc20DiagnosticLogMessageC1EPKciNS_15LoggingSeverityENS_15LogErrorContextEi(%"class.rtc::DiagnosticLogMessage"*, i8*, i32, i32, i32, i32) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN3rtc20DiagnosticLogMessageD1Ev(%"class.rtc::DiagnosticLogMessage"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16RtpPayloadParams21SetDependenciesVp8NewERKNS_20CodecSpecificInfoVP8ElbbPNS_14RTPVideoHeader21GenericDescriptorInfoE(%"class.webrtc::RtpPayloadParams"* nocapture, %"struct.webrtc::CodecSpecificInfoVP8"* nocapture readonly dereferenceable(72), i64, i1 zeroext, i1 zeroext, %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"*) local_unnamed_addr #0 align 2 {
  %7 = alloca i64, align 8
  %8 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %9 = bitcast i8* %8 to i16*
  store i16 257, i16* %9, align 8
  br i1 %3, label %25, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfoVP8", %"struct.webrtc::CodecSpecificInfoVP8"* %1, i64 0, i32 6
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %29, label %14

14:                                               ; preds = %10
  %15 = bitcast i64* %7 to i8*
  %16 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %5, i64 0, i32 4
  %17 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %5, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %19 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %5, i64 0, i32 4, i32 0, i32 1
  %20 = bitcast %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %19 to i64*
  %21 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %16, i64 0, i32 0
  %22 = bitcast i64** %18 to i64*
  %23 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %5, i64 0, i32 4, i32 0, i32 1, i32 0, i32 1
  %24 = ptrtoint %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %19 to i64
  br label %33

25:                                               ; preds = %6
  %26 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 5, i32 0, i64 0
  store i64 %2, i64* %26, align 8
  %27 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 5, i32 0, i64 1
  store i64 %2, i64* %27, align 8
  %28 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 5, i32 0, i64 2
  store i64 %2, i64* %28, align 8
  br label %91

29:                                               ; preds = %79, %10
  %30 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfoVP8", %"struct.webrtc::CodecSpecificInfoVP8"* %1, i64 0, i32 8
  %31 = load i64, i64* %30, align 8
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %91, label %83

33:                                               ; preds = %14, %79
  %34 = phi i64 [ 0, %14 ], [ %80, %79 ]
  %35 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfoVP8", %"struct.webrtc::CodecSpecificInfoVP8"* %1, i64 0, i32 5, i64 %34
  %36 = load i64, i64* %35, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #15
  %37 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 5, i32 0, i64 %36
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %7, align 8
  %39 = load i64, i64* %17, align 8
  %40 = and i64 %39, 1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %33
  %43 = load i64*, i64** %18, align 8
  br label %44

44:                                               ; preds = %33, %42
  %45 = phi i64* [ %43, %42 ], [ %20, %33 ]
  %46 = lshr i64 %39, 1
  %47 = getelementptr inbounds i64, i64* %45, i64 %46
  %48 = icmp eq i64 %46, 0
  br i1 %48, label %56, label %49

49:                                               ; preds = %44, %53
  %50 = phi i64* [ %54, %53 ], [ %45, %44 ]
  %51 = load i64, i64* %50, align 8
  %52 = icmp eq i64 %51, %38
  br i1 %52, label %56, label %53

53:                                               ; preds = %49
  %54 = getelementptr inbounds i64, i64* %50, i64 1
  %55 = icmp eq i64* %54, %47
  br i1 %55, label %56, label %49

56:                                               ; preds = %49, %53, %44
  %57 = phi i64* [ %45, %44 ], [ %50, %49 ], [ %47, %53 ]
  br i1 %41, label %60, label %58

58:                                               ; preds = %56
  %59 = load i64*, i64** %18, align 8
  br label %60

60:                                               ; preds = %56, %58
  %61 = phi i64* [ %59, %58 ], [ %20, %56 ]
  %62 = getelementptr inbounds i64, i64* %61, i64 %46
  %63 = icmp eq i64* %57, %62
  br i1 %63, label %64, label %79

64:                                               ; preds = %60
  br i1 %41, label %68, label %65

65:                                               ; preds = %64
  %66 = load i64, i64* %22, align 8, !noalias !50
  %67 = load i64, i64* %23, align 8, !noalias !50
  br label %68

68:                                               ; preds = %64, %65
  %69 = phi i64 [ %66, %65 ], [ %24, %64 ]
  %70 = phi i64 [ %67, %65 ], [ 5, %64 ]
  %71 = icmp eq i64 %46, %70
  br i1 %71, label %77, label %72, !prof !13

72:                                               ; preds = %68
  %73 = inttoptr i64 %69 to i64*
  %74 = getelementptr inbounds i64, i64* %73, i64 %46
  store i64 %38, i64* %74, align 8
  %75 = load i64, i64* %17, align 8
  %76 = add i64 %75, 2
  store i64 %76, i64* %17, align 8
  br label %79

77:                                               ; preds = %68
  %78 = call dereferenceable(8) i64* @_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15EmplaceBackSlowIJRKlEEERlDpOT_(%"class.absl::inlined_vector_internal::Storage.143"* %21, i64* nonnull dereferenceable(8) %7) #15
  br label %79

79:                                               ; preds = %77, %72, %60
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #15
  %80 = add nuw i64 %34, 1
  %81 = load i64, i64* %11, align 8
  %82 = icmp ult i64 %80, %81
  br i1 %82, label %33, label %29

83:                                               ; preds = %29, %83
  %84 = phi i64 [ %88, %83 ], [ 0, %29 ]
  %85 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfoVP8", %"struct.webrtc::CodecSpecificInfoVP8"* %1, i64 0, i32 7, i64 %84
  %86 = load i64, i64* %85, align 8
  %87 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 5, i32 0, i64 %86
  store i64 %2, i64* %87, align 8
  %88 = add nuw i64 %84, 1
  %89 = load i64, i64* %30, align 8
  %90 = icmp ult i64 %88, %89
  br i1 %90, label %83, label %91

91:                                               ; preds = %83, %29, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16RtpPayloadParams28SetDependenciesVp8DeprecatedERKNS_20CodecSpecificInfoVP8ElbiibPNS_14RTPVideoHeader21GenericDescriptorInfoE(%"class.webrtc::RtpPayloadParams"* nocapture, %"struct.webrtc::CodecSpecificInfoVP8"* nocapture readnone dereferenceable(72), i64, i1 zeroext, i32, i32, i1 zeroext, %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"*) local_unnamed_addr #0 align 2 {
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %12 = bitcast i8* %11 to i16*
  store i16 1, i16* %12, align 8
  br i1 %3, label %13, label %19

13:                                               ; preds = %8
  %14 = sext i32 %4 to i64
  %15 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 %14, i32 0, i64 0
  %16 = sext i32 %5 to i64
  %17 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 %14, i32 0, i64 %16
  %18 = bitcast i64* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 -1, i64 64, i1 false)
  br label %103

19:                                               ; preds = %8
  br i1 %6, label %37, label %20

20:                                               ; preds = %19
  %21 = icmp slt i32 %5, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %20
  %23 = sext i32 %4 to i64
  br label %99

24:                                               ; preds = %20
  %25 = bitcast i64* %10 to i8*
  %26 = sext i32 %4 to i64
  %27 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7, i64 0, i32 4
  %28 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %27, i64 0, i32 0
  %29 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %27, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %31 = bitcast i64** %30 to i64*
  %32 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7, i64 0, i32 4, i32 0, i32 1, i32 0, i32 1
  %33 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7, i64 0, i32 4, i32 0, i32 1
  %34 = ptrtoint %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %33 to i64
  %35 = add nuw i32 %5, 1
  %36 = zext i32 %35 to i64
  br label %72

37:                                               ; preds = %19
  %38 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #15
  %39 = sext i32 %4 to i64
  %40 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 %39, i32 0, i64 0
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %9, align 8
  %42 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 %39, i32 0, i64 1
  %43 = load i64, i64* %42, align 8
  %44 = icmp slt i64 %43, %41
  br i1 %44, label %67, label %68

45:                                               ; preds = %131
  %46 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %47 = bitcast i64** %46 to i64*
  %48 = load i64, i64* %47, align 8, !noalias !53
  %49 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7, i64 0, i32 4, i32 0, i32 1, i32 0, i32 1
  %50 = load i64, i64* %49, align 8, !noalias !53
  br label %54

51:                                               ; preds = %131
  %52 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7, i64 0, i32 4, i32 0, i32 1
  %53 = ptrtoint %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %52 to i64
  br label %54

54:                                               ; preds = %51, %45
  %55 = phi i64 [ %53, %51 ], [ %48, %45 ]
  %56 = phi i64 [ 5, %51 ], [ %50, %45 ]
  %57 = lshr i64 %135, 1
  %58 = icmp eq i64 %57, %56
  br i1 %58, label %64, label %59, !prof !13

59:                                               ; preds = %54
  %60 = inttoptr i64 %55 to i64*
  %61 = getelementptr inbounds i64, i64* %60, i64 %57
  store i64 %41, i64* %61, align 8
  %62 = load i64, i64* %134, align 8
  %63 = add i64 %62, 2
  store i64 %63, i64* %134, align 8
  br label %66

64:                                               ; preds = %54
  %65 = call dereferenceable(8) i64* @_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15EmplaceBackSlowIJRKlEEERlDpOT_(%"class.absl::inlined_vector_internal::Storage.143"* %133, i64* nonnull dereferenceable(8) %9) #15
  br label %66

66:                                               ; preds = %59, %64
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #15
  br label %99

67:                                               ; preds = %37
  store i64 -1, i64* %42, align 8
  br label %68

68:                                               ; preds = %37, %67
  %69 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 %39, i32 0, i64 2
  %70 = load i64, i64* %69, align 8
  %71 = icmp slt i64 %70, %41
  br i1 %71, label %105, label %106

72:                                               ; preds = %96, %24
  %73 = phi i64 [ %97, %96 ], [ 0, %24 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #15
  %74 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 %26, i32 0, i64 %73
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %10, align 8
  %76 = icmp eq i64 %75, -1
  br i1 %76, label %96, label %77

77:                                               ; preds = %72
  %78 = load i64, i64* %29, align 8, !noalias !56
  %79 = and i64 %78, 1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %84, label %81

81:                                               ; preds = %77
  %82 = load i64, i64* %31, align 8, !noalias !56
  %83 = load i64, i64* %32, align 8, !noalias !56
  br label %84

84:                                               ; preds = %77, %81
  %85 = phi i64 [ %82, %81 ], [ %34, %77 ]
  %86 = phi i64 [ %83, %81 ], [ 5, %77 ]
  %87 = lshr i64 %78, 1
  %88 = icmp eq i64 %87, %86
  br i1 %88, label %94, label %89, !prof !13

89:                                               ; preds = %84
  %90 = inttoptr i64 %85 to i64*
  %91 = getelementptr inbounds i64, i64* %90, i64 %87
  store i64 %75, i64* %91, align 8
  %92 = load i64, i64* %29, align 8
  %93 = add i64 %92, 2
  store i64 %93, i64* %29, align 8
  br label %96

94:                                               ; preds = %84
  %95 = call dereferenceable(8) i64* @_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15EmplaceBackSlowIJRKlEEERlDpOT_(%"class.absl::inlined_vector_internal::Storage.143"* %28, i64* nonnull dereferenceable(8) %10) #15
  br label %96

96:                                               ; preds = %94, %89, %72
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #15
  %97 = add nuw nsw i64 %73, 1
  %98 = icmp eq i64 %97, %36
  br i1 %98, label %99, label %72

99:                                               ; preds = %96, %22, %66
  %100 = phi i64 [ %23, %22 ], [ %39, %66 ], [ %26, %96 ]
  %101 = sext i32 %5 to i64
  %102 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 %100, i32 0, i64 %101
  br label %103

103:                                              ; preds = %99, %13
  %104 = phi i64* [ %102, %99 ], [ %17, %13 ]
  store i64 %2, i64* %104, align 8
  ret void

105:                                              ; preds = %68
  store i64 -1, i64* %69, align 8
  br label %106

106:                                              ; preds = %105, %68
  %107 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 %39, i32 0, i64 3
  %108 = load i64, i64* %107, align 8
  %109 = icmp slt i64 %108, %41
  br i1 %109, label %110, label %111

110:                                              ; preds = %106
  store i64 -1, i64* %107, align 8
  br label %111

111:                                              ; preds = %110, %106
  %112 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 %39, i32 0, i64 4
  %113 = load i64, i64* %112, align 8
  %114 = icmp slt i64 %113, %41
  br i1 %114, label %115, label %116

115:                                              ; preds = %111
  store i64 -1, i64* %112, align 8
  br label %116

116:                                              ; preds = %115, %111
  %117 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 %39, i32 0, i64 5
  %118 = load i64, i64* %117, align 8
  %119 = icmp slt i64 %118, %41
  br i1 %119, label %120, label %121

120:                                              ; preds = %116
  store i64 -1, i64* %117, align 8
  br label %121

121:                                              ; preds = %120, %116
  %122 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 %39, i32 0, i64 6
  %123 = load i64, i64* %122, align 8
  %124 = icmp slt i64 %123, %41
  br i1 %124, label %125, label %126

125:                                              ; preds = %121
  store i64 -1, i64* %122, align 8
  br label %126

126:                                              ; preds = %125, %121
  %127 = getelementptr inbounds %"class.webrtc::RtpPayloadParams", %"class.webrtc::RtpPayloadParams"* %0, i64 0, i32 2, i32 0, i64 %39, i32 0, i64 7
  %128 = load i64, i64* %127, align 8
  %129 = icmp slt i64 %128, %41
  br i1 %129, label %130, label %131

130:                                              ; preds = %126
  store i64 -1, i64* %127, align 8
  br label %131

131:                                              ; preds = %130, %126
  %132 = getelementptr inbounds %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo", %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* %7, i64 0, i32 4
  %133 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %132, i64 0, i32 0
  %134 = getelementptr inbounds %"class.absl::InlinedVector.142", %"class.absl::InlinedVector.142"* %132, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = load i64, i64* %134, align 8, !noalias !53
  %136 = and i64 %135, 1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %51, label %45
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc16RtpPayloadParams24MinimalisticVp9StructureERKNS_20CodecSpecificInfoVP9E(%"struct.webrtc::FrameDependencyStructure"* noalias sret, %"struct.webrtc::CodecSpecificInfoVP9"* dereferenceable(1624)) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca %"struct.webrtc::FrameDependencyTemplate", align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfoVP9", %"struct.webrtc::CodecSpecificInfoVP9"* %1, i64 0, i32 9
  %9 = load i64, i64* %8, align 8
  %10 = trunc i64 %9 to i32
  %11 = bitcast %"struct.webrtc::FrameDependencyStructure"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 -86, i64 104, i1 false)
  %12 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 0
  store i32 0, i32* %12, align 8
  %13 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 1
  %14 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 2
  %15 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %15, align 8
  %16 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %16, align 8
  %17 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 5
  %18 = bitcast %"class.std::__1::vector.130"* %17 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 24, i1 false) #15
  %19 = shl nsw i32 %10, 2
  store i32 %19, i32* %13, align 4
  store i32 %10, i32* %14, align 8
  %20 = sext i32 %19 to i64
  tail call void @_ZNSt3__16vectorIN6webrtc23FrameDependencyTemplateENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.130"* %17, i64 %20)
  %21 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #15
  store i32 0, i32* %3, align 4
  %22 = icmp sgt i32 %10, 0
  br i1 %22, label %23, label %77

23:                                               ; preds = %2
  %24 = bitcast %"struct.webrtc::FrameDependencyTemplate"* %4 to i8*
  %25 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 0
  %28 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 1
  %29 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 2
  %30 = bitcast i32* %5 to i8*
  %31 = getelementptr inbounds %"class.absl::InlinedVector.90", %"class.absl::InlinedVector.90"* %29, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 2, i32 0, i32 1, i32 0, i32 1
  %33 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 2, i32 0, i32 1
  %34 = ptrtoint %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %33 to i64
  %35 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %36 = bitcast i32** %35 to i64*
  %37 = getelementptr inbounds %"class.absl::InlinedVector.90", %"class.absl::InlinedVector.90"* %29, i64 0, i32 0
  %38 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 3
  %39 = bitcast i32* %6 to i8*
  %40 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %38, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %41 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 3, i32 0, i32 1, i32 0, i32 1
  %42 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 3, i32 0, i32 1
  %43 = ptrtoint %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %42 to i64
  %44 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %45 = bitcast i32** %44 to i64*
  %46 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %38, i64 0, i32 0
  %47 = bitcast i32* %7 to i8*
  %48 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 4, i32 0
  %49 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 5, i32 0, i32 1
  %50 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  %51 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 3
  %52 = getelementptr inbounds %"class.absl::InlinedVector.121", %"class.absl::InlinedVector.121"* %51, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i32 1
  %54 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 3, i32 0, i32 1
  %55 = ptrtoint %"union.absl::inlined_vector_internal::Storage<int, 10, std::__1::allocator<int> >::Data"* %54 to i64
  %56 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 3, i32 0, i32 1, i32 0, i32 0
  %57 = bitcast i32** %56 to i64*
  %58 = getelementptr inbounds %"class.absl::InlinedVector.121", %"class.absl::InlinedVector.121"* %51, i64 0, i32 0
  %59 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %60 = bitcast i32** %59 to i8**
  %61 = bitcast i32** %44 to i8**
  %62 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = bitcast i32** %35 to i8**
  %64 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfoVP9", %"struct.webrtc::CodecSpecificInfoVP9"* %1, i64 0, i32 3
  %65 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfoVP9", %"struct.webrtc::CodecSpecificInfoVP9"* %1, i64 0, i32 11
  %66 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 4
  %67 = getelementptr inbounds %"class.absl::InlinedVector.123", %"class.absl::InlinedVector.123"* %66, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 4, i32 0, i32 1, i32 0, i32 1
  %69 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 4, i32 0, i32 1
  %70 = ptrtoint %"union.absl::inlined_vector_internal::Storage<webrtc::RenderResolution, 4, std::__1::allocator<webrtc::RenderResolution> >::Data"* %69 to i64
  %71 = getelementptr inbounds %"struct.webrtc::FrameDependencyStructure", %"struct.webrtc::FrameDependencyStructure"* %0, i64 0, i32 4, i32 0, i32 1, i32 0, i32 0
  %72 = bitcast %"class.webrtc::RenderResolution"** %71 to i64*
  %73 = getelementptr inbounds %"class.absl::InlinedVector.123", %"class.absl::InlinedVector.123"* %66, i64 0, i32 0
  %74 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 2, i32 0, i32 1
  %75 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %74 to i8*
  %76 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %84

77:                                               ; preds = %222, %2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #15
  ret void

78:                                               ; preds = %166
  %79 = load i8, i8* %64, align 1, !range !3
  %80 = icmp eq i8 %79, 0
  %81 = load i8, i8* %65, align 8
  %82 = icmp eq i8 %81, 0
  %83 = or i1 %80, %82
  br i1 %83, label %222, label %196

84:                                               ; preds = %171, %23
  %85 = phi i32 [ 0, %23 ], [ %172, %171 ]
  %86 = phi i32 [ 0, %23 ], [ %173, %171 ]
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %24) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %75, i8 -86, i64 88, i1 false)
  store i64 0, i64* %25, align 8
  store i64 0, i64* %26, align 8
  store i64 0, i64* %76, align 8
  store i32 %85, i32* %27, align 8
  store i32 %86, i32* %28, align 4
  %87 = icmp eq i32 %86, 0
  %88 = icmp ult i32 %86, 2
  %89 = icmp ult i32 %86, 3
  br label %90

90:                                               ; preds = %281, %84
  %91 = phi i64 [ %284, %281 ], [ -6148914691236517206, %84 ]
  %92 = phi i64 [ %283, %281 ], [ 0, %84 ]
  %93 = phi i32 [ %282, %281 ], [ %85, %84 ]
  %94 = phi i32 [ %279, %281 ], [ 0, %84 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #15
  %95 = icmp sle i32 %93, %94
  %96 = and i1 %87, %95
  %97 = select i1 %96, i32 2, i32 0
  store i32 %97, i32* %5, align 4
  %98 = and i64 %92, 1
  %99 = icmp eq i64 %98, 0
  %100 = select i1 %99, i64 10, i64 %91
  %101 = lshr i64 %92, 1
  %102 = icmp eq i64 %101, %100
  br i1 %102, label %181, label %174, !prof !13

103:                                              ; preds = %278
  %104 = load i64, i64* %40, align 8, !noalias !59
  %105 = load i64, i64* %41, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %39) #15
  %106 = icmp eq i32 %86, 0
  %107 = select i1 %106, i32 %19, i32 %10
  store i32 %107, i32* %6, align 4
  %108 = and i64 %104, 1
  %109 = icmp eq i64 %108, 0
  %110 = select i1 %109, i64 4, i64 %105
  %111 = lshr i64 %104, 1
  %112 = icmp eq i64 %111, %110
  br i1 %112, label %120, label %113, !prof !13

113:                                              ; preds = %103
  %114 = load i64, i64* %45, align 8
  %115 = select i1 %109, i64 %43, i64 %114
  %116 = inttoptr i64 %115 to i32*
  %117 = getelementptr inbounds i32, i32* %116, i64 %111
  store i32 %107, i32* %117, align 4
  %118 = load i64, i64* %40, align 8
  %119 = add i64 %118, 2
  store i64 %119, i64* %40, align 8
  br label %122

120:                                              ; preds = %103
  %121 = call dereferenceable(4) i32* @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15EmplaceBackSlowIJiEEERiDpOT_(%"class.absl::inlined_vector_internal::Storage.98"* %46, i32* nonnull dereferenceable(4) %6) #15
  br label %122

122:                                              ; preds = %113, %120
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %39) #15
  %123 = load i32, i32* %14, align 8
  %124 = sext i32 %123 to i64
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %47) #15
  store i32 1, i32* %7, align 4
  call void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE6AssignINS0_16CopyValueAdapterIS4_EEEEvT_m(%"class.absl::inlined_vector_internal::Storage.98"* %48, i32* nonnull %7, i64 %124) #15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %47) #15
  %125 = load %"struct.webrtc::FrameDependencyTemplate"*, %"struct.webrtc::FrameDependencyTemplate"** %49, align 8
  %126 = load %"struct.webrtc::FrameDependencyTemplate"*, %"struct.webrtc::FrameDependencyTemplate"** %50, align 8
  %127 = icmp eq %"struct.webrtc::FrameDependencyTemplate"* %125, %126
  br i1 %127, label %129, label %128

128:                                              ; preds = %122
  call void @_ZNSt3__16vectorIN6webrtc23FrameDependencyTemplateENS_9allocatorIS2_EEE22__construct_one_at_endIJRKS2_EEEvDpOT_(%"class.std::__1::vector.130"* %17, %"struct.webrtc::FrameDependencyTemplate"* nonnull dereferenceable(104) %4) #15
  br label %130

129:                                              ; preds = %122
  call void @_ZNSt3__16vectorIN6webrtc23FrameDependencyTemplateENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector.130"* %17, %"struct.webrtc::FrameDependencyTemplate"* nonnull dereferenceable(104) %4) #15
  br label %130

130:                                              ; preds = %128, %129
  %131 = load i64, i64* %52, align 8, !noalias !62
  %132 = and i64 %131, 1
  %133 = icmp eq i64 %132, 0
  %134 = load i64, i64* %53, align 8
  %135 = select i1 %133, i64 10, i64 %134
  %136 = lshr i64 %131, 1
  %137 = icmp eq i64 %136, %135
  br i1 %137, label %146, label %138, !prof !13

138:                                              ; preds = %130
  %139 = load i64, i64* %57, align 8
  %140 = select i1 %133, i64 %55, i64 %139
  %141 = inttoptr i64 %140 to i32*
  %142 = getelementptr inbounds i32, i32* %141, i64 %136
  %143 = load i32, i32* %3, align 4
  store i32 %143, i32* %142, align 4
  %144 = load i64, i64* %52, align 8
  %145 = add i64 %144, 2
  store i64 %145, i64* %52, align 8
  br label %148

146:                                              ; preds = %130
  %147 = call dereferenceable(4) i32* @_ZN4absl23inlined_vector_internal7StorageIiLm10ENSt3__19allocatorIiEEE15EmplaceBackSlowIJRKiEEERiDpOT_(%"class.absl::inlined_vector_internal::Storage.122"* %58, i32* nonnull dereferenceable(4) %3) #15
  br label %148

148:                                              ; preds = %138, %146
  %149 = load i64, i64* %26, align 8
  %150 = and i64 %149, 1
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %154, label %152

152:                                              ; preds = %148
  %153 = load i8*, i8** %60, align 8
  call void @_ZdlPv(i8* %153) #16
  br label %154

154:                                              ; preds = %152, %148
  %155 = load i64, i64* %25, align 8
  %156 = and i64 %155, 1
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %160, label %158

158:                                              ; preds = %154
  %159 = load i8*, i8** %61, align 8
  call void @_ZdlPv(i8* %159) #16
  br label %160

160:                                              ; preds = %158, %154
  %161 = load i64, i64* %62, align 8
  %162 = and i64 %161, 1
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %166, label %164

164:                                              ; preds = %160
  %165 = load i8*, i8** %63, align 8
  call void @_ZdlPv(i8* %165) #16
  br label %166

166:                                              ; preds = %160, %164
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %24) #15
  %167 = add nuw nsw i32 %86, 1
  %168 = icmp eq i32 %167, 4
  br i1 %168, label %78, label %169

169:                                              ; preds = %166
  %170 = load i32, i32* %3, align 4
  br label %171

171:                                              ; preds = %169, %222
  %172 = phi i32 [ %170, %169 ], [ %224, %222 ]
  %173 = phi i32 [ %167, %169 ], [ 0, %222 ]
  br label %84

174:                                              ; preds = %90
  %175 = load i64, i64* %36, align 8
  %176 = select i1 %99, i64 %34, i64 %175
  %177 = inttoptr i64 %176 to i32*
  %178 = getelementptr inbounds i32, i32* %177, i64 %101
  store i32 %97, i32* %178, align 4
  %179 = load i64, i64* %31, align 8
  %180 = add i64 %179, 2
  store i64 %180, i64* %31, align 8
  br label %184

181:                                              ; preds = %90
  %182 = call dereferenceable(4) i32* @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15EmplaceBackSlowIJS3_EEERS3_DpOT_(%"class.absl::inlined_vector_internal::Storage.91"* %37, i32* nonnull dereferenceable(4) %5) #15
  %183 = load i64, i64* %31, align 8, !noalias !65
  br label %184

184:                                              ; preds = %174, %181
  %185 = phi i64 [ %180, %174 ], [ %183, %181 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #15
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #15
  %186 = load i32, i32* %3, align 4
  %187 = icmp sle i32 %186, %94
  %188 = and i1 %88, %187
  %189 = select i1 %188, i32 2, i32 0
  store i32 %189, i32* %5, align 4
  %190 = and i64 %185, 1
  %191 = icmp eq i64 %190, 0
  %192 = load i64, i64* %32, align 8
  %193 = select i1 %191, i64 10, i64 %192
  %194 = lshr i64 %185, 1
  %195 = icmp eq i64 %194, %193
  br i1 %195, label %233, label %226, !prof !13

196:                                              ; preds = %78
  %197 = load i32, i32* %3, align 4
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfoVP9", %"struct.webrtc::CodecSpecificInfoVP9"* %1, i64 0, i32 12, i64 %198
  %200 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfoVP9", %"struct.webrtc::CodecSpecificInfoVP9"* %1, i64 0, i32 13, i64 %198
  %201 = load i64, i64* %67, align 8, !noalias !68
  %202 = and i64 %201, 1
  %203 = icmp eq i64 %202, 0
  %204 = load i64, i64* %68, align 8
  %205 = select i1 %203, i64 4, i64 %204
  %206 = lshr i64 %201, 1
  %207 = icmp eq i64 %206, %205
  br i1 %207, label %220, label %208, !prof !13

208:                                              ; preds = %196
  %209 = load i64, i64* %72, align 8
  %210 = select i1 %203, i64 %70, i64 %209
  %211 = inttoptr i64 %210 to %"class.webrtc::RenderResolution"*
  %212 = load i16, i16* %199, align 2
  %213 = zext i16 %212 to i32
  %214 = load i16, i16* %200, align 2
  %215 = zext i16 %214 to i32
  %216 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %211, i64 %206, i32 0
  store i32 %213, i32* %216, align 4
  %217 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %211, i64 %206, i32 1
  store i32 %215, i32* %217, align 4
  %218 = load i64, i64* %67, align 8
  %219 = add i64 %218, 2
  store i64 %219, i64* %67, align 8
  br label %222

220:                                              ; preds = %196
  %221 = call dereferenceable(8) %"class.webrtc::RenderResolution"* @_ZN4absl23inlined_vector_internal7StorageIN6webrtc16RenderResolutionELm4ENSt3__19allocatorIS3_EEE15EmplaceBackSlowIJRKtSA_EEERS3_DpOT_(%"class.absl::inlined_vector_internal::Storage.124"* %73, i16* dereferenceable(2) %199, i16* dereferenceable(2) %200) #15
  br label %222

222:                                              ; preds = %220, %208, %78
  %223 = load i32, i32* %3, align 4
  %224 = add nsw i32 %223, 1
  store i32 %224, i32* %3, align 4
  %225 = icmp slt i32 %224, %10
  br i1 %225, label %171, label %77

226:                                              ; preds = %184
  %227 = load i64, i64* %36, align 8
  %228 = select i1 %191, i64 %34, i64 %227
  %229 = inttoptr i64 %228 to i32*
  %230 = getelementptr inbounds i32, i32* %229, i64 %194
  store i32 %189, i32* %230, align 4
  %231 = load i64, i64* %31, align 8
  %232 = add i64 %231, 2
  store i64 %232, i64* %31, align 8
  br label %236

233:                                              ; preds = %184
  %234 = call dereferenceable(4) i32* @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15EmplaceBackSlowIJS3_EEERS3_DpOT_(%"class.absl::inlined_vector_internal::Storage.91"* %37, i32* nonnull dereferenceable(4) %5) #15
  %235 = load i64, i64* %31, align 8, !noalias !65
  br label %236

236:                                              ; preds = %233, %226
  %237 = phi i64 [ %235, %233 ], [ %232, %226 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #15
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #15
  %238 = load i32, i32* %3, align 4
  %239 = icmp sle i32 %238, %94
  %240 = and i1 %89, %239
  %241 = select i1 %240, i32 2, i32 0
  store i32 %241, i32* %5, align 4
  %242 = and i64 %237, 1
  %243 = icmp eq i64 %242, 0
  %244 = load i64, i64* %32, align 8
  %245 = select i1 %243, i64 10, i64 %244
  %246 = lshr i64 %237, 1
  %247 = icmp eq i64 %246, %245
  br i1 %247, label %255, label %248, !prof !13

248:                                              ; preds = %236
  %249 = load i64, i64* %36, align 8
  %250 = select i1 %243, i64 %34, i64 %249
  %251 = inttoptr i64 %250 to i32*
  %252 = getelementptr inbounds i32, i32* %251, i64 %246
  store i32 %241, i32* %252, align 4
  %253 = load i64, i64* %31, align 8
  %254 = add i64 %253, 2
  store i64 %254, i64* %31, align 8
  br label %258

255:                                              ; preds = %236
  %256 = call dereferenceable(4) i32* @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15EmplaceBackSlowIJS3_EEERS3_DpOT_(%"class.absl::inlined_vector_internal::Storage.91"* %37, i32* nonnull dereferenceable(4) %5) #15
  %257 = load i64, i64* %31, align 8, !noalias !65
  br label %258

258:                                              ; preds = %255, %248
  %259 = phi i64 [ %257, %255 ], [ %254, %248 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #15
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #15
  %260 = load i32, i32* %3, align 4
  %261 = icmp sgt i32 %260, %94
  %262 = select i1 %261, i32 0, i32 2
  store i32 %262, i32* %5, align 4
  %263 = and i64 %259, 1
  %264 = icmp eq i64 %263, 0
  %265 = load i64, i64* %32, align 8
  %266 = select i1 %264, i64 10, i64 %265
  %267 = lshr i64 %259, 1
  %268 = icmp eq i64 %267, %266
  br i1 %268, label %276, label %269, !prof !13

269:                                              ; preds = %258
  %270 = load i64, i64* %36, align 8
  %271 = select i1 %264, i64 %34, i64 %270
  %272 = inttoptr i64 %271 to i32*
  %273 = getelementptr inbounds i32, i32* %272, i64 %267
  store i32 %262, i32* %273, align 4
  %274 = load i64, i64* %31, align 8
  %275 = add i64 %274, 2
  store i64 %275, i64* %31, align 8
  br label %278

276:                                              ; preds = %258
  %277 = call dereferenceable(4) i32* @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15EmplaceBackSlowIJS3_EEERS3_DpOT_(%"class.absl::inlined_vector_internal::Storage.91"* %37, i32* nonnull dereferenceable(4) %5) #15
  br label %278

278:                                              ; preds = %276, %269
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %30) #15
  %279 = add nuw nsw i32 %94, 1
  %280 = icmp eq i32 %279, %10
  br i1 %280, label %103, label %281

281:                                              ; preds = %278
  %282 = load i32, i32* %3, align 4
  %283 = load i64, i64* %31, align 8, !noalias !65
  %284 = load i64, i64* %32, align 8
  br label %90
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN6webrtc23FrameDependencyTemplateENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.130"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.130", %"class.std::__1::vector.130"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.webrtc::FrameDependencyTemplate"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.130"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 104
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"struct.webrtc::FrameDependencyTemplate"*
  br i1 %10, label %12, label %106

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector.130", %"class.std::__1::vector.130"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"struct.webrtc::FrameDependencyTemplate"** %13 to i64*
  %15 = icmp ugt i64 %1, 177372539170284150
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #17
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = sdiv exact i64 %19, 104
  %21 = mul i64 %1, 104
  %22 = tail call i8* @_Znwm(i64 %21) #16
  %23 = bitcast i8* %22 to %"struct.webrtc::FrameDependencyTemplate"*
  %24 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %23, i64 %20
  %25 = ptrtoint %"struct.webrtc::FrameDependencyTemplate"* %24 to i64
  %26 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %23, i64 %1
  %27 = ptrtoint %"struct.webrtc::FrameDependencyTemplate"* %26 to i64
  %28 = inttoptr i64 %18 to %"struct.webrtc::FrameDependencyTemplate"*
  %29 = icmp eq %"struct.webrtc::FrameDependencyTemplate"* %28, %11
  br i1 %29, label %65, label %30

30:                                               ; preds = %17, %30
  %31 = phi %"struct.webrtc::FrameDependencyTemplate"* [ %33, %30 ], [ %24, %17 ]
  %32 = phi %"struct.webrtc::FrameDependencyTemplate"* [ %34, %30 ], [ %28, %17 ]
  %33 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %31, i64 -1
  %34 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %32, i64 -1
  %35 = bitcast %"struct.webrtc::FrameDependencyTemplate"* %34 to i64*
  %36 = bitcast %"struct.webrtc::FrameDependencyTemplate"* %33 to i64*
  %37 = load i64, i64* %35, align 8
  store i64 %37, i64* %36, align 8
  %38 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %31, i64 -1, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %38, align 8
  %39 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %32, i64 -1, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %38, align 8
  %41 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %32, i64 -1, i32 2, i32 0, i32 1
  %42 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %31, i64 -1, i32 2, i32 0, i32 1
  %43 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %42 to i8*
  %44 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %41 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %44, i64 40, i1 false) #15
  store i64 0, i64* %39, align 8
  %45 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %31, i64 -1, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %45, align 8
  %46 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %32, i64 -1, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %45, align 8
  %48 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %32, i64 -1, i32 3, i32 0, i32 1
  %49 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %31, i64 -1, i32 3, i32 0, i32 1
  %50 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %49 to i8*
  %51 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %48 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 16, i1 false) #15
  store i64 0, i64* %46, align 8
  %52 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %31, i64 -1, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %52, align 8
  %53 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %32, i64 -1, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i64, i64* %53, align 8
  store i64 %54, i64* %52, align 8
  %55 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %32, i64 -1, i32 4, i32 0, i32 1
  %56 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %31, i64 -1, i32 4, i32 0, i32 1
  %57 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %56 to i8*
  %58 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %57, i8* align 8 %58, i64 16, i1 false) #15
  store i64 0, i64* %53, align 8
  %59 = icmp eq %"struct.webrtc::FrameDependencyTemplate"* %34, %11
  br i1 %59, label %60, label %30

60:                                               ; preds = %30
  %61 = ptrtoint %"struct.webrtc::FrameDependencyTemplate"* %33 to i64
  %62 = load i64, i64* %6, align 8
  %63 = load %"struct.webrtc::FrameDependencyTemplate"*, %"struct.webrtc::FrameDependencyTemplate"** %13, align 8
  %64 = inttoptr i64 %62 to %"struct.webrtc::FrameDependencyTemplate"*
  br label %65

65:                                               ; preds = %17, %60
  %66 = phi %"struct.webrtc::FrameDependencyTemplate"* [ %64, %60 ], [ %28, %17 ]
  %67 = phi %"struct.webrtc::FrameDependencyTemplate"* [ %63, %60 ], [ %11, %17 ]
  %68 = phi i64 [ %61, %60 ], [ %25, %17 ]
  %69 = phi i64 [ %62, %60 ], [ %18, %17 ]
  store i64 %68, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %70 = icmp eq %"struct.webrtc::FrameDependencyTemplate"* %67, %66
  br i1 %70, label %102, label %71

71:                                               ; preds = %65, %100
  %72 = phi %"struct.webrtc::FrameDependencyTemplate"* [ %73, %100 ], [ %67, %65 ]
  %73 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %72, i64 -1
  %74 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %72, i64 -1, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load i64, i64* %74, align 8
  %76 = and i64 %75, 1
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %82, label %78

78:                                               ; preds = %71
  %79 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %72, i64 -1, i32 4, i32 0, i32 1, i32 0, i32 0
  %80 = bitcast i32** %79 to i8**
  %81 = load i8*, i8** %80, align 8
  tail call void @_ZdlPv(i8* %81) #16
  br label %82

82:                                               ; preds = %78, %71
  %83 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %72, i64 -1, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %84 = load i64, i64* %83, align 8
  %85 = and i64 %84, 1
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %91, label %87

87:                                               ; preds = %82
  %88 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %72, i64 -1, i32 3, i32 0, i32 1, i32 0, i32 0
  %89 = bitcast i32** %88 to i8**
  %90 = load i8*, i8** %89, align 8
  tail call void @_ZdlPv(i8* %90) #16
  br label %91

91:                                               ; preds = %87, %82
  %92 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %72, i64 -1, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %93 = load i64, i64* %92, align 8
  %94 = and i64 %93, 1
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %100, label %96

96:                                               ; preds = %91
  %97 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %72, i64 -1, i32 2, i32 0, i32 1, i32 0, i32 0
  %98 = bitcast i32** %97 to i8**
  %99 = load i8*, i8** %98, align 8
  tail call void @_ZdlPv(i8* %99) #16
  br label %100

100:                                              ; preds = %96, %91
  %101 = icmp eq %"struct.webrtc::FrameDependencyTemplate"* %73, %66
  br i1 %101, label %102, label %71

102:                                              ; preds = %100, %65
  %103 = icmp eq i64 %69, 0
  br i1 %103, label %106, label %104

104:                                              ; preds = %102
  %105 = inttoptr i64 %69 to i8*
  tail call void @_ZdlPv(i8* %105) #16
  br label %106

106:                                              ; preds = %104, %102, %2
  ret void
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc27FrameDependenciesCalculator11BufferUsageELm4ENSt3__19allocatorIS4_EEE8InitFromERKS8_(%"class.absl::inlined_vector_internal::Storage"*, %"class.absl::inlined_vector_internal::Storage"* dereferenceable(232)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = lshr i64 %4, 1
  %6 = and i64 %4, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1
  %10 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::FrameDependenciesCalculator::BufferUsage, 4, std::__1::allocator<webrtc::FrameDependenciesCalculator::BufferUsage> >::Data"* %9 to %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"*
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %1, i64 0, i32 1
  %12 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::FrameDependenciesCalculator::BufferUsage, 4, std::__1::allocator<webrtc::FrameDependenciesCalculator::BufferUsage> >::Data"* %11 to %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"*
  br label %27

13:                                               ; preds = %2
  %14 = icmp ugt i64 %5, 8
  %15 = select i1 %14, i64 %5, i64 8
  %16 = icmp ugt i64 %15, 329406144173384850
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  tail call void @abort() #17
  unreachable

18:                                               ; preds = %13
  %19 = mul i64 %15, 56
  %20 = tail call i8* @_Znwm(i64 %19) #16
  %21 = bitcast i8* %20 to %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"*
  %22 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %23 = bitcast %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"** %22 to i8**
  store i8* %20, i8** %23, align 8
  %24 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %15, i64* %24, align 8
  %25 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %1, i64 0, i32 1, i32 0, i32 0
  %26 = load %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"*, %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"** %25, align 8
  br label %27

27:                                               ; preds = %18, %8
  %28 = phi %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"* [ %12, %8 ], [ %26, %18 ]
  %29 = phi %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"* [ %10, %8 ], [ %21, %18 ]
  %30 = icmp eq i64 %5, 0
  br i1 %30, label %57, label %31

31:                                               ; preds = %27, %53
  %32 = phi %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"* [ %54, %53 ], [ %28, %27 ]
  %33 = phi i64 [ %55, %53 ], [ 0, %27 ]
  %34 = getelementptr inbounds %"struct.webrtc::FrameDependenciesCalculator::BufferUsage", %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"* %29, i64 %33, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = getelementptr inbounds %"struct.webrtc::FrameDependenciesCalculator::BufferUsage", %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"* %32, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 %35, i64 16, i1 false) #15
  %36 = getelementptr inbounds %"struct.webrtc::FrameDependenciesCalculator::BufferUsage", %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"* %29, i64 %33, i32 1
  %37 = getelementptr inbounds %"struct.webrtc::FrameDependenciesCalculator::BufferUsage", %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"* %32, i64 0, i32 1
  %38 = getelementptr inbounds %"class.absl::InlinedVector.1", %"class.absl::InlinedVector.1"* %37, i64 0, i32 0
  %39 = getelementptr inbounds %"class.absl::InlinedVector.1", %"class.absl::InlinedVector.1"* %36, i64 0, i32 0
  %40 = getelementptr inbounds %"class.absl::InlinedVector.1", %"class.absl::InlinedVector.1"* %36, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %40, align 8
  %41 = getelementptr inbounds %"class.absl::InlinedVector.1", %"class.absl::InlinedVector.1"* %37, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = icmp ult i64 %42, 2
  br i1 %43, label %53, label %44

44:                                               ; preds = %31
  %45 = and i64 %42, 1
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %47, label %52

47:                                               ; preds = %44
  store i64 %42, i64* %40, align 8
  %48 = getelementptr inbounds %"struct.webrtc::FrameDependenciesCalculator::BufferUsage", %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"* %32, i64 0, i32 1, i32 0, i32 1
  %49 = getelementptr inbounds %"struct.webrtc::FrameDependenciesCalculator::BufferUsage", %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"* %29, i64 %33, i32 1, i32 0, i32 1
  %50 = bitcast %"union.absl::inlined_vector_internal::Storage<long, 4, std::__1::allocator<long> >::Data"* %49 to i8*
  %51 = bitcast %"union.absl::inlined_vector_internal::Storage<long, 4, std::__1::allocator<long> >::Data"* %48 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 32, i1 false) #15
  br label %53

52:                                               ; preds = %44
  tail call void @_ZN4absl23inlined_vector_internal7StorageIlLm4ENSt3__19allocatorIlEEE8InitFromERKS5_(%"class.absl::inlined_vector_internal::Storage.2"* %39, %"class.absl::inlined_vector_internal::Storage.2"* dereferenceable(40) %38) #15
  br label %53

53:                                               ; preds = %52, %47, %31
  %54 = getelementptr inbounds %"struct.webrtc::FrameDependenciesCalculator::BufferUsage", %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"* %32, i64 1
  %55 = add nuw nsw i64 %33, 1
  %56 = icmp eq i64 %55, %5
  br i1 %56, label %57, label %31

57:                                               ; preds = %53, %27
  %58 = load i64, i64* %3, align 8
  %59 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %58, i64* %59, align 8
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIlLm4ENSt3__19allocatorIlEEE8InitFromERKS5_(%"class.absl::inlined_vector_internal::Storage.2"*, %"class.absl::inlined_vector_internal::Storage.2"* dereferenceable(40)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.2", %"class.absl::inlined_vector_internal::Storage.2"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = lshr i64 %4, 1
  %6 = and i64 %4, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.2", %"class.absl::inlined_vector_internal::Storage.2"* %0, i64 0, i32 1
  %10 = bitcast %"union.absl::inlined_vector_internal::Storage<long, 4, std::__1::allocator<long> >::Data"* %9 to i64*
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.2", %"class.absl::inlined_vector_internal::Storage.2"* %1, i64 0, i32 1
  %12 = bitcast %"union.absl::inlined_vector_internal::Storage<long, 4, std::__1::allocator<long> >::Data"* %11 to i64*
  br label %27

13:                                               ; preds = %2
  %14 = icmp ugt i64 %5, 8
  %15 = select i1 %14, i64 %5, i64 8
  %16 = icmp ugt i64 %15, 2305843009213693951
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  tail call void @abort() #17
  unreachable

18:                                               ; preds = %13
  %19 = shl i64 %15, 3
  %20 = tail call i8* @_Znwm(i64 %19) #16
  %21 = bitcast i8* %20 to i64*
  %22 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.2", %"class.absl::inlined_vector_internal::Storage.2"* %0, i64 0, i32 1, i32 0, i32 0
  %23 = bitcast i64** %22 to i8**
  store i8* %20, i8** %23, align 8
  %24 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.2", %"class.absl::inlined_vector_internal::Storage.2"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %15, i64* %24, align 8
  %25 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.2", %"class.absl::inlined_vector_internal::Storage.2"* %1, i64 0, i32 1, i32 0, i32 0
  %26 = load i64*, i64** %25, align 8
  br label %27

27:                                               ; preds = %18, %8
  %28 = phi i64* [ %26, %18 ], [ %12, %8 ]
  %29 = phi i64* [ %21, %18 ], [ %10, %8 ]
  %30 = bitcast i64* %29 to i8*
  %31 = bitcast i64* %28 to i8*
  %32 = shl i64 %5, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 %32, i1 false) #15
  %33 = load i64, i64* %3, align 8
  %34 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.2", %"class.absl::inlined_vector_internal::Storage.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %33, i64* %34, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageINS_8optionalIlEELm4ENSt3__19allocatorIS3_EEE8InitFromERKS7_(%"class.absl::inlined_vector_internal::Storage.9"*, %"class.absl::inlined_vector_internal::Storage.9"* dereferenceable(72)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = lshr i64 %4, 1
  %6 = and i64 %4, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %0, i64 0, i32 1
  %10 = bitcast %"union.absl::inlined_vector_internal::Storage<absl::optional<long>, 4, std::__1::allocator<absl::optional<long> > >::Data"* %9 to %"class.absl::optional"*
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %1, i64 0, i32 1
  %12 = bitcast %"union.absl::inlined_vector_internal::Storage<absl::optional<long>, 4, std::__1::allocator<absl::optional<long> > >::Data"* %11 to %"class.absl::optional"*
  br label %27

13:                                               ; preds = %2
  %14 = icmp ugt i64 %5, 8
  %15 = select i1 %14, i64 %5, i64 8
  %16 = icmp ugt i64 %15, 1152921504606846975
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  tail call void @abort() #17
  unreachable

18:                                               ; preds = %13
  %19 = shl i64 %15, 4
  %20 = tail call i8* @_Znwm(i64 %19) #16
  %21 = bitcast i8* %20 to %"class.absl::optional"*
  %22 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %0, i64 0, i32 1, i32 0, i32 0
  %23 = bitcast %"class.absl::optional"** %22 to i8**
  store i8* %20, i8** %23, align 8
  %24 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %15, i64* %24, align 8
  %25 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %1, i64 0, i32 1, i32 0, i32 0
  %26 = load %"class.absl::optional"*, %"class.absl::optional"** %25, align 8
  br label %27

27:                                               ; preds = %18, %8
  %28 = phi %"class.absl::optional"* [ %26, %18 ], [ %12, %8 ]
  %29 = phi %"class.absl::optional"* [ %21, %18 ], [ %10, %8 ]
  %30 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %29, i64 0, i32 0, i32 0, i32 0, i32 0
  %31 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %28, i64 0, i32 0, i32 0, i32 0, i32 0
  %32 = shl i64 %5, 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 %32, i1 false) #15
  %33 = load i64, i64* %3, align 8
  %34 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.9", %"class.absl::inlined_vector_internal::Storage.9"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %33, i64* %34, align 8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc27FrameDependenciesCalculator11BufferUsageELm4ENSt3__19allocatorIS4_EEE15DestroyContentsEv(%"class.absl::inlined_vector_internal::Storage"*) local_unnamed_addr #6 comdat align 2 {
  %2 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = and i64 %3, 1
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %8 = load %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"*, %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"** %7, align 8
  br label %12

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1
  %11 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::FrameDependenciesCalculator::BufferUsage, 4, std::__1::allocator<webrtc::FrameDependenciesCalculator::BufferUsage> >::Data"* %10 to %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"*
  br label %12

12:                                               ; preds = %9, %6
  %13 = phi %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"* [ %8, %6 ], [ %11, %9 ]
  %14 = lshr i64 %3, 1
  %15 = icmp eq %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"* %13, null
  %16 = icmp eq i64 %14, 0
  %17 = or i1 %16, %15
  br i1 %17, label %34, label %18

18:                                               ; preds = %12, %29
  %19 = phi i64 [ %20, %29 ], [ %14, %12 ]
  %20 = add nsw i64 %19, -1
  %21 = getelementptr inbounds %"struct.webrtc::FrameDependenciesCalculator::BufferUsage", %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"* %13, i64 %20, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = and i64 %22, 1
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %29, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %"struct.webrtc::FrameDependenciesCalculator::BufferUsage", %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"* %13, i64 %20, i32 1, i32 0, i32 1, i32 0, i32 0
  %27 = bitcast i64** %26 to i8**
  %28 = load i8*, i8** %27, align 8
  tail call void @_ZdlPv(i8* %28) #16
  br label %29

29:                                               ; preds = %25, %18
  %30 = icmp eq i64 %20, 0
  br i1 %30, label %31, label %18

31:                                               ; preds = %29
  %32 = load i64, i64* %2, align 8
  %33 = and i64 %32, 1
  br label %34

34:                                               ; preds = %31, %12
  %35 = phi i64 [ %33, %31 ], [ %4, %12 ]
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %41, label %37

37:                                               ; preds = %34
  %38 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage", %"class.absl::inlined_vector_internal::Storage"* %0, i64 0, i32 1, i32 0, i32 0
  %39 = load %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"*, %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"** %38, align 8
  %40 = getelementptr inbounds %"struct.webrtc::FrameDependenciesCalculator::BufferUsage", %"struct.webrtc::FrameDependenciesCalculator::BufferUsage"* %39, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @_ZdlPv(i8* %40) #16
  br label %41

41:                                               ; preds = %34, %37
  ret void
}

declare void @_ZN6webrtc10ColorSpaceC1ERKS0_(%"class.webrtc::ColorSpace"*, %"class.webrtc::ColorSpace"* dereferenceable(68)) unnamed_addr #2

declare dereferenceable(68) %"class.webrtc::ColorSpace"* @_ZN6webrtc10ColorSpaceaSERKS0_(%"class.webrtc::ColorSpace"*, %"class.webrtc::ColorSpace"* dereferenceable(68)) local_unnamed_addr #2

declare void @_ZN6webrtc10ColorSpaceC1EOS0_(%"class.webrtc::ColorSpace"*, %"class.webrtc::ColorSpace"* dereferenceable(68)) unnamed_addr #2

declare zeroext i16 @_ZN6webrtc15VideoSendTiming16GetDeltaCappedMsEll(i64, i64) local_unnamed_addr #2

; Function Attrs: noreturn nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(20) %"struct.webrtc::RTPVideoHeaderVP8"* @_ZN4absl16variant_internal26TypedThrowBadVariantAccessIRN6webrtc17RTPVideoHeaderVP8EEET_v() local_unnamed_addr #10 comdat {
  tail call void @_ZN4absl16variant_internal21ThrowBadVariantAccessEv() #17
  unreachable
}

; Function Attrs: noreturn
declare void @_ZN4absl16variant_internal21ThrowBadVariantAccessEv() local_unnamed_addr #11

; Function Attrs: noreturn nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1640) %"struct.webrtc::RTPVideoHeaderVP9"* @_ZN4absl16variant_internal26TypedThrowBadVariantAccessIRN6webrtc17RTPVideoHeaderVP9EEET_v() local_unnamed_addr #10 comdat {
  tail call void @_ZN4absl16variant_internal21ThrowBadVariantAccessEv() #17
  unreachable
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE6AssignINS0_20IteratorValueAdapterIS6_PKS3_EEEEvT_m(%"class.absl::inlined_vector_internal::Storage.91"*, i32*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !noalias !71
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8, !noalias !71
  %12 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 1, i32 0, i32 1
  %13 = load i64, i64* %12, align 8, !noalias !71
  br label %17

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 1
  %16 = ptrtoint %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %15 to i64
  br label %17

17:                                               ; preds = %8, %14
  %18 = phi i64 [ %16, %14 ], [ %11, %8 ]
  %19 = phi i64 [ 10, %14 ], [ %13, %8 ]
  %20 = lshr i64 %5, 1
  %21 = icmp ult i64 %19, %2
  br i1 %21, label %22, label %33

22:                                               ; preds = %17
  %23 = shl i64 %19, 1
  %24 = icmp ult i64 %23, %2
  %25 = select i1 %24, i64 %2, i64 %23
  %26 = icmp ugt i64 %25, 4611686018427387903
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  tail call void @abort() #17
  unreachable

28:                                               ; preds = %22
  %29 = shl i64 %25, 2
  %30 = tail call i8* @_Znwm(i64 %29) #16
  %31 = bitcast i8* %30 to i32*
  %32 = ptrtoint i8* %30 to i64
  br label %176

33:                                               ; preds = %17
  %34 = icmp ult i64 %20, %2
  %35 = inttoptr i64 %18 to i32*
  %36 = inttoptr i64 %18 to i8*
  %37 = getelementptr inbounds i32, i32* %35, i64 %20
  %38 = call i64 @llvm.usub.sat.i64(i64 %2, i64 %20)
  %39 = select i1 %34, i32* %37, i32* null
  %40 = select i1 %34, i64 %20, i64 %2
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %173, label %42

42:                                               ; preds = %33
  %43 = icmp ult i64 %40, 8
  br i1 %43, label %131, label %44

44:                                               ; preds = %42
  %45 = getelementptr i32, i32* %35, i64 %40
  %46 = getelementptr i32, i32* %1, i64 %40
  %47 = bitcast i32* %46 to i8*
  %48 = icmp ult i8* %36, %47
  %49 = icmp ugt i32* %45, %1
  %50 = and i1 %48, %49
  br i1 %50, label %131, label %51

51:                                               ; preds = %44
  %52 = and i64 %40, 9223372036854775800
  %53 = getelementptr i32, i32* %1, i64 %52
  %54 = add nsw i64 %52, -8
  %55 = lshr exact i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 3
  %58 = icmp ult i64 %54, 24
  br i1 %58, label %110, label %59

59:                                               ; preds = %51
  %60 = sub nsw i64 %56, %57
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi i64 [ 0, %59 ], [ %107, %61 ]
  %63 = phi i64 [ %60, %59 ], [ %108, %61 ]
  %64 = getelementptr i32, i32* %1, i64 %62
  %65 = getelementptr inbounds i32, i32* %35, i64 %62
  %66 = bitcast i32* %64 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 4, !alias.scope !74
  %68 = getelementptr i32, i32* %64, i64 4
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 4, !alias.scope !74
  %71 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> %67, <4 x i32>* %71, align 4, !alias.scope !77, !noalias !74
  %72 = getelementptr inbounds i32, i32* %65, i64 4
  %73 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %73, align 4, !alias.scope !77, !noalias !74
  %74 = or i64 %62, 8
  %75 = getelementptr i32, i32* %1, i64 %74
  %76 = getelementptr inbounds i32, i32* %35, i64 %74
  %77 = bitcast i32* %75 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 4, !alias.scope !74
  %79 = getelementptr i32, i32* %75, i64 4
  %80 = bitcast i32* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 4, !alias.scope !74
  %82 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %82, align 4, !alias.scope !77, !noalias !74
  %83 = getelementptr inbounds i32, i32* %76, i64 4
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> %81, <4 x i32>* %84, align 4, !alias.scope !77, !noalias !74
  %85 = or i64 %62, 16
  %86 = getelementptr i32, i32* %1, i64 %85
  %87 = getelementptr inbounds i32, i32* %35, i64 %85
  %88 = bitcast i32* %86 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !74
  %90 = getelementptr i32, i32* %86, i64 4
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4, !alias.scope !74
  %93 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %93, align 4, !alias.scope !77, !noalias !74
  %94 = getelementptr inbounds i32, i32* %87, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %95, align 4, !alias.scope !77, !noalias !74
  %96 = or i64 %62, 24
  %97 = getelementptr i32, i32* %1, i64 %96
  %98 = getelementptr inbounds i32, i32* %35, i64 %96
  %99 = bitcast i32* %97 to <4 x i32>*
  %100 = load <4 x i32>, <4 x i32>* %99, align 4, !alias.scope !74
  %101 = getelementptr i32, i32* %97, i64 4
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 4, !alias.scope !74
  %104 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %104, align 4, !alias.scope !77, !noalias !74
  %105 = getelementptr inbounds i32, i32* %98, i64 4
  %106 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %106, align 4, !alias.scope !77, !noalias !74
  %107 = add i64 %62, 32
  %108 = add i64 %63, -4
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %61, !llvm.loop !79

110:                                              ; preds = %61, %51
  %111 = phi i64 [ 0, %51 ], [ %107, %61 ]
  %112 = icmp eq i64 %57, 0
  br i1 %112, label %129, label %113

113:                                              ; preds = %110, %113
  %114 = phi i64 [ %126, %113 ], [ %111, %110 ]
  %115 = phi i64 [ %127, %113 ], [ %57, %110 ]
  %116 = getelementptr i32, i32* %1, i64 %114
  %117 = getelementptr inbounds i32, i32* %35, i64 %114
  %118 = bitcast i32* %116 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4, !alias.scope !74
  %120 = getelementptr i32, i32* %116, i64 4
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4, !alias.scope !74
  %123 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %119, <4 x i32>* %123, align 4, !alias.scope !77, !noalias !74
  %124 = getelementptr inbounds i32, i32* %117, i64 4
  %125 = bitcast i32* %124 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %125, align 4, !alias.scope !77, !noalias !74
  %126 = add i64 %114, 8
  %127 = add i64 %115, -1
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %113, !llvm.loop !80

129:                                              ; preds = %113, %110
  %130 = icmp eq i64 %40, %52
  br i1 %130, label %173, label %131

131:                                              ; preds = %129, %44, %42
  %132 = phi i32* [ %1, %44 ], [ %1, %42 ], [ %53, %129 ]
  %133 = phi i64 [ 0, %44 ], [ 0, %42 ], [ %52, %129 ]
  %134 = xor i64 %133, -1
  %135 = add nsw i64 %40, %134
  %136 = and i64 %40, 3
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %148, label %138

138:                                              ; preds = %131, %138
  %139 = phi i32* [ %144, %138 ], [ %132, %131 ]
  %140 = phi i64 [ %145, %138 ], [ %133, %131 ]
  %141 = phi i64 [ %146, %138 ], [ %136, %131 ]
  %142 = getelementptr inbounds i32, i32* %35, i64 %140
  %143 = load i32, i32* %139, align 4
  store i32 %143, i32* %142, align 4
  %144 = getelementptr inbounds i32, i32* %139, i64 1
  %145 = add nuw i64 %140, 1
  %146 = add i64 %141, -1
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %138, !llvm.loop !81

148:                                              ; preds = %138, %131
  %149 = phi i32* [ undef, %131 ], [ %144, %138 ]
  %150 = phi i32* [ %132, %131 ], [ %144, %138 ]
  %151 = phi i64 [ %133, %131 ], [ %145, %138 ]
  %152 = icmp ult i64 %135, 3
  br i1 %152, label %173, label %153

153:                                              ; preds = %148, %153
  %154 = phi i32* [ %170, %153 ], [ %150, %148 ]
  %155 = phi i64 [ %171, %153 ], [ %151, %148 ]
  %156 = getelementptr inbounds i32, i32* %35, i64 %155
  %157 = load i32, i32* %154, align 4
  store i32 %157, i32* %156, align 4
  %158 = getelementptr inbounds i32, i32* %154, i64 1
  %159 = add nuw i64 %155, 1
  %160 = getelementptr inbounds i32, i32* %35, i64 %159
  %161 = load i32, i32* %158, align 4
  store i32 %161, i32* %160, align 4
  %162 = getelementptr inbounds i32, i32* %154, i64 2
  %163 = add nuw i64 %155, 2
  %164 = getelementptr inbounds i32, i32* %35, i64 %163
  %165 = load i32, i32* %162, align 4
  store i32 %165, i32* %164, align 4
  %166 = getelementptr inbounds i32, i32* %154, i64 3
  %167 = add nuw i64 %155, 3
  %168 = getelementptr inbounds i32, i32* %35, i64 %167
  %169 = load i32, i32* %166, align 4
  store i32 %169, i32* %168, align 4
  %170 = getelementptr inbounds i32, i32* %154, i64 4
  %171 = add nuw i64 %155, 4
  %172 = icmp eq i64 %171, %40
  br i1 %172, label %173, label %153, !llvm.loop !82

173:                                              ; preds = %148, %153, %129, %33
  %174 = phi i32* [ %1, %33 ], [ %53, %129 ], [ %149, %148 ], [ %170, %153 ]
  %175 = icmp eq i64 %38, 0
  br i1 %175, label %312, label %176

176:                                              ; preds = %28, %173
  %177 = phi i32* [ %1, %28 ], [ %174, %173 ]
  %178 = phi i64 [ %2, %28 ], [ %38, %173 ]
  %179 = phi i32* [ %31, %28 ], [ %39, %173 ]
  %180 = phi i64 [ %25, %28 ], [ 0, %173 ]
  %181 = phi i64 [ %32, %28 ], [ 0, %173 ]
  %182 = icmp ult i64 %178, 8
  br i1 %182, label %269, label %183

183:                                              ; preds = %176
  %184 = getelementptr i32, i32* %179, i64 %178
  %185 = getelementptr i32, i32* %177, i64 %178
  %186 = icmp ult i32* %179, %185
  %187 = icmp ult i32* %177, %184
  %188 = and i1 %186, %187
  br i1 %188, label %269, label %189

189:                                              ; preds = %183
  %190 = and i64 %178, -8
  %191 = getelementptr i32, i32* %177, i64 %190
  %192 = add i64 %190, -8
  %193 = lshr exact i64 %192, 3
  %194 = add nuw nsw i64 %193, 1
  %195 = and i64 %194, 3
  %196 = icmp ult i64 %192, 24
  br i1 %196, label %248, label %197

197:                                              ; preds = %189
  %198 = sub nsw i64 %194, %195
  br label %199

199:                                              ; preds = %199, %197
  %200 = phi i64 [ 0, %197 ], [ %245, %199 ]
  %201 = phi i64 [ %198, %197 ], [ %246, %199 ]
  %202 = getelementptr i32, i32* %177, i64 %200
  %203 = getelementptr inbounds i32, i32* %179, i64 %200
  %204 = bitcast i32* %202 to <4 x i32>*
  %205 = load <4 x i32>, <4 x i32>* %204, align 4, !alias.scope !83
  %206 = getelementptr i32, i32* %202, i64 4
  %207 = bitcast i32* %206 to <4 x i32>*
  %208 = load <4 x i32>, <4 x i32>* %207, align 4, !alias.scope !83
  %209 = bitcast i32* %203 to <4 x i32>*
  store <4 x i32> %205, <4 x i32>* %209, align 4, !alias.scope !86, !noalias !83
  %210 = getelementptr inbounds i32, i32* %203, i64 4
  %211 = bitcast i32* %210 to <4 x i32>*
  store <4 x i32> %208, <4 x i32>* %211, align 4, !alias.scope !86, !noalias !83
  %212 = or i64 %200, 8
  %213 = getelementptr i32, i32* %177, i64 %212
  %214 = getelementptr inbounds i32, i32* %179, i64 %212
  %215 = bitcast i32* %213 to <4 x i32>*
  %216 = load <4 x i32>, <4 x i32>* %215, align 4, !alias.scope !83
  %217 = getelementptr i32, i32* %213, i64 4
  %218 = bitcast i32* %217 to <4 x i32>*
  %219 = load <4 x i32>, <4 x i32>* %218, align 4, !alias.scope !83
  %220 = bitcast i32* %214 to <4 x i32>*
  store <4 x i32> %216, <4 x i32>* %220, align 4, !alias.scope !86, !noalias !83
  %221 = getelementptr inbounds i32, i32* %214, i64 4
  %222 = bitcast i32* %221 to <4 x i32>*
  store <4 x i32> %219, <4 x i32>* %222, align 4, !alias.scope !86, !noalias !83
  %223 = or i64 %200, 16
  %224 = getelementptr i32, i32* %177, i64 %223
  %225 = getelementptr inbounds i32, i32* %179, i64 %223
  %226 = bitcast i32* %224 to <4 x i32>*
  %227 = load <4 x i32>, <4 x i32>* %226, align 4, !alias.scope !83
  %228 = getelementptr i32, i32* %224, i64 4
  %229 = bitcast i32* %228 to <4 x i32>*
  %230 = load <4 x i32>, <4 x i32>* %229, align 4, !alias.scope !83
  %231 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %227, <4 x i32>* %231, align 4, !alias.scope !86, !noalias !83
  %232 = getelementptr inbounds i32, i32* %225, i64 4
  %233 = bitcast i32* %232 to <4 x i32>*
  store <4 x i32> %230, <4 x i32>* %233, align 4, !alias.scope !86, !noalias !83
  %234 = or i64 %200, 24
  %235 = getelementptr i32, i32* %177, i64 %234
  %236 = getelementptr inbounds i32, i32* %179, i64 %234
  %237 = bitcast i32* %235 to <4 x i32>*
  %238 = load <4 x i32>, <4 x i32>* %237, align 4, !alias.scope !83
  %239 = getelementptr i32, i32* %235, i64 4
  %240 = bitcast i32* %239 to <4 x i32>*
  %241 = load <4 x i32>, <4 x i32>* %240, align 4, !alias.scope !83
  %242 = bitcast i32* %236 to <4 x i32>*
  store <4 x i32> %238, <4 x i32>* %242, align 4, !alias.scope !86, !noalias !83
  %243 = getelementptr inbounds i32, i32* %236, i64 4
  %244 = bitcast i32* %243 to <4 x i32>*
  store <4 x i32> %241, <4 x i32>* %244, align 4, !alias.scope !86, !noalias !83
  %245 = add i64 %200, 32
  %246 = add i64 %201, -4
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %199, !llvm.loop !88

248:                                              ; preds = %199, %189
  %249 = phi i64 [ 0, %189 ], [ %245, %199 ]
  %250 = icmp eq i64 %195, 0
  br i1 %250, label %267, label %251

251:                                              ; preds = %248, %251
  %252 = phi i64 [ %264, %251 ], [ %249, %248 ]
  %253 = phi i64 [ %265, %251 ], [ %195, %248 ]
  %254 = getelementptr i32, i32* %177, i64 %252
  %255 = getelementptr inbounds i32, i32* %179, i64 %252
  %256 = bitcast i32* %254 to <4 x i32>*
  %257 = load <4 x i32>, <4 x i32>* %256, align 4, !alias.scope !83
  %258 = getelementptr i32, i32* %254, i64 4
  %259 = bitcast i32* %258 to <4 x i32>*
  %260 = load <4 x i32>, <4 x i32>* %259, align 4, !alias.scope !83
  %261 = bitcast i32* %255 to <4 x i32>*
  store <4 x i32> %257, <4 x i32>* %261, align 4, !alias.scope !86, !noalias !83
  %262 = getelementptr inbounds i32, i32* %255, i64 4
  %263 = bitcast i32* %262 to <4 x i32>*
  store <4 x i32> %260, <4 x i32>* %263, align 4, !alias.scope !86, !noalias !83
  %264 = add i64 %252, 8
  %265 = add i64 %253, -1
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %267, label %251, !llvm.loop !89

267:                                              ; preds = %251, %248
  %268 = icmp eq i64 %178, %190
  br i1 %268, label %310, label %269

269:                                              ; preds = %267, %183, %176
  %270 = phi i32* [ %177, %183 ], [ %177, %176 ], [ %191, %267 ]
  %271 = phi i64 [ 0, %183 ], [ 0, %176 ], [ %190, %267 ]
  %272 = xor i64 %271, -1
  %273 = add i64 %178, %272
  %274 = and i64 %178, 3
  %275 = icmp eq i64 %274, 0
  br i1 %275, label %286, label %276

276:                                              ; preds = %269, %276
  %277 = phi i32* [ %282, %276 ], [ %270, %269 ]
  %278 = phi i64 [ %283, %276 ], [ %271, %269 ]
  %279 = phi i64 [ %284, %276 ], [ %274, %269 ]
  %280 = getelementptr inbounds i32, i32* %179, i64 %278
  %281 = load i32, i32* %277, align 4
  store i32 %281, i32* %280, align 4
  %282 = getelementptr inbounds i32, i32* %277, i64 1
  %283 = add nuw i64 %278, 1
  %284 = add i64 %279, -1
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %286, label %276, !llvm.loop !90

286:                                              ; preds = %276, %269
  %287 = phi i32* [ %270, %269 ], [ %282, %276 ]
  %288 = phi i64 [ %271, %269 ], [ %283, %276 ]
  %289 = icmp ult i64 %273, 3
  br i1 %289, label %310, label %290

290:                                              ; preds = %286, %290
  %291 = phi i32* [ %307, %290 ], [ %287, %286 ]
  %292 = phi i64 [ %308, %290 ], [ %288, %286 ]
  %293 = getelementptr inbounds i32, i32* %179, i64 %292
  %294 = load i32, i32* %291, align 4
  store i32 %294, i32* %293, align 4
  %295 = getelementptr inbounds i32, i32* %291, i64 1
  %296 = add nuw i64 %292, 1
  %297 = getelementptr inbounds i32, i32* %179, i64 %296
  %298 = load i32, i32* %295, align 4
  store i32 %298, i32* %297, align 4
  %299 = getelementptr inbounds i32, i32* %291, i64 2
  %300 = add nuw i64 %292, 2
  %301 = getelementptr inbounds i32, i32* %179, i64 %300
  %302 = load i32, i32* %299, align 4
  store i32 %302, i32* %301, align 4
  %303 = getelementptr inbounds i32, i32* %291, i64 3
  %304 = add nuw i64 %292, 3
  %305 = getelementptr inbounds i32, i32* %179, i64 %304
  %306 = load i32, i32* %303, align 4
  store i32 %306, i32* %305, align 4
  %307 = getelementptr inbounds i32, i32* %291, i64 4
  %308 = add nuw i64 %292, 4
  %309 = icmp eq i64 %308, %178
  br i1 %309, label %310, label %290, !llvm.loop !91

310:                                              ; preds = %286, %290, %267
  %311 = icmp eq i64 %181, 0
  br i1 %311, label %312, label %314

312:                                              ; preds = %173, %310
  %313 = load i64, i64* %4, align 8
  br label %329

314:                                              ; preds = %310
  %315 = load i64, i64* %4, align 8
  %316 = and i64 %315, 1
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %323, label %318

318:                                              ; preds = %314
  %319 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 1, i32 0, i32 0
  %320 = bitcast i32** %319 to i8**
  %321 = load i8*, i8** %320, align 8
  tail call void @_ZdlPv(i8* %321) #16
  %322 = load i64, i64* %4, align 8
  br label %323

323:                                              ; preds = %314, %318
  %324 = phi i64 [ %315, %314 ], [ %322, %318 ]
  %325 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 1, i32 0, i32 0
  %326 = bitcast i32** %325 to i64*
  store i64 %181, i64* %326, align 8
  %327 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %180, i64* %327, align 8
  %328 = or i64 %324, 1
  store i64 %328, i64* %4, align 8
  br label %329

329:                                              ; preds = %323, %312
  %330 = phi i64 [ %313, %312 ], [ %328, %323 ]
  %331 = shl i64 %2, 1
  %332 = and i64 %330, 1
  %333 = or i64 %332, %331
  store i64 %333, i64* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE6AssignINS0_20IteratorValueAdapterIS4_PKlEEEEvT_m(%"class.absl::inlined_vector_internal::Storage.143"*, i64*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.143", %"class.absl::inlined_vector_internal::Storage.143"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !noalias !92
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.143", %"class.absl::inlined_vector_internal::Storage.143"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast i64** %9 to i64*
  %11 = load i64, i64* %10, align 8, !noalias !92
  %12 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.143", %"class.absl::inlined_vector_internal::Storage.143"* %0, i64 0, i32 1, i32 0, i32 1
  %13 = load i64, i64* %12, align 8, !noalias !92
  br label %17

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.143", %"class.absl::inlined_vector_internal::Storage.143"* %0, i64 0, i32 1
  %16 = ptrtoint %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %15 to i64
  br label %17

17:                                               ; preds = %8, %14
  %18 = phi i64 [ %16, %14 ], [ %11, %8 ]
  %19 = phi i64 [ 5, %14 ], [ %13, %8 ]
  %20 = lshr i64 %5, 1
  %21 = icmp ult i64 %19, %2
  br i1 %21, label %22, label %33

22:                                               ; preds = %17
  %23 = shl i64 %19, 1
  %24 = icmp ult i64 %23, %2
  %25 = select i1 %24, i64 %2, i64 %23
  %26 = icmp ugt i64 %25, 2305843009213693951
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  tail call void @abort() #17
  unreachable

28:                                               ; preds = %22
  %29 = shl i64 %25, 3
  %30 = tail call i8* @_Znwm(i64 %29) #16
  %31 = bitcast i8* %30 to i64*
  %32 = ptrtoint i8* %30 to i64
  br label %176

33:                                               ; preds = %17
  %34 = icmp ult i64 %20, %2
  %35 = inttoptr i64 %18 to i64*
  %36 = inttoptr i64 %18 to i8*
  %37 = getelementptr inbounds i64, i64* %35, i64 %20
  %38 = call i64 @llvm.usub.sat.i64(i64 %2, i64 %20)
  %39 = select i1 %34, i64* %37, i64* null
  %40 = select i1 %34, i64 %20, i64 %2
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %173, label %42

42:                                               ; preds = %33
  %43 = icmp ult i64 %40, 4
  br i1 %43, label %131, label %44

44:                                               ; preds = %42
  %45 = getelementptr i64, i64* %35, i64 %40
  %46 = getelementptr i64, i64* %1, i64 %40
  %47 = bitcast i64* %46 to i8*
  %48 = icmp ult i8* %36, %47
  %49 = icmp ugt i64* %45, %1
  %50 = and i1 %48, %49
  br i1 %50, label %131, label %51

51:                                               ; preds = %44
  %52 = and i64 %40, 9223372036854775804
  %53 = getelementptr i64, i64* %1, i64 %52
  %54 = add nsw i64 %52, -4
  %55 = lshr exact i64 %54, 2
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 3
  %58 = icmp ult i64 %54, 12
  br i1 %58, label %110, label %59

59:                                               ; preds = %51
  %60 = sub nsw i64 %56, %57
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi i64 [ 0, %59 ], [ %107, %61 ]
  %63 = phi i64 [ %60, %59 ], [ %108, %61 ]
  %64 = getelementptr i64, i64* %1, i64 %62
  %65 = getelementptr inbounds i64, i64* %35, i64 %62
  %66 = bitcast i64* %64 to <2 x i64>*
  %67 = load <2 x i64>, <2 x i64>* %66, align 8, !alias.scope !95
  %68 = getelementptr i64, i64* %64, i64 2
  %69 = bitcast i64* %68 to <2 x i64>*
  %70 = load <2 x i64>, <2 x i64>* %69, align 8, !alias.scope !95
  %71 = bitcast i64* %65 to <2 x i64>*
  store <2 x i64> %67, <2 x i64>* %71, align 8, !alias.scope !98, !noalias !95
  %72 = getelementptr inbounds i64, i64* %65, i64 2
  %73 = bitcast i64* %72 to <2 x i64>*
  store <2 x i64> %70, <2 x i64>* %73, align 8, !alias.scope !98, !noalias !95
  %74 = or i64 %62, 4
  %75 = getelementptr i64, i64* %1, i64 %74
  %76 = getelementptr inbounds i64, i64* %35, i64 %74
  %77 = bitcast i64* %75 to <2 x i64>*
  %78 = load <2 x i64>, <2 x i64>* %77, align 8, !alias.scope !95
  %79 = getelementptr i64, i64* %75, i64 2
  %80 = bitcast i64* %79 to <2 x i64>*
  %81 = load <2 x i64>, <2 x i64>* %80, align 8, !alias.scope !95
  %82 = bitcast i64* %76 to <2 x i64>*
  store <2 x i64> %78, <2 x i64>* %82, align 8, !alias.scope !98, !noalias !95
  %83 = getelementptr inbounds i64, i64* %76, i64 2
  %84 = bitcast i64* %83 to <2 x i64>*
  store <2 x i64> %81, <2 x i64>* %84, align 8, !alias.scope !98, !noalias !95
  %85 = or i64 %62, 8
  %86 = getelementptr i64, i64* %1, i64 %85
  %87 = getelementptr inbounds i64, i64* %35, i64 %85
  %88 = bitcast i64* %86 to <2 x i64>*
  %89 = load <2 x i64>, <2 x i64>* %88, align 8, !alias.scope !95
  %90 = getelementptr i64, i64* %86, i64 2
  %91 = bitcast i64* %90 to <2 x i64>*
  %92 = load <2 x i64>, <2 x i64>* %91, align 8, !alias.scope !95
  %93 = bitcast i64* %87 to <2 x i64>*
  store <2 x i64> %89, <2 x i64>* %93, align 8, !alias.scope !98, !noalias !95
  %94 = getelementptr inbounds i64, i64* %87, i64 2
  %95 = bitcast i64* %94 to <2 x i64>*
  store <2 x i64> %92, <2 x i64>* %95, align 8, !alias.scope !98, !noalias !95
  %96 = or i64 %62, 12
  %97 = getelementptr i64, i64* %1, i64 %96
  %98 = getelementptr inbounds i64, i64* %35, i64 %96
  %99 = bitcast i64* %97 to <2 x i64>*
  %100 = load <2 x i64>, <2 x i64>* %99, align 8, !alias.scope !95
  %101 = getelementptr i64, i64* %97, i64 2
  %102 = bitcast i64* %101 to <2 x i64>*
  %103 = load <2 x i64>, <2 x i64>* %102, align 8, !alias.scope !95
  %104 = bitcast i64* %98 to <2 x i64>*
  store <2 x i64> %100, <2 x i64>* %104, align 8, !alias.scope !98, !noalias !95
  %105 = getelementptr inbounds i64, i64* %98, i64 2
  %106 = bitcast i64* %105 to <2 x i64>*
  store <2 x i64> %103, <2 x i64>* %106, align 8, !alias.scope !98, !noalias !95
  %107 = add i64 %62, 16
  %108 = add i64 %63, -4
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %61, !llvm.loop !100

110:                                              ; preds = %61, %51
  %111 = phi i64 [ 0, %51 ], [ %107, %61 ]
  %112 = icmp eq i64 %57, 0
  br i1 %112, label %129, label %113

113:                                              ; preds = %110, %113
  %114 = phi i64 [ %126, %113 ], [ %111, %110 ]
  %115 = phi i64 [ %127, %113 ], [ %57, %110 ]
  %116 = getelementptr i64, i64* %1, i64 %114
  %117 = getelementptr inbounds i64, i64* %35, i64 %114
  %118 = bitcast i64* %116 to <2 x i64>*
  %119 = load <2 x i64>, <2 x i64>* %118, align 8, !alias.scope !95
  %120 = getelementptr i64, i64* %116, i64 2
  %121 = bitcast i64* %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 8, !alias.scope !95
  %123 = bitcast i64* %117 to <2 x i64>*
  store <2 x i64> %119, <2 x i64>* %123, align 8, !alias.scope !98, !noalias !95
  %124 = getelementptr inbounds i64, i64* %117, i64 2
  %125 = bitcast i64* %124 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %125, align 8, !alias.scope !98, !noalias !95
  %126 = add i64 %114, 4
  %127 = add i64 %115, -1
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %113, !llvm.loop !101

129:                                              ; preds = %113, %110
  %130 = icmp eq i64 %40, %52
  br i1 %130, label %173, label %131

131:                                              ; preds = %129, %44, %42
  %132 = phi i64* [ %1, %44 ], [ %1, %42 ], [ %53, %129 ]
  %133 = phi i64 [ 0, %44 ], [ 0, %42 ], [ %52, %129 ]
  %134 = xor i64 %133, -1
  %135 = add nsw i64 %40, %134
  %136 = and i64 %40, 3
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %148, label %138

138:                                              ; preds = %131, %138
  %139 = phi i64* [ %144, %138 ], [ %132, %131 ]
  %140 = phi i64 [ %145, %138 ], [ %133, %131 ]
  %141 = phi i64 [ %146, %138 ], [ %136, %131 ]
  %142 = getelementptr inbounds i64, i64* %35, i64 %140
  %143 = load i64, i64* %139, align 8
  store i64 %143, i64* %142, align 8
  %144 = getelementptr inbounds i64, i64* %139, i64 1
  %145 = add nuw i64 %140, 1
  %146 = add i64 %141, -1
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %138, !llvm.loop !102

148:                                              ; preds = %138, %131
  %149 = phi i64* [ undef, %131 ], [ %144, %138 ]
  %150 = phi i64* [ %132, %131 ], [ %144, %138 ]
  %151 = phi i64 [ %133, %131 ], [ %145, %138 ]
  %152 = icmp ult i64 %135, 3
  br i1 %152, label %173, label %153

153:                                              ; preds = %148, %153
  %154 = phi i64* [ %170, %153 ], [ %150, %148 ]
  %155 = phi i64 [ %171, %153 ], [ %151, %148 ]
  %156 = getelementptr inbounds i64, i64* %35, i64 %155
  %157 = load i64, i64* %154, align 8
  store i64 %157, i64* %156, align 8
  %158 = getelementptr inbounds i64, i64* %154, i64 1
  %159 = add nuw i64 %155, 1
  %160 = getelementptr inbounds i64, i64* %35, i64 %159
  %161 = load i64, i64* %158, align 8
  store i64 %161, i64* %160, align 8
  %162 = getelementptr inbounds i64, i64* %154, i64 2
  %163 = add nuw i64 %155, 2
  %164 = getelementptr inbounds i64, i64* %35, i64 %163
  %165 = load i64, i64* %162, align 8
  store i64 %165, i64* %164, align 8
  %166 = getelementptr inbounds i64, i64* %154, i64 3
  %167 = add nuw i64 %155, 3
  %168 = getelementptr inbounds i64, i64* %35, i64 %167
  %169 = load i64, i64* %166, align 8
  store i64 %169, i64* %168, align 8
  %170 = getelementptr inbounds i64, i64* %154, i64 4
  %171 = add nuw i64 %155, 4
  %172 = icmp eq i64 %171, %40
  br i1 %172, label %173, label %153, !llvm.loop !103

173:                                              ; preds = %148, %153, %129, %33
  %174 = phi i64* [ %1, %33 ], [ %53, %129 ], [ %149, %148 ], [ %170, %153 ]
  %175 = icmp eq i64 %38, 0
  br i1 %175, label %312, label %176

176:                                              ; preds = %28, %173
  %177 = phi i64* [ %1, %28 ], [ %174, %173 ]
  %178 = phi i64 [ %2, %28 ], [ %38, %173 ]
  %179 = phi i64* [ %31, %28 ], [ %39, %173 ]
  %180 = phi i64 [ %25, %28 ], [ 0, %173 ]
  %181 = phi i64 [ %32, %28 ], [ 0, %173 ]
  %182 = icmp ult i64 %178, 4
  br i1 %182, label %269, label %183

183:                                              ; preds = %176
  %184 = getelementptr i64, i64* %179, i64 %178
  %185 = getelementptr i64, i64* %177, i64 %178
  %186 = icmp ult i64* %179, %185
  %187 = icmp ult i64* %177, %184
  %188 = and i1 %186, %187
  br i1 %188, label %269, label %189

189:                                              ; preds = %183
  %190 = and i64 %178, -4
  %191 = getelementptr i64, i64* %177, i64 %190
  %192 = add i64 %190, -4
  %193 = lshr exact i64 %192, 2
  %194 = add nuw nsw i64 %193, 1
  %195 = and i64 %194, 3
  %196 = icmp ult i64 %192, 12
  br i1 %196, label %248, label %197

197:                                              ; preds = %189
  %198 = sub nsw i64 %194, %195
  br label %199

199:                                              ; preds = %199, %197
  %200 = phi i64 [ 0, %197 ], [ %245, %199 ]
  %201 = phi i64 [ %198, %197 ], [ %246, %199 ]
  %202 = getelementptr i64, i64* %177, i64 %200
  %203 = getelementptr inbounds i64, i64* %179, i64 %200
  %204 = bitcast i64* %202 to <2 x i64>*
  %205 = load <2 x i64>, <2 x i64>* %204, align 8, !alias.scope !104
  %206 = getelementptr i64, i64* %202, i64 2
  %207 = bitcast i64* %206 to <2 x i64>*
  %208 = load <2 x i64>, <2 x i64>* %207, align 8, !alias.scope !104
  %209 = bitcast i64* %203 to <2 x i64>*
  store <2 x i64> %205, <2 x i64>* %209, align 8, !alias.scope !107, !noalias !104
  %210 = getelementptr inbounds i64, i64* %203, i64 2
  %211 = bitcast i64* %210 to <2 x i64>*
  store <2 x i64> %208, <2 x i64>* %211, align 8, !alias.scope !107, !noalias !104
  %212 = or i64 %200, 4
  %213 = getelementptr i64, i64* %177, i64 %212
  %214 = getelementptr inbounds i64, i64* %179, i64 %212
  %215 = bitcast i64* %213 to <2 x i64>*
  %216 = load <2 x i64>, <2 x i64>* %215, align 8, !alias.scope !104
  %217 = getelementptr i64, i64* %213, i64 2
  %218 = bitcast i64* %217 to <2 x i64>*
  %219 = load <2 x i64>, <2 x i64>* %218, align 8, !alias.scope !104
  %220 = bitcast i64* %214 to <2 x i64>*
  store <2 x i64> %216, <2 x i64>* %220, align 8, !alias.scope !107, !noalias !104
  %221 = getelementptr inbounds i64, i64* %214, i64 2
  %222 = bitcast i64* %221 to <2 x i64>*
  store <2 x i64> %219, <2 x i64>* %222, align 8, !alias.scope !107, !noalias !104
  %223 = or i64 %200, 8
  %224 = getelementptr i64, i64* %177, i64 %223
  %225 = getelementptr inbounds i64, i64* %179, i64 %223
  %226 = bitcast i64* %224 to <2 x i64>*
  %227 = load <2 x i64>, <2 x i64>* %226, align 8, !alias.scope !104
  %228 = getelementptr i64, i64* %224, i64 2
  %229 = bitcast i64* %228 to <2 x i64>*
  %230 = load <2 x i64>, <2 x i64>* %229, align 8, !alias.scope !104
  %231 = bitcast i64* %225 to <2 x i64>*
  store <2 x i64> %227, <2 x i64>* %231, align 8, !alias.scope !107, !noalias !104
  %232 = getelementptr inbounds i64, i64* %225, i64 2
  %233 = bitcast i64* %232 to <2 x i64>*
  store <2 x i64> %230, <2 x i64>* %233, align 8, !alias.scope !107, !noalias !104
  %234 = or i64 %200, 12
  %235 = getelementptr i64, i64* %177, i64 %234
  %236 = getelementptr inbounds i64, i64* %179, i64 %234
  %237 = bitcast i64* %235 to <2 x i64>*
  %238 = load <2 x i64>, <2 x i64>* %237, align 8, !alias.scope !104
  %239 = getelementptr i64, i64* %235, i64 2
  %240 = bitcast i64* %239 to <2 x i64>*
  %241 = load <2 x i64>, <2 x i64>* %240, align 8, !alias.scope !104
  %242 = bitcast i64* %236 to <2 x i64>*
  store <2 x i64> %238, <2 x i64>* %242, align 8, !alias.scope !107, !noalias !104
  %243 = getelementptr inbounds i64, i64* %236, i64 2
  %244 = bitcast i64* %243 to <2 x i64>*
  store <2 x i64> %241, <2 x i64>* %244, align 8, !alias.scope !107, !noalias !104
  %245 = add i64 %200, 16
  %246 = add i64 %201, -4
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %199, !llvm.loop !109

248:                                              ; preds = %199, %189
  %249 = phi i64 [ 0, %189 ], [ %245, %199 ]
  %250 = icmp eq i64 %195, 0
  br i1 %250, label %267, label %251

251:                                              ; preds = %248, %251
  %252 = phi i64 [ %264, %251 ], [ %249, %248 ]
  %253 = phi i64 [ %265, %251 ], [ %195, %248 ]
  %254 = getelementptr i64, i64* %177, i64 %252
  %255 = getelementptr inbounds i64, i64* %179, i64 %252
  %256 = bitcast i64* %254 to <2 x i64>*
  %257 = load <2 x i64>, <2 x i64>* %256, align 8, !alias.scope !104
  %258 = getelementptr i64, i64* %254, i64 2
  %259 = bitcast i64* %258 to <2 x i64>*
  %260 = load <2 x i64>, <2 x i64>* %259, align 8, !alias.scope !104
  %261 = bitcast i64* %255 to <2 x i64>*
  store <2 x i64> %257, <2 x i64>* %261, align 8, !alias.scope !107, !noalias !104
  %262 = getelementptr inbounds i64, i64* %255, i64 2
  %263 = bitcast i64* %262 to <2 x i64>*
  store <2 x i64> %260, <2 x i64>* %263, align 8, !alias.scope !107, !noalias !104
  %264 = add i64 %252, 4
  %265 = add i64 %253, -1
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %267, label %251, !llvm.loop !110

267:                                              ; preds = %251, %248
  %268 = icmp eq i64 %178, %190
  br i1 %268, label %310, label %269

269:                                              ; preds = %267, %183, %176
  %270 = phi i64* [ %177, %183 ], [ %177, %176 ], [ %191, %267 ]
  %271 = phi i64 [ 0, %183 ], [ 0, %176 ], [ %190, %267 ]
  %272 = xor i64 %271, -1
  %273 = add i64 %178, %272
  %274 = and i64 %178, 3
  %275 = icmp eq i64 %274, 0
  br i1 %275, label %286, label %276

276:                                              ; preds = %269, %276
  %277 = phi i64* [ %282, %276 ], [ %270, %269 ]
  %278 = phi i64 [ %283, %276 ], [ %271, %269 ]
  %279 = phi i64 [ %284, %276 ], [ %274, %269 ]
  %280 = getelementptr inbounds i64, i64* %179, i64 %278
  %281 = load i64, i64* %277, align 8
  store i64 %281, i64* %280, align 8
  %282 = getelementptr inbounds i64, i64* %277, i64 1
  %283 = add nuw i64 %278, 1
  %284 = add i64 %279, -1
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %286, label %276, !llvm.loop !111

286:                                              ; preds = %276, %269
  %287 = phi i64* [ %270, %269 ], [ %282, %276 ]
  %288 = phi i64 [ %271, %269 ], [ %283, %276 ]
  %289 = icmp ult i64 %273, 3
  br i1 %289, label %310, label %290

290:                                              ; preds = %286, %290
  %291 = phi i64* [ %307, %290 ], [ %287, %286 ]
  %292 = phi i64 [ %308, %290 ], [ %288, %286 ]
  %293 = getelementptr inbounds i64, i64* %179, i64 %292
  %294 = load i64, i64* %291, align 8
  store i64 %294, i64* %293, align 8
  %295 = getelementptr inbounds i64, i64* %291, i64 1
  %296 = add nuw i64 %292, 1
  %297 = getelementptr inbounds i64, i64* %179, i64 %296
  %298 = load i64, i64* %295, align 8
  store i64 %298, i64* %297, align 8
  %299 = getelementptr inbounds i64, i64* %291, i64 2
  %300 = add nuw i64 %292, 2
  %301 = getelementptr inbounds i64, i64* %179, i64 %300
  %302 = load i64, i64* %299, align 8
  store i64 %302, i64* %301, align 8
  %303 = getelementptr inbounds i64, i64* %291, i64 3
  %304 = add nuw i64 %292, 3
  %305 = getelementptr inbounds i64, i64* %179, i64 %304
  %306 = load i64, i64* %303, align 8
  store i64 %306, i64* %305, align 8
  %307 = getelementptr inbounds i64, i64* %291, i64 4
  %308 = add nuw i64 %292, 4
  %309 = icmp eq i64 %308, %178
  br i1 %309, label %310, label %290, !llvm.loop !112

310:                                              ; preds = %286, %290, %267
  %311 = icmp eq i64 %181, 0
  br i1 %311, label %312, label %314

312:                                              ; preds = %173, %310
  %313 = load i64, i64* %4, align 8
  br label %329

314:                                              ; preds = %310
  %315 = load i64, i64* %4, align 8
  %316 = and i64 %315, 1
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %323, label %318

318:                                              ; preds = %314
  %319 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.143", %"class.absl::inlined_vector_internal::Storage.143"* %0, i64 0, i32 1, i32 0, i32 0
  %320 = bitcast i64** %319 to i8**
  %321 = load i8*, i8** %320, align 8
  tail call void @_ZdlPv(i8* %321) #16
  %322 = load i64, i64* %4, align 8
  br label %323

323:                                              ; preds = %314, %318
  %324 = phi i64 [ %315, %314 ], [ %322, %318 ]
  %325 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.143", %"class.absl::inlined_vector_internal::Storage.143"* %0, i64 0, i32 1, i32 0, i32 0
  %326 = bitcast i64** %325 to i64*
  store i64 %181, i64* %326, align 8
  %327 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.143", %"class.absl::inlined_vector_internal::Storage.143"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %180, i64* %327, align 8
  %328 = or i64 %324, 1
  store i64 %328, i64* %4, align 8
  br label %329

329:                                              ; preds = %323, %312
  %330 = phi i64 [ %313, %312 ], [ %328, %323 ]
  %331 = shl i64 %2, 1
  %332 = and i64 %330, 1
  %333 = or i64 %332, %331
  store i64 %333, i64* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE6AssignINS0_20IteratorValueAdapterIS4_PKiEEEEvT_m(%"class.absl::inlined_vector_internal::Storage.98"*, i32*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !noalias !113
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 0
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8, !noalias !113
  %12 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 1
  %13 = load i64, i64* %12, align 8, !noalias !113
  br label %17

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1
  %16 = ptrtoint %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %15 to i64
  br label %17

17:                                               ; preds = %8, %14
  %18 = phi i64 [ %16, %14 ], [ %11, %8 ]
  %19 = phi i64 [ 4, %14 ], [ %13, %8 ]
  %20 = lshr i64 %5, 1
  %21 = icmp ult i64 %19, %2
  br i1 %21, label %22, label %33

22:                                               ; preds = %17
  %23 = shl i64 %19, 1
  %24 = icmp ult i64 %23, %2
  %25 = select i1 %24, i64 %2, i64 %23
  %26 = icmp ugt i64 %25, 4611686018427387903
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  tail call void @abort() #17
  unreachable

28:                                               ; preds = %22
  %29 = shl i64 %25, 2
  %30 = tail call i8* @_Znwm(i64 %29) #16
  %31 = bitcast i8* %30 to i32*
  %32 = ptrtoint i8* %30 to i64
  br label %176

33:                                               ; preds = %17
  %34 = icmp ult i64 %20, %2
  %35 = inttoptr i64 %18 to i32*
  %36 = inttoptr i64 %18 to i8*
  %37 = getelementptr inbounds i32, i32* %35, i64 %20
  %38 = call i64 @llvm.usub.sat.i64(i64 %2, i64 %20)
  %39 = select i1 %34, i32* %37, i32* null
  %40 = select i1 %34, i64 %20, i64 %2
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %173, label %42

42:                                               ; preds = %33
  %43 = icmp ult i64 %40, 8
  br i1 %43, label %131, label %44

44:                                               ; preds = %42
  %45 = getelementptr i32, i32* %35, i64 %40
  %46 = getelementptr i32, i32* %1, i64 %40
  %47 = bitcast i32* %46 to i8*
  %48 = icmp ult i8* %36, %47
  %49 = icmp ugt i32* %45, %1
  %50 = and i1 %48, %49
  br i1 %50, label %131, label %51

51:                                               ; preds = %44
  %52 = and i64 %40, 9223372036854775800
  %53 = getelementptr i32, i32* %1, i64 %52
  %54 = add nsw i64 %52, -8
  %55 = lshr exact i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 3
  %58 = icmp ult i64 %54, 24
  br i1 %58, label %110, label %59

59:                                               ; preds = %51
  %60 = sub nsw i64 %56, %57
  br label %61

61:                                               ; preds = %61, %59
  %62 = phi i64 [ 0, %59 ], [ %107, %61 ]
  %63 = phi i64 [ %60, %59 ], [ %108, %61 ]
  %64 = getelementptr i32, i32* %1, i64 %62
  %65 = getelementptr inbounds i32, i32* %35, i64 %62
  %66 = bitcast i32* %64 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 4, !alias.scope !116
  %68 = getelementptr i32, i32* %64, i64 4
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 4, !alias.scope !116
  %71 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> %67, <4 x i32>* %71, align 4, !alias.scope !119, !noalias !116
  %72 = getelementptr inbounds i32, i32* %65, i64 4
  %73 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %73, align 4, !alias.scope !119, !noalias !116
  %74 = or i64 %62, 8
  %75 = getelementptr i32, i32* %1, i64 %74
  %76 = getelementptr inbounds i32, i32* %35, i64 %74
  %77 = bitcast i32* %75 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 4, !alias.scope !116
  %79 = getelementptr i32, i32* %75, i64 4
  %80 = bitcast i32* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 4, !alias.scope !116
  %82 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %82, align 4, !alias.scope !119, !noalias !116
  %83 = getelementptr inbounds i32, i32* %76, i64 4
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> %81, <4 x i32>* %84, align 4, !alias.scope !119, !noalias !116
  %85 = or i64 %62, 16
  %86 = getelementptr i32, i32* %1, i64 %85
  %87 = getelementptr inbounds i32, i32* %35, i64 %85
  %88 = bitcast i32* %86 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !116
  %90 = getelementptr i32, i32* %86, i64 4
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4, !alias.scope !116
  %93 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %93, align 4, !alias.scope !119, !noalias !116
  %94 = getelementptr inbounds i32, i32* %87, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %95, align 4, !alias.scope !119, !noalias !116
  %96 = or i64 %62, 24
  %97 = getelementptr i32, i32* %1, i64 %96
  %98 = getelementptr inbounds i32, i32* %35, i64 %96
  %99 = bitcast i32* %97 to <4 x i32>*
  %100 = load <4 x i32>, <4 x i32>* %99, align 4, !alias.scope !116
  %101 = getelementptr i32, i32* %97, i64 4
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 4, !alias.scope !116
  %104 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %104, align 4, !alias.scope !119, !noalias !116
  %105 = getelementptr inbounds i32, i32* %98, i64 4
  %106 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %106, align 4, !alias.scope !119, !noalias !116
  %107 = add i64 %62, 32
  %108 = add i64 %63, -4
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %61, !llvm.loop !121

110:                                              ; preds = %61, %51
  %111 = phi i64 [ 0, %51 ], [ %107, %61 ]
  %112 = icmp eq i64 %57, 0
  br i1 %112, label %129, label %113

113:                                              ; preds = %110, %113
  %114 = phi i64 [ %126, %113 ], [ %111, %110 ]
  %115 = phi i64 [ %127, %113 ], [ %57, %110 ]
  %116 = getelementptr i32, i32* %1, i64 %114
  %117 = getelementptr inbounds i32, i32* %35, i64 %114
  %118 = bitcast i32* %116 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4, !alias.scope !116
  %120 = getelementptr i32, i32* %116, i64 4
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4, !alias.scope !116
  %123 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %119, <4 x i32>* %123, align 4, !alias.scope !119, !noalias !116
  %124 = getelementptr inbounds i32, i32* %117, i64 4
  %125 = bitcast i32* %124 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %125, align 4, !alias.scope !119, !noalias !116
  %126 = add i64 %114, 8
  %127 = add i64 %115, -1
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %113, !llvm.loop !122

129:                                              ; preds = %113, %110
  %130 = icmp eq i64 %40, %52
  br i1 %130, label %173, label %131

131:                                              ; preds = %129, %44, %42
  %132 = phi i32* [ %1, %44 ], [ %1, %42 ], [ %53, %129 ]
  %133 = phi i64 [ 0, %44 ], [ 0, %42 ], [ %52, %129 ]
  %134 = xor i64 %133, -1
  %135 = add nsw i64 %40, %134
  %136 = and i64 %40, 3
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %148, label %138

138:                                              ; preds = %131, %138
  %139 = phi i32* [ %144, %138 ], [ %132, %131 ]
  %140 = phi i64 [ %145, %138 ], [ %133, %131 ]
  %141 = phi i64 [ %146, %138 ], [ %136, %131 ]
  %142 = getelementptr inbounds i32, i32* %35, i64 %140
  %143 = load i32, i32* %139, align 4
  store i32 %143, i32* %142, align 4
  %144 = getelementptr inbounds i32, i32* %139, i64 1
  %145 = add nuw i64 %140, 1
  %146 = add i64 %141, -1
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %148, label %138, !llvm.loop !123

148:                                              ; preds = %138, %131
  %149 = phi i32* [ undef, %131 ], [ %144, %138 ]
  %150 = phi i32* [ %132, %131 ], [ %144, %138 ]
  %151 = phi i64 [ %133, %131 ], [ %145, %138 ]
  %152 = icmp ult i64 %135, 3
  br i1 %152, label %173, label %153

153:                                              ; preds = %148, %153
  %154 = phi i32* [ %170, %153 ], [ %150, %148 ]
  %155 = phi i64 [ %171, %153 ], [ %151, %148 ]
  %156 = getelementptr inbounds i32, i32* %35, i64 %155
  %157 = load i32, i32* %154, align 4
  store i32 %157, i32* %156, align 4
  %158 = getelementptr inbounds i32, i32* %154, i64 1
  %159 = add nuw i64 %155, 1
  %160 = getelementptr inbounds i32, i32* %35, i64 %159
  %161 = load i32, i32* %158, align 4
  store i32 %161, i32* %160, align 4
  %162 = getelementptr inbounds i32, i32* %154, i64 2
  %163 = add nuw i64 %155, 2
  %164 = getelementptr inbounds i32, i32* %35, i64 %163
  %165 = load i32, i32* %162, align 4
  store i32 %165, i32* %164, align 4
  %166 = getelementptr inbounds i32, i32* %154, i64 3
  %167 = add nuw i64 %155, 3
  %168 = getelementptr inbounds i32, i32* %35, i64 %167
  %169 = load i32, i32* %166, align 4
  store i32 %169, i32* %168, align 4
  %170 = getelementptr inbounds i32, i32* %154, i64 4
  %171 = add nuw i64 %155, 4
  %172 = icmp eq i64 %171, %40
  br i1 %172, label %173, label %153, !llvm.loop !124

173:                                              ; preds = %148, %153, %129, %33
  %174 = phi i32* [ %1, %33 ], [ %53, %129 ], [ %149, %148 ], [ %170, %153 ]
  %175 = icmp eq i64 %38, 0
  br i1 %175, label %312, label %176

176:                                              ; preds = %28, %173
  %177 = phi i32* [ %1, %28 ], [ %174, %173 ]
  %178 = phi i64 [ %2, %28 ], [ %38, %173 ]
  %179 = phi i32* [ %31, %28 ], [ %39, %173 ]
  %180 = phi i64 [ %25, %28 ], [ 0, %173 ]
  %181 = phi i64 [ %32, %28 ], [ 0, %173 ]
  %182 = icmp ult i64 %178, 8
  br i1 %182, label %269, label %183

183:                                              ; preds = %176
  %184 = getelementptr i32, i32* %179, i64 %178
  %185 = getelementptr i32, i32* %177, i64 %178
  %186 = icmp ult i32* %179, %185
  %187 = icmp ult i32* %177, %184
  %188 = and i1 %186, %187
  br i1 %188, label %269, label %189

189:                                              ; preds = %183
  %190 = and i64 %178, -8
  %191 = getelementptr i32, i32* %177, i64 %190
  %192 = add i64 %190, -8
  %193 = lshr exact i64 %192, 3
  %194 = add nuw nsw i64 %193, 1
  %195 = and i64 %194, 3
  %196 = icmp ult i64 %192, 24
  br i1 %196, label %248, label %197

197:                                              ; preds = %189
  %198 = sub nsw i64 %194, %195
  br label %199

199:                                              ; preds = %199, %197
  %200 = phi i64 [ 0, %197 ], [ %245, %199 ]
  %201 = phi i64 [ %198, %197 ], [ %246, %199 ]
  %202 = getelementptr i32, i32* %177, i64 %200
  %203 = getelementptr inbounds i32, i32* %179, i64 %200
  %204 = bitcast i32* %202 to <4 x i32>*
  %205 = load <4 x i32>, <4 x i32>* %204, align 4, !alias.scope !125
  %206 = getelementptr i32, i32* %202, i64 4
  %207 = bitcast i32* %206 to <4 x i32>*
  %208 = load <4 x i32>, <4 x i32>* %207, align 4, !alias.scope !125
  %209 = bitcast i32* %203 to <4 x i32>*
  store <4 x i32> %205, <4 x i32>* %209, align 4, !alias.scope !128, !noalias !125
  %210 = getelementptr inbounds i32, i32* %203, i64 4
  %211 = bitcast i32* %210 to <4 x i32>*
  store <4 x i32> %208, <4 x i32>* %211, align 4, !alias.scope !128, !noalias !125
  %212 = or i64 %200, 8
  %213 = getelementptr i32, i32* %177, i64 %212
  %214 = getelementptr inbounds i32, i32* %179, i64 %212
  %215 = bitcast i32* %213 to <4 x i32>*
  %216 = load <4 x i32>, <4 x i32>* %215, align 4, !alias.scope !125
  %217 = getelementptr i32, i32* %213, i64 4
  %218 = bitcast i32* %217 to <4 x i32>*
  %219 = load <4 x i32>, <4 x i32>* %218, align 4, !alias.scope !125
  %220 = bitcast i32* %214 to <4 x i32>*
  store <4 x i32> %216, <4 x i32>* %220, align 4, !alias.scope !128, !noalias !125
  %221 = getelementptr inbounds i32, i32* %214, i64 4
  %222 = bitcast i32* %221 to <4 x i32>*
  store <4 x i32> %219, <4 x i32>* %222, align 4, !alias.scope !128, !noalias !125
  %223 = or i64 %200, 16
  %224 = getelementptr i32, i32* %177, i64 %223
  %225 = getelementptr inbounds i32, i32* %179, i64 %223
  %226 = bitcast i32* %224 to <4 x i32>*
  %227 = load <4 x i32>, <4 x i32>* %226, align 4, !alias.scope !125
  %228 = getelementptr i32, i32* %224, i64 4
  %229 = bitcast i32* %228 to <4 x i32>*
  %230 = load <4 x i32>, <4 x i32>* %229, align 4, !alias.scope !125
  %231 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %227, <4 x i32>* %231, align 4, !alias.scope !128, !noalias !125
  %232 = getelementptr inbounds i32, i32* %225, i64 4
  %233 = bitcast i32* %232 to <4 x i32>*
  store <4 x i32> %230, <4 x i32>* %233, align 4, !alias.scope !128, !noalias !125
  %234 = or i64 %200, 24
  %235 = getelementptr i32, i32* %177, i64 %234
  %236 = getelementptr inbounds i32, i32* %179, i64 %234
  %237 = bitcast i32* %235 to <4 x i32>*
  %238 = load <4 x i32>, <4 x i32>* %237, align 4, !alias.scope !125
  %239 = getelementptr i32, i32* %235, i64 4
  %240 = bitcast i32* %239 to <4 x i32>*
  %241 = load <4 x i32>, <4 x i32>* %240, align 4, !alias.scope !125
  %242 = bitcast i32* %236 to <4 x i32>*
  store <4 x i32> %238, <4 x i32>* %242, align 4, !alias.scope !128, !noalias !125
  %243 = getelementptr inbounds i32, i32* %236, i64 4
  %244 = bitcast i32* %243 to <4 x i32>*
  store <4 x i32> %241, <4 x i32>* %244, align 4, !alias.scope !128, !noalias !125
  %245 = add i64 %200, 32
  %246 = add i64 %201, -4
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %199, !llvm.loop !130

248:                                              ; preds = %199, %189
  %249 = phi i64 [ 0, %189 ], [ %245, %199 ]
  %250 = icmp eq i64 %195, 0
  br i1 %250, label %267, label %251

251:                                              ; preds = %248, %251
  %252 = phi i64 [ %264, %251 ], [ %249, %248 ]
  %253 = phi i64 [ %265, %251 ], [ %195, %248 ]
  %254 = getelementptr i32, i32* %177, i64 %252
  %255 = getelementptr inbounds i32, i32* %179, i64 %252
  %256 = bitcast i32* %254 to <4 x i32>*
  %257 = load <4 x i32>, <4 x i32>* %256, align 4, !alias.scope !125
  %258 = getelementptr i32, i32* %254, i64 4
  %259 = bitcast i32* %258 to <4 x i32>*
  %260 = load <4 x i32>, <4 x i32>* %259, align 4, !alias.scope !125
  %261 = bitcast i32* %255 to <4 x i32>*
  store <4 x i32> %257, <4 x i32>* %261, align 4, !alias.scope !128, !noalias !125
  %262 = getelementptr inbounds i32, i32* %255, i64 4
  %263 = bitcast i32* %262 to <4 x i32>*
  store <4 x i32> %260, <4 x i32>* %263, align 4, !alias.scope !128, !noalias !125
  %264 = add i64 %252, 8
  %265 = add i64 %253, -1
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %267, label %251, !llvm.loop !131

267:                                              ; preds = %251, %248
  %268 = icmp eq i64 %178, %190
  br i1 %268, label %310, label %269

269:                                              ; preds = %267, %183, %176
  %270 = phi i32* [ %177, %183 ], [ %177, %176 ], [ %191, %267 ]
  %271 = phi i64 [ 0, %183 ], [ 0, %176 ], [ %190, %267 ]
  %272 = xor i64 %271, -1
  %273 = add i64 %178, %272
  %274 = and i64 %178, 3
  %275 = icmp eq i64 %274, 0
  br i1 %275, label %286, label %276

276:                                              ; preds = %269, %276
  %277 = phi i32* [ %282, %276 ], [ %270, %269 ]
  %278 = phi i64 [ %283, %276 ], [ %271, %269 ]
  %279 = phi i64 [ %284, %276 ], [ %274, %269 ]
  %280 = getelementptr inbounds i32, i32* %179, i64 %278
  %281 = load i32, i32* %277, align 4
  store i32 %281, i32* %280, align 4
  %282 = getelementptr inbounds i32, i32* %277, i64 1
  %283 = add nuw i64 %278, 1
  %284 = add i64 %279, -1
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %286, label %276, !llvm.loop !132

286:                                              ; preds = %276, %269
  %287 = phi i32* [ %270, %269 ], [ %282, %276 ]
  %288 = phi i64 [ %271, %269 ], [ %283, %276 ]
  %289 = icmp ult i64 %273, 3
  br i1 %289, label %310, label %290

290:                                              ; preds = %286, %290
  %291 = phi i32* [ %307, %290 ], [ %287, %286 ]
  %292 = phi i64 [ %308, %290 ], [ %288, %286 ]
  %293 = getelementptr inbounds i32, i32* %179, i64 %292
  %294 = load i32, i32* %291, align 4
  store i32 %294, i32* %293, align 4
  %295 = getelementptr inbounds i32, i32* %291, i64 1
  %296 = add nuw i64 %292, 1
  %297 = getelementptr inbounds i32, i32* %179, i64 %296
  %298 = load i32, i32* %295, align 4
  store i32 %298, i32* %297, align 4
  %299 = getelementptr inbounds i32, i32* %291, i64 2
  %300 = add nuw i64 %292, 2
  %301 = getelementptr inbounds i32, i32* %179, i64 %300
  %302 = load i32, i32* %299, align 4
  store i32 %302, i32* %301, align 4
  %303 = getelementptr inbounds i32, i32* %291, i64 3
  %304 = add nuw i64 %292, 3
  %305 = getelementptr inbounds i32, i32* %179, i64 %304
  %306 = load i32, i32* %303, align 4
  store i32 %306, i32* %305, align 4
  %307 = getelementptr inbounds i32, i32* %291, i64 4
  %308 = add nuw i64 %292, 4
  %309 = icmp eq i64 %308, %178
  br i1 %309, label %310, label %290, !llvm.loop !133

310:                                              ; preds = %286, %290, %267
  %311 = icmp eq i64 %181, 0
  br i1 %311, label %312, label %314

312:                                              ; preds = %173, %310
  %313 = load i64, i64* %4, align 8
  br label %329

314:                                              ; preds = %310
  %315 = load i64, i64* %4, align 8
  %316 = and i64 %315, 1
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %323, label %318

318:                                              ; preds = %314
  %319 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 0
  %320 = bitcast i32** %319 to i8**
  %321 = load i8*, i8** %320, align 8
  tail call void @_ZdlPv(i8* %321) #16
  %322 = load i64, i64* %4, align 8
  br label %323

323:                                              ; preds = %314, %318
  %324 = phi i64 [ %315, %314 ], [ %322, %318 ]
  %325 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 0
  %326 = bitcast i32** %325 to i64*
  store i64 %181, i64* %326, align 8
  %327 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %180, i64* %327, align 8
  %328 = or i64 %324, 1
  store i64 %328, i64* %4, align 8
  br label %329

329:                                              ; preds = %323, %312
  %330 = phi i64 [ %313, %312 ], [ %328, %323 ]
  %331 = shl i64 %2, 1
  %332 = and i64 %330, 1
  %333 = or i64 %332, %331
  store i64 %333, i64* %4, align 8
  ret void
}

declare void @_ZN6webrtc14RTPVideoHeader21GenericDescriptorInfoC1ERKS1_(%"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"*, %"struct.webrtc::RTPVideoHeader::GenericDescriptorInfo"* dereferenceable(144)) unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) i64* @_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15EmplaceBackSlowIJRKlEEERlDpOT_(%"class.absl::inlined_vector_internal::Storage.143"*, i64* dereferenceable(8)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.143", %"class.absl::inlined_vector_internal::Storage.143"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !noalias !134
  %5 = and i64 %4, 1
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.143", %"class.absl::inlined_vector_internal::Storage.143"* %0, i64 0, i32 1
  %9 = ptrtoint %"union.absl::inlined_vector_internal::Storage<long, 5, std::__1::allocator<long> >::Data"* %8 to i64
  br label %19

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.143", %"class.absl::inlined_vector_internal::Storage.143"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = bitcast i64** %11 to i64*
  %13 = load i64, i64* %12, align 8, !noalias !134
  %14 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.143", %"class.absl::inlined_vector_internal::Storage.143"* %0, i64 0, i32 1, i32 0, i32 1
  %15 = load i64, i64* %14, align 8, !noalias !134
  %16 = shl i64 %15, 1
  %17 = icmp ugt i64 %16, 2305843009213693951
  br i1 %17, label %18, label %19

18:                                               ; preds = %10
  tail call void @abort() #17
  unreachable

19:                                               ; preds = %7, %10
  %20 = phi i64 [ 10, %7 ], [ %16, %10 ]
  %21 = phi i64 [ %9, %7 ], [ %13, %10 ]
  %22 = inttoptr i64 %21 to i64*
  %23 = inttoptr i64 %21 to i8*
  %24 = lshr i64 %4, 1
  %25 = shl i64 %20, 3
  %26 = tail call i8* @_Znwm(i64 %25) #16
  %27 = bitcast i8* %26 to i64*
  %28 = ptrtoint i8* %26 to i64
  %29 = getelementptr inbounds i64, i64* %27, i64 %24
  %30 = load i64, i64* %1, align 8
  store i64 %30, i64* %29, align 8
  %31 = icmp eq i64 %24, 0
  br i1 %31, label %163, label %32

32:                                               ; preds = %19
  %33 = icmp ult i64 %4, 8
  br i1 %33, label %122, label %34

34:                                               ; preds = %32
  %35 = shl i64 %24, 3
  %36 = getelementptr i8, i8* %26, i64 %35
  %37 = getelementptr i64, i64* %22, i64 %24
  %38 = bitcast i64* %37 to i8*
  %39 = icmp ult i8* %26, %38
  %40 = icmp ugt i8* %36, %23
  %41 = and i1 %39, %40
  br i1 %41, label %122, label %42

42:                                               ; preds = %34
  %43 = and i64 %24, 9223372036854775804
  %44 = getelementptr i64, i64* %22, i64 %43
  %45 = add nsw i64 %43, -4
  %46 = lshr exact i64 %45, 2
  %47 = add nuw nsw i64 %46, 1
  %48 = and i64 %47, 3
  %49 = icmp ult i64 %45, 12
  br i1 %49, label %101, label %50

50:                                               ; preds = %42
  %51 = sub nsw i64 %47, %48
  br label %52

52:                                               ; preds = %52, %50
  %53 = phi i64 [ 0, %50 ], [ %98, %52 ]
  %54 = phi i64 [ %51, %50 ], [ %99, %52 ]
  %55 = getelementptr i64, i64* %22, i64 %53
  %56 = getelementptr inbounds i64, i64* %27, i64 %53
  %57 = bitcast i64* %55 to <2 x i64>*
  %58 = load <2 x i64>, <2 x i64>* %57, align 8, !alias.scope !137
  %59 = getelementptr i64, i64* %55, i64 2
  %60 = bitcast i64* %59 to <2 x i64>*
  %61 = load <2 x i64>, <2 x i64>* %60, align 8, !alias.scope !137
  %62 = bitcast i64* %56 to <2 x i64>*
  store <2 x i64> %58, <2 x i64>* %62, align 8, !alias.scope !140, !noalias !137
  %63 = getelementptr inbounds i64, i64* %56, i64 2
  %64 = bitcast i64* %63 to <2 x i64>*
  store <2 x i64> %61, <2 x i64>* %64, align 8, !alias.scope !140, !noalias !137
  %65 = or i64 %53, 4
  %66 = getelementptr i64, i64* %22, i64 %65
  %67 = getelementptr inbounds i64, i64* %27, i64 %65
  %68 = bitcast i64* %66 to <2 x i64>*
  %69 = load <2 x i64>, <2 x i64>* %68, align 8, !alias.scope !137
  %70 = getelementptr i64, i64* %66, i64 2
  %71 = bitcast i64* %70 to <2 x i64>*
  %72 = load <2 x i64>, <2 x i64>* %71, align 8, !alias.scope !137
  %73 = bitcast i64* %67 to <2 x i64>*
  store <2 x i64> %69, <2 x i64>* %73, align 8, !alias.scope !140, !noalias !137
  %74 = getelementptr inbounds i64, i64* %67, i64 2
  %75 = bitcast i64* %74 to <2 x i64>*
  store <2 x i64> %72, <2 x i64>* %75, align 8, !alias.scope !140, !noalias !137
  %76 = or i64 %53, 8
  %77 = getelementptr i64, i64* %22, i64 %76
  %78 = getelementptr inbounds i64, i64* %27, i64 %76
  %79 = bitcast i64* %77 to <2 x i64>*
  %80 = load <2 x i64>, <2 x i64>* %79, align 8, !alias.scope !137
  %81 = getelementptr i64, i64* %77, i64 2
  %82 = bitcast i64* %81 to <2 x i64>*
  %83 = load <2 x i64>, <2 x i64>* %82, align 8, !alias.scope !137
  %84 = bitcast i64* %78 to <2 x i64>*
  store <2 x i64> %80, <2 x i64>* %84, align 8, !alias.scope !140, !noalias !137
  %85 = getelementptr inbounds i64, i64* %78, i64 2
  %86 = bitcast i64* %85 to <2 x i64>*
  store <2 x i64> %83, <2 x i64>* %86, align 8, !alias.scope !140, !noalias !137
  %87 = or i64 %53, 12
  %88 = getelementptr i64, i64* %22, i64 %87
  %89 = getelementptr inbounds i64, i64* %27, i64 %87
  %90 = bitcast i64* %88 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 8, !alias.scope !137
  %92 = getelementptr i64, i64* %88, i64 2
  %93 = bitcast i64* %92 to <2 x i64>*
  %94 = load <2 x i64>, <2 x i64>* %93, align 8, !alias.scope !137
  %95 = bitcast i64* %89 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %95, align 8, !alias.scope !140, !noalias !137
  %96 = getelementptr inbounds i64, i64* %89, i64 2
  %97 = bitcast i64* %96 to <2 x i64>*
  store <2 x i64> %94, <2 x i64>* %97, align 8, !alias.scope !140, !noalias !137
  %98 = add i64 %53, 16
  %99 = add i64 %54, -4
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %52, !llvm.loop !142

101:                                              ; preds = %52, %42
  %102 = phi i64 [ 0, %42 ], [ %98, %52 ]
  %103 = icmp eq i64 %48, 0
  br i1 %103, label %120, label %104

104:                                              ; preds = %101, %104
  %105 = phi i64 [ %117, %104 ], [ %102, %101 ]
  %106 = phi i64 [ %118, %104 ], [ %48, %101 ]
  %107 = getelementptr i64, i64* %22, i64 %105
  %108 = getelementptr inbounds i64, i64* %27, i64 %105
  %109 = bitcast i64* %107 to <2 x i64>*
  %110 = load <2 x i64>, <2 x i64>* %109, align 8, !alias.scope !137
  %111 = getelementptr i64, i64* %107, i64 2
  %112 = bitcast i64* %111 to <2 x i64>*
  %113 = load <2 x i64>, <2 x i64>* %112, align 8, !alias.scope !137
  %114 = bitcast i64* %108 to <2 x i64>*
  store <2 x i64> %110, <2 x i64>* %114, align 8, !alias.scope !140, !noalias !137
  %115 = getelementptr inbounds i64, i64* %108, i64 2
  %116 = bitcast i64* %115 to <2 x i64>*
  store <2 x i64> %113, <2 x i64>* %116, align 8, !alias.scope !140, !noalias !137
  %117 = add i64 %105, 4
  %118 = add i64 %106, -1
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %104, !llvm.loop !143

120:                                              ; preds = %104, %101
  %121 = icmp eq i64 %24, %43
  br i1 %121, label %163, label %122

122:                                              ; preds = %120, %34, %32
  %123 = phi i64* [ %22, %34 ], [ %22, %32 ], [ %44, %120 ]
  %124 = phi i64 [ 0, %34 ], [ 0, %32 ], [ %43, %120 ]
  %125 = xor i64 %124, -1
  %126 = add nsw i64 %24, %125
  %127 = and i64 %24, 3
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %139, label %129

129:                                              ; preds = %122, %129
  %130 = phi i64* [ %135, %129 ], [ %123, %122 ]
  %131 = phi i64 [ %136, %129 ], [ %124, %122 ]
  %132 = phi i64 [ %137, %129 ], [ %127, %122 ]
  %133 = getelementptr inbounds i64, i64* %27, i64 %131
  %134 = load i64, i64* %130, align 8
  store i64 %134, i64* %133, align 8
  %135 = getelementptr inbounds i64, i64* %130, i64 1
  %136 = add nuw nsw i64 %131, 1
  %137 = add i64 %132, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %129, !llvm.loop !144

139:                                              ; preds = %129, %122
  %140 = phi i64* [ %123, %122 ], [ %135, %129 ]
  %141 = phi i64 [ %124, %122 ], [ %136, %129 ]
  %142 = icmp ult i64 %126, 3
  br i1 %142, label %163, label %143

143:                                              ; preds = %139, %143
  %144 = phi i64* [ %160, %143 ], [ %140, %139 ]
  %145 = phi i64 [ %161, %143 ], [ %141, %139 ]
  %146 = getelementptr inbounds i64, i64* %27, i64 %145
  %147 = load i64, i64* %144, align 8
  store i64 %147, i64* %146, align 8
  %148 = getelementptr inbounds i64, i64* %144, i64 1
  %149 = add nuw nsw i64 %145, 1
  %150 = getelementptr inbounds i64, i64* %27, i64 %149
  %151 = load i64, i64* %148, align 8
  store i64 %151, i64* %150, align 8
  %152 = getelementptr inbounds i64, i64* %144, i64 2
  %153 = add nuw nsw i64 %145, 2
  %154 = getelementptr inbounds i64, i64* %27, i64 %153
  %155 = load i64, i64* %152, align 8
  store i64 %155, i64* %154, align 8
  %156 = getelementptr inbounds i64, i64* %144, i64 3
  %157 = add nuw nsw i64 %145, 3
  %158 = getelementptr inbounds i64, i64* %27, i64 %157
  %159 = load i64, i64* %156, align 8
  store i64 %159, i64* %158, align 8
  %160 = getelementptr inbounds i64, i64* %144, i64 4
  %161 = add nuw nsw i64 %145, 4
  %162 = icmp eq i64 %161, %24
  br i1 %162, label %163, label %143, !llvm.loop !145

163:                                              ; preds = %139, %143, %120, %19
  br i1 %6, label %169, label %164

164:                                              ; preds = %163
  %165 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.143", %"class.absl::inlined_vector_internal::Storage.143"* %0, i64 0, i32 1, i32 0, i32 0
  %166 = bitcast i64** %165 to i8**
  %167 = load i8*, i8** %166, align 8
  tail call void @_ZdlPv(i8* %167) #16
  %168 = load i64, i64* %3, align 8
  br label %169

169:                                              ; preds = %164, %163
  %170 = phi i64 [ %168, %164 ], [ %4, %163 ]
  %171 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.143", %"class.absl::inlined_vector_internal::Storage.143"* %0, i64 0, i32 1, i32 0, i32 0
  %172 = bitcast i64** %171 to i64*
  store i64 %28, i64* %172, align 8
  %173 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.143", %"class.absl::inlined_vector_internal::Storage.143"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %20, i64* %173, align 8
  %174 = or i64 %170, 1
  %175 = add i64 %174, 2
  store i64 %175, i64* %3, align 8
  ret i64* %29
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #15
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #15
  %7 = load i8, i8* %6, align 8, !range !3
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #15
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #15
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #15
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #15
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #15
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #15
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #15
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #15
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #15
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #15
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #16
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #15
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #15
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #16
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #15
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #15
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #4

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #4

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) i32* @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15EmplaceBackSlowIJS3_EEERS3_DpOT_(%"class.absl::inlined_vector_internal::Storage.91"*, i32* dereferenceable(4)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !noalias !146
  %5 = and i64 %4, 1
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 1
  %9 = ptrtoint %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %8 to i64
  br label %19

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = bitcast i32** %11 to i64*
  %13 = load i64, i64* %12, align 8, !noalias !146
  %14 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 1, i32 0, i32 1
  %15 = load i64, i64* %14, align 8, !noalias !146
  %16 = shl i64 %15, 1
  %17 = icmp ugt i64 %16, 4611686018427387903
  br i1 %17, label %18, label %19

18:                                               ; preds = %10
  tail call void @abort() #17
  unreachable

19:                                               ; preds = %7, %10
  %20 = phi i64 [ 20, %7 ], [ %16, %10 ]
  %21 = phi i64 [ %9, %7 ], [ %13, %10 ]
  %22 = inttoptr i64 %21 to i32*
  %23 = inttoptr i64 %21 to i8*
  %24 = lshr i64 %4, 1
  %25 = shl i64 %20, 2
  %26 = tail call i8* @_Znwm(i64 %25) #16
  %27 = bitcast i8* %26 to i32*
  %28 = ptrtoint i8* %26 to i64
  %29 = getelementptr inbounds i32, i32* %27, i64 %24
  %30 = load i32, i32* %1, align 4
  store i32 %30, i32* %29, align 4
  %31 = icmp eq i64 %24, 0
  br i1 %31, label %163, label %32

32:                                               ; preds = %19
  %33 = icmp ult i64 %4, 16
  br i1 %33, label %122, label %34

34:                                               ; preds = %32
  %35 = shl i64 %24, 2
  %36 = getelementptr i8, i8* %26, i64 %35
  %37 = getelementptr i32, i32* %22, i64 %24
  %38 = bitcast i32* %37 to i8*
  %39 = icmp ult i8* %26, %38
  %40 = icmp ugt i8* %36, %23
  %41 = and i1 %39, %40
  br i1 %41, label %122, label %42

42:                                               ; preds = %34
  %43 = and i64 %24, 9223372036854775800
  %44 = getelementptr i32, i32* %22, i64 %43
  %45 = add nsw i64 %43, -8
  %46 = lshr exact i64 %45, 3
  %47 = add nuw nsw i64 %46, 1
  %48 = and i64 %47, 3
  %49 = icmp ult i64 %45, 24
  br i1 %49, label %101, label %50

50:                                               ; preds = %42
  %51 = sub nsw i64 %47, %48
  br label %52

52:                                               ; preds = %52, %50
  %53 = phi i64 [ 0, %50 ], [ %98, %52 ]
  %54 = phi i64 [ %51, %50 ], [ %99, %52 ]
  %55 = getelementptr i32, i32* %22, i64 %53
  %56 = getelementptr inbounds i32, i32* %27, i64 %53
  %57 = bitcast i32* %55 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4, !alias.scope !149
  %59 = getelementptr i32, i32* %55, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 4, !alias.scope !149
  %62 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> %58, <4 x i32>* %62, align 4, !alias.scope !152, !noalias !149
  %63 = getelementptr inbounds i32, i32* %56, i64 4
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> %61, <4 x i32>* %64, align 4, !alias.scope !152, !noalias !149
  %65 = or i64 %53, 8
  %66 = getelementptr i32, i32* %22, i64 %65
  %67 = getelementptr inbounds i32, i32* %27, i64 %65
  %68 = bitcast i32* %66 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4, !alias.scope !149
  %70 = getelementptr i32, i32* %66, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  %72 = load <4 x i32>, <4 x i32>* %71, align 4, !alias.scope !149
  %73 = bitcast i32* %67 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %73, align 4, !alias.scope !152, !noalias !149
  %74 = getelementptr inbounds i32, i32* %67, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %75, align 4, !alias.scope !152, !noalias !149
  %76 = or i64 %53, 16
  %77 = getelementptr i32, i32* %22, i64 %76
  %78 = getelementptr inbounds i32, i32* %27, i64 %76
  %79 = bitcast i32* %77 to <4 x i32>*
  %80 = load <4 x i32>, <4 x i32>* %79, align 4, !alias.scope !149
  %81 = getelementptr i32, i32* %77, i64 4
  %82 = bitcast i32* %81 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 4, !alias.scope !149
  %84 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %80, <4 x i32>* %84, align 4, !alias.scope !152, !noalias !149
  %85 = getelementptr inbounds i32, i32* %78, i64 4
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %83, <4 x i32>* %86, align 4, !alias.scope !152, !noalias !149
  %87 = or i64 %53, 24
  %88 = getelementptr i32, i32* %22, i64 %87
  %89 = getelementptr inbounds i32, i32* %27, i64 %87
  %90 = bitcast i32* %88 to <4 x i32>*
  %91 = load <4 x i32>, <4 x i32>* %90, align 4, !alias.scope !149
  %92 = getelementptr i32, i32* %88, i64 4
  %93 = bitcast i32* %92 to <4 x i32>*
  %94 = load <4 x i32>, <4 x i32>* %93, align 4, !alias.scope !149
  %95 = bitcast i32* %89 to <4 x i32>*
  store <4 x i32> %91, <4 x i32>* %95, align 4, !alias.scope !152, !noalias !149
  %96 = getelementptr inbounds i32, i32* %89, i64 4
  %97 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %97, align 4, !alias.scope !152, !noalias !149
  %98 = add i64 %53, 32
  %99 = add i64 %54, -4
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %52, !llvm.loop !154

101:                                              ; preds = %52, %42
  %102 = phi i64 [ 0, %42 ], [ %98, %52 ]
  %103 = icmp eq i64 %48, 0
  br i1 %103, label %120, label %104

104:                                              ; preds = %101, %104
  %105 = phi i64 [ %117, %104 ], [ %102, %101 ]
  %106 = phi i64 [ %118, %104 ], [ %48, %101 ]
  %107 = getelementptr i32, i32* %22, i64 %105
  %108 = getelementptr inbounds i32, i32* %27, i64 %105
  %109 = bitcast i32* %107 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4, !alias.scope !149
  %111 = getelementptr i32, i32* %107, i64 4
  %112 = bitcast i32* %111 to <4 x i32>*
  %113 = load <4 x i32>, <4 x i32>* %112, align 4, !alias.scope !149
  %114 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %110, <4 x i32>* %114, align 4, !alias.scope !152, !noalias !149
  %115 = getelementptr inbounds i32, i32* %108, i64 4
  %116 = bitcast i32* %115 to <4 x i32>*
  store <4 x i32> %113, <4 x i32>* %116, align 4, !alias.scope !152, !noalias !149
  %117 = add i64 %105, 8
  %118 = add i64 %106, -1
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %104, !llvm.loop !155

120:                                              ; preds = %104, %101
  %121 = icmp eq i64 %24, %43
  br i1 %121, label %163, label %122

122:                                              ; preds = %120, %34, %32
  %123 = phi i32* [ %22, %34 ], [ %22, %32 ], [ %44, %120 ]
  %124 = phi i64 [ 0, %34 ], [ 0, %32 ], [ %43, %120 ]
  %125 = xor i64 %124, -1
  %126 = add nsw i64 %24, %125
  %127 = and i64 %24, 3
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %139, label %129

129:                                              ; preds = %122, %129
  %130 = phi i32* [ %135, %129 ], [ %123, %122 ]
  %131 = phi i64 [ %136, %129 ], [ %124, %122 ]
  %132 = phi i64 [ %137, %129 ], [ %127, %122 ]
  %133 = getelementptr inbounds i32, i32* %27, i64 %131
  %134 = load i32, i32* %130, align 4
  store i32 %134, i32* %133, align 4
  %135 = getelementptr inbounds i32, i32* %130, i64 1
  %136 = add nuw nsw i64 %131, 1
  %137 = add i64 %132, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %129, !llvm.loop !156

139:                                              ; preds = %129, %122
  %140 = phi i32* [ %123, %122 ], [ %135, %129 ]
  %141 = phi i64 [ %124, %122 ], [ %136, %129 ]
  %142 = icmp ult i64 %126, 3
  br i1 %142, label %163, label %143

143:                                              ; preds = %139, %143
  %144 = phi i32* [ %160, %143 ], [ %140, %139 ]
  %145 = phi i64 [ %161, %143 ], [ %141, %139 ]
  %146 = getelementptr inbounds i32, i32* %27, i64 %145
  %147 = load i32, i32* %144, align 4
  store i32 %147, i32* %146, align 4
  %148 = getelementptr inbounds i32, i32* %144, i64 1
  %149 = add nuw nsw i64 %145, 1
  %150 = getelementptr inbounds i32, i32* %27, i64 %149
  %151 = load i32, i32* %148, align 4
  store i32 %151, i32* %150, align 4
  %152 = getelementptr inbounds i32, i32* %144, i64 2
  %153 = add nuw nsw i64 %145, 2
  %154 = getelementptr inbounds i32, i32* %27, i64 %153
  %155 = load i32, i32* %152, align 4
  store i32 %155, i32* %154, align 4
  %156 = getelementptr inbounds i32, i32* %144, i64 3
  %157 = add nuw nsw i64 %145, 3
  %158 = getelementptr inbounds i32, i32* %27, i64 %157
  %159 = load i32, i32* %156, align 4
  store i32 %159, i32* %158, align 4
  %160 = getelementptr inbounds i32, i32* %144, i64 4
  %161 = add nuw nsw i64 %145, 4
  %162 = icmp eq i64 %161, %24
  br i1 %162, label %163, label %143, !llvm.loop !157

163:                                              ; preds = %139, %143, %120, %19
  br i1 %6, label %169, label %164

164:                                              ; preds = %163
  %165 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 1, i32 0, i32 0
  %166 = bitcast i32** %165 to i8**
  %167 = load i8*, i8** %166, align 8
  tail call void @_ZdlPv(i8* %167) #16
  %168 = load i64, i64* %3, align 8
  br label %169

169:                                              ; preds = %164, %163
  %170 = phi i64 [ %168, %164 ], [ %4, %163 ]
  %171 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 1, i32 0, i32 0
  %172 = bitcast i32** %171 to i64*
  store i64 %28, i64* %172, align 8
  %173 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %20, i64* %173, align 8
  %174 = or i64 %170, 1
  %175 = add i64 %174, 2
  store i64 %175, i64* %3, align 8
  ret i32* %29
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) i32* @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15EmplaceBackSlowIJiEEERiDpOT_(%"class.absl::inlined_vector_internal::Storage.98"*, i32* dereferenceable(4)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !noalias !158
  %5 = and i64 %4, 1
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1
  %9 = ptrtoint %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %8 to i64
  br label %19

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = bitcast i32** %11 to i64*
  %13 = load i64, i64* %12, align 8, !noalias !158
  %14 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 1
  %15 = load i64, i64* %14, align 8, !noalias !158
  %16 = shl i64 %15, 1
  %17 = icmp ugt i64 %16, 4611686018427387903
  br i1 %17, label %18, label %19

18:                                               ; preds = %10
  tail call void @abort() #17
  unreachable

19:                                               ; preds = %7, %10
  %20 = phi i64 [ 8, %7 ], [ %16, %10 ]
  %21 = phi i64 [ %9, %7 ], [ %13, %10 ]
  %22 = inttoptr i64 %21 to i32*
  %23 = inttoptr i64 %21 to i8*
  %24 = lshr i64 %4, 1
  %25 = shl i64 %20, 2
  %26 = tail call i8* @_Znwm(i64 %25) #16
  %27 = bitcast i8* %26 to i32*
  %28 = ptrtoint i8* %26 to i64
  %29 = getelementptr inbounds i32, i32* %27, i64 %24
  %30 = load i32, i32* %1, align 4
  store i32 %30, i32* %29, align 4
  %31 = icmp eq i64 %24, 0
  br i1 %31, label %163, label %32

32:                                               ; preds = %19
  %33 = icmp ult i64 %4, 16
  br i1 %33, label %122, label %34

34:                                               ; preds = %32
  %35 = shl i64 %24, 2
  %36 = getelementptr i8, i8* %26, i64 %35
  %37 = getelementptr i32, i32* %22, i64 %24
  %38 = bitcast i32* %37 to i8*
  %39 = icmp ult i8* %26, %38
  %40 = icmp ugt i8* %36, %23
  %41 = and i1 %39, %40
  br i1 %41, label %122, label %42

42:                                               ; preds = %34
  %43 = and i64 %24, 9223372036854775800
  %44 = getelementptr i32, i32* %22, i64 %43
  %45 = add nsw i64 %43, -8
  %46 = lshr exact i64 %45, 3
  %47 = add nuw nsw i64 %46, 1
  %48 = and i64 %47, 3
  %49 = icmp ult i64 %45, 24
  br i1 %49, label %101, label %50

50:                                               ; preds = %42
  %51 = sub nsw i64 %47, %48
  br label %52

52:                                               ; preds = %52, %50
  %53 = phi i64 [ 0, %50 ], [ %98, %52 ]
  %54 = phi i64 [ %51, %50 ], [ %99, %52 ]
  %55 = getelementptr i32, i32* %22, i64 %53
  %56 = getelementptr inbounds i32, i32* %27, i64 %53
  %57 = bitcast i32* %55 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4, !alias.scope !161
  %59 = getelementptr i32, i32* %55, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 4, !alias.scope !161
  %62 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> %58, <4 x i32>* %62, align 4, !alias.scope !164, !noalias !161
  %63 = getelementptr inbounds i32, i32* %56, i64 4
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> %61, <4 x i32>* %64, align 4, !alias.scope !164, !noalias !161
  %65 = or i64 %53, 8
  %66 = getelementptr i32, i32* %22, i64 %65
  %67 = getelementptr inbounds i32, i32* %27, i64 %65
  %68 = bitcast i32* %66 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4, !alias.scope !161
  %70 = getelementptr i32, i32* %66, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  %72 = load <4 x i32>, <4 x i32>* %71, align 4, !alias.scope !161
  %73 = bitcast i32* %67 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %73, align 4, !alias.scope !164, !noalias !161
  %74 = getelementptr inbounds i32, i32* %67, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %75, align 4, !alias.scope !164, !noalias !161
  %76 = or i64 %53, 16
  %77 = getelementptr i32, i32* %22, i64 %76
  %78 = getelementptr inbounds i32, i32* %27, i64 %76
  %79 = bitcast i32* %77 to <4 x i32>*
  %80 = load <4 x i32>, <4 x i32>* %79, align 4, !alias.scope !161
  %81 = getelementptr i32, i32* %77, i64 4
  %82 = bitcast i32* %81 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 4, !alias.scope !161
  %84 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %80, <4 x i32>* %84, align 4, !alias.scope !164, !noalias !161
  %85 = getelementptr inbounds i32, i32* %78, i64 4
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %83, <4 x i32>* %86, align 4, !alias.scope !164, !noalias !161
  %87 = or i64 %53, 24
  %88 = getelementptr i32, i32* %22, i64 %87
  %89 = getelementptr inbounds i32, i32* %27, i64 %87
  %90 = bitcast i32* %88 to <4 x i32>*
  %91 = load <4 x i32>, <4 x i32>* %90, align 4, !alias.scope !161
  %92 = getelementptr i32, i32* %88, i64 4
  %93 = bitcast i32* %92 to <4 x i32>*
  %94 = load <4 x i32>, <4 x i32>* %93, align 4, !alias.scope !161
  %95 = bitcast i32* %89 to <4 x i32>*
  store <4 x i32> %91, <4 x i32>* %95, align 4, !alias.scope !164, !noalias !161
  %96 = getelementptr inbounds i32, i32* %89, i64 4
  %97 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %97, align 4, !alias.scope !164, !noalias !161
  %98 = add i64 %53, 32
  %99 = add i64 %54, -4
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %52, !llvm.loop !166

101:                                              ; preds = %52, %42
  %102 = phi i64 [ 0, %42 ], [ %98, %52 ]
  %103 = icmp eq i64 %48, 0
  br i1 %103, label %120, label %104

104:                                              ; preds = %101, %104
  %105 = phi i64 [ %117, %104 ], [ %102, %101 ]
  %106 = phi i64 [ %118, %104 ], [ %48, %101 ]
  %107 = getelementptr i32, i32* %22, i64 %105
  %108 = getelementptr inbounds i32, i32* %27, i64 %105
  %109 = bitcast i32* %107 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4, !alias.scope !161
  %111 = getelementptr i32, i32* %107, i64 4
  %112 = bitcast i32* %111 to <4 x i32>*
  %113 = load <4 x i32>, <4 x i32>* %112, align 4, !alias.scope !161
  %114 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %110, <4 x i32>* %114, align 4, !alias.scope !164, !noalias !161
  %115 = getelementptr inbounds i32, i32* %108, i64 4
  %116 = bitcast i32* %115 to <4 x i32>*
  store <4 x i32> %113, <4 x i32>* %116, align 4, !alias.scope !164, !noalias !161
  %117 = add i64 %105, 8
  %118 = add i64 %106, -1
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %104, !llvm.loop !167

120:                                              ; preds = %104, %101
  %121 = icmp eq i64 %24, %43
  br i1 %121, label %163, label %122

122:                                              ; preds = %120, %34, %32
  %123 = phi i32* [ %22, %34 ], [ %22, %32 ], [ %44, %120 ]
  %124 = phi i64 [ 0, %34 ], [ 0, %32 ], [ %43, %120 ]
  %125 = xor i64 %124, -1
  %126 = add nsw i64 %24, %125
  %127 = and i64 %24, 3
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %139, label %129

129:                                              ; preds = %122, %129
  %130 = phi i32* [ %135, %129 ], [ %123, %122 ]
  %131 = phi i64 [ %136, %129 ], [ %124, %122 ]
  %132 = phi i64 [ %137, %129 ], [ %127, %122 ]
  %133 = getelementptr inbounds i32, i32* %27, i64 %131
  %134 = load i32, i32* %130, align 4
  store i32 %134, i32* %133, align 4
  %135 = getelementptr inbounds i32, i32* %130, i64 1
  %136 = add nuw nsw i64 %131, 1
  %137 = add i64 %132, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %129, !llvm.loop !168

139:                                              ; preds = %129, %122
  %140 = phi i32* [ %123, %122 ], [ %135, %129 ]
  %141 = phi i64 [ %124, %122 ], [ %136, %129 ]
  %142 = icmp ult i64 %126, 3
  br i1 %142, label %163, label %143

143:                                              ; preds = %139, %143
  %144 = phi i32* [ %160, %143 ], [ %140, %139 ]
  %145 = phi i64 [ %161, %143 ], [ %141, %139 ]
  %146 = getelementptr inbounds i32, i32* %27, i64 %145
  %147 = load i32, i32* %144, align 4
  store i32 %147, i32* %146, align 4
  %148 = getelementptr inbounds i32, i32* %144, i64 1
  %149 = add nuw nsw i64 %145, 1
  %150 = getelementptr inbounds i32, i32* %27, i64 %149
  %151 = load i32, i32* %148, align 4
  store i32 %151, i32* %150, align 4
  %152 = getelementptr inbounds i32, i32* %144, i64 2
  %153 = add nuw nsw i64 %145, 2
  %154 = getelementptr inbounds i32, i32* %27, i64 %153
  %155 = load i32, i32* %152, align 4
  store i32 %155, i32* %154, align 4
  %156 = getelementptr inbounds i32, i32* %144, i64 3
  %157 = add nuw nsw i64 %145, 3
  %158 = getelementptr inbounds i32, i32* %27, i64 %157
  %159 = load i32, i32* %156, align 4
  store i32 %159, i32* %158, align 4
  %160 = getelementptr inbounds i32, i32* %144, i64 4
  %161 = add nuw nsw i64 %145, 4
  %162 = icmp eq i64 %161, %24
  br i1 %162, label %163, label %143, !llvm.loop !169

163:                                              ; preds = %139, %143, %120, %19
  br i1 %6, label %169, label %164

164:                                              ; preds = %163
  %165 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 0
  %166 = bitcast i32** %165 to i8**
  %167 = load i8*, i8** %166, align 8
  tail call void @_ZdlPv(i8* %167) #16
  %168 = load i64, i64* %3, align 8
  br label %169

169:                                              ; preds = %164, %163
  %170 = phi i64 [ %168, %164 ], [ %4, %163 ]
  %171 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 0
  %172 = bitcast i32** %171 to i64*
  store i64 %28, i64* %172, align 8
  %173 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %20, i64* %173, align 8
  %174 = or i64 %170, 1
  %175 = add i64 %174, 2
  store i64 %175, i64* %3, align 8
  ret i32* %29
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE6AssignINS0_16CopyValueAdapterIS4_EEEEvT_m(%"class.absl::inlined_vector_internal::Storage.98"*, i32*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i32* %1 to i8*
  %5 = bitcast i32* %1 to i8*
  %6 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i64, i64* %6, align 8, !noalias !170
  %8 = and i64 %7, 1
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %16, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = bitcast i32** %11 to i64*
  %13 = load i64, i64* %12, align 8, !noalias !170
  %14 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 1
  %15 = load i64, i64* %14, align 8, !noalias !170
  br label %19

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1
  %18 = ptrtoint %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %17 to i64
  br label %19

19:                                               ; preds = %10, %16
  %20 = phi i64 [ %18, %16 ], [ %13, %10 ]
  %21 = phi i64 [ 4, %16 ], [ %15, %10 ]
  %22 = lshr i64 %7, 1
  %23 = icmp ult i64 %21, %2
  br i1 %23, label %24, label %35

24:                                               ; preds = %19
  %25 = shl i64 %21, 1
  %26 = icmp ult i64 %25, %2
  %27 = select i1 %26, i64 %2, i64 %25
  %28 = icmp ugt i64 %27, 4611686018427387903
  br i1 %28, label %29, label %30

29:                                               ; preds = %24
  tail call void @abort() #17
  unreachable

30:                                               ; preds = %24
  %31 = shl i64 %27, 2
  %32 = tail call i8* @_Znwm(i64 %31) #16
  %33 = bitcast i8* %32 to i32*
  %34 = ptrtoint i8* %32 to i64
  br label %135

35:                                               ; preds = %19
  %36 = icmp ult i64 %22, %2
  %37 = inttoptr i64 %20 to i32*
  %38 = inttoptr i64 %20 to i8*
  %39 = getelementptr inbounds i32, i32* %37, i64 %22
  %40 = call i64 @llvm.usub.sat.i64(i64 %2, i64 %22)
  %41 = select i1 %36, i32* %39, i32* null
  %42 = select i1 %36, i64 %22, i64 %2
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %133, label %44

44:                                               ; preds = %35
  %45 = icmp ult i64 %42, 8
  br i1 %45, label %101, label %46

46:                                               ; preds = %44
  %47 = getelementptr i32, i32* %37, i64 %42
  %48 = getelementptr i8, i8* %5, i64 1
  %49 = icmp ugt i8* %48, %38
  %50 = icmp ugt i32* %47, %1
  %51 = and i1 %49, %50
  br i1 %51, label %101, label %52

52:                                               ; preds = %46
  %53 = and i64 %42, 9223372036854775800
  %54 = add nsw i64 %53, -8
  %55 = lshr exact i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 1
  %58 = icmp eq i64 %54, 0
  br i1 %58, label %86, label %59

59:                                               ; preds = %52
  %60 = sub nuw nsw i64 %56, %57
  %61 = load i32, i32* %1, align 4, !alias.scope !173
  %62 = insertelement <4 x i32> undef, i32 %61, i32 0
  %63 = shufflevector <4 x i32> %62, <4 x i32> undef, <4 x i32> zeroinitializer
  %64 = insertelement <4 x i32> undef, i32 %61, i32 0
  %65 = shufflevector <4 x i32> %64, <4 x i32> undef, <4 x i32> zeroinitializer
  %66 = load i32, i32* %1, align 4, !alias.scope !173
  %67 = insertelement <4 x i32> undef, i32 %66, i32 0
  %68 = shufflevector <4 x i32> %67, <4 x i32> undef, <4 x i32> zeroinitializer
  %69 = insertelement <4 x i32> undef, i32 %66, i32 0
  %70 = shufflevector <4 x i32> %69, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %71

71:                                               ; preds = %71, %59
  %72 = phi i64 [ 0, %59 ], [ %83, %71 ]
  %73 = phi i64 [ %60, %59 ], [ %84, %71 ]
  %74 = getelementptr inbounds i32, i32* %37, i64 %72
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %63, <4 x i32>* %75, align 4, !alias.scope !176, !noalias !173
  %76 = getelementptr inbounds i32, i32* %74, i64 4
  %77 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %77, align 4, !alias.scope !176, !noalias !173
  %78 = or i64 %72, 8
  %79 = getelementptr inbounds i32, i32* %37, i64 %78
  %80 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> %68, <4 x i32>* %80, align 4, !alias.scope !176, !noalias !173
  %81 = getelementptr inbounds i32, i32* %79, i64 4
  %82 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %82, align 4, !alias.scope !176, !noalias !173
  %83 = add i64 %72, 16
  %84 = add i64 %73, -2
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %86, label %71, !llvm.loop !178

86:                                               ; preds = %71, %52
  %87 = phi i64 [ 0, %52 ], [ %83, %71 ]
  %88 = icmp eq i64 %57, 0
  br i1 %88, label %99, label %89

89:                                               ; preds = %86
  %90 = getelementptr inbounds i32, i32* %37, i64 %87
  %91 = load i32, i32* %1, align 4, !alias.scope !173
  %92 = insertelement <4 x i32> undef, i32 %91, i32 0
  %93 = shufflevector <4 x i32> %92, <4 x i32> undef, <4 x i32> zeroinitializer
  %94 = insertelement <4 x i32> undef, i32 %91, i32 0
  %95 = shufflevector <4 x i32> %94, <4 x i32> undef, <4 x i32> zeroinitializer
  %96 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %96, align 4, !alias.scope !176, !noalias !173
  %97 = getelementptr inbounds i32, i32* %90, i64 4
  %98 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> %95, <4 x i32>* %98, align 4, !alias.scope !176, !noalias !173
  br label %99

99:                                               ; preds = %86, %89
  %100 = icmp eq i64 %42, %53
  br i1 %100, label %133, label %101

101:                                              ; preds = %99, %46, %44
  %102 = phi i64 [ 0, %46 ], [ 0, %44 ], [ %53, %99 ]
  %103 = xor i64 %102, -1
  %104 = add nsw i64 %42, %103
  %105 = and i64 %42, 3
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %115, label %107

107:                                              ; preds = %101, %107
  %108 = phi i64 [ %112, %107 ], [ %102, %101 ]
  %109 = phi i64 [ %113, %107 ], [ %105, %101 ]
  %110 = getelementptr inbounds i32, i32* %37, i64 %108
  %111 = load i32, i32* %1, align 4
  store i32 %111, i32* %110, align 4
  %112 = add nuw i64 %108, 1
  %113 = add i64 %109, -1
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %107, !llvm.loop !179

115:                                              ; preds = %107, %101
  %116 = phi i64 [ %102, %101 ], [ %112, %107 ]
  %117 = icmp ult i64 %104, 3
  br i1 %117, label %133, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %131, %118 ], [ %116, %115 ]
  %120 = getelementptr inbounds i32, i32* %37, i64 %119
  %121 = load i32, i32* %1, align 4
  store i32 %121, i32* %120, align 4
  %122 = add nuw i64 %119, 1
  %123 = getelementptr inbounds i32, i32* %37, i64 %122
  %124 = load i32, i32* %1, align 4
  store i32 %124, i32* %123, align 4
  %125 = add nuw i64 %119, 2
  %126 = getelementptr inbounds i32, i32* %37, i64 %125
  %127 = load i32, i32* %1, align 4
  store i32 %127, i32* %126, align 4
  %128 = add nuw i64 %119, 3
  %129 = getelementptr inbounds i32, i32* %37, i64 %128
  %130 = load i32, i32* %1, align 4
  store i32 %130, i32* %129, align 4
  %131 = add nuw i64 %119, 4
  %132 = icmp eq i64 %131, %42
  br i1 %132, label %133, label %118, !llvm.loop !180

133:                                              ; preds = %115, %118, %99, %35
  %134 = icmp eq i64 %40, 0
  br i1 %134, label %231, label %135

135:                                              ; preds = %30, %133
  %136 = phi i64 [ %2, %30 ], [ %40, %133 ]
  %137 = phi i32* [ %33, %30 ], [ %41, %133 ]
  %138 = phi i64 [ %27, %30 ], [ 0, %133 ]
  %139 = phi i64 [ %34, %30 ], [ 0, %133 ]
  %140 = icmp ult i64 %136, 8
  br i1 %140, label %197, label %141

141:                                              ; preds = %135
  %142 = bitcast i32* %137 to i8*
  %143 = getelementptr i32, i32* %137, i64 %136
  %144 = getelementptr i8, i8* %4, i64 1
  %145 = icmp ugt i8* %144, %142
  %146 = icmp ugt i32* %143, %1
  %147 = and i1 %145, %146
  br i1 %147, label %197, label %148

148:                                              ; preds = %141
  %149 = and i64 %136, -8
  %150 = add i64 %149, -8
  %151 = lshr exact i64 %150, 3
  %152 = add nuw nsw i64 %151, 1
  %153 = and i64 %152, 1
  %154 = icmp eq i64 %150, 0
  br i1 %154, label %182, label %155

155:                                              ; preds = %148
  %156 = sub nuw nsw i64 %152, %153
  %157 = load i32, i32* %1, align 4, !alias.scope !181
  %158 = insertelement <4 x i32> undef, i32 %157, i32 0
  %159 = shufflevector <4 x i32> %158, <4 x i32> undef, <4 x i32> zeroinitializer
  %160 = insertelement <4 x i32> undef, i32 %157, i32 0
  %161 = shufflevector <4 x i32> %160, <4 x i32> undef, <4 x i32> zeroinitializer
  %162 = load i32, i32* %1, align 4, !alias.scope !181
  %163 = insertelement <4 x i32> undef, i32 %162, i32 0
  %164 = shufflevector <4 x i32> %163, <4 x i32> undef, <4 x i32> zeroinitializer
  %165 = insertelement <4 x i32> undef, i32 %162, i32 0
  %166 = shufflevector <4 x i32> %165, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %167

167:                                              ; preds = %167, %155
  %168 = phi i64 [ 0, %155 ], [ %179, %167 ]
  %169 = phi i64 [ %156, %155 ], [ %180, %167 ]
  %170 = getelementptr inbounds i32, i32* %137, i64 %168
  %171 = bitcast i32* %170 to <4 x i32>*
  store <4 x i32> %159, <4 x i32>* %171, align 4, !alias.scope !184, !noalias !181
  %172 = getelementptr inbounds i32, i32* %170, i64 4
  %173 = bitcast i32* %172 to <4 x i32>*
  store <4 x i32> %161, <4 x i32>* %173, align 4, !alias.scope !184, !noalias !181
  %174 = or i64 %168, 8
  %175 = getelementptr inbounds i32, i32* %137, i64 %174
  %176 = bitcast i32* %175 to <4 x i32>*
  store <4 x i32> %164, <4 x i32>* %176, align 4, !alias.scope !184, !noalias !181
  %177 = getelementptr inbounds i32, i32* %175, i64 4
  %178 = bitcast i32* %177 to <4 x i32>*
  store <4 x i32> %166, <4 x i32>* %178, align 4, !alias.scope !184, !noalias !181
  %179 = add i64 %168, 16
  %180 = add i64 %169, -2
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %182, label %167, !llvm.loop !186

182:                                              ; preds = %167, %148
  %183 = phi i64 [ 0, %148 ], [ %179, %167 ]
  %184 = icmp eq i64 %153, 0
  br i1 %184, label %195, label %185

185:                                              ; preds = %182
  %186 = getelementptr inbounds i32, i32* %137, i64 %183
  %187 = load i32, i32* %1, align 4, !alias.scope !181
  %188 = insertelement <4 x i32> undef, i32 %187, i32 0
  %189 = shufflevector <4 x i32> %188, <4 x i32> undef, <4 x i32> zeroinitializer
  %190 = insertelement <4 x i32> undef, i32 %187, i32 0
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> zeroinitializer
  %192 = bitcast i32* %186 to <4 x i32>*
  store <4 x i32> %189, <4 x i32>* %192, align 4, !alias.scope !184, !noalias !181
  %193 = getelementptr inbounds i32, i32* %186, i64 4
  %194 = bitcast i32* %193 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %194, align 4, !alias.scope !184, !noalias !181
  br label %195

195:                                              ; preds = %182, %185
  %196 = icmp eq i64 %136, %149
  br i1 %196, label %229, label %197

197:                                              ; preds = %195, %141, %135
  %198 = phi i64 [ 0, %141 ], [ 0, %135 ], [ %149, %195 ]
  %199 = xor i64 %198, -1
  %200 = add i64 %136, %199
  %201 = and i64 %136, 3
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %211, label %203

203:                                              ; preds = %197, %203
  %204 = phi i64 [ %208, %203 ], [ %198, %197 ]
  %205 = phi i64 [ %209, %203 ], [ %201, %197 ]
  %206 = getelementptr inbounds i32, i32* %137, i64 %204
  %207 = load i32, i32* %1, align 4
  store i32 %207, i32* %206, align 4
  %208 = add nuw i64 %204, 1
  %209 = add i64 %205, -1
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %211, label %203, !llvm.loop !187

211:                                              ; preds = %203, %197
  %212 = phi i64 [ %198, %197 ], [ %208, %203 ]
  %213 = icmp ult i64 %200, 3
  br i1 %213, label %229, label %214

214:                                              ; preds = %211, %214
  %215 = phi i64 [ %227, %214 ], [ %212, %211 ]
  %216 = getelementptr inbounds i32, i32* %137, i64 %215
  %217 = load i32, i32* %1, align 4
  store i32 %217, i32* %216, align 4
  %218 = add nuw i64 %215, 1
  %219 = getelementptr inbounds i32, i32* %137, i64 %218
  %220 = load i32, i32* %1, align 4
  store i32 %220, i32* %219, align 4
  %221 = add nuw i64 %215, 2
  %222 = getelementptr inbounds i32, i32* %137, i64 %221
  %223 = load i32, i32* %1, align 4
  store i32 %223, i32* %222, align 4
  %224 = add nuw i64 %215, 3
  %225 = getelementptr inbounds i32, i32* %137, i64 %224
  %226 = load i32, i32* %1, align 4
  store i32 %226, i32* %225, align 4
  %227 = add nuw i64 %215, 4
  %228 = icmp eq i64 %227, %136
  br i1 %228, label %229, label %214, !llvm.loop !188

229:                                              ; preds = %211, %214, %195
  %230 = icmp eq i64 %139, 0
  br i1 %230, label %231, label %233

231:                                              ; preds = %133, %229
  %232 = load i64, i64* %6, align 8
  br label %248

233:                                              ; preds = %229
  %234 = load i64, i64* %6, align 8
  %235 = and i64 %234, 1
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %242, label %237

237:                                              ; preds = %233
  %238 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 0
  %239 = bitcast i32** %238 to i8**
  %240 = load i8*, i8** %239, align 8
  tail call void @_ZdlPv(i8* %240) #16
  %241 = load i64, i64* %6, align 8
  br label %242

242:                                              ; preds = %233, %237
  %243 = phi i64 [ %234, %233 ], [ %241, %237 ]
  %244 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 0
  %245 = bitcast i32** %244 to i64*
  store i64 %139, i64* %245, align 8
  %246 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %138, i64* %246, align 8
  %247 = or i64 %243, 1
  store i64 %247, i64* %6, align 8
  br label %248

248:                                              ; preds = %242, %231
  %249 = phi i64 [ %232, %231 ], [ %247, %242 ]
  %250 = shl i64 %2, 1
  %251 = and i64 %249, 1
  %252 = or i64 %251, %250
  store i64 %252, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN6webrtc23FrameDependencyTemplateENS_9allocatorIS2_EEE22__construct_one_at_endIJRKS2_EEEvDpOT_(%"class.std::__1::vector.130"*, %"struct.webrtc::FrameDependencyTemplate"* dereferenceable(104)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.130", %"class.std::__1::vector.130"* %0, i64 0, i32 0, i32 1
  %4 = load %"struct.webrtc::FrameDependencyTemplate"*, %"struct.webrtc::FrameDependencyTemplate"** %3, align 8
  %5 = bitcast %"struct.webrtc::FrameDependencyTemplate"* %1 to i64*
  %6 = bitcast %"struct.webrtc::FrameDependencyTemplate"* %4 to i64*
  %7 = load i64, i64* %5, align 8
  store i64 %7, i64* %6, align 8
  %8 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 2
  %9 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 2
  %10 = getelementptr inbounds %"class.absl::InlinedVector.90", %"class.absl::InlinedVector.90"* %9, i64 0, i32 0
  %11 = getelementptr inbounds %"class.absl::InlinedVector.90", %"class.absl::InlinedVector.90"* %8, i64 0, i32 0
  %12 = getelementptr inbounds %"class.absl::InlinedVector.90", %"class.absl::InlinedVector.90"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %12, align 8
  %13 = getelementptr inbounds %"class.absl::InlinedVector.90", %"class.absl::InlinedVector.90"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = icmp ult i64 %14, 2
  br i1 %15, label %25, label %16

16:                                               ; preds = %2
  %17 = and i64 %14, 1
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %24

19:                                               ; preds = %16
  store i64 %14, i64* %12, align 8
  %20 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 2, i32 0, i32 1
  %21 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 2, i32 0, i32 1
  %22 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %21 to i8*
  %23 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 8 %23, i64 40, i1 false) #15
  br label %25

24:                                               ; preds = %16
  tail call void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE8InitFromERKS7_(%"class.absl::inlined_vector_internal::Storage.91"* %11, %"class.absl::inlined_vector_internal::Storage.91"* dereferenceable(48) %10) #15
  br label %25

25:                                               ; preds = %24, %19, %2
  %26 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 3
  %27 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 3
  %28 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %27, i64 0, i32 0
  %29 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %26, i64 0, i32 0
  %30 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %30, align 8
  %31 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %27, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = icmp ult i64 %32, 2
  br i1 %33, label %43, label %34

34:                                               ; preds = %25
  %35 = and i64 %32, 1
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %37, label %42

37:                                               ; preds = %34
  store i64 %32, i64* %30, align 8
  %38 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 3, i32 0, i32 1
  %39 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 3, i32 0, i32 1
  %40 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %39 to i8*
  %41 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %38 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 16, i1 false) #15
  br label %43

42:                                               ; preds = %34
  tail call void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE8InitFromERKS5_(%"class.absl::inlined_vector_internal::Storage.98"* %29, %"class.absl::inlined_vector_internal::Storage.98"* dereferenceable(24) %28) #15
  br label %43

43:                                               ; preds = %42, %37, %25
  %44 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 4
  %45 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 4
  %46 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %45, i64 0, i32 0
  %47 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %44, i64 0, i32 0
  %48 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %44, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %48, align 8
  %49 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %45, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load i64, i64* %49, align 8
  %51 = icmp ult i64 %50, 2
  br i1 %51, label %61, label %52

52:                                               ; preds = %43
  %53 = and i64 %50, 1
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %60

55:                                               ; preds = %52
  store i64 %50, i64* %48, align 8
  %56 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 4, i32 0, i32 1
  %57 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 0, i32 4, i32 0, i32 1
  %58 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %57 to i8*
  %59 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %56 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* align 8 %59, i64 16, i1 false) #15
  br label %61

60:                                               ; preds = %52
  tail call void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE8InitFromERKS5_(%"class.absl::inlined_vector_internal::Storage.98"* %47, %"class.absl::inlined_vector_internal::Storage.98"* dereferenceable(24) %46) #15
  br label %61

61:                                               ; preds = %43, %55, %60
  %62 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %4, i64 1
  %63 = ptrtoint %"struct.webrtc::FrameDependencyTemplate"* %62 to i64
  %64 = bitcast %"struct.webrtc::FrameDependencyTemplate"** %3 to i64*
  store i64 %63, i64* %64, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN6webrtc23FrameDependencyTemplateENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector.130"*, %"struct.webrtc::FrameDependencyTemplate"* dereferenceable(104)) local_unnamed_addr #12 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.130", %"class.std::__1::vector.130"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"struct.webrtc::FrameDependencyTemplate"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.130"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 104
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 177372539170284150
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.130"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #17
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.130", %"class.std::__1::vector.130"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"struct.webrtc::FrameDependencyTemplate"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 104
  %20 = icmp ult i64 %19, 88686269585142075
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 177372539170284150, %14 ]
  %28 = mul i64 %27, 104
  %29 = tail call i8* @_Znwm(i64 %28) #16
  %30 = bitcast i8* %29 to %"struct.webrtc::FrameDependencyTemplate"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"struct.webrtc::FrameDependencyTemplate"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %33, i64 %9
  %35 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %33, i64 %32
  %36 = ptrtoint %"struct.webrtc::FrameDependencyTemplate"* %35 to i64
  %37 = bitcast %"struct.webrtc::FrameDependencyTemplate"* %1 to i64*
  %38 = bitcast %"struct.webrtc::FrameDependencyTemplate"* %34 to i64*
  %39 = load i64, i64* %37, align 8
  store i64 %39, i64* %38, align 8
  %40 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %33, i64 %9, i32 2
  %41 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 2
  %42 = getelementptr inbounds %"class.absl::InlinedVector.90", %"class.absl::InlinedVector.90"* %41, i64 0, i32 0
  %43 = getelementptr inbounds %"class.absl::InlinedVector.90", %"class.absl::InlinedVector.90"* %40, i64 0, i32 0
  %44 = getelementptr inbounds %"class.absl::InlinedVector.90", %"class.absl::InlinedVector.90"* %40, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %44, align 8
  %45 = getelementptr inbounds %"class.absl::InlinedVector.90", %"class.absl::InlinedVector.90"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load i64, i64* %45, align 8
  %47 = icmp ult i64 %46, 2
  br i1 %47, label %57, label %48

48:                                               ; preds = %31
  %49 = and i64 %46, 1
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %56

51:                                               ; preds = %48
  store i64 %46, i64* %44, align 8
  %52 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 2, i32 0, i32 1
  %53 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %33, i64 %9, i32 2, i32 0, i32 1
  %54 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %53 to i8*
  %55 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %52 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 40, i1 false) #15
  br label %57

56:                                               ; preds = %48
  tail call void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE8InitFromERKS7_(%"class.absl::inlined_vector_internal::Storage.91"* %43, %"class.absl::inlined_vector_internal::Storage.91"* dereferenceable(48) %42) #15
  br label %57

57:                                               ; preds = %56, %51, %31
  %58 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %33, i64 %9, i32 3
  %59 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 3
  %60 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %59, i64 0, i32 0
  %61 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %58, i64 0, i32 0
  %62 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %58, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %62, align 8
  %63 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %59, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = icmp ult i64 %64, 2
  br i1 %65, label %75, label %66

66:                                               ; preds = %57
  %67 = and i64 %64, 1
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %74

69:                                               ; preds = %66
  store i64 %64, i64* %62, align 8
  %70 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 3, i32 0, i32 1
  %71 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %33, i64 %9, i32 3, i32 0, i32 1
  %72 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %71 to i8*
  %73 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %70 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %72, i8* align 8 %73, i64 16, i1 false) #15
  br label %75

74:                                               ; preds = %66
  tail call void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE8InitFromERKS5_(%"class.absl::inlined_vector_internal::Storage.98"* %61, %"class.absl::inlined_vector_internal::Storage.98"* dereferenceable(24) %60) #15
  br label %75

75:                                               ; preds = %74, %69, %57
  %76 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %33, i64 %9, i32 4
  %77 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 4
  %78 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %77, i64 0, i32 0
  %79 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %76, i64 0, i32 0
  %80 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %76, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %80, align 8
  %81 = getelementptr inbounds %"class.absl::InlinedVector.97", %"class.absl::InlinedVector.97"* %77, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load i64, i64* %81, align 8
  %83 = icmp ult i64 %82, 2
  br i1 %83, label %93, label %84

84:                                               ; preds = %75
  %85 = and i64 %82, 1
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %92

87:                                               ; preds = %84
  store i64 %82, i64* %80, align 8
  %88 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %1, i64 0, i32 4, i32 0, i32 1
  %89 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %33, i64 %9, i32 4, i32 0, i32 1
  %90 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %89 to i8*
  %91 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %88 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %90, i8* align 8 %91, i64 16, i1 false) #15
  br label %93

92:                                               ; preds = %84
  tail call void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE8InitFromERKS5_(%"class.absl::inlined_vector_internal::Storage.98"* %79, %"class.absl::inlined_vector_internal::Storage.98"* dereferenceable(24) %78) #15
  br label %93

93:                                               ; preds = %75, %87, %92
  %94 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %34, i64 1
  %95 = ptrtoint %"struct.webrtc::FrameDependencyTemplate"* %94 to i64
  %96 = getelementptr inbounds %"class.std::__1::vector.130", %"class.std::__1::vector.130"* %0, i64 0, i32 0, i32 0
  %97 = load %"struct.webrtc::FrameDependencyTemplate"*, %"struct.webrtc::FrameDependencyTemplate"** %96, align 8
  %98 = load %"struct.webrtc::FrameDependencyTemplate"*, %"struct.webrtc::FrameDependencyTemplate"** %3, align 8
  %99 = icmp eq %"struct.webrtc::FrameDependencyTemplate"* %98, %97
  br i1 %99, label %100, label %102

100:                                              ; preds = %93
  %101 = ptrtoint %"struct.webrtc::FrameDependencyTemplate"* %97 to i64
  br label %135

102:                                              ; preds = %93, %102
  %103 = phi %"struct.webrtc::FrameDependencyTemplate"* [ %105, %102 ], [ %34, %93 ]
  %104 = phi %"struct.webrtc::FrameDependencyTemplate"* [ %106, %102 ], [ %98, %93 ]
  %105 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %103, i64 -1
  %106 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %104, i64 -1
  %107 = bitcast %"struct.webrtc::FrameDependencyTemplate"* %106 to i64*
  %108 = bitcast %"struct.webrtc::FrameDependencyTemplate"* %105 to i64*
  %109 = load i64, i64* %107, align 8
  store i64 %109, i64* %108, align 8
  %110 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %103, i64 -1, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %110, align 8
  %111 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %104, i64 -1, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %112 = load i64, i64* %111, align 8
  store i64 %112, i64* %110, align 8
  %113 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %104, i64 -1, i32 2, i32 0, i32 1
  %114 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %103, i64 -1, i32 2, i32 0, i32 1
  %115 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %114 to i8*
  %116 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %113 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %115, i8* align 8 %116, i64 40, i1 false) #15
  store i64 0, i64* %111, align 8
  %117 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %103, i64 -1, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %117, align 8
  %118 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %104, i64 -1, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %117, align 8
  %120 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %104, i64 -1, i32 3, i32 0, i32 1
  %121 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %103, i64 -1, i32 3, i32 0, i32 1
  %122 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %121 to i8*
  %123 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %120 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %122, i8* align 8 %123, i64 16, i1 false) #15
  store i64 0, i64* %118, align 8
  %124 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %103, i64 -1, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 0, i64* %124, align 8
  %125 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %104, i64 -1, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %126 = load i64, i64* %125, align 8
  store i64 %126, i64* %124, align 8
  %127 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %104, i64 -1, i32 4, i32 0, i32 1
  %128 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %103, i64 -1, i32 4, i32 0, i32 1
  %129 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %128 to i8*
  %130 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %127 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %129, i8* align 8 %130, i64 16, i1 false) #15
  store i64 0, i64* %125, align 8
  %131 = icmp eq %"struct.webrtc::FrameDependencyTemplate"* %106, %97
  br i1 %131, label %132, label %102

132:                                              ; preds = %102
  %133 = load i64, i64* %6, align 8
  %134 = load %"struct.webrtc::FrameDependencyTemplate"*, %"struct.webrtc::FrameDependencyTemplate"** %3, align 8
  br label %135

135:                                              ; preds = %100, %132
  %136 = phi %"struct.webrtc::FrameDependencyTemplate"* [ %97, %100 ], [ %134, %132 ]
  %137 = phi %"struct.webrtc::FrameDependencyTemplate"* [ %34, %100 ], [ %105, %132 ]
  %138 = phi i64 [ %101, %100 ], [ %133, %132 ]
  %139 = ptrtoint %"struct.webrtc::FrameDependencyTemplate"* %137 to i64
  store i64 %139, i64* %6, align 8
  store i64 %95, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %140 = inttoptr i64 %138 to %"struct.webrtc::FrameDependencyTemplate"*
  %141 = icmp eq %"struct.webrtc::FrameDependencyTemplate"* %136, %140
  br i1 %141, label %173, label %142

142:                                              ; preds = %135, %171
  %143 = phi %"struct.webrtc::FrameDependencyTemplate"* [ %144, %171 ], [ %136, %135 ]
  %144 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %143, i64 -1
  %145 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %143, i64 -1, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %146 = load i64, i64* %145, align 8
  %147 = and i64 %146, 1
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %153, label %149

149:                                              ; preds = %142
  %150 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %143, i64 -1, i32 4, i32 0, i32 1, i32 0, i32 0
  %151 = bitcast i32** %150 to i8**
  %152 = load i8*, i8** %151, align 8
  tail call void @_ZdlPv(i8* %152) #16
  br label %153

153:                                              ; preds = %149, %142
  %154 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %143, i64 -1, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0
  %155 = load i64, i64* %154, align 8
  %156 = and i64 %155, 1
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %162, label %158

158:                                              ; preds = %153
  %159 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %143, i64 -1, i32 3, i32 0, i32 1, i32 0, i32 0
  %160 = bitcast i32** %159 to i8**
  %161 = load i8*, i8** %160, align 8
  tail call void @_ZdlPv(i8* %161) #16
  br label %162

162:                                              ; preds = %158, %153
  %163 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %143, i64 -1, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %164 = load i64, i64* %163, align 8
  %165 = and i64 %164, 1
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %171, label %167

167:                                              ; preds = %162
  %168 = getelementptr inbounds %"struct.webrtc::FrameDependencyTemplate", %"struct.webrtc::FrameDependencyTemplate"* %143, i64 -1, i32 2, i32 0, i32 1, i32 0, i32 0
  %169 = bitcast i32** %168 to i8**
  %170 = load i8*, i8** %169, align 8
  tail call void @_ZdlPv(i8* %170) #16
  br label %171

171:                                              ; preds = %167, %162
  %172 = icmp eq %"struct.webrtc::FrameDependencyTemplate"* %144, %140
  br i1 %172, label %173, label %142

173:                                              ; preds = %171, %135
  %174 = icmp eq i64 %138, 0
  br i1 %174, label %177, label %175

175:                                              ; preds = %173
  %176 = inttoptr i64 %138 to i8*
  tail call void @_ZdlPv(i8* %176) #16
  br label %177

177:                                              ; preds = %173, %175
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE8InitFromERKS7_(%"class.absl::inlined_vector_internal::Storage.91"*, %"class.absl::inlined_vector_internal::Storage.91"* dereferenceable(48)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = lshr i64 %4, 1
  %6 = and i64 %4, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 1
  %10 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %9 to i32*
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %1, i64 0, i32 1
  %12 = bitcast %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %11 to i32*
  br label %27

13:                                               ; preds = %2
  %14 = icmp ugt i64 %5, 20
  %15 = select i1 %14, i64 %5, i64 20
  %16 = icmp ugt i64 %15, 4611686018427387903
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  tail call void @abort() #17
  unreachable

18:                                               ; preds = %13
  %19 = shl i64 %15, 2
  %20 = tail call i8* @_Znwm(i64 %19) #16
  %21 = bitcast i8* %20 to i32*
  %22 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 1, i32 0, i32 0
  %23 = bitcast i32** %22 to i8**
  store i8* %20, i8** %23, align 8
  %24 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %15, i64* %24, align 8
  %25 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %1, i64 0, i32 1, i32 0, i32 0
  %26 = load i32*, i32** %25, align 8
  br label %27

27:                                               ; preds = %18, %8
  %28 = phi i32* [ %26, %18 ], [ %12, %8 ]
  %29 = phi i32* [ %21, %18 ], [ %10, %8 ]
  %30 = bitcast i32* %29 to i8*
  %31 = bitcast i32* %28 to i8*
  %32 = shl i64 %5, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 %32, i1 false) #15
  %33 = load i64, i64* %3, align 8
  %34 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %33, i64* %34, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE8InitFromERKS5_(%"class.absl::inlined_vector_internal::Storage.98"*, %"class.absl::inlined_vector_internal::Storage.98"* dereferenceable(24)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = lshr i64 %4, 1
  %6 = and i64 %4, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %13

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1
  %10 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %9 to i32*
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %1, i64 0, i32 1
  %12 = bitcast %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %11 to i32*
  br label %27

13:                                               ; preds = %2
  %14 = icmp ugt i64 %5, 8
  %15 = select i1 %14, i64 %5, i64 8
  %16 = icmp ugt i64 %15, 4611686018427387903
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  tail call void @abort() #17
  unreachable

18:                                               ; preds = %13
  %19 = shl i64 %15, 2
  %20 = tail call i8* @_Znwm(i64 %19) #16
  %21 = bitcast i8* %20 to i32*
  %22 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 0
  %23 = bitcast i32** %22 to i8**
  store i8* %20, i8** %23, align 8
  %24 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %15, i64* %24, align 8
  %25 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %1, i64 0, i32 1, i32 0, i32 0
  %26 = load i32*, i32** %25, align 8
  br label %27

27:                                               ; preds = %18, %8
  %28 = phi i32* [ %26, %18 ], [ %12, %8 ]
  %29 = phi i32* [ %21, %18 ], [ %10, %8 ]
  %30 = bitcast i32* %29 to i8*
  %31 = bitcast i32* %28 to i8*
  %32 = shl i64 %5, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %31, i64 %32, i1 false) #15
  %33 = load i64, i64* %3, align 8
  %34 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i64 %33, i64* %34, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) i32* @_ZN4absl23inlined_vector_internal7StorageIiLm10ENSt3__19allocatorIiEEE15EmplaceBackSlowIJRKiEEERiDpOT_(%"class.absl::inlined_vector_internal::Storage.122"*, i32* dereferenceable(4)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.122", %"class.absl::inlined_vector_internal::Storage.122"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !noalias !189
  %5 = and i64 %4, 1
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.122", %"class.absl::inlined_vector_internal::Storage.122"* %0, i64 0, i32 1
  %9 = ptrtoint %"union.absl::inlined_vector_internal::Storage<int, 10, std::__1::allocator<int> >::Data"* %8 to i64
  br label %19

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.122", %"class.absl::inlined_vector_internal::Storage.122"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = bitcast i32** %11 to i64*
  %13 = load i64, i64* %12, align 8, !noalias !189
  %14 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.122", %"class.absl::inlined_vector_internal::Storage.122"* %0, i64 0, i32 1, i32 0, i32 1
  %15 = load i64, i64* %14, align 8, !noalias !189
  %16 = shl i64 %15, 1
  %17 = icmp ugt i64 %16, 4611686018427387903
  br i1 %17, label %18, label %19

18:                                               ; preds = %10
  tail call void @abort() #17
  unreachable

19:                                               ; preds = %7, %10
  %20 = phi i64 [ 20, %7 ], [ %16, %10 ]
  %21 = phi i64 [ %9, %7 ], [ %13, %10 ]
  %22 = inttoptr i64 %21 to i32*
  %23 = inttoptr i64 %21 to i8*
  %24 = lshr i64 %4, 1
  %25 = shl i64 %20, 2
  %26 = tail call i8* @_Znwm(i64 %25) #16
  %27 = bitcast i8* %26 to i32*
  %28 = ptrtoint i8* %26 to i64
  %29 = getelementptr inbounds i32, i32* %27, i64 %24
  %30 = load i32, i32* %1, align 4
  store i32 %30, i32* %29, align 4
  %31 = icmp eq i64 %24, 0
  br i1 %31, label %163, label %32

32:                                               ; preds = %19
  %33 = icmp ult i64 %4, 16
  br i1 %33, label %122, label %34

34:                                               ; preds = %32
  %35 = shl i64 %24, 2
  %36 = getelementptr i8, i8* %26, i64 %35
  %37 = getelementptr i32, i32* %22, i64 %24
  %38 = bitcast i32* %37 to i8*
  %39 = icmp ult i8* %26, %38
  %40 = icmp ugt i8* %36, %23
  %41 = and i1 %39, %40
  br i1 %41, label %122, label %42

42:                                               ; preds = %34
  %43 = and i64 %24, 9223372036854775800
  %44 = getelementptr i32, i32* %22, i64 %43
  %45 = add nsw i64 %43, -8
  %46 = lshr exact i64 %45, 3
  %47 = add nuw nsw i64 %46, 1
  %48 = and i64 %47, 3
  %49 = icmp ult i64 %45, 24
  br i1 %49, label %101, label %50

50:                                               ; preds = %42
  %51 = sub nsw i64 %47, %48
  br label %52

52:                                               ; preds = %52, %50
  %53 = phi i64 [ 0, %50 ], [ %98, %52 ]
  %54 = phi i64 [ %51, %50 ], [ %99, %52 ]
  %55 = getelementptr i32, i32* %22, i64 %53
  %56 = getelementptr inbounds i32, i32* %27, i64 %53
  %57 = bitcast i32* %55 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4, !alias.scope !192
  %59 = getelementptr i32, i32* %55, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 4, !alias.scope !192
  %62 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> %58, <4 x i32>* %62, align 4, !alias.scope !195, !noalias !192
  %63 = getelementptr inbounds i32, i32* %56, i64 4
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> %61, <4 x i32>* %64, align 4, !alias.scope !195, !noalias !192
  %65 = or i64 %53, 8
  %66 = getelementptr i32, i32* %22, i64 %65
  %67 = getelementptr inbounds i32, i32* %27, i64 %65
  %68 = bitcast i32* %66 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4, !alias.scope !192
  %70 = getelementptr i32, i32* %66, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  %72 = load <4 x i32>, <4 x i32>* %71, align 4, !alias.scope !192
  %73 = bitcast i32* %67 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %73, align 4, !alias.scope !195, !noalias !192
  %74 = getelementptr inbounds i32, i32* %67, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %75, align 4, !alias.scope !195, !noalias !192
  %76 = or i64 %53, 16
  %77 = getelementptr i32, i32* %22, i64 %76
  %78 = getelementptr inbounds i32, i32* %27, i64 %76
  %79 = bitcast i32* %77 to <4 x i32>*
  %80 = load <4 x i32>, <4 x i32>* %79, align 4, !alias.scope !192
  %81 = getelementptr i32, i32* %77, i64 4
  %82 = bitcast i32* %81 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 4, !alias.scope !192
  %84 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %80, <4 x i32>* %84, align 4, !alias.scope !195, !noalias !192
  %85 = getelementptr inbounds i32, i32* %78, i64 4
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %83, <4 x i32>* %86, align 4, !alias.scope !195, !noalias !192
  %87 = or i64 %53, 24
  %88 = getelementptr i32, i32* %22, i64 %87
  %89 = getelementptr inbounds i32, i32* %27, i64 %87
  %90 = bitcast i32* %88 to <4 x i32>*
  %91 = load <4 x i32>, <4 x i32>* %90, align 4, !alias.scope !192
  %92 = getelementptr i32, i32* %88, i64 4
  %93 = bitcast i32* %92 to <4 x i32>*
  %94 = load <4 x i32>, <4 x i32>* %93, align 4, !alias.scope !192
  %95 = bitcast i32* %89 to <4 x i32>*
  store <4 x i32> %91, <4 x i32>* %95, align 4, !alias.scope !195, !noalias !192
  %96 = getelementptr inbounds i32, i32* %89, i64 4
  %97 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %97, align 4, !alias.scope !195, !noalias !192
  %98 = add i64 %53, 32
  %99 = add i64 %54, -4
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %52, !llvm.loop !197

101:                                              ; preds = %52, %42
  %102 = phi i64 [ 0, %42 ], [ %98, %52 ]
  %103 = icmp eq i64 %48, 0
  br i1 %103, label %120, label %104

104:                                              ; preds = %101, %104
  %105 = phi i64 [ %117, %104 ], [ %102, %101 ]
  %106 = phi i64 [ %118, %104 ], [ %48, %101 ]
  %107 = getelementptr i32, i32* %22, i64 %105
  %108 = getelementptr inbounds i32, i32* %27, i64 %105
  %109 = bitcast i32* %107 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4, !alias.scope !192
  %111 = getelementptr i32, i32* %107, i64 4
  %112 = bitcast i32* %111 to <4 x i32>*
  %113 = load <4 x i32>, <4 x i32>* %112, align 4, !alias.scope !192
  %114 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %110, <4 x i32>* %114, align 4, !alias.scope !195, !noalias !192
  %115 = getelementptr inbounds i32, i32* %108, i64 4
  %116 = bitcast i32* %115 to <4 x i32>*
  store <4 x i32> %113, <4 x i32>* %116, align 4, !alias.scope !195, !noalias !192
  %117 = add i64 %105, 8
  %118 = add i64 %106, -1
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %104, !llvm.loop !198

120:                                              ; preds = %104, %101
  %121 = icmp eq i64 %24, %43
  br i1 %121, label %163, label %122

122:                                              ; preds = %120, %34, %32
  %123 = phi i32* [ %22, %34 ], [ %22, %32 ], [ %44, %120 ]
  %124 = phi i64 [ 0, %34 ], [ 0, %32 ], [ %43, %120 ]
  %125 = xor i64 %124, -1
  %126 = add nsw i64 %24, %125
  %127 = and i64 %24, 3
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %139, label %129

129:                                              ; preds = %122, %129
  %130 = phi i32* [ %135, %129 ], [ %123, %122 ]
  %131 = phi i64 [ %136, %129 ], [ %124, %122 ]
  %132 = phi i64 [ %137, %129 ], [ %127, %122 ]
  %133 = getelementptr inbounds i32, i32* %27, i64 %131
  %134 = load i32, i32* %130, align 4
  store i32 %134, i32* %133, align 4
  %135 = getelementptr inbounds i32, i32* %130, i64 1
  %136 = add nuw nsw i64 %131, 1
  %137 = add i64 %132, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %129, !llvm.loop !199

139:                                              ; preds = %129, %122
  %140 = phi i32* [ %123, %122 ], [ %135, %129 ]
  %141 = phi i64 [ %124, %122 ], [ %136, %129 ]
  %142 = icmp ult i64 %126, 3
  br i1 %142, label %163, label %143

143:                                              ; preds = %139, %143
  %144 = phi i32* [ %160, %143 ], [ %140, %139 ]
  %145 = phi i64 [ %161, %143 ], [ %141, %139 ]
  %146 = getelementptr inbounds i32, i32* %27, i64 %145
  %147 = load i32, i32* %144, align 4
  store i32 %147, i32* %146, align 4
  %148 = getelementptr inbounds i32, i32* %144, i64 1
  %149 = add nuw nsw i64 %145, 1
  %150 = getelementptr inbounds i32, i32* %27, i64 %149
  %151 = load i32, i32* %148, align 4
  store i32 %151, i32* %150, align 4
  %152 = getelementptr inbounds i32, i32* %144, i64 2
  %153 = add nuw nsw i64 %145, 2
  %154 = getelementptr inbounds i32, i32* %27, i64 %153
  %155 = load i32, i32* %152, align 4
  store i32 %155, i32* %154, align 4
  %156 = getelementptr inbounds i32, i32* %144, i64 3
  %157 = add nuw nsw i64 %145, 3
  %158 = getelementptr inbounds i32, i32* %27, i64 %157
  %159 = load i32, i32* %156, align 4
  store i32 %159, i32* %158, align 4
  %160 = getelementptr inbounds i32, i32* %144, i64 4
  %161 = add nuw nsw i64 %145, 4
  %162 = icmp eq i64 %161, %24
  br i1 %162, label %163, label %143, !llvm.loop !200

163:                                              ; preds = %139, %143, %120, %19
  br i1 %6, label %169, label %164

164:                                              ; preds = %163
  %165 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.122", %"class.absl::inlined_vector_internal::Storage.122"* %0, i64 0, i32 1, i32 0, i32 0
  %166 = bitcast i32** %165 to i8**
  %167 = load i8*, i8** %166, align 8
  tail call void @_ZdlPv(i8* %167) #16
  %168 = load i64, i64* %3, align 8
  br label %169

169:                                              ; preds = %164, %163
  %170 = phi i64 [ %168, %164 ], [ %4, %163 ]
  %171 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.122", %"class.absl::inlined_vector_internal::Storage.122"* %0, i64 0, i32 1, i32 0, i32 0
  %172 = bitcast i32** %171 to i64*
  store i64 %28, i64* %172, align 8
  %173 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.122", %"class.absl::inlined_vector_internal::Storage.122"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %20, i64* %173, align 8
  %174 = or i64 %170, 1
  %175 = add i64 %174, 2
  store i64 %175, i64* %3, align 8
  ret i32* %29
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.webrtc::RenderResolution"* @_ZN4absl23inlined_vector_internal7StorageIN6webrtc16RenderResolutionELm4ENSt3__19allocatorIS3_EEE15EmplaceBackSlowIJRKtSA_EEERS3_DpOT_(%"class.absl::inlined_vector_internal::Storage.124"*, i16* dereferenceable(2), i16* dereferenceable(2)) local_unnamed_addr #6 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.124", %"class.absl::inlined_vector_internal::Storage.124"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %5 = load i64, i64* %4, align 8, !noalias !201
  %6 = and i64 %5, 1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.124", %"class.absl::inlined_vector_internal::Storage.124"* %0, i64 0, i32 1
  %10 = ptrtoint %"union.absl::inlined_vector_internal::Storage<webrtc::RenderResolution, 4, std::__1::allocator<webrtc::RenderResolution> >::Data"* %9 to i64
  br label %20

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.124", %"class.absl::inlined_vector_internal::Storage.124"* %0, i64 0, i32 1, i32 0, i32 0
  %13 = bitcast %"class.webrtc::RenderResolution"** %12 to i64*
  %14 = load i64, i64* %13, align 8, !noalias !201
  %15 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.124", %"class.absl::inlined_vector_internal::Storage.124"* %0, i64 0, i32 1, i32 0, i32 1
  %16 = load i64, i64* %15, align 8, !noalias !201
  %17 = shl i64 %16, 1
  %18 = icmp ugt i64 %17, 2305843009213693951
  br i1 %18, label %19, label %20

19:                                               ; preds = %11
  tail call void @abort() #17
  unreachable

20:                                               ; preds = %8, %11
  %21 = phi i64 [ 8, %8 ], [ %17, %11 ]
  %22 = phi i64 [ %10, %8 ], [ %14, %11 ]
  %23 = lshr i64 %5, 1
  %24 = shl i64 %21, 3
  %25 = tail call i8* @_Znwm(i64 %24) #16
  %26 = bitcast i8* %25 to %"class.webrtc::RenderResolution"*
  %27 = ptrtoint i8* %25 to i64
  %28 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %26, i64 %23
  %29 = load i16, i16* %1, align 2
  %30 = zext i16 %29 to i32
  %31 = load i16, i16* %2, align 2
  %32 = zext i16 %31 to i32
  %33 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %28, i64 0, i32 0
  store i32 %30, i32* %33, align 4
  %34 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %26, i64 %23, i32 1
  store i32 %32, i32* %34, align 4
  %35 = icmp eq i64 %23, 0
  br i1 %35, label %119, label %36

36:                                               ; preds = %20
  %37 = inttoptr i64 %22 to %"class.webrtc::RenderResolution"*
  %38 = inttoptr i64 %22 to i64*
  %39 = add nsw i64 %23, -1
  %40 = and i64 %23, 7
  %41 = icmp ult i64 %39, 7
  br i1 %41, label %101, label %42

42:                                               ; preds = %36
  %43 = sub nsw i64 %23, %40
  br label %44

44:                                               ; preds = %44, %42
  %45 = phi %"class.webrtc::RenderResolution"* [ %37, %42 ], [ %94, %44 ]
  %46 = phi i64* [ %38, %42 ], [ %96, %44 ]
  %47 = phi i64 [ 0, %42 ], [ %95, %44 ]
  %48 = phi i64 [ %43, %42 ], [ %97, %44 ]
  %49 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %26, i64 %47
  %50 = bitcast %"class.webrtc::RenderResolution"* %49 to i64*
  %51 = load i64, i64* %46, align 4
  store i64 %51, i64* %50, align 4
  %52 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %45, i64 1
  %53 = or i64 %47, 1
  %54 = bitcast %"class.webrtc::RenderResolution"* %52 to i64*
  %55 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %26, i64 %53
  %56 = bitcast %"class.webrtc::RenderResolution"* %55 to i64*
  %57 = load i64, i64* %54, align 4
  store i64 %57, i64* %56, align 4
  %58 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %45, i64 2
  %59 = or i64 %47, 2
  %60 = bitcast %"class.webrtc::RenderResolution"* %58 to i64*
  %61 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %26, i64 %59
  %62 = bitcast %"class.webrtc::RenderResolution"* %61 to i64*
  %63 = load i64, i64* %60, align 4
  store i64 %63, i64* %62, align 4
  %64 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %45, i64 3
  %65 = or i64 %47, 3
  %66 = bitcast %"class.webrtc::RenderResolution"* %64 to i64*
  %67 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %26, i64 %65
  %68 = bitcast %"class.webrtc::RenderResolution"* %67 to i64*
  %69 = load i64, i64* %66, align 4
  store i64 %69, i64* %68, align 4
  %70 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %45, i64 4
  %71 = or i64 %47, 4
  %72 = bitcast %"class.webrtc::RenderResolution"* %70 to i64*
  %73 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %26, i64 %71
  %74 = bitcast %"class.webrtc::RenderResolution"* %73 to i64*
  %75 = load i64, i64* %72, align 4
  store i64 %75, i64* %74, align 4
  %76 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %45, i64 5
  %77 = or i64 %47, 5
  %78 = bitcast %"class.webrtc::RenderResolution"* %76 to i64*
  %79 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %26, i64 %77
  %80 = bitcast %"class.webrtc::RenderResolution"* %79 to i64*
  %81 = load i64, i64* %78, align 4
  store i64 %81, i64* %80, align 4
  %82 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %45, i64 6
  %83 = or i64 %47, 6
  %84 = bitcast %"class.webrtc::RenderResolution"* %82 to i64*
  %85 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %26, i64 %83
  %86 = bitcast %"class.webrtc::RenderResolution"* %85 to i64*
  %87 = load i64, i64* %84, align 4
  store i64 %87, i64* %86, align 4
  %88 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %45, i64 7
  %89 = or i64 %47, 7
  %90 = bitcast %"class.webrtc::RenderResolution"* %88 to i64*
  %91 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %26, i64 %89
  %92 = bitcast %"class.webrtc::RenderResolution"* %91 to i64*
  %93 = load i64, i64* %90, align 4
  store i64 %93, i64* %92, align 4
  %94 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %45, i64 8
  %95 = add nuw nsw i64 %47, 8
  %96 = bitcast %"class.webrtc::RenderResolution"* %94 to i64*
  %97 = add i64 %48, -8
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %44

99:                                               ; preds = %44
  %100 = bitcast %"class.webrtc::RenderResolution"* %94 to i64*
  br label %101

101:                                              ; preds = %99, %36
  %102 = phi %"class.webrtc::RenderResolution"* [ %37, %36 ], [ %94, %99 ]
  %103 = phi i64* [ %38, %36 ], [ %100, %99 ]
  %104 = phi i64 [ 0, %36 ], [ %95, %99 ]
  %105 = icmp eq i64 %40, 0
  br i1 %105, label %119, label %106

106:                                              ; preds = %101, %106
  %107 = phi %"class.webrtc::RenderResolution"* [ %114, %106 ], [ %102, %101 ]
  %108 = phi i64* [ %116, %106 ], [ %103, %101 ]
  %109 = phi i64 [ %115, %106 ], [ %104, %101 ]
  %110 = phi i64 [ %117, %106 ], [ %40, %101 ]
  %111 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %26, i64 %109
  %112 = bitcast %"class.webrtc::RenderResolution"* %111 to i64*
  %113 = load i64, i64* %108, align 4
  store i64 %113, i64* %112, align 4
  %114 = getelementptr inbounds %"class.webrtc::RenderResolution", %"class.webrtc::RenderResolution"* %107, i64 1
  %115 = add nuw nsw i64 %109, 1
  %116 = bitcast %"class.webrtc::RenderResolution"* %114 to i64*
  %117 = add i64 %110, -1
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %119, label %106, !llvm.loop !204

119:                                              ; preds = %101, %106, %20
  br i1 %7, label %125, label %120

120:                                              ; preds = %119
  %121 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.124", %"class.absl::inlined_vector_internal::Storage.124"* %0, i64 0, i32 1, i32 0, i32 0
  %122 = bitcast %"class.webrtc::RenderResolution"** %121 to i8**
  %123 = load i8*, i8** %122, align 8
  tail call void @_ZdlPv(i8* %123) #16
  %124 = load i64, i64* %4, align 8
  br label %125

125:                                              ; preds = %120, %119
  %126 = phi i64 [ %124, %120 ], [ %5, %119 ]
  %127 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.124", %"class.absl::inlined_vector_internal::Storage.124"* %0, i64 0, i32 1, i32 0, i32 0
  %128 = bitcast %"class.webrtc::RenderResolution"** %127 to i64*
  store i64 %27, i64* %128, align 8
  %129 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.124", %"class.absl::inlined_vector_internal::Storage.124"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %21, i64* %129, align 8
  %130 = or i64 %126, 1
  %131 = add i64 %130, 2
  store i64 %131, i64* %4, align 8
  ret %"class.webrtc::RenderResolution"* %28
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) i32* @_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15EmplaceBackSlowIJRKS3_EEERS3_DpOT_(%"class.absl::inlined_vector_internal::Storage.91"*, i32* dereferenceable(4)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !noalias !205
  %5 = and i64 %4, 1
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 1
  %9 = ptrtoint %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data"* %8 to i64
  br label %19

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 1, i32 0, i32 0
  %12 = bitcast i32** %11 to i64*
  %13 = load i64, i64* %12, align 8, !noalias !205
  %14 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 1, i32 0, i32 1
  %15 = load i64, i64* %14, align 8, !noalias !205
  %16 = shl i64 %15, 1
  %17 = icmp ugt i64 %16, 4611686018427387903
  br i1 %17, label %18, label %19

18:                                               ; preds = %10
  tail call void @abort() #17
  unreachable

19:                                               ; preds = %7, %10
  %20 = phi i64 [ 20, %7 ], [ %16, %10 ]
  %21 = phi i64 [ %9, %7 ], [ %13, %10 ]
  %22 = inttoptr i64 %21 to i32*
  %23 = inttoptr i64 %21 to i8*
  %24 = lshr i64 %4, 1
  %25 = shl i64 %20, 2
  %26 = tail call i8* @_Znwm(i64 %25) #16
  %27 = bitcast i8* %26 to i32*
  %28 = ptrtoint i8* %26 to i64
  %29 = getelementptr inbounds i32, i32* %27, i64 %24
  %30 = load i32, i32* %1, align 4
  store i32 %30, i32* %29, align 4
  %31 = icmp eq i64 %24, 0
  br i1 %31, label %163, label %32

32:                                               ; preds = %19
  %33 = icmp ult i64 %4, 16
  br i1 %33, label %122, label %34

34:                                               ; preds = %32
  %35 = shl i64 %24, 2
  %36 = getelementptr i8, i8* %26, i64 %35
  %37 = getelementptr i32, i32* %22, i64 %24
  %38 = bitcast i32* %37 to i8*
  %39 = icmp ult i8* %26, %38
  %40 = icmp ugt i8* %36, %23
  %41 = and i1 %39, %40
  br i1 %41, label %122, label %42

42:                                               ; preds = %34
  %43 = and i64 %24, 9223372036854775800
  %44 = getelementptr i32, i32* %22, i64 %43
  %45 = add nsw i64 %43, -8
  %46 = lshr exact i64 %45, 3
  %47 = add nuw nsw i64 %46, 1
  %48 = and i64 %47, 3
  %49 = icmp ult i64 %45, 24
  br i1 %49, label %101, label %50

50:                                               ; preds = %42
  %51 = sub nsw i64 %47, %48
  br label %52

52:                                               ; preds = %52, %50
  %53 = phi i64 [ 0, %50 ], [ %98, %52 ]
  %54 = phi i64 [ %51, %50 ], [ %99, %52 ]
  %55 = getelementptr i32, i32* %22, i64 %53
  %56 = getelementptr inbounds i32, i32* %27, i64 %53
  %57 = bitcast i32* %55 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4, !alias.scope !208
  %59 = getelementptr i32, i32* %55, i64 4
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 4, !alias.scope !208
  %62 = bitcast i32* %56 to <4 x i32>*
  store <4 x i32> %58, <4 x i32>* %62, align 4, !alias.scope !211, !noalias !208
  %63 = getelementptr inbounds i32, i32* %56, i64 4
  %64 = bitcast i32* %63 to <4 x i32>*
  store <4 x i32> %61, <4 x i32>* %64, align 4, !alias.scope !211, !noalias !208
  %65 = or i64 %53, 8
  %66 = getelementptr i32, i32* %22, i64 %65
  %67 = getelementptr inbounds i32, i32* %27, i64 %65
  %68 = bitcast i32* %66 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4, !alias.scope !208
  %70 = getelementptr i32, i32* %66, i64 4
  %71 = bitcast i32* %70 to <4 x i32>*
  %72 = load <4 x i32>, <4 x i32>* %71, align 4, !alias.scope !208
  %73 = bitcast i32* %67 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %73, align 4, !alias.scope !211, !noalias !208
  %74 = getelementptr inbounds i32, i32* %67, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> %72, <4 x i32>* %75, align 4, !alias.scope !211, !noalias !208
  %76 = or i64 %53, 16
  %77 = getelementptr i32, i32* %22, i64 %76
  %78 = getelementptr inbounds i32, i32* %27, i64 %76
  %79 = bitcast i32* %77 to <4 x i32>*
  %80 = load <4 x i32>, <4 x i32>* %79, align 4, !alias.scope !208
  %81 = getelementptr i32, i32* %77, i64 4
  %82 = bitcast i32* %81 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 4, !alias.scope !208
  %84 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %80, <4 x i32>* %84, align 4, !alias.scope !211, !noalias !208
  %85 = getelementptr inbounds i32, i32* %78, i64 4
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %83, <4 x i32>* %86, align 4, !alias.scope !211, !noalias !208
  %87 = or i64 %53, 24
  %88 = getelementptr i32, i32* %22, i64 %87
  %89 = getelementptr inbounds i32, i32* %27, i64 %87
  %90 = bitcast i32* %88 to <4 x i32>*
  %91 = load <4 x i32>, <4 x i32>* %90, align 4, !alias.scope !208
  %92 = getelementptr i32, i32* %88, i64 4
  %93 = bitcast i32* %92 to <4 x i32>*
  %94 = load <4 x i32>, <4 x i32>* %93, align 4, !alias.scope !208
  %95 = bitcast i32* %89 to <4 x i32>*
  store <4 x i32> %91, <4 x i32>* %95, align 4, !alias.scope !211, !noalias !208
  %96 = getelementptr inbounds i32, i32* %89, i64 4
  %97 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %97, align 4, !alias.scope !211, !noalias !208
  %98 = add i64 %53, 32
  %99 = add i64 %54, -4
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %52, !llvm.loop !213

101:                                              ; preds = %52, %42
  %102 = phi i64 [ 0, %42 ], [ %98, %52 ]
  %103 = icmp eq i64 %48, 0
  br i1 %103, label %120, label %104

104:                                              ; preds = %101, %104
  %105 = phi i64 [ %117, %104 ], [ %102, %101 ]
  %106 = phi i64 [ %118, %104 ], [ %48, %101 ]
  %107 = getelementptr i32, i32* %22, i64 %105
  %108 = getelementptr inbounds i32, i32* %27, i64 %105
  %109 = bitcast i32* %107 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4, !alias.scope !208
  %111 = getelementptr i32, i32* %107, i64 4
  %112 = bitcast i32* %111 to <4 x i32>*
  %113 = load <4 x i32>, <4 x i32>* %112, align 4, !alias.scope !208
  %114 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %110, <4 x i32>* %114, align 4, !alias.scope !211, !noalias !208
  %115 = getelementptr inbounds i32, i32* %108, i64 4
  %116 = bitcast i32* %115 to <4 x i32>*
  store <4 x i32> %113, <4 x i32>* %116, align 4, !alias.scope !211, !noalias !208
  %117 = add i64 %105, 8
  %118 = add i64 %106, -1
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %104, !llvm.loop !214

120:                                              ; preds = %104, %101
  %121 = icmp eq i64 %24, %43
  br i1 %121, label %163, label %122

122:                                              ; preds = %120, %34, %32
  %123 = phi i32* [ %22, %34 ], [ %22, %32 ], [ %44, %120 ]
  %124 = phi i64 [ 0, %34 ], [ 0, %32 ], [ %43, %120 ]
  %125 = xor i64 %124, -1
  %126 = add nsw i64 %24, %125
  %127 = and i64 %24, 3
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %139, label %129

129:                                              ; preds = %122, %129
  %130 = phi i32* [ %135, %129 ], [ %123, %122 ]
  %131 = phi i64 [ %136, %129 ], [ %124, %122 ]
  %132 = phi i64 [ %137, %129 ], [ %127, %122 ]
  %133 = getelementptr inbounds i32, i32* %27, i64 %131
  %134 = load i32, i32* %130, align 4
  store i32 %134, i32* %133, align 4
  %135 = getelementptr inbounds i32, i32* %130, i64 1
  %136 = add nuw nsw i64 %131, 1
  %137 = add i64 %132, -1
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %129, !llvm.loop !215

139:                                              ; preds = %129, %122
  %140 = phi i32* [ %123, %122 ], [ %135, %129 ]
  %141 = phi i64 [ %124, %122 ], [ %136, %129 ]
  %142 = icmp ult i64 %126, 3
  br i1 %142, label %163, label %143

143:                                              ; preds = %139, %143
  %144 = phi i32* [ %160, %143 ], [ %140, %139 ]
  %145 = phi i64 [ %161, %143 ], [ %141, %139 ]
  %146 = getelementptr inbounds i32, i32* %27, i64 %145
  %147 = load i32, i32* %144, align 4
  store i32 %147, i32* %146, align 4
  %148 = getelementptr inbounds i32, i32* %144, i64 1
  %149 = add nuw nsw i64 %145, 1
  %150 = getelementptr inbounds i32, i32* %27, i64 %149
  %151 = load i32, i32* %148, align 4
  store i32 %151, i32* %150, align 4
  %152 = getelementptr inbounds i32, i32* %144, i64 2
  %153 = add nuw nsw i64 %145, 2
  %154 = getelementptr inbounds i32, i32* %27, i64 %153
  %155 = load i32, i32* %152, align 4
  store i32 %155, i32* %154, align 4
  %156 = getelementptr inbounds i32, i32* %144, i64 3
  %157 = add nuw nsw i64 %145, 3
  %158 = getelementptr inbounds i32, i32* %27, i64 %157
  %159 = load i32, i32* %156, align 4
  store i32 %159, i32* %158, align 4
  %160 = getelementptr inbounds i32, i32* %144, i64 4
  %161 = add nuw nsw i64 %145, 4
  %162 = icmp eq i64 %161, %24
  br i1 %162, label %163, label %143, !llvm.loop !216

163:                                              ; preds = %139, %143, %120, %19
  br i1 %6, label %169, label %164

164:                                              ; preds = %163
  %165 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 1, i32 0, i32 0
  %166 = bitcast i32** %165 to i8**
  %167 = load i8*, i8** %166, align 8
  tail call void @_ZdlPv(i8* %167) #16
  %168 = load i64, i64* %3, align 8
  br label %169

169:                                              ; preds = %164, %163
  %170 = phi i64 [ %168, %164 ], [ %4, %163 ]
  %171 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 1, i32 0, i32 0
  %172 = bitcast i32** %171 to i64*
  store i64 %28, i64* %172, align 8
  %173 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.91", %"class.absl::inlined_vector_internal::Storage.91"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %20, i64* %173, align 8
  %174 = or i64 %170, 1
  %175 = add i64 %174, 2
  store i64 %175, i64* %3, align 8
  ret i32* %29
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_5arrayIlLm8EEENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.std::__1::array.15"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.std::__1::array.15"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 6
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.std::__1::array.15"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"struct.std::__1::array.15", %"struct.std::__1::array.15"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"struct.std::__1::array.15", %"struct.std::__1::array.15"* %13, i64 %18, i32 0, i64 0
  %20 = bitcast i64* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 64
  %25 = and i64 %24, -64
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 %25, i1 false) #15
  %26 = ptrtoint %"struct.std::__1::array.15"* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 6
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 288230376151711743
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #17
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 6
  %41 = icmp ult i64 %40, 144115188075855871
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 5
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 288230376151711743
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #17
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 288230376151711743, %38 ]
  %52 = shl i64 %51, 6
  %53 = tail call i8* @_Znwm(i64 %52) #16
  %54 = bitcast i8* %53 to %"struct.std::__1::array.15"*
  br label %55

55:                                               ; preds = %42, %50
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi %"struct.std::__1::array.15"* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds %"struct.std::__1::array.15", %"struct.std::__1::array.15"* %57, i64 %33
  %59 = bitcast %"struct.std::__1::array.15"* %58 to i8*
  %60 = getelementptr inbounds %"struct.std::__1::array.15", %"struct.std::__1::array.15"* %57, i64 %56
  %61 = getelementptr inbounds %"struct.std::__1::array.15", %"struct.std::__1::array.15"* %58, i64 %1
  %62 = shl nsw i64 %1, 6
  call void @llvm.memset.p0i8.i64(i8* align 8 %59, i8 0, i64 %62, i1 false)
  %63 = ptrtoint %"struct.std::__1::array.15"* %60 to i64
  %64 = ptrtoint %"struct.std::__1::array.15"* %61 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %66 = load %"struct.std::__1::array.15"*, %"struct.std::__1::array.15"** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint %"struct.std::__1::array.15"* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 6
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds %"struct.std::__1::array.15", %"struct.std::__1::array.15"* %58, i64 %71
  %73 = ptrtoint %"struct.std::__1::array.15"* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast %"struct.std::__1::array.15"* %72 to i8*
  %77 = bitcast %"struct.std::__1::array.15"* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 %69, i1 false) #15
  %78 = load %"struct.std::__1::array.15"*, %"struct.std::__1::array.15"** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi %"struct.std::__1::array.15"* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq %"struct.std::__1::array.15"* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast %"struct.std::__1::array.15"* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #16
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE6ResizeINS0_19DefaultValueAdapterIS4_EEEEvT_m(%"class.absl::inlined_vector_internal::Storage.98"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !noalias !217
  %5 = and i64 %4, 1
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 0
  %9 = bitcast i32** %8 to i64*
  %10 = load i64, i64* %9, align 8, !noalias !217
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 1
  %12 = load i64, i64* %11, align 8, !noalias !217
  br label %16

13:                                               ; preds = %2
  %14 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1
  %15 = ptrtoint %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data"* %14 to i64
  br label %16

16:                                               ; preds = %7, %13
  %17 = phi i64 [ %15, %13 ], [ %10, %7 ]
  %18 = phi i64 [ 4, %13 ], [ %12, %7 ]
  %19 = lshr i64 %4, 1
  %20 = inttoptr i64 %17 to i32*
  %21 = inttoptr i64 %17 to i8*
  %22 = icmp ult i64 %19, %1
  br i1 %22, label %23, label %195

23:                                               ; preds = %16
  %24 = icmp ult i64 %18, %1
  br i1 %24, label %33, label %25

25:                                               ; preds = %23
  %26 = sub i64 %1, %19
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %195, label %28

28:                                               ; preds = %25
  %29 = getelementptr inbounds i32, i32* %20, i64 %19
  %30 = bitcast i32* %29 to i8*
  %31 = shl nuw i64 %26, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %30, i8 0, i64 %31, i1 false) #15
  %32 = load i64, i64* %3, align 8
  br label %195

33:                                               ; preds = %23
  %34 = shl i64 %18, 1
  %35 = icmp ult i64 %34, %1
  %36 = select i1 %35, i64 %1, i64 %34
  %37 = icmp ugt i64 %36, 4611686018427387903
  br i1 %37, label %38, label %39

38:                                               ; preds = %33
  tail call void @abort() #17
  unreachable

39:                                               ; preds = %33
  %40 = shl i64 %36, 2
  %41 = tail call i8* @_Znwm(i64 %40) #16
  %42 = bitcast i8* %41 to i32*
  %43 = ptrtoint i8* %41 to i64
  %44 = sub i64 %1, %19
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %50, label %46

46:                                               ; preds = %39
  %47 = getelementptr inbounds i32, i32* %42, i64 %19
  %48 = bitcast i32* %47 to i8*
  %49 = shl nuw i64 %44, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %48, i8 0, i64 %49, i1 false) #15
  br label %50

50:                                               ; preds = %39, %46
  %51 = icmp eq i64 %19, 0
  br i1 %51, label %183, label %52

52:                                               ; preds = %50
  %53 = icmp ult i64 %4, 16
  br i1 %53, label %142, label %54

54:                                               ; preds = %52
  %55 = shl i64 %19, 2
  %56 = getelementptr i8, i8* %41, i64 %55
  %57 = getelementptr i32, i32* %20, i64 %19
  %58 = bitcast i32* %57 to i8*
  %59 = icmp ult i8* %41, %58
  %60 = icmp ugt i8* %56, %21
  %61 = and i1 %59, %60
  br i1 %61, label %142, label %62

62:                                               ; preds = %54
  %63 = and i64 %19, 9223372036854775800
  %64 = getelementptr i32, i32* %20, i64 %63
  %65 = add nsw i64 %63, -8
  %66 = lshr exact i64 %65, 3
  %67 = add nuw nsw i64 %66, 1
  %68 = and i64 %67, 3
  %69 = icmp ult i64 %65, 24
  br i1 %69, label %121, label %70

70:                                               ; preds = %62
  %71 = sub nsw i64 %67, %68
  br label %72

72:                                               ; preds = %72, %70
  %73 = phi i64 [ 0, %70 ], [ %118, %72 ]
  %74 = phi i64 [ %71, %70 ], [ %119, %72 ]
  %75 = getelementptr i32, i32* %20, i64 %73
  %76 = getelementptr inbounds i32, i32* %42, i64 %73
  %77 = bitcast i32* %75 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 4, !alias.scope !220
  %79 = getelementptr i32, i32* %75, i64 4
  %80 = bitcast i32* %79 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 4, !alias.scope !220
  %82 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %82, align 4, !alias.scope !223, !noalias !220
  %83 = getelementptr inbounds i32, i32* %76, i64 4
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> %81, <4 x i32>* %84, align 4, !alias.scope !223, !noalias !220
  %85 = or i64 %73, 8
  %86 = getelementptr i32, i32* %20, i64 %85
  %87 = getelementptr inbounds i32, i32* %42, i64 %85
  %88 = bitcast i32* %86 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !220
  %90 = getelementptr i32, i32* %86, i64 4
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4, !alias.scope !220
  %93 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %93, align 4, !alias.scope !223, !noalias !220
  %94 = getelementptr inbounds i32, i32* %87, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %95, align 4, !alias.scope !223, !noalias !220
  %96 = or i64 %73, 16
  %97 = getelementptr i32, i32* %20, i64 %96
  %98 = getelementptr inbounds i32, i32* %42, i64 %96
  %99 = bitcast i32* %97 to <4 x i32>*
  %100 = load <4 x i32>, <4 x i32>* %99, align 4, !alias.scope !220
  %101 = getelementptr i32, i32* %97, i64 4
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 4, !alias.scope !220
  %104 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %100, <4 x i32>* %104, align 4, !alias.scope !223, !noalias !220
  %105 = getelementptr inbounds i32, i32* %98, i64 4
  %106 = bitcast i32* %105 to <4 x i32>*
  store <4 x i32> %103, <4 x i32>* %106, align 4, !alias.scope !223, !noalias !220
  %107 = or i64 %73, 24
  %108 = getelementptr i32, i32* %20, i64 %107
  %109 = getelementptr inbounds i32, i32* %42, i64 %107
  %110 = bitcast i32* %108 to <4 x i32>*
  %111 = load <4 x i32>, <4 x i32>* %110, align 4, !alias.scope !220
  %112 = getelementptr i32, i32* %108, i64 4
  %113 = bitcast i32* %112 to <4 x i32>*
  %114 = load <4 x i32>, <4 x i32>* %113, align 4, !alias.scope !220
  %115 = bitcast i32* %109 to <4 x i32>*
  store <4 x i32> %111, <4 x i32>* %115, align 4, !alias.scope !223, !noalias !220
  %116 = getelementptr inbounds i32, i32* %109, i64 4
  %117 = bitcast i32* %116 to <4 x i32>*
  store <4 x i32> %114, <4 x i32>* %117, align 4, !alias.scope !223, !noalias !220
  %118 = add i64 %73, 32
  %119 = add i64 %74, -4
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %72, !llvm.loop !225

121:                                              ; preds = %72, %62
  %122 = phi i64 [ 0, %62 ], [ %118, %72 ]
  %123 = icmp eq i64 %68, 0
  br i1 %123, label %140, label %124

124:                                              ; preds = %121, %124
  %125 = phi i64 [ %137, %124 ], [ %122, %121 ]
  %126 = phi i64 [ %138, %124 ], [ %68, %121 ]
  %127 = getelementptr i32, i32* %20, i64 %125
  %128 = getelementptr inbounds i32, i32* %42, i64 %125
  %129 = bitcast i32* %127 to <4 x i32>*
  %130 = load <4 x i32>, <4 x i32>* %129, align 4, !alias.scope !220
  %131 = getelementptr i32, i32* %127, i64 4
  %132 = bitcast i32* %131 to <4 x i32>*
  %133 = load <4 x i32>, <4 x i32>* %132, align 4, !alias.scope !220
  %134 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %130, <4 x i32>* %134, align 4, !alias.scope !223, !noalias !220
  %135 = getelementptr inbounds i32, i32* %128, i64 4
  %136 = bitcast i32* %135 to <4 x i32>*
  store <4 x i32> %133, <4 x i32>* %136, align 4, !alias.scope !223, !noalias !220
  %137 = add i64 %125, 8
  %138 = add i64 %126, -1
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %124, !llvm.loop !226

140:                                              ; preds = %124, %121
  %141 = icmp eq i64 %19, %63
  br i1 %141, label %183, label %142

142:                                              ; preds = %140, %54, %52
  %143 = phi i32* [ %20, %54 ], [ %20, %52 ], [ %64, %140 ]
  %144 = phi i64 [ 0, %54 ], [ 0, %52 ], [ %63, %140 ]
  %145 = xor i64 %144, -1
  %146 = add nsw i64 %19, %145
  %147 = and i64 %19, 3
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %159, label %149

149:                                              ; preds = %142, %149
  %150 = phi i32* [ %155, %149 ], [ %143, %142 ]
  %151 = phi i64 [ %156, %149 ], [ %144, %142 ]
  %152 = phi i64 [ %157, %149 ], [ %147, %142 ]
  %153 = getelementptr inbounds i32, i32* %42, i64 %151
  %154 = load i32, i32* %150, align 4
  store i32 %154, i32* %153, align 4
  %155 = getelementptr inbounds i32, i32* %150, i64 1
  %156 = add nuw nsw i64 %151, 1
  %157 = add i64 %152, -1
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %159, label %149, !llvm.loop !227

159:                                              ; preds = %149, %142
  %160 = phi i32* [ %143, %142 ], [ %155, %149 ]
  %161 = phi i64 [ %144, %142 ], [ %156, %149 ]
  %162 = icmp ult i64 %146, 3
  br i1 %162, label %183, label %163

163:                                              ; preds = %159, %163
  %164 = phi i32* [ %180, %163 ], [ %160, %159 ]
  %165 = phi i64 [ %181, %163 ], [ %161, %159 ]
  %166 = getelementptr inbounds i32, i32* %42, i64 %165
  %167 = load i32, i32* %164, align 4
  store i32 %167, i32* %166, align 4
  %168 = getelementptr inbounds i32, i32* %164, i64 1
  %169 = add nuw nsw i64 %165, 1
  %170 = getelementptr inbounds i32, i32* %42, i64 %169
  %171 = load i32, i32* %168, align 4
  store i32 %171, i32* %170, align 4
  %172 = getelementptr inbounds i32, i32* %164, i64 2
  %173 = add nuw nsw i64 %165, 2
  %174 = getelementptr inbounds i32, i32* %42, i64 %173
  %175 = load i32, i32* %172, align 4
  store i32 %175, i32* %174, align 4
  %176 = getelementptr inbounds i32, i32* %164, i64 3
  %177 = add nuw nsw i64 %165, 3
  %178 = getelementptr inbounds i32, i32* %42, i64 %177
  %179 = load i32, i32* %176, align 4
  store i32 %179, i32* %178, align 4
  %180 = getelementptr inbounds i32, i32* %164, i64 4
  %181 = add nuw nsw i64 %165, 4
  %182 = icmp eq i64 %181, %19
  br i1 %182, label %183, label %163, !llvm.loop !228

183:                                              ; preds = %159, %163, %140, %50
  br i1 %6, label %189, label %184

184:                                              ; preds = %183
  %185 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 0
  %186 = bitcast i32** %185 to i8**
  %187 = load i8*, i8** %186, align 8
  tail call void @_ZdlPv(i8* %187) #16
  %188 = load i64, i64* %3, align 8
  br label %189

189:                                              ; preds = %184, %183
  %190 = phi i64 [ %188, %184 ], [ %4, %183 ]
  %191 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 0
  %192 = bitcast i32** %191 to i64*
  store i64 %43, i64* %192, align 8
  %193 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.98", %"class.absl::inlined_vector_internal::Storage.98"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %36, i64* %193, align 8
  %194 = or i64 %190, 1
  store i64 %194, i64* %3, align 8
  br label %195

195:                                              ; preds = %28, %25, %16, %189
  %196 = phi i64 [ %32, %28 ], [ %4, %25 ], [ %4, %16 ], [ %194, %189 ]
  %197 = shl i64 %1, 1
  %198 = and i64 %196, 1
  %199 = or i64 %198, %197
  store i64 %199, i64* %3, align 8
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #13

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #14

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nofree nounwind readonly }
attributes #14 = { nounwind readnone speculatable }
attributes #15 = { nounwind }
attributes #16 = { builtin nounwind }
attributes #17 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i8 0, i8 2}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.isvectorized", i32 1}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = distinct !{!8, !9, !5}
!9 = !{!"llvm.loop.unroll.runtime.disable"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN4absl13make_optionalIRKN6webrtc10ColorSpaceEEENS_8optionalINSt3__15decayIT_E4typeEEEOS8_: argument 0"}
!12 = distinct !{!12, !"_ZN4absl13make_optionalIRKN6webrtc10ColorSpaceEEENS_8optionalINSt3__15decayIT_E4typeEEEOS8_"}
!13 = !{!"branch_weights", i32 1, i32 2000}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv: argument 0"}
!16 = distinct !{!16, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv: argument 0"}
!19 = distinct !{!19, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15MakeStorageViewEv: argument 0"}
!22 = distinct !{!22, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15MakeStorageViewEv"}
!23 = !{!24}
!24 = distinct !{!24, !25}
!25 = distinct !{!25, !"LVerDomain"}
!26 = !{!27}
!27 = distinct !{!27, !25}
!28 = distinct !{!28, !5}
!29 = distinct !{!29, !7}
!30 = distinct !{!30, !7}
!31 = distinct !{!31, !5}
!32 = !{!33}
!33 = distinct !{!33, !34, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15MakeStorageViewEv: argument 0"}
!34 = distinct !{!34, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15MakeStorageViewEv"}
!35 = !{!36}
!36 = distinct !{!36, !37, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv: argument 0"}
!37 = distinct !{!37, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv"}
!38 = !{!39}
!39 = distinct !{!39, !40, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv: argument 0"}
!40 = distinct !{!40, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv"}
!41 = distinct !{!41, !5}
!42 = distinct !{!42, !7}
!43 = distinct !{!43, !9, !5}
!44 = !{!45}
!45 = distinct !{!45, !46, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv: argument 0"}
!46 = distinct !{!46, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv"}
!47 = !{!48}
!48 = distinct !{!48, !49, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv: argument 0"}
!49 = distinct !{!49, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv"}
!50 = !{!51}
!51 = distinct !{!51, !52, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv: argument 0"}
!52 = distinct !{!52, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv"}
!53 = !{!54}
!54 = distinct !{!54, !55, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv: argument 0"}
!55 = distinct !{!55, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv"}
!56 = !{!57}
!57 = distinct !{!57, !58, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv: argument 0"}
!58 = distinct !{!58, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv"}
!59 = !{!60}
!60 = distinct !{!60, !61, !"_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15MakeStorageViewEv: argument 0"}
!61 = distinct !{!61, !"_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15MakeStorageViewEv"}
!62 = !{!63}
!63 = distinct !{!63, !64, !"_ZN4absl23inlined_vector_internal7StorageIiLm10ENSt3__19allocatorIiEEE15MakeStorageViewEv: argument 0"}
!64 = distinct !{!64, !"_ZN4absl23inlined_vector_internal7StorageIiLm10ENSt3__19allocatorIiEEE15MakeStorageViewEv"}
!65 = !{!66}
!66 = distinct !{!66, !67, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15MakeStorageViewEv: argument 0"}
!67 = distinct !{!67, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15MakeStorageViewEv"}
!68 = !{!69}
!69 = distinct !{!69, !70, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc16RenderResolutionELm4ENSt3__19allocatorIS3_EEE15MakeStorageViewEv: argument 0"}
!70 = distinct !{!70, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc16RenderResolutionELm4ENSt3__19allocatorIS3_EEE15MakeStorageViewEv"}
!71 = !{!72}
!72 = distinct !{!72, !73, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15MakeStorageViewEv: argument 0"}
!73 = distinct !{!73, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15MakeStorageViewEv"}
!74 = !{!75}
!75 = distinct !{!75, !76}
!76 = distinct !{!76, !"LVerDomain"}
!77 = !{!78}
!78 = distinct !{!78, !76}
!79 = distinct !{!79, !5}
!80 = distinct !{!80, !7}
!81 = distinct !{!81, !7}
!82 = distinct !{!82, !5}
!83 = !{!84}
!84 = distinct !{!84, !85}
!85 = distinct !{!85, !"LVerDomain"}
!86 = !{!87}
!87 = distinct !{!87, !85}
!88 = distinct !{!88, !5}
!89 = distinct !{!89, !7}
!90 = distinct !{!90, !7}
!91 = distinct !{!91, !5}
!92 = !{!93}
!93 = distinct !{!93, !94, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv: argument 0"}
!94 = distinct !{!94, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv"}
!95 = !{!96}
!96 = distinct !{!96, !97}
!97 = distinct !{!97, !"LVerDomain"}
!98 = !{!99}
!99 = distinct !{!99, !97}
!100 = distinct !{!100, !5}
!101 = distinct !{!101, !7}
!102 = distinct !{!102, !7}
!103 = distinct !{!103, !5}
!104 = !{!105}
!105 = distinct !{!105, !106}
!106 = distinct !{!106, !"LVerDomain"}
!107 = !{!108}
!108 = distinct !{!108, !106}
!109 = distinct !{!109, !5}
!110 = distinct !{!110, !7}
!111 = distinct !{!111, !7}
!112 = distinct !{!112, !5}
!113 = !{!114}
!114 = distinct !{!114, !115, !"_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15MakeStorageViewEv: argument 0"}
!115 = distinct !{!115, !"_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15MakeStorageViewEv"}
!116 = !{!117}
!117 = distinct !{!117, !118}
!118 = distinct !{!118, !"LVerDomain"}
!119 = !{!120}
!120 = distinct !{!120, !118}
!121 = distinct !{!121, !5}
!122 = distinct !{!122, !7}
!123 = distinct !{!123, !7}
!124 = distinct !{!124, !5}
!125 = !{!126}
!126 = distinct !{!126, !127}
!127 = distinct !{!127, !"LVerDomain"}
!128 = !{!129}
!129 = distinct !{!129, !127}
!130 = distinct !{!130, !5}
!131 = distinct !{!131, !7}
!132 = distinct !{!132, !7}
!133 = distinct !{!133, !5}
!134 = !{!135}
!135 = distinct !{!135, !136, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv: argument 0"}
!136 = distinct !{!136, !"_ZN4absl23inlined_vector_internal7StorageIlLm5ENSt3__19allocatorIlEEE15MakeStorageViewEv"}
!137 = !{!138}
!138 = distinct !{!138, !139}
!139 = distinct !{!139, !"LVerDomain"}
!140 = !{!141}
!141 = distinct !{!141, !139}
!142 = distinct !{!142, !5}
!143 = distinct !{!143, !7}
!144 = distinct !{!144, !7}
!145 = distinct !{!145, !5}
!146 = !{!147}
!147 = distinct !{!147, !148, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15MakeStorageViewEv: argument 0"}
!148 = distinct !{!148, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15MakeStorageViewEv"}
!149 = !{!150}
!150 = distinct !{!150, !151}
!151 = distinct !{!151, !"LVerDomain"}
!152 = !{!153}
!153 = distinct !{!153, !151}
!154 = distinct !{!154, !5}
!155 = distinct !{!155, !7}
!156 = distinct !{!156, !7}
!157 = distinct !{!157, !5}
!158 = !{!159}
!159 = distinct !{!159, !160, !"_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15MakeStorageViewEv: argument 0"}
!160 = distinct !{!160, !"_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15MakeStorageViewEv"}
!161 = !{!162}
!162 = distinct !{!162, !163}
!163 = distinct !{!163, !"LVerDomain"}
!164 = !{!165}
!165 = distinct !{!165, !163}
!166 = distinct !{!166, !5}
!167 = distinct !{!167, !7}
!168 = distinct !{!168, !7}
!169 = distinct !{!169, !5}
!170 = !{!171}
!171 = distinct !{!171, !172, !"_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15MakeStorageViewEv: argument 0"}
!172 = distinct !{!172, !"_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15MakeStorageViewEv"}
!173 = !{!174}
!174 = distinct !{!174, !175}
!175 = distinct !{!175, !"LVerDomain"}
!176 = !{!177}
!177 = distinct !{!177, !175}
!178 = distinct !{!178, !5}
!179 = distinct !{!179, !7}
!180 = distinct !{!180, !5}
!181 = !{!182}
!182 = distinct !{!182, !183}
!183 = distinct !{!183, !"LVerDomain"}
!184 = !{!185}
!185 = distinct !{!185, !183}
!186 = distinct !{!186, !5}
!187 = distinct !{!187, !7}
!188 = distinct !{!188, !5}
!189 = !{!190}
!190 = distinct !{!190, !191, !"_ZN4absl23inlined_vector_internal7StorageIiLm10ENSt3__19allocatorIiEEE15MakeStorageViewEv: argument 0"}
!191 = distinct !{!191, !"_ZN4absl23inlined_vector_internal7StorageIiLm10ENSt3__19allocatorIiEEE15MakeStorageViewEv"}
!192 = !{!193}
!193 = distinct !{!193, !194}
!194 = distinct !{!194, !"LVerDomain"}
!195 = !{!196}
!196 = distinct !{!196, !194}
!197 = distinct !{!197, !5}
!198 = distinct !{!198, !7}
!199 = distinct !{!199, !7}
!200 = distinct !{!200, !5}
!201 = !{!202}
!202 = distinct !{!202, !203, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc16RenderResolutionELm4ENSt3__19allocatorIS3_EEE15MakeStorageViewEv: argument 0"}
!203 = distinct !{!203, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc16RenderResolutionELm4ENSt3__19allocatorIS3_EEE15MakeStorageViewEv"}
!204 = distinct !{!204, !7}
!205 = !{!206}
!206 = distinct !{!206, !207, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15MakeStorageViewEv: argument 0"}
!207 = distinct !{!207, !"_ZN4absl23inlined_vector_internal7StorageIN6webrtc22DecodeTargetIndicationELm10ENSt3__19allocatorIS3_EEE15MakeStorageViewEv"}
!208 = !{!209}
!209 = distinct !{!209, !210}
!210 = distinct !{!210, !"LVerDomain"}
!211 = !{!212}
!212 = distinct !{!212, !210}
!213 = distinct !{!213, !5}
!214 = distinct !{!214, !7}
!215 = distinct !{!215, !7}
!216 = distinct !{!216, !5}
!217 = !{!218}
!218 = distinct !{!218, !219, !"_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15MakeStorageViewEv: argument 0"}
!219 = distinct !{!219, !"_ZN4absl23inlined_vector_internal7StorageIiLm4ENSt3__19allocatorIiEEE15MakeStorageViewEv"}
!220 = !{!221}
!221 = distinct !{!221, !222}
!222 = distinct !{!222, !"LVerDomain"}
!223 = !{!224}
!224 = distinct !{!224, !222}
!225 = distinct !{!225, !5}
!226 = distinct !{!226, !7}
!227 = distinct !{!227, !7}
!228 = distinct !{!228, !5}
