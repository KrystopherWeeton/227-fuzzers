; ModuleID = '../../third_party/swiftshader/third_party/astc-encoder/Source/astc_block_sizes2.cpp'
source_filename = "../../third_party/swiftshader/third_party/astc-encoder/Source/astc_block_sizes2.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.block_size_descriptor = type { i32, i32, i32, i32, i32, [87 x %struct.decimation_table*], [2048 x %struct.block_mode], [3073 x %struct.partition_info] }
%struct.decimation_table = type { i32, [216 x i8], [216 x [4 x i8]], [216 x [4 x i8]] }
%struct.block_mode = type { i8, i8, i8, i8 }
%struct.partition_info = type { i32, [216 x i8] }
%struct.TexelWeight = type { [216 x i32], [216 x [4 x i32]], [216 x [4 x i32]], [64 x i32], [64 x [216 x i32]], [64 x [216 x i32]] }

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_Z26init_block_size_descriptoriiiP21block_size_descriptor(i32, i32, i32, %struct.block_size_descriptor*) local_unnamed_addr #0 {
  %5 = alloca [256 x i32], align 16
  %6 = alloca [4 x i32], align 16
  %7 = alloca [4 x i32], align 16
  %8 = alloca [512 x i32], align 16
  %9 = icmp sgt i32 %2, 1
  br i1 %9, label %10, label %356

10:                                               ; preds = %4
  %11 = bitcast [512 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %11) #5
  %12 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 0
  store i32 %0, i32* %12, align 8
  %13 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 1
  store i32 %1, i32* %13, align 4
  %14 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 2
  store i32 %2, i32* %14, align 8
  %15 = mul i32 %1, %0
  %16 = mul i32 %15, %2
  %17 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 3
  store i32 %16, i32* %17, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -1, i64 2048, i1 false) #5
  %18 = icmp sgt i32 %16, 0
  %19 = zext i32 %16 to i64
  %20 = shl nuw nsw i64 %19, 2
  %21 = icmp sgt i32 %1, 0
  %22 = icmp sgt i32 %0, 0
  %23 = sdiv i32 %0, 2
  %24 = add nsw i32 %23, 1024
  %25 = add nsw i32 %0, -1
  %26 = sdiv i32 %1, 2
  %27 = add nsw i32 %26, 1024
  %28 = add nsw i32 %1, -1
  %29 = lshr i32 %2, 1
  %30 = add nuw nsw i32 %29, 1024
  %31 = add nsw i32 %2, -1
  %32 = bitcast [4 x i32]* %6 to i8*
  %33 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 0
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %35 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 2
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %37 = bitcast [4 x i32]* %7 to i8*
  %38 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 0
  %39 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 1
  %40 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 2
  %41 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 3
  %42 = sext i32 %0 to i64
  %43 = sext i32 %1 to i64
  %44 = zext i32 %2 to i64
  %45 = zext i32 %1 to i64
  %46 = zext i32 %0 to i64
  br label %47

47:                                               ; preds = %63, %10
  %48 = phi i64 [ 2, %10 ], [ %64, %63 ]
  %49 = phi i32 [ 0, %10 ], [ %255, %63 ]
  %50 = trunc i64 %48 to i32
  %51 = add i32 %50, -1
  br label %54

52:                                               ; preds = %63
  %53 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 4
  store i32 %255, i32* %53, align 8
  br label %258

54:                                               ; preds = %66, %47
  %55 = phi i64 [ 2, %47 ], [ %67, %66 ]
  %56 = phi i32 [ %49, %47 ], [ %255, %66 ]
  %57 = mul nuw nsw i64 %55, %48
  %58 = shl i64 %55, 3
  %59 = add nuw nsw i64 %58, %48
  %60 = trunc i64 %57 to i32
  %61 = trunc i64 %55 to i32
  %62 = add i32 %61, -1
  br label %69

63:                                               ; preds = %66
  %64 = add nuw nsw i64 %48, 1
  %65 = icmp eq i64 %64, 7
  br i1 %65, label %52, label %47

66:                                               ; preds = %254
  %67 = add nuw nsw i64 %55, 1
  %68 = icmp eq i64 %67, 7
  br i1 %68, label %63, label %54

69:                                               ; preds = %254, %54
  %70 = phi i64 [ 2, %54 ], [ %256, %254 ]
  %71 = phi i32 [ %56, %54 ], [ %255, %254 ]
  %72 = mul nuw nsw i64 %70, %57
  %73 = icmp ugt i64 %72, 64
  br i1 %73, label %254, label %74

74:                                               ; preds = %69
  %75 = tail call i8* @_Znwm(i64 1948) #6
  %76 = bitcast i8* %75 to %struct.decimation_table*
  %77 = shl i64 %70, 6
  %78 = add nuw nsw i64 %59, %77
  %79 = getelementptr inbounds [512 x i32], [512 x i32]* %8, i64 0, i64 %78
  store i32 %71, i32* %79, align 4
  %80 = tail call i8* @_Znwm(i64 118624) #6
  %81 = bitcast i8* %80 to %struct.TexelWeight*
  %82 = getelementptr i8, i8* %80, i64 7776
  %83 = shl nuw nsw i64 %72, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %82, i8 0, i64 %83, i1 false) #5
  br i1 %18, label %84, label %85

84:                                               ; preds = %74
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %80, i8 0, i64 %20, i1 false) #5
  br label %85

85:                                               ; preds = %74, %84
  %86 = trunc i64 %70 to i32
  %87 = add i32 %86, -1
  br label %88

88:                                               ; preds = %213, %85
  %89 = phi i64 [ 0, %85 ], [ %214, %213 ]
  br i1 %21, label %90, label %213

90:                                               ; preds = %88
  %91 = mul nsw i64 %89, %43
  %92 = trunc i64 %89 to i32
  %93 = mul i32 %87, %92
  br label %95

94:                                               ; preds = %213
  br i1 %18, label %216, label %247

95:                                               ; preds = %210, %90
  %96 = phi i64 [ 0, %90 ], [ %211, %210 ]
  br i1 %22, label %97, label %210

97:                                               ; preds = %95
  %98 = add nsw i64 %96, %91
  %99 = mul nsw i64 %98, %42
  %100 = sdiv i32 %24, %25
  %101 = sdiv i32 %27, %28
  %102 = trunc i64 %96 to i32
  %103 = mul i32 %62, %102
  %104 = mul i32 %103, %101
  %105 = add nsw i32 %104, 32
  %106 = lshr i32 %105, 6
  %107 = sdiv i32 %30, %31
  %108 = mul i32 %93, %107
  %109 = add nsw i32 %108, 32
  %110 = lshr i32 %109, 6
  %111 = and i32 %106, 15
  %112 = and i32 %110, 15
  %113 = ashr i32 %105, 10
  %114 = ashr i32 %109, 10
  %115 = mul nsw i32 %114, %61
  %116 = add nsw i32 %115, %113
  %117 = mul nsw i32 %116, %50
  %118 = add nsw i32 %114, 1
  %119 = mul nsw i32 %118, %61
  %120 = add nsw i32 %113, 1
  %121 = add nsw i32 %120, %119
  %122 = mul nsw i32 %121, %50
  %123 = icmp ult i32 %112, %111
  %124 = zext i1 %123 to i32
  %125 = shl nuw nsw i32 %124, 1
  %126 = sub nsw i32 %112, %111
  %127 = sub nsw i32 %111, %112
  %128 = mul i32 %100, %51
  %129 = add i32 %122, 1
  br label %130

130:                                              ; preds = %207, %97
  %131 = phi i64 [ 0, %97 ], [ %208, %207 ]
  %132 = add nsw i64 %131, %99
  %133 = trunc i64 %131 to i32
  %134 = mul i32 %128, %133
  %135 = add nsw i32 %134, 32
  %136 = lshr i32 %135, 6
  %137 = and i32 %136, 15
  %138 = ashr i32 %135, 10
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %32, i8 -86, i64 16, i1 false) #5
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #5
  %139 = add nsw i32 %138, %117
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 -86, i64 16, i1 false) #5
  store i32 %139, i32* %33, align 16
  %140 = add i32 %129, %138
  store i32 %140, i32* %36, align 4
  %141 = icmp ult i32 %111, %137
  %142 = zext i1 %141 to i32
  %143 = shl nuw nsw i32 %142, 2
  %144 = icmp ugt i32 %137, %112
  %145 = zext i1 %144 to i32
  %146 = or i32 %125, %145
  %147 = or i32 %146, %143
  switch i32 %147, label %162 [
    i32 7, label %148
    i32 3, label %150
    i32 5, label %153
    i32 4, label %155
    i32 2, label %158
    i32 0, label %160
  ]

148:                                              ; preds = %130
  %149 = sub nsw i32 %137, %111
  br label %164

150:                                              ; preds = %130
  %151 = sub nsw i32 %111, %137
  %152 = sub nsw i32 %137, %112
  br label %164

153:                                              ; preds = %130
  %154 = sub nsw i32 %137, %112
  br label %164

155:                                              ; preds = %130
  %156 = sub nsw i32 %112, %137
  %157 = sub nsw i32 %137, %111
  br label %164

158:                                              ; preds = %130
  %159 = sub nsw i32 %112, %137
  br label %164

160:                                              ; preds = %130
  %161 = sub nsw i32 %111, %137
  br label %164

162:                                              ; preds = %130
  %163 = sub nsw i32 %111, %137
  br label %164

164:                                              ; preds = %162, %160, %158, %155, %153, %150, %148
  %165 = phi i32 [ %60, %162 ], [ %60, %160 ], [ %50, %158 ], [ %60, %155 ], [ 1, %153 ], [ %50, %150 ], [ 1, %148 ]
  %166 = phi i32 [ %50, %162 ], [ %50, %160 ], [ %60, %158 ], [ 1, %155 ], [ %60, %153 ], [ 1, %150 ], [ %50, %148 ]
  %167 = phi i32 [ %112, %162 ], [ %112, %160 ], [ %111, %158 ], [ %112, %155 ], [ %137, %153 ], [ %111, %150 ], [ %137, %148 ]
  %168 = phi i32 [ %126, %162 ], [ %126, %160 ], [ %127, %158 ], [ %156, %155 ], [ %154, %153 ], [ %151, %150 ], [ %149, %148 ]
  %169 = phi i32 [ %163, %162 ], [ %161, %160 ], [ %159, %158 ], [ %157, %155 ], [ %126, %153 ], [ %152, %150 ], [ %127, %148 ]
  %170 = phi i32 [ %137, %162 ], [ %137, %160 ], [ %137, %158 ], [ %111, %155 ], [ %111, %153 ], [ %112, %150 ], [ %112, %148 ]
  %171 = sub nuw nsw i32 16, %167
  %172 = add nsw i32 %165, %139
  store i32 %172, i32* %34, align 4
  %173 = add nsw i32 %172, %166
  store i32 %173, i32* %35, align 8
  store i32 %171, i32* %38, align 16
  store i32 %168, i32* %39, align 4
  store i32 %169, i32* %40, align 8
  store i32 %170, i32* %41, align 4
  %174 = getelementptr inbounds %struct.TexelWeight, %struct.TexelWeight* %81, i64 0, i32 0, i64 %132
  %175 = trunc i64 %132 to i32
  br label %176

176:                                              ; preds = %204, %164
  %177 = phi i32 [ %171, %164 ], [ %206, %204 ]
  %178 = phi i64 [ 0, %164 ], [ %202, %204 ]
  %179 = icmp eq i32 %177, 0
  br i1 %179, label %201, label %180

180:                                              ; preds = %176
  %181 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %178
  %182 = load i32, i32* %181, align 4
  %183 = load i32, i32* %174, align 4
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds %struct.TexelWeight, %struct.TexelWeight* %81, i64 0, i32 1, i64 %132, i64 %184
  store i32 %182, i32* %185, align 4
  %186 = load i32, i32* %174, align 4
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds %struct.TexelWeight, %struct.TexelWeight* %81, i64 0, i32 2, i64 %132, i64 %187
  store i32 %177, i32* %188, align 4
  %189 = load i32, i32* %174, align 4
  %190 = add nsw i32 %189, 1
  store i32 %190, i32* %174, align 4
  %191 = sext i32 %182 to i64
  %192 = getelementptr inbounds %struct.TexelWeight, %struct.TexelWeight* %81, i64 0, i32 3, i64 %191
  %193 = load i32, i32* %192, align 4
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds %struct.TexelWeight, %struct.TexelWeight* %81, i64 0, i32 4, i64 %191, i64 %194
  store i32 %175, i32* %195, align 4
  %196 = load i32, i32* %192, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds %struct.TexelWeight, %struct.TexelWeight* %81, i64 0, i32 5, i64 %191, i64 %197
  store i32 %177, i32* %198, align 4
  %199 = load i32, i32* %192, align 4
  %200 = add nsw i32 %199, 1
  store i32 %200, i32* %192, align 4
  br label %201

201:                                              ; preds = %180, %176
  %202 = add nuw nsw i64 %178, 1
  %203 = icmp eq i64 %202, 4
  br i1 %203, label %207, label %204

204:                                              ; preds = %201
  %205 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 %202
  %206 = load i32, i32* %205, align 4
  br label %176

207:                                              ; preds = %201
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32) #5
  %208 = add nuw nsw i64 %131, 1
  %209 = icmp eq i64 %208, %46
  br i1 %209, label %210, label %130

210:                                              ; preds = %207, %95
  %211 = add nuw nsw i64 %96, 1
  %212 = icmp eq i64 %211, %45
  br i1 %212, label %213, label %95

213:                                              ; preds = %210, %88
  %214 = add nuw nsw i64 %89, 1
  %215 = icmp eq i64 %214, %44
  br i1 %215, label %94, label %88

216:                                              ; preds = %94, %244
  %217 = phi i64 [ %245, %244 ], [ 0, %94 ]
  %218 = shl i64 %217, 2
  %219 = add nuw i64 %218, 1084
  %220 = getelementptr i8, i8* %75, i64 %219
  %221 = add nuw i64 %218, 220
  %222 = getelementptr i8, i8* %75, i64 %221
  %223 = getelementptr inbounds %struct.TexelWeight, %struct.TexelWeight* %81, i64 0, i32 0, i64 %217
  %224 = load i32, i32* %223, align 4
  %225 = trunc i32 %224 to i8
  %226 = getelementptr inbounds %struct.decimation_table, %struct.decimation_table* %76, i64 0, i32 1, i64 %217
  store i8 %225, i8* %226, align 1
  %227 = bitcast i8* %222 to i32*
  store i32 0, i32* %227, align 1
  %228 = bitcast i8* %220 to i32*
  store i32 0, i32* %228, align 1
  %229 = icmp sgt i32 %224, 0
  br i1 %229, label %230, label %244

230:                                              ; preds = %216
  %231 = zext i32 %224 to i64
  br label %232

232:                                              ; preds = %232, %230
  %233 = phi i64 [ 0, %230 ], [ %242, %232 ]
  %234 = getelementptr inbounds %struct.TexelWeight, %struct.TexelWeight* %81, i64 0, i32 2, i64 %217, i64 %233
  %235 = load i32, i32* %234, align 4
  %236 = trunc i32 %235 to i8
  %237 = getelementptr inbounds %struct.decimation_table, %struct.decimation_table* %76, i64 0, i32 2, i64 %217, i64 %233
  store i8 %236, i8* %237, align 1
  %238 = getelementptr inbounds %struct.TexelWeight, %struct.TexelWeight* %81, i64 0, i32 1, i64 %217, i64 %233
  %239 = load i32, i32* %238, align 4
  %240 = trunc i32 %239 to i8
  %241 = getelementptr inbounds %struct.decimation_table, %struct.decimation_table* %76, i64 0, i32 3, i64 %217, i64 %233
  store i8 %240, i8* %241, align 1
  %242 = add nuw nsw i64 %233, 1
  %243 = icmp eq i64 %242, %231
  br i1 %243, label %244, label %232

244:                                              ; preds = %232, %216
  %245 = add nuw nsw i64 %217, 1
  %246 = icmp eq i64 %245, %19
  br i1 %246, label %247, label %216

247:                                              ; preds = %244, %94
  %248 = bitcast i8* %75 to i32*
  %249 = trunc i64 %72 to i32
  store i32 %249, i32* %248, align 4
  tail call void @_ZdlPv(i8* nonnull %80) #6
  %250 = sext i32 %71 to i64
  %251 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 5, i64 %250
  %252 = bitcast %struct.decimation_table** %251 to i8**
  store i8* %75, i8** %252, align 8
  %253 = add nsw i32 %71, 1
  br label %254

254:                                              ; preds = %247, %69
  %255 = phi i32 [ %71, %69 ], [ %253, %247 ]
  %256 = add nuw nsw i64 %70, 1
  %257 = icmp eq i64 %256, 7
  br i1 %257, label %66, label %69

258:                                              ; preds = %348, %52
  %259 = phi i64 [ 0, %52 ], [ %353, %348 ]
  %260 = trunc i64 %259 to i32
  %261 = lshr i32 %260, 4
  %262 = and i32 %261, 1
  %263 = lshr i32 %260, 9
  %264 = and i32 %263, 1
  %265 = lshr i32 %260, 10
  %266 = and i32 %265, 1
  %267 = lshr i32 %260, 5
  %268 = and i32 %267, 3
  %269 = and i32 %260, 3
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %279, label %271

271:                                              ; preds = %258
  %272 = lshr i32 %260, 7
  %273 = and i32 %272, 3
  %274 = lshr i32 %260, 2
  %275 = and i32 %274, 3
  %276 = add nuw nsw i32 %268, 2
  %277 = add nuw nsw i32 %273, 2
  %278 = add nuw nsw i32 %275, 2
  br label %304

279:                                              ; preds = %258
  %280 = lshr i32 %260, 2
  %281 = and i32 %280, 3
  %282 = icmp eq i32 %281, 0
  br i1 %282, label %325, label %283

283:                                              ; preds = %279
  %284 = and i32 %263, 3
  %285 = lshr i32 %260, 7
  %286 = and i32 %285, 3
  %287 = icmp eq i32 %286, 3
  %288 = select i1 %287, i32 %266, i32 0
  %289 = select i1 %287, i32 %264, i32 0
  switch i32 %286, label %303 [
    i32 0, label %290
    i32 1, label %293
    i32 2, label %296
    i32 3, label %299
  ]

290:                                              ; preds = %283
  %291 = add nuw nsw i32 %284, 2
  %292 = add nuw nsw i32 %268, 2
  br label %304

293:                                              ; preds = %283
  %294 = add nuw nsw i32 %268, 2
  %295 = add nuw nsw i32 %284, 2
  br label %304

296:                                              ; preds = %283
  %297 = add nuw nsw i32 %268, 2
  %298 = add nuw nsw i32 %284, 2
  br label %304

299:                                              ; preds = %283
  switch i32 %268, label %302 [
    i32 0, label %304
    i32 1, label %300
    i32 2, label %301
    i32 3, label %325
  ]

300:                                              ; preds = %299
  br label %304

301:                                              ; preds = %299
  br label %304

302:                                              ; preds = %299
  unreachable

303:                                              ; preds = %283
  unreachable

304:                                              ; preds = %301, %300, %299, %296, %293, %290, %271
  %305 = phi i32 [ %276, %271 ], [ 2, %301 ], [ 2, %300 ], [ %297, %296 ], [ %294, %293 ], [ 6, %290 ], [ 6, %299 ]
  %306 = phi i32 [ %277, %271 ], [ 2, %301 ], [ 6, %300 ], [ %298, %296 ], [ 6, %293 ], [ %291, %290 ], [ 2, %299 ]
  %307 = phi i32 [ %278, %271 ], [ 6, %301 ], [ 2, %300 ], [ 6, %296 ], [ %295, %293 ], [ %292, %290 ], [ 2, %299 ]
  %308 = phi i32 [ %266, %271 ], [ %288, %301 ], [ %288, %300 ], [ %288, %296 ], [ %288, %293 ], [ %288, %290 ], [ %288, %299 ]
  %309 = phi i32 [ %264, %271 ], [ %289, %301 ], [ %289, %300 ], [ %289, %296 ], [ %289, %293 ], [ %289, %290 ], [ %289, %299 ]
  %310 = phi i32 [ %269, %271 ], [ %281, %301 ], [ %281, %300 ], [ %281, %296 ], [ %281, %293 ], [ %281, %290 ], [ %281, %299 ]
  %311 = shl nuw nsw i32 %310, 1
  %312 = or i32 %311, %262
  %313 = mul nsw i32 %306, %305
  %314 = mul nsw i32 %313, %307
  %315 = add nuw nsw i32 %308, 1
  %316 = mul nsw i32 %314, %315
  %317 = mul nsw i32 %309, 6
  %318 = add nsw i32 %317, -2
  %319 = add i32 %318, %312
  %320 = tail call i32 @_Z20compute_ise_bitcounti19quantization_method(i32 %316, i32 %319) #7
  %321 = icmp sgt i32 %316, 64
  %322 = add i32 %320, -24
  %323 = icmp ugt i32 %322, 72
  %324 = or i1 %321, %323
  br i1 %324, label %325, label %328

325:                                              ; preds = %304, %299, %279
  %326 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 6, i64 %259, i32 0
  store i8 -1, i8* %326, align 4
  %327 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 6, i64 %259, i32 1
  store i8 -1, i8* %327, align 1
  br label %348

328:                                              ; preds = %304
  %329 = icmp sgt i32 %305, %0
  %330 = icmp sgt i32 %306, %1
  %331 = or i1 %329, %330
  %332 = icmp sgt i32 %307, %2
  %333 = or i1 %331, %332
  %334 = xor i1 %333, true
  %335 = zext i1 %334 to i8
  %336 = shl i32 %307, 6
  %337 = shl i32 %306, 3
  %338 = add nuw nsw i32 %337, %305
  %339 = add nuw nsw i32 %338, %336
  %340 = sext i32 %339 to i64
  %341 = getelementptr inbounds [512 x i32], [512 x i32]* %8, i64 0, i64 %340
  %342 = load i32, i32* %341, align 4
  %343 = trunc i32 %342 to i8
  %344 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 6, i64 %259, i32 0
  store i8 %343, i8* %344, align 4
  %345 = trunc i32 %319 to i8
  %346 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 6, i64 %259, i32 1
  store i8 %345, i8* %346, align 1
  %347 = trunc i32 %308 to i8
  br label %348

348:                                              ; preds = %328, %325
  %349 = phi i8 [ %347, %328 ], [ -1, %325 ]
  %350 = phi i8 [ %335, %328 ], [ 0, %325 ]
  %351 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 6, i64 %259, i32 2
  store i8 %349, i8* %351, align 2
  %352 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 6, i64 %259, i32 3
  store i8 %350, i8* %352, align 1
  %353 = add nuw nsw i64 %259, 1
  %354 = icmp eq i64 %353, 2048
  br i1 %354, label %355, label %258

355:                                              ; preds = %348
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %11) #5
  br label %637

356:                                              ; preds = %4
  %357 = bitcast [256 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %357) #5
  %358 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 0
  store i32 %0, i32* %358, align 8
  %359 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 1
  store i32 %1, i32* %359, align 4
  %360 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 2
  store i32 1, i32* %360, align 8
  %361 = mul i32 %1, %0
  %362 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 3
  store i32 %361, i32* %362, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %357, i8 -1, i64 1024, i1 false) #5
  %363 = icmp sgt i32 %361, 0
  %364 = zext i32 %361 to i64
  %365 = shl nuw nsw i64 %364, 2
  %366 = icmp sgt i32 %1, 0
  %367 = icmp sgt i32 %0, 0
  %368 = sdiv i32 %0, 2
  %369 = add nsw i32 %368, 1024
  %370 = add nsw i32 %0, -1
  %371 = lshr i32 %1, 1
  %372 = add nuw nsw i32 %371, 1024
  %373 = add nsw i32 %1, -1
  %374 = bitcast [4 x i32]* %6 to i8*
  %375 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 0
  %376 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 1
  %377 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 2
  %378 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  %379 = bitcast [4 x i32]* %7 to i8*
  %380 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 0
  %381 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 1
  %382 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 2
  %383 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 3
  %384 = sext i32 %0 to i64
  %385 = zext i32 %1 to i64
  %386 = zext i32 %0 to i64
  br label %387

387:                                              ; preds = %394, %356
  %388 = phi i64 [ 2, %356 ], [ %395, %394 ]
  %389 = phi i32 [ 0, %356 ], [ %532, %394 ]
  %390 = trunc i64 %388 to i32
  %391 = add i32 %390, -1
  br label %397

392:                                              ; preds = %394
  %393 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 4
  store i32 %532, i32* %393, align 8
  br label %535

394:                                              ; preds = %531
  %395 = add nuw nsw i64 %388, 1
  %396 = icmp eq i64 %395, 13
  br i1 %396, label %392, label %387

397:                                              ; preds = %531, %387
  %398 = phi i64 [ 2, %387 ], [ %533, %531 ]
  %399 = phi i32 [ %389, %387 ], [ %532, %531 ]
  %400 = mul nuw nsw i64 %398, %388
  %401 = icmp ugt i64 %400, 64
  br i1 %401, label %531, label %402

402:                                              ; preds = %397
  %403 = tail call i8* @_Znwm(i64 1948) #6
  %404 = bitcast i8* %403 to %struct.decimation_table*
  %405 = shl i64 %398, 4
  %406 = add nuw nsw i64 %405, %388
  %407 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %406
  store i32 %399, i32* %407, align 4
  %408 = tail call i8* @_Znwm(i64 118624) #6
  %409 = bitcast i8* %408 to %struct.TexelWeight*
  %410 = getelementptr i8, i8* %408, i64 7776
  %411 = shl nuw nsw i64 %400, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %410, i8 0, i64 %411, i1 false) #5
  br i1 %363, label %412, label %413

412:                                              ; preds = %402
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %408, i8 0, i64 %365, i1 false) #5
  br label %413

413:                                              ; preds = %412, %402
  br i1 %366, label %414, label %433

414:                                              ; preds = %413
  %415 = trunc i64 %398 to i32
  %416 = add i32 %415, -1
  br label %417

417:                                              ; preds = %490, %414
  %418 = phi i64 [ 0, %414 ], [ %491, %490 ]
  br i1 %367, label %419, label %490

419:                                              ; preds = %417
  %420 = mul nsw i64 %418, %384
  %421 = sdiv i32 %369, %370
  %422 = sdiv i32 %372, %373
  %423 = trunc i64 %418 to i32
  %424 = mul i32 %416, %423
  %425 = mul i32 %424, %422
  %426 = add nsw i32 %425, 32
  %427 = lshr i32 %426, 6
  %428 = and i32 %427, 15
  %429 = ashr i32 %426, 10
  %430 = mul nsw i32 %429, %390
  %431 = mul i32 %421, %391
  %432 = sub nuw nsw i32 16, %428
  br label %434

433:                                              ; preds = %490, %413
  br i1 %363, label %493, label %524

434:                                              ; preds = %487, %419
  %435 = phi i64 [ 0, %419 ], [ %488, %487 ]
  %436 = add nsw i64 %435, %420
  %437 = trunc i64 %435 to i32
  %438 = mul i32 %431, %437
  %439 = add nsw i32 %438, 32
  %440 = lshr i32 %439, 6
  %441 = and i32 %440, 15
  %442 = ashr i32 %439, 10
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %374) #5
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %379) #5
  %443 = add nsw i32 %442, %430
  store i32 %443, i32* %375, align 16
  %444 = add nsw i32 %443, 1
  store i32 %444, i32* %376, align 4
  %445 = add nsw i32 %443, %390
  store i32 %445, i32* %377, align 8
  %446 = add nsw i32 %445, 1
  store i32 %446, i32* %378, align 4
  %447 = mul nuw nsw i32 %441, %428
  %448 = add nuw nsw i32 %447, 8
  %449 = lshr i32 %448, 4
  store i32 %449, i32* %383, align 4
  %450 = sub nsw i32 %441, %449
  store i32 %450, i32* %381, align 4
  %451 = sub nsw i32 %428, %449
  store i32 %451, i32* %382, align 8
  %452 = sub nsw i32 %432, %441
  %453 = add nsw i32 %452, %449
  store i32 %453, i32* %380, align 16
  %454 = getelementptr inbounds %struct.TexelWeight, %struct.TexelWeight* %409, i64 0, i32 0, i64 %436
  %455 = trunc i64 %436 to i32
  br label %456

456:                                              ; preds = %484, %434
  %457 = phi i32 [ %453, %434 ], [ %486, %484 ]
  %458 = phi i64 [ 0, %434 ], [ %482, %484 ]
  %459 = icmp eq i32 %457, 0
  br i1 %459, label %481, label %460

460:                                              ; preds = %456
  %461 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %458
  %462 = load i32, i32* %461, align 4
  %463 = load i32, i32* %454, align 4
  %464 = sext i32 %463 to i64
  %465 = getelementptr inbounds %struct.TexelWeight, %struct.TexelWeight* %409, i64 0, i32 1, i64 %436, i64 %464
  store i32 %462, i32* %465, align 4
  %466 = load i32, i32* %454, align 4
  %467 = sext i32 %466 to i64
  %468 = getelementptr inbounds %struct.TexelWeight, %struct.TexelWeight* %409, i64 0, i32 2, i64 %436, i64 %467
  store i32 %457, i32* %468, align 4
  %469 = load i32, i32* %454, align 4
  %470 = add nsw i32 %469, 1
  store i32 %470, i32* %454, align 4
  %471 = sext i32 %462 to i64
  %472 = getelementptr inbounds %struct.TexelWeight, %struct.TexelWeight* %409, i64 0, i32 3, i64 %471
  %473 = load i32, i32* %472, align 4
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds %struct.TexelWeight, %struct.TexelWeight* %409, i64 0, i32 4, i64 %471, i64 %474
  store i32 %455, i32* %475, align 4
  %476 = load i32, i32* %472, align 4
  %477 = sext i32 %476 to i64
  %478 = getelementptr inbounds %struct.TexelWeight, %struct.TexelWeight* %409, i64 0, i32 5, i64 %471, i64 %477
  store i32 %457, i32* %478, align 4
  %479 = load i32, i32* %472, align 4
  %480 = add nsw i32 %479, 1
  store i32 %480, i32* %472, align 4
  br label %481

481:                                              ; preds = %460, %456
  %482 = add nuw nsw i64 %458, 1
  %483 = icmp eq i64 %482, 4
  br i1 %483, label %487, label %484

484:                                              ; preds = %481
  %485 = getelementptr inbounds [4 x i32], [4 x i32]* %7, i64 0, i64 %482
  %486 = load i32, i32* %485, align 4
  br label %456

487:                                              ; preds = %481
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %379) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %374) #5
  %488 = add nuw nsw i64 %435, 1
  %489 = icmp eq i64 %488, %386
  br i1 %489, label %490, label %434

490:                                              ; preds = %487, %417
  %491 = add nuw nsw i64 %418, 1
  %492 = icmp eq i64 %491, %385
  br i1 %492, label %433, label %417

493:                                              ; preds = %433, %521
  %494 = phi i64 [ %522, %521 ], [ 0, %433 ]
  %495 = shl i64 %494, 2
  %496 = add nuw i64 %495, 1084
  %497 = getelementptr i8, i8* %403, i64 %496
  %498 = add nuw i64 %495, 220
  %499 = getelementptr i8, i8* %403, i64 %498
  %500 = getelementptr inbounds %struct.TexelWeight, %struct.TexelWeight* %409, i64 0, i32 0, i64 %494
  %501 = load i32, i32* %500, align 4
  %502 = trunc i32 %501 to i8
  %503 = getelementptr inbounds %struct.decimation_table, %struct.decimation_table* %404, i64 0, i32 1, i64 %494
  store i8 %502, i8* %503, align 1
  %504 = bitcast i8* %499 to i32*
  store i32 0, i32* %504, align 1
  %505 = bitcast i8* %497 to i32*
  store i32 0, i32* %505, align 1
  %506 = icmp sgt i32 %501, 0
  br i1 %506, label %507, label %521

507:                                              ; preds = %493
  %508 = zext i32 %501 to i64
  br label %509

509:                                              ; preds = %509, %507
  %510 = phi i64 [ 0, %507 ], [ %519, %509 ]
  %511 = getelementptr inbounds %struct.TexelWeight, %struct.TexelWeight* %409, i64 0, i32 2, i64 %494, i64 %510
  %512 = load i32, i32* %511, align 4
  %513 = trunc i32 %512 to i8
  %514 = getelementptr inbounds %struct.decimation_table, %struct.decimation_table* %404, i64 0, i32 2, i64 %494, i64 %510
  store i8 %513, i8* %514, align 1
  %515 = getelementptr inbounds %struct.TexelWeight, %struct.TexelWeight* %409, i64 0, i32 1, i64 %494, i64 %510
  %516 = load i32, i32* %515, align 4
  %517 = trunc i32 %516 to i8
  %518 = getelementptr inbounds %struct.decimation_table, %struct.decimation_table* %404, i64 0, i32 3, i64 %494, i64 %510
  store i8 %517, i8* %518, align 1
  %519 = add nuw nsw i64 %510, 1
  %520 = icmp eq i64 %519, %508
  br i1 %520, label %521, label %509

521:                                              ; preds = %509, %493
  %522 = add nuw nsw i64 %494, 1
  %523 = icmp eq i64 %522, %364
  br i1 %523, label %524, label %493

524:                                              ; preds = %521, %433
  %525 = bitcast i8* %403 to i32*
  %526 = trunc i64 %400 to i32
  store i32 %526, i32* %525, align 4
  tail call void @_ZdlPv(i8* nonnull %408) #6
  %527 = sext i32 %399 to i64
  %528 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 5, i64 %527
  %529 = bitcast %struct.decimation_table** %528 to i8**
  store i8* %403, i8** %529, align 8
  %530 = add nsw i32 %399, 1
  br label %531

531:                                              ; preds = %524, %397
  %532 = phi i32 [ %399, %397 ], [ %530, %524 ]
  %533 = add nuw nsw i64 %398, 1
  %534 = icmp eq i64 %533, 13
  br i1 %534, label %394, label %397

535:                                              ; preds = %629, %392
  %536 = phi i64 [ 0, %392 ], [ %634, %629 ]
  %537 = trunc i64 %536 to i32
  %538 = lshr i32 %537, 4
  %539 = and i32 %538, 1
  %540 = lshr i32 %537, 9
  %541 = and i32 %540, 1
  %542 = lshr i32 %537, 10
  %543 = and i32 %542, 1
  %544 = lshr i32 %537, 5
  %545 = and i32 %544, 3
  %546 = and i32 %537, 3
  %547 = icmp eq i32 %546, 0
  br i1 %547, label %573, label %548

548:                                              ; preds = %535
  %549 = lshr i32 %537, 7
  %550 = and i32 %549, 3
  %551 = lshr i32 %537, 2
  %552 = and i32 %551, 3
  switch i32 %552, label %572 [
    i32 0, label %553
    i32 1, label %556
    i32 2, label %559
    i32 3, label %562
  ]

553:                                              ; preds = %548
  %554 = or i32 %550, 4
  %555 = add nuw nsw i32 %545, 2
  br label %592

556:                                              ; preds = %548
  %557 = or i32 %550, 8
  %558 = add nuw nsw i32 %545, 2
  br label %592

559:                                              ; preds = %548
  %560 = add nuw nsw i32 %545, 2
  %561 = or i32 %550, 8
  br label %592

562:                                              ; preds = %548
  %563 = and i32 %549, 1
  %564 = and i32 %537, 256
  %565 = icmp eq i32 %564, 0
  br i1 %565, label %569, label %566

566:                                              ; preds = %562
  %567 = or i32 %563, 2
  %568 = add nuw nsw i32 %545, 2
  br label %592

569:                                              ; preds = %562
  %570 = add nuw nsw i32 %545, 2
  %571 = or i32 %563, 6
  br label %592

572:                                              ; preds = %548
  unreachable

573:                                              ; preds = %535
  %574 = lshr i32 %537, 2
  %575 = and i32 %574, 3
  %576 = icmp eq i32 %575, 0
  br i1 %576, label %611, label %577

577:                                              ; preds = %573
  %578 = lshr i32 %537, 7
  %579 = and i32 %578, 3
  switch i32 %579, label %591 [
    i32 0, label %580
    i32 1, label %582
    i32 2, label %584
    i32 3, label %588
  ]

580:                                              ; preds = %577
  %581 = add nuw nsw i32 %545, 2
  br label %592

582:                                              ; preds = %577
  %583 = add nuw nsw i32 %545, 2
  br label %592

584:                                              ; preds = %577
  %585 = and i32 %540, 3
  %586 = add nuw nsw i32 %545, 6
  %587 = add nuw nsw i32 %585, 6
  br label %592

588:                                              ; preds = %577
  switch i32 %545, label %590 [
    i32 0, label %592
    i32 1, label %589
    i32 2, label %611
    i32 3, label %611
  ]

589:                                              ; preds = %588
  br label %592

590:                                              ; preds = %588
  unreachable

591:                                              ; preds = %577
  unreachable

592:                                              ; preds = %589, %588, %584, %582, %580, %569, %566, %559, %556, %553
  %593 = phi i32 [ %541, %566 ], [ %541, %569 ], [ %541, %559 ], [ %541, %556 ], [ %541, %553 ], [ %541, %589 ], [ 0, %584 ], [ %541, %582 ], [ %541, %580 ], [ %541, %588 ]
  %594 = phi i32 [ %543, %566 ], [ %543, %569 ], [ %543, %559 ], [ %543, %556 ], [ %543, %553 ], [ %543, %589 ], [ 0, %584 ], [ %543, %582 ], [ %543, %580 ], [ %543, %588 ]
  %595 = phi i32 [ %567, %566 ], [ %570, %569 ], [ %560, %559 ], [ %557, %556 ], [ %554, %553 ], [ 10, %589 ], [ %586, %584 ], [ %583, %582 ], [ 12, %580 ], [ 6, %588 ]
  %596 = phi i32 [ %568, %566 ], [ %571, %569 ], [ %561, %559 ], [ %558, %556 ], [ %555, %553 ], [ 6, %589 ], [ %587, %584 ], [ 12, %582 ], [ %581, %580 ], [ 10, %588 ]
  %597 = phi i32 [ %546, %566 ], [ %546, %569 ], [ %546, %559 ], [ %546, %556 ], [ %546, %553 ], [ %575, %589 ], [ %575, %584 ], [ %575, %582 ], [ %575, %580 ], [ %575, %588 ]
  %598 = shl nuw nsw i32 %597, 1
  %599 = or i32 %598, %539
  %600 = add nuw nsw i32 %594, 1
  %601 = mul i32 %600, %595
  %602 = mul i32 %601, %596
  %603 = mul nuw nsw i32 %593, 6
  %604 = add nsw i32 %603, -2
  %605 = add nsw i32 %604, %599
  %606 = tail call i32 @_Z20compute_ise_bitcounti19quantization_method(i32 %602, i32 %605) #7
  %607 = icmp sgt i32 %602, 64
  %608 = add i32 %606, -24
  %609 = icmp ugt i32 %608, 72
  %610 = or i1 %607, %609
  br i1 %610, label %611, label %614

611:                                              ; preds = %592, %588, %588, %573
  %612 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 6, i64 %536, i32 0
  store i8 -1, i8* %612, align 4
  %613 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 6, i64 %536, i32 1
  store i8 -1, i8* %613, align 1
  br label %629

614:                                              ; preds = %592
  %615 = icmp sle i32 %595, %0
  %616 = icmp sle i32 %596, %1
  %617 = and i1 %615, %616
  %618 = zext i1 %617 to i8
  %619 = shl i32 %596, 4
  %620 = add nsw i32 %619, %595
  %621 = sext i32 %620 to i64
  %622 = getelementptr inbounds [256 x i32], [256 x i32]* %5, i64 0, i64 %621
  %623 = load i32, i32* %622, align 4
  %624 = trunc i32 %623 to i8
  %625 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 6, i64 %536, i32 0
  store i8 %624, i8* %625, align 4
  %626 = trunc i32 %605 to i8
  %627 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 6, i64 %536, i32 1
  store i8 %626, i8* %627, align 1
  %628 = trunc i32 %594 to i8
  br label %629

629:                                              ; preds = %614, %611
  %630 = phi i8 [ %628, %614 ], [ -1, %611 ]
  %631 = phi i8 [ %618, %614 ], [ 0, %611 ]
  %632 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 6, i64 %536, i32 2
  store i8 %630, i8* %632, align 2
  %633 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %3, i64 0, i32 6, i64 %536, i32 3
  store i8 %631, i8* %633, align 1
  %634 = add nuw nsw i64 %536, 1
  %635 = icmp eq i64 %634, 2048
  br i1 %635, label %636, label %535

636:                                              ; preds = %629
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %357) #5
  br label %637

637:                                              ; preds = %636, %355
  tail call void @_Z21init_partition_tablesP21block_size_descriptor(%struct.block_size_descriptor* %3) #7
  ret void
}

; Function Attrs: optsize
declare void @_Z21init_partition_tablesP21block_size_descriptor(%struct.block_size_descriptor*) local_unnamed_addr #1

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_Z26term_block_size_descriptorP21block_size_descriptor(%struct.block_size_descriptor* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 8
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %6, label %5

5:                                                ; preds = %15, %1
  ret void

6:                                                ; preds = %1, %15
  %7 = phi i32 [ %16, %15 ], [ %3, %1 ]
  %8 = phi i64 [ %17, %15 ], [ 0, %1 ]
  %9 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %0, i64 0, i32 5, i64 %8
  %10 = load %struct.decimation_table*, %struct.decimation_table** %9, align 8
  %11 = icmp eq %struct.decimation_table* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %6
  %13 = bitcast %struct.decimation_table* %10 to i8*
  tail call void @_ZdlPv(i8* %13) #6
  %14 = load i32, i32* %2, align 8
  br label %15

15:                                               ; preds = %6, %12
  %16 = phi i32 [ %7, %6 ], [ %14, %12 ]
  %17 = add nuw nsw i64 %8, 1
  %18 = sext i32 %16 to i64
  %19 = icmp slt i64 %17, %18
  br i1 %19, label %6, label %5
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nobuiltin nounwind optsize
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nobuiltin nofree optsize
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: optsize
declare i32 @_Z20compute_ise_bitcounti19quantization_method(i32, i32) local_unnamed_addr #1

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind optsize }
attributes #7 = { nounwind optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
