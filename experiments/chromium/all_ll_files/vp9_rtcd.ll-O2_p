; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/common/vp9_rtcd.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/common/vp9_rtcd.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.macroblock = type opaque
%struct.search_site_config = type opaque
%struct.vp9_variance_vtable = type opaque
%struct.mv = type opaque
%struct.yv12_buffer_config = type opaque

@vp9_block_error = common hidden local_unnamed_addr global i64 (i32*, i32*, i64, i64*)* null, align 8
@vp9_block_error_fp = common hidden local_unnamed_addr global i64 (i32*, i32*, i32)* null, align 8
@vp9_diamond_search_sad = common hidden local_unnamed_addr global i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)* null, align 8
@vp9_highbd_iht16x16_256_add = common hidden local_unnamed_addr global void (i32*, i16*, i32, i32, i32)* null, align 8
@vp9_highbd_iht4x4_16_add = common hidden local_unnamed_addr global void (i32*, i16*, i32, i32, i32)* null, align 8
@vp9_highbd_iht8x8_64_add = common hidden local_unnamed_addr global void (i32*, i16*, i32, i32, i32)* null, align 8
@vp9_quantize_fp = common hidden local_unnamed_addr global void (i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)* null, align 8
@vp9_quantize_fp_32x32 = common hidden local_unnamed_addr global void (i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)* null, align 8
@vp9_scale_and_extend_frame = common hidden local_unnamed_addr global void (%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i8, i32)* null, align 8
@once.lock = internal global i32 0, align 4
@.str = private unnamed_addr constant [14 x i8] c"VPX_SIMD_CAPS\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"VPX_SIMD_CAPS_MASK\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_rtcd() local_unnamed_addr #0 {
  %1 = tail call i32 @pthread_once(i32* nonnull @once.lock, void ()* nonnull @setup_rtcd_internal) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @setup_rtcd_internal() #0 {
  %1 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0)) #4
  %2 = icmp eq i8* %1, null
  br i1 %2, label %9, label %3

3:                                                ; preds = %0
  %4 = load i8, i8* %1, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %3
  %7 = tail call i64 @strtol(i8* nocapture nonnull %1, i8** null, i32 0) #4
  %8 = trunc i64 %7 to i32
  br label %72

9:                                                ; preds = %3, %0
  %10 = tail call i8* @getenv(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0)) #4
  %11 = icmp eq i8* %10, null
  br i1 %11, label %18, label %12

12:                                               ; preds = %9
  %13 = load i8, i8* %10, align 1
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %18, label %15

15:                                               ; preds = %12
  %16 = tail call i64 @strtoul(i8* nocapture nonnull %10, i8** null, i32 0) #4
  %17 = trunc i64 %16 to i32
  br label %18

18:                                               ; preds = %15, %12, %9
  %19 = phi i32 [ %17, %15 ], [ -1, %12 ], [ -1, %9 ]
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "cpuid           \0A\09", "={ax},={bx},={cx},={dx},{ax},{cx},~{dirflag},~{fpsr},~{flags}"(i32 0, i32 0) #4, !srcloc !2
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %72, label %23

23:                                               ; preds = %18
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "cpuid           \0A\09", "={ax},={bx},={cx},={dx},{ax},{cx},~{dirflag},~{fpsr},~{flags}"(i32 1, i32 0) #4, !srcloc !3
  %25 = extractvalue { i32, i32, i32, i32 } %24, 2
  %26 = extractvalue { i32, i32, i32, i32 } %24, 3
  %27 = lshr i32 %26, 23
  %28 = and i32 %27, 1
  %29 = lshr i32 %26, 24
  %30 = and i32 %29, 2
  %31 = or i32 %30, %28
  %32 = and i32 %29, 4
  %33 = or i32 %31, %32
  %34 = shl i32 %25, 3
  %35 = and i32 %34, 8
  %36 = or i32 %33, %35
  %37 = lshr i32 %25, 5
  %38 = and i32 %37, 16
  %39 = or i32 %36, %38
  %40 = lshr i32 %25, 14
  %41 = and i32 %40, 32
  %42 = or i32 %39, %41
  %43 = and i32 %25, 402653184
  %44 = icmp eq i32 %43, 402653184
  br i1 %44, label %45, label %69

45:                                               ; preds = %23
  %46 = tail call { i32, i32 } asm sideeffect ".byte 0x0f, 0x01, 0xd0\0A", "={ax},={dx},{cx},~{dirflag},~{fpsr},~{flags}"(i32 0) #4, !srcloc !4
  %47 = extractvalue { i32, i32 } %46, 0
  %48 = and i32 %47, 6
  %49 = icmp eq i32 %48, 6
  br i1 %49, label %50, label %69

50:                                               ; preds = %45
  %51 = or i32 %42, 64
  %52 = icmp ugt i32 %21, 6
  br i1 %52, label %53, label %69

53:                                               ; preds = %50
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "cpuid           \0A\09", "={ax},={bx},={cx},={dx},{ax},{cx},~{dirflag},~{fpsr},~{flags}"(i32 7, i32 0) #4, !srcloc !5
  %55 = extractvalue { i32, i32, i32, i32 } %54, 1
  %56 = and i32 %55, 32
  %57 = icmp eq i32 %56, 0
  %58 = or i32 %42, 192
  %59 = select i1 %57, i32 %51, i32 %58
  %60 = and i32 %55, -805109760
  %61 = icmp eq i32 %60, -805109760
  br i1 %61, label %62, label %69

62:                                               ; preds = %53
  %63 = tail call { i32, i32 } asm sideeffect ".byte 0x0f, 0x01, 0xd0\0A", "={ax},={dx},{cx},~{dirflag},~{fpsr},~{flags}"(i32 0) #4, !srcloc !4
  %64 = extractvalue { i32, i32 } %63, 0
  %65 = and i32 %64, 230
  %66 = icmp eq i32 %65, 230
  %67 = or i32 %59, 256
  %68 = select i1 %66, i32 %67, i32 %59
  br label %69

69:                                               ; preds = %62, %53, %50, %45, %23
  %70 = phi i32 [ %59, %53 ], [ %51, %50 ], [ %42, %45 ], [ %42, %23 ], [ %68, %62 ]
  %71 = and i32 %70, %19
  br label %72

72:                                               ; preds = %6, %18, %69
  %73 = phi i32 [ %8, %6 ], [ %71, %69 ], [ 0, %18 ]
  %74 = trunc i32 %73 to i8
  %75 = icmp slt i8 %74, 0
  %76 = select i1 %75, i64 (i32*, i32*, i64, i64*)* @vp9_block_error_avx2, i64 (i32*, i32*, i64, i64*)* @vp9_block_error_sse2
  store i64 (i32*, i32*, i64, i64*)* %76, i64 (i32*, i32*, i64, i64*)** @vp9_block_error, align 8
  %77 = select i1 %75, i64 (i32*, i32*, i32)* @vp9_block_error_fp_avx2, i64 (i32*, i32*, i32)* @vp9_block_error_fp_sse2
  store i64 (i32*, i32*, i32)* %77, i64 (i32*, i32*, i32)** @vp9_block_error_fp, align 8
  %78 = and i32 %73, 64
  %79 = icmp eq i32 %78, 0
  %80 = select i1 %79, i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)* @vp9_diamond_search_sad_c, i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)* @vp9_diamond_search_sad_avx
  store i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)* %80, i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)** @vp9_diamond_search_sad, align 8
  %81 = and i32 %73, 32
  %82 = icmp ne i32 %81, 0
  %83 = select i1 %82, void (i32*, i16*, i32, i32, i32)* @vp9_highbd_iht16x16_256_add_sse4_1, void (i32*, i16*, i32, i32, i32)* @vp9_highbd_iht16x16_256_add_c
  store void (i32*, i16*, i32, i32, i32)* %83, void (i32*, i16*, i32, i32, i32)** @vp9_highbd_iht16x16_256_add, align 8
  %84 = select i1 %82, void (i32*, i16*, i32, i32, i32)* @vp9_highbd_iht4x4_16_add_sse4_1, void (i32*, i16*, i32, i32, i32)* @vp9_highbd_iht4x4_16_add_c
  store void (i32*, i16*, i32, i32, i32)* %84, void (i32*, i16*, i32, i32, i32)** @vp9_highbd_iht4x4_16_add, align 8
  %85 = select i1 %82, void (i32*, i16*, i32, i32, i32)* @vp9_highbd_iht8x8_64_add_sse4_1, void (i32*, i16*, i32, i32, i32)* @vp9_highbd_iht8x8_64_add_c
  store void (i32*, i16*, i32, i32, i32)* %85, void (i32*, i16*, i32, i32, i32)** @vp9_highbd_iht8x8_64_add, align 8
  %86 = and i32 %73, 16
  %87 = icmp ne i32 %86, 0
  %88 = select i1 %87, void (i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)* @vp9_quantize_fp_ssse3, void (i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)* @vp9_quantize_fp_sse2
  %89 = select i1 %75, void (i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)* @vp9_quantize_fp_avx2, void (i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)* %88
  store void (i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)* %89, void (i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)** @vp9_quantize_fp, align 8
  %90 = select i1 %87, void (i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)* @vp9_quantize_fp_32x32_ssse3, void (i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)* @vp9_quantize_fp_32x32_c
  store void (i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)* %90, void (i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*)** @vp9_quantize_fp_32x32, align 8
  %91 = select i1 %87, void (%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i8, i32)* @vp9_scale_and_extend_frame_ssse3, void (%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i8, i32)* @vp9_scale_and_extend_frame_c
  store void (%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i8, i32)* %91, void (%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i8, i32)** @vp9_scale_and_extend_frame, align 8
  ret void
}

declare i32 @pthread_once(i32*, void ()*) local_unnamed_addr #1

declare i64 @vp9_block_error_sse2(i32*, i32*, i64, i64*) #1

declare i64 @vp9_block_error_avx2(i32*, i32*, i64, i64*) #1

declare i64 @vp9_block_error_fp_sse2(i32*, i32*, i32) #1

declare i64 @vp9_block_error_fp_avx2(i32*, i32*, i32) #1

declare i32 @vp9_diamond_search_sad_c(%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*) #1

declare i32 @vp9_diamond_search_sad_avx(%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*) #1

declare void @vp9_highbd_iht16x16_256_add_c(i32*, i16*, i32, i32, i32) #1

declare void @vp9_highbd_iht16x16_256_add_sse4_1(i32*, i16*, i32, i32, i32) #1

declare void @vp9_highbd_iht4x4_16_add_c(i32*, i16*, i32, i32, i32) #1

declare void @vp9_highbd_iht4x4_16_add_sse4_1(i32*, i16*, i32, i32, i32) #1

declare void @vp9_highbd_iht8x8_64_add_c(i32*, i16*, i32, i32, i32) #1

declare void @vp9_highbd_iht8x8_64_add_sse4_1(i32*, i16*, i32, i32, i32) #1

declare void @vp9_quantize_fp_sse2(i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*) #1

declare void @vp9_quantize_fp_ssse3(i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*) #1

declare void @vp9_quantize_fp_avx2(i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*) #1

declare void @vp9_quantize_fp_32x32_c(i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*) #1

declare void @vp9_quantize_fp_32x32_ssse3(i32*, i64, i32, i16*, i16*, i32*, i32*, i16*, i16*, i16*, i16*) #1

declare void @vp9_scale_and_extend_frame_c(%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i8 zeroext, i32) #1

declare void @vp9_scale_and_extend_frame_ssse3(%struct.yv12_buffer_config*, %struct.yv12_buffer_config*, i8 zeroext, i32) #1

; Function Attrs: nofree nounwind readonly
declare i8* @getenv(i8* nocapture) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare i64 @strtoul(i8* readonly, i8** nocapture, i32) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 -2147110557, i32 -2147110538}
!3 = !{i32 -2147110336, i32 -2147110317}
!4 = !{i32 364860}
!5 = !{i32 -2147109931, i32 -2147109912}
