; ModuleID = '../../base/task/thread_pool/pooled_single_thread_task_runner_manager.cc'
source_filename = "../../base/task/thread_pool/pooled_single_thread_task_runner_manager.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::internal::EnvironmentParams" = type { i8*, i32 }
%"class.base::internal::PooledSingleThreadTaskRunnerManager" = type <{ %"class.base::internal::TrackedRef", %"class.base::internal::DelayedTaskManager"*, %"class.base::WorkerThreadObserver"*, %"class.base::internal::CheckedLock", %"class.std::__1::vector.6", i32, [4 x i8], [4 x [2 x %"class.base::internal::WorkerThread"*]], i8, [7 x i8] }>
%"class.base::internal::TrackedRef" = type { %"class.base::internal::TaskTracker"*, %"class.base::internal::TrackedRefFactory"* }
%"class.base::internal::TaskTracker" = type { i32 (...)**, %"class.base::TaskAnnotator", %"class.std::__1::basic_string", i8, %"class.std::__1::unique_ptr.43", %"struct.std::__1::atomic", %"struct.std::__1::atomic.49", %"class.base::internal::CheckedLock", %"class.std::__1::unique_ptr.53", %"class.base::OnceCallback", %"class.base::internal::CheckedLock", %"class.std::__1::unique_ptr.63", %"class.base::internal::TrackedRefFactory" }
%"class.base::TaskAnnotator" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.39 }
%union.anon.39 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.base::internal::TaskTracker::State"* }
%"class.base::internal::TaskTracker::State" = type opaque
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.std::__1::atomic.49" = type { %"struct.std::__1::__atomic_base.50" }
%"struct.std::__1::__atomic_base.50" = type { %"struct.std::__1::__cxx_atomic_impl.51" }
%"struct.std::__1::__cxx_atomic_impl.51" = type { %"struct.std::__1::__cxx_atomic_base_impl.52" }
%"struct.std::__1::__cxx_atomic_base_impl.52" = type { i32 }
%"class.std::__1::unique_ptr.53" = type { %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"class.base::ConditionVariable"* }
%"class.base::ConditionVariable" = type <{ %union.pthread_cond_t, %union.pthread_mutex_t*, i8, [7 x i8] }>
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.56, %union.anon.58, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.56 = type { i64 }
%union.anon.58 = type { i64 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"class.base::WaitableEvent"* }
%"class.base::WaitableEvent" = type <{ %class.scoped_refptr.15, i8, [7 x i8] }>
%class.scoped_refptr.15 = type { %"struct.base::WaitableEvent::WaitableEventKernel"* }
%"struct.base::WaitableEvent::WaitableEventKernel" = type { %"class.base::RefCountedThreadSafe.16", %"class.base::Lock", i8, i8, %"class.std::__1::list" }
%"class.base::RefCountedThreadSafe.16" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.17" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { i64 }
%"class.base::internal::TrackedRefFactory" = type { %"class.base::internal::TaskTracker"*, %"class.base::AtomicRefCount", [4 x i8], %"class.absl::optional", %"class.absl::optional.30" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, [7 x i8], %union.anon }
%union.anon = type { %"class.base::WaitableEvent" }
%"class.absl::optional.30" = type { %"class.absl::optional_internal::optional_data.31" }
%"class.absl::optional_internal::optional_data.31" = type { %"class.absl::optional_internal::optional_data_base.32" }
%"class.absl::optional_internal::optional_data_base.32" = type { %"class.absl::optional_internal::optional_data_dtor_base.33" }
%"class.absl::optional_internal::optional_data_dtor_base.33" = type { i8, %union.anon.34 }
%union.anon.34 = type { %"class.base::internal::TrackedRef" }
%"class.base::WorkerThreadObserver" = type opaque
%"class.base::internal::CheckedLock" = type { %"class.base::Lock" }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %class.scoped_refptr.8*, %class.scoped_refptr.8*, %"class.std::__1::__compressed_pair.9" }
%class.scoped_refptr.8 = type { %"class.base::internal::WorkerThread"* }
%"class.base::internal::WorkerThread" = type <{ %"class.base::PlatformThread::Delegate", %"class.base::RefCountedThreadSafe.14", [4 x i8], %class.scoped_refptr.8, %"class.base::internal::CheckedLock", %"class.base::PlatformThreadHandle", %"class.base::TimeTicks", %"class.base::WaitableEvent", %"class.base::AtomicFlag", [7 x i8], %"class.std::__1::unique_ptr", %"class.base::internal::TrackedRef", %"class.base::WorkerThreadObserver"*, i32, i32, %"class.base::AtomicFlag", [7 x i8] }>
%"class.base::PlatformThread::Delegate" = type { i32 (...)** }
%"class.base::RefCountedThreadSafe.14" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::PlatformThreadHandle" = type { i64 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { %"class.base::internal::WorkerThread::Delegate"* }
%"class.base::internal::WorkerThread::Delegate" = type { i32 (...)** }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.22" }
%"struct.std::__1::atomic.22" = type { %"struct.std::__1::__atomic_base.23" }
%"struct.std::__1::__atomic_base.23" = type { %"struct.std::__1::__atomic_base.24" }
%"struct.std::__1::__atomic_base.24" = type { %"struct.std::__1::__cxx_atomic_impl.25" }
%"struct.std::__1::__cxx_atomic_impl.25" = type { %"struct.std::__1::__cxx_atomic_base_impl.26" }
%"struct.std::__1::__cxx_atomic_base_impl.26" = type { i8 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %class.scoped_refptr.8* }
%"class.base::internal::DelayedTaskManager" = type { %"class.base::RepeatingCallback", %"class.base::TickClock"*, %"class.base::internal::CheckedLock", %class.scoped_refptr.1, %"class.base::internal::IntrusiveHeap" }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::TickClock" = type { i32 (...)** }
%class.scoped_refptr.1 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.2" }>
%"class.base::RefCountedThreadSafe.2" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::internal::IntrusiveHeap" = type { %"class.base::IntrusiveHeap" }
%"class.base::IntrusiveHeap" = type { %"struct.base::IntrusiveHeap<base::internal::DelayedTaskManager::DelayedTask, base::internal::IntrusiveHeapImpl<base::internal::DelayedTaskManager::DelayedTask>::GreaterUsingLessEqual, base::DefaultHeapHandleAccessor<base::internal::DelayedTaskManager::DelayedTask> >::Impl" }
%"struct.base::IntrusiveHeap<base::internal::DelayedTaskManager::DelayedTask, base::internal::IntrusiveHeapImpl<base::internal::DelayedTaskManager::DelayedTask>::GreaterUsingLessEqual, base::DefaultHeapHandleAccessor<base::internal::DelayedTaskManager::DelayedTask> >::Impl" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.base::internal::DelayedTaskManager::DelayedTask"*, %"struct.base::internal::DelayedTaskManager::DelayedTask"*, %"class.std::__1::__compressed_pair" }
%"struct.base::internal::DelayedTaskManager::DelayedTask" = type <{ %"struct.base::internal::Task", %"class.base::OnceCallback.3", %class.scoped_refptr.4, i8, [7 x i8] }>
%"struct.base::internal::Task" = type { %"struct.base::PendingTask.base", [3 x i8] }
%"struct.base::PendingTask.base" = type <{ %"class.base::OnceCallback", %"class.base::Location", %"class.base::TimeTicks", %"class.base::TimeTicks", %"struct.std::__1::array", i32, [4 x i8], i8*, i32, i8 }>
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"struct.std::__1::array" = type { [4 x i8*] }
%"class.base::OnceCallback.3" = type { %"class.base::internal::CallbackBase" }
%class.scoped_refptr.4 = type { %"class.base::TaskRunner"* }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.2", [4 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.base::internal::DelayedTaskManager::DelayedTask"* }
%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate" = type { %"class.base::internal::WorkerThread::Delegate", %"class.base::internal::CheckedLock", i8, %"class.base::internal::TrackedRef", %"class.std::__1::basic_string", i32, %"class.base::internal::WorkerThread"*, %"class.base::internal::PriorityQueue", %"class.base::internal::(anonymous namespace)::AtomicThreadRefChecker" }
%"class.base::internal::PriorityQueue" = type <{ %"class.base::internal::IntrusiveHeap.69", %"struct.std::__1::array.79", i8, [7 x i8] }>
%"class.base::internal::IntrusiveHeap.69" = type { %"class.base::IntrusiveHeap.70" }
%"class.base::IntrusiveHeap.70" = type { %"struct.base::IntrusiveHeap<base::internal::PriorityQueue::TaskSourceAndSortKey, base::internal::IntrusiveHeapImpl<base::internal::PriorityQueue::TaskSourceAndSortKey>::GreaterUsingLessEqual, base::DefaultHeapHandleAccessor<base::internal::PriorityQueue::TaskSourceAndSortKey> >::Impl" }
%"struct.base::IntrusiveHeap<base::internal::PriorityQueue::TaskSourceAndSortKey, base::internal::IntrusiveHeapImpl<base::internal::PriorityQueue::TaskSourceAndSortKey>::GreaterUsingLessEqual, base::DefaultHeapHandleAccessor<base::internal::PriorityQueue::TaskSourceAndSortKey> >::Impl" = type { %"class.std::__1::vector.72" }
%"class.std::__1::vector.72" = type { %"class.std::__1::__vector_base.73" }
%"class.std::__1::__vector_base.73" = type { %"class.base::internal::PriorityQueue::TaskSourceAndSortKey"*, %"class.base::internal::PriorityQueue::TaskSourceAndSortKey"*, %"class.std::__1::__compressed_pair.74" }
%"class.base::internal::PriorityQueue::TaskSourceAndSortKey" = type opaque
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.base::internal::PriorityQueue::TaskSourceAndSortKey"* }
%"struct.std::__1::array.79" = type { [3 x i64] }
%"class.base::internal::(anonymous namespace)::AtomicThreadRefChecker" = type { %"class.base::AtomicFlag", %"class.base::PlatformThreadRef" }
%"class.base::PlatformThreadRef" = type { i64 }
%"class.base::internal::TaskSourceSortKey" = type { i8, i8, %"class.base::TimeTicks" }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskTraits" = type { %"struct.base::TaskTraitsExtensionStorage", i8, i8, i8, i8, i8, i8 }
%"struct.base::TaskTraitsExtensionStorage" = type { i8, %"struct.std::__1::array.81" }
%"struct.std::__1::array.81" = type { [8 x i8] }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.base::internal::Sequence" = type { %"class.base::internal::TaskSource.base", %"class.base::SequenceToken", %"class.std::__1::queue", %"struct.std::__1::atomic.89", i8, %"class.base::internal::SequenceLocalStorageMap" }
%"class.base::internal::TaskSource.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.84", %"class.base::TaskTraits", %"struct.std::__1::atomic.85", [4 x i8], %"class.base::internal::CheckedLock", %"class.base::HeapHandle", %"class.base::TaskRunner"*, i32 }>
%"class.base::RefCountedThreadSafe.84" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.std::__1::atomic.85" = type { %"struct.std::__1::__atomic_base.86" }
%"struct.std::__1::__atomic_base.86" = type { %"struct.std::__1::__cxx_atomic_impl.87" }
%"struct.std::__1::__cxx_atomic_impl.87" = type { %"struct.std::__1::__cxx_atomic_base_impl.88" }
%"struct.std::__1::__cxx_atomic_base_impl.88" = type { i8 }
%"class.base::HeapHandle" = type { i64 }
%"class.base::SequenceToken" = type { i32 }
%"class.std::__1::queue" = type { %"class.base::circular_deque" }
%"class.base::circular_deque" = type { %"class.base::internal::VectorBuffer", i64, i64 }
%"class.base::internal::VectorBuffer" = type { %"struct.base::internal::Task"*, i64 }
%"struct.std::__1::atomic.89" = type { %"struct.std::__1::__atomic_base.90" }
%"struct.std::__1::__atomic_base.90" = type { %"struct.std::__1::__cxx_atomic_impl.91" }
%"struct.std::__1::__cxx_atomic_impl.91" = type { %"struct.std::__1::__cxx_atomic_base_impl.92" }
%"struct.std::__1::__cxx_atomic_base_impl.92" = type { %"class.base::TimeTicks" }
%"class.base::internal::SequenceLocalStorageMap" = type { %"class.base::flat_map" }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.93" }
%"class.std::__1::vector.93" = type { %"class.std::__1::__vector_base.94" }
%"class.std::__1::__vector_base.94" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.95" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"struct.std::__1::pair"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.base::internal::RegisteredTaskSource" = type { %class.scoped_refptr.109, %"class.base::internal::TaskTracker"* }
%class.scoped_refptr.109 = type { %"class.base::internal::TaskSource"* }
%"class.base::internal::TaskSource" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.84", %"class.base::TaskTraits", %"struct.std::__1::atomic.85", [4 x i8], %"class.base::internal::CheckedLock", %"class.base::HeapHandle", %"class.base::TaskRunner"*, i32, [4 x i8] }>
%"struct.base::internal::TransactionWithRegisteredTaskSource" = type { %"class.base::internal::RegisteredTaskSource", %"class.base::internal::TaskSource::Transaction" }
%"class.base::internal::TaskSource::Transaction" = type { %"class.base::internal::TaskSource"* }
%"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner" = type { %"class.base::SingleThreadTaskRunner.base", %"class.base::internal::PooledSingleThreadTaskRunnerManager"*, %"class.base::internal::WorkerThread"*, i32, %class.scoped_refptr.83 }
%"class.base::SingleThreadTaskRunner.base" = type { %"class.base::SequencedTaskRunner.base" }
%class.scoped_refptr.83 = type { %"class.base::internal::Sequence"* }
%"struct.base::PendingTask" = type <{ %"class.base::OnceCallback", %"class.base::Location", %"class.base::TimeTicks", %"class.base::TimeTicks", %"struct.std::__1::array", i32, [4 x i8], i8*, i32, i8, [3 x i8] }>
%"class.base::internal::Sequence::Transaction" = type { %"class.base::internal::TaskSource::Transaction" }

$_ZNSt3__16vectorI13scoped_refptrIN4base8internal12WorkerThreadEENS_9allocatorIS5_EEE6assignIPS5_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISC_E9referenceEEE5valueEvE4typeESC_SC_ = comdat any

$_ZNSt3__16vectorI13scoped_refptrIN4base8internal12WorkerThreadEENS_9allocatorIS5_EEE24__emplace_back_slow_pathIJS5_EEEvDpOT_ = comdat any

$_ZN4base8internal35PooledSingleThreadTaskRunnerManager28PooledSingleThreadTaskRunner15PostDelayedTaskERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeDeltaE = comdat any

$_ZN4base8internal35PooledSingleThreadTaskRunnerManager28PooledSingleThreadTaskRunnerD2Ev = comdat any

$_ZN4base8internal35PooledSingleThreadTaskRunnerManager28PooledSingleThreadTaskRunnerD0Ev = comdat any

$_ZN4base8internal35PooledSingleThreadTaskRunnerManager28PooledSingleThreadTaskRunner26PostNonNestableDelayedTaskERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeDeltaE = comdat any

$_ZNK4base8internal35PooledSingleThreadTaskRunnerManager28PooledSingleThreadTaskRunner26RunsTasksInCurrentSequenceEv = comdat any

$_ZTVN4base8internal35PooledSingleThreadTaskRunnerManager28PooledSingleThreadTaskRunnerE = comdat any

@_ZN4base8internal12_GLOBAL__N_118g_manager_is_aliveE = internal unnamed_addr global i1 false, align 1
@_ZN4base8internalL18kEnvironmentParamsE = internal unnamed_addr constant [4 x %"struct.base::internal::EnvironmentParams"] [%"struct.base::internal::EnvironmentParams" { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 1 }, %"struct.base::internal::EnvironmentParams" { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i32 0, i32 0), i32 1 }, %"struct.base::internal::EnvironmentParams" { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0), i32 0 }, %"struct.base::internal::EnvironmentParams" { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i32 0, i32 0), i32 0 }], align 16
@.str.1 = private unnamed_addr constant [7 x i8] c"Shared\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"Foreground\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"ForegroundBlocking\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"Background\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"BackgroundBlocking\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"ThreadPoolSingleThread%s%d\00", align 1
@_ZTVN4base8internal12_GLOBAL__N_120WorkerThreadDelegateE = internal unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*)* @_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegateD2Ev to i8*), i8* bitcast (void (%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*)* @_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegateD0Ev to i8*), i8* bitcast (i32 (%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*)* @_ZNK4base8internal12_GLOBAL__N_120WorkerThreadDelegate14GetThreadLabelEv to i8*), i8* bitcast (void (%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*, %"class.base::internal::WorkerThread"*)* @_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegate11OnMainEntryEPKNS0_12WorkerThreadE to i8*), i8* bitcast (void (%"class.base::internal::RegisteredTaskSource"*, %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*, %"class.base::internal::WorkerThread"*)* @_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegate7GetWorkEPNS0_12WorkerThreadE to i8*), i8* bitcast (void (%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*, %"class.base::internal::RegisteredTaskSource"*)* @_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegate14DidProcessTaskENS0_20RegisteredTaskSourceE to i8*), i8* bitcast (i64 (%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*)* @_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegate15GetSleepTimeoutEv to i8*), i8* bitcast (void (%"class.base::internal::WorkerThread::Delegate"*, %"class.base::WaitableEvent"*)* @_ZN4base8internal12WorkerThread8Delegate11WaitForWorkEPNS_13WaitableEventE to i8*), i8* bitcast (void (%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*, %"class.base::internal::WorkerThread"*)* @_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegate10OnMainExitEPNS0_12WorkerThreadE to i8*)] }, align 8
@_ZTVN4base8internal35PooledSingleThreadTaskRunnerManager28PooledSingleThreadTaskRunnerE = linkonce_odr hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)* @_ZN4base8internal35PooledSingleThreadTaskRunnerManager28PooledSingleThreadTaskRunner15PostDelayedTaskERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeDeltaE to i8*), i8* bitcast (void (%"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"*)* @_ZN4base8internal35PooledSingleThreadTaskRunnerManager28PooledSingleThreadTaskRunnerD2Ev to i8*), i8* bitcast (void (%"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"*)* @_ZN4base8internal35PooledSingleThreadTaskRunnerManager28PooledSingleThreadTaskRunnerD0Ev to i8*), i8* bitcast (void (%"class.base::TaskRunner"*)* @_ZNK4base10TaskRunner10OnDestructEv to i8*), i8* bitcast (i1 (%"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)* @_ZN4base8internal35PooledSingleThreadTaskRunnerManager28PooledSingleThreadTaskRunner26PostNonNestableDelayedTaskERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeDeltaE to i8*), i8* bitcast (i1 (%"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"*)* @_ZNK4base8internal35PooledSingleThreadTaskRunnerManager28PooledSingleThreadTaskRunner26RunsTasksInCurrentSequenceEv to i8*)] }, comdat, align 8

@_ZN4base8internal35PooledSingleThreadTaskRunnerManagerC1ENS0_10TrackedRefINS0_11TaskTrackerEEEPNS0_18DelayedTaskManagerE = hidden unnamed_addr alias void (%"class.base::internal::PooledSingleThreadTaskRunnerManager"*, %"class.base::internal::TrackedRef"*, %"class.base::internal::DelayedTaskManager"*), void (%"class.base::internal::PooledSingleThreadTaskRunnerManager"*, %"class.base::internal::TrackedRef"*, %"class.base::internal::DelayedTaskManager"*)* @_ZN4base8internal35PooledSingleThreadTaskRunnerManagerC2ENS0_10TrackedRefINS0_11TaskTrackerEEEPNS0_18DelayedTaskManagerE
@_ZN4base8internal35PooledSingleThreadTaskRunnerManagerD1Ev = hidden unnamed_addr alias void (%"class.base::internal::PooledSingleThreadTaskRunnerManager"*), void (%"class.base::internal::PooledSingleThreadTaskRunnerManager"*)* @_ZN4base8internal35PooledSingleThreadTaskRunnerManagerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal35PooledSingleThreadTaskRunnerManagerC2ENS0_10TrackedRefINS0_11TaskTrackerEEEPNS0_18DelayedTaskManagerE(%"class.base::internal::PooledSingleThreadTaskRunnerManager"*, %"class.base::internal::TrackedRef"* nocapture, %"class.base::internal::DelayedTaskManager"*) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.base::internal::TrackedRef"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.base::internal::TrackedRef", %"class.base::internal::TrackedRef"* %1, i64 0, i32 1
  %9 = bitcast %"class.base::internal::TrackedRefFactory"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.base::internal::TrackedRefFactory"** %7 to i64*
  store i64 %10, i64* %11, align 8
  store %"class.base::internal::TrackedRefFactory"* null, %"class.base::internal::TrackedRefFactory"** %8, align 8
  %12 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 1
  store %"class.base::internal::DelayedTaskManager"* %2, %"class.base::internal::DelayedTaskManager"** %12, align 8
  %13 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 2
  store %"class.base::WorkerThreadObserver"* null, %"class.base::WorkerThreadObserver"** %13, align 8
  %14 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 3, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"* %14) #12
  %15 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 4
  %16 = getelementptr %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 7, i64 0, i64 0
  %17 = bitcast %"class.std::__1::vector.6"* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 28, i1 false)
  %18 = bitcast %"class.base::internal::WorkerThread"** %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 65, i1 false)
  store i1 true, i1* @_ZN4base8internal12_GLOBAL__N_118g_manager_is_aliveE, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal35PooledSingleThreadTaskRunnerManagerD2Ev(%"class.base::internal::PooledSingleThreadTaskRunnerManager"*) unnamed_addr #0 align 2 {
  store i1 false, i1* @_ZN4base8internal12_GLOBAL__N_118g_manager_is_aliveE, align 1
  %2 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 4
  %3 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %2, i64 0, i32 0, i32 0
  %4 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %3, align 8
  %5 = icmp eq %class.scoped_refptr.8* %4, null
  br i1 %5, label %36, label %6

6:                                                ; preds = %1
  %7 = bitcast %class.scoped_refptr.8* %4 to i8*
  %8 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 4, i32 0, i32 1
  %9 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %8, align 8
  %10 = icmp eq %class.scoped_refptr.8* %9, %4
  br i1 %10, label %34, label %11

11:                                               ; preds = %6, %29
  %12 = phi %class.scoped_refptr.8* [ %13, %29 ], [ %9, %6 ]
  %13 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %12, i64 -1
  %14 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %13, i64 0, i32 0
  %15 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %14, align 8
  %16 = icmp eq %"class.base::internal::WorkerThread"* %15, null
  br i1 %16, label %29, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %15, i64 0, i32 1
  %19 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = atomicrmw sub i32* %19, i32 1 acq_rel
  %21 = icmp eq i32 %20, 1
  br i1 %21, label %22, label %29

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %18, i64 -2
  %24 = bitcast %"class.base::RefCountedThreadSafe.14"* %23 to %"class.base::internal::WorkerThread"*
  %25 = bitcast %"class.base::RefCountedThreadSafe.14"* %23 to void (%"class.base::internal::WorkerThread"*)***
  %26 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %26, i64 3
  %28 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %27, align 8
  tail call void %28(%"class.base::internal::WorkerThread"* nonnull %24) #12
  br label %29

29:                                               ; preds = %22, %17, %11
  %30 = icmp eq %class.scoped_refptr.8* %13, %4
  br i1 %30, label %31, label %11

31:                                               ; preds = %29
  %32 = bitcast %"class.std::__1::vector.6"* %2 to i8**
  %33 = load i8*, i8** %32, align 8
  br label %34

34:                                               ; preds = %31, %6
  %35 = phi i8* [ %33, %31 ], [ %7, %6 ]
  store %class.scoped_refptr.8* %4, %class.scoped_refptr.8** %8, align 8
  tail call void @_ZdlPv(i8* %35) #13
  br label %36

36:                                               ; preds = %1, %34
  %37 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 3, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %37) #12
  %38 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 0, i32 1
  %39 = load %"class.base::internal::TrackedRefFactory"*, %"class.base::internal::TrackedRefFactory"** %38, align 8
  %40 = icmp eq %"class.base::internal::TrackedRefFactory"* %39, null
  br i1 %40, label %53, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds %"class.base::internal::TrackedRefFactory", %"class.base::internal::TrackedRefFactory"* %39, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = atomicrmw sub i32* %42, i32 1 acq_rel
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %45, label %53

45:                                               ; preds = %41
  %46 = load %"class.base::internal::TrackedRefFactory"*, %"class.base::internal::TrackedRefFactory"** %38, align 8
  %47 = getelementptr inbounds %"class.base::internal::TrackedRefFactory", %"class.base::internal::TrackedRefFactory"* %46, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %48 = load i8, i8* %47, align 8, !range !2
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %50, label %51, !prof !3

50:                                               ; preds = %45
  tail call void @llvm.trap() #12
  unreachable

51:                                               ; preds = %45
  %52 = getelementptr inbounds %"class.base::internal::TrackedRefFactory", %"class.base::internal::TrackedRefFactory"* %46, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2, i32 0
  tail call void @_ZN4base13WaitableEvent6SignalEv(%"class.base::WaitableEvent"* %52) #12
  br label %53

53:                                               ; preds = %36, %41, %51
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal35PooledSingleThreadTaskRunnerManager5StartEPNS_20WorkerThreadObserverE(%"class.base::internal::PooledSingleThreadTaskRunnerManager"*, %"class.base::WorkerThreadObserver"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::vector.6", align 8
  %4 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 2
  store %"class.base::WorkerThreadObserver"* %1, %"class.base::WorkerThreadObserver"** %4, align 8
  %5 = bitcast %"class.std::__1::vector.6"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #12
  %6 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %3, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %3, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 0, i64 24, i1 false) #12
  %8 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 3
  %9 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %8, i64 0, i32 0, i32 0, i32 0
  %10 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %9) #12
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %14, label %12, !prof !4

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %8, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %13) #12
  br label %14

14:                                               ; preds = %2, %12
  %15 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 8
  store i8 1, i8* %15, align 8
  %16 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 4
  %17 = icmp eq %"class.std::__1::vector.6"* %3, %16
  br i1 %17, label %23, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %16, i64 0, i32 0, i32 0
  %20 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %19, align 8
  %21 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 4, i32 0, i32 1
  %22 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %21, align 8
  call void @_ZNSt3__16vectorI13scoped_refptrIN4base8internal12WorkerThreadEENS_9allocatorIS5_EEE6assignIPS5_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISC_E9referenceEEE5valueEvE4typeESC_SC_(%"class.std::__1::vector.6"* nonnull %3, %class.scoped_refptr.8* %20, %class.scoped_refptr.8* %22) #12
  br label %23

23:                                               ; preds = %14, %18
  %24 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %9) #12
  %25 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %6, align 8
  %26 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %7, align 8
  %27 = icmp eq %class.scoped_refptr.8* %25, %26
  br i1 %27, label %30, label %63

28:                                               ; preds = %87
  %29 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %6, align 8
  br label %30

30:                                               ; preds = %28, %23
  %31 = phi %class.scoped_refptr.8* [ %29, %28 ], [ %25, %23 ]
  %32 = icmp eq %class.scoped_refptr.8* %31, null
  br i1 %32, label %62, label %33

33:                                               ; preds = %30
  %34 = bitcast %class.scoped_refptr.8* %31 to i8*
  %35 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %7, align 8
  %36 = icmp eq %class.scoped_refptr.8* %35, %31
  br i1 %36, label %60, label %37

37:                                               ; preds = %33, %55
  %38 = phi %class.scoped_refptr.8* [ %39, %55 ], [ %35, %33 ]
  %39 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %38, i64 -1
  %40 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %39, i64 0, i32 0
  %41 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %40, align 8
  %42 = icmp eq %"class.base::internal::WorkerThread"* %41, null
  br i1 %42, label %55, label %43

43:                                               ; preds = %37
  %44 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %41, i64 0, i32 1
  %45 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %44, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = atomicrmw sub i32* %45, i32 1 acq_rel
  %47 = icmp eq i32 %46, 1
  br i1 %47, label %48, label %55

48:                                               ; preds = %43
  %49 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %44, i64 -2
  %50 = bitcast %"class.base::RefCountedThreadSafe.14"* %49 to %"class.base::internal::WorkerThread"*
  %51 = bitcast %"class.base::RefCountedThreadSafe.14"* %49 to void (%"class.base::internal::WorkerThread"*)***
  %52 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %51, align 8
  %53 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %52, i64 3
  %54 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %53, align 8
  call void %54(%"class.base::internal::WorkerThread"* nonnull %50) #12
  br label %55

55:                                               ; preds = %48, %43, %37
  %56 = icmp eq %class.scoped_refptr.8* %39, %31
  br i1 %56, label %57, label %37

57:                                               ; preds = %55
  %58 = bitcast %"class.std::__1::vector.6"* %3 to i8**
  %59 = load i8*, i8** %58, align 8
  br label %60

60:                                               ; preds = %57, %33
  %61 = phi i8* [ %59, %57 ], [ %34, %33 ]
  store %class.scoped_refptr.8* %31, %class.scoped_refptr.8** %7, align 8
  call void @_ZdlPv(i8* %61) #13
  br label %62

62:                                               ; preds = %30, %60
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #12
  ret void

63:                                               ; preds = %23, %87
  %64 = phi %class.scoped_refptr.8* [ %88, %87 ], [ %25, %23 ]
  %65 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %64, i64 0, i32 0
  %66 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %65, align 8
  %67 = icmp eq %"class.base::internal::WorkerThread"* %66, null
  br i1 %67, label %68, label %71

68:                                               ; preds = %63
  %69 = load %"class.base::WorkerThreadObserver"*, %"class.base::WorkerThreadObserver"** %4, align 8
  %70 = call zeroext i1 @_ZN4base8internal12WorkerThread5StartEPNS_20WorkerThreadObserverE(%"class.base::internal::WorkerThread"* null, %"class.base::WorkerThreadObserver"* %69) #12
  br label %87

71:                                               ; preds = %63
  %72 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %66, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = atomicrmw add i32* %72, i32 1 monotonic
  %74 = load %"class.base::WorkerThreadObserver"*, %"class.base::WorkerThreadObserver"** %4, align 8
  %75 = call zeroext i1 @_ZN4base8internal12WorkerThread5StartEPNS_20WorkerThreadObserverE(%"class.base::internal::WorkerThread"* nonnull %66, %"class.base::WorkerThreadObserver"* %74) #12
  %76 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %66, i64 0, i32 1
  %77 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %76, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = atomicrmw sub i32* %77, i32 1 acq_rel
  %79 = icmp eq i32 %78, 1
  br i1 %79, label %80, label %87

80:                                               ; preds = %71
  %81 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %76, i64 -2
  %82 = bitcast %"class.base::RefCountedThreadSafe.14"* %81 to %"class.base::internal::WorkerThread"*
  %83 = bitcast %"class.base::RefCountedThreadSafe.14"* %81 to void (%"class.base::internal::WorkerThread"*)***
  %84 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %83, align 8
  %85 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %84, i64 3
  %86 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %85, align 8
  call void %86(%"class.base::internal::WorkerThread"* nonnull %82) #12
  br label %87

87:                                               ; preds = %68, %71, %80
  %88 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %64, i64 1
  %89 = icmp eq %class.scoped_refptr.8* %88, %26
  br i1 %89, label %28, label %63
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN4base8internal12WorkerThread5StartEPNS_20WorkerThreadObserverE(%"class.base::internal::WorkerThread"*, %"class.base::WorkerThreadObserver"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal35PooledSingleThreadTaskRunnerManager21DidUpdateCanRunPolicyEv(%"class.base::internal::PooledSingleThreadTaskRunnerManager"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.std::__1::vector.6", align 8
  %3 = bitcast %"class.std::__1::vector.6"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #12
  %4 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %2, i64 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %2, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 24, i1 false) #12
  %6 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 3
  %7 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %6, i64 0, i32 0, i32 0, i32 0
  %8 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %7) #12
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10, !prof !4

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %6, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %11) #12
  br label %12

12:                                               ; preds = %1, %10
  %13 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 8
  %14 = load i8, i8* %13, align 8, !range !2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %29, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 4
  %18 = icmp eq %"class.std::__1::vector.6"* %2, %17
  br i1 %18, label %24, label %19

19:                                               ; preds = %16
  %20 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %17, i64 0, i32 0, i32 0
  %21 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %20, align 8
  %22 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 4, i32 0, i32 1
  %23 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %22, align 8
  call void @_ZNSt3__16vectorI13scoped_refptrIN4base8internal12WorkerThreadEENS_9allocatorIS5_EEE6assignIPS5_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISC_E9referenceEEE5valueEvE4typeESC_SC_(%"class.std::__1::vector.6"* nonnull %2, %class.scoped_refptr.8* %21, %class.scoped_refptr.8* %23) #12
  br label %24

24:                                               ; preds = %16, %19
  %25 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %7) #12
  %26 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %4, align 8
  %27 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %5, align 8
  %28 = icmp eq %class.scoped_refptr.8* %26, %27
  br i1 %28, label %71, label %31

29:                                               ; preds = %12
  %30 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %7) #12
  br label %103

31:                                               ; preds = %24, %66
  %32 = phi %class.scoped_refptr.8* [ %67, %66 ], [ %26, %24 ]
  %33 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %32, i64 0, i32 0
  %34 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %33, align 8
  %35 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %34, i64 0, i32 10, i32 0, i32 0, i32 0
  %36 = bitcast %"class.base::internal::WorkerThread::Delegate"** %35 to %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"**
  %37 = load %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*, %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"** %36, align 8
  %38 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %37, i64 0, i32 1
  %39 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %38, i64 0, i32 0, i32 0, i32 0
  %40 = call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %39) #12
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %44, label %42, !prof !4

42:                                               ; preds = %31
  %43 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %38, i64 0, i32 0, i32 0
  call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %43) #12
  br label %44

44:                                               ; preds = %42, %31
  %45 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %37, i64 0, i32 2
  %46 = load i8, i8* %45, align 8, !range !2
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %64

48:                                               ; preds = %44
  %49 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %37, i64 0, i32 7
  %50 = call zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"* %49) #12
  br i1 %50, label %62, label %51

51:                                               ; preds = %48
  %52 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %37, i64 0, i32 3, i32 0
  %53 = load %"class.base::internal::TaskTracker"*, %"class.base::internal::TaskTracker"** %52, align 8
  %54 = call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %49) #12
  %55 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %54, i64 0, i32 0
  %56 = load i8, i8* %55, align 8
  %57 = call zeroext i1 @_ZNK4base8internal11TaskTracker14CanRunPriorityENS_12TaskPriorityE(%"class.base::internal::TaskTracker"* %53, i8 zeroext %56) #12
  br i1 %57, label %58, label %62

58:                                               ; preds = %51
  store i8 1, i8* %45, align 8
  %59 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %39) #12
  %60 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %37, i64 0, i32 6
  %61 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %60, align 8
  call void @_ZN4base8internal12WorkerThread6WakeUpEv(%"class.base::internal::WorkerThread"* %61) #12
  br label %66

62:                                               ; preds = %51, %48
  %63 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %39) #12
  br label %66

64:                                               ; preds = %44
  %65 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %39) #12
  br label %66

66:                                               ; preds = %58, %62, %64
  %67 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %32, i64 1
  %68 = icmp eq %class.scoped_refptr.8* %67, %27
  br i1 %68, label %69, label %31

69:                                               ; preds = %66
  %70 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %4, align 8
  br label %71

71:                                               ; preds = %69, %24
  %72 = phi %class.scoped_refptr.8* [ %70, %69 ], [ %26, %24 ]
  %73 = icmp eq %class.scoped_refptr.8* %72, null
  br i1 %73, label %103, label %74

74:                                               ; preds = %71
  %75 = bitcast %class.scoped_refptr.8* %72 to i8*
  %76 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %5, align 8
  %77 = icmp eq %class.scoped_refptr.8* %76, %72
  br i1 %77, label %101, label %78

78:                                               ; preds = %74, %96
  %79 = phi %class.scoped_refptr.8* [ %80, %96 ], [ %76, %74 ]
  %80 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %79, i64 -1
  %81 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %80, i64 0, i32 0
  %82 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %81, align 8
  %83 = icmp eq %"class.base::internal::WorkerThread"* %82, null
  br i1 %83, label %96, label %84

84:                                               ; preds = %78
  %85 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %82, i64 0, i32 1
  %86 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %85, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %87 = atomicrmw sub i32* %86, i32 1 acq_rel
  %88 = icmp eq i32 %87, 1
  br i1 %88, label %89, label %96

89:                                               ; preds = %84
  %90 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %85, i64 -2
  %91 = bitcast %"class.base::RefCountedThreadSafe.14"* %90 to %"class.base::internal::WorkerThread"*
  %92 = bitcast %"class.base::RefCountedThreadSafe.14"* %90 to void (%"class.base::internal::WorkerThread"*)***
  %93 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %92, align 8
  %94 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %93, i64 3
  %95 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %94, align 8
  call void %95(%"class.base::internal::WorkerThread"* nonnull %91) #12
  br label %96

96:                                               ; preds = %89, %84, %78
  %97 = icmp eq %class.scoped_refptr.8* %80, %72
  br i1 %97, label %98, label %78

98:                                               ; preds = %96
  %99 = bitcast %"class.std::__1::vector.6"* %2 to i8**
  %100 = load i8*, i8** %99, align 8
  br label %101

101:                                              ; preds = %98, %74
  %102 = phi i8* [ %100, %98 ], [ %75, %74 ]
  store %class.scoped_refptr.8* %72, %class.scoped_refptr.8** %5, align 8
  call void @_ZdlPv(i8* %102) #13
  br label %103

103:                                              ; preds = %29, %71, %101
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::SingleThreadTaskRunner"* @_ZN4base8internal35PooledSingleThreadTaskRunnerManager28CreateSingleThreadTaskRunnerERKNS_10TaskTraitsENS_32SingleThreadTaskRunnerThreadModeE(%"class.base::internal::PooledSingleThreadTaskRunnerManager"*, %"class.base::TaskTraits"* dereferenceable(15), i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::internal::TrackedRef", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %class.scoped_refptr.8, align 8
  %7 = alloca %"class.base::internal::WorkerThread"*, align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = bitcast %"class.base::internal::WorkerThread"** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9)
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %7, align 8
  %10 = icmp eq i32 %2, 1
  br i1 %10, label %43, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 1
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %22

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 3
  %17 = load i8, i8* %16, align 1
  %18 = and i8 %17, 127
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %15
  %21 = tail call zeroext i1 @_ZN4base8internal39CanUseBackgroundPriorityForWorkerThreadEv() #12
  br label %22

22:                                               ; preds = %20, %15, %11
  %23 = phi i1 [ false, %15 ], [ false, %11 ], [ %21, %20 ]
  %24 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 4
  %25 = load i8, i8* %24, align 1, !range !2
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %31

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 5
  %29 = load i8, i8* %28, align 1, !range !2
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %33, label %31

31:                                               ; preds = %27, %22
  %32 = select i1 %23, i64 3, i64 1
  br label %35

33:                                               ; preds = %27
  %34 = select i1 %23, i64 2, i64 0
  br label %35

35:                                               ; preds = %33, %31
  %36 = phi i64 [ %32, %31 ], [ %34, %33 ]
  %37 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 2
  %38 = load i8, i8* %37, align 1
  %39 = and i8 %38, 127
  %40 = icmp ne i8 %39, 0
  %41 = zext i1 %40 to i64
  %42 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 7, i64 %36, i64 %41
  br label %43

43:                                               ; preds = %35, %3
  %44 = phi %"class.base::internal::WorkerThread"** [ %42, %35 ], [ %7, %3 ]
  %45 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 3
  %46 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %45, i64 0, i32 0, i32 0, i32 0
  %47 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %46) #12
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %51, label %49, !prof !4

49:                                               ; preds = %43
  %50 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %45, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %50) #12
  br label %51

51:                                               ; preds = %49, %43
  %52 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %44, align 8
  %53 = icmp eq %"class.base::internal::WorkerThread"* %52, null
  br i1 %53, label %54, label %222

54:                                               ; preds = %51
  %55 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 1
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %56, 0
  br i1 %57, label %58, label %65

58:                                               ; preds = %54
  %59 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 3
  %60 = load i8, i8* %59, align 1
  %61 = and i8 %60, 127
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %58
  %64 = tail call zeroext i1 @_ZN4base8internal39CanUseBackgroundPriorityForWorkerThreadEv() #12
  br label %65

65:                                               ; preds = %63, %58, %54
  %66 = phi i1 [ false, %58 ], [ false, %54 ], [ %64, %63 ]
  %67 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 4
  %68 = load i8, i8* %67, align 1, !range !2
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %70, label %74

70:                                               ; preds = %65
  %71 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %1, i64 0, i32 5
  %72 = load i8, i8* %71, align 1, !range !2
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %76, label %74

74:                                               ; preds = %70, %65
  %75 = select i1 %66, i64 3, i64 1
  br label %78

76:                                               ; preds = %70
  %77 = select i1 %66, i64 2, i64 0
  br label %78

78:                                               ; preds = %76, %74
  %79 = phi i64 [ %75, %74 ], [ %77, %76 ]
  %80 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %80) #12
  %81 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %80, i8 0, i64 24, i1 false) #12
  %82 = icmp eq i32 %2, 0
  br i1 %82, label %83, label %85

83:                                               ; preds = %78
  %84 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0)) #12
  br label %85

85:                                               ; preds = %83, %78
  %86 = getelementptr inbounds [4 x %"struct.base::internal::EnvironmentParams"], [4 x %"struct.base::internal::EnvironmentParams"]* @_ZN4base8internalL18kEnvironmentParamsE, i64 0, i64 %79, i32 0
  %87 = load i8*, i8** %86, align 16
  %88 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %8, i8* %87) #12
  %89 = call zeroext i1 @_ZN4base8internal39CanUseBackgroundPriorityForWorkerThreadEv() #12
  br i1 %89, label %90, label %93

90:                                               ; preds = %85
  %91 = getelementptr inbounds [4 x %"struct.base::internal::EnvironmentParams"], [4 x %"struct.base::internal::EnvironmentParams"]* @_ZN4base8internalL18kEnvironmentParamsE, i64 0, i64 %79, i32 1
  %92 = load i32, i32* %91, align 8
  br label %93

93:                                               ; preds = %90, %85
  %94 = phi i32 [ %92, %90 ], [ 1, %85 ]
  %95 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 5
  %96 = load i32, i32* %95, align 8
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %95, align 8
  %98 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %98) #12
  %99 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %100 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %99, i64 0, i32 1, i32 0
  %101 = load i8, i8* %100, align 1
  %102 = icmp slt i8 %101, 0
  %103 = load i8*, i8** %81, align 8
  %104 = select i1 %102, i8* %103, i8* %80
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* nonnull sret %5, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0), i8* %104, i32 %96) #12
  %105 = select i1 %10, i32 2, i32 1
  %106 = call i8* @_Znwm(i64 184) #13
  %107 = bitcast %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 0, i32 1
  %110 = load %"class.base::internal::TrackedRefFactory"*, %"class.base::internal::TrackedRefFactory"** %109, align 8
  %111 = ptrtoint %"class.base::internal::TrackedRefFactory"* %110 to i64
  %112 = getelementptr inbounds %"class.base::internal::TrackedRefFactory", %"class.base::internal::TrackedRefFactory"* %110, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %113 = atomicrmw add i32* %112, i32 1 monotonic
  %114 = bitcast i8* %106 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN4base8internal12_GLOBAL__N_120WorkerThreadDelegateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %114, align 8
  %115 = getelementptr inbounds i8, i8* %106, i64 8
  %116 = bitcast i8* %115 to %"class.base::internal::LockImpl"*
  call void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"* %116) #12
  %117 = getelementptr inbounds i8, i8* %106, i64 48
  store i8 0, i8* %117, align 8
  %118 = getelementptr inbounds i8, i8* %106, i64 56
  %119 = bitcast i8* %118 to i64*
  store i64 %108, i64* %119, align 8
  %120 = getelementptr inbounds i8, i8* %106, i64 64
  %121 = bitcast i8* %120 to i64*
  store i64 %111, i64* %121, align 8
  %122 = getelementptr inbounds i8, i8* %106, i64 72
  %123 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %124 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %123, i64 0, i32 1, i32 0
  %125 = load i8, i8* %124, align 1
  %126 = icmp slt i8 %125, 0
  br i1 %126, label %128, label %127

127:                                              ; preds = %93
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %122, i8* nonnull align 8 %98, i64 24, i1 false) #12
  br label %134

128:                                              ; preds = %93
  %129 = bitcast i8* %122 to %"class.std::__1::basic_string"*
  %130 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %131 = load i8*, i8** %130, align 8
  %132 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %133 = load i64, i64* %132, align 8
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"* %129, i8* %131, i64 %133) #12
  br label %134

134:                                              ; preds = %128, %127
  %135 = getelementptr inbounds i8, i8* %106, i64 96
  %136 = bitcast i8* %135 to i32*
  store i32 %105, i32* %136, align 8
  %137 = getelementptr inbounds i8, i8* %106, i64 104
  %138 = bitcast i8* %137 to %"class.base::internal::WorkerThread"**
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %138, align 8
  %139 = getelementptr inbounds i8, i8* %106, i64 112
  %140 = bitcast i8* %139 to %"class.base::internal::PriorityQueue"*
  call void @_ZN4base8internal13PriorityQueueC1Ev(%"class.base::internal::PriorityQueue"* %140) #12
  %141 = getelementptr inbounds i8, i8* %106, i64 168
  %142 = bitcast i8* %141 to %"class.base::AtomicFlag"*
  call void @_ZN4base10AtomicFlagC1Ev(%"class.base::AtomicFlag"* %142) #12
  %143 = getelementptr inbounds i8, i8* %106, i64 176
  %144 = bitcast i8* %143 to i64*
  store i64 0, i64* %144, align 8
  %145 = load i8, i8* %124, align 1
  %146 = icmp slt i8 %145, 0
  br i1 %146, label %147, label %150

147:                                              ; preds = %134
  %148 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %149 = load i8*, i8** %148, align 8
  call void @_ZdlPv(i8* %149) #13
  br label %150

150:                                              ; preds = %147, %134
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %98) #12
  %151 = bitcast %class.scoped_refptr.8* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %151) #12
  %152 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %6, i64 0, i32 0
  store %"class.base::internal::WorkerThread"* inttoptr (i64 -6148914691236517206 to %"class.base::internal::WorkerThread"*), %"class.base::internal::WorkerThread"** %152, align 8
  %153 = bitcast %"class.base::internal::TrackedRef"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %153) #12
  %154 = call i8* @_Znwm(i64 152) #13
  %155 = bitcast i8* %154 to %"class.base::internal::WorkerThread"*
  %156 = bitcast i8* %106 to %"class.base::internal::WorkerThread::Delegate"*
  %157 = load i64, i64* %107, align 8
  %158 = bitcast %"class.base::internal::TrackedRef"* %4 to i64*
  store i64 %157, i64* %158, align 8
  %159 = getelementptr inbounds %"class.base::internal::TrackedRef", %"class.base::internal::TrackedRef"* %4, i64 0, i32 1
  %160 = load %"class.base::internal::TrackedRefFactory"*, %"class.base::internal::TrackedRefFactory"** %109, align 8
  store %"class.base::internal::TrackedRefFactory"* %160, %"class.base::internal::TrackedRefFactory"** %159, align 8
  %161 = getelementptr inbounds %"class.base::internal::TrackedRefFactory", %"class.base::internal::TrackedRefFactory"* %160, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %162 = atomicrmw add i32* %161, i32 1 monotonic
  call void @_ZN4base8internal12WorkerThreadC1ENS_14ThreadPriorityENSt3__110unique_ptrINS1_8DelegateENS3_14default_deleteIS5_EEEENS0_10TrackedRefINS0_11TaskTrackerEEEPKNS0_11CheckedLockE(%"class.base::internal::WorkerThread"* nonnull %155, i32 %94, %"class.base::internal::WorkerThread::Delegate"* nonnull %156, %"class.base::internal::TrackedRef"* nonnull %4, %"class.base::internal::CheckedLock"* null) #12
  %163 = load %"class.base::internal::TrackedRefFactory"*, %"class.base::internal::TrackedRefFactory"** %159, align 8
  %164 = icmp eq %"class.base::internal::TrackedRefFactory"* %163, null
  br i1 %164, label %177, label %165

165:                                              ; preds = %150
  %166 = getelementptr inbounds %"class.base::internal::TrackedRefFactory", %"class.base::internal::TrackedRefFactory"* %163, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %167 = atomicrmw sub i32* %166, i32 1 acq_rel
  %168 = icmp eq i32 %167, 1
  br i1 %168, label %169, label %177

169:                                              ; preds = %165
  %170 = load %"class.base::internal::TrackedRefFactory"*, %"class.base::internal::TrackedRefFactory"** %159, align 8
  %171 = getelementptr inbounds %"class.base::internal::TrackedRefFactory", %"class.base::internal::TrackedRefFactory"* %170, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %172 = load i8, i8* %171, align 8, !range !2
  %173 = icmp eq i8 %172, 0
  br i1 %173, label %174, label %175, !prof !3

174:                                              ; preds = %169
  call void @llvm.trap() #12
  unreachable

175:                                              ; preds = %169
  %176 = getelementptr inbounds %"class.base::internal::TrackedRefFactory", %"class.base::internal::TrackedRefFactory"* %170, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2, i32 0
  call void @_ZN4base13WaitableEvent6SignalEv(%"class.base::WaitableEvent"* %176) #12
  br label %177

177:                                              ; preds = %175, %165, %150
  %178 = getelementptr inbounds i8, i8* %154, i64 8
  %179 = bitcast i8* %178 to i32*
  %180 = atomicrmw add i32* %179, i32 1 monotonic
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %153) #12
  %181 = bitcast %class.scoped_refptr.8* %6 to i8**
  store i8* %154, i8** %181, align 8
  %182 = bitcast i8* %137 to i8**
  store i8* %154, i8** %182, align 8
  %183 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 4, i32 0, i32 1
  %184 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %183, align 8
  %185 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %186 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %185, align 8
  %187 = icmp ult %class.scoped_refptr.8* %184, %186
  br i1 %187, label %188, label %196

188:                                              ; preds = %177
  %189 = ptrtoint i8* %154 to i64
  %190 = bitcast %class.scoped_refptr.8* %184 to i64*
  store i64 %189, i64* %190, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %152, align 8
  %191 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %184, i64 1
  %192 = ptrtoint %class.scoped_refptr.8* %191 to i64
  %193 = bitcast %class.scoped_refptr.8** %183 to i64*
  store i64 %192, i64* %193, align 8
  %194 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %184, i64 0, i32 0
  %195 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %194, align 8
  br label %215

196:                                              ; preds = %177
  %197 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 4
  call void @_ZNSt3__16vectorI13scoped_refptrIN4base8internal12WorkerThreadEENS_9allocatorIS5_EEE24__emplace_back_slow_pathIJS5_EEEvDpOT_(%"class.std::__1::vector.6"* %197, %class.scoped_refptr.8* nonnull dereferenceable(8) %6) #12
  %198 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %152, align 8
  %199 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %183, align 8
  %200 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %199, i64 -1, i32 0
  %201 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %200, align 8
  %202 = icmp eq %"class.base::internal::WorkerThread"* %198, null
  br i1 %202, label %215, label %203

203:                                              ; preds = %196
  %204 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %198, i64 0, i32 1
  %205 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %204, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %206 = atomicrmw sub i32* %205, i32 1 acq_rel
  %207 = icmp eq i32 %206, 1
  br i1 %207, label %208, label %215

208:                                              ; preds = %203
  %209 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %204, i64 -2
  %210 = bitcast %"class.base::RefCountedThreadSafe.14"* %209 to %"class.base::internal::WorkerThread"*
  %211 = bitcast %"class.base::RefCountedThreadSafe.14"* %209 to void (%"class.base::internal::WorkerThread"*)***
  %212 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %211, align 8
  %213 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %212, i64 3
  %214 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %213, align 8
  call void %214(%"class.base::internal::WorkerThread"* nonnull %210) #12
  br label %215

215:                                              ; preds = %208, %203, %196, %188
  %216 = phi %"class.base::internal::WorkerThread"* [ %195, %188 ], [ %201, %196 ], [ %201, %203 ], [ %201, %208 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %151) #12
  store %"class.base::internal::WorkerThread"* %216, %"class.base::internal::WorkerThread"** %44, align 8
  %217 = load i8, i8* %100, align 1
  %218 = icmp slt i8 %217, 0
  br i1 %218, label %219, label %221

219:                                              ; preds = %215
  %220 = load i8*, i8** %81, align 8
  call void @_ZdlPv(i8* %220) #13
  br label %221

221:                                              ; preds = %219, %215
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %80) #12
  br label %222

222:                                              ; preds = %221, %51
  %223 = phi i1 [ true, %51 ], [ false, %221 ]
  %224 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 8
  %225 = load i8, i8* %224, align 8, !range !2
  %226 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %46) #12
  %227 = icmp eq i8 %225, 0
  %228 = or i1 %223, %227
  br i1 %228, label %234, label %229

229:                                              ; preds = %222
  %230 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %44, align 8
  %231 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 2
  %232 = load %"class.base::WorkerThreadObserver"*, %"class.base::WorkerThreadObserver"** %231, align 8
  %233 = call zeroext i1 @_ZN4base8internal12WorkerThread5StartEPNS_20WorkerThreadObserverE(%"class.base::internal::WorkerThread"* %230, %"class.base::WorkerThreadObserver"* %232) #12
  br label %234

234:                                              ; preds = %229, %222
  %235 = ptrtoint %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0 to i64
  %236 = call i8* @_Znwm(i64 48) #13
  %237 = bitcast %"class.base::internal::WorkerThread"** %44 to i64*
  %238 = load i64, i64* %237, align 8
  %239 = bitcast i8* %236 to %"class.base::TaskRunner"*
  call void @_ZN4base10TaskRunnerC2Ev(%"class.base::TaskRunner"* nonnull %239) #12
  %240 = bitcast i8* %236 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4base8internal35PooledSingleThreadTaskRunnerManager28PooledSingleThreadTaskRunnerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %240, align 8
  %241 = getelementptr inbounds i8, i8* %236, i64 16
  %242 = bitcast i8* %241 to i64*
  store i64 %235, i64* %242, align 8
  %243 = getelementptr inbounds i8, i8* %236, i64 24
  %244 = bitcast i8* %243 to i64*
  store i64 %238, i64* %244, align 8
  %245 = getelementptr inbounds i8, i8* %236, i64 32
  %246 = bitcast i8* %245 to i32*
  store i32 %2, i32* %246, align 8
  %247 = call i8* @_Znwm(i64 168) #13
  %248 = bitcast i8* %247 to %"class.base::internal::Sequence"*
  call void @_ZN4base8internal8SequenceC1ERKNS_10TaskTraitsEPNS_10TaskRunnerENS0_23TaskSourceExecutionModeE(%"class.base::internal::Sequence"* nonnull %248, %"class.base::TaskTraits"* dereferenceable(15) %1, %"class.base::TaskRunner"* nonnull %239, i32 2) #12
  %249 = getelementptr inbounds i8, i8* %247, i64 8
  %250 = bitcast i8* %249 to i32*
  %251 = atomicrmw add i32* %250, i32 1 monotonic
  %252 = getelementptr inbounds i8, i8* %236, i64 40
  %253 = bitcast i8* %252 to i8**
  store i8* %247, i8** %253, align 8
  %254 = getelementptr inbounds i8, i8* %236, i64 8
  %255 = bitcast i8* %254 to i32*
  %256 = atomicrmw add i32* %255, i32 1 monotonic
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9)
  %257 = bitcast i8* %236 to %"class.base::SingleThreadTaskRunner"*
  ret %"class.base::SingleThreadTaskRunner"* %257
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN4base8internal35PooledSingleThreadTaskRunnerManager26TraitsToContinueOnShutdownERKNS_10TaskTraitsE(%"class.base::TaskTraits"* nocapture readonly dereferenceable(15)) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.base::TaskTraits", %"class.base::TaskTraits"* %0, i64 0, i32 2
  %3 = load i8, i8* %2, align 1
  %4 = and i8 %3, 127
  %5 = icmp ne i8 %4, 0
  %6 = zext i1 %5 to i32
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal35PooledSingleThreadTaskRunnerManager14JoinForTestingEv(%"class.base::internal::PooledSingleThreadTaskRunnerManager"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 3
  %3 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %2, i64 0, i32 0, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %3) #12
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6, !prof !4

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %2, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %7) #12
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 4
  %10 = bitcast %"class.std::__1::vector.6"* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 4, i32 0, i32 1
  %13 = bitcast %class.scoped_refptr.8** %12 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8
  %15 = bitcast %"class.std::__1::vector.6"* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 24, i1 false) #12
  %16 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #12
  %17 = inttoptr i64 %11 to %class.scoped_refptr.8*
  %18 = extractelement <2 x i64> %14, i32 0
  %19 = inttoptr i64 %18 to %class.scoped_refptr.8*
  %20 = icmp eq %class.scoped_refptr.8* %17, %19
  br i1 %20, label %21, label %62

21:                                               ; preds = %75, %8
  %22 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %3) #12
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %26, label %24, !prof !4

24:                                               ; preds = %21
  %25 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %2, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %25) #12
  br label %26

26:                                               ; preds = %21, %24
  %27 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %9, i64 0, i32 0, i32 0
  %28 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %27, align 8
  %29 = icmp eq %class.scoped_refptr.8* %28, null
  br i1 %29, label %59, label %30

30:                                               ; preds = %26
  %31 = bitcast %class.scoped_refptr.8* %28 to i8*
  %32 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %12, align 8
  %33 = icmp eq %class.scoped_refptr.8* %32, %28
  br i1 %33, label %57, label %34

34:                                               ; preds = %30, %52
  %35 = phi %class.scoped_refptr.8* [ %36, %52 ], [ %32, %30 ]
  %36 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %35, i64 -1
  %37 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %36, i64 0, i32 0
  %38 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %37, align 8
  %39 = icmp eq %"class.base::internal::WorkerThread"* %38, null
  br i1 %39, label %52, label %40

40:                                               ; preds = %34
  %41 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %38, i64 0, i32 1
  %42 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = atomicrmw sub i32* %42, i32 1 acq_rel
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %45, label %52

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %41, i64 -2
  %47 = bitcast %"class.base::RefCountedThreadSafe.14"* %46 to %"class.base::internal::WorkerThread"*
  %48 = bitcast %"class.base::RefCountedThreadSafe.14"* %46 to void (%"class.base::internal::WorkerThread"*)***
  %49 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %48, align 8
  %50 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %49, i64 3
  %51 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %50, align 8
  tail call void %51(%"class.base::internal::WorkerThread"* nonnull %47) #12
  br label %52

52:                                               ; preds = %45, %40, %34
  %53 = icmp eq %class.scoped_refptr.8* %36, %28
  br i1 %53, label %54, label %34

54:                                               ; preds = %52
  %55 = bitcast %"class.std::__1::vector.6"* %9 to i8**
  %56 = load i8*, i8** %55, align 8
  br label %57

57:                                               ; preds = %54, %30
  %58 = phi i8* [ %56, %54 ], [ %31, %30 ]
  store %class.scoped_refptr.8* %28, %class.scoped_refptr.8** %12, align 8
  tail call void @_ZdlPv(i8* %58) #13
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 24, i1 false) #12
  br label %59

59:                                               ; preds = %26, %57
  store i64 %11, i64* %10, align 8
  %60 = bitcast %class.scoped_refptr.8** %12 to <2 x i64>*
  store <2 x i64> %14, <2 x i64>* %60, align 8
  %61 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #12
  tail call void @_ZN4base8internal35PooledSingleThreadTaskRunnerManager26ReleaseSharedWorkerThreadsEv(%"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0)
  ret void

62:                                               ; preds = %8, %75
  %63 = phi %class.scoped_refptr.8* [ %79, %75 ], [ %17, %8 ]
  %64 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %63, i64 0, i32 0
  %65 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %64, align 8
  %66 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %65, i64 0, i32 10, i32 0, i32 0, i32 0
  %67 = bitcast %"class.base::internal::WorkerThread::Delegate"** %66 to %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"**
  %68 = load %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*, %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"** %67, align 8
  %69 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %68, i64 0, i32 1
  %70 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %69, i64 0, i32 0, i32 0, i32 0
  %71 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %70) #12
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %75, label %73, !prof !4

73:                                               ; preds = %62
  %74 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %69, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %74) #12
  br label %75

75:                                               ; preds = %62, %73
  %76 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %68, i64 0, i32 7
  tail call void @_ZN4base8internal13PriorityQueue41EnableFlushTaskSourcesOnDestroyForTestingEv(%"class.base::internal::PriorityQueue"* %76) #12
  %77 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %70) #12
  %78 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %64, align 8
  tail call void @_ZN4base8internal12WorkerThread14JoinForTestingEv(%"class.base::internal::WorkerThread"* %78) #12
  %79 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %63, i64 1
  %80 = icmp eq %class.scoped_refptr.8* %79, %19
  br i1 %80, label %21, label %62
}

declare void @_ZN4base8internal12WorkerThread14JoinForTestingEv(%"class.base::internal::WorkerThread"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal35PooledSingleThreadTaskRunnerManager26ReleaseSharedWorkerThreadsEv(%"class.base::internal::PooledSingleThreadTaskRunnerManager"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 3
  %3 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %2, i64 0, i32 0, i32 0, i32 0
  %4 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %3) #12
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6, !prof !4

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %2, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %7) #12
  br label %8

8:                                                ; preds = %1, %6
  %9 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 7, i64 0, i64 0
  %10 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %9, align 8
  %11 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 7, i64 0, i64 1
  %12 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %11, align 8
  %13 = bitcast %"class.base::internal::WorkerThread"** %9 to <2 x %"class.base::internal::WorkerThread"*>*
  store <2 x %"class.base::internal::WorkerThread"*> zeroinitializer, <2 x %"class.base::internal::WorkerThread"*>* %13, align 8
  %14 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 7, i64 1, i64 0
  %15 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %14, align 8
  %16 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 7, i64 1, i64 1
  %17 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %16, align 8
  %18 = bitcast %"class.base::internal::WorkerThread"** %14 to <2 x %"class.base::internal::WorkerThread"*>*
  store <2 x %"class.base::internal::WorkerThread"*> zeroinitializer, <2 x %"class.base::internal::WorkerThread"*>* %18, align 8
  %19 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 7, i64 2, i64 0
  %20 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %19, align 8
  %21 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 7, i64 2, i64 1
  %22 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %21, align 8
  %23 = bitcast %"class.base::internal::WorkerThread"** %19 to <2 x %"class.base::internal::WorkerThread"*>*
  store <2 x %"class.base::internal::WorkerThread"*> zeroinitializer, <2 x %"class.base::internal::WorkerThread"*>* %23, align 8
  %24 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 7, i64 3, i64 0
  %25 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %24, align 8
  %26 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 7, i64 3, i64 1
  %27 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %26, align 8
  %28 = bitcast %"class.base::internal::WorkerThread"** %24 to <2 x %"class.base::internal::WorkerThread"*>*
  store <2 x %"class.base::internal::WorkerThread"*> zeroinitializer, <2 x %"class.base::internal::WorkerThread"*>* %28, align 8
  %29 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %3) #12
  %30 = icmp eq %"class.base::internal::WorkerThread"* %10, null
  br i1 %30, label %32, label %31

31:                                               ; preds = %8
  tail call void @_ZN4base8internal35PooledSingleThreadTaskRunnerManager22UnregisterWorkerThreadEPNS0_12WorkerThreadE(%"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, %"class.base::internal::WorkerThread"* nonnull %10)
  br label %32

32:                                               ; preds = %8, %31
  %33 = icmp eq %"class.base::internal::WorkerThread"* %12, null
  br i1 %33, label %35, label %34

34:                                               ; preds = %32
  tail call void @_ZN4base8internal35PooledSingleThreadTaskRunnerManager22UnregisterWorkerThreadEPNS0_12WorkerThreadE(%"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, %"class.base::internal::WorkerThread"* nonnull %12)
  br label %35

35:                                               ; preds = %34, %32
  %36 = icmp eq %"class.base::internal::WorkerThread"* %15, null
  br i1 %36, label %38, label %37

37:                                               ; preds = %35
  tail call void @_ZN4base8internal35PooledSingleThreadTaskRunnerManager22UnregisterWorkerThreadEPNS0_12WorkerThreadE(%"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, %"class.base::internal::WorkerThread"* nonnull %15)
  br label %38

38:                                               ; preds = %37, %35
  %39 = icmp eq %"class.base::internal::WorkerThread"* %17, null
  br i1 %39, label %41, label %40

40:                                               ; preds = %38
  tail call void @_ZN4base8internal35PooledSingleThreadTaskRunnerManager22UnregisterWorkerThreadEPNS0_12WorkerThreadE(%"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, %"class.base::internal::WorkerThread"* nonnull %17)
  br label %41

41:                                               ; preds = %40, %38
  %42 = icmp eq %"class.base::internal::WorkerThread"* %20, null
  br i1 %42, label %44, label %43

43:                                               ; preds = %41
  tail call void @_ZN4base8internal35PooledSingleThreadTaskRunnerManager22UnregisterWorkerThreadEPNS0_12WorkerThreadE(%"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, %"class.base::internal::WorkerThread"* nonnull %20)
  br label %44

44:                                               ; preds = %43, %41
  %45 = icmp eq %"class.base::internal::WorkerThread"* %22, null
  br i1 %45, label %47, label %46

46:                                               ; preds = %44
  tail call void @_ZN4base8internal35PooledSingleThreadTaskRunnerManager22UnregisterWorkerThreadEPNS0_12WorkerThreadE(%"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, %"class.base::internal::WorkerThread"* nonnull %22)
  br label %47

47:                                               ; preds = %46, %44
  %48 = icmp eq %"class.base::internal::WorkerThread"* %25, null
  br i1 %48, label %50, label %49

49:                                               ; preds = %47
  tail call void @_ZN4base8internal35PooledSingleThreadTaskRunnerManager22UnregisterWorkerThreadEPNS0_12WorkerThreadE(%"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, %"class.base::internal::WorkerThread"* nonnull %25)
  br label %50

50:                                               ; preds = %49, %47
  %51 = icmp eq %"class.base::internal::WorkerThread"* %27, null
  br i1 %51, label %53, label %52

52:                                               ; preds = %50
  tail call void @_ZN4base8internal35PooledSingleThreadTaskRunnerManager22UnregisterWorkerThreadEPNS0_12WorkerThreadE(%"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, %"class.base::internal::WorkerThread"* nonnull %27)
  br label %53

53:                                               ; preds = %52, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4base8internal35PooledSingleThreadTaskRunnerManager22UnregisterWorkerThreadEPNS0_12WorkerThreadE(%"class.base::internal::PooledSingleThreadTaskRunnerManager"*, %"class.base::internal::WorkerThread"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 3
  %4 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %3, i64 0, i32 0, i32 0, i32 0
  %5 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %4) #12
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7, !prof !4

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %3, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %8) #12
  br label %9

9:                                                ; preds = %2, %7
  %10 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 4, i32 0, i32 0
  %11 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %10, align 8
  %12 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %0, i64 0, i32 4, i32 0, i32 1
  %13 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %12, align 8
  %14 = icmp eq %class.scoped_refptr.8* %11, %13
  br i1 %14, label %84, label %15

15:                                               ; preds = %9, %20
  %16 = phi %class.scoped_refptr.8* [ %21, %20 ], [ %11, %9 ]
  %17 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %16, i64 0, i32 0
  %18 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %17, align 8
  %19 = icmp eq %"class.base::internal::WorkerThread"* %18, %1
  br i1 %19, label %23, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %16, i64 1
  %22 = icmp eq %class.scoped_refptr.8* %21, %13
  br i1 %22, label %23, label %15

23:                                               ; preds = %20, %15
  %24 = phi %class.scoped_refptr.8* [ %16, %15 ], [ %13, %20 ]
  %25 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %24, i64 0, i32 0
  %26 = bitcast %class.scoped_refptr.8* %24 to i64*
  %27 = load i64, i64* %26, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %25, align 8
  %28 = inttoptr i64 %27 to %"class.base::internal::WorkerThread"*
  %29 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %24, i64 1
  %30 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %12, align 8
  %31 = icmp eq %class.scoped_refptr.8* %29, %30
  br i1 %31, label %61, label %32

32:                                               ; preds = %23, %54
  %33 = phi %class.scoped_refptr.8* [ %56, %54 ], [ %24, %23 ]
  %34 = phi %class.scoped_refptr.8* [ %55, %54 ], [ %29, %23 ]
  %35 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %34, i64 0, i32 0
  %36 = bitcast %class.scoped_refptr.8* %34 to i64*
  %37 = load i64, i64* %36, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %35, align 8
  %38 = bitcast %class.scoped_refptr.8* %33 to i64*
  %39 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %33, i64 0, i32 0
  %40 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %39, align 8
  store i64 %37, i64* %38, align 8
  %41 = icmp eq %"class.base::internal::WorkerThread"* %40, null
  br i1 %41, label %54, label %42

42:                                               ; preds = %32
  %43 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %40, i64 0, i32 1
  %44 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = atomicrmw sub i32* %44, i32 1 acq_rel
  %46 = icmp eq i32 %45, 1
  br i1 %46, label %47, label %54

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %43, i64 -2
  %49 = bitcast %"class.base::RefCountedThreadSafe.14"* %48 to %"class.base::internal::WorkerThread"*
  %50 = bitcast %"class.base::RefCountedThreadSafe.14"* %48 to void (%"class.base::internal::WorkerThread"*)***
  %51 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %50, align 8
  %52 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %51, i64 3
  %53 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %52, align 8
  tail call void %53(%"class.base::internal::WorkerThread"* nonnull %49) #12
  br label %54

54:                                               ; preds = %47, %42, %32
  %55 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %34, i64 1
  %56 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %33, i64 1
  %57 = icmp eq %class.scoped_refptr.8* %55, %30
  br i1 %57, label %58, label %32

58:                                               ; preds = %54
  %59 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %12, align 8
  %60 = icmp eq %class.scoped_refptr.8* %59, %56
  br i1 %60, label %86, label %61

61:                                               ; preds = %58, %23
  %62 = phi %class.scoped_refptr.8* [ %56, %58 ], [ %24, %23 ]
  %63 = phi %class.scoped_refptr.8* [ %59, %58 ], [ %29, %23 ]
  br label %64

64:                                               ; preds = %82, %61
  %65 = phi %class.scoped_refptr.8* [ %66, %82 ], [ %63, %61 ]
  %66 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %65, i64 -1
  %67 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %66, i64 0, i32 0
  %68 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %67, align 8
  %69 = icmp eq %"class.base::internal::WorkerThread"* %68, null
  br i1 %69, label %82, label %70

70:                                               ; preds = %64
  %71 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %68, i64 0, i32 1
  %72 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %71, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = atomicrmw sub i32* %72, i32 1 acq_rel
  %74 = icmp eq i32 %73, 1
  br i1 %74, label %75, label %82

75:                                               ; preds = %70
  %76 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %71, i64 -2
  %77 = bitcast %"class.base::RefCountedThreadSafe.14"* %76 to %"class.base::internal::WorkerThread"*
  %78 = bitcast %"class.base::RefCountedThreadSafe.14"* %76 to void (%"class.base::internal::WorkerThread"*)***
  %79 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %78, align 8
  %80 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %79, i64 3
  %81 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %80, align 8
  tail call void %81(%"class.base::internal::WorkerThread"* nonnull %77) #12
  br label %82

82:                                               ; preds = %75, %70, %64
  %83 = icmp eq %class.scoped_refptr.8* %66, %62
  br i1 %83, label %86, label %64

84:                                               ; preds = %9
  %85 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %4) #12
  br label %102

86:                                               ; preds = %82, %58
  %87 = phi %class.scoped_refptr.8* [ %56, %58 ], [ %62, %82 ]
  store %class.scoped_refptr.8* %87, %class.scoped_refptr.8** %12, align 8
  %88 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %4) #12
  tail call void @_ZN4base8internal12WorkerThread7CleanupEv(%"class.base::internal::WorkerThread"* %28) #12
  %89 = icmp eq i64 %27, 0
  br i1 %89, label %102, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %28, i64 0, i32 1
  %92 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %91, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %93 = atomicrmw sub i32* %92, i32 1 acq_rel
  %94 = icmp eq i32 %93, 1
  br i1 %94, label %95, label %102

95:                                               ; preds = %90
  %96 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %91, i64 -2
  %97 = bitcast %"class.base::RefCountedThreadSafe.14"* %96 to %"class.base::internal::WorkerThread"*
  %98 = bitcast %"class.base::RefCountedThreadSafe.14"* %96 to void (%"class.base::internal::WorkerThread"*)***
  %99 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %98, align 8
  %100 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %99, i64 3
  %101 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %100, align 8
  tail call void %101(%"class.base::internal::WorkerThread"* nonnull %97) #12
  br label %102

102:                                              ; preds = %84, %86, %90, %95
  ret void
}

declare void @_ZN4base8internal12WorkerThread7CleanupEv(%"class.base::internal::WorkerThread"*) local_unnamed_addr #2

declare void @_ZN4base8internal8LockImplC1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"*) unnamed_addr #4

declare void @_ZN4base8internal12WorkerThread6WakeUpEv(%"class.base::internal::WorkerThread"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK4base8internal11TaskTracker14CanRunPriorityENS_12TaskPriorityE(%"class.base::internal::TaskTracker"*, i8 zeroext) local_unnamed_addr #2

declare dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"*) local_unnamed_addr #2

declare void @_ZN4base8internal13PriorityQueue41EnableFlushTaskSourcesOnDestroyForTestingEv(%"class.base::internal::PriorityQueue"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @_ZN4base13WaitableEvent6SignalEv(%"class.base::WaitableEvent"*) local_unnamed_addr #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

declare void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_mutex_trylock(%union.pthread_mutex_t*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI13scoped_refptrIN4base8internal12WorkerThreadEENS_9allocatorIS5_EEE6assignIPS5_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS5_NS_15iterator_traitsISC_E9referenceEEE5valueEvE4typeESC_SC_(%"class.std::__1::vector.6"*, %class.scoped_refptr.8*, %class.scoped_refptr.8*) local_unnamed_addr #0 comdat align 2 {
  %4 = ptrtoint %class.scoped_refptr.8* %1 to i64
  %5 = ptrtoint %class.scoped_refptr.8* %2 to i64
  %6 = sub i64 %5, %4
  %7 = ashr exact i64 %6, 3
  %8 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %class.scoped_refptr.8** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.6"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 3
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %class.scoped_refptr.8*
  br i1 %15, label %138, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %class.scoped_refptr.8** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 3
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %1, i64 %22
  %25 = select i1 %23, %class.scoped_refptr.8* %24, %class.scoped_refptr.8* %2
  %26 = icmp eq %class.scoped_refptr.8* %25, %1
  br i1 %26, label %58, label %27

27:                                               ; preds = %17, %54
  %28 = phi %class.scoped_refptr.8* [ %56, %54 ], [ %16, %17 ]
  %29 = phi %class.scoped_refptr.8* [ %55, %54 ], [ %1, %17 ]
  %30 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %29, i64 0, i32 0
  %31 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %30, align 8
  %32 = icmp eq %"class.base::internal::WorkerThread"* %31, null
  br i1 %32, label %36, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %31, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = atomicrmw add i32* %34, i32 1 monotonic
  br label %36

36:                                               ; preds = %33, %27
  %37 = ptrtoint %"class.base::internal::WorkerThread"* %31 to i64
  %38 = bitcast %class.scoped_refptr.8* %28 to i64*
  %39 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %28, i64 0, i32 0
  %40 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %39, align 8
  store i64 %37, i64* %38, align 8
  %41 = icmp eq %"class.base::internal::WorkerThread"* %40, null
  br i1 %41, label %54, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %40, i64 0, i32 1
  %44 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = atomicrmw sub i32* %44, i32 1 acq_rel
  %46 = icmp eq i32 %45, 1
  br i1 %46, label %47, label %54

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %43, i64 -2
  %49 = bitcast %"class.base::RefCountedThreadSafe.14"* %48 to %"class.base::internal::WorkerThread"*
  %50 = bitcast %"class.base::RefCountedThreadSafe.14"* %48 to void (%"class.base::internal::WorkerThread"*)***
  %51 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %50, align 8
  %52 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %51, i64 3
  %53 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %52, align 8
  tail call void %53(%"class.base::internal::WorkerThread"* nonnull %49) #12
  br label %54

54:                                               ; preds = %47, %42, %36
  %55 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %29, i64 1
  %56 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %28, i64 1
  %57 = icmp eq %class.scoped_refptr.8* %55, %25
  br i1 %57, label %58, label %27

58:                                               ; preds = %54, %17
  %59 = phi %class.scoped_refptr.8* [ %16, %17 ], [ %56, %54 ]
  br i1 %23, label %60, label %114

60:                                               ; preds = %58
  %61 = load i64, i64* %19, align 8
  %62 = icmp eq %class.scoped_refptr.8* %25, %2
  br i1 %62, label %112, label %63

63:                                               ; preds = %60
  %64 = inttoptr i64 %61 to %class.scoped_refptr.8*
  %65 = xor i64 %22, -1
  %66 = getelementptr %class.scoped_refptr.8, %class.scoped_refptr.8* %2, i64 %65, i32 0
  %67 = ptrtoint %"class.base::internal::WorkerThread"** %66 to i64
  %68 = sub i64 %67, %4
  %69 = lshr i64 %68, 3
  %70 = add nuw nsw i64 %69, 1
  %71 = and i64 %70, 3
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %89, label %73

73:                                               ; preds = %63, %84
  %74 = phi %class.scoped_refptr.8* [ %86, %84 ], [ %64, %63 ]
  %75 = phi %class.scoped_refptr.8* [ %85, %84 ], [ %24, %63 ]
  %76 = phi i64 [ %87, %84 ], [ %71, %63 ]
  %77 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %75, i64 0, i32 0
  %78 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %77, align 8
  %79 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %74, i64 0, i32 0
  store %"class.base::internal::WorkerThread"* %78, %"class.base::internal::WorkerThread"** %79, align 8
  %80 = icmp eq %"class.base::internal::WorkerThread"* %78, null
  br i1 %80, label %84, label %81

81:                                               ; preds = %73
  %82 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %78, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %83 = atomicrmw add i32* %82, i32 1 monotonic
  br label %84

84:                                               ; preds = %81, %73
  %85 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %75, i64 1
  %86 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %74, i64 1
  %87 = add i64 %76, -1
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %73, !llvm.loop !5

89:                                               ; preds = %84, %63
  %90 = phi %class.scoped_refptr.8* [ undef, %63 ], [ %86, %84 ]
  %91 = phi %class.scoped_refptr.8* [ %64, %63 ], [ %86, %84 ]
  %92 = phi %class.scoped_refptr.8* [ %24, %63 ], [ %85, %84 ]
  %93 = icmp ult i64 %68, 24
  br i1 %93, label %109, label %94

94:                                               ; preds = %89, %290
  %95 = phi %class.scoped_refptr.8* [ %292, %290 ], [ %91, %89 ]
  %96 = phi %class.scoped_refptr.8* [ %291, %290 ], [ %92, %89 ]
  %97 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %96, i64 0, i32 0
  %98 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %97, align 8
  %99 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %95, i64 0, i32 0
  store %"class.base::internal::WorkerThread"* %98, %"class.base::internal::WorkerThread"** %99, align 8
  %100 = icmp eq %"class.base::internal::WorkerThread"* %98, null
  br i1 %100, label %104, label %101

101:                                              ; preds = %94
  %102 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %98, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %103 = atomicrmw add i32* %102, i32 1 monotonic
  br label %104

104:                                              ; preds = %101, %94
  %105 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %96, i64 1, i32 0
  %106 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %105, align 8
  %107 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %95, i64 1, i32 0
  store %"class.base::internal::WorkerThread"* %106, %"class.base::internal::WorkerThread"** %107, align 8
  %108 = icmp eq %"class.base::internal::WorkerThread"* %106, null
  br i1 %108, label %274, label %271

109:                                              ; preds = %290, %89
  %110 = phi %class.scoped_refptr.8* [ %90, %89 ], [ %292, %290 ]
  %111 = ptrtoint %class.scoped_refptr.8* %110 to i64
  br label %112

112:                                              ; preds = %60, %109
  %113 = phi i64 [ %61, %60 ], [ %111, %109 ]
  store i64 %113, i64* %19, align 8
  br label %247

114:                                              ; preds = %58
  %115 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %18, align 8
  %116 = icmp eq %class.scoped_refptr.8* %115, %59
  br i1 %116, label %137, label %117

117:                                              ; preds = %114, %135
  %118 = phi %class.scoped_refptr.8* [ %119, %135 ], [ %115, %114 ]
  %119 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %118, i64 -1
  %120 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %119, i64 0, i32 0
  %121 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %120, align 8
  %122 = icmp eq %"class.base::internal::WorkerThread"* %121, null
  br i1 %122, label %135, label %123

123:                                              ; preds = %117
  %124 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %121, i64 0, i32 1
  %125 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %124, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %126 = atomicrmw sub i32* %125, i32 1 acq_rel
  %127 = icmp eq i32 %126, 1
  br i1 %127, label %128, label %135

128:                                              ; preds = %123
  %129 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %124, i64 -2
  %130 = bitcast %"class.base::RefCountedThreadSafe.14"* %129 to %"class.base::internal::WorkerThread"*
  %131 = bitcast %"class.base::RefCountedThreadSafe.14"* %129 to void (%"class.base::internal::WorkerThread"*)***
  %132 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %131, align 8
  %133 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %132, i64 3
  %134 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %133, align 8
  tail call void %134(%"class.base::internal::WorkerThread"* nonnull %130) #12
  br label %135

135:                                              ; preds = %128, %123, %117
  %136 = icmp eq %class.scoped_refptr.8* %119, %59
  br i1 %136, label %137, label %117

137:                                              ; preds = %135, %114
  store %class.scoped_refptr.8* %59, %class.scoped_refptr.8** %18, align 8
  br label %247

138:                                              ; preds = %3
  %139 = icmp eq i64 %12, 0
  br i1 %139, label %171, label %140

140:                                              ; preds = %138
  %141 = inttoptr i64 %12 to i8*
  %142 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %143 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %142, align 8
  %144 = icmp eq %class.scoped_refptr.8* %143, %16
  br i1 %144, label %168, label %145

145:                                              ; preds = %140, %163
  %146 = phi %class.scoped_refptr.8* [ %147, %163 ], [ %143, %140 ]
  %147 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %146, i64 -1
  %148 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %147, i64 0, i32 0
  %149 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %148, align 8
  %150 = icmp eq %"class.base::internal::WorkerThread"* %149, null
  br i1 %150, label %163, label %151

151:                                              ; preds = %145
  %152 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %149, i64 0, i32 1
  %153 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %152, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %154 = atomicrmw sub i32* %153, i32 1 acq_rel
  %155 = icmp eq i32 %154, 1
  br i1 %155, label %156, label %163

156:                                              ; preds = %151
  %157 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %152, i64 -2
  %158 = bitcast %"class.base::RefCountedThreadSafe.14"* %157 to %"class.base::internal::WorkerThread"*
  %159 = bitcast %"class.base::RefCountedThreadSafe.14"* %157 to void (%"class.base::internal::WorkerThread"*)***
  %160 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %159, align 8
  %161 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %160, i64 3
  %162 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %161, align 8
  tail call void %162(%"class.base::internal::WorkerThread"* nonnull %158) #12
  br label %163

163:                                              ; preds = %156, %151, %145
  %164 = icmp eq %class.scoped_refptr.8* %147, %16
  br i1 %164, label %165, label %145

165:                                              ; preds = %163
  %166 = bitcast %"class.std::__1::vector.6"* %0 to i8**
  %167 = load i8*, i8** %166, align 8
  br label %168

168:                                              ; preds = %165, %140
  %169 = phi i8* [ %167, %165 ], [ %141, %140 ]
  store %class.scoped_refptr.8* %16, %class.scoped_refptr.8** %142, align 8
  tail call void @_ZdlPv(i8* %169) #13
  %170 = bitcast %"class.std::__1::vector.6"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %170, i8 0, i64 24, i1 false) #12
  br label %171

171:                                              ; preds = %138, %168
  %172 = phi i64 [ %10, %138 ], [ 0, %168 ]
  %173 = icmp ugt i64 %7, 2305843009213693951
  br i1 %173, label %174, label %176

174:                                              ; preds = %171
  %175 = bitcast %"class.std::__1::vector.6"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %175) #14
  unreachable

176:                                              ; preds = %171
  %177 = ashr exact i64 %172, 3
  %178 = icmp ult i64 %177, 1152921504606846975
  br i1 %178, label %179, label %186

179:                                              ; preds = %176
  %180 = ashr exact i64 %172, 2
  %181 = icmp ult i64 %180, %7
  br i1 %181, label %186, label %182

182:                                              ; preds = %179
  %183 = icmp ugt i64 %180, 2305843009213693951
  br i1 %183, label %184, label %186

184:                                              ; preds = %182
  %185 = bitcast %"class.std::__1::vector.6"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %185) #14
  unreachable

186:                                              ; preds = %179, %176, %182
  %187 = phi i64 [ %180, %182 ], [ 2305843009213693951, %176 ], [ %7, %179 ]
  %188 = shl i64 %187, 3
  %189 = tail call i8* @_Znwm(i64 %188) #13
  %190 = bitcast i8* %189 to %class.scoped_refptr.8*
  %191 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %192 = bitcast %class.scoped_refptr.8** %191 to i8**
  store i8* %189, i8** %192, align 8
  %193 = bitcast %"class.std::__1::vector.6"* %0 to i8**
  store i8* %189, i8** %193, align 8
  %194 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %190, i64 %187
  store %class.scoped_refptr.8* %194, %class.scoped_refptr.8** %8, align 8
  %195 = bitcast %class.scoped_refptr.8** %191 to i64*
  %196 = ptrtoint i8* %189 to i64
  %197 = icmp eq %class.scoped_refptr.8* %1, %2
  br i1 %197, label %245, label %198

198:                                              ; preds = %186
  %199 = getelementptr %class.scoped_refptr.8, %class.scoped_refptr.8* %2, i64 -1, i32 0
  %200 = ptrtoint %"class.base::internal::WorkerThread"** %199 to i64
  %201 = sub i64 %200, %4
  %202 = lshr i64 %201, 3
  %203 = add nuw nsw i64 %202, 1
  %204 = and i64 %203, 3
  %205 = icmp eq i64 %204, 0
  br i1 %205, label %222, label %206

206:                                              ; preds = %198, %217
  %207 = phi %class.scoped_refptr.8* [ %219, %217 ], [ %190, %198 ]
  %208 = phi %class.scoped_refptr.8* [ %218, %217 ], [ %1, %198 ]
  %209 = phi i64 [ %220, %217 ], [ %204, %198 ]
  %210 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %208, i64 0, i32 0
  %211 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %210, align 8
  %212 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %207, i64 0, i32 0
  store %"class.base::internal::WorkerThread"* %211, %"class.base::internal::WorkerThread"** %212, align 8
  %213 = icmp eq %"class.base::internal::WorkerThread"* %211, null
  br i1 %213, label %217, label %214

214:                                              ; preds = %206
  %215 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %211, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %216 = atomicrmw add i32* %215, i32 1 monotonic
  br label %217

217:                                              ; preds = %214, %206
  %218 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %208, i64 1
  %219 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %207, i64 1
  %220 = add i64 %209, -1
  %221 = icmp eq i64 %220, 0
  br i1 %221, label %222, label %206, !llvm.loop !7

222:                                              ; preds = %217, %198
  %223 = phi %class.scoped_refptr.8* [ undef, %198 ], [ %219, %217 ]
  %224 = phi %class.scoped_refptr.8* [ %190, %198 ], [ %219, %217 ]
  %225 = phi %class.scoped_refptr.8* [ %1, %198 ], [ %218, %217 ]
  %226 = icmp ult i64 %201, 24
  br i1 %226, label %242, label %227

227:                                              ; preds = %222, %267
  %228 = phi %class.scoped_refptr.8* [ %269, %267 ], [ %224, %222 ]
  %229 = phi %class.scoped_refptr.8* [ %268, %267 ], [ %225, %222 ]
  %230 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %229, i64 0, i32 0
  %231 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %230, align 8
  %232 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %228, i64 0, i32 0
  store %"class.base::internal::WorkerThread"* %231, %"class.base::internal::WorkerThread"** %232, align 8
  %233 = icmp eq %"class.base::internal::WorkerThread"* %231, null
  br i1 %233, label %237, label %234

234:                                              ; preds = %227
  %235 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %231, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %236 = atomicrmw add i32* %235, i32 1 monotonic
  br label %237

237:                                              ; preds = %234, %227
  %238 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %229, i64 1, i32 0
  %239 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %238, align 8
  %240 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %228, i64 1, i32 0
  store %"class.base::internal::WorkerThread"* %239, %"class.base::internal::WorkerThread"** %240, align 8
  %241 = icmp eq %"class.base::internal::WorkerThread"* %239, null
  br i1 %241, label %251, label %248

242:                                              ; preds = %267, %222
  %243 = phi %class.scoped_refptr.8* [ %223, %222 ], [ %269, %267 ]
  %244 = ptrtoint %class.scoped_refptr.8* %243 to i64
  br label %245

245:                                              ; preds = %186, %242
  %246 = phi i64 [ %196, %186 ], [ %244, %242 ]
  store i64 %246, i64* %195, align 8
  br label %247

247:                                              ; preds = %112, %137, %245
  ret void

248:                                              ; preds = %237
  %249 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %239, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %250 = atomicrmw add i32* %249, i32 1 monotonic
  br label %251

251:                                              ; preds = %248, %237
  %252 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %229, i64 2, i32 0
  %253 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %252, align 8
  %254 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %228, i64 2, i32 0
  store %"class.base::internal::WorkerThread"* %253, %"class.base::internal::WorkerThread"** %254, align 8
  %255 = icmp eq %"class.base::internal::WorkerThread"* %253, null
  br i1 %255, label %259, label %256

256:                                              ; preds = %251
  %257 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %253, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %258 = atomicrmw add i32* %257, i32 1 monotonic
  br label %259

259:                                              ; preds = %256, %251
  %260 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %229, i64 3, i32 0
  %261 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %260, align 8
  %262 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %228, i64 3, i32 0
  store %"class.base::internal::WorkerThread"* %261, %"class.base::internal::WorkerThread"** %262, align 8
  %263 = icmp eq %"class.base::internal::WorkerThread"* %261, null
  br i1 %263, label %267, label %264

264:                                              ; preds = %259
  %265 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %261, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %266 = atomicrmw add i32* %265, i32 1 monotonic
  br label %267

267:                                              ; preds = %264, %259
  %268 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %229, i64 4
  %269 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %228, i64 4
  %270 = icmp eq %class.scoped_refptr.8* %268, %2
  br i1 %270, label %242, label %227

271:                                              ; preds = %104
  %272 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %106, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %273 = atomicrmw add i32* %272, i32 1 monotonic
  br label %274

274:                                              ; preds = %271, %104
  %275 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %96, i64 2, i32 0
  %276 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %275, align 8
  %277 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %95, i64 2, i32 0
  store %"class.base::internal::WorkerThread"* %276, %"class.base::internal::WorkerThread"** %277, align 8
  %278 = icmp eq %"class.base::internal::WorkerThread"* %276, null
  br i1 %278, label %282, label %279

279:                                              ; preds = %274
  %280 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %276, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %281 = atomicrmw add i32* %280, i32 1 monotonic
  br label %282

282:                                              ; preds = %279, %274
  %283 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %96, i64 3, i32 0
  %284 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %283, align 8
  %285 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %95, i64 3, i32 0
  store %"class.base::internal::WorkerThread"* %284, %"class.base::internal::WorkerThread"** %285, align 8
  %286 = icmp eq %"class.base::internal::WorkerThread"* %284, null
  br i1 %286, label %290, label %287

287:                                              ; preds = %282
  %288 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %284, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %289 = atomicrmw add i32* %288, i32 1 monotonic
  br label %290

290:                                              ; preds = %287, %282
  %291 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %96, i64 4
  %292 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %95, i64 4
  %293 = icmp eq %class.scoped_refptr.8* %291, %2
  br i1 %293, label %109, label %94
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

declare zeroext i1 @_ZN4base8internal39CanUseBackgroundPriorityForWorkerThreadEv() local_unnamed_addr #2

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #2

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #2

declare void @_ZN4base8internal13PriorityQueueC1Ev(%"class.base::internal::PriorityQueue"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegateD2Ev(%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*) unnamed_addr #10 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN4base8internal12_GLOBAL__N_120WorkerThreadDelegateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 8, i32 0
  tail call void @_ZN4base10AtomicFlagD1Ev(%"class.base::AtomicFlag"* %3) #12
  %4 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 7
  tail call void @_ZN4base8internal13PriorityQueueD1Ev(%"class.base::internal::PriorityQueue"* %4) #12
  %5 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 4
  %6 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %6, i64 0, i32 1, i32 0
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  tail call void @_ZdlPv(i8* %12) #13
  br label %13

13:                                               ; preds = %1, %10
  %14 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 3, i32 1
  %15 = load %"class.base::internal::TrackedRefFactory"*, %"class.base::internal::TrackedRefFactory"** %14, align 8
  %16 = icmp eq %"class.base::internal::TrackedRefFactory"* %15, null
  br i1 %16, label %29, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.base::internal::TrackedRefFactory", %"class.base::internal::TrackedRefFactory"* %15, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw sub i32* %18, i32 1 acq_rel
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %29

21:                                               ; preds = %17
  %22 = load %"class.base::internal::TrackedRefFactory"*, %"class.base::internal::TrackedRefFactory"** %14, align 8
  %23 = getelementptr inbounds %"class.base::internal::TrackedRefFactory", %"class.base::internal::TrackedRefFactory"* %22, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %24 = load i8, i8* %23, align 8, !range !2
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %27, !prof !3

26:                                               ; preds = %21
  tail call void @llvm.trap() #12
  unreachable

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.base::internal::TrackedRefFactory", %"class.base::internal::TrackedRefFactory"* %22, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2, i32 0
  tail call void @_ZN4base13WaitableEvent6SignalEv(%"class.base::WaitableEvent"* %28) #12
  br label %29

29:                                               ; preds = %13, %17, %27
  %30 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 1, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %30) #12
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegateD0Ev(%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*) unnamed_addr #10 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN4base8internal12_GLOBAL__N_120WorkerThreadDelegateE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 8, i32 0
  tail call void @_ZN4base10AtomicFlagD1Ev(%"class.base::AtomicFlag"* %3) #12
  %4 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 7
  tail call void @_ZN4base8internal13PriorityQueueD1Ev(%"class.base::internal::PriorityQueue"* %4) #12
  %5 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 4
  %6 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %6, i64 0, i32 1, i32 0
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  tail call void @_ZdlPv(i8* %12) #13
  br label %13

13:                                               ; preds = %10, %1
  %14 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 3, i32 1
  %15 = load %"class.base::internal::TrackedRefFactory"*, %"class.base::internal::TrackedRefFactory"** %14, align 8
  %16 = icmp eq %"class.base::internal::TrackedRefFactory"* %15, null
  br i1 %16, label %29, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.base::internal::TrackedRefFactory", %"class.base::internal::TrackedRefFactory"* %15, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw sub i32* %18, i32 1 acq_rel
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %29

21:                                               ; preds = %17
  %22 = load %"class.base::internal::TrackedRefFactory"*, %"class.base::internal::TrackedRefFactory"** %14, align 8
  %23 = getelementptr inbounds %"class.base::internal::TrackedRefFactory", %"class.base::internal::TrackedRefFactory"* %22, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %24 = load i8, i8* %23, align 8, !range !2
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %27, !prof !3

26:                                               ; preds = %21
  tail call void @llvm.trap() #12
  unreachable

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.base::internal::TrackedRefFactory", %"class.base::internal::TrackedRefFactory"* %22, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2, i32 0
  tail call void @_ZN4base13WaitableEvent6SignalEv(%"class.base::WaitableEvent"* %28) #12
  br label %29

29:                                               ; preds = %13, %17, %27
  %30 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 1, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImplD1Ev(%"class.base::internal::LockImpl"* %30) #12
  %31 = bitcast %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0 to i8*
  tail call void @_ZdlPv(i8* %31) #13
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @_ZNK4base8internal12_GLOBAL__N_120WorkerThreadDelegate14GetThreadLabelEv(%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* nocapture readonly) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 5
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegate11OnMainEntryEPKNS0_12WorkerThreadE(%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*, %"class.base::internal::WorkerThread"* nocapture readnone) unnamed_addr #0 align 2 {
  %3 = tail call i64 @_ZN4base14PlatformThread10CurrentRefEv() #12
  %4 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 8, i32 1, i32 0
  store i64 %3, i64* %4, align 8
  %5 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 8, i32 0
  tail call void @_ZN4base10AtomicFlag3SetEv(%"class.base::AtomicFlag"* %5) #12
  %6 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 4
  tail call void @_ZN4base14PlatformThread7SetNameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string"* dereferenceable(24) %6) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegate7GetWorkEPNS0_12WorkerThreadE(%"class.base::internal::RegisteredTaskSource"* noalias sret, %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*, %"class.base::internal::WorkerThread"* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::internal::RegisteredTaskSource", align 8
  %5 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %1, i64 0, i32 1
  %6 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %5, i64 0, i32 0, i32 0, i32 0
  %7 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %6) #12
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %11, label %9, !prof !4

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %5, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %10) #12
  br label %11

11:                                               ; preds = %3, %9
  %12 = bitcast %"class.base::internal::RegisteredTaskSource"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #12
  %13 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %4, i64 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %1, i64 0, i32 7
  %15 = bitcast %"class.base::internal::RegisteredTaskSource"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 16, i1 false)
  %16 = tail call zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"* %14) #12, !noalias !8
  br i1 %16, label %24, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %1, i64 0, i32 3, i32 0
  %19 = load %"class.base::internal::TaskTracker"*, %"class.base::internal::TaskTracker"** %18, align 8, !noalias !8
  %20 = tail call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %14) #12
  %21 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %20, i64 0, i32 0
  %22 = load i8, i8* %21, align 8
  %23 = tail call zeroext i1 @_ZNK4base8internal11TaskTracker14CanRunPriorityENS_12TaskPriorityE(%"class.base::internal::TaskTracker"* %19, i8 zeroext %22) #12
  br i1 %23, label %25, label %24

24:                                               ; preds = %17, %11
  call void @_ZN4base8internal20RegisteredTaskSourceC1EDn(%"class.base::internal::RegisteredTaskSource"* nonnull %4, i8* null) #12
  br label %26

25:                                               ; preds = %17
  call void @_ZN4base8internal13PriorityQueue13PopTaskSourceEv(%"class.base::internal::RegisteredTaskSource"* nonnull sret %4, %"class.base::internal::PriorityQueue"* %14) #12
  br label %26

26:                                               ; preds = %24, %25
  %27 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %13, align 8
  %28 = icmp eq %"class.base::internal::TaskSource"* %27, null
  br i1 %28, label %29, label %31

29:                                               ; preds = %26
  %30 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %1, i64 0, i32 2
  store i8 0, i8* %30, align 8
  call void @_ZN4base8internal20RegisteredTaskSourceC1EDn(%"class.base::internal::RegisteredTaskSource"* %0, i8* null) #12
  br label %33

31:                                               ; preds = %26
  %32 = call i32 @_ZN4base8internal20RegisteredTaskSource11WillRunTaskEv(%"class.base::internal::RegisteredTaskSource"* nonnull %4) #12
  call void @_ZN4base8internal20RegisteredTaskSourceC1EOS1_(%"class.base::internal::RegisteredTaskSource"* %0, %"class.base::internal::RegisteredTaskSource"* nonnull dereferenceable(16) %4) #12
  br label %33

33:                                               ; preds = %31, %29
  call void @_ZN4base8internal20RegisteredTaskSourceD1Ev(%"class.base::internal::RegisteredTaskSource"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #12
  %34 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %6) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegate14DidProcessTaskENS0_20RegisteredTaskSourceE(%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*, %"class.base::internal::RegisteredTaskSource"*) unnamed_addr #0 align 2 {
  %3 = alloca %"struct.base::internal::TransactionWithRegisteredTaskSource", align 8
  %4 = alloca %"class.base::internal::RegisteredTaskSource", align 8
  %5 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %1, i64 0, i32 0, i32 0
  %6 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %5, align 8
  %7 = icmp eq %"class.base::internal::TaskSource"* %6, null
  br i1 %7, label %12, label %8

8:                                                ; preds = %2
  call void @_ZN4base8internal20RegisteredTaskSourceC1EOS1_(%"class.base::internal::RegisteredTaskSource"* nonnull %4, %"class.base::internal::RegisteredTaskSource"* dereferenceable(16) %1) #12
  call void @_ZN4base8internal35TransactionWithRegisteredTaskSource14FromTaskSourceENS0_20RegisteredTaskSourceE(%"struct.base::internal::TransactionWithRegisteredTaskSource"* nonnull sret %3, %"class.base::internal::RegisteredTaskSource"* nonnull %4) #12
  %9 = call fastcc zeroext i1 @_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegate17EnqueueTaskSourceENS0_35TransactionWithRegisteredTaskSourceE(%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, %"struct.base::internal::TransactionWithRegisteredTaskSource"* nonnull %3)
  %10 = getelementptr inbounds %"struct.base::internal::TransactionWithRegisteredTaskSource", %"struct.base::internal::TransactionWithRegisteredTaskSource"* %3, i64 0, i32 1
  call void @_ZN4base8internal10TaskSource11TransactionD1Ev(%"class.base::internal::TaskSource::Transaction"* %10) #12
  %11 = getelementptr inbounds %"struct.base::internal::TransactionWithRegisteredTaskSource", %"struct.base::internal::TransactionWithRegisteredTaskSource"* %3, i64 0, i32 0
  call void @_ZN4base8internal20RegisteredTaskSourceD1Ev(%"class.base::internal::RegisteredTaskSource"* nonnull %11) #12
  call void @_ZN4base8internal20RegisteredTaskSourceD1Ev(%"class.base::internal::RegisteredTaskSource"* nonnull %4) #12
  br label %12

12:                                               ; preds = %2, %8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i64 @_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegate15GetSleepTimeoutEv(%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* nocapture readnone) unnamed_addr #11 align 2 {
  ret i64 9223372036854775807
}

declare void @_ZN4base8internal12WorkerThread8Delegate11WaitForWorkEPNS_13WaitableEventE(%"class.base::internal::WorkerThread::Delegate"*, %"class.base::WaitableEvent"*) unnamed_addr #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegate10OnMainExitEPNS0_12WorkerThreadE(%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* nocapture, %"class.base::internal::WorkerThread"* nocapture) unnamed_addr #11 align 2 {
  ret void
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

declare void @_ZN4base10AtomicFlagC1Ev(%"class.base::AtomicFlag"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base8internal13PriorityQueueD1Ev(%"class.base::internal::PriorityQueue"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN4base10AtomicFlagD1Ev(%"class.base::AtomicFlag"*) unnamed_addr #4

declare void @_ZN4base14PlatformThread7SetNameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #2

declare i64 @_ZN4base14PlatformThread10CurrentRefEv() local_unnamed_addr #2

declare void @_ZN4base10AtomicFlag3SetEv(%"class.base::AtomicFlag"*) local_unnamed_addr #2

declare void @_ZN4base8internal20RegisteredTaskSourceC1EDn(%"class.base::internal::RegisteredTaskSource"*, i8*) unnamed_addr #2

declare i32 @_ZN4base8internal20RegisteredTaskSource11WillRunTaskEv(%"class.base::internal::RegisteredTaskSource"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base8internal20RegisteredTaskSourceC1EOS1_(%"class.base::internal::RegisteredTaskSource"*, %"class.base::internal::RegisteredTaskSource"* dereferenceable(16)) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN4base8internal20RegisteredTaskSourceD1Ev(%"class.base::internal::RegisteredTaskSource"*) unnamed_addr #4

declare void @_ZN4base8internal13PriorityQueue13PopTaskSourceEv(%"class.base::internal::RegisteredTaskSource"* sret, %"class.base::internal::PriorityQueue"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegate17EnqueueTaskSourceENS0_35TransactionWithRegisteredTaskSourceE(%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*, %"struct.base::internal::TransactionWithRegisteredTaskSource"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::internal::RegisteredTaskSource", align 8
  %4 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %4, i64 0, i32 0, i32 0, i32 0
  %6 = tail call i32 @pthread_mutex_trylock(%union.pthread_mutex_t* %5) #12
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %10, label %8, !prof !4

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::internal::CheckedLock", %"class.base::internal::CheckedLock"* %4, i64 0, i32 0, i32 0
  tail call void @_ZN4base8internal8LockImpl24LockInternalWithTrackingEv(%"class.base::internal::LockImpl"* %9) #12
  br label %10

10:                                               ; preds = %2, %8
  %11 = getelementptr inbounds %"struct.base::internal::TransactionWithRegisteredTaskSource", %"struct.base::internal::TransactionWithRegisteredTaskSource"* %1, i64 0, i32 0
  %12 = getelementptr inbounds %"struct.base::internal::TransactionWithRegisteredTaskSource", %"struct.base::internal::TransactionWithRegisteredTaskSource"* %1, i64 0, i32 0, i32 0, i32 0
  %13 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %12, align 8
  %14 = bitcast %"class.base::internal::TaskSource"* %13 to { i64, i64 } (%"class.base::internal::TaskSource"*, i1)***
  %15 = load { i64, i64 } (%"class.base::internal::TaskSource"*, i1)**, { i64, i64 } (%"class.base::internal::TaskSource"*, i1)*** %14, align 8
  %16 = getelementptr inbounds { i64, i64 } (%"class.base::internal::TaskSource"*, i1)*, { i64, i64 } (%"class.base::internal::TaskSource"*, i1)** %15, i64 2
  %17 = load { i64, i64 } (%"class.base::internal::TaskSource"*, i1)*, { i64, i64 } (%"class.base::internal::TaskSource"*, i1)** %16, align 8
  %18 = tail call { i64, i64 } %17(%"class.base::internal::TaskSource"* %13, i1 zeroext false) #12
  %19 = extractvalue { i64, i64 } %18, 0
  %20 = extractvalue { i64, i64 } %18, 1
  %21 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 7
  call void @_ZN4base8internal20RegisteredTaskSourceC1EOS1_(%"class.base::internal::RegisteredTaskSource"* nonnull %3, %"class.base::internal::RegisteredTaskSource"* dereferenceable(16) %11) #12
  call void @_ZN4base8internal13PriorityQueue4PushENS0_20RegisteredTaskSourceENS0_17TaskSourceSortKeyE(%"class.base::internal::PriorityQueue"* %21, %"class.base::internal::RegisteredTaskSource"* nonnull %3, i64 %19, i64 %20) #12
  call void @_ZN4base8internal20RegisteredTaskSourceD1Ev(%"class.base::internal::RegisteredTaskSource"* nonnull %3) #12
  %22 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 2
  %23 = load i8, i8* %22, align 8, !range !2
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %35

25:                                               ; preds = %10
  %26 = call zeroext i1 @_ZNK4base8internal13PriorityQueue7IsEmptyEv(%"class.base::internal::PriorityQueue"* %21) #12
  br i1 %26, label %35, label %27

27:                                               ; preds = %25
  %28 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 3, i32 0
  %29 = load %"class.base::internal::TaskTracker"*, %"class.base::internal::TaskTracker"** %28, align 8
  %30 = call dereferenceable(16) %"class.base::internal::TaskSourceSortKey"* @_ZNK4base8internal13PriorityQueue11PeekSortKeyEv(%"class.base::internal::PriorityQueue"* %21) #12
  %31 = getelementptr inbounds %"class.base::internal::TaskSourceSortKey", %"class.base::internal::TaskSourceSortKey"* %30, i64 0, i32 0
  %32 = load i8, i8* %31, align 8
  %33 = call zeroext i1 @_ZNK4base8internal11TaskTracker14CanRunPriorityENS_12TaskPriorityE(%"class.base::internal::TaskTracker"* %29, i8 zeroext %32) #12
  br i1 %33, label %34, label %35

34:                                               ; preds = %27
  store i8 1, i8* %22, align 8
  br label %35

35:                                               ; preds = %25, %27, %10, %34
  %36 = phi i1 [ true, %34 ], [ false, %10 ], [ false, %27 ], [ false, %25 ]
  %37 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %5) #12
  ret i1 %36
}

declare void @_ZN4base8internal35TransactionWithRegisteredTaskSource14FromTaskSourceENS0_20RegisteredTaskSourceE(%"struct.base::internal::TransactionWithRegisteredTaskSource"* sret, %"class.base::internal::RegisteredTaskSource"*) local_unnamed_addr #2

declare void @_ZN4base8internal13PriorityQueue4PushENS0_20RegisteredTaskSourceENS0_17TaskSourceSortKeyE(%"class.base::internal::PriorityQueue"*, %"class.base::internal::RegisteredTaskSource"*, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base8internal10TaskSource11TransactionD1Ev(%"class.base::internal::TaskSource::Transaction"*) unnamed_addr #4

declare void @_ZN4base8internal12WorkerThreadC1ENS_14ThreadPriorityENSt3__110unique_ptrINS1_8DelegateENS3_14default_deleteIS5_EEEENS0_10TrackedRefINS0_11TaskTrackerEEEPKNS0_11CheckedLockE(%"class.base::internal::WorkerThread"*, i32, %"class.base::internal::WorkerThread::Delegate"*, %"class.base::internal::TrackedRef"*, %"class.base::internal::CheckedLock"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI13scoped_refptrIN4base8internal12WorkerThreadEENS_9allocatorIS5_EEE24__emplace_back_slow_pathIJS5_EEEvDpOT_(%"class.std::__1::vector.6"*, %class.scoped_refptr.8* dereferenceable(8)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %class.scoped_refptr.8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.6"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 3
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 2305843009213693951
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.6"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #14
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %class.scoped_refptr.8** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 3
  %20 = icmp ult i64 %19, 1152921504606846975
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 2
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 2305843009213693951
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #14
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 2305843009213693951, %14 ]
  %31 = shl i64 %30, 3
  %32 = tail call i8* @_Znwm(i64 %31) #13
  %33 = bitcast i8* %32 to %class.scoped_refptr.8*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %class.scoped_refptr.8* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %36, i64 %9
  %38 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %36, i64 %35
  %39 = ptrtoint %class.scoped_refptr.8* %38 to i64
  %40 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %1, i64 0, i32 0
  %41 = bitcast %class.scoped_refptr.8* %1 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %class.scoped_refptr.8* %37 to i64*
  store i64 %42, i64* %43, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %40, align 8
  %44 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %37, i64 1
  %45 = ptrtoint %class.scoped_refptr.8* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 0
  %47 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %46, align 8
  %48 = ptrtoint %class.scoped_refptr.8* %47 to i64
  %49 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %3, align 8
  %50 = icmp eq %class.scoped_refptr.8* %49, %47
  br i1 %50, label %132, label %51

51:                                               ; preds = %34
  %52 = getelementptr %class.scoped_refptr.8, %class.scoped_refptr.8* %49, i64 -1, i32 0
  %53 = ptrtoint %"class.base::internal::WorkerThread"** %52 to i64
  %54 = sub i64 %53, %48
  %55 = lshr i64 %54, 3
  %56 = add nuw nsw i64 %55, 1
  %57 = and i64 %56, 7
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %71, label %59

59:                                               ; preds = %51, %59
  %60 = phi %class.scoped_refptr.8* [ %63, %59 ], [ %37, %51 ]
  %61 = phi %class.scoped_refptr.8* [ %64, %59 ], [ %49, %51 ]
  %62 = phi i64 [ %69, %59 ], [ %57, %51 ]
  %63 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %60, i64 -1
  %64 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %61, i64 -1
  %65 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %64, i64 0, i32 0
  %66 = bitcast %class.scoped_refptr.8* %64 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast %class.scoped_refptr.8* %63 to i64*
  store i64 %67, i64* %68, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %65, align 8
  %69 = add i64 %62, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %59, !llvm.loop !11

71:                                               ; preds = %59, %51
  %72 = phi %class.scoped_refptr.8* [ undef, %51 ], [ %63, %59 ]
  %73 = phi %class.scoped_refptr.8* [ %37, %51 ], [ %63, %59 ]
  %74 = phi %class.scoped_refptr.8* [ %49, %51 ], [ %64, %59 ]
  %75 = icmp ult i64 %54, 56
  br i1 %75, label %128, label %76

76:                                               ; preds = %71, %76
  %77 = phi %class.scoped_refptr.8* [ %121, %76 ], [ %73, %71 ]
  %78 = phi %class.scoped_refptr.8* [ %122, %76 ], [ %74, %71 ]
  %79 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %77, i64 -1
  %80 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %78, i64 -1
  %81 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %80, i64 0, i32 0
  %82 = bitcast %class.scoped_refptr.8* %80 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = bitcast %class.scoped_refptr.8* %79 to i64*
  store i64 %83, i64* %84, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %81, align 8
  %85 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %77, i64 -2
  %86 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %78, i64 -2
  %87 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %86, i64 0, i32 0
  %88 = bitcast %class.scoped_refptr.8* %86 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = bitcast %class.scoped_refptr.8* %85 to i64*
  store i64 %89, i64* %90, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %87, align 8
  %91 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %77, i64 -3
  %92 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %78, i64 -3
  %93 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %92, i64 0, i32 0
  %94 = bitcast %class.scoped_refptr.8* %92 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = bitcast %class.scoped_refptr.8* %91 to i64*
  store i64 %95, i64* %96, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %93, align 8
  %97 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %77, i64 -4
  %98 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %78, i64 -4
  %99 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %98, i64 0, i32 0
  %100 = bitcast %class.scoped_refptr.8* %98 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = bitcast %class.scoped_refptr.8* %97 to i64*
  store i64 %101, i64* %102, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %99, align 8
  %103 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %77, i64 -5
  %104 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %78, i64 -5
  %105 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %104, i64 0, i32 0
  %106 = bitcast %class.scoped_refptr.8* %104 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %class.scoped_refptr.8* %103 to i64*
  store i64 %107, i64* %108, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %105, align 8
  %109 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %77, i64 -6
  %110 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %78, i64 -6
  %111 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %110, i64 0, i32 0
  %112 = bitcast %class.scoped_refptr.8* %110 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %class.scoped_refptr.8* %109 to i64*
  store i64 %113, i64* %114, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %111, align 8
  %115 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %77, i64 -7
  %116 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %78, i64 -7
  %117 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %116, i64 0, i32 0
  %118 = bitcast %class.scoped_refptr.8* %116 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %class.scoped_refptr.8* %115 to i64*
  store i64 %119, i64* %120, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %117, align 8
  %121 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %77, i64 -8
  %122 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %78, i64 -8
  %123 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %122, i64 0, i32 0
  %124 = bitcast %class.scoped_refptr.8* %122 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = bitcast %class.scoped_refptr.8* %121 to i64*
  store i64 %125, i64* %126, align 8
  store %"class.base::internal::WorkerThread"* null, %"class.base::internal::WorkerThread"** %123, align 8
  %127 = icmp eq %class.scoped_refptr.8* %122, %47
  br i1 %127, label %128, label %76

128:                                              ; preds = %76, %71
  %129 = phi %class.scoped_refptr.8* [ %72, %71 ], [ %121, %76 ]
  %130 = load i64, i64* %6, align 8
  %131 = load %class.scoped_refptr.8*, %class.scoped_refptr.8** %3, align 8
  br label %132

132:                                              ; preds = %34, %128
  %133 = phi %class.scoped_refptr.8* [ %131, %128 ], [ %47, %34 ]
  %134 = phi %class.scoped_refptr.8* [ %129, %128 ], [ %37, %34 ]
  %135 = phi i64 [ %130, %128 ], [ %48, %34 ]
  %136 = ptrtoint %class.scoped_refptr.8* %134 to i64
  store i64 %136, i64* %6, align 8
  store i64 %45, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %137 = inttoptr i64 %135 to %class.scoped_refptr.8*
  %138 = icmp eq %class.scoped_refptr.8* %133, %137
  br i1 %138, label %159, label %139

139:                                              ; preds = %132, %157
  %140 = phi %class.scoped_refptr.8* [ %141, %157 ], [ %133, %132 ]
  %141 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %140, i64 -1
  %142 = getelementptr inbounds %class.scoped_refptr.8, %class.scoped_refptr.8* %141, i64 0, i32 0
  %143 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %142, align 8
  %144 = icmp eq %"class.base::internal::WorkerThread"* %143, null
  br i1 %144, label %157, label %145

145:                                              ; preds = %139
  %146 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %143, i64 0, i32 1
  %147 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %146, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %148 = atomicrmw sub i32* %147, i32 1 acq_rel
  %149 = icmp eq i32 %148, 1
  br i1 %149, label %150, label %157

150:                                              ; preds = %145
  %151 = getelementptr inbounds %"class.base::RefCountedThreadSafe.14", %"class.base::RefCountedThreadSafe.14"* %146, i64 -2
  %152 = bitcast %"class.base::RefCountedThreadSafe.14"* %151 to %"class.base::internal::WorkerThread"*
  %153 = bitcast %"class.base::RefCountedThreadSafe.14"* %151 to void (%"class.base::internal::WorkerThread"*)***
  %154 = load void (%"class.base::internal::WorkerThread"*)**, void (%"class.base::internal::WorkerThread"*)*** %153, align 8
  %155 = getelementptr inbounds void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %154, i64 3
  %156 = load void (%"class.base::internal::WorkerThread"*)*, void (%"class.base::internal::WorkerThread"*)** %155, align 8
  tail call void %156(%"class.base::internal::WorkerThread"* nonnull %152) #12
  br label %157

157:                                              ; preds = %150, %145, %139
  %158 = icmp eq %class.scoped_refptr.8* %141, %137
  br i1 %158, label %159, label %139

159:                                              ; preds = %157, %132
  %160 = icmp eq i64 %135, 0
  br i1 %160, label %163, label %161

161:                                              ; preds = %159
  %162 = inttoptr i64 %135 to i8*
  tail call void @_ZdlPv(i8* %162) #13
  br label %163

163:                                              ; preds = %159, %161
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4base8internal35PooledSingleThreadTaskRunnerManager28PooledSingleThreadTaskRunner15PostDelayedTaskERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeDeltaE(%"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"*, %"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback"*, i64) unnamed_addr #0 comdat align 2 {
  %5 = alloca %"struct.base::internal::Task", align 8
  %6 = alloca %"class.base::OnceCallback", align 8
  %7 = alloca %"struct.base::internal::Task", align 8
  %8 = alloca %"struct.base::internal::Task", align 8
  %9 = alloca %"class.base::OnceCallback.3", align 8
  %10 = load i1, i1* @_ZN4base8internal12_GLOBAL__N_118g_manager_is_aliveE, align 1
  br i1 %10, label %11, label %85

11:                                               ; preds = %4
  %12 = bitcast %"struct.base::internal::Task"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %12) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 112, i1 false)
  %13 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %14 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.base::OnceCallback"* %6 to i64*
  store i64 %15, i64* %16, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %13, align 8
  %17 = tail call i64 @_ZN4base9TimeTicks3NowEv() #12
  call void @_ZN4base8internal4TaskC1ERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeTicksENS_9TimeDeltaE(%"struct.base::internal::Task"* nonnull %5, %"class.base::Location"* dereferenceable(32) %1, %"class.base::OnceCallback"* nonnull %6, i64 %17, i64 %3) #12
  %18 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %6, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %18) #12
  %19 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner", %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0, i64 0, i32 1
  %20 = load %"class.base::internal::PooledSingleThreadTaskRunnerManager"*, %"class.base::internal::PooledSingleThreadTaskRunnerManager"** %19, align 8
  %21 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %20, i64 0, i32 0, i32 0
  %22 = load %"class.base::internal::TaskTracker"*, %"class.base::internal::TaskTracker"** %21, align 8
  %23 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner", %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0, i64 0, i32 4, i32 0
  %24 = bitcast %"class.base::internal::Sequence"** %23 to %"class.base::internal::TaskSource"**
  %25 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %24, align 8
  %26 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %25, i64 0, i32 2, i32 2
  %27 = load i8, i8* %26, align 1
  %28 = and i8 %27, 127
  %29 = call zeroext i1 @_ZN4base8internal11TaskTracker12WillPostTaskEPNS0_4TaskENS_20TaskShutdownBehaviorE(%"class.base::internal::TaskTracker"* %22, %"struct.base::internal::Task"* nonnull %5, i8 zeroext %28) #12
  br i1 %29, label %30, label %82

30:                                               ; preds = %11
  %31 = getelementptr inbounds %"struct.base::internal::Task", %"struct.base::internal::Task"* %5, i64 0, i32 0, i32 3, i32 0, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %47

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner", %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0, i64 0, i32 2
  %36 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %35, align 8
  %37 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %36, i64 0, i32 10, i32 0, i32 0, i32 0
  %38 = bitcast %"class.base::internal::WorkerThread::Delegate"** %37 to %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"**
  %39 = load %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*, %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"** %38, align 8
  %40 = load %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %23, align 8
  %41 = icmp eq %"class.base::internal::Sequence"* %40, null
  br i1 %41, label %45, label %42

42:                                               ; preds = %34
  %43 = getelementptr inbounds %"class.base::internal::Sequence", %"class.base::internal::Sequence"* %40, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = atomicrmw add i32* %43, i32 1 monotonic
  br label %45

45:                                               ; preds = %34, %42
  call void @_ZN4base8internal4TaskC1EOS1_(%"struct.base::internal::Task"* nonnull %7, %"struct.base::internal::Task"* nonnull dereferenceable(112) %5) #12
  %46 = call zeroext i1 @_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegate11PostTaskNowE13scoped_refptrINS0_8SequenceEENS0_4TaskE(%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %39, %"class.base::internal::Sequence"* %40, %"struct.base::internal::Task"* nonnull %7)
  br label %78

47:                                               ; preds = %30
  %48 = load %"class.base::internal::PooledSingleThreadTaskRunnerManager"*, %"class.base::internal::PooledSingleThreadTaskRunnerManager"** %19, align 8
  %49 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager", %"class.base::internal::PooledSingleThreadTaskRunnerManager"* %48, i64 0, i32 1
  %50 = load %"class.base::internal::DelayedTaskManager"*, %"class.base::internal::DelayedTaskManager"** %49, align 8
  call void @_ZN4base8internal4TaskC1EOS1_(%"struct.base::internal::Task"* nonnull %8, %"struct.base::internal::Task"* nonnull dereferenceable(112) %5) #12
  %51 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner", %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0, i64 0, i32 2
  %52 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %51, align 8
  %53 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %52, i64 0, i32 10, i32 0, i32 0, i32 0
  %54 = bitcast %"class.base::internal::WorkerThread::Delegate"** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = call i8* @_Znwm(i64 64) #13, !noalias !12
  %57 = bitcast i8* %56 to %"class.base::internal::BindStateBase"*
  call void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"* nonnull %57, void ()* bitcast (void (%"class.base::internal::BindStateBase"*, %"struct.base::internal::Task"*)* @_ZN4base8internal7InvokerINS0_9BindStateINS0_18IgnoreResultHelperIMNS0_12_GLOBAL__N_120WorkerThreadDelegateEFb13scoped_refptrINS0_8SequenceEENS0_4TaskEEEEJNS0_17UnretainedWrapperIS5_EES8_EEEFvS9_EE7RunOnceEPNS0_13BindStateBaseEOS9_ to void ()*), void (%"class.base::internal::BindStateBase"*)* nonnull @_ZN4base8internal9BindStateINS0_18IgnoreResultHelperIMNS0_12_GLOBAL__N_120WorkerThreadDelegateEFb13scoped_refptrINS0_8SequenceEENS0_4TaskEEEEJNS0_17UnretainedWrapperIS4_EES7_EE7DestroyEPKNS0_13BindStateBaseE) #12, !noalias !12
  %58 = getelementptr inbounds i8, i8* %56, i64 32
  %59 = bitcast i8* %58 to <2 x i64>*
  store <2 x i64> <i64 ptrtoint (i1 (%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*, %"class.base::internal::Sequence"*, %"struct.base::internal::Task"*)* @_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegate11PostTaskNowE13scoped_refptrINS0_8SequenceEENS0_4TaskE to i64), i64 0>, <2 x i64>* %59, align 8, !noalias !12
  %60 = getelementptr inbounds i8, i8* %56, i64 48
  %61 = bitcast i8* %60 to i64*
  store i64 %55, i64* %61, align 8, !noalias !12
  %62 = load %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %23, align 8, !noalias !12
  %63 = getelementptr inbounds i8, i8* %56, i64 56
  %64 = bitcast i8* %63 to %"class.base::internal::Sequence"**
  store %"class.base::internal::Sequence"* %62, %"class.base::internal::Sequence"** %64, align 8, !noalias !12
  %65 = icmp eq %"class.base::internal::Sequence"* %62, null
  br i1 %65, label %69, label %66

66:                                               ; preds = %47
  %67 = getelementptr inbounds %"class.base::internal::Sequence", %"class.base::internal::Sequence"* %62, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = atomicrmw add i32* %67, i32 1 monotonic, !noalias !12
  br label %69

69:                                               ; preds = %47, %66
  %70 = bitcast %"class.base::OnceCallback.3"* %9 to i8**
  store i8* %56, i8** %70, align 8, !alias.scope !12
  %71 = bitcast %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0 to %"class.base::TaskRunner"*
  %72 = icmp eq %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0, null
  br i1 %72, label %76, label %73

73:                                               ; preds = %69
  %74 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner", %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = atomicrmw add i32* %74, i32 1 monotonic
  br label %76

76:                                               ; preds = %69, %73
  call void @_ZN4base8internal18DelayedTaskManager14AddDelayedTaskENS0_4TaskENS_12OnceCallbackIFvS2_EEE13scoped_refptrINS_10TaskRunnerEE(%"class.base::internal::DelayedTaskManager"* %50, %"struct.base::internal::Task"* nonnull %8, %"class.base::OnceCallback.3"* nonnull %9, %"class.base::TaskRunner"* %71) #12
  %77 = getelementptr inbounds %"class.base::OnceCallback.3", %"class.base::OnceCallback.3"* %9, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %77) #12
  br label %78

78:                                               ; preds = %45, %76
  %79 = phi %"struct.base::internal::Task"* [ %8, %76 ], [ %7, %45 ]
  %80 = phi i1 [ true, %76 ], [ %46, %45 ]
  %81 = bitcast %"struct.base::internal::Task"* %79 to %"struct.base::PendingTask"*
  call void @_ZN4base11PendingTaskD2Ev(%"struct.base::PendingTask"* nonnull %81) #12
  br label %82

82:                                               ; preds = %78, %11
  %83 = phi i1 [ false, %11 ], [ %80, %78 ]
  %84 = bitcast %"struct.base::internal::Task"* %5 to %"struct.base::PendingTask"*
  call void @_ZN4base11PendingTaskD2Ev(%"struct.base::PendingTask"* nonnull %84) #12
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %12) #12
  br label %85

85:                                               ; preds = %4, %82
  %86 = phi i1 [ %83, %82 ], [ false, %4 ]
  ret i1 %86
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal35PooledSingleThreadTaskRunnerManager28PooledSingleThreadTaskRunnerD2Ev(%"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner", %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4base8internal35PooledSingleThreadTaskRunnerManager28PooledSingleThreadTaskRunnerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = load i1, i1* @_ZN4base8internal12_GLOBAL__N_118g_manager_is_aliveE, align 1
  br i1 %3, label %4, label %13

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner", %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0, i64 0, i32 3
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %8, label %13

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner", %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0, i64 0, i32 1
  %10 = load %"class.base::internal::PooledSingleThreadTaskRunnerManager"*, %"class.base::internal::PooledSingleThreadTaskRunnerManager"** %9, align 8
  %11 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner", %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0, i64 0, i32 2
  %12 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %11, align 8
  tail call void @_ZN4base8internal35PooledSingleThreadTaskRunnerManager22UnregisterWorkerThreadEPNS0_12WorkerThreadE(%"class.base::internal::PooledSingleThreadTaskRunnerManager"* %10, %"class.base::internal::WorkerThread"* %12)
  br label %13

13:                                               ; preds = %8, %4, %1
  %14 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner", %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0, i64 0, i32 4, i32 0
  %15 = load %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %14, align 8
  %16 = icmp eq %"class.base::internal::Sequence"* %15, null
  br i1 %16, label %29, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.base::internal::Sequence", %"class.base::internal::Sequence"* %15, i64 0, i32 0, i32 1
  %19 = getelementptr inbounds %"class.base::RefCountedThreadSafe.84", %"class.base::RefCountedThreadSafe.84"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = atomicrmw sub i32* %19, i32 1 acq_rel
  %21 = icmp eq i32 %20, 1
  br i1 %21, label %22, label %29

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.base::RefCountedThreadSafe.84", %"class.base::RefCountedThreadSafe.84"* %18, i64 -2
  %24 = bitcast %"class.base::RefCountedThreadSafe.84"* %23 to %"class.base::internal::TaskSource"*
  %25 = bitcast %"class.base::RefCountedThreadSafe.84"* %23 to void (%"class.base::internal::TaskSource"*)***
  %26 = load void (%"class.base::internal::TaskSource"*)**, void (%"class.base::internal::TaskSource"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %26, i64 4
  %28 = load void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %27, align 8
  tail call void %28(%"class.base::internal::TaskSource"* nonnull %24) #12
  br label %29

29:                                               ; preds = %13, %17, %22
  %30 = bitcast %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0 to %"class.base::TaskRunner"*
  tail call void @_ZN4base10TaskRunnerD2Ev(%"class.base::TaskRunner"* %30) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4base8internal35PooledSingleThreadTaskRunnerManager28PooledSingleThreadTaskRunnerD0Ev(%"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner", %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4base8internal35PooledSingleThreadTaskRunnerManager28PooledSingleThreadTaskRunnerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = load i1, i1* @_ZN4base8internal12_GLOBAL__N_118g_manager_is_aliveE, align 1
  br i1 %3, label %4, label %13

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner", %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0, i64 0, i32 3
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %8, label %13

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner", %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0, i64 0, i32 1
  %10 = load %"class.base::internal::PooledSingleThreadTaskRunnerManager"*, %"class.base::internal::PooledSingleThreadTaskRunnerManager"** %9, align 8
  %11 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner", %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0, i64 0, i32 2
  %12 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %11, align 8
  tail call void @_ZN4base8internal35PooledSingleThreadTaskRunnerManager22UnregisterWorkerThreadEPNS0_12WorkerThreadE(%"class.base::internal::PooledSingleThreadTaskRunnerManager"* %10, %"class.base::internal::WorkerThread"* %12) #12
  br label %13

13:                                               ; preds = %8, %4, %1
  %14 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner", %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0, i64 0, i32 4, i32 0
  %15 = load %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %14, align 8
  %16 = icmp eq %"class.base::internal::Sequence"* %15, null
  br i1 %16, label %29, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.base::internal::Sequence", %"class.base::internal::Sequence"* %15, i64 0, i32 0, i32 1
  %19 = getelementptr inbounds %"class.base::RefCountedThreadSafe.84", %"class.base::RefCountedThreadSafe.84"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = atomicrmw sub i32* %19, i32 1 acq_rel
  %21 = icmp eq i32 %20, 1
  br i1 %21, label %22, label %29

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.base::RefCountedThreadSafe.84", %"class.base::RefCountedThreadSafe.84"* %18, i64 -2
  %24 = bitcast %"class.base::RefCountedThreadSafe.84"* %23 to %"class.base::internal::TaskSource"*
  %25 = bitcast %"class.base::RefCountedThreadSafe.84"* %23 to void (%"class.base::internal::TaskSource"*)***
  %26 = load void (%"class.base::internal::TaskSource"*)**, void (%"class.base::internal::TaskSource"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %26, i64 4
  %28 = load void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %27, align 8
  tail call void %28(%"class.base::internal::TaskSource"* nonnull %24) #12
  br label %29

29:                                               ; preds = %13, %17, %22
  %30 = bitcast %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0 to %"class.base::TaskRunner"*
  tail call void @_ZN4base10TaskRunnerD2Ev(%"class.base::TaskRunner"* %30) #12
  %31 = bitcast %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0 to i8*
  tail call void @_ZdlPv(i8* %31) #13
  ret void
}

declare void @_ZNK4base10TaskRunner10OnDestructEv(%"class.base::TaskRunner"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN4base8internal35PooledSingleThreadTaskRunnerManager28PooledSingleThreadTaskRunner26PostNonNestableDelayedTaskERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeDeltaE(%"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"*, %"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback"*, i64) unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.base::OnceCallback", align 8
  %6 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %2, i64 0, i32 0, i32 0, i32 0
  %7 = bitcast %"class.base::OnceCallback"* %2 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.base::OnceCallback"* %5 to i64*
  store i64 %8, i64* %9, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %6, align 8
  %10 = bitcast %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0 to i1 (%"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)***
  %11 = load i1 (%"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)**, i1 (%"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*** %10, align 8
  %12 = load i1 (%"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)*, i1 (%"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"*, %"class.base::Location"*, %"class.base::OnceCallback"*, i64)** %11, align 8
  %13 = call zeroext i1 %12(%"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0, %"class.base::Location"* dereferenceable(32) %1, %"class.base::OnceCallback"* nonnull %5, i64 %3) #12
  %14 = getelementptr inbounds %"class.base::OnceCallback", %"class.base::OnceCallback"* %5, i64 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %14) #12
  ret i1 %13
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4base8internal35PooledSingleThreadTaskRunnerManager28PooledSingleThreadTaskRunner26RunsTasksInCurrentSequenceEv(%"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"*) unnamed_addr #0 comdat align 2 {
  %2 = load i1, i1* @_ZN4base8internal12_GLOBAL__N_118g_manager_is_aliveE, align 1
  br i1 %2, label %3, label %17

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner", %"class.base::internal::PooledSingleThreadTaskRunnerManager::PooledSingleThreadTaskRunner"* %0, i64 0, i32 2
  %5 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %4, align 8
  %6 = getelementptr inbounds %"class.base::internal::WorkerThread", %"class.base::internal::WorkerThread"* %5, i64 0, i32 10, i32 0, i32 0, i32 0
  %7 = bitcast %"class.base::internal::WorkerThread::Delegate"** %6 to %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"**
  %8 = load %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*, %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"** %7, align 8
  %9 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %8, i64 0, i32 8, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i8, i8* %9 acquire, align 1
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %17, label %12

12:                                               ; preds = %3
  %13 = tail call i64 @_ZN4base14PlatformThread10CurrentRefEv() #12
  %14 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %8, i64 0, i32 8, i32 1, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = icmp eq i64 %15, %13
  br label %17

17:                                               ; preds = %12, %3, %1
  %18 = phi i1 [ false, %1 ], [ false, %3 ], [ %16, %12 ]
  ret i1 %18
}

declare void @_ZN4base10TaskRunnerC2Ev(%"class.base::TaskRunner"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base10TaskRunnerD2Ev(%"class.base::TaskRunner"*) unnamed_addr #4

declare void @_ZN4base8internal8SequenceC1ERKNS_10TaskTraitsEPNS_10TaskRunnerENS0_23TaskSourceExecutionModeE(%"class.base::internal::Sequence"*, %"class.base::TaskTraits"* dereferenceable(15), %"class.base::TaskRunner"*, i32) unnamed_addr #2

declare i64 @_ZN4base9TimeTicks3NowEv() local_unnamed_addr #2

declare void @_ZN4base8internal4TaskC1ERKNS_8LocationENS_12OnceCallbackIFvvEEENS_9TimeTicksENS_9TimeDeltaE(%"struct.base::internal::Task"*, %"class.base::Location"* dereferenceable(32), %"class.base::OnceCallback"*, i64, i64) unnamed_addr #2

declare zeroext i1 @_ZN4base8internal11TaskTracker12WillPostTaskEPNS0_4TaskENS_20TaskShutdownBehaviorE(%"class.base::internal::TaskTracker"*, %"struct.base::internal::Task"*, i8 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegate11PostTaskNowE13scoped_refptrINS0_8SequenceEENS0_4TaskE(%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*, %"class.base::internal::Sequence"*, %"struct.base::internal::Task"*) #0 align 2 {
  %4 = alloca %"class.base::internal::Sequence::Transaction", align 8
  %5 = alloca %"class.base::internal::RegisteredTaskSource", align 8
  %6 = alloca %"class.base::internal::RegisteredTaskSource", align 8
  %7 = alloca %"struct.base::internal::Task", align 8
  %8 = alloca %"struct.base::internal::TransactionWithRegisteredTaskSource", align 8
  %9 = alloca %"class.base::internal::RegisteredTaskSource", align 8
  %10 = alloca %"class.base::internal::TaskSource::Transaction", align 8
  %11 = bitcast %"class.base::internal::Sequence::Transaction"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #12
  %12 = getelementptr inbounds %"class.base::internal::Sequence::Transaction", %"class.base::internal::Sequence::Transaction"* %4, i64 0, i32 0, i32 0
  store %"class.base::internal::TaskSource"* inttoptr (i64 -6148914691236517206 to %"class.base::internal::TaskSource"*), %"class.base::internal::TaskSource"** %12, align 8
  call void @_ZN4base8internal8Sequence16BeginTransactionEv(%"class.base::internal::Sequence::Transaction"* nonnull sret %4, %"class.base::internal::Sequence"* %1) #12
  %13 = call zeroext i1 @_ZNK4base8internal8Sequence11Transaction12WillPushTaskEv(%"class.base::internal::Sequence::Transaction"* nonnull %4) #12
  %14 = bitcast %"class.base::internal::RegisteredTaskSource"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #12
  %15 = getelementptr inbounds %"class.base::internal::RegisteredTaskSource", %"class.base::internal::RegisteredTaskSource"* %5, i64 0, i32 0, i32 0
  %16 = bitcast %"class.base::internal::RegisteredTaskSource"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -86, i64 16, i1 false)
  call void @_ZN4base8internal20RegisteredTaskSourceC1Ev(%"class.base::internal::RegisteredTaskSource"* nonnull %5) #12
  br i1 %13, label %17, label %30

17:                                               ; preds = %3
  %18 = bitcast %"class.base::internal::RegisteredTaskSource"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #12
  %19 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 3, i32 0
  %20 = load %"class.base::internal::TaskTracker"*, %"class.base::internal::TaskTracker"** %19, align 8
  %21 = bitcast %"class.base::internal::Sequence"* %1 to %"class.base::internal::TaskSource"*
  %22 = icmp eq %"class.base::internal::Sequence"* %1, null
  br i1 %22, label %26, label %23

23:                                               ; preds = %17
  %24 = getelementptr inbounds %"class.base::internal::Sequence", %"class.base::internal::Sequence"* %1, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = atomicrmw add i32* %24, i32 1 monotonic
  br label %26

26:                                               ; preds = %17, %23
  call void @_ZN4base8internal11TaskTracker18RegisterTaskSourceE13scoped_refptrINS0_10TaskSourceEE(%"class.base::internal::RegisteredTaskSource"* nonnull sret %6, %"class.base::internal::TaskTracker"* %20, %"class.base::internal::TaskSource"* %21) #12
  %27 = call dereferenceable(16) %"class.base::internal::RegisteredTaskSource"* @_ZN4base8internal20RegisteredTaskSourceaSEOS1_(%"class.base::internal::RegisteredTaskSource"* nonnull %5, %"class.base::internal::RegisteredTaskSource"* nonnull dereferenceable(16) %6) #12
  call void @_ZN4base8internal20RegisteredTaskSourceD1Ev(%"class.base::internal::RegisteredTaskSource"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #12
  %28 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %15, align 8
  %29 = icmp eq %"class.base::internal::TaskSource"* %28, null
  br i1 %29, label %49, label %30

30:                                               ; preds = %26, %3
  %31 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 3, i32 0
  %32 = load %"class.base::internal::TaskTracker"*, %"class.base::internal::TaskTracker"** %31, align 8
  %33 = getelementptr inbounds %"class.base::internal::Sequence::Transaction", %"class.base::internal::Sequence::Transaction"* %4, i64 0, i32 0
  %34 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %12, align 8, !noalias !17
  %35 = getelementptr inbounds %"class.base::internal::TaskSource", %"class.base::internal::TaskSource"* %34, i64 0, i32 2, i32 1
  %36 = load i8, i8* %35, align 1
  %37 = call zeroext i1 @_ZN4base8internal11TaskTracker15WillPostTaskNowERKNS0_4TaskENS_12TaskPriorityE(%"class.base::internal::TaskTracker"* %32, %"struct.base::internal::Task"* dereferenceable(112) %2, i8 zeroext %36) #12
  br i1 %37, label %38, label %49

38:                                               ; preds = %30
  call void @_ZN4base8internal4TaskC1EOS1_(%"struct.base::internal::Task"* nonnull %7, %"struct.base::internal::Task"* dereferenceable(112) %2) #12
  call void @_ZN4base8internal8Sequence11Transaction8PushTaskENS0_4TaskE(%"class.base::internal::Sequence::Transaction"* nonnull %4, %"struct.base::internal::Task"* nonnull %7) #12
  %39 = bitcast %"struct.base::internal::Task"* %7 to %"struct.base::PendingTask"*
  call void @_ZN4base11PendingTaskD2Ev(%"struct.base::PendingTask"* nonnull %39) #12
  %40 = load %"class.base::internal::TaskSource"*, %"class.base::internal::TaskSource"** %15, align 8
  %41 = icmp eq %"class.base::internal::TaskSource"* %40, null
  br i1 %41, label %49, label %42

42:                                               ; preds = %38
  call void @_ZN4base8internal20RegisteredTaskSourceC1EOS1_(%"class.base::internal::RegisteredTaskSource"* nonnull %9, %"class.base::internal::RegisteredTaskSource"* nonnull dereferenceable(16) %5) #12
  call void @_ZN4base8internal10TaskSource11TransactionC1EOS2_(%"class.base::internal::TaskSource::Transaction"* nonnull %10, %"class.base::internal::TaskSource::Transaction"* nonnull dereferenceable(8) %33) #12
  call void @_ZN4base8internal35TransactionWithRegisteredTaskSourceC1ENS0_20RegisteredTaskSourceENS0_10TaskSource11TransactionE(%"struct.base::internal::TransactionWithRegisteredTaskSource"* nonnull %8, %"class.base::internal::RegisteredTaskSource"* nonnull %9, %"class.base::internal::TaskSource::Transaction"* nonnull %10) #12
  %43 = call fastcc zeroext i1 @_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegate17EnqueueTaskSourceENS0_35TransactionWithRegisteredTaskSourceE(%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, %"struct.base::internal::TransactionWithRegisteredTaskSource"* nonnull %8)
  %44 = getelementptr inbounds %"struct.base::internal::TransactionWithRegisteredTaskSource", %"struct.base::internal::TransactionWithRegisteredTaskSource"* %8, i64 0, i32 1
  call void @_ZN4base8internal10TaskSource11TransactionD1Ev(%"class.base::internal::TaskSource::Transaction"* %44) #12
  %45 = getelementptr inbounds %"struct.base::internal::TransactionWithRegisteredTaskSource", %"struct.base::internal::TransactionWithRegisteredTaskSource"* %8, i64 0, i32 0
  call void @_ZN4base8internal20RegisteredTaskSourceD1Ev(%"class.base::internal::RegisteredTaskSource"* nonnull %45) #12
  call void @_ZN4base8internal10TaskSource11TransactionD1Ev(%"class.base::internal::TaskSource::Transaction"* nonnull %10) #12
  call void @_ZN4base8internal20RegisteredTaskSourceD1Ev(%"class.base::internal::RegisteredTaskSource"* nonnull %9) #12
  br i1 %43, label %46, label %49

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate", %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %0, i64 0, i32 6
  %48 = load %"class.base::internal::WorkerThread"*, %"class.base::internal::WorkerThread"** %47, align 8
  call void @_ZN4base8internal12WorkerThread6WakeUpEv(%"class.base::internal::WorkerThread"* %48) #12
  br label %49

49:                                               ; preds = %26, %38, %46, %42, %30
  %50 = phi i1 [ false, %26 ], [ false, %30 ], [ true, %42 ], [ true, %46 ], [ true, %38 ]
  call void @_ZN4base8internal20RegisteredTaskSourceD1Ev(%"class.base::internal::RegisteredTaskSource"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #12
  call void @_ZN4base8internal8Sequence11TransactionD1Ev(%"class.base::internal::Sequence::Transaction"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #12
  %51 = icmp eq %"class.base::internal::Sequence"* %1, null
  br i1 %51, label %64, label %52

52:                                               ; preds = %49
  %53 = getelementptr inbounds %"class.base::internal::Sequence", %"class.base::internal::Sequence"* %1, i64 0, i32 0, i32 1
  %54 = getelementptr inbounds %"class.base::RefCountedThreadSafe.84", %"class.base::RefCountedThreadSafe.84"* %53, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = atomicrmw sub i32* %54, i32 1 acq_rel
  %56 = icmp eq i32 %55, 1
  br i1 %56, label %57, label %64

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"class.base::RefCountedThreadSafe.84", %"class.base::RefCountedThreadSafe.84"* %53, i64 -2
  %59 = bitcast %"class.base::RefCountedThreadSafe.84"* %58 to %"class.base::internal::TaskSource"*
  %60 = bitcast %"class.base::RefCountedThreadSafe.84"* %58 to void (%"class.base::internal::TaskSource"*)***
  %61 = load void (%"class.base::internal::TaskSource"*)**, void (%"class.base::internal::TaskSource"*)*** %60, align 8
  %62 = getelementptr inbounds void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %61, i64 4
  %63 = load void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %62, align 8
  call void %63(%"class.base::internal::TaskSource"* nonnull %59) #12
  br label %64

64:                                               ; preds = %49, %52, %57
  ret i1 %50
}

; Function Attrs: nounwind
declare void @_ZN4base8internal4TaskC1EOS1_(%"struct.base::internal::Task"*, %"struct.base::internal::Task"* dereferenceable(112)) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN4base11PendingTaskD2Ev(%"struct.base::PendingTask"*) unnamed_addr #4

declare void @_ZN4base8internal18DelayedTaskManager14AddDelayedTaskENS0_4TaskENS_12OnceCallbackIFvS2_EEE13scoped_refptrINS_10TaskRunnerEE(%"class.base::internal::DelayedTaskManager"*, %"struct.base::internal::Task"*, %"class.base::OnceCallback.3"*, %"class.base::TaskRunner"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #4

declare void @_ZN4base8internal8Sequence16BeginTransactionEv(%"class.base::internal::Sequence::Transaction"* sret, %"class.base::internal::Sequence"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK4base8internal8Sequence11Transaction12WillPushTaskEv(%"class.base::internal::Sequence::Transaction"*) local_unnamed_addr #2

declare void @_ZN4base8internal20RegisteredTaskSourceC1Ev(%"class.base::internal::RegisteredTaskSource"*) unnamed_addr #2

declare void @_ZN4base8internal11TaskTracker18RegisterTaskSourceE13scoped_refptrINS0_10TaskSourceEE(%"class.base::internal::RegisteredTaskSource"* sret, %"class.base::internal::TaskTracker"*, %"class.base::internal::TaskSource"*) local_unnamed_addr #2

declare dereferenceable(16) %"class.base::internal::RegisteredTaskSource"* @_ZN4base8internal20RegisteredTaskSourceaSEOS1_(%"class.base::internal::RegisteredTaskSource"*, %"class.base::internal::RegisteredTaskSource"* dereferenceable(16)) local_unnamed_addr #2

declare zeroext i1 @_ZN4base8internal11TaskTracker15WillPostTaskNowERKNS0_4TaskENS_12TaskPriorityE(%"class.base::internal::TaskTracker"*, %"struct.base::internal::Task"* dereferenceable(112), i8 zeroext) local_unnamed_addr #2

declare void @_ZN4base8internal8Sequence11Transaction8PushTaskENS0_4TaskE(%"class.base::internal::Sequence::Transaction"*, %"struct.base::internal::Task"*) local_unnamed_addr #2

declare void @_ZN4base8internal10TaskSource11TransactionC1EOS2_(%"class.base::internal::TaskSource::Transaction"*, %"class.base::internal::TaskSource::Transaction"* dereferenceable(8)) unnamed_addr #2

declare void @_ZN4base8internal35TransactionWithRegisteredTaskSourceC1ENS0_20RegisteredTaskSourceENS0_10TaskSource11TransactionE(%"struct.base::internal::TransactionWithRegisteredTaskSource"*, %"class.base::internal::RegisteredTaskSource"*, %"class.base::internal::TaskSource::Transaction"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN4base8internal8Sequence11TransactionD1Ev(%"class.base::internal::Sequence::Transaction"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4base8internal7InvokerINS0_9BindStateINS0_18IgnoreResultHelperIMNS0_12_GLOBAL__N_120WorkerThreadDelegateEFb13scoped_refptrINS0_8SequenceEENS0_4TaskEEEEJNS0_17UnretainedWrapperIS5_EES8_EEEFvS9_EE7RunOnceEPNS0_13BindStateBaseEOS9_(%"class.base::internal::BindStateBase"* nocapture, %"struct.base::internal::Task"* dereferenceable(112)) #0 align 2 {
  %3 = alloca %"struct.base::internal::Task", align 8
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1
  %5 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 2
  %6 = bitcast void (%"class.base::internal::BindStateBase"*)** %5 to i8**
  %7 = load i8*, i8** %6, align 8
  %8 = bitcast %"class.base::internal::BindStateBase"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 1
  %11 = bitcast void ()** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"struct.base::internal::Task"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %13) #12
  %14 = getelementptr inbounds i8, i8* %7, i64 %12
  %15 = bitcast i8* %14 to %"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*
  %16 = and i64 %9, 1
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %25, label %18

18:                                               ; preds = %2
  %19 = bitcast i8* %14 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = add i64 %9, -1
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = bitcast i8* %22 to i1 (%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*, %"class.base::internal::Sequence"*, %"struct.base::internal::Task"*)**
  %24 = load i1 (%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*, %"class.base::internal::Sequence"*, %"struct.base::internal::Task"*)*, i1 (%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*, %"class.base::internal::Sequence"*, %"struct.base::internal::Task"*)** %23, align 8
  br label %27

25:                                               ; preds = %2
  %26 = inttoptr i64 %9 to i1 (%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*, %"class.base::internal::Sequence"*, %"struct.base::internal::Task"*)*
  br label %27

27:                                               ; preds = %18, %25
  %28 = phi i1 (%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"*, %"class.base::internal::Sequence"*, %"struct.base::internal::Task"*)* [ %24, %18 ], [ %26, %25 ]
  %29 = getelementptr inbounds void (%"class.base::internal::BindStateBase"*)*, void (%"class.base::internal::BindStateBase"*)** %5, i64 1
  %30 = bitcast void (%"class.base::internal::BindStateBase"*)** %29 to %"class.base::internal::Sequence"**
  %31 = load %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %30, align 8
  store %"class.base::internal::Sequence"* null, %"class.base::internal::Sequence"** %30, align 8
  call void @_ZN4base8internal4TaskC1EOS1_(%"struct.base::internal::Task"* nonnull %3, %"struct.base::internal::Task"* dereferenceable(112) %1) #12
  %32 = call zeroext i1 %28(%"class.base::internal::(anonymous namespace)::WorkerThreadDelegate"* %15, %"class.base::internal::Sequence"* %31, %"struct.base::internal::Task"* nonnull %3) #12
  %33 = bitcast %"struct.base::internal::Task"* %3 to %"struct.base::PendingTask"*
  call void @_ZN4base11PendingTaskD2Ev(%"struct.base::PendingTask"* nonnull %33) #12
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %13) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4base8internal9BindStateINS0_18IgnoreResultHelperIMNS0_12_GLOBAL__N_120WorkerThreadDelegateEFb13scoped_refptrINS0_8SequenceEENS0_4TaskEEEEJNS0_17UnretainedWrapperIS4_EES7_EE7DestroyEPKNS0_13BindStateBaseE(%"class.base::internal::BindStateBase"*) #0 align 2 {
  %2 = icmp eq %"class.base::internal::BindStateBase"* %0, null
  br i1 %2, label %22, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %"class.base::internal::BindStateBase", %"class.base::internal::BindStateBase"* %0, i64 1, i32 3
  %5 = bitcast i1 (%"class.base::internal::BindStateBase"*, i32)** %4 to %"class.base::internal::Sequence"**
  %6 = load %"class.base::internal::Sequence"*, %"class.base::internal::Sequence"** %5, align 8
  %7 = icmp eq %"class.base::internal::Sequence"* %6, null
  br i1 %7, label %20, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.base::internal::Sequence", %"class.base::internal::Sequence"* %6, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.base::RefCountedThreadSafe.84", %"class.base::RefCountedThreadSafe.84"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw sub i32* %10, i32 1 acq_rel
  %12 = icmp eq i32 %11, 1
  br i1 %12, label %13, label %20

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.base::RefCountedThreadSafe.84", %"class.base::RefCountedThreadSafe.84"* %9, i64 -2
  %15 = bitcast %"class.base::RefCountedThreadSafe.84"* %14 to %"class.base::internal::TaskSource"*
  %16 = bitcast %"class.base::RefCountedThreadSafe.84"* %14 to void (%"class.base::internal::TaskSource"*)***
  %17 = load void (%"class.base::internal::TaskSource"*)**, void (%"class.base::internal::TaskSource"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %17, i64 4
  %19 = load void (%"class.base::internal::TaskSource"*)*, void (%"class.base::internal::TaskSource"*)** %18, align 8
  tail call void %19(%"class.base::internal::TaskSource"* nonnull %15) #12
  br label %20

20:                                               ; preds = %3, %8, %13
  %21 = bitcast %"class.base::internal::BindStateBase"* %0 to i8*
  tail call void @_ZdlPv(i8* %21) #13
  br label %22

22:                                               ; preds = %20, %1
  ret void
}

declare void @_ZN4base8internal13BindStateBaseC2EPFvvEPFvPKS1_E(%"class.base::internal::BindStateBase"*, void ()*, void (%"class.base::internal::BindStateBase"*)*) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{!"branch_weights", i32 2000, i32 1}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = distinct !{!7, !6}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegate19GetWorkLockRequiredEPNS0_12WorkerThreadE: argument 0"}
!10 = distinct !{!10, !"_ZN4base8internal12_GLOBAL__N_120WorkerThreadDelegate19GetWorkLockRequiredEPNS0_12WorkerThreadE"}
!11 = distinct !{!11, !6}
!12 = !{!13, !15}
!13 = distinct !{!13, !14, !"_ZN4base8internal8BindImplINS_12OnceCallbackENS0_18IgnoreResultHelperIMNS0_12_GLOBAL__N_120WorkerThreadDelegateEFb13scoped_refptrINS0_8SequenceEENS0_4TaskEEEEJNS0_17UnretainedWrapperIS5_EERKS8_EEEDcOT0_DpOT1_: argument 0"}
!14 = distinct !{!14, !"_ZN4base8internal8BindImplINS_12OnceCallbackENS0_18IgnoreResultHelperIMNS0_12_GLOBAL__N_120WorkerThreadDelegateEFb13scoped_refptrINS0_8SequenceEENS0_4TaskEEEEJNS0_17UnretainedWrapperIS5_EERKS8_EEEDcOT0_DpOT1_"}
!15 = distinct !{!15, !16, !"_ZN4base8BindOnceINS_8internal18IgnoreResultHelperIMNS1_12_GLOBAL__N_120WorkerThreadDelegateEFb13scoped_refptrINS1_8SequenceEENS1_4TaskEEEEJNS1_17UnretainedWrapperIS4_EERKS7_EEENS_12OnceCallbackINS1_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSI_DpOSJ_: argument 0"}
!16 = distinct !{!16, !"_ZN4base8BindOnceINS_8internal18IgnoreResultHelperIMNS1_12_GLOBAL__N_120WorkerThreadDelegateEFb13scoped_refptrINS1_8SequenceEENS1_4TaskEEEEJNS1_17UnretainedWrapperIS4_EERKS7_EEENS_12OnceCallbackINS1_14BindTypeHelperIT_JDpT0_EE14UnboundRunTypeEEEOSI_DpOSJ_"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZNK4base8internal10TaskSource11Transaction6traitsEv: argument 0"}
!19 = distinct !{!19, !"_ZNK4base8internal10TaskSource11Transaction6traitsEv"}
