; ModuleID = '../../content/public/browser/ax_event_notification_details.cc'
source_filename = "../../content/public/browser/ax_event_notification_details.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.content::AXEventNotificationDetails" = type { %"class.ui::AXTreeID", %"class.std::__1::vector", %"class.std::__1::vector.86" }
%"class.ui::AXTreeID" = type { i32, %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.ui::AXTreeUpdate"*, %"struct.ui::AXTreeUpdate"*, %"class.std::__1::__compressed_pair.81" }
%"struct.ui::AXTreeUpdate" = type { i8, [7 x i8], %"struct.ui::AXTreeData", i32, i32, %"class.std::__1::vector.2", i32, i32, %"class.std::__1::vector.74" }
%"struct.ui::AXTreeData" = type <{ i32 (...)**, %"class.ui::AXTreeID", %"class.ui::AXTreeID", %"class.ui::AXTreeID", %"class.std::__1::basic_string", i8, [3 x i8], float, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i8, [3 x i8], i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.0 }
%union.anon.0 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.2" = type { %"class.std::__1::__vector_base.3" }
%"class.std::__1::__vector_base.3" = type { %"struct.ui::AXNodeData"*, %"struct.ui::AXNodeData"*, %"class.std::__1::__compressed_pair.69" }
%"struct.ui::AXNodeData" = type { i32 (...)**, i32, i32, i32, i64, %"class.std::__1::vector.4", %"class.std::__1::vector.11", %"class.std::__1::vector.19", %"class.std::__1::vector.27", %"class.std::__1::vector.35", %"class.std::__1::vector.43", %"class.std::__1::vector.51", %"class.std::__1::vector.59", %"struct.ui::AXRelativeBounds" }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.6" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.std::__1::pair"* }
%"class.std::__1::vector.11" = type { %"class.std::__1::__vector_base.12" }
%"class.std::__1::__vector_base.12" = type { %"struct.std::__1::pair.13"*, %"struct.std::__1::pair.13"*, %"class.std::__1::__compressed_pair.14" }
%"struct.std::__1::pair.13" = type opaque
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"struct.std::__1::pair.13"* }
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { %"struct.std::__1::pair.21"*, %"struct.std::__1::pair.21"*, %"class.std::__1::__compressed_pair.22" }
%"struct.std::__1::pair.21" = type opaque
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.std::__1::pair.21"* }
%"class.std::__1::vector.27" = type { %"class.std::__1::__vector_base.28" }
%"class.std::__1::__vector_base.28" = type { %"struct.std::__1::pair.29"*, %"struct.std::__1::pair.29"*, %"class.std::__1::__compressed_pair.30" }
%"struct.std::__1::pair.29" = type opaque
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"struct.std::__1::pair.29"* }
%"class.std::__1::vector.35" = type { %"class.std::__1::__vector_base.36" }
%"class.std::__1::__vector_base.36" = type { %"struct.std::__1::pair.37"*, %"struct.std::__1::pair.37"*, %"class.std::__1::__compressed_pair.38" }
%"struct.std::__1::pair.37" = type opaque
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"struct.std::__1::pair.37"* }
%"class.std::__1::vector.43" = type { %"class.std::__1::__vector_base.44" }
%"class.std::__1::__vector_base.44" = type { %"struct.std::__1::pair.45"*, %"struct.std::__1::pair.45"*, %"class.std::__1::__compressed_pair.46" }
%"struct.std::__1::pair.45" = type opaque
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.std::__1::pair.45"* }
%"class.std::__1::vector.51" = type { %"class.std::__1::__vector_base.52" }
%"class.std::__1::__vector_base.52" = type { %"struct.std::__1::pair.53"*, %"struct.std::__1::pair.53"*, %"class.std::__1::__compressed_pair.54" }
%"struct.std::__1::pair.53" = type opaque
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"struct.std::__1::pair.53"* }
%"class.std::__1::vector.59" = type { %"class.std::__1::__vector_base.60" }
%"class.std::__1::__vector_base.60" = type { i32*, i32*, %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { i32* }
%"struct.ui::AXRelativeBounds" = type { i32 (...)**, i32, %"class.gfx::RectF", %"class.std::__1::unique_ptr" }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"class.gfx::Transform"* }
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"struct.ui::AXNodeData"* }
%"class.std::__1::vector.74" = type { %"class.std::__1::__vector_base.75" }
%"class.std::__1::__vector_base.75" = type { %"struct.ui::AXEventIntent"*, %"struct.ui::AXEventIntent"*, %"class.std::__1::__compressed_pair.76" }
%"struct.ui::AXEventIntent" = type { i32 (...)**, i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"struct.ui::AXEventIntent"* }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"struct.ui::AXTreeUpdate"* }
%"class.std::__1::vector.86" = type { %"class.std::__1::__vector_base.87" }
%"class.std::__1::__vector_base.87" = type { %"struct.ui::AXEvent"*, %"struct.ui::AXEvent"*, %"class.std::__1::__compressed_pair.88" }
%"struct.ui::AXEvent" = type <{ i32 (...)**, i32, i32, i32, i32, %"class.std::__1::vector.74", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"struct.ui::AXEvent"* }
%"struct.content::AXLocationChangeNotificationDetails" = type { i32, %"class.ui::AXTreeID", %"struct.ui::AXRelativeBounds" }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN7content26AXEventNotificationDetailsC1Ev = hidden unnamed_addr alias void (%"struct.content::AXEventNotificationDetails"*), void (%"struct.content::AXEventNotificationDetails"*)* @_ZN7content26AXEventNotificationDetailsC2Ev
@_ZN7content26AXEventNotificationDetailsC1ERKS0_ = hidden unnamed_addr alias void (%"struct.content::AXEventNotificationDetails"*, %"struct.content::AXEventNotificationDetails"*), void (%"struct.content::AXEventNotificationDetails"*, %"struct.content::AXEventNotificationDetails"*)* @_ZN7content26AXEventNotificationDetailsC2ERKS0_
@_ZN7content26AXEventNotificationDetailsD1Ev = hidden unnamed_addr alias void (%"struct.content::AXEventNotificationDetails"*), void (%"struct.content::AXEventNotificationDetails"*)* @_ZN7content26AXEventNotificationDetailsD2Ev
@_ZN7content35AXLocationChangeNotificationDetailsC1Ev = hidden unnamed_addr alias void (%"struct.content::AXLocationChangeNotificationDetails"*), void (%"struct.content::AXLocationChangeNotificationDetails"*)* @_ZN7content35AXLocationChangeNotificationDetailsC2Ev
@_ZN7content35AXLocationChangeNotificationDetailsC1ERKS0_ = hidden unnamed_addr alias void (%"struct.content::AXLocationChangeNotificationDetails"*, %"struct.content::AXLocationChangeNotificationDetails"*), void (%"struct.content::AXLocationChangeNotificationDetails"*, %"struct.content::AXLocationChangeNotificationDetails"*)* @_ZN7content35AXLocationChangeNotificationDetailsC2ERKS0_
@_ZN7content35AXLocationChangeNotificationDetailsD1Ev = hidden unnamed_addr alias void (%"struct.content::AXLocationChangeNotificationDetails"*), void (%"struct.content::AXLocationChangeNotificationDetails"*)* @_ZN7content35AXLocationChangeNotificationDetailsD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content26AXEventNotificationDetailsC2Ev(%"struct.content::AXEventNotificationDetails"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.content::AXEventNotificationDetails", %"struct.content::AXEventNotificationDetails"* %0, i64 0, i32 0
  %3 = tail call dereferenceable(32) %"class.ui::AXTreeID"* @_ZN2ui15AXTreeIDUnknownEv() #7
  tail call void @_ZN2ui8AXTreeIDC1ERKS0_(%"class.ui::AXTreeID"* %2, %"class.ui::AXTreeID"* dereferenceable(32) %3) #7
  %4 = getelementptr inbounds %"struct.content::AXEventNotificationDetails", %"struct.content::AXEventNotificationDetails"* %0, i64 0, i32 1
  %5 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 48, i1 false)
  ret void
}

declare dereferenceable(32) %"class.ui::AXTreeID"* @_ZN2ui15AXTreeIDUnknownEv() local_unnamed_addr #1

declare void @_ZN2ui8AXTreeIDC1ERKS0_(%"class.ui::AXTreeID"*, %"class.ui::AXTreeID"* dereferenceable(32)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content26AXEventNotificationDetailsC2ERKS0_(%"struct.content::AXEventNotificationDetails"*, %"struct.content::AXEventNotificationDetails"* dereferenceable(80)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.content::AXEventNotificationDetails", %"struct.content::AXEventNotificationDetails"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"struct.content::AXEventNotificationDetails", %"struct.content::AXEventNotificationDetails"* %1, i64 0, i32 0
  tail call void @_ZN2ui8AXTreeIDC1ERKS0_(%"class.ui::AXTreeID"* %3, %"class.ui::AXTreeID"* dereferenceable(32) %4) #7
  %5 = getelementptr inbounds %"struct.content::AXEventNotificationDetails", %"struct.content::AXEventNotificationDetails"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"struct.content::AXEventNotificationDetails", %"struct.content::AXEventNotificationDetails"* %1, i64 0, i32 1
  %7 = bitcast %"class.std::__1::vector"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #7
  %8 = getelementptr inbounds %"struct.content::AXEventNotificationDetails", %"struct.content::AXEventNotificationDetails"* %1, i64 0, i32 1, i32 0, i32 1
  %9 = bitcast %"struct.ui::AXTreeUpdate"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %6 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = sdiv exact i64 %13, 320
  %15 = icmp eq i64 %13, 0
  br i1 %15, label %44, label %16

16:                                               ; preds = %2
  %17 = icmp ugt i64 %14, 57646075230342348
  br i1 %17, label %18, label %20

18:                                               ; preds = %16
  %19 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %19) #8
  unreachable

20:                                               ; preds = %16
  %21 = tail call i8* @_Znwm(i64 %13) #9
  %22 = bitcast i8* %21 to %"struct.ui::AXTreeUpdate"*
  %23 = getelementptr inbounds %"struct.content::AXEventNotificationDetails", %"struct.content::AXEventNotificationDetails"* %0, i64 0, i32 1, i32 0, i32 1
  %24 = bitcast %"struct.ui::AXTreeUpdate"** %23 to i8**
  store i8* %21, i8** %24, align 8
  %25 = bitcast %"class.std::__1::vector"* %5 to i8**
  store i8* %21, i8** %25, align 8
  %26 = getelementptr inbounds %"struct.ui::AXTreeUpdate", %"struct.ui::AXTreeUpdate"* %22, i64 %14
  %27 = getelementptr inbounds %"struct.content::AXEventNotificationDetails", %"struct.content::AXEventNotificationDetails"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  store %"struct.ui::AXTreeUpdate"* %26, %"struct.ui::AXTreeUpdate"** %27, align 8
  %28 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %6, i64 0, i32 0, i32 0
  %29 = load %"struct.ui::AXTreeUpdate"*, %"struct.ui::AXTreeUpdate"** %28, align 8
  %30 = load %"struct.ui::AXTreeUpdate"*, %"struct.ui::AXTreeUpdate"** %8, align 8
  %31 = bitcast %"struct.ui::AXTreeUpdate"** %23 to i64*
  %32 = ptrtoint i8* %21 to i64
  %33 = icmp eq %"struct.ui::AXTreeUpdate"* %29, %30
  br i1 %33, label %42, label %34

34:                                               ; preds = %20, %34
  %35 = phi %"struct.ui::AXTreeUpdate"* [ %38, %34 ], [ %22, %20 ]
  %36 = phi %"struct.ui::AXTreeUpdate"* [ %37, %34 ], [ %29, %20 ]
  tail call void @_ZN2ui12AXTreeUpdateC1ERKS0_(%"struct.ui::AXTreeUpdate"* %35, %"struct.ui::AXTreeUpdate"* dereferenceable(320) %36) #7
  %37 = getelementptr inbounds %"struct.ui::AXTreeUpdate", %"struct.ui::AXTreeUpdate"* %36, i64 1
  %38 = getelementptr inbounds %"struct.ui::AXTreeUpdate", %"struct.ui::AXTreeUpdate"* %35, i64 1
  %39 = icmp eq %"struct.ui::AXTreeUpdate"* %37, %30
  br i1 %39, label %40, label %34

40:                                               ; preds = %34
  %41 = ptrtoint %"struct.ui::AXTreeUpdate"* %38 to i64
  br label %42

42:                                               ; preds = %40, %20
  %43 = phi i64 [ %32, %20 ], [ %41, %40 ]
  store i64 %43, i64* %31, align 8
  br label %44

44:                                               ; preds = %2, %42
  %45 = getelementptr inbounds %"struct.content::AXEventNotificationDetails", %"struct.content::AXEventNotificationDetails"* %0, i64 0, i32 2
  %46 = getelementptr inbounds %"struct.content::AXEventNotificationDetails", %"struct.content::AXEventNotificationDetails"* %1, i64 0, i32 2
  %47 = bitcast %"class.std::__1::vector.86"* %45 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 24, i1 false) #7
  %48 = getelementptr inbounds %"struct.content::AXEventNotificationDetails", %"struct.content::AXEventNotificationDetails"* %1, i64 0, i32 2, i32 0, i32 1
  %49 = bitcast %"struct.ui::AXEvent"** %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = bitcast %"class.std::__1::vector.86"* %46 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %50, %52
  %54 = sdiv exact i64 %53, 56
  %55 = icmp eq i64 %53, 0
  br i1 %55, label %84, label %56

56:                                               ; preds = %44
  %57 = icmp ugt i64 %54, 329406144173384850
  br i1 %57, label %58, label %60

58:                                               ; preds = %56
  %59 = bitcast %"class.std::__1::vector.86"* %45 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %59) #8
  unreachable

60:                                               ; preds = %56
  %61 = tail call i8* @_Znwm(i64 %53) #9
  %62 = bitcast i8* %61 to %"struct.ui::AXEvent"*
  %63 = getelementptr inbounds %"struct.content::AXEventNotificationDetails", %"struct.content::AXEventNotificationDetails"* %0, i64 0, i32 2, i32 0, i32 1
  %64 = bitcast %"struct.ui::AXEvent"** %63 to i8**
  store i8* %61, i8** %64, align 8
  %65 = bitcast %"class.std::__1::vector.86"* %45 to i8**
  store i8* %61, i8** %65, align 8
  %66 = getelementptr inbounds %"struct.ui::AXEvent", %"struct.ui::AXEvent"* %62, i64 %54
  %67 = getelementptr inbounds %"struct.content::AXEventNotificationDetails", %"struct.content::AXEventNotificationDetails"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  store %"struct.ui::AXEvent"* %66, %"struct.ui::AXEvent"** %67, align 8
  %68 = getelementptr inbounds %"class.std::__1::vector.86", %"class.std::__1::vector.86"* %46, i64 0, i32 0, i32 0
  %69 = load %"struct.ui::AXEvent"*, %"struct.ui::AXEvent"** %68, align 8
  %70 = load %"struct.ui::AXEvent"*, %"struct.ui::AXEvent"** %48, align 8
  %71 = bitcast %"struct.ui::AXEvent"** %63 to i64*
  %72 = ptrtoint i8* %61 to i64
  %73 = icmp eq %"struct.ui::AXEvent"* %69, %70
  br i1 %73, label %82, label %74

74:                                               ; preds = %60, %74
  %75 = phi %"struct.ui::AXEvent"* [ %78, %74 ], [ %62, %60 ]
  %76 = phi %"struct.ui::AXEvent"* [ %77, %74 ], [ %69, %60 ]
  tail call void @_ZN2ui7AXEventC1ERKS0_(%"struct.ui::AXEvent"* %75, %"struct.ui::AXEvent"* dereferenceable(56) %76) #7
  %77 = getelementptr inbounds %"struct.ui::AXEvent", %"struct.ui::AXEvent"* %76, i64 1
  %78 = getelementptr inbounds %"struct.ui::AXEvent", %"struct.ui::AXEvent"* %75, i64 1
  %79 = icmp eq %"struct.ui::AXEvent"* %77, %70
  br i1 %79, label %80, label %74

80:                                               ; preds = %74
  %81 = ptrtoint %"struct.ui::AXEvent"* %78 to i64
  br label %82

82:                                               ; preds = %80, %60
  %83 = phi i64 [ %72, %60 ], [ %81, %80 ]
  store i64 %83, i64* %71, align 8
  br label %84

84:                                               ; preds = %44, %82
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content26AXEventNotificationDetailsD2Ev(%"struct.content::AXEventNotificationDetails"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.content::AXEventNotificationDetails", %"struct.content::AXEventNotificationDetails"* %0, i64 0, i32 2
  %3 = getelementptr inbounds %"class.std::__1::vector.86", %"class.std::__1::vector.86"* %2, i64 0, i32 0, i32 0
  %4 = load %"struct.ui::AXEvent"*, %"struct.ui::AXEvent"** %3, align 8
  %5 = icmp eq %"struct.ui::AXEvent"* %4, null
  br i1 %5, label %20, label %6

6:                                                ; preds = %1
  %7 = bitcast %"struct.ui::AXEvent"* %4 to i8*
  %8 = getelementptr inbounds %"struct.content::AXEventNotificationDetails", %"struct.content::AXEventNotificationDetails"* %0, i64 0, i32 2, i32 0, i32 1
  %9 = load %"struct.ui::AXEvent"*, %"struct.ui::AXEvent"** %8, align 8
  %10 = icmp eq %"struct.ui::AXEvent"* %9, %4
  br i1 %10, label %18, label %11

11:                                               ; preds = %6, %11
  %12 = phi %"struct.ui::AXEvent"* [ %13, %11 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"struct.ui::AXEvent", %"struct.ui::AXEvent"* %12, i64 -1
  tail call void @_ZN2ui7AXEventD1Ev(%"struct.ui::AXEvent"* %13) #7
  %14 = icmp eq %"struct.ui::AXEvent"* %13, %4
  br i1 %14, label %15, label %11

15:                                               ; preds = %11
  %16 = bitcast %"class.std::__1::vector.86"* %2 to i8**
  %17 = load i8*, i8** %16, align 8
  br label %18

18:                                               ; preds = %15, %6
  %19 = phi i8* [ %17, %15 ], [ %7, %6 ]
  store %"struct.ui::AXEvent"* %4, %"struct.ui::AXEvent"** %8, align 8
  tail call void @_ZdlPv(i8* %19) #9
  br label %20

20:                                               ; preds = %1, %18
  %21 = getelementptr inbounds %"struct.content::AXEventNotificationDetails", %"struct.content::AXEventNotificationDetails"* %0, i64 0, i32 1, i32 0, i32 0
  %22 = load %"struct.ui::AXTreeUpdate"*, %"struct.ui::AXTreeUpdate"** %21, align 8
  %23 = icmp eq %"struct.ui::AXTreeUpdate"* %22, null
  br i1 %23, label %37, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %"struct.content::AXEventNotificationDetails", %"struct.content::AXEventNotificationDetails"* %0, i64 0, i32 1, i32 0, i32 1
  %26 = load %"struct.ui::AXTreeUpdate"*, %"struct.ui::AXTreeUpdate"** %25, align 8
  %27 = icmp eq %"struct.ui::AXTreeUpdate"* %26, %22
  br i1 %27, label %34, label %28

28:                                               ; preds = %24, %28
  %29 = phi %"struct.ui::AXTreeUpdate"* [ %30, %28 ], [ %26, %24 ]
  %30 = getelementptr inbounds %"struct.ui::AXTreeUpdate", %"struct.ui::AXTreeUpdate"* %29, i64 -1
  tail call void @_ZN2ui12AXTreeUpdateD1Ev(%"struct.ui::AXTreeUpdate"* %30) #7
  %31 = icmp eq %"struct.ui::AXTreeUpdate"* %30, %22
  br i1 %31, label %32, label %28

32:                                               ; preds = %28
  %33 = load %"struct.ui::AXTreeUpdate"*, %"struct.ui::AXTreeUpdate"** %21, align 8
  br label %34

34:                                               ; preds = %32, %24
  %35 = phi %"struct.ui::AXTreeUpdate"* [ %33, %32 ], [ %22, %24 ]
  store %"struct.ui::AXTreeUpdate"* %22, %"struct.ui::AXTreeUpdate"** %25, align 8
  %36 = getelementptr inbounds %"struct.ui::AXTreeUpdate", %"struct.ui::AXTreeUpdate"* %35, i64 0, i32 0
  tail call void @_ZdlPv(i8* %36) #9
  br label %37

37:                                               ; preds = %20, %34
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content35AXLocationChangeNotificationDetailsC2Ev(%"struct.content::AXLocationChangeNotificationDetails"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.content::AXLocationChangeNotificationDetails", %"struct.content::AXLocationChangeNotificationDetails"* %0, i64 0, i32 0
  store i32 -1, i32* %2, align 8
  %3 = getelementptr inbounds %"struct.content::AXLocationChangeNotificationDetails", %"struct.content::AXLocationChangeNotificationDetails"* %0, i64 0, i32 1
  %4 = tail call dereferenceable(32) %"class.ui::AXTreeID"* @_ZN2ui15AXTreeIDUnknownEv() #7
  tail call void @_ZN2ui8AXTreeIDC1ERKS0_(%"class.ui::AXTreeID"* %3, %"class.ui::AXTreeID"* dereferenceable(32) %4) #7
  %5 = getelementptr inbounds %"struct.content::AXLocationChangeNotificationDetails", %"struct.content::AXLocationChangeNotificationDetails"* %0, i64 0, i32 2
  tail call void @_ZN2ui16AXRelativeBoundsC1Ev(%"struct.ui::AXRelativeBounds"* %5) #7
  ret void
}

declare void @_ZN2ui16AXRelativeBoundsC1Ev(%"struct.ui::AXRelativeBounds"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content35AXLocationChangeNotificationDetailsC2ERKS0_(%"struct.content::AXLocationChangeNotificationDetails"*, %"struct.content::AXLocationChangeNotificationDetails"* dereferenceable(80)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.content::AXLocationChangeNotificationDetails", %"struct.content::AXLocationChangeNotificationDetails"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"struct.content::AXLocationChangeNotificationDetails", %"struct.content::AXLocationChangeNotificationDetails"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  store i32 %5, i32* %3, align 8
  %6 = getelementptr inbounds %"struct.content::AXLocationChangeNotificationDetails", %"struct.content::AXLocationChangeNotificationDetails"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"struct.content::AXLocationChangeNotificationDetails", %"struct.content::AXLocationChangeNotificationDetails"* %1, i64 0, i32 1
  tail call void @_ZN2ui8AXTreeIDC1ERKS0_(%"class.ui::AXTreeID"* %6, %"class.ui::AXTreeID"* dereferenceable(32) %7) #7
  %8 = getelementptr inbounds %"struct.content::AXLocationChangeNotificationDetails", %"struct.content::AXLocationChangeNotificationDetails"* %0, i64 0, i32 2
  %9 = getelementptr inbounds %"struct.content::AXLocationChangeNotificationDetails", %"struct.content::AXLocationChangeNotificationDetails"* %1, i64 0, i32 2
  tail call void @_ZN2ui16AXRelativeBoundsC1ERKS0_(%"struct.ui::AXRelativeBounds"* %8, %"struct.ui::AXRelativeBounds"* dereferenceable(40) %9) #7
  ret void
}

declare void @_ZN2ui16AXRelativeBoundsC1ERKS0_(%"struct.ui::AXRelativeBounds"*, %"struct.ui::AXRelativeBounds"* dereferenceable(40)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7content35AXLocationChangeNotificationDetailsD2Ev(%"struct.content::AXLocationChangeNotificationDetails"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.content::AXLocationChangeNotificationDetails", %"struct.content::AXLocationChangeNotificationDetails"* %0, i64 0, i32 2
  tail call void @_ZN2ui16AXRelativeBoundsD1Ev(%"struct.ui::AXRelativeBounds"* %2) #7
  ret void
}

; Function Attrs: nounwind
declare void @_ZN2ui16AXRelativeBoundsD1Ev(%"struct.ui::AXRelativeBounds"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2ui12AXTreeUpdateD1Ev(%"struct.ui::AXTreeUpdate"*) unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN2ui7AXEventD1Ev(%"struct.ui::AXEvent"*) unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

declare void @_ZN2ui12AXTreeUpdateC1ERKS0_(%"struct.ui::AXTreeUpdate"*, %"struct.ui::AXTreeUpdate"* dereferenceable(320)) unnamed_addr #1

declare void @_ZN2ui7AXEventC1ERKS0_(%"struct.ui::AXEvent"*, %"struct.ui::AXEvent"* dereferenceable(56)) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
