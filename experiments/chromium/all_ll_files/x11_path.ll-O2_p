; ModuleID = '../../ui/gfx/x/x11_path.cc'
source_filename = "../../ui/gfx/x/x11_path.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.x11::Rectangle"*, %"struct.x11::Rectangle"*, %"class.std::__1::__compressed_pair.0" }
%"struct.x11::Rectangle" = type { i16, i16, i16, i16 }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"struct.x11::Rectangle"* }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%struct.SkIRect = type { i32, i32, i32, i32 }
%"struct.SkRegion::RunHead" = type opaque
%"class.SkRegion::Iterator" = type <{ %class.SkRegion*, i32*, %struct.SkIRect, i8, [7 x i8] }>
%"class.std::__1::__vector_base_common" = type { i8 }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.7", %"struct.std::__1::atomic.7", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.5, %class.SkTDArray.6, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.5 = type { i8*, i32, i32 }
%class.SkTDArray.6 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.12 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.7" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.12 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.13", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.13" = type { %"struct.std::__1::__atomic_base.14" }
%"struct.std::__1::__atomic_base.14" = type { %"struct.std::__1::__cxx_atomic_impl.15" }
%"struct.std::__1::__cxx_atomic_impl.15" = type { %"struct.std::__1::__cxx_atomic_base_impl.16" }
%"struct.std::__1::__cxx_atomic_base_impl.16" = type { i8 }
%"struct.std::__1::atomic.7" = type { %"struct.std::__1::__atomic_base.8" }
%"struct.std::__1::__atomic_base.8" = type { %"struct.std::__1::__atomic_base.9" }
%"struct.std::__1::__atomic_base.9" = type { %"struct.std::__1::__cxx_atomic_impl.10" }
%"struct.std::__1::__cxx_atomic_impl.10" = type { %"struct.std::__1::__cxx_atomic_base_impl.11" }
%"struct.std::__1::__cxx_atomic_base_impl.11" = type { i8 }

; Function Attrs: nounwind ssp uwtable
define hidden %"class.std::__1::vector"* @_ZN3x1124CreateRegionFromSkRegionERK8SkRegion(%class.SkRegion* dereferenceable(24)) local_unnamed_addr #0 {
  %2 = alloca %"class.SkRegion::Iterator", align 8
  %3 = tail call i8* @_Znwm(i64 24) #9
  %4 = bitcast i8* %3 to %"class.std::__1::vector"*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 0, i64 24, i1 false) #10
  %5 = bitcast %"class.SkRegion::Iterator"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %5) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 40, i1 false)
  call void @_ZN8SkRegion8IteratorC1ERKS_(%"class.SkRegion::Iterator"* nonnull %2, %class.SkRegion* dereferenceable(24) %0) #10
  %6 = getelementptr inbounds %"class.SkRegion::Iterator", %"class.SkRegion::Iterator"* %2, i64 0, i32 3
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %21

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.SkRegion::Iterator", %"class.SkRegion::Iterator"* %2, i64 0, i32 2, i32 0
  %11 = getelementptr inbounds %"class.SkRegion::Iterator", %"class.SkRegion::Iterator"* %2, i64 0, i32 2, i32 1
  %12 = getelementptr inbounds %"class.SkRegion::Iterator", %"class.SkRegion::Iterator"* %2, i64 0, i32 2, i32 2
  %13 = getelementptr inbounds %"class.SkRegion::Iterator", %"class.SkRegion::Iterator"* %2, i64 0, i32 2, i32 3
  %14 = getelementptr inbounds i8, i8* %3, i64 8
  %15 = bitcast i8* %14 to %"struct.x11::Rectangle"**
  %16 = getelementptr inbounds i8, i8* %3, i64 16
  %17 = bitcast i8* %16 to %"struct.x11::Rectangle"**
  %18 = bitcast i8* %14 to i64*
  %19 = bitcast i8* %3 to i64*
  %20 = bitcast i8* %16 to i64*
  br label %22

21:                                               ; preds = %108, %1
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %5) #10
  ret %"class.std::__1::vector"* %4

22:                                               ; preds = %111, %9
  %23 = phi i64 [ %114, %111 ], [ 0, %9 ]
  %24 = phi %"struct.x11::Rectangle"* [ %113, %111 ], [ null, %9 ]
  %25 = phi %"struct.x11::Rectangle"* [ %112, %111 ], [ null, %9 ]
  %26 = load i32, i32* %10, align 8
  %27 = load i32, i32* %11, align 4
  %28 = load i32, i32* %12, align 8
  %29 = sub i32 %28, %26
  %30 = load i32, i32* %13, align 4
  %31 = sub i32 %30, %27
  %32 = icmp ult %"struct.x11::Rectangle"* %25, %24
  %33 = ptrtoint %"struct.x11::Rectangle"* %24 to i64
  br i1 %32, label %34, label %49

34:                                               ; preds = %22
  %35 = bitcast %"struct.x11::Rectangle"* %25 to i64*
  %36 = zext i32 %31 to i64
  %37 = shl i64 %36, 48
  %38 = and i32 %29, 65535
  %39 = zext i32 %38 to i64
  %40 = shl nuw nsw i64 %39, 32
  %41 = shl i32 %27, 16
  %42 = and i32 %26, 65535
  %43 = or i32 %41, %42
  %44 = zext i32 %43 to i64
  %45 = or i64 %40, %44
  %46 = or i64 %45, %37
  store i64 %46, i64* %35, align 2
  %47 = getelementptr inbounds %"struct.x11::Rectangle", %"struct.x11::Rectangle"* %25, i64 1
  %48 = ptrtoint %"struct.x11::Rectangle"* %47 to i64
  store i64 %48, i64* %18, align 8
  br label %108

49:                                               ; preds = %22
  %50 = ptrtoint %"struct.x11::Rectangle"* %25 to i64
  %51 = load i64, i64* %19, align 8
  %52 = sub i64 %50, %51
  %53 = ashr exact i64 %52, 3
  %54 = add nsw i64 %53, 1
  %55 = icmp ugt i64 %54, 2305843009213693951
  br i1 %55, label %56, label %58

56:                                               ; preds = %49
  %57 = bitcast i8* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %57) #11
  unreachable

58:                                               ; preds = %49
  %59 = sub i64 %33, %51
  %60 = ashr exact i64 %59, 3
  %61 = icmp ult i64 %60, 1152921504606846975
  br i1 %61, label %62, label %70

62:                                               ; preds = %58
  %63 = ashr exact i64 %59, 2
  %64 = icmp ult i64 %63, %54
  %65 = select i1 %64, i64 %54, i64 %63
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %75, label %67

67:                                               ; preds = %62
  %68 = icmp ugt i64 %65, 2305843009213693951
  br i1 %68, label %69, label %70

69:                                               ; preds = %67
  call void @abort() #11
  unreachable

70:                                               ; preds = %67, %58
  %71 = phi i64 [ %65, %67 ], [ 2305843009213693951, %58 ]
  %72 = shl i64 %71, 3
  %73 = call i8* @_Znwm(i64 %72) #9
  %74 = bitcast i8* %73 to %"struct.x11::Rectangle"*
  br label %75

75:                                               ; preds = %70, %62
  %76 = phi i64 [ %71, %70 ], [ 0, %62 ]
  %77 = phi %"struct.x11::Rectangle"* [ %74, %70 ], [ null, %62 ]
  %78 = getelementptr inbounds %"struct.x11::Rectangle", %"struct.x11::Rectangle"* %77, i64 %53
  %79 = getelementptr inbounds %"struct.x11::Rectangle", %"struct.x11::Rectangle"* %77, i64 %76
  %80 = ptrtoint %"struct.x11::Rectangle"* %79 to i64
  %81 = bitcast %"struct.x11::Rectangle"* %78 to i64*
  %82 = zext i32 %31 to i64
  %83 = shl i64 %82, 48
  %84 = and i32 %29, 65535
  %85 = zext i32 %84 to i64
  %86 = shl nuw nsw i64 %85, 32
  %87 = shl i32 %27, 16
  %88 = and i32 %26, 65535
  %89 = or i32 %87, %88
  %90 = zext i32 %89 to i64
  %91 = or i64 %86, %90
  %92 = or i64 %91, %83
  store i64 %92, i64* %81, align 2
  %93 = getelementptr inbounds %"struct.x11::Rectangle", %"struct.x11::Rectangle"* %78, i64 1
  %94 = ptrtoint %"struct.x11::Rectangle"* %93 to i64
  %95 = sub i64 %23, %51
  %96 = ashr exact i64 %95, 3
  %97 = sub nsw i64 0, %96
  %98 = getelementptr inbounds %"struct.x11::Rectangle", %"struct.x11::Rectangle"* %78, i64 %97
  %99 = ptrtoint %"struct.x11::Rectangle"* %98 to i64
  %100 = icmp sgt i64 %95, 0
  br i1 %100, label %101, label %104

101:                                              ; preds = %75
  %102 = bitcast %"struct.x11::Rectangle"* %98 to i8*
  %103 = inttoptr i64 %51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %102, i8* align 2 %103, i64 %95, i1 false) #10
  br label %104

104:                                              ; preds = %101, %75
  store i64 %99, i64* %19, align 8
  store i64 %94, i64* %18, align 8
  store i64 %80, i64* %20, align 8
  %105 = icmp eq i64 %51, 0
  br i1 %105, label %108, label %106

106:                                              ; preds = %104
  %107 = inttoptr i64 %51 to i8*
  call void @_ZdlPv(i8* %107) #9
  br label %108

108:                                              ; preds = %34, %104, %106
  call void @_ZN8SkRegion8Iterator4nextEv(%"class.SkRegion::Iterator"* nonnull %2) #10
  %109 = load i8, i8* %6, align 8, !range !2
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %111, label %21

111:                                              ; preds = %108
  %112 = load %"struct.x11::Rectangle"*, %"struct.x11::Rectangle"** %15, align 8
  %113 = load %"struct.x11::Rectangle"*, %"struct.x11::Rectangle"** %17, align 8
  %114 = ptrtoint %"struct.x11::Rectangle"* %112 to i64
  br label %22
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN8SkRegion8IteratorC1ERKS_(%"class.SkRegion::Iterator"*, %class.SkRegion* dereferenceable(24)) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN8SkRegion8Iterator4nextEv(%"class.SkRegion::Iterator"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.std::__1::vector"* @_ZN3x1122CreateRegionFromSkPathERK6SkPath(%class.SkPath* dereferenceable(16)) local_unnamed_addr #0 {
  %2 = alloca %class.SkRegion, align 8
  %3 = alloca { i64, i64 }, align 8
  %4 = bitcast { i64, i64 }* %3 to %struct.SkIRect*
  %5 = alloca %class.SkRegion, align 8
  %6 = bitcast %class.SkRegion* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #10
  %7 = bitcast { i64, i64 }* %3 to i8*
  %8 = bitcast %class.SkRegion* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #10
  %9 = getelementptr inbounds %class.SkPath, %class.SkPath* %0, i64 0, i32 0, i32 0
  %10 = load %class.SkPathRef*, %class.SkPathRef** %9, align 8
  %11 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %10, i64 0, i32 9
  %12 = load i8, i8* %11, align 8
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %23, label %14

14:                                               ; preds = %1
  %15 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %10, i64 0, i32 1
  %16 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %10, i64 0, i32 3, i32 0
  %17 = load %struct.SkPoint*, %struct.SkPoint** %16, align 8
  %18 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %10, i64 0, i32 3, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = tail call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %15, %struct.SkPoint* %17, i32 %19) #10
  %21 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %10, i64 0, i32 10
  %22 = zext i1 %20 to i8
  store i8 %22, i8* %21, align 1
  store i8 0, i8* %11, align 8
  br label %23

23:                                               ; preds = %1, %14
  %24 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %10, i64 0, i32 1, i32 0
  %25 = load float, float* %24, align 4
  %26 = tail call float @llvm.floor.f32(float %25) #10
  %27 = fcmp olt float %26, 0x41DFFFFFE0000000
  %28 = select i1 %27, float %26, float 0x41DFFFFFE0000000
  %29 = fcmp ogt float %28, 0xC1DFFFFFE0000000
  %30 = select i1 %29, float %28, float 0xC1DFFFFFE0000000
  %31 = fptosi float %30 to i32
  %32 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %10, i64 0, i32 1, i32 1
  %33 = load float, float* %32, align 4
  %34 = tail call float @llvm.floor.f32(float %33) #10
  %35 = fcmp olt float %34, 0x41DFFFFFE0000000
  %36 = select i1 %35, float %34, float 0x41DFFFFFE0000000
  %37 = fcmp ogt float %36, 0xC1DFFFFFE0000000
  %38 = select i1 %37, float %36, float 0xC1DFFFFFE0000000
  %39 = fptosi float %38 to i32
  %40 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %10, i64 0, i32 1, i32 2
  %41 = load float, float* %40, align 4
  %42 = tail call float @llvm.ceil.f32(float %41) #10
  %43 = fcmp olt float %42, 0x41DFFFFFE0000000
  %44 = select i1 %43, float %42, float 0x41DFFFFFE0000000
  %45 = fcmp ogt float %44, 0xC1DFFFFFE0000000
  %46 = select i1 %45, float %44, float 0xC1DFFFFFE0000000
  %47 = fptosi float %46 to i32
  %48 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %10, i64 0, i32 1, i32 3
  %49 = load float, float* %48, align 4
  %50 = tail call float @llvm.ceil.f32(float %49) #10
  %51 = fcmp olt float %50, 0x41DFFFFFE0000000
  %52 = select i1 %51, float %50, float 0x41DFFFFFE0000000
  %53 = fcmp ogt float %52, 0xC1DFFFFFE0000000
  %54 = select i1 %53, float %52, float 0xC1DFFFFFE0000000
  %55 = fptosi float %54 to i32
  %56 = zext i32 %39 to i64
  %57 = shl nuw i64 %56, 32
  %58 = zext i32 %31 to i64
  %59 = or i64 %57, %58
  %60 = zext i32 %55 to i64
  %61 = shl nuw i64 %60, 32
  %62 = zext i32 %47 to i64
  %63 = or i64 %61, %62
  %64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  store i64 %59, i64* %64, align 8
  %65 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  store i64 %63, i64* %65, align 8
  call void @_ZN8SkRegionC1ERK7SkIRect(%class.SkRegion* nonnull %2, %struct.SkIRect* nonnull dereferenceable(16) %4) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #10
  %66 = bitcast %class.SkRegion* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %66) #10
  %67 = bitcast %class.SkRegion* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %67, i8 -86, i64 24, i1 false)
  call void @_ZN8SkRegionC1Ev(%class.SkRegion* nonnull %5) #10
  %68 = call zeroext i1 @_ZN8SkRegion7setPathERK6SkPathRKS_(%class.SkRegion* nonnull %5, %class.SkPath* dereferenceable(16) %0, %class.SkRegion* nonnull dereferenceable(24) %2) #10
  %69 = call %"class.std::__1::vector"* @_ZN3x1124CreateRegionFromSkRegionERK8SkRegion(%class.SkRegion* nonnull dereferenceable(24) %5)
  call void @_ZN8SkRegionD1Ev(%class.SkRegion* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %66) #10
  call void @_ZN8SkRegionD1Ev(%class.SkRegion* nonnull %2) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #10
  ret %"class.std::__1::vector"* %69
}

declare void @_ZN8SkRegionC1ERK7SkIRect(%class.SkRegion*, %struct.SkIRect* dereferenceable(16)) unnamed_addr #2

declare void @_ZN8SkRegionC1Ev(%class.SkRegion*) unnamed_addr #2

declare zeroext i1 @_ZN8SkRegion7setPathERK6SkPathRKS_(%class.SkRegion*, %class.SkPath* dereferenceable(16), %class.SkRegion* dereferenceable(24)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN8SkRegionD1Ev(%class.SkRegion*) unnamed_addr #3

declare zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect*, %struct.SkPoint*, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #4

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
