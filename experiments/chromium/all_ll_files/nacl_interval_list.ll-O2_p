; ModuleID = '../../native_client/src/trusted/interval_multiset/nacl_interval_list.c'
source_filename = "../../native_client/src/trusted/interval_multiset/nacl_interval_list.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.NaClIntervalMultisetVtbl = type { void (%struct.NaClIntervalMultiset*)*, void (%struct.NaClIntervalMultiset*, i32, i32)*, void (%struct.NaClIntervalMultiset*, i32, i32)*, i32 (%struct.NaClIntervalMultiset*, i32, i32)* }
%struct.NaClIntervalMultiset = type { %struct.NaClIntervalMultisetVtbl* }
%struct.NaClIntervalListMultiset = type { %struct.NaClIntervalMultiset, %struct.NaClIntervalNode* }
%struct.NaClIntervalNode = type { %struct.NaClIntervalNode*, i32, i32 }

@kNaClIntervalListMultisetVtbl = hidden constant %struct.NaClIntervalMultisetVtbl { void (%struct.NaClIntervalMultiset*)* @NaClIntervalListMultisetDtor, void (%struct.NaClIntervalMultiset*, i32, i32)* @NaClIntervalListMultisetAddInterval, void (%struct.NaClIntervalMultiset*, i32, i32)* @NaClIntervalListMultisetRemoveInterval, i32 (%struct.NaClIntervalMultiset*, i32, i32)* @NaClIntervalListMultisetOverlapsWith }, align 8
@.str = private unnamed_addr constant [37 x i8] c"No memory in NaClIntervalListSetAdd\0A\00", align 1
@.str.1 = private unnamed_addr constant [51 x i8] c"NaClIntervalListMultisetRemove: [%u,%u] not found\0A\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @NaClIntervalListMultisetCtor(%struct.NaClIntervalListMultiset* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.NaClIntervalListMultiset, %struct.NaClIntervalListMultiset* %0, i64 0, i32 1
  store %struct.NaClIntervalNode* null, %struct.NaClIntervalNode** %2, align 8
  %3 = getelementptr inbounds %struct.NaClIntervalListMultiset, %struct.NaClIntervalListMultiset* %0, i64 0, i32 0, i32 0
  store %struct.NaClIntervalMultisetVtbl* @kNaClIntervalListMultisetVtbl, %struct.NaClIntervalMultisetVtbl** %3, align 8
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal void @NaClIntervalListMultisetDtor(%struct.NaClIntervalMultiset* nocapture) #1 {
  %2 = getelementptr inbounds %struct.NaClIntervalMultiset, %struct.NaClIntervalMultiset* %0, i64 1
  %3 = bitcast %struct.NaClIntervalMultiset* %2 to %struct.NaClIntervalNode**
  %4 = load %struct.NaClIntervalNode*, %struct.NaClIntervalNode** %3, align 8
  %5 = icmp eq %struct.NaClIntervalNode* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %1, %6
  %7 = phi %struct.NaClIntervalNode* [ %10, %6 ], [ %4, %1 ]
  %8 = bitcast %struct.NaClIntervalNode* %7 to i8*
  %9 = getelementptr inbounds %struct.NaClIntervalNode, %struct.NaClIntervalNode* %7, i64 0, i32 0
  %10 = load %struct.NaClIntervalNode*, %struct.NaClIntervalNode** %9, align 8
  tail call void @free(i8* %8) #7
  %11 = icmp eq %struct.NaClIntervalNode* %10, null
  br i1 %11, label %12, label %6

12:                                               ; preds = %6, %1
  %13 = bitcast %struct.NaClIntervalMultiset* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @NaClIntervalListMultisetAddInterval(%struct.NaClIntervalMultiset* nocapture, i32, i32) #1 {
  %4 = tail call noalias i8* @malloc(i64 16) #7
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %7

6:                                                ; preds = %3
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0)) #7
  br label %7

7:                                                ; preds = %6, %3
  %8 = getelementptr inbounds i8, i8* %4, i64 8
  %9 = bitcast i8* %8 to i32*
  store i32 %1, i32* %9, align 8
  %10 = getelementptr inbounds i8, i8* %4, i64 12
  %11 = bitcast i8* %10 to i32*
  store i32 %2, i32* %11, align 4
  %12 = getelementptr inbounds %struct.NaClIntervalMultiset, %struct.NaClIntervalMultiset* %0, i64 1
  %13 = bitcast %struct.NaClIntervalMultiset* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast i8* %4 to i64*
  store i64 %14, i64* %15, align 8
  %16 = bitcast %struct.NaClIntervalMultiset* %12 to i8**
  store i8* %4, i8** %16, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @NaClIntervalListMultisetRemoveInterval(%struct.NaClIntervalMultiset* nocapture, i32, i32) #1 {
  %4 = getelementptr inbounds %struct.NaClIntervalMultiset, %struct.NaClIntervalMultiset* %0, i64 1
  %5 = bitcast %struct.NaClIntervalMultiset* %4 to %struct.NaClIntervalNode**
  %6 = load %struct.NaClIntervalNode*, %struct.NaClIntervalNode** %5, align 8
  %7 = icmp eq %struct.NaClIntervalNode* %6, null
  br i1 %7, label %27, label %8

8:                                                ; preds = %3, %23
  %9 = phi %struct.NaClIntervalNode* [ %25, %23 ], [ %6, %3 ]
  %10 = phi %struct.NaClIntervalNode** [ %24, %23 ], [ %5, %3 ]
  %11 = getelementptr inbounds %struct.NaClIntervalNode, %struct.NaClIntervalNode* %9, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, %1
  br i1 %13, label %14, label %23

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.NaClIntervalNode, %struct.NaClIntervalNode* %9, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, %2
  br i1 %17, label %18, label %23

18:                                               ; preds = %14
  %19 = bitcast %struct.NaClIntervalNode* %9 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %struct.NaClIntervalNode** %10 to i64*
  store i64 %20, i64* %21, align 8
  %22 = bitcast %struct.NaClIntervalNode* %9 to i8*
  tail call void @free(i8* %22) #7
  br label %28

23:                                               ; preds = %8, %14
  %24 = getelementptr inbounds %struct.NaClIntervalNode, %struct.NaClIntervalNode* %9, i64 0, i32 0
  %25 = load %struct.NaClIntervalNode*, %struct.NaClIntervalNode** %24, align 8
  %26 = icmp eq %struct.NaClIntervalNode* %25, null
  br i1 %26, label %27, label %8

27:                                               ; preds = %23, %3
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.1, i64 0, i64 0), i32 %1, i32 %2) #7
  br label %28

28:                                               ; preds = %27, %18
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @NaClIntervalListMultisetOverlapsWith(%struct.NaClIntervalMultiset* nocapture readonly, i32, i32) #2 {
  %4 = getelementptr inbounds %struct.NaClIntervalMultiset, %struct.NaClIntervalMultiset* %0, i64 1
  %5 = bitcast %struct.NaClIntervalMultiset* %4 to %struct.NaClIntervalNode**
  %6 = load %struct.NaClIntervalNode*, %struct.NaClIntervalNode** %5, align 8
  %7 = icmp eq %struct.NaClIntervalNode* %6, null
  br i1 %7, label %21, label %8

8:                                                ; preds = %3, %17
  %9 = phi %struct.NaClIntervalNode* [ %19, %17 ], [ %6, %3 ]
  %10 = getelementptr inbounds %struct.NaClIntervalNode, %struct.NaClIntervalNode* %9, i64 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ugt i32 %11, %2
  br i1 %12, label %17, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.NaClIntervalNode, %struct.NaClIntervalNode* %9, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp ult i32 %15, %1
  br i1 %16, label %17, label %21

17:                                               ; preds = %13, %8
  %18 = getelementptr inbounds %struct.NaClIntervalNode, %struct.NaClIntervalNode* %9, i64 0, i32 0
  %19 = load %struct.NaClIntervalNode*, %struct.NaClIntervalNode** %18, align 8
  %20 = icmp eq %struct.NaClIntervalNode* %19, null
  br i1 %20, label %21, label %8

21:                                               ; preds = %13, %17, %3
  %22 = phi i32 [ 0, %3 ], [ 0, %17 ], [ 1, %13 ]
  ret i32 %22
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

declare void @NaClLog(i32, i8*, ...) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
